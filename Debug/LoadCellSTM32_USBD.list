
LoadCellSTM32_USBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023804  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000072c4  080239d4  080239d4  000339d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802ac98  0802ac98  0003ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802aca0  0802aca0  0003aca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802aca4  0802aca4  0003aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000640  20000000  0802aca8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002c694  20000640  0802b2e8  00040640  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2002ccd4  0802b2e8  0004ccd4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY
 10 .debug_info   000bab02  00000000  00000000  0004066e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a29f  00000000  00000000  000fb170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000209a7  00000000  00000000  0010540f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002788  00000000  00000000  00125db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002638  00000000  00000000  00128540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00015f34  00000000  00000000  0012ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002e650  00000000  00000000  00140aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001150c1  00000000  00000000  0016f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fe  00000000  00000000  002841bd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007a20  00000000  00000000  002842bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000006c  00000000  00000000  0028bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000000e3  00000000  00000000  0028bd48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000640 	.word	0x20000640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080239bc 	.word	0x080239bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000644 	.word	0x20000644
 800020c:	080239bc 	.word	0x080239bc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b97a 	b.w	8000e60 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	468c      	mov	ip, r1
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	9e08      	ldr	r6, [sp, #32]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d151      	bne.n	8000c38 <__udivmoddi4+0xb4>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d96d      	bls.n	8000c76 <__udivmoddi4+0xf2>
 8000b9a:	fab2 fe82 	clz	lr, r2
 8000b9e:	f1be 0f00 	cmp.w	lr, #0
 8000ba2:	d00b      	beq.n	8000bbc <__udivmoddi4+0x38>
 8000ba4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ba8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bc0:	0c25      	lsrs	r5, r4, #16
 8000bc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000bc6:	fa1f f987 	uxth.w	r9, r7
 8000bca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bd2:	fb08 f309 	mul.w	r3, r8, r9
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x6c>
 8000bda:	19ed      	adds	r5, r5, r7
 8000bdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000be0:	f080 8123 	bcs.w	8000e2a <__udivmoddi4+0x2a6>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	f240 8120 	bls.w	8000e2a <__udivmoddi4+0x2a6>
 8000bea:	f1a8 0802 	sub.w	r8, r8, #2
 8000bee:	443d      	add	r5, r7
 8000bf0:	1aed      	subs	r5, r5, r3
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c00:	fb00 f909 	mul.w	r9, r0, r9
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x98>
 8000c08:	19e4      	adds	r4, r4, r7
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 810a 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000c12:	45a1      	cmp	r9, r4
 8000c14:	f240 8107 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 0409 	sub.w	r4, r4, r9
 8000c20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d061      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6034      	str	r4, [r6, #0]
 8000c32:	6073      	str	r3, [r6, #4]
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0xc8>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d054      	beq.n	8000cea <__udivmoddi4+0x166>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f040 808e 	bne.w	8000d72 <__udivmoddi4+0x1ee>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xdc>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80fa 	bhi.w	8000e54 <__udivmoddi4+0x2d0>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb65 0503 	sbc.w	r5, r5, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	46ac      	mov	ip, r5
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d03f      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b912      	cbnz	r2, 8000c7e <__udivmoddi4+0xfa>
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c7e:	fab7 fe87 	clz	lr, r7
 8000c82:	f1be 0f00 	cmp.w	lr, #0
 8000c86:	d134      	bne.n	8000cf2 <__udivmoddi4+0x16e>
 8000c88:	1beb      	subs	r3, r5, r7
 8000c8a:	0c3a      	lsrs	r2, r7, #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	2101      	movs	r1, #1
 8000c92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c96:	0c25      	lsrs	r5, r4, #16
 8000c98:	fb02 3318 	mls	r3, r2, r8, r3
 8000c9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca0:	fb0c f308 	mul.w	r3, ip, r8
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x134>
 8000ca8:	19ed      	adds	r5, r5, r7
 8000caa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x132>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	f200 80d1 	bhi.w	8000e58 <__udivmoddi4+0x2d4>
 8000cb6:	4680      	mov	r8, r0
 8000cb8:	1aed      	subs	r5, r5, r3
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000cc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x15c>
 8000cd0:	19e4      	adds	r4, r4, r7
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x15a>
 8000cd8:	45a4      	cmp	ip, r4
 8000cda:	f200 80b8 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 040c 	sub.w	r4, r4, ip
 8000ce4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce8:	e79d      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000cea:	4631      	mov	r1, r6
 8000cec:	4630      	mov	r0, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1ce 0420 	rsb	r4, lr, #32
 8000cf6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000d02:	0c3a      	lsrs	r2, r7, #16
 8000d04:	fa25 f404 	lsr.w	r4, r5, r4
 8000d08:	ea48 0803 	orr.w	r8, r8, r3
 8000d0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d14:	fb02 4411 	mls	r4, r2, r1, r4
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d20:	fb01 f30c 	mul.w	r3, r1, ip
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x1bc>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d32:	f080 808a 	bcs.w	8000e4a <__udivmoddi4+0x2c6>
 8000d36:	42ab      	cmp	r3, r5
 8000d38:	f240 8087 	bls.w	8000e4a <__udivmoddi4+0x2c6>
 8000d3c:	3902      	subs	r1, #2
 8000d3e:	443d      	add	r5, r7
 8000d40:	1aeb      	subs	r3, r5, r3
 8000d42:	fa1f f588 	uxth.w	r5, r8
 8000d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d52:	fb00 f30c 	mul.w	r3, r0, ip
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x1e6>
 8000d5a:	19ed      	adds	r5, r5, r7
 8000d5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d60:	d26f      	bcs.n	8000e42 <__udivmoddi4+0x2be>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d96d      	bls.n	8000e42 <__udivmoddi4+0x2be>
 8000d66:	3802      	subs	r0, #2
 8000d68:	443d      	add	r5, r7
 8000d6a:	1aeb      	subs	r3, r5, r3
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	e78f      	b.n	8000c92 <__udivmoddi4+0x10e>
 8000d72:	f1c1 0720 	rsb	r7, r1, #32
 8000d76:	fa22 f807 	lsr.w	r8, r2, r7
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d80:	ea48 0303 	orr.w	r3, r8, r3
 8000d84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d8c:	40fd      	lsrs	r5, r7
 8000d8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d9e:	fa1f f883 	uxth.w	r8, r3
 8000da2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da6:	fb09 f408 	mul.w	r4, r9, r8
 8000daa:	42ac      	cmp	r4, r5
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x244>
 8000db6:	18ed      	adds	r5, r5, r3
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	d243      	bcs.n	8000e46 <__udivmoddi4+0x2c2>
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	d941      	bls.n	8000e46 <__udivmoddi4+0x2c2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	441d      	add	r5, r3
 8000dc8:	1b2d      	subs	r5, r5, r4
 8000dca:	fa1f fe8e 	uxth.w	lr, lr
 8000dce:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dd2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dda:	fb00 f808 	mul.w	r8, r0, r8
 8000dde:	45a0      	cmp	r8, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x26e>
 8000de2:	18e4      	adds	r4, r4, r3
 8000de4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de8:	d229      	bcs.n	8000e3e <__udivmoddi4+0x2ba>
 8000dea:	45a0      	cmp	r8, r4
 8000dec:	d927      	bls.n	8000e3e <__udivmoddi4+0x2ba>
 8000dee:	3802      	subs	r0, #2
 8000df0:	441c      	add	r4, r3
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	eba4 0408 	sub.w	r4, r4, r8
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	464d      	mov	r5, r9
 8000e04:	d315      	bcc.n	8000e32 <__udivmoddi4+0x2ae>
 8000e06:	d012      	beq.n	8000e2e <__udivmoddi4+0x2aa>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x29c>
 8000e0a:	ebba 030e 	subs.w	r3, sl, lr
 8000e0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	6037      	str	r7, [r6, #0]
 8000e1e:	6074      	str	r4, [r6, #4]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	4618      	mov	r0, r3
 8000e28:	e6f8      	b.n	8000c1c <__udivmoddi4+0x98>
 8000e2a:	4690      	mov	r8, r2
 8000e2c:	e6e0      	b.n	8000bf0 <__udivmoddi4+0x6c>
 8000e2e:	45c2      	cmp	sl, r8
 8000e30:	d2ea      	bcs.n	8000e08 <__udivmoddi4+0x284>
 8000e32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e36:	eb69 0503 	sbc.w	r5, r9, r3
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e4      	b.n	8000e08 <__udivmoddi4+0x284>
 8000e3e:	4628      	mov	r0, r5
 8000e40:	e7d7      	b.n	8000df2 <__udivmoddi4+0x26e>
 8000e42:	4640      	mov	r0, r8
 8000e44:	e791      	b.n	8000d6a <__udivmoddi4+0x1e6>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e7be      	b.n	8000dc8 <__udivmoddi4+0x244>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	e778      	b.n	8000d40 <__udivmoddi4+0x1bc>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	e745      	b.n	8000ce0 <__udivmoddi4+0x15c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xe6>
 8000e58:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5c:	443d      	add	r5, r7
 8000e5e:	e72b      	b.n	8000cb8 <__udivmoddi4+0x134>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000e70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000e76:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <LL_FillBuffer+0x74>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2134      	movs	r1, #52	; 0x34
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <LL_FillBuffer+0x78>)
 8000e80:	fb01 2303 	mla	r3, r1, r3, r2
 8000e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d00c      	beq.n	8000ea4 <LL_FillBuffer+0x40>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000e8e:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000e92:	9b08      	ldr	r3, [sp, #32]
 8000e94:	60c3      	str	r3, [r0, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <LL_FillBuffer+0x7c>)
 8000e98:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000e9a:	f000 ff11 	bl	8001cc0 <HAL_DMA2D_Init>
 8000e9e:	b128      	cbz	r0, 8000eac <LL_FillBuffer+0x48>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	e7f1      	b.n	8000e90 <LL_FillBuffer+0x2c>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000eac:	4621      	mov	r1, r4
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000eb0:	f000 fff0 	bl	8001e94 <HAL_DMA2D_ConfigLayer>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1f3      	bne.n	8000ea0 <LL_FillBuffer+0x3c>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000eb8:	9700      	str	r7, [sp, #0]
 8000eba:	4633      	mov	r3, r6
 8000ebc:	462a      	mov	r2, r5
 8000ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000ec2:	f000 ff2b 	bl	8001d1c <HAL_DMA2D_Start>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d1ea      	bne.n	8000ea0 <LL_FillBuffer+0x3c>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000eca:	210a      	movs	r1, #10
 8000ecc:	4801      	ldr	r0, [pc, #4]	; (8000ed4 <LL_FillBuffer+0x70>)
 8000ece:	f000 ff41 	bl	8001d54 <HAL_DMA2D_PollForTransfer>
}
 8000ed2:	e7e5      	b.n	8000ea0 <LL_FillBuffer+0x3c>
 8000ed4:	20000678 	.word	0x20000678
 8000ed8:	2000065c 	.word	0x2000065c
 8000edc:	2002b324 	.word	0x2002b324
 8000ee0:	4002b000 	.word	0x4002b000

08000ee4 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <BSP_LCD_GetXSize+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2134      	movs	r1, #52	; 0x34
 8000eea:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <BSP_LCD_GetXSize+0x14>)
 8000eec:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000ef0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ef2:	4770      	bx	lr
 8000ef4:	2000065c 	.word	0x2000065c
 8000ef8:	2002b324 	.word	0x2002b324

08000efc <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <BSP_LCD_GetYSize+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2134      	movs	r1, #52	; 0x34
 8000f02:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <BSP_LCD_GetYSize+0x14>)
 8000f04:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000f08:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000f0a:	4770      	bx	lr
 8000f0c:	2000065c 	.word	0x2000065c
 8000f10:	2002b324 	.word	0x2002b324

08000f14 <BSP_LCD_LayerDefaultInit>:
{     
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	4605      	mov	r5, r0
 8000f1a:	460e      	mov	r6, r1
  layer_cfg.WindowX0 = 0;
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000f20:	f7ff ffe0 	bl	8000ee4 <BSP_LCD_GetXSize>
 8000f24:	9002      	str	r0, [sp, #8]
  layer_cfg.WindowY0 = 0;
 8000f26:	9403      	str	r4, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000f28:	f7ff ffe8 	bl	8000efc <BSP_LCD_GetYSize>
 8000f2c:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f2e:	9405      	str	r4, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
 8000f30:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	9306      	str	r3, [sp, #24]
  layer_cfg.Alpha0 = 0;
 8000f36:	9407      	str	r4, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8000f38:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8000f3c:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8000f40:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f48:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000f4e:	f7ff ffc9 	bl	8000ee4 <BSP_LCD_GetXSize>
 8000f52:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000f54:	f7ff ffd2 	bl	8000efc <BSP_LCD_GetYSize>
 8000f58:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000f5a:	462a      	mov	r2, r5
 8000f5c:	a901      	add	r1, sp, #4
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <BSP_LCD_LayerDefaultInit+0x74>)
 8000f60:	f001 fade 	bl	8002520 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000f64:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <BSP_LCD_LayerDefaultInit+0x78>)
 8000f66:	0068      	lsls	r0, r5, #1
 8000f68:	1941      	adds	r1, r0, r5
 8000f6a:	008b      	lsls	r3, r1, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f72:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f74:	4906      	ldr	r1, [pc, #24]	; (8000f90 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000f76:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000f78:	4428      	add	r0, r5
 8000f7a:	0083      	lsls	r3, r0, #2
 8000f7c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8000f80:	50d1      	str	r1, [r2, r3]
}
 8000f82:	b00e      	add	sp, #56	; 0x38
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
 8000f86:	bf00      	nop
 8000f88:	2002b324 	.word	0x2002b324
 8000f8c:	20000660 	.word	0x20000660
 8000f90:	20000008 	.word	0x20000008

08000f94 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <BSP_LCD_SelectLayer+0x8>)
 8000f96:	6018      	str	r0, [r3, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000065c 	.word	0x2000065c

08000fa0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <BSP_LCD_SetTextColor+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fa8:	009a      	lsls	r2, r3, #2
 8000faa:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <BSP_LCD_SetTextColor+0x14>)
 8000fac:	5098      	str	r0, [r3, r2]
 8000fae:	4770      	bx	lr
 8000fb0:	2000065c 	.word	0x2000065c
 8000fb4:	20000660 	.word	0x20000660

08000fb8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <BSP_LCD_SetBackColor+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fc0:	009a      	lsls	r2, r3, #2
 8000fc2:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <BSP_LCD_SetBackColor+0x18>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	6058      	str	r0, [r3, #4]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000065c 	.word	0x2000065c
 8000fd0:	20000660 	.word	0x20000660

08000fd4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <BSP_LCD_SetFont+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fdc:	009a      	lsls	r2, r3, #2
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <BSP_LCD_SetFont+0x18>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	6098      	str	r0, [r3, #8]
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000065c 	.word	0x2000065c
 8000fec:	20000660 	.word	0x20000660

08000ff0 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <BSP_LCD_GetFont+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ff8:	009a      	lsls	r2, r3, #2
 8000ffa:	4b03      	ldr	r3, [pc, #12]	; (8001008 <BSP_LCD_GetFont+0x18>)
 8000ffc:	4413      	add	r3, r2
}
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000065c 	.word	0x2000065c
 8001008:	20000660 	.word	0x20000660

0800100c <BSP_LCD_Clear>:
{ 
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	4607      	mov	r7, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <BSP_LCD_Clear+0x34>)
 8001014:	681c      	ldr	r4, [r3, #0]
 8001016:	2334      	movs	r3, #52	; 0x34
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <BSP_LCD_Clear+0x38>)
 800101a:	fb03 2304 	mla	r3, r3, r4, r2
 800101e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8001020:	f7ff ff60 	bl	8000ee4 <BSP_LCD_GetXSize>
 8001024:	4606      	mov	r6, r0
 8001026:	f7ff ff69 	bl	8000efc <BSP_LCD_GetYSize>
 800102a:	9701      	str	r7, [sp, #4]
 800102c:	2300      	movs	r3, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4603      	mov	r3, r0
 8001032:	4632      	mov	r2, r6
 8001034:	4629      	mov	r1, r5
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff ff14 	bl	8000e64 <LL_FillBuffer>
}
 800103c:	b003      	add	sp, #12
 800103e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001040:	2000065c 	.word	0x2000065c
 8001044:	2002b324 	.word	0x2002b324

08001048 <BSP_LCD_DrawPixel>:
{
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	4606      	mov	r6, r0
 800104c:	460c      	mov	r4, r1
 800104e:	4615      	mov	r5, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <BSP_LCD_DrawPixel+0x4c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2234      	movs	r2, #52	; 0x34
 8001056:	4910      	ldr	r1, [pc, #64]	; (8001098 <BSP_LCD_DrawPixel+0x50>)
 8001058:	fb02 1203 	mla	r2, r2, r3, r1
 800105c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800105e:	2a02      	cmp	r2, #2
 8001060:	d00b      	beq.n	800107a <BSP_LCD_DrawPixel+0x32>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001062:	2134      	movs	r1, #52	; 0x34
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <BSP_LCD_DrawPixel+0x50>)
 8001066:	fb01 2303 	mla	r3, r1, r3, r2
 800106a:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800106c:	f7ff ff3a 	bl	8000ee4 <BSP_LCD_GetXSize>
 8001070:	fb00 6004 	mla	r0, r0, r4, r6
 8001074:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
 8001078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800107a:	2134      	movs	r1, #52	; 0x34
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <BSP_LCD_DrawPixel+0x50>)
 800107e:	fb01 2303 	mla	r3, r1, r3, r2
 8001082:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001084:	f7ff ff2e 	bl	8000ee4 <BSP_LCD_GetXSize>
 8001088:	fb00 6004 	mla	r0, r0, r4, r6
 800108c:	b2ad      	uxth	r5, r5
 800108e:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
 8001092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001094:	2000065c 	.word	0x2000065c
 8001098:	2002b324 	.word	0x2002b324

0800109c <DrawChar>:
{
 800109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a0:	b083      	sub	sp, #12
 80010a2:	4681      	mov	r9, r0
 80010a4:	460f      	mov	r7, r1
 80010a6:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <DrawChar+0xe0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <DrawChar+0xe4>)
 80010b4:	4413      	add	r3, r2
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	88da      	ldrh	r2, [r3, #6]
 80010ba:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80010bc:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 80010be:	f105 0b07 	add.w	fp, r5, #7
 80010c2:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80010c6:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 80010ca:	fa5f f888 	uxtb.w	r8, r8
 80010ce:	b2eb      	uxtb	r3, r5
 80010d0:	eba8 0803 	sub.w	r8, r8, r3
 80010d4:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 80010d8:	f04f 0a00 	mov.w	sl, #0
 80010dc:	e034      	b.n	8001148 <DrawChar+0xac>
      line =  pchar[0];      
 80010de:	9a00      	ldr	r2, [sp, #0]
 80010e0:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 80010e2:	2400      	movs	r4, #0
 80010e4:	e014      	b.n	8001110 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];      
 80010e6:	9900      	ldr	r1, [sp, #0]
 80010e8:	5ccb      	ldrb	r3, [r1, r3]
 80010ea:	7856      	ldrb	r6, [r2, #1]
 80010ec:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 80010f0:	e7f7      	b.n	80010e2 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <DrawChar+0xe0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010fa:	009a      	lsls	r2, r3, #2
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <DrawChar+0xe4>)
 80010fe:	4413      	add	r3, r2
 8001100:	eb09 0004 	add.w	r0, r9, r4
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4639      	mov	r1, r7
 8001108:	b280      	uxth	r0, r0
 800110a:	f7ff ff9d 	bl	8001048 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800110e:	3401      	adds	r4, #1
 8001110:	42ac      	cmp	r4, r5
 8001112:	d215      	bcs.n	8001140 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8001114:	1b2b      	subs	r3, r5, r4
 8001116:	4443      	add	r3, r8
 8001118:	3b01      	subs	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	421e      	tst	r6, r3
 8001122:	d0e6      	beq.n	80010f2 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <DrawChar+0xe0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	eb09 0004 	add.w	r0, r9, r4
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <DrawChar+0xe4>)
 8001134:	589a      	ldr	r2, [r3, r2]
 8001136:	4639      	mov	r1, r7
 8001138:	b280      	uxth	r0, r0
 800113a:	f7ff ff85 	bl	8001048 <BSP_LCD_DrawPixel>
 800113e:	e7e6      	b.n	800110e <DrawChar+0x72>
    Ypos++;
 8001140:	3701      	adds	r7, #1
 8001142:	b2bf      	uxth	r7, r7
  for(i = 0; i < height; i++)
 8001144:	f10a 0a01 	add.w	sl, sl, #1
 8001148:	9b01      	ldr	r3, [sp, #4]
 800114a:	459a      	cmp	sl, r3
 800114c:	d212      	bcs.n	8001174 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800114e:	fb0b f30a 	mul.w	r3, fp, sl
 8001152:	9a00      	ldr	r2, [sp, #0]
 8001154:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8001156:	f1bb 0f01 	cmp.w	fp, #1
 800115a:	d0c0      	beq.n	80010de <DrawChar+0x42>
 800115c:	f1bb 0f02 	cmp.w	fp, #2
 8001160:	d0c1      	beq.n	80010e6 <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001162:	9900      	ldr	r1, [sp, #0]
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	7856      	ldrb	r6, [r2, #1]
 8001168:	0236      	lsls	r6, r6, #8
 800116a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800116e:	7893      	ldrb	r3, [r2, #2]
 8001170:	431e      	orrs	r6, r3
      break;
 8001172:	e7b6      	b.n	80010e2 <DrawChar+0x46>
}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117a:	bf00      	nop
 800117c:	2000065c 	.word	0x2000065c
 8001180:	20000660 	.word	0x20000660

08001184 <BSP_LCD_DisplayChar>:
{
 8001184:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <BSP_LCD_DisplayChar+0x30>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800118e:	009c      	lsls	r4, r3, #2
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <BSP_LCD_DisplayChar+0x34>)
 8001192:	4423      	add	r3, r4
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	681c      	ldr	r4, [r3, #0]
 8001198:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800119c:	88da      	ldrh	r2, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800119e:	fb02 f205 	mul.w	r2, r2, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	3307      	adds	r3, #7
 80011a6:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80011a8:	fb03 4202 	mla	r2, r3, r2, r4
 80011ac:	f7ff ff76 	bl	800109c <DrawChar>
 80011b0:	bd38      	pop	{r3, r4, r5, pc}
 80011b2:	bf00      	nop
 80011b4:	2000065c 	.word	0x2000065c
 80011b8:	20000660 	.word	0x20000660

080011bc <BSP_LCD_DisplayStringAt>:
{
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c0:	4605      	mov	r5, r0
 80011c2:	460f      	mov	r7, r1
 80011c4:	4616      	mov	r6, r2
 80011c6:	4698      	mov	r8, r3
  uint8_t  *ptr = Text;
 80011c8:	4613      	mov	r3, r2
  uint32_t size = 0, xsize = 0; 
 80011ca:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 80011cc:	e001      	b.n	80011d2 <BSP_LCD_DisplayStringAt+0x16>
 80011ce:	3401      	adds	r4, #1
 80011d0:	4613      	mov	r3, r2
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80011da:	f7ff fe83 	bl	8000ee4 <BSP_LCD_GetXSize>
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <BSP_LCD_DisplayStringAt+0xcc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011e6:	009a      	lsls	r2, r3, #2
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <BSP_LCD_DisplayStringAt+0xd0>)
 80011ea:	4413      	add	r3, r2
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	889a      	ldrh	r2, [r3, #4]
 80011f0:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 80011f4:	f1b8 0f01 	cmp.w	r8, #1
 80011f8:	d007      	beq.n	800120a <BSP_LCD_DisplayStringAt+0x4e>
 80011fa:	f1b8 0f02 	cmp.w	r8, #2
 80011fe:	d00c      	beq.n	800121a <BSP_LCD_DisplayStringAt+0x5e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001200:	b22b      	sxth	r3, r5
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd10      	ble.n	8001228 <BSP_LCD_DisplayStringAt+0x6c>
    ref_column = 1;
 8001206:	2400      	movs	r4, #0
 8001208:	e023      	b.n	8001252 <BSP_LCD_DisplayStringAt+0x96>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800120a:	1b03      	subs	r3, r0, r4
 800120c:	fb03 f302 	mul.w	r3, r3, r2
 8001210:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8001214:	441d      	add	r5, r3
 8001216:	b2ad      	uxth	r5, r5
      break;
 8001218:	e7f2      	b.n	8001200 <BSP_LCD_DisplayStringAt+0x44>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800121a:	1b03      	subs	r3, r0, r4
 800121c:	fb13 f302 	smulbb	r3, r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	1b5d      	subs	r5, r3, r5
 8001224:	b2ad      	uxth	r5, r5
      break;
 8001226:	e7eb      	b.n	8001200 <BSP_LCD_DisplayStringAt+0x44>
    ref_column = 1;
 8001228:	2501      	movs	r5, #1
 800122a:	e7ec      	b.n	8001206 <BSP_LCD_DisplayStringAt+0x4a>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800122c:	4642      	mov	r2, r8
 800122e:	4639      	mov	r1, r7
 8001230:	4628      	mov	r0, r5
 8001232:	f7ff ffa7 	bl	8001184 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <BSP_LCD_DisplayStringAt+0xcc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800123e:	009a      	lsls	r2, r3, #2
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <BSP_LCD_DisplayStringAt+0xd0>)
 8001242:	4413      	add	r3, r2
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	441d      	add	r5, r3
 800124a:	b2ad      	uxth	r5, r5
    Text++;
 800124c:	3601      	adds	r6, #1
    i++;
 800124e:	3401      	adds	r4, #1
 8001250:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001252:	f896 8000 	ldrb.w	r8, [r6]
 8001256:	f7ff fe45 	bl	8000ee4 <BSP_LCD_GetXSize>
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <BSP_LCD_DisplayStringAt+0xcc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001262:	009a      	lsls	r2, r3, #2
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <BSP_LCD_DisplayStringAt+0xd0>)
 8001266:	4413      	add	r3, r2
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	889b      	ldrh	r3, [r3, #4]
 800126c:	fb03 0014 	mls	r0, r3, r4, r0
 8001270:	b280      	uxth	r0, r0
 8001272:	f118 0200 	adds.w	r2, r8, #0
 8001276:	bf18      	it	ne
 8001278:	2201      	movne	r2, #1
 800127a:	4298      	cmp	r0, r3
 800127c:	bf38      	it	cc
 800127e:	2200      	movcc	r2, #0
 8001280:	2a00      	cmp	r2, #0
 8001282:	d1d3      	bne.n	800122c <BSP_LCD_DisplayStringAt+0x70>
}
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	2000065c 	.word	0x2000065c
 800128c:	20000660 	.word	0x20000660

08001290 <BSP_LCD_DisplayStringAtLine>:
{  
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4605      	mov	r5, r0
 8001294:	460c      	mov	r4, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001296:	f7ff feab 	bl	8000ff0 <BSP_LCD_GetFont>
 800129a:	88c1      	ldrh	r1, [r0, #6]
 800129c:	fb11 f105 	smulbb	r1, r1, r5
 80012a0:	2303      	movs	r3, #3
 80012a2:	4622      	mov	r2, r4
 80012a4:	b289      	uxth	r1, r1
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ff88 	bl	80011bc <BSP_LCD_DisplayStringAt>
 80012ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080012b0 <BSP_LCD_FillRect>:
{
 80012b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012b4:	b083      	sub	sp, #12
 80012b6:	4607      	mov	r7, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	4616      	mov	r6, r2
 80012bc:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80012be:	4c1e      	ldr	r4, [pc, #120]	; (8001338 <BSP_LCD_FillRect+0x88>)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012c6:	009a      	lsls	r2, r3, #2
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <BSP_LCD_FillRect+0x8c>)
 80012ca:	5898      	ldr	r0, [r3, r2]
 80012cc:	f7ff fe68 	bl	8000fa0 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012d0:	6824      	ldr	r4, [r4, #0]
 80012d2:	2334      	movs	r3, #52	; 0x34
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <BSP_LCD_FillRect+0x90>)
 80012d6:	fb03 2304 	mla	r3, r3, r4, r2
 80012da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d01e      	beq.n	800131e <BSP_LCD_FillRect+0x6e>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012e0:	2334      	movs	r3, #52	; 0x34
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <BSP_LCD_FillRect+0x90>)
 80012e4:	fb03 2304 	mla	r3, r3, r4, r2
 80012e8:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 80012ec:	f7ff fdfa 	bl	8000ee4 <BSP_LCD_GetXSize>
 80012f0:	fb00 7005 	mla	r0, r0, r5, r7
 80012f4:	eb09 0980 	add.w	r9, r9, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80012f8:	f7ff fdf4 	bl	8000ee4 <BSP_LCD_GetXSize>
 80012fc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001300:	0093      	lsls	r3, r2, #2
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <BSP_LCD_FillRect+0x8c>)
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	9000      	str	r0, [sp, #0]
 800130c:	4643      	mov	r3, r8
 800130e:	4632      	mov	r2, r6
 8001310:	4649      	mov	r1, r9
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fda6 	bl	8000e64 <LL_FillBuffer>
}
 8001318:	b003      	add	sp, #12
 800131a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800131e:	2334      	movs	r3, #52	; 0x34
 8001320:	fb03 2304 	mla	r3, r3, r4, r2
 8001324:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 8001328:	f7ff fddc 	bl	8000ee4 <BSP_LCD_GetXSize>
 800132c:	fb00 7505 	mla	r5, r0, r5, r7
 8001330:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8001334:	e7e0      	b.n	80012f8 <BSP_LCD_FillRect+0x48>
 8001336:	bf00      	nop
 8001338:	2000065c 	.word	0x2000065c
 800133c:	20000660 	.word	0x20000660
 8001340:	2002b324 	.word	0x2002b324

08001344 <BSP_LCD_ClearStringLine>:
{
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001348:	4e11      	ldr	r6, [pc, #68]	; (8001390 <BSP_LCD_ClearStringLine+0x4c>)
 800134a:	6831      	ldr	r1, [r6, #0]
 800134c:	4c11      	ldr	r4, [pc, #68]	; (8001394 <BSP_LCD_ClearStringLine+0x50>)
 800134e:	004b      	lsls	r3, r1, #1
 8001350:	185d      	adds	r5, r3, r1
 8001352:	00aa      	lsls	r2, r5, #2
 8001354:	18a7      	adds	r7, r4, r2
 8001356:	58a5      	ldr	r5, [r4, r2]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001358:	687f      	ldr	r7, [r7, #4]
 800135a:	50a7      	str	r7, [r4, r2]
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800135c:	4422      	add	r2, r4
 800135e:	6893      	ldr	r3, [r2, #8]
 8001360:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 8001364:	fb10 f008 	smulbb	r0, r0, r8
 8001368:	b287      	uxth	r7, r0
 800136a:	f7ff fdbb 	bl	8000ee4 <BSP_LCD_GetXSize>
 800136e:	4643      	mov	r3, r8
 8001370:	b282      	uxth	r2, r0
 8001372:	4639      	mov	r1, r7
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff ff9b 	bl	80012b0 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 800137a:	6833      	ldr	r3, [r6, #0]
 800137c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001380:	009a      	lsls	r2, r3, #2
 8001382:	50a5      	str	r5, [r4, r2]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001384:	4628      	mov	r0, r5
 8001386:	f7ff fe0b 	bl	8000fa0 <BSP_LCD_SetTextColor>
 800138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800138e:	bf00      	nop
 8001390:	2000065c 	.word	0x2000065c
 8001394:	20000660 	.word	0x20000660

08001398 <BSP_LCD_DisplayOn>:
{
 8001398:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <BSP_LCD_DisplayOn+0x28>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	6993      	ldr	r3, [r2, #24]
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <BSP_LCD_DisplayOn+0x2c>)
 80013ae:	f000 ff5f 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80013b2:	2201      	movs	r2, #1
 80013b4:	2108      	movs	r1, #8
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <BSP_LCD_DisplayOn+0x30>)
 80013b8:	f000 ff5a 	bl	8002270 <HAL_GPIO_WritePin>
 80013bc:	bd08      	pop	{r3, pc}
 80013be:	bf00      	nop
 80013c0:	2002b324 	.word	0x2002b324
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40022800 	.word	0x40022800

080013cc <BSP_LCD_MspInit>:
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <BSP_LCD_MspInit+0x130>)
 80013d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013d4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
 80013da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013dc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80013e0:	9200      	str	r2, [sp, #0]
 80013e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ee:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80013f2:	9201      	str	r2, [sp, #4]
 80013f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f042 0210 	orr.w	r2, r2, #16
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f002 0210 	and.w	r2, r2, #16
 8001404:	9202      	str	r2, [sp, #8]
 8001406:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
 8001410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001412:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001416:	9203      	str	r2, [sp, #12]
 8001418:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001428:	9204      	str	r2, [sp, #16]
 800142a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
 8001434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001436:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800143a:	9205      	str	r2, [sp, #20]
 800143c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800143e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001448:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800145e:	9207      	str	r2, [sp, #28]
 8001460:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001474:	2310      	movs	r3, #16
 8001476:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001478:	2402      	movs	r4, #2
 800147a:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001480:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001482:	250e      	movs	r5, #14
 8001484:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001486:	a909      	add	r1, sp, #36	; 0x24
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <BSP_LCD_MspInit+0x134>)
 800148a:	f000 fd65 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800148e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001492:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001494:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001496:	2309      	movs	r3, #9
 8001498:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800149a:	a909      	add	r1, sp, #36	; 0x24
 800149c:	4819      	ldr	r0, [pc, #100]	; (8001504 <BSP_LCD_MspInit+0x138>)
 800149e:	f000 fd5b 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80014a2:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80014a6:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014a8:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014aa:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80014ac:	4e16      	ldr	r6, [pc, #88]	; (8001508 <BSP_LCD_MspInit+0x13c>)
 80014ae:	a909      	add	r1, sp, #36	; 0x24
 80014b0:	4630      	mov	r0, r6
 80014b2:	f000 fd51 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80014b6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80014ba:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014bc:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014be:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80014c0:	a909      	add	r1, sp, #36	; 0x24
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <BSP_LCD_MspInit+0x140>)
 80014c4:	f000 fd48 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80014c8:	23f7      	movs	r3, #247	; 0xf7
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014cc:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014ce:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80014d0:	4c0f      	ldr	r4, [pc, #60]	; (8001510 <BSP_LCD_MspInit+0x144>)
 80014d2:	a909      	add	r1, sp, #36	; 0x24
 80014d4:	4620      	mov	r0, r4
 80014d6:	f000 fd3f 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80014da:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80014dc:	2501      	movs	r5, #1
 80014de:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80014e0:	a909      	add	r1, sp, #36	; 0x24
 80014e2:	4630      	mov	r0, r6
 80014e4:	f000 fd38 	bl	8001f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80014e8:	2308      	movs	r3, #8
 80014ea:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80014ec:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80014ee:	a909      	add	r1, sp, #36	; 0x24
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 fd31 	bl	8001f58 <HAL_GPIO_Init>
}
 80014f6:	b00f      	add	sp, #60	; 0x3c
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40021800 	.word	0x40021800
 8001508:	40022000 	.word	0x40022000
 800150c:	40022400 	.word	0x40022400
 8001510:	40022800 	.word	0x40022800

08001514 <BSP_LCD_ClockConfig>:
{
 8001514:	b508      	push	{r3, lr}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <BSP_LCD_ClockConfig+0x1c>)
 8001518:	2308      	movs	r3, #8
 800151a:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001520:	2305      	movs	r3, #5
 8001522:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001528:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800152a:	f002 fa53 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	bd08      	pop	{r3, pc}
 8001530:	200006b8 	.word	0x200006b8

08001534 <BSP_LCD_Init>:
{    
 8001534:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001536:	4c25      	ldr	r4, [pc, #148]	; (80015cc <BSP_LCD_Init+0x98>)
 8001538:	2328      	movs	r3, #40	; 0x28
 800153a:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800153c:	2309      	movs	r3, #9
 800153e:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001540:	2335      	movs	r3, #53	; 0x35
 8001542:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001544:	230b      	movs	r3, #11
 8001546:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001548:	f240 131b 	movw	r3, #283	; 0x11b
 800154c:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800154e:	f240 2315 	movw	r3, #533	; 0x215
 8001552:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001554:	f240 131d 	movw	r3, #285	; 0x11d
 8001558:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800155a:	f240 2335 	movw	r3, #565	; 0x235
 800155e:	62e3      	str	r3, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001560:	2100      	movs	r1, #0
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff ffd6 	bl	8001514 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001568:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800156c:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800156e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001572:	6663      	str	r3, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800157a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800157e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001582:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001584:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001586:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001588:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <BSP_LCD_Init+0x9c>)
 800158c:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800158e:	4620      	mov	r0, r4
 8001590:	f001 f8fe 	bl	8002790 <HAL_LTDC_GetState>
 8001594:	b1a0      	cbz	r0, 80015c0 <BSP_LCD_Init+0x8c>
  HAL_LTDC_Init(&hLtdcHandler);
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <BSP_LCD_Init+0x98>)
 8001598:	f000 ff38 	bl	800240c <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <BSP_LCD_Init+0xa0>)
 80015a4:	f000 fe64 	bl	8002270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2108      	movs	r1, #8
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <BSP_LCD_Init+0xa4>)
 80015ae:	f000 fe5f 	bl	8002270 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80015b2:	f00a f94f 	bl	800b854 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <BSP_LCD_Init+0xa8>)
 80015b8:	f7ff fd0c 	bl	8000fd4 <BSP_LCD_SetFont>
}
 80015bc:	2000      	movs	r0, #0
 80015be:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80015c0:	2100      	movs	r1, #0
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff02 	bl	80013cc <BSP_LCD_MspInit>
 80015c8:	e7e5      	b.n	8001596 <BSP_LCD_Init+0x62>
 80015ca:	bf00      	nop
 80015cc:	2002b324 	.word	0x2002b324
 80015d0:	40016800 	.word	0x40016800
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022800 	.word	0x40022800
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f000 fa46 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f00b fedd 	bl	800d3a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015ee:	f00b fe0d 	bl	800d20c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80015f2:	2000      	movs	r0, #0
 80015f4:	bd08      	pop	{r3, pc}
	...

080015f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x10>)
 80015fa:	6811      	ldr	r1, [r2, #0]
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_IncTick+0x14>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	440b      	add	r3, r1
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	2002b3cc 	.word	0x2002b3cc
 800160c:	20000010 	.word	0x20000010

08001610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <HAL_GetTick+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2002b3cc 	.word	0x2002b3cc

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff fff6 	bl	8001610 <HAL_GetTick>
 8001624:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	f1b4 3fff 	cmp.w	r4, #4294967295
 800162a:	d002      	beq.n	8001632 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_Delay+0x24>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	f7ff ffed 	bl	8001610 <HAL_GetTick>
 8001636:	1b40      	subs	r0, r0, r5
 8001638:	4284      	cmp	r4, r0
 800163a:	d8fa      	bhi.n	8001632 <HAL_Delay+0x16>
  {
  }
}
 800163c:	bd38      	pop	{r3, r4, r5, pc}
 800163e:	bf00      	nop
 8001640:	20000010 	.word	0x20000010

08001644 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <ADC_Init+0x128>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800164c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	6841      	ldr	r1, [r0, #4]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001656:	6802      	ldr	r2, [r0, #0]
 8001658:	6853      	ldr	r3, [r2, #4]
 800165a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800165e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	6853      	ldr	r3, [r2, #4]
 8001664:	6901      	ldr	r1, [r0, #16]
 8001666:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800166a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	6853      	ldr	r3, [r2, #4]
 8001670:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001674:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	6802      	ldr	r2, [r0, #0]
 8001678:	6853      	ldr	r3, [r2, #4]
 800167a:	6881      	ldr	r1, [r0, #8]
 800167c:	430b      	orrs	r3, r1
 800167e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	6893      	ldr	r3, [r2, #8]
 8001684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001688:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800168a:	6802      	ldr	r2, [r0, #0]
 800168c:	6893      	ldr	r3, [r2, #8]
 800168e:	68c1      	ldr	r1, [r0, #12]
 8001690:	430b      	orrs	r3, r1
 8001692:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001694:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <ADC_Init+0x12c>)
 8001698:	429a      	cmp	r2, r3
 800169a:	d049      	beq.n	8001730 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	6893      	ldr	r3, [r2, #8]
 80016a0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80016a4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016a6:	6802      	ldr	r2, [r0, #0]
 80016a8:	6893      	ldr	r3, [r2, #8]
 80016aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b0:	6802      	ldr	r2, [r0, #0]
 80016b2:	6893      	ldr	r3, [r2, #8]
 80016b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016b8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ba:	6802      	ldr	r2, [r0, #0]
 80016bc:	6893      	ldr	r3, [r2, #8]
 80016be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016c4:	6802      	ldr	r2, [r0, #0]
 80016c6:	6893      	ldr	r3, [r2, #8]
 80016c8:	f023 0302 	bic.w	r3, r3, #2
 80016cc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80016ce:	6802      	ldr	r2, [r0, #0]
 80016d0:	6893      	ldr	r3, [r2, #8]
 80016d2:	6981      	ldr	r1, [r0, #24]
 80016d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80016d8:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016da:	6a03      	ldr	r3, [r0, #32]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d132      	bne.n	8001746 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	6853      	ldr	r3, [r2, #4]
 80016e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016e8:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ea:	6802      	ldr	r2, [r0, #0]
 80016ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80016f8:	69c2      	ldr	r2, [r0, #28]
 80016fa:	3a01      	subs	r2, #1
 80016fc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001700:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	6893      	ldr	r3, [r2, #8]
 8001706:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800170a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800170c:	6802      	ldr	r2, [r0, #0]
 800170e:	6893      	ldr	r3, [r2, #8]
 8001710:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001712:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001716:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001718:	6802      	ldr	r2, [r0, #0]
 800171a:	6893      	ldr	r3, [r2, #8]
 800171c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001720:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001722:	6802      	ldr	r2, [r0, #0]
 8001724:	6893      	ldr	r3, [r2, #8]
 8001726:	6941      	ldr	r1, [r0, #20]
 8001728:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800172c:	6093      	str	r3, [r2, #8]
 800172e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	6893      	ldr	r3, [r2, #8]
 8001734:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001738:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	6893      	ldr	r3, [r2, #8]
 800173e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001742:	6093      	str	r3, [r2, #8]
 8001744:	e7be      	b.n	80016c4 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001746:	6802      	ldr	r2, [r0, #0]
 8001748:	6853      	ldr	r3, [r2, #4]
 800174a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	6853      	ldr	r3, [r2, #4]
 8001754:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001758:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800175a:	6801      	ldr	r1, [r0, #0]
 800175c:	684b      	ldr	r3, [r1, #4]
 800175e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001760:	3a01      	subs	r2, #1
 8001762:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e7bf      	b.n	80016ea <ADC_Init+0xa6>
 800176a:	bf00      	nop
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001774:	b320      	cbz	r0, 80017c0 <HAL_ADC_Init+0x4c>
{
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800177a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800177c:	b143      	cbz	r3, 8001790 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001780:	f013 0f10 	tst.w	r3, #16
 8001784:	d00a      	beq.n	800179c <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 8001786:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001788:	2300      	movs	r3, #0
 800178a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800178e:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001796:	f00b fd69 	bl	800d26c <HAL_ADC_MspInit>
 800179a:	e7f0      	b.n	800177e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800179c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_ADC_Init+0x50>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff ff4b 	bl	8001644 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	2000      	movs	r0, #0
 80017b0:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80017b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017b4:	f023 0303 	bic.w	r3, r3, #3
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6423      	str	r3, [r4, #64]	; 0x40
 80017be:	e7e3      	b.n	8001788 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	4770      	bx	lr
 80017c4:	ffffeefd 	.word	0xffffeefd

080017c8 <HAL_ADC_Start>:
{
 80017c8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80017ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d061      	beq.n	800189a <HAL_ADC_Start+0xd2>
 80017d6:	2301      	movs	r3, #1
 80017d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	f012 0f01 	tst.w	r2, #1
 80017e4:	d113      	bne.n	800180e <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_ADC_Start+0xe4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_ADC_Start+0xe8>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0c9b      	lsrs	r3, r3, #18
 80017fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017fe:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Start+0x40>
      counter--;
 8001802:	9b01      	ldr	r3, [sp, #4]
 8001804:	3b01      	subs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800180e:	6802      	ldr	r2, [r0, #0]
 8001810:	6893      	ldr	r3, [r2, #8]
 8001812:	f013 0f01 	tst.w	r3, #1
 8001816:	d043      	beq.n	80018a0 <HAL_ADC_Start+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 8001818:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_ADC_Start+0xec>)
 800181c:	400b      	ands	r3, r1
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001824:	6853      	ldr	r3, [r2, #4]
 8001826:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800182a:	d005      	beq.n	8001838 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800182c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800182e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001836:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001838:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800183a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800183e:	d019      	beq.n	8001874 <HAL_ADC_Start+0xac>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001840:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001842:	f023 0306 	bic.w	r3, r3, #6
 8001846:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001848:	2300      	movs	r3, #0
 800184a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800184e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001852:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_ADC_Start+0xf0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f013 0f1f 	tst.w	r3, #31
 800185c:	d10d      	bne.n	800187a <HAL_ADC_Start+0xb2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001866:	d11d      	bne.n	80018a4 <HAL_ADC_Start+0xdc>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800186e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e013      	b.n	800189c <HAL_ADC_Start+0xd4>
      ADC_CLEAR_ERRORCODE(hadc);
 8001874:	2300      	movs	r3, #0
 8001876:	6443      	str	r3, [r0, #68]	; 0x44
 8001878:	e7e6      	b.n	8001848 <HAL_ADC_Start+0x80>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800187a:	6803      	ldr	r3, [r0, #0]
 800187c:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_ADC_Start+0xf4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d001      	beq.n	8001886 <HAL_ADC_Start+0xbe>
  return HAL_OK;
 8001882:	2000      	movs	r0, #0
 8001884:	e00a      	b.n	800189c <HAL_ADC_Start+0xd4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800188c:	d10c      	bne.n	80018a8 <HAL_ADC_Start+0xe0>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001896:	2000      	movs	r0, #0
 8001898:	e000      	b.n	800189c <HAL_ADC_Start+0xd4>
  __HAL_LOCK(hadc);
 800189a:	2002      	movs	r0, #2
}
 800189c:	b002      	add	sp, #8
 800189e:	4770      	bx	lr
  return HAL_OK;
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7fb      	b.n	800189c <HAL_ADC_Start+0xd4>
 80018a4:	2000      	movs	r0, #0
 80018a6:	e7f9      	b.n	800189c <HAL_ADC_Start+0xd4>
 80018a8:	2000      	movs	r0, #0
 80018aa:	e7f7      	b.n	800189c <HAL_ADC_Start+0xd4>
 80018ac:	200000c0 	.word	0x200000c0
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	fffff8fe 	.word	0xfffff8fe
 80018b8:	40012300 	.word	0x40012300
 80018bc:	40012000 	.word	0x40012000

080018c0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_ADC_ConfigChannel>:
{
 80018c8:	b430      	push	{r4, r5}
 80018ca:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80018d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	f000 80c0 	beq.w	8001a5a <HAL_ADC_ConfigChannel+0x192>
 80018da:	2301      	movs	r3, #1
 80018dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 80018e0:	680b      	ldr	r3, [r1, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d922      	bls.n	800192c <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018e6:	6805      	ldr	r5, [r0, #0]
 80018e8:	68ea      	ldr	r2, [r5, #12]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2407      	movs	r4, #7
 80018f4:	fa04 f303 	lsl.w	r3, r4, r3
 80018f8:	ea22 0303 	bic.w	r3, r2, r3
 80018fc:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fe:	680b      	ldr	r3, [r1, #0]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_ADC_ConfigChannel+0x198>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00b      	beq.n	800191e <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001906:	6805      	ldr	r5, [r0, #0]
 8001908:	68ea      	ldr	r2, [r5, #12]
 800190a:	688c      	ldr	r4, [r1, #8]
 800190c:	b29b      	uxth	r3, r3
 800190e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001912:	3b1e      	subs	r3, #30
 8001914:	fa04 f303 	lsl.w	r3, r4, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	60eb      	str	r3, [r5, #12]
 800191c:	e01b      	b.n	8001956 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800191e:	6802      	ldr	r2, [r0, #0]
 8001920:	68d3      	ldr	r3, [r2, #12]
 8001922:	688c      	ldr	r4, [r1, #8]
 8001924:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001928:	60d3      	str	r3, [r2, #12]
 800192a:	e014      	b.n	8001956 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800192c:	6805      	ldr	r5, [r0, #0]
 800192e:	692a      	ldr	r2, [r5, #16]
 8001930:	b29b      	uxth	r3, r3
 8001932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001936:	2407      	movs	r4, #7
 8001938:	fa04 f303 	lsl.w	r3, r4, r3
 800193c:	ea22 0303 	bic.w	r3, r2, r3
 8001940:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001942:	6805      	ldr	r5, [r0, #0]
 8001944:	692a      	ldr	r2, [r5, #16]
 8001946:	688c      	ldr	r4, [r1, #8]
 8001948:	880b      	ldrh	r3, [r1, #0]
 800194a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800194e:	fa04 f303 	lsl.w	r3, r4, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 8001956:	684b      	ldr	r3, [r1, #4]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d824      	bhi.n	80019a6 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195c:	6805      	ldr	r5, [r0, #0]
 800195e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001960:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001964:	3b05      	subs	r3, #5
 8001966:	241f      	movs	r4, #31
 8001968:	fa04 f303 	lsl.w	r3, r4, r3
 800196c:	ea22 0303 	bic.w	r3, r2, r3
 8001970:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001972:	6805      	ldr	r5, [r0, #0]
 8001974:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001976:	684b      	ldr	r3, [r1, #4]
 8001978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800197c:	3b05      	subs	r3, #5
 800197e:	880c      	ldrh	r4, [r1, #0]
 8001980:	fa04 f303 	lsl.w	r3, r4, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_ADC_ConfigChannel+0x19c>)
 800198c:	429a      	cmp	r2, r3
 800198e:	d03a      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_ADC_ConfigChannel+0x19c>)
 8001994:	429a      	cmp	r2, r3
 8001996:	d03f      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 8001998:	2300      	movs	r3, #0
 800199a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800199e:	4618      	mov	r0, r3
}
 80019a0:	b002      	add	sp, #8
 80019a2:	bc30      	pop	{r4, r5}
 80019a4:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d816      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019aa:	6805      	ldr	r5, [r0, #0]
 80019ac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019b2:	3b23      	subs	r3, #35	; 0x23
 80019b4:	241f      	movs	r4, #31
 80019b6:	fa04 f303 	lsl.w	r3, r4, r3
 80019ba:	ea22 0303 	bic.w	r3, r2, r3
 80019be:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c0:	6805      	ldr	r5, [r0, #0]
 80019c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019c4:	684b      	ldr	r3, [r1, #4]
 80019c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019ca:	3b23      	subs	r3, #35	; 0x23
 80019cc:	880c      	ldrh	r4, [r1, #0]
 80019ce:	fa04 f303 	lsl.w	r3, r4, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	632b      	str	r3, [r5, #48]	; 0x30
 80019d6:	e7d7      	b.n	8001988 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d8:	6805      	ldr	r5, [r0, #0]
 80019da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80019dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019e0:	3b41      	subs	r3, #65	; 0x41
 80019e2:	241f      	movs	r4, #31
 80019e4:	fa04 f303 	lsl.w	r3, r4, r3
 80019e8:	ea22 0303 	bic.w	r3, r2, r3
 80019ec:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ee:	6805      	ldr	r5, [r0, #0]
 80019f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80019f2:	684b      	ldr	r3, [r1, #4]
 80019f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019f8:	3b41      	subs	r3, #65	; 0x41
 80019fa:	880c      	ldrh	r4, [r1, #0]
 80019fc:	fa04 f303 	lsl.w	r3, r4, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a04:	e7c0      	b.n	8001988 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a06:	680b      	ldr	r3, [r1, #0]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d1c1      	bne.n	8001990 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a0e:	6853      	ldr	r3, [r2, #4]
 8001a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a14:	6053      	str	r3, [r2, #4]
 8001a16:	e7bb      	b.n	8001990 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_ADC_ConfigChannel+0x198>)
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	bf18      	it	ne
 8001a20:	4293      	cmpne	r3, r2
 8001a22:	d1b9      	bne.n	8001998 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a26:	6853      	ldr	r3, [r2, #4]
 8001a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a2c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2e:	680a      	ldr	r2, [r1, #0]
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_ADC_ConfigChannel+0x198>)
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d1b0      	bne.n	8001998 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_ADC_ConfigChannel+0x1a4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_ADC_ConfigChannel+0x1a8>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x184>
 8001a58:	e79e      	b.n	8001998 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	e7a0      	b.n	80019a0 <HAL_ADC_ConfigChannel+0xd8>
 8001a5e:	bf00      	nop
 8001a60:	10000012 	.word	0x10000012
 8001a64:	40012000 	.word	0x40012000
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	200000c0 	.word	0x200000c0
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4906      	ldr	r1, [pc, #24]	; (8001a90 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001a76:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a80:	0200      	lsls	r0, r0, #8
 8001a82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a86:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a88:	4a02      	ldr	r2, [pc, #8]	; (8001a94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a8a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001a8c:	60ca      	str	r2, [r1, #12]
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	05fa0000 	.word	0x05fa0000

08001a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a98:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_NVIC_SetPriority+0x54>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa2:	f1c3 0407 	rsb	r4, r3, #7
 8001aa6:	2c04      	cmp	r4, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aac:	1d1d      	adds	r5, r3, #4
 8001aae:	2d06      	cmp	r5, #6
 8001ab0:	d913      	bls.n	8001ada <HAL_NVIC_SetPriority+0x42>
 8001ab2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	2501      	movs	r5, #1
 8001ab6:	fa05 f404 	lsl.w	r4, r5, r4
 8001aba:	3c01      	subs	r4, #1
 8001abc:	4021      	ands	r1, r4
 8001abe:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	fa05 f303 	lsl.w	r3, r5, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001aca:	2800      	cmp	r0, #0
 8001acc:	db07      	blt.n	8001ade <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	0109      	lsls	r1, r1, #4
 8001ad0:	b2c9      	uxtb	r1, r1
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_NVIC_SetPriority+0x58>)
 8001ad4:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ad6:	bc30      	pop	{r4, r5}
 8001ad8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	2300      	movs	r3, #0
 8001adc:	e7ea      	b.n	8001ab4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	f000 000f 	and.w	r0, r0, #15
 8001ae2:	0109      	lsls	r1, r1, #4
 8001ae4:	b2c9      	uxtb	r1, r1
 8001ae6:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_NVIC_SetPriority+0x5c>)
 8001ae8:	5419      	strb	r1, [r3, r0]
 8001aea:	e7f4      	b.n	8001ad6 <HAL_NVIC_SetPriority+0x3e>
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	e000e400 	.word	0xe000e400
 8001af4:	e000ed14 	.word	0xe000ed14

08001af8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001af8:	0942      	lsrs	r2, r0, #5
 8001afa:	f000 001f 	and.w	r0, r0, #31
 8001afe:	2301      	movs	r3, #1
 8001b00:	fa03 f000 	lsl.w	r0, r3, r0
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_NVIC_EnableIRQ+0x14>)
 8001b06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	3801      	subs	r0, #1
 8001b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b16:	d20a      	bcs.n	8001b2e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_SYSTICK_Config+0x24>)
 8001b1a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	21f0      	movs	r1, #240	; 0xf0
 8001b1e:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_SYSTICK_Config+0x28>)
 8001b20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	2000      	movs	r0, #0
 8001b26:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b3c:	2804      	cmp	r0, #4
 8001b3e:	d005      	beq.n	8001b4c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b4c:	4a02      	ldr	r2, [pc, #8]	; (8001b58 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4770      	bx	lr
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d038      	beq.n	8001bd2 <HAL_CRC_Init+0x76>
{
 8001b60:	b510      	push	{r4, lr}
 8001b62:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8001b64:	7f43      	ldrb	r3, [r0, #29]
 8001b66:	b31b      	cbz	r3, 8001bb0 <HAL_CRC_Init+0x54>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b6c:	7923      	ldrb	r3, [r4, #4]
 8001b6e:	bb1b      	cbnz	r3, 8001bb8 <HAL_CRC_Init+0x5c>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_CRC_Init+0x7c>)
 8001b74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6893      	ldr	r3, [r2, #8]
 8001b7a:	f023 0318 	bic.w	r3, r3, #24
 8001b7e:	6093      	str	r3, [r2, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b80:	7963      	ldrb	r3, [r4, #5]
 8001b82:	bb13      	cbnz	r3, 8001bca <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8a:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	6893      	ldr	r3, [r2, #8]
 8001b90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b94:	6961      	ldr	r1, [r4, #20]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6093      	str	r3, [r2, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6893      	ldr	r3, [r2, #8]
 8001b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba2:	69a1      	ldr	r1, [r4, #24]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	7763      	strb	r3, [r4, #29]
  
  /* Return function status */
  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
 8001bae:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001bb0:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001bb2:	f00b fb89 	bl	800d2c8 <HAL_CRC_MspInit>
 8001bb6:	e7d7      	b.n	8001b68 <HAL_CRC_Init+0xc>
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001bb8:	68e2      	ldr	r2, [r4, #12]
 8001bba:	68a1      	ldr	r1, [r4, #8]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f000 f80d 	bl	8001bdc <HAL_CRCEx_Polynomial_Set>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0dc      	beq.n	8001b80 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
}
 8001bc8:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	6922      	ldr	r2, [r4, #16]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	e7dc      	b.n	8001b8c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	04c11db7 	.word	0x04c11db7

08001bdc <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001bdc:	b410      	push	{r4}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001bde:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8001be0:	e000      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0x8>
 8001be2:	4623      	mov	r3, r4
 8001be4:	fa21 f403 	lsr.w	r4, r1, r3
 8001be8:	f014 0f01 	tst.w	r4, #1
 8001bec:	d103      	bne.n	8001bf6 <HAL_CRCEx_Polynomial_Set+0x1a>
 8001bee:	1e5c      	subs	r4, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f6      	bne.n	8001be2 <HAL_CRCEx_Polynomial_Set+0x6>
 8001bf4:	4623      	mov	r3, r4
  {
  }

  switch (PolyLength)
 8001bf6:	2a10      	cmp	r2, #16
 8001bf8:	d013      	beq.n	8001c22 <HAL_CRCEx_Polynomial_Set+0x46>
 8001bfa:	2a18      	cmp	r2, #24
 8001bfc:	d00d      	beq.n	8001c1a <HAL_CRCEx_Polynomial_Set+0x3e>
 8001bfe:	2a08      	cmp	r2, #8
 8001c00:	d013      	beq.n	8001c2a <HAL_CRCEx_Polynomial_Set+0x4e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8001c02:	6803      	ldr	r3, [r0, #0]
 8001c04:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8001c06:	6801      	ldr	r1, [r0, #0]
 8001c08:	688b      	ldr	r3, [r1, #8]
 8001c0a:	f023 0318 	bic.w	r3, r3, #24
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8001c12:	2000      	movs	r0, #0
}
 8001c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c18:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d9f1      	bls.n	8001c02 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
 8001c20:	e7f8      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d9ed      	bls.n	8001c02 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
 8001c28:	e7f4      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	d9e9      	bls.n	8001c02 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e7f0      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0x38>

08001c32 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001c32:	b470      	push	{r4, r5, r6}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001c34:	6806      	ldr	r6, [r0, #0]
 8001c36:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8001c38:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001c3c:	9d03      	ldr	r5, [sp, #12]
 8001c3e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001c42:	431c      	orrs	r4, r3
 8001c44:	6474      	str	r4, [r6, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001c4a:	6843      	ldr	r3, [r0, #4]
 8001c4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c50:	d003      	beq.n	8001c5a <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001c52:	6803      	ldr	r3, [r0, #0]
 8001c54:	60d9      	str	r1, [r3, #12]
  }
}
 8001c56:	bc70      	pop	{r4, r5, r6}
 8001c58:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001c5a:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001c5e:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001c62:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001c66:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001c68:	6884      	ldr	r4, [r0, #8]
 8001c6a:	b17c      	cbz	r4, 8001c8c <DMA2D_SetConfig+0x5a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001c6c:	2c01      	cmp	r4, #1
 8001c6e:	d010      	beq.n	8001c92 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c70:	2c02      	cmp	r4, #2
 8001c72:	d011      	beq.n	8001c98 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001c74:	2c03      	cmp	r4, #3
 8001c76:	d017      	beq.n	8001ca8 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28);
 8001c78:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20);
 8001c7a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12);
 8001c7c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001c7e:	0209      	lsls	r1, r1, #8
 8001c80:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001c84:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8001c88:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8001c8c:	6803      	ldr	r3, [r0, #0]
 8001c8e:	6399      	str	r1, [r3, #56]	; 0x38
 8001c90:	e7e1      	b.n	8001c56 <DMA2D_SetConfig+0x24>
      tmp = (tmp3 | tmp2 | tmp4);  
 8001c92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001c96:	e7f9      	b.n	8001c8c <DMA2D_SetConfig+0x5a>
      tmp2 = (tmp2 >> 19);
 8001c98:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10);
 8001c9a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001c9c:	02d9      	lsls	r1, r3, #11
 8001c9e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001ca2:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001ca6:	e7f1      	b.n	8001c8c <DMA2D_SetConfig+0x5a>
      tmp1 = (tmp1 >> 31);
 8001ca8:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19);
 8001caa:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 8001cac:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001cae:	0299      	lsls	r1, r3, #10
 8001cb0:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001cb4:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8001cb8:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001cbc:	e7e6      	b.n	8001c8c <DMA2D_SetConfig+0x5a>
	...

08001cc0 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001cc0:	b338      	cbz	r0, 8001d12 <HAL_DMA2D_Init+0x52>
{ 
 8001cc2:	b510      	push	{r4, lr}
 8001cc4:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cc6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cca:	b1eb      	cbz	r3, 8001d08 <HAL_DMA2D_Init+0x48>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cd2:	6822      	ldr	r2, [r4, #0]
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cda:	6861      	ldr	r1, [r4, #4]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001ce4:	f023 0307 	bic.w	r3, r3, #7
 8001ce8:	68a1      	ldr	r1, [r4, #8]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_DMA2D_Init+0x58>)
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	68e1      	ldr	r1, [r4, #12]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d06:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001d08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001d0c:	f008 ff82 	bl	800ac14 <HAL_DMA2D_MspInit>
 8001d10:	e7dc      	b.n	8001ccc <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	ffffc000 	.word	0xffffc000

08001d1c <HAL_DMA2D_Start>:
{
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 8001d20:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001d24:	2c01      	cmp	r4, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_DMA2D_Start+0x12>
 8001d28:	2002      	movs	r0, #2
}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d36:	2002      	movs	r0, #2
 8001d38:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001d3c:	9804      	ldr	r0, [sp, #16]
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff76 	bl	8001c32 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
 8001d52:	e7ea      	b.n	8001d2a <HAL_DMA2D_Start+0xe>

08001d54 <HAL_DMA2D_PollForTransfer>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	4604      	mov	r4, r0
 8001d5a:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0;  
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001d60:	6803      	ldr	r3, [r0, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f013 0f01 	tst.w	r3, #1
 8001d68:	d12a      	bne.n	8001dc0 <HAL_DMA2D_PollForTransfer+0x6c>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	f012 0f20 	tst.w	r2, #32
 8001d72:	d103      	bne.n	8001d7c <HAL_DMA2D_PollForTransfer+0x28>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d76:	f013 0f20 	tst.w	r3, #32
 8001d7a:	d07f      	beq.n	8001e7c <HAL_DMA2D_PollForTransfer+0x128>
    tickstart = HAL_GetTick();
 8001d7c:	f7ff fc48 	bl	8001610 <HAL_GetTick>
 8001d80:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	f012 0f10 	tst.w	r2, #16
 8001d8a:	d177      	bne.n	8001e7c <HAL_DMA2D_PollForTransfer+0x128>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001d90:	9a01      	ldr	r2, [sp, #4]
 8001d92:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d96:	d14f      	bne.n	8001e38 <HAL_DMA2D_PollForTransfer+0xe4>
      if(Timeout != HAL_MAX_DELAY)
 8001d98:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d9c:	d0f1      	beq.n	8001d82 <HAL_DMA2D_PollForTransfer+0x2e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d9e:	b125      	cbz	r5, 8001daa <HAL_DMA2D_PollForTransfer+0x56>
 8001da0:	f7ff fc36 	bl	8001610 <HAL_GetTick>
 8001da4:	1b80      	subs	r0, r0, r6
 8001da6:	4285      	cmp	r5, r0
 8001da8:	d2eb      	bcs.n	8001d82 <HAL_DMA2D_PollForTransfer+0x2e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001daa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001db2:	2003      	movs	r0, #3
 8001db4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001db8:	2300      	movs	r3, #0
 8001dba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001dbe:	e066      	b.n	8001e8e <HAL_DMA2D_PollForTransfer+0x13a>
   tickstart = HAL_GetTick();
 8001dc0:	f7ff fc26 	bl	8001610 <HAL_GetTick>
 8001dc4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	f012 0f02 	tst.w	r2, #2
 8001dce:	d1cc      	bne.n	8001d6a <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001dd4:	9a01      	ldr	r2, [sp, #4]
 8001dd6:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001dda:	d113      	bne.n	8001e04 <HAL_DMA2D_PollForTransfer+0xb0>
      if(Timeout != HAL_MAX_DELAY)
 8001ddc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001de0:	d0f1      	beq.n	8001dc6 <HAL_DMA2D_PollForTransfer+0x72>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001de2:	b125      	cbz	r5, 8001dee <HAL_DMA2D_PollForTransfer+0x9a>
 8001de4:	f7ff fc14 	bl	8001610 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	4285      	cmp	r5, r0
 8001dec:	d2eb      	bcs.n	8001dc6 <HAL_DMA2D_PollForTransfer+0x72>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001df6:	2003      	movs	r0, #3
 8001df8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001e02:	e044      	b.n	8001e8e <HAL_DMA2D_PollForTransfer+0x13a>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001e04:	9a01      	ldr	r2, [sp, #4]
 8001e06:	f012 0f20 	tst.w	r2, #32
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA2D_PollForTransfer+0xc0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001e0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e0e:	f042 0202 	orr.w	r2, r2, #2
 8001e12:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	f012 0f01 	tst.w	r2, #1
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001e1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e24:	2221      	movs	r2, #33	; 0x21
 8001e26:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
 8001e36:	e02a      	b.n	8001e8e <HAL_DMA2D_PollForTransfer+0x13a>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001e38:	9a01      	ldr	r2, [sp, #4]
 8001e3a:	f012 0f08 	tst.w	r2, #8
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001e40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e42:	f042 0204 	orr.w	r2, r2, #4
 8001e46:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001e48:	9a01      	ldr	r2, [sp, #4]
 8001e4a:	f012 0f20 	tst.w	r2, #32
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA2D_PollForTransfer+0x104>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001e50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e52:	f042 0202 	orr.w	r2, r2, #2
 8001e56:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001e58:	9a01      	ldr	r2, [sp, #4]
 8001e5a:	f012 0f01 	tst.w	r2, #1
 8001e5e:	d003      	beq.n	8001e68 <HAL_DMA2D_PollForTransfer+0x114>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001e60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e68:	2229      	movs	r2, #41	; 0x29
 8001e6a:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001e72:	2300      	movs	r3, #0
 8001e74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;      
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e008      	b.n	8001e8e <HAL_DMA2D_PollForTransfer+0x13a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	2212      	movs	r2, #18
 8001e80:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e94 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001e94:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d059      	beq.n	8001f50 <HAL_DMA2D_ConfigLayer+0xbc>
{ 
 8001e9c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001eaa:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	1c8b      	adds	r3, r1, #2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	58c3      	ldr	r3, [r0, r3]
 8001eb6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eba:	3a09      	subs	r2, #9
 8001ebc:	2a01      	cmp	r2, #1
 8001ebe:	d91e      	bls.n	8001efe <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ec0:	1c8a      	adds	r2, r1, #2
 8001ec2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001ec6:	6852      	ldr	r2, [r2, #4]
 8001ec8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == 0)
 8001ecc:	bb41      	cbnz	r1, 8001f20 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ece:	6804      	ldr	r4, [r0, #0]
 8001ed0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001ed4:	402a      	ands	r2, r5
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001ee0:	699c      	ldr	r4, [r3, #24]
 8001ee2:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	3b09      	subs	r3, #9
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d910      	bls.n	8001f0e <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8001ef8:	4618      	mov	r0, r3
}
 8001efa:	bc30      	pop	{r4, r5}
 8001efc:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001efe:	1c8a      	adds	r2, r1, #2
 8001f00:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001f04:	6852      	ldr	r2, [r2, #4]
 8001f06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	e7de      	b.n	8001ecc <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	3102      	adds	r1, #2
 8001f12:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001f16:	684b      	ldr	r3, [r1, #4]
 8001f18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f1c:	6293      	str	r3, [r2, #40]	; 0x28
 8001f1e:	e7e5      	b.n	8001eec <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f20:	6804      	ldr	r4, [r0, #0]
 8001f22:	69e5      	ldr	r5, [r4, #28]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001f26:	402a      	ands	r2, r5
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001f32:	699c      	ldr	r4, [r3, #24]
 8001f34:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	3b09      	subs	r3, #9
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d8d6      	bhi.n	8001eec <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001f3e:	6802      	ldr	r2, [r0, #0]
 8001f40:	3102      	adds	r1, #2
 8001f42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001f46:	684b      	ldr	r3, [r1, #4]
 8001f48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e7cd      	b.n	8001eec <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001f50:	2002      	movs	r0, #2
 8001f52:	4770      	bx	lr
 8001f54:	00fcfff0 	.word	0x00fcfff0

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f5c:	2400      	movs	r4, #0
 8001f5e:	e037      	b.n	8001fd0 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f60:	2609      	movs	r6, #9
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8001f64:	2600      	movs	r6, #0
 8001f66:	fa06 f60e 	lsl.w	r6, r6, lr
 8001f6a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	4e6c      	ldr	r6, [pc, #432]	; (8002120 <HAL_GPIO_Init+0x1c8>)
 8001f70:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_GPIO_Init+0x1cc>)
 8001f76:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	43eb      	mvns	r3, r5
 8001f7a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f7e:	684f      	ldr	r7, [r1, #4]
 8001f80:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001f84:	d001      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8001f86:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_GPIO_Init+0x1cc>)
 8001f8c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001f8e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	684f      	ldr	r7, [r1, #4]
 8001f96:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001f9a:	d001      	beq.n	8001fa0 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001f9c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001fa0:	4a60      	ldr	r2, [pc, #384]	; (8002124 <HAL_GPIO_Init+0x1cc>)
 8001fa2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa4:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001faa:	684f      	ldr	r7, [r1, #4]
 8001fac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001fb0:	d001      	beq.n	8001fb6 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8001fb2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001fb6:	4a5b      	ldr	r2, [pc, #364]	; (8002124 <HAL_GPIO_Init+0x1cc>)
 8001fb8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001fba:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbe:	684e      	ldr	r6, [r1, #4]
 8001fc0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001fc4:	d001      	beq.n	8001fca <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8001fc6:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x1cc>)
 8001fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fce:	3401      	adds	r4, #1
 8001fd0:	2c0f      	cmp	r4, #15
 8001fd2:	f200 80a3 	bhi.w	800211c <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	680a      	ldr	r2, [r1, #0]
 8001fdc:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001fe0:	42ab      	cmp	r3, r5
 8001fe2:	d1f4      	bne.n	8001fce <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe4:	684a      	ldr	r2, [r1, #4]
 8001fe6:	2a12      	cmp	r2, #18
 8001fe8:	bf18      	it	ne
 8001fea:	2a02      	cmpne	r2, #2
 8001fec:	d112      	bne.n	8002014 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8001fee:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001ff2:	f10e 0e08 	add.w	lr, lr, #8
 8001ff6:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ffa:	f004 0607 	and.w	r6, r4, #7
 8001ffe:	00b6      	lsls	r6, r6, #2
 8002000:	270f      	movs	r7, #15
 8002002:	40b7      	lsls	r7, r6
 8002004:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002008:	690f      	ldr	r7, [r1, #16]
 800200a:	fa07 f606 	lsl.w	r6, r7, r6
 800200e:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8002010:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8002014:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002016:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002020:	43d2      	mvns	r2, r2
 8002022:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002024:	684f      	ldr	r7, [r1, #4]
 8002026:	f007 0703 	and.w	r7, r7, #3
 800202a:	fa07 f70e 	lsl.w	r7, r7, lr
 800202e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8002030:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002032:	684e      	ldr	r6, [r1, #4]
 8002034:	1e77      	subs	r7, r6, #1
 8002036:	2e11      	cmp	r6, #17
 8002038:	bf18      	it	ne
 800203a:	2f01      	cmpne	r7, #1
 800203c:	d901      	bls.n	8002042 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203e:	2e12      	cmp	r6, #18
 8002040:	d10f      	bne.n	8002062 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 8002042:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002044:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002046:	68cf      	ldr	r7, [r1, #12]
 8002048:	fa07 f70e 	lsl.w	r7, r7, lr
 800204c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800204e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002050:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002052:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002056:	684e      	ldr	r6, [r1, #4]
 8002058:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800205c:	40a6      	lsls	r6, r4
 800205e:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8002060:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8002062:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002064:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002066:	688b      	ldr	r3, [r1, #8]
 8002068:	fa03 f30e 	lsl.w	r3, r3, lr
 800206c:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800206e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002070:	684b      	ldr	r3, [r1, #4]
 8002072:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002076:	d0aa      	beq.n	8001fce <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_GPIO_Init+0x1d0>)
 800207a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800207c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800208c:	08a3      	lsrs	r3, r4, #2
 800208e:	1c9e      	adds	r6, r3, #2
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_GPIO_Init+0x1c8>)
 8002092:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002096:	f004 0603 	and.w	r6, r4, #3
 800209a:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800209e:	260f      	movs	r6, #15
 80020a0:	fa06 f60e 	lsl.w	r6, r6, lr
 80020a4:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020a8:	4f20      	ldr	r7, [pc, #128]	; (800212c <HAL_GPIO_Init+0x1d4>)
 80020aa:	42b8      	cmp	r0, r7
 80020ac:	f43f af5a 	beq.w	8001f64 <HAL_GPIO_Init+0xc>
 80020b0:	4e1f      	ldr	r6, [pc, #124]	; (8002130 <HAL_GPIO_Init+0x1d8>)
 80020b2:	42b0      	cmp	r0, r6
 80020b4:	d022      	beq.n	80020fc <HAL_GPIO_Init+0x1a4>
 80020b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ba:	42b0      	cmp	r0, r6
 80020bc:	d020      	beq.n	8002100 <HAL_GPIO_Init+0x1a8>
 80020be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020c2:	42b0      	cmp	r0, r6
 80020c4:	d01e      	beq.n	8002104 <HAL_GPIO_Init+0x1ac>
 80020c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ca:	42b0      	cmp	r0, r6
 80020cc:	d01c      	beq.n	8002108 <HAL_GPIO_Init+0x1b0>
 80020ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020d2:	42b0      	cmp	r0, r6
 80020d4:	d01a      	beq.n	800210c <HAL_GPIO_Init+0x1b4>
 80020d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020da:	42b0      	cmp	r0, r6
 80020dc:	d018      	beq.n	8002110 <HAL_GPIO_Init+0x1b8>
 80020de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020e2:	42b0      	cmp	r0, r6
 80020e4:	d016      	beq.n	8002114 <HAL_GPIO_Init+0x1bc>
 80020e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ea:	42b0      	cmp	r0, r6
 80020ec:	d014      	beq.n	8002118 <HAL_GPIO_Init+0x1c0>
 80020ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020f2:	42b0      	cmp	r0, r6
 80020f4:	f43f af34 	beq.w	8001f60 <HAL_GPIO_Init+0x8>
 80020f8:	260a      	movs	r6, #10
 80020fa:	e734      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 80020fc:	2601      	movs	r6, #1
 80020fe:	e732      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002100:	2602      	movs	r6, #2
 8002102:	e730      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002104:	2603      	movs	r6, #3
 8002106:	e72e      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002108:	2604      	movs	r6, #4
 800210a:	e72c      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 800210c:	2605      	movs	r6, #5
 800210e:	e72a      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002110:	2606      	movs	r6, #6
 8002112:	e728      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002114:	2607      	movs	r6, #7
 8002116:	e726      	b.n	8001f66 <HAL_GPIO_Init+0xe>
 8002118:	2608      	movs	r6, #8
 800211a:	e724      	b.n	8001f66 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 800211c:	b003      	add	sp, #12
 800211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002120:	40013800 	.word	0x40013800
 8002124:	40013c00 	.word	0x40013c00
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400

08002134 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002134:	2300      	movs	r3, #0
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f200 8092 	bhi.w	8002260 <HAL_GPIO_DeInit+0x12c>
{
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	e00a      	b.n	8002156 <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002140:	2609      	movs	r6, #9
 8002142:	e000      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 8002144:	2600      	movs	r6, #0
 8002146:	fa06 f202 	lsl.w	r2, r6, r2
 800214a:	4294      	cmp	r4, r2
 800214c:	d06f      	beq.n	800222e <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 800214e:	3301      	adds	r3, #1
 8002150:	2b0f      	cmp	r3, #15
 8002152:	f200 8084 	bhi.w	800225e <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 800215a:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 800215e:	42aa      	cmp	r2, r5
 8002160:	d1f5      	bne.n	800214e <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002162:	6806      	ldr	r6, [r0, #0]
 8002164:	005f      	lsls	r7, r3, #1
 8002166:	2403      	movs	r4, #3
 8002168:	40bc      	lsls	r4, r7
 800216a:	43e4      	mvns	r4, r4
 800216c:	4026      	ands	r6, r4
 800216e:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002170:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002174:	f10e 0e08 	add.w	lr, lr, #8
 8002178:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 800217c:	f003 0607 	and.w	r6, r3, #7
 8002180:	00b6      	lsls	r6, r6, #2
 8002182:	270f      	movs	r7, #15
 8002184:	fa07 f606 	lsl.w	r6, r7, r6
 8002188:	ea2c 0606 	bic.w	r6, ip, r6
 800218c:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002190:	6886      	ldr	r6, [r0, #8]
 8002192:	4026      	ands	r6, r4
 8002194:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002196:	6846      	ldr	r6, [r0, #4]
 8002198:	ea26 0202 	bic.w	r2, r6, r2
 800219c:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800219e:	68c2      	ldr	r2, [r0, #12]
 80021a0:	4014      	ands	r4, r2
 80021a2:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80021a4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80021a8:	f10e 0402 	add.w	r4, lr, #2
 80021ac:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <HAL_GPIO_DeInit+0x130>)
 80021ae:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4097      	lsls	r7, r2
 80021ba:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80021bc:	4e2a      	ldr	r6, [pc, #168]	; (8002268 <HAL_GPIO_DeInit+0x134>)
 80021be:	42b0      	cmp	r0, r6
 80021c0:	d0c0      	beq.n	8002144 <HAL_GPIO_DeInit+0x10>
 80021c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021c6:	42b0      	cmp	r0, r6
 80021c8:	d021      	beq.n	800220e <HAL_GPIO_DeInit+0xda>
 80021ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ce:	42b0      	cmp	r0, r6
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_DeInit+0xde>
 80021d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021d6:	42b0      	cmp	r0, r6
 80021d8:	d01d      	beq.n	8002216 <HAL_GPIO_DeInit+0xe2>
 80021da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021de:	42b0      	cmp	r0, r6
 80021e0:	d01b      	beq.n	800221a <HAL_GPIO_DeInit+0xe6>
 80021e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021e6:	42b0      	cmp	r0, r6
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_DeInit+0xea>
 80021ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ee:	42b0      	cmp	r0, r6
 80021f0:	d017      	beq.n	8002222 <HAL_GPIO_DeInit+0xee>
 80021f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021f6:	42b0      	cmp	r0, r6
 80021f8:	d015      	beq.n	8002226 <HAL_GPIO_DeInit+0xf2>
 80021fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021fe:	42b0      	cmp	r0, r6
 8002200:	d013      	beq.n	800222a <HAL_GPIO_DeInit+0xf6>
 8002202:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002206:	42b0      	cmp	r0, r6
 8002208:	d09a      	beq.n	8002140 <HAL_GPIO_DeInit+0xc>
 800220a:	260a      	movs	r6, #10
 800220c:	e79b      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 800220e:	2601      	movs	r6, #1
 8002210:	e799      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 8002212:	2602      	movs	r6, #2
 8002214:	e797      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 8002216:	2603      	movs	r6, #3
 8002218:	e795      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 800221a:	2604      	movs	r6, #4
 800221c:	e793      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 800221e:	2605      	movs	r6, #5
 8002220:	e791      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 8002222:	2606      	movs	r6, #6
 8002224:	e78f      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 8002226:	2607      	movs	r6, #7
 8002228:	e78d      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
 800222a:	2608      	movs	r6, #8
 800222c:	e78b      	b.n	8002146 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800222e:	4e0d      	ldr	r6, [pc, #52]	; (8002264 <HAL_GPIO_DeInit+0x130>)
 8002230:	f10e 0202 	add.w	r2, lr, #2
 8002234:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 8002238:	ea24 0707 	bic.w	r7, r4, r7
 800223c:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002240:	4c0a      	ldr	r4, [pc, #40]	; (800226c <HAL_GPIO_DeInit+0x138>)
 8002242:	6826      	ldr	r6, [r4, #0]
 8002244:	43ea      	mvns	r2, r5
 8002246:	4016      	ands	r6, r2
 8002248:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800224a:	6865      	ldr	r5, [r4, #4]
 800224c:	4015      	ands	r5, r2
 800224e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002250:	68a5      	ldr	r5, [r4, #8]
 8002252:	4015      	ands	r5, r2
 8002254:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002256:	68e5      	ldr	r5, [r4, #12]
 8002258:	402a      	ands	r2, r5
 800225a:	60e2      	str	r2, [r4, #12]
 800225c:	e777      	b.n	800214e <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 800225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	b912      	cbnz	r2, 8002278 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002272:	0409      	lsls	r1, r1, #16
 8002274:	6181      	str	r1, [r0, #24]
 8002276:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002278:	6181      	str	r1, [r0, #24]
 800227a:	4770      	bx	lr

0800227c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800227e:	684d      	ldr	r5, [r1, #4]
 8002280:	6804      	ldr	r4, [r0, #0]
 8002282:	68e3      	ldr	r3, [r4, #12]
 8002284:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8002288:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800228a:	01d2      	lsls	r2, r2, #7
 800228c:	4414      	add	r4, r2
 800228e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002292:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002296:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800229a:	6806      	ldr	r6, [r0, #0]
 800229c:	1994      	adds	r4, r2, r6
 800229e:	680b      	ldr	r3, [r1, #0]
 80022a0:	68f6      	ldr	r6, [r6, #12]
 80022a2:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80022a6:	4433      	add	r3, r6
 80022a8:	3301      	adds	r3, #1
 80022aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80022ae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80022b2:	68cd      	ldr	r5, [r1, #12]
 80022b4:	6804      	ldr	r4, [r0, #0]
 80022b6:	68e3      	ldr	r3, [r4, #12]
 80022b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022bc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80022be:	4414      	add	r4, r2
 80022c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80022c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80022c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80022cc:	6806      	ldr	r6, [r0, #0]
 80022ce:	1994      	adds	r4, r2, r6
 80022d0:	688b      	ldr	r3, [r1, #8]
 80022d2:	68f6      	ldr	r6, [r6, #12]
 80022d4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80022d8:	4433      	add	r3, r6
 80022da:	3301      	adds	r3, #1
 80022dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80022e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80022e4:	6803      	ldr	r3, [r0, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80022ec:	f024 0407 	bic.w	r4, r4, #7
 80022f0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80022f4:	6803      	ldr	r3, [r0, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	690c      	ldr	r4, [r1, #16]
 80022fa:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80022fe:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002302:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002306:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002308:	6805      	ldr	r5, [r0, #0]
 800230a:	4415      	add	r5, r2
 800230c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002310:	2400      	movs	r4, #0
 8002312:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002316:	6805      	ldr	r5, [r0, #0]
 8002318:	4415      	add	r5, r2
 800231a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800231e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8002322:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002326:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800232a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	4413      	add	r3, r2
 8002332:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002336:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800233a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	4413      	add	r3, r2
 8002342:	694d      	ldr	r5, [r1, #20]
 8002344:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	4413      	add	r3, r2
 800234c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8002350:	4d2c      	ldr	r5, [pc, #176]	; (8002404 <LTDC_SetConfig+0x188>)
 8002352:	4035      	ands	r5, r6
 8002354:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	4413      	add	r3, r2
 800235c:	69cd      	ldr	r5, [r1, #28]
 800235e:	6a0e      	ldr	r6, [r1, #32]
 8002360:	4335      	orrs	r5, r6
 8002362:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800236e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	4413      	add	r3, r2
 8002376:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002378:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800237c:	690b      	ldr	r3, [r1, #16]
 800237e:	b16b      	cbz	r3, 800239c <LTDC_SetConfig+0x120>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002380:	2b01      	cmp	r3, #1
 8002382:	d039      	beq.n	80023f8 <LTDC_SetConfig+0x17c>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002384:	2b02      	cmp	r3, #2
 8002386:	bf18      	it	ne
 8002388:	2b04      	cmpne	r3, #4
 800238a:	d037      	beq.n	80023fc <LTDC_SetConfig+0x180>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800238c:	2b03      	cmp	r3, #3
 800238e:	d037      	beq.n	8002400 <LTDC_SetConfig+0x184>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002390:	2b07      	cmp	r3, #7
 8002392:	d001      	beq.n	8002398 <LTDC_SetConfig+0x11c>
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8002394:	2601      	movs	r6, #1
 8002396:	e002      	b.n	800239e <LTDC_SetConfig+0x122>
    tmp = 2;
 8002398:	2602      	movs	r6, #2
 800239a:	e000      	b.n	800239e <LTDC_SetConfig+0x122>
    tmp = 4;
 800239c:	2604      	movs	r6, #4
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800239e:	6804      	ldr	r4, [r0, #0]
 80023a0:	4414      	add	r4, r2
 80023a2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80023a6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80023aa:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80023ae:	6804      	ldr	r4, [r0, #0]
 80023b0:	4414      	add	r4, r2
 80023b2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80023b4:	fb05 f506 	mul.w	r5, r5, r6
 80023b8:	684b      	ldr	r3, [r1, #4]
 80023ba:	680f      	ldr	r7, [r1, #0]
 80023bc:	1bdb      	subs	r3, r3, r7
 80023be:	fb03 f306 	mul.w	r3, r3, r6
 80023c2:	3303      	adds	r3, #3
 80023c4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80023c8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80023cc:	6803      	ldr	r3, [r0, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80023d4:	4c0c      	ldr	r4, [pc, #48]	; (8002408 <LTDC_SetConfig+0x18c>)
 80023d6:	402c      	ands	r4, r5
 80023d8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80023e2:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80023e6:	6803      	ldr	r3, [r0, #0]
 80023e8:	441a      	add	r2, r3
 80023ea:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3;
 80023f8:	2603      	movs	r6, #3
 80023fa:	e7d0      	b.n	800239e <LTDC_SetConfig+0x122>
    tmp = 2;
 80023fc:	2602      	movs	r6, #2
 80023fe:	e7ce      	b.n	800239e <LTDC_SetConfig+0x122>
 8002400:	2602      	movs	r6, #2
 8002402:	e7cc      	b.n	800239e <LTDC_SetConfig+0x122>
 8002404:	fffff8f8 	.word	0xfffff8f8
 8002408:	fffff800 	.word	0xfffff800

0800240c <HAL_LTDC_Init>:
  if(hltdc == NULL)
 800240c:	2800      	cmp	r0, #0
 800240e:	d077      	beq.n	8002500 <HAL_LTDC_Init+0xf4>
{
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4604      	mov	r4, r0
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002414:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06c      	beq.n	80024f6 <HAL_LTDC_Init+0xea>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	6993      	ldr	r3, [r2, #24]
 8002426:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800242a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800242c:	6821      	ldr	r1, [r4, #0]
 800242e:	698a      	ldr	r2, [r1, #24]
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	68a0      	ldr	r0, [r4, #8]
 8002434:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002436:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002438:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800243a:	6920      	ldr	r0, [r4, #16]
 800243c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800243e:	4313      	orrs	r3, r2
 8002440:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002442:	6821      	ldr	r1, [r4, #0]
 8002444:	688a      	ldr	r2, [r1, #8]
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_LTDC_Init+0xf8>)
 8002448:	401a      	ands	r2, r3
 800244a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800244c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	6882      	ldr	r2, [r0, #8]
 8002452:	69a1      	ldr	r1, [r4, #24]
 8002454:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002458:	430a      	orrs	r2, r1
 800245a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800245c:	6821      	ldr	r1, [r4, #0]
 800245e:	68ca      	ldr	r2, [r1, #12]
 8002460:	401a      	ands	r2, r3
 8002462:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002464:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	68c2      	ldr	r2, [r0, #12]
 800246a:	6a21      	ldr	r1, [r4, #32]
 800246c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002470:	430a      	orrs	r2, r1
 8002472:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002474:	6821      	ldr	r1, [r4, #0]
 8002476:	690a      	ldr	r2, [r1, #16]
 8002478:	401a      	ands	r2, r3
 800247a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800247c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800247e:	6820      	ldr	r0, [r4, #0]
 8002480:	6902      	ldr	r2, [r0, #16]
 8002482:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002488:	430a      	orrs	r2, r1
 800248a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800248c:	6821      	ldr	r1, [r4, #0]
 800248e:	694a      	ldr	r2, [r1, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002494:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002496:	6821      	ldr	r1, [r4, #0]
 8002498:	694b      	ldr	r3, [r1, #20]
 800249a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800249c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80024a4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80024a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80024ac:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80024b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80024b6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80024b8:	6821      	ldr	r1, [r4, #0]
 80024ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80024bc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024c0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80024c4:	4303      	orrs	r3, r0
 80024c6:	4313      	orrs	r3, r2
 80024c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	6993      	ldr	r3, [r2, #24]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80024e8:	2000      	movs	r0, #0
 80024ea:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80024f4:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80024f6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80024fa:	f008 fafb 	bl	800aaf4 <HAL_LTDC_MspInit>
 80024fe:	e78d      	b.n	800241c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002500:	2001      	movs	r0, #1
 8002502:	4770      	bx	lr
 8002504:	f000f800 	.word	0xf000f800

08002508 <HAL_LTDC_DeInit>:
{
 8002508:	b510      	push	{r4, lr}
 800250a:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc); 
 800250c:	f008 fb4c 	bl	800aba8 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002510:	2000      	movs	r0, #0
 8002512:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_RESET;
 8002516:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800251a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800251e:	bd10      	pop	{r4, pc}

08002520 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8002520:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_LTDC_ConfigLayer+0xc>
 8002528:	2002      	movs	r0, #2
 800252a:	4770      	bx	lr
{   
 800252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002530:	4696      	mov	lr, r2
 8002532:	460f      	mov	r7, r1
 8002534:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8002536:	f04f 0801 	mov.w	r8, #1
 800253a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002544:	2434      	movs	r4, #52	; 0x34
 8002546:	fb04 0402 	mla	r4, r4, r2, r0
 800254a:	3438      	adds	r4, #56	; 0x38
 800254c:	460d      	mov	r5, r1
 800254e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800255e:	4672      	mov	r2, lr
 8002560:	4639      	mov	r1, r7
 8002562:	4630      	mov	r0, r6
 8002564:	f7ff fe8a 	bl	800227c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002568:	6833      	ldr	r3, [r6, #0]
 800256a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800256e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002572:	2000      	movs	r0, #0
 8002574:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
  return HAL_OK;
 8002578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800257c <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 800257c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d01d      	beq.n	80025c0 <HAL_LTDC_ConfigColorKeying+0x44>
{
 8002584:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 8002586:	2401      	movs	r4, #1
 8002588:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002592:	6803      	ldr	r3, [r0, #0]
 8002594:	01d2      	lsls	r2, r2, #7
 8002596:	4413      	add	r3, r2
 8002598:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800259c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80025a0:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	441a      	add	r2, r3
 80025a8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80025ac:	6803      	ldr	r3, [r0, #0]
 80025ae:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80025b0:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80025b4:	2300      	movs	r3, #0
 80025b6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80025ba:	4618      	mov	r0, r3
}
 80025bc:	bc30      	pop	{r4, r5}
 80025be:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80025c0:	2002      	movs	r0, #2
 80025c2:	4770      	bx	lr

080025c4 <HAL_LTDC_ConfigCLUT>:
{
 80025c4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hltdc);
 80025c6:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80025ca:	2c01      	cmp	r4, #1
 80025cc:	d036      	beq.n	800263c <HAL_LTDC_ConfigCLUT+0x78>
 80025ce:	2401      	movs	r4, #1
 80025d0:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80025d4:	2402      	movs	r4, #2
 80025d6:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  for(counter = 0; (counter < CLUTSize); counter++)
 80025da:	2600      	movs	r6, #0
 80025dc:	e012      	b.n	8002604 <HAL_LTDC_ConfigCLUT+0x40>
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 80025de:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 80025e2:	680f      	ldr	r7, [r1, #0]
 80025e4:	b2fd      	uxtb	r5, r7
 80025e6:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 80025ea:	f407 457f 	and.w	r5, r7, #65280	; 0xff00
 80025ee:	432c      	orrs	r4, r5
 80025f0:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 80025f4:	433c      	orrs	r4, r7
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 80025f6:	3104      	adds	r1, #4
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80025f8:	6805      	ldr	r5, [r0, #0]
 80025fa:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
 80025fe:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
  for(counter = 0; (counter < CLUTSize); counter++)
 8002602:	3601      	adds	r6, #1
 8002604:	4296      	cmp	r6, r2
 8002606:	d210      	bcs.n	800262a <HAL_LTDC_ConfigCLUT+0x66>
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002608:	2434      	movs	r4, #52	; 0x34
 800260a:	fb04 0403 	mla	r4, r4, r3, r0
 800260e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8002610:	2c06      	cmp	r4, #6
 8002612:	d0e4      	beq.n	80025de <HAL_LTDC_ConfigCLUT+0x1a>
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8002614:	680d      	ldr	r5, [r1, #0]
 8002616:	b2ec      	uxtb	r4, r5
 8002618:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 800261c:	f405 477f 	and.w	r7, r5, #65280	; 0xff00
 8002620:	433c      	orrs	r4, r7
 8002622:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8002626:	432c      	orrs	r4, r5
 8002628:	e7e5      	b.n	80025f6 <HAL_LTDC_ConfigCLUT+0x32>
  hltdc->State = HAL_LTDC_STATE_READY; 
 800262a:	2301      	movs	r3, #1
 800262c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);  
 8002630:	2300      	movs	r3, #0
 8002632:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8002636:	4618      	mov	r0, r3
}
 8002638:	bcf0      	pop	{r4, r5, r6, r7}
 800263a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800263c:	2002      	movs	r0, #2
 800263e:	e7fb      	b.n	8002638 <HAL_LTDC_ConfigCLUT+0x74>

08002640 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8002640:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d017      	beq.n	8002678 <HAL_LTDC_EnableColorKeying+0x38>
 8002648:	2201      	movs	r2, #1
 800264a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002654:	6803      	ldr	r3, [r0, #0]
 8002656:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 800265a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY; 
 800266a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800266e:	2300      	movs	r3, #0
 8002670:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;  
 8002674:	4618      	mov	r0, r3
 8002676:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8002678:	2002      	movs	r0, #2
}
 800267a:	4770      	bx	lr

0800267c <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 800267c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d017      	beq.n	80026b4 <HAL_LTDC_DisableColorKeying+0x38>
 8002684:	2201      	movs	r2, #1
 8002686:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8002696:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY; 
 80026a6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80026b0:	4618      	mov	r0, r3
 80026b2:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80026b4:	2002      	movs	r0, #2
}
 80026b6:	4770      	bx	lr

080026b8 <HAL_LTDC_SetWindowPosition>:
{
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80026ba:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80026be:	2c01      	cmp	r4, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_LTDC_SetWindowPosition+0xe>
 80026c2:	2002      	movs	r0, #2
}
 80026c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c6:	4615      	mov	r5, r2
 80026c8:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80026ca:	2601      	movs	r6, #1
 80026cc:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80026d0:	2202      	movs	r2, #2
 80026d2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80026d6:	2034      	movs	r0, #52	; 0x34
 80026d8:	fb00 f003 	mul.w	r0, r0, r3
 80026dc:	f100 0738 	add.w	r7, r0, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
 80026e0:	4420      	add	r0, r4
 80026e2:	6381      	str	r1, [r0, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80026e4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80026e6:	4411      	add	r1, r2
 80026e8:	63c1      	str	r1, [r0, #60]	; 0x3c
  pLayerCfg->WindowY0 = Y0;
 80026ea:	6405      	str	r5, [r0, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80026ec:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80026ee:	4415      	add	r5, r2
 80026f0:	6445      	str	r5, [r0, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80026f2:	461a      	mov	r2, r3
 80026f4:	19e1      	adds	r1, r4, r7
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fdc0 	bl	800227c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002700:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002704:	2000      	movs	r0, #0
 8002706:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800270c <HAL_LTDC_SetAlpha>:
{
 800270c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800270e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_LTDC_SetAlpha+0xe>
 8002716:	2002      	movs	r0, #2
}
 8002718:	bd38      	pop	{r3, r4, r5, pc}
 800271a:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800271c:	2501      	movs	r5, #1
 800271e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002728:	2334      	movs	r3, #52	; 0x34
 800272a:	fb03 f302 	mul.w	r3, r3, r2
 800272e:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8002732:	4423      	add	r3, r4
 8002734:	64d9      	str	r1, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002736:	1821      	adds	r1, r4, r0
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fd9f 	bl	800227c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002742:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002746:	2000      	movs	r0, #0
 8002748:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800274c:	bd38      	pop	{r3, r4, r5, pc}

0800274e <HAL_LTDC_SetAddress>:
{
 800274e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8002750:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_LTDC_SetAddress+0xe>
 8002758:	2002      	movs	r0, #2
}
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800275e:	2501      	movs	r5, #1
 8002760:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002764:	2302      	movs	r3, #2
 8002766:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800276a:	2334      	movs	r3, #52	; 0x34
 800276c:	fb03 f302 	mul.w	r3, r3, r2
 8002770:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8002774:	4423      	add	r3, r4
 8002776:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002778:	1821      	adds	r1, r4, r0
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fd7e 	bl	800227c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002784:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002788:	2000      	movs	r0, #0
 800278a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800278e:	bd38      	pop	{r3, r4, r5, pc}

08002790 <HAL_LTDC_GetState>:
  return hltdc->State;
 8002790:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002794:	4770      	bx	lr

08002796 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800279a:	b083      	sub	sp, #12
 800279c:	4607      	mov	r7, r0
 800279e:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a0:	f8d0 8000 	ldr.w	r8, [r0]
  int32_t len = 0;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	1a52      	subs	r2, r2, r1
 80027a8:	0093      	lsls	r3, r2, #2
 80027aa:	4403      	add	r3, r0
 80027ac:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80027ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b0:	1ab6      	subs	r6, r6, r2

  if (len > ep->maxpacket)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	429e      	cmp	r6, r3
 80027b6:	d900      	bls.n	80027ba <PCD_WriteEmptyTxFifo+0x24>
  {
    len = ep->maxpacket;
 80027b8:	461e      	mov	r6, r3
  }


  len32b = (len + 3) / 4;
 80027ba:	f116 0903 	adds.w	r9, r6, #3
 80027be:	d402      	bmi.n	80027c6 <PCD_WriteEmptyTxFifo+0x30>
 80027c0:	ea4f 09a9 	mov.w	r9, r9, asr #2

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80027c4:	e019      	b.n	80027fa <PCD_WriteEmptyTxFifo+0x64>
  len32b = (len + 3) / 4;
 80027c6:	f109 0903 	add.w	r9, r9, #3
 80027ca:	e7f9      	b.n	80027c0 <PCD_WriteEmptyTxFifo+0x2a>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 80027cc:	f116 0903 	adds.w	r9, r6, #3
 80027d0:	d42f      	bmi.n	8002832 <PCD_WriteEmptyTxFifo+0x9c>
 80027d2:	ea4f 09a9 	mov.w	r9, r9, asr #2

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 80027d6:	00eb      	lsls	r3, r5, #3
 80027d8:	1b5b      	subs	r3, r3, r5
 80027da:	009c      	lsls	r4, r3, #2
 80027dc:	443c      	add	r4, r7
 80027de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027e0:	7c3b      	ldrb	r3, [r7, #16]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	b2b3      	uxth	r3, r6
 80027e6:	b2ea      	uxtb	r2, r5
 80027e8:	4640      	mov	r0, r8
 80027ea:	f002 fdfb 	bl	80053e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027f0:	4433      	add	r3, r6
 80027f2:	6463      	str	r3, [r4, #68]	; 0x44
    ep->xfer_count += len;
 80027f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027f6:	4433      	add	r3, r6
 80027f8:	6523      	str	r3, [r4, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80027fa:	4641      	mov	r1, r8
 80027fc:	eb08 1345 	add.w	r3, r8, r5, lsl #5
 8002800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4599      	cmp	r9, r3
 800280a:	d215      	bcs.n	8002838 <PCD_WriteEmptyTxFifo+0xa2>
          ep->xfer_count < ep->xfer_len &&
 800280c:	00ea      	lsls	r2, r5, #3
 800280e:	1b52      	subs	r2, r2, r5
 8002810:	0093      	lsls	r3, r2, #2
 8002812:	443b      	add	r3, r7
 8002814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002818:	429a      	cmp	r2, r3
 800281a:	d20d      	bcs.n	8002838 <PCD_WriteEmptyTxFifo+0xa2>
          ep->xfer_count < ep->xfer_len &&
 800281c:	b163      	cbz	r3, 8002838 <PCD_WriteEmptyTxFifo+0xa2>
    len = ep->xfer_len - ep->xfer_count;
 800281e:	1a9e      	subs	r6, r3, r2
    if (len > ep->maxpacket)
 8002820:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002824:	0093      	lsls	r3, r2, #2
 8002826:	443b      	add	r3, r7
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	429e      	cmp	r6, r3
 800282c:	d9ce      	bls.n	80027cc <PCD_WriteEmptyTxFifo+0x36>
      len = ep->maxpacket;
 800282e:	461e      	mov	r6, r3
 8002830:	e7cc      	b.n	80027cc <PCD_WriteEmptyTxFifo+0x36>
    len32b = (len + 3) / 4;
 8002832:	f109 0903 	add.w	r9, r9, #3
 8002836:	e7cc      	b.n	80027d2 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if(len <= 0)
 8002838:	2e00      	cmp	r6, #0
 800283a:	dd03      	ble.n	8002844 <PCD_WriteEmptyTxFifo+0xae>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;

  }

  return HAL_OK;
}
 800283c:	2000      	movs	r0, #0
 800283e:	b003      	add	sp, #12
 8002840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fifoemptymsk = 0x1 << epnum;
 8002844:	2301      	movs	r3, #1
 8002846:	40ab      	lsls	r3, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002848:	f8d1 5834 	ldr.w	r5, [r1, #2100]	; 0x834
 800284c:	ea25 0503 	bic.w	r5, r5, r3
 8002850:	f8c1 5834 	str.w	r5, [r1, #2100]	; 0x834
 8002854:	e7f2      	b.n	800283c <PCD_WriteEmptyTxFifo+0xa6>

08002856 <HAL_PCD_Init>:
  if(hpcd == NULL)
 8002856:	2800      	cmp	r0, #0
 8002858:	d072      	beq.n	8002940 <HAL_PCD_Init+0xea>
{
 800285a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285c:	b08b      	sub	sp, #44	; 0x2c
 800285e:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002860:	2303      	movs	r3, #3
 8002862:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8002866:	f00a fe33 	bl	800d4d0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	f002 fb5e 	bl	8004f2c <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002870:	4625      	mov	r5, r4
 8002872:	f855 7b10 	ldr.w	r7, [r5], #16
 8002876:	466e      	mov	r6, sp
 8002878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800287c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002884:	e886 0003 	stmia.w	r6, {r0, r1}
 8002888:	1d23      	adds	r3, r4, #4
 800288a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288c:	4638      	mov	r0, r7
 800288e:	f002 fb09 	bl	8004ea4 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8002892:	2100      	movs	r1, #0
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f002 fb4f 	bl	8004f38 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 800289a:	2200      	movs	r2, #0
 800289c:	e010      	b.n	80028c0 <HAL_PCD_Init+0x6a>
   hpcd->IN_ep[i].is_in = 1;
 800289e:	00d1      	lsls	r1, r2, #3
 80028a0:	1a89      	subs	r1, r1, r2
 80028a2:	008b      	lsls	r3, r1, #2
 80028a4:	4423      	add	r3, r4
 80028a6:	2101      	movs	r1, #1
 80028a8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
 80028ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b2:	2100      	movs	r1, #0
 80028b4:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket =  0;
 80028b8:	6419      	str	r1, [r3, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0;
 80028ba:	6459      	str	r1, [r3, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 80028bc:	64d9      	str	r1, [r3, #76]	; 0x4c
 for (i = 0; i < 15 ; i++)
 80028be:	3201      	adds	r2, #1
 80028c0:	2a0e      	cmp	r2, #14
 80028c2:	d9ec      	bls.n	800289e <HAL_PCD_Init+0x48>
 80028c4:	2200      	movs	r2, #0
 80028c6:	e018      	b.n	80028fa <HAL_PCD_Init+0xa4>
   hpcd->OUT_ep[i].is_in = 0;
 80028c8:	00d1      	lsls	r1, r2, #3
 80028ca:	1a89      	subs	r1, r1, r2
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	4423      	add	r3, r4
 80028d0:	2100      	movs	r1, #0
 80028d2:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 80028d6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80028da:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028dc:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80028e0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 80028e4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 80028e8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0;
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80028f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80028f6:	6059      	str	r1, [r3, #4]
 for (i = 0; i < 15 ; i++)
 80028f8:	3201      	adds	r2, #1
 80028fa:	2a0e      	cmp	r2, #14
 80028fc:	d9e4      	bls.n	80028c8 <HAL_PCD_Init+0x72>
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80028fe:	4625      	mov	r5, r4
 8002900:	f855 7b10 	ldr.w	r7, [r5], #16
 8002904:	466e      	mov	r6, sp
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800290a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800290e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002912:	e886 0003 	stmia.w	r6, {r0, r1}
 8002916:	1d23      	adds	r3, r4, #4
 8002918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291a:	4638      	mov	r0, r7
 800291c:	f002 fb50 	bl	8004fc0 <USB_DevInit>
 hpcd->State= HAL_PCD_STATE_READY;
 8002920:	2301      	movs	r3, #1
 8002922:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
 if (hpcd->Init.lpm_enable ==1)
 8002926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002928:	2b01      	cmp	r3, #1
 800292a:	d005      	beq.n	8002938 <HAL_PCD_Init+0xe2>
 USB_DevDisconnect (hpcd->Instance);
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f002 ff34 	bl	800579a <USB_DevDisconnect>
 return HAL_OK;
 8002932:	2000      	movs	r0, #0
}
 8002934:	b00b      	add	sp, #44	; 0x2c
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   HAL_PCDEx_ActivateLPM(hpcd);
 8002938:	4620      	mov	r0, r4
 800293a:	f000 fcc7 	bl	80032cc <HAL_PCDEx_ActivateLPM>
 800293e:	e7f5      	b.n	800292c <HAL_PCD_Init+0xd6>
    return HAL_ERROR;
 8002940:	2001      	movs	r0, #1
 8002942:	4770      	bx	lr

08002944 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002944:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_PCD_Start+0xc>
 800294c:	2002      	movs	r0, #2
 800294e:	4770      	bx	lr
{
 8002950:	b510      	push	{r4, lr}
 8002952:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002954:	2301      	movs	r3, #1
 8002956:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 800295a:	6800      	ldr	r0, [r0, #0]
 800295c:	f002 ff11 	bl	8005782 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002960:	6820      	ldr	r0, [r4, #0]
 8002962:	f002 fadd 	bl	8004f20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002966:	2000      	movs	r0, #0
 8002968:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800296c:	bd10      	pop	{r4, pc}
	...

08002970 <HAL_PCD_IRQHandler>:
{
 8002970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002974:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002976:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002978:	4630      	mov	r0, r6
 800297a:	f002 ff45 	bl	8005808 <USB_GetMode>
 800297e:	b108      	cbz	r0, 8002984 <HAL_PCD_IRQHandler+0x14>
 8002980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002984:	4607      	mov	r7, r0
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002986:	6820      	ldr	r0, [r4, #0]
 8002988:	f002 ff13 	bl	80057b2 <USB_ReadInterrupts>
 800298c:	2800      	cmp	r0, #0
 800298e:	d0f7      	beq.n	8002980 <HAL_PCD_IRQHandler+0x10>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	f002 ff0e 	bl	80057b2 <USB_ReadInterrupts>
 8002996:	f010 0f02 	tst.w	r0, #2
 800299a:	d002      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x32>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	615a      	str	r2, [r3, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	f002 ff05 	bl	80057b2 <USB_ReadInterrupts>
 80029a8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80029ac:	f040 8090 	bne.w	8002ad0 <HAL_PCD_IRQHandler+0x160>
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 80029b0:	463d      	mov	r5, r7
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	f002 fefd 	bl	80057b2 <USB_ReadInterrupts>
 80029b8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80029bc:	f040 810d 	bne.w	8002bda <HAL_PCD_IRQHandler+0x26a>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	f002 fef6 	bl	80057b2 <USB_ReadInterrupts>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	f2c0 8179 	blt.w	8002cbe <HAL_PCD_IRQHandler+0x34e>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f002 fef0 	bl	80057b2 <USB_ReadInterrupts>
 80029d2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80029d6:	d009      	beq.n	80029ec <HAL_PCD_IRQHandler+0x7c>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029d8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80029dc:	f013 0f01 	tst.w	r3, #1
 80029e0:	f040 8186 	bne.w	8002cf0 <HAL_PCD_IRQHandler+0x380>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ea:	615a      	str	r2, [r3, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	f002 fee0 	bl	80057b2 <USB_ReadInterrupts>
 80029f2:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80029f6:	d014      	beq.n	8002a22 <HAL_PCD_IRQHandler+0xb2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fe:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8002a00:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 8177 	bne.w	8002cf8 <HAL_PCD_IRQHandler+0x388>
        hpcd->LPM_State = LPM_L1;
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002a18:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f00a fed3 	bl	800d7c8 <HAL_PCDEx_LPM_Callback>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	f002 fec5 	bl	80057b2 <USB_ReadInterrupts>
 8002a28:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002a2c:	f040 8168 	bne.w	8002d00 <HAL_PCD_IRQHandler+0x390>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	f002 febe 	bl	80057b2 <USB_ReadInterrupts>
 8002a36:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002a3a:	f040 81bc 	bne.w	8002db6 <HAL_PCD_IRQHandler+0x446>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	f002 feb7 	bl	80057b2 <USB_ReadInterrupts>
 8002a44:	f010 0f10 	tst.w	r0, #16
 8002a48:	d014      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x104>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	6993      	ldr	r3, [r2, #24]
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002a54:	6a37      	ldr	r7, [r6, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a56:	f007 080f 	and.w	r8, r7, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a5a:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	f000 8236 	beq.w	8002ed0 <HAL_PCD_IRQHandler+0x560>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a64:	2b06      	cmp	r3, #6
 8002a66:	f000 8254 	beq.w	8002f12 <HAL_PCD_IRQHandler+0x5a2>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	6993      	ldr	r3, [r2, #24]
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6193      	str	r3, [r2, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	f002 fe9c 	bl	80057b2 <USB_ReadInterrupts>
 8002a7a:	f010 0f08 	tst.w	r0, #8
 8002a7e:	f040 825c 	bne.w	8002f3a <HAL_PCD_IRQHandler+0x5ca>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a82:	6820      	ldr	r0, [r4, #0]
 8002a84:	f002 fe95 	bl	80057b2 <USB_ReadInterrupts>
 8002a88:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002a8c:	f040 825c 	bne.w	8002f48 <HAL_PCD_IRQHandler+0x5d8>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	f002 fe8e 	bl	80057b2 <USB_ReadInterrupts>
 8002a96:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002a9a:	f040 825e 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x5ea>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a9e:	6820      	ldr	r0, [r4, #0]
 8002aa0:	f002 fe87 	bl	80057b2 <USB_ReadInterrupts>
 8002aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002aa8:	f040 8260 	bne.w	8002f6c <HAL_PCD_IRQHandler+0x5fc>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	f002 fe80 	bl	80057b2 <USB_ReadInterrupts>
 8002ab2:	f010 0f04 	tst.w	r0, #4
 8002ab6:	f43f af63 	beq.w	8002980 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002abe:	f015 0f04 	tst.w	r5, #4
 8002ac2:	f040 825b 	bne.w	8002f7c <HAL_PCD_IRQHandler+0x60c>
      hpcd->Instance->GOTGINT |= temp;
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4315      	orrs	r5, r2
 8002acc:	605d      	str	r5, [r3, #4]
 8002ace:	e757      	b.n	8002980 <HAL_PCD_IRQHandler+0x10>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	f002 fe72 	bl	80057ba <USB_ReadDevAllOutEpInterrupt>
 8002ad6:	4680      	mov	r8, r0
      epnum = 0;
 8002ad8:	463d      	mov	r5, r7
      while ( ep_intr )
 8002ada:	e048      	b.n	8002b6e <HAL_PCD_IRQHandler+0x1fe>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8002adc:	f8d6 2b08 	ldr.w	r2, [r6, #2824]	; 0xb08
 8002ae0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002ae4:	d05d      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x232>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8002ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e059      	b.n	8002ba2 <HAL_PCD_IRQHandler+0x232>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002aee:	00e9      	lsls	r1, r5, #3
 8002af0:	1b49      	subs	r1, r1, r5
 8002af2:	008a      	lsls	r2, r1, #2
 8002af4:	4422      	add	r2, r4
 8002af6:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	1ac9      	subs	r1, r1, r3
 8002b02:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b06:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8002b0a:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8002b0e:	440b      	add	r3, r1
 8002b10:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8002b14:	e048      	b.n	8002ba8 <HAL_PCD_IRQHandler+0x238>
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	d14d      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x246>
 8002b1a:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002b1e:	0093      	lsls	r3, r2, #2
 8002b20:	4423      	add	r3, r4
 8002b22:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d145      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x246>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8002b2a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002b2e:	2101      	movs	r1, #1
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	f002 fe89 	bl	8005848 <USB_EP0_OutStart>
 8002b36:	e03e      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x246>
            HAL_PCD_SetupStageCallback(hpcd);
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f00a fd01 	bl	800d540 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b3e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002b42:	2208      	movs	r2, #8
 8002b44:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b48:	f019 0f10 	tst.w	r9, #16
 8002b4c:	d004      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x1e8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b4e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002b52:	2210      	movs	r2, #16
 8002b54:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b58:	f019 0f20 	tst.w	r9, #32
 8002b5c:	d004      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x1f8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b5e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002b62:	2220      	movs	r2, #32
 8002b64:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 8002b68:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8002b6a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while ( ep_intr )
 8002b6e:	f1b8 0f00 	cmp.w	r8, #0
 8002b72:	f43f af1e 	beq.w	80029b2 <HAL_PCD_IRQHandler+0x42>
        if (ep_intr & 0x1)
 8002b76:	f018 0f01 	tst.w	r8, #1
 8002b7a:	d0f5      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x1f8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002b7c:	fa5f fa85 	uxtb.w	sl, r5
 8002b80:	4651      	mov	r1, sl
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	f002 fe29 	bl	80057da <USB_ReadDevOutEPInterrupt>
 8002b88:	4681      	mov	r9, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b8a:	f010 0f01 	tst.w	r0, #1
 8002b8e:	d012      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b90:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b98:	2201      	movs	r2, #1
 8002b9a:	609a      	str	r2, [r3, #8]
            if (hpcd->Init.dma_enable == 1)
 8002b9c:	6922      	ldr	r2, [r4, #16]
 8002b9e:	2a01      	cmp	r2, #1
 8002ba0:	d09c      	beq.n	8002adc <HAL_PCD_IRQHandler+0x16c>
            if(hpcd->Init.dma_enable == 1)
 8002ba2:	6922      	ldr	r2, [r4, #16]
 8002ba4:	2a01      	cmp	r2, #1
 8002ba6:	d0a2      	beq.n	8002aee <HAL_PCD_IRQHandler+0x17e>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8002ba8:	4651      	mov	r1, sl
 8002baa:	4620      	mov	r0, r4
 8002bac:	f00a fcd0 	bl	800d550 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d0af      	beq.n	8002b16 <HAL_PCD_IRQHandler+0x1a6>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bb6:	f019 0f08 	tst.w	r9, #8
 8002bba:	d0c5      	beq.n	8002b48 <HAL_PCD_IRQHandler+0x1d8>
            if (hpcd->Init.dma_enable == 1)
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d1ba      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x1c8>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8002bc2:	f8d6 3b08 	ldr.w	r3, [r6, #2824]	; 0xb08
 8002bc6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002bca:	d0b5      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x1c8>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8002bcc:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002bd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bd4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002bd8:	e7ae      	b.n	8002b38 <HAL_PCD_IRQHandler+0x1c8>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	f002 fdf5 	bl	80057ca <USB_ReadDevAllInEpInterrupt>
 8002be0:	4680      	mov	r8, r0
      epnum = 0;
 8002be2:	463d      	mov	r5, r7
      while ( ep_intr )
 8002be4:	e02e      	b.n	8002c44 <HAL_PCD_IRQHandler+0x2d4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002be6:	00ea      	lsls	r2, r5, #3
 8002be8:	1b52      	subs	r2, r2, r5
 8002bea:	0093      	lsls	r3, r2, #2
 8002bec:	4423      	add	r3, r4
 8002bee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf2:	440a      	add	r2, r1
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
 8002bf6:	e046      	b.n	8002c86 <HAL_PCD_IRQHandler+0x316>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bf8:	f019 0f08 	tst.w	r9, #8
 8002bfc:	d004      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x298>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bfe:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002c02:	2208      	movs	r2, #8
 8002c04:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c08:	f019 0f10 	tst.w	r9, #16
 8002c0c:	d004      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x2a8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c0e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002c12:	2210      	movs	r2, #16
 8002c14:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c18:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002c1c:	d004      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x2b8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c1e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c28:	f019 0f02 	tst.w	r9, #2
 8002c2c:	d004      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x2c8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c2e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002c32:	2202      	movs	r2, #2
 8002c34:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c38:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002c3c:	d13a      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x344>
        epnum++;
 8002c3e:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8002c40:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while ( ep_intr )
 8002c44:	f1b8 0f00 	cmp.w	r8, #0
 8002c48:	f43f aeba 	beq.w	80029c0 <HAL_PCD_IRQHandler+0x50>
        if (ep_intr & 0x1) /* In ITR */
 8002c4c:	f018 0f01 	tst.w	r8, #1
 8002c50:	d0f5      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x2ce>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8002c52:	fa5f fa85 	uxtb.w	sl, r5
 8002c56:	4651      	mov	r1, sl
 8002c58:	6820      	ldr	r0, [r4, #0]
 8002c5a:	f002 fdc7 	bl	80057ec <USB_ReadDevInEPInterrupt>
 8002c5e:	4681      	mov	r9, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c60:	f010 0f01 	tst.w	r0, #1
 8002c64:	d0c8      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x288>
            fifoemptymsk = 0x1 << epnum;
 8002c66:	2201      	movs	r2, #1
 8002c68:	fa02 f005 	lsl.w	r0, r2, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c6c:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8002c70:	ea23 0300 	bic.w	r3, r3, r0
 8002c74:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c78:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002c7c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1)
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d0af      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x276>
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8002c86:	4651      	mov	r1, sl
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f00a fc6d 	bl	800d568 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1b1      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x288>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d1af      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x288>
 8002c98:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002c9c:	0093      	lsls	r3, r2, #2
 8002c9e:	4423      	add	r3, r4
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1a8      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x288>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8002ca6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002caa:	2101      	movs	r1, #1
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	f002 fdcb 	bl	8005848 <USB_EP0_OutStart>
 8002cb2:	e7a1      	b.n	8002bf8 <HAL_PCD_IRQHandler+0x288>
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff fd6d 	bl	8002796 <PCD_WriteEmptyTxFifo>
 8002cbc:	e7bf      	b.n	8002c3e <HAL_PCD_IRQHandler+0x2ce>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cbe:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if(hpcd->LPM_State == LPM_L1)
 8002cca:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d007      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x372>
        HAL_PCD_ResumeCallback(hpcd);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f00a fc82 	bl	800d5dc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	e674      	b.n	80029cc <HAL_PCD_IRQHandler+0x5c>
        hpcd->LPM_State = LPM_L0;
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f00a fd6d 	bl	800d7c8 <HAL_PCDEx_LPM_Callback>
 8002cee:	e7f3      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x368>
        HAL_PCD_SuspendCallback(hpcd);
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f00a fc5b 	bl	800d5ac <HAL_PCD_SuspendCallback>
 8002cf6:	e675      	b.n	80029e4 <HAL_PCD_IRQHandler+0x74>
        HAL_PCD_SuspendCallback(hpcd);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f00a fc57 	bl	800d5ac <HAL_PCD_SuspendCallback>
 8002cfe:	e690      	b.n	8002a22 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d00:	46b0      	mov	r8, r6
 8002d02:	f506 6900 	add.w	r9, r6, #2048	; 0x800
 8002d06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c9 3004 	str.w	r3, [r9, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8002d12:	2110      	movs	r1, #16
 8002d14:	6820      	ldr	r0, [r4, #0]
 8002d16:	f002 f925 	bl	8004f64 <USB_FlushTxFifo>
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d1a:	e013      	b.n	8002d44 <HAL_PCD_IRQHandler+0x3d4>
        USBx_INEP(i)->DIEPINT = 0xFF;
 8002d1c:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8002d20:	21ff      	movs	r1, #255	; 0xff
 8002d22:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d26:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002d2a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d2e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8002d32:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d36:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002d3a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d3e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002d42:	3701      	adds	r7, #1
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	429f      	cmp	r7, r3
 8002d48:	d3e8      	bcc.n	8002d1c <HAL_PCD_IRQHandler+0x3ac>
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	f8c9 3018 	str.w	r3, [r9, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8002d52:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002d56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d5a:	f8c9 301c 	str.w	r3, [r9, #28]
      if(hpcd->Init.use_dedicated_ep1)
 8002d5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d60:	b1e3      	cbz	r3, 8002d9c <HAL_PCD_IRQHandler+0x42c>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002d62:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
 8002d66:	f043 030b 	orr.w	r3, r3, #11
 8002d6a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002d6e:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8002d72:	f043 030b 	orr.w	r3, r3, #11
 8002d76:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d7a:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 8002d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d82:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d86:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002d8a:	7c21      	ldrb	r1, [r4, #16]
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	f002 fd5b 	bl	8005848 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	e649      	b.n	8002a30 <HAL_PCD_IRQHandler+0xc0>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8002d9c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8002da0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002da4:	f8c9 3014 	str.w	r3, [r9, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002da8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002dac:	f043 030b 	orr.w	r3, r3, #11
 8002db0:	f8c9 3010 	str.w	r3, [r9, #16]
 8002db4:	e7e1      	b.n	8002d7a <HAL_PCD_IRQHandler+0x40a>
      USB_ActivateSetup(hpcd->Instance);
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f002 fd2a 	bl	8005810 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	68d3      	ldr	r3, [r2, #12]
 8002dc0:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002dc4:	60d3      	str	r3, [r2, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	f002 f9b6 	bl	8005138 <USB_GetDevSpeed>
 8002dcc:	b988      	cbnz	r0, 8002df2 <HAL_PCD_IRQHandler+0x482>
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8002dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd6:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8002dd8:	6822      	ldr	r2, [r4, #0]
 8002dda:	68d3      	ldr	r3, [r2, #12]
 8002ddc:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002de0:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 8002de2:	4620      	mov	r0, r4
 8002de4:	f00a fbd1 	bl	800d58a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	e625      	b.n	8002a3e <HAL_PCD_IRQHandler+0xce>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002df2:	2303      	movs	r3, #3
 8002df4:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8002df6:	2340      	movs	r3, #64	; 0x40
 8002df8:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8002dfa:	f000 fda7 	bl	800394c <HAL_RCC_GetHCLKFreq>
		if((hclk >= 14200000)&&(hclk < 15000000))
 8002dfe:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_PCD_IRQHandler+0x614>)
 8002e00:	4403      	add	r3, r0
 8002e02:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_PCD_IRQHandler+0x618>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d805      	bhi.n	8002e14 <HAL_PCD_IRQHandler+0x4a4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	68d3      	ldr	r3, [r2, #12]
 8002e0c:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8002e10:	60d3      	str	r3, [r2, #12]
 8002e12:	e7e6      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 15000000)&&(hclk < 16000000))
 8002e14:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_PCD_IRQHandler+0x61c>)
 8002e16:	4403      	add	r3, r0
 8002e18:	4a5d      	ldr	r2, [pc, #372]	; (8002f90 <HAL_PCD_IRQHandler+0x620>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d805      	bhi.n	8002e2a <HAL_PCD_IRQHandler+0x4ba>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	68d3      	ldr	r3, [r2, #12]
 8002e22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e26:	60d3      	str	r3, [r2, #12]
 8002e28:	e7db      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 16000000)&&(hclk < 17200000))
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_PCD_IRQHandler+0x624>)
 8002e2c:	4403      	add	r3, r0
 8002e2e:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_PCD_IRQHandler+0x628>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d805      	bhi.n	8002e40 <HAL_PCD_IRQHandler+0x4d0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	68d3      	ldr	r3, [r2, #12]
 8002e38:	f443 5350 	orr.w	r3, r3, #13312	; 0x3400
 8002e3c:	60d3      	str	r3, [r2, #12]
 8002e3e:	e7d0      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 17200000)&&(hclk < 18500000))
 8002e40:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HAL_PCD_IRQHandler+0x62c>)
 8002e42:	4403      	add	r3, r0
 8002e44:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_PCD_IRQHandler+0x630>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d805      	bhi.n	8002e56 <HAL_PCD_IRQHandler+0x4e6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	68d3      	ldr	r3, [r2, #12]
 8002e4e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e52:	60d3      	str	r3, [r2, #12]
 8002e54:	e7c5      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 18500000)&&(hclk < 20000000))
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_PCD_IRQHandler+0x634>)
 8002e58:	4403      	add	r3, r0
 8002e5a:	4a53      	ldr	r2, [pc, #332]	; (8002fa8 <HAL_PCD_IRQHandler+0x638>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d805      	bhi.n	8002e6c <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	68d3      	ldr	r3, [r2, #12]
 8002e64:	f443 5330 	orr.w	r3, r3, #11264	; 0x2c00
 8002e68:	60d3      	str	r3, [r2, #12]
 8002e6a:	e7ba      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 20000000)&&(hclk < 21800000))
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_PCD_IRQHandler+0x63c>)
 8002e6e:	4403      	add	r3, r0
 8002e70:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <HAL_PCD_IRQHandler+0x640>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d805      	bhi.n	8002e82 <HAL_PCD_IRQHandler+0x512>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	68d3      	ldr	r3, [r2, #12]
 8002e7a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002e7e:	60d3      	str	r3, [r2, #12]
 8002e80:	e7af      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8002e82:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_PCD_IRQHandler+0x644>)
 8002e84:	4403      	add	r3, r0
 8002e86:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <HAL_PCD_IRQHandler+0x648>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d805      	bhi.n	8002e98 <HAL_PCD_IRQHandler+0x528>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	68d3      	ldr	r3, [r2, #12]
 8002e90:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002e94:	60d3      	str	r3, [r2, #12]
 8002e96:	e7a4      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 24000000)&&(hclk < 27700000))
 8002e98:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_PCD_IRQHandler+0x64c>)
 8002e9a:	4403      	add	r3, r0
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_PCD_IRQHandler+0x650>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d805      	bhi.n	8002eae <HAL_PCD_IRQHandler+0x53e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	68d3      	ldr	r3, [r2, #12]
 8002ea6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eaa:	60d3      	str	r3, [r2, #12]
 8002eac:	e799      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8002eae:	4b45      	ldr	r3, [pc, #276]	; (8002fc4 <HAL_PCD_IRQHandler+0x654>)
 8002eb0:	4403      	add	r3, r0
 8002eb2:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <HAL_PCD_IRQHandler+0x658>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d805      	bhi.n	8002ec4 <HAL_PCD_IRQHandler+0x554>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	68d3      	ldr	r3, [r2, #12]
 8002ebc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec0:	60d3      	str	r3, [r2, #12]
 8002ec2:	e78e      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	68d3      	ldr	r3, [r2, #12]
 8002ec8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8002ecc:	60d3      	str	r3, [r2, #12]
 8002ece:	e788      	b.n	8002de2 <HAL_PCD_IRQHandler+0x472>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8002ed0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ed4:	421f      	tst	r7, r3
 8002ed6:	f43f adc8 	beq.w	8002a6a <HAL_PCD_IRQHandler+0xfa>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8002eda:	093f      	lsrs	r7, r7, #4
 8002edc:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8002ee0:	ebaa 0308 	sub.w	r3, sl, r8
 8002ee4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8002ee8:	44a1      	add	r9, r4
 8002eea:	f3c7 020a 	ubfx	r2, r7, #0, #11
 8002eee:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f002 fbba 	bl	800566c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8002efc:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
 8002f00:	443b      	add	r3, r7
 8002f02:	f8c9 3204 	str.w	r3, [r9, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f06:	f8d9 3210 	ldr.w	r3, [r9, #528]	; 0x210
 8002f0a:	441f      	add	r7, r3
 8002f0c:	f8c9 7210 	str.w	r7, [r9, #528]	; 0x210
 8002f10:	e5ab      	b.n	8002a6a <HAL_PCD_IRQHandler+0xfa>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8002f12:	2208      	movs	r2, #8
 8002f14:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f002 fba7 	bl	800566c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1e:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8002f22:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002f26:	eba3 0108 	sub.w	r1, r3, r8
 8002f2a:	008a      	lsls	r2, r1, #2
 8002f2c:	4422      	add	r2, r4
 8002f2e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002f32:	441f      	add	r7, r3
 8002f34:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8002f38:	e597      	b.n	8002a6a <HAL_PCD_IRQHandler+0xfa>
      HAL_PCD_SOFCallback(hpcd);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f00a fb1f 	bl	800d57e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	2208      	movs	r2, #8
 8002f44:	615a      	str	r2, [r3, #20]
 8002f46:	e59c      	b.n	8002a82 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002f48:	b2e9      	uxtb	r1, r5
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f00a fb52 	bl	800d5f4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f56:	615a      	str	r2, [r3, #20]
 8002f58:	e59a      	b.n	8002a90 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002f5a:	b2e9      	uxtb	r1, r5
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f00a fb43 	bl	800d5e8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f68:	615a      	str	r2, [r3, #20]
 8002f6a:	e598      	b.n	8002a9e <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ConnectCallback(hpcd);
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f00a fb47 	bl	800d600 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f78:	615a      	str	r2, [r3, #20]
 8002f7a:	e597      	b.n	8002aac <HAL_PCD_IRQHandler+0x13c>
        HAL_PCD_DisconnectCallback(hpcd);
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f00a fb45 	bl	800d60c <HAL_PCD_DisconnectCallback>
 8002f82:	e5a0      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x156>
 8002f84:	ff275340 	.word	0xff275340
 8002f88:	000c34ff 	.word	0x000c34ff
 8002f8c:	ff1b1e40 	.word	0xff1b1e40
 8002f90:	000f423f 	.word	0x000f423f
 8002f94:	ff0bdc00 	.word	0xff0bdc00
 8002f98:	00124f7f 	.word	0x00124f7f
 8002f9c:	fef98c80 	.word	0xfef98c80
 8002fa0:	0013d61f 	.word	0x0013d61f
 8002fa4:	fee5b660 	.word	0xfee5b660
 8002fa8:	0016e35f 	.word	0x0016e35f
 8002fac:	feced300 	.word	0xfeced300
 8002fb0:	001b773f 	.word	0x001b773f
 8002fb4:	feb35bc0 	.word	0xfeb35bc0
 8002fb8:	002191bf 	.word	0x002191bf
 8002fbc:	fe91ca00 	.word	0xfe91ca00
 8002fc0:	0038751f 	.word	0x0038751f
 8002fc4:	fe5954e0 	.word	0xfe5954e0
 8002fc8:	00419cdf 	.word	0x00419cdf

08002fcc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002fcc:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_SetAddress+0xc>
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	4770      	bx	lr
{
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002fe2:	6800      	ldr	r0, [r0, #0]
 8002fe4:	f002 fbbd 	bl	8005762 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <HAL_PCD_EP_Open>:
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8002ff2:	b24d      	sxtb	r5, r1
 8002ff4:	2d00      	cmp	r5, #0
 8002ff6:	db18      	blt.n	800302a <HAL_PCD_EP_Open+0x3a>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002ff8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002ffc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8003000:	00b4      	lsls	r4, r6, #2
 8003002:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8003006:	4404      	add	r4, r0
  ep->num   = ep_addr & 0x7F;
 8003008:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800300c:	7021      	strb	r1, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800300e:	0fed      	lsrs	r5, r5, #31
 8003010:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8003012:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8003014:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8003016:	b105      	cbz	r5, 800301a <HAL_PCD_EP_Open+0x2a>
    ep->tx_fifo_num = ep->num;
 8003018:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK )
 800301a:	2b02      	cmp	r3, #2
 800301c:	d00d      	beq.n	800303a <HAL_PCD_EP_Open+0x4a>
  __HAL_LOCK(hpcd);
 800301e:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10c      	bne.n	8003040 <HAL_PCD_EP_Open+0x50>
 8003026:	2002      	movs	r0, #2
}
 8003028:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800302a:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800302e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8003032:	00b4      	lsls	r4, r6, #2
 8003034:	3438      	adds	r4, #56	; 0x38
 8003036:	4404      	add	r4, r0
 8003038:	e7e6      	b.n	8003008 <HAL_PCD_EP_Open+0x18>
    ep->data_pid_start = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	7123      	strb	r3, [r4, #4]
 800303e:	e7ee      	b.n	800301e <HAL_PCD_EP_Open+0x2e>
 8003040:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8003042:	2301      	movs	r3, #1
 8003044:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8003048:	4621      	mov	r1, r4
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	f002 f894 	bl	8005178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003050:	2000      	movs	r0, #0
 8003052:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return ret;
 8003056:	bd70      	pop	{r4, r5, r6, pc}

08003058 <HAL_PCD_EP_Close>:
{
 8003058:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80) == 0x80)
 800305a:	b24a      	sxtb	r2, r1
 800305c:	2a00      	cmp	r2, #0
 800305e:	db12      	blt.n	8003086 <HAL_PCD_EP_Close+0x2e>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003060:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003064:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8003068:	00a3      	lsls	r3, r4, #2
 800306a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800306e:	4403      	add	r3, r0
  ep->num   = ep_addr & 0x7F;
 8003070:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003074:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8003076:	0fd2      	lsrs	r2, r2, #31
 8003078:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 800307a:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 800307e:	2a01      	cmp	r2, #1
 8003080:	d109      	bne.n	8003096 <HAL_PCD_EP_Close+0x3e>
 8003082:	2002      	movs	r0, #2
}
 8003084:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003086:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800308a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800308e:	00a3      	lsls	r3, r4, #2
 8003090:	3338      	adds	r3, #56	; 0x38
 8003092:	4403      	add	r3, r0
 8003094:	e7ec      	b.n	8003070 <HAL_PCD_EP_Close+0x18>
 8003096:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003098:	2201      	movs	r2, #1
 800309a:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800309e:	4619      	mov	r1, r3
 80030a0:	6800      	ldr	r0, [r0, #0]
 80030a2:	f002 f8b1 	bl	8005208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80030ac:	bd10      	pop	{r4, pc}

080030ae <HAL_PCD_EP_Receive>:
{
 80030ae:	b570      	push	{r4, r5, r6, lr}
 80030b0:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80030b4:	00f5      	lsls	r5, r6, #3
 80030b6:	1ba9      	subs	r1, r5, r6
 80030b8:	008c      	lsls	r4, r1, #2
 80030ba:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80030be:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 80030c0:	1bad      	subs	r5, r5, r6
 80030c2:	00ac      	lsls	r4, r5, #2
 80030c4:	4404      	add	r4, r0
 80030c6:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
 80030ca:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0;
 80030d4:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 80030d8:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1)
 80030dc:	6903      	ldr	r3, [r0, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d006      	beq.n	80030f0 <HAL_PCD_EP_Receive+0x42>
  if ((ep_addr & 0x7F) == 0)
 80030e2:	b166      	cbz	r6, 80030fe <HAL_PCD_EP_Receive+0x50>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	6800      	ldr	r0, [r0, #0]
 80030e8:	f002 f990 	bl	800540c <USB_EPStartXfer>
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80030f0:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 80030f4:	00ac      	lsls	r4, r5, #2
 80030f6:	4404      	add	r4, r0
 80030f8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
 80030fc:	e7f1      	b.n	80030e2 <HAL_PCD_EP_Receive+0x34>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	6800      	ldr	r0, [r0, #0]
 8003102:	f002 f8c1 	bl	8005288 <USB_EP0StartXfer>
 8003106:	e7f1      	b.n	80030ec <HAL_PCD_EP_Receive+0x3e>

08003108 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8003108:	f001 010f 	and.w	r1, r1, #15
 800310c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003110:	008b      	lsls	r3, r1, #2
 8003112:	4418      	add	r0, r3
}
 8003114:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 8003118:	4770      	bx	lr

0800311a <HAL_PCD_EP_Transmit>:
{
 800311a:	b570      	push	{r4, r5, r6, lr}
 800311c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003120:	00f5      	lsls	r5, r6, #3
 8003122:	1ba9      	subs	r1, r5, r6
 8003124:	008c      	lsls	r4, r1, #2
 8003126:	3438      	adds	r4, #56	; 0x38
 8003128:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 800312a:	1bad      	subs	r5, r5, r6
 800312c:	00ac      	lsls	r4, r5, #2
 800312e:	4404      	add	r4, r0
 8003130:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
 8003132:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 800313e:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1)
 8003142:	6903      	ldr	r3, [r0, #16]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d006      	beq.n	8003156 <HAL_PCD_EP_Transmit+0x3c>
  if ((ep_addr & 0x7F) == 0)
 8003148:	b15e      	cbz	r6, 8003162 <HAL_PCD_EP_Transmit+0x48>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800314a:	b2da      	uxtb	r2, r3
 800314c:	6800      	ldr	r0, [r0, #0]
 800314e:	f002 f95d 	bl	800540c <USB_EPStartXfer>
}
 8003152:	2000      	movs	r0, #0
 8003154:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003156:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 800315a:	00ac      	lsls	r4, r5, #2
 800315c:	4404      	add	r4, r0
 800315e:	64a2      	str	r2, [r4, #72]	; 0x48
 8003160:	e7f2      	b.n	8003148 <HAL_PCD_EP_Transmit+0x2e>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8003162:	b2da      	uxtb	r2, r3
 8003164:	6800      	ldr	r0, [r0, #0]
 8003166:	f002 f88f 	bl	8005288 <USB_EP0StartXfer>
 800316a:	e7f2      	b.n	8003152 <HAL_PCD_EP_Transmit+0x38>

0800316c <HAL_PCD_EP_SetStall>:
{
 800316c:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 800316e:	f001 020f 	and.w	r2, r1, #15
 8003172:	6843      	ldr	r3, [r0, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d831      	bhi.n	80031dc <HAL_PCD_EP_SetStall+0x70>
  if ((0x80 & ep_addr) == 0x80)
 8003178:	b24a      	sxtb	r2, r1
 800317a:	2a00      	cmp	r2, #0
 800317c:	db12      	blt.n	80031a4 <HAL_PCD_EP_SetStall+0x38>
    ep = &hpcd->OUT_ep[ep_addr];
 800317e:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8003182:	00a3      	lsls	r3, r4, #2
 8003184:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003188:	4403      	add	r3, r0
  ep->is_stall = 1;
 800318a:	2401      	movs	r4, #1
 800318c:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800318e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003192:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003194:	0fd2      	lsrs	r2, r2, #31
 8003196:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8003198:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 800319c:	2a01      	cmp	r2, #1
 800319e:	d109      	bne.n	80031b4 <HAL_PCD_EP_SetStall+0x48>
 80031a0:	2002      	movs	r0, #2
}
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031a4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80031a8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80031ac:	00a3      	lsls	r3, r4, #2
 80031ae:	3338      	adds	r3, #56	; 0x38
 80031b0:	4403      	add	r3, r0
 80031b2:	e7ea      	b.n	800318a <HAL_PCD_EP_SetStall+0x1e>
 80031b4:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 80031b6:	2201      	movs	r2, #1
 80031b8:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80031bc:	4619      	mov	r1, r3
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	f002 fa68 	bl	8005694 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80031c4:	b11c      	cbz	r4, 80031ce <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return HAL_OK;
 80031cc:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ce:	f505 726f 	add.w	r2, r5, #956	; 0x3bc
 80031d2:	7c29      	ldrb	r1, [r5, #16]
 80031d4:	6828      	ldr	r0, [r5, #0]
 80031d6:	f002 fb37 	bl	8005848 <USB_EP0_OutStart>
 80031da:	e7f4      	b.n	80031c6 <HAL_PCD_EP_SetStall+0x5a>
    return HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	bd38      	pop	{r3, r4, r5, pc}

080031e0 <HAL_PCD_EP_ClrStall>:
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 80031e0:	f001 020f 	and.w	r2, r1, #15
 80031e4:	6843      	ldr	r3, [r0, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d82a      	bhi.n	8003240 <HAL_PCD_EP_ClrStall+0x60>
{
 80031ea:	b510      	push	{r4, lr}
  if ((0x80 & ep_addr) == 0x80)
 80031ec:	b24a      	sxtb	r2, r1
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	db12      	blt.n	8003218 <HAL_PCD_EP_ClrStall+0x38>
    ep = &hpcd->OUT_ep[ep_addr];
 80031f2:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 80031f6:	00a3      	lsls	r3, r4, #2
 80031f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031fc:	4403      	add	r3, r0
  ep->is_stall = 0;
 80031fe:	2400      	movs	r4, #0
 8003200:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8003202:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003206:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003208:	0fd2      	lsrs	r2, r2, #31
 800320a:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 800320c:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8003210:	2a01      	cmp	r2, #1
 8003212:	d109      	bne.n	8003228 <HAL_PCD_EP_ClrStall+0x48>
 8003214:	2002      	movs	r0, #2
}
 8003216:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003218:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800321c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8003220:	00a3      	lsls	r3, r4, #2
 8003222:	3338      	adds	r3, #56	; 0x38
 8003224:	4403      	add	r3, r0
 8003226:	e7ea      	b.n	80031fe <HAL_PCD_EP_ClrStall+0x1e>
 8003228:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800322a:	2201      	movs	r2, #1
 800322c:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8003230:	4619      	mov	r1, r3
 8003232:	6800      	ldr	r0, [r0, #0]
 8003234:	f002 fa60 	bl	80056f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003238:	2000      	movs	r0, #0
 800323a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800323e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003240:	2001      	movs	r0, #1
 8003242:	4770      	bx	lr

08003244 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8003244:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8003248:	2b01      	cmp	r3, #1
 800324a:	d014      	beq.n	8003276 <HAL_PCD_EP_Flush+0x32>
{
 800324c:	b510      	push	{r4, lr}
 800324e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003250:	2301      	movs	r3, #1
 8003252:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  if ((ep_addr & 0x80) == 0x80)
 8003256:	f011 0f80 	tst.w	r1, #128	; 0x80
 800325a:	d106      	bne.n	800326a <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 800325c:	6800      	ldr	r0, [r0, #0]
 800325e:	f001 fe95 	bl	8004f8c <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8003262:	2000      	movs	r0, #0
 8003264:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8003268:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800326a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800326e:	6800      	ldr	r0, [r0, #0]
 8003270:	f001 fe78 	bl	8004f64 <USB_FlushTxFifo>
 8003274:	e7f5      	b.n	8003262 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8003276:	2002      	movs	r0, #2
 8003278:	4770      	bx	lr

0800327a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800327a:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800327c:	6804      	ldr	r4, [r0, #0]
 800327e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0)
 8003280:	b129      	cbz	r1, 800328e <HAL_PCDEx_SetTxFiFo+0x14>
 8003282:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003286:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800328a:	2300      	movs	r3, #0
 800328c:	e00c      	b.n	80032a8 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 800328e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003292:	62a0      	str	r0, [r4, #40]	; 0x28
 8003294:	e012      	b.n	80032bc <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003296:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800329a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800329e:	6849      	ldr	r1, [r1, #4]
 80032a0:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80032a4:	3301      	adds	r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	1e69      	subs	r1, r5, #1
 80032aa:	428b      	cmp	r3, r1
 80032ac:	dbf3      	blt.n	8003296 <HAL_PCDEx_SetTxFiFo+0x1c>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80032ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80032b2:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80032b6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80032ba:	6048      	str	r0, [r1, #4]
  }
  
  return HAL_OK;
}
 80032bc:	2000      	movs	r0, #0
 80032be:	bc30      	pop	{r4, r5}
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 80032c6:	2000      	movs	r0, #0
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032cc:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80032ce:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 80032d0:	2101      	movs	r1, #1
 80032d2:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 80032d6:	2000      	movs	r0, #0
 80032d8:	f882 03ec 	strb.w	r0, [r2, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032e2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032e6:	4a02      	ldr	r2, [pc, #8]	; (80032f0 <HAL_PCDEx_ActivateLPM+0x24>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
  
  return HAL_OK;  
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	10000003 	.word	0x10000003

080032f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_PWREx_EnableOverDrive+0x74>)
 80032fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800330c:	4a17      	ldr	r2, [pc, #92]	; (800336c <HAL_PWREx_EnableOverDrive+0x78>)
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003316:	f7fe f97b 	bl	8001610 <HAL_GetTick>
 800331a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_PWREx_EnableOverDrive+0x78>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003324:	d108      	bne.n	8003338 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003326:	f7fe f973 	bl	8001610 <HAL_GetTick>
 800332a:	1b00      	subs	r0, r0, r4
 800332c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003330:	d9f4      	bls.n	800331c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003332:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003334:	b002      	add	sp, #8
 8003336:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <HAL_PWREx_EnableOverDrive+0x78>)
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003342:	f7fe f965 	bl	8001610 <HAL_GetTick>
 8003346:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_PWREx_EnableOverDrive+0x78>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003350:	d107      	bne.n	8003362 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003352:	f7fe f95d 	bl	8001610 <HAL_GetTick>
 8003356:	1b00      	subs	r0, r0, r4
 8003358:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800335c:	d9f4      	bls.n	8003348 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800335e:	2003      	movs	r0, #3
 8003360:	e7e8      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003362:	2000      	movs	r0, #0
 8003364:	e7e6      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x40>
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000

08003370 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003370:	2800      	cmp	r0, #0
 8003372:	f000 81db 	beq.w	800372c <HAL_RCC_OscConfig+0x3bc>
{
 8003376:	b570      	push	{r4, r5, r6, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	f013 0f01 	tst.w	r3, #1
 8003382:	d03a      	beq.n	80033fa <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003384:	4ba2      	ldr	r3, [pc, #648]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b04      	cmp	r3, #4
 800338e:	d02b      	beq.n	80033e8 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003390:	4b9f      	ldr	r3, [pc, #636]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a2:	d050      	beq.n	8003446 <HAL_RCC_OscConfig+0xd6>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d154      	bne.n	8003452 <HAL_RCC_OscConfig+0xe2>
 80033a8:	4b99      	ldr	r3, [pc, #612]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ba:	6863      	ldr	r3, [r4, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05f      	beq.n	8003480 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe f926 	bl	8001610 <HAL_GetTick>
 80033c4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033ce:	d114      	bne.n	80033fa <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe f91e 	bl	8001610 <HAL_GetTick>
 80033d4:	1b40      	subs	r0, r0, r5
 80033d6:	2864      	cmp	r0, #100	; 0x64
 80033d8:	d9f5      	bls.n	80033c6 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
 80033dc:	e1ab      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033e6:	d0d9      	beq.n	800339c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_OscConfig+0x8a>
 80033f2:	6863      	ldr	r3, [r4, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 819b 	beq.w	8003730 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	f013 0f02 	tst.w	r3, #2
 8003400:	d064      	beq.n	80034cc <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b83      	ldr	r3, [pc, #524]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f013 0f0c 	tst.w	r3, #12
 800340a:	d04d      	beq.n	80034a8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d042      	beq.n	800349e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003418:	68e3      	ldr	r3, [r4, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d079      	beq.n	8003512 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341e:	4a7c      	ldr	r2, [pc, #496]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe f8f2 	bl	8001610 <HAL_GetTick>
 800342c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b78      	ldr	r3, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f013 0f02 	tst.w	r3, #2
 8003436:	d163      	bne.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003438:	f7fe f8ea 	bl	8001610 <HAL_GetTick>
 800343c:	1b40      	subs	r0, r0, r5
 800343e:	2802      	cmp	r0, #2
 8003440:	d9f5      	bls.n	800342e <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8003442:	2003      	movs	r0, #3
 8003444:	e177      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003446:	4a72      	ldr	r2, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e7b3      	b.n	80033ba <HAL_RCC_OscConfig+0x4a>
 8003452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003456:	d009      	beq.n	800346c <HAL_RCC_OscConfig+0xfc>
 8003458:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e7a6      	b.n	80033ba <HAL_RCC_OscConfig+0x4a>
 800346c:	4b68      	ldr	r3, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e79c      	b.n	80033ba <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8003480:	f7fe f8c6 	bl	8001610 <HAL_GetTick>
 8003484:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b62      	ldr	r3, [pc, #392]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800348e:	d0b4      	beq.n	80033fa <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe f8be 	bl	8001610 <HAL_GetTick>
 8003494:	1b40      	subs	r0, r0, r5
 8003496:	2864      	cmp	r0, #100	; 0x64
 8003498:	d9f5      	bls.n	8003486 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
 800349c:	e14b      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034a6:	d1b7      	bne.n	8003418 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f013 0f02 	tst.w	r3, #2
 80034b0:	d004      	beq.n	80034bc <HAL_RCC_OscConfig+0x14c>
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
 80034ba:	e13c      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034c4:	6921      	ldr	r1, [r4, #16]
 80034c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034ca:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f013 0f08 	tst.w	r3, #8
 80034d2:	d046      	beq.n	8003562 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d4:	6963      	ldr	r3, [r4, #20]
 80034d6:	b383      	cbz	r3, 800353a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d8:	4a4d      	ldr	r2, [pc, #308]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034da:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe f895 	bl	8001610 <HAL_GetTick>
 80034e6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f013 0f02 	tst.w	r3, #2
 80034f0:	d137      	bne.n	8003562 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe f88d 	bl	8001610 <HAL_GetTick>
 80034f6:	1b40      	subs	r0, r0, r5
 80034f8:	2802      	cmp	r0, #2
 80034fa:	d9f5      	bls.n	80034e8 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80034fc:	2003      	movs	r0, #3
 80034fe:	e11a      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4a43      	ldr	r2, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003508:	6921      	ldr	r1, [r4, #16]
 800350a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e7dc      	b.n	80034cc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8003512:	4a3f      	ldr	r2, [pc, #252]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800351c:	f7fe f878 	bl	8001610 <HAL_GetTick>
 8003520:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f013 0f02 	tst.w	r3, #2
 800352a:	d0cf      	beq.n	80034cc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe f870 	bl	8001610 <HAL_GetTick>
 8003530:	1b40      	subs	r0, r0, r5
 8003532:	2802      	cmp	r0, #2
 8003534:	d9f5      	bls.n	8003522 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8003536:	2003      	movs	r0, #3
 8003538:	e0fd      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4a35      	ldr	r2, [pc, #212]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800353c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe f864 	bl	8001610 <HAL_GetTick>
 8003548:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	f013 0f02 	tst.w	r3, #2
 8003552:	d006      	beq.n	8003562 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe f85c 	bl	8001610 <HAL_GetTick>
 8003558:	1b40      	subs	r0, r0, r5
 800355a:	2802      	cmp	r0, #2
 800355c:	d9f5      	bls.n	800354a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800355e:	2003      	movs	r0, #3
 8003560:	e0e9      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	f013 0f04 	tst.w	r3, #4
 8003568:	d07e      	beq.n	8003668 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003572:	d131      	bne.n	80035d8 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003588:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_OscConfig+0x2a4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003592:	d023      	beq.n	80035dc <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	68a3      	ldr	r3, [r4, #8]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d034      	beq.n	8003604 <HAL_RCC_OscConfig+0x294>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d13c      	bne.n	8003618 <HAL_RCC_OscConfig+0x2a8>
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80035a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	671a      	str	r2, [r3, #112]	; 0x70
 80035a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035aa:	f022 0204 	bic.w	r2, r2, #4
 80035ae:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d046      	beq.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe f82b 	bl	8001610 <HAL_GetTick>
 80035ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	f013 0f02 	tst.w	r3, #2
 80035c4:	d14f      	bne.n	8003666 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe f823 	bl	8001610 <HAL_GetTick>
 80035ca:	1b80      	subs	r0, r0, r6
 80035cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80035d0:	4298      	cmp	r0, r3
 80035d2:	d9f3      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2003      	movs	r0, #3
 80035d6:	e0ae      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
  FlagStatus pwrclkchanged = RESET;
 80035d8:	2500      	movs	r5, #0
 80035da:	e7d6      	b.n	800358a <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x2a4>)
 80035de:	6813      	ldr	r3, [r2, #0]
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035e6:	f7fe f813 	bl	8001610 <HAL_GetTick>
 80035ea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_OscConfig+0x2a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035f4:	d1ce      	bne.n	8003594 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fe f80b 	bl	8001610 <HAL_GetTick>
 80035fa:	1b80      	subs	r0, r0, r6
 80035fc:	2864      	cmp	r0, #100	; 0x64
 80035fe:	d9f5      	bls.n	80035ec <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8003600:	2003      	movs	r0, #3
 8003602:	e098      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	4a02      	ldr	r2, [pc, #8]	; (8003610 <HAL_RCC_OscConfig+0x2a0>)
 8003606:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e7cf      	b.n	80035b0 <HAL_RCC_OscConfig+0x240>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	2b05      	cmp	r3, #5
 800361a:	d009      	beq.n	8003630 <HAL_RCC_OscConfig+0x2c0>
 800361c:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 800361e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	671a      	str	r2, [r3, #112]	; 0x70
 8003626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003628:	f022 0204 	bic.w	r2, r2, #4
 800362c:	671a      	str	r2, [r3, #112]	; 0x70
 800362e:	e7bf      	b.n	80035b0 <HAL_RCC_OscConfig+0x240>
 8003630:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 8003632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003634:	f042 0204 	orr.w	r2, r2, #4
 8003638:	671a      	str	r2, [r3, #112]	; 0x70
 800363a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	671a      	str	r2, [r3, #112]	; 0x70
 8003642:	e7b5      	b.n	80035b0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd ffe4 	bl	8001610 <HAL_GetTick>
 8003648:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f013 0f02 	tst.w	r3, #2
 8003652:	d008      	beq.n	8003666 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd ffdc 	bl	8001610 <HAL_GetTick>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	f241 3388 	movw	r3, #5000	; 0x1388
 800365e:	4298      	cmp	r0, r3
 8003660:	d9f3      	bls.n	800364a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8003662:	2003      	movs	r0, #3
 8003664:	e067      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	b9f5      	cbnz	r5, 80036a6 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003668:	69a3      	ldr	r3, [r4, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d062      	beq.n	8003734 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366e:	4a34      	ldr	r2, [pc, #208]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	f002 020c 	and.w	r2, r2, #12
 8003676:	2a08      	cmp	r2, #8
 8003678:	d05f      	beq.n	800373a <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	2b02      	cmp	r3, #2
 800367c:	d019      	beq.n	80036b2 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd ffc2 	bl	8001610 <HAL_GetTick>
 800368c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003696:	d047      	beq.n	8003728 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd ffba 	bl	8001610 <HAL_GetTick>
 800369c:	1b00      	subs	r0, r0, r4
 800369e:	2802      	cmp	r0, #2
 80036a0:	d9f5      	bls.n	800368e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80036a2:	2003      	movs	r0, #3
 80036a4:	e047      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 80036a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
 80036b0:	e7da      	b.n	8003668 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036bc:	f7fd ffa8 	bl	8001610 <HAL_GetTick>
 80036c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036ca:	d006      	beq.n	80036da <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd ffa0 	bl	8001610 <HAL_GetTick>
 80036d0:	1b40      	subs	r0, r0, r5
 80036d2:	2802      	cmp	r0, #2
 80036d4:	d9f5      	bls.n	80036c2 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
 80036d8:	e02d      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036da:	69e3      	ldr	r3, [r4, #28]
 80036dc:	6a22      	ldr	r2, [r4, #32]
 80036de:	4313      	orrs	r3, r2
 80036e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 80036fc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003704:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003706:	f7fd ff83 	bl	8001610 <HAL_GetTick>
 800370a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_RCC_OscConfig+0x3d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fd ff7b 	bl	8001610 <HAL_GetTick>
 800371a:	1b00      	subs	r0, r0, r4
 800371c:	2802      	cmp	r0, #2
 800371e:	d9f5      	bls.n	800370c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003724:	2000      	movs	r0, #0
 8003726:	e006      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
 8003728:	2000      	movs	r0, #0
 800372a:	e004      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	4770      	bx	lr
        return HAL_ERROR;
 8003730:	2001      	movs	r0, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8003734:	2000      	movs	r0, #0
}
 8003736:	b002      	add	sp, #8
 8003738:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e7fb      	b.n	8003736 <HAL_RCC_OscConfig+0x3c6>
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d041      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x92>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d001      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003756:	4822      	ldr	r0, [pc, #136]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003768:	d012      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003772:	2300      	movs	r3, #0
 8003774:	481b      	ldr	r0, [pc, #108]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003776:	fba1 0100 	umull	r0, r1, r1, r0
 800377a:	f7fd f9eb 	bl	8000b54 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800377e:	4b17      	ldr	r3, [pc, #92]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800378a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003798:	461e      	mov	r6, r3
 800379a:	2700      	movs	r7, #0
 800379c:	015c      	lsls	r4, r3, #5
 800379e:	2500      	movs	r5, #0
 80037a0:	1ae4      	subs	r4, r4, r3
 80037a2:	eb65 0507 	sbc.w	r5, r5, r7
 80037a6:	01a9      	lsls	r1, r5, #6
 80037a8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80037ac:	01a0      	lsls	r0, r4, #6
 80037ae:	1b00      	subs	r0, r0, r4
 80037b0:	eb61 0105 	sbc.w	r1, r1, r5
 80037b4:	00cb      	lsls	r3, r1, #3
 80037b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80037ba:	00c4      	lsls	r4, r0, #3
 80037bc:	19a0      	adds	r0, r4, r6
 80037be:	eb43 0107 	adc.w	r1, r3, r7
 80037c2:	028b      	lsls	r3, r1, #10
 80037c4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80037c8:	0284      	lsls	r4, r0, #10
 80037ca:	4620      	mov	r0, r4
 80037cc:	4619      	mov	r1, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	f7fd f9c0 	bl	8000b54 <__aeabi_uldivmod>
 80037d4:	e7d3      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80037d6:	4803      	ldr	r0, [pc, #12]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	017d7840 	.word	0x017d7840

080037e8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80037e8:	2800      	cmp	r0, #0
 80037ea:	f000 80a2 	beq.w	8003932 <HAL_RCC_ClockConfig+0x14a>
{
 80037ee:	b570      	push	{r4, r5, r6, lr}
 80037f0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f2:	4b52      	ldr	r3, [pc, #328]	; (800393c <HAL_RCC_ClockConfig+0x154>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	428b      	cmp	r3, r1
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4a4f      	ldr	r2, [pc, #316]	; (800393c <HAL_RCC_ClockConfig+0x154>)
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	f023 030f 	bic.w	r3, r3, #15
 8003806:	430b      	orrs	r3, r1
 8003808:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	4299      	cmp	r1, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003814:	2001      	movs	r0, #1
 8003816:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	f013 0f02 	tst.w	r3, #2
 800381e:	d017      	beq.n	8003850 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	f013 0f04 	tst.w	r3, #4
 8003824:	d004      	beq.n	8003830 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003826:	4a46      	ldr	r2, [pc, #280]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003828:	6893      	ldr	r3, [r2, #8]
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	f013 0f08 	tst.w	r3, #8
 8003836:	d004      	beq.n	8003842 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 800383a:	6893      	ldr	r3, [r2, #8]
 800383c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003840:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003842:	4a3f      	ldr	r2, [pc, #252]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003844:	6893      	ldr	r3, [r2, #8]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384a:	68a0      	ldr	r0, [r4, #8]
 800384c:	4303      	orrs	r3, r0
 800384e:	6093      	str	r3, [r2, #8]
 8003850:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	f013 0f01 	tst.w	r3, #1
 8003858:	d031      	beq.n	80038be <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003860:	2b02      	cmp	r3, #2
 8003862:	d025      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4a36      	ldr	r2, [pc, #216]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f012 0f02 	tst.w	r2, #2
 800386c:	d063      	beq.n	8003936 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4934      	ldr	r1, [pc, #208]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	f022 0203 	bic.w	r2, r2, #3
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800387a:	f7fd fec9 	bl	8001610 <HAL_GetTick>
 800387e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003880:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	6862      	ldr	r2, [r4, #4]
 800388a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800388e:	d016      	beq.n	80038be <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fd febe 	bl	8001610 <HAL_GetTick>
 8003894:	1b80      	subs	r0, r0, r6
 8003896:	f241 3388 	movw	r3, #5000	; 0x1388
 800389a:	4298      	cmp	r0, r3
 800389c:	d9f0      	bls.n	8003880 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800389e:	2003      	movs	r0, #3
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80038aa:	d1e0      	bne.n	800386e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80038ac:	2001      	movs	r0, #1
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80038b8:	d1d9      	bne.n	800386e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80038ba:	2001      	movs	r0, #1
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_RCC_ClockConfig+0x154>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	429d      	cmp	r5, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_RCC_ClockConfig+0x154>)
 80038cc:	6813      	ldr	r3, [r2, #0]
 80038ce:	f023 030f 	bic.w	r3, r3, #15
 80038d2:	432b      	orrs	r3, r5
 80038d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	6813      	ldr	r3, [r2, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	429d      	cmp	r5, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80038e0:	2001      	movs	r0, #1
}
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	f013 0f04 	tst.w	r3, #4
 80038ea:	d006      	beq.n	80038fa <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 80038ee:	6893      	ldr	r3, [r2, #8]
 80038f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80038f4:	68e1      	ldr	r1, [r4, #12]
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	f013 0f08 	tst.w	r3, #8
 8003900:	d007      	beq.n	8003912 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800390a:	6921      	ldr	r1, [r4, #16]
 800390c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003910:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003912:	f7ff ff17 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_ClockConfig+0x158>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x15c>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	40d8      	lsrs	r0, r3
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_RCC_ClockConfig+0x160>)
 8003926:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003928:	2000      	movs	r0, #0
 800392a:	f009 fd3d 	bl	800d3a8 <HAL_InitTick>
  return HAL_OK;
 800392e:	2000      	movs	r0, #0
 8003930:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
 8003934:	4770      	bx	lr
        return HAL_ERROR;
 8003936:	2001      	movs	r0, #1
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	08026c48 	.word	0x08026c48
 8003948:	200000c0 	.word	0x200000c0

0800394c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <HAL_RCC_GetHCLKFreq+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200000c0 	.word	0x200000c0

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800395a:	f7ff fff7 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
}
 800396a:	40d8      	lsrs	r0, r3
 800396c:	bd08      	pop	{r3, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	08026c58 	.word	0x08026c58

08003978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003978:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800397a:	f7ff ffe7 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003986:	4a03      	ldr	r2, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
}
 800398a:	40d8      	lsrs	r0, r3
 800398c:	bd08      	pop	{r3, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	08026c58 	.word	0x08026c58

08003998 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003998:	230f      	movs	r3, #15
 800399a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_GetClockConfig+0x34>)
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	f002 0203 	and.w	r2, r2, #3
 80039a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80039ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80039b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039be:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetClockConfig+0x38>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	4770      	bx	lr
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40023c00 	.word	0x40023c00

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	b083      	sub	sp, #12
 80039d8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	f013 0f01 	tst.w	r3, #1
 80039e0:	d00c      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039e2:	4baf      	ldr	r3, [pc, #700]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039f6:	b1c3      	cbz	r3, 8003a2a <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80039f8:	2700      	movs	r7, #0
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80039fc:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003a04:	d015      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a06:	4aa6      	ldr	r2, [pc, #664]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a08:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003a12:	430b      	orrs	r3, r1
 8003a14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d006      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 811b 	beq.w	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 8003a26:	2500      	movs	r5, #0
 8003a28:	e004      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8003a2a:	2701      	movs	r7, #1
 8003a2c:	e7e7      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8003a2e:	2701      	movs	r7, #1
 8003a30:	e7f6      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8003a32:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a3a:	d00f      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a3c:	4a98      	ldr	r2, [pc, #608]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a54:	f000 8104 	beq.w	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a58:	b903      	cbnz	r3, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 8003a5a:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003a62:	d000      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {    
      plli2sused = 1; 
 8003a64:	2701      	movs	r7, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	f013 0f20 	tst.w	r3, #32
 8003a6a:	f040 80fb 	bne.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	f013 0f10 	tst.w	r3, #16
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a76:	4b8a      	ldr	r3, [pc, #552]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a98:	4a81      	ldr	r2, [pc, #516]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003aa2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ab4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ab8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003abc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003aca:	d008      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003acc:	4a74      	ldr	r2, [pc, #464]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ace:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ad2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ad6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae6:	4a6e      	ldr	r2, [pc, #440]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ae8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003aec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003af0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003af2:	430b      	orrs	r3, r1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b00:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b20:	f023 030c 	bic.w	r3, r3, #12
 8003b24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b26:	430b      	orrs	r3, r1
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b34:	4a5a      	ldr	r2, [pc, #360]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003b40:	430b      	orrs	r3, r1
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003b4c:	d008      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b4e:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b58:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b68:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b72:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b74:	430b      	orrs	r3, r1
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b82:	4a47      	ldr	r2, [pc, #284]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b9a:	d008      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b9c:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bb6:	4a3a      	ldr	r2, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003bc0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003bce:	d008      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd0:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bda:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003be8:	d00d      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bea:	4a2d      	ldr	r2, [pc, #180]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bf0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003bf4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bfc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c02:	f000 8099 	beq.w	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f013 0f08 	tst.w	r3, #8
 8003c0c:	d000      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1; 
 8003c0e:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c10:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003c18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c1c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003c20:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003c22:	430b      	orrs	r3, r1
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003c2e:	d009      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003c32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c44:	2f00      	cmp	r7, #0
 8003c46:	d179      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4e:	d075      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	f040 8107 	bne.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c56:	2000      	movs	r0, #0
}
 8003c58:	b003      	add	sp, #12
 8003c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 8003c5c:	2501      	movs	r5, #1
 8003c5e:	e6e9      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8003c60:	2701      	movs	r7, #1
 8003c62:	e6f9      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c82:	f7fd fcc5 	bl	8001610 <HAL_GetTick>
 8003c86:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fd fcbd 	bl	8001610 <HAL_GetTick>
 8003c96:	1b80      	subs	r0, r0, r6
 8003c98:	2864      	cmp	r0, #100	; 0x64
 8003c9a:	d9f5      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	e7db      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca8:	4bb3      	ldr	r3, [pc, #716]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cb0:	d015      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003cb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cb4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d010      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	4bae      	ldr	r3, [pc, #696]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cc6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003cca:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cce:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003cd2:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003cd4:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f013 0f01 	tst.w	r3, #1
 8003cdc:	d112      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ce0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ce4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ce8:	d01d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003cea:	4aa3      	ldr	r2, [pc, #652]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003cec:	6893      	ldr	r3, [r2, #8]
 8003cee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cf2:	6093      	str	r3, [r2, #8]
 8003cf4:	49a0      	ldr	r1, [pc, #640]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003cf6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cfa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	670b      	str	r3, [r1, #112]	; 0x70
 8003d02:	e6b4      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003d04:	f7fd fc84 	bl	8001610 <HAL_GetTick>
 8003d08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	4b9b      	ldr	r3, [pc, #620]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f013 0f02 	tst.w	r3, #2
 8003d12:	d1e4      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd fc7c 	bl	8001610 <HAL_GetTick>
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d1e:	4298      	cmp	r0, r3
 8003d20:	d9f3      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8003d22:	2003      	movs	r0, #3
 8003d24:	e798      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d26:	4894      	ldr	r0, [pc, #592]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003d28:	6882      	ldr	r2, [r0, #8]
 8003d2a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003d2e:	4993      	ldr	r1, [pc, #588]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8003d30:	4019      	ands	r1, r3
 8003d32:	430a      	orrs	r2, r1
 8003d34:	6082      	str	r2, [r0, #8]
 8003d36:	e7dd      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1; 
 8003d38:	2501      	movs	r5, #1
 8003d3a:	e764      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();  
 8003d3c:	4a8e      	ldr	r2, [pc, #568]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003d46:	f7fd fc63 	bl	8001610 <HAL_GetTick>
 8003d4a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d4c:	4b8a      	ldr	r3, [pc, #552]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d54:	d006      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d56:	f7fd fc5b 	bl	8001610 <HAL_GetTick>
 8003d5a:	1b80      	subs	r0, r0, r6
 8003d5c:	2864      	cmp	r0, #100	; 0x64
 8003d5e:	d9f5      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 8003d60:	2003      	movs	r0, #3
 8003d62:	e779      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	f013 0f01 	tst.w	r3, #1
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d6e:	b98b      	cbnz	r3, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d70:	4a81      	ldr	r2, [pc, #516]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003d72:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d76:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d7a:	6860      	ldr	r0, [r4, #4]
 8003d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d84:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	68a1      	ldr	r1, [r4, #8]
 8003d8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003d90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003d9a:	d003      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003d9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d9e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003da2:	d043      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003da4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003da8:	d003      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db0:	d03c      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x40a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003dbc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dc4:	6866      	ldr	r6, [r4, #4]
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003dce:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003dd2:	4303      	orrs	r3, r0
 8003dd4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003de4:	d00d      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003df0:	68e2      	ldr	r2, [r4, #12]
 8003df2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003df6:	68a2      	ldr	r2, [r4, #8]
 8003df8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003dfc:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003dfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003e04:	6813      	ldr	r3, [r2, #0]
 8003e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fc00 	bl	8001610 <HAL_GetTick>
 8003e10:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e12:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e1a:	f47f af19 	bne.w	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e1e:	f7fd fbf7 	bl	8001610 <HAL_GetTick>
 8003e22:	1b80      	subs	r0, r0, r6
 8003e24:	2864      	cmp	r0, #100	; 0x64
 8003e26:	d9f4      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        return HAL_TIMEOUT;
 8003e28:	2003      	movs	r0, #3
 8003e2a:	e715      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003e2e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e32:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e36:	6860      	ldr	r0, [r4, #4]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003e40:	68e0      	ldr	r0, [r4, #12]
 8003e42:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003e46:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8003e50:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003e54:	f023 031f 	bic.w	r3, r3, #31
 8003e58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e5a:	3901      	subs	r1, #1
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e62:	e7a6      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003e64:	4a44      	ldr	r2, [pc, #272]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fbcf 	bl	8001610 <HAL_GetTick>
 8003e72:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e74:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003e7c:	d006      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e7e:	f7fd fbc7 	bl	8001610 <HAL_GetTick>
 8003e82:	1b40      	subs	r0, r0, r5
 8003e84:	2864      	cmp	r0, #100	; 0x64
 8003e86:	d9f5      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        return HAL_TIMEOUT;
 8003e88:	2003      	movs	r0, #3
 8003e8a:	e6e5      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003e92:	d001      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003e94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003e96:	b122      	cbz	r2, 8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e9c:	d01d      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x506>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ea0:	b9db      	cbnz	r3, 8003eda <HAL_RCCEx_PeriphCLKConfig+0x506>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003ea4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ea8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eac:	6960      	ldr	r0, [r4, #20]
 8003eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003eb6:	69a0      	ldr	r0, [r4, #24]
 8003eb8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003ebc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ec6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003eca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ed0:	3901      	subs	r1, #1
 8003ed2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ed6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003ee0:	d003      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003ee2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee8:	d031      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f013 0f08 	tst.w	r3, #8
 8003ef0:	d019      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x552>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003ef4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ef8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003efc:	6960      	ldr	r0, [r4, #20]
 8003efe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003f06:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	69e1      	ldr	r1, [r4, #28]
 8003f0e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003f12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f20:	430b      	orrs	r3, r1
 8003f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f30:	f7fd fb6e 	bl	8001610 <HAL_GetTick>
 8003f34:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f3e:	d119      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f40:	f7fd fb66 	bl	8001610 <HAL_GetTick>
 8003f44:	1b00      	subs	r0, r0, r4
 8003f46:	2864      	cmp	r0, #100	; 0x64
 8003f48:	d9f5      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x562>
        return HAL_TIMEOUT;
 8003f4a:	2003      	movs	r0, #3
 8003f4c:	e684      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8003f50:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f54:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f58:	6965      	ldr	r5, [r4, #20]
 8003f5a:	6a23      	ldr	r3, [r4, #32]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003f62:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8003f66:	4303      	orrs	r3, r0
 8003f68:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003f72:	e7ba      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x516>
  return HAL_OK;
 8003f74:	2000      	movs	r0, #0
 8003f76:	e66f      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	0ffffcff 	.word	0x0ffffcff

08003f80 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003f80:	b1d8      	cbz	r0, 8003fba <HAL_SDRAM_Init+0x3a>
{   
 8003f82:	b538      	push	{r3, r4, r5, lr}
 8003f84:	4604      	mov	r4, r0
 8003f86:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003f88:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003f8c:	b183      	cbz	r3, 8003fb0 <HAL_SDRAM_Init+0x30>
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003f94:	1d21      	adds	r1, r4, #4
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f000 fec4 	bl	8004d24 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003f9c:	6862      	ldr	r2, [r4, #4]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	6820      	ldr	r0, [r4, #0]
 8003fa2:	f000 fef9 	bl	8004d98 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003fac:	2000      	movs	r0, #0
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8003fb0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003fb4:	f006 fe2a 	bl	800ac0c <HAL_SDRAM_MspInit>
 8003fb8:	e7e9      	b.n	8003f8e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8003fba:	2001      	movs	r0, #1
 8003fbc:	4770      	bx	lr

08003fbe <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8003fbe:	b410      	push	{r4}
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8003fc0:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
 8003fc4:	2c01      	cmp	r4, #1
 8003fc6:	d019      	beq.n	8003ffc <HAL_SDRAM_Read_32b+0x3e>
 8003fc8:	2401      	movs	r4, #1
 8003fca:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003fce:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8003fd2:	b2e4      	uxtb	r4, r4
 8003fd4:	2c02      	cmp	r4, #2
 8003fd6:	d015      	beq.n	8004004 <HAL_SDRAM_Read_32b+0x46>
  {
    return HAL_BUSY;
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8003fd8:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8003fdc:	b2e4      	uxtb	r4, r4
 8003fde:	2c05      	cmp	r4, #5
 8003fe0:	d106      	bne.n	8003ff0 <HAL_SDRAM_Read_32b+0x32>
  {
    return  HAL_ERROR; 
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	e00b      	b.n	8003ffe <HAL_SDRAM_Read_32b+0x40>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8003fe6:	f851 4b04 	ldr.w	r4, [r1], #4
 8003fea:	f842 4b04 	str.w	r4, [r2], #4
  for(; BufferSize != 0; BufferSize--)
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f8      	bne.n	8003fe6 <HAL_SDRAM_Read_32b+0x28>
    pDstBuffer++;
    pSdramAddress++;               
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8003ff4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  
  return HAL_OK; 
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	e000      	b.n	8003ffe <HAL_SDRAM_Read_32b+0x40>
  __HAL_LOCK(hsdram);
 8003ffc:	2002      	movs	r0, #2
}
 8003ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004002:	4770      	bx	lr
    return HAL_BUSY;
 8004004:	2002      	movs	r0, #2
 8004006:	e7fa      	b.n	8003ffe <HAL_SDRAM_Read_32b+0x40>

08004008 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8004008:	b410      	push	{r4}
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
  uint32_t tmp = 0;
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800400a:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
 800400e:	2c01      	cmp	r4, #1
 8004010:	d017      	beq.n	8004042 <HAL_SDRAM_Write_32b+0x3a>
 8004012:	2401      	movs	r4, #1
 8004014:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 8004018:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800401c:	b2e4      	uxtb	r4, r4
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 800401e:	2c02      	cmp	r4, #2
 8004020:	d013      	beq.n	800404a <HAL_SDRAM_Write_32b+0x42>
  {
    return HAL_BUSY;
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8004022:	3c04      	subs	r4, #4
 8004024:	2c01      	cmp	r4, #1
 8004026:	d806      	bhi.n	8004036 <HAL_SDRAM_Write_32b+0x2e>
  {
    return  HAL_ERROR; 
 8004028:	2001      	movs	r0, #1
 800402a:	e00b      	b.n	8004044 <HAL_SDRAM_Write_32b+0x3c>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 800402c:	f852 4b04 	ldr.w	r4, [r2], #4
 8004030:	f841 4b04 	str.w	r4, [r1], #4
  for(; BufferSize != 0; BufferSize--)
 8004034:	3b01      	subs	r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f8      	bne.n	800402c <HAL_SDRAM_Write_32b+0x24>
    pSrcBuffer++;
    pSdramAddress++;          
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 800403a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  
  return HAL_OK;  
 800403e:	4618      	mov	r0, r3
 8004040:	e000      	b.n	8004044 <HAL_SDRAM_Write_32b+0x3c>
  __HAL_LOCK(hsdram);
 8004042:	2002      	movs	r0, #2
}
 8004044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004048:	4770      	bx	lr
    return HAL_BUSY;
 800404a:	2002      	movs	r0, #2
 800404c:	e7fa      	b.n	8004044 <HAL_SDRAM_Write_32b+0x3c>

0800404e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800404e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004050:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d101      	bne.n	800405e <HAL_SDRAM_SendCommand+0x10>
  {
    return HAL_BUSY;
 800405a:	2002      	movs	r0, #2
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
}
 800405c:	bd38      	pop	{r3, r4, r5, pc}
 800405e:	460d      	mov	r5, r1
 8004060:	4604      	mov	r4, r0
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004068:	6800      	ldr	r0, [r0, #0]
 800406a:	f000 fee1 	bl	8004e30 <FMC_SDRAM_SendCommand>
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d004      	beq.n	800407e <HAL_SDRAM_SendCommand+0x30>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004074:	2301      	movs	r3, #1
 8004076:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 800407a:	2000      	movs	r0, #0
 800407c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800407e:	2305      	movs	r3, #5
 8004080:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8004084:	2000      	movs	r0, #0
 8004086:	bd38      	pop	{r3, r4, r5, pc}

08004088 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004088:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d101      	bne.n	8004096 <HAL_SDRAM_ProgramRefreshRate+0xe>
  {
    return HAL_BUSY;
 8004092:	2002      	movs	r0, #2
 8004094:	4770      	bx	lr
{
 8004096:	b510      	push	{r4, lr}
 8004098:	4604      	mov	r4, r0
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80040a0:	6800      	ldr	r0, [r0, #0]
 80040a2:	f000 fedb 	bl	8004e5c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80040ac:	2000      	movs	r0, #0
 80040ae:	bd10      	pop	{r4, pc}

080040b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b4:	6a04      	ldr	r4, [r0, #32]
 80040b6:	f024 0401 	bic.w	r4, r4, #1
 80040ba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80040bc:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040be:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80040c2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80040ca:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040cc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80040ce:	6203      	str	r3, [r0, #32]
}
 80040d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d6:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d8:	6a03      	ldr	r3, [r0, #32]
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80040e2:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 80040e8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80040f0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80040f6:	6203      	str	r3, [r0, #32]
}
 80040f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80040fe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004104:	f041 0107 	orr.w	r1, r1, #7
 8004108:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800410a:	6083      	str	r3, [r0, #8]
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 800410e:	2302      	movs	r3, #2
 8004110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8004114:	6802      	ldr	r2, [r0, #0]
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 800411e:	2301      	movs	r3, #1
 8004120:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004124:	2000      	movs	r0, #0
 8004126:	4770      	bx	lr

08004128 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8004128:	2302      	movs	r3, #2
 800412a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800412e:	6803      	ldr	r3, [r0, #0]
 8004130:	6a19      	ldr	r1, [r3, #32]
 8004132:	f241 1211 	movw	r2, #4369	; 0x1111
 8004136:	4211      	tst	r1, r2
 8004138:	d108      	bne.n	800414c <HAL_TIM_Base_Stop+0x24>
 800413a:	6a19      	ldr	r1, [r3, #32]
 800413c:	f240 4244 	movw	r2, #1092	; 0x444
 8004140:	4211      	tst	r1, r2
 8004142:	d103      	bne.n	800414c <HAL_TIM_Base_Stop+0x24>
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 800414c:	2301      	movs	r3, #1
 800414e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004152:	2000      	movs	r0, #0
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004156:	6802      	ldr	r2, [r0, #0]
 8004158:	68d3      	ldr	r3, [r2, #12]
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	2000      	movs	r0, #0
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_OC_DelayElapsedCallback>:
{
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_IC_CaptureCallback>:
{
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_TriggerCallback>:
{
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_IRQHandler>:
{
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800417a:	6803      	ldr	r3, [r0, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	f012 0f02 	tst.w	r2, #2
 8004182:	d011      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	f012 0f02 	tst.w	r2, #2
 800418a:	d00d      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	2301      	movs	r3, #1
 8004194:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004196:	6803      	ldr	r3, [r0, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f013 0f03 	tst.w	r3, #3
 800419e:	d079      	beq.n	8004294 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80041a0:	f7ff ffe6 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a4:	2300      	movs	r3, #0
 80041a6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	f012 0f04 	tst.w	r2, #4
 80041b0:	d012      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	f012 0f04 	tst.w	r2, #4
 80041b8:	d00e      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ba:	f06f 0204 	mvn.w	r2, #4
 80041be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c0:	2302      	movs	r3, #2
 80041c2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80041cc:	d068      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7ff ffce 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d4:	2300      	movs	r3, #0
 80041d6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	f012 0f08 	tst.w	r2, #8
 80041e0:	d012      	beq.n	8004208 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	f012 0f08 	tst.w	r2, #8
 80041e8:	d00e      	beq.n	8004208 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ea:	f06f 0208 	mvn.w	r2, #8
 80041ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f0:	2304      	movs	r3, #4
 80041f2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f013 0f03 	tst.w	r3, #3
 80041fc:	d057      	beq.n	80042ae <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	4620      	mov	r0, r4
 8004200:	f7ff ffb6 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004204:	2300      	movs	r3, #0
 8004206:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	f012 0f10 	tst.w	r2, #16
 8004210:	d012      	beq.n	8004238 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	f012 0f10 	tst.w	r2, #16
 8004218:	d00e      	beq.n	8004238 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421a:	f06f 0210 	mvn.w	r2, #16
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004220:	2308      	movs	r3, #8
 8004222:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f413 7f40 	tst.w	r3, #768	; 0x300
 800422c:	d046      	beq.n	80042bc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff9e 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004234:	2300      	movs	r3, #0
 8004236:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	f012 0f01 	tst.w	r2, #1
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	f012 0f01 	tst.w	r2, #1
 8004248:	d13f      	bne.n	80042ca <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004252:	d003      	beq.n	800425c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	f012 0f80 	tst.w	r2, #128	; 0x80
 800425a:	d13d      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	f012 0f80 	tst.w	r2, #128	; 0x80
 800426c:	d13b      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004276:	d003      	beq.n	8004280 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800427e:	d139      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	f012 0f20 	tst.w	r2, #32
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	f012 0f20 	tst.w	r2, #32
 8004290:	d137      	bne.n	8004302 <HAL_TIM_IRQHandler+0x18c>
 8004292:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004294:	f7ff ff6b 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff ff6a 	bl	8004172 <HAL_TIM_PWM_PulseFinishedCallback>
 800429e:	e781      	b.n	80041a4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff ff64 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff ff63 	bl	8004172 <HAL_TIM_PWM_PulseFinishedCallback>
 80042ac:	e792      	b.n	80041d4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ff5d 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff ff5c 	bl	8004172 <HAL_TIM_PWM_PulseFinishedCallback>
 80042ba:	e7a3      	b.n	8004204 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff ff56 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff ff55 	bl	8004172 <HAL_TIM_PWM_PulseFinishedCallback>
 80042c8:	e7b4      	b.n	8004234 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ca:	f06f 0201 	mvn.w	r2, #1
 80042ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f007 fff9 	bl	800c2c8 <HAL_TIM_PeriodElapsedCallback>
 80042d6:	e7b8      	b.n	800424a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f993 	bl	800460a <HAL_TIMEx_BreakCallback>
 80042e4:	e7ba      	b.n	800425c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 f98c 	bl	800460a <HAL_TIMEx_BreakCallback>
 80042f2:	e7bc      	b.n	800426e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7ff ff3a 	bl	8004174 <HAL_TIM_TriggerCallback>
 8004300:	e7be      	b.n	8004280 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004302:	f06f 0220 	mvn.w	r2, #32
 8004306:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f97d 	bl	8004608 <HAL_TIMEx_CommutationCallback>
}
 800430e:	e7c0      	b.n	8004292 <HAL_TIM_IRQHandler+0x11c>

08004310 <TIM_Base_SetConfig>:
{
 8004310:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8004312:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004314:	4a47      	ldr	r2, [pc, #284]	; (8004434 <TIM_Base_SetConfig+0x124>)
 8004316:	4290      	cmp	r0, r2
 8004318:	bf14      	ite	ne
 800431a:	2200      	movne	r2, #0
 800431c:	2201      	moveq	r2, #1
 800431e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004322:	bf14      	ite	ne
 8004324:	4614      	movne	r4, r2
 8004326:	f042 0401 	orreq.w	r4, r2, #1
 800432a:	b9d4      	cbnz	r4, 8004362 <TIM_Base_SetConfig+0x52>
 800432c:	4d42      	ldr	r5, [pc, #264]	; (8004438 <TIM_Base_SetConfig+0x128>)
 800432e:	42a8      	cmp	r0, r5
 8004330:	bf14      	ite	ne
 8004332:	2500      	movne	r5, #0
 8004334:	2501      	moveq	r5, #1
 8004336:	4e41      	ldr	r6, [pc, #260]	; (800443c <TIM_Base_SetConfig+0x12c>)
 8004338:	42b0      	cmp	r0, r6
 800433a:	d054      	beq.n	80043e6 <TIM_Base_SetConfig+0xd6>
 800433c:	2d00      	cmp	r5, #0
 800433e:	d152      	bne.n	80043e6 <TIM_Base_SetConfig+0xd6>
 8004340:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004344:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8004348:	42a8      	cmp	r0, r5
 800434a:	bf14      	ite	ne
 800434c:	2500      	movne	r5, #0
 800434e:	2501      	moveq	r5, #1
 8004350:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004354:	42b0      	cmp	r0, r6
 8004356:	d002      	beq.n	800435e <TIM_Base_SetConfig+0x4e>
 8004358:	b90d      	cbnz	r5, 800435e <TIM_Base_SetConfig+0x4e>
 800435a:	2500      	movs	r5, #0
 800435c:	e002      	b.n	8004364 <TIM_Base_SetConfig+0x54>
 800435e:	2501      	movs	r5, #1
 8004360:	e000      	b.n	8004364 <TIM_Base_SetConfig+0x54>
 8004362:	2501      	movs	r5, #1
 8004364:	b11d      	cbz	r5, 800436e <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800436a:	684d      	ldr	r5, [r1, #4]
 800436c:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800436e:	2c00      	cmp	r4, #0
 8004370:	d13d      	bne.n	80043ee <TIM_Base_SetConfig+0xde>
 8004372:	4c31      	ldr	r4, [pc, #196]	; (8004438 <TIM_Base_SetConfig+0x128>)
 8004374:	42a0      	cmp	r0, r4
 8004376:	bf14      	ite	ne
 8004378:	2400      	movne	r4, #0
 800437a:	2401      	moveq	r4, #1
 800437c:	4d2f      	ldr	r5, [pc, #188]	; (800443c <TIM_Base_SetConfig+0x12c>)
 800437e:	42a8      	cmp	r0, r5
 8004380:	d050      	beq.n	8004424 <TIM_Base_SetConfig+0x114>
 8004382:	2c00      	cmp	r4, #0
 8004384:	d14e      	bne.n	8004424 <TIM_Base_SetConfig+0x114>
 8004386:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800438a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800438e:	42a0      	cmp	r0, r4
 8004390:	bf14      	ite	ne
 8004392:	2400      	movne	r4, #0
 8004394:	2401      	moveq	r4, #1
 8004396:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800439a:	42a8      	cmp	r0, r5
 800439c:	d044      	beq.n	8004428 <TIM_Base_SetConfig+0x118>
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d142      	bne.n	8004428 <TIM_Base_SetConfig+0x118>
 80043a2:	4c27      	ldr	r4, [pc, #156]	; (8004440 <TIM_Base_SetConfig+0x130>)
 80043a4:	42a0      	cmp	r0, r4
 80043a6:	bf14      	ite	ne
 80043a8:	2400      	movne	r4, #0
 80043aa:	2401      	moveq	r4, #1
 80043ac:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80043b0:	42a8      	cmp	r0, r5
 80043b2:	d03b      	beq.n	800442c <TIM_Base_SetConfig+0x11c>
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	d139      	bne.n	800442c <TIM_Base_SetConfig+0x11c>
 80043b8:	4c22      	ldr	r4, [pc, #136]	; (8004444 <TIM_Base_SetConfig+0x134>)
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	bf14      	ite	ne
 80043be:	2400      	movne	r4, #0
 80043c0:	2401      	moveq	r4, #1
 80043c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043c6:	42a8      	cmp	r0, r5
 80043c8:	d032      	beq.n	8004430 <TIM_Base_SetConfig+0x120>
 80043ca:	2c00      	cmp	r4, #0
 80043cc:	d130      	bne.n	8004430 <TIM_Base_SetConfig+0x120>
 80043ce:	4c1e      	ldr	r4, [pc, #120]	; (8004448 <TIM_Base_SetConfig+0x138>)
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	bf14      	ite	ne
 80043d4:	2400      	movne	r4, #0
 80043d6:	2401      	moveq	r4, #1
 80043d8:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80043dc:	42a8      	cmp	r0, r5
 80043de:	d004      	beq.n	80043ea <TIM_Base_SetConfig+0xda>
 80043e0:	b91c      	cbnz	r4, 80043ea <TIM_Base_SetConfig+0xda>
 80043e2:	2400      	movs	r4, #0
 80043e4:	e004      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80043e6:	2501      	movs	r5, #1
 80043e8:	e7bc      	b.n	8004364 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80043ea:	2401      	movs	r4, #1
 80043ec:	e000      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
 80043ee:	2401      	movs	r4, #1
 80043f0:	b11c      	cbz	r4, 80043fa <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	68cc      	ldr	r4, [r1, #12]
 80043f8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fe:	694c      	ldr	r4, [r1, #20]
 8004400:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8004402:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	688b      	ldr	r3, [r1, #8]
 8004406:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004408:	680b      	ldr	r3, [r1, #0]
 800440a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <TIM_Base_SetConfig+0x13c>)
 800440e:	4298      	cmp	r0, r3
 8004410:	bf08      	it	eq
 8004412:	f042 0201 	orreq.w	r2, r2, #1
 8004416:	b10a      	cbz	r2, 800441c <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	690b      	ldr	r3, [r1, #16]
 800441a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800441c:	2301      	movs	r3, #1
 800441e:	6143      	str	r3, [r0, #20]
}
 8004420:	bc70      	pop	{r4, r5, r6}
 8004422:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004424:	2401      	movs	r4, #1
 8004426:	e7e3      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
 8004428:	2401      	movs	r4, #1
 800442a:	e7e1      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
 800442c:	2401      	movs	r4, #1
 800442e:	e7df      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
 8004430:	2401      	movs	r4, #1
 8004432:	e7dd      	b.n	80043f0 <TIM_Base_SetConfig+0xe0>
 8004434:	40010000 	.word	0x40010000
 8004438:	40000800 	.word	0x40000800
 800443c:	40000400 	.word	0x40000400
 8004440:	40014400 	.word	0x40014400
 8004444:	40001800 	.word	0x40001800
 8004448:	40002000 	.word	0x40002000
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004450:	b1a8      	cbz	r0, 800447e <HAL_TIM_Base_Init+0x2e>
{ 
 8004452:	b510      	push	{r4, lr}
 8004454:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8004456:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800445a:	b15b      	cbz	r3, 8004474 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004462:	1d21      	adds	r1, r4, #4
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	f7ff ff53 	bl	8004310 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800446a:	2301      	movs	r3, #1
 800446c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004470:	2000      	movs	r0, #0
 8004472:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004474:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004478:	f008 ff3c 	bl	800d2f4 <HAL_TIM_Base_MspInit>
 800447c:	e7ee      	b.n	800445c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800447e:	2001      	movs	r0, #1
 8004480:	4770      	bx	lr

08004482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004482:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8004484:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004486:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800448a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800448e:	4319      	orrs	r1, r3
 8004490:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004492:	6084      	str	r4, [r0, #8]
} 
 8004494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800449c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d07d      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x104>
{
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80044a8:	2301      	movs	r3, #1
 80044aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	6802      	ldr	r2, [r0, #0]
 80044b6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_TIM_ConfigClockSource+0x108>)
 80044ba:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80044bc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80044be:	680b      	ldr	r3, [r1, #0]
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d059      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0xdc>
 80044c4:	d910      	bls.n	80044e8 <HAL_TIM_ConfigClockSource+0x4c>
 80044c6:	2b70      	cmp	r3, #112	; 0x70
 80044c8:	d03e      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0xac>
 80044ca:	d81f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x70>
 80044cc:	2b50      	cmp	r3, #80	; 0x50
 80044ce:	d049      	beq.n	8004564 <HAL_TIM_ConfigClockSource+0xc8>
 80044d0:	2b60      	cmp	r3, #96	; 0x60
 80044d2:	d132      	bne.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80044d4:	68ca      	ldr	r2, [r1, #12]
 80044d6:	6849      	ldr	r1, [r1, #4]
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	f7ff fdfc 	bl	80040d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044de:	2160      	movs	r1, #96	; 0x60
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	f7ff fe0c 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 80044e6:	e028      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d04f      	beq.n	800458c <HAL_TIM_ConfigClockSource+0xf0>
 80044ec:	d908      	bls.n	8004500 <HAL_TIM_ConfigClockSource+0x64>
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d051      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xfa>
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d121      	bne.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80044f6:	2130      	movs	r1, #48	; 0x30
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	f7ff fe00 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 80044fe:	e01c      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004500:	b9db      	cbnz	r3, 800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004502:	2100      	movs	r1, #0
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	f7ff fdfa 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 800450a:	e016      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d00e      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x94>
 8004512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004516:	d110      	bne.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 8004518:	68cb      	ldr	r3, [r1, #12]
 800451a:	684a      	ldr	r2, [r1, #4]
 800451c:	6889      	ldr	r1, [r1, #8]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	f7ff ffaf 	bl	8004482 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	6893      	ldr	r3, [r2, #8]
 8004528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800452c:	6093      	str	r3, [r2, #8]
    break;
 800452e:	e004      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	6891      	ldr	r1, [r2, #8]
 8004534:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_TIM_ConfigClockSource+0x10c>)
 8004536:	400b      	ands	r3, r1
 8004538:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800453a:	2301      	movs	r3, #1
 800453c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004540:	2000      	movs	r0, #0
 8004542:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004546:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8004548:	68cb      	ldr	r3, [r1, #12]
 800454a:	684a      	ldr	r2, [r1, #4]
 800454c:	6889      	ldr	r1, [r1, #8]
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	f7ff ff97 	bl	8004482 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_TIM_ConfigClockSource+0x110>)
 800455a:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004560:	6093      	str	r3, [r2, #8]
    break;
 8004562:	e7ea      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004564:	68ca      	ldr	r2, [r1, #12]
 8004566:	6849      	ldr	r1, [r1, #4]
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	f7ff fda1 	bl	80040b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800456e:	2150      	movs	r1, #80	; 0x50
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	f7ff fdc4 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 8004576:	e7e0      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004578:	68ca      	ldr	r2, [r1, #12]
 800457a:	6849      	ldr	r1, [r1, #4]
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	f7ff fd97 	bl	80040b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004582:	2140      	movs	r1, #64	; 0x40
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	f7ff fdba 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 800458a:	e7d6      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800458c:	2110      	movs	r1, #16
 800458e:	6820      	ldr	r0, [r4, #0]
 8004590:	f7ff fdb5 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 8004594:	e7d1      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004596:	2120      	movs	r1, #32
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	f7ff fdb0 	bl	80040fe <TIM_ITRx_SetConfig>
    break;
 800459e:	e7cc      	b.n	800453a <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80045a0:	2002      	movs	r0, #2
 80045a2:	4770      	bx	lr
 80045a4:	fffe0088 	.word	0xfffe0088
 80045a8:	fffefff8 	.word	0xfffefff8
 80045ac:	fffeff88 	.word	0xfffeff88

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80045b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d021      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 80045b8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80045ba:	2301      	movs	r3, #1
 80045bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c0:	6804      	ldr	r4, [r0, #0]
 80045c2:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c6:	4d0e      	ldr	r5, [pc, #56]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80045c8:	4e0e      	ldr	r6, [pc, #56]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80045ca:	42ac      	cmp	r4, r5
 80045cc:	bf18      	it	ne
 80045ce:	42b4      	cmpne	r4, r6
 80045d0:	d103      	bne.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d6:	684d      	ldr	r5, [r1, #4]
 80045d8:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045de:	680d      	ldr	r5, [r1, #0]
 80045e0:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80045e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e6:	6889      	ldr	r1, [r1, #8]
 80045e8:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80045f0:	2300      	movs	r3, #0
 80045f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80045f6:	4618      	mov	r0, r3
} 
 80045f8:	bc70      	pop	{r4, r5, r6}
 80045fa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045fc:	2002      	movs	r0, #2
 80045fe:	4770      	bx	lr
 8004600:	40010400 	.word	0x40010400
 8004604:	40010000 	.word	0x40010000

08004608 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004608:	4770      	bx	lr

0800460a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800460a:	4770      	bx	lr

0800460c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004610:	4605      	mov	r5, r0
 8004612:	460f      	mov	r7, r1
 8004614:	4616      	mov	r6, r2
 8004616:	4698      	mov	r8, r3
 8004618:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	682b      	ldr	r3, [r5, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	ea37 0303 	bics.w	r3, r7, r3
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	42b3      	cmp	r3, r6
 800462a:	d11e      	bne.n	800466a <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800462c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004630:	d0f3      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004632:	b12c      	cbz	r4, 8004640 <UART_WaitOnFlagUntilTimeout+0x34>
 8004634:	f7fc ffec 	bl	8001610 <HAL_GetTick>
 8004638:	eba0 0008 	sub.w	r0, r0, r8
 800463c:	4284      	cmp	r4, r0
 800463e:	d8ec      	bhi.n	800461a <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004640:	682a      	ldr	r2, [r5, #0]
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004648:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	682a      	ldr	r2, [r5, #0]
 800464c:	6893      	ldr	r3, [r2, #8]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004654:	2320      	movs	r3, #32
 8004656:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800465a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800465e:	2300      	movs	r3, #0
 8004660:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8004664:	2003      	movs	r0, #3
 8004666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 800466a:	2000      	movs	r0, #0
}
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004670 <HAL_UART_Transmit>:
{
 8004670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8004678:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	d004      	beq.n	800468c <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
}
 8004684:	4618      	mov	r0, r3
 8004686:	b002      	add	sp, #8
 8004688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800468c:	4604      	mov	r4, r0
 800468e:	460d      	mov	r5, r1
 8004690:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8004692:	2a00      	cmp	r2, #0
 8004694:	bf18      	it	ne
 8004696:	2900      	cmpne	r1, #0
 8004698:	d04c      	beq.n	8004734 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800469a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Transmit+0x36>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e7ee      	b.n	8004684 <HAL_UART_Transmit+0x14>
 80046a6:	2301      	movs	r3, #1
 80046a8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b0:	2321      	movs	r3, #33	; 0x21
 80046b2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80046b6:	f7fc ffab 	bl	8001610 <HAL_GetTick>
 80046ba:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80046bc:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80046c0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80046c4:	e003      	b.n	80046ce <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	782a      	ldrb	r2, [r5, #0]
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28
 80046cc:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 80046ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	b1e3      	cbz	r3, 8004710 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80046d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	9600      	str	r6, [sp, #0]
 80046e6:	463b      	mov	r3, r7
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff ff8d 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80046f2:	bb08      	cbnz	r0, 8004738 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d1e4      	bne.n	80046c6 <HAL_UART_Transmit+0x56>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e1      	bne.n	80046c6 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800470e:	e7de      	b.n	80046ce <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004710:	9600      	str	r6, [sp, #0]
 8004712:	463b      	mov	r3, r7
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff77 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	b108      	cbz	r0, 8004726 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e7ae      	b.n	8004684 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8004726:	2220      	movs	r2, #32
 8004728:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800472c:	2200      	movs	r2, #0
 800472e:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8004732:	e7a7      	b.n	8004684 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e7a5      	b.n	8004684 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e7a3      	b.n	8004684 <HAL_UART_Transmit+0x14>

0800473c <HAL_UART_Receive>:
{
 800473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8004744:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d003      	beq.n	8004756 <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 800474e:	2002      	movs	r0, #2
}
 8004750:	b002      	add	sp, #8
 8004752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004756:	4604      	mov	r4, r0
 8004758:	460d      	mov	r5, r1
 800475a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 800475c:	2a00      	cmp	r2, #0
 800475e:	bf18      	it	ne
 8004760:	2900      	cmpne	r1, #0
 8004762:	d06d      	beq.n	8004840 <HAL_UART_Receive+0x104>
    __HAL_LOCK(huart);
 8004764:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_UART_Receive+0x34>
 800476c:	2002      	movs	r0, #2
 800476e:	e7ef      	b.n	8004750 <HAL_UART_Receive+0x14>
 8004770:	2301      	movs	r3, #1
 8004772:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800477a:	2322      	movs	r3, #34	; 0x22
 800477c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8004780:	f7fc ff46 	bl	8001610 <HAL_GetTick>
 8004784:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004786:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 800478a:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800478e:	68a3      	ldr	r3, [r4, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d006      	beq.n	80047a4 <HAL_UART_Receive+0x68>
 8004796:	b9a3      	cbnz	r3, 80047c2 <HAL_UART_Receive+0x86>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b973      	cbnz	r3, 80047ba <HAL_UART_Receive+0x7e>
 800479c:	23ff      	movs	r3, #255	; 0xff
 800479e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047a2:	e011      	b.n	80047c8 <HAL_UART_Receive+0x8c>
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	b923      	cbnz	r3, 80047b2 <HAL_UART_Receive+0x76>
 80047a8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80047ac:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047b0:	e00a      	b.n	80047c8 <HAL_UART_Receive+0x8c>
 80047b2:	23ff      	movs	r3, #255	; 0xff
 80047b4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047b8:	e006      	b.n	80047c8 <HAL_UART_Receive+0x8c>
 80047ba:	237f      	movs	r3, #127	; 0x7f
 80047bc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047c0:	e002      	b.n	80047c8 <HAL_UART_Receive+0x8c>
 80047c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c6:	d002      	beq.n	80047ce <HAL_UART_Receive+0x92>
    uhMask = huart->Mask;
 80047c8:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80047cc:	e010      	b.n	80047f0 <HAL_UART_Receive+0xb4>
    UART_MASK_COMPUTATION(huart);
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	b91b      	cbnz	r3, 80047da <HAL_UART_Receive+0x9e>
 80047d2:	237f      	movs	r3, #127	; 0x7f
 80047d4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047d8:	e7f6      	b.n	80047c8 <HAL_UART_Receive+0x8c>
 80047da:	233f      	movs	r3, #63	; 0x3f
 80047dc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80047e0:	e7f2      	b.n	80047c8 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e6:	fa5f f388 	uxtb.w	r3, r8
 80047ea:	4013      	ands	r3, r2
 80047ec:	702b      	strb	r3, [r5, #0]
 80047ee:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 80047f0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b1e3      	cbz	r3, 8004832 <HAL_UART_Receive+0xf6>
      huart->RxXferCount--;
 80047f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	9600      	str	r6, [sp, #0]
 8004808:	463b      	mov	r3, r7
 800480a:	2200      	movs	r2, #0
 800480c:	2120      	movs	r1, #32
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fefc 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8004814:	b9b0      	cbnz	r0, 8004844 <HAL_UART_Receive+0x108>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	68a3      	ldr	r3, [r4, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d1e1      	bne.n	80047e2 <HAL_UART_Receive+0xa6>
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1de      	bne.n	80047e2 <HAL_UART_Receive+0xa6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	ea08 0303 	and.w	r3, r8, r3
 800482c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8004830:	e7de      	b.n	80047f0 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 8004832:	2320      	movs	r3, #32
 8004834:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8004838:	2000      	movs	r0, #0
 800483a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800483e:	e787      	b.n	8004750 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e785      	b.n	8004750 <HAL_UART_Receive+0x14>
        return HAL_TIMEOUT;
 8004844:	2003      	movs	r0, #3
 8004846:	e783      	b.n	8004750 <HAL_UART_Receive+0x14>

08004848 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800484c:	6883      	ldr	r3, [r0, #8]
 800484e:	6902      	ldr	r2, [r0, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	6942      	ldr	r2, [r0, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	69c2      	ldr	r2, [r0, #28]
 8004858:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800485a:	6801      	ldr	r1, [r0, #0]
 800485c:	6808      	ldr	r0, [r1, #0]
 800485e:	4aa0      	ldr	r2, [pc, #640]	; (8004ae0 <UART_SetConfig+0x298>)
 8004860:	4002      	ands	r2, r0
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	6853      	ldr	r3, [r2, #4]
 800486a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800486e:	68e1      	ldr	r1, [r4, #12]
 8004870:	430b      	orrs	r3, r1
 8004872:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004874:	69a3      	ldr	r3, [r4, #24]
 8004876:	6a22      	ldr	r2, [r4, #32]
 8004878:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800487a:	6821      	ldr	r1, [r4, #0]
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004886:	6825      	ldr	r5, [r4, #0]
 8004888:	4b96      	ldr	r3, [pc, #600]	; (8004ae4 <UART_SetConfig+0x29c>)
 800488a:	429d      	cmp	r5, r3
 800488c:	d02b      	beq.n	80048e6 <UART_SetConfig+0x9e>
 800488e:	4b96      	ldr	r3, [pc, #600]	; (8004ae8 <UART_SetConfig+0x2a0>)
 8004890:	429d      	cmp	r5, r3
 8004892:	d03c      	beq.n	800490e <UART_SetConfig+0xc6>
 8004894:	4b95      	ldr	r3, [pc, #596]	; (8004aec <UART_SetConfig+0x2a4>)
 8004896:	429d      	cmp	r5, r3
 8004898:	d052      	beq.n	8004940 <UART_SetConfig+0xf8>
 800489a:	4b95      	ldr	r3, [pc, #596]	; (8004af0 <UART_SetConfig+0x2a8>)
 800489c:	429d      	cmp	r5, r3
 800489e:	d067      	beq.n	8004970 <UART_SetConfig+0x128>
 80048a0:	4b94      	ldr	r3, [pc, #592]	; (8004af4 <UART_SetConfig+0x2ac>)
 80048a2:	429d      	cmp	r5, r3
 80048a4:	d07c      	beq.n	80049a0 <UART_SetConfig+0x158>
 80048a6:	4b94      	ldr	r3, [pc, #592]	; (8004af8 <UART_SetConfig+0x2b0>)
 80048a8:	429d      	cmp	r5, r3
 80048aa:	f000 8094 	beq.w	80049d6 <UART_SetConfig+0x18e>
 80048ae:	4b93      	ldr	r3, [pc, #588]	; (8004afc <UART_SetConfig+0x2b4>)
 80048b0:	429d      	cmp	r5, r3
 80048b2:	f000 80ab 	beq.w	8004a0c <UART_SetConfig+0x1c4>
 80048b6:	4b92      	ldr	r3, [pc, #584]	; (8004b00 <UART_SetConfig+0x2b8>)
 80048b8:	429d      	cmp	r5, r3
 80048ba:	f000 80c2 	beq.w	8004a42 <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80048be:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c0:	69e2      	ldr	r2, [r4, #28]
 80048c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80048c6:	f000 80db 	beq.w	8004a80 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	f200 8168 	bhi.w	8004ba0 <UART_SetConfig+0x358>
 80048d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048d4:	013c0131 	.word	0x013c0131
 80048d8:	01660147 	.word	0x01660147
 80048dc:	01660151 	.word	0x01660151
 80048e0:	01660166 	.word	0x01660166
 80048e4:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e6:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d803      	bhi.n	80048fe <UART_SetConfig+0xb6>
 80048f6:	e8df f003 	tbb	[pc, r3]
 80048fa:	06bf      	.short	0x06bf
 80048fc:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80048fe:	2310      	movs	r3, #16
 8004900:	e7de      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004902:	2302      	movs	r3, #2
 8004904:	e7dc      	b.n	80048c0 <UART_SetConfig+0x78>
 8004906:	2304      	movs	r3, #4
 8004908:	e7da      	b.n	80048c0 <UART_SetConfig+0x78>
 800490a:	2308      	movs	r3, #8
 800490c:	e7d8      	b.n	80048c0 <UART_SetConfig+0x78>
 800490e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d808      	bhi.n	8004930 <UART_SetConfig+0xe8>
 800491e:	e8df f003 	tbb	[pc, r3]
 8004922:	07ad      	.short	0x07ad
 8004924:	070b0707 	.word	0x070b0707
 8004928:	07090707 	.word	0x07090707
 800492c:	0707      	.short	0x0707
 800492e:	0d          	.byte	0x0d
 800492f:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004930:	2310      	movs	r3, #16
 8004932:	e7c5      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004934:	2302      	movs	r3, #2
 8004936:	e7c3      	b.n	80048c0 <UART_SetConfig+0x78>
 8004938:	2304      	movs	r3, #4
 800493a:	e7c1      	b.n	80048c0 <UART_SetConfig+0x78>
 800493c:	2308      	movs	r3, #8
 800493e:	e7bf      	b.n	80048c0 <UART_SetConfig+0x78>
 8004940:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800494c:	2b10      	cmp	r3, #16
 800494e:	d00d      	beq.n	800496c <UART_SetConfig+0x124>
 8004950:	d905      	bls.n	800495e <UART_SetConfig+0x116>
 8004952:	2b20      	cmp	r3, #32
 8004954:	d008      	beq.n	8004968 <UART_SetConfig+0x120>
 8004956:	2b30      	cmp	r3, #48	; 0x30
 8004958:	d104      	bne.n	8004964 <UART_SetConfig+0x11c>
 800495a:	2308      	movs	r3, #8
 800495c:	e7b0      	b.n	80048c0 <UART_SetConfig+0x78>
 800495e:	b90b      	cbnz	r3, 8004964 <UART_SetConfig+0x11c>
 8004960:	2300      	movs	r3, #0
 8004962:	e7ad      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004964:	2310      	movs	r3, #16
 8004966:	e7ab      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004968:	2302      	movs	r3, #2
 800496a:	e7a9      	b.n	80048c0 <UART_SetConfig+0x78>
 800496c:	2304      	movs	r3, #4
 800496e:	e7a7      	b.n	80048c0 <UART_SetConfig+0x78>
 8004970:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d00d      	beq.n	800499c <UART_SetConfig+0x154>
 8004980:	d905      	bls.n	800498e <UART_SetConfig+0x146>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d008      	beq.n	8004998 <UART_SetConfig+0x150>
 8004986:	2bc0      	cmp	r3, #192	; 0xc0
 8004988:	d104      	bne.n	8004994 <UART_SetConfig+0x14c>
 800498a:	2308      	movs	r3, #8
 800498c:	e798      	b.n	80048c0 <UART_SetConfig+0x78>
 800498e:	b90b      	cbnz	r3, 8004994 <UART_SetConfig+0x14c>
 8004990:	2300      	movs	r3, #0
 8004992:	e795      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004994:	2310      	movs	r3, #16
 8004996:	e793      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004998:	2302      	movs	r3, #2
 800499a:	e791      	b.n	80048c0 <UART_SetConfig+0x78>
 800499c:	2304      	movs	r3, #4
 800499e:	e78f      	b.n	80048c0 <UART_SetConfig+0x78>
 80049a0:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b0:	d00f      	beq.n	80049d2 <UART_SetConfig+0x18a>
 80049b2:	d907      	bls.n	80049c4 <UART_SetConfig+0x17c>
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b8:	d009      	beq.n	80049ce <UART_SetConfig+0x186>
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049be:	d104      	bne.n	80049ca <UART_SetConfig+0x182>
 80049c0:	2308      	movs	r3, #8
 80049c2:	e77d      	b.n	80048c0 <UART_SetConfig+0x78>
 80049c4:	b90b      	cbnz	r3, 80049ca <UART_SetConfig+0x182>
 80049c6:	2300      	movs	r3, #0
 80049c8:	e77a      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80049ca:	2310      	movs	r3, #16
 80049cc:	e778      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ce:	2302      	movs	r3, #2
 80049d0:	e776      	b.n	80048c0 <UART_SetConfig+0x78>
 80049d2:	2304      	movs	r3, #4
 80049d4:	e774      	b.n	80048c0 <UART_SetConfig+0x78>
 80049d6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e6:	d00f      	beq.n	8004a08 <UART_SetConfig+0x1c0>
 80049e8:	d907      	bls.n	80049fa <UART_SetConfig+0x1b2>
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	d009      	beq.n	8004a04 <UART_SetConfig+0x1bc>
 80049f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f4:	d104      	bne.n	8004a00 <UART_SetConfig+0x1b8>
 80049f6:	2308      	movs	r3, #8
 80049f8:	e762      	b.n	80048c0 <UART_SetConfig+0x78>
 80049fa:	b90b      	cbnz	r3, 8004a00 <UART_SetConfig+0x1b8>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e75f      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004a00:	2310      	movs	r3, #16
 8004a02:	e75d      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a04:	2302      	movs	r3, #2
 8004a06:	e75b      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e759      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a0c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1c:	d00f      	beq.n	8004a3e <UART_SetConfig+0x1f6>
 8004a1e:	d907      	bls.n	8004a30 <UART_SetConfig+0x1e8>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d009      	beq.n	8004a3a <UART_SetConfig+0x1f2>
 8004a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a2a:	d104      	bne.n	8004a36 <UART_SetConfig+0x1ee>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	e747      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a30:	b90b      	cbnz	r3, 8004a36 <UART_SetConfig+0x1ee>
 8004a32:	2300      	movs	r3, #0
 8004a34:	e744      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004a36:	2310      	movs	r3, #16
 8004a38:	e742      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e740      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	e73e      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a42:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a52:	d00f      	beq.n	8004a74 <UART_SetConfig+0x22c>
 8004a54:	d907      	bls.n	8004a66 <UART_SetConfig+0x21e>
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5a:	d009      	beq.n	8004a70 <UART_SetConfig+0x228>
 8004a5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a60:	d104      	bne.n	8004a6c <UART_SetConfig+0x224>
 8004a62:	2308      	movs	r3, #8
 8004a64:	e72c      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a66:	b90b      	cbnz	r3, 8004a6c <UART_SetConfig+0x224>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e729      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	e727      	b.n	80048c0 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a70:	2302      	movs	r3, #2
 8004a72:	e725      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a74:	2304      	movs	r3, #4
 8004a76:	e723      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e721      	b.n	80048c0 <UART_SetConfig+0x78>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e71f      	b.n	80048c0 <UART_SetConfig+0x78>
    switch (clocksource)
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d855      	bhi.n	8004b30 <UART_SetConfig+0x2e8>
 8004a84:	e8df f003 	tbb	[pc, r3]
 8004a88:	54221705 	.word	0x54221705
 8004a8c:	54545440 	.word	0x54545440
 8004a90:	4b          	.byte	0x4b
 8004a91:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a92:	f7fe ff61 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	0853      	lsrs	r3, r2, #1
 8004a9a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8004aa6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aaa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004aae:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ab6:	f7fe ff5f 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 8004aba:	6862      	ldr	r2, [r4, #4]
 8004abc:	0853      	lsrs	r3, r2, #1
 8004abe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac8:	2000      	movs	r0, #0
      break;
 8004aca:	e7ec      	b.n	8004aa6 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004acc:	6862      	ldr	r2, [r4, #4]
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <UART_SetConfig+0x2bc>)
 8004ad0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ada:	2000      	movs	r0, #0
      break;
 8004adc:	e7e3      	b.n	8004aa6 <UART_SetConfig+0x25e>
 8004ade:	bf00      	nop
 8004ae0:	efff69f3 	.word	0xefff69f3
 8004ae4:	40011000 	.word	0x40011000
 8004ae8:	40004400 	.word	0x40004400
 8004aec:	40004800 	.word	0x40004800
 8004af0:	40004c00 	.word	0x40004c00
 8004af4:	40005000 	.word	0x40005000
 8004af8:	40011400 	.word	0x40011400
 8004afc:	40007800 	.word	0x40007800
 8004b00:	40007c00 	.word	0x40007c00
 8004b04:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b08:	f7fe fe1c 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	0853      	lsrs	r3, r2, #1
 8004b10:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b18:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1a:	2000      	movs	r0, #0
      break;
 8004b1c:	e7c3      	b.n	8004aa6 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b1e:	6862      	ldr	r2, [r4, #4]
 8004b20:	0853      	lsrs	r3, r2, #1
 8004b22:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b2a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b2c:	2000      	movs	r0, #0
      break;
 8004b2e:	e7ba      	b.n	8004aa6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8004b30:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e7b7      	b.n	8004aa6 <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b36:	f7fe ff0f 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004b40:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b44:	b280      	uxth	r0, r0
 8004b46:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b48:	2000      	movs	r0, #0
      break;
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b4c:	f7fe ff14 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004b56:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b5a:	b280      	uxth	r0, r0
 8004b5c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b5e:	2000      	movs	r0, #0
      break;
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b62:	6862      	ldr	r2, [r4, #4]
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <UART_SetConfig+0x35c>)
 8004b66:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b72:	2000      	movs	r0, #0
      break;
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b76:	f7fe fde5 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004b80:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b84:	b280      	uxth	r0, r0
 8004b86:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b88:	2000      	movs	r0, #0
      break;
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b8c:	6862      	ldr	r2, [r4, #4]
 8004b8e:	0853      	lsrs	r3, r2, #1
 8004b90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b9c:	2000      	movs	r0, #0
      break;
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	00f42400 	.word	0x00f42400

08004ba8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004baa:	f013 0f01 	tst.w	r3, #1
 8004bae:	d006      	beq.n	8004bbe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb0:	6802      	ldr	r2, [r0, #0]
 8004bb2:	6853      	ldr	r3, [r2, #4]
 8004bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bb8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bc0:	f013 0f02 	tst.w	r3, #2
 8004bc4:	d006      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc6:	6802      	ldr	r2, [r0, #0]
 8004bc8:	6853      	ldr	r3, [r2, #4]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bd6:	f013 0f04 	tst.w	r3, #4
 8004bda:	d006      	beq.n	8004bea <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bdc:	6802      	ldr	r2, [r0, #0]
 8004bde:	6853      	ldr	r3, [r2, #4]
 8004be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bec:	f013 0f08 	tst.w	r3, #8
 8004bf0:	d006      	beq.n	8004c00 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf2:	6802      	ldr	r2, [r0, #0]
 8004bf4:	6853      	ldr	r3, [r2, #4]
 8004bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bfa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c02:	f013 0f10 	tst.w	r3, #16
 8004c06:	d006      	beq.n	8004c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c08:	6802      	ldr	r2, [r0, #0]
 8004c0a:	6893      	ldr	r3, [r2, #8]
 8004c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c10:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c18:	f013 0f20 	tst.w	r3, #32
 8004c1c:	d006      	beq.n	8004c2c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1e:	6802      	ldr	r2, [r0, #0]
 8004c20:	6893      	ldr	r3, [r2, #8]
 8004c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c26:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c34:	6802      	ldr	r2, [r0, #0]
 8004c36:	6853      	ldr	r3, [r2, #4]
 8004c38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c48:	d00b      	beq.n	8004c62 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c50:	d006      	beq.n	8004c60 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c52:	6802      	ldr	r2, [r0, #0]
 8004c54:	6853      	ldr	r3, [r2, #4]
 8004c56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c5a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6053      	str	r3, [r2, #4]
 8004c60:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c62:	6802      	ldr	r2, [r0, #0]
 8004c64:	6853      	ldr	r3, [r2, #4]
 8004c66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6053      	str	r3, [r2, #4]
 8004c70:	e7eb      	b.n	8004c4a <UART_AdvFeatureConfig+0xa2>

08004c72 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c72:	b510      	push	{r4, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c7c:	f7fc fcc8 	bl	8001610 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	f012 0f08 	tst.w	r2, #8
 8004c88:	d109      	bne.n	8004c9e <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8004c90:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff fcad 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0e9      	beq.n	8004c8a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004cb6:	2003      	movs	r0, #3
 8004cb8:	e7ef      	b.n	8004c9a <UART_CheckIdleState+0x28>

08004cba <HAL_UART_Init>:
  if(huart == NULL)
 8004cba:	b378      	cbz	r0, 8004d1c <HAL_UART_Init+0x62>
{
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8004cc0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004cc4:	b30b      	cbz	r3, 8004d0a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004cc6:	2324      	movs	r3, #36	; 0x24
 8004cc8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7ff fdb6 	bl	8004848 <UART_SetConfig>
 8004cdc:	2801      	cmp	r0, #1
 8004cde:	d01f      	beq.n	8004d20 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce2:	b9bb      	cbnz	r3, 8004d14 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	6853      	ldr	r3, [r2, #4]
 8004ce8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004cec:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	6893      	ldr	r3, [r2, #8]
 8004cf2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004cf6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004d02:	4620      	mov	r0, r4
 8004d04:	f7ff ffb5 	bl	8004c72 <UART_CheckIdleState>
 8004d08:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d0a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004d0e:	f008 fb19 	bl	800d344 <HAL_UART_MspInit>
 8004d12:	e7d8      	b.n	8004cc6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff ff47 	bl	8004ba8 <UART_AdvFeatureConfig>
 8004d1a:	e7e3      	b.n	8004ce4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	4770      	bx	lr
}
 8004d20:	bd10      	pop	{r4, pc}
	...

08004d24 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004d24:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004d26:	680b      	ldr	r3, [r1, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d018      	beq.n	8004d5e <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004d2c:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <FMC_SDRAM_Init+0x70>)
 8004d30:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d32:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 8004d34:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d36:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8004d38:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8004d3a:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8004d3c:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8004d3e:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8004d40:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 8004d42:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 8004d44:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 8004d46:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8004d48:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8004d4a:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8004d4c:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8004d4e:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8004d50:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8004d52:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d54:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004d56:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004d58:	2000      	movs	r0, #0
 8004d5a:	bc30      	pop	{r4, r5}
 8004d5c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004d5e:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004d60:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004d64:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8004d66:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004d68:	4313      	orrs	r3, r2
                        Init->ReadPipeDelay);
 8004d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8004d6c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004d6e:	431c      	orrs	r4, r3
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004d70:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <FMC_SDRAM_Init+0x70>)
 8004d74:	401a      	ands	r2, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d76:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 8004d78:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d7a:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8004d7c:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8004d7e:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8004d80:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8004d82:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8004d84:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 8004d86:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8004d88:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 8004d8a:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d8c:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004d8e:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004d90:	6043      	str	r3, [r0, #4]
 8004d92:	e7e1      	b.n	8004d58 <FMC_SDRAM_Init+0x34>
 8004d94:	ffff8000 	.word	0xffff8000

08004d98 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d98:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004d9a:	2a01      	cmp	r2, #1
 8004d9c:	d021      	beq.n	8004de2 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004d9e:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004da0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004da8:	684c      	ldr	r4, [r1, #4]
 8004daa:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004dac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004db0:	688c      	ldr	r4, [r1, #8]
 8004db2:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004db4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004db8:	68cc      	ldr	r4, [r1, #12]
 8004dba:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004dbc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004dc0:	690c      	ldr	r4, [r1, #16]
 8004dc2:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004dc4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8004dc8:	694c      	ldr	r4, [r1, #20]
 8004dca:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004dcc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8004dd0:	6989      	ldr	r1, [r1, #24]
 8004dd2:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004dd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004dd8:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004dda:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004ddc:	2000      	movs	r0, #0
 8004dde:	bc30      	pop	{r4, r5}
 8004de0:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004de2:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004de4:	4c11      	ldr	r4, [pc, #68]	; (8004e2c <FMC_SDRAM_Timing_Init+0x94>)
 8004de6:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004de8:	68cb      	ldr	r3, [r1, #12]
 8004dea:	1e5a      	subs	r2, r3, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8004dec:	694b      	ldr	r3, [r1, #20]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004df2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004df6:	431c      	orrs	r4, r3
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004df8:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004dfa:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004dfe:	680b      	ldr	r3, [r1, #0]
 8004e00:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004e02:	684d      	ldr	r5, [r1, #4]
 8004e04:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004e06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004e0a:	688d      	ldr	r5, [r1, #8]
 8004e0c:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004e0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004e12:	690d      	ldr	r5, [r1, #16]
 8004e14:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004e16:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8004e1a:	6989      	ldr	r1, [r1, #24]
 8004e1c:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004e1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004e22:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004e24:	6084      	str	r4, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004e26:	60c3      	str	r3, [r0, #12]
 8004e28:	e7d8      	b.n	8004ddc <FMC_SDRAM_Timing_Init+0x44>
 8004e2a:	bf00      	nop
 8004e2c:	ff0f0fff 	.word	0xff0f0fff

08004e30 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e30:	b410      	push	{r4}
 8004e32:	b083      	sub	sp, #12
 8004e34:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8004e36:	2000      	movs	r0, #0
 8004e38:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004e3a:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8004e3c:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004e3e:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004e40:	688a      	ldr	r2, [r1, #8]
 8004e42:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8004e44:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8004e48:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004e4a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8004e4e:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8004e54:	b003      	add	sp, #12
 8004e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8004e5c:	6943      	ldr	r3, [r0, #20]
 8004e5e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004e62:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004e64:	2000      	movs	r0, #0
 8004e66:	4770      	bx	lr

08004e68 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 8004e68:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <USB_CoreReset+0x38>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d811      	bhi.n	8004e96 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8004e72:	6902      	ldr	r2, [r0, #16]
 8004e74:	2a00      	cmp	r2, #0
 8004e76:	daf8      	bge.n	8004e6a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e78:	6903      	ldr	r3, [r0, #16]
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6103      	str	r3, [r0, #16]
  count = 0;
 8004e80:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000)
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <USB_CoreReset+0x38>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d807      	bhi.n	8004e9a <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e8a:	6902      	ldr	r2, [r0, #16]
 8004e8c:	f012 0f01 	tst.w	r2, #1
 8004e90:	d1f7      	bne.n	8004e82 <USB_CoreReset+0x1a>

  return HAL_OK;
 8004e92:	2000      	movs	r0, #0
 8004e94:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e96:	2003      	movs	r0, #3
 8004e98:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e9a:	2003      	movs	r0, #3
}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	00030d40 	.word	0x00030d40

08004ea4 <USB_CoreInit>:
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	a803      	add	r0, sp, #12
 8004eac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eb0:	9b08      	ldr	r3, [sp, #32]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d011      	beq.n	8004eda <USB_CoreInit+0x36>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebc:	60e3      	str	r3, [r4, #12]
    USB_CoreReset(USBx);
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff ffd2 	bl	8004e68 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ec8:	63a3      	str	r3, [r4, #56]	; 0x38
  if(cfg.dma_enable == ENABLE)
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d01c      	beq.n	8004f0a <USB_CoreInit+0x66>
}
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed6:	b004      	add	sp, #16
 8004ed8:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ee2:	68e2      	ldr	r2, [r4, #12]
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <USB_CoreInit+0x78>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eea:	68e3      	ldr	r3, [r4, #12]
 8004eec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ef0:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1)
 8004ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d003      	beq.n	8004f00 <USB_CoreInit+0x5c>
    USB_CoreReset(USBx);
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7ff ffb5 	bl	8004e68 <USB_CoreReset>
 8004efe:	e7e4      	b.n	8004eca <USB_CoreInit+0x26>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f00:	68e3      	ldr	r3, [r4, #12]
 8004f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f06:	60e3      	str	r3, [r4, #12]
 8004f08:	e7f6      	b.n	8004ef8 <USB_CoreInit+0x54>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	f043 0306 	orr.w	r3, r3, #6
 8004f10:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	f043 0320 	orr.w	r3, r3, #32
 8004f18:	60a3      	str	r3, [r4, #8]
 8004f1a:	e7d9      	b.n	8004ed0 <USB_CoreInit+0x2c>
 8004f1c:	ffbdffbf 	.word	0xffbdffbf

08004f20 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f20:	6883      	ldr	r3, [r0, #8]
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6083      	str	r3, [r0, #8]
}
 8004f28:	2000      	movs	r0, #0
 8004f2a:	4770      	bx	lr

08004f2c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2c:	6883      	ldr	r3, [r0, #8]
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6083      	str	r3, [r0, #8]
}
 8004f34:	2000      	movs	r0, #0
 8004f36:	4770      	bx	lr

08004f38 <USB_SetCurrentMode>:
{
 8004f38:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f3a:	68c3      	ldr	r3, [r0, #12]
 8004f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f40:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8004f42:	2901      	cmp	r1, #1
 8004f44:	d009      	beq.n	8004f5a <USB_SetCurrentMode+0x22>
  else if ( mode == USB_OTG_DEVICE_MODE)
 8004f46:	b919      	cbnz	r1, 8004f50 <USB_SetCurrentMode+0x18>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f48:	68c3      	ldr	r3, [r0, #12]
 8004f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8004f50:	2032      	movs	r0, #50	; 0x32
 8004f52:	f7fc fb63 	bl	800161c <HAL_Delay>
}
 8004f56:	2000      	movs	r0, #0
 8004f58:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f5a:	68c3      	ldr	r3, [r0, #12]
 8004f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f60:	60c3      	str	r3, [r0, #12]
 8004f62:	e7f5      	b.n	8004f50 <USB_SetCurrentMode+0x18>

08004f64 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8004f64:	0189      	lsls	r1, r1, #6
 8004f66:	f041 0120 	orr.w	r1, r1, #32
 8004f6a:	6101      	str	r1, [r0, #16]
  uint32_t count = 0;
 8004f6c:	2300      	movs	r3, #0
    if (++count > 200000)
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <USB_FlushTxFifo+0x24>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d805      	bhi.n	8004f82 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f76:	6902      	ldr	r2, [r0, #16]
 8004f78:	f012 0f20 	tst.w	r2, #32
 8004f7c:	d1f7      	bne.n	8004f6e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004f7e:	2000      	movs	r0, #0
 8004f80:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004f82:	2003      	movs	r0, #3
}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	00030d40 	.word	0x00030d40

08004f8c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8004f90:	2300      	movs	r3, #0
    if (++count > 200000)
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a05      	ldr	r2, [pc, #20]	; (8004fac <USB_FlushRxFifo+0x20>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d805      	bhi.n	8004fa6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f9a:	6902      	ldr	r2, [r0, #16]
 8004f9c:	f012 0f10 	tst.w	r2, #16
 8004fa0:	d1f7      	bne.n	8004f92 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004fa6:	2003      	movs	r0, #3
}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	00030d40 	.word	0x00030d40

08004fb0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004fb0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004fb4:	4319      	orrs	r1, r3
 8004fb6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004fba:	2000      	movs	r0, #0
 8004fbc:	4770      	bx	lr
	...

08004fc0 <USB_DevInit>:
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	a807      	add	r0, sp, #28
 8004fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd2:	63ab      	str	r3, [r5, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8004fd4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004fd6:	b95f      	cbnz	r7, 8004ff0 <USB_DevInit+0x30>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8004fd8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fde:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe6:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0;
 8004ff0:	462c      	mov	r4, r5
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ff8:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8004ffc:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8005000:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8005004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005006:	2b01      	cmp	r3, #1
 8005008:	d014      	beq.n	8005034 <USB_DevInit+0x74>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800500a:	2b03      	cmp	r3, #3
 800500c:	d01e      	beq.n	800504c <USB_DevInit+0x8c>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800500e:	2103      	movs	r1, #3
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff ffcd 	bl	8004fb0 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8005016:	2110      	movs	r1, #16
 8005018:	4628      	mov	r0, r5
 800501a:	f7ff ffa3 	bl	8004f64 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800501e:	4628      	mov	r0, r5
 8005020:	f7ff ffb4 	bl	8004f8c <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8005028:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800502a:	f04f 32ff 	mov.w	r2, #4294967295
 800502e:	61b2      	str	r2, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8005030:	61f3      	str	r3, [r6, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005032:	e020      	b.n	8005076 <USB_DevInit+0xb6>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	b923      	cbnz	r3, 8005042 <USB_DevInit+0x82>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8005038:	2100      	movs	r1, #0
 800503a:	4628      	mov	r0, r5
 800503c:	f7ff ffb8 	bl	8004fb0 <USB_SetDevSpeed>
 8005040:	e7e9      	b.n	8005016 <USB_DevInit+0x56>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8005042:	2101      	movs	r1, #1
 8005044:	4628      	mov	r0, r5
 8005046:	f7ff ffb3 	bl	8004fb0 <USB_SetDevSpeed>
 800504a:	e7e4      	b.n	8005016 <USB_DevInit+0x56>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	b923      	cbnz	r3, 800505a <USB_DevInit+0x9a>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8005050:	2100      	movs	r1, #0
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff ffac 	bl	8004fb0 <USB_SetDevSpeed>
 8005058:	e7dd      	b.n	8005016 <USB_DevInit+0x56>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800505a:	2101      	movs	r1, #1
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff ffa7 	bl	8004fb0 <USB_SetDevSpeed>
 8005062:	e7d8      	b.n	8005016 <USB_DevInit+0x56>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005068:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0;
 800506c:	2200      	movs	r2, #0
 800506e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8005070:	22ff      	movs	r2, #255	; 0xff
 8005072:	608a      	str	r2, [r1, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8005074:	3301      	adds	r3, #1
 8005076:	9907      	ldr	r1, [sp, #28]
 8005078:	428b      	cmp	r3, r1
 800507a:	d20b      	bcs.n	8005094 <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005080:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8005084:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005088:	2800      	cmp	r0, #0
 800508a:	dbeb      	blt.n	8005064 <USB_DevInit+0xa4>
      USBx_INEP(i)->DIEPCTL = 0;
 800508c:	2000      	movs	r0, #0
 800508e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005092:	e7eb      	b.n	800506c <USB_DevInit+0xac>
 8005094:	2300      	movs	r3, #0
 8005096:	e008      	b.n	80050aa <USB_DevInit+0xea>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8005098:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 800509c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80050a0:	2200      	movs	r2, #0
 80050a2:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	6082      	str	r2, [r0, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80050a8:	3301      	adds	r3, #1
 80050aa:	428b      	cmp	r3, r1
 80050ac:	d20d      	bcs.n	80050ca <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ae:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80050b2:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80050b6:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 80050ba:	f1be 0f00 	cmp.w	lr, #0
 80050be:	dbeb      	blt.n	8005098 <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0;
 80050c0:	f04f 0e00 	mov.w	lr, #0
 80050c4:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
 80050c8:	e7ea      	b.n	80050a0 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050ca:	6933      	ldr	r3, [r6, #16]
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80050d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d01a      	beq.n	800510e <USB_DevInit+0x14e>
  USBx->GINTMSK = 0;
 80050d8:	2200      	movs	r2, #0
 80050da:	61aa      	str	r2, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 80050dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050e0:	616a      	str	r2, [r5, #20]
  if (cfg.dma_enable == DISABLE)
 80050e2:	b91b      	cbnz	r3, 80050ec <USB_DevInit+0x12c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050e4:	69ab      	ldr	r3, [r5, #24]
 80050e6:	f043 0310 	orr.w	r3, r3, #16
 80050ea:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80050ec:	69aa      	ldr	r2, [r5, #24]
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <USB_DevInit+0x168>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61ab      	str	r3, [r5, #24]
  if(cfg.Sof_enable)
 80050f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f6:	b11b      	cbz	r3, 8005100 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050f8:	69ab      	ldr	r3, [r5, #24]
 80050fa:	f043 0308 	orr.w	r3, r3, #8
 80050fe:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8005100:	2f01      	cmp	r7, #1
 8005102:	d00c      	beq.n	800511e <USB_DevInit+0x15e>
}
 8005104:	2000      	movs	r0, #0
 8005106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800510a:	b004      	add	sp, #16
 800510c:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <USB_DevInit+0x16c>)
 8005110:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8005112:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8005114:	4a06      	ldr	r2, [pc, #24]	; (8005130 <USB_DevInit+0x170>)
 8005116:	430a      	orrs	r2, r1
 8005118:	6332      	str	r2, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 800511a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800511c:	e7dc      	b.n	80050d8 <USB_DevInit+0x118>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800511e:	69aa      	ldr	r2, [r5, #24]
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <USB_DevInit+0x174>)
 8005122:	4313      	orrs	r3, r2
 8005124:	61ab      	str	r3, [r5, #24]
 8005126:	e7ed      	b.n	8005104 <USB_DevInit+0x144>
 8005128:	803c3800 	.word	0x803c3800
 800512c:	00800100 	.word	0x00800100
 8005130:	00010003 	.word	0x00010003
 8005134:	40000004 	.word	0x40000004

08005138 <USB_GetDevSpeed>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005138:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800513c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8005140:	f013 0f06 	tst.w	r3, #6
 8005144:	d010      	beq.n	8005168 <USB_GetDevSpeed+0x30>
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8005146:	6883      	ldr	r3, [r0, #8]
 8005148:	f003 0306 	and.w	r3, r3, #6
 800514c:	2b02      	cmp	r3, #2
 800514e:	d00d      	beq.n	800516c <USB_GetDevSpeed+0x34>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8005150:	6883      	ldr	r3, [r0, #8]
 8005152:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8005156:	2b06      	cmp	r3, #6
 8005158:	d00a      	beq.n	8005170 <USB_GetDevSpeed+0x38>
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800515a:	6883      	ldr	r3, [r0, #8]
 800515c:	f003 0306 	and.w	r3, r3, #6
 8005160:	2b04      	cmp	r3, #4
 8005162:	d007      	beq.n	8005174 <USB_GetDevSpeed+0x3c>
  uint8_t speed = 0;
 8005164:	2000      	movs	r0, #0
 8005166:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
 8005168:	2000      	movs	r0, #0
 800516a:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 800516c:	2003      	movs	r0, #3
 800516e:	4770      	bx	lr
 8005170:	2003      	movs	r0, #3
 8005172:	4770      	bx	lr
    speed = USB_OTG_SPEED_LOW;
 8005174:	2002      	movs	r0, #2
}
 8005176:	4770      	bx	lr

08005178 <USB_ActivateEndpoint>:
{
 8005178:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 800517a:	784b      	ldrb	r3, [r1, #1]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d020      	beq.n	80051c2 <USB_ActivateEndpoint+0x4a>
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8005180:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8005184:	780d      	ldrb	r5, [r1, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	40aa      	lsls	r2, r5
 800518a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800518e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8005192:	780b      	ldrb	r3, [r1, #0]
 8005194:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005198:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800519c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80051a0:	d10c      	bne.n	80051bc <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80051a2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80051a6:	688b      	ldr	r3, [r1, #8]
 80051a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ac:	78c9      	ldrb	r1, [r1, #3]
 80051ae:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80051b2:	4313      	orrs	r3, r2
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <USB_ActivateEndpoint+0x8c>)
 80051b6:	431a      	orrs	r2, r3
 80051b8:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 80051bc:	2000      	movs	r0, #0
 80051be:	bc30      	pop	{r4, r5}
 80051c0:	4770      	bx	lr
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80051c2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80051c6:	780d      	ldrb	r5, [r1, #0]
 80051c8:	40ab      	lsls	r3, r5
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80051d2:	780a      	ldrb	r2, [r1, #0]
 80051d4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80051d8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80051dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80051e0:	d1ec      	bne.n	80051bc <USB_ActivateEndpoint+0x44>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80051e2:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80051e6:	688b      	ldr	r3, [r1, #8]
 80051e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ec:	78c9      	ldrb	r1, [r1, #3]
 80051ee:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80051f2:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80051f6:	4323      	orrs	r3, r4
 80051f8:	4a02      	ldr	r2, [pc, #8]	; (8005204 <USB_ActivateEndpoint+0x8c>)
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005200:	e7dc      	b.n	80051bc <USB_ActivateEndpoint+0x44>
 8005202:	bf00      	nop
 8005204:	10008000 	.word	0x10008000

08005208 <USB_DeactivateEndpoint>:
{
 8005208:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 800520a:	784b      	ldrb	r3, [r1, #1]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d01d      	beq.n	800524c <USB_DeactivateEndpoint+0x44>
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8005210:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8005214:	780d      	ldrb	r5, [r1, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	fa02 f505 	lsl.w	r5, r2, r5
 800521c:	ea24 4405 	bic.w	r4, r4, r5, lsl #16
 8005220:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8005224:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8005228:	780d      	ldrb	r5, [r1, #0]
 800522a:	40aa      	lsls	r2, r5
 800522c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8005230:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8005234:	780b      	ldrb	r3, [r1, #0]
 8005236:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800523a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800523e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005242:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005246:	2000      	movs	r0, #0
 8005248:	bc30      	pop	{r4, r5}
 800524a:	4770      	bx	lr
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800524c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005250:	780a      	ldrb	r2, [r1, #0]
 8005252:	fa03 f202 	lsl.w	r2, r3, r2
 8005256:	b292      	uxth	r2, r2
 8005258:	ea25 0202 	bic.w	r2, r5, r2
 800525c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8005260:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005264:	780d      	ldrb	r5, [r1, #0]
 8005266:	40ab      	lsls	r3, r5
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea22 0303 	bic.w	r3, r2, r3
 800526e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8005272:	780b      	ldrb	r3, [r1, #0]
 8005274:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005278:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800527c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005280:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005284:	e7df      	b.n	8005246 <USB_DeactivateEndpoint+0x3e>
	...

08005288 <USB_EP0StartXfer>:
{
 8005288:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 800528a:	784b      	ldrb	r3, [r1, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d037      	beq.n	8005300 <USB_EP0StartXfer+0x78>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005290:	780b      	ldrb	r3, [r1, #0]
 8005292:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005296:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 800529a:	4c50      	ldr	r4, [pc, #320]	; (80053dc <USB_EP0StartXfer+0x154>)
 800529c:	402c      	ands	r4, r5
 800529e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052a2:	780b      	ldrb	r3, [r1, #0]
 80052a4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80052a8:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 80052ac:	4c4c      	ldr	r4, [pc, #304]	; (80053e0 <USB_EP0StartXfer+0x158>)
 80052ae:	402c      	ands	r4, r5
 80052b0:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (ep->xfer_len > 0)
 80052b4:	694b      	ldr	r3, [r1, #20]
 80052b6:	b10b      	cbz	r3, 80052bc <USB_EP0StartXfer+0x34>
      ep->xfer_len = ep->maxpacket;
 80052b8:	688b      	ldr	r3, [r1, #8]
 80052ba:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80052bc:	780b      	ldrb	r3, [r1, #0]
 80052be:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80052c2:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 80052c6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80052ca:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052ce:	780b      	ldrb	r3, [r1, #0]
 80052d0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80052d4:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 80052d8:	688d      	ldr	r5, [r1, #8]
 80052da:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80052de:	432c      	orrs	r4, r5
 80052e0:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (dma == 1)
 80052e4:	2a01      	cmp	r2, #1
 80052e6:	d071      	beq.n	80053cc <USB_EP0StartXfer+0x144>
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052e8:	780b      	ldrb	r3, [r1, #0]
 80052ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80052ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80052f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052f6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80052fa:	2000      	movs	r0, #0
 80052fc:	bc30      	pop	{r4, r5}
 80052fe:	4770      	bx	lr
    if (ep->xfer_len == 0)
 8005300:	694b      	ldr	r3, [r1, #20]
 8005302:	bb83      	cbnz	r3, 8005366 <USB_EP0StartXfer+0xde>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005304:	780b      	ldrb	r3, [r1, #0]
 8005306:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800530a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800530e:	4c34      	ldr	r4, [pc, #208]	; (80053e0 <USB_EP0StartXfer+0x158>)
 8005310:	402c      	ands	r4, r5
 8005312:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8005316:	780b      	ldrb	r3, [r1, #0]
 8005318:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800531c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8005320:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005324:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005328:	780b      	ldrb	r3, [r1, #0]
 800532a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800532e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8005332:	4c2a      	ldr	r4, [pc, #168]	; (80053dc <USB_EP0StartXfer+0x154>)
 8005334:	402c      	ands	r4, r5
 8005336:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    if (dma == 1)
 800533a:	2a01      	cmp	r2, #1
 800533c:	d03f      	beq.n	80053be <USB_EP0StartXfer+0x136>
      if (ep->xfer_len > 0U)
 800533e:	694b      	ldr	r3, [r1, #20]
 8005340:	b13b      	cbz	r3, 8005352 <USB_EP0StartXfer+0xca>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8005342:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005346:	780d      	ldrb	r5, [r1, #0]
 8005348:	2201      	movs	r2, #1
 800534a:	40aa      	lsls	r2, r5
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005352:	780b      	ldrb	r3, [r1, #0]
 8005354:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005358:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800535c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005360:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005364:	e7c9      	b.n	80052fa <USB_EP0StartXfer+0x72>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005366:	780b      	ldrb	r3, [r1, #0]
 8005368:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800536c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8005370:	4c1a      	ldr	r4, [pc, #104]	; (80053dc <USB_EP0StartXfer+0x154>)
 8005372:	402c      	ands	r4, r5
 8005374:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005378:	780b      	ldrb	r3, [r1, #0]
 800537a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800537e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8005382:	4c17      	ldr	r4, [pc, #92]	; (80053e0 <USB_EP0StartXfer+0x158>)
 8005384:	402c      	ands	r4, r5
 8005386:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if(ep->xfer_len > ep->maxpacket)
 800538a:	694c      	ldr	r4, [r1, #20]
 800538c:	688b      	ldr	r3, [r1, #8]
 800538e:	429c      	cmp	r4, r3
 8005390:	d900      	bls.n	8005394 <USB_EP0StartXfer+0x10c>
        ep->xfer_len = ep->maxpacket;
 8005392:	614b      	str	r3, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8005394:	780b      	ldrb	r3, [r1, #0]
 8005396:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800539a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800539e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80053a2:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a6:	780b      	ldrb	r3, [r1, #0]
 80053a8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80053ac:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80053b0:	694d      	ldr	r5, [r1, #20]
 80053b2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80053b6:	432c      	orrs	r4, r5
 80053b8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 80053bc:	e7bd      	b.n	800533a <USB_EP0StartXfer+0xb2>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053be:	780b      	ldrb	r3, [r1, #0]
 80053c0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80053c4:	690a      	ldr	r2, [r1, #16]
 80053c6:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
 80053ca:	e7c2      	b.n	8005352 <USB_EP0StartXfer+0xca>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053cc:	780b      	ldrb	r3, [r1, #0]
 80053ce:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80053d2:	68ca      	ldr	r2, [r1, #12]
 80053d4:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
 80053d8:	e786      	b.n	80052e8 <USB_EP0StartXfer+0x60>
 80053da:	bf00      	nop
 80053dc:	fff80000 	.word	0xfff80000
 80053e0:	e007ffff 	.word	0xe007ffff

080053e4 <USB_WritePacket>:
{
 80053e4:	b470      	push	{r4, r5, r6}
 80053e6:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0)
 80053ea:	b964      	cbnz	r4, 8005406 <USB_WritePacket+0x22>
    count32b =  (len + 3) / 4;
 80053ec:	3303      	adds	r3, #3
 80053ee:	109e      	asrs	r6, r3, #2
    for (i = 0; i < count32b; i++, src += 4)
 80053f0:	e007      	b.n	8005402 <USB_WritePacket+0x1e>
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80053f2:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80053f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80053fe:	601d      	str	r5, [r3, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8005400:	3401      	adds	r4, #1
 8005402:	42b4      	cmp	r4, r6
 8005404:	d3f5      	bcc.n	80053f2 <USB_WritePacket+0xe>
}
 8005406:	2000      	movs	r0, #0
 8005408:	bc70      	pop	{r4, r5, r6}
 800540a:	4770      	bx	lr

0800540c <USB_EPStartXfer>:
{
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	b082      	sub	sp, #8
  if (ep->is_in == 1)
 8005410:	784b      	ldrb	r3, [r1, #1]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d03c      	beq.n	8005490 <USB_EPStartXfer+0x84>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005416:	780b      	ldrb	r3, [r1, #0]
 8005418:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800541c:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8005420:	4c8f      	ldr	r4, [pc, #572]	; (8005660 <USB_EPStartXfer+0x254>)
 8005422:	402c      	ands	r4, r5
 8005424:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005428:	780b      	ldrb	r3, [r1, #0]
 800542a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800542e:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8005432:	4c8c      	ldr	r4, [pc, #560]	; (8005664 <USB_EPStartXfer+0x258>)
 8005434:	402c      	ands	r4, r5
 8005436:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (ep->xfer_len == 0)
 800543a:	694b      	ldr	r3, [r1, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80d0 	bne.w	80055e2 <USB_EPStartXfer+0x1d6>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005442:	780b      	ldrb	r3, [r1, #0]
 8005444:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005448:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800544c:	688d      	ldr	r5, [r1, #8]
 800544e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005452:	432c      	orrs	r4, r5
 8005454:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8005458:	780b      	ldrb	r3, [r1, #0]
 800545a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800545e:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8005462:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005466:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (dma == 1)
 800546a:	2a01      	cmp	r2, #1
 800546c:	f000 80d8 	beq.w	8005620 <USB_EPStartXfer+0x214>
    if (ep->type == EP_TYPE_ISOC)
 8005470:	78cb      	ldrb	r3, [r1, #3]
 8005472:	2b01      	cmp	r3, #1
 8005474:	f000 80db 	beq.w	800562e <USB_EPStartXfer+0x222>
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005478:	780b      	ldrb	r3, [r1, #0]
 800547a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800547e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005486:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800548a:	2000      	movs	r0, #0
 800548c:	b002      	add	sp, #8
 800548e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0)
 8005490:	694b      	ldr	r3, [r1, #20]
 8005492:	bb5b      	cbnz	r3, 80054ec <USB_EPStartXfer+0xe0>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005494:	780b      	ldrb	r3, [r1, #0]
 8005496:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800549a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800549e:	4c71      	ldr	r4, [pc, #452]	; (8005664 <USB_EPStartXfer+0x258>)
 80054a0:	402c      	ands	r4, r5
 80054a2:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80054a6:	780b      	ldrb	r3, [r1, #0]
 80054a8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80054ac:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80054b0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80054b4:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054b8:	780b      	ldrb	r3, [r1, #0]
 80054ba:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80054be:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80054c2:	4c67      	ldr	r4, [pc, #412]	; (8005660 <USB_EPStartXfer+0x254>)
 80054c4:	402c      	ands	r4, r5
 80054c6:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    if (dma == 1)
 80054ca:	2a01      	cmp	r2, #1
 80054cc:	d052      	beq.n	8005574 <USB_EPStartXfer+0x168>
      if (ep->type != EP_TYPE_ISOC)
 80054ce:	78cb      	ldrb	r3, [r1, #3]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d055      	beq.n	8005580 <USB_EPStartXfer+0x174>
        if (ep->xfer_len > 0)
 80054d4:	694b      	ldr	r3, [r1, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d052      	beq.n	8005580 <USB_EPStartXfer+0x174>
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 80054da:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80054de:	780e      	ldrb	r6, [r1, #0]
 80054e0:	2401      	movs	r4, #1
 80054e2:	40b4      	lsls	r4, r6
 80054e4:	4323      	orrs	r3, r4
 80054e6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80054ea:	e049      	b.n	8005580 <USB_EPStartXfer+0x174>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ec:	780b      	ldrb	r3, [r1, #0]
 80054ee:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80054f2:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80054f6:	4c5a      	ldr	r4, [pc, #360]	; (8005660 <USB_EPStartXfer+0x254>)
 80054f8:	402c      	ands	r4, r5
 80054fa:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054fe:	780b      	ldrb	r3, [r1, #0]
 8005500:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005504:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8005508:	4c56      	ldr	r4, [pc, #344]	; (8005664 <USB_EPStartXfer+0x258>)
 800550a:	402c      	ands	r4, r5
 800550c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8005510:	780c      	ldrb	r4, [r1, #0]
 8005512:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8005516:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800551a:	694b      	ldr	r3, [r1, #20]
 800551c:	688e      	ldr	r6, [r1, #8]
 800551e:	4433      	add	r3, r6
 8005520:	3b01      	subs	r3, #1
 8005522:	fbb3 f3f6 	udiv	r3, r3, r6
 8005526:	4e50      	ldr	r6, [pc, #320]	; (8005668 <USB_EPStartXfer+0x25c>)
 8005528:	ea06 43c3 	and.w	r3, r6, r3, lsl #19
 800552c:	432b      	orrs	r3, r5
 800552e:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005538:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800553c:	694d      	ldr	r5, [r1, #20]
 800553e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005542:	432c      	orrs	r4, r5
 8005544:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8005548:	78cb      	ldrb	r3, [r1, #3]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d1bd      	bne.n	80054ca <USB_EPStartXfer+0xbe>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800554e:	780b      	ldrb	r3, [r1, #0]
 8005550:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005554:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8005558:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800555c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8005560:	780b      	ldrb	r3, [r1, #0]
 8005562:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005566:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800556a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800556e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8005572:	e7aa      	b.n	80054ca <USB_EPStartXfer+0xbe>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005574:	780b      	ldrb	r3, [r1, #0]
 8005576:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800557a:	690c      	ldr	r4, [r1, #16]
 800557c:	f8c3 4914 	str.w	r4, [r3, #2324]	; 0x914
    if (ep->type == EP_TYPE_ISOC)
 8005580:	78cb      	ldrb	r3, [r1, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d014      	beq.n	80055b0 <USB_EPStartXfer+0x1a4>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005586:	780b      	ldrb	r3, [r1, #0]
 8005588:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800558c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005590:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005594:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8005598:	78cb      	ldrb	r3, [r1, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f47f af75 	bne.w	800548a <USB_EPStartXfer+0x7e>
 80055a0:	4614      	mov	r4, r2
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 80055a2:	8a8b      	ldrh	r3, [r1, #20]
 80055a4:	780a      	ldrb	r2, [r1, #0]
 80055a6:	68c9      	ldr	r1, [r1, #12]
 80055a8:	9400      	str	r4, [sp, #0]
 80055aa:	f7ff ff1b 	bl	80053e4 <USB_WritePacket>
 80055ae:	e76c      	b.n	800548a <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80055b0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80055b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055b8:	d109      	bne.n	80055ce <USB_EPStartXfer+0x1c2>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055ba:	780b      	ldrb	r3, [r1, #0]
 80055bc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80055c0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80055c4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80055c8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80055cc:	e7db      	b.n	8005586 <USB_EPStartXfer+0x17a>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ce:	780b      	ldrb	r3, [r1, #0]
 80055d0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80055d4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80055d8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80055dc:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80055e0:	e7d1      	b.n	8005586 <USB_EPStartXfer+0x17a>
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 80055e2:	688c      	ldr	r4, [r1, #8]
 80055e4:	4423      	add	r3, r4
 80055e6:	3b01      	subs	r3, #1
 80055e8:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 80055ec:	780c      	ldrb	r4, [r1, #0]
 80055ee:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80055f2:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	; 0xb10
 80055f6:	4e1c      	ldr	r6, [pc, #112]	; (8005668 <USB_EPStartXfer+0x25c>)
 80055f8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80055fc:	4335      	orrs	r5, r6
 80055fe:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8005602:	780c      	ldrb	r4, [r1, #0]
 8005604:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8005608:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 800560c:	688d      	ldr	r5, [r1, #8]
 800560e:	b29b      	uxth	r3, r3
 8005610:	fb05 f503 	mul.w	r5, r5, r3
 8005614:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005618:	4335      	orrs	r5, r6
 800561a:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
 800561e:	e724      	b.n	800546a <USB_EPStartXfer+0x5e>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8005620:	780b      	ldrb	r3, [r1, #0]
 8005622:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005626:	68ca      	ldr	r2, [r1, #12]
 8005628:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
 800562c:	e720      	b.n	8005470 <USB_EPStartXfer+0x64>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800562e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8005632:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005636:	d109      	bne.n	800564c <USB_EPStartXfer+0x240>
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005638:	780b      	ldrb	r3, [r1, #0]
 800563a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800563e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005642:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005646:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800564a:	e715      	b.n	8005478 <USB_EPStartXfer+0x6c>
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800564c:	780b      	ldrb	r3, [r1, #0]
 800564e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005652:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800565a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800565e:	e70b      	b.n	8005478 <USB_EPStartXfer+0x6c>
 8005660:	fff80000 	.word	0xfff80000
 8005664:	e007ffff 	.word	0xe007ffff
 8005668:	1ff80000 	.word	0x1ff80000

0800566c <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 800566c:	3203      	adds	r2, #3
 800566e:	1092      	asrs	r2, r2, #2
  for ( i = 0; i < count32b; i++, dest += 4 )
 8005670:	2300      	movs	r3, #0
 8005672:	4293      	cmp	r3, r2
 8005674:	d20c      	bcs.n	8005690 <USB_ReadPacket+0x24>
{
 8005676:	b410      	push	{r4}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8005678:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800567c:	6824      	ldr	r4, [r4, #0]
 800567e:	f841 4b04 	str.w	r4, [r1], #4
  for ( i = 0; i < count32b; i++, dest += 4 )
 8005682:	3301      	adds	r3, #1
 8005684:	4293      	cmp	r3, r2
 8005686:	d3f7      	bcc.n	8005678 <USB_ReadPacket+0xc>
}
 8005688:	4608      	mov	r0, r1
 800568a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	4608      	mov	r0, r1
 8005692:	4770      	bx	lr

08005694 <USB_EPSetStall>:
  if (ep->is_in == 1)
 8005694:	784b      	ldrb	r3, [r1, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d017      	beq.n	80056ca <USB_EPSetStall+0x36>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800569a:	780b      	ldrb	r3, [r1, #0]
 800569c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80056a0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	db05      	blt.n	80056b4 <USB_EPSetStall+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80056ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80056b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056b4:	780b      	ldrb	r3, [r1, #0]
 80056b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80056ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80056be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80056c6:	2000      	movs	r0, #0
 80056c8:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80056ca:	780b      	ldrb	r3, [r1, #0]
 80056cc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80056d0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	db05      	blt.n	80056e4 <USB_EPSetStall+0x50>
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056d8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80056dc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80056e0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056e4:	780b      	ldrb	r3, [r1, #0]
 80056e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80056ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80056ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80056f6:	e7e6      	b.n	80056c6 <USB_EPSetStall+0x32>

080056f8 <USB_EPClearStall>:
  if (ep->is_in == 1)
 80056f8:	784b      	ldrb	r3, [r1, #1]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00f      	beq.n	800571e <USB_EPClearStall+0x26>
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056fe:	780b      	ldrb	r3, [r1, #0]
 8005700:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005704:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005708:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800570c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005710:	78cb      	ldrb	r3, [r1, #3]
 8005712:	3b02      	subs	r3, #2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d919      	bls.n	800574e <USB_EPClearStall+0x56>
}
 800571a:	2000      	movs	r0, #0
 800571c:	4770      	bx	lr
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800571e:	780b      	ldrb	r3, [r1, #0]
 8005720:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005724:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005728:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800572c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005730:	78cb      	ldrb	r3, [r1, #3]
 8005732:	3b02      	subs	r3, #2
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d8ef      	bhi.n	800571a <USB_EPClearStall+0x22>
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800573a:	780b      	ldrb	r3, [r1, #0]
 800573c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005740:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800574c:	e7e5      	b.n	800571a <USB_EPClearStall+0x22>
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800574e:	780b      	ldrb	r3, [r1, #0]
 8005750:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005754:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005760:	e7db      	b.n	800571a <USB_EPClearStall+0x22>

08005762 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005762:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005766:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800576a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800576e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005772:	0109      	lsls	r1, r1, #4
 8005774:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005778:	430b      	orrs	r3, r1
 800577a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800577e:	2000      	movs	r0, #0
 8005780:	4770      	bx	lr

08005782 <USB_DevConnect>:
{
 8005782:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8005784:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8005790:	2003      	movs	r0, #3
 8005792:	f7fb ff43 	bl	800161c <HAL_Delay>
}
 8005796:	2000      	movs	r0, #0
 8005798:	bd08      	pop	{r3, pc}

0800579a <USB_DevDisconnect>:
{
 800579a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800579c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80057a0:	f043 0302 	orr.w	r3, r3, #2
 80057a4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80057a8:	2003      	movs	r0, #3
 80057aa:	f7fb ff37 	bl	800161c <HAL_Delay>
}
 80057ae:	2000      	movs	r0, #0
 80057b0:	bd08      	pop	{r3, pc}

080057b2 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 80057b2:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80057b4:	6980      	ldr	r0, [r0, #24]
}
 80057b6:	4010      	ands	r0, r2
 80057b8:	4770      	bx	lr

080057ba <USB_ReadDevAllOutEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 80057ba:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80057be:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80057c2:	69c0      	ldr	r0, [r0, #28]
 80057c4:	4018      	ands	r0, r3
}
 80057c6:	0c00      	lsrs	r0, r0, #16
 80057c8:	4770      	bx	lr

080057ca <USB_ReadDevAllInEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 80057ca:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80057ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80057d2:	69c0      	ldr	r0, [r0, #28]
 80057d4:	4018      	ands	r0, r3
}
 80057d6:	b280      	uxth	r0, r0
 80057d8:	4770      	bx	lr

080057da <USB_ReadDevOutEPInterrupt>:
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80057da:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80057de:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  v &= USBx_DEVICE->DOEPMSK;
 80057e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80057e6:	6940      	ldr	r0, [r0, #20]
}
 80057e8:	4010      	ands	r0, r2
 80057ea:	4770      	bx	lr

080057ec <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80057ec:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057f0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
 80057f4:	40cb      	lsrs	r3, r1
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	4313      	orrs	r3, r2
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80057fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005800:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
}
 8005804:	4018      	ands	r0, r3
 8005806:	4770      	bx	lr

08005808 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 8005808:	6940      	ldr	r0, [r0, #20]
}
 800580a:	f000 0001 	and.w	r0, r0, #1
 800580e:	4770      	bx	lr

08005810 <USB_ActivateSetup>:
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005810:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <USB_ActivateSetup+0x34>)
 8005816:	4013      	ands	r3, r2
 8005818:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800581c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	f002 0206 	and.w	r2, r2, #6
 8005826:	2a04      	cmp	r2, #4
 8005828:	d005      	beq.n	8005836 <USB_ActivateSetup+0x26>
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005830:	605a      	str	r2, [r3, #4]
}
 8005832:	2000      	movs	r0, #0
 8005834:	4770      	bx	lr
    USBx_INEP(0)->DIEPCTL |= 3;
 8005836:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800583a:	f042 0203 	orr.w	r2, r2, #3
 800583e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005842:	e7f2      	b.n	800582a <USB_ActivateSetup+0x1a>
 8005844:	fffff800 	.word	0xfffff800

08005848 <USB_EP0_OutStart>:
{
 8005848:	b410      	push	{r4}
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800584a:	2400      	movs	r4, #0
 800584c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8005850:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005854:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005858:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800585c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005860:	f044 0418 	orr.w	r4, r4, #24
 8005864:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005868:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800586c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005870:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1)
 8005874:	2901      	cmp	r1, #1
 8005876:	d003      	beq.n	8005880 <USB_EP0_OutStart+0x38>
}
 8005878:	2000      	movs	r0, #0
 800587a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800587e:	4770      	bx	lr
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 8005880:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8005884:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8005888:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800588c:	e7f4      	b.n	8005878 <USB_EP0_OutStart+0x30>
	...

08005890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005890:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <disk_status+0x14>)
 8005894:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005898:	6852      	ldr	r2, [r2, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	4403      	add	r3, r0
 800589e:	7a18      	ldrb	r0, [r3, #8]
 80058a0:	4790      	blx	r2
  return stat;
}
 80058a2:	bd08      	pop	{r3, pc}
 80058a4:	20000764 	.word	0x20000764

080058a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058a8:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80058aa:	4b08      	ldr	r3, [pc, #32]	; (80058cc <disk_initialize+0x24>)
 80058ac:	5c1b      	ldrb	r3, [r3, r0]
 80058ae:	b10b      	cbz	r3, 80058b4 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 80058b0:	2000      	movs	r0, #0
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
  }
  return stat;
}
 80058b2:	bd08      	pop	{r3, pc}
    disk.is_initialized[pdrv] = 1;
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <disk_initialize+0x24>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058ba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80058be:	6852      	ldr	r2, [r2, #4]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	4418      	add	r0, r3
 80058c4:	7a00      	ldrb	r0, [r0, #8]
 80058c6:	4790      	blx	r2
 80058c8:	bd08      	pop	{r3, pc}
 80058ca:	bf00      	nop
 80058cc:	20000764 	.word	0x20000764

080058d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058d0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058d2:	4c04      	ldr	r4, [pc, #16]	; (80058e4 <disk_read+0x14>)
 80058d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80058d8:	686d      	ldr	r5, [r5, #4]
 80058da:	68ad      	ldr	r5, [r5, #8]
 80058dc:	4404      	add	r4, r0
 80058de:	7a20      	ldrb	r0, [r4, #8]
 80058e0:	47a8      	blx	r5
  return res;
}
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000764 	.word	0x20000764

080058e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058e8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058ea:	4c04      	ldr	r4, [pc, #16]	; (80058fc <disk_write+0x14>)
 80058ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80058f0:	686d      	ldr	r5, [r5, #4]
 80058f2:	68ed      	ldr	r5, [r5, #12]
 80058f4:	4404      	add	r4, r0
 80058f6:	7a20      	ldrb	r0, [r4, #8]
 80058f8:	47a8      	blx	r5
  return res;
}
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	20000764 	.word	0x20000764

08005900 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005900:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <disk_ioctl+0x14>)
 8005904:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8005908:	6864      	ldr	r4, [r4, #4]
 800590a:	6924      	ldr	r4, [r4, #16]
 800590c:	4403      	add	r3, r0
 800590e:	7a18      	ldrb	r0, [r3, #8]
 8005910:	47a0      	blx	r4
  return res;
}
 8005912:	bd10      	pop	{r4, pc}
 8005914:	20000764 	.word	0x20000764

08005918 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8005918:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800591a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800591c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8005920:	4770      	bx	lr

08005922 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8005922:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8005924:	7883      	ldrb	r3, [r0, #2]
 8005926:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800592a:	7843      	ldrb	r3, [r0, #1]
 800592c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005930:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8005932:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005936:	4770      	bx	lr

08005938 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005938:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800593a:	0a09      	lsrs	r1, r1, #8
 800593c:	7041      	strb	r1, [r0, #1]
 800593e:	4770      	bx	lr

08005940 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005940:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005942:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005946:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005948:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800594c:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800594e:	0e09      	lsrs	r1, r1, #24
 8005950:	70c1      	strb	r1, [r0, #3]
 8005952:	4770      	bx	lr

08005954 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8005954:	4613      	mov	r3, r2
 8005956:	b12a      	cbz	r2, 8005964 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 8005958:	780a      	ldrb	r2, [r1, #0]
 800595a:	7002      	strb	r2, [r0, #0]
 800595c:	3001      	adds	r0, #1
 800595e:	3101      	adds	r1, #1
		} while (--cnt);
 8005960:	3b01      	subs	r3, #1
 8005962:	d1f9      	bne.n	8005958 <mem_cpy+0x4>
 8005964:	4770      	bx	lr

08005966 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8005966:	7001      	strb	r1, [r0, #0]
 8005968:	3001      	adds	r0, #1
	} while (--cnt);
 800596a:	3a01      	subs	r2, #1
 800596c:	d1fb      	bne.n	8005966 <mem_set>
}
 800596e:	4770      	bx	lr

08005970 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005970:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8005972:	1c45      	adds	r5, r0, #1
 8005974:	7803      	ldrb	r3, [r0, #0]
 8005976:	7808      	ldrb	r0, [r1, #0]
 8005978:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800597a:	3a01      	subs	r2, #1
 800597c:	d004      	beq.n	8005988 <mem_cmp+0x18>
 800597e:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8005980:	4628      	mov	r0, r5
 8005982:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f4      	beq.n	8005972 <mem_cmp+0x2>

	return r;
}
 8005988:	4618      	mov	r0, r3
 800598a:	bc30      	pop	{r4, r5}
 800598c:	4770      	bx	lr

0800598e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 800598e:	e000      	b.n	8005992 <chk_chr+0x4>
 8005990:	3001      	adds	r0, #1
 8005992:	7803      	ldrb	r3, [r0, #0]
 8005994:	b10b      	cbz	r3, 800599a <chk_chr+0xc>
 8005996:	428b      	cmp	r3, r1
 8005998:	d1fa      	bne.n	8005990 <chk_chr+0x2>
	return *str;
}
 800599a:	4618      	mov	r0, r3
 800599c:	4770      	bx	lr
	...

080059a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059a0:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059a2:	2500      	movs	r5, #0
 80059a4:	462b      	mov	r3, r5
 80059a6:	e001      	b.n	80059ac <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80059a8:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059aa:	3301      	adds	r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d815      	bhi.n	80059dc <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	4c17      	ldr	r4, [pc, #92]	; (8005a10 <chk_lock+0x70>)
 80059b4:	58a2      	ldr	r2, [r4, r2]
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d0f6      	beq.n	80059a8 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059ba:	6804      	ldr	r4, [r0, #0]
 80059bc:	42a2      	cmp	r2, r4
 80059be:	d1f4      	bne.n	80059aa <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <chk_lock+0x70>)
 80059c2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80059c6:	6854      	ldr	r4, [r2, #4]
 80059c8:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059ca:	4294      	cmp	r4, r2
 80059cc:	d1ed      	bne.n	80059aa <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 80059ce:	4a10      	ldr	r2, [pc, #64]	; (8005a10 <chk_lock+0x70>)
 80059d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80059d4:	6894      	ldr	r4, [r2, #8]
 80059d6:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 80059d8:	4294      	cmp	r4, r2
 80059da:	d1e6      	bne.n	80059aa <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d003      	beq.n	80059e8 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059e0:	b159      	cbz	r1, 80059fa <chk_lock+0x5a>
 80059e2:	2010      	movs	r0, #16
}
 80059e4:	bc30      	pop	{r4, r5}
 80059e6:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80059e8:	2902      	cmp	r1, #2
 80059ea:	bf08      	it	eq
 80059ec:	f045 0501 	orreq.w	r5, r5, #1
 80059f0:	b90d      	cbnz	r5, 80059f6 <chk_lock+0x56>
 80059f2:	2012      	movs	r0, #18
 80059f4:	e7f6      	b.n	80059e4 <chk_lock+0x44>
 80059f6:	2000      	movs	r0, #0
 80059f8:	e7f4      	b.n	80059e4 <chk_lock+0x44>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059fa:	4a05      	ldr	r2, [pc, #20]	; (8005a10 <chk_lock+0x70>)
 80059fc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005a00:	899b      	ldrh	r3, [r3, #12]
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d001      	beq.n	8005a0c <chk_lock+0x6c>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e7eb      	b.n	80059e4 <chk_lock+0x44>
 8005a0c:	2010      	movs	r0, #16
 8005a0e:	e7e9      	b.n	80059e4 <chk_lock+0x44>
 8005a10:	20000740 	.word	0x20000740

08005a14 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a14:	2000      	movs	r0, #0
 8005a16:	e000      	b.n	8005a1a <enq_lock+0x6>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	2801      	cmp	r0, #1
 8005a1c:	d804      	bhi.n	8005a28 <enq_lock+0x14>
 8005a1e:	0103      	lsls	r3, r0, #4
 8005a20:	4a03      	ldr	r2, [pc, #12]	; (8005a30 <enq_lock+0x1c>)
 8005a22:	58d3      	ldr	r3, [r2, r3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f7      	bne.n	8005a18 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8005a28:	3802      	subs	r0, #2
 8005a2a:	bf18      	it	ne
 8005a2c:	2001      	movne	r0, #1
 8005a2e:	4770      	bx	lr
 8005a30:	20000740 	.word	0x20000740

08005a34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a34:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <inc_lock+0x8>
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d813      	bhi.n	8005a68 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	4c24      	ldr	r4, [pc, #144]	; (8005ad4 <inc_lock+0xa0>)
 8005a44:	58a4      	ldr	r4, [r4, r2]
 8005a46:	6802      	ldr	r2, [r0, #0]
 8005a48:	4294      	cmp	r4, r2
 8005a4a:	d1f6      	bne.n	8005a3a <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8005a4c:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <inc_lock+0xa0>)
 8005a4e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005a52:	6854      	ldr	r4, [r2, #4]
 8005a54:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a56:	4294      	cmp	r4, r2
 8005a58:	d1ef      	bne.n	8005a3a <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <inc_lock+0xa0>)
 8005a5c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005a60:	6894      	ldr	r4, [r2, #8]
 8005a62:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a64:	4294      	cmp	r4, r2
 8005a66:	d1e8      	bne.n	8005a3a <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d029      	beq.n	8005ac0 <inc_lock+0x8c>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005a6c:	b121      	cbz	r1, 8005a78 <inc_lock+0x44>
 8005a6e:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <inc_lock+0xa0>)
 8005a70:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005a74:	8992      	ldrh	r2, [r2, #12]
 8005a76:	bb52      	cbnz	r2, 8005ace <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a78:	bb21      	cbnz	r1, 8005ac4 <inc_lock+0x90>
 8005a7a:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <inc_lock+0xa0>)
 8005a7c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005a80:	8991      	ldrh	r1, [r2, #12]
 8005a82:	3101      	adds	r1, #1
 8005a84:	b289      	uxth	r1, r1
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <inc_lock+0xa0>)
 8005a88:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005a8c:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8005a8e:	1c58      	adds	r0, r3, #1
}
 8005a90:	bc70      	pop	{r4, r5, r6}
 8005a92:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a94:	3301      	adds	r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d804      	bhi.n	8005aa4 <inc_lock+0x70>
 8005a9a:	011a      	lsls	r2, r3, #4
 8005a9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ad4 <inc_lock+0xa0>)
 8005a9e:	58a2      	ldr	r2, [r4, r2]
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	d1f7      	bne.n	8005a94 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d010      	beq.n	8005aca <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8005aa8:	6806      	ldr	r6, [r0, #0]
 8005aaa:	4d0a      	ldr	r5, [pc, #40]	; (8005ad4 <inc_lock+0xa0>)
 8005aac:	011c      	lsls	r4, r3, #4
 8005aae:	192a      	adds	r2, r5, r4
 8005ab0:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8005ab2:	6884      	ldr	r4, [r0, #8]
 8005ab4:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8005ab6:	6940      	ldr	r0, [r0, #20]
 8005ab8:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8005aba:	2000      	movs	r0, #0
 8005abc:	8190      	strh	r0, [r2, #12]
 8005abe:	e7d5      	b.n	8005a6c <inc_lock+0x38>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e7e8      	b.n	8005a96 <inc_lock+0x62>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ac8:	e7dd      	b.n	8005a86 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005aca:	2000      	movs	r0, #0
 8005acc:	e7e0      	b.n	8005a90 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7de      	b.n	8005a90 <inc_lock+0x5c>
 8005ad2:	bf00      	nop
 8005ad4:	20000740 	.word	0x20000740

08005ad8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ad8:	3801      	subs	r0, #1
 8005ada:	2801      	cmp	r0, #1
 8005adc:	d901      	bls.n	8005ae2 <dec_lock+0xa>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ade:	2002      	movs	r0, #2
 8005ae0:	4770      	bx	lr
		n = Files[i].ctr;
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <dec_lock+0x3c>)
 8005ae4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005ae8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aee:	d00c      	beq.n	8005b0a <dec_lock+0x32>
		if (n > 0) n--;				/* Decrement read mode open count */
 8005af0:	b10b      	cbz	r3, 8005af6 <dec_lock+0x1e>
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8005af6:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <dec_lock+0x3c>)
 8005af8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005afc:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005afe:	b933      	cbnz	r3, 8005b0e <dec_lock+0x36>
 8005b00:	0103      	lsls	r3, r0, #4
 8005b02:	2000      	movs	r0, #0
 8005b04:	4a03      	ldr	r2, [pc, #12]	; (8005b14 <dec_lock+0x3c>)
 8005b06:	50d0      	str	r0, [r2, r3]
 8005b08:	4770      	bx	lr
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e7f0      	b.n	8005af0 <dec_lock+0x18>
		res = FR_OK;
 8005b0e:	2000      	movs	r0, #0
	}
	return res;
}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000740 	.word	0x20000740

08005b18 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e003      	b.n	8005b24 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8005b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b20:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8005b22:	3301      	adds	r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d811      	bhi.n	8005b4c <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b28:	011a      	lsls	r2, r3, #4
 8005b2a:	4909      	ldr	r1, [pc, #36]	; (8005b50 <clear_lock+0x38>)
 8005b2c:	588a      	ldr	r2, [r1, r2]
 8005b2e:	4282      	cmp	r2, r0
 8005b30:	d1f7      	bne.n	8005b22 <clear_lock+0xa>
{
 8005b32:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b34:	011a      	lsls	r2, r3, #4
 8005b36:	2400      	movs	r4, #0
 8005b38:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d8ed      	bhi.n	8005b1c <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b40:	011a      	lsls	r2, r3, #4
 8005b42:	4903      	ldr	r1, [pc, #12]	; (8005b50 <clear_lock+0x38>)
 8005b44:	588a      	ldr	r2, [r1, r2]
 8005b46:	4282      	cmp	r2, r0
 8005b48:	d1f7      	bne.n	8005b3a <clear_lock+0x22>
 8005b4a:	e7f3      	b.n	8005b34 <clear_lock+0x1c>
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000740 	.word	0x20000740

08005b54 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8005b54:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b56:	6983      	ldr	r3, [r0, #24]
 8005b58:	3b02      	subs	r3, #2
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	d204      	bcs.n	8005b68 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8005b5e:	8943      	ldrh	r3, [r0, #10]
 8005b60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005b62:	fb03 0001 	mla	r0, r3, r1, r0
 8005b66:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b68:	2000      	movs	r0, #0
}
 8005b6a:	4770      	bx	lr

08005b6c <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005b6c:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005b6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b70:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005b72:	0a49      	lsrs	r1, r1, #9
 8005b74:	8952      	ldrh	r2, [r2, #10]
 8005b76:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b7a:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005b7c:	b130      	cbz	r0, 8005b8c <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8005b7e:	4281      	cmp	r1, r0
 8005b80:	d302      	bcc.n	8005b88 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b82:	1a09      	subs	r1, r1, r0
 8005b84:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b86:	e7f8      	b.n	8005b7a <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b88:	6858      	ldr	r0, [r3, #4]
 8005b8a:	4408      	add	r0, r1
}
 8005b8c:	4770      	bx	lr

08005b8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	4606      	mov	r6, r0
 8005b92:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b94:	f101 001a 	add.w	r0, r1, #26
 8005b98:	f7ff febe 	bl	8005918 <ld_word>
 8005b9c:	4604      	mov	r4, r0
	if (fs->fs_type == FS_FAT32) {
 8005b9e:	7833      	ldrb	r3, [r6, #0]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d000      	beq.n	8005ba6 <ld_clust+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005ba6:	f105 0014 	add.w	r0, r5, #20
 8005baa:	f7ff feb5 	bl	8005918 <ld_word>
 8005bae:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8005bb2:	e7f7      	b.n	8005ba4 <ld_clust+0x16>

08005bb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005bbc:	b291      	uxth	r1, r2
 8005bbe:	f104 001a 	add.w	r0, r4, #26
 8005bc2:	f7ff feb9 	bl	8005938 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005bc6:	7833      	ldrb	r3, [r6, #0]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d000      	beq.n	8005bce <st_clust+0x1a>
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005bce:	0c29      	lsrs	r1, r5, #16
 8005bd0:	f104 0014 	add.w	r0, r4, #20
 8005bd4:	f7ff feb0 	bl	8005938 <st_word>
	}
}
 8005bd8:	e7f8      	b.n	8005bcc <st_clust+0x18>

08005bda <get_fileinfo>:
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005bda:	2300      	movs	r3, #0
 8005bdc:	724b      	strb	r3, [r1, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005bde:	69c3      	ldr	r3, [r0, #28]
 8005be0:	b373      	cbz	r3, 8005c40 <get_fileinfo+0x66>
{
 8005be2:	b570      	push	{r4, r5, r6, lr}
 8005be4:	2400      	movs	r4, #0
 8005be6:	4623      	mov	r3, r4
 8005be8:	e005      	b.n	8005bf6 <get_fileinfo+0x1c>
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005bea:	2a09      	cmp	r2, #9
 8005bec:	d00e      	beq.n	8005c0c <get_fileinfo+0x32>
		fno->fname[j++] = c;
 8005bee:	190d      	adds	r5, r1, r4
 8005bf0:	726b      	strb	r3, [r5, #9]
 8005bf2:	3401      	adds	r4, #1
 8005bf4:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8005bf6:	2b0a      	cmp	r3, #10
 8005bf8:	d80d      	bhi.n	8005c16 <get_fileinfo+0x3c>
		c = (TCHAR)dp->dir[i++];
 8005bfa:	6a05      	ldr	r5, [r0, #32]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	5ceb      	ldrb	r3, [r5, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d0f7      	beq.n	8005bf4 <get_fileinfo+0x1a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d1f0      	bne.n	8005bea <get_fileinfo+0x10>
 8005c08:	23e5      	movs	r3, #229	; 0xe5
 8005c0a:	e7ee      	b.n	8005bea <get_fileinfo+0x10>
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005c0c:	190d      	adds	r5, r1, r4
 8005c0e:	262e      	movs	r6, #46	; 0x2e
 8005c10:	726e      	strb	r6, [r5, #9]
 8005c12:	3401      	adds	r4, #1
 8005c14:	e7eb      	b.n	8005bee <get_fileinfo+0x14>
 8005c16:	460e      	mov	r6, r1
 8005c18:	4605      	mov	r5, r0
	}
	fno->fname[j] = 0;
 8005c1a:	440c      	add	r4, r1
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	7263      	strb	r3, [r4, #9]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	7adb      	ldrb	r3, [r3, #11]
 8005c24:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005c26:	6a00      	ldr	r0, [r0, #32]
 8005c28:	301c      	adds	r0, #28
 8005c2a:	f7ff fe7a 	bl	8005922 <ld_dword>
 8005c2e:	6030      	str	r0, [r6, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005c30:	6a28      	ldr	r0, [r5, #32]
 8005c32:	3016      	adds	r0, #22
 8005c34:	f7ff fe75 	bl	8005922 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005c38:	80f0      	strh	r0, [r6, #6]
 8005c3a:	0c00      	lsrs	r0, r0, #16
 8005c3c:	80b0      	strh	r0, [r6, #4]
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	4770      	bx	lr
	...

08005c44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4683      	mov	fp, r0
 8005c4a:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005c4c:	f8d1 8000 	ldr.w	r8, [r1]
 8005c50:	f100 0924 	add.w	r9, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8005c54:	220b      	movs	r2, #11
 8005c56:	2120      	movs	r1, #32
 8005c58:	4648      	mov	r0, r9
 8005c5a:	f7ff fe84 	bl	8005966 <mem_set>
	si = i = 0; ni = 8;
 8005c5e:	2500      	movs	r5, #0
 8005c60:	462b      	mov	r3, r5
 8005c62:	2708      	movs	r7, #8
 8005c64:	e025      	b.n	8005cb2 <create_name+0x6e>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c66:	3601      	adds	r6, #1
 8005c68:	f818 3006 	ldrb.w	r3, [r8, r6]
 8005c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8005c6e:	bf18      	it	ne
 8005c70:	2b2f      	cmpne	r3, #47	; 0x2f
 8005c72:	d0f8      	beq.n	8005c66 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005c74:	4446      	add	r6, r8
 8005c76:	f8ca 6000 	str.w	r6, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	d137      	bne.n	8005cee <create_name+0xaa>
 8005c7e:	2006      	movs	r0, #6
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			i = 8; ni = 11;				/* Goto extension */
 8005c84:	2508      	movs	r5, #8
 8005c86:	270b      	movs	r7, #11
 8005c88:	e012      	b.n	8005cb0 <create_name+0x6c>
		if (c >= 0x80) {				/* Extended character? */
 8005c8a:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005c8e:	d12a      	bne.n	8005ce6 <create_name+0xa2>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005c90:	4621      	mov	r1, r4
 8005c92:	4821      	ldr	r0, [pc, #132]	; (8005d18 <create_name+0xd4>)
 8005c94:	f7ff fe7b 	bl	800598e <chk_chr>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d13a      	bne.n	8005d12 <create_name+0xce>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005c9c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b19      	cmp	r3, #25
 8005ca4:	d801      	bhi.n	8005caa <create_name+0x66>
 8005ca6:	3c20      	subs	r4, #32
 8005ca8:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8005caa:	f809 4005 	strb.w	r4, [r9, r5]
 8005cae:	3501      	adds	r5, #1
 8005cb0:	4633      	mov	r3, r6
		c = (BYTE)p[si++];
 8005cb2:	1c5e      	adds	r6, r3, #1
 8005cb4:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005cb8:	2c20      	cmp	r4, #32
 8005cba:	d9db      	bls.n	8005c74 <create_name+0x30>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005cbc:	2c5c      	cmp	r4, #92	; 0x5c
 8005cbe:	bf18      	it	ne
 8005cc0:	2c2f      	cmpne	r4, #47	; 0x2f
 8005cc2:	d0d1      	beq.n	8005c68 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005cc4:	2c2e      	cmp	r4, #46	; 0x2e
 8005cc6:	bf18      	it	ne
 8005cc8:	42af      	cmpne	r7, r5
 8005cca:	d8de      	bhi.n	8005c8a <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ccc:	3c2e      	subs	r4, #46	; 0x2e
 8005cce:	bf18      	it	ne
 8005cd0:	2401      	movne	r4, #1
 8005cd2:	2f0b      	cmp	r7, #11
 8005cd4:	bf14      	ite	ne
 8005cd6:	4627      	movne	r7, r4
 8005cd8:	f044 0701 	orreq.w	r7, r4, #1
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	d0d1      	beq.n	8005c84 <create_name+0x40>
 8005ce0:	2006      	movs	r0, #6
 8005ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ce6:	3c80      	subs	r4, #128	; 0x80
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <create_name+0xd8>)
 8005cea:	5d1c      	ldrb	r4, [r3, r4]
 8005cec:	e7d0      	b.n	8005c90 <create_name+0x4c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005cee:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 8005cf2:	2be5      	cmp	r3, #229	; 0xe5
 8005cf4:	d007      	beq.n	8005d06 <create_name+0xc2>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005cf6:	2c20      	cmp	r4, #32
 8005cf8:	d809      	bhi.n	8005d0e <create_name+0xca>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
	return FR_OK;
 8005d00:	2000      	movs	r0, #0
 8005d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d06:	2305      	movs	r3, #5
 8005d08:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8005d0c:	e7f3      	b.n	8005cf6 <create_name+0xb2>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e7f4      	b.n	8005cfc <create_name+0xb8>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005d12:	2006      	movs	r0, #6
 8005d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d18:	08026420 	.word	0x08026420
 8005d1c:	080263a0 	.word	0x080263a0

08005d20 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d20:	6801      	ldr	r1, [r0, #0]
 8005d22:	b109      	cbz	r1, 8005d28 <get_ldnumber+0x8>
 8005d24:	460a      	mov	r2, r1
 8005d26:	e003      	b.n	8005d30 <get_ldnumber+0x10>
	int vol = -1;
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2c:	e008      	b.n	8005d40 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d2e:	3201      	adds	r2, #1
 8005d30:	7813      	ldrb	r3, [r2, #0]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	bf18      	it	ne
 8005d36:	2b20      	cmpne	r3, #32
 8005d38:	d8f9      	bhi.n	8005d2e <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8005d3c:	d002      	beq.n	8005d44 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d3e:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	4770      	bx	lr
{
 8005d44:	b410      	push	{r4}
			i = *tp++ - '0';
 8005d46:	1c4c      	adds	r4, r1, #1
 8005d48:	780b      	ldrb	r3, [r1, #0]
 8005d4a:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	bf98      	it	ls
 8005d50:	42a2      	cmpls	r2, r4
 8005d52:	d106      	bne.n	8005d62 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d54:	b943      	cbnz	r3, 8005d68 <get_ldnumber+0x48>
					*path = ++tt;
 8005d56:	3201      	adds	r2, #1
 8005d58:	6002      	str	r2, [r0, #0]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d60:	4770      	bx	lr
	int vol = -1;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	e7f8      	b.n	8005d5a <get_ldnumber+0x3a>
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	e7f5      	b.n	8005d5a <get_ldnumber+0x3a>

08005d6e <lock_fs>:
{
 8005d6e:	b508      	push	{r3, lr}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005d70:	b140      	cbz	r0, 8005d84 <lock_fs+0x16>
 8005d72:	68c0      	ldr	r0, [r0, #12]
 8005d74:	f001 fd3c 	bl	80077f0 <ff_req_grant>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	b908      	cbnz	r0, 8005d80 <lock_fs+0x12>
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd08      	pop	{r3, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e7fb      	b.n	8005d7c <lock_fs+0xe>
 8005d84:	2300      	movs	r3, #0
 8005d86:	e7f9      	b.n	8005d7c <lock_fs+0xe>

08005d88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	460c      	mov	r4, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8005d8c:	b120      	cbz	r0, 8005d98 <validate+0x10>
 8005d8e:	4605      	mov	r5, r0
 8005d90:	6803      	ldr	r3, [r0, #0]
 8005d92:	b10b      	cbz	r3, 8005d98 <validate+0x10>
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	b91a      	cbnz	r2, 8005da0 <validate+0x18>
		*fs = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6023      	str	r3, [r4, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8005d9c:	2009      	movs	r0, #9
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8005da0:	88d9      	ldrh	r1, [r3, #6]
 8005da2:	8882      	ldrh	r2, [r0, #4]
 8005da4:	4291      	cmp	r1, r2
 8005da6:	d1f7      	bne.n	8005d98 <validate+0x10>
 8005da8:	7858      	ldrb	r0, [r3, #1]
 8005daa:	f7ff fd71 	bl	8005890 <disk_status>
 8005dae:	f010 0f01 	tst.w	r0, #1
 8005db2:	d1f1      	bne.n	8005d98 <validate+0x10>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	6023      	str	r3, [r4, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 8005db8:	6828      	ldr	r0, [r5, #0]
 8005dba:	f7ff ffd8 	bl	8005d6e <lock_fs>
 8005dbe:	b908      	cbnz	r0, 8005dc4 <validate+0x3c>
 8005dc0:	200f      	movs	r0, #15
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
		res = FR_OK;			/* Valid object */
 8005dc4:	2000      	movs	r0, #0
	}
	return res;
}
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}

08005dc8 <sync_window>:
{
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005dca:	78c3      	ldrb	r3, [r0, #3]
 8005dcc:	b90b      	cbnz	r3, 8005dd2 <sync_window+0xa>
	FRESULT res = FR_OK;
 8005dce:	2000      	movs	r0, #0
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8005dd4:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005dd6:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4639      	mov	r1, r7
 8005de0:	7840      	ldrb	r0, [r0, #1]
 8005de2:	f7ff fd81 	bl	80058e8 <disk_write>
 8005de6:	b9a8      	cbnz	r0, 8005e14 <sync_window+0x4c>
			fs->wflag = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dee:	1af3      	subs	r3, r6, r3
 8005df0:	69e2      	ldr	r2, [r4, #28]
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d210      	bcs.n	8005e18 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005df6:	78a5      	ldrb	r5, [r4, #2]
 8005df8:	e008      	b.n	8005e0c <sync_window+0x44>
					wsect += fs->fsize;
 8005dfa:	69e3      	ldr	r3, [r4, #28]
 8005dfc:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4632      	mov	r2, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	7860      	ldrb	r0, [r4, #1]
 8005e06:	f7ff fd6f 	bl	80058e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e0a:	3d01      	subs	r5, #1
 8005e0c:	2d01      	cmp	r5, #1
 8005e0e:	d8f4      	bhi.n	8005dfa <sync_window+0x32>
	FRESULT res = FR_OK;
 8005e10:	2000      	movs	r0, #0
 8005e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 8005e14:	2001      	movs	r0, #1
 8005e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 8005e18:	2000      	movs	r0, #0
}
 8005e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e1c <move_window>:
{
 8005e1c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d014      	beq.n	8005e4e <move_window+0x32>
 8005e24:	4604      	mov	r4, r0
 8005e26:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8005e28:	f7ff ffce 	bl	8005dc8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	b108      	cbz	r0, 8005e34 <move_window+0x18>
}
 8005e30:	4630      	mov	r0, r6
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e34:	2301      	movs	r3, #1
 8005e36:	462a      	mov	r2, r5
 8005e38:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005e3c:	7860      	ldrb	r0, [r4, #1]
 8005e3e:	f7ff fd47 	bl	80058d0 <disk_read>
 8005e42:	b110      	cbz	r0, 8005e4a <move_window+0x2e>
				res = FR_DISK_ERR;
 8005e44:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e46:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8005e4a:	6325      	str	r5, [r4, #48]	; 0x30
 8005e4c:	e7f0      	b.n	8005e30 <move_window+0x14>
	FRESULT res = FR_OK;
 8005e4e:	2600      	movs	r6, #0
 8005e50:	e7ee      	b.n	8005e30 <move_window+0x14>
	...

08005e54 <check_fs>:
{
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	70c3      	strb	r3, [r0, #3]
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e62:	f7ff ffdb 	bl	8005e1c <move_window>
 8005e66:	b108      	cbz	r0, 8005e6c <check_fs+0x18>
 8005e68:	2004      	movs	r0, #4
 8005e6a:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e6c:	f204 2032 	addw	r0, r4, #562	; 0x232
 8005e70:	f7ff fd52 	bl	8005918 <ld_word>
 8005e74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	d001      	beq.n	8005e80 <check_fs+0x2c>
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	bd10      	pop	{r4, pc}
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005e84:	2be9      	cmp	r3, #233	; 0xe9
 8005e86:	d007      	beq.n	8005e98 <check_fs+0x44>
 8005e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005e8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <check_fs+0x70>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d001      	beq.n	8005e98 <check_fs+0x44>
	return 2;
 8005e94:	2002      	movs	r0, #2
 8005e96:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e98:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8005e9c:	f7ff fd41 	bl	8005922 <ld_dword>
 8005ea0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <check_fs+0x74>)
 8005ea6:	4298      	cmp	r0, r3
 8005ea8:	d00a      	beq.n	8005ec0 <check_fs+0x6c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005eaa:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8005eae:	f7ff fd38 	bl	8005922 <ld_dword>
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <check_fs+0x78>)
 8005eb4:	4298      	cmp	r0, r3
 8005eb6:	d001      	beq.n	8005ebc <check_fs+0x68>
	return 2;
 8005eb8:	2002      	movs	r0, #2
}
 8005eba:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	009000eb 	.word	0x009000eb
 8005ec8:	00544146 	.word	0x00544146
 8005ecc:	33544146 	.word	0x33544146

08005ed0 <find_volume>:
{
 8005ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4617      	mov	r7, r2
	*rfs = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8005ede:	f7ff ff1f 	bl	8005d20 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ee2:	1e06      	subs	r6, r0, #0
 8005ee4:	f2c0 813c 	blt.w	8006160 <find_volume+0x290>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ee8:	4bac      	ldr	r3, [pc, #688]	; (800619c <find_volume+0x2cc>)
 8005eea:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	f000 813a 	beq.w	8006168 <find_volume+0x298>
	ENTER_FF(fs);						/* Lock the volume */
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7ff ff3a 	bl	8005d6e <lock_fs>
 8005efa:	b908      	cbnz	r0, 8005f00 <find_volume+0x30>
 8005efc:	200f      	movs	r0, #15
 8005efe:	e130      	b.n	8006162 <find_volume+0x292>
	*rfs = fs;							/* Return pointer to the file system object */
 8005f00:	6025      	str	r5, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f02:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f06:	782b      	ldrb	r3, [r5, #0]
 8005f08:	b17b      	cbz	r3, 8005f2a <find_volume+0x5a>
		stat = disk_status(fs->drv);
 8005f0a:	7868      	ldrb	r0, [r5, #1]
 8005f0c:	f7ff fcc0 	bl	8005890 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f10:	f010 0f01 	tst.w	r0, #1
 8005f14:	d109      	bne.n	8005f2a <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f16:	2f00      	cmp	r7, #0
 8005f18:	f000 8128 	beq.w	800616c <find_volume+0x29c>
 8005f1c:	f010 0f04 	tst.w	r0, #4
 8005f20:	d001      	beq.n	8005f26 <find_volume+0x56>
				return FR_WRITE_PROTECTED;
 8005f22:	200a      	movs	r0, #10
 8005f24:	e11d      	b.n	8006162 <find_volume+0x292>
			return FR_OK;				/* The file system object is valid */
 8005f26:	2000      	movs	r0, #0
 8005f28:	e11b      	b.n	8006162 <find_volume+0x292>
	fs->fs_type = 0;					/* Clear the file system object */
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f2e:	b2f0      	uxtb	r0, r6
 8005f30:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f32:	f7ff fcb9 	bl	80058a8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f36:	f010 0f01 	tst.w	r0, #1
 8005f3a:	d001      	beq.n	8005f40 <find_volume+0x70>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	e110      	b.n	8006162 <find_volume+0x292>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f40:	b127      	cbz	r7, 8005f4c <find_volume+0x7c>
 8005f42:	f010 0f04 	tst.w	r0, #4
 8005f46:	d001      	beq.n	8005f4c <find_volume+0x7c>
		return FR_WRITE_PROTECTED;
 8005f48:	200a      	movs	r0, #10
 8005f4a:	e10a      	b.n	8006162 <find_volume+0x292>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f7ff ff80 	bl	8005e54 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f54:	2802      	cmp	r0, #2
 8005f56:	d01d      	beq.n	8005f94 <find_volume+0xc4>
	bsect = 0;
 8005f58:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f5a:	2804      	cmp	r0, #4
 8005f5c:	f000 8108 	beq.w	8006170 <find_volume+0x2a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f60:	2801      	cmp	r0, #1
 8005f62:	d92c      	bls.n	8005fbe <find_volume+0xee>
 8005f64:	200d      	movs	r0, #13
 8005f66:	e0fc      	b.n	8006162 <find_volume+0x292>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f68:	2000      	movs	r0, #0
 8005f6a:	ab04      	add	r3, sp, #16
 8005f6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f70:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f74:	3401      	adds	r4, #1
 8005f76:	2c03      	cmp	r4, #3
 8005f78:	d80e      	bhi.n	8005f98 <find_volume+0xc8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f7a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005f7e:	0123      	lsls	r3, r4, #4
 8005f80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f84:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f86:	7903      	ldrb	r3, [r0, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ed      	beq.n	8005f68 <find_volume+0x98>
 8005f8c:	3008      	adds	r0, #8
 8005f8e:	f7ff fcc8 	bl	8005922 <ld_dword>
 8005f92:	e7ea      	b.n	8005f6a <find_volume+0x9a>
 8005f94:	2400      	movs	r4, #0
 8005f96:	e7ee      	b.n	8005f76 <find_volume+0xa6>
 8005f98:	2400      	movs	r4, #0
			bsect = br[i];
 8005f9a:	ab04      	add	r3, sp, #16
 8005f9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005fa0:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fa4:	b936      	cbnz	r6, 8005fb4 <find_volume+0xe4>
 8005fa6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fa8:	2801      	cmp	r0, #1
 8005faa:	d9d6      	bls.n	8005f5a <find_volume+0x8a>
 8005fac:	3401      	adds	r4, #1
 8005fae:	2c03      	cmp	r4, #3
 8005fb0:	d9f3      	bls.n	8005f9a <find_volume+0xca>
 8005fb2:	e7d2      	b.n	8005f5a <find_volume+0x8a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff ff4c 	bl	8005e54 <check_fs>
 8005fbc:	e7f4      	b.n	8005fa8 <find_volume+0xd8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fbe:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8005fc2:	f7ff fca9 	bl	8005918 <ld_word>
 8005fc6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005fca:	d001      	beq.n	8005fd0 <find_volume+0x100>
 8005fcc:	200d      	movs	r0, #13
 8005fce:	e0c8      	b.n	8006162 <find_volume+0x292>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fd0:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8005fd4:	f7ff fca0 	bl	8005918 <ld_word>
 8005fd8:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005fda:	b920      	cbnz	r0, 8005fe6 <find_volume+0x116>
 8005fdc:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8005fe0:	f7ff fc9f 	bl	8005922 <ld_dword>
 8005fe4:	4680      	mov	r8, r0
		fs->fsize = fasize;
 8005fe6:	f8c5 801c 	str.w	r8, [r5, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fea:	f895 9044 	ldrb.w	r9, [r5, #68]	; 0x44
 8005fee:	f885 9002 	strb.w	r9, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ff2:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d901      	bls.n	8006000 <find_volume+0x130>
 8005ffc:	200d      	movs	r0, #13
 8005ffe:	e0b0      	b.n	8006162 <find_volume+0x292>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006000:	fb09 f908 	mul.w	r9, r9, r8
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006004:	f895 7041 	ldrb.w	r7, [r5, #65]	; 0x41
 8006008:	816f      	strh	r7, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800600a:	2f00      	cmp	r7, #0
 800600c:	f000 80b2 	beq.w	8006174 <find_volume+0x2a4>
 8006010:	1e7b      	subs	r3, r7, #1
 8006012:	421f      	tst	r7, r3
 8006014:	f040 80b0 	bne.w	8006178 <find_volume+0x2a8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006018:	f105 0045 	add.w	r0, r5, #69	; 0x45
 800601c:	f7ff fc7c 	bl	8005918 <ld_word>
 8006020:	4682      	mov	sl, r0
 8006022:	8128      	strh	r0, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006024:	f010 0f0f 	tst.w	r0, #15
 8006028:	f040 80a8 	bne.w	800617c <find_volume+0x2ac>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800602c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8006030:	f7ff fc72 	bl	8005918 <ld_word>
 8006034:	4604      	mov	r4, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006036:	b920      	cbnz	r0, 8006042 <find_volume+0x172>
 8006038:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800603c:	f7ff fc71 	bl	8005922 <ld_dword>
 8006040:	4604      	mov	r4, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006042:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8006046:	f7ff fc67 	bl	8005918 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800604a:	4602      	mov	r2, r0
 800604c:	2800      	cmp	r0, #0
 800604e:	f000 8097 	beq.w	8006180 <find_volume+0x2b0>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006052:	eb09 0300 	add.w	r3, r9, r0
 8006056:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800605a:	429c      	cmp	r4, r3
 800605c:	f0c0 8092 	bcc.w	8006184 <find_volume+0x2b4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006060:	1ae4      	subs	r4, r4, r3
 8006062:	fbb4 f4f7 	udiv	r4, r4, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006066:	2c00      	cmp	r4, #0
 8006068:	f000 808e 	beq.w	8006188 <find_volume+0x2b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800606c:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8006070:	428c      	cmp	r4, r1
 8006072:	d963      	bls.n	800613c <find_volume+0x26c>
		fmt = FS_FAT32;
 8006074:	2703      	movs	r7, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006076:	f640 71f5 	movw	r1, #4085	; 0xff5
 800607a:	428c      	cmp	r4, r1
 800607c:	d800      	bhi.n	8006080 <find_volume+0x1b0>
 800607e:	2701      	movs	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006080:	3402      	adds	r4, #2
 8006082:	61ac      	str	r4, [r5, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006084:	622e      	str	r6, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006086:	4432      	add	r2, r6
 8006088:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800608a:	4433      	add	r3, r6
 800608c:	62eb      	str	r3, [r5, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800608e:	2f03      	cmp	r7, #3
 8006090:	d156      	bne.n	8006140 <find_volume+0x270>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006092:	f105 005e 	add.w	r0, r5, #94	; 0x5e
 8006096:	f7ff fc3f 	bl	8005918 <ld_word>
 800609a:	2800      	cmp	r0, #0
 800609c:	d176      	bne.n	800618c <find_volume+0x2bc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800609e:	f1ba 0f00 	cmp.w	sl, #0
 80060a2:	d175      	bne.n	8006190 <find_volume+0x2c0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80060a4:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80060a8:	f7ff fc3b 	bl	8005922 <ld_dword>
 80060ac:	62a8      	str	r0, [r5, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80060ae:	00a4      	lsls	r4, r4, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80060b0:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
 80060b4:	ebb8 2f54 	cmp.w	r8, r4, lsr #9
 80060b8:	d36e      	bcc.n	8006198 <find_volume+0x2c8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	616b      	str	r3, [r5, #20]
 80060c0:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	712b      	strb	r3, [r5, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80060c6:	2f03      	cmp	r7, #3
 80060c8:	d12c      	bne.n	8006124 <find_volume+0x254>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80060ca:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80060ce:	f7ff fc23 	bl	8005918 <ld_word>
 80060d2:	2801      	cmp	r0, #1
 80060d4:	d126      	bne.n	8006124 <find_volume+0x254>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060d6:	1c71      	adds	r1, r6, #1
 80060d8:	4628      	mov	r0, r5
 80060da:	f7ff fe9f 	bl	8005e1c <move_window>
 80060de:	bb08      	cbnz	r0, 8006124 <find_volume+0x254>
			fs->fsi_flag = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	712b      	strb	r3, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060e4:	f205 2032 	addw	r0, r5, #562	; 0x232
 80060e8:	f7ff fc16 	bl	8005918 <ld_word>
 80060ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060f0:	4298      	cmp	r0, r3
 80060f2:	d117      	bne.n	8006124 <find_volume+0x254>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060f4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80060f8:	f7ff fc13 	bl	8005922 <ld_dword>
 80060fc:	4b28      	ldr	r3, [pc, #160]	; (80061a0 <find_volume+0x2d0>)
 80060fe:	4298      	cmp	r0, r3
 8006100:	d110      	bne.n	8006124 <find_volume+0x254>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006102:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8006106:	f7ff fc0c 	bl	8005922 <ld_dword>
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <find_volume+0x2d4>)
 800610c:	4298      	cmp	r0, r3
 800610e:	d109      	bne.n	8006124 <find_volume+0x254>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006110:	f505 7007 	add.w	r0, r5, #540	; 0x21c
 8006114:	f7ff fc05 	bl	8005922 <ld_dword>
 8006118:	6168      	str	r0, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800611a:	f505 7008 	add.w	r0, r5, #544	; 0x220
 800611e:	f7ff fc00 	bl	8005922 <ld_dword>
 8006122:	6128      	str	r0, [r5, #16]
	fs->fs_type = fmt;		/* FAT sub-type */
 8006124:	702f      	strb	r7, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006126:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <find_volume+0x2d8>)
 8006128:	8813      	ldrh	r3, [r2, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
 8006130:	80eb      	strh	r3, [r5, #6]
	clear_lock(fs);
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff fcf0 	bl	8005b18 <clear_lock>
	return FR_OK;
 8006138:	2000      	movs	r0, #0
 800613a:	e012      	b.n	8006162 <find_volume+0x292>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800613c:	2702      	movs	r7, #2
 800613e:	e79a      	b.n	8006076 <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006140:	f1ba 0f00 	cmp.w	sl, #0
 8006144:	d026      	beq.n	8006194 <find_volume+0x2c4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006146:	444a      	add	r2, r9
 8006148:	62aa      	str	r2, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800614a:	2f02      	cmp	r7, #2
 800614c:	d101      	bne.n	8006152 <find_volume+0x282>
 800614e:	0064      	lsls	r4, r4, #1
 8006150:	e7ae      	b.n	80060b0 <find_volume+0x1e0>
 8006152:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006156:	f004 0401 	and.w	r4, r4, #1
 800615a:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 800615e:	e7a7      	b.n	80060b0 <find_volume+0x1e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006160:	200b      	movs	r0, #11
}
 8006162:	b004      	add	sp, #16
 8006164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006168:	200c      	movs	r0, #12
 800616a:	e7fa      	b.n	8006162 <find_volume+0x292>
			return FR_OK;				/* The file system object is valid */
 800616c:	2000      	movs	r0, #0
 800616e:	e7f8      	b.n	8006162 <find_volume+0x292>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006170:	2001      	movs	r0, #1
 8006172:	e7f6      	b.n	8006162 <find_volume+0x292>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006174:	200d      	movs	r0, #13
 8006176:	e7f4      	b.n	8006162 <find_volume+0x292>
 8006178:	200d      	movs	r0, #13
 800617a:	e7f2      	b.n	8006162 <find_volume+0x292>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800617c:	200d      	movs	r0, #13
 800617e:	e7f0      	b.n	8006162 <find_volume+0x292>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006180:	200d      	movs	r0, #13
 8006182:	e7ee      	b.n	8006162 <find_volume+0x292>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006184:	200d      	movs	r0, #13
 8006186:	e7ec      	b.n	8006162 <find_volume+0x292>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006188:	200d      	movs	r0, #13
 800618a:	e7ea      	b.n	8006162 <find_volume+0x292>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800618c:	200d      	movs	r0, #13
 800618e:	e7e8      	b.n	8006162 <find_volume+0x292>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006190:	200d      	movs	r0, #13
 8006192:	e7e6      	b.n	8006162 <find_volume+0x292>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006194:	200d      	movs	r0, #13
 8006196:	e7e4      	b.n	8006162 <find_volume+0x292>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006198:	200d      	movs	r0, #13
 800619a:	e7e2      	b.n	8006162 <find_volume+0x292>
 800619c:	2000073c 	.word	0x2000073c
 80061a0:	41615252 	.word	0x41615252
 80061a4:	61417272 	.word	0x61417272
 80061a8:	20000760 	.word	0x20000760

080061ac <put_fat>:
{
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061b0:	2901      	cmp	r1, #1
 80061b2:	d97c      	bls.n	80062ae <put_fat+0x102>
 80061b4:	6983      	ldr	r3, [r0, #24]
 80061b6:	4299      	cmp	r1, r3
 80061b8:	d301      	bcc.n	80061be <put_fat+0x12>
	FRESULT res = FR_INT_ERR;
 80061ba:	2502      	movs	r5, #2
 80061bc:	e078      	b.n	80062b0 <put_fat+0x104>
 80061be:	4617      	mov	r7, r2
 80061c0:	460c      	mov	r4, r1
 80061c2:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 80061c4:	7803      	ldrb	r3, [r0, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d043      	beq.n	8006252 <put_fat+0xa6>
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d054      	beq.n	8006278 <put_fat+0xcc>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d001      	beq.n	80061d6 <put_fat+0x2a>
	FRESULT res = FR_INT_ERR;
 80061d2:	2502      	movs	r5, #2
 80061d4:	e06c      	b.n	80062b0 <put_fat+0x104>
			bc = (UINT)clst; bc += bc / 2;
 80061d6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061da:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80061dc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80061e0:	f7ff fe1c 	bl	8005e1c <move_window>
			if (res != FR_OK) break;
 80061e4:	4605      	mov	r5, r0
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d162      	bne.n	80062b0 <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
 80061ea:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 80061ee:	f108 0901 	add.w	r9, r8, #1
 80061f2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061f6:	f014 0401 	ands.w	r4, r4, #1
 80061fa:	d01f      	beq.n	800623c <put_fat+0x90>
 80061fc:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	013a      	lsls	r2, r7, #4
 8006206:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800620a:	4313      	orrs	r3, r2
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8006212:	2301      	movs	r3, #1
 8006214:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006216:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8006218:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff fdfd 	bl	8005e1c <move_window>
			if (res != FR_OK) break;
 8006222:	4605      	mov	r5, r0
 8006224:	2800      	cmp	r0, #0
 8006226:	d143      	bne.n	80062b0 <put_fat+0x104>
			p = fs->win + bc % SS(fs);
 8006228:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800622c:	b144      	cbz	r4, 8006240 <put_fat+0x94>
 800622e:	f3c7 1207 	ubfx	r2, r7, #4, #8
 8006232:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8006236:	2301      	movs	r3, #1
 8006238:	70f3      	strb	r3, [r6, #3]
			break;
 800623a:	e039      	b.n	80062b0 <put_fat+0x104>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800623c:	b2fb      	uxtb	r3, r7
 800623e:	e7e6      	b.n	800620e <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006240:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8006244:	f022 020f 	bic.w	r2, r2, #15
 8006248:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800624c:	433a      	orrs	r2, r7
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	e7ef      	b.n	8006232 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006252:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006254:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006258:	f7ff fde0 	bl	8005e1c <move_window>
			if (res != FR_OK) break;
 800625c:	4605      	mov	r5, r0
 800625e:	bb38      	cbnz	r0, 80062b0 <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006260:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8006264:	0063      	lsls	r3, r4, #1
 8006266:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800626a:	b2b9      	uxth	r1, r7
 800626c:	4418      	add	r0, r3
 800626e:	f7ff fb63 	bl	8005938 <st_word>
			fs->wflag = 1;
 8006272:	2301      	movs	r3, #1
 8006274:	70f3      	strb	r3, [r6, #3]
			break;
 8006276:	e01b      	b.n	80062b0 <put_fat+0x104>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006278:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800627a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800627e:	f7ff fdcd 	bl	8005e1c <move_window>
			if (res != FR_OK) break;
 8006282:	4605      	mov	r5, r0
 8006284:	b9a0      	cbnz	r0, 80062b0 <put_fat+0x104>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006286:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800628a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800628e:	00a1      	lsls	r1, r4, #2
 8006290:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8006294:	185c      	adds	r4, r3, r1
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff fb43 	bl	8005922 <ld_dword>
 800629c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062a0:	4339      	orrs	r1, r7
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7ff fb4c 	bl	8005940 <st_dword>
			fs->wflag = 1;
 80062a8:	2301      	movs	r3, #1
 80062aa:	70f3      	strb	r3, [r6, #3]
			break;
 80062ac:	e000      	b.n	80062b0 <put_fat+0x104>
	FRESULT res = FR_INT_ERR;
 80062ae:	2502      	movs	r5, #2
}
 80062b0:	4628      	mov	r0, r5
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062b6 <get_fat>:
{
 80062b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80062b8:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80062ba:	2901      	cmp	r1, #1
 80062bc:	d95e      	bls.n	800637c <get_fat+0xc6>
 80062be:	69b3      	ldr	r3, [r6, #24]
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d25d      	bcs.n	8006380 <get_fat+0xca>
 80062c4:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 80062c6:	7833      	ldrb	r3, [r6, #0]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d030      	beq.n	800632e <get_fat+0x78>
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d041      	beq.n	8006354 <get_fat+0x9e>
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d001      	beq.n	80062d8 <get_fat+0x22>
			val = 1;	/* Internal error */
 80062d4:	2001      	movs	r0, #1
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
 80062d8:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062dc:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80062de:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff fd9a 	bl	8005e1c <move_window>
 80062e8:	b110      	cbz	r0, 80062f0 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80062f0:	1c6f      	adds	r7, r5, #1
 80062f2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80062f6:	4435      	add	r5, r6
 80062f8:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062fc:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80062fe:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff fd8a 	bl	8005e1c <move_window>
 8006308:	b110      	cbz	r0, 8006310 <get_fat+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800630a:	f04f 30ff 	mov.w	r0, #4294967295
 800630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
 8006310:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8006314:	4433      	add	r3, r6
 8006316:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 800631a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800631e:	f014 0f01 	tst.w	r4, #1
 8006322:	d001      	beq.n	8006328 <get_fat+0x72>
 8006324:	0900      	lsrs	r0, r0, #4
 8006326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006328:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800632e:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8006330:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff fd71 	bl	8005e1c <move_window>
 800633a:	b110      	cbz	r0, 8006342 <get_fat+0x8c>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006342:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8006346:	0061      	lsls	r1, r4, #1
 8006348:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 800634c:	4408      	add	r0, r1
 800634e:	f7ff fae3 	bl	8005918 <ld_word>
			break;
 8006352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006354:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8006356:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800635a:	4630      	mov	r0, r6
 800635c:	f7ff fd5e 	bl	8005e1c <move_window>
 8006360:	b110      	cbz	r0, 8006368 <get_fat+0xb2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006368:	3634      	adds	r6, #52	; 0x34
 800636a:	00a1      	lsls	r1, r4, #2
 800636c:	f401 70fe 	and.w	r0, r1, #508	; 0x1fc
 8006370:	4430      	add	r0, r6
 8006372:	f7ff fad6 	bl	8005922 <ld_dword>
 8006376:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800637c:	2001      	movs	r0, #1
 800637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006380:	2001      	movs	r0, #1
 8006382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006384 <dir_sdi>:
{
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8006388:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800638a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800638e:	d302      	bcc.n	8006396 <dir_sdi+0x12>
		return FR_INT_ERR;
 8006390:	2002      	movs	r0, #2
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006396:	4606      	mov	r6, r0
 8006398:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800639a:	f011 0f1f 	tst.w	r1, #31
 800639e:	d002      	beq.n	80063a6 <dir_sdi+0x22>
		return FR_INT_ERR;
 80063a0:	2002      	movs	r0, #2
 80063a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dp->dptr = ofs;				/* Set current offset */
 80063a6:	6171      	str	r1, [r6, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80063a8:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80063aa:	b91d      	cbnz	r5, 80063b4 <dir_sdi+0x30>
 80063ac:	783b      	ldrb	r3, [r7, #0]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d900      	bls.n	80063b4 <dir_sdi+0x30>
		clst = fs->dirbase;
 80063b2:	6abd      	ldr	r5, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80063b4:	b975      	cbnz	r5, 80063d4 <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80063b6:	893b      	ldrh	r3, [r7, #8]
 80063b8:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80063bc:	d802      	bhi.n	80063c4 <dir_sdi+0x40>
 80063be:	2002      	movs	r0, #2
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect = fs->dirbase;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80063c8:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80063ca:	69f3      	ldr	r3, [r6, #28]
 80063cc:	bb0b      	cbnz	r3, 8006412 <dir_sdi+0x8e>
 80063ce:	2002      	movs	r0, #2
}
 80063d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80063d4:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 80063d8:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80063dc:	e001      	b.n	80063e2 <dir_sdi+0x5e>
			ofs -= csz;
 80063de:	eba4 0408 	sub.w	r4, r4, r8
		while (ofs >= csz) {				/* Follow cluster chain */
 80063e2:	4544      	cmp	r4, r8
 80063e4:	d30f      	bcc.n	8006406 <dir_sdi+0x82>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ff64 	bl	80062b6 <get_fat>
 80063ee:	4605      	mov	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063f4:	d018      	beq.n	8006428 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80063f6:	2801      	cmp	r0, #1
 80063f8:	d919      	bls.n	800642e <dir_sdi+0xaa>
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4298      	cmp	r0, r3
 80063fe:	d3ee      	bcc.n	80063de <dir_sdi+0x5a>
 8006400:	2002      	movs	r0, #2
 8006402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect = clust2sect(fs, clst);
 8006406:	4629      	mov	r1, r5
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff fba3 	bl	8005b54 <clust2sect>
 800640e:	61f0      	str	r0, [r6, #28]
 8006410:	e7da      	b.n	80063c8 <dir_sdi+0x44>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006412:	eb03 2354 	add.w	r3, r3, r4, lsr #9
 8006416:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006418:	3734      	adds	r7, #52	; 0x34
 800641a:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800641e:	443c      	add	r4, r7
 8006420:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8006422:	2000      	movs	r0, #0
 8006424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006428:	2001      	movs	r0, #1
 800642a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800642e:	2002      	movs	r0, #2
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006434 <create_chain>:
{
 8006434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006438:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 800643a:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800643c:	4688      	mov	r8, r1
 800643e:	b931      	cbnz	r1, 800644e <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006440:	6935      	ldr	r5, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006442:	b18d      	cbz	r5, 8006468 <create_chain+0x34>
 8006444:	69b3      	ldr	r3, [r6, #24]
 8006446:	429d      	cmp	r5, r3
 8006448:	d30f      	bcc.n	800646a <create_chain+0x36>
 800644a:	2501      	movs	r5, #1
 800644c:	e00d      	b.n	800646a <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800644e:	f7ff ff32 	bl	80062b6 <get_fat>
 8006452:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006454:	2801      	cmp	r0, #1
 8006456:	d94b      	bls.n	80064f0 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006458:	f1b0 3fff 	cmp.w	r0, #4294967295
 800645c:	d04d      	beq.n	80064fa <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800645e:	69b2      	ldr	r2, [r6, #24]
 8006460:	4290      	cmp	r0, r2
 8006462:	d34a      	bcc.n	80064fa <create_chain+0xc6>
		scl = clst;
 8006464:	4645      	mov	r5, r8
 8006466:	e000      	b.n	800646a <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006468:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 800646a:	462c      	mov	r4, r5
 800646c:	e00c      	b.n	8006488 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800646e:	4621      	mov	r1, r4
 8006470:	4638      	mov	r0, r7
 8006472:	f7ff ff20 	bl	80062b6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8006476:	4603      	mov	r3, r0
 8006478:	b170      	cbz	r0, 8006498 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800647a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800647e:	bf18      	it	ne
 8006480:	2801      	cmpne	r0, #1
 8006482:	d03a      	beq.n	80064fa <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8006484:	42ac      	cmp	r4, r5
 8006486:	d037      	beq.n	80064f8 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8006488:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800648a:	69b3      	ldr	r3, [r6, #24]
 800648c:	429c      	cmp	r4, r3
 800648e:	d3ee      	bcc.n	800646e <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8006490:	2d01      	cmp	r5, #1
 8006492:	d92f      	bls.n	80064f4 <create_chain+0xc0>
				ncl = 2;
 8006494:	2402      	movs	r4, #2
 8006496:	e7ea      	b.n	800646e <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	4621      	mov	r1, r4
 800649e:	4630      	mov	r0, r6
 80064a0:	f7ff fe84 	bl	80061ac <put_fat>
		if (res == FR_OK && clst != 0) {
 80064a4:	4603      	mov	r3, r0
 80064a6:	fab0 f080 	clz	r0, r0
 80064aa:	0940      	lsrs	r0, r0, #5
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	bf08      	it	eq
 80064b2:	2000      	moveq	r0, #0
 80064b4:	b970      	cbnz	r0, 80064d4 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064b6:	b9a3      	cbnz	r3, 80064e2 <create_chain+0xae>
		fs->last_clst = ncl;
 80064b8:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064ba:	6972      	ldr	r2, [r6, #20]
 80064bc:	69b3      	ldr	r3, [r6, #24]
 80064be:	3b02      	subs	r3, #2
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d801      	bhi.n	80064c8 <create_chain+0x94>
 80064c4:	3a01      	subs	r2, #1
 80064c6:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 80064c8:	7933      	ldrb	r3, [r6, #4]
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	7133      	strb	r3, [r6, #4]
 80064d0:	4623      	mov	r3, r4
 80064d2:	e012      	b.n	80064fa <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064d4:	4622      	mov	r2, r4
 80064d6:	4641      	mov	r1, r8
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff fe67 	bl	80061ac <put_fat>
 80064de:	4603      	mov	r3, r0
 80064e0:	e7e9      	b.n	80064b6 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <create_chain+0xb6>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e007      	b.n	80064fa <create_chain+0xc6>
 80064ea:	f04f 33ff 	mov.w	r3, #4294967295
 80064ee:	e004      	b.n	80064fa <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064f0:	2301      	movs	r3, #1
 80064f2:	e002      	b.n	80064fa <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006500 <remove_chain>:
{
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8006504:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006506:	2901      	cmp	r1, #1
 8006508:	d930      	bls.n	800656c <remove_chain+0x6c>
 800650a:	4607      	mov	r7, r0
 800650c:	4611      	mov	r1, r2
 800650e:	69a3      	ldr	r3, [r4, #24]
 8006510:	429e      	cmp	r6, r3
 8006512:	d301      	bcc.n	8006518 <remove_chain+0x18>
 8006514:	2102      	movs	r1, #2
 8006516:	e02a      	b.n	800656e <remove_chain+0x6e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006518:	b152      	cbz	r2, 8006530 <remove_chain+0x30>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	4620      	mov	r0, r4
 8006520:	f7ff fe44 	bl	80061ac <put_fat>
		if (res != FR_OK) return res;
 8006524:	4601      	mov	r1, r0
 8006526:	b118      	cbz	r0, 8006530 <remove_chain+0x30>
 8006528:	e021      	b.n	800656e <remove_chain+0x6e>
		clst = nxt;					/* Next cluster */
 800652a:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800652c:	4295      	cmp	r5, r2
 800652e:	d21e      	bcs.n	800656e <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006530:	4631      	mov	r1, r6
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff febf 	bl	80062b6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8006538:	4605      	mov	r5, r0
 800653a:	b1d0      	cbz	r0, 8006572 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800653c:	2801      	cmp	r0, #1
 800653e:	d01a      	beq.n	8006576 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006544:	d019      	beq.n	800657a <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006546:	2200      	movs	r2, #0
 8006548:	4631      	mov	r1, r6
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff fe2e 	bl	80061ac <put_fat>
			if (res != FR_OK) return res;
 8006550:	4601      	mov	r1, r0
 8006552:	b960      	cbnz	r0, 800656e <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006554:	6963      	ldr	r3, [r4, #20]
 8006556:	69a2      	ldr	r2, [r4, #24]
 8006558:	1e90      	subs	r0, r2, #2
 800655a:	4283      	cmp	r3, r0
 800655c:	d2e5      	bcs.n	800652a <remove_chain+0x2a>
			fs->free_clst++;
 800655e:	3301      	adds	r3, #1
 8006560:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8006562:	7923      	ldrb	r3, [r4, #4]
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	7123      	strb	r3, [r4, #4]
 800656a:	e7de      	b.n	800652a <remove_chain+0x2a>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800656c:	2102      	movs	r1, #2
}
 800656e:	4608      	mov	r0, r1
 8006570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8006572:	2100      	movs	r1, #0
 8006574:	e7fb      	b.n	800656e <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006576:	2102      	movs	r1, #2
 8006578:	e7f9      	b.n	800656e <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800657a:	2101      	movs	r1, #1
 800657c:	e7f7      	b.n	800656e <remove_chain+0x6e>

0800657e <dir_next>:
{
 800657e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8006582:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006584:	6943      	ldr	r3, [r0, #20]
 8006586:	f103 0520 	add.w	r5, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800658a:	69c3      	ldr	r3, [r0, #28]
 800658c:	b913      	cbnz	r3, 8006594 <dir_next+0x16>
 800658e:	2004      	movs	r0, #4
 8006590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006594:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006598:	d302      	bcc.n	80065a0 <dir_next+0x22>
 800659a:	2004      	movs	r0, #4
 800659c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a0:	4688      	mov	r8, r1
 80065a2:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065a4:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80065a8:	b98f      	cbnz	r7, 80065ce <dir_next+0x50>
		dp->sect++;				/* Next sector */
 80065aa:	3301      	adds	r3, #1
 80065ac:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80065ae:	6981      	ldr	r1, [r0, #24]
 80065b0:	b941      	cbnz	r1, 80065c4 <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065b2:	8933      	ldrh	r3, [r6, #8]
 80065b4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80065b8:	d809      	bhi.n	80065ce <dir_next+0x50>
				dp->sect = 0; return FR_NO_FILE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61c3      	str	r3, [r0, #28]
 80065be:	2004      	movs	r0, #4
 80065c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065c4:	8973      	ldrh	r3, [r6, #10]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 80065cc:	d006      	beq.n	80065dc <dir_next+0x5e>
	dp->dptr = ofs;						/* Current entry */
 80065ce:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80065d0:	3634      	adds	r6, #52	; 0x34
 80065d2:	443e      	add	r6, r7
 80065d4:	6226      	str	r6, [r4, #32]
	return FR_OK;
 80065d6:	2000      	movs	r0, #0
 80065d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065dc:	f7ff fe6b 	bl	80062b6 <get_fat>
 80065e0:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065e2:	2801      	cmp	r0, #1
 80065e4:	d948      	bls.n	8006678 <dir_next+0xfa>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065ea:	d048      	beq.n	800667e <dir_next+0x100>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065ec:	69b3      	ldr	r3, [r6, #24]
 80065ee:	4298      	cmp	r0, r3
 80065f0:	d33a      	bcc.n	8006668 <dir_next+0xea>
					if (!stretch) {								/* If no stretch, report EOT */
 80065f2:	f1b8 0f00 	cmp.w	r8, #0
 80065f6:	d104      	bne.n	8006602 <dir_next+0x84>
						dp->sect = 0; return FR_NO_FILE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61e3      	str	r3, [r4, #28]
 80065fc:	2004      	movs	r0, #4
 80065fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006602:	69a1      	ldr	r1, [r4, #24]
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff ff15 	bl	8006434 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800660a:	4681      	mov	r9, r0
 800660c:	b910      	cbnz	r0, 8006614 <dir_next+0x96>
 800660e:	2007      	movs	r0, #7
 8006610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006614:	2801      	cmp	r0, #1
 8006616:	d035      	beq.n	8006684 <dir_next+0x106>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006618:	f1b0 3fff 	cmp.w	r0, #4294967295
 800661c:	d035      	beq.n	800668a <dir_next+0x10c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff fbd2 	bl	8005dc8 <sync_window>
 8006624:	bba0      	cbnz	r0, 8006690 <dir_next+0x112>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662a:	2100      	movs	r1, #0
 800662c:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8006630:	f7ff f999 	bl	8005966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006634:	4649      	mov	r1, r9
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff fa8c 	bl	8005b54 <clust2sect>
 800663c:	6330      	str	r0, [r6, #48]	; 0x30
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	8973      	ldrh	r3, [r6, #10]
 8006644:	4598      	cmp	r8, r3
 8006646:	d20b      	bcs.n	8006660 <dir_next+0xe2>
						fs->wflag = 1;
 8006648:	2301      	movs	r3, #1
 800664a:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff fbbb 	bl	8005dc8 <sync_window>
 8006652:	bb00      	cbnz	r0, 8006696 <dir_next+0x118>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800665a:	3301      	adds	r3, #1
 800665c:	6333      	str	r3, [r6, #48]	; 0x30
 800665e:	e7f0      	b.n	8006642 <dir_next+0xc4>
					fs->winsect -= n;							/* Restore window offset */
 8006660:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006662:	eba3 0308 	sub.w	r3, r3, r8
 8006666:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8006668:	f8c4 9018 	str.w	r9, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800666c:	4649      	mov	r1, r9
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff fa70 	bl	8005b54 <clust2sect>
 8006674:	61e0      	str	r0, [r4, #28]
 8006676:	e7aa      	b.n	80065ce <dir_next+0x50>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006678:	2002      	movs	r0, #2
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800667e:	2001      	movs	r0, #1
 8006680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006684:	2002      	movs	r0, #2
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800668a:	2001      	movs	r0, #1
 800668c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006690:	2001      	movs	r0, #1
 8006692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006696:	2001      	movs	r0, #1
}
 8006698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800669c <dir_find>:
{
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80066a0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066a2:	2100      	movs	r1, #0
 80066a4:	f7ff fe6e 	bl	8006384 <dir_sdi>
	if (res != FR_OK) return res;
 80066a8:	4605      	mov	r5, r0
 80066aa:	b140      	cbz	r0, 80066be <dir_find+0x22>
}
 80066ac:	4628      	mov	r0, r5
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 80066b0:	2100      	movs	r1, #0
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ff63 	bl	800657e <dir_next>
	} while (res == FR_OK);
 80066b8:	4605      	mov	r5, r0
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d1f6      	bne.n	80066ac <dir_find+0x10>
		res = move_window(fs, dp->sect);
 80066be:	69e1      	ldr	r1, [r4, #28]
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff fbab 	bl	8005e1c <move_window>
		if (res != FR_OK) break;
 80066c6:	4605      	mov	r5, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d1ef      	bne.n	80066ac <dir_find+0x10>
		c = dp->dir[DIR_Name];
 80066cc:	6a20      	ldr	r0, [r4, #32]
 80066ce:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066d0:	b17b      	cbz	r3, 80066f2 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80066d2:	7ac3      	ldrb	r3, [r0, #11]
 80066d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d8:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80066da:	7ac3      	ldrb	r3, [r0, #11]
 80066dc:	f013 0f08 	tst.w	r3, #8
 80066e0:	d1e6      	bne.n	80066b0 <dir_find+0x14>
 80066e2:	220b      	movs	r2, #11
 80066e4:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80066e8:	f7ff f942 	bl	8005970 <mem_cmp>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d1df      	bne.n	80066b0 <dir_find+0x14>
 80066f0:	e7dc      	b.n	80066ac <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066f2:	2504      	movs	r5, #4
 80066f4:	e7da      	b.n	80066ac <dir_find+0x10>

080066f6 <follow_path>:
{
 80066f6:	b530      	push	{r4, r5, lr}
 80066f8:	b083      	sub	sp, #12
 80066fa:	4604      	mov	r4, r0
 80066fc:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 80066fe:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006700:	e001      	b.n	8006706 <follow_path+0x10>
 8006702:	3301      	adds	r3, #1
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	2a5c      	cmp	r2, #92	; 0x5c
 800670c:	bf18      	it	ne
 800670e:	2a2f      	cmpne	r2, #47	; 0x2f
 8006710:	d0f7      	beq.n	8006702 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8006712:	2200      	movs	r2, #0
 8006714:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b1f      	cmp	r3, #31
 800671a:	d91e      	bls.n	800675a <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800671c:	a901      	add	r1, sp, #4
 800671e:	4620      	mov	r0, r4
 8006720:	f7ff fa90 	bl	8005c44 <create_name>
			if (res != FR_OK) break;
 8006724:	4603      	mov	r3, r0
 8006726:	bb00      	cbnz	r0, 800676a <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff ffb7 	bl	800669c <dir_find>
			ns = dp->fn[NSFLAG];
 800672e:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8006732:	4603      	mov	r3, r0
 8006734:	b9e0      	cbnz	r0, 8006770 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006736:	f012 0f04 	tst.w	r2, #4
 800673a:	d116      	bne.n	800676a <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800673c:	79a3      	ldrb	r3, [r4, #6]
 800673e:	f013 0f10 	tst.w	r3, #16
 8006742:	d01c      	beq.n	800677e <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006744:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8006748:	6963      	ldr	r3, [r4, #20]
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	4419      	add	r1, r3
 8006750:	4628      	mov	r0, r5
 8006752:	f7ff fa1c 	bl	8005b8e <ld_clust>
 8006756:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006758:	e7e0      	b.n	800671c <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006760:	4611      	mov	r1, r2
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fe0e 	bl	8006384 <dir_sdi>
 8006768:	4603      	mov	r3, r0
}
 800676a:	4618      	mov	r0, r3
 800676c:	b003      	add	sp, #12
 800676e:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006770:	2804      	cmp	r0, #4
 8006772:	d1fa      	bne.n	800676a <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006774:	f012 0f04 	tst.w	r2, #4
 8006778:	d1f7      	bne.n	800676a <follow_path+0x74>
 800677a:	2305      	movs	r3, #5
 800677c:	e7f5      	b.n	800676a <follow_path+0x74>
				res = FR_NO_PATH; break;
 800677e:	2305      	movs	r3, #5
 8006780:	e7f3      	b.n	800676a <follow_path+0x74>

08006782 <dir_alloc>:
{
 8006782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8006788:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800678a:	2100      	movs	r1, #0
 800678c:	f7ff fdfa 	bl	8006384 <dir_sdi>
	if (res == FR_OK) {
 8006790:	4602      	mov	r2, r0
 8006792:	b9b8      	cbnz	r0, 80067c4 <dir_alloc+0x42>
 8006794:	2500      	movs	r5, #0
 8006796:	e006      	b.n	80067a6 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8006798:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800679a:	2101      	movs	r1, #1
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff feee 	bl	800657e <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067a2:	4602      	mov	r2, r0
 80067a4:	b970      	cbnz	r0, 80067c4 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 80067a6:	69e1      	ldr	r1, [r4, #28]
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7ff fb37 	bl	8005e1c <move_window>
			if (res != FR_OK) break;
 80067ae:	4602      	mov	r2, r0
 80067b0:	b940      	cbnz	r0, 80067c4 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067b2:	6a23      	ldr	r3, [r4, #32]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf18      	it	ne
 80067ba:	2be5      	cmpne	r3, #229	; 0xe5
 80067bc:	d1ec      	bne.n	8006798 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067be:	3501      	adds	r5, #1
 80067c0:	42bd      	cmp	r5, r7
 80067c2:	d1ea      	bne.n	800679a <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067c4:	2a04      	cmp	r2, #4
 80067c6:	d001      	beq.n	80067cc <dir_alloc+0x4a>
}
 80067c8:	4610      	mov	r0, r2
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067cc:	2207      	movs	r2, #7
 80067ce:	e7fb      	b.n	80067c8 <dir_alloc+0x46>

080067d0 <dir_register>:
{
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80067d4:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80067d6:	2101      	movs	r1, #1
 80067d8:	f7ff ffd3 	bl	8006782 <dir_alloc>
	if (res == FR_OK) {
 80067dc:	4605      	mov	r5, r0
 80067de:	b108      	cbz	r0, 80067e4 <dir_register+0x14>
}
 80067e0:	4628      	mov	r0, r5
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 80067e4:	69e1      	ldr	r1, [r4, #28]
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff fb18 	bl	8005e1c <move_window>
		if (res == FR_OK) {
 80067ec:	4605      	mov	r5, r0
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1f6      	bne.n	80067e0 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80067f2:	2220      	movs	r2, #32
 80067f4:	2100      	movs	r1, #0
 80067f6:	6a20      	ldr	r0, [r4, #32]
 80067f8:	f7ff f8b5 	bl	8005966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067fc:	220b      	movs	r2, #11
 80067fe:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006802:	6a20      	ldr	r0, [r4, #32]
 8006804:	f7ff f8a6 	bl	8005954 <mem_cpy>
			fs->wflag = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	70f3      	strb	r3, [r6, #3]
 800680c:	e7e8      	b.n	80067e0 <dir_register+0x10>

0800680e <dir_read>:
{
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8006814:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8006816:	2704      	movs	r7, #4
	while (dp->sect) {
 8006818:	e005      	b.n	8006826 <dir_read+0x18>
		res = dir_next(dp, 0);		/* Next entry */
 800681a:	2100      	movs	r1, #0
 800681c:	4620      	mov	r0, r4
 800681e:	f7ff feae 	bl	800657e <dir_next>
		if (res != FR_OK) break;
 8006822:	4607      	mov	r7, r0
 8006824:	b9e8      	cbnz	r0, 8006862 <dir_read+0x54>
	while (dp->sect) {
 8006826:	69e1      	ldr	r1, [r4, #28]
 8006828:	b1d9      	cbz	r1, 8006862 <dir_read+0x54>
		res = move_window(fs, dp->sect);
 800682a:	4628      	mov	r0, r5
 800682c:	f7ff faf6 	bl	8005e1c <move_window>
		if (res != FR_OK) break;
 8006830:	4607      	mov	r7, r0
 8006832:	b9b0      	cbnz	r0, 8006862 <dir_read+0x54>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8006838:	b192      	cbz	r2, 8006860 <dir_read+0x52>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800683a:	7adb      	ldrb	r3, [r3, #11]
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006842:	2ae5      	cmp	r2, #229	; 0xe5
 8006844:	bf18      	it	ne
 8006846:	2a2e      	cmpne	r2, #46	; 0x2e
 8006848:	d0e7      	beq.n	800681a <dir_read+0xc>
 800684a:	2b0f      	cmp	r3, #15
 800684c:	d0e5      	beq.n	800681a <dir_read+0xc>
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	2b08      	cmp	r3, #8
 8006854:	bf14      	ite	ne
 8006856:	2300      	movne	r3, #0
 8006858:	2301      	moveq	r3, #1
 800685a:	42b3      	cmp	r3, r6
 800685c:	d1dd      	bne.n	800681a <dir_read+0xc>
 800685e:	e000      	b.n	8006862 <dir_read+0x54>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006860:	2704      	movs	r7, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006862:	b10f      	cbz	r7, 8006868 <dir_read+0x5a>
 8006864:	2300      	movs	r3, #0
 8006866:	61e3      	str	r3, [r4, #28]
}
 8006868:	4638      	mov	r0, r7
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800686c <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800686c:	2800      	cmp	r0, #0
 800686e:	bf18      	it	ne
 8006870:	290c      	cmpne	r1, #12
 8006872:	d00b      	beq.n	800688c <unlock_fs+0x20>
{
 8006874:	b508      	push	{r3, lr}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006876:	f1b1 020f 	subs.w	r2, r1, #15
 800687a:	bf18      	it	ne
 800687c:	2201      	movne	r2, #1
 800687e:	290b      	cmp	r1, #11
 8006880:	d003      	beq.n	800688a <unlock_fs+0x1e>
 8006882:	b112      	cbz	r2, 800688a <unlock_fs+0x1e>
		ff_rel_grant(fs->sobj);
 8006884:	68c0      	ldr	r0, [r0, #12]
 8006886:	f000 ffbd 	bl	8007804 <ff_rel_grant>
 800688a:	bd08      	pop	{r3, pc}
 800688c:	4770      	bx	lr
	...

08006890 <sync_fs>:
{
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006894:	f7ff fa98 	bl	8005dc8 <sync_window>
	if (res == FR_OK) {
 8006898:	4605      	mov	r5, r0
 800689a:	b948      	cbnz	r0, 80068b0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800689c:	7823      	ldrb	r3, [r4, #0]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d008      	beq.n	80068b4 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80068a2:	2200      	movs	r2, #0
 80068a4:	4611      	mov	r1, r2
 80068a6:	7860      	ldrb	r0, [r4, #1]
 80068a8:	f7ff f82a 	bl	8005900 <disk_ioctl>
 80068ac:	b100      	cbz	r0, 80068b0 <sync_fs+0x20>
 80068ae:	2501      	movs	r5, #1
}
 80068b0:	4628      	mov	r0, r5
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80068b4:	7923      	ldrb	r3, [r4, #4]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d1f3      	bne.n	80068a2 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 80068ba:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80068be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c2:	2100      	movs	r1, #0
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff f84e 	bl	8005966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80068ca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80068ce:	f204 2032 	addw	r0, r4, #562	; 0x232
 80068d2:	f7ff f831 	bl	8005938 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80068d6:	490f      	ldr	r1, [pc, #60]	; (8006914 <sync_fs+0x84>)
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff f831 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80068de:	490e      	ldr	r1, [pc, #56]	; (8006918 <sync_fs+0x88>)
 80068e0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80068e4:	f7ff f82c 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80068e8:	6961      	ldr	r1, [r4, #20]
 80068ea:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80068ee:	f7ff f827 	bl	8005940 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068f2:	6921      	ldr	r1, [r4, #16]
 80068f4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80068f8:	f7ff f822 	bl	8005940 <st_dword>
			fs->winsect = fs->volbase + 1;
 80068fc:	6a22      	ldr	r2, [r4, #32]
 80068fe:	3201      	adds	r2, #1
 8006900:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006902:	2301      	movs	r3, #1
 8006904:	4631      	mov	r1, r6
 8006906:	7860      	ldrb	r0, [r4, #1]
 8006908:	f7fe ffee 	bl	80058e8 <disk_write>
			fs->fsi_flag = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	7123      	strb	r3, [r4, #4]
 8006910:	e7c7      	b.n	80068a2 <sync_fs+0x12>
 8006912:	bf00      	nop
 8006914:	41615252 	.word	0x41615252
 8006918:	61417272 	.word	0x61417272

0800691c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	9001      	str	r0, [sp, #4]
 8006922:	9100      	str	r1, [sp, #0]
 8006924:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006926:	a804      	add	r0, sp, #16
 8006928:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800692c:	f7ff f9f8 	bl	8005d20 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006930:	1e05      	subs	r5, r0, #0
 8006932:	db34      	blt.n	800699e <f_mount+0x82>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006934:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <f_mount+0x8c>)
 8006936:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]

	if (cfs) {
 800693a:	b154      	cbz	r4, 8006952 <f_mount+0x36>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff f8eb 	bl	8005b18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006942:	68e0      	ldr	r0, [r4, #12]
 8006944:	f000 ff4f 	bl	80077e6 <ff_del_syncobj>
 8006948:	b908      	cbnz	r0, 800694e <f_mount+0x32>
 800694a:	2402      	movs	r4, #2
 800694c:	e028      	b.n	80069a0 <f_mount+0x84>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800694e:	2300      	movs	r3, #0
 8006950:	7023      	strb	r3, [r4, #0]
	}

	if (fs) {
 8006952:	9b01      	ldr	r3, [sp, #4]
 8006954:	b14b      	cbz	r3, 800696a <f_mount+0x4e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800695a:	9901      	ldr	r1, [sp, #4]
 800695c:	310c      	adds	r1, #12
 800695e:	b2e8      	uxtb	r0, r5
 8006960:	f000 ff31 	bl	80077c6 <ff_cre_syncobj>
 8006964:	b908      	cbnz	r0, 800696a <f_mount+0x4e>
 8006966:	2402      	movs	r4, #2
 8006968:	e01a      	b.n	80069a0 <f_mount+0x84>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	4a0e      	ldr	r2, [pc, #56]	; (80069a8 <f_mount+0x8c>)
 800696e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006972:	f116 36ff 	adds.w	r6, r6, #4294967295
 8006976:	bf18      	it	ne
 8006978:	2601      	movne	r6, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf08      	it	eq
 800697e:	f046 0601 	orreq.w	r6, r6, #1
 8006982:	b10e      	cbz	r6, 8006988 <f_mount+0x6c>
 8006984:	2400      	movs	r4, #0
 8006986:	e00b      	b.n	80069a0 <f_mount+0x84>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006988:	2200      	movs	r2, #0
 800698a:	a901      	add	r1, sp, #4
 800698c:	4668      	mov	r0, sp
 800698e:	f7ff fa9f 	bl	8005ed0 <find_volume>
 8006992:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8006994:	4601      	mov	r1, r0
 8006996:	9801      	ldr	r0, [sp, #4]
 8006998:	f7ff ff68 	bl	800686c <unlock_fs>
 800699c:	e000      	b.n	80069a0 <f_mount+0x84>
	if (vol < 0) return FR_INVALID_DRIVE;
 800699e:	240b      	movs	r4, #11
}
 80069a0:	4620      	mov	r0, r4
 80069a2:	b004      	add	sp, #16
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	bf00      	nop
 80069a8:	2000073c 	.word	0x2000073c

080069ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80069ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b0:	b091      	sub	sp, #68	; 0x44
 80069b2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f000 8116 	beq.w	8006be6 <f_open+0x23a>
 80069ba:	4605      	mov	r5, r0
 80069bc:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80069be:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80069c2:	463a      	mov	r2, r7
 80069c4:	a903      	add	r1, sp, #12
 80069c6:	a801      	add	r0, sp, #4
 80069c8:	f7ff fa82 	bl	8005ed0 <find_volume>
	if (res == FR_OK) {
 80069cc:	4604      	mov	r4, r0
 80069ce:	b150      	cbz	r0, 80069e6 <f_open+0x3a>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80069d0:	b10c      	cbz	r4, 80069d6 <f_open+0x2a>
 80069d2:	2300      	movs	r3, #0
 80069d4:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
 80069d6:	4621      	mov	r1, r4
 80069d8:	9803      	ldr	r0, [sp, #12]
 80069da:	f7ff ff47 	bl	800686c <unlock_fs>
}
 80069de:	4620      	mov	r0, r4
 80069e0:	b011      	add	sp, #68	; 0x44
 80069e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80069ea:	9901      	ldr	r1, [sp, #4]
 80069ec:	a804      	add	r0, sp, #16
 80069ee:	f7ff fe82 	bl	80066f6 <follow_path>
		if (res == FR_OK) {
 80069f2:	4604      	mov	r4, r0
 80069f4:	b960      	cbnz	r0, 8006a10 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80069f6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db57      	blt.n	8006aae <f_open+0x102>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069fe:	f037 0301 	bics.w	r3, r7, #1
 8006a02:	bf14      	ite	ne
 8006a04:	2101      	movne	r1, #1
 8006a06:	2100      	moveq	r1, #0
 8006a08:	a804      	add	r0, sp, #16
 8006a0a:	f7fe ffc9 	bl	80059a0 <chk_lock>
 8006a0e:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a10:	f016 0f1c 	tst.w	r6, #28
 8006a14:	f000 80a1 	beq.w	8006b5a <f_open+0x1ae>
			if (res != FR_OK) {					/* No file, create new */
 8006a18:	2c00      	cmp	r4, #0
 8006a1a:	d054      	beq.n	8006ac6 <f_open+0x11a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006a1c:	2c04      	cmp	r4, #4
 8006a1e:	d048      	beq.n	8006ab2 <f_open+0x106>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006a20:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a24:	b914      	cbnz	r4, 8006a2c <f_open+0x80>
 8006a26:	f017 0f08 	tst.w	r7, #8
 8006a2a:	d158      	bne.n	8006ade <f_open+0x132>
		if (res == FR_OK) {
 8006a2c:	b9a4      	cbnz	r4, 8006a58 <f_open+0xac>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a2e:	f017 0f08 	tst.w	r7, #8
 8006a32:	d001      	beq.n	8006a38 <f_open+0x8c>
				mode |= FA_MODIFIED;
 8006a34:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a40:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a42:	f037 0301 	bics.w	r3, r7, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2101      	movne	r1, #1
 8006a4a:	2100      	moveq	r1, #0
 8006a4c:	a804      	add	r0, sp, #16
 8006a4e:	f7fe fff1 	bl	8005a34 <inc_lock>
 8006a52:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a54:	b900      	cbnz	r0, 8006a58 <f_open+0xac>
 8006a56:	2402      	movs	r4, #2
		if (res == FR_OK) {
 8006a58:	2c00      	cmp	r4, #0
 8006a5a:	d1b9      	bne.n	80069d0 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006a5c:	9e03      	ldr	r6, [sp, #12]
 8006a5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006a62:	4641      	mov	r1, r8
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff f892 	bl	8005b8e <ld_clust>
 8006a6a:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a6c:	f108 001c 	add.w	r0, r8, #28
 8006a70:	f7fe ff57 	bl	8005922 <ld_dword>
 8006a74:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a76:	2100      	movs	r1, #0
 8006a78:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a7a:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8006a7c:	88f3      	ldrh	r3, [r6, #6]
 8006a7e:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a80:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8006a82:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a84:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a86:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a88:	f105 0830 	add.w	r8, r5, #48	; 0x30
 8006a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a90:	4640      	mov	r0, r8
 8006a92:	f7fe ff68 	bl	8005966 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a96:	f017 0f20 	tst.w	r7, #32
 8006a9a:	d099      	beq.n	80069d0 <f_open+0x24>
 8006a9c:	68ee      	ldr	r6, [r5, #12]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d096      	beq.n	80069d0 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006aa2:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	895f      	ldrh	r7, [r3, #10]
 8006aa8:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006aaa:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006aac:	e06c      	b.n	8006b88 <f_open+0x1dc>
				res = FR_INVALID_NAME;
 8006aae:	2406      	movs	r4, #6
 8006ab0:	e7ae      	b.n	8006a10 <f_open+0x64>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ab2:	f7fe ffaf 	bl	8005a14 <enq_lock>
 8006ab6:	b908      	cbnz	r0, 8006abc <f_open+0x110>
 8006ab8:	2412      	movs	r4, #18
 8006aba:	e7b1      	b.n	8006a20 <f_open+0x74>
 8006abc:	a804      	add	r0, sp, #16
 8006abe:	f7ff fe87 	bl	80067d0 <dir_register>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	e7ac      	b.n	8006a20 <f_open+0x74>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ac6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006aca:	f013 0f11 	tst.w	r3, #17
 8006ace:	d104      	bne.n	8006ada <f_open+0x12e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006ad0:	f016 0f04 	tst.w	r6, #4
 8006ad4:	d0a6      	beq.n	8006a24 <f_open+0x78>
 8006ad6:	2408      	movs	r4, #8
 8006ad8:	e7a4      	b.n	8006a24 <f_open+0x78>
					res = FR_DENIED;
 8006ada:	2407      	movs	r4, #7
 8006adc:	e7a2      	b.n	8006a24 <f_open+0x78>
				dw = GET_FATTIME();
 8006ade:	f004 fee1 	bl	800b8a4 <get_fattime>
 8006ae2:	4606      	mov	r6, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ae8:	300e      	adds	r0, #14
 8006aea:	f7fe ff29 	bl	8005940 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006aee:	4631      	mov	r1, r6
 8006af0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006af2:	3016      	adds	r0, #22
 8006af4:	f7fe ff24 	bl	8005940 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006af8:	2220      	movs	r2, #32
 8006afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006afe:	9e03      	ldr	r6, [sp, #12]
 8006b00:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006b04:	4641      	mov	r1, r8
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff f841 	bl	8005b8e <ld_clust>
 8006b0c:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4641      	mov	r1, r8
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff f84e 	bl	8005bb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b1c:	301c      	adds	r0, #28
 8006b1e:	f7fe ff0f 	bl	8005940 <st_dword>
					fs->wflag = 1;
 8006b22:	2201      	movs	r2, #1
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8006b28:	f1b9 0f00 	cmp.w	r9, #0
 8006b2c:	f43f af7e 	beq.w	8006a2c <f_open+0x80>
						dw = fs->winsect;
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	6b1e      	ldr	r6, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8006b34:	2200      	movs	r2, #0
 8006b36:	4649      	mov	r1, r9
 8006b38:	a804      	add	r0, sp, #16
 8006b3a:	f7ff fce1 	bl	8006500 <remove_chain>
						if (res == FR_OK) {
 8006b3e:	4604      	mov	r4, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f47f af73 	bne.w	8006a2c <f_open+0x80>
							res = move_window(fs, dw);
 8006b46:	4631      	mov	r1, r6
 8006b48:	9803      	ldr	r0, [sp, #12]
 8006b4a:	f7ff f967 	bl	8005e1c <move_window>
 8006b4e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006b50:	f109 33ff 	add.w	r3, r9, #4294967295
 8006b54:	9a03      	ldr	r2, [sp, #12]
 8006b56:	6113      	str	r3, [r2, #16]
 8006b58:	e768      	b.n	8006a2c <f_open+0x80>
			if (res == FR_OK) {					/* Following succeeded */
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	f47f af66 	bne.w	8006a2c <f_open+0x80>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006b60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006b64:	f013 0f10 	tst.w	r3, #16
 8006b68:	d109      	bne.n	8006b7e <f_open+0x1d2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006b6a:	f016 0f02 	tst.w	r6, #2
 8006b6e:	f43f af5d 	beq.w	8006a2c <f_open+0x80>
 8006b72:	f013 0f01 	tst.w	r3, #1
 8006b76:	f43f af59 	beq.w	8006a2c <f_open+0x80>
						res = FR_DENIED;
 8006b7a:	2407      	movs	r4, #7
 8006b7c:	e756      	b.n	8006a2c <f_open+0x80>
					res = FR_NO_FILE;
 8006b7e:	2404      	movs	r4, #4
 8006b80:	e754      	b.n	8006a2c <f_open+0x80>
					if (clst <= 1) res = FR_INT_ERR;
 8006b82:	2402      	movs	r4, #2
 8006b84:	e00d      	b.n	8006ba2 <f_open+0x1f6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b86:	1bf6      	subs	r6, r6, r7
 8006b88:	fab4 f384 	clz	r3, r4
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	42be      	cmp	r6, r7
 8006b90:	bf98      	it	ls
 8006b92:	2300      	movls	r3, #0
 8006b94:	b153      	cbz	r3, 8006bac <f_open+0x200>
					clst = get_fat(&fp->obj, clst);
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff fb8d 	bl	80062b6 <get_fat>
 8006b9c:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006b9e:	2801      	cmp	r0, #1
 8006ba0:	d9ef      	bls.n	8006b82 <f_open+0x1d6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ba2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006ba6:	d1ee      	bne.n	8006b86 <f_open+0x1da>
 8006ba8:	2401      	movs	r4, #1
 8006baa:	e7ec      	b.n	8006b86 <f_open+0x1da>
				fp->clust = clst;
 8006bac:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	f47f af0e 	bne.w	80069d0 <f_open+0x24>
 8006bb4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f43f af09 	beq.w	80069d0 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006bbe:	9f03      	ldr	r7, [sp, #12]
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7fe ffc7 	bl	8005b54 <clust2sect>
 8006bc6:	b908      	cbnz	r0, 8006bcc <f_open+0x220>
						res = FR_INT_ERR;
 8006bc8:	2402      	movs	r4, #2
 8006bca:	e701      	b.n	80069d0 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006bcc:	eb00 2256 	add.w	r2, r0, r6, lsr #9
 8006bd0:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4641      	mov	r1, r8
 8006bd6:	7878      	ldrb	r0, [r7, #1]
 8006bd8:	f7fe fe7a 	bl	80058d0 <disk_read>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f aef7 	beq.w	80069d0 <f_open+0x24>
 8006be2:	2401      	movs	r4, #1
 8006be4:	e6f4      	b.n	80069d0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8006be6:	2409      	movs	r4, #9
 8006be8:	e6f9      	b.n	80069de <f_open+0x32>

08006bea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4688      	mov	r8, r1
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	a903      	add	r1, sp, #12
 8006c02:	f7ff f8c1 	bl	8005d88 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c06:	9000      	str	r0, [sp, #0]
 8006c08:	b960      	cbnz	r0, 8006c24 <f_write+0x3a>
 8006c0a:	7d63      	ldrb	r3, [r4, #21]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	b94b      	cbnz	r3, 8006c24 <f_write+0x3a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c10:	7d23      	ldrb	r3, [r4, #20]
 8006c12:	f013 0f02 	tst.w	r3, #2
 8006c16:	d00d      	beq.n	8006c34 <f_write+0x4a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006c18:	69a3      	ldr	r3, [r4, #24]
 8006c1a:	42f3      	cmn	r3, r6
 8006c1c:	f0c0 80bb 	bcc.w	8006d96 <f_write+0x1ac>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006c20:	43de      	mvns	r6, r3
 8006c22:	e0b8      	b.n	8006d96 <f_write+0x1ac>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c24:	9900      	ldr	r1, [sp, #0]
 8006c26:	9803      	ldr	r0, [sp, #12]
 8006c28:	f7ff fe20 	bl	800686c <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8006c2c:	9800      	ldr	r0, [sp, #0]
 8006c2e:	b005      	add	sp, #20
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c34:	2107      	movs	r1, #7
 8006c36:	9803      	ldr	r0, [sp, #12]
 8006c38:	f7ff fe18 	bl	800686c <unlock_fs>
 8006c3c:	2307      	movs	r3, #7
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	e7f4      	b.n	8006c2c <f_write+0x42>
					if (fp->cltbl) {
 8006c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c44:	b3a3      	cbz	r3, 8006cb0 <f_write+0xc6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7fe ff90 	bl	8005b6c <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f000 80cc 	beq.w	8006dea <f_write+0x200>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c52:	2801      	cmp	r0, #1
 8006c54:	d031      	beq.n	8006cba <f_write+0xd0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c56:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c5a:	d036      	beq.n	8006cca <f_write+0xe0>
				fp->clust = clst;			/* Update current cluster */
 8006c5c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	b903      	cbnz	r3, 8006c64 <f_write+0x7a>
 8006c62:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006c64:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	db36      	blt.n	8006cda <f_write+0xf0>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006c70:	69e1      	ldr	r1, [r4, #28]
 8006c72:	4658      	mov	r0, fp
 8006c74:	f7fe ff6e 	bl	8005b54 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c78:	4682      	mov	sl, r0
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d043      	beq.n	8006d06 <f_write+0x11c>
			sect += csect;
 8006c7e:	44ba      	add	sl, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006c80:	0a75      	lsrs	r5, r6, #9
 8006c82:	d05d      	beq.n	8006d40 <f_write+0x156>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c84:	197b      	adds	r3, r7, r5
 8006c86:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d900      	bls.n	8006c90 <f_write+0xa6>
					cc = fs->csize - csect;
 8006c8e:	1bd5      	subs	r5, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c90:	462b      	mov	r3, r5
 8006c92:	4652      	mov	r2, sl
 8006c94:	4641      	mov	r1, r8
 8006c96:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006c9a:	f7fe fe25 	bl	80058e8 <disk_write>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d139      	bne.n	8006d16 <f_write+0x12c>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	eba1 010a 	sub.w	r1, r1, sl
 8006ca8:	428d      	cmp	r5, r1
 8006caa:	d83c      	bhi.n	8006d26 <f_write+0x13c>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006cac:	026d      	lsls	r5, r5, #9
				continue;
 8006cae:	e063      	b.n	8006d78 <f_write+0x18e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006cb0:	69e1      	ldr	r1, [r4, #28]
 8006cb2:	9801      	ldr	r0, [sp, #4]
 8006cb4:	f7ff fbbe 	bl	8006434 <create_chain>
 8006cb8:	e7c8      	b.n	8006c4c <f_write+0x62>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006cba:	2502      	movs	r5, #2
 8006cbc:	7565      	strb	r5, [r4, #21]
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	9803      	ldr	r0, [sp, #12]
 8006cc2:	f7ff fdd3 	bl	800686c <unlock_fs>
 8006cc6:	9500      	str	r5, [sp, #0]
 8006cc8:	e7b0      	b.n	8006c2c <f_write+0x42>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006cca:	2501      	movs	r5, #1
 8006ccc:	7565      	strb	r5, [r4, #21]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	9803      	ldr	r0, [sp, #12]
 8006cd2:	f7ff fdcb 	bl	800686c <unlock_fs>
 8006cd6:	9500      	str	r5, [sp, #0]
 8006cd8:	e7a8      	b.n	8006c2c <f_write+0x42>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cda:	2301      	movs	r3, #1
 8006cdc:	6a22      	ldr	r2, [r4, #32]
 8006cde:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006ce2:	9803      	ldr	r0, [sp, #12]
 8006ce4:	7840      	ldrb	r0, [r0, #1]
 8006ce6:	f7fe fdff 	bl	80058e8 <disk_write>
 8006cea:	b920      	cbnz	r0, 8006cf6 <f_write+0x10c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006cec:	7d23      	ldrb	r3, [r4, #20]
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	7523      	strb	r3, [r4, #20]
 8006cf4:	e7ba      	b.n	8006c6c <f_write+0x82>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cf6:	2501      	movs	r5, #1
 8006cf8:	7565      	strb	r5, [r4, #21]
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	9803      	ldr	r0, [sp, #12]
 8006cfe:	f7ff fdb5 	bl	800686c <unlock_fs>
 8006d02:	9500      	str	r5, [sp, #0]
 8006d04:	e792      	b.n	8006c2c <f_write+0x42>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d06:	2502      	movs	r5, #2
 8006d08:	7565      	strb	r5, [r4, #21]
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f7ff fdad 	bl	800686c <unlock_fs>
 8006d12:	9500      	str	r5, [sp, #0]
 8006d14:	e78a      	b.n	8006c2c <f_write+0x42>
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d16:	2501      	movs	r5, #1
 8006d18:	7565      	strb	r5, [r4, #21]
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	9803      	ldr	r0, [sp, #12]
 8006d1e:	f7ff fda5 	bl	800686c <unlock_fs>
 8006d22:	9500      	str	r5, [sp, #0]
 8006d24:	e782      	b.n	8006c2c <f_write+0x42>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d2a:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8006d2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006d32:	f7fe fe0f 	bl	8005954 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d36:	7d23      	ldrb	r3, [r4, #20]
 8006d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3c:	7523      	strb	r3, [r4, #20]
 8006d3e:	e7b5      	b.n	8006cac <f_write+0xc2>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d40:	6a23      	ldr	r3, [r4, #32]
 8006d42:	459a      	cmp	sl, r3
 8006d44:	d003      	beq.n	8006d4e <f_write+0x164>
				fp->fptr < fp->obj.objsize &&
 8006d46:	69a2      	ldr	r2, [r4, #24]
 8006d48:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d33b      	bcc.n	8006dc6 <f_write+0x1dc>
			fp->sect = sect;
 8006d4e:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d52:	69a3      	ldr	r3, [r4, #24]
 8006d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d58:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006d5c:	42ae      	cmp	r6, r5
 8006d5e:	d200      	bcs.n	8006d62 <f_write+0x178>
 8006d60:	4635      	mov	r5, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006d62:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006d66:	462a      	mov	r2, r5
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4418      	add	r0, r3
 8006d6c:	f7fe fdf2 	bl	8005954 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006d70:	7d23      	ldrb	r3, [r4, #20]
 8006d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d76:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006d78:	44a8      	add	r8, r5
 8006d7a:	69a3      	ldr	r3, [r4, #24]
 8006d7c:	442b      	add	r3, r5
 8006d7e:	61a3      	str	r3, [r4, #24]
 8006d80:	68e2      	ldr	r2, [r4, #12]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bf38      	it	cc
 8006d86:	4613      	movcc	r3, r2
 8006d88:	60e3      	str	r3, [r4, #12]
 8006d8a:	f8d9 3000 	ldr.w	r3, [r9]
 8006d8e:	442b      	add	r3, r5
 8006d90:	f8c9 3000 	str.w	r3, [r9]
 8006d94:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
 8006d96:	b346      	cbz	r6, 8006dea <f_write+0x200>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006d98:	69a1      	ldr	r1, [r4, #24]
 8006d9a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1d7      	bne.n	8006d52 <f_write+0x168>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	895f      	ldrh	r7, [r3, #10]
 8006da6:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006da8:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8006dac:	f47f af5a 	bne.w	8006c64 <f_write+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006db0:	2900      	cmp	r1, #0
 8006db2:	f47f af46 	bne.w	8006c42 <f_write+0x58>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006db6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f47f af47 	bne.w	8006c4c <f_write+0x62>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006dbe:	9801      	ldr	r0, [sp, #4]
 8006dc0:	f7ff fb38 	bl	8006434 <create_chain>
 8006dc4:	e742      	b.n	8006c4c <f_write+0x62>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006dce:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006dd2:	f7fe fd7d 	bl	80058d0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d0b9      	beq.n	8006d4e <f_write+0x164>
					ABORT(fs, FR_DISK_ERR);
 8006dda:	2501      	movs	r5, #1
 8006ddc:	7565      	strb	r5, [r4, #21]
 8006dde:	4629      	mov	r1, r5
 8006de0:	9803      	ldr	r0, [sp, #12]
 8006de2:	f7ff fd43 	bl	800686c <unlock_fs>
 8006de6:	9500      	str	r5, [sp, #0]
 8006de8:	e720      	b.n	8006c2c <f_write+0x42>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006dea:	7d23      	ldrb	r3, [r4, #20]
 8006dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8006df2:	2100      	movs	r1, #0
 8006df4:	9803      	ldr	r0, [sp, #12]
 8006df6:	f7ff fd39 	bl	800686c <unlock_fs>
 8006dfa:	e717      	b.n	8006c2c <f_write+0x42>

08006dfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	4605      	mov	r5, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e02:	a901      	add	r1, sp, #4
 8006e04:	f7fe ffc0 	bl	8005d88 <validate>
	if (res == FR_OK) {
 8006e08:	4604      	mov	r4, r0
 8006e0a:	b978      	cbnz	r0, 8006e2c <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006e0c:	7d2b      	ldrb	r3, [r5, #20]
 8006e0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e12:	d00b      	beq.n	8006e2c <f_sync+0x30>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006e14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e18:	d10f      	bne.n	8006e3a <f_sync+0x3e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006e1a:	f004 fd43 	bl	800b8a4 <get_fattime>
 8006e1e:	4606      	mov	r6, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006e20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006e22:	9801      	ldr	r0, [sp, #4]
 8006e24:	f7fe fffa 	bl	8005e1c <move_window>
				if (res == FR_OK) {
 8006e28:	4604      	mov	r4, r0
 8006e2a:	b1d0      	cbz	r0, 8006e62 <f_sync+0x66>
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	9801      	ldr	r0, [sp, #4]
 8006e30:	f7ff fd1c 	bl	800686c <unlock_fs>
}
 8006e34:	4620      	mov	r0, r4
 8006e36:	b002      	add	sp, #8
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	6a2a      	ldr	r2, [r5, #32]
 8006e3e:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8006e42:	9801      	ldr	r0, [sp, #4]
 8006e44:	7840      	ldrb	r0, [r0, #1]
 8006e46:	f7fe fd4f 	bl	80058e8 <disk_write>
 8006e4a:	b920      	cbnz	r0, 8006e56 <f_sync+0x5a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e4c:	7d2b      	ldrb	r3, [r5, #20]
 8006e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e52:	752b      	strb	r3, [r5, #20]
 8006e54:	e7e1      	b.n	8006e1a <f_sync+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006e56:	2101      	movs	r1, #1
 8006e58:	9801      	ldr	r0, [sp, #4]
 8006e5a:	f7ff fd07 	bl	800686c <unlock_fs>
 8006e5e:	2401      	movs	r4, #1
 8006e60:	e7e8      	b.n	8006e34 <f_sync+0x38>
					dir = fp->dir_ptr;
 8006e62:	6aac      	ldr	r4, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006e64:	7ae3      	ldrb	r3, [r4, #11]
 8006e66:	f043 0320 	orr.w	r3, r3, #32
 8006e6a:	72e3      	strb	r3, [r4, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006e6c:	68aa      	ldr	r2, [r5, #8]
 8006e6e:	4621      	mov	r1, r4
 8006e70:	6828      	ldr	r0, [r5, #0]
 8006e72:	f7fe fe9f 	bl	8005bb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006e76:	68e9      	ldr	r1, [r5, #12]
 8006e78:	f104 001c 	add.w	r0, r4, #28
 8006e7c:	f7fe fd60 	bl	8005940 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e80:	4631      	mov	r1, r6
 8006e82:	f104 0016 	add.w	r0, r4, #22
 8006e86:	f7fe fd5b 	bl	8005940 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f104 0012 	add.w	r0, r4, #18
 8006e90:	f7fe fd52 	bl	8005938 <st_word>
					fs->wflag = 1;
 8006e94:	2201      	movs	r2, #1
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e9a:	9801      	ldr	r0, [sp, #4]
 8006e9c:	f7ff fcf8 	bl	8006890 <sync_fs>
 8006ea0:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ea2:	7d2b      	ldrb	r3, [r5, #20]
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	752b      	strb	r3, [r5, #20]
 8006eaa:	e7bf      	b.n	8006e2c <f_sync+0x30>

08006eac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006eac:	b530      	push	{r4, r5, lr}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006eb2:	f7ff ffa3 	bl	8006dfc <f_sync>
	if (res == FR_OK)
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	b110      	cbz	r0, 8006ec0 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006eba:	4620      	mov	r0, r4
 8006ebc:	b003      	add	sp, #12
 8006ebe:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ec0:	a901      	add	r1, sp, #4
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f7fe ff60 	bl	8005d88 <validate>
		if (res == FR_OK) {
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d1f5      	bne.n	8006eba <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ece:	6928      	ldr	r0, [r5, #16]
 8006ed0:	f7fe fe02 	bl	8005ad8 <dec_lock>
			if (res == FR_OK)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	b908      	cbnz	r0, 8006edc <f_close+0x30>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006ed8:	2300      	movs	r3, #0
 8006eda:	602b      	str	r3, [r5, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006edc:	2100      	movs	r1, #0
 8006ede:	9801      	ldr	r0, [sp, #4]
 8006ee0:	f7ff fcc4 	bl	800686c <unlock_fs>
 8006ee4:	e7e9      	b.n	8006eba <f_close+0xe>

08006ee6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006ee6:	b530      	push	{r4, r5, lr}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d045      	beq.n	8006f7c <f_opendir+0x96>
 8006ef0:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	a903      	add	r1, sp, #12
 8006ef6:	a801      	add	r0, sp, #4
 8006ef8:	f7fe ffea 	bl	8005ed0 <find_volume>
	if (res == FR_OK) {
 8006efc:	4604      	mov	r4, r0
 8006efe:	b148      	cbz	r0, 8006f14 <f_opendir+0x2e>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006f00:	b10c      	cbz	r4, 8006f06 <f_opendir+0x20>
 8006f02:	2300      	movs	r3, #0
 8006f04:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
 8006f06:	4621      	mov	r1, r4
 8006f08:	9803      	ldr	r0, [sp, #12]
 8006f0a:	f7ff fcaf 	bl	800686c <unlock_fs>
}
 8006f0e:	4620      	mov	r0, r4
 8006f10:	b005      	add	sp, #20
 8006f12:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006f18:	9901      	ldr	r1, [sp, #4]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7ff fbeb 	bl	80066f6 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8006f20:	4604      	mov	r4, r0
 8006f22:	b968      	cbnz	r0, 8006f40 <f_opendir+0x5a>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006f24:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db08      	blt.n	8006f3e <f_opendir+0x58>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006f2c:	79ab      	ldrb	r3, [r5, #6]
 8006f2e:	f013 0f10 	tst.w	r3, #16
 8006f32:	d009      	beq.n	8006f48 <f_opendir+0x62>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006f34:	6a29      	ldr	r1, [r5, #32]
 8006f36:	9803      	ldr	r0, [sp, #12]
 8006f38:	f7fe fe29 	bl	8005b8e <ld_clust>
 8006f3c:	60a8      	str	r0, [r5, #8]
			if (res == FR_OK) {
 8006f3e:	b12c      	cbz	r4, 8006f4c <f_opendir+0x66>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006f40:	2c04      	cmp	r4, #4
 8006f42:	d1dd      	bne.n	8006f00 <f_opendir+0x1a>
 8006f44:	2405      	movs	r4, #5
 8006f46:	e7db      	b.n	8006f00 <f_opendir+0x1a>
					res = FR_NO_PATH;
 8006f48:	2405      	movs	r4, #5
 8006f4a:	e7f8      	b.n	8006f3e <f_opendir+0x58>
				obj->id = fs->id;
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	88db      	ldrh	r3, [r3, #6]
 8006f50:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006f52:	2100      	movs	r1, #0
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff fa15 	bl	8006384 <dir_sdi>
				if (res == FR_OK) {
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d1ef      	bne.n	8006f40 <f_opendir+0x5a>
					if (obj->sclust) {
 8006f60:	68ab      	ldr	r3, [r5, #8]
 8006f62:	b913      	cbnz	r3, 8006f6a <f_opendir+0x84>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006f64:	2300      	movs	r3, #0
 8006f66:	612b      	str	r3, [r5, #16]
 8006f68:	e7ea      	b.n	8006f40 <f_opendir+0x5a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7fe fd61 	bl	8005a34 <inc_lock>
 8006f72:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1e3      	bne.n	8006f40 <f_opendir+0x5a>
 8006f78:	2412      	movs	r4, #18
 8006f7a:	e7e1      	b.n	8006f40 <f_opendir+0x5a>
	if (!dp) return FR_INVALID_OBJECT;
 8006f7c:	2409      	movs	r4, #9
 8006f7e:	e7c6      	b.n	8006f0e <f_opendir+0x28>

08006f80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006f80:	b530      	push	{r4, r5, lr}
 8006f82:	b083      	sub	sp, #12
 8006f84:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006f86:	a901      	add	r1, sp, #4
 8006f88:	f7fe fefe 	bl	8005d88 <validate>
	if (res == FR_OK) {
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	b940      	cbnz	r0, 8006fa2 <f_closedir+0x22>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006f90:	6928      	ldr	r0, [r5, #16]
 8006f92:	b948      	cbnz	r0, 8006fa8 <f_closedir+0x28>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
 8006f94:	b90c      	cbnz	r4, 8006f9a <f_closedir+0x1a>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006f96:	2300      	movs	r3, #0
 8006f98:	602b      	str	r3, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	9801      	ldr	r0, [sp, #4]
 8006f9e:	f7ff fc65 	bl	800686c <unlock_fs>
#endif
	}
	return res;
}
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 8006fa8:	f7fe fd96 	bl	8005ad8 <dec_lock>
 8006fac:	4604      	mov	r4, r0
 8006fae:	e7f1      	b.n	8006f94 <f_closedir+0x14>

08006fb0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006fb8:	a901      	add	r1, sp, #4
 8006fba:	f7fe fee5 	bl	8005d88 <validate>
	if (res == FR_OK) {
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	b940      	cbnz	r0, 8006fd4 <f_readdir+0x24>
		if (!fno) {
 8006fc2:	b176      	cbz	r6, 8006fe2 <f_readdir+0x32>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7ff fc21 	bl	800680e <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006fcc:	2804      	cmp	r0, #4
 8006fce:	d000      	beq.n	8006fd2 <f_readdir+0x22>
			res = dir_read(dp, 0);			/* Read an item */
 8006fd0:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8006fd2:	b164      	cbz	r4, 8006fee <f_readdir+0x3e>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	9801      	ldr	r0, [sp, #4]
 8006fd8:	f7ff fc48 	bl	800686c <unlock_fs>
}
 8006fdc:	4620      	mov	r0, r4
 8006fde:	b002      	add	sp, #8
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7ff f9cd 	bl	8006384 <dir_sdi>
 8006fea:	4604      	mov	r4, r0
 8006fec:	e7f2      	b.n	8006fd4 <f_readdir+0x24>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f7fe fdf2 	bl	8005bda <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff fac0 	bl	800657e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006ffe:	2804      	cmp	r0, #4
 8007000:	d0e8      	beq.n	8006fd4 <f_readdir+0x24>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007002:	4604      	mov	r4, r0
 8007004:	e7e6      	b.n	8006fd4 <f_readdir+0x24>

08007006 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	9001      	str	r0, [sp, #4]
 800700e:	468a      	mov	sl, r1
 8007010:	4614      	mov	r4, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007012:	2200      	movs	r2, #0
 8007014:	a907      	add	r1, sp, #28
 8007016:	a801      	add	r0, sp, #4
 8007018:	f7fe ff5a 	bl	8005ed0 <find_volume>
	if (res == FR_OK) {
 800701c:	4680      	mov	r8, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d15a      	bne.n	80070d8 <f_getfree+0xd2>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	6023      	str	r3, [r4, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007026:	695a      	ldr	r2, [r3, #20]
 8007028:	699e      	ldr	r6, [r3, #24]
 800702a:	1eb1      	subs	r1, r6, #2
 800702c:	428a      	cmp	r2, r1
 800702e:	d908      	bls.n	8007042 <f_getfree+0x3c>
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	2a01      	cmp	r2, #1
 8007034:	d008      	beq.n	8007048 <f_getfree+0x42>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007036:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
					i = 0; p = 0;
 800703a:	2400      	movs	r4, #0
 800703c:	4625      	mov	r5, r4
			nfree = 0;
 800703e:	4627      	mov	r7, r4
 8007040:	e032      	b.n	80070a8 <f_getfree+0xa2>
			*nclst = fs->free_clst;
 8007042:	f8ca 2000 	str.w	r2, [sl]
 8007046:	e047      	b.n	80070d8 <f_getfree+0xd2>
				clst = 2; obj.fs = fs;
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	2402      	movs	r4, #2
			nfree = 0;
 800704c:	2700      	movs	r7, #0
 800704e:	e004      	b.n	800705a <f_getfree+0x54>
				} while (++clst < fs->n_fatent);
 8007050:	3401      	adds	r4, #1
 8007052:	9b07      	ldr	r3, [sp, #28]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	429c      	cmp	r4, r3
 8007058:	d236      	bcs.n	80070c8 <f_getfree+0xc2>
					stat = get_fat(&obj, clst);
 800705a:	4621      	mov	r1, r4
 800705c:	a802      	add	r0, sp, #8
 800705e:	f7ff f92a 	bl	80062b6 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007062:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007066:	d02d      	beq.n	80070c4 <f_getfree+0xbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007068:	2801      	cmp	r0, #1
 800706a:	d03d      	beq.n	80070e8 <f_getfree+0xe2>
					if (stat == 0) nfree++;
 800706c:	2800      	cmp	r0, #0
 800706e:	d1ef      	bne.n	8007050 <f_getfree+0x4a>
 8007070:	3701      	adds	r7, #1
 8007072:	e7ed      	b.n	8007050 <f_getfree+0x4a>
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
 8007074:	f109 0501 	add.w	r5, r9, #1
 8007078:	4649      	mov	r1, r9
 800707a:	9807      	ldr	r0, [sp, #28]
 800707c:	f7fe fece 	bl	8005e1c <move_window>
							if (res != FR_OK) break;
 8007080:	4680      	mov	r8, r0
 8007082:	bb08      	cbnz	r0, 80070c8 <f_getfree+0xc2>
							p = fs->win;
 8007084:	9c07      	ldr	r4, [sp, #28]
 8007086:	3434      	adds	r4, #52	; 0x34
							res = move_window(fs, sect++);
 8007088:	46a9      	mov	r9, r5
							i = SS(fs);
 800708a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800708e:	e00d      	b.n	80070ac <f_getfree+0xa6>
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
 8007090:	4620      	mov	r0, r4
 8007092:	f7fe fc41 	bl	8005918 <ld_word>
 8007096:	b900      	cbnz	r0, 800709a <f_getfree+0x94>
 8007098:	3701      	adds	r7, #1
							p += 2; i -= 2;
 800709a:	3402      	adds	r4, #2
 800709c:	3d02      	subs	r5, #2
 800709e:	e001      	b.n	80070a4 <f_getfree+0x9e>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
							p += 4; i -= 4;
 80070a0:	3404      	adds	r4, #4
 80070a2:	3d04      	subs	r5, #4
						}
					} while (--clst);
 80070a4:	3e01      	subs	r6, #1
 80070a6:	d00f      	beq.n	80070c8 <f_getfree+0xc2>
						if (i == 0) {
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	d0e3      	beq.n	8007074 <f_getfree+0x6e>
						if (fs->fs_type == FS_FAT16) {
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d0ed      	beq.n	8007090 <f_getfree+0x8a>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7fe fc34 	bl	8005922 <ld_dword>
 80070ba:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80070be:	d1ef      	bne.n	80070a0 <f_getfree+0x9a>
 80070c0:	3701      	adds	r7, #1
 80070c2:	e7ed      	b.n	80070a0 <f_getfree+0x9a>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80070c4:	f04f 0801 	mov.w	r8, #1
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80070c8:	f8ca 7000 	str.w	r7, [sl]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80070cc:	9b07      	ldr	r3, [sp, #28]
 80070ce:	615f      	str	r7, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80070d0:	791a      	ldrb	r2, [r3, #4]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80070d8:	4641      	mov	r1, r8
 80070da:	9807      	ldr	r0, [sp, #28]
 80070dc:	f7ff fbc6 	bl	800686c <unlock_fs>
}
 80070e0:	4640      	mov	r0, r8
 80070e2:	b008      	add	sp, #32
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 80070e8:	f04f 0802 	mov.w	r8, #2
 80070ec:	e7ec      	b.n	80070c8 <f_getfree+0xc2>
	...

080070f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	b08b      	sub	sp, #44	; 0x2c
 80070f6:	ac0a      	add	r4, sp, #40	; 0x28
 80070f8:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80070fc:	460e      	mov	r6, r1
 80070fe:	4617      	mov	r7, r2
 8007100:	461d      	mov	r5, r3
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8007102:	4620      	mov	r0, r4
 8007104:	f7fe fe0c 	bl	8005d20 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007108:	2800      	cmp	r0, #0
 800710a:	f2c0 82e1 	blt.w	80076d0 <f_mkfs+0x5e0>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800710e:	4b9d      	ldr	r3, [pc, #628]	; (8007384 <f_mkfs+0x294>)
 8007110:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007114:	b10b      	cbz	r3, 800711a <f_mkfs+0x2a>
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800711a:	b2c4      	uxtb	r4, r0
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800711c:	4620      	mov	r0, r4
 800711e:	f7fe fbc3 	bl	80058a8 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007122:	f010 0f01 	tst.w	r0, #1
 8007126:	d001      	beq.n	800712c <f_mkfs+0x3c>
 8007128:	2003      	movs	r0, #3
 800712a:	e2d2      	b.n	80076d2 <f_mkfs+0x5e2>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800712c:	f010 0f04 	tst.w	r0, #4
 8007130:	d001      	beq.n	8007136 <f_mkfs+0x46>
 8007132:	200a      	movs	r0, #10
 8007134:	e2cd      	b.n	80076d2 <f_mkfs+0x5e2>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8007136:	aa09      	add	r2, sp, #36	; 0x24
 8007138:	2103      	movs	r1, #3
 800713a:	4620      	mov	r0, r4
 800713c:	f7fe fbe0 	bl	8005900 <disk_ioctl>
 8007140:	b938      	cbnz	r0, 8007152 <f_mkfs+0x62>
 8007142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007144:	b12b      	cbz	r3, 8007152 <f_mkfs+0x62>
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714a:	d802      	bhi.n	8007152 <f_mkfs+0x62>
 800714c:	1e5a      	subs	r2, r3, #1
 800714e:	4213      	tst	r3, r2
 8007150:	d001      	beq.n	8007156 <f_mkfs+0x66>
 8007152:	2301      	movs	r3, #1
 8007154:	9309      	str	r3, [sp, #36]	; 0x24
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8007156:	b127      	cbz	r7, 8007162 <f_mkfs+0x72>
 8007158:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800715c:	d201      	bcs.n	8007162 <f_mkfs+0x72>
 800715e:	2013      	movs	r0, #19
 8007160:	e2b7      	b.n	80076d2 <f_mkfs+0x5e2>
 8007162:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8007166:	d901      	bls.n	800716c <f_mkfs+0x7c>
 8007168:	2013      	movs	r0, #19
 800716a:	e2b2      	b.n	80076d2 <f_mkfs+0x5e2>
 800716c:	1e7b      	subs	r3, r7, #1
 800716e:	421f      	tst	r7, r3
 8007170:	d001      	beq.n	8007176 <f_mkfs+0x86>
 8007172:	2013      	movs	r0, #19
 8007174:	e2ad      	b.n	80076d2 <f_mkfs+0x5e2>
	au /= ss;	/* Cluster size in unit of sector */
 8007176:	ea4f 2957 	mov.w	r9, r7, lsr #9

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800717a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800717c:	0a5b      	lsrs	r3, r3, #9
 800717e:	9305      	str	r3, [sp, #20]
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007180:	f8df a204 	ldr.w	sl, [pc, #516]	; 8007388 <f_mkfs+0x298>
 8007184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007186:	ea03 0a0a 	and.w	sl, r3, sl
	if (!szb_buf) return FR_MKFS_ABORTED;
 800718a:	f1ba 0f00 	cmp.w	sl, #0
 800718e:	d101      	bne.n	8007194 <f_mkfs+0xa4>
 8007190:	200e      	movs	r0, #14
 8007192:	e29e      	b.n	80076d2 <f_mkfs+0x5e2>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007194:	aa08      	add	r2, sp, #32
 8007196:	2101      	movs	r1, #1
 8007198:	4620      	mov	r0, r4
 800719a:	f7fe fbb1 	bl	8005900 <disk_ioctl>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f040 829a 	bne.w	80076d8 <f_mkfs+0x5e8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80071a4:	f016 0308 	ands.w	r3, r6, #8
 80071a8:	9306      	str	r3, [sp, #24]
 80071aa:	d00c      	beq.n	80071c6 <f_mkfs+0xd6>
 80071ac:	f04f 0800 	mov.w	r8, #0
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80071b0:	9a08      	ldr	r2, [sp, #32]
 80071b2:	4590      	cmp	r8, r2
 80071b4:	f200 8292 	bhi.w	80076dc <f_mkfs+0x5ec>
		sz_vol -= b_vol;						/* Volume size */
 80071b8:	eba2 0208 	sub.w	r2, r2, r8
 80071bc:	9208      	str	r2, [sp, #32]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80071be:	2a7f      	cmp	r2, #127	; 0x7f
 80071c0:	d804      	bhi.n	80071cc <f_mkfs+0xdc>
 80071c2:	200e      	movs	r0, #14
 80071c4:	e285      	b.n	80076d2 <f_mkfs+0x5e2>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80071c6:	f04f 083f 	mov.w	r8, #63	; 0x3f
 80071ca:	e7f1      	b.n	80071b0 <f_mkfs+0xc0>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80071cc:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80071d0:	f200 8286 	bhi.w	80076e0 <f_mkfs+0x5f0>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80071d4:	f016 0102 	ands.w	r1, r6, #2
 80071d8:	d006      	beq.n	80071e8 <f_mkfs+0xf8>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80071da:	f006 0307 	and.w	r3, r6, #7
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d069      	beq.n	80072b6 <f_mkfs+0x1c6>
 80071e2:	f016 0f01 	tst.w	r6, #1
 80071e6:	d06a      	beq.n	80072be <f_mkfs+0x1ce>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80071e8:	f016 0f01 	tst.w	r6, #1
 80071ec:	f000 827a 	beq.w	80076e4 <f_mkfs+0x5f4>
		fmt = FS_FAT16;
 80071f0:	2702      	movs	r7, #2
 80071f2:	4648      	mov	r0, r9
 80071f4:	9101      	str	r1, [sp, #4]
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80071f6:	2f03      	cmp	r7, #3
 80071f8:	d170      	bne.n	80072dc <f_mkfs+0x1ec>
				if (!pau) {	/* au auto-selection */
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d16a      	bne.n	80072d4 <f_mkfs+0x1e4>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80071fe:	ea4f 4c52 	mov.w	ip, r2, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007202:	2300      	movs	r3, #0
 8007204:	2601      	movs	r6, #1
 8007206:	9901      	ldr	r1, [sp, #4]
 8007208:	f8df e180 	ldr.w	lr, [pc, #384]	; 800738c <f_mkfs+0x29c>
 800720c:	f83e e013 	ldrh.w	lr, [lr, r3, lsl #1]
 8007210:	f1be 0f00 	cmp.w	lr, #0
 8007214:	d060      	beq.n	80072d8 <f_mkfs+0x1e8>
 8007216:	45f4      	cmp	ip, lr
 8007218:	d259      	bcs.n	80072ce <f_mkfs+0x1de>
 800721a:	9101      	str	r1, [sp, #4]
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800721c:	fbb2 fef6 	udiv	lr, r2, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007220:	f10e 0302 	add.w	r3, lr, #2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800722a:	0a5b      	lsrs	r3, r3, #9
 800722c:	9302      	str	r3, [sp, #8]
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800722e:	f8df c160 	ldr.w	ip, [pc, #352]	; 8007390 <f_mkfs+0x2a0>
 8007232:	44f4      	add	ip, lr
 8007234:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8007394 <f_mkfs+0x2a4>
 8007238:	45f4      	cmp	ip, lr
 800723a:	f200 8255 	bhi.w	80076e8 <f_mkfs+0x5f8>
				sz_dir = 0;		/* No static directory */
 800723e:	2300      	movs	r3, #0
 8007240:	9304      	str	r3, [sp, #16]
				sz_rsv = 32;	/* Number of reserved sectors */
 8007242:	f04f 0920 	mov.w	r9, #32
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007246:	eb09 0308 	add.w	r3, r9, r8
 800724a:	9303      	str	r3, [sp, #12]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800724c:	9902      	ldr	r1, [sp, #8]
 800724e:	eb01 0e03 	add.w	lr, r1, r3
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	449e      	add	lr, r3

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8007256:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800725a:	eb0e 0c0b 	add.w	ip, lr, fp
 800725e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007262:	f1cb 0b00 	rsb	fp, fp, #0
 8007266:	ea0c 0c0b 	and.w	ip, ip, fp
 800726a:	ebac 0c0e 	sub.w	ip, ip, lr
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800726e:	2f03      	cmp	r7, #3
 8007270:	d163      	bne.n	800733a <f_mkfs+0x24a>
				sz_rsv += n; b_fat += n;
 8007272:	44e1      	add	r9, ip
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	4463      	add	r3, ip
 8007278:	9303      	str	r3, [sp, #12]
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800727a:	eb0e 1e06 	add.w	lr, lr, r6, lsl #4
 800727e:	ebae 0e08 	sub.w	lr, lr, r8
 8007282:	4572      	cmp	r2, lr
 8007284:	f0c0 8232 	bcc.w	80076ec <f_mkfs+0x5fc>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007288:	eba2 0b09 	sub.w	fp, r2, r9
 800728c:	9b02      	ldr	r3, [sp, #8]
 800728e:	ebab 0b03 	sub.w	fp, fp, r3
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	ebab 0b03 	sub.w	fp, fp, r3
 8007298:	fbbb fbf6 	udiv	fp, fp, r6
			if (fmt == FS_FAT32) {
 800729c:	2f03      	cmp	r7, #3
 800729e:	d150      	bne.n	8007342 <f_mkfs+0x252>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80072a0:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 80072a4:	45f3      	cmp	fp, lr
 80072a6:	d84c      	bhi.n	8007342 <f_mkfs+0x252>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f040 8221 	bne.w	80076f0 <f_mkfs+0x600>
 80072ae:	0873      	lsrs	r3, r6, #1
 80072b0:	d10b      	bne.n	80072ca <f_mkfs+0x1da>
					return FR_MKFS_ABORTED;
 80072b2:	200e      	movs	r0, #14
 80072b4:	e20d      	b.n	80076d2 <f_mkfs+0x5e2>
				fmt = FS_FAT32; break;
 80072b6:	2703      	movs	r7, #3
 80072b8:	4648      	mov	r0, r9
 80072ba:	9101      	str	r1, [sp, #4]
 80072bc:	e79b      	b.n	80071f6 <f_mkfs+0x106>
 80072be:	2703      	movs	r7, #3
 80072c0:	4648      	mov	r0, r9
 80072c2:	9101      	str	r1, [sp, #4]
 80072c4:	e797      	b.n	80071f6 <f_mkfs+0x106>
 80072c6:	4603      	mov	r3, r0
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80072c8:	2703      	movs	r7, #3
 80072ca:	4618      	mov	r0, r3
 80072cc:	e793      	b.n	80071f6 <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80072ce:	3301      	adds	r3, #1
 80072d0:	0076      	lsls	r6, r6, #1
 80072d2:	e799      	b.n	8007208 <f_mkfs+0x118>
			pau = au;
 80072d4:	4606      	mov	r6, r0
 80072d6:	e7a1      	b.n	800721c <f_mkfs+0x12c>
 80072d8:	9101      	str	r1, [sp, #4]
 80072da:	e79f      	b.n	800721c <f_mkfs+0x12c>
				if (!pau) {	/* au auto-selection */
 80072dc:	bb10      	cbnz	r0, 8007324 <f_mkfs+0x234>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80072de:	ea4f 3c12 	mov.w	ip, r2, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80072e2:	2300      	movs	r3, #0
 80072e4:	2601      	movs	r6, #1
 80072e6:	9901      	ldr	r1, [sp, #4]
 80072e8:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8007398 <f_mkfs+0x2a8>
 80072ec:	f83e e013 	ldrh.w	lr, [lr, r3, lsl #1]
 80072f0:	f1be 0f00 	cmp.w	lr, #0
 80072f4:	d018      	beq.n	8007328 <f_mkfs+0x238>
 80072f6:	45f4      	cmp	ip, lr
 80072f8:	d211      	bcs.n	800731e <f_mkfs+0x22e>
 80072fa:	9101      	str	r1, [sp, #4]
				n_clst = sz_vol / pau;
 80072fc:	fbb2 f3f6 	udiv	r3, r2, r6
				if (n_clst > MAX_FAT12) {
 8007300:	f640 7ef5 	movw	lr, #4085	; 0xff5
 8007304:	4573      	cmp	r3, lr
 8007306:	d911      	bls.n	800732c <f_mkfs+0x23c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007308:	3302      	adds	r3, #2
 800730a:	005b      	lsls	r3, r3, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800730c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007310:	0a5b      	lsrs	r3, r3, #9
 8007312:	9302      	str	r3, [sp, #8]
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8007314:	2320      	movs	r3, #32
 8007316:	9304      	str	r3, [sp, #16]
				sz_rsv = 1;						/* Number of reserved sectors */
 8007318:	f04f 0901 	mov.w	r9, #1
 800731c:	e793      	b.n	8007246 <f_mkfs+0x156>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800731e:	3301      	adds	r3, #1
 8007320:	0076      	lsls	r6, r6, #1
 8007322:	e7e1      	b.n	80072e8 <f_mkfs+0x1f8>
			pau = au;
 8007324:	4606      	mov	r6, r0
 8007326:	e7e9      	b.n	80072fc <f_mkfs+0x20c>
 8007328:	9101      	str	r1, [sp, #4]
 800732a:	e7e7      	b.n	80072fc <f_mkfs+0x20c>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800732c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007330:	3301      	adds	r3, #1
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	3303      	adds	r3, #3
					fmt = FS_FAT12;
 8007336:	2701      	movs	r7, #1
 8007338:	e7e8      	b.n	800730c <f_mkfs+0x21c>
				sz_fat += n / n_fats;
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	4463      	add	r3, ip
 800733e:	9302      	str	r3, [sp, #8]
 8007340:	e79b      	b.n	800727a <f_mkfs+0x18a>
			if (fmt == FS_FAT16) {
 8007342:	2f02      	cmp	r7, #2
 8007344:	d12a      	bne.n	800739c <f_mkfs+0x2ac>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007346:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 800734a:	45f3      	cmp	fp, lr
 800734c:	d90e      	bls.n	800736c <f_mkfs+0x27c>
					if (!au && (pau * 2) <= 64) {
 800734e:	b910      	cbnz	r0, 8007356 <f_mkfs+0x266>
 8007350:	0073      	lsls	r3, r6, #1
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d9b9      	bls.n	80072ca <f_mkfs+0x1da>
					if ((opt & FM_FAT32)) {
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1b4      	bne.n	80072c6 <f_mkfs+0x1d6>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800735c:	2800      	cmp	r0, #0
 800735e:	f040 81c9 	bne.w	80076f4 <f_mkfs+0x604>
 8007362:	0073      	lsls	r3, r6, #1
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d9b0      	bls.n	80072ca <f_mkfs+0x1da>
					return FR_MKFS_ABORTED;
 8007368:	200e      	movs	r0, #14
 800736a:	e1b2      	b.n	80076d2 <f_mkfs+0x5e2>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800736c:	f640 7ef5 	movw	lr, #4085	; 0xff5
 8007370:	45f3      	cmp	fp, lr
 8007372:	d813      	bhi.n	800739c <f_mkfs+0x2ac>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007374:	2800      	cmp	r0, #0
 8007376:	f040 81bf 	bne.w	80076f8 <f_mkfs+0x608>
 800737a:	0073      	lsls	r3, r6, #1
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d9a4      	bls.n	80072ca <f_mkfs+0x1da>
					return FR_MKFS_ABORTED;
 8007380:	200e      	movs	r0, #14
 8007382:	e1a6      	b.n	80076d2 <f_mkfs+0x5e2>
 8007384:	2000073c 	.word	0x2000073c
 8007388:	fffffe00 	.word	0xfffffe00
 800738c:	08026440 	.word	0x08026440
 8007390:	ffff000a 	.word	0xffff000a
 8007394:	0ffeffff 	.word	0x0ffeffff
 8007398:	08026430 	.word	0x08026430
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800739c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80073a0:	2f01      	cmp	r7, #1
 80073a2:	bf14      	ite	ne
 80073a4:	2300      	movne	r3, #0
 80073a6:	2301      	moveq	r3, #1
 80073a8:	4593      	cmp	fp, r2
 80073aa:	bf98      	it	ls
 80073ac:	2300      	movls	r3, #0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 81a4 	bne.w	80076fc <f_mkfs+0x60c>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80073b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b8:	2100      	movs	r1, #0
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7fe fad3 	bl	8005966 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80073c0:	220b      	movs	r2, #11
 80073c2:	49d4      	ldr	r1, [pc, #848]	; (8007714 <f_mkfs+0x624>)
 80073c4:	4628      	mov	r0, r5
 80073c6:	f7fe fac5 	bl	8005954 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80073ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073ce:	f105 000b 	add.w	r0, r5, #11
 80073d2:	f7fe fab1 	bl	8005938 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80073d6:	736e      	strb	r6, [r5, #13]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80073d8:	fa1f f189 	uxth.w	r1, r9
 80073dc:	f105 000e 	add.w	r0, r5, #14
 80073e0:	f7fe faaa 	bl	8005938 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80073e4:	2301      	movs	r3, #1
 80073e6:	742b      	strb	r3, [r5, #16]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80073e8:	f105 0011 	add.w	r0, r5, #17
 80073ec:	2f03      	cmp	r7, #3
 80073ee:	f000 8105 	beq.w	80075fc <f_mkfs+0x50c>
 80073f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073f6:	f7fe fa9f 	bl	8005938 <st_word>
		if (sz_vol < 0x10000) {
 80073fa:	9908      	ldr	r1, [sp, #32]
 80073fc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007400:	f080 80fe 	bcs.w	8007600 <f_mkfs+0x510>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007404:	b289      	uxth	r1, r1
 8007406:	f105 0013 	add.w	r0, r5, #19
 800740a:	f7fe fa95 	bl	8005938 <st_word>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800740e:	23f8      	movs	r3, #248	; 0xf8
 8007410:	756b      	strb	r3, [r5, #21]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007412:	213f      	movs	r1, #63	; 0x3f
 8007414:	f105 0018 	add.w	r0, r5, #24
 8007418:	f7fe fa8e 	bl	8005938 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800741c:	21ff      	movs	r1, #255	; 0xff
 800741e:	f105 001a 	add.w	r0, r5, #26
 8007422:	f7fe fa89 	bl	8005938 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8007426:	4641      	mov	r1, r8
 8007428:	f105 001c 	add.w	r0, r5, #28
 800742c:	f7fe fa88 	bl	8005940 <st_dword>
		if (fmt == FS_FAT32) {
 8007430:	2f03      	cmp	r7, #3
 8007432:	f040 80ea 	bne.w	800760a <f_mkfs+0x51a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8007436:	f004 fa35 	bl	800b8a4 <get_fattime>
 800743a:	4601      	mov	r1, r0
 800743c:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8007440:	f7fe fa7e 	bl	8005940 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007444:	9902      	ldr	r1, [sp, #8]
 8007446:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800744a:	f7fe fa79 	bl	8005940 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800744e:	2102      	movs	r1, #2
 8007450:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8007454:	f7fe fa74 	bl	8005940 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007458:	2101      	movs	r1, #1
 800745a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800745e:	f7fe fa6b 	bl	8005938 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007462:	2106      	movs	r1, #6
 8007464:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8007468:	f7fe fa66 	bl	8005938 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007472:	2329      	movs	r3, #41	; 0x29
 8007474:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007478:	2213      	movs	r2, #19
 800747a:	49a7      	ldr	r1, [pc, #668]	; (8007718 <f_mkfs+0x628>)
 800747c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8007480:	f7fe fa68 	bl	8005954 <mem_cpy>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8007484:	f505 73ff 	add.w	r3, r5, #510	; 0x1fe
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fa52 	bl	8005938 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007494:	2301      	movs	r3, #1
 8007496:	4642      	mov	r2, r8
 8007498:	4629      	mov	r1, r5
 800749a:	4620      	mov	r0, r4
 800749c:	f7fe fa24 	bl	80058e8 <disk_write>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f040 812d 	bne.w	8007700 <f_mkfs+0x610>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80074a6:	2f03      	cmp	r7, #3
 80074a8:	d133      	bne.n	8007512 <f_mkfs+0x422>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80074aa:	2301      	movs	r3, #1
 80074ac:	f108 0206 	add.w	r2, r8, #6
 80074b0:	4629      	mov	r1, r5
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7fe fa18 	bl	80058e8 <disk_write>
			mem_set(buf, 0, ss);
 80074b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074bc:	2100      	movs	r1, #0
 80074be:	4628      	mov	r0, r5
 80074c0:	f7fe fa51 	bl	8005966 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80074c4:	4995      	ldr	r1, [pc, #596]	; (800771c <f_mkfs+0x62c>)
 80074c6:	4628      	mov	r0, r5
 80074c8:	f7fe fa3a 	bl	8005940 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80074cc:	4994      	ldr	r1, [pc, #592]	; (8007720 <f_mkfs+0x630>)
 80074ce:	f505 70f2 	add.w	r0, r5, #484	; 0x1e4
 80074d2:	f7fe fa35 	bl	8005940 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80074d6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80074da:	f505 70f4 	add.w	r0, r5, #488	; 0x1e8
 80074de:	f7fe fa2f 	bl	8005940 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80074e2:	2102      	movs	r1, #2
 80074e4:	f505 70f6 	add.w	r0, r5, #492	; 0x1ec
 80074e8:	f7fe fa2a 	bl	8005940 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80074ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80074f0:	9801      	ldr	r0, [sp, #4]
 80074f2:	f7fe fa21 	bl	8005938 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80074f6:	2301      	movs	r3, #1
 80074f8:	f108 0207 	add.w	r2, r8, #7
 80074fc:	4629      	mov	r1, r5
 80074fe:	4620      	mov	r0, r4
 8007500:	f7fe f9f2 	bl	80058e8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007504:	2301      	movs	r3, #1
 8007506:	eb08 0203 	add.w	r2, r8, r3
 800750a:	4629      	mov	r1, r5
 800750c:	4620      	mov	r0, r4
 800750e:	f7fe f9eb 	bl	80058e8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007512:	4652      	mov	r2, sl
 8007514:	2100      	movs	r1, #0
 8007516:	4628      	mov	r0, r5
 8007518:	f7fe fa25 	bl	8005966 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800751c:	f04f 0b00 	mov.w	fp, #0
 8007520:	f1bb 0f00 	cmp.w	fp, #0
 8007524:	f000 808b 	beq.w	800763e <f_mkfs+0x54e>
				sect += n; nsect -= n;
			} while (nsect);
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007528:	2f03      	cmp	r7, #3
 800752a:	f040 80c3 	bne.w	80076b4 <f_mkfs+0x5c4>
 800752e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007532:	46b1      	mov	r9, r6
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	454b      	cmp	r3, r9
 8007538:	bf28      	it	cs
 800753a:	464b      	movcs	r3, r9
 800753c:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800753e:	4652      	mov	r2, sl
 8007540:	4629      	mov	r1, r5
 8007542:	4620      	mov	r0, r4
 8007544:	f7fe f9d0 	bl	80058e8 <disk_write>
 8007548:	2800      	cmp	r0, #0
 800754a:	f040 80dd 	bne.w	8007708 <f_mkfs+0x618>
			sect += n; nsect -= n;
 800754e:	44b2      	add	sl, r6
		} while (nsect);
 8007550:	ebb9 0906 	subs.w	r9, r9, r6
 8007554:	d1ee      	bne.n	8007534 <f_mkfs+0x444>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007556:	2f03      	cmp	r7, #3
 8007558:	f000 80b1 	beq.w	80076be <f_mkfs+0x5ce>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 800755c:	9b08      	ldr	r3, [sp, #32]
 800755e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007562:	f080 80af 	bcs.w	80076c4 <f_mkfs+0x5d4>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007566:	2f02      	cmp	r7, #2
 8007568:	f040 80af 	bne.w	80076ca <f_mkfs+0x5da>
 800756c:	f04f 0904 	mov.w	r9, #4
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	bbcb      	cbnz	r3, 80075e8 <f_mkfs+0x4f8>
			mem_set(buf, 0, ss);
 8007574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007578:	2100      	movs	r1, #0
 800757a:	4628      	mov	r0, r5
 800757c:	f7fe f9f3 	bl	8005966 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007580:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007584:	9801      	ldr	r0, [sp, #4]
 8007586:	f7fe f9d7 	bl	8005938 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800758a:	2600      	movs	r6, #0
 800758c:	f885 61be 	strb.w	r6, [r5, #446]	; 0x1be
			pte[PTE_StHead] = 1;				/* Start head */
 8007590:	2701      	movs	r7, #1
 8007592:	f885 71bf 	strb.w	r7, [r5, #447]	; 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
 8007596:	f885 71c0 	strb.w	r7, [r5, #448]	; 0x1c0
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800759a:	f885 61c1 	strb.w	r6, [r5, #449]	; 0x1c1
			pte[PTE_System] = sys;				/* System type */
 800759e:	f885 91c2 	strb.w	r9, [r5, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	4443      	add	r3, r8
 80075a6:	f643 62c1 	movw	r2, #16065	; 0x3ec1
 80075aa:	fbb3 f3f2 	udiv	r3, r3, r2
			pte[PTE_EdHead] = 254;				/* End head */
 80075ae:	22fe      	movs	r2, #254	; 0xfe
 80075b0:	f885 21c3 	strb.w	r2, [r5, #451]	; 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80075b4:	089a      	lsrs	r2, r3, #2
 80075b6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80075ba:	f885 21c4 	strb.w	r2, [r5, #452]	; 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80075be:	f885 31c5 	strb.w	r3, [r5, #453]	; 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80075c2:	4641      	mov	r1, r8
 80075c4:	f505 70e3 	add.w	r0, r5, #454	; 0x1c6
 80075c8:	f7fe f9ba 	bl	8005940 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80075cc:	9908      	ldr	r1, [sp, #32]
 80075ce:	f505 70e5 	add.w	r0, r5, #458	; 0x1ca
 80075d2:	f7fe f9b5 	bl	8005940 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80075d6:	463b      	mov	r3, r7
 80075d8:	4632      	mov	r2, r6
 80075da:	4629      	mov	r1, r5
 80075dc:	4620      	mov	r0, r4
 80075de:	f7fe f983 	bl	80058e8 <disk_write>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	f040 8092 	bne.w	800770c <f_mkfs+0x61c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80075e8:	2200      	movs	r2, #0
 80075ea:	4611      	mov	r1, r2
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7fe f987 	bl	8005900 <disk_ioctl>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f000 808c 	beq.w	8007710 <f_mkfs+0x620>
 80075f8:	2001      	movs	r0, #1
 80075fa:	e06a      	b.n	80076d2 <f_mkfs+0x5e2>
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80075fc:	2100      	movs	r1, #0
 80075fe:	e6fa      	b.n	80073f6 <f_mkfs+0x306>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007600:	f105 0020 	add.w	r0, r5, #32
 8007604:	f7fe f99c 	bl	8005940 <st_dword>
 8007608:	e701      	b.n	800740e <f_mkfs+0x31e>
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800760a:	f004 f94b 	bl	800b8a4 <get_fattime>
 800760e:	4601      	mov	r1, r0
 8007610:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8007614:	f7fe f994 	bl	8005940 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007618:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800761c:	f105 0016 	add.w	r0, r5, #22
 8007620:	f7fe f98a 	bl	8005938 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800762a:	2329      	movs	r3, #41	; 0x29
 800762c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007630:	2213      	movs	r2, #19
 8007632:	493c      	ldr	r1, [pc, #240]	; (8007724 <f_mkfs+0x634>)
 8007634:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8007638:	f7fe f98c 	bl	8005954 <mem_cpy>
 800763c:	e722      	b.n	8007484 <f_mkfs+0x394>
			if (fmt == FS_FAT32) {
 800763e:	2f03      	cmp	r7, #3
 8007640:	d12e      	bne.n	80076a0 <f_mkfs+0x5b0>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007642:	f06f 0107 	mvn.w	r1, #7
 8007646:	4628      	mov	r0, r5
 8007648:	f7fe f97a 	bl	8005940 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800764c:	f04f 31ff 	mov.w	r1, #4294967295
 8007650:	1d28      	adds	r0, r5, #4
 8007652:	f7fe f975 	bl	8005940 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007656:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800765a:	f105 0008 	add.w	r0, r5, #8
 800765e:	f7fe f96f 	bl	8005940 <st_dword>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007662:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007666:	46ba      	mov	sl, r7
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	454b      	cmp	r3, r9
 800766c:	bf28      	it	cs
 800766e:	464b      	movcs	r3, r9
 8007670:	461f      	mov	r7, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007672:	9a03      	ldr	r2, [sp, #12]
 8007674:	4629      	mov	r1, r5
 8007676:	4620      	mov	r0, r4
 8007678:	f7fe f936 	bl	80058e8 <disk_write>
 800767c:	2800      	cmp	r0, #0
 800767e:	d141      	bne.n	8007704 <f_mkfs+0x614>
				mem_set(buf, 0, ss);
 8007680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007684:	2100      	movs	r1, #0
 8007686:	4628      	mov	r0, r5
 8007688:	f7fe f96d 	bl	8005966 <mem_set>
				sect += n; nsect -= n;
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	443b      	add	r3, r7
 8007690:	9303      	str	r3, [sp, #12]
			} while (nsect);
 8007692:	ebb9 0907 	subs.w	r9, r9, r7
 8007696:	d1e7      	bne.n	8007668 <f_mkfs+0x578>
 8007698:	4657      	mov	r7, sl
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800769a:	f10b 0b01 	add.w	fp, fp, #1
 800769e:	e73f      	b.n	8007520 <f_mkfs+0x430>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80076a0:	2f01      	cmp	r7, #1
 80076a2:	d104      	bne.n	80076ae <f_mkfs+0x5be>
 80076a4:	4920      	ldr	r1, [pc, #128]	; (8007728 <f_mkfs+0x638>)
 80076a6:	4628      	mov	r0, r5
 80076a8:	f7fe f94a 	bl	8005940 <st_dword>
 80076ac:	e7d9      	b.n	8007662 <f_mkfs+0x572>
 80076ae:	f06f 0107 	mvn.w	r1, #7
 80076b2:	e7f8      	b.n	80076a6 <f_mkfs+0x5b6>
 80076b4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80076b8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80076bc:	e73a      	b.n	8007534 <f_mkfs+0x444>
			sys = 0x0C;		/* FAT32X */
 80076be:	f04f 090c 	mov.w	r9, #12
 80076c2:	e755      	b.n	8007570 <f_mkfs+0x480>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80076c4:	f04f 0906 	mov.w	r9, #6
 80076c8:	e752      	b.n	8007570 <f_mkfs+0x480>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80076ca:	f04f 0901 	mov.w	r9, #1
 80076ce:	e74f      	b.n	8007570 <f_mkfs+0x480>
	if (vol < 0) return FR_INVALID_DRIVE;
 80076d0:	200b      	movs	r0, #11

	return FR_OK;
}
 80076d2:	b00b      	add	sp, #44	; 0x2c
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80076d8:	2001      	movs	r0, #1
 80076da:	e7fa      	b.n	80076d2 <f_mkfs+0x5e2>
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80076dc:	200e      	movs	r0, #14
 80076de:	e7f8      	b.n	80076d2 <f_mkfs+0x5e2>
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80076e0:	2013      	movs	r0, #19
 80076e2:	e7f6      	b.n	80076d2 <f_mkfs+0x5e2>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80076e4:	2013      	movs	r0, #19
 80076e6:	e7f4      	b.n	80076d2 <f_mkfs+0x5e2>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80076e8:	200e      	movs	r0, #14
 80076ea:	e7f2      	b.n	80076d2 <f_mkfs+0x5e2>
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80076ec:	200e      	movs	r0, #14
 80076ee:	e7f0      	b.n	80076d2 <f_mkfs+0x5e2>
					return FR_MKFS_ABORTED;
 80076f0:	200e      	movs	r0, #14
 80076f2:	e7ee      	b.n	80076d2 <f_mkfs+0x5e2>
					return FR_MKFS_ABORTED;
 80076f4:	200e      	movs	r0, #14
 80076f6:	e7ec      	b.n	80076d2 <f_mkfs+0x5e2>
					return FR_MKFS_ABORTED;
 80076f8:	200e      	movs	r0, #14
 80076fa:	e7ea      	b.n	80076d2 <f_mkfs+0x5e2>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80076fc:	200e      	movs	r0, #14
 80076fe:	e7e8      	b.n	80076d2 <f_mkfs+0x5e2>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007700:	2001      	movs	r0, #1
 8007702:	e7e6      	b.n	80076d2 <f_mkfs+0x5e2>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007704:	2001      	movs	r0, #1
 8007706:	e7e4      	b.n	80076d2 <f_mkfs+0x5e2>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007708:	2001      	movs	r0, #1
 800770a:	e7e2      	b.n	80076d2 <f_mkfs+0x5e2>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800770c:	2001      	movs	r0, #1
 800770e:	e7e0      	b.n	80076d2 <f_mkfs+0x5e2>
	return FR_OK;
 8007710:	2000      	movs	r0, #0
 8007712:	e7de      	b.n	80076d2 <f_mkfs+0x5e2>
 8007714:	08026450 	.word	0x08026450
 8007718:	0802645c 	.word	0x0802645c
 800771c:	41615252 	.word	0x41615252
 8007720:	61417272 	.word	0x61417272
 8007724:	08026470 	.word	0x08026470
 8007728:	00fffff8 	.word	0x00fffff8

0800772c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <FATFS_LinkDriverEx+0x44>)
 800772e:	7a5b      	ldrb	r3, [r3, #9]
 8007730:	b9db      	cbnz	r3, 800776a <FATFS_LinkDriverEx+0x3e>
{
 8007732:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <FATFS_LinkDriverEx+0x44>)
 8007736:	7a5d      	ldrb	r5, [r3, #9]
 8007738:	b2ed      	uxtb	r5, r5
 800773a:	2400      	movs	r4, #0
 800773c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800773e:	7a5d      	ldrb	r5, [r3, #9]
 8007740:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007744:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007746:	7a58      	ldrb	r0, [r3, #9]
 8007748:	4418      	add	r0, r3
 800774a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800774c:	7a5a      	ldrb	r2, [r3, #9]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	1c50      	adds	r0, r2, #1
 8007752:	b2c0      	uxtb	r0, r0
 8007754:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8007756:	3230      	adds	r2, #48	; 0x30
 8007758:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800775a:	233a      	movs	r3, #58	; 0x3a
 800775c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800775e:	232f      	movs	r3, #47	; 0x2f
 8007760:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007762:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8007764:	4620      	mov	r0, r4
  }

  return ret;
}
 8007766:	bc30      	pop	{r4, r5}
 8007768:	4770      	bx	lr
  uint8_t ret = 1;
 800776a:	2001      	movs	r0, #1
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000764 	.word	0x20000764

08007774 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007774:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	f7ff ffd8 	bl	800772c <FATFS_LinkDriverEx>
}
 800777c:	bd08      	pop	{r3, pc}
	...

08007780 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <FATFS_UnLinkDriverEx+0x38>)
 8007782:	7a5b      	ldrb	r3, [r3, #9]
 8007784:	b19b      	cbz	r3, 80077ae <FATFS_UnLinkDriverEx+0x2e>
  {
    DiskNum = path[0] - '0';
 8007786:	7803      	ldrb	r3, [r0, #0]
 8007788:	3b30      	subs	r3, #48	; 0x30
 800778a:	b2db      	uxtb	r3, r3
    if(disk.drv[DiskNum] != 0)
 800778c:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <FATFS_UnLinkDriverEx+0x38>)
 800778e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007792:	6852      	ldr	r2, [r2, #4]
 8007794:	b16a      	cbz	r2, 80077b2 <FATFS_UnLinkDriverEx+0x32>
    {
      disk.drv[DiskNum] = 0;
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <FATFS_UnLinkDriverEx+0x38>)
 8007798:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800779c:	2000      	movs	r0, #0
 800779e:	6048      	str	r0, [r1, #4]
      disk.lun[DiskNum] = 0;
 80077a0:	4413      	add	r3, r2
 80077a2:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 80077a4:	7a53      	ldrb	r3, [r2, #9]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	7253      	strb	r3, [r2, #9]
 80077ac:	4770      	bx	lr
  uint8_t ret = 1;
 80077ae:	2001      	movs	r0, #1
 80077b0:	4770      	bx	lr
 80077b2:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000764 	.word	0x20000764

080077bc <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80077bc:	b508      	push	{r3, lr}
  return FATFS_UnLinkDriverEx(path, 0);
 80077be:	2100      	movs	r1, #0
 80077c0:	f7ff ffde 	bl	8007780 <FATFS_UnLinkDriverEx>
}
 80077c4:	bd08      	pop	{r3, pc}

080077c6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80077c6:	b510      	push	{r4, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	460c      	mov	r4, r1

    int ret;

    osSemaphoreDef(SEM);
 80077cc:	a802      	add	r0, sp, #8
 80077ce:	2300      	movs	r3, #0
 80077d0:	f840 3d04 	str.w	r3, [r0, #-4]!
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80077d4:	2101      	movs	r1, #1
 80077d6:	f000 f8c9 	bl	800796c <osSemaphoreCreate>
 80077da:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 80077dc:	3000      	adds	r0, #0
 80077de:	bf18      	it	ne
 80077e0:	2001      	movne	r0, #1
 80077e2:	b002      	add	sp, #8
 80077e4:	bd10      	pop	{r4, pc}

080077e6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80077e6:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 80077e8:	f000 f93c 	bl	8007a64 <osSemaphoreDelete>
    return 1;
}
 80077ec:	2001      	movs	r0, #1
 80077ee:	bd08      	pop	{r3, pc}

080077f0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80077f0:	b508      	push	{r3, lr}
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80077f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80077f6:	f000 f8cd 	bl	8007994 <osSemaphoreWait>
 80077fa:	b908      	cbnz	r0, 8007800 <ff_req_grant+0x10>
  {
    ret = 1;
 80077fc:	2001      	movs	r0, #1
  }

  return ret;
}
 80077fe:	bd08      	pop	{r3, pc}
  int ret = 0;
 8007800:	2000      	movs	r0, #0
 8007802:	bd08      	pop	{r3, pc}

08007804 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007804:	b508      	push	{r3, lr}
  osSemaphoreRelease(sobj);
 8007806:	f000 f8ff 	bl	8007a08 <osSemaphoreRelease>
 800780a:	bd08      	pop	{r3, pc}

0800780c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800780c:	2884      	cmp	r0, #132	; 0x84
 800780e:	d001      	beq.n	8007814 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007810:	3003      	adds	r0, #3
 8007812:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007814:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8007816:	4770      	bx	lr

08007818 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007818:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 800781c:	3000      	adds	r0, #0
 800781e:	bf18      	it	ne
 8007820:	2001      	movne	r0, #1
 8007822:	4770      	bx	lr

08007824 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007824:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007826:	f001 f95d 	bl	8008ae4 <vTaskStartScheduler>
  
  return osOK;
}
 800782a:	2000      	movs	r0, #0
 800782c:	bd08      	pop	{r3, pc}

0800782e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800782e:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8007830:	f7ff fff2 	bl	8007818 <inHandlerMode>
 8007834:	b910      	cbnz	r0, 800783c <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8007836:	f001 f99f 	bl	8008b78 <xTaskGetTickCount>
  }
}
 800783a:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 800783c:	f001 f9a2 	bl	8008b84 <xTaskGetTickCountFromISR>
 8007840:	bd08      	pop	{r3, pc}

08007842 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007844:	b085      	sub	sp, #20
 8007846:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007848:	6844      	ldr	r4, [r0, #4]
 800784a:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800784c:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800784e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007852:	f7ff ffdb 	bl	800780c <makeFreeRtosPriority>
 8007856:	ab03      	add	r3, sp, #12
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	9000      	str	r0, [sp, #0]
 800785c:	463b      	mov	r3, r7
 800785e:	b2b2      	uxth	r2, r6
 8007860:	4629      	mov	r1, r5
 8007862:	4620      	mov	r0, r4
 8007864:	f001 f90c 	bl	8008a80 <xTaskCreate>
 8007868:	2801      	cmp	r0, #1
 800786a:	d102      	bne.n	8007872 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800786c:	9803      	ldr	r0, [sp, #12]
}
 800786e:	b005      	add	sp, #20
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8007872:	2000      	movs	r0, #0
 8007874:	e7fb      	b.n	800786e <osThreadCreate+0x2c>

08007876 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8007876:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8007878:	f001 fc1e 	bl	80090b8 <xTaskGetCurrentTaskHandle>
#else
	return NULL;
#endif
}
 800787c:	bd08      	pop	{r3, pc}

0800787e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800787e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007880:	4603      	mov	r3, r0
 8007882:	b900      	cbnz	r0, 8007886 <osDelay+0x8>
 8007884:	2301      	movs	r3, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fa96 	bl	8008db8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800788c:	2000      	movs	r0, #0
 800788e:	bd08      	pop	{r3, pc}

08007890 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007890:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007892:	2001      	movs	r0, #1
 8007894:	f000 fddc 	bl	8008450 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8007898:	bd08      	pop	{r3, pc}
	...

0800789c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800789c:	b530      	push	{r4, r5, lr}
 800789e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80078a0:	2300      	movs	r3, #0
 80078a2:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80078a4:	b360      	cbz	r0, 8007900 <osMutexWait+0x64>
 80078a6:	460c      	mov	r4, r1
 80078a8:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80078aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80078ae:	d00d      	beq.n	80078cc <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80078b0:	b901      	cbnz	r1, 80078b4 <osMutexWait+0x18>
  ticks = 0;
 80078b2:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80078b4:	f7ff ffb0 	bl	8007818 <inHandlerMode>
 80078b8:	b1b8      	cbz	r0, 80078ea <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80078ba:	aa01      	add	r2, sp, #4
 80078bc:	2100      	movs	r1, #0
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 ff16 	bl	80086f0 <xQueueReceiveFromISR>
 80078c4:	2801      	cmp	r0, #1
 80078c6:	d004      	beq.n	80078d2 <osMutexWait+0x36>
      return osErrorOS;
 80078c8:	20ff      	movs	r0, #255	; 0xff
 80078ca:	e017      	b.n	80078fc <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 80078cc:	f04f 34ff 	mov.w	r4, #4294967295
 80078d0:	e7f0      	b.n	80078b4 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	b1b3      	cbz	r3, 8007904 <osMutexWait+0x68>
 80078d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <osMutexWait+0x70>)
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80078e6:	2000      	movs	r0, #0
 80078e8:	e008      	b.n	80078fc <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	4622      	mov	r2, r4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 fe1f 	bl	8008534 <xQueueGenericReceive>
 80078f6:	2801      	cmp	r0, #1
 80078f8:	d006      	beq.n	8007908 <osMutexWait+0x6c>
    return osErrorOS;
 80078fa:	20ff      	movs	r0, #255	; 0xff
}
 80078fc:	b003      	add	sp, #12
 80078fe:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8007900:	2080      	movs	r0, #128	; 0x80
 8007902:	e7fb      	b.n	80078fc <osMutexWait+0x60>
  return osOK;
 8007904:	2000      	movs	r0, #0
 8007906:	e7f9      	b.n	80078fc <osMutexWait+0x60>
 8007908:	2000      	movs	r0, #0
 800790a:	e7f7      	b.n	80078fc <osMutexWait+0x60>
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007910:	b510      	push	{r4, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800791a:	f7ff ff7d 	bl	8007818 <inHandlerMode>
 800791e:	b1a0      	cbz	r0, 800794a <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007920:	a901      	add	r1, sp, #4
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fd9f 	bl	8008466 <xQueueGiveFromISR>
 8007928:	2801      	cmp	r0, #1
 800792a:	d002      	beq.n	8007932 <osMutexRelease+0x22>
      return osErrorOS;
 800792c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800792e:	b002      	add	sp, #8
 8007930:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	b1ab      	cbz	r3, 8007962 <osMutexRelease+0x52>
 8007936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <osMutexRelease+0x58>)
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8007946:	2000      	movs	r0, #0
 8007948:	e7f1      	b.n	800792e <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800794a:	2300      	movs	r3, #0
 800794c:	461a      	mov	r2, r3
 800794e:	4619      	mov	r1, r3
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fca5 	bl	80082a0 <xQueueGenericSend>
 8007956:	2801      	cmp	r0, #1
 8007958:	d001      	beq.n	800795e <osMutexRelease+0x4e>
    result = osErrorOS;
 800795a:	20ff      	movs	r0, #255	; 0xff
 800795c:	e7e7      	b.n	800792e <osMutexRelease+0x1e>
  osStatus result = osOK;
 800795e:	2000      	movs	r0, #0
 8007960:	e7e5      	b.n	800792e <osMutexRelease+0x1e>
 8007962:	2000      	movs	r0, #0
 8007964:	e7e3      	b.n	800792e <osMutexRelease+0x1e>
 8007966:	bf00      	nop
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800796c:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800796e:	2901      	cmp	r1, #1
 8007970:	d10d      	bne.n	800798e <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8007972:	2203      	movs	r2, #3
 8007974:	2100      	movs	r1, #0
 8007976:	2001      	movs	r0, #1
 8007978:	f000 fc6c 	bl	8008254 <xQueueGenericCreate>
 800797c:	4604      	mov	r4, r0
 800797e:	b120      	cbz	r0, 800798a <osSemaphoreCreate+0x1e>
 8007980:	2300      	movs	r3, #0
 8007982:	461a      	mov	r2, r3
 8007984:	4619      	mov	r1, r3
 8007986:	f000 fc8b 	bl	80082a0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800798a:	4620      	mov	r0, r4
 800798c:	bd10      	pop	{r4, pc}
    return NULL;
 800798e:	2400      	movs	r4, #0
 8007990:	e7fb      	b.n	800798a <osSemaphoreCreate+0x1e>
	...

08007994 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007994:	b530      	push	{r4, r5, lr}
 8007996:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007998:	2300      	movs	r3, #0
 800799a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800799c:	b360      	cbz	r0, 80079f8 <osSemaphoreWait+0x64>
 800799e:	460c      	mov	r4, r1
 80079a0:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80079a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80079a6:	d00d      	beq.n	80079c4 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80079a8:	b901      	cbnz	r1, 80079ac <osSemaphoreWait+0x18>
  ticks = 0;
 80079aa:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80079ac:	f7ff ff34 	bl	8007818 <inHandlerMode>
 80079b0:	b1b8      	cbz	r0, 80079e2 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80079b2:	aa01      	add	r2, sp, #4
 80079b4:	2100      	movs	r1, #0
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fe9a 	bl	80086f0 <xQueueReceiveFromISR>
 80079bc:	2801      	cmp	r0, #1
 80079be:	d004      	beq.n	80079ca <osSemaphoreWait+0x36>
      return osErrorOS;
 80079c0:	20ff      	movs	r0, #255	; 0xff
 80079c2:	e017      	b.n	80079f4 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 80079c4:	f04f 34ff 	mov.w	r4, #4294967295
 80079c8:	e7f0      	b.n	80079ac <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	b1b3      	cbz	r3, 80079fc <osSemaphoreWait+0x68>
 80079ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <osSemaphoreWait+0x70>)
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80079de:	2000      	movs	r0, #0
 80079e0:	e008      	b.n	80079f4 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80079e2:	2300      	movs	r3, #0
 80079e4:	4622      	mov	r2, r4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 fda3 	bl	8008534 <xQueueGenericReceive>
 80079ee:	2801      	cmp	r0, #1
 80079f0:	d006      	beq.n	8007a00 <osSemaphoreWait+0x6c>
    return osErrorOS;
 80079f2:	20ff      	movs	r0, #255	; 0xff
}
 80079f4:	b003      	add	sp, #12
 80079f6:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80079f8:	2080      	movs	r0, #128	; 0x80
 80079fa:	e7fb      	b.n	80079f4 <osSemaphoreWait+0x60>
  return osOK;
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7f9      	b.n	80079f4 <osSemaphoreWait+0x60>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e7f7      	b.n	80079f4 <osSemaphoreWait+0x60>
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8007a12:	f7ff ff01 	bl	8007818 <inHandlerMode>
 8007a16:	b1a0      	cbz	r0, 8007a42 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007a18:	a901      	add	r1, sp, #4
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fd23 	bl	8008466 <xQueueGiveFromISR>
 8007a20:	2801      	cmp	r0, #1
 8007a22:	d002      	beq.n	8007a2a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8007a24:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8007a26:	b002      	add	sp, #8
 8007a28:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	b1ab      	cbz	r3, 8007a5a <osSemaphoreRelease+0x52>
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <osSemaphoreRelease+0x58>)
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e7f1      	b.n	8007a26 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007a42:	2300      	movs	r3, #0
 8007a44:	461a      	mov	r2, r3
 8007a46:	4619      	mov	r1, r3
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fc29 	bl	80082a0 <xQueueGenericSend>
 8007a4e:	2801      	cmp	r0, #1
 8007a50:	d001      	beq.n	8007a56 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8007a52:	20ff      	movs	r0, #255	; 0xff
 8007a54:	e7e7      	b.n	8007a26 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8007a56:	2000      	movs	r0, #0
 8007a58:	e7e5      	b.n	8007a26 <osSemaphoreRelease+0x1e>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e7e3      	b.n	8007a26 <osSemaphoreRelease+0x1e>
 8007a5e:	bf00      	nop
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8007a68:	f7ff fed6 	bl	8007818 <inHandlerMode>
 8007a6c:	b108      	cbz	r0, 8007a72 <osSemaphoreDelete+0xe>
    return osErrorISR;
 8007a6e:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8007a70:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 feb4 	bl	80087e0 <vQueueDelete>
  return osOK; 
 8007a78:	2000      	movs	r0, #0
 8007a7a:	bd10      	pop	{r4, pc}

08007a7c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007a7c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007a7e:	f001 fb21 	bl	80090c4 <xTaskGetSchedulerState>
 8007a82:	2801      	cmp	r0, #1
 8007a84:	d001      	beq.n	8007a8a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007a86:	f000 f91d 	bl	8007cc4 <xPortSysTickHandler>
 8007a8a:	bd08      	pop	{r3, pc}

08007a8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a8c:	f100 0308 	add.w	r3, r0, #8
 8007a90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6003      	str	r3, [r0, #0]
 8007aa0:	4770      	bx	lr

08007aa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6103      	str	r3, [r0, #16]
 8007aa6:	4770      	bx	lr

08007aa8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007aa8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ab4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ab6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007ab8:	6803      	ldr	r3, [r0, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	4770      	bx	lr

08007ac0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ac0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ac2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ac4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007ac8:	d002      	beq.n	8007ad0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aca:	f100 0208 	add.w	r2, r0, #8
 8007ace:	e002      	b.n	8007ad6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ad0:	6902      	ldr	r2, [r0, #16]
 8007ad2:	e004      	b.n	8007ade <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6853      	ldr	r3, [r2, #4]
 8007ad8:	681c      	ldr	r4, [r3, #0]
 8007ada:	42a5      	cmp	r5, r4
 8007adc:	d2fa      	bcs.n	8007ad4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ade:	6853      	ldr	r3, [r2, #4]
 8007ae0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ae2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ae4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ae6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ae8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007aea:	6803      	ldr	r3, [r0, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	6003      	str	r3, [r0, #0]
}
 8007af0:	bc30      	pop	{r4, r5}
 8007af2:	4770      	bx	lr

08007af4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007af4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007af6:	6842      	ldr	r2, [r0, #4]
 8007af8:	6881      	ldr	r1, [r0, #8]
 8007afa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007afc:	6882      	ldr	r2, [r0, #8]
 8007afe:	6841      	ldr	r1, [r0, #4]
 8007b00:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	4290      	cmp	r0, r2
 8007b06:	d005      	beq.n	8007b14 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007b08:	2200      	movs	r2, #0
 8007b0a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	3801      	subs	r0, #1
 8007b10:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8007b12:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b14:	6882      	ldr	r2, [r0, #8]
 8007b16:	605a      	str	r2, [r3, #4]
 8007b18:	e7f6      	b.n	8007b08 <uxListRemove+0x14>
	...

08007b1c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <prvTaskExitError+0x38>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d00a      	beq.n	8007b3c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	b672      	cpsid	i
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	b662      	cpsie	i
 8007b3a:	e7fe      	b.n	8007b3a <prvTaskExitError+0x1e>
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	e7fe      	b.n	8007b50 <prvTaskExitError+0x34>
 8007b52:	bf00      	nop
 8007b54:	20000014 	.word	0x20000014

08007b58 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b58:	4806      	ldr	r0, [pc, #24]	; (8007b74 <prvPortStartFirstTask+0x1c>)
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f380 8808 	msr	MSP, r0
 8007b62:	b662      	cpsie	i
 8007b64:	b661      	cpsie	f
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	df00      	svc	0
 8007b70:	bf00      	nop
 8007b72:	0000      	.short	0x0000
 8007b74:	e000ed08 	.word	0xe000ed08

08007b78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b88 <vPortEnableVFP+0x10>
 8007b7c:	6801      	ldr	r1, [r0, #0]
 8007b7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b82:	6001      	str	r1, [r0, #0]
 8007b84:	4770      	bx	lr
 8007b86:	0000      	.short	0x0000
 8007b88:	e000ed88 	.word	0xe000ed88

08007b8c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b90:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b94:	f021 0101 	bic.w	r1, r1, #1
 8007b98:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <pxPortInitialiseStack+0x28>)
 8007b9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ba2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8007ba6:	f06f 0302 	mvn.w	r3, #2
 8007baa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007bae:	3844      	subs	r0, #68	; 0x44
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	08007b1d 	.word	0x08007b1d
	...

08007bc0 <SVC_Handler>:
	__asm volatile (
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <pxCurrentTCBConst2>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f380 8809 	msr	PSP, r0
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8811 	msr	BASEPRI, r0
 8007bda:	4770      	bx	lr
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst2>:
 8007be0:	2000f790 	.word	0x2000f790

08007be4 <vPortEnterCritical>:
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	b672      	cpsid	i
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	b662      	cpsie	i
	uxCriticalNesting++;
 8007bf8:	4a0b      	ldr	r2, [pc, #44]	; (8007c28 <vPortEnterCritical+0x44>)
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10f      	bne.n	8007c24 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <vPortEnterCritical+0x48>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c0c:	d00a      	beq.n	8007c24 <vPortEnterCritical+0x40>
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	b672      	cpsid	i
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	b662      	cpsie	i
 8007c22:	e7fe      	b.n	8007c22 <vPortEnterCritical+0x3e>
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000014 	.word	0x20000014
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <vPortExitCritical+0x2c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b953      	cbnz	r3, 8007c4c <vPortExitCritical+0x1c>
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	b672      	cpsid	i
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	b662      	cpsie	i
 8007c4a:	e7fe      	b.n	8007c4a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4a03      	ldr	r2, [pc, #12]	; (8007c5c <vPortExitCritical+0x2c>)
 8007c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c52:	b90b      	cbnz	r3, 8007c58 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000014 	.word	0x20000014

08007c60 <PendSV_Handler>:
	__asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f380 8811 	msr	BASEPRI, r0
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	f001 f8fc 	bl	8008e90 <vTaskSwitchContext>
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f380 8811 	msr	BASEPRI, r0
 8007ca0:	bc08      	pop	{r3}
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f01e 0f10 	tst.w	lr, #16
 8007cae:	bf08      	it	eq
 8007cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb4:	f380 8809 	msr	PSP, r0
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	2000f790 	.word	0x2000f790

08007cc4 <xPortSysTickHandler>:
{
 8007cc4:	b508      	push	{r3, lr}
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	b672      	cpsid	i
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007cda:	f000 ff5b 	bl	8008b94 <xTaskIncrementTick>
 8007cde:	b118      	cbz	r0, 8007ce8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <xPortSysTickHandler+0x2c>)
 8007ce6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	bd08      	pop	{r3, pc}
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <vPortSetupTimerInterrupt+0x1c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <vPortSetupTimerInterrupt+0x20>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a05      	ldr	r2, [pc, #20]	; (8007d18 <vPortSetupTimerInterrupt+0x24>)
 8007d04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d06:	2207      	movs	r2, #7
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <vPortSetupTimerInterrupt+0x28>)
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	200000c0 	.word	0x200000c0
 8007d14:	10624dd3 	.word	0x10624dd3
 8007d18:	e000e014 	.word	0xe000e014
 8007d1c:	e000e010 	.word	0xe000e010

08007d20 <xPortStartScheduler>:
{
 8007d20:	b500      	push	{lr}
 8007d22:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d24:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <xPortStartScheduler+0x90>)
 8007d26:	781a      	ldrb	r2, [r3, #0]
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d40:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <xPortStartScheduler+0x94>)
 8007d42:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d44:	2207      	movs	r2, #7
 8007d46:	4b1c      	ldr	r3, [pc, #112]	; (8007db8 <xPortStartScheduler+0x98>)
 8007d48:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d4a:	e009      	b.n	8007d60 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007d4c:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <xPortStartScheduler+0x98>)
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d68:	d1f0      	bne.n	8007d4c <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d6a:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <xPortStartScheduler+0x98>)
 8007d6c:	6813      	ldr	r3, [r2, #0]
 8007d6e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d74:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4a0d      	ldr	r2, [pc, #52]	; (8007db0 <xPortStartScheduler+0x90>)
 8007d7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <xPortStartScheduler+0x9c>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007d86:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007d8e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007d90:	f7ff ffb0 	bl	8007cf4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007d94:	2200      	movs	r2, #0
 8007d96:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <xPortStartScheduler+0xa0>)
 8007d98:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8007d9a:	f7ff feed 	bl	8007b78 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d9e:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <xPortStartScheduler+0xa4>)
 8007da0:	6813      	ldr	r3, [r2, #0]
 8007da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007da6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007da8:	f7ff fed6 	bl	8007b58 <prvPortStartFirstTask>
	prvTaskExitError();
 8007dac:	f7ff feb6 	bl	8007b1c <prvTaskExitError>
 8007db0:	e000e400 	.word	0xe000e400
 8007db4:	20000770 	.word	0x20000770
 8007db8:	20000774 	.word	0x20000774
 8007dbc:	e000ed20 	.word	0xe000ed20
 8007dc0:	20000014 	.word	0x20000014
 8007dc4:	e000ef34 	.word	0xe000ef34

08007dc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007dc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d911      	bls.n	8007df4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dd0:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <vPortValidateInterruptPriority+0x54>)
 8007dd2:	5c9b      	ldrb	r3, [r3, r2]
 8007dd4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd6:	4a12      	ldr	r2, [pc, #72]	; (8007e20 <vPortValidateInterruptPriority+0x58>)
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d20a      	bcs.n	8007df4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	e7fe      	b.n	8007df2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <vPortValidateInterruptPriority+0x5c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <vPortValidateInterruptPriority+0x60>)
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d90a      	bls.n	8007e1a <vPortValidateInterruptPriority+0x52>
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	b672      	cpsid	i
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	b662      	cpsie	i
 8007e18:	e7fe      	b.n	8007e18 <vPortValidateInterruptPriority+0x50>
 8007e1a:	4770      	bx	lr
 8007e1c:	e000e3f0 	.word	0xe000e3f0
 8007e20:	20000770 	.word	0x20000770
 8007e24:	e000ed0c 	.word	0xe000ed0c
 8007e28:	20000774 	.word	0x20000774

08007e2c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e2c:	4a12      	ldr	r2, [pc, #72]	; (8007e78 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e2e:	f012 0f07 	tst.w	r2, #7
 8007e32:	d01e      	beq.n	8007e72 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e34:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e36:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e3a:	f5c1 4370 	rsb	r3, r1, #61440	; 0xf000
 8007e3e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e40:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e42:	480e      	ldr	r0, [pc, #56]	; (8007e7c <prvHeapInit+0x50>)
 8007e44:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e46:	2100      	movs	r1, #0
 8007e48:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e4a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007e4c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e4e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007e52:	480b      	ldr	r0, [pc, #44]	; (8007e80 <prvHeapInit+0x54>)
 8007e54:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e58:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e5a:	1a99      	subs	r1, r3, r2
 8007e5c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e5e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e60:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <prvHeapInit+0x58>)
 8007e62:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <prvHeapInit+0x5c>)
 8007e66:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <prvHeapInit+0x60>)
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007e76:	e7e4      	b.n	8007e42 <prvHeapInit+0x16>
 8007e78:	2000077c 	.word	0x2000077c
 8007e7c:	2000f788 	.word	0x2000f788
 8007e80:	20000778 	.word	0x20000778
 8007e84:	2000f784 	.word	0x2000f784
 8007e88:	2000f780 	.word	0x2000f780
 8007e8c:	2000f77c 	.word	0x2000f77c

08007e90 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e90:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e92:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <prvInsertBlockIntoFreeList+0x50>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4282      	cmp	r2, r0
 8007e98:	d31b      	bcc.n	8007ed2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e9a:	6859      	ldr	r1, [r3, #4]
 8007e9c:	185c      	adds	r4, r3, r1
 8007e9e:	42a0      	cmp	r0, r4
 8007ea0:	d103      	bne.n	8007eaa <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ea2:	6840      	ldr	r0, [r0, #4]
 8007ea4:	4401      	add	r1, r0
 8007ea6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ea8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eaa:	6841      	ldr	r1, [r0, #4]
 8007eac:	1844      	adds	r4, r0, r1
 8007eae:	42a2      	cmp	r2, r4
 8007eb0:	d113      	bne.n	8007eda <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <prvInsertBlockIntoFreeList+0x54>)
 8007eb4:	6824      	ldr	r4, [r4, #0]
 8007eb6:	42a2      	cmp	r2, r4
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	6852      	ldr	r2, [r2, #4]
 8007ebc:	4411      	add	r1, r2
 8007ebe:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ec6:	4298      	cmp	r0, r3
 8007ec8:	d000      	beq.n	8007ecc <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007eca:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	e7de      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	6004      	str	r4, [r0, #0]
 8007ed8:	e7f5      	b.n	8007ec6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eda:	6002      	str	r2, [r0, #0]
 8007edc:	e7f3      	b.n	8007ec6 <prvInsertBlockIntoFreeList+0x36>
 8007ede:	bf00      	nop
 8007ee0:	2000f788 	.word	0x2000f788
 8007ee4:	20000778 	.word	0x20000778

08007ee8 <pvPortMalloc>:
{
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007eec:	f000 fe3c 	bl	8008b68 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007ef0:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <pvPortMalloc+0x100>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b1cb      	cbz	r3, 8007f2a <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ef6:	4b3d      	ldr	r3, [pc, #244]	; (8007fec <pvPortMalloc+0x104>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	421c      	tst	r4, r3
 8007efc:	d169      	bne.n	8007fd2 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 8007efe:	b1bc      	cbz	r4, 8007f30 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8007f00:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f02:	f014 0f07 	tst.w	r4, #7
 8007f06:	d013      	beq.n	8007f30 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f08:	f024 0407 	bic.w	r4, r4, #7
 8007f0c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f0e:	f004 0307 	and.w	r3, r4, #7
 8007f12:	b16b      	cbz	r3, 8007f30 <pvPortMalloc+0x48>
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	b672      	cpsid	i
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	b662      	cpsie	i
 8007f28:	e7fe      	b.n	8007f28 <pvPortMalloc+0x40>
			prvHeapInit();
 8007f2a:	f7ff ff7f 	bl	8007e2c <prvHeapInit>
 8007f2e:	e7e2      	b.n	8007ef6 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f30:	2c00      	cmp	r4, #0
 8007f32:	d050      	beq.n	8007fd6 <pvPortMalloc+0xee>
 8007f34:	4b2e      	ldr	r3, [pc, #184]	; (8007ff0 <pvPortMalloc+0x108>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d84e      	bhi.n	8007fda <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <pvPortMalloc+0x10c>)
 8007f3e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f40:	e001      	b.n	8007f46 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 8007f42:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f44:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f46:	686a      	ldr	r2, [r5, #4]
 8007f48:	4294      	cmp	r4, r2
 8007f4a:	d902      	bls.n	8007f52 <pvPortMalloc+0x6a>
 8007f4c:	682a      	ldr	r2, [r5, #0]
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	d1f7      	bne.n	8007f42 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 8007f52:	4a25      	ldr	r2, [pc, #148]	; (8007fe8 <pvPortMalloc+0x100>)
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	4295      	cmp	r5, r2
 8007f58:	d041      	beq.n	8007fde <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f5a:	681e      	ldr	r6, [r3, #0]
 8007f5c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f5e:	682a      	ldr	r2, [r5, #0]
 8007f60:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f62:	686b      	ldr	r3, [r5, #4]
 8007f64:	1b1b      	subs	r3, r3, r4
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d912      	bls.n	8007f90 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f6a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f6c:	f010 0f07 	tst.w	r0, #7
 8007f70:	d00a      	beq.n	8007f88 <pvPortMalloc+0xa0>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	e7fe      	b.n	8007f86 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f88:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f8a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f8c:	f7ff ff80 	bl	8007e90 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f90:	686a      	ldr	r2, [r5, #4]
 8007f92:	4917      	ldr	r1, [pc, #92]	; (8007ff0 <pvPortMalloc+0x108>)
 8007f94:	680b      	ldr	r3, [r1, #0]
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f9a:	4917      	ldr	r1, [pc, #92]	; (8007ff8 <pvPortMalloc+0x110>)
 8007f9c:	6809      	ldr	r1, [r1, #0]
 8007f9e:	428b      	cmp	r3, r1
 8007fa0:	d201      	bcs.n	8007fa6 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fa2:	4915      	ldr	r1, [pc, #84]	; (8007ff8 <pvPortMalloc+0x110>)
 8007fa4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <pvPortMalloc+0x104>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007fb2:	f000 fe81 	bl	8008cb8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb6:	f016 0f07 	tst.w	r6, #7
 8007fba:	d012      	beq.n	8007fe2 <pvPortMalloc+0xfa>
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	e7fe      	b.n	8007fd0 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	e7ed      	b.n	8007fb2 <pvPortMalloc+0xca>
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	e7eb      	b.n	8007fb2 <pvPortMalloc+0xca>
 8007fda:	2600      	movs	r6, #0
 8007fdc:	e7e9      	b.n	8007fb2 <pvPortMalloc+0xca>
 8007fde:	2600      	movs	r6, #0
 8007fe0:	e7e7      	b.n	8007fb2 <pvPortMalloc+0xca>
}
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000778 	.word	0x20000778
 8007fec:	2000f77c 	.word	0x2000f77c
 8007ff0:	2000f780 	.word	0x2000f780
 8007ff4:	2000f788 	.word	0x2000f788
 8007ff8:	2000f784 	.word	0x2000f784

08007ffc <vPortFree>:
	if( pv != NULL )
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d034      	beq.n	800806a <vPortFree+0x6e>
{
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008004:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008008:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800800c:	4917      	ldr	r1, [pc, #92]	; (800806c <vPortFree+0x70>)
 800800e:	6809      	ldr	r1, [r1, #0]
 8008010:	420a      	tst	r2, r1
 8008012:	d10a      	bne.n	800802a <vPortFree+0x2e>
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	b672      	cpsid	i
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	b662      	cpsie	i
 8008028:	e7fe      	b.n	8008028 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800802a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800802e:	b150      	cbz	r0, 8008046 <vPortFree+0x4a>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	b672      	cpsid	i
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	b662      	cpsie	i
 8008044:	e7fe      	b.n	8008044 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008046:	ea22 0201 	bic.w	r2, r2, r1
 800804a:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800804e:	f000 fd8b 	bl	8008b68 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008052:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008056:	4a06      	ldr	r2, [pc, #24]	; (8008070 <vPortFree+0x74>)
 8008058:	6813      	ldr	r3, [r2, #0]
 800805a:	440b      	add	r3, r1
 800805c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800805e:	4628      	mov	r0, r5
 8008060:	f7ff ff16 	bl	8007e90 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008064:	f000 fe28 	bl	8008cb8 <xTaskResumeAll>
 8008068:	bd38      	pop	{r3, r4, r5, pc}
 800806a:	4770      	bx	lr
 800806c:	2000f77c 	.word	0x2000f77c
 8008070:	2000f780 	.word	0x2000f780

08008074 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008074:	b510      	push	{r4, lr}
 8008076:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008078:	f7ff fdb4 	bl	8007be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800807c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800807e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008080:	429a      	cmp	r2, r3
 8008082:	d004      	beq.n	800808e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008084:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008086:	f7ff fdd3 	bl	8007c30 <vPortExitCritical>

	return xReturn;
}
 800808a:	4620      	mov	r0, r4
 800808c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800808e:	2401      	movs	r4, #1
 8008090:	e7f9      	b.n	8008086 <prvIsQueueFull+0x12>

08008092 <prvIsQueueEmpty>:
{
 8008092:	b510      	push	{r4, lr}
 8008094:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008096:	f7ff fda5 	bl	8007be4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800809a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800809c:	b123      	cbz	r3, 80080a8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800809e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80080a0:	f7ff fdc6 	bl	8007c30 <vPortExitCritical>
}
 80080a4:	4620      	mov	r0, r4
 80080a6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80080a8:	2401      	movs	r4, #1
 80080aa:	e7f9      	b.n	80080a0 <prvIsQueueEmpty+0xe>

080080ac <prvCopyDataToQueue>:
{
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80080b6:	b94a      	cbnz	r2, 80080cc <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080b8:	6803      	ldr	r3, [r0, #0]
 80080ba:	bb53      	cbnz	r3, 8008112 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80080bc:	6840      	ldr	r0, [r0, #4]
 80080be:	f001 f863 	bl	8009188 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80080c6:	3501      	adds	r5, #1
 80080c8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80080cc:	b96e      	cbnz	r6, 80080ea <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80080ce:	6880      	ldr	r0, [r0, #8]
 80080d0:	f01a fc10 	bl	80228f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80080d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	4413      	add	r3, r2
 80080da:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	4293      	cmp	r3, r2
 80080e0:	d319      	bcc.n	8008116 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80080e6:	2000      	movs	r0, #0
 80080e8:	e7ed      	b.n	80080c6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ea:	68c0      	ldr	r0, [r0, #12]
 80080ec:	f01a fc02 	bl	80228f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80080f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f2:	425b      	negs	r3, r3
 80080f4:	68e2      	ldr	r2, [r4, #12]
 80080f6:	441a      	add	r2, r3
 80080f8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	428a      	cmp	r2, r1
 80080fe:	d202      	bcs.n	8008106 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008100:	6862      	ldr	r2, [r4, #4]
 8008102:	4413      	add	r3, r2
 8008104:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008106:	2e02      	cmp	r6, #2
 8008108:	d107      	bne.n	800811a <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810a:	b145      	cbz	r5, 800811e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800810c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800810e:	2000      	movs	r0, #0
 8008110:	e7d9      	b.n	80080c6 <prvCopyDataToQueue+0x1a>
 8008112:	2000      	movs	r0, #0
 8008114:	e7d7      	b.n	80080c6 <prvCopyDataToQueue+0x1a>
 8008116:	2000      	movs	r0, #0
 8008118:	e7d5      	b.n	80080c6 <prvCopyDataToQueue+0x1a>
 800811a:	2000      	movs	r0, #0
 800811c:	e7d3      	b.n	80080c6 <prvCopyDataToQueue+0x1a>
 800811e:	2000      	movs	r0, #0
 8008120:	e7d1      	b.n	80080c6 <prvCopyDataToQueue+0x1a>

08008122 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008122:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008124:	b172      	cbz	r2, 8008144 <prvCopyDataFromQueue+0x22>
{
 8008126:	b510      	push	{r4, lr}
 8008128:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800812a:	68c4      	ldr	r4, [r0, #12]
 800812c:	4414      	add	r4, r2
 800812e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008130:	6840      	ldr	r0, [r0, #4]
 8008132:	4284      	cmp	r4, r0
 8008134:	d301      	bcc.n	800813a <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	60d8      	str	r0, [r3, #12]
 800813a:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800813c:	68d9      	ldr	r1, [r3, #12]
 800813e:	f01a fbd9 	bl	80228f4 <memcpy>
 8008142:	bd10      	pop	{r4, pc}
 8008144:	4770      	bx	lr

08008146 <prvUnlockQueue>:
{
 8008146:	b538      	push	{r3, r4, r5, lr}
 8008148:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800814a:	f7ff fd4b 	bl	8007be4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800814e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008152:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008154:	e001      	b.n	800815a <prvUnlockQueue+0x14>
			--cTxLock;
 8008156:	3c01      	subs	r4, #1
 8008158:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800815a:	2c00      	cmp	r4, #0
 800815c:	dd0a      	ble.n	8008174 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800815e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008160:	b143      	cbz	r3, 8008174 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008162:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008166:	f000 fefd 	bl	8008f64 <xTaskRemoveFromEventList>
 800816a:	2800      	cmp	r0, #0
 800816c:	d0f3      	beq.n	8008156 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800816e:	f000 ff9d 	bl	80090ac <vTaskMissedYield>
 8008172:	e7f0      	b.n	8008156 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008174:	23ff      	movs	r3, #255	; 0xff
 8008176:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800817a:	f7ff fd59 	bl	8007c30 <vPortExitCritical>
	taskENTER_CRITICAL();
 800817e:	f7ff fd31 	bl	8007be4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008182:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008186:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008188:	e001      	b.n	800818e <prvUnlockQueue+0x48>
				--cRxLock;
 800818a:	3c01      	subs	r4, #1
 800818c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800818e:	2c00      	cmp	r4, #0
 8008190:	dd0a      	ble.n	80081a8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008192:	692b      	ldr	r3, [r5, #16]
 8008194:	b143      	cbz	r3, 80081a8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008196:	f105 0010 	add.w	r0, r5, #16
 800819a:	f000 fee3 	bl	8008f64 <xTaskRemoveFromEventList>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d0f3      	beq.n	800818a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80081a2:	f000 ff83 	bl	80090ac <vTaskMissedYield>
 80081a6:	e7f0      	b.n	800818a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80081a8:	23ff      	movs	r3, #255	; 0xff
 80081aa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80081ae:	f7ff fd3f 	bl	8007c30 <vPortExitCritical>
 80081b2:	bd38      	pop	{r3, r4, r5, pc}

080081b4 <xQueueGenericReset>:
{
 80081b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80081b6:	b330      	cbz	r0, 8008206 <xQueueGenericReset+0x52>
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80081bc:	f7ff fd12 	bl	8007be4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80081c0:	6821      	ldr	r1, [r4, #0]
 80081c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80081c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081c6:	fb03 1002 	mla	r0, r3, r2, r1
 80081ca:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081cc:	2000      	movs	r0, #0
 80081ce:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d0:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081d2:	3a01      	subs	r2, #1
 80081d4:	fb02 1303 	mla	r3, r2, r3, r1
 80081d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80081e4:	b9d5      	cbnz	r5, 800821c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	b303      	cbz	r3, 800822c <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ea:	f104 0010 	add.w	r0, r4, #16
 80081ee:	f000 feb9 	bl	8008f64 <xTaskRemoveFromEventList>
 80081f2:	b1d8      	cbz	r0, 800822c <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 80081f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <xQueueGenericReset+0x80>)
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	e012      	b.n	800822c <xQueueGenericReset+0x78>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	b672      	cpsid	i
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	b662      	cpsie	i
 800821a:	e7fe      	b.n	800821a <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800821c:	f104 0010 	add.w	r0, r4, #16
 8008220:	f7ff fc34 	bl	8007a8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008224:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008228:	f7ff fc30 	bl	8007a8c <vListInitialise>
	taskEXIT_CRITICAL();
 800822c:	f7ff fd00 	bl	8007c30 <vPortExitCritical>
}
 8008230:	2001      	movs	r0, #1
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <prvInitialiseNewQueue>:
{
 8008238:	b510      	push	{r4, lr}
 800823a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800823c:	460c      	mov	r4, r1
 800823e:	b139      	cbz	r1, 8008250 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008240:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008242:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008244:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008246:	2101      	movs	r1, #1
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ffb3 	bl	80081b4 <xQueueGenericReset>
 800824e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008250:	601b      	str	r3, [r3, #0]
 8008252:	e7f6      	b.n	8008242 <prvInitialiseNewQueue+0xa>

08008254 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008254:	b950      	cbnz	r0, 800826c <xQueueGenericCreate+0x18>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	e7fe      	b.n	800826a <xQueueGenericCreate+0x16>
	{
 800826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826e:	b083      	sub	sp, #12
 8008270:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008272:	b111      	cbz	r1, 800827a <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	fb01 f000 	mul.w	r0, r1, r0
 8008278:	e000      	b.n	800827c <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 800827a:	2000      	movs	r0, #0
 800827c:	4617      	mov	r7, r2
 800827e:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008280:	3048      	adds	r0, #72	; 0x48
 8008282:	f7ff fe31 	bl	8007ee8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008286:	4606      	mov	r6, r0
 8008288:	b138      	cbz	r0, 800829a <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800828a:	9000      	str	r0, [sp, #0]
 800828c:	463b      	mov	r3, r7
 800828e:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f7ff ffcf 	bl	8008238 <prvInitialiseNewQueue>
	}
 800829a:	4630      	mov	r0, r6
 800829c:	b003      	add	sp, #12
 800829e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082a0 <xQueueGenericSend>:
{
 80082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a2:	b085      	sub	sp, #20
 80082a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80082a6:	b170      	cbz	r0, 80082c6 <xQueueGenericSend+0x26>
 80082a8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082aa:	b1b9      	cbz	r1, 80082dc <xQueueGenericSend+0x3c>
 80082ac:	2501      	movs	r5, #1
 80082ae:	b9dd      	cbnz	r5, 80082e8 <xQueueGenericSend+0x48>
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	b672      	cpsid	i
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	b662      	cpsie	i
 80082c4:	e7fe      	b.n	80082c4 <xQueueGenericSend+0x24>
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	b672      	cpsid	i
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	b662      	cpsie	i
 80082da:	e7fe      	b.n	80082da <xQueueGenericSend+0x3a>
 80082dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80082de:	b90a      	cbnz	r2, 80082e4 <xQueueGenericSend+0x44>
 80082e0:	2501      	movs	r5, #1
 80082e2:	e7e4      	b.n	80082ae <xQueueGenericSend+0xe>
 80082e4:	2500      	movs	r5, #0
 80082e6:	e7e2      	b.n	80082ae <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d00b      	beq.n	8008304 <xQueueGenericSend+0x64>
 80082ec:	b97d      	cbnz	r5, 800830e <xQueueGenericSend+0x6e>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	b672      	cpsid	i
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	b662      	cpsie	i
 8008302:	e7fe      	b.n	8008302 <xQueueGenericSend+0x62>
 8008304:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008306:	2a01      	cmp	r2, #1
 8008308:	d0f0      	beq.n	80082ec <xQueueGenericSend+0x4c>
 800830a:	2500      	movs	r5, #0
 800830c:	e7ee      	b.n	80082ec <xQueueGenericSend+0x4c>
 800830e:	461e      	mov	r6, r3
 8008310:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008312:	f000 fed7 	bl	80090c4 <xTaskGetSchedulerState>
 8008316:	b910      	cbnz	r0, 800831e <xQueueGenericSend+0x7e>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	b103      	cbz	r3, 800831e <xQueueGenericSend+0x7e>
 800831c:	2500      	movs	r5, #0
 800831e:	b955      	cbnz	r5, 8008336 <xQueueGenericSend+0x96>
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	b672      	cpsid	i
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	b662      	cpsie	i
 8008334:	e7fe      	b.n	8008334 <xQueueGenericSend+0x94>
 8008336:	2500      	movs	r5, #0
 8008338:	e02c      	b.n	8008394 <xQueueGenericSend+0xf4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800833a:	4632      	mov	r2, r6
 800833c:	4639      	mov	r1, r7
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff feb4 	bl	80080ac <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008346:	b18b      	cbz	r3, 800836c <xQueueGenericSend+0xcc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008348:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800834c:	f000 fe0a 	bl	8008f64 <xTaskRemoveFromEventList>
 8008350:	b138      	cbz	r0, 8008362 <xQueueGenericSend+0xc2>
							queueYIELD_IF_USING_PREEMPTION();
 8008352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008356:	4b37      	ldr	r3, [pc, #220]	; (8008434 <xQueueGenericSend+0x194>)
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008362:	f7ff fc65 	bl	8007c30 <vPortExitCritical>
				return pdPASS;
 8008366:	2001      	movs	r0, #1
}
 8008368:	b005      	add	sp, #20
 800836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 800836c:	2800      	cmp	r0, #0
 800836e:	d0f8      	beq.n	8008362 <xQueueGenericSend+0xc2>
						queueYIELD_IF_USING_PREEMPTION();
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	4b2f      	ldr	r3, [pc, #188]	; (8008434 <xQueueGenericSend+0x194>)
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	e7ef      	b.n	8008362 <xQueueGenericSend+0xc2>
					taskEXIT_CRITICAL();
 8008382:	f7ff fc55 	bl	8007c30 <vPortExitCritical>
					return errQUEUE_FULL;
 8008386:	2000      	movs	r0, #0
 8008388:	e7ee      	b.n	8008368 <xQueueGenericSend+0xc8>
				prvUnlockQueue( pxQueue );
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff fedb 	bl	8008146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008390:	f000 fc92 	bl	8008cb8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008394:	f7ff fc26 	bl	8007be4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008398:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800839a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800839c:	429a      	cmp	r2, r3
 800839e:	d3cc      	bcc.n	800833a <xQueueGenericSend+0x9a>
 80083a0:	2e02      	cmp	r6, #2
 80083a2:	d0ca      	beq.n	800833a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0eb      	beq.n	8008382 <xQueueGenericSend+0xe2>
				else if( xEntryTimeSet == pdFALSE )
 80083aa:	b91d      	cbnz	r5, 80083b4 <xQueueGenericSend+0x114>
					vTaskSetTimeOutState( &xTimeOut );
 80083ac:	a802      	add	r0, sp, #8
 80083ae:	f000 fe21 	bl	8008ff4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b2:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80083b4:	f7ff fc3c 	bl	8007c30 <vPortExitCritical>
		vTaskSuspendAll();
 80083b8:	f000 fbd6 	bl	8008b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083bc:	f7ff fc12 	bl	8007be4 <vPortEnterCritical>
 80083c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083c4:	b25b      	sxtb	r3, r3
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d102      	bne.n	80083d2 <xQueueGenericSend+0x132>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80083d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d102      	bne.n	80083e4 <xQueueGenericSend+0x144>
 80083de:	2300      	movs	r3, #0
 80083e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083e4:	f7ff fc24 	bl	8007c30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e8:	a901      	add	r1, sp, #4
 80083ea:	a802      	add	r0, sp, #8
 80083ec:	f000 fe1a 	bl	8009024 <xTaskCheckForTimeOut>
 80083f0:	b9c8      	cbnz	r0, 8008426 <xQueueGenericSend+0x186>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff fe3e 	bl	8008074 <prvIsQueueFull>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d0c6      	beq.n	800838a <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	f104 0010 	add.w	r0, r4, #16
 8008402:	f000 fd95 	bl	8008f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff fe9d 	bl	8008146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800840c:	f000 fc54 	bl	8008cb8 <xTaskResumeAll>
 8008410:	2800      	cmp	r0, #0
 8008412:	d1bf      	bne.n	8008394 <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <xQueueGenericSend+0x194>)
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	e7b6      	b.n	8008394 <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 8008426:	4620      	mov	r0, r4
 8008428:	f7ff fe8d 	bl	8008146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800842c:	f000 fc44 	bl	8008cb8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008430:	2000      	movs	r0, #0
 8008432:	e799      	b.n	8008368 <xQueueGenericSend+0xc8>
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008438:	b148      	cbz	r0, 800844e <prvInitialiseMutex+0x16>
	{
 800843a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800843c:	2100      	movs	r1, #0
 800843e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008440:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008442:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008444:	460b      	mov	r3, r1
 8008446:	460a      	mov	r2, r1
 8008448:	f7ff ff2a 	bl	80082a0 <xQueueGenericSend>
 800844c:	bd08      	pop	{r3, pc}
 800844e:	4770      	bx	lr

08008450 <xQueueCreateMutex>:
	{
 8008450:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008452:	4602      	mov	r2, r0
 8008454:	2100      	movs	r1, #0
 8008456:	2001      	movs	r0, #1
 8008458:	f7ff fefc 	bl	8008254 <xQueueGenericCreate>
 800845c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800845e:	f7ff ffeb 	bl	8008438 <prvInitialiseMutex>
	}
 8008462:	4620      	mov	r0, r4
 8008464:	bd10      	pop	{r4, pc}

08008466 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008466:	b170      	cbz	r0, 8008486 <xQueueGiveFromISR+0x20>
{
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800846c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800846e:	b1ab      	cbz	r3, 800849c <xQueueGiveFromISR+0x36>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	b672      	cpsid	i
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	b662      	cpsie	i
 8008484:	e7fe      	b.n	8008484 <xQueueGiveFromISR+0x1e>
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	b672      	cpsid	i
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	b662      	cpsie	i
 800849a:	e7fe      	b.n	800849a <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800849c:	6803      	ldr	r3, [r0, #0]
 800849e:	b163      	cbz	r3, 80084ba <xQueueGiveFromISR+0x54>
 80084a0:	2301      	movs	r3, #1
 80084a2:	b983      	cbnz	r3, 80084c6 <xQueueGiveFromISR+0x60>
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	b672      	cpsid	i
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	b662      	cpsie	i
 80084b8:	e7fe      	b.n	80084b8 <xQueueGiveFromISR+0x52>
 80084ba:	6843      	ldr	r3, [r0, #4]
 80084bc:	b90b      	cbnz	r3, 80084c2 <xQueueGiveFromISR+0x5c>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7ef      	b.n	80084a2 <xQueueGiveFromISR+0x3c>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e7ed      	b.n	80084a2 <xQueueGiveFromISR+0x3c>
 80084c6:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084c8:	f7ff fc7e 	bl	8007dc8 <vPortValidateInterruptPriority>
	__asm volatile
 80084cc:	f3ef 8511 	mrs	r5, BASEPRI
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80084e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d21a      	bcs.n	8008522 <xQueueGiveFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
 80084ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084f0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80084f2:	3201      	adds	r2, #1
 80084f4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d10c      	bne.n	8008516 <xQueueGiveFromISR+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fe:	b193      	cbz	r3, 8008526 <xQueueGiveFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008500:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008504:	f000 fd2e 	bl	8008f64 <xTaskRemoveFromEventList>
 8008508:	b178      	cbz	r0, 800852a <xQueueGiveFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800850a:	b186      	cbz	r6, 800852e <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800850c:	2001      	movs	r0, #1
 800850e:	6030      	str	r0, [r6, #0]
	__asm volatile
 8008510:	f385 8811 	msr	BASEPRI, r5
}
 8008514:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008516:	3301      	adds	r3, #1
 8008518:	b25b      	sxtb	r3, r3
 800851a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800851e:	2001      	movs	r0, #1
 8008520:	e7f6      	b.n	8008510 <xQueueGiveFromISR+0xaa>
			xReturn = errQUEUE_FULL;
 8008522:	2000      	movs	r0, #0
 8008524:	e7f4      	b.n	8008510 <xQueueGiveFromISR+0xaa>
			xReturn = pdPASS;
 8008526:	2001      	movs	r0, #1
 8008528:	e7f2      	b.n	8008510 <xQueueGiveFromISR+0xaa>
 800852a:	2001      	movs	r0, #1
 800852c:	e7f0      	b.n	8008510 <xQueueGiveFromISR+0xaa>
 800852e:	2001      	movs	r0, #1
 8008530:	e7ee      	b.n	8008510 <xQueueGiveFromISR+0xaa>
	...

08008534 <xQueueGenericReceive>:
{
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800853c:	b170      	cbz	r0, 800855c <xQueueGenericReceive+0x28>
 800853e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008540:	b1b9      	cbz	r1, 8008572 <xQueueGenericReceive+0x3e>
 8008542:	2501      	movs	r5, #1
 8008544:	b9dd      	cbnz	r5, 800857e <xQueueGenericReceive+0x4a>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	b672      	cpsid	i
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	b662      	cpsie	i
 800855a:	e7fe      	b.n	800855a <xQueueGenericReceive+0x26>
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	e7fe      	b.n	8008570 <xQueueGenericReceive+0x3c>
 8008572:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008574:	b90a      	cbnz	r2, 800857a <xQueueGenericReceive+0x46>
 8008576:	2501      	movs	r5, #1
 8008578:	e7e4      	b.n	8008544 <xQueueGenericReceive+0x10>
 800857a:	2500      	movs	r5, #0
 800857c:	e7e2      	b.n	8008544 <xQueueGenericReceive+0x10>
 800857e:	461f      	mov	r7, r3
 8008580:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008582:	f000 fd9f 	bl	80090c4 <xTaskGetSchedulerState>
 8008586:	b910      	cbnz	r0, 800858e <xQueueGenericReceive+0x5a>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	b103      	cbz	r3, 800858e <xQueueGenericReceive+0x5a>
 800858c:	2500      	movs	r5, #0
 800858e:	b955      	cbnz	r5, 80085a6 <xQueueGenericReceive+0x72>
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	b672      	cpsid	i
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	b662      	cpsie	i
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericReceive+0x70>
 80085a6:	2600      	movs	r6, #0
 80085a8:	e05d      	b.n	8008666 <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80085aa:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ac:	4641      	mov	r1, r8
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff fdb7 	bl	8008122 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80085b4:	b9df      	cbnz	r7, 80085ee <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80085b6:	3d01      	subs	r5, #1
 80085b8:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	b913      	cbnz	r3, 80085c4 <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80085be:	f000 fe41 	bl	8009244 <pvTaskIncrementMutexHeldCount>
 80085c2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	b163      	cbz	r3, 80085e2 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085c8:	f104 0010 	add.w	r0, r4, #16
 80085cc:	f000 fcca 	bl	8008f64 <xTaskRemoveFromEventList>
 80085d0:	b138      	cbz	r0, 80085e2 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80085d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d6:	4b45      	ldr	r3, [pc, #276]	; (80086ec <xQueueGenericReceive+0x1b8>)
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80085e2:	f7ff fb25 	bl	8007c30 <vPortExitCritical>
				return pdPASS;
 80085e6:	2001      	movs	r0, #1
}
 80085e8:	b004      	add	sp, #16
 80085ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80085ee:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f5      	beq.n	80085e2 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085fa:	f000 fcb3 	bl	8008f64 <xTaskRemoveFromEventList>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0ef      	beq.n	80085e2 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8008602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <xQueueGenericReceive+0x1b8>)
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	e7e6      	b.n	80085e2 <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 8008614:	f7ff fb0c 	bl	8007c30 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008618:	2000      	movs	r0, #0
 800861a:	e7e5      	b.n	80085e8 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 800861c:	a802      	add	r0, sp, #8
 800861e:	f000 fce9 	bl	8008ff4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008622:	2601      	movs	r6, #1
 8008624:	e029      	b.n	800867a <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 8008626:	2300      	movs	r3, #0
 8008628:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800862c:	e031      	b.n	8008692 <xQueueGenericReceive+0x15e>
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008634:	e033      	b.n	800869e <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 8008636:	f7ff fad5 	bl	8007be4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800863a:	6860      	ldr	r0, [r4, #4]
 800863c:	f000 fd52 	bl	80090e4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8008640:	f7ff faf6 	bl	8007c30 <vPortExitCritical>
 8008644:	e03b      	b.n	80086be <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff fd7d 	bl	8008146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800864c:	f000 fb34 	bl	8008cb8 <xTaskResumeAll>
 8008650:	e009      	b.n	8008666 <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff fd77 	bl	8008146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008658:	f000 fb2e 	bl	8008cb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff fd18 	bl	8008092 <prvIsQueueEmpty>
 8008662:	2800      	cmp	r0, #0
 8008664:	d140      	bne.n	80086e8 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 8008666:	f7ff fabd 	bl	8007be4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800866a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800866c:	2d00      	cmp	r5, #0
 800866e:	d19c      	bne.n	80085aa <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ce      	beq.n	8008614 <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 8008676:	2e00      	cmp	r6, #0
 8008678:	d0d0      	beq.n	800861c <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 800867a:	f7ff fad9 	bl	8007c30 <vPortExitCritical>
		vTaskSuspendAll();
 800867e:	f000 fa73 	bl	8008b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008682:	f7ff faaf 	bl	8007be4 <vPortEnterCritical>
 8008686:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800868a:	b25b      	sxtb	r3, r3
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d0c9      	beq.n	8008626 <xQueueGenericReceive+0xf2>
 8008692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008696:	b25b      	sxtb	r3, r3
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d0c7      	beq.n	800862e <xQueueGenericReceive+0xfa>
 800869e:	f7ff fac7 	bl	8007c30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086a2:	a901      	add	r1, sp, #4
 80086a4:	a802      	add	r0, sp, #8
 80086a6:	f000 fcbd 	bl	8009024 <xTaskCheckForTimeOut>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d1d1      	bne.n	8008652 <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7ff fcef 	bl	8008092 <prvIsQueueEmpty>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d0c6      	beq.n	8008646 <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0bb      	beq.n	8008636 <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086be:	9901      	ldr	r1, [sp, #4]
 80086c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086c4:	f000 fc34 	bl	8008f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7ff fd3c 	bl	8008146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086ce:	f000 faf3 	bl	8008cb8 <xTaskResumeAll>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1c7      	bne.n	8008666 <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 80086d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086da:	4b04      	ldr	r3, [pc, #16]	; (80086ec <xQueueGenericReceive+0x1b8>)
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	e7be      	b.n	8008666 <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 80086e8:	2000      	movs	r0, #0
 80086ea:	e77d      	b.n	80085e8 <xQueueGenericReceive+0xb4>
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xQueueReceiveFromISR>:
{
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80086f4:	b170      	cbz	r0, 8008714 <xQueueReceiveFromISR+0x24>
 80086f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f8:	b1b9      	cbz	r1, 800872a <xQueueReceiveFromISR+0x3a>
 80086fa:	2301      	movs	r3, #1
 80086fc:	b9db      	cbnz	r3, 8008736 <xQueueReceiveFromISR+0x46>
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	b672      	cpsid	i
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	b662      	cpsie	i
 8008712:	e7fe      	b.n	8008712 <xQueueReceiveFromISR+0x22>
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	b672      	cpsid	i
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	b662      	cpsie	i
 8008728:	e7fe      	b.n	8008728 <xQueueReceiveFromISR+0x38>
 800872a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800872c:	b90b      	cbnz	r3, 8008732 <xQueueReceiveFromISR+0x42>
 800872e:	2301      	movs	r3, #1
 8008730:	e7e4      	b.n	80086fc <xQueueReceiveFromISR+0xc>
 8008732:	2300      	movs	r3, #0
 8008734:	e7e2      	b.n	80086fc <xQueueReceiveFromISR+0xc>
 8008736:	4617      	mov	r7, r2
 8008738:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800873a:	f7ff fb45 	bl	8007dc8 <vPortValidateInterruptPriority>
	__asm volatile
 800873e:	f3ef 8611 	mrs	r6, BASEPRI
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008756:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800875a:	f1b8 0f00 	cmp.w	r8, #0
 800875e:	d020      	beq.n	80087a2 <xQueueReceiveFromISR+0xb2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008760:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008764:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008766:	4649      	mov	r1, r9
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff fcda 	bl	8008122 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800876e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008772:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008774:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008778:	d10d      	bne.n	8008796 <xQueueReceiveFromISR+0xa6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	b19b      	cbz	r3, 80087a6 <xQueueReceiveFromISR+0xb6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800877e:	f104 0010 	add.w	r0, r4, #16
 8008782:	f000 fbef 	bl	8008f64 <xTaskRemoveFromEventList>
 8008786:	b180      	cbz	r0, 80087aa <xQueueReceiveFromISR+0xba>
						if( pxHigherPriorityTaskWoken != NULL )
 8008788:	b18f      	cbz	r7, 80087ae <xQueueReceiveFromISR+0xbe>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800878a:	2001      	movs	r0, #1
 800878c:	6038      	str	r0, [r7, #0]
	__asm volatile
 800878e:	f386 8811 	msr	BASEPRI, r6
}
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008796:	1c6b      	adds	r3, r5, #1
 8008798:	b25b      	sxtb	r3, r3
 800879a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800879e:	2001      	movs	r0, #1
 80087a0:	e7f5      	b.n	800878e <xQueueReceiveFromISR+0x9e>
			xReturn = pdFAIL;
 80087a2:	2000      	movs	r0, #0
 80087a4:	e7f3      	b.n	800878e <xQueueReceiveFromISR+0x9e>
			xReturn = pdPASS;
 80087a6:	2001      	movs	r0, #1
 80087a8:	e7f1      	b.n	800878e <xQueueReceiveFromISR+0x9e>
 80087aa:	2001      	movs	r0, #1
 80087ac:	e7ef      	b.n	800878e <xQueueReceiveFromISR+0x9e>
 80087ae:	2001      	movs	r0, #1
 80087b0:	e7ed      	b.n	800878e <xQueueReceiveFromISR+0x9e>
	...

080087b4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b07      	cmp	r3, #7
 80087b8:	d80f      	bhi.n	80087da <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80087ba:	4a08      	ldr	r2, [pc, #32]	; (80087dc <vQueueUnregisterQueue+0x28>)
 80087bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80087c0:	6852      	ldr	r2, [r2, #4]
 80087c2:	4282      	cmp	r2, r0
 80087c4:	d001      	beq.n	80087ca <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c6:	3301      	adds	r3, #1
 80087c8:	e7f5      	b.n	80087b6 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80087ca:	4a04      	ldr	r2, [pc, #16]	; (80087dc <vQueueUnregisterQueue+0x28>)
 80087cc:	2100      	movs	r1, #0
 80087ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80087d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087d6:	6059      	str	r1, [r3, #4]
				break;
 80087d8:	4770      	bx	lr
 80087da:	4770      	bx	lr
 80087dc:	2002b3d0 	.word	0x2002b3d0

080087e0 <vQueueDelete>:
	configASSERT( pxQueue );
 80087e0:	b950      	cbnz	r0, 80087f8 <vQueueDelete+0x18>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	b672      	cpsid	i
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	b662      	cpsie	i
 80087f6:	e7fe      	b.n	80087f6 <vQueueDelete+0x16>
{
 80087f8:	b510      	push	{r4, lr}
 80087fa:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80087fc:	f7ff ffda 	bl	80087b4 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff fbfb 	bl	8007ffc <vPortFree>
 8008806:	bd10      	pop	{r4, pc}

08008808 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <prvResetNextTaskUnblockTime+0x2c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	b94b      	cbnz	r3, 8008824 <prvResetNextTaskUnblockTime+0x1c>
 8008810:	2301      	movs	r3, #1
 8008812:	b94b      	cbnz	r3, 8008828 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <prvResetNextTaskUnblockTime+0x2c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	4b06      	ldr	r3, [pc, #24]	; (8008838 <prvResetNextTaskUnblockTime+0x30>)
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008824:	2300      	movs	r3, #0
 8008826:	e7f4      	b.n	8008812 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <prvResetNextTaskUnblockTime+0x30>)
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	2000f794 	.word	0x2000f794
 8008838:	2000f86c 	.word	0x2000f86c

0800883c <prvDeleteTCB>:
	{
 800883c:	b510      	push	{r4, lr}
 800883e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8008840:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008842:	f7ff fbdb 	bl	8007ffc <vPortFree>
			vPortFree( pxTCB );
 8008846:	4620      	mov	r0, r4
 8008848:	f7ff fbd8 	bl	8007ffc <vPortFree>
 800884c:	bd10      	pop	{r4, pc}

0800884e <prvInitialiseNewTask>:
{
 800884e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008852:	4680      	mov	r8, r0
 8008854:	4699      	mov	r9, r3
 8008856:	9d08      	ldr	r5, [sp, #32]
 8008858:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800885a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800885c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800885e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008862:	4413      	add	r3, r2
 8008864:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008868:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800886c:	2300      	movs	r3, #0
 800886e:	2b0f      	cmp	r3, #15
 8008870:	d807      	bhi.n	8008882 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008872:	5cc8      	ldrb	r0, [r1, r3]
 8008874:	18e2      	adds	r2, r4, r3
 8008876:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800887a:	5cca      	ldrb	r2, [r1, r3]
 800887c:	b10a      	cbz	r2, 8008882 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800887e:	3301      	adds	r3, #1
 8008880:	e7f5      	b.n	800886e <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008882:	2300      	movs	r3, #0
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008888:	2d06      	cmp	r5, #6
 800888a:	d900      	bls.n	800888e <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800888c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800888e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008890:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008892:	f04f 0a00 	mov.w	sl, #0
 8008896:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800889a:	1d20      	adds	r0, r4, #4
 800889c:	f7ff f901 	bl	8007aa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a0:	f104 0018 	add.w	r0, r4, #24
 80088a4:	f7ff f8fd 	bl	8007aa2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088a8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088aa:	f1c5 0507 	rsb	r5, r5, #7
 80088ae:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088b0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80088b2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088b6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ba:	464a      	mov	r2, r9
 80088bc:	4641      	mov	r1, r8
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff f964 	bl	8007b8c <pxPortInitialiseStack>
 80088c4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80088c6:	b107      	cbz	r7, 80088ca <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088c8:	603c      	str	r4, [r7, #0]
 80088ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080088d0 <prvInitialiseTaskLists>:
{
 80088d0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d2:	2400      	movs	r4, #0
 80088d4:	e007      	b.n	80088e6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80088da:	0093      	lsls	r3, r2, #2
 80088dc:	480e      	ldr	r0, [pc, #56]	; (8008918 <prvInitialiseTaskLists+0x48>)
 80088de:	4418      	add	r0, r3
 80088e0:	f7ff f8d4 	bl	8007a8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088e4:	3401      	adds	r4, #1
 80088e6:	2c06      	cmp	r4, #6
 80088e8:	d9f5      	bls.n	80088d6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80088ea:	4d0c      	ldr	r5, [pc, #48]	; (800891c <prvInitialiseTaskLists+0x4c>)
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7ff f8cd 	bl	8007a8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088f2:	4c0b      	ldr	r4, [pc, #44]	; (8008920 <prvInitialiseTaskLists+0x50>)
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7ff f8c9 	bl	8007a8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088fa:	480a      	ldr	r0, [pc, #40]	; (8008924 <prvInitialiseTaskLists+0x54>)
 80088fc:	f7ff f8c6 	bl	8007a8c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008900:	4809      	ldr	r0, [pc, #36]	; (8008928 <prvInitialiseTaskLists+0x58>)
 8008902:	f7ff f8c3 	bl	8007a8c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008906:	4809      	ldr	r0, [pc, #36]	; (800892c <prvInitialiseTaskLists+0x5c>)
 8008908:	f7ff f8c0 	bl	8007a8c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <prvInitialiseTaskLists+0x60>)
 800890e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008910:	4b08      	ldr	r3, [pc, #32]	; (8008934 <prvInitialiseTaskLists+0x64>)
 8008912:	601c      	str	r4, [r3, #0]
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	2000f79c 	.word	0x2000f79c
 800891c:	2000f840 	.word	0x2000f840
 8008920:	2000f854 	.word	0x2000f854
 8008924:	2000f874 	.word	0x2000f874
 8008928:	2000f8a0 	.word	0x2000f8a0
 800892c:	2000f88c 	.word	0x2000f88c
 8008930:	2000f794 	.word	0x2000f794
 8008934:	2000f798 	.word	0x2000f798

08008938 <prvAddNewTaskToReadyList>:
{
 8008938:	b510      	push	{r4, lr}
 800893a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800893c:	f7ff f952 	bl	8007be4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <prvAddNewTaskToReadyList+0x8c>)
 8008942:	6813      	ldr	r3, [r2, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008948:	4b1f      	ldr	r3, [pc, #124]	; (80089c8 <prvAddNewTaskToReadyList+0x90>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d031      	beq.n	80089b4 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8008950:	4b1e      	ldr	r3, [pc, #120]	; (80089cc <prvAddNewTaskToReadyList+0x94>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	b93b      	cbnz	r3, 8008966 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008956:	4b1c      	ldr	r3, [pc, #112]	; (80089c8 <prvAddNewTaskToReadyList+0x90>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800895e:	429a      	cmp	r2, r3
 8008960:	d801      	bhi.n	8008966 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8008962:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <prvAddNewTaskToReadyList+0x90>)
 8008964:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8008966:	4a1a      	ldr	r2, [pc, #104]	; (80089d0 <prvAddNewTaskToReadyList+0x98>)
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800896e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008970:	2201      	movs	r2, #1
 8008972:	409a      	lsls	r2, r3
 8008974:	4917      	ldr	r1, [pc, #92]	; (80089d4 <prvAddNewTaskToReadyList+0x9c>)
 8008976:	6808      	ldr	r0, [r1, #0]
 8008978:	4302      	orrs	r2, r0
 800897a:	600a      	str	r2, [r1, #0]
 800897c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008980:	009a      	lsls	r2, r3, #2
 8008982:	1d21      	adds	r1, r4, #4
 8008984:	4814      	ldr	r0, [pc, #80]	; (80089d8 <prvAddNewTaskToReadyList+0xa0>)
 8008986:	4410      	add	r0, r2
 8008988:	f7ff f88e 	bl	8007aa8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800898c:	f7ff f950 	bl	8007c30 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <prvAddNewTaskToReadyList+0x94>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	b16b      	cbz	r3, 80089b2 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvAddNewTaskToReadyList+0x90>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800899e:	429a      	cmp	r2, r3
 80089a0:	d207      	bcs.n	80089b2 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80089a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <prvAddNewTaskToReadyList+0xa4>)
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <prvAddNewTaskToReadyList+0x90>)
 80089b6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089b8:	6813      	ldr	r3, [r2, #0]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d1d3      	bne.n	8008966 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80089be:	f7ff ff87 	bl	80088d0 <prvInitialiseTaskLists>
 80089c2:	e7d0      	b.n	8008966 <prvAddNewTaskToReadyList+0x2e>
 80089c4:	2000f828 	.word	0x2000f828
 80089c8:	2000f790 	.word	0x2000f790
 80089cc:	2000f888 	.word	0x2000f888
 80089d0:	2000f838 	.word	0x2000f838
 80089d4:	2000f83c 	.word	0x2000f83c
 80089d8:	2000f79c 	.word	0x2000f79c
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4604      	mov	r4, r0
 80089e4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089e6:	4b1f      	ldr	r3, [pc, #124]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x84>)
 80089e8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ea:	4b1f      	ldr	r3, [pc, #124]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	3004      	adds	r0, #4
 80089f0:	f7ff f880 	bl	8007af4 <uxListRemove>
 80089f4:	b950      	cbnz	r0, 8008a0c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80089f6:	4b1c      	ldr	r3, [pc, #112]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	2301      	movs	r3, #1
 80089fe:	fa03 f202 	lsl.w	r2, r3, r2
 8008a02:	491a      	ldr	r1, [pc, #104]	; (8008a6c <prvAddCurrentTaskToDelayedList+0x8c>)
 8008a04:	680b      	ldr	r3, [r1, #0]
 8008a06:	ea23 0302 	bic.w	r3, r3, r2
 8008a0a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a10:	bf14      	ite	ne
 8008a12:	2300      	movne	r3, #0
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	bf08      	it	eq
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b99b      	cbnz	r3, 8008a46 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a1e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a20:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008a26:	42a5      	cmp	r5, r4
 8008a28:	d814      	bhi.n	8008a54 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	3104      	adds	r1, #4
 8008a34:	f7ff f844 	bl	8007ac0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d201      	bcs.n	8008a44 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008a40:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a42:	601c      	str	r4, [r3, #0]
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a46:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a48:	6819      	ldr	r1, [r3, #0]
 8008a4a:	3104      	adds	r1, #4
 8008a4c:	480a      	ldr	r0, [pc, #40]	; (8008a78 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a4e:	f7ff f82b 	bl	8007aa8 <vListInsertEnd>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a54:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a5a:	6819      	ldr	r1, [r3, #0]
 8008a5c:	3104      	adds	r1, #4
 8008a5e:	f7ff f82f 	bl	8007ac0 <vListInsert>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	2000f8b4 	.word	0x2000f8b4
 8008a68:	2000f790 	.word	0x2000f790
 8008a6c:	2000f83c 	.word	0x2000f83c
 8008a70:	2000f794 	.word	0x2000f794
 8008a74:	2000f86c 	.word	0x2000f86c
 8008a78:	2000f88c 	.word	0x2000f88c
 8008a7c:	2000f798 	.word	0x2000f798

08008a80 <xTaskCreate>:
	{
 8008a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a84:	b085      	sub	sp, #20
 8008a86:	4606      	mov	r6, r0
 8008a88:	460f      	mov	r7, r1
 8008a8a:	4615      	mov	r5, r2
 8008a8c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8e:	0090      	lsls	r0, r2, #2
 8008a90:	f7ff fa2a 	bl	8007ee8 <pvPortMalloc>
			if( pxStack != NULL )
 8008a94:	b300      	cbz	r0, 8008ad8 <xTaskCreate+0x58>
 8008a96:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a98:	2054      	movs	r0, #84	; 0x54
 8008a9a:	f7ff fa25 	bl	8007ee8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	b1b0      	cbz	r0, 8008ad0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8008aa2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008aa6:	b1cc      	cbz	r4, 8008adc <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9303      	str	r3, [sp, #12]
 8008aac:	9402      	str	r4, [sp, #8]
 8008aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4643      	mov	r3, r8
 8008ab8:	462a      	mov	r2, r5
 8008aba:	4639      	mov	r1, r7
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff fec6 	bl	800884e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f7ff ff38 	bl	8008938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ac8:	2001      	movs	r0, #1
	}
 8008aca:	b005      	add	sp, #20
 8008acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008ad0:	4648      	mov	r0, r9
 8008ad2:	f7ff fa93 	bl	8007ffc <vPortFree>
 8008ad6:	e7e6      	b.n	8008aa6 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8008ad8:	2400      	movs	r4, #0
 8008ada:	e7e4      	b.n	8008aa6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008ae0:	e7f3      	b.n	8008aca <xTaskCreate+0x4a>
	...

08008ae4 <vTaskStartScheduler>:
{
 8008ae4:	b500      	push	{lr}
 8008ae6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8008ae8:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <vTaskStartScheduler+0x6c>)
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2300      	movs	r3, #0
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af4:	4917      	ldr	r1, [pc, #92]	; (8008b54 <vTaskStartScheduler+0x70>)
 8008af6:	4818      	ldr	r0, [pc, #96]	; (8008b58 <vTaskStartScheduler+0x74>)
 8008af8:	f7ff ffc2 	bl	8008a80 <xTaskCreate>
	if( xReturn == pdPASS )
 8008afc:	2801      	cmp	r0, #1
 8008afe:	d005      	beq.n	8008b0c <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b04:	d019      	beq.n	8008b3a <vTaskStartScheduler+0x56>
}
 8008b06:	b003      	add	sp, #12
 8008b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	b672      	cpsid	i
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	4b0d      	ldr	r3, [pc, #52]	; (8008b5c <vTaskStartScheduler+0x78>)
 8008b26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <vTaskStartScheduler+0x7c>)
 8008b2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <vTaskStartScheduler+0x80>)
 8008b32:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008b34:	f7ff f8f4 	bl	8007d20 <xPortStartScheduler>
 8008b38:	e7e5      	b.n	8008b06 <vTaskStartScheduler+0x22>
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	b672      	cpsid	i
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	b662      	cpsie	i
 8008b4e:	e7fe      	b.n	8008b4e <vTaskStartScheduler+0x6a>
 8008b50:	2000f868 	.word	0x2000f868
 8008b54:	08026484 	.word	0x08026484
 8008b58:	08008e69 	.word	0x08008e69
 8008b5c:	2000f86c 	.word	0x2000f86c
 8008b60:	2000f888 	.word	0x2000f888
 8008b64:	2000f8b4 	.word	0x2000f8b4

08008b68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008b68:	4a02      	ldr	r2, [pc, #8]	; (8008b74 <vTaskSuspendAll+0xc>)
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000f834 	.word	0x2000f834

08008b78 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008b78:	4b01      	ldr	r3, [pc, #4]	; (8008b80 <xTaskGetTickCount+0x8>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
}
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	2000f8b4 	.word	0x2000f8b4

08008b84 <xTaskGetTickCountFromISR>:
{
 8008b84:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b86:	f7ff f91f 	bl	8007dc8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008b8a:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <xTaskGetTickCountFromISR+0xc>)
 8008b8c:	6818      	ldr	r0, [r3, #0]
}
 8008b8e:	bd08      	pop	{r3, pc}
 8008b90:	2000f8b4 	.word	0x2000f8b4

08008b94 <xTaskIncrementTick>:
{
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b96:	4b3d      	ldr	r3, [pc, #244]	; (8008c8c <xTaskIncrementTick+0xf8>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d16a      	bne.n	8008c74 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8008b9e:	4b3c      	ldr	r3, [pc, #240]	; (8008c90 <xTaskIncrementTick+0xfc>)
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008ba4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8008ba6:	b9d5      	cbnz	r5, 8008bde <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008ba8:	4b3a      	ldr	r3, [pc, #232]	; (8008c94 <xTaskIncrementTick+0x100>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	b153      	cbz	r3, 8008bc6 <xTaskIncrementTick+0x32>
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	b672      	cpsid	i
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	b662      	cpsie	i
 8008bc4:	e7fe      	b.n	8008bc4 <xTaskIncrementTick+0x30>
 8008bc6:	4a33      	ldr	r2, [pc, #204]	; (8008c94 <xTaskIncrementTick+0x100>)
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	4b33      	ldr	r3, [pc, #204]	; (8008c98 <xTaskIncrementTick+0x104>)
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	6019      	str	r1, [r3, #0]
 8008bd2:	4a32      	ldr	r2, [pc, #200]	; (8008c9c <xTaskIncrementTick+0x108>)
 8008bd4:	6813      	ldr	r3, [r2, #0]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	f7ff fe15 	bl	8008808 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bde:	4b30      	ldr	r3, [pc, #192]	; (8008ca0 <xTaskIncrementTick+0x10c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429d      	cmp	r5, r3
 8008be4:	d23a      	bcs.n	8008c5c <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8008be6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008be8:	4b2e      	ldr	r3, [pc, #184]	; (8008ca4 <xTaskIncrementTick+0x110>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bf2:	009a      	lsls	r2, r3, #2
 8008bf4:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <xTaskIncrementTick+0x114>)
 8008bf6:	589b      	ldr	r3, [r3, r2]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d940      	bls.n	8008c7e <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8008bfc:	2401      	movs	r4, #1
 8008bfe:	e03e      	b.n	8008c7e <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 8008c00:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <xTaskIncrementTick+0x100>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	b353      	cbz	r3, 8008c60 <xTaskIncrementTick+0xcc>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	bb53      	cbnz	r3, 8008c64 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c0e:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <xTaskIncrementTick+0x100>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c16:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	d328      	bcc.n	8008c6e <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c1c:	1d37      	adds	r7, r6, #4
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7fe ff68 	bl	8007af4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c24:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008c26:	b11b      	cbz	r3, 8008c30 <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c28:	f106 0018 	add.w	r0, r6, #24
 8008c2c:	f7fe ff62 	bl	8007af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c30:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008c32:	2201      	movs	r2, #1
 8008c34:	409a      	lsls	r2, r3
 8008c36:	491d      	ldr	r1, [pc, #116]	; (8008cac <xTaskIncrementTick+0x118>)
 8008c38:	6808      	ldr	r0, [r1, #0]
 8008c3a:	4302      	orrs	r2, r0
 8008c3c:	600a      	str	r2, [r1, #0]
 8008c3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c42:	009a      	lsls	r2, r3, #2
 8008c44:	4639      	mov	r1, r7
 8008c46:	4818      	ldr	r0, [pc, #96]	; (8008ca8 <xTaskIncrementTick+0x114>)
 8008c48:	4410      	add	r0, r2
 8008c4a:	f7fe ff2d 	bl	8007aa8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c4e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8008c50:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <xTaskIncrementTick+0x110>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d2d2      	bcs.n	8008c00 <xTaskIncrementTick+0x6c>
 8008c5a:	e7d2      	b.n	8008c02 <xTaskIncrementTick+0x6e>
 8008c5c:	2400      	movs	r4, #0
 8008c5e:	e7d0      	b.n	8008c02 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c60:	2301      	movs	r3, #1
 8008c62:	e7d3      	b.n	8008c0c <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <xTaskIncrementTick+0x10c>)
 8008c6a:	601a      	str	r2, [r3, #0]
					break;
 8008c6c:	e7bc      	b.n	8008be8 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	; (8008ca0 <xTaskIncrementTick+0x10c>)
 8008c70:	6013      	str	r3, [r2, #0]
						break;
 8008c72:	e7b9      	b.n	8008be8 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8008c74:	4a0e      	ldr	r2, [pc, #56]	; (8008cb0 <xTaskIncrementTick+0x11c>)
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008c7c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <xTaskIncrementTick+0x120>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 8008c84:	2401      	movs	r4, #1
}
 8008c86:	4620      	mov	r0, r4
 8008c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	2000f834 	.word	0x2000f834
 8008c90:	2000f8b4 	.word	0x2000f8b4
 8008c94:	2000f794 	.word	0x2000f794
 8008c98:	2000f798 	.word	0x2000f798
 8008c9c:	2000f870 	.word	0x2000f870
 8008ca0:	2000f86c 	.word	0x2000f86c
 8008ca4:	2000f790 	.word	0x2000f790
 8008ca8:	2000f79c 	.word	0x2000f79c
 8008cac:	2000f83c 	.word	0x2000f83c
 8008cb0:	2000f830 	.word	0x2000f830
 8008cb4:	2000f8b8 	.word	0x2000f8b8

08008cb8 <xTaskResumeAll>:
{
 8008cb8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8008cba:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <xTaskResumeAll+0xdc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	b953      	cbnz	r3, 8008cd6 <xTaskResumeAll+0x1e>
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	b672      	cpsid	i
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	b662      	cpsie	i
 8008cd4:	e7fe      	b.n	8008cd4 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008cd6:	f7fe ff85 	bl	8007be4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008cda:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <xTaskResumeAll+0xdc>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	3a01      	subs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d150      	bne.n	8008d8a <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ce8:	4b2b      	ldr	r3, [pc, #172]	; (8008d98 <xTaskResumeAll+0xe0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	b923      	cbnz	r3, 8008cf8 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8008cee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008cf0:	f7fe ff9e 	bl	8007c30 <vPortExitCritical>
}
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cfa:	4b28      	ldr	r3, [pc, #160]	; (8008d9c <xTaskResumeAll+0xe4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	b31b      	cbz	r3, 8008d48 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d00:	4b26      	ldr	r3, [pc, #152]	; (8008d9c <xTaskResumeAll+0xe4>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d06:	f104 0018 	add.w	r0, r4, #24
 8008d0a:	f7fe fef3 	bl	8007af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d0e:	1d25      	adds	r5, r4, #4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f7fe feef 	bl	8007af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	409a      	lsls	r2, r3
 8008d1c:	4920      	ldr	r1, [pc, #128]	; (8008da0 <xTaskResumeAll+0xe8>)
 8008d1e:	6808      	ldr	r0, [r1, #0]
 8008d20:	4302      	orrs	r2, r0
 8008d22:	600a      	str	r2, [r1, #0]
 8008d24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d28:	009a      	lsls	r2, r3, #2
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	481d      	ldr	r0, [pc, #116]	; (8008da4 <xTaskResumeAll+0xec>)
 8008d2e:	4410      	add	r0, r2
 8008d30:	f7fe feba 	bl	8007aa8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d36:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <xTaskResumeAll+0xf0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3dc      	bcc.n	8008cfa <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8008d40:	2201      	movs	r2, #1
 8008d42:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <xTaskResumeAll+0xf4>)
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	e7d8      	b.n	8008cfa <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8008d48:	b10c      	cbz	r4, 8008d4e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8008d4a:	f7ff fd5d 	bl	8008808 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d4e:	4b18      	ldr	r3, [pc, #96]	; (8008db0 <xTaskResumeAll+0xf8>)
 8008d50:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d52:	b974      	cbnz	r4, 8008d72 <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <xTaskResumeAll+0xf4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	b1cb      	cbz	r3, 8008d8e <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5e:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <xTaskResumeAll+0xfc>)
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008d6a:	2401      	movs	r4, #1
 8008d6c:	e7c0      	b.n	8008cf0 <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d6e:	3c01      	subs	r4, #1
 8008d70:	d007      	beq.n	8008d82 <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 8008d72:	f7ff ff0f 	bl	8008b94 <xTaskIncrementTick>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0f9      	beq.n	8008d6e <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <xTaskResumeAll+0xf4>)
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e7f5      	b.n	8008d6e <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8008d82:	2200      	movs	r2, #0
 8008d84:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <xTaskResumeAll+0xf8>)
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	e7e4      	b.n	8008d54 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	e7b0      	b.n	8008cf0 <xTaskResumeAll+0x38>
 8008d8e:	2400      	movs	r4, #0
 8008d90:	e7ae      	b.n	8008cf0 <xTaskResumeAll+0x38>
 8008d92:	bf00      	nop
 8008d94:	2000f834 	.word	0x2000f834
 8008d98:	2000f828 	.word	0x2000f828
 8008d9c:	2000f874 	.word	0x2000f874
 8008da0:	2000f83c 	.word	0x2000f83c
 8008da4:	2000f79c 	.word	0x2000f79c
 8008da8:	2000f790 	.word	0x2000f790
 8008dac:	2000f8b8 	.word	0x2000f8b8
 8008db0:	2000f830 	.word	0x2000f830
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <vTaskDelay>:
	{
 8008db8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dba:	b1b8      	cbz	r0, 8008dec <vTaskDelay+0x34>
 8008dbc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <vTaskDelay+0x4c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	b153      	cbz	r3, 8008dda <vTaskDelay+0x22>
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	b672      	cpsid	i
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	b662      	cpsie	i
 8008dd8:	e7fe      	b.n	8008dd8 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8008dda:	f7ff fec5 	bl	8008b68 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dde:	2100      	movs	r1, #0
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fdfd 	bl	80089e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008de6:	f7ff ff67 	bl	8008cb8 <xTaskResumeAll>
 8008dea:	e000      	b.n	8008dee <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dec:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8008dee:	b938      	cbnz	r0, 8008e00 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8008df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df4:	4b04      	ldr	r3, [pc, #16]	; (8008e08 <vTaskDelay+0x50>)
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	bf00      	nop
 8008e04:	2000f834 	.word	0x2000f834
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	b313      	cbz	r3, 8008e58 <prvCheckTasksWaitingTermination+0x4c>
{
 8008e12:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8008e14:	f7ff fea8 	bl	8008b68 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8008e18:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e1a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8008e1c:	f7ff ff4c 	bl	8008cb8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8008e20:	b924      	cbnz	r4, 8008e2c <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e22:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f4      	bne.n	8008e14 <prvCheckTasksWaitingTermination+0x8>
}
 8008e2a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8008e2c:	f7fe feda 	bl	8007be4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e36:	1d20      	adds	r0, r4, #4
 8008e38:	f7fe fe5c 	bl	8007af4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8008e44:	4a05      	ldr	r2, [pc, #20]	; (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8008e4c:	f7fe fef0 	bl	8007c30 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fcf3 	bl	800883c <prvDeleteTCB>
 8008e56:	e7e4      	b.n	8008e22 <prvCheckTasksWaitingTermination+0x16>
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	2000f82c 	.word	0x2000f82c
 8008e60:	2000f8a0 	.word	0x2000f8a0
 8008e64:	2000f828 	.word	0x2000f828

08008e68 <prvIdleTask>:
{
 8008e68:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8008e6a:	f7ff ffcf 	bl	8008e0c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e6e:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <prvIdleTask+0x20>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d9f9      	bls.n	8008e6a <prvIdleTask+0x2>
				taskYIELD();
 8008e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <prvIdleTask+0x24>)
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	e7f0      	b.n	8008e6a <prvIdleTask+0x2>
 8008e88:	2000f79c 	.word	0x2000f79c
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e90:	4b22      	ldr	r3, [pc, #136]	; (8008f1c <vTaskSwitchContext+0x8c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b9d3      	cbnz	r3, 8008ecc <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 8008e96:	2200      	movs	r2, #0
 8008e98:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <vTaskSwitchContext+0x90>)
 8008e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e9c:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <vTaskSwitchContext+0x94>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8008ea0:	fab3 f383 	clz	r3, r3
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f1c3 031f 	rsb	r3, r3, #31
 8008eaa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008eae:	008a      	lsls	r2, r1, #2
 8008eb0:	491d      	ldr	r1, [pc, #116]	; (8008f28 <vTaskSwitchContext+0x98>)
 8008eb2:	588a      	ldr	r2, [r1, r2]
 8008eb4:	b972      	cbnz	r2, 8008ed4 <vTaskSwitchContext+0x44>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	b672      	cpsid	i
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	b662      	cpsie	i
 8008eca:	e7fe      	b.n	8008eca <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 8008ecc:	2201      	movs	r2, #1
 8008ece:	4b14      	ldr	r3, [pc, #80]	; (8008f20 <vTaskSwitchContext+0x90>)
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	4770      	bx	lr
{
 8008ed4:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008ed6:	4814      	ldr	r0, [pc, #80]	; (8008f28 <vTaskSwitchContext+0x98>)
 8008ed8:	009a      	lsls	r2, r3, #2
 8008eda:	18d4      	adds	r4, r2, r3
 8008edc:	00a1      	lsls	r1, r4, #2
 8008ede:	4401      	add	r1, r0
 8008ee0:	684c      	ldr	r4, [r1, #4]
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	604c      	str	r4, [r1, #4]
 8008ee6:	441a      	add	r2, r3
 8008ee8:	0091      	lsls	r1, r2, #2
 8008eea:	3108      	adds	r1, #8
 8008eec:	4408      	add	r0, r1
 8008eee:	4284      	cmp	r4, r0
 8008ef0:	d00b      	beq.n	8008f0a <vTaskSwitchContext+0x7a>
 8008ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008ef6:	009a      	lsls	r2, r3, #2
 8008ef8:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <vTaskSwitchContext+0x98>)
 8008efa:	4413      	add	r3, r2
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vTaskSwitchContext+0x9c>)
 8008f02:	601a      	str	r2, [r3, #0]
}
 8008f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f08:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f0a:	6860      	ldr	r0, [r4, #4]
 8008f0c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008f10:	0091      	lsls	r1, r2, #2
 8008f12:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <vTaskSwitchContext+0x98>)
 8008f14:	440a      	add	r2, r1
 8008f16:	6050      	str	r0, [r2, #4]
 8008f18:	e7eb      	b.n	8008ef2 <vTaskSwitchContext+0x62>
 8008f1a:	bf00      	nop
 8008f1c:	2000f834 	.word	0x2000f834
 8008f20:	2000f8b8 	.word	0x2000f8b8
 8008f24:	2000f83c 	.word	0x2000f83c
 8008f28:	2000f79c 	.word	0x2000f79c
 8008f2c:	2000f790 	.word	0x2000f790

08008f30 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008f30:	b950      	cbnz	r0, 8008f48 <vTaskPlaceOnEventList+0x18>
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	e7fe      	b.n	8008f46 <vTaskPlaceOnEventList+0x16>
{
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <vTaskPlaceOnEventList+0x30>)
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	3118      	adds	r1, #24
 8008f52:	f7fe fdb5 	bl	8007ac0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f56:	2101      	movs	r1, #1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff fd41 	bl	80089e0 <prvAddCurrentTaskToDelayedList>
 8008f5e:	bd10      	pop	{r4, pc}
 8008f60:	2000f790 	.word	0x2000f790

08008f64 <xTaskRemoveFromEventList>:
{
 8008f64:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f66:	68c3      	ldr	r3, [r0, #12]
 8008f68:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008f6a:	b324      	cbz	r4, 8008fb6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f6c:	f104 0518 	add.w	r5, r4, #24
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7fe fdbf 	bl	8007af4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f76:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <xTaskRemoveFromEventList+0x78>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	bb3b      	cbnz	r3, 8008fcc <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f7c:	1d25      	adds	r5, r4, #4
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f7fe fdb8 	bl	8007af4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f86:	2201      	movs	r2, #1
 8008f88:	409a      	lsls	r2, r3
 8008f8a:	4915      	ldr	r1, [pc, #84]	; (8008fe0 <xTaskRemoveFromEventList+0x7c>)
 8008f8c:	6808      	ldr	r0, [r1, #0]
 8008f8e:	4302      	orrs	r2, r0
 8008f90:	600a      	str	r2, [r1, #0]
 8008f92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f96:	009a      	lsls	r2, r3, #2
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4812      	ldr	r0, [pc, #72]	; (8008fe4 <xTaskRemoveFromEventList+0x80>)
 8008f9c:	4410      	add	r0, r2
 8008f9e:	f7fe fd83 	bl	8007aa8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <xTaskRemoveFromEventList+0x84>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d913      	bls.n	8008fd6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8008fae:	2001      	movs	r0, #1
 8008fb0:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <xTaskRemoveFromEventList+0x88>)
 8008fb2:	6018      	str	r0, [r3, #0]
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	b672      	cpsid	i
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	b662      	cpsie	i
 8008fca:	e7fe      	b.n	8008fca <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <xTaskRemoveFromEventList+0x8c>)
 8008fd0:	f7fe fd6a 	bl	8007aa8 <vListInsertEnd>
 8008fd4:	e7e5      	b.n	8008fa2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8008fd6:	2000      	movs	r0, #0
}
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	2000f834 	.word	0x2000f834
 8008fe0:	2000f83c 	.word	0x2000f83c
 8008fe4:	2000f79c 	.word	0x2000f79c
 8008fe8:	2000f790 	.word	0x2000f790
 8008fec:	2000f8b8 	.word	0x2000f8b8
 8008ff0:	2000f874 	.word	0x2000f874

08008ff4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8008ff4:	b130      	cbz	r0, 8009004 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ff6:	4a09      	ldr	r2, [pc, #36]	; (800901c <vTaskSetTimeOutState+0x28>)
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <vTaskSetTimeOutState+0x2c>)
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	6042      	str	r2, [r0, #4]
 8009002:	4770      	bx	lr
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	b672      	cpsid	i
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	b662      	cpsie	i
 8009018:	e7fe      	b.n	8009018 <vTaskSetTimeOutState+0x24>
 800901a:	bf00      	nop
 800901c:	2000f870 	.word	0x2000f870
 8009020:	2000f8b4 	.word	0x2000f8b4

08009024 <xTaskCheckForTimeOut>:
{
 8009024:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8009026:	b1c0      	cbz	r0, 800905a <xTaskCheckForTimeOut+0x36>
 8009028:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 800902a:	b309      	cbz	r1, 8009070 <xTaskCheckForTimeOut+0x4c>
 800902c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800902e:	f7fe fdd9 	bl	8007be4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009032:	4b1c      	ldr	r3, [pc, #112]	; (80090a4 <xTaskCheckForTimeOut+0x80>)
 8009034:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d02e      	beq.n	800909c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800903e:	6820      	ldr	r0, [r4, #0]
 8009040:	4a19      	ldr	r2, [pc, #100]	; (80090a8 <xTaskCheckForTimeOut+0x84>)
 8009042:	6812      	ldr	r2, [r2, #0]
 8009044:	4290      	cmp	r0, r2
 8009046:	d002      	beq.n	800904e <xTaskCheckForTimeOut+0x2a>
 8009048:	6862      	ldr	r2, [r4, #4]
 800904a:	4291      	cmp	r1, r2
 800904c:	d228      	bcs.n	80090a0 <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	1a88      	subs	r0, r1, r2
 8009052:	4283      	cmp	r3, r0
 8009054:	d817      	bhi.n	8009086 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8009056:	2401      	movs	r4, #1
 8009058:	e01c      	b.n	8009094 <xTaskCheckForTimeOut+0x70>
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	b672      	cpsid	i
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	b662      	cpsie	i
 800906e:	e7fe      	b.n	800906e <xTaskCheckForTimeOut+0x4a>
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	b672      	cpsid	i
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	b662      	cpsie	i
 8009084:	e7fe      	b.n	8009084 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009086:	1a52      	subs	r2, r2, r1
 8009088:	4413      	add	r3, r2
 800908a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff ffb1 	bl	8008ff4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8009092:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009094:	f7fe fdcc 	bl	8007c30 <vPortExitCritical>
}
 8009098:	4620      	mov	r0, r4
 800909a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 800909c:	2400      	movs	r4, #0
 800909e:	e7f9      	b.n	8009094 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 80090a0:	2401      	movs	r4, #1
 80090a2:	e7f7      	b.n	8009094 <xTaskCheckForTimeOut+0x70>
 80090a4:	2000f8b4 	.word	0x2000f8b4
 80090a8:	2000f870 	.word	0x2000f870

080090ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80090ac:	2201      	movs	r2, #1
 80090ae:	4b01      	ldr	r3, [pc, #4]	; (80090b4 <vTaskMissedYield+0x8>)
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	4770      	bx	lr
 80090b4:	2000f8b8 	.word	0x2000f8b8

080090b8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80090b8:	4b01      	ldr	r3, [pc, #4]	; (80090c0 <xTaskGetCurrentTaskHandle+0x8>)
 80090ba:	6818      	ldr	r0, [r3, #0]
	}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	2000f790 	.word	0x2000f790

080090c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <xTaskGetSchedulerState+0x18>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	b123      	cbz	r3, 80090d4 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <xTaskGetSchedulerState+0x1c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	b91b      	cbnz	r3, 80090d8 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 80090d0:	2002      	movs	r0, #2
 80090d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090d4:	2001      	movs	r0, #1
 80090d6:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 80090d8:	2000      	movs	r0, #0
	}
 80090da:	4770      	bx	lr
 80090dc:	2000f888 	.word	0x2000f888
 80090e0:	2000f834 	.word	0x2000f834

080090e4 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d047      	beq.n	8009178 <vTaskPriorityInherit+0x94>
	{
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090ee:	4923      	ldr	r1, [pc, #140]	; (800917c <vTaskPriorityInherit+0x98>)
 80090f0:	6809      	ldr	r1, [r1, #0]
 80090f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80090f4:	428b      	cmp	r3, r1
 80090f6:	d216      	bcs.n	8009126 <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090f8:	6981      	ldr	r1, [r0, #24]
 80090fa:	2900      	cmp	r1, #0
 80090fc:	db05      	blt.n	800910a <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fe:	491f      	ldr	r1, [pc, #124]	; (800917c <vTaskPriorityInherit+0x98>)
 8009100:	6809      	ldr	r1, [r1, #0]
 8009102:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009104:	f1c1 0107 	rsb	r1, r1, #7
 8009108:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800910a:	6960      	ldr	r0, [r4, #20]
 800910c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009110:	0099      	lsls	r1, r3, #2
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <vTaskPriorityInherit+0x9c>)
 8009114:	440b      	add	r3, r1
 8009116:	4298      	cmp	r0, r3
 8009118:	d006      	beq.n	8009128 <vTaskPriorityInherit+0x44>
 800911a:	2300      	movs	r3, #0
 800911c:	b933      	cbnz	r3, 800912c <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800911e:	4b17      	ldr	r3, [pc, #92]	; (800917c <vTaskPriorityInherit+0x98>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009126:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009128:	2301      	movs	r3, #1
 800912a:	e7f7      	b.n	800911c <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912c:	1d25      	adds	r5, r4, #4
 800912e:	4628      	mov	r0, r5
 8009130:	f7fe fce0 	bl	8007af4 <uxListRemove>
 8009134:	b968      	cbnz	r0, 8009152 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009138:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800913c:	008a      	lsls	r2, r1, #2
 800913e:	4910      	ldr	r1, [pc, #64]	; (8009180 <vTaskPriorityInherit+0x9c>)
 8009140:	588a      	ldr	r2, [r1, r2]
 8009142:	b932      	cbnz	r2, 8009152 <vTaskPriorityInherit+0x6e>
 8009144:	2201      	movs	r2, #1
 8009146:	409a      	lsls	r2, r3
 8009148:	490e      	ldr	r1, [pc, #56]	; (8009184 <vTaskPriorityInherit+0xa0>)
 800914a:	680b      	ldr	r3, [r1, #0]
 800914c:	ea23 0302 	bic.w	r3, r3, r2
 8009150:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <vTaskPriorityInherit+0x98>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800915a:	2201      	movs	r2, #1
 800915c:	409a      	lsls	r2, r3
 800915e:	4909      	ldr	r1, [pc, #36]	; (8009184 <vTaskPriorityInherit+0xa0>)
 8009160:	6808      	ldr	r0, [r1, #0]
 8009162:	4302      	orrs	r2, r0
 8009164:	600a      	str	r2, [r1, #0]
 8009166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800916a:	009a      	lsls	r2, r3, #2
 800916c:	4629      	mov	r1, r5
 800916e:	4804      	ldr	r0, [pc, #16]	; (8009180 <vTaskPriorityInherit+0x9c>)
 8009170:	4410      	add	r0, r2
 8009172:	f7fe fc99 	bl	8007aa8 <vListInsertEnd>
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	2000f790 	.word	0x2000f790
 8009180:	2000f79c 	.word	0x2000f79c
 8009184:	2000f83c 	.word	0x2000f83c

08009188 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009188:	2800      	cmp	r0, #0
 800918a:	d04e      	beq.n	800922a <xTaskPriorityDisinherit+0xa2>
	{
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009190:	4a29      	ldr	r2, [pc, #164]	; (8009238 <xTaskPriorityDisinherit+0xb0>)
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	4290      	cmp	r0, r2
 8009196:	d00a      	beq.n	80091ae <xTaskPriorityDisinherit+0x26>
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	b672      	cpsid	i
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	b662      	cpsie	i
 80091ac:	e7fe      	b.n	80091ac <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80091ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80091b0:	b952      	cbnz	r2, 80091c8 <xTaskPriorityDisinherit+0x40>
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	b672      	cpsid	i
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	b662      	cpsie	i
 80091c6:	e7fe      	b.n	80091c6 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80091c8:	3a01      	subs	r2, #1
 80091ca:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80091ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80091d0:	4288      	cmp	r0, r1
 80091d2:	d02c      	beq.n	800922e <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091d4:	bb6a      	cbnz	r2, 8009232 <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d6:	1d25      	adds	r5, r4, #4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7fe fc8b 	bl	8007af4 <uxListRemove>
 80091de:	b970      	cbnz	r0, 80091fe <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80091e6:	008b      	lsls	r3, r1, #2
 80091e8:	4914      	ldr	r1, [pc, #80]	; (800923c <xTaskPriorityDisinherit+0xb4>)
 80091ea:	58cb      	ldr	r3, [r1, r3]
 80091ec:	b93b      	cbnz	r3, 80091fe <xTaskPriorityDisinherit+0x76>
 80091ee:	2301      	movs	r3, #1
 80091f0:	fa03 f202 	lsl.w	r2, r3, r2
 80091f4:	4912      	ldr	r1, [pc, #72]	; (8009240 <xTaskPriorityDisinherit+0xb8>)
 80091f6:	680b      	ldr	r3, [r1, #0]
 80091f8:	ea23 0302 	bic.w	r3, r3, r2
 80091fc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009200:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009202:	f1c3 0207 	rsb	r2, r3, #7
 8009206:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009208:	2401      	movs	r4, #1
 800920a:	fa04 f203 	lsl.w	r2, r4, r3
 800920e:	490c      	ldr	r1, [pc, #48]	; (8009240 <xTaskPriorityDisinherit+0xb8>)
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	4302      	orrs	r2, r0
 8009214:	600a      	str	r2, [r1, #0]
 8009216:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800921a:	009a      	lsls	r2, r3, #2
 800921c:	4629      	mov	r1, r5
 800921e:	4807      	ldr	r0, [pc, #28]	; (800923c <xTaskPriorityDisinherit+0xb4>)
 8009220:	4410      	add	r0, r2
 8009222:	f7fe fc41 	bl	8007aa8 <vListInsertEnd>
					xReturn = pdTRUE;
 8009226:	4620      	mov	r0, r4
 8009228:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800922a:	2000      	movs	r0, #0
 800922c:	4770      	bx	lr
 800922e:	2000      	movs	r0, #0
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	2000      	movs	r0, #0
	}
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	2000f790 	.word	0x2000f790
 800923c:	2000f79c 	.word	0x2000f79c
 8009240:	2000f83c 	.word	0x2000f83c

08009244 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <pvTaskIncrementMutexHeldCount+0x18>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	b123      	cbz	r3, 8009254 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800924a:	4b04      	ldr	r3, [pc, #16]	; (800925c <pvTaskIncrementMutexHeldCount+0x18>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009250:	3301      	adds	r3, #1
 8009252:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8009254:	4b01      	ldr	r3, [pc, #4]	; (800925c <pvTaskIncrementMutexHeldCount+0x18>)
 8009256:	6818      	ldr	r0, [r3, #0]
	}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	2000f790 	.word	0x2000f790

08009260 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8009260:	2320      	movs	r3, #32
 8009262:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8009264:	4800      	ldr	r0, [pc, #0]	; (8009268 <USBD_MSC_GetHSCfgDesc+0x8>)
 8009266:	4770      	bx	lr
 8009268:	20000070 	.word	0x20000070

0800926c <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800926c:	2320      	movs	r3, #32
 800926e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8009270:	4800      	ldr	r0, [pc, #0]	; (8009274 <USBD_MSC_GetFSCfgDesc+0x8>)
 8009272:	4770      	bx	lr
 8009274:	20000050 	.word	0x20000050

08009278 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8009278:	2320      	movs	r3, #32
 800927a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 800927c:	4800      	ldr	r0, [pc, #0]	; (8009280 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 800927e:	4770      	bx	lr
 8009280:	2000009c 	.word	0x2000009c

08009284 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8009284:	230a      	movs	r3, #10
 8009286:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8009288:	4800      	ldr	r0, [pc, #0]	; (800928c <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800928a:	4770      	bx	lr
 800928c:	20000090 	.word	0x20000090

08009290 <USBD_MSC_Init>:
{
 8009290:	b510      	push	{r4, lr}
 8009292:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8009294:	7c03      	ldrb	r3, [r0, #16]
 8009296:	b9c3      	cbnz	r3, 80092ca <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8009298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800929c:	2202      	movs	r2, #2
 800929e:	2101      	movs	r1, #1
 80092a0:	f004 fa02 	bl	800d6a8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80092a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092a8:	2202      	movs	r2, #2
 80092aa:	2181      	movs	r1, #129	; 0x81
 80092ac:	4620      	mov	r0, r4
 80092ae:	f004 f9fb 	bl	800d6a8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80092b2:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80092b6:	f019 fafb 	bl	80228b0 <malloc>
 80092ba:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80092be:	b180      	cbz	r0, 80092e2 <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 f8f3 	bl	80094ac <MSC_BOT_Init>
    ret = 0;
 80092c6:	2000      	movs	r0, #0
 80092c8:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	2202      	movs	r2, #2
 80092ce:	2101      	movs	r1, #1
 80092d0:	f004 f9ea 	bl	800d6a8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80092d4:	2340      	movs	r3, #64	; 0x40
 80092d6:	2202      	movs	r2, #2
 80092d8:	2181      	movs	r1, #129	; 0x81
 80092da:	4620      	mov	r0, r4
 80092dc:	f004 f9e4 	bl	800d6a8 <USBD_LL_OpenEP>
 80092e0:	e7e7      	b.n	80092b2 <USBD_MSC_Init+0x22>
    ret = 1; 
 80092e2:	2001      	movs	r0, #1
}
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <USBD_MSC_DeInit>:
{
 80092e6:	b510      	push	{r4, lr}
 80092e8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80092ea:	2101      	movs	r1, #1
 80092ec:	f004 f9ed 	bl	800d6ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80092f0:	2181      	movs	r1, #129	; 0x81
 80092f2:	4620      	mov	r0, r4
 80092f4:	f004 f9e9 	bl	800d6ca <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 f903 	bl	8009504 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80092fe:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8009302:	b120      	cbz	r0, 800930e <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8009304:	f019 fadc 	bl	80228c0 <free>
    pdev->pClassData  = NULL; 
 8009308:	2300      	movs	r3, #0
 800930a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800930e:	2000      	movs	r0, #0
 8009310:	bd10      	pop	{r4, pc}

08009312 <USBD_MSC_Setup>:
{
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	4605      	mov	r5, r0
 8009316:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8009318:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800931c:	780b      	ldrb	r3, [r1, #0]
 800931e:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8009322:	d035      	beq.n	8009390 <USBD_MSC_Setup+0x7e>
 8009324:	2a20      	cmp	r2, #32
 8009326:	d178      	bne.n	800941a <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 8009328:	784a      	ldrb	r2, [r1, #1]
 800932a:	2afe      	cmp	r2, #254	; 0xfe
 800932c:	d005      	beq.n	800933a <USBD_MSC_Setup+0x28>
 800932e:	2aff      	cmp	r2, #255	; 0xff
 8009330:	d01d      	beq.n	800936e <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 8009332:	f000 fe5b 	bl	8009fec <USBD_CtlError>
       return USBD_FAIL; 
 8009336:	2002      	movs	r0, #2
 8009338:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 800933a:	884a      	ldrh	r2, [r1, #2]
 800933c:	b912      	cbnz	r2, 8009344 <USBD_MSC_Setup+0x32>
         (req->wLength == 1) &&
 800933e:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8009340:	2a01      	cmp	r2, #1
 8009342:	d005      	beq.n	8009350 <USBD_MSC_Setup+0x3e>
         USBD_CtlError(pdev , req);
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 fe50 	bl	8009fec <USBD_CtlError>
         return USBD_FAIL; 
 800934c:	2002      	movs	r0, #2
 800934e:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 1) &&
 8009350:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009354:	d0f6      	beq.n	8009344 <USBD_MSC_Setup+0x32>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8009356:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	4798      	blx	r3
 800935e:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 8009360:	2201      	movs	r2, #1
 8009362:	4631      	mov	r1, r6
 8009364:	4628      	mov	r0, r5
 8009366:	f001 f89e 	bl	800a4a6 <USBD_CtlSendData>
  return 0;
 800936a:	2000      	movs	r0, #0
      break;
 800936c:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 800936e:	884a      	ldrh	r2, [r1, #2]
 8009370:	b90a      	cbnz	r2, 8009376 <USBD_MSC_Setup+0x64>
         (req->wLength == 0) &&
 8009372:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8009374:	b12a      	cbz	r2, 8009382 <USBD_MSC_Setup+0x70>
         USBD_CtlError(pdev , req);
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f000 fe37 	bl	8009fec <USBD_CtlError>
         return USBD_FAIL; 
 800937e:	2002      	movs	r0, #2
 8009380:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 0) &&
 8009382:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009386:	d1f6      	bne.n	8009376 <USBD_MSC_Setup+0x64>
         MSC_BOT_Reset(pdev);
 8009388:	f000 f8af 	bl	80094ea <MSC_BOT_Reset>
  return 0;
 800938c:	2000      	movs	r0, #0
      break;
 800938e:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8009390:	784b      	ldrb	r3, [r1, #1]
 8009392:	2b0a      	cmp	r3, #10
 8009394:	d005      	beq.n	80093a2 <USBD_MSC_Setup+0x90>
 8009396:	2b0b      	cmp	r3, #11
 8009398:	d009      	beq.n	80093ae <USBD_MSC_Setup+0x9c>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d00b      	beq.n	80093b6 <USBD_MSC_Setup+0xa4>
  return 0;
 800939e:	2000      	movs	r0, #0
}
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlSendData (pdev,
 80093a2:	2201      	movs	r2, #1
 80093a4:	1d31      	adds	r1, r6, #4
 80093a6:	f001 f87e 	bl	800a4a6 <USBD_CtlSendData>
  return 0;
 80093aa:	2000      	movs	r0, #0
      break;
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
      hmsc->interface = (uint8_t)(req->wValue);
 80093ae:	788b      	ldrb	r3, [r1, #2]
 80093b0:	6073      	str	r3, [r6, #4]
  return 0;
 80093b2:	2000      	movs	r0, #0
      break;
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80093b6:	7909      	ldrb	r1, [r1, #4]
 80093b8:	f004 f995 	bl	800d6e6 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 80093bc:	7921      	ldrb	r1, [r4, #4]
 80093be:	4628      	mov	r0, r5
 80093c0:	f004 f983 	bl	800d6ca <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 80093c4:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db0e      	blt.n	80093ea <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80093cc:	7c2b      	ldrb	r3, [r5, #16]
 80093ce:	b9eb      	cbnz	r3, 800940c <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 80093d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d4:	2202      	movs	r2, #2
 80093d6:	2101      	movs	r1, #1
 80093d8:	4628      	mov	r0, r5
 80093da:	f004 f965 	bl	800d6a8 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80093de:	7921      	ldrb	r1, [r4, #4]
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f93b 	bl	800965c <MSC_BOT_CplClrFeature>
  return 0;
 80093e6:	2000      	movs	r0, #0
      break;
 80093e8:	bd70      	pop	{r4, r5, r6, pc}
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80093ea:	7c2b      	ldrb	r3, [r5, #16]
 80093ec:	b93b      	cbnz	r3, 80093fe <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 80093ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093f2:	2202      	movs	r2, #2
 80093f4:	2181      	movs	r1, #129	; 0x81
 80093f6:	4628      	mov	r0, r5
 80093f8:	f004 f956 	bl	800d6a8 <USBD_LL_OpenEP>
 80093fc:	e7ef      	b.n	80093de <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 80093fe:	2340      	movs	r3, #64	; 0x40
 8009400:	2202      	movs	r2, #2
 8009402:	2181      	movs	r1, #129	; 0x81
 8009404:	4628      	mov	r0, r5
 8009406:	f004 f94f 	bl	800d6a8 <USBD_LL_OpenEP>
 800940a:	e7e8      	b.n	80093de <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 800940c:	2340      	movs	r3, #64	; 0x40
 800940e:	2202      	movs	r2, #2
 8009410:	2101      	movs	r1, #1
 8009412:	4628      	mov	r0, r5
 8009414:	f004 f948 	bl	800d6a8 <USBD_LL_OpenEP>
 8009418:	e7e1      	b.n	80093de <USBD_MSC_Setup+0xcc>
  return 0;
 800941a:	2000      	movs	r0, #0
 800941c:	bd70      	pop	{r4, r5, r6, pc}

0800941e <USBD_MSC_DataIn>:
{
 800941e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8009420:	f000 f892 	bl	8009548 <MSC_BOT_DataIn>
}
 8009424:	2000      	movs	r0, #0
 8009426:	bd08      	pop	{r3, pc}

08009428 <USBD_MSC_DataOut>:
{
 8009428:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 800942a:	f000 f8fd 	bl	8009628 <MSC_BOT_DataOut>
}
 800942e:	2000      	movs	r0, #0
 8009430:	bd08      	pop	{r3, pc}

08009432 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8009432:	b109      	cbz	r1, 8009438 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8009434:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8009438:	2000      	movs	r0, #0
 800943a:	4770      	bx	lr

0800943c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009440:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8009444:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8009448:	b923      	cbnz	r3, 8009454 <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 800944a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 800944e:	b10b      	cbz	r3, 8009454 <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8009450:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 8009452:	b13b      	cbz	r3, 8009464 <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009454:	2181      	movs	r1, #129	; 0x81
 8009456:	4628      	mov	r0, r5
 8009458:	f004 f953 	bl	800d702 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800945c:	7a63      	ldrb	r3, [r4, #9]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d004      	beq.n	800946c <MSC_BOT_Abort+0x30>
 8009462:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8009464:	2101      	movs	r1, #1
 8009466:	f004 f94c 	bl	800d702 <USBD_LL_StallEP>
 800946a:	e7f3      	b.n	8009454 <MSC_BOT_Abort+0x18>
  {
    USBD_LL_PrepareReceive (pdev,
 800946c:	231f      	movs	r3, #31
 800946e:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8009472:	2101      	movs	r1, #1
 8009474:	4628      	mov	r0, r5
 8009476:	f004 f993 	bl	800d7a0 <USBD_LL_PrepareReceive>
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 800947a:	e7f2      	b.n	8009462 <MSC_BOT_Abort+0x26>

0800947c <MSC_BOT_SendData>:
{
 800947c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800947e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8009482:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009486:	4293      	cmp	r3, r2
 8009488:	bf28      	it	cs
 800948a:	4613      	movcs	r3, r2
 800948c:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 800948e:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009498:	2200      	movs	r2, #0
 800949a:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800949e:	2204      	movs	r2, #4
 80094a0:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 80094a2:	460a      	mov	r2, r1
 80094a4:	2181      	movs	r1, #129	; 0x81
 80094a6:	f004 f96d 	bl	800d784 <USBD_LL_Transmit>
 80094aa:	bd10      	pop	{r4, pc}

080094ac <MSC_BOT_Init>:
{
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80094b0:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80094b4:	2000      	movs	r0, #0
 80094b6:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80094b8:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 80094ba:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 80094be:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 80094c2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80094ca:	2101      	movs	r1, #1
 80094cc:	4620      	mov	r0, r4
 80094ce:	f004 f90a 	bl	800d6e6 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80094d2:	2181      	movs	r1, #129	; 0x81
 80094d4:	4620      	mov	r0, r4
 80094d6:	f004 f906 	bl	800d6e6 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 80094da:	231f      	movs	r3, #31
 80094dc:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 80094e0:	2101      	movs	r1, #1
 80094e2:	4620      	mov	r0, r4
 80094e4:	f004 f95c 	bl	800d7a0 <USBD_LL_PrepareReceive>
 80094e8:	bd38      	pop	{r3, r4, r5, pc}

080094ea <MSC_BOT_Reset>:
{
 80094ea:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80094ec:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80094f4:	2101      	movs	r1, #1
 80094f6:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 80094f8:	231f      	movs	r3, #31
 80094fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094fe:	f004 f94f 	bl	800d7a0 <USBD_LL_PrepareReceive>
 8009502:	bd08      	pop	{r3, pc}

08009504 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8009504:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8009508:	2200      	movs	r2, #0
 800950a:	721a      	strb	r2, [r3, #8]
 800950c:	4770      	bx	lr
	...

08009510 <MSC_BOT_SendCSW>:
{
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009514:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <MSC_BOT_SendCSW+0x34>)
 800951a:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800951e:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8009522:	2300      	movs	r3, #0
 8009524:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8009526:	230d      	movs	r3, #13
 8009528:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 800952c:	2181      	movs	r1, #129	; 0x81
 800952e:	f004 f929 	bl	800d784 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8009532:	231f      	movs	r3, #31
 8009534:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8009538:	2101      	movs	r1, #1
 800953a:	4628      	mov	r0, r5
 800953c:	f004 f930 	bl	800d7a0 <USBD_LL_PrepareReceive>
 8009540:	bd38      	pop	{r3, r4, r5, pc}
 8009542:	bf00      	nop
 8009544:	53425355 	.word	0x53425355

08009548 <MSC_BOT_DataIn>:
{
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800954c:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8009550:	7a0b      	ldrb	r3, [r1, #8]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d007      	beq.n	8009566 <MSC_BOT_DataIn+0x1e>
 8009556:	d304      	bcc.n	8009562 <MSC_BOT_DataIn+0x1a>
 8009558:	2b04      	cmp	r3, #4
 800955a:	d803      	bhi.n	8009564 <MSC_BOT_DataIn+0x1c>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800955c:	2100      	movs	r1, #0
 800955e:	f7ff ffd7 	bl	8009510 <MSC_BOT_SendCSW>
 8009562:	bd10      	pop	{r4, pc}
 8009564:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8009566:	f201 221b 	addw	r2, r1, #539	; 0x21b
 800956a:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 800956e:	f000 fb6e 	bl	8009c4e <SCSI_ProcessCmd>
 8009572:	2800      	cmp	r0, #0
 8009574:	daf5      	bge.n	8009562 <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8009576:	2101      	movs	r1, #1
 8009578:	4620      	mov	r0, r4
 800957a:	f7ff ffc9 	bl	8009510 <MSC_BOT_SendCSW>
 800957e:	bd10      	pop	{r4, pc}

08009580 <MSC_BOT_CBW_Decode>:
{
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8009584:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009588:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800958c:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009590:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009594:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009598:	2101      	movs	r1, #1
 800959a:	f004 f90f 	bl	800d7bc <USBD_LL_GetRxDataSize>
 800959e:	281f      	cmp	r0, #31
 80095a0:	d104      	bne.n	80095ac <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80095a2:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80095a6:	4b1f      	ldr	r3, [pc, #124]	; (8009624 <MSC_BOT_CBW_Decode+0xa4>)
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d00c      	beq.n	80095c6 <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 80095ac:	2320      	movs	r3, #32
 80095ae:	2205      	movs	r2, #5
 80095b0:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 f8ea 	bl	800978e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80095ba:	2302      	movs	r3, #2
 80095bc:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 80095be:	4628      	mov	r0, r5
 80095c0:	f7ff ff3c 	bl	800943c <MSC_BOT_Abort>
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 80095c6:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80095ca:	2901      	cmp	r1, #1
 80095cc:	d8ee      	bhi.n	80095ac <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 80095ce:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ea      	beq.n	80095ac <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d8e8      	bhi.n	80095ac <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 80095da:	f204 221b 	addw	r2, r4, #539	; 0x21b
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 fb35 	bl	8009c4e <SCSI_ProcessCmd>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	db0b      	blt.n	8009600 <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80095e8:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d905      	bls.n	80095fe <MSC_BOT_CBW_Decode+0x7e>
      if (hmsc->bot_data_length > 0)
 80095f2:	8962      	ldrh	r2, [r4, #10]
 80095f4:	b982      	cbnz	r2, 8009618 <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 80095f6:	2100      	movs	r1, #0
 80095f8:	4628      	mov	r0, r5
 80095fa:	f7ff ff89 	bl	8009510 <MSC_BOT_SendCSW>
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8009600:	7a23      	ldrb	r3, [r4, #8]
 8009602:	2b05      	cmp	r3, #5
 8009604:	d003      	beq.n	800960e <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 8009606:	4628      	mov	r0, r5
 8009608:	f7ff ff18 	bl	800943c <MSC_BOT_Abort>
 800960c:	bd38      	pop	{r3, r4, r5, pc}
       MSC_BOT_SendCSW (pdev,
 800960e:	2101      	movs	r1, #1
 8009610:	4628      	mov	r0, r5
 8009612:	f7ff ff7d 	bl	8009510 <MSC_BOT_SendCSW>
 8009616:	bd38      	pop	{r3, r4, r5, pc}
        MSC_BOT_SendData(pdev,
 8009618:	f104 010c 	add.w	r1, r4, #12
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff ff2d 	bl	800947c <MSC_BOT_SendData>
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	43425355 	.word	0x43425355

08009628 <MSC_BOT_DataOut>:
{
 8009628:	b510      	push	{r4, lr}
 800962a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800962c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8009630:	7a1a      	ldrb	r2, [r3, #8]
 8009632:	b112      	cbz	r2, 800963a <MSC_BOT_DataOut+0x12>
 8009634:	2a01      	cmp	r2, #1
 8009636:	d003      	beq.n	8009640 <MSC_BOT_DataOut+0x18>
 8009638:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 800963a:	f7ff ffa1 	bl	8009580 <MSC_BOT_CBW_Decode>
    break;
 800963e:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8009640:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8009644:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8009648:	f000 fb01 	bl	8009c4e <SCSI_ProcessCmd>
 800964c:	2800      	cmp	r0, #0
 800964e:	db00      	blt.n	8009652 <MSC_BOT_DataOut+0x2a>
 8009650:	bd10      	pop	{r4, pc}
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8009652:	2101      	movs	r1, #1
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff ff5b 	bl	8009510 <MSC_BOT_SendCSW>
}
 800965a:	e7f9      	b.n	8009650 <MSC_BOT_DataOut+0x28>

0800965c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800965c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800965e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8009662:	7a63      	ldrb	r3, [r4, #9]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d003      	beq.n	8009670 <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009668:	f011 0f80 	tst.w	r1, #128	; 0x80
 800966c:	d106      	bne.n	800967c <MSC_BOT_CplClrFeature+0x20>
 800966e:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009670:	2181      	movs	r1, #129	; 0x81
 8009672:	f004 f846 	bl	800d702 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8009676:	2300      	movs	r3, #0
 8009678:	7263      	strb	r3, [r4, #9]
 800967a:	bd10      	pop	{r4, pc}
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800967c:	2b01      	cmp	r3, #1
 800967e:	d0f6      	beq.n	800966e <MSC_BOT_CplClrFeature+0x12>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8009680:	2101      	movs	r1, #1
 8009682:	f7ff ff45 	bl	8009510 <MSC_BOT_SendCSW>
  }
  
}
 8009686:	e7f2      	b.n	800966e <MSC_BOT_CplClrFeature+0x12>

08009688 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8009688:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800968a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 800968e:	7853      	ldrb	r3, [r2, #1]
 8009690:	f013 0f01 	tst.w	r3, #1
 8009694:	d10d      	bne.n	80096b2 <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009696:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800969a:	69d8      	ldr	r0, [r3, #28]
 800969c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80096a0:	008b      	lsls	r3, r1, #2
 80096a2:	4418      	add	r0, r3
    len = pPage[4] + 5;
 80096a4:	7901      	ldrb	r1, [r0, #4]
 80096a6:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 80096a8:	7913      	ldrb	r3, [r2, #4]
 80096aa:	4299      	cmp	r1, r3
 80096ac:	d203      	bcs.n	80096b6 <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 80096ae:	460b      	mov	r3, r1
 80096b0:	e001      	b.n	80096b6 <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 80096b2:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80096b4:	4806      	ldr	r0, [pc, #24]	; (80096d0 <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 80096b6:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 80096b8:	e004      	b.n	80096c4 <SCSI_Inquiry+0x3c>
  {
    len--;
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80096be:	5cc1      	ldrb	r1, [r0, r3]
 80096c0:	18e2      	adds	r2, r4, r3
 80096c2:	7311      	strb	r1, [r2, #12]
  while (len) 
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f8      	bne.n	80096ba <SCSI_Inquiry+0x32>
  }
  return 0;
}
 80096c8:	2000      	movs	r0, #0
 80096ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	0802649c 	.word	0x0802649c

080096d4 <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80096d4:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 80096d8:	2308      	movs	r3, #8
 80096da:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 80096dc:	e005      	b.n	80096ea <SCSI_ModeSense6+0x16>
  {
    len--;
 80096de:	3b01      	subs	r3, #1
 80096e0:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80096e2:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <SCSI_ModeSense6+0x20>)
 80096e4:	5cd1      	ldrb	r1, [r2, r3]
 80096e6:	18c2      	adds	r2, r0, r3
 80096e8:	7311      	strb	r1, [r2, #12]
  while (len) 
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f7      	bne.n	80096de <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 80096ee:	2000      	movs	r0, #0
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	08026494 	.word	0x08026494

080096f8 <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80096f8:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 80096fc:	2308      	movs	r3, #8
 80096fe:	8143      	strh	r3, [r0, #10]

  while (len) 
 8009700:	e005      	b.n	800970e <SCSI_ModeSense10+0x16>
  {
    len--;
 8009702:	3b01      	subs	r3, #1
 8009704:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8009706:	4a04      	ldr	r2, [pc, #16]	; (8009718 <SCSI_ModeSense10+0x20>)
 8009708:	5cd1      	ldrb	r1, [r2, r3]
 800970a:	18c2      	adds	r2, r0, r3
 800970c:	7311      	strb	r1, [r2, #12]
  while (len) 
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f7      	bne.n	8009702 <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 8009712:	2000      	movs	r0, #0
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	0802648c 	.word	0x0802648c

0800971c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800971c:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800971e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8009722:	2300      	movs	r3, #0
 8009724:	e004      	b.n	8009730 <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 8009726:	18e1      	adds	r1, r4, r3
 8009728:	2000      	movs	r0, #0
 800972a:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800972c:	3301      	adds	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b11      	cmp	r3, #17
 8009732:	d9f8      	bls.n	8009726 <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8009734:	2370      	movs	r3, #112	; 0x70
 8009736:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8009738:	230c      	movs	r3, #12
 800973a:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800973c:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 8009740:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8009744:	428b      	cmp	r3, r1
 8009746:	d00f      	beq.n	8009768 <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8009748:	f103 0147 	add.w	r1, r3, #71	; 0x47
 800974c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009750:	7908      	ldrb	r0, [r1, #4]
 8009752:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8009754:	7a48      	ldrb	r0, [r1, #9]
 8009756:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8009758:	7a09      	ldrb	r1, [r1, #8]
 800975a:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 800975c:	3301      	adds	r3, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009764:	2b04      	cmp	r3, #4
 8009766:	d009      	beq.n	800977c <SCSI_RequestSense+0x60>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8009768:	2312      	movs	r3, #18
 800976a:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800976c:	7913      	ldrb	r3, [r2, #4]
 800976e:	2b12      	cmp	r3, #18
 8009770:	d800      	bhi.n	8009774 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 8009772:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 8009774:	2000      	movs	r0, #0
 8009776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800977a:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 8009782:	e7f1      	b.n	8009768 <SCSI_RequestSense+0x4c>

08009784 <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 8009784:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 8009788:	2000      	movs	r0, #0
 800978a:	8158      	strh	r0, [r3, #10]
  return 0;
}
 800978c:	4770      	bx	lr

0800978e <SCSI_SenseCode>:
{
 800978e:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009790:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8009794:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8009798:	f101 0047 	add.w	r0, r1, #71	; 0x47
 800979c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80097a0:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 80097a6:	3101      	adds	r1, #1
 80097a8:	b2c9      	uxtb	r1, r1
 80097aa:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80097ae:	2904      	cmp	r1, #4
 80097b0:	d002      	beq.n	80097b8 <SCSI_SenseCode+0x2a>
}
 80097b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b6:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 80097be:	e7f8      	b.n	80097b2 <SCSI_SenseCode+0x24>

080097c0 <SCSI_TestUnitReady>:
{
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80097c4:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80097c8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80097cc:	b95b      	cbnz	r3, 80097e6 <SCSI_TestUnitReady+0x26>
 80097ce:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80097d0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4608      	mov	r0, r1
 80097d8:	4798      	blx	r3
 80097da:	4603      	mov	r3, r0
 80097dc:	b960      	cbnz	r0, 80097f8 <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 80097de:	2200      	movs	r2, #0
 80097e0:	816a      	strh	r2, [r5, #10]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 80097e6:	2320      	movs	r3, #32
 80097e8:	2205      	movs	r2, #5
 80097ea:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 80097ee:	f7ff ffce 	bl	800978e <SCSI_SenseCode>
    return -1;
 80097f2:	f04f 33ff 	mov.w	r3, #4294967295
 80097f6:	e7f4      	b.n	80097e2 <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 80097f8:	233a      	movs	r3, #58	; 0x3a
 80097fa:	2202      	movs	r2, #2
 80097fc:	4631      	mov	r1, r6
 80097fe:	4620      	mov	r0, r4
 8009800:	f7ff ffc5 	bl	800978e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009804:	2305      	movs	r3, #5
 8009806:	722b      	strb	r3, [r5, #8]
    return -1;
 8009808:	f04f 33ff 	mov.w	r3, #4294967295
 800980c:	e7e9      	b.n	80097e2 <SCSI_TestUnitReady+0x22>

0800980e <SCSI_ReadFormatCapacity>:
{
 800980e:	b570      	push	{r4, r5, r6, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	4605      	mov	r5, r0
 8009814:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009816:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 800981a:	2300      	movs	r3, #0
 800981c:	e004      	b.n	8009828 <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 800981e:	18e2      	adds	r2, r4, r3
 8009820:	2100      	movs	r1, #0
 8009822:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 8009824:	3301      	adds	r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b0b      	cmp	r3, #11
 800982a:	d9f8      	bls.n	800981e <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 800982c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f10d 0206 	add.w	r2, sp, #6
 8009836:	4669      	mov	r1, sp
 8009838:	4630      	mov	r0, r6
 800983a:	4798      	blx	r3
 800983c:	4601      	mov	r1, r0
 800983e:	b9d8      	cbnz	r0, 8009878 <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 8009840:	2308      	movs	r3, #8
 8009842:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8009844:	9a00      	ldr	r2, [sp, #0]
 8009846:	1e53      	subs	r3, r2, #1
 8009848:	0e18      	lsrs	r0, r3, #24
 800984a:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 800984c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009850:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8009852:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009856:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8009858:	3a01      	subs	r2, #1
 800985a:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 800985c:	2302      	movs	r3, #2
 800985e:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009860:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009864:	2200      	movs	r2, #0
 8009866:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009868:	0a1a      	lsrs	r2, r3, #8
 800986a:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800986c:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 800986e:	230c      	movs	r3, #12
 8009870:	8163      	strh	r3, [r4, #10]
}
 8009872:	4608      	mov	r0, r1
 8009874:	b002      	add	sp, #8
 8009876:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8009878:	233a      	movs	r3, #58	; 0x3a
 800987a:	2202      	movs	r2, #2
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	f7ff ff85 	bl	800978e <SCSI_SenseCode>
    return -1;
 8009884:	f04f 31ff 	mov.w	r1, #4294967295
 8009888:	e7f3      	b.n	8009872 <SCSI_ReadFormatCapacity+0x64>

0800988a <SCSI_ReadCapacity10>:
{
 800988a:	b570      	push	{r4, r5, r6, lr}
 800988c:	4605      	mov	r5, r0
 800988e:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009890:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8009894:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f204 225e 	addw	r2, r4, #606	; 0x25e
 800989e:	f504 7118 	add.w	r1, r4, #608	; 0x260
 80098a2:	4630      	mov	r0, r6
 80098a4:	4798      	blx	r3
 80098a6:	b9c8      	cbnz	r0, 80098dc <SCSI_ReadCapacity10+0x52>
 80098a8:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 80098aa:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 80098ae:	1e53      	subs	r3, r2, #1
 80098b0:	0e18      	lsrs	r0, r3, #24
 80098b2:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 80098b4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80098b8:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 80098ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80098be:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 80098c0:	3a01      	subs	r2, #1
 80098c2:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80098c4:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 80098c8:	2200      	movs	r2, #0
 80098ca:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80098cc:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80098ce:	0a1a      	lsrs	r2, r3, #8
 80098d0:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80098d2:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 80098d4:	2308      	movs	r3, #8
 80098d6:	8163      	strh	r3, [r4, #10]
}
 80098d8:	4608      	mov	r0, r1
 80098da:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 80098dc:	233a      	movs	r3, #58	; 0x3a
 80098de:	2202      	movs	r2, #2
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7ff ff53 	bl	800978e <SCSI_SenseCode>
    return -1;
 80098e8:	f04f 31ff 	mov.w	r1, #4294967295
 80098ec:	e7f4      	b.n	80098d8 <SCSI_ReadCapacity10+0x4e>

080098ee <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 80098ee:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80098f0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80098f4:	4413      	add	r3, r2
 80098f6:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	d801      	bhi.n	8009902 <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 80098fe:	2000      	movs	r0, #0
}
 8009900:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 8009902:	2321      	movs	r3, #33	; 0x21
 8009904:	2205      	movs	r2, #5
 8009906:	f7ff ff42 	bl	800978e <SCSI_SenseCode>
    return -1;
 800990a:	f04f 30ff 	mov.w	r0, #4294967295
 800990e:	bd10      	pop	{r4, pc}

08009910 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4606      	mov	r6, r0
 8009916:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8009918:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800991c:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8009920:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009924:	bf28      	it	cs
 8009926:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800992a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800992e:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 8009932:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8009936:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800993a:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 800993e:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8009942:	b29b      	uxth	r3, r3
 8009944:	fbb1 f2f2 	udiv	r2, r1, r2
 8009948:	4639      	mov	r1, r7
 800994a:	4640      	mov	r0, r8
 800994c:	47c8      	blx	r9
 800994e:	2800      	cmp	r0, #0
 8009950:	db1a      	blt.n	8009988 <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 8009952:	b2ab      	uxth	r3, r5
 8009954:	463a      	mov	r2, r7
 8009956:	2181      	movs	r1, #129	; 0x81
 8009958:	4630      	mov	r0, r6
 800995a:	f003 ff13 	bl	800d784 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 800995e:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8009962:	442b      	add	r3, r5
 8009964:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8009968:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 800996c:	1b5b      	subs	r3, r3, r5
 800996e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009972:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8009976:	1b55      	subs	r5, r2, r5
 8009978:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 800997c:	b973      	cbnz	r3, 800999c <SCSI_ProcessRead+0x8c>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800997e:	2303      	movs	r3, #3
 8009980:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 8009982:	2000      	movs	r0, #0
 8009984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8009988:	2311      	movs	r3, #17
 800998a:	2204      	movs	r2, #4
 800998c:	4641      	mov	r1, r8
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff fefd 	bl	800978e <SCSI_SenseCode>
    return -1; 
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return 0;
 800999c:	2000      	movs	r0, #0
}
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099a2 <SCSI_Read10>:
{
 80099a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80099a8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80099ac:	7a23      	ldrb	r3, [r4, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d137      	bne.n	8009a22 <SCSI_Read10+0x80>
 80099b2:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80099b4:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	da3a      	bge.n	8009a32 <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80099bc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	4608      	mov	r0, r1
 80099c4:	4798      	blx	r3
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d13c      	bne.n	8009a44 <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80099ca:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 80099cc:	78ea      	ldrb	r2, [r5, #3]
 80099ce:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80099d0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 80099d4:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 80099d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 80099da:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 80099dc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80099de:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80099e2:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 80099e4:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80099e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80099ea:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80099ee:	4639      	mov	r1, r7
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ff7c 	bl	80098ee <SCSI_CheckAddressRange>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	db37      	blt.n	8009a6a <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80099fa:	2302      	movs	r3, #2
 80099fc:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80099fe:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8009a02:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8009a06:	fb01 f202 	mul.w	r2, r1, r2
 8009a0a:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009a0e:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8009a12:	fb03 f301 	mul.w	r3, r3, r1
 8009a16:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009a1a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d119      	bne.n	8009a56 <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8009a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a26:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff ff70 	bl	8009910 <SCSI_ProcessRead>
 8009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8009a32:	2320      	movs	r3, #32
 8009a34:	2205      	movs	r2, #5
 8009a36:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8009a3a:	f7ff fea8 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8009a44:	233a      	movs	r3, #58	; 0x3a
 8009a46:	2202      	movs	r2, #2
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff fe9f 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8009a56:	2320      	movs	r3, #32
 8009a58:	2205      	movs	r2, #5
 8009a5a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f7ff fe95 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return -1; /* error */
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a70 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8009a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a74:	4606      	mov	r6, r0
 8009a76:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8009a78:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009a7c:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8009a80:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009a84:	bf28      	it	cs
 8009a86:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8009a8a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009a8e:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 8009a92:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8009a96:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8009a9a:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8009a9e:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	fbb1 f2f2 	udiv	r2, r1, r2
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	4640      	mov	r0, r8
 8009aac:	47c8      	blx	r9
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	db1d      	blt.n	8009aee <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8009ab2:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8009ab6:	442b      	add	r3, r5
 8009ab8:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8009abc:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8009ac0:	1b5b      	subs	r3, r3, r5
 8009ac2:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009ac6:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8009aca:	1b55      	subs	r5, r2, r5
 8009acc:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8009ad0:	b1bb      	cbz	r3, 8009b02 <SCSI_ProcessWrite+0x92>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8009ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad6:	bf28      	it	cs
 8009ad8:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	463a      	mov	r2, r7
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f003 fe5c 	bl	800d7a0 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 8009ae8:	2000      	movs	r0, #0
}
 8009aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8009aee:	2303      	movs	r3, #3
 8009af0:	2204      	movs	r2, #4
 8009af2:	4641      	mov	r1, r8
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff fe4a 	bl	800978e <SCSI_SenseCode>
    return -1; 
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8009b02:	2100      	movs	r1, #0
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fd03 	bl	8009510 <MSC_BOT_SendCSW>
  return 0;
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009b10 <SCSI_Write10>:
{
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	4605      	mov	r5, r0
 8009b16:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8009b18:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009b1c:	7a23      	ldrb	r3, [r4, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d172      	bne.n	8009c08 <SCSI_Write10+0xf8>
 8009b22:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8009b24:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	db48      	blt.n	8009bbe <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8009b2c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	4608      	mov	r0, r1
 8009b34:	4798      	blx	r3
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d14a      	bne.n	8009bd0 <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8009b3a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	4638      	mov	r0, r7
 8009b42:	4798      	blx	r3
 8009b44:	4680      	mov	r8, r0
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d14b      	bne.n	8009be2 <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009b4a:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 8009b4c:	78f2      	ldrb	r2, [r6, #3]
 8009b4e:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009b50:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8009b54:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 8009b56:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8009b5a:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 8009b5c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009b5e:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009b62:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 8009b64:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009b66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b6a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 8009b6e:	4639      	mov	r1, r7
 8009b70:	4628      	mov	r0, r5
 8009b72:	f7ff febc 	bl	80098ee <SCSI_CheckAddressRange>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	db4a      	blt.n	8009c10 <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009b7a:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8009b7e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8009b82:	fb01 f202 	mul.w	r2, r1, r2
 8009b86:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009b8a:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8009b8e:	fb03 f301 	mul.w	r3, r3, r1
 8009b92:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009b96:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d12a      	bne.n	8009bf4 <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8009ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ba6:	bf28      	it	cs
 8009ba8:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f104 020c 	add.w	r2, r4, #12
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f003 fdf4 	bl	800d7a0 <USBD_LL_PrepareReceive>
}
 8009bb8:	4640      	mov	r0, r8
 8009bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	2205      	movs	r2, #5
 8009bc2:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8009bc6:	f7ff fde2 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009bca:	f04f 38ff 	mov.w	r8, #4294967295
 8009bce:	e7f3      	b.n	8009bb8 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8009bd0:	233a      	movs	r3, #58	; 0x3a
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f7ff fdd9 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009bdc:	f04f 38ff 	mov.w	r8, #4294967295
 8009be0:	e7ea      	b.n	8009bb8 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8009be2:	2327      	movs	r3, #39	; 0x27
 8009be4:	2202      	movs	r2, #2
 8009be6:	4639      	mov	r1, r7
 8009be8:	4628      	mov	r0, r5
 8009bea:	f7ff fdd0 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009bee:	f04f 38ff 	mov.w	r8, #4294967295
 8009bf2:	e7e1      	b.n	8009bb8 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	2205      	movs	r2, #5
 8009bf8:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7ff fdc6 	bl	800978e <SCSI_SenseCode>
      return -1;
 8009c02:	f04f 38ff 	mov.w	r8, #4294967295
 8009c06:	e7d7      	b.n	8009bb8 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 8009c08:	f7ff ff32 	bl	8009a70 <SCSI_ProcessWrite>
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	e7d3      	b.n	8009bb8 <SCSI_Write10+0xa8>
      return -1; /* error */      
 8009c10:	f04f 38ff 	mov.w	r8, #4294967295
 8009c14:	e7d0      	b.n	8009bb8 <SCSI_Write10+0xa8>

08009c16 <SCSI_Verify10>:
{
 8009c16:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8009c18:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8009c1c:	7853      	ldrb	r3, [r2, #1]
 8009c1e:	f013 0f02 	tst.w	r3, #2
 8009c22:	d10a      	bne.n	8009c3a <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 8009c24:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8009c28:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8009c2c:	f7ff fe5f 	bl	80098ee <SCSI_CheckAddressRange>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	db09      	blt.n	8009c48 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 8009c34:	2000      	movs	r0, #0
 8009c36:	8160      	strh	r0, [r4, #10]
  return 0;
 8009c38:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 8009c3a:	2324      	movs	r3, #36	; 0x24
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	f7ff fda6 	bl	800978e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	bd10      	pop	{r4, pc}
    return -1; /* error */      
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009c4c:	bd10      	pop	{r4, pc}

08009c4e <SCSI_ProcessCmd>:
{
 8009c4e:	b508      	push	{r3, lr}
  switch (params[0])
 8009c50:	7813      	ldrb	r3, [r2, #0]
 8009c52:	2b5a      	cmp	r3, #90	; 0x5a
 8009c54:	d853      	bhi.n	8009cfe <SCSI_ProcessCmd+0xb0>
 8009c56:	e8df f003 	tbb	[pc, r3]
 8009c5a:	522e      	.short	0x522e
 8009c5c:	52523152 	.word	0x52523152
 8009c60:	52525252 	.word	0x52525252
 8009c64:	52525252 	.word	0x52525252
 8009c68:	52525252 	.word	0x52525252
 8009c6c:	52525234 	.word	0x52525234
 8009c70:	52525252 	.word	0x52525252
 8009c74:	5252373d 	.word	0x5252373d
 8009c78:	5252523a 	.word	0x5252523a
 8009c7c:	46524352 	.word	0x46524352
 8009c80:	52495252 	.word	0x52495252
 8009c84:	5252524c 	.word	0x5252524c
 8009c88:	52524f52 	.word	0x52524f52
 8009c8c:	52525252 	.word	0x52525252
 8009c90:	52525252 	.word	0x52525252
 8009c94:	52525252 	.word	0x52525252
 8009c98:	52525252 	.word	0x52525252
 8009c9c:	52525252 	.word	0x52525252
 8009ca0:	52525252 	.word	0x52525252
 8009ca4:	52525252 	.word	0x52525252
 8009ca8:	52525252 	.word	0x52525252
 8009cac:	52525252 	.word	0x52525252
 8009cb0:	52525252 	.word	0x52525252
 8009cb4:	40          	.byte	0x40
 8009cb5:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 8009cb6:	f7ff fd83 	bl	80097c0 <SCSI_TestUnitReady>
 8009cba:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 8009cbc:	f7ff fd2e 	bl	800971c <SCSI_RequestSense>
 8009cc0:	bd08      	pop	{r3, pc}
    return SCSI_Inquiry(pdev, lun, params);
 8009cc2:	f7ff fce1 	bl	8009688 <SCSI_Inquiry>
 8009cc6:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 8009cc8:	f7ff fd5c 	bl	8009784 <SCSI_StartStopUnit>
 8009ccc:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 8009cce:	f7ff fd59 	bl	8009784 <SCSI_StartStopUnit>
 8009cd2:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense6 (pdev, lun, params);
 8009cd4:	f7ff fcfe 	bl	80096d4 <SCSI_ModeSense6>
 8009cd8:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense10 (pdev, lun, params);
 8009cda:	f7ff fd0d 	bl	80096f8 <SCSI_ModeSense10>
 8009cde:	bd08      	pop	{r3, pc}
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 8009ce0:	f7ff fd95 	bl	800980e <SCSI_ReadFormatCapacity>
 8009ce4:	bd08      	pop	{r3, pc}
    return SCSI_ReadCapacity10(pdev, lun, params);
 8009ce6:	f7ff fdd0 	bl	800988a <SCSI_ReadCapacity10>
 8009cea:	bd08      	pop	{r3, pc}
    return SCSI_Read10(pdev, lun, params); 
 8009cec:	f7ff fe59 	bl	80099a2 <SCSI_Read10>
 8009cf0:	bd08      	pop	{r3, pc}
    return SCSI_Write10(pdev, lun, params);
 8009cf2:	f7ff ff0d 	bl	8009b10 <SCSI_Write10>
 8009cf6:	bd08      	pop	{r3, pc}
    return SCSI_Verify10(pdev, lun, params);
 8009cf8:	f7ff ff8d 	bl	8009c16 <SCSI_Verify10>
 8009cfc:	bd08      	pop	{r3, pc}
    SCSI_SenseCode(pdev, 
 8009cfe:	2320      	movs	r3, #32
 8009d00:	2205      	movs	r2, #5
 8009d02:	f7ff fd44 	bl	800978e <SCSI_SenseCode>
    return -1;
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009d0a:	bd08      	pop	{r3, pc}

08009d0c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009d0c:	b198      	cbz	r0, 8009d36 <USBD_Init+0x2a>
{
 8009d0e:	b508      	push	{r3, lr}
 8009d10:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009d12:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8009d16:	b110      	cbz	r0, 8009d1e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8009d18:	2000      	movs	r0, #0
 8009d1a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009d1e:	b109      	cbz	r1, 8009d24 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8009d20:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8009d24:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8009d2c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d2e:	f003 fc73 	bl	800d618 <USBD_LL_Init>
  
  return USBD_OK; 
 8009d32:	2000      	movs	r0, #0
 8009d34:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8009d36:	2002      	movs	r0, #2
 8009d38:	4770      	bx	lr

08009d3a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8009d3a:	b119      	cbz	r1, 8009d44 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d3c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8009d40:	2000      	movs	r0, #0
 8009d42:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8009d44:	2002      	movs	r0, #2
  }
  
  return status;
}
 8009d46:	4770      	bx	lr

08009d48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009d48:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8009d4a:	f003 fc9f 	bl	800d68c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8009d4e:	2000      	movs	r0, #0
 8009d50:	bd08      	pop	{r3, pc}

08009d52 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d52:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8009d54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009d58:	b123      	cbz	r3, 8009d64 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4798      	blx	r3
 8009d5e:	b118      	cbz	r0, 8009d68 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009d60:	2002      	movs	r0, #2
 8009d62:	bd08      	pop	{r3, pc}
 8009d64:	2002      	movs	r0, #2
 8009d66:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 8009d68:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8009d6a:	bd08      	pop	{r3, pc}

08009d6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d6c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8009d6e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4798      	blx	r3
  return USBD_OK;
}
 8009d76:	2000      	movs	r0, #0
 8009d78:	bd08      	pop	{r3, pc}

08009d7a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d7a:	b538      	push	{r3, r4, r5, lr}
 8009d7c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d7e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f91e 	bl	8009fc4 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8009d8e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8009d92:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8009d96:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8009d9a:	f001 031f 	and.w	r3, r1, #31
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d00e      	beq.n	8009dc0 <USBD_LL_SetupStage+0x46>
 8009da2:	b13b      	cbz	r3, 8009db4 <USBD_LL_SetupStage+0x3a>
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d010      	beq.n	8009dca <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8009da8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009dac:	4620      	mov	r0, r4
 8009dae:	f003 fca8 	bl	800d702 <USBD_LL_StallEP>
    break;
 8009db2:	e003      	b.n	8009dbc <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8009db4:	4629      	mov	r1, r5
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fa8a 	bl	800a2d0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 faa8 	bl	800a318 <USBD_StdItfReq>
    break;
 8009dc8:	e7f8      	b.n	8009dbc <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fabf 	bl	800a350 <USBD_StdEPReq>
    break;
 8009dd2:	e7f3      	b.n	8009dbc <USBD_LL_SetupStage+0x42>

08009dd4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8009dd8:	bb19      	cbnz	r1, 8009e22 <USBD_LL_DataOutStage+0x4e>
 8009dda:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ddc:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8009de0:	2a03      	cmp	r2, #3
 8009de2:	d127      	bne.n	8009e34 <USBD_LL_DataOutStage+0x60>
    {
      if(pep->rem_length > pep->maxpacket)
 8009de4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8009de8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8009dec:	4291      	cmp	r1, r2
 8009dee:	d80b      	bhi.n	8009e08 <USBD_LL_DataOutStage+0x34>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009df0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	b11b      	cbz	r3, 8009e00 <USBD_LL_DataOutStage+0x2c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009df8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009dfc:	2a03      	cmp	r2, #3
 8009dfe:	d00e      	beq.n	8009e1e <USBD_LL_DataOutStage+0x4a>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 fb6d 	bl	800a4e0 <USBD_CtlSendStatus>
 8009e06:	e015      	b.n	8009e34 <USBD_LL_DataOutStage+0x60>
        pep->rem_length -=  pep->maxpacket;
 8009e08:	1a89      	subs	r1, r1, r2
 8009e0a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8009e0e:	428a      	cmp	r2, r1
 8009e10:	bf28      	it	cs
 8009e12:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8009e14:	b292      	uxth	r2, r2
 8009e16:	4619      	mov	r1, r3
 8009e18:	f000 fb5a 	bl	800a4d0 <USBD_CtlContinueRx>
 8009e1c:	e00a      	b.n	8009e34 <USBD_LL_DataOutStage+0x60>
          pdev->pClass->EP0_RxReady(pdev); 
 8009e1e:	4798      	blx	r3
 8009e20:	e7ee      	b.n	8009e00 <USBD_LL_DataOutStage+0x2c>
 8009e22:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8009e24:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	b11b      	cbz	r3, 8009e34 <USBD_LL_DataOutStage+0x60>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e2c:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8009e30:	2903      	cmp	r1, #3
 8009e32:	d001      	beq.n	8009e38 <USBD_LL_DataOutStage+0x64>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009e34:	2000      	movs	r0, #0
 8009e36:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	e7fa      	b.n	8009e34 <USBD_LL_DataOutStage+0x60>

08009e3e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8009e42:	2900      	cmp	r1, #0
 8009e44:	d147      	bne.n	8009ed6 <USBD_LL_DataInStage+0x98>
 8009e46:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e48:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8009e4c:	2a02      	cmp	r2, #2
 8009e4e:	d005      	beq.n	8009e5c <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8009e50:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d03a      	beq.n	8009ece <USBD_LL_DataInStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009e58:	2000      	movs	r0, #0
 8009e5a:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8009e5c:	69c1      	ldr	r1, [r0, #28]
 8009e5e:	6a02      	ldr	r2, [r0, #32]
 8009e60:	4291      	cmp	r1, r2
 8009e62:	d817      	bhi.n	8009e94 <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 8009e64:	6981      	ldr	r1, [r0, #24]
 8009e66:	fbb1 f3f2 	udiv	r3, r1, r2
 8009e6a:	fb02 1313 	mls	r3, r2, r3, r1
 8009e6e:	b92b      	cbnz	r3, 8009e7c <USBD_LL_DataInStage+0x3e>
 8009e70:	428a      	cmp	r2, r1
 8009e72:	d803      	bhi.n	8009e7c <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 8009e74:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8009e78:	4299      	cmp	r1, r3
 8009e7a:	d318      	bcc.n	8009eae <USBD_LL_DataInStage+0x70>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009e7c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	b11b      	cbz	r3, 8009e8c <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e84:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009e88:	2a03      	cmp	r2, #3
 8009e8a:	d01d      	beq.n	8009ec8 <USBD_LL_DataInStage+0x8a>
          USBD_CtlReceiveStatus(pdev);
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fb32 	bl	800a4f6 <USBD_CtlReceiveStatus>
 8009e92:	e7dd      	b.n	8009e50 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8009e94:	1a8a      	subs	r2, r1, r2
 8009e96:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8009e98:	b292      	uxth	r2, r2
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	f000 fb10 	bl	800a4c0 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f003 fc7a 	bl	800d7a0 <USBD_LL_PrepareReceive>
 8009eac:	e7d0      	b.n	8009e50 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	f000 fb05 	bl	800a4c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	460a      	mov	r2, r1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f003 fc6d 	bl	800d7a0 <USBD_LL_PrepareReceive>
 8009ec6:	e7c3      	b.n	8009e50 <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4798      	blx	r3
 8009ecc:	e7de      	b.n	8009e8c <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8009ed4:	e7c0      	b.n	8009e58 <USBD_LL_DataInStage+0x1a>
 8009ed6:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8009ed8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ba      	beq.n	8009e58 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ee2:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8009ee6:	2903      	cmp	r1, #3
 8009ee8:	d1b6      	bne.n	8009e58 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8009eea:	4611      	mov	r1, r2
 8009eec:	4798      	blx	r3
 8009eee:	e7b3      	b.n	8009e58 <USBD_LL_DataInStage+0x1a>

08009ef0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4611      	mov	r1, r2
 8009efa:	f003 fbd5 	bl	800d6a8 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009efe:	2540      	movs	r5, #64	; 0x40
 8009f00:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8009f04:	462b      	mov	r3, r5
 8009f06:	2200      	movs	r2, #0
 8009f08:	2180      	movs	r1, #128	; 0x80
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f003 fbcc 	bl	800d6a8 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f10:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f12:	2301      	movs	r3, #1
 8009f14:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8009f18:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009f1c:	b12b      	cbz	r3, 8009f2a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009f1e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	7921      	ldrb	r1, [r4, #4]
 8009f26:	4620      	mov	r0, r4
 8009f28:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}

08009f2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009f2e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8009f30:	2000      	movs	r0, #0
 8009f32:	4770      	bx	lr

08009f34 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8009f34:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009f38:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009f42:	2000      	movs	r0, #0
 8009f44:	4770      	bx	lr

08009f46 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8009f46:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8009f4a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009f4e:	2000      	movs	r0, #0
 8009f50:	4770      	bx	lr

08009f52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009f52:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f54:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d001      	beq.n	8009f60 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8009f60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0f8      	beq.n	8009f5c <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8009f6a:	4798      	blx	r3
 8009f6c:	e7f6      	b.n	8009f5c <USBD_LL_SOF+0xa>

08009f6e <USBD_LL_IsoINIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8009f6e:	2000      	movs	r0, #0
 8009f70:	4770      	bx	lr

08009f72 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8009f72:	2000      	movs	r0, #0
 8009f74:	4770      	bx	lr

08009f76 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8009f76:	2000      	movs	r0, #0
 8009f78:	4770      	bx	lr

08009f7a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8009f7a:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009f82:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8009f86:	6852      	ldr	r2, [r2, #4]
 8009f88:	7901      	ldrb	r1, [r0, #4]
 8009f8a:	4790      	blx	r2
   
  return USBD_OK;
}
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	bd08      	pop	{r3, pc}

08009f90 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 8009f90:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8009f92:	e002      	b.n	8009f9a <USBD_GetLen+0xa>
    {
        len++;
 8009f94:	3301      	adds	r3, #1
 8009f96:	b2db      	uxtb	r3, r3
        buf++;
 8009f98:	3001      	adds	r0, #1
    while (*buf != '\0') 
 8009f9a:	7802      	ldrb	r2, [r0, #0]
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d1f9      	bne.n	8009f94 <USBD_GetLen+0x4>
    }

    return len;
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	4770      	bx	lr

08009fa4 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fa4:	884b      	ldrh	r3, [r1, #2]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d000      	beq.n	8009fac <USBD_SetFeature+0x8>
 8009faa:	4770      	bx	lr
{
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8009fb0:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8009fb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 fa8f 	bl	800a4e0 <USBD_CtlSendStatus>
 8009fc2:	bd10      	pop	{r4, pc}

08009fc4 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009fc4:	780b      	ldrb	r3, [r1, #0]
 8009fc6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009fc8:	784b      	ldrb	r3, [r1, #1]
 8009fca:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009fcc:	788b      	ldrb	r3, [r1, #2]
 8009fce:	78ca      	ldrb	r2, [r1, #3]
 8009fd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009fd4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009fd6:	790b      	ldrb	r3, [r1, #4]
 8009fd8:	794a      	ldrb	r2, [r1, #5]
 8009fda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009fde:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009fe0:	798b      	ldrb	r3, [r1, #6]
 8009fe2:	79ca      	ldrb	r2, [r1, #7]
 8009fe4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009fe8:	80c3      	strh	r3, [r0, #6]
 8009fea:	4770      	bx	lr

08009fec <USBD_CtlError>:
{
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8009ff0:	2180      	movs	r1, #128	; 0x80
 8009ff2:	f003 fb86 	bl	800d702 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f003 fb82 	bl	800d702 <USBD_LL_StallEP>
 8009ffe:	bd10      	pop	{r4, pc}

0800a000 <USBD_GetDescriptor>:
{
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	b083      	sub	sp, #12
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 800a008:	884a      	ldrh	r2, [r1, #2]
 800a00a:	0a13      	lsrs	r3, r2, #8
 800a00c:	3b01      	subs	r3, #1
 800a00e:	2b0e      	cmp	r3, #14
 800a010:	f200 808d 	bhi.w	800a12e <USBD_GetDescriptor+0x12e>
 800a014:	e8df f003 	tbb	[pc, r3]
 800a018:	8b331f17 	.word	0x8b331f17
 800a01c:	8b7c6f8b 	.word	0x8b7c6f8b
 800a020:	8b8b8b8b 	.word	0x8b8b8b8b
 800a024:	8b8b      	.short	0x8b8b
 800a026:	08          	.byte	0x08
 800a027:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a028:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f10d 0106 	add.w	r1, sp, #6
 800a032:	7c00      	ldrb	r0, [r0, #16]
 800a034:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800a036:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a03a:	b112      	cbz	r2, 800a042 <USBD_GetDescriptor+0x42>
 800a03c:	88eb      	ldrh	r3, [r5, #6]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d179      	bne.n	800a136 <USBD_GetDescriptor+0x136>
}
 800a042:	b003      	add	sp, #12
 800a044:	bd30      	pop	{r4, r5, pc}
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a046:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f10d 0106 	add.w	r1, sp, #6
 800a050:	7c00      	ldrb	r0, [r0, #16]
 800a052:	4798      	blx	r3
    break;
 800a054:	e7ef      	b.n	800a036 <USBD_GetDescriptor+0x36>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800a056:	7c03      	ldrb	r3, [r0, #16]
 800a058:	b943      	cbnz	r3, 800a06c <USBD_GetDescriptor+0x6c>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a05a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	f10d 0006 	add.w	r0, sp, #6
 800a064:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a066:	2302      	movs	r3, #2
 800a068:	7043      	strb	r3, [r0, #1]
 800a06a:	e7e4      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a06c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	f10d 0006 	add.w	r0, sp, #6
 800a076:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a078:	2302      	movs	r3, #2
 800a07a:	7043      	strb	r3, [r0, #1]
 800a07c:	e7db      	b.n	800a036 <USBD_GetDescriptor+0x36>
    switch ((uint8_t)(req->wValue))
 800a07e:	b2d2      	uxtb	r2, r2
 800a080:	2a05      	cmp	r2, #5
 800a082:	d834      	bhi.n	800a0ee <USBD_GetDescriptor+0xee>
 800a084:	e8df f002 	tbb	[pc, r2]
 800a088:	1b130b03 	.word	0x1b130b03
 800a08c:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800a08e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f10d 0106 	add.w	r1, sp, #6
 800a098:	7c00      	ldrb	r0, [r0, #16]
 800a09a:	4798      	blx	r3
      break;
 800a09c:	e7cb      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a09e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f10d 0106 	add.w	r1, sp, #6
 800a0a8:	7c00      	ldrb	r0, [r0, #16]
 800a0aa:	4798      	blx	r3
      break;
 800a0ac:	e7c3      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0ae:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f10d 0106 	add.w	r1, sp, #6
 800a0b8:	7c00      	ldrb	r0, [r0, #16]
 800a0ba:	4798      	blx	r3
      break;
 800a0bc:	e7bb      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0be:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	f10d 0106 	add.w	r1, sp, #6
 800a0c8:	7c00      	ldrb	r0, [r0, #16]
 800a0ca:	4798      	blx	r3
      break;
 800a0cc:	e7b3      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0ce:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	f10d 0106 	add.w	r1, sp, #6
 800a0d8:	7c00      	ldrb	r0, [r0, #16]
 800a0da:	4798      	blx	r3
      break;
 800a0dc:	e7ab      	b.n	800a036 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0de:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	f10d 0106 	add.w	r1, sp, #6
 800a0e8:	7c00      	ldrb	r0, [r0, #16]
 800a0ea:	4798      	blx	r3
      break;
 800a0ec:	e7a3      	b.n	800a036 <USBD_GetDescriptor+0x36>
       USBD_CtlError(pdev , req);
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7ff ff7c 	bl	8009fec <USBD_CtlError>
      return;
 800a0f4:	e7a5      	b.n	800a042 <USBD_GetDescriptor+0x42>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800a0f6:	7c03      	ldrb	r3, [r0, #16]
 800a0f8:	b933      	cbnz	r3, 800a108 <USBD_GetDescriptor+0x108>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a0fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a100:	f10d 0006 	add.w	r0, sp, #6
 800a104:	4798      	blx	r3
      break;
 800a106:	e796      	b.n	800a036 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 800a108:	4629      	mov	r1, r5
 800a10a:	f7ff ff6f 	bl	8009fec <USBD_CtlError>
      return;
 800a10e:	e798      	b.n	800a042 <USBD_GetDescriptor+0x42>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800a110:	7c03      	ldrb	r3, [r0, #16]
 800a112:	b943      	cbnz	r3, 800a126 <USBD_GetDescriptor+0x126>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a114:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11a:	f10d 0006 	add.w	r0, sp, #6
 800a11e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a120:	2307      	movs	r3, #7
 800a122:	7043      	strb	r3, [r0, #1]
      break; 
 800a124:	e787      	b.n	800a036 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 800a126:	4629      	mov	r1, r5
 800a128:	f7ff ff60 	bl	8009fec <USBD_CtlError>
      return;
 800a12c:	e789      	b.n	800a042 <USBD_GetDescriptor+0x42>
     USBD_CtlError(pdev , req);
 800a12e:	4629      	mov	r1, r5
 800a130:	f7ff ff5c 	bl	8009fec <USBD_CtlError>
    return;
 800a134:	e785      	b.n	800a042 <USBD_GetDescriptor+0x42>
    len = MIN(len , req->wLength);
 800a136:	429a      	cmp	r2, r3
 800a138:	bf28      	it	cs
 800a13a:	461a      	movcs	r2, r3
 800a13c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800a140:	4601      	mov	r1, r0
 800a142:	4620      	mov	r0, r4
 800a144:	f000 f9af 	bl	800a4a6 <USBD_CtlSendData>
 800a148:	e77b      	b.n	800a042 <USBD_GetDescriptor+0x42>

0800a14a <USBD_SetAddress>:
{
 800a14a:	b538      	push	{r3, r4, r5, lr}
 800a14c:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800a14e:	888b      	ldrh	r3, [r1, #4]
 800a150:	b9e3      	cbnz	r3, 800a18c <USBD_SetAddress+0x42>
 800a152:	88cb      	ldrh	r3, [r1, #6]
 800a154:	b9d3      	cbnz	r3, 800a18c <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800a156:	788d      	ldrb	r5, [r1, #2]
 800a158:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800a15c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a160:	2b03      	cmp	r3, #3
 800a162:	d00c      	beq.n	800a17e <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 800a164:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800a168:	4629      	mov	r1, r5
 800a16a:	f003 fafd 	bl	800d768 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 f9b6 	bl	800a4e0 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800a174:	b135      	cbz	r5, 800a184 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800a176:	2302      	movs	r3, #2
 800a178:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 800a17e:	f7ff ff35 	bl	8009fec <USBD_CtlError>
 800a182:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800a184:	2301      	movs	r3, #1
 800a186:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                        
 800a18c:	4620      	mov	r0, r4
 800a18e:	f7ff ff2d 	bl	8009fec <USBD_CtlError>
 800a192:	bd38      	pop	{r3, r4, r5, pc}

0800a194 <USBD_SetConfig>:
{
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 800a19a:	7889      	ldrb	r1, [r1, #2]
 800a19c:	4b25      	ldr	r3, [pc, #148]	; (800a234 <USBD_SetConfig+0xa0>)
 800a19e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800a1a0:	2901      	cmp	r1, #1
 800a1a2:	d809      	bhi.n	800a1b8 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 800a1a4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d009      	beq.n	800a1c0 <USBD_SetConfig+0x2c>
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d01c      	beq.n	800a1ea <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	f7ff ff1b 	bl	8009fec <USBD_CtlError>
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                              
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7ff ff17 	bl	8009fec <USBD_CtlError>
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 800a1c0:	b181      	cbz	r1, 800a1e4 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 800a1c2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800a1ca:	f7ff fdc2 	bl	8009d52 <USBD_SetClassConfig>
 800a1ce:	2802      	cmp	r0, #2
 800a1d0:	d003      	beq.n	800a1da <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f984 	bl	800a4e0 <USBD_CtlSendStatus>
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7ff ff05 	bl	8009fec <USBD_CtlError>
          return;
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 800a1e4:	f000 f97c 	bl	800a4e0 <USBD_CtlSendStatus>
 800a1e8:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0) 
 800a1ea:	b189      	cbz	r1, 800a210 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 800a1ec:	6843      	ldr	r3, [r0, #4]
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	d01d      	beq.n	800a22e <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800a1f2:	b2d9      	uxtb	r1, r3
 800a1f4:	f7ff fdba 	bl	8009d6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1f8:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <USBD_SetConfig+0xa0>)
 800a1fa:	7819      	ldrb	r1, [r3, #0]
 800a1fc:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff fda7 	bl	8009d52 <USBD_SetClassConfig>
 800a204:	2802      	cmp	r0, #2
 800a206:	d00d      	beq.n	800a224 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 f969 	bl	800a4e0 <USBD_CtlSendStatus>
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a210:	2302      	movs	r3, #2
 800a212:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800a216:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800a218:	f7ff fda8 	bl	8009d6c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 f95f 	bl	800a4e0 <USBD_CtlSendStatus>
 800a222:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 800a224:	4629      	mov	r1, r5
 800a226:	4620      	mov	r0, r4
 800a228:	f7ff fee0 	bl	8009fec <USBD_CtlError>
          return;
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 800a22e:	f000 f957 	bl	800a4e0 <USBD_CtlSendStatus>
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	2000f8bc 	.word	0x2000f8bc

0800a238 <USBD_GetConfig>:
{
 800a238:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 800a23a:	88cb      	ldrh	r3, [r1, #6]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d108      	bne.n	800a252 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 800a240:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a244:	2b02      	cmp	r3, #2
 800a246:	d007      	beq.n	800a258 <USBD_GetConfig+0x20>
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d00d      	beq.n	800a268 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 800a24c:	f7ff fece 	bl	8009fec <USBD_CtlError>
 800a250:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 800a252:	f7ff fecb 	bl	8009fec <USBD_CtlError>
 800a256:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 800a258:	4601      	mov	r1, r0
 800a25a:	2300      	movs	r3, #0
 800a25c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800a260:	2201      	movs	r2, #1
 800a262:	f000 f920 	bl	800a4a6 <USBD_CtlSendData>
      break;
 800a266:	bd08      	pop	{r3, pc}
      USBD_CtlSendData (pdev, 
 800a268:	2201      	movs	r2, #1
 800a26a:	1d01      	adds	r1, r0, #4
 800a26c:	f000 f91b 	bl	800a4a6 <USBD_CtlSendData>
      break;
 800a270:	bd08      	pop	{r3, pc}

0800a272 <USBD_GetStatus>:
{
 800a272:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 800a274:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a278:	3b02      	subs	r3, #2
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d80c      	bhi.n	800a298 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800a27e:	2301      	movs	r3, #1
 800a280:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800a282:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800a286:	b10b      	cbz	r3, 800a28c <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800a288:	2303      	movs	r3, #3
 800a28a:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800a28c:	2202      	movs	r2, #2
 800a28e:	f100 010c 	add.w	r1, r0, #12
 800a292:	f000 f908 	bl	800a4a6 <USBD_CtlSendData>
    break;
 800a296:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 800a298:	f7ff fea8 	bl	8009fec <USBD_CtlError>
 800a29c:	bd08      	pop	{r3, pc}

0800a29e <USBD_ClrFeature>:
{
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 800a2a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a2a6:	3b02      	subs	r3, #2
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d80e      	bhi.n	800a2ca <USBD_ClrFeature+0x2c>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800a2ac:	884b      	ldrh	r3, [r1, #2]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d000      	beq.n	800a2b4 <USBD_ClrFeature+0x16>
 800a2b2:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800a2ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f90c 	bl	800a4e0 <USBD_CtlSendStatus>
 800a2c8:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 800a2ca:	f7ff fe8f 	bl	8009fec <USBD_CtlError>
}
 800a2ce:	e7f0      	b.n	800a2b2 <USBD_ClrFeature+0x14>

0800a2d0 <USBD_StdDevReq>:
{
 800a2d0:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 800a2d2:	784b      	ldrb	r3, [r1, #1]
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	d81c      	bhi.n	800a312 <USBD_StdDevReq+0x42>
 800a2d8:	e8df f003 	tbb	[pc, r3]
 800a2dc:	151b1812 	.word	0x151b1812
 800a2e0:	1b05091b 	.word	0x1b05091b
 800a2e4:	0c0f      	.short	0x0c0f
    USBD_GetDescriptor (pdev, req) ;
 800a2e6:	f7ff fe8b 	bl	800a000 <USBD_GetDescriptor>
}
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 800a2ee:	f7ff ff2c 	bl	800a14a <USBD_SetAddress>
    break;
 800a2f2:	e7fa      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 800a2f4:	f7ff ff4e 	bl	800a194 <USBD_SetConfig>
    break;
 800a2f8:	e7f7      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 800a2fa:	f7ff ff9d 	bl	800a238 <USBD_GetConfig>
    break;
 800a2fe:	e7f4      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 800a300:	f7ff ffb7 	bl	800a272 <USBD_GetStatus>
    break;
 800a304:	e7f1      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 800a306:	f7ff fe4d 	bl	8009fa4 <USBD_SetFeature>
    break;
 800a30a:	e7ee      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 800a30c:	f7ff ffc7 	bl	800a29e <USBD_ClrFeature>
    break;
 800a310:	e7eb      	b.n	800a2ea <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 800a312:	f7ff fe6b 	bl	8009fec <USBD_CtlError>
    break;
 800a316:	e7e8      	b.n	800a2ea <USBD_StdDevReq+0x1a>

0800a318 <USBD_StdItfReq>:
{
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800a31e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a322:	2b03      	cmp	r3, #3
 800a324:	d111      	bne.n	800a34a <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800a326:	790b      	ldrb	r3, [r1, #4]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d903      	bls.n	800a334 <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
 800a32c:	f7ff fe5e 	bl	8009fec <USBD_CtlError>
}
 800a330:	2000      	movs	r0, #0
 800a332:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 800a334:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800a33c:	88eb      	ldrh	r3, [r5, #6]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f6      	bne.n	800a330 <USBD_StdItfReq+0x18>
         USBD_CtlSendStatus(pdev);
 800a342:	4620      	mov	r0, r4
 800a344:	f000 f8cc 	bl	800a4e0 <USBD_CtlSendStatus>
 800a348:	e7f2      	b.n	800a330 <USBD_StdItfReq+0x18>
     USBD_CtlError(pdev , req);
 800a34a:	f7ff fe4f 	bl	8009fec <USBD_CtlError>
    break;
 800a34e:	e7ef      	b.n	800a330 <USBD_StdItfReq+0x18>

0800a350 <USBD_StdEPReq>:
{
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4605      	mov	r5, r0
 800a354:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800a356:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800a358:	780b      	ldrb	r3, [r1, #0]
 800a35a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a35e:	2b20      	cmp	r3, #32
 800a360:	d011      	beq.n	800a386 <USBD_StdEPReq+0x36>
 800a362:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d02d      	beq.n	800a3c6 <USBD_StdEPReq+0x76>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d04f      	beq.n	800a40e <USBD_StdEPReq+0xbe>
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d10d      	bne.n	800a38e <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 800a372:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a376:	2b02      	cmp	r3, #2
 800a378:	d00b      	beq.n	800a392 <USBD_StdEPReq+0x42>
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d010      	beq.n	800a3a0 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 800a37e:	4621      	mov	r1, r4
 800a380:	f7ff fe34 	bl	8009fec <USBD_CtlError>
      break;    
 800a384:	e003      	b.n	800a38e <USBD_StdEPReq+0x3e>
    pdev->pClass->Setup (pdev, req);
 800a386:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	4798      	blx	r3
}
 800a38e:	2000      	movs	r0, #0
 800a390:	bd38      	pop	{r3, r4, r5, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800a392:	2900      	cmp	r1, #0
 800a394:	bf18      	it	ne
 800a396:	2980      	cmpne	r1, #128	; 0x80
 800a398:	d0f9      	beq.n	800a38e <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 800a39a:	f003 f9b2 	bl	800d702 <USBD_LL_StallEP>
 800a39e:	e7f6      	b.n	800a38e <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800a3a0:	8863      	ldrh	r3, [r4, #2]
 800a3a2:	b91b      	cbnz	r3, 800a3ac <USBD_StdEPReq+0x5c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	bf18      	it	ne
 800a3a8:	2980      	cmpne	r1, #128	; 0x80
 800a3aa:	d109      	bne.n	800a3c0 <USBD_StdEPReq+0x70>
      pdev->pClass->Setup (pdev, req);   
 800a3ac:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 f891 	bl	800a4e0 <USBD_CtlSendStatus>
      break;
 800a3be:	e7e6      	b.n	800a38e <USBD_StdEPReq+0x3e>
          USBD_LL_StallEP(pdev , ep_addr);
 800a3c0:	f003 f99f 	bl	800d702 <USBD_LL_StallEP>
 800a3c4:	e7f2      	b.n	800a3ac <USBD_StdEPReq+0x5c>
    switch (pdev->dev_state) 
 800a3c6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d005      	beq.n	800a3da <USBD_StdEPReq+0x8a>
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d00a      	beq.n	800a3e8 <USBD_StdEPReq+0x98>
      USBD_CtlError(pdev , req);
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	f7ff fe0a 	bl	8009fec <USBD_CtlError>
      break;    
 800a3d8:	e7d9      	b.n	800a38e <USBD_StdEPReq+0x3e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800a3da:	2900      	cmp	r1, #0
 800a3dc:	bf18      	it	ne
 800a3de:	2980      	cmpne	r1, #128	; 0x80
 800a3e0:	d0d5      	beq.n	800a38e <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 800a3e2:	f003 f98e 	bl	800d702 <USBD_LL_StallEP>
 800a3e6:	e7d2      	b.n	800a38e <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800a3e8:	8863      	ldrh	r3, [r4, #2]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1cf      	bne.n	800a38e <USBD_StdEPReq+0x3e>
        if ((ep_addr & 0x7F) != 0x00) 
 800a3ee:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800a3f2:	d103      	bne.n	800a3fc <USBD_StdEPReq+0xac>
        USBD_CtlSendStatus(pdev);
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f000 f873 	bl	800a4e0 <USBD_CtlSendStatus>
 800a3fa:	e7c8      	b.n	800a38e <USBD_StdEPReq+0x3e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800a3fc:	f003 f98f 	bl	800d71e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800a400:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	4621      	mov	r1, r4
 800a408:	4628      	mov	r0, r5
 800a40a:	4798      	blx	r3
 800a40c:	e7f2      	b.n	800a3f4 <USBD_StdEPReq+0xa4>
    switch (pdev->dev_state) 
 800a40e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a412:	2b02      	cmp	r3, #2
 800a414:	d005      	beq.n	800a422 <USBD_StdEPReq+0xd2>
 800a416:	2b03      	cmp	r3, #3
 800a418:	d009      	beq.n	800a42e <USBD_StdEPReq+0xde>
      USBD_CtlError(pdev , req);
 800a41a:	4621      	mov	r1, r4
 800a41c:	f7ff fde6 	bl	8009fec <USBD_CtlError>
      break;
 800a420:	e7b5      	b.n	800a38e <USBD_StdEPReq+0x3e>
      if ((ep_addr & 0x7F) != 0x00) 
 800a422:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800a426:	d0b2      	beq.n	800a38e <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 800a428:	f003 f96b 	bl	800d702 <USBD_LL_StallEP>
 800a42c:	e7af      	b.n	800a38e <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800a42e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a432:	d111      	bne.n	800a458 <USBD_StdEPReq+0x108>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800a434:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800a438:	3410      	adds	r4, #16
 800a43a:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800a43e:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a440:	4628      	mov	r0, r5
 800a442:	f003 f97a 	bl	800d73a <USBD_LL_IsStallEP>
 800a446:	b170      	cbz	r0, 800a466 <USBD_StdEPReq+0x116>
        pep->status = 0x0001;     
 800a448:	2301      	movs	r3, #1
 800a44a:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 800a44c:	2202      	movs	r2, #2
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 f828 	bl	800a4a6 <USBD_CtlSendData>
      break;
 800a456:	e79a      	b.n	800a38e <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800a458:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800a45c:	3401      	adds	r4, #1
 800a45e:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800a462:	3404      	adds	r4, #4
 800a464:	e7ec      	b.n	800a440 <USBD_StdEPReq+0xf0>
        pep->status = 0x0000;  
 800a466:	2300      	movs	r3, #0
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	e7ef      	b.n	800a44c <USBD_StdEPReq+0xfc>

0800a46c <USBD_GetString>:
  if (desc != NULL) 
 800a46c:	b1d0      	cbz	r0, 800a4a4 <USBD_GetString+0x38>
{
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	460d      	mov	r5, r1
 800a472:	4616      	mov	r6, r2
 800a474:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800a476:	f7ff fd8b 	bl	8009f90 <USBD_GetLen>
 800a47a:	3001      	adds	r0, #1
 800a47c:	0040      	lsls	r0, r0, #1
 800a47e:	b280      	uxth	r0, r0
 800a480:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 800a482:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800a484:	2303      	movs	r3, #3
 800a486:	706b      	strb	r3, [r5, #1]
 800a488:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800a48a:	e007      	b.n	800a49c <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	3401      	adds	r4, #1
 800a492:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 800a494:	3302      	adds	r3, #2
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2100      	movs	r1, #0
 800a49a:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 800a49c:	7821      	ldrb	r1, [r4, #0]
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d1f4      	bne.n	800a48c <USBD_GetString+0x20>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	4770      	bx	lr

0800a4a6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800a4b0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800a4b2:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800a4b4:	460a      	mov	r2, r1
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	f003 f964 	bl	800d784 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800a4bc:	2000      	movs	r0, #0
 800a4be:	bd10      	pop	{r4, pc}

0800a4c0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800a4c0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	f003 f95c 	bl	800d784 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	bd08      	pop	{r3, pc}

0800a4d0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800a4d0:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	460a      	mov	r2, r1
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	f003 f962 	bl	800d7a0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800a4dc:	2000      	movs	r0, #0
 800a4de:	bd08      	pop	{r3, pc}

0800a4e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800a4e0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4e2:	2304      	movs	r3, #4
 800a4e4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f003 f949 	bl	800d784 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	bd08      	pop	{r3, pc}

0800a4f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800a4f6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800a4f8:	2305      	movs	r3, #5
 800a4fa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800a4fe:	2300      	movs	r3, #0
 800a500:	461a      	mov	r2, r3
 800a502:	4619      	mov	r1, r3
 800a504:	f003 f94c 	bl	800d7a0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800a508:	2000      	movs	r0, #0
 800a50a:	bd08      	pop	{r3, pc}

0800a50c <GRAPHICS_MainTask>:
//extern  WM_HWIN CreateFramewin(void);
extern WM_HWIN CreateWindowMain(void);
extern WM_HWIN CreateWindowGraph(void);


void GRAPHICS_MainTask(void) {
 800a50c:	b508      	push	{r3, lr}
  /* 1- Create a FrameWin using GUIBuilder */
	// CreateFramewin();
	CreateWindowMain();
 800a50e:	f000 f913 	bl	800a738 <CreateWindowMain>
	//GUI_DispStringAt("Hello world!", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);

/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 800a512:	2064      	movs	r0, #100	; 0x64
 800a514:	f010 febc 	bl	801b290 <GUI_Delay>
 800a518:	e7fb      	b.n	800a512 <GRAPHICS_MainTask+0x6>
	...

0800a51c <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	4604      	mov	r4, r0
  int                    NCode;
  int                    Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 800a520:	6803      	ldr	r3, [r0, #0]
 800a522:	2b1d      	cmp	r3, #29
 800a524:	d005      	beq.n	800a532 <_cbDialog+0x16>
 800a526:	2b26      	cmp	r3, #38	; 0x26
 800a528:	f000 80e7 	beq.w	800a6fa <_cbDialog+0x1de>
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 800a52c:	f00c fc76 	bl	8016e1c <WM_DefaultProc>
 800a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    WINDOW_SetBkColor(hItem, GUI_MAKE_COLOR(0x00000000));
 800a532:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800a536:	6840      	ldr	r0, [r0, #4]
 800a538:	f003 fac0 	bl	800dabc <WINDOW_SetBkColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
 800a53c:	f640 0101 	movw	r1, #2049	; 0x801
 800a540:	6860      	ldr	r0, [r4, #4]
 800a542:	f009 fca1 	bl	8013e88 <WM_GetDialogItem>
 800a546:	4606      	mov	r6, r0
    BUTTON_SetText(hItem, "Start");
 800a548:	496e      	ldr	r1, [pc, #440]	; (800a704 <_cbDialog+0x1e8>)
 800a54a:	f008 fbb5 	bl	8012cb8 <BUTTON_SetText>
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a54e:	4d6e      	ldr	r5, [pc, #440]	; (800a708 <_cbDialog+0x1ec>)
 800a550:	4629      	mov	r1, r5
 800a552:	4630      	mov	r0, r6
 800a554:	f008 fbe2 	bl	8012d1c <BUTTON_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 800a558:	f640 0104 	movw	r1, #2052	; 0x804
 800a55c:	6860      	ldr	r0, [r4, #4]
 800a55e:	f009 fc93 	bl	8013e88 <WM_GetDialogItem>
 800a562:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 800a564:	4969      	ldr	r1, [pc, #420]	; (800a70c <_cbDialog+0x1f0>)
 800a566:	f005 feb9 	bl	80102dc <TEXT_SetFont>
    TEXT_SetText(hItem, "STM32 Loadcell measument system");
 800a56a:	4969      	ldr	r1, [pc, #420]	; (800a710 <_cbDialog+0x1f4>)
 800a56c:	4630      	mov	r0, r6
 800a56e:	f005 fed1 	bl	8010314 <TEXT_SetText>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a572:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a576:	4630      	mov	r0, r6
 800a578:	f005 ff18 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 800a57c:	210e      	movs	r1, #14
 800a57e:	4630      	mov	r0, r6
 800a580:	f005 fefa 	bl	8010378 <TEXT_SetTextAlign>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_0);
 800a584:	f640 0105 	movw	r1, #2053	; 0x805
 800a588:	6860      	ldr	r0, [r4, #4]
 800a58a:	f009 fc7d 	bl	8013e88 <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a58e:	4629      	mov	r1, r5
 800a590:	f006 ff20 	bl	80113d4 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 800a594:	f640 0106 	movw	r1, #2054	; 0x806
 800a598:	6860      	ldr	r0, [r4, #4]
 800a59a:	f009 fc75 	bl	8013e88 <WM_GetDialogItem>
 800a59e:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a5a0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a5a4:	f005 ff02 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Points");
 800a5a8:	495a      	ldr	r1, [pc, #360]	; (800a714 <_cbDialog+0x1f8>)
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f005 feb2 	bl	8010314 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f005 fe92 	bl	80102dc <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 800a5b8:	210c      	movs	r1, #12
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f005 fedc 	bl	8010378 <TEXT_SetTextAlign>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 800a5c0:	f640 0107 	movw	r1, #2055	; 0x807
 800a5c4:	6860      	ldr	r0, [r4, #4]
 800a5c6:	f009 fc5f 	bl	8013e88 <WM_GetDialogItem>
 800a5ca:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a5cc:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a5d0:	f005 feec 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Period [us]");
 800a5d4:	4950      	ldr	r1, [pc, #320]	; (800a718 <_cbDialog+0x1fc>)
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f005 fe9c 	bl	8010314 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f005 fe7c 	bl	80102dc <TEXT_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
 800a5e4:	f640 0109 	movw	r1, #2057	; 0x809
 800a5e8:	6860      	ldr	r0, [r4, #4]
 800a5ea:	f009 fc4d 	bl	8013e88 <WM_GetDialogItem>
 800a5ee:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_13_ASCII);
 800a5f0:	494a      	ldr	r1, [pc, #296]	; (800a71c <_cbDialog+0x200>)
 800a5f2:	f005 fe73 	bl	80102dc <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 800a5f6:	210e      	movs	r1, #14
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f005 febd 	bl	8010378 <TEXT_SetTextAlign>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a5fe:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a602:	4630      	mov	r0, r6
 800a604:	f005 fed2 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetText(hItem, "(c) Tapio Valli 2018");
 800a608:	4945      	ldr	r1, [pc, #276]	; (800a720 <_cbDialog+0x204>)
 800a60a:	4630      	mov	r0, r6
 800a60c:	f005 fe82 	bl	8010314 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_1);
 800a610:	f640 010a 	movw	r1, #2058	; 0x80a
 800a614:	6860      	ldr	r0, [r4, #4]
 800a616:	f009 fc37 	bl	8013e88 <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a61a:	4629      	mov	r1, r5
 800a61c:	f006 feda 	bl	80113d4 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_2);
 800a620:	f640 010b 	movw	r1, #2059	; 0x80b
 800a624:	6860      	ldr	r0, [r4, #4]
 800a626:	f009 fc2f 	bl	8013e88 <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a62a:	4629      	mov	r1, r5
 800a62c:	f006 fed2 	bl	80113d4 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 800a630:	f640 010c 	movw	r1, #2060	; 0x80c
 800a634:	6860      	ldr	r0, [r4, #4]
 800a636:	f009 fc27 	bl	8013e88 <WM_GetDialogItem>
 800a63a:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a63c:	4629      	mov	r1, r5
 800a63e:	f005 fe4d 	bl	80102dc <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a642:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a646:	4630      	mov	r0, r6
 800a648:	f005 feb0 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 800a64c:	210c      	movs	r1, #12
 800a64e:	4630      	mov	r0, r6
 800a650:	f005 fe92 	bl	8010378 <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Average");
 800a654:	4933      	ldr	r1, [pc, #204]	; (800a724 <_cbDialog+0x208>)
 800a656:	4630      	mov	r0, r6
 800a658:	f005 fe5c 	bl	8010314 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_3);
 800a65c:	f640 010d 	movw	r1, #2061	; 0x80d
 800a660:	6860      	ldr	r0, [r4, #4]
 800a662:	f009 fc11 	bl	8013e88 <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a666:	4629      	mov	r1, r5
 800a668:	f006 feb4 	bl	80113d4 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 800a66c:	f640 010e 	movw	r1, #2062	; 0x80e
 800a670:	6860      	ldr	r0, [r4, #4]
 800a672:	f009 fc09 	bl	8013e88 <WM_GetDialogItem>
 800a676:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 800a678:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a67c:	f005 fe96 	bl	80103ac <TEXT_SetTextColor>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a680:	4629      	mov	r1, r5
 800a682:	4630      	mov	r0, r6
 800a684:	f005 fe2a 	bl	80102dc <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 800a688:	210c      	movs	r1, #12
 800a68a:	4630      	mov	r0, r6
 800a68c:	f005 fe74 	bl	8010378 <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Count [ms]");
 800a690:	4925      	ldr	r1, [pc, #148]	; (800a728 <_cbDialog+0x20c>)
 800a692:	4630      	mov	r0, r6
 800a694:	f005 fe3e 	bl	8010314 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TREEVIEW_0);
 800a698:	f640 010f 	movw	r1, #2063	; 0x80f
 800a69c:	6860      	ldr	r0, [r4, #4]
 800a69e:	f009 fbf3 	bl	8013e88 <WM_GetDialogItem>
 800a6a2:	4606      	mov	r6, r0
    hTreeItemCur = TREEVIEW_GetItem(hItem, 0, TREEVIEW_GET_LAST);
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	f004 fd3a 	bl	800f120 <TREEVIEW_GetItem>
 800a6ac:	4607      	mov	r7, r0
    hTreeItemNew = TREEVIEW_ITEM_Create(TREEVIEW_ITEM_TYPE_NODE, "0", 0);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	491e      	ldr	r1, [pc, #120]	; (800a72c <_cbDialog+0x210>)
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	f004 fb02 	bl	800ecbc <TREEVIEW_ITEM_Create>
    TREEVIEW_AttachItem(hItem, hTreeItemNew, hTreeItemCur, TREEVIEW_INSERT_BELOW);
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f004 fb28 	bl	800ed14 <TREEVIEW_AttachItem>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
 800a6c4:	f44f 6101 	mov.w	r1, #2064	; 0x810
 800a6c8:	6860      	ldr	r0, [r4, #4]
 800a6ca:	f009 fbdd 	bl	8013e88 <WM_GetDialogItem>
 800a6ce:	4606      	mov	r6, r0
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f008 fb23 	bl	8012d1c <BUTTON_SetFont>
    BUTTON_SetText(hItem, "Graph");
 800a6d6:	4916      	ldr	r1, [pc, #88]	; (800a730 <_cbDialog+0x214>)
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f008 faed 	bl	8012cb8 <BUTTON_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
 800a6de:	f640 0111 	movw	r1, #2065	; 0x811
 800a6e2:	6860      	ldr	r0, [r4, #4]
 800a6e4:	f009 fbd0 	bl	8013e88 <WM_GetDialogItem>
 800a6e8:	4604      	mov	r4, r0
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f008 fb16 	bl	8012d1c <BUTTON_SetFont>
    BUTTON_SetText(hItem, "USB");
 800a6f0:	4910      	ldr	r1, [pc, #64]	; (800a734 <_cbDialog+0x218>)
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f008 fae0 	bl	8012cb8 <BUTTON_SetText>
    break;
 800a6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 800a6fa:	6880      	ldr	r0, [r0, #8]
 800a6fc:	f009 fc50 	bl	8013fa0 <WM_GetId>
 800a700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a702:	bf00      	nop
 800a704:	08026648 	.word	0x08026648
 800a708:	08027e48 	.word	0x08027e48
 800a70c:	08027120 	.word	0x08027120
 800a710:	08026650 	.word	0x08026650
 800a714:	08026670 	.word	0x08026670
 800a718:	08026678 	.word	0x08026678
 800a71c:	080289c8 	.word	0x080289c8
 800a720:	08026684 	.word	0x08026684
 800a724:	0802669c 	.word	0x0802669c
 800a728:	080266a4 	.word	0x080266a4
 800a72c:	080266b0 	.word	0x080266b0
 800a730:	080266b4 	.word	0x080266b4
 800a734:	080266bc 	.word	0x080266bc

0800a738 <CreateWindowMain>:
/*********************************************************************
*
*       CreateWindowMain
*/
WM_HWIN CreateWindowMain(void);
WM_HWIN CreateWindowMain(void) {
 800a738:	b500      	push	{lr}
 800a73a:	b083      	sub	sp, #12
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 800a73c:	f009 fb44 	bl	8013dc8 <WM_GetDesktopWindow>
 800a740:	2300      	movs	r3, #0
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	4603      	mov	r3, r0
 800a748:	4a03      	ldr	r2, [pc, #12]	; (800a758 <CreateWindowMain+0x20>)
 800a74a:	210f      	movs	r1, #15
 800a74c:	4803      	ldr	r0, [pc, #12]	; (800a75c <CreateWindowMain+0x24>)
 800a74e:	f008 f8b5 	bl	80128bc <GUI_CreateDialogBox>
  return hWin;
}
 800a752:	b003      	add	sp, #12
 800a754:	f85d fb04 	ldr.w	pc, [sp], #4
 800a758:	0800a51d 	.word	0x0800a51d
 800a75c:	080264a4 	.word	0x080264a4

0800a760 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 800a760:	b508      	push	{r3, lr}
  return ((int) osKernelSysTick());
 800a762:	f7fd f864 	bl	800782e <osKernelSysTick>
}
 800a766:	bd08      	pop	{r3, pc}

0800a768 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 800a768:	b508      	push	{r3, lr}
  osDelay( ms );
 800a76a:	f7fd f888 	bl	800787e <osDelay>
 800a76e:	bd08      	pop	{r3, pc}

0800a770 <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 800a770:	4770      	bx	lr
	...

0800a774 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 800a774:	b510      	push	{r4, lr}
 800a776:	b082      	sub	sp, #8
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 800a778:	2400      	movs	r4, #0
 800a77a:	a802      	add	r0, sp, #8
 800a77c:	f840 4d04 	str.w	r4, [r0, #-4]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800a780:	f7fd f886 	bl	8007890 <osMutexCreate>
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <GUI_X_InitOS+0x28>)
 800a786:	6018      	str	r0, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 800a788:	a802      	add	r0, sp, #8
 800a78a:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800a78e:	2101      	movs	r1, #1
 800a790:	f7fd f8ec 	bl	800796c <osSemaphoreCreate>
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <GUI_X_InitOS+0x2c>)
 800a796:	6018      	str	r0, [r3, #0]
}
 800a798:	b002      	add	sp, #8
 800a79a:	bd10      	pop	{r4, pc}
 800a79c:	2000f8c0 	.word	0x2000f8c0
 800a7a0:	2000f8c4 	.word	0x2000f8c4

0800a7a4 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 800a7a4:	b508      	push	{r3, lr}
  osMutexRelease(osMutex);
 800a7a6:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <GUI_X_Unlock+0xc>)
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f7fd f8b1 	bl	8007910 <osMutexRelease>
 800a7ae:	bd08      	pop	{r3, pc}
 800a7b0:	2000f8c0 	.word	0x2000f8c0

0800a7b4 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
 800a7b4:	b508      	push	{r3, lr}
  osMutexWait(osMutex , osWaitForever) ;
 800a7b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a7ba:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <GUI_X_Lock+0x10>)
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f7fd f86d 	bl	800789c <osMutexWait>
 800a7c2:	bd08      	pop	{r3, pc}
 800a7c4:	2000f8c0 	.word	0x2000f8c0

0800a7c8 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 800a7c8:	b508      	push	{r3, lr}
  return ((U32) osThreadGetId());
 800a7ca:	f7fd f854 	bl	8007876 <osThreadGetId>
}
 800a7ce:	bd08      	pop	{r3, pc}

0800a7d0 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 800a7d0:	b508      	push	{r3, lr}

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 800a7d2:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 800a7d6:	4802      	ldr	r0, [pc, #8]	; (800a7e0 <GUI_X_Config+0x10>)
 800a7d8:	f013 fa2e 	bl	801dc38 <GUI_ALLOC_AssignMemory>
 800a7dc:	bd08      	pop	{r3, pc}
 800a7de:	bf00      	nop
 800a7e0:	2000f8c8 	.word	0x2000f8c8

0800a7e4 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800a7e4:	4b2c      	ldr	r3, [pc, #176]	; (800a898 <HAL_FMC_MspInit+0xb4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b103      	cbz	r3, 800a7ec <HAL_FMC_MspInit+0x8>
 800a7ea:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 800a7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ee:	b087      	sub	sp, #28
    return;
  }
  FMC_Initialized = 1;
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	4b29      	ldr	r3, [pc, #164]	; (800a898 <HAL_FMC_MspInit+0xb4>)
 800a7f4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a7f6:	4b29      	ldr	r3, [pc, #164]	; (800a89c <HAL_FMC_MspInit+0xb8>)
 800a7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800a80a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a80e:	9301      	str	r3, [sp, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a810:	2702      	movs	r7, #2
 800a812:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a814:	2600      	movs	r6, #0
 800a816:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a818:	2503      	movs	r5, #3
 800a81a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a81c:	240c      	movs	r4, #12
 800a81e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a820:	a901      	add	r1, sp, #4
 800a822:	481f      	ldr	r0, [pc, #124]	; (800a8a0 <HAL_FMC_MspInit+0xbc>)
 800a824:	f7f7 fb98 	bl	8001f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800a828:	f248 1333 	movw	r3, #33075	; 0x8133
 800a82c:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a82e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a830:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a832:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a834:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a836:	a901      	add	r1, sp, #4
 800a838:	481a      	ldr	r0, [pc, #104]	; (800a8a4 <HAL_FMC_MspInit+0xc0>)
 800a83a:	f7f7 fb8d 	bl	8001f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800a83e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a842:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a844:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a846:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a848:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a84a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a84c:	a901      	add	r1, sp, #4
 800a84e:	4816      	ldr	r0, [pc, #88]	; (800a8a8 <HAL_FMC_MspInit+0xc4>)
 800a850:	f7f7 fb82 	bl	8001f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800a854:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a858:	9301      	str	r3, [sp, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a85a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a85e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a860:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a862:	a901      	add	r1, sp, #4
 800a864:	4811      	ldr	r0, [pc, #68]	; (800a8ac <HAL_FMC_MspInit+0xc8>)
 800a866:	f7f7 fb77 	bl	8001f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800a86a:	2328      	movs	r3, #40	; 0x28
 800a86c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a86e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a872:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a874:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a876:	a901      	add	r1, sp, #4
 800a878:	480d      	ldr	r0, [pc, #52]	; (800a8b0 <HAL_FMC_MspInit+0xcc>)
 800a87a:	f7f7 fb6d 	bl	8001f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800a87e:	2308      	movs	r3, #8
 800a880:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a882:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a884:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a886:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a888:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800a88a:	a901      	add	r1, sp, #4
 800a88c:	4809      	ldr	r0, [pc, #36]	; (800a8b4 <HAL_FMC_MspInit+0xd0>)
 800a88e:	f7f7 fb63 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a892:	b007      	add	sp, #28
 800a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a896:	bf00      	nop
 800a898:	2002b0d8 	.word	0x2002b0d8
 800a89c:	40023800 	.word	0x40023800
 800a8a0:	40021000 	.word	0x40021000
 800a8a4:	40021800 	.word	0x40021800
 800a8a8:	40020c00 	.word	0x40020c00
 800a8ac:	40021400 	.word	0x40021400
 800a8b0:	40021c00 	.word	0x40021c00
 800a8b4:	40020800 	.word	0x40020800

0800a8b8 <MX_LCD_Init>:
{ 
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	b09a      	sub	sp, #104	; 0x68
  HAL_LTDC_DeInit(&hltdc);
 800a8bc:	4c38      	ldr	r4, [pc, #224]	; (800a9a0 <MX_LCD_Init+0xe8>)
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7f7 fe22 	bl	8002508 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 800a8c4:	4b37      	ldr	r3, [pc, #220]	; (800a9a4 <MX_LCD_Init+0xec>)
 800a8c6:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a8cc:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a8ce:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a8d0:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 7;
 800a8d2:	2207      	movs	r2, #7
 800a8d4:	6162      	str	r2, [r4, #20]
  hltdc.Init.VerticalSync = 3;
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800a8da:	220e      	movs	r2, #14
 800a8dc:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800a8de:	2205      	movs	r2, #5
 800a8e0:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800a8e2:	f240 228e 	movw	r2, #654	; 0x28e
 800a8e6:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800a8e8:	f240 12e5 	movw	r2, #485	; 0x1e5
 800a8ec:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800a8ee:	f44f 7225 	mov.w	r2, #660	; 0x294
 800a8f2:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800a8f4:	f240 12e7 	movw	r2, #487	; 0x1e7
 800a8f8:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a8fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a8fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a902:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a906:	4620      	mov	r0, r4
 800a908:	f7f7 fd80 	bl	800240c <HAL_LTDC_Init>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d138      	bne.n	800a982 <MX_LCD_Init+0xca>
  pLayerCfg.WindowX0 = 0;
 800a910:	2200      	movs	r2, #0
 800a912:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800a914:	920e      	str	r2, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800a916:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800a918:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a91a:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800a91c:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800a91e:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a924:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a926:	2305      	movs	r3, #5
 800a928:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800a92a:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800a92c:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800a92e:	9218      	str	r2, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800a930:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800a934:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800a938:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a93c:	a90d      	add	r1, sp, #52	; 0x34
 800a93e:	4818      	ldr	r0, [pc, #96]	; (800a9a0 <MX_LCD_Init+0xe8>)
 800a940:	f7f7 fdee 	bl	8002520 <HAL_LTDC_ConfigLayer>
 800a944:	bb10      	cbnz	r0, 800a98c <MX_LCD_Init+0xd4>
  pLayerCfg1.WindowX0 = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 800a94a:	9301      	str	r3, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 800a94c:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 800a94e:	9303      	str	r3, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a950:	9304      	str	r3, [sp, #16]
  pLayerCfg1.Alpha = 0;
 800a952:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 800a954:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a95a:	9207      	str	r2, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a95c:	2205      	movs	r2, #5
 800a95e:	9208      	str	r2, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 800a960:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800a962:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800a964:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800a966:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800a96a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800a96e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800a972:	2201      	movs	r2, #1
 800a974:	4669      	mov	r1, sp
 800a976:	480a      	ldr	r0, [pc, #40]	; (800a9a0 <MX_LCD_Init+0xe8>)
 800a978:	f7f7 fdd2 	bl	8002520 <HAL_LTDC_ConfigLayer>
 800a97c:	b958      	cbnz	r0, 800a996 <MX_LCD_Init+0xde>
}
 800a97e:	b01a      	add	sp, #104	; 0x68
 800a980:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 800a982:	2171      	movs	r1, #113	; 0x71
 800a984:	4808      	ldr	r0, [pc, #32]	; (800a9a8 <MX_LCD_Init+0xf0>)
 800a986:	f001 fca9 	bl	800c2dc <_Error_Handler>
 800a98a:	e7c1      	b.n	800a910 <MX_LCD_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 800a98c:	2185      	movs	r1, #133	; 0x85
 800a98e:	4806      	ldr	r0, [pc, #24]	; (800a9a8 <MX_LCD_Init+0xf0>)
 800a990:	f001 fca4 	bl	800c2dc <_Error_Handler>
 800a994:	e7d7      	b.n	800a946 <MX_LCD_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 800a996:	2199      	movs	r1, #153	; 0x99
 800a998:	4803      	ldr	r0, [pc, #12]	; (800a9a8 <MX_LCD_Init+0xf0>)
 800a99a:	f001 fc9f 	bl	800c2dc <_Error_Handler>
}
 800a99e:	e7ee      	b.n	800a97e <MX_LCD_Init+0xc6>
 800a9a0:	2002b410 	.word	0x2002b410
 800a9a4:	40016800 	.word	0x40016800
 800a9a8:	080267ac 	.word	0x080267ac

0800a9ac <MX_FMC_Init>:
{  
 800a9ac:	b500      	push	{lr}
 800a9ae:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a9b0:	4812      	ldr	r0, [pc, #72]	; (800a9fc <MX_FMC_Init+0x50>)
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <MX_FMC_Init+0x54>)
 800a9b4:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a9ba:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a9bc:	2304      	movs	r3, #4
 800a9be:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a9c4:	2140      	movs	r1, #64	; 0x40
 800a9c6:	6141      	str	r1, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800a9c8:	2180      	movs	r1, #128	; 0x80
 800a9ca:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a9cc:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800a9ce:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a9d0:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a9d2:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 800a9d4:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800a9d6:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 800a9d8:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 800a9da:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800a9dc:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 800a9de:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 800a9e0:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a9e2:	a901      	add	r1, sp, #4
 800a9e4:	f7f9 facc 	bl	8003f80 <HAL_SDRAM_Init>
 800a9e8:	b910      	cbnz	r0, 800a9f0 <MX_FMC_Init+0x44>
}
 800a9ea:	b009      	add	sp, #36	; 0x24
 800a9ec:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800a9f0:	21bf      	movs	r1, #191	; 0xbf
 800a9f2:	4804      	ldr	r0, [pc, #16]	; (800aa04 <MX_FMC_Init+0x58>)
 800a9f4:	f001 fc72 	bl	800c2dc <_Error_Handler>
}
 800a9f8:	e7f7      	b.n	800a9ea <MX_FMC_Init+0x3e>
 800a9fa:	bf00      	nop
 800a9fc:	2002b4f8 	.word	0x2002b4f8
 800aa00:	a0000140 	.word	0xa0000140
 800aa04:	080267ac 	.word	0x080267ac

0800aa08 <MX_SDRAM_InitEx>:
{
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 800aa0e:	f04f 0800 	mov.w	r8, #0
 800aa12:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800aa16:	4c21      	ldr	r4, [pc, #132]	; (800aa9c <MX_SDRAM_InitEx+0x94>)
 800aa18:	2601      	movs	r6, #1
 800aa1a:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800aa1c:	2710      	movs	r7, #16
 800aa1e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800aa20:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800aa22:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa26:	4d1e      	ldr	r5, [pc, #120]	; (800aaa0 <MX_SDRAM_InitEx+0x98>)
 800aa28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f7f9 fb0d 	bl	800404e <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800aa34:	4630      	mov	r0, r6
 800aa36:	f7f6 fdf1 	bl	800161c <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800aa3e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800aa40:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800aa42:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 800aa46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7f9 fafe 	bl	800404e <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa52:	2303      	movs	r3, #3
 800aa54:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800aa56:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800aa58:	2308      	movs	r3, #8
 800aa5a:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800aa5c:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f7f9 faf1 	bl	800404e <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800aa6c:	f44f 730c 	mov.w	r3, #560	; 0x230
 800aa70:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800aa72:	2304      	movs	r3, #4
 800aa74:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800aa76:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800aa78:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa82:	4621      	mov	r1, r4
 800aa84:	4628      	mov	r0, r5
 800aa86:	f7f9 fae2 	bl	800404e <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 800aa8a:	f240 6165 	movw	r1, #1637	; 0x665
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7f9 fafa 	bl	8004088 <HAL_SDRAM_ProgramRefreshRate>
}
 800aa94:	b002      	add	sp, #8
 800aa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9a:	bf00      	nop
 800aa9c:	2002b0c8 	.word	0x2002b0c8
 800aaa0:	2002b4f8 	.word	0x2002b4f8

0800aaa4 <MX_DMA2D_Init>:
{
 800aaa4:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800aaa6:	4810      	ldr	r0, [pc, #64]	; (800aae8 <MX_DMA2D_Init+0x44>)
 800aaa8:	4b10      	ldr	r3, [pc, #64]	; (800aaec <MX_DMA2D_Init+0x48>)
 800aaaa:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800aaac:	2300      	movs	r3, #0
 800aaae:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800aab0:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 800aab2:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800aab4:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800aab6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800aab8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800aaba:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800aabc:	f7f7 f900 	bl	8001cc0 <HAL_DMA2D_Init>
 800aac0:	b928      	cbnz	r0, 800aace <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800aac2:	2101      	movs	r1, #1
 800aac4:	4808      	ldr	r0, [pc, #32]	; (800aae8 <MX_DMA2D_Init+0x44>)
 800aac6:	f7f7 f9e5 	bl	8001e94 <HAL_DMA2D_ConfigLayer>
 800aaca:	b930      	cbnz	r0, 800aada <MX_DMA2D_Init+0x36>
 800aacc:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800aace:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800aad2:	4807      	ldr	r0, [pc, #28]	; (800aaf0 <MX_DMA2D_Init+0x4c>)
 800aad4:	f001 fc02 	bl	800c2dc <_Error_Handler>
 800aad8:	e7f3      	b.n	800aac2 <MX_DMA2D_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 800aada:	f240 1113 	movw	r1, #275	; 0x113
 800aade:	4804      	ldr	r0, [pc, #16]	; (800aaf0 <MX_DMA2D_Init+0x4c>)
 800aae0:	f001 fbfc 	bl	800c2dc <_Error_Handler>
}
 800aae4:	e7f2      	b.n	800aacc <MX_DMA2D_Init+0x28>
 800aae6:	bf00      	nop
 800aae8:	2002b4b8 	.word	0x2002b4b8
 800aaec:	4002b000 	.word	0x4002b000
 800aaf0:	080267ac 	.word	0x080267ac

0800aaf4 <HAL_LTDC_MspInit>:
  if(ltdcHandle->Instance==LTDC)
 800aaf4:	6802      	ldr	r2, [r0, #0]
 800aaf6:	4b26      	ldr	r3, [pc, #152]	; (800ab90 <HAL_LTDC_MspInit+0x9c>)
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d000      	beq.n	800aafe <HAL_LTDC_MspInit+0xa>
 800aafc:	4770      	bx	lr
{
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	b086      	sub	sp, #24
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ab02:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800ab06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ab0c:	645a      	str	r2, [r3, #68]	; 0x44
 800ab0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800ab18:	2310      	movs	r3, #16
 800ab1a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab1c:	2502      	movs	r5, #2
 800ab1e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab20:	2400      	movs	r4, #0
 800ab22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab24:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab26:	260e      	movs	r6, #14
 800ab28:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	4819      	ldr	r0, [pc, #100]	; (800ab94 <HAL_LTDC_MspInit+0xa0>)
 800ab2e:	f7f7 fa13 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800ab32:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800ab36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab38:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab3a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab3c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab3e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ab40:	a901      	add	r1, sp, #4
 800ab42:	4815      	ldr	r0, [pc, #84]	; (800ab98 <HAL_LTDC_MspInit+0xa4>)
 800ab44:	f7f7 fa08 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800ab48:	23f7      	movs	r3, #247	; 0xf7
 800ab4a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab4c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab50:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab52:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800ab54:	a901      	add	r1, sp, #4
 800ab56:	4811      	ldr	r0, [pc, #68]	; (800ab9c <HAL_LTDC_MspInit+0xa8>)
 800ab58:	f7f7 f9fe 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800ab5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab62:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab64:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab66:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800ab68:	2309      	movs	r3, #9
 800ab6a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800ab6c:	a901      	add	r1, sp, #4
 800ab6e:	480c      	ldr	r0, [pc, #48]	; (800aba0 <HAL_LTDC_MspInit+0xac>)
 800ab70:	f7f7 f9f2 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800ab74:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800ab78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab7a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab7c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab7e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab80:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab82:	a901      	add	r1, sp, #4
 800ab84:	4807      	ldr	r0, [pc, #28]	; (800aba4 <HAL_LTDC_MspInit+0xb0>)
 800ab86:	f7f7 f9e7 	bl	8001f58 <HAL_GPIO_Init>
}
 800ab8a:	b006      	add	sp, #24
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
 800ab8e:	bf00      	nop
 800ab90:	40016800 	.word	0x40016800
 800ab94:	40021000 	.word	0x40021000
 800ab98:	40022400 	.word	0x40022400
 800ab9c:	40022800 	.word	0x40022800
 800aba0:	40021800 	.word	0x40021800
 800aba4:	40022000 	.word	0x40022000

0800aba8 <HAL_LTDC_MspDeInit>:
{
 800aba8:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 800abaa:	6802      	ldr	r2, [r0, #0]
 800abac:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <HAL_LTDC_MspDeInit+0x48>)
 800abae:	429a      	cmp	r2, r3
 800abb0:	d000      	beq.n	800abb4 <HAL_LTDC_MspDeInit+0xc>
 800abb2:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 800abb4:	4a0f      	ldr	r2, [pc, #60]	; (800abf4 <HAL_LTDC_MspDeInit+0x4c>)
 800abb6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800abb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800abbc:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 800abbe:	2110      	movs	r1, #16
 800abc0:	480d      	ldr	r0, [pc, #52]	; (800abf8 <HAL_LTDC_MspDeInit+0x50>)
 800abc2:	f7f7 fab7 	bl	8002134 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800abc6:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800abca:	480c      	ldr	r0, [pc, #48]	; (800abfc <HAL_LTDC_MspDeInit+0x54>)
 800abcc:	f7f7 fab2 	bl	8002134 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800abd0:	21f7      	movs	r1, #247	; 0xf7
 800abd2:	480b      	ldr	r0, [pc, #44]	; (800ac00 <HAL_LTDC_MspDeInit+0x58>)
 800abd4:	f7f7 faae 	bl	8002134 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 800abd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800abdc:	4809      	ldr	r0, [pc, #36]	; (800ac04 <HAL_LTDC_MspDeInit+0x5c>)
 800abde:	f7f7 faa9 	bl	8002134 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 800abe2:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 800abe6:	4808      	ldr	r0, [pc, #32]	; (800ac08 <HAL_LTDC_MspDeInit+0x60>)
 800abe8:	f7f7 faa4 	bl	8002134 <HAL_GPIO_DeInit>
}
 800abec:	e7e1      	b.n	800abb2 <HAL_LTDC_MspDeInit+0xa>
 800abee:	bf00      	nop
 800abf0:	40016800 	.word	0x40016800
 800abf4:	40023800 	.word	0x40023800
 800abf8:	40021000 	.word	0x40021000
 800abfc:	40022400 	.word	0x40022400
 800ac00:	40022800 	.word	0x40022800
 800ac04:	40021800 	.word	0x40021800
 800ac08:	40022000 	.word	0x40022000

0800ac0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ac0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ac0e:	f7ff fde9 	bl	800a7e4 <HAL_FMC_MspInit>
 800ac12:	bd08      	pop	{r3, pc}

0800ac14 <HAL_DMA2D_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
  if(dma2dHandle->Instance==DMA2D)
 800ac14:	6802      	ldr	r2, [r0, #0]
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <HAL_DMA2D_MspInit+0x28>)
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d000      	beq.n	800ac1e <HAL_DMA2D_MspInit+0xa>
    __HAL_RCC_DMA2D_CLK_ENABLE();
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800ac1c:	4770      	bx	lr
{
 800ac1e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ac20:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800ac24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ac2a:	631a      	str	r2, [r3, #48]	; 0x30
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	9b01      	ldr	r3, [sp, #4]
}
 800ac36:	b002      	add	sp, #8
 800ac38:	e7f0      	b.n	800ac1c <HAL_DMA2D_MspInit+0x8>
 800ac3a:	bf00      	nop
 800ac3c:	4002b000 	.word	0x4002b000

0800ac40 <_DMA_ExecOperation>:
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 800ac40:	4b03      	ldr	r3, [pc, #12]	; (800ac50 <_DMA_ExecOperation+0x10>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	b11b      	cbz	r3, 800ac4e <_DMA_ExecOperation+0xe>
    return;
  
  while(TransferInProgress) {
 800ac46:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <_DMA_ExecOperation+0x10>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1fb      	bne.n	800ac46 <_DMA_ExecOperation+0x6>
 800ac4e:	4770      	bx	lr
 800ac50:	2002b0dc 	.word	0x2002b0dc

0800ac54 <GetPixelformat>:
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex) {
  

  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 800ac54:	2801      	cmp	r0, #1
 800ac56:	d901      	bls.n	800ac5c <GetPixelformat+0x8>
    return 0;
 800ac58:	2000      	movs	r0, #0
 800ac5a:	4770      	bx	lr
  }

  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 800ac5c:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <GetPixelformat+0xa4>)
 800ac5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ac62:	4a26      	ldr	r2, [pc, #152]	; (800acfc <GetPixelformat+0xa8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	bf14      	ite	ne
 800ac68:	2200      	movne	r2, #0
 800ac6a:	2201      	moveq	r2, #1
 800ac6c:	4924      	ldr	r1, [pc, #144]	; (800ad00 <GetPixelformat+0xac>)
 800ac6e:	4825      	ldr	r0, [pc, #148]	; (800ad04 <GetPixelformat+0xb0>)
 800ac70:	428b      	cmp	r3, r1
 800ac72:	bf18      	it	ne
 800ac74:	4283      	cmpne	r3, r0
 800ac76:	d030      	beq.n	800acda <GetPixelformat+0x86>
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	d12e      	bne.n	800acda <GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 800ac7c:	4a22      	ldr	r2, [pc, #136]	; (800ad08 <GetPixelformat+0xb4>)
 800ac7e:	4923      	ldr	r1, [pc, #140]	; (800ad0c <GetPixelformat+0xb8>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bf18      	it	ne
 800ac84:	428b      	cmpne	r3, r1
 800ac86:	d02a      	beq.n	800acde <GetPixelformat+0x8a>
    return LTDC_PIXEL_FORMAT_RGB888;
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 800ac88:	4a21      	ldr	r2, [pc, #132]	; (800ad10 <GetPixelformat+0xbc>)
 800ac8a:	4922      	ldr	r1, [pc, #136]	; (800ad14 <GetPixelformat+0xc0>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	bf18      	it	ne
 800ac90:	428b      	cmpne	r3, r1
 800ac92:	d101      	bne.n	800ac98 <GetPixelformat+0x44>
    return LTDC_PIXEL_FORMAT_RGB565;
 800ac94:	2002      	movs	r0, #2
 800ac96:	4770      	bx	lr
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 800ac98:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <GetPixelformat+0xc4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d021      	beq.n	800ace2 <GetPixelformat+0x8e>
    return LTDC_PIXEL_FORMAT_ARGB1555;
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 800ac9e:	4a1f      	ldr	r2, [pc, #124]	; (800ad1c <GetPixelformat+0xc8>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d020      	beq.n	800ace6 <GetPixelformat+0x92>
    return LTDC_PIXEL_FORMAT_ARGB4444;
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 800aca4:	491e      	ldr	r1, [pc, #120]	; (800ad20 <GetPixelformat+0xcc>)
 800aca6:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <GetPixelformat+0xd0>)
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf18      	it	ne
 800acac:	4293      	cmpne	r3, r2
 800acae:	bf0c      	ite	eq
 800acb0:	2201      	moveq	r2, #1
 800acb2:	2200      	movne	r2, #0
 800acb4:	491c      	ldr	r1, [pc, #112]	; (800ad28 <GetPixelformat+0xd4>)
 800acb6:	428b      	cmp	r3, r1
 800acb8:	bf14      	ite	ne
 800acba:	2100      	movne	r1, #0
 800acbc:	2101      	moveq	r1, #1
 800acbe:	481b      	ldr	r0, [pc, #108]	; (800ad2c <GetPixelformat+0xd8>)
 800acc0:	4283      	cmp	r3, r0
 800acc2:	bf08      	it	eq
 800acc4:	f042 0201 	orreq.w	r2, r2, #1
 800acc8:	b97a      	cbnz	r2, 800acea <GetPixelformat+0x96>
 800acca:	b971      	cbnz	r1, 800acea <GetPixelformat+0x96>
    return LTDC_PIXEL_FORMAT_L8;
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 800accc:	4a18      	ldr	r2, [pc, #96]	; (800ad30 <GetPixelformat+0xdc>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00d      	beq.n	800acee <GetPixelformat+0x9a>
    return LTDC_PIXEL_FORMAT_AL44;
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 800acd2:	4a18      	ldr	r2, [pc, #96]	; (800ad34 <GetPixelformat+0xe0>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00c      	beq.n	800acf2 <GetPixelformat+0x9e>
 800acd8:	e7fe      	b.n	800acd8 <GetPixelformat+0x84>
    return LTDC_PIXEL_FORMAT_ARGB8888;
 800acda:	2000      	movs	r0, #0
 800acdc:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 800acde:	2001      	movs	r0, #1
 800ace0:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800ace2:	2003      	movs	r0, #3
 800ace4:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 800ace6:	2004      	movs	r0, #4
 800ace8:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 800acea:	2005      	movs	r0, #5
 800acec:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 800acee:	2006      	movs	r0, #6
 800acf0:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL88;
 800acf2:	2007      	movs	r0, #7
  }
  while (1); // Error
} 
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	080267ec 	.word	0x080267ec
 800acfc:	08029ca8 	.word	0x08029ca8
 800ad00:	08029c60 	.word	0x08029c60
 800ad04:	08029cf0 	.word	0x08029cf0
 800ad08:	08029cc0 	.word	0x08029cc0
 800ad0c:	08029c78 	.word	0x08029c78
 800ad10:	08029c90 	.word	0x08029c90
 800ad14:	08029cd8 	.word	0x08029cd8
 800ad18:	08029d20 	.word	0x08029d20
 800ad1c:	08029d08 	.word	0x08029d08
 800ad20:	08029d80 	.word	0x08029d80
 800ad24:	08029d98 	.word	0x08029d98
 800ad28:	08029d50 	.word	0x08029d50
 800ad2c:	08029d68 	.word	0x08029d68
 800ad30:	08029db0 	.word	0x08029db0
 800ad34:	08029d38 	.word	0x08029d38

0800ad38 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4b01      	ldr	r3, [pc, #4]	; (800ad40 <TransferComplete+0x8>)
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	4770      	bx	lr
 800ad40:	2002b0dc 	.word	0x2002b0dc

0800ad44 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	4607      	mov	r7, r0
 800ad48:	460e      	mov	r6, r1
 800ad4a:	4615      	mov	r5, r2
 800ad4c:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800ad4e:	f7ff ff77 	bl	800ac40 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800ad52:	2201      	movs	r2, #1
 800ad54:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <DMA2D_CopyBuffer+0x48>)
 800ad56:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff ff7b 	bl	800ac54 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800ad5e:	4a0c      	ldr	r2, [pc, #48]	; (800ad90 <DMA2D_CopyBuffer+0x4c>)
 800ad60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad64:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800ad66:	60d6      	str	r6, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800ad68:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800ad6e:	9b08      	ldr	r3, [sp, #32]
 800ad70:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800ad72:	61d0      	str	r0, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800ad74:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ad78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad7c:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	f043 0301 	orr.w	r3, r3, #1
 800ad84:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 800ad86:	f7ff ff5b 	bl	800ac40 <_DMA_ExecOperation>
 800ad8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad8c:	2002b0dc 	.word	0x2002b0dc
 800ad90:	4002b000 	.word	0x4002b000

0800ad94 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	4680      	mov	r8, r0
 800ad9a:	460f      	mov	r7, r1
 800ad9c:	4615      	mov	r5, r2
 800ad9e:	461e      	mov	r6, r3
 800ada0:	9c08      	ldr	r4, [sp, #32]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 800ada2:	f7ff ff4d 	bl	800ac40 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800ada6:	2201      	movs	r2, #1
 800ada8:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <DMA2D_CopyBufferWithAlpha+0x54>)
 800adaa:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800adac:	4640      	mov	r0, r8
 800adae:	f7ff ff51 	bl	800ac54 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800adb2:	4a0e      	ldr	r2, [pc, #56]	; (800adec <DMA2D_CopyBufferWithAlpha+0x58>)
 800adb4:	4b0e      	ldr	r3, [pc, #56]	; (800adf0 <DMA2D_CopyBufferWithAlpha+0x5c>)
 800adb6:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800adb8:	60d7      	str	r7, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800adba:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800adbc:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 800adbe:	9b07      	ldr	r3, [sp, #28]
 800adc0:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800adc2:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 800adc4:	6194      	str	r4, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 800adc6:	2300      	movs	r3, #0
 800adc8:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 800adca:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 800adcc:	6350      	str	r0, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800adce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800add2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800add6:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800add8:	6813      	ldr	r3, [r2, #0]
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800ade0:	f7ff ff2e 	bl	800ac40 <_DMA_ExecOperation>
 800ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade8:	2002b0dc 	.word	0x2002b0dc
 800adec:	4002b000 	.word	0x4002b000
 800adf0:	00020200 	.word	0x00020200

0800adf4 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 800adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf6:	4607      	mov	r7, r0
 800adf8:	460e      	mov	r6, r1
 800adfa:	4615      	mov	r5, r2
 800adfc:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800adfe:	f7ff ff1f 	bl	800ac40 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800ae02:	2201      	movs	r2, #1
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <DMA2D_FillBuffer+0x44>)
 800ae06:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff ff23 	bl	800ac54 <GetPixelformat>

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800ae0e:	490b      	ldr	r1, [pc, #44]	; (800ae3c <DMA2D_FillBuffer+0x48>)
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <DMA2D_FillBuffer+0x4c>)
 800ae12:	600b      	str	r3, [r1, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	638b      	str	r3, [r1, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 800ae18:	63ce      	str	r6, [r1, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 800ae1a:	9b06      	ldr	r3, [sp, #24]
 800ae1c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 800ae1e:	6348      	str	r0, [r1, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800ae20:	b2a4      	uxth	r4, r4
 800ae22:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800ae26:	644c      	str	r4, [r1, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 800ae28:	680a      	ldr	r2, [r1, #0]
 800ae2a:	f240 2301 	movw	r3, #513	; 0x201
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800ae32:	f7ff ff05 	bl	800ac40 <_DMA_ExecOperation>
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	2002b0dc 	.word	0x2002b0dc
 800ae3c:	4002b000 	.word	0x4002b000
 800ae40:	00030200 	.word	0x00030200

0800ae44 <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	4607      	mov	r7, r0
 800ae48:	460e      	mov	r6, r1
 800ae4a:	4615      	mov	r5, r2
 800ae4c:	461c      	mov	r4, r3

  /* Set up mode */
  _DMA_ExecOperation();
 800ae4e:	f7ff fef7 	bl	800ac40 <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 800ae52:	2201      	movs	r2, #1
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <_DMA_ConvertColor+0x44>)
 800ae56:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800ae58:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <_DMA_ConvertColor+0x48>)
 800ae5a:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800ae5e:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 800ae60:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800ae62:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 800ae64:	2200      	movs	r2, #0
 800ae66:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 800ae68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 800ae6a:	61dd      	str	r5, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 800ae6c:	635c      	str	r4, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 800ae6e:	9a06      	ldr	r2, [sp, #24]
 800ae70:	0412      	lsls	r2, r2, #16
 800ae72:	f042 0201 	orr.w	r2, r2, #1
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800ae78:	6819      	ldr	r1, [r3, #0]
 800ae7a:	f240 2201 	movw	r2, #513	; 0x201
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	601a      	str	r2, [r3, #0]
  
  _DMA_ExecOperation();
 800ae82:	f7ff fedd 	bl	800ac40 <_DMA_ExecOperation>
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae88:	2002b0dc 	.word	0x2002b0dc
 800ae8c:	4002b000 	.word	0x4002b000

0800ae90 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800ae90:	b500      	push	{lr}
 800ae92:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 800ae94:	9200      	str	r2, [sp, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	f7ff ffd3 	bl	800ae44 <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 800ae9e:	b003      	add	sp, #12
 800aea0:	f85d fb04 	ldr.w	pc, [sp], #4

0800aea4 <_Index2ColorBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800aea4:	b510      	push	{r4, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	2400      	movs	r4, #0
 800aeaa:	9400      	str	r4, [sp, #0]
 800aeac:	f7ff fff0 	bl	800ae90 <_DMA_Index2ColorBulk>
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	2400      	movs	r4, #0
 800aeba:	9400      	str	r4, [sp, #0]
 800aebc:	f7ff ffe8 	bl	800ae90 <_DMA_Index2ColorBulk>
 800aec0:	b002      	add	sp, #8
 800aec2:	bd10      	pop	{r4, pc}

0800aec4 <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800aec4:	b510      	push	{r4, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	2404      	movs	r4, #4
 800aeca:	9400      	str	r4, [sp, #0]
 800aecc:	f7ff ffe0 	bl	800ae90 <_DMA_Index2ColorBulk>
 800aed0:	b002      	add	sp, #8
 800aed2:	bd10      	pop	{r4, pc}

0800aed4 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800aed4:	b510      	push	{r4, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	2402      	movs	r4, #2
 800aeda:	9400      	str	r4, [sp, #0]
 800aedc:	f7ff ffd8 	bl	800ae90 <_DMA_Index2ColorBulk>
 800aee0:	b002      	add	sp, #8
 800aee2:	bd10      	pop	{r4, pc}

0800aee4 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800aee4:	b510      	push	{r4, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	2403      	movs	r4, #3
 800aeea:	9400      	str	r4, [sp, #0]
 800aeec:	f7ff ffd0 	bl	800ae90 <_DMA_Index2ColorBulk>
 800aef0:	b002      	add	sp, #8
 800aef2:	bd10      	pop	{r4, pc}

0800aef4 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800aef4:	b500      	push	{lr}
 800aef6:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 800aef8:	9200      	str	r2, [sp, #0]
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f7ff ffa1 	bl	800ae44 <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 800af02:	b003      	add	sp, #12
 800af04:	f85d fb04 	ldr.w	pc, [sp], #4

0800af08 <_Color2IndexBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800af08:	b510      	push	{r4, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	2400      	movs	r4, #0
 800af0e:	9400      	str	r4, [sp, #0]
 800af10:	f7ff fff0 	bl	800aef4 <_DMA_Color2IndexBulk>
 800af14:	b002      	add	sp, #8
 800af16:	bd10      	pop	{r4, pc}

0800af18 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800af18:	b510      	push	{r4, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	2400      	movs	r4, #0
 800af1e:	9400      	str	r4, [sp, #0]
 800af20:	f7ff ffe8 	bl	800aef4 <_DMA_Color2IndexBulk>
 800af24:	b002      	add	sp, #8
 800af26:	bd10      	pop	{r4, pc}

0800af28 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800af28:	b510      	push	{r4, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	2404      	movs	r4, #4
 800af2e:	9400      	str	r4, [sp, #0]
 800af30:	f7ff ffe0 	bl	800aef4 <_DMA_Color2IndexBulk>
 800af34:	b002      	add	sp, #8
 800af36:	bd10      	pop	{r4, pc}

0800af38 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800af38:	b510      	push	{r4, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	2402      	movs	r4, #2
 800af3e:	9400      	str	r4, [sp, #0]
 800af40:	f7ff ffd8 	bl	800aef4 <_DMA_Color2IndexBulk>
 800af44:	b002      	add	sp, #8
 800af46:	bd10      	pop	{r4, pc}

0800af48 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800af48:	b510      	push	{r4, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	2403      	movs	r4, #3
 800af4e:	9400      	str	r4, [sp, #0]
 800af50:	f7ff ffd0 	bl	800aef4 <_DMA_Color2IndexBulk>
 800af54:	b002      	add	sp, #8
 800af56:	bd10      	pop	{r4, pc}

0800af58 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 800af58:	b410      	push	{r4}
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 800af5a:	4909      	ldr	r1, [pc, #36]	; (800af80 <GetBufferSize+0x28>)
 800af5c:	00c3      	lsls	r3, r0, #3
 800af5e:	1a1c      	subs	r4, r3, r0
 800af60:	00a2      	lsls	r2, r4, #2
 800af62:	440a      	add	r2, r1
 800af64:	68d4      	ldr	r4, [r2, #12]
 800af66:	6912      	ldr	r2, [r2, #16]
 800af68:	fb02 f204 	mul.w	r2, r2, r4
 800af6c:	1a1b      	subs	r3, r3, r0
 800af6e:	0098      	lsls	r0, r3, #2
 800af70:	4401      	add	r1, r0
 800af72:	6948      	ldr	r0, [r1, #20]
}
 800af74:	fb00 f002 	mul.w	r0, r0, r2
 800af78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	2002b0e0 	.word	0x2002b0e0

0800af84 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	4606      	mov	r6, r0
 800af8c:	4688      	mov	r8, r1
 800af8e:	4617      	mov	r7, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800af90:	f7ff ffe2 	bl	800af58 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800af94:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <LCD_LL_CopyBuffer+0x44>)
 800af96:	00f5      	lsls	r5, r6, #3
 800af98:	1baa      	subs	r2, r5, r6
 800af9a:	0093      	lsls	r3, r2, #2
 800af9c:	18e2      	adds	r2, r4, r3
 800af9e:	58e1      	ldr	r1, [r4, r3]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800afa0:	68d3      	ldr	r3, [r2, #12]
 800afa2:	6912      	ldr	r2, [r2, #16]
 800afa4:	9200      	str	r2, [sp, #0]
 800afa6:	2200      	movs	r2, #0
 800afa8:	9202      	str	r2, [sp, #8]
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	fb00 1207 	mla	r2, r0, r7, r1
 800afb0:	fb00 1108 	mla	r1, r0, r8, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff fec5 	bl	800ad44 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800afba:	1bad      	subs	r5, r5, r6
 800afbc:	00ab      	lsls	r3, r5, #2
 800afbe:	441c      	add	r4, r3
 800afc0:	60a7      	str	r7, [r4, #8]
}
 800afc2:	b004      	add	sp, #16
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc8:	2002b0e0 	.word	0x2002b0e0

0800afcc <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	4680      	mov	r8, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	4692      	mov	sl, r2
 800afd8:	4699      	mov	r9, r3
 800afda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800afdc:	f7ff ffbc 	bl	800af58 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800afe0:	4b16      	ldr	r3, [pc, #88]	; (800b03c <LCD_LL_CopyRect+0x70>)
 800afe2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800afe6:	eba7 0108 	sub.w	r1, r7, r8
 800afea:	008a      	lsls	r2, r1, #2
 800afec:	eb03 0e02 	add.w	lr, r3, r2
 800aff0:	5899      	ldr	r1, [r3, r2]
 800aff2:	f8de 500c 	ldr.w	r5, [lr, #12]
 800aff6:	fb0a 4405 	mla	r4, sl, r5, r4
 800affa:	f8de 2014 	ldr.w	r2, [lr, #20]
 800affe:	eba7 0708 	sub.w	r7, r7, r8
 800b002:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 800b006:	4473      	add	r3, lr
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	fb03 f000 	mul.w	r0, r3, r0
 800b00e:	fb02 0404 	mla	r4, r2, r4, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 800b012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b014:	fb03 9905 	mla	r9, r3, r5, r9
 800b018:	fb09 0202 	mla	r2, r9, r2, r0
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800b01c:	1bad      	subs	r5, r5, r6
 800b01e:	2300      	movs	r3, #0
 800b020:	9302      	str	r3, [sp, #8]
 800b022:	9501      	str	r5, [sp, #4]
 800b024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	4633      	mov	r3, r6
 800b02a:	440a      	add	r2, r1
 800b02c:	4421      	add	r1, r4
 800b02e:	4640      	mov	r0, r8
 800b030:	f7ff fe88 	bl	800ad44 <DMA2D_CopyBuffer>
}
 800b034:	b004      	add	sp, #16
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	bf00      	nop
 800b03c:	2002b0e0 	.word	0x2002b0e0

0800b040 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4607      	mov	r7, r0
 800b044:	460e      	mov	r6, r1
 800b046:	4615      	mov	r5, r2
 800b048:	461c      	mov	r4, r3
	
  _DMA_ExecOperation();
 800b04a:	f7ff fdf9 	bl	800ac40 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800b04e:	2201      	movs	r2, #1
 800b050:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <DMA2D_DrawBitmapL8+0x44>)
 800b052:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800b054:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <DMA2D_DrawBitmapL8+0x48>)
 800b056:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800b05a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 800b05c:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800b05e:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800b060:	611d      	str	r5, [r3, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 800b062:	641c      	str	r4, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800b064:	2205      	movs	r2, #5
 800b066:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800b068:	9a06      	ldr	r2, [sp, #24]
 800b06a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 800b06c:	9a08      	ldr	r2, [sp, #32]
 800b06e:	9907      	ldr	r1, [sp, #28]
 800b070:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b074:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	f042 0201 	orr.w	r2, r2, #1
 800b07c:	601a      	str	r2, [r3, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 800b07e:	f7ff fddf 	bl	800ac40 <_DMA_ExecOperation>
 800b082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b084:	2002b0dc 	.word	0x2002b0dc
 800b088:	4002b000 	.word	0x4002b000

0800b08c <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	4607      	mov	r7, r0
 800b092:	4689      	mov	r9, r1
 800b094:	4690      	mov	r8, r2
 800b096:	461c      	mov	r4, r3
 800b098:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b09a:	9d0a      	ldr	r5, [sp, #40]	; 0x28

  _DMA_ExecOperation();
 800b09c:	f7ff fdd0 	bl	800ac40 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <_DMA_DrawAlphaBitmap+0x54>)
 800b0a4:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 800b0a6:	490f      	ldr	r1, [pc, #60]	; (800b0e4 <_DMA_DrawAlphaBitmap+0x58>)
 800b0a8:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <_DMA_DrawAlphaBitmap+0x5c>)
 800b0aa:	600b      	str	r3, [r1, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 800b0ac:	f8c1 900c 	str.w	r9, [r1, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 800b0b0:	614f      	str	r7, [r1, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 800b0b2:	63cf      	str	r7, [r1, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	610b      	str	r3, [r1, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 800b0b8:	618e      	str	r6, [r1, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 800b0ba:	640e      	str	r6, [r1, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61cb      	str	r3, [r1, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 800b0c0:	624d      	str	r5, [r1, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 800b0c2:	634d      	str	r5, [r1, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 800b0c4:	b2a4      	uxth	r4, r4
 800b0c6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800b0ca:	644c      	str	r4, [r1, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800b0cc:	680a      	ldr	r2, [r1, #0]
 800b0ce:	f240 2301 	movw	r3, #513	; 0x201
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 800b0d6:	f7ff fdb3 	bl	800ac40 <_DMA_ExecOperation>
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	bf00      	nop
 800b0e0:	2002b0dc 	.word	0x2002b0dc
 800b0e4:	4002b000 	.word	0x4002b000
 800b0e8:	00020200 	.word	0x00020200

0800b0ec <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 800b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	4681      	mov	r9, r0
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	4692      	mov	sl, r2
 800b0f8:	461f      	mov	r7, r3
 800b0fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800b0fe:	f7ff fda9 	bl	800ac54 <GetPixelformat>
 800b102:	4680      	mov	r8, r0
  BufferSize = GetBufferSize(LayerIndex);
 800b104:	4648      	mov	r0, r9
 800b106:	f7ff ff27 	bl	800af58 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800b10a:	4b18      	ldr	r3, [pc, #96]	; (800b16c <_LCD_DrawBitmapAlpha+0x80>)
 800b10c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b110:	eba1 0e09 	sub.w	lr, r1, r9
 800b114:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b118:	eb03 0c02 	add.w	ip, r3, r2
 800b11c:	f853 e002 	ldr.w	lr, [r3, r2]
 800b120:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800b124:	fb0a 4402 	mla	r4, sl, r2, r4
 800b128:	f8dc a014 	ldr.w	sl, [ip, #20]
 800b12c:	eba1 0109 	sub.w	r1, r1, r9
 800b130:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800b134:	4463      	add	r3, ip
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	fb03 f000 	mul.w	r0, r3, r0
 800b13c:	fb0a 0404 	mla	r4, sl, r4, r0
 800b140:	eb0e 0004 	add.w	r0, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800b144:	4633      	mov	r3, r6
 800b146:	2e00      	cmp	r6, #0
 800b148:	db0e      	blt.n	800b168 <_LCD_DrawBitmapAlpha+0x7c>
 800b14a:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800b14e:	1b52      	subs	r2, r2, r5
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800b150:	f8cd 8008 	str.w	r8, [sp, #8]
 800b154:	9201      	str	r2, [sp, #4]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15a:	462a      	mov	r2, r5
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7ff ff95 	bl	800b08c <_DMA_DrawAlphaBitmap>
}
 800b162:	b004      	add	sp, #16
 800b164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800b168:	1cf3      	adds	r3, r6, #3
 800b16a:	e7ee      	b.n	800b14a <_LCD_DrawBitmapAlpha+0x5e>
 800b16c:	2002b0e0 	.word	0x2002b0e0

0800b170 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	9e08      	ldr	r6, [sp, #32]
 800b176:	9d09      	ldr	r5, [sp, #36]	; 0x24
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800b178:	462c      	mov	r4, r5
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	db0e      	blt.n	800b19c <_LCD_DrawMemdevAlpha+0x2c>
 800b17e:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800b182:	4635      	mov	r5, r6
 800b184:	2e00      	cmp	r6, #0
 800b186:	db0b      	blt.n	800b1a0 <_LCD_DrawMemdevAlpha+0x30>
 800b188:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 800b18c:	2600      	movs	r6, #0
 800b18e:	9602      	str	r6, [sp, #8]
 800b190:	9501      	str	r5, [sp, #4]
 800b192:	9400      	str	r4, [sp, #0]
 800b194:	f7ff ff7a 	bl	800b08c <_DMA_DrawAlphaBitmap>
}
 800b198:	b004      	add	sp, #16
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800b19c:	1cec      	adds	r4, r5, #3
 800b19e:	e7ee      	b.n	800b17e <_LCD_DrawMemdevAlpha+0xe>
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800b1a0:	1cf5      	adds	r5, r6, #3
 800b1a2:	e7f1      	b.n	800b188 <_LCD_DrawMemdevAlpha+0x18>

0800b1a4 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 800b1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	4691      	mov	r9, r2
 800b1b0:	4698      	mov	r8, r3
 800b1b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b1b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800b1b6:	f7ff fecf 	bl	800af58 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800b1ba:	4b17      	ldr	r3, [pc, #92]	; (800b218 <LCD_LL_DrawBitmap16bpp+0x74>)
 800b1bc:	00e9      	lsls	r1, r5, #3
 800b1be:	eba1 0e05 	sub.w	lr, r1, r5
 800b1c2:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b1c6:	eb03 0c02 	add.w	ip, r3, r2
 800b1ca:	589a      	ldr	r2, [r3, r2]
 800b1cc:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800b1d0:	fb09 440e 	mla	r4, r9, lr, r4
 800b1d4:	f8dc 9014 	ldr.w	r9, [ip, #20]
 800b1d8:	1b49      	subs	r1, r1, r5
 800b1da:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800b1de:	4463      	add	r3, ip
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	fb03 f000 	mul.w	r0, r3, r0
 800b1e6:	fb09 0404 	mla	r4, r9, r4, r0
 800b1ea:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	db0f      	blt.n	800b212 <LCD_LL_DrawBitmap16bpp+0x6e>
 800b1f2:	ebc6 0163 	rsb	r1, r6, r3, asr #1
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800b1f6:	ebae 0306 	sub.w	r3, lr, r6
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800b1fa:	9302      	str	r3, [sp, #8]
 800b1fc:	9101      	str	r1, [sp, #4]
 800b1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	4633      	mov	r3, r6
 800b204:	4641      	mov	r1, r8
 800b206:	4628      	mov	r0, r5
 800b208:	f7ff fd9c 	bl	800ad44 <DMA2D_CopyBuffer>
}
 800b20c:	b005      	add	sp, #20
 800b20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800b212:	1c7b      	adds	r3, r7, #1
 800b214:	e7ed      	b.n	800b1f2 <LCD_LL_DrawBitmap16bpp+0x4e>
 800b216:	bf00      	nop
 800b218:	2002b0e0 	.word	0x2002b0e0

0800b21c <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800b21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b220:	b085      	sub	sp, #20
 800b222:	4605      	mov	r5, r0
 800b224:	460c      	mov	r4, r1
 800b226:	4691      	mov	r9, r2
 800b228:	4698      	mov	r8, r3
 800b22a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b22c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800b22e:	f7ff fe93 	bl	800af58 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800b232:	4b17      	ldr	r3, [pc, #92]	; (800b290 <LCD_LL_DrawBitmap32bpp+0x74>)
 800b234:	00e9      	lsls	r1, r5, #3
 800b236:	eba1 0e05 	sub.w	lr, r1, r5
 800b23a:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b23e:	eb03 0c02 	add.w	ip, r3, r2
 800b242:	589a      	ldr	r2, [r3, r2]
 800b244:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800b248:	fb09 440e 	mla	r4, r9, lr, r4
 800b24c:	f8dc 9014 	ldr.w	r9, [ip, #20]
 800b250:	1b49      	subs	r1, r1, r5
 800b252:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800b256:	4463      	add	r3, ip
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	fb03 f000 	mul.w	r0, r3, r0
 800b25e:	fb09 0404 	mla	r4, r9, r4, r0
 800b262:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800b264:	463b      	mov	r3, r7
 800b266:	2f00      	cmp	r7, #0
 800b268:	db0f      	blt.n	800b28a <LCD_LL_DrawBitmap32bpp+0x6e>
 800b26a:	ebc6 01a3 	rsb	r1, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800b26e:	ebae 0306 	sub.w	r3, lr, r6
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	9101      	str	r1, [sp, #4]
 800b276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4633      	mov	r3, r6
 800b27c:	4641      	mov	r1, r8
 800b27e:	4628      	mov	r0, r5
 800b280:	f7ff fd88 	bl	800ad94 <DMA2D_CopyBufferWithAlpha>
}
 800b284:	b005      	add	sp, #20
 800b286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800b28a:	1cfb      	adds	r3, r7, #3
 800b28c:	e7ed      	b.n	800b26a <LCD_LL_DrawBitmap32bpp+0x4e>
 800b28e:	bf00      	nop
 800b290:	2002b0e0 	.word	0x2002b0e0

0800b294 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800b294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b298:	b085      	sub	sp, #20
 800b29a:	4606      	mov	r6, r0
 800b29c:	460d      	mov	r5, r1
 800b29e:	4614      	mov	r4, r2
 800b2a0:	4698      	mov	r8, r3
 800b2a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 800b2a4:	f7ff fe58 	bl	800af58 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800b2a8:	4a16      	ldr	r2, [pc, #88]	; (800b304 <LCD_LL_DrawBitmap8bpp+0x70>)
 800b2aa:	00f1      	lsls	r1, r6, #3
 800b2ac:	eba1 0e06 	sub.w	lr, r1, r6
 800b2b0:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800b2b4:	eb02 0c03 	add.w	ip, r2, r3
 800b2b8:	58d3      	ldr	r3, [r2, r3]
 800b2ba:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800b2be:	fb04 550e 	mla	r5, r4, lr, r5
 800b2c2:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800b2c6:	1b89      	subs	r1, r1, r6
 800b2c8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800b2cc:	4462      	add	r2, ip
 800b2ce:	6892      	ldr	r2, [r2, #8]
 800b2d0:	fb02 f000 	mul.w	r0, r2, r0
 800b2d4:	fb04 0505 	mla	r5, r4, r5, r0
 800b2d8:	195c      	adds	r4, r3, r5
  OffLineSrc = BytesPerLine - xSize;
 800b2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2dc:	eba3 0907 	sub.w	r9, r3, r7
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800b2e0:	ebae 0507 	sub.w	r5, lr, r7
  PixelFormat = GetPixelformat(LayerIndex);
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff fcb5 	bl	800ac54 <GetPixelformat>
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 800b2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	9701      	str	r7, [sp, #4]
 800b2f0:	9000      	str	r0, [sp, #0]
 800b2f2:	462b      	mov	r3, r5
 800b2f4:	464a      	mov	r2, r9
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	f7ff fea1 	bl	800b040 <DMA2D_DrawBitmapL8>
}
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b304:	2002b0e0 	.word	0x2002b0e0

0800b308 <LCD_LL_FillRect>:
{
 800b308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	4606      	mov	r6, r0
 800b310:	460c      	mov	r4, r1
 800b312:	4690      	mov	r8, r2
 800b314:	461d      	mov	r5, r3
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800b316:	f011 f9b1 	bl	801c67c <GUI_GetDrawMode>
 800b31a:	2801      	cmp	r0, #1
 800b31c:	d02e      	beq.n	800b37c <LCD_LL_FillRect+0x74>
    xSize = x1 - x0 + 1;
 800b31e:	1b2d      	subs	r5, r5, r4
 800b320:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 800b322:	9b08      	ldr	r3, [sp, #32]
 800b324:	eba3 0708 	sub.w	r7, r3, r8
 800b328:	3701      	adds	r7, #1
    BufferSize = GetBufferSize(LayerIndex);
 800b32a:	4630      	mov	r0, r6
 800b32c:	f7ff fe14 	bl	800af58 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800b330:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <LCD_LL_FillRect+0x98>)
 800b332:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b336:	ebae 0106 	sub.w	r1, lr, r6
 800b33a:	008a      	lsls	r2, r1, #2
 800b33c:	eb03 0c02 	add.w	ip, r3, r2
 800b340:	5899      	ldr	r1, [r3, r2]
 800b342:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800b346:	fb02 4408 	mla	r4, r2, r8, r4
 800b34a:	f8dc 8014 	ldr.w	r8, [ip, #20]
 800b34e:	ebae 0e06 	sub.w	lr, lr, r6
 800b352:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 800b356:	4463      	add	r3, ip
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	fb03 f000 	mul.w	r0, r3, r0
 800b35e:	fb08 0404 	mla	r4, r8, r4, r0
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800b362:	1b52      	subs	r2, r2, r5
 800b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	9200      	str	r2, [sp, #0]
 800b36a:	463b      	mov	r3, r7
 800b36c:	462a      	mov	r2, r5
 800b36e:	4421      	add	r1, r4
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fd3f 	bl	800adf4 <DMA2D_FillBuffer>
}
 800b376:	b002      	add	sp, #8
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800b37c:	2200      	movs	r2, #0
 800b37e:	2119      	movs	r1, #25
 800b380:	4630      	mov	r0, r6
 800b382:	f00e f92d 	bl	80195e0 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 800b386:	9b08      	ldr	r3, [sp, #32]
 800b388:	462a      	mov	r2, r5
 800b38a:	4641      	mov	r1, r8
 800b38c:	4620      	mov	r0, r4
 800b38e:	f00e fb9d 	bl	8019acc <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800b392:	4a04      	ldr	r2, [pc, #16]	; (800b3a4 <LCD_LL_FillRect+0x9c>)
 800b394:	2119      	movs	r1, #25
 800b396:	4630      	mov	r0, r6
 800b398:	f00e f922 	bl	80195e0 <LCD_SetDevFunc>
 800b39c:	e7eb      	b.n	800b376 <LCD_LL_FillRect+0x6e>
 800b39e:	bf00      	nop
 800b3a0:	2002b0e0 	.word	0x2002b0e0
 800b3a4:	0800b309 	.word	0x0800b309

0800b3a8 <DMA2D_Init>:
{
 800b3a8:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 800b3aa:	480b      	ldr	r0, [pc, #44]	; (800b3d8 <DMA2D_Init+0x30>)
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <DMA2D_Init+0x34>)
 800b3ae:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800b3b0:	f7f6 fc86 	bl	8001cc0 <HAL_DMA2D_Init>
 800b3b4:	b928      	cbnz	r0, 800b3c2 <DMA2D_Init+0x1a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4807      	ldr	r0, [pc, #28]	; (800b3d8 <DMA2D_Init+0x30>)
 800b3ba:	f7f6 fd6b 	bl	8001e94 <HAL_DMA2D_ConfigLayer>
 800b3be:	b928      	cbnz	r0, 800b3cc <DMA2D_Init+0x24>
 800b3c0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800b3c2:	21d5      	movs	r1, #213	; 0xd5
 800b3c4:	4806      	ldr	r0, [pc, #24]	; (800b3e0 <DMA2D_Init+0x38>)
 800b3c6:	f000 ff89 	bl	800c2dc <_Error_Handler>
 800b3ca:	e7f4      	b.n	800b3b6 <DMA2D_Init+0xe>
    _Error_Handler(__FILE__, __LINE__);
 800b3cc:	21da      	movs	r1, #218	; 0xda
 800b3ce:	4804      	ldr	r0, [pc, #16]	; (800b3e0 <DMA2D_Init+0x38>)
 800b3d0:	f000 ff84 	bl	800c2dc <_Error_Handler>
}
 800b3d4:	e7f4      	b.n	800b3c0 <DMA2D_Init+0x18>
 800b3d6:	bf00      	nop
 800b3d8:	2002b4b8 	.word	0x2002b4b8
 800b3dc:	0800ad39 	.word	0x0800ad39
 800b3e0:	080267c8 	.word	0x080267c8

0800b3e4 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4950      	ldr	r1, [pc, #320]	; (800b52c <LCD_X_Config+0x148>)
 800b3ec:	4850      	ldr	r0, [pc, #320]	; (800b530 <LCD_X_Config+0x14c>)
 800b3ee:	f010 fd79 	bl	801bee4 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f00e f97e 	bl	80196f4 <LCD_GetSwapXYEx>
 800b3f8:	b350      	cbz	r0, 800b450 <LCD_X_Config+0x6c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 800b3fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3fe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800b402:	2000      	movs	r0, #0
 800b404:	f00e f89e 	bl	8019544 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800b408:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b40c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800b410:	2000      	movs	r0, #0
 800b412:	f00e f87d 	bl	8019510 <LCD_SetVSizeEx>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 800b416:	2301      	movs	r3, #1
 800b418:	2200      	movs	r2, #0
 800b41a:	4944      	ldr	r1, [pc, #272]	; (800b52c <LCD_X_Config+0x148>)
 800b41c:	4844      	ldr	r0, [pc, #272]	; (800b530 <LCD_X_Config+0x14c>)
 800b41e:	f010 fd61 	bl	801bee4 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 800b422:	2001      	movs	r0, #1
 800b424:	f00e f966 	bl	80196f4 <LCD_GetSwapXYEx>
 800b428:	b308      	cbz	r0, 800b46e <LCD_X_Config+0x8a>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 800b42a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b42e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800b432:	2001      	movs	r0, #1
 800b434:	f00e f886 	bl	8019544 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800b438:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b43c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800b440:	2001      	movs	r0, #1
 800b442:	f00e f865 	bl	8019510 <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800b446:	4b3b      	ldr	r3, [pc, #236]	; (800b534 <LCD_X_Config+0x150>)
 800b448:	2400      	movs	r4, #0
 800b44a:	601c      	str	r4, [r3, #0]

#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 800b44c:	61dc      	str	r4, [r3, #28]
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800b44e:	e051      	b.n	800b4f4 <LCD_X_Config+0x110>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800b450:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b454:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b458:	2000      	movs	r0, #0
 800b45a:	f00e f873 	bl	8019544 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800b45e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b462:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b466:	2000      	movs	r0, #0
 800b468:	f00e f852 	bl	8019510 <LCD_SetVSizeEx>
 800b46c:	e7d3      	b.n	800b416 <LCD_X_Config+0x32>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 800b46e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b472:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b476:	2001      	movs	r0, #1
 800b478:	f00e f864 	bl	8019544 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800b47c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b480:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b484:	2001      	movs	r0, #1
 800b486:	f00e f843 	bl	8019510 <LCD_SetVSizeEx>
 800b48a:	e7dc      	b.n	800b446 <LCD_X_Config+0x62>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800b48c:	4b2a      	ldr	r3, [pc, #168]	; (800b538 <LCD_X_Config+0x154>)
 800b48e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800b492:	4f28      	ldr	r7, [pc, #160]	; (800b534 <LCD_X_Config+0x150>)
 800b494:	00e3      	lsls	r3, r4, #3
 800b496:	1b1b      	subs	r3, r3, r4
 800b498:	009d      	lsls	r5, r3, #2
 800b49a:	197e      	adds	r6, r7, r5
 800b49c:	61b2      	str	r2, [r6, #24]

    layer_prop[i].pending_buffer = -1;
 800b49e:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a2:	6073      	str	r3, [r6, #4]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f00e f8ed 	bl	8019684 <LCD_GetBitsPerPixelEx>
 800b4aa:	10c0      	asrs	r0, r0, #3
 800b4ac:	6170      	str	r0, [r6, #20]
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 800b4ae:	4a23      	ldr	r2, [pc, #140]	; (800b53c <LCD_X_Config+0x158>)
 800b4b0:	2121      	movs	r1, #33	; 0x21
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f00e f894 	bl	80195e0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800b4b8:	4a21      	ldr	r2, [pc, #132]	; (800b540 <LCD_X_Config+0x15c>)
 800b4ba:	2123      	movs	r1, #35	; 0x23
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f00e f88f 	bl	80195e0 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800b4c2:	4a20      	ldr	r2, [pc, #128]	; (800b544 <LCD_X_Config+0x160>)
 800b4c4:	2119      	movs	r1, #25
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f00e f88a 	bl	80195e0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 800b4cc:	4a1e      	ldr	r2, [pc, #120]	; (800b548 <LCD_X_Config+0x164>)
 800b4ce:	2125      	movs	r1, #37	; 0x25
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f00e f885 	bl	80195e0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800b4d6:	4a1d      	ldr	r2, [pc, #116]	; (800b54c <LCD_X_Config+0x168>)
 800b4d8:	2124      	movs	r1, #36	; 0x24
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f00e f880 	bl	80195e0 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 800b4e0:	4a1b      	ldr	r2, [pc, #108]	; (800b550 <LCD_X_Config+0x16c>)
 800b4e2:	2128      	movs	r1, #40	; 0x28
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f00e f87b 	bl	80195e0 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 800b4ea:	5979      	ldr	r1, [r7, r5]
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f00d fff7 	bl	80194e0 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800b4f2:	3401      	adds	r4, #1
 800b4f4:	2c01      	cmp	r4, #1
 800b4f6:	d9c9      	bls.n	800b48c <LCD_X_Config+0xa8>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 800b4f8:	4916      	ldr	r1, [pc, #88]	; (800b554 <LCD_X_Config+0x170>)
 800b4fa:	4817      	ldr	r0, [pc, #92]	; (800b558 <LCD_X_Config+0x174>)
 800b4fc:	f013 f85a 	bl	801e5b4 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 800b500:	4916      	ldr	r1, [pc, #88]	; (800b55c <LCD_X_Config+0x178>)
 800b502:	4817      	ldr	r0, [pc, #92]	; (800b560 <LCD_X_Config+0x17c>)
 800b504:	f012 fe04 	bl	801e110 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 800b508:	4916      	ldr	r1, [pc, #88]	; (800b564 <LCD_X_Config+0x180>)
 800b50a:	4817      	ldr	r0, [pc, #92]	; (800b568 <LCD_X_Config+0x184>)
 800b50c:	f012 ffc0 	bl	801e490 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 800b510:	4916      	ldr	r1, [pc, #88]	; (800b56c <LCD_X_Config+0x188>)
 800b512:	4817      	ldr	r0, [pc, #92]	; (800b570 <LCD_X_Config+0x18c>)
 800b514:	f012 fd66 	bl	801dfe4 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 800b518:	4916      	ldr	r1, [pc, #88]	; (800b574 <LCD_X_Config+0x190>)
 800b51a:	4817      	ldr	r0, [pc, #92]	; (800b578 <LCD_X_Config+0x194>)
 800b51c:	f012 ff10 	bl	801e340 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 800b520:	4916      	ldr	r1, [pc, #88]	; (800b57c <LCD_X_Config+0x198>)
 800b522:	4817      	ldr	r0, [pc, #92]	; (800b580 <LCD_X_Config+0x19c>)
 800b524:	f00f fbe8 	bl	801acf8 <GUI_SetFuncDrawAlpha>
 800b528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08029ca8 	.word	0x08029ca8
 800b530:	08029af0 	.word	0x08029af0
 800b534:	2002b0e0 	.word	0x2002b0e0
 800b538:	080267ec 	.word	0x080267ec
 800b53c:	0800af85 	.word	0x0800af85
 800b540:	0800afcd 	.word	0x0800afcd
 800b544:	0800b309 	.word	0x0800b309
 800b548:	0800b295 	.word	0x0800b295
 800b54c:	0800b1a5 	.word	0x0800b1a5
 800b550:	0800b21d 	.word	0x0800b21d
 800b554:	0800aee5 	.word	0x0800aee5
 800b558:	0800af49 	.word	0x0800af49
 800b55c:	0800aed5 	.word	0x0800aed5
 800b560:	0800af39 	.word	0x0800af39
 800b564:	0800aec5 	.word	0x0800aec5
 800b568:	0800af29 	.word	0x0800af29
 800b56c:	0800aeb5 	.word	0x0800aeb5
 800b570:	0800af19 	.word	0x0800af19
 800b574:	0800aea5 	.word	0x0800aea5
 800b578:	0800af09 	.word	0x0800af09
 800b57c:	0800b0ed 	.word	0x0800b0ed
 800b580:	0800b171 	.word	0x0800b171

0800b584 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	4604      	mov	r4, r0
 800b58a:	4615      	mov	r5, r2
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 800b58c:	3903      	subs	r1, #3
 800b58e:	290b      	cmp	r1, #11
 800b590:	f200 809f 	bhi.w	800b6d2 <LCD_X_DisplayDriver+0x14e>
 800b594:	e8df f001 	tbb	[pc, r1]
 800b598:	342c2406 	.word	0x342c2406
 800b59c:	793c5c64 	.word	0x793c5c64
 800b5a0:	1b8d809d 	.word	0x1b8d809d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 800b5a4:	494c      	ldr	r1, [pc, #304]	; (800b6d8 <LCD_X_DisplayDriver+0x154>)
 800b5a6:	00c3      	lsls	r3, r0, #3
 800b5a8:	1a1b      	subs	r3, r3, r0
 800b5aa:	009a      	lsls	r2, r3, #2
 800b5ac:	1888      	adds	r0, r1, r2
 800b5ae:	588e      	ldr	r6, [r1, r2]
 800b5b0:	6869      	ldr	r1, [r5, #4]
 800b5b2:	68c3      	ldr	r3, [r0, #12]
 800b5b4:	fb03 f301 	mul.w	r3, r3, r1
 800b5b8:	6941      	ldr	r1, [r0, #20]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	fb01 6103 	mla	r1, r1, r3, r6
 800b5c0:	4846      	ldr	r0, [pc, #280]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b5c2:	f7f7 f8c4 	bl	800274e <HAL_LTDC_SetAddress>
 int r = 0;
 800b5c6:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	b002      	add	sp, #8
 800b5cc:	bd70      	pop	{r4, r5, r6, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800b5ce:	6811      	ldr	r1, [r2, #0]
 800b5d0:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 800b5d4:	00a2      	lsls	r2, r4, #2
 800b5d6:	4b40      	ldr	r3, [pc, #256]	; (800b6d8 <LCD_X_DisplayDriver+0x154>)
 800b5d8:	4413      	add	r3, r2
 800b5da:	6059      	str	r1, [r3, #4]
 int r = 0;
 800b5dc:	2500      	movs	r5, #0
    break;
 800b5de:	e7f3      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	483d      	ldr	r0, [pc, #244]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b5e8:	f7f6 ffec 	bl	80025c4 <HAL_LTDC_ConfigCLUT>
 int r = 0;
 800b5ec:	2500      	movs	r5, #0
    break;
 800b5ee:	e7eb      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_ENABLE(&hltdc);
 800b5f0:	4b3a      	ldr	r3, [pc, #232]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	6993      	ldr	r3, [r2, #24]
 800b5f6:	f043 0301 	orr.w	r3, r3, #1
 800b5fa:	6193      	str	r3, [r2, #24]
 int r = 0;
 800b5fc:	2500      	movs	r5, #0
    break;
 800b5fe:	e7e3      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_DISABLE(&hltdc);
 800b600:	4b36      	ldr	r3, [pc, #216]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	6993      	ldr	r3, [r2, #24]
 800b606:	f023 0301 	bic.w	r3, r3, #1
 800b60a:	6193      	str	r3, [r2, #24]
 int r = 0;
 800b60c:	2500      	movs	r5, #0
    break;
 800b60e:	e7db      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 800b610:	6813      	ldr	r3, [r2, #0]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d011      	beq.n	800b63a <LCD_X_DisplayDriver+0xb6>
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 800b616:	4b31      	ldr	r3, [pc, #196]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 800b61e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b622:	f023 0301 	bic.w	r3, r3, #1
 800b626:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 800b62a:	4b2c      	ldr	r3, [pc, #176]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b630:	f043 0301 	orr.w	r3, r3, #1
 800b634:	6253      	str	r3, [r2, #36]	; 0x24
 int r = 0;
 800b636:	2500      	movs	r5, #0
    break;
 800b638:	e7c6      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 800b63a:	4b28      	ldr	r3, [pc, #160]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 800b642:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b646:	f043 0301 	orr.w	r3, r3, #1
 800b64a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b64e:	e7ec      	b.n	800b62a <LCD_X_DisplayDriver+0xa6>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 800b650:	4603      	mov	r3, r0
 800b652:	6852      	ldr	r2, [r2, #4]
 800b654:	6829      	ldr	r1, [r5, #0]
 800b656:	4821      	ldr	r0, [pc, #132]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b658:	f7f7 f82e 	bl	80026b8 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 800b65c:	2500      	movs	r5, #0
    break;
 800b65e:	e7b3      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800b660:	466a      	mov	r2, sp
 800b662:	a901      	add	r1, sp, #4
 800b664:	f00f ff76 	bl	801b554 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800b668:	6828      	ldr	r0, [r5, #0]
 800b66a:	00e2      	lsls	r2, r4, #3
 800b66c:	1b12      	subs	r2, r2, r4
 800b66e:	0091      	lsls	r1, r2, #2
 800b670:	4b19      	ldr	r3, [pc, #100]	; (800b6d8 <LCD_X_DisplayDriver+0x154>)
 800b672:	440b      	add	r3, r1
 800b674:	60d8      	str	r0, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800b676:	686a      	ldr	r2, [r5, #4]
 800b678:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 800b67a:	4623      	mov	r3, r4
 800b67c:	9a00      	ldr	r2, [sp, #0]
 800b67e:	9901      	ldr	r1, [sp, #4]
 800b680:	4816      	ldr	r0, [pc, #88]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b682:	f7f7 f819 	bl	80026b8 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 800b686:	2500      	movs	r5, #0
    break;
 800b688:	e79e      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800b68a:	4602      	mov	r2, r0
 800b68c:	6829      	ldr	r1, [r5, #0]
 800b68e:	4813      	ldr	r0, [pc, #76]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b690:	f7f7 f83c 	bl	800270c <HAL_LTDC_SetAlpha>
 int r = 0;
 800b694:	2500      	movs	r5, #0
    break;
 800b696:	e797      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800b698:	6815      	ldr	r5, [r2, #0]
 800b69a:	b12d      	cbz	r5, 800b6a8 <LCD_X_DisplayDriver+0x124>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800b69c:	4601      	mov	r1, r0
 800b69e:	480f      	ldr	r0, [pc, #60]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b6a0:	f7f6 ffce 	bl	8002640 <HAL_LTDC_EnableColorKeying>
 int r = 0;
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	e78f      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	480c      	ldr	r0, [pc, #48]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b6ac:	f7f6 ffe6 	bl	800267c <HAL_LTDC_DisableColorKeying>
 800b6b0:	e78a      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800b6b8:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800b6bc:	4311      	orrs	r1, r2
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	4319      	orrs	r1, r3
 800b6c8:	4804      	ldr	r0, [pc, #16]	; (800b6dc <LCD_X_DisplayDriver+0x158>)
 800b6ca:	f7f6 ff57 	bl	800257c <HAL_LTDC_ConfigColorKeying>
 int r = 0;
 800b6ce:	2500      	movs	r5, #0
    break;
 800b6d0:	e77a      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
    r = -1;
 800b6d2:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 800b6d6:	e777      	b.n	800b5c8 <LCD_X_DisplayDriver+0x44>
 800b6d8:	2002b0e0 	.word	0x2002b0e0
 800b6dc:	2002b410 	.word	0x2002b410

0800b6e0 <GRAPHICS_HW_Init>:
  
   OS_TimeMS++;
} 

void GRAPHICS_HW_Init(void)
{ 
 800b6e0:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 800b6e2:	f7ff f963 	bl	800a9ac <MX_FMC_Init>
  MX_SDRAM_InitEx();
 800b6e6:	f7ff f98f 	bl	800aa08 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 800b6ea:	f7ff f8e5 	bl	800a8b8 <MX_LCD_Init>
  MX_DMA2D_Init();
 800b6ee:	f7ff f9d9 	bl	800aaa4 <MX_DMA2D_Init>
  DMA2D_Init();
 800b6f2:	f7ff fe59 	bl	800b3a8 <DMA2D_Init>
 800b6f6:	bd08      	pop	{r3, pc}

0800b6f8 <GRAPHICS_Init>:
 
}

void GRAPHICS_Init(void)
{
 800b6f8:	b508      	push	{r3, lr}
  /* Initialize the GUI */
  GUI_Init();
 800b6fa:	f010 fda7 	bl	801c24c <GUI_Init>
 800b6fe:	bd08      	pop	{r3, pc}

0800b700 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 800b700:	b500      	push	{lr}
 800b702:	b083      	sub	sp, #12
 800b704:	a902      	add	r1, sp, #8
 800b706:	f801 0d01 	strb.w	r0, [r1, #-1]!
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 800b70a:	f04f 33ff 	mov.w	r3, #4294967295
 800b70e:	2201      	movs	r2, #1
 800b710:	4803      	ldr	r0, [pc, #12]	; (800b720 <String_PutByte+0x20>)
 800b712:	f7f8 ffad 	bl	8004670 <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
}
 800b716:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b71a:	b003      	add	sp, #12
 800b71c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b720:	2002bb10 	.word	0x2002bb10

0800b724 <String_PutStringN>:
{
 800b724:	b538      	push	{r3, r4, r5, lr}
    if ( Length > 0 )
 800b726:	460c      	mov	r4, r1
 800b728:	b939      	cbnz	r1, 800b73a <String_PutStringN+0x16>
 800b72a:	e008      	b.n	800b73e <String_PutStringN+0x1a>
                String_PutByte( (uint8_t)*(Buffer++) );
 800b72c:	1c45      	adds	r5, r0, #1
 800b72e:	7800      	ldrb	r0, [r0, #0]
 800b730:	f7ff ffe6 	bl	800b700 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 800b734:	3c01      	subs	r4, #1
 800b736:	b2a4      	uxth	r4, r4
                String_PutByte( (uint8_t)*(Buffer++) );
 800b738:	4628      	mov	r0, r5
            for ( ; Length > 0 ; Length-- )
 800b73a:	2c00      	cmp	r4, #0
 800b73c:	d1f6      	bne.n	800b72c <String_PutStringN+0x8>
}
 800b73e:	4620      	mov	r0, r4
 800b740:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b744 <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 800b744:	b500      	push	{lr}
 800b746:	b083      	sub	sp, #12
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 800b748:	f04f 33ff 	mov.w	r3, #4294967295
 800b74c:	2201      	movs	r2, #1
 800b74e:	f10d 0107 	add.w	r1, sp, #7
 800b752:	4804      	ldr	r0, [pc, #16]	; (800b764 <String_GetByte+0x20>)
 800b754:	f7f8 fff2 	bl	800473c <HAL_UART_Receive>
    return Byte;
}
 800b758:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b75c:	b003      	add	sp, #12
 800b75e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b762:	bf00      	nop
 800b764:	2002bb10 	.word	0x2002bb10

0800b768 <String_GetString>:
{
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	4607      	mov	r7, r0
    Ptr = Buffer;
 800b76c:	4604      	mov	r4, r0
    uint16_t Byte = 1;
 800b76e:	2601      	movs	r6, #1
    uint16_t Length = 0;
 800b770:	2500      	movs	r5, #0
    while ( Byte != 0 )
 800b772:	e029      	b.n	800b7c8 <String_GetString+0x60>
                *Ptr = '\0';
 800b774:	2600      	movs	r6, #0
 800b776:	7026      	strb	r6, [r4, #0]
                break;
 800b778:	e026      	b.n	800b7c8 <String_GetString+0x60>
                if (Ptr > Buffer )
 800b77a:	42bc      	cmp	r4, r7
 800b77c:	d924      	bls.n	800b7c8 <String_GetString+0x60>
                    Ptr--;
 800b77e:	3c01      	subs	r4, #1
                    Length--;
 800b780:	3d01      	subs	r5, #1
 800b782:	b2ad      	uxth	r5, r5
                    String_PutStringN("\b \b", 3);
 800b784:	2103      	movs	r1, #3
 800b786:	4831      	ldr	r0, [pc, #196]	; (800b84c <String_GetString+0xe4>)
 800b788:	f7ff ffcc 	bl	800b724 <String_PutStringN>
 800b78c:	e01c      	b.n	800b7c8 <String_GetString+0x60>
                String_PutStringN( "\n\r", 2);
 800b78e:	2102      	movs	r1, #2
 800b790:	482f      	ldr	r0, [pc, #188]	; (800b850 <String_GetString+0xe8>)
 800b792:	f7ff ffc7 	bl	800b724 <String_PutStringN>
                String_PutStringN( (char *)Buffer, Length );
 800b796:	4629      	mov	r1, r5
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff ffc3 	bl	800b724 <String_PutStringN>
                break;
 800b79e:	e013      	b.n	800b7c8 <String_GetString+0x60>
                    String_PutStringN("\b \b", 3);
 800b7a0:	2103      	movs	r1, #3
 800b7a2:	482a      	ldr	r0, [pc, #168]	; (800b84c <String_GetString+0xe4>)
 800b7a4:	f7ff ffbe 	bl	800b724 <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 800b7a8:	3401      	adds	r4, #1
 800b7aa:	b2a4      	uxth	r4, r4
 800b7ac:	42a5      	cmp	r5, r4
 800b7ae:	d8f7      	bhi.n	800b7a0 <String_GetString+0x38>
                Ptr = Buffer;
 800b7b0:	463c      	mov	r4, r7
                Length = 0;
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	e008      	b.n	800b7c8 <String_GetString+0x60>
        switch ( Byte )
 800b7b6:	2400      	movs	r4, #0
 800b7b8:	e7f8      	b.n	800b7ac <String_GetString+0x44>
                *(Ptr++) = Byte;
 800b7ba:	7020      	strb	r0, [r4, #0]
                Length++;
 800b7bc:	3501      	adds	r5, #1
 800b7be:	b2ad      	uxth	r5, r5
                *(Ptr++) = Byte;
 800b7c0:	3401      	adds	r4, #1
                break;
 800b7c2:	e001      	b.n	800b7c8 <String_GetString+0x60>
                Byte = 0;
 800b7c4:	2600      	movs	r6, #0
                Length = 0;
 800b7c6:	4635      	mov	r5, r6
    while ( Byte != 0 )
 800b7c8:	2e00      	cmp	r6, #0
 800b7ca:	d03d      	beq.n	800b848 <String_GetString+0xe0>
        Byte = String_GetByte() & ASCII_MASK;
 800b7cc:	f7ff ffba 	bl	800b744 <String_GetByte>
 800b7d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b7d4:	b286      	uxth	r6, r0
        switch ( Byte )
 800b7d6:	1ec3      	subs	r3, r0, #3
 800b7d8:	2b18      	cmp	r3, #24
 800b7da:	d8ee      	bhi.n	800b7ba <String_GetString+0x52>
 800b7dc:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <String_GetString+0x7c>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b7c5 	.word	0x0800b7c5
 800b7e8:	0800b7bb 	.word	0x0800b7bb
 800b7ec:	0800b7bb 	.word	0x0800b7bb
 800b7f0:	0800b7bb 	.word	0x0800b7bb
 800b7f4:	0800b7bb 	.word	0x0800b7bb
 800b7f8:	0800b77b 	.word	0x0800b77b
 800b7fc:	0800b7bb 	.word	0x0800b7bb
 800b800:	0800b775 	.word	0x0800b775
 800b804:	0800b7bb 	.word	0x0800b7bb
 800b808:	0800b7bb 	.word	0x0800b7bb
 800b80c:	0800b775 	.word	0x0800b775
 800b810:	0800b7bb 	.word	0x0800b7bb
 800b814:	0800b7bb 	.word	0x0800b7bb
 800b818:	0800b7bb 	.word	0x0800b7bb
 800b81c:	0800b7bb 	.word	0x0800b7bb
 800b820:	0800b78f 	.word	0x0800b78f
 800b824:	0800b7bb 	.word	0x0800b7bb
 800b828:	0800b7bb 	.word	0x0800b7bb
 800b82c:	0800b7b7 	.word	0x0800b7b7
 800b830:	0800b7bb 	.word	0x0800b7bb
 800b834:	0800b7b7 	.word	0x0800b7b7
 800b838:	0800b7bb 	.word	0x0800b7bb
 800b83c:	0800b7bb 	.word	0x0800b7bb
 800b840:	0800b7bb 	.word	0x0800b7bb
 800b844:	0800b7b7 	.word	0x0800b7b7
}
 800b848:	4628      	mov	r0, r5
 800b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b84c:	080267f4 	.word	0x080267f4
 800b850:	080267f8 	.word	0x080267f8

0800b854 <BSP_SDRAM_Init>:
  uint8_t sdramstatus = SDRAM_OK;
  
  /* place for custom code */
  
  return sdramstatus;
}
 800b854:	2000      	movs	r0, #0
 800b856:	4770      	bx	lr

0800b858 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800b858:	b508      	push	{r3, lr}
  uint8_t sdramstatus = SDRAM_OK;
  
  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800b85a:	4613      	mov	r3, r2
 800b85c:	460a      	mov	r2, r1
 800b85e:	4601      	mov	r1, r0
 800b860:	4802      	ldr	r0, [pc, #8]	; (800b86c <BSP_SDRAM_ReadData+0x14>)
 800b862:	f7f8 fbac 	bl	8003fbe <HAL_SDRAM_Read_32b>
 800b866:	b100      	cbz	r0, 800b86a <BSP_SDRAM_ReadData+0x12>
  {
    sdramstatus = SDRAM_ERROR;
 800b868:	2001      	movs	r0, #1
  }

  return sdramstatus;
}
 800b86a:	bd08      	pop	{r3, pc}
 800b86c:	2002b4f8 	.word	0x2002b4f8

0800b870 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800b870:	b508      	push	{r3, lr}
  uint8_t sdramstatus = SDRAM_OK;
  
  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800b872:	4613      	mov	r3, r2
 800b874:	460a      	mov	r2, r1
 800b876:	4601      	mov	r1, r0
 800b878:	4802      	ldr	r0, [pc, #8]	; (800b884 <BSP_SDRAM_WriteData+0x14>)
 800b87a:	f7f8 fbc5 	bl	8004008 <HAL_SDRAM_Write_32b>
 800b87e:	b100      	cbz	r0, 800b882 <BSP_SDRAM_WriteData+0x12>
  {
    sdramstatus = SDRAM_ERROR;
 800b880:	2001      	movs	r0, #1
  }

  return sdramstatus;
}
 800b882:	bd08      	pop	{r3, pc}
 800b884:	2002b4f8 	.word	0x2002b4f8

0800b888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b888:	b508      	push	{r3, lr}
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 800b88a:	4903      	ldr	r1, [pc, #12]	; (800b898 <MX_FATFS_Init+0x10>)
 800b88c:	4803      	ldr	r0, [pc, #12]	; (800b89c <MX_FATFS_Init+0x14>)
 800b88e:	f7fb ff71 	bl	8007774 <FATFS_LinkDriver>
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <MX_FATFS_Init+0x18>)
 800b894:	7018      	strb	r0, [r3, #0]
 800b896:	bd08      	pop	{r3, pc}
 800b898:	2002b52c 	.word	0x2002b52c
 800b89c:	08026c34 	.word	0x08026c34
 800b8a0:	2002b994 	.word	0x2002b994

0800b8a4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	4770      	bx	lr

0800b8a8 <myPrintf>:
DMA_HandleTypeDef hdma_memtomem_dma2_stream2;
DMA_HandleTypeDef hdma_memtomem_dma2_stream1;
SDRAM_HandleTypeDef hsdram1;

// https://www.experts-exchange.com/questions/29003980/Display-a-Float-Variable-in-C-without-using-the-function-printf.html
char *myPrintf(float source) {
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	b082      	sub	sp, #8
	int iValue, dValue;
	static char Display[20];

	// iValue contains the integer portion of the
	// floating point number.
	iValue = source;
 800b8ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b8b0:	ee17 3a90 	vmov	r3, s15

	// dValue contains the first 2 digits of the fractional part
	//of the floating point number.
	dValue = (source * 100) - (iValue * 100);
 800b8b4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b8ec <myPrintf+0x44>
 800b8b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b8bc:	2264      	movs	r2, #100	; 0x64
 800b8be:	fb02 f203 	mul.w	r2, r2, r3
 800b8c2:	ee00 2a10 	vmov	s0, r2
 800b8c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b8ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b8ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0

	snprintf(Display, 20, "%d%c%d", iValue, '.', dValue);
 800b8d2:	4c07      	ldr	r4, [pc, #28]	; (800b8f0 <myPrintf+0x48>)
 800b8d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b8d8:	222e      	movs	r2, #46	; 0x2e
 800b8da:	9200      	str	r2, [sp, #0]
 800b8dc:	4a05      	ldr	r2, [pc, #20]	; (800b8f4 <myPrintf+0x4c>)
 800b8de:	2114      	movs	r1, #20
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f001 fc29 	bl	800d138 <snprintf>

	return Display;
}
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	b002      	add	sp, #8
 800b8ea:	bd10      	pop	{r4, pc}
 800b8ec:	42c80000 	.word	0x42c80000
 800b8f0:	2002b118 	.word	0x2002b118
 800b8f4:	08026918 	.word	0x08026918

0800b8f8 <initArray>:

void initArray(Array *a, size_t initialSize) {
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	460d      	mov	r5, r1
	a->array = (uint16_t *) pvPortMalloc(initialSize * sizeof(uint16_t));
 800b8fe:	0048      	lsls	r0, r1, #1
 800b900:	f7fc faf2 	bl	8007ee8 <pvPortMalloc>
 800b904:	6020      	str	r0, [r4, #0]
	a->used = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	6063      	str	r3, [r4, #4]
	a->size = initialSize;
 800b90a:	60a5      	str	r5, [r4, #8]
 800b90c:	bd38      	pop	{r3, r4, r5, pc}

0800b90e <insertArray>:
}

void insertArray(Array *a, uint32_t newsize) {
 800b90e:	b510      	push	{r4, lr}
 800b910:	4604      	mov	r4, r0
	a->size = newsize;
 800b912:	6081      	str	r1, [r0, #8]
	vPortFree(a->array);
 800b914:	6800      	ldr	r0, [r0, #0]
 800b916:	f7fc fb71 	bl	8007ffc <vPortFree>
	a->array = (uint16_t *) pvPortMalloc(a->size * sizeof(uint16_t));
 800b91a:	68a0      	ldr	r0, [r4, #8]
 800b91c:	0040      	lsls	r0, r0, #1
 800b91e:	f7fc fae3 	bl	8007ee8 <pvPortMalloc>
 800b922:	6020      	str	r0, [r4, #0]
	a->used = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	bd10      	pop	{r4, pc}

0800b92a <freeArray>:
}

void freeArray(Array *a) {
 800b92a:	b510      	push	{r4, lr}
 800b92c:	4604      	mov	r4, r0
	vPortFree(a->array);
 800b92e:	6800      	ldr	r0, [r0, #0]
 800b930:	f7fc fb64 	bl	8007ffc <vPortFree>
	a->array = NULL;
 800b934:	2300      	movs	r3, #0
 800b936:	6023      	str	r3, [r4, #0]
	a->used = a->size = 0;
 800b938:	60a3      	str	r3, [r4, #8]
 800b93a:	6063      	str	r3, [r4, #4]
 800b93c:	bd10      	pop	{r4, pc}
	...

0800b940 <string_parse>:
}

// mod from
// https://stackoverflow.com/questions/13230253/how-do-i-parse-a-string-in-c
char * string_parse(char * parse_string, uint8_t idx) {
 800b940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b942:	b089      	sub	sp, #36	; 0x24
 800b944:	460f      	mov	r7, r1

	char *work_string;
	uint8_t stringArray[30];
	static uint8_t wordArray[30];
	uint8_t i = 0;
 800b946:	2300      	movs	r3, #0

	// Let's make a copy for work
	work_string = parse_string;

	// And move it to array
	while (*work_string != '\0') {
 800b948:	e006      	b.n	800b958 <string_parse+0x18>
		stringArray[i] = (int) *work_string;
 800b94a:	a908      	add	r1, sp, #32
 800b94c:	4419      	add	r1, r3
 800b94e:	f801 2c20 	strb.w	r2, [r1, #-32]
		i++;
 800b952:	3301      	adds	r3, #1
 800b954:	b2db      	uxtb	r3, r3
		work_string++;
 800b956:	3001      	adds	r0, #1
	while (*work_string != '\0') {
 800b958:	7802      	ldrb	r2, [r0, #0]
 800b95a:	2a00      	cmp	r2, #0
 800b95c:	d1f5      	bne.n	800b94a <string_parse+0xa>
	}

	// Terminate
	stringArray[i] = '\0';
 800b95e:	aa08      	add	r2, sp, #32
 800b960:	4413      	add	r3, r2
 800b962:	2600      	movs	r6, #0
 800b964:	f803 6c20 	strb.w	r6, [r3, #-32]
	uint8_t wordCounter = 0;
 800b968:	4634      	mov	r4, r6

	// Main function.
	counter = 0;
	while (stringArray[wordCounter] != '\0') {
 800b96a:	e026      	b.n	800b9ba <string_parse+0x7a>
		// Puts first word into temporary wordArray.
		while ((stringArray[wordCounter] != ' ')
				&& (stringArray[wordCounter] != '\0')) {
			wordArray[counter++] = stringArray[wordCounter++];
 800b96c:	1c5a      	adds	r2, r3, #1
 800b96e:	3401      	adds	r4, #1
 800b970:	b2e4      	uxtb	r4, r4
 800b972:	4918      	ldr	r1, [pc, #96]	; (800b9d4 <string_parse+0x94>)
 800b974:	54cd      	strb	r5, [r1, r3]
 800b976:	b2d3      	uxtb	r3, r2
		while ((stringArray[wordCounter] != ' ')
 800b978:	aa08      	add	r2, sp, #32
 800b97a:	4422      	add	r2, r4
 800b97c:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 800b980:	2d20      	cmp	r5, #32
 800b982:	bf18      	it	ne
 800b984:	2d00      	cmpne	r5, #0
 800b986:	d1f1      	bne.n	800b96c <string_parse+0x2c>
		}
		wordArray[counter] = '\0';
 800b988:	2100      	movs	r1, #0
 800b98a:	4a12      	ldr	r2, [pc, #72]	; (800b9d4 <string_parse+0x94>)
 800b98c:	54d1      	strb	r1, [r2, r3]

		// Return the content of wordArray at requested index.
		if (argCounter == idx) {
 800b98e:	42be      	cmp	r6, r7
 800b990:	d01d      	beq.n	800b9ce <string_parse+0x8e>
			return wordArray;
		} else if (argCounter > idx) {
 800b992:	d801      	bhi.n	800b998 <string_parse+0x58>
			wordArray[counter++] = stringArray[wordCounter++];
 800b994:	2300      	movs	r3, #0
 800b996:	e009      	b.n	800b9ac <string_parse+0x6c>
			// Too many arguments
			_Error_Handler(__FILE__, __LINE__);
 800b998:	2175      	movs	r1, #117	; 0x75
 800b99a:	480f      	ldr	r0, [pc, #60]	; (800b9d8 <string_parse+0x98>)
 800b99c:	f000 fc9e 	bl	800c2dc <_Error_Handler>
 800b9a0:	e7f8      	b.n	800b994 <string_parse+0x54>
		}

		//Clears temporary wordArray for new use.
		for (counter = 0; counter < 30; counter++) {
			wordArray[counter] = '\0';
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	4a0b      	ldr	r2, [pc, #44]	; (800b9d4 <string_parse+0x94>)
 800b9a6:	54d1      	strb	r1, [r2, r3]
		for (counter = 0; counter < 30; counter++) {
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b1d      	cmp	r3, #29
 800b9ae:	d9f8      	bls.n	800b9a2 <string_parse+0x62>
		}

		if (stringArray[wordCounter] != '\0') {
 800b9b0:	b10d      	cbz	r5, 800b9b6 <string_parse+0x76>
			wordCounter++;
 800b9b2:	3401      	adds	r4, #1
 800b9b4:	b2e4      	uxtb	r4, r4
		}

		counter = 0;
		argCounter++;
 800b9b6:	3601      	adds	r6, #1
 800b9b8:	b2f6      	uxtb	r6, r6
	while (stringArray[wordCounter] != '\0') {
 800b9ba:	ab08      	add	r3, sp, #32
 800b9bc:	4423      	add	r3, r4
 800b9be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b9c2:	b10b      	cbz	r3, 800b9c8 <string_parse+0x88>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	e7d7      	b.n	800b978 <string_parse+0x38>
	}

	// If we return here. the parse_string had less arguments as requested
	// In that case, return empty string
	return NULL;
 800b9c8:	2000      	movs	r0, #0
}
 800b9ca:	b009      	add	sp, #36	; 0x24
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return wordArray;
 800b9ce:	4801      	ldr	r0, [pc, #4]	; (800b9d4 <string_parse+0x94>)
 800b9d0:	e7fb      	b.n	800b9ca <string_parse+0x8a>
 800b9d2:	bf00      	nop
 800b9d4:	2002b144 	.word	0x2002b144
 800b9d8:	08026934 	.word	0x08026934

0800b9dc <PlotData>:
	}

	return n;
}

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 800b9dc:	b508      	push	{r3, lr}
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 800b9de:	2201      	movs	r2, #1
 800b9e0:	b289      	uxth	r1, r1
 800b9e2:	b280      	uxth	r0, r0
 800b9e4:	f7f5 fb30 	bl	8001048 <BSP_LCD_DrawPixel>
 800b9e8:	bd08      	pop	{r3, pc}
	...

0800b9ec <InitScreen>:
}

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	460c      	mov	r4, r1

	BSP_LCD_Clear(BackGroundColor);
 800b9f2:	f7f5 fb0b 	bl	800100c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f7f5 fade 	bl	8000fb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7f5 facf 	bl	8000fa0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800ba02:	4802      	ldr	r0, [pc, #8]	; (800ba0c <InitScreen+0x20>)
 800ba04:	f7f5 fae6 	bl	8000fd4 <BSP_LCD_SetFont>
 800ba08:	bd38      	pop	{r3, r4, r5, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000000 	.word	0x20000000

0800ba10 <LCDWrite>:
}

void LCDWrite(uint32_t Line, char Str[]) {
 800ba10:	b530      	push	{r4, r5, lr}
 800ba12:	b08f      	sub	sp, #60	; 0x3c
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 800ba18:	f7f5 fc94 	bl	8001344 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	2132      	movs	r1, #50	; 0x32
 800ba20:	a801      	add	r0, sp, #4
 800ba22:	f001 fb89 	bl	800d138 <snprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 800ba26:	a901      	add	r1, sp, #4
 800ba28:	b2a0      	uxth	r0, r4
 800ba2a:	f7f5 fc31 	bl	8001290 <BSP_LCD_DisplayStringAtLine>
}
 800ba2e:	b00f      	add	sp, #60	; 0x3c
 800ba30:	bd30      	pop	{r4, r5, pc}
	...

0800ba34 <CountDown>:

void CountDown(uint32_t millisecs) {
 800ba34:	b510      	push	{r4, lr}
 800ba36:	4604      	mov	r4, r0
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800ba38:	f04f 31ff 	mov.w	r1, #4294967295
 800ba3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ba40:	f7ff ffd4 	bl	800b9ec <InitScreen>

	LCDWrite(5, " ");
 800ba44:	4912      	ldr	r1, [pc, #72]	; (800ba90 <CountDown+0x5c>)
 800ba46:	2005      	movs	r0, #5
 800ba48:	f7ff ffe2 	bl	800ba10 <LCDWrite>
	HAL_Delay(1);
 800ba4c:	2001      	movs	r0, #1
 800ba4e:	f7f5 fde5 	bl	800161c <HAL_Delay>

	LCDWrite(5, "Starting in 3... ");
 800ba52:	4910      	ldr	r1, [pc, #64]	; (800ba94 <CountDown+0x60>)
 800ba54:	2005      	movs	r0, #5
 800ba56:	f7ff ffdb 	bl	800ba10 <LCDWrite>
	HAL_Delay(millisecs);
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7f5 fdde 	bl	800161c <HAL_Delay>

	LCDWrite(5, "Starting in 2... ");
 800ba60:	490d      	ldr	r1, [pc, #52]	; (800ba98 <CountDown+0x64>)
 800ba62:	2005      	movs	r0, #5
 800ba64:	f7ff ffd4 	bl	800ba10 <LCDWrite>
	HAL_Delay(millisecs);
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7f5 fdd7 	bl	800161c <HAL_Delay>

	LCDWrite(5, "Starting in 1... ");
 800ba6e:	490b      	ldr	r1, [pc, #44]	; (800ba9c <CountDown+0x68>)
 800ba70:	2005      	movs	r0, #5
 800ba72:	f7ff ffcd 	bl	800ba10 <LCDWrite>
	HAL_Delay(millisecs);
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7f5 fdd0 	bl	800161c <HAL_Delay>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800ba7c:	4908      	ldr	r1, [pc, #32]	; (800baa0 <CountDown+0x6c>)
 800ba7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ba82:	f7ff ffb3 	bl	800b9ec <InitScreen>
	LCDWrite(5, "GO!");
 800ba86:	4907      	ldr	r1, [pc, #28]	; (800baa4 <CountDown+0x70>)
 800ba88:	2005      	movs	r0, #5
 800ba8a:	f7ff ffc1 	bl	800ba10 <LCDWrite>
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	08026890 	.word	0x08026890
 800ba94:	08026858 	.word	0x08026858
 800ba98:	0802686c 	.word	0x0802686c
 800ba9c:	08026880 	.word	0x08026880
 800baa0:	ffff0000 	.word	0xffff0000
 800baa4:	08026894 	.word	0x08026894

0800baa8 <scan_files>:
}

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	b08c      	sub	sp, #48	; 0x30
 800baac:	4604      	mov	r4, r0
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 800baae:	4601      	mov	r1, r0
 800bab0:	4668      	mov	r0, sp
 800bab2:	f7fb fa18 	bl	8006ee6 <f_opendir>
	if (res == FR_OK) {
 800bab6:	4605      	mov	r5, r0
 800bab8:	b138      	cbz	r0, 800baca <scan_files+0x22>
 800baba:	e028      	b.n	800bb0e <scan_files+0x66>
				res = scan_files(path); /* Enter the directory */
				if (res != FR_OK)
					break;
				path[i] = 0;
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 800babc:	4a15      	ldr	r2, [pc, #84]	; (800bb14 <scan_files+0x6c>)
 800babe:	f852 3b09 	ldr.w	r3, [r2], #9
 800bac2:	4621      	mov	r1, r4
 800bac4:	4814      	ldr	r0, [pc, #80]	; (800bb18 <scan_files+0x70>)
 800bac6:	f016 ffef 	bl	8022aa8 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800baca:	4912      	ldr	r1, [pc, #72]	; (800bb14 <scan_files+0x6c>)
 800bacc:	4668      	mov	r0, sp
 800bace:	f7fb fa6f 	bl	8006fb0 <f_readdir>
			if (res != FR_OK || fno.fname[0] == 0)
 800bad2:	4605      	mov	r5, r0
 800bad4:	b9c0      	cbnz	r0, 800bb08 <scan_files+0x60>
 800bad6:	4b0f      	ldr	r3, [pc, #60]	; (800bb14 <scan_files+0x6c>)
 800bad8:	7a5b      	ldrb	r3, [r3, #9]
 800bada:	b1ab      	cbz	r3, 800bb08 <scan_files+0x60>
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 800badc:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <scan_files+0x6c>)
 800bade:	7a1b      	ldrb	r3, [r3, #8]
 800bae0:	f013 0f10 	tst.w	r3, #16
 800bae4:	d0ea      	beq.n	800babc <scan_files+0x14>
				i = strlen(path);
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7f4 fb9c 	bl	8000224 <strlen>
 800baec:	4606      	mov	r6, r0
				sprintf(&path[i], "/%s", fno.fname);
 800baee:	4a0b      	ldr	r2, [pc, #44]	; (800bb1c <scan_files+0x74>)
 800baf0:	490b      	ldr	r1, [pc, #44]	; (800bb20 <scan_files+0x78>)
 800baf2:	1820      	adds	r0, r4, r0
 800baf4:	f001 f9b9 	bl	800ce6a <sprintf>
				res = scan_files(path); /* Enter the directory */
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7ff ffd5 	bl	800baa8 <scan_files>
				if (res != FR_OK)
 800bafe:	4605      	mov	r5, r0
 800bb00:	b910      	cbnz	r0, 800bb08 <scan_files+0x60>
				path[i] = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	55a3      	strb	r3, [r4, r6]
 800bb06:	e7e0      	b.n	800baca <scan_files+0x22>
			}
		}
		f_closedir(&dir);
 800bb08:	4668      	mov	r0, sp
 800bb0a:	f7fb fa39 	bl	8006f80 <f_closedir>
	}

	return res;
}
 800bb0e:	4628      	mov	r0, r5
 800bb10:	b00c      	add	sp, #48	; 0x30
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	2002b12c 	.word	0x2002b12c
 800bb18:	08026924 	.word	0x08026924
 800bb1c:	2002b135 	.word	0x2002b135
 800bb20:	08026920 	.word	0x08026920

0800bb24 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 800bb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb28:	b091      	sub	sp, #68	; 0x44
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	4614      	mov	r4, r2

	TIM_HandleTypeDef htim2;
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 800bb30:	4820      	ldr	r0, [pc, #128]	; (800bbb4 <SamplePoints+0x90>)
 800bb32:	f7f5 fe49 	bl	80017c8 <HAL_ADC_Start>
	htim2.Instance = TIM2;
 800bb36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb3a:	9300      	str	r3, [sp, #0]

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 800bb3c:	2500      	movs	r5, #0
 800bb3e:	e006      	b.n	800bb4e <SamplePoints+0x2a>
		// Lets substract 1 us from Period_us to compensate for loop + conversion
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);

		// Start TIM2
		if ((HAL_TIM_Base_Start(&htim2)) != HAL_OK) {
			_Error_Handler(__FILE__, __LINE__);
 800bb40:	f44f 7188 	mov.w	r1, #272	; 0x110
 800bb44:	481c      	ldr	r0, [pc, #112]	; (800bbb8 <SamplePoints+0x94>)
 800bb46:	f000 fbc9 	bl	800c2dc <_Error_Handler>
 800bb4a:	e013      	b.n	800bb74 <SamplePoints+0x50>
	for (i = 0; i < NoOfPoints; i++) {
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	42bd      	cmp	r5, r7
 800bb50:	d220      	bcs.n	800bb94 <SamplePoints+0x70>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800bb52:	ae10      	add	r6, sp, #64	; 0x40
 800bb54:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 800bb58:	2200      	movs	r2, #0
 800bb5a:	625a      	str	r2, [r3, #36]	; 0x24
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 800bb5c:	f8d8 9000 	ldr.w	r9, [r8]
 800bb60:	4814      	ldr	r0, [pc, #80]	; (800bbb4 <SamplePoints+0x90>)
 800bb62:	f7f5 fead 	bl	80018c0 <HAL_ADC_GetValue>
 800bb66:	f829 0015 	strh.w	r0, [r9, r5, lsl #1]
		if ((HAL_TIM_Base_Start(&htim2)) != HAL_OK) {
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7f8 facf 	bl	800410e <HAL_TIM_Base_Start>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d1e5      	bne.n	800bb40 <SamplePoints+0x1c>
		}

		// Wait for Period_us-1 us
		while ((__HAL_TIM_GET_COUNTER(&htim2)) < (Period_us - 1)) {
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb78:	1e63      	subs	r3, r4, #1
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3fa      	bcc.n	800bb74 <SamplePoints+0x50>
		}

		// printf("End Counter %lu \r\n", __HAL_TIM_GET_COUNTER(&htim2));

		// Stop TIM2
		if ((HAL_TIM_Base_Stop(&htim2)) != HAL_OK) {
 800bb7e:	4668      	mov	r0, sp
 800bb80:	f7f8 fad2 	bl	8004128 <HAL_TIM_Base_Stop>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d0e1      	beq.n	800bb4c <SamplePoints+0x28>
			_Error_Handler(__FILE__, __LINE__);
 800bb88:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800bb8c:	480a      	ldr	r0, [pc, #40]	; (800bbb8 <SamplePoints+0x94>)
 800bb8e:	f000 fba5 	bl	800c2dc <_Error_Handler>
 800bb92:	e7db      	b.n	800bb4c <SamplePoints+0x28>
		}
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800bb94:	f04f 31ff 	mov.w	r1, #4294967295
 800bb98:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800bb9c:	f7ff ff26 	bl	800b9ec <InitScreen>
	LCDWrite(5, "DONE!");
 800bba0:	4906      	ldr	r1, [pc, #24]	; (800bbbc <SamplePoints+0x98>)
 800bba2:	2005      	movs	r0, #5
 800bba4:	f7ff ff34 	bl	800ba10 <LCDWrite>

	printf("Sampling done.\r\n");
 800bba8:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <SamplePoints+0x9c>)
 800bbaa:	f016 fff1 	bl	8022b90 <puts>
}
 800bbae:	b011      	add	sp, #68	; 0x44
 800bbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbb4:	2002ba68 	.word	0x2002ba68
 800bbb8:	08026934 	.word	0x08026934
 800bbbc:	08026900 	.word	0x08026900
 800bbc0:	08026908 	.word	0x08026908

0800bbc4 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 800bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	b090      	sub	sp, #64	; 0x40
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	4615      	mov	r5, r2

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 800bbd0:	482b      	ldr	r0, [pc, #172]	; (800bc80 <AvgAndPlotPoints+0xbc>)
 800bbd2:	f016 ffdd 	bl	8022b90 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800bbd6:	492b      	ldr	r1, [pc, #172]	; (800bc84 <AvgAndPlotPoints+0xc0>)
 800bbd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800bbdc:	f7ff ff06 	bl	800b9ec <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	e030      	b.n	800bc46 <AvgAndPlotPoints+0x82>
		BufferSum = 0;

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 800bbe4:	6832      	ldr	r2, [r6, #0]
 800bbe6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bbea:	4410      	add	r0, r2
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800bbec:	3301      	adds	r3, #1
 800bbee:	1962      	adds	r2, r4, r5
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d3f7      	bcc.n	800bbe4 <AvgAndPlotPoints+0x20>
		}

		BufferAvg = BufferSum / AvgSize;
 800bbf4:	fbb0 faf5 	udiv	sl, r0, r5

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7f4 fcb3 	bl	8000564 <__aeabi_ui2d>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4b21      	ldr	r3, [pc, #132]	; (800bc88 <AvgAndPlotPoints+0xc4>)
 800bc02:	f7f4 fd25 	bl	8000650 <__aeabi_dmul>
 800bc06:	4680      	mov	r8, r0
 800bc08:	4689      	mov	r9, r1
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7f4 fcaa 	bl	8000564 <__aeabi_ui2d>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 fe44 	bl	80008a4 <__aeabi_ddiv>
 800bc1c:	f7f4 ff2a 	bl	8000a74 <__aeabi_d2uiz>
 800bc20:	4680      	mov	r8, r0
		YCoord = (272.0 * (BufferAvg / 65536.0));
 800bc22:	4650      	mov	r0, sl
 800bc24:	f7f4 fc9e 	bl	8000564 <__aeabi_ui2d>
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <AvgAndPlotPoints+0xc8>)
 800bc2c:	f7f4 fd10 	bl	8000650 <__aeabi_dmul>
 800bc30:	2200      	movs	r2, #0
 800bc32:	4b17      	ldr	r3, [pc, #92]	; (800bc90 <AvgAndPlotPoints+0xcc>)
 800bc34:	f7f4 fd0c 	bl	8000650 <__aeabi_dmul>
 800bc38:	f7f4 ff1c 	bl	8000a74 <__aeabi_d2uiz>

		PlotData(XCoord, YCoord);
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f7ff fecc 	bl	800b9dc <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800bc44:	3401      	adds	r4, #1
 800bc46:	42bc      	cmp	r4, r7
 800bc48:	d202      	bcs.n	800bc50 <AvgAndPlotPoints+0x8c>
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7ce      	b.n	800bbee <AvgAndPlotPoints+0x2a>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 800bc50:	462a      	mov	r2, r5
 800bc52:	4621      	mov	r1, r4
 800bc54:	480f      	ldr	r0, [pc, #60]	; (800bc94 <AvgAndPlotPoints+0xd0>)
 800bc56:	f016 ff27 	bl	8022aa8 <iprintf>

	LCDWrite(0, "");
 800bc5a:	490f      	ldr	r1, [pc, #60]	; (800bc98 <AvgAndPlotPoints+0xd4>)
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7ff fed7 	bl	800ba10 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 800bc62:	9500      	str	r5, [sp, #0]
 800bc64:	463b      	mov	r3, r7
 800bc66:	4a0d      	ldr	r2, [pc, #52]	; (800bc9c <AvgAndPlotPoints+0xd8>)
 800bc68:	2132      	movs	r1, #50	; 0x32
 800bc6a:	a803      	add	r0, sp, #12
 800bc6c:	f001 fa64 	bl	800d138 <snprintf>
	LCDWrite(0, MyStr);
 800bc70:	a903      	add	r1, sp, #12
 800bc72:	2000      	movs	r0, #0
 800bc74:	f7ff fecc 	bl	800ba10 <LCDWrite>
}
 800bc78:	b010      	add	sp, #64	; 0x40
 800bc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7e:	bf00      	nop
 800bc80:	080267fc 	.word	0x080267fc
 800bc84:	ffff0000 	.word	0xffff0000
 800bc88:	407e0000 	.word	0x407e0000
 800bc8c:	3ef00000 	.word	0x3ef00000
 800bc90:	40710000 	.word	0x40710000
 800bc94:	08026814 	.word	0x08026814
 800bc98:	08026810 	.word	0x08026810
 800bc9c:	08026840 	.word	0x08026840

0800bca0 <DirList>:
	}

	printf("Closed file %s OK \r\n", "MEAS1.TXT");
}

void DirList(void) {
 800bca0:	b530      	push	{r4, r5, lr}
 800bca2:	f6ad 0d0c 	subw	sp, sp, #2060	; 0x80c

	FATFS fs;
	FRESULT res;
	DWORD buff[_MAX_SS];

	strcpy(buff, "");
 800bca6:	2300      	movs	r3, #0
 800bca8:	f88d 3008 	strb.w	r3, [sp, #8]

		// File list
		res = scan_files(buff);
 800bcac:	a802      	add	r0, sp, #8
 800bcae:	f7ff fefb 	bl	800baa8 <scan_files>
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 800bcb2:	466a      	mov	r2, sp
 800bcb4:	a901      	add	r1, sp, #4
 800bcb6:	a802      	add	r0, sp, #8
 800bcb8:	f7fb f9a5 	bl	8007006 <f_getfree>
		if (res) {
 800bcbc:	bb08      	cbnz	r0, 800bd02 <DirList+0x62>
			printf("Error: Filesystem free space check failed \r\n");
			_Error_Handler(__FILE__, __LINE__);
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	699c      	ldr	r4, [r3, #24]
 800bcc2:	3c02      	subs	r4, #2
 800bcc4:	895b      	ldrh	r3, [r3, #10]
 800bcc6:	fb03 f404 	mul.w	r4, r3, r4
		fre_sect = fre_clust * fsp->csize;
 800bcca:	9d01      	ldr	r5, [sp, #4]
 800bccc:	fb05 f503 	mul.w	r5, r5, r3

		// Print the free space (assuming 512 bytes/sector)
		printf(
				"%10lu KiB total drive space.\n%10lu KiB available (%s\%%). \n",
				(tot_sect / 2048), (fre_sect / 2048),
				myPrintf(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 800bcd0:	ee07 5a90 	vmov	s15, r5
 800bcd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcd8:	ee07 4a90 	vmov	s15, r4
 800bcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce0:	ee87 0a27 	vdiv.f32	s0, s14, s15
		printf(
 800bce4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800bd14 <DirList+0x74>
 800bce8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bcec:	f7ff fddc 	bl	800b8a8 <myPrintf>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	0aea      	lsrs	r2, r5, #11
 800bcf4:	0ae1      	lsrs	r1, r4, #11
 800bcf6:	4808      	ldr	r0, [pc, #32]	; (800bd18 <DirList+0x78>)
 800bcf8:	f016 fed6 	bl	8022aa8 <iprintf>

}
 800bcfc:	f60d 0d0c 	addw	sp, sp, #2060	; 0x80c
 800bd00:	bd30      	pop	{r4, r5, pc}
			printf("Error: Filesystem free space check failed \r\n");
 800bd02:	4806      	ldr	r0, [pc, #24]	; (800bd1c <DirList+0x7c>)
 800bd04:	f016 ff44 	bl	8022b90 <puts>
			_Error_Handler(__FILE__, __LINE__);
 800bd08:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800bd0c:	4804      	ldr	r0, [pc, #16]	; (800bd20 <DirList+0x80>)
 800bd0e:	f000 fae5 	bl	800c2dc <_Error_Handler>
 800bd12:	e7d4      	b.n	800bcbe <DirList+0x1e>
 800bd14:	42c80000 	.word	0x42c80000
 800bd18:	080268c4 	.word	0x080268c4
 800bd1c:	08026898 	.word	0x08026898
 800bd20:	08026934 	.word	0x08026934

0800bd24 <MX_GPIO_Init>:
 PB0   ------> USB_OTG_HS_ULPI_D1
 PB11   ------> USB_OTG_HS_ULPI_D4
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */
static void MX_GPIO_Init(void) {
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	b091      	sub	sp, #68	; 0x44

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800bd2a:	4ba8      	ldr	r3, [pc, #672]	; (800bfcc <MX_GPIO_Init+0x2a8>)
 800bd2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd2e:	f042 0210 	orr.w	r2, r2, #16
 800bd32:	631a      	str	r2, [r3, #48]	; 0x30
 800bd34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd36:	f002 0210 	and.w	r2, r2, #16
 800bd3a:	9200      	str	r2, [sp, #0]
 800bd3c:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800bd3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd44:	631a      	str	r2, [r3, #48]	; 0x30
 800bd46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd48:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bd4c:	9201      	str	r2, [sp, #4]
 800bd4e:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800bd50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd52:	f042 0202 	orr.w	r2, r2, #2
 800bd56:	631a      	str	r2, [r3, #48]	; 0x30
 800bd58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd5a:	f002 0202 	and.w	r2, r2, #2
 800bd5e:	9202      	str	r2, [sp, #8]
 800bd60:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800bd62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd64:	f042 0208 	orr.w	r2, r2, #8
 800bd68:	631a      	str	r2, [r3, #48]	; 0x30
 800bd6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd6c:	f002 0208 	and.w	r2, r2, #8
 800bd70:	9203      	str	r2, [sp, #12]
 800bd72:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800bd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd76:	f042 0204 	orr.w	r2, r2, #4
 800bd7a:	631a      	str	r2, [r3, #48]	; 0x30
 800bd7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd7e:	f002 0204 	and.w	r2, r2, #4
 800bd82:	9204      	str	r2, [sp, #16]
 800bd84:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800bd86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd88:	f042 0201 	orr.w	r2, r2, #1
 800bd8c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd90:	f002 0201 	and.w	r2, r2, #1
 800bd94:	9205      	str	r2, [sp, #20]
 800bd96:	9a05      	ldr	r2, [sp, #20]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800bd98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
 800bda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800bda6:	9206      	str	r2, [sp, #24]
 800bda8:	9a06      	ldr	r2, [sp, #24]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800bdaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdb0:	631a      	str	r2, [r3, #48]	; 0x30
 800bdb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdb4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800bdb8:	9207      	str	r2, [sp, #28]
 800bdba:	9a07      	ldr	r2, [sp, #28]
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800bdbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdc2:	631a      	str	r2, [r3, #48]	; 0x30
 800bdc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800bdca:	9208      	str	r2, [sp, #32]
 800bdcc:	9a08      	ldr	r2, [sp, #32]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800bdce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdd0:	f042 0220 	orr.w	r2, r2, #32
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30
 800bdd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdd8:	f002 0220 	and.w	r2, r2, #32
 800bddc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdde:	9a09      	ldr	r2, [sp, #36]	; 0x24
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800bde0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bde2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bde6:	631a      	str	r2, [r3, #48]	; 0x30
 800bde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdee:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	2120      	movs	r1, #32
 800bdf6:	4876      	ldr	r0, [pc, #472]	; (800bfd0 <MX_GPIO_Init+0x2ac>)
 800bdf8:	f7f6 fa3a 	bl	8002270 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f241 010c 	movw	r1, #4108	; 0x100c
 800be02:	4874      	ldr	r0, [pc, #464]	; (800bfd4 <MX_GPIO_Init+0x2b0>)
 800be04:	f7f6 fa34 	bl	8002270 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800be08:	2200      	movs	r2, #0
 800be0a:	2108      	movs	r1, #8
 800be0c:	4872      	ldr	r0, [pc, #456]	; (800bfd8 <MX_GPIO_Init+0x2b4>)
 800be0e:	f7f6 fa2f 	bl	8002270 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800be12:	2200      	movs	r2, #0
 800be14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be18:	4870      	ldr	r0, [pc, #448]	; (800bfdc <MX_GPIO_Init+0x2b8>)
 800be1a:	f7f6 fa29 	bl	8002270 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800be1e:	2200      	movs	r2, #0
 800be20:	21c8      	movs	r1, #200	; 0xc8
 800be22:	486f      	ldr	r0, [pc, #444]	; (800bfe0 <MX_GPIO_Init+0x2bc>)
 800be24:	f7f6 fa24 	bl	8002270 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800be28:	f04f 0908 	mov.w	r9, #8
 800be2c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be30:	2400      	movs	r4, #0
 800be32:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be34:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800be36:	a90b      	add	r1, sp, #44	; 0x2c
 800be38:	486a      	ldr	r0, [pc, #424]	; (800bfe4 <MX_GPIO_Init+0x2c0>)
 800be3a:	f7f6 f88d 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800be3e:	f04f 0a04 	mov.w	sl, #4
 800be42:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be46:	2502      	movs	r5, #2
 800be48:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be4a:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be4c:	2603      	movs	r6, #3
 800be4e:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800be50:	2309      	movs	r3, #9
 800be52:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800be54:	a90b      	add	r1, sp, #44	; 0x2c
 800be56:	4863      	ldr	r0, [pc, #396]	; (800bfe4 <MX_GPIO_Init+0x2c0>)
 800be58:	f7f6 f87e 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800be5c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800be60:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be62:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be64:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be66:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be68:	230b      	movs	r3, #11
 800be6a:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800be6c:	a90b      	add	r1, sp, #44	; 0x2c
 800be6e:	485c      	ldr	r0, [pc, #368]	; (800bfe0 <MX_GPIO_Init+0x2bc>)
 800be70:	f7f6 f872 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800be74:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be78:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800be7a:	2312      	movs	r3, #18
 800be7c:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800be7e:	2701      	movs	r7, #1
 800be80:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be82:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800be84:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be88:	a90b      	add	r1, sp, #44	; 0x2c
 800be8a:	4857      	ldr	r0, [pc, #348]	; (800bfe8 <MX_GPIO_Init+0x2c4>)
 800be8c:	f7f6 f864 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800be90:	f643 4323 	movw	r3, #15395	; 0x3c23
 800be94:	930b      	str	r3, [sp, #44]	; 0x2c
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be96:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be98:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be9a:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800be9c:	f04f 080a 	mov.w	r8, #10
 800bea0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bea4:	a90b      	add	r1, sp, #44	; 0x2c
 800bea6:	4850      	ldr	r0, [pc, #320]	; (800bfe8 <MX_GPIO_Init+0x2c4>)
 800bea8:	f7f6 f856 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800beac:	2310      	movs	r3, #16
 800beae:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb0:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beb2:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800beb4:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800beb6:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800beb8:	a90b      	add	r1, sp, #44	; 0x2c
 800beba:	484b      	ldr	r0, [pc, #300]	; (800bfe8 <MX_GPIO_Init+0x2c4>)
 800bebc:	f7f6 f84c 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800bec0:	2380      	movs	r3, #128	; 0x80
 800bec2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec4:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bec6:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bec8:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800beca:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800bece:	a90b      	add	r1, sp, #44	; 0x2c
 800bed0:	483f      	ldr	r0, [pc, #252]	; (800bfd0 <MX_GPIO_Init+0x2ac>)
 800bed2:	f7f6 f841 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800bed6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800beda:	930b      	str	r3, [sp, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bedc:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bede:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee0:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800bee2:	230c      	movs	r3, #12
 800bee4:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bee6:	a90b      	add	r1, sp, #44	; 0x2c
 800bee8:	4840      	ldr	r0, [pc, #256]	; (800bfec <MX_GPIO_Init+0x2c8>)
 800beea:	f7f6 f835 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800beee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bef2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef4:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef6:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bef8:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800befa:	970f      	str	r7, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800befc:	a90b      	add	r1, sp, #44	; 0x2c
 800befe:	483c      	ldr	r0, [pc, #240]	; (800bff0 <MX_GPIO_Init+0x2cc>)
 800bf00:	f7f6 f82a 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 800bf04:	2360      	movs	r3, #96	; 0x60
 800bf06:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf08:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0a:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf0c:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bf0e:	f04f 0b0d 	mov.w	fp, #13
 800bf12:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf16:	a90b      	add	r1, sp, #44	; 0x2c
 800bf18:	4832      	ldr	r0, [pc, #200]	; (800bfe4 <MX_GPIO_Init+0x2c0>)
 800bf1a:	f7f6 f81d 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800bf1e:	2340      	movs	r3, #64	; 0x40
 800bf20:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf22:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf24:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf26:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800bf28:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800bf2c:	a90b      	add	r1, sp, #44	; 0x2c
 800bf2e:	482e      	ldr	r0, [pc, #184]	; (800bfe8 <MX_GPIO_Init+0x2c4>)
 800bf30:	f7f6 f812 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800bf34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf38:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf3a:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3c:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bf3e:	a90b      	add	r1, sp, #44	; 0x2c
 800bf40:	482c      	ldr	r0, [pc, #176]	; (800bff4 <MX_GPIO_Init+0x2d0>)
 800bf42:	f7f6 f809 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800bf46:	2340      	movs	r3, #64	; 0x40
 800bf48:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bf4a:	4b2b      	ldr	r3, [pc, #172]	; (800bff8 <MX_GPIO_Init+0x2d4>)
 800bf4c:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf4e:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800bf50:	a90b      	add	r1, sp, #44	; 0x2c
 800bf52:	481f      	ldr	r0, [pc, #124]	; (800bfd0 <MX_GPIO_Init+0x2ac>)
 800bf54:	f7f6 f800 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 800bf58:	23f0      	movs	r3, #240	; 0xf0
 800bf5a:	930b      	str	r3, [sp, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf5c:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5e:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf60:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800bf62:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bf66:	a90b      	add	r1, sp, #44	; 0x2c
 800bf68:	481a      	ldr	r0, [pc, #104]	; (800bfd4 <MX_GPIO_Init+0x2b0>)
 800bf6a:	f7f5 fff5 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800bf6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf72:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf74:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf76:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf78:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800bf7a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800bf7e:	a90b      	add	r1, sp, #44	; 0x2c
 800bf80:	4817      	ldr	r0, [pc, #92]	; (800bfe0 <MX_GPIO_Init+0x2bc>)
 800bf82:	f7f5 ffe9 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800bf86:	2320      	movs	r3, #32
 800bf88:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf8a:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8c:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf8e:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bf90:	a90b      	add	r1, sp, #44	; 0x2c
 800bf92:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <MX_GPIO_Init+0x2ac>)
 800bf94:	f7f5 ffe0 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800bf98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf9c:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf9e:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfa0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bfa2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800bfa6:	a90b      	add	r1, sp, #44	; 0x2c
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <MX_GPIO_Init+0x2ac>)
 800bfaa:	f7f5 ffd5 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800bfae:	f241 030c 	movw	r3, #4108	; 0x100c
 800bfb2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfb4:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb6:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfb8:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bfba:	a90b      	add	r1, sp, #44	; 0x2c
 800bfbc:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <MX_GPIO_Init+0x2b0>)
 800bfbe:	f7f5 ffcb 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800bfc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfc6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bfc8:	940c      	str	r4, [sp, #48]	; 0x30
 800bfca:	e017      	b.n	800bffc <MX_GPIO_Init+0x2d8>
 800bfcc:	40023800 	.word	0x40023800
 800bfd0:	40020c00 	.word	0x40020c00
 800bfd4:	40022000 	.word	0x40022000
 800bfd8:	40022800 	.word	0x40022800
 800bfdc:	40021c00 	.word	0x40021c00
 800bfe0:	40021800 	.word	0x40021800
 800bfe4:	40021000 	.word	0x40021000
 800bfe8:	40020400 	.word	0x40020400
 800bfec:	40020800 	.word	0x40020800
 800bff0:	40020000 	.word	0x40020000
 800bff4:	40022400 	.word	0x40022400
 800bff8:	10120000 	.word	0x10120000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bffc:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800bffe:	a90b      	add	r1, sp, #44	; 0x2c
 800c000:	4881      	ldr	r0, [pc, #516]	; (800c208 <MX_GPIO_Init+0x4e4>)
 800c002:	f7f5 ffa9 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800c006:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c00a:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c00c:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c00e:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800c010:	a90b      	add	r1, sp, #44	; 0x2c
 800c012:	487e      	ldr	r0, [pc, #504]	; (800c20c <MX_GPIO_Init+0x4e8>)
 800c014:	f7f5 ffa0 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800c018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c01c:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c01e:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c020:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c022:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c024:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800c028:	a90b      	add	r1, sp, #44	; 0x2c
 800c02a:	4879      	ldr	r0, [pc, #484]	; (800c210 <MX_GPIO_Init+0x4ec>)
 800c02c:	f7f5 ff94 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c030:	2310      	movs	r3, #16
 800c032:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c034:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c036:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c038:	a90b      	add	r1, sp, #44	; 0x2c
 800c03a:	4876      	ldr	r0, [pc, #472]	; (800c214 <MX_GPIO_Init+0x4f0>)
 800c03c:	f7f5 ff8c 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800c040:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c044:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c046:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c048:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800c04a:	230c      	movs	r3, #12
 800c04c:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800c04e:	a90b      	add	r1, sp, #44	; 0x2c
 800c050:	4870      	ldr	r0, [pc, #448]	; (800c214 <MX_GPIO_Init+0x4f0>)
 800c052:	f7f5 ff81 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800c056:	f248 0304 	movw	r3, #32772	; 0x8004
 800c05a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c05c:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c05e:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c060:	a90b      	add	r1, sp, #44	; 0x2c
 800c062:	486d      	ldr	r0, [pc, #436]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c064:	f7f5 ff78 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800c068:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c06a:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06c:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c06e:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c070:	2305      	movs	r3, #5
 800c072:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800c074:	a90b      	add	r1, sp, #44	; 0x2c
 800c076:	4869      	ldr	r0, [pc, #420]	; (800c21c <MX_GPIO_Init+0x4f8>)
 800c078:	f7f5 ff6e 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800c07c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c080:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c082:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c084:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c086:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800c088:	a90b      	add	r1, sp, #44	; 0x2c
 800c08a:	4863      	ldr	r0, [pc, #396]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c08c:	f7f5 ff64 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 800c090:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800c094:	930b      	str	r3, [sp, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c096:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c098:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c09a:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c09c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c0a0:	a90b      	add	r1, sp, #44	; 0x2c
 800c0a2:	485d      	ldr	r0, [pc, #372]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c0a4:	f7f5 ff58 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800c0a8:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0aa:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ac:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ae:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c0b0:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800c0b2:	a90b      	add	r1, sp, #44	; 0x2c
 800c0b4:	4859      	ldr	r0, [pc, #356]	; (800c21c <MX_GPIO_Init+0x4f8>)
 800c0b6:	f7f5 ff4f 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800c0ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0be:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c0c0:	4b57      	ldr	r3, [pc, #348]	; (800c220 <MX_GPIO_Init+0x4fc>)
 800c0c2:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c4:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800c0c6:	a90b      	add	r1, sp, #44	; 0x2c
 800c0c8:	4854      	ldr	r0, [pc, #336]	; (800c21c <MX_GPIO_Init+0x4f8>)
 800c0ca:	f7f5 ff45 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800c0ce:	23c0      	movs	r3, #192	; 0xc0
 800c0d0:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d2:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d4:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0d6:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800c0d8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0dc:	a90b      	add	r1, sp, #44	; 0x2c
 800c0de:	484a      	ldr	r0, [pc, #296]	; (800c208 <MX_GPIO_Init+0x4e4>)
 800c0e0:	f7f5 ff3a 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0e8:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ea:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0ec:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c0ee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800c0f2:	a90b      	add	r1, sp, #44	; 0x2c
 800c0f4:	4848      	ldr	r0, [pc, #288]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c0f6:	f7f5 ff2f 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800c0fa:	23c8      	movs	r3, #200	; 0xc8
 800c0fc:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0fe:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c100:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c102:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c104:	a90b      	add	r1, sp, #44	; 0x2c
 800c106:	4842      	ldr	r0, [pc, #264]	; (800c210 <MX_GPIO_Init+0x4ec>)
 800c108:	f7f5 ff26 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800c10c:	2305      	movs	r3, #5
 800c10e:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c110:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c112:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c114:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c116:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c11a:	a90b      	add	r1, sp, #44	; 0x2c
 800c11c:	483a      	ldr	r0, [pc, #232]	; (800c208 <MX_GPIO_Init+0x4e4>)
 800c11e:	f7f5 ff1b 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800c122:	2332      	movs	r3, #50	; 0x32
 800c124:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c126:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c128:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c12a:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c12c:	230b      	movs	r3, #11
 800c12e:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c130:	a90b      	add	r1, sp, #44	; 0x2c
 800c132:	4835      	ldr	r0, [pc, #212]	; (800c208 <MX_GPIO_Init+0x4e4>)
 800c134:	f7f5 ff10 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c138:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c13c:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c13e:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c140:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c142:	2309      	movs	r3, #9
 800c144:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c146:	a90b      	add	r1, sp, #44	; 0x2c
 800c148:	4836      	ldr	r0, [pc, #216]	; (800c224 <MX_GPIO_Init+0x500>)
 800c14a:	f7f5 ff05 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800c14e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c152:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c154:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c156:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c158:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c15a:	2309      	movs	r3, #9
 800c15c:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c15e:	a90b      	add	r1, sp, #44	; 0x2c
 800c160:	482c      	ldr	r0, [pc, #176]	; (800c214 <MX_GPIO_Init+0x4f0>)
 800c162:	f7f5 fef9 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800c166:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c16a:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c16c:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800c16e:	a90b      	add	r1, sp, #44	; 0x2c
 800c170:	4827      	ldr	r0, [pc, #156]	; (800c210 <MX_GPIO_Init+0x4ec>)
 800c172:	f7f5 fef1 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800c176:	2386      	movs	r3, #134	; 0x86
 800c178:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c17a:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c17c:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c17e:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c180:	230b      	movs	r3, #11
 800c182:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c184:	a90b      	add	r1, sp, #44	; 0x2c
 800c186:	4828      	ldr	r0, [pc, #160]	; (800c228 <MX_GPIO_Init+0x504>)
 800c188:	f7f5 fee6 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 800c18c:	2350      	movs	r3, #80	; 0x50
 800c18e:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c190:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c192:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c194:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c196:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c19a:	a90b      	add	r1, sp, #44	; 0x2c
 800c19c:	4822      	ldr	r0, [pc, #136]	; (800c228 <MX_GPIO_Init+0x504>)
 800c19e:	f7f5 fedb 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin | LCD_SDA_Pin;
 800c1a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c1a6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c1a8:	2312      	movs	r3, #18
 800c1aa:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1ac:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1ae:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c1b0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c1b4:	a90b      	add	r1, sp, #44	; 0x2c
 800c1b6:	4818      	ldr	r0, [pc, #96]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c1b8:	f7f5 fece 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800c1bc:	2328      	movs	r3, #40	; 0x28
 800c1be:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1c0:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c2:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1c4:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c1c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ca:	a90b      	add	r1, sp, #44	; 0x2c
 800c1cc:	4816      	ldr	r0, [pc, #88]	; (800c228 <MX_GPIO_Init+0x504>)
 800c1ce:	f7f5 fec3 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1d6:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1d8:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1da:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800c1dc:	2309      	movs	r3, #9
 800c1de:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800c1e0:	a90b      	add	r1, sp, #44	; 0x2c
 800c1e2:	480d      	ldr	r0, [pc, #52]	; (800c218 <MX_GPIO_Init+0x4f4>)
 800c1e4:	f7f5 feb8 	bl	8001f58 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800c1e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c1ec:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1ee:	950c      	str	r5, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1f0:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1f2:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c1f4:	2305      	movs	r3, #5
 800c1f6:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1f8:	a90b      	add	r1, sp, #44	; 0x2c
 800c1fa:	480a      	ldr	r0, [pc, #40]	; (800c224 <MX_GPIO_Init+0x500>)
 800c1fc:	f7f5 feac 	bl	8001f58 <HAL_GPIO_Init>

}
 800c200:	b011      	add	sp, #68	; 0x44
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	bf00      	nop
 800c208:	40020800 	.word	0x40020800
 800c20c:	40022800 	.word	0x40022800
 800c210:	40021800 	.word	0x40021800
 800c214:	40020c00 	.word	0x40020c00
 800c218:	40021c00 	.word	0x40021c00
 800c21c:	40022000 	.word	0x40022000
 800c220:	10120000 	.word	0x10120000
 800c224:	40020400 	.word	0x40020400
 800c228:	40020000 	.word	0x40020000

0800c22c <StartUSBDTask>:
	}
	/* USER CODE END 5 */
}

/* StartUSBDTask function */
void StartUSBDTask(void const * argument) {
 800c22c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartUSBDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800c22e:	2001      	movs	r0, #1
 800c230:	f7fb fb25 	bl	800787e <osDelay>
 800c234:	e7fb      	b.n	800c22e <StartUSBDTask+0x2>

0800c236 <StartSTEMWINTask>:
	}
	/* USER CODE END StartUSBDTask */
}

/* StartSTEMWINTask function */
void StartSTEMWINTask(void const * argument) {
 800c236:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartSTEMWINTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800c238:	2001      	movs	r0, #1
 800c23a:	f7fb fb20 	bl	800787e <osDelay>
 800c23e:	e7fb      	b.n	800c238 <StartSTEMWINTask+0x2>

0800c240 <__io_putchar>:
int __io_putchar(int ch) {
 800c240:	b510      	push	{r4, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	4604      	mov	r4, r0
	c[0] = ch & 0x00FF;
 800c246:	a902      	add	r1, sp, #8
 800c248:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800c24c:	230a      	movs	r3, #10
 800c24e:	2201      	movs	r2, #1
 800c250:	4802      	ldr	r0, [pc, #8]	; (800c25c <__io_putchar+0x1c>)
 800c252:	f7f8 fa0d 	bl	8004670 <HAL_UART_Transmit>
}
 800c256:	4620      	mov	r0, r4
 800c258:	b002      	add	sp, #8
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	2002bb10 	.word	0x2002bb10

0800c260 <_write>:
int _write(int file, char *ptr, int len) {
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4616      	mov	r6, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c264:	2400      	movs	r4, #0
 800c266:	e005      	b.n	800c274 <_write+0x14>
		__io_putchar(*ptr++);
 800c268:	1c4d      	adds	r5, r1, #1
 800c26a:	7808      	ldrb	r0, [r1, #0]
 800c26c:	f7ff ffe8 	bl	800c240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c270:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800c272:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c274:	42b4      	cmp	r4, r6
 800c276:	dbf7      	blt.n	800c268 <_write+0x8>
}
 800c278:	4630      	mov	r0, r6
 800c27a:	bd70      	pop	{r4, r5, r6, pc}

0800c27c <__io_getchar>:
int __io_getchar(void) {
 800c27c:	b500      	push	{lr}
 800c27e:	b083      	sub	sp, #12
	HAL_StatusTypeDef Status = HAL_BUSY;
 800c280:	2002      	movs	r0, #2
	while (Status != HAL_OK)
 800c282:	e006      	b.n	800c292 <__io_getchar+0x16>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 800c284:	230a      	movs	r3, #10
 800c286:	2201      	movs	r2, #1
 800c288:	f10d 0107 	add.w	r1, sp, #7
 800c28c:	4804      	ldr	r0, [pc, #16]	; (800c2a0 <__io_getchar+0x24>)
 800c28e:	f7f8 fa55 	bl	800473c <HAL_UART_Receive>
	while (Status != HAL_OK)
 800c292:	2800      	cmp	r0, #0
 800c294:	d1f6      	bne.n	800c284 <__io_getchar+0x8>
}
 800c296:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c29a:	b003      	add	sp, #12
 800c29c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2a0:	2002bb10 	.word	0x2002bb10

0800c2a4 <_read>:
int _read(int file, char *ptr, int len) {
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	4617      	mov	r7, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c2aa:	2400      	movs	r4, #0
 800c2ac:	e005      	b.n	800c2ba <_read+0x16>
		*ptr++ = __io_getchar();
 800c2ae:	1c6e      	adds	r6, r5, #1
 800c2b0:	f7ff ffe4 	bl	800c27c <__io_getchar>
 800c2b4:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c2b6:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800c2b8:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c2ba:	42bc      	cmp	r4, r7
 800c2bc:	dbf7      	blt.n	800c2ae <_read+0xa>
}
 800c2be:	4638      	mov	r0, r7
 800c2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2c2 <vOutputChar>:
void vOutputChar(const char cChar, const TickType_t xTicksToWait) {
 800c2c2:	4770      	bx	lr

0800c2c4 <xApplicationMemoryPermissions>:
}
 800c2c4:	2003      	movs	r0, #3
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800c2c8:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 800c2ca:	6803      	ldr	r3, [r0, #0]
 800c2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d0:	d000      	beq.n	800c2d4 <HAL_TIM_PeriodElapsedCallback+0xc>
 800c2d2:	bd08      	pop	{r3, pc}
		HAL_IncTick();
 800c2d4:	f7f5 f990 	bl	80015f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800c2d8:	e7fb      	b.n	800c2d2 <HAL_TIM_PeriodElapsedCallback+0xa>
	...

0800c2dc <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 800c2dc:	b508      	push	{r3, lr}
 800c2de:	4605      	mov	r5, r0
 800c2e0:	460c      	mov	r4, r1
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("\r\nError file = %s Line = %d \r\n", file, line);
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	4802      	ldr	r0, [pc, #8]	; (800c2f0 <_Error_Handler+0x14>)
 800c2e8:	f016 fbde 	bl	8022aa8 <iprintf>
 800c2ec:	e7f9      	b.n	800c2e2 <_Error_Handler+0x6>
 800c2ee:	bf00      	nop
 800c2f0:	08026bd0 	.word	0x08026bd0

0800c2f4 <MX_ADC3_Init>:
static void MX_ADC3_Init(void) {
 800c2f4:	b500      	push	{lr}
 800c2f6:	b085      	sub	sp, #20
	hadc3.Instance = ADC3;
 800c2f8:	4816      	ldr	r0, [pc, #88]	; (800c354 <MX_ADC3_Init+0x60>)
 800c2fa:	4b17      	ldr	r3, [pc, #92]	; (800c358 <MX_ADC3_Init+0x64>)
 800c2fc:	6003      	str	r3, [r0, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c2fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c302:	6043      	str	r3, [r0, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800c304:	2300      	movs	r3, #0
 800c306:	6083      	str	r3, [r0, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800c308:	6103      	str	r3, [r0, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800c30a:	6183      	str	r3, [r0, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800c30c:	6203      	str	r3, [r0, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c30e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c310:	4a12      	ldr	r2, [pc, #72]	; (800c35c <MX_ADC3_Init+0x68>)
 800c312:	6282      	str	r2, [r0, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c314:	60c3      	str	r3, [r0, #12]
	hadc3.Init.NbrOfConversion = 1;
 800c316:	2201      	movs	r2, #1
 800c318:	61c2      	str	r2, [r0, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800c31a:	6303      	str	r3, [r0, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c31c:	6142      	str	r2, [r0, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800c31e:	f7f5 fa29 	bl	8001774 <HAL_ADC_Init>
 800c322:	b960      	cbnz	r0, 800c33e <MX_ADC3_Init+0x4a>
	sConfig.Channel = ADC_CHANNEL_0;
 800c324:	2300      	movs	r3, #0
 800c326:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800c328:	2201      	movs	r2, #1
 800c32a:	9201      	str	r2, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c32c:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800c32e:	4669      	mov	r1, sp
 800c330:	4808      	ldr	r0, [pc, #32]	; (800c354 <MX_ADC3_Init+0x60>)
 800c332:	f7f5 fac9 	bl	80018c8 <HAL_ADC_ConfigChannel>
 800c336:	b938      	cbnz	r0, 800c348 <MX_ADC3_Init+0x54>
}
 800c338:	b005      	add	sp, #20
 800c33a:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 800c33e:	f240 1167 	movw	r1, #359	; 0x167
 800c342:	4807      	ldr	r0, [pc, #28]	; (800c360 <MX_ADC3_Init+0x6c>)
 800c344:	f7ff ffca 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c348:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800c34c:	4804      	ldr	r0, [pc, #16]	; (800c360 <MX_ADC3_Init+0x6c>)
 800c34e:	f7ff ffc5 	bl	800c2dc <_Error_Handler>
 800c352:	bf00      	nop
 800c354:	2002ba68 	.word	0x2002ba68
 800c358:	40012200 	.word	0x40012200
 800c35c:	0f000001 	.word	0x0f000001
 800c360:	08026948 	.word	0x08026948

0800c364 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 800c364:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 800c366:	480d      	ldr	r0, [pc, #52]	; (800c39c <MX_USART1_UART_Init+0x38>)
 800c368:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <MX_USART1_UART_Init+0x3c>)
 800c36a:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 800c36c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c370:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800c372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c376:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800c378:	2300      	movs	r3, #0
 800c37a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800c37c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800c37e:	220c      	movs	r2, #12
 800c380:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c382:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c384:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c386:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c388:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800c38a:	f7f8 fc96 	bl	8004cba <HAL_UART_Init>
 800c38e:	b900      	cbnz	r0, 800c392 <MX_USART1_UART_Init+0x2e>
 800c390:	bd08      	pop	{r3, pc}
		_Error_Handler(__FILE__, __LINE__);
 800c392:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800c396:	4803      	ldr	r0, [pc, #12]	; (800c3a4 <MX_USART1_UART_Init+0x40>)
 800c398:	f7ff ffa0 	bl	800c2dc <_Error_Handler>
 800c39c:	2002bb10 	.word	0x2002bb10
 800c3a0:	40011000 	.word	0x40011000
 800c3a4:	08026948 	.word	0x08026948

0800c3a8 <MX_CRC_Init>:
static void MX_CRC_Init(void) {
 800c3a8:	b508      	push	{r3, lr}
	hcrc.Instance = CRC;
 800c3aa:	4809      	ldr	r0, [pc, #36]	; (800c3d0 <MX_CRC_Init+0x28>)
 800c3ac:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <MX_CRC_Init+0x2c>)
 800c3ae:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	7103      	strb	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800c3b4:	7143      	strb	r3, [r0, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800c3b6:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c3b8:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	6203      	str	r3, [r0, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800c3be:	f7f5 fbcd 	bl	8001b5c <HAL_CRC_Init>
 800c3c2:	b900      	cbnz	r0, 800c3c6 <MX_CRC_Init+0x1e>
 800c3c4:	bd08      	pop	{r3, pc}
		_Error_Handler(__FILE__, __LINE__);
 800c3c6:	f240 117f 	movw	r1, #383	; 0x17f
 800c3ca:	4803      	ldr	r0, [pc, #12]	; (800c3d8 <MX_CRC_Init+0x30>)
 800c3cc:	f7ff ff86 	bl	800c2dc <_Error_Handler>
 800c3d0:	2002b9e4 	.word	0x2002b9e4
 800c3d4:	40023000 	.word	0x40023000
 800c3d8:	08026948 	.word	0x08026948

0800c3dc <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 800c3dc:	b500      	push	{lr}
 800c3de:	b089      	sub	sp, #36	; 0x24
	htim1.Instance = TIM1;
 800c3e0:	4818      	ldr	r0, [pc, #96]	; (800c444 <MX_TIM1_Init+0x68>)
 800c3e2:	4b19      	ldr	r3, [pc, #100]	; (800c448 <MX_TIM1_Init+0x6c>)
 800c3e4:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 100;
 800c3e6:	2364      	movs	r3, #100	; 0x64
 800c3e8:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 0;
 800c3ee:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c3f0:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 800c3f2:	6143      	str	r3, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c3f4:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800c3f6:	f7f8 f82b 	bl	8004450 <HAL_TIM_Base_Init>
 800c3fa:	b9a0      	cbnz	r0, 800c426 <MX_TIM1_Init+0x4a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3fc:	a908      	add	r1, sp, #32
 800c3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c402:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800c406:	480f      	ldr	r0, [pc, #60]	; (800c444 <MX_TIM1_Init+0x68>)
 800c408:	f7f8 f848 	bl	800449c <HAL_TIM_ConfigClockSource>
 800c40c:	b980      	cbnz	r0, 800c430 <MX_TIM1_Init+0x54>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c40e:	2300      	movs	r3, #0
 800c410:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c412:	9302      	str	r3, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c414:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800c416:	a901      	add	r1, sp, #4
 800c418:	480a      	ldr	r0, [pc, #40]	; (800c444 <MX_TIM1_Init+0x68>)
 800c41a:	f7f8 f8c9 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 800c41e:	b960      	cbnz	r0, 800c43a <MX_TIM1_Init+0x5e>
}
 800c420:	b009      	add	sp, #36	; 0x24
 800c422:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 800c426:	f44f 71c9 	mov.w	r1, #402	; 0x192
 800c42a:	4808      	ldr	r0, [pc, #32]	; (800c44c <MX_TIM1_Init+0x70>)
 800c42c:	f7ff ff56 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c430:	f240 1197 	movw	r1, #407	; 0x197
 800c434:	4805      	ldr	r0, [pc, #20]	; (800c44c <MX_TIM1_Init+0x70>)
 800c436:	f7ff ff51 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c43a:	f240 119f 	movw	r1, #415	; 0x19f
 800c43e:	4803      	ldr	r0, [pc, #12]	; (800c44c <MX_TIM1_Init+0x70>)
 800c440:	f7ff ff4c 	bl	800c2dc <_Error_Handler>
 800c444:	2002bde8 	.word	0x2002bde8
 800c448:	40010000 	.word	0x40010000
 800c44c:	08026948 	.word	0x08026948

0800c450 <SystemClock_Config>:
void SystemClock_Config(void) {
 800c450:	b500      	push	{lr}
 800c452:	b0b5      	sub	sp, #212	; 0xd4
	__HAL_RCC_PWR_CLK_ENABLE()
 800c454:	4b3f      	ldr	r3, [pc, #252]	; (800c554 <SystemClock_Config+0x104>)
 800c456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c458:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c45c:	641a      	str	r2, [r3, #64]	; 0x40
 800c45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c468:	4b3b      	ldr	r3, [pc, #236]	; (800c558 <SystemClock_Config+0x108>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	9328      	str	r3, [sp, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c484:	9329      	str	r3, [sp, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c486:	2302      	movs	r3, #2
 800c488:	932e      	str	r3, [sp, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c48a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c48e:	922f      	str	r2, [sp, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800c490:	2219      	movs	r2, #25
 800c492:	9230      	str	r2, [sp, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800c494:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c498:	9231      	str	r2, [sp, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c49a:	9332      	str	r3, [sp, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800c49c:	2308      	movs	r3, #8
 800c49e:	9333      	str	r3, [sp, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c4a0:	a828      	add	r0, sp, #160	; 0xa0
 800c4a2:	f7f6 ff65 	bl	8003370 <HAL_RCC_OscConfig>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d140      	bne.n	800c52c <SystemClock_Config+0xdc>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800c4aa:	f7f6 ff23 	bl	80032f4 <HAL_PWREx_EnableOverDrive>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d141      	bne.n	800c536 <SystemClock_Config+0xe6>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c4b2:	230f      	movs	r3, #15
 800c4b4:	9323      	str	r3, [sp, #140]	; 0x8c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	9324      	str	r3, [sp, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9325      	str	r3, [sp, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c4be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c4c2:	9326      	str	r3, [sp, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c4c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4c8:	9327      	str	r3, [sp, #156]	; 0x9c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800c4ca:	2106      	movs	r1, #6
 800c4cc:	a823      	add	r0, sp, #140	; 0x8c
 800c4ce:	f7f7 f98b 	bl	80037e8 <HAL_RCC_ClockConfig>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d134      	bne.n	800c540 <SystemClock_Config+0xf0>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800c4d6:	4b21      	ldr	r3, [pc, #132]	; (800c55c <SystemClock_Config+0x10c>)
 800c4d8:	9302      	str	r3, [sp, #8]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800c4da:	23c0      	movs	r3, #192	; 0xc0
 800c4dc:	9307      	str	r3, [sp, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800c4de:	2304      	movs	r3, #4
 800c4e0:	9309      	str	r3, [sp, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	9308      	str	r3, [sp, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	930a      	str	r3, [sp, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800c4ea:	930c      	str	r3, [sp, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800c4ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c4f0:	930d      	str	r3, [sp, #52]	; 0x34
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	9313      	str	r3, [sp, #76]	; 0x4c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800c4f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c4fa:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800c4fc:	a802      	add	r0, sp, #8
 800c4fe:	f7f7 fa69 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 800c502:	bb10      	cbnz	r0, 800c54a <SystemClock_Config+0xfa>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800c504:	f7f7 fa22 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <SystemClock_Config+0x110>)
 800c50a:	fba3 3000 	umull	r3, r0, r3, r0
 800c50e:	0980      	lsrs	r0, r0, #6
 800c510:	f7f5 fafe 	bl	8001b10 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800c514:	2004      	movs	r0, #4
 800c516:	f7f5 fb11 	bl	8001b3c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c51a:	2200      	movs	r2, #0
 800c51c:	210f      	movs	r1, #15
 800c51e:	f04f 30ff 	mov.w	r0, #4294967295
 800c522:	f7f5 fab9 	bl	8001a98 <HAL_NVIC_SetPriority>
}
 800c526:	b035      	add	sp, #212	; 0xd4
 800c528:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 800c52c:	f240 1123 	movw	r1, #291	; 0x123
 800c530:	480c      	ldr	r0, [pc, #48]	; (800c564 <SystemClock_Config+0x114>)
 800c532:	f7ff fed3 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c536:	f240 1129 	movw	r1, #297	; 0x129
 800c53a:	480a      	ldr	r0, [pc, #40]	; (800c564 <SystemClock_Config+0x114>)
 800c53c:	f7ff fece 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c540:	f44f 719b 	mov.w	r1, #310	; 0x136
 800c544:	4807      	ldr	r0, [pc, #28]	; (800c564 <SystemClock_Config+0x114>)
 800c546:	f7ff fec9 	bl	800c2dc <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 800c54a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800c54e:	4805      	ldr	r0, [pc, #20]	; (800c564 <SystemClock_Config+0x114>)
 800c550:	f7ff fec4 	bl	800c2dc <_Error_Handler>
 800c554:	40023800 	.word	0x40023800
 800c558:	40007000 	.word	0x40007000
 800c55c:	00200048 	.word	0x00200048
 800c560:	10624dd3 	.word	0x10624dd3
 800c564:	08026948 	.word	0x08026948

0800c568 <main>:
{
 800c568:	b500      	push	{lr}
 800c56a:	b091      	sub	sp, #68	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c56c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c570:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c574:	4b36      	ldr	r3, [pc, #216]	; (800c650 <main+0xe8>)
 800c576:	2100      	movs	r1, #0
 800c578:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c57c:	695a      	ldr	r2, [r3, #20]
 800c57e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c582:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c588:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800c58c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c590:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800c594:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c598:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800c59c:	e00f      	b.n	800c5be <main+0x56>
      } while (ways--);
 800c59e:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c5a0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c5a4:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800c5a8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800c5ac:	4928      	ldr	r1, [pc, #160]	; (800c650 <main+0xe8>)
 800c5ae:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800c5b2:	1e53      	subs	r3, r2, #1
 800c5b4:	2a00      	cmp	r2, #0
 800c5b6:	d1f2      	bne.n	800c59e <main+0x36>
    } while(sets--);
 800c5b8:	1e43      	subs	r3, r0, #1
 800c5ba:	b118      	cbz	r0, 800c5c4 <main+0x5c>
 800c5bc:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c5be:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800c5c2:	e7ed      	b.n	800c5a0 <main+0x38>
 800c5c4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c5c8:	694b      	ldr	r3, [r1, #20]
 800c5ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5ce:	614b      	str	r3, [r1, #20]
 800c5d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c5d4:	f3bf 8f6f 	isb	sy
	HAL_Init();
 800c5d8:	f7f5 f802 	bl	80015e0 <HAL_Init>
	SystemClock_Config();
 800c5dc:	f7ff ff38 	bl	800c450 <SystemClock_Config>
	MX_GPIO_Init();
 800c5e0:	f7ff fba0 	bl	800bd24 <MX_GPIO_Init>
	MX_ADC3_Init();
 800c5e4:	f7ff fe86 	bl	800c2f4 <MX_ADC3_Init>
	MX_USART1_UART_Init();
 800c5e8:	f7ff febc 	bl	800c364 <MX_USART1_UART_Init>
	MX_CRC_Init();
 800c5ec:	f7ff fedc 	bl	800c3a8 <MX_CRC_Init>
	MX_TIM1_Init();
 800c5f0:	f7ff fef4 	bl	800c3dc <MX_TIM1_Init>
	GRAPHICS_HW_Init();
 800c5f4:	f7ff f874 	bl	800b6e0 <GRAPHICS_HW_Init>
	GRAPHICS_Init();
 800c5f8:	f7ff f87e 	bl	800b6f8 <GRAPHICS_Init>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800c5fc:	4c15      	ldr	r4, [pc, #84]	; (800c654 <main+0xec>)
 800c5fe:	ad0b      	add	r5, sp, #44	; 0x2c
 800c600:	4626      	mov	r6, r4
 800c602:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c606:	6833      	ldr	r3, [r6, #0]
 800c608:	602b      	str	r3, [r5, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c60a:	2100      	movs	r1, #0
 800c60c:	a80b      	add	r0, sp, #44	; 0x2c
 800c60e:	f7fb f918 	bl	8007842 <osThreadCreate>
 800c612:	4b11      	ldr	r3, [pc, #68]	; (800c658 <main+0xf0>)
 800c614:	6018      	str	r0, [r3, #0]
	osThreadDef(USBDTask, StartUSBDTask, osPriorityNormal, 0, 1024);
 800c616:	ad06      	add	r5, sp, #24
 800c618:	f104 0614 	add.w	r6, r4, #20
 800c61c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c61e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c620:	6833      	ldr	r3, [r6, #0]
 800c622:	602b      	str	r3, [r5, #0]
	USBDTaskHandle = osThreadCreate(osThread(USBDTask), NULL);
 800c624:	2100      	movs	r1, #0
 800c626:	a806      	add	r0, sp, #24
 800c628:	f7fb f90b 	bl	8007842 <osThreadCreate>
 800c62c:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <main+0xf4>)
 800c62e:	6018      	str	r0, [r3, #0]
	osThreadDef(STEMWINTask, StartSTEMWINTask, osPriorityNormal, 0, 1024);
 800c630:	ad01      	add	r5, sp, #4
 800c632:	3428      	adds	r4, #40	; 0x28
 800c634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	602b      	str	r3, [r5, #0]
	STEMWINTaskHandle = osThreadCreate(osThread(STEMWINTask), NULL);
 800c63c:	2100      	movs	r1, #0
 800c63e:	a801      	add	r0, sp, #4
 800c640:	f7fb f8ff 	bl	8007842 <osThreadCreate>
 800c644:	4b06      	ldr	r3, [pc, #24]	; (800c660 <main+0xf8>)
 800c646:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800c648:	f7fb f8ec 	bl	8007824 <osKernelStart>
 800c64c:	e7fe      	b.n	800c64c <main+0xe4>
 800c64e:	bf00      	nop
 800c650:	e000ed00 	.word	0xe000ed00
 800c654:	080239d4 	.word	0x080239d4
 800c658:	2002bbe0 	.word	0x2002bbe0
 800c65c:	2002be28 	.word	0x2002be28
 800c660:	2002c290 	.word	0x2002c290
 800c664:	00000000 	.word	0x00000000

0800c668 <StartDefaultTask>:
{
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	f6ad 0dc4 	subw	sp, sp, #2244	; 0x8c4
	MX_FATFS_Init();
 800c670:	f7ff f90a 	bl	800b888 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 800c674:	f000 ff10 	bl	800d498 <MX_USB_DEVICE_Init>
	GRAPHICS_MainTask();
 800c678:	f7fd ff48 	bl	800a50c <GRAPHICS_MainTask>
	MX_SDRAM_InitEx();
 800c67c:	f7fe f9c4 	bl	800aa08 <MX_SDRAM_InitEx>
	BSP_LCD_Init();
 800c680:	f7f4 ff58 	bl	8001534 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800c684:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800c688:	2000      	movs	r0, #0
 800c68a:	f7f4 fc43 	bl	8000f14 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800c68e:	2000      	movs	r0, #0
 800c690:	f7f4 fc80 	bl	8000f94 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800c694:	f7f4 fe80 	bl	8001398 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	f7f4 fcb6 	bl	800100c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a4:	f7f4 fc88 	bl	8000fb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c6a8:	4caf      	ldr	r4, [pc, #700]	; (800c968 <StartDefaultTask+0x300>)
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f7f4 fc78 	bl	8000fa0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 800c6b0:	49ae      	ldr	r1, [pc, #696]	; (800c96c <StartDefaultTask+0x304>)
 800c6b2:	2005      	movs	r0, #5
 800c6b4:	f7f4 fdec 	bl	8001290 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800c6b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c6bc:	f7f4 ffae 	bl	800161c <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f7f4 fca3 	bl	800100c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f7f4 fc76 	bl	8000fb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	f7f4 fc66 	bl	8000fa0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 800c6d4:	49a6      	ldr	r1, [pc, #664]	; (800c970 <StartDefaultTask+0x308>)
 800c6d6:	2005      	movs	r0, #5
 800c6d8:	f7f4 fdda 	bl	8001290 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800c6dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c6e0:	f7f4 ff9c 	bl	800161c <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800c6e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c6e8:	f7f4 fc90 	bl	800100c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c6ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c6f0:	f7f4 fc62 	bl	8000fb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	f7f4 fc52 	bl	8000fa0 <BSP_LCD_SetTextColor>
	printf("Format SDRAM disk ... \r\n");
 800c6fc:	489d      	ldr	r0, [pc, #628]	; (800c974 <StartDefaultTask+0x30c>)
 800c6fe:	f016 fa47 	bl	8022b90 <puts>
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 800c702:	499d      	ldr	r1, [pc, #628]	; (800c978 <StartDefaultTask+0x310>)
 800c704:	489d      	ldr	r0, [pc, #628]	; (800c97c <StartDefaultTask+0x314>)
 800c706:	f7fb f835 	bl	8007774 <FATFS_LinkDriver>
 800c70a:	b150      	cbz	r0, 800c722 <StartDefaultTask+0xba>
	if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800c70c:	2200      	movs	r2, #0
 800c70e:	499a      	ldr	r1, [pc, #616]	; (800c978 <StartDefaultTask+0x310>)
 800c710:	489b      	ldr	r0, [pc, #620]	; (800c980 <StartDefaultTask+0x318>)
 800c712:	f7fa f903 	bl	800691c <f_mount>
 800c716:	b140      	cbz	r0, 800c72a <StartDefaultTask+0xc2>
		_Error_Handler(__FILE__, __LINE__);
 800c718:	f240 31f2 	movw	r1, #1010	; 0x3f2
 800c71c:	4899      	ldr	r0, [pc, #612]	; (800c984 <StartDefaultTask+0x31c>)
 800c71e:	f7ff fddd 	bl	800c2dc <_Error_Handler>
		printf("	SDRAM FATFS link Success \r\n");
 800c722:	4899      	ldr	r0, [pc, #612]	; (800c988 <StartDefaultTask+0x320>)
 800c724:	f016 fa34 	bl	8022b90 <puts>
 800c728:	e7f0      	b.n	800c70c <StartDefaultTask+0xa4>
		printf("	SDRAM FATFS mount Success \r\n");
 800c72a:	4898      	ldr	r0, [pc, #608]	; (800c98c <StartDefaultTask+0x324>)
 800c72c:	f016 fa30 	bl	8022b90 <puts>
	if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 800c730:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	4b96      	ldr	r3, [pc, #600]	; (800c990 <StartDefaultTask+0x328>)
 800c738:	2200      	movs	r2, #0
 800c73a:	2102      	movs	r1, #2
 800c73c:	488e      	ldr	r0, [pc, #568]	; (800c978 <StartDefaultTask+0x310>)
 800c73e:	f7fa fcd7 	bl	80070f0 <f_mkfs>
 800c742:	b120      	cbz	r0, 800c74e <StartDefaultTask+0xe6>
		_Error_Handler(__FILE__, __LINE__);
 800c744:	f240 31fa 	movw	r1, #1018	; 0x3fa
 800c748:	488e      	ldr	r0, [pc, #568]	; (800c984 <StartDefaultTask+0x31c>)
 800c74a:	f7ff fdc7 	bl	800c2dc <_Error_Handler>
		printf("Format SDRAM disk done OK \r\n");
 800c74e:	4891      	ldr	r0, [pc, #580]	; (800c994 <StartDefaultTask+0x32c>)
 800c750:	f016 fa1e 	bl	8022b90 <puts>
	FATFS_UnLinkDriver(SDRAMPath);
 800c754:	4888      	ldr	r0, [pc, #544]	; (800c978 <StartDefaultTask+0x310>)
 800c756:	f7fb f831 	bl	80077bc <FATFS_UnLinkDriver>
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800c75a:	f04f 31ff 	mov.w	r1, #4294967295
 800c75e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c762:	f7ff f943 	bl	800b9ec <InitScreen>
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 800c766:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800c76a:	a814      	add	r0, sp, #80	; 0x50
 800c76c:	f7ff f8c4 	bl	800b8f8 <initArray>
	Cmd[0] = '\0';
 800c770:	2500      	movs	r5, #0
 800c772:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
	Arg[0] = '\0';
 800c776:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
	uint32_t Count_ms = 1000;
 800c77a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	uint32_t Period_us = 100;
 800c77e:	2764      	movs	r7, #100	; 0x64
	uint32_t AvgSize = 10;
 800c780:	230a      	movs	r3, #10
 800c782:	9303      	str	r3, [sp, #12]
	uint32_t NoOfPoints = 19200;
 800c784:	f44f 4696 	mov.w	r6, #19200	; 0x4b00
	uint32_t MeasNo = 0;
 800c788:	46ab      	mov	fp, r5
	while (!((strcmp(Cmd, "quit") == 0) && (n == 0))) {
 800c78a:	e06b      	b.n	800c864 <StartDefaultTask+0x1fc>
			String_GetString((uint8_t *) CmdBuffer);
 800c78c:	a817      	add	r0, sp, #92	; 0x5c
 800c78e:	f7fe ffeb 	bl	800b768 <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 800c792:	4981      	ldr	r1, [pc, #516]	; (800c998 <StartDefaultTask+0x330>)
 800c794:	a817      	add	r0, sp, #92	; 0x5c
 800c796:	f7f3 fd3b 	bl	8000210 <strcmp>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d0f6      	beq.n	800c78c <StartDefaultTask+0x124>
 800c79e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0f2      	beq.n	800c78c <StartDefaultTask+0x124>
		cmdPtr = string_parse((char *) CmdBuffer, 0);
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	a817      	add	r0, sp, #92	; 0x5c
 800c7aa:	f7ff f8c9 	bl	800b940 <string_parse>
		uint8_t i = 0;
 800c7ae:	2300      	movs	r3, #0
		while (*cmdPtr != '\0') {
 800c7b0:	e004      	b.n	800c7bc <StartDefaultTask+0x154>
			Cmd[i] = (char) *cmdPtr;
 800c7b2:	a91f      	add	r1, sp, #124	; 0x7c
 800c7b4:	54ca      	strb	r2, [r1, r3]
			i++;
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	b2db      	uxtb	r3, r3
			cmdPtr++;
 800c7ba:	3001      	adds	r0, #1
		while (*cmdPtr != '\0') {
 800c7bc:	7802      	ldrb	r2, [r0, #0]
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	d1f7      	bne.n	800c7b2 <StartDefaultTask+0x14a>
		Cmd[i] = '\0';
 800c7c2:	2400      	movs	r4, #0
 800c7c4:	aa1f      	add	r2, sp, #124	; 0x7c
 800c7c6:	54d4      	strb	r4, [r2, r3]
		argPtr = string_parse((char *) CmdBuffer, 1);
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	a817      	add	r0, sp, #92	; 0x5c
 800c7cc:	f7ff f8b8 	bl	800b940 <string_parse>
		i = 0;
 800c7d0:	4623      	mov	r3, r4
		while ((argPtr != NULL) && (*argPtr != '\0')) {
 800c7d2:	e004      	b.n	800c7de <StartDefaultTask+0x176>
			Arg[i] = (char) *argPtr;
 800c7d4:	a927      	add	r1, sp, #156	; 0x9c
 800c7d6:	54ca      	strb	r2, [r1, r3]
			i++;
 800c7d8:	3301      	adds	r3, #1
 800c7da:	b2db      	uxtb	r3, r3
			argPtr++;
 800c7dc:	3001      	adds	r0, #1
		while ((argPtr != NULL) && (*argPtr != '\0')) {
 800c7de:	b110      	cbz	r0, 800c7e6 <StartDefaultTask+0x17e>
 800c7e0:	7802      	ldrb	r2, [r0, #0]
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	d1f6      	bne.n	800c7d4 <StartDefaultTask+0x16c>
		Arg[i] = '\0';
 800c7e6:	a827      	add	r0, sp, #156	; 0x9c
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	54c2      	strb	r2, [r0, r3]
		n = strlen(Arg);
 800c7ec:	f7f3 fd1a 	bl	8000224 <strlen>
 800c7f0:	b2c5      	uxtb	r5, r0
		if ((strcmp(Cmd, "meas") == 0) && (n == 0)) {
 800c7f2:	496a      	ldr	r1, [pc, #424]	; (800c99c <StartDefaultTask+0x334>)
 800c7f4:	a81f      	add	r0, sp, #124	; 0x7c
 800c7f6:	f7f3 fd0b 	bl	8000210 <strcmp>
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	b908      	cbnz	r0, 800c802 <StartDefaultTask+0x19a>
 800c7fe:	2d00      	cmp	r5, #0
 800c800:	d059      	beq.n	800c8b6 <StartDefaultTask+0x24e>
		else if ((strcmp(Cmd, "setpoints") == 0) && (n > 0)) {
 800c802:	4967      	ldr	r1, [pc, #412]	; (800c9a0 <StartDefaultTask+0x338>)
 800c804:	a81f      	add	r0, sp, #124	; 0x7c
 800c806:	f7f3 fd03 	bl	8000210 <strcmp>
 800c80a:	b910      	cbnz	r0, 800c812 <StartDefaultTask+0x1aa>
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	f040 810c 	bne.w	800ca2a <StartDefaultTask+0x3c2>
		else if ((strcmp(Cmd, "setavg") == 0) && (n > 0)) {
 800c812:	4964      	ldr	r1, [pc, #400]	; (800c9a4 <StartDefaultTask+0x33c>)
 800c814:	a81f      	add	r0, sp, #124	; 0x7c
 800c816:	f7f3 fcfb 	bl	8000210 <strcmp>
 800c81a:	b910      	cbnz	r0, 800c822 <StartDefaultTask+0x1ba>
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	f040 8118 	bne.w	800ca52 <StartDefaultTask+0x3ea>
		else if ((strcmp(Cmd, "setperiod") == 0) && (n > 0)) {
 800c822:	4961      	ldr	r1, [pc, #388]	; (800c9a8 <StartDefaultTask+0x340>)
 800c824:	a81f      	add	r0, sp, #124	; 0x7c
 800c826:	f7f3 fcf3 	bl	8000210 <strcmp>
 800c82a:	b910      	cbnz	r0, 800c832 <StartDefaultTask+0x1ca>
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	f040 8117 	bne.w	800ca60 <StartDefaultTask+0x3f8>
		else if ((strcmp(Cmd, "setcount") == 0) && (n > 0)) {
 800c832:	495e      	ldr	r1, [pc, #376]	; (800c9ac <StartDefaultTask+0x344>)
 800c834:	a81f      	add	r0, sp, #124	; 0x7c
 800c836:	f7f3 fceb 	bl	8000210 <strcmp>
 800c83a:	b910      	cbnz	r0, 800c842 <StartDefaultTask+0x1da>
 800c83c:	2d00      	cmp	r5, #0
 800c83e:	f040 8116 	bne.w	800ca6e <StartDefaultTask+0x406>
		else if ((strcmp(Cmd, "dir") == 0) && (n == 0)) {
 800c842:	495b      	ldr	r1, [pc, #364]	; (800c9b0 <StartDefaultTask+0x348>)
 800c844:	a81f      	add	r0, sp, #124	; 0x7c
 800c846:	f7f3 fce3 	bl	8000210 <strcmp>
 800c84a:	b910      	cbnz	r0, 800c852 <StartDefaultTask+0x1ea>
 800c84c:	2d00      	cmp	r5, #0
 800c84e:	f000 8115 	beq.w	800ca7c <StartDefaultTask+0x414>
		else if ((strcmp(Cmd, "quit") == 0) && (n == 0)) {
 800c852:	4958      	ldr	r1, [pc, #352]	; (800c9b4 <StartDefaultTask+0x34c>)
 800c854:	a81f      	add	r0, sp, #124	; 0x7c
 800c856:	f7f3 fcdb 	bl	8000210 <strcmp>
 800c85a:	b900      	cbnz	r0, 800c85e <StartDefaultTask+0x1f6>
 800c85c:	b115      	cbz	r5, 800c864 <StartDefaultTask+0x1fc>
			printf("Wrong command or argument \r\n");
 800c85e:	4856      	ldr	r0, [pc, #344]	; (800c9b8 <StartDefaultTask+0x350>)
 800c860:	f016 f996 	bl	8022b90 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 0))) {
 800c864:	4953      	ldr	r1, [pc, #332]	; (800c9b4 <StartDefaultTask+0x34c>)
 800c866:	a81f      	add	r0, sp, #124	; 0x7c
 800c868:	f7f3 fcd2 	bl	8000210 <strcmp>
 800c86c:	b910      	cbnz	r0, 800c874 <StartDefaultTask+0x20c>
 800c86e:	2d00      	cmp	r5, #0
 800c870:	f000 815b 	beq.w	800cb2a <StartDefaultTask+0x4c2>
				myPrintf(NoOfPoints * Period_us / 1000000.0));
 800c874:	fb07 f006 	mul.w	r0, r7, r6
 800c878:	f7f3 fe74 	bl	8000564 <__aeabi_ui2d>
 800c87c:	a338      	add	r3, pc, #224	; (adr r3, 800c960 <StartDefaultTask+0x2f8>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f4 f80f 	bl	80008a4 <__aeabi_ddiv>
		printf(
 800c886:	f7f4 f915 	bl	8000ab4 <__aeabi_d2f>
 800c88a:	ee00 0a10 	vmov	s0, r0
 800c88e:	f7ff f80b 	bl	800b8a8 <myPrintf>
 800c892:	9001      	str	r0, [sp, #4]
 800c894:	f8cd a000 	str.w	sl, [sp]
 800c898:	463b      	mov	r3, r7
 800c89a:	9a03      	ldr	r2, [sp, #12]
 800c89c:	4631      	mov	r1, r6
 800c89e:	4847      	ldr	r0, [pc, #284]	; (800c9bc <StartDefaultTask+0x354>)
 800c8a0:	f016 f902 	bl	8022aa8 <iprintf>
		Cmd[0] = '\0';
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
		Arg[0] = '\0';
 800c8aa:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
		strcpy(CmdBuffer, " ");
 800c8ae:	2320      	movs	r3, #32
 800c8b0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 800c8b4:	e76d      	b.n	800c792 <StartDefaultTask+0x12a>
			CountDown(Count_ms);
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f7ff f8bc 	bl	800ba34 <CountDown>
			MeasNo++;
 800c8bc:	f10b 0b01 	add.w	fp, fp, #1
			SamplePoints(&Data, NoOfPoints, Period_us);
 800c8c0:	463a      	mov	r2, r7
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	a814      	add	r0, sp, #80	; 0x50
 800c8c6:	f7ff f92d 	bl	800bb24 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 800c8ca:	9a03      	ldr	r2, [sp, #12]
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	a814      	add	r0, sp, #80	; 0x50
 800c8d0:	f7ff f978 	bl	800bbc4 <AvgAndPlotPoints>
			FATFS_UnLinkDriver(SDRAMPath);
 800c8d4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c978 <StartDefaultTask+0x310>
 800c8d8:	4648      	mov	r0, r9
 800c8da:	f7fa ff6f 	bl	80077bc <FATFS_UnLinkDriver>
			char fname[30] = " ";
 800c8de:	2320      	movs	r3, #32
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	9305      	str	r3, [sp, #20]
 800c8e6:	9306      	str	r3, [sp, #24]
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	9308      	str	r3, [sp, #32]
 800c8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
			sprintf(fname, "meas_%lu.txt", MeasNo);
 800c8f4:	465a      	mov	r2, fp
 800c8f6:	4932      	ldr	r1, [pc, #200]	; (800c9c0 <StartDefaultTask+0x358>)
 800c8f8:	a804      	add	r0, sp, #16
 800c8fa:	f000 fab6 	bl	800ce6a <sprintf>
			printf("Writing data to file %s... ", fname);
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4830      	ldr	r0, [pc, #192]	; (800c9c4 <StartDefaultTask+0x35c>)
 800c902:	f016 f8d1 	bl	8022aa8 <iprintf>
			if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) != 0) {
 800c906:	4649      	mov	r1, r9
 800c908:	481c      	ldr	r0, [pc, #112]	; (800c97c <StartDefaultTask+0x314>)
 800c90a:	f7fa ff33 	bl	8007774 <FATFS_LinkDriver>
 800c90e:	b9a0      	cbnz	r0, 800c93a <StartDefaultTask+0x2d2>
			if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800c910:	2200      	movs	r2, #0
 800c912:	4919      	ldr	r1, [pc, #100]	; (800c978 <StartDefaultTask+0x310>)
 800c914:	481a      	ldr	r0, [pc, #104]	; (800c980 <StartDefaultTask+0x318>)
 800c916:	f7fa f801 	bl	800691c <f_mount>
 800c91a:	b9b0      	cbnz	r0, 800c94a <StartDefaultTask+0x2e2>
			if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800c91c:	220a      	movs	r2, #10
 800c91e:	a904      	add	r1, sp, #16
 800c920:	4829      	ldr	r0, [pc, #164]	; (800c9c8 <StartDefaultTask+0x360>)
 800c922:	f7fa f843 	bl	80069ac <f_open>
 800c926:	2800      	cmp	r0, #0
 800c928:	d066      	beq.n	800c9f8 <StartDefaultTask+0x390>
				printf("	SDRAM FATFS fopen Error \r\n");
 800c92a:	4828      	ldr	r0, [pc, #160]	; (800c9cc <StartDefaultTask+0x364>)
 800c92c:	f016 f930 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800c930:	f240 4182 	movw	r1, #1154	; 0x482
 800c934:	4813      	ldr	r0, [pc, #76]	; (800c984 <StartDefaultTask+0x31c>)
 800c936:	f7ff fcd1 	bl	800c2dc <_Error_Handler>
				printf("	SDRAM FATFS link Error \r\n");
 800c93a:	4825      	ldr	r0, [pc, #148]	; (800c9d0 <StartDefaultTask+0x368>)
 800c93c:	f016 f928 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800c940:	f240 4174 	movw	r1, #1140	; 0x474
 800c944:	480f      	ldr	r0, [pc, #60]	; (800c984 <StartDefaultTask+0x31c>)
 800c946:	f7ff fcc9 	bl	800c2dc <_Error_Handler>
				printf("	SDRAM FATFS mount Error \r\n");
 800c94a:	4822      	ldr	r0, [pc, #136]	; (800c9d4 <StartDefaultTask+0x36c>)
 800c94c:	f016 f920 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800c950:	f240 417b 	movw	r1, #1147	; 0x47b
 800c954:	480b      	ldr	r0, [pc, #44]	; (800c984 <StartDefaultTask+0x31c>)
 800c956:	f7ff fcc1 	bl	800c2dc <_Error_Handler>
 800c95a:	bf00      	nop
 800c95c:	f3af 8000 	nop.w
 800c960:	00000000 	.word	0x00000000
 800c964:	412e8480 	.word	0x412e8480
 800c968:	ff0000ff 	.word	0xff0000ff
 800c96c:	08026958 	.word	0x08026958
 800c970:	08026970 	.word	0x08026970
 800c974:	08026988 	.word	0x08026988
 800c978:	2002bde4 	.word	0x2002bde4
 800c97c:	08026c34 	.word	0x08026c34
 800c980:	2002c05c 	.word	0x2002c05c
 800c984:	08026948 	.word	0x08026948
 800c988:	080269a0 	.word	0x080269a0
 800c98c:	080269bc 	.word	0x080269bc
 800c990:	2002bbe4 	.word	0x2002bbe4
 800c994:	080269dc 	.word	0x080269dc
 800c998:	08026890 	.word	0x08026890
 800c99c:	08026a64 	.word	0x08026a64
 800c9a0:	08026b14 	.word	0x08026b14
 800c9a4:	08026b64 	.word	0x08026b64
 800c9a8:	08026b6c 	.word	0x08026b6c
 800c9ac:	08026b78 	.word	0x08026b78
 800c9b0:	08026b84 	.word	0x08026b84
 800c9b4:	08026b88 	.word	0x08026b88
 800c9b8:	08026b90 	.word	0x08026b90
 800c9bc:	080269f8 	.word	0x080269f8
 800c9c0:	08026a6c 	.word	0x08026a6c
 800c9c4:	08026a7c 	.word	0x08026a7c
 800c9c8:	2002be2c 	.word	0x2002be2c
 800c9cc:	08026ad0 	.word	0x08026ad0
 800c9d0:	08026a98 	.word	0x08026a98
 800c9d4:	08026ab4 	.word	0x08026ab4
				sprintf(buffer, "%lu \r\n", ((uint32_t) Data.array[idx]));
 800c9d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9da:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800c9de:	495e      	ldr	r1, [pc, #376]	; (800cb58 <StartDefaultTask+0x4f0>)
 800c9e0:	a80c      	add	r0, sp, #48	; 0x30
 800c9e2:	f000 fa42 	bl	800ce6a <sprintf>
				res = f_write(&MyFile, buffer, sizeof(buffer),
 800c9e6:	f60d 03bc 	addw	r3, sp, #2236	; 0x8bc
 800c9ea:	221e      	movs	r2, #30
 800c9ec:	a90c      	add	r1, sp, #48	; 0x30
 800c9ee:	485b      	ldr	r0, [pc, #364]	; (800cb5c <StartDefaultTask+0x4f4>)
 800c9f0:	f7fa f8fb 	bl	8006bea <f_write>
 800c9f4:	4680      	mov	r8, r0
			for (int idx = 0; idx < NoOfPoints; idx++) {
 800c9f6:	3401      	adds	r4, #1
 800c9f8:	42a6      	cmp	r6, r4
 800c9fa:	d8ed      	bhi.n	800c9d8 <StartDefaultTask+0x370>
			if ((byteswritten == 0) || (res != FR_OK)) {
 800c9fc:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
 800ca00:	b15b      	cbz	r3, 800ca1a <StartDefaultTask+0x3b2>
 800ca02:	f1b8 0f00 	cmp.w	r8, #0
 800ca06:	d108      	bne.n	800ca1a <StartDefaultTask+0x3b2>
			f_close(&MyFile);
 800ca08:	4854      	ldr	r0, [pc, #336]	; (800cb5c <StartDefaultTask+0x4f4>)
 800ca0a:	f7fa fa4f 	bl	8006eac <f_close>
			printf("Write OK \r\n");
 800ca0e:	4854      	ldr	r0, [pc, #336]	; (800cb60 <StartDefaultTask+0x4f8>)
 800ca10:	f016 f8be 	bl	8022b90 <puts>
			DirList();
 800ca14:	f7ff f944 	bl	800bca0 <DirList>
		if ((strcmp(Cmd, "meas") == 0) && (n == 0)) {
 800ca18:	e724      	b.n	800c864 <StartDefaultTask+0x1fc>
				printf("	SDRAM FATFS write Error \r\n");
 800ca1a:	4852      	ldr	r0, [pc, #328]	; (800cb64 <StartDefaultTask+0x4fc>)
 800ca1c:	f016 f8b8 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800ca20:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800ca24:	4850      	ldr	r0, [pc, #320]	; (800cb68 <StartDefaultTask+0x500>)
 800ca26:	f7ff fc59 	bl	800c2dc <_Error_Handler>
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 800ca2a:	220a      	movs	r2, #10
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	a827      	add	r0, sp, #156	; 0x9c
 800ca30:	f016 f94e 	bl	8022cd0 <strtol>
 800ca34:	4606      	mov	r6, r0
			printf("Old Data size is %u New NoOfPOints = %lu \r\n", Data.size,
 800ca36:	4602      	mov	r2, r0
 800ca38:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca3a:	484c      	ldr	r0, [pc, #304]	; (800cb6c <StartDefaultTask+0x504>)
 800ca3c:	f016 f834 	bl	8022aa8 <iprintf>
			insertArray(&Data, NoOfPoints);
 800ca40:	4631      	mov	r1, r6
 800ca42:	a814      	add	r0, sp, #80	; 0x50
 800ca44:	f7fe ff63 	bl	800b90e <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 800ca48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca4a:	4849      	ldr	r0, [pc, #292]	; (800cb70 <StartDefaultTask+0x508>)
 800ca4c:	f016 f82c 	bl	8022aa8 <iprintf>
 800ca50:	e708      	b.n	800c864 <StartDefaultTask+0x1fc>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 800ca52:	220a      	movs	r2, #10
 800ca54:	2100      	movs	r1, #0
 800ca56:	a827      	add	r0, sp, #156	; 0x9c
 800ca58:	f016 f93a 	bl	8022cd0 <strtol>
 800ca5c:	9003      	str	r0, [sp, #12]
 800ca5e:	e701      	b.n	800c864 <StartDefaultTask+0x1fc>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 800ca60:	220a      	movs	r2, #10
 800ca62:	2100      	movs	r1, #0
 800ca64:	a827      	add	r0, sp, #156	; 0x9c
 800ca66:	f016 f933 	bl	8022cd0 <strtol>
 800ca6a:	4607      	mov	r7, r0
 800ca6c:	e6fa      	b.n	800c864 <StartDefaultTask+0x1fc>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 800ca6e:	220a      	movs	r2, #10
 800ca70:	2100      	movs	r1, #0
 800ca72:	a827      	add	r0, sp, #156	; 0x9c
 800ca74:	f016 f92c 	bl	8022cd0 <strtol>
 800ca78:	4682      	mov	sl, r0
 800ca7a:	e6f3      	b.n	800c864 <StartDefaultTask+0x1fc>
			FATFS_UnLinkDriver(SDRAMPath);
 800ca7c:	4c3d      	ldr	r4, [pc, #244]	; (800cb74 <StartDefaultTask+0x50c>)
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7fa fe9c 	bl	80077bc <FATFS_UnLinkDriver>
			if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) != 0) {
 800ca84:	4621      	mov	r1, r4
 800ca86:	483c      	ldr	r0, [pc, #240]	; (800cb78 <StartDefaultTask+0x510>)
 800ca88:	f7fa fe74 	bl	8007774 <FATFS_LinkDriver>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d134      	bne.n	800cafa <StartDefaultTask+0x492>
			if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800ca90:	2200      	movs	r2, #0
 800ca92:	4938      	ldr	r1, [pc, #224]	; (800cb74 <StartDefaultTask+0x50c>)
 800ca94:	4839      	ldr	r0, [pc, #228]	; (800cb7c <StartDefaultTask+0x514>)
 800ca96:	f7f9 ff41 	bl	800691c <f_mount>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d135      	bne.n	800cb0a <StartDefaultTask+0x4a2>
			strcpy(buff, "");
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
			res = scan_files(buff);
 800caa4:	a82f      	add	r0, sp, #188	; 0xbc
 800caa6:	f7fe ffff 	bl	800baa8 <scan_files>
			res = f_getfree(buff, &fre_clust, &fsp);
 800caaa:	aa0c      	add	r2, sp, #48	; 0x30
 800caac:	a904      	add	r1, sp, #16
 800caae:	a82f      	add	r0, sp, #188	; 0xbc
 800cab0:	f7fa faa9 	bl	8007006 <f_getfree>
			if (res) {
 800cab4:	4680      	mov	r8, r0
 800cab6:	bb80      	cbnz	r0, 800cb1a <StartDefaultTask+0x4b2>
			tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 800cab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caba:	6993      	ldr	r3, [r2, #24]
 800cabc:	3b02      	subs	r3, #2
 800cabe:	8952      	ldrh	r2, [r2, #10]
 800cac0:	fb02 f403 	mul.w	r4, r2, r3
			fre_sect = fre_clust * fsp->csize;
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	fb03 f902 	mul.w	r9, r3, r2
							((float) (fre_sect)) / ((float) (tot_sect))
 800caca:	ee07 9a90 	vmov	s15, r9
 800cace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cad2:	ee07 4a90 	vmov	s15, r4
 800cad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cada:	ee87 0a27 	vdiv.f32	s0, s14, s15
			printf(
 800cade:	eddf 7a28 	vldr	s15, [pc, #160]	; 800cb80 <StartDefaultTask+0x518>
 800cae2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cae6:	f7fe fedf 	bl	800b8a8 <myPrintf>
 800caea:	4603      	mov	r3, r0
 800caec:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 800caf0:	0ae1      	lsrs	r1, r4, #11
 800caf2:	4824      	ldr	r0, [pc, #144]	; (800cb84 <StartDefaultTask+0x51c>)
 800caf4:	f015 ffd8 	bl	8022aa8 <iprintf>
		else if ((strcmp(Cmd, "dir") == 0) && (n == 0)) {
 800caf8:	e6b4      	b.n	800c864 <StartDefaultTask+0x1fc>
				printf("	SDRAM FATFS link Error \r\n");
 800cafa:	4823      	ldr	r0, [pc, #140]	; (800cb88 <StartDefaultTask+0x520>)
 800cafc:	f016 f848 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800cb00:	f240 41cb 	movw	r1, #1227	; 0x4cb
 800cb04:	4818      	ldr	r0, [pc, #96]	; (800cb68 <StartDefaultTask+0x500>)
 800cb06:	f7ff fbe9 	bl	800c2dc <_Error_Handler>
				printf("	SDRAM FATFS mount Error \r\n");
 800cb0a:	4820      	ldr	r0, [pc, #128]	; (800cb8c <StartDefaultTask+0x524>)
 800cb0c:	f016 f840 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800cb10:	f240 41d2 	movw	r1, #1234	; 0x4d2
 800cb14:	4814      	ldr	r0, [pc, #80]	; (800cb68 <StartDefaultTask+0x500>)
 800cb16:	f7ff fbe1 	bl	800c2dc <_Error_Handler>
				printf("Error: Filesystem free space check failed \r\n");
 800cb1a:	481d      	ldr	r0, [pc, #116]	; (800cb90 <StartDefaultTask+0x528>)
 800cb1c:	f016 f838 	bl	8022b90 <puts>
				_Error_Handler(__FILE__, __LINE__);
 800cb20:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800cb24:	4810      	ldr	r0, [pc, #64]	; (800cb68 <StartDefaultTask+0x500>)
 800cb26:	f7ff fbd9 	bl	800c2dc <_Error_Handler>
	freeArray(&Data);
 800cb2a:	a814      	add	r0, sp, #80	; 0x50
 800cb2c:	f7fe fefd 	bl	800b92a <freeArray>
	FATFS_UnLinkDriver(SDRAMPath);
 800cb30:	4810      	ldr	r0, [pc, #64]	; (800cb74 <StartDefaultTask+0x50c>)
 800cb32:	f7fa fe43 	bl	80077bc <FATFS_UnLinkDriver>
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800cb36:	f04f 31ff 	mov.w	r1, #4294967295
 800cb3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cb3e:	f7fe ff55 	bl	800b9ec <InitScreen>
	LCDWrite(5, "Stop.");
 800cb42:	4914      	ldr	r1, [pc, #80]	; (800cb94 <StartDefaultTask+0x52c>)
 800cb44:	2005      	movs	r0, #5
 800cb46:	f7fe ff63 	bl	800ba10 <LCDWrite>
	printf("Exit. Data freed. Stop. \r\n");
 800cb4a:	4813      	ldr	r0, [pc, #76]	; (800cb98 <StartDefaultTask+0x530>)
 800cb4c:	f016 f820 	bl	8022b90 <puts>
		osDelay(1);
 800cb50:	2001      	movs	r0, #1
 800cb52:	f7fa fe94 	bl	800787e <osDelay>
 800cb56:	e7fb      	b.n	800cb50 <StartDefaultTask+0x4e8>
 800cb58:	0802692c 	.word	0x0802692c
 800cb5c:	2002be2c 	.word	0x2002be2c
 800cb60:	08026b08 	.word	0x08026b08
 800cb64:	08026aec 	.word	0x08026aec
 800cb68:	08026948 	.word	0x08026948
 800cb6c:	08026b20 	.word	0x08026b20
 800cb70:	08026b4c 	.word	0x08026b4c
 800cb74:	2002bde4 	.word	0x2002bde4
 800cb78:	08026c34 	.word	0x08026c34
 800cb7c:	2002c05c 	.word	0x2002c05c
 800cb80:	42c80000 	.word	0x42c80000
 800cb84:	080268c4 	.word	0x080268c4
 800cb88:	08026a98 	.word	0x08026a98
 800cb8c:	08026ab4 	.word	0x08026ab4
 800cb90:	08026898 	.word	0x08026898
 800cb94:	08026bac 	.word	0x08026bac
 800cb98:	08026bb4 	.word	0x08026bb4

0800cb9c <usNetToHost>:
}
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
	if( u32.ulWords[ 0 ] == 0x00010203 )
 800cb9c:	4b04      	ldr	r3, [pc, #16]	; (800cbb0 <usNetToHost+0x14>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	4b04      	ldr	r3, [pc, #16]	; (800cbb4 <usNetToHost+0x18>)
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d003      	beq.n	800cbae <usNetToHost+0x12>
	{
		return usValue;
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 800cba6:	0a03      	lsrs	r3, r0, #8
 800cba8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800cbac:	b280      	uxth	r0, r0
	}
}
 800cbae:	4770      	bx	lr
 800cbb0:	08026c30 	.word	0x08026c30
 800cbb4:	00010203 	.word	0x00010203

0800cbb8 <strbuf_init>:
	apStr->str = apBuf;
 800cbb8:	6001      	str	r1, [r0, #0]
	apStr->orgStr = apBuf;
 800cbba:	6041      	str	r1, [r0, #4]
	apStr->nulPos = apMaxStr-1;
 800cbbc:	3a01      	subs	r2, #1
 800cbbe:	6082      	str	r2, [r0, #8]
	apStr->curLen = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60c3      	str	r3, [r0, #12]
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800cbc4:	6103      	str	r3, [r0, #16]
 800cbc6:	6143      	str	r3, [r0, #20]
 800cbc8:	6183      	str	r3, [r0, #24]
 800cbca:	61c3      	str	r3, [r0, #28]
 800cbcc:	4770      	bx	lr

0800cbce <strbuf_printchar>:
	if( apStr->str == NULL )
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	b133      	cbz	r3, 800cbe0 <strbuf_printchar+0x12>
	if( apStr->str < apStr->nulPos )
 800cbd2:	6882      	ldr	r2, [r0, #8]
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d30f      	bcc.n	800cbf8 <strbuf_printchar+0x2a>
	if( apStr->str == apStr->nulPos )
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d015      	beq.n	800cc08 <strbuf_printchar+0x3a>
	return pdFALSE;
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4770      	bx	lr
{
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4604      	mov	r4, r0
		vOutputChar( ( char ) c, xTicksToWait );
 800cbe6:	2114      	movs	r1, #20
 800cbe8:	b2d8      	uxtb	r0, r3
 800cbea:	f7ff fb6a 	bl	800c2c2 <vOutputChar>
		apStr->curLen++;
 800cbee:	68e3      	ldr	r3, [r4, #12]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	60e3      	str	r3, [r4, #12]
		return pdTRUE;
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = c;
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	6002      	str	r2, [r0, #0]
 800cbfc:	7019      	strb	r1, [r3, #0]
		apStr->curLen++;
 800cbfe:	68c3      	ldr	r3, [r0, #12]
 800cc00:	3301      	adds	r3, #1
 800cc02:	60c3      	str	r3, [r0, #12]
		return pdTRUE;
 800cc04:	2001      	movs	r0, #1
 800cc06:	4770      	bx	lr
		*( apStr->str++ ) = '\0';
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	6002      	str	r2, [r0, #0]
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	7018      	strb	r0, [r3, #0]
 800cc10:	4770      	bx	lr
	...

0800cc14 <prints>:
{
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	f7ff fb52 	bl	800c2c4 <xApplicationMemoryPermissions>
 800cc20:	b900      	cbnz	r0, 800cc24 <prints+0x10>
		apString = "INV_MEM";
 800cc22:	4d31      	ldr	r5, [pc, #196]	; (800cce8 <prints+0xd4>)
	if( apBuf->flags.width > 0 )
 800cc24:	6960      	ldr	r0, [r4, #20]
 800cc26:	2800      	cmp	r0, #0
 800cc28:	dd02      	ble.n	800cc30 <prints+0x1c>
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	e003      	b.n	800cc38 <prints+0x24>
	register int padchar = ' ';
 800cc30:	2620      	movs	r6, #32
 800cc32:	e00d      	b.n	800cc50 <prints+0x3c>
			++count;
 800cc34:	3201      	adds	r2, #1
		for( ptr = apString; *ptr; ++ptr )
 800cc36:	3301      	adds	r3, #1
 800cc38:	7819      	ldrb	r1, [r3, #0]
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	d1fa      	bne.n	800cc34 <prints+0x20>
		if( count >= apBuf->flags.width )
 800cc3e:	4282      	cmp	r2, r0
 800cc40:	db1f      	blt.n	800cc82 <prints+0x6e>
			apBuf->flags.width = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	6163      	str	r3, [r4, #20]
		if( apBuf->flags.pad & PAD_ZERO )
 800cc46:	7f23      	ldrb	r3, [r4, #28]
 800cc48:	f013 0f02 	tst.w	r3, #2
 800cc4c:	d11c      	bne.n	800cc88 <prints+0x74>
	register int padchar = ' ';
 800cc4e:	2620      	movs	r6, #32
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 800cc50:	7f23      	ldrb	r3, [r4, #28]
 800cc52:	f013 0f01 	tst.w	r3, #1
 800cc56:	d019      	beq.n	800cc8c <prints+0x78>
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 800cc58:	69e2      	ldr	r2, [r4, #28]
 800cc5a:	4b24      	ldr	r3, [pc, #144]	; (800ccec <prints+0xd8>)
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	4a24      	ldr	r2, [pc, #144]	; (800ccf0 <prints+0xdc>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d020      	beq.n	800cca6 <prints+0x92>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800cc64:	69a3      	ldr	r3, [r4, #24]
 800cc66:	b37b      	cbz	r3, 800ccc8 <prints+0xb4>
 800cc68:	7829      	ldrb	r1, [r5, #0]
 800cc6a:	b369      	cbz	r1, 800ccc8 <prints+0xb4>
		if( !strbuf_printchar( apBuf, *apString ) )
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7ff ffae 	bl	800cbce <strbuf_printchar>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d035      	beq.n	800cce4 <prints+0xd0>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800cc78:	3501      	adds	r5, #1
 800cc7a:	69a3      	ldr	r3, [r4, #24]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	61a3      	str	r3, [r4, #24]
 800cc80:	e7f0      	b.n	800cc64 <prints+0x50>
			apBuf->flags.width -= count;
 800cc82:	1a82      	subs	r2, r0, r2
 800cc84:	6162      	str	r2, [r4, #20]
 800cc86:	e7de      	b.n	800cc46 <prints+0x32>
			padchar = '0';
 800cc88:	2630      	movs	r6, #48	; 0x30
 800cc8a:	e7e1      	b.n	800cc50 <prints+0x3c>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800cc8c:	6963      	ldr	r3, [r4, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	dde2      	ble.n	800cc58 <prints+0x44>
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 800cc92:	4631      	mov	r1, r6
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7ff ff9a 	bl	800cbce <strbuf_printchar>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	b310      	cbz	r0, 800cce4 <prints+0xd0>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800cc9e:	6963      	ldr	r3, [r4, #20]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	e7f2      	b.n	800cc8c <prints+0x78>
		len = strlen( apString );
 800cca6:	4628      	mov	r0, r5
 800cca8:	f7f3 fabc 	bl	8000224 <strlen>
		if( len < apBuf->flags.printLimit )
 800ccac:	69a7      	ldr	r7, [r4, #24]
 800ccae:	42b8      	cmp	r0, r7
 800ccb0:	dad8      	bge.n	800cc64 <prints+0x50>
			i = apBuf->flags.printLimit - len;
 800ccb2:	1a3f      	subs	r7, r7, r0
			for( ; i; i-- )
 800ccb4:	2f00      	cmp	r7, #0
 800ccb6:	d0d5      	beq.n	800cc64 <prints+0x50>
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 800ccb8:	2130      	movs	r1, #48	; 0x30
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7ff ff87 	bl	800cbce <strbuf_printchar>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	b178      	cbz	r0, 800cce4 <prints+0xd0>
			for( ; i; i-- )
 800ccc4:	3f01      	subs	r7, #1
 800ccc6:	e7f5      	b.n	800ccb4 <prints+0xa0>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800ccc8:	6963      	ldr	r3, [r4, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dd09      	ble.n	800cce2 <prints+0xce>
		if( !strbuf_printchar( apBuf, padchar ) )
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f7ff ff7c 	bl	800cbce <strbuf_printchar>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	b120      	cbz	r0, 800cce4 <prints+0xd0>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800ccda:	6963      	ldr	r3, [r4, #20]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	6163      	str	r3, [r4, #20]
 800cce0:	e7f2      	b.n	800ccc8 <prints+0xb4>
	return pdTRUE;
 800cce2:	2301      	movs	r3, #1
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce8:	08026c20 	.word	0x08026c20
 800ccec:	000200ff 	.word	0x000200ff
 800ccf0:	00020001 	.word	0x00020001

0800ccf4 <printi>:
{
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	4605      	mov	r5, r0
	register unsigned base = apBuf->flags.base;
 800ccfa:	6902      	ldr	r2, [r0, #16]
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800ccfc:	7f84      	ldrb	r4, [r0, #30]
 800ccfe:	f044 0402 	orr.w	r4, r4, #2
 800cd02:	7784      	strb	r4, [r0, #30]
	if( i == 0 )
 800cd04:	b161      	cbz	r1, 800cd20 <printi+0x2c>
 800cd06:	460b      	mov	r3, r1
 800cd08:	4610      	mov	r0, r2
	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 800cd0a:	7fac      	ldrb	r4, [r5, #30]
 800cd0c:	f014 0f01 	tst.w	r4, #1
 800cd10:	d011      	beq.n	800cd36 <printi+0x42>
 800cd12:	0fcc      	lsrs	r4, r1, #31
 800cd14:	2a0a      	cmp	r2, #10
 800cd16:	d11b      	bne.n	800cd50 <printi+0x5c>
 800cd18:	b1d4      	cbz	r4, 800cd50 <printi+0x5c>
		u = -i;
 800cd1a:	424b      	negs	r3, r1
		neg = 1;
 800cd1c:	2601      	movs	r6, #1
 800cd1e:	e00b      	b.n	800cd38 <printi+0x44>
		print_buf[ 0 ] = '0';
 800cd20:	2330      	movs	r3, #48	; 0x30
 800cd22:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[ 1 ] = '\0';
 800cd26:	2300      	movs	r3, #0
 800cd28:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints( apBuf, print_buf );
 800cd2c:	a901      	add	r1, sp, #4
 800cd2e:	f7ff ff71 	bl	800cc14 <prints>
 800cd32:	4603      	mov	r3, r0
 800cd34:	e038      	b.n	800cda8 <printi+0xb4>
	register int t, neg = 0;
 800cd36:	2600      	movs	r6, #0
	*s = '\0';
 800cd38:	2100      	movs	r1, #0
 800cd3a:	f88d 100f 	strb.w	r1, [sp, #15]
	switch( base )
 800cd3e:	2a0a      	cmp	r2, #10
 800cd40:	d035      	beq.n	800cdae <printi+0xba>
 800cd42:	2a10      	cmp	r2, #16
 800cd44:	d013      	beq.n	800cd6e <printi+0x7a>
 800cd46:	2a08      	cmp	r2, #8
 800cd48:	d031      	beq.n	800cdae <printi+0xba>
	s = print_buf + sizeof print_buf - 1;
 800cd4a:	f10d 040f 	add.w	r4, sp, #15
 800cd4e:	e01b      	b.n	800cd88 <printi+0x94>
	register int t, neg = 0;
 800cd50:	2600      	movs	r6, #0
 800cd52:	e7f1      	b.n	800cd38 <printi+0x44>
			*( --s ) = t + '0';
 800cd54:	3230      	adds	r2, #48	; 0x30
 800cd56:	f804 2d01 	strb.w	r2, [r4, #-1]!
			u >>= 4;
 800cd5a:	091b      	lsrs	r3, r3, #4
		while( u != 0 )
 800cd5c:	b1a3      	cbz	r3, 800cd88 <printi+0x94>
			t = u & 0xF;
 800cd5e:	f003 020f 	and.w	r2, r3, #15
			if( t >= 10 )
 800cd62:	2a09      	cmp	r2, #9
 800cd64:	ddf6      	ble.n	800cd54 <printi+0x60>
				t += apBuf->flags.letBase - '0' - 10;
 800cd66:	7f69      	ldrb	r1, [r5, #29]
 800cd68:	393a      	subs	r1, #58	; 0x3a
 800cd6a:	440a      	add	r2, r1
 800cd6c:	e7f2      	b.n	800cd54 <printi+0x60>
	switch( base )
 800cd6e:	f10d 040f 	add.w	r4, sp, #15
 800cd72:	e7f3      	b.n	800cd5c <printi+0x68>
			t = u % base;
 800cd74:	fbb3 f2f0 	udiv	r2, r3, r0
 800cd78:	fb00 3312 	mls	r3, r0, r2, r3
			*( --s ) = t + '0';
 800cd7c:	3330      	adds	r3, #48	; 0x30
 800cd7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
			u /= base;
 800cd82:	4613      	mov	r3, r2
		while( u )
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1f5      	bne.n	800cd74 <printi+0x80>
	if( neg != 0 )
 800cd88:	b14e      	cbz	r6, 800cd9e <printi+0xaa>
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 800cd8a:	696b      	ldr	r3, [r5, #20]
 800cd8c:	b11b      	cbz	r3, 800cd96 <printi+0xa2>
 800cd8e:	7f2b      	ldrb	r3, [r5, #28]
 800cd90:	f013 0f02 	tst.w	r3, #2
 800cd94:	d10e      	bne.n	800cdb4 <printi+0xc0>
			*( --s ) = '-';
 800cd96:	232d      	movs	r3, #45	; 0x2d
 800cd98:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cd9c:	3c01      	subs	r4, #1
	return prints( apBuf, s );
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	f7ff ff37 	bl	800cc14 <prints>
 800cda6:	4603      	mov	r3, r0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	b004      	add	sp, #16
 800cdac:	bd70      	pop	{r4, r5, r6, pc}
	switch( base )
 800cdae:	f10d 040f 	add.w	r4, sp, #15
 800cdb2:	e7e7      	b.n	800cd84 <printi+0x90>
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 800cdb4:	212d      	movs	r1, #45	; 0x2d
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f7ff ff09 	bl	800cbce <strbuf_printchar>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d0f2      	beq.n	800cda8 <printi+0xb4>
			--apBuf->flags.width;
 800cdc2:	696b      	ldr	r3, [r5, #20]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	616b      	str	r3, [r5, #20]
 800cdc8:	e7e9      	b.n	800cd9e <printi+0xaa>

0800cdca <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 800cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	4605      	mov	r5, r0
 800cdd0:	460e      	mov	r6, r1
	int iIndex;
	int iZeroStart = -1;
	int iZeroLength = 0;
	int iCurStart = 0;
	int iCurLength = 0;
 800cdd2:	2100      	movs	r1, #0
	int iCurStart = 0;
 800cdd4:	460c      	mov	r4, r1
	int iZeroLength = 0;
 800cdd6:	4688      	mov	r8, r1
	int iZeroStart = -1;
 800cdd8:	f04f 37ff 	mov.w	r7, #4294967295

	for( iIndex = 0; iIndex < 8; iIndex++ )
 800cddc:	460b      	mov	r3, r1
 800cdde:	e003      	b.n	800cde8 <printIPv6+0x1e>
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
		{
			if( iZeroLength < iCurLength )
			{
				iZeroLength = iCurLength;
 800cde0:	4688      	mov	r8, r1
				iZeroStart = iCurStart;
 800cde2:	4627      	mov	r7, r4
			}
			iCurLength = 0;
 800cde4:	2100      	movs	r1, #0
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800cde6:	3301      	adds	r3, #1
 800cde8:	2b07      	cmp	r3, #7
 800cdea:	dc13      	bgt.n	800ce14 <printIPv6+0x4a>
	uint16_t usValue = pusAddress[ iIndex ];
 800cdec:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
		if( usValue == 0 )
 800cdf0:	b910      	cbnz	r0, 800cdf8 <printIPv6+0x2e>
			if( iCurLength == 0 )
 800cdf2:	b901      	cbnz	r1, 800cdf6 <printIPv6+0x2c>
				iCurStart = iIndex;
 800cdf4:	461c      	mov	r4, r3
			iCurLength++;
 800cdf6:	3101      	adds	r1, #1
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800cdf8:	2b07      	cmp	r3, #7
 800cdfa:	bf14      	ite	ne
 800cdfc:	2200      	movne	r2, #0
 800cdfe:	2201      	moveq	r2, #1
 800ce00:	2800      	cmp	r0, #0
 800ce02:	bf18      	it	ne
 800ce04:	f042 0201 	orrne.w	r2, r2, #1
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d0ec      	beq.n	800cde6 <printIPv6+0x1c>
			if( iZeroLength < iCurLength )
 800ce0c:	4588      	cmp	r8, r1
 800ce0e:	dbe7      	blt.n	800cde0 <printIPv6+0x16>
			iCurLength = 0;
 800ce10:	2100      	movs	r1, #0
 800ce12:	e7e8      	b.n	800cde6 <printIPv6+0x1c>
		}
	}

	apBuf->flags.base = 16;
 800ce14:	2310      	movs	r3, #16
 800ce16:	612b      	str	r3, [r5, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 800ce18:	2361      	movs	r3, #97	; 0x61
 800ce1a:	776b      	strb	r3, [r5, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 800ce1c:	2400      	movs	r4, #0
 800ce1e:	e016      	b.n	800ce4e <printIPv6+0x84>
	{
		if( iIndex == iZeroStart )
		{
			iIndex += iZeroLength - 1;
 800ce20:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce24:	441c      	add	r4, r3
			strbuf_printchar( apBuf, ':' );
 800ce26:	213a      	movs	r1, #58	; 0x3a
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f7ff fed0 	bl	800cbce <strbuf_printchar>
			if( iIndex == 7 )
 800ce2e:	2c07      	cmp	r4, #7
 800ce30:	d10c      	bne.n	800ce4c <printIPv6+0x82>
			{
				strbuf_printchar( apBuf, ':' );
 800ce32:	213a      	movs	r1, #58	; 0x3a
 800ce34:	4628      	mov	r0, r5
 800ce36:	f7ff feca 	bl	800cbce <strbuf_printchar>
 800ce3a:	e007      	b.n	800ce4c <printIPv6+0x82>
		{
			if( iIndex > 0 )
			{
				strbuf_printchar( apBuf, ':' );
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 800ce3c:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 800ce40:	f7ff feac 	bl	800cb9c <usNetToHost>
 800ce44:	4601      	mov	r1, r0
 800ce46:	4628      	mov	r0, r5
 800ce48:	f7ff ff54 	bl	800ccf4 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800ce4c:	3401      	adds	r4, #1
 800ce4e:	2c07      	cmp	r4, #7
 800ce50:	dc08      	bgt.n	800ce64 <printIPv6+0x9a>
		if( iIndex == iZeroStart )
 800ce52:	42bc      	cmp	r4, r7
 800ce54:	d0e4      	beq.n	800ce20 <printIPv6+0x56>
			if( iIndex > 0 )
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	ddf0      	ble.n	800ce3c <printIPv6+0x72>
				strbuf_printchar( apBuf, ':' );
 800ce5a:	213a      	movs	r1, #58	; 0x3a
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f7ff feb6 	bl	800cbce <strbuf_printchar>
 800ce62:	e7eb      	b.n	800ce3c <printIPv6+0x72>
		}
	}

	return pdTRUE;
}
 800ce64:	2001      	movs	r0, #1
 800ce66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce6a <sprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 800ce6a:	b40e      	push	{r1, r2, r3}
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	b08b      	sub	sp, #44	; 0x2c
 800ce70:	4601      	mov	r1, r0
 800ce72:	ab0d      	add	r3, sp, #52	; 0x34
 800ce74:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list args;

	va_start( args,  apFmt );
 800ce78:	9309      	str	r3, [sp, #36]	; 0x24
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 800ce7a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800ce7e:	a801      	add	r0, sp, #4
 800ce80:	f7ff fe9a 	bl	800cbb8 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 800ce84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce86:	4621      	mov	r1, r4
 800ce88:	a801      	add	r0, sp, #4
 800ce8a:	f000 f823 	bl	800ced4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
}
 800ce8e:	9804      	ldr	r0, [sp, #16]
 800ce90:	b00b      	add	sp, #44	; 0x2c
 800ce92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce96:	b003      	add	sp, #12
 800ce98:	4770      	bx	lr
	...

0800ce9c <printIp>:
{
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	4604      	mov	r4, r0
	sprintf( print_buf, "%u.%u.%u.%u",
 800cea2:	b2cb      	uxtb	r3, r1
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800ceb0:	0e0a      	lsrs	r2, r1, #24
 800ceb2:	4907      	ldr	r1, [pc, #28]	; (800ced0 <printIp+0x34>)
 800ceb4:	a802      	add	r0, sp, #8
 800ceb6:	f7ff ffd8 	bl	800ce6a <sprintf>
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800ceba:	7fa3      	ldrb	r3, [r4, #30]
 800cebc:	f043 0302 	orr.w	r3, r3, #2
 800cec0:	77a3      	strb	r3, [r4, #30]
	prints( apBuf, print_buf );
 800cec2:	a902      	add	r1, sp, #8
 800cec4:	4620      	mov	r0, r4
 800cec6:	f7ff fea5 	bl	800cc14 <prints>
}
 800ceca:	2001      	movs	r0, #1
 800cecc:	b006      	add	sp, #24
 800cece:	bd10      	pop	{r4, pc}
 800ced0:	08026c14 	.word	0x08026c14

0800ced4 <tiny_print>:
{
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	9201      	str	r2, [sp, #4]
		int ch = *( format++ );
 800cede:	1c6e      	adds	r6, r5, #1
 800cee0:	782d      	ldrb	r5, [r5, #0]
		if( ch != '%' )
 800cee2:	2d25      	cmp	r5, #37	; 0x25
 800cee4:	d128      	bne.n	800cf38 <tiny_print+0x64>
		int ch = *( format++ );
 800cee6:	4633      	mov	r3, r6
		ch = *( format++ );
 800cee8:	1c5d      	adds	r5, r3, #1
 800ceea:	7819      	ldrb	r1, [r3, #0]
		if( ch == '\0' )
 800ceec:	2900      	cmp	r1, #0
 800ceee:	f000 809d 	beq.w	800d02c <tiny_print+0x158>
		if( ch == '%' )
 800cef2:	2925      	cmp	r1, #37	; 0x25
 800cef4:	d038      	beq.n	800cf68 <tiny_print+0x94>
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 800cef6:	2000      	movs	r0, #0
 800cef8:	6120      	str	r0, [r4, #16]
 800cefa:	6160      	str	r0, [r4, #20]
 800cefc:	61a0      	str	r0, [r4, #24]
 800cefe:	61e0      	str	r0, [r4, #28]
		if( ch == '-' )
 800cf00:	292d      	cmp	r1, #45	; 0x2d
 800cf02:	d13d      	bne.n	800cf80 <tiny_print+0xac>
			ch = *( format++ );
 800cf04:	1c9d      	adds	r5, r3, #2
 800cf06:	7859      	ldrb	r1, [r3, #1]
			apBuf->flags.pad = PAD_RIGHT;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	7723      	strb	r3, [r4, #28]
 800cf0c:	e038      	b.n	800cf80 <tiny_print+0xac>
		vOutputChar( ( char ) c, xTicksToWait );
 800cf0e:	2114      	movs	r1, #20
 800cf10:	4628      	mov	r0, r5
 800cf12:	f7ff f9d6 	bl	800c2c2 <vOutputChar>
		if( c == 0 )
 800cf16:	b31d      	cbz	r5, 800cf60 <tiny_print+0x8c>
		apStr->curLen++;
 800cf18:	68e3      	ldr	r3, [r4, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60e3      	str	r3, [r4, #12]
		return pdTRUE;
 800cf1e:	2201      	movs	r2, #1
 800cf20:	e002      	b.n	800cf28 <tiny_print+0x54>
	if( apStr->str == apStr->nulPos )
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d017      	beq.n	800cf56 <tiny_print+0x82>
	return pdFALSE;
 800cf26:	2200      	movs	r2, #0
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 800cf28:	2a00      	cmp	r2, #0
 800cf2a:	f000 8083 	beq.w	800d034 <tiny_print+0x160>
				ch = *( format++ );
 800cf2e:	1c73      	adds	r3, r6, #1
 800cf30:	7835      	ldrb	r5, [r6, #0]
			} while( ch != '%' );
 800cf32:	2d25      	cmp	r5, #37	; 0x25
 800cf34:	d0d8      	beq.n	800cee8 <tiny_print+0x14>
				ch = *( format++ );
 800cf36:	461e      	mov	r6, r3
	if( apStr->str == NULL )
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d0e7      	beq.n	800cf0e <tiny_print+0x3a>
	if( apStr->str < apStr->nulPos )
 800cf3e:	68a2      	ldr	r2, [r4, #8]
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d2ee      	bcs.n	800cf22 <tiny_print+0x4e>
		*(apStr->str++) = c;
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	6022      	str	r2, [r4, #0]
 800cf48:	701d      	strb	r5, [r3, #0]
		if( c == 0 )
 800cf4a:	b15d      	cbz	r5, 800cf64 <tiny_print+0x90>
		apStr->curLen++;
 800cf4c:	68e3      	ldr	r3, [r4, #12]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	60e3      	str	r3, [r4, #12]
		return pdTRUE;
 800cf52:	2201      	movs	r2, #1
 800cf54:	e7e8      	b.n	800cf28 <tiny_print+0x54>
		*( apStr->str++ ) = '\0';
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	6022      	str	r2, [r4, #0]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e7e3      	b.n	800cf28 <tiny_print+0x54>
			return pdFALSE;
 800cf60:	2200      	movs	r2, #0
 800cf62:	e7e1      	b.n	800cf28 <tiny_print+0x54>
			return pdFALSE;
 800cf64:	2200      	movs	r2, #0
 800cf66:	e7df      	b.n	800cf28 <tiny_print+0x54>
			if( strbuf_printchar( apBuf, ch ) == 0 )
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7ff fe30 	bl	800cbce <strbuf_printchar>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d060      	beq.n	800d034 <tiny_print+0x160>
 800cf72:	e7b4      	b.n	800cede <tiny_print+0xa>
			ch = *( format++ );
 800cf74:	7829      	ldrb	r1, [r5, #0]
			apBuf->flags.pad |= PAD_ZERO;
 800cf76:	7f23      	ldrb	r3, [r4, #28]
 800cf78:	f043 0302 	orr.w	r3, r3, #2
 800cf7c:	7723      	strb	r3, [r4, #28]
			ch = *( format++ );
 800cf7e:	3501      	adds	r5, #1
		while( ch == '0' )
 800cf80:	2930      	cmp	r1, #48	; 0x30
 800cf82:	d0f7      	beq.n	800cf74 <tiny_print+0xa0>
		if( ch == '*' )
 800cf84:	292a      	cmp	r1, #42	; 0x2a
 800cf86:	d110      	bne.n	800cfaa <tiny_print+0xd6>
			ch = *( format++ );
 800cf88:	7829      	ldrb	r1, [r5, #0]
			apBuf->flags.width = va_arg( args, int );
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	9201      	str	r2, [sp, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6163      	str	r3, [r4, #20]
			ch = *( format++ );
 800cf94:	3501      	adds	r5, #1
 800cf96:	e00c      	b.n	800cfb2 <tiny_print+0xde>
				apBuf->flags.width *= 10;
 800cf98:	6963      	ldr	r3, [r4, #20]
 800cf9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cf9e:	005a      	lsls	r2, r3, #1
				apBuf->flags.width += ch - '0';
 800cfa0:	3930      	subs	r1, #48	; 0x30
 800cfa2:	440a      	add	r2, r1
 800cfa4:	6162      	str	r2, [r4, #20]
				ch = *( format++ );
 800cfa6:	7829      	ldrb	r1, [r5, #0]
 800cfa8:	3501      	adds	r5, #1
			while( ch >= '0' && ch <= '9' )
 800cfaa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cfae:	2b09      	cmp	r3, #9
 800cfb0:	d9f2      	bls.n	800cf98 <tiny_print+0xc4>
		if( ch == '.' )
 800cfb2:	292e      	cmp	r1, #46	; 0x2e
 800cfb4:	d040      	beq.n	800d038 <tiny_print+0x164>
		if( apBuf->flags.printLimit == 0 )
 800cfb6:	69a3      	ldr	r3, [r4, #24]
 800cfb8:	b90b      	cbnz	r3, 800cfbe <tiny_print+0xea>
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	61a3      	str	r3, [r4, #24]
		if( ch == 'p' )
 800cfbe:	2970      	cmp	r1, #112	; 0x70
 800cfc0:	d056      	beq.n	800d070 <tiny_print+0x19c>
		if( ch == 's' )
 800cfc2:	2973      	cmp	r1, #115	; 0x73
 800cfc4:	d066      	beq.n	800d094 <tiny_print+0x1c0>
		if( ch == 'c' )
 800cfc6:	2963      	cmp	r1, #99	; 0x63
 800cfc8:	d072      	beq.n	800d0b0 <tiny_print+0x1dc>
		if( ch == 'l' )
 800cfca:	296c      	cmp	r1, #108	; 0x6c
 800cfcc:	d07a      	beq.n	800d0c4 <tiny_print+0x1f0>
		if( ch == 'L' )
 800cfce:	294c      	cmp	r1, #76	; 0x4c
 800cfd0:	d07f      	beq.n	800d0d2 <tiny_print+0x1fe>
		apBuf->flags.base = 10;
 800cfd2:	230a      	movs	r3, #10
 800cfd4:	6123      	str	r3, [r4, #16]
		apBuf->flags.letBase = 'a';
 800cfd6:	2361      	movs	r3, #97	; 0x61
 800cfd8:	7763      	strb	r3, [r4, #29]
		if( ch == 'd' || ch == 'u' )
 800cfda:	2964      	cmp	r1, #100	; 0x64
 800cfdc:	bf14      	ite	ne
 800cfde:	2300      	movne	r3, #0
 800cfe0:	2301      	moveq	r3, #1
 800cfe2:	2975      	cmp	r1, #117	; 0x75
 800cfe4:	bf14      	ite	ne
 800cfe6:	461a      	movne	r2, r3
 800cfe8:	f043 0201 	orreq.w	r2, r3, #1
 800cfec:	2a00      	cmp	r2, #0
 800cfee:	d177      	bne.n	800d0e0 <tiny_print+0x20c>
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800cff0:	2310      	movs	r3, #16
 800cff2:	6123      	str	r3, [r4, #16]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800cff4:	2978      	cmp	r1, #120	; 0x78
 800cff6:	f000 8082 	beq.w	800d0fe <tiny_print+0x22a>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 800cffa:	2958      	cmp	r1, #88	; 0x58
 800cffc:	bf18      	it	ne
 800cffe:	2978      	cmpne	r1, #120	; 0x78
 800d000:	d004      	beq.n	800d00c <tiny_print+0x138>
 800d002:	f1a1 036f 	sub.w	r3, r1, #111	; 0x6f
 800d006:	2b01      	cmp	r3, #1
 800d008:	f63f af69 	bhi.w	800cede <tiny_print+0xa>
			if( ch == 'X' )
 800d00c:	2958      	cmp	r1, #88	; 0x58
 800d00e:	f000 808a 	beq.w	800d126 <tiny_print+0x252>
			else if( ch == 'o' )
 800d012:	296f      	cmp	r1, #111	; 0x6f
 800d014:	f000 808a 	beq.w	800d12c <tiny_print+0x258>
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	1d1a      	adds	r2, r3, #4
 800d01c:	9201      	str	r2, [sp, #4]
 800d01e:	6819      	ldr	r1, [r3, #0]
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fe67 	bl	800ccf4 <printi>
 800d026:	2800      	cmp	r0, #0
 800d028:	f47f af59 	bne.w	800cede <tiny_print+0xa>
	strbuf_printchar( apBuf, '\0' );
 800d02c:	2100      	movs	r1, #0
 800d02e:	4620      	mov	r0, r4
 800d030:	f7ff fdcd 	bl	800cbce <strbuf_printchar>
}
 800d034:	b002      	add	sp, #8
 800d036:	bd70      	pop	{r4, r5, r6, pc}
			ch = *( format++ );
 800d038:	1c6b      	adds	r3, r5, #1
 800d03a:	7829      	ldrb	r1, [r5, #0]
			if( ch == '*' )
 800d03c:	292a      	cmp	r1, #42	; 0x2a
 800d03e:	d001      	beq.n	800d044 <tiny_print+0x170>
 800d040:	461d      	mov	r5, r3
 800d042:	e010      	b.n	800d066 <tiny_print+0x192>
				apBuf->flags.printLimit = va_arg( args, int );
 800d044:	9b01      	ldr	r3, [sp, #4]
 800d046:	1d1a      	adds	r2, r3, #4
 800d048:	9201      	str	r2, [sp, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	61a3      	str	r3, [r4, #24]
				ch = *( format++ );
 800d04e:	7869      	ldrb	r1, [r5, #1]
 800d050:	3502      	adds	r5, #2
 800d052:	e7b0      	b.n	800cfb6 <tiny_print+0xe2>
					apBuf->flags.printLimit *= 10;
 800d054:	69a3      	ldr	r3, [r4, #24]
 800d056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d05a:	005a      	lsls	r2, r3, #1
					apBuf->flags.printLimit += ch - '0';
 800d05c:	3930      	subs	r1, #48	; 0x30
 800d05e:	440a      	add	r2, r1
 800d060:	61a2      	str	r2, [r4, #24]
					ch = *( format++ );
 800d062:	7829      	ldrb	r1, [r5, #0]
 800d064:	3501      	adds	r5, #1
				while( ch >= '0' && ch <= '9' )
 800d066:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d9f2      	bls.n	800d054 <tiny_print+0x180>
 800d06e:	e7a2      	b.n	800cfb6 <tiny_print+0xe2>
			if( format[0] == 'i' && format[1] == 'p' )
 800d070:	782b      	ldrb	r3, [r5, #0]
 800d072:	2b69      	cmp	r3, #105	; 0x69
 800d074:	d1a5      	bne.n	800cfc2 <tiny_print+0xee>
 800d076:	786b      	ldrb	r3, [r5, #1]
 800d078:	2b70      	cmp	r3, #112	; 0x70
 800d07a:	d1a2      	bne.n	800cfc2 <tiny_print+0xee>
				format += 2;	/* eat the "pi" of "pip" */
 800d07c:	3502      	adds	r5, #2
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	1d1a      	adds	r2, r3, #4
 800d082:	9201      	str	r2, [sp, #4]
 800d084:	6819      	ldr	r1, [r3, #0]
 800d086:	4620      	mov	r0, r4
 800d088:	f7ff fe9f 	bl	800cdca <printIPv6>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f47f af26 	bne.w	800cede <tiny_print+0xa>
 800d092:	e7cb      	b.n	800d02c <tiny_print+0x158>
			register char *s = ( char * )va_arg( args, int );
 800d094:	9b01      	ldr	r3, [sp, #4]
 800d096:	1d1a      	adds	r2, r3, #4
 800d098:	9201      	str	r2, [sp, #4]
 800d09a:	6819      	ldr	r1, [r3, #0]
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 800d09c:	b131      	cbz	r1, 800d0ac <tiny_print+0x1d8>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f7ff fdb8 	bl	800cc14 <prints>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	f47f af1a 	bne.w	800cede <tiny_print+0xa>
 800d0aa:	e7bf      	b.n	800d02c <tiny_print+0x158>
 800d0ac:	4921      	ldr	r1, [pc, #132]	; (800d134 <tiny_print+0x260>)
 800d0ae:	e7f6      	b.n	800d09e <tiny_print+0x1ca>
			scr[0] = ( char ) va_arg( args, int );
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	1d1a      	adds	r2, r3, #4
 800d0b4:	9201      	str	r2, [sp, #4]
			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 800d0b6:	7819      	ldrb	r1, [r3, #0]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f7ff fd88 	bl	800cbce <strbuf_printchar>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0b8      	beq.n	800d034 <tiny_print+0x160>
 800d0c2:	e70c      	b.n	800cede <tiny_print+0xa>
			ch = *( format++ );
 800d0c4:	7829      	ldrb	r1, [r5, #0]
			apBuf->flags.long32 = 1;
 800d0c6:	7fa3      	ldrb	r3, [r4, #30]
 800d0c8:	f043 0304 	orr.w	r3, r3, #4
 800d0cc:	77a3      	strb	r3, [r4, #30]
			ch = *( format++ );
 800d0ce:	3501      	adds	r5, #1
 800d0d0:	e77d      	b.n	800cfce <tiny_print+0xfa>
			ch = *( format++ );
 800d0d2:	7829      	ldrb	r1, [r5, #0]
			apBuf->flags.long64 = 1;
 800d0d4:	7fa3      	ldrb	r3, [r4, #30]
 800d0d6:	f043 0308 	orr.w	r3, r3, #8
 800d0da:	77a3      	strb	r3, [r4, #30]
			ch = *( format++ );
 800d0dc:	3501      	adds	r5, #1
 800d0de:	e778      	b.n	800cfd2 <tiny_print+0xfe>
			apBuf->flags.isSigned = ( ch == 'd' );
 800d0e0:	7fa2      	ldrb	r2, [r4, #30]
 800d0e2:	f363 0200 	bfi	r2, r3, #0, #1
 800d0e6:	77a2      	strb	r2, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	1d1a      	adds	r2, r3, #4
 800d0ec:	9201      	str	r2, [sp, #4]
 800d0ee:	6819      	ldr	r1, [r3, #0]
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f7ff fdff 	bl	800ccf4 <printi>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f47f aef1 	bne.w	800cede <tiny_print+0xa>
 800d0fc:	e796      	b.n	800d02c <tiny_print+0x158>
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800d0fe:	782b      	ldrb	r3, [r5, #0]
 800d100:	2b69      	cmp	r3, #105	; 0x69
 800d102:	f47f af7a 	bne.w	800cffa <tiny_print+0x126>
 800d106:	786b      	ldrb	r3, [r5, #1]
 800d108:	2b70      	cmp	r3, #112	; 0x70
 800d10a:	f47f af76 	bne.w	800cffa <tiny_print+0x126>
			format += 2;	/* eat the "xi" of "xip" */
 800d10e:	3502      	adds	r5, #2
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 800d110:	9b01      	ldr	r3, [sp, #4]
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	9201      	str	r2, [sp, #4]
 800d116:	6819      	ldr	r1, [r3, #0]
 800d118:	4620      	mov	r0, r4
 800d11a:	f7ff febf 	bl	800ce9c <printIp>
 800d11e:	2800      	cmp	r0, #0
 800d120:	f47f aedd 	bne.w	800cede <tiny_print+0xa>
 800d124:	e782      	b.n	800d02c <tiny_print+0x158>
				apBuf->flags.letBase = 'A';
 800d126:	2341      	movs	r3, #65	; 0x41
 800d128:	7763      	strb	r3, [r4, #29]
 800d12a:	e775      	b.n	800d018 <tiny_print+0x144>
				apBuf->flags.base = 8;
 800d12c:	2308      	movs	r3, #8
 800d12e:	6123      	str	r3, [r4, #16]
 800d130:	e772      	b.n	800d018 <tiny_print+0x144>
 800d132:	bf00      	nop
 800d134:	08026c28 	.word	0x08026c28

0800d138 <snprintf>:
{
 800d138:	b40c      	push	{r2, r3}
 800d13a:	b510      	push	{r4, lr}
 800d13c:	b08a      	sub	sp, #40	; 0x28
 800d13e:	ab0c      	add	r3, sp, #48	; 0x30
 800d140:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start( args,  apFmt );
 800d144:	9309      	str	r3, [sp, #36]	; 0x24
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 800d146:	1842      	adds	r2, r0, r1
 800d148:	4601      	mov	r1, r0
 800d14a:	a801      	add	r0, sp, #4
 800d14c:	f7ff fd34 	bl	800cbb8 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 800d150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d152:	4621      	mov	r1, r4
 800d154:	a801      	add	r0, sp, #4
 800d156:	f7ff febd 	bl	800ced4 <tiny_print>
}
 800d15a:	9804      	ldr	r0, [sp, #16]
 800d15c:	b00a      	add	sp, #40	; 0x28
 800d15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d162:	b002      	add	sp, #8
 800d164:	4770      	bx	lr
	...

0800d168 <SDRAMDISK_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
  return Stat;
 800d168:	4b01      	ldr	r3, [pc, #4]	; (800d170 <SDRAMDISK_status+0x8>)
 800d16a:	7818      	ldrb	r0, [r3, #0]
}
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	200000bc 	.word	0x200000bc

0800d174 <SDRAMDISK_ioctl>:
//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
	DRESULT res = RES_ERROR;

	if (Stat & STA_NOINIT)
 800d174:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <SDRAMDISK_ioctl+0x3c>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	f013 0f01 	tst.w	r3, #1
 800d17c:	d001      	beq.n	800d182 <SDRAMDISK_ioctl+0xe>
		return RES_NOTRDY;
 800d17e:	2003      	movs	r0, #3
 800d180:	4770      	bx	lr

	switch (cmd) {
 800d182:	2903      	cmp	r1, #3
 800d184:	d812      	bhi.n	800d1ac <SDRAMDISK_ioctl+0x38>
 800d186:	e8df f001 	tbb	[pc, r1]
 800d18a:	0402      	.short	0x0402
 800d18c:	0d08      	.short	0x0d08
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 800d18e:	2000      	movs	r0, #0
 800d190:	4770      	bx	lr
		break;

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 800d192:	4b08      	ldr	r3, [pc, #32]	; (800d1b4 <SDRAMDISK_ioctl+0x40>)
 800d194:	6013      	str	r3, [r2, #0]
		res = RES_OK;
 800d196:	2000      	movs	r0, #0
		break;
 800d198:	4770      	bx	lr

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 800d19a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d19e:	8013      	strh	r3, [r2, #0]
		res = RES_OK;
 800d1a0:	2000      	movs	r0, #0
		break;
 800d1a2:	4770      	bx	lr

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
 800d1a8:	2000      	movs	r0, #0
		break;
 800d1aa:	4770      	bx	lr

	default:
		res = RES_PARERR;
 800d1ac:	2004      	movs	r0, #4
	}

	return res;
}
 800d1ae:	4770      	bx	lr
 800d1b0:	200000bc 	.word	0x200000bc
 800d1b4:	007ff800 	.word	0x007ff800

0800d1b8 <SDRAMDISK_initialize>:
{
 800d1b8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	4b06      	ldr	r3, [pc, #24]	; (800d1d8 <SDRAMDISK_initialize+0x20>)
 800d1be:	701a      	strb	r2, [r3, #0]
  if(BSP_SDRAM_Init() == SDRAM_OK)
 800d1c0:	f7fe fb48 	bl	800b854 <BSP_SDRAM_Init>
 800d1c4:	b920      	cbnz	r0, 800d1d0 <SDRAMDISK_initialize+0x18>
    Stat &= ~STA_NOINIT;
 800d1c6:	4a04      	ldr	r2, [pc, #16]	; (800d1d8 <SDRAMDISK_initialize+0x20>)
 800d1c8:	7813      	ldrb	r3, [r2, #0]
 800d1ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d1ce:	7013      	strb	r3, [r2, #0]
  return Stat;
 800d1d0:	4b01      	ldr	r3, [pc, #4]	; (800d1d8 <SDRAMDISK_initialize+0x20>)
 800d1d2:	7818      	ldrb	r0, [r3, #0]
}
 800d1d4:	bd08      	pop	{r3, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200000bc 	.word	0x200000bc

0800d1dc <SDRAMDISK_read>:
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800d1dc:	b508      	push	{r3, lr}
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800d1de:	025b      	lsls	r3, r3, #9
			+ (sector * BLOCK_SIZE));
 800d1e0:	4803      	ldr	r0, [pc, #12]	; (800d1f0 <SDRAMDISK_read+0x14>)
 800d1e2:	4410      	add	r0, r2
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 800d1e4:	089a      	lsrs	r2, r3, #2
 800d1e6:	0240      	lsls	r0, r0, #9
 800d1e8:	f7fe fb36 	bl	800b858 <BSP_SDRAM_ReadData>
}
 800d1ec:	bd08      	pop	{r3, pc}
 800d1ee:	bf00      	nop
 800d1f0:	00600800 	.word	0x00600800

0800d1f4 <SDRAMDISK_write>:
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800d1f4:	b508      	push	{r3, lr}
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800d1f6:	025b      	lsls	r3, r3, #9
			+ (sector * BLOCK_SIZE));
 800d1f8:	4803      	ldr	r0, [pc, #12]	; (800d208 <SDRAMDISK_write+0x14>)
 800d1fa:	4410      	add	r0, r2
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 800d1fc:	089a      	lsrs	r2, r3, #2
 800d1fe:	0240      	lsls	r0, r0, #9
 800d200:	f7fe fb36 	bl	800b870 <BSP_SDRAM_WriteData>
}
 800d204:	bd08      	pop	{r3, pc}
 800d206:	bf00      	nop
 800d208:	00600800 	.word	0x00600800

0800d20c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d20c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d20e:	2003      	movs	r0, #3
 800d210:	f7f4 fc30 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800d214:	2200      	movs	r2, #0
 800d216:	4611      	mov	r1, r2
 800d218:	f06f 000b 	mvn.w	r0, #11
 800d21c:	f7f4 fc3c 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800d220:	2200      	movs	r2, #0
 800d222:	4611      	mov	r1, r2
 800d224:	f06f 000a 	mvn.w	r0, #10
 800d228:	f7f4 fc36 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800d22c:	2200      	movs	r2, #0
 800d22e:	4611      	mov	r1, r2
 800d230:	f06f 0009 	mvn.w	r0, #9
 800d234:	f7f4 fc30 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800d238:	2200      	movs	r2, #0
 800d23a:	4611      	mov	r1, r2
 800d23c:	f06f 0004 	mvn.w	r0, #4
 800d240:	f7f4 fc2a 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800d244:	2200      	movs	r2, #0
 800d246:	4611      	mov	r1, r2
 800d248:	f06f 0003 	mvn.w	r0, #3
 800d24c:	f7f4 fc24 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d250:	2200      	movs	r2, #0
 800d252:	210f      	movs	r1, #15
 800d254:	f06f 0001 	mvn.w	r0, #1
 800d258:	f7f4 fc1e 	bl	8001a98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800d25c:	2200      	movs	r2, #0
 800d25e:	210f      	movs	r1, #15
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	f7f4 fc18 	bl	8001a98 <HAL_NVIC_SetPriority>
 800d268:	bd08      	pop	{r3, pc}
	...

0800d26c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800d26c:	6802      	ldr	r2, [r0, #0]
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <HAL_ADC_MspInit+0x50>)
 800d270:	429a      	cmp	r2, r3
 800d272:	d000      	beq.n	800d276 <HAL_ADC_MspInit+0xa>
 800d274:	4770      	bx	lr
{
 800d276:	b530      	push	{r4, r5, lr}
 800d278:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800d27a:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 800d27e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d284:	645a      	str	r2, [r3, #68]	; 0x44
 800d286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	9b00      	ldr	r3, [sp, #0]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800d290:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800d294:	9301      	str	r3, [sp, #4]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d296:	2503      	movs	r5, #3
 800d298:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d29a:	2400      	movs	r4, #0
 800d29c:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d29e:	a901      	add	r1, sp, #4
 800d2a0:	4807      	ldr	r0, [pc, #28]	; (800d2c0 <HAL_ADC_MspInit+0x54>)
 800d2a2:	f7f4 fe59 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d2aa:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2ac:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800d2ae:	a901      	add	r1, sp, #4
 800d2b0:	4804      	ldr	r0, [pc, #16]	; (800d2c4 <HAL_ADC_MspInit+0x58>)
 800d2b2:	f7f4 fe51 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800d2b6:	b007      	add	sp, #28
 800d2b8:	bd30      	pop	{r4, r5, pc}
 800d2ba:	bf00      	nop
 800d2bc:	40012200 	.word	0x40012200
 800d2c0:	40021400 	.word	0x40021400
 800d2c4:	40020000 	.word	0x40020000

0800d2c8 <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 800d2c8:	6802      	ldr	r2, [r0, #0]
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <HAL_CRC_MspInit+0x28>)
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d000      	beq.n	800d2d2 <HAL_CRC_MspInit+0xa>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800d2d0:	4770      	bx	lr
{
 800d2d2:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800d2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d2de:	631a      	str	r2, [r3, #48]	; 0x30
 800d2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	9b01      	ldr	r3, [sp, #4]
}
 800d2ea:	b002      	add	sp, #8
 800d2ec:	e7f0      	b.n	800d2d0 <HAL_CRC_MspInit+0x8>
 800d2ee:	bf00      	nop
 800d2f0:	40023000 	.word	0x40023000

0800d2f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 800d2f4:	6802      	ldr	r2, [r0, #0]
 800d2f6:	4b11      	ldr	r3, [pc, #68]	; (800d33c <HAL_TIM_Base_MspInit+0x48>)
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d000      	beq.n	800d2fe <HAL_TIM_Base_MspInit+0xa>
 800d2fc:	4770      	bx	lr
{
 800d2fe:	b500      	push	{lr}
 800d300:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d302:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800d306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d308:	f042 0201 	orr.w	r2, r2, #1
 800d30c:	645a      	str	r2, [r3, #68]	; 0x44
 800d30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800d318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d31c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d31e:	2302      	movs	r3, #2
 800d320:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d322:	2300      	movs	r3, #0
 800d324:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d326:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d328:	2301      	movs	r3, #1
 800d32a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800d32c:	a901      	add	r1, sp, #4
 800d32e:	4804      	ldr	r0, [pc, #16]	; (800d340 <HAL_TIM_Base_MspInit+0x4c>)
 800d330:	f7f4 fe12 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800d334:	b007      	add	sp, #28
 800d336:	f85d fb04 	ldr.w	pc, [sp], #4
 800d33a:	bf00      	nop
 800d33c:	40010000 	.word	0x40010000
 800d340:	40020000 	.word	0x40020000

0800d344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d344:	6802      	ldr	r2, [r0, #0]
 800d346:	4b15      	ldr	r3, [pc, #84]	; (800d39c <HAL_UART_MspInit+0x58>)
 800d348:	429a      	cmp	r2, r3
 800d34a:	d000      	beq.n	800d34e <HAL_UART_MspInit+0xa>
 800d34c:	4770      	bx	lr
{
 800d34e:	b570      	push	{r4, r5, r6, lr}
 800d350:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d352:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800d356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d358:	f042 0210 	orr.w	r2, r2, #16
 800d35c:	645a      	str	r2, [r3, #68]	; 0x44
 800d35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800d368:	2380      	movs	r3, #128	; 0x80
 800d36a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d36c:	2602      	movs	r6, #2
 800d36e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d370:	2400      	movs	r4, #0
 800d372:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d374:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d376:	2507      	movs	r5, #7
 800d378:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800d37a:	a901      	add	r1, sp, #4
 800d37c:	4808      	ldr	r0, [pc, #32]	; (800d3a0 <HAL_UART_MspInit+0x5c>)
 800d37e:	f7f4 fdeb 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800d382:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d386:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d388:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d38c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d38e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800d390:	a901      	add	r1, sp, #4
 800d392:	4804      	ldr	r0, [pc, #16]	; (800d3a4 <HAL_UART_MspInit+0x60>)
 800d394:	f7f4 fde0 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d398:	b006      	add	sp, #24
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	40011000 	.word	0x40011000
 800d3a0:	40020400 	.word	0x40020400
 800d3a4:	40020000 	.word	0x40020000

0800d3a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d3a8:	b500      	push	{lr}
 800d3aa:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	201c      	movs	r0, #28
 800d3b2:	f7f4 fb71 	bl	8001a98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800d3b6:	201c      	movs	r0, #28
 800d3b8:	f7f4 fb9e 	bl	8001af8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800d3bc:	4b15      	ldr	r3, [pc, #84]	; (800d414 <HAL_InitTick+0x6c>)
 800d3be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3c0:	f042 0201 	orr.w	r2, r2, #1
 800d3c4:	641a      	str	r2, [r3, #64]	; 0x40
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d3d0:	a902      	add	r1, sp, #8
 800d3d2:	a803      	add	r0, sp, #12
 800d3d4:	f7f6 fae0 	bl	8003998 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800d3d8:	f7f6 fabe 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 800d3dc:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800d3de:	480e      	ldr	r0, [pc, #56]	; (800d418 <HAL_InitTick+0x70>)
 800d3e0:	fba0 2303 	umull	r2, r3, r0, r3
 800d3e4:	0c9b      	lsrs	r3, r3, #18
 800d3e6:	3b01      	subs	r3, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800d3e8:	480c      	ldr	r0, [pc, #48]	; (800d41c <HAL_InitTick+0x74>)
 800d3ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d3ee:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800d3f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d3f4:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800d3f6:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3fc:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800d3fe:	f7f7 f827 	bl	8004450 <HAL_TIM_Base_Init>
 800d402:	b118      	cbz	r0, 800d40c <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800d404:	2001      	movs	r0, #1
}
 800d406:	b009      	add	sp, #36	; 0x24
 800d408:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim2);
 800d40c:	4803      	ldr	r0, [pc, #12]	; (800d41c <HAL_InitTick+0x74>)
 800d40e:	f7f6 fea2 	bl	8004156 <HAL_TIM_Base_Start_IT>
 800d412:	e7f8      	b.n	800d406 <HAL_InitTick+0x5e>
 800d414:	40023800 	.word	0x40023800
 800d418:	431bde83 	.word	0x431bde83
 800d41c:	2002c294 	.word	0x2002c294

0800d420 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800d422:	f7fa fb2b 	bl	8007a7c <osSystickHandler>
 800d426:	bd08      	pop	{r3, pc}

0800d428 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 800d428:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d42a:	4802      	ldr	r0, [pc, #8]	; (800d434 <TIM2_IRQHandler+0xc>)
 800d42c:	f7f6 fea3 	bl	8004176 <HAL_TIM_IRQHandler>
 800d430:	bd08      	pop	{r3, pc}
 800d432:	bf00      	nop
 800d434:	2002c294 	.word	0x2002c294

0800d438 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 800d438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d43a:	4802      	ldr	r0, [pc, #8]	; (800d444 <OTG_FS_IRQHandler+0xc>)
 800d43c:	f7f5 fa98 	bl	8002970 <HAL_PCD_IRQHandler>
 800d440:	bd08      	pop	{r3, pc}
 800d442:	bf00      	nop
 800d444:	2002c4f8 	.word	0x2002c4f8

0800d448 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d448:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d44a:	4a0f      	ldr	r2, [pc, #60]	; (800d488 <SystemInit+0x40>)
 800d44c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800d450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d458:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <SystemInit+0x44>)
 800d45a:	6819      	ldr	r1, [r3, #0]
 800d45c:	f041 0101 	orr.w	r1, r1, #1
 800d460:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d462:	2000      	movs	r0, #0
 800d464:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d466:	681c      	ldr	r4, [r3, #0]
 800d468:	4909      	ldr	r1, [pc, #36]	; (800d490 <SystemInit+0x48>)
 800d46a:	4021      	ands	r1, r4
 800d46c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d46e:	4909      	ldr	r1, [pc, #36]	; (800d494 <SystemInit+0x4c>)
 800d470:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d472:	6819      	ldr	r1, [r3, #0]
 800d474:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800d478:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d47a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d47c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d480:	6093      	str	r3, [r2, #8]
#endif
}
 800d482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	e000ed00 	.word	0xe000ed00
 800d48c:	40023800 	.word	0x40023800
 800d490:	fef6ffff 	.word	0xfef6ffff
 800d494:	24003010 	.word	0x24003010

0800d498 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d498:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800d49a:	4c09      	ldr	r4, [pc, #36]	; (800d4c0 <MX_USB_DEVICE_Init+0x28>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	4909      	ldr	r1, [pc, #36]	; (800d4c4 <MX_USB_DEVICE_Init+0x2c>)
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f7fc fc33 	bl	8009d0c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 800d4a6:	4908      	ldr	r1, [pc, #32]	; (800d4c8 <MX_USB_DEVICE_Init+0x30>)
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f7fc fc46 	bl	8009d3a <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 800d4ae:	4907      	ldr	r1, [pc, #28]	; (800d4cc <MX_USB_DEVICE_Init+0x34>)
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7fb ffbe 	bl	8009432 <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7fc fc46 	bl	8009d48 <USBD_Start>
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	2002c2d4 	.word	0x2002c2d4
 800d4c4:	200000c4 	.word	0x200000c4
 800d4c8:	20000018 	.word	0x20000018
 800d4cc:	20000108 	.word	0x20000108

0800d4d0 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4d0:	6803      	ldr	r3, [r0, #0]
 800d4d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4d6:	d000      	beq.n	800d4da <HAL_PCD_MspInit+0xa>
 800d4d8:	4770      	bx	lr
{
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	b088      	sub	sp, #32
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800d4de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d4e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4e8:	2400      	movs	r4, #0
 800d4ea:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4f0:	230a      	movs	r3, #10
 800d4f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4f4:	a903      	add	r1, sp, #12
 800d4f6:	4810      	ldr	r0, [pc, #64]	; (800d538 <HAL_PCD_MspInit+0x68>)
 800d4f8:	f7f4 fd2e 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4fc:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <HAL_PCD_MspInit+0x6c>)
 800d4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d504:	635a      	str	r2, [r3, #52]	; 0x34
 800d506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d508:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d50c:	9201      	str	r2, [sp, #4]
 800d50e:	9a01      	ldr	r2, [sp, #4]
 800d510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d516:	645a      	str	r2, [r3, #68]	; 0x44
 800d518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d51e:	9302      	str	r3, [sp, #8]
 800d520:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d522:	4622      	mov	r2, r4
 800d524:	2105      	movs	r1, #5
 800d526:	2043      	movs	r0, #67	; 0x43
 800d528:	f7f4 fab6 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d52c:	2043      	movs	r0, #67	; 0x43
 800d52e:	f7f4 fae3 	bl	8001af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d532:	b008      	add	sp, #32
 800d534:	bd10      	pop	{r4, pc}
 800d536:	bf00      	nop
 800d538:	40020000 	.word	0x40020000
 800d53c:	40023800 	.word	0x40023800

0800d540 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800d540:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d542:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 800d546:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d54a:	f7fc fc16 	bl	8009d7a <USBD_LL_SetupStage>
 800d54e:	bd08      	pop	{r3, pc}

0800d550 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d550:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d552:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800d556:	0093      	lsls	r3, r2, #2
 800d558:	4403      	add	r3, r0
 800d55a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d55e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d562:	f7fc fc37 	bl	8009dd4 <USBD_LL_DataOutStage>
 800d566:	bd08      	pop	{r3, pc}

0800d568 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d568:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d56a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800d56e:	0093      	lsls	r3, r2, #2
 800d570:	4403      	add	r3, r0
 800d572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d574:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d578:	f7fc fc61 	bl	8009e3e <USBD_LL_DataInStage>
 800d57c:	bd08      	pop	{r3, pc}

0800d57e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800d57e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d580:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d584:	f7fc fce5 	bl	8009f52 <USBD_LL_SOF>
 800d588:	bd08      	pop	{r3, pc}

0800d58a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800d58a:	b510      	push	{r4, lr}
 800d58c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800d58e:	68c3      	ldr	r3, [r0, #12]
 800d590:	b14b      	cbz	r3, 800d5a6 <HAL_PCD_ResetCallback+0x1c>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800d592:	2101      	movs	r1, #1
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d594:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 800d598:	f7fc fcc9 	bl	8009f2e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d59c:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 800d5a0:	f7fc fca6 	bl	8009ef0 <USBD_LL_Reset>
 800d5a4:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_HIGH;
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	e7f4      	b.n	800d594 <HAL_PCD_ResetCallback+0xa>
	...

0800d5ac <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5b0:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d5b4:	f7fc fcbe 	bl	8009f34 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5b8:	6822      	ldr	r2, [r4, #0]
 800d5ba:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d5be:	f043 0301 	orr.w	r3, r3, #1
 800d5c2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5c6:	6a23      	ldr	r3, [r4, #32]
 800d5c8:	b123      	cbz	r3, 800d5d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5ca:	4a03      	ldr	r2, [pc, #12]	; (800d5d8 <HAL_PCD_SuspendCallback+0x2c>)
 800d5cc:	6913      	ldr	r3, [r2, #16]
 800d5ce:	f043 0306 	orr.w	r3, r3, #6
 800d5d2:	6113      	str	r3, [r2, #16]
 800d5d4:	bd10      	pop	{r4, pc}
 800d5d6:	bf00      	nop
 800d5d8:	e000ed00 	.word	0xe000ed00

0800d5dc <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800d5dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d5de:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d5e2:	f7fc fcb0 	bl	8009f46 <USBD_LL_Resume>
 800d5e6:	bd08      	pop	{r3, pc}

0800d5e8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d5e8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5ea:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d5ee:	f7fc fcc0 	bl	8009f72 <USBD_LL_IsoOUTIncomplete>
 800d5f2:	bd08      	pop	{r3, pc}

0800d5f4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d5f4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5f6:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d5fa:	f7fc fcb8 	bl	8009f6e <USBD_LL_IsoINIncomplete>
 800d5fe:	bd08      	pop	{r3, pc}

0800d600 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800d600:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d602:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d606:	f7fc fcb6 	bl	8009f76 <USBD_LL_DevConnected>
 800d60a:	bd08      	pop	{r3, pc}

0800d60c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800d60c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d60e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d612:	f7fc fcb2 	bl	8009f7a <USBD_LL_DevDisconnected>
 800d616:	bd08      	pop	{r3, pc}

0800d618 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d618:	7803      	ldrb	r3, [r0, #0]
 800d61a:	b10b      	cbz	r3, 800d620 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800d61c:	2000      	movs	r0, #0
 800d61e:	4770      	bx	lr
{
 800d620:	b510      	push	{r4, lr}
 800d622:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800d624:	4817      	ldr	r0, [pc, #92]	; (800d684 <USBD_LL_Init+0x6c>)
 800d626:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d62a:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d62e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d632:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d634:	2306      	movs	r3, #6
 800d636:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d638:	2202      	movs	r2, #2
 800d63a:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800d640:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d642:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d644:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d646:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d648:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d64a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d64c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d64e:	f7f5 f902 	bl	8002856 <HAL_PCD_Init>
 800d652:	b980      	cbnz	r0, 800d676 <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d654:	4c0b      	ldr	r4, [pc, #44]	; (800d684 <USBD_LL_Init+0x6c>)
 800d656:	2180      	movs	r1, #128	; 0x80
 800d658:	4620      	mov	r0, r4
 800d65a:	f7f5 fe32 	bl	80032c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d65e:	2240      	movs	r2, #64	; 0x40
 800d660:	2100      	movs	r1, #0
 800d662:	4620      	mov	r0, r4
 800d664:	f7f5 fe09 	bl	800327a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d668:	2280      	movs	r2, #128	; 0x80
 800d66a:	2101      	movs	r1, #1
 800d66c:	4620      	mov	r0, r4
 800d66e:	f7f5 fe04 	bl	800327a <HAL_PCDEx_SetTxFiFo>
}
 800d672:	2000      	movs	r0, #0
 800d674:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 800d676:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800d67a:	4803      	ldr	r0, [pc, #12]	; (800d688 <USBD_LL_Init+0x70>)
 800d67c:	f7fe fe2e 	bl	800c2dc <_Error_Handler>
 800d680:	e7e8      	b.n	800d654 <USBD_LL_Init+0x3c>
 800d682:	bf00      	nop
 800d684:	2002c4f8 	.word	0x2002c4f8
 800d688:	08026c60 	.word	0x08026c60

0800d68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d68c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d68e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d692:	f7f5 f957 	bl	8002944 <HAL_PCD_Start>
     
  switch (hal_status) {
 800d696:	b118      	cbz	r0, 800d6a0 <USBD_LL_Start+0x14>
 800d698:	2802      	cmp	r0, #2
 800d69a:	d003      	beq.n	800d6a4 <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d69c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d69e:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d6a4:	2001      	movs	r0, #1
    break;
 800d6a6:	bd08      	pop	{r3, pc}

0800d6a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d6b4:	f7f5 fc9c 	bl	8002ff0 <HAL_PCD_EP_Open>

  switch (hal_status) {
 800d6b8:	b118      	cbz	r0, 800d6c2 <USBD_LL_OpenEP+0x1a>
 800d6ba:	2802      	cmp	r0, #2
 800d6bc:	d003      	beq.n	800d6c6 <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6be:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d6c0:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 800d6c6:	2001      	movs	r0, #1
    break;
 800d6c8:	bd10      	pop	{r4, pc}

0800d6ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ca:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6cc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d6d0:	f7f5 fcc2 	bl	8003058 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 800d6d4:	b118      	cbz	r0, 800d6de <USBD_LL_CloseEP+0x14>
 800d6d6:	2802      	cmp	r0, #2
 800d6d8:	d003      	beq.n	800d6e2 <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6da:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800d6dc:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d6de:	2000      	movs	r0, #0
 800d6e0:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d6e2:	2001      	movs	r0, #1
    break;
 800d6e4:	bd08      	pop	{r3, pc}

0800d6e6 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6e6:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d6e8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d6ec:	f7f5 fdaa 	bl	8003244 <HAL_PCD_EP_Flush>
      
  switch (hal_status) {
 800d6f0:	b118      	cbz	r0, 800d6fa <USBD_LL_FlushEP+0x14>
 800d6f2:	2802      	cmp	r0, #2
 800d6f4:	d003      	beq.n	800d6fe <USBD_LL_FlushEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f6:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800d6f8:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d6fe:	2001      	movs	r0, #1
    break;
 800d700:	bd08      	pop	{r3, pc}

0800d702 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d702:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d704:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d708:	f7f5 fd30 	bl	800316c <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 800d70c:	b118      	cbz	r0, 800d716 <USBD_LL_StallEP+0x14>
 800d70e:	2802      	cmp	r0, #2
 800d710:	d003      	beq.n	800d71a <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d712:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800d714:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d716:	2000      	movs	r0, #0
 800d718:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d71a:	2001      	movs	r0, #1
    break;
 800d71c:	bd08      	pop	{r3, pc}

0800d71e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d720:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d724:	f7f5 fd5c 	bl	80031e0 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 800d728:	b118      	cbz	r0, 800d732 <USBD_LL_ClearStallEP+0x14>
 800d72a:	2802      	cmp	r0, #2
 800d72c:	d003      	beq.n	800d736 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d72e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800d730:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d732:	2000      	movs	r0, #0
 800d734:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d736:	2001      	movs	r0, #1
    break;
 800d738:	bd08      	pop	{r3, pc}

0800d73a <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d73a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 800d73e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d742:	d108      	bne.n	800d756 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d744:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d748:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d74c:	008a      	lsls	r2, r1, #2
 800d74e:	4413      	add	r3, r2
 800d750:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
  }
}
 800d754:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d756:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d75a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d75e:	008a      	lsls	r2, r1, #2
 800d760:	4413      	add	r3, r2
 800d762:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 800d766:	4770      	bx	lr

0800d768 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d768:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d76a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d76e:	f7f5 fc2d 	bl	8002fcc <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 800d772:	b118      	cbz	r0, 800d77c <USBD_LL_SetUSBAddress+0x14>
 800d774:	2802      	cmp	r0, #2
 800d776:	d003      	beq.n	800d780 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d778:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800d77a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d77c:	2000      	movs	r0, #0
 800d77e:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d780:	2001      	movs	r0, #1
    break;
 800d782:	bd08      	pop	{r3, pc}

0800d784 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d784:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d786:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d78a:	f7f5 fcc6 	bl	800311a <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 800d78e:	b118      	cbz	r0, 800d798 <USBD_LL_Transmit+0x14>
 800d790:	2802      	cmp	r0, #2
 800d792:	d003      	beq.n	800d79c <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d794:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 800d796:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d798:	2000      	movs	r0, #0
 800d79a:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d79c:	2001      	movs	r0, #1
    break;
 800d79e:	bd08      	pop	{r3, pc}

0800d7a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d7a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7a6:	f7f5 fc82 	bl	80030ae <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 800d7aa:	b118      	cbz	r0, 800d7b4 <USBD_LL_PrepareReceive+0x14>
 800d7ac:	2802      	cmp	r0, #2
 800d7ae:	d003      	beq.n	800d7b8 <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7b0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800d7b2:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 800d7b8:	2001      	movs	r0, #1
    break;
 800d7ba:	bd08      	pop	{r3, pc}

0800d7bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7bc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d7c2:	f7f5 fca1 	bl	8003108 <HAL_PCD_EP_GetRxCount>
}
 800d7c6:	bd08      	pop	{r3, pc}

0800d7c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	4604      	mov	r4, r0
  switch (msg)
 800d7cc:	b111      	cbz	r1, 800d7d4 <HAL_PCDEx_LPM_Callback+0xc>
 800d7ce:	2901      	cmp	r1, #1
 800d7d0:	d016      	beq.n	800d800 <HAL_PCDEx_LPM_Callback+0x38>
 800d7d2:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 800d7d4:	6a03      	ldr	r3, [r0, #32]
 800d7d6:	b95b      	cbnz	r3, 800d7f0 <HAL_PCDEx_LPM_Callback+0x28>
      SystemClock_Config();
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d7d8:	6822      	ldr	r2, [r4, #0]
 800d7da:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d7de:	f023 0301 	bic.w	r3, r3, #1
 800d7e2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 800d7e6:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 800d7ea:	f7fc fbac 	bl	8009f46 <USBD_LL_Resume>
    break;
 800d7ee:	bd10      	pop	{r4, pc}
      SystemClock_Config();
 800d7f0:	f7fe fe2e 	bl	800c450 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7f4:	4a0c      	ldr	r2, [pc, #48]	; (800d828 <HAL_PCDEx_LPM_Callback+0x60>)
 800d7f6:	6913      	ldr	r3, [r2, #16]
 800d7f8:	f023 0306 	bic.w	r3, r3, #6
 800d7fc:	6113      	str	r3, [r2, #16]
 800d7fe:	e7eb      	b.n	800d7d8 <HAL_PCDEx_LPM_Callback+0x10>
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d800:	6802      	ldr	r2, [r0, #0]
 800d802:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d806:	f043 0301 	orr.w	r3, r3, #1
 800d80a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800d80e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800d812:	f7fc fb8f 	bl	8009f34 <USBD_LL_Suspend>
    
    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 800d816:	6a23      	ldr	r3, [r4, #32]
 800d818:	b123      	cbz	r3, 800d824 <HAL_PCDEx_LPM_Callback+0x5c>
    {   
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d81a:	4a03      	ldr	r2, [pc, #12]	; (800d828 <HAL_PCDEx_LPM_Callback+0x60>)
 800d81c:	6913      	ldr	r3, [r2, #16]
 800d81e:	f043 0306 	orr.w	r3, r3, #6
 800d822:	6113      	str	r3, [r2, #16]
 800d824:	bd10      	pop	{r4, pc}
 800d826:	bf00      	nop
 800d828:	e000ed00 	.word	0xe000ed00

0800d82c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800d82c:	2312      	movs	r3, #18
 800d82e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800d830:	4800      	ldr	r0, [pc, #0]	; (800d834 <USBD_FS_DeviceDescriptor+0x8>)
 800d832:	4770      	bx	lr
 800d834:	200000f0 	.word	0x200000f0

0800d838 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800d838:	2304      	movs	r3, #4
 800d83a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d83c:	4800      	ldr	r0, [pc, #0]	; (800d840 <USBD_FS_LangIDStrDescriptor+0x8>)
 800d83e:	4770      	bx	lr
 800d840:	20000104 	.word	0x20000104

0800d844 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 800d844:	230c      	movs	r3, #12
 800d846:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800d848:	4800      	ldr	r0, [pc, #0]	; (800d84c <USBD_FS_USR_BOSDescriptor+0x8>)
 800d84a:	4770      	bx	lr
 800d84c:	200000e4 	.word	0x200000e4

0800d850 <USBD_FS_ProductStrDescriptor>:
{
 800d850:	b508      	push	{r3, lr}
 800d852:	460a      	mov	r2, r1
  if(speed == 0)
 800d854:	b128      	cbz	r0, 800d862 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d856:	4905      	ldr	r1, [pc, #20]	; (800d86c <USBD_FS_ProductStrDescriptor+0x1c>)
 800d858:	4805      	ldr	r0, [pc, #20]	; (800d870 <USBD_FS_ProductStrDescriptor+0x20>)
 800d85a:	f7fc fe07 	bl	800a46c <USBD_GetString>
}
 800d85e:	4803      	ldr	r0, [pc, #12]	; (800d86c <USBD_FS_ProductStrDescriptor+0x1c>)
 800d860:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d862:	4902      	ldr	r1, [pc, #8]	; (800d86c <USBD_FS_ProductStrDescriptor+0x1c>)
 800d864:	4802      	ldr	r0, [pc, #8]	; (800d870 <USBD_FS_ProductStrDescriptor+0x20>)
 800d866:	f7fc fe01 	bl	800a46c <USBD_GetString>
 800d86a:	e7f8      	b.n	800d85e <USBD_FS_ProductStrDescriptor+0xe>
 800d86c:	2002c8f8 	.word	0x2002c8f8
 800d870:	08026ca4 	.word	0x08026ca4

0800d874 <USBD_FS_ManufacturerStrDescriptor>:
{
 800d874:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d876:	4c04      	ldr	r4, [pc, #16]	; (800d888 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800d878:	460a      	mov	r2, r1
 800d87a:	4621      	mov	r1, r4
 800d87c:	4803      	ldr	r0, [pc, #12]	; (800d88c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d87e:	f7fc fdf5 	bl	800a46c <USBD_GetString>
}
 800d882:	4620      	mov	r0, r4
 800d884:	bd10      	pop	{r4, pc}
 800d886:	bf00      	nop
 800d888:	2002c8f8 	.word	0x2002c8f8
 800d88c:	08026c90 	.word	0x08026c90

0800d890 <USBD_FS_SerialStrDescriptor>:
{
 800d890:	b508      	push	{r3, lr}
 800d892:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d894:	b128      	cbz	r0, 800d8a2 <USBD_FS_SerialStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800d896:	4905      	ldr	r1, [pc, #20]	; (800d8ac <USBD_FS_SerialStrDescriptor+0x1c>)
 800d898:	4805      	ldr	r0, [pc, #20]	; (800d8b0 <USBD_FS_SerialStrDescriptor+0x20>)
 800d89a:	f7fc fde7 	bl	800a46c <USBD_GetString>
}
 800d89e:	4803      	ldr	r0, [pc, #12]	; (800d8ac <USBD_FS_SerialStrDescriptor+0x1c>)
 800d8a0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800d8a2:	4902      	ldr	r1, [pc, #8]	; (800d8ac <USBD_FS_SerialStrDescriptor+0x1c>)
 800d8a4:	4802      	ldr	r0, [pc, #8]	; (800d8b0 <USBD_FS_SerialStrDescriptor+0x20>)
 800d8a6:	f7fc fde1 	bl	800a46c <USBD_GetString>
 800d8aa:	e7f8      	b.n	800d89e <USBD_FS_SerialStrDescriptor+0xe>
 800d8ac:	2002c8f8 	.word	0x2002c8f8
 800d8b0:	08026cb8 	.word	0x08026cb8

0800d8b4 <USBD_FS_ConfigStrDescriptor>:
{
 800d8b4:	b508      	push	{r3, lr}
 800d8b6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d8b8:	b128      	cbz	r0, 800d8c6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8ba:	4905      	ldr	r1, [pc, #20]	; (800d8d0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d8bc:	4805      	ldr	r0, [pc, #20]	; (800d8d4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800d8be:	f7fc fdd5 	bl	800a46c <USBD_GetString>
}
 800d8c2:	4803      	ldr	r0, [pc, #12]	; (800d8d0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d8c4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8c6:	4902      	ldr	r1, [pc, #8]	; (800d8d0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d8c8:	4802      	ldr	r0, [pc, #8]	; (800d8d4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800d8ca:	f7fc fdcf 	bl	800a46c <USBD_GetString>
 800d8ce:	e7f8      	b.n	800d8c2 <USBD_FS_ConfigStrDescriptor+0xe>
 800d8d0:	2002c8f8 	.word	0x2002c8f8
 800d8d4:	08026c74 	.word	0x08026c74

0800d8d8 <USBD_FS_InterfaceStrDescriptor>:
{
 800d8d8:	b508      	push	{r3, lr}
 800d8da:	460a      	mov	r2, r1
  if(speed == 0)
 800d8dc:	b128      	cbz	r0, 800d8ea <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8de:	4905      	ldr	r1, [pc, #20]	; (800d8f4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d8e0:	4805      	ldr	r0, [pc, #20]	; (800d8f8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d8e2:	f7fc fdc3 	bl	800a46c <USBD_GetString>
}
 800d8e6:	4803      	ldr	r0, [pc, #12]	; (800d8f4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d8e8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8ea:	4902      	ldr	r1, [pc, #8]	; (800d8f4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d8ec:	4802      	ldr	r0, [pc, #8]	; (800d8f8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d8ee:	f7fc fdbd 	bl	800a46c <USBD_GetString>
 800d8f2:	e7f8      	b.n	800d8e6 <USBD_FS_InterfaceStrDescriptor+0xe>
 800d8f4:	2002c8f8 	.word	0x2002c8f8
 800d8f8:	08026c80 	.word	0x08026c80

0800d8fc <STORAGE_Init_FS>:
int8_t STORAGE_Init_FS(uint8_t lun)
{
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
  /* USER CODE END 2 */
}
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	4770      	bx	lr

0800d900 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800d900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d904:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800d906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d90a:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 800d90c:	2000      	movs	r0, #0
 800d90e:	4770      	bx	lr

0800d910 <STORAGE_IsReady_FS>:
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800d910:	2000      	movs	r0, #0
 800d912:	4770      	bx	lr

0800d914 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d914:	2000      	movs	r0, #0
 800d916:	4770      	bx	lr

0800d918 <STORAGE_Read_FS>:
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800d918:	2000      	movs	r0, #0
 800d91a:	4770      	bx	lr

0800d91c <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 800d91c:	2000      	movs	r0, #0
 800d91e:	4770      	bx	lr

0800d920 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800d920:	2000      	movs	r0, #0
 800d922:	4770      	bx	lr

0800d924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d95c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d92a:	e003      	b.n	800d934 <LoopCopyDataInit>

0800d92c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d92c:	4b0c      	ldr	r3, [pc, #48]	; (800d960 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d92e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d932:	3104      	adds	r1, #4

0800d934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d934:	480b      	ldr	r0, [pc, #44]	; (800d964 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d93a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d93c:	d3f6      	bcc.n	800d92c <CopyDataInit>
  ldr  r2, =_sbss
 800d93e:	4a0b      	ldr	r2, [pc, #44]	; (800d96c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d940:	e002      	b.n	800d948 <LoopFillZerobss>

0800d942 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d944:	f842 3b04 	str.w	r3, [r2], #4

0800d948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d948:	4b09      	ldr	r3, [pc, #36]	; (800d970 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d94a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d94c:	d3f9      	bcc.n	800d942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d94e:	f7ff fd7b 	bl	800d448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d952:	f014 ff85 	bl	8022860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d956:	f7fe fe07 	bl	800c568 <main>
  bx  lr    
 800d95a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d95c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800d960:	0802aca8 	.word	0x0802aca8
  ldr  r0, =_sdata
 800d964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d968:	20000640 	.word	0x20000640
  ldr  r2, =_sbss
 800d96c:	20000640 	.word	0x20000640
  ldr  r3, = _ebss
 800d970:	2002ccd4 	.word	0x2002ccd4

0800d974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d974:	e7fe      	b.n	800d974 <ADC_IRQHandler>
	...

0800d978 <WINDOW_Callback>:
 800d978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d97c:	6846      	ldr	r6, [r0, #4]
 800d97e:	b083      	sub	sp, #12
 800d980:	4604      	mov	r4, r0
 800d982:	4630      	mov	r0, r6
 800d984:	f010 f85a 	bl	801da3c <GUI_ALLOC_LockH>
 800d988:	ad02      	add	r5, sp, #8
 800d98a:	4603      	mov	r3, r0
 800d98c:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 800d990:	f845 0d08 	str.w	r0, [r5, #-8]!
 800d994:	4668      	mov	r0, sp
 800d996:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d998:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800d99c:	f010 f860 	bl	801da60 <GUI_ALLOC_UnlockH>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	3b0e      	subs	r3, #14
 800d9a4:	2b1c      	cmp	r3, #28
 800d9a6:	d819      	bhi.n	800d9dc <WINDOW_Callback+0x64>
 800d9a8:	e8df f003 	tbb	[pc, r3]
 800d9ac:	18180f2d 	.word	0x18180f2d
 800d9b0:	18181818 	.word	0x18181818
 800d9b4:	18181818 	.word	0x18181818
 800d9b8:	18181818 	.word	0x18181818
 800d9bc:	18564f3a 	.word	0x18564f3a
 800d9c0:	1818186f 	.word	0x1818186f
 800d9c4:	18181818 	.word	0x18181818
 800d9c8:	1f          	.byte	0x1f
 800d9c9:	00          	.byte	0x00
 800d9ca:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d9ce:	4599      	cmp	r9, r3
 800d9d0:	d004      	beq.n	800d9dc <WINDOW_Callback+0x64>
 800d9d2:	4648      	mov	r0, r9
 800d9d4:	f00c fc22 	bl	801a21c <LCD_SetBkColor>
 800d9d8:	f00e fbe8 	bl	801c1ac <GUI_Clear>
 800d9dc:	2f00      	cmp	r7, #0
 800d9de:	d059      	beq.n	800da94 <WINDOW_Callback+0x11c>
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	47b8      	blx	r7
 800d9e4:	b003      	add	sp, #12
 800d9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f010 f826 	bl	801da3c <GUI_ALLOC_LockH>
 800d9f0:	68e3      	ldr	r3, [r4, #12]
 800d9f2:	9000      	str	r0, [sp, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d05e      	beq.n	800dab6 <WINDOW_Callback+0x13e>
 800d9f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 800d9fa:	4668      	mov	r0, sp
 800d9fc:	f010 f830 	bl	801da60 <GUI_ALLOC_UnlockH>
 800da00:	b003      	add	sp, #12
 800da02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	dde6      	ble.n	800d9dc <WINDOW_Callback+0x64>
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b09      	cmp	r3, #9
 800da12:	d04c      	beq.n	800daae <WINDOW_Callback+0x136>
 800da14:	2b0a      	cmp	r3, #10
 800da16:	d1e1      	bne.n	800d9dc <WINDOW_Callback+0x64>
 800da18:	4630      	mov	r0, r6
 800da1a:	f005 fd19 	bl	8013450 <WM_SetFocusOnPrevChild>
 800da1e:	e7e1      	b.n	800d9e4 <WINDOW_Callback+0x6c>
 800da20:	68e4      	ldr	r4, [r4, #12]
 800da22:	2c01      	cmp	r4, #1
 800da24:	d1de      	bne.n	800d9e4 <WINDOW_Callback+0x6c>
 800da26:	4640      	mov	r0, r8
 800da28:	f006 fd8a 	bl	8014540 <WM_IsWindow>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d03e      	beq.n	800daae <WINDOW_Callback+0x136>
 800da30:	4640      	mov	r0, r8
 800da32:	f006 fe11 	bl	8014658 <WM_SetFocus>
 800da36:	4640      	mov	r0, r8
 800da38:	f006 fd54 	bl	80144e4 <WM_HasFocus>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d0d1      	beq.n	800d9e4 <WINDOW_Callback+0x6c>
 800da40:	4640      	mov	r0, r8
 800da42:	4621      	mov	r1, r4
 800da44:	f000 f960 	bl	800dd08 <WIDGET_OrState>
 800da48:	e7cc      	b.n	800d9e4 <WINDOW_Callback+0x6c>
 800da4a:	4630      	mov	r0, r6
 800da4c:	4621      	mov	r1, r4
 800da4e:	f000 f9c7 	bl	800dde0 <WIDGET_HandleActive>
 800da52:	b003      	add	sp, #12
 800da54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da58:	4630      	mov	r0, r6
 800da5a:	f00f ffef 	bl	801da3c <GUI_ALLOC_LockH>
 800da5e:	68e4      	ldr	r4, [r4, #12]
 800da60:	9001      	str	r0, [sp, #4]
 800da62:	b164      	cbz	r4, 800da7e <WINDOW_Callback+0x106>
 800da64:	4631      	mov	r1, r6
 800da66:	6860      	ldr	r0, [r4, #4]
 800da68:	f005 fa78 	bl	8012f5c <WM__IsAncestorOrSelf>
 800da6c:	4631      	mov	r1, r6
 800da6e:	b9a8      	cbnz	r0, 800da9c <WINDOW_Callback+0x124>
 800da70:	6820      	ldr	r0, [r4, #0]
 800da72:	f005 fa63 	bl	8012f3c <WM__IsAncestor>
 800da76:	b110      	cbz	r0, 800da7e <WINDOW_Callback+0x106>
 800da78:	9b01      	ldr	r3, [sp, #4]
 800da7a:	6822      	ldr	r2, [r4, #0]
 800da7c:	639a      	str	r2, [r3, #56]	; 0x38
 800da7e:	a801      	add	r0, sp, #4
 800da80:	f00f ffee 	bl	801da60 <GUI_ALLOC_UnlockH>
 800da84:	b003      	add	sp, #12
 800da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da8a:	f8c4 900c 	str.w	r9, [r4, #12]
 800da8e:	b003      	add	sp, #12
 800da90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da94:	4620      	mov	r0, r4
 800da96:	f009 f9c1 	bl	8016e1c <WM_DefaultProc>
 800da9a:	e7a3      	b.n	800d9e4 <WINDOW_Callback+0x6c>
 800da9c:	6860      	ldr	r0, [r4, #4]
 800da9e:	f005 fa4d 	bl	8012f3c <WM__IsAncestor>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d0eb      	beq.n	800da7e <WINDOW_Callback+0x106>
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	6862      	ldr	r2, [r4, #4]
 800daaa:	639a      	str	r2, [r3, #56]	; 0x38
 800daac:	e7e7      	b.n	800da7e <WINDOW_Callback+0x106>
 800daae:	4630      	mov	r0, r6
 800dab0:	f005 fd08 	bl	80134c4 <WM_SetFocusOnNextChild>
 800dab4:	e796      	b.n	800d9e4 <WINDOW_Callback+0x6c>
 800dab6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800dab8:	60e3      	str	r3, [r4, #12]
 800daba:	e79e      	b.n	800d9fa <WINDOW_Callback+0x82>

0800dabc <WINDOW_SetBkColor>:
 800dabc:	b530      	push	{r4, r5, lr}
 800dabe:	4604      	mov	r4, r0
 800dac0:	b083      	sub	sp, #12
 800dac2:	460d      	mov	r5, r1
 800dac4:	f00d fc3a 	bl	801b33c <GUI_Lock>
 800dac8:	4620      	mov	r0, r4
 800daca:	f00f ffb7 	bl	801da3c <GUI_ALLOC_LockH>
 800dace:	ab02      	add	r3, sp, #8
 800dad0:	6405      	str	r5, [r0, #64]	; 0x40
 800dad2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800dad6:	4618      	mov	r0, r3
 800dad8:	f00f ffc2 	bl	801da60 <GUI_ALLOC_UnlockH>
 800dadc:	4620      	mov	r0, r4
 800dade:	f008 fc37 	bl	8016350 <WM_InvalidateWindow>
 800dae2:	f00d fc21 	bl	801b328 <GUI_Unlock>
 800dae6:	b003      	add	sp, #12
 800dae8:	bd30      	pop	{r4, r5, pc}
 800daea:	bf00      	nop

0800daec <WINDOW_CreateIndirect>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	6987      	ldr	r7, [r0, #24]
 800daf2:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 800daf6:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 800dafa:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800dafe:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800db02:	8a44      	ldrh	r4, [r0, #18]
 800db04:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 800db08:	b087      	sub	sp, #28
 800db0a:	4688      	mov	r8, r1
 800db0c:	4493      	add	fp, r2
 800db0e:	449a      	add	sl, r3
 800db10:	f00d fc14 	bl	801b33c <GUI_Lock>
 800db14:	f107 0318 	add.w	r3, r7, #24
 800db18:	4f13      	ldr	r7, [pc, #76]	; (800db68 <WINDOW_CreateIndirect+0x7c>)
 800db1a:	9303      	str	r3, [sp, #12]
 800db1c:	9401      	str	r4, [sp, #4]
 800db1e:	f8cd 8000 	str.w	r8, [sp]
 800db22:	4658      	mov	r0, fp
 800db24:	4651      	mov	r1, sl
 800db26:	4632      	mov	r2, r6
 800db28:	462b      	mov	r3, r5
 800db2a:	9702      	str	r7, [sp, #8]
 800db2c:	f008 fc6c 	bl	8016408 <WM_CreateWindowAsChild>
 800db30:	4604      	mov	r4, r0
 800db32:	b198      	cbz	r0, 800db5c <WINDOW_CreateIndirect+0x70>
 800db34:	f00f ff82 	bl	801da3c <GUI_ALLOC_LockH>
 800db38:	fa0f f189 	sxth.w	r1, r9
 800db3c:	2210      	movs	r2, #16
 800db3e:	9005      	str	r0, [sp, #20]
 800db40:	f000 f854 	bl	800dbec <WIDGET__Init>
 800db44:	a806      	add	r0, sp, #24
 800db46:	4a09      	ldr	r2, [pc, #36]	; (800db6c <WINDOW_CreateIndirect+0x80>)
 800db48:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800db4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800db4e:	6812      	ldr	r2, [r2, #0]
 800db50:	6359      	str	r1, [r3, #52]	; 0x34
 800db52:	2100      	movs	r1, #0
 800db54:	6399      	str	r1, [r3, #56]	; 0x38
 800db56:	641a      	str	r2, [r3, #64]	; 0x40
 800db58:	f00f ff82 	bl	801da60 <GUI_ALLOC_UnlockH>
 800db5c:	f00d fbe4 	bl	801b328 <GUI_Unlock>
 800db60:	4620      	mov	r0, r4
 800db62:	b007      	add	sp, #28
 800db64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db68:	0800d979 	.word	0x0800d979
 800db6c:	20000128 	.word	0x20000128

0800db70 <WIDGET__RotateRect90>:
 800db70:	f9b0 3000 	ldrsh.w	r3, [r0]
 800db74:	b470      	push	{r4, r5, r6}
 800db76:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800db7a:	8854      	ldrh	r4, [r2, #2]
 800db7c:	88d5      	ldrh	r5, [r2, #6]
 800db7e:	8810      	ldrh	r0, [r2, #0]
 800db80:	8892      	ldrh	r2, [r2, #4]
 800db82:	80ca      	strh	r2, [r1, #6]
 800db84:	1af3      	subs	r3, r6, r3
 800db86:	b29b      	uxth	r3, r3
 800db88:	1b5d      	subs	r5, r3, r5
 800db8a:	1b1b      	subs	r3, r3, r4
 800db8c:	800d      	strh	r5, [r1, #0]
 800db8e:	808b      	strh	r3, [r1, #4]
 800db90:	8048      	strh	r0, [r1, #2]
 800db92:	bc70      	pop	{r4, r5, r6}
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop

0800db98 <WIDGET__GetClientRect>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800db9c:	071b      	lsls	r3, r3, #28
 800db9e:	b082      	sub	sp, #8
 800dba0:	460c      	mov	r4, r1
 800dba2:	d404      	bmi.n	800dbae <WIDGET__GetClientRect+0x16>
 800dba4:	4608      	mov	r0, r1
 800dba6:	f006 f8e5 	bl	8013d74 <WM_GetClientRect>
 800dbaa:	b002      	add	sp, #8
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	4668      	mov	r0, sp
 800dbb0:	f006 f8e0 	bl	8013d74 <WM_GetClientRect>
 800dbb4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800dbb8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800dbbc:	f8bd 2000 	ldrh.w	r2, [sp]
 800dbc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800dbc4:	8020      	strh	r0, [r4, #0]
 800dbc6:	80a1      	strh	r1, [r4, #4]
 800dbc8:	8062      	strh	r2, [r4, #2]
 800dbca:	80e3      	strh	r3, [r4, #6]
 800dbcc:	b002      	add	sp, #8
 800dbce:	bd10      	pop	{r4, pc}

0800dbd0 <WIDGET__GetInsideRect>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4605      	mov	r5, r0
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	f008 fae5 	bl	80161a4 <WM__GetClientRectWin>
 800dbda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dbdc:	4620      	mov	r0, r4
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbe6:	f00c bc61 	b.w	801a4ac <GUI__ReduceRect>
 800dbea:	bf00      	nop

0800dbec <WIDGET__Init>:
 800dbec:	4b02      	ldr	r3, [pc, #8]	; (800dbf8 <WIDGET__Init+0xc>)
 800dbee:	8642      	strh	r2, [r0, #50]	; 0x32
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	8601      	strh	r1, [r0, #48]	; 0x30
 800dbf4:	62c3      	str	r3, [r0, #44]	; 0x2c
 800dbf6:	4770      	bx	lr
 800dbf8:	2000012c 	.word	0x2000012c

0800dbfc <WIDGET__FillStringInRect>:
 800dbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc00:	4c40      	ldr	r4, [pc, #256]	; (800dd04 <WIDGET__FillStringInRect+0x108>)
 800dc02:	6825      	ldr	r5, [r4, #0]
 800dc04:	696e      	ldr	r6, [r5, #20]
 800dc06:	b085      	sub	sp, #20
 800dc08:	4607      	mov	r7, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4691      	mov	r9, r2
 800dc0e:	4698      	mov	r8, r3
 800dc10:	b306      	cbz	r6, 800dc54 <WIDGET__FillStringInRect+0x58>
 800dc12:	6808      	ldr	r0, [r1, #0]
 800dc14:	6849      	ldr	r1, [r1, #4]
 800dc16:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 800dc1a:	f8b5 e050 	ldrh.w	lr, [r5, #80]	; 0x50
 800dc1e:	466d      	mov	r5, sp
 800dc20:	c503      	stmia	r5!, {r0, r1}
 800dc22:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800dc26:	f8bd 5000 	ldrh.w	r5, [sp]
 800dc2a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800dc2e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc32:	441d      	add	r5, r3
 800dc34:	4472      	add	r2, lr
 800dc36:	4463      	add	r3, ip
 800dc38:	448e      	add	lr, r1
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4669      	mov	r1, sp
 800dc3e:	f8ad 5000 	strh.w	r5, [sp]
 800dc42:	f8ad 3004 	strh.w	r3, [sp, #4]
 800dc46:	f8ad 2002 	strh.w	r2, [sp, #2]
 800dc4a:	f8ad e006 	strh.w	lr, [sp, #6]
 800dc4e:	f00e fdc5 	bl	801c7dc <GUI_RectsIntersect>
 800dc52:	b128      	cbz	r0, 800dc60 <WIDGET__FillStringInRect+0x64>
 800dc54:	b10f      	cbz	r7, 800dc5a <WIDGET__FillStringInRect+0x5e>
 800dc56:	783b      	ldrb	r3, [r7, #0]
 800dc58:	b92b      	cbnz	r3, 800dc66 <WIDGET__FillStringInRect+0x6a>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f00e fa6c 	bl	801c138 <GUI_ClearRectEx>
 800dc60:	b005      	add	sp, #20
 800dc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc66:	f00e fcf1 	bl	801c64c <GUI_GetBkColor>
 800dc6a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800dc6e:	d344      	bcc.n	800dcfa <WIDGET__FillStringInRect+0xfe>
 800dc70:	2000      	movs	r0, #0
 800dc72:	f00e fe91 	bl	801c998 <GUI_SetTextMode>
 800dc76:	4649      	mov	r1, r9
 800dc78:	4642      	mov	r2, r8
 800dc7a:	a802      	add	r0, sp, #8
 800dc7c:	f00c fb9e 	bl	801a3bc <GUI__IntersectRects>
 800dc80:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800dc84:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dc88:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dc8c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	f00e fa1b 	bl	801c0cc <GUI_ClearRect>
 800dc96:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800dc9a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dc9e:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800dca2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dca6:	3a01      	subs	r2, #1
 800dca8:	f00e fa10 	bl	801c0cc <GUI_ClearRect>
 800dcac:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 800dcb0:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800dcb4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800dcb8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	f00e fa05 	bl	801c0cc <GUI_ClearRect>
 800dcc2:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800dcc6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dcca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800dcce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dcd2:	3101      	adds	r1, #1
 800dcd4:	f00e f9fa 	bl	801c0cc <GUI_ClearRect>
 800dcd8:	4648      	mov	r0, r9
 800dcda:	f006 fd69 	bl	80147b0 <WM_SetUserClipRect>
 800dcde:	f9b8 1000 	ldrsh.w	r1, [r8]
 800dce2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800dce6:	4604      	mov	r4, r0
 800dce8:	4638      	mov	r0, r7
 800dcea:	f00d fe89 	bl	801ba00 <GUI_DispStringAt>
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f006 fd5e 	bl	80147b0 <WM_SetUserClipRect>
 800dcf4:	b005      	add	sp, #20
 800dcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcfa:	2002      	movs	r0, #2
 800dcfc:	f00e fe4c 	bl	801c998 <GUI_SetTextMode>
 800dd00:	e7ea      	b.n	800dcd8 <WIDGET__FillStringInRect+0xdc>
 800dd02:	bf00      	nop
 800dd04:	2000027c 	.word	0x2000027c

0800dd08 <WIDGET_OrState>:
 800dd08:	b530      	push	{r4, r5, lr}
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	b083      	sub	sp, #12
 800dd0e:	460d      	mov	r5, r1
 800dd10:	b908      	cbnz	r0, 800dd16 <WIDGET_OrState+0xe>
 800dd12:	b003      	add	sp, #12
 800dd14:	bd30      	pop	{r4, r5, pc}
 800dd16:	f00d fb11 	bl	801b33c <GUI_Lock>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f00f fe8e 	bl	801da3c <GUI_ALLOC_LockH>
 800dd20:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800dd22:	9001      	str	r0, [sp, #4]
 800dd24:	ea05 0203 	and.w	r2, r5, r3
 800dd28:	42aa      	cmp	r2, r5
 800dd2a:	d004      	beq.n	800dd36 <WIDGET_OrState+0x2e>
 800dd2c:	431d      	orrs	r5, r3
 800dd2e:	8645      	strh	r5, [r0, #50]	; 0x32
 800dd30:	4620      	mov	r0, r4
 800dd32:	f008 fb0d 	bl	8016350 <WM_InvalidateWindow>
 800dd36:	a801      	add	r0, sp, #4
 800dd38:	f00f fe92 	bl	801da60 <GUI_ALLOC_UnlockH>
 800dd3c:	f00d faf4 	bl	801b328 <GUI_Unlock>
 800dd40:	b003      	add	sp, #12
 800dd42:	bd30      	pop	{r4, r5, pc}

0800dd44 <WIDGET_AndState>:
 800dd44:	b530      	push	{r4, r5, lr}
 800dd46:	4604      	mov	r4, r0
 800dd48:	b083      	sub	sp, #12
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	b908      	cbnz	r0, 800dd52 <WIDGET_AndState+0xe>
 800dd4e:	b003      	add	sp, #12
 800dd50:	bd30      	pop	{r4, r5, pc}
 800dd52:	f00d faf3 	bl	801b33c <GUI_Lock>
 800dd56:	4620      	mov	r0, r4
 800dd58:	f00f fe70 	bl	801da3c <GUI_ALLOC_LockH>
 800dd5c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800dd5e:	9001      	str	r0, [sp, #4]
 800dd60:	ea23 0505 	bic.w	r5, r3, r5
 800dd64:	42ab      	cmp	r3, r5
 800dd66:	d003      	beq.n	800dd70 <WIDGET_AndState+0x2c>
 800dd68:	8645      	strh	r5, [r0, #50]	; 0x32
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f008 faf0 	bl	8016350 <WM_InvalidateWindow>
 800dd70:	a801      	add	r0, sp, #4
 800dd72:	f00f fe75 	bl	801da60 <GUI_ALLOC_UnlockH>
 800dd76:	f00d fad7 	bl	801b328 <GUI_Unlock>
 800dd7a:	b003      	add	sp, #12
 800dd7c:	bd30      	pop	{r4, r5, pc}
 800dd7e:	bf00      	nop

0800dd80 <WIDGET_SetFocusable>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	4604      	mov	r4, r0
 800dd84:	b082      	sub	sp, #8
 800dd86:	b9c9      	cbnz	r1, 800ddbc <WIDGET_SetFocusable+0x3c>
 800dd88:	b908      	cbnz	r0, 800dd8e <WIDGET_SetFocusable+0xe>
 800dd8a:	b002      	add	sp, #8
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	f00d fad5 	bl	801b33c <GUI_Lock>
 800dd92:	4620      	mov	r0, r4
 800dd94:	f00f fe52 	bl	801da3c <GUI_ALLOC_LockH>
 800dd98:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800dd9a:	9001      	str	r0, [sp, #4]
 800dd9c:	f023 0210 	bic.w	r2, r3, #16
 800dda0:	b292      	uxth	r2, r2
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d003      	beq.n	800ddae <WIDGET_SetFocusable+0x2e>
 800dda6:	8642      	strh	r2, [r0, #50]	; 0x32
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f008 fad1 	bl	8016350 <WM_InvalidateWindow>
 800ddae:	a801      	add	r0, sp, #4
 800ddb0:	f00f fe56 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ddb4:	f00d fab8 	bl	801b328 <GUI_Unlock>
 800ddb8:	b002      	add	sp, #8
 800ddba:	bd10      	pop	{r4, pc}
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d0e4      	beq.n	800dd8a <WIDGET_SetFocusable+0xa>
 800ddc0:	f00d fabc 	bl	801b33c <GUI_Lock>
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f00f fe39 	bl	801da3c <GUI_ALLOC_LockH>
 800ddca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800ddcc:	9001      	str	r0, [sp, #4]
 800ddce:	06da      	lsls	r2, r3, #27
 800ddd0:	d4ed      	bmi.n	800ddae <WIDGET_SetFocusable+0x2e>
 800ddd2:	f043 0310 	orr.w	r3, r3, #16
 800ddd6:	8643      	strh	r3, [r0, #50]	; 0x32
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f008 fab9 	bl	8016350 <WM_InvalidateWindow>
 800ddde:	e7e6      	b.n	800ddae <WIDGET_SetFocusable+0x2e>

0800dde0 <WIDGET_HandleActive>:
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	460d      	mov	r5, r1
 800dde6:	b084      	sub	sp, #16
 800dde8:	4607      	mov	r7, r0
 800ddea:	b920      	cbnz	r0, 800ddf6 <WIDGET_HandleActive+0x16>
 800ddec:	2401      	movs	r4, #1
 800ddee:	4620      	mov	r0, r4
 800ddf0:	b004      	add	sp, #16
 800ddf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf6:	f00f fe21 	bl	801da3c <GUI_ALLOC_LockH>
 800ddfa:	682b      	ldr	r3, [r5, #0]
 800ddfc:	9002      	str	r0, [sp, #8]
 800ddfe:	2b16      	cmp	r3, #22
 800de00:	4606      	mov	r6, r0
 800de02:	f000 8090 	beq.w	800df26 <WIDGET_HandleActive+0x146>
 800de06:	dd2a      	ble.n	800de5e <WIDGET_HandleActive+0x7e>
 800de08:	2b1f      	cmp	r3, #31
 800de0a:	d07c      	beq.n	800df06 <WIDGET_HandleActive+0x126>
 800de0c:	dd51      	ble.n	800deb2 <WIDGET_HandleActive+0xd2>
 800de0e:	2b31      	cmp	r3, #49	; 0x31
 800de10:	d037      	beq.n	800de82 <WIDGET_HandleActive+0xa2>
 800de12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de16:	d148      	bne.n	800deaa <WIDGET_HandleActive+0xca>
 800de18:	68eb      	ldr	r3, [r5, #12]
 800de1a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800de1c:	6819      	ldr	r1, [r3, #0]
 800de1e:	6815      	ldr	r5, [r2, #0]
 800de20:	62c3      	str	r3, [r0, #44]	; 0x2c
 800de22:	a802      	add	r0, sp, #8
 800de24:	1a6d      	subs	r5, r5, r1
 800de26:	f00f fe1b 	bl	801da60 <GUI_ALLOC_UnlockH>
 800de2a:	f00d fa87 	bl	801b33c <GUI_Lock>
 800de2e:	4638      	mov	r0, r7
 800de30:	f00f fe04 	bl	801da3c <GUI_ALLOC_LockH>
 800de34:	ac04      	add	r4, sp, #16
 800de36:	4269      	negs	r1, r5
 800de38:	9500      	str	r5, [sp, #0]
 800de3a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800de3e:	462b      	mov	r3, r5
 800de40:	460a      	mov	r2, r1
 800de42:	f005 f8e5 	bl	8013010 <WM__UpdateChildPositions>
 800de46:	4620      	mov	r0, r4
 800de48:	f00f fe0a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800de4c:	f00d fa6c 	bl	801b328 <GUI_Unlock>
 800de50:	4638      	mov	r0, r7
 800de52:	f008 fa7d 	bl	8016350 <WM_InvalidateWindow>
 800de56:	9e02      	ldr	r6, [sp, #8]
 800de58:	2400      	movs	r4, #0
 800de5a:	b95e      	cbnz	r6, 800de74 <WIDGET_HandleActive+0x94>
 800de5c:	e7c7      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800de5e:	2b11      	cmp	r3, #17
 800de60:	d057      	beq.n	800df12 <WIDGET_HandleActive+0x132>
 800de62:	dd3c      	ble.n	800dede <WIDGET_HandleActive+0xfe>
 800de64:	2b14      	cmp	r3, #20
 800de66:	d011      	beq.n	800de8c <WIDGET_HandleActive+0xac>
 800de68:	2b15      	cmp	r3, #21
 800de6a:	d11e      	bne.n	800deaa <WIDGET_HandleActive+0xca>
 800de6c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800de70:	60eb      	str	r3, [r5, #12]
 800de72:	2400      	movs	r4, #0
 800de74:	a802      	add	r0, sp, #8
 800de76:	f00f fdf3 	bl	801da60 <GUI_ALLOC_UnlockH>
 800de7a:	4620      	mov	r0, r4
 800de7c:	b004      	add	sp, #16
 800de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de82:	2400      	movs	r4, #0
 800de84:	60ec      	str	r4, [r5, #12]
 800de86:	2e00      	cmp	r6, #0
 800de88:	d1f4      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800de8a:	e7b0      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800de8c:	68ec      	ldr	r4, [r5, #12]
 800de8e:	4621      	mov	r1, r4
 800de90:	f008 f988 	bl	80161a4 <WM__GetClientRectWin>
 800de94:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800de96:	4620      	mov	r0, r4
 800de98:	4621      	mov	r1, r4
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	f00c fb06 	bl	801a4ac <GUI__ReduceRect>
 800dea0:	9e02      	ldr	r6, [sp, #8]
 800dea2:	2400      	movs	r4, #0
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	d1e5      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800dea8:	e7a1      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800deaa:	2401      	movs	r4, #1
 800deac:	2e00      	cmp	r6, #0
 800deae:	d1e1      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800deb0:	e79d      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800deb2:	2b1e      	cmp	r3, #30
 800deb4:	d1f9      	bne.n	800deaa <WIDGET_HandleActive+0xca>
 800deb6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800deba:	f1b8 0f01 	cmp.w	r8, #1
 800debe:	d136      	bne.n	800df2e <WIDGET_HandleActive+0x14e>
 800dec0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800dec2:	f003 0410 	and.w	r4, r3, #16
 800dec6:	b2a4      	uxth	r4, r4
 800dec8:	2c00      	cmp	r4, #0
 800deca:	d153      	bne.n	800df74 <WIDGET_HandleActive+0x194>
 800decc:	a802      	add	r0, sp, #8
 800dece:	f00f fdc7 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ded2:	9e02      	ldr	r6, [sp, #8]
 800ded4:	f8c5 800c 	str.w	r8, [r5, #12]
 800ded8:	2e00      	cmp	r6, #0
 800deda:	d1cb      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800dedc:	e787      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800dede:	2b0d      	cmp	r3, #13
 800dee0:	d1e3      	bne.n	800deaa <WIDGET_HandleActive+0xca>
 800dee2:	68eb      	ldr	r3, [r5, #12]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0df      	beq.n	800deaa <WIDGET_HandleActive+0xca>
 800deea:	7a1b      	ldrb	r3, [r3, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d0dc      	beq.n	800deaa <WIDGET_HandleActive+0xca>
 800def0:	a802      	add	r0, sp, #8
 800def2:	f00f fdb5 	bl	801da60 <GUI_ALLOC_UnlockH>
 800def6:	4638      	mov	r0, r7
 800def8:	f006 fe34 	bl	8014b64 <WM_BringToTop>
 800defc:	9e02      	ldr	r6, [sp, #8]
 800defe:	2400      	movs	r4, #0
 800df00:	2e00      	cmp	r6, #0
 800df02:	d1b7      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800df04:	e773      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800df06:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800df08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800df0c:	60eb      	str	r3, [r5, #12]
 800df0e:	2400      	movs	r4, #0
 800df10:	e7b0      	b.n	800de74 <WIDGET_HandleActive+0x94>
 800df12:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800df14:	06db      	lsls	r3, r3, #27
 800df16:	d504      	bpl.n	800df22 <WIDGET_HandleActive+0x142>
 800df18:	68eb      	ldr	r3, [r5, #12]
 800df1a:	b113      	cbz	r3, 800df22 <WIDGET_HandleActive+0x142>
 800df1c:	7a1b      	ldrb	r3, [r3, #8]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d13e      	bne.n	800dfa0 <WIDGET_HandleActive+0x1c0>
 800df22:	2401      	movs	r4, #1
 800df24:	e7a6      	b.n	800de74 <WIDGET_HandleActive+0x94>
 800df26:	68eb      	ldr	r3, [r5, #12]
 800df28:	8603      	strh	r3, [r0, #48]	; 0x30
 800df2a:	2400      	movs	r4, #0
 800df2c:	e7a2      	b.n	800de74 <WIDGET_HandleActive+0x94>
 800df2e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 800df30:	f00d fa04 	bl	801b33c <GUI_Lock>
 800df34:	4638      	mov	r0, r7
 800df36:	f00f fd81 	bl	801da3c <GUI_ALLOC_LockH>
 800df3a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800df3c:	9003      	str	r0, [sp, #12]
 800df3e:	f024 0401 	bic.w	r4, r4, #1
 800df42:	429c      	cmp	r4, r3
 800df44:	d003      	beq.n	800df4e <WIDGET_HandleActive+0x16e>
 800df46:	8644      	strh	r4, [r0, #50]	; 0x32
 800df48:	4638      	mov	r0, r7
 800df4a:	f008 fa01 	bl	8016350 <WM_InvalidateWindow>
 800df4e:	a803      	add	r0, sp, #12
 800df50:	f00f fd86 	bl	801da60 <GUI_ALLOC_UnlockH>
 800df54:	2409      	movs	r4, #9
 800df56:	f00d f9e7 	bl	801b328 <GUI_Unlock>
 800df5a:	a802      	add	r0, sp, #8
 800df5c:	f00f fd80 	bl	801da60 <GUI_ALLOC_UnlockH>
 800df60:	4621      	mov	r1, r4
 800df62:	4638      	mov	r0, r7
 800df64:	f006 faf8 	bl	8014558 <WM_NotifyParent>
 800df68:	9e02      	ldr	r6, [sp, #8]
 800df6a:	2400      	movs	r4, #0
 800df6c:	60ec      	str	r4, [r5, #12]
 800df6e:	2e00      	cmp	r6, #0
 800df70:	d180      	bne.n	800de74 <WIDGET_HandleActive+0x94>
 800df72:	e73c      	b.n	800ddee <WIDGET_HandleActive+0xe>
 800df74:	f043 0401 	orr.w	r4, r3, #1
 800df78:	f00d f9e0 	bl	801b33c <GUI_Lock>
 800df7c:	4638      	mov	r0, r7
 800df7e:	f00f fd5d 	bl	801da3c <GUI_ALLOC_LockH>
 800df82:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800df84:	9003      	str	r0, [sp, #12]
 800df86:	42a3      	cmp	r3, r4
 800df88:	d003      	beq.n	800df92 <WIDGET_HandleActive+0x1b2>
 800df8a:	8644      	strh	r4, [r0, #50]	; 0x32
 800df8c:	4638      	mov	r0, r7
 800df8e:	f008 f9df 	bl	8016350 <WM_InvalidateWindow>
 800df92:	a803      	add	r0, sp, #12
 800df94:	f00f fd64 	bl	801da60 <GUI_ALLOC_UnlockH>
 800df98:	2408      	movs	r4, #8
 800df9a:	f00d f9c5 	bl	801b328 <GUI_Unlock>
 800df9e:	e7dc      	b.n	800df5a <WIDGET_HandleActive+0x17a>
 800dfa0:	a802      	add	r0, sp, #8
 800dfa2:	f00f fd5d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f006 fb56 	bl	8014658 <WM_SetFocus>
 800dfac:	9e02      	ldr	r6, [sp, #8]
 800dfae:	2401      	movs	r4, #1
 800dfb0:	2e00      	cmp	r6, #0
 800dfb2:	f47f af5f 	bne.w	800de74 <WIDGET_HandleActive+0x94>
 800dfb6:	e71a      	b.n	800ddee <WIDGET_HandleActive+0xe>

0800dfb8 <WIDGET__SetScrollState>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	460c      	mov	r4, r1
 800dfbc:	21fe      	movs	r1, #254	; 0xfe
 800dfbe:	4615      	mov	r5, r2
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	f005 ff61 	bl	8013e88 <WM_GetDialogItem>
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	f006 fbb4 	bl	8014734 <WM_SetScrollState>
 800dfcc:	4630      	mov	r0, r6
 800dfce:	21ff      	movs	r1, #255	; 0xff
 800dfd0:	f005 ff5a 	bl	8013e88 <WM_GetDialogItem>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfda:	f006 bbab 	b.w	8014734 <WM_SetScrollState>
 800dfde:	bf00      	nop

0800dfe0 <WIDGET__DrawTriangle>:
 800dfe0:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 800dfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	0701      	lsls	r1, r0, #28
 800dfea:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800dfee:	4617      	mov	r7, r2
 800dff0:	461c      	mov	r4, r3
 800dff2:	d411      	bmi.n	800e018 <WIDGET__DrawTriangle+0x38>
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	bfa8      	it	ge
 800dff8:	ebc3 0602 	rsbge	r6, r3, r2
 800dffc:	db1c      	blt.n	800e038 <WIDGET__DrawTriangle+0x58>
 800dffe:	4628      	mov	r0, r5
 800e000:	4631      	mov	r1, r6
 800e002:	19e2      	adds	r2, r4, r7
 800e004:	3c01      	subs	r4, #1
 800e006:	f00d fb5b 	bl	801b6c0 <GUI_DrawVLine>
 800e00a:	1c63      	adds	r3, r4, #1
 800e00c:	4445      	add	r5, r8
 800e00e:	f106 0601 	add.w	r6, r6, #1
 800e012:	d1f4      	bne.n	800dffe <WIDGET__DrawTriangle+0x1e>
 800e014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e018:	2b00      	cmp	r3, #0
 800e01a:	dbfb      	blt.n	800e014 <WIDGET__DrawTriangle+0x34>
 800e01c:	1ad6      	subs	r6, r2, r3
 800e01e:	19e2      	adds	r2, r4, r7
 800e020:	4628      	mov	r0, r5
 800e022:	4631      	mov	r1, r6
 800e024:	3c01      	subs	r4, #1
 800e026:	f00d faf5 	bl	801b614 <GUI_DrawHLine>
 800e02a:	1c62      	adds	r2, r4, #1
 800e02c:	4445      	add	r5, r8
 800e02e:	f106 0601 	add.w	r6, r6, #1
 800e032:	d1f4      	bne.n	800e01e <WIDGET__DrawTriangle+0x3e>
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e03c <WIDGET__EFFECT_DrawDown>:
 800e03c:	b570      	push	{r4, r5, r6, lr}
 800e03e:	4604      	mov	r4, r0
 800e040:	b084      	sub	sp, #16
 800e042:	4668      	mov	r0, sp
 800e044:	f005 fe96 	bl	8013d74 <WM_GetClientRect>
 800e048:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e04a:	071b      	lsls	r3, r3, #28
 800e04c:	d517      	bpl.n	800e07e <WIDGET__EFFECT_DrawDown+0x42>
 800e04e:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800e052:	f9b4 3000 	ldrsh.w	r3, [r4]
 800e056:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800e05a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800e05e:	f8bd 6000 	ldrh.w	r6, [sp]
 800e062:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e066:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e06a:	1aeb      	subs	r3, r5, r3
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	1a59      	subs	r1, r3, r1
 800e070:	1a1b      	subs	r3, r3, r0
 800e072:	f8ad 1000 	strh.w	r1, [sp]
 800e076:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e07a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e07e:	f104 0308 	add.w	r3, r4, #8
 800e082:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e088:	ab02      	add	r3, sp, #8
 800e08a:	6815      	ldr	r5, [r2, #0]
 800e08c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e090:	4619      	mov	r1, r3
 800e092:	4620      	mov	r0, r4
 800e094:	f004 ff7e 	bl	8012f94 <WM__Screen2Client>
 800e098:	f9bd 2000 	ldrsh.w	r2, [sp]
 800e09c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800e0a0:	442a      	add	r2, r5
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	dc14      	bgt.n	800e0d0 <WIDGET__EFFECT_DrawDown+0x94>
 800e0a6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800e0aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e0ae:	1b52      	subs	r2, r2, r5
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	db0d      	blt.n	800e0d0 <WIDGET__EFFECT_DrawDown+0x94>
 800e0b4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800e0b8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800e0bc:	442a      	add	r2, r5
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	dc06      	bgt.n	800e0d0 <WIDGET__EFFECT_DrawDown+0x94>
 800e0c2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800e0c6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e0ca:	1b55      	subs	r5, r2, r5
 800e0cc:	429d      	cmp	r5, r3
 800e0ce:	da03      	bge.n	800e0d8 <WIDGET__EFFECT_DrawDown+0x9c>
 800e0d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e0d2:	4668      	mov	r0, sp
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	4798      	blx	r3
 800e0d8:	b004      	add	sp, #16
 800e0da:	bd70      	pop	{r4, r5, r6, pc}

0800e0dc <WIDGET_SetEffect>:
 800e0dc:	b500      	push	{lr}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	9103      	str	r1, [sp, #12]
 800e0e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e0e8:	4669      	mov	r1, sp
 800e0ea:	9202      	str	r2, [sp, #8]
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	f008 f83d 	bl	801616c <WM_SendMessage>
 800e0f2:	b005      	add	sp, #20
 800e0f4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e0f8 <_GetNextVisibleItem>:
 800e0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	4607      	mov	r7, r0
 800e0fe:	f00f fc9d 	bl	801da3c <GUI_ALLOC_LockH>
 800e102:	8b03      	ldrh	r3, [r0, #24]
 800e104:	9000      	str	r0, [sp, #0]
 800e106:	079c      	lsls	r4, r3, #30
 800e108:	d50d      	bpl.n	800e126 <_GetNextVisibleItem+0x2e>
 800e10a:	6845      	ldr	r5, [r0, #4]
 800e10c:	4668      	mov	r0, sp
 800e10e:	f00f fca7 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e112:	bb0d      	cbnz	r5, 800e158 <_GetNextVisibleItem+0x60>
 800e114:	4638      	mov	r0, r7
 800e116:	b003      	add	sp, #12
 800e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e11a:	0792      	lsls	r2, r2, #30
 800e11c:	d42b      	bmi.n	800e176 <_GetNextVisibleItem+0x7e>
 800e11e:	a801      	add	r0, sp, #4
 800e120:	f00f fc9e 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e124:	9800      	ldr	r0, [sp, #0]
 800e126:	6845      	ldr	r5, [r0, #4]
 800e128:	4668      	mov	r0, sp
 800e12a:	b915      	cbnz	r5, 800e132 <_GetNextVisibleItem+0x3a>
 800e12c:	f00f fc98 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e130:	e7f0      	b.n	800e114 <_GetNextVisibleItem+0x1c>
 800e132:	f00f fc95 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e136:	4628      	mov	r0, r5
 800e138:	f00f fc80 	bl	801da3c <GUI_ALLOC_LockH>
 800e13c:	9000      	str	r0, [sp, #0]
 800e13e:	4628      	mov	r0, r5
 800e140:	f00f fc7c 	bl	801da3c <GUI_ALLOC_LockH>
 800e144:	7f06      	ldrb	r6, [r0, #28]
 800e146:	9001      	str	r0, [sp, #4]
 800e148:	6884      	ldr	r4, [r0, #8]
 800e14a:	a801      	add	r0, sp, #4
 800e14c:	b93c      	cbnz	r4, 800e15e <_GetNextVisibleItem+0x66>
 800e14e:	f00f fc87 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e152:	4668      	mov	r0, sp
 800e154:	f00f fc84 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e158:	4628      	mov	r0, r5
 800e15a:	b003      	add	sp, #12
 800e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15e:	f00f fc7f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e162:	4620      	mov	r0, r4
 800e164:	f00f fc6a 	bl	801da3c <GUI_ALLOC_LockH>
 800e168:	7f03      	ldrb	r3, [r0, #28]
 800e16a:	9001      	str	r0, [sp, #4]
 800e16c:	42b3      	cmp	r3, r6
 800e16e:	da03      	bge.n	800e178 <_GetNextVisibleItem+0x80>
 800e170:	8b02      	ldrh	r2, [r0, #24]
 800e172:	07d1      	lsls	r1, r2, #31
 800e174:	d4d1      	bmi.n	800e11a <_GetNextVisibleItem+0x22>
 800e176:	461e      	mov	r6, r3
 800e178:	2e00      	cmp	r6, #0
 800e17a:	d1e5      	bne.n	800e148 <_GetNextVisibleItem+0x50>
 800e17c:	a801      	add	r0, sp, #4
 800e17e:	e7e6      	b.n	800e14e <_GetNextVisibleItem+0x56>

0800e180 <_GetPrevVisibleItem>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	b082      	sub	sp, #8
 800e186:	4607      	mov	r7, r0
 800e188:	f00f fc58 	bl	801da3c <GUI_ALLOC_LockH>
 800e18c:	ae02      	add	r6, sp, #8
 800e18e:	f890 801c 	ldrb.w	r8, [r0, #28]
 800e192:	f846 0d04 	str.w	r0, [r6, #-4]!
 800e196:	4603      	mov	r3, r0
 800e198:	2500      	movs	r5, #0
 800e19a:	689c      	ldr	r4, [r3, #8]
 800e19c:	4630      	mov	r0, r6
 800e19e:	b944      	cbnz	r4, 800e1b2 <_GetPrevVisibleItem+0x32>
 800e1a0:	f00f fc5e 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e1a4:	2d00      	cmp	r5, #0
 800e1a6:	bf14      	ite	ne
 800e1a8:	4628      	movne	r0, r5
 800e1aa:	4638      	moveq	r0, r7
 800e1ac:	b002      	add	sp, #8
 800e1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b2:	f00f fc55 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f00f fc40 	bl	801da3c <GUI_ALLOC_LockH>
 800e1bc:	9001      	str	r0, [sp, #4]
 800e1be:	b915      	cbnz	r5, 800e1c6 <_GetPrevVisibleItem+0x46>
 800e1c0:	f890 801c 	ldrb.w	r8, [r0, #28]
 800e1c4:	4625      	mov	r5, r4
 800e1c6:	8b02      	ldrh	r2, [r0, #24]
 800e1c8:	07d3      	lsls	r3, r2, #31
 800e1ca:	d507      	bpl.n	800e1dc <_GetPrevVisibleItem+0x5c>
 800e1cc:	7f01      	ldrb	r1, [r0, #28]
 800e1ce:	4588      	cmp	r8, r1
 800e1d0:	dd04      	ble.n	800e1dc <_GetPrevVisibleItem+0x5c>
 800e1d2:	f012 0f02 	tst.w	r2, #2
 800e1d6:	bf08      	it	eq
 800e1d8:	4625      	moveq	r5, r4
 800e1da:	4688      	mov	r8, r1
 800e1dc:	4603      	mov	r3, r0
 800e1de:	e7dc      	b.n	800e19a <_GetPrevVisibleItem+0x1a>

0800e1e0 <TREEVIEW_OwnerDraw>:
 800e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	6843      	ldr	r3, [r0, #4]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	2b1a      	cmp	r3, #26
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	d856      	bhi.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	4aa6      	ldr	r2, [pc, #664]	; (800e48c <TREEVIEW_OwnerDraw+0x2ac>)
 800e1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1f8:	401a      	ands	r2, r3
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	d153      	bne.n	800e2a6 <TREEVIEW_OwnerDraw+0xc6>
 800e1fe:	0159      	lsls	r1, r3, #5
 800e200:	f100 8088 	bmi.w	800e314 <TREEVIEW_OwnerDraw+0x134>
 800e204:	f013 7000 	ands.w	r0, r3, #33554432	; 0x2000000
 800e208:	d04a      	beq.n	800e2a0 <TREEVIEW_OwnerDraw+0xc0>
 800e20a:	6a23      	ldr	r3, [r4, #32]
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f00f fc15 	bl	801da3c <GUI_ALLOC_LockH>
 800e212:	aa04      	add	r2, sp, #16
 800e214:	8a84      	ldrh	r4, [r0, #20]
 800e216:	f842 0d08 	str.w	r0, [r2, #-8]!
 800e21a:	4610      	mov	r0, r2
 800e21c:	f00f fc20 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e220:	4620      	mov	r0, r4
 800e222:	e03d      	b.n	800e2a0 <TREEVIEW_OwnerDraw+0xc0>
 800e224:	07ab      	lsls	r3, r5, #30
 800e226:	bf4c      	ite	mi
 800e228:	68b8      	ldrmi	r0, [r7, #8]
 800e22a:	6838      	ldrpl	r0, [r7, #0]
 800e22c:	f00e fb22 	bl	801c874 <GUI_SetColor>
 800e230:	6963      	ldr	r3, [r4, #20]
 800e232:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e236:	8a79      	ldrh	r1, [r7, #18]
 800e238:	6922      	ldr	r2, [r4, #16]
 800e23a:	69a3      	ldr	r3, [r4, #24]
 800e23c:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e240:	a802      	add	r0, sp, #8
 800e242:	1e4a      	subs	r2, r1, #1
 800e244:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e248:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e24c:	f00d fa90 	bl	801b770 <GUI_FillRectEx>
 800e250:	8a3a      	ldrh	r2, [r7, #16]
 800e252:	8a79      	ldrh	r1, [r7, #18]
 800e254:	8afb      	ldrh	r3, [r7, #22]
 800e256:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e25a:	3a01      	subs	r2, #1
 800e25c:	a802      	add	r0, sp, #8
 800e25e:	f8ad 100a 	strh.w	r1, [sp, #10]
 800e262:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e266:	f00d fa83 	bl	801b770 <GUI_FillRectEx>
 800e26a:	8aba      	ldrh	r2, [r7, #20]
 800e26c:	69a3      	ldr	r3, [r4, #24]
 800e26e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e272:	a802      	add	r0, sp, #8
 800e274:	1c53      	adds	r3, r2, #1
 800e276:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e27a:	f00d fa79 	bl	801b770 <GUI_FillRectEx>
 800e27e:	8af9      	ldrh	r1, [r7, #22]
 800e280:	6920      	ldr	r0, [r4, #16]
 800e282:	69a2      	ldr	r2, [r4, #24]
 800e284:	69e3      	ldr	r3, [r4, #28]
 800e286:	f8ad 0008 	strh.w	r0, [sp, #8]
 800e28a:	3101      	adds	r1, #1
 800e28c:	a802      	add	r0, sp, #8
 800e28e:	f8ad 100a 	strh.w	r1, [sp, #10]
 800e292:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e296:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e29a:	f00d fa69 	bl	801b770 <GUI_FillRectEx>
 800e29e:	2000      	movs	r0, #0
 800e2a0:	b004      	add	sp, #16
 800e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a6:	6800      	ldr	r0, [r0, #0]
 800e2a8:	6a27      	ldr	r7, [r4, #32]
 800e2aa:	f00f fbc7 	bl	801da3c <GUI_ALLOC_LockH>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	a804      	add	r0, sp, #16
 800e2b2:	f8b3 509c 	ldrh.w	r5, [r3, #156]	; 0x9c
 800e2b6:	f840 3d0c 	str.w	r3, [r0, #-12]!
 800e2ba:	f8b3 80c0 	ldrh.w	r8, [r3, #192]	; 0xc0
 800e2be:	f8b3 60c2 	ldrh.w	r6, [r3, #194]	; 0xc2
 800e2c2:	f00f fbcd 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e2c6:	6863      	ldr	r3, [r4, #4]
 800e2c8:	3b05      	subs	r3, #5
 800e2ca:	2b0f      	cmp	r3, #15
 800e2cc:	d8e7      	bhi.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e2ce:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <TREEVIEW_OwnerDraw+0xf4>)
 800e2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d4:	0800e225 	.word	0x0800e225
 800e2d8:	0800e3b7 	.word	0x0800e3b7
 800e2dc:	0800e29f 	.word	0x0800e29f
 800e2e0:	0800e29f 	.word	0x0800e29f
 800e2e4:	0800e29f 	.word	0x0800e29f
 800e2e8:	0800e29f 	.word	0x0800e29f
 800e2ec:	0800e29f 	.word	0x0800e29f
 800e2f0:	0800e29f 	.word	0x0800e29f
 800e2f4:	0800e29f 	.word	0x0800e29f
 800e2f8:	0800e29f 	.word	0x0800e29f
 800e2fc:	0800e29f 	.word	0x0800e29f
 800e300:	0800e29f 	.word	0x0800e29f
 800e304:	0800e29f 	.word	0x0800e29f
 800e308:	0800e39d 	.word	0x0800e39d
 800e30c:	0800e29f 	.word	0x0800e29f
 800e310:	0800e341 	.word	0x0800e341
 800e314:	6800      	ldr	r0, [r0, #0]
 800e316:	f00f fb91 	bl	801da3c <GUI_ALLOC_LockH>
 800e31a:	6a23      	ldr	r3, [r4, #32]
 800e31c:	9000      	str	r0, [sp, #0]
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	f00f fb8c 	bl	801da3c <GUI_ALLOC_LockH>
 800e324:	4604      	mov	r4, r0
 800e326:	9001      	str	r0, [sp, #4]
 800e328:	8ac0      	ldrh	r0, [r0, #22]
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d071      	beq.n	800e412 <TREEVIEW_OwnerDraw+0x232>
 800e32e:	4604      	mov	r4, r0
 800e330:	a801      	add	r0, sp, #4
 800e332:	f00f fb95 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e336:	4668      	mov	r0, sp
 800e338:	f00f fb92 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e33c:	4620      	mov	r0, r4
 800e33e:	e7af      	b.n	800e2a0 <TREEVIEW_OwnerDraw+0xc0>
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f00e fa97 	bl	801c874 <GUI_SetColor>
 800e346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e34a:	b19b      	cbz	r3, 800e374 <TREEVIEW_OwnerDraw+0x194>
 800e34c:	463d      	mov	r5, r7
 800e34e:	2600      	movs	r6, #0
 800e350:	f9b5 0026 	ldrsh.w	r0, [r5, #38]	; 0x26
 800e354:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 800e358:	4290      	cmp	r0, r2
 800e35a:	4601      	mov	r1, r0
 800e35c:	d077      	beq.n	800e44e <TREEVIEW_OwnerDraw+0x26e>
 800e35e:	f9b5 002c 	ldrsh.w	r0, [r5, #44]	; 0x2c
 800e362:	f00d f957 	bl	801b614 <GUI_DrawHLine>
 800e366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e36a:	3601      	adds	r6, #1
 800e36c:	429e      	cmp	r6, r3
 800e36e:	f105 0502 	add.w	r5, r5, #2
 800e372:	dbed      	blt.n	800e350 <TREEVIEW_OwnerDraw+0x170>
 800e374:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d090      	beq.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e37c:	463e      	mov	r6, r7
 800e37e:	2500      	movs	r5, #0
 800e380:	f9b6 0040 	ldrsh.w	r0, [r6, #64]	; 0x40
 800e384:	6961      	ldr	r1, [r4, #20]
 800e386:	69e2      	ldr	r2, [r4, #28]
 800e388:	f00d f99a 	bl	801b6c0 <GUI_DrawVLine>
 800e38c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e390:	3501      	adds	r5, #1
 800e392:	429d      	cmp	r5, r3
 800e394:	f106 0602 	add.w	r6, r6, #2
 800e398:	dbf2      	blt.n	800e380 <TREEVIEW_OwnerDraw+0x1a0>
 800e39a:	e780      	b.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f00e fa69 	bl	801c874 <GUI_SetColor>
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f00e fa5a 	bl	801c85c <GUI_SetBkColor>
 800e3a8:	6a38      	ldr	r0, [r7, #32]
 800e3aa:	f107 0110 	add.w	r1, r7, #16
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f00d fbf6 	bl	801bba0 <GUI_DispStringInRect>
 800e3b4:	e773      	b.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e3b6:	68a3      	ldr	r3, [r4, #8]
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	f63f af70 	bhi.w	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e3be:	e8df f003 	tbb	[pc, r3]
 800e3c2:	1919      	.short	0x1919
 800e3c4:	0319      	.short	0x0319
 800e3c6:	03          	.byte	0x03
 800e3c7:	00          	.byte	0x00
 800e3c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e3ca:	6963      	ldr	r3, [r4, #20]
 800e3cc:	69e5      	ldr	r5, [r4, #28]
 800e3ce:	8842      	ldrh	r2, [r0, #2]
 800e3d0:	f9b7 4068 	ldrsh.w	r4, [r7, #104]	; 0x68
 800e3d4:	8801      	ldrh	r1, [r0, #0]
 800e3d6:	1aed      	subs	r5, r5, r3
 800e3d8:	1aaa      	subs	r2, r5, r2
 800e3da:	fa04 f888 	sxtah	r8, r4, r8
 800e3de:	fa03 f386 	sxtah	r3, r3, r6
 800e3e2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800e3e6:	eba8 0151 	sub.w	r1, r8, r1, lsr #1
 800e3ea:	eb03 0262 	add.w	r2, r3, r2, asr #1
 800e3ee:	f00d f9ef 	bl	801b7d0 <GUI_DrawBitmap>
 800e3f2:	e754      	b.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e3f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e3f6:	6963      	ldr	r3, [r4, #20]
 800e3f8:	69e4      	ldr	r4, [r4, #28]
 800e3fa:	8842      	ldrh	r2, [r0, #2]
 800e3fc:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 800e400:	1ae4      	subs	r4, r4, r3
 800e402:	1aa2      	subs	r2, r4, r2
 800e404:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800e408:	eb03 0262 	add.w	r2, r3, r2, asr #1
 800e40c:	f00d f9e0 	bl	801b7d0 <GUI_DrawBitmap>
 800e410:	e745      	b.n	800e29e <TREEVIEW_OwnerDraw+0xbe>
 800e412:	9d00      	ldr	r5, [sp, #0]
 800e414:	6920      	ldr	r0, [r4, #16]
 800e416:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e418:	7e1e      	ldrb	r6, [r3, #24]
 800e41a:	bb20      	cbnz	r0, 800e466 <TREEVIEW_OwnerDraw+0x286>
 800e41c:	f105 077c 	add.w	r7, r5, #124	; 0x7c
 800e420:	4629      	mov	r1, r5
 800e422:	8b23      	ldrh	r3, [r4, #24]
 800e424:	07da      	lsls	r2, r3, #31
 800e426:	d519      	bpl.n	800e45c <TREEVIEW_OwnerDraw+0x27c>
 800e428:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e42c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800e430:	b322      	cbz	r2, 800e47c <TREEVIEW_OwnerDraw+0x29c>
 800e432:	8854      	ldrh	r4, [r2, #2]
 800e434:	2200      	movs	r2, #0
 800e436:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 800e43a:	429e      	cmp	r6, r3
 800e43c:	bfb8      	it	lt
 800e43e:	461e      	movlt	r6, r3
 800e440:	4296      	cmp	r6, r2
 800e442:	bfb8      	it	lt
 800e444:	4616      	movlt	r6, r2
 800e446:	42a6      	cmp	r6, r4
 800e448:	bfa8      	it	ge
 800e44a:	4634      	movge	r4, r6
 800e44c:	e770      	b.n	800e330 <TREEVIEW_OwnerDraw+0x150>
 800e44e:	f9b5 102c 	ldrsh.w	r1, [r5, #44]	; 0x2c
 800e452:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 800e456:	f00d f933 	bl	801b6c0 <GUI_DrawVLine>
 800e45a:	e784      	b.n	800e366 <TREEVIEW_OwnerDraw+0x186>
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	b193      	cbz	r3, 800e486 <TREEVIEW_OwnerDraw+0x2a6>
 800e460:	885a      	ldrh	r2, [r3, #2]
 800e462:	2400      	movs	r4, #0
 800e464:	e7e7      	b.n	800e436 <TREEVIEW_OwnerDraw+0x256>
 800e466:	f00f fae9 	bl	801da3c <GUI_ALLOC_LockH>
 800e46a:	ab04      	add	r3, sp, #16
 800e46c:	4607      	mov	r7, r0
 800e46e:	f843 0d08 	str.w	r0, [r3, #-8]!
 800e472:	4618      	mov	r0, r3
 800e474:	f00f faf4 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e478:	9900      	ldr	r1, [sp, #0]
 800e47a:	e7d2      	b.n	800e422 <TREEVIEW_OwnerDraw+0x242>
 800e47c:	331e      	adds	r3, #30
 800e47e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800e482:	686a      	ldr	r2, [r5, #4]
 800e484:	e7d5      	b.n	800e432 <TREEVIEW_OwnerDraw+0x252>
 800e486:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800e48a:	e7e9      	b.n	800e460 <TREEVIEW_OwnerDraw+0x280>
 800e48c:	000a0031 	.word	0x000a0031

0800e490 <_CollapseItem>:
 800e490:	b510      	push	{r4, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	f00f fad2 	bl	801da3c <GUI_ALLOC_LockH>
 800e498:	8b03      	ldrh	r3, [r0, #24]
 800e49a:	9000      	str	r0, [sp, #0]
 800e49c:	f003 0203 	and.w	r2, r3, #3
 800e4a0:	2a03      	cmp	r2, #3
 800e4a2:	6804      	ldr	r4, [r0, #0]
 800e4a4:	d004      	beq.n	800e4b0 <_CollapseItem+0x20>
 800e4a6:	4668      	mov	r0, sp
 800e4a8:	f00f fada 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e4ac:	b002      	add	sp, #8
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	f023 0302 	bic.w	r3, r3, #2
 800e4b4:	8303      	strh	r3, [r0, #24]
 800e4b6:	4668      	mov	r0, sp
 800e4b8:	f00f fad2 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e4bc:	2c00      	cmp	r4, #0
 800e4be:	d0f5      	beq.n	800e4ac <_CollapseItem+0x1c>
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f00f fabb 	bl	801da3c <GUI_ALLOC_LockH>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	a802      	add	r0, sp, #8
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e4d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800e4d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800e4d8:	f00f fac2 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f007 ff37 	bl	8016350 <WM_InvalidateWindow>
 800e4e2:	e7e3      	b.n	800e4ac <_CollapseItem+0x1c>

0800e4e4 <_ExpandItem>:
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	f00f faa8 	bl	801da3c <GUI_ALLOC_LockH>
 800e4ec:	8b03      	ldrh	r3, [r0, #24]
 800e4ee:	9000      	str	r0, [sp, #0]
 800e4f0:	f003 0203 	and.w	r2, r3, #3
 800e4f4:	2a01      	cmp	r2, #1
 800e4f6:	6804      	ldr	r4, [r0, #0]
 800e4f8:	d004      	beq.n	800e504 <_ExpandItem+0x20>
 800e4fa:	4668      	mov	r0, sp
 800e4fc:	f00f fab0 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e500:	b002      	add	sp, #8
 800e502:	bd10      	pop	{r4, pc}
 800e504:	f043 0302 	orr.w	r3, r3, #2
 800e508:	8303      	strh	r3, [r0, #24]
 800e50a:	4668      	mov	r0, sp
 800e50c:	f00f faa8 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e510:	2c00      	cmp	r4, #0
 800e512:	d0f5      	beq.n	800e500 <_ExpandItem+0x1c>
 800e514:	4620      	mov	r0, r4
 800e516:	f00f fa91 	bl	801da3c <GUI_ALLOC_LockH>
 800e51a:	4603      	mov	r3, r0
 800e51c:	a802      	add	r0, sp, #8
 800e51e:	2200      	movs	r2, #0
 800e520:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e524:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800e528:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800e52c:	f00f fa98 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e530:	4620      	mov	r0, r4
 800e532:	f007 ff0d 	bl	8016350 <WM_InvalidateWindow>
 800e536:	e7e3      	b.n	800e500 <_ExpandItem+0x1c>

0800e538 <_CalcParams>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	b09f      	sub	sp, #124	; 0x7c
 800e53e:	4681      	mov	r9, r0
 800e540:	2100      	movs	r1, #0
 800e542:	2240      	movs	r2, #64	; 0x40
 800e544:	a80e      	add	r0, sp, #56	; 0x38
 800e546:	f014 f9fa 	bl	802293e <memset>
 800e54a:	4648      	mov	r0, r9
 800e54c:	f00f fa76 	bl	801da3c <GUI_ALLOC_LockH>
 800e550:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
 800e554:	9001      	str	r0, [sp, #4]
 800e556:	2300      	movs	r3, #0
 800e558:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 800e55c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800e560:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 800e564:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800e568:	f10d 0a04 	add.w	sl, sp, #4
 800e56c:	2f00      	cmp	r7, #0
 800e56e:	f000 8087 	beq.w	800e680 <_CalcParams+0x148>
 800e572:	f04f 34ff 	mov.w	r4, #4294967295
 800e576:	f10d 0a04 	add.w	sl, sp, #4
 800e57a:	4638      	mov	r0, r7
 800e57c:	f00f fa5e 	bl	801da3c <GUI_ALLOC_LockH>
 800e580:	8b06      	ldrh	r6, [r0, #24]
 800e582:	9b01      	ldr	r3, [sp, #4]
 800e584:	7f05      	ldrb	r5, [r0, #28]
 800e586:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e58a:	8a82      	ldrh	r2, [r0, #20]
 800e58c:	9002      	str	r0, [sp, #8]
 800e58e:	f026 0604 	bic.w	r6, r6, #4
 800e592:	8306      	strh	r6, [r0, #24]
 800e594:	f04f 0e00 	mov.w	lr, #0
 800e598:	ae1e      	add	r6, sp, #120	; 0x78
 800e59a:	f8a0 e01a 	strh.w	lr, [r0, #26]
 800e59e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	f840 7c40 	str.w	r7, [r0, #-64]
 800e5a8:	bfb8      	it	lt
 800e5aa:	f8c3 20b8 	strlt.w	r2, [r3, #184]	; 0xb8
 800e5ae:	a802      	add	r0, sp, #8
 800e5b0:	f00f fa56 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e5b4:	42a5      	cmp	r5, r4
 800e5b6:	f2c0 8082 	blt.w	800e6be <_CalcParams+0x186>
 800e5ba:	4650      	mov	r0, sl
 800e5bc:	f00f fa50 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e5c0:	9703      	str	r7, [sp, #12]
 800e5c2:	f1b8 0f00 	cmp.w	r8, #0
 800e5c6:	d078      	beq.n	800e6ba <_CalcParams+0x182>
 800e5c8:	ab03      	add	r3, sp, #12
 800e5ca:	261b      	movs	r6, #27
 800e5cc:	9606      	str	r6, [sp, #24]
 800e5ce:	f8cd 9014 	str.w	r9, [sp, #20]
 800e5d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e5d4:	a805      	add	r0, sp, #20
 800e5d6:	47c0      	blx	r8
 800e5d8:	4604      	mov	r4, r0
 800e5da:	4648      	mov	r0, r9
 800e5dc:	f00f fa2e 	bl	801da3c <GUI_ALLOC_LockH>
 800e5e0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800e5e4:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800e5e8:	9001      	str	r0, [sp, #4]
 800e5ea:	4414      	add	r4, r2
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800e5f2:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f00f fa20 	bl	801da3c <GUI_ALLOC_LockH>
 800e5fc:	8b03      	ldrh	r3, [r0, #24]
 800e5fe:	9005      	str	r0, [sp, #20]
 800e600:	07da      	lsls	r2, r3, #31
 800e602:	d552      	bpl.n	800e6aa <_CalcParams+0x172>
 800e604:	079b      	lsls	r3, r3, #30
 800e606:	d450      	bmi.n	800e6aa <_CalcParams+0x172>
 800e608:	7f04      	ldrb	r4, [r0, #28]
 800e60a:	6846      	ldr	r6, [r0, #4]
 800e60c:	a805      	add	r0, sp, #20
 800e60e:	2e00      	cmp	r6, #0
 800e610:	d13c      	bne.n	800e68c <_CalcParams+0x154>
 800e612:	f00f fa25 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e616:	4638      	mov	r0, r7
 800e618:	f00f fa10 	bl	801da3c <GUI_ALLOC_LockH>
 800e61c:	1c6c      	adds	r4, r5, #1
 800e61e:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800e622:	9004      	str	r0, [sp, #16]
 800e624:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 800e628:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800e62c:	f00f fa06 	bl	801da3c <GUI_ALLOC_LockH>
 800e630:	4603      	mov	r3, r0
 800e632:	3d01      	subs	r5, #1
 800e634:	a805      	add	r0, sp, #20
 800e636:	9305      	str	r3, [sp, #20]
 800e638:	b11b      	cbz	r3, 800e642 <_CalcParams+0x10a>
 800e63a:	8b1a      	ldrh	r2, [r3, #24]
 800e63c:	f042 0204 	orr.w	r2, r2, #4
 800e640:	831a      	strh	r2, [r3, #24]
 800e642:	f00f fa0d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e646:	2d00      	cmp	r5, #0
 800e648:	dcee      	bgt.n	800e628 <_CalcParams+0xf0>
 800e64a:	9b04      	ldr	r3, [sp, #16]
 800e64c:	7f1d      	ldrb	r5, [r3, #28]
 800e64e:	689c      	ldr	r4, [r3, #8]
 800e650:	2601      	movs	r6, #1
 800e652:	1e6b      	subs	r3, r5, #1
 800e654:	409e      	lsls	r6, r3
 800e656:	b2b6      	uxth	r6, r6
 800e658:	b92c      	cbnz	r4, 800e666 <_CalcParams+0x12e>
 800e65a:	e00e      	b.n	800e67a <_CalcParams+0x142>
 800e65c:	8b42      	ldrh	r2, [r0, #26]
 800e65e:	6884      	ldr	r4, [r0, #8]
 800e660:	4332      	orrs	r2, r6
 800e662:	8342      	strh	r2, [r0, #26]
 800e664:	b14c      	cbz	r4, 800e67a <_CalcParams+0x142>
 800e666:	a804      	add	r0, sp, #16
 800e668:	f00f f9fa 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e66c:	4620      	mov	r0, r4
 800e66e:	f00f f9e5 	bl	801da3c <GUI_ALLOC_LockH>
 800e672:	9004      	str	r0, [sp, #16]
 800e674:	7f02      	ldrb	r2, [r0, #28]
 800e676:	4295      	cmp	r5, r2
 800e678:	dbf0      	blt.n	800e65c <_CalcParams+0x124>
 800e67a:	a804      	add	r0, sp, #16
 800e67c:	f00f f9f0 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e680:	4650      	mov	r0, sl
 800e682:	f00f f9ed 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e686:	b01f      	add	sp, #124	; 0x7c
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	f00f f9e8 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e690:	4630      	mov	r0, r6
 800e692:	f00f f9d3 	bl	801da3c <GUI_ALLOC_LockH>
 800e696:	9005      	str	r0, [sp, #20]
 800e698:	7f03      	ldrb	r3, [r0, #28]
 800e69a:	429c      	cmp	r4, r3
 800e69c:	dbb5      	blt.n	800e60a <_CalcParams+0xd2>
 800e69e:	a805      	add	r0, sp, #20
 800e6a0:	4637      	mov	r7, r6
 800e6a2:	f00f f9dd 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e6a6:	462c      	mov	r4, r5
 800e6a8:	e767      	b.n	800e57a <_CalcParams+0x42>
 800e6aa:	6844      	ldr	r4, [r0, #4]
 800e6ac:	a805      	add	r0, sp, #20
 800e6ae:	f00f f9d7 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e6b2:	2c00      	cmp	r4, #0
 800e6b4:	d0af      	beq.n	800e616 <_CalcParams+0xde>
 800e6b6:	4627      	mov	r7, r4
 800e6b8:	e7f5      	b.n	800e6a6 <_CalcParams+0x16e>
 800e6ba:	4644      	mov	r4, r8
 800e6bc:	e78d      	b.n	800e5da <_CalcParams+0xa2>
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f00f f9bc 	bl	801da3c <GUI_ALLOC_LockH>
 800e6c4:	1c66      	adds	r6, r4, #1
 800e6c6:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800e6ca:	9004      	str	r0, [sp, #16]
 800e6cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6d0:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800e6d4:	f00f f9b2 	bl	801da3c <GUI_ALLOC_LockH>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	3c01      	subs	r4, #1
 800e6dc:	a805      	add	r0, sp, #20
 800e6de:	9305      	str	r3, [sp, #20]
 800e6e0:	b11b      	cbz	r3, 800e6ea <_CalcParams+0x1b2>
 800e6e2:	8b1a      	ldrh	r2, [r3, #24]
 800e6e4:	f042 0204 	orr.w	r2, r2, #4
 800e6e8:	831a      	strh	r2, [r3, #24]
 800e6ea:	f00f f9b9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e6ee:	42a5      	cmp	r5, r4
 800e6f0:	dbee      	blt.n	800e6d0 <_CalcParams+0x198>
 800e6f2:	9b04      	ldr	r3, [sp, #16]
 800e6f4:	7f1c      	ldrb	r4, [r3, #28]
 800e6f6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800e6fa:	1e66      	subs	r6, r4, #1
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	fa02 f606 	lsl.w	r6, r2, r6
 800e702:	b2b6      	uxth	r6, r6
 800e704:	f1bb 0f00 	cmp.w	fp, #0
 800e708:	d108      	bne.n	800e71c <_CalcParams+0x1e4>
 800e70a:	e011      	b.n	800e730 <_CalcParams+0x1f8>
 800e70c:	8b41      	ldrh	r1, [r0, #26]
 800e70e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800e712:	4331      	orrs	r1, r6
 800e714:	8341      	strh	r1, [r0, #26]
 800e716:	f1bb 0f00 	cmp.w	fp, #0
 800e71a:	d009      	beq.n	800e730 <_CalcParams+0x1f8>
 800e71c:	a804      	add	r0, sp, #16
 800e71e:	f00f f99f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e722:	4658      	mov	r0, fp
 800e724:	f00f f98a 	bl	801da3c <GUI_ALLOC_LockH>
 800e728:	9004      	str	r0, [sp, #16]
 800e72a:	7f02      	ldrb	r2, [r0, #28]
 800e72c:	4294      	cmp	r4, r2
 800e72e:	dbed      	blt.n	800e70c <_CalcParams+0x1d4>
 800e730:	a804      	add	r0, sp, #16
 800e732:	f00f f995 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e736:	e740      	b.n	800e5ba <_CalcParams+0x82>

0800e738 <_ManageAutoScroll>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4d8a      	ldr	r5, [pc, #552]	; (800e968 <_ManageAutoScroll+0x230>)
 800e73e:	682e      	ldr	r6, [r5, #0]
 800e740:	b095      	sub	sp, #84	; 0x54
 800e742:	4604      	mov	r4, r0
 800e744:	b126      	cbz	r6, 800e750 <_ManageAutoScroll+0x18>
 800e746:	2300      	movs	r3, #0
 800e748:	602b      	str	r3, [r5, #0]
 800e74a:	b015      	add	sp, #84	; 0x54
 800e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e750:	2301      	movs	r3, #1
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	f00f f972 	bl	801da3c <GUI_ALLOC_LockH>
 800e758:	a906      	add	r1, sp, #24
 800e75a:	9003      	str	r0, [sp, #12]
 800e75c:	4620      	mov	r0, r4
 800e75e:	f005 fc3f 	bl	8013fe0 <WM_GetInsideRectExScrollbar>
 800e762:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800e766:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800e76a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e76e:	1aff      	subs	r7, r7, r3
 800e770:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 800e774:	3701      	adds	r7, #1
 800e776:	42bb      	cmp	r3, r7
 800e778:	bfd4      	ite	le
 800e77a:	2300      	movle	r3, #0
 800e77c:	2301      	movgt	r3, #1
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d175      	bne.n	800e870 <_ManageAutoScroll+0x138>
 800e784:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800e788:	464b      	mov	r3, r9
 800e78a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e78e:	071a      	lsls	r2, r3, #28
 800e790:	d446      	bmi.n	800e820 <_ManageAutoScroll+0xe8>
 800e792:	4620      	mov	r0, r4
 800e794:	f005 fda4 	bl	80142e0 <WM_GetScrollbarV>
 800e798:	2800      	cmp	r0, #0
 800e79a:	f040 80d1 	bne.w	800e940 <_ManageAutoScroll+0x208>
 800e79e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800e7a2:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 800e7a6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800e7aa:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800e7ae:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e7b2:	1a82      	subs	r2, r0, r2
 800e7b4:	3201      	adds	r2, #1
 800e7b6:	4291      	cmp	r1, r2
 800e7b8:	bfd4      	ite	le
 800e7ba:	2600      	movle	r6, #0
 800e7bc:	2601      	movgt	r6, #1
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	d04c      	beq.n	800e85c <_ManageAutoScroll+0x124>
 800e7c2:	6459      	str	r1, [r3, #68]	; 0x44
 800e7c4:	64da      	str	r2, [r3, #76]	; 0x4c
 800e7c6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e7ca:	075b      	lsls	r3, r3, #29
 800e7cc:	d53a      	bpl.n	800e844 <_ManageAutoScroll+0x10c>
 800e7ce:	4640      	mov	r0, r8
 800e7d0:	f00f f946 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f004 fdda 	bl	8013390 <WM_SetScrollbarH>
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f00f f92d 	bl	801da3c <GUI_ALLOC_LockH>
 800e7e2:	9003      	str	r0, [sp, #12]
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	b90b      	cbnz	r3, 800e7ec <_ManageAutoScroll+0xb4>
 800e7e8:	2e00      	cmp	r6, #0
 800e7ea:	d039      	beq.n	800e860 <_ManageAutoScroll+0x128>
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e7f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800e7f4:	af08      	add	r7, sp, #32
 800e7f6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800e7fa:	3344      	adds	r3, #68	; 0x44
 800e7fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e800:	ae0b      	add	r6, sp, #44	; 0x2c
 800e802:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800e806:	4640      	mov	r0, r8
 800e808:	f00f f92a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e80c:	4620      	mov	r0, r4
 800e80e:	4639      	mov	r1, r7
 800e810:	4632      	mov	r2, r6
 800e812:	f7ff fbd1 	bl	800dfb8 <WIDGET__SetScrollState>
 800e816:	2300      	movs	r3, #0
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	b015      	add	sp, #84	; 0x54
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	f10d 080c 	add.w	r8, sp, #12
 800e824:	4640      	mov	r0, r8
 800e826:	f00f f91b 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e82a:	9900      	ldr	r1, [sp, #0]
 800e82c:	4620      	mov	r0, r4
 800e82e:	f004 fddf 	bl	80133f0 <WM_SetScrollbarV>
 800e832:	4620      	mov	r0, r4
 800e834:	f7ff fe80 	bl	800e538 <_CalcParams>
 800e838:	4620      	mov	r0, r4
 800e83a:	f00f f8ff 	bl	801da3c <GUI_ALLOC_LockH>
 800e83e:	9003      	str	r0, [sp, #12]
 800e840:	4603      	mov	r3, r0
 800e842:	e7b0      	b.n	800e7a6 <_ManageAutoScroll+0x6e>
 800e844:	4620      	mov	r0, r4
 800e846:	f005 fd03 	bl	8014250 <WM_GetScrollbarH>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d0ca      	beq.n	800e7e4 <_ManageAutoScroll+0xac>
 800e84e:	9b03      	ldr	r3, [sp, #12]
 800e850:	2e00      	cmp	r6, #0
 800e852:	d1cc      	bne.n	800e7ee <_ManageAutoScroll+0xb6>
 800e854:	2201      	movs	r2, #1
 800e856:	645a      	str	r2, [r3, #68]	; 0x44
 800e858:	64da      	str	r2, [r3, #76]	; 0x4c
 800e85a:	e7c8      	b.n	800e7ee <_ManageAutoScroll+0xb6>
 800e85c:	649e      	str	r6, [r3, #72]	; 0x48
 800e85e:	e7b2      	b.n	800e7c6 <_ManageAutoScroll+0x8e>
 800e860:	4640      	mov	r0, r8
 800e862:	f00f f8fd 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e866:	2300      	movs	r3, #0
 800e868:	602b      	str	r3, [r5, #0]
 800e86a:	b015      	add	sp, #84	; 0x54
 800e86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e870:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 800e874:	3301      	adds	r3, #1
 800e876:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 800e87a:	4620      	mov	r0, r4
 800e87c:	f00f f8de 	bl	801da3c <GUI_ALLOC_LockH>
 800e880:	4603      	mov	r3, r0
 800e882:	a814      	add	r0, sp, #80	; 0x50
 800e884:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
 800e888:	f840 3d40 	str.w	r3, [r0, #-64]!
 800e88c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800e890:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 800e894:	f00f f8e4 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e898:	f1b8 0f01 	cmp.w	r8, #1
 800e89c:	dd60      	ble.n	800e960 <_ManageAutoScroll+0x228>
 800e89e:	a908      	add	r1, sp, #32
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f005 fb9d 	bl	8013fe0 <WM_GetInsideRectExScrollbar>
 800e8a6:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 800e8aa:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800e8ae:	1a8a      	subs	r2, r1, r2
 800e8b0:	9201      	str	r2, [sp, #4]
 800e8b2:	2f00      	cmp	r7, #0
 800e8b4:	d054      	beq.n	800e960 <_ManageAutoScroll+0x228>
 800e8b6:	46b0      	mov	r8, r6
 800e8b8:	f108 0801 	add.w	r8, r8, #1
 800e8bc:	9705      	str	r7, [sp, #20]
 800e8be:	f1ba 0f00 	cmp.w	sl, #0
 800e8c2:	d03b      	beq.n	800e93c <_ManageAutoScroll+0x204>
 800e8c4:	231b      	movs	r3, #27
 800e8c6:	930c      	str	r3, [sp, #48]	; 0x30
 800e8c8:	ab05      	add	r3, sp, #20
 800e8ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800e8cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8ce:	a80b      	add	r0, sp, #44	; 0x2c
 800e8d0:	47d0      	blx	sl
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	4416      	add	r6, r2
 800e8d8:	f00f f8b0 	bl	801da3c <GUI_ALLOC_LockH>
 800e8dc:	8b03      	ldrh	r3, [r0, #24]
 800e8de:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8e0:	07df      	lsls	r7, r3, #31
 800e8e2:	d51c      	bpl.n	800e91e <_ManageAutoScroll+0x1e6>
 800e8e4:	0799      	lsls	r1, r3, #30
 800e8e6:	d41a      	bmi.n	800e91e <_ManageAutoScroll+0x1e6>
 800e8e8:	f890 b01c 	ldrb.w	fp, [r0, #28]
 800e8ec:	6847      	ldr	r7, [r0, #4]
 800e8ee:	a80b      	add	r0, sp, #44	; 0x2c
 800e8f0:	b92f      	cbnz	r7, 800e8fe <_ManageAutoScroll+0x1c6>
 800e8f2:	f00f f8b5 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e8f6:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 800e8fa:	9b03      	ldr	r3, [sp, #12]
 800e8fc:	e745      	b.n	800e78a <_ManageAutoScroll+0x52>
 800e8fe:	f00f f8af 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e902:	4638      	mov	r0, r7
 800e904:	f00f f89a 	bl	801da3c <GUI_ALLOC_LockH>
 800e908:	900b      	str	r0, [sp, #44]	; 0x2c
 800e90a:	7f02      	ldrb	r2, [r0, #28]
 800e90c:	4593      	cmp	fp, r2
 800e90e:	dbed      	blt.n	800e8ec <_ManageAutoScroll+0x1b4>
 800e910:	a80b      	add	r0, sp, #44	; 0x2c
 800e912:	f00f f8a5 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e916:	9b01      	ldr	r3, [sp, #4]
 800e918:	42b3      	cmp	r3, r6
 800e91a:	dacd      	bge.n	800e8b8 <_ManageAutoScroll+0x180>
 800e91c:	e7eb      	b.n	800e8f6 <_ManageAutoScroll+0x1be>
 800e91e:	6847      	ldr	r7, [r0, #4]
 800e920:	a80b      	add	r0, sp, #44	; 0x2c
 800e922:	f00f f89d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e926:	9b01      	ldr	r3, [sp, #4]
 800e928:	42b3      	cmp	r3, r6
 800e92a:	dbe4      	blt.n	800e8f6 <_ManageAutoScroll+0x1be>
 800e92c:	2f00      	cmp	r7, #0
 800e92e:	d0e2      	beq.n	800e8f6 <_ManageAutoScroll+0x1be>
 800e930:	f108 0801 	add.w	r8, r8, #1
 800e934:	9705      	str	r7, [sp, #20]
 800e936:	f1ba 0f00 	cmp.w	sl, #0
 800e93a:	d1c3      	bne.n	800e8c4 <_ManageAutoScroll+0x18c>
 800e93c:	4652      	mov	r2, sl
 800e93e:	e7c9      	b.n	800e8d4 <_ManageAutoScroll+0x19c>
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800e946:	b933      	cbnz	r3, 800e956 <_ManageAutoScroll+0x21e>
 800e948:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 800e94c:	2201      	movs	r2, #1
 800e94e:	9200      	str	r2, [sp, #0]
 800e950:	639a      	str	r2, [r3, #56]	; 0x38
 800e952:	641a      	str	r2, [r3, #64]	; 0x40
 800e954:	e727      	b.n	800e7a6 <_ManageAutoScroll+0x6e>
 800e956:	2301      	movs	r3, #1
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 800e95e:	e722      	b.n	800e7a6 <_ManageAutoScroll+0x6e>
 800e960:	f04f 0800 	mov.w	r8, #0
 800e964:	e7c7      	b.n	800e8f6 <_ManageAutoScroll+0x1be>
 800e966:	bf00      	nop
 800e968:	2002b164 	.word	0x2002b164

0800e96c <_GetVisibility>:
 800e96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e970:	b091      	sub	sp, #68	; 0x44
 800e972:	4681      	mov	r9, r0
 800e974:	460e      	mov	r6, r1
 800e976:	a904      	add	r1, sp, #16
 800e978:	9201      	str	r2, [sp, #4]
 800e97a:	f005 fb31 	bl	8013fe0 <WM_GetInsideRectExScrollbar>
 800e97e:	4648      	mov	r0, r9
 800e980:	f8bd a012 	ldrh.w	sl, [sp, #18]
 800e984:	f00f f85a 	bl	801da3c <GUI_ALLOC_LockH>
 800e988:	4602      	mov	r2, r0
 800e98a:	a810      	add	r0, sp, #64	; 0x40
 800e98c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e98e:	f840 2d38 	str.w	r2, [r0, #-56]!
 800e992:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 800e996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e998:	9200      	str	r2, [sp, #0]
 800e99a:	1e65      	subs	r5, r4, #1
 800e99c:	f00f f860 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e9a0:	2c00      	cmp	r4, #0
 800e9a2:	d035      	beq.n	800ea10 <_GetVisibility+0xa4>
 800e9a4:	b197      	cbz	r7, 800e9cc <_GetVisibility+0x60>
 800e9a6:	42b7      	cmp	r7, r6
 800e9a8:	d02d      	beq.n	800ea06 <_GetVisibility+0x9a>
 800e9aa:	ac07      	add	r4, sp, #28
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	f00f f845 	bl	801da3c <GUI_ALLOC_LockH>
 800e9b2:	8b03      	ldrh	r3, [r0, #24]
 800e9b4:	9007      	str	r0, [sp, #28]
 800e9b6:	07df      	lsls	r7, r3, #31
 800e9b8:	d51a      	bpl.n	800e9f0 <_GetVisibility+0x84>
 800e9ba:	0799      	lsls	r1, r3, #30
 800e9bc:	d418      	bmi.n	800e9f0 <_GetVisibility+0x84>
 800e9be:	f890 801c 	ldrb.w	r8, [r0, #28]
 800e9c2:	6847      	ldr	r7, [r0, #4]
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	b92f      	cbnz	r7, 800e9d4 <_GetVisibility+0x68>
 800e9c8:	f00f f84a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e9cc:	2002      	movs	r0, #2
 800e9ce:	b011      	add	sp, #68	; 0x44
 800e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d4:	f00f f844 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f00f f82f 	bl	801da3c <GUI_ALLOC_LockH>
 800e9de:	9007      	str	r0, [sp, #28]
 800e9e0:	7f02      	ldrb	r2, [r0, #28]
 800e9e2:	4590      	cmp	r8, r2
 800e9e4:	dbed      	blt.n	800e9c2 <_GetVisibility+0x56>
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f00f f83a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e9ec:	b93d      	cbnz	r5, 800e9fe <_GetVisibility+0x92>
 800e9ee:	e011      	b.n	800ea14 <_GetVisibility+0xa8>
 800e9f0:	6847      	ldr	r7, [r0, #4]
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f00f f834 	bl	801da60 <GUI_ALLOC_UnlockH>
 800e9f8:	b155      	cbz	r5, 800ea10 <_GetVisibility+0xa4>
 800e9fa:	2f00      	cmp	r7, #0
 800e9fc:	d0e6      	beq.n	800e9cc <_GetVisibility+0x60>
 800e9fe:	42be      	cmp	r6, r7
 800ea00:	f105 35ff 	add.w	r5, r5, #4294967295
 800ea04:	d1d2      	bne.n	800e9ac <_GetVisibility+0x40>
 800ea06:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0a:	b011      	add	sp, #68	; 0x44
 800ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea10:	2f00      	cmp	r7, #0
 800ea12:	d0db      	beq.n	800e9cc <_GetVisibility+0x60>
 800ea14:	fa0f f58a 	sxth.w	r5, sl
 800ea18:	f04f 0b1b 	mov.w	fp, #27
 800ea1c:	f10d 0a0c 	add.w	sl, sp, #12
 800ea20:	9b00      	ldr	r3, [sp, #0]
 800ea22:	9703      	str	r7, [sp, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d02e      	beq.n	800ea86 <_GetVisibility+0x11a>
 800ea28:	f8cd b020 	str.w	fp, [sp, #32]
 800ea2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ea30:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800ea34:	a807      	add	r0, sp, #28
 800ea36:	4798      	blx	r3
 800ea38:	42b7      	cmp	r7, r6
 800ea3a:	4405      	add	r5, r0
 800ea3c:	d027      	beq.n	800ea8e <_GetVisibility+0x122>
 800ea3e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800ea42:	4295      	cmp	r5, r2
 800ea44:	dcc2      	bgt.n	800e9cc <_GetVisibility+0x60>
 800ea46:	4638      	mov	r0, r7
 800ea48:	f00e fff8 	bl	801da3c <GUI_ALLOC_LockH>
 800ea4c:	8b03      	ldrh	r3, [r0, #24]
 800ea4e:	9007      	str	r0, [sp, #28]
 800ea50:	07da      	lsls	r2, r3, #31
 800ea52:	d533      	bpl.n	800eabc <_GetVisibility+0x150>
 800ea54:	079b      	lsls	r3, r3, #30
 800ea56:	d431      	bmi.n	800eabc <_GetVisibility+0x150>
 800ea58:	f890 801c 	ldrb.w	r8, [r0, #28]
 800ea5c:	ac07      	add	r4, sp, #28
 800ea5e:	6847      	ldr	r7, [r0, #4]
 800ea60:	4620      	mov	r0, r4
 800ea62:	2f00      	cmp	r7, #0
 800ea64:	d0b0      	beq.n	800e9c8 <_GetVisibility+0x5c>
 800ea66:	f00e fffb 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	f00e ffe6 	bl	801da3c <GUI_ALLOC_LockH>
 800ea70:	9007      	str	r0, [sp, #28]
 800ea72:	7f02      	ldrb	r2, [r0, #28]
 800ea74:	4590      	cmp	r8, r2
 800ea76:	dbf2      	blt.n	800ea5e <_GetVisibility+0xf2>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f00e fff1 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ea7e:	9b00      	ldr	r3, [sp, #0]
 800ea80:	9703      	str	r7, [sp, #12]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1d0      	bne.n	800ea28 <_GetVisibility+0xbc>
 800ea86:	4618      	mov	r0, r3
 800ea88:	42b7      	cmp	r7, r6
 800ea8a:	4405      	add	r5, r0
 800ea8c:	d1d7      	bne.n	800ea3e <_GetVisibility+0xd2>
 800ea8e:	9c01      	ldr	r4, [sp, #4]
 800ea90:	b154      	cbz	r4, 800eaa8 <_GetVisibility+0x13c>
 800ea92:	b2ab      	uxth	r3, r5
 800ea94:	1a18      	subs	r0, r3, r0
 800ea96:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800ea9a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ea9e:	8060      	strh	r0, [r4, #2]
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	80e3      	strh	r3, [r4, #6]
 800eaa4:	8021      	strh	r1, [r4, #0]
 800eaa6:	80a2      	strh	r2, [r4, #4]
 800eaa8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800eaac:	3001      	adds	r0, #1
 800eaae:	4285      	cmp	r5, r0
 800eab0:	bfd4      	ite	le
 800eab2:	2000      	movle	r0, #0
 800eab4:	2001      	movgt	r0, #1
 800eab6:	b011      	add	sp, #68	; 0x44
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	6847      	ldr	r7, [r0, #4]
 800eabe:	a807      	add	r0, sp, #28
 800eac0:	f00e ffce 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	d1ab      	bne.n	800ea20 <_GetVisibility+0xb4>
 800eac8:	e780      	b.n	800e9cc <_GetVisibility+0x60>
 800eaca:	bf00      	nop

0800eacc <_UpdateScrollPos>:
 800eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	b088      	sub	sp, #32
 800ead2:	4607      	mov	r7, r0
 800ead4:	f00e ffb2 	bl	801da3c <GUI_ALLOC_LockH>
 800ead8:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 800eadc:	9001      	str	r0, [sp, #4]
 800eade:	4630      	mov	r0, r6
 800eae0:	f00e ffac 	bl	801da3c <GUI_ALLOC_LockH>
 800eae4:	ad08      	add	r5, sp, #32
 800eae6:	4603      	mov	r3, r0
 800eae8:	f845 0d0c 	str.w	r0, [r5, #-12]!
 800eaec:	f890 801c 	ldrb.w	r8, [r0, #28]
 800eaf0:	689c      	ldr	r4, [r3, #8]
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	2c00      	cmp	r4, #0
 800eaf6:	d13f      	bne.n	800eb78 <_UpdateScrollPos+0xac>
 800eaf8:	f00e ffb2 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eafc:	e00d      	b.n	800eb1a <_UpdateScrollPos+0x4e>
 800eafe:	9901      	ldr	r1, [sp, #4]
 800eb00:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 800eb02:	db04      	blt.n	800eb0e <_UpdateScrollPos+0x42>
 800eb04:	2a01      	cmp	r2, #1
 800eb06:	d802      	bhi.n	800eb0e <_UpdateScrollPos+0x42>
 800eb08:	3001      	adds	r0, #1
 800eb0a:	63c8      	str	r0, [r1, #60]	; 0x3c
 800eb0c:	2401      	movs	r4, #1
 800eb0e:	f8d1 20b4 	ldr.w	r2, [r1, #180]	; 0xb4
 800eb12:	4282      	cmp	r2, r0
 800eb14:	dd41      	ble.n	800eb9a <_UpdateScrollPos+0xce>
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d041      	beq.n	800eb9e <_UpdateScrollPos+0xd2>
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	4638      	mov	r0, r7
 800eb20:	f7ff ff24 	bl	800e96c <_GetVisibility>
 800eb24:	1c41      	adds	r1, r0, #1
 800eb26:	4603      	mov	r3, r0
 800eb28:	f100 32ff 	add.w	r2, r0, #4294967295
 800eb2c:	d1e7      	bne.n	800eafe <_UpdateScrollPos+0x32>
 800eb2e:	9b01      	ldr	r3, [sp, #4]
 800eb30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eb32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800eb36:	3901      	subs	r1, #1
 800eb38:	4291      	cmp	r1, r2
 800eb3a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800eb3c:	f04f 0401 	mov.w	r4, #1
 800eb40:	dbeb      	blt.n	800eb1a <_UpdateScrollPos+0x4e>
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	dd01      	ble.n	800eb4a <_UpdateScrollPos+0x7e>
 800eb46:	3a01      	subs	r2, #1
 800eb48:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eb4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb50:	3344      	adds	r3, #68	; 0x44
 800eb52:	ae02      	add	r6, sp, #8
 800eb54:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800eb58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800eb60:	a801      	add	r0, sp, #4
 800eb62:	f00e ff7d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eb66:	4638      	mov	r0, r7
 800eb68:	4631      	mov	r1, r6
 800eb6a:	462a      	mov	r2, r5
 800eb6c:	f7ff fa24 	bl	800dfb8 <WIDGET__SetScrollState>
 800eb70:	4620      	mov	r0, r4
 800eb72:	b008      	add	sp, #32
 800eb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb78:	f00e ff72 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f00e ff5d 	bl	801da3c <GUI_ALLOC_LockH>
 800eb82:	9005      	str	r0, [sp, #20]
 800eb84:	7f02      	ldrb	r2, [r0, #28]
 800eb86:	4542      	cmp	r2, r8
 800eb88:	da05      	bge.n	800eb96 <_UpdateScrollPos+0xca>
 800eb8a:	8b04      	ldrh	r4, [r0, #24]
 800eb8c:	f004 0402 	and.w	r4, r4, #2
 800eb90:	b2a4      	uxth	r4, r4
 800eb92:	b134      	cbz	r4, 800eba2 <_UpdateScrollPos+0xd6>
 800eb94:	4690      	mov	r8, r2
 800eb96:	4603      	mov	r3, r0
 800eb98:	e7aa      	b.n	800eaf0 <_UpdateScrollPos+0x24>
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	e7d1      	b.n	800eb42 <_UpdateScrollPos+0x76>
 800eb9e:	460b      	mov	r3, r1
 800eba0:	e7d3      	b.n	800eb4a <_UpdateScrollPos+0x7e>
 800eba2:	4628      	mov	r0, r5
 800eba4:	f00e ff5c 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eba8:	a801      	add	r0, sp, #4
 800ebaa:	f00e ff59 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ebae:	4620      	mov	r0, r4
 800ebb0:	b008      	add	sp, #32
 800ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb6:	bf00      	nop

0800ebb8 <_SetSel>:
 800ebb8:	b570      	push	{r4, r5, r6, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	f00e ff3c 	bl	801da3c <GUI_ALLOC_LockH>
 800ebc4:	ab04      	add	r3, sp, #16
 800ebc6:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 800ebca:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800ebce:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f00e ff44 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7ff ff77 	bl	800eacc <_UpdateScrollPos>
 800ebde:	b998      	cbnz	r0, 800ec08 <_SetSel+0x50>
 800ebe0:	4631      	mov	r1, r6
 800ebe2:	aa02      	add	r2, sp, #8
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7ff fec1 	bl	800e96c <_GetVisibility>
 800ebea:	2801      	cmp	r0, #1
 800ebec:	d915      	bls.n	800ec1a <_SetSel+0x62>
 800ebee:	4629      	mov	r1, r5
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	aa02      	add	r2, sp, #8
 800ebf4:	f7ff feba 	bl	800e96c <_GetVisibility>
 800ebf8:	2801      	cmp	r0, #1
 800ebfa:	d909      	bls.n	800ec10 <_SetSel+0x58>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	2104      	movs	r1, #4
 800ec00:	f005 fcaa 	bl	8014558 <WM_NotifyParent>
 800ec04:	b004      	add	sp, #16
 800ec06:	bd70      	pop	{r4, r5, r6, pc}
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f007 fba1 	bl	8016350 <WM_InvalidateWindow>
 800ec0e:	e7f5      	b.n	800ebfc <_SetSel+0x44>
 800ec10:	a902      	add	r1, sp, #8
 800ec12:	4620      	mov	r0, r4
 800ec14:	f007 fad6 	bl	80161c4 <WM_InvalidateRect>
 800ec18:	e7f0      	b.n	800ebfc <_SetSel+0x44>
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	a902      	add	r1, sp, #8
 800ec1e:	f007 fad1 	bl	80161c4 <WM_InvalidateRect>
 800ec22:	e7e4      	b.n	800ebee <_SetSel+0x36>

0800ec24 <TREEVIEW_CreateIndirect>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	6986      	ldr	r6, [r0, #24]
 800ec2a:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 800ec2e:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 800ec32:	8a47      	ldrh	r7, [r0, #18]
 800ec34:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 800ec38:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800ec3c:	b089      	sub	sp, #36	; 0x24
 800ec3e:	4688      	mov	r8, r1
 800ec40:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800ec44:	9705      	str	r7, [sp, #20]
 800ec46:	eb01 0902 	add.w	r9, r1, r2
 800ec4a:	449b      	add	fp, r3
 800ec4c:	2702      	movs	r7, #2
 800ec4e:	f00c fb75 	bl	801b33c <GUI_Lock>
 800ec52:	f106 039c 	add.w	r3, r6, #156	; 0x9c
 800ec56:	4e16      	ldr	r6, [pc, #88]	; (800ecb0 <TREEVIEW_CreateIndirect+0x8c>)
 800ec58:	9303      	str	r3, [sp, #12]
 800ec5a:	f8cd 8000 	str.w	r8, [sp]
 800ec5e:	4623      	mov	r3, r4
 800ec60:	4648      	mov	r0, r9
 800ec62:	4659      	mov	r1, fp
 800ec64:	462a      	mov	r2, r5
 800ec66:	9701      	str	r7, [sp, #4]
 800ec68:	9602      	str	r6, [sp, #8]
 800ec6a:	f007 fbcd 	bl	8016408 <WM_CreateWindowAsChild>
 800ec6e:	4604      	mov	r4, r0
 800ec70:	b1c0      	cbz	r0, 800eca4 <TREEVIEW_CreateIndirect+0x80>
 800ec72:	f00e fee3 	bl	801da3c <GUI_ALLOC_LockH>
 800ec76:	ae08      	add	r6, sp, #32
 800ec78:	fa0f f18a 	sxth.w	r1, sl
 800ec7c:	2210      	movs	r2, #16
 800ec7e:	9007      	str	r0, [sp, #28]
 800ec80:	f7fe ffb4 	bl	800dbec <WIDGET__Init>
 800ec84:	f856 5d04 	ldr.w	r5, [r6, #-4]!
 800ec88:	490a      	ldr	r1, [pc, #40]	; (800ecb4 <TREEVIEW_CreateIndirect+0x90>)
 800ec8a:	224c      	movs	r2, #76	; 0x4c
 800ec8c:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800ec90:	f013 fe30 	bl	80228f4 <memcpy>
 800ec94:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <TREEVIEW_CreateIndirect+0x94>)
 800ec96:	9f05      	ldr	r7, [sp, #20]
 800ec98:	f8a5 709c 	strh.w	r7, [r5, #156]	; 0x9c
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	636b      	str	r3, [r5, #52]	; 0x34
 800eca0:	f00e fede 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eca4:	f00c fb40 	bl	801b328 <GUI_Unlock>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	b009      	add	sp, #36	; 0x24
 800ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb0:	0800f3b9 	.word	0x0800f3b9
 800ecb4:	20000130 	.word	0x20000130
 800ecb8:	0800e1e1 	.word	0x0800e1e1

0800ecbc <TREEVIEW_ITEM_Create>:
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	b083      	sub	sp, #12
 800ecc2:	4617      	mov	r7, r2
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	f00c fb39 	bl	801b33c <GUI_Lock>
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7f1 faaa 	bl	8000224 <strlen>
 800ecd0:	3020      	adds	r0, #32
 800ecd2:	f00f f83b 	bl	801dd4c <GUI_ALLOC_AllocZero>
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	b920      	cbnz	r0, 800ece4 <TREEVIEW_ITEM_Create+0x28>
 800ecda:	f00c fb25 	bl	801b328 <GUI_Unlock>
 800ecde:	4628      	mov	r0, r5
 800ece0:	b003      	add	sp, #12
 800ece2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ece4:	f00e feaa 	bl	801da3c <GUI_ALLOC_LockH>
 800ece8:	4603      	mov	r3, r0
 800ecea:	4621      	mov	r1, r4
 800ecec:	301d      	adds	r0, #29
 800ecee:	60df      	str	r7, [r3, #12]
 800ecf0:	9301      	str	r3, [sp, #4]
 800ecf2:	f013 ff65 	bl	8022bc0 <strcpy>
 800ecf6:	b126      	cbz	r6, 800ed02 <TREEVIEW_ITEM_Create+0x46>
 800ecf8:	9b01      	ldr	r3, [sp, #4]
 800ecfa:	8b1a      	ldrh	r2, [r3, #24]
 800ecfc:	f042 0201 	orr.w	r2, r2, #1
 800ed00:	831a      	strh	r2, [r3, #24]
 800ed02:	a801      	add	r0, sp, #4
 800ed04:	f00e feac 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ed08:	f00c fb0e 	bl	801b328 <GUI_Unlock>
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	b003      	add	sp, #12
 800ed10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed12:	bf00      	nop

0800ed14 <TREEVIEW_AttachItem>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	4604      	mov	r4, r0
 800ed1a:	b08d      	sub	sp, #52	; 0x34
 800ed1c:	468a      	mov	sl, r1
 800ed1e:	4693      	mov	fp, r2
 800ed20:	461f      	mov	r7, r3
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d053      	beq.n	800edce <TREEVIEW_AttachItem+0xba>
 800ed26:	b921      	cbnz	r1, 800ed32 <TREEVIEW_AttachItem+0x1e>
 800ed28:	4689      	mov	r9, r1
 800ed2a:	4648      	mov	r0, r9
 800ed2c:	b00d      	add	sp, #52	; 0x34
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	f00c fb03 	bl	801b33c <GUI_Lock>
 800ed36:	4650      	mov	r0, sl
 800ed38:	f00e fe80 	bl	801da3c <GUI_ALLOC_LockH>
 800ed3c:	6845      	ldr	r5, [r0, #4]
 800ed3e:	9006      	str	r0, [sp, #24]
 800ed40:	2d00      	cmp	r5, #0
 800ed42:	d149      	bne.n	800edd8 <TREEVIEW_AttachItem+0xc4>
 800ed44:	46a8      	mov	r8, r5
 800ed46:	462e      	mov	r6, r5
 800ed48:	6883      	ldr	r3, [r0, #8]
 800ed4a:	a806      	add	r0, sp, #24
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 80fc 	bne.w	800ef4a <TREEVIEW_AttachItem+0x236>
 800ed52:	f00e fe85 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ed56:	4620      	mov	r0, r4
 800ed58:	f00e fe70 	bl	801da3c <GUI_ALLOC_LockH>
 800ed5c:	9007      	str	r0, [sp, #28]
 800ed5e:	4650      	mov	r0, sl
 800ed60:	f00e fe6c 	bl	801da3c <GUI_ALLOC_LockH>
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	9008      	str	r0, [sp, #32]
 800ed68:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	f000 80f1 	beq.w	800ef54 <TREEVIEW_AttachItem+0x240>
 800ed72:	f1bb 0f00 	cmp.w	fp, #0
 800ed76:	d056      	beq.n	800ee26 <TREEVIEW_AttachItem+0x112>
 800ed78:	2f02      	cmp	r7, #2
 800ed7a:	f000 8127 	beq.w	800efcc <TREEVIEW_AttachItem+0x2b8>
 800ed7e:	2f00      	cmp	r7, #0
 800ed80:	f000 8109 	beq.w	800ef96 <TREEVIEW_AttachItem+0x282>
 800ed84:	2f01      	cmp	r7, #1
 800ed86:	f000 813a 	beq.w	800effe <TREEVIEW_AttachItem+0x2ea>
 800ed8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed8c:	9204      	str	r2, [sp, #16]
 800ed8e:	3101      	adds	r1, #1
 800ed90:	af0c      	add	r7, sp, #48	; 0x30
 800ed92:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 800ed96:	a807      	add	r0, sp, #28
 800ed98:	f00e fe62 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ed9c:	f857 3d10 	ldr.w	r3, [r7, #-16]!
 800eda0:	601c      	str	r4, [r3, #0]
 800eda2:	4638      	mov	r0, r7
 800eda4:	f00e fe5c 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eda8:	4620      	mov	r0, r4
 800edaa:	f00e fe47 	bl	801da3c <GUI_ALLOC_LockH>
 800edae:	4603      	mov	r3, r0
 800edb0:	f04f 0b00 	mov.w	fp, #0
 800edb4:	900b      	str	r0, [sp, #44]	; 0x2c
 800edb6:	9804      	ldr	r0, [sp, #16]
 800edb8:	f8c3 b0b8 	str.w	fp, [r3, #184]	; 0xb8
 800edbc:	f8c3 b0bc 	str.w	fp, [r3, #188]	; 0xbc
 800edc0:	f00e fe4e 	bl	801da60 <GUI_ALLOC_UnlockH>
 800edc4:	4620      	mov	r0, r4
 800edc6:	46d9      	mov	r9, fp
 800edc8:	f007 fac2 	bl	8016350 <WM_InvalidateWindow>
 800edcc:	e036      	b.n	800ee3c <TREEVIEW_AttachItem+0x128>
 800edce:	4681      	mov	r9, r0
 800edd0:	4648      	mov	r0, r9
 800edd2:	b00d      	add	sp, #52	; 0x34
 800edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd8:	4650      	mov	r0, sl
 800edda:	f00e fe2f 	bl	801da3c <GUI_ALLOC_LockH>
 800edde:	8b03      	ldrh	r3, [r0, #24]
 800ede0:	900b      	str	r0, [sp, #44]	; 0x2c
 800ede2:	07d9      	lsls	r1, r3, #31
 800ede4:	f890 901c 	ldrb.w	r9, [r0, #28]
 800ede8:	f140 80a7 	bpl.w	800ef3a <TREEVIEW_AttachItem+0x226>
 800edec:	6846      	ldr	r6, [r0, #4]
 800edee:	2e00      	cmp	r6, #0
 800edf0:	f000 80a3 	beq.w	800ef3a <TREEVIEW_AttachItem+0x226>
 800edf4:	4630      	mov	r0, r6
 800edf6:	f00e fe21 	bl	801da3c <GUI_ALLOC_LockH>
 800edfa:	ab0c      	add	r3, sp, #48	; 0x30
 800edfc:	4686      	mov	lr, r0
 800edfe:	f843 0d08 	str.w	r0, [r3, #-8]!
 800ee02:	7f01      	ldrb	r1, [r0, #28]
 800ee04:	46d4      	mov	ip, sl
 800ee06:	4589      	cmp	r9, r1
 800ee08:	f280 80c3 	bge.w	800ef92 <TREEVIEW_AttachItem+0x27e>
 800ee0c:	f8de 8004 	ldr.w	r8, [lr, #4]
 800ee10:	f1b8 0f00 	cmp.w	r8, #0
 800ee14:	f040 80ac 	bne.w	800ef70 <TREEVIEW_AttachItem+0x25c>
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f00e fe21 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ee1e:	e08d      	b.n	800ef3c <TREEVIEW_AttachItem+0x228>
 800ee20:	a809      	add	r0, sp, #36	; 0x24
 800ee22:	f00e fe1d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ee26:	a807      	add	r0, sp, #28
 800ee28:	af08      	add	r7, sp, #32
 800ee2a:	f00e fe19 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f00e fe16 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ee34:	ab0b      	add	r3, sp, #44	; 0x2c
 800ee36:	f04f 0901 	mov.w	r9, #1
 800ee3a:	9304      	str	r3, [sp, #16]
 800ee3c:	4650      	mov	r0, sl
 800ee3e:	f00e fdfd 	bl	801da3c <GUI_ALLOC_LockH>
 800ee42:	9006      	str	r0, [sp, #24]
 800ee44:	4620      	mov	r0, r4
 800ee46:	f00e fdf9 	bl	801da3c <GUI_ALLOC_LockH>
 800ee4a:	9a06      	ldr	r2, [sp, #24]
 800ee4c:	9008      	str	r0, [sp, #32]
 800ee4e:	7f12      	ldrb	r2, [r2, #28]
 800ee50:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800ee52:	9205      	str	r2, [sp, #20]
 800ee54:	f00d fd70 	bl	801c938 <GUI_SetFont>
 800ee58:	f8dd b018 	ldr.w	fp, [sp, #24]
 800ee5c:	9908      	ldr	r1, [sp, #32]
 800ee5e:	f89b 001c 	ldrb.w	r0, [fp, #28]
 800ee62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ee66:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 800ee6a:	fb00 2202 	mla	r2, r0, r2, r2
 800ee6e:	440a      	add	r2, r1
 800ee70:	f10b 001d 	add.w	r0, fp, #29
 800ee74:	fa1f fa82 	uxth.w	sl, r2
 800ee78:	f00c ff84 	bl	801bd84 <GUI_GetStringDistX>
 800ee7c:	4450      	add	r0, sl
 800ee7e:	f8ab 0014 	strh.w	r0, [fp, #20]
 800ee82:	2d00      	cmp	r5, #0
 800ee84:	d03d      	beq.n	800ef02 <TREEVIEW_AttachItem+0x1ee>
 800ee86:	f1b9 0f00 	cmp.w	r9, #0
 800ee8a:	d13a      	bne.n	800ef02 <TREEVIEW_AttachItem+0x1ee>
 800ee8c:	9806      	ldr	r0, [sp, #24]
 800ee8e:	46ab      	mov	fp, r5
 800ee90:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800ee94:	6004      	str	r4, [r0, #0]
 800ee96:	6045      	str	r5, [r0, #4]
 800ee98:	e003      	b.n	800eea2 <TREEVIEW_AttachItem+0x18e>
 800ee9a:	455e      	cmp	r6, fp
 800ee9c:	d019      	beq.n	800eed2 <TREEVIEW_AttachItem+0x1be>
 800ee9e:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800eea2:	9908      	ldr	r1, [sp, #32]
 800eea4:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 800eea8:	3501      	adds	r5, #1
 800eeaa:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 800eeae:	f1bb 0f00 	cmp.w	fp, #0
 800eeb2:	d0f2      	beq.n	800ee9a <TREEVIEW_AttachItem+0x186>
 800eeb4:	a806      	add	r0, sp, #24
 800eeb6:	f00e fdd3 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eeba:	4658      	mov	r0, fp
 800eebc:	f00e fdbe 	bl	801da3c <GUI_ALLOC_LockH>
 800eec0:	9a05      	ldr	r2, [sp, #20]
 800eec2:	7f01      	ldrb	r1, [r0, #28]
 800eec4:	9006      	str	r0, [sp, #24]
 800eec6:	4411      	add	r1, r2
 800eec8:	ebc8 0101 	rsb	r1, r8, r1
 800eecc:	6004      	str	r4, [r0, #0]
 800eece:	7701      	strb	r1, [r0, #28]
 800eed0:	e7e3      	b.n	800ee9a <TREEVIEW_AttachItem+0x186>
 800eed2:	4630      	mov	r0, r6
 800eed4:	f00e fdb2 	bl	801da3c <GUI_ALLOC_LockH>
 800eed8:	aa0c      	add	r2, sp, #48	; 0x30
 800eeda:	f842 0d08 	str.w	r0, [r2, #-8]!
 800eede:	f8c0 a004 	str.w	sl, [r0, #4]
 800eee2:	4610      	mov	r0, r2
 800eee4:	f00e fdbc 	bl	801da60 <GUI_ALLOC_UnlockH>
 800eee8:	f1ba 0f00 	cmp.w	sl, #0
 800eeec:	d009      	beq.n	800ef02 <TREEVIEW_AttachItem+0x1ee>
 800eeee:	4650      	mov	r0, sl
 800eef0:	f00e fda4 	bl	801da3c <GUI_ALLOC_LockH>
 800eef4:	aa0c      	add	r2, sp, #48	; 0x30
 800eef6:	f842 0d0c 	str.w	r0, [r2, #-12]!
 800eefa:	6086      	str	r6, [r0, #8]
 800eefc:	4610      	mov	r0, r2
 800eefe:	f00e fdaf 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef02:	4638      	mov	r0, r7
 800ef04:	f00e fdac 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef08:	a806      	add	r0, sp, #24
 800ef0a:	f00e fda9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f00e fd94 	bl	801da3c <GUI_ALLOC_LockH>
 800ef14:	4602      	mov	r2, r0
 800ef16:	2100      	movs	r1, #0
 800ef18:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef1a:	9804      	ldr	r0, [sp, #16]
 800ef1c:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
 800ef20:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
 800ef24:	f00e fd9c 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f007 fa11 	bl	8016350 <WM_InvalidateWindow>
 800ef2e:	f00c f9fb 	bl	801b328 <GUI_Unlock>
 800ef32:	4648      	mov	r0, r9
 800ef34:	b00d      	add	sp, #52	; 0x34
 800ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3a:	4656      	mov	r6, sl
 800ef3c:	a80b      	add	r0, sp, #44	; 0x2c
 800ef3e:	f00e fd8f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef42:	9806      	ldr	r0, [sp, #24]
 800ef44:	f890 801c 	ldrb.w	r8, [r0, #28]
 800ef48:	e6fe      	b.n	800ed48 <TREEVIEW_AttachItem+0x34>
 800ef4a:	f00e fd89 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef4e:	f04f 0900 	mov.w	r9, #0
 800ef52:	e7ec      	b.n	800ef2e <TREEVIEW_AttachItem+0x21a>
 800ef54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	f47f af64 	bne.w	800ee26 <TREEVIEW_AttachItem+0x112>
 800ef5e:	f8c3 a0a8 	str.w	sl, [r3, #168]	; 0xa8
 800ef62:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800ef66:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 800ef6a:	6041      	str	r1, [r0, #4]
 800ef6c:	6081      	str	r1, [r0, #8]
 800ef6e:	e70c      	b.n	800ed8a <TREEVIEW_AttachItem+0x76>
 800ef70:	4618      	mov	r0, r3
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	f00e fd74 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ef78:	4640      	mov	r0, r8
 800ef7a:	f00e fd5f 	bl	801da3c <GUI_ALLOC_LockH>
 800ef7e:	900a      	str	r0, [sp, #40]	; 0x28
 800ef80:	7f01      	ldrb	r1, [r0, #28]
 800ef82:	9b01      	ldr	r3, [sp, #4]
 800ef84:	4589      	cmp	r9, r1
 800ef86:	bfb4      	ite	lt
 800ef88:	46c4      	movlt	ip, r8
 800ef8a:	46b4      	movge	ip, r6
 800ef8c:	4686      	mov	lr, r0
 800ef8e:	4646      	mov	r6, r8
 800ef90:	e739      	b.n	800ee06 <TREEVIEW_AttachItem+0xf2>
 800ef92:	4666      	mov	r6, ip
 800ef94:	e740      	b.n	800ee18 <TREEVIEW_AttachItem+0x104>
 800ef96:	4658      	mov	r0, fp
 800ef98:	f00e fd50 	bl	801da3c <GUI_ALLOC_LockH>
 800ef9c:	6887      	ldr	r7, [r0, #8]
 800ef9e:	900a      	str	r0, [sp, #40]	; 0x28
 800efa0:	2f00      	cmp	r7, #0
 800efa2:	d164      	bne.n	800f06e <TREEVIEW_AttachItem+0x35a>
 800efa4:	9b07      	ldr	r3, [sp, #28]
 800efa6:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 800efaa:	9b08      	ldr	r3, [sp, #32]
 800efac:	7f01      	ldrb	r1, [r0, #28]
 800efae:	f8c0 a008 	str.w	sl, [r0, #8]
 800efb2:	a80a      	add	r0, sp, #40	; 0x28
 800efb4:	7719      	strb	r1, [r3, #28]
 800efb6:	f8c3 b004 	str.w	fp, [r3, #4]
 800efba:	609f      	str	r7, [r3, #8]
 800efbc:	f00e fd50 	bl	801da60 <GUI_ALLOC_UnlockH>
 800efc0:	9b07      	ldr	r3, [sp, #28]
 800efc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800efc4:	9204      	str	r2, [sp, #16]
 800efc6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800efca:	e6e0      	b.n	800ed8e <TREEVIEW_AttachItem+0x7a>
 800efcc:	4658      	mov	r0, fp
 800efce:	f00e fd35 	bl	801da3c <GUI_ALLOC_LockH>
 800efd2:	8b03      	ldrh	r3, [r0, #24]
 800efd4:	9009      	str	r0, [sp, #36]	; 0x24
 800efd6:	07da      	lsls	r2, r3, #31
 800efd8:	f57f af22 	bpl.w	800ee20 <TREEVIEW_AttachItem+0x10c>
 800efdc:	6847      	ldr	r7, [r0, #4]
 800efde:	2f00      	cmp	r7, #0
 800efe0:	d15f      	bne.n	800f0a2 <TREEVIEW_AttachItem+0x38e>
 800efe2:	9b07      	ldr	r3, [sp, #28]
 800efe4:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800efe8:	7f01      	ldrb	r1, [r0, #28]
 800efea:	9b08      	ldr	r3, [sp, #32]
 800efec:	f8c0 a004 	str.w	sl, [r0, #4]
 800eff0:	3101      	adds	r1, #1
 800eff2:	7719      	strb	r1, [r3, #28]
 800eff4:	605f      	str	r7, [r3, #4]
 800eff6:	f8c3 b008 	str.w	fp, [r3, #8]
 800effa:	a809      	add	r0, sp, #36	; 0x24
 800effc:	e7de      	b.n	800efbc <TREEVIEW_AttachItem+0x2a8>
 800effe:	4658      	mov	r0, fp
 800f000:	f00e fd1c 	bl	801da3c <GUI_ALLOC_LockH>
 800f004:	af0c      	add	r7, sp, #48	; 0x30
 800f006:	4603      	mov	r3, r0
 800f008:	f847 0d0c 	str.w	r0, [r7, #-12]!
 800f00c:	7f1b      	ldrb	r3, [r3, #28]
 800f00e:	9305      	str	r3, [sp, #20]
 800f010:	4638      	mov	r0, r7
 800f012:	f00e fd25 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f016:	4658      	mov	r0, fp
 800f018:	f00e fd10 	bl	801da3c <GUI_ALLOC_LockH>
 800f01c:	8b03      	ldrh	r3, [r0, #24]
 800f01e:	900b      	str	r0, [sp, #44]	; 0x2c
 800f020:	07db      	lsls	r3, r3, #31
 800f022:	7f01      	ldrb	r1, [r0, #28]
 800f024:	d502      	bpl.n	800f02c <TREEVIEW_AttachItem+0x318>
 800f026:	6842      	ldr	r2, [r0, #4]
 800f028:	2a00      	cmp	r2, #0
 800f02a:	d147      	bne.n	800f0bc <TREEVIEW_AttachItem+0x3a8>
 800f02c:	ab0b      	add	r3, sp, #44	; 0x2c
 800f02e:	4618      	mov	r0, r3
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	f00e fd15 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f036:	4658      	mov	r0, fp
 800f038:	f00e fd00 	bl	801da3c <GUI_ALLOC_LockH>
 800f03c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f040:	9009      	str	r0, [sp, #36]	; 0x24
 800f042:	f1b9 0f00 	cmp.w	r9, #0
 800f046:	d11f      	bne.n	800f088 <TREEVIEW_AttachItem+0x374>
 800f048:	9b07      	ldr	r3, [sp, #28]
 800f04a:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800f04e:	9b08      	ldr	r3, [sp, #32]
 800f050:	9a05      	ldr	r2, [sp, #20]
 800f052:	f8c0 a004 	str.w	sl, [r0, #4]
 800f056:	f8c3 9004 	str.w	r9, [r3, #4]
 800f05a:	f8c3 b008 	str.w	fp, [r3, #8]
 800f05e:	771a      	strb	r2, [r3, #28]
 800f060:	4638      	mov	r0, r7
 800f062:	f00e fcfd 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f066:	9b07      	ldr	r3, [sp, #28]
 800f068:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800f06c:	e68f      	b.n	800ed8e <TREEVIEW_AttachItem+0x7a>
 800f06e:	4638      	mov	r0, r7
 800f070:	f00e fce4 	bl	801da3c <GUI_ALLOC_LockH>
 800f074:	ab0c      	add	r3, sp, #48	; 0x30
 800f076:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800f07a:	f8c0 a004 	str.w	sl, [r0, #4]
 800f07e:	4618      	mov	r0, r3
 800f080:	f00e fcee 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f084:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f086:	e790      	b.n	800efaa <TREEVIEW_AttachItem+0x296>
 800f088:	4648      	mov	r0, r9
 800f08a:	f00e fcd7 	bl	801da3c <GUI_ALLOC_LockH>
 800f08e:	ab0c      	add	r3, sp, #48	; 0x30
 800f090:	f843 0d08 	str.w	r0, [r3, #-8]!
 800f094:	f8c0 a008 	str.w	sl, [r0, #8]
 800f098:	4618      	mov	r0, r3
 800f09a:	f00e fce1 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f09e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0a0:	e7d5      	b.n	800f04e <TREEVIEW_AttachItem+0x33a>
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f00e fcca 	bl	801da3c <GUI_ALLOC_LockH>
 800f0a8:	ab0c      	add	r3, sp, #48	; 0x30
 800f0aa:	f843 0d08 	str.w	r0, [r3, #-8]!
 800f0ae:	f8c0 a008 	str.w	sl, [r0, #8]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f00e fcd4 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0ba:	e795      	b.n	800efe8 <TREEVIEW_AttachItem+0x2d4>
 800f0bc:	4610      	mov	r0, r2
 800f0be:	9103      	str	r1, [sp, #12]
 800f0c0:	9202      	str	r2, [sp, #8]
 800f0c2:	f00e fcbb 	bl	801da3c <GUI_ALLOC_LockH>
 800f0c6:	ab0c      	add	r3, sp, #48	; 0x30
 800f0c8:	4686      	mov	lr, r0
 800f0ca:	f843 ed08 	str.w	lr, [r3, #-8]!
 800f0ce:	9903      	ldr	r1, [sp, #12]
 800f0d0:	f89e e01c 	ldrb.w	lr, [lr, #28]
 800f0d4:	9a02      	ldr	r2, [sp, #8]
 800f0d6:	4571      	cmp	r1, lr
 800f0d8:	da20      	bge.n	800f11c <TREEVIEW_AttachItem+0x408>
 800f0da:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f0de:	f1b9 0f00 	cmp.w	r9, #0
 800f0e2:	d106      	bne.n	800f0f2 <TREEVIEW_AttachItem+0x3de>
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	9202      	str	r2, [sp, #8]
 800f0e8:	f00e fcba 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f0ec:	9a02      	ldr	r2, [sp, #8]
 800f0ee:	4693      	mov	fp, r2
 800f0f0:	e79c      	b.n	800f02c <TREEVIEW_AttachItem+0x318>
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	9202      	str	r2, [sp, #8]
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	f00e fcb1 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f0fe:	4648      	mov	r0, r9
 800f100:	f00e fc9c 	bl	801da3c <GUI_ALLOC_LockH>
 800f104:	900a      	str	r0, [sp, #40]	; 0x28
 800f106:	9a02      	ldr	r2, [sp, #8]
 800f108:	f890 e01c 	ldrb.w	lr, [r0, #28]
 800f10c:	9903      	ldr	r1, [sp, #12]
 800f10e:	9b01      	ldr	r3, [sp, #4]
 800f110:	4571      	cmp	r1, lr
 800f112:	bfb4      	ite	lt
 800f114:	46cb      	movlt	fp, r9
 800f116:	4693      	movge	fp, r2
 800f118:	464a      	mov	r2, r9
 800f11a:	e7dc      	b.n	800f0d6 <TREEVIEW_AttachItem+0x3c2>
 800f11c:	465a      	mov	r2, fp
 800f11e:	e7e1      	b.n	800f0e4 <TREEVIEW_AttachItem+0x3d0>

0800f120 <TREEVIEW_GetItem>:
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f122:	b087      	sub	sp, #28
 800f124:	2300      	movs	r3, #0
 800f126:	460c      	mov	r4, r1
 800f128:	4615      	mov	r5, r2
 800f12a:	9303      	str	r3, [sp, #12]
 800f12c:	b921      	cbnz	r1, 800f138 <TREEVIEW_GetItem+0x18>
 800f12e:	2a01      	cmp	r2, #1
 800f130:	d902      	bls.n	800f138 <TREEVIEW_GetItem+0x18>
 800f132:	4608      	mov	r0, r1
 800f134:	b007      	add	sp, #28
 800f136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f138:	2800      	cmp	r0, #0
 800f13a:	d0fb      	beq.n	800f134 <TREEVIEW_GetItem+0x14>
 800f13c:	9001      	str	r0, [sp, #4]
 800f13e:	f00c f8fd 	bl	801b33c <GUI_Lock>
 800f142:	9801      	ldr	r0, [sp, #4]
 800f144:	f00e fc7a 	bl	801da3c <GUI_ALLOC_LockH>
 800f148:	9002      	str	r0, [sp, #8]
 800f14a:	b944      	cbnz	r4, 800f15e <TREEVIEW_GetItem+0x3e>
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	2d05      	cmp	r5, #5
 800f150:	f200 80c5 	bhi.w	800f2de <TREEVIEW_GetItem+0x1be>
 800f154:	e8df f005 	tbb	[pc, r5]
 800f158:	324b6d73 	.word	0x324b6d73
 800f15c:	091a      	.short	0x091a
 800f15e:	4620      	mov	r0, r4
 800f160:	f00e fc6c 	bl	801da3c <GUI_ALLOC_LockH>
 800f164:	9003      	str	r0, [sp, #12]
 800f166:	4603      	mov	r3, r0
 800f168:	e7f1      	b.n	800f14e <TREEVIEW_GetItem+0x2e>
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d06d      	beq.n	800f24a <TREEVIEW_GetItem+0x12a>
 800f16e:	7f1e      	ldrb	r6, [r3, #28]
 800f170:	2e00      	cmp	r6, #0
 800f172:	d16c      	bne.n	800f24e <TREEVIEW_GetItem+0x12e>
 800f174:	4634      	mov	r4, r6
 800f176:	a803      	add	r0, sp, #12
 800f178:	f00e fc72 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f17c:	a802      	add	r0, sp, #8
 800f17e:	f00e fc6f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f182:	f00c f8d1 	bl	801b328 <GUI_Unlock>
 800f186:	4620      	mov	r0, r4
 800f188:	b007      	add	sp, #28
 800f18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d05c      	beq.n	800f24a <TREEVIEW_GetItem+0x12a>
 800f190:	8b1c      	ldrh	r4, [r3, #24]
 800f192:	f014 0401 	ands.w	r4, r4, #1
 800f196:	d0ee      	beq.n	800f176 <TREEVIEW_GetItem+0x56>
 800f198:	685c      	ldr	r4, [r3, #4]
 800f19a:	4620      	mov	r0, r4
 800f19c:	f00e fc4e 	bl	801da3c <GUI_ALLOC_LockH>
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	9005      	str	r0, [sp, #20]
 800f1a4:	7f02      	ldrb	r2, [r0, #28]
 800f1a6:	7f1b      	ldrb	r3, [r3, #28]
 800f1a8:	a805      	add	r0, sp, #20
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	bf98      	it	ls
 800f1ae:	2400      	movls	r4, #0
 800f1b0:	f00e fc56 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1dd      	bne.n	800f176 <TREEVIEW_GetItem+0x56>
 800f1ba:	e7df      	b.n	800f17c <TREEVIEW_GetItem+0x5c>
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d044      	beq.n	800f24a <TREEVIEW_GetItem+0x12a>
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	7f1e      	ldrb	r6, [r3, #28]
 800f1c4:	f00e fc3a 	bl	801da3c <GUI_ALLOC_LockH>
 800f1c8:	6884      	ldr	r4, [r0, #8]
 800f1ca:	9005      	str	r0, [sp, #20]
 800f1cc:	ad05      	add	r5, sp, #20
 800f1ce:	b91c      	cbnz	r4, 800f1d8 <TREEVIEW_GetItem+0xb8>
 800f1d0:	e027      	b.n	800f222 <TREEVIEW_GetItem+0x102>
 800f1d2:	dc26      	bgt.n	800f222 <TREEVIEW_GetItem+0x102>
 800f1d4:	6884      	ldr	r4, [r0, #8]
 800f1d6:	b324      	cbz	r4, 800f222 <TREEVIEW_GetItem+0x102>
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f00e fc41 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f00e fc2c 	bl	801da3c <GUI_ALLOC_LockH>
 800f1e4:	9005      	str	r0, [sp, #20]
 800f1e6:	7f03      	ldrb	r3, [r0, #28]
 800f1e8:	429e      	cmp	r6, r3
 800f1ea:	d1f2      	bne.n	800f1d2 <TREEVIEW_GetItem+0xb2>
 800f1ec:	e01a      	b.n	800f224 <TREEVIEW_GetItem+0x104>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d02b      	beq.n	800f24a <TREEVIEW_GetItem+0x12a>
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f00e fc22 	bl	801da3c <GUI_ALLOC_LockH>
 800f1f8:	8b03      	ldrh	r3, [r0, #24]
 800f1fa:	9005      	str	r0, [sp, #20]
 800f1fc:	07db      	lsls	r3, r3, #31
 800f1fe:	7f06      	ldrb	r6, [r0, #28]
 800f200:	d502      	bpl.n	800f208 <TREEVIEW_GetItem+0xe8>
 800f202:	6845      	ldr	r5, [r0, #4]
 800f204:	2d00      	cmp	r5, #0
 800f206:	d13a      	bne.n	800f27e <TREEVIEW_GetItem+0x15e>
 800f208:	ad05      	add	r5, sp, #20
 800f20a:	4628      	mov	r0, r5
 800f20c:	f00e fc28 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f210:	2c00      	cmp	r4, #0
 800f212:	d0cf      	beq.n	800f1b4 <TREEVIEW_GetItem+0x94>
 800f214:	4620      	mov	r0, r4
 800f216:	f00e fc11 	bl	801da3c <GUI_ALLOC_LockH>
 800f21a:	6844      	ldr	r4, [r0, #4]
 800f21c:	9005      	str	r0, [sp, #20]
 800f21e:	2c00      	cmp	r4, #0
 800f220:	d150      	bne.n	800f2c4 <TREEVIEW_GetItem+0x1a4>
 800f222:	2400      	movs	r4, #0
 800f224:	4628      	mov	r0, r5
 800f226:	f00e fc1b 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f22a:	9b03      	ldr	r3, [sp, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d1a2      	bne.n	800f176 <TREEVIEW_GetItem+0x56>
 800f230:	e7a4      	b.n	800f17c <TREEVIEW_GetItem+0x5c>
 800f232:	9a02      	ldr	r2, [sp, #8]
 800f234:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d19c      	bne.n	800f176 <TREEVIEW_GetItem+0x56>
 800f23c:	e79e      	b.n	800f17c <TREEVIEW_GetItem+0x5c>
 800f23e:	9a02      	ldr	r2, [sp, #8]
 800f240:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d196      	bne.n	800f176 <TREEVIEW_GetItem+0x56>
 800f248:	e798      	b.n	800f17c <TREEVIEW_GetItem+0x5c>
 800f24a:	461c      	mov	r4, r3
 800f24c:	e796      	b.n	800f17c <TREEVIEW_GetItem+0x5c>
 800f24e:	4620      	mov	r0, r4
 800f250:	f00e fbf4 	bl	801da3c <GUI_ALLOC_LockH>
 800f254:	6884      	ldr	r4, [r0, #8]
 800f256:	9005      	str	r0, [sp, #20]
 800f258:	3e01      	subs	r6, #1
 800f25a:	ad05      	add	r5, sp, #20
 800f25c:	b924      	cbnz	r4, 800f268 <TREEVIEW_GetItem+0x148>
 800f25e:	e7e0      	b.n	800f222 <TREEVIEW_GetItem+0x102>
 800f260:	dcdf      	bgt.n	800f222 <TREEVIEW_GetItem+0x102>
 800f262:	6884      	ldr	r4, [r0, #8]
 800f264:	2c00      	cmp	r4, #0
 800f266:	d0dc      	beq.n	800f222 <TREEVIEW_GetItem+0x102>
 800f268:	4628      	mov	r0, r5
 800f26a:	f00e fbf9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f26e:	4620      	mov	r0, r4
 800f270:	f00e fbe4 	bl	801da3c <GUI_ALLOC_LockH>
 800f274:	9005      	str	r0, [sp, #20]
 800f276:	7f03      	ldrb	r3, [r0, #28]
 800f278:	429e      	cmp	r6, r3
 800f27a:	d1f1      	bne.n	800f260 <TREEVIEW_GetItem+0x140>
 800f27c:	e7d2      	b.n	800f224 <TREEVIEW_GetItem+0x104>
 800f27e:	4628      	mov	r0, r5
 800f280:	f00e fbdc 	bl	801da3c <GUI_ALLOC_LockH>
 800f284:	af06      	add	r7, sp, #24
 800f286:	7f03      	ldrb	r3, [r0, #28]
 800f288:	f847 0d08 	str.w	r0, [r7, #-8]!
 800f28c:	4621      	mov	r1, r4
 800f28e:	4602      	mov	r2, r0
 800f290:	462c      	mov	r4, r5
 800f292:	429e      	cmp	r6, r3
 800f294:	da14      	bge.n	800f2c0 <TREEVIEW_GetItem+0x1a0>
 800f296:	6855      	ldr	r5, [r2, #4]
 800f298:	b91d      	cbnz	r5, 800f2a2 <TREEVIEW_GetItem+0x182>
 800f29a:	4638      	mov	r0, r7
 800f29c:	f00e fbe0 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f2a0:	e7b2      	b.n	800f208 <TREEVIEW_GetItem+0xe8>
 800f2a2:	4638      	mov	r0, r7
 800f2a4:	f00e fbdc 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f00e fbc7 	bl	801da3c <GUI_ALLOC_LockH>
 800f2ae:	7f03      	ldrb	r3, [r0, #28]
 800f2b0:	9004      	str	r0, [sp, #16]
 800f2b2:	429e      	cmp	r6, r3
 800f2b4:	bfb4      	ite	lt
 800f2b6:	4629      	movlt	r1, r5
 800f2b8:	4621      	movge	r1, r4
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	462c      	mov	r4, r5
 800f2be:	e7e8      	b.n	800f292 <TREEVIEW_GetItem+0x172>
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	e7ea      	b.n	800f29a <TREEVIEW_GetItem+0x17a>
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f00e fbcb 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f00e fbb6 	bl	801da3c <GUI_ALLOC_LockH>
 800f2d0:	9b03      	ldr	r3, [sp, #12]
 800f2d2:	9005      	str	r0, [sp, #20]
 800f2d4:	7f02      	ldrb	r2, [r0, #28]
 800f2d6:	7f1b      	ldrb	r3, [r3, #28]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d1a2      	bne.n	800f222 <TREEVIEW_GetItem+0x102>
 800f2dc:	e7a2      	b.n	800f224 <TREEVIEW_GetItem+0x104>
 800f2de:	2400      	movs	r4, #0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	f47f af48 	bne.w	800f176 <TREEVIEW_GetItem+0x56>
 800f2e6:	e749      	b.n	800f17c <TREEVIEW_GetItem+0x5c>

0800f2e8 <TREEVIEW_ITEM_Expand>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	b908      	cbnz	r0, 800f2f4 <TREEVIEW_ITEM_Expand+0xc>
 800f2f0:	b002      	add	sp, #8
 800f2f2:	bd10      	pop	{r4, pc}
 800f2f4:	f00c f822 	bl	801b33c <GUI_Lock>
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f00e fb9f 	bl	801da3c <GUI_ALLOC_LockH>
 800f2fe:	8b03      	ldrh	r3, [r0, #24]
 800f300:	9000      	str	r0, [sp, #0]
 800f302:	f003 0203 	and.w	r2, r3, #3
 800f306:	2a01      	cmp	r2, #1
 800f308:	6804      	ldr	r4, [r0, #0]
 800f30a:	d006      	beq.n	800f31a <TREEVIEW_ITEM_Expand+0x32>
 800f30c:	4668      	mov	r0, sp
 800f30e:	f00e fba7 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f312:	f00c f809 	bl	801b328 <GUI_Unlock>
 800f316:	b002      	add	sp, #8
 800f318:	bd10      	pop	{r4, pc}
 800f31a:	f043 0302 	orr.w	r3, r3, #2
 800f31e:	8303      	strh	r3, [r0, #24]
 800f320:	4668      	mov	r0, sp
 800f322:	f00e fb9d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f326:	2c00      	cmp	r4, #0
 800f328:	d0f3      	beq.n	800f312 <TREEVIEW_ITEM_Expand+0x2a>
 800f32a:	4620      	mov	r0, r4
 800f32c:	f00e fb86 	bl	801da3c <GUI_ALLOC_LockH>
 800f330:	4603      	mov	r3, r0
 800f332:	a802      	add	r0, sp, #8
 800f334:	2200      	movs	r2, #0
 800f336:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f33a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f33e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800f342:	f00e fb8d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f346:	4620      	mov	r0, r4
 800f348:	f007 f802 	bl	8016350 <WM_InvalidateWindow>
 800f34c:	e7e1      	b.n	800f312 <TREEVIEW_ITEM_Expand+0x2a>
 800f34e:	bf00      	nop

0800f350 <TREEVIEW_ITEM_Collapse>:
 800f350:	b510      	push	{r4, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	b082      	sub	sp, #8
 800f356:	b908      	cbnz	r0, 800f35c <TREEVIEW_ITEM_Collapse+0xc>
 800f358:	b002      	add	sp, #8
 800f35a:	bd10      	pop	{r4, pc}
 800f35c:	f00b ffee 	bl	801b33c <GUI_Lock>
 800f360:	4620      	mov	r0, r4
 800f362:	f00e fb6b 	bl	801da3c <GUI_ALLOC_LockH>
 800f366:	8b03      	ldrh	r3, [r0, #24]
 800f368:	9000      	str	r0, [sp, #0]
 800f36a:	f003 0203 	and.w	r2, r3, #3
 800f36e:	2a03      	cmp	r2, #3
 800f370:	6804      	ldr	r4, [r0, #0]
 800f372:	d006      	beq.n	800f382 <TREEVIEW_ITEM_Collapse+0x32>
 800f374:	4668      	mov	r0, sp
 800f376:	f00e fb73 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f37a:	f00b ffd5 	bl	801b328 <GUI_Unlock>
 800f37e:	b002      	add	sp, #8
 800f380:	bd10      	pop	{r4, pc}
 800f382:	f023 0302 	bic.w	r3, r3, #2
 800f386:	8303      	strh	r3, [r0, #24]
 800f388:	4668      	mov	r0, sp
 800f38a:	f00e fb69 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f38e:	2c00      	cmp	r4, #0
 800f390:	d0f3      	beq.n	800f37a <TREEVIEW_ITEM_Collapse+0x2a>
 800f392:	4620      	mov	r0, r4
 800f394:	f00e fb52 	bl	801da3c <GUI_ALLOC_LockH>
 800f398:	4603      	mov	r3, r0
 800f39a:	a802      	add	r0, sp, #8
 800f39c:	2200      	movs	r2, #0
 800f39e:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f3a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f3a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800f3aa:	f00e fb59 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f006 ffce 	bl	8016350 <WM_InvalidateWindow>
 800f3b4:	e7e1      	b.n	800f37a <TREEVIEW_ITEM_Collapse+0x2a>
 800f3b6:	bf00      	nop

0800f3b8 <TREEVIEW_Callback>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800f3c0:	b0c5      	sub	sp, #276	; 0x114
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4601      	mov	r1, r0
 800f3c6:	4658      	mov	r0, fp
 800f3c8:	f7fe fd0a 	bl	800dde0 <WIDGET_HandleActive>
 800f3cc:	b150      	cbz	r0, 800f3e4 <TREEVIEW_Callback+0x2c>
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	2b26      	cmp	r3, #38	; 0x26
 800f3d2:	d068      	beq.n	800f4a6 <TREEVIEW_Callback+0xee>
 800f3d4:	dc09      	bgt.n	800f3ea <TREEVIEW_Callback+0x32>
 800f3d6:	2b0e      	cmp	r3, #14
 800f3d8:	d025      	beq.n	800f426 <TREEVIEW_Callback+0x6e>
 800f3da:	2b0f      	cmp	r3, #15
 800f3dc:	f000 80a1 	beq.w	800f522 <TREEVIEW_Callback+0x16a>
 800f3e0:	2b0b      	cmp	r3, #11
 800f3e2:	d075      	beq.n	800f4d0 <TREEVIEW_Callback+0x118>
 800f3e4:	b045      	add	sp, #276	; 0x114
 800f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ea:	f240 1213 	movw	r2, #275	; 0x113
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d048      	beq.n	800f484 <TREEVIEW_Callback+0xcc>
 800f3f2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f3f6:	f000 810b 	beq.w	800f610 <TREEVIEW_Callback+0x258>
 800f3fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f3fc:	d1f2      	bne.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f3fe:	4658      	mov	r0, fp
 800f400:	f00e fb1c 	bl	801da3c <GUI_ALLOC_LockH>
 800f404:	ab44      	add	r3, sp, #272	; 0x110
 800f406:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 800f40a:	f843 0d70 	str.w	r0, [r3, #-112]!
 800f40e:	4618      	mov	r0, r3
 800f410:	f00e fb26 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f414:	2c00      	cmp	r4, #0
 800f416:	d1e5      	bne.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f418:	4658      	mov	r0, fp
 800f41a:	f7ff f88d 	bl	800e538 <_CalcParams>
 800f41e:	4658      	mov	r0, fp
 800f420:	f7ff f98a 	bl	800e738 <_ManageAutoScroll>
 800f424:	e7de      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f426:	4658      	mov	r0, fp
 800f428:	f00e fb08 	bl	801da3c <GUI_ALLOC_LockH>
 800f42c:	ab44      	add	r3, sp, #272	; 0x110
 800f42e:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 800f432:	f843 0dd0 	str.w	r0, [r3, #-208]!
 800f436:	4618      	mov	r0, r3
 800f438:	f00e fb12 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	d1d1      	bne.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f440:	68e3      	ldr	r3, [r4, #12]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	2a00      	cmp	r2, #0
 800f446:	d0cd      	beq.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f448:	4658      	mov	r0, fp
 800f44a:	681f      	ldr	r7, [r3, #0]
 800f44c:	f00e faf6 	bl	801da3c <GUI_ALLOC_LockH>
 800f450:	4603      	mov	r3, r0
 800f452:	a844      	add	r0, sp, #272	; 0x110
 800f454:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800f458:	f840 3dc8 	str.w	r3, [r0, #-200]!
 800f45c:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 800f460:	f00e fafe 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f464:	f1a7 0310 	sub.w	r3, r7, #16
 800f468:	2b08      	cmp	r3, #8
 800f46a:	f200 8176 	bhi.w	800f75a <TREEVIEW_Callback+0x3a2>
 800f46e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f472:	0152      	.short	0x0152
 800f474:	01110169 	.word	0x01110169
 800f478:	01740147 	.word	0x01740147
 800f47c:	01740174 	.word	0x01740174
 800f480:	0104013f 	.word	0x0104013f
 800f484:	4658      	mov	r0, fp
 800f486:	f00e fad9 	bl	801da3c <GUI_ALLOC_LockH>
 800f48a:	9010      	str	r0, [sp, #64]	; 0x40
 800f48c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800f490:	f003 fecc 	bl	801322c <WM_DeleteTimer>
 800f494:	a844      	add	r0, sp, #272	; 0x110
 800f496:	2200      	movs	r2, #0
 800f498:	f850 3dd0 	ldr.w	r3, [r0, #-208]!
 800f49c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800f4a0:	f00e fade 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f4a4:	e79e      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f4a6:	68e3      	ldr	r3, [r4, #12]
 800f4a8:	2b05      	cmp	r3, #5
 800f4aa:	f000 80c9 	beq.w	800f640 <TREEVIEW_Callback+0x288>
 800f4ae:	2b06      	cmp	r3, #6
 800f4b0:	d198      	bne.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f4b2:	4658      	mov	r0, fp
 800f4b4:	f00e fac2 	bl	801da3c <GUI_ALLOC_LockH>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	a844      	add	r0, sp, #272	; 0x110
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f840 3d70 	str.w	r3, [r0, #-112]!
 800f4c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f4c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800f4ca:	f00e fac9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f4ce:	e789      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f4d0:	4658      	mov	r0, fp
 800f4d2:	f00e fab3 	bl	801da3c <GUI_ALLOC_LockH>
 800f4d6:	ab44      	add	r3, sp, #272	; 0x110
 800f4d8:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
 800f4dc:	f843 0d94 	str.w	r0, [r3, #-148]!
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f00e fabd 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f4e6:	2c00      	cmp	r4, #0
 800f4e8:	f43f af7c 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f4ec:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800f4f0:	e00b      	b.n	800f50a <TREEVIEW_Callback+0x152>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	685d      	ldr	r5, [r3, #4]
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	f00e fab2 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f00e fbaf 	bl	801dc60 <GUI_ALLOC_Free>
 800f502:	2d00      	cmp	r5, #0
 800f504:	f43f af6e 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f508:	462c      	mov	r4, r5
 800f50a:	4620      	mov	r0, r4
 800f50c:	f00e fa96 	bl	801da3c <GUI_ALLOC_LockH>
 800f510:	6902      	ldr	r2, [r0, #16]
 800f512:	9028      	str	r0, [sp, #160]	; 0xa0
 800f514:	2a00      	cmp	r2, #0
 800f516:	d0ec      	beq.n	800f4f2 <TREEVIEW_Callback+0x13a>
 800f518:	4610      	mov	r0, r2
 800f51a:	f00e fba1 	bl	801dc60 <GUI_ALLOC_Free>
 800f51e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f520:	e7e8      	b.n	800f4f4 <TREEVIEW_Callback+0x13c>
 800f522:	4658      	mov	r0, fp
 800f524:	f00e fa8a 	bl	801da3c <GUI_ALLOC_LockH>
 800f528:	4603      	mov	r3, r0
 800f52a:	900a      	str	r0, [sp, #40]	; 0x28
 800f52c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800f52e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800f532:	f00d fa01 	bl	801c938 <GUI_SetFont>
 800f536:	68e3      	ldr	r3, [r4, #12]
 800f538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	6859      	ldr	r1, [r3, #4]
 800f53e:	ab14      	add	r3, sp, #80	; 0x50
 800f540:	c303      	stmia	r3!, {r0, r1}
 800f542:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f546:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f54a:	4249      	negs	r1, r1
 800f54c:	4252      	negs	r2, r2
 800f54e:	a814      	add	r0, sp, #80	; 0x50
 800f550:	f00d f8fa 	bl	801c748 <GUI_MoveRect>
 800f554:	a910      	add	r1, sp, #64	; 0x40
 800f556:	4658      	mov	r0, fp
 800f558:	f004 fd42 	bl	8013fe0 <WM_GetInsideRectExScrollbar>
 800f55c:	a814      	add	r0, sp, #80	; 0x50
 800f55e:	a910      	add	r1, sp, #64	; 0x40
 800f560:	f00a ff0c 	bl	801a37c <GUI__IntersectRect>
 800f564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f566:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800f56a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800f56e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800f570:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800f574:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 800f578:	951b      	str	r5, [sp, #108]	; 0x6c
 800f57a:	1a89      	subs	r1, r1, r2
 800f57c:	3101      	adds	r1, #1
 800f57e:	1b12      	subs	r2, r2, r4
 800f580:	4281      	cmp	r1, r0
 800f582:	bfac      	ite	ge
 800f584:	1851      	addge	r1, r2, r1
 800f586:	1811      	addlt	r1, r2, r0
 800f588:	921a      	str	r2, [sp, #104]	; 0x68
 800f58a:	911c      	str	r1, [sp, #112]	; 0x70
 800f58c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800f58e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800f592:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f596:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800f59a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800f59e:	900c      	str	r0, [sp, #48]	; 0x30
 800f5a0:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800f5a4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 800f5a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800f5ac:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 800f5b0:	2f00      	cmp	r7, #0
 800f5b2:	f000 80d6 	beq.w	800f762 <TREEVIEW_Callback+0x3aa>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	f000 84df 	beq.w	800ff7a <TREEVIEW_Callback+0xbc2>
 800f5bc:	3f01      	subs	r7, #1
 800f5be:	2500      	movs	r5, #0
 800f5c0:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800f5c4:	e00b      	b.n	800f5de <TREEVIEW_Callback+0x226>
 800f5c6:	4648      	mov	r0, r9
 800f5c8:	f00e fa4a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f5cc:	42bd      	cmp	r5, r7
 800f5ce:	940c      	str	r4, [sp, #48]	; 0x30
 800f5d0:	f000 80c8 	beq.w	800f764 <TREEVIEW_Callback+0x3ac>
 800f5d4:	3501      	adds	r5, #1
 800f5d6:	2c00      	cmp	r4, #0
 800f5d8:	f000 8352 	beq.w	800fc80 <TREEVIEW_Callback+0x8c8>
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f00e fa2d 	bl	801da3c <GUI_ALLOC_LockH>
 800f5e2:	8b03      	ldrh	r3, [r0, #24]
 800f5e4:	901f      	str	r0, [sp, #124]	; 0x7c
 800f5e6:	07d9      	lsls	r1, r3, #31
 800f5e8:	d510      	bpl.n	800f60c <TREEVIEW_Callback+0x254>
 800f5ea:	079a      	lsls	r2, r3, #30
 800f5ec:	d40e      	bmi.n	800f60c <TREEVIEW_Callback+0x254>
 800f5ee:	7f06      	ldrb	r6, [r0, #28]
 800f5f0:	6844      	ldr	r4, [r0, #4]
 800f5f2:	2c00      	cmp	r4, #0
 800f5f4:	d0e7      	beq.n	800f5c6 <TREEVIEW_Callback+0x20e>
 800f5f6:	4648      	mov	r0, r9
 800f5f8:	f00e fa32 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f00e fa1d 	bl	801da3c <GUI_ALLOC_LockH>
 800f602:	901f      	str	r0, [sp, #124]	; 0x7c
 800f604:	7f03      	ldrb	r3, [r0, #28]
 800f606:	429e      	cmp	r6, r3
 800f608:	dbf2      	blt.n	800f5f0 <TREEVIEW_Callback+0x238>
 800f60a:	e7dc      	b.n	800f5c6 <TREEVIEW_Callback+0x20e>
 800f60c:	6844      	ldr	r4, [r0, #4]
 800f60e:	e7da      	b.n	800f5c6 <TREEVIEW_Callback+0x20e>
 800f610:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800f614:	f1b8 0f00 	cmp.w	r8, #0
 800f618:	f000 8493 	beq.w	800ff42 <TREEVIEW_Callback+0xb8a>
 800f61c:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f620:	4658      	mov	r0, fp
 800f622:	b14b      	cbz	r3, 800f638 <TREEVIEW_Callback+0x280>
 800f624:	f004 ff50 	bl	80144c8 <WM_HasCaptured>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f000 839c 	beq.w	800fd66 <TREEVIEW_Callback+0x9ae>
 800f62e:	4658      	mov	r0, fp
 800f630:	2101      	movs	r1, #1
 800f632:	f004 ff91 	bl	8014558 <WM_NotifyParent>
 800f636:	e6d5      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f638:	2102      	movs	r1, #2
 800f63a:	f004 ff8d 	bl	8014558 <WM_NotifyParent>
 800f63e:	e6d1      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f640:	4658      	mov	r0, fp
 800f642:	f00e f9fb 	bl	801da3c <GUI_ALLOC_LockH>
 800f646:	9010      	str	r0, [sp, #64]	; 0x40
 800f648:	4658      	mov	r0, fp
 800f64a:	68a5      	ldr	r5, [r4, #8]
 800f64c:	f004 fe48 	bl	80142e0 <WM_GetScrollbarV>
 800f650:	4285      	cmp	r5, r0
 800f652:	f000 8426 	beq.w	800fea2 <TREEVIEW_Callback+0xaea>
 800f656:	4658      	mov	r0, fp
 800f658:	68a5      	ldr	r5, [r4, #8]
 800f65a:	f004 fdf9 	bl	8014250 <WM_GetScrollbarH>
 800f65e:	4285      	cmp	r5, r0
 800f660:	f000 848e 	beq.w	800ff80 <TREEVIEW_Callback+0xbc8>
 800f664:	a810      	add	r0, sp, #64	; 0x40
 800f666:	f00e f9fb 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f66a:	4658      	mov	r0, fp
 800f66c:	f006 fe70 	bl	8016350 <WM_InvalidateWindow>
 800f670:	4658      	mov	r0, fp
 800f672:	210a      	movs	r1, #10
 800f674:	f004 ff70 	bl	8014558 <WM_NotifyParent>
 800f678:	e6b4      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f67a:	b90d      	cbnz	r5, 800f680 <TREEVIEW_Callback+0x2c8>
 800f67c:	e6b2      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f67e:	4605      	mov	r5, r0
 800f680:	4628      	mov	r0, r5
 800f682:	f7fe fd39 	bl	800e0f8 <_GetNextVisibleItem>
 800f686:	4285      	cmp	r5, r0
 800f688:	d1f9      	bne.n	800f67e <TREEVIEW_Callback+0x2c6>
 800f68a:	4658      	mov	r0, fp
 800f68c:	4629      	mov	r1, r5
 800f68e:	f7ff fa93 	bl	800ebb8 <_SetSel>
 800f692:	e6a7      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f694:	2d00      	cmp	r5, #0
 800f696:	f43f aea5 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f69a:	4628      	mov	r0, r5
 800f69c:	f00e f9ce 	bl	801da3c <GUI_ALLOC_LockH>
 800f6a0:	ab44      	add	r3, sp, #272	; 0x110
 800f6a2:	8b04      	ldrh	r4, [r0, #24]
 800f6a4:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f00e f9d9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f6ae:	07e6      	lsls	r6, r4, #31
 800f6b0:	f57f ae98 	bpl.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f6b4:	07a0      	lsls	r0, r4, #30
 800f6b6:	f140 849d 	bpl.w	800fff4 <TREEVIEW_Callback+0xc3c>
 800f6ba:	4658      	mov	r0, fp
 800f6bc:	f00e f9be 	bl	801da3c <GUI_ALLOC_LockH>
 800f6c0:	901f      	str	r0, [sp, #124]	; 0x7c
 800f6c2:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800f6c6:	f00e f9b9 	bl	801da3c <GUI_ALLOC_LockH>
 800f6ca:	6843      	ldr	r3, [r0, #4]
 800f6cc:	9028      	str	r0, [sp, #160]	; 0xa0
 800f6ce:	b12b      	cbz	r3, 800f6dc <TREEVIEW_Callback+0x324>
 800f6d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f6d2:	4658      	mov	r0, fp
 800f6d4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800f6d8:	f006 fe3a 	bl	8016350 <WM_InvalidateWindow>
 800f6dc:	a81f      	add	r0, sp, #124	; 0x7c
 800f6de:	f00e f9bf 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f6e2:	a828      	add	r0, sp, #160	; 0xa0
 800f6e4:	f00e f9bc 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f6e8:	4658      	mov	r0, fp
 800f6ea:	f7ff f9ef 	bl	800eacc <_UpdateScrollPos>
 800f6ee:	e679      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f6f0:	2e00      	cmp	r6, #0
 800f6f2:	f43f ae77 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f6f6:	4658      	mov	r0, fp
 800f6f8:	4631      	mov	r1, r6
 800f6fa:	f7ff fa5d 	bl	800ebb8 <_SetSel>
 800f6fe:	e671      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f700:	2d00      	cmp	r5, #0
 800f702:	f43f ae6f 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f706:	4628      	mov	r0, r5
 800f708:	f7fe fcf6 	bl	800e0f8 <_GetNextVisibleItem>
 800f70c:	4601      	mov	r1, r0
 800f70e:	4658      	mov	r0, fp
 800f710:	f7ff fa52 	bl	800ebb8 <_SetSel>
 800f714:	e666      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f716:	2d00      	cmp	r5, #0
 800f718:	f43f ae64 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f71c:	4628      	mov	r0, r5
 800f71e:	f00e f98d 	bl	801da3c <GUI_ALLOC_LockH>
 800f722:	ab44      	add	r3, sp, #272	; 0x110
 800f724:	8b04      	ldrh	r4, [r0, #24]
 800f726:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800f72a:	4618      	mov	r0, r3
 800f72c:	f00e f998 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f730:	07e1      	lsls	r1, r4, #31
 800f732:	f140 84c3 	bpl.w	80100bc <TREEVIEW_Callback+0xd04>
 800f736:	07a2      	lsls	r2, r4, #30
 800f738:	4628      	mov	r0, r5
 800f73a:	f140 8460 	bpl.w	800fffe <TREEVIEW_Callback+0xc46>
 800f73e:	f7ff fe07 	bl	800f350 <TREEVIEW_ITEM_Collapse>
 800f742:	e64f      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f744:	2d00      	cmp	r5, #0
 800f746:	f43f ae4d 	beq.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800f74a:	4628      	mov	r0, r5
 800f74c:	f7fe fd18 	bl	800e180 <_GetPrevVisibleItem>
 800f750:	4601      	mov	r1, r0
 800f752:	4658      	mov	r0, fp
 800f754:	f7ff fa30 	bl	800ebb8 <_SetSel>
 800f758:	e644      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f007 fb5e 	bl	8016e1c <WM_DefaultProc>
 800f760:	e640      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f762:	4604      	mov	r4, r0
 800f764:	2c00      	cmp	r4, #0
 800f766:	f000 8440 	beq.w	800ffea <TREEVIEW_Callback+0xc32>
 800f76a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800f76e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800f772:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800f776:	b21b      	sxth	r3, r3
 800f778:	429a      	cmp	r2, r3
 800f77a:	f2c0 83f9 	blt.w	800ff70 <TREEVIEW_Callback+0xbb8>
 800f77e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800f782:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800f786:	f8cd c00c 	str.w	ip, [sp, #12]
 800f78a:	465e      	mov	r6, fp
 800f78c:	4645      	mov	r5, r8
 800f78e:	f8cd a014 	str.w	sl, [sp, #20]
 800f792:	9803      	ldr	r0, [sp, #12]
 800f794:	f00e f964 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f79a:	930d      	str	r3, [sp, #52]	; 0x34
 800f79c:	2d00      	cmp	r5, #0
 800f79e:	d067      	beq.n	800f870 <TREEVIEW_Callback+0x4b8>
 800f7a0:	221b      	movs	r2, #27
 800f7a2:	ab0d      	add	r3, sp, #52	; 0x34
 800f7a4:	961f      	str	r6, [sp, #124]	; 0x7c
 800f7a6:	9220      	str	r2, [sp, #128]	; 0x80
 800f7a8:	9327      	str	r3, [sp, #156]	; 0x9c
 800f7aa:	4648      	mov	r0, r9
 800f7ac:	47a8      	blx	r5
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	b287      	uxth	r7, r0
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f00e f942 	bl	801da3c <GUI_ALLOC_LockH>
 800f7b8:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800f7bc:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800f7c0:	900a      	str	r0, [sp, #40]	; 0x28
 800f7c2:	1e4b      	subs	r3, r1, #1
 800f7c4:	443b      	add	r3, r7
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	b219      	sxth	r1, r3
 800f7ca:	428a      	cmp	r2, r1
 800f7cc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800f7d0:	dd51      	ble.n	800f876 <TREEVIEW_Callback+0x4be>
 800f7d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7d4:	4423      	add	r3, r4
 800f7d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f7d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800f7da:	f00e f92f 	bl	801da3c <GUI_ALLOC_LockH>
 800f7de:	8b03      	ldrh	r3, [r0, #24]
 800f7e0:	901f      	str	r0, [sp, #124]	; 0x7c
 800f7e2:	07da      	lsls	r2, r3, #31
 800f7e4:	d53c      	bpl.n	800f860 <TREEVIEW_Callback+0x4a8>
 800f7e6:	079f      	lsls	r7, r3, #30
 800f7e8:	d43a      	bmi.n	800f860 <TREEVIEW_Callback+0x4a8>
 800f7ea:	7f07      	ldrb	r7, [r0, #28]
 800f7ec:	6844      	ldr	r4, [r0, #4]
 800f7ee:	4648      	mov	r0, r9
 800f7f0:	b9fc      	cbnz	r4, 800f832 <TREEVIEW_Callback+0x47a>
 800f7f2:	f00e f935 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f7f6:	940c      	str	r4, [sp, #48]	; 0x30
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	f004 ffd9 	bl	80147b0 <WM_SetUserClipRect>
 800f7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f800:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f802:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800f806:	4290      	cmp	r0, r2
 800f808:	f000 8249 	beq.w	800fc9e <TREEVIEW_Callback+0x8e6>
 800f80c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f80e:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800f812:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800f816:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 800f81a:	f00a fcff 	bl	801a21c <LCD_SetBkColor>
 800f81e:	a812      	add	r0, sp, #72	; 0x48
 800f820:	f00c fc8a 	bl	801c138 <GUI_ClearRectEx>
 800f824:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f826:	f7fe fc09 	bl	800e03c <WIDGET__EFFECT_DrawDown>
 800f82a:	9803      	ldr	r0, [sp, #12]
 800f82c:	f00e f918 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f830:	e5d8      	b.n	800f3e4 <TREEVIEW_Callback+0x2c>
 800f832:	f00e f915 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f836:	4620      	mov	r0, r4
 800f838:	f00e f900 	bl	801da3c <GUI_ALLOC_LockH>
 800f83c:	901f      	str	r0, [sp, #124]	; 0x7c
 800f83e:	7f03      	ldrb	r3, [r0, #28]
 800f840:	429f      	cmp	r7, r3
 800f842:	dbd3      	blt.n	800f7ec <TREEVIEW_Callback+0x434>
 800f844:	4648      	mov	r0, r9
 800f846:	f00e f90b 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f84a:	940c      	str	r4, [sp, #48]	; 0x30
 800f84c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800f850:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800f854:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800f858:	b21b      	sxth	r3, r3
 800f85a:	429a      	cmp	r2, r3
 800f85c:	da99      	bge.n	800f792 <TREEVIEW_Callback+0x3da>
 800f85e:	e7cb      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800f860:	6844      	ldr	r4, [r0, #4]
 800f862:	4648      	mov	r0, r9
 800f864:	f00e f8fc 	bl	801da60 <GUI_ALLOC_UnlockH>
 800f868:	940c      	str	r4, [sp, #48]	; 0x30
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	d1ee      	bne.n	800f84c <TREEVIEW_Callback+0x494>
 800f86e:	e7c3      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800f870:	462f      	mov	r7, r5
 800f872:	462c      	mov	r4, r5
 800f874:	e79d      	b.n	800f7b2 <TREEVIEW_Callback+0x3fa>
 800f876:	a812      	add	r0, sp, #72	; 0x48
 800f878:	f004 ff9a 	bl	80147b0 <WM_SetUserClipRect>
 800f87c:	a90c      	add	r1, sp, #48	; 0x30
 800f87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f882:	911e      	str	r1, [sp, #120]	; 0x78
 800f884:	4423      	add	r3, r4
 800f886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f888:	1e59      	subs	r1, r3, #1
 800f88a:	911d      	str	r1, [sp, #116]	; 0x74
 800f88c:	2a00      	cmp	r2, #0
 800f88e:	d0a2      	beq.n	800f7d6 <TREEVIEW_Callback+0x41e>
 800f890:	f8df e8b0 	ldr.w	lr, [pc, #2224]	; 8010144 <TREEVIEW_Callback+0xd8c>
 800f894:	9805      	ldr	r0, [sp, #20]
 800f896:	f8de 3000 	ldr.w	r3, [lr]
 800f89a:	2100      	movs	r1, #0
 800f89c:	2270      	movs	r2, #112	; 0x70
 800f89e:	4798      	blx	r3
 800f8a0:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f00e f8ca 	bl	801da3c <GUI_ALLOC_LockH>
 800f8a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f8aa:	900e      	str	r0, [sp, #56]	; 0x38
 800f8ac:	f8d3 8000 	ldr.w	r8, [r3]
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	f00e f8c3 	bl	801da3c <GUI_ALLOC_LockH>
 800f8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f8ba:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800f8be:	079b      	lsls	r3, r3, #30
 800f8c0:	f100 80fe 	bmi.w	800fac0 <TREEVIEW_Callback+0x708>
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f003 fb5b 	bl	8012f80 <WM__IsEnabled>
 800f8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	f040 80ee 	bne.w	800faae <TREEVIEW_Callback+0x6f6>
 800f8d2:	f04f 0c02 	mov.w	ip, #2
 800f8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8d8:	932f      	str	r3, [sp, #188]	; 0xbc
 800f8da:	f8cd c008 	str.w	ip, [sp, #8]
 800f8de:	f00c fed9 	bl	801c694 <GUI_GetFontSizeY>
 800f8e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8e6:	f891 e01c 	ldrb.w	lr, [r1, #28]
 800f8ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f8ee:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 800f8f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8f6:	fb0e 2202 	mla	r2, lr, r2, r2
 800f8fa:	449b      	add	fp, r3
 800f8fc:	4493      	add	fp, r2
 800f8fe:	4682      	mov	sl, r0
 800f900:	fa1f fb8b 	uxth.w	fp, fp
 800f904:	f101 001d 	add.w	r0, r1, #29
 800f908:	f8ad b0b0 	strh.w	fp, [sp, #176]	; 0xb0
 800f90c:	f00c fa3a 	bl	801bd84 <GUI_GetStringDistX>
 800f910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f912:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f914:	f8dd c008 	ldr.w	ip, [sp, #8]
 800f918:	1aca      	subs	r2, r1, r3
 800f91a:	3201      	adds	r2, #1
 800f91c:	ebca 0202 	rsb	r2, sl, r2
 800f920:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f924:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f926:	eb03 0262 	add.w	r2, r3, r2, asr #1
 800f92a:	b292      	uxth	r2, r2
 800f92c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f930:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f934:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 800f938:	4458      	add	r0, fp
 800f93a:	4492      	add	sl, r2
 800f93c:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 800f940:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 800f944:	f8ad a0b6 	strh.w	sl, [sp, #182]	; 0xb6
 800f948:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800f94a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f94c:	9129      	str	r1, [sp, #164]	; 0xa4
 800f94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f950:	932a      	str	r3, [sp, #168]	; 0xa8
 800f952:	321d      	adds	r2, #29
 800f954:	4638      	mov	r0, r7
 800f956:	9230      	str	r2, [sp, #192]	; 0xc0
 800f958:	f003 fb12 	bl	8012f80 <WM__IsEnabled>
 800f95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f95e:	2800      	cmp	r0, #0
 800f960:	f040 8096 	bne.w	800fa90 <TREEVIEW_Callback+0x6d8>
 800f964:	2102      	movs	r1, #2
 800f966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f968:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f96c:	f8b2 a018 	ldrh.w	sl, [r2, #24]
 800f970:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f972:	9128      	str	r1, [sp, #160]	; 0xa0
 800f974:	f01a 0a01 	ands.w	sl, sl, #1
 800f978:	d004      	beq.n	800f984 <TREEVIEW_Callback+0x5cc>
 800f97a:	6850      	ldr	r0, [r2, #4]
 800f97c:	2800      	cmp	r0, #0
 800f97e:	f040 8190 	bne.w	800fca2 <TREEVIEW_Callback+0x8ea>
 800f982:	4682      	mov	sl, r0
 800f984:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800f988:	07d2      	lsls	r2, r2, #31
 800f98a:	f140 80a6 	bpl.w	800fada <TREEVIEW_Callback+0x722>
 800f98e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f990:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f994:	f891 801c 	ldrb.w	r8, [r1, #28]
 800f998:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f99a:	fb08 0002 	mla	r0, r8, r2, r0
 800f99e:	f100 38ff 	add.w	r8, r0, #4294967295
 800f9a2:	6908      	ldr	r0, [r1, #16]
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f040 816e 	bne.w	800fc86 <TREEVIEW_Callback+0x8ce>
 800f9aa:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800f9ae:	8b09      	ldrh	r1, [r1, #24]
 800f9b0:	07c8      	lsls	r0, r1, #31
 800f9b2:	d561      	bpl.n	800fa78 <TREEVIEW_Callback+0x6c0>
 800f9b4:	f001 0102 	and.w	r1, r1, #2
 800f9b8:	b289      	uxth	r1, r1
 800f9ba:	2900      	cmp	r1, #0
 800f9bc:	f000 8157 	beq.w	800fc6e <TREEVIEW_Callback+0x8b6>
 800f9c0:	f1ba 0f00 	cmp.w	sl, #0
 800f9c4:	f000 814b 	beq.w	800fc5e <TREEVIEW_Callback+0x8a6>
 800f9c8:	f04f 0b04 	mov.w	fp, #4
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	f8cd b010 	str.w	fp, [sp, #16]
 800f9d2:	468c      	mov	ip, r1
 800f9d4:	46de      	mov	lr, fp
 800f9d6:	46da      	mov	sl, fp
 800f9d8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800f9dc:	eb02 7bd2 	add.w	fp, r2, r2, lsr #31
 800f9e0:	fa1f f888 	uxth.w	r8, r8
 800f9e4:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 800f9e8:	9040      	str	r0, [sp, #256]	; 0x100
 800f9ea:	eb08 0a6b 	add.w	sl, r8, fp, asr #1
 800f9ee:	f8dd b010 	ldr.w	fp, [sp, #16]
 800f9f2:	f88d e10c 	strb.w	lr, [sp, #268]	; 0x10c
 800f9f6:	f8ad a108 	strh.w	sl, [sp, #264]	; 0x108
 800f9fa:	f857 000b 	ldr.w	r0, [r7, fp]
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f000 81ad 	beq.w	800fd5e <TREEVIEW_Callback+0x9a6>
 800fa04:	4490      	add	r8, r2
 800fa06:	f8ad 810a 	strh.w	r8, [sp, #266]	; 0x10a
 800fa0a:	9041      	str	r0, [sp, #260]	; 0x104
 800fa0c:	f88d 110d 	strb.w	r1, [sp, #269]	; 0x10d
 800fa10:	a80e      	add	r0, sp, #56	; 0x38
 800fa12:	f00e f825 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fa16:	a80f      	add	r0, sp, #60	; 0x3c
 800fa18:	f00e f822 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fa1c:	9b05      	ldr	r3, [sp, #20]
 800fa1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa20:	931e      	str	r3, [sp, #120]	; 0x78
 800fa22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fa26:	932e      	str	r3, [sp, #184]	; 0xb8
 800fa28:	af16      	add	r7, sp, #88	; 0x58
 800fa2a:	2305      	movs	r3, #5
 800fa2c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa2e:	4638      	mov	r0, r7
 800fa30:	4790      	blx	r2
 800fa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa34:	2212      	movs	r2, #18
 800fa36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa38:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	4798      	blx	r3
 800fa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa40:	2214      	movs	r2, #20
 800fa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa44:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa46:	4638      	mov	r0, r7
 800fa48:	4798      	blx	r3
 800fa4a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fa4c:	2206      	movs	r2, #6
 800fa4e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa50:	b133      	cbz	r3, 800fa60 <TREEVIEW_Callback+0x6a8>
 800fa52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa54:	f89d 210c 	ldrb.w	r2, [sp, #268]	; 0x10c
 800fa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa5a:	9218      	str	r2, [sp, #96]	; 0x60
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	4798      	blx	r3
 800fa60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f43f aeb5 	beq.w	800f7d2 <TREEVIEW_Callback+0x41a>
 800fa68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa6a:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 800fa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa70:	9218      	str	r2, [sp, #96]	; 0x60
 800fa72:	4638      	mov	r0, r7
 800fa74:	4798      	blx	r3
 800fa76:	e6ac      	b.n	800f7d2 <TREEVIEW_Callback+0x41a>
 800fa78:	68b9      	ldr	r1, [r7, #8]
 800fa7a:	2900      	cmp	r1, #0
 800fa7c:	f000 81ce 	beq.w	800fe1c <TREEVIEW_Callback+0xa64>
 800fa80:	4442      	add	r2, r8
 800fa82:	2302      	movs	r3, #2
 800fa84:	f8ad 210a 	strh.w	r2, [sp, #266]	; 0x10a
 800fa88:	9141      	str	r1, [sp, #260]	; 0x104
 800fa8a:	f88d 310d 	strb.w	r3, [sp, #269]	; 0x10d
 800fa8e:	e7bf      	b.n	800fa10 <TREEVIEW_Callback+0x658>
 800fa90:	f8b3 109c 	ldrh.w	r1, [r3, #156]	; 0x9c
 800fa94:	f001 0102 	and.w	r1, r1, #2
 800fa98:	b289      	uxth	r1, r1
 800fa9a:	2900      	cmp	r1, #0
 800fa9c:	f43f af63 	beq.w	800f966 <TREEVIEW_Callback+0x5ae>
 800faa0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800faa4:	ebb8 0001 	subs.w	r0, r8, r1
 800faa8:	4241      	negs	r1, r0
 800faaa:	4141      	adcs	r1, r0
 800faac:	e75b      	b.n	800f966 <TREEVIEW_Callback+0x5ae>
 800faae:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800fab2:	ebb8 0e01 	subs.w	lr, r8, r1
 800fab6:	f1de 0c00 	rsbs	ip, lr, #0
 800faba:	eb5c 0c0e 	adcs.w	ip, ip, lr
 800fabe:	e70a      	b.n	800f8d6 <TREEVIEW_Callback+0x51e>
 800fac0:	4638      	mov	r0, r7
 800fac2:	f003 fa5d 	bl	8012f80 <WM__IsEnabled>
 800fac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fac8:	2800      	cmp	r0, #0
 800faca:	f040 80fc 	bne.w	800fcc6 <TREEVIEW_Callback+0x90e>
 800face:	2302      	movs	r3, #2
 800fad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad6:	9328      	str	r3, [sp, #160]	; 0xa0
 800fad8:	e6f4      	b.n	800f8c4 <TREEVIEW_Callback+0x50c>
 800fada:	4638      	mov	r0, r7
 800fadc:	f003 fa50 	bl	8012f80 <WM__IsEnabled>
 800fae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fae2:	2800      	cmp	r0, #0
 800fae4:	f040 812a 	bne.w	800fd3c <TREEVIEW_Callback+0x984>
 800fae8:	2202      	movs	r2, #2
 800faea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800faee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800faf0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800faf2:	922b      	str	r2, [sp, #172]	; 0xac
 800faf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800faf6:	9206      	str	r2, [sp, #24]
 800faf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fafa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fafc:	f8dd e018 	ldr.w	lr, [sp, #24]
 800fb00:	9204      	str	r2, [sp, #16]
 800fb02:	44be      	add	lr, r7
 800fb04:	9709      	str	r7, [sp, #36]	; 0x24
 800fb06:	7f08      	ldrb	r0, [r1, #28]
 800fb08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800fb0c:	9f04      	ldr	r7, [sp, #16]
 800fb0e:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 800fb12:	fb02 7b00 	mla	fp, r2, r0, r7
 800fb16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb1a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	f000 80e2 	beq.w	800fce8 <TREEVIEW_Callback+0x930>
 800fb24:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800fb28:	ea4f 78d2 	mov.w	r8, r2, lsr #31
 800fb2c:	af44      	add	r7, sp, #272	; 0x110
 800fb2e:	f8cd 8020 	str.w	r8, [sp, #32]
 800fb32:	4490      	add	r8, r2
 800fb34:	eb07 0c40 	add.w	ip, r7, r0, lsl #1
 800fb38:	ebab 0868 	sub.w	r8, fp, r8, asr #1
 800fb3c:	fa1f f888 	uxth.w	r8, r8
 800fb40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fb42:	f82c 8c3e 	strh.w	r8, [ip, #-62]
 800fb46:	f82c 8c4a 	strh.w	r8, [ip, #-74]
 800fb4a:	f82c 7c44 	strh.w	r7, [ip, #-68]
 800fb4e:	8b0f      	ldrh	r7, [r1, #24]
 800fb50:	f8cd c01c 	str.w	ip, [sp, #28]
 800fb54:	077f      	lsls	r7, r7, #29
 800fb56:	bf58      	it	pl
 800fb58:	f8dd c018 	ldrpl.w	ip, [sp, #24]
 800fb5c:	fa1f fe8e 	uxth.w	lr, lr
 800fb60:	f8cd e01c 	str.w	lr, [sp, #28]
 800fb64:	bf58      	it	pl
 800fb66:	fa1f fe8c 	uxthpl.w	lr, ip
 800fb6a:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 800fb6e:	1c47      	adds	r7, r0, #1
 800fb70:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800fb74:	b2ff      	uxtb	r7, r7
 800fb76:	f82c ec38 	strh.w	lr, [ip, #-56]
 800fb7a:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 800fb7e:	f8b1 e018 	ldrh.w	lr, [r1, #24]
 800fb82:	f01e 0f01 	tst.w	lr, #1
 800fb86:	f000 813f 	beq.w	800fe08 <TREEVIEW_Callback+0xa50>
 800fb8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800fb8e:	4494      	add	ip, r2
 800fb90:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800fb94:	44e3      	add	fp, ip
 800fb96:	f1ba 0f00 	cmp.w	sl, #0
 800fb9a:	f000 81ce 	beq.w	800ff3a <TREEVIEW_Callback+0xb82>
 800fb9e:	f01e 0f02 	tst.w	lr, #2
 800fba2:	f000 8138 	beq.w	800fe16 <TREEVIEW_Callback+0xa5e>
 800fba6:	3002      	adds	r0, #2
 800fba8:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800fbac:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800fbb0:	9009      	str	r0, [sp, #36]	; 0x24
 800fbb2:	f8cd e004 	str.w	lr, [sp, #4]
 800fbb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbb8:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800fbbc:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800fbc0:	b2c7      	uxtb	r7, r0
 800fbc2:	9807      	ldr	r0, [sp, #28]
 800fbc4:	f82e 0c44 	strh.w	r0, [lr, #-68]
 800fbc8:	fa1f fb8b 	uxth.w	fp, fp
 800fbcc:	9801      	ldr	r0, [sp, #4]
 800fbce:	f82e bc3e 	strh.w	fp, [lr, #-62]
 800fbd2:	f82e bc4a 	strh.w	fp, [lr, #-74]
 800fbd6:	f8cd e020 	str.w	lr, [sp, #32]
 800fbda:	f8dd e018 	ldr.w	lr, [sp, #24]
 800fbde:	f820 ec38 	strh.w	lr, [r0, #-56]
 800fbe2:	a844      	add	r0, sp, #272	; 0x110
 800fbe4:	eb00 0e47 	add.w	lr, r0, r7, lsl #1
 800fbe8:	9807      	ldr	r0, [sp, #28]
 800fbea:	f82e 0c38 	strh.w	r0, [lr, #-56]
 800fbee:	f8cd e018 	str.w	lr, [sp, #24]
 800fbf2:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800fbf6:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800fbfa:	f8cd e020 	str.w	lr, [sp, #32]
 800fbfe:	f82e 0c44 	strh.w	r0, [lr, #-68]
 800fc02:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800fc06:	eb0e 0047 	add.w	r0, lr, r7, lsl #1
 800fc0a:	3701      	adds	r7, #1
 800fc0c:	f820 8c4a 	strh.w	r8, [r0, #-74]
 800fc10:	f820 bc3e 	strh.w	fp, [r0, #-62]
 800fc14:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 800fc18:	9f04      	ldr	r7, [sp, #16]
 800fc1a:	8b48      	ldrh	r0, [r1, #26]
 800fc1c:	4467      	add	r7, ip
 800fc1e:	3f01      	subs	r7, #1
 800fc20:	2800      	cmp	r0, #0
 800fc22:	f000 8083 	beq.w	800fd2c <TREEVIEW_Callback+0x974>
 800fc26:	f89d e0de 	ldrb.w	lr, [sp, #222]	; 0xde
 800fc2a:	f010 0f01 	tst.w	r0, #1
 800fc2e:	d009      	beq.n	800fc44 <TREEVIEW_Callback+0x88c>
 800fc30:	f50d 7888 	add.w	r8, sp, #272	; 0x110
 800fc34:	eb08 0c4e 	add.w	ip, r8, lr, lsl #1
 800fc38:	f10e 0e01 	add.w	lr, lr, #1
 800fc3c:	f82c 7c30 	strh.w	r7, [ip, #-48]
 800fc40:	fa5f fe8e 	uxtb.w	lr, lr
 800fc44:	0840      	lsrs	r0, r0, #1
 800fc46:	4417      	add	r7, r2
 800fc48:	d1ef      	bne.n	800fc2a <TREEVIEW_Callback+0x872>
 800fc4a:	f88d e0de 	strb.w	lr, [sp, #222]	; 0xde
 800fc4e:	f891 801c 	ldrb.w	r8, [r1, #28]
 800fc52:	9804      	ldr	r0, [sp, #16]
 800fc54:	fb08 0802 	mla	r8, r8, r2, r0
 800fc58:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc5c:	e6a1      	b.n	800f9a2 <TREEVIEW_Callback+0x5ea>
 800fc5e:	4651      	mov	r1, sl
 800fc60:	fa1f f888 	uxth.w	r8, r8
 800fc64:	f8cd a010 	str.w	sl, [sp, #16]
 800fc68:	46d4      	mov	ip, sl
 800fc6a:	46d3      	mov	fp, sl
 800fc6c:	e6c5      	b.n	800f9fa <TREEVIEW_Callback+0x642>
 800fc6e:	f1ba 0f00 	cmp.w	sl, #0
 800fc72:	d0f4      	beq.n	800fc5e <TREEVIEW_Callback+0x8a6>
 800fc74:	f04f 0e03 	mov.w	lr, #3
 800fc78:	9104      	str	r1, [sp, #16]
 800fc7a:	468c      	mov	ip, r1
 800fc7c:	46f2      	mov	sl, lr
 800fc7e:	e6ab      	b.n	800f9d8 <TREEVIEW_Callback+0x620>
 800fc80:	af0a      	add	r7, sp, #40	; 0x28
 800fc82:	9703      	str	r7, [sp, #12]
 800fc84:	e5b8      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800fc86:	f00d fed9 	bl	801da3c <GUI_ALLOC_LockH>
 800fc8a:	4607      	mov	r7, r0
 800fc8c:	4648      	mov	r0, r9
 800fc8e:	971f      	str	r7, [sp, #124]	; 0x7c
 800fc90:	f00d fee6 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fc94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fc98:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800fc9c:	e687      	b.n	800f9ae <TREEVIEW_Callback+0x5f6>
 800fc9e:	4618      	mov	r0, r3
 800fca0:	e5c1      	b.n	800f826 <TREEVIEW_Callback+0x46e>
 800fca2:	f00d fecb 	bl	801da3c <GUI_ALLOC_LockH>
 800fca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fca8:	901f      	str	r0, [sp, #124]	; 0x7c
 800fcaa:	f890 a01c 	ldrb.w	sl, [r0, #28]
 800fcae:	7f1b      	ldrb	r3, [r3, #28]
 800fcb0:	4648      	mov	r0, r9
 800fcb2:	459a      	cmp	sl, r3
 800fcb4:	bf94      	ite	ls
 800fcb6:	f04f 0a00 	movls.w	sl, #0
 800fcba:	f04f 0a01 	movhi.w	sl, #1
 800fcbe:	f00d fecf 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fcc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcc4:	e65e      	b.n	800f984 <TREEVIEW_Callback+0x5cc>
 800fcc6:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 800fcca:	f003 0302 	and.w	r3, r3, #2
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f43f aefd 	beq.w	800fad0 <TREEVIEW_Callback+0x718>
 800fcd6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800fcda:	ebb8 0c03 	subs.w	ip, r8, r3
 800fcde:	f1dc 0300 	rsbs	r3, ip, #0
 800fce2:	eb53 030c 	adcs.w	r3, r3, ip
 800fce6:	e6f3      	b.n	800fad0 <TREEVIEW_Callback+0x718>
 800fce8:	8b08      	ldrh	r0, [r1, #24]
 800fcea:	f000 0003 	and.w	r0, r0, #3
 800fcee:	2803      	cmp	r0, #3
 800fcf0:	f040 8088 	bne.w	800fe04 <TREEVIEW_Callback+0xa4c>
 800fcf4:	f1ba 0f00 	cmp.w	sl, #0
 800fcf8:	f000 8084 	beq.w	800fe04 <TREEVIEW_Callback+0xa4c>
 800fcfc:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800fd00:	f8dd c018 	ldr.w	ip, [sp, #24]
 800fd04:	eb02 77d2 	add.w	r7, r2, r2, lsr #31
 800fd08:	eb0b 0767 	add.w	r7, fp, r7, asr #1
 800fd0c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800fd10:	eb0b 0840 	add.w	r8, fp, r0, lsl #1
 800fd14:	b2bf      	uxth	r7, r7
 800fd16:	3001      	adds	r0, #1
 800fd18:	f828 7c3e 	strh.w	r7, [r8, #-62]
 800fd1c:	f828 7c4a 	strh.w	r7, [r8, #-74]
 800fd20:	f828 ec44 	strh.w	lr, [r8, #-68]
 800fd24:	f828 cc38 	strh.w	ip, [r8, #-56]
 800fd28:	f88d 00c4 	strb.w	r0, [sp, #196]	; 0xc4
 800fd2c:	f891 801c 	ldrb.w	r8, [r1, #28]
 800fd30:	9804      	ldr	r0, [sp, #16]
 800fd32:	fb08 0802 	mla	r8, r8, r2, r0
 800fd36:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd3a:	e632      	b.n	800f9a2 <TREEVIEW_Callback+0x5ea>
 800fd3c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800fd40:	f002 0202 	and.w	r2, r2, #2
 800fd44:	b292      	uxth	r2, r2
 800fd46:	2a00      	cmp	r2, #0
 800fd48:	f43f aecf 	beq.w	800faea <TREEVIEW_Callback+0x732>
 800fd4c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800fd50:	ebb8 0e02 	subs.w	lr, r8, r2
 800fd54:	f1de 0200 	rsbs	r2, lr, #0
 800fd58:	eb52 020e 	adcs.w	r2, r2, lr
 800fd5c:	e6c5      	b.n	800faea <TREEVIEW_Callback+0x732>
 800fd5e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fd62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fd64:	e64e      	b.n	800fa04 <TREEVIEW_Callback+0x64c>
 800fd66:	2101      	movs	r1, #1
 800fd68:	4658      	mov	r0, fp
 800fd6a:	f003 fbf7 	bl	801355c <WM_SetCapture>
 800fd6e:	af44      	add	r7, sp, #272	; 0x110
 800fd70:	4658      	mov	r0, fp
 800fd72:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800fd76:	f00d fe61 	bl	801da3c <GUI_ALLOC_LockH>
 800fd7a:	9703      	str	r7, [sp, #12]
 800fd7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fd80:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800fd82:	f84c 0db8 	str.w	r0, [ip, #-184]!
 800fd86:	4603      	mov	r3, r0
 800fd88:	4660      	mov	r0, ip
 800fd8a:	f8cd c00c 	str.w	ip, [sp, #12]
 800fd8e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800fd90:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800fd94:	1e7c      	subs	r4, r7, #1
 800fd96:	f00d fe63 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fd9a:	2f00      	cmp	r7, #0
 800fd9c:	d041      	beq.n	800fe22 <TREEVIEW_Callback+0xa6a>
 800fd9e:	b186      	cbz	r6, 800fdc2 <TREEVIEW_Callback+0xa0a>
 800fda0:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800fda4:	4630      	mov	r0, r6
 800fda6:	f00d fe49 	bl	801da3c <GUI_ALLOC_LockH>
 800fdaa:	8b03      	ldrh	r3, [r0, #24]
 800fdac:	9028      	str	r0, [sp, #160]	; 0xa0
 800fdae:	07de      	lsls	r6, r3, #31
 800fdb0:	d520      	bpl.n	800fdf4 <TREEVIEW_Callback+0xa3c>
 800fdb2:	0799      	lsls	r1, r3, #30
 800fdb4:	d41e      	bmi.n	800fdf4 <TREEVIEW_Callback+0xa3c>
 800fdb6:	7f07      	ldrb	r7, [r0, #28]
 800fdb8:	6846      	ldr	r6, [r0, #4]
 800fdba:	4650      	mov	r0, sl
 800fdbc:	b95e      	cbnz	r6, 800fdd6 <TREEVIEW_Callback+0xa1e>
 800fdbe:	f00d fe4f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fdc2:	4658      	mov	r0, fp
 800fdc4:	f00d fe3a 	bl	801da3c <GUI_ALLOC_LockH>
 800fdc8:	ab44      	add	r3, sp, #272	; 0x110
 800fdca:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f00d fe46 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fdd4:	e42b      	b.n	800f62e <TREEVIEW_Callback+0x276>
 800fdd6:	f00d fe43 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fdda:	4630      	mov	r0, r6
 800fddc:	f00d fe2e 	bl	801da3c <GUI_ALLOC_LockH>
 800fde0:	9028      	str	r0, [sp, #160]	; 0xa0
 800fde2:	7f03      	ldrb	r3, [r0, #28]
 800fde4:	429f      	cmp	r7, r3
 800fde6:	dbe7      	blt.n	800fdb8 <TREEVIEW_Callback+0xa00>
 800fde8:	4650      	mov	r0, sl
 800fdea:	f00d fe39 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fdee:	b1d4      	cbz	r4, 800fe26 <TREEVIEW_Callback+0xa6e>
 800fdf0:	3c01      	subs	r4, #1
 800fdf2:	e7d7      	b.n	800fda4 <TREEVIEW_Callback+0x9ec>
 800fdf4:	6846      	ldr	r6, [r0, #4]
 800fdf6:	4650      	mov	r0, sl
 800fdf8:	f00d fe32 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fdfc:	b18c      	cbz	r4, 800fe22 <TREEVIEW_Callback+0xa6a>
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	d1f6      	bne.n	800fdf0 <TREEVIEW_Callback+0xa38>
 800fe02:	e7de      	b.n	800fdc2 <TREEVIEW_Callback+0xa0a>
 800fe04:	46d8      	mov	r8, fp
 800fe06:	e5cc      	b.n	800f9a2 <TREEVIEW_Callback+0x5ea>
 800fe08:	f8dd e020 	ldr.w	lr, [sp, #32]
 800fe0c:	1e50      	subs	r0, r2, #1
 800fe0e:	4496      	add	lr, r2
 800fe10:	4483      	add	fp, r0
 800fe12:	ea4f 0c6e 	mov.w	ip, lr, asr #1
 800fe16:	fa1f fb8b 	uxth.w	fp, fp
 800fe1a:	e6e2      	b.n	800fbe2 <TREEVIEW_Callback+0x82a>
 800fe1c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800fe20:	e62e      	b.n	800fa80 <TREEVIEW_Callback+0x6c8>
 800fe22:	2e00      	cmp	r6, #0
 800fe24:	d0cd      	beq.n	800fdc2 <TREEVIEW_Callback+0xa0a>
 800fe26:	2400      	movs	r4, #0
 800fe28:	961f      	str	r6, [sp, #124]	; 0x7c
 800fe2a:	2d00      	cmp	r5, #0
 800fe2c:	d033      	beq.n	800fe96 <TREEVIEW_Callback+0xade>
 800fe2e:	201b      	movs	r0, #27
 800fe30:	a91f      	add	r1, sp, #124	; 0x7c
 800fe32:	9029      	str	r0, [sp, #164]	; 0xa4
 800fe34:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 800fe38:	9130      	str	r1, [sp, #192]	; 0xc0
 800fe3a:	a828      	add	r0, sp, #160	; 0xa0
 800fe3c:	47a8      	blx	r5
 800fe3e:	45a1      	cmp	r9, r4
 800fe40:	4404      	add	r4, r0
 800fe42:	db01      	blt.n	800fe48 <TREEVIEW_Callback+0xa90>
 800fe44:	45a1      	cmp	r9, r4
 800fe46:	dd35      	ble.n	800feb4 <TREEVIEW_Callback+0xafc>
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f00d fdf7 	bl	801da3c <GUI_ALLOC_LockH>
 800fe4e:	8b03      	ldrh	r3, [r0, #24]
 800fe50:	9028      	str	r0, [sp, #160]	; 0xa0
 800fe52:	07da      	lsls	r2, r3, #31
 800fe54:	d518      	bpl.n	800fe88 <TREEVIEW_Callback+0xad0>
 800fe56:	079b      	lsls	r3, r3, #30
 800fe58:	d416      	bmi.n	800fe88 <TREEVIEW_Callback+0xad0>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800fe60:	685e      	ldr	r6, [r3, #4]
 800fe62:	7f07      	ldrb	r7, [r0, #28]
 800fe64:	4650      	mov	r0, sl
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	d0a9      	beq.n	800fdbe <TREEVIEW_Callback+0xa06>
 800fe6a:	f00d fdf9 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f00d fde4 	bl	801da3c <GUI_ALLOC_LockH>
 800fe74:	9028      	str	r0, [sp, #160]	; 0xa0
 800fe76:	7f02      	ldrb	r2, [r0, #28]
 800fe78:	4297      	cmp	r7, r2
 800fe7a:	da0e      	bge.n	800fe9a <TREEVIEW_Callback+0xae2>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	4650      	mov	r0, sl
 800fe80:	685e      	ldr	r6, [r3, #4]
 800fe82:	2e00      	cmp	r6, #0
 800fe84:	d09b      	beq.n	800fdbe <TREEVIEW_Callback+0xa06>
 800fe86:	e7f0      	b.n	800fe6a <TREEVIEW_Callback+0xab2>
 800fe88:	6846      	ldr	r6, [r0, #4]
 800fe8a:	a828      	add	r0, sp, #160	; 0xa0
 800fe8c:	f00d fde8 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fe90:	2e00      	cmp	r6, #0
 800fe92:	d1c9      	bne.n	800fe28 <TREEVIEW_Callback+0xa70>
 800fe94:	e795      	b.n	800fdc2 <TREEVIEW_Callback+0xa0a>
 800fe96:	4628      	mov	r0, r5
 800fe98:	e7d1      	b.n	800fe3e <TREEVIEW_Callback+0xa86>
 800fe9a:	4650      	mov	r0, sl
 800fe9c:	f00d fde0 	bl	801da60 <GUI_ALLOC_UnlockH>
 800fea0:	e7c2      	b.n	800fe28 <TREEVIEW_Callback+0xa70>
 800fea2:	68a0      	ldr	r0, [r4, #8]
 800fea4:	a928      	add	r1, sp, #160	; 0xa0
 800fea6:	f004 faef 	bl	8014488 <WM_GetScrollState>
 800feaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800feac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800feae:	63da      	str	r2, [r3, #60]	; 0x3c
 800feb0:	f7ff bbd8 	b.w	800f664 <TREEVIEW_Callback+0x2ac>
 800feb4:	4658      	mov	r0, fp
 800feb6:	f00d fdc1 	bl	801da3c <GUI_ALLOC_LockH>
 800feba:	9014      	str	r0, [sp, #80]	; 0x50
 800febc:	4630      	mov	r0, r6
 800febe:	f00d fdbd 	bl	801da3c <GUI_ALLOC_LockH>
 800fec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fec4:	9016      	str	r0, [sp, #88]	; 0x58
 800fec6:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800fec8:	f8d8 5000 	ldr.w	r5, [r8]
 800fecc:	7f03      	ldrb	r3, [r0, #28]
 800fece:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 800fed2:	f9b2 70c0 	ldrsh.w	r7, [r2, #192]	; 0xc0
 800fed6:	4429      	add	r1, r5
 800fed8:	fb04 f303 	mul.w	r3, r4, r3
 800fedc:	1bc9      	subs	r1, r1, r7
 800fede:	428b      	cmp	r3, r1
 800fee0:	dc05      	bgt.n	800feee <TREEVIEW_Callback+0xb36>
 800fee2:	18e5      	adds	r5, r4, r3
 800fee4:	428d      	cmp	r5, r1
 800fee6:	dd02      	ble.n	800feee <TREEVIEW_Callback+0xb36>
 800fee8:	8b05      	ldrh	r5, [r0, #24]
 800feea:	07ef      	lsls	r7, r5, #31
 800feec:	d451      	bmi.n	800ff92 <TREEVIEW_Callback+0xbda>
 800feee:	f8b2 109c 	ldrh.w	r1, [r2, #156]	; 0x9c
 800fef2:	0789      	lsls	r1, r1, #30
 800fef4:	d533      	bpl.n	800ff5e <TREEVIEW_Callback+0xba6>
 800fef6:	4658      	mov	r0, fp
 800fef8:	a928      	add	r1, sp, #160	; 0xa0
 800fefa:	f004 f871 	bl	8013fe0 <WM_GetInsideRectExScrollbar>
 800fefe:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	; 0xa0
 800ff02:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
 800ff06:	f8d8 2000 	ldr.w	r2, [r8]
 800ff0a:	42a2      	cmp	r2, r4
 800ff0c:	db1f      	blt.n	800ff4e <TREEVIEW_Callback+0xb96>
 800ff0e:	4282      	cmp	r2, r0
 800ff10:	dc1d      	bgt.n	800ff4e <TREEVIEW_Callback+0xb96>
 800ff12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff14:	f8d2 40ac 	ldr.w	r4, [r2, #172]	; 0xac
 800ff18:	2c00      	cmp	r4, #0
 800ff1a:	d047      	beq.n	800ffac <TREEVIEW_Callback+0xbf4>
 800ff1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff1e:	9803      	ldr	r0, [sp, #12]
 800ff20:	8b14      	ldrh	r4, [r2, #24]
 800ff22:	f00d fd9d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff26:	a814      	add	r0, sp, #80	; 0x50
 800ff28:	f00d fd9a 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff2c:	07a7      	lsls	r7, r4, #30
 800ff2e:	4630      	mov	r0, r6
 800ff30:	d538      	bpl.n	800ffa4 <TREEVIEW_Callback+0xbec>
 800ff32:	f7fe faad 	bl	800e490 <_CollapseItem>
 800ff36:	f7ff bb7a 	b.w	800f62e <TREEVIEW_Callback+0x276>
 800ff3a:	44e3      	add	fp, ip
 800ff3c:	fa1f fb8b 	uxth.w	fp, fp
 800ff40:	e64f      	b.n	800fbe2 <TREEVIEW_Callback+0x82a>
 800ff42:	4658      	mov	r0, fp
 800ff44:	2103      	movs	r1, #3
 800ff46:	f004 fb07 	bl	8014558 <WM_NotifyParent>
 800ff4a:	f7ff ba4b 	b.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800ff4e:	9803      	ldr	r0, [sp, #12]
 800ff50:	f00d fd86 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff54:	a814      	add	r0, sp, #80	; 0x50
 800ff56:	f00d fd83 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff5a:	f7ff bb68 	b.w	800f62e <TREEVIEW_Callback+0x276>
 800ff5e:	301d      	adds	r0, #29
 800ff60:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
 800ff64:	441c      	add	r4, r3
 800ff66:	f00b ff0d 	bl	801bd84 <GUI_GetStringDistX>
 800ff6a:	4425      	add	r5, r4
 800ff6c:	4428      	add	r0, r5
 800ff6e:	e7ca      	b.n	800ff06 <TREEVIEW_Callback+0xb4e>
 800ff70:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800ff74:	f8cd b00c 	str.w	fp, [sp, #12]
 800ff78:	e43e      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800ff7a:	ab0a      	add	r3, sp, #40	; 0x28
 800ff7c:	9303      	str	r3, [sp, #12]
 800ff7e:	e43b      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800ff80:	68a0      	ldr	r0, [r4, #8]
 800ff82:	a928      	add	r1, sp, #160	; 0xa0
 800ff84:	f004 fa80 	bl	8014488 <WM_GetScrollState>
 800ff88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ff8c:	649a      	str	r2, [r3, #72]	; 0x48
 800ff8e:	f7ff bb69 	b.w	800f664 <TREEVIEW_Callback+0x2ac>
 800ff92:	9803      	ldr	r0, [sp, #12]
 800ff94:	f00d fd64 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff98:	a814      	add	r0, sp, #80	; 0x50
 800ff9a:	f00d fd61 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ff9e:	07ac      	lsls	r4, r5, #30
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	d4c6      	bmi.n	800ff32 <TREEVIEW_Callback+0xb7a>
 800ffa4:	f7fe fa9e 	bl	800e4e4 <_ExpandItem>
 800ffa8:	f7ff bb41 	b.w	800f62e <TREEVIEW_Callback+0x276>
 800ffac:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
 800ffb0:	4658      	mov	r0, fp
 800ffb2:	f006 f9cd 	bl	8016350 <WM_InvalidateWindow>
 800ffb6:	9803      	ldr	r0, [sp, #12]
 800ffb8:	f00d fd52 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ffbc:	a814      	add	r0, sp, #80	; 0x50
 800ffbe:	f00d fd4f 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ffca:	4658      	mov	r0, fp
 800ffcc:	f003 f948 	bl	8013260 <WM_CreateTimer>
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	4658      	mov	r0, fp
 800ffd4:	f00d fd32 	bl	801da3c <GUI_ALLOC_LockH>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	9014      	str	r0, [sp, #80]	; 0x50
 800ffdc:	a814      	add	r0, sp, #80	; 0x50
 800ffde:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 800ffe2:	f00d fd3d 	bl	801da60 <GUI_ALLOC_UnlockH>
 800ffe6:	f7ff bb22 	b.w	800f62e <TREEVIEW_Callback+0x276>
 800ffea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ffee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fff2:	e401      	b.n	800f7f8 <TREEVIEW_Callback+0x440>
 800fff4:	4628      	mov	r0, r5
 800fff6:	f7ff f977 	bl	800f2e8 <TREEVIEW_ITEM_Expand>
 800fffa:	f7ff b9f3 	b.w	800f3e4 <TREEVIEW_Callback+0x2c>
 800fffe:	f00d fd1d 	bl	801da3c <GUI_ALLOC_LockH>
 8010002:	af16      	add	r7, sp, #88	; 0x58
 8010004:	9016      	str	r0, [sp, #88]	; 0x58
 8010006:	9703      	str	r7, [sp, #12]
 8010008:	f890 801c 	ldrb.w	r8, [r0, #28]
 801000c:	9505      	str	r5, [sp, #20]
 801000e:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8010012:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 8010016:	462f      	mov	r7, r5
 8010018:	e018      	b.n	801004c <TREEVIEW_Callback+0xc94>
 801001a:	f00d fd21 	bl	801da60 <GUI_ALLOC_UnlockH>
 801001e:	2c00      	cmp	r4, #0
 8010020:	d133      	bne.n	801008a <TREEVIEW_Callback+0xcd2>
 8010022:	4638      	mov	r0, r7
 8010024:	f00d fd0a 	bl	801da3c <GUI_ALLOC_LockH>
 8010028:	901f      	str	r0, [sp, #124]	; 0x7c
 801002a:	4648      	mov	r0, r9
 801002c:	463c      	mov	r4, r7
 801002e:	f00d fd17 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010032:	9803      	ldr	r0, [sp, #12]
 8010034:	f00d fd14 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010038:	4620      	mov	r0, r4
 801003a:	f00d fcff 	bl	801da3c <GUI_ALLOC_LockH>
 801003e:	9016      	str	r0, [sp, #88]	; 0x58
 8010040:	7f03      	ldrb	r3, [r0, #28]
 8010042:	4598      	cmp	r8, r3
 8010044:	dc31      	bgt.n	80100aa <TREEVIEW_Callback+0xcf2>
 8010046:	2b00      	cmp	r3, #0
 8010048:	d02d      	beq.n	80100a6 <TREEVIEW_Callback+0xcee>
 801004a:	4627      	mov	r7, r4
 801004c:	4638      	mov	r0, r7
 801004e:	f00d fcf5 	bl	801da3c <GUI_ALLOC_LockH>
 8010052:	9028      	str	r0, [sp, #160]	; 0xa0
 8010054:	7f06      	ldrb	r6, [r0, #28]
 8010056:	2400      	movs	r4, #0
 8010058:	6885      	ldr	r5, [r0, #8]
 801005a:	4650      	mov	r0, sl
 801005c:	2d00      	cmp	r5, #0
 801005e:	d0dc      	beq.n	801001a <TREEVIEW_Callback+0xc62>
 8010060:	f00d fcfe 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010064:	4628      	mov	r0, r5
 8010066:	f00d fce9 	bl	801da3c <GUI_ALLOC_LockH>
 801006a:	9028      	str	r0, [sp, #160]	; 0xa0
 801006c:	b90c      	cbnz	r4, 8010072 <TREEVIEW_Callback+0xcba>
 801006e:	7f06      	ldrb	r6, [r0, #28]
 8010070:	462c      	mov	r4, r5
 8010072:	8b02      	ldrh	r2, [r0, #24]
 8010074:	07d3      	lsls	r3, r2, #31
 8010076:	d5ef      	bpl.n	8010058 <TREEVIEW_Callback+0xca0>
 8010078:	7f01      	ldrb	r1, [r0, #28]
 801007a:	42b1      	cmp	r1, r6
 801007c:	daec      	bge.n	8010058 <TREEVIEW_Callback+0xca0>
 801007e:	f012 0f02 	tst.w	r2, #2
 8010082:	bf08      	it	eq
 8010084:	462c      	moveq	r4, r5
 8010086:	460e      	mov	r6, r1
 8010088:	e7e6      	b.n	8010058 <TREEVIEW_Callback+0xca0>
 801008a:	4620      	mov	r0, r4
 801008c:	f00d fcd6 	bl	801da3c <GUI_ALLOC_LockH>
 8010090:	4603      	mov	r3, r0
 8010092:	4648      	mov	r0, r9
 8010094:	8b1e      	ldrh	r6, [r3, #24]
 8010096:	931f      	str	r3, [sp, #124]	; 0x7c
 8010098:	f00d fce2 	bl	801da60 <GUI_ALLOC_UnlockH>
 801009c:	07f1      	lsls	r1, r6, #31
 801009e:	d4c8      	bmi.n	8010032 <TREEVIEW_Callback+0xc7a>
 80100a0:	42a7      	cmp	r7, r4
 80100a2:	d1d2      	bne.n	801004a <TREEVIEW_Callback+0xc92>
 80100a4:	e7c5      	b.n	8010032 <TREEVIEW_Callback+0xc7a>
 80100a6:	9d05      	ldr	r5, [sp, #20]
 80100a8:	462c      	mov	r4, r5
 80100aa:	9803      	ldr	r0, [sp, #12]
 80100ac:	f00d fcd8 	bl	801da60 <GUI_ALLOC_UnlockH>
 80100b0:	4658      	mov	r0, fp
 80100b2:	4621      	mov	r1, r4
 80100b4:	f7fe fd80 	bl	800ebb8 <_SetSel>
 80100b8:	f7ff b994 	b.w	800f3e4 <TREEVIEW_Callback+0x2c>
 80100bc:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 80100c0:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 80100c4:	4628      	mov	r0, r5
 80100c6:	f00d fcb9 	bl	801da3c <GUI_ALLOC_LockH>
 80100ca:	9028      	str	r0, [sp, #160]	; 0xa0
 80100cc:	7f07      	ldrb	r7, [r0, #28]
 80100ce:	4603      	mov	r3, r0
 80100d0:	2400      	movs	r4, #0
 80100d2:	689e      	ldr	r6, [r3, #8]
 80100d4:	4650      	mov	r0, sl
 80100d6:	b986      	cbnz	r6, 80100fa <TREEVIEW_Callback+0xd42>
 80100d8:	f00d fcc2 	bl	801da60 <GUI_ALLOC_UnlockH>
 80100dc:	bb1c      	cbnz	r4, 8010126 <TREEVIEW_Callback+0xd6e>
 80100de:	4628      	mov	r0, r5
 80100e0:	f00d fcac 	bl	801da3c <GUI_ALLOC_LockH>
 80100e4:	901f      	str	r0, [sp, #124]	; 0x7c
 80100e6:	4648      	mov	r0, r9
 80100e8:	f00d fcba 	bl	801da60 <GUI_ALLOC_UnlockH>
 80100ec:	462c      	mov	r4, r5
 80100ee:	4658      	mov	r0, fp
 80100f0:	4621      	mov	r1, r4
 80100f2:	f7fe fd61 	bl	800ebb8 <_SetSel>
 80100f6:	f7ff b975 	b.w	800f3e4 <TREEVIEW_Callback+0x2c>
 80100fa:	f00d fcb1 	bl	801da60 <GUI_ALLOC_UnlockH>
 80100fe:	4630      	mov	r0, r6
 8010100:	f00d fc9c 	bl	801da3c <GUI_ALLOC_LockH>
 8010104:	9028      	str	r0, [sp, #160]	; 0xa0
 8010106:	b90c      	cbnz	r4, 801010c <TREEVIEW_Callback+0xd54>
 8010108:	7f07      	ldrb	r7, [r0, #28]
 801010a:	4634      	mov	r4, r6
 801010c:	8b01      	ldrh	r1, [r0, #24]
 801010e:	07ca      	lsls	r2, r1, #31
 8010110:	d507      	bpl.n	8010122 <TREEVIEW_Callback+0xd6a>
 8010112:	7f02      	ldrb	r2, [r0, #28]
 8010114:	42ba      	cmp	r2, r7
 8010116:	da04      	bge.n	8010122 <TREEVIEW_Callback+0xd6a>
 8010118:	f011 0f02 	tst.w	r1, #2
 801011c:	bf08      	it	eq
 801011e:	4634      	moveq	r4, r6
 8010120:	4617      	mov	r7, r2
 8010122:	4603      	mov	r3, r0
 8010124:	e7d5      	b.n	80100d2 <TREEVIEW_Callback+0xd1a>
 8010126:	4620      	mov	r0, r4
 8010128:	f00d fc88 	bl	801da3c <GUI_ALLOC_LockH>
 801012c:	4603      	mov	r3, r0
 801012e:	4648      	mov	r0, r9
 8010130:	8b1e      	ldrh	r6, [r3, #24]
 8010132:	931f      	str	r3, [sp, #124]	; 0x7c
 8010134:	f00d fc94 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010138:	07f3      	lsls	r3, r6, #31
 801013a:	d4d8      	bmi.n	80100ee <TREEVIEW_Callback+0xd36>
 801013c:	42a5      	cmp	r5, r4
 801013e:	d0d6      	beq.n	80100ee <TREEVIEW_Callback+0xd36>
 8010140:	4625      	mov	r5, r4
 8010142:	e7bf      	b.n	80100c4 <TREEVIEW_Callback+0xd0c>
 8010144:	20000250 	.word	0x20000250

08010148 <TEXT_Callback>:
 8010148:	b530      	push	{r4, r5, lr}
 801014a:	6845      	ldr	r5, [r0, #4]
 801014c:	b085      	sub	sp, #20
 801014e:	4604      	mov	r4, r0
 8010150:	4601      	mov	r1, r0
 8010152:	4628      	mov	r0, r5
 8010154:	f7fd fe44 	bl	800dde0 <WIDGET_HandleActive>
 8010158:	b1b8      	cbz	r0, 801018a <TEXT_Callback+0x42>
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	2b0f      	cmp	r3, #15
 801015e:	d016      	beq.n	801018e <TEXT_Callback+0x46>
 8010160:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010164:	d040      	beq.n	80101e8 <TEXT_Callback+0xa0>
 8010166:	2b0b      	cmp	r3, #11
 8010168:	d10c      	bne.n	8010184 <TEXT_Callback+0x3c>
 801016a:	4628      	mov	r0, r5
 801016c:	f00d fc66 	bl	801da3c <GUI_ALLOC_LockH>
 8010170:	ad04      	add	r5, sp, #16
 8010172:	4603      	mov	r3, r0
 8010174:	f845 3d08 	str.w	r3, [r5, #-8]!
 8010178:	3044      	adds	r0, #68	; 0x44
 801017a:	f00d fd91 	bl	801dca0 <GUI_ALLOC_FreePtr>
 801017e:	4628      	mov	r0, r5
 8010180:	f00d fc6e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010184:	4620      	mov	r0, r4
 8010186:	f006 fe49 	bl	8016e1c <WM_DefaultProc>
 801018a:	b005      	add	sp, #20
 801018c:	bd30      	pop	{r4, r5, pc}
 801018e:	4628      	mov	r0, r5
 8010190:	f00d fc54 	bl	801da3c <GUI_ALLOC_LockH>
 8010194:	9000      	str	r0, [sp, #0]
 8010196:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010198:	f00a f848 	bl	801a22c <LCD_SetColor>
 801019c:	9b00      	ldr	r3, [sp, #0]
 801019e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80101a0:	f00c fbca 	bl	801c938 <GUI_SetFont>
 80101a4:	4628      	mov	r0, r5
 80101a6:	f003 f8e3 	bl	8013370 <WM_GetHasTrans>
 80101aa:	b340      	cbz	r0, 80101fe <TEXT_Callback+0xb6>
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101b0:	b1ab      	cbz	r3, 80101de <TEXT_Callback+0x96>
 80101b2:	2002      	movs	r0, #2
 80101b4:	f00c fbf0 	bl	801c998 <GUI_SetTextMode>
 80101b8:	a802      	add	r0, sp, #8
 80101ba:	f003 fddb 	bl	8013d74 <WM_GetClientRect>
 80101be:	9b00      	ldr	r3, [sp, #0]
 80101c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80101c2:	f00d fc3b 	bl	801da3c <GUI_ALLOC_LockH>
 80101c6:	9b00      	ldr	r3, [sp, #0]
 80101c8:	9001      	str	r0, [sp, #4]
 80101ca:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80101ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101d2:	a902      	add	r1, sp, #8
 80101d4:	f00b fd0a 	bl	801bbec <GUI_DispStringInRectWrap>
 80101d8:	a801      	add	r0, sp, #4
 80101da:	f00d fc41 	bl	801da60 <GUI_ALLOC_UnlockH>
 80101de:	4668      	mov	r0, sp
 80101e0:	f00d fc3e 	bl	801da60 <GUI_ALLOC_UnlockH>
 80101e4:	b005      	add	sp, #20
 80101e6:	bd30      	pop	{r4, r5, pc}
 80101e8:	68e3      	ldr	r3, [r4, #12]
 80101ea:	b17b      	cbz	r3, 801020c <TEXT_Callback+0xc4>
 80101ec:	7a1b      	ldrb	r3, [r3, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bf0c      	ite	eq
 80101f2:	2102      	moveq	r1, #2
 80101f4:	2101      	movne	r1, #1
 80101f6:	4628      	mov	r0, r5
 80101f8:	f004 f9ae 	bl	8014558 <WM_NotifyParent>
 80101fc:	e7c2      	b.n	8010184 <TEXT_Callback+0x3c>
 80101fe:	9b00      	ldr	r3, [sp, #0]
 8010200:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010202:	f00a f80b 	bl	801a21c <LCD_SetBkColor>
 8010206:	f00b ffd1 	bl	801c1ac <GUI_Clear>
 801020a:	e7cf      	b.n	80101ac <TEXT_Callback+0x64>
 801020c:	2103      	movs	r1, #3
 801020e:	e7f2      	b.n	80101f6 <TEXT_Callback+0xae>

08010210 <TEXT_CreateIndirect>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	4689      	mov	r9, r1
 8010216:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801021a:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 801021e:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8010222:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 8010226:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 801022a:	8a47      	ldrh	r7, [r0, #18]
 801022c:	8906      	ldrh	r6, [r0, #8]
 801022e:	6845      	ldr	r5, [r0, #4]
 8010230:	b089      	sub	sp, #36	; 0x24
 8010232:	1888      	adds	r0, r1, r2
 8010234:	449b      	add	fp, r3
 8010236:	9005      	str	r0, [sp, #20]
 8010238:	f00b f880 	bl	801b33c <GUI_Lock>
 801023c:	f10a 0320 	add.w	r3, sl, #32
 8010240:	f04f 0c03 	mov.w	ip, #3
 8010244:	f8df e090 	ldr.w	lr, [pc, #144]	; 80102d8 <TEXT_CreateIndirect+0xc8>
 8010248:	9303      	str	r3, [sp, #12]
 801024a:	f8cd 9000 	str.w	r9, [sp]
 801024e:	4623      	mov	r3, r4
 8010250:	9805      	ldr	r0, [sp, #20]
 8010252:	f8cd c004 	str.w	ip, [sp, #4]
 8010256:	4659      	mov	r1, fp
 8010258:	4642      	mov	r2, r8
 801025a:	f8cd e008 	str.w	lr, [sp, #8]
 801025e:	f006 f8d3 	bl	8016408 <WM_CreateWindowAsChild>
 8010262:	4604      	mov	r4, r0
 8010264:	b300      	cbz	r0, 80102a8 <TEXT_CreateIndirect+0x98>
 8010266:	b32d      	cbz	r5, 80102b4 <TEXT_CreateIndirect+0xa4>
 8010268:	4628      	mov	r0, r5
 801026a:	f7ef ffdb 	bl	8000224 <strlen>
 801026e:	3001      	adds	r0, #1
 8010270:	f00d fd6c 	bl	801dd4c <GUI_ALLOC_AllocZero>
 8010274:	4681      	mov	r9, r0
 8010276:	b9f8      	cbnz	r0, 80102b8 <TEXT_CreateIndirect+0xa8>
 8010278:	f10d 081c 	add.w	r8, sp, #28
 801027c:	4620      	mov	r0, r4
 801027e:	f00d fbdd 	bl	801da3c <GUI_ALLOC_LockH>
 8010282:	b231      	sxth	r1, r6
 8010284:	2200      	movs	r2, #0
 8010286:	9007      	str	r0, [sp, #28]
 8010288:	f7fd fcb0 	bl	800dbec <WIDGET__Init>
 801028c:	4b11      	ldr	r3, [pc, #68]	; (80102d4 <TEXT_CreateIndirect+0xc4>)
 801028e:	9e07      	ldr	r6, [sp, #28]
 8010290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010292:	f106 0534 	add.w	r5, r6, #52	; 0x34
 8010296:	f8c6 9044 	str.w	r9, [r6, #68]	; 0x44
 801029a:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
 801029e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80102a2:	4640      	mov	r0, r8
 80102a4:	f00d fbdc 	bl	801da60 <GUI_ALLOC_UnlockH>
 80102a8:	f00b f83e 	bl	801b328 <GUI_Unlock>
 80102ac:	4620      	mov	r0, r4
 80102ae:	b009      	add	sp, #36	; 0x24
 80102b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b4:	46a9      	mov	r9, r5
 80102b6:	e7df      	b.n	8010278 <TEXT_CreateIndirect+0x68>
 80102b8:	f00d fbc0 	bl	801da3c <GUI_ALLOC_LockH>
 80102bc:	f10d 0820 	add.w	r8, sp, #32
 80102c0:	4629      	mov	r1, r5
 80102c2:	f848 0d04 	str.w	r0, [r8, #-4]!
 80102c6:	f012 fc7b 	bl	8022bc0 <strcpy>
 80102ca:	4640      	mov	r0, r8
 80102cc:	f00d fbc8 	bl	801da60 <GUI_ALLOC_UnlockH>
 80102d0:	e7d4      	b.n	801027c <TEXT_CreateIndirect+0x6c>
 80102d2:	bf00      	nop
 80102d4:	2000017c 	.word	0x2000017c
 80102d8:	08010149 	.word	0x08010149

080102dc <TEXT_SetFont>:
 80102dc:	b530      	push	{r4, r5, lr}
 80102de:	4604      	mov	r4, r0
 80102e0:	b083      	sub	sp, #12
 80102e2:	460d      	mov	r5, r1
 80102e4:	b908      	cbnz	r0, 80102ea <TEXT_SetFont+0xe>
 80102e6:	b003      	add	sp, #12
 80102e8:	bd30      	pop	{r4, r5, pc}
 80102ea:	f00b f827 	bl	801b33c <GUI_Lock>
 80102ee:	4620      	mov	r0, r4
 80102f0:	f00d fba4 	bl	801da3c <GUI_ALLOC_LockH>
 80102f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80102f6:	9001      	str	r0, [sp, #4]
 80102f8:	42ab      	cmp	r3, r5
 80102fa:	d003      	beq.n	8010304 <TEXT_SetFont+0x28>
 80102fc:	6345      	str	r5, [r0, #52]	; 0x34
 80102fe:	4620      	mov	r0, r4
 8010300:	f006 f826 	bl	8016350 <WM_InvalidateWindow>
 8010304:	a801      	add	r0, sp, #4
 8010306:	f00d fbab 	bl	801da60 <GUI_ALLOC_UnlockH>
 801030a:	f00b f80d 	bl	801b328 <GUI_Unlock>
 801030e:	b003      	add	sp, #12
 8010310:	bd30      	pop	{r4, r5, pc}
 8010312:	bf00      	nop

08010314 <TEXT_SetText>:
 8010314:	b530      	push	{r4, r5, lr}
 8010316:	4604      	mov	r4, r0
 8010318:	b083      	sub	sp, #12
 801031a:	460d      	mov	r5, r1
 801031c:	b918      	cbnz	r0, 8010326 <TEXT_SetText+0x12>
 801031e:	2501      	movs	r5, #1
 8010320:	4628      	mov	r0, r5
 8010322:	b003      	add	sp, #12
 8010324:	bd30      	pop	{r4, r5, pc}
 8010326:	f00b f809 	bl	801b33c <GUI_Lock>
 801032a:	4620      	mov	r0, r4
 801032c:	f00d fb86 	bl	801da3c <GUI_ALLOC_LockH>
 8010330:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010332:	9000      	str	r0, [sp, #0]
 8010334:	4668      	mov	r0, sp
 8010336:	9301      	str	r3, [sp, #4]
 8010338:	f00d fb92 	bl	801da60 <GUI_ALLOC_UnlockH>
 801033c:	4629      	mov	r1, r5
 801033e:	a801      	add	r0, sp, #4
 8010340:	f00a f8c4 	bl	801a4cc <GUI__SetText>
 8010344:	f1d0 0501 	rsbs	r5, r0, #1
 8010348:	bf38      	it	cc
 801034a:	2500      	movcc	r5, #0
 801034c:	b125      	cbz	r5, 8010358 <TEXT_SetText+0x44>
 801034e:	f00a ffeb 	bl	801b328 <GUI_Unlock>
 8010352:	4628      	mov	r0, r5
 8010354:	b003      	add	sp, #12
 8010356:	bd30      	pop	{r4, r5, pc}
 8010358:	4620      	mov	r0, r4
 801035a:	f00d fb6f 	bl	801da3c <GUI_ALLOC_LockH>
 801035e:	9b01      	ldr	r3, [sp, #4]
 8010360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010362:	9000      	str	r0, [sp, #0]
 8010364:	429a      	cmp	r2, r3
 8010366:	bf18      	it	ne
 8010368:	6443      	strne	r3, [r0, #68]	; 0x44
 801036a:	4668      	mov	r0, sp
 801036c:	f00d fb78 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010370:	4620      	mov	r0, r4
 8010372:	f005 ffed 	bl	8016350 <WM_InvalidateWindow>
 8010376:	e7ea      	b.n	801034e <TEXT_SetText+0x3a>

08010378 <TEXT_SetTextAlign>:
 8010378:	b530      	push	{r4, r5, lr}
 801037a:	4604      	mov	r4, r0
 801037c:	b083      	sub	sp, #12
 801037e:	460d      	mov	r5, r1
 8010380:	b188      	cbz	r0, 80103a6 <TEXT_SetTextAlign+0x2e>
 8010382:	f00a ffdb 	bl	801b33c <GUI_Lock>
 8010386:	4620      	mov	r0, r4
 8010388:	f00d fb58 	bl	801da3c <GUI_ALLOC_LockH>
 801038c:	ab02      	add	r3, sp, #8
 801038e:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
 8010392:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010396:	4618      	mov	r0, r3
 8010398:	f00d fb62 	bl	801da60 <GUI_ALLOC_UnlockH>
 801039c:	4620      	mov	r0, r4
 801039e:	f005 ffd7 	bl	8016350 <WM_InvalidateWindow>
 80103a2:	f00a ffc1 	bl	801b328 <GUI_Unlock>
 80103a6:	b003      	add	sp, #12
 80103a8:	bd30      	pop	{r4, r5, pc}
 80103aa:	bf00      	nop

080103ac <TEXT_SetTextColor>:
 80103ac:	b530      	push	{r4, r5, lr}
 80103ae:	4604      	mov	r4, r0
 80103b0:	b083      	sub	sp, #12
 80103b2:	460d      	mov	r5, r1
 80103b4:	b908      	cbnz	r0, 80103ba <TEXT_SetTextColor+0xe>
 80103b6:	b003      	add	sp, #12
 80103b8:	bd30      	pop	{r4, r5, pc}
 80103ba:	f00a ffbf 	bl	801b33c <GUI_Lock>
 80103be:	4620      	mov	r0, r4
 80103c0:	f00d fb3c 	bl	801da3c <GUI_ALLOC_LockH>
 80103c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80103c6:	9001      	str	r0, [sp, #4]
 80103c8:	42ab      	cmp	r3, r5
 80103ca:	d003      	beq.n	80103d4 <TEXT_SetTextColor+0x28>
 80103cc:	6385      	str	r5, [r0, #56]	; 0x38
 80103ce:	4620      	mov	r0, r4
 80103d0:	f005 ffbe 	bl	8016350 <WM_InvalidateWindow>
 80103d4:	a801      	add	r0, sp, #4
 80103d6:	f00d fb43 	bl	801da60 <GUI_ALLOC_UnlockH>
 80103da:	f00a ffa5 	bl	801b328 <GUI_Unlock>
 80103de:	b003      	add	sp, #12
 80103e0:	bd30      	pop	{r4, r5, pc}
 80103e2:	bf00      	nop

080103e4 <SPINBOX__DrawBk>:
 80103e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103e8:	b089      	sub	sp, #36	; 0x24
 80103ea:	460e      	mov	r6, r1
 80103ec:	4680      	mov	r8, r0
 80103ee:	f00d fb25 	bl	801da3c <GUI_ALLOC_LockH>
 80103f2:	4603      	mov	r3, r0
 80103f4:	a808      	add	r0, sp, #32
 80103f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80103f8:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80103fc:	f840 3d1c 	str.w	r3, [r0, #-28]!
 8010400:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 8010404:	f8b3 708a 	ldrh.w	r7, [r3, #138]	; 0x8a
 8010408:	6824      	ldr	r4, [r4, #0]
 801040a:	f00d fb29 	bl	801da60 <GUI_ALLOC_UnlockH>
 801040e:	4648      	mov	r0, r9
 8010410:	a902      	add	r1, sp, #8
 8010412:	f004 f845 	bl	80144a0 <WM_GetWindowRectEx>
 8010416:	a906      	add	r1, sp, #24
 8010418:	4640      	mov	r0, r8
 801041a:	f004 f841 	bl	80144a0 <WM_GetWindowRectEx>
 801041e:	4630      	mov	r0, r6
 8010420:	f00c fa28 	bl	801c874 <GUI_SetColor>
 8010424:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010428:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801042c:	b2a3      	uxth	r3, r4
 801042e:	441a      	add	r2, r3
 8010430:	1a52      	subs	r2, r2, r1
 8010432:	b292      	uxth	r2, r2
 8010434:	2d01      	cmp	r5, #1
 8010436:	f8ad 3010 	strh.w	r3, [sp, #16]
 801043a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801043e:	d031      	beq.n	80104a4 <SPINBOX__DrawBk+0xc0>
 8010440:	2d02      	cmp	r5, #2
 8010442:	d026      	beq.n	8010492 <SPINBOX__DrawBk+0xae>
 8010444:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010448:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801044c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010450:	3901      	subs	r1, #1
 8010452:	1a89      	subs	r1, r1, r2
 8010454:	b289      	uxth	r1, r1
 8010456:	b21b      	sxth	r3, r3
 8010458:	b208      	sxth	r0, r1
 801045a:	4283      	cmp	r3, r0
 801045c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010460:	dd28      	ble.n	80104b4 <SPINBOX__DrawBk+0xd0>
 8010462:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8010466:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801046a:	3101      	adds	r1, #1
 801046c:	1a9b      	subs	r3, r3, r2
 801046e:	1b1c      	subs	r4, r3, r4
 8010470:	1a8a      	subs	r2, r1, r2
 8010472:	b292      	uxth	r2, r2
 8010474:	b2a4      	uxth	r4, r4
 8010476:	b211      	sxth	r1, r2
 8010478:	b223      	sxth	r3, r4
 801047a:	4299      	cmp	r1, r3
 801047c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010480:	f8ad 4016 	strh.w	r4, [sp, #22]
 8010484:	dc02      	bgt.n	801048c <SPINBOX__DrawBk+0xa8>
 8010486:	a804      	add	r0, sp, #16
 8010488:	f00b f972 	bl	801b770 <GUI_FillRectEx>
 801048c:	b009      	add	sp, #36	; 0x24
 801048e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010492:	3701      	adds	r7, #1
 8010494:	b2bf      	uxth	r7, r7
 8010496:	443a      	add	r2, r7
 8010498:	441f      	add	r7, r3
 801049a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801049e:	f8ad 7010 	strh.w	r7, [sp, #16]
 80104a2:	e7cf      	b.n	8010444 <SPINBOX__DrawBk+0x60>
 80104a4:	1c79      	adds	r1, r7, #1
 80104a6:	440a      	add	r2, r1
 80104a8:	441f      	add	r7, r3
 80104aa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80104ae:	f8ad 7010 	strh.w	r7, [sp, #16]
 80104b2:	e7c7      	b.n	8010444 <SPINBOX__DrawBk+0x60>
 80104b4:	a804      	add	r0, sp, #16
 80104b6:	f00b f95b 	bl	801b770 <GUI_FillRectEx>
 80104ba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80104be:	e7d0      	b.n	8010462 <SPINBOX__DrawBk+0x7e>

080104c0 <SPINBOX__GetButtonRect>:
 80104c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c4:	b082      	sub	sp, #8
 80104c6:	460c      	mov	r4, r1
 80104c8:	4691      	mov	r9, r2
 80104ca:	f00d fab7 	bl	801da3c <GUI_ALLOC_LockH>
 80104ce:	4603      	mov	r3, r0
 80104d0:	a802      	add	r0, sp, #8
 80104d2:	885e      	ldrh	r6, [r3, #2]
 80104d4:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80104d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80104da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80104de:	f9b3 7000 	ldrsh.w	r7, [r3]
 80104e2:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 80104e6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80104ea:	ebc6 060e 	rsb	r6, r6, lr
 80104ee:	f8d1 8000 	ldr.w	r8, [r1]
 80104f2:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 80104f6:	1bd7      	subs	r7, r2, r7
 80104f8:	f00d fab2 	bl	801da60 <GUI_ALLOC_UnlockH>
 80104fc:	2d01      	cmp	r5, #1
 80104fe:	b2b6      	uxth	r6, r6
 8010500:	d02f      	beq.n	8010562 <SPINBOX__GetButtonRect+0xa2>
 8010502:	d318      	bcc.n	8010536 <SPINBOX__GetButtonRect+0x76>
 8010504:	2d02      	cmp	r5, #2
 8010506:	d113      	bne.n	8010530 <SPINBOX__GetButtonRect+0x70>
 8010508:	fa1f f888 	uxth.w	r8, r8
 801050c:	ebc8 0606 	rsb	r6, r8, r6
 8010510:	80e6      	strh	r6, [r4, #6]
 8010512:	f8a4 8002 	strh.w	r8, [r4, #2]
 8010516:	f1b9 0f00 	cmp.w	r9, #0
 801051a:	d133      	bne.n	8010584 <SPINBOX__GetButtonRect+0xc4>
 801051c:	b2bf      	uxth	r7, r7
 801051e:	ebca 0a07 	rsb	sl, sl, r7
 8010522:	ebc8 0a0a 	rsb	sl, r8, sl
 8010526:	ebc8 0707 	rsb	r7, r8, r7
 801052a:	f8a4 a000 	strh.w	sl, [r4]
 801052e:	80a7      	strh	r7, [r4, #4]
 8010530:	b002      	add	sp, #8
 8010532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010536:	b2bf      	uxth	r7, r7
 8010538:	ebca 0a07 	rsb	sl, sl, r7
 801053c:	fa1f f388 	uxth.w	r3, r8
 8010540:	ebc3 0a0a 	rsb	sl, r3, sl
 8010544:	1aff      	subs	r7, r7, r3
 8010546:	f8a4 a000 	strh.w	sl, [r4]
 801054a:	80a7      	strh	r7, [r4, #4]
 801054c:	f1b9 0f00 	cmp.w	r9, #0
 8010550:	d011      	beq.n	8010576 <SPINBOX__GetButtonRect+0xb6>
 8010552:	0872      	lsrs	r2, r6, #1
 8010554:	1af6      	subs	r6, r6, r3
 8010556:	1c53      	adds	r3, r2, #1
 8010558:	8063      	strh	r3, [r4, #2]
 801055a:	80e6      	strh	r6, [r4, #6]
 801055c:	b002      	add	sp, #8
 801055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010562:	fa1f f888 	uxth.w	r8, r8
 8010566:	44c2      	add	sl, r8
 8010568:	f8a4 a004 	strh.w	sl, [r4, #4]
 801056c:	f8a4 8000 	strh.w	r8, [r4]
 8010570:	f1b9 0f00 	cmp.w	r9, #0
 8010574:	d10e      	bne.n	8010594 <SPINBOX__GetButtonRect+0xd4>
 8010576:	0876      	lsrs	r6, r6, #1
 8010578:	80e6      	strh	r6, [r4, #6]
 801057a:	f8a4 8002 	strh.w	r8, [r4, #2]
 801057e:	b002      	add	sp, #8
 8010580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010584:	44c2      	add	sl, r8
 8010586:	f8a4 a004 	strh.w	sl, [r4, #4]
 801058a:	f8a4 8000 	strh.w	r8, [r4]
 801058e:	b002      	add	sp, #8
 8010590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010594:	0873      	lsrs	r3, r6, #1
 8010596:	ebc8 0806 	rsb	r8, r8, r6
 801059a:	3301      	adds	r3, #1
 801059c:	8063      	strh	r3, [r4, #2]
 801059e:	f8a4 8006 	strh.w	r8, [r4, #6]
 80105a2:	b002      	add	sp, #8
 80105a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080105a8 <SPINBOX_Callback>:
 80105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	6844      	ldr	r4, [r0, #4]
 80105ae:	b093      	sub	sp, #76	; 0x4c
 80105b0:	4605      	mov	r5, r0
 80105b2:	4620      	mov	r0, r4
 80105b4:	f00d fa42 	bl	801da3c <GUI_ALLOC_LockH>
 80105b8:	ae12      	add	r6, sp, #72	; 0x48
 80105ba:	4603      	mov	r3, r0
 80105bc:	f846 0d24 	str.w	r0, [r6, #-36]!
 80105c0:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 80105c4:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 80105c8:	4630      	mov	r0, r6
 80105ca:	f00d fa49 	bl	801da60 <GUI_ALLOC_UnlockH>
 80105ce:	682b      	ldr	r3, [r5, #0]
 80105d0:	2b0d      	cmp	r3, #13
 80105d2:	f000 80c3 	beq.w	801075c <SPINBOX_Callback+0x1b4>
 80105d6:	2b1e      	cmp	r3, #30
 80105d8:	f000 80e6 	beq.w	80107a8 <SPINBOX_Callback+0x200>
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7fd fbfe 	bl	800dde0 <WIDGET_HandleActive>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	f000 80b6 	beq.w	8010756 <SPINBOX_Callback+0x1ae>
 80105ea:	682b      	ldr	r3, [r5, #0]
 80105ec:	2b11      	cmp	r3, #17
 80105ee:	f000 8108 	beq.w	8010802 <SPINBOX_Callback+0x25a>
 80105f2:	f340 80cd 	ble.w	8010790 <SPINBOX_Callback+0x1e8>
 80105f6:	2b28      	cmp	r3, #40	; 0x28
 80105f8:	f000 822b 	beq.w	8010a52 <SPINBOX_Callback+0x4aa>
 80105fc:	f340 80e3 	ble.w	80107c6 <SPINBOX_Callback+0x21e>
 8010600:	f240 1213 	movw	r2, #275	; 0x113
 8010604:	4293      	cmp	r3, r2
 8010606:	f000 81d4 	beq.w	80109b2 <SPINBOX_Callback+0x40a>
 801060a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801060e:	f040 80c7 	bne.w	80107a0 <SPINBOX_Callback+0x1f8>
 8010612:	68eb      	ldr	r3, [r5, #12]
 8010614:	4620      	mov	r0, r4
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 83be 	beq.w	8010d98 <SPINBOX_Callback+0x7f0>
 801061c:	f00d fa0e 	bl	801da3c <GUI_ALLOC_LockH>
 8010620:	900b      	str	r0, [sp, #44]	; 0x2c
 8010622:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8010626:	f003 ff6b 	bl	8014500 <WM_IsFocusable>
 801062a:	2800      	cmp	r0, #0
 801062c:	f040 8332 	bne.w	8010c94 <SPINBOX_Callback+0x6ec>
 8010630:	4620      	mov	r0, r4
 8010632:	f004 f811 	bl	8014658 <WM_SetFocus>
 8010636:	68ee      	ldr	r6, [r5, #12]
 8010638:	4620      	mov	r0, r4
 801063a:	6871      	ldr	r1, [r6, #4]
 801063c:	9103      	str	r1, [sp, #12]
 801063e:	6837      	ldr	r7, [r6, #0]
 8010640:	f00d f9fc 	bl	801da3c <GUI_ALLOC_LockH>
 8010644:	ad12      	add	r5, sp, #72	; 0x48
 8010646:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 801064a:	f845 0d10 	str.w	r0, [r5, #-16]!
 801064e:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8010652:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010654:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 8010658:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 801065c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010660:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 8010664:	9002      	str	r0, [sp, #8]
 8010666:	4628      	mov	r0, r5
 8010668:	ebce 0909 	rsb	r9, lr, r9
 801066c:	f8d2 8000 	ldr.w	r8, [r2]
 8010670:	ebc1 0b0b 	rsb	fp, r1, fp
 8010674:	f00d f9f4 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010678:	f1ba 0f01 	cmp.w	sl, #1
 801067c:	fa1f f989 	uxth.w	r9, r9
 8010680:	f000 836c 	beq.w	8010d5c <SPINBOX_Callback+0x7b4>
 8010684:	f0c0 8356 	bcc.w	8010d34 <SPINBOX_Callback+0x78c>
 8010688:	f1ba 0f02 	cmp.w	sl, #2
 801068c:	f040 834b 	bne.w	8010d26 <SPINBOX_Callback+0x77e>
 8010690:	9a02      	ldr	r2, [sp, #8]
 8010692:	fa1f f888 	uxth.w	r8, r8
 8010696:	fa1f fb8b 	uxth.w	fp, fp
 801069a:	ebc2 0a0b 	rsb	sl, r2, fp
 801069e:	ebc8 0909 	rsb	r9, r8, r9
 80106a2:	ebc8 0a0a 	rsb	sl, r8, sl
 80106a6:	ebc8 020b 	rsb	r2, r8, fp
 80106aa:	fa1f f989 	uxth.w	r9, r9
 80106ae:	fa0f fa8a 	sxth.w	sl, sl
 80106b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80106b6:	b292      	uxth	r2, r2
 80106b8:	4557      	cmp	r7, sl
 80106ba:	f2c0 821b 	blt.w	8010af4 <SPINBOX_Callback+0x54c>
 80106be:	b213      	sxth	r3, r2
 80106c0:	429f      	cmp	r7, r3
 80106c2:	f300 8217 	bgt.w	8010af4 <SPINBOX_Callback+0x54c>
 80106c6:	9903      	ldr	r1, [sp, #12]
 80106c8:	fa0f f388 	sxth.w	r3, r8
 80106cc:	4299      	cmp	r1, r3
 80106ce:	f2c0 8211 	blt.w	8010af4 <SPINBOX_Callback+0x54c>
 80106d2:	9902      	ldr	r1, [sp, #8]
 80106d4:	b20b      	sxth	r3, r1
 80106d6:	9903      	ldr	r1, [sp, #12]
 80106d8:	4299      	cmp	r1, r3
 80106da:	f300 820b 	bgt.w	8010af4 <SPINBOX_Callback+0x54c>
 80106de:	2700      	movs	r7, #0
 80106e0:	7a33      	ldrb	r3, [r6, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f000 8242 	beq.w	8010b6c <SPINBOX_Callback+0x5c4>
 80106e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106ea:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 80106ee:	42b7      	cmp	r7, r6
 80106f0:	b272      	sxtb	r2, r6
 80106f2:	d02b      	beq.n	801074c <SPINBOX_Callback+0x1a4>
 80106f4:	f04f 0801 	mov.w	r8, #1
 80106f8:	3201      	adds	r2, #1
 80106fa:	f883 80a2 	strb.w	r8, [r3, #162]	; 0xa2
 80106fe:	d025      	beq.n	801074c <SPINBOX_Callback+0x1a4>
 8010700:	4620      	mov	r0, r4
 8010702:	f00d f99b 	bl	801da3c <GUI_ALLOC_LockH>
 8010706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010708:	900c      	str	r0, [sp, #48]	; 0x30
 801070a:	079a      	lsls	r2, r3, #30
 801070c:	d51a      	bpl.n	8010744 <SPINBOX_Callback+0x19c>
 801070e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8010712:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8010716:	b2f6      	uxtb	r6, r6
 8010718:	fa08 f806 	lsl.w	r8, r8, r6
 801071c:	ea22 0208 	bic.w	r2, r2, r8
 8010720:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8010724:	2b00      	cmp	r3, #0
 8010726:	f040 823e 	bne.w	8010ba6 <SPINBOX_Callback+0x5fe>
 801072a:	4620      	mov	r0, r4
 801072c:	2102      	movs	r1, #2
 801072e:	f003 ff13 	bl	8014558 <WM_NotifyParent>
 8010732:	4620      	mov	r0, r4
 8010734:	4629      	mov	r1, r5
 8010736:	4632      	mov	r2, r6
 8010738:	f7ff fec2 	bl	80104c0 <SPINBOX__GetButtonRect>
 801073c:	4620      	mov	r0, r4
 801073e:	4629      	mov	r1, r5
 8010740:	f005 fd40 	bl	80161c4 <WM_InvalidateRect>
 8010744:	a80c      	add	r0, sp, #48	; 0x30
 8010746:	f00d f98b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801074a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801074c:	f883 70a1 	strb.w	r7, [r3, #161]	; 0xa1
 8010750:	a80b      	add	r0, sp, #44	; 0x2c
 8010752:	f00d f985 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010756:	b013      	add	sp, #76	; 0x4c
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	68eb      	ldr	r3, [r5, #12]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0f8      	beq.n	8010756 <SPINBOX_Callback+0x1ae>
 8010764:	7a1b      	ldrb	r3, [r3, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d0f5      	beq.n	8010756 <SPINBOX_Callback+0x1ae>
 801076a:	4638      	mov	r0, r7
 801076c:	f003 fec8 	bl	8014500 <WM_IsFocusable>
 8010770:	2800      	cmp	r0, #0
 8010772:	d1f0      	bne.n	8010756 <SPINBOX_Callback+0x1ae>
 8010774:	4620      	mov	r0, r4
 8010776:	f003 fec3 	bl	8014500 <WM_IsFocusable>
 801077a:	2800      	cmp	r0, #0
 801077c:	d0eb      	beq.n	8010756 <SPINBOX_Callback+0x1ae>
 801077e:	4620      	mov	r0, r4
 8010780:	f003 feb0 	bl	80144e4 <WM_HasFocus>
 8010784:	2800      	cmp	r0, #0
 8010786:	d1e6      	bne.n	8010756 <SPINBOX_Callback+0x1ae>
 8010788:	4620      	mov	r0, r4
 801078a:	f003 ff65 	bl	8014658 <WM_SetFocus>
 801078e:	e7e2      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010790:	2b0e      	cmp	r3, #14
 8010792:	f000 80cf 	beq.w	8010934 <SPINBOX_Callback+0x38c>
 8010796:	2b0f      	cmp	r3, #15
 8010798:	f000 80e4 	beq.w	8010964 <SPINBOX_Callback+0x3bc>
 801079c:	2b0b      	cmp	r3, #11
 801079e:	d020      	beq.n	80107e2 <SPINBOX_Callback+0x23a>
 80107a0:	4628      	mov	r0, r5
 80107a2:	f006 fb3b 	bl	8016e1c <WM_DefaultProc>
 80107a6:	e7d6      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 80107a8:	4638      	mov	r0, r7
 80107aa:	f003 fea9 	bl	8014500 <WM_IsFocusable>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	f43f af14 	beq.w	80105dc <SPINBOX_Callback+0x34>
 80107b4:	68eb      	ldr	r3, [r5, #12]
 80107b6:	4638      	mov	r0, r7
 80107b8:	2101      	movs	r1, #1
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 81fe 	beq.w	8010bbc <SPINBOX_Callback+0x614>
 80107c0:	f7fd faa2 	bl	800dd08 <WIDGET_OrState>
 80107c4:	e70a      	b.n	80105dc <SPINBOX_Callback+0x34>
 80107c6:	2b26      	cmp	r3, #38	; 0x26
 80107c8:	d1ea      	bne.n	80107a0 <SPINBOX_Callback+0x1f8>
 80107ca:	68e9      	ldr	r1, [r5, #12]
 80107cc:	2905      	cmp	r1, #5
 80107ce:	f000 8275 	beq.w	8010cbc <SPINBOX_Callback+0x714>
 80107d2:	dbc0      	blt.n	8010756 <SPINBOX_Callback+0x1ae>
 80107d4:	3908      	subs	r1, #8
 80107d6:	2901      	cmp	r1, #1
 80107d8:	d8bd      	bhi.n	8010756 <SPINBOX_Callback+0x1ae>
 80107da:	4620      	mov	r0, r4
 80107dc:	f005 fdb8 	bl	8016350 <WM_InvalidateWindow>
 80107e0:	e7b9      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 80107e2:	4620      	mov	r0, r4
 80107e4:	f00d f92a 	bl	801da3c <GUI_ALLOC_LockH>
 80107e8:	9009      	str	r0, [sp, #36]	; 0x24
 80107ea:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f040 8268 	bne.w	8010cc4 <SPINBOX_Callback+0x71c>
 80107f4:	4630      	mov	r0, r6
 80107f6:	f00d f933 	bl	801da60 <GUI_ALLOC_UnlockH>
 80107fa:	4628      	mov	r0, r5
 80107fc:	f006 fb0e 	bl	8016e1c <WM_DefaultProc>
 8010800:	e7a9      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010802:	4620      	mov	r0, r4
 8010804:	f00d f91a 	bl	801da3c <GUI_ALLOC_LockH>
 8010808:	68ee      	ldr	r6, [r5, #12]
 801080a:	900a      	str	r0, [sp, #40]	; 0x28
 801080c:	6871      	ldr	r1, [r6, #4]
 801080e:	9103      	str	r1, [sp, #12]
 8010810:	4620      	mov	r0, r4
 8010812:	f8d6 8000 	ldr.w	r8, [r6]
 8010816:	f00d f911 	bl	801da3c <GUI_ALLOC_LockH>
 801081a:	ad12      	add	r5, sp, #72	; 0x48
 801081c:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 8010820:	f845 0d10 	str.w	r0, [r5, #-16]!
 8010824:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8010828:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801082a:	f890 708c 	ldrb.w	r7, [r0, #140]	; 0x8c
 801082e:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 8010832:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010836:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 801083a:	9002      	str	r0, [sp, #8]
 801083c:	4628      	mov	r0, r5
 801083e:	ebce 0a0a 	rsb	sl, lr, sl
 8010842:	f8d3 9000 	ldr.w	r9, [r3]
 8010846:	ebc1 0b0b 	rsb	fp, r1, fp
 801084a:	f00d f909 	bl	801da60 <GUI_ALLOC_UnlockH>
 801084e:	2f01      	cmp	r7, #1
 8010850:	fa1f fa8a 	uxth.w	sl, sl
 8010854:	f000 825b 	beq.w	8010d0e <SPINBOX_Callback+0x766>
 8010858:	f0c0 8246 	bcc.w	8010ce8 <SPINBOX_Callback+0x740>
 801085c:	2f02      	cmp	r7, #2
 801085e:	f040 823e 	bne.w	8010cde <SPINBOX_Callback+0x736>
 8010862:	9a02      	ldr	r2, [sp, #8]
 8010864:	fa1f f389 	uxth.w	r3, r9
 8010868:	fa1f fb8b 	uxth.w	fp, fp
 801086c:	ebc2 070b 	rsb	r7, r2, fp
 8010870:	ebc3 0a0a 	rsb	sl, r3, sl
 8010874:	1aff      	subs	r7, r7, r3
 8010876:	ebc3 010b 	rsb	r1, r3, fp
 801087a:	fa1f fa8a 	uxth.w	sl, sl
 801087e:	b23f      	sxth	r7, r7
 8010880:	f8cd a010 	str.w	sl, [sp, #16]
 8010884:	fa1f f981 	uxth.w	r9, r1
 8010888:	45b8      	cmp	r8, r7
 801088a:	f2c0 80e7 	blt.w	8010a5c <SPINBOX_Callback+0x4b4>
 801088e:	fa0f f289 	sxth.w	r2, r9
 8010892:	4590      	cmp	r8, r2
 8010894:	f300 80e2 	bgt.w	8010a5c <SPINBOX_Callback+0x4b4>
 8010898:	9903      	ldr	r1, [sp, #12]
 801089a:	b21a      	sxth	r2, r3
 801089c:	4291      	cmp	r1, r2
 801089e:	f2c0 80dd 	blt.w	8010a5c <SPINBOX_Callback+0x4b4>
 80108a2:	9904      	ldr	r1, [sp, #16]
 80108a4:	b20a      	sxth	r2, r1
 80108a6:	9903      	ldr	r1, [sp, #12]
 80108a8:	4291      	cmp	r1, r2
 80108aa:	f300 80d7 	bgt.w	8010a5c <SPINBOX_Callback+0x4b4>
 80108ae:	f04f 0900 	mov.w	r9, #0
 80108b2:	46c8      	mov	r8, r9
 80108b4:	f04f 0a01 	mov.w	sl, #1
 80108b8:	4620      	mov	r0, r4
 80108ba:	2101      	movs	r1, #1
 80108bc:	f002 fe4e 	bl	801355c <WM_SetCapture>
 80108c0:	7a37      	ldrb	r7, [r6, #8]
 80108c2:	2f01      	cmp	r7, #1
 80108c4:	f000 817d 	beq.w	8010bc2 <SPINBOX_Callback+0x61a>
 80108c8:	2f80      	cmp	r7, #128	; 0x80
 80108ca:	f000 817a 	beq.w	8010bc2 <SPINBOX_Callback+0x61a>
 80108ce:	bb57      	cbnz	r7, 8010926 <SPINBOX_Callback+0x37e>
 80108d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108d2:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 80108d6:	b272      	sxtb	r2, r6
 80108d8:	3201      	adds	r2, #1
 80108da:	d025      	beq.n	8010928 <SPINBOX_Callback+0x380>
 80108dc:	4620      	mov	r0, r4
 80108de:	f00d f8ad 	bl	801da3c <GUI_ALLOC_LockH>
 80108e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80108e4:	900c      	str	r0, [sp, #48]	; 0x30
 80108e6:	079b      	lsls	r3, r3, #30
 80108e8:	d51a      	bpl.n	8010920 <SPINBOX_Callback+0x378>
 80108ea:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 80108ee:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80108f2:	b2f6      	uxtb	r6, r6
 80108f4:	2101      	movs	r1, #1
 80108f6:	40b1      	lsls	r1, r6
 80108f8:	ea22 0201 	bic.w	r2, r2, r1
 80108fc:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8010900:	2b00      	cmp	r3, #0
 8010902:	f040 82f7 	bne.w	8010ef4 <SPINBOX_Callback+0x94c>
 8010906:	4620      	mov	r0, r4
 8010908:	2102      	movs	r1, #2
 801090a:	f003 fe25 	bl	8014558 <WM_NotifyParent>
 801090e:	4620      	mov	r0, r4
 8010910:	4629      	mov	r1, r5
 8010912:	4632      	mov	r2, r6
 8010914:	f7ff fdd4 	bl	80104c0 <SPINBOX__GetButtonRect>
 8010918:	4620      	mov	r0, r4
 801091a:	4629      	mov	r1, r5
 801091c:	f005 fc52 	bl	80161c4 <WM_InvalidateRect>
 8010920:	a80c      	add	r0, sp, #48	; 0x30
 8010922:	f00d f89d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010928:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 801092c:	a80a      	add	r0, sp, #40	; 0x28
 801092e:	f00d f897 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010932:	e710      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010934:	68ec      	ldr	r4, [r5, #12]
 8010936:	6863      	ldr	r3, [r4, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	f43f af31 	beq.w	80107a0 <SPINBOX_Callback+0x1f8>
 801093e:	4638      	mov	r0, r7
 8010940:	f003 fdde 	bl	8014500 <WM_IsFocusable>
 8010944:	2800      	cmp	r0, #0
 8010946:	f000 8288 	beq.w	8010e5a <SPINBOX_Callback+0x8b2>
 801094a:	68ab      	ldr	r3, [r5, #8]
 801094c:	42bb      	cmp	r3, r7
 801094e:	f040 8259 	bne.w	8010e04 <SPINBOX_Callback+0x85c>
 8010952:	6823      	ldr	r3, [r4, #0]
 8010954:	3b09      	subs	r3, #9
 8010956:	2b01      	cmp	r3, #1
 8010958:	f63f af22 	bhi.w	80107a0 <SPINBOX_Callback+0x1f8>
 801095c:	6868      	ldr	r0, [r5, #4]
 801095e:	f003 fe7b 	bl	8014658 <WM_SetFocus>
 8010962:	e71d      	b.n	80107a0 <SPINBOX_Callback+0x1f8>
 8010964:	4620      	mov	r0, r4
 8010966:	f00d f869 	bl	801da3c <GUI_ALLOC_LockH>
 801096a:	4603      	mov	r3, r0
 801096c:	4630      	mov	r0, r6
 801096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010970:	9309      	str	r3, [sp, #36]	; 0x24
 8010972:	6815      	ldr	r5, [r2, #0]
 8010974:	f00d f874 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010978:	4620      	mov	r0, r4
 801097a:	f004 f8d3 	bl	8014b24 <WM_GetWindowSizeY>
 801097e:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8010982:	2800      	cmp	r0, #0
 8010984:	4638      	mov	r0, r7
 8010986:	f340 81a7 	ble.w	8010cd8 <SPINBOX_Callback+0x730>
 801098a:	f004 f84b 	bl	8014a24 <WM_ShowWindow>
 801098e:	4620      	mov	r0, r4
 8010990:	f00d f854 	bl	801da3c <GUI_ALLOC_LockH>
 8010994:	ab12      	add	r3, sp, #72	; 0x48
 8010996:	f843 0d10 	str.w	r0, [r3, #-16]!
 801099a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 801099e:	6815      	ldr	r5, [r2, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f00d f85d 	bl	801da60 <GUI_ALLOC_UnlockH>
 80109a6:	2d00      	cmp	r5, #0
 80109a8:	f43f aed5 	beq.w	8010756 <SPINBOX_Callback+0x1ae>
 80109ac:	4620      	mov	r0, r4
 80109ae:	47a8      	blx	r5
 80109b0:	e6d1      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 80109b2:	4620      	mov	r0, r4
 80109b4:	f00d f842 	bl	801da3c <GUI_ALLOC_LockH>
 80109b8:	4602      	mov	r2, r0
 80109ba:	a812      	add	r0, sp, #72	; 0x48
 80109bc:	f840 2d20 	str.w	r2, [r0, #-32]!
 80109c0:	f892 50a0 	ldrb.w	r5, [r2, #160]	; 0xa0
 80109c4:	f00d f84c 	bl	801da60 <GUI_ALLOC_UnlockH>
 80109c8:	4620      	mov	r0, r4
 80109ca:	f00d f837 	bl	801da3c <GUI_ALLOC_LockH>
 80109ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80109d0:	f990 60a2 	ldrsb.w	r6, [r0, #162]	; 0xa2
 80109d4:	4603      	mov	r3, r0
 80109d6:	2e00      	cmp	r6, #0
 80109d8:	f040 8162 	bne.w	8010ca0 <SPINBOX_Callback+0x6f8>
 80109dc:	a80b      	add	r0, sp, #44	; 0x2c
 80109de:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 80109e2:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 80109e6:	f00d f83b 	bl	801da60 <GUI_ALLOC_UnlockH>
 80109ea:	b26b      	sxtb	r3, r5
 80109ec:	3301      	adds	r3, #1
 80109ee:	f000 814f 	beq.w	8010c90 <SPINBOX_Callback+0x6e8>
 80109f2:	4638      	mov	r0, r7
 80109f4:	f003 fd84 	bl	8014500 <WM_IsFocusable>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	f000 813e 	beq.w	8010c7a <SPINBOX_Callback+0x6d2>
 80109fe:	2d00      	cmp	r5, #0
 8010a00:	ad0e      	add	r5, sp, #56	; 0x38
 8010a02:	bf14      	ite	ne
 8010a04:	f04f 0c13 	movne.w	ip, #19
 8010a08:	f04f 0c11 	moveq.w	ip, #17
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	f04f 0e0e 	mov.w	lr, #14
 8010a12:	aa0c      	add	r2, sp, #48	; 0x30
 8010a14:	2301      	movs	r3, #1
 8010a16:	4638      	mov	r0, r7
 8010a18:	9410      	str	r4, [sp, #64]	; 0x40
 8010a1a:	970f      	str	r7, [sp, #60]	; 0x3c
 8010a1c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8010a20:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8010a24:	9211      	str	r2, [sp, #68]	; 0x44
 8010a26:	930d      	str	r3, [sp, #52]	; 0x34
 8010a28:	f005 fba0 	bl	801616c <WM_SendMessage>
 8010a2c:	4638      	mov	r0, r7
 8010a2e:	4629      	mov	r1, r5
 8010a30:	960d      	str	r6, [sp, #52]	; 0x34
 8010a32:	f005 fb9b 	bl	801616c <WM_SendMessage>
 8010a36:	4620      	mov	r0, r4
 8010a38:	f00d f800 	bl	801da3c <GUI_ALLOC_LockH>
 8010a3c:	2132      	movs	r1, #50	; 0x32
 8010a3e:	4603      	mov	r3, r0
 8010a40:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8010a44:	930e      	str	r3, [sp, #56]	; 0x38
 8010a46:	f002 fc4b 	bl	80132e0 <WM_RestartTimer>
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f00d f808 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010a50:	e681      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010a52:	4638      	mov	r0, r7
 8010a54:	68e9      	ldr	r1, [r5, #12]
 8010a56:	f003 f953 	bl	8013d00 <WM_SetEnableState>
 8010a5a:	e67c      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	f00c ffec 	bl	801da3c <GUI_ALLOC_LockH>
 8010a64:	900e      	str	r0, [sp, #56]	; 0x38
 8010a66:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010a68:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8010a6c:	6809      	ldr	r1, [r1, #0]
 8010a6e:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8010a72:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 8010a76:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8010a7a:	9102      	str	r1, [sp, #8]
 8010a7c:	8881      	ldrh	r1, [r0, #4]
 8010a7e:	8800      	ldrh	r0, [r0, #0]
 8010a80:	9007      	str	r0, [sp, #28]
 8010a82:	4628      	mov	r0, r5
 8010a84:	ebce 0b0b 	rsb	fp, lr, fp
 8010a88:	9205      	str	r2, [sp, #20]
 8010a8a:	9106      	str	r1, [sp, #24]
 8010a8c:	f00c ffe8 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010a90:	f1ba 0f01 	cmp.w	sl, #1
 8010a94:	fa1f fb8b 	uxth.w	fp, fp
 8010a98:	9b00      	ldr	r3, [sp, #0]
 8010a9a:	f000 81ce 	beq.w	8010e3a <SPINBOX_Callback+0x892>
 8010a9e:	f0c0 81b6 	bcc.w	8010e0e <SPINBOX_Callback+0x866>
 8010aa2:	f1ba 0f02 	cmp.w	sl, #2
 8010aa6:	d10c      	bne.n	8010ac2 <SPINBOX_Callback+0x51a>
 8010aa8:	9902      	ldr	r1, [sp, #8]
 8010aaa:	b28b      	uxth	r3, r1
 8010aac:	9905      	ldr	r1, [sp, #20]
 8010aae:	ebc3 0a0b 	rsb	sl, r3, fp
 8010ab2:	4419      	add	r1, r3
 8010ab4:	fa1f fa8a 	uxth.w	sl, sl
 8010ab8:	f8cd a010 	str.w	sl, [sp, #16]
 8010abc:	fa1f f981 	uxth.w	r9, r1
 8010ac0:	b21f      	sxth	r7, r3
 8010ac2:	45b8      	cmp	r8, r7
 8010ac4:	f2c0 80f4 	blt.w	8010cb0 <SPINBOX_Callback+0x708>
 8010ac8:	fa0f f189 	sxth.w	r1, r9
 8010acc:	4588      	cmp	r8, r1
 8010ace:	f300 80ef 	bgt.w	8010cb0 <SPINBOX_Callback+0x708>
 8010ad2:	9a03      	ldr	r2, [sp, #12]
 8010ad4:	b21b      	sxth	r3, r3
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	f2c0 80ea 	blt.w	8010cb0 <SPINBOX_Callback+0x708>
 8010adc:	9b04      	ldr	r3, [sp, #16]
 8010ade:	fa0f fa83 	sxth.w	sl, r3
 8010ae2:	4552      	cmp	r2, sl
 8010ae4:	f300 80e4 	bgt.w	8010cb0 <SPINBOX_Callback+0x708>
 8010ae8:	f04f 0901 	mov.w	r9, #1
 8010aec:	46c8      	mov	r8, r9
 8010aee:	f04f 0a02 	mov.w	sl, #2
 8010af2:	e6e1      	b.n	80108b8 <SPINBOX_Callback+0x310>
 8010af4:	4620      	mov	r0, r4
 8010af6:	9201      	str	r2, [sp, #4]
 8010af8:	f00c ffa0 	bl	801da3c <GUI_ALLOC_LockH>
 8010afc:	900e      	str	r0, [sp, #56]	; 0x38
 8010afe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010b00:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8010b04:	6809      	ldr	r1, [r1, #0]
 8010b06:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8010b0a:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 8010b0e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 8010b12:	9104      	str	r1, [sp, #16]
 8010b14:	8881      	ldrh	r1, [r0, #4]
 8010b16:	8800      	ldrh	r0, [r0, #0]
 8010b18:	9007      	str	r0, [sp, #28]
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	ebce 0b0b 	rsb	fp, lr, fp
 8010b20:	9305      	str	r3, [sp, #20]
 8010b22:	9106      	str	r1, [sp, #24]
 8010b24:	f00c ff9c 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010b28:	f1b9 0f01 	cmp.w	r9, #1
 8010b2c:	fa1f fb8b 	uxth.w	fp, fp
 8010b30:	9a01      	ldr	r2, [sp, #4]
 8010b32:	f000 81ba 	beq.w	8010eaa <SPINBOX_Callback+0x902>
 8010b36:	f0c0 81a0 	bcc.w	8010e7a <SPINBOX_Callback+0x8d2>
 8010b3a:	f1b9 0f02 	cmp.w	r9, #2
 8010b3e:	d10d      	bne.n	8010b5c <SPINBOX_Callback+0x5b4>
 8010b40:	9904      	ldr	r1, [sp, #16]
 8010b42:	9a05      	ldr	r2, [sp, #20]
 8010b44:	fa1f f881 	uxth.w	r8, r1
 8010b48:	ebc8 090b 	rsb	r9, r8, fp
 8010b4c:	4442      	add	r2, r8
 8010b4e:	fa1f f989 	uxth.w	r9, r9
 8010b52:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b56:	b292      	uxth	r2, r2
 8010b58:	fa0f fa88 	sxth.w	sl, r8
 8010b5c:	4557      	cmp	r7, sl
 8010b5e:	f280 8109 	bge.w	8010d74 <SPINBOX_Callback+0x7cc>
 8010b62:	7a33      	ldrb	r3, [r6, #8]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f040 811b 	bne.w	8010da0 <SPINBOX_Callback+0x7f8>
 8010b6a:	27ff      	movs	r7, #255	; 0xff
 8010b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b6e:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 8010b72:	b272      	sxtb	r2, r6
 8010b74:	3201      	adds	r2, #1
 8010b76:	f43f ade9 	beq.w	801074c <SPINBOX_Callback+0x1a4>
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f00c ff5e 	bl	801da3c <GUI_ALLOC_LockH>
 8010b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010b82:	900c      	str	r0, [sp, #48]	; 0x30
 8010b84:	079b      	lsls	r3, r3, #30
 8010b86:	f57f addd 	bpl.w	8010744 <SPINBOX_Callback+0x19c>
 8010b8a:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8010b8e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8010b92:	b2f6      	uxtb	r6, r6
 8010b94:	2101      	movs	r1, #1
 8010b96:	40b1      	lsls	r1, r6
 8010b98:	ea22 0201 	bic.w	r2, r2, r1
 8010b9c:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f43f adc2 	beq.w	801072a <SPINBOX_Callback+0x182>
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f002 fb40 	bl	801322c <WM_DeleteTimer>
 8010bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bae:	2100      	movs	r1, #0
 8010bb0:	22ff      	movs	r2, #255	; 0xff
 8010bb2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8010bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8010bba:	e5b6      	b.n	801072a <SPINBOX_Callback+0x182>
 8010bbc:	f7fd f8c2 	bl	800dd44 <WIDGET_AndState>
 8010bc0:	e50c      	b.n	80105dc <SPINBOX_Callback+0x34>
 8010bc2:	7a73      	ldrb	r3, [r6, #9]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f47f aeae 	bne.w	8010926 <SPINBOX_Callback+0x37e>
 8010bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bcc:	fa4f f688 	sxtb.w	r6, r8
 8010bd0:	1c71      	adds	r1, r6, #1
 8010bd2:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 8010bd6:	f000 8186 	beq.w	8010ee6 <SPINBOX_Callback+0x93e>
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f00c ff2e 	bl	801da3c <GUI_ALLOC_LockH>
 8010be0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010be2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010be4:	079a      	lsls	r2, r3, #30
 8010be6:	f100 819c 	bmi.w	8010f22 <SPINBOX_Callback+0x97a>
 8010bea:	af0b      	add	r7, sp, #44	; 0x2c
 8010bec:	4638      	mov	r0, r7
 8010bee:	f00c ff37 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f00c ff22 	bl	801da3c <GUI_ALLOC_LockH>
 8010bf8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8010bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8010bfe:	4681      	mov	r9, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 8181 	beq.w	8010f08 <SPINBOX_Callback+0x960>
 8010c06:	4628      	mov	r0, r5
 8010c08:	f00c ff2a 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f00c ff15 	bl	801da3c <GUI_ALLOC_LockH>
 8010c12:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c14:	f990 90a2 	ldrsb.w	r9, [r0, #162]	; 0xa2
 8010c18:	4603      	mov	r3, r0
 8010c1a:	f1b9 0f00 	cmp.w	r9, #0
 8010c1e:	f040 815a 	bne.w	8010ed6 <SPINBOX_Callback+0x92e>
 8010c22:	4638      	mov	r0, r7
 8010c24:	f8b3 a088 	ldrh.w	sl, [r3, #136]	; 0x88
 8010c28:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 8010c2c:	f00c ff18 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010c30:	3601      	adds	r6, #1
 8010c32:	f43f ae78 	beq.w	8010926 <SPINBOX_Callback+0x37e>
 8010c36:	4638      	mov	r0, r7
 8010c38:	f003 fc62 	bl	8014500 <WM_IsFocusable>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f000 81b7 	beq.w	8010fb0 <SPINBOX_Callback+0xa08>
 8010c42:	f1b8 0f00 	cmp.w	r8, #0
 8010c46:	bf14      	ite	ne
 8010c48:	f04f 0e13 	movne.w	lr, #19
 8010c4c:	f04f 0e11 	moveq.w	lr, #17
 8010c50:	aa0c      	add	r2, sp, #48	; 0x30
 8010c52:	2301      	movs	r3, #1
 8010c54:	4638      	mov	r0, r7
 8010c56:	4629      	mov	r1, r5
 8010c58:	260e      	movs	r6, #14
 8010c5a:	9410      	str	r4, [sp, #64]	; 0x40
 8010c5c:	970f      	str	r7, [sp, #60]	; 0x3c
 8010c5e:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8010c62:	960e      	str	r6, [sp, #56]	; 0x38
 8010c64:	9211      	str	r2, [sp, #68]	; 0x44
 8010c66:	930d      	str	r3, [sp, #52]	; 0x34
 8010c68:	f005 fa80 	bl	801616c <WM_SendMessage>
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	4629      	mov	r1, r5
 8010c70:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010c74:	f005 fa7a 	bl	801616c <WM_SendMessage>
 8010c78:	e655      	b.n	8010926 <SPINBOX_Callback+0x37e>
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	f040 8125 	bne.w	8010ecc <SPINBOX_Callback+0x924>
 8010c82:	f001 fd21 	bl	80126c8 <EDIT_GetValue>
 8010c86:	eb08 0100 	add.w	r1, r8, r0
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	f001 fd32 	bl	80126f4 <EDIT_SetValue>
 8010c90:	ad0e      	add	r5, sp, #56	; 0x38
 8010c92:	e6d0      	b.n	8010a36 <SPINBOX_Callback+0x48e>
 8010c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c96:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8010c9a:	f003 fcdd 	bl	8014658 <WM_SetFocus>
 8010c9e:	e4ca      	b.n	8010636 <SPINBOX_Callback+0x8e>
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8010ca6:	a80b      	add	r0, sp, #44	; 0x2c
 8010ca8:	f00c feda 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010cac:	ad0e      	add	r5, sp, #56	; 0x38
 8010cae:	e6c2      	b.n	8010a36 <SPINBOX_Callback+0x48e>
 8010cb0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010cb4:	46c8      	mov	r8, r9
 8010cb6:	f04f 0a00 	mov.w	sl, #0
 8010cba:	e5fd      	b.n	80108b8 <SPINBOX_Callback+0x310>
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f003 fc4b 	bl	8014558 <WM_NotifyParent>
 8010cc2:	e548      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010cc4:	f002 fab2 	bl	801322c <WM_DeleteTimer>
 8010cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cca:	2100      	movs	r1, #0
 8010ccc:	22ff      	movs	r2, #255	; 0xff
 8010cce:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8010cd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8010cd6:	e58d      	b.n	80107f4 <SPINBOX_Callback+0x24c>
 8010cd8:	f003 fee4 	bl	8014aa4 <WM_HideWindow>
 8010cdc:	e657      	b.n	801098e <SPINBOX_Callback+0x3e6>
 8010cde:	2700      	movs	r7, #0
 8010ce0:	9704      	str	r7, [sp, #16]
 8010ce2:	46b9      	mov	r9, r7
 8010ce4:	463b      	mov	r3, r7
 8010ce6:	e5cf      	b.n	8010888 <SPINBOX_Callback+0x2e0>
 8010ce8:	9b02      	ldr	r3, [sp, #8]
 8010cea:	fa1f f289 	uxth.w	r2, r9
 8010cee:	fa1f fb8b 	uxth.w	fp, fp
 8010cf2:	ebc3 070b 	rsb	r7, r3, fp
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	1aff      	subs	r7, r7, r3
 8010cfa:	ebc2 020b 	rsb	r2, r2, fp
 8010cfe:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8010d02:	b23f      	sxth	r7, r7
 8010d04:	fa1f f982 	uxth.w	r9, r2
 8010d08:	f8cd a010 	str.w	sl, [sp, #16]
 8010d0c:	e5bc      	b.n	8010888 <SPINBOX_Callback+0x2e0>
 8010d0e:	9902      	ldr	r1, [sp, #8]
 8010d10:	fa1f f389 	uxth.w	r3, r9
 8010d14:	4449      	add	r1, r9
 8010d16:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8010d1a:	fa1f f981 	uxth.w	r9, r1
 8010d1e:	f8cd a010 	str.w	sl, [sp, #16]
 8010d22:	b21f      	sxth	r7, r3
 8010d24:	e5b0      	b.n	8010888 <SPINBOX_Callback+0x2e0>
 8010d26:	f04f 0a00 	mov.w	sl, #0
 8010d2a:	f8cd a008 	str.w	sl, [sp, #8]
 8010d2e:	4652      	mov	r2, sl
 8010d30:	46d0      	mov	r8, sl
 8010d32:	e4c1      	b.n	80106b8 <SPINBOX_Callback+0x110>
 8010d34:	9902      	ldr	r1, [sp, #8]
 8010d36:	fa1f fb8b 	uxth.w	fp, fp
 8010d3a:	fa1f f388 	uxth.w	r3, r8
 8010d3e:	4698      	mov	r8, r3
 8010d40:	ebc1 0a0b 	rsb	sl, r1, fp
 8010d44:	ebc3 030b 	rsb	r3, r3, fp
 8010d48:	ebc8 0a0a 	rsb	sl, r8, sl
 8010d4c:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8010d50:	fa0f fa8a 	sxth.w	sl, sl
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	f8cd 9008 	str.w	r9, [sp, #8]
 8010d5a:	e4ad      	b.n	80106b8 <SPINBOX_Callback+0x110>
 8010d5c:	9a02      	ldr	r2, [sp, #8]
 8010d5e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8010d62:	4442      	add	r2, r8
 8010d64:	fa1f f888 	uxth.w	r8, r8
 8010d68:	b292      	uxth	r2, r2
 8010d6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010d6e:	fa0f fa88 	sxth.w	sl, r8
 8010d72:	e4a1      	b.n	80106b8 <SPINBOX_Callback+0x110>
 8010d74:	b212      	sxth	r2, r2
 8010d76:	4297      	cmp	r7, r2
 8010d78:	f73f aef3 	bgt.w	8010b62 <SPINBOX_Callback+0x5ba>
 8010d7c:	9a03      	ldr	r2, [sp, #12]
 8010d7e:	fa0f f888 	sxth.w	r8, r8
 8010d82:	4542      	cmp	r2, r8
 8010d84:	f6ff aeed 	blt.w	8010b62 <SPINBOX_Callback+0x5ba>
 8010d88:	9b02      	ldr	r3, [sp, #8]
 8010d8a:	fa0f f983 	sxth.w	r9, r3
 8010d8e:	454a      	cmp	r2, r9
 8010d90:	f73f aee7 	bgt.w	8010b62 <SPINBOX_Callback+0x5ba>
 8010d94:	2701      	movs	r7, #1
 8010d96:	e4a3      	b.n	80106e0 <SPINBOX_Callback+0x138>
 8010d98:	2103      	movs	r1, #3
 8010d9a:	f003 fbdd 	bl	8014558 <WM_NotifyParent>
 8010d9e:	e4da      	b.n	8010756 <SPINBOX_Callback+0x1ae>
 8010da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010da2:	f893 70a1 	ldrb.w	r7, [r3, #161]	; 0xa1
 8010da6:	b27a      	sxtb	r2, r7
 8010da8:	3201      	adds	r2, #1
 8010daa:	f43f accf 	beq.w	801074c <SPINBOX_Callback+0x1a4>
 8010dae:	2600      	movs	r6, #0
 8010db0:	f883 60a2 	strb.w	r6, [r3, #162]	; 0xa2
 8010db4:	4620      	mov	r0, r4
 8010db6:	f00c fe41 	bl	801da3c <GUI_ALLOC_LockH>
 8010dba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010dbc:	900c      	str	r0, [sp, #48]	; 0x30
 8010dbe:	0799      	lsls	r1, r3, #30
 8010dc0:	d51a      	bpl.n	8010df8 <SPINBOX_Callback+0x850>
 8010dc2:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8010dc6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8010dca:	b2ff      	uxtb	r7, r7
 8010dcc:	2101      	movs	r1, #1
 8010dce:	40b9      	lsls	r1, r7
 8010dd0:	ea22 0201 	bic.w	r2, r2, r1
 8010dd4:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	f040 810f 	bne.w	8010ffc <SPINBOX_Callback+0xa54>
 8010dde:	4620      	mov	r0, r4
 8010de0:	2102      	movs	r1, #2
 8010de2:	f003 fbb9 	bl	8014558 <WM_NotifyParent>
 8010de6:	4620      	mov	r0, r4
 8010de8:	4629      	mov	r1, r5
 8010dea:	463a      	mov	r2, r7
 8010dec:	f7ff fb68 	bl	80104c0 <SPINBOX__GetButtonRect>
 8010df0:	4620      	mov	r0, r4
 8010df2:	4629      	mov	r1, r5
 8010df4:	f005 f9e6 	bl	80161c4 <WM_InvalidateRect>
 8010df8:	a80c      	add	r0, sp, #48	; 0x30
 8010dfa:	f00c fe31 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010dfe:	27ff      	movs	r7, #255	; 0xff
 8010e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e02:	e4a3      	b.n	801074c <SPINBOX_Callback+0x1a4>
 8010e04:	4638      	mov	r0, r7
 8010e06:	4629      	mov	r1, r5
 8010e08:	f005 f9b0 	bl	801616c <WM_SendMessage>
 8010e0c:	e4c8      	b.n	80107a0 <SPINBOX_Callback+0x1f8>
 8010e0e:	9b06      	ldr	r3, [sp, #24]
 8010e10:	9907      	ldr	r1, [sp, #28]
 8010e12:	1a5a      	subs	r2, r3, r1
 8010e14:	9b05      	ldr	r3, [sp, #20]
 8010e16:	9902      	ldr	r1, [sp, #8]
 8010e18:	b292      	uxth	r2, r2
 8010e1a:	1ad7      	subs	r7, r2, r3
 8010e1c:	b28b      	uxth	r3, r1
 8010e1e:	1aff      	subs	r7, r7, r3
 8010e20:	1ad2      	subs	r2, r2, r3
 8010e22:	ebc3 030b 	rsb	r3, r3, fp
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	b23f      	sxth	r7, r7
 8010e30:	fa1f f982 	uxth.w	r9, r2
 8010e34:	f10b 0301 	add.w	r3, fp, #1
 8010e38:	e643      	b.n	8010ac2 <SPINBOX_Callback+0x51a>
 8010e3a:	9a02      	ldr	r2, [sp, #8]
 8010e3c:	9905      	ldr	r1, [sp, #20]
 8010e3e:	b293      	uxth	r3, r2
 8010e40:	4419      	add	r1, r3
 8010e42:	ebc3 030b 	rsb	r3, r3, fp
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	fa1f f981 	uxth.w	r9, r1
 8010e52:	f10b 0301 	add.w	r3, fp, #1
 8010e56:	b217      	sxth	r7, r2
 8010e58:	e633      	b.n	8010ac2 <SPINBOX_Callback+0x51a>
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	f001 fc34 	bl	80126c8 <EDIT_GetValue>
 8010e60:	6823      	ldr	r3, [r4, #0]
 8010e62:	2b11      	cmp	r3, #17
 8010e64:	4601      	mov	r1, r0
 8010e66:	d040      	beq.n	8010eea <SPINBOX_Callback+0x942>
 8010e68:	2b13      	cmp	r3, #19
 8010e6a:	f47f ac99 	bne.w	80107a0 <SPINBOX_Callback+0x1f8>
 8010e6e:	4638      	mov	r0, r7
 8010e70:	ebc8 0101 	rsb	r1, r8, r1
 8010e74:	f001 fc3e 	bl	80126f4 <EDIT_SetValue>
 8010e78:	e492      	b.n	80107a0 <SPINBOX_Callback+0x1f8>
 8010e7a:	9b06      	ldr	r3, [sp, #24]
 8010e7c:	9907      	ldr	r1, [sp, #28]
 8010e7e:	1a5a      	subs	r2, r3, r1
 8010e80:	9b05      	ldr	r3, [sp, #20]
 8010e82:	9904      	ldr	r1, [sp, #16]
 8010e84:	b292      	uxth	r2, r2
 8010e86:	ebc3 0a02 	rsb	sl, r3, r2
 8010e8a:	b28b      	uxth	r3, r1
 8010e8c:	ebc3 0a0a 	rsb	sl, r3, sl
 8010e90:	1ad2      	subs	r2, r2, r3
 8010e92:	ebc3 030b 	rsb	r3, r3, fp
 8010e96:	ea4f 085b 	mov.w	r8, fp, lsr #1
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	fa0f fa8a 	sxth.w	sl, sl
 8010ea0:	b292      	uxth	r2, r2
 8010ea2:	9302      	str	r3, [sp, #8]
 8010ea4:	f108 0801 	add.w	r8, r8, #1
 8010ea8:	e658      	b.n	8010b5c <SPINBOX_Callback+0x5b4>
 8010eaa:	9a04      	ldr	r2, [sp, #16]
 8010eac:	b293      	uxth	r3, r2
 8010eae:	9a05      	ldr	r2, [sp, #20]
 8010eb0:	441a      	add	r2, r3
 8010eb2:	ebc3 030b 	rsb	r3, r3, fp
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	9302      	str	r3, [sp, #8]
 8010eba:	9b04      	ldr	r3, [sp, #16]
 8010ebc:	ea4f 085b 	mov.w	r8, fp, lsr #1
 8010ec0:	b292      	uxth	r2, r2
 8010ec2:	f108 0801 	add.w	r8, r8, #1
 8010ec6:	fa0f fa83 	sxth.w	sl, r3
 8010eca:	e647      	b.n	8010b5c <SPINBOX_Callback+0x5b4>
 8010ecc:	f001 fbfc 	bl	80126c8 <EDIT_GetValue>
 8010ed0:	ebc8 0100 	rsb	r1, r8, r0
 8010ed4:	e6d9      	b.n	8010c8a <SPINBOX_Callback+0x6e2>
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8010edc:	4638      	mov	r0, r7
 8010ede:	f00c fdbf 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ee4:	e520      	b.n	8010928 <SPINBOX_Callback+0x380>
 8010ee6:	af0b      	add	r7, sp, #44	; 0x2c
 8010ee8:	e690      	b.n	8010c0c <SPINBOX_Callback+0x664>
 8010eea:	4638      	mov	r0, r7
 8010eec:	4441      	add	r1, r8
 8010eee:	f001 fc01 	bl	80126f4 <EDIT_SetValue>
 8010ef2:	e455      	b.n	80107a0 <SPINBOX_Callback+0x1f8>
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f002 f999 	bl	801322c <WM_DeleteTimer>
 8010efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010efc:	22ff      	movs	r2, #255	; 0xff
 8010efe:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 8010f02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8010f06:	e4fe      	b.n	8010906 <SPINBOX_Callback+0x35e>
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8010f0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f12:	f002 f9a5 	bl	8013260 <WM_CreateTimer>
 8010f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f18:	f8c9 009c 	str.w	r0, [r9, #156]	; 0x9c
 8010f1c:	f883 80a0 	strb.w	r8, [r3, #160]	; 0xa0
 8010f20:	e671      	b.n	8010c06 <SPINBOX_Callback+0x65e>
 8010f22:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
 8010f26:	ea4a 0a03 	orr.w	sl, sl, r3
 8010f2a:	f880 a0a3 	strb.w	sl, [r0, #163]	; 0xa3
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4620      	mov	r0, r4
 8010f32:	f003 fb11 	bl	8014558 <WM_NotifyParent>
 8010f36:	4620      	mov	r0, r4
 8010f38:	f00c fd80 	bl	801da3c <GUI_ALLOC_LockH>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	a812      	add	r0, sp, #72	; 0x48
 8010f40:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8010f44:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8010f48:	f840 3d18 	str.w	r3, [r0, #-24]!
 8010f4c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010f50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f54:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8010f56:	f893 b08c 	ldrb.w	fp, [r3, #140]	; 0x8c
 8010f5a:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 8010f5e:	683f      	ldr	r7, [r7, #0]
 8010f60:	ebce 030c 	rsb	r3, lr, ip
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	1a8a      	subs	r2, r1, r2
 8010f68:	9201      	str	r2, [sp, #4]
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	f00c fd78 	bl	801da60 <GUI_ALLOC_UnlockH>
 8010f70:	f1bb 0f01 	cmp.w	fp, #1
 8010f74:	9a01      	ldr	r2, [sp, #4]
 8010f76:	9b00      	ldr	r3, [sp, #0]
 8010f78:	d04a      	beq.n	8011010 <SPINBOX_Callback+0xa68>
 8010f7a:	d32a      	bcc.n	8010fd2 <SPINBOX_Callback+0xa2a>
 8010f7c:	f1bb 0f02 	cmp.w	fp, #2
 8010f80:	d111      	bne.n	8010fa6 <SPINBOX_Callback+0x9fe>
 8010f82:	b2bf      	uxth	r7, r7
 8010f84:	1bdb      	subs	r3, r3, r7
 8010f86:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010f8a:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 8010f8e:	f1b9 0f00 	cmp.w	r9, #0
 8010f92:	d154      	bne.n	801103e <SPINBOX_Callback+0xa96>
 8010f94:	b292      	uxth	r2, r2
 8010f96:	ebca 0302 	rsb	r3, sl, r2
 8010f9a:	1bdb      	subs	r3, r3, r7
 8010f9c:	1bd2      	subs	r2, r2, r7
 8010f9e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8010fa2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f005 f90b 	bl	80161c4 <WM_InvalidateRect>
 8010fae:	e61c      	b.n	8010bea <SPINBOX_Callback+0x642>
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f1b8 0f00 	cmp.w	r8, #0
 8010fb6:	d107      	bne.n	8010fc8 <SPINBOX_Callback+0xa20>
 8010fb8:	f001 fb86 	bl	80126c8 <EDIT_GetValue>
 8010fbc:	eb0a 0100 	add.w	r1, sl, r0
 8010fc0:	4638      	mov	r0, r7
 8010fc2:	f001 fb97 	bl	80126f4 <EDIT_SetValue>
 8010fc6:	e4ae      	b.n	8010926 <SPINBOX_Callback+0x37e>
 8010fc8:	f001 fb7e 	bl	80126c8 <EDIT_GetValue>
 8010fcc:	ebca 0100 	rsb	r1, sl, r0
 8010fd0:	e7f6      	b.n	8010fc0 <SPINBOX_Callback+0xa18>
 8010fd2:	b291      	uxth	r1, r2
 8010fd4:	ebca 0001 	rsb	r0, sl, r1
 8010fd8:	b2ba      	uxth	r2, r7
 8010fda:	1a80      	subs	r0, r0, r2
 8010fdc:	1a89      	subs	r1, r1, r2
 8010fde:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8010fe2:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 8010fe6:	f1b9 0f00 	cmp.w	r9, #0
 8010fea:	d022      	beq.n	8011032 <SPINBOX_Callback+0xa8a>
 8010fec:	0859      	lsrs	r1, r3, #1
 8010fee:	1a9b      	subs	r3, r3, r2
 8010ff0:	1c4a      	adds	r2, r1, #1
 8010ff2:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8010ff6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010ffa:	e7d4      	b.n	8010fa6 <SPINBOX_Callback+0x9fe>
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f002 f915 	bl	801322c <WM_DeleteTimer>
 8011002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011004:	22ff      	movs	r2, #255	; 0xff
 8011006:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
 801100a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 801100e:	e6e6      	b.n	8010dde <SPINBOX_Callback+0x836>
 8011010:	b2bf      	uxth	r7, r7
 8011012:	44ba      	add	sl, r7
 8011014:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8011018:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 801101c:	f1b9 0f00 	cmp.w	r9, #0
 8011020:	d007      	beq.n	8011032 <SPINBOX_Callback+0xa8a>
 8011022:	085a      	lsrs	r2, r3, #1
 8011024:	3201      	adds	r2, #1
 8011026:	1bdb      	subs	r3, r3, r7
 8011028:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801102c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011030:	e7b9      	b.n	8010fa6 <SPINBOX_Callback+0x9fe>
 8011032:	085b      	lsrs	r3, r3, #1
 8011034:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011038:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 801103c:	e7b3      	b.n	8010fa6 <SPINBOX_Callback+0x9fe>
 801103e:	44ba      	add	sl, r7
 8011040:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8011044:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 8011048:	e7ad      	b.n	8010fa6 <SPINBOX_Callback+0x9fe>
 801104a:	bf00      	nop

0801104c <SPINBOX__GetButtonRectEx>:
 801104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011050:	6a0b      	ldr	r3, [r1, #32]
 8011052:	b082      	sub	sp, #8
 8011054:	460c      	mov	r4, r1
 8011056:	f893 8000 	ldrb.w	r8, [r3]
 801105a:	f00c fcef 	bl	801da3c <GUI_ALLOC_LockH>
 801105e:	4603      	mov	r3, r0
 8011060:	a802      	add	r0, sp, #8
 8011062:	885e      	ldrh	r6, [r3, #2]
 8011064:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8011068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801106a:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 801106e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011072:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 8011076:	f840 3d04 	str.w	r3, [r0, #-4]!
 801107a:	ebc6 060c 	rsb	r6, r6, ip
 801107e:	6817      	ldr	r7, [r2, #0]
 8011080:	f8b3 908a 	ldrh.w	r9, [r3, #138]	; 0x8a
 8011084:	ebc1 0a0e 	rsb	sl, r1, lr
 8011088:	f00c fcea 	bl	801da60 <GUI_ALLOC_UnlockH>
 801108c:	2d01      	cmp	r5, #1
 801108e:	b2b6      	uxth	r6, r6
 8011090:	d037      	beq.n	8011102 <SPINBOX__GetButtonRectEx+0xb6>
 8011092:	d31f      	bcc.n	80110d4 <SPINBOX__GetButtonRectEx+0x88>
 8011094:	2d02      	cmp	r5, #2
 8011096:	d00a      	beq.n	80110ae <SPINBOX__GetButtonRectEx+0x62>
 8011098:	2300      	movs	r3, #0
 801109a:	4619      	mov	r1, r3
 801109c:	4618      	mov	r0, r3
 801109e:	461a      	mov	r2, r3
 80110a0:	6122      	str	r2, [r4, #16]
 80110a2:	6160      	str	r0, [r4, #20]
 80110a4:	61a1      	str	r1, [r4, #24]
 80110a6:	61e3      	str	r3, [r4, #28]
 80110a8:	b002      	add	sp, #8
 80110aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ae:	b2bf      	uxth	r7, r7
 80110b0:	1bf3      	subs	r3, r6, r7
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	f1b8 0f00 	cmp.w	r8, #0
 80110b8:	d12f      	bne.n	801111a <SPINBOX__GetButtonRectEx+0xce>
 80110ba:	fa1f fa8a 	uxth.w	sl, sl
 80110be:	ebc9 020a 	rsb	r2, r9, sl
 80110c2:	1bd2      	subs	r2, r2, r7
 80110c4:	ebc7 0a0a 	rsb	sl, r7, sl
 80110c8:	b212      	sxth	r2, r2
 80110ca:	fa0f f18a 	sxth.w	r1, sl
 80110ce:	b238      	sxth	r0, r7
 80110d0:	b21b      	sxth	r3, r3
 80110d2:	e7e5      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>
 80110d4:	fa1f fa8a 	uxth.w	sl, sl
 80110d8:	ebc9 020a 	rsb	r2, r9, sl
 80110dc:	b2bb      	uxth	r3, r7
 80110de:	1ad2      	subs	r2, r2, r3
 80110e0:	ebc3 0a0a 	rsb	sl, r3, sl
 80110e4:	b292      	uxth	r2, r2
 80110e6:	fa1f fa8a 	uxth.w	sl, sl
 80110ea:	f1b8 0f00 	cmp.w	r8, #0
 80110ee:	d023      	beq.n	8011138 <SPINBOX__GetButtonRectEx+0xec>
 80110f0:	0870      	lsrs	r0, r6, #1
 80110f2:	1af3      	subs	r3, r6, r3
 80110f4:	3001      	adds	r0, #1
 80110f6:	b200      	sxth	r0, r0
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	b212      	sxth	r2, r2
 80110fc:	fa0f f18a 	sxth.w	r1, sl
 8011100:	e7ce      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>
 8011102:	b2ba      	uxth	r2, r7
 8011104:	eb02 0109 	add.w	r1, r2, r9
 8011108:	b289      	uxth	r1, r1
 801110a:	f1b8 0f00 	cmp.w	r8, #0
 801110e:	d10b      	bne.n	8011128 <SPINBOX__GetButtonRectEx+0xdc>
 8011110:	b212      	sxth	r2, r2
 8011112:	b209      	sxth	r1, r1
 8011114:	0873      	lsrs	r3, r6, #1
 8011116:	4610      	mov	r0, r2
 8011118:	e7c2      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>
 801111a:	44b9      	add	r9, r7
 801111c:	b23a      	sxth	r2, r7
 801111e:	fa0f f189 	sxth.w	r1, r9
 8011122:	b21b      	sxth	r3, r3
 8011124:	4610      	mov	r0, r2
 8011126:	e7bb      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>
 8011128:	0870      	lsrs	r0, r6, #1
 801112a:	1ab3      	subs	r3, r6, r2
 801112c:	3001      	adds	r0, #1
 801112e:	b209      	sxth	r1, r1
 8011130:	b200      	sxth	r0, r0
 8011132:	b21b      	sxth	r3, r3
 8011134:	b212      	sxth	r2, r2
 8011136:	e7b3      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>
 8011138:	b212      	sxth	r2, r2
 801113a:	b238      	sxth	r0, r7
 801113c:	fa0f f18a 	sxth.w	r1, sl
 8011140:	0873      	lsrs	r3, r6, #1
 8011142:	e7ad      	b.n	80110a0 <SPINBOX__GetButtonRectEx+0x54>

08011144 <SPINBOX_CreateIndirect>:
 8011144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011148:	6944      	ldr	r4, [r0, #20]
 801114a:	b08f      	sub	sp, #60	; 0x3c
 801114c:	460d      	mov	r5, r1
 801114e:	4616      	mov	r6, r2
 8011150:	4698      	mov	r8, r3
 8011152:	b18c      	cbz	r4, 8011178 <SPINBOX_CreateIndirect+0x34>
 8011154:	fa0f fa84 	sxth.w	sl, r4
 8011158:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801115c:	45da      	cmp	sl, fp
 801115e:	8943      	ldrh	r3, [r0, #10]
 8011160:	8981      	ldrh	r1, [r0, #12]
 8011162:	89c7      	ldrh	r7, [r0, #14]
 8011164:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8011168:	8904      	ldrh	r4, [r0, #8]
 801116a:	6982      	ldr	r2, [r0, #24]
 801116c:	bfa8      	it	ge
 801116e:	2000      	movge	r0, #0
 8011170:	db0c      	blt.n	801118c <SPINBOX_CreateIndirect+0x48>
 8011172:	b00f      	add	sp, #60	; 0x3c
 8011174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011178:	46a2      	mov	sl, r4
 801117a:	8943      	ldrh	r3, [r0, #10]
 801117c:	8981      	ldrh	r1, [r0, #12]
 801117e:	89c7      	ldrh	r7, [r0, #14]
 8011180:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8011184:	8904      	ldrh	r4, [r0, #8]
 8011186:	6982      	ldr	r2, [r0, #24]
 8011188:	f04f 0b64 	mov.w	fp, #100	; 0x64
 801118c:	9109      	str	r1, [sp, #36]	; 0x24
 801118e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011190:	930a      	str	r3, [sp, #40]	; 0x28
 8011192:	f00a f8d3 	bl	801b33c <GUI_Lock>
 8011196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801119c:	f8df e230 	ldr.w	lr, [pc, #560]	; 80113d0 <SPINBOX_CreateIndirect+0x28c>
 80111a0:	9500      	str	r5, [sp, #0]
 80111a2:	3278      	adds	r2, #120	; 0x78
 80111a4:	f04f 0c02 	mov.w	ip, #2
 80111a8:	b23f      	sxth	r7, r7
 80111aa:	fa0f f989 	sxth.w	r9, r9
 80111ae:	9203      	str	r2, [sp, #12]
 80111b0:	fa06 f083 	sxtah	r0, r6, r3
 80111b4:	fa08 f181 	sxtah	r1, r8, r1
 80111b8:	463a      	mov	r2, r7
 80111ba:	464b      	mov	r3, r9
 80111bc:	f8cd c004 	str.w	ip, [sp, #4]
 80111c0:	f8cd e008 	str.w	lr, [sp, #8]
 80111c4:	f005 f920 	bl	8016408 <WM_CreateWindowAsChild>
 80111c8:	4680      	mov	r8, r0
 80111ca:	b928      	cbnz	r0, 80111d8 <SPINBOX_CreateIndirect+0x94>
 80111cc:	f00a f8ac 	bl	801b328 <GUI_Unlock>
 80111d0:	4640      	mov	r0, r8
 80111d2:	b00f      	add	sp, #60	; 0x3c
 80111d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d8:	f00c fc30 	bl	801da3c <GUI_ALLOC_LockH>
 80111dc:	b221      	sxth	r1, r4
 80111de:	2210      	movs	r2, #16
 80111e0:	900c      	str	r0, [sp, #48]	; 0x30
 80111e2:	f7fc fd03 	bl	800dbec <WIDGET__Init>
 80111e6:	4b76      	ldr	r3, [pc, #472]	; (80113c0 <SPINBOX_CreateIndirect+0x27c>)
 80111e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80111ea:	681c      	ldr	r4, [r3, #0]
 80111ec:	4975      	ldr	r1, [pc, #468]	; (80113c4 <SPINBOX_CreateIndirect+0x280>)
 80111ee:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
 80111f2:	2260      	movs	r2, #96	; 0x60
 80111f4:	3034      	adds	r0, #52	; 0x34
 80111f6:	f011 fb7d 	bl	80228f4 <memcpy>
 80111fa:	6863      	ldr	r3, [r4, #4]
 80111fc:	4640      	mov	r0, r8
 80111fe:	4798      	blx	r3
 8011200:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011202:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011204:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8011208:	f8d3 c000 	ldr.w	ip, [r3]
 801120c:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8011210:	4249      	negs	r1, r1
 8011212:	b95a      	cbnz	r2, 801122c <SPINBOX_CreateIndirect+0xe8>
 8011214:	187a      	adds	r2, r7, r1
 8011216:	4591      	cmp	r9, r2
 8011218:	460b      	mov	r3, r1
 801121a:	f280 80b7 	bge.w	801138c <SPINBOX_CreateIndirect+0x248>
 801121e:	eb09 0201 	add.w	r2, r9, r1
 8011222:	9207      	str	r2, [sp, #28]
 8011224:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 8011228:	4613      	mov	r3, r2
 801122a:	e002      	b.n	8011232 <SPINBOX_CreateIndirect+0xee>
 801122c:	9207      	str	r2, [sp, #28]
 801122e:	eb09 0301 	add.w	r3, r9, r1
 8011232:	f1ba 0f00 	cmp.w	sl, #0
 8011236:	bfb5      	itete	lt
 8011238:	f1ca 0000 	rsblt	r0, sl, #0
 801123c:	4650      	movge	r0, sl
 801123e:	2602      	movlt	r6, #2
 8011240:	2601      	movge	r6, #1
 8011242:	2809      	cmp	r0, #9
 8011244:	dd09      	ble.n	801125a <SPINBOX_CreateIndirect+0x116>
 8011246:	4d60      	ldr	r5, [pc, #384]	; (80113c8 <SPINBOX_CreateIndirect+0x284>)
 8011248:	fb85 e400 	smull	lr, r4, r5, r0
 801124c:	17c0      	asrs	r0, r0, #31
 801124e:	ebc0 00a4 	rsb	r0, r0, r4, asr #2
 8011252:	2809      	cmp	r0, #9
 8011254:	f106 0601 	add.w	r6, r6, #1
 8011258:	dcf6      	bgt.n	8011248 <SPINBOX_CreateIndirect+0x104>
 801125a:	f1bb 0f00 	cmp.w	fp, #0
 801125e:	bfb5      	itete	lt
 8011260:	f1cb 0400 	rsblt	r4, fp, #0
 8011264:	465c      	movge	r4, fp
 8011266:	2502      	movlt	r5, #2
 8011268:	2501      	movge	r5, #1
 801126a:	2c09      	cmp	r4, #9
 801126c:	dd0a      	ble.n	8011284 <SPINBOX_CreateIndirect+0x140>
 801126e:	f8df e158 	ldr.w	lr, [pc, #344]	; 80113c8 <SPINBOX_CreateIndirect+0x284>
 8011272:	fb8e 2004 	smull	r2, r0, lr, r4
 8011276:	17e4      	asrs	r4, r4, #31
 8011278:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 801127c:	2c09      	cmp	r4, #9
 801127e:	f105 0501 	add.w	r5, r5, #1
 8011282:	dcf6      	bgt.n	8011272 <SPINBOX_CreateIndirect+0x12e>
 8011284:	9109      	str	r1, [sp, #36]	; 0x24
 8011286:	930a      	str	r3, [sp, #40]	; 0x28
 8011288:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801128c:	f000 f942 	bl	8011514 <EDIT_GetDefaultFont>
 8011290:	f00b fa26 	bl	801c6e0 <GUI_GetYDistOfFont>
 8011294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011298:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801129c:	4298      	cmp	r0, r3
 801129e:	da73      	bge.n	8011388 <SPINBOX_CreateIndirect+0x244>
 80112a0:	ebc0 0909 	rsb	r9, r0, r9
 80112a4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80112a8:	ea4f 0469 	mov.w	r4, r9, asr #1
 80112ac:	4603      	mov	r3, r0
 80112ae:	9a07      	ldr	r2, [sp, #28]
 80112b0:	ebb7 0e02 	subs.w	lr, r7, r2
 80112b4:	d44e      	bmi.n	8011354 <SPINBOX_CreateIndirect+0x210>
 80112b6:	4843      	ldr	r0, [pc, #268]	; (80113c4 <SPINBOX_CreateIndirect+0x280>)
 80112b8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 80112bc:	2801      	cmp	r0, #1
 80112be:	d077      	beq.n	80113b0 <SPINBOX_CreateIndirect+0x26c>
 80112c0:	d36e      	bcc.n	80113a0 <SPINBOX_CreateIndirect+0x25c>
 80112c2:	2802      	cmp	r0, #2
 80112c4:	d170      	bne.n	80113a8 <SPINBOX_CreateIndirect+0x264>
 80112c6:	9a07      	ldr	r2, [sp, #28]
 80112c8:	4494      	add	ip, r2
 80112ca:	eba7 024c 	sub.w	r2, r7, ip, lsl #1
 80112ce:	3a02      	subs	r2, #2
 80112d0:	f10c 0c01 	add.w	ip, ip, #1
 80112d4:	f04f 0e02 	mov.w	lr, #2
 80112d8:	2700      	movs	r7, #0
 80112da:	4660      	mov	r0, ip
 80112dc:	f8cd e004 	str.w	lr, [sp, #4]
 80112e0:	4621      	mov	r1, r4
 80112e2:	f8cd 8000 	str.w	r8, [sp]
 80112e6:	42b5      	cmp	r5, r6
 80112e8:	bfac      	ite	ge
 80112ea:	9504      	strge	r5, [sp, #16]
 80112ec:	9604      	strlt	r6, [sp, #16]
 80112ee:	9702      	str	r7, [sp, #8]
 80112f0:	9703      	str	r7, [sp, #12]
 80112f2:	f000 fd1b 	bl	8011d2c <EDIT_CreateEx>
 80112f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112f8:	4604      	mov	r4, r0
 80112fa:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 80112fe:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 8011302:	f8c2 b084 	str.w	fp, [r2, #132]	; 0x84
 8011306:	465b      	mov	r3, fp
 8011308:	4652      	mov	r2, sl
 801130a:	4651      	mov	r1, sl
 801130c:	9700      	str	r7, [sp, #0]
 801130e:	9701      	str	r7, [sp, #4]
 8011310:	f000 fabc 	bl	801188c <EDIT_SetDecMode>
 8011314:	4620      	mov	r0, r4
 8011316:	492d      	ldr	r1, [pc, #180]	; (80113cc <SPINBOX_CreateIndirect+0x288>)
 8011318:	f7fc fee0 	bl	800e0dc <WIDGET_SetEffect>
 801131c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801131e:	4620      	mov	r0, r4
 8011320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011322:	4639      	mov	r1, r7
 8011324:	f001 f990 	bl	8012648 <EDIT_SetBkColor>
 8011328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801132a:	4620      	mov	r0, r4
 801132c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801132e:	2101      	movs	r1, #1
 8011330:	f001 f98a 	bl	8012648 <EDIT_SetBkColor>
 8011334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011336:	4639      	mov	r1, r7
 8011338:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801133a:	4620      	mov	r0, r4
 801133c:	f001 f9a4 	bl	8012688 <EDIT_SetTextColor>
 8011340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011342:	4620      	mov	r0, r4
 8011344:	2101      	movs	r1, #1
 8011346:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011348:	f001 f99e 	bl	8012688 <EDIT_SetTextColor>
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f001 fa78 	bl	8012844 <EDIT_SetCursorAtChar>
 8011354:	a80c      	add	r0, sp, #48	; 0x30
 8011356:	f00c fb83 	bl	801da60 <GUI_ALLOC_UnlockH>
 801135a:	f009 ffef 	bl	801b33c <GUI_Lock>
 801135e:	4640      	mov	r0, r8
 8011360:	f00c fb6c 	bl	801da3c <GUI_ALLOC_LockH>
 8011364:	ac0e      	add	r4, sp, #56	; 0x38
 8011366:	4603      	mov	r3, r0
 8011368:	f844 3d04 	str.w	r3, [r4, #-4]!
 801136c:	2100      	movs	r1, #0
 801136e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8011372:	f7fc fd05 	bl	800dd80 <WIDGET_SetFocusable>
 8011376:	4620      	mov	r0, r4
 8011378:	f00c fb72 	bl	801da60 <GUI_ALLOC_UnlockH>
 801137c:	f009 ffd4 	bl	801b328 <GUI_Unlock>
 8011380:	f009 ffd2 	bl	801b328 <GUI_Unlock>
 8011384:	4640      	mov	r0, r8
 8011386:	e724      	b.n	80111d2 <SPINBOX_CreateIndirect+0x8e>
 8011388:	4664      	mov	r4, ip
 801138a:	e790      	b.n	80112ae <SPINBOX_CreateIndirect+0x16a>
 801138c:	2f00      	cmp	r7, #0
 801138e:	463a      	mov	r2, r7
 8011390:	bfb8      	it	lt
 8011392:	1cfa      	addlt	r2, r7, #3
 8011394:	1092      	asrs	r2, r2, #2
 8011396:	9207      	str	r2, [sp, #28]
 8011398:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 801139c:	444b      	add	r3, r9
 801139e:	e748      	b.n	8011232 <SPINBOX_CreateIndirect+0xee>
 80113a0:	eb01 020e 	add.w	r2, r1, lr
 80113a4:	3a01      	subs	r2, #1
 80113a6:	e795      	b.n	80112d4 <SPINBOX_CreateIndirect+0x190>
 80113a8:	f04f 0c00 	mov.w	ip, #0
 80113ac:	4662      	mov	r2, ip
 80113ae:	e791      	b.n	80112d4 <SPINBOX_CreateIndirect+0x190>
 80113b0:	9a07      	ldr	r2, [sp, #28]
 80113b2:	4471      	add	r1, lr
 80113b4:	4494      	add	ip, r2
 80113b6:	f10c 0c01 	add.w	ip, ip, #1
 80113ba:	1e4a      	subs	r2, r1, #1
 80113bc:	e78a      	b.n	80112d4 <SPINBOX_CreateIndirect+0x190>
 80113be:	bf00      	nop
 80113c0:	200001ec 	.word	0x200001ec
 80113c4:	2000018c 	.word	0x2000018c
 80113c8:	66666667 	.word	0x66666667
 80113cc:	08029dfc 	.word	0x08029dfc
 80113d0:	080105a9 	.word	0x080105a9

080113d4 <SPINBOX_SetFont>:
 80113d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113d8:	4604      	mov	r4, r0
 80113da:	b089      	sub	sp, #36	; 0x24
 80113dc:	460d      	mov	r5, r1
 80113de:	b910      	cbnz	r0, 80113e6 <SPINBOX_SetFont+0x12>
 80113e0:	b009      	add	sp, #36	; 0x24
 80113e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113e6:	f009 ffa9 	bl	801b33c <GUI_Lock>
 80113ea:	4620      	mov	r0, r4
 80113ec:	f00c fb26 	bl	801da3c <GUI_ALLOC_LockH>
 80113f0:	4603      	mov	r3, r0
 80113f2:	a808      	add	r0, sp, #32
 80113f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f6:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80113fa:	f840 3d14 	str.w	r3, [r0, #-20]!
 80113fe:	f893 908c 	ldrb.w	r9, [r3, #140]	; 0x8c
 8011402:	6817      	ldr	r7, [r2, #0]
 8011404:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 8011408:	f00c fb2a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801140c:	f009 ff8c 	bl	801b328 <GUI_Unlock>
 8011410:	4629      	mov	r1, r5
 8011412:	4630      	mov	r0, r6
 8011414:	f001 f8fe 	bl	8012614 <EDIT_SetFont>
 8011418:	4620      	mov	r0, r4
 801141a:	a904      	add	r1, sp, #16
 801141c:	f003 f840 	bl	80144a0 <WM_GetWindowRectEx>
 8011420:	4630      	mov	r0, r6
 8011422:	a906      	add	r1, sp, #24
 8011424:	f003 f83c 	bl	80144a0 <WM_GetWindowRectEx>
 8011428:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801142c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011430:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8011434:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011438:	4628      	mov	r0, r5
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	1a65      	subs	r5, r4, r1
 801143e:	1c5c      	adds	r4, r3, #1
 8011440:	f00b f94e 	bl	801c6e0 <GUI_GetYDistOfFont>
 8011444:	f1b9 0f01 	cmp.w	r9, #1
 8011448:	f105 0501 	add.w	r5, r5, #1
 801144c:	d04a      	beq.n	80114e4 <SPINBOX_SetFont+0x110>
 801144e:	d32f      	bcc.n	80114b0 <SPINBOX_SetFont+0xdc>
 8011450:	f1b9 0f02 	cmp.w	r9, #2
 8011454:	d054      	beq.n	8011500 <SPINBOX_SetFont+0x12c>
 8011456:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801145a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801145e:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8011462:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 8011466:	ebc2 0e0e 	rsb	lr, r2, lr
 801146a:	f10e 0e01 	add.w	lr, lr, #1
 801146e:	eba5 0247 	sub.w	r2, r5, r7, lsl #1
 8011472:	4596      	cmp	lr, r2
 8011474:	da2c      	bge.n	80114d0 <SPINBOX_SetFont+0xfc>
 8011476:	1a2d      	subs	r5, r5, r0
 8011478:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801147c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011480:	eb02 0765 	add.w	r7, r2, r5, asr #1
 8011484:	b2bf      	uxth	r7, r7
 8011486:	183c      	adds	r4, r7, r0
 8011488:	b2a4      	uxth	r4, r4
 801148a:	b2bf      	uxth	r7, r7
 801148c:	b23a      	sxth	r2, r7
 801148e:	b225      	sxth	r5, r4
 8011490:	1aad      	subs	r5, r5, r2
 8011492:	b209      	sxth	r1, r1
 8011494:	3501      	adds	r5, #1
 8011496:	b21b      	sxth	r3, r3
 8011498:	1a5b      	subs	r3, r3, r1
 801149a:	4630      	mov	r0, r6
 801149c:	9500      	str	r5, [sp, #0]
 801149e:	f8ad 401e 	strh.w	r4, [sp, #30]
 80114a2:	f8ad 701a 	strh.w	r7, [sp, #26]
 80114a6:	f003 f993 	bl	80147d0 <WM_SetWindowPos>
 80114aa:	b009      	add	sp, #36	; 0x24
 80114ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80114b4:	ebc8 0302 	rsb	r3, r8, r2
 80114b8:	3b01      	subs	r3, #1
 80114ba:	b2b9      	uxth	r1, r7
 80114bc:	1a5b      	subs	r3, r3, r1
 80114be:	4423      	add	r3, r4
 80114c0:	4411      	add	r1, r2
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	b289      	uxth	r1, r1
 80114c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80114ca:	f8ad 1018 	strh.w	r1, [sp, #24]
 80114ce:	e7c6      	b.n	801145e <SPINBOX_SetFont+0x8a>
 80114d0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80114d4:	b2bf      	uxth	r7, r7
 80114d6:	1e54      	subs	r4, r2, #1
 80114d8:	1be4      	subs	r4, r4, r7
 80114da:	442c      	add	r4, r5
 80114dc:	4417      	add	r7, r2
 80114de:	b2a4      	uxth	r4, r4
 80114e0:	b2bf      	uxth	r7, r7
 80114e2:	e7d3      	b.n	801148c <SPINBOX_SetFont+0xb8>
 80114e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80114e8:	b2bb      	uxth	r3, r7
 80114ea:	18d1      	adds	r1, r2, r3
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	4441      	add	r1, r8
 80114f0:	4423      	add	r3, r4
 80114f2:	b289      	uxth	r1, r1
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80114fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80114fe:	e7ae      	b.n	801145e <SPINBOX_SetFont+0x8a>
 8011500:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011504:	ebc8 0302 	rsb	r3, r8, r2
 8011508:	f108 0801 	add.w	r8, r8, #1
 801150c:	3b01      	subs	r3, #1
 801150e:	b2b9      	uxth	r1, r7
 8011510:	4442      	add	r2, r8
 8011512:	e7d3      	b.n	80114bc <SPINBOX_SetFont+0xe8>

08011514 <EDIT_GetDefaultFont>:
 8011514:	4b01      	ldr	r3, [pc, #4]	; (801151c <EDIT_GetDefaultFont+0x8>)
 8011516:	6898      	ldr	r0, [r3, #8]
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	200001f0 	.word	0x200001f0

08011520 <_AddPosition>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011524:	f9b0 7038 	ldrsh.w	r7, [r0, #56]	; 0x38
 8011528:	f890 4056 	ldrb.w	r4, [r0, #86]	; 0x56
 801152c:	6c86      	ldr	r6, [r0, #72]	; 0x48
 801152e:	4605      	mov	r5, r0
 8011530:	1aff      	subs	r7, r7, r3
 8011532:	f014 0001 	ands.w	r0, r4, #1
 8011536:	f107 33ff 	add.w	r3, r7, #4294967295
 801153a:	d000      	beq.n	801153e <_AddPosition+0x1e>
 801153c:	b386      	cbz	r6, 80115a0 <_AddPosition+0x80>
 801153e:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 8011542:	b10f      	cbz	r7, 8011548 <_AddPosition+0x28>
 8011544:	42bb      	cmp	r3, r7
 8011546:	dc29      	bgt.n	801159c <_AddPosition+0x7c>
 8011548:	1e5c      	subs	r4, r3, #1
 801154a:	b39b      	cbz	r3, 80115b4 <_AddPosition+0x94>
 801154c:	4613      	mov	r3, r2
 801154e:	3c01      	subs	r4, #1
 8011550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011554:	1c67      	adds	r7, r4, #1
 8011556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801155a:	d1f8      	bne.n	801154e <_AddPosition+0x2e>
 801155c:	2a00      	cmp	r2, #0
 801155e:	eb03 0706 	add.w	r7, r3, r6
 8011562:	db10      	blt.n	8011586 <_AddPosition+0x66>
 8011564:	d001      	beq.n	801156a <_AddPosition+0x4a>
 8011566:	42be      	cmp	r6, r7
 8011568:	db0f      	blt.n	801158a <_AddPosition+0x6a>
 801156a:	b158      	cbz	r0, 8011584 <_AddPosition+0x64>
 801156c:	b94e      	cbnz	r6, 8011582 <_AddPosition+0x62>
 801156e:	b14f      	cbz	r7, 8011584 <_AddPosition+0x64>
 8011570:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 8011574:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011576:	3a01      	subs	r2, #1
 8011578:	4293      	cmp	r3, r2
 801157a:	da03      	bge.n	8011584 <_AddPosition+0x64>
 801157c:	3301      	adds	r3, #1
 801157e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8011580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011582:	b18f      	cbz	r7, 80115a8 <_AddPosition+0x88>
 8011584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011586:	42be      	cmp	r6, r7
 8011588:	ddef      	ble.n	801156a <_AddPosition+0x4a>
 801158a:	4608      	mov	r0, r1
 801158c:	4639      	mov	r1, r7
 801158e:	f001 f8b1 	bl	80126f4 <EDIT_SetValue>
 8011592:	f895 0056 	ldrb.w	r0, [r5, #86]	; 0x56
 8011596:	f000 0001 	and.w	r0, r0, #1
 801159a:	e7e6      	b.n	801156a <_AddPosition+0x4a>
 801159c:	1e9c      	subs	r4, r3, #2
 801159e:	e7d5      	b.n	801154c <_AddPosition+0x2c>
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	bfc8      	it	gt
 80115a4:	1ebb      	subgt	r3, r7, #2
 80115a6:	e7ca      	b.n	801153e <_AddPosition+0x1e>
 80115a8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	ddea      	ble.n	8011584 <_AddPosition+0x64>
 80115ae:	3b01      	subs	r3, #1
 80115b0:	64eb      	str	r3, [r5, #76]	; 0x4c
 80115b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115b4:	4613      	mov	r3, r2
 80115b6:	e7d1      	b.n	801155c <_AddPosition+0x3c>

080115b8 <_UpdateBuffer>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	f00c fa3e 	bl	801da3c <GUI_ALLOC_LockH>
 80115c0:	9001      	str	r0, [sp, #4]
 80115c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80115c4:	f00c fa3a 	bl	801da3c <GUI_ALLOC_LockH>
 80115c8:	9b01      	ldr	r3, [sp, #4]
 80115ca:	9002      	str	r0, [sp, #8]
 80115cc:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 80115d0:	9003      	str	r0, [sp, #12]
 80115d2:	07d1      	lsls	r1, r2, #31
 80115d4:	d553      	bpl.n	801167e <_UpdateBuffer+0xc6>
 80115d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80115d8:	2800      	cmp	r0, #0
 80115da:	db62      	blt.n	80116a2 <_UpdateBuffer+0xea>
 80115dc:	a903      	add	r1, sp, #12
 80115de:	f00a ff79 	bl	801c4d4 <GUI_AddSign>
 80115e2:	9b01      	ldr	r3, [sp, #4]
 80115e4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80115e8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80115ec:	3901      	subs	r1, #1
 80115ee:	ab03      	add	r3, sp, #12
 80115f0:	b2c9      	uxtb	r1, r1
 80115f2:	f00a ff7d 	bl	801c4f0 <GUI_AddDecShift>
 80115f6:	a802      	add	r0, sp, #8
 80115f8:	f00c fa32 	bl	801da60 <GUI_ALLOC_UnlockH>
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 8011602:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011606:	3c02      	subs	r4, #2
 8011608:	b10a      	cbz	r2, 801160e <_UpdateBuffer+0x56>
 801160a:	43d2      	mvns	r2, r2
 801160c:	4414      	add	r4, r2
 801160e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011610:	f00c fa14 	bl	801da3c <GUI_ALLOC_LockH>
 8011614:	2c00      	cmp	r4, #0
 8011616:	9002      	str	r0, [sp, #8]
 8011618:	9003      	str	r0, [sp, #12]
 801161a:	db28      	blt.n	801166e <_UpdateBuffer+0xb6>
 801161c:	4d27      	ldr	r5, [pc, #156]	; (80116bc <_UpdateBuffer+0x104>)
 801161e:	2300      	movs	r3, #0
 8011620:	2620      	movs	r6, #32
 8011622:	e006      	b.n	8011632 <_UpdateBuffer+0x7a>
 8011624:	7006      	strb	r6, [r0, #0]
 8011626:	9803      	ldr	r0, [sp, #12]
 8011628:	3301      	adds	r3, #1
 801162a:	3001      	adds	r0, #1
 801162c:	429c      	cmp	r4, r3
 801162e:	9003      	str	r0, [sp, #12]
 8011630:	db1d      	blt.n	801166e <_UpdateBuffer+0xb6>
 8011632:	7802      	ldrb	r2, [r0, #0]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d03c      	beq.n	80116b2 <_UpdateBuffer+0xfa>
 8011638:	2a30      	cmp	r2, #48	; 0x30
 801163a:	d118      	bne.n	801166e <_UpdateBuffer+0xb6>
 801163c:	7842      	ldrb	r2, [r0, #1]
 801163e:	7829      	ldrb	r1, [r5, #0]
 8011640:	4291      	cmp	r1, r2
 8011642:	d014      	beq.n	801166e <_UpdateBuffer+0xb6>
 8011644:	b19a      	cbz	r2, 801166e <_UpdateBuffer+0xb6>
 8011646:	9a01      	ldr	r2, [sp, #4]
 8011648:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801164c:	0792      	lsls	r2, r2, #30
 801164e:	d5eb      	bpl.n	8011628 <_UpdateBuffer+0x70>
 8011650:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8011654:	2a2b      	cmp	r2, #43	; 0x2b
 8011656:	d001      	beq.n	801165c <_UpdateBuffer+0xa4>
 8011658:	2a2d      	cmp	r2, #45	; 0x2d
 801165a:	d1e3      	bne.n	8011624 <_UpdateBuffer+0x6c>
 801165c:	7002      	strb	r2, [r0, #0]
 801165e:	f800 6c01 	strb.w	r6, [r0, #-1]
 8011662:	9803      	ldr	r0, [sp, #12]
 8011664:	3301      	adds	r3, #1
 8011666:	3001      	adds	r0, #1
 8011668:	429c      	cmp	r4, r3
 801166a:	9003      	str	r0, [sp, #12]
 801166c:	dae1      	bge.n	8011632 <_UpdateBuffer+0x7a>
 801166e:	a802      	add	r0, sp, #8
 8011670:	f00c f9f6 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011674:	a801      	add	r0, sp, #4
 8011676:	f00c f9f3 	bl	801da60 <GUI_ALLOC_UnlockH>
 801167a:	b004      	add	sp, #16
 801167c:	bd70      	pop	{r4, r5, r6, pc}
 801167e:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8011680:	b20a      	sxth	r2, r1
 8011682:	2a0a      	cmp	r2, #10
 8011684:	dd0a      	ble.n	801169c <_UpdateBuffer+0xe4>
 8011686:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011688:	2800      	cmp	r0, #0
 801168a:	bfb4      	ite	lt
 801168c:	b2c9      	uxtblt	r1, r1
 801168e:	210a      	movge	r1, #10
 8011690:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011694:	ab03      	add	r3, sp, #12
 8011696:	f00a ff2b 	bl	801c4f0 <GUI_AddDecShift>
 801169a:	e7ac      	b.n	80115f6 <_UpdateBuffer+0x3e>
 801169c:	b2c9      	uxtb	r1, r1
 801169e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80116a0:	e7f6      	b.n	8011690 <_UpdateBuffer+0xd8>
 80116a2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80116a6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80116aa:	ab03      	add	r3, sp, #12
 80116ac:	f00a ff20 	bl	801c4f0 <GUI_AddDecShift>
 80116b0:	e7a1      	b.n	80115f6 <_UpdateBuffer+0x3e>
 80116b2:	2a2b      	cmp	r2, #43	; 0x2b
 80116b4:	d0b8      	beq.n	8011628 <_UpdateBuffer+0x70>
 80116b6:	2a2d      	cmp	r2, #45	; 0x2d
 80116b8:	d1be      	bne.n	8011638 <_UpdateBuffer+0x80>
 80116ba:	e7b5      	b.n	8011628 <_UpdateBuffer+0x70>
 80116bc:	2002cb80 	.word	0x2002cb80

080116c0 <_AddKeyDec>:
 80116c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116c4:	b083      	sub	sp, #12
 80116c6:	460e      	mov	r6, r1
 80116c8:	4605      	mov	r5, r0
 80116ca:	f00c f9b7 	bl	801da3c <GUI_ALLOC_LockH>
 80116ce:	4604      	mov	r4, r0
 80116d0:	9000      	str	r0, [sp, #0]
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d032      	beq.n	801173c <_AddKeyDec+0x7c>
 80116d6:	f1a6 0310 	sub.w	r3, r6, #16
 80116da:	2b1d      	cmp	r3, #29
 80116dc:	d87d      	bhi.n	80117da <_AddKeyDec+0x11a>
 80116de:	e8df f003 	tbb	[pc, r3]
 80116e2:	6f4d      	.short	0x6f4d
 80116e4:	7c7c3617 	.word	0x7c7c3617
 80116e8:	7c7c7c7c 	.word	0x7c7c7c7c
 80116ec:	7c7c7c7c 	.word	0x7c7c7c7c
 80116f0:	7c7c7c7c 	.word	0x7c7c7c7c
 80116f4:	7c7c7c7c 	.word	0x7c7c7c7c
 80116f8:	7c7c7c7c 	.word	0x7c7c7c7c
 80116fc:	627c447c 	.word	0x627c447c
 8011700:	a801      	add	r0, sp, #4
 8011702:	f00c f9ad 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011706:	4628      	mov	r0, r5
 8011708:	4639      	mov	r1, r7
 801170a:	f000 fff3 	bl	80126f4 <EDIT_SetValue>
 801170e:	9c00      	ldr	r4, [sp, #0]
 8011710:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011712:	4628      	mov	r0, r5
 8011714:	3101      	adds	r1, #1
 8011716:	f000 fadb 	bl	8011cd0 <EDIT__SetCursorPos>
 801171a:	4620      	mov	r0, r4
 801171c:	f000 fabc 	bl	8011c98 <EDIT__GetCurrentChar>
 8011720:	4b58      	ldr	r3, [pc, #352]	; (8011884 <_AddKeyDec+0x1c4>)
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	4283      	cmp	r3, r0
 8011726:	d109      	bne.n	801173c <_AddKeyDec+0x7c>
 8011728:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 801172c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801172e:	3b01      	subs	r3, #1
 8011730:	4299      	cmp	r1, r3
 8011732:	db33      	blt.n	801179c <_AddKeyDec+0xdc>
 8011734:	3901      	subs	r1, #1
 8011736:	4628      	mov	r0, r5
 8011738:	f000 faca 	bl	8011cd0 <EDIT__SetCursorPos>
 801173c:	4668      	mov	r0, sp
 801173e:	f00c f98f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011742:	4628      	mov	r0, r5
 8011744:	f7ff ff38 	bl	80115b8 <_UpdateBuffer>
 8011748:	b003      	add	sp, #12
 801174a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801174e:	f000 faa3 	bl	8011c98 <EDIT__GetCurrentChar>
 8011752:	b2c0      	uxtb	r0, r0
 8011754:	282d      	cmp	r0, #45	; 0x2d
 8011756:	d07d      	beq.n	8011854 <_AddKeyDec+0x194>
 8011758:	282b      	cmp	r0, #43	; 0x2b
 801175a:	d07b      	beq.n	8011854 <_AddKeyDec+0x194>
 801175c:	9800      	ldr	r0, [sp, #0]
 801175e:	4629      	mov	r1, r5
 8011760:	f04f 32ff 	mov.w	r2, #4294967295
 8011764:	f7ff fedc 	bl	8011520 <_AddPosition>
 8011768:	e7e8      	b.n	801173c <_AddKeyDec+0x7c>
 801176a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801176c:	2900      	cmp	r1, #0
 801176e:	d1e5      	bne.n	801173c <_AddKeyDec+0x7c>
 8011770:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8011772:	2b00      	cmp	r3, #0
 8011774:	db1d      	blt.n	80117b2 <_AddKeyDec+0xf2>
 8011776:	3101      	adds	r1, #1
 8011778:	4628      	mov	r0, r5
 801177a:	e7cc      	b.n	8011716 <_AddKeyDec+0x56>
 801177c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801177e:	4628      	mov	r0, r5
 8011780:	3901      	subs	r1, #1
 8011782:	f000 faa5 	bl	8011cd0 <EDIT__SetCursorPos>
 8011786:	9800      	ldr	r0, [sp, #0]
 8011788:	f000 fa86 	bl	8011c98 <EDIT__GetCurrentChar>
 801178c:	4b3d      	ldr	r3, [pc, #244]	; (8011884 <_AddKeyDec+0x1c4>)
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	4283      	cmp	r3, r0
 8011792:	d1d3      	bne.n	801173c <_AddKeyDec+0x7c>
 8011794:	9b00      	ldr	r3, [sp, #0]
 8011796:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011798:	2900      	cmp	r1, #0
 801179a:	dccb      	bgt.n	8011734 <_AddKeyDec+0x74>
 801179c:	3101      	adds	r1, #1
 801179e:	4628      	mov	r0, r5
 80117a0:	f000 fa96 	bl	8011cd0 <EDIT__SetCursorPos>
 80117a4:	e7ca      	b.n	801173c <_AddKeyDec+0x7c>
 80117a6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80117a8:	2900      	cmp	r1, #0
 80117aa:	d1c7      	bne.n	801173c <_AddKeyDec+0x7c>
 80117ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	dde1      	ble.n	8011776 <_AddKeyDec+0xb6>
 80117b2:	4259      	negs	r1, r3
 80117b4:	4628      	mov	r0, r5
 80117b6:	f000 ff9d 	bl	80126f4 <EDIT_SetValue>
 80117ba:	9c00      	ldr	r4, [sp, #0]
 80117bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80117be:	e7da      	b.n	8011776 <_AddKeyDec+0xb6>
 80117c0:	f000 fa6a 	bl	8011c98 <EDIT__GetCurrentChar>
 80117c4:	b2c0      	uxtb	r0, r0
 80117c6:	282d      	cmp	r0, #45	; 0x2d
 80117c8:	d044      	beq.n	8011854 <_AddKeyDec+0x194>
 80117ca:	282b      	cmp	r0, #43	; 0x2b
 80117cc:	d042      	beq.n	8011854 <_AddKeyDec+0x194>
 80117ce:	9800      	ldr	r0, [sp, #0]
 80117d0:	4629      	mov	r1, r5
 80117d2:	2201      	movs	r2, #1
 80117d4:	f7ff fea4 	bl	8011520 <_AddPosition>
 80117d8:	e7b0      	b.n	801173c <_AddKeyDec+0x7c>
 80117da:	f000 fa5d 	bl	8011c98 <EDIT__GetCurrentChar>
 80117de:	b2c0      	uxtb	r0, r0
 80117e0:	282d      	cmp	r0, #45	; 0x2d
 80117e2:	d0ab      	beq.n	801173c <_AddKeyDec+0x7c>
 80117e4:	282b      	cmp	r0, #43	; 0x2b
 80117e6:	d0a9      	beq.n	801173c <_AddKeyDec+0x7c>
 80117e8:	f1a6 0930 	sub.w	r9, r6, #48	; 0x30
 80117ec:	f1b9 0f09 	cmp.w	r9, #9
 80117f0:	d8a4      	bhi.n	801173c <_AddKeyDec+0x7c>
 80117f2:	f8dd 8000 	ldr.w	r8, [sp]
 80117f6:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80117fa:	f00c f91f 	bl	801da3c <GUI_ALLOC_LockH>
 80117fe:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
 8011802:	9001      	str	r0, [sp, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	4684      	mov	ip, r0
 8011808:	f04f 0700 	mov.w	r7, #0
 801180c:	f77f af78 	ble.w	8011700 <_AddKeyDec+0x40>
 8011810:	f8d8 604c 	ldr.w	r6, [r8, #76]	; 0x4c
 8011814:	f8df e070 	ldr.w	lr, [pc, #112]	; 8011888 <_AddKeyDec+0x1c8>
 8011818:	3b01      	subs	r3, #1
 801181a:	463c      	mov	r4, r7
 801181c:	e012      	b.n	8011844 <_AddKeyDec+0x184>
 801181e:	f898 1056 	ldrb.w	r1, [r8, #86]	; 0x56
 8011822:	f81c 2003 	ldrb.w	r2, [ip, r3]
 8011826:	0789      	lsls	r1, r1, #30
 8011828:	d501      	bpl.n	801182e <_AddKeyDec+0x16e>
 801182a:	2a20      	cmp	r2, #32
 801182c:	d023      	beq.n	8011876 <_AddKeyDec+0x1b6>
 801182e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011832:	2909      	cmp	r1, #9
 8011834:	d917      	bls.n	8011866 <_AddKeyDec+0x1a6>
 8011836:	2a2d      	cmp	r2, #45	; 0x2d
 8011838:	bf08      	it	eq
 801183a:	427f      	negeq	r7, r7
 801183c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011840:	f4ff af5e 	bcc.w	8011700 <_AddKeyDec+0x40>
 8011844:	42b3      	cmp	r3, r6
 8011846:	d1ea      	bne.n	801181e <_AddKeyDec+0x15e>
 8011848:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 801184c:	3401      	adds	r4, #1
 801184e:	fb02 7709 	mla	r7, r2, r9, r7
 8011852:	e7f3      	b.n	801183c <_AddKeyDec+0x17c>
 8011854:	9b00      	ldr	r3, [sp, #0]
 8011856:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8011858:	2900      	cmp	r1, #0
 801185a:	dd0f      	ble.n	801187c <_AddKeyDec+0x1bc>
 801185c:	4249      	negs	r1, r1
 801185e:	4628      	mov	r0, r5
 8011860:	f000 ff48 	bl	80126f4 <EDIT_SetValue>
 8011864:	e76a      	b.n	801173c <_AddKeyDec+0x7c>
 8011866:	2900      	cmp	r1, #0
 8011868:	dbe5      	blt.n	8011836 <_AddKeyDec+0x176>
 801186a:	f85e 0024 	ldr.w	r0, [lr, r4, lsl #2]
 801186e:	3401      	adds	r4, #1
 8011870:	fb00 7701 	mla	r7, r0, r1, r7
 8011874:	e7df      	b.n	8011836 <_AddKeyDec+0x176>
 8011876:	2100      	movs	r1, #0
 8011878:	2230      	movs	r2, #48	; 0x30
 801187a:	e7f6      	b.n	801186a <_AddKeyDec+0x1aa>
 801187c:	f43f af5e 	beq.w	801173c <_AddKeyDec+0x7c>
 8011880:	e7ec      	b.n	801185c <_AddKeyDec+0x19c>
 8011882:	bf00      	nop
 8011884:	2002cb80 	.word	0x2002cb80
 8011888:	08029c38 	.word	0x08029c38

0801188c <EDIT_SetDecMode>:
 801188c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	4606      	mov	r6, r0
 8011894:	4689      	mov	r9, r1
 8011896:	4614      	mov	r4, r2
 8011898:	461d      	mov	r5, r3
 801189a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801189e:	f009 fd4d 	bl	801b33c <GUI_Lock>
 80118a2:	b926      	cbnz	r6, 80118ae <EDIT_SetDecMode+0x22>
 80118a4:	f009 fd40 	bl	801b328 <GUI_Unlock>
 80118a8:	b002      	add	sp, #8
 80118aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ae:	4630      	mov	r0, r6
 80118b0:	f00c f8c4 	bl	801da3c <GUI_ALLOC_LockH>
 80118b4:	af02      	add	r7, sp, #8
 80118b6:	4603      	mov	r3, r0
 80118b8:	f847 3d04 	str.w	r3, [r7, #-4]!
 80118bc:	4840      	ldr	r0, [pc, #256]	; (80119c0 <EDIT_SetDecMode+0x134>)
 80118be:	4941      	ldr	r1, [pc, #260]	; (80119c4 <EDIT_SetDecMode+0x138>)
 80118c0:	f893 a088 	ldrb.w	sl, [r3, #136]	; 0x88
 80118c4:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
 80118c8:	2200      	movs	r2, #0
 80118ca:	f04f 0901 	mov.w	r9, #1
 80118ce:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80118d2:	6598      	str	r0, [r3, #88]	; 0x58
 80118d4:	63dc      	str	r4, [r3, #60]	; 0x3c
 80118d6:	641d      	str	r5, [r3, #64]	; 0x40
 80118d8:	f883 e044 	strb.w	lr, [r3, #68]	; 0x44
 80118dc:	f883 8056 	strb.w	r8, [r3, #86]	; 0x56
 80118e0:	65d9      	str	r1, [r3, #92]	; 0x5c
 80118e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80118e4:	4638      	mov	r0, r7
 80118e6:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 80118ea:	f00c f8b9 	bl	801da60 <GUI_ALLOC_UnlockH>
 80118ee:	f1ba 0f00 	cmp.w	sl, #0
 80118f2:	d035      	beq.n	8011960 <EDIT_SetDecMode+0xd4>
 80118f4:	2d00      	cmp	r5, #0
 80118f6:	bfbd      	ittte	lt
 80118f8:	426d      	neglt	r5, r5
 80118fa:	f04f 39ff 	movlt.w	r9, #4294967295
 80118fe:	2302      	movlt	r3, #2
 8011900:	464b      	movge	r3, r9
 8011902:	2d09      	cmp	r5, #9
 8011904:	dd09      	ble.n	801191a <EDIT_SetDecMode+0x8e>
 8011906:	4930      	ldr	r1, [pc, #192]	; (80119c8 <EDIT_SetDecMode+0x13c>)
 8011908:	fb81 0205 	smull	r0, r2, r1, r5
 801190c:	17ed      	asrs	r5, r5, #31
 801190e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 8011912:	2d09      	cmp	r5, #9
 8011914:	f103 0301 	add.w	r3, r3, #1
 8011918:	dcf6      	bgt.n	8011908 <EDIT_SetDecMode+0x7c>
 801191a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801191e:	d03d      	beq.n	801199c <EDIT_SetDecMode+0x110>
 8011920:	2c00      	cmp	r4, #0
 8011922:	db48      	blt.n	80119b6 <EDIT_SetDecMode+0x12a>
 8011924:	2501      	movs	r5, #1
 8011926:	4629      	mov	r1, r5
 8011928:	2c09      	cmp	r4, #9
 801192a:	dd09      	ble.n	8011940 <EDIT_SetDecMode+0xb4>
 801192c:	4826      	ldr	r0, [pc, #152]	; (80119c8 <EDIT_SetDecMode+0x13c>)
 801192e:	fb80 e204 	smull	lr, r2, r0, r4
 8011932:	17e4      	asrs	r4, r4, #31
 8011934:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
 8011938:	2c09      	cmp	r4, #9
 801193a:	f101 0101 	add.w	r1, r1, #1
 801193e:	dcf6      	bgt.n	801192e <EDIT_SetDecMode+0xa2>
 8011940:	3501      	adds	r5, #1
 8011942:	d025      	beq.n	8011990 <EDIT_SetDecMode+0x104>
 8011944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011946:	b10a      	cbz	r2, 801194c <EDIT_SetDecMode+0xc0>
 8011948:	3101      	adds	r1, #1
 801194a:	3301      	adds	r3, #1
 801194c:	f018 0f01 	tst.w	r8, #1
 8011950:	bf18      	it	ne
 8011952:	3301      	addne	r3, #1
 8011954:	428b      	cmp	r3, r1
 8011956:	bfa8      	it	ge
 8011958:	4619      	movge	r1, r3
 801195a:	4630      	mov	r0, r6
 801195c:	f000 fefa 	bl	8012754 <EDIT_SetMaxLen>
 8011960:	4630      	mov	r0, r6
 8011962:	f7ff fe29 	bl	80115b8 <_UpdateBuffer>
 8011966:	4630      	mov	r0, r6
 8011968:	f00c f868 	bl	801da3c <GUI_ALLOC_LockH>
 801196c:	9001      	str	r0, [sp, #4]
 801196e:	f000 f993 	bl	8011c98 <EDIT__GetCurrentChar>
 8011972:	4b16      	ldr	r3, [pc, #88]	; (80119cc <EDIT_SetDecMode+0x140>)
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	4283      	cmp	r3, r0
 8011978:	d016      	beq.n	80119a8 <EDIT_SetDecMode+0x11c>
 801197a:	4638      	mov	r0, r7
 801197c:	f00c f870 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011980:	4630      	mov	r0, r6
 8011982:	f004 fce5 	bl	8016350 <WM_InvalidateWindow>
 8011986:	f009 fccf 	bl	801b328 <GUI_Unlock>
 801198a:	b002      	add	sp, #8
 801198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011990:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011992:	1e4a      	subs	r2, r1, #1
 8011994:	4290      	cmp	r0, r2
 8011996:	bf08      	it	eq
 8011998:	3101      	addeq	r1, #1
 801199a:	e7d3      	b.n	8011944 <EDIT_SetDecMode+0xb8>
 801199c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801199e:	1e5a      	subs	r2, r3, #1
 80119a0:	4291      	cmp	r1, r2
 80119a2:	bf08      	it	eq
 80119a4:	3301      	addeq	r3, #1
 80119a6:	e7bb      	b.n	8011920 <EDIT_SetDecMode+0x94>
 80119a8:	9b01      	ldr	r3, [sp, #4]
 80119aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80119ac:	4630      	mov	r0, r6
 80119ae:	3101      	adds	r1, #1
 80119b0:	f000 f98e 	bl	8011cd0 <EDIT__SetCursorPos>
 80119b4:	e7e1      	b.n	801197a <EDIT_SetDecMode+0xee>
 80119b6:	4264      	negs	r4, r4
 80119b8:	f04f 35ff 	mov.w	r5, #4294967295
 80119bc:	2102      	movs	r1, #2
 80119be:	e7b3      	b.n	8011928 <EDIT_SetDecMode+0x9c>
 80119c0:	080116c1 	.word	0x080116c1
 80119c4:	080115b9 	.word	0x080115b9
 80119c8:	66666667 	.word	0x66666667
 80119cc:	2002cb80 	.word	0x2002cb80

080119d0 <_Paint>:
 80119d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	b08d      	sub	sp, #52	; 0x34
 80119d6:	2300      	movs	r3, #0
 80119d8:	4606      	mov	r6, r0
 80119da:	460c      	mov	r4, r1
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	f001 facf 	bl	8012f80 <WM__IsEnabled>
 80119e2:	4605      	mov	r5, r0
 80119e4:	4630      	mov	r0, r6
 80119e6:	f00c f829 	bl	801da3c <GUI_ALLOC_LockH>
 80119ea:	9001      	str	r0, [sp, #4]
 80119ec:	b12c      	cbz	r4, 80119fa <_Paint+0x2a>
 80119ee:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 80119f2:	f042 0204 	orr.w	r2, r2, #4
 80119f6:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
 80119fa:	f105 021e 	add.w	r2, r5, #30
 80119fe:	ae06      	add	r6, sp, #24
 8011a00:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011a04:	f008 fc0a 	bl	801a21c <LCD_SetBkColor>
 8011a08:	9b01      	ldr	r3, [sp, #4]
 8011a0a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011a0e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011a10:	f008 fc0c 	bl	801a22c <LCD_SetColor>
 8011a14:	9d01      	ldr	r5, [sp, #4]
 8011a16:	2300      	movs	r3, #0
 8011a18:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8011a1a:	9302      	str	r3, [sp, #8]
 8011a1c:	f00a ff8c 	bl	801c938 <GUI_SetFont>
 8011a20:	4628      	mov	r0, r5
 8011a22:	4631      	mov	r1, r6
 8011a24:	f7fc f8d4 	bl	800dbd0 <WIDGET__GetInsideRect>
 8011a28:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f040 80d2 	bne.w	8011bd4 <_Paint+0x204>
 8011a30:	f8dd c008 	ldr.w	ip, [sp, #8]
 8011a34:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011a38:	f10d 0920 	add.w	r9, sp, #32
 8011a3c:	e889 0003 	stmia.w	r9, {r0, r1}
 8011a40:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 8011a44:	f8bd e020 	ldrh.w	lr, [sp, #32]
 8011a48:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8011a4c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8011a4e:	4496      	add	lr, r2
 8011a50:	3f01      	subs	r7, #1
 8011a52:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8011a56:	f10e 0e01 	add.w	lr, lr, #1
 8011a5a:	1abf      	subs	r7, r7, r2
 8011a5c:	4660      	mov	r0, ip
 8011a5e:	4649      	mov	r1, r9
 8011a60:	4652      	mov	r2, sl
 8011a62:	f8ad e020 	strh.w	lr, [sp, #32]
 8011a66:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8011a6a:	f008 fc0d 	bl	801a288 <GUI__CalcTextRect>
 8011a6e:	f8b5 8032 	ldrh.w	r8, [r5, #50]	; 0x32
 8011a72:	f018 0801 	ands.w	r8, r8, #1
 8011a76:	d034      	beq.n	8011ae2 <_Paint+0x112>
 8011a78:	f895 8055 	ldrb.w	r8, [r5, #85]	; 0x55
 8011a7c:	9802      	ldr	r0, [sp, #8]
 8011a7e:	f1b8 0f00 	cmp.w	r8, #0
 8011a82:	bf08      	it	eq
 8011a84:	f04f 0801 	moveq.w	r8, #1
 8011a88:	f009 f9d2 	bl	801ae30 <GUI__GetNumChars>
 8011a8c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011a90:	4683      	mov	fp, r0
 8011a92:	f1be 0f00 	cmp.w	lr, #0
 8011a96:	d029      	beq.n	8011aec <_Paint+0x11c>
 8011a98:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	9203      	str	r2, [sp, #12]
 8011aa0:	b953      	cbnz	r3, 8011ab8 <_Paint+0xe8>
 8011aa2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8011aa4:	b933      	cbnz	r3, 8011ab4 <_Paint+0xe4>
 8011aa6:	4b79      	ldr	r3, [pc, #484]	; (8011c8c <_Paint+0x2bc>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	f000 80df 	beq.w	8011c6e <_Paint+0x29e>
 8011ab0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011ab2:	e006      	b.n	8011ac2 <_Paint+0xf2>
 8011ab4:	2c00      	cmp	r4, #0
 8011ab6:	d0f6      	beq.n	8011aa6 <_Paint+0xd6>
 8011ab8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011aba:	45bb      	cmp	fp, r7
 8011abc:	f300 809a 	bgt.w	8011bf4 <_Paint+0x224>
 8011ac0:	463b      	mov	r3, r7
 8011ac2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011ac6:	aa04      	add	r2, sp, #16
 8011ac8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011acc:	4677      	mov	r7, lr
 8011ace:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	465a      	mov	r2, fp
 8011ad8:	f008 fefa 	bl	801a8d0 <GUI__GetCursorPosX>
 8011adc:	4428      	add	r0, r5
 8011ade:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011ae2:	9b02      	ldr	r3, [sp, #8]
 8011ae4:	b113      	cbz	r3, 8011aec <_Paint+0x11c>
 8011ae6:	a802      	add	r0, sp, #8
 8011ae8:	f00b ffba 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011aec:	9b01      	ldr	r3, [sp, #4]
 8011aee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d17b      	bne.n	8011bec <_Paint+0x21c>
 8011af4:	2000      	movs	r0, #0
 8011af6:	f004 ff01 	bl	80168fc <WM__InitIVRSearch>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d049      	beq.n	8011b92 <_Paint+0x1c2>
 8011afe:	f8df b194 	ldr.w	fp, [pc, #404]	; 8011c94 <_Paint+0x2c4>
 8011b02:	e033      	b.n	8011b6c <_Paint+0x19c>
 8011b04:	9d01      	ldr	r5, [sp, #4]
 8011b06:	8e6f      	ldrh	r7, [r5, #50]	; 0x32
 8011b08:	07f8      	lsls	r0, r7, #31
 8011b0a:	d528      	bpl.n	8011b5e <_Paint+0x18e>
 8011b0c:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
 8011b10:	0719      	lsls	r1, r3, #28
 8011b12:	d54a      	bpl.n	8011baa <_Paint+0x1da>
 8011b14:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	4443      	add	r3, r8
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b22:	f002 fe45 	bl	80147b0 <WM_SetUserClipRect>
 8011b26:	a804      	add	r0, sp, #16
 8011b28:	f002 fe42 	bl	80147b0 <WM_SetUserClipRect>
 8011b2c:	9b01      	ldr	r3, [sp, #4]
 8011b2e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8011b32:	0752      	lsls	r2, r2, #29
 8011b34:	d445      	bmi.n	8011bc2 <_Paint+0x1f2>
 8011b36:	9800      	ldr	r0, [sp, #0]
 8011b38:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8011b3c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8011b40:	f009 ff5e 	bl	801ba00 <GUI_DispStringAt>
 8011b44:	f8db 3000 	ldr.w	r3, [fp]
 8011b48:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011b4c:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8011b50:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011b54:	eb00 0208 	add.w	r2, r0, r8
 8011b58:	3a01      	subs	r2, #1
 8011b5a:	f00a fc8d 	bl	801c478 <GUI__InvertRectColors>
 8011b5e:	2000      	movs	r0, #0
 8011b60:	f002 fe26 	bl	80147b0 <WM_SetUserClipRect>
 8011b64:	b974      	cbnz	r4, 8011b84 <_Paint+0x1b4>
 8011b66:	f004 fda3 	bl	80166b0 <WM__GetNextIVR>
 8011b6a:	b190      	cbz	r0, 8011b92 <_Paint+0x1c2>
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f002 fe1f 	bl	80147b0 <WM_SetUserClipRect>
 8011b72:	2c00      	cmp	r4, #0
 8011b74:	d0c6      	beq.n	8011b04 <_Paint+0x134>
 8011b76:	9800      	ldr	r0, [sp, #0]
 8011b78:	4631      	mov	r1, r6
 8011b7a:	464a      	mov	r2, r9
 8011b7c:	4653      	mov	r3, sl
 8011b7e:	f7fc f83d 	bl	800dbfc <WIDGET__FillStringInRect>
 8011b82:	e7bf      	b.n	8011b04 <_Paint+0x134>
 8011b84:	9801      	ldr	r0, [sp, #4]
 8011b86:	f7fc fa59 	bl	800e03c <WIDGET__EFFECT_DrawDown>
 8011b8a:	f004 fd91 	bl	80166b0 <WM__GetNextIVR>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d1ec      	bne.n	8011b6c <_Paint+0x19c>
 8011b92:	bb24      	cbnz	r4, 8011bde <_Paint+0x20e>
 8011b94:	a801      	add	r0, sp, #4
 8011b96:	f00b ff63 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011b9a:	9b00      	ldr	r3, [sp, #0]
 8011b9c:	b113      	cbz	r3, 8011ba4 <_Paint+0x1d4>
 8011b9e:	4668      	mov	r0, sp
 8011ba0:	f00b ff5e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011ba4:	b00d      	add	sp, #52	; 0x34
 8011ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011baa:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8011bae:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011bb2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011bb6:	eb00 0208 	add.w	r2, r0, r8
 8011bba:	3a01      	subs	r2, #1
 8011bbc:	f00a fc5c 	bl	801c478 <GUI__InvertRectColors>
 8011bc0:	e7cd      	b.n	8011b5e <_Paint+0x18e>
 8011bc2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8011bc4:	f00a fe56 	bl	801c874 <GUI_SetColor>
 8011bc8:	9b01      	ldr	r3, [sp, #4]
 8011bca:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8011bce:	f00a fe45 	bl	801c85c <GUI_SetBkColor>
 8011bd2:	e7b0      	b.n	8011b36 <_Paint+0x166>
 8011bd4:	f00b ff32 	bl	801da3c <GUI_ALLOC_LockH>
 8011bd8:	9002      	str	r0, [sp, #8]
 8011bda:	4684      	mov	ip, r0
 8011bdc:	e72a      	b.n	8011a34 <_Paint+0x64>
 8011bde:	9b01      	ldr	r3, [sp, #4]
 8011be0:	2100      	movs	r1, #0
 8011be2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8011be6:	f001 fb7b 	bl	80132e0 <WM_RestartTimer>
 8011bea:	e7d3      	b.n	8011b94 <_Paint+0x1c4>
 8011bec:	f00b ff26 	bl	801da3c <GUI_ALLOC_LockH>
 8011bf0:	9000      	str	r0, [sp, #0]
 8011bf2:	e77f      	b.n	8011af4 <_Paint+0x124>
 8011bf4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8011bf6:	b1f3      	cbz	r3, 8011c36 <_Paint+0x266>
 8011bf8:	b1ec      	cbz	r4, 8011c36 <_Paint+0x266>
 8011bfa:	443b      	add	r3, r7
 8011bfc:	429f      	cmp	r7, r3
 8011bfe:	da41      	bge.n	8011c84 <_Paint+0x2b4>
 8011c00:	4670      	mov	r0, lr
 8011c02:	f04f 0800 	mov.w	r8, #0
 8011c06:	e000      	b.n	8011c0a <_Paint+0x23a>
 8011c08:	9802      	ldr	r0, [sp, #8]
 8011c0a:	4639      	mov	r1, r7
 8011c0c:	465a      	mov	r2, fp
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f008 fe72 	bl	801a8f8 <GUI__GetCursorCharacter>
 8011c14:	f00b f8c4 	bl	801cda0 <GUI_GetCharDistX>
 8011c18:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011c1a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8011c1c:	3701      	adds	r7, #1
 8011c1e:	441a      	add	r2, r3
 8011c20:	4297      	cmp	r7, r2
 8011c22:	4480      	add	r8, r0
 8011c24:	dbf0      	blt.n	8011c08 <_Paint+0x238>
 8011c26:	9d03      	ldr	r5, [sp, #12]
 8011c28:	9f02      	ldr	r7, [sp, #8]
 8011c2a:	f1b8 0f00 	cmp.w	r8, #0
 8011c2e:	d10e      	bne.n	8011c4e <_Paint+0x27e>
 8011c30:	f04f 0801 	mov.w	r8, #1
 8011c34:	e00b      	b.n	8011c4e <_Paint+0x27e>
 8011c36:	4639      	mov	r1, r7
 8011c38:	ab03      	add	r3, sp, #12
 8011c3a:	4670      	mov	r0, lr
 8011c3c:	465a      	mov	r2, fp
 8011c3e:	f008 fe5b 	bl	801a8f8 <GUI__GetCursorCharacter>
 8011c42:	f00b f8ad 	bl	801cda0 <GUI_GetCharDistX>
 8011c46:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011c48:	9f02      	ldr	r7, [sp, #8]
 8011c4a:	9d03      	ldr	r5, [sp, #12]
 8011c4c:	4680      	mov	r8, r0
 8011c4e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011c52:	aa04      	add	r2, sp, #16
 8011c54:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c58:	2d00      	cmp	r5, #0
 8011c5a:	f43f af38 	beq.w	8011ace <_Paint+0xfe>
 8011c5e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011c62:	ebc8 0505 	rsb	r5, r8, r5
 8011c66:	b2ad      	uxth	r5, r5
 8011c68:	f8ad 5010 	strh.w	r5, [sp, #16]
 8011c6c:	e731      	b.n	8011ad2 <_Paint+0x102>
 8011c6e:	4b08      	ldr	r3, [pc, #32]	; (8011c90 <_Paint+0x2c0>)
 8011c70:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4670      	mov	r0, lr
 8011c76:	4659      	mov	r1, fp
 8011c78:	4798      	blx	r3
 8011c7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011c7c:	9f02      	ldr	r7, [sp, #8]
 8011c7e:	9003      	str	r0, [sp, #12]
 8011c80:	4605      	mov	r5, r0
 8011c82:	e7e4      	b.n	8011c4e <_Paint+0x27e>
 8011c84:	463b      	mov	r3, r7
 8011c86:	f04f 0801 	mov.w	r8, #1
 8011c8a:	e71a      	b.n	8011ac2 <_Paint+0xf2>
 8011c8c:	2002cb54 	.word	0x2002cb54
 8011c90:	2002cb68 	.word	0x2002cb68
 8011c94:	2000027c 	.word	0x2000027c

08011c98 <EDIT__GetCurrentChar>:
 8011c98:	b570      	push	{r4, r5, r6, lr}
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	b918      	cbnz	r0, 8011caa <EDIT__GetCurrentChar+0x12>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	b002      	add	sp, #8
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	f00b fec7 	bl	801da3c <GUI_ALLOC_LockH>
 8011cae:	ad02      	add	r5, sp, #8
 8011cb0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011cb2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	f009 f88c 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8011cbc:	4430      	add	r0, r6
 8011cbe:	f009 f84b 	bl	801ad58 <GUI_UC_GetCharCode>
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f00b fecb 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011cca:	4620      	mov	r0, r4
 8011ccc:	b002      	add	sp, #8
 8011cce:	bd70      	pop	{r4, r5, r6, pc}

08011cd0 <EDIT__SetCursorPos>:
 8011cd0:	b530      	push	{r4, r5, lr}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	f00b feb1 	bl	801da3c <GUI_ALLOC_LockH>
 8011cda:	9000      	str	r0, [sp, #0]
 8011cdc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011cde:	b1f8      	cbz	r0, 8011d20 <EDIT__SetCursorPos+0x50>
 8011ce0:	f00b feac 	bl	801da3c <GUI_ALLOC_LockH>
 8011ce4:	9001      	str	r0, [sp, #4]
 8011ce6:	f009 f8a3 	bl	801ae30 <GUI__GetNumChars>
 8011cea:	9b00      	ldr	r3, [sp, #0]
 8011cec:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8011cf0:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8011cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011cf6:	2900      	cmp	r1, #0
 8011cf8:	bf0c      	ite	eq
 8011cfa:	4629      	moveq	r1, r5
 8011cfc:	1e69      	subne	r1, r5, #1
 8011cfe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011d02:	428c      	cmp	r4, r1
 8011d04:	bfa8      	it	ge
 8011d06:	460c      	movge	r4, r1
 8011d08:	4284      	cmp	r4, r0
 8011d0a:	bfb8      	it	lt
 8011d0c:	4620      	movlt	r0, r4
 8011d0e:	4282      	cmp	r2, r0
 8011d10:	f04f 0200 	mov.w	r2, #0
 8011d14:	bf18      	it	ne
 8011d16:	64d8      	strne	r0, [r3, #76]	; 0x4c
 8011d18:	651a      	str	r2, [r3, #80]	; 0x50
 8011d1a:	a801      	add	r0, sp, #4
 8011d1c:	f00b fea0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011d20:	4668      	mov	r0, sp
 8011d22:	f00b fe9d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011d26:	b003      	add	sp, #12
 8011d28:	bd30      	pop	{r4, r5, pc}
 8011d2a:	bf00      	nop

08011d2c <EDIT_CreateEx>:
 8011d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d30:	b089      	sub	sp, #36	; 0x24
 8011d32:	4683      	mov	fp, r0
 8011d34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011d36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011d38:	4e42      	ldr	r6, [pc, #264]	; (8011e44 <EDIT_CreateEx+0x118>)
 8011d3a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8011d3c:	468a      	mov	sl, r1
 8011d3e:	4691      	mov	r9, r2
 8011d40:	4698      	mov	r8, r3
 8011d42:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8011d46:	f009 faf9 	bl	801b33c <GUI_Lock>
 8011d4a:	9400      	str	r4, [sp, #0]
 8011d4c:	2460      	movs	r4, #96	; 0x60
 8011d4e:	9602      	str	r6, [sp, #8]
 8011d50:	9501      	str	r5, [sp, #4]
 8011d52:	4658      	mov	r0, fp
 8011d54:	4651      	mov	r1, sl
 8011d56:	464a      	mov	r2, r9
 8011d58:	4643      	mov	r3, r8
 8011d5a:	9403      	str	r4, [sp, #12]
 8011d5c:	f004 fb54 	bl	8016408 <WM_CreateWindowAsChild>
 8011d60:	4606      	mov	r6, r0
 8011d62:	b928      	cbnz	r0, 8011d70 <EDIT_CreateEx+0x44>
 8011d64:	f009 fae0 	bl	801b328 <GUI_Unlock>
 8011d68:	4630      	mov	r0, r6
 8011d6a:	b009      	add	sp, #36	; 0x24
 8011d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d70:	f00b fe64 	bl	801da3c <GUI_ALLOC_LockH>
 8011d74:	4d34      	ldr	r5, [pc, #208]	; (8011e48 <EDIT_CreateEx+0x11c>)
 8011d76:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011d78:	9005      	str	r0, [sp, #20]
 8011d7a:	2210      	movs	r2, #16
 8011d7c:	f7fb ff36 	bl	800dbec <WIDGET__Init>
 8011d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d82:	f8dd e014 	ldr.w	lr, [sp, #20]
 8011d86:	4474      	add	r4, lr
 8011d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d8e:	682b      	ldr	r3, [r5, #0]
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	1c7b      	adds	r3, r7, #1
 8011d94:	bf18      	it	ne
 8011d96:	2301      	movne	r3, #1
 8011d98:	2201      	movs	r2, #1
 8011d9a:	2f00      	cmp	r7, #0
 8011d9c:	f88e 2055 	strb.w	r2, [lr, #85]	; 0x55
 8011da0:	f88e 3088 	strb.w	r3, [lr, #136]	; 0x88
 8011da4:	dd4a      	ble.n	8011e3c <EDIT_CreateEx+0x110>
 8011da6:	b2bf      	uxth	r7, r7
 8011da8:	b23d      	sxth	r5, r7
 8011daa:	4415      	add	r5, r2
 8011dac:	2300      	movs	r3, #0
 8011dae:	f8ae 7038 	strh.w	r7, [lr, #56]	; 0x38
 8011db2:	f8ae 303a 	strh.w	r3, [lr, #58]	; 0x3a
 8011db6:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8011dba:	a805      	add	r0, sp, #20
 8011dbc:	f00b fe50 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f00b fe3b 	bl	801da3c <GUI_ALLOC_LockH>
 8011dc6:	ac08      	add	r4, sp, #32
 8011dc8:	4603      	mov	r3, r0
 8011dca:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 8011dcc:	f844 0d08 	str.w	r0, [r4, #-8]!
 8011dd0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8011dd2:	4415      	add	r5, r2
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f00b fe43 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011dda:	4638      	mov	r0, r7
 8011ddc:	4629      	mov	r1, r5
 8011dde:	f00b fff3 	bl	801ddc8 <GUI_ALLOC_Realloc>
 8011de2:	4680      	mov	r8, r0
 8011de4:	b300      	cbz	r0, 8011e28 <EDIT_CreateEx+0xfc>
 8011de6:	b187      	cbz	r7, 8011e0a <EDIT_CreateEx+0xde>
 8011de8:	4630      	mov	r0, r6
 8011dea:	f00b fe27 	bl	801da3c <GUI_ALLOC_LockH>
 8011dee:	4603      	mov	r3, r0
 8011df0:	4620      	mov	r0, r4
 8011df2:	875d      	strh	r5, [r3, #58]	; 0x3a
 8011df4:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
 8011df8:	9306      	str	r3, [sp, #24]
 8011dfa:	f00b fe31 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011dfe:	f009 fa93 	bl	801b328 <GUI_Unlock>
 8011e02:	4630      	mov	r0, r6
 8011e04:	b009      	add	sp, #36	; 0x24
 8011e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0a:	f00b fe17 	bl	801da3c <GUI_ALLOC_LockH>
 8011e0e:	f10d 0920 	add.w	r9, sp, #32
 8011e12:	4b0e      	ldr	r3, [pc, #56]	; (8011e4c <EDIT_CreateEx+0x120>)
 8011e14:	f849 0d04 	str.w	r0, [r9, #-4]!
 8011e18:	4639      	mov	r1, r7
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	462a      	mov	r2, r5
 8011e1e:	4798      	blx	r3
 8011e20:	4648      	mov	r0, r9
 8011e22:	f00b fe1d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011e26:	e7df      	b.n	8011de8 <EDIT_CreateEx+0xbc>
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f004 fbe5 	bl	80165f8 <WM_DeleteWindow>
 8011e2e:	f009 fa7b 	bl	801b328 <GUI_Unlock>
 8011e32:	4646      	mov	r6, r8
 8011e34:	4630      	mov	r0, r6
 8011e36:	b009      	add	sp, #36	; 0x24
 8011e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e3c:	2509      	movs	r5, #9
 8011e3e:	2708      	movs	r7, #8
 8011e40:	e7b4      	b.n	8011dac <EDIT_CreateEx+0x80>
 8011e42:	bf00      	nop
 8011e44:	08012505 	.word	0x08012505
 8011e48:	200001f0 	.word	0x200001f0
 8011e4c:	20000250 	.word	0x20000250

08011e50 <EDIT_SetCursorAtPixel>:
 8011e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	b084      	sub	sp, #16
 8011e58:	460d      	mov	r5, r1
 8011e5a:	b910      	cbnz	r0, 8011e62 <EDIT_SetCursorAtPixel+0x12>
 8011e5c:	b004      	add	sp, #16
 8011e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e62:	f009 fa6b 	bl	801b33c <GUI_Lock>
 8011e66:	4620      	mov	r0, r4
 8011e68:	f00b fde8 	bl	801da3c <GUI_ALLOC_LockH>
 8011e6c:	9001      	str	r0, [sp, #4]
 8011e6e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011e70:	b938      	cbnz	r0, 8011e82 <EDIT_SetCursorAtPixel+0x32>
 8011e72:	a801      	add	r0, sp, #4
 8011e74:	f00b fdf4 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011e78:	f009 fa56 	bl	801b328 <GUI_Unlock>
 8011e7c:	b004      	add	sp, #16
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	f00b fddb 	bl	801da3c <GUI_ALLOC_LockH>
 8011e86:	9b01      	ldr	r3, [sp, #4]
 8011e88:	9000      	str	r0, [sp, #0]
 8011e8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011e8c:	f00a fd54 	bl	801c938 <GUI_SetFont>
 8011e90:	4607      	mov	r7, r0
 8011e92:	4620      	mov	r0, r4
 8011e94:	f002 fe28 	bl	8014ae8 <WM_GetWindowSizeX>
 8011e98:	4680      	mov	r8, r0
 8011e9a:	9800      	ldr	r0, [sp, #0]
 8011e9c:	f009 ff72 	bl	801bd84 <GUI_GetStringDistX>
 8011ea0:	9b01      	ldr	r3, [sp, #4]
 8011ea2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011ea4:	f002 0203 	and.w	r2, r2, #3
 8011ea8:	2a01      	cmp	r2, #1
 8011eaa:	4606      	mov	r6, r0
 8011eac:	d059      	beq.n	8011f62 <EDIT_SetCursorAtPixel+0x112>
 8011eae:	2a02      	cmp	r2, #2
 8011eb0:	d021      	beq.n	8011ef6 <EDIT_SetCursorAtPixel+0xa6>
 8011eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eb6:	6812      	ldr	r2, [r2, #0]
 8011eb8:	43db      	mvns	r3, r3
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	441d      	add	r5, r3
 8011ebe:	9800      	ldr	r0, [sp, #0]
 8011ec0:	f008 ffb6 	bl	801ae30 <GUI__GetNumChars>
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	4680      	mov	r8, r0
 8011ec8:	db6d      	blt.n	8011fa6 <EDIT_SetCursorAtPixel+0x156>
 8011eca:	42b5      	cmp	r5, r6
 8011ecc:	dd1c      	ble.n	8011f08 <EDIT_SetCursorAtPixel+0xb8>
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f00b fdb4 	bl	801da3c <GUI_ALLOC_LockH>
 8011ed4:	9002      	str	r0, [sp, #8]
 8011ed6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d14a      	bne.n	8011f72 <EDIT_SetCursorAtPixel+0x122>
 8011edc:	a802      	add	r0, sp, #8
 8011ede:	f00b fdbf 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011ee2:	4668      	mov	r0, sp
 8011ee4:	f00b fdbc 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f00a fd25 	bl	801c938 <GUI_SetFont>
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f004 fa2e 	bl	8016350 <WM_InvalidateWindow>
 8011ef4:	e7bd      	b.n	8011e72 <EDIT_SetCursorAtPixel+0x22>
 8011ef6:	ebc0 0808 	rsb	r8, r0, r8
 8011efa:	f108 0801 	add.w	r8, r8, #1
 8011efe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8011f02:	eba5 0568 	sub.w	r5, r5, r8, asr #1
 8011f06:	e7da      	b.n	8011ebe <EDIT_SetCursorAtPixel+0x6e>
 8011f08:	4629      	mov	r1, r5
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	9800      	ldr	r0, [sp, #0]
 8011f0e:	f008 fce9 	bl	801a8e4 <GUI__GetCursorPosChar>
 8011f12:	4605      	mov	r5, r0
 8011f14:	4620      	mov	r0, r4
 8011f16:	f00b fd91 	bl	801da3c <GUI_ALLOC_LockH>
 8011f1a:	9002      	str	r0, [sp, #8]
 8011f1c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d0dc      	beq.n	8011edc <EDIT_SetCursorAtPixel+0x8c>
 8011f22:	f00b fd8b 	bl	801da3c <GUI_ALLOC_LockH>
 8011f26:	9003      	str	r0, [sp, #12]
 8011f28:	f008 ff82 	bl	801ae30 <GUI__GetNumChars>
 8011f2c:	9b02      	ldr	r3, [sp, #8]
 8011f2e:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 8011f32:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8011f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f38:	2900      	cmp	r1, #0
 8011f3a:	bf0c      	ite	eq
 8011f3c:	4631      	moveq	r1, r6
 8011f3e:	1e71      	subne	r1, r6, #1
 8011f40:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011f44:	428d      	cmp	r5, r1
 8011f46:	bfa8      	it	ge
 8011f48:	460d      	movge	r5, r1
 8011f4a:	4285      	cmp	r5, r0
 8011f4c:	bfb8      	it	lt
 8011f4e:	4628      	movlt	r0, r5
 8011f50:	4282      	cmp	r2, r0
 8011f52:	d000      	beq.n	8011f56 <EDIT_SetCursorAtPixel+0x106>
 8011f54:	64d8      	str	r0, [r3, #76]	; 0x4c
 8011f56:	2200      	movs	r2, #0
 8011f58:	651a      	str	r2, [r3, #80]	; 0x50
 8011f5a:	a803      	add	r0, sp, #12
 8011f5c:	f00b fd80 	bl	801da60 <GUI_ALLOC_UnlockH>
 8011f60:	e7bc      	b.n	8011edc <EDIT_SetCursorAtPixel+0x8c>
 8011f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f64:	ebc8 0800 	rsb	r8, r8, r0
 8011f68:	43db      	mvns	r3, r3
 8011f6a:	ebc3 0808 	rsb	r8, r3, r8
 8011f6e:	4445      	add	r5, r8
 8011f70:	e7a5      	b.n	8011ebe <EDIT_SetCursorAtPixel+0x6e>
 8011f72:	f00b fd63 	bl	801da3c <GUI_ALLOC_LockH>
 8011f76:	9003      	str	r0, [sp, #12]
 8011f78:	f008 ff5a 	bl	801ae30 <GUI__GetNumChars>
 8011f7c:	9b02      	ldr	r3, [sp, #8]
 8011f7e:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8011f82:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8011f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f88:	2900      	cmp	r1, #0
 8011f8a:	bf0c      	ite	eq
 8011f8c:	4629      	moveq	r1, r5
 8011f8e:	1e69      	subne	r1, r5, #1
 8011f90:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8011f94:	4588      	cmp	r8, r1
 8011f96:	bfa8      	it	ge
 8011f98:	4688      	movge	r8, r1
 8011f9a:	4580      	cmp	r8, r0
 8011f9c:	bfb8      	it	lt
 8011f9e:	4640      	movlt	r0, r8
 8011fa0:	4282      	cmp	r2, r0
 8011fa2:	d1d7      	bne.n	8011f54 <EDIT_SetCursorAtPixel+0x104>
 8011fa4:	e7d7      	b.n	8011f56 <EDIT_SetCursorAtPixel+0x106>
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f00b fd48 	bl	801da3c <GUI_ALLOC_LockH>
 8011fac:	9002      	str	r0, [sp, #8]
 8011fae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d093      	beq.n	8011edc <EDIT_SetCursorAtPixel+0x8c>
 8011fb4:	f00b fd42 	bl	801da3c <GUI_ALLOC_LockH>
 8011fb8:	9003      	str	r0, [sp, #12]
 8011fba:	f008 ff39 	bl	801ae30 <GUI__GetNumChars>
 8011fbe:	9b02      	ldr	r3, [sp, #8]
 8011fc0:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8011fc4:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8011fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fca:	2900      	cmp	r1, #0
 8011fcc:	bf0c      	ite	eq
 8011fce:	4629      	moveq	r1, r5
 8011fd0:	1e69      	subne	r1, r5, #1
 8011fd2:	ea01 71e1 	and.w	r1, r1, r1, asr #31
 8011fd6:	4281      	cmp	r1, r0
 8011fd8:	bfb8      	it	lt
 8011fda:	4608      	movlt	r0, r1
 8011fdc:	4282      	cmp	r2, r0
 8011fde:	d1b9      	bne.n	8011f54 <EDIT_SetCursorAtPixel+0x104>
 8011fe0:	e7b9      	b.n	8011f56 <EDIT_SetCursorAtPixel+0x106>
 8011fe2:	bf00      	nop

08011fe4 <EDIT_AddKey>:
 8011fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe8:	4683      	mov	fp, r0
 8011fea:	b089      	sub	sp, #36	; 0x24
 8011fec:	460e      	mov	r6, r1
 8011fee:	b910      	cbnz	r0, 8011ff6 <EDIT_AddKey+0x12>
 8011ff0:	b009      	add	sp, #36	; 0x24
 8011ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff6:	f009 f9a1 	bl	801b33c <GUI_Lock>
 8011ffa:	4658      	mov	r0, fp
 8011ffc:	f00b fd1e 	bl	801da3c <GUI_ALLOC_LockH>
 8012000:	ad08      	add	r5, sp, #32
 8012002:	4602      	mov	r2, r0
 8012004:	f845 0d18 	str.w	r0, [r5, #-24]!
 8012008:	6d87      	ldr	r7, [r0, #88]	; 0x58
 801200a:	f892 9054 	ldrb.w	r9, [r2, #84]	; 0x54
 801200e:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 8012012:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8012014:	4628      	mov	r0, r5
 8012016:	f00b fd23 	bl	801da60 <GUI_ALLOC_UnlockH>
 801201a:	b157      	cbz	r7, 8012032 <EDIT_AddKey+0x4e>
 801201c:	4631      	mov	r1, r6
 801201e:	4658      	mov	r0, fp
 8012020:	47b8      	blx	r7
 8012022:	4658      	mov	r0, fp
 8012024:	f004 f994 	bl	8016350 <WM_InvalidateWindow>
 8012028:	f009 f97e 	bl	801b328 <GUI_Unlock>
 801202c:	b009      	add	sp, #36	; 0x24
 801202e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012032:	f1a6 0208 	sub.w	r2, r6, #8
 8012036:	2a16      	cmp	r2, #22
 8012038:	f200 8100 	bhi.w	801223c <EDIT_AddKey+0x258>
 801203c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012040:	00fe009a 	.word	0x00fe009a
 8012044:	00fe00fe 	.word	0x00fe00fe
 8012048:	00fe00fe 	.word	0x00fe00fe
 801204c:	00fe00fe 	.word	0x00fe00fe
 8012050:	007f00d5 	.word	0x007f00d5
 8012054:	00460073 	.word	0x00460073
 8012058:	00fe00fe 	.word	0x00fe00fe
 801205c:	00fe00fe 	.word	0x00fe00fe
 8012060:	00fe00fe 	.word	0x00fe00fe
 8012064:	00fe00fe 	.word	0x00fe00fe
 8012068:	003700fe 	.word	0x003700fe
 801206c:	0017      	.short	0x0017
 801206e:	4658      	mov	r0, fp
 8012070:	f00b fce4 	bl	801da3c <GUI_ALLOC_LockH>
 8012074:	4602      	mov	r2, r0
 8012076:	a808      	add	r0, sp, #32
 8012078:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801207a:	f840 2d08 	str.w	r2, [r0, #-8]!
 801207e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8012080:	f00b fcee 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012084:	2c00      	cmp	r4, #0
 8012086:	d0cc      	beq.n	8012022 <EDIT_AddKey+0x3e>
 8012088:	4620      	mov	r0, r4
 801208a:	f00b fcd7 	bl	801da3c <GUI_ALLOC_LockH>
 801208e:	4629      	mov	r1, r5
 8012090:	4604      	mov	r4, r0
 8012092:	9007      	str	r0, [sp, #28]
 8012094:	f008 fe9e 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8012098:	4605      	mov	r5, r0
 801209a:	4620      	mov	r0, r4
 801209c:	f7ee f8c2 	bl	8000224 <strlen>
 80120a0:	4285      	cmp	r5, r0
 80120a2:	f0c0 81b7 	bcc.w	8012414 <EDIT_AddKey+0x430>
 80120a6:	a807      	add	r0, sp, #28
 80120a8:	f00b fcda 	bl	801da60 <GUI_ALLOC_UnlockH>
 80120ac:	e7b9      	b.n	8012022 <EDIT_AddKey+0x3e>
 80120ae:	4658      	mov	r0, fp
 80120b0:	f00b fcc4 	bl	801da3c <GUI_ALLOC_LockH>
 80120b4:	f1b9 0f01 	cmp.w	r9, #1
 80120b8:	9002      	str	r0, [sp, #8]
 80120ba:	f040 8171 	bne.w	80123a0 <EDIT_AddKey+0x3bc>
 80120be:	2200      	movs	r2, #0
 80120c0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80120c4:	4628      	mov	r0, r5
 80120c6:	f00b fccb 	bl	801da60 <GUI_ALLOC_UnlockH>
 80120ca:	e7aa      	b.n	8012022 <EDIT_AddKey+0x3e>
 80120cc:	f1b8 0f00 	cmp.w	r8, #0
 80120d0:	d0a7      	beq.n	8012022 <EDIT_AddKey+0x3e>
 80120d2:	4640      	mov	r0, r8
 80120d4:	f00b fcb2 	bl	801da3c <GUI_ALLOC_LockH>
 80120d8:	4621      	mov	r1, r4
 80120da:	4605      	mov	r5, r0
 80120dc:	9007      	str	r0, [sp, #28]
 80120de:	f008 fe79 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 80120e2:	4405      	add	r5, r0
 80120e4:	4628      	mov	r0, r5
 80120e6:	f008 fe37 	bl	801ad58 <GUI_UC_GetCharCode>
 80120ea:	2200      	movs	r2, #0
 80120ec:	4606      	mov	r6, r0
 80120ee:	f8ad 2018 	strh.w	r2, [sp, #24]
 80120f2:	f88d 201a 	strb.w	r2, [sp, #26]
 80120f6:	f008 fe51 	bl	801ad9c <GUI_UC__CalcSizeOfChar>
 80120fa:	3e01      	subs	r6, #1
 80120fc:	4604      	mov	r4, r0
 80120fe:	b2b6      	uxth	r6, r6
 8012100:	4630      	mov	r0, r6
 8012102:	f008 fe4b 	bl	801ad9c <GUI_UC__CalcSizeOfChar>
 8012106:	4284      	cmp	r4, r0
 8012108:	d1cd      	bne.n	80120a6 <EDIT_AddKey+0xc2>
 801210a:	4631      	mov	r1, r6
 801210c:	a806      	add	r0, sp, #24
 801210e:	f008 fe33 	bl	801ad78 <GUI_UC_Encode>
 8012112:	a906      	add	r1, sp, #24
 8012114:	4628      	mov	r0, r5
 8012116:	4622      	mov	r2, r4
 8012118:	f010 fbec 	bl	80228f4 <memcpy>
 801211c:	4658      	mov	r0, fp
 801211e:	2105      	movs	r1, #5
 8012120:	f002 fa1a 	bl	8014558 <WM_NotifyParent>
 8012124:	e7bf      	b.n	80120a6 <EDIT_AddKey+0xc2>
 8012126:	4658      	mov	r0, fp
 8012128:	f00b fc88 	bl	801da3c <GUI_ALLOC_LockH>
 801212c:	9006      	str	r0, [sp, #24]
 801212e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012130:	2800      	cmp	r0, #0
 8012132:	f040 8162 	bne.w	80123fa <EDIT_AddKey+0x416>
 8012136:	a806      	add	r0, sp, #24
 8012138:	f00b fc92 	bl	801da60 <GUI_ALLOC_UnlockH>
 801213c:	e771      	b.n	8012022 <EDIT_AddKey+0x3e>
 801213e:	f1b8 0f00 	cmp.w	r8, #0
 8012142:	f43f af6e 	beq.w	8012022 <EDIT_AddKey+0x3e>
 8012146:	4640      	mov	r0, r8
 8012148:	f00b fc78 	bl	801da3c <GUI_ALLOC_LockH>
 801214c:	4621      	mov	r1, r4
 801214e:	4605      	mov	r5, r0
 8012150:	9007      	str	r0, [sp, #28]
 8012152:	f008 fe3f 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8012156:	4405      	add	r5, r0
 8012158:	4628      	mov	r0, r5
 801215a:	f008 fdfd 	bl	801ad58 <GUI_UC_GetCharCode>
 801215e:	2200      	movs	r2, #0
 8012160:	4606      	mov	r6, r0
 8012162:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012166:	f88d 201a 	strb.w	r2, [sp, #26]
 801216a:	f008 fe17 	bl	801ad9c <GUI_UC__CalcSizeOfChar>
 801216e:	3601      	adds	r6, #1
 8012170:	4604      	mov	r4, r0
 8012172:	e7c4      	b.n	80120fe <EDIT_AddKey+0x11a>
 8012174:	2c00      	cmp	r4, #0
 8012176:	f43f af54 	beq.w	8012022 <EDIT_AddKey+0x3e>
 801217a:	4658      	mov	r0, fp
 801217c:	f00b fc5e 	bl	801da3c <GUI_ALLOC_LockH>
 8012180:	9006      	str	r0, [sp, #24]
 8012182:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012184:	b300      	cbz	r0, 80121c8 <EDIT_AddKey+0x1e4>
 8012186:	f00b fc59 	bl	801da3c <GUI_ALLOC_LockH>
 801218a:	9007      	str	r0, [sp, #28]
 801218c:	f008 fe50 	bl	801ae30 <GUI__GetNumChars>
 8012190:	9a06      	ldr	r2, [sp, #24]
 8012192:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 8012196:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 801219a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801219c:	3c01      	subs	r4, #1
 801219e:	2d00      	cmp	r5, #0
 80121a0:	bf0c      	ite	eq
 80121a2:	4635      	moveq	r5, r6
 80121a4:	1e75      	subne	r5, r6, #1
 80121a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80121aa:	42a5      	cmp	r5, r4
 80121ac:	bfb8      	it	lt
 80121ae:	462c      	movlt	r4, r5
 80121b0:	4284      	cmp	r4, r0
 80121b2:	bfb8      	it	lt
 80121b4:	4620      	movlt	r0, r4
 80121b6:	4281      	cmp	r1, r0
 80121b8:	f04f 0100 	mov.w	r1, #0
 80121bc:	bf18      	it	ne
 80121be:	64d0      	strne	r0, [r2, #76]	; 0x4c
 80121c0:	6511      	str	r1, [r2, #80]	; 0x50
 80121c2:	a807      	add	r0, sp, #28
 80121c4:	f00b fc4c 	bl	801da60 <GUI_ALLOC_UnlockH>
 80121c8:	a806      	add	r0, sp, #24
 80121ca:	f00b fc49 	bl	801da60 <GUI_ALLOC_UnlockH>
 80121ce:	4658      	mov	r0, fp
 80121d0:	f00b fc34 	bl	801da3c <GUI_ALLOC_LockH>
 80121d4:	4602      	mov	r2, r0
 80121d6:	a806      	add	r0, sp, #24
 80121d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80121da:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 80121dc:	9206      	str	r2, [sp, #24]
 80121de:	f00b fc3f 	bl	801da60 <GUI_ALLOC_UnlockH>
 80121e2:	2c00      	cmp	r4, #0
 80121e4:	f43f af1d 	beq.w	8012022 <EDIT_AddKey+0x3e>
 80121e8:	e74e      	b.n	8012088 <EDIT_AddKey+0xa4>
 80121ea:	4658      	mov	r0, fp
 80121ec:	f00b fc26 	bl	801da3c <GUI_ALLOC_LockH>
 80121f0:	9006      	str	r0, [sp, #24]
 80121f2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d09e      	beq.n	8012136 <EDIT_AddKey+0x152>
 80121f8:	f00b fc20 	bl	801da3c <GUI_ALLOC_LockH>
 80121fc:	9007      	str	r0, [sp, #28]
 80121fe:	f008 fe17 	bl	801ae30 <GUI__GetNumChars>
 8012202:	9a06      	ldr	r2, [sp, #24]
 8012204:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 8012208:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 801220c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801220e:	3c01      	subs	r4, #1
 8012210:	2d00      	cmp	r5, #0
 8012212:	bf0c      	ite	eq
 8012214:	4635      	moveq	r5, r6
 8012216:	1e75      	subne	r5, r6, #1
 8012218:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801221c:	42a5      	cmp	r5, r4
 801221e:	bfb8      	it	lt
 8012220:	462c      	movlt	r4, r5
 8012222:	4284      	cmp	r4, r0
 8012224:	bfb8      	it	lt
 8012226:	4620      	movlt	r0, r4
 8012228:	4281      	cmp	r1, r0
 801222a:	f04f 0100 	mov.w	r1, #0
 801222e:	bf18      	it	ne
 8012230:	64d0      	strne	r0, [r2, #76]	; 0x4c
 8012232:	6511      	str	r1, [r2, #80]	; 0x50
 8012234:	a807      	add	r0, sp, #28
 8012236:	f00b fc13 	bl	801da60 <GUI_ALLOC_UnlockH>
 801223a:	e77c      	b.n	8012136 <EDIT_AddKey+0x152>
 801223c:	2e1f      	cmp	r6, #31
 801223e:	f77f aef0 	ble.w	8012022 <EDIT_AddKey+0x3e>
 8012242:	f1b9 0f00 	cmp.w	r9, #0
 8012246:	f040 80f9 	bne.w	801243c <EDIT_AddKey+0x458>
 801224a:	4658      	mov	r0, fp
 801224c:	f00b fbf6 	bl	801da3c <GUI_ALLOC_LockH>
 8012250:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	; 0x38
 8012254:	9003      	str	r0, [sp, #12]
 8012256:	2a00      	cmp	r2, #0
 8012258:	4607      	mov	r7, r0
 801225a:	dd08      	ble.n	801226e <EDIT_AddKey+0x28a>
 801225c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801225e:	2800      	cmp	r0, #0
 8012260:	f040 810e 	bne.w	8012480 <EDIT_AddKey+0x49c>
 8012264:	4680      	mov	r8, r0
 8012266:	4590      	cmp	r8, r2
 8012268:	f280 80e4 	bge.w	8012434 <EDIT_AddKey+0x450>
 801226c:	9f03      	ldr	r7, [sp, #12]
 801226e:	b2b6      	uxth	r6, r6
 8012270:	a803      	add	r0, sp, #12
 8012272:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
 8012276:	f00b fbf3 	bl	801da60 <GUI_ALLOC_UnlockH>
 801227a:	4630      	mov	r0, r6
 801227c:	f008 fd8e 	bl	801ad9c <GUI_UC__CalcSizeOfChar>
 8012280:	4607      	mov	r7, r0
 8012282:	4658      	mov	r0, fp
 8012284:	f00b fbda 	bl	801da3c <GUI_ALLOC_LockH>
 8012288:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801228a:	9004      	str	r0, [sp, #16]
 801228c:	2a00      	cmp	r2, #0
 801228e:	f040 8109 	bne.w	80124a4 <EDIT_AddKey+0x4c0>
 8012292:	4615      	mov	r5, r2
 8012294:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 8012296:	443d      	add	r5, r7
 8012298:	3501      	adds	r5, #1
 801229a:	1aad      	subs	r5, r5, r2
 801229c:	a804      	add	r0, sp, #16
 801229e:	f00b fbdf 	bl	801da60 <GUI_ALLOC_UnlockH>
 80122a2:	2d00      	cmp	r5, #0
 80122a4:	f340 80fa 	ble.w	801249c <EDIT_AddKey+0x4b8>
 80122a8:	4658      	mov	r0, fp
 80122aa:	f00b fbc7 	bl	801da3c <GUI_ALLOC_LockH>
 80122ae:	f10d 0a20 	add.w	sl, sp, #32
 80122b2:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 80122b4:	f84a 0d08 	str.w	r0, [sl, #-8]!
 80122b8:	3510      	adds	r5, #16
 80122ba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80122bc:	9000      	str	r0, [sp, #0]
 80122be:	eb05 0902 	add.w	r9, r5, r2
 80122c2:	4650      	mov	r0, sl
 80122c4:	f00b fbcc 	bl	801da60 <GUI_ALLOC_UnlockH>
 80122c8:	9800      	ldr	r0, [sp, #0]
 80122ca:	4649      	mov	r1, r9
 80122cc:	f00b fd7c 	bl	801ddc8 <GUI_ALLOC_Realloc>
 80122d0:	9001      	str	r0, [sp, #4]
 80122d2:	2800      	cmp	r0, #0
 80122d4:	f43f aea5 	beq.w	8012022 <EDIT_AddKey+0x3e>
 80122d8:	9b00      	ldr	r3, [sp, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 80f1 	beq.w	80124c2 <EDIT_AddKey+0x4de>
 80122e0:	ad07      	add	r5, sp, #28
 80122e2:	4658      	mov	r0, fp
 80122e4:	f00b fbaa 	bl	801da3c <GUI_ALLOC_LockH>
 80122e8:	4602      	mov	r2, r0
 80122ea:	9b01      	ldr	r3, [sp, #4]
 80122ec:	9006      	str	r0, [sp, #24]
 80122ee:	4650      	mov	r0, sl
 80122f0:	f8a2 903a 	strh.w	r9, [r2, #58]	; 0x3a
 80122f4:	6353      	str	r3, [r2, #52]	; 0x34
 80122f6:	f00b fbb3 	bl	801da60 <GUI_ALLOC_UnlockH>
 80122fa:	4658      	mov	r0, fp
 80122fc:	f00b fb9e 	bl	801da3c <GUI_ALLOC_LockH>
 8012300:	4602      	mov	r2, r0
 8012302:	a803      	add	r0, sp, #12
 8012304:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8012308:	9203      	str	r2, [sp, #12]
 801230a:	f00b fba9 	bl	801da60 <GUI_ALLOC_UnlockH>
 801230e:	4648      	mov	r0, r9
 8012310:	f00b fb94 	bl	801da3c <GUI_ALLOC_LockH>
 8012314:	4641      	mov	r1, r8
 8012316:	4681      	mov	r9, r0
 8012318:	9007      	str	r0, [sp, #28]
 801231a:	f008 fd5b 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 801231e:	eb09 0800 	add.w	r8, r9, r0
 8012322:	4640      	mov	r0, r8
 8012324:	f7ed ff7e 	bl	8000224 <strlen>
 8012328:	4641      	mov	r1, r8
 801232a:	1c42      	adds	r2, r0, #1
 801232c:	eb08 0007 	add.w	r0, r8, r7
 8012330:	f010 faeb 	bl	802290a <memmove>
 8012334:	4631      	mov	r1, r6
 8012336:	4640      	mov	r0, r8
 8012338:	f008 fd1e 	bl	801ad78 <GUI_UC_Encode>
 801233c:	4628      	mov	r0, r5
 801233e:	f00b fb8f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012342:	4658      	mov	r0, fp
 8012344:	2105      	movs	r1, #5
 8012346:	f002 f907 	bl	8014558 <WM_NotifyParent>
 801234a:	4658      	mov	r0, fp
 801234c:	f00b fb76 	bl	801da3c <GUI_ALLOC_LockH>
 8012350:	9006      	str	r0, [sp, #24]
 8012352:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012354:	b300      	cbz	r0, 8012398 <EDIT_AddKey+0x3b4>
 8012356:	f00b fb71 	bl	801da3c <GUI_ALLOC_LockH>
 801235a:	9007      	str	r0, [sp, #28]
 801235c:	f008 fd68 	bl	801ae30 <GUI__GetNumChars>
 8012360:	9a06      	ldr	r2, [sp, #24]
 8012362:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 8012366:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 801236a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801236c:	3401      	adds	r4, #1
 801236e:	2e00      	cmp	r6, #0
 8012370:	bf0c      	ite	eq
 8012372:	463e      	moveq	r6, r7
 8012374:	1e7e      	subne	r6, r7, #1
 8012376:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801237a:	42a6      	cmp	r6, r4
 801237c:	bfb8      	it	lt
 801237e:	4634      	movlt	r4, r6
 8012380:	4284      	cmp	r4, r0
 8012382:	bfb8      	it	lt
 8012384:	4620      	movlt	r0, r4
 8012386:	4281      	cmp	r1, r0
 8012388:	f04f 0100 	mov.w	r1, #0
 801238c:	bf18      	it	ne
 801238e:	64d0      	strne	r0, [r2, #76]	; 0x4c
 8012390:	6511      	str	r1, [r2, #80]	; 0x50
 8012392:	4628      	mov	r0, r5
 8012394:	f00b fb64 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012398:	4650      	mov	r0, sl
 801239a:	f00b fb61 	bl	801da60 <GUI_ALLOC_UnlockH>
 801239e:	e640      	b.n	8012022 <EDIT_AddKey+0x3e>
 80123a0:	2201      	movs	r2, #1
 80123a2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80123a6:	4658      	mov	r0, fp
 80123a8:	f00b fb48 	bl	801da3c <GUI_ALLOC_LockH>
 80123ac:	9006      	str	r0, [sp, #24]
 80123ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80123b0:	b1f8      	cbz	r0, 80123f2 <EDIT_AddKey+0x40e>
 80123b2:	f00b fb43 	bl	801da3c <GUI_ALLOC_LockH>
 80123b6:	9007      	str	r0, [sp, #28]
 80123b8:	f008 fd3a 	bl	801ae30 <GUI__GetNumChars>
 80123bc:	9a06      	ldr	r2, [sp, #24]
 80123be:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 80123c2:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 80123c6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80123c8:	2e00      	cmp	r6, #0
 80123ca:	bf0c      	ite	eq
 80123cc:	463e      	moveq	r6, r7
 80123ce:	1e7e      	subne	r6, r7, #1
 80123d0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80123d4:	42a6      	cmp	r6, r4
 80123d6:	bfb8      	it	lt
 80123d8:	4634      	movlt	r4, r6
 80123da:	4284      	cmp	r4, r0
 80123dc:	bfb8      	it	lt
 80123de:	4620      	movlt	r0, r4
 80123e0:	4281      	cmp	r1, r0
 80123e2:	f04f 0100 	mov.w	r1, #0
 80123e6:	bf18      	it	ne
 80123e8:	64d0      	strne	r0, [r2, #76]	; 0x4c
 80123ea:	6511      	str	r1, [r2, #80]	; 0x50
 80123ec:	a807      	add	r0, sp, #28
 80123ee:	f00b fb37 	bl	801da60 <GUI_ALLOC_UnlockH>
 80123f2:	a806      	add	r0, sp, #24
 80123f4:	f00b fb34 	bl	801da60 <GUI_ALLOC_UnlockH>
 80123f8:	e664      	b.n	80120c4 <EDIT_AddKey+0xe0>
 80123fa:	f00b fb1f 	bl	801da3c <GUI_ALLOC_LockH>
 80123fe:	9007      	str	r0, [sp, #28]
 8012400:	f008 fd16 	bl	801ae30 <GUI__GetNumChars>
 8012404:	9a06      	ldr	r2, [sp, #24]
 8012406:	3401      	adds	r4, #1
 8012408:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 801240c:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 8012410:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8012412:	e6fd      	b.n	8012210 <EDIT_AddKey+0x22c>
 8012414:	442c      	add	r4, r5
 8012416:	4620      	mov	r0, r4
 8012418:	f008 fc8e 	bl	801ad38 <GUI_UC_GetCharSize>
 801241c:	1821      	adds	r1, r4, r0
 801241e:	4620      	mov	r0, r4
 8012420:	f010 fbce 	bl	8022bc0 <strcpy>
 8012424:	a807      	add	r0, sp, #28
 8012426:	f00b fb1b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801242a:	4658      	mov	r0, fp
 801242c:	2105      	movs	r1, #5
 801242e:	f002 f893 	bl	8014558 <WM_NotifyParent>
 8012432:	e5f6      	b.n	8012022 <EDIT_AddKey+0x3e>
 8012434:	a803      	add	r0, sp, #12
 8012436:	f00b fb13 	bl	801da60 <GUI_ALLOC_UnlockH>
 801243a:	e5f2      	b.n	8012022 <EDIT_AddKey+0x3e>
 801243c:	4658      	mov	r0, fp
 801243e:	f00b fafd 	bl	801da3c <GUI_ALLOC_LockH>
 8012442:	f10d 0a20 	add.w	sl, sp, #32
 8012446:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8012448:	f84a 0d08 	str.w	r0, [sl, #-8]!
 801244c:	4602      	mov	r2, r0
 801244e:	4650      	mov	r0, sl
 8012450:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
 8012452:	f00b fb05 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012456:	2d00      	cmp	r5, #0
 8012458:	f43f aef7 	beq.w	801224a <EDIT_AddKey+0x266>
 801245c:	4628      	mov	r0, r5
 801245e:	f00b faed 	bl	801da3c <GUI_ALLOC_LockH>
 8012462:	4639      	mov	r1, r7
 8012464:	4605      	mov	r5, r0
 8012466:	9007      	str	r0, [sp, #28]
 8012468:	f008 fcb4 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 801246c:	4607      	mov	r7, r0
 801246e:	4628      	mov	r0, r5
 8012470:	f7ed fed8 	bl	8000224 <strlen>
 8012474:	4287      	cmp	r7, r0
 8012476:	d332      	bcc.n	80124de <EDIT_AddKey+0x4fa>
 8012478:	a807      	add	r0, sp, #28
 801247a:	f00b faf1 	bl	801da60 <GUI_ALLOC_UnlockH>
 801247e:	e6e4      	b.n	801224a <EDIT_AddKey+0x266>
 8012480:	f00b fadc 	bl	801da3c <GUI_ALLOC_LockH>
 8012484:	ad08      	add	r5, sp, #32
 8012486:	f845 0d04 	str.w	r0, [r5, #-4]!
 801248a:	f008 fcd1 	bl	801ae30 <GUI__GetNumChars>
 801248e:	4680      	mov	r8, r0
 8012490:	4628      	mov	r0, r5
 8012492:	f00b fae5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012496:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801249a:	e6e4      	b.n	8012266 <EDIT_AddKey+0x282>
 801249c:	f10d 0a18 	add.w	sl, sp, #24
 80124a0:	ad07      	add	r5, sp, #28
 80124a2:	e72a      	b.n	80122fa <EDIT_AddKey+0x316>
 80124a4:	4610      	mov	r0, r2
 80124a6:	f00b fac9 	bl	801da3c <GUI_ALLOC_LockH>
 80124aa:	f10d 0920 	add.w	r9, sp, #32
 80124ae:	f849 0d0c 	str.w	r0, [r9, #-12]!
 80124b2:	f7ed feb7 	bl	8000224 <strlen>
 80124b6:	4605      	mov	r5, r0
 80124b8:	4648      	mov	r0, r9
 80124ba:	f00b fad1 	bl	801da60 <GUI_ALLOC_UnlockH>
 80124be:	9804      	ldr	r0, [sp, #16]
 80124c0:	e6e8      	b.n	8012294 <EDIT_AddKey+0x2b0>
 80124c2:	f00b fabb 	bl	801da3c <GUI_ALLOC_LockH>
 80124c6:	ad08      	add	r5, sp, #32
 80124c8:	4a0d      	ldr	r2, [pc, #52]	; (8012500 <EDIT_AddKey+0x51c>)
 80124ca:	f845 0d04 	str.w	r0, [r5, #-4]!
 80124ce:	6813      	ldr	r3, [r2, #0]
 80124d0:	9900      	ldr	r1, [sp, #0]
 80124d2:	464a      	mov	r2, r9
 80124d4:	4798      	blx	r3
 80124d6:	4628      	mov	r0, r5
 80124d8:	f00b fac2 	bl	801da60 <GUI_ALLOC_UnlockH>
 80124dc:	e701      	b.n	80122e2 <EDIT_AddKey+0x2fe>
 80124de:	443d      	add	r5, r7
 80124e0:	4628      	mov	r0, r5
 80124e2:	f008 fc29 	bl	801ad38 <GUI_UC_GetCharSize>
 80124e6:	1829      	adds	r1, r5, r0
 80124e8:	4628      	mov	r0, r5
 80124ea:	f010 fb69 	bl	8022bc0 <strcpy>
 80124ee:	a807      	add	r0, sp, #28
 80124f0:	f00b fab6 	bl	801da60 <GUI_ALLOC_UnlockH>
 80124f4:	4658      	mov	r0, fp
 80124f6:	2105      	movs	r1, #5
 80124f8:	f002 f82e 	bl	8014558 <WM_NotifyParent>
 80124fc:	e6a5      	b.n	801224a <EDIT_AddKey+0x266>
 80124fe:	bf00      	nop
 8012500:	20000250 	.word	0x20000250

08012504 <EDIT_Callback>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	6845      	ldr	r5, [r0, #4]
 8012508:	b082      	sub	sp, #8
 801250a:	4604      	mov	r4, r0
 801250c:	4628      	mov	r0, r5
 801250e:	f000 fd37 	bl	8012f80 <WM__IsEnabled>
 8012512:	4621      	mov	r1, r4
 8012514:	4606      	mov	r6, r0
 8012516:	4628      	mov	r0, r5
 8012518:	f7fb fc62 	bl	800dde0 <WIDGET_HandleActive>
 801251c:	b1d8      	cbz	r0, 8012556 <EDIT_Callback+0x52>
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	2b0f      	cmp	r3, #15
 8012522:	d030      	beq.n	8012586 <EDIT_Callback+0x82>
 8012524:	dc19      	bgt.n	801255a <EDIT_Callback+0x56>
 8012526:	2b0b      	cmp	r3, #11
 8012528:	d032      	beq.n	8012590 <EDIT_Callback+0x8c>
 801252a:	2b0e      	cmp	r3, #14
 801252c:	d13d      	bne.n	80125aa <EDIT_Callback+0xa6>
 801252e:	2e00      	cmp	r6, #0
 8012530:	d03b      	beq.n	80125aa <EDIT_Callback+0xa6>
 8012532:	68e3      	ldr	r3, [r4, #12]
 8012534:	685a      	ldr	r2, [r3, #4]
 8012536:	2a00      	cmp	r2, #0
 8012538:	dd37      	ble.n	80125aa <EDIT_Callback+0xa6>
 801253a:	6819      	ldr	r1, [r3, #0]
 801253c:	f1a1 0309 	sub.w	r3, r1, #9
 8012540:	2b19      	cmp	r3, #25
 8012542:	d805      	bhi.n	8012550 <EDIT_Callback+0x4c>
 8012544:	2001      	movs	r0, #1
 8012546:	4a32      	ldr	r2, [pc, #200]	; (8012610 <EDIT_Callback+0x10c>)
 8012548:	fa00 f303 	lsl.w	r3, r0, r3
 801254c:	401a      	ands	r2, r3
 801254e:	bb62      	cbnz	r2, 80125aa <EDIT_Callback+0xa6>
 8012550:	4628      	mov	r0, r5
 8012552:	f7ff fd47 	bl	8011fe4 <EDIT_AddKey>
 8012556:	b002      	add	sp, #8
 8012558:	bd70      	pop	{r4, r5, r6, pc}
 801255a:	f240 1213 	movw	r2, #275	; 0x113
 801255e:	4293      	cmp	r3, r2
 8012560:	d028      	beq.n	80125b4 <EDIT_Callback+0xb0>
 8012562:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012566:	d120      	bne.n	80125aa <EDIT_Callback+0xa6>
 8012568:	68e3      	ldr	r3, [r4, #12]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d04b      	beq.n	8012606 <EDIT_Callback+0x102>
 801256e:	7a1a      	ldrb	r2, [r3, #8]
 8012570:	2a00      	cmp	r2, #0
 8012572:	d043      	beq.n	80125fc <EDIT_Callback+0xf8>
 8012574:	6819      	ldr	r1, [r3, #0]
 8012576:	4628      	mov	r0, r5
 8012578:	f7ff fc6a 	bl	8011e50 <EDIT_SetCursorAtPixel>
 801257c:	4628      	mov	r0, r5
 801257e:	2101      	movs	r1, #1
 8012580:	f001 ffea 	bl	8014558 <WM_NotifyParent>
 8012584:	e011      	b.n	80125aa <EDIT_Callback+0xa6>
 8012586:	4628      	mov	r0, r5
 8012588:	2101      	movs	r1, #1
 801258a:	f7ff fa21 	bl	80119d0 <_Paint>
 801258e:	e7e2      	b.n	8012556 <EDIT_Callback+0x52>
 8012590:	4628      	mov	r0, r5
 8012592:	f00b fa53 	bl	801da3c <GUI_ALLOC_LockH>
 8012596:	ad02      	add	r5, sp, #8
 8012598:	4603      	mov	r3, r0
 801259a:	f845 3d04 	str.w	r3, [r5, #-4]!
 801259e:	3034      	adds	r0, #52	; 0x34
 80125a0:	f00b fb7e 	bl	801dca0 <GUI_ALLOC_FreePtr>
 80125a4:	4628      	mov	r0, r5
 80125a6:	f00b fa5b 	bl	801da60 <GUI_ALLOC_UnlockH>
 80125aa:	4620      	mov	r0, r4
 80125ac:	f004 fc36 	bl	8016e1c <WM_DefaultProc>
 80125b0:	b002      	add	sp, #8
 80125b2:	bd70      	pop	{r4, r5, r6, pc}
 80125b4:	4628      	mov	r0, r5
 80125b6:	f004 f83d 	bl	8016634 <WM_SelectWindow>
 80125ba:	4628      	mov	r0, r5
 80125bc:	f00b fa3e 	bl	801da3c <GUI_ALLOC_LockH>
 80125c0:	ae02      	add	r6, sp, #8
 80125c2:	f846 0d04 	str.w	r0, [r6, #-4]!
 80125c6:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
 80125ca:	f083 0304 	eor.w	r3, r3, #4
 80125ce:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 80125d2:	4630      	mov	r0, r6
 80125d4:	f00b fa44 	bl	801da60 <GUI_ALLOC_UnlockH>
 80125d8:	4628      	mov	r0, r5
 80125da:	2100      	movs	r1, #0
 80125dc:	f7ff f9f8 	bl	80119d0 <_Paint>
 80125e0:	4628      	mov	r0, r5
 80125e2:	f00b fa2b 	bl	801da3c <GUI_ALLOC_LockH>
 80125e6:	2100      	movs	r1, #0
 80125e8:	4603      	mov	r3, r0
 80125ea:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80125ee:	9301      	str	r3, [sp, #4]
 80125f0:	f000 fe76 	bl	80132e0 <WM_RestartTimer>
 80125f4:	4630      	mov	r0, r6
 80125f6:	f00b fa33 	bl	801da60 <GUI_ALLOC_UnlockH>
 80125fa:	e7d6      	b.n	80125aa <EDIT_Callback+0xa6>
 80125fc:	4628      	mov	r0, r5
 80125fe:	2102      	movs	r1, #2
 8012600:	f001 ffaa 	bl	8014558 <WM_NotifyParent>
 8012604:	e7d1      	b.n	80125aa <EDIT_Callback+0xa6>
 8012606:	4628      	mov	r0, r5
 8012608:	2103      	movs	r1, #3
 801260a:	f001 ffa5 	bl	8014558 <WM_NotifyParent>
 801260e:	e7cc      	b.n	80125aa <EDIT_Callback+0xa6>
 8012610:	03040013 	.word	0x03040013

08012614 <EDIT_SetFont>:
 8012614:	b570      	push	{r4, r5, r6, lr}
 8012616:	4604      	mov	r4, r0
 8012618:	b082      	sub	sp, #8
 801261a:	460e      	mov	r6, r1
 801261c:	b188      	cbz	r0, 8012642 <EDIT_SetFont+0x2e>
 801261e:	f008 fe8d 	bl	801b33c <GUI_Lock>
 8012622:	4620      	mov	r0, r4
 8012624:	f00b fa0a 	bl	801da3c <GUI_ALLOC_LockH>
 8012628:	ad02      	add	r5, sp, #8
 801262a:	4603      	mov	r3, r0
 801262c:	f845 3d04 	str.w	r3, [r5, #-4]!
 8012630:	6686      	str	r6, [r0, #104]	; 0x68
 8012632:	4620      	mov	r0, r4
 8012634:	f003 fe8c 	bl	8016350 <WM_InvalidateWindow>
 8012638:	4628      	mov	r0, r5
 801263a:	f00b fa11 	bl	801da60 <GUI_ALLOC_UnlockH>
 801263e:	f008 fe73 	bl	801b328 <GUI_Unlock>
 8012642:	b002      	add	sp, #8
 8012644:	bd70      	pop	{r4, r5, r6, pc}
 8012646:	bf00      	nop

08012648 <EDIT_SetBkColor>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	4604      	mov	r4, r0
 801264c:	b082      	sub	sp, #8
 801264e:	460d      	mov	r5, r1
 8012650:	4616      	mov	r6, r2
 8012652:	b908      	cbnz	r0, 8012658 <EDIT_SetBkColor+0x10>
 8012654:	b002      	add	sp, #8
 8012656:	bd70      	pop	{r4, r5, r6, pc}
 8012658:	f008 fe70 	bl	801b33c <GUI_Lock>
 801265c:	4620      	mov	r0, r4
 801265e:	f00b f9ed 	bl	801da3c <GUI_ALLOC_LockH>
 8012662:	4603      	mov	r3, r0
 8012664:	9001      	str	r0, [sp, #4]
 8012666:	b108      	cbz	r0, 801266c <EDIT_SetBkColor+0x24>
 8012668:	2d02      	cmp	r5, #2
 801266a:	d906      	bls.n	801267a <EDIT_SetBkColor+0x32>
 801266c:	a801      	add	r0, sp, #4
 801266e:	f00b f9f7 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012672:	f008 fe59 	bl	801b328 <GUI_Unlock>
 8012676:	b002      	add	sp, #8
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	351e      	adds	r5, #30
 801267c:	4620      	mov	r0, r4
 801267e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8012682:	f003 fe65 	bl	8016350 <WM_InvalidateWindow>
 8012686:	e7f1      	b.n	801266c <EDIT_SetBkColor+0x24>

08012688 <EDIT_SetTextColor>:
 8012688:	b570      	push	{r4, r5, r6, lr}
 801268a:	4604      	mov	r4, r0
 801268c:	b082      	sub	sp, #8
 801268e:	460d      	mov	r5, r1
 8012690:	4616      	mov	r6, r2
 8012692:	b908      	cbnz	r0, 8012698 <EDIT_SetTextColor+0x10>
 8012694:	b002      	add	sp, #8
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	f008 fe50 	bl	801b33c <GUI_Lock>
 801269c:	4620      	mov	r0, r4
 801269e:	f00b f9cd 	bl	801da3c <GUI_ALLOC_LockH>
 80126a2:	9001      	str	r0, [sp, #4]
 80126a4:	b108      	cbz	r0, 80126aa <EDIT_SetTextColor+0x22>
 80126a6:	2d02      	cmp	r5, #2
 80126a8:	d906      	bls.n	80126b8 <EDIT_SetTextColor+0x30>
 80126aa:	a801      	add	r0, sp, #4
 80126ac:	f00b f9d8 	bl	801da60 <GUI_ALLOC_UnlockH>
 80126b0:	f008 fe3a 	bl	801b328 <GUI_Unlock>
 80126b4:	b002      	add	sp, #8
 80126b6:	bd70      	pop	{r4, r5, r6, pc}
 80126b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80126bc:	4620      	mov	r0, r4
 80126be:	66ee      	str	r6, [r5, #108]	; 0x6c
 80126c0:	f003 fe46 	bl	8016350 <WM_InvalidateWindow>
 80126c4:	e7f1      	b.n	80126aa <EDIT_SetTextColor+0x22>
 80126c6:	bf00      	nop

080126c8 <EDIT_GetValue>:
 80126c8:	b510      	push	{r4, lr}
 80126ca:	4604      	mov	r4, r0
 80126cc:	b082      	sub	sp, #8
 80126ce:	b168      	cbz	r0, 80126ec <EDIT_GetValue+0x24>
 80126d0:	f008 fe34 	bl	801b33c <GUI_Lock>
 80126d4:	4620      	mov	r0, r4
 80126d6:	f00b f9b1 	bl	801da3c <GUI_ALLOC_LockH>
 80126da:	ab02      	add	r3, sp, #8
 80126dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80126de:	f843 0d04 	str.w	r0, [r3, #-4]!
 80126e2:	4618      	mov	r0, r3
 80126e4:	f00b f9bc 	bl	801da60 <GUI_ALLOC_UnlockH>
 80126e8:	f008 fe1e 	bl	801b328 <GUI_Unlock>
 80126ec:	4620      	mov	r0, r4
 80126ee:	b002      	add	sp, #8
 80126f0:	bd10      	pop	{r4, pc}
 80126f2:	bf00      	nop

080126f4 <EDIT_SetValue>:
 80126f4:	b530      	push	{r4, r5, lr}
 80126f6:	4604      	mov	r4, r0
 80126f8:	b083      	sub	sp, #12
 80126fa:	460d      	mov	r5, r1
 80126fc:	b908      	cbnz	r0, 8012702 <EDIT_SetValue+0xe>
 80126fe:	b003      	add	sp, #12
 8012700:	bd30      	pop	{r4, r5, pc}
 8012702:	f008 fe1b 	bl	801b33c <GUI_Lock>
 8012706:	4620      	mov	r0, r4
 8012708:	f00b f998 	bl	801da3c <GUI_ALLOC_LockH>
 801270c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801270e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012710:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8012712:	9001      	str	r0, [sp, #4]
 8012714:	428d      	cmp	r5, r1
 8012716:	bfb8      	it	lt
 8012718:	460d      	movlt	r5, r1
 801271a:	4295      	cmp	r5, r2
 801271c:	bfa8      	it	ge
 801271e:	4615      	movge	r5, r2
 8012720:	42ab      	cmp	r3, r5
 8012722:	d012      	beq.n	801274a <EDIT_SetValue+0x56>
 8012724:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8012726:	6485      	str	r5, [r0, #72]	; 0x48
 8012728:	b10b      	cbz	r3, 801272e <EDIT_SetValue+0x3a>
 801272a:	4620      	mov	r0, r4
 801272c:	4798      	blx	r3
 801272e:	4620      	mov	r0, r4
 8012730:	f003 fe0e 	bl	8016350 <WM_InvalidateWindow>
 8012734:	a801      	add	r0, sp, #4
 8012736:	f00b f993 	bl	801da60 <GUI_ALLOC_UnlockH>
 801273a:	4620      	mov	r0, r4
 801273c:	2105      	movs	r1, #5
 801273e:	f001 ff0b 	bl	8014558 <WM_NotifyParent>
 8012742:	f008 fdf1 	bl	801b328 <GUI_Unlock>
 8012746:	b003      	add	sp, #12
 8012748:	bd30      	pop	{r4, r5, pc}
 801274a:	a801      	add	r0, sp, #4
 801274c:	f00b f988 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012750:	e7f7      	b.n	8012742 <EDIT_SetValue+0x4e>
 8012752:	bf00      	nop

08012754 <EDIT_SetMaxLen>:
 8012754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012758:	4604      	mov	r4, r0
 801275a:	b085      	sub	sp, #20
 801275c:	460d      	mov	r5, r1
 801275e:	b910      	cbnz	r0, 8012766 <EDIT_SetMaxLen+0x12>
 8012760:	b005      	add	sp, #20
 8012762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012766:	f008 fde9 	bl	801b33c <GUI_Lock>
 801276a:	4620      	mov	r0, r4
 801276c:	f00b f966 	bl	801da3c <GUI_ALLOC_LockH>
 8012770:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8012774:	9000      	str	r0, [sp, #0]
 8012776:	42ab      	cmp	r3, r5
 8012778:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
 801277c:	d035      	beq.n	80127ea <EDIT_SetMaxLen+0x96>
 801277e:	dd02      	ble.n	8012786 <EDIT_SetMaxLen+0x32>
 8012780:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012782:	2800      	cmp	r0, #0
 8012784:	d139      	bne.n	80127fa <EDIT_SetMaxLen+0xa6>
 8012786:	4668      	mov	r0, sp
 8012788:	f00b f96a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801278c:	4620      	mov	r0, r4
 801278e:	f00b f955 	bl	801da3c <GUI_ALLOC_LockH>
 8012792:	ae04      	add	r6, sp, #16
 8012794:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 8012796:	f846 0d08 	str.w	r0, [r6, #-8]!
 801279a:	ebc8 0805 	rsb	r8, r8, r5
 801279e:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 80127a2:	f108 0801 	add.w	r8, r8, #1
 80127a6:	4490      	add	r8, r2
 80127a8:	4630      	mov	r0, r6
 80127aa:	f00b f959 	bl	801da60 <GUI_ALLOC_UnlockH>
 80127ae:	4648      	mov	r0, r9
 80127b0:	4641      	mov	r1, r8
 80127b2:	f00b fb09 	bl	801ddc8 <GUI_ALLOC_Realloc>
 80127b6:	4682      	mov	sl, r0
 80127b8:	b170      	cbz	r0, 80127d8 <EDIT_SetMaxLen+0x84>
 80127ba:	f1b9 0f00 	cmp.w	r9, #0
 80127be:	d027      	beq.n	8012810 <EDIT_SetMaxLen+0xbc>
 80127c0:	4620      	mov	r0, r4
 80127c2:	f00b f93b 	bl	801da3c <GUI_ALLOC_LockH>
 80127c6:	4603      	mov	r3, r0
 80127c8:	4630      	mov	r0, r6
 80127ca:	f8a3 803a 	strh.w	r8, [r3, #58]	; 0x3a
 80127ce:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
 80127d2:	9302      	str	r3, [sp, #8]
 80127d4:	f00b f944 	bl	801da60 <GUI_ALLOC_UnlockH>
 80127d8:	4620      	mov	r0, r4
 80127da:	f00b f92f 	bl	801da3c <GUI_ALLOC_LockH>
 80127de:	4603      	mov	r3, r0
 80127e0:	4620      	mov	r0, r4
 80127e2:	871d      	strh	r5, [r3, #56]	; 0x38
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	f003 fdb3 	bl	8016350 <WM_InvalidateWindow>
 80127ea:	4668      	mov	r0, sp
 80127ec:	f00b f938 	bl	801da60 <GUI_ALLOC_UnlockH>
 80127f0:	f008 fd9a 	bl	801b328 <GUI_Unlock>
 80127f4:	b005      	add	sp, #20
 80127f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127fa:	f00b f91f 	bl	801da3c <GUI_ALLOC_LockH>
 80127fe:	9001      	str	r0, [sp, #4]
 8012800:	f008 fb16 	bl	801ae30 <GUI__GetNumChars>
 8012804:	4285      	cmp	r5, r0
 8012806:	db12      	blt.n	801282e <EDIT_SetMaxLen+0xda>
 8012808:	a801      	add	r0, sp, #4
 801280a:	f00b f929 	bl	801da60 <GUI_ALLOC_UnlockH>
 801280e:	e7ba      	b.n	8012786 <EDIT_SetMaxLen+0x32>
 8012810:	f00b f914 	bl	801da3c <GUI_ALLOC_LockH>
 8012814:	f10d 0b10 	add.w	fp, sp, #16
 8012818:	4b09      	ldr	r3, [pc, #36]	; (8012840 <EDIT_SetMaxLen+0xec>)
 801281a:	f84b 0d04 	str.w	r0, [fp, #-4]!
 801281e:	4649      	mov	r1, r9
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4642      	mov	r2, r8
 8012824:	4798      	blx	r3
 8012826:	4658      	mov	r0, fp
 8012828:	f00b f91a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801282c:	e7c8      	b.n	80127c0 <EDIT_SetMaxLen+0x6c>
 801282e:	9801      	ldr	r0, [sp, #4]
 8012830:	4629      	mov	r1, r5
 8012832:	f008 facf 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8012836:	9b01      	ldr	r3, [sp, #4]
 8012838:	2200      	movs	r2, #0
 801283a:	541a      	strb	r2, [r3, r0]
 801283c:	e7e4      	b.n	8012808 <EDIT_SetMaxLen+0xb4>
 801283e:	bf00      	nop
 8012840:	20000250 	.word	0x20000250

08012844 <EDIT_SetCursorAtChar>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	b082      	sub	sp, #8
 801284a:	460d      	mov	r5, r1
 801284c:	f008 fd76 	bl	801b33c <GUI_Lock>
 8012850:	b91c      	cbnz	r4, 801285a <EDIT_SetCursorAtChar+0x16>
 8012852:	f008 fd69 	bl	801b328 <GUI_Unlock>
 8012856:	b002      	add	sp, #8
 8012858:	bd70      	pop	{r4, r5, r6, pc}
 801285a:	4620      	mov	r0, r4
 801285c:	f00b f8ee 	bl	801da3c <GUI_ALLOC_LockH>
 8012860:	9000      	str	r0, [sp, #0]
 8012862:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012864:	b1f8      	cbz	r0, 80128a6 <EDIT_SetCursorAtChar+0x62>
 8012866:	f00b f8e9 	bl	801da3c <GUI_ALLOC_LockH>
 801286a:	9001      	str	r0, [sp, #4]
 801286c:	f008 fae0 	bl	801ae30 <GUI__GetNumChars>
 8012870:	9b00      	ldr	r3, [sp, #0]
 8012872:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 8012876:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 801287a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801287c:	2900      	cmp	r1, #0
 801287e:	bf0c      	ite	eq
 8012880:	4631      	moveq	r1, r6
 8012882:	1e71      	subne	r1, r6, #1
 8012884:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8012888:	428d      	cmp	r5, r1
 801288a:	bfa8      	it	ge
 801288c:	460d      	movge	r5, r1
 801288e:	4285      	cmp	r5, r0
 8012890:	bfb8      	it	lt
 8012892:	4628      	movlt	r0, r5
 8012894:	4282      	cmp	r2, r0
 8012896:	f04f 0200 	mov.w	r2, #0
 801289a:	bf18      	it	ne
 801289c:	64d8      	strne	r0, [r3, #76]	; 0x4c
 801289e:	651a      	str	r2, [r3, #80]	; 0x50
 80128a0:	a801      	add	r0, sp, #4
 80128a2:	f00b f8dd 	bl	801da60 <GUI_ALLOC_UnlockH>
 80128a6:	4668      	mov	r0, sp
 80128a8:	f00b f8da 	bl	801da60 <GUI_ALLOC_UnlockH>
 80128ac:	4620      	mov	r0, r4
 80128ae:	f003 fd4f 	bl	8016350 <WM_InvalidateWindow>
 80128b2:	f008 fd39 	bl	801b328 <GUI_Unlock>
 80128b6:	b002      	add	sp, #8
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	bf00      	nop

080128bc <GUI_CreateDialogBox>:
 80128bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128c0:	b082      	sub	sp, #8
 80128c2:	4699      	mov	r9, r3
 80128c4:	4604      	mov	r4, r0
 80128c6:	460d      	mov	r5, r1
 80128c8:	4616      	mov	r6, r2
 80128ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d037      	beq.n	8012940 <GUI_CreateDialogBox+0x84>
 80128d0:	9600      	str	r6, [sp, #0]
 80128d2:	463a      	mov	r2, r7
 80128d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128d6:	6826      	ldr	r6, [r4, #0]
 80128d8:	4620      	mov	r0, r4
 80128da:	4649      	mov	r1, r9
 80128dc:	47b0      	blx	r6
 80128de:	4682      	mov	sl, r0
 80128e0:	b918      	cbnz	r0, 80128ea <GUI_CreateDialogBox+0x2e>
 80128e2:	4650      	mov	r0, sl
 80128e4:	b002      	add	sp, #8
 80128e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ea:	f001 fa5d 	bl	8013da8 <WM_GetClientWindow>
 80128ee:	8a61      	ldrh	r1, [r4, #18]
 80128f0:	4607      	mov	r7, r0
 80128f2:	4650      	mov	r0, sl
 80128f4:	f7fb fa08 	bl	800dd08 <WIDGET_OrState>
 80128f8:	4650      	mov	r0, sl
 80128fa:	f002 f893 	bl	8014a24 <WM_ShowWindow>
 80128fe:	3d01      	subs	r5, #1
 8012900:	4638      	mov	r0, r7
 8012902:	f002 f88f 	bl	8014a24 <WM_ShowWindow>
 8012906:	2d00      	cmp	r5, #0
 8012908:	bfc8      	it	gt
 801290a:	f04f 0800 	movgt.w	r8, #0
 801290e:	dc04      	bgt.n	801291a <GUI_CreateDialogBox+0x5e>
 8012910:	e01a      	b.n	8012948 <GUI_CreateDialogBox+0x8c>
 8012912:	f002 f887 	bl	8014a24 <WM_ShowWindow>
 8012916:	3d01      	subs	r5, #1
 8012918:	d016      	beq.n	8012948 <GUI_CreateDialogBox+0x8c>
 801291a:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 801291e:	f8cd 8000 	str.w	r8, [sp]
 8012922:	2200      	movs	r2, #0
 8012924:	4620      	mov	r0, r4
 8012926:	4613      	mov	r3, r2
 8012928:	4639      	mov	r1, r7
 801292a:	47b0      	blx	r6
 801292c:	4606      	mov	r6, r0
 801292e:	2800      	cmp	r0, #0
 8012930:	d1ef      	bne.n	8012912 <GUI_CreateDialogBox+0x56>
 8012932:	4650      	mov	r0, sl
 8012934:	f003 fe60 	bl	80165f8 <WM_DeleteWindow>
 8012938:	4630      	mov	r0, r6
 801293a:	b002      	add	sp, #8
 801293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012940:	f001 fa42 	bl	8013dc8 <WM_GetDesktopWindow>
 8012944:	4681      	mov	r9, r0
 8012946:	e7c3      	b.n	80128d0 <GUI_CreateDialogBox+0x14>
 8012948:	4638      	mov	r0, r7
 801294a:	211d      	movs	r1, #29
 801294c:	f001 fe56 	bl	80145fc <WM_SendMessageNoPara>
 8012950:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012954:	d0c5      	beq.n	80128e2 <GUI_CreateDialogBox+0x26>
 8012956:	f008 fcf1 	bl	801b33c <GUI_Lock>
 801295a:	f001 fb11 	bl	8013f80 <WM_GetFocusedWindow>
 801295e:	b960      	cbnz	r0, 801297a <GUI_CreateDialogBox+0xbe>
 8012960:	45d1      	cmp	r9, sl
 8012962:	d002      	beq.n	801296a <GUI_CreateDialogBox+0xae>
 8012964:	4650      	mov	r0, sl
 8012966:	f000 fdad 	bl	80134c4 <WM_SetFocusOnNextChild>
 801296a:	f008 fcdd 	bl	801b328 <GUI_Unlock>
 801296e:	4650      	mov	r0, sl
 8012970:	b002      	add	sp, #8
 8012972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012976:	2800      	cmp	r0, #0
 8012978:	d0f4      	beq.n	8012964 <GUI_CreateDialogBox+0xa8>
 801297a:	f00b f855 	bl	801da28 <GUI_ALLOC_h2p>
 801297e:	6980      	ldr	r0, [r0, #24]
 8012980:	4550      	cmp	r0, sl
 8012982:	d1f8      	bne.n	8012976 <GUI_CreateDialogBox+0xba>
 8012984:	e7f1      	b.n	801296a <GUI_CreateDialogBox+0xae>
 8012986:	bf00      	nop

08012988 <BUTTON_Callback>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	6845      	ldr	r5, [r0, #4]
 801298c:	b082      	sub	sp, #8
 801298e:	4604      	mov	r4, r0
 8012990:	4601      	mov	r1, r0
 8012992:	4628      	mov	r0, r5
 8012994:	f7fb fa24 	bl	800dde0 <WIDGET_HandleActive>
 8012998:	b168      	cbz	r0, 80129b6 <BUTTON_Callback+0x2e>
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	2b0f      	cmp	r3, #15
 801299e:	d059      	beq.n	8012a54 <BUTTON_Callback+0xcc>
 80129a0:	dd0b      	ble.n	80129ba <BUTTON_Callback+0x32>
 80129a2:	2b28      	cmp	r3, #40	; 0x28
 80129a4:	d045      	beq.n	8012a32 <BUTTON_Callback+0xaa>
 80129a6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80129aa:	d03c      	beq.n	8012a26 <BUTTON_Callback+0x9e>
 80129ac:	2b11      	cmp	r3, #17
 80129ae:	d049      	beq.n	8012a44 <BUTTON_Callback+0xbc>
 80129b0:	4620      	mov	r0, r4
 80129b2:	f004 fa33 	bl	8016e1c <WM_DefaultProc>
 80129b6:	b002      	add	sp, #8
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
 80129ba:	2b0b      	cmp	r3, #11
 80129bc:	d020      	beq.n	8012a00 <BUTTON_Callback+0x78>
 80129be:	2b0e      	cmp	r3, #14
 80129c0:	d1f6      	bne.n	80129b0 <BUTTON_Callback+0x28>
 80129c2:	68e3      	ldr	r3, [r4, #12]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	6859      	ldr	r1, [r3, #4]
 80129c8:	2a0d      	cmp	r2, #13
 80129ca:	d053      	beq.n	8012a74 <BUTTON_Callback+0xec>
 80129cc:	2a20      	cmp	r2, #32
 80129ce:	d131      	bne.n	8012a34 <BUTTON_Callback+0xac>
 80129d0:	2900      	cmp	r1, #0
 80129d2:	4628      	mov	r0, r5
 80129d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80129d8:	dd7d      	ble.n	8012ad6 <BUTTON_Callback+0x14e>
 80129da:	f7fb f995 	bl	800dd08 <WIDGET_OrState>
 80129de:	4628      	mov	r0, r5
 80129e0:	f00b f82c 	bl	801da3c <GUI_ALLOC_LockH>
 80129e4:	ab02      	add	r3, sp, #8
 80129e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80129e8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80129ec:	4618      	mov	r0, r3
 80129ee:	f00b f837 	bl	801da60 <GUI_ALLOC_UnlockH>
 80129f2:	07a2      	lsls	r2, r4, #30
 80129f4:	d5df      	bpl.n	80129b6 <BUTTON_Callback+0x2e>
 80129f6:	4628      	mov	r0, r5
 80129f8:	2101      	movs	r1, #1
 80129fa:	f001 fdad 	bl	8014558 <WM_NotifyParent>
 80129fe:	e7da      	b.n	80129b6 <BUTTON_Callback+0x2e>
 8012a00:	4628      	mov	r0, r5
 8012a02:	f00b f81b 	bl	801da3c <GUI_ALLOC_LockH>
 8012a06:	ad02      	add	r5, sp, #8
 8012a08:	4603      	mov	r3, r0
 8012a0a:	3068      	adds	r0, #104	; 0x68
 8012a0c:	9301      	str	r3, [sp, #4]
 8012a0e:	f00b f947 	bl	801dca0 <GUI_ALLOC_FreePtr>
 8012a12:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8012a16:	2103      	movs	r1, #3
 8012a18:	306c      	adds	r0, #108	; 0x6c
 8012a1a:	f00b f967 	bl	801dcec <GUI_ALLOC_FreePtrArray>
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f00b f81e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012a24:	e7c4      	b.n	80129b0 <BUTTON_Callback+0x28>
 8012a26:	4b32      	ldr	r3, [pc, #200]	; (8012af0 <BUTTON_Callback+0x168>)
 8012a28:	4628      	mov	r0, r5
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4798      	blx	r3
 8012a30:	e7c1      	b.n	80129b6 <BUTTON_Callback+0x2e>
 8012a32:	68e3      	ldr	r3, [r4, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1bb      	bne.n	80129b0 <BUTTON_Callback+0x28>
 8012a38:	4628      	mov	r0, r5
 8012a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012a3e:	f7fb f981 	bl	800dd44 <WIDGET_AndState>
 8012a42:	e7b5      	b.n	80129b0 <BUTTON_Callback+0x28>
 8012a44:	4b2b      	ldr	r3, [pc, #172]	; (8012af4 <BUTTON_Callback+0x16c>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d0b4      	beq.n	80129b6 <BUTTON_Callback+0x2e>
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4798      	blx	r3
 8012a52:	e7b0      	b.n	80129b6 <BUTTON_Callback+0x2e>
 8012a54:	4628      	mov	r0, r5
 8012a56:	f00a fff1 	bl	801da3c <GUI_ALLOC_LockH>
 8012a5a:	ab02      	add	r3, sp, #8
 8012a5c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012a60:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8012a62:	6814      	ldr	r4, [r2, #0]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f00a fffb 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012a6a:	2c00      	cmp	r4, #0
 8012a6c:	d0a3      	beq.n	80129b6 <BUTTON_Callback+0x2e>
 8012a6e:	4628      	mov	r0, r5
 8012a70:	47a0      	blx	r4
 8012a72:	e7a0      	b.n	80129b6 <BUTTON_Callback+0x2e>
 8012a74:	2900      	cmp	r1, #0
 8012a76:	dddd      	ble.n	8012a34 <BUTTON_Callback+0xac>
 8012a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f7fb f943 	bl	800dd08 <WIDGET_OrState>
 8012a82:	4628      	mov	r0, r5
 8012a84:	f00a ffda 	bl	801da3c <GUI_ALLOC_LockH>
 8012a88:	ac02      	add	r4, sp, #8
 8012a8a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8012a8c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012a90:	4620      	mov	r0, r4
 8012a92:	f00a ffe5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012a96:	07b1      	lsls	r1, r6, #30
 8012a98:	d503      	bpl.n	8012aa2 <BUTTON_Callback+0x11a>
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	2101      	movs	r1, #1
 8012a9e:	f001 fd5b 	bl	8014558 <WM_NotifyParent>
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012aa8:	f7fb f94c 	bl	800dd44 <WIDGET_AndState>
 8012aac:	4628      	mov	r0, r5
 8012aae:	f00a ffc5 	bl	801da3c <GUI_ALLOC_LockH>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 8012ab8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	f00a ffd0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f008 fd7b 	bl	801b5bc <GUI_StoreKey>
 8012ac6:	07a3      	lsls	r3, r4, #30
 8012ac8:	f57f af75 	bpl.w	80129b6 <BUTTON_Callback+0x2e>
 8012acc:	4628      	mov	r0, r5
 8012ace:	2102      	movs	r1, #2
 8012ad0:	f001 fd42 	bl	8014558 <WM_NotifyParent>
 8012ad4:	e76f      	b.n	80129b6 <BUTTON_Callback+0x2e>
 8012ad6:	f7fb f935 	bl	800dd44 <WIDGET_AndState>
 8012ada:	4628      	mov	r0, r5
 8012adc:	f00a ffae 	bl	801da3c <GUI_ALLOC_LockH>
 8012ae0:	ab02      	add	r3, sp, #8
 8012ae2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012ae4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012ae8:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8012aea:	4618      	mov	r0, r3
 8012aec:	e7e6      	b.n	8012abc <BUTTON_Callback+0x134>
 8012aee:	bf00      	nop
 8012af0:	20000214 	.word	0x20000214
 8012af4:	2002b168 	.word	0x2002b168

08012af8 <_OnTouchDefault>:
 8012af8:	b570      	push	{r4, r5, r6, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	460c      	mov	r4, r1
 8012afe:	4606      	mov	r6, r0
 8012b00:	f00a ff9c 	bl	801da3c <GUI_ALLOC_LockH>
 8012b04:	ab02      	add	r3, sp, #8
 8012b06:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 8012b08:	f843 0d08 	str.w	r0, [r3, #-8]!
 8012b0c:	4668      	mov	r0, sp
 8012b0e:	f00a ffa7 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012b12:	68e3      	ldr	r3, [r4, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d037      	beq.n	8012b88 <_OnTouchDefault+0x90>
 8012b18:	7a1b      	ldrb	r3, [r3, #8]
 8012b1a:	b91b      	cbnz	r3, 8012b24 <_OnTouchDefault+0x2c>
 8012b1c:	05e9      	lsls	r1, r5, #23
 8012b1e:	d419      	bmi.n	8012b54 <_OnTouchDefault+0x5c>
 8012b20:	b002      	add	sp, #8
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	05ec      	lsls	r4, r5, #23
 8012b26:	d4fb      	bmi.n	8012b20 <_OnTouchDefault+0x28>
 8012b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f7fb f8eb 	bl	800dd08 <WIDGET_OrState>
 8012b32:	4630      	mov	r0, r6
 8012b34:	f00a ff82 	bl	801da3c <GUI_ALLOC_LockH>
 8012b38:	ab02      	add	r3, sp, #8
 8012b3a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012b3c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012b40:	4618      	mov	r0, r3
 8012b42:	f00a ff8d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012b46:	07a0      	lsls	r0, r4, #30
 8012b48:	d5ea      	bpl.n	8012b20 <_OnTouchDefault+0x28>
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	f001 fd03 	bl	8014558 <WM_NotifyParent>
 8012b52:	e7e5      	b.n	8012b20 <_OnTouchDefault+0x28>
 8012b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f7fb f8f3 	bl	800dd44 <WIDGET_AndState>
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f00a ff6c 	bl	801da3c <GUI_ALLOC_LockH>
 8012b64:	ab02      	add	r3, sp, #8
 8012b66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012b68:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012b6c:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f00a ff76 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012b74:	4628      	mov	r0, r5
 8012b76:	f008 fd21 	bl	801b5bc <GUI_StoreKey>
 8012b7a:	07a2      	lsls	r2, r4, #30
 8012b7c:	d5d0      	bpl.n	8012b20 <_OnTouchDefault+0x28>
 8012b7e:	4630      	mov	r0, r6
 8012b80:	2102      	movs	r1, #2
 8012b82:	f001 fce9 	bl	8014558 <WM_NotifyParent>
 8012b86:	e7cb      	b.n	8012b20 <_OnTouchDefault+0x28>
 8012b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7fb f8d9 	bl	800dd44 <WIDGET_AndState>
 8012b92:	4630      	mov	r0, r6
 8012b94:	f00a ff52 	bl	801da3c <GUI_ALLOC_LockH>
 8012b98:	ab02      	add	r3, sp, #8
 8012b9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012b9c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f00a ff5d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012ba6:	07a3      	lsls	r3, r4, #30
 8012ba8:	d5ba      	bpl.n	8012b20 <_OnTouchDefault+0x28>
 8012baa:	4630      	mov	r0, r6
 8012bac:	2103      	movs	r1, #3
 8012bae:	f001 fcd3 	bl	8014558 <WM_NotifyParent>
 8012bb2:	e7b5      	b.n	8012b20 <_OnTouchDefault+0x28>

08012bb4 <BUTTON_CreateIndirect>:
 8012bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	6987      	ldr	r7, [r0, #24]
 8012bba:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 8012bbe:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 8012bc2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8012bc6:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8012bca:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8012bce:	b087      	sub	sp, #28
 8012bd0:	4688      	mov	r8, r1
 8012bd2:	4493      	add	fp, r2
 8012bd4:	449a      	add	sl, r3
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	f008 fbb0 	bl	801b33c <GUI_Lock>
 8012bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012be0:	f04f 0e00 	mov.w	lr, #0
 8012be4:	4f31      	ldr	r7, [pc, #196]	; (8012cac <BUTTON_CreateIndirect+0xf8>)
 8012be6:	9303      	str	r3, [sp, #12]
 8012be8:	9702      	str	r7, [sp, #8]
 8012bea:	f8cd 8000 	str.w	r8, [sp]
 8012bee:	4658      	mov	r0, fp
 8012bf0:	4651      	mov	r1, sl
 8012bf2:	4632      	mov	r2, r6
 8012bf4:	462b      	mov	r3, r5
 8012bf6:	f8cd e004 	str.w	lr, [sp, #4]
 8012bfa:	f003 fc05 	bl	8016408 <WM_CreateWindowAsChild>
 8012bfe:	4607      	mov	r7, r0
 8012c00:	b928      	cbnz	r0, 8012c0e <BUTTON_CreateIndirect+0x5a>
 8012c02:	f008 fb91 	bl	801b328 <GUI_Unlock>
 8012c06:	4638      	mov	r0, r7
 8012c08:	b007      	add	sp, #28
 8012c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0e:	f00a ff15 	bl	801da3c <GUI_ALLOC_LockH>
 8012c12:	4e27      	ldr	r6, [pc, #156]	; (8012cb0 <BUTTON_CreateIndirect+0xfc>)
 8012c14:	9005      	str	r0, [sp, #20]
 8012c16:	fa0f f189 	sxth.w	r1, r9
 8012c1a:	2210      	movs	r2, #16
 8012c1c:	f7fa ffe6 	bl	800dbec <WIDGET__Init>
 8012c20:	f10d 0818 	add.w	r8, sp, #24
 8012c24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012c26:	f858 ed04 	ldr.w	lr, [r8, #-4]!
 8012c2a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8012cb4 <BUTTON_CreateIndirect+0x100>
 8012c2e:	f10e 0534 	add.w	r5, lr, #52	; 0x34
 8012c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012c34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012c38:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8012c3c:	f8d9 6000 	ldr.w	r6, [r9]
 8012c40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8012c44:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 8012c48:	4640      	mov	r0, r8
 8012c4a:	f00a ff09 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8012c52:	4638      	mov	r0, r7
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	4798      	blx	r3
 8012c58:	f008 fb66 	bl	801b328 <GUI_Unlock>
 8012c5c:	6865      	ldr	r5, [r4, #4]
 8012c5e:	f008 fb6d 	bl	801b33c <GUI_Lock>
 8012c62:	4638      	mov	r0, r7
 8012c64:	f00a feea 	bl	801da3c <GUI_ALLOC_LockH>
 8012c68:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8012c6a:	9004      	str	r0, [sp, #16]
 8012c6c:	a804      	add	r0, sp, #16
 8012c6e:	9405      	str	r4, [sp, #20]
 8012c70:	f00a fef6 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012c74:	4640      	mov	r0, r8
 8012c76:	4629      	mov	r1, r5
 8012c78:	f007 fc28 	bl	801a4cc <GUI__SetText>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d0c0      	beq.n	8012c02 <BUTTON_CreateIndirect+0x4e>
 8012c80:	9b05      	ldr	r3, [sp, #20]
 8012c82:	429c      	cmp	r4, r3
 8012c84:	d009      	beq.n	8012c9a <BUTTON_CreateIndirect+0xe6>
 8012c86:	4638      	mov	r0, r7
 8012c88:	f00a fed8 	bl	801da3c <GUI_ALLOC_LockH>
 8012c8c:	9a05      	ldr	r2, [sp, #20]
 8012c8e:	6682      	str	r2, [r0, #104]	; 0x68
 8012c90:	4603      	mov	r3, r0
 8012c92:	a804      	add	r0, sp, #16
 8012c94:	9304      	str	r3, [sp, #16]
 8012c96:	f00a fee3 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012c9a:	4638      	mov	r0, r7
 8012c9c:	f003 fb58 	bl	8016350 <WM_InvalidateWindow>
 8012ca0:	f008 fb42 	bl	801b328 <GUI_Unlock>
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	b007      	add	sp, #28
 8012ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cac:	08012989 	.word	0x08012989
 8012cb0:	20000218 	.word	0x20000218
 8012cb4:	20000248 	.word	0x20000248

08012cb8 <BUTTON_SetText>:
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	4604      	mov	r4, r0
 8012cbc:	b082      	sub	sp, #8
 8012cbe:	460d      	mov	r5, r1
 8012cc0:	b918      	cbnz	r0, 8012cca <BUTTON_SetText+0x12>
 8012cc2:	2501      	movs	r5, #1
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	b002      	add	sp, #8
 8012cc8:	bd70      	pop	{r4, r5, r6, pc}
 8012cca:	f008 fb37 	bl	801b33c <GUI_Lock>
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f00a feb4 	bl	801da3c <GUI_ALLOC_LockH>
 8012cd4:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8012cd6:	9000      	str	r0, [sp, #0]
 8012cd8:	4668      	mov	r0, sp
 8012cda:	9601      	str	r6, [sp, #4]
 8012cdc:	f00a fec0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	a801      	add	r0, sp, #4
 8012ce4:	f007 fbf2 	bl	801a4cc <GUI__SetText>
 8012ce8:	f1d0 0501 	rsbs	r5, r0, #1
 8012cec:	bf38      	it	cc
 8012cee:	2500      	movcc	r5, #0
 8012cf0:	b97d      	cbnz	r5, 8012d12 <BUTTON_SetText+0x5a>
 8012cf2:	9b01      	ldr	r3, [sp, #4]
 8012cf4:	42b3      	cmp	r3, r6
 8012cf6:	d009      	beq.n	8012d0c <BUTTON_SetText+0x54>
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f00a fe9f 	bl	801da3c <GUI_ALLOC_LockH>
 8012cfe:	9a01      	ldr	r2, [sp, #4]
 8012d00:	6682      	str	r2, [r0, #104]	; 0x68
 8012d02:	4603      	mov	r3, r0
 8012d04:	4668      	mov	r0, sp
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	f00a feaa 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f003 fb1f 	bl	8016350 <WM_InvalidateWindow>
 8012d12:	f008 fb09 	bl	801b328 <GUI_Unlock>
 8012d16:	4628      	mov	r0, r5
 8012d18:	b002      	add	sp, #8
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}

08012d1c <BUTTON_SetFont>:
 8012d1c:	b530      	push	{r4, r5, lr}
 8012d1e:	4604      	mov	r4, r0
 8012d20:	b083      	sub	sp, #12
 8012d22:	460d      	mov	r5, r1
 8012d24:	b180      	cbz	r0, 8012d48 <BUTTON_SetFont+0x2c>
 8012d26:	f008 fb09 	bl	801b33c <GUI_Lock>
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f00a fe86 	bl	801da3c <GUI_ALLOC_LockH>
 8012d30:	ab02      	add	r3, sp, #8
 8012d32:	6545      	str	r5, [r0, #84]	; 0x54
 8012d34:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f00a fe91 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f003 fb06 	bl	8016350 <WM_InvalidateWindow>
 8012d44:	f008 faf0 	bl	801b328 <GUI_Unlock>
 8012d48:	b003      	add	sp, #12
 8012d4a:	bd30      	pop	{r4, r5, pc}

08012d4c <WM__ForEachDesc>:
 8012d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d50:	b085      	sub	sp, #20
 8012d52:	460d      	mov	r5, r1
 8012d54:	4614      	mov	r4, r2
 8012d56:	f00a fe67 	bl	801da28 <GUI_ALLOC_h2p>
 8012d5a:	69c0      	ldr	r0, [r0, #28]
 8012d5c:	9002      	str	r0, [sp, #8]
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	f000 8099 	beq.w	8012e96 <WM__ForEachDesc+0x14a>
 8012d64:	4621      	mov	r1, r4
 8012d66:	47a8      	blx	r5
 8012d68:	9802      	ldr	r0, [sp, #8]
 8012d6a:	f00a fe5d 	bl	801da28 <GUI_ALLOC_h2p>
 8012d6e:	69c0      	ldr	r0, [r0, #28]
 8012d70:	9003      	str	r0, [sp, #12]
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f000 8087 	beq.w	8012e86 <WM__ForEachDesc+0x13a>
 8012d78:	4621      	mov	r1, r4
 8012d7a:	47a8      	blx	r5
 8012d7c:	9803      	ldr	r0, [sp, #12]
 8012d7e:	f00a fe53 	bl	801da28 <GUI_ALLOC_h2p>
 8012d82:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8012d86:	f1b8 0f00 	cmp.w	r8, #0
 8012d8a:	d074      	beq.n	8012e76 <WM__ForEachDesc+0x12a>
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	4621      	mov	r1, r4
 8012d90:	47a8      	blx	r5
 8012d92:	4640      	mov	r0, r8
 8012d94:	f00a fe48 	bl	801da28 <GUI_ALLOC_h2p>
 8012d98:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8012d9c:	f1b9 0f00 	cmp.w	r9, #0
 8012da0:	d061      	beq.n	8012e66 <WM__ForEachDesc+0x11a>
 8012da2:	4648      	mov	r0, r9
 8012da4:	4621      	mov	r1, r4
 8012da6:	47a8      	blx	r5
 8012da8:	4648      	mov	r0, r9
 8012daa:	f00a fe3d 	bl	801da28 <GUI_ALLOC_h2p>
 8012dae:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8012db2:	f1ba 0f00 	cmp.w	sl, #0
 8012db6:	d04e      	beq.n	8012e56 <WM__ForEachDesc+0x10a>
 8012db8:	4650      	mov	r0, sl
 8012dba:	4621      	mov	r1, r4
 8012dbc:	47a8      	blx	r5
 8012dbe:	4650      	mov	r0, sl
 8012dc0:	f00a fe32 	bl	801da28 <GUI_ALLOC_h2p>
 8012dc4:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8012dc8:	f1bb 0f00 	cmp.w	fp, #0
 8012dcc:	d03b      	beq.n	8012e46 <WM__ForEachDesc+0xfa>
 8012dce:	4658      	mov	r0, fp
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	47a8      	blx	r5
 8012dd4:	4658      	mov	r0, fp
 8012dd6:	f00a fe27 	bl	801da28 <GUI_ALLOC_h2p>
 8012dda:	69c0      	ldr	r0, [r0, #28]
 8012ddc:	9001      	str	r0, [sp, #4]
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d029      	beq.n	8012e36 <WM__ForEachDesc+0xea>
 8012de2:	4621      	mov	r1, r4
 8012de4:	47a8      	blx	r5
 8012de6:	9801      	ldr	r0, [sp, #4]
 8012de8:	f00a fe1e 	bl	801da28 <GUI_ALLOC_h2p>
 8012dec:	69c6      	ldr	r6, [r0, #28]
 8012dee:	b1de      	cbz	r6, 8012e28 <WM__ForEachDesc+0xdc>
 8012df0:	4630      	mov	r0, r6
 8012df2:	4621      	mov	r1, r4
 8012df4:	47a8      	blx	r5
 8012df6:	4630      	mov	r0, r6
 8012df8:	f00a fe16 	bl	801da28 <GUI_ALLOC_h2p>
 8012dfc:	69c7      	ldr	r7, [r0, #28]
 8012dfe:	b16f      	cbz	r7, 8012e1c <WM__ForEachDesc+0xd0>
 8012e00:	4638      	mov	r0, r7
 8012e02:	4621      	mov	r1, r4
 8012e04:	47a8      	blx	r5
 8012e06:	4638      	mov	r0, r7
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4622      	mov	r2, r4
 8012e0c:	f7ff ff9e 	bl	8012d4c <WM__ForEachDesc>
 8012e10:	4638      	mov	r0, r7
 8012e12:	f00a fe09 	bl	801da28 <GUI_ALLOC_h2p>
 8012e16:	6a07      	ldr	r7, [r0, #32]
 8012e18:	2f00      	cmp	r7, #0
 8012e1a:	d1f1      	bne.n	8012e00 <WM__ForEachDesc+0xb4>
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f00a fe03 	bl	801da28 <GUI_ALLOC_h2p>
 8012e22:	6a06      	ldr	r6, [r0, #32]
 8012e24:	2e00      	cmp	r6, #0
 8012e26:	d1e3      	bne.n	8012df0 <WM__ForEachDesc+0xa4>
 8012e28:	9801      	ldr	r0, [sp, #4]
 8012e2a:	f00a fdfd 	bl	801da28 <GUI_ALLOC_h2p>
 8012e2e:	6a00      	ldr	r0, [r0, #32]
 8012e30:	9001      	str	r0, [sp, #4]
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d1d5      	bne.n	8012de2 <WM__ForEachDesc+0x96>
 8012e36:	4658      	mov	r0, fp
 8012e38:	f00a fdf6 	bl	801da28 <GUI_ALLOC_h2p>
 8012e3c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8012e40:	f1bb 0f00 	cmp.w	fp, #0
 8012e44:	d1c3      	bne.n	8012dce <WM__ForEachDesc+0x82>
 8012e46:	4650      	mov	r0, sl
 8012e48:	f00a fdee 	bl	801da28 <GUI_ALLOC_h2p>
 8012e4c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8012e50:	f1ba 0f00 	cmp.w	sl, #0
 8012e54:	d1b0      	bne.n	8012db8 <WM__ForEachDesc+0x6c>
 8012e56:	4648      	mov	r0, r9
 8012e58:	f00a fde6 	bl	801da28 <GUI_ALLOC_h2p>
 8012e5c:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8012e60:	f1b9 0f00 	cmp.w	r9, #0
 8012e64:	d19d      	bne.n	8012da2 <WM__ForEachDesc+0x56>
 8012e66:	4640      	mov	r0, r8
 8012e68:	f00a fdde 	bl	801da28 <GUI_ALLOC_h2p>
 8012e6c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8012e70:	f1b8 0f00 	cmp.w	r8, #0
 8012e74:	d18a      	bne.n	8012d8c <WM__ForEachDesc+0x40>
 8012e76:	9803      	ldr	r0, [sp, #12]
 8012e78:	f00a fdd6 	bl	801da28 <GUI_ALLOC_h2p>
 8012e7c:	6a00      	ldr	r0, [r0, #32]
 8012e7e:	9003      	str	r0, [sp, #12]
 8012e80:	2800      	cmp	r0, #0
 8012e82:	f47f af79 	bne.w	8012d78 <WM__ForEachDesc+0x2c>
 8012e86:	9802      	ldr	r0, [sp, #8]
 8012e88:	f00a fdce 	bl	801da28 <GUI_ALLOC_h2p>
 8012e8c:	6a00      	ldr	r0, [r0, #32]
 8012e8e:	9002      	str	r0, [sp, #8]
 8012e90:	2800      	cmp	r0, #0
 8012e92:	f47f af67 	bne.w	8012d64 <WM__ForEachDesc+0x18>
 8012e96:	b005      	add	sp, #20
 8012e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e9c <WM__GetFocusedChild>:
 8012e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e9e:	4d10      	ldr	r5, [pc, #64]	; (8012ee0 <WM__GetFocusedChild+0x44>)
 8012ea0:	4c10      	ldr	r4, [pc, #64]	; (8012ee4 <WM__GetFocusedChild+0x48>)
 8012ea2:	682b      	ldr	r3, [r5, #0]
 8012ea4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012ea8:	4607      	mov	r7, r0
 8012eaa:	b083      	sub	sp, #12
 8012eac:	4618      	mov	r0, r3
 8012eae:	b90b      	cbnz	r3, 8012eb4 <WM__GetFocusedChild+0x18>
 8012eb0:	b003      	add	sp, #12
 8012eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb4:	f00a fdc2 	bl	801da3c <GUI_ALLOC_LockH>
 8012eb8:	4606      	mov	r6, r0
 8012eba:	9001      	str	r0, [sp, #4]
 8012ebc:	b158      	cbz	r0, 8012ed6 <WM__GetFocusedChild+0x3a>
 8012ebe:	6986      	ldr	r6, [r0, #24]
 8012ec0:	a801      	add	r0, sp, #4
 8012ec2:	f00a fdcd 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012ec6:	42b7      	cmp	r7, r6
 8012ec8:	bf06      	itte	eq
 8012eca:	682b      	ldreq	r3, [r5, #0]
 8012ecc:	f854 0023 	ldreq.w	r0, [r4, r3, lsl #2]
 8012ed0:	2000      	movne	r0, #0
 8012ed2:	b003      	add	sp, #12
 8012ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ed6:	a801      	add	r0, sp, #4
 8012ed8:	f00a fdc2 	bl	801da60 <GUI_ALLOC_UnlockH>
 8012edc:	4630      	mov	r0, r6
 8012ede:	e7e7      	b.n	8012eb0 <WM__GetFocusedChild+0x14>
 8012ee0:	2002cb20 	.word	0x2002cb20
 8012ee4:	2002cb10 	.word	0x2002cb10

08012ee8 <WM__GetLastSibling>:
 8012ee8:	b510      	push	{r4, lr}
 8012eea:	4604      	mov	r4, r0
 8012eec:	b908      	cbnz	r0, 8012ef2 <WM__GetLastSibling+0xa>
 8012eee:	e006      	b.n	8012efe <WM__GetLastSibling+0x16>
 8012ef0:	461c      	mov	r4, r3
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f00a fd98 	bl	801da28 <GUI_ALLOC_h2p>
 8012ef8:	6a03      	ldr	r3, [r0, #32]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1f8      	bne.n	8012ef0 <WM__GetLastSibling+0x8>
 8012efe:	4620      	mov	r0, r4
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	bf00      	nop

08012f04 <WM__GetPrevSibling>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4605      	mov	r5, r0
 8012f08:	f001 f994 	bl	8014234 <WM_GetParent>
 8012f0c:	b910      	cbnz	r0, 8012f14 <WM__GetPrevSibling+0x10>
 8012f0e:	2400      	movs	r4, #0
 8012f10:	4620      	mov	r0, r4
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	f00a fd88 	bl	801da28 <GUI_ALLOC_h2p>
 8012f18:	69c4      	ldr	r4, [r0, #28]
 8012f1a:	2c00      	cmp	r4, #0
 8012f1c:	d0f7      	beq.n	8012f0e <WM__GetPrevSibling+0xa>
 8012f1e:	42a5      	cmp	r5, r4
 8012f20:	d103      	bne.n	8012f2a <WM__GetPrevSibling+0x26>
 8012f22:	e7f4      	b.n	8012f0e <WM__GetPrevSibling+0xa>
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d0f2      	beq.n	8012f0e <WM__GetPrevSibling+0xa>
 8012f28:	461c      	mov	r4, r3
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f00a fd7c 	bl	801da28 <GUI_ALLOC_h2p>
 8012f30:	6a03      	ldr	r3, [r0, #32]
 8012f32:	42ab      	cmp	r3, r5
 8012f34:	d1f6      	bne.n	8012f24 <WM__GetPrevSibling+0x20>
 8012f36:	4620      	mov	r0, r4
 8012f38:	bd38      	pop	{r3, r4, r5, pc}
 8012f3a:	bf00      	nop

08012f3c <WM__IsAncestor>:
 8012f3c:	b510      	push	{r4, lr}
 8012f3e:	460c      	mov	r4, r1
 8012f40:	b138      	cbz	r0, 8012f52 <WM__IsAncestor+0x16>
 8012f42:	b131      	cbz	r1, 8012f52 <WM__IsAncestor+0x16>
 8012f44:	f00a fd70 	bl	801da28 <GUI_ALLOC_h2p>
 8012f48:	6980      	ldr	r0, [r0, #24]
 8012f4a:	42a0      	cmp	r0, r4
 8012f4c:	d003      	beq.n	8012f56 <WM__IsAncestor+0x1a>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d1f8      	bne.n	8012f44 <WM__IsAncestor+0x8>
 8012f52:	2000      	movs	r0, #0
 8012f54:	bd10      	pop	{r4, pc}
 8012f56:	2001      	movs	r0, #1
 8012f58:	bd10      	pop	{r4, pc}
 8012f5a:	bf00      	nop

08012f5c <WM__IsAncestorOrSelf>:
 8012f5c:	4288      	cmp	r0, r1
 8012f5e:	b510      	push	{r4, lr}
 8012f60:	460c      	mov	r4, r1
 8012f62:	d00a      	beq.n	8012f7a <WM__IsAncestorOrSelf+0x1e>
 8012f64:	b138      	cbz	r0, 8012f76 <WM__IsAncestorOrSelf+0x1a>
 8012f66:	b131      	cbz	r1, 8012f76 <WM__IsAncestorOrSelf+0x1a>
 8012f68:	f00a fd5e 	bl	801da28 <GUI_ALLOC_h2p>
 8012f6c:	6980      	ldr	r0, [r0, #24]
 8012f6e:	4284      	cmp	r4, r0
 8012f70:	d003      	beq.n	8012f7a <WM__IsAncestorOrSelf+0x1e>
 8012f72:	2800      	cmp	r0, #0
 8012f74:	d1f8      	bne.n	8012f68 <WM__IsAncestorOrSelf+0xc>
 8012f76:	2000      	movs	r0, #0
 8012f78:	bd10      	pop	{r4, pc}
 8012f7a:	2001      	movs	r0, #1
 8012f7c:	bd10      	pop	{r4, pc}
 8012f7e:	bf00      	nop

08012f80 <WM__IsEnabled>:
 8012f80:	b508      	push	{r3, lr}
 8012f82:	f00a fd51 	bl	801da28 <GUI_ALLOC_h2p>
 8012f86:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012f88:	f080 0010 	eor.w	r0, r0, #16
 8012f8c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8012f90:	bd08      	pop	{r3, pc}
 8012f92:	bf00      	nop

08012f94 <WM__Screen2Client>:
 8012f94:	4603      	mov	r3, r0
 8012f96:	4608      	mov	r0, r1
 8012f98:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012f9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012fa0:	4252      	negs	r2, r2
 8012fa2:	4249      	negs	r1, r1
 8012fa4:	f009 bbd0 	b.w	801c748 <GUI_MoveRect>

08012fa8 <WM__SendMessage>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	4c0d      	ldr	r4, [pc, #52]	; (8012fe0 <WM__SendMessage+0x38>)
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	2b13      	cmp	r3, #19
 8012fb0:	460d      	mov	r5, r1
 8012fb2:	4606      	mov	r6, r0
 8012fb4:	dd00      	ble.n	8012fb8 <WM__SendMessage+0x10>
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}
 8012fb8:	f00a fd36 	bl	801da28 <GUI_ALLOC_h2p>
 8012fbc:	6903      	ldr	r3, [r0, #16]
 8012fbe:	606e      	str	r6, [r5, #4]
 8012fc0:	b143      	cbz	r3, 8012fd4 <WM__SendMessage+0x2c>
 8012fc2:	6822      	ldr	r2, [r4, #0]
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	3201      	adds	r2, #1
 8012fc8:	6022      	str	r2, [r4, #0]
 8012fca:	4798      	blx	r3
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	6023      	str	r3, [r4, #0]
 8012fd2:	bd70      	pop	{r4, r5, r6, pc}
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fda:	f003 bf1f 	b.w	8016e1c <WM_DefaultProc>
 8012fde:	bf00      	nop
 8012fe0:	2002b16c 	.word	0x2002b16c

08012fe4 <WM__SendMessageNoPara>:
 8012fe4:	b530      	push	{r4, r5, lr}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	2300      	movs	r3, #0
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	9301      	str	r3, [sp, #4]
 8012fee:	9302      	str	r3, [sp, #8]
 8012ff0:	9303      	str	r3, [sp, #12]
 8012ff2:	460d      	mov	r5, r1
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	f00a fd17 	bl	801da28 <GUI_ALLOC_h2p>
 8012ffa:	6903      	ldr	r3, [r0, #16]
 8012ffc:	b12b      	cbz	r3, 801300a <WM__SendMessageNoPara+0x26>
 8012ffe:	a804      	add	r0, sp, #16
 8013000:	9401      	str	r4, [sp, #4]
 8013002:	f840 5d10 	str.w	r5, [r0, #-16]!
 8013006:	4668      	mov	r0, sp
 8013008:	4798      	blx	r3
 801300a:	b005      	add	sp, #20
 801300c:	bd30      	pop	{r4, r5, pc}
 801300e:	bf00      	nop

08013010 <WM__UpdateChildPositions>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	69c4      	ldr	r4, [r0, #28]
 8013016:	b08b      	sub	sp, #44	; 0x2c
 8013018:	9106      	str	r1, [sp, #24]
 801301a:	9202      	str	r2, [sp, #8]
 801301c:	9307      	str	r3, [sp, #28]
 801301e:	2c00      	cmp	r4, #0
 8013020:	f000 808b 	beq.w	801313a <WM__UpdateChildPositions+0x12a>
 8013024:	b29b      	uxth	r3, r3
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	b28b      	uxth	r3, r1
 801302a:	9304      	str	r3, [sp, #16]
 801302c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801302e:	b29b      	uxth	r3, r3
 8013030:	9305      	str	r3, [sp, #20]
 8013032:	e046      	b.n	80130c2 <WM__UpdateChildPositions+0xb2>
 8013034:	9e06      	ldr	r6, [sp, #24]
 8013036:	9b07      	ldr	r3, [sp, #28]
 8013038:	442e      	add	r6, r5
 801303a:	443b      	add	r3, r7
 801303c:	b2b6      	uxth	r6, r6
 801303e:	fa1f fb83 	uxth.w	fp, r3
 8013042:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8013046:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801304a:	d058      	beq.n	80130fe <WM__UpdateChildPositions+0xee>
 801304c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8013050:	d160      	bne.n	8013114 <WM__UpdateChildPositions+0x104>
 8013052:	f8dd a008 	ldr.w	sl, [sp, #8]
 8013056:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801305a:	44ca      	add	sl, r9
 801305c:	44c4      	add	ip, r8
 801305e:	fa1f fa8a 	uxth.w	sl, sl
 8013062:	fa1f fc8c 	uxth.w	ip, ip
 8013066:	b236      	sxth	r6, r6
 8013068:	b22d      	sxth	r5, r5
 801306a:	fa0f fa8a 	sxth.w	sl, sl
 801306e:	fa0f f989 	sxth.w	r9, r9
 8013072:	1b71      	subs	r1, r6, r5
 8013074:	ebc9 020a 	rsb	r2, r9, sl
 8013078:	d100      	bne.n	801307c <WM__UpdateChildPositions+0x6c>
 801307a:	b132      	cbz	r2, 801308a <WM__UpdateChildPositions+0x7a>
 801307c:	4620      	mov	r0, r4
 801307e:	f8cd c004 	str.w	ip, [sp, #4]
 8013082:	f000 fc0f 	bl	80138a4 <WM_MoveWindow>
 8013086:	f8dd c004 	ldr.w	ip, [sp, #4]
 801308a:	fa0f f38b 	sxth.w	r3, fp
 801308e:	b23f      	sxth	r7, r7
 8013090:	fa0f fc8c 	sxth.w	ip, ip
 8013094:	fa0f f888 	sxth.w	r8, r8
 8013098:	1b9e      	subs	r6, r3, r6
 801309a:	1bed      	subs	r5, r5, r7
 801309c:	ebca 0a0c 	rsb	sl, sl, ip
 80130a0:	ebc8 0909 	rsb	r9, r8, r9
 80130a4:	1971      	adds	r1, r6, r5
 80130a6:	eb0a 0209 	add.w	r2, sl, r9
 80130aa:	d100      	bne.n	80130ae <WM__UpdateChildPositions+0x9e>
 80130ac:	b112      	cbz	r2, 80130b4 <WM__UpdateChildPositions+0xa4>
 80130ae:	4620      	mov	r0, r4
 80130b0:	f001 fa98 	bl	80145e4 <WM_ResizeWindow>
 80130b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b6:	6a1c      	ldr	r4, [r3, #32]
 80130b8:	a809      	add	r0, sp, #36	; 0x24
 80130ba:	f00a fcd1 	bl	801da60 <GUI_ALLOC_UnlockH>
 80130be:	2c00      	cmp	r4, #0
 80130c0:	d03b      	beq.n	801313a <WM__UpdateChildPositions+0x12a>
 80130c2:	4620      	mov	r0, r4
 80130c4:	f00a fcba 	bl	801da3c <GUI_ALLOC_LockH>
 80130c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80130ca:	9009      	str	r0, [sp, #36]	; 0x24
 80130cc:	f402 7320 	and.w	r3, r2, #640	; 0x280
 80130d0:	2b80      	cmp	r3, #128	; 0x80
 80130d2:	8805      	ldrh	r5, [r0, #0]
 80130d4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80130d8:	8887      	ldrh	r7, [r0, #4]
 80130da:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 80130de:	d024      	beq.n	801312a <WM__UpdateChildPositions+0x11a>
 80130e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80130e4:	d0a6      	beq.n	8013034 <WM__UpdateChildPositions+0x24>
 80130e6:	9e04      	ldr	r6, [sp, #16]
 80130e8:	9b04      	ldr	r3, [sp, #16]
 80130ea:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80130ee:	442e      	add	r6, r5
 80130f0:	443b      	add	r3, r7
 80130f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80130f6:	b2b6      	uxth	r6, r6
 80130f8:	fa1f fb83 	uxth.w	fp, r3
 80130fc:	d1a6      	bne.n	801304c <WM__UpdateChildPositions+0x3c>
 80130fe:	f8dd a014 	ldr.w	sl, [sp, #20]
 8013102:	f8dd c014 	ldr.w	ip, [sp, #20]
 8013106:	44ca      	add	sl, r9
 8013108:	44c4      	add	ip, r8
 801310a:	fa1f fa8a 	uxth.w	sl, sl
 801310e:	fa1f fc8c 	uxth.w	ip, ip
 8013112:	e7a8      	b.n	8013066 <WM__UpdateChildPositions+0x56>
 8013114:	9802      	ldr	r0, [sp, #8]
 8013116:	fa1f fc80 	uxth.w	ip, r0
 801311a:	eb0c 0a09 	add.w	sl, ip, r9
 801311e:	44c4      	add	ip, r8
 8013120:	fa1f fa8a 	uxth.w	sl, sl
 8013124:	fa1f fc8c 	uxth.w	ip, ip
 8013128:	e79d      	b.n	8013066 <WM__UpdateChildPositions+0x56>
 801312a:	9e03      	ldr	r6, [sp, #12]
 801312c:	9b03      	ldr	r3, [sp, #12]
 801312e:	442e      	add	r6, r5
 8013130:	443b      	add	r3, r7
 8013132:	b2b6      	uxth	r6, r6
 8013134:	fa1f fb83 	uxth.w	fp, r3
 8013138:	e783      	b.n	8013042 <WM__UpdateChildPositions+0x32>
 801313a:	b00b      	add	sp, #44	; 0x2c
 801313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013140 <WM__AddCriticalHandle>:
 8013140:	4b02      	ldr	r3, [pc, #8]	; (801314c <WM__AddCriticalHandle+0xc>)
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	6002      	str	r2, [r0, #0]
 8013146:	6018      	str	r0, [r3, #0]
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	2002cb3c 	.word	0x2002cb3c

08013150 <WM__GetClientRectEx>:
 8013150:	b530      	push	{r4, r5, lr}
 8013152:	460c      	mov	r4, r1
 8013154:	b083      	sub	sp, #12
 8013156:	b158      	cbz	r0, 8013170 <WM__GetClientRectEx+0x20>
 8013158:	b151      	cbz	r1, 8013170 <WM__GetClientRectEx+0x20>
 801315a:	f00a fc6f 	bl	801da3c <GUI_ALLOC_LockH>
 801315e:	ad02      	add	r5, sp, #8
 8013160:	4621      	mov	r1, r4
 8013162:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013166:	f003 f81d 	bl	80161a4 <WM__GetClientRectWin>
 801316a:	4628      	mov	r0, r5
 801316c:	f00a fc78 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013170:	b003      	add	sp, #12
 8013172:	bd30      	pop	{r4, r5, pc}

08013174 <_cbTimer>:
 8013174:	b510      	push	{r4, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	b084      	sub	sp, #16
 801317a:	6840      	ldr	r0, [r0, #4]
 801317c:	2300      	movs	r3, #0
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	9301      	str	r3, [sp, #4]
 8013182:	9302      	str	r3, [sp, #8]
 8013184:	9303      	str	r3, [sp, #12]
 8013186:	b150      	cbz	r0, 801319e <_cbTimer+0x2a>
 8013188:	f00a fc4e 	bl	801da28 <GUI_ALLOC_h2p>
 801318c:	6863      	ldr	r3, [r4, #4]
 801318e:	6840      	ldr	r0, [r0, #4]
 8013190:	9303      	str	r3, [sp, #12]
 8013192:	4669      	mov	r1, sp
 8013194:	f240 1313 	movw	r3, #275	; 0x113
 8013198:	9300      	str	r3, [sp, #0]
 801319a:	f002 ffe7 	bl	801616c <WM_SendMessage>
 801319e:	b004      	add	sp, #16
 80131a0:	bd10      	pop	{r4, pc}
 80131a2:	bf00      	nop

080131a4 <WM__DeleteAssocTimer>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	4605      	mov	r5, r0
 80131aa:	f008 f8c7 	bl	801b33c <GUI_Lock>
 80131ae:	4668      	mov	r0, sp
 80131b0:	f007 ff02 	bl	801afb8 <GUI_TIMER__GetFirstTimer>
 80131b4:	4604      	mov	r4, r0
 80131b6:	b174      	cbz	r4, 80131d6 <WM__DeleteAssocTimer+0x32>
 80131b8:	2101      	movs	r1, #1
 80131ba:	4620      	mov	r0, r4
 80131bc:	f008 f848 	bl	801b250 <GUI_TIMER_GetFlag>
 80131c0:	9b00      	ldr	r3, [sp, #0]
 80131c2:	4602      	mov	r2, r0
 80131c4:	4669      	mov	r1, sp
 80131c6:	4620      	mov	r0, r4
 80131c8:	b103      	cbz	r3, 80131cc <WM__DeleteAssocTimer+0x28>
 80131ca:	b942      	cbnz	r2, 80131de <WM__DeleteAssocTimer+0x3a>
 80131cc:	f007 ff0c 	bl	801afe8 <GUI_TIMER__GetNextTimerLin>
 80131d0:	4604      	mov	r4, r0
 80131d2:	2c00      	cmp	r4, #0
 80131d4:	d1f0      	bne.n	80131b8 <WM__DeleteAssocTimer+0x14>
 80131d6:	f008 f8a7 	bl	801b328 <GUI_Unlock>
 80131da:	b002      	add	sp, #8
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	4618      	mov	r0, r3
 80131e0:	f00a fc22 	bl	801da28 <GUI_ALLOC_h2p>
 80131e4:	6843      	ldr	r3, [r0, #4]
 80131e6:	42ab      	cmp	r3, r5
 80131e8:	d005      	beq.n	80131f6 <WM__DeleteAssocTimer+0x52>
 80131ea:	4620      	mov	r0, r4
 80131ec:	4669      	mov	r1, sp
 80131ee:	f007 fefb 	bl	801afe8 <GUI_TIMER__GetNextTimerLin>
 80131f2:	4604      	mov	r4, r0
 80131f4:	e7df      	b.n	80131b6 <WM__DeleteAssocTimer+0x12>
 80131f6:	4620      	mov	r0, r4
 80131f8:	4669      	mov	r1, sp
 80131fa:	9e00      	ldr	r6, [sp, #0]
 80131fc:	f007 fef4 	bl	801afe8 <GUI_TIMER__GetNextTimerLin>
 8013200:	4604      	mov	r4, r0
 8013202:	2e00      	cmp	r6, #0
 8013204:	d0d7      	beq.n	80131b6 <WM__DeleteAssocTimer+0x12>
 8013206:	f008 f899 	bl	801b33c <GUI_Lock>
 801320a:	4630      	mov	r0, r6
 801320c:	f00a fc16 	bl	801da3c <GUI_ALLOC_LockH>
 8013210:	9001      	str	r0, [sp, #4]
 8013212:	6800      	ldr	r0, [r0, #0]
 8013214:	f007 ff5e 	bl	801b0d4 <GUI_TIMER_Delete>
 8013218:	a801      	add	r0, sp, #4
 801321a:	f00a fc21 	bl	801da60 <GUI_ALLOC_UnlockH>
 801321e:	4630      	mov	r0, r6
 8013220:	f00a fd1e 	bl	801dc60 <GUI_ALLOC_Free>
 8013224:	f008 f880 	bl	801b328 <GUI_Unlock>
 8013228:	e7c5      	b.n	80131b6 <WM__DeleteAssocTimer+0x12>
 801322a:	bf00      	nop

0801322c <WM_DeleteTimer>:
 801322c:	b530      	push	{r4, r5, lr}
 801322e:	4604      	mov	r4, r0
 8013230:	b083      	sub	sp, #12
 8013232:	b198      	cbz	r0, 801325c <WM_DeleteTimer+0x30>
 8013234:	f008 f882 	bl	801b33c <GUI_Lock>
 8013238:	4620      	mov	r0, r4
 801323a:	f00a fbff 	bl	801da3c <GUI_ALLOC_LockH>
 801323e:	ad02      	add	r5, sp, #8
 8013240:	4603      	mov	r3, r0
 8013242:	6800      	ldr	r0, [r0, #0]
 8013244:	f845 3d04 	str.w	r3, [r5, #-4]!
 8013248:	f007 ff44 	bl	801b0d4 <GUI_TIMER_Delete>
 801324c:	4628      	mov	r0, r5
 801324e:	f00a fc07 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013252:	4620      	mov	r0, r4
 8013254:	f00a fd04 	bl	801dc60 <GUI_ALLOC_Free>
 8013258:	f008 f866 	bl	801b328 <GUI_Unlock>
 801325c:	b003      	add	sp, #12
 801325e:	bd30      	pop	{r4, r5, pc}

08013260 <WM_CreateTimer>:
 8013260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013264:	b082      	sub	sp, #8
 8013266:	4680      	mov	r8, r0
 8013268:	460f      	mov	r7, r1
 801326a:	4615      	mov	r5, r2
 801326c:	f008 f866 	bl	801b33c <GUI_Lock>
 8013270:	200c      	movs	r0, #12
 8013272:	f00a fd6b 	bl	801dd4c <GUI_ALLOC_AllocZero>
 8013276:	4604      	mov	r4, r0
 8013278:	b928      	cbnz	r0, 8013286 <WM_CreateTimer+0x26>
 801327a:	f008 f855 	bl	801b328 <GUI_Unlock>
 801327e:	4620      	mov	r0, r4
 8013280:	b002      	add	sp, #8
 8013282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013286:	f008 f801 	bl	801b28c <GUI_GetTime>
 801328a:	4622      	mov	r2, r4
 801328c:	1941      	adds	r1, r0, r5
 801328e:	2301      	movs	r3, #1
 8013290:	4812      	ldr	r0, [pc, #72]	; (80132dc <WM_CreateTimer+0x7c>)
 8013292:	f007 fec9 	bl	801b028 <GUI_TIMER_Create>
 8013296:	4606      	mov	r6, r0
 8013298:	4620      	mov	r0, r4
 801329a:	b946      	cbnz	r6, 80132ae <WM_CreateTimer+0x4e>
 801329c:	f00a fce0 	bl	801dc60 <GUI_ALLOC_Free>
 80132a0:	f008 f842 	bl	801b328 <GUI_Unlock>
 80132a4:	4634      	mov	r4, r6
 80132a6:	4620      	mov	r0, r4
 80132a8:	b002      	add	sp, #8
 80132aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ae:	f00a fbc5 	bl	801da3c <GUI_ALLOC_LockH>
 80132b2:	4603      	mov	r3, r0
 80132b4:	a802      	add	r0, sp, #8
 80132b6:	f8c3 8004 	str.w	r8, [r3, #4]
 80132ba:	f840 3d04 	str.w	r3, [r0, #-4]!
 80132be:	609f      	str	r7, [r3, #8]
 80132c0:	601e      	str	r6, [r3, #0]
 80132c2:	f00a fbcd 	bl	801da60 <GUI_ALLOC_UnlockH>
 80132c6:	4630      	mov	r0, r6
 80132c8:	4629      	mov	r1, r5
 80132ca:	f007 ff67 	bl	801b19c <GUI_TIMER_SetPeriod>
 80132ce:	f008 f82b 	bl	801b328 <GUI_Unlock>
 80132d2:	4620      	mov	r0, r4
 80132d4:	b002      	add	sp, #8
 80132d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132da:	bf00      	nop
 80132dc:	08013175 	.word	0x08013175

080132e0 <WM_RestartTimer>:
 80132e0:	b530      	push	{r4, r5, lr}
 80132e2:	4604      	mov	r4, r0
 80132e4:	b083      	sub	sp, #12
 80132e6:	460d      	mov	r5, r1
 80132e8:	b908      	cbnz	r0, 80132ee <WM_RestartTimer+0xe>
 80132ea:	b003      	add	sp, #12
 80132ec:	bd30      	pop	{r4, r5, pc}
 80132ee:	f008 f825 	bl	801b33c <GUI_Lock>
 80132f2:	4620      	mov	r0, r4
 80132f4:	f00a fba2 	bl	801da3c <GUI_ALLOC_LockH>
 80132f8:	9001      	str	r0, [sp, #4]
 80132fa:	b94d      	cbnz	r5, 8013310 <WM_RestartTimer+0x30>
 80132fc:	6800      	ldr	r0, [r0, #0]
 80132fe:	f007 ff63 	bl	801b1c8 <GUI_TIMER_Restart>
 8013302:	a801      	add	r0, sp, #4
 8013304:	f00a fbac 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013308:	f008 f80e 	bl	801b328 <GUI_Unlock>
 801330c:	b003      	add	sp, #12
 801330e:	bd30      	pop	{r4, r5, pc}
 8013310:	6800      	ldr	r0, [r0, #0]
 8013312:	4629      	mov	r1, r5
 8013314:	f007 ff42 	bl	801b19c <GUI_TIMER_SetPeriod>
 8013318:	9801      	ldr	r0, [sp, #4]
 801331a:	e7ef      	b.n	80132fc <WM_RestartTimer+0x1c>

0801331c <WM_SetHasTrans>:
 801331c:	b530      	push	{r4, r5, lr}
 801331e:	4604      	mov	r4, r0
 8013320:	b083      	sub	sp, #12
 8013322:	f008 f80b 	bl	801b33c <GUI_Lock>
 8013326:	b91c      	cbnz	r4, 8013330 <WM_SetHasTrans+0x14>
 8013328:	f007 fffe 	bl	801b328 <GUI_Unlock>
 801332c:	b003      	add	sp, #12
 801332e:	bd30      	pop	{r4, r5, pc}
 8013330:	4620      	mov	r0, r4
 8013332:	f00a fb83 	bl	801da3c <GUI_ALLOC_LockH>
 8013336:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013338:	9001      	str	r0, [sp, #4]
 801333a:	07db      	lsls	r3, r3, #31
 801333c:	d506      	bpl.n	801334c <WM_SetHasTrans+0x30>
 801333e:	a801      	add	r0, sp, #4
 8013340:	f00a fb8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013344:	f007 fff0 	bl	801b328 <GUI_Unlock>
 8013348:	b003      	add	sp, #12
 801334a:	bd30      	pop	{r4, r5, pc}
 801334c:	4620      	mov	r0, r4
 801334e:	f001 fb87 	bl	8014a60 <WM_ValidateWindow>
 8013352:	9a01      	ldr	r2, [sp, #4]
 8013354:	4b05      	ldr	r3, [pc, #20]	; (801336c <WM_SetHasTrans+0x50>)
 8013356:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8013358:	6819      	ldr	r1, [r3, #0]
 801335a:	f040 0501 	orr.w	r5, r0, #1
 801335e:	3101      	adds	r1, #1
 8013360:	4620      	mov	r0, r4
 8013362:	6295      	str	r5, [r2, #40]	; 0x28
 8013364:	6019      	str	r1, [r3, #0]
 8013366:	f002 fff3 	bl	8016350 <WM_InvalidateWindow>
 801336a:	e7e8      	b.n	801333e <WM_SetHasTrans+0x22>
 801336c:	2002cb50 	.word	0x2002cb50

08013370 <WM_GetHasTrans>:
 8013370:	b510      	push	{r4, lr}
 8013372:	4604      	mov	r4, r0
 8013374:	f007 ffe2 	bl	801b33c <GUI_Lock>
 8013378:	b12c      	cbz	r4, 8013386 <WM_GetHasTrans+0x16>
 801337a:	4620      	mov	r0, r4
 801337c:	f00a fb54 	bl	801da28 <GUI_ALLOC_h2p>
 8013380:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013382:	f004 0401 	and.w	r4, r4, #1
 8013386:	f007 ffcf 	bl	801b328 <GUI_Unlock>
 801338a:	4620      	mov	r0, r4
 801338c:	bd10      	pop	{r4, pc}
 801338e:	bf00      	nop

08013390 <WM_SetScrollbarH>:
 8013390:	b570      	push	{r4, r5, r6, lr}
 8013392:	4605      	mov	r5, r0
 8013394:	b082      	sub	sp, #8
 8013396:	460e      	mov	r6, r1
 8013398:	f007 ffd0 	bl	801b33c <GUI_Lock>
 801339c:	4628      	mov	r0, r5
 801339e:	21ff      	movs	r1, #255	; 0xff
 80133a0:	f000 fd72 	bl	8013e88 <WM_GetDialogItem>
 80133a4:	4604      	mov	r4, r0
 80133a6:	b15e      	cbz	r6, 80133c0 <WM_SetScrollbarH+0x30>
 80133a8:	b990      	cbnz	r0, 80133d0 <WM_SetScrollbarH+0x40>
 80133aa:	4628      	mov	r0, r5
 80133ac:	4621      	mov	r1, r4
 80133ae:	f00c f9f1 	bl	801f794 <SCROLLBAR_CreateAttached>
 80133b2:	f007 ffb9 	bl	801b328 <GUI_Unlock>
 80133b6:	1c20      	adds	r0, r4, #0
 80133b8:	bf18      	it	ne
 80133ba:	2001      	movne	r0, #1
 80133bc:	b002      	add	sp, #8
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d0f6      	beq.n	80133b2 <WM_SetScrollbarH+0x22>
 80133c4:	f001 fb6e 	bl	8014aa4 <WM_HideWindow>
 80133c8:	4620      	mov	r0, r4
 80133ca:	f003 fbc1 	bl	8016b50 <WM__DeleteSecure>
 80133ce:	e7f0      	b.n	80133b2 <WM_SetScrollbarH+0x22>
 80133d0:	f00a fb34 	bl	801da3c <GUI_ALLOC_LockH>
 80133d4:	ab02      	add	r3, sp, #8
 80133d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80133d8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80133dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80133e0:	f042 0202 	orr.w	r2, r2, #2
 80133e4:	6282      	str	r2, [r0, #40]	; 0x28
 80133e6:	4618      	mov	r0, r3
 80133e8:	f00a fb3a 	bl	801da60 <GUI_ALLOC_UnlockH>
 80133ec:	e7e1      	b.n	80133b2 <WM_SetScrollbarH+0x22>
 80133ee:	bf00      	nop

080133f0 <WM_SetScrollbarV>:
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	4605      	mov	r5, r0
 80133f4:	b082      	sub	sp, #8
 80133f6:	460e      	mov	r6, r1
 80133f8:	f007 ffa0 	bl	801b33c <GUI_Lock>
 80133fc:	4628      	mov	r0, r5
 80133fe:	21fe      	movs	r1, #254	; 0xfe
 8013400:	f000 fd42 	bl	8013e88 <WM_GetDialogItem>
 8013404:	4604      	mov	r4, r0
 8013406:	b15e      	cbz	r6, 8013420 <WM_SetScrollbarV+0x30>
 8013408:	b990      	cbnz	r0, 8013430 <WM_SetScrollbarV+0x40>
 801340a:	4628      	mov	r0, r5
 801340c:	2108      	movs	r1, #8
 801340e:	f00c f9c1 	bl	801f794 <SCROLLBAR_CreateAttached>
 8013412:	f007 ff89 	bl	801b328 <GUI_Unlock>
 8013416:	1c20      	adds	r0, r4, #0
 8013418:	bf18      	it	ne
 801341a:	2001      	movne	r0, #1
 801341c:	b002      	add	sp, #8
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	2800      	cmp	r0, #0
 8013422:	d0f6      	beq.n	8013412 <WM_SetScrollbarV+0x22>
 8013424:	f001 fb3e 	bl	8014aa4 <WM_HideWindow>
 8013428:	4620      	mov	r0, r4
 801342a:	f003 fb91 	bl	8016b50 <WM__DeleteSecure>
 801342e:	e7f0      	b.n	8013412 <WM_SetScrollbarV+0x22>
 8013430:	f00a fb04 	bl	801da3c <GUI_ALLOC_LockH>
 8013434:	ab02      	add	r3, sp, #8
 8013436:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013438:	f843 0d04 	str.w	r0, [r3, #-4]!
 801343c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013440:	f042 0202 	orr.w	r2, r2, #2
 8013444:	6282      	str	r2, [r0, #40]	; 0x28
 8013446:	4618      	mov	r0, r3
 8013448:	f00a fb0a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801344c:	e7e1      	b.n	8013412 <WM_SetScrollbarV+0x22>
 801344e:	bf00      	nop

08013450 <WM_SetFocusOnPrevChild>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	4604      	mov	r4, r0
 8013454:	b908      	cbnz	r0, 801345a <WM_SetFocusOnPrevChild+0xa>
 8013456:	4620      	mov	r0, r4
 8013458:	bd38      	pop	{r3, r4, r5, pc}
 801345a:	f007 ff6f 	bl	801b33c <GUI_Lock>
 801345e:	4620      	mov	r0, r4
 8013460:	f7ff fd1c 	bl	8012e9c <WM__GetFocusedChild>
 8013464:	4604      	mov	r4, r0
 8013466:	bb38      	cbnz	r0, 80134b8 <WM_SetFocusOnPrevChild+0x68>
 8013468:	4620      	mov	r0, r4
 801346a:	f7ff fd3d 	bl	8012ee8 <WM__GetLastSibling>
 801346e:	4605      	mov	r5, r0
 8013470:	42ac      	cmp	r4, r5
 8013472:	bf08      	it	eq
 8013474:	2500      	moveq	r5, #0
 8013476:	462c      	mov	r4, r5
 8013478:	e00d      	b.n	8013496 <WM_SetFocusOnPrevChild+0x46>
 801347a:	4620      	mov	r0, r4
 801347c:	b184      	cbz	r4, 80134a0 <WM_SetFocusOnPrevChild+0x50>
 801347e:	f7ff fd41 	bl	8012f04 <WM__GetPrevSibling>
 8013482:	b910      	cbnz	r0, 801348a <WM_SetFocusOnPrevChild+0x3a>
 8013484:	4620      	mov	r0, r4
 8013486:	f7ff fd2f 	bl	8012ee8 <WM__GetLastSibling>
 801348a:	4284      	cmp	r4, r0
 801348c:	bf08      	it	eq
 801348e:	2000      	moveq	r0, #0
 8013490:	4285      	cmp	r5, r0
 8013492:	d00f      	beq.n	80134b4 <WM_SetFocusOnPrevChild+0x64>
 8013494:	4604      	mov	r4, r0
 8013496:	4620      	mov	r0, r4
 8013498:	f001 f832 	bl	8014500 <WM_IsFocusable>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0ec      	beq.n	801347a <WM_SetFocusOnPrevChild+0x2a>
 80134a0:	4620      	mov	r0, r4
 80134a2:	f001 f8d9 	bl	8014658 <WM_SetFocus>
 80134a6:	2800      	cmp	r0, #0
 80134a8:	bf18      	it	ne
 80134aa:	2400      	movne	r4, #0
 80134ac:	f007 ff3c 	bl	801b328 <GUI_Unlock>
 80134b0:	4620      	mov	r0, r4
 80134b2:	bd38      	pop	{r3, r4, r5, pc}
 80134b4:	462c      	mov	r4, r5
 80134b6:	e7f3      	b.n	80134a0 <WM_SetFocusOnPrevChild+0x50>
 80134b8:	f7ff fd24 	bl	8012f04 <WM__GetPrevSibling>
 80134bc:	4605      	mov	r5, r0
 80134be:	2800      	cmp	r0, #0
 80134c0:	d1d6      	bne.n	8013470 <WM_SetFocusOnPrevChild+0x20>
 80134c2:	e7d1      	b.n	8013468 <WM_SetFocusOnPrevChild+0x18>

080134c4 <WM_SetFocusOnNextChild>:
 80134c4:	b570      	push	{r4, r5, r6, lr}
 80134c6:	4606      	mov	r6, r0
 80134c8:	b910      	cbnz	r0, 80134d0 <WM_SetFocusOnNextChild+0xc>
 80134ca:	4604      	mov	r4, r0
 80134cc:	4620      	mov	r0, r4
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	f007 ff34 	bl	801b33c <GUI_Lock>
 80134d4:	4630      	mov	r0, r6
 80134d6:	f7ff fce1 	bl	8012e9c <WM__GetFocusedChild>
 80134da:	4604      	mov	r4, r0
 80134dc:	2800      	cmp	r0, #0
 80134de:	d135      	bne.n	801354c <WM_SetFocusOnNextChild+0x88>
 80134e0:	4630      	mov	r0, r6
 80134e2:	f00a faa1 	bl	801da28 <GUI_ALLOC_h2p>
 80134e6:	69c5      	ldr	r5, [r0, #28]
 80134e8:	42ac      	cmp	r4, r5
 80134ea:	bf08      	it	eq
 80134ec:	2500      	moveq	r5, #0
 80134ee:	462c      	mov	r4, r5
 80134f0:	e00f      	b.n	8013512 <WM_SetFocusOnNextChild+0x4e>
 80134f2:	4620      	mov	r0, r4
 80134f4:	b30c      	cbz	r4, 801353a <WM_SetFocusOnNextChild+0x76>
 80134f6:	f00a fa97 	bl	801da28 <GUI_ALLOC_h2p>
 80134fa:	6a03      	ldr	r3, [r0, #32]
 80134fc:	b91b      	cbnz	r3, 8013506 <WM_SetFocusOnNextChild+0x42>
 80134fe:	4630      	mov	r0, r6
 8013500:	f00a fa92 	bl	801da28 <GUI_ALLOC_h2p>
 8013504:	69c3      	ldr	r3, [r0, #28]
 8013506:	429c      	cmp	r4, r3
 8013508:	bf08      	it	eq
 801350a:	2300      	moveq	r3, #0
 801350c:	429d      	cmp	r5, r3
 801350e:	d019      	beq.n	8013544 <WM_SetFocusOnNextChild+0x80>
 8013510:	461c      	mov	r4, r3
 8013512:	4620      	mov	r0, r4
 8013514:	f000 fff4 	bl	8014500 <WM_IsFocusable>
 8013518:	2800      	cmp	r0, #0
 801351a:	d0ea      	beq.n	80134f2 <WM_SetFocusOnNextChild+0x2e>
 801351c:	b16c      	cbz	r4, 801353a <WM_SetFocusOnNextChild+0x76>
 801351e:	4d0e      	ldr	r5, [pc, #56]	; (8013558 <WM_SetFocusOnNextChild+0x94>)
 8013520:	4620      	mov	r0, r4
 8013522:	682e      	ldr	r6, [r5, #0]
 8013524:	f003 f86c 	bl	8016600 <WM__GetTopLevelLayer>
 8013528:	1c42      	adds	r2, r0, #1
 801352a:	4603      	mov	r3, r0
 801352c:	d006      	beq.n	801353c <WM_SetFocusOnNextChild+0x78>
 801352e:	4620      	mov	r0, r4
 8013530:	602b      	str	r3, [r5, #0]
 8013532:	f001 f891 	bl	8014658 <WM_SetFocus>
 8013536:	602e      	str	r6, [r5, #0]
 8013538:	b100      	cbz	r0, 801353c <WM_SetFocusOnNextChild+0x78>
 801353a:	2400      	movs	r4, #0
 801353c:	f007 fef4 	bl	801b328 <GUI_Unlock>
 8013540:	4620      	mov	r0, r4
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	462c      	mov	r4, r5
 8013546:	2c00      	cmp	r4, #0
 8013548:	d1e9      	bne.n	801351e <WM_SetFocusOnNextChild+0x5a>
 801354a:	e7f6      	b.n	801353a <WM_SetFocusOnNextChild+0x76>
 801354c:	f00a fa6c 	bl	801da28 <GUI_ALLOC_h2p>
 8013550:	6a05      	ldr	r5, [r0, #32]
 8013552:	2d00      	cmp	r5, #0
 8013554:	d1c8      	bne.n	80134e8 <WM_SetFocusOnNextChild+0x24>
 8013556:	e7c3      	b.n	80134e0 <WM_SetFocusOnNextChild+0x1c>
 8013558:	2002cb20 	.word	0x2002cb20

0801355c <WM_SetCapture>:
 801355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801355e:	4e10      	ldr	r6, [pc, #64]	; (80135a0 <WM_SetCapture+0x44>)
 8013560:	4c10      	ldr	r4, [pc, #64]	; (80135a4 <WM_SetCapture+0x48>)
 8013562:	b085      	sub	sp, #20
 8013564:	4605      	mov	r5, r0
 8013566:	460f      	mov	r7, r1
 8013568:	f007 fee8 	bl	801b33c <GUI_Lock>
 801356c:	6833      	ldr	r3, [r6, #0]
 801356e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013572:	42a8      	cmp	r0, r5
 8013574:	d000      	beq.n	8013578 <WM_SetCapture+0x1c>
 8013576:	b938      	cbnz	r0, 8013588 <WM_SetCapture+0x2c>
 8013578:	4a0b      	ldr	r2, [pc, #44]	; (80135a8 <WM_SetCapture+0x4c>)
 801357a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801357e:	7017      	strb	r7, [r2, #0]
 8013580:	f007 fed2 	bl	801b328 <GUI_Unlock>
 8013584:	b005      	add	sp, #20
 8013586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013588:	a904      	add	r1, sp, #16
 801358a:	2318      	movs	r3, #24
 801358c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8013590:	4669      	mov	r1, sp
 8013592:	f7ff fd09 	bl	8012fa8 <WM__SendMessage>
 8013596:	6833      	ldr	r3, [r6, #0]
 8013598:	2200      	movs	r2, #0
 801359a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801359e:	e7eb      	b.n	8013578 <WM_SetCapture+0x1c>
 80135a0:	2002cb20 	.word	0x2002cb20
 80135a4:	2002cb44 	.word	0x2002cb44
 80135a8:	2002cb24 	.word	0x2002cb24

080135ac <_MoveDescendents>:
 80135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	b0b5      	sub	sp, #212	; 0xd4
 80135b2:	2300      	movs	r3, #0
 80135b4:	9006      	str	r0, [sp, #24]
 80135b6:	468a      	mov	sl, r1
 80135b8:	931c      	str	r3, [sp, #112]	; 0x70
 80135ba:	931d      	str	r3, [sp, #116]	; 0x74
 80135bc:	931e      	str	r3, [sp, #120]	; 0x78
 80135be:	931f      	str	r3, [sp, #124]	; 0x7c
 80135c0:	2800      	cmp	r0, #0
 80135c2:	f000 8115 	beq.w	80137f0 <_MoveDescendents+0x244>
 80135c6:	9806      	ldr	r0, [sp, #24]
 80135c8:	f04f 0b03 	mov.w	fp, #3
 80135cc:	4691      	mov	r9, r2
 80135ce:	f00a fa35 	bl	801da3c <GUI_ALLOC_LockH>
 80135d2:	4651      	mov	r1, sl
 80135d4:	464a      	mov	r2, r9
 80135d6:	900a      	str	r0, [sp, #40]	; 0x28
 80135d8:	f009 f8b6 	bl	801c748 <GUI_MoveRect>
 80135dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80135de:	4651      	mov	r1, sl
 80135e0:	3008      	adds	r0, #8
 80135e2:	464a      	mov	r2, r9
 80135e4:	f009 f8b0 	bl	801c748 <GUI_MoveRect>
 80135e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ea:	a80a      	add	r0, sp, #40	; 0x28
 80135ec:	69da      	ldr	r2, [r3, #28]
 80135ee:	6a1b      	ldr	r3, [r3, #32]
 80135f0:	9307      	str	r3, [sp, #28]
 80135f2:	9204      	str	r2, [sp, #16]
 80135f4:	f00a fa34 	bl	801da60 <GUI_ALLOC_UnlockH>
 80135f8:	2300      	movs	r3, #0
 80135fa:	9320      	str	r3, [sp, #128]	; 0x80
 80135fc:	9321      	str	r3, [sp, #132]	; 0x84
 80135fe:	9322      	str	r3, [sp, #136]	; 0x88
 8013600:	9323      	str	r3, [sp, #140]	; 0x8c
 8013602:	9b04      	ldr	r3, [sp, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 80e2 	beq.w	80137ce <_MoveDescendents+0x222>
 801360a:	9804      	ldr	r0, [sp, #16]
 801360c:	f00a fa16 	bl	801da3c <GUI_ALLOC_LockH>
 8013610:	4651      	mov	r1, sl
 8013612:	464a      	mov	r2, r9
 8013614:	900b      	str	r0, [sp, #44]	; 0x2c
 8013616:	f009 f897 	bl	801c748 <GUI_MoveRect>
 801361a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801361c:	4651      	mov	r1, sl
 801361e:	3008      	adds	r0, #8
 8013620:	464a      	mov	r2, r9
 8013622:	f009 f891 	bl	801c748 <GUI_MoveRect>
 8013626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013628:	a80b      	add	r0, sp, #44	; 0x2c
 801362a:	69da      	ldr	r2, [r3, #28]
 801362c:	6a1b      	ldr	r3, [r3, #32]
 801362e:	9308      	str	r3, [sp, #32]
 8013630:	9205      	str	r2, [sp, #20]
 8013632:	f00a fa15 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013636:	2300      	movs	r3, #0
 8013638:	9324      	str	r3, [sp, #144]	; 0x90
 801363a:	9325      	str	r3, [sp, #148]	; 0x94
 801363c:	9326      	str	r3, [sp, #152]	; 0x98
 801363e:	9327      	str	r3, [sp, #156]	; 0x9c
 8013640:	9b05      	ldr	r3, [sp, #20]
 8013642:	2b00      	cmp	r3, #0
 8013644:	f000 80b3 	beq.w	80137ae <_MoveDescendents+0x202>
 8013648:	9805      	ldr	r0, [sp, #20]
 801364a:	464c      	mov	r4, r9
 801364c:	f00a f9f6 	bl	801da3c <GUI_ALLOC_LockH>
 8013650:	4651      	mov	r1, sl
 8013652:	4622      	mov	r2, r4
 8013654:	900c      	str	r0, [sp, #48]	; 0x30
 8013656:	f009 f877 	bl	801c748 <GUI_MoveRect>
 801365a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801365c:	4651      	mov	r1, sl
 801365e:	3008      	adds	r0, #8
 8013660:	4622      	mov	r2, r4
 8013662:	f009 f871 	bl	801c748 <GUI_MoveRect>
 8013666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013668:	a80c      	add	r0, sp, #48	; 0x30
 801366a:	69da      	ldr	r2, [r3, #28]
 801366c:	6a1b      	ldr	r3, [r3, #32]
 801366e:	9309      	str	r3, [sp, #36]	; 0x24
 8013670:	9202      	str	r2, [sp, #8]
 8013672:	f00a f9f5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013676:	2300      	movs	r3, #0
 8013678:	9328      	str	r3, [sp, #160]	; 0xa0
 801367a:	9329      	str	r3, [sp, #164]	; 0xa4
 801367c:	932a      	str	r3, [sp, #168]	; 0xa8
 801367e:	932b      	str	r3, [sp, #172]	; 0xac
 8013680:	9b02      	ldr	r3, [sp, #8]
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 8082 	beq.w	801378c <_MoveDescendents+0x1e0>
 8013688:	9802      	ldr	r0, [sp, #8]
 801368a:	4655      	mov	r5, sl
 801368c:	f00a f9d6 	bl	801da3c <GUI_ALLOC_LockH>
 8013690:	4629      	mov	r1, r5
 8013692:	4622      	mov	r2, r4
 8013694:	900d      	str	r0, [sp, #52]	; 0x34
 8013696:	f009 f857 	bl	801c748 <GUI_MoveRect>
 801369a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801369c:	4629      	mov	r1, r5
 801369e:	3008      	adds	r0, #8
 80136a0:	4622      	mov	r2, r4
 80136a2:	f009 f851 	bl	801c748 <GUI_MoveRect>
 80136a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a8:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80136ac:	6a1b      	ldr	r3, [r3, #32]
 80136ae:	9303      	str	r3, [sp, #12]
 80136b0:	2700      	movs	r7, #0
 80136b2:	a80d      	add	r0, sp, #52	; 0x34
 80136b4:	f00a f9d4 	bl	801da60 <GUI_ALLOC_UnlockH>
 80136b8:	972c      	str	r7, [sp, #176]	; 0xb0
 80136ba:	972d      	str	r7, [sp, #180]	; 0xb4
 80136bc:	972e      	str	r7, [sp, #184]	; 0xb8
 80136be:	972f      	str	r7, [sp, #188]	; 0xbc
 80136c0:	f1b8 0f00 	cmp.w	r8, #0
 80136c4:	d052      	beq.n	801376c <_MoveDescendents+0x1c0>
 80136c6:	4640      	mov	r0, r8
 80136c8:	f00a f9b8 	bl	801da3c <GUI_ALLOC_LockH>
 80136cc:	4629      	mov	r1, r5
 80136ce:	4622      	mov	r2, r4
 80136d0:	900e      	str	r0, [sp, #56]	; 0x38
 80136d2:	f009 f839 	bl	801c748 <GUI_MoveRect>
 80136d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80136d8:	4622      	mov	r2, r4
 80136da:	4629      	mov	r1, r5
 80136dc:	3008      	adds	r0, #8
 80136de:	f009 f833 	bl	801c748 <GUI_MoveRect>
 80136e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136e4:	a80e      	add	r0, sp, #56	; 0x38
 80136e6:	69de      	ldr	r6, [r3, #28]
 80136e8:	6a1b      	ldr	r3, [r3, #32]
 80136ea:	9301      	str	r3, [sp, #4]
 80136ec:	f00a f9b8 	bl	801da60 <GUI_ALLOC_UnlockH>
 80136f0:	2200      	movs	r2, #0
 80136f2:	9230      	str	r2, [sp, #192]	; 0xc0
 80136f4:	9231      	str	r2, [sp, #196]	; 0xc4
 80136f6:	9232      	str	r2, [sp, #200]	; 0xc8
 80136f8:	9233      	str	r2, [sp, #204]	; 0xcc
 80136fa:	af1a      	add	r7, sp, #104	; 0x68
 80136fc:	b90e      	cbnz	r6, 8013702 <_MoveDescendents+0x156>
 80136fe:	e027      	b.n	8013750 <_MoveDescendents+0x1a4>
 8013700:	464e      	mov	r6, r9
 8013702:	4630      	mov	r0, r6
 8013704:	f00a f99a 	bl	801da3c <GUI_ALLOC_LockH>
 8013708:	4629      	mov	r1, r5
 801370a:	4622      	mov	r2, r4
 801370c:	900f      	str	r0, [sp, #60]	; 0x3c
 801370e:	f009 f81b 	bl	801c748 <GUI_MoveRect>
 8013712:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013714:	4629      	mov	r1, r5
 8013716:	4622      	mov	r2, r4
 8013718:	3008      	adds	r0, #8
 801371a:	f009 f815 	bl	801c748 <GUI_MoveRect>
 801371e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013720:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8013724:	f8d3 9020 	ldr.w	r9, [r3, #32]
 8013728:	a80f      	add	r0, sp, #60	; 0x3c
 801372a:	f00a f999 	bl	801da60 <GUI_ALLOC_UnlockH>
 801372e:	4650      	mov	r0, sl
 8013730:	4629      	mov	r1, r5
 8013732:	4622      	mov	r2, r4
 8013734:	f7ff ff3a 	bl	80135ac <_MoveDescendents>
 8013738:	4630      	mov	r0, r6
 801373a:	a930      	add	r1, sp, #192	; 0xc0
 801373c:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 8013740:	9733      	str	r7, [sp, #204]	; 0xcc
 8013742:	951a      	str	r5, [sp, #104]	; 0x68
 8013744:	941b      	str	r4, [sp, #108]	; 0x6c
 8013746:	f7ff fc2f 	bl	8012fa8 <WM__SendMessage>
 801374a:	f1b9 0f00 	cmp.w	r9, #0
 801374e:	d1d7      	bne.n	8013700 <_MoveDescendents+0x154>
 8013750:	ab18      	add	r3, sp, #96	; 0x60
 8013752:	4640      	mov	r0, r8
 8013754:	a92c      	add	r1, sp, #176	; 0xb0
 8013756:	932f      	str	r3, [sp, #188]	; 0xbc
 8013758:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 801375c:	9518      	str	r5, [sp, #96]	; 0x60
 801375e:	9419      	str	r4, [sp, #100]	; 0x64
 8013760:	f7ff fc22 	bl	8012fa8 <WM__SendMessage>
 8013764:	9b01      	ldr	r3, [sp, #4]
 8013766:	b10b      	cbz	r3, 801376c <_MoveDescendents+0x1c0>
 8013768:	4698      	mov	r8, r3
 801376a:	e7ac      	b.n	80136c6 <_MoveDescendents+0x11a>
 801376c:	aa16      	add	r2, sp, #88	; 0x58
 801376e:	9802      	ldr	r0, [sp, #8]
 8013770:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 8013774:	a928      	add	r1, sp, #160	; 0xa0
 8013776:	922b      	str	r2, [sp, #172]	; 0xac
 8013778:	9516      	str	r5, [sp, #88]	; 0x58
 801377a:	9417      	str	r4, [sp, #92]	; 0x5c
 801377c:	f7ff fc14 	bl	8012fa8 <WM__SendMessage>
 8013780:	9b03      	ldr	r3, [sp, #12]
 8013782:	b113      	cbz	r3, 801378a <_MoveDescendents+0x1de>
 8013784:	9302      	str	r3, [sp, #8]
 8013786:	4618      	mov	r0, r3
 8013788:	e780      	b.n	801368c <_MoveDescendents+0xe0>
 801378a:	46aa      	mov	sl, r5
 801378c:	aa14      	add	r2, sp, #80	; 0x50
 801378e:	9805      	ldr	r0, [sp, #20]
 8013790:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 8013794:	a924      	add	r1, sp, #144	; 0x90
 8013796:	9227      	str	r2, [sp, #156]	; 0x9c
 8013798:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 801379c:	9415      	str	r4, [sp, #84]	; 0x54
 801379e:	f7ff fc03 	bl	8012fa8 <WM__SendMessage>
 80137a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137a4:	b113      	cbz	r3, 80137ac <_MoveDescendents+0x200>
 80137a6:	9305      	str	r3, [sp, #20]
 80137a8:	4618      	mov	r0, r3
 80137aa:	e74f      	b.n	801364c <_MoveDescendents+0xa0>
 80137ac:	46a1      	mov	r9, r4
 80137ae:	aa12      	add	r2, sp, #72	; 0x48
 80137b0:	9804      	ldr	r0, [sp, #16]
 80137b2:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 80137b6:	a920      	add	r1, sp, #128	; 0x80
 80137b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80137ba:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 80137be:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80137c2:	f7ff fbf1 	bl	8012fa8 <WM__SendMessage>
 80137c6:	9b08      	ldr	r3, [sp, #32]
 80137c8:	b10b      	cbz	r3, 80137ce <_MoveDescendents+0x222>
 80137ca:	9304      	str	r3, [sp, #16]
 80137cc:	e71d      	b.n	801360a <_MoveDescendents+0x5e>
 80137ce:	ab10      	add	r3, sp, #64	; 0x40
 80137d0:	2203      	movs	r2, #3
 80137d2:	9806      	ldr	r0, [sp, #24]
 80137d4:	931f      	str	r3, [sp, #124]	; 0x7c
 80137d6:	a91c      	add	r1, sp, #112	; 0x70
 80137d8:	921c      	str	r2, [sp, #112]	; 0x70
 80137da:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80137de:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 80137e2:	f7ff fbe1 	bl	8012fa8 <WM__SendMessage>
 80137e6:	9b07      	ldr	r3, [sp, #28]
 80137e8:	b113      	cbz	r3, 80137f0 <_MoveDescendents+0x244>
 80137ea:	9306      	str	r3, [sp, #24]
 80137ec:	4618      	mov	r0, r3
 80137ee:	e6ee      	b.n	80135ce <_MoveDescendents+0x22>
 80137f0:	b035      	add	sp, #212	; 0xd4
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f6:	bf00      	nop

080137f8 <WM__MoveWindow>:
 80137f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137fc:	b08b      	sub	sp, #44	; 0x2c
 80137fe:	2300      	movs	r3, #0
 8013800:	4605      	mov	r5, r0
 8013802:	460c      	mov	r4, r1
 8013804:	4616      	mov	r6, r2
 8013806:	9306      	str	r3, [sp, #24]
 8013808:	9307      	str	r3, [sp, #28]
 801380a:	9308      	str	r3, [sp, #32]
 801380c:	9309      	str	r3, [sp, #36]	; 0x24
 801380e:	2800      	cmp	r0, #0
 8013810:	d03a      	beq.n	8013888 <WM__MoveWindow+0x90>
 8013812:	b909      	cbnz	r1, 8013818 <WM__MoveWindow+0x20>
 8013814:	2a00      	cmp	r2, #0
 8013816:	d037      	beq.n	8013888 <WM__MoveWindow+0x90>
 8013818:	4628      	mov	r0, r5
 801381a:	f00a f90f 	bl	801da3c <GUI_ALLOC_LockH>
 801381e:	4603      	mov	r3, r0
 8013820:	c803      	ldmia	r0, {r0, r1}
 8013822:	f10d 0808 	add.w	r8, sp, #8
 8013826:	e888 0003 	stmia.w	r8, {r0, r1}
 801382a:	4632      	mov	r2, r6
 801382c:	4618      	mov	r0, r3
 801382e:	4621      	mov	r1, r4
 8013830:	9301      	str	r3, [sp, #4]
 8013832:	f008 ff89 	bl	801c748 <GUI_MoveRect>
 8013836:	9801      	ldr	r0, [sp, #4]
 8013838:	af0a      	add	r7, sp, #40	; 0x28
 801383a:	4621      	mov	r1, r4
 801383c:	4632      	mov	r2, r6
 801383e:	3008      	adds	r0, #8
 8013840:	f008 ff82 	bl	801c748 <GUI_MoveRect>
 8013844:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8013848:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801384c:	4638      	mov	r0, r7
 801384e:	f00a f907 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013852:	4632      	mov	r2, r6
 8013854:	4648      	mov	r0, r9
 8013856:	4621      	mov	r1, r4
 8013858:	f7ff fea8 	bl	80135ac <_MoveDescendents>
 801385c:	4628      	mov	r0, r5
 801385e:	f00a f8ed 	bl	801da3c <GUI_ALLOC_LockH>
 8013862:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013864:	9001      	str	r0, [sp, #4]
 8013866:	0792      	lsls	r2, r2, #30
 8013868:	d501      	bpl.n	801386e <WM__MoveWindow+0x76>
 801386a:	6981      	ldr	r1, [r0, #24]
 801386c:	b979      	cbnz	r1, 801388e <WM__MoveWindow+0x96>
 801386e:	4638      	mov	r0, r7
 8013870:	f00a f8f6 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013874:	2203      	movs	r2, #3
 8013876:	ab04      	add	r3, sp, #16
 8013878:	4628      	mov	r0, r5
 801387a:	a906      	add	r1, sp, #24
 801387c:	9404      	str	r4, [sp, #16]
 801387e:	9605      	str	r6, [sp, #20]
 8013880:	9206      	str	r2, [sp, #24]
 8013882:	9309      	str	r3, [sp, #36]	; 0x24
 8013884:	f7ff fb90 	bl	8012fa8 <WM__SendMessage>
 8013888:	b00b      	add	sp, #44	; 0x2c
 801388a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801388e:	6a02      	ldr	r2, [r0, #32]
 8013890:	f002 fb8c 	bl	8015fac <WM__InvalidateParent>
 8013894:	9b01      	ldr	r3, [sp, #4]
 8013896:	4640      	mov	r0, r8
 8013898:	6999      	ldr	r1, [r3, #24]
 801389a:	6a1a      	ldr	r2, [r3, #32]
 801389c:	f002 fb86 	bl	8015fac <WM__InvalidateParent>
 80138a0:	e7e5      	b.n	801386e <WM__MoveWindow+0x76>
 80138a2:	bf00      	nop

080138a4 <WM_MoveWindow>:
 80138a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138a8:	b08b      	sub	sp, #44	; 0x2c
 80138aa:	4605      	mov	r5, r0
 80138ac:	460c      	mov	r4, r1
 80138ae:	4616      	mov	r6, r2
 80138b0:	f007 fd44 	bl	801b33c <GUI_Lock>
 80138b4:	2300      	movs	r3, #0
 80138b6:	9306      	str	r3, [sp, #24]
 80138b8:	9307      	str	r3, [sp, #28]
 80138ba:	9308      	str	r3, [sp, #32]
 80138bc:	9309      	str	r3, [sp, #36]	; 0x24
 80138be:	2d00      	cmp	r5, #0
 80138c0:	d03a      	beq.n	8013938 <WM_MoveWindow+0x94>
 80138c2:	b90c      	cbnz	r4, 80138c8 <WM_MoveWindow+0x24>
 80138c4:	2e00      	cmp	r6, #0
 80138c6:	d037      	beq.n	8013938 <WM_MoveWindow+0x94>
 80138c8:	4628      	mov	r0, r5
 80138ca:	f00a f8b7 	bl	801da3c <GUI_ALLOC_LockH>
 80138ce:	4603      	mov	r3, r0
 80138d0:	c803      	ldmia	r0, {r0, r1}
 80138d2:	f10d 0808 	add.w	r8, sp, #8
 80138d6:	e888 0003 	stmia.w	r8, {r0, r1}
 80138da:	4632      	mov	r2, r6
 80138dc:	4618      	mov	r0, r3
 80138de:	4621      	mov	r1, r4
 80138e0:	9301      	str	r3, [sp, #4]
 80138e2:	f008 ff31 	bl	801c748 <GUI_MoveRect>
 80138e6:	9801      	ldr	r0, [sp, #4]
 80138e8:	af0a      	add	r7, sp, #40	; 0x28
 80138ea:	4621      	mov	r1, r4
 80138ec:	4632      	mov	r2, r6
 80138ee:	3008      	adds	r0, #8
 80138f0:	f008 ff2a 	bl	801c748 <GUI_MoveRect>
 80138f4:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 80138f8:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80138fc:	4638      	mov	r0, r7
 80138fe:	f00a f8af 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013902:	4632      	mov	r2, r6
 8013904:	4648      	mov	r0, r9
 8013906:	4621      	mov	r1, r4
 8013908:	f7ff fe50 	bl	80135ac <_MoveDescendents>
 801390c:	4628      	mov	r0, r5
 801390e:	f00a f895 	bl	801da3c <GUI_ALLOC_LockH>
 8013912:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013914:	9001      	str	r0, [sp, #4]
 8013916:	0792      	lsls	r2, r2, #30
 8013918:	d501      	bpl.n	801391e <WM_MoveWindow+0x7a>
 801391a:	6981      	ldr	r1, [r0, #24]
 801391c:	b989      	cbnz	r1, 8013942 <WM_MoveWindow+0x9e>
 801391e:	4638      	mov	r0, r7
 8013920:	f00a f89e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013924:	2203      	movs	r2, #3
 8013926:	ab04      	add	r3, sp, #16
 8013928:	4628      	mov	r0, r5
 801392a:	a906      	add	r1, sp, #24
 801392c:	9404      	str	r4, [sp, #16]
 801392e:	9605      	str	r6, [sp, #20]
 8013930:	9206      	str	r2, [sp, #24]
 8013932:	9309      	str	r3, [sp, #36]	; 0x24
 8013934:	f7ff fb38 	bl	8012fa8 <WM__SendMessage>
 8013938:	f007 fcf6 	bl	801b328 <GUI_Unlock>
 801393c:	b00b      	add	sp, #44	; 0x2c
 801393e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013942:	6a02      	ldr	r2, [r0, #32]
 8013944:	f002 fb32 	bl	8015fac <WM__InvalidateParent>
 8013948:	9b01      	ldr	r3, [sp, #4]
 801394a:	4640      	mov	r0, r8
 801394c:	6999      	ldr	r1, [r3, #24]
 801394e:	6a1a      	ldr	r2, [r3, #32]
 8013950:	f002 fb2c 	bl	8015fac <WM__InvalidateParent>
 8013954:	e7e3      	b.n	801391e <WM_MoveWindow+0x7a>
 8013956:	bf00      	nop

08013958 <WM_MoveTo>:
 8013958:	b570      	push	{r4, r5, r6, lr}
 801395a:	4604      	mov	r4, r0
 801395c:	b082      	sub	sp, #8
 801395e:	460e      	mov	r6, r1
 8013960:	4615      	mov	r5, r2
 8013962:	f007 fceb 	bl	801b33c <GUI_Lock>
 8013966:	b19c      	cbz	r4, 8013990 <WM_MoveTo+0x38>
 8013968:	4620      	mov	r0, r4
 801396a:	f00a f867 	bl	801da3c <GUI_ALLOC_LockH>
 801396e:	ab02      	add	r3, sp, #8
 8013970:	f9b0 1000 	ldrsh.w	r1, [r0]
 8013974:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013978:	f843 0d04 	str.w	r0, [r3, #-4]!
 801397c:	1a76      	subs	r6, r6, r1
 801397e:	1aad      	subs	r5, r5, r2
 8013980:	4618      	mov	r0, r3
 8013982:	f00a f86d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013986:	4620      	mov	r0, r4
 8013988:	4631      	mov	r1, r6
 801398a:	462a      	mov	r2, r5
 801398c:	f7ff ff34 	bl	80137f8 <WM__MoveWindow>
 8013990:	f007 fcca 	bl	801b328 <GUI_Unlock>
 8013994:	b002      	add	sp, #8
 8013996:	bd70      	pop	{r4, r5, r6, pc}

08013998 <WM_ResizeWindow.part.7>:
 8013998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801399c:	4606      	mov	r6, r0
 801399e:	b08a      	sub	sp, #40	; 0x28
 80139a0:	460f      	mov	r7, r1
 80139a2:	4690      	mov	r8, r2
 80139a4:	f007 fcca 	bl	801b33c <GUI_Lock>
 80139a8:	4630      	mov	r0, r6
 80139aa:	f00a f847 	bl	801da3c <GUI_ALLOC_LockH>
 80139ae:	4603      	mov	r3, r0
 80139b0:	c803      	ldmia	r0, {r0, r1}
 80139b2:	ad04      	add	r5, sp, #16
 80139b4:	ac06      	add	r4, sp, #24
 80139b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80139ba:	9303      	str	r3, [sp, #12]
 80139bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80139c0:	b14f      	cbz	r7, 80139d6 <WM_ResizeWindow.part.7+0x3e>
 80139c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139c4:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80139c8:	2a80      	cmp	r2, #128	; 0x80
 80139ca:	d05b      	beq.n	8013a84 <WM_ResizeWindow.part.7+0xec>
 80139cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80139d0:	4417      	add	r7, r2
 80139d2:	f8ad 701c 	strh.w	r7, [sp, #28]
 80139d6:	f1b8 0f00 	cmp.w	r8, #0
 80139da:	d00a      	beq.n	80139f2 <WM_ResizeWindow.part.7+0x5a>
 80139dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139de:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80139e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80139e6:	d053      	beq.n	8013a90 <WM_ResizeWindow.part.7+0xf8>
 80139e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80139ec:	4490      	add	r8, r2
 80139ee:	f8ad 801e 	strh.w	r8, [sp, #30]
 80139f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139f4:	03d1      	lsls	r1, r2, #15
 80139f6:	d43f      	bmi.n	8013a78 <WM_ResizeWindow.part.7+0xe0>
 80139f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139fc:	0792      	lsls	r2, r2, #30
 80139fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a02:	d50b      	bpl.n	8013a1c <WM_ResizeWindow.part.7+0x84>
 8013a04:	4629      	mov	r1, r5
 8013a06:	4622      	mov	r2, r4
 8013a08:	a808      	add	r0, sp, #32
 8013a0a:	f008 fe6b 	bl	801c6e4 <GUI_MergeRect>
 8013a0e:	9b03      	ldr	r3, [sp, #12]
 8013a10:	a808      	add	r0, sp, #32
 8013a12:	6999      	ldr	r1, [r3, #24]
 8013a14:	6a1a      	ldr	r2, [r3, #32]
 8013a16:	f002 fb41 	bl	801609c <WM__InvalidateRectEx>
 8013a1a:	9b03      	ldr	r3, [sp, #12]
 8013a1c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8013a20:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8013a24:	f9bd c01e 	ldrsh.w	ip, [sp, #30]
 8013a28:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8013a2c:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8013a30:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8013a34:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 8013a38:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013a3c:	ebc0 0c0c 	rsb	ip, r0, ip
 8013a40:	4618      	mov	r0, r3
 8013a42:	1b2b      	subs	r3, r5, r4
 8013a44:	ac0a      	add	r4, sp, #40	; 0x28
 8013a46:	ebc1 010e 	rsb	r1, r1, lr
 8013a4a:	f8cd c000 	str.w	ip, [sp]
 8013a4e:	1aba      	subs	r2, r7, r2
 8013a50:	f7ff fade 	bl	8013010 <WM__UpdateChildPositions>
 8013a54:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8013a58:	f101 0008 	add.w	r0, r1, #8
 8013a5c:	f006 fc8e 	bl	801a37c <GUI__IntersectRect>
 8013a60:	2105      	movs	r1, #5
 8013a62:	4630      	mov	r0, r6
 8013a64:	f002 fb92 	bl	801618c <WM__SendMsgNoData>
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f009 fff9 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013a6e:	f007 fc5b 	bl	801b328 <GUI_Unlock>
 8013a72:	b00a      	add	sp, #40	; 0x28
 8013a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a78:	4630      	mov	r0, r6
 8013a7a:	f001 fda1 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 8013a7e:	9b03      	ldr	r3, [sp, #12]
 8013a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a82:	e7b9      	b.n	80139f8 <WM_ResizeWindow.part.7+0x60>
 8013a84:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8013a88:	1bd7      	subs	r7, r2, r7
 8013a8a:	f8ad 7018 	strh.w	r7, [sp, #24]
 8013a8e:	e7a2      	b.n	80139d6 <WM_ResizeWindow.part.7+0x3e>
 8013a90:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013a94:	ebc8 0802 	rsb	r8, r8, r2
 8013a98:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013a9c:	e7a9      	b.n	80139f2 <WM_ResizeWindow.part.7+0x5a>
 8013a9e:	bf00      	nop

08013aa0 <_GetDialogItem>:
 8013aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa4:	b089      	sub	sp, #36	; 0x24
 8013aa6:	460e      	mov	r6, r1
 8013aa8:	9000      	str	r0, [sp, #0]
 8013aaa:	f009 ffbd 	bl	801da28 <GUI_ALLOC_h2p>
 8013aae:	69c4      	ldr	r4, [r0, #28]
 8013ab0:	b32c      	cbz	r4, 8013afe <_GetDialogItem+0x5e>
 8013ab2:	f10d 0810 	add.w	r8, sp, #16
 8013ab6:	4645      	mov	r5, r8
 8013ab8:	f10d 0b14 	add.w	fp, sp, #20
 8013abc:	f10d 0a18 	add.w	sl, sp, #24
 8013ac0:	f10d 091c 	add.w	r9, sp, #28
 8013ac4:	2700      	movs	r7, #0
 8013ac6:	e003      	b.n	8013ad0 <_GetDialogItem+0x30>
 8013ac8:	f009 ffae 	bl	801da28 <GUI_ALLOC_h2p>
 8013acc:	6a04      	ldr	r4, [r0, #32]
 8013ace:	b1b4      	cbz	r4, 8013afe <_GetDialogItem+0x5e>
 8013ad0:	2315      	movs	r3, #21
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	f8c8 7000 	str.w	r7, [r8]
 8013ada:	f8cb 7000 	str.w	r7, [fp]
 8013ade:	9304      	str	r3, [sp, #16]
 8013ae0:	f8ca 7000 	str.w	r7, [sl]
 8013ae4:	f8c9 7000 	str.w	r7, [r9]
 8013ae8:	f002 fb40 	bl	801616c <WM_SendMessage>
 8013aec:	9b07      	ldr	r3, [sp, #28]
 8013aee:	429e      	cmp	r6, r3
 8013af0:	4620      	mov	r0, r4
 8013af2:	46a8      	mov	r8, r5
 8013af4:	d1e8      	bne.n	8013ac8 <_GetDialogItem+0x28>
 8013af6:	4620      	mov	r0, r4
 8013af8:	b009      	add	sp, #36	; 0x24
 8013afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afe:	9800      	ldr	r0, [sp, #0]
 8013b00:	f009 ff92 	bl	801da28 <GUI_ALLOC_h2p>
 8013b04:	69c0      	ldr	r0, [r0, #28]
 8013b06:	9003      	str	r0, [sp, #12]
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	d069      	beq.n	8013be0 <_GetDialogItem+0x140>
 8013b0c:	9803      	ldr	r0, [sp, #12]
 8013b0e:	2400      	movs	r4, #0
 8013b10:	f009 ff8a 	bl	801da28 <GUI_ALLOC_h2p>
 8013b14:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8013b18:	f1bb 0f00 	cmp.w	fp, #0
 8013b1c:	d027      	beq.n	8013b6e <_GetDialogItem+0xce>
 8013b1e:	4633      	mov	r3, r6
 8013b20:	af04      	add	r7, sp, #16
 8013b22:	465e      	mov	r6, fp
 8013b24:	463d      	mov	r5, r7
 8013b26:	f10d 0a14 	add.w	sl, sp, #20
 8013b2a:	f10d 0918 	add.w	r9, sp, #24
 8013b2e:	f10d 081c 	add.w	r8, sp, #28
 8013b32:	469b      	mov	fp, r3
 8013b34:	e003      	b.n	8013b3e <_GetDialogItem+0x9e>
 8013b36:	f009 ff77 	bl	801da28 <GUI_ALLOC_h2p>
 8013b3a:	6a06      	ldr	r6, [r0, #32]
 8013b3c:	b1b6      	cbz	r6, 8013b6c <_GetDialogItem+0xcc>
 8013b3e:	2315      	movs	r3, #21
 8013b40:	4630      	mov	r0, r6
 8013b42:	4629      	mov	r1, r5
 8013b44:	603c      	str	r4, [r7, #0]
 8013b46:	f8ca 4000 	str.w	r4, [sl]
 8013b4a:	9304      	str	r3, [sp, #16]
 8013b4c:	f8c9 4000 	str.w	r4, [r9]
 8013b50:	f8c8 4000 	str.w	r4, [r8]
 8013b54:	f002 fb0a 	bl	801616c <WM_SendMessage>
 8013b58:	9b07      	ldr	r3, [sp, #28]
 8013b5a:	459b      	cmp	fp, r3
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	462f      	mov	r7, r5
 8013b60:	d1e9      	bne.n	8013b36 <_GetDialogItem+0x96>
 8013b62:	46b3      	mov	fp, r6
 8013b64:	4658      	mov	r0, fp
 8013b66:	b009      	add	sp, #36	; 0x24
 8013b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b6c:	465e      	mov	r6, fp
 8013b6e:	9803      	ldr	r0, [sp, #12]
 8013b70:	f009 ff5a 	bl	801da28 <GUI_ALLOC_h2p>
 8013b74:	69c0      	ldr	r0, [r0, #28]
 8013b76:	9002      	str	r0, [sp, #8]
 8013b78:	b358      	cbz	r0, 8013bd2 <_GetDialogItem+0x132>
 8013b7a:	f009 ff55 	bl	801da28 <GUI_ALLOC_h2p>
 8013b7e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8013b82:	f1bb 0f00 	cmp.w	fp, #0
 8013b86:	d02e      	beq.n	8013be6 <_GetDialogItem+0x146>
 8013b88:	af04      	add	r7, sp, #16
 8013b8a:	463d      	mov	r5, r7
 8013b8c:	f10d 0a14 	add.w	sl, sp, #20
 8013b90:	465f      	mov	r7, fp
 8013b92:	f10d 0918 	add.w	r9, sp, #24
 8013b96:	f10d 081c 	add.w	r8, sp, #28
 8013b9a:	46ab      	mov	fp, r5
 8013b9c:	e003      	b.n	8013ba6 <_GetDialogItem+0x106>
 8013b9e:	f009 ff43 	bl	801da28 <GUI_ALLOC_h2p>
 8013ba2:	6a07      	ldr	r7, [r0, #32]
 8013ba4:	b1ff      	cbz	r7, 8013be6 <_GetDialogItem+0x146>
 8013ba6:	2315      	movs	r3, #21
 8013ba8:	4638      	mov	r0, r7
 8013baa:	4629      	mov	r1, r5
 8013bac:	f8cb 4000 	str.w	r4, [fp]
 8013bb0:	f8ca 4000 	str.w	r4, [sl]
 8013bb4:	9304      	str	r3, [sp, #16]
 8013bb6:	f8c9 4000 	str.w	r4, [r9]
 8013bba:	f8c8 4000 	str.w	r4, [r8]
 8013bbe:	f002 fad5 	bl	801616c <WM_SendMessage>
 8013bc2:	9b07      	ldr	r3, [sp, #28]
 8013bc4:	429e      	cmp	r6, r3
 8013bc6:	4638      	mov	r0, r7
 8013bc8:	46ab      	mov	fp, r5
 8013bca:	d1e8      	bne.n	8013b9e <_GetDialogItem+0xfe>
 8013bcc:	46bb      	mov	fp, r7
 8013bce:	2f00      	cmp	r7, #0
 8013bd0:	d1c8      	bne.n	8013b64 <_GetDialogItem+0xc4>
 8013bd2:	9803      	ldr	r0, [sp, #12]
 8013bd4:	f009 ff28 	bl	801da28 <GUI_ALLOC_h2p>
 8013bd8:	6a00      	ldr	r0, [r0, #32]
 8013bda:	9003      	str	r0, [sp, #12]
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d197      	bne.n	8013b10 <_GetDialogItem+0x70>
 8013be0:	f04f 0b00 	mov.w	fp, #0
 8013be4:	e7be      	b.n	8013b64 <_GetDialogItem+0xc4>
 8013be6:	9802      	ldr	r0, [sp, #8]
 8013be8:	f009 ff1e 	bl	801da28 <GUI_ALLOC_h2p>
 8013bec:	69c0      	ldr	r0, [r0, #28]
 8013bee:	9001      	str	r0, [sp, #4]
 8013bf0:	b358      	cbz	r0, 8013c4a <_GetDialogItem+0x1aa>
 8013bf2:	f009 ff19 	bl	801da28 <GUI_ALLOC_h2p>
 8013bf6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8013bfa:	f1bb 0f00 	cmp.w	fp, #0
 8013bfe:	d02c      	beq.n	8013c5a <_GetDialogItem+0x1ba>
 8013c00:	af04      	add	r7, sp, #16
 8013c02:	463d      	mov	r5, r7
 8013c04:	f10d 0a14 	add.w	sl, sp, #20
 8013c08:	465f      	mov	r7, fp
 8013c0a:	f10d 0918 	add.w	r9, sp, #24
 8013c0e:	f10d 081c 	add.w	r8, sp, #28
 8013c12:	46ab      	mov	fp, r5
 8013c14:	e003      	b.n	8013c1e <_GetDialogItem+0x17e>
 8013c16:	f009 ff07 	bl	801da28 <GUI_ALLOC_h2p>
 8013c1a:	6a07      	ldr	r7, [r0, #32]
 8013c1c:	b1ef      	cbz	r7, 8013c5a <_GetDialogItem+0x1ba>
 8013c1e:	2315      	movs	r3, #21
 8013c20:	4638      	mov	r0, r7
 8013c22:	4629      	mov	r1, r5
 8013c24:	f8cb 4000 	str.w	r4, [fp]
 8013c28:	f8ca 4000 	str.w	r4, [sl]
 8013c2c:	9304      	str	r3, [sp, #16]
 8013c2e:	f8c9 4000 	str.w	r4, [r9]
 8013c32:	f8c8 4000 	str.w	r4, [r8]
 8013c36:	f002 fa99 	bl	801616c <WM_SendMessage>
 8013c3a:	9b07      	ldr	r3, [sp, #28]
 8013c3c:	429e      	cmp	r6, r3
 8013c3e:	4638      	mov	r0, r7
 8013c40:	46ab      	mov	fp, r5
 8013c42:	d1e8      	bne.n	8013c16 <_GetDialogItem+0x176>
 8013c44:	46bb      	mov	fp, r7
 8013c46:	2f00      	cmp	r7, #0
 8013c48:	d18c      	bne.n	8013b64 <_GetDialogItem+0xc4>
 8013c4a:	9802      	ldr	r0, [sp, #8]
 8013c4c:	f009 feec 	bl	801da28 <GUI_ALLOC_h2p>
 8013c50:	6a00      	ldr	r0, [r0, #32]
 8013c52:	9002      	str	r0, [sp, #8]
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d190      	bne.n	8013b7a <_GetDialogItem+0xda>
 8013c58:	e7bb      	b.n	8013bd2 <_GetDialogItem+0x132>
 8013c5a:	9801      	ldr	r0, [sp, #4]
 8013c5c:	f009 fee4 	bl	801da28 <GUI_ALLOC_h2p>
 8013c60:	69c0      	ldr	r0, [r0, #28]
 8013c62:	9000      	str	r0, [sp, #0]
 8013c64:	b340      	cbz	r0, 8013cb8 <_GetDialogItem+0x218>
 8013c66:	f009 fedf 	bl	801da28 <GUI_ALLOC_h2p>
 8013c6a:	69c5      	ldr	r5, [r0, #28]
 8013c6c:	b365      	cbz	r5, 8013cc8 <_GetDialogItem+0x228>
 8013c6e:	f10d 0b10 	add.w	fp, sp, #16
 8013c72:	465f      	mov	r7, fp
 8013c74:	f10d 0a14 	add.w	sl, sp, #20
 8013c78:	f10d 0918 	add.w	r9, sp, #24
 8013c7c:	f10d 081c 	add.w	r8, sp, #28
 8013c80:	e003      	b.n	8013c8a <_GetDialogItem+0x1ea>
 8013c82:	f009 fed1 	bl	801da28 <GUI_ALLOC_h2p>
 8013c86:	6a05      	ldr	r5, [r0, #32]
 8013c88:	b1f5      	cbz	r5, 8013cc8 <_GetDialogItem+0x228>
 8013c8a:	2315      	movs	r3, #21
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	4639      	mov	r1, r7
 8013c90:	f8cb 4000 	str.w	r4, [fp]
 8013c94:	f8ca 4000 	str.w	r4, [sl]
 8013c98:	9304      	str	r3, [sp, #16]
 8013c9a:	f8c9 4000 	str.w	r4, [r9]
 8013c9e:	f8c8 4000 	str.w	r4, [r8]
 8013ca2:	f002 fa63 	bl	801616c <WM_SendMessage>
 8013ca6:	9b07      	ldr	r3, [sp, #28]
 8013ca8:	429e      	cmp	r6, r3
 8013caa:	4628      	mov	r0, r5
 8013cac:	46bb      	mov	fp, r7
 8013cae:	d1e8      	bne.n	8013c82 <_GetDialogItem+0x1e2>
 8013cb0:	46ab      	mov	fp, r5
 8013cb2:	2d00      	cmp	r5, #0
 8013cb4:	f47f af56 	bne.w	8013b64 <_GetDialogItem+0xc4>
 8013cb8:	9801      	ldr	r0, [sp, #4]
 8013cba:	f009 feb5 	bl	801da28 <GUI_ALLOC_h2p>
 8013cbe:	6a00      	ldr	r0, [r0, #32]
 8013cc0:	9001      	str	r0, [sp, #4]
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d195      	bne.n	8013bf2 <_GetDialogItem+0x152>
 8013cc6:	e7c0      	b.n	8013c4a <_GetDialogItem+0x1aa>
 8013cc8:	9800      	ldr	r0, [sp, #0]
 8013cca:	f009 fead 	bl	801da28 <GUI_ALLOC_h2p>
 8013cce:	69c7      	ldr	r7, [r0, #28]
 8013cd0:	b927      	cbnz	r7, 8013cdc <_GetDialogItem+0x23c>
 8013cd2:	e00d      	b.n	8013cf0 <_GetDialogItem+0x250>
 8013cd4:	f009 fea8 	bl	801da28 <GUI_ALLOC_h2p>
 8013cd8:	6a07      	ldr	r7, [r0, #32]
 8013cda:	b14f      	cbz	r7, 8013cf0 <_GetDialogItem+0x250>
 8013cdc:	4638      	mov	r0, r7
 8013cde:	4631      	mov	r1, r6
 8013ce0:	f7ff fede 	bl	8013aa0 <_GetDialogItem>
 8013ce4:	4605      	mov	r5, r0
 8013ce6:	4638      	mov	r0, r7
 8013ce8:	2d00      	cmp	r5, #0
 8013cea:	d0f3      	beq.n	8013cd4 <_GetDialogItem+0x234>
 8013cec:	46ab      	mov	fp, r5
 8013cee:	e739      	b.n	8013b64 <_GetDialogItem+0xc4>
 8013cf0:	9800      	ldr	r0, [sp, #0]
 8013cf2:	f009 fe99 	bl	801da28 <GUI_ALLOC_h2p>
 8013cf6:	6a00      	ldr	r0, [r0, #32]
 8013cf8:	9000      	str	r0, [sp, #0]
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d1b3      	bne.n	8013c66 <_GetDialogItem+0x1c6>
 8013cfe:	e7db      	b.n	8013cb8 <_GetDialogItem+0x218>

08013d00 <WM_SetEnableState>:
 8013d00:	b530      	push	{r4, r5, lr}
 8013d02:	4604      	mov	r4, r0
 8013d04:	b087      	sub	sp, #28
 8013d06:	460d      	mov	r5, r1
 8013d08:	b908      	cbnz	r0, 8013d0e <WM_SetEnableState+0xe>
 8013d0a:	b007      	add	sp, #28
 8013d0c:	bd30      	pop	{r4, r5, pc}
 8013d0e:	f007 fb15 	bl	801b33c <GUI_Lock>
 8013d12:	4620      	mov	r0, r4
 8013d14:	f009 fe92 	bl	801da3c <GUI_ALLOC_LockH>
 8013d18:	9001      	str	r0, [sp, #4]
 8013d1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d1c:	b995      	cbnz	r5, 8013d44 <WM_SetEnableState+0x44>
 8013d1e:	f043 0210 	orr.w	r2, r3, #16
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d012      	beq.n	8013d4c <WM_SetEnableState+0x4c>
 8013d26:	6282      	str	r2, [r0, #40]	; 0x28
 8013d28:	a801      	add	r0, sp, #4
 8013d2a:	f009 fe99 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013d2e:	2328      	movs	r3, #40	; 0x28
 8013d30:	4620      	mov	r0, r4
 8013d32:	a902      	add	r1, sp, #8
 8013d34:	9505      	str	r5, [sp, #20]
 8013d36:	9302      	str	r3, [sp, #8]
 8013d38:	f7ff f936 	bl	8012fa8 <WM__SendMessage>
 8013d3c:	f007 faf4 	bl	801b328 <GUI_Unlock>
 8013d40:	b007      	add	sp, #28
 8013d42:	bd30      	pop	{r4, r5, pc}
 8013d44:	f023 0210 	bic.w	r2, r3, #16
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d1ec      	bne.n	8013d26 <WM_SetEnableState+0x26>
 8013d4c:	a801      	add	r0, sp, #4
 8013d4e:	f009 fe87 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013d52:	e7f3      	b.n	8013d3c <WM_SetEnableState+0x3c>

08013d54 <WM_ForEachDesc>:
 8013d54:	b570      	push	{r4, r5, r6, lr}
 8013d56:	4606      	mov	r6, r0
 8013d58:	460d      	mov	r5, r1
 8013d5a:	4614      	mov	r4, r2
 8013d5c:	f007 faee 	bl	801b33c <GUI_Lock>
 8013d60:	4630      	mov	r0, r6
 8013d62:	4629      	mov	r1, r5
 8013d64:	4622      	mov	r2, r4
 8013d66:	f7fe fff1 	bl	8012d4c <WM__ForEachDesc>
 8013d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d6e:	f007 badb 	b.w	801b328 <GUI_Unlock>
 8013d72:	bf00      	nop

08013d74 <WM_GetClientRect>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	4605      	mov	r5, r0
 8013d78:	f007 fae0 	bl	801b33c <GUI_Lock>
 8013d7c:	4b08      	ldr	r3, [pc, #32]	; (8013da0 <WM_GetClientRect+0x2c>)
 8013d7e:	681c      	ldr	r4, [r3, #0]
 8013d80:	b914      	cbnz	r4, 8013d88 <WM_GetClientRect+0x14>
 8013d82:	4b08      	ldr	r3, [pc, #32]	; (8013da4 <WM_GetClientRect+0x30>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8013d88:	f007 fad8 	bl	801b33c <GUI_Lock>
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	4629      	mov	r1, r5
 8013d90:	f7ff f9de 	bl	8013150 <WM__GetClientRectEx>
 8013d94:	f007 fac8 	bl	801b328 <GUI_Unlock>
 8013d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d9c:	f007 bac4 	b.w	801b328 <GUI_Unlock>
 8013da0:	2002cafc 	.word	0x2002cafc
 8013da4:	2000027c 	.word	0x2000027c

08013da8 <WM_GetClientWindow>:
 8013da8:	b500      	push	{lr}
 8013daa:	b085      	sub	sp, #20
 8013dac:	a904      	add	r1, sp, #16
 8013dae:	2317      	movs	r3, #23
 8013db0:	f841 3d10 	str.w	r3, [r1, #-16]!
 8013db4:	2300      	movs	r3, #0
 8013db6:	4669      	mov	r1, sp
 8013db8:	9303      	str	r3, [sp, #12]
 8013dba:	f002 f9d7 	bl	801616c <WM_SendMessage>
 8013dbe:	9803      	ldr	r0, [sp, #12]
 8013dc0:	b005      	add	sp, #20
 8013dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dc6:	bf00      	nop

08013dc8 <WM_GetDesktopWindow>:
 8013dc8:	4a03      	ldr	r2, [pc, #12]	; (8013dd8 <WM_GetDesktopWindow+0x10>)
 8013dca:	4b04      	ldr	r3, [pc, #16]	; (8013ddc <WM_GetDesktopWindow+0x14>)
 8013dcc:	6812      	ldr	r2, [r2, #0]
 8013dce:	7c52      	ldrb	r2, [r2, #17]
 8013dd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	2000027c 	.word	0x2000027c
 8013ddc:	2002cb00 	.word	0x2002cb00

08013de0 <WM_BringToBottom>:
 8013de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013de4:	4604      	mov	r4, r0
 8013de6:	b087      	sub	sp, #28
 8013de8:	f007 faa8 	bl	801b33c <GUI_Lock>
 8013dec:	b924      	cbnz	r4, 8013df8 <WM_BringToBottom+0x18>
 8013dee:	f007 fa9b 	bl	801b328 <GUI_Unlock>
 8013df2:	b007      	add	sp, #28
 8013df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f009 fe1f 	bl	801da3c <GUI_ALLOC_LockH>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	c803      	ldmia	r0, {r0, r1}
 8013e02:	ad04      	add	r5, sp, #16
 8013e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8013e08:	a801      	add	r0, sp, #4
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	6a1f      	ldr	r7, [r3, #32]
 8013e0e:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 8013e12:	f009 fe25 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013e16:	4620      	mov	r0, r4
 8013e18:	f7ff f874 	bl	8012f04 <WM__GetPrevSibling>
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d0e5      	beq.n	8013dee <WM_BringToBottom+0xe>
 8013e22:	f007 fa8b 	bl	801b33c <GUI_Lock>
 8013e26:	4620      	mov	r0, r4
 8013e28:	f009 fdfe 	bl	801da28 <GUI_ALLOC_h2p>
 8013e2c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8013e30:	f007 fa7a 	bl	801b328 <GUI_Unlock>
 8013e34:	f018 0f02 	tst.w	r8, #2
 8013e38:	d120      	bne.n	8013e7c <WM_BringToBottom+0x9c>
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f009 fdfe 	bl	801da3c <GUI_ALLOC_LockH>
 8013e40:	9001      	str	r0, [sp, #4]
 8013e42:	4648      	mov	r0, r9
 8013e44:	f009 fdfa 	bl	801da3c <GUI_ALLOC_LockH>
 8013e48:	9003      	str	r0, [sp, #12]
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f009 fdf6 	bl	801da3c <GUI_ALLOC_LockH>
 8013e50:	9903      	ldr	r1, [sp, #12]
 8013e52:	9a01      	ldr	r2, [sp, #4]
 8013e54:	69cd      	ldr	r5, [r1, #28]
 8013e56:	6207      	str	r7, [r0, #32]
 8013e58:	4603      	mov	r3, r0
 8013e5a:	6215      	str	r5, [r2, #32]
 8013e5c:	a801      	add	r0, sp, #4
 8013e5e:	61cc      	str	r4, [r1, #28]
 8013e60:	9302      	str	r3, [sp, #8]
 8013e62:	f009 fdfd 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013e66:	a803      	add	r0, sp, #12
 8013e68:	f009 fdfa 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013e6c:	a802      	add	r0, sp, #8
 8013e6e:	f009 fdf7 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013e72:	f007 fa59 	bl	801b328 <GUI_Unlock>
 8013e76:	b007      	add	sp, #28
 8013e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	4649      	mov	r1, r9
 8013e80:	463a      	mov	r2, r7
 8013e82:	f002 f90b 	bl	801609c <WM__InvalidateRectEx>
 8013e86:	e7d8      	b.n	8013e3a <WM_BringToBottom+0x5a>

08013e88 <WM_GetDialogItem>:
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	b087      	sub	sp, #28
 8013e90:	4688      	mov	r8, r1
 8013e92:	b918      	cbnz	r0, 8013e9c <WM_GetDialogItem+0x14>
 8013e94:	4620      	mov	r0, r4
 8013e96:	b007      	add	sp, #28
 8013e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9c:	f007 fa4e 	bl	801b33c <GUI_Lock>
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f009 fdcb 	bl	801da3c <GUI_ALLOC_LockH>
 8013ea6:	ab06      	add	r3, sp, #24
 8013ea8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8013eac:	f843 0d14 	str.w	r0, [r3, #-20]!
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f009 fdd5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8013eb6:	f1bb 0f00 	cmp.w	fp, #0
 8013eba:	d04d      	beq.n	8013f58 <WM_GetDialogItem+0xd0>
 8013ebc:	f10d 0908 	add.w	r9, sp, #8
 8013ec0:	464e      	mov	r6, r9
 8013ec2:	2500      	movs	r5, #0
 8013ec4:	f04f 0a15 	mov.w	sl, #21
 8013ec8:	4658      	mov	r0, fp
 8013eca:	4631      	mov	r1, r6
 8013ecc:	f8c9 5000 	str.w	r5, [r9]
 8013ed0:	9503      	str	r5, [sp, #12]
 8013ed2:	9504      	str	r5, [sp, #16]
 8013ed4:	9505      	str	r5, [sp, #20]
 8013ed6:	f8cd a008 	str.w	sl, [sp, #8]
 8013eda:	f002 f947 	bl	801616c <WM_SendMessage>
 8013ede:	9b05      	ldr	r3, [sp, #20]
 8013ee0:	4598      	cmp	r8, r3
 8013ee2:	46b1      	mov	r9, r6
 8013ee4:	d03a      	beq.n	8013f5c <WM_GetDialogItem+0xd4>
 8013ee6:	4658      	mov	r0, fp
 8013ee8:	f009 fd9e 	bl	801da28 <GUI_ALLOC_h2p>
 8013eec:	69c4      	ldr	r4, [r0, #28]
 8013eee:	b924      	cbnz	r4, 8013efa <WM_GetDialogItem+0x72>
 8013ef0:	e017      	b.n	8013f22 <WM_GetDialogItem+0x9a>
 8013ef2:	f009 fd99 	bl	801da28 <GUI_ALLOC_h2p>
 8013ef6:	6a04      	ldr	r4, [r0, #32]
 8013ef8:	b19c      	cbz	r4, 8013f22 <WM_GetDialogItem+0x9a>
 8013efa:	4620      	mov	r0, r4
 8013efc:	4631      	mov	r1, r6
 8013efe:	9503      	str	r5, [sp, #12]
 8013f00:	9504      	str	r5, [sp, #16]
 8013f02:	9505      	str	r5, [sp, #20]
 8013f04:	f8cd a008 	str.w	sl, [sp, #8]
 8013f08:	f002 f930 	bl	801616c <WM_SendMessage>
 8013f0c:	9b05      	ldr	r3, [sp, #20]
 8013f0e:	4598      	cmp	r8, r3
 8013f10:	4620      	mov	r0, r4
 8013f12:	46b1      	mov	r9, r6
 8013f14:	d1ed      	bne.n	8013ef2 <WM_GetDialogItem+0x6a>
 8013f16:	f007 fa07 	bl	801b328 <GUI_Unlock>
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	b007      	add	sp, #28
 8013f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f22:	4658      	mov	r0, fp
 8013f24:	f009 fd80 	bl	801da28 <GUI_ALLOC_h2p>
 8013f28:	69c7      	ldr	r7, [r0, #28]
 8013f2a:	b927      	cbnz	r7, 8013f36 <WM_GetDialogItem+0xae>
 8013f2c:	e00c      	b.n	8013f48 <WM_GetDialogItem+0xc0>
 8013f2e:	f009 fd7b 	bl	801da28 <GUI_ALLOC_h2p>
 8013f32:	6a07      	ldr	r7, [r0, #32]
 8013f34:	b147      	cbz	r7, 8013f48 <WM_GetDialogItem+0xc0>
 8013f36:	4638      	mov	r0, r7
 8013f38:	4641      	mov	r1, r8
 8013f3a:	f7ff fdb1 	bl	8013aa0 <_GetDialogItem>
 8013f3e:	4604      	mov	r4, r0
 8013f40:	4638      	mov	r0, r7
 8013f42:	2c00      	cmp	r4, #0
 8013f44:	d0f3      	beq.n	8013f2e <WM_GetDialogItem+0xa6>
 8013f46:	e7e6      	b.n	8013f16 <WM_GetDialogItem+0x8e>
 8013f48:	4658      	mov	r0, fp
 8013f4a:	f009 fd6d 	bl	801da28 <GUI_ALLOC_h2p>
 8013f4e:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8013f52:	f1bb 0f00 	cmp.w	fp, #0
 8013f56:	d1b7      	bne.n	8013ec8 <WM_GetDialogItem+0x40>
 8013f58:	2400      	movs	r4, #0
 8013f5a:	e7dc      	b.n	8013f16 <WM_GetDialogItem+0x8e>
 8013f5c:	465c      	mov	r4, fp
 8013f5e:	f007 f9e3 	bl	801b328 <GUI_Unlock>
 8013f62:	e7da      	b.n	8013f1a <WM_GetDialogItem+0x92>

08013f64 <WM_GetFirstChild>:
 8013f64:	b510      	push	{r4, lr}
 8013f66:	4604      	mov	r4, r0
 8013f68:	b138      	cbz	r0, 8013f7a <WM_GetFirstChild+0x16>
 8013f6a:	f007 f9e7 	bl	801b33c <GUI_Lock>
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f009 fd5a 	bl	801da28 <GUI_ALLOC_h2p>
 8013f74:	69c4      	ldr	r4, [r0, #28]
 8013f76:	f007 f9d7 	bl	801b328 <GUI_Unlock>
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	bd10      	pop	{r4, pc}
 8013f7e:	bf00      	nop

08013f80 <WM_GetFocusedWindow>:
 8013f80:	b510      	push	{r4, lr}
 8013f82:	f007 f9db 	bl	801b33c <GUI_Lock>
 8013f86:	4a04      	ldr	r2, [pc, #16]	; (8013f98 <WM_GetFocusedWindow+0x18>)
 8013f88:	4b04      	ldr	r3, [pc, #16]	; (8013f9c <WM_GetFocusedWindow+0x1c>)
 8013f8a:	6812      	ldr	r2, [r2, #0]
 8013f8c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8013f90:	f007 f9ca 	bl	801b328 <GUI_Unlock>
 8013f94:	4620      	mov	r0, r4
 8013f96:	bd10      	pop	{r4, pc}
 8013f98:	2002cb20 	.word	0x2002cb20
 8013f9c:	2002cb10 	.word	0x2002cb10

08013fa0 <WM_GetId>:
 8013fa0:	b500      	push	{lr}
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	a904      	add	r1, sp, #16
 8013fa6:	2315      	movs	r3, #21
 8013fa8:	f841 3d10 	str.w	r3, [r1, #-16]!
 8013fac:	2300      	movs	r3, #0
 8013fae:	4669      	mov	r1, sp
 8013fb0:	9301      	str	r3, [sp, #4]
 8013fb2:	9302      	str	r3, [sp, #8]
 8013fb4:	9303      	str	r3, [sp, #12]
 8013fb6:	f002 f8d9 	bl	801616c <WM_SendMessage>
 8013fba:	9803      	ldr	r0, [sp, #12]
 8013fbc:	b005      	add	sp, #20
 8013fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fc2:	bf00      	nop

08013fc4 <WM_GetInsideRectEx>:
 8013fc4:	b500      	push	{lr}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	ab04      	add	r3, sp, #16
 8013fca:	2214      	movs	r2, #20
 8013fcc:	9103      	str	r1, [sp, #12]
 8013fce:	4669      	mov	r1, sp
 8013fd0:	f843 2d10 	str.w	r2, [r3, #-16]!
 8013fd4:	f002 f8ca 	bl	801616c <WM_SendMessage>
 8013fd8:	b005      	add	sp, #20
 8013fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fde:	bf00      	nop

08013fe0 <WM_GetInsideRectExScrollbar>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	b08b      	sub	sp, #44	; 0x2c
 8013fe6:	468a      	mov	sl, r1
 8013fe8:	9001      	str	r0, [sp, #4]
 8013fea:	2800      	cmp	r0, #0
 8013fec:	f000 80f7 	beq.w	80141de <WM_GetInsideRectExScrollbar+0x1fe>
 8013ff0:	2900      	cmp	r1, #0
 8013ff2:	f000 80f4 	beq.w	80141de <WM_GetInsideRectExScrollbar+0x1fe>
 8013ff6:	f007 f9a1 	bl	801b33c <GUI_Lock>
 8013ffa:	9801      	ldr	r0, [sp, #4]
 8013ffc:	f009 fd1e 	bl	801da3c <GUI_ALLOC_LockH>
 8014000:	ab0a      	add	r3, sp, #40	; 0x28
 8014002:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8014006:	f843 0d18 	str.w	r0, [r3, #-24]!
 801400a:	4618      	mov	r0, r3
 801400c:	9302      	str	r3, [sp, #8]
 801400e:	ac06      	add	r4, sp, #24
 8014010:	f009 fd26 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014014:	f1bb 0f00 	cmp.w	fp, #0
 8014018:	f000 80e4 	beq.w	80141e4 <WM_GetInsideRectExScrollbar+0x204>
 801401c:	ae09      	add	r6, sp, #36	; 0x24
 801401e:	4633      	mov	r3, r6
 8014020:	46a1      	mov	r9, r4
 8014022:	465e      	mov	r6, fp
 8014024:	f10d 081c 	add.w	r8, sp, #28
 8014028:	af08      	add	r7, sp, #32
 801402a:	2500      	movs	r5, #0
 801402c:	469b      	mov	fp, r3
 801402e:	e00e      	b.n	801404e <WM_GetInsideRectExScrollbar+0x6e>
 8014030:	4630      	mov	r0, r6
 8014032:	21ff      	movs	r1, #255	; 0xff
 8014034:	f7ff fd34 	bl	8013aa0 <_GetDialogItem>
 8014038:	4602      	mov	r2, r0
 801403a:	4630      	mov	r0, r6
 801403c:	2a00      	cmp	r2, #0
 801403e:	f040 80e8 	bne.w	8014212 <WM_GetInsideRectExScrollbar+0x232>
 8014042:	f009 fcf1 	bl	801da28 <GUI_ALLOC_h2p>
 8014046:	6a06      	ldr	r6, [r0, #32]
 8014048:	2e00      	cmp	r6, #0
 801404a:	f000 80cb 	beq.w	80141e4 <WM_GetInsideRectExScrollbar+0x204>
 801404e:	2215      	movs	r2, #21
 8014050:	4630      	mov	r0, r6
 8014052:	4649      	mov	r1, r9
 8014054:	6025      	str	r5, [r4, #0]
 8014056:	f8c8 5000 	str.w	r5, [r8]
 801405a:	603d      	str	r5, [r7, #0]
 801405c:	f8cb 5000 	str.w	r5, [fp]
 8014060:	9206      	str	r2, [sp, #24]
 8014062:	f002 f883 	bl	801616c <WM_SendMessage>
 8014066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014068:	2bff      	cmp	r3, #255	; 0xff
 801406a:	464c      	mov	r4, r9
 801406c:	d1e0      	bne.n	8014030 <WM_GetInsideRectExScrollbar+0x50>
 801406e:	9603      	str	r6, [sp, #12]
 8014070:	f007 f95a 	bl	801b328 <GUI_Unlock>
 8014074:	f007 f962 	bl	801b33c <GUI_Lock>
 8014078:	9801      	ldr	r0, [sp, #4]
 801407a:	f009 fcdf 	bl	801da3c <GUI_ALLOC_LockH>
 801407e:	4602      	mov	r2, r0
 8014080:	9802      	ldr	r0, [sp, #8]
 8014082:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8014086:	9204      	str	r2, [sp, #16]
 8014088:	f009 fcea 	bl	801da60 <GUI_ALLOC_UnlockH>
 801408c:	f1bb 0f00 	cmp.w	fp, #0
 8014090:	f000 80ab 	beq.w	80141ea <WM_GetInsideRectExScrollbar+0x20a>
 8014094:	ae09      	add	r6, sp, #36	; 0x24
 8014096:	4633      	mov	r3, r6
 8014098:	f10d 081c 	add.w	r8, sp, #28
 801409c:	465e      	mov	r6, fp
 801409e:	af08      	add	r7, sp, #32
 80140a0:	2500      	movs	r5, #0
 80140a2:	f10d 0918 	add.w	r9, sp, #24
 80140a6:	469b      	mov	fp, r3
 80140a8:	e00d      	b.n	80140c6 <WM_GetInsideRectExScrollbar+0xe6>
 80140aa:	4630      	mov	r0, r6
 80140ac:	21fe      	movs	r1, #254	; 0xfe
 80140ae:	f7ff fcf7 	bl	8013aa0 <_GetDialogItem>
 80140b2:	4602      	mov	r2, r0
 80140b4:	4630      	mov	r0, r6
 80140b6:	2a00      	cmp	r2, #0
 80140b8:	d12e      	bne.n	8014118 <WM_GetInsideRectExScrollbar+0x138>
 80140ba:	f009 fcb5 	bl	801da28 <GUI_ALLOC_h2p>
 80140be:	6a06      	ldr	r6, [r0, #32]
 80140c0:	2e00      	cmp	r6, #0
 80140c2:	f000 8092 	beq.w	80141ea <WM_GetInsideRectExScrollbar+0x20a>
 80140c6:	2315      	movs	r3, #21
 80140c8:	4630      	mov	r0, r6
 80140ca:	4649      	mov	r1, r9
 80140cc:	6025      	str	r5, [r4, #0]
 80140ce:	f8c8 5000 	str.w	r5, [r8]
 80140d2:	9306      	str	r3, [sp, #24]
 80140d4:	603d      	str	r5, [r7, #0]
 80140d6:	f8cb 5000 	str.w	r5, [fp]
 80140da:	f002 f847 	bl	801616c <WM_SendMessage>
 80140de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e0:	2bfe      	cmp	r3, #254	; 0xfe
 80140e2:	464c      	mov	r4, r9
 80140e4:	d1e1      	bne.n	80140aa <WM_GetInsideRectExScrollbar+0xca>
 80140e6:	f007 f91f 	bl	801b328 <GUI_Unlock>
 80140ea:	f007 f927 	bl	801b33c <GUI_Lock>
 80140ee:	9801      	ldr	r0, [sp, #4]
 80140f0:	f009 fc9a 	bl	801da28 <GUI_ALLOC_h2p>
 80140f4:	46b3      	mov	fp, r6
 80140f6:	8845      	ldrh	r5, [r0, #2]
 80140f8:	8806      	ldrh	r6, [r0, #0]
 80140fa:	f007 f915 	bl	801b328 <GUI_Unlock>
 80140fe:	2214      	movs	r2, #20
 8014100:	9b02      	ldr	r3, [sp, #8]
 8014102:	9801      	ldr	r0, [sp, #4]
 8014104:	9309      	str	r3, [sp, #36]	; 0x24
 8014106:	4649      	mov	r1, r9
 8014108:	9206      	str	r2, [sp, #24]
 801410a:	f002 f82f 	bl	801616c <WM_SendMessage>
 801410e:	f1bb 0f00 	cmp.w	fp, #0
 8014112:	d039      	beq.n	8014188 <WM_GetInsideRectExScrollbar+0x1a8>
 8014114:	465f      	mov	r7, fp
 8014116:	e015      	b.n	8014144 <WM_GetInsideRectExScrollbar+0x164>
 8014118:	9200      	str	r2, [sp, #0]
 801411a:	f007 f905 	bl	801b328 <GUI_Unlock>
 801411e:	f007 f90d 	bl	801b33c <GUI_Lock>
 8014122:	9801      	ldr	r0, [sp, #4]
 8014124:	f009 fc80 	bl	801da28 <GUI_ALLOC_h2p>
 8014128:	9a00      	ldr	r2, [sp, #0]
 801412a:	8806      	ldrh	r6, [r0, #0]
 801412c:	8845      	ldrh	r5, [r0, #2]
 801412e:	4617      	mov	r7, r2
 8014130:	f007 f8fa 	bl	801b328 <GUI_Unlock>
 8014134:	2314      	movs	r3, #20
 8014136:	9a02      	ldr	r2, [sp, #8]
 8014138:	9801      	ldr	r0, [sp, #4]
 801413a:	9209      	str	r2, [sp, #36]	; 0x24
 801413c:	4649      	mov	r1, r9
 801413e:	9306      	str	r3, [sp, #24]
 8014140:	f002 f814 	bl	801616c <WM_SendMessage>
 8014144:	f007 f8fa 	bl	801b33c <GUI_Lock>
 8014148:	4638      	mov	r0, r7
 801414a:	f009 fc6d 	bl	801da28 <GUI_ALLOC_h2p>
 801414e:	c803      	ldmia	r0, {r0, r1}
 8014150:	e889 0003 	stmia.w	r9, {r0, r1}
 8014154:	f007 f8e8 	bl	801b328 <GUI_Unlock>
 8014158:	b231      	sxth	r1, r6
 801415a:	b22a      	sxth	r2, r5
 801415c:	4249      	negs	r1, r1
 801415e:	4252      	negs	r2, r2
 8014160:	4648      	mov	r0, r9
 8014162:	f008 faf1 	bl	801c748 <GUI_MoveRect>
 8014166:	f007 f8e9 	bl	801b33c <GUI_Lock>
 801416a:	4638      	mov	r0, r7
 801416c:	f009 fc5c 	bl	801da28 <GUI_ALLOC_h2p>
 8014170:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8014172:	f007 f8d9 	bl	801b328 <GUI_Unlock>
 8014176:	f007 0382 	and.w	r3, r7, #130	; 0x82
 801417a:	2b82      	cmp	r3, #130	; 0x82
 801417c:	d104      	bne.n	8014188 <WM_GetInsideRectExScrollbar+0x1a8>
 801417e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014182:	3b01      	subs	r3, #1
 8014184:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014188:	9b03      	ldr	r3, [sp, #12]
 801418a:	b313      	cbz	r3, 80141d2 <WM_GetInsideRectExScrollbar+0x1f2>
 801418c:	f007 f8d6 	bl	801b33c <GUI_Lock>
 8014190:	9803      	ldr	r0, [sp, #12]
 8014192:	f009 fc49 	bl	801da28 <GUI_ALLOC_h2p>
 8014196:	c803      	ldmia	r0, {r0, r1}
 8014198:	e884 0003 	stmia.w	r4, {r0, r1}
 801419c:	f007 f8c4 	bl	801b328 <GUI_Unlock>
 80141a0:	b231      	sxth	r1, r6
 80141a2:	b22a      	sxth	r2, r5
 80141a4:	4249      	negs	r1, r1
 80141a6:	4252      	negs	r2, r2
 80141a8:	4620      	mov	r0, r4
 80141aa:	f008 facd 	bl	801c748 <GUI_MoveRect>
 80141ae:	f007 f8c5 	bl	801b33c <GUI_Lock>
 80141b2:	9803      	ldr	r0, [sp, #12]
 80141b4:	f009 fc38 	bl	801da28 <GUI_ALLOC_h2p>
 80141b8:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 80141ba:	f007 f8b5 	bl	801b328 <GUI_Unlock>
 80141be:	f404 7381 	and.w	r3, r4, #258	; 0x102
 80141c2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80141c6:	d104      	bne.n	80141d2 <WM_GetInsideRectExScrollbar+0x1f2>
 80141c8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141d2:	9b02      	ldr	r3, [sp, #8]
 80141d4:	cb03      	ldmia	r3!, {r0, r1}
 80141d6:	f8ca 0000 	str.w	r0, [sl]
 80141da:	f8ca 1004 	str.w	r1, [sl, #4]
 80141de:	b00b      	add	sp, #44	; 0x2c
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	2300      	movs	r3, #0
 80141e6:	9303      	str	r3, [sp, #12]
 80141e8:	e742      	b.n	8014070 <WM_GetInsideRectExScrollbar+0x90>
 80141ea:	f007 f89d 	bl	801b328 <GUI_Unlock>
 80141ee:	f007 f8a5 	bl	801b33c <GUI_Lock>
 80141f2:	9801      	ldr	r0, [sp, #4]
 80141f4:	f009 fc18 	bl	801da28 <GUI_ALLOC_h2p>
 80141f8:	8806      	ldrh	r6, [r0, #0]
 80141fa:	8845      	ldrh	r5, [r0, #2]
 80141fc:	f007 f894 	bl	801b328 <GUI_Unlock>
 8014200:	2314      	movs	r3, #20
 8014202:	9a02      	ldr	r2, [sp, #8]
 8014204:	9801      	ldr	r0, [sp, #4]
 8014206:	9209      	str	r2, [sp, #36]	; 0x24
 8014208:	4621      	mov	r1, r4
 801420a:	9306      	str	r3, [sp, #24]
 801420c:	f001 ffae 	bl	801616c <WM_SendMessage>
 8014210:	e7ba      	b.n	8014188 <WM_GetInsideRectExScrollbar+0x1a8>
 8014212:	9203      	str	r2, [sp, #12]
 8014214:	e72c      	b.n	8014070 <WM_GetInsideRectExScrollbar+0x90>
 8014216:	bf00      	nop

08014218 <WM_GetWindowOrgX>:
 8014218:	b510      	push	{r4, lr}
 801421a:	4604      	mov	r4, r0
 801421c:	b140      	cbz	r0, 8014230 <WM_GetWindowOrgX+0x18>
 801421e:	f007 f88d 	bl	801b33c <GUI_Lock>
 8014222:	4620      	mov	r0, r4
 8014224:	f009 fc00 	bl	801da28 <GUI_ALLOC_h2p>
 8014228:	f9b0 4000 	ldrsh.w	r4, [r0]
 801422c:	f007 f87c 	bl	801b328 <GUI_Unlock>
 8014230:	4620      	mov	r0, r4
 8014232:	bd10      	pop	{r4, pc}

08014234 <WM_GetParent>:
 8014234:	b510      	push	{r4, lr}
 8014236:	4604      	mov	r4, r0
 8014238:	b138      	cbz	r0, 801424a <WM_GetParent+0x16>
 801423a:	f007 f87f 	bl	801b33c <GUI_Lock>
 801423e:	4620      	mov	r0, r4
 8014240:	f009 fbf2 	bl	801da28 <GUI_ALLOC_h2p>
 8014244:	6984      	ldr	r4, [r0, #24]
 8014246:	f007 f86f 	bl	801b328 <GUI_Unlock>
 801424a:	4620      	mov	r0, r4
 801424c:	bd10      	pop	{r4, pc}
 801424e:	bf00      	nop

08014250 <WM_GetScrollbarH>:
 8014250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014254:	4681      	mov	r9, r0
 8014256:	b085      	sub	sp, #20
 8014258:	b920      	cbnz	r0, 8014264 <WM_GetScrollbarH+0x14>
 801425a:	4604      	mov	r4, r0
 801425c:	4620      	mov	r0, r4
 801425e:	b005      	add	sp, #20
 8014260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014264:	f007 f86a 	bl	801b33c <GUI_Lock>
 8014268:	4648      	mov	r0, r9
 801426a:	f009 fbdd 	bl	801da28 <GUI_ALLOC_h2p>
 801426e:	69c4      	ldr	r4, [r0, #28]
 8014270:	b1f4      	cbz	r4, 80142b0 <WM_GetScrollbarH+0x60>
 8014272:	466e      	mov	r6, sp
 8014274:	466f      	mov	r7, sp
 8014276:	2500      	movs	r5, #0
 8014278:	f04f 0815 	mov.w	r8, #21
 801427c:	e003      	b.n	8014286 <WM_GetScrollbarH+0x36>
 801427e:	f009 fbd3 	bl	801da28 <GUI_ALLOC_h2p>
 8014282:	6a04      	ldr	r4, [r0, #32]
 8014284:	b1a4      	cbz	r4, 80142b0 <WM_GetScrollbarH+0x60>
 8014286:	4620      	mov	r0, r4
 8014288:	4669      	mov	r1, sp
 801428a:	6035      	str	r5, [r6, #0]
 801428c:	9501      	str	r5, [sp, #4]
 801428e:	9502      	str	r5, [sp, #8]
 8014290:	9503      	str	r5, [sp, #12]
 8014292:	f8cd 8000 	str.w	r8, [sp]
 8014296:	f001 ff69 	bl	801616c <WM_SendMessage>
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	2bff      	cmp	r3, #255	; 0xff
 801429e:	4620      	mov	r0, r4
 80142a0:	463e      	mov	r6, r7
 80142a2:	d1ec      	bne.n	801427e <WM_GetScrollbarH+0x2e>
 80142a4:	f007 f840 	bl	801b328 <GUI_Unlock>
 80142a8:	4620      	mov	r0, r4
 80142aa:	b005      	add	sp, #20
 80142ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142b0:	4648      	mov	r0, r9
 80142b2:	f009 fbb9 	bl	801da28 <GUI_ALLOC_h2p>
 80142b6:	69c5      	ldr	r5, [r0, #28]
 80142b8:	b925      	cbnz	r5, 80142c4 <WM_GetScrollbarH+0x74>
 80142ba:	e00c      	b.n	80142d6 <WM_GetScrollbarH+0x86>
 80142bc:	f009 fbb4 	bl	801da28 <GUI_ALLOC_h2p>
 80142c0:	6a05      	ldr	r5, [r0, #32]
 80142c2:	b145      	cbz	r5, 80142d6 <WM_GetScrollbarH+0x86>
 80142c4:	4628      	mov	r0, r5
 80142c6:	21ff      	movs	r1, #255	; 0xff
 80142c8:	f7ff fbea 	bl	8013aa0 <_GetDialogItem>
 80142cc:	4604      	mov	r4, r0
 80142ce:	4628      	mov	r0, r5
 80142d0:	2c00      	cmp	r4, #0
 80142d2:	d0f3      	beq.n	80142bc <WM_GetScrollbarH+0x6c>
 80142d4:	e7e6      	b.n	80142a4 <WM_GetScrollbarH+0x54>
 80142d6:	2400      	movs	r4, #0
 80142d8:	f007 f826 	bl	801b328 <GUI_Unlock>
 80142dc:	e7e4      	b.n	80142a8 <WM_GetScrollbarH+0x58>
 80142de:	bf00      	nop

080142e0 <WM_GetScrollbarV>:
 80142e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142e4:	4681      	mov	r9, r0
 80142e6:	b085      	sub	sp, #20
 80142e8:	b920      	cbnz	r0, 80142f4 <WM_GetScrollbarV+0x14>
 80142ea:	4604      	mov	r4, r0
 80142ec:	4620      	mov	r0, r4
 80142ee:	b005      	add	sp, #20
 80142f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142f4:	f007 f822 	bl	801b33c <GUI_Lock>
 80142f8:	4648      	mov	r0, r9
 80142fa:	f009 fb95 	bl	801da28 <GUI_ALLOC_h2p>
 80142fe:	69c4      	ldr	r4, [r0, #28]
 8014300:	b1f4      	cbz	r4, 8014340 <WM_GetScrollbarV+0x60>
 8014302:	466e      	mov	r6, sp
 8014304:	466f      	mov	r7, sp
 8014306:	2500      	movs	r5, #0
 8014308:	f04f 0815 	mov.w	r8, #21
 801430c:	e003      	b.n	8014316 <WM_GetScrollbarV+0x36>
 801430e:	f009 fb8b 	bl	801da28 <GUI_ALLOC_h2p>
 8014312:	6a04      	ldr	r4, [r0, #32]
 8014314:	b1a4      	cbz	r4, 8014340 <WM_GetScrollbarV+0x60>
 8014316:	4620      	mov	r0, r4
 8014318:	4669      	mov	r1, sp
 801431a:	6035      	str	r5, [r6, #0]
 801431c:	9501      	str	r5, [sp, #4]
 801431e:	9502      	str	r5, [sp, #8]
 8014320:	9503      	str	r5, [sp, #12]
 8014322:	f8cd 8000 	str.w	r8, [sp]
 8014326:	f001 ff21 	bl	801616c <WM_SendMessage>
 801432a:	9b03      	ldr	r3, [sp, #12]
 801432c:	2bfe      	cmp	r3, #254	; 0xfe
 801432e:	4620      	mov	r0, r4
 8014330:	463e      	mov	r6, r7
 8014332:	d1ec      	bne.n	801430e <WM_GetScrollbarV+0x2e>
 8014334:	f006 fff8 	bl	801b328 <GUI_Unlock>
 8014338:	4620      	mov	r0, r4
 801433a:	b005      	add	sp, #20
 801433c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014340:	4648      	mov	r0, r9
 8014342:	f009 fb71 	bl	801da28 <GUI_ALLOC_h2p>
 8014346:	69c5      	ldr	r5, [r0, #28]
 8014348:	b925      	cbnz	r5, 8014354 <WM_GetScrollbarV+0x74>
 801434a:	e00c      	b.n	8014366 <WM_GetScrollbarV+0x86>
 801434c:	f009 fb6c 	bl	801da28 <GUI_ALLOC_h2p>
 8014350:	6a05      	ldr	r5, [r0, #32]
 8014352:	b145      	cbz	r5, 8014366 <WM_GetScrollbarV+0x86>
 8014354:	4628      	mov	r0, r5
 8014356:	21fe      	movs	r1, #254	; 0xfe
 8014358:	f7ff fba2 	bl	8013aa0 <_GetDialogItem>
 801435c:	4604      	mov	r4, r0
 801435e:	4628      	mov	r0, r5
 8014360:	2c00      	cmp	r4, #0
 8014362:	d0f3      	beq.n	801434c <WM_GetScrollbarV+0x6c>
 8014364:	e7e6      	b.n	8014334 <WM_GetScrollbarV+0x54>
 8014366:	2400      	movs	r4, #0
 8014368:	f006 ffde 	bl	801b328 <GUI_Unlock>
 801436c:	e7e4      	b.n	8014338 <WM_GetScrollbarV+0x58>
 801436e:	bf00      	nop

08014370 <WM_GetScrollPartner>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	b086      	sub	sp, #24
 8014376:	f10d 0818 	add.w	r8, sp, #24
 801437a:	2315      	movs	r3, #21
 801437c:	f848 3d10 	str.w	r3, [r8, #-16]!
 8014380:	2300      	movs	r3, #0
 8014382:	4641      	mov	r1, r8
 8014384:	9303      	str	r3, [sp, #12]
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	9305      	str	r3, [sp, #20]
 801438a:	4604      	mov	r4, r0
 801438c:	f001 feee 	bl	801616c <WM_SendMessage>
 8014390:	9f05      	ldr	r7, [sp, #20]
 8014392:	2fff      	cmp	r7, #255	; 0xff
 8014394:	d071      	beq.n	801447a <WM_GetScrollPartner+0x10a>
 8014396:	2ffe      	cmp	r7, #254	; 0xfe
 8014398:	bf08      	it	eq
 801439a:	27ff      	moveq	r7, #255	; 0xff
 801439c:	b924      	cbnz	r4, 80143a8 <WM_GetScrollPartner+0x38>
 801439e:	2400      	movs	r4, #0
 80143a0:	4620      	mov	r0, r4
 80143a2:	b006      	add	sp, #24
 80143a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143a8:	f006 ffc8 	bl	801b33c <GUI_Lock>
 80143ac:	4620      	mov	r0, r4
 80143ae:	f009 fb3b 	bl	801da28 <GUI_ALLOC_h2p>
 80143b2:	6984      	ldr	r4, [r0, #24]
 80143b4:	f006 ffb8 	bl	801b328 <GUI_Unlock>
 80143b8:	2c00      	cmp	r4, #0
 80143ba:	d0f0      	beq.n	801439e <WM_GetScrollPartner+0x2e>
 80143bc:	f006 ffbe 	bl	801b33c <GUI_Lock>
 80143c0:	4620      	mov	r0, r4
 80143c2:	f009 fb3b 	bl	801da3c <GUI_ALLOC_LockH>
 80143c6:	ab06      	add	r3, sp, #24
 80143c8:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80143cc:	f843 0d14 	str.w	r0, [r3, #-20]!
 80143d0:	4618      	mov	r0, r3
 80143d2:	f009 fb45 	bl	801da60 <GUI_ALLOC_UnlockH>
 80143d6:	f1ba 0f00 	cmp.w	sl, #0
 80143da:	d04c      	beq.n	8014476 <WM_GetScrollPartner+0x106>
 80143dc:	2500      	movs	r5, #0
 80143de:	f04f 0915 	mov.w	r9, #21
 80143e2:	4650      	mov	r0, sl
 80143e4:	a902      	add	r1, sp, #8
 80143e6:	f8c8 5000 	str.w	r5, [r8]
 80143ea:	9503      	str	r5, [sp, #12]
 80143ec:	9504      	str	r5, [sp, #16]
 80143ee:	9505      	str	r5, [sp, #20]
 80143f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80143f4:	f001 feba 	bl	801616c <WM_SendMessage>
 80143f8:	9b05      	ldr	r3, [sp, #20]
 80143fa:	429f      	cmp	r7, r3
 80143fc:	f10d 0808 	add.w	r8, sp, #8
 8014400:	d03d      	beq.n	801447e <WM_GetScrollPartner+0x10e>
 8014402:	4650      	mov	r0, sl
 8014404:	f009 fb10 	bl	801da28 <GUI_ALLOC_h2p>
 8014408:	69c4      	ldr	r4, [r0, #28]
 801440a:	b924      	cbnz	r4, 8014416 <WM_GetScrollPartner+0xa6>
 801440c:	e018      	b.n	8014440 <WM_GetScrollPartner+0xd0>
 801440e:	f009 fb0b 	bl	801da28 <GUI_ALLOC_h2p>
 8014412:	6a04      	ldr	r4, [r0, #32]
 8014414:	b1a4      	cbz	r4, 8014440 <WM_GetScrollPartner+0xd0>
 8014416:	4620      	mov	r0, r4
 8014418:	a902      	add	r1, sp, #8
 801441a:	9503      	str	r5, [sp, #12]
 801441c:	9504      	str	r5, [sp, #16]
 801441e:	9505      	str	r5, [sp, #20]
 8014420:	f8cd 9008 	str.w	r9, [sp, #8]
 8014424:	f001 fea2 	bl	801616c <WM_SendMessage>
 8014428:	9b05      	ldr	r3, [sp, #20]
 801442a:	429f      	cmp	r7, r3
 801442c:	4620      	mov	r0, r4
 801442e:	f10d 0808 	add.w	r8, sp, #8
 8014432:	d1ec      	bne.n	801440e <WM_GetScrollPartner+0x9e>
 8014434:	f006 ff78 	bl	801b328 <GUI_Unlock>
 8014438:	4620      	mov	r0, r4
 801443a:	b006      	add	sp, #24
 801443c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014440:	4650      	mov	r0, sl
 8014442:	f009 faf1 	bl	801da28 <GUI_ALLOC_h2p>
 8014446:	69c6      	ldr	r6, [r0, #28]
 8014448:	b926      	cbnz	r6, 8014454 <WM_GetScrollPartner+0xe4>
 801444a:	e00c      	b.n	8014466 <WM_GetScrollPartner+0xf6>
 801444c:	f009 faec 	bl	801da28 <GUI_ALLOC_h2p>
 8014450:	6a06      	ldr	r6, [r0, #32]
 8014452:	b146      	cbz	r6, 8014466 <WM_GetScrollPartner+0xf6>
 8014454:	4630      	mov	r0, r6
 8014456:	4639      	mov	r1, r7
 8014458:	f7ff fb22 	bl	8013aa0 <_GetDialogItem>
 801445c:	4604      	mov	r4, r0
 801445e:	4630      	mov	r0, r6
 8014460:	2c00      	cmp	r4, #0
 8014462:	d0f3      	beq.n	801444c <WM_GetScrollPartner+0xdc>
 8014464:	e7e6      	b.n	8014434 <WM_GetScrollPartner+0xc4>
 8014466:	4650      	mov	r0, sl
 8014468:	f009 fade 	bl	801da28 <GUI_ALLOC_h2p>
 801446c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8014470:	f1ba 0f00 	cmp.w	sl, #0
 8014474:	d1b5      	bne.n	80143e2 <WM_GetScrollPartner+0x72>
 8014476:	2400      	movs	r4, #0
 8014478:	e7dc      	b.n	8014434 <WM_GetScrollPartner+0xc4>
 801447a:	27fe      	movs	r7, #254	; 0xfe
 801447c:	e78e      	b.n	801439c <WM_GetScrollPartner+0x2c>
 801447e:	4654      	mov	r4, sl
 8014480:	f006 ff52 	bl	801b328 <GUI_Unlock>
 8014484:	e7d8      	b.n	8014438 <WM_GetScrollPartner+0xc8>
 8014486:	bf00      	nop

08014488 <WM_GetScrollState>:
 8014488:	b500      	push	{lr}
 801448a:	b085      	sub	sp, #20
 801448c:	2323      	movs	r3, #35	; 0x23
 801448e:	9103      	str	r1, [sp, #12]
 8014490:	4669      	mov	r1, sp
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	f001 fe6a 	bl	801616c <WM_SendMessage>
 8014498:	b005      	add	sp, #20
 801449a:	f85d fb04 	ldr.w	pc, [sp], #4
 801449e:	bf00      	nop

080144a0 <WM_GetWindowRectEx>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	4605      	mov	r5, r0
 80144a4:	460c      	mov	r4, r1
 80144a6:	b168      	cbz	r0, 80144c4 <WM_GetWindowRectEx+0x24>
 80144a8:	b161      	cbz	r1, 80144c4 <WM_GetWindowRectEx+0x24>
 80144aa:	f006 ff47 	bl	801b33c <GUI_Lock>
 80144ae:	4628      	mov	r0, r5
 80144b0:	f009 faba 	bl	801da28 <GUI_ALLOC_h2p>
 80144b4:	4603      	mov	r3, r0
 80144b6:	cb03      	ldmia	r3!, {r0, r1}
 80144b8:	6020      	str	r0, [r4, #0]
 80144ba:	6061      	str	r1, [r4, #4]
 80144bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144c0:	f006 bf32 	b.w	801b328 <GUI_Unlock>
 80144c4:	bd38      	pop	{r3, r4, r5, pc}
 80144c6:	bf00      	nop

080144c8 <WM_HasCaptured>:
 80144c8:	4a04      	ldr	r2, [pc, #16]	; (80144dc <WM_HasCaptured+0x14>)
 80144ca:	4b05      	ldr	r3, [pc, #20]	; (80144e0 <WM_HasCaptured+0x18>)
 80144cc:	6812      	ldr	r2, [r2, #0]
 80144ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d2:	1a1b      	subs	r3, r3, r0
 80144d4:	4258      	negs	r0, r3
 80144d6:	4158      	adcs	r0, r3
 80144d8:	4770      	bx	lr
 80144da:	bf00      	nop
 80144dc:	2002cb20 	.word	0x2002cb20
 80144e0:	2002cb44 	.word	0x2002cb44

080144e4 <WM_HasFocus>:
 80144e4:	4a04      	ldr	r2, [pc, #16]	; (80144f8 <WM_HasFocus+0x14>)
 80144e6:	4b05      	ldr	r3, [pc, #20]	; (80144fc <WM_HasFocus+0x18>)
 80144e8:	6812      	ldr	r2, [r2, #0]
 80144ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ee:	1a1b      	subs	r3, r3, r0
 80144f0:	4258      	negs	r0, r3
 80144f2:	4158      	adcs	r0, r3
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop
 80144f8:	2002cb20 	.word	0x2002cb20
 80144fc:	2002cb10 	.word	0x2002cb10

08014500 <WM_IsFocusable>:
 8014500:	b530      	push	{r4, r5, lr}
 8014502:	4604      	mov	r4, r0
 8014504:	b085      	sub	sp, #20
 8014506:	b910      	cbnz	r0, 801450e <WM_IsFocusable+0xe>
 8014508:	2000      	movs	r0, #0
 801450a:	b005      	add	sp, #20
 801450c:	bd30      	pop	{r4, r5, pc}
 801450e:	f006 ff15 	bl	801b33c <GUI_Lock>
 8014512:	4620      	mov	r0, r4
 8014514:	f009 fa88 	bl	801da28 <GUI_ALLOC_h2p>
 8014518:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801451a:	f006 ff05 	bl	801b328 <GUI_Unlock>
 801451e:	07ab      	lsls	r3, r5, #30
 8014520:	d5f2      	bpl.n	8014508 <WM_IsFocusable+0x8>
 8014522:	f015 0510 	ands.w	r5, r5, #16
 8014526:	d1ef      	bne.n	8014508 <WM_IsFocusable+0x8>
 8014528:	a904      	add	r1, sp, #16
 801452a:	231f      	movs	r3, #31
 801452c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8014530:	4620      	mov	r0, r4
 8014532:	4669      	mov	r1, sp
 8014534:	9503      	str	r5, [sp, #12]
 8014536:	f001 fe19 	bl	801616c <WM_SendMessage>
 801453a:	9803      	ldr	r0, [sp, #12]
 801453c:	e7e5      	b.n	801450a <WM_IsFocusable+0xa>
 801453e:	bf00      	nop

08014540 <WM_IsWindow>:
 8014540:	b510      	push	{r4, lr}
 8014542:	4604      	mov	r4, r0
 8014544:	f006 fefa 	bl	801b33c <GUI_Lock>
 8014548:	4620      	mov	r0, r4
 801454a:	f001 f823 	bl	8015594 <WM__IsWindow>
 801454e:	4604      	mov	r4, r0
 8014550:	f006 feea 	bl	801b328 <GUI_Unlock>
 8014554:	4620      	mov	r0, r4
 8014556:	bd10      	pop	{r4, pc}

08014558 <WM_NotifyParent>:
 8014558:	b530      	push	{r4, r5, lr}
 801455a:	b085      	sub	sp, #20
 801455c:	4604      	mov	r4, r0
 801455e:	2326      	movs	r3, #38	; 0x26
 8014560:	9103      	str	r1, [sp, #12]
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	f006 feea 	bl	801b33c <GUI_Lock>
 8014568:	b91c      	cbnz	r4, 8014572 <WM_NotifyParent+0x1a>
 801456a:	f006 fedd 	bl	801b328 <GUI_Unlock>
 801456e:	b005      	add	sp, #20
 8014570:	bd30      	pop	{r4, r5, pc}
 8014572:	f006 fee3 	bl	801b33c <GUI_Lock>
 8014576:	4620      	mov	r0, r4
 8014578:	f009 fa56 	bl	801da28 <GUI_ALLOC_h2p>
 801457c:	6985      	ldr	r5, [r0, #24]
 801457e:	f006 fed3 	bl	801b328 <GUI_Unlock>
 8014582:	2d00      	cmp	r5, #0
 8014584:	d0f1      	beq.n	801456a <WM_NotifyParent+0x12>
 8014586:	4628      	mov	r0, r5
 8014588:	4669      	mov	r1, sp
 801458a:	9402      	str	r4, [sp, #8]
 801458c:	f7fe fd0c 	bl	8012fa8 <WM__SendMessage>
 8014590:	f006 feca 	bl	801b328 <GUI_Unlock>
 8014594:	b005      	add	sp, #20
 8014596:	bd30      	pop	{r4, r5, pc}

08014598 <WM_OnKey>:
 8014598:	b530      	push	{r4, r5, lr}
 801459a:	b087      	sub	sp, #28
 801459c:	4605      	mov	r5, r0
 801459e:	460c      	mov	r4, r1
 80145a0:	f006 fecc 	bl	801b33c <GUI_Lock>
 80145a4:	4a0d      	ldr	r2, [pc, #52]	; (80145dc <WM_OnKey+0x44>)
 80145a6:	4b0e      	ldr	r3, [pc, #56]	; (80145e0 <WM_OnKey+0x48>)
 80145a8:	6812      	ldr	r2, [r2, #0]
 80145aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80145ae:	b928      	cbnz	r0, 80145bc <WM_OnKey+0x24>
 80145b0:	4604      	mov	r4, r0
 80145b2:	f006 feb9 	bl	801b328 <GUI_Unlock>
 80145b6:	4620      	mov	r0, r4
 80145b8:	b007      	add	sp, #28
 80145ba:	bd30      	pop	{r4, r5, pc}
 80145bc:	230e      	movs	r3, #14
 80145be:	a902      	add	r1, sp, #8
 80145c0:	9302      	str	r3, [sp, #8]
 80145c2:	ab00      	add	r3, sp, #0
 80145c4:	9401      	str	r4, [sp, #4]
 80145c6:	9305      	str	r3, [sp, #20]
 80145c8:	9500      	str	r5, [sp, #0]
 80145ca:	f7fe fced 	bl	8012fa8 <WM__SendMessage>
 80145ce:	f006 feab 	bl	801b328 <GUI_Unlock>
 80145d2:	2401      	movs	r4, #1
 80145d4:	4620      	mov	r0, r4
 80145d6:	b007      	add	sp, #28
 80145d8:	bd30      	pop	{r4, r5, pc}
 80145da:	bf00      	nop
 80145dc:	2002cb20 	.word	0x2002cb20
 80145e0:	2002cb10 	.word	0x2002cb10

080145e4 <WM_ResizeWindow>:
 80145e4:	b410      	push	{r4}
 80145e6:	ea51 0402 	orrs.w	r4, r1, r2
 80145ea:	d000      	beq.n	80145ee <WM_ResizeWindow+0xa>
 80145ec:	b910      	cbnz	r0, 80145f4 <WM_ResizeWindow+0x10>
 80145ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f2:	4770      	bx	lr
 80145f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f8:	f7ff b9ce 	b.w	8013998 <WM_ResizeWindow.part.7>

080145fc <WM_SendMessageNoPara>:
 80145fc:	b538      	push	{r3, r4, r5, lr}
 80145fe:	4605      	mov	r5, r0
 8014600:	460c      	mov	r4, r1
 8014602:	f006 fe9b 	bl	801b33c <GUI_Lock>
 8014606:	4628      	mov	r0, r5
 8014608:	4621      	mov	r1, r4
 801460a:	f7fe fceb 	bl	8012fe4 <WM__SendMessageNoPara>
 801460e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014612:	f006 be89 	b.w	801b328 <GUI_Unlock>
 8014616:	bf00      	nop

08014618 <WM_SendToParent>:
 8014618:	b570      	push	{r4, r5, r6, lr}
 801461a:	460c      	mov	r4, r1
 801461c:	4605      	mov	r5, r0
 801461e:	b1c9      	cbz	r1, 8014654 <WM_SendToParent+0x3c>
 8014620:	f006 fe8c 	bl	801b33c <GUI_Lock>
 8014624:	b91d      	cbnz	r5, 801462e <WM_SendToParent+0x16>
 8014626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801462a:	f006 be7d 	b.w	801b328 <GUI_Unlock>
 801462e:	f006 fe85 	bl	801b33c <GUI_Lock>
 8014632:	4628      	mov	r0, r5
 8014634:	f009 f9f8 	bl	801da28 <GUI_ALLOC_h2p>
 8014638:	6986      	ldr	r6, [r0, #24]
 801463a:	f006 fe75 	bl	801b328 <GUI_Unlock>
 801463e:	2e00      	cmp	r6, #0
 8014640:	d0f1      	beq.n	8014626 <WM_SendToParent+0xe>
 8014642:	60a5      	str	r5, [r4, #8]
 8014644:	4630      	mov	r0, r6
 8014646:	4621      	mov	r1, r4
 8014648:	f7fe fcae 	bl	8012fa8 <WM__SendMessage>
 801464c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014650:	f006 be6a 	b.w	801b328 <GUI_Unlock>
 8014654:	bd70      	pop	{r4, r5, r6, pc}
 8014656:	bf00      	nop

08014658 <WM_SetFocus>:
 8014658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801465c:	b087      	sub	sp, #28
 801465e:	2500      	movs	r5, #0
 8014660:	4604      	mov	r4, r0
 8014662:	9502      	str	r5, [sp, #8]
 8014664:	9503      	str	r5, [sp, #12]
 8014666:	9504      	str	r5, [sp, #16]
 8014668:	9505      	str	r5, [sp, #20]
 801466a:	f006 fe67 	bl	801b33c <GUI_Lock>
 801466e:	2c00      	cmp	r4, #0
 8014670:	d050      	beq.n	8014714 <WM_SetFocus+0xbc>
 8014672:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801472c <WM_SetFocus+0xd4>
 8014676:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8014730 <WM_SetFocus+0xd8>
 801467a:	f8d9 3000 	ldr.w	r3, [r9]
 801467e:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8014682:	42a0      	cmp	r0, r4
 8014684:	d046      	beq.n	8014714 <WM_SetFocus+0xbc>
 8014686:	231e      	movs	r3, #30
 8014688:	e88d 0011 	stmia.w	sp, {r0, r4}
 801468c:	9505      	str	r5, [sp, #20]
 801468e:	9302      	str	r3, [sp, #8]
 8014690:	af02      	add	r7, sp, #8
 8014692:	2800      	cmp	r0, #0
 8014694:	d145      	bne.n	8014722 <WM_SetFocus+0xca>
 8014696:	2301      	movs	r3, #1
 8014698:	4620      	mov	r0, r4
 801469a:	4639      	mov	r1, r7
 801469c:	9305      	str	r3, [sp, #20]
 801469e:	f7fe fc83 	bl	8012fa8 <WM__SendMessage>
 80146a2:	9e05      	ldr	r6, [sp, #20]
 80146a4:	2e00      	cmp	r6, #0
 80146a6:	d136      	bne.n	8014716 <WM_SetFocus+0xbe>
 80146a8:	f8d9 3000 	ldr.w	r3, [r9]
 80146ac:	2520      	movs	r5, #32
 80146ae:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
 80146b2:	e004      	b.n	80146be <WM_SetFocus+0x66>
 80146b4:	ab00      	add	r3, sp, #0
 80146b6:	9502      	str	r5, [sp, #8]
 80146b8:	9305      	str	r3, [sp, #20]
 80146ba:	f7fe fc75 	bl	8012fa8 <WM__SendMessage>
 80146be:	f006 fe3d 	bl	801b33c <GUI_Lock>
 80146c2:	4620      	mov	r0, r4
 80146c4:	f009 f9b0 	bl	801da28 <GUI_ALLOC_h2p>
 80146c8:	6984      	ldr	r4, [r0, #24]
 80146ca:	f006 fe2d 	bl	801b328 <GUI_Unlock>
 80146ce:	4620      	mov	r0, r4
 80146d0:	4639      	mov	r1, r7
 80146d2:	2c00      	cmp	r4, #0
 80146d4:	d1ee      	bne.n	80146b4 <WM_SetFocus+0x5c>
 80146d6:	9c00      	ldr	r4, [sp, #0]
 80146d8:	f006 fe30 	bl	801b33c <GUI_Lock>
 80146dc:	4620      	mov	r0, r4
 80146de:	f000 ff59 	bl	8015594 <WM__IsWindow>
 80146e2:	4605      	mov	r5, r0
 80146e4:	f006 fe20 	bl	801b328 <GUI_Unlock>
 80146e8:	b1ad      	cbz	r5, 8014716 <WM_SetFocus+0xbe>
 80146ea:	b1a4      	cbz	r4, 8014716 <WM_SetFocus+0xbe>
 80146ec:	2520      	movs	r5, #32
 80146ee:	e004      	b.n	80146fa <WM_SetFocus+0xa2>
 80146f0:	ab00      	add	r3, sp, #0
 80146f2:	9502      	str	r5, [sp, #8]
 80146f4:	9305      	str	r3, [sp, #20]
 80146f6:	f7fe fc57 	bl	8012fa8 <WM__SendMessage>
 80146fa:	f006 fe1f 	bl	801b33c <GUI_Lock>
 80146fe:	4620      	mov	r0, r4
 8014700:	f009 f992 	bl	801da28 <GUI_ALLOC_h2p>
 8014704:	6984      	ldr	r4, [r0, #24]
 8014706:	f006 fe0f 	bl	801b328 <GUI_Unlock>
 801470a:	4620      	mov	r0, r4
 801470c:	4639      	mov	r1, r7
 801470e:	2c00      	cmp	r4, #0
 8014710:	d1ee      	bne.n	80146f0 <WM_SetFocus+0x98>
 8014712:	e000      	b.n	8014716 <WM_SetFocus+0xbe>
 8014714:	2601      	movs	r6, #1
 8014716:	f006 fe07 	bl	801b328 <GUI_Unlock>
 801471a:	4630      	mov	r0, r6
 801471c:	b007      	add	sp, #28
 801471e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014722:	4639      	mov	r1, r7
 8014724:	f7fe fc40 	bl	8012fa8 <WM__SendMessage>
 8014728:	e7b5      	b.n	8014696 <WM_SetFocus+0x3e>
 801472a:	bf00      	nop
 801472c:	2002cb20 	.word	0x2002cb20
 8014730:	2002cb10 	.word	0x2002cb10

08014734 <WM_SetScrollState>:
 8014734:	b500      	push	{lr}
 8014736:	460b      	mov	r3, r1
 8014738:	b085      	sub	sp, #20
 801473a:	b130      	cbz	r0, 801474a <WM_SetScrollState+0x16>
 801473c:	b129      	cbz	r1, 801474a <WM_SetScrollState+0x16>
 801473e:	2224      	movs	r2, #36	; 0x24
 8014740:	4669      	mov	r1, sp
 8014742:	9303      	str	r3, [sp, #12]
 8014744:	9200      	str	r2, [sp, #0]
 8014746:	f001 fd11 	bl	801616c <WM_SendMessage>
 801474a:	b005      	add	sp, #20
 801474c:	f85d fb04 	ldr.w	pc, [sp], #4

08014750 <WM_SetSize>:
 8014750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014752:	4604      	mov	r4, r0
 8014754:	b083      	sub	sp, #12
 8014756:	460d      	mov	r5, r1
 8014758:	4616      	mov	r6, r2
 801475a:	b908      	cbnz	r0, 8014760 <WM_SetSize+0x10>
 801475c:	b003      	add	sp, #12
 801475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014760:	f006 fdec 	bl	801b33c <GUI_Lock>
 8014764:	4620      	mov	r0, r4
 8014766:	f009 f969 	bl	801da3c <GUI_ALLOC_LockH>
 801476a:	4603      	mov	r3, r0
 801476c:	a802      	add	r0, sp, #8
 801476e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014772:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8014776:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 801477a:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 801477e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8014782:	ebc2 020e 	rsb	r2, r2, lr
 8014786:	1a7b      	subs	r3, r7, r1
 8014788:	43db      	mvns	r3, r3
 801478a:	43d2      	mvns	r2, r2
 801478c:	4415      	add	r5, r2
 801478e:	441e      	add	r6, r3
 8014790:	f009 f966 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014794:	ea56 0305 	orrs.w	r3, r6, r5
 8014798:	d103      	bne.n	80147a2 <WM_SetSize+0x52>
 801479a:	f006 fdc5 	bl	801b328 <GUI_Unlock>
 801479e:	b003      	add	sp, #12
 80147a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147a2:	4620      	mov	r0, r4
 80147a4:	4629      	mov	r1, r5
 80147a6:	4632      	mov	r2, r6
 80147a8:	f7ff f8f6 	bl	8013998 <WM_ResizeWindow.part.7>
 80147ac:	e7f5      	b.n	801479a <WM_SetSize+0x4a>
 80147ae:	bf00      	nop

080147b0 <WM_SetUserClipRect>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4605      	mov	r5, r0
 80147b4:	f006 fdc2 	bl	801b33c <GUI_Lock>
 80147b8:	4b04      	ldr	r3, [pc, #16]	; (80147cc <WM_SetUserClipRect+0x1c>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80147be:	645d      	str	r5, [r3, #68]	; 0x44
 80147c0:	f000 fdc8 	bl	8015354 <WM__ActivateClipRect>
 80147c4:	f006 fdb0 	bl	801b328 <GUI_Unlock>
 80147c8:	4620      	mov	r0, r4
 80147ca:	bd38      	pop	{r3, r4, r5, pc}
 80147cc:	2000027c 	.word	0x2000027c

080147d0 <WM_SetWindowPos>:
 80147d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147d4:	4604      	mov	r4, r0
 80147d6:	b083      	sub	sp, #12
 80147d8:	460e      	mov	r6, r1
 80147da:	4615      	mov	r5, r2
 80147dc:	4698      	mov	r8, r3
 80147de:	b938      	cbnz	r0, 80147f0 <WM_SetWindowPos+0x20>
 80147e0:	4620      	mov	r0, r4
 80147e2:	4631      	mov	r1, r6
 80147e4:	462a      	mov	r2, r5
 80147e6:	f7ff f8b7 	bl	8013958 <WM_MoveTo>
 80147ea:	b003      	add	sp, #12
 80147ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147f0:	f006 fda4 	bl	801b33c <GUI_Lock>
 80147f4:	4620      	mov	r0, r4
 80147f6:	f009 f921 	bl	801da3c <GUI_ALLOC_LockH>
 80147fa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80147fe:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014802:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014806:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801480a:	af02      	add	r7, sp, #8
 801480c:	1acb      	subs	r3, r1, r3
 801480e:	43db      	mvns	r3, r3
 8014810:	f847 0d04 	str.w	r0, [r7, #-4]!
 8014814:	ebc2 0909 	rsb	r9, r2, r9
 8014818:	4498      	add	r8, r3
 801481a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801481c:	ea6f 0909 	mvn.w	r9, r9
 8014820:	4499      	add	r9, r3
 8014822:	4638      	mov	r0, r7
 8014824:	f009 f91c 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014828:	ea58 0309 	orrs.w	r3, r8, r9
 801482c:	d102      	bne.n	8014834 <WM_SetWindowPos+0x64>
 801482e:	f006 fd7b 	bl	801b328 <GUI_Unlock>
 8014832:	e7d5      	b.n	80147e0 <WM_SetWindowPos+0x10>
 8014834:	4641      	mov	r1, r8
 8014836:	464a      	mov	r2, r9
 8014838:	4620      	mov	r0, r4
 801483a:	f7ff f8ad 	bl	8013998 <WM_ResizeWindow.part.7>
 801483e:	e7f6      	b.n	801482e <WM_SetWindowPos+0x5e>

08014840 <WM_InvalidateWindowAndDescs>:
 8014840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014844:	4604      	mov	r4, r0
 8014846:	b083      	sub	sp, #12
 8014848:	f006 fd78 	bl	801b33c <GUI_Lock>
 801484c:	b924      	cbnz	r4, 8014858 <WM_InvalidateWindowAndDescs+0x18>
 801484e:	b003      	add	sp, #12
 8014850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	f006 bd68 	b.w	801b328 <GUI_Unlock>
 8014858:	4620      	mov	r0, r4
 801485a:	f001 fd79 	bl	8016350 <WM_InvalidateWindow>
 801485e:	f006 fd6d 	bl	801b33c <GUI_Lock>
 8014862:	4620      	mov	r0, r4
 8014864:	f009 f8e0 	bl	801da28 <GUI_ALLOC_h2p>
 8014868:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801486c:	f006 fd5c 	bl	801b328 <GUI_Unlock>
 8014870:	f1b8 0f00 	cmp.w	r8, #0
 8014874:	d0eb      	beq.n	801484e <WM_InvalidateWindowAndDescs+0xe>
 8014876:	f006 fd61 	bl	801b33c <GUI_Lock>
 801487a:	4640      	mov	r0, r8
 801487c:	f001 fd68 	bl	8016350 <WM_InvalidateWindow>
 8014880:	f006 fd5c 	bl	801b33c <GUI_Lock>
 8014884:	4640      	mov	r0, r8
 8014886:	f009 f8cf 	bl	801da28 <GUI_ALLOC_h2p>
 801488a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801488e:	f006 fd4b 	bl	801b328 <GUI_Unlock>
 8014892:	f1b9 0f00 	cmp.w	r9, #0
 8014896:	f000 80b8 	beq.w	8014a0a <WM_InvalidateWindowAndDescs+0x1ca>
 801489a:	f006 fd4f 	bl	801b33c <GUI_Lock>
 801489e:	4648      	mov	r0, r9
 80148a0:	f001 fd56 	bl	8016350 <WM_InvalidateWindow>
 80148a4:	f006 fd4a 	bl	801b33c <GUI_Lock>
 80148a8:	4648      	mov	r0, r9
 80148aa:	f009 f8bd 	bl	801da28 <GUI_ALLOC_h2p>
 80148ae:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80148b2:	f006 fd39 	bl	801b328 <GUI_Unlock>
 80148b6:	f1ba 0f00 	cmp.w	sl, #0
 80148ba:	f000 809b 	beq.w	80149f4 <WM_InvalidateWindowAndDescs+0x1b4>
 80148be:	f006 fd3d 	bl	801b33c <GUI_Lock>
 80148c2:	4650      	mov	r0, sl
 80148c4:	f001 fd44 	bl	8016350 <WM_InvalidateWindow>
 80148c8:	f006 fd38 	bl	801b33c <GUI_Lock>
 80148cc:	4650      	mov	r0, sl
 80148ce:	f009 f8ab 	bl	801da28 <GUI_ALLOC_h2p>
 80148d2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80148d6:	f006 fd27 	bl	801b328 <GUI_Unlock>
 80148da:	f1bb 0f00 	cmp.w	fp, #0
 80148de:	d07e      	beq.n	80149de <WM_InvalidateWindowAndDescs+0x19e>
 80148e0:	f006 fd2c 	bl	801b33c <GUI_Lock>
 80148e4:	4658      	mov	r0, fp
 80148e6:	f001 fd33 	bl	8016350 <WM_InvalidateWindow>
 80148ea:	f006 fd27 	bl	801b33c <GUI_Lock>
 80148ee:	4658      	mov	r0, fp
 80148f0:	f009 f89a 	bl	801da28 <GUI_ALLOC_h2p>
 80148f4:	69c0      	ldr	r0, [r0, #28]
 80148f6:	9001      	str	r0, [sp, #4]
 80148f8:	f006 fd16 	bl	801b328 <GUI_Unlock>
 80148fc:	9b01      	ldr	r3, [sp, #4]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d063      	beq.n	80149ca <WM_InvalidateWindowAndDescs+0x18a>
 8014902:	f006 fd1b 	bl	801b33c <GUI_Lock>
 8014906:	9801      	ldr	r0, [sp, #4]
 8014908:	f001 fd22 	bl	8016350 <WM_InvalidateWindow>
 801490c:	f006 fd16 	bl	801b33c <GUI_Lock>
 8014910:	9801      	ldr	r0, [sp, #4]
 8014912:	f009 f889 	bl	801da28 <GUI_ALLOC_h2p>
 8014916:	69c6      	ldr	r6, [r0, #28]
 8014918:	f006 fd06 	bl	801b328 <GUI_Unlock>
 801491c:	2e00      	cmp	r6, #0
 801491e:	d04b      	beq.n	80149b8 <WM_InvalidateWindowAndDescs+0x178>
 8014920:	f006 fd0c 	bl	801b33c <GUI_Lock>
 8014924:	4630      	mov	r0, r6
 8014926:	f001 fd13 	bl	8016350 <WM_InvalidateWindow>
 801492a:	f006 fd07 	bl	801b33c <GUI_Lock>
 801492e:	4630      	mov	r0, r6
 8014930:	f009 f87a 	bl	801da28 <GUI_ALLOC_h2p>
 8014934:	69c5      	ldr	r5, [r0, #28]
 8014936:	f006 fcf7 	bl	801b328 <GUI_Unlock>
 801493a:	2d00      	cmp	r5, #0
 801493c:	d034      	beq.n	80149a8 <WM_InvalidateWindowAndDescs+0x168>
 801493e:	f006 fcfd 	bl	801b33c <GUI_Lock>
 8014942:	4628      	mov	r0, r5
 8014944:	f001 fd04 	bl	8016350 <WM_InvalidateWindow>
 8014948:	f006 fcf8 	bl	801b33c <GUI_Lock>
 801494c:	4628      	mov	r0, r5
 801494e:	f009 f86b 	bl	801da28 <GUI_ALLOC_h2p>
 8014952:	69c4      	ldr	r4, [r0, #28]
 8014954:	f006 fce8 	bl	801b328 <GUI_Unlock>
 8014958:	b1f4      	cbz	r4, 8014998 <WM_InvalidateWindowAndDescs+0x158>
 801495a:	f006 fcef 	bl	801b33c <GUI_Lock>
 801495e:	4620      	mov	r0, r4
 8014960:	f001 fcf6 	bl	8016350 <WM_InvalidateWindow>
 8014964:	f006 fcea 	bl	801b33c <GUI_Lock>
 8014968:	4620      	mov	r0, r4
 801496a:	f009 f85d 	bl	801da28 <GUI_ALLOC_h2p>
 801496e:	69c7      	ldr	r7, [r0, #28]
 8014970:	f006 fcda 	bl	801b328 <GUI_Unlock>
 8014974:	b147      	cbz	r7, 8014988 <WM_InvalidateWindowAndDescs+0x148>
 8014976:	4638      	mov	r0, r7
 8014978:	f7ff ff62 	bl	8014840 <WM_InvalidateWindowAndDescs>
 801497c:	4638      	mov	r0, r7
 801497e:	f009 f853 	bl	801da28 <GUI_ALLOC_h2p>
 8014982:	6a07      	ldr	r7, [r0, #32]
 8014984:	2f00      	cmp	r7, #0
 8014986:	d1f6      	bne.n	8014976 <WM_InvalidateWindowAndDescs+0x136>
 8014988:	f006 fcce 	bl	801b328 <GUI_Unlock>
 801498c:	4620      	mov	r0, r4
 801498e:	f009 f84b 	bl	801da28 <GUI_ALLOC_h2p>
 8014992:	6a04      	ldr	r4, [r0, #32]
 8014994:	2c00      	cmp	r4, #0
 8014996:	d1e0      	bne.n	801495a <WM_InvalidateWindowAndDescs+0x11a>
 8014998:	f006 fcc6 	bl	801b328 <GUI_Unlock>
 801499c:	4628      	mov	r0, r5
 801499e:	f009 f843 	bl	801da28 <GUI_ALLOC_h2p>
 80149a2:	6a05      	ldr	r5, [r0, #32]
 80149a4:	2d00      	cmp	r5, #0
 80149a6:	d1ca      	bne.n	801493e <WM_InvalidateWindowAndDescs+0xfe>
 80149a8:	f006 fcbe 	bl	801b328 <GUI_Unlock>
 80149ac:	4630      	mov	r0, r6
 80149ae:	f009 f83b 	bl	801da28 <GUI_ALLOC_h2p>
 80149b2:	6a06      	ldr	r6, [r0, #32]
 80149b4:	2e00      	cmp	r6, #0
 80149b6:	d1b3      	bne.n	8014920 <WM_InvalidateWindowAndDescs+0xe0>
 80149b8:	f006 fcb6 	bl	801b328 <GUI_Unlock>
 80149bc:	9801      	ldr	r0, [sp, #4]
 80149be:	f009 f833 	bl	801da28 <GUI_ALLOC_h2p>
 80149c2:	6a00      	ldr	r0, [r0, #32]
 80149c4:	9001      	str	r0, [sp, #4]
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d19b      	bne.n	8014902 <WM_InvalidateWindowAndDescs+0xc2>
 80149ca:	f006 fcad 	bl	801b328 <GUI_Unlock>
 80149ce:	4658      	mov	r0, fp
 80149d0:	f009 f82a 	bl	801da28 <GUI_ALLOC_h2p>
 80149d4:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80149d8:	f1bb 0f00 	cmp.w	fp, #0
 80149dc:	d180      	bne.n	80148e0 <WM_InvalidateWindowAndDescs+0xa0>
 80149de:	f006 fca3 	bl	801b328 <GUI_Unlock>
 80149e2:	4650      	mov	r0, sl
 80149e4:	f009 f820 	bl	801da28 <GUI_ALLOC_h2p>
 80149e8:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80149ec:	f1ba 0f00 	cmp.w	sl, #0
 80149f0:	f47f af65 	bne.w	80148be <WM_InvalidateWindowAndDescs+0x7e>
 80149f4:	f006 fc98 	bl	801b328 <GUI_Unlock>
 80149f8:	4648      	mov	r0, r9
 80149fa:	f009 f815 	bl	801da28 <GUI_ALLOC_h2p>
 80149fe:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8014a02:	f1b9 0f00 	cmp.w	r9, #0
 8014a06:	f47f af48 	bne.w	801489a <WM_InvalidateWindowAndDescs+0x5a>
 8014a0a:	f006 fc8d 	bl	801b328 <GUI_Unlock>
 8014a0e:	4640      	mov	r0, r8
 8014a10:	f009 f80a 	bl	801da28 <GUI_ALLOC_h2p>
 8014a14:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8014a18:	f1b8 0f00 	cmp.w	r8, #0
 8014a1c:	f47f af2b 	bne.w	8014876 <WM_InvalidateWindowAndDescs+0x36>
 8014a20:	e715      	b.n	801484e <WM_InvalidateWindowAndDescs+0xe>
 8014a22:	bf00      	nop

08014a24 <WM_ShowWindow>:
 8014a24:	b510      	push	{r4, lr}
 8014a26:	4604      	mov	r4, r0
 8014a28:	b082      	sub	sp, #8
 8014a2a:	b908      	cbnz	r0, 8014a30 <WM_ShowWindow+0xc>
 8014a2c:	b002      	add	sp, #8
 8014a2e:	bd10      	pop	{r4, pc}
 8014a30:	f006 fc84 	bl	801b33c <GUI_Lock>
 8014a34:	4620      	mov	r0, r4
 8014a36:	f009 f801 	bl	801da3c <GUI_ALLOC_LockH>
 8014a3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014a3c:	9001      	str	r0, [sp, #4]
 8014a3e:	079a      	lsls	r2, r3, #30
 8014a40:	d506      	bpl.n	8014a50 <WM_ShowWindow+0x2c>
 8014a42:	a801      	add	r0, sp, #4
 8014a44:	f009 f80c 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014a48:	f006 fc6e 	bl	801b328 <GUI_Unlock>
 8014a4c:	b002      	add	sp, #8
 8014a4e:	bd10      	pop	{r4, pc}
 8014a50:	f043 0302 	orr.w	r3, r3, #2
 8014a54:	6283      	str	r3, [r0, #40]	; 0x28
 8014a56:	4620      	mov	r0, r4
 8014a58:	f7ff fef2 	bl	8014840 <WM_InvalidateWindowAndDescs>
 8014a5c:	e7f1      	b.n	8014a42 <WM_ShowWindow+0x1e>
 8014a5e:	bf00      	nop

08014a60 <WM_ValidateWindow>:
 8014a60:	b510      	push	{r4, lr}
 8014a62:	4604      	mov	r4, r0
 8014a64:	b082      	sub	sp, #8
 8014a66:	f006 fc69 	bl	801b33c <GUI_Lock>
 8014a6a:	b91c      	cbnz	r4, 8014a74 <WM_ValidateWindow+0x14>
 8014a6c:	f006 fc5c 	bl	801b328 <GUI_Unlock>
 8014a70:	b002      	add	sp, #8
 8014a72:	bd10      	pop	{r4, pc}
 8014a74:	4620      	mov	r0, r4
 8014a76:	f008 ffe1 	bl	801da3c <GUI_ALLOC_LockH>
 8014a7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014a7c:	9001      	str	r0, [sp, #4]
 8014a7e:	069a      	lsls	r2, r3, #26
 8014a80:	d506      	bpl.n	8014a90 <WM_ValidateWindow+0x30>
 8014a82:	4a07      	ldr	r2, [pc, #28]	; (8014aa0 <WM_ValidateWindow+0x40>)
 8014a84:	8811      	ldrh	r1, [r2, #0]
 8014a86:	f023 0320 	bic.w	r3, r3, #32
 8014a8a:	3901      	subs	r1, #1
 8014a8c:	6283      	str	r3, [r0, #40]	; 0x28
 8014a8e:	8011      	strh	r1, [r2, #0]
 8014a90:	a801      	add	r0, sp, #4
 8014a92:	f008 ffe5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014a96:	f006 fc47 	bl	801b328 <GUI_Unlock>
 8014a9a:	b002      	add	sp, #8
 8014a9c:	bd10      	pop	{r4, pc}
 8014a9e:	bf00      	nop
 8014aa0:	2002cb18 	.word	0x2002cb18

08014aa4 <WM_HideWindow>:
 8014aa4:	b510      	push	{r4, lr}
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	b908      	cbnz	r0, 8014ab0 <WM_HideWindow+0xc>
 8014aac:	b002      	add	sp, #8
 8014aae:	bd10      	pop	{r4, pc}
 8014ab0:	f006 fc44 	bl	801b33c <GUI_Lock>
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f008 ffc1 	bl	801da3c <GUI_ALLOC_LockH>
 8014aba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014abc:	9001      	str	r0, [sp, #4]
 8014abe:	0791      	lsls	r1, r2, #30
 8014ac0:	d406      	bmi.n	8014ad0 <WM_HideWindow+0x2c>
 8014ac2:	a801      	add	r0, sp, #4
 8014ac4:	f008 ffcc 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ac8:	f006 fc2e 	bl	801b328 <GUI_Unlock>
 8014acc:	b002      	add	sp, #8
 8014ace:	bd10      	pop	{r4, pc}
 8014ad0:	f022 0202 	bic.w	r2, r2, #2
 8014ad4:	6282      	str	r2, [r0, #40]	; 0x28
 8014ad6:	6981      	ldr	r1, [r0, #24]
 8014ad8:	6a02      	ldr	r2, [r0, #32]
 8014ada:	f001 fadf 	bl	801609c <WM__InvalidateRectEx>
 8014ade:	a801      	add	r0, sp, #4
 8014ae0:	f008 ffbe 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ae4:	e7f0      	b.n	8014ac8 <WM_HideWindow+0x24>
 8014ae6:	bf00      	nop

08014ae8 <WM_GetWindowSizeX>:
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	4604      	mov	r4, r0
 8014aec:	b082      	sub	sp, #8
 8014aee:	f006 fc25 	bl	801b33c <GUI_Lock>
 8014af2:	b914      	cbnz	r4, 8014afa <WM_GetWindowSizeX+0x12>
 8014af4:	f001 fdd6 	bl	80166a4 <WM_GetActiveWindow>
 8014af8:	4604      	mov	r4, r0
 8014afa:	4620      	mov	r0, r4
 8014afc:	f008 ff9e 	bl	801da3c <GUI_ALLOC_LockH>
 8014b00:	ab02      	add	r3, sp, #8
 8014b02:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014b06:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014b0a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	1aa4      	subs	r4, r4, r2
 8014b12:	f008 ffa5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014b16:	f006 fc07 	bl	801b328 <GUI_Unlock>
 8014b1a:	3401      	adds	r4, #1
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	b002      	add	sp, #8
 8014b20:	bd10      	pop	{r4, pc}
 8014b22:	bf00      	nop

08014b24 <WM_GetWindowSizeY>:
 8014b24:	b510      	push	{r4, lr}
 8014b26:	4604      	mov	r4, r0
 8014b28:	b082      	sub	sp, #8
 8014b2a:	f006 fc07 	bl	801b33c <GUI_Lock>
 8014b2e:	b914      	cbnz	r4, 8014b36 <WM_GetWindowSizeY+0x12>
 8014b30:	f001 fdb8 	bl	80166a4 <WM_GetActiveWindow>
 8014b34:	4604      	mov	r4, r0
 8014b36:	4620      	mov	r0, r4
 8014b38:	f008 ff80 	bl	801da3c <GUI_ALLOC_LockH>
 8014b3c:	ab02      	add	r3, sp, #8
 8014b3e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014b42:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014b46:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	1aa4      	subs	r4, r4, r2
 8014b4e:	f008 ff87 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014b52:	f006 fbe9 	bl	801b328 <GUI_Unlock>
 8014b56:	3401      	adds	r4, #1
 8014b58:	4620      	mov	r0, r4
 8014b5a:	b002      	add	sp, #8
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	bf00      	nop

08014b60 <_cbInvalidateOne>:
 8014b60:	f001 bbf6 	b.w	8016350 <WM_InvalidateWindow>

08014b64 <WM_BringToTop>:
 8014b64:	b530      	push	{r4, r5, lr}
 8014b66:	4604      	mov	r4, r0
 8014b68:	b083      	sub	sp, #12
 8014b6a:	f006 fbe7 	bl	801b33c <GUI_Lock>
 8014b6e:	b91c      	cbnz	r4, 8014b78 <WM_BringToTop+0x14>
 8014b70:	f006 fbda 	bl	801b328 <GUI_Unlock>
 8014b74:	b003      	add	sp, #12
 8014b76:	bd30      	pop	{r4, r5, pc}
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f008 ff5f 	bl	801da3c <GUI_ALLOC_LockH>
 8014b7e:	6a03      	ldr	r3, [r0, #32]
 8014b80:	9000      	str	r0, [sp, #0]
 8014b82:	b343      	cbz	r3, 8014bd6 <WM_BringToTop+0x72>
 8014b84:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014b86:	0712      	lsls	r2, r2, #28
 8014b88:	d40d      	bmi.n	8014ba6 <WM_BringToTop+0x42>
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f008 ff56 	bl	801da3c <GUI_ALLOC_LockH>
 8014b90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014b92:	9001      	str	r0, [sp, #4]
 8014b94:	071b      	lsls	r3, r3, #28
 8014b96:	d525      	bpl.n	8014be4 <WM_BringToTop+0x80>
 8014b98:	4668      	mov	r0, sp
 8014b9a:	f008 ff61 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014b9e:	a801      	add	r0, sp, #4
 8014ba0:	f008 ff5e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ba4:	e7e4      	b.n	8014b70 <WM_BringToTop+0xc>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	699d      	ldr	r5, [r3, #24]
 8014baa:	4668      	mov	r0, sp
 8014bac:	f008 ff58 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	f000 fccd 	bl	8015550 <WM__RemoveWindowFromList>
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f000 fc5b 	bl	8015474 <WM__InsertWindowIntoList>
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f001 fbc6 	bl	8016350 <WM_InvalidateWindow>
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	490a      	ldr	r1, [pc, #40]	; (8014bf0 <WM_BringToTop+0x8c>)
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f7ff f8c3 	bl	8013d54 <WM_ForEachDesc>
 8014bce:	f006 fbab 	bl	801b328 <GUI_Unlock>
 8014bd2:	b003      	add	sp, #12
 8014bd4:	bd30      	pop	{r4, r5, pc}
 8014bd6:	4668      	mov	r0, sp
 8014bd8:	f008 ff42 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014bdc:	f006 fba4 	bl	801b328 <GUI_Unlock>
 8014be0:	b003      	add	sp, #12
 8014be2:	bd30      	pop	{r4, r5, pc}
 8014be4:	a801      	add	r0, sp, #4
 8014be6:	f008 ff3b 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014bea:	9b00      	ldr	r3, [sp, #0]
 8014bec:	e7dc      	b.n	8014ba8 <WM_BringToTop+0x44>
 8014bee:	bf00      	nop
 8014bf0:	08014b61 	.word	0x08014b61

08014bf4 <_OnExit>:
 8014bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bf8:	4a1e      	ldr	r2, [pc, #120]	; (8014c74 <_OnExit+0x80>)
 8014bfa:	4d1f      	ldr	r5, [pc, #124]	; (8014c78 <_OnExit+0x84>)
 8014bfc:	4b1f      	ldr	r3, [pc, #124]	; (8014c7c <_OnExit+0x88>)
 8014bfe:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8014ca4 <_OnExit+0xb0>
 8014c02:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8014ca8 <_OnExit+0xb4>
 8014c06:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8014cac <_OnExit+0xb8>
 8014c0a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8014cb0 <_OnExit+0xbc>
 8014c0e:	491c      	ldr	r1, [pc, #112]	; (8014c80 <_OnExit+0x8c>)
 8014c10:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8014cb4 <_OnExit+0xc0>
 8014c14:	4e1b      	ldr	r6, [pc, #108]	; (8014c84 <_OnExit+0x90>)
 8014c16:	4f1c      	ldr	r7, [pc, #112]	; (8014c88 <_OnExit+0x94>)
 8014c18:	481c      	ldr	r0, [pc, #112]	; (8014c8c <_OnExit+0x98>)
 8014c1a:	2400      	movs	r4, #0
 8014c1c:	600c      	str	r4, [r1, #0]
 8014c1e:	6014      	str	r4, [r2, #0]
 8014c20:	6054      	str	r4, [r2, #4]
 8014c22:	601c      	str	r4, [r3, #0]
 8014c24:	605c      	str	r4, [r3, #4]
 8014c26:	4621      	mov	r1, r4
 8014c28:	682b      	ldr	r3, [r5, #0]
 8014c2a:	f8cb 4000 	str.w	r4, [fp]
 8014c2e:	f8ca 4000 	str.w	r4, [sl]
 8014c32:	f8c9 4000 	str.w	r4, [r9]
 8014c36:	f8c8 4000 	str.w	r4, [r8]
 8014c3a:	2218      	movs	r2, #24
 8014c3c:	f88c 4000 	strb.w	r4, [ip]
 8014c40:	6034      	str	r4, [r6, #0]
 8014c42:	603c      	str	r4, [r7, #0]
 8014c44:	4798      	blx	r3
 8014c46:	4b12      	ldr	r3, [pc, #72]	; (8014c90 <_OnExit+0x9c>)
 8014c48:	4a12      	ldr	r2, [pc, #72]	; (8014c94 <_OnExit+0xa0>)
 8014c4a:	601c      	str	r4, [r3, #0]
 8014c4c:	6014      	str	r4, [r2, #0]
 8014c4e:	605c      	str	r4, [r3, #4]
 8014c50:	4621      	mov	r1, r4
 8014c52:	682b      	ldr	r3, [r5, #0]
 8014c54:	4810      	ldr	r0, [pc, #64]	; (8014c98 <_OnExit+0xa4>)
 8014c56:	2210      	movs	r2, #16
 8014c58:	4798      	blx	r3
 8014c5a:	682b      	ldr	r3, [r5, #0]
 8014c5c:	480f      	ldr	r0, [pc, #60]	; (8014c9c <_OnExit+0xa8>)
 8014c5e:	4621      	mov	r1, r4
 8014c60:	2210      	movs	r2, #16
 8014c62:	4798      	blx	r3
 8014c64:	682b      	ldr	r3, [r5, #0]
 8014c66:	480e      	ldr	r0, [pc, #56]	; (8014ca0 <_OnExit+0xac>)
 8014c68:	4621      	mov	r1, r4
 8014c6a:	2210      	movs	r2, #16
 8014c6c:	4798      	blx	r3
 8014c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c72:	bf00      	nop
 8014c74:	2002cb10 	.word	0x2002cb10
 8014c78:	20000250 	.word	0x20000250
 8014c7c:	2002cb44 	.word	0x2002cb44
 8014c80:	2002cb40 	.word	0x2002cb40
 8014c84:	2002b170 	.word	0x2002b170
 8014c88:	2002b194 	.word	0x2002b194
 8014c8c:	2002b17c 	.word	0x2002b17c
 8014c90:	2002cb00 	.word	0x2002cb00
 8014c94:	2002cb0c 	.word	0x2002cb0c
 8014c98:	2002ccbc 	.word	0x2002ccbc
 8014c9c:	2002ccac 	.word	0x2002ccac
 8014ca0:	2002cc9c 	.word	0x2002cc9c
 8014ca4:	2002cb3c 	.word	0x2002cb3c
 8014ca8:	2002cb50 	.word	0x2002cb50
 8014cac:	2002cafc 	.word	0x2002cafc
 8014cb0:	2002cb30 	.word	0x2002cb30
 8014cb4:	2002b198 	.word	0x2002b198

08014cb8 <_Findy1>:
 8014cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cba:	4604      	mov	r4, r0
 8014cbc:	b085      	sub	sp, #20
 8014cbe:	460e      	mov	r6, r1
 8014cc0:	4617      	mov	r7, r2
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d033      	beq.n	8014d2e <_Findy1+0x76>
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f008 feb8 	bl	801da3c <GUI_ALLOC_LockH>
 8014ccc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014cce:	9000      	str	r0, [sp, #0]
 8014cd0:	07a2      	lsls	r2, r4, #30
 8014cd2:	d526      	bpl.n	8014d22 <_Findy1+0x6a>
 8014cd4:	2f00      	cmp	r7, #0
 8014cd6:	d042      	beq.n	8014d5e <_Findy1+0xa6>
 8014cd8:	ad02      	add	r5, sp, #8
 8014cda:	4601      	mov	r1, r0
 8014cdc:	463a      	mov	r2, r7
 8014cde:	4628      	mov	r0, r5
 8014ce0:	f005 fb6c 	bl	801a3bc <GUI__IntersectRects>
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	f007 fd78 	bl	801c7dc <GUI_RectsIntersect>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d02e      	beq.n	8014d4e <_Findy1+0x96>
 8014cf0:	07e3      	lsls	r3, r4, #31
 8014cf2:	9800      	ldr	r0, [sp, #0]
 8014cf4:	d41d      	bmi.n	8014d32 <_Findy1+0x7a>
 8014cf6:	2f00      	cmp	r7, #0
 8014cf8:	d045      	beq.n	8014d86 <_Findy1+0xce>
 8014cfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cfe:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	bfb8      	it	lt
 8014d06:	461a      	movlt	r2, r3
 8014d08:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	dd2b      	ble.n	8014d68 <_Findy1+0xb0>
 8014d10:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014d14:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8014d18:	b21a      	sxth	r2, r3
 8014d1a:	4291      	cmp	r1, r2
 8014d1c:	db01      	blt.n	8014d22 <_Findy1+0x6a>
 8014d1e:	3b01      	subs	r3, #1
 8014d20:	80f3      	strh	r3, [r6, #6]
 8014d22:	6a04      	ldr	r4, [r0, #32]
 8014d24:	4668      	mov	r0, sp
 8014d26:	f008 fe9b 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014d2a:	2c00      	cmp	r4, #0
 8014d2c:	d1cb      	bne.n	8014cc6 <_Findy1+0xe>
 8014d2e:	b005      	add	sp, #20
 8014d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d32:	69c4      	ldr	r4, [r0, #28]
 8014d34:	2c00      	cmp	r4, #0
 8014d36:	d0f4      	beq.n	8014d22 <_Findy1+0x6a>
 8014d38:	4620      	mov	r0, r4
 8014d3a:	4631      	mov	r1, r6
 8014d3c:	462a      	mov	r2, r5
 8014d3e:	f7ff ffbb 	bl	8014cb8 <_Findy1>
 8014d42:	4620      	mov	r0, r4
 8014d44:	f008 fe70 	bl	801da28 <GUI_ALLOC_h2p>
 8014d48:	6a04      	ldr	r4, [r0, #32]
 8014d4a:	2c00      	cmp	r4, #0
 8014d4c:	d1f4      	bne.n	8014d38 <_Findy1+0x80>
 8014d4e:	9800      	ldr	r0, [sp, #0]
 8014d50:	6a04      	ldr	r4, [r0, #32]
 8014d52:	4668      	mov	r0, sp
 8014d54:	f008 fe84 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014d58:	2c00      	cmp	r4, #0
 8014d5a:	d1b4      	bne.n	8014cc6 <_Findy1+0xe>
 8014d5c:	e7e7      	b.n	8014d2e <_Findy1+0x76>
 8014d5e:	c803      	ldmia	r0, {r0, r1}
 8014d60:	ad02      	add	r5, sp, #8
 8014d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8014d66:	e7bd      	b.n	8014ce4 <_Findy1+0x2c>
 8014d68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014d6c:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8014d70:	b21a      	sxth	r2, r3
 8014d72:	4291      	cmp	r1, r2
 8014d74:	ddd5      	ble.n	8014d22 <_Findy1+0x6a>
 8014d76:	6a04      	ldr	r4, [r0, #32]
 8014d78:	80f3      	strh	r3, [r6, #6]
 8014d7a:	4668      	mov	r0, sp
 8014d7c:	f008 fe70 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014d80:	2c00      	cmp	r4, #0
 8014d82:	d1a0      	bne.n	8014cc6 <_Findy1+0xe>
 8014d84:	e7d3      	b.n	8014d2e <_Findy1+0x76>
 8014d86:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014d8a:	e7bd      	b.n	8014d08 <_Findy1+0x50>

08014d8c <_Findx0>:
 8014d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d90:	4604      	mov	r4, r0
 8014d92:	b084      	sub	sp, #16
 8014d94:	460f      	mov	r7, r1
 8014d96:	4690      	mov	r8, r2
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d048      	beq.n	8014e2e <_Findx0+0xa2>
 8014d9c:	2600      	movs	r6, #0
 8014d9e:	e00c      	b.n	8014dba <_Findx0+0x2e>
 8014da0:	07e3      	lsls	r3, r4, #31
 8014da2:	d430      	bmi.n	8014e06 <_Findx0+0x7a>
 8014da4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014da8:	9800      	ldr	r0, [sp, #0]
 8014daa:	3301      	adds	r3, #1
 8014dac:	803b      	strh	r3, [r7, #0]
 8014dae:	2601      	movs	r6, #1
 8014db0:	6a04      	ldr	r4, [r0, #32]
 8014db2:	4668      	mov	r0, sp
 8014db4:	f008 fe54 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014db8:	b1e4      	cbz	r4, 8014df4 <_Findx0+0x68>
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f008 fe3e 	bl	801da3c <GUI_ALLOC_LockH>
 8014dc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014dc2:	9000      	str	r0, [sp, #0]
 8014dc4:	07a2      	lsls	r2, r4, #30
 8014dc6:	d5f3      	bpl.n	8014db0 <_Findx0+0x24>
 8014dc8:	f1b8 0f00 	cmp.w	r8, #0
 8014dcc:	d016      	beq.n	8014dfc <_Findx0+0x70>
 8014dce:	ad02      	add	r5, sp, #8
 8014dd0:	4601      	mov	r1, r0
 8014dd2:	4642      	mov	r2, r8
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	f005 faf1 	bl	801a3bc <GUI__IntersectRects>
 8014dda:	4638      	mov	r0, r7
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f007 fcfd 	bl	801c7dc <GUI_RectsIntersect>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d1dc      	bne.n	8014da0 <_Findx0+0x14>
 8014de6:	9800      	ldr	r0, [sp, #0]
 8014de8:	6a04      	ldr	r4, [r0, #32]
 8014dea:	4668      	mov	r0, sp
 8014dec:	f008 fe38 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014df0:	2c00      	cmp	r4, #0
 8014df2:	d1e2      	bne.n	8014dba <_Findx0+0x2e>
 8014df4:	4630      	mov	r0, r6
 8014df6:	b004      	add	sp, #16
 8014df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dfc:	c803      	ldmia	r0, {r0, r1}
 8014dfe:	ad02      	add	r5, sp, #8
 8014e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8014e04:	e7e9      	b.n	8014dda <_Findx0+0x4e>
 8014e06:	9800      	ldr	r0, [sp, #0]
 8014e08:	69c4      	ldr	r4, [r0, #28]
 8014e0a:	2c00      	cmp	r4, #0
 8014e0c:	d0d0      	beq.n	8014db0 <_Findx0+0x24>
 8014e0e:	4620      	mov	r0, r4
 8014e10:	4639      	mov	r1, r7
 8014e12:	462a      	mov	r2, r5
 8014e14:	f7ff ffba 	bl	8014d8c <_Findx0>
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	bf18      	it	ne
 8014e1e:	2601      	movne	r6, #1
 8014e20:	f008 fe02 	bl	801da28 <GUI_ALLOC_h2p>
 8014e24:	6a04      	ldr	r4, [r0, #32]
 8014e26:	2c00      	cmp	r4, #0
 8014e28:	d1f1      	bne.n	8014e0e <_Findx0+0x82>
 8014e2a:	9800      	ldr	r0, [sp, #0]
 8014e2c:	e7dc      	b.n	8014de8 <_Findx0+0x5c>
 8014e2e:	4606      	mov	r6, r0
 8014e30:	e7e0      	b.n	8014df4 <_Findx0+0x68>
 8014e32:	bf00      	nop

08014e34 <_Findx1>:
 8014e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e36:	4604      	mov	r4, r0
 8014e38:	b085      	sub	sp, #20
 8014e3a:	460e      	mov	r6, r1
 8014e3c:	4617      	mov	r7, r2
 8014e3e:	b960      	cbnz	r0, 8014e5a <_Findx1+0x26>
 8014e40:	e026      	b.n	8014e90 <_Findx1+0x5c>
 8014e42:	07e3      	lsls	r3, r4, #31
 8014e44:	d42b      	bmi.n	8014e9e <_Findx1+0x6a>
 8014e46:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014e4a:	9800      	ldr	r0, [sp, #0]
 8014e4c:	3b01      	subs	r3, #1
 8014e4e:	80b3      	strh	r3, [r6, #4]
 8014e50:	6a04      	ldr	r4, [r0, #32]
 8014e52:	4668      	mov	r0, sp
 8014e54:	f008 fe04 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014e58:	b1d4      	cbz	r4, 8014e90 <_Findx1+0x5c>
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f008 fdee 	bl	801da3c <GUI_ALLOC_LockH>
 8014e60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e62:	9000      	str	r0, [sp, #0]
 8014e64:	07a2      	lsls	r2, r4, #30
 8014e66:	d5f3      	bpl.n	8014e50 <_Findx1+0x1c>
 8014e68:	b1a7      	cbz	r7, 8014e94 <_Findx1+0x60>
 8014e6a:	ad02      	add	r5, sp, #8
 8014e6c:	4601      	mov	r1, r0
 8014e6e:	463a      	mov	r2, r7
 8014e70:	4628      	mov	r0, r5
 8014e72:	f005 faa3 	bl	801a3bc <GUI__IntersectRects>
 8014e76:	4630      	mov	r0, r6
 8014e78:	4629      	mov	r1, r5
 8014e7a:	f007 fcaf 	bl	801c7dc <GUI_RectsIntersect>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d1df      	bne.n	8014e42 <_Findx1+0xe>
 8014e82:	9800      	ldr	r0, [sp, #0]
 8014e84:	6a04      	ldr	r4, [r0, #32]
 8014e86:	4668      	mov	r0, sp
 8014e88:	f008 fdea 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014e8c:	2c00      	cmp	r4, #0
 8014e8e:	d1e4      	bne.n	8014e5a <_Findx1+0x26>
 8014e90:	b005      	add	sp, #20
 8014e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e94:	c803      	ldmia	r0, {r0, r1}
 8014e96:	ad02      	add	r5, sp, #8
 8014e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8014e9c:	e7eb      	b.n	8014e76 <_Findx1+0x42>
 8014e9e:	9800      	ldr	r0, [sp, #0]
 8014ea0:	69c4      	ldr	r4, [r0, #28]
 8014ea2:	2c00      	cmp	r4, #0
 8014ea4:	d0d4      	beq.n	8014e50 <_Findx1+0x1c>
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	4631      	mov	r1, r6
 8014eaa:	462a      	mov	r2, r5
 8014eac:	f7ff ffc2 	bl	8014e34 <_Findx1>
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f008 fdb9 	bl	801da28 <GUI_ALLOC_h2p>
 8014eb6:	6a04      	ldr	r4, [r0, #32]
 8014eb8:	2c00      	cmp	r4, #0
 8014eba:	d1f4      	bne.n	8014ea6 <_Findx1+0x72>
 8014ebc:	9800      	ldr	r0, [sp, #0]
 8014ebe:	e7e1      	b.n	8014e84 <_Findx1+0x50>

08014ec0 <_Paint1Trans>:
 8014ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ec4:	4e29      	ldr	r6, [pc, #164]	; (8014f6c <_Paint1Trans+0xac>)
 8014ec6:	6833      	ldr	r3, [r6, #0]
 8014ec8:	b083      	sub	sp, #12
 8014eca:	4605      	mov	r5, r0
 8014ecc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014ece:	f008 fdb5 	bl	801da3c <GUI_ALLOC_LockH>
 8014ed2:	9000      	str	r0, [sp, #0]
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f008 fdb1 	bl	801da3c <GUI_ALLOC_LockH>
 8014eda:	4601      	mov	r1, r0
 8014edc:	9800      	ldr	r0, [sp, #0]
 8014ede:	9101      	str	r1, [sp, #4]
 8014ee0:	3008      	adds	r0, #8
 8014ee2:	f007 fc7b 	bl	801c7dc <GUI_RectsIntersect>
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	b948      	cbnz	r0, 8014efe <_Paint1Trans+0x3e>
 8014eea:	4668      	mov	r0, sp
 8014eec:	f008 fdb8 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ef0:	a801      	add	r0, sp, #4
 8014ef2:	f008 fdb5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	b003      	add	sp, #12
 8014efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014efe:	ac02      	add	r4, sp, #8
 8014f00:	9901      	ldr	r1, [sp, #4]
 8014f02:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 8014f06:	6833      	ldr	r3, [r6, #0]
 8014f08:	4f19      	ldr	r7, [pc, #100]	; (8014f70 <_Paint1Trans+0xb0>)
 8014f0a:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8014f0e:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8014f12:	3208      	adds	r2, #8
 8014f14:	f101 0008 	add.w	r0, r1, #8
 8014f18:	f005 fa50 	bl	801a3bc <GUI__IntersectRects>
 8014f1c:	4668      	mov	r0, sp
 8014f1e:	f008 fd9f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014f22:	a802      	add	r0, sp, #8
 8014f24:	6833      	ldr	r3, [r6, #0]
 8014f26:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8014f2a:	603d      	str	r5, [r7, #0]
 8014f2c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014f30:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014f34:	651a      	str	r2, [r3, #80]	; 0x50
 8014f36:	64d9      	str	r1, [r3, #76]	; 0x4c
 8014f38:	f008 fd92 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	f008 fd73 	bl	801da28 <GUI_ALLOC_h2p>
 8014f42:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014f44:	4a0b      	ldr	r2, [pc, #44]	; (8014f74 <_Paint1Trans+0xb4>)
 8014f46:	4b0c      	ldr	r3, [pc, #48]	; (8014f78 <_Paint1Trans+0xb8>)
 8014f48:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8014f4c:	bf08      	it	eq
 8014f4e:	4613      	moveq	r3, r2
 8014f50:	4628      	mov	r0, r5
 8014f52:	4798      	blx	r3
 8014f54:	2401      	movs	r4, #1
 8014f56:	6833      	ldr	r3, [r6, #0]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 8014f60:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8014f64:	603a      	str	r2, [r7, #0]
 8014f66:	b003      	add	sp, #12
 8014f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f6c:	2000027c 	.word	0x2000027c
 8014f70:	2002cafc 	.word	0x2002cafc
 8014f74:	08016a99 	.word	0x08016a99
 8014f78:	08017121 	.word	0x08017121

08014f7c <_PaintTransChildren>:
 8014f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f80:	b082      	sub	sp, #8
 8014f82:	4606      	mov	r6, r0
 8014f84:	f008 fd5a 	bl	801da3c <GUI_ALLOC_LockH>
 8014f88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f8a:	9001      	str	r0, [sp, #4]
 8014f8c:	079b      	lsls	r3, r3, #30
 8014f8e:	d524      	bpl.n	8014fda <_PaintTransChildren+0x5e>
 8014f90:	69c4      	ldr	r4, [r0, #28]
 8014f92:	ad01      	add	r5, sp, #4
 8014f94:	b92c      	cbnz	r4, 8014fa2 <_PaintTransChildren+0x26>
 8014f96:	e020      	b.n	8014fda <_PaintTransChildren+0x5e>
 8014f98:	6a1c      	ldr	r4, [r3, #32]
 8014f9a:	4668      	mov	r0, sp
 8014f9c:	f008 fd60 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014fa0:	b1ac      	cbz	r4, 8014fce <_PaintTransChildren+0x52>
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	f008 fd4a 	bl	801da3c <GUI_ALLOC_LockH>
 8014fa8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014faa:	9000      	str	r0, [sp, #0]
 8014fac:	f002 0203 	and.w	r2, r2, #3
 8014fb0:	2a03      	cmp	r2, #3
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	d1f0      	bne.n	8014f98 <_PaintTransChildren+0x1c>
 8014fb6:	9901      	ldr	r1, [sp, #4]
 8014fb8:	3108      	adds	r1, #8
 8014fba:	f007 fc0f 	bl	801c7dc <GUI_RectsIntersect>
 8014fbe:	b998      	cbnz	r0, 8014fe8 <_PaintTransChildren+0x6c>
 8014fc0:	9b00      	ldr	r3, [sp, #0]
 8014fc2:	6a1c      	ldr	r4, [r3, #32]
 8014fc4:	4668      	mov	r0, sp
 8014fc6:	f008 fd4b 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014fca:	2c00      	cmp	r4, #0
 8014fcc:	d1e9      	bne.n	8014fa2 <_PaintTransChildren+0x26>
 8014fce:	4628      	mov	r0, r5
 8014fd0:	f008 fd46 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014fd4:	b002      	add	sp, #8
 8014fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fda:	ad01      	add	r5, sp, #4
 8014fdc:	4628      	mov	r0, r5
 8014fde:	f008 fd3f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014fe2:	b002      	add	sp, #8
 8014fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fe8:	9b01      	ldr	r3, [sp, #4]
 8014fea:	4628      	mov	r0, r5
 8014fec:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8014ff0:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8014ff4:	899f      	ldrh	r7, [r3, #12]
 8014ff6:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8014ffa:	f008 fd31 	bl	801da60 <GUI_ALLOC_UnlockH>
 8014ffe:	4668      	mov	r0, sp
 8015000:	f008 fd2e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015004:	4620      	mov	r0, r4
 8015006:	f7ff ff5b 	bl	8014ec0 <_Paint1Trans>
 801500a:	b988      	cbnz	r0, 8015030 <_PaintTransChildren+0xb4>
 801500c:	4630      	mov	r0, r6
 801500e:	f008 fd15 	bl	801da3c <GUI_ALLOC_LockH>
 8015012:	9001      	str	r0, [sp, #4]
 8015014:	4620      	mov	r0, r4
 8015016:	f008 fd11 	bl	801da3c <GUI_ALLOC_LockH>
 801501a:	9a01      	ldr	r2, [sp, #4]
 801501c:	9000      	str	r0, [sp, #0]
 801501e:	4603      	mov	r3, r0
 8015020:	f8a2 9008 	strh.w	r9, [r2, #8]
 8015024:	f8a2 800a 	strh.w	r8, [r2, #10]
 8015028:	8197      	strh	r7, [r2, #12]
 801502a:	f8a2 a00e 	strh.w	sl, [r2, #14]
 801502e:	e7b3      	b.n	8014f98 <_PaintTransChildren+0x1c>
 8015030:	4620      	mov	r0, r4
 8015032:	f008 fcf9 	bl	801da28 <GUI_ALLOC_h2p>
 8015036:	9000      	str	r0, [sp, #0]
 8015038:	4620      	mov	r0, r4
 801503a:	f7ff ff9f 	bl	8014f7c <_PaintTransChildren>
 801503e:	4620      	mov	r0, r4
 8015040:	f008 fcf2 	bl	801da28 <GUI_ALLOC_h2p>
 8015044:	9000      	str	r0, [sp, #0]
 8015046:	4630      	mov	r0, r6
 8015048:	f008 fcee 	bl	801da28 <GUI_ALLOC_h2p>
 801504c:	9001      	str	r0, [sp, #4]
 801504e:	e7dd      	b.n	801500c <_PaintTransChildren+0x90>

08015050 <_Findx0.constprop.9>:
 8015050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015052:	4604      	mov	r4, r0
 8015054:	b085      	sub	sp, #20
 8015056:	460f      	mov	r7, r1
 8015058:	2800      	cmp	r0, #0
 801505a:	d036      	beq.n	80150ca <_Findx0.constprop.9+0x7a>
 801505c:	2500      	movs	r5, #0
 801505e:	ae02      	add	r6, sp, #8
 8015060:	4620      	mov	r0, r4
 8015062:	f008 fceb 	bl	801da3c <GUI_ALLOC_LockH>
 8015066:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015068:	9000      	str	r0, [sp, #0]
 801506a:	07a2      	lsls	r2, r4, #30
 801506c:	d508      	bpl.n	8015080 <_Findx0.constprop.9+0x30>
 801506e:	c803      	ldmia	r0, {r0, r1}
 8015070:	e886 0003 	stmia.w	r6, {r0, r1}
 8015074:	4638      	mov	r0, r7
 8015076:	4631      	mov	r1, r6
 8015078:	f007 fbb0 	bl	801c7dc <GUI_RectsIntersect>
 801507c:	b948      	cbnz	r0, 8015092 <_Findx0.constprop.9+0x42>
 801507e:	9800      	ldr	r0, [sp, #0]
 8015080:	6a04      	ldr	r4, [r0, #32]
 8015082:	4668      	mov	r0, sp
 8015084:	f008 fcec 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015088:	2c00      	cmp	r4, #0
 801508a:	d1e9      	bne.n	8015060 <_Findx0.constprop.9+0x10>
 801508c:	4628      	mov	r0, r5
 801508e:	b005      	add	sp, #20
 8015090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015092:	07e3      	lsls	r3, r4, #31
 8015094:	d406      	bmi.n	80150a4 <_Findx0.constprop.9+0x54>
 8015096:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801509a:	9800      	ldr	r0, [sp, #0]
 801509c:	3301      	adds	r3, #1
 801509e:	803b      	strh	r3, [r7, #0]
 80150a0:	2501      	movs	r5, #1
 80150a2:	e7ed      	b.n	8015080 <_Findx0.constprop.9+0x30>
 80150a4:	9800      	ldr	r0, [sp, #0]
 80150a6:	69c4      	ldr	r4, [r0, #28]
 80150a8:	2c00      	cmp	r4, #0
 80150aa:	d0e9      	beq.n	8015080 <_Findx0.constprop.9+0x30>
 80150ac:	4620      	mov	r0, r4
 80150ae:	4639      	mov	r1, r7
 80150b0:	4632      	mov	r2, r6
 80150b2:	f7ff fe6b 	bl	8014d8c <_Findx0>
 80150b6:	2800      	cmp	r0, #0
 80150b8:	4620      	mov	r0, r4
 80150ba:	bf18      	it	ne
 80150bc:	2501      	movne	r5, #1
 80150be:	f008 fcb3 	bl	801da28 <GUI_ALLOC_h2p>
 80150c2:	6a04      	ldr	r4, [r0, #32]
 80150c4:	2c00      	cmp	r4, #0
 80150c6:	d1f1      	bne.n	80150ac <_Findx0.constprop.9+0x5c>
 80150c8:	e7d9      	b.n	801507e <_Findx0.constprop.9+0x2e>
 80150ca:	4605      	mov	r5, r0
 80150cc:	e7de      	b.n	801508c <_Findx0.constprop.9+0x3c>
 80150ce:	bf00      	nop

080150d0 <_Findy1.constprop.10>:
 80150d0:	b570      	push	{r4, r5, r6, lr}
 80150d2:	4604      	mov	r4, r0
 80150d4:	b084      	sub	sp, #16
 80150d6:	460e      	mov	r6, r1
 80150d8:	b1b0      	cbz	r0, 8015108 <_Findy1.constprop.10+0x38>
 80150da:	ad02      	add	r5, sp, #8
 80150dc:	4620      	mov	r0, r4
 80150de:	f008 fcad 	bl	801da3c <GUI_ALLOC_LockH>
 80150e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80150e4:	9001      	str	r0, [sp, #4]
 80150e6:	07a2      	lsls	r2, r4, #30
 80150e8:	d508      	bpl.n	80150fc <_Findy1.constprop.10+0x2c>
 80150ea:	c803      	ldmia	r0, {r0, r1}
 80150ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80150f0:	4630      	mov	r0, r6
 80150f2:	4629      	mov	r1, r5
 80150f4:	f007 fb72 	bl	801c7dc <GUI_RectsIntersect>
 80150f8:	b940      	cbnz	r0, 801510c <_Findy1.constprop.10+0x3c>
 80150fa:	9801      	ldr	r0, [sp, #4]
 80150fc:	6a04      	ldr	r4, [r0, #32]
 80150fe:	a801      	add	r0, sp, #4
 8015100:	f008 fcae 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015104:	2c00      	cmp	r4, #0
 8015106:	d1e9      	bne.n	80150dc <_Findy1.constprop.10+0xc>
 8015108:	b004      	add	sp, #16
 801510a:	bd70      	pop	{r4, r5, r6, pc}
 801510c:	07e3      	lsls	r3, r4, #31
 801510e:	9801      	ldr	r0, [sp, #4]
 8015110:	d418      	bmi.n	8015144 <_Findy1.constprop.10+0x74>
 8015112:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8015116:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801511a:	429a      	cmp	r2, r3
 801511c:	dd09      	ble.n	8015132 <_Findy1.constprop.10+0x62>
 801511e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015122:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8015126:	b21a      	sxth	r2, r3
 8015128:	4291      	cmp	r1, r2
 801512a:	dbe7      	blt.n	80150fc <_Findy1.constprop.10+0x2c>
 801512c:	3b01      	subs	r3, #1
 801512e:	80f3      	strh	r3, [r6, #6]
 8015130:	e7e4      	b.n	80150fc <_Findy1.constprop.10+0x2c>
 8015132:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015136:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801513a:	b21a      	sxth	r2, r3
 801513c:	4291      	cmp	r1, r2
 801513e:	dddd      	ble.n	80150fc <_Findy1.constprop.10+0x2c>
 8015140:	80f3      	strh	r3, [r6, #6]
 8015142:	e7db      	b.n	80150fc <_Findy1.constprop.10+0x2c>
 8015144:	69c4      	ldr	r4, [r0, #28]
 8015146:	2c00      	cmp	r4, #0
 8015148:	d0d8      	beq.n	80150fc <_Findy1.constprop.10+0x2c>
 801514a:	4620      	mov	r0, r4
 801514c:	4631      	mov	r1, r6
 801514e:	462a      	mov	r2, r5
 8015150:	f7ff fdb2 	bl	8014cb8 <_Findy1>
 8015154:	4620      	mov	r0, r4
 8015156:	f008 fc67 	bl	801da28 <GUI_ALLOC_h2p>
 801515a:	6a04      	ldr	r4, [r0, #32]
 801515c:	2c00      	cmp	r4, #0
 801515e:	d1f4      	bne.n	801514a <_Findy1.constprop.10+0x7a>
 8015160:	e7cb      	b.n	80150fa <_Findy1.constprop.10+0x2a>
 8015162:	bf00      	nop

08015164 <WM__PaintWinAndOverlays>:
 8015164:	b530      	push	{r4, r5, lr}
 8015166:	b083      	sub	sp, #12
 8015168:	4604      	mov	r4, r0
 801516a:	f008 fc67 	bl	801da3c <GUI_ALLOC_LockH>
 801516e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8015170:	9001      	str	r0, [sp, #4]
 8015172:	f640 0301 	movw	r3, #2049	; 0x801
 8015176:	400b      	ands	r3, r1
 8015178:	2b01      	cmp	r3, #1
 801517a:	d00e      	beq.n	801519a <WM__PaintWinAndOverlays+0x36>
 801517c:	a801      	add	r0, sp, #4
 801517e:	f008 fc6f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015182:	4620      	mov	r0, r4
 8015184:	f008 fc50 	bl	801da28 <GUI_ALLOC_h2p>
 8015188:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801518a:	4a1b      	ldr	r2, [pc, #108]	; (80151f8 <WM__PaintWinAndOverlays+0x94>)
 801518c:	4b1b      	ldr	r3, [pc, #108]	; (80151fc <WM__PaintWinAndOverlays+0x98>)
 801518e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8015192:	bf08      	it	eq
 8015194:	4613      	moveq	r3, r2
 8015196:	4620      	mov	r0, r4
 8015198:	4798      	blx	r3
 801519a:	4b19      	ldr	r3, [pc, #100]	; (8015200 <WM__PaintWinAndOverlays+0x9c>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	b90b      	cbnz	r3, 80151a4 <WM__PaintWinAndOverlays+0x40>
 80151a0:	b003      	add	sp, #12
 80151a2:	bd30      	pop	{r4, r5, pc}
 80151a4:	4620      	mov	r0, r4
 80151a6:	f7ff fee9 	bl	8014f7c <_PaintTransChildren>
 80151aa:	4620      	mov	r0, r4
 80151ac:	f008 fc3c 	bl	801da28 <GUI_ALLOC_h2p>
 80151b0:	6985      	ldr	r5, [r0, #24]
 80151b2:	6a04      	ldr	r4, [r0, #32]
 80151b4:	2d00      	cmp	r5, #0
 80151b6:	d0f3      	beq.n	80151a0 <WM__PaintWinAndOverlays+0x3c>
 80151b8:	b184      	cbz	r4, 80151dc <WM__PaintWinAndOverlays+0x78>
 80151ba:	4620      	mov	r0, r4
 80151bc:	f008 fc34 	bl	801da28 <GUI_ALLOC_h2p>
 80151c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80151c2:	f003 0303 	and.w	r3, r3, #3
 80151c6:	2b03      	cmp	r3, #3
 80151c8:	d011      	beq.n	80151ee <WM__PaintWinAndOverlays+0x8a>
 80151ca:	4620      	mov	r0, r4
 80151cc:	f7ff fed6 	bl	8014f7c <_PaintTransChildren>
 80151d0:	4620      	mov	r0, r4
 80151d2:	f008 fc29 	bl	801da28 <GUI_ALLOC_h2p>
 80151d6:	6a04      	ldr	r4, [r0, #32]
 80151d8:	2c00      	cmp	r4, #0
 80151da:	d1ee      	bne.n	80151ba <WM__PaintWinAndOverlays+0x56>
 80151dc:	4628      	mov	r0, r5
 80151de:	f008 fc23 	bl	801da28 <GUI_ALLOC_h2p>
 80151e2:	6985      	ldr	r5, [r0, #24]
 80151e4:	6a04      	ldr	r4, [r0, #32]
 80151e6:	2d00      	cmp	r5, #0
 80151e8:	d1e6      	bne.n	80151b8 <WM__PaintWinAndOverlays+0x54>
 80151ea:	b003      	add	sp, #12
 80151ec:	bd30      	pop	{r4, r5, pc}
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7ff fe66 	bl	8014ec0 <_Paint1Trans>
 80151f4:	e7e9      	b.n	80151ca <WM__PaintWinAndOverlays+0x66>
 80151f6:	bf00      	nop
 80151f8:	08016a99 	.word	0x08016a99
 80151fc:	08017121 	.word	0x08017121
 8015200:	2002cb50 	.word	0x2002cb50

08015204 <_cbPaintMemDev>:
 8015204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015208:	4d18      	ldr	r5, [pc, #96]	; (801526c <_cbPaintMemDev+0x68>)
 801520a:	682b      	ldr	r3, [r5, #0]
 801520c:	b082      	sub	sp, #8
 801520e:	4681      	mov	r9, r0
 8015210:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8015212:	f008 fc13 	bl	801da3c <GUI_ALLOC_LockH>
 8015216:	682a      	ldr	r2, [r5, #0]
 8015218:	ac02      	add	r4, sp, #8
 801521a:	3208      	adds	r2, #8
 801521c:	4603      	mov	r3, r0
 801521e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8015222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015226:	f103 0208 	add.w	r2, r3, #8
 801522a:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 801522e:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8015232:	899f      	ldrh	r7, [r3, #12]
 8015234:	89de      	ldrh	r6, [r3, #14]
 8015236:	e882 0003 	stmia.w	r2, {r0, r1}
 801523a:	4620      	mov	r0, r4
 801523c:	f008 fc10 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015240:	f8d9 0000 	ldr.w	r0, [r9]
 8015244:	f7ff ff8e 	bl	8015164 <WM__PaintWinAndOverlays>
 8015248:	682b      	ldr	r3, [r5, #0]
 801524a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801524c:	f008 fbf6 	bl	801da3c <GUI_ALLOC_LockH>
 8015250:	4603      	mov	r3, r0
 8015252:	4620      	mov	r0, r4
 8015254:	f8a3 a008 	strh.w	sl, [r3, #8]
 8015258:	f8a3 800a 	strh.w	r8, [r3, #10]
 801525c:	819f      	strh	r7, [r3, #12]
 801525e:	81de      	strh	r6, [r3, #14]
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	f008 fbfd 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015266:	b002      	add	sp, #8
 8015268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526c:	2000027c 	.word	0x2000027c

08015270 <_Invalidate1Abs>:
 8015270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015272:	b085      	sub	sp, #20
 8015274:	4616      	mov	r6, r2
 8015276:	460c      	mov	r4, r1
 8015278:	4605      	mov	r5, r0
 801527a:	f008 fbd5 	bl	801da28 <GUI_ALLOC_h2p>
 801527e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015280:	9001      	str	r0, [sp, #4]
 8015282:	079a      	lsls	r2, r3, #30
 8015284:	d555      	bpl.n	8015332 <_Invalidate1Abs+0xc2>
 8015286:	f9b4 1000 	ldrsh.w	r1, [r4]
 801528a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801528e:	4291      	cmp	r1, r2
 8015290:	dc4f      	bgt.n	8015332 <_Invalidate1Abs+0xc2>
 8015292:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015296:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801529a:	4291      	cmp	r1, r2
 801529c:	dc49      	bgt.n	8015332 <_Invalidate1Abs+0xc2>
 801529e:	f640 0201 	movw	r2, #2049	; 0x801
 80152a2:	401a      	ands	r2, r3
 80152a4:	2a01      	cmp	r2, #1
 80152a6:	d044      	beq.n	8015332 <_Invalidate1Abs+0xc2>
 80152a8:	4628      	mov	r0, r5
 80152aa:	f008 fbc7 	bl	801da3c <GUI_ALLOC_LockH>
 80152ae:	af02      	add	r7, sp, #8
 80152b0:	4603      	mov	r3, r0
 80152b2:	4602      	mov	r2, r0
 80152b4:	4621      	mov	r1, r4
 80152b6:	4638      	mov	r0, r7
 80152b8:	9301      	str	r3, [sp, #4]
 80152ba:	f005 f87f 	bl	801a3bc <GUI__IntersectRects>
 80152be:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80152c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	dc30      	bgt.n	801532c <_Invalidate1Abs+0xbc>
 80152ca:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80152ce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	dc2a      	bgt.n	801532c <_Invalidate1Abs+0xbc>
 80152d6:	9a01      	ldr	r2, [sp, #4]
 80152d8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80152da:	f244 0320 	movw	r3, #16416	; 0x4020
 80152de:	4023      	ands	r3, r4
 80152e0:	bb4b      	cbnz	r3, 8015336 <_Invalidate1Abs+0xc6>
 80152e2:	4b19      	ldr	r3, [pc, #100]	; (8015348 <_Invalidate1Abs+0xd8>)
 80152e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80152e8:	f8b3 e000 	ldrh.w	lr, [r3]
 80152ec:	4334      	orrs	r4, r6
 80152ee:	f102 0708 	add.w	r7, r2, #8
 80152f2:	f10e 0601 	add.w	r6, lr, #1
 80152f6:	e887 0003 	stmia.w	r7, {r0, r1}
 80152fa:	801e      	strh	r6, [r3, #0]
 80152fc:	6294      	str	r4, [r2, #40]	; 0x28
 80152fe:	e000      	b.n	8015302 <_Invalidate1Abs+0x92>
 8015300:	461d      	mov	r5, r3
 8015302:	4628      	mov	r0, r5
 8015304:	f008 fb90 	bl	801da28 <GUI_ALLOC_h2p>
 8015308:	6983      	ldr	r3, [r0, #24]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d1f8      	bne.n	8015300 <_Invalidate1Abs+0x90>
 801530e:	4b0f      	ldr	r3, [pc, #60]	; (801534c <_Invalidate1Abs+0xdc>)
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	4295      	cmp	r5, r2
 8015314:	d016      	beq.n	8015344 <_Invalidate1Abs+0xd4>
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	429d      	cmp	r5, r3
 801531a:	bf0c      	ite	eq
 801531c:	2302      	moveq	r3, #2
 801531e:	2300      	movne	r3, #0
 8015320:	4a0b      	ldr	r2, [pc, #44]	; (8015350 <_Invalidate1Abs+0xe0>)
 8015322:	6811      	ldr	r1, [r2, #0]
 8015324:	430b      	orrs	r3, r1
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	f005 fcfe 	bl	801ad28 <GUI_SignalEvent>
 801532c:	a801      	add	r0, sp, #4
 801532e:	f008 fb97 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015332:	b005      	add	sp, #20
 8015334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015336:	f102 0008 	add.w	r0, r2, #8
 801533a:	4601      	mov	r1, r0
 801533c:	463a      	mov	r2, r7
 801533e:	f007 f9d1 	bl	801c6e4 <GUI_MergeRect>
 8015342:	e7f3      	b.n	801532c <_Invalidate1Abs+0xbc>
 8015344:	2301      	movs	r3, #1
 8015346:	e7eb      	b.n	8015320 <_Invalidate1Abs+0xb0>
 8015348:	2002cb18 	.word	0x2002cb18
 801534c:	2002cb00 	.word	0x2002cb00
 8015350:	2002cb28 	.word	0x2002cb28

08015354 <WM__ActivateClipRect>:
 8015354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015358:	4f43      	ldr	r7, [pc, #268]	; (8015468 <WM__ActivateClipRect+0x114>)
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8015360:	b086      	sub	sp, #24
 8015362:	2a00      	cmp	r2, #0
 8015364:	d139      	bne.n	80153da <WM__ActivateClipRect+0x86>
 8015366:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8015368:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801546c <WM__ActivateClipRect+0x118>
 801536c:	f008 fb66 	bl	801da3c <GUI_ALLOC_LockH>
 8015370:	4603      	mov	r3, r0
 8015372:	c803      	ldmia	r0, {r0, r1}
 8015374:	ae02      	add	r6, sp, #8
 8015376:	e886 0003 	stmia.w	r6, {r0, r1}
 801537a:	4668      	mov	r0, sp
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	f008 fb6f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015382:	f8d8 4000 	ldr.w	r4, [r8]
 8015386:	2c00      	cmp	r4, #0
 8015388:	d14e      	bne.n	8015428 <WM__ActivateClipRect+0xd4>
 801538a:	683c      	ldr	r4, [r7, #0]
 801538c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801538e:	2b00      	cmp	r3, #0
 8015390:	d061      	beq.n	8015456 <WM__ActivateClipRect+0x102>
 8015392:	6818      	ldr	r0, [r3, #0]
 8015394:	6859      	ldr	r1, [r3, #4]
 8015396:	f8d8 2000 	ldr.w	r2, [r8]
 801539a:	ad04      	add	r5, sp, #16
 801539c:	462b      	mov	r3, r5
 801539e:	c303      	stmia	r3!, {r0, r1}
 80153a0:	b1ca      	cbz	r2, 80153d6 <WM__ActivateClipRect+0x82>
 80153a2:	4610      	mov	r0, r2
 80153a4:	f008 fb4a 	bl	801da3c <GUI_ALLOC_LockH>
 80153a8:	ac06      	add	r4, sp, #24
 80153aa:	f9b0 1000 	ldrsh.w	r1, [r0]
 80153ae:	f844 0d14 	str.w	r0, [r4, #-20]!
 80153b2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80153b6:	4628      	mov	r0, r5
 80153b8:	f007 f9c6 	bl	801c748 <GUI_MoveRect>
 80153bc:	4620      	mov	r0, r4
 80153be:	f008 fb4f 	bl	801da60 <GUI_ALLOC_UnlockH>
 80153c2:	4628      	mov	r0, r5
 80153c4:	4631      	mov	r1, r6
 80153c6:	f004 ffd9 	bl	801a37c <GUI__IntersectRect>
 80153ca:	4628      	mov	r0, r5
 80153cc:	f004 f86e 	bl	80194ac <LCD_SetClipRectEx>
 80153d0:	b006      	add	sp, #24
 80153d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80153d8:	e7e3      	b.n	80153a2 <WM__ActivateClipRect+0x4e>
 80153da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80153dc:	2a00      	cmp	r2, #0
 80153de:	d03e      	beq.n	801545e <WM__ActivateClipRect+0x10a>
 80153e0:	4c22      	ldr	r4, [pc, #136]	; (801546c <WM__ActivateClipRect+0x118>)
 80153e2:	6810      	ldr	r0, [r2, #0]
 80153e4:	6851      	ldr	r1, [r2, #4]
 80153e6:	6824      	ldr	r4, [r4, #0]
 80153e8:	ad04      	add	r5, sp, #16
 80153ea:	462a      	mov	r2, r5
 80153ec:	c203      	stmia	r2!, {r0, r1}
 80153ee:	b1cc      	cbz	r4, 8015424 <WM__ActivateClipRect+0xd0>
 80153f0:	4620      	mov	r0, r4
 80153f2:	f008 fb23 	bl	801da3c <GUI_ALLOC_LockH>
 80153f6:	ac06      	add	r4, sp, #24
 80153f8:	f9b0 1000 	ldrsh.w	r1, [r0]
 80153fc:	f844 0d10 	str.w	r0, [r4, #-16]!
 8015400:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015404:	4628      	mov	r0, r5
 8015406:	f007 f99f 	bl	801c748 <GUI_MoveRect>
 801540a:	4620      	mov	r0, r4
 801540c:	f008 fb28 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015410:	4628      	mov	r0, r5
 8015412:	4917      	ldr	r1, [pc, #92]	; (8015470 <WM__ActivateClipRect+0x11c>)
 8015414:	f004 ffb2 	bl	801a37c <GUI__IntersectRect>
 8015418:	4628      	mov	r0, r5
 801541a:	f004 f847 	bl	80194ac <LCD_SetClipRectEx>
 801541e:	b006      	add	sp, #24
 8015420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015424:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8015426:	e7e3      	b.n	80153f0 <WM__ActivateClipRect+0x9c>
 8015428:	ad04      	add	r5, sp, #16
 801542a:	e007      	b.n	801543c <WM__ActivateClipRect+0xe8>
 801542c:	f004 ffa6 	bl	801a37c <GUI__IntersectRect>
 8015430:	9b04      	ldr	r3, [sp, #16]
 8015432:	699c      	ldr	r4, [r3, #24]
 8015434:	4628      	mov	r0, r5
 8015436:	b154      	cbz	r4, 801544e <WM__ActivateClipRect+0xfa>
 8015438:	f008 fb12 	bl	801da60 <GUI_ALLOC_UnlockH>
 801543c:	4620      	mov	r0, r4
 801543e:	f008 fafd 	bl	801da3c <GUI_ALLOC_LockH>
 8015442:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8015444:	9004      	str	r0, [sp, #16]
 8015446:	0793      	lsls	r3, r2, #30
 8015448:	4601      	mov	r1, r0
 801544a:	4630      	mov	r0, r6
 801544c:	d4ee      	bmi.n	801542c <WM__ActivateClipRect+0xd8>
 801544e:	4628      	mov	r0, r5
 8015450:	f008 fb06 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015454:	e799      	b.n	801538a <WM__ActivateClipRect+0x36>
 8015456:	4630      	mov	r0, r6
 8015458:	f004 f828 	bl	80194ac <LCD_SetClipRectEx>
 801545c:	e7b8      	b.n	80153d0 <WM__ActivateClipRect+0x7c>
 801545e:	4804      	ldr	r0, [pc, #16]	; (8015470 <WM__ActivateClipRect+0x11c>)
 8015460:	f004 f824 	bl	80194ac <LCD_SetClipRectEx>
 8015464:	e7b4      	b.n	80153d0 <WM__ActivateClipRect+0x7c>
 8015466:	bf00      	nop
 8015468:	2000027c 	.word	0x2000027c
 801546c:	2002cafc 	.word	0x2002cafc
 8015470:	2002b184 	.word	0x2002b184

08015474 <WM__InsertWindowIntoList>:
 8015474:	b570      	push	{r4, r5, r6, lr}
 8015476:	460c      	mov	r4, r1
 8015478:	b084      	sub	sp, #16
 801547a:	4605      	mov	r5, r0
 801547c:	b909      	cbnz	r1, 8015482 <WM__InsertWindowIntoList+0xe>
 801547e:	b004      	add	sp, #16
 8015480:	bd70      	pop	{r4, r5, r6, pc}
 8015482:	f008 fadb 	bl	801da3c <GUI_ALLOC_LockH>
 8015486:	4603      	mov	r3, r0
 8015488:	2200      	movs	r2, #0
 801548a:	6184      	str	r4, [r0, #24]
 801548c:	4620      	mov	r0, r4
 801548e:	621a      	str	r2, [r3, #32]
 8015490:	9301      	str	r3, [sp, #4]
 8015492:	f008 fad3 	bl	801da3c <GUI_ALLOC_LockH>
 8015496:	9b01      	ldr	r3, [sp, #4]
 8015498:	69c4      	ldr	r4, [r0, #28]
 801549a:	9002      	str	r0, [sp, #8]
 801549c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801549e:	2c00      	cmp	r4, #0
 80154a0:	d029      	beq.n	80154f6 <WM__InsertWindowIntoList+0x82>
 80154a2:	4620      	mov	r0, r4
 80154a4:	f008 faca 	bl	801da3c <GUI_ALLOC_LockH>
 80154a8:	0731      	lsls	r1, r6, #28
 80154aa:	9003      	str	r0, [sp, #12]
 80154ac:	d43a      	bmi.n	8015524 <WM__InsertWindowIntoList+0xb0>
 80154ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80154b0:	071a      	lsls	r2, r3, #28
 80154b2:	d429      	bmi.n	8015508 <WM__InsertWindowIntoList+0x94>
 80154b4:	a802      	add	r0, sp, #8
 80154b6:	f008 fad3 	bl	801da60 <GUI_ALLOC_UnlockH>
 80154ba:	a803      	add	r0, sp, #12
 80154bc:	f008 fad0 	bl	801da60 <GUI_ALLOC_UnlockH>
 80154c0:	4620      	mov	r0, r4
 80154c2:	f008 fab1 	bl	801da28 <GUI_ALLOC_h2p>
 80154c6:	6a04      	ldr	r4, [r0, #32]
 80154c8:	9003      	str	r0, [sp, #12]
 80154ca:	b92c      	cbnz	r4, 80154d8 <WM__InsertWindowIntoList+0x64>
 80154cc:	6205      	str	r5, [r0, #32]
 80154ce:	e00d      	b.n	80154ec <WM__InsertWindowIntoList+0x78>
 80154d0:	6a04      	ldr	r4, [r0, #32]
 80154d2:	9003      	str	r0, [sp, #12]
 80154d4:	2c00      	cmp	r4, #0
 80154d6:	d0f9      	beq.n	80154cc <WM__InsertWindowIntoList+0x58>
 80154d8:	4620      	mov	r0, r4
 80154da:	f008 faa5 	bl	801da28 <GUI_ALLOC_h2p>
 80154de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80154e0:	071b      	lsls	r3, r3, #28
 80154e2:	d5f5      	bpl.n	80154d0 <WM__InsertWindowIntoList+0x5c>
 80154e4:	9a03      	ldr	r2, [sp, #12]
 80154e6:	9b01      	ldr	r3, [sp, #4]
 80154e8:	6215      	str	r5, [r2, #32]
 80154ea:	621c      	str	r4, [r3, #32]
 80154ec:	a801      	add	r0, sp, #4
 80154ee:	f008 fab7 	bl	801da60 <GUI_ALLOC_UnlockH>
 80154f2:	b004      	add	sp, #16
 80154f4:	bd70      	pop	{r4, r5, r6, pc}
 80154f6:	61c5      	str	r5, [r0, #28]
 80154f8:	a801      	add	r0, sp, #4
 80154fa:	f008 fab1 	bl	801da60 <GUI_ALLOC_UnlockH>
 80154fe:	a802      	add	r0, sp, #8
 8015500:	f008 faae 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015504:	b004      	add	sp, #16
 8015506:	bd70      	pop	{r4, r5, r6, pc}
 8015508:	9a01      	ldr	r2, [sp, #4]
 801550a:	9b02      	ldr	r3, [sp, #8]
 801550c:	6214      	str	r4, [r2, #32]
 801550e:	a801      	add	r0, sp, #4
 8015510:	61dd      	str	r5, [r3, #28]
 8015512:	f008 faa5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015516:	a802      	add	r0, sp, #8
 8015518:	f008 faa2 	bl	801da60 <GUI_ALLOC_UnlockH>
 801551c:	a803      	add	r0, sp, #12
 801551e:	f008 fa9f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015522:	e7ac      	b.n	801547e <WM__InsertWindowIntoList+0xa>
 8015524:	a802      	add	r0, sp, #8
 8015526:	f008 fa9b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801552a:	a803      	add	r0, sp, #12
 801552c:	f008 fa98 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015530:	4620      	mov	r0, r4
 8015532:	f008 fa79 	bl	801da28 <GUI_ALLOC_h2p>
 8015536:	6a03      	ldr	r3, [r0, #32]
 8015538:	9003      	str	r0, [sp, #12]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d0c6      	beq.n	80154cc <WM__InsertWindowIntoList+0x58>
 801553e:	4618      	mov	r0, r3
 8015540:	f008 fa72 	bl	801da28 <GUI_ALLOC_h2p>
 8015544:	6a03      	ldr	r3, [r0, #32]
 8015546:	9003      	str	r0, [sp, #12]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d1f8      	bne.n	801553e <WM__InsertWindowIntoList+0xca>
 801554c:	e7be      	b.n	80154cc <WM__InsertWindowIntoList+0x58>
 801554e:	bf00      	nop

08015550 <WM__RemoveWindowFromList>:
 8015550:	b570      	push	{r4, r5, r6, lr}
 8015552:	4604      	mov	r4, r0
 8015554:	f008 fa68 	bl	801da28 <GUI_ALLOC_h2p>
 8015558:	4605      	mov	r5, r0
 801555a:	6980      	ldr	r0, [r0, #24]
 801555c:	b900      	cbnz	r0, 8015560 <WM__RemoveWindowFromList+0x10>
 801555e:	bd70      	pop	{r4, r5, r6, pc}
 8015560:	f008 fa62 	bl	801da28 <GUI_ALLOC_h2p>
 8015564:	69c3      	ldr	r3, [r0, #28]
 8015566:	42a3      	cmp	r3, r4
 8015568:	4606      	mov	r6, r0
 801556a:	d00c      	beq.n	8015586 <WM__RemoveWindowFromList+0x36>
 801556c:	b913      	cbnz	r3, 8015574 <WM__RemoveWindowFromList+0x24>
 801556e:	e010      	b.n	8015592 <WM__RemoveWindowFromList+0x42>
 8015570:	2b00      	cmp	r3, #0
 8015572:	d0f4      	beq.n	801555e <WM__RemoveWindowFromList+0xe>
 8015574:	4618      	mov	r0, r3
 8015576:	f008 fa57 	bl	801da28 <GUI_ALLOC_h2p>
 801557a:	6a03      	ldr	r3, [r0, #32]
 801557c:	42a3      	cmp	r3, r4
 801557e:	d1f7      	bne.n	8015570 <WM__RemoveWindowFromList+0x20>
 8015580:	6a2b      	ldr	r3, [r5, #32]
 8015582:	6203      	str	r3, [r0, #32]
 8015584:	bd70      	pop	{r4, r5, r6, pc}
 8015586:	4618      	mov	r0, r3
 8015588:	f008 fa4e 	bl	801da28 <GUI_ALLOC_h2p>
 801558c:	6a03      	ldr	r3, [r0, #32]
 801558e:	61f3      	str	r3, [r6, #28]
 8015590:	bd70      	pop	{r4, r5, r6, pc}
 8015592:	bd70      	pop	{r4, r5, r6, pc}

08015594 <WM__IsWindow>:
 8015594:	4b09      	ldr	r3, [pc, #36]	; (80155bc <WM__IsWindow+0x28>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	b510      	push	{r4, lr}
 801559a:	4604      	mov	r4, r0
 801559c:	b153      	cbz	r3, 80155b4 <WM__IsWindow+0x20>
 801559e:	4283      	cmp	r3, r0
 80155a0:	d102      	bne.n	80155a8 <WM__IsWindow+0x14>
 80155a2:	e009      	b.n	80155b8 <WM__IsWindow+0x24>
 80155a4:	429c      	cmp	r4, r3
 80155a6:	d007      	beq.n	80155b8 <WM__IsWindow+0x24>
 80155a8:	4618      	mov	r0, r3
 80155aa:	f008 fa3d 	bl	801da28 <GUI_ALLOC_h2p>
 80155ae:	6943      	ldr	r3, [r0, #20]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d1f7      	bne.n	80155a4 <WM__IsWindow+0x10>
 80155b4:	2000      	movs	r0, #0
 80155b6:	bd10      	pop	{r4, pc}
 80155b8:	2001      	movs	r0, #1
 80155ba:	bd10      	pop	{r4, pc}
 80155bc:	2002cb1c 	.word	0x2002cb1c

080155c0 <WM__InvalidateDrawAndDescs>:
 80155c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155c4:	4604      	mov	r4, r0
 80155c6:	b08f      	sub	sp, #60	; 0x3c
 80155c8:	b910      	cbnz	r0, 80155d0 <WM__InvalidateDrawAndDescs+0x10>
 80155ca:	b00f      	add	sp, #60	; 0x3c
 80155cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d0:	f008 fa34 	bl	801da3c <GUI_ALLOC_LockH>
 80155d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80155d6:	9005      	str	r0, [sp, #20]
 80155d8:	0792      	lsls	r2, r2, #30
 80155da:	f140 813c 	bpl.w	8015856 <WM__InvalidateDrawAndDescs+0x296>
 80155de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80155e0:	b140      	cbz	r0, 80155f4 <WM__InvalidateDrawAndDescs+0x34>
 80155e2:	4ba0      	ldr	r3, [pc, #640]	; (8015864 <WM__InvalidateDrawAndDescs+0x2a4>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	42a3      	cmp	r3, r4
 80155e8:	d004      	beq.n	80155f4 <WM__InvalidateDrawAndDescs+0x34>
 80155ea:	f002 feff 	bl	80183ec <GUI_MEMDEV_Delete>
 80155ee:	9b05      	ldr	r3, [sp, #20]
 80155f0:	2200      	movs	r2, #0
 80155f2:	625a      	str	r2, [r3, #36]	; 0x24
 80155f4:	4620      	mov	r0, r4
 80155f6:	f7fe fcb5 	bl	8013f64 <WM_GetFirstChild>
 80155fa:	9003      	str	r0, [sp, #12]
 80155fc:	2800      	cmp	r0, #0
 80155fe:	f000 812a 	beq.w	8015856 <WM__InvalidateDrawAndDescs+0x296>
 8015602:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8015864 <WM__InvalidateDrawAndDescs+0x2a4>
 8015606:	9803      	ldr	r0, [sp, #12]
 8015608:	f008 fa18 	bl	801da3c <GUI_ALLOC_LockH>
 801560c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801560e:	9006      	str	r0, [sp, #24]
 8015610:	079b      	lsls	r3, r3, #30
 8015612:	f140 8115 	bpl.w	8015840 <WM__InvalidateDrawAndDescs+0x280>
 8015616:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015618:	b148      	cbz	r0, 801562e <WM__InvalidateDrawAndDescs+0x6e>
 801561a:	f8d8 3000 	ldr.w	r3, [r8]
 801561e:	9a03      	ldr	r2, [sp, #12]
 8015620:	429a      	cmp	r2, r3
 8015622:	d004      	beq.n	801562e <WM__InvalidateDrawAndDescs+0x6e>
 8015624:	f002 fee2 	bl	80183ec <GUI_MEMDEV_Delete>
 8015628:	9b06      	ldr	r3, [sp, #24]
 801562a:	2200      	movs	r2, #0
 801562c:	625a      	str	r2, [r3, #36]	; 0x24
 801562e:	9803      	ldr	r0, [sp, #12]
 8015630:	f7fe fc98 	bl	8013f64 <WM_GetFirstChild>
 8015634:	9002      	str	r0, [sp, #8]
 8015636:	2800      	cmp	r0, #0
 8015638:	f000 8102 	beq.w	8015840 <WM__InvalidateDrawAndDescs+0x280>
 801563c:	9802      	ldr	r0, [sp, #8]
 801563e:	f008 f9fd 	bl	801da3c <GUI_ALLOC_LockH>
 8015642:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015644:	9007      	str	r0, [sp, #28]
 8015646:	079f      	lsls	r7, r3, #30
 8015648:	f140 80ef 	bpl.w	801582a <WM__InvalidateDrawAndDescs+0x26a>
 801564c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801564e:	b148      	cbz	r0, 8015664 <WM__InvalidateDrawAndDescs+0xa4>
 8015650:	f8d8 3000 	ldr.w	r3, [r8]
 8015654:	9a02      	ldr	r2, [sp, #8]
 8015656:	429a      	cmp	r2, r3
 8015658:	d004      	beq.n	8015664 <WM__InvalidateDrawAndDescs+0xa4>
 801565a:	f002 fec7 	bl	80183ec <GUI_MEMDEV_Delete>
 801565e:	9b07      	ldr	r3, [sp, #28]
 8015660:	2200      	movs	r2, #0
 8015662:	625a      	str	r2, [r3, #36]	; 0x24
 8015664:	9802      	ldr	r0, [sp, #8]
 8015666:	f7fe fc7d 	bl	8013f64 <WM_GetFirstChild>
 801566a:	4683      	mov	fp, r0
 801566c:	2800      	cmp	r0, #0
 801566e:	f000 80dc 	beq.w	801582a <WM__InvalidateDrawAndDescs+0x26a>
 8015672:	4658      	mov	r0, fp
 8015674:	f008 f9e2 	bl	801da3c <GUI_ALLOC_LockH>
 8015678:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801567a:	9008      	str	r0, [sp, #32]
 801567c:	079e      	lsls	r6, r3, #30
 801567e:	f140 80c8 	bpl.w	8015812 <WM__InvalidateDrawAndDescs+0x252>
 8015682:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015684:	b140      	cbz	r0, 8015698 <WM__InvalidateDrawAndDescs+0xd8>
 8015686:	f8d8 3000 	ldr.w	r3, [r8]
 801568a:	459b      	cmp	fp, r3
 801568c:	d004      	beq.n	8015698 <WM__InvalidateDrawAndDescs+0xd8>
 801568e:	f002 fead 	bl	80183ec <GUI_MEMDEV_Delete>
 8015692:	9b08      	ldr	r3, [sp, #32]
 8015694:	2200      	movs	r2, #0
 8015696:	625a      	str	r2, [r3, #36]	; 0x24
 8015698:	4658      	mov	r0, fp
 801569a:	f7fe fc63 	bl	8013f64 <WM_GetFirstChild>
 801569e:	4682      	mov	sl, r0
 80156a0:	2800      	cmp	r0, #0
 80156a2:	f000 80b6 	beq.w	8015812 <WM__InvalidateDrawAndDescs+0x252>
 80156a6:	4650      	mov	r0, sl
 80156a8:	f008 f9c8 	bl	801da3c <GUI_ALLOC_LockH>
 80156ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80156ae:	9009      	str	r0, [sp, #36]	; 0x24
 80156b0:	079d      	lsls	r5, r3, #30
 80156b2:	f140 80a2 	bpl.w	80157fa <WM__InvalidateDrawAndDescs+0x23a>
 80156b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80156b8:	b140      	cbz	r0, 80156cc <WM__InvalidateDrawAndDescs+0x10c>
 80156ba:	f8d8 3000 	ldr.w	r3, [r8]
 80156be:	459a      	cmp	sl, r3
 80156c0:	d004      	beq.n	80156cc <WM__InvalidateDrawAndDescs+0x10c>
 80156c2:	f002 fe93 	bl	80183ec <GUI_MEMDEV_Delete>
 80156c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c8:	2200      	movs	r2, #0
 80156ca:	625a      	str	r2, [r3, #36]	; 0x24
 80156cc:	4650      	mov	r0, sl
 80156ce:	f7fe fc49 	bl	8013f64 <WM_GetFirstChild>
 80156d2:	9001      	str	r0, [sp, #4]
 80156d4:	2800      	cmp	r0, #0
 80156d6:	f000 8090 	beq.w	80157fa <WM__InvalidateDrawAndDescs+0x23a>
 80156da:	9801      	ldr	r0, [sp, #4]
 80156dc:	f008 f9ae 	bl	801da3c <GUI_ALLOC_LockH>
 80156e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80156e2:	900a      	str	r0, [sp, #40]	; 0x28
 80156e4:	079c      	lsls	r4, r3, #30
 80156e6:	d57d      	bpl.n	80157e4 <WM__InvalidateDrawAndDescs+0x224>
 80156e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80156ea:	b148      	cbz	r0, 8015700 <WM__InvalidateDrawAndDescs+0x140>
 80156ec:	f8d8 3000 	ldr.w	r3, [r8]
 80156f0:	9a01      	ldr	r2, [sp, #4]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	d004      	beq.n	8015700 <WM__InvalidateDrawAndDescs+0x140>
 80156f6:	f002 fe79 	bl	80183ec <GUI_MEMDEV_Delete>
 80156fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156fc:	2200      	movs	r2, #0
 80156fe:	625a      	str	r2, [r3, #36]	; 0x24
 8015700:	9801      	ldr	r0, [sp, #4]
 8015702:	f7fe fc2f 	bl	8013f64 <WM_GetFirstChild>
 8015706:	4606      	mov	r6, r0
 8015708:	2800      	cmp	r0, #0
 801570a:	d06b      	beq.n	80157e4 <WM__InvalidateDrawAndDescs+0x224>
 801570c:	4630      	mov	r0, r6
 801570e:	f008 f995 	bl	801da3c <GUI_ALLOC_LockH>
 8015712:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015714:	900b      	str	r0, [sp, #44]	; 0x2c
 8015716:	0799      	lsls	r1, r3, #30
 8015718:	d55b      	bpl.n	80157d2 <WM__InvalidateDrawAndDescs+0x212>
 801571a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801571c:	b140      	cbz	r0, 8015730 <WM__InvalidateDrawAndDescs+0x170>
 801571e:	f8d8 3000 	ldr.w	r3, [r8]
 8015722:	429e      	cmp	r6, r3
 8015724:	d004      	beq.n	8015730 <WM__InvalidateDrawAndDescs+0x170>
 8015726:	f002 fe61 	bl	80183ec <GUI_MEMDEV_Delete>
 801572a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801572c:	2200      	movs	r2, #0
 801572e:	625a      	str	r2, [r3, #36]	; 0x24
 8015730:	4630      	mov	r0, r6
 8015732:	f7fe fc17 	bl	8013f64 <WM_GetFirstChild>
 8015736:	4605      	mov	r5, r0
 8015738:	2800      	cmp	r0, #0
 801573a:	d04a      	beq.n	80157d2 <WM__InvalidateDrawAndDescs+0x212>
 801573c:	4628      	mov	r0, r5
 801573e:	f008 f97d 	bl	801da3c <GUI_ALLOC_LockH>
 8015742:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015744:	900c      	str	r0, [sp, #48]	; 0x30
 8015746:	079a      	lsls	r2, r3, #30
 8015748:	d53a      	bpl.n	80157c0 <WM__InvalidateDrawAndDescs+0x200>
 801574a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801574c:	b140      	cbz	r0, 8015760 <WM__InvalidateDrawAndDescs+0x1a0>
 801574e:	f8d8 3000 	ldr.w	r3, [r8]
 8015752:	429d      	cmp	r5, r3
 8015754:	d004      	beq.n	8015760 <WM__InvalidateDrawAndDescs+0x1a0>
 8015756:	f002 fe49 	bl	80183ec <GUI_MEMDEV_Delete>
 801575a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801575c:	2200      	movs	r2, #0
 801575e:	625a      	str	r2, [r3, #36]	; 0x24
 8015760:	4628      	mov	r0, r5
 8015762:	f7fe fbff 	bl	8013f64 <WM_GetFirstChild>
 8015766:	f04f 0900 	mov.w	r9, #0
 801576a:	4604      	mov	r4, r0
 801576c:	b340      	cbz	r0, 80157c0 <WM__InvalidateDrawAndDescs+0x200>
 801576e:	4620      	mov	r0, r4
 8015770:	f008 f964 	bl	801da3c <GUI_ALLOC_LockH>
 8015774:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015776:	900d      	str	r0, [sp, #52]	; 0x34
 8015778:	079b      	lsls	r3, r3, #30
 801577a:	d518      	bpl.n	80157ae <WM__InvalidateDrawAndDescs+0x1ee>
 801577c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801577e:	b140      	cbz	r0, 8015792 <WM__InvalidateDrawAndDescs+0x1d2>
 8015780:	f8d8 3000 	ldr.w	r3, [r8]
 8015784:	429c      	cmp	r4, r3
 8015786:	d004      	beq.n	8015792 <WM__InvalidateDrawAndDescs+0x1d2>
 8015788:	f002 fe30 	bl	80183ec <GUI_MEMDEV_Delete>
 801578c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801578e:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 8015792:	4620      	mov	r0, r4
 8015794:	f7fe fbe6 	bl	8013f64 <WM_GetFirstChild>
 8015798:	4607      	mov	r7, r0
 801579a:	b140      	cbz	r0, 80157ae <WM__InvalidateDrawAndDescs+0x1ee>
 801579c:	4638      	mov	r0, r7
 801579e:	f7ff ff0f 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 80157a2:	4638      	mov	r0, r7
 80157a4:	f008 f940 	bl	801da28 <GUI_ALLOC_h2p>
 80157a8:	6a07      	ldr	r7, [r0, #32]
 80157aa:	2f00      	cmp	r7, #0
 80157ac:	d1f6      	bne.n	801579c <WM__InvalidateDrawAndDescs+0x1dc>
 80157ae:	a80d      	add	r0, sp, #52	; 0x34
 80157b0:	f008 f956 	bl	801da60 <GUI_ALLOC_UnlockH>
 80157b4:	4620      	mov	r0, r4
 80157b6:	f008 f937 	bl	801da28 <GUI_ALLOC_h2p>
 80157ba:	6a04      	ldr	r4, [r0, #32]
 80157bc:	2c00      	cmp	r4, #0
 80157be:	d1d6      	bne.n	801576e <WM__InvalidateDrawAndDescs+0x1ae>
 80157c0:	a80c      	add	r0, sp, #48	; 0x30
 80157c2:	f008 f94d 	bl	801da60 <GUI_ALLOC_UnlockH>
 80157c6:	4628      	mov	r0, r5
 80157c8:	f008 f92e 	bl	801da28 <GUI_ALLOC_h2p>
 80157cc:	6a05      	ldr	r5, [r0, #32]
 80157ce:	2d00      	cmp	r5, #0
 80157d0:	d1b4      	bne.n	801573c <WM__InvalidateDrawAndDescs+0x17c>
 80157d2:	a80b      	add	r0, sp, #44	; 0x2c
 80157d4:	f008 f944 	bl	801da60 <GUI_ALLOC_UnlockH>
 80157d8:	4630      	mov	r0, r6
 80157da:	f008 f925 	bl	801da28 <GUI_ALLOC_h2p>
 80157de:	6a06      	ldr	r6, [r0, #32]
 80157e0:	2e00      	cmp	r6, #0
 80157e2:	d193      	bne.n	801570c <WM__InvalidateDrawAndDescs+0x14c>
 80157e4:	a80a      	add	r0, sp, #40	; 0x28
 80157e6:	f008 f93b 	bl	801da60 <GUI_ALLOC_UnlockH>
 80157ea:	9801      	ldr	r0, [sp, #4]
 80157ec:	f008 f91c 	bl	801da28 <GUI_ALLOC_h2p>
 80157f0:	6a00      	ldr	r0, [r0, #32]
 80157f2:	9001      	str	r0, [sp, #4]
 80157f4:	2800      	cmp	r0, #0
 80157f6:	f47f af70 	bne.w	80156da <WM__InvalidateDrawAndDescs+0x11a>
 80157fa:	a809      	add	r0, sp, #36	; 0x24
 80157fc:	f008 f930 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015800:	4650      	mov	r0, sl
 8015802:	f008 f911 	bl	801da28 <GUI_ALLOC_h2p>
 8015806:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801580a:	f1ba 0f00 	cmp.w	sl, #0
 801580e:	f47f af4a 	bne.w	80156a6 <WM__InvalidateDrawAndDescs+0xe6>
 8015812:	a808      	add	r0, sp, #32
 8015814:	f008 f924 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015818:	4658      	mov	r0, fp
 801581a:	f008 f905 	bl	801da28 <GUI_ALLOC_h2p>
 801581e:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8015822:	f1bb 0f00 	cmp.w	fp, #0
 8015826:	f47f af24 	bne.w	8015672 <WM__InvalidateDrawAndDescs+0xb2>
 801582a:	a807      	add	r0, sp, #28
 801582c:	f008 f918 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015830:	9802      	ldr	r0, [sp, #8]
 8015832:	f008 f8f9 	bl	801da28 <GUI_ALLOC_h2p>
 8015836:	6a00      	ldr	r0, [r0, #32]
 8015838:	9002      	str	r0, [sp, #8]
 801583a:	2800      	cmp	r0, #0
 801583c:	f47f aefe 	bne.w	801563c <WM__InvalidateDrawAndDescs+0x7c>
 8015840:	a806      	add	r0, sp, #24
 8015842:	f008 f90d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015846:	9803      	ldr	r0, [sp, #12]
 8015848:	f008 f8ee 	bl	801da28 <GUI_ALLOC_h2p>
 801584c:	6a00      	ldr	r0, [r0, #32]
 801584e:	9003      	str	r0, [sp, #12]
 8015850:	2800      	cmp	r0, #0
 8015852:	f47f aed9 	bne.w	8015608 <WM__InvalidateDrawAndDescs+0x48>
 8015856:	a805      	add	r0, sp, #20
 8015858:	f008 f902 	bl	801da60 <GUI_ALLOC_UnlockH>
 801585c:	b00f      	add	sp, #60	; 0x3c
 801585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015862:	bf00      	nop
 8015864:	2002cb4c 	.word	0x2002cb4c

08015868 <WM_InvalidateWindowAndDescsEx>:
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	b09f      	sub	sp, #124	; 0x7c
 801586e:	460d      	mov	r5, r1
 8015870:	9201      	str	r2, [sp, #4]
 8015872:	4604      	mov	r4, r0
 8015874:	b910      	cbnz	r0, 801587c <WM_InvalidateWindowAndDescsEx+0x14>
 8015876:	b01f      	add	sp, #124	; 0x7c
 8015878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801587c:	f008 f8de 	bl	801da3c <GUI_ALLOC_LockH>
 8015880:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015882:	9003      	str	r0, [sp, #12]
 8015884:	079b      	lsls	r3, r3, #30
 8015886:	f140 8154 	bpl.w	8015b32 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801588a:	4602      	mov	r2, r0
 801588c:	4629      	mov	r1, r5
 801588e:	a80c      	add	r0, sp, #48	; 0x30
 8015890:	f004 fd94 	bl	801a3bc <GUI__IntersectRects>
 8015894:	2800      	cmp	r0, #0
 8015896:	f000 814c 	beq.w	8015b32 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801589a:	a803      	add	r0, sp, #12
 801589c:	f008 f8e0 	bl	801da60 <GUI_ALLOC_UnlockH>
 80158a0:	4620      	mov	r0, r4
 80158a2:	a90c      	add	r1, sp, #48	; 0x30
 80158a4:	9a01      	ldr	r2, [sp, #4]
 80158a6:	f7ff fce3 	bl	8015270 <_Invalidate1Abs>
 80158aa:	4620      	mov	r0, r4
 80158ac:	f7fe fb5a 	bl	8013f64 <WM_GetFirstChild>
 80158b0:	4604      	mov	r4, r0
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d0df      	beq.n	8015876 <WM_InvalidateWindowAndDescsEx+0xe>
 80158b6:	4620      	mov	r0, r4
 80158b8:	f008 f8c0 	bl	801da3c <GUI_ALLOC_LockH>
 80158bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158be:	9004      	str	r0, [sp, #16]
 80158c0:	079f      	lsls	r7, r3, #30
 80158c2:	f140 813c 	bpl.w	8015b3e <WM_InvalidateWindowAndDescsEx+0x2d6>
 80158c6:	4602      	mov	r2, r0
 80158c8:	a90c      	add	r1, sp, #48	; 0x30
 80158ca:	a80e      	add	r0, sp, #56	; 0x38
 80158cc:	f004 fd76 	bl	801a3bc <GUI__IntersectRects>
 80158d0:	2800      	cmp	r0, #0
 80158d2:	f000 8134 	beq.w	8015b3e <WM_InvalidateWindowAndDescsEx+0x2d6>
 80158d6:	a804      	add	r0, sp, #16
 80158d8:	f008 f8c2 	bl	801da60 <GUI_ALLOC_UnlockH>
 80158dc:	4620      	mov	r0, r4
 80158de:	a90e      	add	r1, sp, #56	; 0x38
 80158e0:	9a01      	ldr	r2, [sp, #4]
 80158e2:	f7ff fcc5 	bl	8015270 <_Invalidate1Abs>
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7fe fb3c 	bl	8013f64 <WM_GetFirstChild>
 80158ec:	4605      	mov	r5, r0
 80158ee:	2800      	cmp	r0, #0
 80158f0:	f000 8117 	beq.w	8015b22 <WM_InvalidateWindowAndDescsEx+0x2ba>
 80158f4:	4628      	mov	r0, r5
 80158f6:	f008 f8a1 	bl	801da3c <GUI_ALLOC_LockH>
 80158fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158fc:	9005      	str	r0, [sp, #20]
 80158fe:	079e      	lsls	r6, r3, #30
 8015900:	f140 8128 	bpl.w	8015b54 <WM_InvalidateWindowAndDescsEx+0x2ec>
 8015904:	4602      	mov	r2, r0
 8015906:	a90e      	add	r1, sp, #56	; 0x38
 8015908:	a810      	add	r0, sp, #64	; 0x40
 801590a:	f004 fd57 	bl	801a3bc <GUI__IntersectRects>
 801590e:	2800      	cmp	r0, #0
 8015910:	f000 8120 	beq.w	8015b54 <WM_InvalidateWindowAndDescsEx+0x2ec>
 8015914:	a805      	add	r0, sp, #20
 8015916:	f008 f8a3 	bl	801da60 <GUI_ALLOC_UnlockH>
 801591a:	4628      	mov	r0, r5
 801591c:	a910      	add	r1, sp, #64	; 0x40
 801591e:	9a01      	ldr	r2, [sp, #4]
 8015920:	f7ff fca6 	bl	8015270 <_Invalidate1Abs>
 8015924:	4628      	mov	r0, r5
 8015926:	f7fe fb1d 	bl	8013f64 <WM_GetFirstChild>
 801592a:	4606      	mov	r6, r0
 801592c:	2800      	cmp	r0, #0
 801592e:	f000 80f1 	beq.w	8015b14 <WM_InvalidateWindowAndDescsEx+0x2ac>
 8015932:	4630      	mov	r0, r6
 8015934:	f008 f882 	bl	801da3c <GUI_ALLOC_LockH>
 8015938:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801593a:	9006      	str	r0, [sp, #24]
 801593c:	0799      	lsls	r1, r3, #30
 801593e:	f140 8114 	bpl.w	8015b6a <WM_InvalidateWindowAndDescsEx+0x302>
 8015942:	4602      	mov	r2, r0
 8015944:	a910      	add	r1, sp, #64	; 0x40
 8015946:	a812      	add	r0, sp, #72	; 0x48
 8015948:	f004 fd38 	bl	801a3bc <GUI__IntersectRects>
 801594c:	2800      	cmp	r0, #0
 801594e:	f000 810c 	beq.w	8015b6a <WM_InvalidateWindowAndDescsEx+0x302>
 8015952:	a806      	add	r0, sp, #24
 8015954:	f008 f884 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015958:	4630      	mov	r0, r6
 801595a:	a912      	add	r1, sp, #72	; 0x48
 801595c:	9a01      	ldr	r2, [sp, #4]
 801595e:	f7ff fc87 	bl	8015270 <_Invalidate1Abs>
 8015962:	4630      	mov	r0, r6
 8015964:	f7fe fafe 	bl	8013f64 <WM_GetFirstChild>
 8015968:	4607      	mov	r7, r0
 801596a:	2800      	cmp	r0, #0
 801596c:	f000 80cb 	beq.w	8015b06 <WM_InvalidateWindowAndDescsEx+0x29e>
 8015970:	4638      	mov	r0, r7
 8015972:	f008 f863 	bl	801da3c <GUI_ALLOC_LockH>
 8015976:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015978:	9007      	str	r0, [sp, #28]
 801597a:	079a      	lsls	r2, r3, #30
 801597c:	f140 8100 	bpl.w	8015b80 <WM_InvalidateWindowAndDescsEx+0x318>
 8015980:	4602      	mov	r2, r0
 8015982:	a912      	add	r1, sp, #72	; 0x48
 8015984:	a814      	add	r0, sp, #80	; 0x50
 8015986:	f004 fd19 	bl	801a3bc <GUI__IntersectRects>
 801598a:	2800      	cmp	r0, #0
 801598c:	f000 80f8 	beq.w	8015b80 <WM_InvalidateWindowAndDescsEx+0x318>
 8015990:	a807      	add	r0, sp, #28
 8015992:	f008 f865 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015996:	4638      	mov	r0, r7
 8015998:	a914      	add	r1, sp, #80	; 0x50
 801599a:	9a01      	ldr	r2, [sp, #4]
 801599c:	f7ff fc68 	bl	8015270 <_Invalidate1Abs>
 80159a0:	4638      	mov	r0, r7
 80159a2:	f7fe fadf 	bl	8013f64 <WM_GetFirstChild>
 80159a6:	4680      	mov	r8, r0
 80159a8:	2800      	cmp	r0, #0
 80159aa:	f000 80a5 	beq.w	8015af8 <WM_InvalidateWindowAndDescsEx+0x290>
 80159ae:	4640      	mov	r0, r8
 80159b0:	f008 f844 	bl	801da3c <GUI_ALLOC_LockH>
 80159b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159b6:	9008      	str	r0, [sp, #32]
 80159b8:	079b      	lsls	r3, r3, #30
 80159ba:	f140 80ec 	bpl.w	8015b96 <WM_InvalidateWindowAndDescsEx+0x32e>
 80159be:	4602      	mov	r2, r0
 80159c0:	a914      	add	r1, sp, #80	; 0x50
 80159c2:	a816      	add	r0, sp, #88	; 0x58
 80159c4:	f004 fcfa 	bl	801a3bc <GUI__IntersectRects>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	f000 80e4 	beq.w	8015b96 <WM_InvalidateWindowAndDescsEx+0x32e>
 80159ce:	a808      	add	r0, sp, #32
 80159d0:	f008 f846 	bl	801da60 <GUI_ALLOC_UnlockH>
 80159d4:	4640      	mov	r0, r8
 80159d6:	a916      	add	r1, sp, #88	; 0x58
 80159d8:	9a01      	ldr	r2, [sp, #4]
 80159da:	f7ff fc49 	bl	8015270 <_Invalidate1Abs>
 80159de:	4640      	mov	r0, r8
 80159e0:	f7fe fac0 	bl	8013f64 <WM_GetFirstChild>
 80159e4:	4681      	mov	r9, r0
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d07d      	beq.n	8015ae6 <WM_InvalidateWindowAndDescsEx+0x27e>
 80159ea:	4648      	mov	r0, r9
 80159ec:	f008 f826 	bl	801da3c <GUI_ALLOC_LockH>
 80159f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159f2:	9009      	str	r0, [sp, #36]	; 0x24
 80159f4:	0799      	lsls	r1, r3, #30
 80159f6:	f140 80db 	bpl.w	8015bb0 <WM_InvalidateWindowAndDescsEx+0x348>
 80159fa:	4602      	mov	r2, r0
 80159fc:	a916      	add	r1, sp, #88	; 0x58
 80159fe:	a818      	add	r0, sp, #96	; 0x60
 8015a00:	f004 fcdc 	bl	801a3bc <GUI__IntersectRects>
 8015a04:	2800      	cmp	r0, #0
 8015a06:	f000 80d3 	beq.w	8015bb0 <WM_InvalidateWindowAndDescsEx+0x348>
 8015a0a:	a809      	add	r0, sp, #36	; 0x24
 8015a0c:	f008 f828 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015a10:	4648      	mov	r0, r9
 8015a12:	a918      	add	r1, sp, #96	; 0x60
 8015a14:	9a01      	ldr	r2, [sp, #4]
 8015a16:	f7ff fc2b 	bl	8015270 <_Invalidate1Abs>
 8015a1a:	4648      	mov	r0, r9
 8015a1c:	f7fe faa2 	bl	8013f64 <WM_GetFirstChild>
 8015a20:	4682      	mov	sl, r0
 8015a22:	2800      	cmp	r0, #0
 8015a24:	d057      	beq.n	8015ad6 <WM_InvalidateWindowAndDescsEx+0x26e>
 8015a26:	4650      	mov	r0, sl
 8015a28:	f008 f808 	bl	801da3c <GUI_ALLOC_LockH>
 8015a2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a2e:	900a      	str	r0, [sp, #40]	; 0x28
 8015a30:	079a      	lsls	r2, r3, #30
 8015a32:	f140 80ca 	bpl.w	8015bca <WM_InvalidateWindowAndDescsEx+0x362>
 8015a36:	4602      	mov	r2, r0
 8015a38:	a918      	add	r1, sp, #96	; 0x60
 8015a3a:	a81a      	add	r0, sp, #104	; 0x68
 8015a3c:	f004 fcbe 	bl	801a3bc <GUI__IntersectRects>
 8015a40:	2800      	cmp	r0, #0
 8015a42:	f000 80c2 	beq.w	8015bca <WM_InvalidateWindowAndDescsEx+0x362>
 8015a46:	a80a      	add	r0, sp, #40	; 0x28
 8015a48:	f008 f80a 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015a4c:	4650      	mov	r0, sl
 8015a4e:	a91a      	add	r1, sp, #104	; 0x68
 8015a50:	9a01      	ldr	r2, [sp, #4]
 8015a52:	f7ff fc0d 	bl	8015270 <_Invalidate1Abs>
 8015a56:	4650      	mov	r0, sl
 8015a58:	f7fe fa84 	bl	8013f64 <WM_GetFirstChild>
 8015a5c:	4683      	mov	fp, r0
 8015a5e:	2800      	cmp	r0, #0
 8015a60:	d031      	beq.n	8015ac6 <WM_InvalidateWindowAndDescsEx+0x25e>
 8015a62:	4658      	mov	r0, fp
 8015a64:	f007 ffea 	bl	801da3c <GUI_ALLOC_LockH>
 8015a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a6c:	079b      	lsls	r3, r3, #30
 8015a6e:	f140 80b9 	bpl.w	8015be4 <WM_InvalidateWindowAndDescsEx+0x37c>
 8015a72:	4602      	mov	r2, r0
 8015a74:	a91a      	add	r1, sp, #104	; 0x68
 8015a76:	a81c      	add	r0, sp, #112	; 0x70
 8015a78:	f004 fca0 	bl	801a3bc <GUI__IntersectRects>
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	f000 80b1 	beq.w	8015be4 <WM_InvalidateWindowAndDescsEx+0x37c>
 8015a82:	a80b      	add	r0, sp, #44	; 0x2c
 8015a84:	f007 ffec 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015a88:	4658      	mov	r0, fp
 8015a8a:	a91c      	add	r1, sp, #112	; 0x70
 8015a8c:	9a01      	ldr	r2, [sp, #4]
 8015a8e:	f7ff fbef 	bl	8015270 <_Invalidate1Abs>
 8015a92:	4658      	mov	r0, fp
 8015a94:	f7fe fa66 	bl	8013f64 <WM_GetFirstChild>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	b160      	cbz	r0, 8015ab6 <WM_InvalidateWindowAndDescsEx+0x24e>
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	a91c      	add	r1, sp, #112	; 0x70
 8015aa0:	9a01      	ldr	r2, [sp, #4]
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	f7ff fee0 	bl	8015868 <WM_InvalidateWindowAndDescsEx>
 8015aa8:	9b00      	ldr	r3, [sp, #0]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f007 ffbc 	bl	801da28 <GUI_ALLOC_h2p>
 8015ab0:	6a03      	ldr	r3, [r0, #32]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1f2      	bne.n	8015a9c <WM_InvalidateWindowAndDescsEx+0x234>
 8015ab6:	4658      	mov	r0, fp
 8015ab8:	f007 ffb6 	bl	801da28 <GUI_ALLOC_h2p>
 8015abc:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8015ac0:	f1bb 0f00 	cmp.w	fp, #0
 8015ac4:	d1cd      	bne.n	8015a62 <WM_InvalidateWindowAndDescsEx+0x1fa>
 8015ac6:	4650      	mov	r0, sl
 8015ac8:	f007 ffae 	bl	801da28 <GUI_ALLOC_h2p>
 8015acc:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8015ad0:	f1ba 0f00 	cmp.w	sl, #0
 8015ad4:	d1a7      	bne.n	8015a26 <WM_InvalidateWindowAndDescsEx+0x1be>
 8015ad6:	4648      	mov	r0, r9
 8015ad8:	f007 ffa6 	bl	801da28 <GUI_ALLOC_h2p>
 8015adc:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8015ae0:	f1b9 0f00 	cmp.w	r9, #0
 8015ae4:	d181      	bne.n	80159ea <WM_InvalidateWindowAndDescsEx+0x182>
 8015ae6:	4640      	mov	r0, r8
 8015ae8:	f007 ff9e 	bl	801da28 <GUI_ALLOC_h2p>
 8015aec:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8015af0:	f1b8 0f00 	cmp.w	r8, #0
 8015af4:	f47f af5b 	bne.w	80159ae <WM_InvalidateWindowAndDescsEx+0x146>
 8015af8:	4638      	mov	r0, r7
 8015afa:	f007 ff95 	bl	801da28 <GUI_ALLOC_h2p>
 8015afe:	6a07      	ldr	r7, [r0, #32]
 8015b00:	2f00      	cmp	r7, #0
 8015b02:	f47f af35 	bne.w	8015970 <WM_InvalidateWindowAndDescsEx+0x108>
 8015b06:	4630      	mov	r0, r6
 8015b08:	f007 ff8e 	bl	801da28 <GUI_ALLOC_h2p>
 8015b0c:	6a06      	ldr	r6, [r0, #32]
 8015b0e:	2e00      	cmp	r6, #0
 8015b10:	f47f af0f 	bne.w	8015932 <WM_InvalidateWindowAndDescsEx+0xca>
 8015b14:	4628      	mov	r0, r5
 8015b16:	f007 ff87 	bl	801da28 <GUI_ALLOC_h2p>
 8015b1a:	6a05      	ldr	r5, [r0, #32]
 8015b1c:	2d00      	cmp	r5, #0
 8015b1e:	f47f aee9 	bne.w	80158f4 <WM_InvalidateWindowAndDescsEx+0x8c>
 8015b22:	4620      	mov	r0, r4
 8015b24:	f007 ff80 	bl	801da28 <GUI_ALLOC_h2p>
 8015b28:	6a04      	ldr	r4, [r0, #32]
 8015b2a:	2c00      	cmp	r4, #0
 8015b2c:	f47f aec3 	bne.w	80158b6 <WM_InvalidateWindowAndDescsEx+0x4e>
 8015b30:	e6a1      	b.n	8015876 <WM_InvalidateWindowAndDescsEx+0xe>
 8015b32:	a803      	add	r0, sp, #12
 8015b34:	f007 ff94 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b38:	b01f      	add	sp, #124	; 0x7c
 8015b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3e:	a804      	add	r0, sp, #16
 8015b40:	f007 ff8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b44:	4620      	mov	r0, r4
 8015b46:	f007 ff6f 	bl	801da28 <GUI_ALLOC_h2p>
 8015b4a:	6a04      	ldr	r4, [r0, #32]
 8015b4c:	2c00      	cmp	r4, #0
 8015b4e:	f47f aeb2 	bne.w	80158b6 <WM_InvalidateWindowAndDescsEx+0x4e>
 8015b52:	e690      	b.n	8015876 <WM_InvalidateWindowAndDescsEx+0xe>
 8015b54:	a805      	add	r0, sp, #20
 8015b56:	f007 ff83 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	f007 ff64 	bl	801da28 <GUI_ALLOC_h2p>
 8015b60:	6a05      	ldr	r5, [r0, #32]
 8015b62:	2d00      	cmp	r5, #0
 8015b64:	f47f aec6 	bne.w	80158f4 <WM_InvalidateWindowAndDescsEx+0x8c>
 8015b68:	e7db      	b.n	8015b22 <WM_InvalidateWindowAndDescsEx+0x2ba>
 8015b6a:	a806      	add	r0, sp, #24
 8015b6c:	f007 ff78 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b70:	4630      	mov	r0, r6
 8015b72:	f007 ff59 	bl	801da28 <GUI_ALLOC_h2p>
 8015b76:	6a06      	ldr	r6, [r0, #32]
 8015b78:	2e00      	cmp	r6, #0
 8015b7a:	f47f aeda 	bne.w	8015932 <WM_InvalidateWindowAndDescsEx+0xca>
 8015b7e:	e7c9      	b.n	8015b14 <WM_InvalidateWindowAndDescsEx+0x2ac>
 8015b80:	a807      	add	r0, sp, #28
 8015b82:	f007 ff6d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b86:	4638      	mov	r0, r7
 8015b88:	f007 ff4e 	bl	801da28 <GUI_ALLOC_h2p>
 8015b8c:	6a07      	ldr	r7, [r0, #32]
 8015b8e:	2f00      	cmp	r7, #0
 8015b90:	f47f aeee 	bne.w	8015970 <WM_InvalidateWindowAndDescsEx+0x108>
 8015b94:	e7b7      	b.n	8015b06 <WM_InvalidateWindowAndDescsEx+0x29e>
 8015b96:	a808      	add	r0, sp, #32
 8015b98:	f007 ff62 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015b9c:	4640      	mov	r0, r8
 8015b9e:	f007 ff43 	bl	801da28 <GUI_ALLOC_h2p>
 8015ba2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8015ba6:	f1b8 0f00 	cmp.w	r8, #0
 8015baa:	f47f af00 	bne.w	80159ae <WM_InvalidateWindowAndDescsEx+0x146>
 8015bae:	e7a3      	b.n	8015af8 <WM_InvalidateWindowAndDescsEx+0x290>
 8015bb0:	a809      	add	r0, sp, #36	; 0x24
 8015bb2:	f007 ff55 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015bb6:	4648      	mov	r0, r9
 8015bb8:	f007 ff36 	bl	801da28 <GUI_ALLOC_h2p>
 8015bbc:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8015bc0:	f1b9 0f00 	cmp.w	r9, #0
 8015bc4:	f47f af11 	bne.w	80159ea <WM_InvalidateWindowAndDescsEx+0x182>
 8015bc8:	e78d      	b.n	8015ae6 <WM_InvalidateWindowAndDescsEx+0x27e>
 8015bca:	a80a      	add	r0, sp, #40	; 0x28
 8015bcc:	f007 ff48 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015bd0:	4650      	mov	r0, sl
 8015bd2:	f007 ff29 	bl	801da28 <GUI_ALLOC_h2p>
 8015bd6:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8015bda:	f1ba 0f00 	cmp.w	sl, #0
 8015bde:	f47f af22 	bne.w	8015a26 <WM_InvalidateWindowAndDescsEx+0x1be>
 8015be2:	e778      	b.n	8015ad6 <WM_InvalidateWindowAndDescsEx+0x26e>
 8015be4:	a80b      	add	r0, sp, #44	; 0x2c
 8015be6:	f007 ff3b 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015bea:	4658      	mov	r0, fp
 8015bec:	f007 ff1c 	bl	801da28 <GUI_ALLOC_h2p>
 8015bf0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8015bf4:	f1bb 0f00 	cmp.w	fp, #0
 8015bf8:	f47f af33 	bne.w	8015a62 <WM_InvalidateWindowAndDescsEx+0x1fa>
 8015bfc:	e763      	b.n	8015ac6 <WM_InvalidateWindowAndDescsEx+0x25e>
 8015bfe:	bf00      	nop

08015c00 <WM__InvalidateRect>:
 8015c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c04:	460c      	mov	r4, r1
 8015c06:	b086      	sub	sp, #24
 8015c08:	4605      	mov	r5, r0
 8015c0a:	4617      	mov	r7, r2
 8015c0c:	461e      	mov	r6, r3
 8015c0e:	b911      	cbnz	r1, 8015c16 <WM__InvalidateRect+0x16>
 8015c10:	b006      	add	sp, #24
 8015c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c16:	4608      	mov	r0, r1
 8015c18:	f007 ff10 	bl	801da3c <GUI_ALLOC_LockH>
 8015c1c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8015c20:	9000      	str	r0, [sp, #0]
 8015c22:	f018 0f02 	tst.w	r8, #2
 8015c26:	d043      	beq.n	8015cb0 <WM__InvalidateRect+0xb0>
 8015c28:	4602      	mov	r2, r0
 8015c2a:	4629      	mov	r1, r5
 8015c2c:	a802      	add	r0, sp, #8
 8015c2e:	f004 fbc5 	bl	801a3bc <GUI__IntersectRects>
 8015c32:	2800      	cmp	r0, #0
 8015c34:	d03c      	beq.n	8015cb0 <WM__InvalidateRect+0xb0>
 8015c36:	f640 0301 	movw	r3, #2049	; 0x801
 8015c3a:	ea08 0303 	and.w	r3, r8, r3
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d040      	beq.n	8015cc4 <WM__InvalidateRect+0xc4>
 8015c42:	4620      	mov	r0, r4
 8015c44:	a902      	add	r1, sp, #8
 8015c46:	4632      	mov	r2, r6
 8015c48:	f7ff fb12 	bl	8015270 <_Invalidate1Abs>
 8015c4c:	9b00      	ldr	r3, [sp, #0]
 8015c4e:	69dc      	ldr	r4, [r3, #28]
 8015c50:	2c00      	cmp	r4, #0
 8015c52:	d02d      	beq.n	8015cb0 <WM__InvalidateRect+0xb0>
 8015c54:	42bc      	cmp	r4, r7
 8015c56:	d02b      	beq.n	8015cb0 <WM__InvalidateRect+0xb0>
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f007 feef 	bl	801da3c <GUI_ALLOC_LockH>
 8015c5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c60:	9001      	str	r0, [sp, #4]
 8015c62:	079b      	lsls	r3, r3, #30
 8015c64:	d52a      	bpl.n	8015cbc <WM__InvalidateRect+0xbc>
 8015c66:	4602      	mov	r2, r0
 8015c68:	a902      	add	r1, sp, #8
 8015c6a:	a804      	add	r0, sp, #16
 8015c6c:	f004 fba6 	bl	801a3bc <GUI__IntersectRects>
 8015c70:	b320      	cbz	r0, 8015cbc <WM__InvalidateRect+0xbc>
 8015c72:	a801      	add	r0, sp, #4
 8015c74:	f007 fef4 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015c78:	4620      	mov	r0, r4
 8015c7a:	a904      	add	r1, sp, #16
 8015c7c:	4632      	mov	r2, r6
 8015c7e:	f7ff faf7 	bl	8015270 <_Invalidate1Abs>
 8015c82:	4620      	mov	r0, r4
 8015c84:	f7fe f96e 	bl	8013f64 <WM_GetFirstChild>
 8015c88:	4605      	mov	r5, r0
 8015c8a:	b150      	cbz	r0, 8015ca2 <WM__InvalidateRect+0xa2>
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	a904      	add	r1, sp, #16
 8015c90:	4632      	mov	r2, r6
 8015c92:	f7ff fde9 	bl	8015868 <WM_InvalidateWindowAndDescsEx>
 8015c96:	4628      	mov	r0, r5
 8015c98:	f007 fec6 	bl	801da28 <GUI_ALLOC_h2p>
 8015c9c:	6a05      	ldr	r5, [r0, #32]
 8015c9e:	2d00      	cmp	r5, #0
 8015ca0:	d1f4      	bne.n	8015c8c <WM__InvalidateRect+0x8c>
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f007 fec0 	bl	801da28 <GUI_ALLOC_h2p>
 8015ca8:	6a04      	ldr	r4, [r0, #32]
 8015caa:	b10c      	cbz	r4, 8015cb0 <WM__InvalidateRect+0xb0>
 8015cac:	42a7      	cmp	r7, r4
 8015cae:	d1d3      	bne.n	8015c58 <WM__InvalidateRect+0x58>
 8015cb0:	4668      	mov	r0, sp
 8015cb2:	f007 fed5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015cb6:	b006      	add	sp, #24
 8015cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cbc:	a801      	add	r0, sp, #4
 8015cbe:	f007 fecf 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015cc2:	e7ee      	b.n	8015ca2 <WM__InvalidateRect+0xa2>
 8015cc4:	9b00      	ldr	r3, [sp, #0]
 8015cc6:	a802      	add	r0, sp, #8
 8015cc8:	6999      	ldr	r1, [r3, #24]
 8015cca:	6a1a      	ldr	r2, [r3, #32]
 8015ccc:	4633      	mov	r3, r6
 8015cce:	f7ff ff97 	bl	8015c00 <WM__InvalidateRect>
 8015cd2:	e7bb      	b.n	8015c4c <WM__InvalidateRect+0x4c>

08015cd4 <WM__DetachWindow>:
 8015cd4:	b570      	push	{r4, r5, r6, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	4604      	mov	r4, r0
 8015cda:	f007 feaf 	bl	801da3c <GUI_ALLOC_LockH>
 8015cde:	6981      	ldr	r1, [r0, #24]
 8015ce0:	9001      	str	r0, [sp, #4]
 8015ce2:	b921      	cbnz	r1, 8015cee <WM__DetachWindow+0x1a>
 8015ce4:	a801      	add	r0, sp, #4
 8015ce6:	f007 febb 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015cea:	b002      	add	sp, #8
 8015cec:	bd70      	pop	{r4, r5, r6, pc}
 8015cee:	6a02      	ldr	r2, [r0, #32]
 8015cf0:	2320      	movs	r3, #32
 8015cf2:	f7ff ff85 	bl	8015c00 <WM__InvalidateRect>
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f007 fe96 	bl	801da28 <GUI_ALLOC_h2p>
 8015cfc:	4605      	mov	r5, r0
 8015cfe:	6980      	ldr	r0, [r0, #24]
 8015d00:	b938      	cbnz	r0, 8015d12 <WM__DetachWindow+0x3e>
 8015d02:	9b01      	ldr	r3, [sp, #4]
 8015d04:	2200      	movs	r2, #0
 8015d06:	619a      	str	r2, [r3, #24]
 8015d08:	a801      	add	r0, sp, #4
 8015d0a:	f007 fea9 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015d0e:	b002      	add	sp, #8
 8015d10:	bd70      	pop	{r4, r5, r6, pc}
 8015d12:	f007 fe89 	bl	801da28 <GUI_ALLOC_h2p>
 8015d16:	69c3      	ldr	r3, [r0, #28]
 8015d18:	429c      	cmp	r4, r3
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	d00a      	beq.n	8015d34 <WM__DetachWindow+0x60>
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d0ef      	beq.n	8015d02 <WM__DetachWindow+0x2e>
 8015d22:	4618      	mov	r0, r3
 8015d24:	f007 fe80 	bl	801da28 <GUI_ALLOC_h2p>
 8015d28:	6a03      	ldr	r3, [r0, #32]
 8015d2a:	429c      	cmp	r4, r3
 8015d2c:	d1f7      	bne.n	8015d1e <WM__DetachWindow+0x4a>
 8015d2e:	6a2b      	ldr	r3, [r5, #32]
 8015d30:	6203      	str	r3, [r0, #32]
 8015d32:	e7e6      	b.n	8015d02 <WM__DetachWindow+0x2e>
 8015d34:	4620      	mov	r0, r4
 8015d36:	f007 fe77 	bl	801da28 <GUI_ALLOC_h2p>
 8015d3a:	6a03      	ldr	r3, [r0, #32]
 8015d3c:	61f3      	str	r3, [r6, #28]
 8015d3e:	e7e0      	b.n	8015d02 <WM__DetachWindow+0x2e>

08015d40 <WM_DeleteWindow.part.2>:
 8015d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d44:	4f69      	ldr	r7, [pc, #420]	; (8015eec <WM_DeleteWindow.part.2+0x1ac>)
 8015d46:	b085      	sub	sp, #20
 8015d48:	4604      	mov	r4, r0
 8015d4a:	f005 faf7 	bl	801b33c <GUI_Lock>
 8015d4e:	6838      	ldr	r0, [r7, #0]
 8015d50:	b930      	cbnz	r0, 8015d60 <WM_DeleteWindow.part.2+0x20>
 8015d52:	e0aa      	b.n	8015eaa <WM_DeleteWindow.part.2+0x16a>
 8015d54:	f007 fe68 	bl	801da28 <GUI_ALLOC_h2p>
 8015d58:	6940      	ldr	r0, [r0, #20]
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	f000 80a5 	beq.w	8015eaa <WM_DeleteWindow.part.2+0x16a>
 8015d60:	4284      	cmp	r4, r0
 8015d62:	d1f7      	bne.n	8015d54 <WM_DeleteWindow.part.2+0x14>
 8015d64:	4625      	mov	r5, r4
 8015d66:	e000      	b.n	8015d6a <WM_DeleteWindow.part.2+0x2a>
 8015d68:	461d      	mov	r5, r3
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f007 fe5c 	bl	801da28 <GUI_ALLOC_h2p>
 8015d70:	6983      	ldr	r3, [r0, #24]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d1f8      	bne.n	8015d68 <WM_DeleteWindow.part.2+0x28>
 8015d76:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8015f10 <WM_DeleteWindow.part.2+0x1d0>
 8015d7a:	f8d8 2000 	ldr.w	r2, [r8]
 8015d7e:	4295      	cmp	r5, r2
 8015d80:	f000 80ab 	beq.w	8015eda <WM_DeleteWindow.part.2+0x19a>
 8015d84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d88:	429d      	cmp	r5, r3
 8015d8a:	bf14      	ite	ne
 8015d8c:	f04f 35ff 	movne.w	r5, #4294967295
 8015d90:	2501      	moveq	r5, #1
 8015d92:	f10d 0910 	add.w	r9, sp, #16
 8015d96:	230b      	movs	r3, #11
 8015d98:	4669      	mov	r1, sp
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f849 3d10 	str.w	r3, [r9, #-16]!
 8015da0:	9401      	str	r4, [sp, #4]
 8015da2:	f7fd f901 	bl	8012fa8 <WM__SendMessage>
 8015da6:	4620      	mov	r0, r4
 8015da8:	f7fd f9fc 	bl	80131a4 <WM__DeleteAssocTimer>
 8015dac:	4620      	mov	r0, r4
 8015dae:	f007 fe45 	bl	801da3c <GUI_ALLOC_LockH>
 8015db2:	9000      	str	r0, [sp, #0]
 8015db4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015db6:	2800      	cmp	r0, #0
 8015db8:	f040 808c 	bne.w	8015ed4 <WM_DeleteWindow.part.2+0x194>
 8015dbc:	4b4c      	ldr	r3, [pc, #304]	; (8015ef0 <WM_DeleteWindow.part.2+0x1b0>)
 8015dbe:	4a4d      	ldr	r2, [pc, #308]	; (8015ef4 <WM_DeleteWindow.part.2+0x1b4>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	4e4d      	ldr	r6, [pc, #308]	; (8015ef8 <WM_DeleteWindow.part.2+0x1b8>)
 8015dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015dc8:	2100      	movs	r1, #0
 8015dca:	4284      	cmp	r4, r0
 8015dcc:	bf08      	it	eq
 8015dce:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8015dd2:	4a4a      	ldr	r2, [pc, #296]	; (8015efc <WM_DeleteWindow.part.2+0x1bc>)
 8015dd4:	6031      	str	r1, [r6, #0]
 8015dd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015dda:	428c      	cmp	r4, r1
 8015ddc:	bf04      	itt	eq
 8015dde:	2100      	moveq	r1, #0
 8015de0:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8015de4:	4b46      	ldr	r3, [pc, #280]	; (8015f00 <WM_DeleteWindow.part.2+0x1c0>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2100      	movs	r1, #0
 8015dea:	b133      	cbz	r3, 8015dfa <WM_DeleteWindow.part.2+0xba>
 8015dec:	685a      	ldr	r2, [r3, #4]
 8015dee:	4294      	cmp	r4, r2
 8015df0:	bf08      	it	eq
 8015df2:	6059      	streq	r1, [r3, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1f8      	bne.n	8015dec <WM_DeleteWindow.part.2+0xac>
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	2107      	movs	r1, #7
 8015dfe:	f7fe fbab 	bl	8014558 <WM_NotifyParent>
 8015e02:	9e00      	ldr	r6, [sp, #0]
 8015e04:	69f0      	ldr	r0, [r6, #28]
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d154      	bne.n	8015eb4 <WM_DeleteWindow.part.2+0x174>
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f7ff ff62 	bl	8015cd4 <WM__DetachWindow>
 8015e10:	6838      	ldr	r0, [r7, #0]
 8015e12:	b908      	cbnz	r0, 8015e18 <WM_DeleteWindow.part.2+0xd8>
 8015e14:	e00b      	b.n	8015e2e <WM_DeleteWindow.part.2+0xee>
 8015e16:	b150      	cbz	r0, 8015e2e <WM_DeleteWindow.part.2+0xee>
 8015e18:	f007 fe06 	bl	801da28 <GUI_ALLOC_h2p>
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	6940      	ldr	r0, [r0, #20]
 8015e20:	4284      	cmp	r4, r0
 8015e22:	d1f8      	bne.n	8015e16 <WM_DeleteWindow.part.2+0xd6>
 8015e24:	4620      	mov	r0, r4
 8015e26:	f007 fdff 	bl	801da28 <GUI_ALLOC_h2p>
 8015e2a:	6943      	ldr	r3, [r0, #20]
 8015e2c:	6173      	str	r3, [r6, #20]
 8015e2e:	9b00      	ldr	r3, [sp, #0]
 8015e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e32:	07d9      	lsls	r1, r3, #31
 8015e34:	d503      	bpl.n	8015e3e <WM_DeleteWindow.part.2+0xfe>
 8015e36:	4a33      	ldr	r2, [pc, #204]	; (8015f04 <WM_DeleteWindow.part.2+0x1c4>)
 8015e38:	6811      	ldr	r1, [r2, #0]
 8015e3a:	3901      	subs	r1, #1
 8015e3c:	6011      	str	r1, [r2, #0]
 8015e3e:	069a      	lsls	r2, r3, #26
 8015e40:	d443      	bmi.n	8015eca <WM_DeleteWindow.part.2+0x18a>
 8015e42:	4668      	mov	r0, sp
 8015e44:	f007 fe0c 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015e48:	4b2f      	ldr	r3, [pc, #188]	; (8015f08 <WM_DeleteWindow.part.2+0x1c8>)
 8015e4a:	881a      	ldrh	r2, [r3, #0]
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	3a01      	subs	r2, #1
 8015e50:	801a      	strh	r2, [r3, #0]
 8015e52:	f007 ff05 	bl	801dc60 <GUI_ALLOC_Free>
 8015e56:	1c6b      	adds	r3, r5, #1
 8015e58:	d027      	beq.n	8015eaa <WM_DeleteWindow.part.2+0x16a>
 8015e5a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8015e5e:	4e2b      	ldr	r6, [pc, #172]	; (8015f0c <WM_DeleteWindow.part.2+0x1cc>)
 8015e60:	f005 fa6c 	bl	801b33c <GUI_Lock>
 8015e64:	6833      	ldr	r3, [r6, #0]
 8015e66:	b905      	cbnz	r5, 8015e6a <WM_DeleteWindow.part.2+0x12a>
 8015e68:	683d      	ldr	r5, [r7, #0]
 8015e6a:	649d      	str	r5, [r3, #72]	; 0x48
 8015e6c:	462c      	mov	r4, r5
 8015e6e:	e000      	b.n	8015e72 <WM_DeleteWindow.part.2+0x132>
 8015e70:	461c      	mov	r4, r3
 8015e72:	4620      	mov	r0, r4
 8015e74:	f007 fdd8 	bl	801da28 <GUI_ALLOC_h2p>
 8015e78:	6983      	ldr	r3, [r0, #24]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d1f8      	bne.n	8015e70 <WM_DeleteWindow.part.2+0x130>
 8015e7e:	f8d8 2000 	ldr.w	r2, [r8]
 8015e82:	4923      	ldr	r1, [pc, #140]	; (8015f10 <WM_DeleteWindow.part.2+0x1d0>)
 8015e84:	4294      	cmp	r4, r2
 8015e86:	d02a      	beq.n	8015ede <WM_DeleteWindow.part.2+0x19e>
 8015e88:	684b      	ldr	r3, [r1, #4]
 8015e8a:	429c      	cmp	r4, r3
 8015e8c:	d02b      	beq.n	8015ee6 <WM_DeleteWindow.part.2+0x1a6>
 8015e8e:	f004 f8f7 	bl	801a080 <LCD_SetClipRectMax>
 8015e92:	4628      	mov	r0, r5
 8015e94:	f007 fdc8 	bl	801da28 <GUI_ALLOC_h2p>
 8015e98:	6833      	ldr	r3, [r6, #0]
 8015e9a:	f9b0 1000 	ldrsh.w	r1, [r0]
 8015e9e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8015ea4:	64d9      	str	r1, [r3, #76]	; 0x4c
 8015ea6:	f005 fa3f 	bl	801b328 <GUI_Unlock>
 8015eaa:	f005 fa3d 	bl	801b328 <GUI_Unlock>
 8015eae:	b005      	add	sp, #20
 8015eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eb4:	f7ff ff44 	bl	8015d40 <WM_DeleteWindow.part.2>
 8015eb8:	69f0      	ldr	r0, [r6, #28]
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d0a5      	beq.n	8015e0a <WM_DeleteWindow.part.2+0xca>
 8015ebe:	f7ff ff3f 	bl	8015d40 <WM_DeleteWindow.part.2>
 8015ec2:	69f0      	ldr	r0, [r6, #28]
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d1f5      	bne.n	8015eb4 <WM_DeleteWindow.part.2+0x174>
 8015ec8:	e79f      	b.n	8015e0a <WM_DeleteWindow.part.2+0xca>
 8015eca:	4b12      	ldr	r3, [pc, #72]	; (8015f14 <WM_DeleteWindow.part.2+0x1d4>)
 8015ecc:	881a      	ldrh	r2, [r3, #0]
 8015ece:	3a01      	subs	r2, #1
 8015ed0:	801a      	strh	r2, [r3, #0]
 8015ed2:	e7b6      	b.n	8015e42 <WM_DeleteWindow.part.2+0x102>
 8015ed4:	f002 fa8a 	bl	80183ec <GUI_MEMDEV_Delete>
 8015ed8:	e770      	b.n	8015dbc <WM_DeleteWindow.part.2+0x7c>
 8015eda:	461d      	mov	r5, r3
 8015edc:	e759      	b.n	8015d92 <WM_DeleteWindow.part.2+0x52>
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f005 fb4c 	bl	801b57c <GUI_SelectLayer>
 8015ee4:	e7d3      	b.n	8015e8e <WM_DeleteWindow.part.2+0x14e>
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	e7fa      	b.n	8015ee0 <WM_DeleteWindow.part.2+0x1a0>
 8015eea:	bf00      	nop
 8015eec:	2002cb1c 	.word	0x2002cb1c
 8015ef0:	2002cb20 	.word	0x2002cb20
 8015ef4:	2002cb10 	.word	0x2002cb10
 8015ef8:	2002b194 	.word	0x2002b194
 8015efc:	2002cb44 	.word	0x2002cb44
 8015f00:	2002cb3c 	.word	0x2002cb3c
 8015f04:	2002cb50 	.word	0x2002cb50
 8015f08:	2002caf8 	.word	0x2002caf8
 8015f0c:	2000027c 	.word	0x2000027c
 8015f10:	2002cb00 	.word	0x2002cb00
 8015f14:	2002cb18 	.word	0x2002cb18

08015f18 <_Exec1Input>:
 8015f18:	b570      	push	{r4, r5, r6, lr}
 8015f1a:	4e1f      	ldr	r6, [pc, #124]	; (8015f98 <_Exec1Input+0x80>)
 8015f1c:	6833      	ldr	r3, [r6, #0]
 8015f1e:	b082      	sub	sp, #8
 8015f20:	b9cb      	cbnz	r3, 8015f56 <_Exec1Input+0x3e>
 8015f22:	4b1e      	ldr	r3, [pc, #120]	; (8015f9c <_Exec1Input+0x84>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	b103      	cbz	r3, 8015f2a <_Exec1Input+0x12>
 8015f28:	4798      	blx	r3
 8015f2a:	4b1d      	ldr	r3, [pc, #116]	; (8015fa0 <_Exec1Input+0x88>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	b10b      	cbz	r3, 8015f34 <_Exec1Input+0x1c>
 8015f30:	4798      	blx	r3
 8015f32:	b968      	cbnz	r0, 8015f50 <_Exec1Input+0x38>
 8015f34:	4b1b      	ldr	r3, [pc, #108]	; (8015fa4 <_Exec1Input+0x8c>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8015f3c:	b908      	cbnz	r0, 8015f42 <_Exec1Input+0x2a>
 8015f3e:	b002      	add	sp, #8
 8015f40:	bd70      	pop	{r4, r5, r6, pc}
 8015f42:	f005 fb43 	bl	801b5cc <GUI_PollKeyMsg>
 8015f46:	3000      	adds	r0, #0
 8015f48:	bf18      	it	ne
 8015f4a:	2001      	movne	r0, #1
 8015f4c:	b002      	add	sp, #8
 8015f4e:	bd70      	pop	{r4, r5, r6, pc}
 8015f50:	2001      	movs	r0, #1
 8015f52:	b002      	add	sp, #8
 8015f54:	bd70      	pop	{r4, r5, r6, pc}
 8015f56:	f005 f9f1 	bl	801b33c <GUI_Lock>
 8015f5a:	4b13      	ldr	r3, [pc, #76]	; (8015fa8 <_Exec1Input+0x90>)
 8015f5c:	681c      	ldr	r4, [r3, #0]
 8015f5e:	b194      	cbz	r4, 8015f86 <_Exec1Input+0x6e>
 8015f60:	4620      	mov	r0, r4
 8015f62:	f007 fd6b 	bl	801da3c <GUI_ALLOC_LockH>
 8015f66:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8015f68:	9001      	str	r0, [sp, #4]
 8015f6a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8015f6e:	4603      	mov	r3, r0
 8015f70:	a801      	add	r0, sp, #4
 8015f72:	d00d      	beq.n	8015f90 <_Exec1Input+0x78>
 8015f74:	695d      	ldr	r5, [r3, #20]
 8015f76:	f007 fd73 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	462c      	mov	r4, r5
 8015f7e:	f7ff fedf 	bl	8015d40 <WM_DeleteWindow.part.2>
 8015f82:	2c00      	cmp	r4, #0
 8015f84:	d1ec      	bne.n	8015f60 <_Exec1Input+0x48>
 8015f86:	2300      	movs	r3, #0
 8015f88:	6033      	str	r3, [r6, #0]
 8015f8a:	f005 f9cd 	bl	801b328 <GUI_Unlock>
 8015f8e:	e7c8      	b.n	8015f22 <_Exec1Input+0xa>
 8015f90:	695c      	ldr	r4, [r3, #20]
 8015f92:	f007 fd65 	bl	801da60 <GUI_ALLOC_UnlockH>
 8015f96:	e7e2      	b.n	8015f5e <_Exec1Input+0x46>
 8015f98:	2002b170 	.word	0x2002b170
 8015f9c:	2002cb08 	.word	0x2002cb08
 8015fa0:	2002cbd8 	.word	0x2002cbd8
 8015fa4:	2000027c 	.word	0x2000027c
 8015fa8:	2002cb1c 	.word	0x2002cb1c

08015fac <WM__InvalidateParent>:
 8015fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	4608      	mov	r0, r1
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	4617      	mov	r7, r2
 8015fba:	f007 fd35 	bl	801da28 <GUI_ALLOC_h2p>
 8015fbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015fc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8015fc4:	bf0c      	ite	eq
 8015fc6:	2620      	moveq	r6, #32
 8015fc8:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 8015fcc:	b914      	cbnz	r4, 8015fd4 <WM__InvalidateParent+0x28>
 8015fce:	b006      	add	sp, #24
 8015fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f007 fd31 	bl	801da3c <GUI_ALLOC_LockH>
 8015fda:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8015fde:	9000      	str	r0, [sp, #0]
 8015fe0:	f018 0f02 	tst.w	r8, #2
 8015fe4:	d042      	beq.n	801606c <WM__InvalidateParent+0xc0>
 8015fe6:	4602      	mov	r2, r0
 8015fe8:	4629      	mov	r1, r5
 8015fea:	a802      	add	r0, sp, #8
 8015fec:	f004 f9e6 	bl	801a3bc <GUI__IntersectRects>
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	d03b      	beq.n	801606c <WM__InvalidateParent+0xc0>
 8015ff4:	f640 0301 	movw	r3, #2049	; 0x801
 8015ff8:	ea08 0303 	and.w	r3, r8, r3
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	d045      	beq.n	801608c <WM__InvalidateParent+0xe0>
 8016000:	4620      	mov	r0, r4
 8016002:	a902      	add	r1, sp, #8
 8016004:	4632      	mov	r2, r6
 8016006:	f7ff f933 	bl	8015270 <_Invalidate1Abs>
 801600a:	9b00      	ldr	r3, [sp, #0]
 801600c:	69dc      	ldr	r4, [r3, #28]
 801600e:	2c00      	cmp	r4, #0
 8016010:	d02c      	beq.n	801606c <WM__InvalidateParent+0xc0>
 8016012:	42a7      	cmp	r7, r4
 8016014:	d02a      	beq.n	801606c <WM__InvalidateParent+0xc0>
 8016016:	4620      	mov	r0, r4
 8016018:	f007 fd10 	bl	801da3c <GUI_ALLOC_LockH>
 801601c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801601e:	9001      	str	r0, [sp, #4]
 8016020:	079b      	lsls	r3, r3, #30
 8016022:	d529      	bpl.n	8016078 <WM__InvalidateParent+0xcc>
 8016024:	4602      	mov	r2, r0
 8016026:	a902      	add	r1, sp, #8
 8016028:	a804      	add	r0, sp, #16
 801602a:	f004 f9c7 	bl	801a3bc <GUI__IntersectRects>
 801602e:	b318      	cbz	r0, 8016078 <WM__InvalidateParent+0xcc>
 8016030:	a801      	add	r0, sp, #4
 8016032:	f007 fd15 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016036:	4620      	mov	r0, r4
 8016038:	a904      	add	r1, sp, #16
 801603a:	4632      	mov	r2, r6
 801603c:	f7ff f918 	bl	8015270 <_Invalidate1Abs>
 8016040:	4620      	mov	r0, r4
 8016042:	f7fd ff8f 	bl	8013f64 <WM_GetFirstChild>
 8016046:	4605      	mov	r5, r0
 8016048:	b150      	cbz	r0, 8016060 <WM__InvalidateParent+0xb4>
 801604a:	4628      	mov	r0, r5
 801604c:	a904      	add	r1, sp, #16
 801604e:	4632      	mov	r2, r6
 8016050:	f7ff fc0a 	bl	8015868 <WM_InvalidateWindowAndDescsEx>
 8016054:	4628      	mov	r0, r5
 8016056:	f007 fce7 	bl	801da28 <GUI_ALLOC_h2p>
 801605a:	6a05      	ldr	r5, [r0, #32]
 801605c:	2d00      	cmp	r5, #0
 801605e:	d1f4      	bne.n	801604a <WM__InvalidateParent+0x9e>
 8016060:	4620      	mov	r0, r4
 8016062:	f007 fce1 	bl	801da28 <GUI_ALLOC_h2p>
 8016066:	6a04      	ldr	r4, [r0, #32]
 8016068:	2c00      	cmp	r4, #0
 801606a:	d1d2      	bne.n	8016012 <WM__InvalidateParent+0x66>
 801606c:	4668      	mov	r0, sp
 801606e:	f007 fcf7 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016072:	b006      	add	sp, #24
 8016074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016078:	a801      	add	r0, sp, #4
 801607a:	f007 fcf1 	bl	801da60 <GUI_ALLOC_UnlockH>
 801607e:	4620      	mov	r0, r4
 8016080:	f007 fcd2 	bl	801da28 <GUI_ALLOC_h2p>
 8016084:	6a04      	ldr	r4, [r0, #32]
 8016086:	2c00      	cmp	r4, #0
 8016088:	d1c3      	bne.n	8016012 <WM__InvalidateParent+0x66>
 801608a:	e7ef      	b.n	801606c <WM__InvalidateParent+0xc0>
 801608c:	9b00      	ldr	r3, [sp, #0]
 801608e:	a802      	add	r0, sp, #8
 8016090:	6999      	ldr	r1, [r3, #24]
 8016092:	6a1a      	ldr	r2, [r3, #32]
 8016094:	4633      	mov	r3, r6
 8016096:	f7ff fdb3 	bl	8015c00 <WM__InvalidateRect>
 801609a:	e7b6      	b.n	801600a <WM__InvalidateParent+0x5e>

0801609c <WM__InvalidateRectEx>:
 801609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801609e:	460c      	mov	r4, r1
 80160a0:	b087      	sub	sp, #28
 80160a2:	4605      	mov	r5, r0
 80160a4:	4616      	mov	r6, r2
 80160a6:	b909      	cbnz	r1, 80160ac <WM__InvalidateRectEx+0x10>
 80160a8:	b007      	add	sp, #28
 80160aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ac:	4608      	mov	r0, r1
 80160ae:	f007 fcc5 	bl	801da3c <GUI_ALLOC_LockH>
 80160b2:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80160b4:	9000      	str	r0, [sp, #0]
 80160b6:	07ba      	lsls	r2, r7, #30
 80160b8:	d541      	bpl.n	801613e <WM__InvalidateRectEx+0xa2>
 80160ba:	4602      	mov	r2, r0
 80160bc:	4629      	mov	r1, r5
 80160be:	a802      	add	r0, sp, #8
 80160c0:	f004 f97c 	bl	801a3bc <GUI__IntersectRects>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d03a      	beq.n	801613e <WM__InvalidateRectEx+0xa2>
 80160c8:	f640 0301 	movw	r3, #2049	; 0x801
 80160cc:	403b      	ands	r3, r7
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d044      	beq.n	801615c <WM__InvalidateRectEx+0xc0>
 80160d2:	4620      	mov	r0, r4
 80160d4:	a902      	add	r1, sp, #8
 80160d6:	2220      	movs	r2, #32
 80160d8:	f7ff f8ca 	bl	8015270 <_Invalidate1Abs>
 80160dc:	9b00      	ldr	r3, [sp, #0]
 80160de:	69dc      	ldr	r4, [r3, #28]
 80160e0:	2c00      	cmp	r4, #0
 80160e2:	d02c      	beq.n	801613e <WM__InvalidateRectEx+0xa2>
 80160e4:	42a6      	cmp	r6, r4
 80160e6:	d02a      	beq.n	801613e <WM__InvalidateRectEx+0xa2>
 80160e8:	4620      	mov	r0, r4
 80160ea:	f007 fca7 	bl	801da3c <GUI_ALLOC_LockH>
 80160ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80160f0:	9001      	str	r0, [sp, #4]
 80160f2:	079b      	lsls	r3, r3, #30
 80160f4:	d528      	bpl.n	8016148 <WM__InvalidateRectEx+0xac>
 80160f6:	4602      	mov	r2, r0
 80160f8:	a902      	add	r1, sp, #8
 80160fa:	a804      	add	r0, sp, #16
 80160fc:	f004 f95e 	bl	801a3bc <GUI__IntersectRects>
 8016100:	b310      	cbz	r0, 8016148 <WM__InvalidateRectEx+0xac>
 8016102:	a801      	add	r0, sp, #4
 8016104:	f007 fcac 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016108:	4620      	mov	r0, r4
 801610a:	a904      	add	r1, sp, #16
 801610c:	2220      	movs	r2, #32
 801610e:	f7ff f8af 	bl	8015270 <_Invalidate1Abs>
 8016112:	4620      	mov	r0, r4
 8016114:	f7fd ff26 	bl	8013f64 <WM_GetFirstChild>
 8016118:	4605      	mov	r5, r0
 801611a:	b150      	cbz	r0, 8016132 <WM__InvalidateRectEx+0x96>
 801611c:	4628      	mov	r0, r5
 801611e:	a904      	add	r1, sp, #16
 8016120:	2220      	movs	r2, #32
 8016122:	f7ff fba1 	bl	8015868 <WM_InvalidateWindowAndDescsEx>
 8016126:	4628      	mov	r0, r5
 8016128:	f007 fc7e 	bl	801da28 <GUI_ALLOC_h2p>
 801612c:	6a05      	ldr	r5, [r0, #32]
 801612e:	2d00      	cmp	r5, #0
 8016130:	d1f4      	bne.n	801611c <WM__InvalidateRectEx+0x80>
 8016132:	4620      	mov	r0, r4
 8016134:	f007 fc78 	bl	801da28 <GUI_ALLOC_h2p>
 8016138:	6a04      	ldr	r4, [r0, #32]
 801613a:	2c00      	cmp	r4, #0
 801613c:	d1d2      	bne.n	80160e4 <WM__InvalidateRectEx+0x48>
 801613e:	4668      	mov	r0, sp
 8016140:	f007 fc8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016144:	b007      	add	sp, #28
 8016146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016148:	a801      	add	r0, sp, #4
 801614a:	f007 fc89 	bl	801da60 <GUI_ALLOC_UnlockH>
 801614e:	4620      	mov	r0, r4
 8016150:	f007 fc6a 	bl	801da28 <GUI_ALLOC_h2p>
 8016154:	6a04      	ldr	r4, [r0, #32]
 8016156:	2c00      	cmp	r4, #0
 8016158:	d1c4      	bne.n	80160e4 <WM__InvalidateRectEx+0x48>
 801615a:	e7f0      	b.n	801613e <WM__InvalidateRectEx+0xa2>
 801615c:	9b00      	ldr	r3, [sp, #0]
 801615e:	a802      	add	r0, sp, #8
 8016160:	6999      	ldr	r1, [r3, #24]
 8016162:	6a1a      	ldr	r2, [r3, #32]
 8016164:	2320      	movs	r3, #32
 8016166:	f7ff fd4b 	bl	8015c00 <WM__InvalidateRect>
 801616a:	e7b7      	b.n	80160dc <WM__InvalidateRectEx+0x40>

0801616c <WM_SendMessage>:
 801616c:	b538      	push	{r3, r4, r5, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	460d      	mov	r5, r1
 8016172:	b900      	cbnz	r0, 8016176 <WM_SendMessage+0xa>
 8016174:	bd38      	pop	{r3, r4, r5, pc}
 8016176:	f005 f8e1 	bl	801b33c <GUI_Lock>
 801617a:	4620      	mov	r0, r4
 801617c:	4629      	mov	r1, r5
 801617e:	f7fc ff13 	bl	8012fa8 <WM__SendMessage>
 8016182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016186:	f005 b8cf 	b.w	801b328 <GUI_Unlock>
 801618a:	bf00      	nop

0801618c <WM__SendMsgNoData>:
 801618c:	b500      	push	{lr}
 801618e:	b085      	sub	sp, #20
 8016190:	ab04      	add	r3, sp, #16
 8016192:	9001      	str	r0, [sp, #4]
 8016194:	f843 1d10 	str.w	r1, [r3, #-16]!
 8016198:	4669      	mov	r1, sp
 801619a:	f7fc ff05 	bl	8012fa8 <WM__SendMessage>
 801619e:	b005      	add	sp, #20
 80161a0:	f85d fb04 	ldr.w	pc, [sp], #4

080161a4 <WM__GetClientRectWin>:
 80161a4:	2300      	movs	r3, #0
 80161a6:	800b      	strh	r3, [r1, #0]
 80161a8:	804b      	strh	r3, [r1, #2]
 80161aa:	8802      	ldrh	r2, [r0, #0]
 80161ac:	8843      	ldrh	r3, [r0, #2]
 80161ae:	b410      	push	{r4}
 80161b0:	8884      	ldrh	r4, [r0, #4]
 80161b2:	88c0      	ldrh	r0, [r0, #6]
 80161b4:	1aa2      	subs	r2, r4, r2
 80161b6:	1ac3      	subs	r3, r0, r3
 80161b8:	808a      	strh	r2, [r1, #4]
 80161ba:	80cb      	strh	r3, [r1, #6]
 80161bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop

080161c4 <WM_InvalidateRect>:
 80161c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c8:	4607      	mov	r7, r0
 80161ca:	b086      	sub	sp, #24
 80161cc:	460c      	mov	r4, r1
 80161ce:	b910      	cbnz	r0, 80161d6 <WM_InvalidateRect+0x12>
 80161d0:	b006      	add	sp, #24
 80161d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161d6:	f005 f8b1 	bl	801b33c <GUI_Lock>
 80161da:	4638      	mov	r0, r7
 80161dc:	f007 fc2e 	bl	801da3c <GUI_ALLOC_LockH>
 80161e0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80161e4:	9000      	str	r0, [sp, #0]
 80161e6:	f018 0f02 	tst.w	r8, #2
 80161ea:	d02e      	beq.n	801624a <WM_InvalidateRect+0x86>
 80161ec:	c803      	ldmia	r0, {r0, r1}
 80161ee:	ae04      	add	r6, sp, #16
 80161f0:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80161f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80161f8:	d12f      	bne.n	801625a <WM_InvalidateRect+0x96>
 80161fa:	b17c      	cbz	r4, 801621c <WM_InvalidateRect+0x58>
 80161fc:	6820      	ldr	r0, [r4, #0]
 80161fe:	6861      	ldr	r1, [r4, #4]
 8016200:	9c00      	ldr	r4, [sp, #0]
 8016202:	ab02      	add	r3, sp, #8
 8016204:	c303      	stmia	r3!, {r0, r1}
 8016206:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801620a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801620e:	a802      	add	r0, sp, #8
 8016210:	f006 fa9a 	bl	801c748 <GUI_MoveRect>
 8016214:	4630      	mov	r0, r6
 8016216:	a902      	add	r1, sp, #8
 8016218:	f004 f8b0 	bl	801a37c <GUI__IntersectRect>
 801621c:	463d      	mov	r5, r7
 801621e:	e008      	b.n	8016232 <WM_InvalidateRect+0x6e>
 8016220:	f004 f8ac 	bl	801a37c <GUI__IntersectRect>
 8016224:	9b01      	ldr	r3, [sp, #4]
 8016226:	699c      	ldr	r4, [r3, #24]
 8016228:	a801      	add	r0, sp, #4
 801622a:	b1d4      	cbz	r4, 8016262 <WM_InvalidateRect+0x9e>
 801622c:	f007 fc18 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016230:	4625      	mov	r5, r4
 8016232:	4628      	mov	r0, r5
 8016234:	f007 fc02 	bl	801da3c <GUI_ALLOC_LockH>
 8016238:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801623a:	9001      	str	r0, [sp, #4]
 801623c:	0793      	lsls	r3, r2, #30
 801623e:	4601      	mov	r1, r0
 8016240:	4630      	mov	r0, r6
 8016242:	d4ed      	bmi.n	8016220 <WM_InvalidateRect+0x5c>
 8016244:	a801      	add	r0, sp, #4
 8016246:	f007 fc0b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801624a:	4668      	mov	r0, sp
 801624c:	f007 fc08 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016250:	f005 f86a 	bl	801b328 <GUI_Unlock>
 8016254:	b006      	add	sp, #24
 8016256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801625a:	4638      	mov	r0, r7
 801625c:	f7ff f9b0 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 8016260:	e7cb      	b.n	80161fa <WM_InvalidateRect+0x36>
 8016262:	f007 fbfd 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016266:	4b0d      	ldr	r3, [pc, #52]	; (801629c <WM_InvalidateRect+0xd8>)
 8016268:	681a      	ldr	r2, [r3, #0]
 801626a:	4295      	cmp	r5, r2
 801626c:	d002      	beq.n	8016274 <WM_InvalidateRect+0xb0>
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	429d      	cmp	r5, r3
 8016272:	d1ea      	bne.n	801624a <WM_InvalidateRect+0x86>
 8016274:	f640 0301 	movw	r3, #2049	; 0x801
 8016278:	ea08 0303 	and.w	r3, r8, r3
 801627c:	2b01      	cmp	r3, #1
 801627e:	d005      	beq.n	801628c <WM_InvalidateRect+0xc8>
 8016280:	4638      	mov	r0, r7
 8016282:	4631      	mov	r1, r6
 8016284:	2220      	movs	r2, #32
 8016286:	f7fe fff3 	bl	8015270 <_Invalidate1Abs>
 801628a:	e7de      	b.n	801624a <WM_InvalidateRect+0x86>
 801628c:	9b00      	ldr	r3, [sp, #0]
 801628e:	4630      	mov	r0, r6
 8016290:	6999      	ldr	r1, [r3, #24]
 8016292:	6a1a      	ldr	r2, [r3, #32]
 8016294:	2320      	movs	r3, #32
 8016296:	f7ff fcb3 	bl	8015c00 <WM__InvalidateRect>
 801629a:	e7d6      	b.n	801624a <WM_InvalidateRect+0x86>
 801629c:	2002cb00 	.word	0x2002cb00

080162a0 <_cbBackWin>:
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	2b0e      	cmp	r3, #14
 80162a4:	b510      	push	{r4, lr}
 80162a6:	4604      	mov	r4, r0
 80162a8:	d032      	beq.n	8016310 <_cbBackWin+0x70>
 80162aa:	2b0f      	cmp	r3, #15
 80162ac:	d116      	bne.n	80162dc <_cbBackWin+0x3c>
 80162ae:	4a26      	ldr	r2, [pc, #152]	; (8016348 <_cbBackWin+0xa8>)
 80162b0:	6843      	ldr	r3, [r0, #4]
 80162b2:	6811      	ldr	r1, [r2, #0]
 80162b4:	428b      	cmp	r3, r1
 80162b6:	d044      	beq.n	8016342 <_cbBackWin+0xa2>
 80162b8:	6852      	ldr	r2, [r2, #4]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	bf14      	ite	ne
 80162be:	f04f 33ff 	movne.w	r3, #4294967295
 80162c2:	2301      	moveq	r3, #1
 80162c4:	4a21      	ldr	r2, [pc, #132]	; (801634c <_cbBackWin+0xac>)
 80162c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80162ca:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80162ce:	4298      	cmp	r0, r3
 80162d0:	d01b      	beq.n	801630a <_cbBackWin+0x6a>
 80162d2:	f006 fac3 	bl	801c85c <GUI_SetBkColor>
 80162d6:	f005 ff69 	bl	801c1ac <GUI_Clear>
 80162da:	6823      	ldr	r3, [r4, #0]
 80162dc:	3b0e      	subs	r3, #14
 80162de:	6860      	ldr	r0, [r4, #4]
 80162e0:	68e1      	ldr	r1, [r4, #12]
 80162e2:	2b1a      	cmp	r3, #26
 80162e4:	d811      	bhi.n	801630a <_cbBackWin+0x6a>
 80162e6:	e8df f003 	tbb	[pc, r3]
 80162ea:	101c      	.short	0x101c
 80162ec:	10101010 	.word	0x10101010
 80162f0:	2110100e 	.word	0x2110100e
 80162f4:	10101010 	.word	0x10101010
 80162f8:	10101010 	.word	0x10101010
 80162fc:	10231010 	.word	0x10231010
 8016300:	10101010 	.word	0x10101010
 8016304:	27          	.byte	0x27
 8016305:	00          	.byte	0x00
 8016306:	f7fc ff23 	bl	8013150 <WM__GetClientRectEx>
 801630a:	2300      	movs	r3, #0
 801630c:	60e3      	str	r3, [r4, #12]
 801630e:	bd10      	pop	{r4, pc}
 8016310:	68c3      	ldr	r3, [r0, #12]
 8016312:	685a      	ldr	r2, [r3, #4]
 8016314:	2a01      	cmp	r2, #1
 8016316:	d1fa      	bne.n	801630e <_cbBackWin+0x6e>
 8016318:	6818      	ldr	r0, [r3, #0]
 801631a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801631e:	f005 b94d 	b.w	801b5bc <GUI_StoreKey>
 8016322:	4621      	mov	r1, r4
 8016324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016328:	f7fe b976 	b.w	8014618 <WM_SendToParent>
 801632c:	60e0      	str	r0, [r4, #12]
 801632e:	bd10      	pop	{r4, pc}
 8016330:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8016334:	60e3      	str	r3, [r4, #12]
 8016336:	bd10      	pop	{r4, pc}
 8016338:	2100      	movs	r1, #0
 801633a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801633e:	f7ff bf41 	b.w	80161c4 <WM_InvalidateRect>
 8016342:	2300      	movs	r3, #0
 8016344:	e7be      	b.n	80162c4 <_cbBackWin+0x24>
 8016346:	bf00      	nop
 8016348:	2002cb00 	.word	0x2002cb00
 801634c:	2002cb34 	.word	0x2002cb34

08016350 <WM_InvalidateWindow>:
 8016350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016354:	4607      	mov	r7, r0
 8016356:	b084      	sub	sp, #16
 8016358:	b910      	cbnz	r0, 8016360 <WM_InvalidateWindow+0x10>
 801635a:	b004      	add	sp, #16
 801635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016360:	f004 ffec 	bl	801b33c <GUI_Lock>
 8016364:	4638      	mov	r0, r7
 8016366:	f007 fb69 	bl	801da3c <GUI_ALLOC_LockH>
 801636a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801636e:	9000      	str	r0, [sp, #0]
 8016370:	f018 0f02 	tst.w	r8, #2
 8016374:	d01d      	beq.n	80163b2 <WM_InvalidateWindow+0x62>
 8016376:	c803      	ldmia	r0, {r0, r1}
 8016378:	ae02      	add	r6, sp, #8
 801637a:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801637e:	e886 0003 	stmia.w	r6, {r0, r1}
 8016382:	d133      	bne.n	80163ec <WM_InvalidateWindow+0x9c>
 8016384:	463d      	mov	r5, r7
 8016386:	e008      	b.n	801639a <WM_InvalidateWindow+0x4a>
 8016388:	f003 fff8 	bl	801a37c <GUI__IntersectRect>
 801638c:	9b01      	ldr	r3, [sp, #4]
 801638e:	699c      	ldr	r4, [r3, #24]
 8016390:	a801      	add	r0, sp, #4
 8016392:	b1b4      	cbz	r4, 80163c2 <WM_InvalidateWindow+0x72>
 8016394:	f007 fb64 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016398:	4625      	mov	r5, r4
 801639a:	4628      	mov	r0, r5
 801639c:	f007 fb4e 	bl	801da3c <GUI_ALLOC_LockH>
 80163a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80163a2:	9001      	str	r0, [sp, #4]
 80163a4:	0793      	lsls	r3, r2, #30
 80163a6:	4601      	mov	r1, r0
 80163a8:	4630      	mov	r0, r6
 80163aa:	d4ed      	bmi.n	8016388 <WM_InvalidateWindow+0x38>
 80163ac:	a801      	add	r0, sp, #4
 80163ae:	f007 fb57 	bl	801da60 <GUI_ALLOC_UnlockH>
 80163b2:	4668      	mov	r0, sp
 80163b4:	f007 fb54 	bl	801da60 <GUI_ALLOC_UnlockH>
 80163b8:	f004 ffb6 	bl	801b328 <GUI_Unlock>
 80163bc:	b004      	add	sp, #16
 80163be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c2:	f007 fb4d 	bl	801da60 <GUI_ALLOC_UnlockH>
 80163c6:	4b0f      	ldr	r3, [pc, #60]	; (8016404 <WM_InvalidateWindow+0xb4>)
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	4295      	cmp	r5, r2
 80163cc:	d002      	beq.n	80163d4 <WM_InvalidateWindow+0x84>
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	429d      	cmp	r5, r3
 80163d2:	d1ee      	bne.n	80163b2 <WM_InvalidateWindow+0x62>
 80163d4:	f640 0301 	movw	r3, #2049	; 0x801
 80163d8:	ea08 0303 	and.w	r3, r8, r3
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d009      	beq.n	80163f4 <WM_InvalidateWindow+0xa4>
 80163e0:	4638      	mov	r0, r7
 80163e2:	4631      	mov	r1, r6
 80163e4:	2220      	movs	r2, #32
 80163e6:	f7fe ff43 	bl	8015270 <_Invalidate1Abs>
 80163ea:	e7e2      	b.n	80163b2 <WM_InvalidateWindow+0x62>
 80163ec:	4638      	mov	r0, r7
 80163ee:	f7ff f8e7 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 80163f2:	e7c7      	b.n	8016384 <WM_InvalidateWindow+0x34>
 80163f4:	9b00      	ldr	r3, [sp, #0]
 80163f6:	4630      	mov	r0, r6
 80163f8:	6999      	ldr	r1, [r3, #24]
 80163fa:	6a1a      	ldr	r2, [r3, #32]
 80163fc:	2320      	movs	r3, #32
 80163fe:	f7ff fbff 	bl	8015c00 <WM__InvalidateRect>
 8016402:	e7d6      	b.n	80163b2 <WM_InvalidateWindow+0x62>
 8016404:	2002cb00 	.word	0x2002cb00

08016408 <WM_CreateWindowAsChild>:
 8016408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801640c:	b087      	sub	sp, #28
 801640e:	4699      	mov	r9, r3
 8016410:	4606      	mov	r6, r0
 8016412:	460f      	mov	r7, r1
 8016414:	4690      	mov	r8, r2
 8016416:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016418:	f004 ff90 	bl	801b33c <GUI_Lock>
 801641c:	4b6f      	ldr	r3, [pc, #444]	; (80165dc <WM_CreateWindowAsChild+0x1d4>)
 801641e:	f8d3 a000 	ldr.w	sl, [r3]
 8016422:	b125      	cbz	r5, 801642e <WM_CreateWindowAsChild+0x26>
 8016424:	1c6b      	adds	r3, r5, #1
 8016426:	f000 80d7 	beq.w	80165d8 <WM_CreateWindowAsChild+0x1d0>
 801642a:	462c      	mov	r4, r5
 801642c:	e019      	b.n	8016462 <WM_CreateWindowAsChild+0x5a>
 801642e:	4b6c      	ldr	r3, [pc, #432]	; (80165e0 <WM_CreateWindowAsChild+0x1d8>)
 8016430:	881b      	ldrh	r3, [r3, #0]
 8016432:	b963      	cbnz	r3, 801644e <WM_CreateWindowAsChild+0x46>
 8016434:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016436:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 801643a:	f007 fc87 	bl	801dd4c <GUI_ALLOC_AllocZero>
 801643e:	4604      	mov	r4, r0
 8016440:	bb80      	cbnz	r0, 80164a4 <WM_CreateWindowAsChild+0x9c>
 8016442:	f004 ff71 	bl	801b328 <GUI_Unlock>
 8016446:	4620      	mov	r0, r4
 8016448:	b007      	add	sp, #28
 801644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644e:	4a65      	ldr	r2, [pc, #404]	; (80165e4 <WM_CreateWindowAsChild+0x1dc>)
 8016450:	4b65      	ldr	r3, [pc, #404]	; (80165e8 <WM_CreateWindowAsChild+0x1e0>)
 8016452:	6812      	ldr	r2, [r2, #0]
 8016454:	7c52      	ldrb	r2, [r2, #17]
 8016456:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801645a:	1c62      	adds	r2, r4, #1
 801645c:	d0ea      	beq.n	8016434 <WM_CreateWindowAsChild+0x2c>
 801645e:	2c00      	cmp	r4, #0
 8016460:	d0e8      	beq.n	8016434 <WM_CreateWindowAsChild+0x2c>
 8016462:	4620      	mov	r0, r4
 8016464:	f007 faea 	bl	801da3c <GUI_ALLOC_LockH>
 8016468:	f9b0 2000 	ldrsh.w	r2, [r0]
 801646c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016470:	9001      	str	r0, [sp, #4]
 8016472:	4416      	add	r6, r2
 8016474:	441f      	add	r7, r3
 8016476:	f1b8 0f00 	cmp.w	r8, #0
 801647a:	d105      	bne.n	8016488 <WM_CreateWindowAsChild+0x80>
 801647c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016480:	ebc2 0808 	rsb	r8, r2, r8
 8016484:	f108 0801 	add.w	r8, r8, #1
 8016488:	f1b9 0f00 	cmp.w	r9, #0
 801648c:	d105      	bne.n	801649a <WM_CreateWindowAsChild+0x92>
 801648e:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8016492:	ebc3 0909 	rsb	r9, r3, r9
 8016496:	f109 0901 	add.w	r9, r9, #1
 801649a:	a801      	add	r0, sp, #4
 801649c:	4625      	mov	r5, r4
 801649e:	f007 fadf 	bl	801da60 <GUI_ALLOC_UnlockH>
 80164a2:	e7c7      	b.n	8016434 <WM_CreateWindowAsChild+0x2c>
 80164a4:	4b4e      	ldr	r3, [pc, #312]	; (80165e0 <WM_CreateWindowAsChild+0x1d8>)
 80164a6:	881a      	ldrh	r2, [r3, #0]
 80164a8:	3201      	adds	r2, #1
 80164aa:	801a      	strh	r2, [r3, #0]
 80164ac:	f007 fac6 	bl	801da3c <GUI_ALLOC_LockH>
 80164b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80164b2:	4b4e      	ldr	r3, [pc, #312]	; (80165ec <WM_CreateWindowAsChild+0x1e4>)
 80164b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80164b6:	ea41 0a0a 	orr.w	sl, r1, sl
 80164ba:	f10d 0b18 	add.w	fp, sp, #24
 80164be:	44b0      	add	r8, r6
 80164c0:	44b9      	add	r9, r7
 80164c2:	ea0a 0303 	and.w	r3, sl, r3
 80164c6:	4313      	orrs	r3, r2
 80164c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80164cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164ce:	f84b 0d18 	str.w	r0, [fp, #-24]!
 80164d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80164d6:	6283      	str	r3, [r0, #40]	; 0x28
 80164d8:	f8a0 8004 	strh.w	r8, [r0, #4]
 80164dc:	f8a0 9006 	strh.w	r9, [r0, #6]
 80164e0:	6102      	str	r2, [r0, #16]
 80164e2:	8006      	strh	r6, [r0, #0]
 80164e4:	8047      	strh	r7, [r0, #2]
 80164e6:	4668      	mov	r0, sp
 80164e8:	f007 faba 	bl	801da60 <GUI_ALLOC_UnlockH>
 80164ec:	4b40      	ldr	r3, [pc, #256]	; (80165f0 <WM_CreateWindowAsChild+0x1e8>)
 80164ee:	6818      	ldr	r0, [r3, #0]
 80164f0:	2800      	cmp	r0, #0
 80164f2:	d161      	bne.n	80165b8 <WM_CreateWindowAsChild+0x1b0>
 80164f4:	601c      	str	r4, [r3, #0]
 80164f6:	4629      	mov	r1, r5
 80164f8:	4620      	mov	r0, r4
 80164fa:	f7fe ffbb 	bl	8015474 <WM__InsertWindowIntoList>
 80164fe:	f01a 0f20 	tst.w	sl, #32
 8016502:	d135      	bne.n	8016570 <WM_CreateWindowAsChild+0x168>
 8016504:	f01a 0f01 	tst.w	sl, #1
 8016508:	d113      	bne.n	8016532 <WM_CreateWindowAsChild+0x12a>
 801650a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801650e:	d118      	bne.n	8016542 <WM_CreateWindowAsChild+0x13a>
 8016510:	f01a 0f02 	tst.w	sl, #2
 8016514:	d11b      	bne.n	801654e <WM_CreateWindowAsChild+0x146>
 8016516:	a906      	add	r1, sp, #24
 8016518:	2301      	movs	r3, #1
 801651a:	4620      	mov	r0, r4
 801651c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8016520:	9403      	str	r4, [sp, #12]
 8016522:	f7fc fd41 	bl	8012fa8 <WM__SendMessage>
 8016526:	f004 feff 	bl	801b328 <GUI_Unlock>
 801652a:	4620      	mov	r0, r4
 801652c:	b007      	add	sp, #28
 801652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016532:	4b30      	ldr	r3, [pc, #192]	; (80165f4 <WM_CreateWindowAsChild+0x1ec>)
 8016534:	681a      	ldr	r2, [r3, #0]
 8016536:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801653a:	f102 0201 	add.w	r2, r2, #1
 801653e:	601a      	str	r2, [r3, #0]
 8016540:	d0e6      	beq.n	8016510 <WM_CreateWindowAsChild+0x108>
 8016542:	4620      	mov	r0, r4
 8016544:	f7fd fc4c 	bl	8013de0 <WM_BringToBottom>
 8016548:	f01a 0f02 	tst.w	sl, #2
 801654c:	d0e3      	beq.n	8016516 <WM_CreateWindowAsChild+0x10e>
 801654e:	4620      	mov	r0, r4
 8016550:	f007 fa74 	bl	801da3c <GUI_ALLOC_LockH>
 8016554:	4603      	mov	r3, r0
 8016556:	4668      	mov	r0, sp
 8016558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	f042 0202 	orr.w	r2, r2, #2
 8016560:	629a      	str	r2, [r3, #40]	; 0x28
 8016562:	f007 fa7d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016566:	4620      	mov	r0, r4
 8016568:	2100      	movs	r1, #0
 801656a:	f7ff fe2b 	bl	80161c4 <WM_InvalidateRect>
 801656e:	e7d2      	b.n	8016516 <WM_CreateWindowAsChild+0x10e>
 8016570:	4e1c      	ldr	r6, [pc, #112]	; (80165e4 <WM_CreateWindowAsChild+0x1dc>)
 8016572:	f004 fee3 	bl	801b33c <GUI_Lock>
 8016576:	6833      	ldr	r3, [r6, #0]
 8016578:	4625      	mov	r5, r4
 801657a:	649c      	str	r4, [r3, #72]	; 0x48
 801657c:	e000      	b.n	8016580 <WM_CreateWindowAsChild+0x178>
 801657e:	461d      	mov	r5, r3
 8016580:	4628      	mov	r0, r5
 8016582:	f007 fa51 	bl	801da28 <GUI_ALLOC_h2p>
 8016586:	6983      	ldr	r3, [r0, #24]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d1f8      	bne.n	801657e <WM_CreateWindowAsChild+0x176>
 801658c:	4a16      	ldr	r2, [pc, #88]	; (80165e8 <WM_CreateWindowAsChild+0x1e0>)
 801658e:	6811      	ldr	r1, [r2, #0]
 8016590:	428d      	cmp	r5, r1
 8016592:	d01b      	beq.n	80165cc <WM_CreateWindowAsChild+0x1c4>
 8016594:	6853      	ldr	r3, [r2, #4]
 8016596:	429d      	cmp	r5, r3
 8016598:	d01c      	beq.n	80165d4 <WM_CreateWindowAsChild+0x1cc>
 801659a:	f003 fd71 	bl	801a080 <LCD_SetClipRectMax>
 801659e:	4620      	mov	r0, r4
 80165a0:	f007 fa42 	bl	801da28 <GUI_ALLOC_h2p>
 80165a4:	6833      	ldr	r3, [r6, #0]
 80165a6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80165aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80165ae:	651a      	str	r2, [r3, #80]	; 0x50
 80165b0:	64d9      	str	r1, [r3, #76]	; 0x4c
 80165b2:	f004 feb9 	bl	801b328 <GUI_Unlock>
 80165b6:	e7a5      	b.n	8016504 <WM_CreateWindowAsChild+0xfc>
 80165b8:	f007 fa36 	bl	801da28 <GUI_ALLOC_h2p>
 80165bc:	4606      	mov	r6, r0
 80165be:	4620      	mov	r0, r4
 80165c0:	f007 fa32 	bl	801da28 <GUI_ALLOC_h2p>
 80165c4:	6973      	ldr	r3, [r6, #20]
 80165c6:	6143      	str	r3, [r0, #20]
 80165c8:	6174      	str	r4, [r6, #20]
 80165ca:	e794      	b.n	80164f6 <WM_CreateWindowAsChild+0xee>
 80165cc:	4618      	mov	r0, r3
 80165ce:	f004 ffd5 	bl	801b57c <GUI_SelectLayer>
 80165d2:	e7e2      	b.n	801659a <WM_CreateWindowAsChild+0x192>
 80165d4:	2001      	movs	r0, #1
 80165d6:	e7fa      	b.n	80165ce <WM_CreateWindowAsChild+0x1c6>
 80165d8:	2500      	movs	r5, #0
 80165da:	e72b      	b.n	8016434 <WM_CreateWindowAsChild+0x2c>
 80165dc:	2002cb30 	.word	0x2002cb30
 80165e0:	2002caf8 	.word	0x2002caf8
 80165e4:	2000027c 	.word	0x2000027c
 80165e8:	2002cb00 	.word	0x2002cb00
 80165ec:	003f3f9f 	.word	0x003f3f9f
 80165f0:	2002cb1c 	.word	0x2002cb1c
 80165f4:	2002cb50 	.word	0x2002cb50

080165f8 <WM_DeleteWindow>:
 80165f8:	b900      	cbnz	r0, 80165fc <WM_DeleteWindow+0x4>
 80165fa:	4770      	bx	lr
 80165fc:	f7ff bba0 	b.w	8015d40 <WM_DeleteWindow.part.2>

08016600 <WM__GetTopLevelLayer>:
 8016600:	b510      	push	{r4, lr}
 8016602:	4604      	mov	r4, r0
 8016604:	e000      	b.n	8016608 <WM__GetTopLevelLayer+0x8>
 8016606:	461c      	mov	r4, r3
 8016608:	4620      	mov	r0, r4
 801660a:	f007 fa0d 	bl	801da28 <GUI_ALLOC_h2p>
 801660e:	6983      	ldr	r3, [r0, #24]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d1f8      	bne.n	8016606 <WM__GetTopLevelLayer+0x6>
 8016614:	4a06      	ldr	r2, [pc, #24]	; (8016630 <WM__GetTopLevelLayer+0x30>)
 8016616:	6811      	ldr	r1, [r2, #0]
 8016618:	428c      	cmp	r4, r1
 801661a:	d006      	beq.n	801662a <WM__GetTopLevelLayer+0x2a>
 801661c:	6850      	ldr	r0, [r2, #4]
 801661e:	4284      	cmp	r4, r0
 8016620:	bf14      	ite	ne
 8016622:	f04f 30ff 	movne.w	r0, #4294967295
 8016626:	2001      	moveq	r0, #1
 8016628:	bd10      	pop	{r4, pc}
 801662a:	4618      	mov	r0, r3
 801662c:	bd10      	pop	{r4, pc}
 801662e:	bf00      	nop
 8016630:	2002cb00 	.word	0x2002cb00

08016634 <WM_SelectWindow>:
 8016634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016636:	4f18      	ldr	r7, [pc, #96]	; (8016698 <WM_SelectWindow+0x64>)
 8016638:	4605      	mov	r5, r0
 801663a:	f004 fe7f 	bl	801b33c <GUI_Lock>
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8016642:	b90d      	cbnz	r5, 8016648 <WM_SelectWindow+0x14>
 8016644:	4a15      	ldr	r2, [pc, #84]	; (801669c <WM_SelectWindow+0x68>)
 8016646:	6815      	ldr	r5, [r2, #0]
 8016648:	649d      	str	r5, [r3, #72]	; 0x48
 801664a:	462c      	mov	r4, r5
 801664c:	e000      	b.n	8016650 <WM_SelectWindow+0x1c>
 801664e:	461c      	mov	r4, r3
 8016650:	4620      	mov	r0, r4
 8016652:	f007 f9e9 	bl	801da28 <GUI_ALLOC_h2p>
 8016656:	6983      	ldr	r3, [r0, #24]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d1f8      	bne.n	801664e <WM_SelectWindow+0x1a>
 801665c:	4a10      	ldr	r2, [pc, #64]	; (80166a0 <WM_SelectWindow+0x6c>)
 801665e:	6811      	ldr	r1, [r2, #0]
 8016660:	428c      	cmp	r4, r1
 8016662:	d012      	beq.n	801668a <WM_SelectWindow+0x56>
 8016664:	6853      	ldr	r3, [r2, #4]
 8016666:	429c      	cmp	r4, r3
 8016668:	d013      	beq.n	8016692 <WM_SelectWindow+0x5e>
 801666a:	f003 fd09 	bl	801a080 <LCD_SetClipRectMax>
 801666e:	4628      	mov	r0, r5
 8016670:	f007 f9da 	bl	801da28 <GUI_ALLOC_h2p>
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	f9b0 1000 	ldrsh.w	r1, [r0]
 801667a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801667e:	651a      	str	r2, [r3, #80]	; 0x50
 8016680:	64d9      	str	r1, [r3, #76]	; 0x4c
 8016682:	f004 fe51 	bl	801b328 <GUI_Unlock>
 8016686:	4630      	mov	r0, r6
 8016688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801668a:	4618      	mov	r0, r3
 801668c:	f004 ff76 	bl	801b57c <GUI_SelectLayer>
 8016690:	e7eb      	b.n	801666a <WM_SelectWindow+0x36>
 8016692:	2001      	movs	r0, #1
 8016694:	e7fa      	b.n	801668c <WM_SelectWindow+0x58>
 8016696:	bf00      	nop
 8016698:	2000027c 	.word	0x2000027c
 801669c:	2002cb1c 	.word	0x2002cb1c
 80166a0:	2002cb00 	.word	0x2002cb00

080166a4 <WM_GetActiveWindow>:
 80166a4:	4b01      	ldr	r3, [pc, #4]	; (80166ac <WM_GetActiveWindow+0x8>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80166aa:	4770      	bx	lr
 80166ac:	2000027c 	.word	0x2000027c

080166b0 <WM__GetNextIVR>:
 80166b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166b4:	f8df 8240 	ldr.w	r8, [pc, #576]	; 80168f8 <WM__GetNextIVR+0x248>
 80166b8:	f8d8 3000 	ldr.w	r3, [r8]
 80166bc:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80166c0:	b087      	sub	sp, #28
 80166c2:	b130      	cbz	r0, 80166d2 <WM__GetNextIVR+0x22>
 80166c4:	4e8b      	ldr	r6, [pc, #556]	; (80168f4 <WM__GetNextIVR+0x244>)
 80166c6:	6973      	ldr	r3, [r6, #20]
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	dd05      	ble.n	80166d8 <WM__GetNextIVR+0x28>
 80166cc:	3b01      	subs	r3, #1
 80166ce:	6173      	str	r3, [r6, #20]
 80166d0:	2000      	movs	r0, #0
 80166d2:	b007      	add	sp, #28
 80166d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166d8:	f106 0708 	add.w	r7, r6, #8
 80166dc:	6933      	ldr	r3, [r6, #16]
 80166de:	e897 0003 	ldmia.w	r7, {r0, r1}
 80166e2:	ad02      	add	r5, sp, #8
 80166e4:	3301      	adds	r3, #1
 80166e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80166ea:	6133      	str	r3, [r6, #16]
 80166ec:	b953      	cbnz	r3, 8016704 <WM__GetNextIVR+0x54>
 80166ee:	6833      	ldr	r3, [r6, #0]
 80166f0:	9302      	str	r3, [sp, #8]
 80166f2:	8873      	ldrh	r3, [r6, #2]
 80166f4:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80166f8:	4c7e      	ldr	r4, [pc, #504]	; (80168f4 <WM__GetNextIVR+0x244>)
 80166fa:	b21b      	sxth	r3, r3
 80166fc:	429a      	cmp	r2, r3
 80166fe:	da17      	bge.n	8016730 <WM__GetNextIVR+0x80>
 8016700:	6973      	ldr	r3, [r6, #20]
 8016702:	e7e3      	b.n	80166cc <WM__GetNextIVR+0x1c>
 8016704:	89b2      	ldrh	r2, [r6, #12]
 8016706:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801670a:	8973      	ldrh	r3, [r6, #10]
 801670c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8016710:	3201      	adds	r2, #1
 8016712:	b292      	uxth	r2, r2
 8016714:	b211      	sxth	r1, r2
 8016716:	4288      	cmp	r0, r1
 8016718:	f8ad 2008 	strh.w	r2, [sp, #8]
 801671c:	daea      	bge.n	80166f4 <WM__GetNextIVR+0x44>
 801671e:	89f3      	ldrh	r3, [r6, #14]
 8016720:	8832      	ldrh	r2, [r6, #0]
 8016722:	f8ad 2008 	strh.w	r2, [sp, #8]
 8016726:	3301      	adds	r3, #1
 8016728:	b29b      	uxth	r3, r3
 801672a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801672e:	e7e1      	b.n	80166f4 <WM__GetNextIVR+0x44>
 8016730:	f8d8 3000 	ldr.w	r3, [r8]
 8016734:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80168f8 <WM__GetNextIVR+0x248>
 8016738:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801673a:	f007 f97f 	bl	801da3c <GUI_ALLOC_LockH>
 801673e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016742:	8821      	ldrh	r1, [r4, #0]
 8016744:	9001      	str	r0, [sp, #4]
 8016746:	428b      	cmp	r3, r1
 8016748:	4602      	mov	r2, r0
 801674a:	f000 80ba 	beq.w	80168c2 <WM__GetNextIVR+0x212>
 801674e:	f8d8 2000 	ldr.w	r2, [r8]
 8016752:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016756:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8016758:	b910      	cbnz	r0, 8016760 <WM__GetNextIVR+0xb0>
 801675a:	e00d      	b.n	8016778 <WM__GetNextIVR+0xc8>
 801675c:	69a0      	ldr	r0, [r4, #24]
 801675e:	b158      	cbz	r0, 8016778 <WM__GetNextIVR+0xc8>
 8016760:	f007 f962 	bl	801da28 <GUI_ALLOC_h2p>
 8016764:	4629      	mov	r1, r5
 8016766:	4604      	mov	r4, r0
 8016768:	6a00      	ldr	r0, [r0, #32]
 801676a:	f7fe fc71 	bl	8015050 <_Findx0.constprop.9>
 801676e:	2800      	cmp	r0, #0
 8016770:	d0f4      	beq.n	801675c <WM__GetNextIVR+0xac>
 8016772:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016776:	e7ea      	b.n	801674e <WM__GetNextIVR+0x9e>
 8016778:	9b01      	ldr	r3, [sp, #4]
 801677a:	4629      	mov	r1, r5
 801677c:	69d8      	ldr	r0, [r3, #28]
 801677e:	f7fe fc67 	bl	8015050 <_Findx0.constprop.9>
 8016782:	2800      	cmp	r0, #0
 8016784:	d1f5      	bne.n	8016772 <WM__GetNextIVR+0xc2>
 8016786:	88b3      	ldrh	r3, [r6, #4]
 8016788:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801678c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016790:	b21b      	sxth	r3, r3
 8016792:	429a      	cmp	r2, r3
 8016794:	f300 808d 	bgt.w	80168b2 <WM__GetNextIVR+0x202>
 8016798:	f8d8 3000 	ldr.w	r3, [r8]
 801679c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801679e:	f10d 0810 	add.w	r8, sp, #16
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d02d      	beq.n	8016802 <WM__GetNextIVR+0x152>
 80167a6:	f007 f93f 	bl	801da28 <GUI_ALLOC_h2p>
 80167aa:	6a04      	ldr	r4, [r0, #32]
 80167ac:	4681      	mov	r9, r0
 80167ae:	b96c      	cbnz	r4, 80167cc <WM__GetNextIVR+0x11c>
 80167b0:	e023      	b.n	80167fa <WM__GetNextIVR+0x14a>
 80167b2:	07e1      	lsls	r1, r4, #31
 80167b4:	d44b      	bmi.n	801684e <WM__GetNextIVR+0x19e>
 80167b6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80167ba:	9800      	ldr	r0, [sp, #0]
 80167bc:	3b01      	subs	r3, #1
 80167be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80167c2:	6a04      	ldr	r4, [r0, #32]
 80167c4:	4668      	mov	r0, sp
 80167c6:	f007 f94b 	bl	801da60 <GUI_ALLOC_UnlockH>
 80167ca:	b1b4      	cbz	r4, 80167fa <WM__GetNextIVR+0x14a>
 80167cc:	4620      	mov	r0, r4
 80167ce:	f007 f935 	bl	801da3c <GUI_ALLOC_LockH>
 80167d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80167d4:	9000      	str	r0, [sp, #0]
 80167d6:	07a3      	lsls	r3, r4, #30
 80167d8:	d5f3      	bpl.n	80167c2 <WM__GetNextIVR+0x112>
 80167da:	c803      	ldmia	r0, {r0, r1}
 80167dc:	e888 0003 	stmia.w	r8, {r0, r1}
 80167e0:	4628      	mov	r0, r5
 80167e2:	4641      	mov	r1, r8
 80167e4:	f005 fffa 	bl	801c7dc <GUI_RectsIntersect>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d1e2      	bne.n	80167b2 <WM__GetNextIVR+0x102>
 80167ec:	9800      	ldr	r0, [sp, #0]
 80167ee:	6a04      	ldr	r4, [r0, #32]
 80167f0:	4668      	mov	r0, sp
 80167f2:	f007 f935 	bl	801da60 <GUI_ALLOC_UnlockH>
 80167f6:	2c00      	cmp	r4, #0
 80167f8:	d1e8      	bne.n	80167cc <WM__GetNextIVR+0x11c>
 80167fa:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80167fe:	2800      	cmp	r0, #0
 8016800:	d1d1      	bne.n	80167a6 <WM__GetNextIVR+0xf6>
 8016802:	9b01      	ldr	r3, [sp, #4]
 8016804:	69dc      	ldr	r4, [r3, #28]
 8016806:	f10d 0810 	add.w	r8, sp, #16
 801680a:	b974      	cbnz	r4, 801682a <WM__GetNextIVR+0x17a>
 801680c:	e040      	b.n	8016890 <WM__GetNextIVR+0x1e0>
 801680e:	07e3      	lsls	r3, r4, #31
 8016810:	d42e      	bmi.n	8016870 <WM__GetNextIVR+0x1c0>
 8016812:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016816:	9800      	ldr	r0, [sp, #0]
 8016818:	3b01      	subs	r3, #1
 801681a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801681e:	6a04      	ldr	r4, [r0, #32]
 8016820:	4668      	mov	r0, sp
 8016822:	f007 f91d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016826:	2c00      	cmp	r4, #0
 8016828:	d032      	beq.n	8016890 <WM__GetNextIVR+0x1e0>
 801682a:	4620      	mov	r0, r4
 801682c:	f007 f906 	bl	801da3c <GUI_ALLOC_LockH>
 8016830:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016832:	9000      	str	r0, [sp, #0]
 8016834:	07a2      	lsls	r2, r4, #30
 8016836:	d5f2      	bpl.n	801681e <WM__GetNextIVR+0x16e>
 8016838:	c803      	ldmia	r0, {r0, r1}
 801683a:	e888 0003 	stmia.w	r8, {r0, r1}
 801683e:	4628      	mov	r0, r5
 8016840:	4641      	mov	r1, r8
 8016842:	f005 ffcb 	bl	801c7dc <GUI_RectsIntersect>
 8016846:	2800      	cmp	r0, #0
 8016848:	d1e1      	bne.n	801680e <WM__GetNextIVR+0x15e>
 801684a:	9800      	ldr	r0, [sp, #0]
 801684c:	e7e7      	b.n	801681e <WM__GetNextIVR+0x16e>
 801684e:	9800      	ldr	r0, [sp, #0]
 8016850:	69c4      	ldr	r4, [r0, #28]
 8016852:	2c00      	cmp	r4, #0
 8016854:	d0b5      	beq.n	80167c2 <WM__GetNextIVR+0x112>
 8016856:	4620      	mov	r0, r4
 8016858:	4629      	mov	r1, r5
 801685a:	4642      	mov	r2, r8
 801685c:	f7fe faea 	bl	8014e34 <_Findx1>
 8016860:	4620      	mov	r0, r4
 8016862:	f007 f8e1 	bl	801da28 <GUI_ALLOC_h2p>
 8016866:	6a04      	ldr	r4, [r0, #32]
 8016868:	2c00      	cmp	r4, #0
 801686a:	d1f4      	bne.n	8016856 <WM__GetNextIVR+0x1a6>
 801686c:	9800      	ldr	r0, [sp, #0]
 801686e:	e7be      	b.n	80167ee <WM__GetNextIVR+0x13e>
 8016870:	9800      	ldr	r0, [sp, #0]
 8016872:	69c4      	ldr	r4, [r0, #28]
 8016874:	2c00      	cmp	r4, #0
 8016876:	d0d2      	beq.n	801681e <WM__GetNextIVR+0x16e>
 8016878:	4620      	mov	r0, r4
 801687a:	4629      	mov	r1, r5
 801687c:	4642      	mov	r2, r8
 801687e:	f7fe fad9 	bl	8014e34 <_Findx1>
 8016882:	4620      	mov	r0, r4
 8016884:	f007 f8d0 	bl	801da28 <GUI_ALLOC_h2p>
 8016888:	6a04      	ldr	r4, [r0, #32]
 801688a:	2c00      	cmp	r4, #0
 801688c:	d1f4      	bne.n	8016878 <WM__GetNextIVR+0x1c8>
 801688e:	e7dc      	b.n	801684a <WM__GetNextIVR+0x19a>
 8016890:	a801      	add	r0, sp, #4
 8016892:	f007 f8e5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016896:	6933      	ldr	r3, [r6, #16]
 8016898:	f644 6220 	movw	r2, #20000	; 0x4e20
 801689c:	4293      	cmp	r3, r2
 801689e:	f73f af2f 	bgt.w	8016700 <WM__GetNextIVR+0x50>
 80168a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80168a6:	e887 0003 	stmia.w	r7, {r0, r1}
 80168aa:	f7fe fd53 	bl	8015354 <WM__ActivateClipRect>
 80168ae:	2001      	movs	r0, #1
 80168b0:	e70f      	b.n	80166d2 <WM__GetNextIVR+0x22>
 80168b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80168b6:	e887 0003 	stmia.w	r7, {r0, r1}
 80168ba:	a801      	add	r0, sp, #4
 80168bc:	f007 f8d0 	bl	801da60 <GUI_ALLOC_UnlockH>
 80168c0:	e72d      	b.n	801671e <WM__GetNextIVR+0x6e>
 80168c2:	f8d9 1000 	ldr.w	r1, [r9]
 80168c6:	6863      	ldr	r3, [r4, #4]
 80168c8:	6c88      	ldr	r0, [r1, #72]	; 0x48
 80168ca:	9303      	str	r3, [sp, #12]
 80168cc:	b150      	cbz	r0, 80168e4 <WM__GetNextIVR+0x234>
 80168ce:	f007 f8ab 	bl	801da28 <GUI_ALLOC_h2p>
 80168d2:	4604      	mov	r4, r0
 80168d4:	4629      	mov	r1, r5
 80168d6:	6a00      	ldr	r0, [r0, #32]
 80168d8:	f7fe fbfa 	bl	80150d0 <_Findy1.constprop.10>
 80168dc:	69a0      	ldr	r0, [r4, #24]
 80168de:	2800      	cmp	r0, #0
 80168e0:	d1f5      	bne.n	80168ce <WM__GetNextIVR+0x21e>
 80168e2:	9a01      	ldr	r2, [sp, #4]
 80168e4:	69d0      	ldr	r0, [r2, #28]
 80168e6:	4629      	mov	r1, r5
 80168e8:	f7fe fbf2 	bl	80150d0 <_Findy1.constprop.10>
 80168ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80168f0:	e72d      	b.n	801674e <WM__GetNextIVR+0x9e>
 80168f2:	bf00      	nop
 80168f4:	2002b17c 	.word	0x2002b17c
 80168f8:	2000027c 	.word	0x2000027c

080168fc <WM__InitIVRSearch>:
 80168fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016900:	4c60      	ldr	r4, [pc, #384]	; (8016a84 <WM__InitIVRSearch+0x188>)
 8016902:	6822      	ldr	r2, [r4, #0]
 8016904:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8016908:	b089      	sub	sp, #36	; 0x24
 801690a:	4607      	mov	r7, r0
 801690c:	b14b      	cbz	r3, 8016922 <WM__InitIVRSearch+0x26>
 801690e:	4d5e      	ldr	r5, [pc, #376]	; (8016a88 <WM__InitIVRSearch+0x18c>)
 8016910:	696b      	ldr	r3, [r5, #20]
 8016912:	3301      	adds	r3, #1
 8016914:	2b01      	cmp	r3, #1
 8016916:	616b      	str	r3, [r5, #20]
 8016918:	dd09      	ble.n	801692e <WM__InitIVRSearch+0x32>
 801691a:	2001      	movs	r0, #1
 801691c:	b009      	add	sp, #36	; 0x24
 801691e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016922:	f7fe fd17 	bl	8015354 <WM__ActivateClipRect>
 8016926:	2001      	movs	r0, #1
 8016928:	b009      	add	sp, #36	; 0x24
 801692a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801692e:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8016930:	f007 f884 	bl	801da3c <GUI_ALLOC_LockH>
 8016934:	4b55      	ldr	r3, [pc, #340]	; (8016a8c <WM__InitIVRSearch+0x190>)
 8016936:	9001      	str	r0, [sp, #4]
 8016938:	781b      	ldrb	r3, [r3, #0]
 801693a:	f04f 32ff 	mov.w	r2, #4294967295
 801693e:	612a      	str	r2, [r5, #16]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d064      	beq.n	8016a0e <WM__InitIVRSearch+0x112>
 8016944:	3008      	adds	r0, #8
 8016946:	c803      	ldmia	r0, {r0, r1}
 8016948:	ae04      	add	r6, sp, #16
 801694a:	e886 0003 	stmia.w	r6, {r0, r1}
 801694e:	b11f      	cbz	r7, 8016958 <WM__InitIVRSearch+0x5c>
 8016950:	4639      	mov	r1, r7
 8016952:	4630      	mov	r0, r6
 8016954:	f003 fd12 	bl	801a37c <GUI__IntersectRect>
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801695c:	2b00      	cmp	r3, #0
 801695e:	f000 808c 	beq.w	8016a7a <WM__InitIVRSearch+0x17e>
 8016962:	6818      	ldr	r0, [r3, #0]
 8016964:	6859      	ldr	r1, [r3, #4]
 8016966:	4f4a      	ldr	r7, [pc, #296]	; (8016a90 <WM__InitIVRSearch+0x194>)
 8016968:	9a01      	ldr	r2, [sp, #4]
 801696a:	9202      	str	r2, [sp, #8]
 801696c:	ab06      	add	r3, sp, #24
 801696e:	c303      	stmia	r3!, {r0, r1}
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d164      	bne.n	8016a40 <WM__InitIVRSearch+0x144>
 8016976:	4613      	mov	r3, r2
 8016978:	f10d 0808 	add.w	r8, sp, #8
 801697c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016980:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016984:	a806      	add	r0, sp, #24
 8016986:	f005 fedf 	bl	801c748 <GUI_MoveRect>
 801698a:	4630      	mov	r0, r6
 801698c:	a906      	add	r1, sp, #24
 801698e:	f003 fcf5 	bl	801a37c <GUI__IntersectRect>
 8016992:	4640      	mov	r0, r8
 8016994:	f007 f864 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016998:	f8d7 9000 	ldr.w	r9, [r7]
 801699c:	f10d 080c 	add.w	r8, sp, #12
 80169a0:	f1b9 0f00 	cmp.w	r9, #0
 80169a4:	d129      	bne.n	80169fa <WM__InitIVRSearch+0xfe>
 80169a6:	6823      	ldr	r3, [r4, #0]
 80169a8:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80169aa:	e009      	b.n	80169c0 <WM__InitIVRSearch+0xc4>
 80169ac:	f003 fce6 	bl	801a37c <GUI__IntersectRect>
 80169b0:	9b03      	ldr	r3, [sp, #12]
 80169b2:	699c      	ldr	r4, [r3, #24]
 80169b4:	4640      	mov	r0, r8
 80169b6:	2c00      	cmp	r4, #0
 80169b8:	d032      	beq.n	8016a20 <WM__InitIVRSearch+0x124>
 80169ba:	f007 f851 	bl	801da60 <GUI_ALLOC_UnlockH>
 80169be:	4627      	mov	r7, r4
 80169c0:	4638      	mov	r0, r7
 80169c2:	f007 f83b 	bl	801da3c <GUI_ALLOC_LockH>
 80169c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80169c8:	9003      	str	r0, [sp, #12]
 80169ca:	0793      	lsls	r3, r2, #30
 80169cc:	4601      	mov	r1, r0
 80169ce:	4630      	mov	r0, r6
 80169d0:	d4ec      	bmi.n	80169ac <WM__InitIVRSearch+0xb0>
 80169d2:	4640      	mov	r0, r8
 80169d4:	f007 f844 	bl	801da60 <GUI_ALLOC_UnlockH>
 80169d8:	696b      	ldr	r3, [r5, #20]
 80169da:	2000      	movs	r0, #0
 80169dc:	3b01      	subs	r3, #1
 80169de:	616b      	str	r3, [r5, #20]
 80169e0:	b009      	add	sp, #36	; 0x24
 80169e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169e6:	f003 fcc9 	bl	801a37c <GUI__IntersectRect>
 80169ea:	9b03      	ldr	r3, [sp, #12]
 80169ec:	699f      	ldr	r7, [r3, #24]
 80169ee:	4640      	mov	r0, r8
 80169f0:	2f00      	cmp	r7, #0
 80169f2:	d030      	beq.n	8016a56 <WM__InitIVRSearch+0x15a>
 80169f4:	f007 f834 	bl	801da60 <GUI_ALLOC_UnlockH>
 80169f8:	46b9      	mov	r9, r7
 80169fa:	4648      	mov	r0, r9
 80169fc:	f007 f81e 	bl	801da3c <GUI_ALLOC_LockH>
 8016a00:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016a02:	9003      	str	r0, [sp, #12]
 8016a04:	0792      	lsls	r2, r2, #30
 8016a06:	4601      	mov	r1, r0
 8016a08:	4630      	mov	r0, r6
 8016a0a:	d4ec      	bmi.n	80169e6 <WM__InitIVRSearch+0xea>
 8016a0c:	e7e1      	b.n	80169d2 <WM__InitIVRSearch+0xd6>
 8016a0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016a10:	f013 0602 	ands.w	r6, r3, #2
 8016a14:	d029      	beq.n	8016a6a <WM__InitIVRSearch+0x16e>
 8016a16:	c803      	ldmia	r0, {r0, r1}
 8016a18:	ae04      	add	r6, sp, #16
 8016a1a:	e886 0003 	stmia.w	r6, {r0, r1}
 8016a1e:	e796      	b.n	801694e <WM__InitIVRSearch+0x52>
 8016a20:	f007 f81e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016a24:	4b1b      	ldr	r3, [pc, #108]	; (8016a94 <WM__InitIVRSearch+0x198>)
 8016a26:	681a      	ldr	r2, [r3, #0]
 8016a28:	4297      	cmp	r7, r2
 8016a2a:	d002      	beq.n	8016a32 <WM__InitIVRSearch+0x136>
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	429f      	cmp	r7, r3
 8016a30:	d1d2      	bne.n	80169d8 <WM__InitIVRSearch+0xdc>
 8016a32:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8016a3a:	f7ff fe39 	bl	80166b0 <WM__GetNextIVR>
 8016a3e:	e76d      	b.n	801691c <WM__InitIVRSearch+0x20>
 8016a40:	f10d 0808 	add.w	r8, sp, #8
 8016a44:	4640      	mov	r0, r8
 8016a46:	f007 f80b 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016a4a:	6838      	ldr	r0, [r7, #0]
 8016a4c:	f006 fff6 	bl	801da3c <GUI_ALLOC_LockH>
 8016a50:	9002      	str	r0, [sp, #8]
 8016a52:	4603      	mov	r3, r0
 8016a54:	e792      	b.n	801697c <WM__InitIVRSearch+0x80>
 8016a56:	f007 f803 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016a5a:	4b0e      	ldr	r3, [pc, #56]	; (8016a94 <WM__InitIVRSearch+0x198>)
 8016a5c:	681a      	ldr	r2, [r3, #0]
 8016a5e:	4591      	cmp	r9, r2
 8016a60:	d0a1      	beq.n	80169a6 <WM__InitIVRSearch+0xaa>
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	4599      	cmp	r9, r3
 8016a66:	d1b7      	bne.n	80169d8 <WM__InitIVRSearch+0xdc>
 8016a68:	e79d      	b.n	80169a6 <WM__InitIVRSearch+0xaa>
 8016a6a:	696b      	ldr	r3, [r5, #20]
 8016a6c:	a801      	add	r0, sp, #4
 8016a6e:	3b01      	subs	r3, #1
 8016a70:	616b      	str	r3, [r5, #20]
 8016a72:	f006 fff5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016a76:	4630      	mov	r0, r6
 8016a78:	e750      	b.n	801691c <WM__InitIVRSearch+0x20>
 8016a7a:	a801      	add	r0, sp, #4
 8016a7c:	f006 fff0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016a80:	4f03      	ldr	r7, [pc, #12]	; (8016a90 <WM__InitIVRSearch+0x194>)
 8016a82:	e789      	b.n	8016998 <WM__InitIVRSearch+0x9c>
 8016a84:	2000027c 	.word	0x2000027c
 8016a88:	2002b17c 	.word	0x2002b17c
 8016a8c:	2002cb2c 	.word	0x2002cb2c
 8016a90:	2002cafc 	.word	0x2002cafc
 8016a94:	2002cb00 	.word	0x2002cb00

08016a98 <WM__Paint1>:
 8016a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a9c:	b089      	sub	sp, #36	; 0x24
 8016a9e:	4605      	mov	r5, r0
 8016aa0:	f006 ffcc 	bl	801da3c <GUI_ALLOC_LockH>
 8016aa4:	f100 0208 	add.w	r2, r0, #8
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016aae:	ac02      	add	r4, sp, #8
 8016ab0:	691f      	ldr	r7, [r3, #16]
 8016ab2:	9301      	str	r3, [sp, #4]
 8016ab4:	e884 0003 	stmia.w	r4, {r0, r1}
 8016ab8:	a801      	add	r0, sp, #4
 8016aba:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8016abc:	f006 ffd0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016ac0:	b10f      	cbz	r7, 8016ac6 <WM__Paint1+0x2e>
 8016ac2:	07b3      	lsls	r3, r6, #30
 8016ac4:	d402      	bmi.n	8016acc <WM__Paint1+0x34>
 8016ac6:	b009      	add	sp, #36	; 0x24
 8016ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016acc:	4f1e      	ldr	r7, [pc, #120]	; (8016b48 <WM__Paint1+0xb0>)
 8016ace:	4628      	mov	r0, r5
 8016ad0:	212e      	movs	r1, #46	; 0x2e
 8016ad2:	f7fd fd93 	bl	80145fc <WM_SendMessageNoPara>
 8016ad6:	783b      	ldrb	r3, [r7, #0]
 8016ad8:	f416 5880 	ands.w	r8, r6, #4096	; 0x1000
 8016adc:	f103 0301 	add.w	r3, r3, #1
 8016ae0:	703b      	strb	r3, [r7, #0]
 8016ae2:	d118      	bne.n	8016b16 <WM__Paint1+0x7e>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f7ff ff09 	bl	80168fc <WM__InitIVRSearch>
 8016aea:	b310      	cbz	r0, 8016b32 <WM__Paint1+0x9a>
 8016aec:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8016b4c <WM__Paint1+0xb4>
 8016af0:	260f      	movs	r6, #15
 8016af2:	9505      	str	r5, [sp, #20]
 8016af4:	9604      	str	r6, [sp, #16]
 8016af6:	9407      	str	r4, [sp, #28]
 8016af8:	f005 fec8 	bl	801c88c <GL_SetDefault>
 8016afc:	f8d9 3000 	ldr.w	r3, [r9]
 8016b00:	4628      	mov	r0, r5
 8016b02:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
 8016b06:	a904      	add	r1, sp, #16
 8016b08:	f7fc fa4e 	bl	8012fa8 <WM__SendMessage>
 8016b0c:	f7ff fdd0 	bl	80166b0 <WM__GetNextIVR>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d1ee      	bne.n	8016af2 <WM__Paint1+0x5a>
 8016b14:	e00d      	b.n	8016b32 <WM__Paint1+0x9a>
 8016b16:	230f      	movs	r3, #15
 8016b18:	9304      	str	r3, [sp, #16]
 8016b1a:	9505      	str	r5, [sp, #20]
 8016b1c:	9407      	str	r4, [sp, #28]
 8016b1e:	f005 feb5 	bl	801c88c <GL_SetDefault>
 8016b22:	4b0a      	ldr	r3, [pc, #40]	; (8016b4c <WM__Paint1+0xb4>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2200      	movs	r2, #0
 8016b28:	645a      	str	r2, [r3, #68]	; 0x44
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	a904      	add	r1, sp, #16
 8016b2e:	f7fc fa3b 	bl	8012fa8 <WM__SendMessage>
 8016b32:	783b      	ldrb	r3, [r7, #0]
 8016b34:	4628      	mov	r0, r5
 8016b36:	3b01      	subs	r3, #1
 8016b38:	212f      	movs	r1, #47	; 0x2f
 8016b3a:	703b      	strb	r3, [r7, #0]
 8016b3c:	f7fd fd5e 	bl	80145fc <WM_SendMessageNoPara>
 8016b40:	b009      	add	sp, #36	; 0x24
 8016b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b46:	bf00      	nop
 8016b48:	2002cb2c 	.word	0x2002cb2c
 8016b4c:	2000027c 	.word	0x2000027c

08016b50 <WM__DeleteSecure>:
 8016b50:	b508      	push	{r3, lr}
 8016b52:	f006 ff69 	bl	801da28 <GUI_ALLOC_h2p>
 8016b56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b58:	4a03      	ldr	r2, [pc, #12]	; (8016b68 <WM__DeleteSecure+0x18>)
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016b60:	6283      	str	r3, [r0, #40]	; 0x28
 8016b62:	6011      	str	r1, [r2, #0]
 8016b64:	bd08      	pop	{r3, pc}
 8016b66:	bf00      	nop
 8016b68:	2002b170 	.word	0x2002b170

08016b6c <WM_Exec>:
 8016b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b70:	b0ab      	sub	sp, #172	; 0xac
 8016b72:	f004 fbe3 	bl	801b33c <GUI_Lock>
 8016b76:	4b94      	ldr	r3, [pc, #592]	; (8016dc8 <WM_Exec+0x25c>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	b103      	cbz	r3, 8016b7e <WM_Exec+0x12>
 8016b7c:	4798      	blx	r3
 8016b7e:	2500      	movs	r5, #0
 8016b80:	e000      	b.n	8016b84 <WM_Exec+0x18>
 8016b82:	2501      	movs	r5, #1
 8016b84:	f7ff f9c8 	bl	8015f18 <_Exec1Input>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d1fa      	bne.n	8016b82 <WM_Exec+0x16>
 8016b8c:	f8df b240 	ldr.w	fp, [pc, #576]	; 8016dd0 <WM_Exec+0x264>
 8016b90:	f8db 3000 	ldr.w	r3, [fp]
 8016b94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016b98:	b123      	cbz	r3, 8016ba4 <WM_Exec+0x38>
 8016b9a:	4b8c      	ldr	r3, [pc, #560]	; (8016dcc <WM_Exec+0x260>)
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f040 80f5 	bne.w	8016d8e <WM_Exec+0x222>
 8016ba4:	9305      	str	r3, [sp, #20]
 8016ba6:	f004 fbbf 	bl	801b328 <GUI_Unlock>
 8016baa:	f8df a238 	ldr.w	sl, [pc, #568]	; 8016de4 <WM_Exec+0x278>
 8016bae:	f8db 3000 	ldr.w	r3, [fp]
 8016bb2:	4c87      	ldr	r4, [pc, #540]	; (8016dd0 <WM_Exec+0x264>)
 8016bb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016bb8:	b123      	cbz	r3, 8016bc4 <WM_Exec+0x58>
 8016bba:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8016dcc <WM_Exec+0x260>
 8016bbe:	f8b9 3000 	ldrh.w	r3, [r9]
 8016bc2:	b99b      	cbnz	r3, 8016bec <WM_Exec+0x80>
 8016bc4:	f004 fbba 	bl	801b33c <GUI_Lock>
 8016bc8:	9a05      	ldr	r2, [sp, #20]
 8016bca:	b14a      	cbz	r2, 8016be0 <WM_Exec+0x74>
 8016bcc:	4b81      	ldr	r3, [pc, #516]	; (8016dd4 <WM_Exec+0x268>)
 8016bce:	6818      	ldr	r0, [r3, #0]
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	f000 80e4 	beq.w	8016d9e <WM_Exec+0x232>
 8016bd6:	6843      	ldr	r3, [r0, #4]
 8016bd8:	4798      	blx	r3
 8016bda:	4b7f      	ldr	r3, [pc, #508]	; (8016dd8 <WM_Exec+0x26c>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	601a      	str	r2, [r3, #0]
 8016be0:	f004 fba2 	bl	801b328 <GUI_Unlock>
 8016be4:	4628      	mov	r0, r5
 8016be6:	b02b      	add	sp, #172	; 0xac
 8016be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bec:	f004 fba6 	bl	801b33c <GUI_Lock>
 8016bf0:	4a7a      	ldr	r2, [pc, #488]	; (8016ddc <WM_Exec+0x270>)
 8016bf2:	6816      	ldr	r6, [r2, #0]
 8016bf4:	b9de      	cbnz	r6, 8016c2e <WM_Exec+0xc2>
 8016bf6:	aa0e      	add	r2, sp, #56	; 0x38
 8016bf8:	4b79      	ldr	r3, [pc, #484]	; (8016de0 <WM_Exec+0x274>)
 8016bfa:	9204      	str	r2, [sp, #16]
 8016bfc:	4610      	mov	r0, r2
 8016bfe:	681e      	ldr	r6, [r3, #0]
 8016c00:	f005 fe0a 	bl	801c818 <GUI_SaveContext_W>
 8016c04:	6823      	ldr	r3, [r4, #0]
 8016c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c0a:	9206      	str	r2, [sp, #24]
 8016c0c:	9307      	str	r3, [sp, #28]
 8016c0e:	b9c6      	cbnz	r6, 8016c42 <WM_Exec+0xd6>
 8016c10:	4b72      	ldr	r3, [pc, #456]	; (8016ddc <WM_Exec+0x270>)
 8016c12:	9806      	ldr	r0, [sp, #24]
 8016c14:	601e      	str	r6, [r3, #0]
 8016c16:	f005 fe2d 	bl	801c874 <GUI_SetColor>
 8016c1a:	9807      	ldr	r0, [sp, #28]
 8016c1c:	f005 fe1e 	bl	801c85c <GUI_SetBkColor>
 8016c20:	9804      	ldr	r0, [sp, #16]
 8016c22:	f005 fe03 	bl	801c82c <GUI_RestoreContext>
 8016c26:	2501      	movs	r5, #1
 8016c28:	f004 fb7e 	bl	801b328 <GUI_Unlock>
 8016c2c:	e7bf      	b.n	8016bae <WM_Exec+0x42>
 8016c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8016c30:	4618      	mov	r0, r3
 8016c32:	9304      	str	r3, [sp, #16]
 8016c34:	f005 fdf0 	bl	801c818 <GUI_SaveContext_W>
 8016c38:	6823      	ldr	r3, [r4, #0]
 8016c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c3e:	9206      	str	r2, [sp, #24]
 8016c40:	9307      	str	r3, [sp, #28]
 8016c42:	f04f 0801 	mov.w	r8, #1
 8016c46:	ad0c      	add	r5, sp, #48	; 0x30
 8016c48:	4630      	mov	r0, r6
 8016c4a:	9609      	str	r6, [sp, #36]	; 0x24
 8016c4c:	f006 fef6 	bl	801da3c <GUI_ALLOC_LockH>
 8016c50:	f100 0208 	add.w	r2, r0, #8
 8016c54:	4603      	mov	r3, r0
 8016c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016c5c:	9202      	str	r2, [sp, #8]
 8016c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8016c62:	699a      	ldr	r2, [r3, #24]
 8016c64:	930a      	str	r3, [sp, #40]	; 0x28
 8016c66:	a80a      	add	r0, sp, #40	; 0x28
 8016c68:	9203      	str	r2, [sp, #12]
 8016c6a:	691c      	ldr	r4, [r3, #16]
 8016c6c:	f006 fef8 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016c70:	9a02      	ldr	r2, [sp, #8]
 8016c72:	f244 0320 	movw	r3, #16416	; 0x4020
 8016c76:	4013      	ands	r3, r2
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d032      	beq.n	8016ce2 <WM_Exec+0x176>
 8016c7c:	b1c4      	cbz	r4, 8016cb0 <WM_Exec+0x144>
 8016c7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016c80:	e009      	b.n	8016c96 <WM_Exec+0x12a>
 8016c82:	f003 fb7b 	bl	801a37c <GUI__IntersectRect>
 8016c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c88:	699f      	ldr	r7, [r3, #24]
 8016c8a:	a80b      	add	r0, sp, #44	; 0x2c
 8016c8c:	2f00      	cmp	r7, #0
 8016c8e:	d032      	beq.n	8016cf6 <WM_Exec+0x18a>
 8016c90:	f006 fee6 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016c94:	463c      	mov	r4, r7
 8016c96:	4620      	mov	r0, r4
 8016c98:	f006 fed0 	bl	801da3c <GUI_ALLOC_LockH>
 8016c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016ca0:	079f      	lsls	r7, r3, #30
 8016ca2:	4601      	mov	r1, r0
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	d4ec      	bmi.n	8016c82 <WM_Exec+0x116>
 8016ca8:	a80b      	add	r0, sp, #44	; 0x2c
 8016caa:	f006 fed9 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016cae:	2400      	movs	r4, #0
 8016cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cb2:	f006 fec3 	bl	801da3c <GUI_ALLOC_LockH>
 8016cb6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016cb8:	900a      	str	r0, [sp, #40]	; 0x28
 8016cba:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8016cbe:	f023 0320 	bic.w	r3, r3, #32
 8016cc2:	0492      	lsls	r2, r2, #18
 8016cc4:	bf48      	it	mi
 8016cc6:	f043 0304 	orrmi.w	r3, r3, #4
 8016cca:	6283      	str	r3, [r0, #40]	; 0x28
 8016ccc:	a80a      	add	r0, sp, #40	; 0x28
 8016cce:	f006 fec7 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016cd2:	f8b9 3000 	ldrh.w	r3, [r9]
 8016cd6:	3b01      	subs	r3, #1
 8016cd8:	f8a9 3000 	strh.w	r3, [r9]
 8016cdc:	b10c      	cbz	r4, 8016ce2 <WM_Exec+0x176>
 8016cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ce2:	4630      	mov	r0, r6
 8016ce4:	f006 fea0 	bl	801da28 <GUI_ALLOC_h2p>
 8016ce8:	6946      	ldr	r6, [r0, #20]
 8016cea:	2e00      	cmp	r6, #0
 8016cec:	d090      	beq.n	8016c10 <WM_Exec+0xa4>
 8016cee:	f1b8 0f00 	cmp.w	r8, #0
 8016cf2:	d1a9      	bne.n	8016c48 <WM_Exec+0xdc>
 8016cf4:	e78c      	b.n	8016c10 <WM_Exec+0xa4>
 8016cf6:	f006 feb3 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016cfa:	f8da 3000 	ldr.w	r3, [sl]
 8016cfe:	429c      	cmp	r4, r3
 8016d00:	d003      	beq.n	8016d0a <WM_Exec+0x19e>
 8016d02:	4a38      	ldr	r2, [pc, #224]	; (8016de4 <WM_Exec+0x278>)
 8016d04:	6853      	ldr	r3, [r2, #4]
 8016d06:	429c      	cmp	r4, r3
 8016d08:	d1d1      	bne.n	8016cae <WM_Exec+0x142>
 8016d0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016d0c:	f004 fb16 	bl	801b33c <GUI_Lock>
 8016d10:	f8db 3000 	ldr.w	r3, [fp]
 8016d14:	b90f      	cbnz	r7, 8016d1a <WM_Exec+0x1ae>
 8016d16:	4a32      	ldr	r2, [pc, #200]	; (8016de0 <WM_Exec+0x274>)
 8016d18:	6817      	ldr	r7, [r2, #0]
 8016d1a:	649f      	str	r7, [r3, #72]	; 0x48
 8016d1c:	463c      	mov	r4, r7
 8016d1e:	e000      	b.n	8016d22 <WM_Exec+0x1b6>
 8016d20:	461c      	mov	r4, r3
 8016d22:	4620      	mov	r0, r4
 8016d24:	f006 fe80 	bl	801da28 <GUI_ALLOC_h2p>
 8016d28:	6983      	ldr	r3, [r0, #24]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d1f8      	bne.n	8016d20 <WM_Exec+0x1b4>
 8016d2e:	f8da 1000 	ldr.w	r1, [sl]
 8016d32:	428c      	cmp	r4, r1
 8016d34:	d03b      	beq.n	8016dae <WM_Exec+0x242>
 8016d36:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d03b      	beq.n	8016db6 <WM_Exec+0x24a>
 8016d3e:	f003 f99f 	bl	801a080 <LCD_SetClipRectMax>
 8016d42:	4638      	mov	r0, r7
 8016d44:	f006 fe70 	bl	801da28 <GUI_ALLOC_h2p>
 8016d48:	f8db 3000 	ldr.w	r3, [fp]
 8016d4c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8016d50:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016d54:	651a      	str	r2, [r3, #80]	; 0x50
 8016d56:	64d9      	str	r1, [r3, #76]	; 0x4c
 8016d58:	f004 fae6 	bl	801b328 <GUI_Unlock>
 8016d5c:	9b02      	ldr	r3, [sp, #8]
 8016d5e:	0759      	lsls	r1, r3, #29
 8016d60:	d510      	bpl.n	8016d84 <WM_Exec+0x218>
 8016d62:	9a03      	ldr	r2, [sp, #12]
 8016d64:	b162      	cbz	r2, 8016d80 <WM_Exec+0x214>
 8016d66:	f003 0301 	and.w	r3, r3, #1
 8016d6a:	f083 0301 	eor.w	r3, r3, #1
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	4628      	mov	r0, r5
 8016d72:	491d      	ldr	r1, [pc, #116]	; (8016de8 <WM_Exec+0x27c>)
 8016d74:	aa09      	add	r2, sp, #36	; 0x24
 8016d76:	2300      	movs	r3, #0
 8016d78:	f000 fb1a 	bl	80173b0 <GUI_MEMDEV_Draw>
 8016d7c:	2400      	movs	r4, #0
 8016d7e:	e797      	b.n	8016cb0 <WM_Exec+0x144>
 8016d80:	2301      	movs	r3, #1
 8016d82:	e7f4      	b.n	8016d6e <WM_Exec+0x202>
 8016d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d86:	f7fe f9ed 	bl	8015164 <WM__PaintWinAndOverlays>
 8016d8a:	2401      	movs	r4, #1
 8016d8c:	e790      	b.n	8016cb0 <WM_Exec+0x144>
 8016d8e:	4b11      	ldr	r3, [pc, #68]	; (8016dd4 <WM_Exec+0x268>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	b193      	cbz	r3, 8016dba <WM_Exec+0x24e>
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	4798      	blx	r3
 8016d98:	2201      	movs	r2, #1
 8016d9a:	9205      	str	r2, [sp, #20]
 8016d9c:	e703      	b.n	8016ba6 <WM_Exec+0x3a>
 8016d9e:	f003 fccb 	bl	801a738 <GUI__ManageCache>
 8016da2:	f004 fac1 	bl	801b328 <GUI_Unlock>
 8016da6:	4628      	mov	r0, r5
 8016da8:	b02b      	add	sp, #172	; 0xac
 8016daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dae:	4618      	mov	r0, r3
 8016db0:	f004 fbe4 	bl	801b57c <GUI_SelectLayer>
 8016db4:	e7c3      	b.n	8016d3e <WM_Exec+0x1d2>
 8016db6:	2001      	movs	r0, #1
 8016db8:	e7fa      	b.n	8016db0 <WM_Exec+0x244>
 8016dba:	2001      	movs	r0, #1
 8016dbc:	f003 fcbc 	bl	801a738 <GUI__ManageCache>
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	9305      	str	r3, [sp, #20]
 8016dc4:	e6ef      	b.n	8016ba6 <WM_Exec+0x3a>
 8016dc6:	bf00      	nop
 8016dc8:	2002cb0c 	.word	0x2002cb0c
 8016dcc:	2002cb18 	.word	0x2002cb18
 8016dd0:	2000027c 	.word	0x2000027c
 8016dd4:	2002cb40 	.word	0x2002cb40
 8016dd8:	2002cb28 	.word	0x2002cb28
 8016ddc:	2002b194 	.word	0x2002b194
 8016de0:	2002cb1c 	.word	0x2002cb1c
 8016de4:	2002cb00 	.word	0x2002cb00
 8016de8:	08015205 	.word	0x08015205

08016dec <WM_Activate>:
 8016dec:	4b02      	ldr	r3, [pc, #8]	; (8016df8 <WM_Activate+0xc>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2201      	movs	r2, #1
 8016df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8016df6:	4770      	bx	lr
 8016df8:	2000027c 	.word	0x2000027c

08016dfc <WM_Deactivate>:
 8016dfc:	b508      	push	{r3, lr}
 8016dfe:	4b06      	ldr	r3, [pc, #24]	; (8016e18 <WM_Deactivate+0x1c>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	2200      	movs	r2, #0
 8016e04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8016e08:	f004 fa98 	bl	801b33c <GUI_Lock>
 8016e0c:	f003 f938 	bl	801a080 <LCD_SetClipRectMax>
 8016e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016e14:	f004 ba88 	b.w	801b328 <GUI_Unlock>
 8016e18:	2000027c 	.word	0x2000027c

08016e1c <WM_DefaultProc>:
 8016e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e20:	e890 0028 	ldmia.w	r0, {r3, r5}
 8016e24:	3b0e      	subs	r3, #14
 8016e26:	b084      	sub	sp, #16
 8016e28:	4604      	mov	r4, r0
 8016e2a:	68c1      	ldr	r1, [r0, #12]
 8016e2c:	2b1a      	cmp	r3, #26
 8016e2e:	d812      	bhi.n	8016e56 <WM_DefaultProc+0x3a>
 8016e30:	e8df f003 	tbb	[pc, r3]
 8016e34:	11111147 	.word	0x11111147
 8016e38:	110e1111 	.word	0x110e1111
 8016e3c:	11114e11 	.word	0x11114e11
 8016e40:	11111111 	.word	0x11111111
 8016e44:	11111111 	.word	0x11111111
 8016e48:	11111152 	.word	0x11111152
 8016e4c:	1111      	.short	0x1111
 8016e4e:	16          	.byte	0x16
 8016e4f:	00          	.byte	0x00
 8016e50:	4628      	mov	r0, r5
 8016e52:	f7fc f97d 	bl	8013150 <WM__GetClientRectEx>
 8016e56:	2300      	movs	r3, #0
 8016e58:	60e3      	str	r3, [r4, #12]
 8016e5a:	b004      	add	sp, #16
 8016e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e60:	2d00      	cmp	r5, #0
 8016e62:	d0fa      	beq.n	8016e5a <WM_DefaultProc+0x3e>
 8016e64:	f004 fa6a 	bl	801b33c <GUI_Lock>
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f006 fde7 	bl	801da3c <GUI_ALLOC_LockH>
 8016e6e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8016e72:	9000      	str	r0, [sp, #0]
 8016e74:	f018 0f02 	tst.w	r8, #2
 8016e78:	d01d      	beq.n	8016eb6 <WM_DefaultProc+0x9a>
 8016e7a:	c803      	ldmia	r0, {r0, r1}
 8016e7c:	af02      	add	r7, sp, #8
 8016e7e:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8016e82:	e887 0003 	stmia.w	r7, {r0, r1}
 8016e86:	d142      	bne.n	8016f0e <WM_DefaultProc+0xf2>
 8016e88:	462e      	mov	r6, r5
 8016e8a:	e008      	b.n	8016e9e <WM_DefaultProc+0x82>
 8016e8c:	f003 fa76 	bl	801a37c <GUI__IntersectRect>
 8016e90:	9b01      	ldr	r3, [sp, #4]
 8016e92:	699c      	ldr	r4, [r3, #24]
 8016e94:	a801      	add	r0, sp, #4
 8016e96:	b32c      	cbz	r4, 8016ee4 <WM_DefaultProc+0xc8>
 8016e98:	f006 fde2 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016e9c:	4626      	mov	r6, r4
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	f006 fdcc 	bl	801da3c <GUI_ALLOC_LockH>
 8016ea4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016ea6:	9001      	str	r0, [sp, #4]
 8016ea8:	0793      	lsls	r3, r2, #30
 8016eaa:	4601      	mov	r1, r0
 8016eac:	4638      	mov	r0, r7
 8016eae:	d4ed      	bmi.n	8016e8c <WM_DefaultProc+0x70>
 8016eb0:	a801      	add	r0, sp, #4
 8016eb2:	f006 fdd5 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016eb6:	4668      	mov	r0, sp
 8016eb8:	f006 fdd2 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016ebc:	f004 fa34 	bl	801b328 <GUI_Unlock>
 8016ec0:	e7cb      	b.n	8016e5a <WM_DefaultProc+0x3e>
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	4621      	mov	r1, r4
 8016ec6:	f7fd fba7 	bl	8014618 <WM_SendToParent>
 8016eca:	b004      	add	sp, #16
 8016ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed0:	60c5      	str	r5, [r0, #12]
 8016ed2:	b004      	add	sp, #16
 8016ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8016edc:	60c3      	str	r3, [r0, #12]
 8016ede:	b004      	add	sp, #16
 8016ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee4:	f006 fdbc 	bl	801da60 <GUI_ALLOC_UnlockH>
 8016ee8:	4b0f      	ldr	r3, [pc, #60]	; (8016f28 <WM_DefaultProc+0x10c>)
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	4296      	cmp	r6, r2
 8016eee:	d002      	beq.n	8016ef6 <WM_DefaultProc+0xda>
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	429e      	cmp	r6, r3
 8016ef4:	d1df      	bne.n	8016eb6 <WM_DefaultProc+0x9a>
 8016ef6:	f640 0301 	movw	r3, #2049	; 0x801
 8016efa:	ea08 0303 	and.w	r3, r8, r3
 8016efe:	2b01      	cmp	r3, #1
 8016f00:	d009      	beq.n	8016f16 <WM_DefaultProc+0xfa>
 8016f02:	4628      	mov	r0, r5
 8016f04:	4639      	mov	r1, r7
 8016f06:	2220      	movs	r2, #32
 8016f08:	f7fe f9b2 	bl	8015270 <_Invalidate1Abs>
 8016f0c:	e7d3      	b.n	8016eb6 <WM_DefaultProc+0x9a>
 8016f0e:	4628      	mov	r0, r5
 8016f10:	f7fe fb56 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 8016f14:	e7b8      	b.n	8016e88 <WM_DefaultProc+0x6c>
 8016f16:	9b00      	ldr	r3, [sp, #0]
 8016f18:	4638      	mov	r0, r7
 8016f1a:	6999      	ldr	r1, [r3, #24]
 8016f1c:	6a1a      	ldr	r2, [r3, #32]
 8016f1e:	2320      	movs	r3, #32
 8016f20:	f7fe fe6e 	bl	8015c00 <WM__InvalidateRect>
 8016f24:	e7c7      	b.n	8016eb6 <WM_DefaultProc+0x9a>
 8016f26:	bf00      	nop
 8016f28:	2002cb00 	.word	0x2002cb00

08016f2c <WM_Init>:
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8017118 <WM_Init+0x1ec>
 8016f34:	f899 4000 	ldrb.w	r4, [r9]
 8016f38:	b08b      	sub	sp, #44	; 0x2c
 8016f3a:	2c00      	cmp	r4, #0
 8016f3c:	d174      	bne.n	8017028 <WM_Init+0xfc>
 8016f3e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 801711c <WM_Init+0x1f0>
 8016f42:	4866      	ldr	r0, [pc, #408]	; (80170dc <WM_Init+0x1b0>)
 8016f44:	f8d8 3000 	ldr.w	r3, [r8]
 8016f48:	4965      	ldr	r1, [pc, #404]	; (80170e0 <WM_Init+0x1b4>)
 8016f4a:	4a66      	ldr	r2, [pc, #408]	; (80170e4 <WM_Init+0x1b8>)
 8016f4c:	645c      	str	r4, [r3, #68]	; 0x44
 8016f4e:	4b66      	ldr	r3, [pc, #408]	; (80170e8 <WM_Init+0x1bc>)
 8016f50:	4e66      	ldr	r6, [pc, #408]	; (80170ec <WM_Init+0x1c0>)
 8016f52:	601c      	str	r4, [r3, #0]
 8016f54:	6004      	str	r4, [r0, #0]
 8016f56:	800c      	strh	r4, [r1, #0]
 8016f58:	8014      	strh	r4, [r2, #0]
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	f004 ff1c 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8016f60:	b1c8      	cbz	r0, 8016f96 <WM_Init+0x6a>
 8016f62:	2300      	movs	r3, #0
 8016f64:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8016f68:	f04f 37ff 	mov.w	r7, #4294967295
 8016f6c:	4960      	ldr	r1, [pc, #384]	; (80170f0 <WM_Init+0x1c4>)
 8016f6e:	9102      	str	r1, [sp, #8]
 8016f70:	2502      	movs	r5, #2
 8016f72:	4618      	mov	r0, r3
 8016f74:	9303      	str	r3, [sp, #12]
 8016f76:	4619      	mov	r1, r3
 8016f78:	9700      	str	r7, [sp, #0]
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	9501      	str	r5, [sp, #4]
 8016f7e:	f7ff fa43 	bl	8016408 <WM_CreateWindowAsChild>
 8016f82:	4a5c      	ldr	r2, [pc, #368]	; (80170f4 <WM_Init+0x1c8>)
 8016f84:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8016f88:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8016f8c:	4607      	mov	r7, r0
 8016f8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016f92:	2800      	cmp	r0, #0
 8016f94:	d14b      	bne.n	801702e <WM_Init+0x102>
 8016f96:	3401      	adds	r4, #1
 8016f98:	2c02      	cmp	r4, #2
 8016f9a:	d1de      	bne.n	8016f5a <WM_Init+0x2e>
 8016f9c:	4856      	ldr	r0, [pc, #344]	; (80170f8 <WM_Init+0x1cc>)
 8016f9e:	f7fc f8cf 	bl	8013140 <WM__AddCriticalHandle>
 8016fa2:	4856      	ldr	r0, [pc, #344]	; (80170fc <WM_Init+0x1d0>)
 8016fa4:	f7fc f8cc 	bl	8013140 <WM__AddCriticalHandle>
 8016fa8:	4855      	ldr	r0, [pc, #340]	; (8017100 <WM_Init+0x1d4>)
 8016faa:	f7fc f8c9 	bl	8013140 <WM__AddCriticalHandle>
 8016fae:	4855      	ldr	r0, [pc, #340]	; (8017104 <WM_Init+0x1d8>)
 8016fb0:	f7fc f8c6 	bl	8013140 <WM__AddCriticalHandle>
 8016fb4:	4854      	ldr	r0, [pc, #336]	; (8017108 <WM_Init+0x1dc>)
 8016fb6:	f7fc f8c3 	bl	8013140 <WM__AddCriticalHandle>
 8016fba:	4854      	ldr	r0, [pc, #336]	; (801710c <WM_Init+0x1e0>)
 8016fbc:	f7fc f8c0 	bl	8013140 <WM__AddCriticalHandle>
 8016fc0:	6835      	ldr	r5, [r6, #0]
 8016fc2:	f004 f9bb 	bl	801b33c <GUI_Lock>
 8016fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8016fca:	b90d      	cbnz	r5, 8016fd0 <WM_Init+0xa4>
 8016fcc:	4a46      	ldr	r2, [pc, #280]	; (80170e8 <WM_Init+0x1bc>)
 8016fce:	6815      	ldr	r5, [r2, #0]
 8016fd0:	649d      	str	r5, [r3, #72]	; 0x48
 8016fd2:	462c      	mov	r4, r5
 8016fd4:	e000      	b.n	8016fd8 <WM_Init+0xac>
 8016fd6:	461c      	mov	r4, r3
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f006 fd25 	bl	801da28 <GUI_ALLOC_h2p>
 8016fde:	6983      	ldr	r3, [r0, #24]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d1f8      	bne.n	8016fd6 <WM_Init+0xaa>
 8016fe4:	6832      	ldr	r2, [r6, #0]
 8016fe6:	4941      	ldr	r1, [pc, #260]	; (80170ec <WM_Init+0x1c0>)
 8016fe8:	4294      	cmp	r4, r2
 8016fea:	d071      	beq.n	80170d0 <WM_Init+0x1a4>
 8016fec:	684b      	ldr	r3, [r1, #4]
 8016fee:	429c      	cmp	r4, r3
 8016ff0:	d072      	beq.n	80170d8 <WM_Init+0x1ac>
 8016ff2:	f003 f845 	bl	801a080 <LCD_SetClipRectMax>
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f006 fd16 	bl	801da28 <GUI_ALLOC_h2p>
 8016ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8017000:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017004:	f9b0 1000 	ldrsh.w	r1, [r0]
 8017008:	64d9      	str	r1, [r3, #76]	; 0x4c
 801700a:	651a      	str	r2, [r3, #80]	; 0x50
 801700c:	f004 f98c 	bl	801b328 <GUI_Unlock>
 8017010:	483f      	ldr	r0, [pc, #252]	; (8017110 <WM_Init+0x1e4>)
 8017012:	4b40      	ldr	r3, [pc, #256]	; (8017114 <WM_Init+0x1e8>)
 8017014:	f8d8 2000 	ldr.w	r2, [r8]
 8017018:	6003      	str	r3, [r0, #0]
 801701a:	2301      	movs	r3, #1
 801701c:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 8017020:	f889 3000 	strb.w	r3, [r9]
 8017024:	f005 f900 	bl	801c228 <GUI__RegisterExit>
 8017028:	b00b      	add	sp, #44	; 0x2c
 801702a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702e:	f004 f985 	bl	801b33c <GUI_Lock>
 8017032:	4638      	mov	r0, r7
 8017034:	f006 fd02 	bl	801da3c <GUI_ALLOC_LockH>
 8017038:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801703a:	9006      	str	r0, [sp, #24]
 801703c:	0799      	lsls	r1, r3, #30
 801703e:	9305      	str	r3, [sp, #20]
 8017040:	d51e      	bpl.n	8017080 <WM_Init+0x154>
 8017042:	c803      	ldmia	r0, {r0, r1}
 8017044:	f10d 0a20 	add.w	sl, sp, #32
 8017048:	03da      	lsls	r2, r3, #15
 801704a:	e88a 0003 	stmia.w	sl, {r0, r1}
 801704e:	d43b      	bmi.n	80170c8 <WM_Init+0x19c>
 8017050:	463d      	mov	r5, r7
 8017052:	46bb      	mov	fp, r7
 8017054:	e008      	b.n	8017068 <WM_Init+0x13c>
 8017056:	f003 f991 	bl	801a37c <GUI__IntersectRect>
 801705a:	9b07      	ldr	r3, [sp, #28]
 801705c:	699f      	ldr	r7, [r3, #24]
 801705e:	a807      	add	r0, sp, #28
 8017060:	b1a7      	cbz	r7, 801708c <WM_Init+0x160>
 8017062:	f006 fcfd 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017066:	463d      	mov	r5, r7
 8017068:	4628      	mov	r0, r5
 801706a:	f006 fce7 	bl	801da3c <GUI_ALLOC_LockH>
 801706e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017070:	9007      	str	r0, [sp, #28]
 8017072:	079b      	lsls	r3, r3, #30
 8017074:	4601      	mov	r1, r0
 8017076:	4650      	mov	r0, sl
 8017078:	d4ed      	bmi.n	8017056 <WM_Init+0x12a>
 801707a:	a807      	add	r0, sp, #28
 801707c:	f006 fcf0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017080:	a806      	add	r0, sp, #24
 8017082:	f006 fced 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017086:	f004 f94f 	bl	801b328 <GUI_Unlock>
 801708a:	e784      	b.n	8016f96 <WM_Init+0x6a>
 801708c:	f006 fce8 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017090:	6833      	ldr	r3, [r6, #0]
 8017092:	429d      	cmp	r5, r3
 8017094:	465f      	mov	r7, fp
 8017096:	d003      	beq.n	80170a0 <WM_Init+0x174>
 8017098:	4914      	ldr	r1, [pc, #80]	; (80170ec <WM_Init+0x1c0>)
 801709a:	684b      	ldr	r3, [r1, #4]
 801709c:	429d      	cmp	r5, r3
 801709e:	d1ef      	bne.n	8017080 <WM_Init+0x154>
 80170a0:	9a05      	ldr	r2, [sp, #20]
 80170a2:	f640 0301 	movw	r3, #2049	; 0x801
 80170a6:	4013      	ands	r3, r2
 80170a8:	2b01      	cmp	r3, #1
 80170aa:	d005      	beq.n	80170b8 <WM_Init+0x18c>
 80170ac:	4638      	mov	r0, r7
 80170ae:	4651      	mov	r1, sl
 80170b0:	2220      	movs	r2, #32
 80170b2:	f7fe f8dd 	bl	8015270 <_Invalidate1Abs>
 80170b6:	e7e3      	b.n	8017080 <WM_Init+0x154>
 80170b8:	9b06      	ldr	r3, [sp, #24]
 80170ba:	4650      	mov	r0, sl
 80170bc:	6999      	ldr	r1, [r3, #24]
 80170be:	6a1a      	ldr	r2, [r3, #32]
 80170c0:	2320      	movs	r3, #32
 80170c2:	f7fe fd9d 	bl	8015c00 <WM__InvalidateRect>
 80170c6:	e7db      	b.n	8017080 <WM_Init+0x154>
 80170c8:	4638      	mov	r0, r7
 80170ca:	f7fe fa79 	bl	80155c0 <WM__InvalidateDrawAndDescs>
 80170ce:	e7bf      	b.n	8017050 <WM_Init+0x124>
 80170d0:	4618      	mov	r0, r3
 80170d2:	f004 fa53 	bl	801b57c <GUI_SelectLayer>
 80170d6:	e78c      	b.n	8016ff2 <WM_Init+0xc6>
 80170d8:	2001      	movs	r0, #1
 80170da:	e7fa      	b.n	80170d2 <WM_Init+0x1a6>
 80170dc:	2002b194 	.word	0x2002b194
 80170e0:	2002cb18 	.word	0x2002cb18
 80170e4:	2002caf8 	.word	0x2002caf8
 80170e8:	2002cb1c 	.word	0x2002cb1c
 80170ec:	2002cb00 	.word	0x2002cb00
 80170f0:	080162a1 	.word	0x080162a1
 80170f4:	2002cb34 	.word	0x2002cb34
 80170f8:	2002ccbc 	.word	0x2002ccbc
 80170fc:	2002ccac 	.word	0x2002ccac
 8017100:	2002cc9c 	.word	0x2002cc9c
 8017104:	2002ccc4 	.word	0x2002ccc4
 8017108:	2002ccb4 	.word	0x2002ccb4
 801710c:	2002cca4 	.word	0x2002cca4
 8017110:	2002b174 	.word	0x2002b174
 8017114:	08014bf5 	.word	0x08014bf5
 8017118:	2002b198 	.word	0x2002b198
 801711c:	2000027c 	.word	0x2000027c

08017120 <GUI_MEMDEV_Paint1Static>:
 8017120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017124:	f8df b198 	ldr.w	fp, [pc, #408]	; 80172c0 <GUI_MEMDEV_Paint1Static+0x1a0>
 8017128:	b089      	sub	sp, #36	; 0x24
 801712a:	4604      	mov	r4, r0
 801712c:	2505      	movs	r5, #5
 801712e:	4620      	mov	r0, r4
 8017130:	f006 fc84 	bl	801da3c <GUI_ALLOC_LockH>
 8017134:	4603      	mov	r3, r0
 8017136:	a807      	add	r0, sp, #28
 8017138:	881f      	ldrh	r7, [r3, #0]
 801713a:	889e      	ldrh	r6, [r3, #4]
 801713c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017140:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8017144:	9307      	str	r3, [sp, #28]
 8017146:	b23f      	sxth	r7, r7
 8017148:	b236      	sxth	r6, r6
 801714a:	1bf6      	subs	r6, r6, r7
 801714c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8017150:	fa0f f989 	sxth.w	r9, r9
 8017154:	f006 fc84 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017158:	3601      	adds	r6, #1
 801715a:	fa0f fc8a 	sxth.w	ip, sl
 801715e:	ebc9 0c0c 	rsb	ip, r9, ip
 8017162:	2e00      	cmp	r6, #0
 8017164:	f10c 0a01 	add.w	sl, ip, #1
 8017168:	dd57      	ble.n	801721a <GUI_MEMDEV_Paint1Static+0xfa>
 801716a:	f1ba 0f00 	cmp.w	sl, #0
 801716e:	dd54      	ble.n	801721a <GUI_MEMDEV_Paint1Static+0xfa>
 8017170:	f1b8 0f00 	cmp.w	r8, #0
 8017174:	d156      	bne.n	8017224 <GUI_MEMDEV_Paint1Static+0x104>
 8017176:	f7fc fe27 	bl	8013dc8 <WM_GetDesktopWindow>
 801717a:	4284      	cmp	r4, r0
 801717c:	f000 8082 	beq.w	8017284 <GUI_MEMDEV_Paint1Static+0x164>
 8017180:	4a4b      	ldr	r2, [pc, #300]	; (80172b0 <GUI_MEMDEV_Paint1Static+0x190>)
 8017182:	4b4c      	ldr	r3, [pc, #304]	; (80172b4 <GUI_MEMDEV_Paint1Static+0x194>)
 8017184:	9201      	str	r2, [sp, #4]
 8017186:	f04f 0801 	mov.w	r8, #1
 801718a:	9302      	str	r3, [sp, #8]
 801718c:	4638      	mov	r0, r7
 801718e:	4649      	mov	r1, r9
 8017190:	4632      	mov	r2, r6
 8017192:	4653      	mov	r3, sl
 8017194:	f8cd 8000 	str.w	r8, [sp]
 8017198:	f001 f872 	bl	8018280 <GUI_MEMDEV__CreateFixed>
 801719c:	4607      	mov	r7, r0
 801719e:	4620      	mov	r0, r4
 80171a0:	f006 fc4c 	bl	801da3c <GUI_ALLOC_LockH>
 80171a4:	9007      	str	r0, [sp, #28]
 80171a6:	6247      	str	r7, [r0, #36]	; 0x24
 80171a8:	2f00      	cmp	r7, #0
 80171aa:	d064      	beq.n	8017276 <GUI_MEMDEV_Paint1Static+0x156>
 80171ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171ae:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80172c4 <GUI_MEMDEV_Paint1Static+0x1a4>
 80171b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80171b6:	6283      	str	r3, [r0, #40]	; 0x28
 80171b8:	a807      	add	r0, sp, #28
 80171ba:	f006 fc51 	bl	801da60 <GUI_ALLOC_UnlockH>
 80171be:	4638      	mov	r0, r7
 80171c0:	f001 f982 	bl	80184c8 <GUI_MEMDEV_Select>
 80171c4:	9005      	str	r0, [sp, #20]
 80171c6:	4640      	mov	r0, r8
 80171c8:	f004 f9ae 	bl	801b528 <GUI__AlphaPreserveTrans>
 80171cc:	4638      	mov	r0, r7
 80171ce:	f000 f8d7 	bl	8017380 <GUI_MEMDEV_GetDataPtr>
 80171d2:	4a39      	ldr	r2, [pc, #228]	; (80172b8 <GUI_MEMDEV_Paint1Static+0x198>)
 80171d4:	f8db 3000 	ldr.w	r3, [fp]
 80171d8:	7811      	ldrb	r1, [r2, #0]
 80171da:	fb0a f206 	mul.w	r2, sl, r6
 80171de:	0092      	lsls	r2, r2, #2
 80171e0:	4798      	blx	r3
 80171e2:	4a36      	ldr	r2, [pc, #216]	; (80172bc <GUI_MEMDEV_Paint1Static+0x19c>)
 80171e4:	f8d9 6000 	ldr.w	r6, [r9]
 80171e8:	6014      	str	r4, [r2, #0]
 80171ea:	4620      	mov	r0, r4
 80171ec:	f7fd f814 	bl	8014218 <WM_GetWindowOrgX>
 80171f0:	f8c9 0000 	str.w	r0, [r9]
 80171f4:	4620      	mov	r0, r4
 80171f6:	f7ff fc4f 	bl	8016a98 <WM__Paint1>
 80171fa:	2300      	movs	r3, #0
 80171fc:	4a2f      	ldr	r2, [pc, #188]	; (80172bc <GUI_MEMDEV_Paint1Static+0x19c>)
 80171fe:	f8c9 6000 	str.w	r6, [r9]
 8017202:	4618      	mov	r0, r3
 8017204:	6013      	str	r3, [r2, #0]
 8017206:	f004 f98f 	bl	801b528 <GUI__AlphaPreserveTrans>
 801720a:	9805      	ldr	r0, [sp, #20]
 801720c:	f001 f95c 	bl	80184c8 <GUI_MEMDEV_Select>
 8017210:	4620      	mov	r0, r4
 8017212:	f006 fc09 	bl	801da28 <GUI_ALLOC_h2p>
 8017216:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017218:	b9f8      	cbnz	r0, 801725a <GUI_MEMDEV_Paint1Static+0x13a>
 801721a:	3d01      	subs	r5, #1
 801721c:	d187      	bne.n	801712e <GUI_MEMDEV_Paint1Static+0xe>
 801721e:	b009      	add	sp, #36	; 0x24
 8017220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017224:	4640      	mov	r0, r8
 8017226:	f006 fc09 	bl	801da3c <GUI_ALLOC_LockH>
 801722a:	4603      	mov	r3, r0
 801722c:	a808      	add	r0, sp, #32
 801722e:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 8017232:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017236:	fa0f fa8a 	sxth.w	sl, sl
 801723a:	88de      	ldrh	r6, [r3, #6]
 801723c:	f006 fc10 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017240:	4557      	cmp	r7, sl
 8017242:	d00f      	beq.n	8017264 <GUI_MEMDEV_Paint1Static+0x144>
 8017244:	4640      	mov	r0, r8
 8017246:	4639      	mov	r1, r7
 8017248:	464a      	mov	r2, r9
 801724a:	f000 f83d 	bl	80172c8 <GUI_MEMDEV_SetOrg>
 801724e:	4620      	mov	r0, r4
 8017250:	f006 fbea 	bl	801da28 <GUI_ALLOC_h2p>
 8017254:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017256:	2800      	cmp	r0, #0
 8017258:	d0df      	beq.n	801721a <GUI_MEMDEV_Paint1Static+0xfa>
 801725a:	f009 fadb 	bl	8020814 <GUI_MEMDEV_Write>
 801725e:	b009      	add	sp, #36	; 0x24
 8017260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017264:	b236      	sxth	r6, r6
 8017266:	45b1      	cmp	r9, r6
 8017268:	d0d2      	beq.n	8017210 <GUI_MEMDEV_Paint1Static+0xf0>
 801726a:	4640      	mov	r0, r8
 801726c:	4639      	mov	r1, r7
 801726e:	464a      	mov	r2, r9
 8017270:	f000 f82a 	bl	80172c8 <GUI_MEMDEV_SetOrg>
 8017274:	e7eb      	b.n	801724e <GUI_MEMDEV_Paint1Static+0x12e>
 8017276:	a807      	add	r0, sp, #28
 8017278:	f006 fbf2 	bl	801da60 <GUI_ALLOC_UnlockH>
 801727c:	4620      	mov	r0, r4
 801727e:	f7ff fc0b 	bl	8016a98 <WM__Paint1>
 8017282:	e7ca      	b.n	801721a <GUI_MEMDEV_Paint1Static+0xfa>
 8017284:	f002 fa44 	bl	8019710 <LCD_GetXSize>
 8017288:	4680      	mov	r8, r0
 801728a:	f002 fa55 	bl	8019738 <LCD_GetYSize>
 801728e:	4546      	cmp	r6, r8
 8017290:	dc03      	bgt.n	801729a <GUI_MEMDEV_Paint1Static+0x17a>
 8017292:	4582      	cmp	sl, r0
 8017294:	f77f af74 	ble.w	8017180 <GUI_MEMDEV_Paint1Static+0x60>
 8017298:	46b0      	mov	r8, r6
 801729a:	4582      	cmp	sl, r0
 801729c:	bfa8      	it	ge
 801729e:	4682      	movge	sl, r0
 80172a0:	4652      	mov	r2, sl
 80172a2:	4620      	mov	r0, r4
 80172a4:	4641      	mov	r1, r8
 80172a6:	f7fd fa53 	bl	8014750 <WM_SetSize>
 80172aa:	4646      	mov	r6, r8
 80172ac:	e768      	b.n	8017180 <GUI_MEMDEV_Paint1Static+0x60>
 80172ae:	bf00      	nop
 80172b0:	08026d2c 	.word	0x08026d2c
 80172b4:	08029cf0 	.word	0x08029cf0
 80172b8:	2002b199 	.word	0x2002b199
 80172bc:	2002cb4c 	.word	0x2002cb4c
 80172c0:	20000250 	.word	0x20000250
 80172c4:	2002cb88 	.word	0x2002cb88

080172c8 <GUI_MEMDEV_SetOrg>:
 80172c8:	b570      	push	{r4, r5, r6, lr}
 80172ca:	4604      	mov	r4, r0
 80172cc:	b082      	sub	sp, #8
 80172ce:	460d      	mov	r5, r1
 80172d0:	4616      	mov	r6, r2
 80172d2:	b928      	cbnz	r0, 80172e0 <GUI_MEMDEV_SetOrg+0x18>
 80172d4:	4b18      	ldr	r3, [pc, #96]	; (8017338 <GUI_MEMDEV_SetOrg+0x70>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80172da:	b90c      	cbnz	r4, 80172e0 <GUI_MEMDEV_SetOrg+0x18>
 80172dc:	b002      	add	sp, #8
 80172de:	bd70      	pop	{r4, r5, r6, pc}
 80172e0:	f004 f82c 	bl	801b33c <GUI_Lock>
 80172e4:	4620      	mov	r0, r4
 80172e6:	f006 fba9 	bl	801da3c <GUI_ALLOC_LockH>
 80172ea:	b2b6      	uxth	r6, r6
 80172ec:	b2ad      	uxth	r5, r5
 80172ee:	80c6      	strh	r6, [r0, #6]
 80172f0:	8085      	strh	r5, [r0, #4]
 80172f2:	9000      	str	r0, [sp, #0]
 80172f4:	f002 fec4 	bl	801a080 <LCD_SetClipRectMax>
 80172f8:	9b00      	ldr	r3, [sp, #0]
 80172fa:	6958      	ldr	r0, [r3, #20]
 80172fc:	b930      	cbnz	r0, 801730c <GUI_MEMDEV_SetOrg+0x44>
 80172fe:	4668      	mov	r0, sp
 8017300:	f006 fbae 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017304:	f004 f810 	bl	801b328 <GUI_Unlock>
 8017308:	b002      	add	sp, #8
 801730a:	bd70      	pop	{r4, r5, r6, pc}
 801730c:	f006 fb96 	bl	801da3c <GUI_ALLOC_LockH>
 8017310:	9a00      	ldr	r2, [sp, #0]
 8017312:	9001      	str	r0, [sp, #4]
 8017314:	8913      	ldrh	r3, [r2, #8]
 8017316:	8952      	ldrh	r2, [r2, #10]
 8017318:	80c2      	strh	r2, [r0, #6]
 801731a:	8083      	strh	r3, [r0, #4]
 801731c:	b113      	cbz	r3, 8017324 <GUI_MEMDEV_SetOrg+0x5c>
 801731e:	b10a      	cbz	r2, 8017324 <GUI_MEMDEV_SetOrg+0x5c>
 8017320:	8005      	strh	r5, [r0, #0]
 8017322:	8046      	strh	r6, [r0, #2]
 8017324:	a801      	add	r0, sp, #4
 8017326:	f006 fb9b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801732a:	4668      	mov	r0, sp
 801732c:	f006 fb98 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017330:	f003 fffa 	bl	801b328 <GUI_Unlock>
 8017334:	e7e8      	b.n	8017308 <GUI_MEMDEV_SetOrg+0x40>
 8017336:	bf00      	nop
 8017338:	2000027c 	.word	0x2000027c

0801733c <GUI_MEMDEV_GetYSize>:
 801733c:	b510      	push	{r4, lr}
 801733e:	4604      	mov	r4, r0
 8017340:	b082      	sub	sp, #8
 8017342:	f003 fffb 	bl	801b33c <GUI_Lock>
 8017346:	b17c      	cbz	r4, 8017368 <GUI_MEMDEV_GetYSize+0x2c>
 8017348:	4620      	mov	r0, r4
 801734a:	f006 fb77 	bl	801da3c <GUI_ALLOC_LockH>
 801734e:	ab02      	add	r3, sp, #8
 8017350:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8017354:	f843 0d04 	str.w	r0, [r3, #-4]!
 8017358:	4618      	mov	r0, r3
 801735a:	f006 fb81 	bl	801da60 <GUI_ALLOC_UnlockH>
 801735e:	f003 ffe3 	bl	801b328 <GUI_Unlock>
 8017362:	4620      	mov	r0, r4
 8017364:	b002      	add	sp, #8
 8017366:	bd10      	pop	{r4, pc}
 8017368:	4b04      	ldr	r3, [pc, #16]	; (801737c <GUI_MEMDEV_GetYSize+0x40>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801736e:	2c00      	cmp	r4, #0
 8017370:	d1ea      	bne.n	8017348 <GUI_MEMDEV_GetYSize+0xc>
 8017372:	f003 ffd9 	bl	801b328 <GUI_Unlock>
 8017376:	4620      	mov	r0, r4
 8017378:	b002      	add	sp, #8
 801737a:	bd10      	pop	{r4, pc}
 801737c:	2000027c 	.word	0x2000027c

08017380 <GUI_MEMDEV_GetDataPtr>:
 8017380:	b510      	push	{r4, lr}
 8017382:	4604      	mov	r4, r0
 8017384:	b082      	sub	sp, #8
 8017386:	b180      	cbz	r0, 80173aa <GUI_MEMDEV_GetDataPtr+0x2a>
 8017388:	f003 ffd8 	bl	801b33c <GUI_Lock>
 801738c:	4620      	mov	r0, r4
 801738e:	f006 fb55 	bl	801da3c <GUI_ALLOC_LockH>
 8017392:	4604      	mov	r4, r0
 8017394:	a802      	add	r0, sp, #8
 8017396:	f840 4d04 	str.w	r4, [r0, #-4]!
 801739a:	f006 fb61 	bl	801da60 <GUI_ALLOC_UnlockH>
 801739e:	f003 ffc3 	bl	801b328 <GUI_Unlock>
 80173a2:	f104 0018 	add.w	r0, r4, #24
 80173a6:	b002      	add	sp, #8
 80173a8:	bd10      	pop	{r4, pc}
 80173aa:	b002      	add	sp, #8
 80173ac:	bd10      	pop	{r4, pc}
 80173ae:	bf00      	nop

080173b0 <GUI_MEMDEV_Draw>:
 80173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b4:	b087      	sub	sp, #28
 80173b6:	4604      	mov	r4, r0
 80173b8:	4692      	mov	sl, r2
 80173ba:	461d      	mov	r5, r3
 80173bc:	4689      	mov	r9, r1
 80173be:	f003 ffbd 	bl	801b33c <GUI_Lock>
 80173c2:	4a58      	ldr	r2, [pc, #352]	; (8017524 <GUI_MEMDEV_Draw+0x174>)
 80173c4:	6813      	ldr	r3, [r2, #0]
 80173c6:	4a58      	ldr	r2, [pc, #352]	; (8017528 <GUI_MEMDEV_Draw+0x178>)
 80173c8:	7c5e      	ldrb	r6, [r3, #17]
 80173ca:	5793      	ldrsb	r3, [r2, r6]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	4630      	mov	r0, r6
 80173d0:	f340 809c 	ble.w	801750c <GUI_MEMDEV_Draw+0x15c>
 80173d4:	f002 f91e 	bl	8019614 <LCD_GetXSizeEx>
 80173d8:	4680      	mov	r8, r0
 80173da:	4630      	mov	r0, r6
 80173dc:	f002 f928 	bl	8019630 <LCD_GetYSizeEx>
 80173e0:	4607      	mov	r7, r0
 80173e2:	2c00      	cmp	r4, #0
 80173e4:	f000 808f 	beq.w	8017506 <GUI_MEMDEV_Draw+0x156>
 80173e8:	a804      	add	r0, sp, #16
 80173ea:	a905      	add	r1, sp, #20
 80173ec:	f005 f962 	bl	801c6b4 <GUI_GetOrg>
 80173f0:	f9b4 e000 	ldrsh.w	lr, [r4]
 80173f4:	9a04      	ldr	r2, [sp, #16]
 80173f6:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80173fa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80173fe:	9b05      	ldr	r3, [sp, #20]
 8017400:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017404:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 8017408:	4490      	add	r8, r2
 801740a:	f108 38ff 	add.w	r8, r8, #4294967295
 801740e:	4674      	mov	r4, lr
 8017410:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8017414:	4580      	cmp	r8, r0
 8017416:	bfd4      	ite	le
 8017418:	ebc4 0408 	rsble	r4, r4, r8
 801741c:	ebc4 0400 	rsbgt	r4, r4, r0
 8017420:	441f      	add	r7, r3
 8017422:	3f01      	subs	r7, #1
 8017424:	46a0      	mov	r8, r4
 8017426:	4634      	mov	r4, r6
 8017428:	428f      	cmp	r7, r1
 801742a:	bfd4      	ite	le
 801742c:	ebc4 0407 	rsble	r4, r4, r7
 8017430:	ebc4 0401 	rsbgt	r4, r4, r1
 8017434:	f8cd e00c 	str.w	lr, [sp, #12]
 8017438:	9602      	str	r6, [sp, #8]
 801743a:	f108 0801 	add.w	r8, r8, #1
 801743e:	1c67      	adds	r7, r4, #1
 8017440:	b905      	cbnz	r5, 8017444 <GUI_MEMDEV_Draw+0x94>
 8017442:	427d      	negs	r5, r7
 8017444:	f1b8 0f00 	cmp.w	r8, #0
 8017448:	dd4f      	ble.n	80174ea <GUI_MEMDEV_Draw+0x13a>
 801744a:	2f00      	cmp	r7, #0
 801744c:	dd4d      	ble.n	80174ea <GUI_MEMDEV_Draw+0x13a>
 801744e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017450:	9200      	str	r2, [sp, #0]
 8017452:	462b      	mov	r3, r5
 8017454:	4642      	mov	r2, r8
 8017456:	9803      	ldr	r0, [sp, #12]
 8017458:	9902      	ldr	r1, [sp, #8]
 801745a:	f000 fff1 	bl	8018440 <GUI_MEMDEV_CreateEx>
 801745e:	4680      	mov	r8, r0
 8017460:	2800      	cmp	r0, #0
 8017462:	d048      	beq.n	80174f6 <GUI_MEMDEV_Draw+0x146>
 8017464:	f7ff ff6a 	bl	801733c <GUI_MEMDEV_GetYSize>
 8017468:	42b8      	cmp	r0, r7
 801746a:	4606      	mov	r6, r0
 801746c:	d004      	beq.n	8017478 <GUI_MEMDEV_Draw+0xc8>
 801746e:	4c2d      	ldr	r4, [pc, #180]	; (8017524 <GUI_MEMDEV_Draw+0x174>)
 8017470:	6823      	ldr	r3, [r4, #0]
 8017472:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017474:	2800      	cmp	r0, #0
 8017476:	d151      	bne.n	801751c <GUI_MEMDEV_Draw+0x16c>
 8017478:	4640      	mov	r0, r8
 801747a:	f001 f825 	bl	80184c8 <GUI_MEMDEV_Select>
 801747e:	f1c6 0b00 	rsb	fp, r6, #0
 8017482:	463d      	mov	r5, r7
 8017484:	2400      	movs	r4, #0
 8017486:	e00e      	b.n	80174a6 <GUI_MEMDEV_Draw+0xf6>
 8017488:	445d      	add	r5, fp
 801748a:	b9ac      	cbnz	r4, 80174b8 <GUI_MEMDEV_Draw+0x108>
 801748c:	4650      	mov	r0, sl
 801748e:	47c8      	blx	r9
 8017490:	4a26      	ldr	r2, [pc, #152]	; (801752c <GUI_MEMDEV_Draw+0x17c>)
 8017492:	6813      	ldr	r3, [r2, #0]
 8017494:	4434      	add	r4, r6
 8017496:	20ff      	movs	r0, #255	; 0xff
 8017498:	b103      	cbz	r3, 801749c <GUI_MEMDEV_Draw+0xec>
 801749a:	4798      	blx	r3
 801749c:	4640      	mov	r0, r8
 801749e:	f001 f8bd 	bl	801861c <GUI_MEMDEV_CopyToLCD>
 80174a2:	42a7      	cmp	r7, r4
 80174a4:	dd12      	ble.n	80174cc <GUI_MEMDEV_Draw+0x11c>
 80174a6:	42ae      	cmp	r6, r5
 80174a8:	ddee      	ble.n	8017488 <GUI_MEMDEV_Draw+0xd8>
 80174aa:	4629      	mov	r1, r5
 80174ac:	4640      	mov	r0, r8
 80174ae:	f009 fb03 	bl	8020ab8 <GUI_MEMDEV_ReduceYSize>
 80174b2:	445d      	add	r5, fp
 80174b4:	2c00      	cmp	r4, #0
 80174b6:	d0e9      	beq.n	801748c <GUI_MEMDEV_Draw+0xdc>
 80174b8:	9a02      	ldr	r2, [sp, #8]
 80174ba:	9903      	ldr	r1, [sp, #12]
 80174bc:	4640      	mov	r0, r8
 80174be:	4422      	add	r2, r4
 80174c0:	f7ff ff02 	bl	80172c8 <GUI_MEMDEV_SetOrg>
 80174c4:	4640      	mov	r0, r8
 80174c6:	f009 fb17 	bl	8020af8 <GUI_MEMDEV_Clear>
 80174ca:	e7df      	b.n	801748c <GUI_MEMDEV_Draw+0xdc>
 80174cc:	4640      	mov	r0, r8
 80174ce:	f000 ff8d 	bl	80183ec <GUI_MEMDEV_Delete>
 80174d2:	2000      	movs	r0, #0
 80174d4:	f000 fff8 	bl	80184c8 <GUI_MEMDEV_Select>
 80174d8:	42be      	cmp	r6, r7
 80174da:	d006      	beq.n	80174ea <GUI_MEMDEV_Draw+0x13a>
 80174dc:	4c11      	ldr	r4, [pc, #68]	; (8017524 <GUI_MEMDEV_Draw+0x174>)
 80174de:	6823      	ldr	r3, [r4, #0]
 80174e0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80174e2:	b110      	cbz	r0, 80174ea <GUI_MEMDEV_Draw+0x13a>
 80174e4:	2133      	movs	r1, #51	; 0x33
 80174e6:	f7fb fd7d 	bl	8012fe4 <WM__SendMessageNoPara>
 80174ea:	f003 ff1d 	bl	801b328 <GUI_Unlock>
 80174ee:	2000      	movs	r0, #0
 80174f0:	b007      	add	sp, #28
 80174f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f6:	4650      	mov	r0, sl
 80174f8:	47c8      	blx	r9
 80174fa:	f003 ff15 	bl	801b328 <GUI_Unlock>
 80174fe:	2001      	movs	r0, #1
 8017500:	b007      	add	sp, #28
 8017502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017506:	9402      	str	r4, [sp, #8]
 8017508:	9403      	str	r4, [sp, #12]
 801750a:	e799      	b.n	8017440 <GUI_MEMDEV_Draw+0x90>
 801750c:	f002 f89e 	bl	801964c <LCD_GetVXSizeEx>
 8017510:	4680      	mov	r8, r0
 8017512:	4630      	mov	r0, r6
 8017514:	f002 f8a8 	bl	8019668 <LCD_GetVYSizeEx>
 8017518:	4607      	mov	r7, r0
 801751a:	e762      	b.n	80173e2 <GUI_MEMDEV_Draw+0x32>
 801751c:	2132      	movs	r1, #50	; 0x32
 801751e:	f7fb fd61 	bl	8012fe4 <WM__SendMessageNoPara>
 8017522:	e7a9      	b.n	8017478 <GUI_MEMDEV_Draw+0xc8>
 8017524:	2000027c 	.word	0x2000027c
 8017528:	2002cb78 	.word	0x2002cb78
 801752c:	2002b19c 	.word	0x2002b19c

08017530 <_GetDevData>:
 8017530:	4802      	ldr	r0, [pc, #8]	; (801753c <_GetDevData+0xc>)
 8017532:	2901      	cmp	r1, #1
 8017534:	bf18      	it	ne
 8017536:	2000      	movne	r0, #0
 8017538:	4770      	bx	lr
 801753a:	bf00      	nop
 801753c:	08026d2c 	.word	0x08026d2c

08017540 <_GetDevFunc>:
 8017540:	4802      	ldr	r0, [pc, #8]	; (801754c <_GetDevFunc+0xc>)
 8017542:	2916      	cmp	r1, #22
 8017544:	bf18      	it	ne
 8017546:	2000      	movne	r0, #0
 8017548:	4770      	bx	lr
 801754a:	bf00      	nop
 801754c:	080206a5 	.word	0x080206a5

08017550 <_GetDevProp>:
 8017550:	2908      	cmp	r1, #8
 8017552:	bf0c      	ite	eq
 8017554:	2020      	moveq	r0, #32
 8017556:	2000      	movne	r0, #0
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop

0801755c <_SetOrg>:
 801755c:	b508      	push	{r3, lr}
 801755e:	6800      	ldr	r0, [r0, #0]
 8017560:	68c3      	ldr	r3, [r0, #12]
 8017562:	6a1b      	ldr	r3, [r3, #32]
 8017564:	4798      	blx	r3
 8017566:	bd08      	pop	{r3, pc}

08017568 <_GetRect>:
 8017568:	b570      	push	{r4, r5, r6, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	6880      	ldr	r0, [r0, #8]
 801756e:	460c      	mov	r4, r1
 8017570:	f006 fa64 	bl	801da3c <GUI_ALLOC_LockH>
 8017574:	4603      	mov	r3, r0
 8017576:	a802      	add	r0, sp, #8
 8017578:	8899      	ldrh	r1, [r3, #4]
 801757a:	891d      	ldrh	r5, [r3, #8]
 801757c:	88da      	ldrh	r2, [r3, #6]
 801757e:	895e      	ldrh	r6, [r3, #10]
 8017580:	f840 3d04 	str.w	r3, [r0, #-4]!
 8017584:	440d      	add	r5, r1
 8017586:	1993      	adds	r3, r2, r6
 8017588:	3b01      	subs	r3, #1
 801758a:	3d01      	subs	r5, #1
 801758c:	8021      	strh	r1, [r4, #0]
 801758e:	80a5      	strh	r5, [r4, #4]
 8017590:	8062      	strh	r2, [r4, #2]
 8017592:	80e3      	strh	r3, [r4, #6]
 8017594:	f006 fa64 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017598:	b002      	add	sp, #8
 801759a:	bd70      	pop	{r4, r5, r6, pc}

0801759c <_DrawBitmap>:
 801759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a0:	4ead      	ldr	r6, [pc, #692]	; (8017858 <_DrawBitmap+0x2bc>)
 80175a2:	6835      	ldr	r5, [r6, #0]
 80175a4:	b099      	sub	sp, #100	; 0x64
 80175a6:	6e2d      	ldr	r5, [r5, #96]	; 0x60
 80175a8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80175aa:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
 80175ae:	9307      	str	r3, [sp, #28]
 80175b0:	4606      	mov	r6, r0
 80175b2:	460f      	mov	r7, r1
 80175b4:	4690      	mov	r8, r2
 80175b6:	b915      	cbnz	r5, 80175be <_DrawBitmap+0x22>
 80175b8:	b019      	add	sp, #100	; 0x64
 80175ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175be:	4628      	mov	r0, r5
 80175c0:	f006 fa3c 	bl	801da3c <GUI_ALLOC_LockH>
 80175c4:	6943      	ldr	r3, [r0, #20]
 80175c6:	9015      	str	r0, [sp, #84]	; 0x54
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f040 823b 	bne.w	8017a44 <_DrawBitmap+0x4a8>
 80175ce:	4602      	mov	r2, r0
 80175d0:	68d2      	ldr	r2, [r2, #12]
 80175d2:	9316      	str	r3, [sp, #88]	; 0x58
 80175d4:	a815      	add	r0, sp, #84	; 0x54
 80175d6:	920a      	str	r2, [sp, #40]	; 0x28
 80175d8:	f006 fa42 	bl	801da60 <GUI_ALLOC_UnlockH>
 80175dc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80175de:	9816      	ldr	r0, [sp, #88]	; 0x58
 80175e0:	4439      	add	r1, r7
 80175e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80175e4:	2800      	cmp	r0, #0
 80175e6:	f000 8233 	beq.w	8017a50 <_DrawBitmap+0x4b4>
 80175ea:	499b      	ldr	r1, [pc, #620]	; (8017858 <_DrawBitmap+0x2bc>)
 80175ec:	680b      	ldr	r3, [r1, #0]
 80175ee:	7c1a      	ldrb	r2, [r3, #16]
 80175f0:	0792      	lsls	r2, r2, #30
 80175f2:	460d      	mov	r5, r1
 80175f4:	f140 8136 	bpl.w	8017864 <_DrawBitmap+0x2c8>
 80175f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80175fa:	f006 fa1f 	bl	801da3c <GUI_ALLOC_LockH>
 80175fe:	4603      	mov	r3, r0
 8017600:	a818      	add	r0, sp, #96	; 0x60
 8017602:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8017606:	68dd      	ldr	r5, [r3, #12]
 8017608:	f840 3d04 	str.w	r3, [r0, #-4]!
 801760c:	ebc1 0108 	rsb	r1, r1, r8
 8017610:	f103 0218 	add.w	r2, r3, #24
 8017614:	fb05 2201 	mla	r2, r5, r1, r2
 8017618:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801761c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801761e:	1acb      	subs	r3, r1, r3
 8017620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017624:	9304      	str	r3, [sp, #16]
 8017626:	f006 fa1b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801762a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801762c:	2a17      	cmp	r2, #23
 801762e:	dd4f      	ble.n	80176d0 <_DrawBitmap+0x134>
 8017630:	2c00      	cmp	r4, #0
 8017632:	dd43      	ble.n	80176bc <_DrawBitmap+0x120>
 8017634:	4444      	add	r4, r8
 8017636:	9406      	str	r4, [sp, #24]
 8017638:	9c07      	ldr	r4, [sp, #28]
 801763a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8017860 <_DrawBitmap+0x2c4>
 801763e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8017640:	9609      	str	r6, [sp, #36]	; 0x24
 8017642:	00a4      	lsls	r4, r4, #2
 8017644:	940d      	str	r4, [sp, #52]	; 0x34
 8017646:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017648:	b128      	cbz	r0, 8017656 <_DrawBitmap+0xba>
 801764a:	6883      	ldr	r3, [r0, #8]
 801764c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801764e:	685c      	ldr	r4, [r3, #4]
 8017650:	9b07      	ldr	r3, [sp, #28]
 8017652:	4642      	mov	r2, r8
 8017654:	47a0      	blx	r4
 8017656:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017658:	6933      	ldr	r3, [r6, #16]
 801765a:	68da      	ldr	r2, [r3, #12]
 801765c:	2a00      	cmp	r2, #0
 801765e:	f040 8123 	bne.w	80178a8 <_DrawBitmap+0x30c>
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8017668:	4798      	blx	r3
 801766a:	f8dd b010 	ldr.w	fp, [sp, #16]
 801766e:	9d07      	ldr	r5, [sp, #28]
 8017670:	9705      	str	r7, [sp, #20]
 8017672:	0e04      	lsrs	r4, r0, #24
 8017674:	46ba      	mov	sl, r7
 8017676:	4653      	mov	r3, sl
 8017678:	2600      	movs	r6, #0
 801767a:	f853 2b04 	ldr.w	r2, [r3], #4
 801767e:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 8017682:	f000 80f7 	beq.w	8017874 <_DrawBitmap+0x2d8>
 8017686:	2e00      	cmp	r6, #0
 8017688:	f040 80f8 	bne.w	801787c <_DrawBitmap+0x2e0>
 801768c:	f8da 0000 	ldr.w	r0, [sl]
 8017690:	0e02      	lsrs	r2, r0, #24
 8017692:	f040 8101 	bne.w	8017898 <_DrawBitmap+0x2fc>
 8017696:	3d01      	subs	r5, #1
 8017698:	f10b 0b04 	add.w	fp, fp, #4
 801769c:	f10a 0a04 	add.w	sl, sl, #4
 80176a0:	2d00      	cmp	r5, #0
 80176a2:	d1e8      	bne.n	8017676 <_DrawBitmap+0xda>
 80176a4:	9f05      	ldr	r7, [sp, #20]
 80176a6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80176a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80176aa:	4427      	add	r7, r4
 80176ac:	9c04      	ldr	r4, [sp, #16]
 80176ae:	4434      	add	r4, r6
 80176b0:	9e06      	ldr	r6, [sp, #24]
 80176b2:	9404      	str	r4, [sp, #16]
 80176b4:	f108 0801 	add.w	r8, r8, #1
 80176b8:	45b0      	cmp	r8, r6
 80176ba:	d1c4      	bne.n	8017646 <_DrawBitmap+0xaa>
 80176bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80176be:	2b00      	cmp	r3, #0
 80176c0:	f43f af7a 	beq.w	80175b8 <_DrawBitmap+0x1c>
 80176c4:	a816      	add	r0, sp, #88	; 0x58
 80176c6:	f006 f9cb 	bl	801da60 <GUI_ALLOC_UnlockH>
 80176ca:	b019      	add	sp, #100	; 0x64
 80176cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176d0:	2a10      	cmp	r2, #16
 80176d2:	f000 8292 	beq.w	8017bfa <_DrawBitmap+0x65e>
 80176d6:	2a08      	cmp	r2, #8
 80176d8:	f000 834a 	beq.w	8017d70 <_DrawBitmap+0x7d4>
 80176dc:	4b5f      	ldr	r3, [pc, #380]	; (801785c <_DrawBitmap+0x2c0>)
 80176de:	f1ba 0f00 	cmp.w	sl, #0
 80176e2:	bf08      	it	eq
 80176e4:	469a      	moveq	sl, r3
 80176e6:	2c00      	cmp	r4, #0
 80176e8:	dde8      	ble.n	80176bc <_DrawBitmap+0x120>
 80176ea:	4444      	add	r4, r8
 80176ec:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80176ee:	9410      	str	r4, [sp, #64]	; 0x40
 80176f0:	9c04      	ldr	r4, [sp, #16]
 80176f2:	f1c6 0304 	rsb	r3, r6, #4
 80176f6:	3404      	adds	r4, #4
 80176f8:	0076      	lsls	r6, r6, #1
 80176fa:	9404      	str	r4, [sp, #16]
 80176fc:	9611      	str	r6, [sp, #68]	; 0x44
 80176fe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8017700:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8017702:	b2db      	uxtb	r3, r3
 8017704:	00a4      	lsls	r4, r4, #2
 8017706:	3601      	adds	r6, #1
 8017708:	46c3      	mov	fp, r8
 801770a:	9313      	str	r3, [sp, #76]	; 0x4c
 801770c:	9412      	str	r4, [sp, #72]	; 0x48
 801770e:	960d      	str	r6, [sp, #52]	; 0x34
 8017710:	e015      	b.n	801773e <_DrawBitmap+0x1a2>
 8017712:	2c04      	cmp	r4, #4
 8017714:	f000 810c 	beq.w	8017930 <_DrawBitmap+0x394>
 8017718:	2c01      	cmp	r4, #1
 801771a:	f000 80cc 	beq.w	80178b6 <_DrawBitmap+0x31a>
 801771e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8017720:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017724:	4434      	add	r4, r6
 8017726:	4433      	add	r3, r6
 8017728:	9425      	str	r4, [sp, #148]	; 0x94
 801772a:	9e04      	ldr	r6, [sp, #16]
 801772c:	930d      	str	r3, [sp, #52]	; 0x34
 801772e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017732:	f10b 0b01 	add.w	fp, fp, #1
 8017736:	4426      	add	r6, r4
 8017738:	459b      	cmp	fp, r3
 801773a:	9604      	str	r6, [sp, #16]
 801773c:	d0be      	beq.n	80176bc <_DrawBitmap+0x120>
 801773e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8017740:	9b04      	ldr	r3, [sp, #16]
 8017742:	2c02      	cmp	r4, #2
 8017744:	f1a3 0504 	sub.w	r5, r3, #4
 8017748:	d1e3      	bne.n	8017712 <_DrawBitmap+0x176>
 801774a:	4c43      	ldr	r4, [pc, #268]	; (8017858 <_DrawBitmap+0x2bc>)
 801774c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 8017754:	7c1a      	ldrb	r2, [r3, #16]
 8017756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017758:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801775c:	f002 0203 	and.w	r2, r2, #3
 8017760:	409c      	lsls	r4, r3
 8017762:	2a01      	cmp	r2, #1
 8017764:	b2e4      	uxtb	r4, r4
 8017766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017768:	f000 821f 	beq.w	8017baa <_DrawBitmap+0x60e>
 801776c:	f0c0 81fe 	bcc.w	8017b6c <_DrawBitmap+0x5d0>
 8017770:	2a02      	cmp	r2, #2
 8017772:	d1d4      	bne.n	801771e <_DrawBitmap+0x182>
 8017774:	9a07      	ldr	r2, [sp, #28]
 8017776:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8017778:	960f      	str	r6, [sp, #60]	; 0x3c
 801777a:	46d1      	mov	r9, sl
 801777c:	4692      	mov	sl, r2
 801777e:	4553      	cmp	r3, sl
 8017780:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017782:	950c      	str	r5, [sp, #48]	; 0x30
 8017784:	bfc8      	it	gt
 8017786:	fa5f f38a 	uxtbgt.w	r3, sl
 801778a:	4645      	mov	r5, r8
 801778c:	9608      	str	r6, [sp, #32]
 801778e:	ebc3 0a0a 	rsb	sl, r3, sl
 8017792:	2d00      	cmp	r5, #0
 8017794:	d03e      	beq.n	8017814 <_DrawBitmap+0x278>
 8017796:	3b01      	subs	r3, #1
 8017798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801779c:	9e08      	ldr	r6, [sp, #32]
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	4498      	add	r8, r3
 80177a2:	930e      	str	r3, [sp, #56]	; 0x38
 80177a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177a6:	f108 0801 	add.w	r8, r8, #1
 80177aa:	1d1f      	adds	r7, r3, #4
 80177ac:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80177b0:	4631      	mov	r1, r6
 80177b2:	ea4f 1394 	mov.w	r3, r4, lsr #6
 80177b6:	f106 0601 	add.w	r6, r6, #1
 80177ba:	4628      	mov	r0, r5
 80177bc:	465a      	mov	r2, fp
 80177be:	d008      	beq.n	80177d2 <_DrawBitmap+0x236>
 80177c0:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80177c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80177c8:	f847 3c04 	str.w	r3, [r7, #-4]
 80177cc:	f8de 3000 	ldr.w	r3, [lr]
 80177d0:	4798      	blx	r3
 80177d2:	00a4      	lsls	r4, r4, #2
 80177d4:	4546      	cmp	r6, r8
 80177d6:	b2e4      	uxtb	r4, r4
 80177d8:	f107 0704 	add.w	r7, r7, #4
 80177dc:	d1e6      	bne.n	80177ac <_DrawBitmap+0x210>
 80177de:	9c08      	ldr	r4, [sp, #32]
 80177e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80177e2:	1c62      	adds	r2, r4, #1
 80177e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80177e6:	1c73      	adds	r3, r6, #1
 80177e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80177ec:	4416      	add	r6, r2
 80177ee:	9608      	str	r6, [sp, #32]
 80177f0:	940c      	str	r4, [sp, #48]	; 0x30
 80177f2:	f1ba 0f00 	cmp.w	sl, #0
 80177f6:	f000 81fe 	beq.w	8017bf6 <_DrawBitmap+0x65a>
 80177fa:	2304      	movs	r3, #4
 80177fc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80177fe:	4553      	cmp	r3, sl
 8017800:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8017804:	960f      	str	r6, [sp, #60]	; 0x3c
 8017806:	bfc8      	it	gt
 8017808:	fa5f f38a 	uxtbgt.w	r3, sl
 801780c:	ebc3 0a0a 	rsb	sl, r3, sl
 8017810:	2d00      	cmp	r5, #0
 8017812:	d1c0      	bne.n	8017796 <_DrawBitmap+0x1fa>
 8017814:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017816:	461a      	mov	r2, r3
 8017818:	1d30      	adds	r0, r6, #4
 801781a:	09a6      	lsrs	r6, r4, #6
 801781c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8017820:	ea4f 0184 	mov.w	r1, r4, lsl #2
 8017824:	f102 32ff 	add.w	r2, r2, #4294967295
 8017828:	b2cc      	uxtb	r4, r1
 801782a:	bf1c      	itt	ne
 801782c:	f859 1026 	ldrne.w	r1, [r9, r6, lsl #2]
 8017830:	f840 1c04 	strne.w	r1, [r0, #-4]
 8017834:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8017838:	f100 0004 	add.w	r0, r0, #4
 801783c:	d1ed      	bne.n	801781a <_DrawBitmap+0x27e>
 801783e:	9e08      	ldr	r6, [sp, #32]
 8017840:	3b01      	subs	r3, #1
 8017842:	b2db      	uxtb	r3, r3
 8017844:	1c71      	adds	r1, r6, #1
 8017846:	1c5a      	adds	r2, r3, #1
 8017848:	18cb      	adds	r3, r1, r3
 801784a:	9308      	str	r3, [sp, #32]
 801784c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801784e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017852:	930c      	str	r3, [sp, #48]	; 0x30
 8017854:	e7cd      	b.n	80177f2 <_DrawBitmap+0x256>
 8017856:	bf00      	nop
 8017858:	2000027c 	.word	0x2000027c
 801785c:	08026cec 	.word	0x08026cec
 8017860:	20000254 	.word	0x20000254
 8017864:	9b07      	ldr	r3, [sp, #28]
 8017866:	9400      	str	r4, [sp, #0]
 8017868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801786a:	4642      	mov	r2, r8
 801786c:	f009 f910 	bl	8020a90 <GUI_USAGE_AddRect>
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	e6c1      	b.n	80175f8 <_DrawBitmap+0x5c>
 8017874:	3601      	adds	r6, #1
 8017876:	42ae      	cmp	r6, r5
 8017878:	f47f aeff 	bne.w	801767a <_DrawBitmap+0xde>
 801787c:	00b7      	lsls	r7, r6, #2
 801787e:	4658      	mov	r0, fp
 8017880:	4651      	mov	r1, sl
 8017882:	463a      	mov	r2, r7
 8017884:	f8d9 3000 	ldr.w	r3, [r9]
 8017888:	1bad      	subs	r5, r5, r6
 801788a:	44bb      	add	fp, r7
 801788c:	4798      	blx	r3
 801788e:	44ba      	add	sl, r7
 8017890:	2d00      	cmp	r5, #0
 8017892:	f47f aef0 	bne.w	8017676 <_DrawBitmap+0xda>
 8017896:	e705      	b.n	80176a4 <_DrawBitmap+0x108>
 8017898:	49a9      	ldr	r1, [pc, #676]	; (8017b40 <_DrawBitmap+0x5a4>)
 801789a:	680b      	ldr	r3, [r1, #0]
 801789c:	f8db 1000 	ldr.w	r1, [fp]
 80178a0:	4798      	blx	r3
 80178a2:	f8cb 0000 	str.w	r0, [fp]
 80178a6:	e6f6      	b.n	8017696 <_DrawBitmap+0xfa>
 80178a8:	f8d9 3000 	ldr.w	r3, [r9]
 80178ac:	9804      	ldr	r0, [sp, #16]
 80178ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80178b0:	4639      	mov	r1, r7
 80178b2:	4798      	blx	r3
 80178b4:	e6f7      	b.n	80176a6 <_DrawBitmap+0x10a>
 80178b6:	4ea3      	ldr	r6, [pc, #652]	; (8017b44 <_DrawBitmap+0x5a8>)
 80178b8:	6833      	ldr	r3, [r6, #0]
 80178ba:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80178bc:	f006 f8be 	bl	801da3c <GUI_ALLOC_LockH>
 80178c0:	6833      	ldr	r3, [r6, #0]
 80178c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80178c4:	7c1a      	ldrb	r2, [r3, #16]
 80178c6:	4ea0      	ldr	r6, [pc, #640]	; (8017b48 <_DrawBitmap+0x5ac>)
 80178c8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80178cc:	9015      	str	r0, [sp, #84]	; 0x54
 80178ce:	5c74      	ldrb	r4, [r6, r1]
 80178d0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80178d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80178d4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80178d8:	f002 0203 	and.w	r2, r2, #3
 80178dc:	2a02      	cmp	r2, #2
 80178de:	fa44 f406 	asr.w	r4, r4, r6
 80178e2:	f1c6 0608 	rsb	r6, r6, #8
 80178e6:	f000 80dc 	beq.w	8017aa2 <_DrawBitmap+0x506>
 80178ea:	2a03      	cmp	r2, #3
 80178ec:	f000 80b3 	beq.w	8017a56 <_DrawBitmap+0x4ba>
 80178f0:	2a01      	cmp	r2, #1
 80178f2:	f000 80b0 	beq.w	8017a56 <_DrawBitmap+0x4ba>
 80178f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 80178f8:	464f      	mov	r7, r9
 80178fa:	42b7      	cmp	r7, r6
 80178fc:	bf38      	it	cc
 80178fe:	463e      	movcc	r6, r7
 8017900:	1bbf      	subs	r7, r7, r6
 8017902:	4633      	mov	r3, r6
 8017904:	462a      	mov	r2, r5
 8017906:	f004 0101 	and.w	r1, r4, #1
 801790a:	3b01      	subs	r3, #1
 801790c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017910:	f842 1b04 	str.w	r1, [r2], #4
 8017914:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017918:	d1f5      	bne.n	8017906 <_DrawBitmap+0x36a>
 801791a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801791e:	2f00      	cmp	r7, #0
 8017920:	f000 808c 	beq.w	8017a3c <_DrawBitmap+0x4a0>
 8017924:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017928:	4987      	ldr	r1, [pc, #540]	; (8017b48 <_DrawBitmap+0x5ac>)
 801792a:	2608      	movs	r6, #8
 801792c:	5ccc      	ldrb	r4, [r1, r3]
 801792e:	e7e4      	b.n	80178fa <_DrawBitmap+0x35e>
 8017930:	4984      	ldr	r1, [pc, #528]	; (8017b44 <_DrawBitmap+0x5a8>)
 8017932:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017934:	680a      	ldr	r2, [r1, #0]
 8017936:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 801793a:	7c12      	ldrb	r2, [r2, #16]
 801793c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801793e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8017940:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8017944:	f002 0203 	and.w	r2, r2, #3
 8017948:	40a3      	lsls	r3, r4
 801794a:	2a01      	cmp	r2, #1
 801794c:	b2dc      	uxtb	r4, r3
 801794e:	f000 81c4 	beq.w	8017cda <_DrawBitmap+0x73e>
 8017952:	f0c0 8197 	bcc.w	8017c84 <_DrawBitmap+0x6e8>
 8017956:	2a02      	cmp	r2, #2
 8017958:	f47f aee1 	bne.w	801771e <_DrawBitmap+0x182>
 801795c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801795e:	2900      	cmp	r1, #0
 8017960:	f040 81ef 	bne.w	8017d42 <_DrawBitmap+0x7a6>
 8017964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017966:	9807      	ldr	r0, [sp, #28]
 8017968:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801796c:	9208      	str	r2, [sp, #32]
 801796e:	2801      	cmp	r0, #1
 8017970:	dd4f      	ble.n	8017a12 <_DrawBitmap+0x476>
 8017972:	2e00      	cmp	r6, #0
 8017974:	f000 8298 	beq.w	8017ea8 <_DrawBitmap+0x90c>
 8017978:	f1a0 0c02 	sub.w	ip, r0, #2
 801797c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8017980:	930c      	str	r3, [sp, #48]	; 0x30
 8017982:	005b      	lsls	r3, r3, #1
 8017984:	930f      	str	r3, [sp, #60]	; 0x3c
 8017986:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017988:	9b08      	ldr	r3, [sp, #32]
 801798a:	9f08      	ldr	r7, [sp, #32]
 801798c:	440b      	add	r3, r1
 801798e:	3302      	adds	r3, #2
 8017990:	930e      	str	r3, [sp, #56]	; 0x38
 8017992:	4663      	mov	r3, ip
 8017994:	f105 0808 	add.w	r8, r5, #8
 8017998:	46a4      	mov	ip, r4
 801799a:	9305      	str	r3, [sp, #20]
 801799c:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
 80179a0:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80179a4:	4639      	mov	r1, r7
 80179a6:	4630      	mov	r0, r6
 80179a8:	465a      	mov	r2, fp
 80179aa:	d00c      	beq.n	80179c6 <_DrawBitmap+0x42a>
 80179ac:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80179b0:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80179b4:	f848 3c08 	str.w	r3, [r8, #-8]
 80179b8:	f8de 3000 	ldr.w	r3, [lr]
 80179bc:	f8cd c00c 	str.w	ip, [sp, #12]
 80179c0:	4798      	blx	r3
 80179c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80179c6:	f01c 0c0f 	ands.w	ip, ip, #15
 80179ca:	f107 0101 	add.w	r1, r7, #1
 80179ce:	4630      	mov	r0, r6
 80179d0:	f107 0702 	add.w	r7, r7, #2
 80179d4:	465a      	mov	r2, fp
 80179d6:	d006      	beq.n	80179e6 <_DrawBitmap+0x44a>
 80179d8:	68b3      	ldr	r3, [r6, #8]
 80179da:	f85a 402c 	ldr.w	r4, [sl, ip, lsl #2]
 80179de:	f848 4c04 	str.w	r4, [r8, #-4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	4798      	blx	r3
 80179e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179e8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80179ec:	429f      	cmp	r7, r3
 80179ee:	f108 0808 	add.w	r8, r8, #8
 80179f2:	d1d3      	bne.n	801799c <_DrawBitmap+0x400>
 80179f4:	9b05      	ldr	r3, [sp, #20]
 80179f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179f8:	4664      	mov	r4, ip
 80179fa:	469c      	mov	ip, r3
 80179fc:	9b08      	ldr	r3, [sp, #32]
 80179fe:	1c9a      	adds	r2, r3, #2
 8017a00:	1c4b      	adds	r3, r1, #1
 8017a02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017a04:	4411      	add	r1, r2
 8017a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a08:	9108      	str	r1, [sp, #32]
 8017a0a:	ebac 0042 	sub.w	r0, ip, r2, lsl #1
 8017a0e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017a12:	2800      	cmp	r0, #0
 8017a14:	f43f ae83 	beq.w	801771e <_DrawBitmap+0x182>
 8017a18:	0924      	lsrs	r4, r4, #4
 8017a1a:	f43f ae80 	beq.w	801771e <_DrawBitmap+0x182>
 8017a1e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8017a22:	602b      	str	r3, [r5, #0]
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	f43f ae7a 	beq.w	801771e <_DrawBitmap+0x182>
 8017a2a:	68b3      	ldr	r3, [r6, #8]
 8017a2c:	9908      	ldr	r1, [sp, #32]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	4630      	mov	r0, r6
 8017a32:	465a      	mov	r2, fp
 8017a34:	4798      	blx	r3
 8017a36:	e672      	b.n	801771e <_DrawBitmap+0x182>
 8017a38:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8017a3c:	a815      	add	r0, sp, #84	; 0x54
 8017a3e:	f006 f80f 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017a42:	e66c      	b.n	801771e <_DrawBitmap+0x182>
 8017a44:	4618      	mov	r0, r3
 8017a46:	f005 fff9 	bl	801da3c <GUI_ALLOC_LockH>
 8017a4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	e5bf      	b.n	80175d0 <_DrawBitmap+0x34>
 8017a50:	4a3c      	ldr	r2, [pc, #240]	; (8017b44 <_DrawBitmap+0x5a8>)
 8017a52:	6813      	ldr	r3, [r2, #0]
 8017a54:	e5d0      	b.n	80175f8 <_DrawBitmap+0x5c>
 8017a56:	6803      	ldr	r3, [r0, #0]
 8017a58:	691b      	ldr	r3, [r3, #16]
 8017a5a:	689b      	ldr	r3, [r3, #8]
 8017a5c:	4798      	blx	r3
 8017a5e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8017a60:	46ae      	mov	lr, r5
 8017a62:	464d      	mov	r5, r9
 8017a64:	42b5      	cmp	r5, r6
 8017a66:	bf38      	it	cc
 8017a68:	462e      	movcc	r6, r5
 8017a6a:	1bad      	subs	r5, r5, r6
 8017a6c:	4632      	mov	r2, r6
 8017a6e:	f10e 0304 	add.w	r3, lr, #4
 8017a72:	f014 0f01 	tst.w	r4, #1
 8017a76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017a7a:	d004      	beq.n	8017a86 <_DrawBitmap+0x4ea>
 8017a7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017a80:	4041      	eors	r1, r0
 8017a82:	f843 1c04 	str.w	r1, [r3, #-4]
 8017a86:	3a01      	subs	r2, #1
 8017a88:	f103 0304 	add.w	r3, r3, #4
 8017a8c:	d1f1      	bne.n	8017a72 <_DrawBitmap+0x4d6>
 8017a8e:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8017a92:	2d00      	cmp	r5, #0
 8017a94:	d0d2      	beq.n	8017a3c <_DrawBitmap+0x4a0>
 8017a96:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8017a9a:	4a2b      	ldr	r2, [pc, #172]	; (8017b48 <_DrawBitmap+0x5ac>)
 8017a9c:	2608      	movs	r6, #8
 8017a9e:	5cd4      	ldrb	r4, [r2, r3]
 8017aa0:	e7e0      	b.n	8017a64 <_DrawBitmap+0x4c8>
 8017aa2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8017aa6:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017aa8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8017aac:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017ab0:	9208      	str	r2, [sp, #32]
 8017ab2:	910c      	str	r1, [sp, #48]	; 0x30
 8017ab4:	469a      	mov	sl, r3
 8017ab6:	45b1      	cmp	r9, r6
 8017ab8:	bf38      	it	cc
 8017aba:	464e      	movcc	r6, r9
 8017abc:	ebc6 0909 	rsb	r9, r6, r9
 8017ac0:	f1ba 0f00 	cmp.w	sl, #0
 8017ac4:	d037      	beq.n	8017b36 <_DrawBitmap+0x59a>
 8017ac6:	2c00      	cmp	r4, #0
 8017ac8:	d031      	beq.n	8017b2e <_DrawBitmap+0x592>
 8017aca:	464b      	mov	r3, r9
 8017acc:	1d2f      	adds	r7, r5, #4
 8017ace:	46d1      	mov	r9, sl
 8017ad0:	469a      	mov	sl, r3
 8017ad2:	e007      	b.n	8017ae4 <_DrawBitmap+0x548>
 8017ad4:	3e01      	subs	r6, #1
 8017ad6:	f108 0801 	add.w	r8, r8, #1
 8017ada:	f107 0704 	add.w	r7, r7, #4
 8017ade:	d015      	beq.n	8017b0c <_DrawBitmap+0x570>
 8017ae0:	0864      	lsrs	r4, r4, #1
 8017ae2:	d021      	beq.n	8017b28 <_DrawBitmap+0x58c>
 8017ae4:	f014 0f01 	tst.w	r4, #1
 8017ae8:	463d      	mov	r5, r7
 8017aea:	d0f3      	beq.n	8017ad4 <_DrawBitmap+0x538>
 8017aec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017af0:	4641      	mov	r1, r8
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	4648      	mov	r0, r9
 8017af6:	465a      	mov	r2, fp
 8017af8:	4798      	blx	r3
 8017afa:	9b08      	ldr	r3, [sp, #32]
 8017afc:	f847 3c04 	str.w	r3, [r7, #-4]
 8017b00:	3e01      	subs	r6, #1
 8017b02:	f108 0801 	add.w	r8, r8, #1
 8017b06:	f107 0704 	add.w	r7, r7, #4
 8017b0a:	d1e9      	bne.n	8017ae0 <_DrawBitmap+0x544>
 8017b0c:	4653      	mov	r3, sl
 8017b0e:	46ca      	mov	sl, r9
 8017b10:	4699      	mov	r9, r3
 8017b12:	f1b9 0f00 	cmp.w	r9, #0
 8017b16:	d08f      	beq.n	8017a38 <_DrawBitmap+0x49c>
 8017b18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017b1a:	490b      	ldr	r1, [pc, #44]	; (8017b48 <_DrawBitmap+0x5ac>)
 8017b1c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8017b20:	940c      	str	r4, [sp, #48]	; 0x30
 8017b22:	2608      	movs	r6, #8
 8017b24:	5c8c      	ldrb	r4, [r1, r2]
 8017b26:	e7c6      	b.n	8017ab6 <_DrawBitmap+0x51a>
 8017b28:	4653      	mov	r3, sl
 8017b2a:	46ca      	mov	sl, r9
 8017b2c:	4699      	mov	r9, r3
 8017b2e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8017b32:	44b0      	add	r8, r6
 8017b34:	e7ed      	b.n	8017b12 <_DrawBitmap+0x576>
 8017b36:	b1b4      	cbz	r4, 8017b66 <_DrawBitmap+0x5ca>
 8017b38:	1d2a      	adds	r2, r5, #4
 8017b3a:	9b08      	ldr	r3, [sp, #32]
 8017b3c:	e008      	b.n	8017b50 <_DrawBitmap+0x5b4>
 8017b3e:	bf00      	nop
 8017b40:	20000264 	.word	0x20000264
 8017b44:	2000027c 	.word	0x2000027c
 8017b48:	08029b24 	.word	0x08029b24
 8017b4c:	0864      	lsrs	r4, r4, #1
 8017b4e:	d00a      	beq.n	8017b66 <_DrawBitmap+0x5ca>
 8017b50:	f014 0f01 	tst.w	r4, #1
 8017b54:	bf18      	it	ne
 8017b56:	f842 3c04 	strne.w	r3, [r2, #-4]
 8017b5a:	3e01      	subs	r6, #1
 8017b5c:	4615      	mov	r5, r2
 8017b5e:	f102 0204 	add.w	r2, r2, #4
 8017b62:	d1f3      	bne.n	8017b4c <_DrawBitmap+0x5b0>
 8017b64:	e7d5      	b.n	8017b12 <_DrawBitmap+0x576>
 8017b66:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8017b6a:	e7d2      	b.n	8017b12 <_DrawBitmap+0x576>
 8017b6c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8017b6e:	9e07      	ldr	r6, [sp, #28]
 8017b70:	42b3      	cmp	r3, r6
 8017b72:	bfc8      	it	gt
 8017b74:	b2f3      	uxtbgt	r3, r6
 8017b76:	1af6      	subs	r6, r6, r3
 8017b78:	461a      	mov	r2, r3
 8017b7a:	4629      	mov	r1, r5
 8017b7c:	09a0      	lsrs	r0, r4, #6
 8017b7e:	3a01      	subs	r2, #1
 8017b80:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8017b84:	f841 0b04 	str.w	r0, [r1], #4
 8017b88:	00a4      	lsls	r4, r4, #2
 8017b8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8017b8e:	b2e4      	uxtb	r4, r4
 8017b90:	d1f4      	bne.n	8017b7c <_DrawBitmap+0x5e0>
 8017b92:	3b01      	subs	r3, #1
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	3301      	adds	r3, #1
 8017b98:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8017b9c:	2e00      	cmp	r6, #0
 8017b9e:	f43f adbe 	beq.w	801771e <_DrawBitmap+0x182>
 8017ba2:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8017ba6:	2304      	movs	r3, #4
 8017ba8:	e7e2      	b.n	8017b70 <_DrawBitmap+0x5d4>
 8017baa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8017bac:	9e07      	ldr	r6, [sp, #28]
 8017bae:	42b3      	cmp	r3, r6
 8017bb0:	bfc8      	it	gt
 8017bb2:	b2f3      	uxtbgt	r3, r6
 8017bb4:	1af6      	subs	r6, r6, r3
 8017bb6:	1d2a      	adds	r2, r5, #4
 8017bb8:	4619      	mov	r1, r3
 8017bba:	00a0      	lsls	r0, r4, #2
 8017bbc:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8017bc0:	f101 31ff 	add.w	r1, r1, #4294967295
 8017bc4:	b2c4      	uxtb	r4, r0
 8017bc6:	d005      	beq.n	8017bd4 <_DrawBitmap+0x638>
 8017bc8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017bcc:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8017bd0:	f842 0c04 	str.w	r0, [r2, #-4]
 8017bd4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8017bd8:	f102 0204 	add.w	r2, r2, #4
 8017bdc:	d1ed      	bne.n	8017bba <_DrawBitmap+0x61e>
 8017bde:	3b01      	subs	r3, #1
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	3301      	adds	r3, #1
 8017be4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8017be8:	2e00      	cmp	r6, #0
 8017bea:	f43f ad98 	beq.w	801771e <_DrawBitmap+0x182>
 8017bee:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8017bf2:	2304      	movs	r3, #4
 8017bf4:	e7db      	b.n	8017bae <_DrawBitmap+0x612>
 8017bf6:	46ca      	mov	sl, r9
 8017bf8:	e591      	b.n	801771e <_DrawBitmap+0x182>
 8017bfa:	2c00      	cmp	r4, #0
 8017bfc:	f77f ad5e 	ble.w	80176bc <_DrawBitmap+0x120>
 8017c00:	4444      	add	r4, r8
 8017c02:	9406      	str	r4, [sp, #24]
 8017c04:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017c06:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017c08:	46c1      	mov	r9, r8
 8017c0a:	f1a4 0a02 	sub.w	sl, r4, #2
 8017c0e:	2f00      	cmp	r7, #0
 8017c10:	d02b      	beq.n	8017c6a <_DrawBitmap+0x6ce>
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017c16:	685c      	ldr	r4, [r3, #4]
 8017c18:	9b07      	ldr	r3, [sp, #28]
 8017c1a:	4638      	mov	r0, r7
 8017c1c:	464a      	mov	r2, r9
 8017c1e:	47a0      	blx	r4
 8017c20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017c24:	9d07      	ldr	r5, [sp, #28]
 8017c26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017c28:	46d3      	mov	fp, sl
 8017c2a:	6933      	ldr	r3, [r6, #16]
 8017c2c:	f83b 0f02 	ldrh.w	r0, [fp, #2]!
 8017c30:	685b      	ldr	r3, [r3, #4]
 8017c32:	4798      	blx	r3
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	f848 0b04 	str.w	r0, [r8], #4
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	4638      	mov	r0, r7
 8017c40:	464a      	mov	r2, r9
 8017c42:	4798      	blx	r3
 8017c44:	3d01      	subs	r5, #1
 8017c46:	f104 0401 	add.w	r4, r4, #1
 8017c4a:	d1ee      	bne.n	8017c2a <_DrawBitmap+0x68e>
 8017c4c:	9904      	ldr	r1, [sp, #16]
 8017c4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c50:	4421      	add	r1, r4
 8017c52:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8017c54:	9104      	str	r1, [sp, #16]
 8017c56:	44a2      	add	sl, r4
 8017c58:	9c06      	ldr	r4, [sp, #24]
 8017c5a:	f109 0901 	add.w	r9, r9, #1
 8017c5e:	45a1      	cmp	r9, r4
 8017c60:	f43f ad2c 	beq.w	80176bc <_DrawBitmap+0x120>
 8017c64:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017c66:	2f00      	cmp	r7, #0
 8017c68:	d1d3      	bne.n	8017c12 <_DrawBitmap+0x676>
 8017c6a:	9d04      	ldr	r5, [sp, #16]
 8017c6c:	9c07      	ldr	r4, [sp, #28]
 8017c6e:	4657      	mov	r7, sl
 8017c70:	6933      	ldr	r3, [r6, #16]
 8017c72:	f837 0f02 	ldrh.w	r0, [r7, #2]!
 8017c76:	685b      	ldr	r3, [r3, #4]
 8017c78:	4798      	blx	r3
 8017c7a:	3c01      	subs	r4, #1
 8017c7c:	f845 0b04 	str.w	r0, [r5], #4
 8017c80:	d1f6      	bne.n	8017c70 <_DrawBitmap+0x6d4>
 8017c82:	e7e3      	b.n	8017c4c <_DrawBitmap+0x6b0>
 8017c84:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8017c86:	2e00      	cmp	r6, #0
 8017c88:	d151      	bne.n	8017d2e <_DrawBitmap+0x792>
 8017c8a:	9907      	ldr	r1, [sp, #28]
 8017c8c:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8017c90:	2901      	cmp	r1, #1
 8017c92:	dd1a      	ble.n	8017cca <_DrawBitmap+0x72e>
 8017c94:	104f      	asrs	r7, r1, #1
 8017c96:	464a      	mov	r2, r9
 8017c98:	eb09 0607 	add.w	r6, r9, r7
 8017c9c:	f001 0101 	and.w	r1, r1, #1
 8017ca0:	f105 0308 	add.w	r3, r5, #8
 8017ca4:	0920      	lsrs	r0, r4, #4
 8017ca6:	f004 040f 	and.w	r4, r4, #15
 8017caa:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8017cae:	f843 0c08 	str.w	r0, [r3, #-8]
 8017cb2:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8017cb6:	f843 0c04 	str.w	r0, [r3, #-4]
 8017cba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8017cbe:	42b2      	cmp	r2, r6
 8017cc0:	f103 0308 	add.w	r3, r3, #8
 8017cc4:	d1ee      	bne.n	8017ca4 <_DrawBitmap+0x708>
 8017cc6:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 8017cca:	2900      	cmp	r1, #0
 8017ccc:	f43f ad27 	beq.w	801771e <_DrawBitmap+0x182>
 8017cd0:	0924      	lsrs	r4, r4, #4
 8017cd2:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8017cd6:	602b      	str	r3, [r5, #0]
 8017cd8:	e521      	b.n	801771e <_DrawBitmap+0x182>
 8017cda:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8017cdc:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8017cde:	f1c6 0002 	rsb	r0, r6, #2
 8017ce2:	9e07      	ldr	r6, [sp, #28]
 8017ce4:	b2c0      	uxtb	r0, r0
 8017ce6:	42b0      	cmp	r0, r6
 8017ce8:	bfc8      	it	gt
 8017cea:	b2f0      	uxtbgt	r0, r6
 8017cec:	1a36      	subs	r6, r6, r0
 8017cee:	1d2b      	adds	r3, r5, #4
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	0121      	lsls	r1, r4, #4
 8017cf4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8017cf8:	f102 32ff 	add.w	r2, r2, #4294967295
 8017cfc:	b2cc      	uxtb	r4, r1
 8017cfe:	d005      	beq.n	8017d0c <_DrawBitmap+0x770>
 8017d00:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017d04:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8017d08:	f843 1c04 	str.w	r1, [r3, #-4]
 8017d0c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8017d10:	f103 0304 	add.w	r3, r3, #4
 8017d14:	d1ed      	bne.n	8017cf2 <_DrawBitmap+0x756>
 8017d16:	1e43      	subs	r3, r0, #1
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	3301      	adds	r3, #1
 8017d1c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8017d20:	2e00      	cmp	r6, #0
 8017d22:	f43f acfc 	beq.w	801771e <_DrawBitmap+0x182>
 8017d26:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8017d2a:	2002      	movs	r0, #2
 8017d2c:	e7db      	b.n	8017ce6 <_DrawBitmap+0x74a>
 8017d2e:	0924      	lsrs	r4, r4, #4
 8017d30:	9e07      	ldr	r6, [sp, #28]
 8017d32:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8017d36:	602b      	str	r3, [r5, #0]
 8017d38:	1e71      	subs	r1, r6, #1
 8017d3a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8017d3c:	9d04      	ldr	r5, [sp, #16]
 8017d3e:	7874      	ldrb	r4, [r6, #1]
 8017d40:	e7a6      	b.n	8017c90 <_DrawBitmap+0x6f4>
 8017d42:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8017d46:	d00a      	beq.n	8017d5e <_DrawBitmap+0x7c2>
 8017d48:	0924      	lsrs	r4, r4, #4
 8017d4a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8017d4e:	602b      	str	r3, [r5, #0]
 8017d50:	b12e      	cbz	r6, 8017d5e <_DrawBitmap+0x7c2>
 8017d52:	68b3      	ldr	r3, [r6, #8]
 8017d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4630      	mov	r0, r6
 8017d5a:	465a      	mov	r2, fp
 8017d5c:	4798      	blx	r3
 8017d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d60:	9c07      	ldr	r4, [sp, #28]
 8017d62:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017d64:	9d04      	ldr	r5, [sp, #16]
 8017d66:	3301      	adds	r3, #1
 8017d68:	1e60      	subs	r0, r4, #1
 8017d6a:	9308      	str	r3, [sp, #32]
 8017d6c:	784c      	ldrb	r4, [r1, #1]
 8017d6e:	e5fe      	b.n	801796e <_DrawBitmap+0x3d2>
 8017d70:	2c00      	cmp	r4, #0
 8017d72:	f340 80cf 	ble.w	8017f14 <_DrawBitmap+0x978>
 8017d76:	4444      	add	r4, r8
 8017d78:	9e07      	ldr	r6, [sp, #28]
 8017d7a:	9406      	str	r4, [sp, #24]
 8017d7c:	46c1      	mov	r9, r8
 8017d7e:	9c04      	ldr	r4, [sp, #16]
 8017d80:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8017d84:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017d86:	f104 0c04 	add.w	ip, r4, #4
 8017d8a:	44b0      	add	r8, r6
 8017d8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017d8e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017d90:	4639      	mov	r1, r7
 8017d92:	ebc6 0b04 	rsb	fp, r6, r4
 8017d96:	4656      	mov	r6, sl
 8017d98:	f1ac 0004 	sub.w	r0, ip, #4
 8017d9c:	2e00      	cmp	r6, #0
 8017d9e:	d042      	beq.n	8017e26 <_DrawBitmap+0x88a>
 8017da0:	4a5f      	ldr	r2, [pc, #380]	; (8017f20 <_DrawBitmap+0x984>)
 8017da2:	6813      	ldr	r3, [r2, #0]
 8017da4:	7c1b      	ldrb	r3, [r3, #16]
 8017da6:	f013 0303 	ands.w	r3, r3, #3
 8017daa:	d032      	beq.n	8017e12 <_DrawBitmap+0x876>
 8017dac:	2b02      	cmp	r3, #2
 8017dae:	d11e      	bne.n	8017dee <_DrawBitmap+0x852>
 8017db0:	2f00      	cmp	r7, #0
 8017db2:	d05f      	beq.n	8017e74 <_DrawBitmap+0x8d8>
 8017db4:	9d07      	ldr	r5, [sp, #28]
 8017db6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017db8:	f8cd c010 	str.w	ip, [sp, #16]
 8017dbc:	46e2      	mov	sl, ip
 8017dbe:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8017dc2:	4621      	mov	r1, r4
 8017dc4:	4638      	mov	r0, r7
 8017dc6:	464a      	mov	r2, r9
 8017dc8:	3401      	adds	r4, #1
 8017dca:	b143      	cbz	r3, 8017dde <_DrawBitmap+0x842>
 8017dcc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8017dd0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017dd4:	f84a 3c04 	str.w	r3, [sl, #-4]
 8017dd8:	f8de 3000 	ldr.w	r3, [lr]
 8017ddc:	4798      	blx	r3
 8017dde:	3d01      	subs	r5, #1
 8017de0:	f10a 0a04 	add.w	sl, sl, #4
 8017de4:	d1eb      	bne.n	8017dbe <_DrawBitmap+0x822>
 8017de6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017dea:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017dec:	4639      	mov	r1, r7
 8017dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017df0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017df2:	9b06      	ldr	r3, [sp, #24]
 8017df4:	4414      	add	r4, r2
 8017df6:	f109 0901 	add.w	r9, r9, #1
 8017dfa:	9425      	str	r4, [sp, #148]	; 0x94
 8017dfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017dfe:	4599      	cmp	r9, r3
 8017e00:	4490      	add	r8, r2
 8017e02:	44a4      	add	ip, r4
 8017e04:	4493      	add	fp, r2
 8017e06:	d1c7      	bne.n	8017d98 <_DrawBitmap+0x7fc>
 8017e08:	2900      	cmp	r1, #0
 8017e0a:	f47f ac5b 	bne.w	80176c4 <_DrawBitmap+0x128>
 8017e0e:	f7ff bbd3 	b.w	80175b8 <_DrawBitmap+0x1c>
 8017e12:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e18:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017e1c:	f840 2b04 	str.w	r2, [r0], #4
 8017e20:	4598      	cmp	r8, r3
 8017e22:	d1f7      	bne.n	8017e14 <_DrawBitmap+0x878>
 8017e24:	e7e3      	b.n	8017dee <_DrawBitmap+0x852>
 8017e26:	4c3e      	ldr	r4, [pc, #248]	; (8017f20 <_DrawBitmap+0x984>)
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	7c1b      	ldrb	r3, [r3, #16]
 8017e2c:	f013 0303 	ands.w	r3, r3, #3
 8017e30:	d02e      	beq.n	8017e90 <_DrawBitmap+0x8f4>
 8017e32:	2b02      	cmp	r3, #2
 8017e34:	d1db      	bne.n	8017dee <_DrawBitmap+0x852>
 8017e36:	2f00      	cmp	r7, #0
 8017e38:	d060      	beq.n	8017efc <_DrawBitmap+0x960>
 8017e3a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017e3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017e40:	9604      	str	r6, [sp, #16]
 8017e42:	4665      	mov	r5, ip
 8017e44:	4666      	mov	r6, ip
 8017e46:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8017e4a:	4621      	mov	r1, r4
 8017e4c:	4638      	mov	r0, r7
 8017e4e:	464a      	mov	r2, r9
 8017e50:	3401      	adds	r4, #1
 8017e52:	b133      	cbz	r3, 8017e62 <_DrawBitmap+0x8c6>
 8017e54:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8017e58:	f845 3c04 	str.w	r3, [r5, #-4]
 8017e5c:	f8de 3000 	ldr.w	r3, [lr]
 8017e60:	4798      	blx	r3
 8017e62:	f1ba 0a01 	subs.w	sl, sl, #1
 8017e66:	f105 0504 	add.w	r5, r5, #4
 8017e6a:	d1ec      	bne.n	8017e46 <_DrawBitmap+0x8aa>
 8017e6c:	46b4      	mov	ip, r6
 8017e6e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017e70:	9e04      	ldr	r6, [sp, #16]
 8017e72:	e7bb      	b.n	8017dec <_DrawBitmap+0x850>
 8017e74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017e76:	4661      	mov	r1, ip
 8017e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e7c:	b11a      	cbz	r2, 8017e86 <_DrawBitmap+0x8ea>
 8017e7e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017e82:	f841 2c04 	str.w	r2, [r1, #-4]
 8017e86:	4598      	cmp	r8, r3
 8017e88:	f101 0104 	add.w	r1, r1, #4
 8017e8c:	d1f4      	bne.n	8017e78 <_DrawBitmap+0x8dc>
 8017e8e:	e7ad      	b.n	8017dec <_DrawBitmap+0x850>
 8017e90:	4924      	ldr	r1, [pc, #144]	; (8017f24 <_DrawBitmap+0x988>)
 8017e92:	9a07      	ldr	r2, [sp, #28]
 8017e94:	680b      	ldr	r3, [r1, #0]
 8017e96:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017e98:	f8cd c00c 	str.w	ip, [sp, #12]
 8017e9c:	4798      	blx	r3
 8017e9e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017ea0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017ea4:	4639      	mov	r1, r7
 8017ea6:	e7a2      	b.n	8017dee <_DrawBitmap+0x852>
 8017ea8:	f1a0 0c02 	sub.w	ip, r0, #2
 8017eac:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8017eb0:	f109 0701 	add.w	r7, r9, #1
 8017eb4:	4649      	mov	r1, r9
 8017eb6:	441f      	add	r7, r3
 8017eb8:	f105 0208 	add.w	r2, r5, #8
 8017ebc:	0920      	lsrs	r0, r4, #4
 8017ebe:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8017ec2:	bf1c      	itt	ne
 8017ec4:	f85a 0020 	ldrne.w	r0, [sl, r0, lsl #2]
 8017ec8:	f842 0c08 	strne.w	r0, [r2, #-8]
 8017ecc:	f014 040f 	ands.w	r4, r4, #15
 8017ed0:	bf1c      	itt	ne
 8017ed2:	f85a 0024 	ldrne.w	r0, [sl, r4, lsl #2]
 8017ed6:	f842 0c04 	strne.w	r0, [r2, #-4]
 8017eda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ede:	42b9      	cmp	r1, r7
 8017ee0:	f102 0208 	add.w	r2, r2, #8
 8017ee4:	d1ea      	bne.n	8017ebc <_DrawBitmap+0x920>
 8017ee6:	9a08      	ldr	r2, [sp, #32]
 8017ee8:	1c91      	adds	r1, r2, #2
 8017eea:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8017eee:	1c5a      	adds	r2, r3, #1
 8017ef0:	9108      	str	r1, [sp, #32]
 8017ef2:	ebac 0043 	sub.w	r0, ip, r3, lsl #1
 8017ef6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8017efa:	e58a      	b.n	8017a12 <_DrawBitmap+0x476>
 8017efc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017efe:	4663      	mov	r3, ip
 8017f00:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017f04:	b109      	cbz	r1, 8017f0a <_DrawBitmap+0x96e>
 8017f06:	f843 1c04 	str.w	r1, [r3, #-4]
 8017f0a:	4542      	cmp	r2, r8
 8017f0c:	f103 0304 	add.w	r3, r3, #4
 8017f10:	d1f6      	bne.n	8017f00 <_DrawBitmap+0x964>
 8017f12:	e76b      	b.n	8017dec <_DrawBitmap+0x850>
 8017f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017f16:	2900      	cmp	r1, #0
 8017f18:	f47f abd4 	bne.w	80176c4 <_DrawBitmap+0x128>
 8017f1c:	f7ff bb4c 	b.w	80175b8 <_DrawBitmap+0x1c>
 8017f20:	2000027c 	.word	0x2000027c
 8017f24:	20000254 	.word	0x20000254

08017f28 <_GetPixelIndex>:
 8017f28:	b570      	push	{r4, r5, r6, lr}
 8017f2a:	4b0e      	ldr	r3, [pc, #56]	; (8017f64 <_GetPixelIndex+0x3c>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	b082      	sub	sp, #8
 8017f30:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017f32:	460c      	mov	r4, r1
 8017f34:	4616      	mov	r6, r2
 8017f36:	f005 fd81 	bl	801da3c <GUI_ALLOC_LockH>
 8017f3a:	ab02      	add	r3, sp, #8
 8017f3c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f40:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017f44:	68c5      	ldr	r5, [r0, #12]
 8017f46:	f843 0d04 	str.w	r0, [r3, #-4]!
 8017f4a:	1a76      	subs	r6, r6, r1
 8017f4c:	3018      	adds	r0, #24
 8017f4e:	fb05 0506 	mla	r5, r5, r6, r0
 8017f52:	1aa4      	subs	r4, r4, r2
 8017f54:	4618      	mov	r0, r3
 8017f56:	f005 fd83 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017f5a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8017f5e:	b002      	add	sp, #8
 8017f60:	bd70      	pop	{r4, r5, r6, pc}
 8017f62:	bf00      	nop
 8017f64:	2000027c 	.word	0x2000027c

08017f68 <_SetPixelIndex>:
 8017f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f6c:	4c1a      	ldr	r4, [pc, #104]	; (8017fd8 <_SetPixelIndex+0x70>)
 8017f6e:	6820      	ldr	r0, [r4, #0]
 8017f70:	b083      	sub	sp, #12
 8017f72:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017f74:	460e      	mov	r6, r1
 8017f76:	4615      	mov	r5, r2
 8017f78:	461f      	mov	r7, r3
 8017f7a:	f005 fd5f 	bl	801da3c <GUI_ALLOC_LockH>
 8017f7e:	6823      	ldr	r3, [r4, #0]
 8017f80:	9000      	str	r0, [sp, #0]
 8017f82:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017f84:	f005 fd5a 	bl	801da3c <GUI_ALLOC_LockH>
 8017f88:	ac02      	add	r4, sp, #8
 8017f8a:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8017f8e:	68c3      	ldr	r3, [r0, #12]
 8017f90:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8017f94:	f844 0d04 	str.w	r0, [r4, #-4]!
 8017f98:	ebc8 0805 	rsb	r8, r8, r5
 8017f9c:	3018      	adds	r0, #24
 8017f9e:	fb03 0808 	mla	r8, r3, r8, r0
 8017fa2:	ebc9 0906 	rsb	r9, r9, r6
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	f005 fd5a 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017fac:	f848 7029 	str.w	r7, [r8, r9, lsl #2]
 8017fb0:	9b00      	ldr	r3, [sp, #0]
 8017fb2:	6958      	ldr	r0, [r3, #20]
 8017fb4:	b150      	cbz	r0, 8017fcc <_SetPixelIndex+0x64>
 8017fb6:	f005 fd41 	bl	801da3c <GUI_ALLOC_LockH>
 8017fba:	9001      	str	r0, [sp, #4]
 8017fbc:	6883      	ldr	r3, [r0, #8]
 8017fbe:	4631      	mov	r1, r6
 8017fc0:	462a      	mov	r2, r5
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4798      	blx	r3
 8017fc6:	4620      	mov	r0, r4
 8017fc8:	f005 fd4a 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017fcc:	4668      	mov	r0, sp
 8017fce:	f005 fd47 	bl	801da60 <GUI_ALLOC_UnlockH>
 8017fd2:	b003      	add	sp, #12
 8017fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fd8:	2000027c 	.word	0x2000027c

08017fdc <_XorPixel>:
 8017fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe0:	4c1e      	ldr	r4, [pc, #120]	; (801805c <_XorPixel+0x80>)
 8017fe2:	6823      	ldr	r3, [r4, #0]
 8017fe4:	b082      	sub	sp, #8
 8017fe6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017fe8:	4688      	mov	r8, r1
 8017fea:	4617      	mov	r7, r2
 8017fec:	f005 fd26 	bl	801da3c <GUI_ALLOC_LockH>
 8017ff0:	6823      	ldr	r3, [r4, #0]
 8017ff2:	9000      	str	r0, [sp, #0]
 8017ff4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017ff6:	f005 fd21 	bl	801da3c <GUI_ALLOC_LockH>
 8017ffa:	ac02      	add	r4, sp, #8
 8017ffc:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8018000:	f844 0d04 	str.w	r0, [r4, #-4]!
 8018004:	68c2      	ldr	r2, [r0, #12]
 8018006:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801800a:	f100 0318 	add.w	r3, r0, #24
 801800e:	1b7d      	subs	r5, r7, r5
 8018010:	4620      	mov	r0, r4
 8018012:	fb02 3505 	mla	r5, r2, r5, r3
 8018016:	f005 fd23 	bl	801da60 <GUI_ALLOC_UnlockH>
 801801a:	9b00      	ldr	r3, [sp, #0]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	691b      	ldr	r3, [r3, #16]
 8018020:	ebc6 0608 	rsb	r6, r6, r8
 8018024:	689b      	ldr	r3, [r3, #8]
 8018026:	4798      	blx	r3
 8018028:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801802c:	9a00      	ldr	r2, [sp, #0]
 801802e:	4058      	eors	r0, r3
 8018030:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 8018034:	6950      	ldr	r0, [r2, #20]
 8018036:	b150      	cbz	r0, 801804e <_XorPixel+0x72>
 8018038:	f005 fd00 	bl	801da3c <GUI_ALLOC_LockH>
 801803c:	9001      	str	r0, [sp, #4]
 801803e:	6883      	ldr	r3, [r0, #8]
 8018040:	4641      	mov	r1, r8
 8018042:	463a      	mov	r2, r7
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4798      	blx	r3
 8018048:	4620      	mov	r0, r4
 801804a:	f005 fd09 	bl	801da60 <GUI_ALLOC_UnlockH>
 801804e:	4668      	mov	r0, sp
 8018050:	f005 fd06 	bl	801da60 <GUI_ALLOC_UnlockH>
 8018054:	b002      	add	sp, #8
 8018056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805a:	bf00      	nop
 801805c:	2000027c 	.word	0x2000027c

08018060 <_DrawVLine>:
 8018060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018064:	4e36      	ldr	r6, [pc, #216]	; (8018140 <_DrawVLine+0xe0>)
 8018066:	6830      	ldr	r0, [r6, #0]
 8018068:	b084      	sub	sp, #16
 801806a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801806c:	460f      	mov	r7, r1
 801806e:	4614      	mov	r4, r2
 8018070:	4698      	mov	r8, r3
 8018072:	f005 fce3 	bl	801da3c <GUI_ALLOC_LockH>
 8018076:	9001      	str	r0, [sp, #4]
 8018078:	6940      	ldr	r0, [r0, #20]
 801807a:	2800      	cmp	r0, #0
 801807c:	d13c      	bne.n	80180f8 <_DrawVLine+0x98>
 801807e:	6833      	ldr	r3, [r6, #0]
 8018080:	9002      	str	r0, [sp, #8]
 8018082:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8018084:	f005 fcda 	bl	801da3c <GUI_ALLOC_LockH>
 8018088:	4603      	mov	r3, r0
 801808a:	a804      	add	r0, sp, #16
 801808c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8018090:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018094:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8018098:	f840 3d04 	str.w	r3, [r0, #-4]!
 801809c:	1a61      	subs	r1, r4, r1
 801809e:	f103 0218 	add.w	r2, r3, #24
 80180a2:	fb0e 2301 	mla	r3, lr, r1, r2
 80180a6:	1b7d      	subs	r5, r7, r5
 80180a8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80180ac:	f005 fcd8 	bl	801da60 <GUI_ALLOC_UnlockH>
 80180b0:	6833      	ldr	r3, [r6, #0]
 80180b2:	9a01      	ldr	r2, [sp, #4]
 80180b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80180b6:	7c1b      	ldrb	r3, [r3, #16]
 80180b8:	f8d1 a000 	ldr.w	sl, [r1]
 80180bc:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80180c0:	07db      	lsls	r3, r3, #31
 80180c2:	d41c      	bmi.n	80180fe <_DrawVLine+0x9e>
 80180c4:	9802      	ldr	r0, [sp, #8]
 80180c6:	b908      	cbnz	r0, 80180cc <_DrawVLine+0x6c>
 80180c8:	e030      	b.n	801812c <_DrawVLine+0xcc>
 80180ca:	9802      	ldr	r0, [sp, #8]
 80180cc:	6883      	ldr	r3, [r0, #8]
 80180ce:	4622      	mov	r2, r4
 80180d0:	681e      	ldr	r6, [r3, #0]
 80180d2:	4639      	mov	r1, r7
 80180d4:	3401      	adds	r4, #1
 80180d6:	47b0      	blx	r6
 80180d8:	45a0      	cmp	r8, r4
 80180da:	f8c5 a000 	str.w	sl, [r5]
 80180de:	444d      	add	r5, r9
 80180e0:	daf3      	bge.n	80180ca <_DrawVLine+0x6a>
 80180e2:	a801      	add	r0, sp, #4
 80180e4:	f005 fcbc 	bl	801da60 <GUI_ALLOC_UnlockH>
 80180e8:	9b02      	ldr	r3, [sp, #8]
 80180ea:	b113      	cbz	r3, 80180f2 <_DrawVLine+0x92>
 80180ec:	a802      	add	r0, sp, #8
 80180ee:	f005 fcb7 	bl	801da60 <GUI_ALLOC_UnlockH>
 80180f2:	b004      	add	sp, #16
 80180f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180f8:	f005 fca0 	bl	801da3c <GUI_ALLOC_LockH>
 80180fc:	e7bf      	b.n	801807e <_DrawVLine+0x1e>
 80180fe:	6813      	ldr	r3, [r2, #0]
 8018100:	691b      	ldr	r3, [r3, #16]
 8018102:	689b      	ldr	r3, [r3, #8]
 8018104:	4798      	blx	r3
 8018106:	4606      	mov	r6, r0
 8018108:	9b02      	ldr	r3, [sp, #8]
 801810a:	4622      	mov	r2, r4
 801810c:	4639      	mov	r1, r7
 801810e:	3401      	adds	r4, #1
 8018110:	4618      	mov	r0, r3
 8018112:	b113      	cbz	r3, 801811a <_DrawVLine+0xba>
 8018114:	689b      	ldr	r3, [r3, #8]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	4798      	blx	r3
 801811a:	9a01      	ldr	r2, [sp, #4]
 801811c:	682b      	ldr	r3, [r5, #0]
 801811e:	68d2      	ldr	r2, [r2, #12]
 8018120:	4073      	eors	r3, r6
 8018122:	4544      	cmp	r4, r8
 8018124:	602b      	str	r3, [r5, #0]
 8018126:	4415      	add	r5, r2
 8018128:	ddee      	ble.n	8018108 <_DrawVLine+0xa8>
 801812a:	e7da      	b.n	80180e2 <_DrawVLine+0x82>
 801812c:	ebc4 0308 	rsb	r3, r4, r8
 8018130:	3301      	adds	r3, #1
 8018132:	3b01      	subs	r3, #1
 8018134:	f8c5 a000 	str.w	sl, [r5]
 8018138:	444d      	add	r5, r9
 801813a:	d1fa      	bne.n	8018132 <_DrawVLine+0xd2>
 801813c:	e7d1      	b.n	80180e2 <_DrawVLine+0x82>
 801813e:	bf00      	nop
 8018140:	2000027c 	.word	0x2000027c

08018144 <_FillRect>:
 8018144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018148:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8018230 <_FillRect+0xec>
 801814c:	f8d8 0000 	ldr.w	r0, [r8]
 8018150:	b087      	sub	sp, #28
 8018152:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018154:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8018158:	468b      	mov	fp, r1
 801815a:	4615      	mov	r5, r2
 801815c:	461f      	mov	r7, r3
 801815e:	f005 fc6d 	bl	801da3c <GUI_ALLOC_LockH>
 8018162:	f8d8 3000 	ldr.w	r3, [r8]
 8018166:	9004      	str	r0, [sp, #16]
 8018168:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801816a:	f005 fc67 	bl	801da3c <GUI_ALLOC_LockH>
 801816e:	f10d 0c18 	add.w	ip, sp, #24
 8018172:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018176:	68c2      	ldr	r2, [r0, #12]
 8018178:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801817c:	f84c 0d04 	str.w	r0, [ip, #-4]!
 8018180:	1aeb      	subs	r3, r5, r3
 8018182:	3018      	adds	r0, #24
 8018184:	fb02 0303 	mla	r3, r2, r3, r0
 8018188:	ebc6 060b 	rsb	r6, r6, fp
 801818c:	4660      	mov	r0, ip
 801818e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8018192:	f8cd c00c 	str.w	ip, [sp, #12]
 8018196:	f005 fc63 	bl	801da60 <GUI_ALLOC_UnlockH>
 801819a:	9a04      	ldr	r2, [sp, #16]
 801819c:	f8d8 3000 	ldr.w	r3, [r8]
 80181a0:	6950      	ldr	r0, [r2, #20]
 80181a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181a4:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 80181a8:	681c      	ldr	r4, [r3, #0]
 80181aa:	ebcb 0707 	rsb	r7, fp, r7
 80181ae:	3701      	adds	r7, #1
 80181b0:	bb58      	cbnz	r0, 801820a <_FillRect+0xc6>
 80181b2:	454d      	cmp	r5, r9
 80181b4:	dc10      	bgt.n	80181d8 <_FillRect+0x94>
 80181b6:	f8d8 3000 	ldr.w	r3, [r8]
 80181ba:	7c1b      	ldrb	r3, [r3, #16]
 80181bc:	07db      	lsls	r3, r3, #31
 80181be:	d411      	bmi.n	80181e4 <_FillRect+0xa0>
 80181c0:	2f00      	cmp	r7, #0
 80181c2:	dd05      	ble.n	80181d0 <_FillRect+0x8c>
 80181c4:	4639      	mov	r1, r7
 80181c6:	4630      	mov	r0, r6
 80181c8:	3901      	subs	r1, #1
 80181ca:	f840 4b04 	str.w	r4, [r0], #4
 80181ce:	d1fb      	bne.n	80181c8 <_FillRect+0x84>
 80181d0:	3501      	adds	r5, #1
 80181d2:	45a9      	cmp	r9, r5
 80181d4:	4456      	add	r6, sl
 80181d6:	daee      	bge.n	80181b6 <_FillRect+0x72>
 80181d8:	a804      	add	r0, sp, #16
 80181da:	f005 fc41 	bl	801da60 <GUI_ALLOC_UnlockH>
 80181de:	b007      	add	sp, #28
 80181e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e4:	9b04      	ldr	r3, [sp, #16]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	691b      	ldr	r3, [r3, #16]
 80181ea:	689b      	ldr	r3, [r3, #8]
 80181ec:	4798      	blx	r3
 80181ee:	4632      	mov	r2, r6
 80181f0:	463b      	mov	r3, r7
 80181f2:	6811      	ldr	r1, [r2, #0]
 80181f4:	3b01      	subs	r3, #1
 80181f6:	ea81 0100 	eor.w	r1, r1, r0
 80181fa:	f842 1b04 	str.w	r1, [r2], #4
 80181fe:	d1f8      	bne.n	80181f2 <_FillRect+0xae>
 8018200:	3501      	adds	r5, #1
 8018202:	45a9      	cmp	r9, r5
 8018204:	4456      	add	r6, sl
 8018206:	dad6      	bge.n	80181b6 <_FillRect+0x72>
 8018208:	e7e6      	b.n	80181d8 <_FillRect+0x94>
 801820a:	f005 fc17 	bl	801da3c <GUI_ALLOC_LockH>
 801820e:	ebc5 0309 	rsb	r3, r5, r9
 8018212:	3301      	adds	r3, #1
 8018214:	9300      	str	r3, [sp, #0]
 8018216:	4659      	mov	r1, fp
 8018218:	462a      	mov	r2, r5
 801821a:	463b      	mov	r3, r7
 801821c:	9005      	str	r0, [sp, #20]
 801821e:	f008 fc37 	bl	8020a90 <GUI_USAGE_AddRect>
 8018222:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018226:	4660      	mov	r0, ip
 8018228:	f005 fc1a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801822c:	e7c1      	b.n	80181b2 <_FillRect+0x6e>
 801822e:	bf00      	nop
 8018230:	2000027c 	.word	0x2000027c

08018234 <_DrawHLine>:
 8018234:	b500      	push	{lr}
 8018236:	b083      	sub	sp, #12
 8018238:	9200      	str	r2, [sp, #0]
 801823a:	f7ff ff83 	bl	8018144 <_FillRect>
 801823e:	b003      	add	sp, #12
 8018240:	f85d fb04 	ldr.w	pc, [sp], #4

08018244 <GUI_MEMDEV__WriteToActiveAt>:
 8018244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018248:	b082      	sub	sp, #8
 801824a:	460e      	mov	r6, r1
 801824c:	4690      	mov	r8, r2
 801824e:	4607      	mov	r7, r0
 8018250:	f005 fbf4 	bl	801da3c <GUI_ALLOC_LockH>
 8018254:	6805      	ldr	r5, [r0, #0]
 8018256:	ac02      	add	r4, sp, #8
 8018258:	68eb      	ldr	r3, [r5, #12]
 801825a:	f844 0d04 	str.w	r0, [r4, #-4]!
 801825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018260:	2000      	movs	r0, #0
 8018262:	2116      	movs	r1, #22
 8018264:	4798      	blx	r3
 8018266:	4605      	mov	r5, r0
 8018268:	4620      	mov	r0, r4
 801826a:	f005 fbf9 	bl	801da60 <GUI_ALLOC_UnlockH>
 801826e:	b11d      	cbz	r5, 8018278 <GUI_MEMDEV__WriteToActiveAt+0x34>
 8018270:	4638      	mov	r0, r7
 8018272:	4631      	mov	r1, r6
 8018274:	4642      	mov	r2, r8
 8018276:	47a8      	blx	r5
 8018278:	b002      	add	sp, #8
 801827a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801827e:	bf00      	nop

08018280 <GUI_MEMDEV__CreateFixed>:
 8018280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018284:	4f4a      	ldr	r7, [pc, #296]	; (80183b0 <GUI_MEMDEV__CreateFixed+0x130>)
 8018286:	b087      	sub	sp, #28
 8018288:	683c      	ldr	r4, [r7, #0]
 801828a:	4682      	mov	sl, r0
 801828c:	468b      	mov	fp, r1
 801828e:	4616      	mov	r6, r2
 8018290:	461d      	mov	r5, r3
 8018292:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018294:	7c63      	ldrb	r3, [r4, #17]
 8018296:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018298:	2200      	movs	r2, #0
 801829a:	f003 fd95 	bl	801bdc8 <GUI_DEVICE_Create>
 801829e:	4604      	mov	r4, r0
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d031      	beq.n	8018308 <GUI_MEMDEV__CreateFixed+0x88>
 80182a4:	6903      	ldr	r3, [r0, #16]
 80182a6:	689b      	ldr	r3, [r3, #8]
 80182a8:	4798      	blx	r3
 80182aa:	f001 fb09 	bl	80198c0 <LCD__GetBPPDevice>
 80182ae:	fb06 f800 	mul.w	r8, r6, r0
 80182b2:	4681      	mov	r9, r0
 80182b4:	f005 fbee 	bl	801da94 <GUI_ALLOC_RequestSize>
 80182b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80182ba:	f108 0807 	add.w	r8, r8, #7
 80182be:	f011 0c01 	ands.w	ip, r1, #1
 80182c2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80182c6:	d105      	bne.n	80182d4 <GUI_MEMDEV__CreateFixed+0x54>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	bfb8      	it	lt
 80182cc:	3003      	addlt	r0, #3
 80182ce:	1080      	asrs	r0, r0, #2
 80182d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80182d4:	2d00      	cmp	r5, #0
 80182d6:	dd42      	ble.n	801835e <GUI_MEMDEV__CreateFixed+0xde>
 80182d8:	f1bc 0f00 	cmp.w	ip, #0
 80182dc:	d04a      	beq.n	8018374 <GUI_MEMDEV__CreateFixed+0xf4>
 80182de:	2300      	movs	r3, #0
 80182e0:	9303      	str	r3, [sp, #12]
 80182e2:	2d00      	cmp	r5, #0
 80182e4:	dd60      	ble.n	80183a8 <GUI_MEMDEV__CreateFixed+0x128>
 80182e6:	fb08 f005 	mul.w	r0, r8, r5
 80182ea:	3018      	adds	r0, #24
 80182ec:	f1bc 0f00 	cmp.w	ip, #0
 80182f0:	d00e      	beq.n	8018310 <GUI_MEMDEV__CreateFixed+0x90>
 80182f2:	f005 fb8b 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 80182f6:	4602      	mov	r2, r0
 80182f8:	b97a      	cbnz	r2, 801831a <GUI_MEMDEV__CreateFixed+0x9a>
 80182fa:	4620      	mov	r0, r4
 80182fc:	9202      	str	r2, [sp, #8]
 80182fe:	f003 fd61 	bl	801bdc4 <GUI_DEVICE_Delete>
 8018302:	9c03      	ldr	r4, [sp, #12]
 8018304:	2c00      	cmp	r4, #0
 8018306:	d147      	bne.n	8018398 <GUI_MEMDEV__CreateFixed+0x118>
 8018308:	2000      	movs	r0, #0
 801830a:	b007      	add	sp, #28
 801830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018310:	f005 fd1c 	bl	801dd4c <GUI_ALLOC_AllocZero>
 8018314:	4602      	mov	r2, r0
 8018316:	2a00      	cmp	r2, #0
 8018318:	d0ef      	beq.n	80182fa <GUI_MEMDEV__CreateFixed+0x7a>
 801831a:	4610      	mov	r0, r2
 801831c:	9202      	str	r2, [sp, #8]
 801831e:	f005 fb8d 	bl	801da3c <GUI_ALLOC_LockH>
 8018322:	4603      	mov	r3, r0
 8018324:	a806      	add	r0, sp, #24
 8018326:	815d      	strh	r5, [r3, #10]
 8018328:	9d03      	ldr	r5, [sp, #12]
 801832a:	f8a3 a004 	strh.w	sl, [r3, #4]
 801832e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8018332:	f8a3 b006 	strh.w	fp, [r3, #6]
 8018336:	811e      	strh	r6, [r3, #8]
 8018338:	f8c3 800c 	str.w	r8, [r3, #12]
 801833c:	f8c3 9010 	str.w	r9, [r3, #16]
 8018340:	615d      	str	r5, [r3, #20]
 8018342:	601c      	str	r4, [r3, #0]
 8018344:	f005 fb8c 	bl	801da60 <GUI_ALLOC_UnlockH>
 8018348:	9a02      	ldr	r2, [sp, #8]
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801834e:	6125      	str	r5, [r4, #16]
 8018350:	60a2      	str	r2, [r4, #8]
 8018352:	7c5b      	ldrb	r3, [r3, #17]
 8018354:	61a3      	str	r3, [r4, #24]
 8018356:	4610      	mov	r0, r2
 8018358:	b007      	add	sp, #28
 801835a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801835e:	f1b8 0f00 	cmp.w	r8, #0
 8018362:	d115      	bne.n	8018390 <GUI_MEMDEV__CreateFixed+0x110>
 8018364:	4640      	mov	r0, r8
 8018366:	426d      	negs	r5, r5
 8018368:	42a8      	cmp	r0, r5
 801836a:	bfb8      	it	lt
 801836c:	4605      	movlt	r5, r0
 801836e:	f1bc 0f00 	cmp.w	ip, #0
 8018372:	d1b4      	bne.n	80182de <GUI_MEMDEV__CreateFixed+0x5e>
 8018374:	f8cd c000 	str.w	ip, [sp]
 8018378:	4650      	mov	r0, sl
 801837a:	4659      	mov	r1, fp
 801837c:	4632      	mov	r2, r6
 801837e:	462b      	mov	r3, r5
 8018380:	f8cd c008 	str.w	ip, [sp, #8]
 8018384:	f008 fb38 	bl	80209f8 <GUI_USAGE_BM_Create>
 8018388:	f8dd c008 	ldr.w	ip, [sp, #8]
 801838c:	9003      	str	r0, [sp, #12]
 801838e:	e7a8      	b.n	80182e2 <GUI_MEMDEV__CreateFixed+0x62>
 8018390:	3818      	subs	r0, #24
 8018392:	fbb0 f0f8 	udiv	r0, r0, r8
 8018396:	e7e6      	b.n	8018366 <GUI_MEMDEV__CreateFixed+0xe6>
 8018398:	4620      	mov	r0, r4
 801839a:	f005 fc61 	bl	801dc60 <GUI_ALLOC_Free>
 801839e:	9a02      	ldr	r2, [sp, #8]
 80183a0:	4610      	mov	r0, r2
 80183a2:	b007      	add	sp, #28
 80183a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183a8:	4620      	mov	r0, r4
 80183aa:	f003 fd0b 	bl	801bdc4 <GUI_DEVICE_Delete>
 80183ae:	e7ab      	b.n	8018308 <GUI_MEMDEV__CreateFixed+0x88>
 80183b0:	2000027c 	.word	0x2000027c

080183b4 <GUI_MEMDEV_GetBitsPerPixel>:
 80183b4:	b530      	push	{r4, r5, lr}
 80183b6:	4604      	mov	r4, r0
 80183b8:	b083      	sub	sp, #12
 80183ba:	b198      	cbz	r0, 80183e4 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 80183bc:	f002 ffbe 	bl	801b33c <GUI_Lock>
 80183c0:	4620      	mov	r0, r4
 80183c2:	f005 fb3b 	bl	801da3c <GUI_ALLOC_LockH>
 80183c6:	6803      	ldr	r3, [r0, #0]
 80183c8:	ad02      	add	r5, sp, #8
 80183ca:	691b      	ldr	r3, [r3, #16]
 80183cc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80183d0:	689b      	ldr	r3, [r3, #8]
 80183d2:	4798      	blx	r3
 80183d4:	f001 fa74 	bl	80198c0 <LCD__GetBPPDevice>
 80183d8:	4604      	mov	r4, r0
 80183da:	4628      	mov	r0, r5
 80183dc:	f005 fb40 	bl	801da60 <GUI_ALLOC_UnlockH>
 80183e0:	f002 ffa2 	bl	801b328 <GUI_Unlock>
 80183e4:	4620      	mov	r0, r4
 80183e6:	b003      	add	sp, #12
 80183e8:	bd30      	pop	{r4, r5, pc}
 80183ea:	bf00      	nop

080183ec <GUI_MEMDEV_Delete>:
 80183ec:	b510      	push	{r4, lr}
 80183ee:	4604      	mov	r4, r0
 80183f0:	b082      	sub	sp, #8
 80183f2:	b908      	cbnz	r0, 80183f8 <GUI_MEMDEV_Delete+0xc>
 80183f4:	b002      	add	sp, #8
 80183f6:	bd10      	pop	{r4, pc}
 80183f8:	f002 ffa0 	bl	801b33c <GUI_Lock>
 80183fc:	4b0f      	ldr	r3, [pc, #60]	; (801843c <GUI_MEMDEV_Delete+0x50>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018402:	42a3      	cmp	r3, r4
 8018404:	d017      	beq.n	8018436 <GUI_MEMDEV_Delete+0x4a>
 8018406:	4620      	mov	r0, r4
 8018408:	f005 fb18 	bl	801da3c <GUI_ALLOC_LockH>
 801840c:	6943      	ldr	r3, [r0, #20]
 801840e:	9001      	str	r0, [sp, #4]
 8018410:	b963      	cbnz	r3, 801842c <GUI_MEMDEV_Delete+0x40>
 8018412:	6800      	ldr	r0, [r0, #0]
 8018414:	f003 fcd6 	bl	801bdc4 <GUI_DEVICE_Delete>
 8018418:	a801      	add	r0, sp, #4
 801841a:	f005 fb21 	bl	801da60 <GUI_ALLOC_UnlockH>
 801841e:	4620      	mov	r0, r4
 8018420:	f005 fc1e 	bl	801dc60 <GUI_ALLOC_Free>
 8018424:	f002 ff80 	bl	801b328 <GUI_Unlock>
 8018428:	b002      	add	sp, #8
 801842a:	bd10      	pop	{r4, pc}
 801842c:	4618      	mov	r0, r3
 801842e:	f008 fb15 	bl	8020a5c <GUI_USAGE_DecUseCnt>
 8018432:	9801      	ldr	r0, [sp, #4]
 8018434:	e7ed      	b.n	8018412 <GUI_MEMDEV_Delete+0x26>
 8018436:	f004 fa03 	bl	801c840 <GUI_SelectLCD>
 801843a:	e7e4      	b.n	8018406 <GUI_MEMDEV_Delete+0x1a>
 801843c:	2000027c 	.word	0x2000027c

08018440 <GUI_MEMDEV_CreateEx>:
 8018440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018444:	b085      	sub	sp, #20
 8018446:	4680      	mov	r8, r0
 8018448:	4692      	mov	sl, r2
 801844a:	469b      	mov	fp, r3
 801844c:	4689      	mov	r9, r1
 801844e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8018450:	f002 ff74 	bl	801b33c <GUI_Lock>
 8018454:	4a19      	ldr	r2, [pc, #100]	; (80184bc <GUI_MEMDEV_CreateEx+0x7c>)
 8018456:	4b1a      	ldr	r3, [pc, #104]	; (80184c0 <GUI_MEMDEV_CreateEx+0x80>)
 8018458:	6812      	ldr	r2, [r2, #0]
 801845a:	7c50      	ldrb	r0, [r2, #17]
 801845c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8018460:	e001      	b.n	8018466 <GUI_MEMDEV_CreateEx+0x26>
 8018462:	6824      	ldr	r4, [r4, #0]
 8018464:	b314      	cbz	r4, 80184ac <GUI_MEMDEV_CreateEx+0x6c>
 8018466:	68e5      	ldr	r5, [r4, #12]
 8018468:	682e      	ldr	r6, [r5, #0]
 801846a:	2e04      	cmp	r6, #4
 801846c:	d1f9      	bne.n	8018462 <GUI_MEMDEV_CreateEx+0x22>
 801846e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8018470:	4620      	mov	r0, r4
 8018472:	2101      	movs	r1, #1
 8018474:	4798      	blx	r3
 8018476:	4605      	mov	r5, r0
 8018478:	b190      	cbz	r0, 80184a0 <GUI_MEMDEV_CreateEx+0x60>
 801847a:	6924      	ldr	r4, [r4, #16]
 801847c:	68a3      	ldr	r3, [r4, #8]
 801847e:	4798      	blx	r3
 8018480:	3001      	adds	r0, #1
 8018482:	bf08      	it	eq
 8018484:	4c0f      	ldreq	r4, [pc, #60]	; (80184c4 <GUI_MEMDEV_CreateEx+0x84>)
 8018486:	9501      	str	r5, [sp, #4]
 8018488:	bf08      	it	eq
 801848a:	f047 0701 	orreq.w	r7, r7, #1
 801848e:	9700      	str	r7, [sp, #0]
 8018490:	9402      	str	r4, [sp, #8]
 8018492:	4640      	mov	r0, r8
 8018494:	4649      	mov	r1, r9
 8018496:	4652      	mov	r2, sl
 8018498:	465b      	mov	r3, fp
 801849a:	f7ff fef1 	bl	8018280 <GUI_MEMDEV__CreateFixed>
 801849e:	4605      	mov	r5, r0
 80184a0:	f002 ff42 	bl	801b328 <GUI_Unlock>
 80184a4:	4628      	mov	r0, r5
 80184a6:	b005      	add	sp, #20
 80184a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184ac:	f003 fc74 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80184b0:	4604      	mov	r4, r0
 80184b2:	b108      	cbz	r0, 80184b8 <GUI_MEMDEV_CreateEx+0x78>
 80184b4:	68c5      	ldr	r5, [r0, #12]
 80184b6:	e7da      	b.n	801846e <GUI_MEMDEV_CreateEx+0x2e>
 80184b8:	4620      	mov	r0, r4
 80184ba:	e7f4      	b.n	80184a6 <GUI_MEMDEV_CreateEx+0x66>
 80184bc:	2000027c 	.word	0x2000027c
 80184c0:	2002cbcc 	.word	0x2002cbcc
 80184c4:	08029cf0 	.word	0x08029cf0

080184c8 <GUI_MEMDEV_Select>:
 80184c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184ca:	4f16      	ldr	r7, [pc, #88]	; (8018524 <GUI_MEMDEV_Select+0x5c>)
 80184cc:	b083      	sub	sp, #12
 80184ce:	4604      	mov	r4, r0
 80184d0:	f002 ff34 	bl	801b33c <GUI_Lock>
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80184d8:	b1e4      	cbz	r4, 8018514 <GUI_MEMDEV_Select+0x4c>
 80184da:	b9c6      	cbnz	r6, 801850e <GUI_MEMDEV_Select+0x46>
 80184dc:	f7fe fc8e 	bl	8016dfc <WM_Deactivate>
 80184e0:	4620      	mov	r0, r4
 80184e2:	f005 faab 	bl	801da3c <GUI_ALLOC_LockH>
 80184e6:	ad02      	add	r5, sp, #8
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	f845 0d04 	str.w	r0, [r5, #-4]!
 80184ee:	661c      	str	r4, [r3, #96]	; 0x60
 80184f0:	6800      	ldr	r0, [r0, #0]
 80184f2:	f003 fcad 	bl	801be50 <GUI_DEVICE_Link>
 80184f6:	4628      	mov	r0, r5
 80184f8:	f005 fab2 	bl	801da60 <GUI_ALLOC_UnlockH>
 80184fc:	f000 ffc4 	bl	8019488 <LCD_UpdateColorIndices>
 8018500:	f001 fdbe 	bl	801a080 <LCD_SetClipRectMax>
 8018504:	f002 ff10 	bl	801b328 <GUI_Unlock>
 8018508:	4630      	mov	r0, r6
 801850a:	b003      	add	sp, #12
 801850c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801850e:	f004 f997 	bl	801c840 <GUI_SelectLCD>
 8018512:	e7e3      	b.n	80184dc <GUI_MEMDEV_Select+0x14>
 8018514:	f004 f994 	bl	801c840 <GUI_SelectLCD>
 8018518:	f002 ff06 	bl	801b328 <GUI_Unlock>
 801851c:	4630      	mov	r0, r6
 801851e:	b003      	add	sp, #12
 8018520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018522:	bf00      	nop
 8018524:	2000027c 	.word	0x2000027c

08018528 <GUI_MEMDEV_CopyToLCDAt>:
 8018528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801852c:	4604      	mov	r4, r0
 801852e:	b084      	sub	sp, #16
 8018530:	460d      	mov	r5, r1
 8018532:	4616      	mov	r6, r2
 8018534:	b910      	cbnz	r0, 801853c <GUI_MEMDEV_CopyToLCDAt+0x14>
 8018536:	b004      	add	sp, #16
 8018538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801853c:	f002 fefe 	bl	801b33c <GUI_Lock>
 8018540:	2000      	movs	r0, #0
 8018542:	f004 f9ed 	bl	801c920 <GUI_SetDrawMode>
 8018546:	4f33      	ldr	r7, [pc, #204]	; (8018614 <GUI_MEMDEV_CopyToLCDAt+0xec>)
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	4681      	mov	r9, r0
 801854c:	4620      	mov	r0, r4
 801854e:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8018552:	f005 fa73 	bl	801da3c <GUI_ALLOC_LockH>
 8018556:	6803      	ldr	r3, [r0, #0]
 8018558:	9000      	str	r0, [sp, #0]
 801855a:	6998      	ldr	r0, [r3, #24]
 801855c:	f003 f80e 	bl	801b57c <GUI_SelectLayer>
 8018560:	4b2d      	ldr	r3, [pc, #180]	; (8018618 <GUI_MEMDEV_CopyToLCDAt+0xf0>)
 8018562:	429d      	cmp	r5, r3
 8018564:	9b00      	ldr	r3, [sp, #0]
 8018566:	bf04      	itt	eq
 8018568:	f9b3 5004 	ldrsheq.w	r5, [r3, #4]
 801856c:	f9b3 6006 	ldrsheq.w	r6, [r3, #6]
 8018570:	891a      	ldrh	r2, [r3, #8]
 8018572:	895b      	ldrh	r3, [r3, #10]
 8018574:	f8ad 5008 	strh.w	r5, [sp, #8]
 8018578:	3a01      	subs	r2, #1
 801857a:	3b01      	subs	r3, #1
 801857c:	442a      	add	r2, r5
 801857e:	4433      	add	r3, r6
 8018580:	4682      	mov	sl, r0
 8018582:	f8ad 200c 	strh.w	r2, [sp, #12]
 8018586:	f8ad 300e 	strh.w	r3, [sp, #14]
 801858a:	f8ad 600a 	strh.w	r6, [sp, #10]
 801858e:	f7fe fc2d 	bl	8016dec <WM_Activate>
 8018592:	4668      	mov	r0, sp
 8018594:	f005 fa64 	bl	801da60 <GUI_ALLOC_UnlockH>
 8018598:	a802      	add	r0, sp, #8
 801859a:	f7fe f9af 	bl	80168fc <WM__InitIVRSearch>
 801859e:	bb48      	cbnz	r0, 80185f4 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 80185a0:	4650      	mov	r0, sl
 80185a2:	f002 ffeb 	bl	801b57c <GUI_SelectLayer>
 80185a6:	f002 fec9 	bl	801b33c <GUI_Lock>
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185ae:	f1b8 0f00 	cmp.w	r8, #0
 80185b2:	d02c      	beq.n	801860e <GUI_MEMDEV_CopyToLCDAt+0xe6>
 80185b4:	bb43      	cbnz	r3, 8018608 <GUI_MEMDEV_CopyToLCDAt+0xe0>
 80185b6:	f7fe fc21 	bl	8016dfc <WM_Deactivate>
 80185ba:	4640      	mov	r0, r8
 80185bc:	f005 fa3e 	bl	801da3c <GUI_ALLOC_LockH>
 80185c0:	ac04      	add	r4, sp, #16
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80185c8:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
 80185cc:	6800      	ldr	r0, [r0, #0]
 80185ce:	f003 fc3f 	bl	801be50 <GUI_DEVICE_Link>
 80185d2:	4620      	mov	r0, r4
 80185d4:	f005 fa44 	bl	801da60 <GUI_ALLOC_UnlockH>
 80185d8:	f000 ff56 	bl	8019488 <LCD_UpdateColorIndices>
 80185dc:	f001 fd50 	bl	801a080 <LCD_SetClipRectMax>
 80185e0:	f002 fea2 	bl	801b328 <GUI_Unlock>
 80185e4:	4648      	mov	r0, r9
 80185e6:	f004 f99b 	bl	801c920 <GUI_SetDrawMode>
 80185ea:	f002 fe9d 	bl	801b328 <GUI_Unlock>
 80185ee:	b004      	add	sp, #16
 80185f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185f4:	4620      	mov	r0, r4
 80185f6:	4629      	mov	r1, r5
 80185f8:	4632      	mov	r2, r6
 80185fa:	f007 faef 	bl	801fbdc <GUI_MEMDEV__WriteToActiveOpaque>
 80185fe:	f7fe f857 	bl	80166b0 <WM__GetNextIVR>
 8018602:	2800      	cmp	r0, #0
 8018604:	d1f6      	bne.n	80185f4 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 8018606:	e7cb      	b.n	80185a0 <GUI_MEMDEV_CopyToLCDAt+0x78>
 8018608:	f004 f91a 	bl	801c840 <GUI_SelectLCD>
 801860c:	e7d3      	b.n	80185b6 <GUI_MEMDEV_CopyToLCDAt+0x8e>
 801860e:	f004 f917 	bl	801c840 <GUI_SelectLCD>
 8018612:	e7e5      	b.n	80185e0 <GUI_MEMDEV_CopyToLCDAt+0xb8>
 8018614:	2000027c 	.word	0x2000027c
 8018618:	fffff001 	.word	0xfffff001

0801861c <GUI_MEMDEV_CopyToLCD>:
 801861c:	4901      	ldr	r1, [pc, #4]	; (8018624 <GUI_MEMDEV_CopyToLCD+0x8>)
 801861e:	460a      	mov	r2, r1
 8018620:	f7ff bf82 	b.w	8018528 <GUI_MEMDEV_CopyToLCDAt>
 8018624:	fffff001 	.word	0xfffff001

08018628 <_GetRect>:
 8018628:	6883      	ldr	r3, [r0, #8]
 801862a:	695a      	ldr	r2, [r3, #20]
 801862c:	699b      	ldr	r3, [r3, #24]
 801862e:	3a01      	subs	r2, #1
 8018630:	1e58      	subs	r0, r3, #1
 8018632:	2300      	movs	r3, #0
 8018634:	808a      	strh	r2, [r1, #4]
 8018636:	80c8      	strh	r0, [r1, #6]
 8018638:	800b      	strh	r3, [r1, #0]
 801863a:	804b      	strh	r3, [r1, #2]
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop

08018640 <_SetPixelIndex>:
 8018640:	b410      	push	{r4}
 8018642:	6880      	ldr	r0, [r0, #8]
 8018644:	69c4      	ldr	r4, [r0, #28]
 8018646:	6800      	ldr	r0, [r0, #0]
 8018648:	fb04 1202 	mla	r2, r4, r2, r1
 801864c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018650:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018654:	4770      	bx	lr
 8018656:	bf00      	nop

08018658 <_GetPixelIndex>:
 8018658:	6883      	ldr	r3, [r0, #8]
 801865a:	69d8      	ldr	r0, [r3, #28]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	fb00 1202 	mla	r2, r0, r2, r1
 8018662:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018666:	4770      	bx	lr

08018668 <_XorPixel>:
 8018668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801866a:	6883      	ldr	r3, [r0, #8]
 801866c:	69df      	ldr	r7, [r3, #28]
 801866e:	460d      	mov	r5, r1
 8018670:	6901      	ldr	r1, [r0, #16]
 8018672:	fb07 5702 	mla	r7, r7, r2, r5
 8018676:	4604      	mov	r4, r0
 8018678:	6818      	ldr	r0, [r3, #0]
 801867a:	688b      	ldr	r3, [r1, #8]
 801867c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8018680:	4616      	mov	r6, r2
 8018682:	4798      	blx	r3
 8018684:	68a3      	ldr	r3, [r4, #8]
 8018686:	69da      	ldr	r2, [r3, #28]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	fb02 5506 	mla	r5, r2, r6, r5
 801868e:	4078      	eors	r0, r7
 8018690:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8018694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018696:	bf00      	nop

08018698 <_GetDevProp>:
 8018698:	3901      	subs	r1, #1
 801869a:	6883      	ldr	r3, [r0, #8]
 801869c:	290d      	cmp	r1, #13
 801869e:	d816      	bhi.n	80186ce <_GetDevProp+0x36>
 80186a0:	e8df f001 	tbb	[pc, r1]
 80186a4:	13110d0b 	.word	0x13110d0b
 80186a8:	0f151515 	.word	0x0f151515
 80186ac:	07090907 	.word	0x07090907
 80186b0:	0707      	.short	0x0707
 80186b2:	2000      	movs	r0, #0
 80186b4:	4770      	bx	lr
 80186b6:	2001      	movs	r0, #1
 80186b8:	4770      	bx	lr
 80186ba:	68d8      	ldr	r0, [r3, #12]
 80186bc:	4770      	bx	lr
 80186be:	6918      	ldr	r0, [r3, #16]
 80186c0:	4770      	bx	lr
 80186c2:	2020      	movs	r0, #32
 80186c4:	4770      	bx	lr
 80186c6:	6958      	ldr	r0, [r3, #20]
 80186c8:	4770      	bx	lr
 80186ca:	6998      	ldr	r0, [r3, #24]
 80186cc:	4770      	bx	lr
 80186ce:	f04f 30ff 	mov.w	r0, #4294967295
 80186d2:	4770      	bx	lr

080186d4 <_GetDevData>:
 80186d4:	4802      	ldr	r0, [pc, #8]	; (80186e0 <_GetDevData+0xc>)
 80186d6:	2901      	cmp	r1, #1
 80186d8:	bf18      	it	ne
 80186da:	2000      	movne	r0, #0
 80186dc:	4770      	bx	lr
 80186de:	bf00      	nop
 80186e0:	08026d2c 	.word	0x08026d2c

080186e4 <_ReadRect>:
 80186e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80186e8:	6887      	ldr	r7, [r0, #8]
 80186ea:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80186ee:	69f8      	ldr	r0, [r7, #28]
 80186f0:	9d08      	ldr	r5, [sp, #32]
 80186f2:	1a5b      	subs	r3, r3, r1
 80186f4:	f103 0801 	add.w	r8, r3, #1
 80186f8:	fb00 1102 	mla	r1, r0, r2, r1
 80186fc:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8018700:	008e      	lsls	r6, r1, #2
 8018702:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8018706:	462b      	mov	r3, r5
 8018708:	4641      	mov	r1, r8
 801870a:	3304      	adds	r3, #4
 801870c:	1998      	adds	r0, r3, r6
 801870e:	3804      	subs	r0, #4
 8018710:	683c      	ldr	r4, [r7, #0]
 8018712:	1b40      	subs	r0, r0, r5
 8018714:	3901      	subs	r1, #1
 8018716:	5820      	ldr	r0, [r4, r0]
 8018718:	f843 0c04 	str.w	r0, [r3, #-4]
 801871c:	d1f5      	bne.n	801870a <_ReadRect+0x26>
 801871e:	3201      	adds	r2, #1
 8018720:	1e53      	subs	r3, r2, #1
 8018722:	459c      	cmp	ip, r3
 8018724:	4455      	add	r5, sl
 8018726:	444e      	add	r6, r9
 8018728:	dced      	bgt.n	8018706 <_ReadRect+0x22>
 801872a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 801872e:	4770      	bx	lr

08018730 <_GetDevFunc>:
 8018730:	3901      	subs	r1, #1
 8018732:	2924      	cmp	r1, #36	; 0x24
 8018734:	d846      	bhi.n	80187c4 <_GetDevFunc+0x94>
 8018736:	e8df f001 	tbb	[pc, r1]
 801873a:	1d1f      	.short	0x1d1f
 801873c:	1745191b 	.word	0x1745191b
 8018740:	13154545 	.word	0x13154545
 8018744:	3f454143 	.word	0x3f454143
 8018748:	4545453d 	.word	0x4545453d
 801874c:	3537393b 	.word	0x3537393b
 8018750:	45314545 	.word	0x45314545
 8018754:	45454545 	.word	0x45454545
 8018758:	292b2d45 	.word	0x292b2d45
 801875c:	4525      	.short	0x4525
 801875e:	21          	.byte	0x21
 801875f:	00          	.byte	0x00
 8018760:	4819      	ldr	r0, [pc, #100]	; (80187c8 <_GetDevFunc+0x98>)
 8018762:	4770      	bx	lr
 8018764:	4819      	ldr	r0, [pc, #100]	; (80187cc <_GetDevFunc+0x9c>)
 8018766:	4770      	bx	lr
 8018768:	4819      	ldr	r0, [pc, #100]	; (80187d0 <_GetDevFunc+0xa0>)
 801876a:	4770      	bx	lr
 801876c:	4819      	ldr	r0, [pc, #100]	; (80187d4 <_GetDevFunc+0xa4>)
 801876e:	4770      	bx	lr
 8018770:	4819      	ldr	r0, [pc, #100]	; (80187d8 <_GetDevFunc+0xa8>)
 8018772:	4770      	bx	lr
 8018774:	4819      	ldr	r0, [pc, #100]	; (80187dc <_GetDevFunc+0xac>)
 8018776:	4770      	bx	lr
 8018778:	4819      	ldr	r0, [pc, #100]	; (80187e0 <_GetDevFunc+0xb0>)
 801877a:	4770      	bx	lr
 801877c:	6803      	ldr	r3, [r0, #0]
 801877e:	689b      	ldr	r3, [r3, #8]
 8018780:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018782:	4770      	bx	lr
 8018784:	6803      	ldr	r3, [r0, #0]
 8018786:	689b      	ldr	r3, [r3, #8]
 8018788:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801878a:	4770      	bx	lr
 801878c:	4815      	ldr	r0, [pc, #84]	; (80187e4 <_GetDevFunc+0xb4>)
 801878e:	4770      	bx	lr
 8018790:	4815      	ldr	r0, [pc, #84]	; (80187e8 <_GetDevFunc+0xb8>)
 8018792:	4770      	bx	lr
 8018794:	6803      	ldr	r3, [r0, #0]
 8018796:	689b      	ldr	r3, [r3, #8]
 8018798:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801879a:	4770      	bx	lr
 801879c:	6803      	ldr	r3, [r0, #0]
 801879e:	689b      	ldr	r3, [r3, #8]
 80187a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80187a2:	4770      	bx	lr
 80187a4:	4811      	ldr	r0, [pc, #68]	; (80187ec <_GetDevFunc+0xbc>)
 80187a6:	4770      	bx	lr
 80187a8:	4811      	ldr	r0, [pc, #68]	; (80187f0 <_GetDevFunc+0xc0>)
 80187aa:	4770      	bx	lr
 80187ac:	4811      	ldr	r0, [pc, #68]	; (80187f4 <_GetDevFunc+0xc4>)
 80187ae:	4770      	bx	lr
 80187b0:	4811      	ldr	r0, [pc, #68]	; (80187f8 <_GetDevFunc+0xc8>)
 80187b2:	4770      	bx	lr
 80187b4:	4811      	ldr	r0, [pc, #68]	; (80187fc <_GetDevFunc+0xcc>)
 80187b6:	4770      	bx	lr
 80187b8:	4811      	ldr	r0, [pc, #68]	; (8018800 <_GetDevFunc+0xd0>)
 80187ba:	4770      	bx	lr
 80187bc:	4811      	ldr	r0, [pc, #68]	; (8018804 <_GetDevFunc+0xd4>)
 80187be:	4770      	bx	lr
 80187c0:	4811      	ldr	r0, [pc, #68]	; (8018808 <_GetDevFunc+0xd8>)
 80187c2:	4770      	bx	lr
 80187c4:	2000      	movs	r0, #0
 80187c6:	4770      	bx	lr
 80187c8:	0801914d 	.word	0x0801914d
 80187cc:	08019205 	.word	0x08019205
 80187d0:	08019185 	.word	0x08019185
 80187d4:	08019041 	.word	0x08019041
 80187d8:	08019315 	.word	0x08019315
 80187dc:	080191c5 	.word	0x080191c5
 80187e0:	080186e5 	.word	0x080186e5
 80187e4:	08019111 	.word	0x08019111
 80187e8:	080192a1 	.word	0x080192a1
 80187ec:	08019071 	.word	0x08019071
 80187f0:	0801880d 	.word	0x0801880d
 80187f4:	08018825 	.word	0x08018825
 80187f8:	0801883d 	.word	0x0801883d
 80187fc:	08018855 	.word	0x08018855
 8018800:	08018861 	.word	0x08018861
 8018804:	080190e1 	.word	0x080190e1
 8018808:	08019245 	.word	0x08019245

0801880c <_SetChroma>:
 801880c:	b500      	push	{lr}
 801880e:	b083      	sub	sp, #12
 8018810:	e88d 0006 	stmia.w	sp, {r1, r2}
 8018814:	6980      	ldr	r0, [r0, #24]
 8018816:	210d      	movs	r1, #13
 8018818:	466a      	mov	r2, sp
 801881a:	f7f2 feb3 	bl	800b584 <LCD_X_DisplayDriver>
 801881e:	b003      	add	sp, #12
 8018820:	f85d fb04 	ldr.w	pc, [sp], #4

08018824 <_SetChromaMode>:
 8018824:	b500      	push	{lr}
 8018826:	b083      	sub	sp, #12
 8018828:	aa02      	add	r2, sp, #8
 801882a:	6980      	ldr	r0, [r0, #24]
 801882c:	f842 1d04 	str.w	r1, [r2, #-4]!
 8018830:	210c      	movs	r1, #12
 8018832:	f7f2 fea7 	bl	800b584 <LCD_X_DisplayDriver>
 8018836:	b003      	add	sp, #12
 8018838:	f85d fb04 	ldr.w	pc, [sp], #4

0801883c <_SetAlphaMode>:
 801883c:	b500      	push	{lr}
 801883e:	b083      	sub	sp, #12
 8018840:	aa02      	add	r2, sp, #8
 8018842:	6980      	ldr	r0, [r0, #24]
 8018844:	f842 1d04 	str.w	r1, [r2, #-4]!
 8018848:	210b      	movs	r1, #11
 801884a:	f7f2 fe9b 	bl	800b584 <LCD_X_DisplayDriver>
 801884e:	b003      	add	sp, #12
 8018850:	f85d fb04 	ldr.w	pc, [sp], #4

08018854 <_Off>:
 8018854:	6980      	ldr	r0, [r0, #24]
 8018856:	2106      	movs	r1, #6
 8018858:	2200      	movs	r2, #0
 801885a:	f7f2 be93 	b.w	800b584 <LCD_X_DisplayDriver>
 801885e:	bf00      	nop

08018860 <_On>:
 8018860:	6980      	ldr	r0, [r0, #24]
 8018862:	2105      	movs	r1, #5
 8018864:	2200      	movs	r2, #0
 8018866:	f7f2 be8d 	b.w	800b584 <LCD_X_DisplayDriver>
 801886a:	bf00      	nop

0801886c <_SetOrg>:
 801886c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018870:	4604      	mov	r4, r0
 8018872:	b083      	sub	sp, #12
 8018874:	2300      	movs	r3, #0
 8018876:	6980      	ldr	r0, [r0, #24]
 8018878:	9300      	str	r3, [sp, #0]
 801887a:	4688      	mov	r8, r1
 801887c:	4691      	mov	r9, r2
 801887e:	9301      	str	r3, [sp, #4]
 8018880:	68a5      	ldr	r5, [r4, #8]
 8018882:	f000 ff1b 	bl	80196bc <LCD_GetMirrorXEx>
 8018886:	4606      	mov	r6, r0
 8018888:	69a0      	ldr	r0, [r4, #24]
 801888a:	f000 ff25 	bl	80196d8 <LCD_GetMirrorYEx>
 801888e:	4607      	mov	r7, r0
 8018890:	69a0      	ldr	r0, [r4, #24]
 8018892:	f000 ff2f 	bl	80196f4 <LCD_GetSwapXYEx>
 8018896:	0080      	lsls	r0, r0, #2
 8018898:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 801889c:	4330      	orrs	r0, r6
 801889e:	2807      	cmp	r0, #7
 80188a0:	d811      	bhi.n	80188c6 <_SetOrg+0x5a>
 80188a2:	e8df f000 	tbb	[pc, r0]
 80188a6:	1b18      	.short	0x1b18
 80188a8:	3f3a2d24 	.word	0x3f3a2d24
 80188ac:	0448      	.short	0x0448
 80188ae:	69a8      	ldr	r0, [r5, #24]
 80188b0:	692a      	ldr	r2, [r5, #16]
 80188b2:	6969      	ldr	r1, [r5, #20]
 80188b4:	68eb      	ldr	r3, [r5, #12]
 80188b6:	1a82      	subs	r2, r0, r2
 80188b8:	1acb      	subs	r3, r1, r3
 80188ba:	ebc9 0202 	rsb	r2, r9, r2
 80188be:	ebc8 0303 	rsb	r3, r8, r3
 80188c2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80188c6:	69a0      	ldr	r0, [r4, #24]
 80188c8:	2103      	movs	r1, #3
 80188ca:	466a      	mov	r2, sp
 80188cc:	f7f2 fe5a 	bl	800b584 <LCD_X_DisplayDriver>
 80188d0:	b003      	add	sp, #12
 80188d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188d6:	e88d 0300 	stmia.w	sp, {r8, r9}
 80188da:	e7f4      	b.n	80188c6 <_SetOrg+0x5a>
 80188dc:	696a      	ldr	r2, [r5, #20]
 80188de:	68eb      	ldr	r3, [r5, #12]
 80188e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80188e4:	1ad3      	subs	r3, r2, r3
 80188e6:	ebc8 0303 	rsb	r3, r8, r3
 80188ea:	9300      	str	r3, [sp, #0]
 80188ec:	e7eb      	b.n	80188c6 <_SetOrg+0x5a>
 80188ee:	69aa      	ldr	r2, [r5, #24]
 80188f0:	692b      	ldr	r3, [r5, #16]
 80188f2:	f8cd 8000 	str.w	r8, [sp]
 80188f6:	1ad3      	subs	r3, r2, r3
 80188f8:	ebc9 0303 	rsb	r3, r9, r3
 80188fc:	9301      	str	r3, [sp, #4]
 80188fe:	e7e2      	b.n	80188c6 <_SetOrg+0x5a>
 8018900:	6968      	ldr	r0, [r5, #20]
 8018902:	68ea      	ldr	r2, [r5, #12]
 8018904:	69a9      	ldr	r1, [r5, #24]
 8018906:	692b      	ldr	r3, [r5, #16]
 8018908:	1a82      	subs	r2, r0, r2
 801890a:	1acb      	subs	r3, r1, r3
 801890c:	ebc8 0202 	rsb	r2, r8, r2
 8018910:	ebc9 0303 	rsb	r3, r9, r3
 8018914:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018918:	e7d5      	b.n	80188c6 <_SetOrg+0x5a>
 801891a:	f8cd 9000 	str.w	r9, [sp]
 801891e:	f8cd 8004 	str.w	r8, [sp, #4]
 8018922:	e7d0      	b.n	80188c6 <_SetOrg+0x5a>
 8018924:	69aa      	ldr	r2, [r5, #24]
 8018926:	692b      	ldr	r3, [r5, #16]
 8018928:	f8cd 8004 	str.w	r8, [sp, #4]
 801892c:	1ad3      	subs	r3, r2, r3
 801892e:	ebc9 0303 	rsb	r3, r9, r3
 8018932:	9300      	str	r3, [sp, #0]
 8018934:	e7c7      	b.n	80188c6 <_SetOrg+0x5a>
 8018936:	696a      	ldr	r2, [r5, #20]
 8018938:	68eb      	ldr	r3, [r5, #12]
 801893a:	f8cd 9000 	str.w	r9, [sp]
 801893e:	1ad3      	subs	r3, r2, r3
 8018940:	ebc8 0303 	rsb	r3, r8, r3
 8018944:	9301      	str	r3, [sp, #4]
 8018946:	e7be      	b.n	80188c6 <_SetOrg+0x5a>

08018948 <_FillRect>:
 8018948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801894c:	6887      	ldr	r7, [r0, #8]
 801894e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8018950:	b083      	sub	sp, #12
 8018952:	4688      	mov	r8, r1
 8018954:	4691      	mov	r9, r2
 8018956:	469c      	mov	ip, r3
 8018958:	b15c      	cbz	r4, 8018972 <_FillRect+0x2a>
 801895a:	4d4a      	ldr	r5, [pc, #296]	; (8018a84 <_FillRect+0x13c>)
 801895c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801895e:	9600      	str	r6, [sp, #0]
 8018960:	682d      	ldr	r5, [r5, #0]
 8018962:	6980      	ldr	r0, [r0, #24]
 8018964:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8018966:	682d      	ldr	r5, [r5, #0]
 8018968:	9501      	str	r5, [sp, #4]
 801896a:	47a0      	blx	r4
 801896c:	b003      	add	sp, #12
 801896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018972:	4b44      	ldr	r3, [pc, #272]	; (8018a84 <_FillRect+0x13c>)
 8018974:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	ebc1 0c0c 	rsb	ip, r1, ip
 801897e:	7c1a      	ldrb	r2, [r3, #16]
 8018980:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018982:	07d2      	lsls	r2, r2, #31
 8018984:	ebc9 0401 	rsb	r4, r9, r1
 8018988:	f10c 0601 	add.w	r6, ip, #1
 801898c:	f104 0501 	add.w	r5, r4, #1
 8018990:	d453      	bmi.n	8018a3a <_FillRect+0xf2>
 8018992:	6839      	ldr	r1, [r7, #0]
 8018994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018996:	fb0a 8009 	mla	r0, sl, r9, r8
 801899a:	2e0f      	cmp	r6, #15
 801899c:	681a      	ldr	r2, [r3, #0]
 801899e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80189a2:	d935      	bls.n	8018a10 <_FillRect+0xc8>
 80189a4:	2d00      	cmp	r5, #0
 80189a6:	d06a      	beq.n	8018a7e <_FillRect+0x136>
 80189a8:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80189ac:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80189b0:	f1c9 0b00 	rsb	fp, r9, #0
 80189b4:	fb09 0808 	mla	r8, r9, r8, r0
 80189b8:	462f      	mov	r7, r5
 80189ba:	4643      	mov	r3, r8
 80189bc:	4631      	mov	r1, r6
 80189be:	3910      	subs	r1, #16
 80189c0:	290f      	cmp	r1, #15
 80189c2:	601a      	str	r2, [r3, #0]
 80189c4:	605a      	str	r2, [r3, #4]
 80189c6:	609a      	str	r2, [r3, #8]
 80189c8:	60da      	str	r2, [r3, #12]
 80189ca:	611a      	str	r2, [r3, #16]
 80189cc:	615a      	str	r2, [r3, #20]
 80189ce:	619a      	str	r2, [r3, #24]
 80189d0:	61da      	str	r2, [r3, #28]
 80189d2:	621a      	str	r2, [r3, #32]
 80189d4:	625a      	str	r2, [r3, #36]	; 0x24
 80189d6:	629a      	str	r2, [r3, #40]	; 0x28
 80189d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80189da:	631a      	str	r2, [r3, #48]	; 0x30
 80189dc:	635a      	str	r2, [r3, #52]	; 0x34
 80189de:	639a      	str	r2, [r3, #56]	; 0x38
 80189e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80189e2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80189e6:	d8ea      	bhi.n	80189be <_FillRect+0x76>
 80189e8:	3f01      	subs	r7, #1
 80189ea:	ebc9 0808 	rsb	r8, r9, r8
 80189ee:	d1e4      	bne.n	80189ba <_FillRect+0x72>
 80189f0:	f1ac 010f 	sub.w	r1, ip, #15
 80189f4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80189f8:	0909      	lsrs	r1, r1, #4
 80189fa:	fb0b fb04 	mul.w	fp, fp, r4
 80189fe:	3b01      	subs	r3, #1
 8018a00:	3101      	adds	r1, #1
 8018a02:	fb09 b303 	mla	r3, r9, r3, fp
 8018a06:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 8018a0a:	4418      	add	r0, r3
 8018a0c:	f006 060f 	and.w	r6, r6, #15
 8018a10:	2e00      	cmp	r6, #0
 8018a12:	d0ab      	beq.n	801896c <_FillRect+0x24>
 8018a14:	2d00      	cmp	r5, #0
 8018a16:	d0a9      	beq.n	801896c <_FillRect+0x24>
 8018a18:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8018a1c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8018a20:	fb0a 0004 	mla	r0, sl, r4, r0
 8018a24:	4601      	mov	r1, r0
 8018a26:	4633      	mov	r3, r6
 8018a28:	3b01      	subs	r3, #1
 8018a2a:	f841 2b04 	str.w	r2, [r1], #4
 8018a2e:	d1fb      	bne.n	8018a28 <_FillRect+0xe0>
 8018a30:	3d01      	subs	r5, #1
 8018a32:	ebca 0000 	rsb	r0, sl, r0
 8018a36:	d1f5      	bne.n	8018a24 <_FillRect+0xdc>
 8018a38:	e798      	b.n	801896c <_FillRect+0x24>
 8018a3a:	6903      	ldr	r3, [r0, #16]
 8018a3c:	689b      	ldr	r3, [r3, #8]
 8018a3e:	4798      	blx	r3
 8018a40:	69fb      	ldr	r3, [r7, #28]
 8018a42:	2e00      	cmp	r6, #0
 8018a44:	d092      	beq.n	801896c <_FillRect+0x24>
 8018a46:	2d00      	cmp	r5, #0
 8018a48:	d090      	beq.n	801896c <_FillRect+0x24>
 8018a4a:	fb03 8309 	mla	r3, r3, r9, r8
 8018a4e:	fb04 340a 	mla	r4, r4, sl, r3
 8018a52:	ebca 7a8a 	rsb	sl, sl, sl, lsl #30
 8018a56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8018a5a:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8018a5e:	3d01      	subs	r5, #1
 8018a60:	4663      	mov	r3, ip
 8018a62:	4632      	mov	r2, r6
 8018a64:	6839      	ldr	r1, [r7, #0]
 8018a66:	585c      	ldr	r4, [r3, r1]
 8018a68:	3a01      	subs	r2, #1
 8018a6a:	ea84 0400 	eor.w	r4, r4, r0
 8018a6e:	505c      	str	r4, [r3, r1]
 8018a70:	f103 0304 	add.w	r3, r3, #4
 8018a74:	d1f6      	bne.n	8018a64 <_FillRect+0x11c>
 8018a76:	44c4      	add	ip, r8
 8018a78:	2d00      	cmp	r5, #0
 8018a7a:	d1f0      	bne.n	8018a5e <_FillRect+0x116>
 8018a7c:	e776      	b.n	801896c <_FillRect+0x24>
 8018a7e:	4628      	mov	r0, r5
 8018a80:	e7c4      	b.n	8018a0c <_FillRect+0xc4>
 8018a82:	bf00      	nop
 8018a84:	2000027c 	.word	0x2000027c

08018a88 <_DrawHLine>:
 8018a88:	b500      	push	{lr}
 8018a8a:	b083      	sub	sp, #12
 8018a8c:	9200      	str	r2, [sp, #0]
 8018a8e:	f7ff ff5b 	bl	8018948 <_FillRect>
 8018a92:	b003      	add	sp, #12
 8018a94:	f85d fb04 	ldr.w	pc, [sp], #4

08018a98 <_DrawVLine>:
 8018a98:	b500      	push	{lr}
 8018a9a:	b083      	sub	sp, #12
 8018a9c:	9300      	str	r3, [sp, #0]
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	f7ff ff52 	bl	8018948 <_FillRect>
 8018aa4:	b003      	add	sp, #12
 8018aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8018aaa:	bf00      	nop

08018aac <_DrawBitmap>:
 8018aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab0:	b08f      	sub	sp, #60	; 0x3c
 8018ab2:	4607      	mov	r7, r0
 8018ab4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8018ab6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018aba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018abc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8018abe:	9309      	str	r3, [sp, #36]	; 0x24
 8018ac0:	3e01      	subs	r6, #1
 8018ac2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8018ac6:	2e1f      	cmp	r6, #31
 8018ac8:	d82e      	bhi.n	8018b28 <_DrawBitmap+0x7c>
 8018aca:	e8df f016 	tbh	[pc, r6, lsl #1]
 8018ace:	0030      	.short	0x0030
 8018ad0:	002d00f2 	.word	0x002d00f2
 8018ad4:	002d008f 	.word	0x002d008f
 8018ad8:	002d002d 	.word	0x002d002d
 8018adc:	002d00dd 	.word	0x002d00dd
 8018ae0:	002d002d 	.word	0x002d002d
 8018ae4:	002d002d 	.word	0x002d002d
 8018ae8:	002d002d 	.word	0x002d002d
 8018aec:	002d002d 	.word	0x002d002d
 8018af0:	002d002d 	.word	0x002d002d
 8018af4:	002d002d 	.word	0x002d002d
 8018af8:	002d002d 	.word	0x002d002d
 8018afc:	002d002d 	.word	0x002d002d
 8018b00:	002d002d 	.word	0x002d002d
 8018b04:	002d002d 	.word	0x002d002d
 8018b08:	002d002d 	.word	0x002d002d
 8018b0c:	0020      	.short	0x0020
 8018b0e:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8018b12:	2c00      	cmp	r4, #0
 8018b14:	f000 8263 	beq.w	8018fde <_DrawBitmap+0x532>
 8018b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b1a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018b1c:	69b8      	ldr	r0, [r7, #24]
 8018b1e:	9602      	str	r6, [sp, #8]
 8018b20:	e88d 0208 	stmia.w	sp, {r3, r9}
 8018b24:	462b      	mov	r3, r5
 8018b26:	47a0      	blx	r4
 8018b28:	b00f      	add	sp, #60	; 0x3c
 8018b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b2e:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
 8018b32:	b136      	cbz	r6, 8018b42 <_DrawBitmap+0x96>
 8018b34:	4bbc      	ldr	r3, [pc, #752]	; (8018e28 <_DrawBitmap+0x37c>)
 8018b36:	930a      	str	r3, [sp, #40]	; 0x28
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	7c1b      	ldrb	r3, [r3, #16]
 8018b3c:	07db      	lsls	r3, r3, #31
 8018b3e:	f140 8271 	bpl.w	8019024 <_DrawBitmap+0x578>
 8018b42:	f1b9 0f00 	cmp.w	r9, #0
 8018b46:	ddef      	ble.n	8018b28 <_DrawBitmap+0x7c>
 8018b48:	4eb7      	ldr	r6, [pc, #732]	; (8018e28 <_DrawBitmap+0x37c>)
 8018b4a:	960a      	str	r6, [sp, #40]	; 0x28
 8018b4c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8018b4e:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8018e2c <_DrawBitmap+0x380>
 8018b52:	9408      	str	r4, [sp, #32]
 8018b54:	4491      	add	r9, r2
 8018b56:	440e      	add	r6, r1
 8018b58:	4690      	mov	r8, r2
 8018b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018b5e:	960b      	str	r6, [sp, #44]	; 0x2c
 8018b60:	4662      	mov	r2, ip
 8018b62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018b64:	f8d4 9000 	ldr.w	r9, [r4]
 8018b68:	680b      	ldr	r3, [r1, #0]
 8018b6a:	6866      	ldr	r6, [r4, #4]
 8018b6c:	7c1b      	ldrb	r3, [r3, #16]
 8018b6e:	f003 0303 	and.w	r3, r3, #3
 8018b72:	2b02      	cmp	r3, #2
 8018b74:	f000 820e 	beq.w	8018f94 <_DrawBitmap+0x4e8>
 8018b78:	2b03      	cmp	r3, #3
 8018b7a:	f000 81e4 	beq.w	8018f46 <_DrawBitmap+0x49a>
 8018b7e:	2b01      	cmp	r3, #1
 8018b80:	f000 81e1 	beq.w	8018f46 <_DrawBitmap+0x49a>
 8018b84:	782b      	ldrb	r3, [r5, #0]
 8018b86:	69d0      	ldr	r0, [r2, #28]
 8018b88:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8018b8c:	6813      	ldr	r3, [r2, #0]
 8018b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b90:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018b92:	fb00 2008 	mla	r0, r0, r8, r2
 8018b96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018b9a:	4121      	asrs	r1, r4
 8018b9c:	f1c4 0308 	rsb	r3, r4, #8
 8018ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ba2:	46ac      	mov	ip, r5
 8018ba4:	e005      	b.n	8018bb2 <_DrawBitmap+0x106>
 8018ba6:	3a01      	subs	r2, #1
 8018ba8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018bac:	f840 4b04 	str.w	r4, [r0], #4
 8018bb0:	d012      	beq.n	8018bd8 <_DrawBitmap+0x12c>
 8018bb2:	f011 0f01 	tst.w	r1, #1
 8018bb6:	bf0c      	ite	eq
 8018bb8:	464c      	moveq	r4, r9
 8018bba:	4634      	movne	r4, r6
 8018bbc:	3b01      	subs	r3, #1
 8018bbe:	d1f2      	bne.n	8018ba6 <_DrawBitmap+0xfa>
 8018bc0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018bc4:	f840 4b04 	str.w	r4, [r0], #4
 8018bc8:	3a01      	subs	r2, #1
 8018bca:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8018bce:	f10c 0c01 	add.w	ip, ip, #1
 8018bd2:	f04f 0308 	mov.w	r3, #8
 8018bd6:	d1ec      	bne.n	8018bb2 <_DrawBitmap+0x106>
 8018bd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018bda:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018bdc:	f108 0801 	add.w	r8, r8, #1
 8018be0:	4588      	cmp	r8, r1
 8018be2:	4435      	add	r5, r6
 8018be4:	d0a0      	beq.n	8018b28 <_DrawBitmap+0x7c>
 8018be6:	68ba      	ldr	r2, [r7, #8]
 8018be8:	9c08      	ldr	r4, [sp, #32]
 8018bea:	e7ba      	b.n	8018b62 <_DrawBitmap+0xb6>
 8018bec:	f1b9 0f00 	cmp.w	r9, #0
 8018bf0:	dd9a      	ble.n	8018b28 <_DrawBitmap+0x7c>
 8018bf2:	4b8d      	ldr	r3, [pc, #564]	; (8018e28 <_DrawBitmap+0x37c>)
 8018bf4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	9308      	str	r3, [sp, #32]
 8018bfc:	4488      	add	r8, r1
 8018bfe:	4491      	add	r9, r2
 8018c00:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018c04:	27f0      	movs	r7, #240	; 0xf0
 8018c06:	b3bc      	cbz	r4, 8018c78 <_DrawBitmap+0x1cc>
 8018c08:	9e08      	ldr	r6, [sp, #32]
 8018c0a:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8018c0e:	7c30      	ldrb	r0, [r6, #16]
 8018c10:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8018c14:	f8dc 3000 	ldr.w	r3, [ip]
 8018c18:	782e      	ldrb	r6, [r5, #0]
 8018c1a:	fb01 8a02 	mla	sl, r1, r2, r8
 8018c1e:	f010 0003 	ands.w	r0, r0, #3
 8018c22:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8018c26:	f000 80db 	beq.w	8018de0 <_DrawBitmap+0x334>
 8018c2a:	2802      	cmp	r0, #2
 8018c2c:	d124      	bne.n	8018c78 <_DrawBitmap+0x1cc>
 8018c2e:	f10a 0a04 	add.w	sl, sl, #4
 8018c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c36:	46ab      	mov	fp, r5
 8018c38:	e001      	b.n	8018c3e <_DrawBitmap+0x192>
 8018c3a:	3801      	subs	r0, #1
 8018c3c:	d01c      	beq.n	8018c78 <_DrawBitmap+0x1cc>
 8018c3e:	f1c3 0101 	rsb	r1, r3, #1
 8018c42:	0089      	lsls	r1, r1, #2
 8018c44:	f1c1 0804 	rsb	r8, r1, #4
 8018c48:	fa47 f808 	asr.w	r8, r7, r8
 8018c4c:	ea08 0806 	and.w	r8, r8, r6
 8018c50:	fa38 f101 	lsrs.w	r1, r8, r1
 8018c54:	bf1c      	itt	ne
 8018c56:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 8018c5a:	f84a 1c04 	strne.w	r1, [sl, #-4]
 8018c5e:	3301      	adds	r3, #1
 8018c60:	2b02      	cmp	r3, #2
 8018c62:	f10a 0a04 	add.w	sl, sl, #4
 8018c66:	d1e8      	bne.n	8018c3a <_DrawBitmap+0x18e>
 8018c68:	3801      	subs	r0, #1
 8018c6a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018c6e:	f04f 0300 	mov.w	r3, #0
 8018c72:	f10b 0b01 	add.w	fp, fp, #1
 8018c76:	d1e2      	bne.n	8018c3e <_DrawBitmap+0x192>
 8018c78:	3201      	adds	r2, #1
 8018c7a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018c7c:	454a      	cmp	r2, r9
 8018c7e:	4435      	add	r5, r6
 8018c80:	d1c1      	bne.n	8018c06 <_DrawBitmap+0x15a>
 8018c82:	b00f      	add	sp, #60	; 0x3c
 8018c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c88:	f8dc 603c 	ldr.w	r6, [ip, #60]	; 0x3c
 8018c8c:	2e00      	cmp	r6, #0
 8018c8e:	d05f      	beq.n	8018d50 <_DrawBitmap+0x2a4>
 8018c90:	4b65      	ldr	r3, [pc, #404]	; (8018e28 <_DrawBitmap+0x37c>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	7c1b      	ldrb	r3, [r3, #16]
 8018c96:	079b      	lsls	r3, r3, #30
 8018c98:	d45a      	bmi.n	8018d50 <_DrawBitmap+0x2a4>
 8018c9a:	2c00      	cmp	r4, #0
 8018c9c:	d058      	beq.n	8018d50 <_DrawBitmap+0x2a4>
 8018c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ca0:	69b8      	ldr	r0, [r7, #24]
 8018ca2:	9403      	str	r4, [sp, #12]
 8018ca4:	e88d 0208 	stmia.w	sp, {r3, r9}
 8018ca8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018caa:	9302      	str	r3, [sp, #8]
 8018cac:	462b      	mov	r3, r5
 8018cae:	47b0      	blx	r6
 8018cb0:	e73a      	b.n	8018b28 <_DrawBitmap+0x7c>
 8018cb2:	f1b9 0f00 	cmp.w	r9, #0
 8018cb6:	f77f af37 	ble.w	8018b28 <_DrawBitmap+0x7c>
 8018cba:	4b5b      	ldr	r3, [pc, #364]	; (8018e28 <_DrawBitmap+0x37c>)
 8018cbc:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	9308      	str	r3, [sp, #32]
 8018cc4:	4488      	add	r8, r1
 8018cc6:	4491      	add	r9, r2
 8018cc8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018ccc:	27c0      	movs	r7, #192	; 0xc0
 8018cce:	b3bc      	cbz	r4, 8018d40 <_DrawBitmap+0x294>
 8018cd0:	9e08      	ldr	r6, [sp, #32]
 8018cd2:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8018cd6:	7c30      	ldrb	r0, [r6, #16]
 8018cd8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8018cdc:	f8dc 3000 	ldr.w	r3, [ip]
 8018ce0:	782e      	ldrb	r6, [r5, #0]
 8018ce2:	fb01 8a02 	mla	sl, r1, r2, r8
 8018ce6:	f010 0003 	ands.w	r0, r0, #3
 8018cea:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8018cee:	f000 8096 	beq.w	8018e1e <_DrawBitmap+0x372>
 8018cf2:	2802      	cmp	r0, #2
 8018cf4:	d124      	bne.n	8018d40 <_DrawBitmap+0x294>
 8018cf6:	f10a 0a04 	add.w	sl, sl, #4
 8018cfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cfe:	46ab      	mov	fp, r5
 8018d00:	e001      	b.n	8018d06 <_DrawBitmap+0x25a>
 8018d02:	3801      	subs	r0, #1
 8018d04:	d01c      	beq.n	8018d40 <_DrawBitmap+0x294>
 8018d06:	f1c3 0103 	rsb	r1, r3, #3
 8018d0a:	0049      	lsls	r1, r1, #1
 8018d0c:	f1c1 0806 	rsb	r8, r1, #6
 8018d10:	fa47 f808 	asr.w	r8, r7, r8
 8018d14:	ea08 0806 	and.w	r8, r8, r6
 8018d18:	fa38 f101 	lsrs.w	r1, r8, r1
 8018d1c:	bf1c      	itt	ne
 8018d1e:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 8018d22:	f84a 1c04 	strne.w	r1, [sl, #-4]
 8018d26:	3301      	adds	r3, #1
 8018d28:	2b04      	cmp	r3, #4
 8018d2a:	f10a 0a04 	add.w	sl, sl, #4
 8018d2e:	d1e8      	bne.n	8018d02 <_DrawBitmap+0x256>
 8018d30:	3801      	subs	r0, #1
 8018d32:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018d36:	f04f 0300 	mov.w	r3, #0
 8018d3a:	f10b 0b01 	add.w	fp, fp, #1
 8018d3e:	d1e2      	bne.n	8018d06 <_DrawBitmap+0x25a>
 8018d40:	3201      	adds	r2, #1
 8018d42:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018d44:	454a      	cmp	r2, r9
 8018d46:	4435      	add	r5, r6
 8018d48:	d1c1      	bne.n	8018cce <_DrawBitmap+0x222>
 8018d4a:	b00f      	add	sp, #60	; 0x3c
 8018d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d50:	f1b9 0f00 	cmp.w	r9, #0
 8018d54:	f77f aee8 	ble.w	8018b28 <_DrawBitmap+0x7c>
 8018d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d5a:	4f33      	ldr	r7, [pc, #204]	; (8018e28 <_DrawBitmap+0x37c>)
 8018d5c:	f1a3 0608 	sub.w	r6, r3, #8
 8018d60:	08f3      	lsrs	r3, r6, #3
 8018d62:	1c58      	adds	r0, r3, #1
 8018d64:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
 8018d68:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8018d6c:	683f      	ldr	r7, [r7, #0]
 8018d6e:	960c      	str	r6, [sp, #48]	; 0x30
 8018d70:	f108 0808 	add.w	r8, r8, #8
 8018d74:	00c6      	lsls	r6, r0, #3
 8018d76:	0140      	lsls	r0, r0, #5
 8018d78:	9708      	str	r7, [sp, #32]
 8018d7a:	eb09 0b02 	add.w	fp, r9, r2
 8018d7e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8018d82:	960b      	str	r6, [sp, #44]	; 0x2c
 8018d84:	900a      	str	r0, [sp, #40]	; 0x28
 8018d86:	468a      	mov	sl, r1
 8018d88:	b314      	cbz	r4, 8018dd0 <_DrawBitmap+0x324>
 8018d8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018d8e:	f8dc 701c 	ldr.w	r7, [ip, #28]
 8018d92:	f898 1010 	ldrb.w	r1, [r8, #16]
 8018d96:	f8dc 3000 	ldr.w	r3, [ip]
 8018d9a:	fb07 a702 	mla	r7, r7, r2, sl
 8018d9e:	f011 0103 	ands.w	r1, r1, #3
 8018da2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018da6:	d05d      	beq.n	8018e64 <_DrawBitmap+0x3b8>
 8018da8:	2902      	cmp	r1, #2
 8018daa:	d111      	bne.n	8018dd0 <_DrawBitmap+0x324>
 8018dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018dae:	2900      	cmp	r1, #0
 8018db0:	dd0e      	ble.n	8018dd0 <_DrawBitmap+0x324>
 8018db2:	4608      	mov	r0, r1
 8018db4:	3704      	adds	r7, #4
 8018db6:	462b      	mov	r3, r5
 8018db8:	4428      	add	r0, r5
 8018dba:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018dbe:	b119      	cbz	r1, 8018dc8 <_DrawBitmap+0x31c>
 8018dc0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8018dc4:	f847 1c04 	str.w	r1, [r7, #-4]
 8018dc8:	4298      	cmp	r0, r3
 8018dca:	f107 0704 	add.w	r7, r7, #4
 8018dce:	d1f4      	bne.n	8018dba <_DrawBitmap+0x30e>
 8018dd0:	3201      	adds	r2, #1
 8018dd2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018dd4:	455a      	cmp	r2, fp
 8018dd6:	4435      	add	r5, r6
 8018dd8:	d1d6      	bne.n	8018d88 <_DrawBitmap+0x2dc>
 8018dda:	b00f      	add	sp, #60	; 0x3c
 8018ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018de0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018de4:	46ab      	mov	fp, r5
 8018de6:	e002      	b.n	8018dee <_DrawBitmap+0x342>
 8018de8:	3801      	subs	r0, #1
 8018dea:	f43f af45 	beq.w	8018c78 <_DrawBitmap+0x1cc>
 8018dee:	f1c3 0101 	rsb	r1, r3, #1
 8018df2:	0089      	lsls	r1, r1, #2
 8018df4:	f1c1 0804 	rsb	r8, r1, #4
 8018df8:	fa47 f808 	asr.w	r8, r7, r8
 8018dfc:	ea08 0806 	and.w	r8, r8, r6
 8018e00:	fa28 f101 	lsr.w	r1, r8, r1
 8018e04:	3301      	adds	r3, #1
 8018e06:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8018e0a:	f84a 1b04 	str.w	r1, [sl], #4
 8018e0e:	2b02      	cmp	r3, #2
 8018e10:	d1ea      	bne.n	8018de8 <_DrawBitmap+0x33c>
 8018e12:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018e16:	2300      	movs	r3, #0
 8018e18:	f10b 0b01 	add.w	fp, fp, #1
 8018e1c:	e7e4      	b.n	8018de8 <_DrawBitmap+0x33c>
 8018e1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e22:	46ab      	mov	fp, r5
 8018e24:	e006      	b.n	8018e34 <_DrawBitmap+0x388>
 8018e26:	bf00      	nop
 8018e28:	2000027c 	.word	0x2000027c
 8018e2c:	08029b24 	.word	0x08029b24
 8018e30:	3801      	subs	r0, #1
 8018e32:	d085      	beq.n	8018d40 <_DrawBitmap+0x294>
 8018e34:	f1c3 0103 	rsb	r1, r3, #3
 8018e38:	0049      	lsls	r1, r1, #1
 8018e3a:	f1c1 0806 	rsb	r8, r1, #6
 8018e3e:	fa47 f808 	asr.w	r8, r7, r8
 8018e42:	ea08 0806 	and.w	r8, r8, r6
 8018e46:	fa28 f101 	lsr.w	r1, r8, r1
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8018e50:	f84a 1b04 	str.w	r1, [sl], #4
 8018e54:	2b04      	cmp	r3, #4
 8018e56:	d1eb      	bne.n	8018e30 <_DrawBitmap+0x384>
 8018e58:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f10b 0b01 	add.w	fp, fp, #1
 8018e62:	e7e5      	b.n	8018e30 <_DrawBitmap+0x384>
 8018e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e66:	2b07      	cmp	r3, #7
 8018e68:	f340 80d9 	ble.w	801901e <_DrawBitmap+0x572>
 8018e6c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8018e6e:	462b      	mov	r3, r5
 8018e70:	442e      	add	r6, r5
 8018e72:	4639      	mov	r1, r7
 8018e74:	7818      	ldrb	r0, [r3, #0]
 8018e76:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e7a:	6008      	str	r0, [r1, #0]
 8018e7c:	7858      	ldrb	r0, [r3, #1]
 8018e7e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e82:	6048      	str	r0, [r1, #4]
 8018e84:	7898      	ldrb	r0, [r3, #2]
 8018e86:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e8a:	6088      	str	r0, [r1, #8]
 8018e8c:	78d8      	ldrb	r0, [r3, #3]
 8018e8e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e92:	60c8      	str	r0, [r1, #12]
 8018e94:	7918      	ldrb	r0, [r3, #4]
 8018e96:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018e9a:	6108      	str	r0, [r1, #16]
 8018e9c:	7958      	ldrb	r0, [r3, #5]
 8018e9e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018ea2:	6148      	str	r0, [r1, #20]
 8018ea4:	7998      	ldrb	r0, [r3, #6]
 8018ea6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018eaa:	6188      	str	r0, [r1, #24]
 8018eac:	79d8      	ldrb	r0, [r3, #7]
 8018eae:	3308      	adds	r3, #8
 8018eb0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018eb4:	61c8      	str	r0, [r1, #28]
 8018eb6:	42b3      	cmp	r3, r6
 8018eb8:	f101 0120 	add.w	r1, r1, #32
 8018ebc:	d1da      	bne.n	8018e74 <_DrawBitmap+0x3c8>
 8018ebe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018ec0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8018ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018ec6:	4437      	add	r7, r6
 8018ec8:	44a9      	add	r9, r5
 8018eca:	2903      	cmp	r1, #3
 8018ecc:	dd28      	ble.n	8018f20 <_DrawBitmap+0x474>
 8018ece:	460e      	mov	r6, r1
 8018ed0:	4638      	mov	r0, r7
 8018ed2:	464b      	mov	r3, r9
 8018ed4:	9207      	str	r2, [sp, #28]
 8018ed6:	f893 8000 	ldrb.w	r8, [r3]
 8018eda:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8018ede:	6002      	str	r2, [r0, #0]
 8018ee0:	f893 8001 	ldrb.w	r8, [r3, #1]
 8018ee4:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8018ee8:	6042      	str	r2, [r0, #4]
 8018eea:	f893 8002 	ldrb.w	r8, [r3, #2]
 8018eee:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8018ef2:	6082      	str	r2, [r0, #8]
 8018ef4:	f893 8003 	ldrb.w	r8, [r3, #3]
 8018ef8:	3e04      	subs	r6, #4
 8018efa:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8018efe:	60c2      	str	r2, [r0, #12]
 8018f00:	2e03      	cmp	r6, #3
 8018f02:	f103 0304 	add.w	r3, r3, #4
 8018f06:	f100 0010 	add.w	r0, r0, #16
 8018f0a:	dce4      	bgt.n	8018ed6 <_DrawBitmap+0x42a>
 8018f0c:	3904      	subs	r1, #4
 8018f0e:	0888      	lsrs	r0, r1, #2
 8018f10:	1c43      	adds	r3, r0, #1
 8018f12:	9a07      	ldr	r2, [sp, #28]
 8018f14:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
 8018f18:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8018f1c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 8018f20:	2900      	cmp	r1, #0
 8018f22:	f43f af55 	beq.w	8018dd0 <_DrawBitmap+0x324>
 8018f26:	4449      	add	r1, r9
 8018f28:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018f2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018f30:	f847 3b04 	str.w	r3, [r7], #4
 8018f34:	4589      	cmp	r9, r1
 8018f36:	d1f7      	bne.n	8018f28 <_DrawBitmap+0x47c>
 8018f38:	3201      	adds	r2, #1
 8018f3a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018f3c:	455a      	cmp	r2, fp
 8018f3e:	4435      	add	r5, r6
 8018f40:	f47f af22 	bne.w	8018d88 <_DrawBitmap+0x2dc>
 8018f44:	e749      	b.n	8018dda <_DrawBitmap+0x32e>
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	689b      	ldr	r3, [r3, #8]
 8018f4a:	4798      	blx	r3
 8018f4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018f4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018f52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018f54:	44b1      	add	r9, r6
 8018f56:	4629      	mov	r1, r5
 8018f58:	4632      	mov	r2, r6
 8018f5a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8018f5e:	780e      	ldrb	r6, [r1, #0]
 8018f60:	fa4c f403 	asr.w	r4, ip, r3
 8018f64:	4226      	tst	r6, r4
 8018f66:	f103 0301 	add.w	r3, r3, #1
 8018f6a:	d00a      	beq.n	8018f82 <_DrawBitmap+0x4d6>
 8018f6c:	68bc      	ldr	r4, [r7, #8]
 8018f6e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8018f72:	6826      	ldr	r6, [r4, #0]
 8018f74:	fb0a 2a08 	mla	sl, sl, r8, r2
 8018f78:	f856 402a 	ldr.w	r4, [r6, sl, lsl #2]
 8018f7c:	4044      	eors	r4, r0
 8018f7e:	f846 402a 	str.w	r4, [r6, sl, lsl #2]
 8018f82:	2b08      	cmp	r3, #8
 8018f84:	f102 0201 	add.w	r2, r2, #1
 8018f88:	bf04      	itt	eq
 8018f8a:	3101      	addeq	r1, #1
 8018f8c:	2300      	moveq	r3, #0
 8018f8e:	454a      	cmp	r2, r9
 8018f90:	d1e5      	bne.n	8018f5e <_DrawBitmap+0x4b2>
 8018f92:	e621      	b.n	8018bd8 <_DrawBitmap+0x12c>
 8018f94:	6813      	ldr	r3, [r2, #0]
 8018f96:	69d0      	ldr	r0, [r2, #28]
 8018f98:	7829      	ldrb	r1, [r5, #0]
 8018f9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018f9e:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8018fa2:	fb00 2008 	mla	r0, r0, r8, r2
 8018fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018faa:	4121      	asrs	r1, r4
 8018fac:	f1c4 0308 	rsb	r3, r4, #8
 8018fb0:	3004      	adds	r0, #4
 8018fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fb4:	462c      	mov	r4, r5
 8018fb6:	e005      	b.n	8018fc4 <_DrawBitmap+0x518>
 8018fb8:	0849      	lsrs	r1, r1, #1
 8018fba:	3a01      	subs	r2, #1
 8018fbc:	f100 0004 	add.w	r0, r0, #4
 8018fc0:	f43f ae0a 	beq.w	8018bd8 <_DrawBitmap+0x12c>
 8018fc4:	f011 0f01 	tst.w	r1, #1
 8018fc8:	bf18      	it	ne
 8018fca:	f840 6c04 	strne.w	r6, [r0, #-4]
 8018fce:	3b01      	subs	r3, #1
 8018fd0:	d1f2      	bne.n	8018fb8 <_DrawBitmap+0x50c>
 8018fd2:	7863      	ldrb	r3, [r4, #1]
 8018fd4:	3401      	adds	r4, #1
 8018fd6:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8018fda:	2308      	movs	r3, #8
 8018fdc:	e7ed      	b.n	8018fba <_DrawBitmap+0x50e>
 8018fde:	f1b9 0f00 	cmp.w	r9, #0
 8018fe2:	f77f ada1 	ble.w	8018b28 <_DrawBitmap+0x7c>
 8018fe6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8018fea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8018fee:	4491      	add	r9, r2
 8018ff0:	4663      	mov	r3, ip
 8018ff2:	69d8      	ldr	r0, [r3, #28]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	fb00 1c02 	mla	ip, r0, r2, r1
 8018ffa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8018ffe:	1f28      	subs	r0, r5, #4
 8019000:	4643      	mov	r3, r8
 8019002:	f850 6f04 	ldr.w	r6, [r0, #4]!
 8019006:	1b44      	subs	r4, r0, r5
 8019008:	3b01      	subs	r3, #1
 801900a:	f844 600c 	str.w	r6, [r4, ip]
 801900e:	d1f8      	bne.n	8019002 <_DrawBitmap+0x556>
 8019010:	3201      	adds	r2, #1
 8019012:	454a      	cmp	r2, r9
 8019014:	4455      	add	r5, sl
 8019016:	f43f ad87 	beq.w	8018b28 <_DrawBitmap+0x7c>
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	e7e9      	b.n	8018ff2 <_DrawBitmap+0x546>
 801901e:	4619      	mov	r1, r3
 8019020:	46a9      	mov	r9, r5
 8019022:	e752      	b.n	8018eca <_DrawBitmap+0x41e>
 8019024:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019026:	69b8      	ldr	r0, [r7, #24]
 8019028:	9300      	str	r3, [sp, #0]
 801902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801902c:	9301      	str	r3, [sp, #4]
 801902e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019030:	9303      	str	r3, [sp, #12]
 8019032:	f8cd 9008 	str.w	r9, [sp, #8]
 8019036:	9404      	str	r4, [sp, #16]
 8019038:	462b      	mov	r3, r5
 801903a:	47b0      	blx	r6
 801903c:	e574      	b.n	8018b28 <_DrawBitmap+0x7c>
 801903e:	bf00      	nop

08019040 <_GetPos>:
 8019040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019042:	6884      	ldr	r4, [r0, #8]
 8019044:	4605      	mov	r5, r0
 8019046:	460f      	mov	r7, r1
 8019048:	4616      	mov	r6, r2
 801904a:	b124      	cbz	r4, 8019056 <_GetPos+0x16>
 801904c:	6a23      	ldr	r3, [r4, #32]
 801904e:	603b      	str	r3, [r7, #0]
 8019050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019052:	6033      	str	r3, [r6, #0]
 8019054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019056:	204c      	movs	r0, #76	; 0x4c
 8019058:	f004 fbb0 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801905c:	4621      	mov	r1, r4
 801905e:	60a8      	str	r0, [r5, #8]
 8019060:	224c      	movs	r2, #76	; 0x4c
 8019062:	f001 f9e5 	bl	801a430 <GUI__memset>
 8019066:	68ac      	ldr	r4, [r5, #8]
 8019068:	2c00      	cmp	r4, #0
 801906a:	d1ef      	bne.n	801904c <_GetPos+0xc>
 801906c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801906e:	bf00      	nop

08019070 <_SetDevFunc>:
 8019070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019072:	6884      	ldr	r4, [r0, #8]
 8019074:	4605      	mov	r5, r0
 8019076:	460e      	mov	r6, r1
 8019078:	4617      	mov	r7, r2
 801907a:	b32c      	cbz	r4, 80190c8 <_SetDevFunc+0x58>
 801907c:	1ef1      	subs	r1, r6, #3
 801907e:	2925      	cmp	r1, #37	; 0x25
 8019080:	d815      	bhi.n	80190ae <_SetDevFunc+0x3e>
 8019082:	e8df f001 	tbb	[pc, r1]
 8019086:	1415      	.short	0x1415
 8019088:	14141414 	.word	0x14141414
 801908c:	14141414 	.word	0x14141414
 8019090:	14141414 	.word	0x14141414
 8019094:	14141414 	.word	0x14141414
 8019098:	14141414 	.word	0x14141414
 801909c:	14141417 	.word	0x14141417
 80190a0:	19141414 	.word	0x19141414
 80190a4:	141d141b 	.word	0x141d141b
 80190a8:	1314141f 	.word	0x1314141f
 80190ac:	64a7      	str	r7, [r4, #72]	; 0x48
 80190ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b0:	6467      	str	r7, [r4, #68]	; 0x44
 80190b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b4:	6327      	str	r7, [r4, #48]	; 0x30
 80190b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190b8:	63a7      	str	r7, [r4, #56]	; 0x38
 80190ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190bc:	6367      	str	r7, [r4, #52]	; 0x34
 80190be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190c0:	6427      	str	r7, [r4, #64]	; 0x40
 80190c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190c4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80190c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190c8:	204c      	movs	r0, #76	; 0x4c
 80190ca:	f004 fb77 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 80190ce:	4621      	mov	r1, r4
 80190d0:	60a8      	str	r0, [r5, #8]
 80190d2:	224c      	movs	r2, #76	; 0x4c
 80190d4:	f001 f9ac 	bl	801a430 <GUI__memset>
 80190d8:	68ac      	ldr	r4, [r5, #8]
 80190da:	2c00      	cmp	r4, #0
 80190dc:	d1ce      	bne.n	801907c <_SetDevFunc+0xc>
 80190de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080190e0 <_Init>:
 80190e0:	b538      	push	{r3, r4, r5, lr}
 80190e2:	6884      	ldr	r4, [r0, #8]
 80190e4:	4605      	mov	r5, r0
 80190e6:	b14c      	cbz	r4, 80190fc <_Init+0x1c>
 80190e8:	69a8      	ldr	r0, [r5, #24]
 80190ea:	2101      	movs	r1, #1
 80190ec:	2200      	movs	r2, #0
 80190ee:	f7f2 fa49 	bl	800b584 <LCD_X_DisplayDriver>
 80190f2:	2c00      	cmp	r4, #0
 80190f4:	bf08      	it	eq
 80190f6:	f040 0001 	orreq.w	r0, r0, #1
 80190fa:	bd38      	pop	{r3, r4, r5, pc}
 80190fc:	204c      	movs	r0, #76	; 0x4c
 80190fe:	f004 fb5d 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8019102:	4621      	mov	r1, r4
 8019104:	60a8      	str	r0, [r5, #8]
 8019106:	224c      	movs	r2, #76	; 0x4c
 8019108:	f001 f992 	bl	801a430 <GUI__memset>
 801910c:	68ac      	ldr	r4, [r5, #8]
 801910e:	e7eb      	b.n	80190e8 <_Init+0x8>

08019110 <_ShowBuffer>:
 8019110:	b570      	push	{r4, r5, r6, lr}
 8019112:	6885      	ldr	r5, [r0, #8]
 8019114:	b082      	sub	sp, #8
 8019116:	2300      	movs	r3, #0
 8019118:	4604      	mov	r4, r0
 801911a:	9301      	str	r3, [sp, #4]
 801911c:	460e      	mov	r6, r1
 801911e:	b145      	cbz	r5, 8019132 <_ShowBuffer+0x22>
 8019120:	aa02      	add	r2, sp, #8
 8019122:	69a0      	ldr	r0, [r4, #24]
 8019124:	f842 6d04 	str.w	r6, [r2, #-4]!
 8019128:	210e      	movs	r1, #14
 801912a:	f7f2 fa2b 	bl	800b584 <LCD_X_DisplayDriver>
 801912e:	b002      	add	sp, #8
 8019130:	bd70      	pop	{r4, r5, r6, pc}
 8019132:	204c      	movs	r0, #76	; 0x4c
 8019134:	f004 fb42 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8019138:	4629      	mov	r1, r5
 801913a:	60a0      	str	r0, [r4, #8]
 801913c:	224c      	movs	r2, #76	; 0x4c
 801913e:	f001 f977 	bl	801a430 <GUI__memset>
 8019142:	68a3      	ldr	r3, [r4, #8]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d1eb      	bne.n	8019120 <_ShowBuffer+0x10>
 8019148:	b002      	add	sp, #8
 801914a:	bd70      	pop	{r4, r5, r6, pc}

0801914c <_SetVSize>:
 801914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914e:	6884      	ldr	r4, [r0, #8]
 8019150:	4605      	mov	r5, r0
 8019152:	460e      	mov	r6, r1
 8019154:	4617      	mov	r7, r2
 8019156:	b14c      	cbz	r4, 801916c <_SetVSize+0x20>
 8019158:	69a8      	ldr	r0, [r5, #24]
 801915a:	f000 facb 	bl	80196f4 <LCD_GetSwapXYEx>
 801915e:	6166      	str	r6, [r4, #20]
 8019160:	61a7      	str	r7, [r4, #24]
 8019162:	b908      	cbnz	r0, 8019168 <_SetVSize+0x1c>
 8019164:	61e6      	str	r6, [r4, #28]
 8019166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019168:	61e7      	str	r7, [r4, #28]
 801916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801916c:	204c      	movs	r0, #76	; 0x4c
 801916e:	f004 fb25 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8019172:	4621      	mov	r1, r4
 8019174:	60a8      	str	r0, [r5, #8]
 8019176:	224c      	movs	r2, #76	; 0x4c
 8019178:	f001 f95a 	bl	801a430 <GUI__memset>
 801917c:	68ac      	ldr	r4, [r5, #8]
 801917e:	2c00      	cmp	r4, #0
 8019180:	d1ea      	bne.n	8019158 <_SetVSize+0xc>
 8019182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019184 <_SetVis>:
 8019184:	b570      	push	{r4, r5, r6, lr}
 8019186:	6884      	ldr	r4, [r0, #8]
 8019188:	b082      	sub	sp, #8
 801918a:	2300      	movs	r3, #0
 801918c:	4605      	mov	r5, r0
 801918e:	9301      	str	r3, [sp, #4]
 8019190:	460e      	mov	r6, r1
 8019192:	b14c      	cbz	r4, 80191a8 <_SetVis+0x24>
 8019194:	aa02      	add	r2, sp, #8
 8019196:	62e6      	str	r6, [r4, #44]	; 0x2c
 8019198:	f842 6d04 	str.w	r6, [r2, #-4]!
 801919c:	69a8      	ldr	r0, [r5, #24]
 801919e:	2109      	movs	r1, #9
 80191a0:	f7f2 f9f0 	bl	800b584 <LCD_X_DisplayDriver>
 80191a4:	b002      	add	sp, #8
 80191a6:	bd70      	pop	{r4, r5, r6, pc}
 80191a8:	204c      	movs	r0, #76	; 0x4c
 80191aa:	f004 fb07 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 80191ae:	4621      	mov	r1, r4
 80191b0:	60a8      	str	r0, [r5, #8]
 80191b2:	224c      	movs	r2, #76	; 0x4c
 80191b4:	f001 f93c 	bl	801a430 <GUI__memset>
 80191b8:	68ac      	ldr	r4, [r5, #8]
 80191ba:	2c00      	cmp	r4, #0
 80191bc:	d1ea      	bne.n	8019194 <_SetVis+0x10>
 80191be:	b002      	add	sp, #8
 80191c0:	bd70      	pop	{r4, r5, r6, pc}
 80191c2:	bf00      	nop

080191c4 <_SetAlpha>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	6884      	ldr	r4, [r0, #8]
 80191c8:	b082      	sub	sp, #8
 80191ca:	2300      	movs	r3, #0
 80191cc:	4605      	mov	r5, r0
 80191ce:	9301      	str	r3, [sp, #4]
 80191d0:	460e      	mov	r6, r1
 80191d2:	b14c      	cbz	r4, 80191e8 <_SetAlpha+0x24>
 80191d4:	aa02      	add	r2, sp, #8
 80191d6:	62a6      	str	r6, [r4, #40]	; 0x28
 80191d8:	f842 6d04 	str.w	r6, [r2, #-4]!
 80191dc:	69a8      	ldr	r0, [r5, #24]
 80191de:	210a      	movs	r1, #10
 80191e0:	f7f2 f9d0 	bl	800b584 <LCD_X_DisplayDriver>
 80191e4:	b002      	add	sp, #8
 80191e6:	bd70      	pop	{r4, r5, r6, pc}
 80191e8:	204c      	movs	r0, #76	; 0x4c
 80191ea:	f004 fae7 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 80191ee:	4621      	mov	r1, r4
 80191f0:	60a8      	str	r0, [r5, #8]
 80191f2:	224c      	movs	r2, #76	; 0x4c
 80191f4:	f001 f91c 	bl	801a430 <GUI__memset>
 80191f8:	68ac      	ldr	r4, [r5, #8]
 80191fa:	2c00      	cmp	r4, #0
 80191fc:	d1ea      	bne.n	80191d4 <_SetAlpha+0x10>
 80191fe:	b002      	add	sp, #8
 8019200:	bd70      	pop	{r4, r5, r6, pc}
 8019202:	bf00      	nop

08019204 <_SetVRAMAddr>:
 8019204:	b570      	push	{r4, r5, r6, lr}
 8019206:	6884      	ldr	r4, [r0, #8]
 8019208:	b082      	sub	sp, #8
 801920a:	2300      	movs	r3, #0
 801920c:	4606      	mov	r6, r0
 801920e:	9301      	str	r3, [sp, #4]
 8019210:	460d      	mov	r5, r1
 8019212:	b154      	cbz	r4, 801922a <_SetVRAMAddr+0x26>
 8019214:	aa02      	add	r2, sp, #8
 8019216:	6025      	str	r5, [r4, #0]
 8019218:	6065      	str	r5, [r4, #4]
 801921a:	f842 5d04 	str.w	r5, [r2, #-4]!
 801921e:	69b0      	ldr	r0, [r6, #24]
 8019220:	2102      	movs	r1, #2
 8019222:	f7f2 f9af 	bl	800b584 <LCD_X_DisplayDriver>
 8019226:	b002      	add	sp, #8
 8019228:	bd70      	pop	{r4, r5, r6, pc}
 801922a:	204c      	movs	r0, #76	; 0x4c
 801922c:	f004 fac6 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8019230:	4621      	mov	r1, r4
 8019232:	60b0      	str	r0, [r6, #8]
 8019234:	224c      	movs	r2, #76	; 0x4c
 8019236:	f001 f8fb 	bl	801a430 <GUI__memset>
 801923a:	68b4      	ldr	r4, [r6, #8]
 801923c:	2c00      	cmp	r4, #0
 801923e:	d1e9      	bne.n	8019214 <_SetVRAMAddr+0x10>
 8019240:	b002      	add	sp, #8
 8019242:	bd70      	pop	{r4, r5, r6, pc}

08019244 <_SetSize>:
 8019244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019246:	6884      	ldr	r4, [r0, #8]
 8019248:	b083      	sub	sp, #12
 801924a:	2300      	movs	r3, #0
 801924c:	4605      	mov	r5, r0
 801924e:	9300      	str	r3, [sp, #0]
 8019250:	460f      	mov	r7, r1
 8019252:	4616      	mov	r6, r2
 8019254:	9301      	str	r3, [sp, #4]
 8019256:	b1ac      	cbz	r4, 8019284 <_SetSize+0x40>
 8019258:	69e3      	ldr	r3, [r4, #28]
 801925a:	b153      	cbz	r3, 8019272 <_SetSize+0x2e>
 801925c:	60e7      	str	r7, [r4, #12]
 801925e:	6126      	str	r6, [r4, #16]
 8019260:	69a8      	ldr	r0, [r5, #24]
 8019262:	9700      	str	r7, [sp, #0]
 8019264:	2107      	movs	r1, #7
 8019266:	466a      	mov	r2, sp
 8019268:	9601      	str	r6, [sp, #4]
 801926a:	f7f2 f98b 	bl	800b584 <LCD_X_DisplayDriver>
 801926e:	b003      	add	sp, #12
 8019270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019272:	69a8      	ldr	r0, [r5, #24]
 8019274:	f000 fa3e 	bl	80196f4 <LCD_GetSwapXYEx>
 8019278:	2800      	cmp	r0, #0
 801927a:	bf0c      	ite	eq
 801927c:	4638      	moveq	r0, r7
 801927e:	4630      	movne	r0, r6
 8019280:	61e0      	str	r0, [r4, #28]
 8019282:	e7eb      	b.n	801925c <_SetSize+0x18>
 8019284:	204c      	movs	r0, #76	; 0x4c
 8019286:	f004 fa99 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801928a:	4621      	mov	r1, r4
 801928c:	60a8      	str	r0, [r5, #8]
 801928e:	224c      	movs	r2, #76	; 0x4c
 8019290:	f001 f8ce 	bl	801a430 <GUI__memset>
 8019294:	68ac      	ldr	r4, [r5, #8]
 8019296:	2c00      	cmp	r4, #0
 8019298:	d1de      	bne.n	8019258 <_SetSize+0x14>
 801929a:	b003      	add	sp, #12
 801929c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801929e:	bf00      	nop

080192a0 <_CopyBuffer>:
 80192a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192a4:	6884      	ldr	r4, [r0, #8]
 80192a6:	4605      	mov	r5, r0
 80192a8:	460f      	mov	r7, r1
 80192aa:	4616      	mov	r6, r2
 80192ac:	b314      	cbz	r4, 80192f4 <_CopyBuffer+0x54>
 80192ae:	42b7      	cmp	r7, r6
 80192b0:	d017      	beq.n	80192e2 <_CopyBuffer+0x42>
 80192b2:	68eb      	ldr	r3, [r5, #12]
 80192b4:	2108      	movs	r1, #8
 80192b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192b8:	4628      	mov	r0, r5
 80192ba:	4798      	blx	r3
 80192bc:	6922      	ldr	r2, [r4, #16]
 80192be:	6961      	ldr	r1, [r4, #20]
 80192c0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80192c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192c6:	fb01 fe02 	mul.w	lr, r1, r2
 80192ca:	fb00 f00e 	mul.w	r0, r0, lr
 80192ce:	08c2      	lsrs	r2, r0, #3
 80192d0:	fb06 c802 	mla	r8, r6, r2, ip
 80192d4:	b13b      	cbz	r3, 80192e6 <_CopyBuffer+0x46>
 80192d6:	69a8      	ldr	r0, [r5, #24]
 80192d8:	4639      	mov	r1, r7
 80192da:	4632      	mov	r2, r6
 80192dc:	4798      	blx	r3
 80192de:	f8c4 8000 	str.w	r8, [r4]
 80192e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e6:	4b0a      	ldr	r3, [pc, #40]	; (8019310 <_CopyBuffer+0x70>)
 80192e8:	fb07 c102 	mla	r1, r7, r2, ip
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	4640      	mov	r0, r8
 80192f0:	4798      	blx	r3
 80192f2:	e7f4      	b.n	80192de <_CopyBuffer+0x3e>
 80192f4:	204c      	movs	r0, #76	; 0x4c
 80192f6:	f004 fa61 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 80192fa:	4621      	mov	r1, r4
 80192fc:	60a8      	str	r0, [r5, #8]
 80192fe:	224c      	movs	r2, #76	; 0x4c
 8019300:	f001 f896 	bl	801a430 <GUI__memset>
 8019304:	68ac      	ldr	r4, [r5, #8]
 8019306:	2c00      	cmp	r4, #0
 8019308:	d1d1      	bne.n	80192ae <_CopyBuffer+0xe>
 801930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801930e:	bf00      	nop
 8019310:	20000254 	.word	0x20000254

08019314 <_SetPos>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	6884      	ldr	r4, [r0, #8]
 801931a:	b089      	sub	sp, #36	; 0x24
 801931c:	2300      	movs	r3, #0
 801931e:	4605      	mov	r5, r0
 8019320:	9302      	str	r3, [sp, #8]
 8019322:	460f      	mov	r7, r1
 8019324:	4616      	mov	r6, r2
 8019326:	9303      	str	r3, [sp, #12]
 8019328:	9304      	str	r3, [sp, #16]
 801932a:	9305      	str	r3, [sp, #20]
 801932c:	9306      	str	r3, [sp, #24]
 801932e:	9307      	str	r3, [sp, #28]
 8019330:	2c00      	cmp	r4, #0
 8019332:	d05f      	beq.n	80193f4 <_SetPos+0xe0>
 8019334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019336:	b133      	cbz	r3, 8019346 <_SetPos+0x32>
 8019338:	69a8      	ldr	r0, [r5, #24]
 801933a:	4639      	mov	r1, r7
 801933c:	4632      	mov	r2, r6
 801933e:	4798      	blx	r3
 8019340:	b009      	add	sp, #36	; 0x24
 8019342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019346:	6227      	str	r7, [r4, #32]
 8019348:	6266      	str	r6, [r4, #36]	; 0x24
 801934a:	f000 faad 	bl	80198a8 <LCD_GetXSizeDisplay>
 801934e:	4682      	mov	sl, r0
 8019350:	f000 fab0 	bl	80198b4 <LCD_GetYSizeDisplay>
 8019354:	68eb      	ldr	r3, [r5, #12]
 8019356:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801935c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8019360:	4683      	mov	fp, r0
 8019362:	2108      	movs	r1, #8
 8019364:	4628      	mov	r0, r5
 8019366:	4798      	blx	r3
 8019368:	1dc2      	adds	r2, r0, #7
 801936a:	bf48      	it	mi
 801936c:	f100 020e 	addmi.w	r2, r0, #14
 8019370:	10d2      	asrs	r2, r2, #3
 8019372:	2f00      	cmp	r7, #0
 8019374:	9206      	str	r2, [sp, #24]
 8019376:	db57      	blt.n	8019428 <_SetPos+0x114>
 8019378:	eb07 0309 	add.w	r3, r7, r9
 801937c:	459a      	cmp	sl, r3
 801937e:	9702      	str	r7, [sp, #8]
 8019380:	bfb6      	itet	lt
 8019382:	ebc7 070a 	rsblt	r7, r7, sl
 8019386:	f8cd 9010 	strge.w	r9, [sp, #16]
 801938a:	9704      	strlt	r7, [sp, #16]
 801938c:	2e00      	cmp	r6, #0
 801938e:	db3f      	blt.n	8019410 <_SetPos+0xfc>
 8019390:	eb06 0308 	add.w	r3, r6, r8
 8019394:	459b      	cmp	fp, r3
 8019396:	bfb8      	it	lt
 8019398:	ebc6 010b 	rsblt	r1, r6, fp
 801939c:	9603      	str	r6, [sp, #12]
 801939e:	bfa6      	itte	ge
 80193a0:	f8cd 8014 	strge.w	r8, [sp, #20]
 80193a4:	4641      	movge	r1, r8
 80193a6:	9105      	strlt	r1, [sp, #20]
 80193a8:	9b04      	ldr	r3, [sp, #16]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	dd10      	ble.n	80193d0 <_SetPos+0xbc>
 80193ae:	2900      	cmp	r1, #0
 80193b0:	dd0e      	ble.n	80193d0 <_SetPos+0xbc>
 80193b2:	9b02      	ldr	r3, [sp, #8]
 80193b4:	459a      	cmp	sl, r3
 80193b6:	dd0b      	ble.n	80193d0 <_SetPos+0xbc>
 80193b8:	45b3      	cmp	fp, r6
 80193ba:	dd09      	ble.n	80193d0 <_SetPos+0xbc>
 80193bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d03c      	beq.n	801943c <_SetPos+0x128>
 80193c2:	2108      	movs	r1, #8
 80193c4:	69a8      	ldr	r0, [r5, #24]
 80193c6:	eb0d 0201 	add.w	r2, sp, r1
 80193ca:	f7f2 f8db 	bl	800b584 <LCD_X_DisplayDriver>
 80193ce:	e7b7      	b.n	8019340 <_SetPos+0x2c>
 80193d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80193d2:	2b01      	cmp	r3, #1
 80193d4:	d1b4      	bne.n	8019340 <_SetPos+0x2c>
 80193d6:	68ac      	ldr	r4, [r5, #8]
 80193d8:	2300      	movs	r3, #0
 80193da:	9301      	str	r3, [sp, #4]
 80193dc:	2c00      	cmp	r4, #0
 80193de:	d03a      	beq.n	8019456 <_SetPos+0x142>
 80193e0:	aa08      	add	r2, sp, #32
 80193e2:	2300      	movs	r3, #0
 80193e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80193e6:	69a8      	ldr	r0, [r5, #24]
 80193e8:	f842 3d1c 	str.w	r3, [r2, #-28]!
 80193ec:	2109      	movs	r1, #9
 80193ee:	f7f2 f8c9 	bl	800b584 <LCD_X_DisplayDriver>
 80193f2:	e7a5      	b.n	8019340 <_SetPos+0x2c>
 80193f4:	204c      	movs	r0, #76	; 0x4c
 80193f6:	f004 f9e1 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 80193fa:	4621      	mov	r1, r4
 80193fc:	60a8      	str	r0, [r5, #8]
 80193fe:	224c      	movs	r2, #76	; 0x4c
 8019400:	f001 f816 	bl	801a430 <GUI__memset>
 8019404:	68ac      	ldr	r4, [r5, #8]
 8019406:	2c00      	cmp	r4, #0
 8019408:	d194      	bne.n	8019334 <_SetPos+0x20>
 801940a:	b009      	add	sp, #36	; 0x24
 801940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019410:	9b07      	ldr	r3, [sp, #28]
 8019412:	fb02 f206 	mul.w	r2, r2, r6
 8019416:	eb08 0106 	add.w	r1, r8, r6
 801941a:	fb09 3312 	mls	r3, r9, r2, r3
 801941e:	2600      	movs	r6, #0
 8019420:	9105      	str	r1, [sp, #20]
 8019422:	9307      	str	r3, [sp, #28]
 8019424:	9603      	str	r6, [sp, #12]
 8019426:	e7bf      	b.n	80193a8 <_SetPos+0x94>
 8019428:	9b07      	ldr	r3, [sp, #28]
 801942a:	eb09 0007 	add.w	r0, r9, r7
 801942e:	fb02 3317 	mls	r3, r2, r7, r3
 8019432:	2100      	movs	r1, #0
 8019434:	9307      	str	r3, [sp, #28]
 8019436:	9004      	str	r0, [sp, #16]
 8019438:	9102      	str	r1, [sp, #8]
 801943a:	e7a7      	b.n	801938c <_SetPos+0x78>
 801943c:	68ac      	ldr	r4, [r5, #8]
 801943e:	9301      	str	r3, [sp, #4]
 8019440:	b1b4      	cbz	r4, 8019470 <_SetPos+0x15c>
 8019442:	aa08      	add	r2, sp, #32
 8019444:	2301      	movs	r3, #1
 8019446:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019448:	69a8      	ldr	r0, [r5, #24]
 801944a:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801944e:	2109      	movs	r1, #9
 8019450:	f7f2 f898 	bl	800b584 <LCD_X_DisplayDriver>
 8019454:	e7b5      	b.n	80193c2 <_SetPos+0xae>
 8019456:	204c      	movs	r0, #76	; 0x4c
 8019458:	f004 f9b0 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801945c:	4621      	mov	r1, r4
 801945e:	60a8      	str	r0, [r5, #8]
 8019460:	224c      	movs	r2, #76	; 0x4c
 8019462:	f000 ffe5 	bl	801a430 <GUI__memset>
 8019466:	68ac      	ldr	r4, [r5, #8]
 8019468:	2c00      	cmp	r4, #0
 801946a:	f43f af69 	beq.w	8019340 <_SetPos+0x2c>
 801946e:	e7b7      	b.n	80193e0 <_SetPos+0xcc>
 8019470:	204c      	movs	r0, #76	; 0x4c
 8019472:	f004 f9a3 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8019476:	4621      	mov	r1, r4
 8019478:	60a8      	str	r0, [r5, #8]
 801947a:	224c      	movs	r2, #76	; 0x4c
 801947c:	f000 ffd8 	bl	801a430 <GUI__memset>
 8019480:	68ac      	ldr	r4, [r5, #8]
 8019482:	2c00      	cmp	r4, #0
 8019484:	d09d      	beq.n	80193c2 <_SetPos+0xae>
 8019486:	e7dc      	b.n	8019442 <_SetPos+0x12e>

08019488 <LCD_UpdateColorIndices>:
 8019488:	b510      	push	{r4, lr}
 801948a:	4c07      	ldr	r4, [pc, #28]	; (80194a8 <LCD_UpdateColorIndices+0x20>)
 801948c:	6823      	ldr	r3, [r4, #0]
 801948e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019490:	f000 fe8c 	bl	801a1ac <LCD_Color2Index>
 8019494:	f000 feaa 	bl	801a1ec <LCD_SetColorIndex>
 8019498:	6823      	ldr	r3, [r4, #0]
 801949a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801949c:	f000 fe86 	bl	801a1ac <LCD_Color2Index>
 80194a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194a4:	f000 beae 	b.w	801a204 <LCD_SetBkColorIndex>
 80194a8:	2000027c 	.word	0x2000027c

080194ac <LCD_SetClipRectEx>:
 80194ac:	b530      	push	{r4, r5, lr}
 80194ae:	4c0a      	ldr	r4, [pc, #40]	; (80194d8 <LCD_SetClipRectEx+0x2c>)
 80194b0:	4a0a      	ldr	r2, [pc, #40]	; (80194dc <LCD_SetClipRectEx+0x30>)
 80194b2:	6823      	ldr	r3, [r4, #0]
 80194b4:	7c5b      	ldrb	r3, [r3, #17]
 80194b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80194ba:	68da      	ldr	r2, [r3, #12]
 80194bc:	b083      	sub	sp, #12
 80194be:	4605      	mov	r5, r0
 80194c0:	4669      	mov	r1, sp
 80194c2:	4618      	mov	r0, r3
 80194c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80194c6:	4790      	blx	r2
 80194c8:	6820      	ldr	r0, [r4, #0]
 80194ca:	4629      	mov	r1, r5
 80194cc:	466a      	mov	r2, sp
 80194ce:	3008      	adds	r0, #8
 80194d0:	f000 ff74 	bl	801a3bc <GUI__IntersectRects>
 80194d4:	b003      	add	sp, #12
 80194d6:	bd30      	pop	{r4, r5, pc}
 80194d8:	2000027c 	.word	0x2000027c
 80194dc:	2002cbcc 	.word	0x2002cbcc

080194e0 <LCD_SetVRAMAddrEx>:
 80194e0:	b510      	push	{r4, lr}
 80194e2:	b082      	sub	sp, #8
 80194e4:	460c      	mov	r4, r1
 80194e6:	f002 fc57 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80194ea:	9001      	str	r0, [sp, #4]
 80194ec:	b160      	cbz	r0, 8019508 <LCD_SetVRAMAddrEx+0x28>
 80194ee:	68c3      	ldr	r3, [r0, #12]
 80194f0:	2109      	movs	r1, #9
 80194f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f4:	a801      	add	r0, sp, #4
 80194f6:	4798      	blx	r3
 80194f8:	4603      	mov	r3, r0
 80194fa:	b128      	cbz	r0, 8019508 <LCD_SetVRAMAddrEx+0x28>
 80194fc:	9801      	ldr	r0, [sp, #4]
 80194fe:	4621      	mov	r1, r4
 8019500:	4798      	blx	r3
 8019502:	2000      	movs	r0, #0
 8019504:	b002      	add	sp, #8
 8019506:	bd10      	pop	{r4, pc}
 8019508:	2001      	movs	r0, #1
 801950a:	b002      	add	sp, #8
 801950c:	bd10      	pop	{r4, pc}
 801950e:	bf00      	nop

08019510 <LCD_SetVSizeEx>:
 8019510:	b530      	push	{r4, r5, lr}
 8019512:	b083      	sub	sp, #12
 8019514:	460d      	mov	r5, r1
 8019516:	4614      	mov	r4, r2
 8019518:	f002 fc3e 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801951c:	9001      	str	r0, [sp, #4]
 801951e:	b168      	cbz	r0, 801953c <LCD_SetVSizeEx+0x2c>
 8019520:	68c3      	ldr	r3, [r0, #12]
 8019522:	210a      	movs	r1, #10
 8019524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019526:	a801      	add	r0, sp, #4
 8019528:	4798      	blx	r3
 801952a:	4603      	mov	r3, r0
 801952c:	b130      	cbz	r0, 801953c <LCD_SetVSizeEx+0x2c>
 801952e:	9801      	ldr	r0, [sp, #4]
 8019530:	4629      	mov	r1, r5
 8019532:	4622      	mov	r2, r4
 8019534:	4798      	blx	r3
 8019536:	2000      	movs	r0, #0
 8019538:	b003      	add	sp, #12
 801953a:	bd30      	pop	{r4, r5, pc}
 801953c:	2001      	movs	r0, #1
 801953e:	b003      	add	sp, #12
 8019540:	bd30      	pop	{r4, r5, pc}
 8019542:	bf00      	nop

08019544 <LCD_SetSizeEx>:
 8019544:	b530      	push	{r4, r5, lr}
 8019546:	b083      	sub	sp, #12
 8019548:	460d      	mov	r5, r1
 801954a:	4614      	mov	r4, r2
 801954c:	f002 fc24 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019550:	9001      	str	r0, [sp, #4]
 8019552:	b168      	cbz	r0, 8019570 <LCD_SetSizeEx+0x2c>
 8019554:	68c3      	ldr	r3, [r0, #12]
 8019556:	210b      	movs	r1, #11
 8019558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801955a:	a801      	add	r0, sp, #4
 801955c:	4798      	blx	r3
 801955e:	4603      	mov	r3, r0
 8019560:	b130      	cbz	r0, 8019570 <LCD_SetSizeEx+0x2c>
 8019562:	9801      	ldr	r0, [sp, #4]
 8019564:	4629      	mov	r1, r5
 8019566:	4622      	mov	r2, r4
 8019568:	4798      	blx	r3
 801956a:	2000      	movs	r0, #0
 801956c:	b003      	add	sp, #12
 801956e:	bd30      	pop	{r4, r5, pc}
 8019570:	2001      	movs	r0, #1
 8019572:	b003      	add	sp, #12
 8019574:	bd30      	pop	{r4, r5, pc}
 8019576:	bf00      	nop

08019578 <LCD_SetLUTEntryEx>:
 8019578:	b530      	push	{r4, r5, lr}
 801957a:	b083      	sub	sp, #12
 801957c:	460d      	mov	r5, r1
 801957e:	4614      	mov	r4, r2
 8019580:	f002 fc0a 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019584:	9001      	str	r0, [sp, #4]
 8019586:	b168      	cbz	r0, 80195a4 <LCD_SetLUTEntryEx+0x2c>
 8019588:	68c3      	ldr	r3, [r0, #12]
 801958a:	2110      	movs	r1, #16
 801958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801958e:	a801      	add	r0, sp, #4
 8019590:	4798      	blx	r3
 8019592:	4603      	mov	r3, r0
 8019594:	b130      	cbz	r0, 80195a4 <LCD_SetLUTEntryEx+0x2c>
 8019596:	9801      	ldr	r0, [sp, #4]
 8019598:	4629      	mov	r1, r5
 801959a:	4622      	mov	r2, r4
 801959c:	4798      	blx	r3
 801959e:	2000      	movs	r0, #0
 80195a0:	b003      	add	sp, #12
 80195a2:	bd30      	pop	{r4, r5, pc}
 80195a4:	2001      	movs	r0, #1
 80195a6:	b003      	add	sp, #12
 80195a8:	bd30      	pop	{r4, r5, pc}
 80195aa:	bf00      	nop

080195ac <LCD_GetPosEx>:
 80195ac:	b530      	push	{r4, r5, lr}
 80195ae:	b083      	sub	sp, #12
 80195b0:	460d      	mov	r5, r1
 80195b2:	4614      	mov	r4, r2
 80195b4:	f002 fbf0 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80195b8:	9001      	str	r0, [sp, #4]
 80195ba:	b168      	cbz	r0, 80195d8 <LCD_GetPosEx+0x2c>
 80195bc:	68c3      	ldr	r3, [r0, #12]
 80195be:	2104      	movs	r1, #4
 80195c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c2:	a801      	add	r0, sp, #4
 80195c4:	4798      	blx	r3
 80195c6:	4603      	mov	r3, r0
 80195c8:	b130      	cbz	r0, 80195d8 <LCD_GetPosEx+0x2c>
 80195ca:	9801      	ldr	r0, [sp, #4]
 80195cc:	4629      	mov	r1, r5
 80195ce:	4622      	mov	r2, r4
 80195d0:	4798      	blx	r3
 80195d2:	2000      	movs	r0, #0
 80195d4:	b003      	add	sp, #12
 80195d6:	bd30      	pop	{r4, r5, pc}
 80195d8:	2001      	movs	r0, #1
 80195da:	b003      	add	sp, #12
 80195dc:	bd30      	pop	{r4, r5, pc}
 80195de:	bf00      	nop

080195e0 <LCD_SetDevFunc>:
 80195e0:	b530      	push	{r4, r5, lr}
 80195e2:	b083      	sub	sp, #12
 80195e4:	460d      	mov	r5, r1
 80195e6:	4614      	mov	r4, r2
 80195e8:	f002 fbd6 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80195ec:	9001      	str	r0, [sp, #4]
 80195ee:	b168      	cbz	r0, 801960c <LCD_SetDevFunc+0x2c>
 80195f0:	68c3      	ldr	r3, [r0, #12]
 80195f2:	2116      	movs	r1, #22
 80195f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195f6:	a801      	add	r0, sp, #4
 80195f8:	4798      	blx	r3
 80195fa:	4603      	mov	r3, r0
 80195fc:	b130      	cbz	r0, 801960c <LCD_SetDevFunc+0x2c>
 80195fe:	9801      	ldr	r0, [sp, #4]
 8019600:	4629      	mov	r1, r5
 8019602:	4622      	mov	r2, r4
 8019604:	4798      	blx	r3
 8019606:	2000      	movs	r0, #0
 8019608:	b003      	add	sp, #12
 801960a:	bd30      	pop	{r4, r5, pc}
 801960c:	2001      	movs	r0, #1
 801960e:	b003      	add	sp, #12
 8019610:	bd30      	pop	{r4, r5, pc}
 8019612:	bf00      	nop

08019614 <LCD_GetXSizeEx>:
 8019614:	2801      	cmp	r0, #1
 8019616:	b508      	push	{r3, lr}
 8019618:	dd01      	ble.n	801961e <LCD_GetXSizeEx+0xa>
 801961a:	2000      	movs	r0, #0
 801961c:	bd08      	pop	{r3, pc}
 801961e:	f002 fbbb 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019622:	b120      	cbz	r0, 801962e <LCD_GetXSizeEx+0x1a>
 8019624:	68c3      	ldr	r3, [r0, #12]
 8019626:	2101      	movs	r1, #1
 8019628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801962a:	4798      	blx	r3
 801962c:	bd08      	pop	{r3, pc}
 801962e:	bd08      	pop	{r3, pc}

08019630 <LCD_GetYSizeEx>:
 8019630:	2801      	cmp	r0, #1
 8019632:	b508      	push	{r3, lr}
 8019634:	dd01      	ble.n	801963a <LCD_GetYSizeEx+0xa>
 8019636:	2000      	movs	r0, #0
 8019638:	bd08      	pop	{r3, pc}
 801963a:	f002 fbad 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801963e:	b120      	cbz	r0, 801964a <LCD_GetYSizeEx+0x1a>
 8019640:	68c3      	ldr	r3, [r0, #12]
 8019642:	2102      	movs	r1, #2
 8019644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019646:	4798      	blx	r3
 8019648:	bd08      	pop	{r3, pc}
 801964a:	bd08      	pop	{r3, pc}

0801964c <LCD_GetVXSizeEx>:
 801964c:	2801      	cmp	r0, #1
 801964e:	b508      	push	{r3, lr}
 8019650:	dd01      	ble.n	8019656 <LCD_GetVXSizeEx+0xa>
 8019652:	2000      	movs	r0, #0
 8019654:	bd08      	pop	{r3, pc}
 8019656:	f002 fb9f 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801965a:	b120      	cbz	r0, 8019666 <LCD_GetVXSizeEx+0x1a>
 801965c:	68c3      	ldr	r3, [r0, #12]
 801965e:	2103      	movs	r1, #3
 8019660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019662:	4798      	blx	r3
 8019664:	bd08      	pop	{r3, pc}
 8019666:	bd08      	pop	{r3, pc}

08019668 <LCD_GetVYSizeEx>:
 8019668:	2801      	cmp	r0, #1
 801966a:	b508      	push	{r3, lr}
 801966c:	dd01      	ble.n	8019672 <LCD_GetVYSizeEx+0xa>
 801966e:	2000      	movs	r0, #0
 8019670:	bd08      	pop	{r3, pc}
 8019672:	f002 fb91 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019676:	b120      	cbz	r0, 8019682 <LCD_GetVYSizeEx+0x1a>
 8019678:	68c3      	ldr	r3, [r0, #12]
 801967a:	2104      	movs	r1, #4
 801967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801967e:	4798      	blx	r3
 8019680:	bd08      	pop	{r3, pc}
 8019682:	bd08      	pop	{r3, pc}

08019684 <LCD_GetBitsPerPixelEx>:
 8019684:	2801      	cmp	r0, #1
 8019686:	b508      	push	{r3, lr}
 8019688:	dd01      	ble.n	801968e <LCD_GetBitsPerPixelEx+0xa>
 801968a:	2000      	movs	r0, #0
 801968c:	bd08      	pop	{r3, pc}
 801968e:	f002 fb83 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019692:	b120      	cbz	r0, 801969e <LCD_GetBitsPerPixelEx+0x1a>
 8019694:	68c3      	ldr	r3, [r0, #12]
 8019696:	2108      	movs	r1, #8
 8019698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801969a:	4798      	blx	r3
 801969c:	bd08      	pop	{r3, pc}
 801969e:	bd08      	pop	{r3, pc}

080196a0 <LCD_GetNumColorsEx>:
 80196a0:	2801      	cmp	r0, #1
 80196a2:	b508      	push	{r3, lr}
 80196a4:	dd01      	ble.n	80196aa <LCD_GetNumColorsEx+0xa>
 80196a6:	2000      	movs	r0, #0
 80196a8:	bd08      	pop	{r3, pc}
 80196aa:	f002 fb75 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80196ae:	b120      	cbz	r0, 80196ba <LCD_GetNumColorsEx+0x1a>
 80196b0:	68c3      	ldr	r3, [r0, #12]
 80196b2:	2109      	movs	r1, #9
 80196b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196b6:	4798      	blx	r3
 80196b8:	bd08      	pop	{r3, pc}
 80196ba:	bd08      	pop	{r3, pc}

080196bc <LCD_GetMirrorXEx>:
 80196bc:	2801      	cmp	r0, #1
 80196be:	b508      	push	{r3, lr}
 80196c0:	dd01      	ble.n	80196c6 <LCD_GetMirrorXEx+0xa>
 80196c2:	2000      	movs	r0, #0
 80196c4:	bd08      	pop	{r3, pc}
 80196c6:	f002 fb67 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80196ca:	b120      	cbz	r0, 80196d6 <LCD_GetMirrorXEx+0x1a>
 80196cc:	68c3      	ldr	r3, [r0, #12]
 80196ce:	210c      	movs	r1, #12
 80196d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196d2:	4798      	blx	r3
 80196d4:	bd08      	pop	{r3, pc}
 80196d6:	bd08      	pop	{r3, pc}

080196d8 <LCD_GetMirrorYEx>:
 80196d8:	2801      	cmp	r0, #1
 80196da:	b508      	push	{r3, lr}
 80196dc:	dd01      	ble.n	80196e2 <LCD_GetMirrorYEx+0xa>
 80196de:	2000      	movs	r0, #0
 80196e0:	bd08      	pop	{r3, pc}
 80196e2:	f002 fb59 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80196e6:	b120      	cbz	r0, 80196f2 <LCD_GetMirrorYEx+0x1a>
 80196e8:	68c3      	ldr	r3, [r0, #12]
 80196ea:	210d      	movs	r1, #13
 80196ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196ee:	4798      	blx	r3
 80196f0:	bd08      	pop	{r3, pc}
 80196f2:	bd08      	pop	{r3, pc}

080196f4 <LCD_GetSwapXYEx>:
 80196f4:	2801      	cmp	r0, #1
 80196f6:	b508      	push	{r3, lr}
 80196f8:	dd01      	ble.n	80196fe <LCD_GetSwapXYEx+0xa>
 80196fa:	2000      	movs	r0, #0
 80196fc:	bd08      	pop	{r3, pc}
 80196fe:	f002 fb4b 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019702:	b120      	cbz	r0, 801970e <LCD_GetSwapXYEx+0x1a>
 8019704:	68c3      	ldr	r3, [r0, #12]
 8019706:	210e      	movs	r1, #14
 8019708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801970a:	4798      	blx	r3
 801970c:	bd08      	pop	{r3, pc}
 801970e:	bd08      	pop	{r3, pc}

08019710 <LCD_GetXSize>:
 8019710:	b508      	push	{r3, lr}
 8019712:	4b08      	ldr	r3, [pc, #32]	; (8019734 <LCD_GetXSize+0x24>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	7c58      	ldrb	r0, [r3, #17]
 8019718:	2801      	cmp	r0, #1
 801971a:	dd01      	ble.n	8019720 <LCD_GetXSize+0x10>
 801971c:	2000      	movs	r0, #0
 801971e:	bd08      	pop	{r3, pc}
 8019720:	f002 fb3a 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019724:	b120      	cbz	r0, 8019730 <LCD_GetXSize+0x20>
 8019726:	68c3      	ldr	r3, [r0, #12]
 8019728:	2101      	movs	r1, #1
 801972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801972c:	4798      	blx	r3
 801972e:	bd08      	pop	{r3, pc}
 8019730:	bd08      	pop	{r3, pc}
 8019732:	bf00      	nop
 8019734:	2000027c 	.word	0x2000027c

08019738 <LCD_GetYSize>:
 8019738:	b508      	push	{r3, lr}
 801973a:	4b08      	ldr	r3, [pc, #32]	; (801975c <LCD_GetYSize+0x24>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	7c58      	ldrb	r0, [r3, #17]
 8019740:	2801      	cmp	r0, #1
 8019742:	dd01      	ble.n	8019748 <LCD_GetYSize+0x10>
 8019744:	2000      	movs	r0, #0
 8019746:	bd08      	pop	{r3, pc}
 8019748:	f002 fb26 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801974c:	b120      	cbz	r0, 8019758 <LCD_GetYSize+0x20>
 801974e:	68c3      	ldr	r3, [r0, #12]
 8019750:	2102      	movs	r1, #2
 8019752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019754:	4798      	blx	r3
 8019756:	bd08      	pop	{r3, pc}
 8019758:	bd08      	pop	{r3, pc}
 801975a:	bf00      	nop
 801975c:	2000027c 	.word	0x2000027c

08019760 <LCD_GetNumColors>:
 8019760:	b508      	push	{r3, lr}
 8019762:	4b08      	ldr	r3, [pc, #32]	; (8019784 <LCD_GetNumColors+0x24>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	7c58      	ldrb	r0, [r3, #17]
 8019768:	2801      	cmp	r0, #1
 801976a:	dd01      	ble.n	8019770 <LCD_GetNumColors+0x10>
 801976c:	2000      	movs	r0, #0
 801976e:	bd08      	pop	{r3, pc}
 8019770:	f002 fb12 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019774:	b120      	cbz	r0, 8019780 <LCD_GetNumColors+0x20>
 8019776:	68c3      	ldr	r3, [r0, #12]
 8019778:	2109      	movs	r1, #9
 801977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801977c:	4798      	blx	r3
 801977e:	bd08      	pop	{r3, pc}
 8019780:	bd08      	pop	{r3, pc}
 8019782:	bf00      	nop
 8019784:	2000027c 	.word	0x2000027c

08019788 <GUI_GetBitsPerPixelEx>:
 8019788:	b508      	push	{r3, lr}
 801978a:	4b04      	ldr	r3, [pc, #16]	; (801979c <GUI_GetBitsPerPixelEx+0x14>)
 801978c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019790:	68c3      	ldr	r3, [r0, #12]
 8019792:	2108      	movs	r1, #8
 8019794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019796:	4798      	blx	r3
 8019798:	bd08      	pop	{r3, pc}
 801979a:	bf00      	nop
 801979c:	2002cbcc 	.word	0x2002cbcc

080197a0 <LCD_GetPalette>:
 80197a0:	b508      	push	{r3, lr}
 80197a2:	4b06      	ldr	r3, [pc, #24]	; (80197bc <LCD_GetPalette+0x1c>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	7c58      	ldrb	r0, [r3, #17]
 80197a8:	f002 faf6 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80197ac:	b120      	cbz	r0, 80197b8 <LCD_GetPalette+0x18>
 80197ae:	68c3      	ldr	r3, [r0, #12]
 80197b0:	2102      	movs	r1, #2
 80197b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197b4:	4798      	blx	r3
 80197b6:	bd08      	pop	{r3, pc}
 80197b8:	bd08      	pop	{r3, pc}
 80197ba:	bf00      	nop
 80197bc:	2000027c 	.word	0x2000027c

080197c0 <GUI_GetpfIndex2ColorEx>:
 80197c0:	4b02      	ldr	r3, [pc, #8]	; (80197cc <GUI_GetpfIndex2ColorEx+0xc>)
 80197c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80197c6:	691b      	ldr	r3, [r3, #16]
 80197c8:	6858      	ldr	r0, [r3, #4]
 80197ca:	4770      	bx	lr
 80197cc:	2002cbcc 	.word	0x2002cbcc

080197d0 <GUI_GetpfColor2IndexEx>:
 80197d0:	4b02      	ldr	r3, [pc, #8]	; (80197dc <GUI_GetpfColor2IndexEx+0xc>)
 80197d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80197d6:	691b      	ldr	r3, [r3, #16]
 80197d8:	6818      	ldr	r0, [r3, #0]
 80197da:	4770      	bx	lr
 80197dc:	2002cbcc 	.word	0x2002cbcc

080197e0 <LCD_GetXSizeMax>:
 80197e0:	b538      	push	{r3, r4, r5, lr}
 80197e2:	2501      	movs	r5, #1
 80197e4:	4628      	mov	r0, r5
 80197e6:	f002 fad7 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 80197ea:	2400      	movs	r4, #0
 80197ec:	2101      	movs	r1, #1
 80197ee:	b168      	cbz	r0, 801980c <LCD_GetXSizeMax+0x2c>
 80197f0:	68c3      	ldr	r3, [r0, #12]
 80197f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197f4:	4798      	blx	r3
 80197f6:	4284      	cmp	r4, r0
 80197f8:	bfb8      	it	lt
 80197fa:	4604      	movlt	r4, r0
 80197fc:	b15d      	cbz	r5, 8019816 <LCD_GetXSizeMax+0x36>
 80197fe:	2500      	movs	r5, #0
 8019800:	4628      	mov	r0, r5
 8019802:	f002 fac9 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019806:	2101      	movs	r1, #1
 8019808:	2800      	cmp	r0, #0
 801980a:	d1f1      	bne.n	80197f0 <LCD_GetXSizeMax+0x10>
 801980c:	4284      	cmp	r4, r0
 801980e:	bfb8      	it	lt
 8019810:	4604      	movlt	r4, r0
 8019812:	2d00      	cmp	r5, #0
 8019814:	d1f3      	bne.n	80197fe <LCD_GetXSizeMax+0x1e>
 8019816:	4620      	mov	r0, r4
 8019818:	bd38      	pop	{r3, r4, r5, pc}
 801981a:	bf00      	nop

0801981c <LCD_GetYSizeMax>:
 801981c:	b538      	push	{r3, r4, r5, lr}
 801981e:	2501      	movs	r5, #1
 8019820:	4628      	mov	r0, r5
 8019822:	f002 fab9 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019826:	2400      	movs	r4, #0
 8019828:	2102      	movs	r1, #2
 801982a:	b168      	cbz	r0, 8019848 <LCD_GetYSizeMax+0x2c>
 801982c:	68c3      	ldr	r3, [r0, #12]
 801982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019830:	4798      	blx	r3
 8019832:	4284      	cmp	r4, r0
 8019834:	bfb8      	it	lt
 8019836:	4604      	movlt	r4, r0
 8019838:	b15d      	cbz	r5, 8019852 <LCD_GetYSizeMax+0x36>
 801983a:	2500      	movs	r5, #0
 801983c:	4628      	mov	r0, r5
 801983e:	f002 faab 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019842:	2102      	movs	r1, #2
 8019844:	2800      	cmp	r0, #0
 8019846:	d1f1      	bne.n	801982c <LCD_GetYSizeMax+0x10>
 8019848:	4284      	cmp	r4, r0
 801984a:	bfb8      	it	lt
 801984c:	4604      	movlt	r4, r0
 801984e:	2d00      	cmp	r5, #0
 8019850:	d1f3      	bne.n	801983a <LCD_GetYSizeMax+0x1e>
 8019852:	4620      	mov	r0, r4
 8019854:	bd38      	pop	{r3, r4, r5, pc}
 8019856:	bf00      	nop

08019858 <LCD_GetVXSizeMax>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	2501      	movs	r5, #1
 801985c:	4628      	mov	r0, r5
 801985e:	f002 fa9b 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8019862:	2400      	movs	r4, #0
 8019864:	2103      	movs	r1, #3
 8019866:	b168      	cbz	r0, 8019884 <LCD_GetVXSizeMax+0x2c>
 8019868:	68c3      	ldr	r3, [r0, #12]
 801986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801986c:	4798      	blx	r3
 801986e:	4284      	cmp	r4, r0
 8019870:	bfb8      	it	lt
 8019872:	4604      	movlt	r4, r0
 8019874:	b15d      	cbz	r5, 801988e <LCD_GetVXSizeMax+0x36>
 8019876:	2500      	movs	r5, #0
 8019878:	4628      	mov	r0, r5
 801987a:	f002 fa8d 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801987e:	2103      	movs	r1, #3
 8019880:	2800      	cmp	r0, #0
 8019882:	d1f1      	bne.n	8019868 <LCD_GetVXSizeMax+0x10>
 8019884:	4284      	cmp	r4, r0
 8019886:	bfb8      	it	lt
 8019888:	4604      	movlt	r4, r0
 801988a:	2d00      	cmp	r5, #0
 801988c:	d1f3      	bne.n	8019876 <LCD_GetVXSizeMax+0x1e>
 801988e:	4620      	mov	r0, r4
 8019890:	bd38      	pop	{r3, r4, r5, pc}
 8019892:	bf00      	nop

08019894 <LCD_SetDisplaySize>:
 8019894:	4a02      	ldr	r2, [pc, #8]	; (80198a0 <LCD_SetDisplaySize+0xc>)
 8019896:	4b03      	ldr	r3, [pc, #12]	; (80198a4 <LCD_SetDisplaySize+0x10>)
 8019898:	6010      	str	r0, [r2, #0]
 801989a:	6019      	str	r1, [r3, #0]
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	2002b1a4 	.word	0x2002b1a4
 80198a4:	2002b1a0 	.word	0x2002b1a0

080198a8 <LCD_GetXSizeDisplay>:
 80198a8:	4b01      	ldr	r3, [pc, #4]	; (80198b0 <LCD_GetXSizeDisplay+0x8>)
 80198aa:	6818      	ldr	r0, [r3, #0]
 80198ac:	4770      	bx	lr
 80198ae:	bf00      	nop
 80198b0:	2002b1a4 	.word	0x2002b1a4

080198b4 <LCD_GetYSizeDisplay>:
 80198b4:	4b01      	ldr	r3, [pc, #4]	; (80198bc <LCD_GetYSizeDisplay+0x8>)
 80198b6:	6818      	ldr	r0, [r3, #0]
 80198b8:	4770      	bx	lr
 80198ba:	bf00      	nop
 80198bc:	2002b1a0 	.word	0x2002b1a0

080198c0 <LCD__GetBPPDevice>:
 80198c0:	b1c8      	cbz	r0, 80198f6 <LCD__GetBPPDevice+0x36>
 80198c2:	f030 0301 	bics.w	r3, r0, #1
 80198c6:	d017      	beq.n	80198f8 <LCD__GetBPPDevice+0x38>
 80198c8:	f030 0303 	bics.w	r3, r0, #3
 80198cc:	d101      	bne.n	80198d2 <LCD__GetBPPDevice+0x12>
 80198ce:	2008      	movs	r0, #8
 80198d0:	4770      	bx	lr
 80198d2:	f030 0307 	bics.w	r3, r0, #7
 80198d6:	d0fa      	beq.n	80198ce <LCD__GetBPPDevice+0xe>
 80198d8:	f030 030f 	bics.w	r3, r0, #15
 80198dc:	d0f7      	beq.n	80198ce <LCD__GetBPPDevice+0xe>
 80198de:	f030 031f 	bics.w	r3, r0, #31
 80198e2:	d0f4      	beq.n	80198ce <LCD__GetBPPDevice+0xe>
 80198e4:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80198e8:	d0f1      	beq.n	80198ce <LCD__GetBPPDevice+0xe>
 80198ea:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80198ee:	f023 0301 	bic.w	r3, r3, #1
 80198f2:	b91b      	cbnz	r3, 80198fc <LCD__GetBPPDevice+0x3c>
 80198f4:	2010      	movs	r0, #16
 80198f6:	4770      	bx	lr
 80198f8:	2001      	movs	r0, #1
 80198fa:	4770      	bx	lr
 80198fc:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8019900:	f023 030f 	bic.w	r3, r3, #15
 8019904:	2b00      	cmp	r3, #0
 8019906:	d0f5      	beq.n	80198f4 <LCD__GetBPPDevice+0x34>
 8019908:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 801990c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019910:	2b00      	cmp	r3, #0
 8019912:	d0ef      	beq.n	80198f4 <LCD__GetBPPDevice+0x34>
 8019914:	0c00      	lsrs	r0, r0, #16
 8019916:	0400      	lsls	r0, r0, #16
 8019918:	2800      	cmp	r0, #0
 801991a:	bf0c      	ite	eq
 801991c:	2010      	moveq	r0, #16
 801991e:	2020      	movne	r0, #32
 8019920:	4770      	bx	lr
 8019922:	bf00      	nop

08019924 <_SetBkColor>:
 8019924:	b538      	push	{r3, r4, r5, lr}
 8019926:	4c0b      	ldr	r4, [pc, #44]	; (8019954 <_SetBkColor+0x30>)
 8019928:	6823      	ldr	r3, [r4, #0]
 801992a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801992c:	4281      	cmp	r1, r0
 801992e:	d00d      	beq.n	801994c <_SetBkColor+0x28>
 8019930:	7c5d      	ldrb	r5, [r3, #17]
 8019932:	4909      	ldr	r1, [pc, #36]	; (8019958 <_SetBkColor+0x34>)
 8019934:	6358      	str	r0, [r3, #52]	; 0x34
 8019936:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 801993a:	691b      	ldr	r3, [r3, #16]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	4798      	blx	r3
 8019940:	6823      	ldr	r3, [r4, #0]
 8019942:	7c1a      	ldrb	r2, [r3, #16]
 8019944:	0752      	lsls	r2, r2, #29
 8019946:	d402      	bmi.n	801994e <_SetBkColor+0x2a>
 8019948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801994a:	6018      	str	r0, [r3, #0]
 801994c:	bd38      	pop	{r3, r4, r5, pc}
 801994e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019950:	6018      	str	r0, [r3, #0]
 8019952:	bd38      	pop	{r3, r4, r5, pc}
 8019954:	2000027c 	.word	0x2000027c
 8019958:	2002cbcc 	.word	0x2002cbcc

0801995c <_SetColor>:
 801995c:	b538      	push	{r3, r4, r5, lr}
 801995e:	4c0b      	ldr	r4, [pc, #44]	; (801998c <_SetColor+0x30>)
 8019960:	6823      	ldr	r3, [r4, #0]
 8019962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019964:	4281      	cmp	r1, r0
 8019966:	d00d      	beq.n	8019984 <_SetColor+0x28>
 8019968:	7c5d      	ldrb	r5, [r3, #17]
 801996a:	4909      	ldr	r1, [pc, #36]	; (8019990 <_SetColor+0x34>)
 801996c:	6318      	str	r0, [r3, #48]	; 0x30
 801996e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8019972:	691b      	ldr	r3, [r3, #16]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	4798      	blx	r3
 8019978:	6823      	ldr	r3, [r4, #0]
 801997a:	7c1a      	ldrb	r2, [r3, #16]
 801997c:	0752      	lsls	r2, r2, #29
 801997e:	d402      	bmi.n	8019986 <_SetColor+0x2a>
 8019980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019982:	6018      	str	r0, [r3, #0]
 8019984:	bd38      	pop	{r3, r4, r5, pc}
 8019986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019988:	6018      	str	r0, [r3, #0]
 801998a:	bd38      	pop	{r3, r4, r5, pc}
 801998c:	2000027c 	.word	0x2000027c
 8019990:	2002cbcc 	.word	0x2002cbcc

08019994 <_SetDrawMode>:
 8019994:	b470      	push	{r4, r5, r6}
 8019996:	4b08      	ldr	r3, [pc, #32]	; (80199b8 <_SetDrawMode+0x24>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	7c1a      	ldrb	r2, [r3, #16]
 801999c:	ea80 0102 	eor.w	r1, r0, r2
 80199a0:	0749      	lsls	r1, r1, #29
 80199a2:	d505      	bpl.n	80199b0 <_SetDrawMode+0x1c>
 80199a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80199a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80199a8:	6826      	ldr	r6, [r4, #0]
 80199aa:	680d      	ldr	r5, [r1, #0]
 80199ac:	6025      	str	r5, [r4, #0]
 80199ae:	600e      	str	r6, [r1, #0]
 80199b0:	7418      	strb	r0, [r3, #16]
 80199b2:	bc70      	pop	{r4, r5, r6}
 80199b4:	4610      	mov	r0, r2
 80199b6:	4770      	bx	lr
 80199b8:	2000027c 	.word	0x2000027c

080199bc <LCD_SetDrawMode>:
 80199bc:	b508      	push	{r3, lr}
 80199be:	4b02      	ldr	r3, [pc, #8]	; (80199c8 <LCD_SetDrawMode+0xc>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	689b      	ldr	r3, [r3, #8]
 80199c4:	4798      	blx	r3
 80199c6:	bd08      	pop	{r3, pc}
 80199c8:	2000024c 	.word	0x2000024c

080199cc <LCD_DrawPixel>:
 80199cc:	b538      	push	{r3, r4, r5, lr}
 80199ce:	4b16      	ldr	r3, [pc, #88]	; (8019a28 <LCD_DrawPixel+0x5c>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 80199d6:	428c      	cmp	r4, r1
 80199d8:	460a      	mov	r2, r1
 80199da:	dc19      	bgt.n	8019a10 <LCD_DrawPixel+0x44>
 80199dc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80199e0:	428a      	cmp	r2, r1
 80199e2:	dc15      	bgt.n	8019a10 <LCD_DrawPixel+0x44>
 80199e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80199e8:	4281      	cmp	r1, r0
 80199ea:	dc11      	bgt.n	8019a10 <LCD_DrawPixel+0x44>
 80199ec:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80199f0:	4288      	cmp	r0, r1
 80199f2:	dc0d      	bgt.n	8019a10 <LCD_DrawPixel+0x44>
 80199f4:	7c19      	ldrb	r1, [r3, #16]
 80199f6:	07c9      	lsls	r1, r1, #31
 80199f8:	d40b      	bmi.n	8019a12 <LCD_DrawPixel+0x46>
 80199fa:	490c      	ldr	r1, [pc, #48]	; (8019a2c <LCD_DrawPixel+0x60>)
 80199fc:	7c5c      	ldrb	r4, [r3, #17]
 80199fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a00:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	68e5      	ldr	r5, [r4, #12]
 8019a08:	4601      	mov	r1, r0
 8019a0a:	69ad      	ldr	r5, [r5, #24]
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	47a8      	blx	r5
 8019a10:	bd38      	pop	{r3, r4, r5, pc}
 8019a12:	7c59      	ldrb	r1, [r3, #17]
 8019a14:	4b05      	ldr	r3, [pc, #20]	; (8019a2c <LCD_DrawPixel+0x60>)
 8019a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019a1a:	68dc      	ldr	r4, [r3, #12]
 8019a1c:	4601      	mov	r1, r0
 8019a1e:	69e4      	ldr	r4, [r4, #28]
 8019a20:	4618      	mov	r0, r3
 8019a22:	47a0      	blx	r4
 8019a24:	bd38      	pop	{r3, r4, r5, pc}
 8019a26:	bf00      	nop
 8019a28:	2000027c 	.word	0x2000027c
 8019a2c:	2002cbcc 	.word	0x2002cbcc

08019a30 <LCD_DrawHLine>:
 8019a30:	4b10      	ldr	r3, [pc, #64]	; (8019a74 <LCD_DrawHLine+0x44>)
 8019a32:	b570      	push	{r4, r5, r6, lr}
 8019a34:	681c      	ldr	r4, [r3, #0]
 8019a36:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 8019a3a:	428e      	cmp	r6, r1
 8019a3c:	460d      	mov	r5, r1
 8019a3e:	dc0f      	bgt.n	8019a60 <LCD_DrawHLine+0x30>
 8019a40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8019a44:	4299      	cmp	r1, r3
 8019a46:	dc0b      	bgt.n	8019a60 <LCD_DrawHLine+0x30>
 8019a48:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a50:	4288      	cmp	r0, r1
 8019a52:	bfa8      	it	ge
 8019a54:	4601      	movge	r1, r0
 8019a56:	429a      	cmp	r2, r3
 8019a58:	bfb8      	it	lt
 8019a5a:	4613      	movlt	r3, r2
 8019a5c:	4299      	cmp	r1, r3
 8019a5e:	dd00      	ble.n	8019a62 <LCD_DrawHLine+0x32>
 8019a60:	bd70      	pop	{r4, r5, r6, pc}
 8019a62:	7c60      	ldrb	r0, [r4, #17]
 8019a64:	4a04      	ldr	r2, [pc, #16]	; (8019a78 <LCD_DrawHLine+0x48>)
 8019a66:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8019a6a:	68c4      	ldr	r4, [r0, #12]
 8019a6c:	462a      	mov	r2, r5
 8019a6e:	68a4      	ldr	r4, [r4, #8]
 8019a70:	47a0      	blx	r4
 8019a72:	bd70      	pop	{r4, r5, r6, pc}
 8019a74:	2000027c 	.word	0x2000027c
 8019a78:	2002cbcc 	.word	0x2002cbcc

08019a7c <LCD_DrawVLine>:
 8019a7c:	4b11      	ldr	r3, [pc, #68]	; (8019ac4 <LCD_DrawVLine+0x48>)
 8019a7e:	b570      	push	{r4, r5, r6, lr}
 8019a80:	681c      	ldr	r4, [r3, #0]
 8019a82:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8019a86:	4285      	cmp	r5, r0
 8019a88:	dc0f      	bgt.n	8019aaa <LCD_DrawVLine+0x2e>
 8019a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a8e:	4298      	cmp	r0, r3
 8019a90:	dc0b      	bgt.n	8019aaa <LCD_DrawVLine+0x2e>
 8019a92:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8019a96:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8019a9a:	42a9      	cmp	r1, r5
 8019a9c:	bfa8      	it	ge
 8019a9e:	460d      	movge	r5, r1
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	bfb8      	it	lt
 8019aa4:	4613      	movlt	r3, r2
 8019aa6:	429d      	cmp	r5, r3
 8019aa8:	dd00      	ble.n	8019aac <LCD_DrawVLine+0x30>
 8019aaa:	bd70      	pop	{r4, r5, r6, pc}
 8019aac:	7c61      	ldrb	r1, [r4, #17]
 8019aae:	4a06      	ldr	r2, [pc, #24]	; (8019ac8 <LCD_DrawVLine+0x4c>)
 8019ab0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8019ab4:	68e6      	ldr	r6, [r4, #12]
 8019ab6:	4601      	mov	r1, r0
 8019ab8:	462a      	mov	r2, r5
 8019aba:	4620      	mov	r0, r4
 8019abc:	68f5      	ldr	r5, [r6, #12]
 8019abe:	47a8      	blx	r5
 8019ac0:	bd70      	pop	{r4, r5, r6, pc}
 8019ac2:	bf00      	nop
 8019ac4:	2000027c 	.word	0x2000027c
 8019ac8:	2002cbcc 	.word	0x2002cbcc

08019acc <LCD_FillRect>:
 8019acc:	b570      	push	{r4, r5, r6, lr}
 8019ace:	4c14      	ldr	r4, [pc, #80]	; (8019b20 <LCD_FillRect+0x54>)
 8019ad0:	6824      	ldr	r4, [r4, #0]
 8019ad2:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8019ad6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ada:	42b0      	cmp	r0, r6
 8019adc:	bfa8      	it	ge
 8019ade:	4606      	movge	r6, r0
 8019ae0:	42aa      	cmp	r2, r5
 8019ae2:	bfb8      	it	lt
 8019ae4:	4615      	movlt	r5, r2
 8019ae6:	42b5      	cmp	r5, r6
 8019ae8:	b082      	sub	sp, #8
 8019aea:	db0b      	blt.n	8019b04 <LCD_FillRect+0x38>
 8019aec:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8019af0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8019af4:	4291      	cmp	r1, r2
 8019af6:	bfa8      	it	ge
 8019af8:	460a      	movge	r2, r1
 8019afa:	4283      	cmp	r3, r0
 8019afc:	bfa8      	it	ge
 8019afe:	4603      	movge	r3, r0
 8019b00:	429a      	cmp	r2, r3
 8019b02:	dd01      	ble.n	8019b08 <LCD_FillRect+0x3c>
 8019b04:	b002      	add	sp, #8
 8019b06:	bd70      	pop	{r4, r5, r6, pc}
 8019b08:	7c60      	ldrb	r0, [r4, #17]
 8019b0a:	4906      	ldr	r1, [pc, #24]	; (8019b24 <LCD_FillRect+0x58>)
 8019b0c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8019b10:	68c4      	ldr	r4, [r0, #12]
 8019b12:	9300      	str	r3, [sp, #0]
 8019b14:	4631      	mov	r1, r6
 8019b16:	462b      	mov	r3, r5
 8019b18:	6924      	ldr	r4, [r4, #16]
 8019b1a:	47a0      	blx	r4
 8019b1c:	b002      	add	sp, #8
 8019b1e:	bd70      	pop	{r4, r5, r6, pc}
 8019b20:	2000027c 	.word	0x2000027c
 8019b24:	2002cbcc 	.word	0x2002cbcc

08019b28 <LCD__DrawBitmap_1bpp>:
 8019b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2c:	4c8b      	ldr	r4, [pc, #556]	; (8019d5c <LCD__DrawBitmap_1bpp+0x234>)
 8019b2e:	b091      	sub	sp, #68	; 0x44
 8019b30:	6825      	ldr	r5, [r4, #0]
 8019b32:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019b36:	920a      	str	r2, [sp, #40]	; 0x28
 8019b38:	4604      	mov	r4, r0
 8019b3a:	4689      	mov	r9, r1
 8019b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8019b3e:	b185      	cbz	r5, 8019b62 <LCD__DrawBitmap_1bpp+0x3a>
 8019b40:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8019b42:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8019b44:	9401      	str	r4, [sp, #4]
 8019b46:	9602      	str	r6, [sp, #8]
 8019b48:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8019b4a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8019b4c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8019b4e:	f8cd a000 	str.w	sl, [sp]
 8019b52:	9703      	str	r7, [sp, #12]
 8019b54:	9404      	str	r4, [sp, #16]
 8019b56:	9605      	str	r6, [sp, #20]
 8019b58:	682c      	ldr	r4, [r5, #0]
 8019b5a:	47a0      	blx	r4
 8019b5c:	b011      	add	sp, #68	; 0x44
 8019b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b62:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8019b64:	ea4a 0307 	orr.w	r3, sl, r7
 8019b68:	2b01      	cmp	r3, #1
 8019b6a:	f000 8096 	beq.w	8019c9a <LCD__DrawBitmap_1bpp+0x172>
 8019b6e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019b70:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8019b72:	2f00      	cmp	r7, #0
 8019b74:	f1c6 0308 	rsb	r3, r6, #8
 8019b78:	ddf0      	ble.n	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019b7a:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8019d64 <LCD__DrawBitmap_1bpp+0x23c>
 8019b7e:	9109      	str	r1, [sp, #36]	; 0x24
 8019b80:	46a8      	mov	r8, r5
 8019b82:	4454      	add	r4, sl
 8019b84:	950c      	str	r5, [sp, #48]	; 0x30
 8019b86:	f8dc 0000 	ldr.w	r0, [ip]
 8019b8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019b8c:	940f      	str	r4, [sp, #60]	; 0x3c
 8019b8e:	4699      	mov	r9, r3
 8019b90:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8019b92:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019b96:	4425      	add	r5, r4
 8019b98:	1e6e      	subs	r6, r5, #1
 8019b9a:	42b3      	cmp	r3, r6
 8019b9c:	950d      	str	r5, [sp, #52]	; 0x34
 8019b9e:	960b      	str	r6, [sp, #44]	; 0x2c
 8019ba0:	dc6c      	bgt.n	8019c7c <LCD__DrawBitmap_1bpp+0x154>
 8019ba2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8019ba6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019baa:	4563      	cmp	r3, ip
 8019bac:	db66      	blt.n	8019c7c <LCD__DrawBitmap_1bpp+0x154>
 8019bae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019bb0:	2c00      	cmp	r4, #0
 8019bb2:	dd63      	ble.n	8019c7c <LCD__DrawBitmap_1bpp+0x154>
 8019bb4:	2600      	movs	r6, #0
 8019bb6:	4635      	mov	r5, r6
 8019bb8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019bba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019bbc:	e054      	b.n	8019c68 <LCD__DrawBitmap_1bpp+0x140>
 8019bbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019bc0:	1a76      	subs	r6, r6, r1
 8019bc2:	fa48 f309 	asr.w	r3, r8, r9
 8019bc6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019bca:	fa08 f801 	lsl.w	r8, r8, r1
 8019bce:	fa5f f888 	uxtb.w	r8, r8
 8019bd2:	d102      	bne.n	8019bda <LCD__DrawBitmap_1bpp+0xb2>
 8019bd4:	7c01      	ldrb	r1, [r0, #16]
 8019bd6:	0789      	lsls	r1, r1, #30
 8019bd8:	d440      	bmi.n	8019c5c <LCD__DrawBitmap_1bpp+0x134>
 8019bda:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8019bde:	f8db 1000 	ldr.w	r1, [fp]
 8019be2:	9108      	str	r1, [sp, #32]
 8019be4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8019be6:	b109      	cbz	r1, 8019bec <LCD__DrawBitmap_1bpp+0xc4>
 8019be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019bec:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019bf0:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8019bf4:	f8cb 3000 	str.w	r3, [fp]
 8019bf8:	1e63      	subs	r3, r4, #1
 8019bfa:	428a      	cmp	r2, r1
 8019bfc:	bfa8      	it	ge
 8019bfe:	4611      	movge	r1, r2
 8019c00:	4563      	cmp	r3, ip
 8019c02:	bfa8      	it	ge
 8019c04:	4663      	movge	r3, ip
 8019c06:	4299      	cmp	r1, r3
 8019c08:	dc25      	bgt.n	8019c56 <LCD__DrawBitmap_1bpp+0x12e>
 8019c0a:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8019c0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c12:	f8cd c018 	str.w	ip, [sp, #24]
 8019c16:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019c1a:	4594      	cmp	ip, r2
 8019c1c:	bfb8      	it	lt
 8019c1e:	4694      	movlt	ip, r2
 8019c20:	f8cd c01c 	str.w	ip, [sp, #28]
 8019c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c26:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019c2a:	4594      	cmp	ip, r2
 8019c2c:	bfa8      	it	ge
 8019c2e:	4694      	movge	ip, r2
 8019c30:	9a07      	ldr	r2, [sp, #28]
 8019c32:	4562      	cmp	r2, ip
 8019c34:	dc0f      	bgt.n	8019c56 <LCD__DrawBitmap_1bpp+0x12e>
 8019c36:	7c40      	ldrb	r0, [r0, #17]
 8019c38:	4a49      	ldr	r2, [pc, #292]	; (8019d60 <LCD__DrawBitmap_1bpp+0x238>)
 8019c3a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8019c3e:	9a07      	ldr	r2, [sp, #28]
 8019c40:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8019c44:	f8cd c000 	str.w	ip, [sp]
 8019c48:	f8de c010 	ldr.w	ip, [lr, #16]
 8019c4c:	47e0      	blx	ip
 8019c4e:	4b45      	ldr	r3, [pc, #276]	; (8019d64 <LCD__DrawBitmap_1bpp+0x23c>)
 8019c50:	6818      	ldr	r0, [r3, #0]
 8019c52:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8019c56:	9908      	ldr	r1, [sp, #32]
 8019c58:	f8cb 1000 	str.w	r1, [fp]
 8019c5c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8019c60:	3501      	adds	r5, #1
 8019c62:	4565      	cmp	r5, ip
 8019c64:	4454      	add	r4, sl
 8019c66:	d009      	beq.n	8019c7c <LCD__DrawBitmap_1bpp+0x154>
 8019c68:	ebca 0204 	rsb	r2, sl, r4
 8019c6c:	2e00      	cmp	r6, #0
 8019c6e:	d1a6      	bne.n	8019bbe <LCD__DrawBitmap_1bpp+0x96>
 8019c70:	f897 8000 	ldrb.w	r8, [r7]
 8019c74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019c76:	464e      	mov	r6, r9
 8019c78:	3701      	adds	r7, #1
 8019c7a:	e7a2      	b.n	8019bc2 <LCD__DrawBitmap_1bpp+0x9a>
 8019c7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019c7e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8019c80:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019c82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019c84:	3401      	adds	r4, #1
 8019c86:	4435      	add	r5, r6
 8019c88:	42bc      	cmp	r4, r7
 8019c8a:	940c      	str	r4, [sp, #48]	; 0x30
 8019c8c:	951e      	str	r5, [sp, #120]	; 0x78
 8019c8e:	f43f af65 	beq.w	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019c92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019c94:	9409      	str	r4, [sp, #36]	; 0x24
 8019c96:	4625      	mov	r5, r4
 8019c98:	e77a      	b.n	8019b90 <LCD__DrawBitmap_1bpp+0x68>
 8019c9a:	4b32      	ldr	r3, [pc, #200]	; (8019d64 <LCD__DrawBitmap_1bpp+0x23c>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8019ca2:	1a51      	subs	r1, r2, r1
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	dd54      	ble.n	8019d52 <LCD__DrawBitmap_1bpp+0x22a>
 8019ca8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8019cac:	ebc1 050c 	rsb	r5, r1, ip
 8019cb0:	2d00      	cmp	r5, #0
 8019cb2:	f77f af53 	ble.w	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019cb6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019cb8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019cba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019cbc:	fb06 7701 	mla	r7, r6, r1, r7
 8019cc0:	971e      	str	r7, [sp, #120]	; 0x78
 8019cc2:	4448      	add	r0, r9
 8019cc4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019cc8:	3801      	subs	r0, #1
 8019cca:	1a41      	subs	r1, r0, r1
 8019ccc:	2900      	cmp	r1, #0
 8019cce:	dd03      	ble.n	8019cd8 <LCD__DrawBitmap_1bpp+0x1b0>
 8019cd0:	1a6d      	subs	r5, r5, r1
 8019cd2:	2d00      	cmp	r5, #0
 8019cd4:	f77f af42 	ble.w	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019cda:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8019cde:	4420      	add	r0, r4
 8019ce0:	3801      	subs	r0, #1
 8019ce2:	1a41      	subs	r1, r0, r1
 8019ce4:	2900      	cmp	r1, #0
 8019ce6:	dd05      	ble.n	8019cf4 <LCD__DrawBitmap_1bpp+0x1cc>
 8019ce8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8019cec:	ebc1 0c0c 	rsb	ip, r1, ip
 8019cf0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8019cf4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8019cf6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019cfa:	1ba1      	subs	r1, r4, r6
 8019cfc:	4281      	cmp	r1, r0
 8019cfe:	da10      	bge.n	8019d22 <LCD__DrawBitmap_1bpp+0x1fa>
 8019d00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019d02:	4634      	mov	r4, r6
 8019d04:	1a46      	subs	r6, r0, r1
 8019d06:	1a08      	subs	r0, r1, r0
 8019d08:	4407      	add	r7, r0
 8019d0a:	970a      	str	r7, [sp, #40]	; 0x28
 8019d0c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019d0e:	4434      	add	r4, r6
 8019d10:	eb07 07e4 	add.w	r7, r7, r4, asr #3
 8019d14:	f026 0607 	bic.w	r6, r6, #7
 8019d18:	f004 0407 	and.w	r4, r4, #7
 8019d1c:	971e      	str	r7, [sp, #120]	; 0x78
 8019d1e:	9420      	str	r4, [sp, #128]	; 0x80
 8019d20:	4431      	add	r1, r6
 8019d22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019d24:	2c00      	cmp	r4, #0
 8019d26:	f77f af19 	ble.w	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019d2a:	7c58      	ldrb	r0, [r3, #17]
 8019d2c:	4b0c      	ldr	r3, [pc, #48]	; (8019d60 <LCD__DrawBitmap_1bpp+0x238>)
 8019d2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019d30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019d34:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019d36:	68c4      	ldr	r4, [r0, #12]
 8019d38:	9500      	str	r5, [sp, #0]
 8019d3a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8019d3c:	9501      	str	r5, [sp, #4]
 8019d3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d40:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019d42:	9304      	str	r3, [sp, #16]
 8019d44:	9602      	str	r6, [sp, #8]
 8019d46:	9703      	str	r7, [sp, #12]
 8019d48:	9505      	str	r5, [sp, #20]
 8019d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d4c:	6864      	ldr	r4, [r4, #4]
 8019d4e:	47a0      	blx	r4
 8019d50:	e704      	b.n	8019b5c <LCD__DrawBitmap_1bpp+0x34>
 8019d52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019d54:	464a      	mov	r2, r9
 8019d56:	4628      	mov	r0, r5
 8019d58:	e7b3      	b.n	8019cc2 <LCD__DrawBitmap_1bpp+0x19a>
 8019d5a:	bf00      	nop
 8019d5c:	2002cb84 	.word	0x2002cb84
 8019d60:	2002cbcc 	.word	0x2002cbcc
 8019d64:	2000027c 	.word	0x2000027c

08019d68 <LCD_DrawBitmap>:
 8019d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6c:	4cb5      	ldr	r4, [pc, #724]	; (801a044 <LCD_DrawBitmap+0x2dc>)
 8019d6e:	b091      	sub	sp, #68	; 0x44
 8019d70:	6825      	ldr	r5, [r4, #0]
 8019d72:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019d76:	920a      	str	r2, [sp, #40]	; 0x28
 8019d78:	4604      	mov	r4, r0
 8019d7a:	4689      	mov	r9, r1
 8019d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8019d7e:	b185      	cbz	r5, 8019da2 <LCD_DrawBitmap+0x3a>
 8019d80:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8019d82:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8019d84:	9401      	str	r4, [sp, #4]
 8019d86:	9602      	str	r6, [sp, #8]
 8019d88:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8019d8a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8019d8c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8019d8e:	f8cd a000 	str.w	sl, [sp]
 8019d92:	9703      	str	r7, [sp, #12]
 8019d94:	9404      	str	r4, [sp, #16]
 8019d96:	9605      	str	r6, [sp, #20]
 8019d98:	682c      	ldr	r4, [r5, #0]
 8019d9a:	47a0      	blx	r4
 8019d9c:	b011      	add	sp, #68	; 0x44
 8019d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8019da4:	ea4a 0307 	orr.w	r3, sl, r7
 8019da8:	2b01      	cmp	r3, #1
 8019daa:	f000 8096 	beq.w	8019eda <LCD_DrawBitmap+0x172>
 8019dae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019db0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8019db2:	2f00      	cmp	r7, #0
 8019db4:	f1c6 0308 	rsb	r3, r6, #8
 8019db8:	ddf0      	ble.n	8019d9c <LCD_DrawBitmap+0x34>
 8019dba:	f8df c290 	ldr.w	ip, [pc, #656]	; 801a04c <LCD_DrawBitmap+0x2e4>
 8019dbe:	9109      	str	r1, [sp, #36]	; 0x24
 8019dc0:	46a8      	mov	r8, r5
 8019dc2:	4454      	add	r4, sl
 8019dc4:	950c      	str	r5, [sp, #48]	; 0x30
 8019dc6:	f8dc 0000 	ldr.w	r0, [ip]
 8019dca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019dcc:	940f      	str	r4, [sp, #60]	; 0x3c
 8019dce:	4699      	mov	r9, r3
 8019dd0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8019dd2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019dd6:	4425      	add	r5, r4
 8019dd8:	1e6e      	subs	r6, r5, #1
 8019dda:	42b3      	cmp	r3, r6
 8019ddc:	950d      	str	r5, [sp, #52]	; 0x34
 8019dde:	960b      	str	r6, [sp, #44]	; 0x2c
 8019de0:	dc6c      	bgt.n	8019ebc <LCD_DrawBitmap+0x154>
 8019de2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8019de6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019dea:	4563      	cmp	r3, ip
 8019dec:	db66      	blt.n	8019ebc <LCD_DrawBitmap+0x154>
 8019dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019df0:	2c00      	cmp	r4, #0
 8019df2:	dd63      	ble.n	8019ebc <LCD_DrawBitmap+0x154>
 8019df4:	2600      	movs	r6, #0
 8019df6:	4635      	mov	r5, r6
 8019df8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019dfa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019dfc:	e054      	b.n	8019ea8 <LCD_DrawBitmap+0x140>
 8019dfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019e00:	1a76      	subs	r6, r6, r1
 8019e02:	fa48 f309 	asr.w	r3, r8, r9
 8019e06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019e0a:	fa08 f801 	lsl.w	r8, r8, r1
 8019e0e:	fa5f f888 	uxtb.w	r8, r8
 8019e12:	d102      	bne.n	8019e1a <LCD_DrawBitmap+0xb2>
 8019e14:	7c01      	ldrb	r1, [r0, #16]
 8019e16:	0789      	lsls	r1, r1, #30
 8019e18:	d440      	bmi.n	8019e9c <LCD_DrawBitmap+0x134>
 8019e1a:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8019e1e:	f8db 1000 	ldr.w	r1, [fp]
 8019e22:	9108      	str	r1, [sp, #32]
 8019e24:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8019e26:	b109      	cbz	r1, 8019e2c <LCD_DrawBitmap+0xc4>
 8019e28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019e2c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019e30:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8019e34:	f8cb 3000 	str.w	r3, [fp]
 8019e38:	1e63      	subs	r3, r4, #1
 8019e3a:	428a      	cmp	r2, r1
 8019e3c:	bfa8      	it	ge
 8019e3e:	4611      	movge	r1, r2
 8019e40:	4563      	cmp	r3, ip
 8019e42:	bfa8      	it	ge
 8019e44:	4663      	movge	r3, ip
 8019e46:	4299      	cmp	r1, r3
 8019e48:	dc25      	bgt.n	8019e96 <LCD_DrawBitmap+0x12e>
 8019e4a:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8019e4e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019e52:	f8cd c018 	str.w	ip, [sp, #24]
 8019e56:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019e5a:	4594      	cmp	ip, r2
 8019e5c:	bfb8      	it	lt
 8019e5e:	4694      	movlt	ip, r2
 8019e60:	f8cd c01c 	str.w	ip, [sp, #28]
 8019e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e66:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019e6a:	4594      	cmp	ip, r2
 8019e6c:	bfa8      	it	ge
 8019e6e:	4694      	movge	ip, r2
 8019e70:	9a07      	ldr	r2, [sp, #28]
 8019e72:	4594      	cmp	ip, r2
 8019e74:	db0f      	blt.n	8019e96 <LCD_DrawBitmap+0x12e>
 8019e76:	7c40      	ldrb	r0, [r0, #17]
 8019e78:	4a73      	ldr	r2, [pc, #460]	; (801a048 <LCD_DrawBitmap+0x2e0>)
 8019e7a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8019e7e:	9a07      	ldr	r2, [sp, #28]
 8019e80:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8019e84:	f8cd c000 	str.w	ip, [sp]
 8019e88:	f8de c010 	ldr.w	ip, [lr, #16]
 8019e8c:	47e0      	blx	ip
 8019e8e:	4b6f      	ldr	r3, [pc, #444]	; (801a04c <LCD_DrawBitmap+0x2e4>)
 8019e90:	6818      	ldr	r0, [r3, #0]
 8019e92:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8019e96:	9908      	ldr	r1, [sp, #32]
 8019e98:	f8cb 1000 	str.w	r1, [fp]
 8019e9c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8019ea0:	3501      	adds	r5, #1
 8019ea2:	4565      	cmp	r5, ip
 8019ea4:	4454      	add	r4, sl
 8019ea6:	d009      	beq.n	8019ebc <LCD_DrawBitmap+0x154>
 8019ea8:	ebca 0204 	rsb	r2, sl, r4
 8019eac:	2e00      	cmp	r6, #0
 8019eae:	d1a6      	bne.n	8019dfe <LCD_DrawBitmap+0x96>
 8019eb0:	f897 8000 	ldrb.w	r8, [r7]
 8019eb4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019eb6:	464e      	mov	r6, r9
 8019eb8:	3701      	adds	r7, #1
 8019eba:	e7a2      	b.n	8019e02 <LCD_DrawBitmap+0x9a>
 8019ebc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019ebe:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8019ec0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019ec2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019ec4:	3401      	adds	r4, #1
 8019ec6:	4435      	add	r5, r6
 8019ec8:	42bc      	cmp	r4, r7
 8019eca:	940c      	str	r4, [sp, #48]	; 0x30
 8019ecc:	951e      	str	r5, [sp, #120]	; 0x78
 8019ece:	f43f af65 	beq.w	8019d9c <LCD_DrawBitmap+0x34>
 8019ed2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019ed4:	9409      	str	r4, [sp, #36]	; 0x24
 8019ed6:	4625      	mov	r5, r4
 8019ed8:	e77a      	b.n	8019dd0 <LCD_DrawBitmap+0x68>
 8019eda:	4b5c      	ldr	r3, [pc, #368]	; (801a04c <LCD_DrawBitmap+0x2e4>)
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8019ee2:	1a50      	subs	r0, r2, r1
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	f340 80c7 	ble.w	801a078 <LCD_DrawBitmap+0x310>
 8019eea:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8019eee:	ebc0 010c 	rsb	r1, r0, ip
 8019ef2:	2900      	cmp	r1, #0
 8019ef4:	f77f af52 	ble.w	8019d9c <LCD_DrawBitmap+0x34>
 8019ef8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8019efa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019efc:	fb05 6600 	mla	r6, r5, r0, r6
 8019f00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019f02:	961e      	str	r6, [sp, #120]	; 0x78
 8019f04:	444d      	add	r5, r9
 8019f06:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8019f0a:	3d01      	subs	r5, #1
 8019f0c:	1a28      	subs	r0, r5, r0
 8019f0e:	2800      	cmp	r0, #0
 8019f10:	dd03      	ble.n	8019f1a <LCD_DrawBitmap+0x1b2>
 8019f12:	1a09      	subs	r1, r1, r0
 8019f14:	2900      	cmp	r1, #0
 8019f16:	f77f af41 	ble.w	8019d9c <LCD_DrawBitmap+0x34>
 8019f1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019f1c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8019f20:	4425      	add	r5, r4
 8019f22:	3d01      	subs	r5, #1
 8019f24:	1a28      	subs	r0, r5, r0
 8019f26:	2800      	cmp	r0, #0
 8019f28:	dd02      	ble.n	8019f30 <LCD_DrawBitmap+0x1c8>
 8019f2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019f2c:	1a3f      	subs	r7, r7, r0
 8019f2e:	970a      	str	r7, [sp, #40]	; 0x28
 8019f30:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019f34:	4284      	cmp	r4, r0
 8019f36:	db18      	blt.n	8019f6a <LCD_DrawBitmap+0x202>
 8019f38:	2500      	movs	r5, #0
 8019f3a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019f3c:	2f00      	cmp	r7, #0
 8019f3e:	f77f af2d 	ble.w	8019d9c <LCD_DrawBitmap+0x34>
 8019f42:	7c58      	ldrb	r0, [r3, #17]
 8019f44:	4b40      	ldr	r3, [pc, #256]	; (801a048 <LCD_DrawBitmap+0x2e0>)
 8019f46:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8019f48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f4e:	68c6      	ldr	r6, [r0, #12]
 8019f50:	9701      	str	r7, [sp, #4]
 8019f52:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8019f54:	9702      	str	r7, [sp, #8]
 8019f56:	9504      	str	r5, [sp, #16]
 8019f58:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019f5a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019f5c:	9100      	str	r1, [sp, #0]
 8019f5e:	9703      	str	r7, [sp, #12]
 8019f60:	9505      	str	r5, [sp, #20]
 8019f62:	4621      	mov	r1, r4
 8019f64:	6874      	ldr	r4, [r6, #4]
 8019f66:	47a0      	blx	r4
 8019f68:	e718      	b.n	8019d9c <LCD_DrawBitmap+0x34>
 8019f6a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8019f6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8019f70:	1b05      	subs	r5, r0, r4
 8019f72:	ebc5 0c0c 	rsb	ip, r5, ip
 8019f76:	1e7e      	subs	r6, r7, #1
 8019f78:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8019f7c:	2e1f      	cmp	r6, #31
 8019f7e:	d8dc      	bhi.n	8019f3a <LCD_DrawBitmap+0x1d2>
 8019f80:	a701      	add	r7, pc, #4	; (adr r7, 8019f88 <LCD_DrawBitmap+0x220>)
 8019f82:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 8019f86:	bf00      	nop
 8019f88:	0801a065 	.word	0x0801a065
 8019f8c:	0801a051 	.word	0x0801a051
 8019f90:	08019f3b 	.word	0x08019f3b
 8019f94:	0801a031 	.word	0x0801a031
 8019f98:	08019f3b 	.word	0x08019f3b
 8019f9c:	08019f3b 	.word	0x08019f3b
 8019fa0:	08019f3b 	.word	0x08019f3b
 8019fa4:	0801a025 	.word	0x0801a025
 8019fa8:	08019f3b 	.word	0x08019f3b
 8019fac:	08019f3b 	.word	0x08019f3b
 8019fb0:	08019f3b 	.word	0x08019f3b
 8019fb4:	08019f3b 	.word	0x08019f3b
 8019fb8:	08019f3b 	.word	0x08019f3b
 8019fbc:	08019f3b 	.word	0x08019f3b
 8019fc0:	08019f3b 	.word	0x08019f3b
 8019fc4:	0801a017 	.word	0x0801a017
 8019fc8:	08019f3b 	.word	0x08019f3b
 8019fcc:	08019f3b 	.word	0x08019f3b
 8019fd0:	08019f3b 	.word	0x08019f3b
 8019fd4:	08019f3b 	.word	0x08019f3b
 8019fd8:	08019f3b 	.word	0x08019f3b
 8019fdc:	08019f3b 	.word	0x08019f3b
 8019fe0:	08019f3b 	.word	0x08019f3b
 8019fe4:	0801a009 	.word	0x0801a009
 8019fe8:	08019f3b 	.word	0x08019f3b
 8019fec:	08019f3b 	.word	0x08019f3b
 8019ff0:	08019f3b 	.word	0x08019f3b
 8019ff4:	08019f3b 	.word	0x08019f3b
 8019ff8:	08019f3b 	.word	0x08019f3b
 8019ffc:	08019f3b 	.word	0x08019f3b
 801a000:	08019f3b 	.word	0x08019f3b
 801a004:	0801a009 	.word	0x0801a009
 801a008:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801a00a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 801a00e:	961e      	str	r6, [sp, #120]	; 0x78
 801a010:	4604      	mov	r4, r0
 801a012:	2500      	movs	r5, #0
 801a014:	e791      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a016:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801a018:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801a01c:	941e      	str	r4, [sp, #120]	; 0x78
 801a01e:	2500      	movs	r5, #0
 801a020:	4604      	mov	r4, r0
 801a022:	e78a      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a024:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a026:	442f      	add	r7, r5
 801a028:	971e      	str	r7, [sp, #120]	; 0x78
 801a02a:	4604      	mov	r4, r0
 801a02c:	2500      	movs	r5, #0
 801a02e:	e784      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a030:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801a032:	f025 0001 	bic.w	r0, r5, #1
 801a036:	eb06 0665 	add.w	r6, r6, r5, asr #1
 801a03a:	961e      	str	r6, [sp, #120]	; 0x78
 801a03c:	4404      	add	r4, r0
 801a03e:	f005 0501 	and.w	r5, r5, #1
 801a042:	e77a      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a044:	2002cb84 	.word	0x2002cb84
 801a048:	2002cbcc 	.word	0x2002cbcc
 801a04c:	2000027c 	.word	0x2000027c
 801a050:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a052:	f025 0003 	bic.w	r0, r5, #3
 801a056:	eb07 07a5 	add.w	r7, r7, r5, asr #2
 801a05a:	971e      	str	r7, [sp, #120]	; 0x78
 801a05c:	4404      	add	r4, r0
 801a05e:	f005 0503 	and.w	r5, r5, #3
 801a062:	e76a      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a064:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801a066:	f025 0007 	bic.w	r0, r5, #7
 801a06a:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 801a06e:	961e      	str	r6, [sp, #120]	; 0x78
 801a070:	4404      	add	r4, r0
 801a072:	f005 0507 	and.w	r5, r5, #7
 801a076:	e760      	b.n	8019f3a <LCD_DrawBitmap+0x1d2>
 801a078:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a07a:	464a      	mov	r2, r9
 801a07c:	460d      	mov	r5, r1
 801a07e:	e741      	b.n	8019f04 <LCD_DrawBitmap+0x19c>

0801a080 <LCD_SetClipRectMax>:
 801a080:	b508      	push	{r3, lr}
 801a082:	4a05      	ldr	r2, [pc, #20]	; (801a098 <LCD_SetClipRectMax+0x18>)
 801a084:	4b05      	ldr	r3, [pc, #20]	; (801a09c <LCD_SetClipRectMax+0x1c>)
 801a086:	6811      	ldr	r1, [r2, #0]
 801a088:	7c4a      	ldrb	r2, [r1, #17]
 801a08a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a08e:	68c3      	ldr	r3, [r0, #12]
 801a090:	3108      	adds	r1, #8
 801a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a094:	4798      	blx	r3
 801a096:	bd08      	pop	{r3, pc}
 801a098:	2000027c 	.word	0x2000027c
 801a09c:	2002cbcc 	.word	0x2002cbcc

0801a0a0 <emWin_LCD_Init>:
 801a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0a2:	4e3e      	ldr	r6, [pc, #248]	; (801a19c <emWin_LCD_Init+0xfc>)
 801a0a4:	4f3e      	ldr	r7, [pc, #248]	; (801a1a0 <emWin_LCD_Init+0x100>)
 801a0a6:	6831      	ldr	r1, [r6, #0]
 801a0a8:	7c4b      	ldrb	r3, [r1, #17]
 801a0aa:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801a0ae:	68c3      	ldr	r3, [r0, #12]
 801a0b0:	b085      	sub	sp, #20
 801a0b2:	3108      	adds	r1, #8
 801a0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0b6:	4798      	blx	r3
 801a0b8:	f006 fed8 	bl	8020e6c <LCD_InitColors>
 801a0bc:	4604      	mov	r4, r0
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	d167      	bne.n	801a192 <emWin_LCD_Init+0xf2>
 801a0c2:	4605      	mov	r5, r0
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	f001 fe67 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801a0ca:	210c      	movs	r1, #12
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	3501      	adds	r5, #1
 801a0d0:	eb0d 0001 	add.w	r0, sp, r1
 801a0d4:	9303      	str	r3, [sp, #12]
 801a0d6:	b143      	cbz	r3, 801a0ea <emWin_LCD_Init+0x4a>
 801a0d8:	68db      	ldr	r3, [r3, #12]
 801a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0dc:	4798      	blx	r3
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2800      	cmp	r0, #0
 801a0e2:	d059      	beq.n	801a198 <emWin_LCD_Init+0xf8>
 801a0e4:	9803      	ldr	r0, [sp, #12]
 801a0e6:	4798      	blx	r3
 801a0e8:	4304      	orrs	r4, r0
 801a0ea:	2d02      	cmp	r5, #2
 801a0ec:	d1ea      	bne.n	801a0c4 <emWin_LCD_Init+0x24>
 801a0ee:	2c00      	cmp	r4, #0
 801a0f0:	d14f      	bne.n	801a192 <emWin_LCD_Init+0xf2>
 801a0f2:	f006 ff15 	bl	8020f20 <LCD_InitLUT>
 801a0f6:	4b2b      	ldr	r3, [pc, #172]	; (801a1a4 <emWin_LCD_Init+0x104>)
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d044      	beq.n	801a18c <emWin_LCD_Init+0xec>
 801a102:	4d29      	ldr	r5, [pc, #164]	; (801a1a8 <emWin_LCD_Init+0x108>)
 801a104:	2401      	movs	r4, #1
 801a106:	4620      	mov	r0, r4
 801a108:	f001 fe46 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801a10c:	4603      	mov	r3, r0
 801a10e:	9303      	str	r3, [sp, #12]
 801a110:	4620      	mov	r0, r4
 801a112:	3c01      	subs	r4, #1
 801a114:	2b00      	cmp	r3, #0
 801a116:	d037      	beq.n	801a188 <emWin_LCD_Init+0xe8>
 801a118:	f001 fa30 	bl	801b57c <GUI_SelectLayer>
 801a11c:	682b      	ldr	r3, [r5, #0]
 801a11e:	2004      	movs	r0, #4
 801a120:	689b      	ldr	r3, [r3, #8]
 801a122:	4798      	blx	r3
 801a124:	6830      	ldr	r0, [r6, #0]
 801a126:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a12a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 801a12e:	f643 7cff 	movw	ip, #16383	; 0x3fff
 801a132:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801a136:	4563      	cmp	r3, ip
 801a138:	bfa8      	it	ge
 801a13a:	4663      	movge	r3, ip
 801a13c:	4299      	cmp	r1, r3
 801a13e:	dc14      	bgt.n	801a16a <emWin_LCD_Init+0xca>
 801a140:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a144:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a148:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801a14c:	45e6      	cmp	lr, ip
 801a14e:	bfa8      	it	ge
 801a150:	46e6      	movge	lr, ip
 801a152:	4572      	cmp	r2, lr
 801a154:	dc09      	bgt.n	801a16a <emWin_LCD_Init+0xca>
 801a156:	7c40      	ldrb	r0, [r0, #17]
 801a158:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801a15c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a160:	f8cd e000 	str.w	lr, [sp]
 801a164:	f8dc c010 	ldr.w	ip, [ip, #16]
 801a168:	47e0      	blx	ip
 801a16a:	682b      	ldr	r3, [r5, #0]
 801a16c:	2000      	movs	r0, #0
 801a16e:	689b      	ldr	r3, [r3, #8]
 801a170:	4798      	blx	r3
 801a172:	a804      	add	r0, sp, #16
 801a174:	210e      	movs	r1, #14
 801a176:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801a17a:	68db      	ldr	r3, [r3, #12]
 801a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a17e:	4798      	blx	r3
 801a180:	4603      	mov	r3, r0
 801a182:	b108      	cbz	r0, 801a188 <emWin_LCD_Init+0xe8>
 801a184:	9803      	ldr	r0, [sp, #12]
 801a186:	4798      	blx	r3
 801a188:	1c63      	adds	r3, r4, #1
 801a18a:	d1bc      	bne.n	801a106 <emWin_LCD_Init+0x66>
 801a18c:	2000      	movs	r0, #0
 801a18e:	b005      	add	sp, #20
 801a190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a192:	4620      	mov	r0, r4
 801a194:	b005      	add	sp, #20
 801a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a198:	2001      	movs	r0, #1
 801a19a:	e7fb      	b.n	801a194 <emWin_LCD_Init+0xf4>
 801a19c:	2000027c 	.word	0x2000027c
 801a1a0:	2002cbcc 	.word	0x2002cbcc
 801a1a4:	2000028c 	.word	0x2000028c
 801a1a8:	2000024c 	.word	0x2000024c

0801a1ac <LCD_Color2Index>:
 801a1ac:	b508      	push	{r3, lr}
 801a1ae:	4a05      	ldr	r2, [pc, #20]	; (801a1c4 <LCD_Color2Index+0x18>)
 801a1b0:	4b05      	ldr	r3, [pc, #20]	; (801a1c8 <LCD_Color2Index+0x1c>)
 801a1b2:	6812      	ldr	r2, [r2, #0]
 801a1b4:	7c52      	ldrb	r2, [r2, #17]
 801a1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1ba:	691b      	ldr	r3, [r3, #16]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	4798      	blx	r3
 801a1c0:	bd08      	pop	{r3, pc}
 801a1c2:	bf00      	nop
 801a1c4:	2000027c 	.word	0x2000027c
 801a1c8:	2002cbcc 	.word	0x2002cbcc

0801a1cc <LCD_Index2Color>:
 801a1cc:	b508      	push	{r3, lr}
 801a1ce:	4a05      	ldr	r2, [pc, #20]	; (801a1e4 <LCD_Index2Color+0x18>)
 801a1d0:	4b05      	ldr	r3, [pc, #20]	; (801a1e8 <LCD_Index2Color+0x1c>)
 801a1d2:	6812      	ldr	r2, [r2, #0]
 801a1d4:	7c52      	ldrb	r2, [r2, #17]
 801a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1da:	691b      	ldr	r3, [r3, #16]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	4798      	blx	r3
 801a1e0:	bd08      	pop	{r3, pc}
 801a1e2:	bf00      	nop
 801a1e4:	2000027c 	.word	0x2000027c
 801a1e8:	2002cbcc 	.word	0x2002cbcc

0801a1ec <LCD_SetColorIndex>:
 801a1ec:	4b04      	ldr	r3, [pc, #16]	; (801a200 <LCD_SetColorIndex+0x14>)
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	7c1a      	ldrb	r2, [r3, #16]
 801a1f2:	0752      	lsls	r2, r2, #29
 801a1f4:	bf4c      	ite	mi
 801a1f6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 801a1f8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 801a1fa:	6018      	str	r0, [r3, #0]
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop
 801a200:	2000027c 	.word	0x2000027c

0801a204 <LCD_SetBkColorIndex>:
 801a204:	4b04      	ldr	r3, [pc, #16]	; (801a218 <LCD_SetBkColorIndex+0x14>)
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	7c1a      	ldrb	r2, [r3, #16]
 801a20a:	0752      	lsls	r2, r2, #29
 801a20c:	bf4c      	ite	mi
 801a20e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 801a210:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 801a212:	6018      	str	r0, [r3, #0]
 801a214:	4770      	bx	lr
 801a216:	bf00      	nop
 801a218:	2000027c 	.word	0x2000027c

0801a21c <LCD_SetBkColor>:
 801a21c:	b508      	push	{r3, lr}
 801a21e:	4b02      	ldr	r3, [pc, #8]	; (801a228 <LCD_SetBkColor+0xc>)
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	685b      	ldr	r3, [r3, #4]
 801a224:	4798      	blx	r3
 801a226:	bd08      	pop	{r3, pc}
 801a228:	2000024c 	.word	0x2000024c

0801a22c <LCD_SetColor>:
 801a22c:	b508      	push	{r3, lr}
 801a22e:	4b02      	ldr	r3, [pc, #8]	; (801a238 <LCD_SetColor+0xc>)
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	4798      	blx	r3
 801a236:	bd08      	pop	{r3, pc}
 801a238:	2000024c 	.word	0x2000024c

0801a23c <LCD_SetPixelIndex>:
 801a23c:	4b10      	ldr	r3, [pc, #64]	; (801a280 <LCD_SetPixelIndex+0x44>)
 801a23e:	b570      	push	{r4, r5, r6, lr}
 801a240:	681c      	ldr	r4, [r3, #0]
 801a242:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801a246:	4285      	cmp	r5, r0
 801a248:	460e      	mov	r6, r1
 801a24a:	4613      	mov	r3, r2
 801a24c:	dc0b      	bgt.n	801a266 <LCD_SetPixelIndex+0x2a>
 801a24e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a252:	4288      	cmp	r0, r1
 801a254:	dc07      	bgt.n	801a266 <LCD_SetPixelIndex+0x2a>
 801a256:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801a25a:	42b2      	cmp	r2, r6
 801a25c:	dc03      	bgt.n	801a266 <LCD_SetPixelIndex+0x2a>
 801a25e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 801a262:	4296      	cmp	r6, r2
 801a264:	dd00      	ble.n	801a268 <LCD_SetPixelIndex+0x2c>
 801a266:	bd70      	pop	{r4, r5, r6, pc}
 801a268:	7c61      	ldrb	r1, [r4, #17]
 801a26a:	4a06      	ldr	r2, [pc, #24]	; (801a284 <LCD_SetPixelIndex+0x48>)
 801a26c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 801a270:	68e5      	ldr	r5, [r4, #12]
 801a272:	4601      	mov	r1, r0
 801a274:	4632      	mov	r2, r6
 801a276:	69ad      	ldr	r5, [r5, #24]
 801a278:	4620      	mov	r0, r4
 801a27a:	47a8      	blx	r5
 801a27c:	e7f3      	b.n	801a266 <LCD_SetPixelIndex+0x2a>
 801a27e:	bf00      	nop
 801a280:	2000027c 	.word	0x2000027c
 801a284:	2002cbcc 	.word	0x2002cbcc

0801a288 <GUI__CalcTextRect>:
 801a288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a28c:	460d      	mov	r5, r1
 801a28e:	4614      	mov	r4, r2
 801a290:	461e      	mov	r6, r3
 801a292:	2800      	cmp	r0, #0
 801a294:	d042      	beq.n	801a31c <GUI__CalcTextRect+0x94>
 801a296:	f001 fd75 	bl	801bd84 <GUI_GetStringDistX>
 801a29a:	f006 0303 	and.w	r3, r6, #3
 801a29e:	2b01      	cmp	r3, #1
 801a2a0:	4680      	mov	r8, r0
 801a2a2:	d02b      	beq.n	801a2fc <GUI__CalcTextRect+0x74>
 801a2a4:	2b02      	cmp	r3, #2
 801a2a6:	d142      	bne.n	801a32e <GUI__CalcTextRect+0xa6>
 801a2a8:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a2ac:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801a2b0:	1aff      	subs	r7, r7, r3
 801a2b2:	3701      	adds	r7, #1
 801a2b4:	1a3f      	subs	r7, r7, r0
 801a2b6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801a2ba:	eb03 0767 	add.w	r7, r3, r7, asr #1
 801a2be:	f006 060c 	and.w	r6, r6, #12
 801a2c2:	f002 fd5f 	bl	801cd84 <GUI_GetFontDistY>
 801a2c6:	2e04      	cmp	r6, #4
 801a2c8:	d023      	beq.n	801a312 <GUI__CalcTextRect+0x8a>
 801a2ca:	2e0c      	cmp	r6, #12
 801a2cc:	d12c      	bne.n	801a328 <GUI__CalcTextRect+0xa0>
 801a2ce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a2d2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a2d6:	1a9b      	subs	r3, r3, r2
 801a2d8:	3301      	adds	r3, #1
 801a2da:	1a1b      	subs	r3, r3, r0
 801a2dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a2e0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a2e4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a2e8:	3801      	subs	r0, #1
 801a2ea:	44b8      	add	r8, r7
 801a2ec:	4418      	add	r0, r3
 801a2ee:	f8a4 8004 	strh.w	r8, [r4, #4]
 801a2f2:	80e0      	strh	r0, [r4, #6]
 801a2f4:	8027      	strh	r7, [r4, #0]
 801a2f6:	8063      	strh	r3, [r4, #2]
 801a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2fc:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801a300:	f006 060c 	and.w	r6, r6, #12
 801a304:	1a3f      	subs	r7, r7, r0
 801a306:	f002 fd3d 	bl	801cd84 <GUI_GetFontDistY>
 801a30a:	2e04      	cmp	r6, #4
 801a30c:	f107 0701 	add.w	r7, r7, #1
 801a310:	d1db      	bne.n	801a2ca <GUI__CalcTextRect+0x42>
 801a312:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a316:	1a1b      	subs	r3, r3, r0
 801a318:	3301      	adds	r3, #1
 801a31a:	e7e3      	b.n	801a2e4 <GUI__CalcTextRect+0x5c>
 801a31c:	680b      	ldr	r3, [r1, #0]
 801a31e:	684a      	ldr	r2, [r1, #4]
 801a320:	6062      	str	r2, [r4, #4]
 801a322:	6023      	str	r3, [r4, #0]
 801a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a328:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a32c:	e7da      	b.n	801a2e4 <GUI__CalcTextRect+0x5c>
 801a32e:	f9b5 7000 	ldrsh.w	r7, [r5]
 801a332:	e7c4      	b.n	801a2be <GUI__CalcTextRect+0x36>

0801a334 <GUI__DivideRound32>:
 801a334:	b141      	cbz	r1, 801a348 <GUI__DivideRound32+0x14>
 801a336:	2800      	cmp	r0, #0
 801a338:	bfb4      	ite	lt
 801a33a:	eba0 0061 	sublt.w	r0, r0, r1, asr #1
 801a33e:	eb00 0061 	addge.w	r0, r0, r1, asr #1
 801a342:	fb90 f0f1 	sdiv	r0, r0, r1
 801a346:	4770      	bx	lr
 801a348:	4608      	mov	r0, r1
 801a34a:	4770      	bx	lr

0801a34c <GUI__HandleEOLine>:
 801a34c:	b510      	push	{r4, lr}
 801a34e:	4604      	mov	r4, r0
 801a350:	b082      	sub	sp, #8
 801a352:	a802      	add	r0, sp, #8
 801a354:	6822      	ldr	r2, [r4, #0]
 801a356:	f840 2d04 	str.w	r2, [r0, #-4]!
 801a35a:	f000 fd27 	bl	801adac <GUI_UC__GetCharCodeInc>
 801a35e:	b2c0      	uxtb	r0, r0
 801a360:	b148      	cbz	r0, 801a376 <GUI__HandleEOLine+0x2a>
 801a362:	280a      	cmp	r0, #10
 801a364:	d002      	beq.n	801a36c <GUI__HandleEOLine+0x20>
 801a366:	2000      	movs	r0, #0
 801a368:	b002      	add	sp, #8
 801a36a:	bd10      	pop	{r4, pc}
 801a36c:	9b01      	ldr	r3, [sp, #4]
 801a36e:	6023      	str	r3, [r4, #0]
 801a370:	2000      	movs	r0, #0
 801a372:	b002      	add	sp, #8
 801a374:	bd10      	pop	{r4, pc}
 801a376:	2001      	movs	r0, #1
 801a378:	b002      	add	sp, #8
 801a37a:	bd10      	pop	{r4, pc}

0801a37c <GUI__IntersectRect>:
 801a37c:	880b      	ldrh	r3, [r1, #0]
 801a37e:	b410      	push	{r4}
 801a380:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a384:	b21a      	sxth	r2, r3
 801a386:	4294      	cmp	r4, r2
 801a388:	bfb8      	it	lt
 801a38a:	8003      	strhlt	r3, [r0, #0]
 801a38c:	884b      	ldrh	r3, [r1, #2]
 801a38e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a392:	b21a      	sxth	r2, r3
 801a394:	4294      	cmp	r4, r2
 801a396:	bfb8      	it	lt
 801a398:	8043      	strhlt	r3, [r0, #2]
 801a39a:	888b      	ldrh	r3, [r1, #4]
 801a39c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a3a0:	b21a      	sxth	r2, r3
 801a3a2:	4294      	cmp	r4, r2
 801a3a4:	bfc8      	it	gt
 801a3a6:	8083      	strhgt	r3, [r0, #4]
 801a3a8:	88cb      	ldrh	r3, [r1, #6]
 801a3aa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3b2:	b21a      	sxth	r2, r3
 801a3b4:	4291      	cmp	r1, r2
 801a3b6:	bfc8      	it	gt
 801a3b8:	80c3      	strhgt	r3, [r0, #6]
 801a3ba:	4770      	bx	lr

0801a3bc <GUI__IntersectRects>:
 801a3bc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801a3c0:	f9b2 c000 	ldrsh.w	ip, [r2]
 801a3c4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801a3c8:	f9b1 8000 	ldrsh.w	r8, [r1]
 801a3cc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801a3d0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801a3d4:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 801a3d8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801a3dc:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 801a3e0:	429f      	cmp	r7, r3
 801a3e2:	bfb8      	it	lt
 801a3e4:	463b      	movlt	r3, r7
 801a3e6:	45e0      	cmp	r8, ip
 801a3e8:	bfac      	ite	ge
 801a3ea:	4642      	movge	r2, r8
 801a3ec:	4662      	movlt	r2, ip
 801a3ee:	b292      	uxth	r2, r2
 801a3f0:	b29b      	uxth	r3, r3
 801a3f2:	42a6      	cmp	r6, r4
 801a3f4:	bfa8      	it	ge
 801a3f6:	4634      	movge	r4, r6
 801a3f8:	428d      	cmp	r5, r1
 801a3fa:	bfb8      	it	lt
 801a3fc:	4629      	movlt	r1, r5
 801a3fe:	fa0f fc82 	sxth.w	ip, r2
 801a402:	b21f      	sxth	r7, r3
 801a404:	b2a4      	uxth	r4, r4
 801a406:	b289      	uxth	r1, r1
 801a408:	45bc      	cmp	ip, r7
 801a40a:	8002      	strh	r2, [r0, #0]
 801a40c:	8083      	strh	r3, [r0, #4]
 801a40e:	8044      	strh	r4, [r0, #2]
 801a410:	80c1      	strh	r1, [r0, #6]
 801a412:	dc08      	bgt.n	801a426 <GUI__IntersectRects+0x6a>
 801a414:	b224      	sxth	r4, r4
 801a416:	b209      	sxth	r1, r1
 801a418:	428c      	cmp	r4, r1
 801a41a:	bfcc      	ite	gt
 801a41c:	2000      	movgt	r0, #0
 801a41e:	2001      	movle	r0, #1
 801a420:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801a424:	4770      	bx	lr
 801a426:	2000      	movs	r0, #0
 801a428:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801a42c:	4770      	bx	lr
 801a42e:	bf00      	nop

0801a430 <GUI__memset>:
 801a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a432:	b2c9      	uxtb	r1, r1
 801a434:	4607      	mov	r7, r0
 801a436:	b14a      	cbz	r2, 801a44c <GUI__memset+0x1c>
 801a438:	0784      	lsls	r4, r0, #30
 801a43a:	4603      	mov	r3, r0
 801a43c:	d008      	beq.n	801a450 <GUI__memset+0x20>
 801a43e:	e001      	b.n	801a444 <GUI__memset+0x14>
 801a440:	0798      	lsls	r0, r3, #30
 801a442:	d005      	beq.n	801a450 <GUI__memset+0x20>
 801a444:	3a01      	subs	r2, #1
 801a446:	f803 1b01 	strb.w	r1, [r3], #1
 801a44a:	d1f9      	bne.n	801a440 <GUI__memset+0x10>
 801a44c:	4638      	mov	r0, r7
 801a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a450:	0890      	lsrs	r0, r2, #2
 801a452:	4684      	mov	ip, r0
 801a454:	b320      	cbz	r0, 801a4a0 <GUI__memset+0x70>
 801a456:	eb01 2501 	add.w	r5, r1, r1, lsl #8
 801a45a:	2803      	cmp	r0, #3
 801a45c:	f002 0203 	and.w	r2, r2, #3
 801a460:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 801a464:	dd12      	ble.n	801a48c <GUI__memset+0x5c>
 801a466:	461c      	mov	r4, r3
 801a468:	4606      	mov	r6, r0
 801a46a:	3e04      	subs	r6, #4
 801a46c:	2e03      	cmp	r6, #3
 801a46e:	6025      	str	r5, [r4, #0]
 801a470:	6065      	str	r5, [r4, #4]
 801a472:	60a5      	str	r5, [r4, #8]
 801a474:	60e5      	str	r5, [r4, #12]
 801a476:	f104 0410 	add.w	r4, r4, #16
 801a47a:	dcf6      	bgt.n	801a46a <GUI__memset+0x3a>
 801a47c:	3804      	subs	r0, #4
 801a47e:	0884      	lsrs	r4, r0, #2
 801a480:	1c66      	adds	r6, r4, #1
 801a482:	ebb0 0c84 	subs.w	ip, r0, r4, lsl #2
 801a486:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 801a48a:	d007      	beq.n	801a49c <GUI__memset+0x6c>
 801a48c:	461e      	mov	r6, r3
 801a48e:	4664      	mov	r4, ip
 801a490:	3c01      	subs	r4, #1
 801a492:	f846 5b04 	str.w	r5, [r6], #4
 801a496:	d1fb      	bne.n	801a490 <GUI__memset+0x60>
 801a498:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801a49c:	2a00      	cmp	r2, #0
 801a49e:	d0d5      	beq.n	801a44c <GUI__memset+0x1c>
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f008 fa4c 	bl	802293e <memset>
 801a4a6:	4638      	mov	r0, r7
 801a4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4aa:	bf00      	nop

0801a4ac <GUI__ReduceRect>:
 801a4ac:	b470      	push	{r4, r5, r6}
 801a4ae:	88cb      	ldrh	r3, [r1, #6]
 801a4b0:	880e      	ldrh	r6, [r1, #0]
 801a4b2:	888d      	ldrh	r5, [r1, #4]
 801a4b4:	884c      	ldrh	r4, [r1, #2]
 801a4b6:	b292      	uxth	r2, r2
 801a4b8:	4416      	add	r6, r2
 801a4ba:	1aad      	subs	r5, r5, r2
 801a4bc:	4414      	add	r4, r2
 801a4be:	1a9a      	subs	r2, r3, r2
 801a4c0:	8006      	strh	r6, [r0, #0]
 801a4c2:	8085      	strh	r5, [r0, #4]
 801a4c4:	8044      	strh	r4, [r0, #2]
 801a4c6:	80c2      	strh	r2, [r0, #6]
 801a4c8:	bc70      	pop	{r4, r5, r6}
 801a4ca:	4770      	bx	lr

0801a4cc <GUI__SetText>:
 801a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4ce:	6807      	ldr	r7, [r0, #0]
 801a4d0:	b083      	sub	sp, #12
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	460d      	mov	r5, r1
 801a4d6:	b9c7      	cbnz	r7, 801a50a <GUI__SetText+0x3e>
 801a4d8:	2d00      	cmp	r5, #0
 801a4da:	d05a      	beq.n	801a592 <GUI__SetText+0xc6>
 801a4dc:	f04f 32ff 	mov.w	r2, #4294967295
 801a4e0:	e000      	b.n	801a4e4 <GUI__SetText+0x18>
 801a4e2:	461a      	mov	r2, r3
 801a4e4:	1c53      	adds	r3, r2, #1
 801a4e6:	5cec      	ldrb	r4, [r5, r3]
 801a4e8:	2c00      	cmp	r4, #0
 801a4ea:	d1fa      	bne.n	801a4e2 <GUI__SetText+0x16>
 801a4ec:	4638      	mov	r0, r7
 801a4ee:	1c94      	adds	r4, r2, #2
 801a4f0:	f003 fbaa 	bl	801dc48 <GUI_ALLOC_GetSize>
 801a4f4:	4284      	cmp	r4, r0
 801a4f6:	d026      	beq.n	801a546 <GUI__SetText+0x7a>
 801a4f8:	4620      	mov	r0, r4
 801a4fa:	f003 fa87 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 801a4fe:	4607      	mov	r7, r0
 801a500:	2800      	cmp	r0, #0
 801a502:	d130      	bne.n	801a566 <GUI__SetText+0x9a>
 801a504:	2000      	movs	r0, #0
 801a506:	b003      	add	sp, #12
 801a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a50a:	4638      	mov	r0, r7
 801a50c:	f003 fa96 	bl	801da3c <GUI_ALLOC_LockH>
 801a510:	4b23      	ldr	r3, [pc, #140]	; (801a5a0 <GUI__SetText+0xd4>)
 801a512:	9001      	str	r0, [sp, #4]
 801a514:	2d00      	cmp	r5, #0
 801a516:	bf14      	ite	ne
 801a518:	462a      	movne	r2, r5
 801a51a:	461a      	moveq	r2, r3
 801a51c:	2800      	cmp	r0, #0
 801a51e:	bf08      	it	eq
 801a520:	4618      	moveq	r0, r3
 801a522:	7813      	ldrb	r3, [r2, #0]
 801a524:	7801      	ldrb	r1, [r0, #0]
 801a526:	428b      	cmp	r3, r1
 801a528:	d109      	bne.n	801a53e <GUI__SetText+0x72>
 801a52a:	b373      	cbz	r3, 801a58a <GUI__SetText+0xbe>
 801a52c:	4604      	mov	r4, r0
 801a52e:	e000      	b.n	801a532 <GUI__SetText+0x66>
 801a530:	b35b      	cbz	r3, 801a58a <GUI__SetText+0xbe>
 801a532:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a536:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801a53a:	428b      	cmp	r3, r1
 801a53c:	d0f8      	beq.n	801a530 <GUI__SetText+0x64>
 801a53e:	a801      	add	r0, sp, #4
 801a540:	f003 fa8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801a544:	e7c8      	b.n	801a4d8 <GUI__SetText+0xc>
 801a546:	4638      	mov	r0, r7
 801a548:	f003 fa78 	bl	801da3c <GUI_ALLOC_LockH>
 801a54c:	ae02      	add	r6, sp, #8
 801a54e:	4b15      	ldr	r3, [pc, #84]	; (801a5a4 <GUI__SetText+0xd8>)
 801a550:	f846 0d04 	str.w	r0, [r6, #-4]!
 801a554:	4629      	mov	r1, r5
 801a556:	4622      	mov	r2, r4
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	4798      	blx	r3
 801a55c:	4630      	mov	r0, r6
 801a55e:	f003 fa7f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801a562:	2001      	movs	r0, #1
 801a564:	e7cf      	b.n	801a506 <GUI__SetText+0x3a>
 801a566:	f003 fa69 	bl	801da3c <GUI_ALLOC_LockH>
 801a56a:	ac02      	add	r4, sp, #8
 801a56c:	4629      	mov	r1, r5
 801a56e:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a572:	f008 fb25 	bl	8022bc0 <strcpy>
 801a576:	4620      	mov	r0, r4
 801a578:	f003 fa72 	bl	801da60 <GUI_ALLOC_UnlockH>
 801a57c:	4630      	mov	r0, r6
 801a57e:	f003 fb8f 	bl	801dca0 <GUI_ALLOC_FreePtr>
 801a582:	2001      	movs	r0, #1
 801a584:	6037      	str	r7, [r6, #0]
 801a586:	b003      	add	sp, #12
 801a588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a58a:	a801      	add	r0, sp, #4
 801a58c:	f003 fa68 	bl	801da60 <GUI_ALLOC_UnlockH>
 801a590:	e7b8      	b.n	801a504 <GUI__SetText+0x38>
 801a592:	4638      	mov	r0, r7
 801a594:	f003 fb58 	bl	801dc48 <GUI_ALLOC_GetSize>
 801a598:	2800      	cmp	r0, #0
 801a59a:	d0b3      	beq.n	801a504 <GUI__SetText+0x38>
 801a59c:	462c      	mov	r4, r5
 801a59e:	e7ab      	b.n	801a4f8 <GUI__SetText+0x2c>
 801a5a0:	08026810 	.word	0x08026810
 801a5a4:	20000254 	.word	0x20000254

0801a5a8 <GUI__sqrt32>:
 801a5a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801a5ac:	bf2c      	ite	cs
 801a5ae:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 801a5b2:	2300      	movcc	r3, #0
 801a5b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a5b8:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801a5bc:	bf28      	it	cs
 801a5be:	4608      	movcs	r0, r1
 801a5c0:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 801a5c4:	4290      	cmp	r0, r2
 801a5c6:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 801a5ca:	bf28      	it	cs
 801a5cc:	460b      	movcs	r3, r1
 801a5ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a5d2:	ebc2 0200 	rsb	r2, r2, r0
 801a5d6:	bf38      	it	cc
 801a5d8:	4602      	movcc	r2, r0
 801a5da:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 801a5de:	428a      	cmp	r2, r1
 801a5e0:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 801a5e4:	bf28      	it	cs
 801a5e6:	4603      	movcs	r3, r0
 801a5e8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a5ec:	ebc1 0102 	rsb	r1, r1, r2
 801a5f0:	bf38      	it	cc
 801a5f2:	4611      	movcc	r1, r2
 801a5f4:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 801a5f8:	4291      	cmp	r1, r2
 801a5fa:	f103 7000 	add.w	r0, r3, #33554432	; 0x2000000
 801a5fe:	bf28      	it	cs
 801a600:	4603      	movcs	r3, r0
 801a602:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a606:	ebc2 0201 	rsb	r2, r2, r1
 801a60a:	bf38      	it	cc
 801a60c:	460a      	movcc	r2, r1
 801a60e:	f503 0180 	add.w	r1, r3, #4194304	; 0x400000
 801a612:	428a      	cmp	r2, r1
 801a614:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 801a618:	bf28      	it	cs
 801a61a:	4603      	movcs	r3, r0
 801a61c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a620:	ebc1 0102 	rsb	r1, r1, r2
 801a624:	bf38      	it	cc
 801a626:	4611      	movcc	r1, r2
 801a628:	f503 1280 	add.w	r2, r3, #1048576	; 0x100000
 801a62c:	4291      	cmp	r1, r2
 801a62e:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 801a632:	bf28      	it	cs
 801a634:	4603      	movcs	r3, r0
 801a636:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a63a:	ebc2 0201 	rsb	r2, r2, r1
 801a63e:	bf38      	it	cc
 801a640:	460a      	movcc	r2, r1
 801a642:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
 801a646:	428a      	cmp	r2, r1
 801a648:	f503 2000 	add.w	r0, r3, #524288	; 0x80000
 801a64c:	bf28      	it	cs
 801a64e:	4603      	movcs	r3, r0
 801a650:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a654:	ebc1 0102 	rsb	r1, r1, r2
 801a658:	bf38      	it	cc
 801a65a:	4611      	movcc	r1, r2
 801a65c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801a660:	4291      	cmp	r1, r2
 801a662:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 801a666:	bf28      	it	cs
 801a668:	4603      	movcs	r3, r0
 801a66a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a66e:	ebc2 0201 	rsb	r2, r2, r1
 801a672:	bf38      	it	cc
 801a674:	460a      	movcc	r2, r1
 801a676:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 801a67a:	428a      	cmp	r2, r1
 801a67c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 801a680:	bf28      	it	cs
 801a682:	4603      	movcs	r3, r0
 801a684:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a688:	ebc1 0102 	rsb	r1, r1, r2
 801a68c:	bf38      	it	cc
 801a68e:	4611      	movcc	r1, r2
 801a690:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801a694:	4291      	cmp	r1, r2
 801a696:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 801a69a:	bf28      	it	cs
 801a69c:	4603      	movcs	r3, r0
 801a69e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a6a2:	ebc2 0201 	rsb	r2, r2, r1
 801a6a6:	bf38      	it	cc
 801a6a8:	460a      	movcc	r2, r1
 801a6aa:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 801a6ae:	428a      	cmp	r2, r1
 801a6b0:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 801a6b4:	bf28      	it	cs
 801a6b6:	4603      	movcs	r3, r0
 801a6b8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a6bc:	ebc1 0102 	rsb	r1, r1, r2
 801a6c0:	bf38      	it	cc
 801a6c2:	4611      	movcc	r1, r2
 801a6c4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801a6c8:	4291      	cmp	r1, r2
 801a6ca:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801a6ce:	bf28      	it	cs
 801a6d0:	4603      	movcs	r3, r0
 801a6d2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a6d6:	ebc2 0201 	rsb	r2, r2, r1
 801a6da:	bf38      	it	cc
 801a6dc:	460a      	movcc	r2, r1
 801a6de:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801a6e2:	428a      	cmp	r2, r1
 801a6e4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801a6e8:	bf28      	it	cs
 801a6ea:	4603      	movcs	r3, r0
 801a6ec:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a6f0:	ebc1 0102 	rsb	r1, r1, r2
 801a6f4:	bf38      	it	cc
 801a6f6:	4611      	movcc	r1, r2
 801a6f8:	f103 0210 	add.w	r2, r3, #16
 801a6fc:	4291      	cmp	r1, r2
 801a6fe:	f103 0020 	add.w	r0, r3, #32
 801a702:	bf28      	it	cs
 801a704:	4603      	movcs	r3, r0
 801a706:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a70a:	ebc2 0201 	rsb	r2, r2, r1
 801a70e:	bf38      	it	cc
 801a710:	460a      	movcc	r2, r1
 801a712:	1d19      	adds	r1, r3, #4
 801a714:	428a      	cmp	r2, r1
 801a716:	f103 0008 	add.w	r0, r3, #8
 801a71a:	bf28      	it	cs
 801a71c:	4603      	movcs	r3, r0
 801a71e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a722:	ebc1 0102 	rsb	r1, r1, r2
 801a726:	bf28      	it	cs
 801a728:	460a      	movcs	r2, r1
 801a72a:	1c98      	adds	r0, r3, #2
 801a72c:	1c59      	adds	r1, r3, #1
 801a72e:	4291      	cmp	r1, r2
 801a730:	bf88      	it	hi
 801a732:	4618      	movhi	r0, r3
 801a734:	0840      	lsrs	r0, r0, #1
 801a736:	4770      	bx	lr

0801a738 <GUI__ManageCache>:
 801a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a73a:	4b3a      	ldr	r3, [pc, #232]	; (801a824 <GUI__ManageCache+0xec>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	7c5c      	ldrb	r4, [r3, #17]
 801a740:	2c01      	cmp	r4, #1
 801a742:	b083      	sub	sp, #12
 801a744:	4605      	mov	r5, r0
 801a746:	dd02      	ble.n	801a74e <GUI__ManageCache+0x16>
 801a748:	2001      	movs	r0, #1
 801a74a:	b003      	add	sp, #12
 801a74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a74e:	4b36      	ldr	r3, [pc, #216]	; (801a828 <GUI__ManageCache+0xf0>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	b113      	cbz	r3, 801a75a <GUI__ManageCache+0x22>
 801a754:	4620      	mov	r0, r4
 801a756:	4629      	mov	r1, r5
 801a758:	4798      	blx	r3
 801a75a:	2d01      	cmp	r5, #1
 801a75c:	d026      	beq.n	801a7ac <GUI__ManageCache+0x74>
 801a75e:	2d02      	cmp	r5, #2
 801a760:	d00d      	beq.n	801a77e <GUI__ManageCache+0x46>
 801a762:	2d00      	cmp	r5, #0
 801a764:	d1f0      	bne.n	801a748 <GUI__ManageCache+0x10>
 801a766:	4d31      	ldr	r5, [pc, #196]	; (801a82c <GUI__ManageCache+0xf4>)
 801a768:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a76c:	2b01      	cmp	r3, #1
 801a76e:	d03e      	beq.n	801a7ee <GUI__ManageCache+0xb6>
 801a770:	2001      	movs	r0, #1
 801a772:	2b00      	cmp	r3, #0
 801a774:	bf18      	it	ne
 801a776:	3b01      	subne	r3, #1
 801a778:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 801a77c:	e7e5      	b.n	801a74a <GUI__ManageCache+0x12>
 801a77e:	4620      	mov	r0, r4
 801a780:	f001 fb0a 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801a784:	9001      	str	r0, [sp, #4]
 801a786:	2800      	cmp	r0, #0
 801a788:	d0de      	beq.n	801a748 <GUI__ManageCache+0x10>
 801a78a:	68c3      	ldr	r3, [r0, #12]
 801a78c:	210d      	movs	r1, #13
 801a78e:	a801      	add	r0, sp, #4
 801a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a792:	4798      	blx	r3
 801a794:	4604      	mov	r4, r0
 801a796:	2800      	cmp	r0, #0
 801a798:	d0d6      	beq.n	801a748 <GUI__ManageCache+0x10>
 801a79a:	4b25      	ldr	r3, [pc, #148]	; (801a830 <GUI__ManageCache+0xf8>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	b103      	cbz	r3, 801a7a2 <GUI__ManageCache+0x6a>
 801a7a0:	4798      	blx	r3
 801a7a2:	9801      	ldr	r0, [sp, #4]
 801a7a4:	2102      	movs	r1, #2
 801a7a6:	47a0      	blx	r4
 801a7a8:	2000      	movs	r0, #0
 801a7aa:	e7ce      	b.n	801a74a <GUI__ManageCache+0x12>
 801a7ac:	4e1f      	ldr	r6, [pc, #124]	; (801a82c <GUI__ManageCache+0xf4>)
 801a7ae:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 801a7b2:	b127      	cbz	r7, 801a7be <GUI__ManageCache+0x86>
 801a7b4:	3701      	adds	r7, #1
 801a7b6:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 801a7ba:	4628      	mov	r0, r5
 801a7bc:	e7c5      	b.n	801a74a <GUI__ManageCache+0x12>
 801a7be:	4620      	mov	r0, r4
 801a7c0:	f001 faea 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801a7c4:	9001      	str	r0, [sp, #4]
 801a7c6:	2800      	cmp	r0, #0
 801a7c8:	d0be      	beq.n	801a748 <GUI__ManageCache+0x10>
 801a7ca:	68c3      	ldr	r3, [r0, #12]
 801a7cc:	210d      	movs	r1, #13
 801a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7d0:	a801      	add	r0, sp, #4
 801a7d2:	4798      	blx	r3
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2800      	cmp	r0, #0
 801a7d8:	d0b6      	beq.n	801a748 <GUI__ManageCache+0x10>
 801a7da:	4629      	mov	r1, r5
 801a7dc:	9801      	ldr	r0, [sp, #4]
 801a7de:	4798      	blx	r3
 801a7e0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	4638      	mov	r0, r7
 801a7e8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 801a7ec:	e7ad      	b.n	801a74a <GUI__ManageCache+0x12>
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f001 fad2 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801a7f4:	9001      	str	r0, [sp, #4]
 801a7f6:	b188      	cbz	r0, 801a81c <GUI__ManageCache+0xe4>
 801a7f8:	68c3      	ldr	r3, [r0, #12]
 801a7fa:	210d      	movs	r1, #13
 801a7fc:	a801      	add	r0, sp, #4
 801a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a800:	4798      	blx	r3
 801a802:	4606      	mov	r6, r0
 801a804:	b150      	cbz	r0, 801a81c <GUI__ManageCache+0xe4>
 801a806:	4b0a      	ldr	r3, [pc, #40]	; (801a830 <GUI__ManageCache+0xf8>)
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	b103      	cbz	r3, 801a80e <GUI__ManageCache+0xd6>
 801a80c:	4798      	blx	r3
 801a80e:	9801      	ldr	r0, [sp, #4]
 801a810:	2100      	movs	r1, #0
 801a812:	47b0      	blx	r6
 801a814:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a818:	2000      	movs	r0, #0
 801a81a:	e7aa      	b.n	801a772 <GUI__ManageCache+0x3a>
 801a81c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a820:	2001      	movs	r0, #1
 801a822:	e7a6      	b.n	801a772 <GUI__ManageCache+0x3a>
 801a824:	2000027c 	.word	0x2000027c
 801a828:	2002b1b4 	.word	0x2002b1b4
 801a82c:	2002b1ac 	.word	0x2002b1ac
 801a830:	2002b1a8 	.word	0x2002b1a8

0801a834 <_GetCursorPosX>:
 801a834:	b530      	push	{r4, r5, lr}
 801a836:	b083      	sub	sp, #12
 801a838:	9001      	str	r0, [sp, #4]
 801a83a:	b162      	cbz	r2, 801a856 <_GetCursorPosX+0x22>
 801a83c:	4614      	mov	r4, r2
 801a83e:	2500      	movs	r5, #0
 801a840:	a801      	add	r0, sp, #4
 801a842:	f000 fab3 	bl	801adac <GUI_UC__GetCharCodeInc>
 801a846:	f002 faab 	bl	801cda0 <GUI_GetCharDistX>
 801a84a:	3c01      	subs	r4, #1
 801a84c:	4405      	add	r5, r0
 801a84e:	d1f7      	bne.n	801a840 <_GetCursorPosX+0xc>
 801a850:	4628      	mov	r0, r5
 801a852:	b003      	add	sp, #12
 801a854:	bd30      	pop	{r4, r5, pc}
 801a856:	4615      	mov	r5, r2
 801a858:	e7fa      	b.n	801a850 <_GetCursorPosX+0x1c>
 801a85a:	bf00      	nop

0801a85c <_GetCursorCharacter>:
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	4604      	mov	r4, r0
 801a860:	b10b      	cbz	r3, 801a866 <_GetCursorCharacter+0xa>
 801a862:	2200      	movs	r2, #0
 801a864:	601a      	str	r2, [r3, #0]
 801a866:	b141      	cbz	r1, 801a87a <_GetCursorCharacter+0x1e>
 801a868:	4e06      	ldr	r6, [pc, #24]	; (801a884 <_GetCursorCharacter+0x28>)
 801a86a:	460d      	mov	r5, r1
 801a86c:	6833      	ldr	r3, [r6, #0]
 801a86e:	4620      	mov	r0, r4
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	4798      	blx	r3
 801a874:	3d01      	subs	r5, #1
 801a876:	4404      	add	r4, r0
 801a878:	d1f8      	bne.n	801a86c <_GetCursorCharacter+0x10>
 801a87a:	4620      	mov	r0, r4
 801a87c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a880:	f000 ba6a 	b.w	801ad58 <GUI_UC_GetCharCode>
 801a884:	2002cbc4 	.word	0x2002cbc4

0801a888 <_GetCursorPosChar>:
 801a888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a88c:	1e4e      	subs	r6, r1, #1
 801a88e:	2e00      	cmp	r6, #0
 801a890:	4681      	mov	r9, r0
 801a892:	4690      	mov	r8, r2
 801a894:	dd1a      	ble.n	801a8cc <_GetCursorPosChar+0x44>
 801a896:	4604      	mov	r4, r0
 801a898:	2500      	movs	r5, #0
 801a89a:	e006      	b.n	801a8aa <_GetCursorPosChar+0x22>
 801a89c:	4545      	cmp	r5, r8
 801a89e:	dc0e      	bgt.n	801a8be <_GetCursorPosChar+0x36>
 801a8a0:	f000 fa4a 	bl	801ad38 <GUI_UC_GetCharSize>
 801a8a4:	3e01      	subs	r6, #1
 801a8a6:	4404      	add	r4, r0
 801a8a8:	d009      	beq.n	801a8be <_GetCursorPosChar+0x36>
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	f000 fa54 	bl	801ad58 <GUI_UC_GetCharCode>
 801a8b0:	4607      	mov	r7, r0
 801a8b2:	f002 fa75 	bl	801cda0 <GUI_GetCharDistX>
 801a8b6:	4405      	add	r5, r0
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	2f00      	cmp	r7, #0
 801a8bc:	d1ee      	bne.n	801a89c <_GetCursorPosChar+0x14>
 801a8be:	ebc9 0104 	rsb	r1, r9, r4
 801a8c2:	4648      	mov	r0, r9
 801a8c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8c8:	f000 ba98 	b.w	801adfc <GUI_UC__NumBytes2NumChars>
 801a8cc:	2100      	movs	r1, #0
 801a8ce:	e7f8      	b.n	801a8c2 <_GetCursorPosChar+0x3a>

0801a8d0 <GUI__GetCursorPosX>:
 801a8d0:	b510      	push	{r4, lr}
 801a8d2:	4b03      	ldr	r3, [pc, #12]	; (801a8e0 <GUI__GetCursorPosX+0x10>)
 801a8d4:	460c      	mov	r4, r1
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	4611      	mov	r1, r2
 801a8da:	4622      	mov	r2, r4
 801a8dc:	4798      	blx	r3
 801a8de:	bd10      	pop	{r4, pc}
 801a8e0:	20000260 	.word	0x20000260

0801a8e4 <GUI__GetCursorPosChar>:
 801a8e4:	b510      	push	{r4, lr}
 801a8e6:	4b03      	ldr	r3, [pc, #12]	; (801a8f4 <GUI__GetCursorPosChar+0x10>)
 801a8e8:	460c      	mov	r4, r1
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	4611      	mov	r1, r2
 801a8ee:	4622      	mov	r2, r4
 801a8f0:	4798      	blx	r3
 801a8f2:	bd10      	pop	{r4, pc}
 801a8f4:	20000258 	.word	0x20000258

0801a8f8 <GUI__GetCursorCharacter>:
 801a8f8:	b510      	push	{r4, lr}
 801a8fa:	4c02      	ldr	r4, [pc, #8]	; (801a904 <GUI__GetCursorCharacter+0xc>)
 801a8fc:	6824      	ldr	r4, [r4, #0]
 801a8fe:	47a0      	blx	r4
 801a900:	bd10      	pop	{r4, pc}
 801a902:	bf00      	nop
 801a904:	2000025c 	.word	0x2000025c

0801a908 <GUI__MixColors>:
 801a908:	b430      	push	{r4, r5}
 801a90a:	0e0b      	lsrs	r3, r1, #24
 801a90c:	ea4f 6410 	mov.w	r4, r0, lsr #24
 801a910:	4b12      	ldr	r3, [pc, #72]	; (801a95c <GUI__MixColors+0x54>)
 801a912:	fb02 f204 	mul.w	r2, r2, r4
 801a916:	fba3 4202 	umull	r4, r2, r3, r2
 801a91a:	bf08      	it	eq
 801a91c:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 801a920:	09d2      	lsrs	r2, r2, #7
 801a922:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801a926:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a92a:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 801a92e:	f001 15ff 	and.w	r5, r1, #16711935	; 0xff00ff
 801a932:	fb04 f402 	mul.w	r4, r4, r2
 801a936:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 801a93a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 801a93e:	fb03 4405 	mla	r4, r3, r5, r4
 801a942:	fb02 f200 	mul.w	r2, r2, r0
 801a946:	0a09      	lsrs	r1, r1, #8
 801a948:	0a24      	lsrs	r4, r4, #8
 801a94a:	fb03 2301 	mla	r3, r3, r1, r2
 801a94e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a952:	f003 20ff 	and.w	r0, r3, #4278255360	; 0xff00ff00
 801a956:	4320      	orrs	r0, r4
 801a958:	bc30      	pop	{r4, r5}
 801a95a:	4770      	bx	lr
 801a95c:	80808081 	.word	0x80808081

0801a960 <_OnExit>:
 801a960:	b570      	push	{r4, r5, r6, lr}
 801a962:	4e0a      	ldr	r6, [pc, #40]	; (801a98c <_OnExit+0x2c>)
 801a964:	4c0a      	ldr	r4, [pc, #40]	; (801a990 <_OnExit+0x30>)
 801a966:	6830      	ldr	r0, [r6, #0]
 801a968:	4d0a      	ldr	r5, [pc, #40]	; (801a994 <_OnExit+0x34>)
 801a96a:	f002 ff1d 	bl	801d7a8 <GUI_ALLOC_FreeFixedBlock>
 801a96e:	6820      	ldr	r0, [r4, #0]
 801a970:	f002 ff1a 	bl	801d7a8 <GUI_ALLOC_FreeFixedBlock>
 801a974:	6828      	ldr	r0, [r5, #0]
 801a976:	f002 ff17 	bl	801d7a8 <GUI_ALLOC_FreeFixedBlock>
 801a97a:	4907      	ldr	r1, [pc, #28]	; (801a998 <_OnExit+0x38>)
 801a97c:	4a07      	ldr	r2, [pc, #28]	; (801a99c <_OnExit+0x3c>)
 801a97e:	2300      	movs	r3, #0
 801a980:	6033      	str	r3, [r6, #0]
 801a982:	602b      	str	r3, [r5, #0]
 801a984:	6023      	str	r3, [r4, #0]
 801a986:	600b      	str	r3, [r1, #0]
 801a988:	6013      	str	r3, [r2, #0]
 801a98a:	bd70      	pop	{r4, r5, r6, pc}
 801a98c:	2002b1bc 	.word	0x2002b1bc
 801a990:	2002b1b8 	.word	0x2002b1b8
 801a994:	2002b1c0 	.word	0x2002b1c0
 801a998:	2002b1c4 	.word	0x2002b1c4
 801a99c:	2002b1d4 	.word	0x2002b1d4

0801a9a0 <GUI__DoAlphaBlending>:
 801a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a4:	4c9a      	ldr	r4, [pc, #616]	; (801ac10 <GUI__DoAlphaBlending+0x270>)
 801a9a6:	b091      	sub	sp, #68	; 0x44
 801a9a8:	6825      	ldr	r5, [r4, #0]
 801a9aa:	9108      	str	r1, [sp, #32]
 801a9ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a9ae:	900b      	str	r0, [sp, #44]	; 0x2c
 801a9b0:	2700      	movs	r7, #0
 801a9b2:	9204      	str	r2, [sp, #16]
 801a9b4:	461e      	mov	r6, r3
 801a9b6:	600f      	str	r7, [r1, #0]
 801a9b8:	2d00      	cmp	r5, #0
 801a9ba:	f000 80ff 	beq.w	801abbc <GUI__DoAlphaBlending+0x21c>
 801a9be:	4d95      	ldr	r5, [pc, #596]	; (801ac14 <GUI__DoAlphaBlending+0x274>)
 801a9c0:	682c      	ldr	r4, [r5, #0]
 801a9c2:	b92c      	cbnz	r4, 801a9d0 <GUI__DoAlphaBlending+0x30>
 801a9c4:	4b94      	ldr	r3, [pc, #592]	; (801ac18 <GUI__DoAlphaBlending+0x278>)
 801a9c6:	681c      	ldr	r4, [r3, #0]
 801a9c8:	602c      	str	r4, [r5, #0]
 801a9ca:	2c00      	cmp	r4, #0
 801a9cc:	f000 80fe 	beq.w	801abcc <GUI__DoAlphaBlending+0x22c>
 801a9d0:	4f92      	ldr	r7, [pc, #584]	; (801ac1c <GUI__DoAlphaBlending+0x27c>)
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	f000 8106 	beq.w	801abe6 <GUI__DoAlphaBlending+0x246>
 801a9da:	9306      	str	r3, [sp, #24]
 801a9dc:	2700      	movs	r7, #0
 801a9de:	4a90      	ldr	r2, [pc, #576]	; (801ac20 <GUI__DoAlphaBlending+0x280>)
 801a9e0:	6813      	ldr	r3, [r2, #0]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	f000 8109 	beq.w	801abfa <GUI__DoAlphaBlending+0x25a>
 801a9e8:	9305      	str	r3, [sp, #20]
 801a9ea:	2f00      	cmp	r7, #0
 801a9ec:	f040 80f5 	bne.w	801abda <GUI__DoAlphaBlending+0x23a>
 801a9f0:	498c      	ldr	r1, [pc, #560]	; (801ac24 <GUI__DoAlphaBlending+0x284>)
 801a9f2:	4a8d      	ldr	r2, [pc, #564]	; (801ac28 <GUI__DoAlphaBlending+0x288>)
 801a9f4:	680b      	ldr	r3, [r1, #0]
 801a9f6:	7c58      	ldrb	r0, [r3, #17]
 801a9f8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801a9fc:	920c      	str	r2, [sp, #48]	; 0x30
 801a9fe:	6915      	ldr	r5, [r2, #16]
 801aa00:	950f      	str	r5, [sp, #60]	; 0x3c
 801aa02:	f7fe fec1 	bl	8019788 <GUI_GetBitsPerPixelEx>
 801aa06:	4987      	ldr	r1, [pc, #540]	; (801ac24 <GUI__DoAlphaBlending+0x284>)
 801aa08:	900a      	str	r0, [sp, #40]	; 0x28
 801aa0a:	680b      	ldr	r3, [r1, #0]
 801aa0c:	7c58      	ldrb	r0, [r3, #17]
 801aa0e:	f7fe fed7 	bl	80197c0 <GUI_GetpfIndex2ColorEx>
 801aa12:	4b86      	ldr	r3, [pc, #536]	; (801ac2c <GUI__DoAlphaBlending+0x28c>)
 801aa14:	900d      	str	r0, [sp, #52]	; 0x34
 801aa16:	42b4      	cmp	r4, r6
 801aa18:	bfa8      	it	ge
 801aa1a:	4634      	movge	r4, r6
 801aa1c:	4298      	cmp	r0, r3
 801aa1e:	f000 80da 	beq.w	801abd6 <GUI__DoAlphaBlending+0x236>
 801aa22:	4b83      	ldr	r3, [pc, #524]	; (801ac30 <GUI__DoAlphaBlending+0x290>)
 801aa24:	1ac3      	subs	r3, r0, r3
 801aa26:	bf18      	it	ne
 801aa28:	2301      	movne	r3, #1
 801aa2a:	930e      	str	r3, [sp, #56]	; 0x38
 801aa2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801aa2e:	2600      	movs	r6, #0
 801aa30:	4425      	add	r5, r4
 801aa32:	46a1      	mov	r9, r4
 801aa34:	9c04      	ldr	r4, [sp, #16]
 801aa36:	9509      	str	r5, [sp, #36]	; 0x24
 801aa38:	46b0      	mov	r8, r6
 801aa3a:	46b3      	mov	fp, r6
 801aa3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801aa3e:	f854 0b04 	ldr.w	r0, [r4], #4
 801aa42:	47a8      	blx	r5
 801aa44:	0e05      	lsrs	r5, r0, #24
 801aa46:	2dff      	cmp	r5, #255	; 0xff
 801aa48:	4607      	mov	r7, r0
 801aa4a:	d049      	beq.n	801aae0 <GUI__DoAlphaBlending+0x140>
 801aa4c:	f1bb 0f00 	cmp.w	fp, #0
 801aa50:	d134      	bne.n	801aabc <GUI__DoAlphaBlending+0x11c>
 801aa52:	4974      	ldr	r1, [pc, #464]	; (801ac24 <GUI__DoAlphaBlending+0x284>)
 801aa54:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801aa58:	680b      	ldr	r3, [r1, #0]
 801aa5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801aa5e:	44c2      	add	sl, r8
 801aa60:	4553      	cmp	r3, sl
 801aa62:	dd61      	ble.n	801ab28 <GUI__DoAlphaBlending+0x188>
 801aa64:	ebca 0a03 	rsb	sl, sl, r3
 801aa68:	f8cd a01c 	str.w	sl, [sp, #28]
 801aa6c:	46d4      	mov	ip, sl
 801aa6e:	469a      	mov	sl, r3
 801aa70:	9a06      	ldr	r2, [sp, #24]
 801aa72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa74:	9908      	ldr	r1, [sp, #32]
 801aa76:	9301      	str	r3, [sp, #4]
 801aa78:	44c4      	add	ip, r8
 801aa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa7c:	eb02 0b8c 	add.w	fp, r2, ip, lsl #2
 801aa80:	f8cd b000 	str.w	fp, [sp]
 801aa84:	1e5a      	subs	r2, r3, #1
 801aa86:	4650      	mov	r0, sl
 801aa88:	460b      	mov	r3, r1
 801aa8a:	f006 f971 	bl	8020d70 <GUI_ReadRectEx>
 801aa8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801aa90:	2917      	cmp	r1, #23
 801aa92:	dd4d      	ble.n	801ab30 <GUI__DoAlphaBlending+0x190>
 801aa94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa96:	b17b      	cbz	r3, 801aab8 <GUI__DoAlphaBlending+0x118>
 801aa98:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa9a:	9507      	str	r5, [sp, #28]
 801aa9c:	465d      	mov	r5, fp
 801aa9e:	46a3      	mov	fp, r4
 801aaa0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aaa2:	ebca 0a01 	rsb	sl, sl, r1
 801aaa6:	6828      	ldr	r0, [r5, #0]
 801aaa8:	47a0      	blx	r4
 801aaaa:	f1ba 0a01 	subs.w	sl, sl, #1
 801aaae:	f845 0b04 	str.w	r0, [r5], #4
 801aab2:	d1f8      	bne.n	801aaa6 <GUI__DoAlphaBlending+0x106>
 801aab4:	9d07      	ldr	r5, [sp, #28]
 801aab6:	465c      	mov	r4, fp
 801aab8:	f04f 0b01 	mov.w	fp, #1
 801aabc:	4a5d      	ldr	r2, [pc, #372]	; (801ac34 <GUI__DoAlphaBlending+0x294>)
 801aabe:	6813      	ldr	r3, [r2, #0]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d143      	bne.n	801ab4c <GUI__DoAlphaBlending+0x1ac>
 801aac4:	b9fd      	cbnz	r5, 801ab06 <GUI__DoAlphaBlending+0x166>
 801aac6:	9d06      	ldr	r5, [sp, #24]
 801aac8:	59ab      	ldr	r3, [r5, r6]
 801aaca:	9d05      	ldr	r5, [sp, #20]
 801aacc:	51ab      	str	r3, [r5, r6]
 801aace:	f1b9 0901 	subs.w	r9, r9, #1
 801aad2:	f108 0801 	add.w	r8, r8, #1
 801aad6:	f106 0604 	add.w	r6, r6, #4
 801aada:	d010      	beq.n	801aafe <GUI__DoAlphaBlending+0x15e>
 801aadc:	9404      	str	r4, [sp, #16]
 801aade:	e7ad      	b.n	801aa3c <GUI__DoAlphaBlending+0x9c>
 801aae0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801aae2:	682b      	ldr	r3, [r5, #0]
 801aae4:	9d05      	ldr	r5, [sp, #20]
 801aae6:	51a8      	str	r0, [r5, r6]
 801aae8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801aaea:	f043 0301 	orr.w	r3, r3, #1
 801aaee:	f1b9 0901 	subs.w	r9, r9, #1
 801aaf2:	602b      	str	r3, [r5, #0]
 801aaf4:	f108 0801 	add.w	r8, r8, #1
 801aaf8:	f106 0604 	add.w	r6, r6, #4
 801aafc:	d1ee      	bne.n	801aadc <GUI__DoAlphaBlending+0x13c>
 801aafe:	9805      	ldr	r0, [sp, #20]
 801ab00:	b011      	add	sp, #68	; 0x44
 801ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab06:	462a      	mov	r2, r5
 801ab08:	494b      	ldr	r1, [pc, #300]	; (801ac38 <GUI__DoAlphaBlending+0x298>)
 801ab0a:	9d06      	ldr	r5, [sp, #24]
 801ab0c:	680b      	ldr	r3, [r1, #0]
 801ab0e:	59a9      	ldr	r1, [r5, r6]
 801ab10:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 801ab14:	4798      	blx	r3
 801ab16:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801ab18:	682b      	ldr	r3, [r5, #0]
 801ab1a:	9d05      	ldr	r5, [sp, #20]
 801ab1c:	51a8      	str	r0, [r5, r6]
 801ab1e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801ab20:	f043 0301 	orr.w	r3, r3, #1
 801ab24:	602b      	str	r3, [r5, #0]
 801ab26:	e7d2      	b.n	801aace <GUI__DoAlphaBlending+0x12e>
 801ab28:	46dc      	mov	ip, fp
 801ab2a:	f8cd b01c 	str.w	fp, [sp, #28]
 801ab2e:	e79f      	b.n	801aa70 <GUI__DoAlphaBlending+0xd0>
 801ab30:	9a07      	ldr	r2, [sp, #28]
 801ab32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab34:	4658      	mov	r0, fp
 801ab36:	ebc2 0109 	rsb	r1, r2, r9
 801ab3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab3c:	f006 fb34 	bl	80211a8 <GUI__ExpandPixelIndicesEx>
 801ab40:	4a3c      	ldr	r2, [pc, #240]	; (801ac34 <GUI__DoAlphaBlending+0x294>)
 801ab42:	6813      	ldr	r3, [r2, #0]
 801ab44:	f04f 0b01 	mov.w	fp, #1
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d0bb      	beq.n	801aac4 <GUI__DoAlphaBlending+0x124>
 801ab4c:	9d06      	ldr	r5, [sp, #24]
 801ab4e:	9e05      	ldr	r6, [sp, #20]
 801ab50:	9804      	ldr	r0, [sp, #16]
 801ab52:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801ab56:	4445      	add	r5, r8
 801ab58:	44b0      	add	r8, r6
 801ab5a:	469c      	mov	ip, r3
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	4642      	mov	r2, r8
 801ab60:	464b      	mov	r3, r9
 801ab62:	47e0      	blx	ip
 801ab64:	1d2b      	adds	r3, r5, #4
 801ab66:	9d04      	ldr	r5, [sp, #16]
 801ab68:	464c      	mov	r4, r9
 801ab6a:	f108 0204 	add.w	r2, r8, #4
 801ab6e:	1f28      	subs	r0, r5, #4
 801ab70:	e009      	b.n	801ab86 <GUI__DoAlphaBlending+0x1e6>
 801ab72:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ab76:	f842 1c04 	str.w	r1, [r2, #-4]
 801ab7a:	3c01      	subs	r4, #1
 801ab7c:	f102 0204 	add.w	r2, r2, #4
 801ab80:	f103 0304 	add.w	r3, r3, #4
 801ab84:	d011      	beq.n	801abaa <GUI__DoAlphaBlending+0x20a>
 801ab86:	f850 1f04 	ldr.w	r1, [r0, #4]!
 801ab8a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 801ab8e:	d0f0      	beq.n	801ab72 <GUI__DoAlphaBlending+0x1d2>
 801ab90:	f853 5c04 	ldr.w	r5, [r3, #-4]
 801ab94:	f015 4f7f 	tst.w	r5, #4278190080	; 0xff000000
 801ab98:	bf08      	it	eq
 801ab9a:	f842 1c04 	streq.w	r1, [r2, #-4]
 801ab9e:	3c01      	subs	r4, #1
 801aba0:	f102 0204 	add.w	r2, r2, #4
 801aba4:	f103 0304 	add.w	r3, r3, #4
 801aba8:	d1ed      	bne.n	801ab86 <GUI__DoAlphaBlending+0x1e6>
 801abaa:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801abac:	9805      	ldr	r0, [sp, #20]
 801abae:	6833      	ldr	r3, [r6, #0]
 801abb0:	f043 0301 	orr.w	r3, r3, #1
 801abb4:	6033      	str	r3, [r6, #0]
 801abb6:	b011      	add	sp, #68	; 0x44
 801abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbc:	481f      	ldr	r0, [pc, #124]	; (801ac3c <GUI__DoAlphaBlending+0x29c>)
 801abbe:	4b20      	ldr	r3, [pc, #128]	; (801ac40 <GUI__DoAlphaBlending+0x2a0>)
 801abc0:	6003      	str	r3, [r0, #0]
 801abc2:	2301      	movs	r3, #1
 801abc4:	6023      	str	r3, [r4, #0]
 801abc6:	f001 fb2f 	bl	801c228 <GUI__RegisterExit>
 801abca:	e6f8      	b.n	801a9be <GUI__DoAlphaBlending+0x1e>
 801abcc:	f7fe fe44 	bl	8019858 <LCD_GetVXSizeMax>
 801abd0:	6028      	str	r0, [r5, #0]
 801abd2:	4604      	mov	r4, r0
 801abd4:	e6fc      	b.n	801a9d0 <GUI__DoAlphaBlending+0x30>
 801abd6:	970e      	str	r7, [sp, #56]	; 0x38
 801abd8:	e728      	b.n	801aa2c <GUI__DoAlphaBlending+0x8c>
 801abda:	2500      	movs	r5, #0
 801abdc:	9505      	str	r5, [sp, #20]
 801abde:	9805      	ldr	r0, [sp, #20]
 801abe0:	b011      	add	sp, #68	; 0x44
 801abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe6:	00a0      	lsls	r0, r4, #2
 801abe8:	f002 fde8 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801abec:	6038      	str	r0, [r7, #0]
 801abee:	f1d0 0701 	rsbs	r7, r0, #1
 801abf2:	bf38      	it	cc
 801abf4:	2700      	movcc	r7, #0
 801abf6:	9006      	str	r0, [sp, #24]
 801abf8:	e6f1      	b.n	801a9de <GUI__DoAlphaBlending+0x3e>
 801abfa:	6828      	ldr	r0, [r5, #0]
 801abfc:	9203      	str	r2, [sp, #12]
 801abfe:	0080      	lsls	r0, r0, #2
 801ac00:	f002 fddc 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801ac04:	9a03      	ldr	r2, [sp, #12]
 801ac06:	6010      	str	r0, [r2, #0]
 801ac08:	2800      	cmp	r0, #0
 801ac0a:	d0e6      	beq.n	801abda <GUI__DoAlphaBlending+0x23a>
 801ac0c:	9005      	str	r0, [sp, #20]
 801ac0e:	e6ec      	b.n	801a9ea <GUI__DoAlphaBlending+0x4a>
 801ac10:	2002b1d4 	.word	0x2002b1d4
 801ac14:	2002b1c4 	.word	0x2002b1c4
 801ac18:	2002cbd4 	.word	0x2002cbd4
 801ac1c:	2002b1bc 	.word	0x2002b1bc
 801ac20:	2002b1b8 	.word	0x2002b1b8
 801ac24:	2000027c 	.word	0x2000027c
 801ac28:	2002cbcc 	.word	0x2002cbcc
 801ac2c:	0801df59 	.word	0x0801df59
 801ac30:	0801df51 	.word	0x0801df51
 801ac34:	2002b1c8 	.word	0x2002b1c8
 801ac38:	20000264 	.word	0x20000264
 801ac3c:	2002b1cc 	.word	0x2002b1cc
 801ac40:	0801a961 	.word	0x0801a961

0801ac44 <GUI__AllocAlphaBuffer>:
 801ac44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac46:	b083      	sub	sp, #12
 801ac48:	b9c8      	cbnz	r0, 801ac7e <GUI__AllocAlphaBuffer+0x3a>
 801ac4a:	4b23      	ldr	r3, [pc, #140]	; (801acd8 <GUI__AllocAlphaBuffer+0x94>)
 801ac4c:	681a      	ldr	r2, [r3, #0]
 801ac4e:	4607      	mov	r7, r0
 801ac50:	b1d2      	cbz	r2, 801ac88 <GUI__AllocAlphaBuffer+0x44>
 801ac52:	4c22      	ldr	r4, [pc, #136]	; (801acdc <GUI__AllocAlphaBuffer+0x98>)
 801ac54:	6823      	ldr	r3, [r4, #0]
 801ac56:	b91b      	cbnz	r3, 801ac60 <GUI__AllocAlphaBuffer+0x1c>
 801ac58:	4b21      	ldr	r3, [pc, #132]	; (801ace0 <GUI__AllocAlphaBuffer+0x9c>)
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	6023      	str	r3, [r4, #0]
 801ac5e:	b1db      	cbz	r3, 801ac98 <GUI__AllocAlphaBuffer+0x54>
 801ac60:	4618      	mov	r0, r3
 801ac62:	4e20      	ldr	r6, [pc, #128]	; (801ace4 <GUI__AllocAlphaBuffer+0xa0>)
 801ac64:	6832      	ldr	r2, [r6, #0]
 801ac66:	2500      	movs	r5, #0
 801ac68:	b31a      	cbz	r2, 801acb2 <GUI__AllocAlphaBuffer+0x6e>
 801ac6a:	4e1f      	ldr	r6, [pc, #124]	; (801ace8 <GUI__AllocAlphaBuffer+0xa4>)
 801ac6c:	6833      	ldr	r3, [r6, #0]
 801ac6e:	b1bb      	cbz	r3, 801aca0 <GUI__AllocAlphaBuffer+0x5c>
 801ac70:	b117      	cbz	r7, 801ac78 <GUI__AllocAlphaBuffer+0x34>
 801ac72:	4e1e      	ldr	r6, [pc, #120]	; (801acec <GUI__AllocAlphaBuffer+0xa8>)
 801ac74:	6833      	ldr	r3, [r6, #0]
 801ac76:	b32b      	cbz	r3, 801acc4 <GUI__AllocAlphaBuffer+0x80>
 801ac78:	4628      	mov	r0, r5
 801ac7a:	b003      	add	sp, #12
 801ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac7e:	4b16      	ldr	r3, [pc, #88]	; (801acd8 <GUI__AllocAlphaBuffer+0x94>)
 801ac80:	681a      	ldr	r2, [r3, #0]
 801ac82:	af01      	add	r7, sp, #4
 801ac84:	2a00      	cmp	r2, #0
 801ac86:	d1e4      	bne.n	801ac52 <GUI__AllocAlphaBuffer+0xe>
 801ac88:	4819      	ldr	r0, [pc, #100]	; (801acf0 <GUI__AllocAlphaBuffer+0xac>)
 801ac8a:	4a1a      	ldr	r2, [pc, #104]	; (801acf4 <GUI__AllocAlphaBuffer+0xb0>)
 801ac8c:	6002      	str	r2, [r0, #0]
 801ac8e:	2201      	movs	r2, #1
 801ac90:	601a      	str	r2, [r3, #0]
 801ac92:	f001 fac9 	bl	801c228 <GUI__RegisterExit>
 801ac96:	e7dc      	b.n	801ac52 <GUI__AllocAlphaBuffer+0xe>
 801ac98:	f7fe fdde 	bl	8019858 <LCD_GetVXSizeMax>
 801ac9c:	6020      	str	r0, [r4, #0]
 801ac9e:	e7e0      	b.n	801ac62 <GUI__AllocAlphaBuffer+0x1e>
 801aca0:	6820      	ldr	r0, [r4, #0]
 801aca2:	0080      	lsls	r0, r0, #2
 801aca4:	f002 fd8a 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801aca8:	2800      	cmp	r0, #0
 801acaa:	bf08      	it	eq
 801acac:	2501      	moveq	r5, #1
 801acae:	6030      	str	r0, [r6, #0]
 801acb0:	e7de      	b.n	801ac70 <GUI__AllocAlphaBuffer+0x2c>
 801acb2:	0080      	lsls	r0, r0, #2
 801acb4:	f002 fd82 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801acb8:	f1d0 0501 	rsbs	r5, r0, #1
 801acbc:	6030      	str	r0, [r6, #0]
 801acbe:	bf38      	it	cc
 801acc0:	2500      	movcc	r5, #0
 801acc2:	e7d2      	b.n	801ac6a <GUI__AllocAlphaBuffer+0x26>
 801acc4:	6820      	ldr	r0, [r4, #0]
 801acc6:	0080      	lsls	r0, r0, #2
 801acc8:	f002 fd78 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801accc:	2800      	cmp	r0, #0
 801acce:	bf08      	it	eq
 801acd0:	2501      	moveq	r5, #1
 801acd2:	6030      	str	r0, [r6, #0]
 801acd4:	e7d0      	b.n	801ac78 <GUI__AllocAlphaBuffer+0x34>
 801acd6:	bf00      	nop
 801acd8:	2002b1d4 	.word	0x2002b1d4
 801acdc:	2002b1c4 	.word	0x2002b1c4
 801ace0:	2002cbd4 	.word	0x2002cbd4
 801ace4:	2002b1bc 	.word	0x2002b1bc
 801ace8:	2002b1b8 	.word	0x2002b1b8
 801acec:	2002b1c0 	.word	0x2002b1c0
 801acf0:	2002b1cc 	.word	0x2002b1cc
 801acf4:	0801a961 	.word	0x0801a961

0801acf8 <GUI_SetFuncDrawAlpha>:
 801acf8:	b410      	push	{r4}
 801acfa:	b160      	cbz	r0, 801ad16 <GUI_SetFuncDrawAlpha+0x1e>
 801acfc:	b141      	cbz	r1, 801ad10 <GUI_SetFuncDrawAlpha+0x18>
 801acfe:	4604      	mov	r4, r0
 801ad00:	2000      	movs	r0, #0
 801ad02:	4a07      	ldr	r2, [pc, #28]	; (801ad20 <GUI_SetFuncDrawAlpha+0x28>)
 801ad04:	4b07      	ldr	r3, [pc, #28]	; (801ad24 <GUI_SetFuncDrawAlpha+0x2c>)
 801ad06:	6011      	str	r1, [r2, #0]
 801ad08:	601c      	str	r4, [r3, #0]
 801ad0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad0e:	4770      	bx	lr
 801ad10:	460c      	mov	r4, r1
 801ad12:	2001      	movs	r0, #1
 801ad14:	e7f5      	b.n	801ad02 <GUI_SetFuncDrawAlpha+0xa>
 801ad16:	4601      	mov	r1, r0
 801ad18:	4604      	mov	r4, r0
 801ad1a:	2001      	movs	r0, #1
 801ad1c:	e7f1      	b.n	801ad02 <GUI_SetFuncDrawAlpha+0xa>
 801ad1e:	bf00      	nop
 801ad20:	2002cb70 	.word	0x2002cb70
 801ad24:	2002cb74 	.word	0x2002cb74

0801ad28 <GUI_SignalEvent>:
 801ad28:	b508      	push	{r3, lr}
 801ad2a:	4b02      	ldr	r3, [pc, #8]	; (801ad34 <GUI_SignalEvent+0xc>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	b103      	cbz	r3, 801ad32 <GUI_SignalEvent+0xa>
 801ad30:	4798      	blx	r3
 801ad32:	bd08      	pop	{r3, pc}
 801ad34:	2002b1d8 	.word	0x2002b1d8

0801ad38 <GUI_UC_GetCharSize>:
 801ad38:	b510      	push	{r4, lr}
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	f000 fafe 	bl	801b33c <GUI_Lock>
 801ad40:	4b04      	ldr	r3, [pc, #16]	; (801ad54 <GUI_UC_GetCharSize+0x1c>)
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	4620      	mov	r0, r4
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	4798      	blx	r3
 801ad4a:	4604      	mov	r4, r0
 801ad4c:	f000 faec 	bl	801b328 <GUI_Unlock>
 801ad50:	4620      	mov	r0, r4
 801ad52:	bd10      	pop	{r4, pc}
 801ad54:	2002cbc4 	.word	0x2002cbc4

0801ad58 <GUI_UC_GetCharCode>:
 801ad58:	b510      	push	{r4, lr}
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	f000 faee 	bl	801b33c <GUI_Lock>
 801ad60:	4b04      	ldr	r3, [pc, #16]	; (801ad74 <GUI_UC_GetCharCode+0x1c>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4620      	mov	r0, r4
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4798      	blx	r3
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	f000 fadc 	bl	801b328 <GUI_Unlock>
 801ad70:	4620      	mov	r0, r4
 801ad72:	bd10      	pop	{r4, pc}
 801ad74:	2002cbc4 	.word	0x2002cbc4

0801ad78 <GUI_UC_Encode>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4605      	mov	r5, r0
 801ad7c:	460c      	mov	r4, r1
 801ad7e:	f000 fadd 	bl	801b33c <GUI_Lock>
 801ad82:	4b05      	ldr	r3, [pc, #20]	; (801ad98 <GUI_UC_Encode+0x20>)
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	4621      	mov	r1, r4
 801ad88:	68db      	ldr	r3, [r3, #12]
 801ad8a:	4628      	mov	r0, r5
 801ad8c:	4798      	blx	r3
 801ad8e:	4604      	mov	r4, r0
 801ad90:	f000 faca 	bl	801b328 <GUI_Unlock>
 801ad94:	4620      	mov	r0, r4
 801ad96:	bd38      	pop	{r3, r4, r5, pc}
 801ad98:	2002cbc4 	.word	0x2002cbc4

0801ad9c <GUI_UC__CalcSizeOfChar>:
 801ad9c:	b508      	push	{r3, lr}
 801ad9e:	4b02      	ldr	r3, [pc, #8]	; (801ada8 <GUI_UC__CalcSizeOfChar+0xc>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	689b      	ldr	r3, [r3, #8]
 801ada4:	4798      	blx	r3
 801ada6:	bd08      	pop	{r3, pc}
 801ada8:	2002cbc4 	.word	0x2002cbc4

0801adac <GUI_UC__GetCharCodeInc>:
 801adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adae:	4e08      	ldr	r6, [pc, #32]	; (801add0 <GUI_UC__GetCharCodeInc+0x24>)
 801adb0:	6804      	ldr	r4, [r0, #0]
 801adb2:	6833      	ldr	r3, [r6, #0]
 801adb4:	4605      	mov	r5, r0
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	4620      	mov	r0, r4
 801adba:	4798      	blx	r3
 801adbc:	6833      	ldr	r3, [r6, #0]
 801adbe:	4607      	mov	r7, r0
 801adc0:	685b      	ldr	r3, [r3, #4]
 801adc2:	4620      	mov	r0, r4
 801adc4:	4798      	blx	r3
 801adc6:	4420      	add	r0, r4
 801adc8:	6028      	str	r0, [r5, #0]
 801adca:	4638      	mov	r0, r7
 801adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adce:	bf00      	nop
 801add0:	2002cbc4 	.word	0x2002cbc4

0801add4 <GUI_UC__NumChars2NumBytes>:
 801add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801add6:	4604      	mov	r4, r0
 801add8:	b161      	cbz	r1, 801adf4 <GUI_UC__NumChars2NumBytes+0x20>
 801adda:	4f07      	ldr	r7, [pc, #28]	; (801adf8 <GUI_UC__NumChars2NumBytes+0x24>)
 801addc:	460d      	mov	r5, r1
 801adde:	2600      	movs	r6, #0
 801ade0:	683b      	ldr	r3, [r7, #0]
 801ade2:	4620      	mov	r0, r4
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	4798      	blx	r3
 801ade8:	3d01      	subs	r5, #1
 801adea:	4404      	add	r4, r0
 801adec:	4406      	add	r6, r0
 801adee:	d1f7      	bne.n	801ade0 <GUI_UC__NumChars2NumBytes+0xc>
 801adf0:	4630      	mov	r0, r6
 801adf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adf4:	460e      	mov	r6, r1
 801adf6:	e7fb      	b.n	801adf0 <GUI_UC__NumChars2NumBytes+0x1c>
 801adf8:	2002cbc4 	.word	0x2002cbc4

0801adfc <GUI_UC__NumBytes2NumChars>:
 801adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae00:	1e0f      	subs	r7, r1, #0
 801ae02:	4606      	mov	r6, r0
 801ae04:	dd10      	ble.n	801ae28 <GUI_UC__NumBytes2NumChars+0x2c>
 801ae06:	2400      	movs	r4, #0
 801ae08:	f8df 8020 	ldr.w	r8, [pc, #32]	; 801ae2c <GUI_UC__NumBytes2NumChars+0x30>
 801ae0c:	4625      	mov	r5, r4
 801ae0e:	f8d8 3000 	ldr.w	r3, [r8]
 801ae12:	1930      	adds	r0, r6, r4
 801ae14:	685b      	ldr	r3, [r3, #4]
 801ae16:	4798      	blx	r3
 801ae18:	4404      	add	r4, r0
 801ae1a:	42a7      	cmp	r7, r4
 801ae1c:	f105 0501 	add.w	r5, r5, #1
 801ae20:	dcf5      	bgt.n	801ae0e <GUI_UC__NumBytes2NumChars+0x12>
 801ae22:	4628      	mov	r0, r5
 801ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae28:	2500      	movs	r5, #0
 801ae2a:	e7fa      	b.n	801ae22 <GUI_UC__NumBytes2NumChars+0x26>
 801ae2c:	2002cbc4 	.word	0x2002cbc4

0801ae30 <GUI__GetNumChars>:
 801ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae32:	4604      	mov	r4, r0
 801ae34:	b188      	cbz	r0, 801ae5a <GUI__GetNumChars+0x2a>
 801ae36:	2600      	movs	r6, #0
 801ae38:	4d09      	ldr	r5, [pc, #36]	; (801ae60 <GUI__GetNumChars+0x30>)
 801ae3a:	e000      	b.n	801ae3e <GUI__GetNumChars+0xe>
 801ae3c:	3601      	adds	r6, #1
 801ae3e:	682b      	ldr	r3, [r5, #0]
 801ae40:	4620      	mov	r0, r4
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	4798      	blx	r3
 801ae46:	682b      	ldr	r3, [r5, #0]
 801ae48:	4607      	mov	r7, r0
 801ae4a:	685b      	ldr	r3, [r3, #4]
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	4798      	blx	r3
 801ae50:	4404      	add	r4, r0
 801ae52:	2f00      	cmp	r7, #0
 801ae54:	d1f2      	bne.n	801ae3c <GUI__GetNumChars+0xc>
 801ae56:	4630      	mov	r0, r6
 801ae58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae5a:	4606      	mov	r6, r0
 801ae5c:	4630      	mov	r0, r6
 801ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae60:	2002cbc4 	.word	0x2002cbc4

0801ae64 <_OnExit>:
 801ae64:	4803      	ldr	r0, [pc, #12]	; (801ae74 <_OnExit+0x10>)
 801ae66:	4904      	ldr	r1, [pc, #16]	; (801ae78 <_OnExit+0x14>)
 801ae68:	4a04      	ldr	r2, [pc, #16]	; (801ae7c <_OnExit+0x18>)
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	6003      	str	r3, [r0, #0]
 801ae6e:	600b      	str	r3, [r1, #0]
 801ae70:	6013      	str	r3, [r2, #0]
 801ae72:	4770      	bx	lr
 801ae74:	2002b1dc 	.word	0x2002b1dc
 801ae78:	2002b1e0 	.word	0x2002b1e0
 801ae7c:	2002b1ec 	.word	0x2002b1ec

0801ae80 <GUI_TIMER_Exec>:
 801ae80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae84:	4e21      	ldr	r6, [pc, #132]	; (801af0c <GUI_TIMER_Exec+0x8c>)
 801ae86:	b085      	sub	sp, #20
 801ae88:	f000 fa58 	bl	801b33c <GUI_Lock>
 801ae8c:	f8d6 8000 	ldr.w	r8, [r6]
 801ae90:	4643      	mov	r3, r8
 801ae92:	4634      	mov	r4, r6
 801ae94:	2700      	movs	r7, #0
 801ae96:	b31b      	cbz	r3, 801aee0 <GUI_TIMER_Exec+0x60>
 801ae98:	f000 f9f8 	bl	801b28c <GUI_GetTime>
 801ae9c:	4605      	mov	r5, r0
 801ae9e:	6830      	ldr	r0, [r6, #0]
 801aea0:	f002 fdcc 	bl	801da3c <GUI_ALLOC_LockH>
 801aea4:	6942      	ldr	r2, [r0, #20]
 801aea6:	9000      	str	r0, [sp, #0]
 801aea8:	1b52      	subs	r2, r2, r5
 801aeaa:	2a00      	cmp	r2, #0
 801aeac:	4603      	mov	r3, r0
 801aeae:	dc1d      	bgt.n	801aeec <GUI_TIMER_Exec+0x6c>
 801aeb0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801aeb4:	6821      	ldr	r1, [r4, #0]
 801aeb6:	6902      	ldr	r2, [r0, #16]
 801aeb8:	9501      	str	r5, [sp, #4]
 801aeba:	4668      	mov	r0, sp
 801aebc:	9103      	str	r1, [sp, #12]
 801aebe:	9202      	str	r2, [sp, #8]
 801aec0:	f8c4 9000 	str.w	r9, [r4]
 801aec4:	681d      	ldr	r5, [r3, #0]
 801aec6:	f002 fdcb 	bl	801da60 <GUI_ALLOC_UnlockH>
 801aeca:	a801      	add	r0, sp, #4
 801aecc:	47a8      	blx	r5
 801aece:	f1b9 0f00 	cmp.w	r9, #0
 801aed2:	d005      	beq.n	801aee0 <GUI_TIMER_Exec+0x60>
 801aed4:	6823      	ldr	r3, [r4, #0]
 801aed6:	4543      	cmp	r3, r8
 801aed8:	d011      	beq.n	801aefe <GUI_TIMER_Exec+0x7e>
 801aeda:	2701      	movs	r7, #1
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d1db      	bne.n	801ae98 <GUI_TIMER_Exec+0x18>
 801aee0:	f000 fa22 	bl	801b328 <GUI_Unlock>
 801aee4:	4638      	mov	r0, r7
 801aee6:	b005      	add	sp, #20
 801aee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aeec:	4668      	mov	r0, sp
 801aeee:	f002 fdb7 	bl	801da60 <GUI_ALLOC_UnlockH>
 801aef2:	f000 fa19 	bl	801b328 <GUI_Unlock>
 801aef6:	4638      	mov	r0, r7
 801aef8:	b005      	add	sp, #20
 801aefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aefe:	f000 fa13 	bl	801b328 <GUI_Unlock>
 801af02:	2700      	movs	r7, #0
 801af04:	4638      	mov	r0, r7
 801af06:	b005      	add	sp, #20
 801af08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af0c:	2002b1e0 	.word	0x2002b1e0

0801af10 <_Link>:
 801af10:	b570      	push	{r4, r5, r6, lr}
 801af12:	4c28      	ldr	r4, [pc, #160]	; (801afb4 <_Link+0xa4>)
 801af14:	b084      	sub	sp, #16
 801af16:	4606      	mov	r6, r0
 801af18:	f002 fd90 	bl	801da3c <GUI_ALLOC_LockH>
 801af1c:	6823      	ldr	r3, [r4, #0]
 801af1e:	9001      	str	r0, [sp, #4]
 801af20:	b933      	cbnz	r3, 801af30 <_Link+0x20>
 801af22:	6026      	str	r6, [r4, #0]
 801af24:	6043      	str	r3, [r0, #4]
 801af26:	a801      	add	r0, sp, #4
 801af28:	f002 fd9a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801af2c:	b004      	add	sp, #16
 801af2e:	bd70      	pop	{r4, r5, r6, pc}
 801af30:	4618      	mov	r0, r3
 801af32:	f002 fd83 	bl	801da3c <GUI_ALLOC_LockH>
 801af36:	ab04      	add	r3, sp, #16
 801af38:	6945      	ldr	r5, [r0, #20]
 801af3a:	f843 0d10 	str.w	r0, [r3, #-16]!
 801af3e:	4668      	mov	r0, sp
 801af40:	f002 fd8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801af44:	9b01      	ldr	r3, [sp, #4]
 801af46:	695a      	ldr	r2, [r3, #20]
 801af48:	1b52      	subs	r2, r2, r5
 801af4a:	2a00      	cmp	r2, #0
 801af4c:	dd2e      	ble.n	801afac <_Link+0x9c>
 801af4e:	6824      	ldr	r4, [r4, #0]
 801af50:	e011      	b.n	801af76 <_Link+0x66>
 801af52:	f002 fd73 	bl	801da3c <GUI_ALLOC_LockH>
 801af56:	4603      	mov	r3, r0
 801af58:	a803      	add	r0, sp, #12
 801af5a:	695d      	ldr	r5, [r3, #20]
 801af5c:	9303      	str	r3, [sp, #12]
 801af5e:	f002 fd7f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801af62:	9b01      	ldr	r3, [sp, #4]
 801af64:	695a      	ldr	r2, [r3, #20]
 801af66:	1b52      	subs	r2, r2, r5
 801af68:	2a00      	cmp	r2, #0
 801af6a:	dd14      	ble.n	801af96 <_Link+0x86>
 801af6c:	9b02      	ldr	r3, [sp, #8]
 801af6e:	a802      	add	r0, sp, #8
 801af70:	685c      	ldr	r4, [r3, #4]
 801af72:	f002 fd75 	bl	801da60 <GUI_ALLOC_UnlockH>
 801af76:	4620      	mov	r0, r4
 801af78:	f002 fd60 	bl	801da3c <GUI_ALLOC_LockH>
 801af7c:	6844      	ldr	r4, [r0, #4]
 801af7e:	9002      	str	r0, [sp, #8]
 801af80:	4603      	mov	r3, r0
 801af82:	4620      	mov	r0, r4
 801af84:	2c00      	cmp	r4, #0
 801af86:	d1e4      	bne.n	801af52 <_Link+0x42>
 801af88:	9a01      	ldr	r2, [sp, #4]
 801af8a:	a802      	add	r0, sp, #8
 801af8c:	6054      	str	r4, [r2, #4]
 801af8e:	605e      	str	r6, [r3, #4]
 801af90:	f002 fd66 	bl	801da60 <GUI_ALLOC_UnlockH>
 801af94:	e7c7      	b.n	801af26 <_Link+0x16>
 801af96:	9a02      	ldr	r2, [sp, #8]
 801af98:	605c      	str	r4, [r3, #4]
 801af9a:	a802      	add	r0, sp, #8
 801af9c:	6056      	str	r6, [r2, #4]
 801af9e:	f002 fd5f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801afa2:	a801      	add	r0, sp, #4
 801afa4:	f002 fd5c 	bl	801da60 <GUI_ALLOC_UnlockH>
 801afa8:	b004      	add	sp, #16
 801afaa:	bd70      	pop	{r4, r5, r6, pc}
 801afac:	6822      	ldr	r2, [r4, #0]
 801afae:	605a      	str	r2, [r3, #4]
 801afb0:	6026      	str	r6, [r4, #0]
 801afb2:	e7b8      	b.n	801af26 <_Link+0x16>
 801afb4:	2002b1e0 	.word	0x2002b1e0

0801afb8 <GUI_TIMER__GetFirstTimer>:
 801afb8:	b530      	push	{r4, r5, lr}
 801afba:	4b0a      	ldr	r3, [pc, #40]	; (801afe4 <GUI_TIMER__GetFirstTimer+0x2c>)
 801afbc:	681c      	ldr	r4, [r3, #0]
 801afbe:	2300      	movs	r3, #0
 801afc0:	b083      	sub	sp, #12
 801afc2:	4605      	mov	r5, r0
 801afc4:	6003      	str	r3, [r0, #0]
 801afc6:	b154      	cbz	r4, 801afde <GUI_TIMER__GetFirstTimer+0x26>
 801afc8:	4620      	mov	r0, r4
 801afca:	f002 fd37 	bl	801da3c <GUI_ALLOC_LockH>
 801afce:	ab02      	add	r3, sp, #8
 801afd0:	6902      	ldr	r2, [r0, #16]
 801afd2:	f843 0d04 	str.w	r0, [r3, #-4]!
 801afd6:	602a      	str	r2, [r5, #0]
 801afd8:	4618      	mov	r0, r3
 801afda:	f002 fd41 	bl	801da60 <GUI_ALLOC_UnlockH>
 801afde:	4620      	mov	r0, r4
 801afe0:	b003      	add	sp, #12
 801afe2:	bd30      	pop	{r4, r5, pc}
 801afe4:	2002b1dc 	.word	0x2002b1dc

0801afe8 <GUI_TIMER__GetNextTimerLin>:
 801afe8:	b570      	push	{r4, r5, r6, lr}
 801afea:	2300      	movs	r3, #0
 801afec:	b082      	sub	sp, #8
 801afee:	460d      	mov	r5, r1
 801aff0:	600b      	str	r3, [r1, #0]
 801aff2:	4604      	mov	r4, r0
 801aff4:	b910      	cbnz	r0, 801affc <GUI_TIMER__GetNextTimerLin+0x14>
 801aff6:	4620      	mov	r0, r4
 801aff8:	b002      	add	sp, #8
 801affa:	bd70      	pop	{r4, r5, r6, pc}
 801affc:	f002 fd1e 	bl	801da3c <GUI_ALLOC_LockH>
 801b000:	6884      	ldr	r4, [r0, #8]
 801b002:	9001      	str	r0, [sp, #4]
 801b004:	ae01      	add	r6, sp, #4
 801b006:	b92c      	cbnz	r4, 801b014 <GUI_TIMER__GetNextTimerLin+0x2c>
 801b008:	4630      	mov	r0, r6
 801b00a:	f002 fd29 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b00e:	4620      	mov	r0, r4
 801b010:	b002      	add	sp, #8
 801b012:	bd70      	pop	{r4, r5, r6, pc}
 801b014:	4630      	mov	r0, r6
 801b016:	f002 fd23 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b01a:	4620      	mov	r0, r4
 801b01c:	f002 fd0e 	bl	801da3c <GUI_ALLOC_LockH>
 801b020:	6903      	ldr	r3, [r0, #16]
 801b022:	9001      	str	r0, [sp, #4]
 801b024:	602b      	str	r3, [r5, #0]
 801b026:	e7ef      	b.n	801b008 <GUI_TIMER__GetNextTimerLin+0x20>

0801b028 <GUI_TIMER_Create>:
 801b028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b02c:	b083      	sub	sp, #12
 801b02e:	4681      	mov	r9, r0
 801b030:	460e      	mov	r6, r1
 801b032:	4690      	mov	r8, r2
 801b034:	461f      	mov	r7, r3
 801b036:	f000 f981 	bl	801b33c <GUI_Lock>
 801b03a:	201c      	movs	r0, #28
 801b03c:	f002 fe86 	bl	801dd4c <GUI_ALLOC_AllocZero>
 801b040:	4604      	mov	r4, r0
 801b042:	b928      	cbnz	r0, 801b050 <GUI_TIMER_Create+0x28>
 801b044:	f000 f970 	bl	801b328 <GUI_Unlock>
 801b048:	4620      	mov	r0, r4
 801b04a:	b003      	add	sp, #12
 801b04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b050:	4b1a      	ldr	r3, [pc, #104]	; (801b0bc <GUI_TIMER_Create+0x94>)
 801b052:	4a1b      	ldr	r2, [pc, #108]	; (801b0c0 <GUI_TIMER_Create+0x98>)
 801b054:	601a      	str	r2, [r3, #0]
 801b056:	f002 fcf1 	bl	801da3c <GUI_ALLOC_LockH>
 801b05a:	9000      	str	r0, [sp, #0]
 801b05c:	b34e      	cbz	r6, 801b0b2 <GUI_TIMER_Create+0x8a>
 801b05e:	4605      	mov	r5, r0
 801b060:	616e      	str	r6, [r5, #20]
 801b062:	f8c5 9000 	str.w	r9, [r5]
 801b066:	f8c5 8010 	str.w	r8, [r5, #16]
 801b06a:	81af      	strh	r7, [r5, #12]
 801b06c:	4668      	mov	r0, sp
 801b06e:	f002 fcf7 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b072:	4620      	mov	r0, r4
 801b074:	f7ff ff4c 	bl	801af10 <_Link>
 801b078:	4b12      	ldr	r3, [pc, #72]	; (801b0c4 <GUI_TIMER_Create+0x9c>)
 801b07a:	681a      	ldr	r2, [r3, #0]
 801b07c:	b932      	cbnz	r2, 801b08c <GUI_TIMER_Create+0x64>
 801b07e:	4812      	ldr	r0, [pc, #72]	; (801b0c8 <GUI_TIMER_Create+0xa0>)
 801b080:	4a12      	ldr	r2, [pc, #72]	; (801b0cc <GUI_TIMER_Create+0xa4>)
 801b082:	6002      	str	r2, [r0, #0]
 801b084:	2201      	movs	r2, #1
 801b086:	601a      	str	r2, [r3, #0]
 801b088:	f001 f8ce 	bl	801c228 <GUI__RegisterExit>
 801b08c:	4620      	mov	r0, r4
 801b08e:	f002 fcd5 	bl	801da3c <GUI_ALLOC_LockH>
 801b092:	ab02      	add	r3, sp, #8
 801b094:	4a0e      	ldr	r2, [pc, #56]	; (801b0d0 <GUI_TIMER_Create+0xa8>)
 801b096:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b09a:	6811      	ldr	r1, [r2, #0]
 801b09c:	6081      	str	r1, [r0, #8]
 801b09e:	4618      	mov	r0, r3
 801b0a0:	6014      	str	r4, [r2, #0]
 801b0a2:	f002 fcdd 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b0a6:	f000 f93f 	bl	801b328 <GUI_Unlock>
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	b003      	add	sp, #12
 801b0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0b2:	f000 f8eb 	bl	801b28c <GUI_GetTime>
 801b0b6:	9d00      	ldr	r5, [sp, #0]
 801b0b8:	4606      	mov	r6, r0
 801b0ba:	e7d1      	b.n	801b060 <GUI_TIMER_Create+0x38>
 801b0bc:	2002cb9c 	.word	0x2002cb9c
 801b0c0:	0801ae81 	.word	0x0801ae81
 801b0c4:	2002b1ec 	.word	0x2002b1ec
 801b0c8:	2002b1e4 	.word	0x2002b1e4
 801b0cc:	0801ae65 	.word	0x0801ae65
 801b0d0:	2002b1dc 	.word	0x2002b1dc

0801b0d4 <GUI_TIMER_Delete>:
 801b0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0d6:	4605      	mov	r5, r0
 801b0d8:	b083      	sub	sp, #12
 801b0da:	b908      	cbnz	r0, 801b0e0 <GUI_TIMER_Delete+0xc>
 801b0dc:	b003      	add	sp, #12
 801b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0e0:	4e2c      	ldr	r6, [pc, #176]	; (801b194 <GUI_TIMER_Delete+0xc0>)
 801b0e2:	f000 f92b 	bl	801b33c <GUI_Lock>
 801b0e6:	6834      	ldr	r4, [r6, #0]
 801b0e8:	42a5      	cmp	r5, r4
 801b0ea:	d040      	beq.n	801b16e <GUI_TIMER_Delete+0x9a>
 801b0ec:	b15c      	cbz	r4, 801b106 <GUI_TIMER_Delete+0x32>
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	f002 fca4 	bl	801da3c <GUI_ALLOC_LockH>
 801b0f4:	6884      	ldr	r4, [r0, #8]
 801b0f6:	9000      	str	r0, [sp, #0]
 801b0f8:	42a5      	cmp	r5, r4
 801b0fa:	d02a      	beq.n	801b152 <GUI_TIMER_Delete+0x7e>
 801b0fc:	4668      	mov	r0, sp
 801b0fe:	f002 fcaf 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b102:	2c00      	cmp	r4, #0
 801b104:	d1f3      	bne.n	801b0ee <GUI_TIMER_Delete+0x1a>
 801b106:	4628      	mov	r0, r5
 801b108:	f002 fc98 	bl	801da3c <GUI_ALLOC_LockH>
 801b10c:	4b22      	ldr	r3, [pc, #136]	; (801b198 <GUI_TIMER_Delete+0xc4>)
 801b10e:	9000      	str	r0, [sp, #0]
 801b110:	681c      	ldr	r4, [r3, #0]
 801b112:	42a5      	cmp	r5, r4
 801b114:	d037      	beq.n	801b186 <GUI_TIMER_Delete+0xb2>
 801b116:	af01      	add	r7, sp, #4
 801b118:	b924      	cbnz	r4, 801b124 <GUI_TIMER_Delete+0x50>
 801b11a:	e010      	b.n	801b13e <GUI_TIMER_Delete+0x6a>
 801b11c:	4638      	mov	r0, r7
 801b11e:	f002 fc9f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b122:	b164      	cbz	r4, 801b13e <GUI_TIMER_Delete+0x6a>
 801b124:	4620      	mov	r0, r4
 801b126:	f002 fc89 	bl	801da3c <GUI_ALLOC_LockH>
 801b12a:	6844      	ldr	r4, [r0, #4]
 801b12c:	9001      	str	r0, [sp, #4]
 801b12e:	42a5      	cmp	r5, r4
 801b130:	d1f4      	bne.n	801b11c <GUI_TIMER_Delete+0x48>
 801b132:	9a00      	ldr	r2, [sp, #0]
 801b134:	6852      	ldr	r2, [r2, #4]
 801b136:	6042      	str	r2, [r0, #4]
 801b138:	4638      	mov	r0, r7
 801b13a:	f002 fc91 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b13e:	4668      	mov	r0, sp
 801b140:	f002 fc8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b144:	4628      	mov	r0, r5
 801b146:	f002 fd8b 	bl	801dc60 <GUI_ALLOC_Free>
 801b14a:	f000 f8ed 	bl	801b328 <GUI_Unlock>
 801b14e:	b003      	add	sp, #12
 801b150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b152:	4628      	mov	r0, r5
 801b154:	f002 fc72 	bl	801da3c <GUI_ALLOC_LockH>
 801b158:	9b00      	ldr	r3, [sp, #0]
 801b15a:	6882      	ldr	r2, [r0, #8]
 801b15c:	9001      	str	r0, [sp, #4]
 801b15e:	a801      	add	r0, sp, #4
 801b160:	609a      	str	r2, [r3, #8]
 801b162:	f002 fc7d 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b166:	4668      	mov	r0, sp
 801b168:	f002 fc7a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b16c:	e7cb      	b.n	801b106 <GUI_TIMER_Delete+0x32>
 801b16e:	4628      	mov	r0, r5
 801b170:	f002 fc64 	bl	801da3c <GUI_ALLOC_LockH>
 801b174:	af02      	add	r7, sp, #8
 801b176:	6883      	ldr	r3, [r0, #8]
 801b178:	f847 0d04 	str.w	r0, [r7, #-4]!
 801b17c:	4638      	mov	r0, r7
 801b17e:	6033      	str	r3, [r6, #0]
 801b180:	f002 fc6e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b184:	e7bf      	b.n	801b106 <GUI_TIMER_Delete+0x32>
 801b186:	6842      	ldr	r2, [r0, #4]
 801b188:	601a      	str	r2, [r3, #0]
 801b18a:	4668      	mov	r0, sp
 801b18c:	f002 fc68 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b190:	e7d8      	b.n	801b144 <GUI_TIMER_Delete+0x70>
 801b192:	bf00      	nop
 801b194:	2002b1dc 	.word	0x2002b1dc
 801b198:	2002b1e0 	.word	0x2002b1e0

0801b19c <GUI_TIMER_SetPeriod>:
 801b19c:	b530      	push	{r4, r5, lr}
 801b19e:	4604      	mov	r4, r0
 801b1a0:	b083      	sub	sp, #12
 801b1a2:	460d      	mov	r5, r1
 801b1a4:	b168      	cbz	r0, 801b1c2 <GUI_TIMER_SetPeriod+0x26>
 801b1a6:	f000 f8c9 	bl	801b33c <GUI_Lock>
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	f002 fc46 	bl	801da3c <GUI_ALLOC_LockH>
 801b1b0:	ab02      	add	r3, sp, #8
 801b1b2:	6185      	str	r5, [r0, #24]
 801b1b4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f002 fc51 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b1be:	f000 f8b3 	bl	801b328 <GUI_Unlock>
 801b1c2:	b003      	add	sp, #12
 801b1c4:	bd30      	pop	{r4, r5, pc}
 801b1c6:	bf00      	nop

0801b1c8 <GUI_TIMER_Restart>:
 801b1c8:	b530      	push	{r4, r5, lr}
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	b085      	sub	sp, #20
 801b1ce:	b908      	cbnz	r0, 801b1d4 <GUI_TIMER_Restart+0xc>
 801b1d0:	b005      	add	sp, #20
 801b1d2:	bd30      	pop	{r4, r5, pc}
 801b1d4:	f000 f8b2 	bl	801b33c <GUI_Lock>
 801b1d8:	4628      	mov	r0, r5
 801b1da:	f002 fc2f 	bl	801da3c <GUI_ALLOC_LockH>
 801b1de:	9001      	str	r0, [sp, #4]
 801b1e0:	f000 f854 	bl	801b28c <GUI_GetTime>
 801b1e4:	ab04      	add	r3, sp, #16
 801b1e6:	f853 2d0c 	ldr.w	r2, [r3, #-12]!
 801b1ea:	6991      	ldr	r1, [r2, #24]
 801b1ec:	4408      	add	r0, r1
 801b1ee:	6150      	str	r0, [r2, #20]
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f002 fc35 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b1f6:	4628      	mov	r0, r5
 801b1f8:	f002 fc20 	bl	801da3c <GUI_ALLOC_LockH>
 801b1fc:	4b13      	ldr	r3, [pc, #76]	; (801b24c <GUI_TIMER_Restart+0x84>)
 801b1fe:	9002      	str	r0, [sp, #8]
 801b200:	681c      	ldr	r4, [r3, #0]
 801b202:	42a5      	cmp	r5, r4
 801b204:	d01b      	beq.n	801b23e <GUI_TIMER_Restart+0x76>
 801b206:	b184      	cbz	r4, 801b22a <GUI_TIMER_Restart+0x62>
 801b208:	4620      	mov	r0, r4
 801b20a:	f002 fc17 	bl	801da3c <GUI_ALLOC_LockH>
 801b20e:	6844      	ldr	r4, [r0, #4]
 801b210:	9003      	str	r0, [sp, #12]
 801b212:	42a5      	cmp	r5, r4
 801b214:	d003      	beq.n	801b21e <GUI_TIMER_Restart+0x56>
 801b216:	a803      	add	r0, sp, #12
 801b218:	f002 fc22 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b21c:	e7f3      	b.n	801b206 <GUI_TIMER_Restart+0x3e>
 801b21e:	9b02      	ldr	r3, [sp, #8]
 801b220:	685b      	ldr	r3, [r3, #4]
 801b222:	6043      	str	r3, [r0, #4]
 801b224:	a803      	add	r0, sp, #12
 801b226:	f002 fc1b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b22a:	a802      	add	r0, sp, #8
 801b22c:	f002 fc18 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b230:	4628      	mov	r0, r5
 801b232:	f7ff fe6d 	bl	801af10 <_Link>
 801b236:	f000 f877 	bl	801b328 <GUI_Unlock>
 801b23a:	b005      	add	sp, #20
 801b23c:	bd30      	pop	{r4, r5, pc}
 801b23e:	6842      	ldr	r2, [r0, #4]
 801b240:	601a      	str	r2, [r3, #0]
 801b242:	a802      	add	r0, sp, #8
 801b244:	f002 fc0c 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b248:	e7f2      	b.n	801b230 <GUI_TIMER_Restart+0x68>
 801b24a:	bf00      	nop
 801b24c:	2002b1e0 	.word	0x2002b1e0

0801b250 <GUI_TIMER_GetFlag>:
 801b250:	b530      	push	{r4, r5, lr}
 801b252:	4604      	mov	r4, r0
 801b254:	b083      	sub	sp, #12
 801b256:	460d      	mov	r5, r1
 801b258:	b918      	cbnz	r0, 801b262 <GUI_TIMER_GetFlag+0x12>
 801b25a:	2401      	movs	r4, #1
 801b25c:	4620      	mov	r0, r4
 801b25e:	b003      	add	sp, #12
 801b260:	bd30      	pop	{r4, r5, pc}
 801b262:	f000 f86b 	bl	801b33c <GUI_Lock>
 801b266:	4620      	mov	r0, r4
 801b268:	f002 fbe8 	bl	801da3c <GUI_ALLOC_LockH>
 801b26c:	ab02      	add	r3, sp, #8
 801b26e:	8982      	ldrh	r2, [r0, #12]
 801b270:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b274:	4215      	tst	r5, r2
 801b276:	4618      	mov	r0, r3
 801b278:	bf0c      	ite	eq
 801b27a:	2400      	moveq	r4, #0
 801b27c:	2401      	movne	r4, #1
 801b27e:	f002 fbef 	bl	801da60 <GUI_ALLOC_UnlockH>
 801b282:	f000 f851 	bl	801b328 <GUI_Unlock>
 801b286:	4620      	mov	r0, r4
 801b288:	b003      	add	sp, #12
 801b28a:	bd30      	pop	{r4, r5, pc}

0801b28c <GUI_GetTime>:
 801b28c:	f7ef ba68 	b.w	800a760 <GUI_X_GetTime>

0801b290 <GUI_Delay>:
 801b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b294:	4607      	mov	r7, r0
 801b296:	f7ef fa63 	bl	800a760 <GUI_X_GetTime>
 801b29a:	4407      	add	r7, r0
 801b29c:	f7ef fa60 	bl	800a760 <GUI_X_GetTime>
 801b2a0:	1a3c      	subs	r4, r7, r0
 801b2a2:	2c00      	cmp	r4, #0
 801b2a4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801b30c <GUI_Delay+0x7c>
 801b2a8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801b310 <GUI_Delay+0x80>
 801b2ac:	dd23      	ble.n	801b2f6 <GUI_Delay+0x66>
 801b2ae:	f001 fa5d 	bl	801c76c <GUI_Exec>
 801b2b2:	f8d9 0000 	ldr.w	r0, [r9]
 801b2b6:	4284      	cmp	r4, r0
 801b2b8:	bfb4      	ite	lt
 801b2ba:	4626      	movlt	r6, r4
 801b2bc:	4606      	movge	r6, r0
 801b2be:	f000 f83d 	bl	801b33c <GUI_Lock>
 801b2c2:	f8d8 4000 	ldr.w	r4, [r8]
 801b2c6:	f002 fca7 	bl	801dc18 <GUI_ALLOC_Lock>
 801b2ca:	b1b4      	cbz	r4, 801b2fa <GUI_Delay+0x6a>
 801b2cc:	4625      	mov	r5, r4
 801b2ce:	f000 f82b 	bl	801b328 <GUI_Unlock>
 801b2d2:	3d01      	subs	r5, #1
 801b2d4:	d1fb      	bne.n	801b2ce <GUI_Delay+0x3e>
 801b2d6:	4630      	mov	r0, r6
 801b2d8:	f7ef fa46 	bl	800a768 <GUI_X_Delay>
 801b2dc:	f000 f82e 	bl	801b33c <GUI_Lock>
 801b2e0:	3c01      	subs	r4, #1
 801b2e2:	d1fb      	bne.n	801b2dc <GUI_Delay+0x4c>
 801b2e4:	f002 fca0 	bl	801dc28 <GUI_ALLOC_Unlock>
 801b2e8:	f000 f81e 	bl	801b328 <GUI_Unlock>
 801b2ec:	f7ef fa38 	bl	800a760 <GUI_X_GetTime>
 801b2f0:	1a3c      	subs	r4, r7, r0
 801b2f2:	2c00      	cmp	r4, #0
 801b2f4:	dcdb      	bgt.n	801b2ae <GUI_Delay+0x1e>
 801b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2fa:	4630      	mov	r0, r6
 801b2fc:	f7ef fa34 	bl	800a768 <GUI_X_Delay>
 801b300:	f002 fc92 	bl	801dc28 <GUI_ALLOC_Unlock>
 801b304:	f000 f810 	bl	801b328 <GUI_Unlock>
 801b308:	e7f0      	b.n	801b2ec <GUI_Delay+0x5c>
 801b30a:	bf00      	nop
 801b30c:	20000268 	.word	0x20000268
 801b310:	2002b1f4 	.word	0x2002b1f4

0801b314 <_OnExit>:
 801b314:	b510      	push	{r4, lr}
 801b316:	4c03      	ldr	r4, [pc, #12]	; (801b324 <_OnExit+0x10>)
 801b318:	6820      	ldr	r0, [r4, #0]
 801b31a:	f002 fa45 	bl	801d7a8 <GUI_ALLOC_FreeFixedBlock>
 801b31e:	2300      	movs	r3, #0
 801b320:	6023      	str	r3, [r4, #0]
 801b322:	bd10      	pop	{r4, pc}
 801b324:	2002b1f0 	.word	0x2002b1f0

0801b328 <GUI_Unlock>:
 801b328:	4a03      	ldr	r2, [pc, #12]	; (801b338 <GUI_Unlock+0x10>)
 801b32a:	6813      	ldr	r3, [r2, #0]
 801b32c:	3b01      	subs	r3, #1
 801b32e:	6013      	str	r3, [r2, #0]
 801b330:	b103      	cbz	r3, 801b334 <GUI_Unlock+0xc>
 801b332:	4770      	bx	lr
 801b334:	f7ef ba36 	b.w	800a7a4 <GUI_X_Unlock>
 801b338:	2002b1f4 	.word	0x2002b1f4

0801b33c <GUI_Lock>:
 801b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b340:	4c2a      	ldr	r4, [pc, #168]	; (801b3ec <GUI_Lock+0xb0>)
 801b342:	6823      	ldr	r3, [r4, #0]
 801b344:	b963      	cbnz	r3, 801b360 <GUI_Lock+0x24>
 801b346:	f7ef fa35 	bl	800a7b4 <GUI_X_Lock>
 801b34a:	f7ef fa3d 	bl	800a7c8 <GUI_X_GetTaskId>
 801b34e:	4b28      	ldr	r3, [pc, #160]	; (801b3f0 <GUI_Lock+0xb4>)
 801b350:	6018      	str	r0, [r3, #0]
 801b352:	6823      	ldr	r3, [r4, #0]
 801b354:	3301      	adds	r3, #1
 801b356:	2b01      	cmp	r3, #1
 801b358:	6023      	str	r3, [r4, #0]
 801b35a:	d011      	beq.n	801b380 <GUI_Lock+0x44>
 801b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b360:	4d23      	ldr	r5, [pc, #140]	; (801b3f0 <GUI_Lock+0xb4>)
 801b362:	f7ef fa31 	bl	800a7c8 <GUI_X_GetTaskId>
 801b366:	682b      	ldr	r3, [r5, #0]
 801b368:	4298      	cmp	r0, r3
 801b36a:	d0f2      	beq.n	801b352 <GUI_Lock+0x16>
 801b36c:	f7ef fa22 	bl	800a7b4 <GUI_X_Lock>
 801b370:	f7ef fa2a 	bl	800a7c8 <GUI_X_GetTaskId>
 801b374:	6823      	ldr	r3, [r4, #0]
 801b376:	6028      	str	r0, [r5, #0]
 801b378:	3301      	adds	r3, #1
 801b37a:	2b01      	cmp	r3, #1
 801b37c:	6023      	str	r3, [r4, #0]
 801b37e:	d1ed      	bne.n	801b35c <GUI_Lock+0x20>
 801b380:	4e1c      	ldr	r6, [pc, #112]	; (801b3f4 <GUI_Lock+0xb8>)
 801b382:	6833      	ldr	r3, [r6, #0]
 801b384:	2b00      	cmp	r3, #0
 801b386:	dd2c      	ble.n	801b3e2 <GUI_Lock+0xa6>
 801b388:	2400      	movs	r4, #0
 801b38a:	4f1b      	ldr	r7, [pc, #108]	; (801b3f8 <GUI_Lock+0xbc>)
 801b38c:	4625      	mov	r5, r4
 801b38e:	e006      	b.n	801b39e <GUI_Lock+0x62>
 801b390:	b352      	cbz	r2, 801b3e8 <GUI_Lock+0xac>
 801b392:	6833      	ldr	r3, [r6, #0]
 801b394:	3501      	adds	r5, #1
 801b396:	429d      	cmp	r5, r3
 801b398:	f104 0478 	add.w	r4, r4, #120	; 0x78
 801b39c:	da21      	bge.n	801b3e2 <GUI_Lock+0xa6>
 801b39e:	f7ef fa13 	bl	800a7c8 <GUI_X_GetTaskId>
 801b3a2:	683b      	ldr	r3, [r7, #0]
 801b3a4:	591a      	ldr	r2, [r3, r4]
 801b3a6:	4290      	cmp	r0, r2
 801b3a8:	4423      	add	r3, r4
 801b3aa:	d1f1      	bne.n	801b390 <GUI_Lock+0x54>
 801b3ac:	4e13      	ldr	r6, [pc, #76]	; (801b3fc <GUI_Lock+0xc0>)
 801b3ae:	6833      	ldr	r3, [r6, #0]
 801b3b0:	42ab      	cmp	r3, r5
 801b3b2:	d0d3      	beq.n	801b35c <GUI_Lock+0x20>
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	db11      	blt.n	801b3dc <GUI_Lock+0xa0>
 801b3b8:	4f0f      	ldr	r7, [pc, #60]	; (801b3f8 <GUI_Lock+0xbc>)
 801b3ba:	683a      	ldr	r2, [r7, #0]
 801b3bc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801b3c0:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 801b3c4:	f000 fe02 	bl	801bfcc <GUI_DEVICE_UnlinkTaskDevices>
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 801b3ce:	441c      	add	r4, r3
 801b3d0:	4b0b      	ldr	r3, [pc, #44]	; (801b400 <GUI_Lock+0xc4>)
 801b3d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801b3d4:	3404      	adds	r4, #4
 801b3d6:	601c      	str	r4, [r3, #0]
 801b3d8:	f000 fdfa 	bl	801bfd0 <GUI_DEVICE_LinkDevices>
 801b3dc:	6035      	str	r5, [r6, #0]
 801b3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3e2:	2400      	movs	r4, #0
 801b3e4:	4625      	mov	r5, r4
 801b3e6:	e7e1      	b.n	801b3ac <GUI_Lock+0x70>
 801b3e8:	6018      	str	r0, [r3, #0]
 801b3ea:	e7df      	b.n	801b3ac <GUI_Lock+0x70>
 801b3ec:	2002b1f4 	.word	0x2002b1f4
 801b3f0:	2002b200 	.word	0x2002b200
 801b3f4:	20000270 	.word	0x20000270
 801b3f8:	2002b1f0 	.word	0x2002b1f0
 801b3fc:	2000026c 	.word	0x2000026c
 801b400:	2000027c 	.word	0x2000027c

0801b404 <GUITASK_Init>:
 801b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b406:	4819      	ldr	r0, [pc, #100]	; (801b46c <GUITASK_Init+0x68>)
 801b408:	4e19      	ldr	r6, [pc, #100]	; (801b470 <GUITASK_Init+0x6c>)
 801b40a:	4b1a      	ldr	r3, [pc, #104]	; (801b474 <GUITASK_Init+0x70>)
 801b40c:	6003      	str	r3, [r0, #0]
 801b40e:	f000 ff0b 	bl	801c228 <GUI__RegisterExit>
 801b412:	6834      	ldr	r4, [r6, #0]
 801b414:	4f18      	ldr	r7, [pc, #96]	; (801b478 <GUITASK_Init+0x74>)
 801b416:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 801b41a:	00e4      	lsls	r4, r4, #3
 801b41c:	4620      	mov	r0, r4
 801b41e:	f002 f9cd 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801b422:	4b16      	ldr	r3, [pc, #88]	; (801b47c <GUITASK_Init+0x78>)
 801b424:	6038      	str	r0, [r7, #0]
 801b426:	4622      	mov	r2, r4
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	2100      	movs	r1, #0
 801b42c:	4798      	blx	r3
 801b42e:	4b14      	ldr	r3, [pc, #80]	; (801b480 <GUITASK_Init+0x7c>)
 801b430:	f04f 32ff 	mov.w	r2, #4294967295
 801b434:	601a      	str	r2, [r3, #0]
 801b436:	f7ef f99d 	bl	800a774 <GUI_X_InitOS>
 801b43a:	6833      	ldr	r3, [r6, #0]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	dd11      	ble.n	801b464 <GUITASK_Init+0x60>
 801b440:	2400      	movs	r4, #0
 801b442:	4625      	mov	r5, r4
 801b444:	e003      	b.n	801b44e <GUITASK_Init+0x4a>
 801b446:	b172      	cbz	r2, 801b466 <GUITASK_Init+0x62>
 801b448:	6833      	ldr	r3, [r6, #0]
 801b44a:	429d      	cmp	r5, r3
 801b44c:	da0a      	bge.n	801b464 <GUITASK_Init+0x60>
 801b44e:	f7ef f9bb 	bl	800a7c8 <GUI_X_GetTaskId>
 801b452:	683b      	ldr	r3, [r7, #0]
 801b454:	591a      	ldr	r2, [r3, r4]
 801b456:	4290      	cmp	r0, r2
 801b458:	4423      	add	r3, r4
 801b45a:	f105 0501 	add.w	r5, r5, #1
 801b45e:	f104 0478 	add.w	r4, r4, #120	; 0x78
 801b462:	d1f0      	bne.n	801b446 <GUITASK_Init+0x42>
 801b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b466:	6018      	str	r0, [r3, #0]
 801b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b46a:	bf00      	nop
 801b46c:	2002b1f8 	.word	0x2002b1f8
 801b470:	20000270 	.word	0x20000270
 801b474:	0801b315 	.word	0x0801b315
 801b478:	2002b1f0 	.word	0x2002b1f0
 801b47c:	20000250 	.word	0x20000250
 801b480:	2000026c 	.word	0x2000026c

0801b484 <GUITASK_CopyContext>:
 801b484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b488:	4f24      	ldr	r7, [pc, #144]	; (801b51c <GUITASK_CopyContext+0x98>)
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	dd40      	ble.n	801b512 <GUITASK_CopyContext+0x8e>
 801b490:	4e23      	ldr	r6, [pc, #140]	; (801b520 <GUITASK_CopyContext+0x9c>)
 801b492:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801b524 <GUITASK_CopyContext+0xa0>
 801b496:	6834      	ldr	r4, [r6, #0]
 801b498:	f8d8 a000 	ldr.w	sl, [r8]
 801b49c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801b4a0:	340c      	adds	r4, #12
 801b4a2:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 801b4a6:	2500      	movs	r5, #0
 801b4a8:	f1a4 0308 	sub.w	r3, r4, #8
 801b4ac:	2270      	movs	r2, #112	; 0x70
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	4651      	mov	r1, sl
 801b4b2:	f007 fa1f 	bl	80228f4 <memcpy>
 801b4b6:	1f22      	subs	r2, r4, #4
 801b4b8:	6320      	str	r0, [r4, #48]	; 0x30
 801b4ba:	63a0      	str	r0, [r4, #56]	; 0x38
 801b4bc:	f844 5c0c 	str.w	r5, [r4, #-12]
 801b4c0:	6362      	str	r2, [r4, #52]	; 0x34
 801b4c2:	60e4      	str	r4, [r4, #12]
 801b4c4:	3478      	adds	r4, #120	; 0x78
 801b4c6:	454c      	cmp	r4, r9
 801b4c8:	d1ee      	bne.n	801b4a8 <GUITASK_CopyContext+0x24>
 801b4ca:	2400      	movs	r4, #0
 801b4cc:	4625      	mov	r5, r4
 801b4ce:	e003      	b.n	801b4d8 <GUITASK_CopyContext+0x54>
 801b4d0:	b19a      	cbz	r2, 801b4fa <GUITASK_CopyContext+0x76>
 801b4d2:	683a      	ldr	r2, [r7, #0]
 801b4d4:	4295      	cmp	r5, r2
 801b4d6:	da16      	bge.n	801b506 <GUITASK_CopyContext+0x82>
 801b4d8:	f7ef f976 	bl	800a7c8 <GUI_X_GetTaskId>
 801b4dc:	6833      	ldr	r3, [r6, #0]
 801b4de:	591a      	ldr	r2, [r3, r4]
 801b4e0:	4290      	cmp	r0, r2
 801b4e2:	eb03 0104 	add.w	r1, r3, r4
 801b4e6:	f105 0501 	add.w	r5, r5, #1
 801b4ea:	f104 0478 	add.w	r4, r4, #120	; 0x78
 801b4ee:	d1ef      	bne.n	801b4d0 <GUITASK_CopyContext+0x4c>
 801b4f0:	3104      	adds	r1, #4
 801b4f2:	f8c8 1000 	str.w	r1, [r8]
 801b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4fa:	6008      	str	r0, [r1, #0]
 801b4fc:	3104      	adds	r1, #4
 801b4fe:	f8c8 1000 	str.w	r1, [r8]
 801b502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b506:	4619      	mov	r1, r3
 801b508:	3104      	adds	r1, #4
 801b50a:	f8c8 1000 	str.w	r1, [r8]
 801b50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b512:	4b03      	ldr	r3, [pc, #12]	; (801b520 <GUITASK_CopyContext+0x9c>)
 801b514:	f8df 800c 	ldr.w	r8, [pc, #12]	; 801b524 <GUITASK_CopyContext+0xa0>
 801b518:	6819      	ldr	r1, [r3, #0]
 801b51a:	e7e9      	b.n	801b4f0 <GUITASK_CopyContext+0x6c>
 801b51c:	20000270 	.word	0x20000270
 801b520:	2002b1f0 	.word	0x2002b1f0
 801b524:	2000027c 	.word	0x2000027c

0801b528 <GUI__AlphaPreserveTrans>:
 801b528:	b510      	push	{r4, lr}
 801b52a:	4b09      	ldr	r3, [pc, #36]	; (801b550 <GUI__AlphaPreserveTrans+0x28>)
 801b52c:	4602      	mov	r2, r0
 801b52e:	781c      	ldrb	r4, [r3, #0]
 801b530:	b930      	cbnz	r0, 801b540 <GUI__AlphaPreserveTrans+0x18>
 801b532:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801b536:	701a      	strb	r2, [r3, #0]
 801b538:	f005 fd32 	bl	8020fa0 <LCD_AA_SetOrMask>
 801b53c:	4620      	mov	r0, r4
 801b53e:	bd10      	pop	{r4, pc}
 801b540:	2201      	movs	r2, #1
 801b542:	2000      	movs	r0, #0
 801b544:	701a      	strb	r2, [r3, #0]
 801b546:	f005 fd2b 	bl	8020fa0 <LCD_AA_SetOrMask>
 801b54a:	4620      	mov	r0, r4
 801b54c:	bd10      	pop	{r4, pc}
 801b54e:	bf00      	nop
 801b550:	2002cbb4 	.word	0x2002cbb4

0801b554 <GUI_GetLayerPosEx>:
 801b554:	b570      	push	{r4, r5, r6, lr}
 801b556:	4604      	mov	r4, r0
 801b558:	460e      	mov	r6, r1
 801b55a:	4615      	mov	r5, r2
 801b55c:	f7ff feee 	bl	801b33c <GUI_Lock>
 801b560:	4620      	mov	r0, r4
 801b562:	4631      	mov	r1, r6
 801b564:	462a      	mov	r2, r5
 801b566:	f7fe f821 	bl	80195ac <LCD_GetPosEx>
 801b56a:	4604      	mov	r4, r0
 801b56c:	b110      	cbz	r0, 801b574 <GUI_GetLayerPosEx+0x20>
 801b56e:	2300      	movs	r3, #0
 801b570:	6033      	str	r3, [r6, #0]
 801b572:	602b      	str	r3, [r5, #0]
 801b574:	f7ff fed8 	bl	801b328 <GUI_Unlock>
 801b578:	4620      	mov	r0, r4
 801b57a:	bd70      	pop	{r4, r5, r6, pc}

0801b57c <GUI_SelectLayer>:
 801b57c:	b570      	push	{r4, r5, r6, lr}
 801b57e:	4d0d      	ldr	r5, [pc, #52]	; (801b5b4 <GUI_SelectLayer+0x38>)
 801b580:	682b      	ldr	r3, [r5, #0]
 801b582:	4604      	mov	r4, r0
 801b584:	7c5e      	ldrb	r6, [r3, #17]
 801b586:	f7ff fed9 	bl	801b33c <GUI_Lock>
 801b58a:	2c01      	cmp	r4, #1
 801b58c:	d903      	bls.n	801b596 <GUI_SelectLayer+0x1a>
 801b58e:	f7ff fecb 	bl	801b328 <GUI_Unlock>
 801b592:	4630      	mov	r0, r6
 801b594:	bd70      	pop	{r4, r5, r6, pc}
 801b596:	4620      	mov	r0, r4
 801b598:	f000 fbfe 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 801b59c:	2800      	cmp	r0, #0
 801b59e:	d0f6      	beq.n	801b58e <GUI_SelectLayer+0x12>
 801b5a0:	682b      	ldr	r3, [r5, #0]
 801b5a2:	745c      	strb	r4, [r3, #17]
 801b5a4:	f001 f94c 	bl	801c840 <GUI_SelectLCD>
 801b5a8:	4b03      	ldr	r3, [pc, #12]	; (801b5b8 <GUI_SelectLayer+0x3c>)
 801b5aa:	601c      	str	r4, [r3, #0]
 801b5ac:	f7ff febc 	bl	801b328 <GUI_Unlock>
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	bd70      	pop	{r4, r5, r6, pc}
 801b5b4:	2000027c 	.word	0x2000027c
 801b5b8:	2002cb20 	.word	0x2002cb20

0801b5bc <GUI_StoreKey>:
 801b5bc:	4b02      	ldr	r3, [pc, #8]	; (801b5c8 <GUI_StoreKey+0xc>)
 801b5be:	681a      	ldr	r2, [r3, #0]
 801b5c0:	b902      	cbnz	r2, 801b5c4 <GUI_StoreKey+0x8>
 801b5c2:	6018      	str	r0, [r3, #0]
 801b5c4:	f7ff bbb0 	b.w	801ad28 <GUI_SignalEvent>
 801b5c8:	2002b204 	.word	0x2002b204

0801b5cc <GUI_PollKeyMsg>:
 801b5cc:	b510      	push	{r4, lr}
 801b5ce:	f7ff feb5 	bl	801b33c <GUI_Lock>
 801b5d2:	4a0d      	ldr	r2, [pc, #52]	; (801b608 <GUI_PollKeyMsg+0x3c>)
 801b5d4:	490d      	ldr	r1, [pc, #52]	; (801b60c <GUI_PollKeyMsg+0x40>)
 801b5d6:	6813      	ldr	r3, [r2, #0]
 801b5d8:	6809      	ldr	r1, [r1, #0]
 801b5da:	428b      	cmp	r3, r1
 801b5dc:	d00f      	beq.n	801b5fe <GUI_PollKeyMsg+0x32>
 801b5de:	4c0c      	ldr	r4, [pc, #48]	; (801b610 <GUI_PollKeyMsg+0x44>)
 801b5e0:	42a3      	cmp	r3, r4
 801b5e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b5e6:	f04f 0401 	mov.w	r4, #1
 801b5ea:	bf14      	ite	ne
 801b5ec:	3308      	addne	r3, #8
 801b5ee:	3b50      	subeq	r3, #80	; 0x50
 801b5f0:	6013      	str	r3, [r2, #0]
 801b5f2:	f7f8 ffd1 	bl	8014598 <WM_OnKey>
 801b5f6:	f7ff fe97 	bl	801b328 <GUI_Unlock>
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	bd10      	pop	{r4, pc}
 801b5fe:	2400      	movs	r4, #0
 801b600:	f7ff fe92 	bl	801b328 <GUI_Unlock>
 801b604:	4620      	mov	r0, r4
 801b606:	bd10      	pop	{r4, pc}
 801b608:	20000278 	.word	0x20000278
 801b60c:	20000274 	.word	0x20000274
 801b610:	2002b258 	.word	0x2002b258

0801b614 <GUI_DrawHLine>:
 801b614:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b616:	4f14      	ldr	r7, [pc, #80]	; (801b668 <GUI_DrawHLine+0x54>)
 801b618:	b083      	sub	sp, #12
 801b61a:	4606      	mov	r6, r0
 801b61c:	4614      	mov	r4, r2
 801b61e:	460d      	mov	r5, r1
 801b620:	f7ff fe8c 	bl	801b33c <GUI_Lock>
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b62a:	4416      	add	r6, r2
 801b62c:	441d      	add	r5, r3
 801b62e:	441c      	add	r4, r3
 801b630:	4668      	mov	r0, sp
 801b632:	b2b3      	uxth	r3, r6
 801b634:	f8ad 5000 	strh.w	r5, [sp]
 801b638:	f8ad 4004 	strh.w	r4, [sp, #4]
 801b63c:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b640:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b644:	f7fb f95a 	bl	80168fc <WM__InitIVRSearch>
 801b648:	b150      	cbz	r0, 801b660 <GUI_DrawHLine+0x4c>
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b64e:	4628      	mov	r0, r5
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4631      	mov	r1, r6
 801b654:	4622      	mov	r2, r4
 801b656:	4798      	blx	r3
 801b658:	f7fb f82a 	bl	80166b0 <WM__GetNextIVR>
 801b65c:	2800      	cmp	r0, #0
 801b65e:	d1f4      	bne.n	801b64a <GUI_DrawHLine+0x36>
 801b660:	f7ff fe62 	bl	801b328 <GUI_Unlock>
 801b664:	b003      	add	sp, #12
 801b666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b668:	2000027c 	.word	0x2000027c

0801b66c <GUI_DrawPixel>:
 801b66c:	b570      	push	{r4, r5, r6, lr}
 801b66e:	4e13      	ldr	r6, [pc, #76]	; (801b6bc <GUI_DrawPixel+0x50>)
 801b670:	b082      	sub	sp, #8
 801b672:	4605      	mov	r5, r0
 801b674:	460c      	mov	r4, r1
 801b676:	f7ff fe61 	bl	801b33c <GUI_Lock>
 801b67a:	6833      	ldr	r3, [r6, #0]
 801b67c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b680:	4415      	add	r5, r2
 801b682:	441c      	add	r4, r3
 801b684:	b2aa      	uxth	r2, r5
 801b686:	b2a3      	uxth	r3, r4
 801b688:	4668      	mov	r0, sp
 801b68a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b68e:	f8ad 2000 	strh.w	r2, [sp]
 801b692:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b696:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b69a:	f7fb f92f 	bl	80168fc <WM__InitIVRSearch>
 801b69e:	b148      	cbz	r0, 801b6b4 <GUI_DrawPixel+0x48>
 801b6a0:	6833      	ldr	r3, [r6, #0]
 801b6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	685b      	ldr	r3, [r3, #4]
 801b6a8:	4621      	mov	r1, r4
 801b6aa:	4798      	blx	r3
 801b6ac:	f7fb f800 	bl	80166b0 <WM__GetNextIVR>
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	d1f5      	bne.n	801b6a0 <GUI_DrawPixel+0x34>
 801b6b4:	f7ff fe38 	bl	801b328 <GUI_Unlock>
 801b6b8:	b002      	add	sp, #8
 801b6ba:	bd70      	pop	{r4, r5, r6, pc}
 801b6bc:	2000027c 	.word	0x2000027c

0801b6c0 <GUI_DrawVLine>:
 801b6c0:	b570      	push	{r4, r5, r6, lr}
 801b6c2:	b082      	sub	sp, #8
 801b6c4:	4606      	mov	r6, r0
 801b6c6:	4614      	mov	r4, r2
 801b6c8:	460d      	mov	r5, r1
 801b6ca:	f7ff fe37 	bl	801b33c <GUI_Lock>
 801b6ce:	4b10      	ldr	r3, [pc, #64]	; (801b710 <GUI_DrawVLine+0x50>)
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6d6:	4416      	add	r6, r2
 801b6d8:	441d      	add	r5, r3
 801b6da:	441c      	add	r4, r3
 801b6dc:	4668      	mov	r0, sp
 801b6de:	b2b3      	uxth	r3, r6
 801b6e0:	f8ad 5002 	strh.w	r5, [sp, #2]
 801b6e4:	f8ad 4006 	strh.w	r4, [sp, #6]
 801b6e8:	f8ad 3000 	strh.w	r3, [sp]
 801b6ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b6f0:	f7fb f904 	bl	80168fc <WM__InitIVRSearch>
 801b6f4:	b140      	cbz	r0, 801b708 <GUI_DrawVLine+0x48>
 801b6f6:	4630      	mov	r0, r6
 801b6f8:	4629      	mov	r1, r5
 801b6fa:	4622      	mov	r2, r4
 801b6fc:	f7fe f9be 	bl	8019a7c <LCD_DrawVLine>
 801b700:	f7fa ffd6 	bl	80166b0 <WM__GetNextIVR>
 801b704:	2800      	cmp	r0, #0
 801b706:	d1f6      	bne.n	801b6f6 <GUI_DrawVLine+0x36>
 801b708:	f7ff fe0e 	bl	801b328 <GUI_Unlock>
 801b70c:	b002      	add	sp, #8
 801b70e:	bd70      	pop	{r4, r5, r6, pc}
 801b710:	2000027c 	.word	0x2000027c

0801b714 <GUI_FillRect>:
 801b714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b718:	b083      	sub	sp, #12
 801b71a:	4607      	mov	r7, r0
 801b71c:	4699      	mov	r9, r3
 801b71e:	460d      	mov	r5, r1
 801b720:	4690      	mov	r8, r2
 801b722:	f7ff fe0b 	bl	801b33c <GUI_Lock>
 801b726:	4b11      	ldr	r3, [pc, #68]	; (801b76c <GUI_FillRect+0x58>)
 801b728:	681c      	ldr	r4, [r3, #0]
 801b72a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 801b72c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801b72e:	4437      	add	r7, r6
 801b730:	4425      	add	r5, r4
 801b732:	4446      	add	r6, r8
 801b734:	444c      	add	r4, r9
 801b736:	4668      	mov	r0, sp
 801b738:	f8ad 7000 	strh.w	r7, [sp]
 801b73c:	f8ad 6004 	strh.w	r6, [sp, #4]
 801b740:	f8ad 5002 	strh.w	r5, [sp, #2]
 801b744:	f8ad 4006 	strh.w	r4, [sp, #6]
 801b748:	f7fb f8d8 	bl	80168fc <WM__InitIVRSearch>
 801b74c:	b148      	cbz	r0, 801b762 <GUI_FillRect+0x4e>
 801b74e:	4638      	mov	r0, r7
 801b750:	4629      	mov	r1, r5
 801b752:	4632      	mov	r2, r6
 801b754:	4623      	mov	r3, r4
 801b756:	f7fe f9b9 	bl	8019acc <LCD_FillRect>
 801b75a:	f7fa ffa9 	bl	80166b0 <WM__GetNextIVR>
 801b75e:	2800      	cmp	r0, #0
 801b760:	d1f5      	bne.n	801b74e <GUI_FillRect+0x3a>
 801b762:	f7ff fde1 	bl	801b328 <GUI_Unlock>
 801b766:	b003      	add	sp, #12
 801b768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b76c:	2000027c 	.word	0x2000027c

0801b770 <GUI_FillRectEx>:
 801b770:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b772:	b083      	sub	sp, #12
 801b774:	f9b0 7000 	ldrsh.w	r7, [r0]
 801b778:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801b77c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801b780:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801b784:	f7ff fdda 	bl	801b33c <GUI_Lock>
 801b788:	4b10      	ldr	r3, [pc, #64]	; (801b7cc <GUI_FillRectEx+0x5c>)
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b790:	4417      	add	r7, r2
 801b792:	4416      	add	r6, r2
 801b794:	441d      	add	r5, r3
 801b796:	441c      	add	r4, r3
 801b798:	4668      	mov	r0, sp
 801b79a:	f8ad 7000 	strh.w	r7, [sp]
 801b79e:	f8ad 6004 	strh.w	r6, [sp, #4]
 801b7a2:	f8ad 5002 	strh.w	r5, [sp, #2]
 801b7a6:	f8ad 4006 	strh.w	r4, [sp, #6]
 801b7aa:	f7fb f8a7 	bl	80168fc <WM__InitIVRSearch>
 801b7ae:	b148      	cbz	r0, 801b7c4 <GUI_FillRectEx+0x54>
 801b7b0:	4638      	mov	r0, r7
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	4632      	mov	r2, r6
 801b7b6:	4623      	mov	r3, r4
 801b7b8:	f7fe f988 	bl	8019acc <LCD_FillRect>
 801b7bc:	f7fa ff78 	bl	80166b0 <WM__GetNextIVR>
 801b7c0:	2800      	cmp	r0, #0
 801b7c2:	d1f5      	bne.n	801b7b0 <GUI_FillRectEx+0x40>
 801b7c4:	f7ff fdb0 	bl	801b328 <GUI_Unlock>
 801b7c8:	b003      	add	sp, #12
 801b7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7cc:	2000027c 	.word	0x2000027c

0801b7d0 <GUI_DrawBitmap>:
 801b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7d4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 801b8d4 <GUI_DrawBitmap+0x104>
 801b7d8:	b089      	sub	sp, #36	; 0x24
 801b7da:	4604      	mov	r4, r0
 801b7dc:	460d      	mov	r5, r1
 801b7de:	4616      	mov	r6, r2
 801b7e0:	f7ff fdac 	bl	801b33c <GUI_Lock>
 801b7e4:	f8d9 3000 	ldr.w	r3, [r9]
 801b7e8:	8822      	ldrh	r2, [r4, #0]
 801b7ea:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801b7ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801b7ee:	8863      	ldrh	r3, [r4, #2]
 801b7f0:	442f      	add	r7, r5
 801b7f2:	eb06 0801 	add.w	r8, r6, r1
 801b7f6:	3a01      	subs	r2, #1
 801b7f8:	3b01      	subs	r3, #1
 801b7fa:	443a      	add	r2, r7
 801b7fc:	4443      	add	r3, r8
 801b7fe:	a806      	add	r0, sp, #24
 801b800:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b804:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b808:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b80c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b810:	f7fb f874 	bl	80168fc <WM__InitIVRSearch>
 801b814:	2800      	cmp	r0, #0
 801b816:	d04f      	beq.n	801b8b8 <GUI_DrawBitmap+0xe8>
 801b818:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801b8d8 <GUI_DrawBitmap+0x108>
 801b81c:	46cb      	mov	fp, r9
 801b81e:	e019      	b.n	801b854 <GUI_DrawBitmap+0x84>
 801b820:	f040 0002 	orr.w	r0, r0, #2
 801b824:	f001 f87c 	bl	801c920 <GUI_SetDrawMode>
 801b828:	6921      	ldr	r1, [r4, #16]
 801b82a:	b319      	cbz	r1, 801b874 <GUI_DrawBitmap+0xa4>
 801b82c:	68a0      	ldr	r0, [r4, #8]
 801b82e:	68e6      	ldr	r6, [r4, #12]
 801b830:	8822      	ldrh	r2, [r4, #0]
 801b832:	8863      	ldrh	r3, [r4, #2]
 801b834:	9000      	str	r0, [sp, #0]
 801b836:	2001      	movs	r0, #1
 801b838:	9002      	str	r0, [sp, #8]
 801b83a:	9003      	str	r0, [sp, #12]
 801b83c:	9601      	str	r6, [sp, #4]
 801b83e:	680e      	ldr	r6, [r1, #0]
 801b840:	4638      	mov	r0, r7
 801b842:	4641      	mov	r1, r8
 801b844:	47b0      	blx	r6
 801b846:	4628      	mov	r0, r5
 801b848:	f001 f86a 	bl	801c920 <GUI_SetDrawMode>
 801b84c:	f7fa ff30 	bl	80166b0 <WM__GetNextIVR>
 801b850:	2800      	cmp	r0, #0
 801b852:	d031      	beq.n	801b8b8 <GUI_DrawBitmap+0xe8>
 801b854:	2000      	movs	r0, #0
 801b856:	68e6      	ldr	r6, [r4, #12]
 801b858:	f001 f862 	bl	801c920 <GUI_SetDrawMode>
 801b85c:	4605      	mov	r5, r0
 801b85e:	b116      	cbz	r6, 801b866 <GUI_DrawBitmap+0x96>
 801b860:	7933      	ldrb	r3, [r6, #4]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d1dc      	bne.n	801b820 <GUI_DrawBitmap+0x50>
 801b866:	f025 0002 	bic.w	r0, r5, #2
 801b86a:	f001 f859 	bl	801c920 <GUI_SetDrawMode>
 801b86e:	6921      	ldr	r1, [r4, #16]
 801b870:	2900      	cmp	r1, #0
 801b872:	d1db      	bne.n	801b82c <GUI_DrawBitmap+0x5c>
 801b874:	f8d9 2000 	ldr.w	r2, [r9]
 801b878:	f8da 3000 	ldr.w	r3, [sl]
 801b87c:	7c52      	ldrb	r2, [r2, #17]
 801b87e:	68e0      	ldr	r0, [r4, #12]
 801b880:	4621      	mov	r1, r4
 801b882:	4798      	blx	r3
 801b884:	b1e8      	cbz	r0, 801b8c2 <GUI_DrawBitmap+0xf2>
 801b886:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801b88a:	68a6      	ldr	r6, [r4, #8]
 801b88c:	8822      	ldrh	r2, [r4, #0]
 801b88e:	8863      	ldrh	r3, [r4, #2]
 801b890:	88a1      	ldrh	r1, [r4, #4]
 801b892:	9604      	str	r6, [sp, #16]
 801b894:	2601      	movs	r6, #1
 801b896:	f8cd e008 	str.w	lr, [sp, #8]
 801b89a:	9005      	str	r0, [sp, #20]
 801b89c:	9103      	str	r1, [sp, #12]
 801b89e:	4638      	mov	r0, r7
 801b8a0:	4641      	mov	r1, r8
 801b8a2:	9600      	str	r6, [sp, #0]
 801b8a4:	9601      	str	r6, [sp, #4]
 801b8a6:	f7fe fa5f 	bl	8019d68 <LCD_DrawBitmap>
 801b8aa:	4628      	mov	r0, r5
 801b8ac:	f001 f838 	bl	801c920 <GUI_SetDrawMode>
 801b8b0:	f7fa fefe 	bl	80166b0 <WM__GetNextIVR>
 801b8b4:	2800      	cmp	r0, #0
 801b8b6:	d1cd      	bne.n	801b854 <GUI_DrawBitmap+0x84>
 801b8b8:	f7ff fd36 	bl	801b328 <GUI_Unlock>
 801b8bc:	b009      	add	sp, #36	; 0x24
 801b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8c2:	88e6      	ldrh	r6, [r4, #6]
 801b8c4:	2e01      	cmp	r6, #1
 801b8c6:	bf03      	ittte	eq
 801b8c8:	f8db 3000 	ldreq.w	r3, [fp]
 801b8cc:	46b6      	moveq	lr, r6
 801b8ce:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 801b8d0:	46b6      	movne	lr, r6
 801b8d2:	e7da      	b.n	801b88a <GUI_DrawBitmap+0xba>
 801b8d4:	2000027c 	.word	0x2000027c
 801b8d8:	20000280 	.word	0x20000280

0801b8dc <GUI_DispString>:
 801b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e0:	4604      	mov	r4, r0
 801b8e2:	b083      	sub	sp, #12
 801b8e4:	2800      	cmp	r0, #0
 801b8e6:	d069      	beq.n	801b9bc <GUI_DispString+0xe0>
 801b8e8:	4d44      	ldr	r5, [pc, #272]	; (801b9fc <GUI_DispString+0x120>)
 801b8ea:	f7ff fd27 	bl	801b33c <GUI_Lock>
 801b8ee:	f001 fa49 	bl	801cd84 <GUI_GetFontDistY>
 801b8f2:	682b      	ldr	r3, [r5, #0]
 801b8f4:	4606      	mov	r6, r0
 801b8f6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b8fa:	f001 fa1f 	bl	801cd3c <GUI_GetYAdjust>
 801b8fe:	682a      	ldr	r2, [r5, #0]
 801b900:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b902:	fa1f f980 	uxth.w	r9, r0
 801b906:	ebc9 0303 	rsb	r3, r9, r3
 801b90a:	b29b      	uxth	r3, r3
 801b90c:	8493      	strh	r3, [r2, #36]	; 0x24
 801b90e:	7821      	ldrb	r1, [r4, #0]
 801b910:	2900      	cmp	r1, #0
 801b912:	d04a      	beq.n	801b9aa <GUI_DispString+0xce>
 801b914:	b2b6      	uxth	r6, r6
 801b916:	462f      	mov	r7, r5
 801b918:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801b91c:	4620      	mov	r0, r4
 801b91e:	f001 f94b 	bl	801cbb8 <GUI__GetLineNumChars>
 801b922:	4682      	mov	sl, r0
 801b924:	4651      	mov	r1, sl
 801b926:	4620      	mov	r0, r4
 801b928:	f001 f96c 	bl	801cc04 <GUI__GetLineDistX>
 801b92c:	682b      	ldr	r3, [r5, #0]
 801b92e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801b930:	f002 0203 	and.w	r2, r2, #3
 801b934:	2a01      	cmp	r2, #1
 801b936:	d05e      	beq.n	801b9f6 <GUI_DispString+0x11a>
 801b938:	2a02      	cmp	r2, #2
 801b93a:	d055      	beq.n	801b9e8 <GUI_DispString+0x10c>
 801b93c:	fa1f fb80 	uxth.w	fp, r0
 801b940:	2100      	movs	r1, #0
 801b942:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801b944:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 801b946:	f8ad 0002 	strh.w	r0, [sp, #2]
 801b94a:	1a51      	subs	r1, r2, r1
 801b94c:	b289      	uxth	r1, r1
 801b94e:	b28a      	uxth	r2, r1
 801b950:	3801      	subs	r0, #1
 801b952:	f10b 3eff 	add.w	lr, fp, #4294967295
 801b956:	448e      	add	lr, r1
 801b958:	845a      	strh	r2, [r3, #34]	; 0x22
 801b95a:	4651      	mov	r1, sl
 801b95c:	1833      	adds	r3, r6, r0
 801b95e:	f8ad 2000 	strh.w	r2, [sp]
 801b962:	4620      	mov	r0, r4
 801b964:	466a      	mov	r2, sp
 801b966:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b96a:	f8ad e004 	strh.w	lr, [sp, #4]
 801b96e:	f001 f98d 	bl	801cc8c <GUI__DispLine>
 801b972:	682b      	ldr	r3, [r5, #0]
 801b974:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b978:	849a      	strh	r2, [r3, #36]	; 0x24
 801b97a:	4651      	mov	r1, sl
 801b97c:	4620      	mov	r0, r4
 801b97e:	f7ff fa29 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 801b982:	5c22      	ldrb	r2, [r4, r0]
 801b984:	2a0a      	cmp	r2, #10
 801b986:	eb04 0300 	add.w	r3, r4, r0
 801b98a:	d01a      	beq.n	801b9c2 <GUI_DispString+0xe6>
 801b98c:	2a0d      	cmp	r2, #13
 801b98e:	d018      	beq.n	801b9c2 <GUI_DispString+0xe6>
 801b990:	f8bd 1000 	ldrh.w	r1, [sp]
 801b994:	683a      	ldr	r2, [r7, #0]
 801b996:	448b      	add	fp, r1
 801b998:	f8a2 b022 	strh.w	fp, [r2, #34]	; 0x22
 801b99c:	7819      	ldrb	r1, [r3, #0]
 801b99e:	b119      	cbz	r1, 801b9a8 <GUI_DispString+0xcc>
 801b9a0:	7859      	ldrb	r1, [r3, #1]
 801b9a2:	1c5c      	adds	r4, r3, #1
 801b9a4:	2900      	cmp	r1, #0
 801b9a6:	d1b7      	bne.n	801b918 <GUI_DispString+0x3c>
 801b9a8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b9aa:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 801b9ac:	4499      	add	r9, r3
 801b9ae:	f021 0103 	bic.w	r1, r1, #3
 801b9b2:	f8a2 9024 	strh.w	r9, [r2, #36]	; 0x24
 801b9b6:	8591      	strh	r1, [r2, #44]	; 0x2c
 801b9b8:	f7ff fcb6 	bl	801b328 <GUI_Unlock>
 801b9bc:	b003      	add	sp, #12
 801b9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c2:	682a      	ldr	r2, [r5, #0]
 801b9c4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 801b9c6:	f001 0103 	and.w	r1, r1, #3
 801b9ca:	3901      	subs	r1, #1
 801b9cc:	2901      	cmp	r1, #1
 801b9ce:	bf8a      	itet	hi
 801b9d0:	8c11      	ldrhhi	r1, [r2, #32]
 801b9d2:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 801b9d6:	8451      	strhhi	r1, [r2, #34]	; 0x22
 801b9d8:	7819      	ldrb	r1, [r3, #0]
 801b9da:	290a      	cmp	r1, #10
 801b9dc:	d1df      	bne.n	801b99e <GUI_DispString+0xc2>
 801b9de:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 801b9e0:	4431      	add	r1, r6
 801b9e2:	8491      	strh	r1, [r2, #36]	; 0x24
 801b9e4:	7819      	ldrb	r1, [r3, #0]
 801b9e6:	e7da      	b.n	801b99e <GUI_DispString+0xc2>
 801b9e8:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 801b9ec:	f3c1 014f 	ubfx	r1, r1, #1, #16
 801b9f0:	fa1f fb80 	uxth.w	fp, r0
 801b9f4:	e7a5      	b.n	801b942 <GUI_DispString+0x66>
 801b9f6:	b281      	uxth	r1, r0
 801b9f8:	468b      	mov	fp, r1
 801b9fa:	e7a2      	b.n	801b942 <GUI_DispString+0x66>
 801b9fc:	2000027c 	.word	0x2000027c

0801ba00 <GUI_DispStringAt>:
 801ba00:	b570      	push	{r4, r5, r6, lr}
 801ba02:	460c      	mov	r4, r1
 801ba04:	4616      	mov	r6, r2
 801ba06:	4605      	mov	r5, r0
 801ba08:	f7ff fc98 	bl	801b33c <GUI_Lock>
 801ba0c:	4b05      	ldr	r3, [pc, #20]	; (801ba24 <GUI_DispStringAt+0x24>)
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	4628      	mov	r0, r5
 801ba12:	845c      	strh	r4, [r3, #34]	; 0x22
 801ba14:	849e      	strh	r6, [r3, #36]	; 0x24
 801ba16:	f7ff ff61 	bl	801b8dc <GUI_DispString>
 801ba1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba1e:	f7ff bc83 	b.w	801b328 <GUI_Unlock>
 801ba22:	bf00      	nop
 801ba24:	2000027c 	.word	0x2000027c

0801ba28 <GUI__DispStringInRect>:
 801ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba2c:	b087      	sub	sp, #28
 801ba2e:	460c      	mov	r4, r1
 801ba30:	9001      	str	r0, [sp, #4]
 801ba32:	4690      	mov	r8, r2
 801ba34:	461d      	mov	r5, r3
 801ba36:	f001 f9a5 	bl	801cd84 <GUI_GetFontDistY>
 801ba3a:	9f01      	ldr	r7, [sp, #4]
 801ba3c:	4682      	mov	sl, r0
 801ba3e:	2c00      	cmp	r4, #0
 801ba40:	f000 80a8 	beq.w	801bb94 <GUI__DispStringInRect+0x16c>
 801ba44:	6820      	ldr	r0, [r4, #0]
 801ba46:	6861      	ldr	r1, [r4, #4]
 801ba48:	ab02      	add	r3, sp, #8
 801ba4a:	c303      	stmia	r3!, {r0, r1}
 801ba4c:	f018 030c 	ands.w	r3, r8, #12
 801ba50:	9300      	str	r3, [sp, #0]
 801ba52:	d166      	bne.n	801bb22 <GUI__DispStringInRect+0xfa>
 801ba54:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 801ba58:	9701      	str	r7, [sp, #4]
 801ba5a:	2d00      	cmp	r5, #0
 801ba5c:	d05e      	beq.n	801bb1c <GUI__DispStringInRect+0xf4>
 801ba5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba62:	fa1f fa8a 	uxth.w	sl, sl
 801ba66:	4638      	mov	r0, r7
 801ba68:	f8df b130 	ldr.w	fp, [pc, #304]	; 801bb9c <GUI__DispStringInRect+0x174>
 801ba6c:	f8cd a000 	str.w	sl, [sp]
 801ba70:	f008 0803 	and.w	r8, r8, #3
 801ba74:	2700      	movs	r7, #0
 801ba76:	f10d 0904 	add.w	r9, sp, #4
 801ba7a:	e031      	b.n	801bae0 <GUI__DispStringInRect+0xb8>
 801ba7c:	f1b8 0f02 	cmp.w	r8, #2
 801ba80:	d041      	beq.n	801bb06 <GUI__DispStringInRect+0xde>
 801ba82:	f1b8 0f00 	cmp.w	r8, #0
 801ba86:	d101      	bne.n	801ba8c <GUI__DispStringInRect+0x64>
 801ba88:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 801ba8c:	f8db 1000 	ldr.w	r1, [fp]
 801ba90:	f8dd e000 	ldr.w	lr, [sp]
 801ba94:	9801      	ldr	r0, [sp, #4]
 801ba96:	b2ba      	uxth	r2, r7
 801ba98:	f103 3cff 	add.w	ip, r3, #4294967295
 801ba9c:	b2b3      	uxth	r3, r6
 801ba9e:	44b6      	add	lr, r6
 801baa0:	44bc      	add	ip, r7
 801baa2:	848b      	strh	r3, [r1, #36]	; 0x24
 801baa4:	844a      	strh	r2, [r1, #34]	; 0x22
 801baa6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801baaa:	4621      	mov	r1, r4
 801baac:	aa04      	add	r2, sp, #16
 801baae:	f8ad c014 	strh.w	ip, [sp, #20]
 801bab2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bab6:	f8ad e016 	strh.w	lr, [sp, #22]
 801baba:	f001 f8e7 	bl	801cc8c <GUI__DispLine>
 801babe:	f8dd a004 	ldr.w	sl, [sp, #4]
 801bac2:	4621      	mov	r1, r4
 801bac4:	4650      	mov	r0, sl
 801bac6:	f7ff f985 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 801baca:	4450      	add	r0, sl
 801bacc:	9001      	str	r0, [sp, #4]
 801bace:	f001 f959 	bl	801cd84 <GUI_GetFontDistY>
 801bad2:	4406      	add	r6, r0
 801bad4:	4648      	mov	r0, r9
 801bad6:	f7fe fc39 	bl	801a34c <GUI__HandleEOLine>
 801bada:	b9f8      	cbnz	r0, 801bb1c <GUI__DispStringInRect+0xf4>
 801badc:	b1f5      	cbz	r5, 801bb1c <GUI__DispStringInRect+0xf4>
 801bade:	9801      	ldr	r0, [sp, #4]
 801bae0:	4629      	mov	r1, r5
 801bae2:	f001 f869 	bl	801cbb8 <GUI__GetLineNumChars>
 801bae6:	4604      	mov	r4, r0
 801bae8:	4601      	mov	r1, r0
 801baea:	9801      	ldr	r0, [sp, #4]
 801baec:	f001 f88a 	bl	801cc04 <GUI__GetLineDistX>
 801baf0:	f1b8 0f01 	cmp.w	r8, #1
 801baf4:	ebc4 0505 	rsb	r5, r4, r5
 801baf8:	4603      	mov	r3, r0
 801bafa:	d1bf      	bne.n	801ba7c <GUI__DispStringInRect+0x54>
 801bafc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bb00:	1a3f      	subs	r7, r7, r0
 801bb02:	3701      	adds	r7, #1
 801bb04:	e7c2      	b.n	801ba8c <GUI__DispStringInRect+0x64>
 801bb06:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801bb0a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bb0e:	1abf      	subs	r7, r7, r2
 801bb10:	1a3f      	subs	r7, r7, r0
 801bb12:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801bb16:	eb02 0767 	add.w	r7, r2, r7, asr #1
 801bb1a:	e7b7      	b.n	801ba8c <GUI__DispStringInRect+0x64>
 801bb1c:	b007      	add	sp, #28
 801bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb22:	46ab      	mov	fp, r5
 801bb24:	b1d5      	cbz	r5, 801bb5c <GUI__DispStringInRect+0x134>
 801bb26:	462c      	mov	r4, r5
 801bb28:	f04f 0b00 	mov.w	fp, #0
 801bb2c:	f10d 0904 	add.w	r9, sp, #4
 801bb30:	e000      	b.n	801bb34 <GUI__DispStringInRect+0x10c>
 801bb32:	b19c      	cbz	r4, 801bb5c <GUI__DispStringInRect+0x134>
 801bb34:	4621      	mov	r1, r4
 801bb36:	9801      	ldr	r0, [sp, #4]
 801bb38:	f001 f83e 	bl	801cbb8 <GUI__GetLineNumChars>
 801bb3c:	9e01      	ldr	r6, [sp, #4]
 801bb3e:	4602      	mov	r2, r0
 801bb40:	4601      	mov	r1, r0
 801bb42:	4630      	mov	r0, r6
 801bb44:	1aa4      	subs	r4, r4, r2
 801bb46:	f7ff f945 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 801bb4a:	1833      	adds	r3, r6, r0
 801bb4c:	4648      	mov	r0, r9
 801bb4e:	f10b 0b01 	add.w	fp, fp, #1
 801bb52:	9301      	str	r3, [sp, #4]
 801bb54:	f7fe fbfa 	bl	801a34c <GUI__HandleEOLine>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	d0ea      	beq.n	801bb32 <GUI__DispStringInRect+0x10a>
 801bb5c:	9b00      	ldr	r3, [sp, #0]
 801bb5e:	2b08      	cmp	r3, #8
 801bb60:	d005      	beq.n	801bb6e <GUI__DispStringInRect+0x146>
 801bb62:	2b0c      	cmp	r3, #12
 801bb64:	d009      	beq.n	801bb7a <GUI__DispStringInRect+0x152>
 801bb66:	2b04      	cmp	r3, #4
 801bb68:	d001      	beq.n	801bb6e <GUI__DispStringInRect+0x146>
 801bb6a:	2600      	movs	r6, #0
 801bb6c:	e774      	b.n	801ba58 <GUI__DispStringInRect+0x30>
 801bb6e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801bb72:	fb0a 661b 	mls	r6, sl, fp, r6
 801bb76:	3601      	adds	r6, #1
 801bb78:	e76e      	b.n	801ba58 <GUI__DispStringInRect+0x30>
 801bb7a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801bb7e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801bb82:	1ad2      	subs	r2, r2, r3
 801bb84:	3201      	adds	r2, #1
 801bb86:	fb0a 2b1b 	mls	fp, sl, fp, r2
 801bb8a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 801bb8e:	eb03 066b 	add.w	r6, r3, fp, asr #1
 801bb92:	e761      	b.n	801ba58 <GUI__DispStringInRect+0x30>
 801bb94:	a802      	add	r0, sp, #8
 801bb96:	f000 fd55 	bl	801c644 <GUI_GetClientRect>
 801bb9a:	e757      	b.n	801ba4c <GUI__DispStringInRect+0x24>
 801bb9c:	2000027c 	.word	0x2000027c

0801bba0 <GUI_DispStringInRect>:
 801bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bba2:	4605      	mov	r5, r0
 801bba4:	b083      	sub	sp, #12
 801bba6:	460c      	mov	r4, r1
 801bba8:	4617      	mov	r7, r2
 801bbaa:	b1d8      	cbz	r0, 801bbe4 <GUI_DispStringInRect+0x44>
 801bbac:	f7ff fbc6 	bl	801b33c <GUI_Lock>
 801bbb0:	b1d4      	cbz	r4, 801bbe8 <GUI_DispStringInRect+0x48>
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f7f8 fdfc 	bl	80147b0 <WM_SetUserClipRect>
 801bbb8:	4606      	mov	r6, r0
 801bbba:	b138      	cbz	r0, 801bbcc <GUI_DispStringInRect+0x2c>
 801bbbc:	4668      	mov	r0, sp
 801bbbe:	4621      	mov	r1, r4
 801bbc0:	4632      	mov	r2, r6
 801bbc2:	f7fe fbfb 	bl	801a3bc <GUI__IntersectRects>
 801bbc6:	4668      	mov	r0, sp
 801bbc8:	f7f8 fdf2 	bl	80147b0 <WM_SetUserClipRect>
 801bbcc:	4628      	mov	r0, r5
 801bbce:	4621      	mov	r1, r4
 801bbd0:	463a      	mov	r2, r7
 801bbd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bbd6:	f7ff ff27 	bl	801ba28 <GUI__DispStringInRect>
 801bbda:	4630      	mov	r0, r6
 801bbdc:	f7f8 fde8 	bl	80147b0 <WM_SetUserClipRect>
 801bbe0:	f7ff fba2 	bl	801b328 <GUI_Unlock>
 801bbe4:	b003      	add	sp, #12
 801bbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbe8:	4626      	mov	r6, r4
 801bbea:	e7ef      	b.n	801bbcc <GUI_DispStringInRect+0x2c>

0801bbec <GUI_DispStringInRectWrap>:
 801bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbf0:	b08b      	sub	sp, #44	; 0x2c
 801bbf2:	4604      	mov	r4, r0
 801bbf4:	9100      	str	r1, [sp, #0]
 801bbf6:	4691      	mov	r9, r2
 801bbf8:	461f      	mov	r7, r3
 801bbfa:	2800      	cmp	r0, #0
 801bbfc:	f000 8092 	beq.w	801bd24 <GUI_DispStringInRectWrap+0x138>
 801bc00:	f7ff fb9c 	bl	801b33c <GUI_Lock>
 801bc04:	9b00      	ldr	r3, [sp, #0]
 801bc06:	881b      	ldrh	r3, [r3, #0]
 801bc08:	9302      	str	r3, [sp, #8]
 801bc0a:	9b00      	ldr	r3, [sp, #0]
 801bc0c:	9902      	ldr	r1, [sp, #8]
 801bc0e:	889b      	ldrh	r3, [r3, #4]
 801bc10:	9301      	str	r3, [sp, #4]
 801bc12:	9b00      	ldr	r3, [sp, #0]
 801bc14:	9a01      	ldr	r2, [sp, #4]
 801bc16:	885b      	ldrh	r3, [r3, #2]
 801bc18:	9304      	str	r3, [sp, #16]
 801bc1a:	9b00      	ldr	r3, [sp, #0]
 801bc1c:	88db      	ldrh	r3, [r3, #6]
 801bc1e:	9305      	str	r3, [sp, #20]
 801bc20:	fa0f f882 	sxth.w	r8, r2
 801bc24:	b20b      	sxth	r3, r1
 801bc26:	ebc3 0808 	rsb	r8, r3, r8
 801bc2a:	f001 f8ab 	bl	801cd84 <GUI_GetFontDistY>
 801bc2e:	f019 050c 	ands.w	r5, r9, #12
 801bc32:	f108 0801 	add.w	r8, r8, #1
 801bc36:	4683      	mov	fp, r0
 801bc38:	d177      	bne.n	801bd2a <GUI_DispStringInRectWrap+0x13e>
 801bc3a:	9800      	ldr	r0, [sp, #0]
 801bc3c:	f7f8 fdb8 	bl	80147b0 <WM_SetUserClipRect>
 801bc40:	9003      	str	r0, [sp, #12]
 801bc42:	b1b8      	cbz	r0, 801bc74 <GUI_DispStringInRectWrap+0x88>
 801bc44:	9902      	ldr	r1, [sp, #8]
 801bc46:	2200      	movs	r2, #0
 801bc48:	4613      	mov	r3, r2
 801bc4a:	f361 020f 	bfi	r2, r1, #0, #16
 801bc4e:	9901      	ldr	r1, [sp, #4]
 801bc50:	f361 030f 	bfi	r3, r1, #0, #16
 801bc54:	9904      	ldr	r1, [sp, #16]
 801bc56:	f361 421f 	bfi	r2, r1, #16, #16
 801bc5a:	9905      	ldr	r1, [sp, #20]
 801bc5c:	9208      	str	r2, [sp, #32]
 801bc5e:	f361 431f 	bfi	r3, r1, #16, #16
 801bc62:	a808      	add	r0, sp, #32
 801bc64:	9900      	ldr	r1, [sp, #0]
 801bc66:	9a03      	ldr	r2, [sp, #12]
 801bc68:	9309      	str	r3, [sp, #36]	; 0x24
 801bc6a:	f7fe fba7 	bl	801a3bc <GUI__IntersectRects>
 801bc6e:	a808      	add	r0, sp, #32
 801bc70:	f7f8 fd9e 	bl	80147b0 <WM_SetUserClipRect>
 801bc74:	9b04      	ldr	r3, [sp, #16]
 801bc76:	fa1f fa8b 	uxth.w	sl, fp
 801bc7a:	b29d      	uxth	r5, r3
 801bc7c:	f10a 36ff 	add.w	r6, sl, #4294967295
 801bc80:	f009 0903 	and.w	r9, r9, #3
 801bc84:	463b      	mov	r3, r7
 801bc86:	442e      	add	r6, r5
 801bc88:	464f      	mov	r7, r9
 801bc8a:	b2b6      	uxth	r6, r6
 801bc8c:	4699      	mov	r9, r3
 801bc8e:	e017      	b.n	801bcc0 <GUI_DispStringInRectWrap+0xd4>
 801bc90:	2f02      	cmp	r7, #2
 801bc92:	d032      	beq.n	801bcfa <GUI_DispStringInRectWrap+0x10e>
 801bc94:	b91f      	cbnz	r7, 801bc9e <GUI_DispStringInRectWrap+0xb2>
 801bc96:	9b00      	ldr	r3, [sp, #0]
 801bc98:	881a      	ldrh	r2, [r3, #0]
 801bc9a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bc9e:	4620      	mov	r0, r4
 801bca0:	4659      	mov	r1, fp
 801bca2:	aa06      	add	r2, sp, #24
 801bca4:	f000 fff2 	bl	801cc8c <GUI__DispLine>
 801bca8:	4620      	mov	r0, r4
 801bcaa:	4641      	mov	r1, r8
 801bcac:	464a      	mov	r2, r9
 801bcae:	f005 fa15 	bl	80210dc <GUI__WrapGetNumBytesToNextLine>
 801bcb2:	4404      	add	r4, r0
 801bcb4:	4455      	add	r5, sl
 801bcb6:	7823      	ldrb	r3, [r4, #0]
 801bcb8:	4456      	add	r6, sl
 801bcba:	b2ad      	uxth	r5, r5
 801bcbc:	b2b6      	uxth	r6, r6
 801bcbe:	b363      	cbz	r3, 801bd1a <GUI_DispStringInRectWrap+0x12e>
 801bcc0:	4641      	mov	r1, r8
 801bcc2:	464a      	mov	r2, r9
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f005 f9f1 	bl	80210ac <GUI__WrapGetNumCharsDisp>
 801bcca:	9b02      	ldr	r3, [sp, #8]
 801bccc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bcd0:	4601      	mov	r1, r0
 801bcd2:	9b01      	ldr	r3, [sp, #4]
 801bcd4:	f8ad 501a 	strh.w	r5, [sp, #26]
 801bcd8:	4683      	mov	fp, r0
 801bcda:	4620      	mov	r0, r4
 801bcdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bce0:	f8ad 601e 	strh.w	r6, [sp, #30]
 801bce4:	f000 ff8e 	bl	801cc04 <GUI__GetLineDistX>
 801bce8:	2f01      	cmp	r7, #1
 801bcea:	d1d1      	bne.n	801bc90 <GUI_DispStringInRectWrap+0xa4>
 801bcec:	9900      	ldr	r1, [sp, #0]
 801bcee:	888a      	ldrh	r2, [r1, #4]
 801bcf0:	3201      	adds	r2, #1
 801bcf2:	1a10      	subs	r0, r2, r0
 801bcf4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801bcf8:	e7d1      	b.n	801bc9e <GUI_DispStringInRectWrap+0xb2>
 801bcfa:	9900      	ldr	r1, [sp, #0]
 801bcfc:	880a      	ldrh	r2, [r1, #0]
 801bcfe:	f9b1 e004 	ldrsh.w	lr, [r1, #4]
 801bd02:	b211      	sxth	r1, r2
 801bd04:	ebc1 010e 	rsb	r1, r1, lr
 801bd08:	1a08      	subs	r0, r1, r0
 801bd0a:	3001      	adds	r0, #1
 801bd0c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801bd10:	eb02 0260 	add.w	r2, r2, r0, asr #1
 801bd14:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bd18:	e7c1      	b.n	801bc9e <GUI_DispStringInRectWrap+0xb2>
 801bd1a:	9803      	ldr	r0, [sp, #12]
 801bd1c:	f7f8 fd48 	bl	80147b0 <WM_SetUserClipRect>
 801bd20:	f7ff fb02 	bl	801b328 <GUI_Unlock>
 801bd24:	b00b      	add	sp, #44	; 0x2c
 801bd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd2a:	f7ff fb07 	bl	801b33c <GUI_Lock>
 801bd2e:	46a2      	mov	sl, r4
 801bd30:	2600      	movs	r6, #0
 801bd32:	4650      	mov	r0, sl
 801bd34:	4641      	mov	r1, r8
 801bd36:	463a      	mov	r2, r7
 801bd38:	f005 f9d0 	bl	80210dc <GUI__WrapGetNumBytesToNextLine>
 801bd3c:	b110      	cbz	r0, 801bd44 <GUI_DispStringInRectWrap+0x158>
 801bd3e:	4482      	add	sl, r0
 801bd40:	3601      	adds	r6, #1
 801bd42:	e7f6      	b.n	801bd32 <GUI_DispStringInRectWrap+0x146>
 801bd44:	f7ff faf0 	bl	801b328 <GUI_Unlock>
 801bd48:	2d08      	cmp	r5, #8
 801bd4a:	d004      	beq.n	801bd56 <GUI_DispStringInRectWrap+0x16a>
 801bd4c:	2d0c      	cmp	r5, #12
 801bd4e:	d009      	beq.n	801bd64 <GUI_DispStringInRectWrap+0x178>
 801bd50:	2d04      	cmp	r5, #4
 801bd52:	f47f af72 	bne.w	801bc3a <GUI_DispStringInRectWrap+0x4e>
 801bd56:	9905      	ldr	r1, [sp, #20]
 801bd58:	1c4b      	adds	r3, r1, #1
 801bd5a:	fb06 361b 	mls	r6, r6, fp, r3
 801bd5e:	b2b6      	uxth	r6, r6
 801bd60:	9604      	str	r6, [sp, #16]
 801bd62:	e76a      	b.n	801bc3a <GUI_DispStringInRectWrap+0x4e>
 801bd64:	9904      	ldr	r1, [sp, #16]
 801bd66:	9a05      	ldr	r2, [sp, #20]
 801bd68:	b213      	sxth	r3, r2
 801bd6a:	b20a      	sxth	r2, r1
 801bd6c:	1a9b      	subs	r3, r3, r2
 801bd6e:	3301      	adds	r3, #1
 801bd70:	fb06 361b 	mls	r6, r6, fp, r3
 801bd74:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801bd78:	eb01 0566 	add.w	r5, r1, r6, asr #1
 801bd7c:	b2ad      	uxth	r5, r5
 801bd7e:	9504      	str	r5, [sp, #16]
 801bd80:	e75b      	b.n	801bc3a <GUI_DispStringInRectWrap+0x4e>
 801bd82:	bf00      	nop

0801bd84 <GUI_GetStringDistX>:
 801bd84:	b510      	push	{r4, lr}
 801bd86:	4604      	mov	r4, r0
 801bd88:	f7ff f852 	bl	801ae30 <GUI__GetNumChars>
 801bd8c:	4601      	mov	r1, r0
 801bd8e:	4620      	mov	r0, r4
 801bd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd94:	f000 bf36 	b.w	801cc04 <GUI__GetLineDistX>

0801bd98 <GUI_DEVICE__GetpDriver>:
 801bd98:	2801      	cmp	r0, #1
 801bd9a:	dc0e      	bgt.n	801bdba <GUI_DEVICE__GetpDriver+0x22>
 801bd9c:	4b08      	ldr	r3, [pc, #32]	; (801bdc0 <GUI_DEVICE__GetpDriver+0x28>)
 801bd9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bda2:	b158      	cbz	r0, 801bdbc <GUI_DEVICE__GetpDriver+0x24>
 801bda4:	68c3      	ldr	r3, [r0, #12]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	b91b      	cbnz	r3, 801bdb2 <GUI_DEVICE__GetpDriver+0x1a>
 801bdaa:	e008      	b.n	801bdbe <GUI_DEVICE__GetpDriver+0x26>
 801bdac:	68c3      	ldr	r3, [r0, #12]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	b123      	cbz	r3, 801bdbc <GUI_DEVICE__GetpDriver+0x24>
 801bdb2:	6800      	ldr	r0, [r0, #0]
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	d1f9      	bne.n	801bdac <GUI_DEVICE__GetpDriver+0x14>
 801bdb8:	4770      	bx	lr
 801bdba:	2000      	movs	r0, #0
 801bdbc:	4770      	bx	lr
 801bdbe:	4770      	bx	lr
 801bdc0:	2002cbcc 	.word	0x2002cbcc

0801bdc4 <GUI_DEVICE_Delete>:
 801bdc4:	f001 bcf0 	b.w	801d7a8 <GUI_ALLOC_FreeFixedBlock>

0801bdc8 <GUI_DEVICE_Create>:
 801bdc8:	2b01      	cmp	r3, #1
 801bdca:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
 801bdce:	461d      	mov	r5, r3
 801bdd0:	4607      	mov	r7, r0
 801bdd2:	460e      	mov	r6, r1
 801bdd4:	4690      	mov	r8, r2
 801bdd6:	dc0f      	bgt.n	801bdf8 <GUI_DEVICE_Create+0x30>
 801bdd8:	201c      	movs	r0, #28
 801bdda:	f001 fcef 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801bdde:	b158      	cbz	r0, 801bdf8 <GUI_DEVICE_Create+0x30>
 801bde0:	b16e      	cbz	r6, 801bdfe <GUI_DEVICE_Create+0x36>
 801bde2:	6106      	str	r6, [r0, #16]
 801bde4:	2300      	movs	r3, #0
 801bde6:	6083      	str	r3, [r0, #8]
 801bde8:	6185      	str	r5, [r0, #24]
 801bdea:	f8a0 8014 	strh.w	r8, [r0, #20]
 801bdee:	60c7      	str	r7, [r0, #12]
 801bdf0:	6003      	str	r3, [r0, #0]
 801bdf2:	6043      	str	r3, [r0, #4]
 801bdf4:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 801bdf8:	2000      	movs	r0, #0
 801bdfa:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 801bdfe:	4b06      	ldr	r3, [pc, #24]	; (801be18 <GUI_DEVICE_Create+0x50>)
 801be00:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801be04:	b909      	cbnz	r1, 801be0a <GUI_DEVICE_Create+0x42>
 801be06:	e7ed      	b.n	801bde4 <GUI_DEVICE_Create+0x1c>
 801be08:	4619      	mov	r1, r3
 801be0a:	680b      	ldr	r3, [r1, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d1fb      	bne.n	801be08 <GUI_DEVICE_Create+0x40>
 801be10:	690b      	ldr	r3, [r1, #16]
 801be12:	6103      	str	r3, [r0, #16]
 801be14:	e7e6      	b.n	801bde4 <GUI_DEVICE_Create+0x1c>
 801be16:	bf00      	nop
 801be18:	2002cbcc 	.word	0x2002cbcc

0801be1c <GUI_DEVICE_Unlink>:
 801be1c:	4a0b      	ldr	r2, [pc, #44]	; (801be4c <GUI_DEVICE_Unlink+0x30>)
 801be1e:	6981      	ldr	r1, [r0, #24]
 801be20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801be24:	4298      	cmp	r0, r3
 801be26:	6803      	ldr	r3, [r0, #0]
 801be28:	d009      	beq.n	801be3e <GUI_DEVICE_Unlink+0x22>
 801be2a:	6842      	ldr	r2, [r0, #4]
 801be2c:	b10a      	cbz	r2, 801be32 <GUI_DEVICE_Unlink+0x16>
 801be2e:	6013      	str	r3, [r2, #0]
 801be30:	6803      	ldr	r3, [r0, #0]
 801be32:	b103      	cbz	r3, 801be36 <GUI_DEVICE_Unlink+0x1a>
 801be34:	605a      	str	r2, [r3, #4]
 801be36:	2300      	movs	r3, #0
 801be38:	6003      	str	r3, [r0, #0]
 801be3a:	6043      	str	r3, [r0, #4]
 801be3c:	4770      	bx	lr
 801be3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d0f1      	beq.n	801be2a <GUI_DEVICE_Unlink+0xe>
 801be46:	2200      	movs	r2, #0
 801be48:	605a      	str	r2, [r3, #4]
 801be4a:	e7ee      	b.n	801be2a <GUI_DEVICE_Unlink+0xe>
 801be4c:	2002cbcc 	.word	0x2002cbcc

0801be50 <GUI_DEVICE_Link>:
 801be50:	b430      	push	{r4, r5}
 801be52:	4601      	mov	r1, r0
 801be54:	b110      	cbz	r0, 801be5c <GUI_DEVICE_Link+0xc>
 801be56:	6984      	ldr	r4, [r0, #24]
 801be58:	2c01      	cmp	r4, #1
 801be5a:	dd02      	ble.n	801be62 <GUI_DEVICE_Link+0x12>
 801be5c:	2001      	movs	r0, #1
 801be5e:	bc30      	pop	{r4, r5}
 801be60:	4770      	bx	lr
 801be62:	4b1e      	ldr	r3, [pc, #120]	; (801bedc <GUI_DEVICE_Link+0x8c>)
 801be64:	4d1e      	ldr	r5, [pc, #120]	; (801bee0 <GUI_DEVICE_Link+0x90>)
 801be66:	781a      	ldrb	r2, [r3, #0]
 801be68:	4294      	cmp	r4, r2
 801be6a:	bfa4      	itt	ge
 801be6c:	1c62      	addge	r2, r4, #1
 801be6e:	701a      	strbge	r2, [r3, #0]
 801be70:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801be74:	b90b      	cbnz	r3, 801be7a <GUI_DEVICE_Link+0x2a>
 801be76:	e02c      	b.n	801bed2 <GUI_DEVICE_Link+0x82>
 801be78:	4613      	mov	r3, r2
 801be7a:	685a      	ldr	r2, [r3, #4]
 801be7c:	2a00      	cmp	r2, #0
 801be7e:	d1fb      	bne.n	801be78 <GUI_DEVICE_Link+0x28>
 801be80:	68ca      	ldr	r2, [r1, #12]
 801be82:	6810      	ldr	r0, [r2, #0]
 801be84:	e002      	b.n	801be8c <GUI_DEVICE_Link+0x3c>
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d0e7      	beq.n	801be5c <GUI_DEVICE_Link+0xc>
 801be8c:	68da      	ldr	r2, [r3, #12]
 801be8e:	6812      	ldr	r2, [r2, #0]
 801be90:	4282      	cmp	r2, r0
 801be92:	dcf8      	bgt.n	801be86 <GUI_DEVICE_Link+0x36>
 801be94:	4290      	cmp	r0, r2
 801be96:	d00c      	beq.n	801beb2 <GUI_DEVICE_Link+0x62>
 801be98:	685a      	ldr	r2, [r3, #4]
 801be9a:	b1ba      	cbz	r2, 801becc <GUI_DEVICE_Link+0x7c>
 801be9c:	6011      	str	r1, [r2, #0]
 801be9e:	604a      	str	r2, [r1, #4]
 801bea0:	428b      	cmp	r3, r1
 801bea2:	bf14      	ite	ne
 801bea4:	461a      	movne	r2, r3
 801bea6:	2200      	moveq	r2, #0
 801bea8:	6059      	str	r1, [r3, #4]
 801beaa:	2000      	movs	r0, #0
 801beac:	600a      	str	r2, [r1, #0]
 801beae:	bc30      	pop	{r4, r5}
 801beb0:	4770      	bx	lr
 801beb2:	8a8a      	ldrh	r2, [r1, #20]
 801beb4:	2a01      	cmp	r2, #1
 801beb6:	d1ef      	bne.n	801be98 <GUI_DEVICE_Link+0x48>
 801beb8:	e004      	b.n	801bec4 <GUI_DEVICE_Link+0x74>
 801beba:	68d3      	ldr	r3, [r2, #12]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	4283      	cmp	r3, r0
 801bec0:	4613      	mov	r3, r2
 801bec2:	dbe9      	blt.n	801be98 <GUI_DEVICE_Link+0x48>
 801bec4:	681a      	ldr	r2, [r3, #0]
 801bec6:	2a00      	cmp	r2, #0
 801bec8:	d1f7      	bne.n	801beba <GUI_DEVICE_Link+0x6a>
 801beca:	e7e5      	b.n	801be98 <GUI_DEVICE_Link+0x48>
 801becc:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
 801bed0:	e7e6      	b.n	801bea0 <GUI_DEVICE_Link+0x50>
 801bed2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 801bed6:	4618      	mov	r0, r3
 801bed8:	e7c1      	b.n	801be5e <GUI_DEVICE_Link+0xe>
 801beda:	bf00      	nop
 801bedc:	2002cb7a 	.word	0x2002cb7a
 801bee0:	2002cbcc 	.word	0x2002cbcc

0801bee4 <GUI_DEVICE_CreateAndLink>:
 801bee4:	2b01      	cmp	r3, #1
 801bee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801beea:	461e      	mov	r6, r3
 801beec:	4607      	mov	r7, r0
 801beee:	460c      	mov	r4, r1
 801bef0:	4690      	mov	r8, r2
 801bef2:	dc32      	bgt.n	801bf5a <GUI_DEVICE_CreateAndLink+0x76>
 801bef4:	201c      	movs	r0, #28
 801bef6:	f001 fc61 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 801befa:	4605      	mov	r5, r0
 801befc:	2800      	cmp	r0, #0
 801befe:	d02c      	beq.n	801bf5a <GUI_DEVICE_CreateAndLink+0x76>
 801bf00:	2c00      	cmp	r4, #0
 801bf02:	d030      	beq.n	801bf66 <GUI_DEVICE_CreateAndLink+0x82>
 801bf04:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 801bfc4 <GUI_DEVICE_CreateAndLink+0xe0>
 801bf08:	6104      	str	r4, [r0, #16]
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	4a2c      	ldr	r2, [pc, #176]	; (801bfc0 <GUI_DEVICE_CreateAndLink+0xdc>)
 801bf0e:	602b      	str	r3, [r5, #0]
 801bf10:	7811      	ldrb	r1, [r2, #0]
 801bf12:	606b      	str	r3, [r5, #4]
 801bf14:	428e      	cmp	r6, r1
 801bf16:	f85c 1026 	ldr.w	r1, [ip, r6, lsl #2]
 801bf1a:	60ab      	str	r3, [r5, #8]
 801bf1c:	bfa4      	itt	ge
 801bf1e:	1c73      	addge	r3, r6, #1
 801bf20:	7013      	strbge	r3, [r2, #0]
 801bf22:	61ae      	str	r6, [r5, #24]
 801bf24:	f8a5 8014 	strh.w	r8, [r5, #20]
 801bf28:	60ef      	str	r7, [r5, #12]
 801bf2a:	4b26      	ldr	r3, [pc, #152]	; (801bfc4 <GUI_DEVICE_CreateAndLink+0xe0>)
 801bf2c:	b909      	cbnz	r1, 801bf32 <GUI_DEVICE_CreateAndLink+0x4e>
 801bf2e:	e043      	b.n	801bfb8 <GUI_DEVICE_CreateAndLink+0xd4>
 801bf30:	4621      	mov	r1, r4
 801bf32:	684c      	ldr	r4, [r1, #4]
 801bf34:	2c00      	cmp	r4, #0
 801bf36:	d1fb      	bne.n	801bf30 <GUI_DEVICE_CreateAndLink+0x4c>
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	68c8      	ldr	r0, [r1, #12]
 801bf3c:	6800      	ldr	r0, [r0, #0]
 801bf3e:	4298      	cmp	r0, r3
 801bf40:	dd1e      	ble.n	801bf80 <GUI_DEVICE_CreateAndLink+0x9c>
 801bf42:	6809      	ldr	r1, [r1, #0]
 801bf44:	2900      	cmp	r1, #0
 801bf46:	d1f8      	bne.n	801bf3a <GUI_DEVICE_CreateAndLink+0x56>
 801bf48:	b953      	cbnz	r3, 801bf60 <GUI_DEVICE_CreateAndLink+0x7c>
 801bf4a:	4b1f      	ldr	r3, [pc, #124]	; (801bfc8 <GUI_DEVICE_CreateAndLink+0xe4>)
 801bf4c:	3616      	adds	r6, #22
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	4628      	mov	r0, r5
 801bf52:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 801bf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf5a:	2000      	movs	r0, #0
 801bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf60:	4628      	mov	r0, r5
 801bf62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf66:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801bfc4 <GUI_DEVICE_CreateAndLink+0xe0>
 801bf6a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 801bf6e:	b90a      	cbnz	r2, 801bf74 <GUI_DEVICE_CreateAndLink+0x90>
 801bf70:	e7cb      	b.n	801bf0a <GUI_DEVICE_CreateAndLink+0x26>
 801bf72:	461a      	mov	r2, r3
 801bf74:	6813      	ldr	r3, [r2, #0]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d1fb      	bne.n	801bf72 <GUI_DEVICE_CreateAndLink+0x8e>
 801bf7a:	6913      	ldr	r3, [r2, #16]
 801bf7c:	612b      	str	r3, [r5, #16]
 801bf7e:	e7c4      	b.n	801bf0a <GUI_DEVICE_CreateAndLink+0x26>
 801bf80:	d00a      	beq.n	801bf98 <GUI_DEVICE_CreateAndLink+0xb4>
 801bf82:	684a      	ldr	r2, [r1, #4]
 801bf84:	b1aa      	cbz	r2, 801bfb2 <GUI_DEVICE_CreateAndLink+0xce>
 801bf86:	6015      	str	r5, [r2, #0]
 801bf88:	606a      	str	r2, [r5, #4]
 801bf8a:	428d      	cmp	r5, r1
 801bf8c:	bf14      	ite	ne
 801bf8e:	460a      	movne	r2, r1
 801bf90:	2200      	moveq	r2, #0
 801bf92:	604d      	str	r5, [r1, #4]
 801bf94:	602a      	str	r2, [r5, #0]
 801bf96:	e7d7      	b.n	801bf48 <GUI_DEVICE_CreateAndLink+0x64>
 801bf98:	f1b8 0f01 	cmp.w	r8, #1
 801bf9c:	d1f1      	bne.n	801bf82 <GUI_DEVICE_CreateAndLink+0x9e>
 801bf9e:	e004      	b.n	801bfaa <GUI_DEVICE_CreateAndLink+0xc6>
 801bfa0:	68d1      	ldr	r1, [r2, #12]
 801bfa2:	6809      	ldr	r1, [r1, #0]
 801bfa4:	4281      	cmp	r1, r0
 801bfa6:	4611      	mov	r1, r2
 801bfa8:	dbeb      	blt.n	801bf82 <GUI_DEVICE_CreateAndLink+0x9e>
 801bfaa:	680a      	ldr	r2, [r1, #0]
 801bfac:	2a00      	cmp	r2, #0
 801bfae:	d1f7      	bne.n	801bfa0 <GUI_DEVICE_CreateAndLink+0xbc>
 801bfb0:	e7e7      	b.n	801bf82 <GUI_DEVICE_CreateAndLink+0x9e>
 801bfb2:	f84c 5026 	str.w	r5, [ip, r6, lsl #2]
 801bfb6:	e7e8      	b.n	801bf8a <GUI_DEVICE_CreateAndLink+0xa6>
 801bfb8:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 801bfbc:	683b      	ldr	r3, [r7, #0]
 801bfbe:	e7c3      	b.n	801bf48 <GUI_DEVICE_CreateAndLink+0x64>
 801bfc0:	2002cb7a 	.word	0x2002cb7a
 801bfc4:	2002cbcc 	.word	0x2002cbcc
 801bfc8:	2000027c 	.word	0x2000027c

0801bfcc <GUI_DEVICE_UnlinkTaskDevices>:
 801bfcc:	2000      	movs	r0, #0
 801bfce:	4770      	bx	lr

0801bfd0 <GUI_DEVICE_LinkDevices>:
 801bfd0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	d037      	beq.n	801c048 <GUI_DEVICE_LinkDevices+0x78>
 801bfd8:	6984      	ldr	r4, [r0, #24]
 801bfda:	4f27      	ldr	r7, [pc, #156]	; (801c078 <GUI_DEVICE_LinkDevices+0xa8>)
 801bfdc:	4e27      	ldr	r6, [pc, #156]	; (801c07c <GUI_DEVICE_LinkDevices+0xac>)
 801bfde:	783d      	ldrb	r5, [r7, #0]
 801bfe0:	6801      	ldr	r1, [r0, #0]
 801bfe2:	2c01      	cmp	r4, #1
 801bfe4:	46b4      	mov	ip, r6
 801bfe6:	dd06      	ble.n	801bff6 <GUI_DEVICE_LinkDevices+0x26>
 801bfe8:	2900      	cmp	r1, #0
 801bfea:	d02c      	beq.n	801c046 <GUI_DEVICE_LinkDevices+0x76>
 801bfec:	4608      	mov	r0, r1
 801bfee:	6984      	ldr	r4, [r0, #24]
 801bff0:	6801      	ldr	r1, [r0, #0]
 801bff2:	2c01      	cmp	r4, #1
 801bff4:	dcf8      	bgt.n	801bfe8 <GUI_DEVICE_LinkDevices+0x18>
 801bff6:	42ac      	cmp	r4, r5
 801bff8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801bffc:	bfa4      	itt	ge
 801bffe:	1c65      	addge	r5, r4, #1
 801c000:	b2ed      	uxtbge	r5, r5
 801c002:	b90b      	cbnz	r3, 801c008 <GUI_DEVICE_LinkDevices+0x38>
 801c004:	e035      	b.n	801c072 <GUI_DEVICE_LinkDevices+0xa2>
 801c006:	4613      	mov	r3, r2
 801c008:	685a      	ldr	r2, [r3, #4]
 801c00a:	2a00      	cmp	r2, #0
 801c00c:	d1fb      	bne.n	801c006 <GUI_DEVICE_LinkDevices+0x36>
 801c00e:	68c2      	ldr	r2, [r0, #12]
 801c010:	f8d2 8000 	ldr.w	r8, [r2]
 801c014:	68da      	ldr	r2, [r3, #12]
 801c016:	6812      	ldr	r2, [r2, #0]
 801c018:	4542      	cmp	r2, r8
 801c01a:	dd06      	ble.n	801c02a <GUI_DEVICE_LinkDevices+0x5a>
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d0e2      	beq.n	801bfe8 <GUI_DEVICE_LinkDevices+0x18>
 801c022:	68da      	ldr	r2, [r3, #12]
 801c024:	6812      	ldr	r2, [r2, #0]
 801c026:	4542      	cmp	r2, r8
 801c028:	dcf8      	bgt.n	801c01c <GUI_DEVICE_LinkDevices+0x4c>
 801c02a:	4590      	cmp	r8, r2
 801c02c:	d00f      	beq.n	801c04e <GUI_DEVICE_LinkDevices+0x7e>
 801c02e:	685a      	ldr	r2, [r3, #4]
 801c030:	b19a      	cbz	r2, 801c05a <GUI_DEVICE_LinkDevices+0x8a>
 801c032:	6010      	str	r0, [r2, #0]
 801c034:	6042      	str	r2, [r0, #4]
 801c036:	4298      	cmp	r0, r3
 801c038:	bf14      	ite	ne
 801c03a:	461a      	movne	r2, r3
 801c03c:	2200      	moveq	r2, #0
 801c03e:	6058      	str	r0, [r3, #4]
 801c040:	6002      	str	r2, [r0, #0]
 801c042:	2900      	cmp	r1, #0
 801c044:	d1d2      	bne.n	801bfec <GUI_DEVICE_LinkDevices+0x1c>
 801c046:	703d      	strb	r5, [r7, #0]
 801c048:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801c04c:	4770      	bx	lr
 801c04e:	8a82      	ldrh	r2, [r0, #20]
 801c050:	2a01      	cmp	r2, #1
 801c052:	d00a      	beq.n	801c06a <GUI_DEVICE_LinkDevices+0x9a>
 801c054:	685a      	ldr	r2, [r3, #4]
 801c056:	2a00      	cmp	r2, #0
 801c058:	d1eb      	bne.n	801c032 <GUI_DEVICE_LinkDevices+0x62>
 801c05a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 801c05e:	e7ea      	b.n	801c036 <GUI_DEVICE_LinkDevices+0x66>
 801c060:	68d3      	ldr	r3, [r2, #12]
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	4543      	cmp	r3, r8
 801c066:	4613      	mov	r3, r2
 801c068:	dbe1      	blt.n	801c02e <GUI_DEVICE_LinkDevices+0x5e>
 801c06a:	681a      	ldr	r2, [r3, #0]
 801c06c:	2a00      	cmp	r2, #0
 801c06e:	d1f7      	bne.n	801c060 <GUI_DEVICE_LinkDevices+0x90>
 801c070:	e7dd      	b.n	801c02e <GUI_DEVICE_LinkDevices+0x5e>
 801c072:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801c076:	e7b7      	b.n	801bfe8 <GUI_DEVICE_LinkDevices+0x18>
 801c078:	2002cb7a 	.word	0x2002cb7a
 801c07c:	2002cbcc 	.word	0x2002cbcc

0801c080 <_OnExit>:
 801c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c082:	4e0b      	ldr	r6, [pc, #44]	; (801c0b0 <_OnExit+0x30>)
 801c084:	4d0b      	ldr	r5, [pc, #44]	; (801c0b4 <_OnExit+0x34>)
 801c086:	4f0c      	ldr	r7, [pc, #48]	; (801c0b8 <_OnExit+0x38>)
 801c088:	6833      	ldr	r3, [r6, #0]
 801c08a:	2400      	movs	r4, #0
 801c08c:	4621      	mov	r1, r4
 801c08e:	2270      	movs	r2, #112	; 0x70
 801c090:	4628      	mov	r0, r5
 801c092:	603c      	str	r4, [r7, #0]
 801c094:	4798      	blx	r3
 801c096:	6833      	ldr	r3, [r6, #0]
 801c098:	4808      	ldr	r0, [pc, #32]	; (801c0bc <_OnExit+0x3c>)
 801c09a:	4621      	mov	r1, r4
 801c09c:	2208      	movs	r2, #8
 801c09e:	4798      	blx	r3
 801c0a0:	4a07      	ldr	r2, [pc, #28]	; (801c0c0 <_OnExit+0x40>)
 801c0a2:	4908      	ldr	r1, [pc, #32]	; (801c0c4 <_OnExit+0x44>)
 801c0a4:	4b08      	ldr	r3, [pc, #32]	; (801c0c8 <_OnExit+0x48>)
 801c0a6:	7014      	strb	r4, [r2, #0]
 801c0a8:	600d      	str	r5, [r1, #0]
 801c0aa:	601c      	str	r4, [r3, #0]
 801c0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0ae:	bf00      	nop
 801c0b0:	20000250 	.word	0x20000250
 801c0b4:	2002b26c 	.word	0x2002b26c
 801c0b8:	2002b2dc 	.word	0x2002b2dc
 801c0bc:	2002cbcc 	.word	0x2002cbcc
 801c0c0:	2002cbb4 	.word	0x2002cbb4
 801c0c4:	2000027c 	.word	0x2000027c
 801c0c8:	2002cb8c 	.word	0x2002cb8c

0801c0cc <GUI_ClearRect>:
 801c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0d0:	b082      	sub	sp, #8
 801c0d2:	469a      	mov	sl, r3
 801c0d4:	4607      	mov	r7, r0
 801c0d6:	460d      	mov	r5, r1
 801c0d8:	4691      	mov	r9, r2
 801c0da:	f7ff f92f 	bl	801b33c <GUI_Lock>
 801c0de:	2004      	movs	r0, #4
 801c0e0:	f7fd fc6c 	bl	80199bc <LCD_SetDrawMode>
 801c0e4:	4b13      	ldr	r3, [pc, #76]	; (801c134 <GUI_ClearRect+0x68>)
 801c0e6:	681c      	ldr	r4, [r3, #0]
 801c0e8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 801c0ea:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801c0ec:	4437      	add	r7, r6
 801c0ee:	4425      	add	r5, r4
 801c0f0:	4680      	mov	r8, r0
 801c0f2:	444e      	add	r6, r9
 801c0f4:	4454      	add	r4, sl
 801c0f6:	4668      	mov	r0, sp
 801c0f8:	f8ad 7000 	strh.w	r7, [sp]
 801c0fc:	f8ad 6004 	strh.w	r6, [sp, #4]
 801c100:	f8ad 5002 	strh.w	r5, [sp, #2]
 801c104:	f8ad 4006 	strh.w	r4, [sp, #6]
 801c108:	f7fa fbf8 	bl	80168fc <WM__InitIVRSearch>
 801c10c:	b148      	cbz	r0, 801c122 <GUI_ClearRect+0x56>
 801c10e:	4638      	mov	r0, r7
 801c110:	4629      	mov	r1, r5
 801c112:	4632      	mov	r2, r6
 801c114:	4623      	mov	r3, r4
 801c116:	f7fd fcd9 	bl	8019acc <LCD_FillRect>
 801c11a:	f7fa fac9 	bl	80166b0 <WM__GetNextIVR>
 801c11e:	2800      	cmp	r0, #0
 801c120:	d1f5      	bne.n	801c10e <GUI_ClearRect+0x42>
 801c122:	4640      	mov	r0, r8
 801c124:	f7fd fc4a 	bl	80199bc <LCD_SetDrawMode>
 801c128:	f7ff f8fe 	bl	801b328 <GUI_Unlock>
 801c12c:	b002      	add	sp, #8
 801c12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c132:	bf00      	nop
 801c134:	2000027c 	.word	0x2000027c

0801c138 <GUI_ClearRectEx>:
 801c138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c13c:	b082      	sub	sp, #8
 801c13e:	f9b0 7000 	ldrsh.w	r7, [r0]
 801c142:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801c146:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801c14a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801c14e:	f7ff f8f5 	bl	801b33c <GUI_Lock>
 801c152:	2004      	movs	r0, #4
 801c154:	f7fd fc32 	bl	80199bc <LCD_SetDrawMode>
 801c158:	4b13      	ldr	r3, [pc, #76]	; (801c1a8 <GUI_ClearRectEx+0x70>)
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c160:	4680      	mov	r8, r0
 801c162:	4417      	add	r7, r2
 801c164:	4416      	add	r6, r2
 801c166:	441d      	add	r5, r3
 801c168:	441c      	add	r4, r3
 801c16a:	4668      	mov	r0, sp
 801c16c:	f8ad 7000 	strh.w	r7, [sp]
 801c170:	f8ad 6004 	strh.w	r6, [sp, #4]
 801c174:	f8ad 5002 	strh.w	r5, [sp, #2]
 801c178:	f8ad 4006 	strh.w	r4, [sp, #6]
 801c17c:	f7fa fbbe 	bl	80168fc <WM__InitIVRSearch>
 801c180:	b148      	cbz	r0, 801c196 <GUI_ClearRectEx+0x5e>
 801c182:	4638      	mov	r0, r7
 801c184:	4629      	mov	r1, r5
 801c186:	4632      	mov	r2, r6
 801c188:	4623      	mov	r3, r4
 801c18a:	f7fd fc9f 	bl	8019acc <LCD_FillRect>
 801c18e:	f7fa fa8f 	bl	80166b0 <WM__GetNextIVR>
 801c192:	2800      	cmp	r0, #0
 801c194:	d1f5      	bne.n	801c182 <GUI_ClearRectEx+0x4a>
 801c196:	4640      	mov	r0, r8
 801c198:	f7fd fc10 	bl	80199bc <LCD_SetDrawMode>
 801c19c:	f7ff f8c4 	bl	801b328 <GUI_Unlock>
 801c1a0:	b002      	add	sp, #8
 801c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1a6:	bf00      	nop
 801c1a8:	2000027c 	.word	0x2000027c

0801c1ac <GUI_Clear>:
 801c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1b0:	2000      	movs	r0, #0
 801c1b2:	b082      	sub	sp, #8
 801c1b4:	4601      	mov	r1, r0
 801c1b6:	f000 fb01 	bl	801c7bc <GUI_GotoXY>
 801c1ba:	f7ff f8bf 	bl	801b33c <GUI_Lock>
 801c1be:	2004      	movs	r0, #4
 801c1c0:	f7fd fbfc 	bl	80199bc <LCD_SetDrawMode>
 801c1c4:	4b17      	ldr	r3, [pc, #92]	; (801c224 <GUI_Clear+0x78>)
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801c1ca:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801c1cc:	f5a6 577f 	sub.w	r7, r6, #16320	; 0x3fc0
 801c1d0:	f5a4 557f 	sub.w	r5, r4, #16320	; 0x3fc0
 801c1d4:	f506 567f 	add.w	r6, r6, #16320	; 0x3fc0
 801c1d8:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 801c1dc:	4680      	mov	r8, r0
 801c1de:	3f3f      	subs	r7, #63	; 0x3f
 801c1e0:	363f      	adds	r6, #63	; 0x3f
 801c1e2:	3d3f      	subs	r5, #63	; 0x3f
 801c1e4:	343f      	adds	r4, #63	; 0x3f
 801c1e6:	4668      	mov	r0, sp
 801c1e8:	f8ad 7000 	strh.w	r7, [sp]
 801c1ec:	f8ad 6004 	strh.w	r6, [sp, #4]
 801c1f0:	f8ad 5002 	strh.w	r5, [sp, #2]
 801c1f4:	f8ad 4006 	strh.w	r4, [sp, #6]
 801c1f8:	f7fa fb80 	bl	80168fc <WM__InitIVRSearch>
 801c1fc:	b148      	cbz	r0, 801c212 <GUI_Clear+0x66>
 801c1fe:	4638      	mov	r0, r7
 801c200:	4629      	mov	r1, r5
 801c202:	4632      	mov	r2, r6
 801c204:	4623      	mov	r3, r4
 801c206:	f7fd fc61 	bl	8019acc <LCD_FillRect>
 801c20a:	f7fa fa51 	bl	80166b0 <WM__GetNextIVR>
 801c20e:	2800      	cmp	r0, #0
 801c210:	d1f5      	bne.n	801c1fe <GUI_Clear+0x52>
 801c212:	4640      	mov	r0, r8
 801c214:	f7fd fbd2 	bl	80199bc <LCD_SetDrawMode>
 801c218:	f7ff f886 	bl	801b328 <GUI_Unlock>
 801c21c:	b002      	add	sp, #8
 801c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c222:	bf00      	nop
 801c224:	2000027c 	.word	0x2000027c

0801c228 <GUI__RegisterExit>:
 801c228:	b480      	push	{r7}
 801c22a:	b083      	sub	sp, #12
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
 801c230:	4b05      	ldr	r3, [pc, #20]	; (801c248 <GUI__RegisterExit+0x20>)
 801c232:	681a      	ldr	r2, [r3, #0]
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	605a      	str	r2, [r3, #4]
 801c238:	4b03      	ldr	r3, [pc, #12]	; (801c248 <GUI__RegisterExit+0x20>)
 801c23a:	687a      	ldr	r2, [r7, #4]
 801c23c:	601a      	str	r2, [r3, #0]
 801c23e:	370c      	adds	r7, #12
 801c240:	46bd      	mov	sp, r7
 801c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c246:	4770      	bx	lr
 801c248:	2002b260 	.word	0x2002b260

0801c24c <GUI_Init>:
 801c24c:	b590      	push	{r4, r7, lr}
 801c24e:	b083      	sub	sp, #12
 801c250:	af00      	add	r7, sp, #0
 801c252:	4b71      	ldr	r3, [pc, #452]	; (801c418 <GUI_Init+0x1cc>)
 801c254:	4a70      	ldr	r2, [pc, #448]	; (801c418 <GUI_Init+0x1cc>)
 801c256:	6812      	ldr	r2, [r2, #0]
 801c258:	f022 0201 	bic.w	r2, r2, #1
 801c25c:	601a      	str	r2, [r3, #0]
 801c25e:	4b6f      	ldr	r3, [pc, #444]	; (801c41c <GUI_Init+0x1d0>)
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801c266:	f240 4349 	movw	r3, #1097	; 0x449
 801c26a:	429a      	cmp	r2, r3
 801c26c:	bf14      	ite	ne
 801c26e:	2300      	movne	r3, #0
 801c270:	2301      	moveq	r3, #1
 801c272:	b2da      	uxtb	r2, r3
 801c274:	4b69      	ldr	r3, [pc, #420]	; (801c41c <GUI_Init+0x1d0>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f3c3 010a 	ubfx	r1, r3, #0, #11
 801c27c:	f240 4351 	movw	r3, #1105	; 0x451
 801c280:	4299      	cmp	r1, r3
 801c282:	bf14      	ite	ne
 801c284:	2300      	movne	r3, #0
 801c286:	2301      	moveq	r3, #1
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	4313      	orrs	r3, r2
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	461a      	mov	r2, r3
 801c290:	4b62      	ldr	r3, [pc, #392]	; (801c41c <GUI_Init+0x1d0>)
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	f3c3 010a 	ubfx	r1, r3, #0, #11
 801c298:	f240 4352 	movw	r3, #1106	; 0x452
 801c29c:	4299      	cmp	r1, r3
 801c29e:	bf14      	ite	ne
 801c2a0:	2300      	movne	r3, #0
 801c2a2:	2301      	moveq	r3, #1
 801c2a4:	b2db      	uxtb	r3, r3
 801c2a6:	4313      	orrs	r3, r2
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d010      	beq.n	801c2ce <GUI_Init+0x82>
 801c2ac:	4b5c      	ldr	r3, [pc, #368]	; (801c420 <GUI_Init+0x1d4>)
 801c2ae:	2201      	movs	r2, #1
 801c2b0:	601a      	str	r2, [r3, #0]
 801c2b2:	bf00      	nop
 801c2b4:	4b5a      	ldr	r3, [pc, #360]	; (801c420 <GUI_Init+0x1d4>)
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d1fb      	bne.n	801c2b4 <GUI_Init+0x68>
 801c2bc:	4b59      	ldr	r3, [pc, #356]	; (801c424 <GUI_Init+0x1d8>)
 801c2be:	4a5a      	ldr	r2, [pc, #360]	; (801c428 <GUI_Init+0x1dc>)
 801c2c0:	601a      	str	r2, [r3, #0]
 801c2c2:	4b58      	ldr	r3, [pc, #352]	; (801c424 <GUI_Init+0x1d8>)
 801c2c4:	681a      	ldr	r2, [r3, #0]
 801c2c6:	4b59      	ldr	r3, [pc, #356]	; (801c42c <GUI_Init+0x1e0>)
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	d018      	beq.n	801c2fe <GUI_Init+0xb2>
 801c2cc:	e7fe      	b.n	801c2cc <GUI_Init+0x80>
 801c2ce:	4b58      	ldr	r3, [pc, #352]	; (801c430 <GUI_Init+0x1e4>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c2d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801c2da:	d110      	bne.n	801c2fe <GUI_Init+0xb2>
 801c2dc:	4b55      	ldr	r3, [pc, #340]	; (801c434 <GUI_Init+0x1e8>)
 801c2de:	2201      	movs	r2, #1
 801c2e0:	601a      	str	r2, [r3, #0]
 801c2e2:	bf00      	nop
 801c2e4:	4b53      	ldr	r3, [pc, #332]	; (801c434 <GUI_Init+0x1e8>)
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d1fb      	bne.n	801c2e4 <GUI_Init+0x98>
 801c2ec:	4b52      	ldr	r3, [pc, #328]	; (801c438 <GUI_Init+0x1ec>)
 801c2ee:	4a4e      	ldr	r2, [pc, #312]	; (801c428 <GUI_Init+0x1dc>)
 801c2f0:	601a      	str	r2, [r3, #0]
 801c2f2:	4b51      	ldr	r3, [pc, #324]	; (801c438 <GUI_Init+0x1ec>)
 801c2f4:	681a      	ldr	r2, [r3, #0]
 801c2f6:	4b4d      	ldr	r3, [pc, #308]	; (801c42c <GUI_Init+0x1e0>)
 801c2f8:	429a      	cmp	r2, r3
 801c2fa:	d000      	beq.n	801c2fe <GUI_Init+0xb2>
 801c2fc:	e7fe      	b.n	801c2fc <GUI_Init+0xb0>
 801c2fe:	4b4f      	ldr	r3, [pc, #316]	; (801c43c <GUI_Init+0x1f0>)
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d10e      	bne.n	801c324 <GUI_Init+0xd8>
 801c306:	4b4d      	ldr	r3, [pc, #308]	; (801c43c <GUI_Init+0x1f0>)
 801c308:	2201      	movs	r2, #1
 801c30a:	601a      	str	r2, [r3, #0]
 801c30c:	f7ee fa60 	bl	800a7d0 <GUI_X_Config>
 801c310:	f7ff f878 	bl	801b404 <GUITASK_Init>
 801c314:	f7ef f866 	bl	800b3e4 <LCD_X_Config>
 801c318:	4b49      	ldr	r3, [pc, #292]	; (801c440 <GUI_Init+0x1f4>)
 801c31a:	4a4a      	ldr	r2, [pc, #296]	; (801c444 <GUI_Init+0x1f8>)
 801c31c:	601a      	str	r2, [r3, #0]
 801c31e:	4848      	ldr	r0, [pc, #288]	; (801c440 <GUI_Init+0x1f4>)
 801c320:	f7ff ff82 	bl	801c228 <GUI__RegisterExit>
 801c324:	4b48      	ldr	r3, [pc, #288]	; (801c448 <GUI_Init+0x1fc>)
 801c326:	222e      	movs	r2, #46	; 0x2e
 801c328:	701a      	strb	r2, [r3, #0]
 801c32a:	f7ee fa21 	bl	800a770 <GUI_X_Init>
 801c32e:	4b47      	ldr	r3, [pc, #284]	; (801c44c <GUI_Init+0x200>)
 801c330:	603b      	str	r3, [r7, #0]
 801c332:	4b47      	ldr	r3, [pc, #284]	; (801c450 <GUI_Init+0x204>)
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	461a      	mov	r2, r3
 801c338:	639a      	str	r2, [r3, #56]	; 0x38
 801c33a:	1d19      	adds	r1, r3, #4
 801c33c:	63d9      	str	r1, [r3, #60]	; 0x3c
 801c33e:	641a      	str	r2, [r3, #64]	; 0x40
 801c340:	f103 0108 	add.w	r1, r3, #8
 801c344:	683a      	ldr	r2, [r7, #0]
 801c346:	6151      	str	r1, [r2, #20]
 801c348:	7c5b      	ldrb	r3, [r3, #17]
 801c34a:	461a      	mov	r2, r3
 801c34c:	4b41      	ldr	r3, [pc, #260]	; (801c454 <GUI_Init+0x208>)
 801c34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c352:	68da      	ldr	r2, [r3, #12]
 801c354:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c356:	6839      	ldr	r1, [r7, #0]
 801c358:	3108      	adds	r1, #8
 801c35a:	4618      	mov	r0, r3
 801c35c:	4790      	blx	r2
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	4a3d      	ldr	r2, [pc, #244]	; (801c458 <GUI_Init+0x20c>)
 801c362:	665a      	str	r2, [r3, #100]	; 0x64
 801c364:	4b3d      	ldr	r3, [pc, #244]	; (801c45c <GUI_Init+0x210>)
 801c366:	681a      	ldr	r2, [r3, #0]
 801c368:	683b      	ldr	r3, [r7, #0]
 801c36a:	61da      	str	r2, [r3, #28]
 801c36c:	4b38      	ldr	r3, [pc, #224]	; (801c450 <GUI_Init+0x204>)
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	f103 0208 	add.w	r2, r3, #8
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	615a      	str	r2, [r3, #20]
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	2201      	movs	r2, #1
 801c37c:	761a      	strb	r2, [r3, #24]
 801c37e:	f7f7 fd23 	bl	8013dc8 <WM_GetDesktopWindow>
 801c382:	4602      	mov	r2, r0
 801c384:	683b      	ldr	r3, [r7, #0]
 801c386:	649a      	str	r2, [r3, #72]	; 0x48
 801c388:	683b      	ldr	r3, [r7, #0]
 801c38a:	2203      	movs	r2, #3
 801c38c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801c396:	631a      	str	r2, [r3, #48]	; 0x30
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801c39e:	635a      	str	r2, [r3, #52]	; 0x34
 801c3a0:	4b2f      	ldr	r3, [pc, #188]	; (801c460 <GUI_Init+0x214>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	4618      	mov	r0, r3
 801c3a6:	f7fd ff39 	bl	801a21c <LCD_SetBkColor>
 801c3aa:	4b2e      	ldr	r3, [pc, #184]	; (801c464 <GUI_Init+0x218>)
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f7fd ff3c 	bl	801a22c <LCD_SetColor>
 801c3b4:	4b2c      	ldr	r3, [pc, #176]	; (801c468 <GUI_Init+0x21c>)
 801c3b6:	4a2d      	ldr	r2, [pc, #180]	; (801c46c <GUI_Init+0x220>)
 801c3b8:	601a      	str	r2, [r3, #0]
 801c3ba:	f7fd fe71 	bl	801a0a0 <emWin_LCD_Init>
 801c3be:	6078      	str	r0, [r7, #4]
 801c3c0:	f7fd fa72 	bl	80198a8 <LCD_GetXSizeDisplay>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d004      	beq.n	801c3d4 <GUI_Init+0x188>
 801c3ca:	f7fd fa73 	bl	80198b4 <LCD_GetYSizeDisplay>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d109      	bne.n	801c3e8 <GUI_Init+0x19c>
 801c3d4:	f7fd fa04 	bl	80197e0 <LCD_GetXSizeMax>
 801c3d8:	4604      	mov	r4, r0
 801c3da:	f7fd fa1f 	bl	801981c <LCD_GetYSizeMax>
 801c3de:	4603      	mov	r3, r0
 801c3e0:	4620      	mov	r0, r4
 801c3e2:	4619      	mov	r1, r3
 801c3e4:	f7fd fa56 	bl	8019894 <LCD_SetDisplaySize>
 801c3e8:	2000      	movs	r0, #0
 801c3ea:	2100      	movs	r1, #0
 801c3ec:	f000 fab4 	bl	801c958 <GUI_SetOrg>
 801c3f0:	f7fa fd9c 	bl	8016f2c <WM_Init>
 801c3f4:	f7ff f846 	bl	801b484 <GUITASK_CopyContext>
 801c3f8:	4b1d      	ldr	r3, [pc, #116]	; (801c470 <GUI_Init+0x224>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d002      	beq.n	801c406 <GUI_Init+0x1ba>
 801c400:	4b1b      	ldr	r3, [pc, #108]	; (801c470 <GUI_Init+0x224>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	4798      	blx	r3
 801c406:	4b1b      	ldr	r3, [pc, #108]	; (801c474 <GUI_Init+0x228>)
 801c408:	2201      	movs	r2, #1
 801c40a:	701a      	strb	r2, [r3, #0]
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	4618      	mov	r0, r3
 801c410:	370c      	adds	r7, #12
 801c412:	46bd      	mov	sp, r7
 801c414:	bd90      	pop	{r4, r7, pc}
 801c416:	bf00      	nop
 801c418:	e0002000 	.word	0xe0002000
 801c41c:	e0042000 	.word	0xe0042000
 801c420:	40023008 	.word	0x40023008
 801c424:	40023000 	.word	0x40023000
 801c428:	f407a5c2 	.word	0xf407a5c2
 801c42c:	b5e8b5cd 	.word	0xb5e8b5cd
 801c430:	5c001000 	.word	0x5c001000
 801c434:	58024c08 	.word	0x58024c08
 801c438:	58024c00 	.word	0x58024c00
 801c43c:	2002b2dc 	.word	0x2002b2dc
 801c440:	2002b264 	.word	0x2002b264
 801c444:	0801c081 	.word	0x0801c081
 801c448:	2002cb80 	.word	0x2002cb80
 801c44c:	2002b26c 	.word	0x2002b26c
 801c450:	2000027c 	.word	0x2000027c
 801c454:	2002cbcc 	.word	0x2002cbcc
 801c458:	08029c30 	.word	0x08029c30
 801c45c:	20000288 	.word	0x20000288
 801c460:	2000028c 	.word	0x2000028c
 801c464:	20000284 	.word	0x20000284
 801c468:	2002cbc4 	.word	0x2002cbc4
 801c46c:	0802aab0 	.word	0x0802aab0
 801c470:	2002cba4 	.word	0x2002cba4
 801c474:	2002cbac 	.word	0x2002cbac

0801c478 <GUI__InvertRectColors>:
 801c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c47c:	4c14      	ldr	r4, [pc, #80]	; (801c4d0 <GUI__InvertRectColors+0x58>)
 801c47e:	6825      	ldr	r5, [r4, #0]
 801c480:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 801c482:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 801c484:	eb04 0803 	add.w	r8, r4, r3
 801c488:	1865      	adds	r5, r4, r1
 801c48a:	4545      	cmp	r5, r8
 801c48c:	eb06 0700 	add.w	r7, r6, r0
 801c490:	4416      	add	r6, r2
 801c492:	dc1b      	bgt.n	801c4cc <GUI__InvertRectColors+0x54>
 801c494:	42b7      	cmp	r7, r6
 801c496:	dc14      	bgt.n	801c4c2 <GUI__InvertRectColors+0x4a>
 801c498:	463c      	mov	r4, r7
 801c49a:	4629      	mov	r1, r5
 801c49c:	4620      	mov	r0, r4
 801c49e:	f004 fc95 	bl	8020dcc <LCD_GetPixelIndex>
 801c4a2:	f7fd fe93 	bl	801a1cc <LCD_Index2Color>
 801c4a6:	f080 10ff 	eor.w	r0, r0, #16711935	; 0xff00ff
 801c4aa:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 801c4ae:	f7fd fe7d 	bl	801a1ac <LCD_Color2Index>
 801c4b2:	4629      	mov	r1, r5
 801c4b4:	4602      	mov	r2, r0
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	3401      	adds	r4, #1
 801c4ba:	f7fd febf 	bl	801a23c <LCD_SetPixelIndex>
 801c4be:	42a6      	cmp	r6, r4
 801c4c0:	daeb      	bge.n	801c49a <GUI__InvertRectColors+0x22>
 801c4c2:	3501      	adds	r5, #1
 801c4c4:	45a8      	cmp	r8, r5
 801c4c6:	dae5      	bge.n	801c494 <GUI__InvertRectColors+0x1c>
 801c4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4d0:	2000027c 	.word	0x2000027c

0801c4d4 <GUI_AddSign>:
 801c4d4:	2800      	cmp	r0, #0
 801c4d6:	b410      	push	{r4}
 801c4d8:	dd07      	ble.n	801c4ea <GUI_AddSign+0x16>
 801c4da:	680b      	ldr	r3, [r1, #0]
 801c4dc:	222b      	movs	r2, #43	; 0x2b
 801c4de:	1c5c      	adds	r4, r3, #1
 801c4e0:	600c      	str	r4, [r1, #0]
 801c4e2:	701a      	strb	r2, [r3, #0]
 801c4e4:	680b      	ldr	r3, [r1, #0]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	701a      	strb	r2, [r3, #0]
 801c4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4ee:	4770      	bx	lr

0801c4f0 <GUI_AddDecShift>:
 801c4f0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801c4f4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801c4f8:	d062      	beq.n	801c5c0 <GUI_AddDecShift+0xd0>
 801c4fa:	2800      	cmp	r0, #0
 801c4fc:	db6b      	blt.n	801c5d6 <GUI_AddDecShift+0xe6>
 801c4fe:	2400      	movs	r4, #0
 801c500:	1b09      	subs	r1, r1, r4
 801c502:	b2c9      	uxtb	r1, r1
 801c504:	2400      	movs	r4, #0
 801c506:	b10a      	cbz	r2, 801c50c <GUI_AddDecShift+0x1c>
 801c508:	3901      	subs	r1, #1
 801c50a:	b2c9      	uxtb	r1, r1
 801c50c:	b361      	cbz	r1, 801c568 <GUI_AddDecShift+0x78>
 801c50e:	4f36      	ldr	r7, [pc, #216]	; (801c5e8 <GUI_AddDecShift+0xf8>)
 801c510:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 801c5ec <GUI_AddDecShift+0xfc>
 801c514:	2c00      	cmp	r4, #0
 801c516:	d14e      	bne.n	801c5b6 <GUI_AddDecShift+0xc6>
 801c518:	1e4e      	subs	r6, r1, #1
 801c51a:	4291      	cmp	r1, r2
 801c51c:	b2f6      	uxtb	r6, r6
 801c51e:	d016      	beq.n	801c54e <GUI_AddDecShift+0x5e>
 801c520:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 801c524:	fb90 f4f5 	sdiv	r4, r0, r5
 801c528:	b2e4      	uxtb	r4, r4
 801c52a:	2c0a      	cmp	r4, #10
 801c52c:	d81c      	bhi.n	801c568 <GUI_AddDecShift+0x78>
 801c52e:	fb05 0014 	mls	r0, r5, r4, r0
 801c532:	681d      	ldr	r5, [r3, #0]
 801c534:	bf1d      	ittte	ne
 801c536:	3430      	addne	r4, #48	; 0x30
 801c538:	4631      	movne	r1, r6
 801c53a:	b2e4      	uxtbne	r4, r4
 801c53c:	2431      	moveq	r4, #49	; 0x31
 801c53e:	1c6e      	adds	r6, r5, #1
 801c540:	601e      	str	r6, [r3, #0]
 801c542:	702c      	strb	r4, [r5, #0]
 801c544:	b181      	cbz	r1, 801c568 <GUI_AddDecShift+0x78>
 801c546:	1e4e      	subs	r6, r1, #1
 801c548:	4291      	cmp	r1, r2
 801c54a:	b2f6      	uxtb	r6, r6
 801c54c:	d1e8      	bne.n	801c520 <GUI_AddDecShift+0x30>
 801c54e:	681c      	ldr	r4, [r3, #0]
 801c550:	1c65      	adds	r5, r4, #1
 801c552:	601d      	str	r5, [r3, #0]
 801c554:	f89c 5000 	ldrb.w	r5, [ip]
 801c558:	7025      	strb	r5, [r4, #0]
 801c55a:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 801c55e:	fb90 f4f5 	sdiv	r4, r0, r5
 801c562:	b2e4      	uxtb	r4, r4
 801c564:	2c0a      	cmp	r4, #10
 801c566:	d9e2      	bls.n	801c52e <GUI_AddDecShift+0x3e>
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	2200      	movs	r2, #0
 801c56c:	701a      	strb	r2, [r3, #0]
 801c56e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801c572:	4770      	bx	lr
 801c574:	681c      	ldr	r4, [r3, #0]
 801c576:	1c66      	adds	r6, r4, #1
 801c578:	601e      	str	r6, [r3, #0]
 801c57a:	f89c 6000 	ldrb.w	r6, [ip]
 801c57e:	7026      	strb	r6, [r4, #0]
 801c580:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 801c584:	fb90 f4f6 	sdiv	r4, r0, r6
 801c588:	b2e4      	uxtb	r4, r4
 801c58a:	2c0a      	cmp	r4, #10
 801c58c:	d8ec      	bhi.n	801c568 <GUI_AddDecShift+0x78>
 801c58e:	f104 0801 	add.w	r8, r4, #1
 801c592:	fb06 0014 	mls	r0, r6, r4, r0
 801c596:	b90d      	cbnz	r5, 801c59c <GUI_AddDecShift+0xac>
 801c598:	fa5f f488 	uxtb.w	r4, r8
 801c59c:	2c0a      	cmp	r4, #10
 801c59e:	bf18      	it	ne
 801c5a0:	4629      	movne	r1, r5
 801c5a2:	681d      	ldr	r5, [r3, #0]
 801c5a4:	bf1a      	itte	ne
 801c5a6:	3430      	addne	r4, #48	; 0x30
 801c5a8:	b2e4      	uxtbne	r4, r4
 801c5aa:	2431      	moveq	r4, #49	; 0x31
 801c5ac:	1c6e      	adds	r6, r5, #1
 801c5ae:	601e      	str	r6, [r3, #0]
 801c5b0:	702c      	strb	r4, [r5, #0]
 801c5b2:	2900      	cmp	r1, #0
 801c5b4:	d0d8      	beq.n	801c568 <GUI_AddDecShift+0x78>
 801c5b6:	1e4d      	subs	r5, r1, #1
 801c5b8:	4291      	cmp	r1, r2
 801c5ba:	b2ed      	uxtb	r5, r5
 801c5bc:	d1e0      	bne.n	801c580 <GUI_AddDecShift+0x90>
 801c5be:	e7d9      	b.n	801c574 <GUI_AddDecShift+0x84>
 801c5c0:	681c      	ldr	r4, [r3, #0]
 801c5c2:	3901      	subs	r1, #1
 801c5c4:	1c60      	adds	r0, r4, #1
 801c5c6:	252d      	movs	r5, #45	; 0x2d
 801c5c8:	6018      	str	r0, [r3, #0]
 801c5ca:	b2c9      	uxtb	r1, r1
 801c5cc:	7025      	strb	r5, [r4, #0]
 801c5ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c5d2:	2401      	movs	r4, #1
 801c5d4:	e797      	b.n	801c506 <GUI_AddDecShift+0x16>
 801c5d6:	681d      	ldr	r5, [r3, #0]
 801c5d8:	262d      	movs	r6, #45	; 0x2d
 801c5da:	1c6c      	adds	r4, r5, #1
 801c5dc:	601c      	str	r4, [r3, #0]
 801c5de:	4240      	negs	r0, r0
 801c5e0:	2401      	movs	r4, #1
 801c5e2:	702e      	strb	r6, [r5, #0]
 801c5e4:	e78c      	b.n	801c500 <GUI_AddDecShift+0x10>
 801c5e6:	bf00      	nop
 801c5e8:	08029c38 	.word	0x08029c38
 801c5ec:	2002cb80 	.word	0x2002cb80

0801c5f0 <GUI_CalcColorDist>:
 801c5f0:	b2c2      	uxtb	r2, r0
 801c5f2:	b2cb      	uxtb	r3, r1
 801c5f4:	1ad3      	subs	r3, r2, r3
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	b29a      	uxth	r2, r3
 801c5fa:	b430      	push	{r4, r5}
 801c5fc:	0414      	lsls	r4, r2, #16
 801c5fe:	f3c1 2507 	ubfx	r5, r1, #8, #8
 801c602:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801c606:	ebc5 0404 	rsb	r4, r5, r4
 801c60a:	b2a4      	uxth	r4, r4
 801c60c:	bf48      	it	mi
 801c60e:	425a      	negmi	r2, r3
 801c610:	ea4f 4111 	mov.w	r1, r1, lsr #16
 801c614:	b2a3      	uxth	r3, r4
 801c616:	bf48      	it	mi
 801c618:	b292      	uxthmi	r2, r2
 801c61a:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801c61e:	041d      	lsls	r5, r3, #16
 801c620:	bf48      	it	mi
 801c622:	4263      	negmi	r3, r4
 801c624:	b289      	uxth	r1, r1
 801c626:	b288      	uxth	r0, r1
 801c628:	fb12 f202 	smulbb	r2, r2, r2
 801c62c:	bf48      	it	mi
 801c62e:	b29b      	uxthmi	r3, r3
 801c630:	fb13 2303 	smlabb	r3, r3, r3, r2
 801c634:	0402      	lsls	r2, r0, #16
 801c636:	bf44      	itt	mi
 801c638:	4248      	negmi	r0, r1
 801c63a:	b280      	uxthmi	r0, r0
 801c63c:	fb00 3000 	mla	r0, r0, r0, r3
 801c640:	bc30      	pop	{r4, r5}
 801c642:	4770      	bx	lr

0801c644 <GUI_GetClientRect>:
 801c644:	b108      	cbz	r0, 801c64a <GUI_GetClientRect+0x6>
 801c646:	f7f7 bb95 	b.w	8013d74 <WM_GetClientRect>
 801c64a:	4770      	bx	lr

0801c64c <GUI_GetBkColor>:
 801c64c:	b510      	push	{r4, lr}
 801c64e:	f7fe fe75 	bl	801b33c <GUI_Lock>
 801c652:	f004 fbed 	bl	8020e30 <LCD_GetBkColorIndex>
 801c656:	f7fd fdb9 	bl	801a1cc <LCD_Index2Color>
 801c65a:	4604      	mov	r4, r0
 801c65c:	f7fe fe64 	bl	801b328 <GUI_Unlock>
 801c660:	4620      	mov	r0, r4
 801c662:	bd10      	pop	{r4, pc}

0801c664 <GUI_GetColor>:
 801c664:	b510      	push	{r4, lr}
 801c666:	f7fe fe69 	bl	801b33c <GUI_Lock>
 801c66a:	f004 fbe9 	bl	8020e40 <LCD_GetColorIndex>
 801c66e:	f7fd fdad 	bl	801a1cc <LCD_Index2Color>
 801c672:	4604      	mov	r4, r0
 801c674:	f7fe fe58 	bl	801b328 <GUI_Unlock>
 801c678:	4620      	mov	r0, r4
 801c67a:	bd10      	pop	{r4, pc}

0801c67c <GUI_GetDrawMode>:
 801c67c:	b510      	push	{r4, lr}
 801c67e:	f7fe fe5d 	bl	801b33c <GUI_Lock>
 801c682:	4b03      	ldr	r3, [pc, #12]	; (801c690 <GUI_GetDrawMode+0x14>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	7c1c      	ldrb	r4, [r3, #16]
 801c688:	f7fe fe4e 	bl	801b328 <GUI_Unlock>
 801c68c:	4620      	mov	r0, r4
 801c68e:	bd10      	pop	{r4, pc}
 801c690:	2000027c 	.word	0x2000027c

0801c694 <GUI_GetFontSizeY>:
 801c694:	b510      	push	{r4, lr}
 801c696:	f7fe fe51 	bl	801b33c <GUI_Lock>
 801c69a:	4b05      	ldr	r3, [pc, #20]	; (801c6b0 <GUI_GetFontSizeY+0x1c>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	69db      	ldr	r3, [r3, #28]
 801c6a0:	7e1c      	ldrb	r4, [r3, #24]
 801c6a2:	7edb      	ldrb	r3, [r3, #27]
 801c6a4:	fb14 f403 	smulbb	r4, r4, r3
 801c6a8:	f7fe fe3e 	bl	801b328 <GUI_Unlock>
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	bd10      	pop	{r4, pc}
 801c6b0:	2000027c 	.word	0x2000027c

0801c6b4 <GUI_GetOrg>:
 801c6b4:	b538      	push	{r3, r4, r5, lr}
 801c6b6:	4604      	mov	r4, r0
 801c6b8:	460d      	mov	r5, r1
 801c6ba:	f7fe fe3f 	bl	801b33c <GUI_Lock>
 801c6be:	4a06      	ldr	r2, [pc, #24]	; (801c6d8 <GUI_GetOrg+0x24>)
 801c6c0:	4b06      	ldr	r3, [pc, #24]	; (801c6dc <GUI_GetOrg+0x28>)
 801c6c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c6c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c6ca:	6022      	str	r2, [r4, #0]
 801c6cc:	602b      	str	r3, [r5, #0]
 801c6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6d2:	f7fe be29 	b.w	801b328 <GUI_Unlock>
 801c6d6:	bf00      	nop
 801c6d8:	2002cba0 	.word	0x2002cba0
 801c6dc:	2002cb90 	.word	0x2002cb90

0801c6e0 <GUI_GetYDistOfFont>:
 801c6e0:	7e40      	ldrb	r0, [r0, #25]
 801c6e2:	4770      	bx	lr

0801c6e4 <GUI_MergeRect>:
 801c6e4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801c6e8:	b318      	cbz	r0, 801c732 <GUI_MergeRect+0x4e>
 801c6ea:	b329      	cbz	r1, 801c738 <GUI_MergeRect+0x54>
 801c6ec:	b32a      	cbz	r2, 801c73a <GUI_MergeRect+0x56>
 801c6ee:	f9b1 9000 	ldrsh.w	r9, [r1]
 801c6f2:	f9b2 4000 	ldrsh.w	r4, [r2]
 801c6f6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801c6fa:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801c6fe:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 801c702:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801c706:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 801c70a:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 801c70e:	45a1      	cmp	r9, r4
 801c710:	bfb8      	it	lt
 801c712:	464c      	movlt	r4, r9
 801c714:	45e0      	cmp	r8, ip
 801c716:	bfb4      	ite	lt
 801c718:	4641      	movlt	r1, r8
 801c71a:	4661      	movge	r1, ip
 801c71c:	42b7      	cmp	r7, r6
 801c71e:	bfac      	ite	ge
 801c720:	463a      	movge	r2, r7
 801c722:	4632      	movlt	r2, r6
 801c724:	429d      	cmp	r5, r3
 801c726:	bfa8      	it	ge
 801c728:	462b      	movge	r3, r5
 801c72a:	8004      	strh	r4, [r0, #0]
 801c72c:	8041      	strh	r1, [r0, #2]
 801c72e:	8082      	strh	r2, [r0, #4]
 801c730:	80c3      	strh	r3, [r0, #6]
 801c732:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801c736:	4770      	bx	lr
 801c738:	4611      	mov	r1, r2
 801c73a:	680b      	ldr	r3, [r1, #0]
 801c73c:	684a      	ldr	r2, [r1, #4]
 801c73e:	6042      	str	r2, [r0, #4]
 801c740:	6003      	str	r3, [r0, #0]
 801c742:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801c746:	4770      	bx	lr

0801c748 <GUI_MoveRect>:
 801c748:	b470      	push	{r4, r5, r6}
 801c74a:	b168      	cbz	r0, 801c768 <GUI_MoveRect+0x20>
 801c74c:	8804      	ldrh	r4, [r0, #0]
 801c74e:	8886      	ldrh	r6, [r0, #4]
 801c750:	8843      	ldrh	r3, [r0, #2]
 801c752:	88c5      	ldrh	r5, [r0, #6]
 801c754:	b289      	uxth	r1, r1
 801c756:	b292      	uxth	r2, r2
 801c758:	440c      	add	r4, r1
 801c75a:	4413      	add	r3, r2
 801c75c:	4431      	add	r1, r6
 801c75e:	442a      	add	r2, r5
 801c760:	8004      	strh	r4, [r0, #0]
 801c762:	8081      	strh	r1, [r0, #4]
 801c764:	8043      	strh	r3, [r0, #2]
 801c766:	80c2      	strh	r2, [r0, #6]
 801c768:	bc70      	pop	{r4, r5, r6}
 801c76a:	4770      	bx	lr

0801c76c <GUI_Exec>:
 801c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c770:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801c7b8 <GUI_Exec+0x4c>
 801c774:	4f0e      	ldr	r7, [pc, #56]	; (801c7b0 <GUI_Exec+0x44>)
 801c776:	4e0f      	ldr	r6, [pc, #60]	; (801c7b4 <GUI_Exec+0x48>)
 801c778:	2500      	movs	r5, #0
 801c77a:	f8d8 4000 	ldr.w	r4, [r8]
 801c77e:	b11c      	cbz	r4, 801c788 <GUI_Exec+0x1c>
 801c780:	47a0      	blx	r4
 801c782:	1c04      	adds	r4, r0, #0
 801c784:	bf18      	it	ne
 801c786:	2401      	movne	r4, #1
 801c788:	f7fa f9f0 	bl	8016b6c <WM_Exec>
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	2800      	cmp	r0, #0
 801c790:	bf18      	it	ne
 801c792:	2401      	movne	r4, #1
 801c794:	b11b      	cbz	r3, 801c79e <GUI_Exec+0x32>
 801c796:	4798      	blx	r3
 801c798:	2800      	cmp	r0, #0
 801c79a:	bf18      	it	ne
 801c79c:	2401      	movne	r4, #1
 801c79e:	6833      	ldr	r3, [r6, #0]
 801c7a0:	b103      	cbz	r3, 801c7a4 <GUI_Exec+0x38>
 801c7a2:	4798      	blx	r3
 801c7a4:	b10c      	cbz	r4, 801c7aa <GUI_Exec+0x3e>
 801c7a6:	2501      	movs	r5, #1
 801c7a8:	e7e7      	b.n	801c77a <GUI_Exec+0xe>
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7b0:	2002cbc8 	.word	0x2002cbc8
 801c7b4:	2002cbc0 	.word	0x2002cbc0
 801c7b8:	2002cb9c 	.word	0x2002cb9c

0801c7bc <GUI_GotoXY>:
 801c7bc:	b538      	push	{r3, r4, r5, lr}
 801c7be:	4604      	mov	r4, r0
 801c7c0:	460d      	mov	r5, r1
 801c7c2:	f7fe fdbb 	bl	801b33c <GUI_Lock>
 801c7c6:	4b04      	ldr	r3, [pc, #16]	; (801c7d8 <GUI_GotoXY+0x1c>)
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	845c      	strh	r4, [r3, #34]	; 0x22
 801c7cc:	849d      	strh	r5, [r3, #36]	; 0x24
 801c7ce:	f7fe fdab 	bl	801b328 <GUI_Unlock>
 801c7d2:	2000      	movs	r0, #0
 801c7d4:	bd38      	pop	{r3, r4, r5, pc}
 801c7d6:	bf00      	nop
 801c7d8:	2000027c 	.word	0x2000027c

0801c7dc <GUI_RectsIntersect>:
 801c7dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c7e0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	dc14      	bgt.n	801c812 <GUI_RectsIntersect+0x36>
 801c7e8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c7ec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	dc0e      	bgt.n	801c812 <GUI_RectsIntersect+0x36>
 801c7f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c7f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c7fc:	429a      	cmp	r2, r3
 801c7fe:	dc08      	bgt.n	801c812 <GUI_RectsIntersect+0x36>
 801c800:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c804:	f9b1 2000 	ldrsh.w	r2, [r1]
 801c808:	429a      	cmp	r2, r3
 801c80a:	bfcc      	ite	gt
 801c80c:	2000      	movgt	r0, #0
 801c80e:	2001      	movle	r0, #1
 801c810:	4770      	bx	lr
 801c812:	2000      	movs	r0, #0
 801c814:	4770      	bx	lr
 801c816:	bf00      	nop

0801c818 <GUI_SaveContext_W>:
 801c818:	b508      	push	{r3, lr}
 801c81a:	4b03      	ldr	r3, [pc, #12]	; (801c828 <GUI_SaveContext_W+0x10>)
 801c81c:	2270      	movs	r2, #112	; 0x70
 801c81e:	6819      	ldr	r1, [r3, #0]
 801c820:	f006 f868 	bl	80228f4 <memcpy>
 801c824:	bd08      	pop	{r3, pc}
 801c826:	bf00      	nop
 801c828:	2000027c 	.word	0x2000027c

0801c82c <GUI_RestoreContext>:
 801c82c:	b508      	push	{r3, lr}
 801c82e:	4b03      	ldr	r3, [pc, #12]	; (801c83c <GUI_RestoreContext+0x10>)
 801c830:	4601      	mov	r1, r0
 801c832:	2270      	movs	r2, #112	; 0x70
 801c834:	6818      	ldr	r0, [r3, #0]
 801c836:	f006 f85d 	bl	80228f4 <memcpy>
 801c83a:	bd08      	pop	{r3, pc}
 801c83c:	2000027c 	.word	0x2000027c

0801c840 <GUI_SelectLCD>:
 801c840:	b508      	push	{r3, lr}
 801c842:	f7fe fd7b 	bl	801b33c <GUI_Lock>
 801c846:	f004 f983 	bl	8020b50 <LCD_SelectLCD>
 801c84a:	f7fc fe1d 	bl	8019488 <LCD_UpdateColorIndices>
 801c84e:	f7fa facd 	bl	8016dec <WM_Activate>
 801c852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c856:	f7fe bd67 	b.w	801b328 <GUI_Unlock>
 801c85a:	bf00      	nop

0801c85c <GUI_SetBkColor>:
 801c85c:	b510      	push	{r4, lr}
 801c85e:	4604      	mov	r4, r0
 801c860:	f7fe fd6c 	bl	801b33c <GUI_Lock>
 801c864:	4620      	mov	r0, r4
 801c866:	f7fd fcd9 	bl	801a21c <LCD_SetBkColor>
 801c86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c86e:	f7fe bd5b 	b.w	801b328 <GUI_Unlock>
 801c872:	bf00      	nop

0801c874 <GUI_SetColor>:
 801c874:	b510      	push	{r4, lr}
 801c876:	4604      	mov	r4, r0
 801c878:	f7fe fd60 	bl	801b33c <GUI_Lock>
 801c87c:	4620      	mov	r0, r4
 801c87e:	f7fd fcd5 	bl	801a22c <LCD_SetColor>
 801c882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c886:	f7fe bd4f 	b.w	801b328 <GUI_Unlock>
 801c88a:	bf00      	nop

0801c88c <GL_SetDefault>:
 801c88c:	b538      	push	{r3, r4, r5, lr}
 801c88e:	4b20      	ldr	r3, [pc, #128]	; (801c910 <GL_SetDefault+0x84>)
 801c890:	4c20      	ldr	r4, [pc, #128]	; (801c914 <GL_SetDefault+0x88>)
 801c892:	681d      	ldr	r5, [r3, #0]
 801c894:	f7fe fd52 	bl	801b33c <GUI_Lock>
 801c898:	4628      	mov	r0, r5
 801c89a:	f7fd fcbf 	bl	801a21c <LCD_SetBkColor>
 801c89e:	f7fe fd43 	bl	801b328 <GUI_Unlock>
 801c8a2:	4b1d      	ldr	r3, [pc, #116]	; (801c918 <GL_SetDefault+0x8c>)
 801c8a4:	681d      	ldr	r5, [r3, #0]
 801c8a6:	f7fe fd49 	bl	801b33c <GUI_Lock>
 801c8aa:	4628      	mov	r0, r5
 801c8ac:	f7fd fcbe 	bl	801a22c <LCD_SetColor>
 801c8b0:	f7fe fd3a 	bl	801b328 <GUI_Unlock>
 801c8b4:	f7fe fd42 	bl	801b33c <GUI_Lock>
 801c8b8:	6823      	ldr	r3, [r4, #0]
 801c8ba:	2201      	movs	r2, #1
 801c8bc:	761a      	strb	r2, [r3, #24]
 801c8be:	f7fe fd33 	bl	801b328 <GUI_Unlock>
 801c8c2:	f7fe fd3b 	bl	801b33c <GUI_Lock>
 801c8c6:	6823      	ldr	r3, [r4, #0]
 801c8c8:	2500      	movs	r5, #0
 801c8ca:	859d      	strh	r5, [r3, #44]	; 0x2c
 801c8cc:	f7fe fd2c 	bl	801b328 <GUI_Unlock>
 801c8d0:	f7fe fd34 	bl	801b33c <GUI_Lock>
 801c8d4:	6823      	ldr	r3, [r4, #0]
 801c8d6:	855d      	strh	r5, [r3, #42]	; 0x2a
 801c8d8:	f7fe fd26 	bl	801b328 <GUI_Unlock>
 801c8dc:	f7fe fd2e 	bl	801b33c <GUI_Lock>
 801c8e0:	4628      	mov	r0, r5
 801c8e2:	f7fd f86b 	bl	80199bc <LCD_SetDrawMode>
 801c8e6:	f7fe fd1f 	bl	801b328 <GUI_Unlock>
 801c8ea:	4b0c      	ldr	r3, [pc, #48]	; (801c91c <GL_SetDefault+0x90>)
 801c8ec:	681d      	ldr	r5, [r3, #0]
 801c8ee:	f7fe fd25 	bl	801b33c <GUI_Lock>
 801c8f2:	6823      	ldr	r3, [r4, #0]
 801c8f4:	b105      	cbz	r5, 801c8f8 <GL_SetDefault+0x6c>
 801c8f6:	61dd      	str	r5, [r3, #28]
 801c8f8:	f7fe fd16 	bl	801b328 <GUI_Unlock>
 801c8fc:	f7fe fd1e 	bl	801b33c <GUI_Lock>
 801c900:	6823      	ldr	r3, [r4, #0]
 801c902:	2200      	movs	r2, #0
 801c904:	769a      	strb	r2, [r3, #26]
 801c906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c90a:	f7fe bd0d 	b.w	801b328 <GUI_Unlock>
 801c90e:	bf00      	nop
 801c910:	2000028c 	.word	0x2000028c
 801c914:	2000027c 	.word	0x2000027c
 801c918:	20000284 	.word	0x20000284
 801c91c:	20000288 	.word	0x20000288

0801c920 <GUI_SetDrawMode>:
 801c920:	b510      	push	{r4, lr}
 801c922:	4604      	mov	r4, r0
 801c924:	f7fe fd0a 	bl	801b33c <GUI_Lock>
 801c928:	4620      	mov	r0, r4
 801c92a:	f7fd f847 	bl	80199bc <LCD_SetDrawMode>
 801c92e:	4604      	mov	r4, r0
 801c930:	f7fe fcfa 	bl	801b328 <GUI_Unlock>
 801c934:	4620      	mov	r0, r4
 801c936:	bd10      	pop	{r4, pc}

0801c938 <GUI_SetFont>:
 801c938:	b538      	push	{r3, r4, r5, lr}
 801c93a:	4604      	mov	r4, r0
 801c93c:	f7fe fcfe 	bl	801b33c <GUI_Lock>
 801c940:	4b04      	ldr	r3, [pc, #16]	; (801c954 <GUI_SetFont+0x1c>)
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	69dd      	ldr	r5, [r3, #28]
 801c946:	b104      	cbz	r4, 801c94a <GUI_SetFont+0x12>
 801c948:	61dc      	str	r4, [r3, #28]
 801c94a:	f7fe fced 	bl	801b328 <GUI_Unlock>
 801c94e:	4628      	mov	r0, r5
 801c950:	bd38      	pop	{r3, r4, r5, pc}
 801c952:	bf00      	nop
 801c954:	2000027c 	.word	0x2000027c

0801c958 <GUI_SetOrg>:
 801c958:	b538      	push	{r3, r4, r5, lr}
 801c95a:	4605      	mov	r5, r0
 801c95c:	460c      	mov	r4, r1
 801c95e:	f7fe fced 	bl	801b33c <GUI_Lock>
 801c962:	4a09      	ldr	r2, [pc, #36]	; (801c988 <GUI_SetOrg+0x30>)
 801c964:	4b09      	ldr	r3, [pc, #36]	; (801c98c <GUI_SetOrg+0x34>)
 801c966:	6812      	ldr	r2, [r2, #0]
 801c968:	4909      	ldr	r1, [pc, #36]	; (801c990 <GUI_SetOrg+0x38>)
 801c96a:	7c50      	ldrb	r0, [r2, #17]
 801c96c:	4a09      	ldr	r2, [pc, #36]	; (801c994 <GUI_SetOrg+0x3c>)
 801c96e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c972:	800d      	strh	r5, [r1, #0]
 801c974:	68c3      	ldr	r3, [r0, #12]
 801c976:	8014      	strh	r4, [r2, #0]
 801c978:	4629      	mov	r1, r5
 801c97a:	4622      	mov	r2, r4
 801c97c:	6a1c      	ldr	r4, [r3, #32]
 801c97e:	47a0      	blx	r4
 801c980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c984:	f7fe bcd0 	b.w	801b328 <GUI_Unlock>
 801c988:	2000027c 	.word	0x2000027c
 801c98c:	2002cbcc 	.word	0x2002cbcc
 801c990:	2002cba0 	.word	0x2002cba0
 801c994:	2002cb90 	.word	0x2002cb90

0801c998 <GUI_SetTextMode>:
 801c998:	b538      	push	{r3, r4, r5, lr}
 801c99a:	4605      	mov	r5, r0
 801c99c:	f7fe fcce 	bl	801b33c <GUI_Lock>
 801c9a0:	4b04      	ldr	r3, [pc, #16]	; (801c9b4 <GUI_SetTextMode+0x1c>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 801c9a8:	855d      	strh	r5, [r3, #42]	; 0x2a
 801c9aa:	f7fe fcbd 	bl	801b328 <GUI_Unlock>
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	bd38      	pop	{r3, r4, r5, pc}
 801c9b2:	bf00      	nop
 801c9b4:	2000027c 	.word	0x2000027c

0801c9b8 <GUIPROP_DispChar>:
 801c9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9bc:	4c39      	ldr	r4, [pc, #228]	; (801caa4 <GUIPROP_DispChar+0xec>)
 801c9be:	6823      	ldr	r3, [r4, #0]
 801c9c0:	69da      	ldr	r2, [r3, #28]
 801c9c2:	f8b3 b02a 	ldrh.w	fp, [r3, #42]	; 0x2a
 801c9c6:	69d3      	ldr	r3, [r2, #28]
 801c9c8:	b089      	sub	sp, #36	; 0x24
 801c9ca:	b143      	cbz	r3, 801c9de <GUIPROP_DispChar+0x26>
 801c9cc:	881a      	ldrh	r2, [r3, #0]
 801c9ce:	4290      	cmp	r0, r2
 801c9d0:	d302      	bcc.n	801c9d8 <GUIPROP_DispChar+0x20>
 801c9d2:	8859      	ldrh	r1, [r3, #2]
 801c9d4:	4281      	cmp	r1, r0
 801c9d6:	d205      	bcs.n	801c9e4 <GUIPROP_DispChar+0x2c>
 801c9d8:	689b      	ldr	r3, [r3, #8]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d1f6      	bne.n	801c9cc <GUIPROP_DispChar+0x14>
 801c9de:	b009      	add	sp, #36	; 0x24
 801c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801c9e8:	ebc2 0900 	rsb	r9, r2, r0
 801c9ec:	eb08 05c9 	add.w	r5, r8, r9, lsl #3
 801c9f0:	fa0f fb8b 	sxth.w	fp, fp
 801c9f4:	78ab      	ldrb	r3, [r5, #2]
 801c9f6:	9307      	str	r3, [sp, #28]
 801c9f8:	4658      	mov	r0, fp
 801c9fa:	f7fc ffdf 	bl	80199bc <LCD_SetDrawMode>
 801c9fe:	6826      	ldr	r6, [r4, #0]
 801ca00:	f818 2039 	ldrb.w	r2, [r8, r9, lsl #3]
 801ca04:	69f7      	ldr	r7, [r6, #28]
 801ca06:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801ca0a:	f897 e01a 	ldrb.w	lr, [r7, #26]
 801ca0e:	7e3b      	ldrb	r3, [r7, #24]
 801ca10:	4682      	mov	sl, r0
 801ca12:	f9b6 0022 	ldrsh.w	r0, [r6, #34]	; 0x22
 801ca16:	f8cd e000 	str.w	lr, [sp]
 801ca1a:	7eff      	ldrb	r7, [r7, #27]
 801ca1c:	9701      	str	r7, [sp, #4]
 801ca1e:	f04f 0e01 	mov.w	lr, #1
 801ca22:	9f07      	ldr	r7, [sp, #28]
 801ca24:	9703      	str	r7, [sp, #12]
 801ca26:	f8cd e008 	str.w	lr, [sp, #8]
 801ca2a:	686f      	ldr	r7, [r5, #4]
 801ca2c:	9704      	str	r7, [sp, #16]
 801ca2e:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 801ca30:	9605      	str	r6, [sp, #20]
 801ca32:	f7fd f999 	bl	8019d68 <LCD_DrawBitmap>
 801ca36:	6823      	ldr	r3, [r4, #0]
 801ca38:	69db      	ldr	r3, [r3, #28]
 801ca3a:	7e5e      	ldrb	r6, [r3, #25]
 801ca3c:	7e19      	ldrb	r1, [r3, #24]
 801ca3e:	428e      	cmp	r6, r1
 801ca40:	d921      	bls.n	801ca86 <GUIPROP_DispChar+0xce>
 801ca42:	f1bb 0f02 	cmp.w	fp, #2
 801ca46:	7edf      	ldrb	r7, [r3, #27]
 801ca48:	d01d      	beq.n	801ca86 <GUIPROP_DispChar+0xce>
 801ca4a:	9106      	str	r1, [sp, #24]
 801ca4c:	f7ff fe0a 	bl	801c664 <GUI_GetColor>
 801ca50:	4683      	mov	fp, r0
 801ca52:	f7ff fdfb 	bl	801c64c <GUI_GetBkColor>
 801ca56:	f7ff ff0d 	bl	801c874 <GUI_SetColor>
 801ca5a:	4a12      	ldr	r2, [pc, #72]	; (801caa4 <GUIPROP_DispChar+0xec>)
 801ca5c:	f818 e039 	ldrb.w	lr, [r8, r9, lsl #3]
 801ca60:	6813      	ldr	r3, [r2, #0]
 801ca62:	9906      	ldr	r1, [sp, #24]
 801ca64:	69da      	ldr	r2, [r3, #28]
 801ca66:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801ca6a:	7ed2      	ldrb	r2, [r2, #27]
 801ca6c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801ca70:	fb0e 0202 	mla	r2, lr, r2, r0
 801ca74:	fb01 3107 	mla	r1, r1, r7, r3
 801ca78:	fb06 3307 	mla	r3, r6, r7, r3
 801ca7c:	f7fd f826 	bl	8019acc <LCD_FillRect>
 801ca80:	4658      	mov	r0, fp
 801ca82:	f7ff fef7 	bl	801c874 <GUI_SetColor>
 801ca86:	4650      	mov	r0, sl
 801ca88:	f7fc ff98 	bl	80199bc <LCD_SetDrawMode>
 801ca8c:	6823      	ldr	r3, [r4, #0]
 801ca8e:	7868      	ldrb	r0, [r5, #1]
 801ca90:	69da      	ldr	r2, [r3, #28]
 801ca92:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ca94:	7e92      	ldrb	r2, [r2, #26]
 801ca96:	fb02 1200 	mla	r2, r2, r0, r1
 801ca9a:	845a      	strh	r2, [r3, #34]	; 0x22
 801ca9c:	b009      	add	sp, #36	; 0x24
 801ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caa2:	bf00      	nop
 801caa4:	2000027c 	.word	0x2000027c

0801caa8 <GUIPROP_GetCharDistX>:
 801caa8:	4b11      	ldr	r3, [pc, #68]	; (801caf0 <GUIPROP_GetCharDistX+0x48>)
 801caaa:	b470      	push	{r4, r5, r6}
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	69dd      	ldr	r5, [r3, #28]
 801cab0:	69eb      	ldr	r3, [r5, #28]
 801cab2:	b143      	cbz	r3, 801cac6 <GUIPROP_GetCharDistX+0x1e>
 801cab4:	881a      	ldrh	r2, [r3, #0]
 801cab6:	4290      	cmp	r0, r2
 801cab8:	d302      	bcc.n	801cac0 <GUIPROP_GetCharDistX+0x18>
 801caba:	885c      	ldrh	r4, [r3, #2]
 801cabc:	4284      	cmp	r4, r0
 801cabe:	d205      	bcs.n	801cacc <GUIPROP_GetCharDistX+0x24>
 801cac0:	689b      	ldr	r3, [r3, #8]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d1f6      	bne.n	801cab4 <GUIPROP_GetCharDistX+0xc>
 801cac6:	4618      	mov	r0, r3
 801cac8:	bc70      	pop	{r4, r5, r6}
 801caca:	4770      	bx	lr
 801cacc:	685e      	ldr	r6, [r3, #4]
 801cace:	7eac      	ldrb	r4, [r5, #26]
 801cad0:	1a82      	subs	r2, r0, r2
 801cad2:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801cad6:	7858      	ldrb	r0, [r3, #1]
 801cad8:	fb10 f004 	smulbb	r0, r0, r4
 801cadc:	2900      	cmp	r1, #0
 801cade:	d0f3      	beq.n	801cac8 <GUIPROP_GetCharDistX+0x20>
 801cae0:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 801cae4:	fb14 f303 	smulbb	r3, r4, r3
 801cae8:	600b      	str	r3, [r1, #0]
 801caea:	bc70      	pop	{r4, r5, r6}
 801caec:	4770      	bx	lr
 801caee:	bf00      	nop
 801caf0:	2000027c 	.word	0x2000027c

0801caf4 <GUIPROP_GetFontInfo>:
 801caf4:	2301      	movs	r3, #1
 801caf6:	800b      	strh	r3, [r1, #0]
 801caf8:	4770      	bx	lr
 801cafa:	bf00      	nop

0801cafc <GUIPROP_IsInFont>:
 801cafc:	69c0      	ldr	r0, [r0, #28]
 801cafe:	b150      	cbz	r0, 801cb16 <GUIPROP_IsInFont+0x1a>
 801cb00:	8803      	ldrh	r3, [r0, #0]
 801cb02:	428b      	cmp	r3, r1
 801cb04:	d802      	bhi.n	801cb0c <GUIPROP_IsInFont+0x10>
 801cb06:	8843      	ldrh	r3, [r0, #2]
 801cb08:	428b      	cmp	r3, r1
 801cb0a:	d203      	bcs.n	801cb14 <GUIPROP_IsInFont+0x18>
 801cb0c:	6880      	ldr	r0, [r0, #8]
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	d1f6      	bne.n	801cb00 <GUIPROP_IsInFont+0x4>
 801cb12:	4770      	bx	lr
 801cb14:	2001      	movs	r0, #1
 801cb16:	4770      	bx	lr

0801cb18 <_Log2VisBuffered>:
 801cb18:	4770      	bx	lr
 801cb1a:	bf00      	nop

0801cb1c <_DispLine>:
 801cb1c:	b570      	push	{r4, r5, r6, lr}
 801cb1e:	b082      	sub	sp, #8
 801cb20:	ab02      	add	r3, sp, #8
 801cb22:	4d21      	ldr	r5, [pc, #132]	; (801cba8 <_DispLine+0x8c>)
 801cb24:	f843 1d08 	str.w	r1, [r3, #-8]!
 801cb28:	4c20      	ldr	r4, [pc, #128]	; (801cbac <_DispLine+0x90>)
 801cb2a:	682b      	ldr	r3, [r5, #0]
 801cb2c:	9001      	str	r0, [sp, #4]
 801cb2e:	4669      	mov	r1, sp
 801cb30:	4615      	mov	r5, r2
 801cb32:	4798      	blx	r3
 801cb34:	6823      	ldr	r3, [r4, #0]
 801cb36:	9001      	str	r0, [sp, #4]
 801cb38:	6958      	ldr	r0, [r3, #20]
 801cb3a:	b118      	cbz	r0, 801cb44 <_DispLine+0x28>
 801cb3c:	4629      	mov	r1, r5
 801cb3e:	f7ff fe4d 	bl	801c7dc <GUI_RectsIntersect>
 801cb42:	b1a8      	cbz	r0, 801cb70 <_DispLine+0x54>
 801cb44:	2001      	movs	r0, #1
 801cb46:	f7fd fdf7 	bl	801a738 <GUI__ManageCache>
 801cb4a:	6822      	ldr	r2, [r4, #0]
 801cb4c:	69d3      	ldr	r3, [r2, #28]
 801cb4e:	695b      	ldr	r3, [r3, #20]
 801cb50:	b1ab      	cbz	r3, 801cb7e <_DispLine+0x62>
 801cb52:	4c17      	ldr	r4, [pc, #92]	; (801cbb0 <_DispLine+0x94>)
 801cb54:	6821      	ldr	r1, [r4, #0]
 801cb56:	b169      	cbz	r1, 801cb74 <_DispLine+0x58>
 801cb58:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 801cb5c:	689b      	ldr	r3, [r3, #8]
 801cb5e:	9801      	ldr	r0, [sp, #4]
 801cb60:	9900      	ldr	r1, [sp, #0]
 801cb62:	4798      	blx	r3
 801cb64:	4628      	mov	r0, r5
 801cb66:	6823      	ldr	r3, [r4, #0]
 801cb68:	4798      	blx	r3
 801cb6a:	2000      	movs	r0, #0
 801cb6c:	f7fd fde4 	bl	801a738 <GUI__ManageCache>
 801cb70:	b002      	add	sp, #8
 801cb72:	bd70      	pop	{r4, r5, r6, pc}
 801cb74:	689b      	ldr	r3, [r3, #8]
 801cb76:	9801      	ldr	r0, [sp, #4]
 801cb78:	9900      	ldr	r1, [sp, #0]
 801cb7a:	4798      	blx	r3
 801cb7c:	e7f5      	b.n	801cb6a <_DispLine+0x4e>
 801cb7e:	4d0d      	ldr	r5, [pc, #52]	; (801cbb4 <_DispLine+0x98>)
 801cb80:	9b00      	ldr	r3, [sp, #0]
 801cb82:	3b01      	subs	r3, #1
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	a801      	add	r0, sp, #4
 801cb88:	9300      	str	r3, [sp, #0]
 801cb8a:	dbee      	blt.n	801cb6a <_DispLine+0x4e>
 801cb8c:	f7fe f90e 	bl	801adac <GUI_UC__GetCharCodeInc>
 801cb90:	6823      	ldr	r3, [r4, #0]
 801cb92:	69db      	ldr	r3, [r3, #28]
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	4606      	mov	r6, r0
 801cb98:	4798      	blx	r3
 801cb9a:	682b      	ldr	r3, [r5, #0]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d0ef      	beq.n	801cb80 <_DispLine+0x64>
 801cba0:	4630      	mov	r0, r6
 801cba2:	4798      	blx	r3
 801cba4:	e7ec      	b.n	801cb80 <_DispLine+0x64>
 801cba6:	bf00      	nop
 801cba8:	20000290 	.word	0x20000290
 801cbac:	2000027c 	.word	0x2000027c
 801cbb0:	2002cb98 	.word	0x2002cb98
 801cbb4:	2002cba8 	.word	0x2002cba8

0801cbb8 <GUI__GetLineNumChars>:
 801cbb8:	b530      	push	{r4, r5, lr}
 801cbba:	b083      	sub	sp, #12
 801cbbc:	460d      	mov	r5, r1
 801cbbe:	9001      	str	r0, [sp, #4]
 801cbc0:	b1d8      	cbz	r0, 801cbfa <GUI__GetLineNumChars+0x42>
 801cbc2:	4b0f      	ldr	r3, [pc, #60]	; (801cc00 <GUI__GetLineNumChars+0x48>)
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	69db      	ldr	r3, [r3, #28]
 801cbc8:	695b      	ldr	r3, [r3, #20]
 801cbca:	b123      	cbz	r3, 801cbd6 <GUI__GetLineNumChars+0x1e>
 801cbcc:	685b      	ldr	r3, [r3, #4]
 801cbce:	b113      	cbz	r3, 801cbd6 <GUI__GetLineNumChars+0x1e>
 801cbd0:	4798      	blx	r3
 801cbd2:	b003      	add	sp, #12
 801cbd4:	bd30      	pop	{r4, r5, pc}
 801cbd6:	2d00      	cmp	r5, #0
 801cbd8:	bfc8      	it	gt
 801cbda:	2400      	movgt	r4, #0
 801cbdc:	dc05      	bgt.n	801cbea <GUI__GetLineNumChars+0x32>
 801cbde:	e00c      	b.n	801cbfa <GUI__GetLineNumChars+0x42>
 801cbe0:	280a      	cmp	r0, #10
 801cbe2:	d007      	beq.n	801cbf4 <GUI__GetLineNumChars+0x3c>
 801cbe4:	3401      	adds	r4, #1
 801cbe6:	42ac      	cmp	r4, r5
 801cbe8:	d004      	beq.n	801cbf4 <GUI__GetLineNumChars+0x3c>
 801cbea:	a801      	add	r0, sp, #4
 801cbec:	f7fe f8de 	bl	801adac <GUI_UC__GetCharCodeInc>
 801cbf0:	2800      	cmp	r0, #0
 801cbf2:	d1f5      	bne.n	801cbe0 <GUI__GetLineNumChars+0x28>
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	b003      	add	sp, #12
 801cbf8:	bd30      	pop	{r4, r5, pc}
 801cbfa:	2000      	movs	r0, #0
 801cbfc:	b003      	add	sp, #12
 801cbfe:	bd30      	pop	{r4, r5, pc}
 801cc00:	2000027c 	.word	0x2000027c

0801cc04 <GUI__GetLineDistX>:
 801cc04:	b570      	push	{r4, r5, r6, lr}
 801cc06:	b084      	sub	sp, #16
 801cc08:	ab04      	add	r3, sp, #16
 801cc0a:	4a1e      	ldr	r2, [pc, #120]	; (801cc84 <GUI__GetLineDistX+0x80>)
 801cc0c:	f843 1d10 	str.w	r1, [r3, #-16]!
 801cc10:	9001      	str	r0, [sp, #4]
 801cc12:	4669      	mov	r1, sp
 801cc14:	6813      	ldr	r3, [r2, #0]
 801cc16:	4798      	blx	r3
 801cc18:	4604      	mov	r4, r0
 801cc1a:	9001      	str	r0, [sp, #4]
 801cc1c:	2800      	cmp	r0, #0
 801cc1e:	d02c      	beq.n	801cc7a <GUI__GetLineDistX+0x76>
 801cc20:	4b19      	ldr	r3, [pc, #100]	; (801cc88 <GUI__GetLineDistX+0x84>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	69db      	ldr	r3, [r3, #28]
 801cc26:	695b      	ldr	r3, [r3, #20]
 801cc28:	b12b      	cbz	r3, 801cc36 <GUI__GetLineDistX+0x32>
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	b11b      	cbz	r3, 801cc36 <GUI__GetLineDistX+0x32>
 801cc2e:	9900      	ldr	r1, [sp, #0]
 801cc30:	4798      	blx	r3
 801cc32:	b004      	add	sp, #16
 801cc34:	bd70      	pop	{r4, r5, r6, pc}
 801cc36:	9b00      	ldr	r3, [sp, #0]
 801cc38:	3b01      	subs	r3, #1
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	9300      	str	r3, [sp, #0]
 801cc3e:	bfa8      	it	ge
 801cc40:	2400      	movge	r4, #0
 801cc42:	db1c      	blt.n	801cc7e <GUI__GetLineDistX+0x7a>
 801cc44:	a801      	add	r0, sp, #4
 801cc46:	f7fe f8b1 	bl	801adac <GUI_UC__GetCharCodeInc>
 801cc4a:	4605      	mov	r5, r0
 801cc4c:	f000 f8a8 	bl	801cda0 <GUI_GetCharDistX>
 801cc50:	9b00      	ldr	r3, [sp, #0]
 801cc52:	3b01      	subs	r3, #1
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	4404      	add	r4, r0
 801cc58:	9300      	str	r3, [sp, #0]
 801cc5a:	daf3      	bge.n	801cc44 <GUI__GetLineDistX+0x40>
 801cc5c:	a904      	add	r1, sp, #16
 801cc5e:	2600      	movs	r6, #0
 801cc60:	f841 6d04 	str.w	r6, [r1, #-4]!
 801cc64:	4628      	mov	r0, r5
 801cc66:	f000 f8ad 	bl	801cdc4 <GUI_GetCharDistXEx>
 801cc6a:	9b03      	ldr	r3, [sp, #12]
 801cc6c:	4298      	cmp	r0, r3
 801cc6e:	bfb8      	it	lt
 801cc70:	ebc0 0603 	rsblt	r6, r0, r3
 801cc74:	19a0      	adds	r0, r4, r6
 801cc76:	b004      	add	sp, #16
 801cc78:	bd70      	pop	{r4, r5, r6, pc}
 801cc7a:	b004      	add	sp, #16
 801cc7c:	bd70      	pop	{r4, r5, r6, pc}
 801cc7e:	2500      	movs	r5, #0
 801cc80:	462c      	mov	r4, r5
 801cc82:	e7eb      	b.n	801cc5c <GUI__GetLineDistX+0x58>
 801cc84:	20000290 	.word	0x20000290
 801cc88:	2000027c 	.word	0x2000027c

0801cc8c <GUI__DispLine>:
 801cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc8e:	4b29      	ldr	r3, [pc, #164]	; (801cd34 <GUI__DispLine+0xa8>)
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	b083      	sub	sp, #12
 801cc94:	4604      	mov	r4, r0
 801cc96:	460d      	mov	r5, r1
 801cc98:	b173      	cbz	r3, 801ccb8 <GUI__DispLine+0x2c>
 801cc9a:	2000      	movs	r0, #0
 801cc9c:	f7f9 fe2e 	bl	80168fc <WM__InitIVRSearch>
 801cca0:	b140      	cbz	r0, 801ccb4 <GUI__DispLine+0x28>
 801cca2:	4620      	mov	r0, r4
 801cca4:	4629      	mov	r1, r5
 801cca6:	466a      	mov	r2, sp
 801cca8:	f7ff ff38 	bl	801cb1c <_DispLine>
 801ccac:	f7f9 fd00 	bl	80166b0 <WM__GetNextIVR>
 801ccb0:	2800      	cmp	r0, #0
 801ccb2:	d1f6      	bne.n	801cca2 <GUI__DispLine+0x16>
 801ccb4:	b003      	add	sp, #12
 801ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccb8:	6810      	ldr	r0, [r2, #0]
 801ccba:	6851      	ldr	r1, [r2, #4]
 801ccbc:	4f1e      	ldr	r7, [pc, #120]	; (801cd38 <GUI__DispLine+0xac>)
 801ccbe:	466b      	mov	r3, sp
 801ccc0:	c303      	stmia	r3!, {r0, r1}
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ccc8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 801cccc:	f8bd e000 	ldrh.w	lr, [sp]
 801ccd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801ccd4:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801ccd8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801ccdc:	4496      	add	lr, r2
 801ccde:	4419      	add	r1, r3
 801cce0:	4462      	add	r2, ip
 801cce2:	4403      	add	r3, r0
 801cce4:	4668      	mov	r0, sp
 801cce6:	f8ad e000 	strh.w	lr, [sp]
 801ccea:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ccee:	f8ad 1002 	strh.w	r1, [sp, #2]
 801ccf2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ccf6:	f7f9 fe01 	bl	80168fc <WM__InitIVRSearch>
 801ccfa:	b950      	cbnz	r0, 801cd12 <GUI__DispLine+0x86>
 801ccfc:	683b      	ldr	r3, [r7, #0]
 801ccfe:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 801cd00:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 801cd02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801cd04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cd06:	1a61      	subs	r1, r4, r1
 801cd08:	1a82      	subs	r2, r0, r2
 801cd0a:	8459      	strh	r1, [r3, #34]	; 0x22
 801cd0c:	849a      	strh	r2, [r3, #36]	; 0x24
 801cd0e:	b003      	add	sp, #12
 801cd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	f8bd 1000 	ldrh.w	r1, [sp]
 801cd18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cd1c:	8459      	strh	r1, [r3, #34]	; 0x22
 801cd1e:	849a      	strh	r2, [r3, #36]	; 0x24
 801cd20:	4620      	mov	r0, r4
 801cd22:	4629      	mov	r1, r5
 801cd24:	466a      	mov	r2, sp
 801cd26:	f7ff fef9 	bl	801cb1c <_DispLine>
 801cd2a:	f7f9 fcc1 	bl	80166b0 <WM__GetNextIVR>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	d1ef      	bne.n	801cd12 <GUI__DispLine+0x86>
 801cd32:	e7e3      	b.n	801ccfc <GUI__DispLine+0x70>
 801cd34:	2002cb84 	.word	0x2002cb84
 801cd38:	2000027c 	.word	0x2000027c

0801cd3c <GUI_GetYAdjust>:
 801cd3c:	b510      	push	{r4, lr}
 801cd3e:	f7fe fafd 	bl	801b33c <GUI_Lock>
 801cd42:	4b0f      	ldr	r3, [pc, #60]	; (801cd80 <GUI_GetYAdjust+0x44>)
 801cd44:	681a      	ldr	r2, [r3, #0]
 801cd46:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 801cd48:	f003 030c 	and.w	r3, r3, #12
 801cd4c:	2b08      	cmp	r3, #8
 801cd4e:	d008      	beq.n	801cd62 <GUI_GetYAdjust+0x26>
 801cd50:	2b0c      	cmp	r3, #12
 801cd52:	d006      	beq.n	801cd62 <GUI_GetYAdjust+0x26>
 801cd54:	2b04      	cmp	r3, #4
 801cd56:	d00b      	beq.n	801cd70 <GUI_GetYAdjust+0x34>
 801cd58:	2400      	movs	r4, #0
 801cd5a:	f7fe fae5 	bl	801b328 <GUI_Unlock>
 801cd5e:	4620      	mov	r0, r4
 801cd60:	bd10      	pop	{r4, pc}
 801cd62:	69d3      	ldr	r3, [r2, #28]
 801cd64:	7e1c      	ldrb	r4, [r3, #24]
 801cd66:	0864      	lsrs	r4, r4, #1
 801cd68:	f7fe fade 	bl	801b328 <GUI_Unlock>
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	bd10      	pop	{r4, pc}
 801cd70:	69d3      	ldr	r3, [r2, #28]
 801cd72:	7e1c      	ldrb	r4, [r3, #24]
 801cd74:	3c01      	subs	r4, #1
 801cd76:	f7fe fad7 	bl	801b328 <GUI_Unlock>
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	bd10      	pop	{r4, pc}
 801cd7e:	bf00      	nop
 801cd80:	2000027c 	.word	0x2000027c

0801cd84 <GUI_GetFontDistY>:
 801cd84:	b510      	push	{r4, lr}
 801cd86:	f7fe fad9 	bl	801b33c <GUI_Lock>
 801cd8a:	4b04      	ldr	r3, [pc, #16]	; (801cd9c <GUI_GetFontDistY+0x18>)
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	69db      	ldr	r3, [r3, #28]
 801cd90:	7e5c      	ldrb	r4, [r3, #25]
 801cd92:	f7fe fac9 	bl	801b328 <GUI_Unlock>
 801cd96:	4620      	mov	r0, r4
 801cd98:	bd10      	pop	{r4, pc}
 801cd9a:	bf00      	nop
 801cd9c:	2000027c 	.word	0x2000027c

0801cda0 <GUI_GetCharDistX>:
 801cda0:	b510      	push	{r4, lr}
 801cda2:	4604      	mov	r4, r0
 801cda4:	f7fe faca 	bl	801b33c <GUI_Lock>
 801cda8:	4b05      	ldr	r3, [pc, #20]	; (801cdc0 <GUI_GetCharDistX+0x20>)
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	69db      	ldr	r3, [r3, #28]
 801cdae:	2100      	movs	r1, #0
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	4620      	mov	r0, r4
 801cdb4:	4798      	blx	r3
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	f7fe fab6 	bl	801b328 <GUI_Unlock>
 801cdbc:	4620      	mov	r0, r4
 801cdbe:	bd10      	pop	{r4, pc}
 801cdc0:	2000027c 	.word	0x2000027c

0801cdc4 <GUI_GetCharDistXEx>:
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	460c      	mov	r4, r1
 801cdca:	f7fe fab7 	bl	801b33c <GUI_Lock>
 801cdce:	4b06      	ldr	r3, [pc, #24]	; (801cde8 <GUI_GetCharDistXEx+0x24>)
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	69db      	ldr	r3, [r3, #28]
 801cdd4:	4621      	mov	r1, r4
 801cdd6:	685b      	ldr	r3, [r3, #4]
 801cdd8:	4628      	mov	r0, r5
 801cdda:	4798      	blx	r3
 801cddc:	4604      	mov	r4, r0
 801cdde:	f7fe faa3 	bl	801b328 <GUI_Unlock>
 801cde2:	4620      	mov	r0, r4
 801cde4:	bd38      	pop	{r3, r4, r5, pc}
 801cde6:	bf00      	nop
 801cde8:	2000027c 	.word	0x2000027c

0801cdec <_AddFreeMemory>:
 801cdec:	4bbf      	ldr	r3, [pc, #764]	; (801d0ec <_AddFreeMemory+0x300>)
 801cdee:	b4f0      	push	{r4, r5, r6, r7}
 801cdf0:	68dc      	ldr	r4, [r3, #12]
 801cdf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cdf4:	3c01      	subs	r4, #1
 801cdf6:	1915      	adds	r5, r2, r4
 801cdf8:	180c      	adds	r4, r1, r0
 801cdfa:	42a5      	cmp	r5, r4
 801cdfc:	d303      	bcc.n	801ce06 <_AddFreeMemory+0x1a>
 801cdfe:	580d      	ldr	r5, [r1, r0]
 801ce00:	2d00      	cmp	r5, #0
 801ce02:	f000 80a2 	beq.w	801cf4a <_AddFreeMemory+0x15e>
 801ce06:	428a      	cmp	r2, r1
 801ce08:	d205      	bcs.n	801ce16 <_AddFreeMemory+0x2a>
 801ce0a:	f851 4c04 	ldr.w	r4, [r1, #-4]
 801ce0e:	1b0c      	subs	r4, r1, r4
 801ce10:	6822      	ldr	r2, [r4, #0]
 801ce12:	2a00      	cmp	r2, #0
 801ce14:	d04b      	beq.n	801ceae <_AddFreeMemory+0xc2>
 801ce16:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801ce1a:	4ab4      	ldr	r2, [pc, #720]	; (801d0ec <_AddFreeMemory+0x300>)
 801ce1c:	42a0      	cmp	r0, r4
 801ce1e:	f080 8120 	bcs.w	801d062 <_AddFreeMemory+0x276>
 801ce22:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 801ce26:	42a0      	cmp	r0, r4
 801ce28:	f080 811d 	bcs.w	801d066 <_AddFreeMemory+0x27a>
 801ce2c:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 801ce30:	42a0      	cmp	r0, r4
 801ce32:	f080 811a 	bcs.w	801d06a <_AddFreeMemory+0x27e>
 801ce36:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 801ce3a:	42a0      	cmp	r0, r4
 801ce3c:	f080 8117 	bcs.w	801d06e <_AddFreeMemory+0x282>
 801ce40:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 801ce44:	42a0      	cmp	r0, r4
 801ce46:	f080 8114 	bcs.w	801d072 <_AddFreeMemory+0x286>
 801ce4a:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 801ce4e:	42a0      	cmp	r0, r4
 801ce50:	f080 8111 	bcs.w	801d076 <_AddFreeMemory+0x28a>
 801ce54:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 801ce58:	42a0      	cmp	r0, r4
 801ce5a:	f080 810e 	bcs.w	801d07a <_AddFreeMemory+0x28e>
 801ce5e:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 801ce62:	42a0      	cmp	r0, r4
 801ce64:	f080 810b 	bcs.w	801d07e <_AddFreeMemory+0x292>
 801ce68:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801ce6a:	42a0      	cmp	r0, r4
 801ce6c:	f080 8109 	bcs.w	801d082 <_AddFreeMemory+0x296>
 801ce70:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801ce72:	4290      	cmp	r0, r2
 801ce74:	f080 8107 	bcs.w	801d086 <_AddFreeMemory+0x29a>
 801ce78:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 801ce7a:	4a9c      	ldr	r2, [pc, #624]	; (801d0ec <_AddFreeMemory+0x300>)
 801ce7c:	42a0      	cmp	r0, r4
 801ce7e:	f080 8104 	bcs.w	801d08a <_AddFreeMemory+0x29e>
 801ce82:	6e14      	ldr	r4, [r2, #96]	; 0x60
 801ce84:	42a0      	cmp	r0, r4
 801ce86:	f080 8102 	bcs.w	801d08e <_AddFreeMemory+0x2a2>
 801ce8a:	6d94      	ldr	r4, [r2, #88]	; 0x58
 801ce8c:	42a0      	cmp	r0, r4
 801ce8e:	f080 8100 	bcs.w	801d092 <_AddFreeMemory+0x2a6>
 801ce92:	6d14      	ldr	r4, [r2, #80]	; 0x50
 801ce94:	42a0      	cmp	r0, r4
 801ce96:	f080 80fe 	bcs.w	801d096 <_AddFreeMemory+0x2aa>
 801ce9a:	6c94      	ldr	r4, [r2, #72]	; 0x48
 801ce9c:	42a0      	cmp	r0, r4
 801ce9e:	f080 80fc 	bcs.w	801d09a <_AddFreeMemory+0x2ae>
 801cea2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801cea4:	4290      	cmp	r0, r2
 801cea6:	f080 80b5 	bcs.w	801d014 <_AddFreeMemory+0x228>
 801ceaa:	bcf0      	pop	{r4, r5, r6, r7}
 801ceac:	4770      	bx	lr
 801ceae:	6862      	ldr	r2, [r4, #4]
 801ceb0:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801ceb4:	498d      	ldr	r1, [pc, #564]	; (801d0ec <_AddFreeMemory+0x300>)
 801ceb6:	42aa      	cmp	r2, r5
 801ceb8:	4410      	add	r0, r2
 801ceba:	f080 80fd 	bcs.w	801d0b8 <_AddFreeMemory+0x2cc>
 801cebe:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 801cec2:	42aa      	cmp	r2, r5
 801cec4:	f080 8105 	bcs.w	801d0d2 <_AddFreeMemory+0x2e6>
 801cec8:	f8d1 50a8 	ldr.w	r5, [r1, #168]	; 0xa8
 801cecc:	42aa      	cmp	r2, r5
 801cece:	f080 80fe 	bcs.w	801d0ce <_AddFreeMemory+0x2e2>
 801ced2:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 801ced6:	42aa      	cmp	r2, r5
 801ced8:	f080 80fd 	bcs.w	801d0d6 <_AddFreeMemory+0x2ea>
 801cedc:	f8d1 5098 	ldr.w	r5, [r1, #152]	; 0x98
 801cee0:	42aa      	cmp	r2, r5
 801cee2:	f080 80fa 	bcs.w	801d0da <_AddFreeMemory+0x2ee>
 801cee6:	f8d1 5090 	ldr.w	r5, [r1, #144]	; 0x90
 801ceea:	42aa      	cmp	r2, r5
 801ceec:	f080 80f9 	bcs.w	801d0e2 <_AddFreeMemory+0x2f6>
 801cef0:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 801cef4:	42aa      	cmp	r2, r5
 801cef6:	f080 80f2 	bcs.w	801d0de <_AddFreeMemory+0x2f2>
 801cefa:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 801cefe:	428a      	cmp	r2, r1
 801cf00:	f080 8104 	bcs.w	801d10c <_AddFreeMemory+0x320>
 801cf04:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801cf06:	4979      	ldr	r1, [pc, #484]	; (801d0ec <_AddFreeMemory+0x300>)
 801cf08:	42aa      	cmp	r2, r5
 801cf0a:	f080 80fd 	bcs.w	801d108 <_AddFreeMemory+0x31c>
 801cf0e:	6f0d      	ldr	r5, [r1, #112]	; 0x70
 801cf10:	42aa      	cmp	r2, r5
 801cf12:	f080 810e 	bcs.w	801d132 <_AddFreeMemory+0x346>
 801cf16:	6e8d      	ldr	r5, [r1, #104]	; 0x68
 801cf18:	42aa      	cmp	r2, r5
 801cf1a:	f080 8108 	bcs.w	801d12e <_AddFreeMemory+0x342>
 801cf1e:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 801cf20:	42aa      	cmp	r2, r5
 801cf22:	f080 810c 	bcs.w	801d13e <_AddFreeMemory+0x352>
 801cf26:	6d8d      	ldr	r5, [r1, #88]	; 0x58
 801cf28:	42aa      	cmp	r2, r5
 801cf2a:	f080 8106 	bcs.w	801d13a <_AddFreeMemory+0x34e>
 801cf2e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801cf30:	42aa      	cmp	r2, r5
 801cf32:	f080 8100 	bcs.w	801d136 <_AddFreeMemory+0x34a>
 801cf36:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801cf38:	42aa      	cmp	r2, r5
 801cf3a:	d25e      	bcs.n	801cffa <_AddFreeMemory+0x20e>
 801cf3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801cf3e:	428a      	cmp	r2, r1
 801cf40:	bf28      	it	cs
 801cf42:	2600      	movcs	r6, #0
 801cf44:	d25a      	bcs.n	801cffc <_AddFreeMemory+0x210>
 801cf46:	4621      	mov	r1, r4
 801cf48:	e765      	b.n	801ce16 <_AddFreeMemory+0x2a>
 801cf4a:	6865      	ldr	r5, [r4, #4]
 801cf4c:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 801cf50:	42b5      	cmp	r5, r6
 801cf52:	4428      	add	r0, r5
 801cf54:	f080 80ad 	bcs.w	801d0b2 <_AddFreeMemory+0x2c6>
 801cf58:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 801cf5c:	42b5      	cmp	r5, r6
 801cf5e:	f080 80b3 	bcs.w	801d0c8 <_AddFreeMemory+0x2dc>
 801cf62:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801cf66:	42b5      	cmp	r5, r6
 801cf68:	f080 80ab 	bcs.w	801d0c2 <_AddFreeMemory+0x2d6>
 801cf6c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801cf70:	42b5      	cmp	r5, r6
 801cf72:	f080 80a3 	bcs.w	801d0bc <_AddFreeMemory+0x2d0>
 801cf76:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801cf7a:	42b5      	cmp	r5, r6
 801cf7c:	f080 80c1 	bcs.w	801d102 <_AddFreeMemory+0x316>
 801cf80:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 801cf84:	42b5      	cmp	r5, r6
 801cf86:	f080 80b9 	bcs.w	801d0fc <_AddFreeMemory+0x310>
 801cf8a:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 801cf8e:	42b5      	cmp	r5, r6
 801cf90:	f080 80b1 	bcs.w	801d0f6 <_AddFreeMemory+0x30a>
 801cf94:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 801cf98:	42b5      	cmp	r5, r6
 801cf9a:	f080 80a9 	bcs.w	801d0f0 <_AddFreeMemory+0x304>
 801cf9e:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 801cfa0:	42bd      	cmp	r5, r7
 801cfa2:	f080 80a0 	bcs.w	801d0e6 <_AddFreeMemory+0x2fa>
 801cfa6:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 801cfa8:	42bd      	cmp	r5, r7
 801cfaa:	f080 80b1 	bcs.w	801d110 <_AddFreeMemory+0x324>
 801cfae:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 801cfb0:	42bd      	cmp	r5, r7
 801cfb2:	f080 80b3 	bcs.w	801d11c <_AddFreeMemory+0x330>
 801cfb6:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 801cfb8:	42bd      	cmp	r5, r7
 801cfba:	f080 80ac 	bcs.w	801d116 <_AddFreeMemory+0x32a>
 801cfbe:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801cfc0:	42bd      	cmp	r5, r7
 801cfc2:	f080 80b1 	bcs.w	801d128 <_AddFreeMemory+0x33c>
 801cfc6:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 801cfc8:	42bd      	cmp	r5, r7
 801cfca:	f080 80aa 	bcs.w	801d122 <_AddFreeMemory+0x336>
 801cfce:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 801cfd0:	42bd      	cmp	r5, r7
 801cfd2:	f080 80b6 	bcs.w	801d142 <_AddFreeMemory+0x356>
 801cfd6:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801cfd8:	42b5      	cmp	r5, r6
 801cfda:	bf28      	it	cs
 801cfdc:	f04f 0c00 	movcs.w	ip, #0
 801cfe0:	f4ff af11 	bcc.w	801ce06 <_AddFreeMemory+0x1a>
 801cfe4:	681e      	ldr	r6, [r3, #0]
 801cfe6:	68a7      	ldr	r7, [r4, #8]
 801cfe8:	68e4      	ldr	r4, [r4, #12]
 801cfea:	1b75      	subs	r5, r6, r5
 801cfec:	601d      	str	r5, [r3, #0]
 801cfee:	b107      	cbz	r7, 801cff2 <_AddFreeMemory+0x206>
 801cff0:	607c      	str	r4, [r7, #4]
 801cff2:	2c00      	cmp	r4, #0
 801cff4:	d058      	beq.n	801d0a8 <_AddFreeMemory+0x2bc>
 801cff6:	6027      	str	r7, [r4, #0]
 801cff8:	e705      	b.n	801ce06 <_AddFreeMemory+0x1a>
 801cffa:	2601      	movs	r6, #1
 801cffc:	681f      	ldr	r7, [r3, #0]
 801cffe:	68a5      	ldr	r5, [r4, #8]
 801d000:	68e1      	ldr	r1, [r4, #12]
 801d002:	1aba      	subs	r2, r7, r2
 801d004:	601a      	str	r2, [r3, #0]
 801d006:	b105      	cbz	r5, 801d00a <_AddFreeMemory+0x21e>
 801d008:	6069      	str	r1, [r5, #4]
 801d00a:	2900      	cmp	r1, #0
 801d00c:	d047      	beq.n	801d09e <_AddFreeMemory+0x2b2>
 801d00e:	600d      	str	r5, [r1, #0]
 801d010:	4621      	mov	r1, r4
 801d012:	e700      	b.n	801ce16 <_AddFreeMemory+0x2a>
 801d014:	2500      	movs	r5, #0
 801d016:	3508      	adds	r5, #8
 801d018:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801d01c:	180e      	adds	r6, r1, r0
 801d01e:	6852      	ldr	r2, [r2, #4]
 801d020:	608a      	str	r2, [r1, #8]
 801d022:	2400      	movs	r4, #0
 801d024:	600c      	str	r4, [r1, #0]
 801d026:	6048      	str	r0, [r1, #4]
 801d028:	6109      	str	r1, [r1, #16]
 801d02a:	f101 0408 	add.w	r4, r1, #8
 801d02e:	f846 0c04 	str.w	r0, [r6, #-4]
 801d032:	b102      	cbz	r2, 801d036 <_AddFreeMemory+0x24a>
 801d034:	6054      	str	r4, [r2, #4]
 801d036:	2200      	movs	r2, #0
 801d038:	60ca      	str	r2, [r1, #12]
 801d03a:	681a      	ldr	r2, [r3, #0]
 801d03c:	f893 6029 	ldrb.w	r6, [r3, #41]	; 0x29
 801d040:	492a      	ldr	r1, [pc, #168]	; (801d0ec <_AddFreeMemory+0x300>)
 801d042:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801d046:	4402      	add	r2, r0
 801d048:	606c      	str	r4, [r5, #4]
 801d04a:	601a      	str	r2, [r3, #0]
 801d04c:	2e00      	cmp	r6, #0
 801d04e:	f47f af2c 	bne.w	801ceaa <_AddFreeMemory+0xbe>
 801d052:	68cc      	ldr	r4, [r1, #12]
 801d054:	688b      	ldr	r3, [r1, #8]
 801d056:	1aa2      	subs	r2, r4, r2
 801d058:	429a      	cmp	r2, r3
 801d05a:	bf88      	it	hi
 801d05c:	608a      	strhi	r2, [r1, #8]
 801d05e:	bcf0      	pop	{r4, r5, r6, r7}
 801d060:	4770      	bx	lr
 801d062:	250f      	movs	r5, #15
 801d064:	e7d7      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d066:	250e      	movs	r5, #14
 801d068:	e7d5      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d06a:	250d      	movs	r5, #13
 801d06c:	e7d3      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d06e:	250c      	movs	r5, #12
 801d070:	e7d1      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d072:	250b      	movs	r5, #11
 801d074:	e7cf      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d076:	250a      	movs	r5, #10
 801d078:	e7cd      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d07a:	2509      	movs	r5, #9
 801d07c:	e7cb      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d07e:	2508      	movs	r5, #8
 801d080:	e7c9      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d082:	2507      	movs	r5, #7
 801d084:	e7c7      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d086:	2506      	movs	r5, #6
 801d088:	e7c5      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d08a:	2505      	movs	r5, #5
 801d08c:	e7c3      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d08e:	2504      	movs	r5, #4
 801d090:	e7c1      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d092:	2503      	movs	r5, #3
 801d094:	e7bf      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d096:	2502      	movs	r5, #2
 801d098:	e7bd      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d09a:	2501      	movs	r5, #1
 801d09c:	e7bb      	b.n	801d016 <_AddFreeMemory+0x22a>
 801d09e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801d0a2:	4621      	mov	r1, r4
 801d0a4:	6475      	str	r5, [r6, #68]	; 0x44
 801d0a6:	e6b6      	b.n	801ce16 <_AddFreeMemory+0x2a>
 801d0a8:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 801d0ac:	f8cc 7044 	str.w	r7, [ip, #68]	; 0x44
 801d0b0:	e6a9      	b.n	801ce06 <_AddFreeMemory+0x1a>
 801d0b2:	f04f 0c0f 	mov.w	ip, #15
 801d0b6:	e795      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0b8:	260f      	movs	r6, #15
 801d0ba:	e79f      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0bc:	f04f 0c0c 	mov.w	ip, #12
 801d0c0:	e790      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0c2:	f04f 0c0d 	mov.w	ip, #13
 801d0c6:	e78d      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0c8:	f04f 0c0e 	mov.w	ip, #14
 801d0cc:	e78a      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0ce:	260d      	movs	r6, #13
 801d0d0:	e794      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0d2:	260e      	movs	r6, #14
 801d0d4:	e792      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0d6:	260c      	movs	r6, #12
 801d0d8:	e790      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0da:	260b      	movs	r6, #11
 801d0dc:	e78e      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0de:	2609      	movs	r6, #9
 801d0e0:	e78c      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0e2:	260a      	movs	r6, #10
 801d0e4:	e78a      	b.n	801cffc <_AddFreeMemory+0x210>
 801d0e6:	f04f 0c07 	mov.w	ip, #7
 801d0ea:	e77b      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0ec:	2002cbdc 	.word	0x2002cbdc
 801d0f0:	f04f 0c08 	mov.w	ip, #8
 801d0f4:	e776      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0f6:	f04f 0c09 	mov.w	ip, #9
 801d0fa:	e773      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d0fc:	f04f 0c0a 	mov.w	ip, #10
 801d100:	e770      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d102:	f04f 0c0b 	mov.w	ip, #11
 801d106:	e76d      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d108:	2607      	movs	r6, #7
 801d10a:	e777      	b.n	801cffc <_AddFreeMemory+0x210>
 801d10c:	2608      	movs	r6, #8
 801d10e:	e775      	b.n	801cffc <_AddFreeMemory+0x210>
 801d110:	f04f 0c06 	mov.w	ip, #6
 801d114:	e766      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d116:	f04f 0c04 	mov.w	ip, #4
 801d11a:	e763      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d11c:	f04f 0c05 	mov.w	ip, #5
 801d120:	e760      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d122:	f04f 0c02 	mov.w	ip, #2
 801d126:	e75d      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d128:	f04f 0c03 	mov.w	ip, #3
 801d12c:	e75a      	b.n	801cfe4 <_AddFreeMemory+0x1f8>
 801d12e:	2605      	movs	r6, #5
 801d130:	e764      	b.n	801cffc <_AddFreeMemory+0x210>
 801d132:	2606      	movs	r6, #6
 801d134:	e762      	b.n	801cffc <_AddFreeMemory+0x210>
 801d136:	2602      	movs	r6, #2
 801d138:	e760      	b.n	801cffc <_AddFreeMemory+0x210>
 801d13a:	2603      	movs	r6, #3
 801d13c:	e75e      	b.n	801cffc <_AddFreeMemory+0x210>
 801d13e:	2604      	movs	r6, #4
 801d140:	e75c      	b.n	801cffc <_AddFreeMemory+0x210>
 801d142:	f04f 0c01 	mov.w	ip, #1
 801d146:	e74d      	b.n	801cfe4 <_AddFreeMemory+0x1f8>

0801d148 <_RemoveHoles>:
 801d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d14c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 801d320 <_RemoveHoles+0x1d8>
 801d150:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801d154:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801d158:	e893 0030 	ldmia.w	r3, {r4, r5}
 801d15c:	3e01      	subs	r6, #1
 801d15e:	b083      	sub	sp, #12
 801d160:	4683      	mov	fp, r0
 801d162:	441e      	add	r6, r3
 801d164:	46c1      	mov	r9, r8
 801d166:	b134      	cbz	r4, 801d176 <_RemoveHoles+0x2e>
 801d168:	442b      	add	r3, r5
 801d16a:	429e      	cmp	r6, r3
 801d16c:	d906      	bls.n	801d17c <_RemoveHoles+0x34>
 801d16e:	e893 0030 	ldmia.w	r3, {r4, r5}
 801d172:	2c00      	cmp	r4, #0
 801d174:	d1f8      	bne.n	801d168 <_RemoveHoles+0x20>
 801d176:	18e9      	adds	r1, r5, r3
 801d178:	428e      	cmp	r6, r1
 801d17a:	d803      	bhi.n	801d184 <_RemoveHoles+0x3c>
 801d17c:	2001      	movs	r0, #1
 801d17e:	b003      	add	sp, #12
 801d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d184:	58ec      	ldr	r4, [r5, r3]
 801d186:	684f      	ldr	r7, [r1, #4]
 801d188:	b154      	cbz	r4, 801d1a0 <_RemoveHoles+0x58>
 801d18a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801d18e:	f812 0034 	ldrb.w	r0, [r2, r4, lsl #3]
 801d192:	2801      	cmp	r0, #1
 801d194:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d198:	d005      	beq.n	801d1a6 <_RemoveHoles+0x5e>
 801d19a:	463d      	mov	r5, r7
 801d19c:	460b      	mov	r3, r1
 801d19e:	e7e2      	b.n	801d166 <_RemoveHoles+0x1e>
 801d1a0:	463d      	mov	r5, r7
 801d1a2:	460b      	mov	r3, r1
 801d1a4:	e7e7      	b.n	801d176 <_RemoveHoles+0x2e>
 801d1a6:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 801d1aa:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 801d1ae:	42a8      	cmp	r0, r5
 801d1b0:	d97e      	bls.n	801d2b0 <_RemoveHoles+0x168>
 801d1b2:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 801d1b6:	42a8      	cmp	r0, r5
 801d1b8:	d97d      	bls.n	801d2b6 <_RemoveHoles+0x16e>
 801d1ba:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 801d1be:	42a8      	cmp	r0, r5
 801d1c0:	d97e      	bls.n	801d2c0 <_RemoveHoles+0x178>
 801d1c2:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 801d1c6:	42a8      	cmp	r0, r5
 801d1c8:	d97d      	bls.n	801d2c6 <_RemoveHoles+0x17e>
 801d1ca:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 801d1ce:	4285      	cmp	r5, r0
 801d1d0:	f080 8086 	bcs.w	801d2e0 <_RemoveHoles+0x198>
 801d1d4:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 801d1d8:	4285      	cmp	r5, r0
 801d1da:	f080 8084 	bcs.w	801d2e6 <_RemoveHoles+0x19e>
 801d1de:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 801d1e2:	4285      	cmp	r5, r0
 801d1e4:	d274      	bcs.n	801d2d0 <_RemoveHoles+0x188>
 801d1e6:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 801d1ea:	4285      	cmp	r5, r0
 801d1ec:	d273      	bcs.n	801d2d6 <_RemoveHoles+0x18e>
 801d1ee:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 801d1f2:	4285      	cmp	r5, r0
 801d1f4:	f080 8084 	bcs.w	801d300 <_RemoveHoles+0x1b8>
 801d1f8:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 801d1fc:	4285      	cmp	r5, r0
 801d1fe:	f080 8082 	bcs.w	801d306 <_RemoveHoles+0x1be>
 801d202:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 801d206:	4285      	cmp	r5, r0
 801d208:	f080 8082 	bcs.w	801d310 <_RemoveHoles+0x1c8>
 801d20c:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 801d210:	4285      	cmp	r5, r0
 801d212:	d26d      	bcs.n	801d2f0 <_RemoveHoles+0x1a8>
 801d214:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d218:	4285      	cmp	r5, r0
 801d21a:	d26e      	bcs.n	801d2fa <_RemoveHoles+0x1b2>
 801d21c:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 801d220:	4285      	cmp	r5, r0
 801d222:	d278      	bcs.n	801d316 <_RemoveHoles+0x1ce>
 801d224:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 801d228:	4285      	cmp	r5, r0
 801d22a:	d21f      	bcs.n	801d26c <_RemoveHoles+0x124>
 801d22c:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 801d230:	4285      	cmp	r5, r0
 801d232:	d231      	bcs.n	801d298 <_RemoveHoles+0x150>
 801d234:	6053      	str	r3, [r2, #4]
 801d236:	4618      	mov	r0, r3
 801d238:	463a      	mov	r2, r7
 801d23a:	f005 fb66 	bl	802290a <memmove>
 801d23e:	4554      	cmp	r4, sl
 801d240:	4603      	mov	r3, r0
 801d242:	d00b      	beq.n	801d25c <_RemoveHoles+0x114>
 801d244:	441f      	add	r7, r3
 801d246:	4628      	mov	r0, r5
 801d248:	4639      	mov	r1, r7
 801d24a:	f7ff fdcf 	bl	801cdec <_AddFreeMemory>
 801d24e:	f1bb 0f00 	cmp.w	fp, #0
 801d252:	d001      	beq.n	801d258 <_RemoveHoles+0x110>
 801d254:	4558      	cmp	r0, fp
 801d256:	d207      	bcs.n	801d268 <_RemoveHoles+0x120>
 801d258:	463b      	mov	r3, r7
 801d25a:	e786      	b.n	801d16a <_RemoveHoles+0x22>
 801d25c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801d260:	1b52      	subs	r2, r2, r5
 801d262:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 801d266:	e7ed      	b.n	801d244 <_RemoveHoles+0xfc>
 801d268:	2000      	movs	r0, #0
 801d26a:	e788      	b.n	801d17e <_RemoveHoles+0x36>
 801d26c:	2001      	movs	r0, #1
 801d26e:	9001      	str	r0, [sp, #4]
 801d270:	f8d8 0000 	ldr.w	r0, [r8]
 801d274:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801d278:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801d27c:	1b40      	subs	r0, r0, r5
 801d27e:	f8c8 0000 	str.w	r0, [r8]
 801d282:	f1be 0f00 	cmp.w	lr, #0
 801d286:	d001      	beq.n	801d28c <_RemoveHoles+0x144>
 801d288:	f8ce c004 	str.w	ip, [lr, #4]
 801d28c:	f1bc 0f00 	cmp.w	ip, #0
 801d290:	d007      	beq.n	801d2a2 <_RemoveHoles+0x15a>
 801d292:	f8cc e000 	str.w	lr, [ip]
 801d296:	e7cd      	b.n	801d234 <_RemoveHoles+0xec>
 801d298:	f04f 0c00 	mov.w	ip, #0
 801d29c:	f8cd c004 	str.w	ip, [sp, #4]
 801d2a0:	e7e6      	b.n	801d270 <_RemoveHoles+0x128>
 801d2a2:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d2a6:	eb08 00cc 	add.w	r0, r8, ip, lsl #3
 801d2aa:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 801d2ae:	e7c1      	b.n	801d234 <_RemoveHoles+0xec>
 801d2b0:	200f      	movs	r0, #15
 801d2b2:	9001      	str	r0, [sp, #4]
 801d2b4:	e7dc      	b.n	801d270 <_RemoveHoles+0x128>
 801d2b6:	f04f 0c0e 	mov.w	ip, #14
 801d2ba:	f8cd c004 	str.w	ip, [sp, #4]
 801d2be:	e7d7      	b.n	801d270 <_RemoveHoles+0x128>
 801d2c0:	200d      	movs	r0, #13
 801d2c2:	9001      	str	r0, [sp, #4]
 801d2c4:	e7d4      	b.n	801d270 <_RemoveHoles+0x128>
 801d2c6:	f04f 0c0c 	mov.w	ip, #12
 801d2ca:	f8cd c004 	str.w	ip, [sp, #4]
 801d2ce:	e7cf      	b.n	801d270 <_RemoveHoles+0x128>
 801d2d0:	2009      	movs	r0, #9
 801d2d2:	9001      	str	r0, [sp, #4]
 801d2d4:	e7cc      	b.n	801d270 <_RemoveHoles+0x128>
 801d2d6:	f04f 0c08 	mov.w	ip, #8
 801d2da:	f8cd c004 	str.w	ip, [sp, #4]
 801d2de:	e7c7      	b.n	801d270 <_RemoveHoles+0x128>
 801d2e0:	200b      	movs	r0, #11
 801d2e2:	9001      	str	r0, [sp, #4]
 801d2e4:	e7c4      	b.n	801d270 <_RemoveHoles+0x128>
 801d2e6:	f04f 0c0a 	mov.w	ip, #10
 801d2ea:	f8cd c004 	str.w	ip, [sp, #4]
 801d2ee:	e7bf      	b.n	801d270 <_RemoveHoles+0x128>
 801d2f0:	f04f 0c04 	mov.w	ip, #4
 801d2f4:	f8cd c004 	str.w	ip, [sp, #4]
 801d2f8:	e7ba      	b.n	801d270 <_RemoveHoles+0x128>
 801d2fa:	2003      	movs	r0, #3
 801d2fc:	9001      	str	r0, [sp, #4]
 801d2fe:	e7b7      	b.n	801d270 <_RemoveHoles+0x128>
 801d300:	2007      	movs	r0, #7
 801d302:	9001      	str	r0, [sp, #4]
 801d304:	e7b4      	b.n	801d270 <_RemoveHoles+0x128>
 801d306:	f04f 0c06 	mov.w	ip, #6
 801d30a:	f8cd c004 	str.w	ip, [sp, #4]
 801d30e:	e7af      	b.n	801d270 <_RemoveHoles+0x128>
 801d310:	2005      	movs	r0, #5
 801d312:	9001      	str	r0, [sp, #4]
 801d314:	e7ac      	b.n	801d270 <_RemoveHoles+0x128>
 801d316:	f04f 0c02 	mov.w	ip, #2
 801d31a:	f8cd c004 	str.w	ip, [sp, #4]
 801d31e:	e7a7      	b.n	801d270 <_RemoveHoles+0x128>
 801d320:	2002cbdc 	.word	0x2002cbdc

0801d324 <_Alloc>:
 801d324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d328:	4cc3      	ldr	r4, [pc, #780]	; (801d638 <_Alloc+0x314>)
 801d32a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d32e:	4605      	mov	r5, r0
 801d330:	2b00      	cmp	r3, #0
 801d332:	f000 8107 	beq.w	801d544 <_Alloc+0x220>
 801d336:	6c26      	ldr	r6, [r4, #64]	; 0x40
 801d338:	6823      	ldr	r3, [r4, #0]
 801d33a:	42b5      	cmp	r5, r6
 801d33c:	bf24      	itt	cs
 801d33e:	3503      	addcs	r5, #3
 801d340:	f025 0603 	biccs.w	r6, r5, #3
 801d344:	360c      	adds	r6, #12
 801d346:	42b3      	cmp	r3, r6
 801d348:	4dbb      	ldr	r5, [pc, #748]	; (801d638 <_Alloc+0x314>)
 801d34a:	d202      	bcs.n	801d352 <_Alloc+0x2e>
 801d34c:	2000      	movs	r0, #0
 801d34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d352:	686b      	ldr	r3, [r5, #4]
 801d354:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801d356:	4293      	cmp	r3, r2
 801d358:	f240 8172 	bls.w	801d640 <_Alloc+0x31c>
 801d35c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d35e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d360:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 801d364:	3b01      	subs	r3, #1
 801d366:	eb02 0108 	add.w	r1, r2, r8
 801d36a:	6063      	str	r3, [r4, #4]
 801d36c:	684b      	ldr	r3, [r1, #4]
 801d36e:	6263      	str	r3, [r4, #36]	; 0x24
 801d370:	2301      	movs	r3, #1
 801d372:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 801d376:	2d00      	cmp	r5, #0
 801d378:	d0e8      	beq.n	801d34c <_Alloc+0x28>
 801d37a:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 801d638 <_Alloc+0x314>
 801d37e:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 801d382:	42be      	cmp	r6, r7
 801d384:	f080 813a 	bcs.w	801d5fc <_Alloc+0x2d8>
 801d388:	f8d9 30b0 	ldr.w	r3, [r9, #176]	; 0xb0
 801d38c:	429e      	cmp	r6, r3
 801d38e:	f080 8137 	bcs.w	801d600 <_Alloc+0x2dc>
 801d392:	f8d9 30a8 	ldr.w	r3, [r9, #168]	; 0xa8
 801d396:	429e      	cmp	r6, r3
 801d398:	f080 8134 	bcs.w	801d604 <_Alloc+0x2e0>
 801d39c:	f8d9 30a0 	ldr.w	r3, [r9, #160]	; 0xa0
 801d3a0:	429e      	cmp	r6, r3
 801d3a2:	f080 8133 	bcs.w	801d60c <_Alloc+0x2e8>
 801d3a6:	f8d9 3098 	ldr.w	r3, [r9, #152]	; 0x98
 801d3aa:	429e      	cmp	r6, r3
 801d3ac:	f080 812c 	bcs.w	801d608 <_Alloc+0x2e4>
 801d3b0:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 801d3b4:	429e      	cmp	r6, r3
 801d3b6:	f080 812d 	bcs.w	801d614 <_Alloc+0x2f0>
 801d3ba:	f8d9 3088 	ldr.w	r3, [r9, #136]	; 0x88
 801d3be:	429e      	cmp	r6, r3
 801d3c0:	f080 8126 	bcs.w	801d610 <_Alloc+0x2ec>
 801d3c4:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
 801d3c8:	429e      	cmp	r6, r3
 801d3ca:	f080 8127 	bcs.w	801d61c <_Alloc+0x2f8>
 801d3ce:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
 801d3d2:	429e      	cmp	r6, r3
 801d3d4:	f080 8120 	bcs.w	801d618 <_Alloc+0x2f4>
 801d3d8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801d3dc:	429e      	cmp	r6, r3
 801d3de:	f080 8121 	bcs.w	801d624 <_Alloc+0x300>
 801d3e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801d3e4:	429e      	cmp	r6, r3
 801d3e6:	f080 811b 	bcs.w	801d620 <_Alloc+0x2fc>
 801d3ea:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 801d3ee:	429e      	cmp	r6, r3
 801d3f0:	f080 811a 	bcs.w	801d628 <_Alloc+0x304>
 801d3f4:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801d3f8:	429e      	cmp	r6, r3
 801d3fa:	f080 8117 	bcs.w	801d62c <_Alloc+0x308>
 801d3fe:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 801d402:	429e      	cmp	r6, r3
 801d404:	f080 8116 	bcs.w	801d634 <_Alloc+0x310>
 801d408:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 801d40c:	429e      	cmp	r6, r3
 801d40e:	f080 810f 	bcs.w	801d630 <_Alloc+0x30c>
 801d412:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 801d416:	429e      	cmp	r6, r3
 801d418:	bf2c      	ite	cs
 801d41a:	2300      	movcs	r3, #0
 801d41c:	f06f 0300 	mvncc.w	r3, #0
 801d420:	2b0f      	cmp	r3, #15
 801d422:	bf98      	it	ls
 801d424:	2100      	movls	r1, #0
 801d426:	d814      	bhi.n	801d452 <_Alloc+0x12e>
 801d428:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
 801d42c:	2000      	movs	r0, #0
 801d42e:	eb0c 0300 	add.w	r3, ip, r0
 801d432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d434:	b92b      	cbnz	r3, 801d442 <_Alloc+0x11e>
 801d436:	e007      	b.n	801d448 <_Alloc+0x124>
 801d438:	685a      	ldr	r2, [r3, #4]
 801d43a:	4296      	cmp	r6, r2
 801d43c:	d91d      	bls.n	801d47a <_Alloc+0x156>
 801d43e:	689b      	ldr	r3, [r3, #8]
 801d440:	b113      	cbz	r3, 801d448 <_Alloc+0x124>
 801d442:	689b      	ldr	r3, [r3, #8]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d1f7      	bne.n	801d438 <_Alloc+0x114>
 801d448:	3101      	adds	r1, #1
 801d44a:	290f      	cmp	r1, #15
 801d44c:	f100 0008 	add.w	r0, r0, #8
 801d450:	d9ed      	bls.n	801d42e <_Alloc+0x10a>
 801d452:	4630      	mov	r0, r6
 801d454:	f7ff fe78 	bl	801d148 <_RemoveHoles>
 801d458:	2800      	cmp	r0, #0
 801d45a:	d090      	beq.n	801d37e <_Alloc+0x5a>
 801d45c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d45e:	6862      	ldr	r2, [r4, #4]
 801d460:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d462:	4498      	add	r8, r3
 801d464:	1c50      	adds	r0, r2, #1
 801d466:	2200      	movs	r2, #0
 801d468:	6060      	str	r0, [r4, #4]
 801d46a:	f8c8 1004 	str.w	r1, [r8, #4]
 801d46e:	f803 2035 	strb.w	r2, [r3, r5, lsl #3]
 801d472:	4610      	mov	r0, r2
 801d474:	6265      	str	r5, [r4, #36]	; 0x24
 801d476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d47a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d47c:	ebc6 0c02 	rsb	ip, r6, r2
 801d480:	f101 000c 	add.w	r0, r1, #12
 801d484:	4584      	cmp	ip, r0
 801d486:	bf2c      	ite	cs
 801d488:	4630      	movcs	r0, r6
 801d48a:	4610      	movcc	r0, r2
 801d48c:	42ba      	cmp	r2, r7
 801d48e:	f080 8101 	bcs.w	801d694 <_Alloc+0x370>
 801d492:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 801d496:	4e68      	ldr	r6, [pc, #416]	; (801d638 <_Alloc+0x314>)
 801d498:	42ba      	cmp	r2, r7
 801d49a:	f080 80fd 	bcs.w	801d698 <_Alloc+0x374>
 801d49e:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 801d4a2:	42ba      	cmp	r2, r7
 801d4a4:	f080 80fa 	bcs.w	801d69c <_Alloc+0x378>
 801d4a8:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 801d4ac:	42ba      	cmp	r2, r7
 801d4ae:	f080 80e9 	bcs.w	801d684 <_Alloc+0x360>
 801d4b2:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 801d4b6:	42ba      	cmp	r2, r7
 801d4b8:	f080 80e6 	bcs.w	801d688 <_Alloc+0x364>
 801d4bc:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 801d4c0:	4297      	cmp	r7, r2
 801d4c2:	f240 80ef 	bls.w	801d6a4 <_Alloc+0x380>
 801d4c6:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 801d4ca:	4297      	cmp	r7, r2
 801d4cc:	f240 80e8 	bls.w	801d6a0 <_Alloc+0x37c>
 801d4d0:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 801d4d4:	4297      	cmp	r7, r2
 801d4d6:	f240 80f3 	bls.w	801d6c0 <_Alloc+0x39c>
 801d4da:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 801d4dc:	4297      	cmp	r7, r2
 801d4de:	f240 80ed 	bls.w	801d6bc <_Alloc+0x398>
 801d4e2:	6f36      	ldr	r6, [r6, #112]	; 0x70
 801d4e4:	4296      	cmp	r6, r2
 801d4e6:	f240 80e7 	bls.w	801d6b8 <_Alloc+0x394>
 801d4ea:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801d4ec:	4f52      	ldr	r7, [pc, #328]	; (801d638 <_Alloc+0x314>)
 801d4ee:	4296      	cmp	r6, r2
 801d4f0:	f240 80e0 	bls.w	801d6b4 <_Alloc+0x390>
 801d4f4:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 801d4f6:	4296      	cmp	r6, r2
 801d4f8:	f240 80da 	bls.w	801d6b0 <_Alloc+0x38c>
 801d4fc:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 801d4fe:	42b2      	cmp	r2, r6
 801d500:	f080 80d4 	bcs.w	801d6ac <_Alloc+0x388>
 801d504:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 801d506:	42b2      	cmp	r2, r6
 801d508:	f080 80ce 	bcs.w	801d6a8 <_Alloc+0x384>
 801d50c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 801d50e:	42b2      	cmp	r2, r6
 801d510:	f080 80a2 	bcs.w	801d658 <_Alloc+0x334>
 801d514:	4291      	cmp	r1, r2
 801d516:	bf98      	it	ls
 801d518:	2100      	movls	r1, #0
 801d51a:	f240 809e 	bls.w	801d65a <_Alloc+0x336>
 801d51e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801d520:	1819      	adds	r1, r3, r0
 801d522:	44a0      	add	r8, r4
 801d524:	4290      	cmp	r0, r2
 801d526:	f04f 0400 	mov.w	r4, #0
 801d52a:	f8c8 3004 	str.w	r3, [r8, #4]
 801d52e:	601d      	str	r5, [r3, #0]
 801d530:	6058      	str	r0, [r3, #4]
 801d532:	611b      	str	r3, [r3, #16]
 801d534:	609c      	str	r4, [r3, #8]
 801d536:	f841 0c04 	str.w	r0, [r1, #-4]
 801d53a:	f2c0 809d 	blt.w	801d678 <_Alloc+0x354>
 801d53e:	4628      	mov	r0, r5
 801d540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d544:	4b3d      	ldr	r3, [pc, #244]	; (801d63c <_Alloc+0x318>)
 801d546:	689a      	ldr	r2, [r3, #8]
 801d548:	6858      	ldr	r0, [r3, #4]
 801d54a:	2101      	movs	r1, #1
 801d54c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801d550:	b90a      	cbnz	r2, 801d556 <_Alloc+0x232>
 801d552:	0882      	lsrs	r2, r0, #2
 801d554:	609a      	str	r2, [r3, #8]
 801d556:	6819      	ldr	r1, [r3, #0]
 801d558:	63a1      	str	r1, [r4, #56]	; 0x38
 801d55a:	f1a1 0314 	sub.w	r3, r1, #20
 801d55e:	265a      	movs	r6, #90	; 0x5a
 801d560:	4403      	add	r3, r0
 801d562:	6226      	str	r6, [r4, #32]
 801d564:	f04f 0b10 	mov.w	fp, #16
 801d568:	f04f 0a20 	mov.w	sl, #32
 801d56c:	f04f 0940 	mov.w	r9, #64	; 0x40
 801d570:	f04f 0880 	mov.w	r8, #128	; 0x80
 801d574:	f44f 7c80 	mov.w	ip, #256	; 0x100
 801d578:	f44f 7e00 	mov.w	lr, #512	; 0x200
 801d57c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801d580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d584:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 801d588:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
 801d58c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 801d590:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 801d594:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
 801d598:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 801d59c:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 801d5a0:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 801d5a4:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 801d5a8:	6727      	str	r7, [r4, #112]	; 0x70
 801d5aa:	67a2      	str	r2, [r4, #120]	; 0x78
 801d5ac:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801d5b0:	2202      	movs	r2, #2
 801d5b2:	2601      	movs	r6, #1
 801d5b4:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 801d5b8:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 801d5bc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 801d5c0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 801d5c4:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 801d5c8:	6363      	str	r3, [r4, #52]	; 0x34
 801d5ca:	f8c4 c0a8 	str.w	ip, [r4, #168]	; 0xa8
 801d5ce:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 801d5d2:	6122      	str	r2, [r4, #16]
 801d5d4:	60e0      	str	r0, [r4, #12]
 801d5d6:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
 801d5da:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
 801d5de:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 801d5e2:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
 801d5e6:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 801d5ea:	605e      	str	r6, [r3, #4]
 801d5ec:	6266      	str	r6, [r4, #36]	; 0x24
 801d5ee:	6066      	str	r6, [r4, #4]
 801d5f0:	f7ff fbfc 	bl	801cdec <_AddFreeMemory>
 801d5f4:	f000 f866 	bl	801d6c4 <_EnlargeBlocks>
 801d5f8:	6326      	str	r6, [r4, #48]	; 0x30
 801d5fa:	e69c      	b.n	801d336 <_Alloc+0x12>
 801d5fc:	210f      	movs	r1, #15
 801d5fe:	e713      	b.n	801d428 <_Alloc+0x104>
 801d600:	210e      	movs	r1, #14
 801d602:	e711      	b.n	801d428 <_Alloc+0x104>
 801d604:	210d      	movs	r1, #13
 801d606:	e70f      	b.n	801d428 <_Alloc+0x104>
 801d608:	210b      	movs	r1, #11
 801d60a:	e70d      	b.n	801d428 <_Alloc+0x104>
 801d60c:	210c      	movs	r1, #12
 801d60e:	e70b      	b.n	801d428 <_Alloc+0x104>
 801d610:	2109      	movs	r1, #9
 801d612:	e709      	b.n	801d428 <_Alloc+0x104>
 801d614:	210a      	movs	r1, #10
 801d616:	e707      	b.n	801d428 <_Alloc+0x104>
 801d618:	2107      	movs	r1, #7
 801d61a:	e705      	b.n	801d428 <_Alloc+0x104>
 801d61c:	2108      	movs	r1, #8
 801d61e:	e703      	b.n	801d428 <_Alloc+0x104>
 801d620:	2105      	movs	r1, #5
 801d622:	e701      	b.n	801d428 <_Alloc+0x104>
 801d624:	2106      	movs	r1, #6
 801d626:	e6ff      	b.n	801d428 <_Alloc+0x104>
 801d628:	2104      	movs	r1, #4
 801d62a:	e6fd      	b.n	801d428 <_Alloc+0x104>
 801d62c:	2103      	movs	r1, #3
 801d62e:	e6fb      	b.n	801d428 <_Alloc+0x104>
 801d630:	2101      	movs	r1, #1
 801d632:	e6f9      	b.n	801d428 <_Alloc+0x104>
 801d634:	2102      	movs	r1, #2
 801d636:	e6f7      	b.n	801d428 <_Alloc+0x104>
 801d638:	2002cbdc 	.word	0x2002cbdc
 801d63c:	2002b2e0 	.word	0x2002b2e0
 801d640:	3a01      	subs	r2, #1
 801d642:	632a      	str	r2, [r5, #48]	; 0x30
 801d644:	f000 f83e 	bl	801d6c4 <_EnlargeBlocks>
 801d648:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d64a:	3301      	adds	r3, #1
 801d64c:	632b      	str	r3, [r5, #48]	; 0x30
 801d64e:	2800      	cmp	r0, #0
 801d650:	f47f ae7c 	bne.w	801d34c <_Alloc+0x28>
 801d654:	686b      	ldr	r3, [r5, #4]
 801d656:	e681      	b.n	801d35c <_Alloc+0x38>
 801d658:	2101      	movs	r1, #1
 801d65a:	6826      	ldr	r6, [r4, #0]
 801d65c:	689f      	ldr	r7, [r3, #8]
 801d65e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801d662:	1ab6      	subs	r6, r6, r2
 801d664:	6026      	str	r6, [r4, #0]
 801d666:	b10f      	cbz	r7, 801d66c <_Alloc+0x348>
 801d668:	f8c7 c004 	str.w	ip, [r7, #4]
 801d66c:	f1bc 0f00 	cmp.w	ip, #0
 801d670:	d00c      	beq.n	801d68c <_Alloc+0x368>
 801d672:	f8cc 7000 	str.w	r7, [ip]
 801d676:	e752      	b.n	801d51e <_Alloc+0x1fa>
 801d678:	1a10      	subs	r0, r2, r0
 801d67a:	f7ff fbb7 	bl	801cdec <_AddFreeMemory>
 801d67e:	4628      	mov	r0, r5
 801d680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d684:	210c      	movs	r1, #12
 801d686:	e7e8      	b.n	801d65a <_Alloc+0x336>
 801d688:	210b      	movs	r1, #11
 801d68a:	e7e6      	b.n	801d65a <_Alloc+0x336>
 801d68c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801d690:	644f      	str	r7, [r1, #68]	; 0x44
 801d692:	e744      	b.n	801d51e <_Alloc+0x1fa>
 801d694:	210f      	movs	r1, #15
 801d696:	e7e0      	b.n	801d65a <_Alloc+0x336>
 801d698:	210e      	movs	r1, #14
 801d69a:	e7de      	b.n	801d65a <_Alloc+0x336>
 801d69c:	210d      	movs	r1, #13
 801d69e:	e7dc      	b.n	801d65a <_Alloc+0x336>
 801d6a0:	2109      	movs	r1, #9
 801d6a2:	e7da      	b.n	801d65a <_Alloc+0x336>
 801d6a4:	210a      	movs	r1, #10
 801d6a6:	e7d8      	b.n	801d65a <_Alloc+0x336>
 801d6a8:	2102      	movs	r1, #2
 801d6aa:	e7d6      	b.n	801d65a <_Alloc+0x336>
 801d6ac:	2103      	movs	r1, #3
 801d6ae:	e7d4      	b.n	801d65a <_Alloc+0x336>
 801d6b0:	2104      	movs	r1, #4
 801d6b2:	e7d2      	b.n	801d65a <_Alloc+0x336>
 801d6b4:	2105      	movs	r1, #5
 801d6b6:	e7d0      	b.n	801d65a <_Alloc+0x336>
 801d6b8:	2106      	movs	r1, #6
 801d6ba:	e7ce      	b.n	801d65a <_Alloc+0x336>
 801d6bc:	2107      	movs	r1, #7
 801d6be:	e7cc      	b.n	801d65a <_Alloc+0x336>
 801d6c0:	2108      	movs	r1, #8
 801d6c2:	e7ca      	b.n	801d65a <_Alloc+0x336>

0801d6c4 <_EnlargeBlocks>:
 801d6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6c8:	4c34      	ldr	r4, [pc, #208]	; (801d79c <_EnlargeBlocks+0xd8>)
 801d6ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d6cc:	b973      	cbnz	r3, 801d6ec <_EnlargeBlocks+0x28>
 801d6ce:	4b34      	ldr	r3, [pc, #208]	; (801d7a0 <_EnlargeBlocks+0xdc>)
 801d6d0:	689f      	ldr	r7, [r3, #8]
 801d6d2:	685b      	ldr	r3, [r3, #4]
 801d6d4:	3708      	adds	r7, #8
 801d6d6:	fbb3 f7f7 	udiv	r7, r3, r7
 801d6da:	3702      	adds	r7, #2
 801d6dc:	00f8      	lsls	r0, r7, #3
 801d6de:	f7ff fe21 	bl	801d324 <_Alloc>
 801d6e2:	4606      	mov	r6, r0
 801d6e4:	b960      	cbnz	r0, 801d700 <_EnlargeBlocks+0x3c>
 801d6e6:	2001      	movs	r0, #1
 801d6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6ec:	6923      	ldr	r3, [r4, #16]
 801d6ee:	1d1f      	adds	r7, r3, #4
 801d6f0:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 801d6f4:	00f8      	lsls	r0, r7, #3
 801d6f6:	f7ff fe15 	bl	801d324 <_Alloc>
 801d6fa:	4606      	mov	r6, r0
 801d6fc:	2800      	cmp	r0, #0
 801d6fe:	d0f2      	beq.n	801d6e6 <_EnlargeBlocks+0x22>
 801d700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d702:	6922      	ldr	r2, [r4, #16]
 801d704:	4b27      	ldr	r3, [pc, #156]	; (801d7a4 <_EnlargeBlocks+0xe0>)
 801d706:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d710:	00d2      	lsls	r2, r2, #3
 801d712:	6845      	ldr	r5, [r0, #4]
 801d714:	f105 0908 	add.w	r9, r5, #8
 801d718:	4648      	mov	r0, r9
 801d71a:	4798      	blx	r3
 801d71c:	6920      	ldr	r0, [r4, #16]
 801d71e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801d722:	1e7d      	subs	r5, r7, #1
 801d724:	42a8      	cmp	r0, r5
 801d726:	62e6      	str	r6, [r4, #44]	; 0x2c
 801d728:	d235      	bcs.n	801d796 <_EnlargeBlocks+0xd2>
 801d72a:	eb09 06c0 	add.w	r6, r9, r0, lsl #3
 801d72e:	4603      	mov	r3, r0
 801d730:	2200      	movs	r2, #0
 801d732:	18b1      	adds	r1, r6, r2
 801d734:	3301      	adds	r3, #1
 801d736:	42ab      	cmp	r3, r5
 801d738:	604b      	str	r3, [r1, #4]
 801d73a:	f102 0208 	add.w	r2, r2, #8
 801d73e:	d1f8      	bne.n	801d732 <_EnlargeBlocks+0x6e>
 801d740:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
 801d744:	2600      	movs	r6, #0
 801d746:	606e      	str	r6, [r5, #4]
 801d748:	6863      	ldr	r3, [r4, #4]
 801d74a:	6260      	str	r0, [r4, #36]	; 0x24
 801d74c:	1a1b      	subs	r3, r3, r0
 801d74e:	443b      	add	r3, r7
 801d750:	6127      	str	r7, [r4, #16]
 801d752:	6063      	str	r3, [r4, #4]
 801d754:	4c11      	ldr	r4, [pc, #68]	; (801d79c <_EnlargeBlocks+0xd8>)
 801d756:	f1b8 0f00 	cmp.w	r8, #0
 801d75a:	d019      	beq.n	801d790 <_EnlargeBlocks+0xcc>
 801d75c:	f7fd fdee 	bl	801b33c <GUI_Lock>
 801d760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d762:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 801d766:	442b      	add	r3, r5
 801d768:	6859      	ldr	r1, [r3, #4]
 801d76a:	6848      	ldr	r0, [r1, #4]
 801d76c:	f7ff fb3e 	bl	801cdec <_AddFreeMemory>
 801d770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d772:	6861      	ldr	r1, [r4, #4]
 801d774:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d776:	441d      	add	r5, r3
 801d778:	3101      	adds	r1, #1
 801d77a:	6061      	str	r1, [r4, #4]
 801d77c:	606a      	str	r2, [r5, #4]
 801d77e:	f803 6038 	strb.w	r6, [r3, r8, lsl #3]
 801d782:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 801d786:	f7fd fdcf 	bl	801b328 <GUI_Unlock>
 801d78a:	4630      	mov	r0, r6
 801d78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d790:	4640      	mov	r0, r8
 801d792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d796:	4605      	mov	r5, r0
 801d798:	e7d2      	b.n	801d740 <_EnlargeBlocks+0x7c>
 801d79a:	bf00      	nop
 801d79c:	2002cbdc 	.word	0x2002cbdc
 801d7a0:	2002b2e0 	.word	0x2002b2e0
 801d7a4:	20000254 	.word	0x20000254

0801d7a8 <GUI_ALLOC_FreeFixedBlock>:
 801d7a8:	b128      	cbz	r0, 801d7b6 <GUI_ALLOC_FreeFixedBlock+0xe>
 801d7aa:	4a03      	ldr	r2, [pc, #12]	; (801d7b8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 801d7ac:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801d7ae:	6003      	str	r3, [r0, #0]
 801d7b0:	b103      	cbz	r3, 801d7b4 <GUI_ALLOC_FreeFixedBlock+0xc>
 801d7b2:	6058      	str	r0, [r3, #4]
 801d7b4:	63d0      	str	r0, [r2, #60]	; 0x3c
 801d7b6:	4770      	bx	lr
 801d7b8:	2002cbdc 	.word	0x2002cbdc

0801d7bc <GUI_ALLOC_GetFixedBlock>:
 801d7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c0:	4d90      	ldr	r5, [pc, #576]	; (801da04 <GUI_ALLOC_GetFixedBlock+0x248>)
 801d7c2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 801d7c6:	4604      	mov	r4, r0
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d031      	beq.n	801d830 <GUI_ALLOC_GetFixedBlock+0x74>
 801d7cc:	1ce6      	adds	r6, r4, #3
 801d7ce:	f026 0603 	bic.w	r6, r6, #3
 801d7d2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801d7d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801d7d6:	3604      	adds	r6, #4
 801d7d8:	429e      	cmp	r6, r3
 801d7da:	bf38      	it	cc
 801d7dc:	461e      	movcc	r6, r3
 801d7de:	b162      	cbz	r2, 801d7fa <GUI_ALLOC_GetFixedBlock+0x3e>
 801d7e0:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801d7e4:	429e      	cmp	r6, r3
 801d7e6:	4614      	mov	r4, r2
 801d7e8:	d104      	bne.n	801d7f4 <GUI_ALLOC_GetFixedBlock+0x38>
 801d7ea:	e015      	b.n	801d818 <GUI_ALLOC_GetFixedBlock+0x5c>
 801d7ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d7f0:	429e      	cmp	r6, r3
 801d7f2:	d011      	beq.n	801d818 <GUI_ALLOC_GetFixedBlock+0x5c>
 801d7f4:	6824      	ldr	r4, [r4, #0]
 801d7f6:	2c00      	cmp	r4, #0
 801d7f8:	d1f8      	bne.n	801d7ec <GUI_ALLOC_GetFixedBlock+0x30>
 801d7fa:	68eb      	ldr	r3, [r5, #12]
 801d7fc:	6bac      	ldr	r4, [r5, #56]	; 0x38
 801d7fe:	441c      	add	r4, r3
 801d800:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801d804:	1a61      	subs	r1, r4, r1
 801d806:	680b      	ldr	r3, [r1, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d172      	bne.n	801d8f2 <GUI_ALLOC_GetFixedBlock+0x136>
 801d80c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801d810:	4566      	cmp	r6, ip
 801d812:	dd78      	ble.n	801d906 <GUI_ALLOC_GetFixedBlock+0x14a>
 801d814:	2400      	movs	r4, #0
 801d816:	e008      	b.n	801d82a <GUI_ALLOC_GetFixedBlock+0x6e>
 801d818:	6823      	ldr	r3, [r4, #0]
 801d81a:	b10b      	cbz	r3, 801d820 <GUI_ALLOC_GetFixedBlock+0x64>
 801d81c:	6861      	ldr	r1, [r4, #4]
 801d81e:	6059      	str	r1, [r3, #4]
 801d820:	6861      	ldr	r1, [r4, #4]
 801d822:	b101      	cbz	r1, 801d826 <GUI_ALLOC_GetFixedBlock+0x6a>
 801d824:	600b      	str	r3, [r1, #0]
 801d826:	42a2      	cmp	r2, r4
 801d828:	d05e      	beq.n	801d8e8 <GUI_ALLOC_GetFixedBlock+0x12c>
 801d82a:	4620      	mov	r0, r4
 801d82c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d830:	4b75      	ldr	r3, [pc, #468]	; (801da08 <GUI_ALLOC_GetFixedBlock+0x24c>)
 801d832:	689a      	ldr	r2, [r3, #8]
 801d834:	6858      	ldr	r0, [r3, #4]
 801d836:	2101      	movs	r1, #1
 801d838:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
 801d83c:	b90a      	cbnz	r2, 801d842 <GUI_ALLOC_GetFixedBlock+0x86>
 801d83e:	0882      	lsrs	r2, r0, #2
 801d840:	609a      	str	r2, [r3, #8]
 801d842:	6819      	ldr	r1, [r3, #0]
 801d844:	63a9      	str	r1, [r5, #56]	; 0x38
 801d846:	f1a1 0314 	sub.w	r3, r1, #20
 801d84a:	265a      	movs	r6, #90	; 0x5a
 801d84c:	4403      	add	r3, r0
 801d84e:	622e      	str	r6, [r5, #32]
 801d850:	f04f 0b10 	mov.w	fp, #16
 801d854:	f04f 0a20 	mov.w	sl, #32
 801d858:	f04f 0940 	mov.w	r9, #64	; 0x40
 801d85c:	f04f 0880 	mov.w	r8, #128	; 0x80
 801d860:	f44f 7c80 	mov.w	ip, #256	; 0x100
 801d864:	f44f 7e00 	mov.w	lr, #512	; 0x200
 801d868:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801d86c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d870:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 801d874:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
 801d878:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
 801d87c:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
 801d880:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
 801d884:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
 801d888:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
 801d88c:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 801d890:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 801d894:	672f      	str	r7, [r5, #112]	; 0x70
 801d896:	67aa      	str	r2, [r5, #120]	; 0x78
 801d898:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
 801d89c:	2202      	movs	r2, #2
 801d89e:	2601      	movs	r6, #1
 801d8a0:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 801d8a4:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 801d8a8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 801d8ac:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 801d8b0:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 801d8b4:	636b      	str	r3, [r5, #52]	; 0x34
 801d8b6:	f8c5 c0a8 	str.w	ip, [r5, #168]	; 0xa8
 801d8ba:	f8c5 e0b0 	str.w	lr, [r5, #176]	; 0xb0
 801d8be:	612a      	str	r2, [r5, #16]
 801d8c0:	60e8      	str	r0, [r5, #12]
 801d8c2:	f8c5 b088 	str.w	fp, [r5, #136]	; 0x88
 801d8c6:	f8c5 a090 	str.w	sl, [r5, #144]	; 0x90
 801d8ca:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
 801d8ce:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
 801d8d2:	f8c5 70b8 	str.w	r7, [r5, #184]	; 0xb8
 801d8d6:	605e      	str	r6, [r3, #4]
 801d8d8:	626e      	str	r6, [r5, #36]	; 0x24
 801d8da:	606e      	str	r6, [r5, #4]
 801d8dc:	f7ff fa86 	bl	801cdec <_AddFreeMemory>
 801d8e0:	f7ff fef0 	bl	801d6c4 <_EnlargeBlocks>
 801d8e4:	632e      	str	r6, [r5, #48]	; 0x30
 801d8e6:	e771      	b.n	801d7cc <GUI_ALLOC_GetFixedBlock+0x10>
 801d8e8:	6823      	ldr	r3, [r4, #0]
 801d8ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d8ec:	4620      	mov	r0, r4
 801d8ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8f2:	2000      	movs	r0, #0
 801d8f4:	f7ff fc28 	bl	801d148 <_RemoveHoles>
 801d8f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801d8fc:	1a61      	subs	r1, r4, r1
 801d8fe:	680b      	ldr	r3, [r1, #0]
 801d900:	2b00      	cmp	r3, #0
 801d902:	d187      	bne.n	801d814 <GUI_ALLOC_GetFixedBlock+0x58>
 801d904:	e782      	b.n	801d80c <GUI_ALLOC_GetFixedBlock+0x50>
 801d906:	f8d5 70b8 	ldr.w	r7, [r5, #184]	; 0xb8
 801d90a:	4a3e      	ldr	r2, [pc, #248]	; (801da04 <GUI_ALLOC_GetFixedBlock+0x248>)
 801d90c:	ebc6 000c 	rsb	r0, r6, ip
 801d910:	1d04      	adds	r4, r0, #4
 801d912:	45bc      	cmp	ip, r7
 801d914:	440c      	add	r4, r1
 801d916:	d259      	bcs.n	801d9cc <GUI_ALLOC_GetFixedBlock+0x210>
 801d918:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 801d91c:	45bc      	cmp	ip, r7
 801d91e:	d259      	bcs.n	801d9d4 <GUI_ALLOC_GetFixedBlock+0x218>
 801d920:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 801d924:	45bc      	cmp	ip, r7
 801d926:	d253      	bcs.n	801d9d0 <GUI_ALLOC_GetFixedBlock+0x214>
 801d928:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 801d92c:	45bc      	cmp	ip, r7
 801d92e:	d259      	bcs.n	801d9e4 <GUI_ALLOC_GetFixedBlock+0x228>
 801d930:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 801d934:	45bc      	cmp	ip, r7
 801d936:	d253      	bcs.n	801d9e0 <GUI_ALLOC_GetFixedBlock+0x224>
 801d938:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 801d93c:	45bc      	cmp	ip, r7
 801d93e:	d24d      	bcs.n	801d9dc <GUI_ALLOC_GetFixedBlock+0x220>
 801d940:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 801d944:	45bc      	cmp	ip, r7
 801d946:	d247      	bcs.n	801d9d8 <GUI_ALLOC_GetFixedBlock+0x21c>
 801d948:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 801d94c:	45bc      	cmp	ip, r7
 801d94e:	d257      	bcs.n	801da00 <GUI_ALLOC_GetFixedBlock+0x244>
 801d950:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801d952:	4594      	cmp	ip, r2
 801d954:	d252      	bcs.n	801d9fc <GUI_ALLOC_GetFixedBlock+0x240>
 801d956:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 801d958:	4a2a      	ldr	r2, [pc, #168]	; (801da04 <GUI_ALLOC_GetFixedBlock+0x248>)
 801d95a:	45bc      	cmp	ip, r7
 801d95c:	d24c      	bcs.n	801d9f8 <GUI_ALLOC_GetFixedBlock+0x23c>
 801d95e:	6e97      	ldr	r7, [r2, #104]	; 0x68
 801d960:	45bc      	cmp	ip, r7
 801d962:	d247      	bcs.n	801d9f4 <GUI_ALLOC_GetFixedBlock+0x238>
 801d964:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801d966:	45bc      	cmp	ip, r7
 801d968:	d242      	bcs.n	801d9f0 <GUI_ALLOC_GetFixedBlock+0x234>
 801d96a:	6d97      	ldr	r7, [r2, #88]	; 0x58
 801d96c:	45bc      	cmp	ip, r7
 801d96e:	d23d      	bcs.n	801d9ec <GUI_ALLOC_GetFixedBlock+0x230>
 801d970:	6d17      	ldr	r7, [r2, #80]	; 0x50
 801d972:	45bc      	cmp	ip, r7
 801d974:	d238      	bcs.n	801d9e8 <GUI_ALLOC_GetFixedBlock+0x22c>
 801d976:	6c97      	ldr	r7, [r2, #72]	; 0x48
 801d978:	45bc      	cmp	ip, r7
 801d97a:	d20e      	bcs.n	801d99a <GUI_ALLOC_GetFixedBlock+0x1de>
 801d97c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801d97e:	4594      	cmp	ip, r2
 801d980:	bf28      	it	cs
 801d982:	2200      	movcs	r2, #0
 801d984:	d20a      	bcs.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d986:	68ea      	ldr	r2, [r5, #12]
 801d988:	696b      	ldr	r3, [r5, #20]
 801d98a:	1b92      	subs	r2, r2, r6
 801d98c:	4433      	add	r3, r6
 801d98e:	60ea      	str	r2, [r5, #12]
 801d990:	616b      	str	r3, [r5, #20]
 801d992:	b9a0      	cbnz	r0, 801d9be <GUI_ALLOC_GetFixedBlock+0x202>
 801d994:	f844 6c04 	str.w	r6, [r4, #-4]
 801d998:	e747      	b.n	801d82a <GUI_ALLOC_GetFixedBlock+0x6e>
 801d99a:	2201      	movs	r2, #1
 801d99c:	682b      	ldr	r3, [r5, #0]
 801d99e:	688f      	ldr	r7, [r1, #8]
 801d9a0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 801d9a4:	ebcc 0c03 	rsb	ip, ip, r3
 801d9a8:	f8c5 c000 	str.w	ip, [r5]
 801d9ac:	b10f      	cbz	r7, 801d9b2 <GUI_ALLOC_GetFixedBlock+0x1f6>
 801d9ae:	f8c7 8004 	str.w	r8, [r7, #4]
 801d9b2:	f1b8 0f00 	cmp.w	r8, #0
 801d9b6:	d005      	beq.n	801d9c4 <GUI_ALLOC_GetFixedBlock+0x208>
 801d9b8:	f8c8 7000 	str.w	r7, [r8]
 801d9bc:	e7e3      	b.n	801d986 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801d9be:	f7ff fa15 	bl	801cdec <_AddFreeMemory>
 801d9c2:	e7e7      	b.n	801d994 <GUI_ALLOC_GetFixedBlock+0x1d8>
 801d9c4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801d9c8:	6457      	str	r7, [r2, #68]	; 0x44
 801d9ca:	e7dc      	b.n	801d986 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801d9cc:	220f      	movs	r2, #15
 801d9ce:	e7e5      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9d0:	220d      	movs	r2, #13
 801d9d2:	e7e3      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9d4:	220e      	movs	r2, #14
 801d9d6:	e7e1      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9d8:	2209      	movs	r2, #9
 801d9da:	e7df      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9dc:	220a      	movs	r2, #10
 801d9de:	e7dd      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9e0:	220b      	movs	r2, #11
 801d9e2:	e7db      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9e4:	220c      	movs	r2, #12
 801d9e6:	e7d9      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9e8:	2202      	movs	r2, #2
 801d9ea:	e7d7      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9ec:	2203      	movs	r2, #3
 801d9ee:	e7d5      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9f0:	2204      	movs	r2, #4
 801d9f2:	e7d3      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9f4:	2205      	movs	r2, #5
 801d9f6:	e7d1      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9f8:	2206      	movs	r2, #6
 801d9fa:	e7cf      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801d9fc:	2207      	movs	r2, #7
 801d9fe:	e7cd      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801da00:	2208      	movs	r2, #8
 801da02:	e7cb      	b.n	801d99c <GUI_ALLOC_GetFixedBlock+0x1e0>
 801da04:	2002cbdc 	.word	0x2002cbdc
 801da08:	2002b2e0 	.word	0x2002b2e0

0801da0c <GUI_ALLOC_AllocNoInit>:
 801da0c:	b510      	push	{r4, lr}
 801da0e:	4604      	mov	r4, r0
 801da10:	b900      	cbnz	r0, 801da14 <GUI_ALLOC_AllocNoInit+0x8>
 801da12:	bd10      	pop	{r4, pc}
 801da14:	f7fd fc92 	bl	801b33c <GUI_Lock>
 801da18:	4620      	mov	r0, r4
 801da1a:	f7ff fc83 	bl	801d324 <_Alloc>
 801da1e:	4604      	mov	r4, r0
 801da20:	f7fd fc82 	bl	801b328 <GUI_Unlock>
 801da24:	4620      	mov	r0, r4
 801da26:	bd10      	pop	{r4, pc}

0801da28 <GUI_ALLOC_h2p>:
 801da28:	4b03      	ldr	r3, [pc, #12]	; (801da38 <GUI_ALLOC_h2p+0x10>)
 801da2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801da30:	6840      	ldr	r0, [r0, #4]
 801da32:	3008      	adds	r0, #8
 801da34:	4770      	bx	lr
 801da36:	bf00      	nop
 801da38:	2002cbdc 	.word	0x2002cbdc

0801da3c <GUI_ALLOC_LockH>:
 801da3c:	4a07      	ldr	r2, [pc, #28]	; (801da5c <GUI_ALLOC_LockH+0x20>)
 801da3e:	69d1      	ldr	r1, [r2, #28]
 801da40:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801da42:	3101      	adds	r1, #1
 801da44:	61d1      	str	r1, [r2, #28]
 801da46:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 801da4a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 801da4e:	6852      	ldr	r2, [r2, #4]
 801da50:	3101      	adds	r1, #1
 801da52:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 801da56:	f102 0008 	add.w	r0, r2, #8
 801da5a:	4770      	bx	lr
 801da5c:	2002cbdc 	.word	0x2002cbdc

0801da60 <GUI_ALLOC_UnlockH>:
 801da60:	b430      	push	{r4, r5}
 801da62:	4602      	mov	r2, r0
 801da64:	4b0a      	ldr	r3, [pc, #40]	; (801da90 <GUI_ALLOC_UnlockH+0x30>)
 801da66:	6800      	ldr	r0, [r0, #0]
 801da68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801da6a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 801da6e:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
 801da72:	2c01      	cmp	r4, #1
 801da74:	d903      	bls.n	801da7e <GUI_ALLOC_UnlockH+0x1e>
 801da76:	69dd      	ldr	r5, [r3, #28]
 801da78:	b10d      	cbz	r5, 801da7e <GUI_ALLOC_UnlockH+0x1e>
 801da7a:	3d01      	subs	r5, #1
 801da7c:	61dd      	str	r5, [r3, #28]
 801da7e:	3c01      	subs	r4, #1
 801da80:	f801 4030 	strb.w	r4, [r1, r0, lsl #3]
 801da84:	2300      	movs	r3, #0
 801da86:	4618      	mov	r0, r3
 801da88:	6013      	str	r3, [r2, #0]
 801da8a:	bc30      	pop	{r4, r5}
 801da8c:	4770      	bx	lr
 801da8e:	bf00      	nop
 801da90:	2002cbdc 	.word	0x2002cbdc

0801da94 <GUI_ALLOC_RequestSize>:
 801da94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da98:	4c5c      	ldr	r4, [pc, #368]	; (801dc0c <GUI_ALLOC_RequestSize+0x178>)
 801da9a:	f7fd fc4f 	bl	801b33c <GUI_Lock>
 801da9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d04f      	beq.n	801db46 <GUI_ALLOC_RequestSize+0xb2>
 801daa6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801daaa:	4a58      	ldr	r2, [pc, #352]	; (801dc0c <GUI_ALLOC_RequestSize+0x178>)
 801daac:	bb63      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daae:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 801dab2:	bb4b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dab4:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 801dab8:	bb33      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daba:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 801dabe:	bb1b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dac0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 801dac4:	bb03      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dac6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801daca:	b9eb      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dacc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801dad0:	b9d3      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dad2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801dad6:	b9bb      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dad8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 801dada:	b9ab      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dadc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 801dade:	b99b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dae0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dae2:	b98b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dae4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801dae6:	b97b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801dae8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801daea:	b96b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 801daee:	b95b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daf0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801daf2:	b94b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daf4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801daf6:	b93b      	cbnz	r3, 801db08 <GUI_ALLOC_RequestSize+0x74>
 801daf8:	6a24      	ldr	r4, [r4, #32]
 801dafa:	fb04 f403 	mul.w	r4, r4, r3
 801dafe:	f7fd fc13 	bl	801b328 <GUI_Unlock>
 801db02:	4620      	mov	r0, r4
 801db04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db08:	689b      	ldr	r3, [r3, #8]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d0f4      	beq.n	801daf8 <GUI_ALLOC_RequestSize+0x64>
 801db0e:	2100      	movs	r1, #0
 801db10:	e001      	b.n	801db16 <GUI_ALLOC_RequestSize+0x82>
 801db12:	689b      	ldr	r3, [r3, #8]
 801db14:	b13b      	cbz	r3, 801db26 <GUI_ALLOC_RequestSize+0x92>
 801db16:	685a      	ldr	r2, [r3, #4]
 801db18:	689b      	ldr	r3, [r3, #8]
 801db1a:	4291      	cmp	r1, r2
 801db1c:	bf34      	ite	cc
 801db1e:	4611      	movcc	r1, r2
 801db20:	460a      	movcs	r2, r1
 801db22:	2b00      	cmp	r3, #0
 801db24:	d1f5      	bne.n	801db12 <GUI_ALLOC_RequestSize+0x7e>
 801db26:	3a0c      	subs	r2, #12
 801db28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 801db2c:	d867      	bhi.n	801dbfe <GUI_ALLOC_RequestSize+0x16a>
 801db2e:	6a24      	ldr	r4, [r4, #32]
 801db30:	4b37      	ldr	r3, [pc, #220]	; (801dc10 <GUI_ALLOC_RequestSize+0x17c>)
 801db32:	fb04 f202 	mul.w	r2, r4, r2
 801db36:	fba3 1402 	umull	r1, r4, r3, r2
 801db3a:	0964      	lsrs	r4, r4, #5
 801db3c:	f7fd fbf4 	bl	801b328 <GUI_Unlock>
 801db40:	4620      	mov	r0, r4
 801db42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db46:	4b33      	ldr	r3, [pc, #204]	; (801dc14 <GUI_ALLOC_RequestSize+0x180>)
 801db48:	689a      	ldr	r2, [r3, #8]
 801db4a:	6858      	ldr	r0, [r3, #4]
 801db4c:	2101      	movs	r1, #1
 801db4e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801db52:	b90a      	cbnz	r2, 801db58 <GUI_ALLOC_RequestSize+0xc4>
 801db54:	0882      	lsrs	r2, r0, #2
 801db56:	609a      	str	r2, [r3, #8]
 801db58:	6819      	ldr	r1, [r3, #0]
 801db5a:	63a1      	str	r1, [r4, #56]	; 0x38
 801db5c:	f1a1 0314 	sub.w	r3, r1, #20
 801db60:	4403      	add	r3, r0
 801db62:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
 801db66:	f04f 0910 	mov.w	r9, #16
 801db6a:	f04f 0820 	mov.w	r8, #32
 801db6e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 801db72:	f04f 0e80 	mov.w	lr, #128	; 0x80
 801db76:	f44f 7780 	mov.w	r7, #256	; 0x100
 801db7a:	f44f 7600 	mov.w	r6, #512	; 0x200
 801db7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801db82:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801db86:	f8c4 a020 	str.w	sl, [r4, #32]
 801db8a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 801db8e:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 801db92:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
 801db96:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 801db9a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801db9e:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
 801dba2:	6627      	str	r7, [r4, #96]	; 0x60
 801dba4:	66a6      	str	r6, [r4, #104]	; 0x68
 801dba6:	6722      	str	r2, [r4, #112]	; 0x70
 801dba8:	67a5      	str	r5, [r4, #120]	; 0x78
 801dbaa:	2202      	movs	r2, #2
 801dbac:	2501      	movs	r5, #1
 801dbae:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 801dbb2:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 801dbb6:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 801dbba:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 801dbbe:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 801dbc2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 801dbc6:	6363      	str	r3, [r4, #52]	; 0x34
 801dbc8:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
 801dbcc:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
 801dbd0:	6122      	str	r2, [r4, #16]
 801dbd2:	60e0      	str	r0, [r4, #12]
 801dbd4:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 801dbd8:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 801dbdc:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
 801dbe0:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
 801dbe4:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 801dbe8:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801dbec:	605d      	str	r5, [r3, #4]
 801dbee:	6265      	str	r5, [r4, #36]	; 0x24
 801dbf0:	6065      	str	r5, [r4, #4]
 801dbf2:	f7ff f8fb 	bl	801cdec <_AddFreeMemory>
 801dbf6:	f7ff fd65 	bl	801d6c4 <_EnlargeBlocks>
 801dbfa:	6325      	str	r5, [r4, #48]	; 0x30
 801dbfc:	e753      	b.n	801daa6 <GUI_ALLOC_RequestSize+0x12>
 801dbfe:	4904      	ldr	r1, [pc, #16]	; (801dc10 <GUI_ALLOC_RequestSize+0x17c>)
 801dc00:	17d3      	asrs	r3, r2, #31
 801dc02:	fb81 0202 	smull	r0, r2, r1, r2
 801dc06:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801dc0a:	e775      	b.n	801daf8 <GUI_ALLOC_RequestSize+0x64>
 801dc0c:	2002cbdc 	.word	0x2002cbdc
 801dc10:	51eb851f 	.word	0x51eb851f
 801dc14:	2002b2e0 	.word	0x2002b2e0

0801dc18 <GUI_ALLOC_Lock>:
 801dc18:	4b02      	ldr	r3, [pc, #8]	; (801dc24 <GUI_ALLOC_Lock+0xc>)
 801dc1a:	699a      	ldr	r2, [r3, #24]
 801dc1c:	3201      	adds	r2, #1
 801dc1e:	619a      	str	r2, [r3, #24]
 801dc20:	4770      	bx	lr
 801dc22:	bf00      	nop
 801dc24:	2002cbdc 	.word	0x2002cbdc

0801dc28 <GUI_ALLOC_Unlock>:
 801dc28:	4b02      	ldr	r3, [pc, #8]	; (801dc34 <GUI_ALLOC_Unlock+0xc>)
 801dc2a:	699a      	ldr	r2, [r3, #24]
 801dc2c:	3a01      	subs	r2, #1
 801dc2e:	619a      	str	r2, [r3, #24]
 801dc30:	4770      	bx	lr
 801dc32:	bf00      	nop
 801dc34:	2002cbdc 	.word	0x2002cbdc

0801dc38 <GUI_ALLOC_AssignMemory>:
 801dc38:	4b02      	ldr	r3, [pc, #8]	; (801dc44 <GUI_ALLOC_AssignMemory+0xc>)
 801dc3a:	f021 0103 	bic.w	r1, r1, #3
 801dc3e:	e883 0003 	stmia.w	r3, {r0, r1}
 801dc42:	4770      	bx	lr
 801dc44:	2002b2e0 	.word	0x2002b2e0

0801dc48 <GUI_ALLOC_GetSize>:
 801dc48:	b130      	cbz	r0, 801dc58 <GUI_ALLOC_GetSize+0x10>
 801dc4a:	4b04      	ldr	r3, [pc, #16]	; (801dc5c <GUI_ALLOC_GetSize+0x14>)
 801dc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801dc52:	6843      	ldr	r3, [r0, #4]
 801dc54:	6858      	ldr	r0, [r3, #4]
 801dc56:	380c      	subs	r0, #12
 801dc58:	4770      	bx	lr
 801dc5a:	bf00      	nop
 801dc5c:	2002cbdc 	.word	0x2002cbdc

0801dc60 <GUI_ALLOC_Free>:
 801dc60:	b570      	push	{r4, r5, r6, lr}
 801dc62:	4604      	mov	r4, r0
 801dc64:	b900      	cbnz	r0, 801dc68 <GUI_ALLOC_Free+0x8>
 801dc66:	bd70      	pop	{r4, r5, r6, pc}
 801dc68:	4d0c      	ldr	r5, [pc, #48]	; (801dc9c <GUI_ALLOC_Free+0x3c>)
 801dc6a:	f7fd fb67 	bl	801b33c <GUI_Lock>
 801dc6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801dc70:	00e6      	lsls	r6, r4, #3
 801dc72:	4433      	add	r3, r6
 801dc74:	6859      	ldr	r1, [r3, #4]
 801dc76:	6848      	ldr	r0, [r1, #4]
 801dc78:	f7ff f8b8 	bl	801cdec <_AddFreeMemory>
 801dc7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801dc7e:	6869      	ldr	r1, [r5, #4]
 801dc80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801dc82:	441e      	add	r6, r3
 801dc84:	3101      	adds	r1, #1
 801dc86:	2000      	movs	r0, #0
 801dc88:	6069      	str	r1, [r5, #4]
 801dc8a:	6072      	str	r2, [r6, #4]
 801dc8c:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 801dc90:	626c      	str	r4, [r5, #36]	; 0x24
 801dc92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc96:	f7fd bb47 	b.w	801b328 <GUI_Unlock>
 801dc9a:	bf00      	nop
 801dc9c:	2002cbdc 	.word	0x2002cbdc

0801dca0 <GUI_ALLOC_FreePtr>:
 801dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca2:	4605      	mov	r5, r0
 801dca4:	f7fd fb4a 	bl	801b33c <GUI_Lock>
 801dca8:	682c      	ldr	r4, [r5, #0]
 801dcaa:	b1b4      	cbz	r4, 801dcda <GUI_ALLOC_FreePtr+0x3a>
 801dcac:	4e0e      	ldr	r6, [pc, #56]	; (801dce8 <GUI_ALLOC_FreePtr+0x48>)
 801dcae:	f7fd fb45 	bl	801b33c <GUI_Lock>
 801dcb2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801dcb4:	00e7      	lsls	r7, r4, #3
 801dcb6:	443b      	add	r3, r7
 801dcb8:	6859      	ldr	r1, [r3, #4]
 801dcba:	6848      	ldr	r0, [r1, #4]
 801dcbc:	f7ff f896 	bl	801cdec <_AddFreeMemory>
 801dcc0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801dcc2:	6871      	ldr	r1, [r6, #4]
 801dcc4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801dcc6:	441f      	add	r7, r3
 801dcc8:	3101      	adds	r1, #1
 801dcca:	2000      	movs	r0, #0
 801dccc:	6071      	str	r1, [r6, #4]
 801dcce:	607a      	str	r2, [r7, #4]
 801dcd0:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 801dcd4:	6274      	str	r4, [r6, #36]	; 0x24
 801dcd6:	f7fd fb27 	bl	801b328 <GUI_Unlock>
 801dcda:	2300      	movs	r3, #0
 801dcdc:	602b      	str	r3, [r5, #0]
 801dcde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dce2:	f7fd bb21 	b.w	801b328 <GUI_Unlock>
 801dce6:	bf00      	nop
 801dce8:	2002cbdc 	.word	0x2002cbdc

0801dcec <GUI_ALLOC_FreePtrArray>:
 801dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcf0:	f1b1 0a00 	subs.w	sl, r1, #0
 801dcf4:	dd26      	ble.n	801dd44 <GUI_ALLOC_FreePtrArray+0x58>
 801dcf6:	2400      	movs	r4, #0
 801dcf8:	4f13      	ldr	r7, [pc, #76]	; (801dd48 <GUI_ALLOC_FreePtrArray+0x5c>)
 801dcfa:	4606      	mov	r6, r0
 801dcfc:	46a0      	mov	r8, r4
 801dcfe:	f7fd fb1d 	bl	801b33c <GUI_Lock>
 801dd02:	f856 5b04 	ldr.w	r5, [r6], #4
 801dd06:	3401      	adds	r4, #1
 801dd08:	b1b5      	cbz	r5, 801dd38 <GUI_ALLOC_FreePtrArray+0x4c>
 801dd0a:	f7fd fb17 	bl	801b33c <GUI_Lock>
 801dd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd10:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 801dd14:	444b      	add	r3, r9
 801dd16:	6859      	ldr	r1, [r3, #4]
 801dd18:	6848      	ldr	r0, [r1, #4]
 801dd1a:	f7ff f867 	bl	801cdec <_AddFreeMemory>
 801dd1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dd20:	687a      	ldr	r2, [r7, #4]
 801dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd24:	4489      	add	r9, r1
 801dd26:	3201      	adds	r2, #1
 801dd28:	607a      	str	r2, [r7, #4]
 801dd2a:	f8c9 3004 	str.w	r3, [r9, #4]
 801dd2e:	f801 8035 	strb.w	r8, [r1, r5, lsl #3]
 801dd32:	627d      	str	r5, [r7, #36]	; 0x24
 801dd34:	f7fd faf8 	bl	801b328 <GUI_Unlock>
 801dd38:	f846 8c04 	str.w	r8, [r6, #-4]
 801dd3c:	f7fd faf4 	bl	801b328 <GUI_Unlock>
 801dd40:	4554      	cmp	r4, sl
 801dd42:	d1dc      	bne.n	801dcfe <GUI_ALLOC_FreePtrArray+0x12>
 801dd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd48:	2002cbdc 	.word	0x2002cbdc

0801dd4c <GUI_ALLOC_AllocZero>:
 801dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd4e:	4604      	mov	r4, r0
 801dd50:	f7fd faf4 	bl	801b33c <GUI_Lock>
 801dd54:	b91c      	cbnz	r4, 801dd5e <GUI_ALLOC_AllocZero+0x12>
 801dd56:	f7fd fae7 	bl	801b328 <GUI_Unlock>
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd5e:	f7fd faed 	bl	801b33c <GUI_Lock>
 801dd62:	4620      	mov	r0, r4
 801dd64:	f7ff fade 	bl	801d324 <_Alloc>
 801dd68:	4606      	mov	r6, r0
 801dd6a:	f7fd fadd 	bl	801b328 <GUI_Unlock>
 801dd6e:	b32e      	cbz	r6, 801ddbc <GUI_ALLOC_AllocZero+0x70>
 801dd70:	4d13      	ldr	r5, [pc, #76]	; (801ddc0 <GUI_ALLOC_AllocZero+0x74>)
 801dd72:	4914      	ldr	r1, [pc, #80]	; (801ddc4 <GUI_ALLOC_AllocZero+0x78>)
 801dd74:	69ea      	ldr	r2, [r5, #28]
 801dd76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801dd78:	3201      	adds	r2, #1
 801dd7a:	61ea      	str	r2, [r5, #28]
 801dd7c:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 801dd80:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
 801dd84:	3001      	adds	r0, #1
 801dd86:	6857      	ldr	r7, [r2, #4]
 801dd88:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 801dd8c:	4622      	mov	r2, r4
 801dd8e:	680b      	ldr	r3, [r1, #0]
 801dd90:	f107 0008 	add.w	r0, r7, #8
 801dd94:	2100      	movs	r1, #0
 801dd96:	4798      	blx	r3
 801dd98:	683a      	ldr	r2, [r7, #0]
 801dd9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801dd9c:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 801dda0:	2901      	cmp	r1, #1
 801dda2:	d903      	bls.n	801ddac <GUI_ALLOC_AllocZero+0x60>
 801dda4:	69e8      	ldr	r0, [r5, #28]
 801dda6:	b108      	cbz	r0, 801ddac <GUI_ALLOC_AllocZero+0x60>
 801dda8:	3801      	subs	r0, #1
 801ddaa:	61e8      	str	r0, [r5, #28]
 801ddac:	3901      	subs	r1, #1
 801ddae:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 801ddb2:	4634      	mov	r4, r6
 801ddb4:	f7fd fab8 	bl	801b328 <GUI_Unlock>
 801ddb8:	4620      	mov	r0, r4
 801ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddbc:	4634      	mov	r4, r6
 801ddbe:	e7ca      	b.n	801dd56 <GUI_ALLOC_AllocZero+0xa>
 801ddc0:	2002cbdc 	.word	0x2002cbdc
 801ddc4:	20000250 	.word	0x20000250

0801ddc8 <GUI_ALLOC_Realloc>:
 801ddc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddcc:	460d      	mov	r5, r1
 801ddce:	4606      	mov	r6, r0
 801ddd0:	b911      	cbnz	r1, 801ddd8 <GUI_ALLOC_Realloc+0x10>
 801ddd2:	4608      	mov	r0, r1
 801ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddd8:	f7fd fab0 	bl	801b33c <GUI_Lock>
 801dddc:	4628      	mov	r0, r5
 801ddde:	f7ff faa1 	bl	801d324 <_Alloc>
 801dde2:	4607      	mov	r7, r0
 801dde4:	f7fd faa0 	bl	801b328 <GUI_Unlock>
 801dde8:	2f00      	cmp	r7, #0
 801ddea:	d062      	beq.n	801deb2 <GUI_ALLOC_Realloc+0xea>
 801ddec:	2e00      	cmp	r6, #0
 801ddee:	d060      	beq.n	801deb2 <GUI_ALLOC_Realloc+0xea>
 801ddf0:	4c31      	ldr	r4, [pc, #196]	; (801deb8 <GUI_ALLOC_Realloc+0xf0>)
 801ddf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ddf4:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 801ddf8:	4443      	add	r3, r8
 801ddfa:	685b      	ldr	r3, [r3, #4]
 801ddfc:	685b      	ldr	r3, [r3, #4]
 801ddfe:	f1a3 0a0c 	sub.w	sl, r3, #12
 801de02:	f7fd fa9b 	bl	801b33c <GUI_Lock>
 801de06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de08:	69e1      	ldr	r1, [r4, #28]
 801de0a:	4a2c      	ldr	r2, [pc, #176]	; (801debc <GUI_ALLOC_Realloc+0xf4>)
 801de0c:	4555      	cmp	r5, sl
 801de0e:	bfb8      	it	lt
 801de10:	46aa      	movlt	sl, r5
 801de12:	f813 5037 	ldrb.w	r5, [r3, r7, lsl #3]
 801de16:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 801de1a:	3501      	adds	r5, #1
 801de1c:	f803 5037 	strb.w	r5, [r3, r7, lsl #3]
 801de20:	3102      	adds	r1, #2
 801de22:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801de26:	61e1      	str	r1, [r4, #28]
 801de28:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 801de2c:	eb03 0108 	add.w	r1, r3, r8
 801de30:	3001      	adds	r0, #1
 801de32:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 801de36:	684d      	ldr	r5, [r1, #4]
 801de38:	6813      	ldr	r3, [r2, #0]
 801de3a:	f105 0108 	add.w	r1, r5, #8
 801de3e:	4652      	mov	r2, sl
 801de40:	f109 0008 	add.w	r0, r9, #8
 801de44:	4798      	blx	r3
 801de46:	f8d9 1000 	ldr.w	r1, [r9]
 801de4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de4c:	f813 0031 	ldrb.w	r0, [r3, r1, lsl #3]
 801de50:	2801      	cmp	r0, #1
 801de52:	d903      	bls.n	801de5c <GUI_ALLOC_Realloc+0x94>
 801de54:	69e2      	ldr	r2, [r4, #28]
 801de56:	b10a      	cbz	r2, 801de5c <GUI_ALLOC_Realloc+0x94>
 801de58:	3a01      	subs	r2, #1
 801de5a:	61e2      	str	r2, [r4, #28]
 801de5c:	1e42      	subs	r2, r0, #1
 801de5e:	f803 2031 	strb.w	r2, [r3, r1, lsl #3]
 801de62:	682a      	ldr	r2, [r5, #0]
 801de64:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 801de68:	2901      	cmp	r1, #1
 801de6a:	d904      	bls.n	801de76 <GUI_ALLOC_Realloc+0xae>
 801de6c:	69e0      	ldr	r0, [r4, #28]
 801de6e:	4d12      	ldr	r5, [pc, #72]	; (801deb8 <GUI_ALLOC_Realloc+0xf0>)
 801de70:	b108      	cbz	r0, 801de76 <GUI_ALLOC_Realloc+0xae>
 801de72:	3801      	subs	r0, #1
 801de74:	61e8      	str	r0, [r5, #28]
 801de76:	3901      	subs	r1, #1
 801de78:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 801de7c:	f7fd fa5e 	bl	801b33c <GUI_Lock>
 801de80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de82:	4443      	add	r3, r8
 801de84:	6859      	ldr	r1, [r3, #4]
 801de86:	6848      	ldr	r0, [r1, #4]
 801de88:	f7fe ffb0 	bl	801cdec <_AddFreeMemory>
 801de8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de8e:	6861      	ldr	r1, [r4, #4]
 801de90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801de92:	4498      	add	r8, r3
 801de94:	3101      	adds	r1, #1
 801de96:	2000      	movs	r0, #0
 801de98:	6061      	str	r1, [r4, #4]
 801de9a:	f8c8 2004 	str.w	r2, [r8, #4]
 801de9e:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 801dea2:	6266      	str	r6, [r4, #36]	; 0x24
 801dea4:	f7fd fa40 	bl	801b328 <GUI_Unlock>
 801dea8:	f7fd fa3e 	bl	801b328 <GUI_Unlock>
 801deac:	4638      	mov	r0, r7
 801deae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deb2:	4638      	mov	r0, r7
 801deb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deb8:	2002cbdc 	.word	0x2002cbdc
 801debc:	20000254 	.word	0x20000254

0801dec0 <GUI_DrawRect>:
 801dec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dec4:	b082      	sub	sp, #8
 801dec6:	4604      	mov	r4, r0
 801dec8:	4689      	mov	r9, r1
 801deca:	4692      	mov	sl, r2
 801decc:	4698      	mov	r8, r3
 801dece:	f7fd fa35 	bl	801b33c <GUI_Lock>
 801ded2:	4b1e      	ldr	r3, [pc, #120]	; (801df4c <GUI_DrawRect+0x8c>)
 801ded4:	681f      	ldr	r7, [r3, #0]
 801ded6:	7e3e      	ldrb	r6, [r7, #24]
 801ded8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801deda:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 801dedc:	3e01      	subs	r6, #1
 801dede:	b2b6      	uxth	r6, r6
 801dee0:	442c      	add	r4, r5
 801dee2:	44b9      	add	r9, r7
 801dee4:	4455      	add	r5, sl
 801dee6:	44b8      	add	r8, r7
 801dee8:	1ba1      	subs	r1, r4, r6
 801deea:	1972      	adds	r2, r6, r5
 801deec:	ebc6 0309 	rsb	r3, r6, r9
 801def0:	4668      	mov	r0, sp
 801def2:	4446      	add	r6, r8
 801def4:	f8ad 1000 	strh.w	r1, [sp]
 801def8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801defc:	f8ad 3002 	strh.w	r3, [sp, #2]
 801df00:	f8ad 6006 	strh.w	r6, [sp, #6]
 801df04:	f7f8 fcfa 	bl	80168fc <WM__InitIVRSearch>
 801df08:	b1d8      	cbz	r0, 801df42 <GUI_DrawRect+0x82>
 801df0a:	f109 0701 	add.w	r7, r9, #1
 801df0e:	f108 36ff 	add.w	r6, r8, #4294967295
 801df12:	4620      	mov	r0, r4
 801df14:	4649      	mov	r1, r9
 801df16:	462a      	mov	r2, r5
 801df18:	f7fb fd8a 	bl	8019a30 <LCD_DrawHLine>
 801df1c:	4620      	mov	r0, r4
 801df1e:	4641      	mov	r1, r8
 801df20:	462a      	mov	r2, r5
 801df22:	f7fb fd85 	bl	8019a30 <LCD_DrawHLine>
 801df26:	4620      	mov	r0, r4
 801df28:	4639      	mov	r1, r7
 801df2a:	4632      	mov	r2, r6
 801df2c:	f7fb fda6 	bl	8019a7c <LCD_DrawVLine>
 801df30:	4628      	mov	r0, r5
 801df32:	4639      	mov	r1, r7
 801df34:	4632      	mov	r2, r6
 801df36:	f7fb fda1 	bl	8019a7c <LCD_DrawVLine>
 801df3a:	f7f8 fbb9 	bl	80166b0 <WM__GetNextIVR>
 801df3e:	2800      	cmp	r0, #0
 801df40:	d1e7      	bne.n	801df12 <GUI_DrawRect+0x52>
 801df42:	f7fd f9f1 	bl	801b328 <GUI_Unlock>
 801df46:	b002      	add	sp, #8
 801df48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df4c:	2000027c 	.word	0x2000027c

0801df50 <LCD_Index2Color_M888>:
 801df50:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801df54:	4770      	bx	lr
 801df56:	bf00      	nop

0801df58 <LCD_Index2Color_M8888I>:
 801df58:	4770      	bx	lr
 801df5a:	bf00      	nop

0801df5c <_Index2Color_M8888>:
 801df5c:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 801df60:	4770      	bx	lr
 801df62:	bf00      	nop

0801df64 <_Color2Index_M8888>:
 801df64:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 801df68:	4770      	bx	lr
 801df6a:	bf00      	nop

0801df6c <_GetIndexMask_M8888>:
 801df6c:	f04f 30ff 	mov.w	r0, #4294967295
 801df70:	4770      	bx	lr
 801df72:	bf00      	nop

0801df74 <_Color2IndexBulk>:
 801df74:	b410      	push	{r4}
 801df76:	f850 4b04 	ldr.w	r4, [r0], #4
 801df7a:	3a01      	subs	r2, #1
 801df7c:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801df80:	600c      	str	r4, [r1, #0]
 801df82:	4419      	add	r1, r3
 801df84:	d1f7      	bne.n	801df76 <_Color2IndexBulk+0x2>
 801df86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df8a:	4770      	bx	lr

0801df8c <_Index2ColorBulk>:
 801df8c:	b410      	push	{r4}
 801df8e:	6804      	ldr	r4, [r0, #0]
 801df90:	3a01      	subs	r2, #1
 801df92:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801df96:	f841 4b04 	str.w	r4, [r1], #4
 801df9a:	4418      	add	r0, r3
 801df9c:	d1f7      	bne.n	801df8e <_Index2ColorBulk+0x2>
 801df9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfa2:	4770      	bx	lr

0801dfa4 <_Color2Index_M888>:
 801dfa4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801dfa8:	4770      	bx	lr
 801dfaa:	bf00      	nop

0801dfac <_GetIndexMask_M888>:
 801dfac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801dfb0:	4770      	bx	lr
 801dfb2:	bf00      	nop

0801dfb4 <_Color2IndexBulk>:
 801dfb4:	b410      	push	{r4}
 801dfb6:	f850 4b04 	ldr.w	r4, [r0], #4
 801dfba:	3a01      	subs	r2, #1
 801dfbc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801dfc0:	600c      	str	r4, [r1, #0]
 801dfc2:	4419      	add	r1, r3
 801dfc4:	d1f7      	bne.n	801dfb6 <_Color2IndexBulk+0x2>
 801dfc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfca:	4770      	bx	lr

0801dfcc <_Index2ColorBulk>:
 801dfcc:	b410      	push	{r4}
 801dfce:	6804      	ldr	r4, [r0, #0]
 801dfd0:	3a01      	subs	r2, #1
 801dfd2:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801dfd6:	f841 4b04 	str.w	r4, [r1], #4
 801dfda:	4418      	add	r0, r3
 801dfdc:	d1f7      	bne.n	801dfce <_Index2ColorBulk+0x2>
 801dfde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfe2:	4770      	bx	lr

0801dfe4 <GUICC_M888_SetCustColorConv>:
 801dfe4:	4770      	bx	lr
 801dfe6:	bf00      	nop

0801dfe8 <LCD_Index2Color_M565>:
 801dfe8:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 801dfec:	4b09      	ldr	r3, [pc, #36]	; (801e014 <LCD_Index2Color_M565+0x2c>)
 801dfee:	b410      	push	{r4}
 801dff0:	5c99      	ldrb	r1, [r3, r2]
 801dff2:	4c09      	ldr	r4, [pc, #36]	; (801e018 <LCD_Index2Color_M565+0x30>)
 801dff4:	f3c0 1245 	ubfx	r2, r0, #5, #6
 801dff8:	f000 001f 	and.w	r0, r0, #31
 801dffc:	5ca2      	ldrb	r2, [r4, r2]
 801dffe:	5c1b      	ldrb	r3, [r3, r0]
 801e000:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e004:	0408      	lsls	r0, r1, #16
 801e006:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 801e00a:	4418      	add	r0, r3
 801e00c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e010:	4770      	bx	lr
 801e012:	bf00      	nop
 801e014:	0802a950 	.word	0x0802a950
 801e018:	0802a970 	.word	0x0802a970

0801e01c <_Color2Index_M565>:
 801e01c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801e020:	4b07      	ldr	r3, [pc, #28]	; (801e040 <_Color2Index_M565+0x24>)
 801e022:	b410      	push	{r4}
 801e024:	5c99      	ldrb	r1, [r3, r2]
 801e026:	4c07      	ldr	r4, [pc, #28]	; (801e044 <_Color2Index_M565+0x28>)
 801e028:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801e02c:	b2c0      	uxtb	r0, r0
 801e02e:	5ca2      	ldrb	r2, [r4, r2]
 801e030:	5c1b      	ldrb	r3, [r3, r0]
 801e032:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e036:	02c8      	lsls	r0, r1, #11
 801e038:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801e03c:	4418      	add	r0, r3
 801e03e:	4770      	bx	lr
 801e040:	0802a850 	.word	0x0802a850
 801e044:	0802a9b0 	.word	0x0802a9b0

0801e048 <_GetIndexMask_M565>:
 801e048:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e04c:	4770      	bx	lr
 801e04e:	bf00      	nop

0801e050 <_Color2IndexBulk>:
 801e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e054:	4c10      	ldr	r4, [pc, #64]	; (801e098 <_Color2IndexBulk+0x48>)
 801e056:	6824      	ldr	r4, [r4, #0]
 801e058:	4607      	mov	r7, r0
 801e05a:	460d      	mov	r5, r1
 801e05c:	4616      	mov	r6, r2
 801e05e:	469c      	mov	ip, r3
 801e060:	b114      	cbz	r4, 801e068 <_Color2IndexBulk+0x18>
 801e062:	47a0      	blx	r4
 801e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e068:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801e0a0 <_Color2IndexBulk+0x50>
 801e06c:	4a0b      	ldr	r2, [pc, #44]	; (801e09c <_Color2IndexBulk+0x4c>)
 801e06e:	f857 4b04 	ldr.w	r4, [r7], #4
 801e072:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801e076:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801e07a:	5c51      	ldrb	r1, [r2, r1]
 801e07c:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e080:	b2e4      	uxtb	r4, r4
 801e082:	02c9      	lsls	r1, r1, #11
 801e084:	5d10      	ldrb	r0, [r2, r4]
 801e086:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 801e08a:	4401      	add	r1, r0
 801e08c:	3e01      	subs	r6, #1
 801e08e:	8029      	strh	r1, [r5, #0]
 801e090:	4465      	add	r5, ip
 801e092:	d1ec      	bne.n	801e06e <_Color2IndexBulk+0x1e>
 801e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e098:	2002b2f0 	.word	0x2002b2f0
 801e09c:	0802a850 	.word	0x0802a850
 801e0a0:	0802a9b0 	.word	0x0802a9b0

0801e0a4 <_Index2ColorBulk>:
 801e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0a8:	4c16      	ldr	r4, [pc, #88]	; (801e104 <_Index2ColorBulk+0x60>)
 801e0aa:	6824      	ldr	r4, [r4, #0]
 801e0ac:	461e      	mov	r6, r3
 801e0ae:	b114      	cbz	r4, 801e0b6 <_Index2ColorBulk+0x12>
 801e0b0:	47a0      	blx	r4
 801e0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0b6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 801e0ba:	3b01      	subs	r3, #1
 801e0bc:	3a01      	subs	r2, #1
 801e0be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e0c2:	4d11      	ldr	r5, [pc, #68]	; (801e108 <_Index2ColorBulk+0x64>)
 801e0c4:	f8df c044 	ldr.w	ip, [pc, #68]	; 801e10c <_Index2ColorBulk+0x68>
 801e0c8:	fb06 0002 	mla	r0, r6, r2, r0
 801e0cc:	4273      	negs	r3, r6
 801e0ce:	e000      	b.n	801e0d2 <_Index2ColorBulk+0x2e>
 801e0d0:	3a01      	subs	r2, #1
 801e0d2:	8804      	ldrh	r4, [r0, #0]
 801e0d4:	f004 071f 	and.w	r7, r4, #31
 801e0d8:	ea4f 28d4 	mov.w	r8, r4, lsr #11
 801e0dc:	f3c4 1645 	ubfx	r6, r4, #5, #6
 801e0e0:	5def      	ldrb	r7, [r5, r7]
 801e0e2:	f815 4008 	ldrb.w	r4, [r5, r8]
 801e0e6:	f81c 6006 	ldrb.w	r6, [ip, r6]
 801e0ea:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 801e0ee:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 801e0f2:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801e0f6:	4418      	add	r0, r3
 801e0f8:	f841 4904 	str.w	r4, [r1], #-4
 801e0fc:	2a00      	cmp	r2, #0
 801e0fe:	d1e7      	bne.n	801e0d0 <_Index2ColorBulk+0x2c>
 801e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e104:	2002b2ec 	.word	0x2002b2ec
 801e108:	0802a950 	.word	0x0802a950
 801e10c:	0802a970 	.word	0x0802a970

0801e110 <GUICC_M565_SetCustColorConv>:
 801e110:	4a02      	ldr	r2, [pc, #8]	; (801e11c <GUICC_M565_SetCustColorConv+0xc>)
 801e112:	4b03      	ldr	r3, [pc, #12]	; (801e120 <GUICC_M565_SetCustColorConv+0x10>)
 801e114:	6010      	str	r0, [r2, #0]
 801e116:	6019      	str	r1, [r3, #0]
 801e118:	4770      	bx	lr
 801e11a:	bf00      	nop
 801e11c:	2002b2f0 	.word	0x2002b2f0
 801e120:	2002b2ec 	.word	0x2002b2ec

0801e124 <_Color2Index_8888>:
 801e124:	43c3      	mvns	r3, r0
 801e126:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801e12a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801e12e:	4313      	orrs	r3, r2
 801e130:	b2c2      	uxtb	r2, r0
 801e132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e136:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e13a:	4318      	orrs	r0, r3
 801e13c:	4770      	bx	lr
 801e13e:	bf00      	nop

0801e140 <_GetIndexMask_8888>:
 801e140:	f04f 30ff 	mov.w	r0, #4294967295
 801e144:	4770      	bx	lr
 801e146:	bf00      	nop

0801e148 <_Color2IndexBulk>:
 801e148:	b470      	push	{r4, r5, r6}
 801e14a:	f850 4b04 	ldr.w	r4, [r0], #4
 801e14e:	43e5      	mvns	r5, r4
 801e150:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801e154:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 801e158:	4335      	orrs	r5, r6
 801e15a:	b2e6      	uxtb	r6, r4
 801e15c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 801e160:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e164:	432c      	orrs	r4, r5
 801e166:	3a01      	subs	r2, #1
 801e168:	600c      	str	r4, [r1, #0]
 801e16a:	4419      	add	r1, r3
 801e16c:	d1ed      	bne.n	801e14a <_Color2IndexBulk+0x2>
 801e16e:	bc70      	pop	{r4, r5, r6}
 801e170:	4770      	bx	lr
 801e172:	bf00      	nop

0801e174 <_Index2ColorBulk>:
 801e174:	b470      	push	{r4, r5, r6}
 801e176:	6804      	ldr	r4, [r0, #0]
 801e178:	43e5      	mvns	r5, r4
 801e17a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801e17e:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 801e182:	4335      	orrs	r5, r6
 801e184:	b2e6      	uxtb	r6, r4
 801e186:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 801e18a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e18e:	432c      	orrs	r4, r5
 801e190:	3a01      	subs	r2, #1
 801e192:	4418      	add	r0, r3
 801e194:	f841 4b04 	str.w	r4, [r1], #4
 801e198:	d1ed      	bne.n	801e176 <_Index2ColorBulk+0x2>
 801e19a:	bc70      	pop	{r4, r5, r6}
 801e19c:	4770      	bx	lr
 801e19e:	bf00      	nop

0801e1a0 <_Color2Index_888>:
 801e1a0:	b2c2      	uxtb	r2, r0
 801e1a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801e1a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e1aa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e1ae:	4318      	orrs	r0, r3
 801e1b0:	4770      	bx	lr
 801e1b2:	bf00      	nop

0801e1b4 <_GetIndexMask_888>:
 801e1b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801e1b8:	4770      	bx	lr
 801e1ba:	bf00      	nop

0801e1bc <_Color2IndexBulk>:
 801e1bc:	b470      	push	{r4, r5, r6}
 801e1be:	f850 4b04 	ldr.w	r4, [r0], #4
 801e1c2:	b2e6      	uxtb	r6, r4
 801e1c4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801e1c8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 801e1cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e1d0:	432c      	orrs	r4, r5
 801e1d2:	3a01      	subs	r2, #1
 801e1d4:	600c      	str	r4, [r1, #0]
 801e1d6:	4419      	add	r1, r3
 801e1d8:	d1f1      	bne.n	801e1be <_Color2IndexBulk+0x2>
 801e1da:	bc70      	pop	{r4, r5, r6}
 801e1dc:	4770      	bx	lr
 801e1de:	bf00      	nop

0801e1e0 <_Index2ColorBulk>:
 801e1e0:	b470      	push	{r4, r5, r6}
 801e1e2:	6804      	ldr	r4, [r0, #0]
 801e1e4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801e1e8:	b2e6      	uxtb	r6, r4
 801e1ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 801e1ee:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801e1f2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e1f6:	432c      	orrs	r4, r5
 801e1f8:	3a01      	subs	r2, #1
 801e1fa:	4418      	add	r0, r3
 801e1fc:	f841 4b04 	str.w	r4, [r1], #4
 801e200:	d1ef      	bne.n	801e1e2 <_Index2ColorBulk+0x2>
 801e202:	bc70      	pop	{r4, r5, r6}
 801e204:	4770      	bx	lr
 801e206:	bf00      	nop

0801e208 <LCD_Index2Color_565>:
 801e208:	f000 021f 	and.w	r2, r0, #31
 801e20c:	4b09      	ldr	r3, [pc, #36]	; (801e234 <LCD_Index2Color_565+0x2c>)
 801e20e:	5c99      	ldrb	r1, [r3, r2]
 801e210:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 801e214:	b410      	push	{r4}
 801e216:	f3c0 1045 	ubfx	r0, r0, #5, #6
 801e21a:	4c07      	ldr	r4, [pc, #28]	; (801e238 <LCD_Index2Color_565+0x30>)
 801e21c:	5c9a      	ldrb	r2, [r3, r2]
 801e21e:	5c23      	ldrb	r3, [r4, r0]
 801e220:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e224:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 801e228:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 801e22c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e230:	4770      	bx	lr
 801e232:	bf00      	nop
 801e234:	0802a950 	.word	0x0802a950
 801e238:	0802a970 	.word	0x0802a970

0801e23c <_Color2Index_565>:
 801e23c:	b410      	push	{r4}
 801e23e:	b2c2      	uxtb	r2, r0
 801e240:	f3c0 4407 	ubfx	r4, r0, #16, #8
 801e244:	4b06      	ldr	r3, [pc, #24]	; (801e260 <_Color2Index_565+0x24>)
 801e246:	4907      	ldr	r1, [pc, #28]	; (801e264 <_Color2Index_565+0x28>)
 801e248:	5c9a      	ldrb	r2, [r3, r2]
 801e24a:	5d1b      	ldrb	r3, [r3, r4]
 801e24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e250:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e254:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 801e258:	5c08      	ldrb	r0, [r1, r0]
 801e25a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801e25e:	4770      	bx	lr
 801e260:	0802a850 	.word	0x0802a850
 801e264:	0802a9b0 	.word	0x0802a9b0

0801e268 <_GetIndexMask_565>:
 801e268:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e26c:	4770      	bx	lr
 801e26e:	bf00      	nop

0801e270 <_Color2IndexBulk>:
 801e270:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801e274:	4d0c      	ldr	r5, [pc, #48]	; (801e2a8 <_Color2IndexBulk+0x38>)
 801e276:	4f0d      	ldr	r7, [pc, #52]	; (801e2ac <_Color2IndexBulk+0x3c>)
 801e278:	f850 4b04 	ldr.w	r4, [r0], #4
 801e27c:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e280:	fa5f f884 	uxtb.w	r8, r4
 801e284:	f3c4 2607 	ubfx	r6, r4, #8, #8
 801e288:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801e28c:	f815 4008 	ldrb.w	r4, [r5, r8]
 801e290:	5dbe      	ldrb	r6, [r7, r6]
 801e292:	eb0c 24c4 	add.w	r4, ip, r4, lsl #11
 801e296:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 801e29a:	3a01      	subs	r2, #1
 801e29c:	800c      	strh	r4, [r1, #0]
 801e29e:	4419      	add	r1, r3
 801e2a0:	d1ea      	bne.n	801e278 <_Color2IndexBulk+0x8>
 801e2a2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801e2a6:	4770      	bx	lr
 801e2a8:	0802a850 	.word	0x0802a850
 801e2ac:	0802a9b0 	.word	0x0802a9b0

0801e2b0 <_Index2ColorBulk>:
 801e2b0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 801e2b4:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 801e2b8:	3c01      	subs	r4, #1
 801e2ba:	3a01      	subs	r2, #1
 801e2bc:	fb03 0002 	mla	r0, r3, r2, r0
 801e2c0:	4d10      	ldr	r5, [pc, #64]	; (801e304 <_Index2ColorBulk+0x54>)
 801e2c2:	f8df c044 	ldr.w	ip, [pc, #68]	; 801e308 <_Index2ColorBulk+0x58>
 801e2c6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e2ca:	425b      	negs	r3, r3
 801e2cc:	e000      	b.n	801e2d0 <_Index2ColorBulk+0x20>
 801e2ce:	3a01      	subs	r2, #1
 801e2d0:	8804      	ldrh	r4, [r0, #0]
 801e2d2:	0ae7      	lsrs	r7, r4, #11
 801e2d4:	f004 081f 	and.w	r8, r4, #31
 801e2d8:	f3c4 1645 	ubfx	r6, r4, #5, #6
 801e2dc:	5def      	ldrb	r7, [r5, r7]
 801e2de:	f815 4008 	ldrb.w	r4, [r5, r8]
 801e2e2:	f81c 6006 	ldrb.w	r6, [ip, r6]
 801e2e6:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 801e2ea:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 801e2ee:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801e2f2:	4418      	add	r0, r3
 801e2f4:	f841 4904 	str.w	r4, [r1], #-4
 801e2f8:	2a00      	cmp	r2, #0
 801e2fa:	d1e8      	bne.n	801e2ce <_Index2ColorBulk+0x1e>
 801e2fc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801e300:	4770      	bx	lr
 801e302:	bf00      	nop
 801e304:	0802a950 	.word	0x0802a950
 801e308:	0802a970 	.word	0x0802a970

0801e30c <_Color2Index_M8888I>:
 801e30c:	4770      	bx	lr
 801e30e:	bf00      	nop

0801e310 <_GetIndexMask_M8888I>:
 801e310:	f04f 30ff 	mov.w	r0, #4294967295
 801e314:	4770      	bx	lr
 801e316:	bf00      	nop

0801e318 <_Color2IndexBulk_M8888I>:
 801e318:	b410      	push	{r4}
 801e31a:	f850 4b04 	ldr.w	r4, [r0], #4
 801e31e:	600c      	str	r4, [r1, #0]
 801e320:	3a01      	subs	r2, #1
 801e322:	4419      	add	r1, r3
 801e324:	d1f9      	bne.n	801e31a <_Color2IndexBulk_M8888I+0x2>
 801e326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e32a:	4770      	bx	lr

0801e32c <_Index2ColorBulk_M8888I>:
 801e32c:	b410      	push	{r4}
 801e32e:	6804      	ldr	r4, [r0, #0]
 801e330:	f841 4b04 	str.w	r4, [r1], #4
 801e334:	3a01      	subs	r2, #1
 801e336:	4418      	add	r0, r3
 801e338:	d1f9      	bne.n	801e32e <_Index2ColorBulk_M8888I+0x2>
 801e33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e33e:	4770      	bx	lr

0801e340 <GUICC_M8888I_SetCustColorConv>:
 801e340:	4770      	bx	lr
 801e342:	bf00      	nop

0801e344 <_Color2Index_M4444I>:
 801e344:	4b0f      	ldr	r3, [pc, #60]	; (801e384 <_Color2Index_M4444I+0x40>)
 801e346:	b430      	push	{r4, r5}
 801e348:	0e02      	lsrs	r2, r0, #24
 801e34a:	b2c5      	uxtb	r5, r0
 801e34c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 801e350:	3508      	adds	r5, #8
 801e352:	3208      	adds	r2, #8
 801e354:	fba3 1505 	umull	r1, r5, r3, r5
 801e358:	fba3 1202 	umull	r1, r2, r3, r2
 801e35c:	3408      	adds	r4, #8
 801e35e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e362:	092d      	lsrs	r5, r5, #4
 801e364:	fba3 0404 	umull	r0, r4, r3, r4
 801e368:	0912      	lsrs	r2, r2, #4
 801e36a:	3108      	adds	r1, #8
 801e36c:	0920      	lsrs	r0, r4, #4
 801e36e:	eb05 3202 	add.w	r2, r5, r2, lsl #12
 801e372:	fba3 4301 	umull	r4, r3, r3, r1
 801e376:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 801e37a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801e37e:	4418      	add	r0, r3
 801e380:	bc30      	pop	{r4, r5}
 801e382:	4770      	bx	lr
 801e384:	f0f0f0f1 	.word	0xf0f0f0f1

0801e388 <_Index2Color_M4444I>:
 801e388:	4b0b      	ldr	r3, [pc, #44]	; (801e3b8 <_Index2Color_M4444I+0x30>)
 801e38a:	f3c0 3203 	ubfx	r2, r0, #12, #4
 801e38e:	f3c0 2103 	ubfx	r1, r0, #8, #4
 801e392:	b410      	push	{r4}
 801e394:	5c59      	ldrb	r1, [r3, r1]
 801e396:	5c9c      	ldrb	r4, [r3, r2]
 801e398:	f000 020f 	and.w	r2, r0, #15
 801e39c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801e3a0:	5c9a      	ldrb	r2, [r3, r2]
 801e3a2:	5c18      	ldrb	r0, [r3, r0]
 801e3a4:	0409      	lsls	r1, r1, #16
 801e3a6:	eb01 6304 	add.w	r3, r1, r4, lsl #24
 801e3aa:	4413      	add	r3, r2
 801e3ac:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 801e3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e3b4:	4770      	bx	lr
 801e3b6:	bf00      	nop
 801e3b8:	0802a740 	.word	0x0802a740

0801e3bc <_GetIndexMask_M4444I>:
 801e3bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e3c0:	4770      	bx	lr
 801e3c2:	bf00      	nop

0801e3c4 <_Color2IndexBulk_M4444I>:
 801e3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3c8:	4c17      	ldr	r4, [pc, #92]	; (801e428 <_Color2IndexBulk_M4444I+0x64>)
 801e3ca:	6824      	ldr	r4, [r4, #0]
 801e3cc:	4684      	mov	ip, r0
 801e3ce:	460e      	mov	r6, r1
 801e3d0:	4617      	mov	r7, r2
 801e3d2:	4698      	mov	r8, r3
 801e3d4:	b114      	cbz	r4, 801e3dc <_Color2IndexBulk_M4444I+0x18>
 801e3d6:	47a0      	blx	r4
 801e3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3dc:	4d13      	ldr	r5, [pc, #76]	; (801e42c <_Color2IndexBulk_M4444I+0x68>)
 801e3de:	f85c 4b04 	ldr.w	r4, [ip], #4
 801e3e2:	b2e1      	uxtb	r1, r4
 801e3e4:	0e23      	lsrs	r3, r4, #24
 801e3e6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801e3ea:	3108      	adds	r1, #8
 801e3ec:	3308      	adds	r3, #8
 801e3ee:	fba5 0101 	umull	r0, r1, r5, r1
 801e3f2:	fba5 0303 	umull	r0, r3, r5, r3
 801e3f6:	3208      	adds	r2, #8
 801e3f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e3fc:	0909      	lsrs	r1, r1, #4
 801e3fe:	091b      	lsrs	r3, r3, #4
 801e400:	fba5 0202 	umull	r0, r2, r5, r2
 801e404:	3408      	adds	r4, #8
 801e406:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 801e40a:	0912      	lsrs	r2, r2, #4
 801e40c:	fba5 1404 	umull	r1, r4, r5, r4
 801e410:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801e414:	f404 74f8 	and.w	r4, r4, #496	; 0x1f0
 801e418:	4422      	add	r2, r4
 801e41a:	3f01      	subs	r7, #1
 801e41c:	8032      	strh	r2, [r6, #0]
 801e41e:	4446      	add	r6, r8
 801e420:	d1dd      	bne.n	801e3de <_Color2IndexBulk_M4444I+0x1a>
 801e422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e426:	bf00      	nop
 801e428:	2002b2f8 	.word	0x2002b2f8
 801e42c:	f0f0f0f1 	.word	0xf0f0f0f1

0801e430 <_Index2ColorBulk_M4444I>:
 801e430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e432:	4c15      	ldr	r4, [pc, #84]	; (801e488 <_Index2ColorBulk_M4444I+0x58>)
 801e434:	6824      	ldr	r4, [r4, #0]
 801e436:	461e      	mov	r6, r3
 801e438:	b10c      	cbz	r4, 801e43e <_Index2ColorBulk_M4444I+0xe>
 801e43a:	47a0      	blx	r4
 801e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e43e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 801e442:	3b01      	subs	r3, #1
 801e444:	3a01      	subs	r2, #1
 801e446:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e44a:	4d10      	ldr	r5, [pc, #64]	; (801e48c <_Index2ColorBulk_M4444I+0x5c>)
 801e44c:	fb06 0002 	mla	r0, r6, r2, r0
 801e450:	4273      	negs	r3, r6
 801e452:	e000      	b.n	801e456 <_Index2ColorBulk_M4444I+0x26>
 801e454:	3a01      	subs	r2, #1
 801e456:	8804      	ldrh	r4, [r0, #0]
 801e458:	0b27      	lsrs	r7, r4, #12
 801e45a:	f004 060f 	and.w	r6, r4, #15
 801e45e:	f3c4 2c03 	ubfx	ip, r4, #8, #4
 801e462:	5dae      	ldrb	r6, [r5, r6]
 801e464:	5def      	ldrb	r7, [r5, r7]
 801e466:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801e46a:	f3c4 1403 	ubfx	r4, r4, #4, #4
 801e46e:	eb06 6707 	add.w	r7, r6, r7, lsl #24
 801e472:	5d2e      	ldrb	r6, [r5, r4]
 801e474:	eb07 440c 	add.w	r4, r7, ip, lsl #16
 801e478:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 801e47c:	4418      	add	r0, r3
 801e47e:	f841 4904 	str.w	r4, [r1], #-4
 801e482:	2a00      	cmp	r2, #0
 801e484:	d1e6      	bne.n	801e454 <_Index2ColorBulk_M4444I+0x24>
 801e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e488:	2002b2f4 	.word	0x2002b2f4
 801e48c:	0802a740 	.word	0x0802a740

0801e490 <GUICC_M4444I_SetCustColorConv>:
 801e490:	4a02      	ldr	r2, [pc, #8]	; (801e49c <GUICC_M4444I_SetCustColorConv+0xc>)
 801e492:	4b03      	ldr	r3, [pc, #12]	; (801e4a0 <GUICC_M4444I_SetCustColorConv+0x10>)
 801e494:	6010      	str	r0, [r2, #0]
 801e496:	6019      	str	r1, [r3, #0]
 801e498:	4770      	bx	lr
 801e49a:	bf00      	nop
 801e49c:	2002b2f8 	.word	0x2002b2f8
 801e4a0:	2002b2f4 	.word	0x2002b2f4

0801e4a4 <_Color2Index_M1555I>:
 801e4a4:	b2c1      	uxtb	r1, r0
 801e4a6:	4b09      	ldr	r3, [pc, #36]	; (801e4cc <_Color2Index_M1555I+0x28>)
 801e4a8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801e4ac:	b410      	push	{r4}
 801e4ae:	5c5c      	ldrb	r4, [r3, r1]
 801e4b0:	5c9a      	ldrb	r2, [r3, r2]
 801e4b2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801e4b6:	0fc0      	lsrs	r0, r0, #31
 801e4b8:	eb04 30c0 	add.w	r0, r4, r0, lsl #15
 801e4bc:	5c5b      	ldrb	r3, [r3, r1]
 801e4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e4c2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801e4c6:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 801e4ca:	4770      	bx	lr
 801e4cc:	0802a850 	.word	0x0802a850

0801e4d0 <_Index2Color_M1555I>:
 801e4d0:	4b0a      	ldr	r3, [pc, #40]	; (801e4fc <_Index2Color_M1555I+0x2c>)
 801e4d2:	f3c0 1244 	ubfx	r2, r0, #5, #5
 801e4d6:	f3c0 2184 	ubfx	r1, r0, #10, #5
 801e4da:	b410      	push	{r4}
 801e4dc:	5c59      	ldrb	r1, [r3, r1]
 801e4de:	5c9c      	ldrb	r4, [r3, r2]
 801e4e0:	f000 021f 	and.w	r2, r0, #31
 801e4e4:	0409      	lsls	r1, r1, #16
 801e4e6:	5c9a      	ldrb	r2, [r3, r2]
 801e4e8:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 801e4ec:	4413      	add	r3, r2
 801e4ee:	f340 30c0 	sbfx	r0, r0, #15, #1
 801e4f2:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 801e4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e4fa:	4770      	bx	lr
 801e4fc:	0802a950 	.word	0x0802a950

0801e500 <_GetIndexMask_M1555I>:
 801e500:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e504:	4770      	bx	lr
 801e506:	bf00      	nop

0801e508 <_Color2IndexBulk_M1555I>:
 801e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e50a:	4c10      	ldr	r4, [pc, #64]	; (801e54c <_Color2IndexBulk_M1555I+0x44>)
 801e50c:	6824      	ldr	r4, [r4, #0]
 801e50e:	4607      	mov	r7, r0
 801e510:	460d      	mov	r5, r1
 801e512:	4616      	mov	r6, r2
 801e514:	469c      	mov	ip, r3
 801e516:	b10c      	cbz	r4, 801e51c <_Color2IndexBulk_M1555I+0x14>
 801e518:	47a0      	blx	r4
 801e51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e51c:	4a0c      	ldr	r2, [pc, #48]	; (801e550 <_Color2IndexBulk_M1555I+0x48>)
 801e51e:	f857 4b04 	ldr.w	r4, [r7], #4
 801e522:	b2e1      	uxtb	r1, r4
 801e524:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801e528:	5c50      	ldrb	r0, [r2, r1]
 801e52a:	5cd3      	ldrb	r3, [r2, r3]
 801e52c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 801e530:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 801e534:	0fe4      	lsrs	r4, r4, #31
 801e536:	5c51      	ldrb	r1, [r2, r1]
 801e538:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 801e53c:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 801e540:	3e01      	subs	r6, #1
 801e542:	802c      	strh	r4, [r5, #0]
 801e544:	4465      	add	r5, ip
 801e546:	d1ea      	bne.n	801e51e <_Color2IndexBulk_M1555I+0x16>
 801e548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e54a:	bf00      	nop
 801e54c:	2002b300 	.word	0x2002b300
 801e550:	0802a850 	.word	0x0802a850

0801e554 <_Index2ColorBulk_M1555I>:
 801e554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e556:	4c15      	ldr	r4, [pc, #84]	; (801e5ac <_Index2ColorBulk_M1555I+0x58>)
 801e558:	6824      	ldr	r4, [r4, #0]
 801e55a:	461e      	mov	r6, r3
 801e55c:	b10c      	cbz	r4, 801e562 <_Index2ColorBulk_M1555I+0xe>
 801e55e:	47a0      	blx	r4
 801e560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e562:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 801e566:	3b01      	subs	r3, #1
 801e568:	3a01      	subs	r2, #1
 801e56a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e56e:	4d10      	ldr	r5, [pc, #64]	; (801e5b0 <_Index2ColorBulk_M1555I+0x5c>)
 801e570:	fb06 0002 	mla	r0, r6, r2, r0
 801e574:	4273      	negs	r3, r6
 801e576:	e000      	b.n	801e57a <_Index2ColorBulk_M1555I+0x26>
 801e578:	3a01      	subs	r2, #1
 801e57a:	8804      	ldrh	r4, [r0, #0]
 801e57c:	f004 071f 	and.w	r7, r4, #31
 801e580:	f3c4 1644 	ubfx	r6, r4, #5, #5
 801e584:	f815 c007 	ldrb.w	ip, [r5, r7]
 801e588:	5daf      	ldrb	r7, [r5, r6]
 801e58a:	f3c4 2684 	ubfx	r6, r4, #10, #5
 801e58e:	f344 34c0 	sbfx	r4, r4, #15, #1
 801e592:	eb0c 6404 	add.w	r4, ip, r4, lsl #24
 801e596:	5dae      	ldrb	r6, [r5, r6]
 801e598:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 801e59c:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 801e5a0:	4418      	add	r0, r3
 801e5a2:	f841 4904 	str.w	r4, [r1], #-4
 801e5a6:	2a00      	cmp	r2, #0
 801e5a8:	d1e6      	bne.n	801e578 <_Index2ColorBulk_M1555I+0x24>
 801e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5ac:	2002b2fc 	.word	0x2002b2fc
 801e5b0:	0802a950 	.word	0x0802a950

0801e5b4 <GUICC_M1555I_SetCustColorConv>:
 801e5b4:	4a02      	ldr	r2, [pc, #8]	; (801e5c0 <GUICC_M1555I_SetCustColorConv+0xc>)
 801e5b6:	4b03      	ldr	r3, [pc, #12]	; (801e5c4 <GUICC_M1555I_SetCustColorConv+0x10>)
 801e5b8:	6010      	str	r0, [r2, #0]
 801e5ba:	6019      	str	r1, [r3, #0]
 801e5bc:	4770      	bx	lr
 801e5be:	bf00      	nop
 801e5c0:	2002b300 	.word	0x2002b300
 801e5c4:	2002b2fc 	.word	0x2002b2fc

0801e5c8 <_Color2Index_88666I>:
 801e5c8:	4b05      	ldr	r3, [pc, #20]	; (801e5e0 <_Color2Index_88666I+0x18>)
 801e5ca:	b510      	push	{r4, lr}
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	4604      	mov	r4, r0
 801e5d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801e5d4:	4798      	blx	r3
 801e5d6:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 801e5da:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 801e5de:	bd10      	pop	{r4, pc}
 801e5e0:	08029d68 	.word	0x08029d68

0801e5e4 <_Index2Color_88666I>:
 801e5e4:	4b05      	ldr	r3, [pc, #20]	; (801e5fc <_Index2Color_88666I+0x18>)
 801e5e6:	b510      	push	{r4, lr}
 801e5e8:	685b      	ldr	r3, [r3, #4]
 801e5ea:	4604      	mov	r4, r0
 801e5ec:	b2c0      	uxtb	r0, r0
 801e5ee:	4798      	blx	r3
 801e5f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e5f4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 801e5f8:	bd10      	pop	{r4, pc}
 801e5fa:	bf00      	nop
 801e5fc:	08029d68 	.word	0x08029d68

0801e600 <_GetIndexMask_88666I>:
 801e600:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e604:	4770      	bx	lr
 801e606:	bf00      	nop

0801e608 <_Color2IndexBulk_88666I>:
 801e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e60c:	4c0a      	ldr	r4, [pc, #40]	; (801e638 <_Color2IndexBulk_88666I+0x30>)
 801e60e:	4607      	mov	r7, r0
 801e610:	f8d4 9000 	ldr.w	r9, [r4]
 801e614:	4615      	mov	r5, r2
 801e616:	460c      	mov	r4, r1
 801e618:	4698      	mov	r8, r3
 801e61a:	f857 6b04 	ldr.w	r6, [r7], #4
 801e61e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 801e622:	47c8      	blx	r9
 801e624:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 801e628:	ea40 4016 	orr.w	r0, r0, r6, lsr #16
 801e62c:	3d01      	subs	r5, #1
 801e62e:	8020      	strh	r0, [r4, #0]
 801e630:	4444      	add	r4, r8
 801e632:	d1f2      	bne.n	801e61a <_Color2IndexBulk_88666I+0x12>
 801e634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e638:	08029d68 	.word	0x08029d68

0801e63c <_Index2ColorBulk_88666I>:
 801e63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e640:	4c0e      	ldr	r4, [pc, #56]	; (801e67c <_Index2ColorBulk_88666I+0x40>)
 801e642:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 801e646:	3f01      	subs	r7, #1
 801e648:	1e55      	subs	r5, r2, #1
 801e64a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801e64e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801e652:	fb03 0405 	mla	r4, r3, r5, r0
 801e656:	f1c3 0800 	rsb	r8, r3, #0
 801e65a:	e000      	b.n	801e65e <_Index2ColorBulk_88666I+0x22>
 801e65c:	3d01      	subs	r5, #1
 801e65e:	8826      	ldrh	r6, [r4, #0]
 801e660:	b2f0      	uxtb	r0, r6
 801e662:	47c8      	blx	r9
 801e664:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e668:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801e66c:	4444      	add	r4, r8
 801e66e:	f847 0904 	str.w	r0, [r7], #-4
 801e672:	2d00      	cmp	r5, #0
 801e674:	d1f2      	bne.n	801e65c <_Index2ColorBulk_88666I+0x20>
 801e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e67a:	bf00      	nop
 801e67c:	08029d68 	.word	0x08029d68

0801e680 <_GetIndexMask_8666_1>:
 801e680:	20ff      	movs	r0, #255	; 0xff
 801e682:	4770      	bx	lr

0801e684 <_Color2Index_8666_1>:
 801e684:	b410      	push	{r4}
 801e686:	b328      	cbz	r0, 801e6d4 <_Color2Index_8666_1+0x50>
 801e688:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801e68c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801e690:	4293      	cmp	r3, r2
 801e692:	b2c0      	uxtb	r0, r0
 801e694:	d021      	beq.n	801e6da <_Color2Index_8666_1+0x56>
 801e696:	4915      	ldr	r1, [pc, #84]	; (801e6ec <_Color2Index_8666_1+0x68>)
 801e698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e69c:	307f      	adds	r0, #127	; 0x7f
 801e69e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e6a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e6a6:	fba1 4000 	umull	r4, r0, r1, r0
 801e6aa:	327f      	adds	r2, #127	; 0x7f
 801e6ac:	337f      	adds	r3, #127	; 0x7f
 801e6ae:	fba1 4202 	umull	r4, r2, r1, r2
 801e6b2:	09c0      	lsrs	r0, r0, #7
 801e6b4:	fba1 4103 	umull	r4, r1, r1, r3
 801e6b8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801e6bc:	09d2      	lsrs	r2, r2, #7
 801e6be:	09c9      	lsrs	r1, r1, #7
 801e6c0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801e6c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e6c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e6cc:	286b      	cmp	r0, #107	; 0x6b
 801e6ce:	bf94      	ite	ls
 801e6d0:	300c      	addls	r0, #12
 801e6d2:	301c      	addhi	r0, #28
 801e6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6d8:	4770      	bx	lr
 801e6da:	4298      	cmp	r0, r3
 801e6dc:	d1db      	bne.n	801e696 <_Color2Index_8666_1+0x12>
 801e6de:	4b04      	ldr	r3, [pc, #16]	; (801e6f0 <_Color2Index_8666_1+0x6c>)
 801e6e0:	3008      	adds	r0, #8
 801e6e2:	fba3 2000 	umull	r2, r0, r3, r0
 801e6e6:	0900      	lsrs	r0, r0, #4
 801e6e8:	3078      	adds	r0, #120	; 0x78
 801e6ea:	e7f3      	b.n	801e6d4 <_Color2Index_8666_1+0x50>
 801e6ec:	80808081 	.word	0x80808081
 801e6f0:	f0f0f0f1 	.word	0xf0f0f0f1

0801e6f4 <_Index2Color_8666_1>:
 801e6f4:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 801e6f8:	2b0f      	cmp	r3, #15
 801e6fa:	b430      	push	{r4, r5}
 801e6fc:	d92f      	bls.n	801e75e <_Index2Color_8666_1+0x6a>
 801e6fe:	f1a0 030c 	sub.w	r3, r0, #12
 801e702:	2be7      	cmp	r3, #231	; 0xe7
 801e704:	d828      	bhi.n	801e758 <_Index2Color_8666_1+0x64>
 801e706:	2877      	cmp	r0, #119	; 0x77
 801e708:	bf88      	it	hi
 801e70a:	f1a0 031c 	subhi.w	r3, r0, #28
 801e70e:	4819      	ldr	r0, [pc, #100]	; (801e774 <_Index2Color_8666_1+0x80>)
 801e710:	4919      	ldr	r1, [pc, #100]	; (801e778 <_Index2Color_8666_1+0x84>)
 801e712:	fba0 4203 	umull	r4, r2, r0, r3
 801e716:	0892      	lsrs	r2, r2, #2
 801e718:	fba0 5002 	umull	r5, r0, r0, r2
 801e71c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801e720:	fba1 5103 	umull	r5, r1, r1, r3
 801e724:	0880      	lsrs	r0, r0, #2
 801e726:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e72a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 801e72e:	08c9      	lsrs	r1, r1, #3
 801e730:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 801e734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e738:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e73c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e740:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e744:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e748:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e74c:	eb01 4303 	add.w	r3, r1, r3, lsl #16
 801e750:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 801e754:	bc30      	pop	{r4, r5}
 801e756:	4770      	bx	lr
 801e758:	2000      	movs	r0, #0
 801e75a:	bc30      	pop	{r4, r5}
 801e75c:	4770      	bx	lr
 801e75e:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 801e762:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801e766:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 801e76a:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 801e76e:	3008      	adds	r0, #8
 801e770:	bc30      	pop	{r4, r5}
 801e772:	4770      	bx	lr
 801e774:	aaaaaaab 	.word	0xaaaaaaab
 801e778:	38e38e39 	.word	0x38e38e39

0801e77c <LCD_Color2Index_8666>:
 801e77c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801e780:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801e784:	4293      	cmp	r3, r2
 801e786:	b410      	push	{r4}
 801e788:	b2c0      	uxtb	r0, r0
 801e78a:	d020      	beq.n	801e7ce <LCD_Color2Index_8666+0x52>
 801e78c:	4914      	ldr	r1, [pc, #80]	; (801e7e0 <LCD_Color2Index_8666+0x64>)
 801e78e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e792:	307f      	adds	r0, #127	; 0x7f
 801e794:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e798:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e79c:	fba1 4000 	umull	r4, r0, r1, r0
 801e7a0:	337f      	adds	r3, #127	; 0x7f
 801e7a2:	327f      	adds	r2, #127	; 0x7f
 801e7a4:	fba1 4303 	umull	r4, r3, r1, r3
 801e7a8:	09c0      	lsrs	r0, r0, #7
 801e7aa:	fba1 4102 	umull	r4, r1, r1, r2
 801e7ae:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801e7b2:	09db      	lsrs	r3, r3, #7
 801e7b4:	09c9      	lsrs	r1, r1, #7
 801e7b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e7ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e7be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e7c2:	286b      	cmp	r0, #107	; 0x6b
 801e7c4:	bf88      	it	hi
 801e7c6:	3028      	addhi	r0, #40	; 0x28
 801e7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7cc:	4770      	bx	lr
 801e7ce:	4298      	cmp	r0, r3
 801e7d0:	d1dc      	bne.n	801e78c <LCD_Color2Index_8666+0x10>
 801e7d2:	4b04      	ldr	r3, [pc, #16]	; (801e7e4 <LCD_Color2Index_8666+0x68>)
 801e7d4:	3008      	adds	r0, #8
 801e7d6:	fba3 2000 	umull	r2, r0, r3, r0
 801e7da:	0900      	lsrs	r0, r0, #4
 801e7dc:	3078      	adds	r0, #120	; 0x78
 801e7de:	e7f3      	b.n	801e7c8 <LCD_Color2Index_8666+0x4c>
 801e7e0:	80808081 	.word	0x80808081
 801e7e4:	f0f0f0f1 	.word	0xf0f0f0f1

0801e7e8 <_GetIndexMask_8666>:
 801e7e8:	20ff      	movs	r0, #255	; 0xff
 801e7ea:	4770      	bx	lr

0801e7ec <LCD_Index2Color_8666>:
 801e7ec:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 801e7f0:	2b0f      	cmp	r3, #15
 801e7f2:	b430      	push	{r4, r5}
 801e7f4:	d92c      	bls.n	801e850 <LCD_Index2Color_8666+0x64>
 801e7f6:	286b      	cmp	r0, #107	; 0x6b
 801e7f8:	d826      	bhi.n	801e848 <LCD_Index2Color_8666+0x5c>
 801e7fa:	491c      	ldr	r1, [pc, #112]	; (801e86c <LCD_Index2Color_8666+0x80>)
 801e7fc:	4a1c      	ldr	r2, [pc, #112]	; (801e870 <LCD_Index2Color_8666+0x84>)
 801e7fe:	fba1 4300 	umull	r4, r3, r1, r0
 801e802:	089b      	lsrs	r3, r3, #2
 801e804:	fba1 5103 	umull	r5, r1, r1, r3
 801e808:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801e80c:	fba2 5200 	umull	r5, r2, r2, r0
 801e810:	0889      	lsrs	r1, r1, #2
 801e812:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 801e816:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e81a:	08d2      	lsrs	r2, r2, #3
 801e81c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 801e820:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e824:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e82c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e830:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e834:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e838:	eb02 4000 	add.w	r0, r2, r0, lsl #16
 801e83c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 801e840:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e844:	bc30      	pop	{r4, r5}
 801e846:	4770      	bx	lr
 801e848:	2893      	cmp	r0, #147	; 0x93
 801e84a:	d90c      	bls.n	801e866 <LCD_Index2Color_8666+0x7a>
 801e84c:	3828      	subs	r0, #40	; 0x28
 801e84e:	e7d4      	b.n	801e7fa <LCD_Index2Color_8666+0xe>
 801e850:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 801e854:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801e858:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 801e85c:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 801e860:	3008      	adds	r0, #8
 801e862:	bc30      	pop	{r4, r5}
 801e864:	4770      	bx	lr
 801e866:	2000      	movs	r0, #0
 801e868:	bc30      	pop	{r4, r5}
 801e86a:	4770      	bx	lr
 801e86c:	aaaaaaab 	.word	0xaaaaaaab
 801e870:	38e38e39 	.word	0x38e38e39

0801e874 <_Color2Index_84444>:
 801e874:	0f83      	lsrs	r3, r0, #30
 801e876:	d010      	beq.n	801e89a <_Color2Index_84444+0x26>
 801e878:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e87c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801e880:	428a      	cmp	r2, r1
 801e882:	b2c0      	uxtb	r0, r0
 801e884:	d00b      	beq.n	801e89e <_Color2Index_84444+0x2a>
 801e886:	019b      	lsls	r3, r3, #6
 801e888:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 801e88c:	0980      	lsrs	r0, r0, #6
 801e88e:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 801e892:	0989      	lsrs	r1, r1, #6
 801e894:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 801e898:	4770      	bx	lr
 801e89a:	4618      	mov	r0, r3
 801e89c:	4770      	bx	lr
 801e89e:	4290      	cmp	r0, r2
 801e8a0:	d1f1      	bne.n	801e886 <_Color2Index_84444+0x12>
 801e8a2:	0900      	lsrs	r0, r0, #4
 801e8a4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801e8a8:	4770      	bx	lr
 801e8aa:	bf00      	nop

0801e8ac <_GetIndexMask_84444>:
 801e8ac:	20ff      	movs	r0, #255	; 0xff
 801e8ae:	4770      	bx	lr

0801e8b0 <_Index2Color_84444>:
 801e8b0:	283f      	cmp	r0, #63	; 0x3f
 801e8b2:	d804      	bhi.n	801e8be <_Index2Color_84444+0xe>
 801e8b4:	280f      	cmp	r0, #15
 801e8b6:	d823      	bhi.n	801e900 <_Index2Color_84444+0x50>
 801e8b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801e8bc:	4770      	bx	lr
 801e8be:	f000 0103 	and.w	r1, r0, #3
 801e8c2:	f3c0 0281 	ubfx	r2, r0, #2, #2
 801e8c6:	f3c0 1301 	ubfx	r3, r0, #4, #2
 801e8ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e8ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e8d2:	0980      	lsrs	r0, r0, #6
 801e8d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e8d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e8dc:	b2c9      	uxtb	r1, r1
 801e8de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e8e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e8e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e8ea:	0409      	lsls	r1, r1, #16
 801e8ec:	b2d2      	uxtb	r2, r2
 801e8ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e8f2:	b2db      	uxtb	r3, r3
 801e8f4:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 801e8f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e8fc:	4318      	orrs	r0, r3
 801e8fe:	4770      	bx	lr
 801e900:	f000 030f 	and.w	r3, r0, #15
 801e904:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801e908:	f3c0 1001 	ubfx	r0, r0, #4, #2
 801e90c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e910:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e914:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 801e918:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e91c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801e920:	4770      	bx	lr
 801e922:	bf00      	nop

0801e924 <_Color2Index_822216>:
 801e924:	4b11      	ldr	r3, [pc, #68]	; (801e96c <_Color2Index_822216+0x48>)
 801e926:	f400 017f 	and.w	r1, r0, #16711680	; 0xff0000
 801e92a:	b410      	push	{r4}
 801e92c:	0e04      	lsrs	r4, r0, #24
 801e92e:	fba3 2404 	umull	r2, r4, r3, r4
 801e932:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801e936:	0c0b      	lsrs	r3, r1, #16
 801e938:	4293      	cmp	r3, r2
 801e93a:	ea4f 1414 	mov.w	r4, r4, lsr #4
 801e93e:	b2c0      	uxtb	r0, r0
 801e940:	d00d      	beq.n	801e95e <_Color2Index_822216+0x3a>
 801e942:	09c0      	lsrs	r0, r0, #7
 801e944:	0080      	lsls	r0, r0, #2
 801e946:	ea40 13d3 	orr.w	r3, r0, r3, lsr #7
 801e94a:	f043 0308 	orr.w	r3, r3, #8
 801e94e:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
 801e952:	09d2      	lsrs	r2, r2, #7
 801e954:	ea44 0042 	orr.w	r0, r4, r2, lsl #1
 801e958:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e95c:	4770      	bx	lr
 801e95e:	4298      	cmp	r0, r3
 801e960:	d1ef      	bne.n	801e942 <_Color2Index_822216+0x1e>
 801e962:	0d49      	lsrs	r1, r1, #21
 801e964:	ea41 1004 	orr.w	r0, r1, r4, lsl #4
 801e968:	e7f6      	b.n	801e958 <_Color2Index_822216+0x34>
 801e96a:	bf00      	nop
 801e96c:	f0f0f0f1 	.word	0xf0f0f0f1

0801e970 <_Index2Color_822216>:
 801e970:	f3c0 1303 	ubfx	r3, r0, #4, #4
 801e974:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e978:	0702      	lsls	r2, r0, #28
 801e97a:	ea4f 6303 	mov.w	r3, r3, lsl #24
 801e97e:	d516      	bpl.n	801e9ae <_Index2Color_822216+0x3e>
 801e980:	f010 0f01 	tst.w	r0, #1
 801e984:	bf0c      	ite	eq
 801e986:	2200      	moveq	r2, #0
 801e988:	22ff      	movne	r2, #255	; 0xff
 801e98a:	f010 0f02 	tst.w	r0, #2
 801e98e:	bf0c      	ite	eq
 801e990:	2300      	moveq	r3, #0
 801e992:	f44f 437f 	movne.w	r3, #65280	; 0xff00
 801e996:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801e99a:	f010 0f04 	tst.w	r0, #4
 801e99e:	ea42 0003 	orr.w	r0, r2, r3
 801e9a2:	bf0c      	ite	eq
 801e9a4:	2300      	moveq	r3, #0
 801e9a6:	f44f 037f 	movne.w	r3, #16711680	; 0xff0000
 801e9aa:	4318      	orrs	r0, r3
 801e9ac:	4770      	bx	lr
 801e9ae:	f000 0107 	and.w	r1, r0, #7
 801e9b2:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 801e9b6:	0092      	lsls	r2, r2, #2
 801e9b8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 801e9bc:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 801e9c0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 801e9c4:	4318      	orrs	r0, r3
 801e9c6:	4770      	bx	lr

0801e9c8 <_GetIndexMask_822216>:
 801e9c8:	20ff      	movs	r0, #255	; 0xff
 801e9ca:	4770      	bx	lr

0801e9cc <_Color2Index_1616I>:
 801e9cc:	4b06      	ldr	r3, [pc, #24]	; (801e9e8 <_Color2Index_1616I+0x1c>)
 801e9ce:	b510      	push	{r4, lr}
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	4604      	mov	r4, r0
 801e9d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801e9d8:	4798      	blx	r3
 801e9da:	0e24      	lsrs	r4, r4, #24
 801e9dc:	4b03      	ldr	r3, [pc, #12]	; (801e9ec <_Color2Index_1616I+0x20>)
 801e9de:	5d1b      	ldrb	r3, [r3, r4]
 801e9e0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801e9e4:	bd10      	pop	{r4, pc}
 801e9e6:	bf00      	nop
 801e9e8:	08029dc8 	.word	0x08029dc8
 801e9ec:	0802a750 	.word	0x0802a750

0801e9f0 <_Index2Color_1616I>:
 801e9f0:	4b05      	ldr	r3, [pc, #20]	; (801ea08 <_Index2Color_1616I+0x18>)
 801e9f2:	b510      	push	{r4, lr}
 801e9f4:	685b      	ldr	r3, [r3, #4]
 801e9f6:	4604      	mov	r4, r0
 801e9f8:	b2c0      	uxtb	r0, r0
 801e9fa:	4798      	blx	r3
 801e9fc:	0924      	lsrs	r4, r4, #4
 801e9fe:	4b03      	ldr	r3, [pc, #12]	; (801ea0c <_Index2Color_1616I+0x1c>)
 801ea00:	5d1b      	ldrb	r3, [r3, r4]
 801ea02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801ea06:	bd10      	pop	{r4, pc}
 801ea08:	08029dc8 	.word	0x08029dc8
 801ea0c:	0802a740 	.word	0x0802a740

0801ea10 <_GetIndexMask_1616I>:
 801ea10:	20ff      	movs	r0, #255	; 0xff
 801ea12:	4770      	bx	lr

0801ea14 <_Color2IndexBulk_1616I>:
 801ea14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea18:	4c0c      	ldr	r4, [pc, #48]	; (801ea4c <_Color2IndexBulk_1616I+0x38>)
 801ea1a:	f8df a034 	ldr.w	sl, [pc, #52]	; 801ea50 <_Color2IndexBulk_1616I+0x3c>
 801ea1e:	f8d4 9000 	ldr.w	r9, [r4]
 801ea22:	4607      	mov	r7, r0
 801ea24:	460c      	mov	r4, r1
 801ea26:	4615      	mov	r5, r2
 801ea28:	4698      	mov	r8, r3
 801ea2a:	f857 6b04 	ldr.w	r6, [r7], #4
 801ea2e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 801ea32:	0e36      	lsrs	r6, r6, #24
 801ea34:	47c8      	blx	r9
 801ea36:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801ea3a:	3d01      	subs	r5, #1
 801ea3c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ea40:	7020      	strb	r0, [r4, #0]
 801ea42:	4444      	add	r4, r8
 801ea44:	d1f1      	bne.n	801ea2a <_Color2IndexBulk_1616I+0x16>
 801ea46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea4a:	bf00      	nop
 801ea4c:	08029dc8 	.word	0x08029dc8
 801ea50:	0802a750 	.word	0x0802a750

0801ea54 <_Index2ColorBulk_1616I>:
 801ea54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea58:	4c0f      	ldr	r4, [pc, #60]	; (801ea98 <_Index2ColorBulk_1616I+0x44>)
 801ea5a:	f8df a040 	ldr.w	sl, [pc, #64]	; 801ea9c <_Index2ColorBulk_1616I+0x48>
 801ea5e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801ea62:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 801ea66:	3f01      	subs	r7, #1
 801ea68:	1e55      	subs	r5, r2, #1
 801ea6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ea6e:	fb03 0405 	mla	r4, r3, r5, r0
 801ea72:	f1c3 0800 	rsb	r8, r3, #0
 801ea76:	e000      	b.n	801ea7a <_Index2ColorBulk_1616I+0x26>
 801ea78:	3d01      	subs	r5, #1
 801ea7a:	7826      	ldrb	r6, [r4, #0]
 801ea7c:	4630      	mov	r0, r6
 801ea7e:	0936      	lsrs	r6, r6, #4
 801ea80:	47c8      	blx	r9
 801ea82:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801ea86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 801ea8a:	4444      	add	r4, r8
 801ea8c:	f847 0904 	str.w	r0, [r7], #-4
 801ea90:	2d00      	cmp	r5, #0
 801ea92:	d1f1      	bne.n	801ea78 <_Index2ColorBulk_1616I+0x24>
 801ea94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea98:	08029dc8 	.word	0x08029dc8
 801ea9c:	0802a740 	.word	0x0802a740

0801eaa0 <_Color2Index_16>:
 801eaa0:	b4f0      	push	{r4, r5, r6, r7}
 801eaa2:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801eaa6:	1c79      	adds	r1, r7, #1
 801eaa8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801eaac:	1c72      	adds	r2, r6, #1
 801eaae:	2954      	cmp	r1, #84	; 0x54
 801eab0:	b2c5      	uxtb	r5, r0
 801eab2:	f105 0401 	add.w	r4, r5, #1
 801eab6:	bf94      	ite	ls
 801eab8:	2100      	movls	r1, #0
 801eaba:	2101      	movhi	r1, #1
 801eabc:	2a54      	cmp	r2, #84	; 0x54
 801eabe:	bf94      	ite	ls
 801eac0:	2200      	movls	r2, #0
 801eac2:	2201      	movhi	r2, #1
 801eac4:	0088      	lsls	r0, r1, #2
 801eac6:	2c54      	cmp	r4, #84	; 0x54
 801eac8:	bf94      	ite	ls
 801eaca:	2400      	movls	r4, #0
 801eacc:	2401      	movhi	r4, #1
 801eace:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ead2:	1853      	adds	r3, r2, r1
 801ead4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801ead8:	4423      	add	r3, r4
 801eada:	b902      	cbnz	r2, 801eade <_Color2Index_16+0x3e>
 801eadc:	b161      	cbz	r1, 801eaf8 <_Color2Index_16+0x58>
 801eade:	4437      	add	r7, r6
 801eae0:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 801eae4:	443d      	add	r5, r7
 801eae6:	4415      	add	r5, r2
 801eae8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 801eaec:	fbb5 f3f3 	udiv	r3, r5, r3
 801eaf0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 801eaf4:	bcf0      	pop	{r4, r5, r6, r7}
 801eaf6:	4770      	bx	lr
 801eaf8:	2c00      	cmp	r4, #0
 801eafa:	d1f0      	bne.n	801eade <_Color2Index_16+0x3e>
 801eafc:	e7fa      	b.n	801eaf4 <_Color2Index_16+0x54>
 801eafe:	bf00      	nop

0801eb00 <_Index2Color_16>:
 801eb00:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 801eb04:	f3c0 0380 	ubfx	r3, r0, #2, #1
 801eb08:	b430      	push	{r4, r5}
 801eb0a:	ea02 0400 	and.w	r4, r2, r0
 801eb0e:	ea03 0100 	and.w	r1, r3, r0
 801eb12:	ebc4 15c2 	rsb	r5, r4, r2, lsl #7
 801eb16:	f3c0 0240 	ubfx	r2, r0, #1, #1
 801eb1a:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 801eb1e:	ebc1 15c3 	rsb	r5, r1, r3, lsl #7
 801eb22:	ea02 0300 	and.w	r3, r2, r0
 801eb26:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801eb2a:	eb05 11c1 	add.w	r1, r5, r1, lsl #7
 801eb2e:	ebc3 10c2 	rsb	r0, r3, r2, lsl #7
 801eb32:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 801eb36:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801eb3a:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 801eb3e:	bc30      	pop	{r4, r5}
 801eb40:	4770      	bx	lr
 801eb42:	bf00      	nop

0801eb44 <_GetIndexMask_16>:
 801eb44:	200f      	movs	r0, #15
 801eb46:	4770      	bx	lr

0801eb48 <_DrawDownRect>:
 801eb48:	b510      	push	{r4, lr}
 801eb4a:	b09c      	sub	sp, #112	; 0x70
 801eb4c:	4604      	mov	r4, r0
 801eb4e:	4668      	mov	r0, sp
 801eb50:	f7fd fe62 	bl	801c818 <GUI_SaveContext_W>
 801eb54:	4b09      	ldr	r3, [pc, #36]	; (801eb7c <_DrawDownRect+0x34>)
 801eb56:	6818      	ldr	r0, [r3, #0]
 801eb58:	f7fb fb68 	bl	801a22c <LCD_SetColor>
 801eb5c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801eb60:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801eb64:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801eb68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801eb6c:	f7ff f9a8 	bl	801dec0 <GUI_DrawRect>
 801eb70:	4668      	mov	r0, sp
 801eb72:	f7fd fe5b 	bl	801c82c <GUI_RestoreContext>
 801eb76:	b01c      	add	sp, #112	; 0x70
 801eb78:	bd10      	pop	{r4, pc}
 801eb7a:	bf00      	nop
 801eb7c:	20000294 	.word	0x20000294

0801eb80 <_DrawUpRect>:
 801eb80:	b510      	push	{r4, lr}
 801eb82:	b09c      	sub	sp, #112	; 0x70
 801eb84:	4604      	mov	r4, r0
 801eb86:	4668      	mov	r0, sp
 801eb88:	f7fd fe46 	bl	801c818 <GUI_SaveContext_W>
 801eb8c:	4b09      	ldr	r3, [pc, #36]	; (801ebb4 <_DrawUpRect+0x34>)
 801eb8e:	6818      	ldr	r0, [r3, #0]
 801eb90:	f7fb fb4c 	bl	801a22c <LCD_SetColor>
 801eb94:	f9b4 0000 	ldrsh.w	r0, [r4]
 801eb98:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801eb9c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801eba0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801eba4:	f7ff f98c 	bl	801dec0 <GUI_DrawRect>
 801eba8:	4668      	mov	r0, sp
 801ebaa:	f7fd fe3f 	bl	801c82c <GUI_RestoreContext>
 801ebae:	b01c      	add	sp, #112	; 0x70
 801ebb0:	bd10      	pop	{r4, pc}
 801ebb2:	bf00      	nop
 801ebb4:	20000294 	.word	0x20000294

0801ebb8 <_DrawDown>:
 801ebb8:	b500      	push	{lr}
 801ebba:	b09f      	sub	sp, #124	; 0x7c
 801ebbc:	4668      	mov	r0, sp
 801ebbe:	f7f5 f8d9 	bl	8013d74 <WM_GetClientRect>
 801ebc2:	a802      	add	r0, sp, #8
 801ebc4:	f7fd fe28 	bl	801c818 <GUI_SaveContext_W>
 801ebc8:	4b09      	ldr	r3, [pc, #36]	; (801ebf0 <_DrawDown+0x38>)
 801ebca:	6818      	ldr	r0, [r3, #0]
 801ebcc:	f7fb fb2e 	bl	801a22c <LCD_SetColor>
 801ebd0:	f9bd 0000 	ldrsh.w	r0, [sp]
 801ebd4:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801ebd8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ebdc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801ebe0:	f7ff f96e 	bl	801dec0 <GUI_DrawRect>
 801ebe4:	a802      	add	r0, sp, #8
 801ebe6:	f7fd fe21 	bl	801c82c <GUI_RestoreContext>
 801ebea:	b01f      	add	sp, #124	; 0x7c
 801ebec:	f85d fb04 	ldr.w	pc, [sp], #4
 801ebf0:	20000294 	.word	0x20000294

0801ebf4 <_DrawUp>:
 801ebf4:	b500      	push	{lr}
 801ebf6:	b09f      	sub	sp, #124	; 0x7c
 801ebf8:	4668      	mov	r0, sp
 801ebfa:	f7f5 f8bb 	bl	8013d74 <WM_GetClientRect>
 801ebfe:	a802      	add	r0, sp, #8
 801ec00:	f7fd fe0a 	bl	801c818 <GUI_SaveContext_W>
 801ec04:	4b09      	ldr	r3, [pc, #36]	; (801ec2c <_DrawUp+0x38>)
 801ec06:	6818      	ldr	r0, [r3, #0]
 801ec08:	f7fb fb10 	bl	801a22c <LCD_SetColor>
 801ec0c:	f9bd 0000 	ldrsh.w	r0, [sp]
 801ec10:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801ec14:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ec18:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801ec1c:	f7ff f950 	bl	801dec0 <GUI_DrawRect>
 801ec20:	a802      	add	r0, sp, #8
 801ec22:	f7fd fe03 	bl	801c82c <GUI_RestoreContext>
 801ec26:	b01f      	add	sp, #124	; 0x7c
 801ec28:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec2c:	20000294 	.word	0x20000294

0801ec30 <_DrawDown>:
 801ec30:	4770      	bx	lr
 801ec32:	bf00      	nop

0801ec34 <_DrawUp>:
 801ec34:	4770      	bx	lr
 801ec36:	bf00      	nop

0801ec38 <_DrawDownRect>:
 801ec38:	4770      	bx	lr
 801ec3a:	bf00      	nop

0801ec3c <_DrawUpRect>:
 801ec3c:	4770      	bx	lr
 801ec3e:	bf00      	nop

0801ec40 <_DrawFlat>:
 801ec40:	4770      	bx	lr
 801ec42:	bf00      	nop

0801ec44 <_DrawButton>:
 801ec44:	b5b0      	push	{r4, r5, r7, lr}
 801ec46:	6883      	ldr	r3, [r0, #8]
 801ec48:	4a2c      	ldr	r2, [pc, #176]	; (801ecfc <_DrawButton+0xb8>)
 801ec4a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801ec4e:	4604      	mov	r4, r0
 801ec50:	b084      	sub	sp, #16
 801ec52:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801ec54:	f7fd fe0e 	bl	801c874 <GUI_SetColor>
 801ec58:	6820      	ldr	r0, [r4, #0]
 801ec5a:	f7fe feef 	bl	801da3c <GUI_ALLOC_LockH>
 801ec5e:	6a23      	ldr	r3, [r4, #32]
 801ec60:	9003      	str	r0, [sp, #12]
 801ec62:	781b      	ldrb	r3, [r3, #0]
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d042      	beq.n	801ecee <_DrawButton+0xaa>
 801ec68:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 801ec6c:	2b02      	cmp	r3, #2
 801ec6e:	d03e      	beq.n	801ecee <_DrawButton+0xaa>
 801ec70:	69e0      	ldr	r0, [r4, #28]
 801ec72:	6921      	ldr	r1, [r4, #16]
 801ec74:	69a2      	ldr	r2, [r4, #24]
 801ec76:	f7fc fccd 	bl	801b614 <GUI_DrawHLine>
 801ec7a:	6920      	ldr	r0, [r4, #16]
 801ec7c:	6961      	ldr	r1, [r4, #20]
 801ec7e:	69e2      	ldr	r2, [r4, #28]
 801ec80:	f7fc fd1e 	bl	801b6c0 <GUI_DrawVLine>
 801ec84:	6961      	ldr	r1, [r4, #20]
 801ec86:	69a0      	ldr	r0, [r4, #24]
 801ec88:	69e2      	ldr	r2, [r4, #28]
 801ec8a:	f7fc fd19 	bl	801b6c0 <GUI_DrawVLine>
 801ec8e:	6a23      	ldr	r3, [r4, #32]
 801ec90:	6961      	ldr	r1, [r4, #20]
 801ec92:	69e7      	ldr	r7, [r4, #28]
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	440f      	add	r7, r1
 801ec98:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801ec9c:	2b01      	cmp	r3, #1
 801ec9e:	ea4f 0767 	mov.w	r7, r7, asr #1
 801eca2:	d106      	bne.n	801ecb2 <_DrawButton+0x6e>
 801eca4:	9b03      	ldr	r3, [sp, #12]
 801eca6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801ecaa:	2b02      	cmp	r3, #2
 801ecac:	bf18      	it	ne
 801ecae:	f101 31ff 	addne.w	r1, r1, #4294967295
 801ecb2:	68ab      	ldr	r3, [r5, #8]
 801ecb4:	9300      	str	r3, [sp, #0]
 801ecb6:	6920      	ldr	r0, [r4, #16]
 801ecb8:	69a2      	ldr	r2, [r4, #24]
 801ecba:	68eb      	ldr	r3, [r5, #12]
 801ecbc:	9301      	str	r3, [sp, #4]
 801ecbe:	3101      	adds	r1, #1
 801ecc0:	463b      	mov	r3, r7
 801ecc2:	3001      	adds	r0, #1
 801ecc4:	3a01      	subs	r2, #1
 801ecc6:	f002 fe23 	bl	8021910 <GUI_DrawGradientV>
 801ecca:	692b      	ldr	r3, [r5, #16]
 801eccc:	9300      	str	r3, [sp, #0]
 801ecce:	6920      	ldr	r0, [r4, #16]
 801ecd0:	69a2      	ldr	r2, [r4, #24]
 801ecd2:	69e3      	ldr	r3, [r4, #28]
 801ecd4:	6969      	ldr	r1, [r5, #20]
 801ecd6:	9101      	str	r1, [sp, #4]
 801ecd8:	3a01      	subs	r2, #1
 801ecda:	1c79      	adds	r1, r7, #1
 801ecdc:	3b01      	subs	r3, #1
 801ecde:	3001      	adds	r0, #1
 801ece0:	f002 fe16 	bl	8021910 <GUI_DrawGradientV>
 801ece4:	a803      	add	r0, sp, #12
 801ece6:	f7fe febb 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ecea:	b004      	add	sp, #16
 801ecec:	bdb0      	pop	{r4, r5, r7, pc}
 801ecee:	6960      	ldr	r0, [r4, #20]
 801ecf0:	6921      	ldr	r1, [r4, #16]
 801ecf2:	69a2      	ldr	r2, [r4, #24]
 801ecf4:	f7fc fc8e 	bl	801b614 <GUI_DrawHLine>
 801ecf8:	e7ba      	b.n	801ec70 <_DrawButton+0x2c>
 801ecfa:	bf00      	nop
 801ecfc:	08029ff0 	.word	0x08029ff0

0801ed00 <_DrawArrow>:
 801ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed04:	4a38      	ldr	r2, [pc, #224]	; (801ede8 <_DrawArrow+0xe8>)
 801ed06:	6883      	ldr	r3, [r0, #8]
 801ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ed0c:	4606      	mov	r6, r0
 801ed0e:	b083      	sub	sp, #12
 801ed10:	6998      	ldr	r0, [r3, #24]
 801ed12:	f7fd fdaf 	bl	801c874 <GUI_SetColor>
 801ed16:	6830      	ldr	r0, [r6, #0]
 801ed18:	f7f5 ff04 	bl	8014b24 <WM_GetWindowSizeY>
 801ed1c:	69f2      	ldr	r2, [r6, #28]
 801ed1e:	6973      	ldr	r3, [r6, #20]
 801ed20:	4607      	mov	r7, r0
 801ed22:	6830      	ldr	r0, [r6, #0]
 801ed24:	ebc3 0802 	rsb	r8, r3, r2
 801ed28:	f7fe fe88 	bl	801da3c <GUI_ALLOC_LockH>
 801ed2c:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 801ed30:	9001      	str	r0, [sp, #4]
 801ed32:	f1b9 0f02 	cmp.w	r9, #2
 801ed36:	d14b      	bne.n	801edd0 <_DrawArrow+0xd0>
 801ed38:	4b2c      	ldr	r3, [pc, #176]	; (801edec <_DrawArrow+0xec>)
 801ed3a:	17fc      	asrs	r4, r7, #31
 801ed3c:	fb83 2307 	smull	r2, r3, r3, r7
 801ed40:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801ed44:	a801      	add	r0, sp, #4
 801ed46:	f7fe fe8b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ed4a:	6a31      	ldr	r1, [r6, #32]
 801ed4c:	43e2      	mvns	r2, r4
 801ed4e:	eb02 0308 	add.w	r3, r2, r8
 801ed52:	7809      	ldrb	r1, [r1, #0]
 801ed54:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ed58:	105b      	asrs	r3, r3, #1
 801ed5a:	b9e1      	cbnz	r1, 801ed96 <_DrawArrow+0x96>
 801ed5c:	69f5      	ldr	r5, [r6, #28]
 801ed5e:	1aed      	subs	r5, r5, r3
 801ed60:	3d01      	subs	r5, #1
 801ed62:	f04f 38ff 	mov.w	r8, #4294967295
 801ed66:	6933      	ldr	r3, [r6, #16]
 801ed68:	69b7      	ldr	r7, [r6, #24]
 801ed6a:	1aff      	subs	r7, r7, r3
 801ed6c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801ed70:	2c00      	cmp	r4, #0
 801ed72:	eb03 0767 	add.w	r7, r3, r7, asr #1
 801ed76:	db0b      	blt.n	801ed90 <_DrawArrow+0x90>
 801ed78:	1b3e      	subs	r6, r7, r4
 801ed7a:	4628      	mov	r0, r5
 801ed7c:	4631      	mov	r1, r6
 801ed7e:	19e2      	adds	r2, r4, r7
 801ed80:	3c01      	subs	r4, #1
 801ed82:	f7fc fc47 	bl	801b614 <GUI_DrawHLine>
 801ed86:	1c63      	adds	r3, r4, #1
 801ed88:	4445      	add	r5, r8
 801ed8a:	f106 0601 	add.w	r6, r6, #1
 801ed8e:	d1f4      	bne.n	801ed7a <_DrawArrow+0x7a>
 801ed90:	b003      	add	sp, #12
 801ed92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed96:	6975      	ldr	r5, [r6, #20]
 801ed98:	07f9      	lsls	r1, r7, #31
 801ed9a:	441d      	add	r5, r3
 801ed9c:	d520      	bpl.n	801ede0 <_DrawArrow+0xe0>
 801ed9e:	f1b9 0f02 	cmp.w	r9, #2
 801eda2:	d01d      	beq.n	801ede0 <_DrawArrow+0xe0>
 801eda4:	f108 0101 	add.w	r1, r8, #1
 801eda8:	2900      	cmp	r1, #0
 801edaa:	4608      	mov	r0, r1
 801edac:	bfb8      	it	lt
 801edae:	f108 0004 	addlt.w	r0, r8, #4
 801edb2:	ebb4 0fa0 	cmp.w	r4, r0, asr #2
 801edb6:	bfbc      	itt	lt
 801edb8:	3401      	addlt	r4, #1
 801edba:	43e2      	mvnlt	r2, r4
 801edbc:	440a      	add	r2, r1
 801edbe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801edc2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801edc6:	da0b      	bge.n	801ede0 <_DrawArrow+0xe0>
 801edc8:	3501      	adds	r5, #1
 801edca:	f04f 0801 	mov.w	r8, #1
 801edce:	e7ca      	b.n	801ed66 <_DrawArrow+0x66>
 801edd0:	4c07      	ldr	r4, [pc, #28]	; (801edf0 <_DrawArrow+0xf0>)
 801edd2:	fb84 3407 	smull	r3, r4, r4, r7
 801edd6:	443c      	add	r4, r7
 801edd8:	17fb      	asrs	r3, r7, #31
 801edda:	ebc3 04a4 	rsb	r4, r3, r4, asr #2
 801edde:	e7b1      	b.n	801ed44 <_DrawArrow+0x44>
 801ede0:	f04f 0801 	mov.w	r8, #1
 801ede4:	e7bf      	b.n	801ed66 <_DrawArrow+0x66>
 801ede6:	bf00      	nop
 801ede8:	08029ff0 	.word	0x08029ff0
 801edec:	66666667 	.word	0x66666667
 801edf0:	92492493 	.word	0x92492493

0801edf4 <SPINBOX_DrawSkinFlex>:
 801edf4:	6843      	ldr	r3, [r0, #4]
 801edf6:	b570      	push	{r4, r5, r6, lr}
 801edf8:	4604      	mov	r4, r0
 801edfa:	2b1d      	cmp	r3, #29
 801edfc:	d812      	bhi.n	801ee24 <SPINBOX_DrawSkinFlex+0x30>
 801edfe:	e8df f003 	tbb	[pc, r3]
 801ee02:	1117      	.short	0x1117
 801ee04:	540f0f11 	.word	0x540f0f11
 801ee08:	13131111 	.word	0x13131111
 801ee0c:	11112411 	.word	0x11112411
 801ee10:	11111111 	.word	0x11111111
 801ee14:	11111111 	.word	0x11111111
 801ee18:	11111111 	.word	0x11111111
 801ee1c:	17111111 	.word	0x17111111
 801ee20:	f7ff ff6e 	bl	801ed00 <_DrawArrow>
 801ee24:	2000      	movs	r0, #0
 801ee26:	bd70      	pop	{r4, r5, r6, pc}
 801ee28:	f7ff ff0c 	bl	801ec44 <_DrawButton>
 801ee2c:	2000      	movs	r0, #0
 801ee2e:	bd70      	pop	{r4, r5, r6, pc}
 801ee30:	492f      	ldr	r1, [pc, #188]	; (801eef0 <SPINBOX_DrawSkinFlex+0xfc>)
 801ee32:	6800      	ldr	r0, [r0, #0]
 801ee34:	f000 f922 	bl	801f07c <SPINBOX__ApplyProps>
 801ee38:	6820      	ldr	r0, [r4, #0]
 801ee3a:	f7f4 fa6f 	bl	801331c <WM_SetHasTrans>
 801ee3e:	6820      	ldr	r0, [r4, #0]
 801ee40:	492c      	ldr	r1, [pc, #176]	; (801eef4 <SPINBOX_DrawSkinFlex+0x100>)
 801ee42:	f7ef f94b 	bl	800e0dc <WIDGET_SetEffect>
 801ee46:	2000      	movs	r0, #0
 801ee48:	bd70      	pop	{r4, r5, r6, pc}
 801ee4a:	4e29      	ldr	r6, [pc, #164]	; (801eef0 <SPINBOX_DrawSkinFlex+0xfc>)
 801ee4c:	2500      	movs	r5, #0
 801ee4e:	68a3      	ldr	r3, [r4, #8]
 801ee50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ee54:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ee58:	f7fd fd0c 	bl	801c874 <GUI_SetColor>
 801ee5c:	2d00      	cmp	r5, #0
 801ee5e:	d02e      	beq.n	801eebe <SPINBOX_DrawSkinFlex+0xca>
 801ee60:	6960      	ldr	r0, [r4, #20]
 801ee62:	6921      	ldr	r1, [r4, #16]
 801ee64:	69a2      	ldr	r2, [r4, #24]
 801ee66:	4428      	add	r0, r5
 801ee68:	3102      	adds	r1, #2
 801ee6a:	3a02      	subs	r2, #2
 801ee6c:	f7fc fbd2 	bl	801b614 <GUI_DrawHLine>
 801ee70:	69e0      	ldr	r0, [r4, #28]
 801ee72:	6921      	ldr	r1, [r4, #16]
 801ee74:	69a2      	ldr	r2, [r4, #24]
 801ee76:	1b40      	subs	r0, r0, r5
 801ee78:	3102      	adds	r1, #2
 801ee7a:	3a02      	subs	r2, #2
 801ee7c:	f7fc fbca 	bl	801b614 <GUI_DrawHLine>
 801ee80:	6920      	ldr	r0, [r4, #16]
 801ee82:	6961      	ldr	r1, [r4, #20]
 801ee84:	69e2      	ldr	r2, [r4, #28]
 801ee86:	4428      	add	r0, r5
 801ee88:	3102      	adds	r1, #2
 801ee8a:	3a02      	subs	r2, #2
 801ee8c:	f7fc fc18 	bl	801b6c0 <GUI_DrawVLine>
 801ee90:	69a0      	ldr	r0, [r4, #24]
 801ee92:	6961      	ldr	r1, [r4, #20]
 801ee94:	69e2      	ldr	r2, [r4, #28]
 801ee96:	1b40      	subs	r0, r0, r5
 801ee98:	3102      	adds	r1, #2
 801ee9a:	3501      	adds	r5, #1
 801ee9c:	3a02      	subs	r2, #2
 801ee9e:	f7fc fc0f 	bl	801b6c0 <GUI_DrawVLine>
 801eea2:	2d02      	cmp	r5, #2
 801eea4:	d1d3      	bne.n	801ee4e <SPINBOX_DrawSkinFlex+0x5a>
 801eea6:	2000      	movs	r0, #0
 801eea8:	bd70      	pop	{r4, r5, r6, pc}
 801eeaa:	6882      	ldr	r2, [r0, #8]
 801eeac:	4b10      	ldr	r3, [pc, #64]	; (801eef0 <SPINBOX_DrawSkinFlex+0xfc>)
 801eeae:	6800      	ldr	r0, [r0, #0]
 801eeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eeb4:	69d9      	ldr	r1, [r3, #28]
 801eeb6:	f7f1 fa95 	bl	80103e4 <SPINBOX__DrawBk>
 801eeba:	2000      	movs	r0, #0
 801eebc:	bd70      	pop	{r4, r5, r6, pc}
 801eebe:	6920      	ldr	r0, [r4, #16]
 801eec0:	6961      	ldr	r1, [r4, #20]
 801eec2:	3001      	adds	r0, #1
 801eec4:	3101      	adds	r1, #1
 801eec6:	f7fc fbd1 	bl	801b66c <GUI_DrawPixel>
 801eeca:	6920      	ldr	r0, [r4, #16]
 801eecc:	69e1      	ldr	r1, [r4, #28]
 801eece:	3001      	adds	r0, #1
 801eed0:	3901      	subs	r1, #1
 801eed2:	f7fc fbcb 	bl	801b66c <GUI_DrawPixel>
 801eed6:	69a0      	ldr	r0, [r4, #24]
 801eed8:	6961      	ldr	r1, [r4, #20]
 801eeda:	3801      	subs	r0, #1
 801eedc:	3101      	adds	r1, #1
 801eede:	f7fc fbc5 	bl	801b66c <GUI_DrawPixel>
 801eee2:	69a0      	ldr	r0, [r4, #24]
 801eee4:	69e1      	ldr	r1, [r4, #28]
 801eee6:	3801      	subs	r0, #1
 801eee8:	3901      	subs	r1, #1
 801eeea:	f7fc fbbf 	bl	801b66c <GUI_DrawPixel>
 801eeee:	e7b7      	b.n	801ee60 <SPINBOX_DrawSkinFlex+0x6c>
 801eef0:	08029ff0 	.word	0x08029ff0
 801eef4:	0802aad8 	.word	0x0802aad8

0801eef8 <_Create>:
 801eef8:	b570      	push	{r4, r5, r6, lr}
 801eefa:	b08a      	sub	sp, #40	; 0x28
 801eefc:	2400      	movs	r4, #0
 801eefe:	4606      	mov	r6, r0
 801ef00:	9401      	str	r4, [sp, #4]
 801ef02:	9402      	str	r4, [sp, #8]
 801ef04:	9403      	str	r4, [sp, #12]
 801ef06:	9404      	str	r4, [sp, #16]
 801ef08:	9405      	str	r4, [sp, #20]
 801ef0a:	9406      	str	r4, [sp, #24]
 801ef0c:	9407      	str	r4, [sp, #28]
 801ef0e:	9408      	str	r4, [sp, #32]
 801ef10:	9409      	str	r4, [sp, #36]	; 0x24
 801ef12:	f7fe fd93 	bl	801da3c <GUI_ALLOC_LockH>
 801ef16:	ab0a      	add	r3, sp, #40	; 0x28
 801ef18:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 801ef1c:	f843 0d28 	str.w	r0, [r3, #-40]!
 801ef20:	4668      	mov	r0, sp
 801ef22:	6895      	ldr	r5, [r2, #8]
 801ef24:	f7fe fd9c 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ef28:	a80a      	add	r0, sp, #40	; 0x28
 801ef2a:	9402      	str	r4, [sp, #8]
 801ef2c:	f840 6d24 	str.w	r6, [r0, #-36]!
 801ef30:	682b      	ldr	r3, [r5, #0]
 801ef32:	4798      	blx	r3
 801ef34:	b00a      	add	sp, #40	; 0x28
 801ef36:	bd70      	pop	{r4, r5, r6, pc}

0801ef38 <_Paint>:
 801ef38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef3c:	b08c      	sub	sp, #48	; 0x30
 801ef3e:	4604      	mov	r4, r0
 801ef40:	f7fe fd7c 	bl	801da3c <GUI_ALLOC_LockH>
 801ef44:	4603      	mov	r3, r0
 801ef46:	a80c      	add	r0, sp, #48	; 0x30
 801ef48:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801ef4c:	f840 3d2c 	str.w	r3, [r0, #-44]!
 801ef50:	f893 70a3 	ldrb.w	r7, [r3, #163]	; 0xa3
 801ef54:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 801ef58:	f893 608c 	ldrb.w	r6, [r3, #140]	; 0x8c
 801ef5c:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 801ef60:	f7fe fd7e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ef64:	4620      	mov	r0, r4
 801ef66:	9402      	str	r4, [sp, #8]
 801ef68:	f7f4 f80a 	bl	8012f80 <WM__IsEnabled>
 801ef6c:	2800      	cmp	r0, #0
 801ef6e:	d156      	bne.n	801f01e <_Paint+0xe6>
 801ef70:	2303      	movs	r3, #3
 801ef72:	9304      	str	r3, [sp, #16]
 801ef74:	4620      	mov	r0, r4
 801ef76:	f7f5 fdb7 	bl	8014ae8 <WM_GetWindowSizeX>
 801ef7a:	4681      	mov	r9, r0
 801ef7c:	4620      	mov	r0, r4
 801ef7e:	f7f5 fdd1 	bl	8014b24 <WM_GetWindowSizeY>
 801ef82:	2300      	movs	r3, #0
 801ef84:	3801      	subs	r0, #1
 801ef86:	f109 31ff 	add.w	r1, r9, #4294967295
 801ef8a:	220b      	movs	r2, #11
 801ef8c:	9009      	str	r0, [sp, #36]	; 0x24
 801ef8e:	9108      	str	r1, [sp, #32]
 801ef90:	9306      	str	r3, [sp, #24]
 801ef92:	9307      	str	r3, [sp, #28]
 801ef94:	9203      	str	r2, [sp, #12]
 801ef96:	a802      	add	r0, sp, #8
 801ef98:	47a8      	blx	r5
 801ef9a:	2e01      	cmp	r6, #1
 801ef9c:	d065      	beq.n	801f06a <_Paint+0x132>
 801ef9e:	d368      	bcc.n	801f072 <_Paint+0x13a>
 801efa0:	2e02      	cmp	r6, #2
 801efa2:	d034      	beq.n	801f00e <_Paint+0xd6>
 801efa4:	2305      	movs	r3, #5
 801efa6:	9303      	str	r3, [sp, #12]
 801efa8:	a802      	add	r0, sp, #8
 801efaa:	47a8      	blx	r5
 801efac:	9b04      	ldr	r3, [sp, #16]
 801efae:	2b03      	cmp	r3, #3
 801efb0:	d046      	beq.n	801f040 <_Paint+0x108>
 801efb2:	07fa      	lsls	r2, r7, #31
 801efb4:	d501      	bpl.n	801efba <_Paint+0x82>
 801efb6:	2300      	movs	r3, #0
 801efb8:	9304      	str	r3, [sp, #16]
 801efba:	ab0c      	add	r3, sp, #48	; 0x30
 801efbc:	2600      	movs	r6, #0
 801efbe:	f803 6d30 	strb.w	r6, [r3, #-48]!
 801efc2:	a902      	add	r1, sp, #8
 801efc4:	4620      	mov	r0, r4
 801efc6:	930a      	str	r3, [sp, #40]	; 0x28
 801efc8:	f7f2 f840 	bl	801104c <SPINBOX__GetButtonRectEx>
 801efcc:	2309      	movs	r3, #9
 801efce:	9303      	str	r3, [sp, #12]
 801efd0:	a802      	add	r0, sp, #8
 801efd2:	47a8      	blx	r5
 801efd4:	2304      	movs	r3, #4
 801efd6:	9303      	str	r3, [sp, #12]
 801efd8:	a802      	add	r0, sp, #8
 801efda:	47a8      	blx	r5
 801efdc:	2301      	movs	r3, #1
 801efde:	f88d 3000 	strb.w	r3, [sp]
 801efe2:	07bb      	lsls	r3, r7, #30
 801efe4:	d411      	bmi.n	801f00a <_Paint+0xd2>
 801efe6:	2302      	movs	r3, #2
 801efe8:	9304      	str	r3, [sp, #16]
 801efea:	a902      	add	r1, sp, #8
 801efec:	4620      	mov	r0, r4
 801efee:	f7f2 f82d 	bl	801104c <SPINBOX__GetButtonRectEx>
 801eff2:	2308      	movs	r3, #8
 801eff4:	9303      	str	r3, [sp, #12]
 801eff6:	eb0d 0003 	add.w	r0, sp, r3
 801effa:	47a8      	blx	r5
 801effc:	2303      	movs	r3, #3
 801effe:	a802      	add	r0, sp, #8
 801f000:	9303      	str	r3, [sp, #12]
 801f002:	47a8      	blx	r5
 801f004:	b00c      	add	sp, #48	; 0x30
 801f006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f00a:	9604      	str	r6, [sp, #16]
 801f00c:	e7ed      	b.n	801efea <_Paint+0xb2>
 801f00e:	9a08      	ldr	r2, [sp, #32]
 801f010:	9b06      	ldr	r3, [sp, #24]
 801f012:	ebc8 0202 	rsb	r2, r8, r2
 801f016:	4443      	add	r3, r8
 801f018:	9208      	str	r2, [sp, #32]
 801f01a:	9306      	str	r3, [sp, #24]
 801f01c:	e7c2      	b.n	801efa4 <_Paint+0x6c>
 801f01e:	4620      	mov	r0, r4
 801f020:	f7f5 fa60 	bl	80144e4 <WM_HasFocus>
 801f024:	4682      	mov	sl, r0
 801f026:	4648      	mov	r0, r9
 801f028:	f7f5 fa5c 	bl	80144e4 <WM_HasFocus>
 801f02c:	f1ba 0f00 	cmp.w	sl, #0
 801f030:	d103      	bne.n	801f03a <_Paint+0x102>
 801f032:	b910      	cbnz	r0, 801f03a <_Paint+0x102>
 801f034:	2302      	movs	r3, #2
 801f036:	9304      	str	r3, [sp, #16]
 801f038:	e79c      	b.n	801ef74 <_Paint+0x3c>
 801f03a:	2301      	movs	r3, #1
 801f03c:	9304      	str	r3, [sp, #16]
 801f03e:	e799      	b.n	801ef74 <_Paint+0x3c>
 801f040:	ab0c      	add	r3, sp, #48	; 0x30
 801f042:	2200      	movs	r2, #0
 801f044:	f803 2d30 	strb.w	r2, [r3, #-48]!
 801f048:	a902      	add	r1, sp, #8
 801f04a:	4620      	mov	r0, r4
 801f04c:	930a      	str	r3, [sp, #40]	; 0x28
 801f04e:	f7f1 fffd 	bl	801104c <SPINBOX__GetButtonRectEx>
 801f052:	2309      	movs	r3, #9
 801f054:	9303      	str	r3, [sp, #12]
 801f056:	a802      	add	r0, sp, #8
 801f058:	47a8      	blx	r5
 801f05a:	2304      	movs	r3, #4
 801f05c:	9303      	str	r3, [sp, #12]
 801f05e:	a802      	add	r0, sp, #8
 801f060:	47a8      	blx	r5
 801f062:	2301      	movs	r3, #1
 801f064:	f88d 3000 	strb.w	r3, [sp]
 801f068:	e7bf      	b.n	801efea <_Paint+0xb2>
 801f06a:	9b06      	ldr	r3, [sp, #24]
 801f06c:	4443      	add	r3, r8
 801f06e:	9306      	str	r3, [sp, #24]
 801f070:	e798      	b.n	801efa4 <_Paint+0x6c>
 801f072:	9b08      	ldr	r3, [sp, #32]
 801f074:	ebc8 0303 	rsb	r3, r8, r3
 801f078:	9308      	str	r3, [sp, #32]
 801f07a:	e793      	b.n	801efa4 <_Paint+0x6c>

0801f07c <SPINBOX__ApplyProps>:
 801f07c:	b530      	push	{r4, r5, lr}
 801f07e:	b083      	sub	sp, #12
 801f080:	460d      	mov	r5, r1
 801f082:	f7fe fcdb 	bl	801da3c <GUI_ALLOC_LockH>
 801f086:	ab02      	add	r3, sp, #8
 801f088:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 801f08c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801f090:	4618      	mov	r0, r3
 801f092:	f7fe fce5 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f096:	68eb      	ldr	r3, [r5, #12]
 801f098:	4620      	mov	r0, r4
 801f09a:	69da      	ldr	r2, [r3, #28]
 801f09c:	2100      	movs	r1, #0
 801f09e:	f7f3 fad3 	bl	8012648 <EDIT_SetBkColor>
 801f0a2:	68eb      	ldr	r3, [r5, #12]
 801f0a4:	4620      	mov	r0, r4
 801f0a6:	6a1a      	ldr	r2, [r3, #32]
 801f0a8:	2100      	movs	r1, #0
 801f0aa:	f7f3 faed 	bl	8012688 <EDIT_SetTextColor>
 801f0ae:	68ab      	ldr	r3, [r5, #8]
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	69da      	ldr	r2, [r3, #28]
 801f0b4:	2101      	movs	r1, #1
 801f0b6:	f7f3 fac7 	bl	8012648 <EDIT_SetBkColor>
 801f0ba:	68ab      	ldr	r3, [r5, #8]
 801f0bc:	4620      	mov	r0, r4
 801f0be:	6a1a      	ldr	r2, [r3, #32]
 801f0c0:	2101      	movs	r1, #1
 801f0c2:	f7f3 fae1 	bl	8012688 <EDIT_SetTextColor>
 801f0c6:	b003      	add	sp, #12
 801f0c8:	bd30      	pop	{r4, r5, pc}
 801f0ca:	bf00      	nop

0801f0cc <SCROLLBAR_Callback>:
 801f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d0:	6845      	ldr	r5, [r0, #4]
 801f0d2:	b08f      	sub	sp, #60	; 0x3c
 801f0d4:	4604      	mov	r4, r0
 801f0d6:	4601      	mov	r1, r0
 801f0d8:	4628      	mov	r0, r5
 801f0da:	f7ee fe81 	bl	800dde0 <WIDGET_HandleActive>
 801f0de:	b328      	cbz	r0, 801f12c <SCROLLBAR_Callback+0x60>
 801f0e0:	6823      	ldr	r3, [r4, #0]
 801f0e2:	2b23      	cmp	r3, #35	; 0x23
 801f0e4:	f000 8081 	beq.w	801f1ea <SCROLLBAR_Callback+0x11e>
 801f0e8:	dc12      	bgt.n	801f110 <SCROLLBAR_Callback+0x44>
 801f0ea:	2b0e      	cmp	r3, #14
 801f0ec:	d021      	beq.n	801f132 <SCROLLBAR_Callback+0x66>
 801f0ee:	2b0f      	cmp	r3, #15
 801f0f0:	f000 808c 	beq.w	801f20c <SCROLLBAR_Callback+0x140>
 801f0f4:	2b0b      	cmp	r3, #11
 801f0f6:	d116      	bne.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f0f8:	4628      	mov	r0, r5
 801f0fa:	f7f5 f939 	bl	8014370 <WM_GetScrollPartner>
 801f0fe:	f7f7 f927 	bl	8016350 <WM_InvalidateWindow>
 801f102:	4628      	mov	r0, r5
 801f104:	f7f5 f896 	bl	8014234 <WM_GetParent>
 801f108:	2125      	movs	r1, #37	; 0x25
 801f10a:	f7f5 fa77 	bl	80145fc <WM_SendMessageNoPara>
 801f10e:	e00a      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f110:	f240 1213 	movw	r2, #275	; 0x113
 801f114:	4293      	cmp	r3, r2
 801f116:	d047      	beq.n	801f1a8 <SCROLLBAR_Callback+0xdc>
 801f118:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801f11c:	f000 80a2 	beq.w	801f264 <SCROLLBAR_Callback+0x198>
 801f120:	2b24      	cmp	r3, #36	; 0x24
 801f122:	f000 8081 	beq.w	801f228 <SCROLLBAR_Callback+0x15c>
 801f126:	4620      	mov	r0, r4
 801f128:	f7f7 fe78 	bl	8016e1c <WM_DefaultProc>
 801f12c:	b00f      	add	sp, #60	; 0x3c
 801f12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f132:	4628      	mov	r0, r5
 801f134:	f7fe fc82 	bl	801da3c <GUI_ALLOC_LockH>
 801f138:	ab0e      	add	r3, sp, #56	; 0x38
 801f13a:	6d46      	ldr	r6, [r0, #84]	; 0x54
 801f13c:	f843 0d2c 	str.w	r0, [r3, #-44]!
 801f140:	4618      	mov	r0, r3
 801f142:	f7fe fc8d 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f146:	68e3      	ldr	r3, [r4, #12]
 801f148:	685a      	ldr	r2, [r3, #4]
 801f14a:	681b      	ldr	r3, [r3, #0]
 801f14c:	2a00      	cmp	r2, #0
 801f14e:	ddea      	ble.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f150:	3b10      	subs	r3, #16
 801f152:	2b12      	cmp	r3, #18
 801f154:	d8e7      	bhi.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f156:	a201      	add	r2, pc, #4	; (adr r2, 801f15c <SCROLLBAR_Callback+0x90>)
 801f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f15c:	0801f3af 	.word	0x0801f3af
 801f160:	0801f3af 	.word	0x0801f3af
 801f164:	0801f465 	.word	0x0801f465
 801f168:	0801f465 	.word	0x0801f465
 801f16c:	0801f127 	.word	0x0801f127
 801f170:	0801f127 	.word	0x0801f127
 801f174:	0801f127 	.word	0x0801f127
 801f178:	0801f127 	.word	0x0801f127
 801f17c:	0801f127 	.word	0x0801f127
 801f180:	0801f127 	.word	0x0801f127
 801f184:	0801f127 	.word	0x0801f127
 801f188:	0801f127 	.word	0x0801f127
 801f18c:	0801f127 	.word	0x0801f127
 801f190:	0801f127 	.word	0x0801f127
 801f194:	0801f127 	.word	0x0801f127
 801f198:	0801f127 	.word	0x0801f127
 801f19c:	0801f127 	.word	0x0801f127
 801f1a0:	0801f417 	.word	0x0801f417
 801f1a4:	0801f4a9 	.word	0x0801f4a9
 801f1a8:	4628      	mov	r0, r5
 801f1aa:	f7fe fc47 	bl	801da3c <GUI_ALLOC_LockH>
 801f1ae:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 801f1b0:	9003      	str	r0, [sp, #12]
 801f1b2:	2e00      	cmp	r6, #0
 801f1b4:	f000 80c8 	beq.w	801f348 <SCROLLBAR_Callback+0x27c>
 801f1b8:	2d00      	cmp	r5, #0
 801f1ba:	f040 81bb 	bne.w	801f534 <SCROLLBAR_Callback+0x468>
 801f1be:	2e00      	cmp	r6, #0
 801f1c0:	f340 80c2 	ble.w	801f348 <SCROLLBAR_Callback+0x27c>
 801f1c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f1c6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801f1c8:	4293      	cmp	r3, r2
 801f1ca:	bfb4      	ite	lt
 801f1cc:	2300      	movlt	r3, #0
 801f1ce:	2301      	movge	r3, #1
 801f1d0:	dd00      	ble.n	801f1d4 <SCROLLBAR_Callback+0x108>
 801f1d2:	6502      	str	r2, [r0, #80]	; 0x50
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	f040 817d 	bne.w	801f4d4 <SCROLLBAR_Callback+0x408>
 801f1da:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f1dc:	2132      	movs	r1, #50	; 0x32
 801f1de:	f7f4 f87f 	bl	80132e0 <WM_RestartTimer>
 801f1e2:	a803      	add	r0, sp, #12
 801f1e4:	f7fe fc3c 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f1e8:	e79d      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f1ea:	4628      	mov	r0, r5
 801f1ec:	f7fe fc26 	bl	801da3c <GUI_ALLOC_LockH>
 801f1f0:	9005      	str	r0, [sp, #20]
 801f1f2:	2800      	cmp	r0, #0
 801f1f4:	d097      	beq.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f1f6:	68e3      	ldr	r3, [r4, #12]
 801f1f8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 801f1fa:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801f1fc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f1fe:	605a      	str	r2, [r3, #4]
 801f200:	601d      	str	r5, [r3, #0]
 801f202:	6099      	str	r1, [r3, #8]
 801f204:	a805      	add	r0, sp, #20
 801f206:	f7fe fc2b 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f20a:	e78c      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f20c:	4628      	mov	r0, r5
 801f20e:	f7fe fc15 	bl	801da3c <GUI_ALLOC_LockH>
 801f212:	9005      	str	r0, [sp, #20]
 801f214:	2800      	cmp	r0, #0
 801f216:	d089      	beq.n	801f12c <SCROLLBAR_Callback+0x60>
 801f218:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801f21a:	a805      	add	r0, sp, #20
 801f21c:	681c      	ldr	r4, [r3, #0]
 801f21e:	f7fe fc1f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f222:	4628      	mov	r0, r5
 801f224:	47a0      	blx	r4
 801f226:	e781      	b.n	801f12c <SCROLLBAR_Callback+0x60>
 801f228:	4628      	mov	r0, r5
 801f22a:	68e6      	ldr	r6, [r4, #12]
 801f22c:	f7fe fc06 	bl	801da3c <GUI_ALLOC_LockH>
 801f230:	6833      	ldr	r3, [r6, #0]
 801f232:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801f234:	9005      	str	r0, [sp, #20]
 801f236:	4293      	cmp	r3, r2
 801f238:	f040 80b6 	bne.w	801f3a8 <SCROLLBAR_Callback+0x2dc>
 801f23c:	6d47      	ldr	r7, [r0, #84]	; 0x54
 801f23e:	68b1      	ldr	r1, [r6, #8]
 801f240:	6872      	ldr	r2, [r6, #4]
 801f242:	428f      	cmp	r7, r1
 801f244:	f000 8156 	beq.w	801f4f4 <SCROLLBAR_Callback+0x428>
 801f248:	64c3      	str	r3, [r0, #76]	; 0x4c
 801f24a:	6541      	str	r1, [r0, #84]	; 0x54
 801f24c:	6502      	str	r2, [r0, #80]	; 0x50
 801f24e:	4628      	mov	r0, r5
 801f250:	f7f7 f87e 	bl	8016350 <WM_InvalidateWindow>
 801f254:	a805      	add	r0, sp, #20
 801f256:	f7fe fc03 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f25a:	4628      	mov	r0, r5
 801f25c:	2105      	movs	r1, #5
 801f25e:	f7f5 f97b 	bl	8014558 <WM_NotifyParent>
 801f262:	e760      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f264:	68e6      	ldr	r6, [r4, #12]
 801f266:	2e00      	cmp	r6, #0
 801f268:	f43f af5d 	beq.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f26c:	7a37      	ldrb	r7, [r6, #8]
 801f26e:	4628      	mov	r0, r5
 801f270:	2f00      	cmp	r7, #0
 801f272:	d072      	beq.n	801f35a <SCROLLBAR_Callback+0x28e>
 801f274:	f7fe fbe2 	bl	801da3c <GUI_ALLOC_LockH>
 801f278:	9003      	str	r0, [sp, #12]
 801f27a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801f27c:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 801f280:	a905      	add	r1, sp, #20
 801f282:	4628      	mov	r0, r5
 801f284:	4798      	blx	r3
 801f286:	9b03      	ldr	r3, [sp, #12]
 801f288:	6831      	ldr	r1, [r6, #0]
 801f28a:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801f28e:	6870      	ldr	r0, [r6, #4]
 801f290:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 801f292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f294:	f018 0f08 	tst.w	r8, #8
 801f298:	bf14      	ite	ne
 801f29a:	e886 0003 	stmiane.w	r6, {r0, r1}
 801f29e:	460e      	moveq	r6, r1
 801f2a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801f2a2:	bf18      	it	ne
 801f2a4:	4606      	movne	r6, r0
 801f2a6:	2903      	cmp	r1, #3
 801f2a8:	ebc7 0b02 	rsb	fp, r7, r2
 801f2ac:	f000 81c0 	beq.w	801f630 <SCROLLBAR_Callback+0x564>
 801f2b0:	9806      	ldr	r0, [sp, #24]
 801f2b2:	42b0      	cmp	r0, r6
 801f2b4:	f2c0 8137 	blt.w	801f526 <SCROLLBAR_Callback+0x45a>
 801f2b8:	2902      	cmp	r1, #2
 801f2ba:	f000 81f3 	beq.w	801f6a4 <SCROLLBAR_Callback+0x5d8>
 801f2be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801f2c0:	2a00      	cmp	r2, #0
 801f2c2:	f040 8207 	bne.w	801f6d4 <SCROLLBAR_Callback+0x608>
 801f2c6:	2202      	movs	r2, #2
 801f2c8:	659a      	str	r2, [r3, #88]	; 0x58
 801f2ca:	9806      	ldr	r0, [sp, #24]
 801f2cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2d0:	f04f 37ff 	mov.w	r7, #4294967295
 801f2d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f2d6:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
 801f2da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2dc:	2900      	cmp	r1, #0
 801f2de:	f040 8181 	bne.w	801f5e4 <SCROLLBAR_Callback+0x518>
 801f2e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f2e4:	2a01      	cmp	r2, #1
 801f2e6:	bf04      	itt	eq
 801f2e8:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 801f2ea:	f101 31ff 	addeq.w	r1, r1, #4294967295
 801f2ee:	6619      	str	r1, [r3, #96]	; 0x60
 801f2f0:	a803      	add	r0, sp, #12
 801f2f2:	f7fe fbb5 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f2f6:	2f00      	cmp	r7, #0
 801f2f8:	f000 8102 	beq.w	801f500 <SCROLLBAR_Callback+0x434>
 801f2fc:	f1ba 0f00 	cmp.w	sl, #0
 801f300:	f000 81bb 	beq.w	801f67a <SCROLLBAR_Callback+0x5ae>
 801f304:	4628      	mov	r0, r5
 801f306:	2101      	movs	r1, #1
 801f308:	f7f4 f928 	bl	801355c <WM_SetCapture>
 801f30c:	2d00      	cmp	r5, #0
 801f30e:	f040 8145 	bne.w	801f59c <SCROLLBAR_Callback+0x4d0>
 801f312:	f418 7f80 	tst.w	r8, #256	; 0x100
 801f316:	f47f af06 	bne.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f31a:	4628      	mov	r0, r5
 801f31c:	f7fe fb8e 	bl	801da3c <GUI_ALLOC_LockH>
 801f320:	ab0e      	add	r3, sp, #56	; 0x38
 801f322:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801f324:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f328:	4618      	mov	r0, r3
 801f32a:	f7fe fb99 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f32e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f332:	4628      	mov	r0, r5
 801f334:	f7ee fce8 	bl	800dd08 <WIDGET_OrState>
 801f338:	07b1      	lsls	r1, r6, #30
 801f33a:	f57f aef4 	bpl.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f33e:	4628      	mov	r0, r5
 801f340:	2101      	movs	r1, #1
 801f342:	f7f5 f909 	bl	8014558 <WM_NotifyParent>
 801f346:	e6ee      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f348:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f34a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801f34c:	4293      	cmp	r3, r2
 801f34e:	bfcc      	ite	gt
 801f350:	2300      	movgt	r3, #0
 801f352:	2301      	movle	r3, #1
 801f354:	f6bf af3e 	bge.w	801f1d4 <SCROLLBAR_Callback+0x108>
 801f358:	e73b      	b.n	801f1d2 <SCROLLBAR_Callback+0x106>
 801f35a:	f7fe fb6f 	bl	801da3c <GUI_ALLOC_LockH>
 801f35e:	ab0e      	add	r3, sp, #56	; 0x38
 801f360:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801f362:	f843 0d2c 	str.w	r0, [r3, #-44]!
 801f366:	4618      	mov	r0, r3
 801f368:	f7fe fb7a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f36c:	05f2      	lsls	r2, r6, #23
 801f36e:	f57f aeda 	bpl.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f372:	4628      	mov	r0, r5
 801f374:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f378:	f7ee fce4 	bl	800dd44 <WIDGET_AndState>
 801f37c:	4628      	mov	r0, r5
 801f37e:	f7fe fb5d 	bl	801da3c <GUI_ALLOC_LockH>
 801f382:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801f384:	9004      	str	r0, [sp, #16]
 801f386:	2b00      	cmp	r3, #0
 801f388:	f040 818f 	bne.w	801f6aa <SCROLLBAR_Callback+0x5de>
 801f38c:	2300      	movs	r3, #0
 801f38e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801f390:	6583      	str	r3, [r0, #88]	; 0x58
 801f392:	a804      	add	r0, sp, #16
 801f394:	f7fe fb64 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f398:	07b3      	lsls	r3, r6, #30
 801f39a:	f57f aec4 	bpl.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f39e:	4628      	mov	r0, r5
 801f3a0:	2102      	movs	r1, #2
 801f3a2:	f7f5 f8d9 	bl	8014558 <WM_NotifyParent>
 801f3a6:	e6be      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f3a8:	68b1      	ldr	r1, [r6, #8]
 801f3aa:	6872      	ldr	r2, [r6, #4]
 801f3ac:	e74c      	b.n	801f248 <SCROLLBAR_Callback+0x17c>
 801f3ae:	2d00      	cmp	r5, #0
 801f3b0:	f43f aeb9 	beq.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f3b4:	f7fb ffc2 	bl	801b33c <GUI_Lock>
 801f3b8:	4628      	mov	r0, r5
 801f3ba:	f7fe fb3f 	bl	801da3c <GUI_ALLOC_LockH>
 801f3be:	ab0e      	add	r3, sp, #56	; 0x38
 801f3c0:	6d06      	ldr	r6, [r0, #80]	; 0x50
 801f3c2:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f3c6:	4618      	mov	r0, r3
 801f3c8:	f7fe fb4a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f3cc:	f7fb ffb6 	bl	801b33c <GUI_Lock>
 801f3d0:	4628      	mov	r0, r5
 801f3d2:	f7fe fb33 	bl	801da3c <GUI_ALLOC_LockH>
 801f3d6:	1e73      	subs	r3, r6, #1
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	9005      	str	r0, [sp, #20]
 801f3dc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801f3de:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801f3e0:	f2c0 8191 	blt.w	801f706 <SCROLLBAR_Callback+0x63a>
 801f3e4:	1a8a      	subs	r2, r1, r2
 801f3e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801f3ea:	429a      	cmp	r2, r3
 801f3ec:	da5a      	bge.n	801f4a4 <SCROLLBAR_Callback+0x3d8>
 801f3ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f3f0:	4293      	cmp	r3, r2
 801f3f2:	f000 81a9 	beq.w	801f748 <SCROLLBAR_Callback+0x67c>
 801f3f6:	6502      	str	r2, [r0, #80]	; 0x50
 801f3f8:	4628      	mov	r0, r5
 801f3fa:	f7f6 ffa9 	bl	8016350 <WM_InvalidateWindow>
 801f3fe:	a805      	add	r0, sp, #20
 801f400:	f7fe fb2e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f404:	4628      	mov	r0, r5
 801f406:	2105      	movs	r1, #5
 801f408:	f7f5 f8a6 	bl	8014558 <WM_NotifyParent>
 801f40c:	f7fb ff8c 	bl	801b328 <GUI_Unlock>
 801f410:	f7fb ff8a 	bl	801b328 <GUI_Unlock>
 801f414:	e687      	b.n	801f126 <SCROLLBAR_Callback+0x5a>
 801f416:	2d00      	cmp	r5, #0
 801f418:	f43f ae85 	beq.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f41c:	f7fb ff8e 	bl	801b33c <GUI_Lock>
 801f420:	4628      	mov	r0, r5
 801f422:	f7fe fb0b 	bl	801da3c <GUI_ALLOC_LockH>
 801f426:	ab0e      	add	r3, sp, #56	; 0x38
 801f428:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801f42a:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f42e:	4618      	mov	r0, r3
 801f430:	f7fe fb16 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f434:	f7fb ff82 	bl	801b33c <GUI_Lock>
 801f438:	4628      	mov	r0, r5
 801f43a:	f7fe faff 	bl	801da3c <GUI_ALLOC_LockH>
 801f43e:	443e      	add	r6, r7
 801f440:	2e00      	cmp	r6, #0
 801f442:	9005      	str	r0, [sp, #20]
 801f444:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801f446:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801f448:	f2c0 815f 	blt.w	801f70a <SCROLLBAR_Callback+0x63e>
 801f44c:	1ad3      	subs	r3, r2, r3
 801f44e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f452:	429e      	cmp	r6, r3
 801f454:	f340 815a 	ble.w	801f70c <SCROLLBAR_Callback+0x640>
 801f458:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f45a:	429a      	cmp	r2, r3
 801f45c:	f000 8174 	beq.w	801f748 <SCROLLBAR_Callback+0x67c>
 801f460:	6503      	str	r3, [r0, #80]	; 0x50
 801f462:	e7c9      	b.n	801f3f8 <SCROLLBAR_Callback+0x32c>
 801f464:	2d00      	cmp	r5, #0
 801f466:	f43f ae5e 	beq.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f46a:	f7fb ff67 	bl	801b33c <GUI_Lock>
 801f46e:	4628      	mov	r0, r5
 801f470:	f7fe fae4 	bl	801da3c <GUI_ALLOC_LockH>
 801f474:	ab0e      	add	r3, sp, #56	; 0x38
 801f476:	6d06      	ldr	r6, [r0, #80]	; 0x50
 801f478:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f47c:	4618      	mov	r0, r3
 801f47e:	f7fe faef 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f482:	f7fb ff5b 	bl	801b33c <GUI_Lock>
 801f486:	4628      	mov	r0, r5
 801f488:	f7fe fad8 	bl	801da3c <GUI_ALLOC_LockH>
 801f48c:	1c73      	adds	r3, r6, #1
 801f48e:	2b00      	cmp	r3, #0
 801f490:	9005      	str	r0, [sp, #20]
 801f492:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801f494:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801f496:	f2c0 8136 	blt.w	801f706 <SCROLLBAR_Callback+0x63a>
 801f49a:	1a8a      	subs	r2, r1, r2
 801f49c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	dca4      	bgt.n	801f3ee <SCROLLBAR_Callback+0x322>
 801f4a4:	461a      	mov	r2, r3
 801f4a6:	e7a2      	b.n	801f3ee <SCROLLBAR_Callback+0x322>
 801f4a8:	2d00      	cmp	r5, #0
 801f4aa:	f43f ae3c 	beq.w	801f126 <SCROLLBAR_Callback+0x5a>
 801f4ae:	f7fb ff45 	bl	801b33c <GUI_Lock>
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	f7fe fac2 	bl	801da3c <GUI_ALLOC_LockH>
 801f4b8:	ab0e      	add	r3, sp, #56	; 0x38
 801f4ba:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801f4bc:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f4c0:	4618      	mov	r0, r3
 801f4c2:	f7fe facd 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f4c6:	f7fb ff39 	bl	801b33c <GUI_Lock>
 801f4ca:	4628      	mov	r0, r5
 801f4cc:	f7fe fab6 	bl	801da3c <GUI_ALLOC_LockH>
 801f4d0:	1bbe      	subs	r6, r7, r6
 801f4d2:	e7b5      	b.n	801f440 <SCROLLBAR_Callback+0x374>
 801f4d4:	4628      	mov	r0, r5
 801f4d6:	f7fe fab1 	bl	801da3c <GUI_ALLOC_LockH>
 801f4da:	9005      	str	r0, [sp, #20]
 801f4dc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f4de:	f7f3 fea5 	bl	801322c <WM_DeleteTimer>
 801f4e2:	a80e      	add	r0, sp, #56	; 0x38
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801f4ea:	665a      	str	r2, [r3, #100]	; 0x64
 801f4ec:	65da      	str	r2, [r3, #92]	; 0x5c
 801f4ee:	f7fe fab7 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f4f2:	e676      	b.n	801f1e2 <SCROLLBAR_Callback+0x116>
 801f4f4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801f4f6:	4291      	cmp	r1, r2
 801f4f8:	f43f ae84 	beq.w	801f204 <SCROLLBAR_Callback+0x138>
 801f4fc:	4639      	mov	r1, r7
 801f4fe:	e6a3      	b.n	801f248 <SCROLLBAR_Callback+0x17c>
 801f500:	f1ba 0f00 	cmp.w	sl, #0
 801f504:	f43f aefe 	beq.w	801f304 <SCROLLBAR_Callback+0x238>
 801f508:	4628      	mov	r0, r5
 801f50a:	f7fe fa97 	bl	801da3c <GUI_ALLOC_LockH>
 801f50e:	9004      	str	r0, [sp, #16]
 801f510:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f512:	f7f3 fe8b 	bl	801322c <WM_DeleteTimer>
 801f516:	a80e      	add	r0, sp, #56	; 0x38
 801f518:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801f51c:	665f      	str	r7, [r3, #100]	; 0x64
 801f51e:	65df      	str	r7, [r3, #92]	; 0x5c
 801f520:	f7fe fa9e 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f524:	e6ee      	b.n	801f304 <SCROLLBAR_Callback+0x238>
 801f526:	9a07      	ldr	r2, [sp, #28]
 801f528:	42b2      	cmp	r2, r6
 801f52a:	dd69      	ble.n	801f600 <SCROLLBAR_Callback+0x534>
 801f52c:	ebc7 0909 	rsb	r9, r7, r9
 801f530:	427f      	negs	r7, r7
 801f532:	e6cf      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f534:	f7fb ff02 	bl	801b33c <GUI_Lock>
 801f538:	4628      	mov	r0, r5
 801f53a:	f7fe fa7f 	bl	801da3c <GUI_ALLOC_LockH>
 801f53e:	ab0e      	add	r3, sp, #56	; 0x38
 801f540:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801f542:	f843 0d28 	str.w	r0, [r3, #-40]!
 801f546:	4618      	mov	r0, r3
 801f548:	f7fe fa8a 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f54c:	f7fb fef6 	bl	801b33c <GUI_Lock>
 801f550:	4628      	mov	r0, r5
 801f552:	f7fe fa73 	bl	801da3c <GUI_ALLOC_LockH>
 801f556:	443e      	add	r6, r7
 801f558:	2e00      	cmp	r6, #0
 801f55a:	9005      	str	r0, [sp, #20]
 801f55c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801f55e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801f560:	f2c0 80c9 	blt.w	801f6f6 <SCROLLBAR_Callback+0x62a>
 801f564:	1ad3      	subs	r3, r2, r3
 801f566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f56a:	42b3      	cmp	r3, r6
 801f56c:	bfa8      	it	ge
 801f56e:	4633      	movge	r3, r6
 801f570:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f572:	429a      	cmp	r2, r3
 801f574:	f000 80ee 	beq.w	801f754 <SCROLLBAR_Callback+0x688>
 801f578:	6503      	str	r3, [r0, #80]	; 0x50
 801f57a:	4628      	mov	r0, r5
 801f57c:	f7f6 fee8 	bl	8016350 <WM_InvalidateWindow>
 801f580:	a805      	add	r0, sp, #20
 801f582:	f7fe fa6d 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f586:	4628      	mov	r0, r5
 801f588:	2105      	movs	r1, #5
 801f58a:	f7f4 ffe5 	bl	8014558 <WM_NotifyParent>
 801f58e:	f7fb fecb 	bl	801b328 <GUI_Unlock>
 801f592:	f7fb fec9 	bl	801b328 <GUI_Unlock>
 801f596:	9803      	ldr	r0, [sp, #12]
 801f598:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 801f59a:	e610      	b.n	801f1be <SCROLLBAR_Callback+0xf2>
 801f59c:	f7fb fece 	bl	801b33c <GUI_Lock>
 801f5a0:	4628      	mov	r0, r5
 801f5a2:	f7fe fa4b 	bl	801da3c <GUI_ALLOC_LockH>
 801f5a6:	f1b9 0f00 	cmp.w	r9, #0
 801f5aa:	9004      	str	r0, [sp, #16]
 801f5ac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801f5ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801f5b0:	f2c0 80a7 	blt.w	801f702 <SCROLLBAR_Callback+0x636>
 801f5b4:	1ad3      	subs	r3, r2, r3
 801f5b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5ba:	454b      	cmp	r3, r9
 801f5bc:	bfa8      	it	ge
 801f5be:	464b      	movge	r3, r9
 801f5c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f5c2:	429a      	cmp	r2, r3
 801f5c4:	f000 8099 	beq.w	801f6fa <SCROLLBAR_Callback+0x62e>
 801f5c8:	6503      	str	r3, [r0, #80]	; 0x50
 801f5ca:	4628      	mov	r0, r5
 801f5cc:	f7f6 fec0 	bl	8016350 <WM_InvalidateWindow>
 801f5d0:	a804      	add	r0, sp, #16
 801f5d2:	f7fe fa45 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f5d6:	4628      	mov	r0, r5
 801f5d8:	2105      	movs	r1, #5
 801f5da:	f7f4 ffbd 	bl	8014558 <WM_NotifyParent>
 801f5de:	f7fb fea3 	bl	801b328 <GUI_Unlock>
 801f5e2:	e696      	b.n	801f312 <SCROLLBAR_Callback+0x246>
 801f5e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801f5e8:	eba6 0662 	sub.w	r6, r6, r2, asr #1
 801f5ec:	1a30      	subs	r0, r6, r0
 801f5ee:	3801      	subs	r0, #1
 801f5f0:	fb00 f00b 	mul.w	r0, r0, fp
 801f5f4:	9301      	str	r3, [sp, #4]
 801f5f6:	f7fa fe9d 	bl	801a334 <GUI__DivideRound32>
 801f5fa:	9b01      	ldr	r3, [sp, #4]
 801f5fc:	6618      	str	r0, [r3, #96]	; 0x60
 801f5fe:	e677      	b.n	801f2f0 <SCROLLBAR_Callback+0x224>
 801f600:	9a08      	ldr	r2, [sp, #32]
 801f602:	42b2      	cmp	r2, r6
 801f604:	db61      	blt.n	801f6ca <SCROLLBAR_Callback+0x5fe>
 801f606:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f608:	2900      	cmp	r1, #0
 801f60a:	dd0c      	ble.n	801f626 <SCROLLBAR_Callback+0x55a>
 801f60c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f60e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f612:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 801f616:	1a30      	subs	r0, r6, r0
 801f618:	1e46      	subs	r6, r0, #1
 801f61a:	fb06 f00b 	mul.w	r0, r6, fp
 801f61e:	f7fa fe89 	bl	801a334 <GUI__DivideRound32>
 801f622:	9b03      	ldr	r3, [sp, #12]
 801f624:	4681      	mov	r9, r0
 801f626:	2203      	movs	r2, #3
 801f628:	659a      	str	r2, [r3, #88]	; 0x58
 801f62a:	9806      	ldr	r0, [sp, #24]
 801f62c:	2700      	movs	r7, #0
 801f62e:	e651      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f630:	4628      	mov	r0, r5
 801f632:	f7fe fa03 	bl	801da3c <GUI_ALLOC_LockH>
 801f636:	9004      	str	r0, [sp, #16]
 801f638:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f63a:	f7f3 fdf7 	bl	801322c <WM_DeleteTimer>
 801f63e:	a80e      	add	r0, sp, #56	; 0x38
 801f640:	2200      	movs	r2, #0
 801f642:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801f646:	665a      	str	r2, [r3, #100]	; 0x64
 801f648:	65da      	str	r2, [r3, #92]	; 0x5c
 801f64a:	f7fe fa09 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f64e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f650:	9a06      	ldr	r2, [sp, #24]
 801f652:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f654:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f658:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 801f65c:	1ab2      	subs	r2, r6, r2
 801f65e:	1e50      	subs	r0, r2, #1
 801f660:	fb00 f00b 	mul.w	r0, r0, fp
 801f664:	f7fa fe66 	bl	801a334 <GUI__DivideRound32>
 801f668:	4681      	mov	r9, r0
 801f66a:	a80e      	add	r0, sp, #56	; 0x38
 801f66c:	f850 3d2c 	ldr.w	r3, [r0, #-44]!
 801f670:	f8c3 9060 	str.w	r9, [r3, #96]	; 0x60
 801f674:	f7fe f9f4 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f678:	e644      	b.n	801f304 <SCROLLBAR_Callback+0x238>
 801f67a:	4653      	mov	r3, sl
 801f67c:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801f680:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f684:	4628      	mov	r0, r5
 801f686:	f7f3 fdeb 	bl	8013260 <WM_CreateTimer>
 801f68a:	4606      	mov	r6, r0
 801f68c:	4628      	mov	r0, r5
 801f68e:	f7fe f9d5 	bl	801da3c <GUI_ALLOC_LockH>
 801f692:	4603      	mov	r3, r0
 801f694:	a80e      	add	r0, sp, #56	; 0x38
 801f696:	f840 3d28 	str.w	r3, [r0, #-40]!
 801f69a:	665e      	str	r6, [r3, #100]	; 0x64
 801f69c:	65df      	str	r7, [r3, #92]	; 0x5c
 801f69e:	f7fe f9df 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f6a2:	e62f      	b.n	801f304 <SCROLLBAR_Callback+0x238>
 801f6a4:	f04f 37ff 	mov.w	r7, #4294967295
 801f6a8:	e614      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f6aa:	4628      	mov	r0, r5
 801f6ac:	f7fe f9c6 	bl	801da3c <GUI_ALLOC_LockH>
 801f6b0:	9005      	str	r0, [sp, #20]
 801f6b2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f6b4:	f7f3 fdba 	bl	801322c <WM_DeleteTimer>
 801f6b8:	a80e      	add	r0, sp, #56	; 0x38
 801f6ba:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801f6be:	665f      	str	r7, [r3, #100]	; 0x64
 801f6c0:	65df      	str	r7, [r3, #92]	; 0x5c
 801f6c2:	f7fe f9cd 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f6c6:	9804      	ldr	r0, [sp, #16]
 801f6c8:	e660      	b.n	801f38c <SCROLLBAR_Callback+0x2c0>
 801f6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6cc:	42b2      	cmp	r2, r6
 801f6ce:	dd1f      	ble.n	801f710 <SCROLLBAR_Callback+0x644>
 801f6d0:	44b9      	add	r9, r7
 801f6d2:	e5ff      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f6d4:	4628      	mov	r0, r5
 801f6d6:	f7fe f9b1 	bl	801da3c <GUI_ALLOC_LockH>
 801f6da:	9004      	str	r0, [sp, #16]
 801f6dc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f6de:	f7f3 fda5 	bl	801322c <WM_DeleteTimer>
 801f6e2:	a80e      	add	r0, sp, #56	; 0x38
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801f6ea:	665a      	str	r2, [r3, #100]	; 0x64
 801f6ec:	65da      	str	r2, [r3, #92]	; 0x5c
 801f6ee:	f7fe f9b7 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f6f2:	9b03      	ldr	r3, [sp, #12]
 801f6f4:	e5e7      	b.n	801f2c6 <SCROLLBAR_Callback+0x1fa>
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	e73a      	b.n	801f570 <SCROLLBAR_Callback+0x4a4>
 801f6fa:	a804      	add	r0, sp, #16
 801f6fc:	f7fe f9b0 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f700:	e76d      	b.n	801f5de <SCROLLBAR_Callback+0x512>
 801f702:	2300      	movs	r3, #0
 801f704:	e75c      	b.n	801f5c0 <SCROLLBAR_Callback+0x4f4>
 801f706:	2300      	movs	r3, #0
 801f708:	e6cc      	b.n	801f4a4 <SCROLLBAR_Callback+0x3d8>
 801f70a:	2600      	movs	r6, #0
 801f70c:	4633      	mov	r3, r6
 801f70e:	e6a3      	b.n	801f458 <SCROLLBAR_Callback+0x38c>
 801f710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f712:	42b2      	cmp	r2, r6
 801f714:	db1c      	blt.n	801f750 <SCROLLBAR_Callback+0x684>
 801f716:	2901      	cmp	r1, #1
 801f718:	d020      	beq.n	801f75c <SCROLLBAR_Callback+0x690>
 801f71a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801f71c:	b17a      	cbz	r2, 801f73e <SCROLLBAR_Callback+0x672>
 801f71e:	4628      	mov	r0, r5
 801f720:	f7fe f98c 	bl	801da3c <GUI_ALLOC_LockH>
 801f724:	9004      	str	r0, [sp, #16]
 801f726:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f728:	f7f3 fd80 	bl	801322c <WM_DeleteTimer>
 801f72c:	a80e      	add	r0, sp, #56	; 0x38
 801f72e:	2200      	movs	r2, #0
 801f730:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801f734:	665a      	str	r2, [r3, #100]	; 0x64
 801f736:	65da      	str	r2, [r3, #92]	; 0x5c
 801f738:	f7fe f992 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f73c:	9b03      	ldr	r3, [sp, #12]
 801f73e:	2701      	movs	r7, #1
 801f740:	659f      	str	r7, [r3, #88]	; 0x58
 801f742:	44b9      	add	r9, r7
 801f744:	9806      	ldr	r0, [sp, #24]
 801f746:	e5c5      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f748:	a805      	add	r0, sp, #20
 801f74a:	f7fe f989 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f74e:	e65d      	b.n	801f40c <SCROLLBAR_Callback+0x340>
 801f750:	2700      	movs	r7, #0
 801f752:	e5bf      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>
 801f754:	a805      	add	r0, sp, #20
 801f756:	f7fe f983 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f75a:	e718      	b.n	801f58e <SCROLLBAR_Callback+0x4c2>
 801f75c:	460f      	mov	r7, r1
 801f75e:	e5b9      	b.n	801f2d4 <SCROLLBAR_Callback+0x208>

0801f760 <SCROLLBAR__Rect2VRect>:
 801f760:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801f762:	071b      	lsls	r3, r3, #28
 801f764:	b470      	push	{r4, r5, r6}
 801f766:	d512      	bpl.n	801f78e <SCROLLBAR__Rect2VRect+0x2e>
 801f768:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801f76c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f770:	888c      	ldrh	r4, [r1, #4]
 801f772:	8808      	ldrh	r0, [r1, #0]
 801f774:	88ce      	ldrh	r6, [r1, #6]
 801f776:	884a      	ldrh	r2, [r1, #2]
 801f778:	808e      	strh	r6, [r1, #4]
 801f77a:	1aeb      	subs	r3, r5, r3
 801f77c:	3301      	adds	r3, #1
 801f77e:	b29b      	uxth	r3, r3
 801f780:	43c0      	mvns	r0, r0
 801f782:	43e4      	mvns	r4, r4
 801f784:	4418      	add	r0, r3
 801f786:	4423      	add	r3, r4
 801f788:	80c8      	strh	r0, [r1, #6]
 801f78a:	804b      	strh	r3, [r1, #2]
 801f78c:	800a      	strh	r2, [r1, #0]
 801f78e:	bc70      	pop	{r4, r5, r6}
 801f790:	4770      	bx	lr
 801f792:	bf00      	nop

0801f794 <SCROLLBAR_CreateAttached>:
 801f794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f798:	f011 0708 	ands.w	r7, r1, #8
 801f79c:	b088      	sub	sp, #32
 801f79e:	460d      	mov	r5, r1
 801f7a0:	4604      	mov	r4, r0
 801f7a2:	d169      	bne.n	801f878 <SCROLLBAR_CreateAttached+0xe4>
 801f7a4:	f7fb fdca 	bl	801b33c <GUI_Lock>
 801f7a8:	4620      	mov	r0, r4
 801f7aa:	a906      	add	r1, sp, #24
 801f7ac:	f7f4 fc0a 	bl	8013fc4 <WM_GetInsideRectEx>
 801f7b0:	4b3d      	ldr	r3, [pc, #244]	; (801f8a8 <SCROLLBAR_CreateAttached+0x114>)
 801f7b2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801f7b6:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801f7ba:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f7be:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f7c2:	3101      	adds	r1, #1
 801f7c4:	1a12      	subs	r2, r2, r0
 801f7c6:	1ac9      	subs	r1, r1, r3
 801f7c8:	3201      	adds	r2, #1
 801f7ca:	f240 3c8a 	movw	ip, #906	; 0x38a
 801f7ce:	26ff      	movs	r6, #255	; 0xff
 801f7d0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 801f8b4 <SCROLLBAR_CreateAttached+0x120>
 801f7d4:	9400      	str	r4, [sp, #0]
 801f7d6:	243c      	movs	r4, #60	; 0x3c
 801f7d8:	9403      	str	r4, [sp, #12]
 801f7da:	f8cd c004 	str.w	ip, [sp, #4]
 801f7de:	f8cd e008 	str.w	lr, [sp, #8]
 801f7e2:	f7f6 fe11 	bl	8016408 <WM_CreateWindowAsChild>
 801f7e6:	4604      	mov	r4, r0
 801f7e8:	2800      	cmp	r0, #0
 801f7ea:	d03b      	beq.n	801f864 <SCROLLBAR_CreateAttached+0xd0>
 801f7ec:	f7fe f926 	bl	801da3c <GUI_ALLOC_LockH>
 801f7f0:	2f00      	cmp	r7, #0
 801f7f2:	bf14      	ite	ne
 801f7f4:	2318      	movne	r3, #24
 801f7f6:	2310      	moveq	r3, #16
 801f7f8:	bf14      	ite	ne
 801f7fa:	2208      	movne	r2, #8
 801f7fc:	2200      	moveq	r2, #0
 801f7fe:	f015 0f10 	tst.w	r5, #16
 801f802:	bf18      	it	ne
 801f804:	461a      	movne	r2, r3
 801f806:	4631      	mov	r1, r6
 801f808:	9005      	str	r0, [sp, #20]
 801f80a:	f7ee f9ef 	bl	800dbec <WIDGET__Init>
 801f80e:	4b27      	ldr	r3, [pc, #156]	; (801f8ac <SCROLLBAR_CreateAttached+0x118>)
 801f810:	4f27      	ldr	r7, [pc, #156]	; (801f8b0 <SCROLLBAR_CreateAttached+0x11c>)
 801f812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f814:	f10d 0e20 	add.w	lr, sp, #32
 801f818:	f04f 0c00 	mov.w	ip, #0
 801f81c:	f85e 5d0c 	ldr.w	r5, [lr, #-12]!
 801f820:	683e      	ldr	r6, [r7, #0]
 801f822:	f105 0834 	add.w	r8, r5, #52	; 0x34
 801f826:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801f82a:	f04f 090a 	mov.w	r9, #10
 801f82e:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 801f832:	4670      	mov	r0, lr
 801f834:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
 801f838:	f8c5 a04c 	str.w	sl, [r5, #76]	; 0x4c
 801f83c:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
 801f840:	646e      	str	r6, [r5, #68]	; 0x44
 801f842:	f7fe f90d 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f846:	683b      	ldr	r3, [r7, #0]
 801f848:	4620      	mov	r0, r4
 801f84a:	685b      	ldr	r3, [r3, #4]
 801f84c:	4798      	blx	r3
 801f84e:	4620      	mov	r0, r4
 801f850:	f7f4 fd8e 	bl	8014370 <WM_GetScrollPartner>
 801f854:	f7f6 fd7c 	bl	8016350 <WM_InvalidateWindow>
 801f858:	4620      	mov	r0, r4
 801f85a:	f7f4 fceb 	bl	8014234 <WM_GetParent>
 801f85e:	2125      	movs	r1, #37	; 0x25
 801f860:	f7f4 fecc 	bl	80145fc <WM_SendMessageNoPara>
 801f864:	f7fb fd60 	bl	801b328 <GUI_Unlock>
 801f868:	4620      	mov	r0, r4
 801f86a:	2106      	movs	r1, #6
 801f86c:	f7f4 fe74 	bl	8014558 <WM_NotifyParent>
 801f870:	4620      	mov	r0, r4
 801f872:	b008      	add	sp, #32
 801f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f878:	f7fb fd60 	bl	801b33c <GUI_Lock>
 801f87c:	4620      	mov	r0, r4
 801f87e:	a906      	add	r1, sp, #24
 801f880:	f7f4 fba0 	bl	8013fc4 <WM_GetInsideRectEx>
 801f884:	4a08      	ldr	r2, [pc, #32]	; (801f8a8 <SCROLLBAR_CreateAttached+0x114>)
 801f886:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801f88a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801f88e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801f892:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f896:	3001      	adds	r0, #1
 801f898:	1a5b      	subs	r3, r3, r1
 801f89a:	1a80      	subs	r0, r0, r2
 801f89c:	3301      	adds	r3, #1
 801f89e:	f240 5c8a 	movw	ip, #1418	; 0x58a
 801f8a2:	26fe      	movs	r6, #254	; 0xfe
 801f8a4:	e794      	b.n	801f7d0 <SCROLLBAR_CreateAttached+0x3c>
 801f8a6:	bf00      	nop
 801f8a8:	20000358 	.word	0x20000358
 801f8ac:	20000344 	.word	0x20000344
 801f8b0:	20000354 	.word	0x20000354
 801f8b4:	0801f0cd 	.word	0x0801f0cd

0801f8b8 <BUTTON_DrawSkinFlex>:
 801f8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8bc:	4994      	ldr	r1, [pc, #592]	; (801fb10 <BUTTON_DrawSkinFlex+0x258>)
 801f8be:	6882      	ldr	r2, [r0, #8]
 801f8c0:	6843      	ldr	r3, [r0, #4]
 801f8c2:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 801f8c6:	b088      	sub	sp, #32
 801f8c8:	4604      	mov	r4, r0
 801f8ca:	2b12      	cmp	r3, #18
 801f8cc:	d822      	bhi.n	801f914 <BUTTON_DrawSkinFlex+0x5c>
 801f8ce:	e8df f003 	tbb	[pc, r3]
 801f8d2:	21b1      	.short	0x21b1
 801f8d4:	7b212121 	.word	0x7b212121
 801f8d8:	2121210a 	.word	0x2121210a
 801f8dc:	21212121 	.word	0x21212121
 801f8e0:	21212121 	.word	0x21212121
 801f8e4:	25          	.byte	0x25
 801f8e5:	00          	.byte	0x00
 801f8e6:	6800      	ldr	r0, [r0, #0]
 801f8e8:	f7fe f8a8 	bl	801da3c <GUI_ALLOC_LockH>
 801f8ec:	9004      	str	r0, [sp, #16]
 801f8ee:	6820      	ldr	r0, [r4, #0]
 801f8f0:	f7f3 fb46 	bl	8012f80 <WM__IsEnabled>
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	f040 80a4 	bne.w	801fa42 <BUTTON_DrawSkinFlex+0x18a>
 801f8fa:	9b04      	ldr	r3, [sp, #16]
 801f8fc:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801f8fe:	b905      	cbnz	r5, 801f902 <BUTTON_DrawSkinFlex+0x4a>
 801f900:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801f902:	a804      	add	r0, sp, #16
 801f904:	f7fe f8ac 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f908:	2200      	movs	r2, #0
 801f90a:	4628      	mov	r0, r5
 801f90c:	6821      	ldr	r1, [r4, #0]
 801f90e:	4613      	mov	r3, r2
 801f910:	f002 ff7c 	bl	802280c <GUI_DRAW__Draw>
 801f914:	2000      	movs	r0, #0
 801f916:	b008      	add	sp, #32
 801f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f91c:	6800      	ldr	r0, [r0, #0]
 801f91e:	f7fe f88d 	bl	801da3c <GUI_ALLOC_LockH>
 801f922:	6e86      	ldr	r6, [r0, #104]	; 0x68
 801f924:	9004      	str	r0, [sp, #16]
 801f926:	2e00      	cmp	r6, #0
 801f928:	f000 80eb 	beq.w	801fb02 <BUTTON_DrawSkinFlex+0x24a>
 801f92c:	68a3      	ldr	r3, [r4, #8]
 801f92e:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 801f932:	2b00      	cmp	r3, #0
 801f934:	f000 80e3 	beq.w	801fafe <BUTTON_DrawSkinFlex+0x246>
 801f938:	2b03      	cmp	r3, #3
 801f93a:	bf14      	ite	ne
 801f93c:	2300      	movne	r3, #0
 801f93e:	2302      	moveq	r3, #2
 801f940:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f944:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f946:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801f948:	f7fc fff6 	bl	801c938 <GUI_SetFont>
 801f94c:	4620      	mov	r0, r4
 801f94e:	ac08      	add	r4, sp, #32
 801f950:	f7fc ff90 	bl	801c874 <GUI_SetColor>
 801f954:	a806      	add	r0, sp, #24
 801f956:	f7fc fe75 	bl	801c644 <GUI_GetClientRect>
 801f95a:	f854 0d10 	ldr.w	r0, [r4, #-16]!
 801f95e:	8bab      	ldrh	r3, [r5, #28]
 801f960:	f8bd c018 	ldrh.w	ip, [sp, #24]
 801f964:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 801f968:	f8bd e01a 	ldrh.w	lr, [sp, #26]
 801f96c:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 801f970:	f9b0 105e 	ldrsh.w	r1, [r0, #94]	; 0x5e
 801f974:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 801f978:	449c      	add	ip, r3
 801f97a:	f10e 0e02 	add.w	lr, lr, #2
 801f97e:	ebc3 0308 	rsb	r3, r3, r8
 801f982:	a806      	add	r0, sp, #24
 801f984:	3d02      	subs	r5, #2
 801f986:	f8ad c018 	strh.w	ip, [sp, #24]
 801f98a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f98e:	f8ad e01a 	strh.w	lr, [sp, #26]
 801f992:	f8ad 501e 	strh.w	r5, [sp, #30]
 801f996:	f7fc fed7 	bl	801c748 <GUI_MoveRect>
 801f99a:	4620      	mov	r0, r4
 801f99c:	f7fe f860 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f9a0:	2002      	movs	r0, #2
 801f9a2:	f7fc fff9 	bl	801c998 <GUI_SetTextMode>
 801f9a6:	4630      	mov	r0, r6
 801f9a8:	f7fe f848 	bl	801da3c <GUI_ALLOC_LockH>
 801f9ac:	ac08      	add	r4, sp, #32
 801f9ae:	a906      	add	r1, sp, #24
 801f9b0:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801f9b4:	463a      	mov	r2, r7
 801f9b6:	f7fc f8f3 	bl	801bba0 <GUI_DispStringInRect>
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	f7fe f850 	bl	801da60 <GUI_ALLOC_UnlockH>
 801f9c0:	2000      	movs	r0, #0
 801f9c2:	b008      	add	sp, #32
 801f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f9c8:	69ee      	ldr	r6, [r5, #28]
 801f9ca:	2e00      	cmp	r6, #0
 801f9cc:	d145      	bne.n	801fa5a <BUTTON_DrawSkinFlex+0x1a2>
 801f9ce:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 801f9d2:	f7fc ff4f 	bl	801c874 <GUI_SetColor>
 801f9d6:	f104 0010 	add.w	r0, r4, #16
 801f9da:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801f9dc:	4430      	add	r0, r6
 801f9de:	4431      	add	r1, r6
 801f9e0:	1b92      	subs	r2, r2, r6
 801f9e2:	1b9b      	subs	r3, r3, r6
 801f9e4:	3601      	adds	r6, #1
 801f9e6:	f7fe fa6b 	bl	801dec0 <GUI_DrawRect>
 801f9ea:	2e02      	cmp	r6, #2
 801f9ec:	d1ef      	bne.n	801f9ce <BUTTON_DrawSkinFlex+0x116>
 801f9ee:	68eb      	ldr	r3, [r5, #12]
 801f9f0:	6961      	ldr	r1, [r4, #20]
 801f9f2:	69e7      	ldr	r7, [r4, #28]
 801f9f4:	9300      	str	r3, [sp, #0]
 801f9f6:	6920      	ldr	r0, [r4, #16]
 801f9f8:	69a2      	ldr	r2, [r4, #24]
 801f9fa:	692b      	ldr	r3, [r5, #16]
 801f9fc:	9301      	str	r3, [sp, #4]
 801f9fe:	19cb      	adds	r3, r1, r7
 801fa00:	4430      	add	r0, r6
 801fa02:	1b92      	subs	r2, r2, r6
 801fa04:	105b      	asrs	r3, r3, #1
 801fa06:	3102      	adds	r1, #2
 801fa08:	f001 ff82 	bl	8021910 <GUI_DrawGradientV>
 801fa0c:	69e3      	ldr	r3, [r4, #28]
 801fa0e:	6967      	ldr	r7, [r4, #20]
 801fa10:	696a      	ldr	r2, [r5, #20]
 801fa12:	9200      	str	r2, [sp, #0]
 801fa14:	6920      	ldr	r0, [r4, #16]
 801fa16:	69a2      	ldr	r2, [r4, #24]
 801fa18:	69a9      	ldr	r1, [r5, #24]
 801fa1a:	9101      	str	r1, [sp, #4]
 801fa1c:	441f      	add	r7, r3
 801fa1e:	1079      	asrs	r1, r7, #1
 801fa20:	4430      	add	r0, r6
 801fa22:	3101      	adds	r1, #1
 801fa24:	3b02      	subs	r3, #2
 801fa26:	1b92      	subs	r2, r2, r6
 801fa28:	f001 ff72 	bl	8021910 <GUI_DrawGradientV>
 801fa2c:	2000      	movs	r0, #0
 801fa2e:	b008      	add	sp, #32
 801fa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa34:	6800      	ldr	r0, [r0, #0]
 801fa36:	f7f3 fc71 	bl	801331c <WM_SetHasTrans>
 801fa3a:	2000      	movs	r0, #0
 801fa3c:	b008      	add	sp, #32
 801fa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa42:	68a3      	ldr	r3, [r4, #8]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d160      	bne.n	801fb0a <BUTTON_DrawSkinFlex+0x252>
 801fa48:	9b04      	ldr	r3, [sp, #16]
 801fa4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801fa4c:	2a00      	cmp	r2, #0
 801fa4e:	bf14      	ite	ne
 801fa50:	226c      	movne	r2, #108	; 0x6c
 801fa52:	2268      	moveq	r2, #104	; 0x68
 801fa54:	4413      	add	r3, r2
 801fa56:	685d      	ldr	r5, [r3, #4]
 801fa58:	e753      	b.n	801f902 <BUTTON_DrawSkinFlex+0x4a>
 801fa5a:	9600      	str	r6, [sp, #0]
 801fa5c:	682b      	ldr	r3, [r5, #0]
 801fa5e:	9301      	str	r3, [sp, #4]
 801fa60:	686b      	ldr	r3, [r5, #4]
 801fa62:	9302      	str	r3, [sp, #8]
 801fa64:	68ae      	ldr	r6, [r5, #8]
 801fa66:	3010      	adds	r0, #16
 801fa68:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801fa6a:	9603      	str	r6, [sp, #12]
 801fa6c:	f001 fc80 	bl	8021370 <GUI__DrawTwinArc4>
 801fa70:	2600      	movs	r6, #0
 801fa72:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 801fa76:	f7fc fefd 	bl	801c874 <GUI_SetColor>
 801fa7a:	69eb      	ldr	r3, [r5, #28]
 801fa7c:	6921      	ldr	r1, [r4, #16]
 801fa7e:	69a2      	ldr	r2, [r4, #24]
 801fa80:	6960      	ldr	r0, [r4, #20]
 801fa82:	4419      	add	r1, r3
 801fa84:	1ad2      	subs	r2, r2, r3
 801fa86:	4430      	add	r0, r6
 801fa88:	f7fb fdc4 	bl	801b614 <GUI_DrawHLine>
 801fa8c:	69eb      	ldr	r3, [r5, #28]
 801fa8e:	6921      	ldr	r1, [r4, #16]
 801fa90:	69a2      	ldr	r2, [r4, #24]
 801fa92:	69e0      	ldr	r0, [r4, #28]
 801fa94:	4419      	add	r1, r3
 801fa96:	1ad2      	subs	r2, r2, r3
 801fa98:	1b80      	subs	r0, r0, r6
 801fa9a:	f7fb fdbb 	bl	801b614 <GUI_DrawHLine>
 801fa9e:	69eb      	ldr	r3, [r5, #28]
 801faa0:	6961      	ldr	r1, [r4, #20]
 801faa2:	69e2      	ldr	r2, [r4, #28]
 801faa4:	6920      	ldr	r0, [r4, #16]
 801faa6:	4419      	add	r1, r3
 801faa8:	1ad2      	subs	r2, r2, r3
 801faaa:	4430      	add	r0, r6
 801faac:	f7fb fe08 	bl	801b6c0 <GUI_DrawVLine>
 801fab0:	69eb      	ldr	r3, [r5, #28]
 801fab2:	6961      	ldr	r1, [r4, #20]
 801fab4:	69e2      	ldr	r2, [r4, #28]
 801fab6:	69a0      	ldr	r0, [r4, #24]
 801fab8:	4419      	add	r1, r3
 801faba:	1b80      	subs	r0, r0, r6
 801fabc:	1ad2      	subs	r2, r2, r3
 801fabe:	3601      	adds	r6, #1
 801fac0:	f7fb fdfe 	bl	801b6c0 <GUI_DrawVLine>
 801fac4:	2e02      	cmp	r6, #2
 801fac6:	d1d4      	bne.n	801fa72 <BUTTON_DrawSkinFlex+0x1ba>
 801fac8:	68a8      	ldr	r0, [r5, #8]
 801faca:	f7fc fed3 	bl	801c874 <GUI_SetColor>
 801face:	69eb      	ldr	r3, [r5, #28]
 801fad0:	6920      	ldr	r0, [r4, #16]
 801fad2:	69e6      	ldr	r6, [r4, #28]
 801fad4:	6961      	ldr	r1, [r4, #20]
 801fad6:	18c2      	adds	r2, r0, r3
 801fad8:	4419      	add	r1, r3
 801fada:	3a01      	subs	r2, #1
 801fadc:	1af3      	subs	r3, r6, r3
 801fade:	3002      	adds	r0, #2
 801fae0:	f7fb fe18 	bl	801b714 <GUI_FillRect>
 801fae4:	69eb      	ldr	r3, [r5, #28]
 801fae6:	69a2      	ldr	r2, [r4, #24]
 801fae8:	69e6      	ldr	r6, [r4, #28]
 801faea:	6961      	ldr	r1, [r4, #20]
 801faec:	1ad0      	subs	r0, r2, r3
 801faee:	4419      	add	r1, r3
 801faf0:	3001      	adds	r0, #1
 801faf2:	1af3      	subs	r3, r6, r3
 801faf4:	3a02      	subs	r2, #2
 801faf6:	f7fb fe0d 	bl	801b714 <GUI_FillRect>
 801fafa:	69ee      	ldr	r6, [r5, #28]
 801fafc:	e777      	b.n	801f9ee <BUTTON_DrawSkinFlex+0x136>
 801fafe:	2301      	movs	r3, #1
 801fb00:	e71e      	b.n	801f940 <BUTTON_DrawSkinFlex+0x88>
 801fb02:	a804      	add	r0, sp, #16
 801fb04:	f7fd ffac 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fb08:	e704      	b.n	801f914 <BUTTON_DrawSkinFlex+0x5c>
 801fb0a:	9b04      	ldr	r3, [sp, #16]
 801fb0c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801fb0e:	e6f8      	b.n	801f902 <BUTTON_DrawSkinFlex+0x4a>
 801fb10:	0802a000 	.word	0x0802a000

0801fb14 <_Create>:
 801fb14:	b570      	push	{r4, r5, r6, lr}
 801fb16:	b08a      	sub	sp, #40	; 0x28
 801fb18:	2400      	movs	r4, #0
 801fb1a:	4606      	mov	r6, r0
 801fb1c:	9401      	str	r4, [sp, #4]
 801fb1e:	9402      	str	r4, [sp, #8]
 801fb20:	9403      	str	r4, [sp, #12]
 801fb22:	9404      	str	r4, [sp, #16]
 801fb24:	9405      	str	r4, [sp, #20]
 801fb26:	9406      	str	r4, [sp, #24]
 801fb28:	9407      	str	r4, [sp, #28]
 801fb2a:	9408      	str	r4, [sp, #32]
 801fb2c:	9409      	str	r4, [sp, #36]	; 0x24
 801fb2e:	f7fd ff85 	bl	801da3c <GUI_ALLOC_LockH>
 801fb32:	ab0a      	add	r3, sp, #40	; 0x28
 801fb34:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801fb36:	f843 0d28 	str.w	r0, [r3, #-40]!
 801fb3a:	4668      	mov	r0, sp
 801fb3c:	6895      	ldr	r5, [r2, #8]
 801fb3e:	f7fd ff8f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fb42:	a80a      	add	r0, sp, #40	; 0x28
 801fb44:	9402      	str	r4, [sp, #8]
 801fb46:	f840 6d24 	str.w	r6, [r0, #-36]!
 801fb4a:	682b      	ldr	r3, [r5, #0]
 801fb4c:	4798      	blx	r3
 801fb4e:	b00a      	add	sp, #40	; 0x28
 801fb50:	bd70      	pop	{r4, r5, r6, pc}
 801fb52:	bf00      	nop

0801fb54 <_Paint>:
 801fb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb58:	b08a      	sub	sp, #40	; 0x28
 801fb5a:	4605      	mov	r5, r0
 801fb5c:	f7fd ff6e 	bl	801da3c <GUI_ALLOC_LockH>
 801fb60:	4603      	mov	r3, r0
 801fb62:	a80a      	add	r0, sp, #40	; 0x28
 801fb64:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801fb66:	f840 3d28 	str.w	r3, [r0, #-40]!
 801fb6a:	4668      	mov	r0, sp
 801fb6c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 801fb6e:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801fb72:	f7fd ff75 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fb76:	4628      	mov	r0, r5
 801fb78:	f7f4 ffb6 	bl	8014ae8 <WM_GetWindowSizeX>
 801fb7c:	4607      	mov	r7, r0
 801fb7e:	4628      	mov	r0, r5
 801fb80:	f7f4 ffd0 	bl	8014b24 <WM_GetWindowSizeY>
 801fb84:	3f01      	subs	r7, #1
 801fb86:	2300      	movs	r3, #0
 801fb88:	3801      	subs	r0, #1
 801fb8a:	f016 0610 	ands.w	r6, r6, #16
 801fb8e:	9008      	str	r0, [sp, #32]
 801fb90:	9707      	str	r7, [sp, #28]
 801fb92:	9501      	str	r5, [sp, #4]
 801fb94:	9306      	str	r3, [sp, #24]
 801fb96:	9305      	str	r3, [sp, #20]
 801fb98:	d11d      	bne.n	801fbd6 <_Paint+0x82>
 801fb9a:	f418 7f80 	tst.w	r8, #256	; 0x100
 801fb9e:	d118      	bne.n	801fbd2 <_Paint+0x7e>
 801fba0:	f018 0f01 	tst.w	r8, #1
 801fba4:	bf14      	ite	ne
 801fba6:	2301      	movne	r3, #1
 801fba8:	2302      	moveq	r3, #2
 801fbaa:	9303      	str	r3, [sp, #12]
 801fbac:	2305      	movs	r3, #5
 801fbae:	9302      	str	r3, [sp, #8]
 801fbb0:	a801      	add	r0, sp, #4
 801fbb2:	47a0      	blx	r4
 801fbb4:	2306      	movs	r3, #6
 801fbb6:	9302      	str	r3, [sp, #8]
 801fbb8:	a801      	add	r0, sp, #4
 801fbba:	47a0      	blx	r4
 801fbbc:	2312      	movs	r3, #18
 801fbbe:	9302      	str	r3, [sp, #8]
 801fbc0:	a801      	add	r0, sp, #4
 801fbc2:	47a0      	blx	r4
 801fbc4:	230a      	movs	r3, #10
 801fbc6:	a801      	add	r0, sp, #4
 801fbc8:	9302      	str	r3, [sp, #8]
 801fbca:	47a0      	blx	r4
 801fbcc:	b00a      	add	sp, #40	; 0x28
 801fbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbd2:	9603      	str	r6, [sp, #12]
 801fbd4:	e7ea      	b.n	801fbac <_Paint+0x58>
 801fbd6:	2303      	movs	r3, #3
 801fbd8:	9303      	str	r3, [sp, #12]
 801fbda:	e7e7      	b.n	801fbac <_Paint+0x58>

0801fbdc <GUI_MEMDEV__WriteToActiveOpaque>:
 801fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbe0:	b0a1      	sub	sp, #132	; 0x84
 801fbe2:	4607      	mov	r7, r0
 801fbe4:	910f      	str	r1, [sp, #60]	; 0x3c
 801fbe6:	920c      	str	r2, [sp, #48]	; 0x30
 801fbe8:	b910      	cbnz	r0, 801fbf0 <GUI_MEMDEV__WriteToActiveOpaque+0x14>
 801fbea:	b021      	add	sp, #132	; 0x84
 801fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf0:	f7fd ff24 	bl	801da3c <GUI_ALLOC_LockH>
 801fbf4:	ab20      	add	r3, sp, #128	; 0x80
 801fbf6:	6944      	ldr	r4, [r0, #20]
 801fbf8:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801fbfc:	4618      	mov	r0, r3
 801fbfe:	f7fd ff2f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fc02:	4638      	mov	r0, r7
 801fc04:	f7f8 fbd6 	bl	80183b4 <GUI_MEMDEV_GetBitsPerPixel>
 801fc08:	2808      	cmp	r0, #8
 801fc0a:	4681      	mov	r9, r0
 801fc0c:	dd02      	ble.n	801fc14 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 801fc0e:	2c00      	cmp	r4, #0
 801fc10:	f000 80d2 	beq.w	801fdb8 <GUI_MEMDEV__WriteToActiveOpaque+0x1dc>
 801fc14:	f04f 0800 	mov.w	r8, #0
 801fc18:	f04f 0b01 	mov.w	fp, #1
 801fc1c:	4638      	mov	r0, r7
 801fc1e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 801fc22:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 801fc26:	f7fd ff09 	bl	801da3c <GUI_ALLOC_LockH>
 801fc2a:	4da6      	ldr	r5, [pc, #664]	; (801fec4 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 801fc2c:	6801      	ldr	r1, [r0, #0]
 801fc2e:	682a      	ldr	r2, [r5, #0]
 801fc30:	6909      	ldr	r1, [r1, #16]
 801fc32:	4603      	mov	r3, r0
 801fc34:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 801fc38:	68de      	ldr	r6, [r3, #12]
 801fc3a:	9612      	str	r6, [sp, #72]	; 0x48
 801fc3c:	691e      	ldr	r6, [r3, #16]
 801fc3e:	f84a 3d14 	str.w	r3, [sl, #-20]!
 801fc42:	7c50      	ldrb	r0, [r2, #17]
 801fc44:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801fc48:	960b      	str	r6, [sp, #44]	; 0x2c
 801fc4a:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801fc4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801fc52:	684c      	ldr	r4, [r1, #4]
 801fc54:	9310      	str	r3, [sp, #64]	; 0x40
 801fc56:	9615      	str	r6, [sp, #84]	; 0x54
 801fc58:	f7f9 fd96 	bl	8019788 <GUI_GetBitsPerPixelEx>
 801fc5c:	682a      	ldr	r2, [r5, #0]
 801fc5e:	9009      	str	r0, [sp, #36]	; 0x24
 801fc60:	7c50      	ldrb	r0, [r2, #17]
 801fc62:	f7f9 fdad 	bl	80197c0 <GUI_GetpfIndex2ColorEx>
 801fc66:	4606      	mov	r6, r0
 801fc68:	4650      	mov	r0, sl
 801fc6a:	f7fd fef9 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fc6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fc70:	2808      	cmp	r0, #8
 801fc72:	f240 809b 	bls.w	801fdac <GUI_MEMDEV__WriteToActiveOpaque+0x1d0>
 801fc76:	2810      	cmp	r0, #16
 801fc78:	bf8c      	ite	hi
 801fc7a:	2104      	movhi	r1, #4
 801fc7c:	2102      	movls	r1, #2
 801fc7e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801fc82:	910e      	str	r1, [sp, #56]	; 0x38
 801fc84:	42b4      	cmp	r4, r6
 801fc86:	f000 81b0 	beq.w	801ffea <GUI_MEMDEV__WriteToActiveOpaque+0x40e>
 801fc8a:	682b      	ldr	r3, [r5, #0]
 801fc8c:	7c58      	ldrb	r0, [r3, #17]
 801fc8e:	f7f9 fd9f 	bl	80197d0 <GUI_GetpfColor2IndexEx>
 801fc92:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801fc94:	4605      	mov	r5, r0
 801fc96:	00b0      	lsls	r0, r6, #2
 801fc98:	f7fd feb8 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 801fc9c:	9014      	str	r0, [sp, #80]	; 0x50
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	d0a3      	beq.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801fca2:	4638      	mov	r0, r7
 801fca4:	f7f7 fb6c 	bl	8017380 <GUI_MEMDEV_GetDataPtr>
 801fca8:	9011      	str	r0, [sp, #68]	; 0x44
 801fcaa:	f1b9 0f00 	cmp.w	r9, #0
 801fcae:	f000 80f4 	beq.w	801fe9a <GUI_MEMDEV__WriteToActiveOpaque+0x2be>
 801fcb2:	4648      	mov	r0, r9
 801fcb4:	f7fd fec2 	bl	801da3c <GUI_ALLOC_LockH>
 801fcb8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fcba:	901c      	str	r0, [sp, #112]	; 0x70
 801fcbc:	2e00      	cmp	r6, #0
 801fcbe:	f340 8190 	ble.w	801ffe2 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 801fcc2:	2600      	movs	r6, #0
 801fcc4:	960d      	str	r6, [sp, #52]	; 0x34
 801fcc6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fcc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fcca:	3e01      	subs	r6, #1
 801fccc:	9616      	str	r6, [sp, #88]	; 0x58
 801fcce:	ae1d      	add	r6, sp, #116	; 0x74
 801fcd0:	9613      	str	r6, [sp, #76]	; 0x4c
 801fcd2:	f04f 0801 	mov.w	r8, #1
 801fcd6:	6883      	ldr	r3, [r0, #8]
 801fcd8:	2100      	movs	r1, #0
 801fcda:	911d      	str	r1, [sp, #116]	; 0x74
 801fcdc:	695b      	ldr	r3, [r3, #20]
 801fcde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fce0:	4798      	blx	r3
 801fce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fce4:	4282      	cmp	r2, r0
 801fce6:	4606      	mov	r6, r0
 801fce8:	f000 813a 	beq.w	801ff60 <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 801fcec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fcee:	2a01      	cmp	r2, #1
 801fcf0:	f000 80fc 	beq.w	801feec <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 801fcf4:	2800      	cmp	r0, #0
 801fcf6:	d047      	beq.n	801fd88 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801fcf8:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801fcfc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 801fd00:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fd02:	f7fd fe9b 	bl	801da3c <GUI_ALLOC_LockH>
 801fd06:	4607      	mov	r7, r0
 801fd08:	901a      	str	r0, [sp, #104]	; 0x68
 801fd0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fd0c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801fd0e:	2808      	cmp	r0, #8
 801fd10:	f240 80dc 	bls.w	801fecc <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 801fd14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd18:	46b3      	mov	fp, r6
 801fd1a:	fb01 2a03 	mla	sl, r1, r3, r2
 801fd1e:	46b9      	mov	r9, r7
 801fd20:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801fd24:	47a0      	blx	r4
 801fd26:	47a8      	blx	r5
 801fd28:	f1bb 0b01 	subs.w	fp, fp, #1
 801fd2c:	f849 0b04 	str.w	r0, [r9], #4
 801fd30:	d1f6      	bne.n	801fd20 <GUI_MEMDEV__WriteToActiveOpaque+0x144>
 801fd32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd34:	281f      	cmp	r0, #31
 801fd36:	d804      	bhi.n	801fd42 <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 801fd38:	4602      	mov	r2, r0
 801fd3a:	4631      	mov	r1, r6
 801fd3c:	4638      	mov	r0, r7
 801fd3e:	f001 fc69 	bl	8021614 <GUI__CompactPixelIndices>
 801fd42:	2200      	movs	r2, #0
 801fd44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fd46:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fd48:	9203      	str	r2, [sp, #12]
 801fd4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fd4e:	9102      	str	r1, [sp, #8]
 801fd50:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fd52:	9105      	str	r1, [sp, #20]
 801fd54:	4410      	add	r0, r2
 801fd56:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd58:	9304      	str	r3, [sp, #16]
 801fd5a:	4632      	mov	r2, r6
 801fd5c:	2301      	movs	r3, #1
 801fd5e:	f8cd 8000 	str.w	r8, [sp]
 801fd62:	f8cd 8004 	str.w	r8, [sp, #4]
 801fd66:	f7f9 ffff 	bl	8019d68 <LCD_DrawBitmap>
 801fd6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fd6c:	f7fd fe78 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fd70:	981c      	ldr	r0, [sp, #112]	; 0x70
 801fd72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801fd74:	6883      	ldr	r3, [r0, #8]
 801fd76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fd78:	695b      	ldr	r3, [r3, #20]
 801fd7a:	4416      	add	r6, r2
 801fd7c:	961d      	str	r6, [sp, #116]	; 0x74
 801fd7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fd80:	4798      	blx	r3
 801fd82:	4606      	mov	r6, r0
 801fd84:	2800      	cmp	r0, #0
 801fd86:	d1bb      	bne.n	801fd00 <GUI_MEMDEV__WriteToActiveOpaque+0x124>
 801fd88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fd8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd8c:	4406      	add	r6, r0
 801fd8e:	9611      	str	r6, [sp, #68]	; 0x44
 801fd90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fd92:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fd96:	3601      	adds	r6, #1
 801fd98:	960c      	str	r6, [sp, #48]	; 0x30
 801fd9a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801fd9c:	4576      	cmp	r6, lr
 801fd9e:	f000 8120 	beq.w	801ffe2 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 801fda2:	3601      	adds	r6, #1
 801fda4:	960d      	str	r6, [sp, #52]	; 0x34
 801fda6:	981c      	ldr	r0, [sp, #112]	; 0x70
 801fda8:	4632      	mov	r2, r6
 801fdaa:	e794      	b.n	801fcd6 <GUI_MEMDEV__WriteToActiveOpaque+0xfa>
 801fdac:	2801      	cmp	r0, #1
 801fdae:	d16f      	bne.n	801fe90 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 801fdb0:	ab1e      	add	r3, sp, #120	; 0x78
 801fdb2:	900e      	str	r0, [sp, #56]	; 0x38
 801fdb4:	930a      	str	r3, [sp, #40]	; 0x28
 801fdb6:	e765      	b.n	801fc84 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801fdb8:	4638      	mov	r0, r7
 801fdba:	f7fd fe3f 	bl	801da3c <GUI_ALLOC_LockH>
 801fdbe:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 801fdc2:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 801fdc6:	f84a 0d10 	str.w	r0, [sl, #-16]!
 801fdca:	6801      	ldr	r1, [r0, #0]
 801fdcc:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801fdd0:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 801fdd4:	9609      	str	r6, [sp, #36]	; 0x24
 801fdd6:	4602      	mov	r2, r0
 801fdd8:	4650      	mov	r0, sl
 801fdda:	690e      	ldr	r6, [r1, #16]
 801fddc:	9208      	str	r2, [sp, #32]
 801fdde:	f7fd fe3f 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fde2:	4838      	ldr	r0, [pc, #224]	; (801fec4 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 801fde4:	4938      	ldr	r1, [pc, #224]	; (801fec8 <GUI_MEMDEV__WriteToActiveOpaque+0x2ec>)
 801fde6:	6800      	ldr	r0, [r0, #0]
 801fde8:	6875      	ldr	r5, [r6, #4]
 801fdea:	7c40      	ldrb	r0, [r0, #17]
 801fdec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fdf0:	690c      	ldr	r4, [r1, #16]
 801fdf2:	6821      	ldr	r1, [r4, #0]
 801fdf4:	910d      	str	r1, [sp, #52]	; 0x34
 801fdf6:	f7f9 fcc7 	bl	8019788 <GUI_GetBitsPerPixelEx>
 801fdfa:	2808      	cmp	r0, #8
 801fdfc:	9a08      	ldr	r2, [sp, #32]
 801fdfe:	d942      	bls.n	801fe86 <GUI_MEMDEV__WriteToActiveOpaque+0x2aa>
 801fe00:	2810      	cmp	r0, #16
 801fe02:	bf8c      	ite	hi
 801fe04:	2320      	movhi	r3, #32
 801fe06:	2310      	movls	r3, #16
 801fe08:	bf8c      	ite	hi
 801fe0a:	2004      	movhi	r0, #4
 801fe0c:	2002      	movls	r0, #2
 801fe0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe10:	900a      	str	r0, [sp, #40]	; 0x28
 801fe12:	42a6      	cmp	r6, r4
 801fe14:	f000 81f6 	beq.w	8020204 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801fe18:	f1b9 0f20 	cmp.w	r9, #32
 801fe1c:	f000 81b0 	beq.w	8020180 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 801fe20:	f1b9 0f10 	cmp.w	r9, #16
 801fe24:	f47f aee1 	bne.w	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801fe28:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 801fe2c:	fb08 f00e 	mul.w	r0, r8, lr
 801fe30:	f7fd fdec 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 801fe34:	9011      	str	r0, [sp, #68]	; 0x44
 801fe36:	2800      	cmp	r0, #0
 801fe38:	f43f aed7 	beq.w	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801fe3c:	f7fd fdfe 	bl	801da3c <GUI_ALLOC_LockH>
 801fe40:	901e      	str	r0, [sp, #120]	; 0x78
 801fe42:	4638      	mov	r0, r7
 801fe44:	f7fd fdfa 	bl	801da3c <GUI_ALLOC_LockH>
 801fe48:	901c      	str	r0, [sp, #112]	; 0x70
 801fe4a:	6923      	ldr	r3, [r4, #16]
 801fe4c:	f100 0918 	add.w	r9, r0, #24
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	f000 81e9 	beq.w	8020228 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 801fe56:	6973      	ldr	r3, [r6, #20]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	f000 81e5 	beq.w	8020228 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 801fe5e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801fe62:	0080      	lsls	r0, r0, #2
 801fe64:	f7fd fdd2 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 801fe68:	900e      	str	r0, [sp, #56]	; 0x38
 801fe6a:	2800      	cmp	r0, #0
 801fe6c:	f040 822b 	bne.w	80202c6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ea>
 801fe70:	901d      	str	r0, [sp, #116]	; 0x74
 801fe72:	4650      	mov	r0, sl
 801fe74:	f7fd fdf4 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fe78:	a81e      	add	r0, sp, #120	; 0x78
 801fe7a:	f7fd fdf1 	bl	801da60 <GUI_ALLOC_UnlockH>
 801fe7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe80:	f7fd feee 	bl	801dc60 <GUI_ALLOC_Free>
 801fe84:	e6b1      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801fe86:	2108      	movs	r1, #8
 801fe88:	2301      	movs	r3, #1
 801fe8a:	910b      	str	r1, [sp, #44]	; 0x2c
 801fe8c:	930a      	str	r3, [sp, #40]	; 0x28
 801fe8e:	e7c0      	b.n	801fe12 <GUI_MEMDEV__WriteToActiveOpaque+0x236>
 801fe90:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801fe94:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801fe98:	e6f4      	b.n	801fc84 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801fe9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fe9c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fe9e:	9502      	str	r5, [sp, #8]
 801fea0:	2401      	movs	r4, #1
 801fea2:	9603      	str	r6, [sp, #12]
 801fea4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fea6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fea8:	9504      	str	r5, [sp, #16]
 801feaa:	9605      	str	r6, [sp, #20]
 801feac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801feae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801feb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801feb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801feb4:	9400      	str	r4, [sp, #0]
 801feb6:	9401      	str	r4, [sp, #4]
 801feb8:	f7f9 ff56 	bl	8019d68 <LCD_DrawBitmap>
 801febc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801febe:	f7fd fecf 	bl	801dc60 <GUI_ALLOC_Free>
 801fec2:	e692      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801fec4:	2000027c 	.word	0x2000027c
 801fec8:	2002cbcc 	.word	0x2002cbcc
 801fecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fed0:	46b1      	mov	r9, r6
 801fed2:	fb01 2a03 	mla	sl, r1, r3, r2
 801fed6:	46bb      	mov	fp, r7
 801fed8:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801fedc:	47a0      	blx	r4
 801fede:	47a8      	blx	r5
 801fee0:	f1b9 0901 	subs.w	r9, r9, #1
 801fee4:	f84b 0b04 	str.w	r0, [fp], #4
 801fee8:	d1f6      	bne.n	801fed8 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 801feea:	e722      	b.n	801fd32 <GUI_MEMDEV__WriteToActiveOpaque+0x156>
 801feec:	2800      	cmp	r0, #0
 801feee:	f43f af4b 	beq.w	801fd88 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801fef2:	9517      	str	r5, [sp, #92]	; 0x5c
 801fef4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fef8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801fefc:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801ff00:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801ff04:	9410      	str	r4, [sp, #64]	; 0x40
 801ff06:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801ff08:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff0a:	9003      	str	r0, [sp, #12]
 801ff0c:	2c00      	cmp	r4, #0
 801ff0e:	46a6      	mov	lr, r4
 801ff10:	bfb8      	it	lt
 801ff12:	f104 0e07 	addlt.w	lr, r4, #7
 801ff16:	f004 0c07 	and.w	ip, r4, #7
 801ff1a:	eb0a 0004 	add.w	r0, sl, r4
 801ff1e:	eb07 04ee 	add.w	r4, r7, lr, asr #3
 801ff22:	9404      	str	r4, [sp, #16]
 801ff24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ff26:	f8cd c018 	str.w	ip, [sp, #24]
 801ff2a:	4632      	mov	r2, r6
 801ff2c:	4629      	mov	r1, r5
 801ff2e:	2301      	movs	r3, #1
 801ff30:	f8cd 8000 	str.w	r8, [sp]
 801ff34:	f8cd 8004 	str.w	r8, [sp, #4]
 801ff38:	f8cd 8008 	str.w	r8, [sp, #8]
 801ff3c:	9405      	str	r4, [sp, #20]
 801ff3e:	f7f9 fdf3 	bl	8019b28 <LCD__DrawBitmap_1bpp>
 801ff42:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ff44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ff46:	6883      	ldr	r3, [r0, #8]
 801ff48:	4416      	add	r6, r2
 801ff4a:	695b      	ldr	r3, [r3, #20]
 801ff4c:	961d      	str	r6, [sp, #116]	; 0x74
 801ff4e:	4659      	mov	r1, fp
 801ff50:	464a      	mov	r2, r9
 801ff52:	4798      	blx	r3
 801ff54:	4606      	mov	r6, r0
 801ff56:	2800      	cmp	r0, #0
 801ff58:	d1d5      	bne.n	801ff06 <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 801ff5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ff5c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ff5e:	e713      	b.n	801fd88 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801ff60:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ff62:	f7fd fd6b 	bl	801da3c <GUI_ALLOC_LockH>
 801ff66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801ff68:	901a      	str	r0, [sp, #104]	; 0x68
 801ff6a:	2e08      	cmp	r6, #8
 801ff6c:	4681      	mov	r9, r0
 801ff6e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801ff70:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ff72:	4682      	mov	sl, r0
 801ff74:	d92c      	bls.n	801ffd0 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 801ff76:	f836 0b02 	ldrh.w	r0, [r6], #2
 801ff7a:	47a0      	blx	r4
 801ff7c:	47a8      	blx	r5
 801ff7e:	3f01      	subs	r7, #1
 801ff80:	f84a 0b04 	str.w	r0, [sl], #4
 801ff84:	d1f7      	bne.n	801ff76 <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 801ff86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ff88:	2e1f      	cmp	r6, #31
 801ff8a:	d804      	bhi.n	801ff96 <GUI_MEMDEV__WriteToActiveOpaque+0x3ba>
 801ff8c:	4648      	mov	r0, r9
 801ff8e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ff90:	4632      	mov	r2, r6
 801ff92:	f001 fb3f 	bl	8021614 <GUI__CompactPixelIndices>
 801ff96:	ae20      	add	r6, sp, #128	; 0x80
 801ff98:	f8cd 8000 	str.w	r8, [sp]
 801ff9c:	f856 3d18 	ldr.w	r3, [r6, #-24]!
 801ffa0:	9610      	str	r6, [sp, #64]	; 0x40
 801ffa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ffa4:	9602      	str	r6, [sp, #8]
 801ffa6:	2000      	movs	r0, #0
 801ffa8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ffaa:	9003      	str	r0, [sp, #12]
 801ffac:	9605      	str	r6, [sp, #20]
 801ffae:	9304      	str	r3, [sp, #16]
 801ffb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ffb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ffb4:	f8cd 8004 	str.w	r8, [sp, #4]
 801ffb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ffba:	2301      	movs	r3, #1
 801ffbc:	f7f9 fed4 	bl	8019d68 <LCD_DrawBitmap>
 801ffc0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ffc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ffc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ffc6:	440e      	add	r6, r1
 801ffc8:	9611      	str	r6, [sp, #68]	; 0x44
 801ffca:	f7fd fd49 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ffce:	e6df      	b.n	801fd90 <GUI_MEMDEV__WriteToActiveOpaque+0x1b4>
 801ffd0:	f816 0b01 	ldrb.w	r0, [r6], #1
 801ffd4:	47a0      	blx	r4
 801ffd6:	47a8      	blx	r5
 801ffd8:	3f01      	subs	r7, #1
 801ffda:	f84a 0b04 	str.w	r0, [sl], #4
 801ffde:	d1f7      	bne.n	801ffd0 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 801ffe0:	e7d1      	b.n	801ff86 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 801ffe2:	a81c      	add	r0, sp, #112	; 0x70
 801ffe4:	f7fd fd3c 	bl	801da60 <GUI_ALLOC_UnlockH>
 801ffe8:	e768      	b.n	801febc <GUI_MEMDEV__WriteToActiveOpaque+0x2e0>
 801ffea:	4638      	mov	r0, r7
 801ffec:	f7f7 f9c8 	bl	8017380 <GUI_MEMDEV_GetDataPtr>
 801fff0:	4680      	mov	r8, r0
 801fff2:	f1b9 0f00 	cmp.w	r9, #0
 801fff6:	f000 80b2 	beq.w	802015e <GUI_MEMDEV__WriteToActiveOpaque+0x582>
 801fffa:	4648      	mov	r0, r9
 801fffc:	f7fd fd1e 	bl	801da3c <GUI_ALLOC_LockH>
 8020000:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020002:	901c      	str	r0, [sp, #112]	; 0x70
 8020004:	2c00      	cmp	r4, #0
 8020006:	f340 80a6 	ble.w	8020156 <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 802000a:	ad1d      	add	r5, sp, #116	; 0x74
 802000c:	9513      	str	r5, [sp, #76]	; 0x4c
 802000e:	2600      	movs	r6, #0
 8020010:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8020014:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8020016:	46b2      	mov	sl, r6
 8020018:	2501      	movs	r5, #1
 802001a:	6883      	ldr	r3, [r0, #8]
 802001c:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 8020020:	695b      	ldr	r3, [r3, #20]
 8020022:	4639      	mov	r1, r7
 8020024:	4632      	mov	r2, r6
 8020026:	4798      	blx	r3
 8020028:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 802002c:	4586      	cmp	lr, r0
 802002e:	4604      	mov	r4, r0
 8020030:	d02e      	beq.n	8020090 <GUI_MEMDEV__WriteToActiveOpaque+0x4b4>
 8020032:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020034:	2801      	cmp	r0, #1
 8020036:	d05c      	beq.n	80200f2 <GUI_MEMDEV__WriteToActiveOpaque+0x516>
 8020038:	b314      	cbz	r4, 8020080 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 802003a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802003e:	44b3      	add	fp, r6
 8020040:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020042:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8020046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802004a:	9102      	str	r1, [sp, #8]
 802004c:	fb00 830e 	mla	r3, r0, lr, r8
 8020050:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020052:	9203      	str	r2, [sp, #12]
 8020054:	9105      	str	r1, [sp, #20]
 8020056:	4622      	mov	r2, r4
 8020058:	9304      	str	r3, [sp, #16]
 802005a:	4448      	add	r0, r9
 802005c:	4659      	mov	r1, fp
 802005e:	2301      	movs	r3, #1
 8020060:	9500      	str	r5, [sp, #0]
 8020062:	9501      	str	r5, [sp, #4]
 8020064:	f7f9 fe80 	bl	8019d68 <LCD_DrawBitmap>
 8020068:	981c      	ldr	r0, [sp, #112]	; 0x70
 802006a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802006c:	6883      	ldr	r3, [r0, #8]
 802006e:	4422      	add	r2, r4
 8020070:	695b      	ldr	r3, [r3, #20]
 8020072:	921d      	str	r2, [sp, #116]	; 0x74
 8020074:	4639      	mov	r1, r7
 8020076:	4632      	mov	r2, r6
 8020078:	4798      	blx	r3
 802007a:	4604      	mov	r4, r0
 802007c:	2800      	cmp	r0, #0
 802007e:	d1df      	bne.n	8020040 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 8020080:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020082:	3601      	adds	r6, #1
 8020084:	44a0      	add	r8, r4
 8020086:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020088:	42b4      	cmp	r4, r6
 802008a:	dd64      	ble.n	8020156 <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 802008c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802008e:	e7c4      	b.n	802001a <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 8020090:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020094:	46cb      	mov	fp, r9
 8020096:	46b0      	mov	r8, r6
 8020098:	46b1      	mov	r9, r6
 802009a:	4676      	mov	r6, lr
 802009c:	e000      	b.n	80200a0 <GUI_MEMDEV__WriteToActiveOpaque+0x4c4>
 802009e:	46a0      	mov	r8, r4
 80200a0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80200a2:	6883      	ldr	r3, [r0, #8]
 80200a4:	f108 0401 	add.w	r4, r8, #1
 80200a8:	695b      	ldr	r3, [r3, #20]
 80200aa:	4622      	mov	r2, r4
 80200ac:	4639      	mov	r1, r7
 80200ae:	4798      	blx	r3
 80200b0:	4286      	cmp	r6, r0
 80200b2:	d0f4      	beq.n	802009e <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 80200b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80200b6:	9103      	str	r1, [sp, #12]
 80200b8:	464e      	mov	r6, r9
 80200ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80200bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80200be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80200c0:	9002      	str	r0, [sp, #8]
 80200c2:	46d9      	mov	r9, fp
 80200c4:	46c3      	mov	fp, r8
 80200c6:	ebc6 0e0b 	rsb	lr, r6, fp
 80200ca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80200ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80200d2:	f10e 0e01 	add.w	lr, lr, #1
 80200d6:	4431      	add	r1, r6
 80200d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80200da:	9205      	str	r2, [sp, #20]
 80200dc:	9500      	str	r5, [sp, #0]
 80200de:	9501      	str	r5, [sp, #4]
 80200e0:	4673      	mov	r3, lr
 80200e2:	4648      	mov	r0, r9
 80200e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80200e6:	fb06 880e 	mla	r8, r6, lr, r8
 80200ea:	4626      	mov	r6, r4
 80200ec:	f7f9 fe3c 	bl	8019d68 <LCD_DrawBitmap>
 80200f0:	e7c9      	b.n	8020086 <GUI_MEMDEV__WriteToActiveOpaque+0x4aa>
 80200f2:	2c00      	cmp	r4, #0
 80200f4:	d0c4      	beq.n	8020080 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 80200f6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80200fa:	44b6      	add	lr, r6
 80200fc:	46b3      	mov	fp, r6
 80200fe:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8020102:	4626      	mov	r6, r4
 8020104:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8020106:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020108:	9003      	str	r0, [sp, #12]
 802010a:	2c00      	cmp	r4, #0
 802010c:	46a6      	mov	lr, r4
 802010e:	bfb8      	it	lt
 8020110:	f104 0e07 	addlt.w	lr, r4, #7
 8020114:	f004 0c07 	and.w	ip, r4, #7
 8020118:	eb09 0004 	add.w	r0, r9, r4
 802011c:	eb08 04ee 	add.w	r4, r8, lr, asr #3
 8020120:	9404      	str	r4, [sp, #16]
 8020122:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020126:	f8cd c018 	str.w	ip, [sp, #24]
 802012a:	4632      	mov	r2, r6
 802012c:	2301      	movs	r3, #1
 802012e:	9500      	str	r5, [sp, #0]
 8020130:	9501      	str	r5, [sp, #4]
 8020132:	9502      	str	r5, [sp, #8]
 8020134:	9405      	str	r4, [sp, #20]
 8020136:	f7f9 fcf7 	bl	8019b28 <LCD__DrawBitmap_1bpp>
 802013a:	981c      	ldr	r0, [sp, #112]	; 0x70
 802013c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802013e:	6883      	ldr	r3, [r0, #8]
 8020140:	4432      	add	r2, r6
 8020142:	695b      	ldr	r3, [r3, #20]
 8020144:	921d      	str	r2, [sp, #116]	; 0x74
 8020146:	4639      	mov	r1, r7
 8020148:	465a      	mov	r2, fp
 802014a:	4798      	blx	r3
 802014c:	4606      	mov	r6, r0
 802014e:	2800      	cmp	r0, #0
 8020150:	d1d8      	bne.n	8020104 <GUI_MEMDEV__WriteToActiveOpaque+0x528>
 8020152:	465e      	mov	r6, fp
 8020154:	e794      	b.n	8020080 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 8020156:	a81c      	add	r0, sp, #112	; 0x70
 8020158:	f7fd fc82 	bl	801da60 <GUI_ALLOC_UnlockH>
 802015c:	e545      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 802015e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020160:	9502      	str	r5, [sp, #8]
 8020162:	2401      	movs	r4, #1
 8020164:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020166:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020168:	9004      	str	r0, [sp, #16]
 802016a:	9603      	str	r6, [sp, #12]
 802016c:	9505      	str	r5, [sp, #20]
 802016e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020172:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020176:	9400      	str	r4, [sp, #0]
 8020178:	9401      	str	r4, [sp, #4]
 802017a:	f7f9 fdf5 	bl	8019d68 <LCD_DrawBitmap>
 802017e:	e534      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8020180:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020182:	fb08 f005 	mul.w	r0, r8, r5
 8020186:	f7fd fc41 	bl	801da0c <GUI_ALLOC_AllocNoInit>
 802018a:	900e      	str	r0, [sp, #56]	; 0x38
 802018c:	2800      	cmp	r0, #0
 802018e:	f43f ad2c 	beq.w	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8020192:	f7fd fc53 	bl	801da3c <GUI_ALLOC_LockH>
 8020196:	901e      	str	r0, [sp, #120]	; 0x78
 8020198:	4638      	mov	r0, r7
 802019a:	f7fd fc4f 	bl	801da3c <GUI_ALLOC_LockH>
 802019e:	901c      	str	r0, [sp, #112]	; 0x70
 80201a0:	6925      	ldr	r5, [r4, #16]
 80201a2:	f100 0618 	add.w	r6, r0, #24
 80201a6:	2d00      	cmp	r5, #0
 80201a8:	f000 8132 	beq.w	8020410 <GUI_MEMDEV__WriteToActiveOpaque+0x834>
 80201ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80201ae:	2d02      	cmp	r5, #2
 80201b0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80201b4:	f04f 0701 	mov.w	r7, #1
 80201b8:	f000 8107 	beq.w	80203ca <GUI_MEMDEV__WriteToActiveOpaque+0x7ee>
 80201bc:	2d04      	cmp	r5, #4
 80201be:	f000 80e1 	beq.w	8020384 <GUI_MEMDEV__WriteToActiveOpaque+0x7a8>
 80201c2:	2d01      	cmp	r5, #1
 80201c4:	f000 8183 	beq.w	80204ce <GUI_MEMDEV__WriteToActiveOpaque+0x8f2>
 80201c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80201ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80201cc:	2300      	movs	r3, #0
 80201ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80201d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80201d2:	9303      	str	r3, [sp, #12]
 80201d4:	9305      	str	r3, [sp, #20]
 80201d6:	9104      	str	r1, [sp, #16]
 80201d8:	2301      	movs	r3, #1
 80201da:	4629      	mov	r1, r5
 80201dc:	9700      	str	r7, [sp, #0]
 80201de:	9701      	str	r7, [sp, #4]
 80201e0:	9602      	str	r6, [sp, #8]
 80201e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80201e4:	4642      	mov	r2, r8
 80201e6:	441d      	add	r5, r3
 80201e8:	f7f9 fdbe 	bl	8019d68 <LCD_DrawBitmap>
 80201ec:	3c01      	subs	r4, #1
 80201ee:	d1ed      	bne.n	80201cc <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 80201f0:	4650      	mov	r0, sl
 80201f2:	f7fd fc35 	bl	801da60 <GUI_ALLOC_UnlockH>
 80201f6:	a81e      	add	r0, sp, #120	; 0x78
 80201f8:	f7fd fc32 	bl	801da60 <GUI_ALLOC_UnlockH>
 80201fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80201fe:	f7fd fd2f 	bl	801dc60 <GUI_ALLOC_Free>
 8020202:	e4f2      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8020204:	2401      	movs	r4, #1
 8020206:	3218      	adds	r2, #24
 8020208:	2500      	movs	r5, #0
 802020a:	9204      	str	r2, [sp, #16]
 802020c:	f8cd 9008 	str.w	r9, [sp, #8]
 8020210:	f8cd b00c 	str.w	fp, [sp, #12]
 8020214:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802021a:	9400      	str	r4, [sp, #0]
 802021c:	4642      	mov	r2, r8
 802021e:	9401      	str	r4, [sp, #4]
 8020220:	9505      	str	r5, [sp, #20]
 8020222:	f7f9 fda1 	bl	8019d68 <LCD_DrawBitmap>
 8020226:	e4e0      	b.n	801fbea <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8020228:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802022a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802022e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8020232:	e019      	b.n	8020268 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8020234:	2e04      	cmp	r6, #4
 8020236:	d036      	beq.n	80202a6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8020238:	2e01      	cmp	r6, #1
 802023a:	d026      	beq.n	802028a <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 802023c:	2001      	movs	r0, #1
 802023e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020240:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8020242:	9000      	str	r0, [sp, #0]
 8020244:	9001      	str	r0, [sp, #4]
 8020246:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020248:	9602      	str	r6, [sp, #8]
 802024a:	2000      	movs	r0, #0
 802024c:	9003      	str	r0, [sp, #12]
 802024e:	9005      	str	r0, [sp, #20]
 8020250:	9304      	str	r3, [sp, #16]
 8020252:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020254:	2301      	movs	r3, #1
 8020256:	4642      	mov	r2, r8
 8020258:	18cf      	adds	r7, r1, r3
 802025a:	f7f9 fd85 	bl	8019d68 <LCD_DrawBitmap>
 802025e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020260:	3e01      	subs	r6, #1
 8020262:	9609      	str	r6, [sp, #36]	; 0x24
 8020264:	d02c      	beq.n	80202c0 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8020266:	970c      	str	r7, [sp, #48]	; 0x30
 8020268:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802026a:	2e02      	cmp	r6, #2
 802026c:	d1e2      	bne.n	8020234 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 802026e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8020272:	464f      	mov	r7, r9
 8020274:	4646      	mov	r6, r8
 8020276:	f837 0b02 	ldrh.w	r0, [r7], #2
 802027a:	47a8      	blx	r5
 802027c:	47a0      	blx	r4
 802027e:	3e01      	subs	r6, #1
 8020280:	f82a 0b02 	strh.w	r0, [sl], #2
 8020284:	d1f7      	bne.n	8020276 <GUI_MEMDEV__WriteToActiveOpaque+0x69a>
 8020286:	44d9      	add	r9, fp
 8020288:	e7d8      	b.n	802023c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 802028a:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 802028e:	464f      	mov	r7, r9
 8020290:	4646      	mov	r6, r8
 8020292:	f837 0b02 	ldrh.w	r0, [r7], #2
 8020296:	47a8      	blx	r5
 8020298:	47a0      	blx	r4
 802029a:	3e01      	subs	r6, #1
 802029c:	f80a 0b01 	strb.w	r0, [sl], #1
 80202a0:	d1f7      	bne.n	8020292 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 80202a2:	44d9      	add	r9, fp
 80202a4:	e7ca      	b.n	802023c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 80202a6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80202a8:	46ca      	mov	sl, r9
 80202aa:	4646      	mov	r6, r8
 80202ac:	f83a 0b02 	ldrh.w	r0, [sl], #2
 80202b0:	47a8      	blx	r5
 80202b2:	47a0      	blx	r4
 80202b4:	3e01      	subs	r6, #1
 80202b6:	f847 0b04 	str.w	r0, [r7], #4
 80202ba:	d1f7      	bne.n	80202ac <GUI_MEMDEV__WriteToActiveOpaque+0x6d0>
 80202bc:	44d9      	add	r9, fp
 80202be:	e7bd      	b.n	802023c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 80202c0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80202c4:	e5d5      	b.n	801fe72 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 80202c6:	f7fd fbb9 	bl	801da3c <GUI_ALLOC_LockH>
 80202ca:	901d      	str	r0, [sp, #116]	; 0x74
 80202cc:	2800      	cmp	r0, #0
 80202ce:	f43f add0 	beq.w	801fe72 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 80202d2:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80202d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80202d8:	950d      	str	r5, [sp, #52]	; 0x34
 80202da:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80202de:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80202e2:	e01a      	b.n	802031a <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 80202e4:	f1ba 0f04 	cmp.w	sl, #4
 80202e8:	d032      	beq.n	8020350 <GUI_MEMDEV__WriteToActiveOpaque+0x774>
 80202ea:	f1ba 0f01 	cmp.w	sl, #1
 80202ee:	d028      	beq.n	8020342 <GUI_MEMDEV__WriteToActiveOpaque+0x766>
 80202f0:	2300      	movs	r3, #0
 80202f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80202f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80202f6:	9502      	str	r5, [sp, #8]
 80202f8:	2001      	movs	r0, #1
 80202fa:	9000      	str	r0, [sp, #0]
 80202fc:	9001      	str	r0, [sp, #4]
 80202fe:	9303      	str	r3, [sp, #12]
 8020300:	9305      	str	r3, [sp, #20]
 8020302:	9204      	str	r2, [sp, #16]
 8020304:	4639      	mov	r1, r7
 8020306:	2301      	movs	r3, #1
 8020308:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802030a:	4642      	mov	r2, r8
 802030c:	441f      	add	r7, r3
 802030e:	f7f9 fd2b 	bl	8019d68 <LCD_DrawBitmap>
 8020312:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020314:	3d01      	subs	r5, #1
 8020316:	9509      	str	r5, [sp, #36]	; 0x24
 8020318:	d02b      	beq.n	8020372 <GUI_MEMDEV__WriteToActiveOpaque+0x796>
 802031a:	f1ba 0f02 	cmp.w	sl, #2
 802031e:	d1e1      	bne.n	80202e4 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8020320:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8020324:	991d      	ldr	r1, [sp, #116]	; 0x74
 8020326:	4648      	mov	r0, r9
 8020328:	4642      	mov	r2, r8
 802032a:	4653      	mov	r3, sl
 802032c:	6975      	ldr	r5, [r6, #20]
 802032e:	47a8      	blx	r5
 8020330:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020332:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020334:	44a9      	add	r9, r5
 8020336:	4659      	mov	r1, fp
 8020338:	4642      	mov	r2, r8
 802033a:	4653      	mov	r3, sl
 802033c:	6925      	ldr	r5, [r4, #16]
 802033e:	47a8      	blx	r5
 8020340:	e7d6      	b.n	80202f0 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 8020342:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8020346:	991d      	ldr	r1, [sp, #116]	; 0x74
 8020348:	4648      	mov	r0, r9
 802034a:	4642      	mov	r2, r8
 802034c:	2302      	movs	r3, #2
 802034e:	e7ed      	b.n	802032c <GUI_MEMDEV__WriteToActiveOpaque+0x750>
 8020350:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8020354:	991d      	ldr	r1, [sp, #116]	; 0x74
 8020356:	6975      	ldr	r5, [r6, #20]
 8020358:	4648      	mov	r0, r9
 802035a:	4642      	mov	r2, r8
 802035c:	2302      	movs	r3, #2
 802035e:	47a8      	blx	r5
 8020360:	6925      	ldr	r5, [r4, #16]
 8020362:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020364:	4659      	mov	r1, fp
 8020366:	4642      	mov	r2, r8
 8020368:	4653      	mov	r3, sl
 802036a:	47a8      	blx	r5
 802036c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802036e:	44a9      	add	r9, r5
 8020370:	e7be      	b.n	80202f0 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 8020372:	a81d      	add	r0, sp, #116	; 0x74
 8020374:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8020378:	f7fd fb72 	bl	801da60 <GUI_ALLOC_UnlockH>
 802037c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802037e:	f7fd fc6f 	bl	801dc60 <GUI_ALLOC_Free>
 8020382:	e576      	b.n	801fe72 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8020384:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020386:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802038a:	46a4      	mov	ip, r4
 802038c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8020390:	f8cd c020 	str.w	ip, [sp, #32]
 8020394:	4630      	mov	r0, r6
 8020396:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020398:	4642      	mov	r2, r8
 802039a:	2304      	movs	r3, #4
 802039c:	47a0      	blx	r4
 802039e:	2300      	movs	r3, #0
 80203a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80203a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203a4:	9303      	str	r3, [sp, #12]
 80203a6:	9305      	str	r3, [sp, #20]
 80203a8:	9204      	str	r2, [sp, #16]
 80203aa:	4659      	mov	r1, fp
 80203ac:	2301      	movs	r3, #1
 80203ae:	9700      	str	r7, [sp, #0]
 80203b0:	9701      	str	r7, [sp, #4]
 80203b2:	9402      	str	r4, [sp, #8]
 80203b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80203b6:	4642      	mov	r2, r8
 80203b8:	449b      	add	fp, r3
 80203ba:	f7f9 fcd5 	bl	8019d68 <LCD_DrawBitmap>
 80203be:	3d01      	subs	r5, #1
 80203c0:	444e      	add	r6, r9
 80203c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80203c6:	d1e1      	bne.n	802038c <GUI_MEMDEV__WriteToActiveOpaque+0x7b0>
 80203c8:	e712      	b.n	80201f0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 80203ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80203cc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80203d0:	46a4      	mov	ip, r4
 80203d2:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80203d6:	f8cd c020 	str.w	ip, [sp, #32]
 80203da:	4630      	mov	r0, r6
 80203dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80203de:	4642      	mov	r2, r8
 80203e0:	2302      	movs	r3, #2
 80203e2:	47a0      	blx	r4
 80203e4:	2300      	movs	r3, #0
 80203e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80203e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203ea:	9303      	str	r3, [sp, #12]
 80203ec:	9305      	str	r3, [sp, #20]
 80203ee:	9204      	str	r2, [sp, #16]
 80203f0:	4659      	mov	r1, fp
 80203f2:	2301      	movs	r3, #1
 80203f4:	9700      	str	r7, [sp, #0]
 80203f6:	9701      	str	r7, [sp, #4]
 80203f8:	9402      	str	r4, [sp, #8]
 80203fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80203fc:	4642      	mov	r2, r8
 80203fe:	449b      	add	fp, r3
 8020400:	f7f9 fcb2 	bl	8019d68 <LCD_DrawBitmap>
 8020404:	3d01      	subs	r5, #1
 8020406:	444e      	add	r6, r9
 8020408:	f8dd c020 	ldr.w	ip, [sp, #32]
 802040c:	d1e1      	bne.n	80203d2 <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 802040e:	e6ef      	b.n	80201f0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8020410:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8020414:	2701      	movs	r7, #1
 8020416:	e01a      	b.n	802044e <GUI_MEMDEV__WriteToActiveOpaque+0x872>
 8020418:	2804      	cmp	r0, #4
 802041a:	d045      	beq.n	80204a8 <GUI_MEMDEV__WriteToActiveOpaque+0x8cc>
 802041c:	2801      	cmp	r0, #1
 802041e:	d030      	beq.n	8020482 <GUI_MEMDEV__WriteToActiveOpaque+0x8a6>
 8020420:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020424:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020426:	9202      	str	r2, [sp, #8]
 8020428:	9304      	str	r3, [sp, #16]
 802042a:	9700      	str	r7, [sp, #0]
 802042c:	2301      	movs	r3, #1
 802042e:	9701      	str	r7, [sp, #4]
 8020430:	9503      	str	r5, [sp, #12]
 8020432:	9505      	str	r5, [sp, #20]
 8020434:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020436:	4642      	mov	r2, r8
 8020438:	eb01 0b03 	add.w	fp, r1, r3
 802043c:	f7f9 fc94 	bl	8019d68 <LCD_DrawBitmap>
 8020440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020442:	3b01      	subs	r3, #1
 8020444:	9309      	str	r3, [sp, #36]	; 0x24
 8020446:	f43f aed3 	beq.w	80201f0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 802044a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 802044e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020450:	2802      	cmp	r0, #2
 8020452:	d1e1      	bne.n	8020418 <GUI_MEMDEV__WriteToActiveOpaque+0x83c>
 8020454:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020456:	46b3      	mov	fp, r6
 8020458:	46c1      	mov	r9, r8
 802045a:	4643      	mov	r3, r8
 802045c:	46b0      	mov	r8, r6
 802045e:	4626      	mov	r6, r4
 8020460:	460c      	mov	r4, r1
 8020462:	f85b 0b04 	ldr.w	r0, [fp], #4
 8020466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020468:	9308      	str	r3, [sp, #32]
 802046a:	4790      	blx	r2
 802046c:	f1b9 0901 	subs.w	r9, r9, #1
 8020470:	f824 0b02 	strh.w	r0, [r4], #2
 8020474:	9b08      	ldr	r3, [sp, #32]
 8020476:	d1f4      	bne.n	8020462 <GUI_MEMDEV__WriteToActiveOpaque+0x886>
 8020478:	4634      	mov	r4, r6
 802047a:	4646      	mov	r6, r8
 802047c:	4426      	add	r6, r4
 802047e:	4698      	mov	r8, r3
 8020480:	e7ce      	b.n	8020420 <GUI_MEMDEV__WriteToActiveOpaque+0x844>
 8020482:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020484:	46b3      	mov	fp, r6
 8020486:	46c1      	mov	r9, r8
 8020488:	4643      	mov	r3, r8
 802048a:	46b0      	mov	r8, r6
 802048c:	4626      	mov	r6, r4
 802048e:	460c      	mov	r4, r1
 8020490:	f85b 0b04 	ldr.w	r0, [fp], #4
 8020494:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020496:	9308      	str	r3, [sp, #32]
 8020498:	4788      	blx	r1
 802049a:	f1b9 0901 	subs.w	r9, r9, #1
 802049e:	f804 0b01 	strb.w	r0, [r4], #1
 80204a2:	9b08      	ldr	r3, [sp, #32]
 80204a4:	d1f4      	bne.n	8020490 <GUI_MEMDEV__WriteToActiveOpaque+0x8b4>
 80204a6:	e7e7      	b.n	8020478 <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 80204a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204aa:	46b3      	mov	fp, r6
 80204ac:	46c1      	mov	r9, r8
 80204ae:	4643      	mov	r3, r8
 80204b0:	46b0      	mov	r8, r6
 80204b2:	4626      	mov	r6, r4
 80204b4:	460c      	mov	r4, r1
 80204b6:	f85b 0b04 	ldr.w	r0, [fp], #4
 80204ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80204bc:	9308      	str	r3, [sp, #32]
 80204be:	4788      	blx	r1
 80204c0:	f1b9 0901 	subs.w	r9, r9, #1
 80204c4:	f844 0b04 	str.w	r0, [r4], #4
 80204c8:	9b08      	ldr	r3, [sp, #32]
 80204ca:	d1f4      	bne.n	80204b6 <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 80204cc:	e7d4      	b.n	8020478 <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 80204ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80204d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80204d4:	46a4      	mov	ip, r4
 80204d6:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80204da:	f8cd c020 	str.w	ip, [sp, #32]
 80204de:	4630      	mov	r0, r6
 80204e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204e2:	4642      	mov	r2, r8
 80204e4:	2301      	movs	r3, #1
 80204e6:	47a0      	blx	r4
 80204e8:	2300      	movs	r3, #0
 80204ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80204ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80204ee:	9303      	str	r3, [sp, #12]
 80204f0:	9305      	str	r3, [sp, #20]
 80204f2:	9204      	str	r2, [sp, #16]
 80204f4:	4659      	mov	r1, fp
 80204f6:	2301      	movs	r3, #1
 80204f8:	9700      	str	r7, [sp, #0]
 80204fa:	9701      	str	r7, [sp, #4]
 80204fc:	9402      	str	r4, [sp, #8]
 80204fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020500:	4642      	mov	r2, r8
 8020502:	449b      	add	fp, r3
 8020504:	f7f9 fc30 	bl	8019d68 <LCD_DrawBitmap>
 8020508:	3d01      	subs	r5, #1
 802050a:	444e      	add	r6, r9
 802050c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8020510:	d1e1      	bne.n	80204d6 <GUI_MEMDEV__WriteToActiveOpaque+0x8fa>
 8020512:	e66d      	b.n	80201f0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>

08020514 <_WriteToActiveAlpha>:
 8020514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020518:	b093      	sub	sp, #76	; 0x4c
 802051a:	4698      	mov	r8, r3
 802051c:	460e      	mov	r6, r1
 802051e:	4614      	mov	r4, r2
 8020520:	9009      	str	r0, [sp, #36]	; 0x24
 8020522:	f7fd fa8b 	bl	801da3c <GUI_ALLOC_LockH>
 8020526:	4603      	mov	r3, r0
 8020528:	a812      	add	r0, sp, #72	; 0x48
 802052a:	681a      	ldr	r2, [r3, #0]
 802052c:	4d5a      	ldr	r5, [pc, #360]	; (8020698 <_WriteToActiveAlpha+0x184>)
 802052e:	6912      	ldr	r2, [r2, #16]
 8020530:	f840 3d08 	str.w	r3, [r0, #-8]!
 8020534:	6852      	ldr	r2, [r2, #4]
 8020536:	9208      	str	r2, [sp, #32]
 8020538:	891a      	ldrh	r2, [r3, #8]
 802053a:	9207      	str	r2, [sp, #28]
 802053c:	f8b3 900a 	ldrh.w	r9, [r3, #10]
 8020540:	f7fd fa8e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020544:	682b      	ldr	r3, [r5, #0]
 8020546:	4a55      	ldr	r2, [pc, #340]	; (802069c <_WriteToActiveAlpha+0x188>)
 8020548:	7c5b      	ldrb	r3, [r3, #17]
 802054a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802054e:	68c3      	ldr	r3, [r0, #12]
 8020550:	2108      	movs	r1, #8
 8020552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020554:	4798      	blx	r3
 8020556:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802055a:	f8d8 2000 	ldr.w	r2, [r8]
 802055e:	930a      	str	r3, [sp, #40]	; 0x28
 8020560:	2817      	cmp	r0, #23
 8020562:	bf94      	ite	ls
 8020564:	4682      	movls	sl, r0
 8020566:	f04f 0a20 	movhi.w	sl, #32
 802056a:	2000      	movs	r0, #0
 802056c:	920e      	str	r2, [sp, #56]	; 0x38
 802056e:	f7fa fb69 	bl	801ac44 <GUI__AllocAlphaBuffer>
 8020572:	b110      	cbz	r0, 802057a <_WriteToActiveAlpha+0x66>
 8020574:	b013      	add	sp, #76	; 0x4c
 8020576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802057a:	9a07      	ldr	r2, [sp, #28]
 802057c:	682b      	ldr	r3, [r5, #0]
 802057e:	b212      	sxth	r2, r2
 8020580:	4615      	mov	r5, r2
 8020582:	920d      	str	r2, [sp, #52]	; 0x34
 8020584:	4435      	add	r5, r6
 8020586:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802058a:	3d01      	subs	r5, #1
 802058c:	1aad      	subs	r5, r5, r2
 802058e:	2d00      	cmp	r5, #0
 8020590:	bfca      	itet	gt
 8020592:	9a0d      	ldrgt	r2, [sp, #52]	; 0x34
 8020594:	9d0d      	ldrle	r5, [sp, #52]	; 0x34
 8020596:	ebc5 0502 	rsbgt	r5, r5, r2
 802059a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802059e:	42b2      	cmp	r2, r6
 80205a0:	bfc3      	ittte	gt
 80205a2:	ebc6 0102 	rsbgt	r1, r6, r2
 80205a6:	ebc1 0505 	rsbgt	r5, r1, r5
 80205aa:	4616      	movgt	r6, r2
 80205ac:	2100      	movle	r1, #0
 80205ae:	2d00      	cmp	r5, #0
 80205b0:	dde0      	ble.n	8020574 <_WriteToActiveAlpha+0x60>
 80205b2:	fa0f f989 	sxth.w	r9, r9
 80205b6:	eb09 0204 	add.w	r2, r9, r4
 80205ba:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80205be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80205c2:	3a01      	subs	r2, #1
 80205c4:	1a12      	subs	r2, r2, r0
 80205c6:	2a00      	cmp	r2, #0
 80205c8:	bfc8      	it	gt
 80205ca:	ebc2 0909 	rsbgt	r9, r2, r9
 80205ce:	42a3      	cmp	r3, r4
 80205d0:	bfc3      	ittte	gt
 80205d2:	ebc4 0703 	rsbgt	r7, r4, r3
 80205d6:	ebc7 0909 	rsbgt	r9, r7, r9
 80205da:	461c      	movgt	r4, r3
 80205dc:	2700      	movle	r7, #0
 80205de:	f1b9 0f00 	cmp.w	r9, #0
 80205e2:	ddc7      	ble.n	8020574 <_WriteToActiveAlpha+0x60>
 80205e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205e6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80205ea:	44a1      	add	r9, r4
 80205ec:	fb07 1703 	mla	r7, r7, r3, r1
 80205f0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80205f4:	00bf      	lsls	r7, r7, #2
 80205f6:	46b1      	mov	r9, r6
 80205f8:	e01b      	b.n	8020632 <_WriteToActiveAlpha+0x11e>
 80205fa:	4630      	mov	r0, r6
 80205fc:	4631      	mov	r1, r6
 80205fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020600:	2304      	movs	r3, #4
 8020602:	47e0      	blx	ip
 8020604:	2301      	movs	r3, #1
 8020606:	2200      	movs	r2, #0
 8020608:	9604      	str	r6, [sp, #16]
 802060a:	9e07      	ldr	r6, [sp, #28]
 802060c:	9203      	str	r2, [sp, #12]
 802060e:	9205      	str	r2, [sp, #20]
 8020610:	4621      	mov	r1, r4
 8020612:	f04f 0e04 	mov.w	lr, #4
 8020616:	f8cd a008 	str.w	sl, [sp, #8]
 802061a:	9300      	str	r3, [sp, #0]
 802061c:	9301      	str	r3, [sp, #4]
 802061e:	4648      	mov	r0, r9
 8020620:	462a      	mov	r2, r5
 8020622:	441c      	add	r4, r3
 8020624:	fb16 770e 	smlabb	r7, r6, lr, r7
 8020628:	f7f9 fb9e 	bl	8019d68 <LCD_DrawBitmap>
 802062c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802062e:	42b4      	cmp	r4, r6
 8020630:	d0a0      	beq.n	8020574 <_WriteToActiveAlpha+0x60>
 8020632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020634:	f7f6 fea4 	bl	8017380 <GUI_MEMDEV_GetDataPtr>
 8020638:	9e08      	ldr	r6, [sp, #32]
 802063a:	9600      	str	r6, [sp, #0]
 802063c:	ab11      	add	r3, sp, #68	; 0x44
 802063e:	19c2      	adds	r2, r0, r7
 8020640:	9301      	str	r3, [sp, #4]
 8020642:	4648      	mov	r0, r9
 8020644:	4621      	mov	r1, r4
 8020646:	462b      	mov	r3, r5
 8020648:	f7fa f9aa 	bl	801a9a0 <GUI__DoAlphaBlending>
 802064c:	4606      	mov	r6, r0
 802064e:	2800      	cmp	r0, #0
 8020650:	d090      	beq.n	8020574 <_WriteToActiveAlpha+0x60>
 8020652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020654:	4b12      	ldr	r3, [pc, #72]	; (80206a0 <_WriteToActiveAlpha+0x18c>)
 8020656:	429a      	cmp	r2, r3
 8020658:	d0d4      	beq.n	8020604 <_WriteToActiveAlpha+0xf0>
 802065a:	4629      	mov	r1, r5
 802065c:	4652      	mov	r2, sl
 802065e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020660:	f001 f886 	bl	8021770 <GUI__CompactPixelIndicesEx>
 8020664:	2800      	cmp	r0, #0
 8020666:	d1cd      	bne.n	8020604 <_WriteToActiveAlpha+0xf0>
 8020668:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 802066c:	f8de c010 	ldr.w	ip, [lr, #16]
 8020670:	f1bc 0f00 	cmp.w	ip, #0
 8020674:	d1c1      	bne.n	80205fa <_WriteToActiveAlpha+0xe6>
 8020676:	46a0      	mov	r8, r4
 8020678:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 802067c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802067e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020680:	4635      	mov	r5, r6
 8020682:	6828      	ldr	r0, [r5, #0]
 8020684:	47a0      	blx	r4
 8020686:	f1bb 0b01 	subs.w	fp, fp, #1
 802068a:	f845 0b04 	str.w	r0, [r5], #4
 802068e:	d1f8      	bne.n	8020682 <_WriteToActiveAlpha+0x16e>
 8020690:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020692:	4644      	mov	r4, r8
 8020694:	e7b6      	b.n	8020604 <_WriteToActiveAlpha+0xf0>
 8020696:	bf00      	nop
 8020698:	2000027c 	.word	0x2000027c
 802069c:	2002cbcc 	.word	0x2002cbcc
 80206a0:	0801df59 	.word	0x0801df59

080206a4 <GUI_MEMDEV__WriteToActiveAlpha>:
 80206a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206a8:	4e55      	ldr	r6, [pc, #340]	; (8020800 <GUI_MEMDEV__WriteToActiveAlpha+0x15c>)
 80206aa:	4b56      	ldr	r3, [pc, #344]	; (8020804 <GUI_MEMDEV__WriteToActiveAlpha+0x160>)
 80206ac:	6835      	ldr	r5, [r6, #0]
 80206ae:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8020810 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>
 80206b2:	7c6c      	ldrb	r4, [r5, #17]
 80206b4:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
 80206b8:	f8d9 3000 	ldr.w	r3, [r9]
 80206bc:	f8de c010 	ldr.w	ip, [lr, #16]
 80206c0:	b08b      	sub	sp, #44	; 0x2c
 80206c2:	4680      	mov	r8, r0
 80206c4:	460c      	mov	r4, r1
 80206c6:	4617      	mov	r7, r2
 80206c8:	b153      	cbz	r3, 80206e0 <GUI_MEMDEV__WriteToActiveAlpha+0x3c>
 80206ca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80206cc:	b172      	cbz	r2, 80206ec <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 80206ce:	4a4e      	ldr	r2, [pc, #312]	; (8020808 <GUI_MEMDEV__WriteToActiveAlpha+0x164>)
 80206d0:	ebbc 0302 	subs.w	r3, ip, r2
 80206d4:	425a      	negs	r2, r3
 80206d6:	415a      	adcs	r2, r3
 80206d8:	4640      	mov	r0, r8
 80206da:	b98a      	cbnz	r2, 8020700 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 80206dc:	4621      	mov	r1, r4
 80206de:	463a      	mov	r2, r7
 80206e0:	4663      	mov	r3, ip
 80206e2:	f7ff ff17 	bl	8020514 <_WriteToActiveAlpha>
 80206e6:	b00b      	add	sp, #44	; 0x2c
 80206e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206ec:	f8de 200c 	ldr.w	r2, [lr, #12]
 80206f0:	6812      	ldr	r2, [r2, #0]
 80206f2:	f1d2 0201 	rsbs	r2, r2, #1
 80206f6:	bf38      	it	cc
 80206f8:	2200      	movcc	r2, #0
 80206fa:	4640      	mov	r0, r8
 80206fc:	2a00      	cmp	r2, #0
 80206fe:	d0ed      	beq.n	80206dc <GUI_MEMDEV__WriteToActiveAlpha+0x38>
 8020700:	f7fd f99c 	bl	801da3c <GUI_ALLOC_LockH>
 8020704:	4602      	mov	r2, r0
 8020706:	a80a      	add	r0, sp, #40	; 0x28
 8020708:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 802070c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8020710:	8955      	ldrh	r5, [r2, #10]
 8020712:	68d2      	ldr	r2, [r2, #12]
 8020714:	9207      	str	r2, [sp, #28]
 8020716:	f7fd f9a3 	bl	801da60 <GUI_ALLOC_UnlockH>
 802071a:	6830      	ldr	r0, [r6, #0]
 802071c:	eb0b 0204 	add.w	r2, fp, r4
 8020720:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8020724:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8020728:	3a01      	subs	r2, #1
 802072a:	1ad2      	subs	r2, r2, r3
 802072c:	2a00      	cmp	r2, #0
 802072e:	bfcc      	ite	gt
 8020730:	ebc2 0a0b 	rsbgt	sl, r2, fp
 8020734:	46da      	movle	sl, fp
 8020736:	428c      	cmp	r4, r1
 8020738:	bfbd      	ittte	lt
 802073a:	ebc4 0301 	rsblt	r3, r4, r1
 802073e:	ebc3 0a0a 	rsblt	sl, r3, sl
 8020742:	460c      	movlt	r4, r1
 8020744:	2300      	movge	r3, #0
 8020746:	f1ba 0f00 	cmp.w	sl, #0
 802074a:	ddcc      	ble.n	80206e6 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 802074c:	b22d      	sxth	r5, r5
 802074e:	19e9      	adds	r1, r5, r7
 8020750:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8020754:	3901      	subs	r1, #1
 8020756:	ebcc 0101 	rsb	r1, ip, r1
 802075a:	2900      	cmp	r1, #0
 802075c:	bfc8      	it	gt
 802075e:	ebc1 0505 	rsbgt	r5, r1, r5
 8020762:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8020766:	428f      	cmp	r7, r1
 8020768:	bfbd      	ittte	lt
 802076a:	ebc7 0c01 	rsblt	ip, r7, r1
 802076e:	ebcc 0505 	rsblt	r5, ip, r5
 8020772:	460f      	movlt	r7, r1
 8020774:	f04f 0c00 	movge.w	ip, #0
 8020778:	2d00      	cmp	r5, #0
 802077a:	ddb4      	ble.n	80206e6 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 802077c:	4640      	mov	r0, r8
 802077e:	9305      	str	r3, [sp, #20]
 8020780:	f8cd c018 	str.w	ip, [sp, #24]
 8020784:	f7f6 fdfc 	bl	8017380 <GUI_MEMDEV_GetDataPtr>
 8020788:	6836      	ldr	r6, [r6, #0]
 802078a:	9b05      	ldr	r3, [sp, #20]
 802078c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8020790:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8020792:	fb0c 330b 	mla	r3, ip, fp, r3
 8020796:	eb00 0883 	add.w	r8, r0, r3, lsl #2
 802079a:	b319      	cbz	r1, 80207e4 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 802079c:	4608      	mov	r0, r1
 802079e:	f7fd f94d 	bl	801da3c <GUI_ALLOC_LockH>
 80207a2:	4606      	mov	r6, r0
 80207a4:	a80a      	add	r0, sp, #40	; 0x28
 80207a6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80207aa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80207ae:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80207b2:	f840 6d04 	str.w	r6, [r0, #-4]!
 80207b6:	1a7f      	subs	r7, r7, r1
 80207b8:	3618      	adds	r6, #24
 80207ba:	fb0b 6607 	mla	r6, fp, r7, r6
 80207be:	1ae4      	subs	r4, r4, r3
 80207c0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80207c4:	f7fd f94c 	bl	801da60 <GUI_ALLOC_UnlockH>
 80207c8:	2c00      	cmp	r4, #0
 80207ca:	d08c      	beq.n	80206e6 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 80207cc:	9f07      	ldr	r7, [sp, #28]
 80207ce:	f8cd b000 	str.w	fp, [sp]
 80207d2:	9701      	str	r7, [sp, #4]
 80207d4:	f8d9 6000 	ldr.w	r6, [r9]
 80207d8:	4620      	mov	r0, r4
 80207da:	4641      	mov	r1, r8
 80207dc:	4652      	mov	r2, sl
 80207de:	462b      	mov	r3, r5
 80207e0:	47b0      	blx	r6
 80207e2:	e780      	b.n	80206e6 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 80207e4:	7c70      	ldrb	r0, [r6, #17]
 80207e6:	4e09      	ldr	r6, [pc, #36]	; (802080c <GUI_MEMDEV__WriteToActiveAlpha+0x168>)
 80207e8:	f8cd a000 	str.w	sl, [sp]
 80207ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80207f0:	9302      	str	r3, [sp, #8]
 80207f2:	9501      	str	r5, [sp, #4]
 80207f4:	4621      	mov	r1, r4
 80207f6:	463a      	mov	r2, r7
 80207f8:	4643      	mov	r3, r8
 80207fa:	6834      	ldr	r4, [r6, #0]
 80207fc:	47a0      	blx	r4
 80207fe:	e772      	b.n	80206e6 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 8020800:	2000027c 	.word	0x2000027c
 8020804:	2002cbcc 	.word	0x2002cbcc
 8020808:	08029cf0 	.word	0x08029cf0
 802080c:	2002cb70 	.word	0x2002cb70
 8020810:	2002cb74 	.word	0x2002cb74

08020814 <GUI_MEMDEV_Write>:
 8020814:	b570      	push	{r4, r5, r6, lr}
 8020816:	4604      	mov	r4, r0
 8020818:	b084      	sub	sp, #16
 802081a:	b908      	cbnz	r0, 8020820 <GUI_MEMDEV_Write+0xc>
 802081c:	b004      	add	sp, #16
 802081e:	bd70      	pop	{r4, r5, r6, pc}
 8020820:	f7fa fd8c 	bl	801b33c <GUI_Lock>
 8020824:	4620      	mov	r0, r4
 8020826:	f7fd f909 	bl	801da3c <GUI_ALLOC_LockH>
 802082a:	4603      	mov	r3, r0
 802082c:	9301      	str	r3, [sp, #4]
 802082e:	889e      	ldrh	r6, [r3, #4]
 8020830:	88dd      	ldrh	r5, [r3, #6]
 8020832:	891a      	ldrh	r2, [r3, #8]
 8020834:	8959      	ldrh	r1, [r3, #10]
 8020836:	f8ad 6008 	strh.w	r6, [sp, #8]
 802083a:	186b      	adds	r3, r5, r1
 802083c:	4432      	add	r2, r6
 802083e:	3a01      	subs	r2, #1
 8020840:	3b01      	subs	r3, #1
 8020842:	a801      	add	r0, sp, #4
 8020844:	f8ad 200c 	strh.w	r2, [sp, #12]
 8020848:	f8ad 300e 	strh.w	r3, [sp, #14]
 802084c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8020850:	f7fd f906 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020854:	a802      	add	r0, sp, #8
 8020856:	f7f6 f851 	bl	80168fc <WM__InitIVRSearch>
 802085a:	b150      	cbz	r0, 8020872 <GUI_MEMDEV_Write+0x5e>
 802085c:	b236      	sxth	r6, r6
 802085e:	b22d      	sxth	r5, r5
 8020860:	4620      	mov	r0, r4
 8020862:	4631      	mov	r1, r6
 8020864:	462a      	mov	r2, r5
 8020866:	f7f7 fced 	bl	8018244 <GUI_MEMDEV__WriteToActiveAt>
 802086a:	f7f5 ff21 	bl	80166b0 <WM__GetNextIVR>
 802086e:	2800      	cmp	r0, #0
 8020870:	d1f6      	bne.n	8020860 <GUI_MEMDEV_Write+0x4c>
 8020872:	f7fa fd59 	bl	801b328 <GUI_Unlock>
 8020876:	b004      	add	sp, #16
 8020878:	bd70      	pop	{r4, r5, r6, pc}
 802087a:	bf00      	nop

0802087c <GUI_USAGE_BM_AddPixel>:
 802087c:	4603      	mov	r3, r0
 802087e:	b430      	push	{r4, r5}
 8020880:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8020884:	f933 5b14 	ldrsh.w	r5, [r3], #20
 8020888:	6900      	ldr	r0, [r0, #16]
 802088a:	1b49      	subs	r1, r1, r5
 802088c:	1b12      	subs	r2, r2, r4
 802088e:	fb00 3302 	mla	r3, r0, r2, r3
 8020892:	10c8      	asrs	r0, r1, #3
 8020894:	2480      	movs	r4, #128	; 0x80
 8020896:	5c1a      	ldrb	r2, [r3, r0]
 8020898:	f001 0107 	and.w	r1, r1, #7
 802089c:	fa44 f101 	asr.w	r1, r4, r1
 80208a0:	4311      	orrs	r1, r2
 80208a2:	5419      	strb	r1, [r3, r0]
 80208a4:	bc30      	pop	{r4, r5}
 80208a6:	4770      	bx	lr

080208a8 <GUI_USAGE_BM_GetNextDirty>:
 80208a8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80208ac:	4293      	cmp	r3, r2
 80208ae:	b470      	push	{r4, r5, r6}
 80208b0:	680c      	ldr	r4, [r1, #0]
 80208b2:	8885      	ldrh	r5, [r0, #4]
 80208b4:	dd39      	ble.n	802092a <GUI_USAGE_BM_GetNextDirty+0x82>
 80208b6:	b22d      	sxth	r5, r5
 80208b8:	42ac      	cmp	r4, r5
 80208ba:	6903      	ldr	r3, [r0, #16]
 80208bc:	da35      	bge.n	802092a <GUI_USAGE_BM_GetNextDirty+0x82>
 80208be:	3014      	adds	r0, #20
 80208c0:	fb02 0203 	mla	r2, r2, r3, r0
 80208c4:	10e0      	asrs	r0, r4, #3
 80208c6:	f004 0307 	and.w	r3, r4, #7
 80208ca:	5c16      	ldrb	r6, [r2, r0]
 80208cc:	fa06 f303 	lsl.w	r3, r6, r3
 80208d0:	4402      	add	r2, r0
 80208d2:	3d01      	subs	r5, #1
 80208d4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80208d8:	ebc0 00e5 	rsb	r0, r0, r5, asr #3
 80208dc:	f102 0201 	add.w	r2, r2, #1
 80208e0:	d10d      	bne.n	80208fe <GUI_USAGE_BM_GetNextDirty+0x56>
 80208e2:	b318      	cbz	r0, 802092c <GUI_USAGE_BM_GetNextDirty+0x84>
 80208e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80208e8:	3408      	adds	r4, #8
 80208ea:	f024 0407 	bic.w	r4, r4, #7
 80208ee:	3801      	subs	r0, #1
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	d0f6      	beq.n	80208e2 <GUI_USAGE_BM_GetNextDirty+0x3a>
 80208f4:	061d      	lsls	r5, r3, #24
 80208f6:	d404      	bmi.n	8020902 <GUI_USAGE_BM_GetNextDirty+0x5a>
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	b2db      	uxtb	r3, r3
 80208fc:	3401      	adds	r4, #1
 80208fe:	061d      	lsls	r5, r3, #24
 8020900:	d5fa      	bpl.n	80208f8 <GUI_USAGE_BM_GetNextDirty+0x50>
 8020902:	2bff      	cmp	r3, #255	; 0xff
 8020904:	d014      	beq.n	8020930 <GUI_USAGE_BM_GetNextDirty+0x88>
 8020906:	065e      	lsls	r6, r3, #25
 8020908:	4625      	mov	r5, r4
 802090a:	d505      	bpl.n	8020918 <GUI_USAGE_BM_GetNextDirty+0x70>
 802090c:	005b      	lsls	r3, r3, #1
 802090e:	b2db      	uxtb	r3, r3
 8020910:	065e      	lsls	r6, r3, #25
 8020912:	f105 0501 	add.w	r5, r5, #1
 8020916:	d4f9      	bmi.n	802090c <GUI_USAGE_BM_GetNextDirty+0x64>
 8020918:	f005 0307 	and.w	r3, r5, #7
 802091c:	2b07      	cmp	r3, #7
 802091e:	d009      	beq.n	8020934 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8020920:	1b28      	subs	r0, r5, r4
 8020922:	3001      	adds	r0, #1
 8020924:	600c      	str	r4, [r1, #0]
 8020926:	bc70      	pop	{r4, r5, r6}
 8020928:	4770      	bx	lr
 802092a:	2000      	movs	r0, #0
 802092c:	bc70      	pop	{r4, r5, r6}
 802092e:	4770      	bx	lr
 8020930:	1de5      	adds	r5, r4, #7
 8020932:	e7f1      	b.n	8020918 <GUI_USAGE_BM_GetNextDirty+0x70>
 8020934:	2800      	cmp	r0, #0
 8020936:	ddf3      	ble.n	8020920 <GUI_USAGE_BM_GetNextDirty+0x78>
 8020938:	7813      	ldrb	r3, [r2, #0]
 802093a:	2bff      	cmp	r3, #255	; 0xff
 802093c:	d10e      	bne.n	802095c <GUI_USAGE_BM_GetNextDirty+0xb4>
 802093e:	4410      	add	r0, r2
 8020940:	3801      	subs	r0, #1
 8020942:	e003      	b.n	802094c <GUI_USAGE_BM_GetNextDirty+0xa4>
 8020944:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020948:	2bff      	cmp	r3, #255	; 0xff
 802094a:	d107      	bne.n	802095c <GUI_USAGE_BM_GetNextDirty+0xb4>
 802094c:	4282      	cmp	r2, r0
 802094e:	f105 0508 	add.w	r5, r5, #8
 8020952:	d1f7      	bne.n	8020944 <GUI_USAGE_BM_GetNextDirty+0x9c>
 8020954:	e7e4      	b.n	8020920 <GUI_USAGE_BM_GetNextDirty+0x78>
 8020956:	005b      	lsls	r3, r3, #1
 8020958:	b2db      	uxtb	r3, r3
 802095a:	3501      	adds	r5, #1
 802095c:	061a      	lsls	r2, r3, #24
 802095e:	d4fa      	bmi.n	8020956 <GUI_USAGE_BM_GetNextDirty+0xae>
 8020960:	e7de      	b.n	8020920 <GUI_USAGE_BM_GetNextDirty+0x78>
 8020962:	bf00      	nop

08020964 <_GUI_USAGE_BM_Delete>:
 8020964:	f7fd b97c 	b.w	801dc60 <GUI_ALLOC_Free>

08020968 <GUI_USAGE_BM_Clear>:
 8020968:	4603      	mov	r3, r0
 802096a:	2100      	movs	r1, #0
 802096c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020970:	691b      	ldr	r3, [r3, #16]
 8020972:	3014      	adds	r0, #20
 8020974:	fb03 f202 	mul.w	r2, r3, r2
 8020978:	f001 bfe1 	b.w	802293e <memset>

0802097c <GUI_USAGE_BM_AddHLine>:
 802097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020980:	f9b0 4000 	ldrsh.w	r4, [r0]
 8020984:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8020988:	1b0c      	subs	r4, r1, r4
 802098a:	42b4      	cmp	r4, r6
 802098c:	da2c      	bge.n	80209e8 <GUI_USAGE_BM_AddHLine+0x6c>
 802098e:	4423      	add	r3, r4
 8020990:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8020994:	6905      	ldr	r5, [r0, #16]
 8020996:	3b01      	subs	r3, #1
 8020998:	43de      	mvns	r6, r3
 802099a:	1bd2      	subs	r2, r2, r7
 802099c:	21ff      	movs	r1, #255	; 0xff
 802099e:	f004 0707 	and.w	r7, r4, #7
 80209a2:	3014      	adds	r0, #20
 80209a4:	10e4      	asrs	r4, r4, #3
 80209a6:	f006 0607 	and.w	r6, r6, #7
 80209aa:	fb05 0502 	mla	r5, r5, r2, r0
 80209ae:	fa01 f606 	lsl.w	r6, r1, r6
 80209b2:	fa41 f207 	asr.w	r2, r1, r7
 80209b6:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 80209ba:	b2f7      	uxtb	r7, r6
 80209bc:	b2d0      	uxtb	r0, r2
 80209be:	eb05 0604 	add.w	r6, r5, r4
 80209c2:	d013      	beq.n	80209ec <GUI_USAGE_BM_AddHLine+0x70>
 80209c4:	5d2a      	ldrb	r2, [r5, r4]
 80209c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80209ca:	4310      	orrs	r0, r2
 80209cc:	f1b8 0f00 	cmp.w	r8, #0
 80209d0:	f106 0601 	add.w	r6, r6, #1
 80209d4:	5528      	strb	r0, [r5, r4]
 80209d6:	dd04      	ble.n	80209e2 <GUI_USAGE_BM_AddHLine+0x66>
 80209d8:	4630      	mov	r0, r6
 80209da:	4642      	mov	r2, r8
 80209dc:	f001 ffaf 	bl	802293e <memset>
 80209e0:	4446      	add	r6, r8
 80209e2:	7833      	ldrb	r3, [r6, #0]
 80209e4:	431f      	orrs	r7, r3
 80209e6:	7037      	strb	r7, [r6, #0]
 80209e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209ec:	5d2b      	ldrb	r3, [r5, r4]
 80209ee:	4038      	ands	r0, r7
 80209f0:	4318      	orrs	r0, r3
 80209f2:	5528      	strb	r0, [r5, r4]
 80209f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080209f8 <GUI_USAGE_BM_Create>:
 80209f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209fc:	f102 060f 	add.w	r6, r2, #15
 8020a00:	1136      	asrs	r6, r6, #4
 8020a02:	0076      	lsls	r6, r6, #1
 8020a04:	461f      	mov	r7, r3
 8020a06:	fb06 f303 	mul.w	r3, r6, r3
 8020a0a:	b082      	sub	sp, #8
 8020a0c:	4681      	mov	r9, r0
 8020a0e:	f103 0014 	add.w	r0, r3, #20
 8020a12:	4690      	mov	r8, r2
 8020a14:	468a      	mov	sl, r1
 8020a16:	f7fd f999 	bl	801dd4c <GUI_ALLOC_AllocZero>
 8020a1a:	4605      	mov	r5, r0
 8020a1c:	b1c0      	cbz	r0, 8020a50 <GUI_USAGE_BM_Create+0x58>
 8020a1e:	f7fa fc8d 	bl	801b33c <GUI_Lock>
 8020a22:	4628      	mov	r0, r5
 8020a24:	f7fd f80a 	bl	801da3c <GUI_ALLOC_LockH>
 8020a28:	4604      	mov	r4, r0
 8020a2a:	a802      	add	r0, sp, #8
 8020a2c:	490a      	ldr	r1, [pc, #40]	; (8020a58 <GUI_USAGE_BM_Create+0x60>)
 8020a2e:	f840 4d04 	str.w	r4, [r0, #-4]!
 8020a32:	2201      	movs	r2, #1
 8020a34:	60a1      	str	r1, [r4, #8]
 8020a36:	81a2      	strh	r2, [r4, #12]
 8020a38:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020a3c:	80e7      	strh	r7, [r4, #6]
 8020a3e:	6126      	str	r6, [r4, #16]
 8020a40:	f8a4 9000 	strh.w	r9, [r4]
 8020a44:	f8a4 a002 	strh.w	sl, [r4, #2]
 8020a48:	f7fd f80a 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020a4c:	f7fa fc6c 	bl	801b328 <GUI_Unlock>
 8020a50:	4628      	mov	r0, r5
 8020a52:	b002      	add	sp, #8
 8020a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a58:	0802a010 	.word	0x0802a010

08020a5c <GUI_USAGE_DecUseCnt>:
 8020a5c:	b530      	push	{r4, r5, lr}
 8020a5e:	4605      	mov	r5, r0
 8020a60:	b083      	sub	sp, #12
 8020a62:	f7fa fc6b 	bl	801b33c <GUI_Lock>
 8020a66:	4628      	mov	r0, r5
 8020a68:	f7fc ffe8 	bl	801da3c <GUI_ALLOC_LockH>
 8020a6c:	4602      	mov	r2, r0
 8020a6e:	a802      	add	r0, sp, #8
 8020a70:	8994      	ldrh	r4, [r2, #12]
 8020a72:	f840 2d04 	str.w	r2, [r0, #-4]!
 8020a76:	3c01      	subs	r4, #1
 8020a78:	b2a4      	uxth	r4, r4
 8020a7a:	8194      	strh	r4, [r2, #12]
 8020a7c:	f7fc fff0 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020a80:	b914      	cbnz	r4, 8020a88 <GUI_USAGE_DecUseCnt+0x2c>
 8020a82:	4628      	mov	r0, r5
 8020a84:	f7fd f8ec 	bl	801dc60 <GUI_ALLOC_Free>
 8020a88:	f7fa fc4e 	bl	801b328 <GUI_Unlock>
 8020a8c:	b003      	add	sp, #12
 8020a8e:	bd30      	pop	{r4, r5, pc}

08020a90 <GUI_USAGE_AddRect>:
 8020a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a94:	9c08      	ldr	r4, [sp, #32]
 8020a96:	4606      	mov	r6, r0
 8020a98:	4689      	mov	r9, r1
 8020a9a:	4615      	mov	r5, r2
 8020a9c:	4698      	mov	r8, r3
 8020a9e:	68b2      	ldr	r2, [r6, #8]
 8020aa0:	4630      	mov	r0, r6
 8020aa2:	6857      	ldr	r7, [r2, #4]
 8020aa4:	4649      	mov	r1, r9
 8020aa6:	462a      	mov	r2, r5
 8020aa8:	4643      	mov	r3, r8
 8020aaa:	47b8      	blx	r7
 8020aac:	3c01      	subs	r4, #1
 8020aae:	f105 0501 	add.w	r5, r5, #1
 8020ab2:	d1f4      	bne.n	8020a9e <GUI_USAGE_AddRect+0xe>
 8020ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020ab8 <GUI_MEMDEV_ReduceYSize>:
 8020ab8:	b530      	push	{r4, r5, lr}
 8020aba:	4604      	mov	r4, r0
 8020abc:	b083      	sub	sp, #12
 8020abe:	460d      	mov	r5, r1
 8020ac0:	b188      	cbz	r0, 8020ae6 <GUI_MEMDEV_ReduceYSize+0x2e>
 8020ac2:	f7fa fc3b 	bl	801b33c <GUI_Lock>
 8020ac6:	4620      	mov	r0, r4
 8020ac8:	f7fc ffb8 	bl	801da3c <GUI_ALLOC_LockH>
 8020acc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8020ad0:	9001      	str	r0, [sp, #4]
 8020ad2:	42ab      	cmp	r3, r5
 8020ad4:	bfc8      	it	gt
 8020ad6:	8145      	strhgt	r5, [r0, #10]
 8020ad8:	a801      	add	r0, sp, #4
 8020ada:	f7fc ffc1 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020ade:	f7fa fc23 	bl	801b328 <GUI_Unlock>
 8020ae2:	b003      	add	sp, #12
 8020ae4:	bd30      	pop	{r4, r5, pc}
 8020ae6:	4b03      	ldr	r3, [pc, #12]	; (8020af4 <GUI_MEMDEV_ReduceYSize+0x3c>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8020aec:	2c00      	cmp	r4, #0
 8020aee:	d1e8      	bne.n	8020ac2 <GUI_MEMDEV_ReduceYSize+0xa>
 8020af0:	b003      	add	sp, #12
 8020af2:	bd30      	pop	{r4, r5, pc}
 8020af4:	2000027c 	.word	0x2000027c

08020af8 <GUI_MEMDEV_Clear>:
 8020af8:	b510      	push	{r4, lr}
 8020afa:	4604      	mov	r4, r0
 8020afc:	b082      	sub	sp, #8
 8020afe:	b928      	cbnz	r0, 8020b0c <GUI_MEMDEV_Clear+0x14>
 8020b00:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <GUI_MEMDEV_Clear+0x54>)
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8020b06:	b90c      	cbnz	r4, 8020b0c <GUI_MEMDEV_Clear+0x14>
 8020b08:	b002      	add	sp, #8
 8020b0a:	bd10      	pop	{r4, pc}
 8020b0c:	f7fa fc16 	bl	801b33c <GUI_Lock>
 8020b10:	4620      	mov	r0, r4
 8020b12:	f7fc ff93 	bl	801da3c <GUI_ALLOC_LockH>
 8020b16:	ab02      	add	r3, sp, #8
 8020b18:	6944      	ldr	r4, [r0, #20]
 8020b1a:	f843 0d08 	str.w	r0, [r3, #-8]!
 8020b1e:	4668      	mov	r0, sp
 8020b20:	f7fc ff9e 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020b24:	b91c      	cbnz	r4, 8020b2e <GUI_MEMDEV_Clear+0x36>
 8020b26:	f7fa fbff 	bl	801b328 <GUI_Unlock>
 8020b2a:	b002      	add	sp, #8
 8020b2c:	bd10      	pop	{r4, pc}
 8020b2e:	4620      	mov	r0, r4
 8020b30:	f7fc ff84 	bl	801da3c <GUI_ALLOC_LockH>
 8020b34:	ac02      	add	r4, sp, #8
 8020b36:	6882      	ldr	r2, [r0, #8]
 8020b38:	f844 0d04 	str.w	r0, [r4, #-4]!
 8020b3c:	6893      	ldr	r3, [r2, #8]
 8020b3e:	4798      	blx	r3
 8020b40:	4620      	mov	r0, r4
 8020b42:	f7fc ff8d 	bl	801da60 <GUI_ALLOC_UnlockH>
 8020b46:	f7fa fbef 	bl	801b328 <GUI_Unlock>
 8020b4a:	e7ee      	b.n	8020b2a <GUI_MEMDEV_Clear+0x32>
 8020b4c:	2000027c 	.word	0x2000027c

08020b50 <LCD_SelectLCD>:
 8020b50:	b510      	push	{r4, lr}
 8020b52:	4c0e      	ldr	r4, [pc, #56]	; (8020b8c <LCD_SelectLCD+0x3c>)
 8020b54:	4b0e      	ldr	r3, [pc, #56]	; (8020b90 <LCD_SelectLCD+0x40>)
 8020b56:	6822      	ldr	r2, [r4, #0]
 8020b58:	7c51      	ldrb	r1, [r2, #17]
 8020b5a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8020b5e:	b138      	cbz	r0, 8020b70 <LCD_SelectLCD+0x20>
 8020b60:	68c3      	ldr	r3, [r0, #12]
 8020b62:	b113      	cbz	r3, 8020b6a <LCD_SelectLCD+0x1a>
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	2b04      	cmp	r3, #4
 8020b68:	d00c      	beq.n	8020b84 <LCD_SelectLCD+0x34>
 8020b6a:	6800      	ldr	r0, [r0, #0]
 8020b6c:	2800      	cmp	r0, #0
 8020b6e:	d1f7      	bne.n	8020b60 <LCD_SelectLCD+0x10>
 8020b70:	4613      	mov	r3, r2
 8020b72:	2100      	movs	r1, #0
 8020b74:	f103 0208 	add.w	r2, r3, #8
 8020b78:	6619      	str	r1, [r3, #96]	; 0x60
 8020b7a:	615a      	str	r2, [r3, #20]
 8020b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b80:	f7f9 ba7e 	b.w	801a080 <LCD_SetClipRectMax>
 8020b84:	f7fb f94a 	bl	801be1c <GUI_DEVICE_Unlink>
 8020b88:	6823      	ldr	r3, [r4, #0]
 8020b8a:	e7f2      	b.n	8020b72 <LCD_SelectLCD+0x22>
 8020b8c:	2000027c 	.word	0x2000027c
 8020b90:	2002cbcc 	.word	0x2002cbcc

08020b94 <LCD_ReadRectEx>:
 8020b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b98:	b087      	sub	sp, #28
 8020b9a:	4681      	mov	r9, r0
 8020b9c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020b9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ba0:	68ed      	ldr	r5, [r5, #12]
 8020ba2:	9303      	str	r3, [sp, #12]
 8020ba4:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
 8020ba8:	696f      	ldr	r7, [r5, #20]
 8020baa:	4616      	mov	r6, r2
 8020bac:	460d      	mov	r5, r1
 8020bae:	f1bc 0f00 	cmp.w	ip, #0
 8020bb2:	d00f      	beq.n	8020bd4 <LCD_ReadRectEx+0x40>
 8020bb4:	a811      	add	r0, sp, #68	; 0x44
 8020bb6:	2101      	movs	r1, #1
 8020bb8:	47e0      	blx	ip
 8020bba:	4684      	mov	ip, r0
 8020bbc:	b150      	cbz	r0, 8020bd4 <LCD_ReadRectEx+0x40>
 8020bbe:	9b03      	ldr	r3, [sp, #12]
 8020bc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020bc2:	e88d 0018 	stmia.w	sp, {r3, r4}
 8020bc6:	4649      	mov	r1, r9
 8020bc8:	462a      	mov	r2, r5
 8020bca:	4633      	mov	r3, r6
 8020bcc:	47e0      	blx	ip
 8020bce:	b007      	add	sp, #28
 8020bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bd4:	4b65      	ldr	r3, [pc, #404]	; (8020d6c <LCD_ReadRectEx+0x1d8>)
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	7c58      	ldrb	r0, [r3, #17]
 8020bda:	f7f8 fdd5 	bl	8019788 <GUI_GetBitsPerPixelEx>
 8020bde:	2808      	cmp	r0, #8
 8020be0:	9005      	str	r0, [sp, #20]
 8020be2:	dc28      	bgt.n	8020c36 <LCD_ReadRectEx+0xa2>
 8020be4:	f04f 0a01 	mov.w	sl, #1
 8020be8:	9b03      	ldr	r3, [sp, #12]
 8020bea:	429d      	cmp	r5, r3
 8020bec:	dcef      	bgt.n	8020bce <LCD_ReadRectEx+0x3a>
 8020bee:	f04f 0800 	mov.w	r8, #0
 8020bf2:	f8cd 9010 	str.w	r9, [sp, #16]
 8020bf6:	e00a      	b.n	8020c0e <LCD_ReadRectEx+0x7a>
 8020bf8:	f1ba 0f04 	cmp.w	sl, #4
 8020bfc:	f000 80a3 	beq.w	8020d46 <LCD_ReadRectEx+0x1b2>
 8020c00:	f1ba 0f01 	cmp.w	sl, #1
 8020c04:	d01f      	beq.n	8020c46 <LCD_ReadRectEx+0xb2>
 8020c06:	9b03      	ldr	r3, [sp, #12]
 8020c08:	3501      	adds	r5, #1
 8020c0a:	42ab      	cmp	r3, r5
 8020c0c:	dbdf      	blt.n	8020bce <LCD_ReadRectEx+0x3a>
 8020c0e:	f1ba 0f02 	cmp.w	sl, #2
 8020c12:	d1f1      	bne.n	8020bf8 <LCD_ReadRectEx+0x64>
 8020c14:	9b04      	ldr	r3, [sp, #16]
 8020c16:	42b3      	cmp	r3, r6
 8020c18:	dcf5      	bgt.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c1a:	469b      	mov	fp, r3
 8020c1c:	46a1      	mov	r9, r4
 8020c1e:	4659      	mov	r1, fp
 8020c20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c22:	462a      	mov	r2, r5
 8020c24:	47b8      	blx	r7
 8020c26:	f10b 0b01 	add.w	fp, fp, #1
 8020c2a:	f829 0b02 	strh.w	r0, [r9], #2
 8020c2e:	455e      	cmp	r6, fp
 8020c30:	464c      	mov	r4, r9
 8020c32:	daf4      	bge.n	8020c1e <LCD_ReadRectEx+0x8a>
 8020c34:	e7e7      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c36:	9b05      	ldr	r3, [sp, #20]
 8020c38:	2b10      	cmp	r3, #16
 8020c3a:	bfcc      	ite	gt
 8020c3c:	f04f 0a04 	movgt.w	sl, #4
 8020c40:	f04f 0a02 	movle.w	sl, #2
 8020c44:	e7d0      	b.n	8020be8 <LCD_ReadRectEx+0x54>
 8020c46:	f8dd c014 	ldr.w	ip, [sp, #20]
 8020c4a:	f10c 33ff 	add.w	r3, ip, #4294967295
 8020c4e:	2b07      	cmp	r3, #7
 8020c50:	d8d9      	bhi.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c52:	e8df f003 	tbb	[pc, r3]
 8020c56:	3356      	.short	0x3356
 8020c58:	04041515 	.word	0x04041515
 8020c5c:	0404      	.short	0x0404
 8020c5e:	9b04      	ldr	r3, [sp, #16]
 8020c60:	42b3      	cmp	r3, r6
 8020c62:	dcd0      	bgt.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c64:	469b      	mov	fp, r3
 8020c66:	46a1      	mov	r9, r4
 8020c68:	4659      	mov	r1, fp
 8020c6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c6c:	462a      	mov	r2, r5
 8020c6e:	47b8      	blx	r7
 8020c70:	f10b 0b01 	add.w	fp, fp, #1
 8020c74:	f809 0b01 	strb.w	r0, [r9], #1
 8020c78:	455e      	cmp	r6, fp
 8020c7a:	464c      	mov	r4, r9
 8020c7c:	daf4      	bge.n	8020c68 <LCD_ReadRectEx+0xd4>
 8020c7e:	e7c2      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c80:	f8dd c010 	ldr.w	ip, [sp, #16]
 8020c84:	45b4      	cmp	ip, r6
 8020c86:	dcbe      	bgt.n	8020c06 <LCD_ReadRectEx+0x72>
 8020c88:	46e1      	mov	r9, ip
 8020c8a:	f04f 0b0f 	mov.w	fp, #15
 8020c8e:	4649      	mov	r1, r9
 8020c90:	462a      	mov	r2, r5
 8020c92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c94:	47b8      	blx	r7
 8020c96:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8020c9a:	7822      	ldrb	r2, [r4, #0]
 8020c9c:	f1c3 0104 	rsb	r1, r3, #4
 8020ca0:	fa0b f303 	lsl.w	r3, fp, r3
 8020ca4:	4088      	lsls	r0, r1
 8020ca6:	4013      	ands	r3, r2
 8020ca8:	f109 0901 	add.w	r9, r9, #1
 8020cac:	4303      	orrs	r3, r0
 8020cae:	454e      	cmp	r6, r9
 8020cb0:	7023      	strb	r3, [r4, #0]
 8020cb2:	4444      	add	r4, r8
 8020cb4:	f088 0801 	eor.w	r8, r8, #1
 8020cb8:	dae9      	bge.n	8020c8e <LCD_ReadRectEx+0xfa>
 8020cba:	e7a4      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020cbc:	9b04      	ldr	r3, [sp, #16]
 8020cbe:	42b3      	cmp	r3, r6
 8020cc0:	dca1      	bgt.n	8020c06 <LCD_ReadRectEx+0x72>
 8020cc2:	469b      	mov	fp, r3
 8020cc4:	f64f 793f 	movw	r9, #65343	; 0xff3f
 8020cc8:	4659      	mov	r1, fp
 8020cca:	462a      	mov	r2, r5
 8020ccc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020cce:	47b8      	blx	r7
 8020cd0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020cd4:	7822      	ldrb	r2, [r4, #0]
 8020cd6:	f1c3 0106 	rsb	r1, r3, #6
 8020cda:	fa49 fc03 	asr.w	ip, r9, r3
 8020cde:	4088      	lsls	r0, r1
 8020ce0:	f108 0301 	add.w	r3, r8, #1
 8020ce4:	ea0c 0202 	and.w	r2, ip, r2
 8020ce8:	f10b 0b01 	add.w	fp, fp, #1
 8020cec:	4302      	orrs	r2, r0
 8020cee:	f023 0803 	bic.w	r8, r3, #3
 8020cf2:	455e      	cmp	r6, fp
 8020cf4:	7022      	strb	r2, [r4, #0]
 8020cf6:	fa43 f808 	asr.w	r8, r3, r8
 8020cfa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8020cfe:	dae3      	bge.n	8020cc8 <LCD_ReadRectEx+0x134>
 8020d00:	e781      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020d02:	f8dd c010 	ldr.w	ip, [sp, #16]
 8020d06:	45b4      	cmp	ip, r6
 8020d08:	f73f af7d 	bgt.w	8020c06 <LCD_ReadRectEx+0x72>
 8020d0c:	46e3      	mov	fp, ip
 8020d0e:	4659      	mov	r1, fp
 8020d10:	462a      	mov	r2, r5
 8020d12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020d14:	47b8      	blx	r7
 8020d16:	7823      	ldrb	r3, [r4, #0]
 8020d18:	f64f 7c7f 	movw	ip, #65407	; 0xff7f
 8020d1c:	f1c8 0107 	rsb	r1, r8, #7
 8020d20:	fa4c f208 	asr.w	r2, ip, r8
 8020d24:	401a      	ands	r2, r3
 8020d26:	4088      	lsls	r0, r1
 8020d28:	f108 0301 	add.w	r3, r8, #1
 8020d2c:	f10b 0b01 	add.w	fp, fp, #1
 8020d30:	4302      	orrs	r2, r0
 8020d32:	f023 0807 	bic.w	r8, r3, #7
 8020d36:	455e      	cmp	r6, fp
 8020d38:	7022      	strb	r2, [r4, #0]
 8020d3a:	fa43 f808 	asr.w	r8, r3, r8
 8020d3e:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8020d42:	dae4      	bge.n	8020d0e <LCD_ReadRectEx+0x17a>
 8020d44:	e75f      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020d46:	f8dd c010 	ldr.w	ip, [sp, #16]
 8020d4a:	45b4      	cmp	ip, r6
 8020d4c:	f73f af5b 	bgt.w	8020c06 <LCD_ReadRectEx+0x72>
 8020d50:	46e3      	mov	fp, ip
 8020d52:	46a1      	mov	r9, r4
 8020d54:	4659      	mov	r1, fp
 8020d56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020d58:	462a      	mov	r2, r5
 8020d5a:	47b8      	blx	r7
 8020d5c:	f10b 0b01 	add.w	fp, fp, #1
 8020d60:	f849 0b04 	str.w	r0, [r9], #4
 8020d64:	455e      	cmp	r6, fp
 8020d66:	464c      	mov	r4, r9
 8020d68:	daf4      	bge.n	8020d54 <LCD_ReadRectEx+0x1c0>
 8020d6a:	e74c      	b.n	8020c06 <LCD_ReadRectEx+0x72>
 8020d6c:	2000027c 	.word	0x2000027c

08020d70 <GUI_ReadRectEx>:
 8020d70:	b4f0      	push	{r4, r5, r6, r7}
 8020d72:	4c15      	ldr	r4, [pc, #84]	; (8020dc8 <GUI_ReadRectEx+0x58>)
 8020d74:	9f04      	ldr	r7, [sp, #16]
 8020d76:	6825      	ldr	r5, [r4, #0]
 8020d78:	9c05      	ldr	r4, [sp, #20]
 8020d7a:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
 8020d7e:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8020d82:	4560      	cmp	r0, ip
 8020d84:	bfb8      	it	lt
 8020d86:	4660      	movlt	r0, ip
 8020d88:	42b2      	cmp	r2, r6
 8020d8a:	bfa8      	it	ge
 8020d8c:	4632      	movge	r2, r6
 8020d8e:	4290      	cmp	r0, r2
 8020d90:	dc0b      	bgt.n	8020daa <GUI_ReadRectEx+0x3a>
 8020d92:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 8020d96:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8020d9a:	42b1      	cmp	r1, r6
 8020d9c:	bfb8      	it	lt
 8020d9e:	4631      	movlt	r1, r6
 8020da0:	42ab      	cmp	r3, r5
 8020da2:	bfa8      	it	ge
 8020da4:	462b      	movge	r3, r5
 8020da6:	428b      	cmp	r3, r1
 8020da8:	da04      	bge.n	8020db4 <GUI_ReadRectEx+0x44>
 8020daa:	bcf0      	pop	{r4, r5, r6, r7}
 8020dac:	4770      	bx	lr
 8020dae:	6825      	ldr	r5, [r4, #0]
 8020db0:	b12d      	cbz	r5, 8020dbe <GUI_ReadRectEx+0x4e>
 8020db2:	462c      	mov	r4, r5
 8020db4:	68e5      	ldr	r5, [r4, #12]
 8020db6:	682d      	ldr	r5, [r5, #0]
 8020db8:	f035 0604 	bics.w	r6, r5, #4
 8020dbc:	d1f7      	bne.n	8020dae <GUI_ReadRectEx+0x3e>
 8020dbe:	9704      	str	r7, [sp, #16]
 8020dc0:	9405      	str	r4, [sp, #20]
 8020dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8020dc4:	f7ff bee6 	b.w	8020b94 <LCD_ReadRectEx>
 8020dc8:	2000027c 	.word	0x2000027c

08020dcc <LCD_GetPixelIndex>:
 8020dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dd0:	4e15      	ldr	r6, [pc, #84]	; (8020e28 <LCD_GetPixelIndex+0x5c>)
 8020dd2:	4d16      	ldr	r5, [pc, #88]	; (8020e2c <LCD_GetPixelIndex+0x60>)
 8020dd4:	6833      	ldr	r3, [r6, #0]
 8020dd6:	7c5b      	ldrb	r3, [r3, #17]
 8020dd8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ddc:	68df      	ldr	r7, [r3, #12]
 8020dde:	b082      	sub	sp, #8
 8020de0:	4604      	mov	r4, r0
 8020de2:	4688      	mov	r8, r1
 8020de4:	4618      	mov	r0, r3
 8020de6:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 8020de8:	4669      	mov	r1, sp
 8020dea:	47b8      	blx	r7
 8020dec:	f9bd 3000 	ldrsh.w	r3, [sp]
 8020df0:	42a3      	cmp	r3, r4
 8020df2:	dc0b      	bgt.n	8020e0c <LCD_GetPixelIndex+0x40>
 8020df4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020df8:	429c      	cmp	r4, r3
 8020dfa:	dc07      	bgt.n	8020e0c <LCD_GetPixelIndex+0x40>
 8020dfc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8020e00:	4543      	cmp	r3, r8
 8020e02:	dc03      	bgt.n	8020e0c <LCD_GetPixelIndex+0x40>
 8020e04:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8020e08:	4598      	cmp	r8, r3
 8020e0a:	dd03      	ble.n	8020e14 <LCD_GetPixelIndex+0x48>
 8020e0c:	2000      	movs	r0, #0
 8020e0e:	b002      	add	sp, #8
 8020e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e14:	6833      	ldr	r3, [r6, #0]
 8020e16:	7c5b      	ldrb	r3, [r3, #17]
 8020e18:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8020e1c:	68c3      	ldr	r3, [r0, #12]
 8020e1e:	4621      	mov	r1, r4
 8020e20:	4642      	mov	r2, r8
 8020e22:	695b      	ldr	r3, [r3, #20]
 8020e24:	4798      	blx	r3
 8020e26:	e7f2      	b.n	8020e0e <LCD_GetPixelIndex+0x42>
 8020e28:	2000027c 	.word	0x2000027c
 8020e2c:	2002cbcc 	.word	0x2002cbcc

08020e30 <LCD_GetBkColorIndex>:
 8020e30:	4b02      	ldr	r3, [pc, #8]	; (8020e3c <LCD_GetBkColorIndex+0xc>)
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e36:	6818      	ldr	r0, [r3, #0]
 8020e38:	4770      	bx	lr
 8020e3a:	bf00      	nop
 8020e3c:	2000027c 	.word	0x2000027c

08020e40 <LCD_GetColorIndex>:
 8020e40:	4b02      	ldr	r3, [pc, #8]	; (8020e4c <LCD_GetColorIndex+0xc>)
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020e46:	6818      	ldr	r0, [r3, #0]
 8020e48:	4770      	bx	lr
 8020e4a:	bf00      	nop
 8020e4c:	2000027c 	.word	0x2000027c

08020e50 <_OnExit>:
 8020e50:	b510      	push	{r4, lr}
 8020e52:	4c04      	ldr	r4, [pc, #16]	; (8020e64 <_OnExit+0x14>)
 8020e54:	6820      	ldr	r0, [r4, #0]
 8020e56:	f7fc fca7 	bl	801d7a8 <GUI_ALLOC_FreeFixedBlock>
 8020e5a:	4a03      	ldr	r2, [pc, #12]	; (8020e68 <_OnExit+0x18>)
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	6023      	str	r3, [r4, #0]
 8020e60:	6013      	str	r3, [r2, #0]
 8020e62:	bd10      	pop	{r4, pc}
 8020e64:	2002cccc 	.word	0x2002cccc
 8020e68:	2002b30c 	.word	0x2002b30c

08020e6c <LCD_InitColors>:
 8020e6c:	b538      	push	{r3, r4, r5, lr}
 8020e6e:	4c0a      	ldr	r4, [pc, #40]	; (8020e98 <LCD_InitColors+0x2c>)
 8020e70:	6825      	ldr	r5, [r4, #0]
 8020e72:	b10d      	cbz	r5, 8020e78 <LCD_InitColors+0xc>
 8020e74:	2000      	movs	r0, #0
 8020e76:	bd38      	pop	{r3, r4, r5, pc}
 8020e78:	4b08      	ldr	r3, [pc, #32]	; (8020e9c <LCD_InitColors+0x30>)
 8020e7a:	6818      	ldr	r0, [r3, #0]
 8020e7c:	0080      	lsls	r0, r0, #2
 8020e7e:	f7fc fc9d 	bl	801d7bc <GUI_ALLOC_GetFixedBlock>
 8020e82:	6020      	str	r0, [r4, #0]
 8020e84:	b130      	cbz	r0, 8020e94 <LCD_InitColors+0x28>
 8020e86:	4806      	ldr	r0, [pc, #24]	; (8020ea0 <LCD_InitColors+0x34>)
 8020e88:	4b06      	ldr	r3, [pc, #24]	; (8020ea4 <LCD_InitColors+0x38>)
 8020e8a:	6003      	str	r3, [r0, #0]
 8020e8c:	f7fb f9cc 	bl	801c228 <GUI__RegisterExit>
 8020e90:	4628      	mov	r0, r5
 8020e92:	bd38      	pop	{r3, r4, r5, pc}
 8020e94:	2001      	movs	r0, #1
 8020e96:	bd38      	pop	{r3, r4, r5, pc}
 8020e98:	2002cccc 	.word	0x2002cccc
 8020e9c:	200003e8 	.word	0x200003e8
 8020ea0:	2002b304 	.word	0x2002b304
 8020ea4:	08020e51 	.word	0x08020e51

08020ea8 <LCD_GetpPalConvTableBM>:
 8020ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020eac:	4681      	mov	r9, r0
 8020eae:	b348      	cbz	r0, 8020f04 <LCD_GetpPalConvTableBM+0x5c>
 8020eb0:	6885      	ldr	r5, [r0, #8]
 8020eb2:	b365      	cbz	r5, 8020f0e <LCD_GetpPalConvTableBM+0x66>
 8020eb4:	4f17      	ldr	r7, [pc, #92]	; (8020f14 <LCD_GetpPalConvTableBM+0x6c>)
 8020eb6:	683e      	ldr	r6, [r7, #0]
 8020eb8:	b336      	cbz	r6, 8020f08 <LCD_GetpPalConvTableBM+0x60>
 8020eba:	6803      	ldr	r3, [r0, #0]
 8020ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020ec0:	dc1d      	bgt.n	8020efe <LCD_GetpPalConvTableBM+0x56>
 8020ec2:	4a15      	ldr	r2, [pc, #84]	; (8020f18 <LCD_GetpPalConvTableBM+0x70>)
 8020ec4:	6812      	ldr	r2, [r2, #0]
 8020ec6:	429a      	cmp	r2, r3
 8020ec8:	bfb4      	ite	lt
 8020eca:	4690      	movlt	r8, r2
 8020ecc:	4698      	movge	r8, r3
 8020ece:	f1b8 0f00 	cmp.w	r8, #0
 8020ed2:	dd0c      	ble.n	8020eee <LCD_GetpPalConvTableBM+0x46>
 8020ed4:	3d04      	subs	r5, #4
 8020ed6:	2400      	movs	r4, #0
 8020ed8:	e000      	b.n	8020edc <LCD_GetpPalConvTableBM+0x34>
 8020eda:	683e      	ldr	r6, [r7, #0]
 8020edc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8020ee0:	f7f9 f964 	bl	801a1ac <LCD_Color2Index>
 8020ee4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8020ee8:	3401      	adds	r4, #1
 8020eea:	4544      	cmp	r4, r8
 8020eec:	d1f5      	bne.n	8020eda <LCD_GetpPalConvTableBM+0x32>
 8020eee:	4b0b      	ldr	r3, [pc, #44]	; (8020f1c <LCD_GetpPalConvTableBM+0x74>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	b10b      	cbz	r3, 8020ef8 <LCD_GetpPalConvTableBM+0x50>
 8020ef4:	4648      	mov	r0, r9
 8020ef6:	4798      	blx	r3
 8020ef8:	6838      	ldr	r0, [r7, #0]
 8020efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020efe:	2000      	movs	r0, #0
 8020f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f08:	4630      	mov	r0, r6
 8020f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f0e:	4628      	mov	r0, r5
 8020f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f14:	2002cccc 	.word	0x2002cccc
 8020f18:	200003e8 	.word	0x200003e8
 8020f1c:	2002b30c 	.word	0x2002b30c

08020f20 <LCD_InitLUT>:
 8020f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f24:	f001 fc8c 	bl	8022840 <LCD_GetNumLayers>
 8020f28:	f1b0 0900 	subs.w	r9, r0, #0
 8020f2c:	dd2f      	ble.n	8020f8e <LCD_InitLUT+0x6e>
 8020f2e:	4f19      	ldr	r7, [pc, #100]	; (8020f94 <LCD_InitLUT+0x74>)
 8020f30:	f8df b068 	ldr.w	fp, [pc, #104]	; 8020f9c <LCD_InitLUT+0x7c>
 8020f34:	2500      	movs	r5, #0
 8020f36:	4628      	mov	r0, r5
 8020f38:	f7fa ff2e 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8020f3c:	b320      	cbz	r0, 8020f88 <LCD_InitLUT+0x68>
 8020f3e:	683b      	ldr	r3, [r7, #0]
 8020f40:	4628      	mov	r0, r5
 8020f42:	f893 8011 	ldrb.w	r8, [r3, #17]
 8020f46:	745d      	strb	r5, [r3, #17]
 8020f48:	f7f8 fb9c 	bl	8019684 <LCD_GetBitsPerPixelEx>
 8020f4c:	2808      	cmp	r0, #8
 8020f4e:	dc18      	bgt.n	8020f82 <LCD_InitLUT+0x62>
 8020f50:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8020f54:	4a10      	ldr	r2, [pc, #64]	; (8020f98 <LCD_InitLUT+0x78>)
 8020f56:	691b      	ldr	r3, [r3, #16]
 8020f58:	4293      	cmp	r3, r2
 8020f5a:	d012      	beq.n	8020f82 <LCD_InitLUT+0x62>
 8020f5c:	4628      	mov	r0, r5
 8020f5e:	f7f8 fb9f 	bl	80196a0 <LCD_GetNumColorsEx>
 8020f62:	1e06      	subs	r6, r0, #0
 8020f64:	dd0d      	ble.n	8020f82 <LCD_InitLUT+0x62>
 8020f66:	2400      	movs	r4, #0
 8020f68:	fa5f fa84 	uxtb.w	sl, r4
 8020f6c:	4650      	mov	r0, sl
 8020f6e:	f7f9 f92d 	bl	801a1cc <LCD_Index2Color>
 8020f72:	3401      	adds	r4, #1
 8020f74:	4602      	mov	r2, r0
 8020f76:	4651      	mov	r1, sl
 8020f78:	4628      	mov	r0, r5
 8020f7a:	f7f8 fafd 	bl	8019578 <LCD_SetLUTEntryEx>
 8020f7e:	42a6      	cmp	r6, r4
 8020f80:	d1f2      	bne.n	8020f68 <LCD_InitLUT+0x48>
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	f883 8011 	strb.w	r8, [r3, #17]
 8020f88:	3501      	adds	r5, #1
 8020f8a:	454d      	cmp	r5, r9
 8020f8c:	d1d3      	bne.n	8020f36 <LCD_InitLUT+0x16>
 8020f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f92:	bf00      	nop
 8020f94:	2000027c 	.word	0x2000027c
 8020f98:	0802aac0 	.word	0x0802aac0
 8020f9c:	2002cbcc 	.word	0x2002cbcc

08020fa0 <LCD_AA_SetOrMask>:
 8020fa0:	4b02      	ldr	r3, [pc, #8]	; (8020fac <LCD_AA_SetOrMask+0xc>)
 8020fa2:	681a      	ldr	r2, [r3, #0]
 8020fa4:	6018      	str	r0, [r3, #0]
 8020fa6:	4610      	mov	r0, r2
 8020fa8:	4770      	bx	lr
 8020faa:	bf00      	nop
 8020fac:	200003ec 	.word	0x200003ec

08020fb0 <_GetWordWrap>:
 8020fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb4:	b083      	sub	sp, #12
 8020fb6:	ad02      	add	r5, sp, #8
 8020fb8:	460f      	mov	r7, r1
 8020fba:	f845 0d04 	str.w	r0, [r5, #-4]!
 8020fbe:	4628      	mov	r0, r5
 8020fc0:	9200      	str	r2, [sp, #0]
 8020fc2:	f7f9 fef3 	bl	801adac <GUI_UC__GetCharCodeInc>
 8020fc6:	f04f 0a00 	mov.w	sl, #0
 8020fca:	4604      	mov	r4, r0
 8020fcc:	4681      	mov	r9, r0
 8020fce:	4656      	mov	r6, sl
 8020fd0:	46d3      	mov	fp, sl
 8020fd2:	46d0      	mov	r8, sl
 8020fd4:	2c00      	cmp	r4, #0
 8020fd6:	d03b      	beq.n	8021050 <_GetWordWrap+0xa0>
 8020fd8:	2c0a      	cmp	r4, #10
 8020fda:	d039      	beq.n	8021050 <_GetWordWrap+0xa0>
 8020fdc:	2c20      	cmp	r4, #32
 8020fde:	d03c      	beq.n	802105a <_GetWordWrap+0xaa>
 8020fe0:	f1b9 0f20 	cmp.w	r9, #32
 8020fe4:	d03b      	beq.n	802105e <_GetWordWrap+0xae>
 8020fe6:	4920      	ldr	r1, [pc, #128]	; (8021068 <_GetWordWrap+0xb8>)
 8020fe8:	680a      	ldr	r2, [r1, #0]
 8020fea:	4920      	ldr	r1, [pc, #128]	; (802106c <_GetWordWrap+0xbc>)
 8020fec:	2a00      	cmp	r2, #0
 8020fee:	680b      	ldr	r3, [r1, #0]
 8020ff0:	dd0c      	ble.n	802100c <_GetWordWrap+0x5c>
 8020ff2:	8818      	ldrh	r0, [r3, #0]
 8020ff4:	42a0      	cmp	r0, r4
 8020ff6:	d02d      	beq.n	8021054 <_GetWordWrap+0xa4>
 8020ff8:	1e98      	subs	r0, r3, #2
 8020ffa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ffe:	e003      	b.n	8021008 <_GetWordWrap+0x58>
 8021000:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8021004:	42a2      	cmp	r2, r4
 8021006:	d025      	beq.n	8021054 <_GetWordWrap+0xa4>
 8021008:	4283      	cmp	r3, r0
 802100a:	d1f9      	bne.n	8021000 <_GetWordWrap+0x50>
 802100c:	4620      	mov	r0, r4
 802100e:	f7fb fec7 	bl	801cda0 <GUI_GetCharDistX>
 8021012:	4480      	add	r8, r0
 8021014:	45b8      	cmp	r8, r7
 8021016:	4682      	mov	sl, r0
 8021018:	dd0e      	ble.n	8021038 <_GetWordWrap+0x88>
 802101a:	f1bb 0f00 	cmp.w	fp, #0
 802101e:	d00b      	beq.n	8021038 <_GetWordWrap+0x88>
 8021020:	9a00      	ldr	r2, [sp, #0]
 8021022:	2e00      	cmp	r6, #0
 8021024:	bf18      	it	ne
 8021026:	46b3      	movne	fp, r6
 8021028:	b112      	cbz	r2, 8021030 <_GetWordWrap+0x80>
 802102a:	ebca 0308 	rsb	r3, sl, r8
 802102e:	6013      	str	r3, [r2, #0]
 8021030:	4658      	mov	r0, fp
 8021032:	b003      	add	sp, #12
 8021034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021038:	4628      	mov	r0, r5
 802103a:	f7f9 feb7 	bl	801adac <GUI_UC__GetCharCodeInc>
 802103e:	4604      	mov	r4, r0
 8021040:	f10b 0b01 	add.w	fp, fp, #1
 8021044:	f1b9 0f00 	cmp.w	r9, #0
 8021048:	bf08      	it	eq
 802104a:	4681      	moveq	r9, r0
 802104c:	2c00      	cmp	r4, #0
 802104e:	d1c3      	bne.n	8020fd8 <_GetWordWrap+0x28>
 8021050:	465e      	mov	r6, fp
 8021052:	e7e5      	b.n	8021020 <_GetWordWrap+0x70>
 8021054:	f10b 0601 	add.w	r6, fp, #1
 8021058:	e7d8      	b.n	802100c <_GetWordWrap+0x5c>
 802105a:	465e      	mov	r6, fp
 802105c:	e7d6      	b.n	802100c <_GetWordWrap+0x5c>
 802105e:	465e      	mov	r6, fp
 8021060:	f04f 0900 	mov.w	r9, #0
 8021064:	e7d2      	b.n	802100c <_GetWordWrap+0x5c>
 8021066:	bf00      	nop
 8021068:	2002b314 	.word	0x2002b314
 802106c:	2002b310 	.word	0x2002b310

08021070 <_GetCharWrap>:
 8021070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021074:	b082      	sub	sp, #8
 8021076:	af02      	add	r7, sp, #8
 8021078:	2400      	movs	r4, #0
 802107a:	4688      	mov	r8, r1
 802107c:	f847 0d04 	str.w	r0, [r7, #-4]!
 8021080:	4625      	mov	r5, r4
 8021082:	e008      	b.n	8021096 <_GetCharWrap+0x26>
 8021084:	f7fb fe8c 	bl	801cda0 <GUI_GetCharDistX>
 8021088:	4405      	add	r5, r0
 802108a:	b10c      	cbz	r4, 8021090 <_GetCharWrap+0x20>
 802108c:	4545      	cmp	r5, r8
 802108e:	dc08      	bgt.n	80210a2 <_GetCharWrap+0x32>
 8021090:	2e0a      	cmp	r6, #10
 8021092:	d006      	beq.n	80210a2 <_GetCharWrap+0x32>
 8021094:	3401      	adds	r4, #1
 8021096:	4638      	mov	r0, r7
 8021098:	f7f9 fe88 	bl	801adac <GUI_UC__GetCharCodeInc>
 802109c:	4606      	mov	r6, r0
 802109e:	2800      	cmp	r0, #0
 80210a0:	d1f0      	bne.n	8021084 <_GetCharWrap+0x14>
 80210a2:	4620      	mov	r0, r4
 80210a4:	b002      	add	sp, #8
 80210a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210aa:	bf00      	nop

080210ac <GUI__WrapGetNumCharsDisp>:
 80210ac:	2a01      	cmp	r2, #1
 80210ae:	b508      	push	{r3, lr}
 80210b0:	d00b      	beq.n	80210ca <GUI__WrapGetNumCharsDisp+0x1e>
 80210b2:	2a02      	cmp	r2, #2
 80210b4:	d103      	bne.n	80210be <GUI__WrapGetNumCharsDisp+0x12>
 80210b6:	4b07      	ldr	r3, [pc, #28]	; (80210d4 <GUI__WrapGetNumCharsDisp+0x28>)
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	4798      	blx	r3
 80210bc:	bd08      	pop	{r3, pc}
 80210be:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80210c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80210c6:	f7fb bd77 	b.w	801cbb8 <GUI__GetLineNumChars>
 80210ca:	4b03      	ldr	r3, [pc, #12]	; (80210d8 <GUI__WrapGetNumCharsDisp+0x2c>)
 80210cc:	2200      	movs	r2, #0
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	4798      	blx	r3
 80210d2:	bd08      	pop	{r3, pc}
 80210d4:	200003f0 	.word	0x200003f0
 80210d8:	200003f4 	.word	0x200003f4

080210dc <GUI__WrapGetNumBytesToNextLine>:
 80210dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210e0:	b083      	sub	sp, #12
 80210e2:	2a01      	cmp	r2, #1
 80210e4:	4615      	mov	r5, r2
 80210e6:	4607      	mov	r7, r0
 80210e8:	9000      	str	r0, [sp, #0]
 80210ea:	4688      	mov	r8, r1
 80210ec:	d032      	beq.n	8021154 <GUI__WrapGetNumBytesToNextLine+0x78>
 80210ee:	2a02      	cmp	r2, #2
 80210f0:	d01c      	beq.n	802112c <GUI__WrapGetNumBytesToNextLine+0x50>
 80210f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80210f6:	f7fb fd5f 	bl	801cbb8 <GUI__GetLineNumChars>
 80210fa:	f8dd 9000 	ldr.w	r9, [sp]
 80210fe:	4601      	mov	r1, r0
 8021100:	4604      	mov	r4, r0
 8021102:	4648      	mov	r0, r9
 8021104:	f7f9 fe66 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8021108:	ae02      	add	r6, sp, #8
 802110a:	4448      	add	r0, r9
 802110c:	f846 0d08 	str.w	r0, [r6, #-8]!
 8021110:	4668      	mov	r0, sp
 8021112:	f7f9 fe4b 	bl	801adac <GUI_UC__GetCharCodeInc>
 8021116:	280a      	cmp	r0, #10
 8021118:	d01a      	beq.n	8021150 <GUI__WrapGetNumBytesToNextLine+0x74>
 802111a:	2d01      	cmp	r5, #1
 802111c:	d02d      	beq.n	802117a <GUI__WrapGetNumBytesToNextLine+0x9e>
 802111e:	4638      	mov	r0, r7
 8021120:	4621      	mov	r1, r4
 8021122:	f7f9 fe57 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8021126:	b003      	add	sp, #12
 8021128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802112c:	4b1c      	ldr	r3, [pc, #112]	; (80211a0 <GUI__WrapGetNumBytesToNextLine+0xc4>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	4798      	blx	r3
 8021132:	9d00      	ldr	r5, [sp, #0]
 8021134:	4601      	mov	r1, r0
 8021136:	4604      	mov	r4, r0
 8021138:	4628      	mov	r0, r5
 802113a:	f7f9 fe4b 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 802113e:	ab02      	add	r3, sp, #8
 8021140:	4428      	add	r0, r5
 8021142:	f843 0d08 	str.w	r0, [r3, #-8]!
 8021146:	4668      	mov	r0, sp
 8021148:	f7f9 fe30 	bl	801adac <GUI_UC__GetCharCodeInc>
 802114c:	280a      	cmp	r0, #10
 802114e:	d1e6      	bne.n	802111e <GUI__WrapGetNumBytesToNextLine+0x42>
 8021150:	3401      	adds	r4, #1
 8021152:	e7e4      	b.n	802111e <GUI__WrapGetNumBytesToNextLine+0x42>
 8021154:	4b13      	ldr	r3, [pc, #76]	; (80211a4 <GUI__WrapGetNumBytesToNextLine+0xc8>)
 8021156:	aa01      	add	r2, sp, #4
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	4798      	blx	r3
 802115c:	9d00      	ldr	r5, [sp, #0]
 802115e:	4601      	mov	r1, r0
 8021160:	4604      	mov	r4, r0
 8021162:	4628      	mov	r0, r5
 8021164:	f7f9 fe36 	bl	801add4 <GUI_UC__NumChars2NumBytes>
 8021168:	ae02      	add	r6, sp, #8
 802116a:	4428      	add	r0, r5
 802116c:	f846 0d08 	str.w	r0, [r6, #-8]!
 8021170:	4668      	mov	r0, sp
 8021172:	f7f9 fe1b 	bl	801adac <GUI_UC__GetCharCodeInc>
 8021176:	280a      	cmp	r0, #10
 8021178:	d0ea      	beq.n	8021150 <GUI__WrapGetNumBytesToNextLine+0x74>
 802117a:	2820      	cmp	r0, #32
 802117c:	d1cf      	bne.n	802111e <GUI__WrapGetNumBytesToNextLine+0x42>
 802117e:	f7fb fe0f 	bl	801cda0 <GUI_GetCharDistX>
 8021182:	4605      	mov	r5, r0
 8021184:	9b01      	ldr	r3, [sp, #4]
 8021186:	4598      	cmp	r8, r3
 8021188:	4668      	mov	r0, sp
 802118a:	eb05 0203 	add.w	r2, r5, r3
 802118e:	dbc6      	blt.n	802111e <GUI__WrapGetNumBytesToNextLine+0x42>
 8021190:	9201      	str	r2, [sp, #4]
 8021192:	f7f9 fe0b 	bl	801adac <GUI_UC__GetCharCodeInc>
 8021196:	2820      	cmp	r0, #32
 8021198:	f104 0401 	add.w	r4, r4, #1
 802119c:	d0f2      	beq.n	8021184 <GUI__WrapGetNumBytesToNextLine+0xa8>
 802119e:	e7be      	b.n	802111e <GUI__WrapGetNumBytesToNextLine+0x42>
 80211a0:	200003f0 	.word	0x200003f0
 80211a4:	200003f4 	.word	0x200003f4

080211a8 <GUI__ExpandPixelIndicesEx>:
 80211a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211ac:	1e0f      	subs	r7, r1, #0
 80211ae:	4606      	mov	r6, r0
 80211b0:	dd06      	ble.n	80211c0 <GUI__ExpandPixelIndicesEx+0x18>
 80211b2:	2a08      	cmp	r2, #8
 80211b4:	685d      	ldr	r5, [r3, #4]
 80211b6:	dd05      	ble.n	80211c4 <GUI__ExpandPixelIndicesEx+0x1c>
 80211b8:	2a10      	cmp	r2, #16
 80211ba:	dd19      	ble.n	80211f0 <GUI__ExpandPixelIndicesEx+0x48>
 80211bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211c4:	3a01      	subs	r2, #1
 80211c6:	2a07      	cmp	r2, #7
 80211c8:	d8fa      	bhi.n	80211c0 <GUI__ExpandPixelIndicesEx+0x18>
 80211ca:	a301      	add	r3, pc, #4	; (adr r3, 80211d0 <GUI__ExpandPixelIndicesEx+0x28>)
 80211cc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80211d0:	08021239 	.word	0x08021239
 80211d4:	08021291 	.word	0x08021291
 80211d8:	080211c1 	.word	0x080211c1
 80211dc:	080212f1 	.word	0x080212f1
 80211e0:	080211c1 	.word	0x080211c1
 80211e4:	080211c1 	.word	0x080211c1
 80211e8:	080211c1 	.word	0x080211c1
 80211ec:	0802121b 	.word	0x0802121b
 80211f0:	695c      	ldr	r4, [r3, #20]
 80211f2:	b12c      	cbz	r4, 8021200 <GUI__ExpandPixelIndicesEx+0x58>
 80211f4:	4631      	mov	r1, r6
 80211f6:	463a      	mov	r2, r7
 80211f8:	2302      	movs	r3, #2
 80211fa:	47a0      	blx	r4
 80211fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021200:	007f      	lsls	r7, r7, #1
 8021202:	19f4      	adds	r4, r6, r7
 8021204:	19e6      	adds	r6, r4, r7
 8021206:	1be7      	subs	r7, r4, r7
 8021208:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 802120c:	47a8      	blx	r5
 802120e:	42bc      	cmp	r4, r7
 8021210:	f846 0d04 	str.w	r0, [r6, #-4]!
 8021214:	d1f8      	bne.n	8021208 <GUI__ExpandPixelIndicesEx+0x60>
 8021216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802121a:	eb06 0807 	add.w	r8, r6, r7
 802121e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8021222:	ebc7 0708 	rsb	r7, r7, r8
 8021226:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 802122a:	47a8      	blx	r5
 802122c:	45b8      	cmp	r8, r7
 802122e:	f846 0d04 	str.w	r0, [r6, #-4]!
 8021232:	d1f8      	bne.n	8021226 <GUI__ExpandPixelIndicesEx+0x7e>
 8021234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021238:	1e7c      	subs	r4, r7, #1
 802123a:	10e2      	asrs	r2, r4, #3
 802123c:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8021240:	f04f 0880 	mov.w	r8, #128	; 0x80
 8021244:	f004 0707 	and.w	r7, r4, #7
 8021248:	eb06 0a02 	add.w	sl, r6, r2
 802124c:	3b01      	subs	r3, #1
 802124e:	fa48 f807 	asr.w	r8, r8, r7
 8021252:	f816 9002 	ldrb.w	r9, [r6, r2]
 8021256:	f10a 3aff 	add.w	sl, sl, #4294967295
 802125a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 802125e:	fa5f f888 	uxtb.w	r8, r8
 8021262:	ea09 0008 	and.w	r0, r9, r8
 8021266:	f1c7 0307 	rsb	r3, r7, #7
 802126a:	4118      	asrs	r0, r3
 802126c:	47a8      	blx	r5
 802126e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021272:	f846 0904 	str.w	r0, [r6], #-4
 8021276:	2f00      	cmp	r7, #0
 8021278:	d16b      	bne.n	8021352 <GUI__ExpandPixelIndicesEx+0x1aa>
 802127a:	f89a 9000 	ldrb.w	r9, [sl]
 802127e:	f04f 0801 	mov.w	r8, #1
 8021282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021286:	2707      	movs	r7, #7
 8021288:	2c00      	cmp	r4, #0
 802128a:	d099      	beq.n	80211c0 <GUI__ExpandPixelIndicesEx+0x18>
 802128c:	3c01      	subs	r4, #1
 802128e:	e7e8      	b.n	8021262 <GUI__ExpandPixelIndicesEx+0xba>
 8021290:	1e7c      	subs	r4, r7, #1
 8021292:	f004 0903 	and.w	r9, r4, #3
 8021296:	10a2      	asrs	r2, r4, #2
 8021298:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 802129c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80212a0:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 80212a4:	18b7      	adds	r7, r6, r2
 80212a6:	3b01      	subs	r3, #1
 80212a8:	fa48 f800 	asr.w	r8, r8, r0
 80212ac:	f816 a002 	ldrb.w	sl, [r6, r2]
 80212b0:	fa5f f888 	uxtb.w	r8, r8
 80212b4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80212b8:	3f01      	subs	r7, #1
 80212ba:	ea0a 0308 	and.w	r3, sl, r8
 80212be:	f1c0 0006 	rsb	r0, r0, #6
 80212c2:	fa43 f000 	asr.w	r0, r3, r0
 80212c6:	47a8      	blx	r5
 80212c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80212cc:	f846 0904 	str.w	r0, [r6], #-4
 80212d0:	f1b9 0f00 	cmp.w	r9, #0
 80212d4:	d146      	bne.n	8021364 <GUI__ExpandPixelIndicesEx+0x1bc>
 80212d6:	f04f 0803 	mov.w	r8, #3
 80212da:	f897 a000 	ldrb.w	sl, [r7]
 80212de:	46c1      	mov	r9, r8
 80212e0:	3f01      	subs	r7, #1
 80212e2:	2c00      	cmp	r4, #0
 80212e4:	f43f af6c 	beq.w	80211c0 <GUI__ExpandPixelIndicesEx+0x18>
 80212e8:	3c01      	subs	r4, #1
 80212ea:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80212ee:	e7e4      	b.n	80212ba <GUI__ExpandPixelIndicesEx+0x112>
 80212f0:	1e7c      	subs	r4, r7, #1
 80212f2:	f004 0901 	and.w	r9, r4, #1
 80212f6:	1062      	asrs	r2, r4, #1
 80212f8:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80212fc:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8021300:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 8021304:	18b7      	adds	r7, r6, r2
 8021306:	3b01      	subs	r3, #1
 8021308:	fa48 f800 	asr.w	r8, r8, r0
 802130c:	f816 a002 	ldrb.w	sl, [r6, r2]
 8021310:	fa5f f888 	uxtb.w	r8, r8
 8021314:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8021318:	3f01      	subs	r7, #1
 802131a:	ea0a 0308 	and.w	r3, sl, r8
 802131e:	f1c0 0004 	rsb	r0, r0, #4
 8021322:	fa43 f000 	asr.w	r0, r3, r0
 8021326:	47a8      	blx	r5
 8021328:	ea4f 1808 	mov.w	r8, r8, lsl #4
 802132c:	f846 0904 	str.w	r0, [r6], #-4
 8021330:	f1b9 0f00 	cmp.w	r9, #0
 8021334:	d111      	bne.n	802135a <GUI__ExpandPixelIndicesEx+0x1b2>
 8021336:	f897 a000 	ldrb.w	sl, [r7]
 802133a:	f04f 080f 	mov.w	r8, #15
 802133e:	3f01      	subs	r7, #1
 8021340:	f04f 0901 	mov.w	r9, #1
 8021344:	2c00      	cmp	r4, #0
 8021346:	f43f af3b 	beq.w	80211c0 <GUI__ExpandPixelIndicesEx+0x18>
 802134a:	3c01      	subs	r4, #1
 802134c:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8021350:	e7e3      	b.n	802131a <GUI__ExpandPixelIndicesEx+0x172>
 8021352:	3f01      	subs	r7, #1
 8021354:	fa5f f888 	uxtb.w	r8, r8
 8021358:	e796      	b.n	8021288 <GUI__ExpandPixelIndicesEx+0xe0>
 802135a:	fa5f f888 	uxtb.w	r8, r8
 802135e:	f04f 0900 	mov.w	r9, #0
 8021362:	e7ef      	b.n	8021344 <GUI__ExpandPixelIndicesEx+0x19c>
 8021364:	f109 39ff 	add.w	r9, r9, #4294967295
 8021368:	fa5f f888 	uxtb.w	r8, r8
 802136c:	e7b9      	b.n	80212e2 <GUI__ExpandPixelIndicesEx+0x13a>
 802136e:	bf00      	nop

08021370 <GUI__DrawTwinArc4>:
 8021370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021374:	b093      	sub	sp, #76	; 0x4c
 8021376:	4607      	mov	r7, r0
 8021378:	4698      	mov	r8, r3
 802137a:	460c      	mov	r4, r1
 802137c:	4691      	mov	r9, r2
 802137e:	f7f9 ffdd 	bl	801b33c <GUI_Lock>
 8021382:	4ba3      	ldr	r3, [pc, #652]	; (8021610 <GUI__DrawTwinArc4+0x2a0>)
 8021384:	681d      	ldr	r5, [r3, #0]
 8021386:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 8021388:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 802138a:	19f7      	adds	r7, r6, r7
 802138c:	44b1      	add	r9, r6
 802138e:	44a8      	add	r8, r5
 8021390:	442c      	add	r4, r5
 8021392:	a810      	add	r0, sp, #64	; 0x40
 8021394:	9709      	str	r7, [sp, #36]	; 0x24
 8021396:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 802139a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802139e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80213a2:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 80213a6:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 80213aa:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 80213ae:	f7f5 faa5 	bl	80168fc <WM__InitIVRSearch>
 80213b2:	2800      	cmp	r0, #0
 80213b4:	d07e      	beq.n	80214b4 <GUI__DrawTwinArc4+0x144>
 80213b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213b8:	3b01      	subs	r3, #1
 80213ba:	9303      	str	r3, [sp, #12]
 80213bc:	fb03 f303 	mul.w	r3, r3, r3
 80213c0:	9306      	str	r3, [sp, #24]
 80213c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213c4:	9a06      	ldr	r2, [sp, #24]
 80213c6:	fb03 f303 	mul.w	r3, r3, r3
 80213ca:	9305      	str	r3, [sp, #20]
 80213cc:	1a9b      	subs	r3, r3, r2
 80213ce:	930e      	str	r3, [sp, #56]	; 0x38
 80213d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213d2:	3b02      	subs	r3, #2
 80213d4:	9307      	str	r3, [sp, #28]
 80213d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213d8:	3b03      	subs	r3, #3
 80213da:	930f      	str	r3, [sp, #60]	; 0x3c
 80213dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213de:	4423      	add	r3, r4
 80213e0:	3402      	adds	r4, #2
 80213e2:	930d      	str	r3, [sp, #52]	; 0x34
 80213e4:	940c      	str	r4, [sp, #48]	; 0x30
 80213e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	dd5f      	ble.n	80214ac <GUI__DrawTwinArc4+0x13c>
 80213ec:	981d      	ldr	r0, [sp, #116]	; 0x74
 80213ee:	f7fb fa41 	bl	801c874 <GUI_SetColor>
 80213f2:	9b03      	ldr	r3, [sp, #12]
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	d062      	beq.n	80214be <GUI__DrawTwinArc4+0x14e>
 80213f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80213fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80213fe:	1ad3      	subs	r3, r2, r3
 8021400:	9304      	str	r3, [sp, #16]
 8021402:	f7f9 f8d1 	bl	801a5a8 <GUI__sqrt32>
 8021406:	9b04      	ldr	r3, [sp, #16]
 8021408:	9e03      	ldr	r6, [sp, #12]
 802140a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802140c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021410:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8021414:	9c03      	ldr	r4, [sp, #12]
 8021416:	441e      	add	r6, r3
 8021418:	9b03      	ldr	r3, [sp, #12]
 802141a:	1ad5      	subs	r5, r2, r3
 802141c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802141e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021420:	4607      	mov	r7, r0
 8021422:	449b      	add	fp, r3
 8021424:	ebc3 0a02 	rsb	sl, r3, r2
 8021428:	2000      	movs	r0, #0
 802142a:	e002      	b.n	8021432 <GUI__DrawTwinArc4+0xc2>
 802142c:	2000      	movs	r0, #0
 802142e:	f109 0901 	add.w	r9, r9, #1
 8021432:	ebc0 030b 	rsb	r3, r0, fp
 8021436:	ebc7 0c0b 	rsb	ip, r7, fp
 802143a:	3b01      	subs	r3, #1
 802143c:	eb00 080a 	add.w	r8, r0, sl
 8021440:	461a      	mov	r2, r3
 8021442:	4660      	mov	r0, ip
 8021444:	f108 0801 	add.w	r8, r8, #1
 8021448:	4629      	mov	r1, r5
 802144a:	4457      	add	r7, sl
 802144c:	9302      	str	r3, [sp, #8]
 802144e:	f8cd c004 	str.w	ip, [sp, #4]
 8021452:	f7f8 faed 	bl	8019a30 <LCD_DrawHLine>
 8021456:	4640      	mov	r0, r8
 8021458:	4629      	mov	r1, r5
 802145a:	463a      	mov	r2, r7
 802145c:	f7f8 fae8 	bl	8019a30 <LCD_DrawHLine>
 8021460:	9b02      	ldr	r3, [sp, #8]
 8021462:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021466:	461a      	mov	r2, r3
 8021468:	4660      	mov	r0, ip
 802146a:	4631      	mov	r1, r6
 802146c:	f7f8 fae0 	bl	8019a30 <LCD_DrawHLine>
 8021470:	4640      	mov	r0, r8
 8021472:	4631      	mov	r1, r6
 8021474:	463a      	mov	r2, r7
 8021476:	f7f8 fadb 	bl	8019a30 <LCD_DrawHLine>
 802147a:	3c01      	subs	r4, #1
 802147c:	9b05      	ldr	r3, [sp, #20]
 802147e:	9e04      	ldr	r6, [sp, #16]
 8021480:	fb04 f804 	mul.w	r8, r4, r4
 8021484:	ebc8 0003 	rsb	r0, r8, r3
 8021488:	464d      	mov	r5, r9
 802148a:	4426      	add	r6, r4
 802148c:	d017      	beq.n	80214be <GUI__DrawTwinArc4+0x14e>
 802148e:	f7f9 f88b 	bl	801a5a8 <GUI__sqrt32>
 8021492:	9b03      	ldr	r3, [sp, #12]
 8021494:	42a3      	cmp	r3, r4
 8021496:	4607      	mov	r7, r0
 8021498:	ddc8      	ble.n	802142c <GUI__DrawTwinArc4+0xbc>
 802149a:	9b06      	ldr	r3, [sp, #24]
 802149c:	ebc8 0003 	rsb	r0, r8, r3
 80214a0:	f7f9 f882 	bl	801a5a8 <GUI__sqrt32>
 80214a4:	e7c3      	b.n	802142e <GUI__DrawTwinArc4+0xbe>
 80214a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80214a8:	2b02      	cmp	r3, #2
 80214aa:	d161      	bne.n	8021570 <GUI__DrawTwinArc4+0x200>
 80214ac:	f7f5 f900 	bl	80166b0 <WM__GetNextIVR>
 80214b0:	2800      	cmp	r0, #0
 80214b2:	d198      	bne.n	80213e6 <GUI__DrawTwinArc4+0x76>
 80214b4:	f7f9 ff38 	bl	801b328 <GUI_Unlock>
 80214b8:	b013      	add	sp, #76	; 0x4c
 80214ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80214c0:	2b01      	cmp	r3, #1
 80214c2:	d0f3      	beq.n	80214ac <GUI__DrawTwinArc4+0x13c>
 80214c4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80214c6:	f7fb f9d5 	bl	801c874 <GUI_SetColor>
 80214ca:	9b07      	ldr	r3, [sp, #28]
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d0ea      	beq.n	80214a6 <GUI__DrawTwinArc4+0x136>
 80214d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80214d2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80214d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80214d8:	461c      	mov	r4, r3
 80214da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80214dc:	1ad3      	subs	r3, r2, r3
 80214de:	9304      	str	r3, [sp, #16]
 80214e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80214e4:	449a      	add	sl, r3
 80214e6:	ebc3 0902 	rsb	r9, r3, r2
 80214ea:	e029      	b.n	8021540 <GUI__DrawTwinArc4+0x1d0>
 80214ec:	f04f 0800 	mov.w	r8, #0
 80214f0:	4640      	mov	r0, r8
 80214f2:	ebc8 030a 	rsb	r3, r8, sl
 80214f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80214fa:	ebc0 0c0a 	rsb	ip, r0, sl
 80214fe:	44c8      	add	r8, r9
 8021500:	eb00 0609 	add.w	r6, r0, r9
 8021504:	4629      	mov	r1, r5
 8021506:	4660      	mov	r0, ip
 8021508:	f108 0801 	add.w	r8, r8, #1
 802150c:	465a      	mov	r2, fp
 802150e:	f8cd c004 	str.w	ip, [sp, #4]
 8021512:	f7f8 fa8d 	bl	8019a30 <LCD_DrawHLine>
 8021516:	4629      	mov	r1, r5
 8021518:	4640      	mov	r0, r8
 802151a:	4632      	mov	r2, r6
 802151c:	f7f8 fa88 	bl	8019a30 <LCD_DrawHLine>
 8021520:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021524:	4639      	mov	r1, r7
 8021526:	4660      	mov	r0, ip
 8021528:	465a      	mov	r2, fp
 802152a:	f7f8 fa81 	bl	8019a30 <LCD_DrawHLine>
 802152e:	4640      	mov	r0, r8
 8021530:	4639      	mov	r1, r7
 8021532:	4632      	mov	r2, r6
 8021534:	f7f8 fa7c 	bl	8019a30 <LCD_DrawHLine>
 8021538:	3c01      	subs	r4, #1
 802153a:	f105 0501 	add.w	r5, r5, #1
 802153e:	d0b2      	beq.n	80214a6 <GUI__DrawTwinArc4+0x136>
 8021540:	9b05      	ldr	r3, [sp, #20]
 8021542:	9f04      	ldr	r7, [sp, #16]
 8021544:	fb04 f604 	mul.w	r6, r4, r4
 8021548:	1b98      	subs	r0, r3, r6
 802154a:	f7f9 f82d 	bl	801a5a8 <GUI__sqrt32>
 802154e:	9b03      	ldr	r3, [sp, #12]
 8021550:	42a3      	cmp	r3, r4
 8021552:	4427      	add	r7, r4
 8021554:	ddca      	ble.n	80214ec <GUI__DrawTwinArc4+0x17c>
 8021556:	9b06      	ldr	r3, [sp, #24]
 8021558:	1b98      	subs	r0, r3, r6
 802155a:	f7f9 f825 	bl	801a5a8 <GUI__sqrt32>
 802155e:	9b07      	ldr	r3, [sp, #28]
 8021560:	42a3      	cmp	r3, r4
 8021562:	dd02      	ble.n	802156a <GUI__DrawTwinArc4+0x1fa>
 8021564:	f100 38ff 	add.w	r8, r0, #4294967295
 8021568:	e7c3      	b.n	80214f2 <GUI__DrawTwinArc4+0x182>
 802156a:	f04f 0800 	mov.w	r8, #0
 802156e:	e7c0      	b.n	80214f2 <GUI__DrawTwinArc4+0x182>
 8021570:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021572:	f7fb f97f 	bl	801c874 <GUI_SetColor>
 8021576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021578:	2b00      	cmp	r3, #0
 802157a:	d097      	beq.n	80214ac <GUI__DrawTwinArc4+0x13c>
 802157c:	4699      	mov	r9, r3
 802157e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021580:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021582:	441a      	add	r2, r3
 8021584:	9204      	str	r2, [sp, #16]
 8021586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021588:	f1c3 0403 	rsb	r4, r3, #3
 802158c:	ebc3 0b02 	rsb	fp, r3, r2
 8021590:	9b04      	ldr	r3, [sp, #16]
 8021592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021594:	f103 38ff 	add.w	r8, r3, #4294967295
 8021598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802159a:	441c      	add	r4, r3
 802159c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802159e:	1ad3      	subs	r3, r2, r3
 80215a0:	f10b 0701 	add.w	r7, fp, #1
 80215a4:	9308      	str	r3, [sp, #32]
 80215a6:	e01e      	b.n	80215e6 <GUI__DrawTwinArc4+0x276>
 80215a8:	2500      	movs	r5, #0
 80215aa:	9b04      	ldr	r3, [sp, #16]
 80215ac:	ebc5 0a03 	rsb	sl, r5, r3
 80215b0:	4621      	mov	r1, r4
 80215b2:	445d      	add	r5, fp
 80215b4:	4650      	mov	r0, sl
 80215b6:	4642      	mov	r2, r8
 80215b8:	f7f8 fa3a 	bl	8019a30 <LCD_DrawHLine>
 80215bc:	4621      	mov	r1, r4
 80215be:	4638      	mov	r0, r7
 80215c0:	462a      	mov	r2, r5
 80215c2:	f7f8 fa35 	bl	8019a30 <LCD_DrawHLine>
 80215c6:	4650      	mov	r0, sl
 80215c8:	4631      	mov	r1, r6
 80215ca:	4642      	mov	r2, r8
 80215cc:	f7f8 fa30 	bl	8019a30 <LCD_DrawHLine>
 80215d0:	4638      	mov	r0, r7
 80215d2:	4631      	mov	r1, r6
 80215d4:	462a      	mov	r2, r5
 80215d6:	f7f8 fa2b 	bl	8019a30 <LCD_DrawHLine>
 80215da:	f1b9 0901 	subs.w	r9, r9, #1
 80215de:	f104 0401 	add.w	r4, r4, #1
 80215e2:	f43f af63 	beq.w	80214ac <GUI__DrawTwinArc4+0x13c>
 80215e6:	9b05      	ldr	r3, [sp, #20]
 80215e8:	9e08      	ldr	r6, [sp, #32]
 80215ea:	fb09 f509 	mul.w	r5, r9, r9
 80215ee:	1b58      	subs	r0, r3, r5
 80215f0:	f7f8 ffda 	bl	801a5a8 <GUI__sqrt32>
 80215f4:	9b03      	ldr	r3, [sp, #12]
 80215f6:	454b      	cmp	r3, r9
 80215f8:	444e      	add	r6, r9
 80215fa:	ddd5      	ble.n	80215a8 <GUI__DrawTwinArc4+0x238>
 80215fc:	9b06      	ldr	r3, [sp, #24]
 80215fe:	1b58      	subs	r0, r3, r5
 8021600:	f7f8 ffd2 	bl	801a5a8 <GUI__sqrt32>
 8021604:	9b07      	ldr	r3, [sp, #28]
 8021606:	454b      	cmp	r3, r9
 8021608:	ddce      	ble.n	80215a8 <GUI__DrawTwinArc4+0x238>
 802160a:	1e45      	subs	r5, r0, #1
 802160c:	e7cd      	b.n	80215aa <GUI__DrawTwinArc4+0x23a>
 802160e:	bf00      	nop
 8021610:	2000027c 	.word	0x2000027c

08021614 <GUI__CompactPixelIndices>:
 8021614:	2a08      	cmp	r2, #8
 8021616:	b410      	push	{r4}
 8021618:	dd0e      	ble.n	8021638 <GUI__CompactPixelIndices+0x24>
 802161a:	2a10      	cmp	r2, #16
 802161c:	dc1b      	bgt.n	8021656 <GUI__CompactPixelIndices+0x42>
 802161e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021622:	4603      	mov	r3, r0
 8021624:	f850 2b04 	ldr.w	r2, [r0], #4
 8021628:	f823 2b02 	strh.w	r2, [r3], #2
 802162c:	428b      	cmp	r3, r1
 802162e:	d1f9      	bne.n	8021624 <GUI__CompactPixelIndices+0x10>
 8021630:	2001      	movs	r0, #1
 8021632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021636:	4770      	bx	lr
 8021638:	2a02      	cmp	r2, #2
 802163a:	d010      	beq.n	802165e <GUI__CompactPixelIndices+0x4a>
 802163c:	2a04      	cmp	r2, #4
 802163e:	d076      	beq.n	802172e <GUI__CompactPixelIndices+0x11a>
 8021640:	2a01      	cmp	r2, #1
 8021642:	d034      	beq.n	80216ae <GUI__CompactPixelIndices+0x9a>
 8021644:	4401      	add	r1, r0
 8021646:	4603      	mov	r3, r0
 8021648:	f850 2b04 	ldr.w	r2, [r0], #4
 802164c:	f803 2b01 	strb.w	r2, [r3], #1
 8021650:	428b      	cmp	r3, r1
 8021652:	d1f9      	bne.n	8021648 <GUI__CompactPixelIndices+0x34>
 8021654:	e7ec      	b.n	8021630 <GUI__CompactPixelIndices+0x1c>
 8021656:	2000      	movs	r0, #0
 8021658:	f85d 4b04 	ldr.w	r4, [sp], #4
 802165c:	4770      	bx	lr
 802165e:	4602      	mov	r2, r0
 8021660:	2901      	cmp	r1, #1
 8021662:	6813      	ldr	r3, [r2, #0]
 8021664:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8021668:	b2db      	uxtb	r3, r3
 802166a:	d01d      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 802166c:	6854      	ldr	r4, [r2, #4]
 802166e:	2902      	cmp	r1, #2
 8021670:	f004 0403 	and.w	r4, r4, #3
 8021674:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8021678:	d016      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 802167a:	6894      	ldr	r4, [r2, #8]
 802167c:	2903      	cmp	r1, #3
 802167e:	f004 0403 	and.w	r4, r4, #3
 8021682:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8021686:	d00f      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 8021688:	68d4      	ldr	r4, [r2, #12]
 802168a:	f004 0403 	and.w	r4, r4, #3
 802168e:	4323      	orrs	r3, r4
 8021690:	3904      	subs	r1, #4
 8021692:	f800 3b01 	strb.w	r3, [r0], #1
 8021696:	f102 0210 	add.w	r2, r2, #16
 802169a:	d0c9      	beq.n	8021630 <GUI__CompactPixelIndices+0x1c>
 802169c:	6813      	ldr	r3, [r2, #0]
 802169e:	2901      	cmp	r1, #1
 80216a0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80216a4:	b2db      	uxtb	r3, r3
 80216a6:	d1e1      	bne.n	802166c <GUI__CompactPixelIndices+0x58>
 80216a8:	7003      	strb	r3, [r0, #0]
 80216aa:	2001      	movs	r0, #1
 80216ac:	e7c1      	b.n	8021632 <GUI__CompactPixelIndices+0x1e>
 80216ae:	4602      	mov	r2, r0
 80216b0:	2901      	cmp	r1, #1
 80216b2:	6813      	ldr	r3, [r2, #0]
 80216b4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80216b8:	b2db      	uxtb	r3, r3
 80216ba:	d0f5      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 80216bc:	6854      	ldr	r4, [r2, #4]
 80216be:	2902      	cmp	r1, #2
 80216c0:	f004 0401 	and.w	r4, r4, #1
 80216c4:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 80216c8:	d0ee      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 80216ca:	6894      	ldr	r4, [r2, #8]
 80216cc:	2903      	cmp	r1, #3
 80216ce:	f004 0401 	and.w	r4, r4, #1
 80216d2:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80216d6:	d0e7      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 80216d8:	68d4      	ldr	r4, [r2, #12]
 80216da:	2904      	cmp	r1, #4
 80216dc:	f004 0401 	and.w	r4, r4, #1
 80216e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80216e4:	d0e0      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 80216e6:	6914      	ldr	r4, [r2, #16]
 80216e8:	2905      	cmp	r1, #5
 80216ea:	f004 0401 	and.w	r4, r4, #1
 80216ee:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 80216f2:	d0d9      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 80216f4:	6954      	ldr	r4, [r2, #20]
 80216f6:	2906      	cmp	r1, #6
 80216f8:	f004 0401 	and.w	r4, r4, #1
 80216fc:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8021700:	d0d2      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 8021702:	6994      	ldr	r4, [r2, #24]
 8021704:	3907      	subs	r1, #7
 8021706:	f004 0401 	and.w	r4, r4, #1
 802170a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 802170e:	d0cb      	beq.n	80216a8 <GUI__CompactPixelIndices+0x94>
 8021710:	69d4      	ldr	r4, [r2, #28]
 8021712:	f004 0401 	and.w	r4, r4, #1
 8021716:	4323      	orrs	r3, r4
 8021718:	f800 3b01 	strb.w	r3, [r0], #1
 802171c:	3220      	adds	r2, #32
 802171e:	6813      	ldr	r3, [r2, #0]
 8021720:	2901      	cmp	r1, #1
 8021722:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8021726:	b2db      	uxtb	r3, r3
 8021728:	d1c8      	bne.n	80216bc <GUI__CompactPixelIndices+0xa8>
 802172a:	7003      	strb	r3, [r0, #0]
 802172c:	e7bd      	b.n	80216aa <GUI__CompactPixelIndices+0x96>
 802172e:	f100 0308 	add.w	r3, r0, #8
 8021732:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8021736:	2901      	cmp	r1, #1
 8021738:	ea4f 1202 	mov.w	r2, r2, lsl #4
 802173c:	b2d2      	uxtb	r2, r2
 802173e:	d012      	beq.n	8021766 <GUI__CompactPixelIndices+0x152>
 8021740:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8021744:	f004 040f 	and.w	r4, r4, #15
 8021748:	4322      	orrs	r2, r4
 802174a:	3902      	subs	r1, #2
 802174c:	f800 2b01 	strb.w	r2, [r0], #1
 8021750:	f103 0308 	add.w	r3, r3, #8
 8021754:	f43f af6c 	beq.w	8021630 <GUI__CompactPixelIndices+0x1c>
 8021758:	f853 2c08 	ldr.w	r2, [r3, #-8]
 802175c:	2901      	cmp	r1, #1
 802175e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8021762:	b2d2      	uxtb	r2, r2
 8021764:	d1ec      	bne.n	8021740 <GUI__CompactPixelIndices+0x12c>
 8021766:	7002      	strb	r2, [r0, #0]
 8021768:	f85d 4b04 	ldr.w	r4, [sp], #4
 802176c:	4608      	mov	r0, r1
 802176e:	4770      	bx	lr

08021770 <GUI__CompactPixelIndicesEx>:
 8021770:	2a08      	cmp	r2, #8
 8021772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021776:	460c      	mov	r4, r1
 8021778:	681e      	ldr	r6, [r3, #0]
 802177a:	4605      	mov	r5, r0
 802177c:	dd0c      	ble.n	8021798 <GUI__CompactPixelIndicesEx+0x28>
 802177e:	2a10      	cmp	r2, #16
 8021780:	dc20      	bgt.n	80217c4 <GUI__CompactPixelIndicesEx+0x54>
 8021782:	691f      	ldr	r7, [r3, #16]
 8021784:	2f00      	cmp	r7, #0
 8021786:	f000 8091 	beq.w	80218ac <GUI__CompactPixelIndicesEx+0x13c>
 802178a:	4629      	mov	r1, r5
 802178c:	4622      	mov	r2, r4
 802178e:	2302      	movs	r3, #2
 8021790:	47b8      	blx	r7
 8021792:	2001      	movs	r0, #1
 8021794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021798:	3a01      	subs	r2, #1
 802179a:	2a07      	cmp	r2, #7
 802179c:	d80f      	bhi.n	80217be <GUI__CompactPixelIndicesEx+0x4e>
 802179e:	e8df f002 	tbb	[pc, r2]
 80217a2:	5004      	.short	0x5004
 80217a4:	0e0e750e 	.word	0x0e0e750e
 80217a8:	9a0e      	.short	0x9a0e
 80217aa:	4680      	mov	r8, r0
 80217ac:	f8d8 0000 	ldr.w	r0, [r8]
 80217b0:	47b0      	blx	r6
 80217b2:	2c01      	cmp	r4, #1
 80217b4:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 80217b8:	b2c7      	uxtb	r7, r0
 80217ba:	d106      	bne.n	80217ca <GUI__CompactPixelIndicesEx+0x5a>
 80217bc:	702f      	strb	r7, [r5, #0]
 80217be:	2001      	movs	r0, #1
 80217c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217c4:	2000      	movs	r0, #0
 80217c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80217ce:	47b0      	blx	r6
 80217d0:	2c02      	cmp	r4, #2
 80217d2:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 80217d6:	b2c7      	uxtb	r7, r0
 80217d8:	d0f0      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 80217da:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80217de:	47b0      	blx	r6
 80217e0:	2c03      	cmp	r4, #3
 80217e2:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 80217e6:	b2c7      	uxtb	r7, r0
 80217e8:	d0e8      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 80217ea:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80217ee:	47b0      	blx	r6
 80217f0:	2c04      	cmp	r4, #4
 80217f2:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80217f6:	b2c7      	uxtb	r7, r0
 80217f8:	d0e0      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 80217fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80217fe:	47b0      	blx	r6
 8021800:	2c05      	cmp	r4, #5
 8021802:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8021806:	b2c7      	uxtb	r7, r0
 8021808:	d0d8      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 802180a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 802180e:	47b0      	blx	r6
 8021810:	2c06      	cmp	r4, #6
 8021812:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8021816:	b2c7      	uxtb	r7, r0
 8021818:	d0d0      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 802181a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 802181e:	47b0      	blx	r6
 8021820:	2c07      	cmp	r4, #7
 8021822:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8021826:	b2c7      	uxtb	r7, r0
 8021828:	d0c8      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 802182a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 802182e:	47b0      	blx	r6
 8021830:	3c08      	subs	r4, #8
 8021832:	ea47 0000 	orr.w	r0, r7, r0
 8021836:	f805 0b01 	strb.w	r0, [r5], #1
 802183a:	f108 0820 	add.w	r8, r8, #32
 802183e:	d1b5      	bne.n	80217ac <GUI__CompactPixelIndicesEx+0x3c>
 8021840:	e7bd      	b.n	80217be <GUI__CompactPixelIndicesEx+0x4e>
 8021842:	4680      	mov	r8, r0
 8021844:	f8d8 0000 	ldr.w	r0, [r8]
 8021848:	47b0      	blx	r6
 802184a:	2c01      	cmp	r4, #1
 802184c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8021850:	b2c7      	uxtb	r7, r0
 8021852:	d0b3      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 8021854:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021858:	47b0      	blx	r6
 802185a:	2c02      	cmp	r4, #2
 802185c:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8021860:	b2c7      	uxtb	r7, r0
 8021862:	d0ab      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 8021864:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8021868:	47b0      	blx	r6
 802186a:	2c03      	cmp	r4, #3
 802186c:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8021870:	b2c7      	uxtb	r7, r0
 8021872:	d0a3      	beq.n	80217bc <GUI__CompactPixelIndicesEx+0x4c>
 8021874:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8021878:	47b0      	blx	r6
 802187a:	3c04      	subs	r4, #4
 802187c:	ea47 0000 	orr.w	r0, r7, r0
 8021880:	f805 0b01 	strb.w	r0, [r5], #1
 8021884:	f108 0810 	add.w	r8, r8, #16
 8021888:	d1dc      	bne.n	8021844 <GUI__CompactPixelIndicesEx+0xd4>
 802188a:	e798      	b.n	80217be <GUI__CompactPixelIndicesEx+0x4e>
 802188c:	f100 0708 	add.w	r7, r0, #8
 8021890:	f857 0c08 	ldr.w	r0, [r7, #-8]
 8021894:	47b0      	blx	r6
 8021896:	2c01      	cmp	r4, #1
 8021898:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802189c:	fa5f f880 	uxtb.w	r8, r0
 80218a0:	d10d      	bne.n	80218be <GUI__CompactPixelIndicesEx+0x14e>
 80218a2:	f885 8000 	strb.w	r8, [r5]
 80218a6:	4620      	mov	r0, r4
 80218a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218ac:	4607      	mov	r7, r0
 80218ae:	f857 0b04 	ldr.w	r0, [r7], #4
 80218b2:	47b0      	blx	r6
 80218b4:	3c01      	subs	r4, #1
 80218b6:	f825 0b02 	strh.w	r0, [r5], #2
 80218ba:	d1f8      	bne.n	80218ae <GUI__CompactPixelIndicesEx+0x13e>
 80218bc:	e77f      	b.n	80217be <GUI__CompactPixelIndicesEx+0x4e>
 80218be:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80218c2:	47b0      	blx	r6
 80218c4:	3c02      	subs	r4, #2
 80218c6:	ea48 0000 	orr.w	r0, r8, r0
 80218ca:	f805 0b01 	strb.w	r0, [r5], #1
 80218ce:	f107 0708 	add.w	r7, r7, #8
 80218d2:	d1dd      	bne.n	8021890 <GUI__CompactPixelIndicesEx+0x120>
 80218d4:	e773      	b.n	80217be <GUI__CompactPixelIndicesEx+0x4e>
 80218d6:	691f      	ldr	r7, [r3, #16]
 80218d8:	b13f      	cbz	r7, 80218ea <GUI__CompactPixelIndicesEx+0x17a>
 80218da:	4628      	mov	r0, r5
 80218dc:	4622      	mov	r2, r4
 80218de:	4629      	mov	r1, r5
 80218e0:	2301      	movs	r3, #1
 80218e2:	47b8      	blx	r7
 80218e4:	2001      	movs	r0, #1
 80218e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218ea:	462f      	mov	r7, r5
 80218ec:	f857 0b04 	ldr.w	r0, [r7], #4
 80218f0:	47b0      	blx	r6
 80218f2:	3c01      	subs	r4, #1
 80218f4:	f805 0b01 	strb.w	r0, [r5], #1
 80218f8:	d1f8      	bne.n	80218ec <GUI__CompactPixelIndicesEx+0x17c>
 80218fa:	e760      	b.n	80217be <GUI__CompactPixelIndicesEx+0x4e>

080218fc <_GetCharCode>:
 80218fc:	7800      	ldrb	r0, [r0, #0]
 80218fe:	4770      	bx	lr

08021900 <_GetCharSize>:
 8021900:	2001      	movs	r0, #1
 8021902:	4770      	bx	lr

08021904 <_CalcSizeOfChar>:
 8021904:	2001      	movs	r0, #1
 8021906:	4770      	bx	lr

08021908 <_Encode>:
 8021908:	7001      	strb	r1, [r0, #0]
 802190a:	2001      	movs	r0, #1
 802190c:	4770      	bx	lr
 802190e:	bf00      	nop

08021910 <GUI_DrawGradientV>:
 8021910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021914:	b091      	sub	sp, #68	; 0x44
 8021916:	4606      	mov	r6, r0
 8021918:	469a      	mov	sl, r3
 802191a:	460f      	mov	r7, r1
 802191c:	4690      	mov	r8, r2
 802191e:	f7f9 fd0d 	bl	801b33c <GUI_Lock>
 8021922:	4b68      	ldr	r3, [pc, #416]	; (8021ac4 <GUI_DrawGradientV+0x1b4>)
 8021924:	681c      	ldr	r4, [r3, #0]
 8021926:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8021928:	6d24      	ldr	r4, [r4, #80]	; 0x50
 802192a:	19ae      	adds	r6, r5, r6
 802192c:	44a8      	add	r8, r5
 802192e:	19e7      	adds	r7, r4, r7
 8021930:	44a2      	add	sl, r4
 8021932:	a80e      	add	r0, sp, #56	; 0x38
 8021934:	9607      	str	r6, [sp, #28]
 8021936:	f8cd 8020 	str.w	r8, [sp, #32]
 802193a:	9702      	str	r7, [sp, #8]
 802193c:	f8cd a004 	str.w	sl, [sp, #4]
 8021940:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 8021944:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
 8021948:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 802194c:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
 8021950:	f7f4 ffd4 	bl	80168fc <WM__InitIVRSearch>
 8021954:	2800      	cmp	r0, #0
 8021956:	f000 8098 	beq.w	8021a8a <GUI_DrawGradientV+0x17a>
 802195a:	9e01      	ldr	r6, [sp, #4]
 802195c:	9c02      	ldr	r4, [sp, #8]
 802195e:	1b35      	subs	r5, r6, r4
 8021960:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021962:	b2f4      	uxtb	r4, r6
 8021964:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021966:	fa5f fe86 	uxtb.w	lr, r6
 802196a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 802196c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8021970:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021972:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8021976:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021978:	f3c6 4107 	ubfx	r1, r6, #16, #8
 802197c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 802197e:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8021982:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8021986:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021988:	105b      	asrs	r3, r3, #1
 802198a:	0e32      	lsrs	r2, r6, #24
 802198c:	ebc4 0e0e 	rsb	lr, r4, lr
 8021990:	fb05 3604 	mla	r6, r5, r4, r3
 8021994:	fb05 3400 	mla	r4, r5, r0, r3
 8021998:	940b      	str	r4, [sp, #44]	; 0x2c
 802199a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802199c:	960a      	str	r6, [sp, #40]	; 0x28
 802199e:	1a3f      	subs	r7, r7, r0
 80219a0:	fb05 3601 	mla	r6, r5, r1, r3
 80219a4:	ebc1 0c0c 	rsb	ip, r1, ip
 80219a8:	fb05 3302 	mla	r3, r5, r2, r3
 80219ac:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 80219b0:	f8cd e018 	str.w	lr, [sp, #24]
 80219b4:	9703      	str	r7, [sp, #12]
 80219b6:	960c      	str	r6, [sp, #48]	; 0x30
 80219b8:	f8cd c010 	str.w	ip, [sp, #16]
 80219bc:	930d      	str	r3, [sp, #52]	; 0x34
 80219be:	9205      	str	r2, [sp, #20]
 80219c0:	f7fa fe50 	bl	801c664 <GUI_GetColor>
 80219c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80219c6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80219c8:	9009      	str	r0, [sp, #36]	; 0x24
 80219ca:	42a6      	cmp	r6, r4
 80219cc:	d070      	beq.n	8021ab0 <GUI_DrawGradientV+0x1a0>
 80219ce:	2d00      	cmp	r5, #0
 80219d0:	d057      	beq.n	8021a82 <GUI_DrawGradientV+0x172>
 80219d2:	9e02      	ldr	r6, [sp, #8]
 80219d4:	9c01      	ldr	r4, [sp, #4]
 80219d6:	42a6      	cmp	r6, r4
 80219d8:	dc62      	bgt.n	8021aa0 <GUI_DrawGradientV+0x190>
 80219da:	4634      	mov	r4, r6
 80219dc:	f04f 0b01 	mov.w	fp, #1
 80219e0:	ae0a      	add	r6, sp, #40	; 0x28
 80219e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219e4:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 80219e8:	46da      	mov	sl, fp
 80219ea:	e006      	b.n	80219fa <GUI_DrawGradientV+0xea>
 80219ec:	f10a 0a01 	add.w	sl, sl, #1
 80219f0:	9801      	ldr	r0, [sp, #4]
 80219f2:	3401      	adds	r4, #1
 80219f4:	42a0      	cmp	r0, r4
 80219f6:	db2f      	blt.n	8021a58 <GUI_DrawGradientV+0x148>
 80219f8:	465a      	mov	r2, fp
 80219fa:	9b04      	ldr	r3, [sp, #16]
 80219fc:	fb98 f1f5 	sdiv	r1, r8, r5
 8021a00:	4498      	add	r8, r3
 8021a02:	9b05      	ldr	r3, [sp, #20]
 8021a04:	fb99 fcf5 	sdiv	ip, r9, r5
 8021a08:	4499      	add	r9, r3
 8021a0a:	9b06      	ldr	r3, [sp, #24]
 8021a0c:	fb96 f0f5 	sdiv	r0, r6, r5
 8021a10:	441e      	add	r6, r3
 8021a12:	9b03      	ldr	r3, [sp, #12]
 8021a14:	fb97 fef5 	sdiv	lr, r7, r5
 8021a18:	441f      	add	r7, r3
 8021a1a:	9b02      	ldr	r3, [sp, #8]
 8021a1c:	0409      	lsls	r1, r1, #16
 8021a1e:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 8021a22:	42a3      	cmp	r3, r4
 8021a24:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 8021a28:	ea41 0b0c 	orr.w	fp, r1, ip
 8021a2c:	4610      	mov	r0, r2
 8021a2e:	dadf      	bge.n	80219f0 <GUI_DrawGradientV+0xe0>
 8021a30:	4593      	cmp	fp, r2
 8021a32:	d0db      	beq.n	80219ec <GUI_DrawGradientV+0xdc>
 8021a34:	f7f8 fbfa 	bl	801a22c <LCD_SetColor>
 8021a38:	f1ba 0f01 	cmp.w	sl, #1
 8021a3c:	d02a      	beq.n	8021a94 <GUI_DrawGradientV+0x184>
 8021a3e:	ebca 0104 	rsb	r1, sl, r4
 8021a42:	9807      	ldr	r0, [sp, #28]
 8021a44:	9a08      	ldr	r2, [sp, #32]
 8021a46:	1e63      	subs	r3, r4, #1
 8021a48:	f7f8 f840 	bl	8019acc <LCD_FillRect>
 8021a4c:	9801      	ldr	r0, [sp, #4]
 8021a4e:	3401      	adds	r4, #1
 8021a50:	42a0      	cmp	r0, r4
 8021a52:	f04f 0a01 	mov.w	sl, #1
 8021a56:	dacf      	bge.n	80219f8 <GUI_DrawGradientV+0xe8>
 8021a58:	4653      	mov	r3, sl
 8021a5a:	46da      	mov	sl, fp
 8021a5c:	4650      	mov	r0, sl
 8021a5e:	469b      	mov	fp, r3
 8021a60:	f7f8 fbe4 	bl	801a22c <LCD_SetColor>
 8021a64:	f1bb 0f01 	cmp.w	fp, #1
 8021a68:	d01c      	beq.n	8021aa4 <GUI_DrawGradientV+0x194>
 8021a6a:	9c01      	ldr	r4, [sp, #4]
 8021a6c:	9807      	ldr	r0, [sp, #28]
 8021a6e:	9a08      	ldr	r2, [sp, #32]
 8021a70:	ebcb 0104 	rsb	r1, fp, r4
 8021a74:	3101      	adds	r1, #1
 8021a76:	4623      	mov	r3, r4
 8021a78:	f7f8 f828 	bl	8019acc <LCD_FillRect>
 8021a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a7e:	f7f8 fbd5 	bl	801a22c <LCD_SetColor>
 8021a82:	f7f4 fe15 	bl	80166b0 <WM__GetNextIVR>
 8021a86:	2800      	cmp	r0, #0
 8021a88:	d19a      	bne.n	80219c0 <GUI_DrawGradientV+0xb0>
 8021a8a:	f7f9 fc4d 	bl	801b328 <GUI_Unlock>
 8021a8e:	b011      	add	sp, #68	; 0x44
 8021a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a94:	9807      	ldr	r0, [sp, #28]
 8021a96:	9a08      	ldr	r2, [sp, #32]
 8021a98:	1e61      	subs	r1, r4, #1
 8021a9a:	f7f7 ffc9 	bl	8019a30 <LCD_DrawHLine>
 8021a9e:	e7a7      	b.n	80219f0 <GUI_DrawGradientV+0xe0>
 8021aa0:	f7f8 fbc4 	bl	801a22c <LCD_SetColor>
 8021aa4:	9807      	ldr	r0, [sp, #28]
 8021aa6:	9901      	ldr	r1, [sp, #4]
 8021aa8:	9a08      	ldr	r2, [sp, #32]
 8021aaa:	f7f7 ffc1 	bl	8019a30 <LCD_DrawHLine>
 8021aae:	e7e5      	b.n	8021a7c <GUI_DrawGradientV+0x16c>
 8021ab0:	4630      	mov	r0, r6
 8021ab2:	f7f8 fbbb 	bl	801a22c <LCD_SetColor>
 8021ab6:	9807      	ldr	r0, [sp, #28]
 8021ab8:	9902      	ldr	r1, [sp, #8]
 8021aba:	9a08      	ldr	r2, [sp, #32]
 8021abc:	9b01      	ldr	r3, [sp, #4]
 8021abe:	f7f8 f805 	bl	8019acc <LCD_FillRect>
 8021ac2:	e7db      	b.n	8021a7c <GUI_DrawGradientV+0x16c>
 8021ac4:	2000027c 	.word	0x2000027c

08021ac8 <GUI_DrawGradientH>:
 8021ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021acc:	b091      	sub	sp, #68	; 0x44
 8021ace:	4606      	mov	r6, r0
 8021ad0:	4698      	mov	r8, r3
 8021ad2:	460f      	mov	r7, r1
 8021ad4:	4692      	mov	sl, r2
 8021ad6:	f7f9 fc31 	bl	801b33c <GUI_Lock>
 8021ada:	4b68      	ldr	r3, [pc, #416]	; (8021c7c <GUI_DrawGradientH+0x1b4>)
 8021adc:	681c      	ldr	r4, [r3, #0]
 8021ade:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8021ae0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8021ae2:	19ae      	adds	r6, r5, r6
 8021ae4:	44aa      	add	sl, r5
 8021ae6:	19e7      	adds	r7, r4, r7
 8021ae8:	44a0      	add	r8, r4
 8021aea:	a80e      	add	r0, sp, #56	; 0x38
 8021aec:	9602      	str	r6, [sp, #8]
 8021aee:	f8cd a004 	str.w	sl, [sp, #4]
 8021af2:	9707      	str	r7, [sp, #28]
 8021af4:	f8cd 8020 	str.w	r8, [sp, #32]
 8021af8:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 8021afc:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8021b00:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 8021b04:	f8ad 803e 	strh.w	r8, [sp, #62]	; 0x3e
 8021b08:	f7f4 fef8 	bl	80168fc <WM__InitIVRSearch>
 8021b0c:	2800      	cmp	r0, #0
 8021b0e:	f000 8098 	beq.w	8021c42 <GUI_DrawGradientH+0x17a>
 8021b12:	9e01      	ldr	r6, [sp, #4]
 8021b14:	9c02      	ldr	r4, [sp, #8]
 8021b16:	1b35      	subs	r5, r6, r4
 8021b18:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021b1a:	b2f4      	uxtb	r4, r6
 8021b1c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021b1e:	fa5f fe86 	uxtb.w	lr, r6
 8021b22:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021b24:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8021b28:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021b2a:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8021b2e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021b30:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8021b34:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021b36:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8021b3a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8021b3e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021b40:	105b      	asrs	r3, r3, #1
 8021b42:	0e32      	lsrs	r2, r6, #24
 8021b44:	ebc4 0e0e 	rsb	lr, r4, lr
 8021b48:	fb05 3604 	mla	r6, r5, r4, r3
 8021b4c:	fb05 3400 	mla	r4, r5, r0, r3
 8021b50:	940b      	str	r4, [sp, #44]	; 0x2c
 8021b52:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021b54:	960a      	str	r6, [sp, #40]	; 0x28
 8021b56:	1a3f      	subs	r7, r7, r0
 8021b58:	fb05 3601 	mla	r6, r5, r1, r3
 8021b5c:	ebc1 0c0c 	rsb	ip, r1, ip
 8021b60:	fb05 3302 	mla	r3, r5, r2, r3
 8021b64:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 8021b68:	f8cd e018 	str.w	lr, [sp, #24]
 8021b6c:	9703      	str	r7, [sp, #12]
 8021b6e:	960c      	str	r6, [sp, #48]	; 0x30
 8021b70:	f8cd c010 	str.w	ip, [sp, #16]
 8021b74:	930d      	str	r3, [sp, #52]	; 0x34
 8021b76:	9205      	str	r2, [sp, #20]
 8021b78:	f7fa fd74 	bl	801c664 <GUI_GetColor>
 8021b7c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021b7e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021b80:	9009      	str	r0, [sp, #36]	; 0x24
 8021b82:	42a6      	cmp	r6, r4
 8021b84:	d070      	beq.n	8021c68 <GUI_DrawGradientH+0x1a0>
 8021b86:	2d00      	cmp	r5, #0
 8021b88:	d057      	beq.n	8021c3a <GUI_DrawGradientH+0x172>
 8021b8a:	9e02      	ldr	r6, [sp, #8]
 8021b8c:	9c01      	ldr	r4, [sp, #4]
 8021b8e:	42a6      	cmp	r6, r4
 8021b90:	dc62      	bgt.n	8021c58 <GUI_DrawGradientH+0x190>
 8021b92:	4634      	mov	r4, r6
 8021b94:	f04f 0b01 	mov.w	fp, #1
 8021b98:	ae0a      	add	r6, sp, #40	; 0x28
 8021b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b9c:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 8021ba0:	46da      	mov	sl, fp
 8021ba2:	e006      	b.n	8021bb2 <GUI_DrawGradientH+0xea>
 8021ba4:	f10a 0a01 	add.w	sl, sl, #1
 8021ba8:	9801      	ldr	r0, [sp, #4]
 8021baa:	3401      	adds	r4, #1
 8021bac:	42a0      	cmp	r0, r4
 8021bae:	db2f      	blt.n	8021c10 <GUI_DrawGradientH+0x148>
 8021bb0:	465a      	mov	r2, fp
 8021bb2:	9b04      	ldr	r3, [sp, #16]
 8021bb4:	fb98 f1f5 	sdiv	r1, r8, r5
 8021bb8:	4498      	add	r8, r3
 8021bba:	9b05      	ldr	r3, [sp, #20]
 8021bbc:	fb99 fcf5 	sdiv	ip, r9, r5
 8021bc0:	4499      	add	r9, r3
 8021bc2:	9b06      	ldr	r3, [sp, #24]
 8021bc4:	fb96 f0f5 	sdiv	r0, r6, r5
 8021bc8:	441e      	add	r6, r3
 8021bca:	9b03      	ldr	r3, [sp, #12]
 8021bcc:	fb97 fef5 	sdiv	lr, r7, r5
 8021bd0:	441f      	add	r7, r3
 8021bd2:	9b02      	ldr	r3, [sp, #8]
 8021bd4:	0409      	lsls	r1, r1, #16
 8021bd6:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 8021bda:	42a3      	cmp	r3, r4
 8021bdc:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 8021be0:	ea41 0b0c 	orr.w	fp, r1, ip
 8021be4:	4610      	mov	r0, r2
 8021be6:	dadf      	bge.n	8021ba8 <GUI_DrawGradientH+0xe0>
 8021be8:	4593      	cmp	fp, r2
 8021bea:	d0db      	beq.n	8021ba4 <GUI_DrawGradientH+0xdc>
 8021bec:	f7f8 fb1e 	bl	801a22c <LCD_SetColor>
 8021bf0:	f1ba 0f01 	cmp.w	sl, #1
 8021bf4:	d02a      	beq.n	8021c4c <GUI_DrawGradientH+0x184>
 8021bf6:	ebca 0004 	rsb	r0, sl, r4
 8021bfa:	1e62      	subs	r2, r4, #1
 8021bfc:	9907      	ldr	r1, [sp, #28]
 8021bfe:	9b08      	ldr	r3, [sp, #32]
 8021c00:	f7f7 ff64 	bl	8019acc <LCD_FillRect>
 8021c04:	9801      	ldr	r0, [sp, #4]
 8021c06:	3401      	adds	r4, #1
 8021c08:	42a0      	cmp	r0, r4
 8021c0a:	f04f 0a01 	mov.w	sl, #1
 8021c0e:	dacf      	bge.n	8021bb0 <GUI_DrawGradientH+0xe8>
 8021c10:	4653      	mov	r3, sl
 8021c12:	46da      	mov	sl, fp
 8021c14:	4650      	mov	r0, sl
 8021c16:	469b      	mov	fp, r3
 8021c18:	f7f8 fb08 	bl	801a22c <LCD_SetColor>
 8021c1c:	f1bb 0f01 	cmp.w	fp, #1
 8021c20:	d01c      	beq.n	8021c5c <GUI_DrawGradientH+0x194>
 8021c22:	9c01      	ldr	r4, [sp, #4]
 8021c24:	9907      	ldr	r1, [sp, #28]
 8021c26:	9b08      	ldr	r3, [sp, #32]
 8021c28:	ebcb 0004 	rsb	r0, fp, r4
 8021c2c:	3001      	adds	r0, #1
 8021c2e:	4622      	mov	r2, r4
 8021c30:	f7f7 ff4c 	bl	8019acc <LCD_FillRect>
 8021c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c36:	f7f8 faf9 	bl	801a22c <LCD_SetColor>
 8021c3a:	f7f4 fd39 	bl	80166b0 <WM__GetNextIVR>
 8021c3e:	2800      	cmp	r0, #0
 8021c40:	d19a      	bne.n	8021b78 <GUI_DrawGradientH+0xb0>
 8021c42:	f7f9 fb71 	bl	801b328 <GUI_Unlock>
 8021c46:	b011      	add	sp, #68	; 0x44
 8021c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c4c:	1e60      	subs	r0, r4, #1
 8021c4e:	9907      	ldr	r1, [sp, #28]
 8021c50:	9a08      	ldr	r2, [sp, #32]
 8021c52:	f7f7 ff13 	bl	8019a7c <LCD_DrawVLine>
 8021c56:	e7a7      	b.n	8021ba8 <GUI_DrawGradientH+0xe0>
 8021c58:	f7f8 fae8 	bl	801a22c <LCD_SetColor>
 8021c5c:	9801      	ldr	r0, [sp, #4]
 8021c5e:	9907      	ldr	r1, [sp, #28]
 8021c60:	9a08      	ldr	r2, [sp, #32]
 8021c62:	f7f7 ff0b 	bl	8019a7c <LCD_DrawVLine>
 8021c66:	e7e5      	b.n	8021c34 <GUI_DrawGradientH+0x16c>
 8021c68:	4630      	mov	r0, r6
 8021c6a:	f7f8 fadf 	bl	801a22c <LCD_SetColor>
 8021c6e:	9802      	ldr	r0, [sp, #8]
 8021c70:	9907      	ldr	r1, [sp, #28]
 8021c72:	9a01      	ldr	r2, [sp, #4]
 8021c74:	9b08      	ldr	r3, [sp, #32]
 8021c76:	f7f7 ff29 	bl	8019acc <LCD_FillRect>
 8021c7a:	e7db      	b.n	8021c34 <GUI_DrawGradientH+0x16c>
 8021c7c:	2000027c 	.word	0x2000027c

08021c80 <GUIMONO_DispChar>:
 8021c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c84:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8021dd4 <GUIMONO_DispChar+0x154>
 8021c88:	f8db 2000 	ldr.w	r2, [fp]
 8021c8c:	69d1      	ldr	r1, [r2, #28]
 8021c8e:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 8021c92:	69cc      	ldr	r4, [r1, #28]
 8021c94:	8c97      	ldrh	r7, [r2, #36]	; 0x24
 8021c96:	89a3      	ldrh	r3, [r4, #12]
 8021c98:	4283      	cmp	r3, r0
 8021c9a:	b08d      	sub	sp, #52	; 0x34
 8021c9c:	f200 8083 	bhi.w	8021da6 <GUIMONO_DispChar+0x126>
 8021ca0:	89e5      	ldrh	r5, [r4, #14]
 8021ca2:	4285      	cmp	r5, r0
 8021ca4:	d37f      	bcc.n	8021da6 <GUIMONO_DispChar+0x126>
 8021ca6:	1ac3      	subs	r3, r0, r3
 8021ca8:	6826      	ldr	r6, [r4, #0]
 8021caa:	f04f 30ff 	mov.w	r0, #4294967295
 8021cae:	900a      	str	r0, [sp, #40]	; 0x28
 8021cb0:	1c58      	adds	r0, r3, #1
 8021cb2:	d071      	beq.n	8021d98 <GUIMONO_DispChar+0x118>
 8021cb4:	f8b2 a02a 	ldrh.w	sl, [r2, #42]	; 0x2a
 8021cb8:	7e0d      	ldrb	r5, [r1, #24]
 8021cba:	7ca2      	ldrb	r2, [r4, #18]
 8021cbc:	f894 8010 	ldrb.w	r8, [r4, #16]
 8021cc0:	9307      	str	r3, [sp, #28]
 8021cc2:	fa0f f18a 	sxth.w	r1, sl
 8021cc6:	fb15 f202 	smulbb	r2, r5, r2
 8021cca:	4608      	mov	r0, r1
 8021ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8021cce:	9208      	str	r2, [sp, #32]
 8021cd0:	f7f7 fe74 	bl	80199bc <LCD_SetDrawMode>
 8021cd4:	f8db 2000 	ldr.w	r2, [fp]
 8021cd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8021cda:	69d1      	ldr	r1, [r2, #28]
 8021cdc:	9b07      	ldr	r3, [sp, #28]
 8021cde:	7e88      	ldrb	r0, [r1, #26]
 8021ce0:	9000      	str	r0, [sp, #0]
 8021ce2:	7ec9      	ldrb	r1, [r1, #27]
 8021ce4:	9101      	str	r1, [sp, #4]
 8021ce6:	2001      	movs	r0, #1
 8021ce8:	9908      	ldr	r1, [sp, #32]
 8021cea:	9002      	str	r0, [sp, #8]
 8021cec:	fb01 6303 	mla	r3, r1, r3, r6
 8021cf0:	7ca1      	ldrb	r1, [r4, #18]
 8021cf2:	9103      	str	r1, [sp, #12]
 8021cf4:	9304      	str	r3, [sp, #16]
 8021cf6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8021cf8:	9305      	str	r3, [sp, #20]
 8021cfa:	fa0f f989 	sxth.w	r9, r9
 8021cfe:	b23f      	sxth	r7, r7
 8021d00:	4642      	mov	r2, r8
 8021d02:	4648      	mov	r0, r9
 8021d04:	4639      	mov	r1, r7
 8021d06:	462b      	mov	r3, r5
 8021d08:	f7f8 f82e 	bl	8019d68 <LCD_DrawBitmap>
 8021d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021d0e:	3201      	adds	r2, #1
 8021d10:	d01c      	beq.n	8021d4c <GUIMONO_DispChar+0xcc>
 8021d12:	f04a 0002 	orr.w	r0, sl, #2
 8021d16:	b200      	sxth	r0, r0
 8021d18:	f7f7 fe50 	bl	80199bc <LCD_SetDrawMode>
 8021d1c:	482d      	ldr	r0, [pc, #180]	; (8021dd4 <GUIMONO_DispChar+0x154>)
 8021d1e:	6803      	ldr	r3, [r0, #0]
 8021d20:	9808      	ldr	r0, [sp, #32]
 8021d22:	69da      	ldr	r2, [r3, #28]
 8021d24:	7e91      	ldrb	r1, [r2, #26]
 8021d26:	9100      	str	r1, [sp, #0]
 8021d28:	7ed2      	ldrb	r2, [r2, #27]
 8021d2a:	9201      	str	r2, [sp, #4]
 8021d2c:	2101      	movs	r1, #1
 8021d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021d30:	9102      	str	r1, [sp, #8]
 8021d32:	fb00 6602 	mla	r6, r0, r2, r6
 8021d36:	7ca2      	ldrb	r2, [r4, #18]
 8021d38:	9203      	str	r2, [sp, #12]
 8021d3a:	9604      	str	r6, [sp, #16]
 8021d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d3e:	9305      	str	r3, [sp, #20]
 8021d40:	4648      	mov	r0, r9
 8021d42:	462b      	mov	r3, r5
 8021d44:	4639      	mov	r1, r7
 8021d46:	4642      	mov	r2, r8
 8021d48:	f7f8 f80e 	bl	8019d68 <LCD_DrawBitmap>
 8021d4c:	f8db 3000 	ldr.w	r3, [fp]
 8021d50:	4d20      	ldr	r5, [pc, #128]	; (8021dd4 <GUIMONO_DispChar+0x154>)
 8021d52:	69db      	ldr	r3, [r3, #28]
 8021d54:	7e5a      	ldrb	r2, [r3, #25]
 8021d56:	7e1b      	ldrb	r3, [r3, #24]
 8021d58:	429a      	cmp	r2, r3
 8021d5a:	d915      	bls.n	8021d88 <GUIMONO_DispChar+0x108>
 8021d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021d5e:	2902      	cmp	r1, #2
 8021d60:	d012      	beq.n	8021d88 <GUIMONO_DispChar+0x108>
 8021d62:	f08a 0004 	eor.w	r0, sl, #4
 8021d66:	b200      	sxth	r0, r0
 8021d68:	f7f7 fe28 	bl	80199bc <LCD_SetDrawMode>
 8021d6c:	682b      	ldr	r3, [r5, #0]
 8021d6e:	69db      	ldr	r3, [r3, #28]
 8021d70:	7e9a      	ldrb	r2, [r3, #26]
 8021d72:	7e1d      	ldrb	r5, [r3, #24]
 8021d74:	7ed9      	ldrb	r1, [r3, #27]
 8021d76:	7e5b      	ldrb	r3, [r3, #25]
 8021d78:	4648      	mov	r0, r9
 8021d7a:	fb02 9208 	mla	r2, r2, r8, r9
 8021d7e:	fb05 7101 	mla	r1, r5, r1, r7
 8021d82:	443b      	add	r3, r7
 8021d84:	f7f7 fea2 	bl	8019acc <LCD_FillRect>
 8021d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021d8a:	b2d0      	uxtb	r0, r2
 8021d8c:	f7f7 fe16 	bl	80199bc <LCD_SetDrawMode>
 8021d90:	f8db 2000 	ldr.w	r2, [fp]
 8021d94:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 8021d98:	7c63      	ldrb	r3, [r4, #17]
 8021d9a:	4499      	add	r9, r3
 8021d9c:	f8a2 9022 	strh.w	r9, [r2, #34]	; 0x22
 8021da0:	b00d      	add	sp, #52	; 0x34
 8021da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021da6:	68a5      	ldr	r5, [r4, #8]
 8021da8:	6866      	ldr	r6, [r4, #4]
 8021daa:	2d00      	cmp	r5, #0
 8021dac:	d0f4      	beq.n	8021d98 <GUIMONO_DispChar+0x118>
 8021dae:	882b      	ldrh	r3, [r5, #0]
 8021db0:	4298      	cmp	r0, r3
 8021db2:	d3f1      	bcc.n	8021d98 <GUIMONO_DispChar+0x118>
 8021db4:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8021db8:	4580      	cmp	r8, r0
 8021dba:	d3ed      	bcc.n	8021d98 <GUIMONO_DispChar+0x118>
 8021dbc:	1ac3      	subs	r3, r0, r3
 8021dbe:	686d      	ldr	r5, [r5, #4]
 8021dc0:	b29b      	uxth	r3, r3
 8021dc2:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8021dc6:	f935 3023 	ldrsh.w	r3, [r5, r3, lsl #2]
 8021dca:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8021dce:	900a      	str	r0, [sp, #40]	; 0x28
 8021dd0:	e76e      	b.n	8021cb0 <GUIMONO_DispChar+0x30>
 8021dd2:	bf00      	nop
 8021dd4:	2000027c 	.word	0x2000027c

08021dd8 <GUIMONO_GetCharDistX>:
 8021dd8:	4b04      	ldr	r3, [pc, #16]	; (8021dec <GUIMONO_GetCharDistX+0x14>)
 8021dda:	681b      	ldr	r3, [r3, #0]
 8021ddc:	69db      	ldr	r3, [r3, #28]
 8021dde:	69db      	ldr	r3, [r3, #28]
 8021de0:	b109      	cbz	r1, 8021de6 <GUIMONO_GetCharDistX+0xe>
 8021de2:	7c1a      	ldrb	r2, [r3, #16]
 8021de4:	600a      	str	r2, [r1, #0]
 8021de6:	7c58      	ldrb	r0, [r3, #17]
 8021de8:	4770      	bx	lr
 8021dea:	bf00      	nop
 8021dec:	2000027c 	.word	0x2000027c

08021df0 <GUIMONO_GetFontInfo>:
 8021df0:	2302      	movs	r3, #2
 8021df2:	800b      	strh	r3, [r1, #0]
 8021df4:	4770      	bx	lr
 8021df6:	bf00      	nop

08021df8 <GUIMONO_IsInFont>:
 8021df8:	69c3      	ldr	r3, [r0, #28]
 8021dfa:	899a      	ldrh	r2, [r3, #12]
 8021dfc:	428a      	cmp	r2, r1
 8021dfe:	d802      	bhi.n	8021e06 <GUIMONO_IsInFont+0xe>
 8021e00:	89da      	ldrh	r2, [r3, #14]
 8021e02:	428a      	cmp	r2, r1
 8021e04:	d211      	bcs.n	8021e2a <GUIMONO_IsInFont+0x32>
 8021e06:	6898      	ldr	r0, [r3, #8]
 8021e08:	b118      	cbz	r0, 8021e12 <GUIMONO_IsInFont+0x1a>
 8021e0a:	8803      	ldrh	r3, [r0, #0]
 8021e0c:	4299      	cmp	r1, r3
 8021e0e:	d201      	bcs.n	8021e14 <GUIMONO_IsInFont+0x1c>
 8021e10:	2000      	movs	r0, #0
 8021e12:	4770      	bx	lr
 8021e14:	8842      	ldrh	r2, [r0, #2]
 8021e16:	428a      	cmp	r2, r1
 8021e18:	d3fa      	bcc.n	8021e10 <GUIMONO_IsInFont+0x18>
 8021e1a:	1ac9      	subs	r1, r1, r3
 8021e1c:	6842      	ldr	r2, [r0, #4]
 8021e1e:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8021e22:	43c0      	mvns	r0, r0
 8021e24:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8021e28:	4770      	bx	lr
 8021e2a:	2001      	movs	r0, #1
 8021e2c:	4770      	bx	lr
 8021e2e:	bf00      	nop

08021e30 <LCD_Index2Color_888>:
 8021e30:	b2c2      	uxtb	r2, r0
 8021e32:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8021e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021e3e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e42:	4318      	orrs	r0, r3
 8021e44:	4770      	bx	lr
 8021e46:	bf00      	nop

08021e48 <LCD_Index2Color_8888>:
 8021e48:	43c3      	mvns	r3, r0
 8021e4a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021e4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8021e52:	4313      	orrs	r3, r2
 8021e54:	b2c2      	uxtb	r2, r0
 8021e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021e5a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e5e:	4318      	orrs	r0, r3
 8021e60:	4770      	bx	lr
 8021e62:	bf00      	nop

08021e64 <_GetIndexMask_0>:
 8021e64:	b508      	push	{r3, lr}
 8021e66:	f7f7 fc7b 	bl	8019760 <LCD_GetNumColors>
 8021e6a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021e6e:	d014      	beq.n	8021e9a <_GetIndexMask_0+0x36>
 8021e70:	287f      	cmp	r0, #127	; 0x7f
 8021e72:	d80e      	bhi.n	8021e92 <_GetIndexMask_0+0x2e>
 8021e74:	283f      	cmp	r0, #63	; 0x3f
 8021e76:	d812      	bhi.n	8021e9e <_GetIndexMask_0+0x3a>
 8021e78:	281f      	cmp	r0, #31
 8021e7a:	d80c      	bhi.n	8021e96 <_GetIndexMask_0+0x32>
 8021e7c:	280f      	cmp	r0, #15
 8021e7e:	d810      	bhi.n	8021ea2 <_GetIndexMask_0+0x3e>
 8021e80:	2807      	cmp	r0, #7
 8021e82:	d812      	bhi.n	8021eaa <_GetIndexMask_0+0x46>
 8021e84:	2803      	cmp	r0, #3
 8021e86:	d80e      	bhi.n	8021ea6 <_GetIndexMask_0+0x42>
 8021e88:	2801      	cmp	r0, #1
 8021e8a:	bf94      	ite	ls
 8021e8c:	2000      	movls	r0, #0
 8021e8e:	2001      	movhi	r0, #1
 8021e90:	bd08      	pop	{r3, pc}
 8021e92:	207f      	movs	r0, #127	; 0x7f
 8021e94:	bd08      	pop	{r3, pc}
 8021e96:	201f      	movs	r0, #31
 8021e98:	bd08      	pop	{r3, pc}
 8021e9a:	20ff      	movs	r0, #255	; 0xff
 8021e9c:	bd08      	pop	{r3, pc}
 8021e9e:	203f      	movs	r0, #63	; 0x3f
 8021ea0:	bd08      	pop	{r3, pc}
 8021ea2:	200f      	movs	r0, #15
 8021ea4:	bd08      	pop	{r3, pc}
 8021ea6:	2003      	movs	r0, #3
 8021ea8:	bd08      	pop	{r3, pc}
 8021eaa:	2007      	movs	r0, #7
 8021eac:	bd08      	pop	{r3, pc}
 8021eae:	bf00      	nop

08021eb0 <_Index2Color_0>:
 8021eb0:	b538      	push	{r3, r4, r5, lr}
 8021eb2:	4604      	mov	r4, r0
 8021eb4:	f7f7 fc54 	bl	8019760 <LCD_GetNumColors>
 8021eb8:	4605      	mov	r5, r0
 8021eba:	f7f7 fc71 	bl	80197a0 <LCD_GetPalette>
 8021ebe:	42a5      	cmp	r5, r4
 8021ec0:	d903      	bls.n	8021eca <_Index2Color_0+0x1a>
 8021ec2:	b118      	cbz	r0, 8021ecc <_Index2Color_0+0x1c>
 8021ec4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8021ec8:	bd38      	pop	{r3, r4, r5, pc}
 8021eca:	2000      	movs	r0, #0
 8021ecc:	bd38      	pop	{r3, r4, r5, pc}
 8021ece:	bf00      	nop

08021ed0 <_Color2Index_0>:
 8021ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ed4:	4605      	mov	r5, r0
 8021ed6:	f7f7 fc43 	bl	8019760 <LCD_GetNumColors>
 8021eda:	4606      	mov	r6, r0
 8021edc:	f7f7 fc60 	bl	80197a0 <LCD_GetPalette>
 8021ee0:	b308      	cbz	r0, 8021f26 <_Color2Index_0+0x56>
 8021ee2:	1f07      	subs	r7, r0, #4
 8021ee4:	463a      	mov	r2, r7
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	e002      	b.n	8021ef0 <_Color2Index_0+0x20>
 8021eea:	3301      	adds	r3, #1
 8021eec:	429e      	cmp	r6, r3
 8021eee:	dd06      	ble.n	8021efe <_Color2Index_0+0x2e>
 8021ef0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8021ef4:	42a9      	cmp	r1, r5
 8021ef6:	d1f8      	bne.n	8021eea <_Color2Index_0+0x1a>
 8021ef8:	4618      	mov	r0, r3
 8021efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021efe:	f04f 0900 	mov.w	r9, #0
 8021f02:	464c      	mov	r4, r9
 8021f04:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8021f08:	4628      	mov	r0, r5
 8021f0a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8021f0e:	f7fa fb6f 	bl	801c5f0 <GUI_CalcColorDist>
 8021f12:	4580      	cmp	r8, r0
 8021f14:	bf88      	it	hi
 8021f16:	46a1      	movhi	r9, r4
 8021f18:	f104 0401 	add.w	r4, r4, #1
 8021f1c:	bf88      	it	hi
 8021f1e:	4680      	movhi	r8, r0
 8021f20:	42a6      	cmp	r6, r4
 8021f22:	dcf1      	bgt.n	8021f08 <_Color2Index_0+0x38>
 8021f24:	4648      	mov	r0, r9
 8021f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f2a:	bf00      	nop

08021f2c <_DrawUpRect>:
 8021f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f30:	4f1b      	ldr	r7, [pc, #108]	; (8021fa0 <_DrawUpRect+0x74>)
 8021f32:	8806      	ldrh	r6, [r0, #0]
 8021f34:	8844      	ldrh	r4, [r0, #2]
 8021f36:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8021f3a:	88c5      	ldrh	r5, [r0, #6]
 8021f3c:	6838      	ldr	r0, [r7, #0]
 8021f3e:	b22d      	sxth	r5, r5
 8021f40:	fa0f f888 	sxth.w	r8, r8
 8021f44:	b236      	sxth	r6, r6
 8021f46:	b224      	sxth	r4, r4
 8021f48:	f7f8 f970 	bl	801a22c <LCD_SetColor>
 8021f4c:	462b      	mov	r3, r5
 8021f4e:	4621      	mov	r1, r4
 8021f50:	4642      	mov	r2, r8
 8021f52:	4630      	mov	r0, r6
 8021f54:	f7fb ffb4 	bl	801dec0 <GUI_DrawRect>
 8021f58:	3601      	adds	r6, #1
 8021f5a:	3401      	adds	r4, #1
 8021f5c:	6938      	ldr	r0, [r7, #16]
 8021f5e:	f7f8 f965 	bl	801a22c <LCD_SetColor>
 8021f62:	f1a5 0902 	sub.w	r9, r5, #2
 8021f66:	4620      	mov	r0, r4
 8021f68:	4631      	mov	r1, r6
 8021f6a:	f1a8 0202 	sub.w	r2, r8, #2
 8021f6e:	f7f9 fb51 	bl	801b614 <GUI_DrawHLine>
 8021f72:	4621      	mov	r1, r4
 8021f74:	464a      	mov	r2, r9
 8021f76:	4630      	mov	r0, r6
 8021f78:	f7f9 fba2 	bl	801b6c0 <GUI_DrawVLine>
 8021f7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8021f80:	6878      	ldr	r0, [r7, #4]
 8021f82:	f7f8 f953 	bl	801a22c <LCD_SetColor>
 8021f86:	4631      	mov	r1, r6
 8021f88:	1e68      	subs	r0, r5, #1
 8021f8a:	4642      	mov	r2, r8
 8021f8c:	f7f9 fb42 	bl	801b614 <GUI_DrawHLine>
 8021f90:	4640      	mov	r0, r8
 8021f92:	4621      	mov	r1, r4
 8021f94:	464a      	mov	r2, r9
 8021f96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f9a:	f7f9 bb91 	b.w	801b6c0 <GUI_DrawVLine>
 8021f9e:	bf00      	nop
 8021fa0:	200003f8 	.word	0x200003f8

08021fa4 <_DrawDownRect>:
 8021fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fa8:	4c27      	ldr	r4, [pc, #156]	; (8022048 <_DrawDownRect+0xa4>)
 8021faa:	8805      	ldrh	r5, [r0, #0]
 8021fac:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8021fb0:	8887      	ldrh	r7, [r0, #4]
 8021fb2:	88c6      	ldrh	r6, [r0, #6]
 8021fb4:	6820      	ldr	r0, [r4, #0]
 8021fb6:	b083      	sub	sp, #12
 8021fb8:	f7f8 f938 	bl	801a22c <LCD_SetColor>
 8021fbc:	b22d      	sxth	r5, r5
 8021fbe:	b23f      	sxth	r7, r7
 8021fc0:	fa0f fb8b 	sxth.w	fp, fp
 8021fc4:	68a0      	ldr	r0, [r4, #8]
 8021fc6:	f7f8 f931 	bl	801a22c <LCD_SetColor>
 8021fca:	b236      	sxth	r6, r6
 8021fcc:	f10b 0901 	add.w	r9, fp, #1
 8021fd0:	4658      	mov	r0, fp
 8021fd2:	4629      	mov	r1, r5
 8021fd4:	463a      	mov	r2, r7
 8021fd6:	f7f9 fb1d 	bl	801b614 <GUI_DrawHLine>
 8021fda:	4649      	mov	r1, r9
 8021fdc:	4632      	mov	r2, r6
 8021fde:	4628      	mov	r0, r5
 8021fe0:	f7f9 fb6e 	bl	801b6c0 <GUI_DrawVLine>
 8021fe4:	f105 0a01 	add.w	sl, r5, #1
 8021fe8:	1e7b      	subs	r3, r7, #1
 8021fea:	6820      	ldr	r0, [r4, #0]
 8021fec:	9301      	str	r3, [sp, #4]
 8021fee:	f106 38ff 	add.w	r8, r6, #4294967295
 8021ff2:	f7f8 f91b 	bl	801a22c <LCD_SetColor>
 8021ff6:	f10b 0b02 	add.w	fp, fp, #2
 8021ffa:	4648      	mov	r0, r9
 8021ffc:	4651      	mov	r1, sl
 8021ffe:	9a01      	ldr	r2, [sp, #4]
 8022000:	f7f9 fb08 	bl	801b614 <GUI_DrawHLine>
 8022004:	4659      	mov	r1, fp
 8022006:	4642      	mov	r2, r8
 8022008:	4650      	mov	r0, sl
 802200a:	f7f9 fb59 	bl	801b6c0 <GUI_DrawVLine>
 802200e:	6920      	ldr	r0, [r4, #16]
 8022010:	f7f8 f90c 	bl	801a22c <LCD_SetColor>
 8022014:	4630      	mov	r0, r6
 8022016:	4651      	mov	r1, sl
 8022018:	463a      	mov	r2, r7
 802201a:	f7f9 fafb 	bl	801b614 <GUI_DrawHLine>
 802201e:	4649      	mov	r1, r9
 8022020:	4632      	mov	r2, r6
 8022022:	4638      	mov	r0, r7
 8022024:	f7f9 fb4c 	bl	801b6c0 <GUI_DrawVLine>
 8022028:	68e0      	ldr	r0, [r4, #12]
 802202a:	f7f8 f8ff 	bl	801a22c <LCD_SetColor>
 802202e:	4640      	mov	r0, r8
 8022030:	1ca9      	adds	r1, r5, #2
 8022032:	9a01      	ldr	r2, [sp, #4]
 8022034:	f7f9 faee 	bl	801b614 <GUI_DrawHLine>
 8022038:	9801      	ldr	r0, [sp, #4]
 802203a:	4659      	mov	r1, fp
 802203c:	4642      	mov	r2, r8
 802203e:	b003      	add	sp, #12
 8022040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022044:	f7f9 bb3c 	b.w	801b6c0 <GUI_DrawVLine>
 8022048:	200003f8 	.word	0x200003f8

0802204c <_DrawDown>:
 802204c:	b500      	push	{lr}
 802204e:	b083      	sub	sp, #12
 8022050:	4668      	mov	r0, sp
 8022052:	f7f1 fe8f 	bl	8013d74 <WM_GetClientRect>
 8022056:	4668      	mov	r0, sp
 8022058:	f7ff ffa4 	bl	8021fa4 <_DrawDownRect>
 802205c:	b003      	add	sp, #12
 802205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022062:	bf00      	nop

08022064 <WIDGET_EFFECT_3D_DrawUp>:
 8022064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022068:	b083      	sub	sp, #12
 802206a:	4668      	mov	r0, sp
 802206c:	f7f1 fe82 	bl	8013d74 <WM_GetClientRect>
 8022070:	4f1d      	ldr	r7, [pc, #116]	; (80220e8 <WIDGET_EFFECT_3D_DrawUp+0x84>)
 8022072:	f8bd 6000 	ldrh.w	r6, [sp]
 8022076:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 802207a:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 802207e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8022082:	6838      	ldr	r0, [r7, #0]
 8022084:	b22d      	sxth	r5, r5
 8022086:	fa0f f888 	sxth.w	r8, r8
 802208a:	b236      	sxth	r6, r6
 802208c:	b224      	sxth	r4, r4
 802208e:	f7f8 f8cd 	bl	801a22c <LCD_SetColor>
 8022092:	462b      	mov	r3, r5
 8022094:	4621      	mov	r1, r4
 8022096:	4642      	mov	r2, r8
 8022098:	4630      	mov	r0, r6
 802209a:	f7fb ff11 	bl	801dec0 <GUI_DrawRect>
 802209e:	3601      	adds	r6, #1
 80220a0:	3401      	adds	r4, #1
 80220a2:	6938      	ldr	r0, [r7, #16]
 80220a4:	f7f8 f8c2 	bl	801a22c <LCD_SetColor>
 80220a8:	f1a5 0902 	sub.w	r9, r5, #2
 80220ac:	4620      	mov	r0, r4
 80220ae:	4631      	mov	r1, r6
 80220b0:	f1a8 0202 	sub.w	r2, r8, #2
 80220b4:	f7f9 faae 	bl	801b614 <GUI_DrawHLine>
 80220b8:	4621      	mov	r1, r4
 80220ba:	464a      	mov	r2, r9
 80220bc:	4630      	mov	r0, r6
 80220be:	f7f9 faff 	bl	801b6c0 <GUI_DrawVLine>
 80220c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80220c6:	6878      	ldr	r0, [r7, #4]
 80220c8:	f7f8 f8b0 	bl	801a22c <LCD_SetColor>
 80220cc:	4631      	mov	r1, r6
 80220ce:	1e68      	subs	r0, r5, #1
 80220d0:	4642      	mov	r2, r8
 80220d2:	f7f9 fa9f 	bl	801b614 <GUI_DrawHLine>
 80220d6:	4640      	mov	r0, r8
 80220d8:	4621      	mov	r1, r4
 80220da:	464a      	mov	r2, r9
 80220dc:	f7f9 faf0 	bl	801b6c0 <GUI_DrawVLine>
 80220e0:	b003      	add	sp, #12
 80220e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220e6:	bf00      	nop
 80220e8:	200003f8 	.word	0x200003f8

080220ec <_DrawGraspH>:
 80220ec:	4603      	mov	r3, r0
 80220ee:	b570      	push	{r4, r5, r6, lr}
 80220f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80220f4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80220f8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80220fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022100:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8022102:	1b95      	subs	r5, r2, r6
 8022104:	3503      	adds	r5, #3
 8022106:	441c      	add	r4, r3
 8022108:	10ad      	asrs	r5, r5, #2
 802210a:	442e      	add	r6, r5
 802210c:	1064      	asrs	r4, r4, #1
 802210e:	1b55      	subs	r5, r2, r5
 8022110:	f7fa fbb0 	bl	801c874 <GUI_SetColor>
 8022114:	4620      	mov	r0, r4
 8022116:	4631      	mov	r1, r6
 8022118:	462a      	mov	r2, r5
 802211a:	f7f9 fad1 	bl	801b6c0 <GUI_DrawVLine>
 802211e:	4631      	mov	r1, r6
 8022120:	462a      	mov	r2, r5
 8022122:	1ca0      	adds	r0, r4, #2
 8022124:	f7f9 facc 	bl	801b6c0 <GUI_DrawVLine>
 8022128:	4631      	mov	r1, r6
 802212a:	462a      	mov	r2, r5
 802212c:	1d20      	adds	r0, r4, #4
 802212e:	f7f9 fac7 	bl	801b6c0 <GUI_DrawVLine>
 8022132:	4631      	mov	r1, r6
 8022134:	462a      	mov	r2, r5
 8022136:	1ea0      	subs	r0, r4, #2
 8022138:	f7f9 fac2 	bl	801b6c0 <GUI_DrawVLine>
 802213c:	4631      	mov	r1, r6
 802213e:	462a      	mov	r2, r5
 8022140:	1f20      	subs	r0, r4, #4
 8022142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022146:	f7f9 babb 	b.w	801b6c0 <GUI_DrawVLine>
 802214a:	bf00      	nop

0802214c <_DrawGraspV>:
 802214c:	4603      	mov	r3, r0
 802214e:	b570      	push	{r4, r5, r6, lr}
 8022150:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8022154:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022158:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 802215c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022160:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8022162:	1b95      	subs	r5, r2, r6
 8022164:	3503      	adds	r5, #3
 8022166:	441c      	add	r4, r3
 8022168:	10ad      	asrs	r5, r5, #2
 802216a:	442e      	add	r6, r5
 802216c:	1064      	asrs	r4, r4, #1
 802216e:	1b55      	subs	r5, r2, r5
 8022170:	f7fa fb80 	bl	801c874 <GUI_SetColor>
 8022174:	4620      	mov	r0, r4
 8022176:	4631      	mov	r1, r6
 8022178:	462a      	mov	r2, r5
 802217a:	f7f9 fa4b 	bl	801b614 <GUI_DrawHLine>
 802217e:	4631      	mov	r1, r6
 8022180:	462a      	mov	r2, r5
 8022182:	1ca0      	adds	r0, r4, #2
 8022184:	f7f9 fa46 	bl	801b614 <GUI_DrawHLine>
 8022188:	4631      	mov	r1, r6
 802218a:	462a      	mov	r2, r5
 802218c:	1d20      	adds	r0, r4, #4
 802218e:	f7f9 fa41 	bl	801b614 <GUI_DrawHLine>
 8022192:	4631      	mov	r1, r6
 8022194:	462a      	mov	r2, r5
 8022196:	1ea0      	subs	r0, r4, #2
 8022198:	f7f9 fa3c 	bl	801b614 <GUI_DrawHLine>
 802219c:	4631      	mov	r1, r6
 802219e:	462a      	mov	r2, r5
 80221a0:	1f20      	subs	r0, r4, #4
 80221a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221a6:	f7f9 ba35 	b.w	801b614 <GUI_DrawHLine>
 80221aa:	bf00      	nop

080221ac <_DrawFrame>:
 80221ac:	b538      	push	{r3, r4, r5, lr}
 80221ae:	4604      	mov	r4, r0
 80221b0:	6808      	ldr	r0, [r1, #0]
 80221b2:	460d      	mov	r5, r1
 80221b4:	f7fa fb5e 	bl	801c874 <GUI_SetColor>
 80221b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80221bc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80221c0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80221c4:	3101      	adds	r1, #1
 80221c6:	3a01      	subs	r2, #1
 80221c8:	f7f9 fa24 	bl	801b614 <GUI_DrawHLine>
 80221cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80221d0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80221d4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80221d8:	3101      	adds	r1, #1
 80221da:	3a01      	subs	r2, #1
 80221dc:	f7f9 fa1a 	bl	801b614 <GUI_DrawHLine>
 80221e0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80221e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80221e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80221ec:	3101      	adds	r1, #1
 80221ee:	3a01      	subs	r2, #1
 80221f0:	f7f9 fa66 	bl	801b6c0 <GUI_DrawVLine>
 80221f4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80221f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80221fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022200:	3101      	adds	r1, #1
 8022202:	3a01      	subs	r2, #1
 8022204:	f7f9 fa5c 	bl	801b6c0 <GUI_DrawVLine>
 8022208:	6868      	ldr	r0, [r5, #4]
 802220a:	f7fa fb33 	bl	801c874 <GUI_SetColor>
 802220e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8022212:	f9b4 1000 	ldrsh.w	r1, [r4]
 8022216:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802221a:	3001      	adds	r0, #1
 802221c:	3101      	adds	r1, #1
 802221e:	3a01      	subs	r2, #1
 8022220:	f7f9 f9f8 	bl	801b614 <GUI_DrawHLine>
 8022224:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8022228:	f9b4 1000 	ldrsh.w	r1, [r4]
 802222c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8022230:	3801      	subs	r0, #1
 8022232:	3101      	adds	r1, #1
 8022234:	3a01      	subs	r2, #1
 8022236:	f7f9 f9ed 	bl	801b614 <GUI_DrawHLine>
 802223a:	f9b4 0000 	ldrsh.w	r0, [r4]
 802223e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8022242:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8022246:	3001      	adds	r0, #1
 8022248:	3102      	adds	r1, #2
 802224a:	3a02      	subs	r2, #2
 802224c:	f7f9 fa38 	bl	801b6c0 <GUI_DrawVLine>
 8022250:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022254:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8022258:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802225c:	3102      	adds	r1, #2
 802225e:	3a02      	subs	r2, #2
 8022260:	3801      	subs	r0, #1
 8022262:	f7f9 fa2d 	bl	801b6c0 <GUI_DrawVLine>
 8022266:	68a8      	ldr	r0, [r5, #8]
 8022268:	f7fa fb04 	bl	801c874 <GUI_SetColor>
 802226c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022270:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8022274:	f7f9 f9fa 	bl	801b66c <GUI_DrawPixel>
 8022278:	f9b4 0000 	ldrsh.w	r0, [r4]
 802227c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8022280:	f7f9 f9f4 	bl	801b66c <GUI_DrawPixel>
 8022284:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022288:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802228c:	f7f9 f9ee 	bl	801b66c <GUI_DrawPixel>
 8022290:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022294:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8022298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802229c:	f7f9 b9e6 	b.w	801b66c <GUI_DrawPixel>

080222a0 <_DrawBackgroundH>:
 80222a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222a2:	4604      	mov	r4, r0
 80222a4:	b083      	sub	sp, #12
 80222a6:	460d      	mov	r5, r1
 80222a8:	f7ff ff80 	bl	80221ac <_DrawFrame>
 80222ac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80222b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80222b4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80222b8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80222bc:	68ee      	ldr	r6, [r5, #12]
 80222be:	692f      	ldr	r7, [r5, #16]
 80222c0:	9701      	str	r7, [sp, #4]
 80222c2:	440b      	add	r3, r1
 80222c4:	9600      	str	r6, [sp, #0]
 80222c6:	105b      	asrs	r3, r3, #1
 80222c8:	3102      	adds	r1, #2
 80222ca:	3002      	adds	r0, #2
 80222cc:	3a02      	subs	r2, #2
 80222ce:	f7ff fb1f 	bl	8021910 <GUI_DrawGradientV>
 80222d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80222d6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80222da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80222de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80222e2:	696e      	ldr	r6, [r5, #20]
 80222e4:	69ac      	ldr	r4, [r5, #24]
 80222e6:	9401      	str	r4, [sp, #4]
 80222e8:	4419      	add	r1, r3
 80222ea:	1049      	asrs	r1, r1, #1
 80222ec:	9600      	str	r6, [sp, #0]
 80222ee:	3101      	adds	r1, #1
 80222f0:	3b02      	subs	r3, #2
 80222f2:	3002      	adds	r0, #2
 80222f4:	3a02      	subs	r2, #2
 80222f6:	f7ff fb0b 	bl	8021910 <GUI_DrawGradientV>
 80222fa:	b003      	add	sp, #12
 80222fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222fe:	bf00      	nop

08022300 <_DrawBackgroundV>:
 8022300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022302:	4604      	mov	r4, r0
 8022304:	b083      	sub	sp, #12
 8022306:	460d      	mov	r5, r1
 8022308:	f7ff ff50 	bl	80221ac <_DrawFrame>
 802230c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022310:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8022314:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8022318:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802231c:	68ee      	ldr	r6, [r5, #12]
 802231e:	692f      	ldr	r7, [r5, #16]
 8022320:	9701      	str	r7, [sp, #4]
 8022322:	4402      	add	r2, r0
 8022324:	9600      	str	r6, [sp, #0]
 8022326:	1052      	asrs	r2, r2, #1
 8022328:	3002      	adds	r0, #2
 802232a:	3102      	adds	r1, #2
 802232c:	3b02      	subs	r3, #2
 802232e:	f7ff fbcb 	bl	8021ac8 <GUI_DrawGradientH>
 8022332:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8022336:	f9b4 0000 	ldrsh.w	r0, [r4]
 802233a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802233e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022342:	696e      	ldr	r6, [r5, #20]
 8022344:	69ac      	ldr	r4, [r5, #24]
 8022346:	9401      	str	r4, [sp, #4]
 8022348:	4410      	add	r0, r2
 802234a:	1040      	asrs	r0, r0, #1
 802234c:	9600      	str	r6, [sp, #0]
 802234e:	3001      	adds	r0, #1
 8022350:	3a02      	subs	r2, #2
 8022352:	3102      	adds	r1, #2
 8022354:	3b02      	subs	r3, #2
 8022356:	f7ff fbb7 	bl	8021ac8 <GUI_DrawGradientH>
 802235a:	b003      	add	sp, #12
 802235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802235e:	bf00      	nop

08022360 <SCROLLBAR_DrawSkinFlex>:
 8022360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022364:	4604      	mov	r4, r0
 8022366:	b087      	sub	sp, #28
 8022368:	6800      	ldr	r0, [r0, #0]
 802236a:	f7fb fb67 	bl	801da3c <GUI_ALLOC_LockH>
 802236e:	4606      	mov	r6, r0
 8022370:	a806      	add	r0, sp, #24
 8022372:	f840 6d0c 	str.w	r6, [r0, #-12]!
 8022376:	f7fb fb73 	bl	801da60 <GUI_ALLOC_UnlockH>
 802237a:	6a25      	ldr	r5, [r4, #32]
 802237c:	f8b4 a010 	ldrh.w	sl, [r4, #16]
 8022380:	682b      	ldr	r3, [r5, #0]
 8022382:	8aa7      	ldrh	r7, [r4, #20]
 8022384:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8022388:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 802238c:	f8ad a010 	strh.w	sl, [sp, #16]
 8022390:	f8ad 7012 	strh.w	r7, [sp, #18]
 8022394:	f8ad 9014 	strh.w	r9, [sp, #20]
 8022398:	f8ad 8016 	strh.w	r8, [sp, #22]
 802239c:	bb6b      	cbnz	r3, 80223fa <SCROLLBAR_DrawSkinFlex+0x9a>
 802239e:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 802258c <SCROLLBAR_DrawSkinFlex+0x22c>
 80223a2:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8022590 <SCROLLBAR_DrawSkinFlex+0x230>
 80223a6:	4a74      	ldr	r2, [pc, #464]	; (8022578 <SCROLLBAR_DrawSkinFlex+0x218>)
 80223a8:	6863      	ldr	r3, [r4, #4]
 80223aa:	3b08      	subs	r3, #8
 80223ac:	2b11      	cmp	r3, #17
 80223ae:	d820      	bhi.n	80223f2 <SCROLLBAR_DrawSkinFlex+0x92>
 80223b0:	e8df f003 	tbb	[pc, r3]
 80223b4:	1f1f8337 	.word	0x1f1f8337
 80223b8:	1f1f1f71 	.word	0x1f1f1f71
 80223bc:	091f7171 	.word	0x091f7171
 80223c0:	1f1f1f1f 	.word	0x1f1f1f1f
 80223c4:	2e1f      	.short	0x2e1f
 80223c6:	686b      	ldr	r3, [r5, #4]
 80223c8:	496c      	ldr	r1, [pc, #432]	; (802257c <SCROLLBAR_DrawSkinFlex+0x21c>)
 80223ca:	4c6d      	ldr	r4, [pc, #436]	; (8022580 <SCROLLBAR_DrawSkinFlex+0x220>)
 80223cc:	2b03      	cmp	r3, #3
 80223ce:	bf08      	it	eq
 80223d0:	460c      	moveq	r4, r1
 80223d2:	4621      	mov	r1, r4
 80223d4:	a804      	add	r0, sp, #16
 80223d6:	4790      	blx	r2
 80223d8:	682b      	ldr	r3, [r5, #0]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	f000 80ab 	beq.w	8022536 <SCROLLBAR_DrawSkinFlex+0x1d6>
 80223e0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80223e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80223e8:	1ad3      	subs	r3, r2, r3
 80223ea:	3301      	adds	r3, #1
 80223ec:	2b0e      	cmp	r3, #14
 80223ee:	f300 80be 	bgt.w	802256e <SCROLLBAR_DrawSkinFlex+0x20e>
 80223f2:	2000      	movs	r0, #0
 80223f4:	b007      	add	sp, #28
 80223f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223fa:	a904      	add	r1, sp, #16
 80223fc:	460a      	mov	r2, r1
 80223fe:	4630      	mov	r0, r6
 8022400:	f7eb fbb6 	bl	800db70 <WIDGET__RotateRect90>
 8022404:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8022594 <SCROLLBAR_DrawSkinFlex+0x234>
 8022408:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8022598 <SCROLLBAR_DrawSkinFlex+0x238>
 802240c:	4a5d      	ldr	r2, [pc, #372]	; (8022584 <SCROLLBAR_DrawSkinFlex+0x224>)
 802240e:	e7cb      	b.n	80223a8 <SCROLLBAR_DrawSkinFlex+0x48>
 8022410:	682b      	ldr	r3, [r5, #0]
 8022412:	2b00      	cmp	r3, #0
 8022414:	f000 808a 	beq.w	802252c <SCROLLBAR_DrawSkinFlex+0x1cc>
 8022418:	69a0      	ldr	r0, [r4, #24]
 802241a:	6923      	ldr	r3, [r4, #16]
 802241c:	1ac0      	subs	r0, r0, r3
 802241e:	3001      	adds	r0, #1
 8022420:	e7e8      	b.n	80223f4 <SCROLLBAR_DrawSkinFlex+0x94>
 8022422:	686b      	ldr	r3, [r5, #4]
 8022424:	4856      	ldr	r0, [pc, #344]	; (8022580 <SCROLLBAR_DrawSkinFlex+0x220>)
 8022426:	4955      	ldr	r1, [pc, #340]	; (802257c <SCROLLBAR_DrawSkinFlex+0x21c>)
 8022428:	2b02      	cmp	r3, #2
 802242a:	bf14      	ite	ne
 802242c:	4683      	movne	fp, r0
 802242e:	468b      	moveq	fp, r1
 8022430:	4659      	mov	r1, fp
 8022432:	a804      	add	r0, sp, #16
 8022434:	4790      	blx	r2
 8022436:	682b      	ldr	r3, [r5, #0]
 8022438:	2b00      	cmp	r3, #0
 802243a:	f000 8083 	beq.w	8022544 <SCROLLBAR_DrawSkinFlex+0x1e4>
 802243e:	fa0f fa8a 	sxth.w	sl, sl
 8022442:	fa0f f989 	sxth.w	r9, r9
 8022446:	fa0f f888 	sxth.w	r8, r8
 802244a:	b23f      	sxth	r7, r7
 802244c:	ebca 0909 	rsb	r9, sl, r9
 8022450:	ebc7 0708 	rsb	r7, r7, r8
 8022454:	f109 0901 	add.w	r9, r9, #1
 8022458:	3701      	adds	r7, #1
 802245a:	4c4b      	ldr	r4, [pc, #300]	; (8022588 <SCROLLBAR_DrawSkinFlex+0x228>)
 802245c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 8022460:	f1a9 0304 	sub.w	r3, r9, #4
 8022464:	fb84 2403 	smull	r2, r4, r4, r3
 8022468:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 802246c:	f7fa fa02 	bl	801c874 <GUI_SetColor>
 8022470:	ebc4 0109 	rsb	r1, r4, r9
 8022474:	eba9 0961 	sub.w	r9, r9, r1, asr #1
 8022478:	f109 31ff 	add.w	r1, r9, #4294967295
 802247c:	f04f 35ff 	mov.w	r5, #4294967295
 8022480:	4630      	mov	r0, r6
 8022482:	107a      	asrs	r2, r7, #1
 8022484:	4451      	add	r1, sl
 8022486:	4623      	mov	r3, r4
 8022488:	9500      	str	r5, [sp, #0]
 802248a:	f7eb fda9 	bl	800dfe0 <WIDGET__DrawTriangle>
 802248e:	2000      	movs	r0, #0
 8022490:	b007      	add	sp, #28
 8022492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022496:	4c3a      	ldr	r4, [pc, #232]	; (8022580 <SCROLLBAR_DrawSkinFlex+0x220>)
 8022498:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802249c:	69e5      	ldr	r5, [r4, #28]
 802249e:	6a24      	ldr	r4, [r4, #32]
 80224a0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80224a4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80224a8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80224ac:	9500      	str	r5, [sp, #0]
 80224ae:	9401      	str	r4, [sp, #4]
 80224b0:	47e0      	blx	ip
 80224b2:	2000      	movs	r0, #0
 80224b4:	b007      	add	sp, #28
 80224b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224ba:	686b      	ldr	r3, [r5, #4]
 80224bc:	4830      	ldr	r0, [pc, #192]	; (8022580 <SCROLLBAR_DrawSkinFlex+0x220>)
 80224be:	492f      	ldr	r1, [pc, #188]	; (802257c <SCROLLBAR_DrawSkinFlex+0x21c>)
 80224c0:	2b01      	cmp	r3, #1
 80224c2:	bf14      	ite	ne
 80224c4:	4683      	movne	fp, r0
 80224c6:	468b      	moveq	fp, r1
 80224c8:	4659      	mov	r1, fp
 80224ca:	a804      	add	r0, sp, #16
 80224cc:	4790      	blx	r2
 80224ce:	682b      	ldr	r3, [r5, #0]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d042      	beq.n	802255a <SCROLLBAR_DrawSkinFlex+0x1fa>
 80224d4:	fa0f f989 	sxth.w	r9, r9
 80224d8:	fa0f fa8a 	sxth.w	sl, sl
 80224dc:	ebca 0a09 	rsb	sl, sl, r9
 80224e0:	fa0f f888 	sxth.w	r8, r8
 80224e4:	b23f      	sxth	r7, r7
 80224e6:	f10a 0a01 	add.w	sl, sl, #1
 80224ea:	ebc7 0708 	rsb	r7, r7, r8
 80224ee:	4c26      	ldr	r4, [pc, #152]	; (8022588 <SCROLLBAR_DrawSkinFlex+0x228>)
 80224f0:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 80224f4:	f1aa 0304 	sub.w	r3, sl, #4
 80224f8:	fb84 1403 	smull	r1, r4, r4, r3
 80224fc:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8022500:	f7fa f9b8 	bl	801c874 <GUI_SetColor>
 8022504:	ebc4 010a 	rsb	r1, r4, sl
 8022508:	ebaa 0a61 	sub.w	sl, sl, r1, asr #1
 802250c:	2501      	movs	r5, #1
 802250e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8022512:	4630      	mov	r0, r6
 8022514:	fa47 f205 	asr.w	r2, r7, r5
 8022518:	ebc1 0109 	rsb	r1, r1, r9
 802251c:	4623      	mov	r3, r4
 802251e:	9500      	str	r5, [sp, #0]
 8022520:	f7eb fd5e 	bl	800dfe0 <WIDGET__DrawTriangle>
 8022524:	2000      	movs	r0, #0
 8022526:	b007      	add	sp, #28
 8022528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802252c:	69e0      	ldr	r0, [r4, #28]
 802252e:	6963      	ldr	r3, [r4, #20]
 8022530:	1ac0      	subs	r0, r0, r3
 8022532:	3001      	adds	r0, #1
 8022534:	e75e      	b.n	80223f4 <SCROLLBAR_DrawSkinFlex+0x94>
 8022536:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802253a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802253e:	1ad3      	subs	r3, r2, r3
 8022540:	3301      	adds	r3, #1
 8022542:	e753      	b.n	80223ec <SCROLLBAR_DrawSkinFlex+0x8c>
 8022544:	b23f      	sxth	r7, r7
 8022546:	fa0f f988 	sxth.w	r9, r8
 802254a:	ebc7 0909 	rsb	r9, r7, r9
 802254e:	f109 0901 	add.w	r9, r9, #1
 8022552:	fa0f fa8a 	sxth.w	sl, sl
 8022556:	464f      	mov	r7, r9
 8022558:	e77f      	b.n	802245a <SCROLLBAR_DrawSkinFlex+0xfa>
 802255a:	fa0f f888 	sxth.w	r8, r8
 802255e:	b23f      	sxth	r7, r7
 8022560:	ebc7 0708 	rsb	r7, r7, r8
 8022564:	fa0f f989 	sxth.w	r9, r9
 8022568:	f107 0a01 	add.w	sl, r7, #1
 802256c:	e7bf      	b.n	80224ee <SCROLLBAR_DrawSkinFlex+0x18e>
 802256e:	a804      	add	r0, sp, #16
 8022570:	4621      	mov	r1, r4
 8022572:	47d8      	blx	fp
 8022574:	2000      	movs	r0, #0
 8022576:	e73d      	b.n	80223f4 <SCROLLBAR_DrawSkinFlex+0x94>
 8022578:	080222a1 	.word	0x080222a1
 802257c:	2000040c 	.word	0x2000040c
 8022580:	20000438 	.word	0x20000438
 8022584:	08022301 	.word	0x08022301
 8022588:	55555556 	.word	0x55555556
 802258c:	080220ed 	.word	0x080220ed
 8022590:	08021911 	.word	0x08021911
 8022594:	0802214d 	.word	0x0802214d
 8022598:	08021ac9 	.word	0x08021ac9

0802259c <_Create>:
 802259c:	b530      	push	{r4, r5, lr}
 802259e:	b08d      	sub	sp, #52	; 0x34
 80225a0:	4605      	mov	r5, r0
 80225a2:	f7fb fa4b 	bl	801da3c <GUI_ALLOC_LockH>
 80225a6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80225a8:	4909      	ldr	r1, [pc, #36]	; (80225d0 <_Create+0x34>)
 80225aa:	6481      	str	r1, [r0, #72]	; 0x48
 80225ac:	4603      	mov	r3, r0
 80225ae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80225b2:	4668      	mov	r0, sp
 80225b4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80225b6:	9300      	str	r3, [sp, #0]
 80225b8:	9201      	str	r2, [sp, #4]
 80225ba:	f7fb fa51 	bl	801da60 <GUI_ALLOC_UnlockH>
 80225be:	2200      	movs	r2, #0
 80225c0:	ab01      	add	r3, sp, #4
 80225c2:	9503      	str	r5, [sp, #12]
 80225c4:	9204      	str	r2, [sp, #16]
 80225c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80225c8:	a803      	add	r0, sp, #12
 80225ca:	47a0      	blx	r4
 80225cc:	b00d      	add	sp, #52	; 0x34
 80225ce:	bd30      	pop	{r4, r5, pc}
 80225d0:	080225d5 	.word	0x080225d5

080225d4 <_CalcPositions>:
 80225d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225d8:	b092      	sub	sp, #72	; 0x48
 80225da:	460c      	mov	r4, r1
 80225dc:	4605      	mov	r5, r0
 80225de:	f7fb fa2d 	bl	801da3c <GUI_ALLOC_LockH>
 80225e2:	4603      	mov	r3, r0
 80225e4:	c803      	ldmia	r0, {r0, r1}
 80225e6:	ae02      	add	r6, sp, #8
 80225e8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80225ea:	9300      	str	r3, [sp, #0]
 80225ec:	e886 0003 	stmia.w	r6, {r0, r1}
 80225f0:	f002 0108 	and.w	r1, r2, #8
 80225f4:	b289      	uxth	r1, r1
 80225f6:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 80225fa:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 80225fe:	2900      	cmp	r1, #0
 8022600:	d070      	beq.n	80226e4 <_CalcPositions+0x110>
 8022602:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8022606:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
 802260a:	4696      	mov	lr, r2
 802260c:	f111 0900 	adds.w	r9, r1, #0
 8022610:	bf18      	it	ne
 8022612:	f04f 0901 	movne.w	r9, #1
 8022616:	2119      	movs	r1, #25
 8022618:	a807      	add	r0, sp, #28
 802261a:	61a2      	str	r2, [r4, #24]
 802261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802261e:	9509      	str	r5, [sp, #36]	; 0x24
 8022620:	9011      	str	r0, [sp, #68]	; 0x44
 8022622:	f8cd 901c 	str.w	r9, [sp, #28]
 8022626:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 802262a:	970e      	str	r7, [sp, #56]	; 0x38
 802262c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022630:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8022634:	910a      	str	r1, [sp, #40]	; 0x28
 8022636:	a809      	add	r0, sp, #36	; 0x24
 8022638:	4798      	blx	r3
 802263a:	9a00      	ldr	r2, [sp, #0]
 802263c:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 8022640:	2bff      	cmp	r3, #255	; 0xff
 8022642:	4605      	mov	r5, r0
 8022644:	d054      	beq.n	80226f0 <_CalcPositions+0x11c>
 8022646:	2bfe      	cmp	r3, #254	; 0xfe
 8022648:	d05b      	beq.n	8022702 <_CalcPositions+0x12e>
 802264a:	427a      	negs	r2, r7
 802264c:	f1c8 0100 	rsb	r1, r8, #0
 8022650:	4630      	mov	r0, r6
 8022652:	f7fa f879 	bl	801c748 <GUI_MoveRect>
 8022656:	4631      	mov	r1, r6
 8022658:	9800      	ldr	r0, [sp, #0]
 802265a:	f7fd f881 	bl	801f760 <SCROLLBAR__Rect2VRect>
 802265e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022662:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
 8022666:	9b00      	ldr	r3, [sp, #0]
 8022668:	ebc2 0909 	rsb	r9, r2, r9
 802266c:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 8022670:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8022672:	f109 0601 	add.w	r6, r9, #1
 8022676:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 802267a:	4651      	mov	r1, sl
 802267c:	fb00 f006 	mul.w	r0, r0, r6
 8022680:	f7f7 fe58 	bl	801a334 <GUI__DivideRound32>
 8022684:	4b32      	ldr	r3, [pc, #200]	; (8022750 <_CalcPositions+0x17c>)
 8022686:	f9b3 3000 	ldrsh.w	r3, [r3]
 802268a:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 802268e:	1c5a      	adds	r2, r3, #1
 8022690:	4290      	cmp	r0, r2
 8022692:	bfd8      	it	le
 8022694:	1c98      	addle	r0, r3, #2
 8022696:	f858 3d48 	ldr.w	r3, [r8, #-72]!
 802269a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802269e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80226a0:	42b0      	cmp	r0, r6
 80226a2:	bfb4      	ite	lt
 80226a4:	4607      	movlt	r7, r0
 80226a6:	4637      	movge	r7, r6
 80226a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80226aa:	f8c4 9014 	str.w	r9, [r4, #20]
 80226ae:	1e6b      	subs	r3, r5, #1
 80226b0:	ebc7 0906 	rsb	r9, r7, r6
 80226b4:	442e      	add	r6, r5
 80226b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80226ba:	ebc1 010a 	rsb	r1, r1, sl
 80226be:	fb00 f009 	mul.w	r0, r0, r9
 80226c2:	6126      	str	r6, [r4, #16]
 80226c4:	f7f7 fe36 	bl	801a334 <GUI__DivideRound32>
 80226c8:	4428      	add	r0, r5
 80226ca:	19c3      	adds	r3, r0, r7
 80226cc:	3b01      	subs	r3, #1
 80226ce:	60a0      	str	r0, [r4, #8]
 80226d0:	60e3      	str	r3, [r4, #12]
 80226d2:	f8c4 901c 	str.w	r9, [r4, #28]
 80226d6:	4668      	mov	r0, sp
 80226d8:	6227      	str	r7, [r4, #32]
 80226da:	f7fb f9c1 	bl	801da60 <GUI_ALLOC_UnlockH>
 80226de:	b012      	add	sp, #72	; 0x48
 80226e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226e4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80226e8:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80226ec:	4694      	mov	ip, r2
 80226ee:	e78d      	b.n	802260c <_CalcPositions+0x38>
 80226f0:	6990      	ldr	r0, [r2, #24]
 80226f2:	f7f1 fdf5 	bl	80142e0 <WM_GetScrollbarV>
 80226f6:	b9c0      	cbnz	r0, 802272a <_CalcPositions+0x156>
 80226f8:	9a00      	ldr	r2, [sp, #0]
 80226fa:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 80226fe:	2bfe      	cmp	r3, #254	; 0xfe
 8022700:	d1a3      	bne.n	802264a <_CalcPositions+0x76>
 8022702:	6990      	ldr	r0, [r2, #24]
 8022704:	f7f1 fda4 	bl	8014250 <WM_GetScrollbarH>
 8022708:	2800      	cmp	r0, #0
 802270a:	d09e      	beq.n	802264a <_CalcPositions+0x76>
 802270c:	a904      	add	r1, sp, #16
 802270e:	f7f1 fec7 	bl	80144a0 <WM_GetWindowRectEx>
 8022712:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8022716:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802271a:	429a      	cmp	r2, r3
 802271c:	d195      	bne.n	802264a <_CalcPositions+0x76>
 802271e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022722:	3b01      	subs	r3, #1
 8022724:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022728:	e78f      	b.n	802264a <_CalcPositions+0x76>
 802272a:	a904      	add	r1, sp, #16
 802272c:	f7f1 feb8 	bl	80144a0 <WM_GetWindowRectEx>
 8022730:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8022734:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022738:	429a      	cmp	r2, r3
 802273a:	d1dd      	bne.n	80226f8 <_CalcPositions+0x124>
 802273c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8022740:	9a00      	ldr	r2, [sp, #0]
 8022742:	3b01      	subs	r3, #1
 8022744:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022748:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 802274c:	e77b      	b.n	8022646 <_CalcPositions+0x72>
 802274e:	bf00      	nop
 8022750:	2000035a 	.word	0x2000035a

08022754 <_Paint>:
 8022754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022756:	b099      	sub	sp, #100	; 0x64
 8022758:	4606      	mov	r6, r0
 802275a:	f7fb f96f 	bl	801da3c <GUI_ALLOC_LockH>
 802275e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8022760:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8022762:	9001      	str	r0, [sp, #4]
 8022764:	4605      	mov	r5, r0
 8022766:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 802276a:	a906      	add	r1, sp, #24
 802276c:	4630      	mov	r0, r6
 802276e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8022770:	9204      	str	r2, [sp, #16]
 8022772:	9305      	str	r3, [sp, #20]
 8022774:	f7ff ff2e 	bl	80225d4 <_CalcPositions>
 8022778:	a801      	add	r0, sp, #4
 802277a:	f7fb f971 	bl	801da60 <GUI_ALLOC_UnlockH>
 802277e:	4628      	mov	r0, r5
 8022780:	a902      	add	r1, sp, #8
 8022782:	f7eb fa09 	bl	800db98 <WIDGET__GetClientRect>
 8022786:	9a06      	ldr	r2, [sp, #24]
 8022788:	9b07      	ldr	r3, [sp, #28]
 802278a:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 802278e:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8022792:	9213      	str	r2, [sp, #76]	; 0x4c
 8022794:	2108      	movs	r1, #8
 8022796:	a804      	add	r0, sp, #16
 8022798:	9017      	str	r0, [sp, #92]	; 0x5c
 802279a:	9110      	str	r1, [sp, #64]	; 0x40
 802279c:	9315      	str	r3, [sp, #84]	; 0x54
 802279e:	960f      	str	r6, [sp, #60]	; 0x3c
 80227a0:	9714      	str	r7, [sp, #80]	; 0x50
 80227a2:	9516      	str	r5, [sp, #88]	; 0x58
 80227a4:	a80f      	add	r0, sp, #60	; 0x3c
 80227a6:	47a0      	blx	r4
 80227a8:	9a07      	ldr	r2, [sp, #28]
 80227aa:	9b08      	ldr	r3, [sp, #32]
 80227ac:	3201      	adds	r2, #1
 80227ae:	3b01      	subs	r3, #1
 80227b0:	2110      	movs	r1, #16
 80227b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80227b4:	9315      	str	r3, [sp, #84]	; 0x54
 80227b6:	9110      	str	r1, [sp, #64]	; 0x40
 80227b8:	a80f      	add	r0, sp, #60	; 0x3c
 80227ba:	47a0      	blx	r4
 80227bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227c0:	3201      	adds	r2, #1
 80227c2:	3b01      	subs	r3, #1
 80227c4:	2111      	movs	r1, #17
 80227c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80227c8:	9315      	str	r3, [sp, #84]	; 0x54
 80227ca:	9110      	str	r1, [sp, #64]	; 0x40
 80227cc:	a80f      	add	r0, sp, #60	; 0x3c
 80227ce:	47a0      	blx	r4
 80227d0:	2113      	movs	r1, #19
 80227d2:	9a08      	ldr	r2, [sp, #32]
 80227d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227d6:	9110      	str	r1, [sp, #64]	; 0x40
 80227d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80227da:	9315      	str	r3, [sp, #84]	; 0x54
 80227dc:	a80f      	add	r0, sp, #60	; 0x3c
 80227de:	47a0      	blx	r4
 80227e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80227e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80227e6:	2109      	movs	r1, #9
 80227e8:	9315      	str	r3, [sp, #84]	; 0x54
 80227ea:	9110      	str	r1, [sp, #64]	; 0x40
 80227ec:	a80f      	add	r0, sp, #60	; 0x3c
 80227ee:	47a0      	blx	r4
 80227f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80227f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227f4:	429a      	cmp	r2, r3
 80227f6:	d006      	beq.n	8022806 <_Paint+0xb2>
 80227f8:	3201      	adds	r2, #1
 80227fa:	210c      	movs	r1, #12
 80227fc:	9213      	str	r2, [sp, #76]	; 0x4c
 80227fe:	9315      	str	r3, [sp, #84]	; 0x54
 8022800:	a80f      	add	r0, sp, #60	; 0x3c
 8022802:	9110      	str	r1, [sp, #64]	; 0x40
 8022804:	47a0      	blx	r4
 8022806:	b019      	add	sp, #100	; 0x64
 8022808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802280a:	bf00      	nop

0802280c <GUI_DRAW__Draw>:
 802280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022810:	460f      	mov	r7, r1
 8022812:	b082      	sub	sp, #8
 8022814:	4616      	mov	r6, r2
 8022816:	461d      	mov	r5, r3
 8022818:	4680      	mov	r8, r0
 802281a:	b170      	cbz	r0, 802283a <GUI_DRAW__Draw+0x2e>
 802281c:	f7fb f90e 	bl	801da3c <GUI_ALLOC_LockH>
 8022820:	ac02      	add	r4, sp, #8
 8022822:	6803      	ldr	r3, [r0, #0]
 8022824:	f844 0d04 	str.w	r0, [r4, #-4]!
 8022828:	4620      	mov	r0, r4
 802282a:	681c      	ldr	r4, [r3, #0]
 802282c:	f7fb f918 	bl	801da60 <GUI_ALLOC_UnlockH>
 8022830:	4640      	mov	r0, r8
 8022832:	4639      	mov	r1, r7
 8022834:	4632      	mov	r2, r6
 8022836:	462b      	mov	r3, r5
 8022838:	47a0      	blx	r4
 802283a:	b002      	add	sp, #8
 802283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022840 <LCD_GetNumLayers>:
 8022840:	b510      	push	{r4, lr}
 8022842:	2000      	movs	r0, #0
 8022844:	f7f9 faa8 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8022848:	1c04      	adds	r4, r0, #0
 802284a:	f04f 0001 	mov.w	r0, #1
 802284e:	bf18      	it	ne
 8022850:	2401      	movne	r4, #1
 8022852:	f7f9 faa1 	bl	801bd98 <GUI_DEVICE__GetpDriver>
 8022856:	b100      	cbz	r0, 802285a <LCD_GetNumLayers+0x1a>
 8022858:	3401      	adds	r4, #1
 802285a:	4620      	mov	r0, r4
 802285c:	bd10      	pop	{r4, pc}
 802285e:	bf00      	nop

08022860 <__libc_init_array>:
 8022860:	b570      	push	{r4, r5, r6, lr}
 8022862:	4e0d      	ldr	r6, [pc, #52]	; (8022898 <__libc_init_array+0x38>)
 8022864:	4c0d      	ldr	r4, [pc, #52]	; (802289c <__libc_init_array+0x3c>)
 8022866:	1ba4      	subs	r4, r4, r6
 8022868:	10a4      	asrs	r4, r4, #2
 802286a:	2500      	movs	r5, #0
 802286c:	42a5      	cmp	r5, r4
 802286e:	d109      	bne.n	8022884 <__libc_init_array+0x24>
 8022870:	4e0b      	ldr	r6, [pc, #44]	; (80228a0 <__libc_init_array+0x40>)
 8022872:	4c0c      	ldr	r4, [pc, #48]	; (80228a4 <__libc_init_array+0x44>)
 8022874:	f001 f8a2 	bl	80239bc <_init>
 8022878:	1ba4      	subs	r4, r4, r6
 802287a:	10a4      	asrs	r4, r4, #2
 802287c:	2500      	movs	r5, #0
 802287e:	42a5      	cmp	r5, r4
 8022880:	d105      	bne.n	802288e <__libc_init_array+0x2e>
 8022882:	bd70      	pop	{r4, r5, r6, pc}
 8022884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022888:	4798      	blx	r3
 802288a:	3501      	adds	r5, #1
 802288c:	e7ee      	b.n	802286c <__libc_init_array+0xc>
 802288e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022892:	4798      	blx	r3
 8022894:	3501      	adds	r5, #1
 8022896:	e7f2      	b.n	802287e <__libc_init_array+0x1e>
 8022898:	0802aca0 	.word	0x0802aca0
 802289c:	0802aca0 	.word	0x0802aca0
 80228a0:	0802aca0 	.word	0x0802aca0
 80228a4:	0802aca4 	.word	0x0802aca4

080228a8 <__locale_ctype_ptr_l>:
 80228a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80228ac:	4770      	bx	lr
	...

080228b0 <malloc>:
 80228b0:	4b02      	ldr	r3, [pc, #8]	; (80228bc <malloc+0xc>)
 80228b2:	4601      	mov	r1, r0
 80228b4:	6818      	ldr	r0, [r3, #0]
 80228b6:	f000 b899 	b.w	80229ec <_malloc_r>
 80228ba:	bf00      	nop
 80228bc:	20000470 	.word	0x20000470

080228c0 <free>:
 80228c0:	4b02      	ldr	r3, [pc, #8]	; (80228cc <free+0xc>)
 80228c2:	4601      	mov	r1, r0
 80228c4:	6818      	ldr	r0, [r3, #0]
 80228c6:	f000 b843 	b.w	8022950 <_free_r>
 80228ca:	bf00      	nop
 80228cc:	20000470 	.word	0x20000470

080228d0 <__ascii_mbtowc>:
 80228d0:	b082      	sub	sp, #8
 80228d2:	b901      	cbnz	r1, 80228d6 <__ascii_mbtowc+0x6>
 80228d4:	a901      	add	r1, sp, #4
 80228d6:	b142      	cbz	r2, 80228ea <__ascii_mbtowc+0x1a>
 80228d8:	b14b      	cbz	r3, 80228ee <__ascii_mbtowc+0x1e>
 80228da:	7813      	ldrb	r3, [r2, #0]
 80228dc:	600b      	str	r3, [r1, #0]
 80228de:	7812      	ldrb	r2, [r2, #0]
 80228e0:	1c10      	adds	r0, r2, #0
 80228e2:	bf18      	it	ne
 80228e4:	2001      	movne	r0, #1
 80228e6:	b002      	add	sp, #8
 80228e8:	4770      	bx	lr
 80228ea:	4610      	mov	r0, r2
 80228ec:	e7fb      	b.n	80228e6 <__ascii_mbtowc+0x16>
 80228ee:	f06f 0001 	mvn.w	r0, #1
 80228f2:	e7f8      	b.n	80228e6 <__ascii_mbtowc+0x16>

080228f4 <memcpy>:
 80228f4:	b510      	push	{r4, lr}
 80228f6:	1e43      	subs	r3, r0, #1
 80228f8:	440a      	add	r2, r1
 80228fa:	4291      	cmp	r1, r2
 80228fc:	d100      	bne.n	8022900 <memcpy+0xc>
 80228fe:	bd10      	pop	{r4, pc}
 8022900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022908:	e7f7      	b.n	80228fa <memcpy+0x6>

0802290a <memmove>:
 802290a:	4288      	cmp	r0, r1
 802290c:	b510      	push	{r4, lr}
 802290e:	eb01 0302 	add.w	r3, r1, r2
 8022912:	d803      	bhi.n	802291c <memmove+0x12>
 8022914:	1e42      	subs	r2, r0, #1
 8022916:	4299      	cmp	r1, r3
 8022918:	d10c      	bne.n	8022934 <memmove+0x2a>
 802291a:	bd10      	pop	{r4, pc}
 802291c:	4298      	cmp	r0, r3
 802291e:	d2f9      	bcs.n	8022914 <memmove+0xa>
 8022920:	1881      	adds	r1, r0, r2
 8022922:	1ad2      	subs	r2, r2, r3
 8022924:	42d3      	cmn	r3, r2
 8022926:	d100      	bne.n	802292a <memmove+0x20>
 8022928:	bd10      	pop	{r4, pc}
 802292a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802292e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022932:	e7f7      	b.n	8022924 <memmove+0x1a>
 8022934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022938:	f802 4f01 	strb.w	r4, [r2, #1]!
 802293c:	e7eb      	b.n	8022916 <memmove+0xc>

0802293e <memset>:
 802293e:	4402      	add	r2, r0
 8022940:	4603      	mov	r3, r0
 8022942:	4293      	cmp	r3, r2
 8022944:	d100      	bne.n	8022948 <memset+0xa>
 8022946:	4770      	bx	lr
 8022948:	f803 1b01 	strb.w	r1, [r3], #1
 802294c:	e7f9      	b.n	8022942 <memset+0x4>
	...

08022950 <_free_r>:
 8022950:	b538      	push	{r3, r4, r5, lr}
 8022952:	4605      	mov	r5, r0
 8022954:	2900      	cmp	r1, #0
 8022956:	d045      	beq.n	80229e4 <_free_r+0x94>
 8022958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802295c:	1f0c      	subs	r4, r1, #4
 802295e:	2b00      	cmp	r3, #0
 8022960:	bfb8      	it	lt
 8022962:	18e4      	addlt	r4, r4, r3
 8022964:	f000 fc78 	bl	8023258 <__malloc_lock>
 8022968:	4a1f      	ldr	r2, [pc, #124]	; (80229e8 <_free_r+0x98>)
 802296a:	6813      	ldr	r3, [r2, #0]
 802296c:	4610      	mov	r0, r2
 802296e:	b933      	cbnz	r3, 802297e <_free_r+0x2e>
 8022970:	6063      	str	r3, [r4, #4]
 8022972:	6014      	str	r4, [r2, #0]
 8022974:	4628      	mov	r0, r5
 8022976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802297a:	f000 bc6e 	b.w	802325a <__malloc_unlock>
 802297e:	42a3      	cmp	r3, r4
 8022980:	d90c      	bls.n	802299c <_free_r+0x4c>
 8022982:	6821      	ldr	r1, [r4, #0]
 8022984:	1862      	adds	r2, r4, r1
 8022986:	4293      	cmp	r3, r2
 8022988:	bf04      	itt	eq
 802298a:	681a      	ldreq	r2, [r3, #0]
 802298c:	685b      	ldreq	r3, [r3, #4]
 802298e:	6063      	str	r3, [r4, #4]
 8022990:	bf04      	itt	eq
 8022992:	1852      	addeq	r2, r2, r1
 8022994:	6022      	streq	r2, [r4, #0]
 8022996:	6004      	str	r4, [r0, #0]
 8022998:	e7ec      	b.n	8022974 <_free_r+0x24>
 802299a:	4613      	mov	r3, r2
 802299c:	685a      	ldr	r2, [r3, #4]
 802299e:	b10a      	cbz	r2, 80229a4 <_free_r+0x54>
 80229a0:	42a2      	cmp	r2, r4
 80229a2:	d9fa      	bls.n	802299a <_free_r+0x4a>
 80229a4:	6819      	ldr	r1, [r3, #0]
 80229a6:	1858      	adds	r0, r3, r1
 80229a8:	42a0      	cmp	r0, r4
 80229aa:	d10b      	bne.n	80229c4 <_free_r+0x74>
 80229ac:	6820      	ldr	r0, [r4, #0]
 80229ae:	4401      	add	r1, r0
 80229b0:	1858      	adds	r0, r3, r1
 80229b2:	4282      	cmp	r2, r0
 80229b4:	6019      	str	r1, [r3, #0]
 80229b6:	d1dd      	bne.n	8022974 <_free_r+0x24>
 80229b8:	6810      	ldr	r0, [r2, #0]
 80229ba:	6852      	ldr	r2, [r2, #4]
 80229bc:	605a      	str	r2, [r3, #4]
 80229be:	4401      	add	r1, r0
 80229c0:	6019      	str	r1, [r3, #0]
 80229c2:	e7d7      	b.n	8022974 <_free_r+0x24>
 80229c4:	d902      	bls.n	80229cc <_free_r+0x7c>
 80229c6:	230c      	movs	r3, #12
 80229c8:	602b      	str	r3, [r5, #0]
 80229ca:	e7d3      	b.n	8022974 <_free_r+0x24>
 80229cc:	6820      	ldr	r0, [r4, #0]
 80229ce:	1821      	adds	r1, r4, r0
 80229d0:	428a      	cmp	r2, r1
 80229d2:	bf04      	itt	eq
 80229d4:	6811      	ldreq	r1, [r2, #0]
 80229d6:	6852      	ldreq	r2, [r2, #4]
 80229d8:	6062      	str	r2, [r4, #4]
 80229da:	bf04      	itt	eq
 80229dc:	1809      	addeq	r1, r1, r0
 80229de:	6021      	streq	r1, [r4, #0]
 80229e0:	605c      	str	r4, [r3, #4]
 80229e2:	e7c7      	b.n	8022974 <_free_r+0x24>
 80229e4:	bd38      	pop	{r3, r4, r5, pc}
 80229e6:	bf00      	nop
 80229e8:	2002b318 	.word	0x2002b318

080229ec <_malloc_r>:
 80229ec:	b570      	push	{r4, r5, r6, lr}
 80229ee:	1ccd      	adds	r5, r1, #3
 80229f0:	f025 0503 	bic.w	r5, r5, #3
 80229f4:	3508      	adds	r5, #8
 80229f6:	2d0c      	cmp	r5, #12
 80229f8:	bf38      	it	cc
 80229fa:	250c      	movcc	r5, #12
 80229fc:	2d00      	cmp	r5, #0
 80229fe:	4606      	mov	r6, r0
 8022a00:	db01      	blt.n	8022a06 <_malloc_r+0x1a>
 8022a02:	42a9      	cmp	r1, r5
 8022a04:	d903      	bls.n	8022a0e <_malloc_r+0x22>
 8022a06:	230c      	movs	r3, #12
 8022a08:	6033      	str	r3, [r6, #0]
 8022a0a:	2000      	movs	r0, #0
 8022a0c:	bd70      	pop	{r4, r5, r6, pc}
 8022a0e:	f000 fc23 	bl	8023258 <__malloc_lock>
 8022a12:	4a23      	ldr	r2, [pc, #140]	; (8022aa0 <_malloc_r+0xb4>)
 8022a14:	6814      	ldr	r4, [r2, #0]
 8022a16:	4621      	mov	r1, r4
 8022a18:	b991      	cbnz	r1, 8022a40 <_malloc_r+0x54>
 8022a1a:	4c22      	ldr	r4, [pc, #136]	; (8022aa4 <_malloc_r+0xb8>)
 8022a1c:	6823      	ldr	r3, [r4, #0]
 8022a1e:	b91b      	cbnz	r3, 8022a28 <_malloc_r+0x3c>
 8022a20:	4630      	mov	r0, r6
 8022a22:	f000 f8bd 	bl	8022ba0 <_sbrk_r>
 8022a26:	6020      	str	r0, [r4, #0]
 8022a28:	4629      	mov	r1, r5
 8022a2a:	4630      	mov	r0, r6
 8022a2c:	f000 f8b8 	bl	8022ba0 <_sbrk_r>
 8022a30:	1c43      	adds	r3, r0, #1
 8022a32:	d126      	bne.n	8022a82 <_malloc_r+0x96>
 8022a34:	230c      	movs	r3, #12
 8022a36:	6033      	str	r3, [r6, #0]
 8022a38:	4630      	mov	r0, r6
 8022a3a:	f000 fc0e 	bl	802325a <__malloc_unlock>
 8022a3e:	e7e4      	b.n	8022a0a <_malloc_r+0x1e>
 8022a40:	680b      	ldr	r3, [r1, #0]
 8022a42:	1b5b      	subs	r3, r3, r5
 8022a44:	d41a      	bmi.n	8022a7c <_malloc_r+0x90>
 8022a46:	2b0b      	cmp	r3, #11
 8022a48:	d90f      	bls.n	8022a6a <_malloc_r+0x7e>
 8022a4a:	600b      	str	r3, [r1, #0]
 8022a4c:	50cd      	str	r5, [r1, r3]
 8022a4e:	18cc      	adds	r4, r1, r3
 8022a50:	4630      	mov	r0, r6
 8022a52:	f000 fc02 	bl	802325a <__malloc_unlock>
 8022a56:	f104 000b 	add.w	r0, r4, #11
 8022a5a:	1d23      	adds	r3, r4, #4
 8022a5c:	f020 0007 	bic.w	r0, r0, #7
 8022a60:	1ac3      	subs	r3, r0, r3
 8022a62:	d01b      	beq.n	8022a9c <_malloc_r+0xb0>
 8022a64:	425a      	negs	r2, r3
 8022a66:	50e2      	str	r2, [r4, r3]
 8022a68:	bd70      	pop	{r4, r5, r6, pc}
 8022a6a:	428c      	cmp	r4, r1
 8022a6c:	bf0d      	iteet	eq
 8022a6e:	6863      	ldreq	r3, [r4, #4]
 8022a70:	684b      	ldrne	r3, [r1, #4]
 8022a72:	6063      	strne	r3, [r4, #4]
 8022a74:	6013      	streq	r3, [r2, #0]
 8022a76:	bf18      	it	ne
 8022a78:	460c      	movne	r4, r1
 8022a7a:	e7e9      	b.n	8022a50 <_malloc_r+0x64>
 8022a7c:	460c      	mov	r4, r1
 8022a7e:	6849      	ldr	r1, [r1, #4]
 8022a80:	e7ca      	b.n	8022a18 <_malloc_r+0x2c>
 8022a82:	1cc4      	adds	r4, r0, #3
 8022a84:	f024 0403 	bic.w	r4, r4, #3
 8022a88:	42a0      	cmp	r0, r4
 8022a8a:	d005      	beq.n	8022a98 <_malloc_r+0xac>
 8022a8c:	1a21      	subs	r1, r4, r0
 8022a8e:	4630      	mov	r0, r6
 8022a90:	f000 f886 	bl	8022ba0 <_sbrk_r>
 8022a94:	3001      	adds	r0, #1
 8022a96:	d0cd      	beq.n	8022a34 <_malloc_r+0x48>
 8022a98:	6025      	str	r5, [r4, #0]
 8022a9a:	e7d9      	b.n	8022a50 <_malloc_r+0x64>
 8022a9c:	bd70      	pop	{r4, r5, r6, pc}
 8022a9e:	bf00      	nop
 8022aa0:	2002b318 	.word	0x2002b318
 8022aa4:	2002b31c 	.word	0x2002b31c

08022aa8 <iprintf>:
 8022aa8:	b40f      	push	{r0, r1, r2, r3}
 8022aaa:	4b0a      	ldr	r3, [pc, #40]	; (8022ad4 <iprintf+0x2c>)
 8022aac:	b513      	push	{r0, r1, r4, lr}
 8022aae:	681c      	ldr	r4, [r3, #0]
 8022ab0:	b124      	cbz	r4, 8022abc <iprintf+0x14>
 8022ab2:	69a3      	ldr	r3, [r4, #24]
 8022ab4:	b913      	cbnz	r3, 8022abc <iprintf+0x14>
 8022ab6:	4620      	mov	r0, r4
 8022ab8:	f000 fae0 	bl	802307c <__sinit>
 8022abc:	ab05      	add	r3, sp, #20
 8022abe:	9a04      	ldr	r2, [sp, #16]
 8022ac0:	68a1      	ldr	r1, [r4, #8]
 8022ac2:	9301      	str	r3, [sp, #4]
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	f000 fbf3 	bl	80232b0 <_vfiprintf_r>
 8022aca:	b002      	add	sp, #8
 8022acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ad0:	b004      	add	sp, #16
 8022ad2:	4770      	bx	lr
 8022ad4:	20000470 	.word	0x20000470

08022ad8 <_puts_r>:
 8022ad8:	b570      	push	{r4, r5, r6, lr}
 8022ada:	460e      	mov	r6, r1
 8022adc:	4605      	mov	r5, r0
 8022ade:	b118      	cbz	r0, 8022ae8 <_puts_r+0x10>
 8022ae0:	6983      	ldr	r3, [r0, #24]
 8022ae2:	b90b      	cbnz	r3, 8022ae8 <_puts_r+0x10>
 8022ae4:	f000 faca 	bl	802307c <__sinit>
 8022ae8:	69ab      	ldr	r3, [r5, #24]
 8022aea:	68ac      	ldr	r4, [r5, #8]
 8022aec:	b913      	cbnz	r3, 8022af4 <_puts_r+0x1c>
 8022aee:	4628      	mov	r0, r5
 8022af0:	f000 fac4 	bl	802307c <__sinit>
 8022af4:	4b23      	ldr	r3, [pc, #140]	; (8022b84 <_puts_r+0xac>)
 8022af6:	429c      	cmp	r4, r3
 8022af8:	d117      	bne.n	8022b2a <_puts_r+0x52>
 8022afa:	686c      	ldr	r4, [r5, #4]
 8022afc:	89a3      	ldrh	r3, [r4, #12]
 8022afe:	071b      	lsls	r3, r3, #28
 8022b00:	d51d      	bpl.n	8022b3e <_puts_r+0x66>
 8022b02:	6923      	ldr	r3, [r4, #16]
 8022b04:	b1db      	cbz	r3, 8022b3e <_puts_r+0x66>
 8022b06:	3e01      	subs	r6, #1
 8022b08:	68a3      	ldr	r3, [r4, #8]
 8022b0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022b0e:	3b01      	subs	r3, #1
 8022b10:	60a3      	str	r3, [r4, #8]
 8022b12:	b9e9      	cbnz	r1, 8022b50 <_puts_r+0x78>
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	da2e      	bge.n	8022b76 <_puts_r+0x9e>
 8022b18:	4622      	mov	r2, r4
 8022b1a:	210a      	movs	r1, #10
 8022b1c:	4628      	mov	r0, r5
 8022b1e:	f000 f8ed 	bl	8022cfc <__swbuf_r>
 8022b22:	3001      	adds	r0, #1
 8022b24:	d011      	beq.n	8022b4a <_puts_r+0x72>
 8022b26:	200a      	movs	r0, #10
 8022b28:	bd70      	pop	{r4, r5, r6, pc}
 8022b2a:	4b17      	ldr	r3, [pc, #92]	; (8022b88 <_puts_r+0xb0>)
 8022b2c:	429c      	cmp	r4, r3
 8022b2e:	d101      	bne.n	8022b34 <_puts_r+0x5c>
 8022b30:	68ac      	ldr	r4, [r5, #8]
 8022b32:	e7e3      	b.n	8022afc <_puts_r+0x24>
 8022b34:	4b15      	ldr	r3, [pc, #84]	; (8022b8c <_puts_r+0xb4>)
 8022b36:	429c      	cmp	r4, r3
 8022b38:	bf08      	it	eq
 8022b3a:	68ec      	ldreq	r4, [r5, #12]
 8022b3c:	e7de      	b.n	8022afc <_puts_r+0x24>
 8022b3e:	4621      	mov	r1, r4
 8022b40:	4628      	mov	r0, r5
 8022b42:	f000 f93b 	bl	8022dbc <__swsetup_r>
 8022b46:	2800      	cmp	r0, #0
 8022b48:	d0dd      	beq.n	8022b06 <_puts_r+0x2e>
 8022b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8022b4e:	bd70      	pop	{r4, r5, r6, pc}
 8022b50:	2b00      	cmp	r3, #0
 8022b52:	da04      	bge.n	8022b5e <_puts_r+0x86>
 8022b54:	69a2      	ldr	r2, [r4, #24]
 8022b56:	4293      	cmp	r3, r2
 8022b58:	db06      	blt.n	8022b68 <_puts_r+0x90>
 8022b5a:	290a      	cmp	r1, #10
 8022b5c:	d004      	beq.n	8022b68 <_puts_r+0x90>
 8022b5e:	6823      	ldr	r3, [r4, #0]
 8022b60:	1c5a      	adds	r2, r3, #1
 8022b62:	6022      	str	r2, [r4, #0]
 8022b64:	7019      	strb	r1, [r3, #0]
 8022b66:	e7cf      	b.n	8022b08 <_puts_r+0x30>
 8022b68:	4622      	mov	r2, r4
 8022b6a:	4628      	mov	r0, r5
 8022b6c:	f000 f8c6 	bl	8022cfc <__swbuf_r>
 8022b70:	3001      	adds	r0, #1
 8022b72:	d1c9      	bne.n	8022b08 <_puts_r+0x30>
 8022b74:	e7e9      	b.n	8022b4a <_puts_r+0x72>
 8022b76:	6823      	ldr	r3, [r4, #0]
 8022b78:	200a      	movs	r0, #10
 8022b7a:	1c5a      	adds	r2, r3, #1
 8022b7c:	6022      	str	r2, [r4, #0]
 8022b7e:	7018      	strb	r0, [r3, #0]
 8022b80:	bd70      	pop	{r4, r5, r6, pc}
 8022b82:	bf00      	nop
 8022b84:	0802ac24 	.word	0x0802ac24
 8022b88:	0802ac44 	.word	0x0802ac44
 8022b8c:	0802ac04 	.word	0x0802ac04

08022b90 <puts>:
 8022b90:	4b02      	ldr	r3, [pc, #8]	; (8022b9c <puts+0xc>)
 8022b92:	4601      	mov	r1, r0
 8022b94:	6818      	ldr	r0, [r3, #0]
 8022b96:	f7ff bf9f 	b.w	8022ad8 <_puts_r>
 8022b9a:	bf00      	nop
 8022b9c:	20000470 	.word	0x20000470

08022ba0 <_sbrk_r>:
 8022ba0:	b538      	push	{r3, r4, r5, lr}
 8022ba2:	4c06      	ldr	r4, [pc, #24]	; (8022bbc <_sbrk_r+0x1c>)
 8022ba4:	2300      	movs	r3, #0
 8022ba6:	4605      	mov	r5, r0
 8022ba8:	4608      	mov	r0, r1
 8022baa:	6023      	str	r3, [r4, #0]
 8022bac:	f000 fef8 	bl	80239a0 <_sbrk>
 8022bb0:	1c43      	adds	r3, r0, #1
 8022bb2:	d102      	bne.n	8022bba <_sbrk_r+0x1a>
 8022bb4:	6823      	ldr	r3, [r4, #0]
 8022bb6:	b103      	cbz	r3, 8022bba <_sbrk_r+0x1a>
 8022bb8:	602b      	str	r3, [r5, #0]
 8022bba:	bd38      	pop	{r3, r4, r5, pc}
 8022bbc:	2002ccd0 	.word	0x2002ccd0

08022bc0 <strcpy>:
 8022bc0:	4603      	mov	r3, r0
 8022bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022bc6:	f803 2b01 	strb.w	r2, [r3], #1
 8022bca:	2a00      	cmp	r2, #0
 8022bcc:	d1f9      	bne.n	8022bc2 <strcpy+0x2>
 8022bce:	4770      	bx	lr

08022bd0 <_strtol_l.isra.0>:
 8022bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bd4:	4680      	mov	r8, r0
 8022bd6:	4689      	mov	r9, r1
 8022bd8:	4692      	mov	sl, r2
 8022bda:	461f      	mov	r7, r3
 8022bdc:	468b      	mov	fp, r1
 8022bde:	465d      	mov	r5, fp
 8022be0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022be2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022be6:	f7ff fe5f 	bl	80228a8 <__locale_ctype_ptr_l>
 8022bea:	4420      	add	r0, r4
 8022bec:	7846      	ldrb	r6, [r0, #1]
 8022bee:	f016 0608 	ands.w	r6, r6, #8
 8022bf2:	d10b      	bne.n	8022c0c <_strtol_l.isra.0+0x3c>
 8022bf4:	2c2d      	cmp	r4, #45	; 0x2d
 8022bf6:	d10b      	bne.n	8022c10 <_strtol_l.isra.0+0x40>
 8022bf8:	782c      	ldrb	r4, [r5, #0]
 8022bfa:	2601      	movs	r6, #1
 8022bfc:	f10b 0502 	add.w	r5, fp, #2
 8022c00:	b167      	cbz	r7, 8022c1c <_strtol_l.isra.0+0x4c>
 8022c02:	2f10      	cmp	r7, #16
 8022c04:	d114      	bne.n	8022c30 <_strtol_l.isra.0+0x60>
 8022c06:	2c30      	cmp	r4, #48	; 0x30
 8022c08:	d00a      	beq.n	8022c20 <_strtol_l.isra.0+0x50>
 8022c0a:	e011      	b.n	8022c30 <_strtol_l.isra.0+0x60>
 8022c0c:	46ab      	mov	fp, r5
 8022c0e:	e7e6      	b.n	8022bde <_strtol_l.isra.0+0xe>
 8022c10:	2c2b      	cmp	r4, #43	; 0x2b
 8022c12:	bf04      	itt	eq
 8022c14:	782c      	ldrbeq	r4, [r5, #0]
 8022c16:	f10b 0502 	addeq.w	r5, fp, #2
 8022c1a:	e7f1      	b.n	8022c00 <_strtol_l.isra.0+0x30>
 8022c1c:	2c30      	cmp	r4, #48	; 0x30
 8022c1e:	d127      	bne.n	8022c70 <_strtol_l.isra.0+0xa0>
 8022c20:	782b      	ldrb	r3, [r5, #0]
 8022c22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8022c26:	2b58      	cmp	r3, #88	; 0x58
 8022c28:	d14b      	bne.n	8022cc2 <_strtol_l.isra.0+0xf2>
 8022c2a:	786c      	ldrb	r4, [r5, #1]
 8022c2c:	2710      	movs	r7, #16
 8022c2e:	3502      	adds	r5, #2
 8022c30:	2e00      	cmp	r6, #0
 8022c32:	bf0c      	ite	eq
 8022c34:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8022c38:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8022c3c:	2200      	movs	r2, #0
 8022c3e:	fbb1 fef7 	udiv	lr, r1, r7
 8022c42:	4610      	mov	r0, r2
 8022c44:	fb07 1c1e 	mls	ip, r7, lr, r1
 8022c48:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8022c4c:	2b09      	cmp	r3, #9
 8022c4e:	d811      	bhi.n	8022c74 <_strtol_l.isra.0+0xa4>
 8022c50:	461c      	mov	r4, r3
 8022c52:	42a7      	cmp	r7, r4
 8022c54:	dd1d      	ble.n	8022c92 <_strtol_l.isra.0+0xc2>
 8022c56:	1c53      	adds	r3, r2, #1
 8022c58:	d007      	beq.n	8022c6a <_strtol_l.isra.0+0x9a>
 8022c5a:	4586      	cmp	lr, r0
 8022c5c:	d316      	bcc.n	8022c8c <_strtol_l.isra.0+0xbc>
 8022c5e:	d101      	bne.n	8022c64 <_strtol_l.isra.0+0x94>
 8022c60:	45a4      	cmp	ip, r4
 8022c62:	db13      	blt.n	8022c8c <_strtol_l.isra.0+0xbc>
 8022c64:	fb00 4007 	mla	r0, r0, r7, r4
 8022c68:	2201      	movs	r2, #1
 8022c6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022c6e:	e7eb      	b.n	8022c48 <_strtol_l.isra.0+0x78>
 8022c70:	270a      	movs	r7, #10
 8022c72:	e7dd      	b.n	8022c30 <_strtol_l.isra.0+0x60>
 8022c74:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8022c78:	2b19      	cmp	r3, #25
 8022c7a:	d801      	bhi.n	8022c80 <_strtol_l.isra.0+0xb0>
 8022c7c:	3c37      	subs	r4, #55	; 0x37
 8022c7e:	e7e8      	b.n	8022c52 <_strtol_l.isra.0+0x82>
 8022c80:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8022c84:	2b19      	cmp	r3, #25
 8022c86:	d804      	bhi.n	8022c92 <_strtol_l.isra.0+0xc2>
 8022c88:	3c57      	subs	r4, #87	; 0x57
 8022c8a:	e7e2      	b.n	8022c52 <_strtol_l.isra.0+0x82>
 8022c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8022c90:	e7eb      	b.n	8022c6a <_strtol_l.isra.0+0x9a>
 8022c92:	1c53      	adds	r3, r2, #1
 8022c94:	d108      	bne.n	8022ca8 <_strtol_l.isra.0+0xd8>
 8022c96:	2322      	movs	r3, #34	; 0x22
 8022c98:	f8c8 3000 	str.w	r3, [r8]
 8022c9c:	4608      	mov	r0, r1
 8022c9e:	f1ba 0f00 	cmp.w	sl, #0
 8022ca2:	d107      	bne.n	8022cb4 <_strtol_l.isra.0+0xe4>
 8022ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ca8:	b106      	cbz	r6, 8022cac <_strtol_l.isra.0+0xdc>
 8022caa:	4240      	negs	r0, r0
 8022cac:	f1ba 0f00 	cmp.w	sl, #0
 8022cb0:	d00c      	beq.n	8022ccc <_strtol_l.isra.0+0xfc>
 8022cb2:	b122      	cbz	r2, 8022cbe <_strtol_l.isra.0+0xee>
 8022cb4:	3d01      	subs	r5, #1
 8022cb6:	f8ca 5000 	str.w	r5, [sl]
 8022cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cbe:	464d      	mov	r5, r9
 8022cc0:	e7f9      	b.n	8022cb6 <_strtol_l.isra.0+0xe6>
 8022cc2:	2430      	movs	r4, #48	; 0x30
 8022cc4:	2f00      	cmp	r7, #0
 8022cc6:	d1b3      	bne.n	8022c30 <_strtol_l.isra.0+0x60>
 8022cc8:	2708      	movs	r7, #8
 8022cca:	e7b1      	b.n	8022c30 <_strtol_l.isra.0+0x60>
 8022ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022cd0 <strtol>:
 8022cd0:	4b08      	ldr	r3, [pc, #32]	; (8022cf4 <strtol+0x24>)
 8022cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cd4:	681c      	ldr	r4, [r3, #0]
 8022cd6:	4d08      	ldr	r5, [pc, #32]	; (8022cf8 <strtol+0x28>)
 8022cd8:	6a23      	ldr	r3, [r4, #32]
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	bf08      	it	eq
 8022cde:	462b      	moveq	r3, r5
 8022ce0:	9300      	str	r3, [sp, #0]
 8022ce2:	4613      	mov	r3, r2
 8022ce4:	460a      	mov	r2, r1
 8022ce6:	4601      	mov	r1, r0
 8022ce8:	4620      	mov	r0, r4
 8022cea:	f7ff ff71 	bl	8022bd0 <_strtol_l.isra.0>
 8022cee:	b003      	add	sp, #12
 8022cf0:	bd30      	pop	{r4, r5, pc}
 8022cf2:	bf00      	nop
 8022cf4:	20000470 	.word	0x20000470
 8022cf8:	200004d4 	.word	0x200004d4

08022cfc <__swbuf_r>:
 8022cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cfe:	460e      	mov	r6, r1
 8022d00:	4614      	mov	r4, r2
 8022d02:	4605      	mov	r5, r0
 8022d04:	b118      	cbz	r0, 8022d0e <__swbuf_r+0x12>
 8022d06:	6983      	ldr	r3, [r0, #24]
 8022d08:	b90b      	cbnz	r3, 8022d0e <__swbuf_r+0x12>
 8022d0a:	f000 f9b7 	bl	802307c <__sinit>
 8022d0e:	4b21      	ldr	r3, [pc, #132]	; (8022d94 <__swbuf_r+0x98>)
 8022d10:	429c      	cmp	r4, r3
 8022d12:	d12a      	bne.n	8022d6a <__swbuf_r+0x6e>
 8022d14:	686c      	ldr	r4, [r5, #4]
 8022d16:	69a3      	ldr	r3, [r4, #24]
 8022d18:	60a3      	str	r3, [r4, #8]
 8022d1a:	89a3      	ldrh	r3, [r4, #12]
 8022d1c:	071a      	lsls	r2, r3, #28
 8022d1e:	d52e      	bpl.n	8022d7e <__swbuf_r+0x82>
 8022d20:	6923      	ldr	r3, [r4, #16]
 8022d22:	b363      	cbz	r3, 8022d7e <__swbuf_r+0x82>
 8022d24:	6923      	ldr	r3, [r4, #16]
 8022d26:	6820      	ldr	r0, [r4, #0]
 8022d28:	1ac0      	subs	r0, r0, r3
 8022d2a:	6963      	ldr	r3, [r4, #20]
 8022d2c:	b2f6      	uxtb	r6, r6
 8022d2e:	4298      	cmp	r0, r3
 8022d30:	4637      	mov	r7, r6
 8022d32:	db04      	blt.n	8022d3e <__swbuf_r+0x42>
 8022d34:	4621      	mov	r1, r4
 8022d36:	4628      	mov	r0, r5
 8022d38:	f000 f936 	bl	8022fa8 <_fflush_r>
 8022d3c:	bb28      	cbnz	r0, 8022d8a <__swbuf_r+0x8e>
 8022d3e:	68a3      	ldr	r3, [r4, #8]
 8022d40:	3b01      	subs	r3, #1
 8022d42:	60a3      	str	r3, [r4, #8]
 8022d44:	6823      	ldr	r3, [r4, #0]
 8022d46:	1c5a      	adds	r2, r3, #1
 8022d48:	6022      	str	r2, [r4, #0]
 8022d4a:	701e      	strb	r6, [r3, #0]
 8022d4c:	6963      	ldr	r3, [r4, #20]
 8022d4e:	3001      	adds	r0, #1
 8022d50:	4298      	cmp	r0, r3
 8022d52:	d004      	beq.n	8022d5e <__swbuf_r+0x62>
 8022d54:	89a3      	ldrh	r3, [r4, #12]
 8022d56:	07db      	lsls	r3, r3, #31
 8022d58:	d519      	bpl.n	8022d8e <__swbuf_r+0x92>
 8022d5a:	2e0a      	cmp	r6, #10
 8022d5c:	d117      	bne.n	8022d8e <__swbuf_r+0x92>
 8022d5e:	4621      	mov	r1, r4
 8022d60:	4628      	mov	r0, r5
 8022d62:	f000 f921 	bl	8022fa8 <_fflush_r>
 8022d66:	b190      	cbz	r0, 8022d8e <__swbuf_r+0x92>
 8022d68:	e00f      	b.n	8022d8a <__swbuf_r+0x8e>
 8022d6a:	4b0b      	ldr	r3, [pc, #44]	; (8022d98 <__swbuf_r+0x9c>)
 8022d6c:	429c      	cmp	r4, r3
 8022d6e:	d101      	bne.n	8022d74 <__swbuf_r+0x78>
 8022d70:	68ac      	ldr	r4, [r5, #8]
 8022d72:	e7d0      	b.n	8022d16 <__swbuf_r+0x1a>
 8022d74:	4b09      	ldr	r3, [pc, #36]	; (8022d9c <__swbuf_r+0xa0>)
 8022d76:	429c      	cmp	r4, r3
 8022d78:	bf08      	it	eq
 8022d7a:	68ec      	ldreq	r4, [r5, #12]
 8022d7c:	e7cb      	b.n	8022d16 <__swbuf_r+0x1a>
 8022d7e:	4621      	mov	r1, r4
 8022d80:	4628      	mov	r0, r5
 8022d82:	f000 f81b 	bl	8022dbc <__swsetup_r>
 8022d86:	2800      	cmp	r0, #0
 8022d88:	d0cc      	beq.n	8022d24 <__swbuf_r+0x28>
 8022d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8022d8e:	4638      	mov	r0, r7
 8022d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d92:	bf00      	nop
 8022d94:	0802ac24 	.word	0x0802ac24
 8022d98:	0802ac44 	.word	0x0802ac44
 8022d9c:	0802ac04 	.word	0x0802ac04

08022da0 <__ascii_wctomb>:
 8022da0:	b149      	cbz	r1, 8022db6 <__ascii_wctomb+0x16>
 8022da2:	2aff      	cmp	r2, #255	; 0xff
 8022da4:	bf85      	ittet	hi
 8022da6:	238a      	movhi	r3, #138	; 0x8a
 8022da8:	6003      	strhi	r3, [r0, #0]
 8022daa:	700a      	strbls	r2, [r1, #0]
 8022dac:	f04f 30ff 	movhi.w	r0, #4294967295
 8022db0:	bf98      	it	ls
 8022db2:	2001      	movls	r0, #1
 8022db4:	4770      	bx	lr
 8022db6:	4608      	mov	r0, r1
 8022db8:	4770      	bx	lr
	...

08022dbc <__swsetup_r>:
 8022dbc:	4b32      	ldr	r3, [pc, #200]	; (8022e88 <__swsetup_r+0xcc>)
 8022dbe:	b570      	push	{r4, r5, r6, lr}
 8022dc0:	681d      	ldr	r5, [r3, #0]
 8022dc2:	4606      	mov	r6, r0
 8022dc4:	460c      	mov	r4, r1
 8022dc6:	b125      	cbz	r5, 8022dd2 <__swsetup_r+0x16>
 8022dc8:	69ab      	ldr	r3, [r5, #24]
 8022dca:	b913      	cbnz	r3, 8022dd2 <__swsetup_r+0x16>
 8022dcc:	4628      	mov	r0, r5
 8022dce:	f000 f955 	bl	802307c <__sinit>
 8022dd2:	4b2e      	ldr	r3, [pc, #184]	; (8022e8c <__swsetup_r+0xd0>)
 8022dd4:	429c      	cmp	r4, r3
 8022dd6:	d10f      	bne.n	8022df8 <__swsetup_r+0x3c>
 8022dd8:	686c      	ldr	r4, [r5, #4]
 8022dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022dde:	b29a      	uxth	r2, r3
 8022de0:	0715      	lsls	r5, r2, #28
 8022de2:	d42c      	bmi.n	8022e3e <__swsetup_r+0x82>
 8022de4:	06d0      	lsls	r0, r2, #27
 8022de6:	d411      	bmi.n	8022e0c <__swsetup_r+0x50>
 8022de8:	2209      	movs	r2, #9
 8022dea:	6032      	str	r2, [r6, #0]
 8022dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022df0:	81a3      	strh	r3, [r4, #12]
 8022df2:	f04f 30ff 	mov.w	r0, #4294967295
 8022df6:	bd70      	pop	{r4, r5, r6, pc}
 8022df8:	4b25      	ldr	r3, [pc, #148]	; (8022e90 <__swsetup_r+0xd4>)
 8022dfa:	429c      	cmp	r4, r3
 8022dfc:	d101      	bne.n	8022e02 <__swsetup_r+0x46>
 8022dfe:	68ac      	ldr	r4, [r5, #8]
 8022e00:	e7eb      	b.n	8022dda <__swsetup_r+0x1e>
 8022e02:	4b24      	ldr	r3, [pc, #144]	; (8022e94 <__swsetup_r+0xd8>)
 8022e04:	429c      	cmp	r4, r3
 8022e06:	bf08      	it	eq
 8022e08:	68ec      	ldreq	r4, [r5, #12]
 8022e0a:	e7e6      	b.n	8022dda <__swsetup_r+0x1e>
 8022e0c:	0751      	lsls	r1, r2, #29
 8022e0e:	d512      	bpl.n	8022e36 <__swsetup_r+0x7a>
 8022e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022e12:	b141      	cbz	r1, 8022e26 <__swsetup_r+0x6a>
 8022e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e18:	4299      	cmp	r1, r3
 8022e1a:	d002      	beq.n	8022e22 <__swsetup_r+0x66>
 8022e1c:	4630      	mov	r0, r6
 8022e1e:	f7ff fd97 	bl	8022950 <_free_r>
 8022e22:	2300      	movs	r3, #0
 8022e24:	6363      	str	r3, [r4, #52]	; 0x34
 8022e26:	89a3      	ldrh	r3, [r4, #12]
 8022e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022e2c:	81a3      	strh	r3, [r4, #12]
 8022e2e:	2300      	movs	r3, #0
 8022e30:	6063      	str	r3, [r4, #4]
 8022e32:	6923      	ldr	r3, [r4, #16]
 8022e34:	6023      	str	r3, [r4, #0]
 8022e36:	89a3      	ldrh	r3, [r4, #12]
 8022e38:	f043 0308 	orr.w	r3, r3, #8
 8022e3c:	81a3      	strh	r3, [r4, #12]
 8022e3e:	6923      	ldr	r3, [r4, #16]
 8022e40:	b94b      	cbnz	r3, 8022e56 <__swsetup_r+0x9a>
 8022e42:	89a3      	ldrh	r3, [r4, #12]
 8022e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e4c:	d003      	beq.n	8022e56 <__swsetup_r+0x9a>
 8022e4e:	4621      	mov	r1, r4
 8022e50:	4630      	mov	r0, r6
 8022e52:	f000 f9c1 	bl	80231d8 <__smakebuf_r>
 8022e56:	89a2      	ldrh	r2, [r4, #12]
 8022e58:	f012 0301 	ands.w	r3, r2, #1
 8022e5c:	d00c      	beq.n	8022e78 <__swsetup_r+0xbc>
 8022e5e:	2300      	movs	r3, #0
 8022e60:	60a3      	str	r3, [r4, #8]
 8022e62:	6963      	ldr	r3, [r4, #20]
 8022e64:	425b      	negs	r3, r3
 8022e66:	61a3      	str	r3, [r4, #24]
 8022e68:	6923      	ldr	r3, [r4, #16]
 8022e6a:	b953      	cbnz	r3, 8022e82 <__swsetup_r+0xc6>
 8022e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022e74:	d1ba      	bne.n	8022dec <__swsetup_r+0x30>
 8022e76:	bd70      	pop	{r4, r5, r6, pc}
 8022e78:	0792      	lsls	r2, r2, #30
 8022e7a:	bf58      	it	pl
 8022e7c:	6963      	ldrpl	r3, [r4, #20]
 8022e7e:	60a3      	str	r3, [r4, #8]
 8022e80:	e7f2      	b.n	8022e68 <__swsetup_r+0xac>
 8022e82:	2000      	movs	r0, #0
 8022e84:	e7f7      	b.n	8022e76 <__swsetup_r+0xba>
 8022e86:	bf00      	nop
 8022e88:	20000470 	.word	0x20000470
 8022e8c:	0802ac24 	.word	0x0802ac24
 8022e90:	0802ac44 	.word	0x0802ac44
 8022e94:	0802ac04 	.word	0x0802ac04

08022e98 <__sflush_r>:
 8022e98:	898a      	ldrh	r2, [r1, #12]
 8022e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e9e:	4605      	mov	r5, r0
 8022ea0:	0710      	lsls	r0, r2, #28
 8022ea2:	460c      	mov	r4, r1
 8022ea4:	d45a      	bmi.n	8022f5c <__sflush_r+0xc4>
 8022ea6:	684b      	ldr	r3, [r1, #4]
 8022ea8:	2b00      	cmp	r3, #0
 8022eaa:	dc05      	bgt.n	8022eb8 <__sflush_r+0x20>
 8022eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022eae:	2b00      	cmp	r3, #0
 8022eb0:	dc02      	bgt.n	8022eb8 <__sflush_r+0x20>
 8022eb2:	2000      	movs	r0, #0
 8022eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022eba:	2e00      	cmp	r6, #0
 8022ebc:	d0f9      	beq.n	8022eb2 <__sflush_r+0x1a>
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022ec4:	682f      	ldr	r7, [r5, #0]
 8022ec6:	602b      	str	r3, [r5, #0]
 8022ec8:	d033      	beq.n	8022f32 <__sflush_r+0x9a>
 8022eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022ecc:	89a3      	ldrh	r3, [r4, #12]
 8022ece:	075a      	lsls	r2, r3, #29
 8022ed0:	d505      	bpl.n	8022ede <__sflush_r+0x46>
 8022ed2:	6863      	ldr	r3, [r4, #4]
 8022ed4:	1ac0      	subs	r0, r0, r3
 8022ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022ed8:	b10b      	cbz	r3, 8022ede <__sflush_r+0x46>
 8022eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022edc:	1ac0      	subs	r0, r0, r3
 8022ede:	2300      	movs	r3, #0
 8022ee0:	4602      	mov	r2, r0
 8022ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022ee4:	6a21      	ldr	r1, [r4, #32]
 8022ee6:	4628      	mov	r0, r5
 8022ee8:	47b0      	blx	r6
 8022eea:	1c43      	adds	r3, r0, #1
 8022eec:	89a3      	ldrh	r3, [r4, #12]
 8022eee:	d106      	bne.n	8022efe <__sflush_r+0x66>
 8022ef0:	6829      	ldr	r1, [r5, #0]
 8022ef2:	291d      	cmp	r1, #29
 8022ef4:	d84b      	bhi.n	8022f8e <__sflush_r+0xf6>
 8022ef6:	4a2b      	ldr	r2, [pc, #172]	; (8022fa4 <__sflush_r+0x10c>)
 8022ef8:	40ca      	lsrs	r2, r1
 8022efa:	07d6      	lsls	r6, r2, #31
 8022efc:	d547      	bpl.n	8022f8e <__sflush_r+0xf6>
 8022efe:	2200      	movs	r2, #0
 8022f00:	6062      	str	r2, [r4, #4]
 8022f02:	04d9      	lsls	r1, r3, #19
 8022f04:	6922      	ldr	r2, [r4, #16]
 8022f06:	6022      	str	r2, [r4, #0]
 8022f08:	d504      	bpl.n	8022f14 <__sflush_r+0x7c>
 8022f0a:	1c42      	adds	r2, r0, #1
 8022f0c:	d101      	bne.n	8022f12 <__sflush_r+0x7a>
 8022f0e:	682b      	ldr	r3, [r5, #0]
 8022f10:	b903      	cbnz	r3, 8022f14 <__sflush_r+0x7c>
 8022f12:	6560      	str	r0, [r4, #84]	; 0x54
 8022f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f16:	602f      	str	r7, [r5, #0]
 8022f18:	2900      	cmp	r1, #0
 8022f1a:	d0ca      	beq.n	8022eb2 <__sflush_r+0x1a>
 8022f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022f20:	4299      	cmp	r1, r3
 8022f22:	d002      	beq.n	8022f2a <__sflush_r+0x92>
 8022f24:	4628      	mov	r0, r5
 8022f26:	f7ff fd13 	bl	8022950 <_free_r>
 8022f2a:	2000      	movs	r0, #0
 8022f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8022f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f32:	6a21      	ldr	r1, [r4, #32]
 8022f34:	2301      	movs	r3, #1
 8022f36:	4628      	mov	r0, r5
 8022f38:	47b0      	blx	r6
 8022f3a:	1c41      	adds	r1, r0, #1
 8022f3c:	d1c6      	bne.n	8022ecc <__sflush_r+0x34>
 8022f3e:	682b      	ldr	r3, [r5, #0]
 8022f40:	2b00      	cmp	r3, #0
 8022f42:	d0c3      	beq.n	8022ecc <__sflush_r+0x34>
 8022f44:	2b1d      	cmp	r3, #29
 8022f46:	d001      	beq.n	8022f4c <__sflush_r+0xb4>
 8022f48:	2b16      	cmp	r3, #22
 8022f4a:	d101      	bne.n	8022f50 <__sflush_r+0xb8>
 8022f4c:	602f      	str	r7, [r5, #0]
 8022f4e:	e7b0      	b.n	8022eb2 <__sflush_r+0x1a>
 8022f50:	89a3      	ldrh	r3, [r4, #12]
 8022f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f56:	81a3      	strh	r3, [r4, #12]
 8022f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f5c:	690f      	ldr	r7, [r1, #16]
 8022f5e:	2f00      	cmp	r7, #0
 8022f60:	d0a7      	beq.n	8022eb2 <__sflush_r+0x1a>
 8022f62:	0793      	lsls	r3, r2, #30
 8022f64:	680e      	ldr	r6, [r1, #0]
 8022f66:	bf08      	it	eq
 8022f68:	694b      	ldreq	r3, [r1, #20]
 8022f6a:	600f      	str	r7, [r1, #0]
 8022f6c:	bf18      	it	ne
 8022f6e:	2300      	movne	r3, #0
 8022f70:	eba6 0807 	sub.w	r8, r6, r7
 8022f74:	608b      	str	r3, [r1, #8]
 8022f76:	f1b8 0f00 	cmp.w	r8, #0
 8022f7a:	dd9a      	ble.n	8022eb2 <__sflush_r+0x1a>
 8022f7c:	4643      	mov	r3, r8
 8022f7e:	463a      	mov	r2, r7
 8022f80:	6a21      	ldr	r1, [r4, #32]
 8022f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022f84:	4628      	mov	r0, r5
 8022f86:	47b0      	blx	r6
 8022f88:	2800      	cmp	r0, #0
 8022f8a:	dc07      	bgt.n	8022f9c <__sflush_r+0x104>
 8022f8c:	89a3      	ldrh	r3, [r4, #12]
 8022f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f92:	81a3      	strh	r3, [r4, #12]
 8022f94:	f04f 30ff 	mov.w	r0, #4294967295
 8022f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f9c:	4407      	add	r7, r0
 8022f9e:	eba8 0800 	sub.w	r8, r8, r0
 8022fa2:	e7e8      	b.n	8022f76 <__sflush_r+0xde>
 8022fa4:	20400001 	.word	0x20400001

08022fa8 <_fflush_r>:
 8022fa8:	b538      	push	{r3, r4, r5, lr}
 8022faa:	690b      	ldr	r3, [r1, #16]
 8022fac:	4605      	mov	r5, r0
 8022fae:	460c      	mov	r4, r1
 8022fb0:	b1db      	cbz	r3, 8022fea <_fflush_r+0x42>
 8022fb2:	b118      	cbz	r0, 8022fbc <_fflush_r+0x14>
 8022fb4:	6983      	ldr	r3, [r0, #24]
 8022fb6:	b90b      	cbnz	r3, 8022fbc <_fflush_r+0x14>
 8022fb8:	f000 f860 	bl	802307c <__sinit>
 8022fbc:	4b0c      	ldr	r3, [pc, #48]	; (8022ff0 <_fflush_r+0x48>)
 8022fbe:	429c      	cmp	r4, r3
 8022fc0:	d109      	bne.n	8022fd6 <_fflush_r+0x2e>
 8022fc2:	686c      	ldr	r4, [r5, #4]
 8022fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fc8:	b17b      	cbz	r3, 8022fea <_fflush_r+0x42>
 8022fca:	4621      	mov	r1, r4
 8022fcc:	4628      	mov	r0, r5
 8022fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022fd2:	f7ff bf61 	b.w	8022e98 <__sflush_r>
 8022fd6:	4b07      	ldr	r3, [pc, #28]	; (8022ff4 <_fflush_r+0x4c>)
 8022fd8:	429c      	cmp	r4, r3
 8022fda:	d101      	bne.n	8022fe0 <_fflush_r+0x38>
 8022fdc:	68ac      	ldr	r4, [r5, #8]
 8022fde:	e7f1      	b.n	8022fc4 <_fflush_r+0x1c>
 8022fe0:	4b05      	ldr	r3, [pc, #20]	; (8022ff8 <_fflush_r+0x50>)
 8022fe2:	429c      	cmp	r4, r3
 8022fe4:	bf08      	it	eq
 8022fe6:	68ec      	ldreq	r4, [r5, #12]
 8022fe8:	e7ec      	b.n	8022fc4 <_fflush_r+0x1c>
 8022fea:	2000      	movs	r0, #0
 8022fec:	bd38      	pop	{r3, r4, r5, pc}
 8022fee:	bf00      	nop
 8022ff0:	0802ac24 	.word	0x0802ac24
 8022ff4:	0802ac44 	.word	0x0802ac44
 8022ff8:	0802ac04 	.word	0x0802ac04

08022ffc <_cleanup_r>:
 8022ffc:	4901      	ldr	r1, [pc, #4]	; (8023004 <_cleanup_r+0x8>)
 8022ffe:	f000 b8a9 	b.w	8023154 <_fwalk_reent>
 8023002:	bf00      	nop
 8023004:	08022fa9 	.word	0x08022fa9

08023008 <std.isra.0>:
 8023008:	2300      	movs	r3, #0
 802300a:	b510      	push	{r4, lr}
 802300c:	4604      	mov	r4, r0
 802300e:	6003      	str	r3, [r0, #0]
 8023010:	6043      	str	r3, [r0, #4]
 8023012:	6083      	str	r3, [r0, #8]
 8023014:	8181      	strh	r1, [r0, #12]
 8023016:	6643      	str	r3, [r0, #100]	; 0x64
 8023018:	81c2      	strh	r2, [r0, #14]
 802301a:	6103      	str	r3, [r0, #16]
 802301c:	6143      	str	r3, [r0, #20]
 802301e:	6183      	str	r3, [r0, #24]
 8023020:	4619      	mov	r1, r3
 8023022:	2208      	movs	r2, #8
 8023024:	305c      	adds	r0, #92	; 0x5c
 8023026:	f7ff fc8a 	bl	802293e <memset>
 802302a:	4b05      	ldr	r3, [pc, #20]	; (8023040 <std.isra.0+0x38>)
 802302c:	6263      	str	r3, [r4, #36]	; 0x24
 802302e:	4b05      	ldr	r3, [pc, #20]	; (8023044 <std.isra.0+0x3c>)
 8023030:	62a3      	str	r3, [r4, #40]	; 0x28
 8023032:	4b05      	ldr	r3, [pc, #20]	; (8023048 <std.isra.0+0x40>)
 8023034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023036:	4b05      	ldr	r3, [pc, #20]	; (802304c <std.isra.0+0x44>)
 8023038:	6224      	str	r4, [r4, #32]
 802303a:	6323      	str	r3, [r4, #48]	; 0x30
 802303c:	bd10      	pop	{r4, pc}
 802303e:	bf00      	nop
 8023040:	08023809 	.word	0x08023809
 8023044:	0802382b 	.word	0x0802382b
 8023048:	08023863 	.word	0x08023863
 802304c:	08023887 	.word	0x08023887

08023050 <__sfmoreglue>:
 8023050:	b570      	push	{r4, r5, r6, lr}
 8023052:	1e4a      	subs	r2, r1, #1
 8023054:	2568      	movs	r5, #104	; 0x68
 8023056:	4355      	muls	r5, r2
 8023058:	460e      	mov	r6, r1
 802305a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802305e:	f7ff fcc5 	bl	80229ec <_malloc_r>
 8023062:	4604      	mov	r4, r0
 8023064:	b140      	cbz	r0, 8023078 <__sfmoreglue+0x28>
 8023066:	2100      	movs	r1, #0
 8023068:	e880 0042 	stmia.w	r0, {r1, r6}
 802306c:	300c      	adds	r0, #12
 802306e:	60a0      	str	r0, [r4, #8]
 8023070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023074:	f7ff fc63 	bl	802293e <memset>
 8023078:	4620      	mov	r0, r4
 802307a:	bd70      	pop	{r4, r5, r6, pc}

0802307c <__sinit>:
 802307c:	6983      	ldr	r3, [r0, #24]
 802307e:	b510      	push	{r4, lr}
 8023080:	4604      	mov	r4, r0
 8023082:	bb33      	cbnz	r3, 80230d2 <__sinit+0x56>
 8023084:	6483      	str	r3, [r0, #72]	; 0x48
 8023086:	64c3      	str	r3, [r0, #76]	; 0x4c
 8023088:	6503      	str	r3, [r0, #80]	; 0x50
 802308a:	4b12      	ldr	r3, [pc, #72]	; (80230d4 <__sinit+0x58>)
 802308c:	4a12      	ldr	r2, [pc, #72]	; (80230d8 <__sinit+0x5c>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	6282      	str	r2, [r0, #40]	; 0x28
 8023092:	4298      	cmp	r0, r3
 8023094:	bf04      	itt	eq
 8023096:	2301      	moveq	r3, #1
 8023098:	6183      	streq	r3, [r0, #24]
 802309a:	f000 f81f 	bl	80230dc <__sfp>
 802309e:	6060      	str	r0, [r4, #4]
 80230a0:	4620      	mov	r0, r4
 80230a2:	f000 f81b 	bl	80230dc <__sfp>
 80230a6:	60a0      	str	r0, [r4, #8]
 80230a8:	4620      	mov	r0, r4
 80230aa:	f000 f817 	bl	80230dc <__sfp>
 80230ae:	2200      	movs	r2, #0
 80230b0:	60e0      	str	r0, [r4, #12]
 80230b2:	2104      	movs	r1, #4
 80230b4:	6860      	ldr	r0, [r4, #4]
 80230b6:	f7ff ffa7 	bl	8023008 <std.isra.0>
 80230ba:	2201      	movs	r2, #1
 80230bc:	2109      	movs	r1, #9
 80230be:	68a0      	ldr	r0, [r4, #8]
 80230c0:	f7ff ffa2 	bl	8023008 <std.isra.0>
 80230c4:	2202      	movs	r2, #2
 80230c6:	2112      	movs	r1, #18
 80230c8:	68e0      	ldr	r0, [r4, #12]
 80230ca:	f7ff ff9d 	bl	8023008 <std.isra.0>
 80230ce:	2301      	movs	r3, #1
 80230d0:	61a3      	str	r3, [r4, #24]
 80230d2:	bd10      	pop	{r4, pc}
 80230d4:	0802aaf4 	.word	0x0802aaf4
 80230d8:	08022ffd 	.word	0x08022ffd

080230dc <__sfp>:
 80230dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230de:	4b1c      	ldr	r3, [pc, #112]	; (8023150 <__sfp+0x74>)
 80230e0:	681e      	ldr	r6, [r3, #0]
 80230e2:	69b3      	ldr	r3, [r6, #24]
 80230e4:	4607      	mov	r7, r0
 80230e6:	b913      	cbnz	r3, 80230ee <__sfp+0x12>
 80230e8:	4630      	mov	r0, r6
 80230ea:	f7ff ffc7 	bl	802307c <__sinit>
 80230ee:	3648      	adds	r6, #72	; 0x48
 80230f0:	68b4      	ldr	r4, [r6, #8]
 80230f2:	6873      	ldr	r3, [r6, #4]
 80230f4:	3b01      	subs	r3, #1
 80230f6:	d503      	bpl.n	8023100 <__sfp+0x24>
 80230f8:	6833      	ldr	r3, [r6, #0]
 80230fa:	b133      	cbz	r3, 802310a <__sfp+0x2e>
 80230fc:	6836      	ldr	r6, [r6, #0]
 80230fe:	e7f7      	b.n	80230f0 <__sfp+0x14>
 8023100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023104:	b16d      	cbz	r5, 8023122 <__sfp+0x46>
 8023106:	3468      	adds	r4, #104	; 0x68
 8023108:	e7f4      	b.n	80230f4 <__sfp+0x18>
 802310a:	2104      	movs	r1, #4
 802310c:	4638      	mov	r0, r7
 802310e:	f7ff ff9f 	bl	8023050 <__sfmoreglue>
 8023112:	6030      	str	r0, [r6, #0]
 8023114:	2800      	cmp	r0, #0
 8023116:	d1f1      	bne.n	80230fc <__sfp+0x20>
 8023118:	230c      	movs	r3, #12
 802311a:	603b      	str	r3, [r7, #0]
 802311c:	4604      	mov	r4, r0
 802311e:	4620      	mov	r0, r4
 8023120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023126:	81e3      	strh	r3, [r4, #14]
 8023128:	2301      	movs	r3, #1
 802312a:	81a3      	strh	r3, [r4, #12]
 802312c:	6665      	str	r5, [r4, #100]	; 0x64
 802312e:	6025      	str	r5, [r4, #0]
 8023130:	60a5      	str	r5, [r4, #8]
 8023132:	6065      	str	r5, [r4, #4]
 8023134:	6125      	str	r5, [r4, #16]
 8023136:	6165      	str	r5, [r4, #20]
 8023138:	61a5      	str	r5, [r4, #24]
 802313a:	2208      	movs	r2, #8
 802313c:	4629      	mov	r1, r5
 802313e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023142:	f7ff fbfc 	bl	802293e <memset>
 8023146:	6365      	str	r5, [r4, #52]	; 0x34
 8023148:	63a5      	str	r5, [r4, #56]	; 0x38
 802314a:	64a5      	str	r5, [r4, #72]	; 0x48
 802314c:	64e5      	str	r5, [r4, #76]	; 0x4c
 802314e:	e7e6      	b.n	802311e <__sfp+0x42>
 8023150:	0802aaf4 	.word	0x0802aaf4

08023154 <_fwalk_reent>:
 8023154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023158:	4680      	mov	r8, r0
 802315a:	4689      	mov	r9, r1
 802315c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023160:	2600      	movs	r6, #0
 8023162:	b914      	cbnz	r4, 802316a <_fwalk_reent+0x16>
 8023164:	4630      	mov	r0, r6
 8023166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802316a:	68a5      	ldr	r5, [r4, #8]
 802316c:	6867      	ldr	r7, [r4, #4]
 802316e:	3f01      	subs	r7, #1
 8023170:	d501      	bpl.n	8023176 <_fwalk_reent+0x22>
 8023172:	6824      	ldr	r4, [r4, #0]
 8023174:	e7f5      	b.n	8023162 <_fwalk_reent+0xe>
 8023176:	89ab      	ldrh	r3, [r5, #12]
 8023178:	2b01      	cmp	r3, #1
 802317a:	d907      	bls.n	802318c <_fwalk_reent+0x38>
 802317c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023180:	3301      	adds	r3, #1
 8023182:	d003      	beq.n	802318c <_fwalk_reent+0x38>
 8023184:	4629      	mov	r1, r5
 8023186:	4640      	mov	r0, r8
 8023188:	47c8      	blx	r9
 802318a:	4306      	orrs	r6, r0
 802318c:	3568      	adds	r5, #104	; 0x68
 802318e:	e7ee      	b.n	802316e <_fwalk_reent+0x1a>

08023190 <__swhatbuf_r>:
 8023190:	b570      	push	{r4, r5, r6, lr}
 8023192:	460e      	mov	r6, r1
 8023194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023198:	2900      	cmp	r1, #0
 802319a:	b090      	sub	sp, #64	; 0x40
 802319c:	4614      	mov	r4, r2
 802319e:	461d      	mov	r5, r3
 80231a0:	da07      	bge.n	80231b2 <__swhatbuf_r+0x22>
 80231a2:	2300      	movs	r3, #0
 80231a4:	602b      	str	r3, [r5, #0]
 80231a6:	89b3      	ldrh	r3, [r6, #12]
 80231a8:	061a      	lsls	r2, r3, #24
 80231aa:	d410      	bmi.n	80231ce <__swhatbuf_r+0x3e>
 80231ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80231b0:	e00e      	b.n	80231d0 <__swhatbuf_r+0x40>
 80231b2:	aa01      	add	r2, sp, #4
 80231b4:	f000 fb8e 	bl	80238d4 <_fstat_r>
 80231b8:	2800      	cmp	r0, #0
 80231ba:	dbf2      	blt.n	80231a2 <__swhatbuf_r+0x12>
 80231bc:	9a02      	ldr	r2, [sp, #8]
 80231be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80231c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80231c6:	425a      	negs	r2, r3
 80231c8:	415a      	adcs	r2, r3
 80231ca:	602a      	str	r2, [r5, #0]
 80231cc:	e7ee      	b.n	80231ac <__swhatbuf_r+0x1c>
 80231ce:	2340      	movs	r3, #64	; 0x40
 80231d0:	2000      	movs	r0, #0
 80231d2:	6023      	str	r3, [r4, #0]
 80231d4:	b010      	add	sp, #64	; 0x40
 80231d6:	bd70      	pop	{r4, r5, r6, pc}

080231d8 <__smakebuf_r>:
 80231d8:	898b      	ldrh	r3, [r1, #12]
 80231da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80231dc:	079d      	lsls	r5, r3, #30
 80231de:	4606      	mov	r6, r0
 80231e0:	460c      	mov	r4, r1
 80231e2:	d507      	bpl.n	80231f4 <__smakebuf_r+0x1c>
 80231e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80231e8:	6023      	str	r3, [r4, #0]
 80231ea:	6123      	str	r3, [r4, #16]
 80231ec:	2301      	movs	r3, #1
 80231ee:	6163      	str	r3, [r4, #20]
 80231f0:	b002      	add	sp, #8
 80231f2:	bd70      	pop	{r4, r5, r6, pc}
 80231f4:	ab01      	add	r3, sp, #4
 80231f6:	466a      	mov	r2, sp
 80231f8:	f7ff ffca 	bl	8023190 <__swhatbuf_r>
 80231fc:	9900      	ldr	r1, [sp, #0]
 80231fe:	4605      	mov	r5, r0
 8023200:	4630      	mov	r0, r6
 8023202:	f7ff fbf3 	bl	80229ec <_malloc_r>
 8023206:	b948      	cbnz	r0, 802321c <__smakebuf_r+0x44>
 8023208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802320c:	059a      	lsls	r2, r3, #22
 802320e:	d4ef      	bmi.n	80231f0 <__smakebuf_r+0x18>
 8023210:	f023 0303 	bic.w	r3, r3, #3
 8023214:	f043 0302 	orr.w	r3, r3, #2
 8023218:	81a3      	strh	r3, [r4, #12]
 802321a:	e7e3      	b.n	80231e4 <__smakebuf_r+0xc>
 802321c:	4b0d      	ldr	r3, [pc, #52]	; (8023254 <__smakebuf_r+0x7c>)
 802321e:	62b3      	str	r3, [r6, #40]	; 0x28
 8023220:	89a3      	ldrh	r3, [r4, #12]
 8023222:	6020      	str	r0, [r4, #0]
 8023224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023228:	81a3      	strh	r3, [r4, #12]
 802322a:	9b00      	ldr	r3, [sp, #0]
 802322c:	6163      	str	r3, [r4, #20]
 802322e:	9b01      	ldr	r3, [sp, #4]
 8023230:	6120      	str	r0, [r4, #16]
 8023232:	b15b      	cbz	r3, 802324c <__smakebuf_r+0x74>
 8023234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023238:	4630      	mov	r0, r6
 802323a:	f000 fb5d 	bl	80238f8 <_isatty_r>
 802323e:	b128      	cbz	r0, 802324c <__smakebuf_r+0x74>
 8023240:	89a3      	ldrh	r3, [r4, #12]
 8023242:	f023 0303 	bic.w	r3, r3, #3
 8023246:	f043 0301 	orr.w	r3, r3, #1
 802324a:	81a3      	strh	r3, [r4, #12]
 802324c:	89a3      	ldrh	r3, [r4, #12]
 802324e:	431d      	orrs	r5, r3
 8023250:	81a5      	strh	r5, [r4, #12]
 8023252:	e7cd      	b.n	80231f0 <__smakebuf_r+0x18>
 8023254:	08022ffd 	.word	0x08022ffd

08023258 <__malloc_lock>:
 8023258:	4770      	bx	lr

0802325a <__malloc_unlock>:
 802325a:	4770      	bx	lr

0802325c <__sfputc_r>:
 802325c:	6893      	ldr	r3, [r2, #8]
 802325e:	3b01      	subs	r3, #1
 8023260:	2b00      	cmp	r3, #0
 8023262:	b410      	push	{r4}
 8023264:	6093      	str	r3, [r2, #8]
 8023266:	da09      	bge.n	802327c <__sfputc_r+0x20>
 8023268:	6994      	ldr	r4, [r2, #24]
 802326a:	42a3      	cmp	r3, r4
 802326c:	db02      	blt.n	8023274 <__sfputc_r+0x18>
 802326e:	b2cb      	uxtb	r3, r1
 8023270:	2b0a      	cmp	r3, #10
 8023272:	d103      	bne.n	802327c <__sfputc_r+0x20>
 8023274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023278:	f7ff bd40 	b.w	8022cfc <__swbuf_r>
 802327c:	6813      	ldr	r3, [r2, #0]
 802327e:	1c58      	adds	r0, r3, #1
 8023280:	6010      	str	r0, [r2, #0]
 8023282:	7019      	strb	r1, [r3, #0]
 8023284:	b2c8      	uxtb	r0, r1
 8023286:	f85d 4b04 	ldr.w	r4, [sp], #4
 802328a:	4770      	bx	lr

0802328c <__sfputs_r>:
 802328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802328e:	4606      	mov	r6, r0
 8023290:	460f      	mov	r7, r1
 8023292:	4614      	mov	r4, r2
 8023294:	18d5      	adds	r5, r2, r3
 8023296:	42ac      	cmp	r4, r5
 8023298:	d101      	bne.n	802329e <__sfputs_r+0x12>
 802329a:	2000      	movs	r0, #0
 802329c:	e007      	b.n	80232ae <__sfputs_r+0x22>
 802329e:	463a      	mov	r2, r7
 80232a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232a4:	4630      	mov	r0, r6
 80232a6:	f7ff ffd9 	bl	802325c <__sfputc_r>
 80232aa:	1c43      	adds	r3, r0, #1
 80232ac:	d1f3      	bne.n	8023296 <__sfputs_r+0xa>
 80232ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080232b0 <_vfiprintf_r>:
 80232b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b4:	b09d      	sub	sp, #116	; 0x74
 80232b6:	460c      	mov	r4, r1
 80232b8:	4617      	mov	r7, r2
 80232ba:	9303      	str	r3, [sp, #12]
 80232bc:	4606      	mov	r6, r0
 80232be:	b118      	cbz	r0, 80232c8 <_vfiprintf_r+0x18>
 80232c0:	6983      	ldr	r3, [r0, #24]
 80232c2:	b90b      	cbnz	r3, 80232c8 <_vfiprintf_r+0x18>
 80232c4:	f7ff feda 	bl	802307c <__sinit>
 80232c8:	4b7c      	ldr	r3, [pc, #496]	; (80234bc <_vfiprintf_r+0x20c>)
 80232ca:	429c      	cmp	r4, r3
 80232cc:	d157      	bne.n	802337e <_vfiprintf_r+0xce>
 80232ce:	6874      	ldr	r4, [r6, #4]
 80232d0:	89a3      	ldrh	r3, [r4, #12]
 80232d2:	0718      	lsls	r0, r3, #28
 80232d4:	d55d      	bpl.n	8023392 <_vfiprintf_r+0xe2>
 80232d6:	6923      	ldr	r3, [r4, #16]
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d05a      	beq.n	8023392 <_vfiprintf_r+0xe2>
 80232dc:	2300      	movs	r3, #0
 80232de:	9309      	str	r3, [sp, #36]	; 0x24
 80232e0:	2320      	movs	r3, #32
 80232e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232e6:	2330      	movs	r3, #48	; 0x30
 80232e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232ec:	f04f 0b01 	mov.w	fp, #1
 80232f0:	46b8      	mov	r8, r7
 80232f2:	4645      	mov	r5, r8
 80232f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d155      	bne.n	80233a8 <_vfiprintf_r+0xf8>
 80232fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8023300:	d00b      	beq.n	802331a <_vfiprintf_r+0x6a>
 8023302:	4653      	mov	r3, sl
 8023304:	463a      	mov	r2, r7
 8023306:	4621      	mov	r1, r4
 8023308:	4630      	mov	r0, r6
 802330a:	f7ff ffbf 	bl	802328c <__sfputs_r>
 802330e:	3001      	adds	r0, #1
 8023310:	f000 80c4 	beq.w	802349c <_vfiprintf_r+0x1ec>
 8023314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023316:	4453      	add	r3, sl
 8023318:	9309      	str	r3, [sp, #36]	; 0x24
 802331a:	f898 3000 	ldrb.w	r3, [r8]
 802331e:	2b00      	cmp	r3, #0
 8023320:	f000 80bc 	beq.w	802349c <_vfiprintf_r+0x1ec>
 8023324:	2300      	movs	r3, #0
 8023326:	f04f 32ff 	mov.w	r2, #4294967295
 802332a:	9304      	str	r3, [sp, #16]
 802332c:	9307      	str	r3, [sp, #28]
 802332e:	9205      	str	r2, [sp, #20]
 8023330:	9306      	str	r3, [sp, #24]
 8023332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023336:	931a      	str	r3, [sp, #104]	; 0x68
 8023338:	2205      	movs	r2, #5
 802333a:	7829      	ldrb	r1, [r5, #0]
 802333c:	4860      	ldr	r0, [pc, #384]	; (80234c0 <_vfiprintf_r+0x210>)
 802333e:	f7dc ff7f 	bl	8000240 <memchr>
 8023342:	f105 0801 	add.w	r8, r5, #1
 8023346:	9b04      	ldr	r3, [sp, #16]
 8023348:	2800      	cmp	r0, #0
 802334a:	d131      	bne.n	80233b0 <_vfiprintf_r+0x100>
 802334c:	06d9      	lsls	r1, r3, #27
 802334e:	bf44      	itt	mi
 8023350:	2220      	movmi	r2, #32
 8023352:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023356:	071a      	lsls	r2, r3, #28
 8023358:	bf44      	itt	mi
 802335a:	222b      	movmi	r2, #43	; 0x2b
 802335c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023360:	782a      	ldrb	r2, [r5, #0]
 8023362:	2a2a      	cmp	r2, #42	; 0x2a
 8023364:	d02c      	beq.n	80233c0 <_vfiprintf_r+0x110>
 8023366:	9a07      	ldr	r2, [sp, #28]
 8023368:	2100      	movs	r1, #0
 802336a:	200a      	movs	r0, #10
 802336c:	46a8      	mov	r8, r5
 802336e:	3501      	adds	r5, #1
 8023370:	f898 3000 	ldrb.w	r3, [r8]
 8023374:	3b30      	subs	r3, #48	; 0x30
 8023376:	2b09      	cmp	r3, #9
 8023378:	d96d      	bls.n	8023456 <_vfiprintf_r+0x1a6>
 802337a:	b371      	cbz	r1, 80233da <_vfiprintf_r+0x12a>
 802337c:	e026      	b.n	80233cc <_vfiprintf_r+0x11c>
 802337e:	4b51      	ldr	r3, [pc, #324]	; (80234c4 <_vfiprintf_r+0x214>)
 8023380:	429c      	cmp	r4, r3
 8023382:	d101      	bne.n	8023388 <_vfiprintf_r+0xd8>
 8023384:	68b4      	ldr	r4, [r6, #8]
 8023386:	e7a3      	b.n	80232d0 <_vfiprintf_r+0x20>
 8023388:	4b4f      	ldr	r3, [pc, #316]	; (80234c8 <_vfiprintf_r+0x218>)
 802338a:	429c      	cmp	r4, r3
 802338c:	bf08      	it	eq
 802338e:	68f4      	ldreq	r4, [r6, #12]
 8023390:	e79e      	b.n	80232d0 <_vfiprintf_r+0x20>
 8023392:	4621      	mov	r1, r4
 8023394:	4630      	mov	r0, r6
 8023396:	f7ff fd11 	bl	8022dbc <__swsetup_r>
 802339a:	2800      	cmp	r0, #0
 802339c:	d09e      	beq.n	80232dc <_vfiprintf_r+0x2c>
 802339e:	f04f 30ff 	mov.w	r0, #4294967295
 80233a2:	b01d      	add	sp, #116	; 0x74
 80233a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233a8:	2b25      	cmp	r3, #37	; 0x25
 80233aa:	d0a7      	beq.n	80232fc <_vfiprintf_r+0x4c>
 80233ac:	46a8      	mov	r8, r5
 80233ae:	e7a0      	b.n	80232f2 <_vfiprintf_r+0x42>
 80233b0:	4a43      	ldr	r2, [pc, #268]	; (80234c0 <_vfiprintf_r+0x210>)
 80233b2:	1a80      	subs	r0, r0, r2
 80233b4:	fa0b f000 	lsl.w	r0, fp, r0
 80233b8:	4318      	orrs	r0, r3
 80233ba:	9004      	str	r0, [sp, #16]
 80233bc:	4645      	mov	r5, r8
 80233be:	e7bb      	b.n	8023338 <_vfiprintf_r+0x88>
 80233c0:	9a03      	ldr	r2, [sp, #12]
 80233c2:	1d11      	adds	r1, r2, #4
 80233c4:	6812      	ldr	r2, [r2, #0]
 80233c6:	9103      	str	r1, [sp, #12]
 80233c8:	2a00      	cmp	r2, #0
 80233ca:	db01      	blt.n	80233d0 <_vfiprintf_r+0x120>
 80233cc:	9207      	str	r2, [sp, #28]
 80233ce:	e004      	b.n	80233da <_vfiprintf_r+0x12a>
 80233d0:	4252      	negs	r2, r2
 80233d2:	f043 0302 	orr.w	r3, r3, #2
 80233d6:	9207      	str	r2, [sp, #28]
 80233d8:	9304      	str	r3, [sp, #16]
 80233da:	f898 3000 	ldrb.w	r3, [r8]
 80233de:	2b2e      	cmp	r3, #46	; 0x2e
 80233e0:	d110      	bne.n	8023404 <_vfiprintf_r+0x154>
 80233e2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80233e6:	2b2a      	cmp	r3, #42	; 0x2a
 80233e8:	f108 0101 	add.w	r1, r8, #1
 80233ec:	d137      	bne.n	802345e <_vfiprintf_r+0x1ae>
 80233ee:	9b03      	ldr	r3, [sp, #12]
 80233f0:	1d1a      	adds	r2, r3, #4
 80233f2:	681b      	ldr	r3, [r3, #0]
 80233f4:	9203      	str	r2, [sp, #12]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	bfb8      	it	lt
 80233fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80233fe:	f108 0802 	add.w	r8, r8, #2
 8023402:	9305      	str	r3, [sp, #20]
 8023404:	4d31      	ldr	r5, [pc, #196]	; (80234cc <_vfiprintf_r+0x21c>)
 8023406:	f898 1000 	ldrb.w	r1, [r8]
 802340a:	2203      	movs	r2, #3
 802340c:	4628      	mov	r0, r5
 802340e:	f7dc ff17 	bl	8000240 <memchr>
 8023412:	b140      	cbz	r0, 8023426 <_vfiprintf_r+0x176>
 8023414:	2340      	movs	r3, #64	; 0x40
 8023416:	1b40      	subs	r0, r0, r5
 8023418:	fa03 f000 	lsl.w	r0, r3, r0
 802341c:	9b04      	ldr	r3, [sp, #16]
 802341e:	4303      	orrs	r3, r0
 8023420:	9304      	str	r3, [sp, #16]
 8023422:	f108 0801 	add.w	r8, r8, #1
 8023426:	f898 1000 	ldrb.w	r1, [r8]
 802342a:	4829      	ldr	r0, [pc, #164]	; (80234d0 <_vfiprintf_r+0x220>)
 802342c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023430:	2206      	movs	r2, #6
 8023432:	f108 0701 	add.w	r7, r8, #1
 8023436:	f7dc ff03 	bl	8000240 <memchr>
 802343a:	2800      	cmp	r0, #0
 802343c:	d034      	beq.n	80234a8 <_vfiprintf_r+0x1f8>
 802343e:	4b25      	ldr	r3, [pc, #148]	; (80234d4 <_vfiprintf_r+0x224>)
 8023440:	bb03      	cbnz	r3, 8023484 <_vfiprintf_r+0x1d4>
 8023442:	9b03      	ldr	r3, [sp, #12]
 8023444:	3307      	adds	r3, #7
 8023446:	f023 0307 	bic.w	r3, r3, #7
 802344a:	3308      	adds	r3, #8
 802344c:	9303      	str	r3, [sp, #12]
 802344e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023450:	444b      	add	r3, r9
 8023452:	9309      	str	r3, [sp, #36]	; 0x24
 8023454:	e74c      	b.n	80232f0 <_vfiprintf_r+0x40>
 8023456:	fb00 3202 	mla	r2, r0, r2, r3
 802345a:	2101      	movs	r1, #1
 802345c:	e786      	b.n	802336c <_vfiprintf_r+0xbc>
 802345e:	2300      	movs	r3, #0
 8023460:	9305      	str	r3, [sp, #20]
 8023462:	4618      	mov	r0, r3
 8023464:	250a      	movs	r5, #10
 8023466:	4688      	mov	r8, r1
 8023468:	3101      	adds	r1, #1
 802346a:	f898 2000 	ldrb.w	r2, [r8]
 802346e:	3a30      	subs	r2, #48	; 0x30
 8023470:	2a09      	cmp	r2, #9
 8023472:	d903      	bls.n	802347c <_vfiprintf_r+0x1cc>
 8023474:	2b00      	cmp	r3, #0
 8023476:	d0c5      	beq.n	8023404 <_vfiprintf_r+0x154>
 8023478:	9005      	str	r0, [sp, #20]
 802347a:	e7c3      	b.n	8023404 <_vfiprintf_r+0x154>
 802347c:	fb05 2000 	mla	r0, r5, r0, r2
 8023480:	2301      	movs	r3, #1
 8023482:	e7f0      	b.n	8023466 <_vfiprintf_r+0x1b6>
 8023484:	ab03      	add	r3, sp, #12
 8023486:	9300      	str	r3, [sp, #0]
 8023488:	4622      	mov	r2, r4
 802348a:	4b13      	ldr	r3, [pc, #76]	; (80234d8 <_vfiprintf_r+0x228>)
 802348c:	a904      	add	r1, sp, #16
 802348e:	4630      	mov	r0, r6
 8023490:	f3af 8000 	nop.w
 8023494:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023498:	4681      	mov	r9, r0
 802349a:	d1d8      	bne.n	802344e <_vfiprintf_r+0x19e>
 802349c:	89a3      	ldrh	r3, [r4, #12]
 802349e:	065b      	lsls	r3, r3, #25
 80234a0:	f53f af7d 	bmi.w	802339e <_vfiprintf_r+0xee>
 80234a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234a6:	e77c      	b.n	80233a2 <_vfiprintf_r+0xf2>
 80234a8:	ab03      	add	r3, sp, #12
 80234aa:	9300      	str	r3, [sp, #0]
 80234ac:	4622      	mov	r2, r4
 80234ae:	4b0a      	ldr	r3, [pc, #40]	; (80234d8 <_vfiprintf_r+0x228>)
 80234b0:	a904      	add	r1, sp, #16
 80234b2:	4630      	mov	r0, r6
 80234b4:	f000 f888 	bl	80235c8 <_printf_i>
 80234b8:	e7ec      	b.n	8023494 <_vfiprintf_r+0x1e4>
 80234ba:	bf00      	nop
 80234bc:	0802ac24 	.word	0x0802ac24
 80234c0:	0802ac64 	.word	0x0802ac64
 80234c4:	0802ac44 	.word	0x0802ac44
 80234c8:	0802ac04 	.word	0x0802ac04
 80234cc:	0802ac6a 	.word	0x0802ac6a
 80234d0:	0802ac6e 	.word	0x0802ac6e
 80234d4:	00000000 	.word	0x00000000
 80234d8:	0802328d 	.word	0x0802328d

080234dc <_printf_common>:
 80234dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234e0:	4691      	mov	r9, r2
 80234e2:	461f      	mov	r7, r3
 80234e4:	688a      	ldr	r2, [r1, #8]
 80234e6:	690b      	ldr	r3, [r1, #16]
 80234e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80234ec:	4293      	cmp	r3, r2
 80234ee:	bfb8      	it	lt
 80234f0:	4613      	movlt	r3, r2
 80234f2:	f8c9 3000 	str.w	r3, [r9]
 80234f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80234fa:	4606      	mov	r6, r0
 80234fc:	460c      	mov	r4, r1
 80234fe:	b112      	cbz	r2, 8023506 <_printf_common+0x2a>
 8023500:	3301      	adds	r3, #1
 8023502:	f8c9 3000 	str.w	r3, [r9]
 8023506:	6823      	ldr	r3, [r4, #0]
 8023508:	0699      	lsls	r1, r3, #26
 802350a:	bf42      	ittt	mi
 802350c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023510:	3302      	addmi	r3, #2
 8023512:	f8c9 3000 	strmi.w	r3, [r9]
 8023516:	6825      	ldr	r5, [r4, #0]
 8023518:	f015 0506 	ands.w	r5, r5, #6
 802351c:	d107      	bne.n	802352e <_printf_common+0x52>
 802351e:	f104 0a19 	add.w	sl, r4, #25
 8023522:	68e3      	ldr	r3, [r4, #12]
 8023524:	f8d9 2000 	ldr.w	r2, [r9]
 8023528:	1a9b      	subs	r3, r3, r2
 802352a:	429d      	cmp	r5, r3
 802352c:	db29      	blt.n	8023582 <_printf_common+0xa6>
 802352e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8023532:	6822      	ldr	r2, [r4, #0]
 8023534:	3300      	adds	r3, #0
 8023536:	bf18      	it	ne
 8023538:	2301      	movne	r3, #1
 802353a:	0692      	lsls	r2, r2, #26
 802353c:	d42e      	bmi.n	802359c <_printf_common+0xc0>
 802353e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023542:	4639      	mov	r1, r7
 8023544:	4630      	mov	r0, r6
 8023546:	47c0      	blx	r8
 8023548:	3001      	adds	r0, #1
 802354a:	d021      	beq.n	8023590 <_printf_common+0xb4>
 802354c:	6823      	ldr	r3, [r4, #0]
 802354e:	68e5      	ldr	r5, [r4, #12]
 8023550:	f8d9 2000 	ldr.w	r2, [r9]
 8023554:	f003 0306 	and.w	r3, r3, #6
 8023558:	2b04      	cmp	r3, #4
 802355a:	bf08      	it	eq
 802355c:	1aad      	subeq	r5, r5, r2
 802355e:	68a3      	ldr	r3, [r4, #8]
 8023560:	6922      	ldr	r2, [r4, #16]
 8023562:	bf0c      	ite	eq
 8023564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023568:	2500      	movne	r5, #0
 802356a:	4293      	cmp	r3, r2
 802356c:	bfc4      	itt	gt
 802356e:	1a9b      	subgt	r3, r3, r2
 8023570:	18ed      	addgt	r5, r5, r3
 8023572:	f04f 0900 	mov.w	r9, #0
 8023576:	341a      	adds	r4, #26
 8023578:	454d      	cmp	r5, r9
 802357a:	d11b      	bne.n	80235b4 <_printf_common+0xd8>
 802357c:	2000      	movs	r0, #0
 802357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023582:	2301      	movs	r3, #1
 8023584:	4652      	mov	r2, sl
 8023586:	4639      	mov	r1, r7
 8023588:	4630      	mov	r0, r6
 802358a:	47c0      	blx	r8
 802358c:	3001      	adds	r0, #1
 802358e:	d103      	bne.n	8023598 <_printf_common+0xbc>
 8023590:	f04f 30ff 	mov.w	r0, #4294967295
 8023594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023598:	3501      	adds	r5, #1
 802359a:	e7c2      	b.n	8023522 <_printf_common+0x46>
 802359c:	18e1      	adds	r1, r4, r3
 802359e:	1c5a      	adds	r2, r3, #1
 80235a0:	2030      	movs	r0, #48	; 0x30
 80235a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80235a6:	4422      	add	r2, r4
 80235a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80235ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80235b0:	3302      	adds	r3, #2
 80235b2:	e7c4      	b.n	802353e <_printf_common+0x62>
 80235b4:	2301      	movs	r3, #1
 80235b6:	4622      	mov	r2, r4
 80235b8:	4639      	mov	r1, r7
 80235ba:	4630      	mov	r0, r6
 80235bc:	47c0      	blx	r8
 80235be:	3001      	adds	r0, #1
 80235c0:	d0e6      	beq.n	8023590 <_printf_common+0xb4>
 80235c2:	f109 0901 	add.w	r9, r9, #1
 80235c6:	e7d7      	b.n	8023578 <_printf_common+0x9c>

080235c8 <_printf_i>:
 80235c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80235cc:	4617      	mov	r7, r2
 80235ce:	7e0a      	ldrb	r2, [r1, #24]
 80235d0:	b085      	sub	sp, #20
 80235d2:	2a6e      	cmp	r2, #110	; 0x6e
 80235d4:	4698      	mov	r8, r3
 80235d6:	4606      	mov	r6, r0
 80235d8:	460c      	mov	r4, r1
 80235da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80235e0:	f000 80bc 	beq.w	802375c <_printf_i+0x194>
 80235e4:	d81a      	bhi.n	802361c <_printf_i+0x54>
 80235e6:	2a63      	cmp	r2, #99	; 0x63
 80235e8:	d02e      	beq.n	8023648 <_printf_i+0x80>
 80235ea:	d80a      	bhi.n	8023602 <_printf_i+0x3a>
 80235ec:	2a00      	cmp	r2, #0
 80235ee:	f000 80c8 	beq.w	8023782 <_printf_i+0x1ba>
 80235f2:	2a58      	cmp	r2, #88	; 0x58
 80235f4:	f000 808a 	beq.w	802370c <_printf_i+0x144>
 80235f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80235fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8023600:	e02a      	b.n	8023658 <_printf_i+0x90>
 8023602:	2a64      	cmp	r2, #100	; 0x64
 8023604:	d001      	beq.n	802360a <_printf_i+0x42>
 8023606:	2a69      	cmp	r2, #105	; 0x69
 8023608:	d1f6      	bne.n	80235f8 <_printf_i+0x30>
 802360a:	6821      	ldr	r1, [r4, #0]
 802360c:	681a      	ldr	r2, [r3, #0]
 802360e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8023612:	d023      	beq.n	802365c <_printf_i+0x94>
 8023614:	1d11      	adds	r1, r2, #4
 8023616:	6019      	str	r1, [r3, #0]
 8023618:	6813      	ldr	r3, [r2, #0]
 802361a:	e027      	b.n	802366c <_printf_i+0xa4>
 802361c:	2a73      	cmp	r2, #115	; 0x73
 802361e:	f000 80b4 	beq.w	802378a <_printf_i+0x1c2>
 8023622:	d808      	bhi.n	8023636 <_printf_i+0x6e>
 8023624:	2a6f      	cmp	r2, #111	; 0x6f
 8023626:	d02a      	beq.n	802367e <_printf_i+0xb6>
 8023628:	2a70      	cmp	r2, #112	; 0x70
 802362a:	d1e5      	bne.n	80235f8 <_printf_i+0x30>
 802362c:	680a      	ldr	r2, [r1, #0]
 802362e:	f042 0220 	orr.w	r2, r2, #32
 8023632:	600a      	str	r2, [r1, #0]
 8023634:	e003      	b.n	802363e <_printf_i+0x76>
 8023636:	2a75      	cmp	r2, #117	; 0x75
 8023638:	d021      	beq.n	802367e <_printf_i+0xb6>
 802363a:	2a78      	cmp	r2, #120	; 0x78
 802363c:	d1dc      	bne.n	80235f8 <_printf_i+0x30>
 802363e:	2278      	movs	r2, #120	; 0x78
 8023640:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8023644:	496e      	ldr	r1, [pc, #440]	; (8023800 <_printf_i+0x238>)
 8023646:	e064      	b.n	8023712 <_printf_i+0x14a>
 8023648:	681a      	ldr	r2, [r3, #0]
 802364a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 802364e:	1d11      	adds	r1, r2, #4
 8023650:	6019      	str	r1, [r3, #0]
 8023652:	6813      	ldr	r3, [r2, #0]
 8023654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023658:	2301      	movs	r3, #1
 802365a:	e0a3      	b.n	80237a4 <_printf_i+0x1dc>
 802365c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8023660:	f102 0104 	add.w	r1, r2, #4
 8023664:	6019      	str	r1, [r3, #0]
 8023666:	d0d7      	beq.n	8023618 <_printf_i+0x50>
 8023668:	f9b2 3000 	ldrsh.w	r3, [r2]
 802366c:	2b00      	cmp	r3, #0
 802366e:	da03      	bge.n	8023678 <_printf_i+0xb0>
 8023670:	222d      	movs	r2, #45	; 0x2d
 8023672:	425b      	negs	r3, r3
 8023674:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8023678:	4962      	ldr	r1, [pc, #392]	; (8023804 <_printf_i+0x23c>)
 802367a:	220a      	movs	r2, #10
 802367c:	e017      	b.n	80236ae <_printf_i+0xe6>
 802367e:	6820      	ldr	r0, [r4, #0]
 8023680:	6819      	ldr	r1, [r3, #0]
 8023682:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023686:	d003      	beq.n	8023690 <_printf_i+0xc8>
 8023688:	1d08      	adds	r0, r1, #4
 802368a:	6018      	str	r0, [r3, #0]
 802368c:	680b      	ldr	r3, [r1, #0]
 802368e:	e006      	b.n	802369e <_printf_i+0xd6>
 8023690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023694:	f101 0004 	add.w	r0, r1, #4
 8023698:	6018      	str	r0, [r3, #0]
 802369a:	d0f7      	beq.n	802368c <_printf_i+0xc4>
 802369c:	880b      	ldrh	r3, [r1, #0]
 802369e:	4959      	ldr	r1, [pc, #356]	; (8023804 <_printf_i+0x23c>)
 80236a0:	2a6f      	cmp	r2, #111	; 0x6f
 80236a2:	bf14      	ite	ne
 80236a4:	220a      	movne	r2, #10
 80236a6:	2208      	moveq	r2, #8
 80236a8:	2000      	movs	r0, #0
 80236aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80236ae:	6865      	ldr	r5, [r4, #4]
 80236b0:	60a5      	str	r5, [r4, #8]
 80236b2:	2d00      	cmp	r5, #0
 80236b4:	f2c0 809c 	blt.w	80237f0 <_printf_i+0x228>
 80236b8:	6820      	ldr	r0, [r4, #0]
 80236ba:	f020 0004 	bic.w	r0, r0, #4
 80236be:	6020      	str	r0, [r4, #0]
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	d13f      	bne.n	8023744 <_printf_i+0x17c>
 80236c4:	2d00      	cmp	r5, #0
 80236c6:	f040 8095 	bne.w	80237f4 <_printf_i+0x22c>
 80236ca:	4675      	mov	r5, lr
 80236cc:	2a08      	cmp	r2, #8
 80236ce:	d10b      	bne.n	80236e8 <_printf_i+0x120>
 80236d0:	6823      	ldr	r3, [r4, #0]
 80236d2:	07da      	lsls	r2, r3, #31
 80236d4:	d508      	bpl.n	80236e8 <_printf_i+0x120>
 80236d6:	6923      	ldr	r3, [r4, #16]
 80236d8:	6862      	ldr	r2, [r4, #4]
 80236da:	429a      	cmp	r2, r3
 80236dc:	bfde      	ittt	le
 80236de:	2330      	movle	r3, #48	; 0x30
 80236e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80236e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80236e8:	ebae 0305 	sub.w	r3, lr, r5
 80236ec:	6123      	str	r3, [r4, #16]
 80236ee:	f8cd 8000 	str.w	r8, [sp]
 80236f2:	463b      	mov	r3, r7
 80236f4:	aa03      	add	r2, sp, #12
 80236f6:	4621      	mov	r1, r4
 80236f8:	4630      	mov	r0, r6
 80236fa:	f7ff feef 	bl	80234dc <_printf_common>
 80236fe:	3001      	adds	r0, #1
 8023700:	d155      	bne.n	80237ae <_printf_i+0x1e6>
 8023702:	f04f 30ff 	mov.w	r0, #4294967295
 8023706:	b005      	add	sp, #20
 8023708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802370c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8023710:	493c      	ldr	r1, [pc, #240]	; (8023804 <_printf_i+0x23c>)
 8023712:	6822      	ldr	r2, [r4, #0]
 8023714:	6818      	ldr	r0, [r3, #0]
 8023716:	f012 0f80 	tst.w	r2, #128	; 0x80
 802371a:	f100 0504 	add.w	r5, r0, #4
 802371e:	601d      	str	r5, [r3, #0]
 8023720:	d001      	beq.n	8023726 <_printf_i+0x15e>
 8023722:	6803      	ldr	r3, [r0, #0]
 8023724:	e002      	b.n	802372c <_printf_i+0x164>
 8023726:	0655      	lsls	r5, r2, #25
 8023728:	d5fb      	bpl.n	8023722 <_printf_i+0x15a>
 802372a:	8803      	ldrh	r3, [r0, #0]
 802372c:	07d0      	lsls	r0, r2, #31
 802372e:	bf44      	itt	mi
 8023730:	f042 0220 	orrmi.w	r2, r2, #32
 8023734:	6022      	strmi	r2, [r4, #0]
 8023736:	b91b      	cbnz	r3, 8023740 <_printf_i+0x178>
 8023738:	6822      	ldr	r2, [r4, #0]
 802373a:	f022 0220 	bic.w	r2, r2, #32
 802373e:	6022      	str	r2, [r4, #0]
 8023740:	2210      	movs	r2, #16
 8023742:	e7b1      	b.n	80236a8 <_printf_i+0xe0>
 8023744:	4675      	mov	r5, lr
 8023746:	fbb3 f0f2 	udiv	r0, r3, r2
 802374a:	fb02 3310 	mls	r3, r2, r0, r3
 802374e:	5ccb      	ldrb	r3, [r1, r3]
 8023750:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023754:	4603      	mov	r3, r0
 8023756:	2800      	cmp	r0, #0
 8023758:	d1f5      	bne.n	8023746 <_printf_i+0x17e>
 802375a:	e7b7      	b.n	80236cc <_printf_i+0x104>
 802375c:	6808      	ldr	r0, [r1, #0]
 802375e:	681a      	ldr	r2, [r3, #0]
 8023760:	6949      	ldr	r1, [r1, #20]
 8023762:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023766:	d004      	beq.n	8023772 <_printf_i+0x1aa>
 8023768:	1d10      	adds	r0, r2, #4
 802376a:	6018      	str	r0, [r3, #0]
 802376c:	6813      	ldr	r3, [r2, #0]
 802376e:	6019      	str	r1, [r3, #0]
 8023770:	e007      	b.n	8023782 <_printf_i+0x1ba>
 8023772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023776:	f102 0004 	add.w	r0, r2, #4
 802377a:	6018      	str	r0, [r3, #0]
 802377c:	6813      	ldr	r3, [r2, #0]
 802377e:	d0f6      	beq.n	802376e <_printf_i+0x1a6>
 8023780:	8019      	strh	r1, [r3, #0]
 8023782:	2300      	movs	r3, #0
 8023784:	6123      	str	r3, [r4, #16]
 8023786:	4675      	mov	r5, lr
 8023788:	e7b1      	b.n	80236ee <_printf_i+0x126>
 802378a:	681a      	ldr	r2, [r3, #0]
 802378c:	1d11      	adds	r1, r2, #4
 802378e:	6019      	str	r1, [r3, #0]
 8023790:	6815      	ldr	r5, [r2, #0]
 8023792:	6862      	ldr	r2, [r4, #4]
 8023794:	2100      	movs	r1, #0
 8023796:	4628      	mov	r0, r5
 8023798:	f7dc fd52 	bl	8000240 <memchr>
 802379c:	b108      	cbz	r0, 80237a2 <_printf_i+0x1da>
 802379e:	1b40      	subs	r0, r0, r5
 80237a0:	6060      	str	r0, [r4, #4]
 80237a2:	6863      	ldr	r3, [r4, #4]
 80237a4:	6123      	str	r3, [r4, #16]
 80237a6:	2300      	movs	r3, #0
 80237a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80237ac:	e79f      	b.n	80236ee <_printf_i+0x126>
 80237ae:	6923      	ldr	r3, [r4, #16]
 80237b0:	462a      	mov	r2, r5
 80237b2:	4639      	mov	r1, r7
 80237b4:	4630      	mov	r0, r6
 80237b6:	47c0      	blx	r8
 80237b8:	3001      	adds	r0, #1
 80237ba:	d0a2      	beq.n	8023702 <_printf_i+0x13a>
 80237bc:	6823      	ldr	r3, [r4, #0]
 80237be:	079b      	lsls	r3, r3, #30
 80237c0:	d507      	bpl.n	80237d2 <_printf_i+0x20a>
 80237c2:	2500      	movs	r5, #0
 80237c4:	f104 0919 	add.w	r9, r4, #25
 80237c8:	68e3      	ldr	r3, [r4, #12]
 80237ca:	9a03      	ldr	r2, [sp, #12]
 80237cc:	1a9b      	subs	r3, r3, r2
 80237ce:	429d      	cmp	r5, r3
 80237d0:	db05      	blt.n	80237de <_printf_i+0x216>
 80237d2:	68e0      	ldr	r0, [r4, #12]
 80237d4:	9b03      	ldr	r3, [sp, #12]
 80237d6:	4298      	cmp	r0, r3
 80237d8:	bfb8      	it	lt
 80237da:	4618      	movlt	r0, r3
 80237dc:	e793      	b.n	8023706 <_printf_i+0x13e>
 80237de:	2301      	movs	r3, #1
 80237e0:	464a      	mov	r2, r9
 80237e2:	4639      	mov	r1, r7
 80237e4:	4630      	mov	r0, r6
 80237e6:	47c0      	blx	r8
 80237e8:	3001      	adds	r0, #1
 80237ea:	d08a      	beq.n	8023702 <_printf_i+0x13a>
 80237ec:	3501      	adds	r5, #1
 80237ee:	e7eb      	b.n	80237c8 <_printf_i+0x200>
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	d1a7      	bne.n	8023744 <_printf_i+0x17c>
 80237f4:	780b      	ldrb	r3, [r1, #0]
 80237f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80237fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80237fe:	e765      	b.n	80236cc <_printf_i+0x104>
 8023800:	0802ac86 	.word	0x0802ac86
 8023804:	0802ac75 	.word	0x0802ac75

08023808 <__sread>:
 8023808:	b510      	push	{r4, lr}
 802380a:	460c      	mov	r4, r1
 802380c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023810:	f000 f894 	bl	802393c <_read_r>
 8023814:	2800      	cmp	r0, #0
 8023816:	bfab      	itete	ge
 8023818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802381a:	89a3      	ldrhlt	r3, [r4, #12]
 802381c:	181b      	addge	r3, r3, r0
 802381e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023822:	bfac      	ite	ge
 8023824:	6563      	strge	r3, [r4, #84]	; 0x54
 8023826:	81a3      	strhlt	r3, [r4, #12]
 8023828:	bd10      	pop	{r4, pc}

0802382a <__swrite>:
 802382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802382e:	461f      	mov	r7, r3
 8023830:	898b      	ldrh	r3, [r1, #12]
 8023832:	05db      	lsls	r3, r3, #23
 8023834:	4605      	mov	r5, r0
 8023836:	460c      	mov	r4, r1
 8023838:	4616      	mov	r6, r2
 802383a:	d505      	bpl.n	8023848 <__swrite+0x1e>
 802383c:	2302      	movs	r3, #2
 802383e:	2200      	movs	r2, #0
 8023840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023844:	f000 f868 	bl	8023918 <_lseek_r>
 8023848:	89a3      	ldrh	r3, [r4, #12]
 802384a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802384e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023852:	81a3      	strh	r3, [r4, #12]
 8023854:	4632      	mov	r2, r6
 8023856:	463b      	mov	r3, r7
 8023858:	4628      	mov	r0, r5
 802385a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802385e:	f000 b817 	b.w	8023890 <_write_r>

08023862 <__sseek>:
 8023862:	b510      	push	{r4, lr}
 8023864:	460c      	mov	r4, r1
 8023866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802386a:	f000 f855 	bl	8023918 <_lseek_r>
 802386e:	1c43      	adds	r3, r0, #1
 8023870:	89a3      	ldrh	r3, [r4, #12]
 8023872:	bf15      	itete	ne
 8023874:	6560      	strne	r0, [r4, #84]	; 0x54
 8023876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802387a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802387e:	81a3      	strheq	r3, [r4, #12]
 8023880:	bf18      	it	ne
 8023882:	81a3      	strhne	r3, [r4, #12]
 8023884:	bd10      	pop	{r4, pc}

08023886 <__sclose>:
 8023886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802388a:	f000 b813 	b.w	80238b4 <_close_r>
	...

08023890 <_write_r>:
 8023890:	b538      	push	{r3, r4, r5, lr}
 8023892:	4c07      	ldr	r4, [pc, #28]	; (80238b0 <_write_r+0x20>)
 8023894:	4605      	mov	r5, r0
 8023896:	4608      	mov	r0, r1
 8023898:	4611      	mov	r1, r2
 802389a:	2200      	movs	r2, #0
 802389c:	6022      	str	r2, [r4, #0]
 802389e:	461a      	mov	r2, r3
 80238a0:	f7e8 fcde 	bl	800c260 <_write>
 80238a4:	1c43      	adds	r3, r0, #1
 80238a6:	d102      	bne.n	80238ae <_write_r+0x1e>
 80238a8:	6823      	ldr	r3, [r4, #0]
 80238aa:	b103      	cbz	r3, 80238ae <_write_r+0x1e>
 80238ac:	602b      	str	r3, [r5, #0]
 80238ae:	bd38      	pop	{r3, r4, r5, pc}
 80238b0:	2002ccd0 	.word	0x2002ccd0

080238b4 <_close_r>:
 80238b4:	b538      	push	{r3, r4, r5, lr}
 80238b6:	4c06      	ldr	r4, [pc, #24]	; (80238d0 <_close_r+0x1c>)
 80238b8:	2300      	movs	r3, #0
 80238ba:	4605      	mov	r5, r0
 80238bc:	4608      	mov	r0, r1
 80238be:	6023      	str	r3, [r4, #0]
 80238c0:	f000 f84e 	bl	8023960 <_close>
 80238c4:	1c43      	adds	r3, r0, #1
 80238c6:	d102      	bne.n	80238ce <_close_r+0x1a>
 80238c8:	6823      	ldr	r3, [r4, #0]
 80238ca:	b103      	cbz	r3, 80238ce <_close_r+0x1a>
 80238cc:	602b      	str	r3, [r5, #0]
 80238ce:	bd38      	pop	{r3, r4, r5, pc}
 80238d0:	2002ccd0 	.word	0x2002ccd0

080238d4 <_fstat_r>:
 80238d4:	b538      	push	{r3, r4, r5, lr}
 80238d6:	4c07      	ldr	r4, [pc, #28]	; (80238f4 <_fstat_r+0x20>)
 80238d8:	2300      	movs	r3, #0
 80238da:	4605      	mov	r5, r0
 80238dc:	4608      	mov	r0, r1
 80238de:	4611      	mov	r1, r2
 80238e0:	6023      	str	r3, [r4, #0]
 80238e2:	f000 f845 	bl	8023970 <_fstat>
 80238e6:	1c43      	adds	r3, r0, #1
 80238e8:	d102      	bne.n	80238f0 <_fstat_r+0x1c>
 80238ea:	6823      	ldr	r3, [r4, #0]
 80238ec:	b103      	cbz	r3, 80238f0 <_fstat_r+0x1c>
 80238ee:	602b      	str	r3, [r5, #0]
 80238f0:	bd38      	pop	{r3, r4, r5, pc}
 80238f2:	bf00      	nop
 80238f4:	2002ccd0 	.word	0x2002ccd0

080238f8 <_isatty_r>:
 80238f8:	b538      	push	{r3, r4, r5, lr}
 80238fa:	4c06      	ldr	r4, [pc, #24]	; (8023914 <_isatty_r+0x1c>)
 80238fc:	2300      	movs	r3, #0
 80238fe:	4605      	mov	r5, r0
 8023900:	4608      	mov	r0, r1
 8023902:	6023      	str	r3, [r4, #0]
 8023904:	f000 f83c 	bl	8023980 <_isatty>
 8023908:	1c43      	adds	r3, r0, #1
 802390a:	d102      	bne.n	8023912 <_isatty_r+0x1a>
 802390c:	6823      	ldr	r3, [r4, #0]
 802390e:	b103      	cbz	r3, 8023912 <_isatty_r+0x1a>
 8023910:	602b      	str	r3, [r5, #0]
 8023912:	bd38      	pop	{r3, r4, r5, pc}
 8023914:	2002ccd0 	.word	0x2002ccd0

08023918 <_lseek_r>:
 8023918:	b538      	push	{r3, r4, r5, lr}
 802391a:	4c07      	ldr	r4, [pc, #28]	; (8023938 <_lseek_r+0x20>)
 802391c:	4605      	mov	r5, r0
 802391e:	4608      	mov	r0, r1
 8023920:	4611      	mov	r1, r2
 8023922:	2200      	movs	r2, #0
 8023924:	6022      	str	r2, [r4, #0]
 8023926:	461a      	mov	r2, r3
 8023928:	f000 f832 	bl	8023990 <_lseek>
 802392c:	1c43      	adds	r3, r0, #1
 802392e:	d102      	bne.n	8023936 <_lseek_r+0x1e>
 8023930:	6823      	ldr	r3, [r4, #0]
 8023932:	b103      	cbz	r3, 8023936 <_lseek_r+0x1e>
 8023934:	602b      	str	r3, [r5, #0]
 8023936:	bd38      	pop	{r3, r4, r5, pc}
 8023938:	2002ccd0 	.word	0x2002ccd0

0802393c <_read_r>:
 802393c:	b538      	push	{r3, r4, r5, lr}
 802393e:	4c07      	ldr	r4, [pc, #28]	; (802395c <_read_r+0x20>)
 8023940:	4605      	mov	r5, r0
 8023942:	4608      	mov	r0, r1
 8023944:	4611      	mov	r1, r2
 8023946:	2200      	movs	r2, #0
 8023948:	6022      	str	r2, [r4, #0]
 802394a:	461a      	mov	r2, r3
 802394c:	f7e8 fcaa 	bl	800c2a4 <_read>
 8023950:	1c43      	adds	r3, r0, #1
 8023952:	d102      	bne.n	802395a <_read_r+0x1e>
 8023954:	6823      	ldr	r3, [r4, #0]
 8023956:	b103      	cbz	r3, 802395a <_read_r+0x1e>
 8023958:	602b      	str	r3, [r5, #0]
 802395a:	bd38      	pop	{r3, r4, r5, pc}
 802395c:	2002ccd0 	.word	0x2002ccd0

08023960 <_close>:
 8023960:	4b02      	ldr	r3, [pc, #8]	; (802396c <_close+0xc>)
 8023962:	2258      	movs	r2, #88	; 0x58
 8023964:	601a      	str	r2, [r3, #0]
 8023966:	f04f 30ff 	mov.w	r0, #4294967295
 802396a:	4770      	bx	lr
 802396c:	2002ccd0 	.word	0x2002ccd0

08023970 <_fstat>:
 8023970:	4b02      	ldr	r3, [pc, #8]	; (802397c <_fstat+0xc>)
 8023972:	2258      	movs	r2, #88	; 0x58
 8023974:	601a      	str	r2, [r3, #0]
 8023976:	f04f 30ff 	mov.w	r0, #4294967295
 802397a:	4770      	bx	lr
 802397c:	2002ccd0 	.word	0x2002ccd0

08023980 <_isatty>:
 8023980:	4b02      	ldr	r3, [pc, #8]	; (802398c <_isatty+0xc>)
 8023982:	2258      	movs	r2, #88	; 0x58
 8023984:	601a      	str	r2, [r3, #0]
 8023986:	2000      	movs	r0, #0
 8023988:	4770      	bx	lr
 802398a:	bf00      	nop
 802398c:	2002ccd0 	.word	0x2002ccd0

08023990 <_lseek>:
 8023990:	4b02      	ldr	r3, [pc, #8]	; (802399c <_lseek+0xc>)
 8023992:	2258      	movs	r2, #88	; 0x58
 8023994:	601a      	str	r2, [r3, #0]
 8023996:	f04f 30ff 	mov.w	r0, #4294967295
 802399a:	4770      	bx	lr
 802399c:	2002ccd0 	.word	0x2002ccd0

080239a0 <_sbrk>:
 80239a0:	4b04      	ldr	r3, [pc, #16]	; (80239b4 <_sbrk+0x14>)
 80239a2:	6819      	ldr	r1, [r3, #0]
 80239a4:	4602      	mov	r2, r0
 80239a6:	b909      	cbnz	r1, 80239ac <_sbrk+0xc>
 80239a8:	4903      	ldr	r1, [pc, #12]	; (80239b8 <_sbrk+0x18>)
 80239aa:	6019      	str	r1, [r3, #0]
 80239ac:	6818      	ldr	r0, [r3, #0]
 80239ae:	4402      	add	r2, r0
 80239b0:	601a      	str	r2, [r3, #0]
 80239b2:	4770      	bx	lr
 80239b4:	2002b320 	.word	0x2002b320
 80239b8:	2002ccd4 	.word	0x2002ccd4

080239bc <_init>:
 80239bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239be:	bf00      	nop
 80239c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239c2:	bc08      	pop	{r3}
 80239c4:	469e      	mov	lr, r3
 80239c6:	4770      	bx	lr

080239c8 <_fini>:
 80239c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ca:	bf00      	nop
 80239cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239ce:	bc08      	pop	{r3}
 80239d0:	469e      	mov	lr, r3
 80239d2:	4770      	bx	lr
