
LoadCellSTM32_USBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e048  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042a0  0801e218  0801e218  0002e218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080224b8  080224b8  000324b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080224c0  080224c0  000324c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080224c4  080224c4  000324c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004c4  20000000  080224c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002bc84  200004c4  0802298c  000404c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2002c148  0802298c  0004c148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000404c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0009b940  00000000  00000000  000404f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008a0f  00000000  00000000  000dbe32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00017d70  00000000  00000000  000e4841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002158  00000000  00000000  000fc5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001fd0  00000000  00000000  000fe710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00010c63  00000000  00000000  001006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000260db  00000000  00000000  00111343  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001105b1  00000000  00000000  0013741e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fe  00000000  00000000  002479cf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005b0c  00000000  00000000  00247ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004c4 	.word	0x200004c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e200 	.word	0x0801e200

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004c8 	.word	0x200004c8
 800020c:	0801e200 	.word	0x0801e200

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f9c6 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000538:	2000      	movs	r0, #0
 800053a:	f008 facf 	bl	8008adc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800053e:	f008 f9ff 	bl	8008940 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000542:	2000      	movs	r0, #0
 8000544:	bd08      	pop	{r3, pc}
	...

08000548 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <HAL_IncTick+0x10>)
 800054a:	6811      	ldr	r1, [r2, #0]
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_IncTick+0x14>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	440b      	add	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2002b054 	.word	0x2002b054
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000560:	4b01      	ldr	r3, [pc, #4]	; (8000568 <HAL_GetTick+0x8>)
 8000562:	6818      	ldr	r0, [r3, #0]
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2002b054 	.word	0x2002b054

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b538      	push	{r3, r4, r5, lr}
 800056e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000570:	f7ff fff6 	bl	8000560 <HAL_GetTick>
 8000574:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	f1b4 3fff 	cmp.w	r4, #4294967295
 800057a:	d002      	beq.n	8000582 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_Delay+0x24>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000582:	f7ff ffed 	bl	8000560 <HAL_GetTick>
 8000586:	1b40      	subs	r0, r0, r5
 8000588:	4284      	cmp	r4, r0
 800058a:	d8fa      	bhi.n	8000582 <HAL_Delay+0x16>
  {
  }
}
 800058c:	bd38      	pop	{r3, r4, r5, pc}
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000

08000594 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000594:	4b49      	ldr	r3, [pc, #292]	; (80006bc <ADC_Init+0x128>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800059c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	6841      	ldr	r1, [r0, #4]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005a6:	6802      	ldr	r2, [r0, #0]
 80005a8:	6853      	ldr	r3, [r2, #4]
 80005aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005ae:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005b0:	6802      	ldr	r2, [r0, #0]
 80005b2:	6853      	ldr	r3, [r2, #4]
 80005b4:	6901      	ldr	r1, [r0, #16]
 80005b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80005ba:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005bc:	6802      	ldr	r2, [r0, #0]
 80005be:	6853      	ldr	r3, [r2, #4]
 80005c0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005c4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005c6:	6802      	ldr	r2, [r0, #0]
 80005c8:	6853      	ldr	r3, [r2, #4]
 80005ca:	6881      	ldr	r1, [r0, #8]
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005d0:	6802      	ldr	r2, [r0, #0]
 80005d2:	6893      	ldr	r3, [r2, #8]
 80005d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005d8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005da:	6802      	ldr	r2, [r0, #0]
 80005dc:	6893      	ldr	r3, [r2, #8]
 80005de:	68c1      	ldr	r1, [r0, #12]
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80005e6:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <ADC_Init+0x12c>)
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d049      	beq.n	8000680 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005ec:	6802      	ldr	r2, [r0, #0]
 80005ee:	6893      	ldr	r3, [r2, #8]
 80005f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80005f4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005f6:	6802      	ldr	r2, [r0, #0]
 80005f8:	6893      	ldr	r3, [r2, #8]
 80005fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000600:	6802      	ldr	r2, [r0, #0]
 8000602:	6893      	ldr	r3, [r2, #8]
 8000604:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000608:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	6893      	ldr	r3, [r2, #8]
 800060e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000610:	430b      	orrs	r3, r1
 8000612:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000614:	6802      	ldr	r2, [r0, #0]
 8000616:	6893      	ldr	r3, [r2, #8]
 8000618:	f023 0302 	bic.w	r3, r3, #2
 800061c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800061e:	6802      	ldr	r2, [r0, #0]
 8000620:	6893      	ldr	r3, [r2, #8]
 8000622:	6981      	ldr	r1, [r0, #24]
 8000624:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000628:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800062a:	6a03      	ldr	r3, [r0, #32]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d132      	bne.n	8000696 <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000630:	6802      	ldr	r2, [r0, #0]
 8000632:	6853      	ldr	r3, [r2, #4]
 8000634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000638:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800063e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000642:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000644:	6801      	ldr	r1, [r0, #0]
 8000646:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000648:	69c2      	ldr	r2, [r0, #28]
 800064a:	3a01      	subs	r2, #1
 800064c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000650:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000652:	6802      	ldr	r2, [r0, #0]
 8000654:	6893      	ldr	r3, [r2, #8]
 8000656:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800065a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800065c:	6802      	ldr	r2, [r0, #0]
 800065e:	6893      	ldr	r3, [r2, #8]
 8000660:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000662:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000666:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000668:	6802      	ldr	r2, [r0, #0]
 800066a:	6893      	ldr	r3, [r2, #8]
 800066c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000670:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000672:	6802      	ldr	r2, [r0, #0]
 8000674:	6893      	ldr	r3, [r2, #8]
 8000676:	6941      	ldr	r1, [r0, #20]
 8000678:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800067c:	6093      	str	r3, [r2, #8]
 800067e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000680:	6802      	ldr	r2, [r0, #0]
 8000682:	6893      	ldr	r3, [r2, #8]
 8000684:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000688:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800068a:	6802      	ldr	r2, [r0, #0]
 800068c:	6893      	ldr	r3, [r2, #8]
 800068e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000692:	6093      	str	r3, [r2, #8]
 8000694:	e7be      	b.n	8000614 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000696:	6802      	ldr	r2, [r0, #0]
 8000698:	6853      	ldr	r3, [r2, #4]
 800069a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800069e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006a0:	6802      	ldr	r2, [r0, #0]
 80006a2:	6853      	ldr	r3, [r2, #4]
 80006a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006a8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006aa:	6801      	ldr	r1, [r0, #0]
 80006ac:	684b      	ldr	r3, [r1, #4]
 80006ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006b0:	3a01      	subs	r2, #1
 80006b2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80006b6:	604b      	str	r3, [r1, #4]
 80006b8:	e7bf      	b.n	800063a <ADC_Init+0xa6>
 80006ba:	bf00      	nop
 80006bc:	40012300 	.word	0x40012300
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80006c4:	b320      	cbz	r0, 8000710 <HAL_ADC_Init+0x4c>
{
 80006c6:	b510      	push	{r4, lr}
 80006c8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006cc:	b143      	cbz	r3, 80006e0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006d0:	f013 0f10 	tst.w	r3, #16
 80006d4:	d00a      	beq.n	80006ec <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006d8:	2300      	movs	r3, #0
 80006da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006de:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80006e0:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80006e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80006e6:	f008 f95b 	bl	80089a0 <HAL_ADC_MspInit>
 80006ea:	e7f0      	b.n	80006ce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80006ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_ADC_Init+0x50>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff ff4b 	bl	8000594 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80006fe:	2000      	movs	r0, #0
 8000700:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000704:	f023 0303 	bic.w	r3, r3, #3
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6423      	str	r3, [r4, #64]	; 0x40
 800070e:	e7e3      	b.n	80006d8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000710:	2001      	movs	r0, #1
 8000712:	4770      	bx	lr
 8000714:	ffffeefd 	.word	0xffffeefd

08000718 <HAL_ADC_ConfigChannel>:
{
 8000718:	b430      	push	{r4, r5}
 800071a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000720:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000724:	2b01      	cmp	r3, #1
 8000726:	f000 80c0 	beq.w	80008aa <HAL_ADC_ConfigChannel+0x192>
 800072a:	2301      	movs	r3, #1
 800072c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000730:	680b      	ldr	r3, [r1, #0]
 8000732:	2b09      	cmp	r3, #9
 8000734:	d922      	bls.n	800077c <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000736:	6805      	ldr	r5, [r0, #0]
 8000738:	68ea      	ldr	r2, [r5, #12]
 800073a:	b29b      	uxth	r3, r3
 800073c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000740:	3b1e      	subs	r3, #30
 8000742:	2407      	movs	r4, #7
 8000744:	fa04 f303 	lsl.w	r3, r4, r3
 8000748:	ea22 0303 	bic.w	r3, r2, r3
 800074c:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800074e:	680b      	ldr	r3, [r1, #0]
 8000750:	4a57      	ldr	r2, [pc, #348]	; (80008b0 <HAL_ADC_ConfigChannel+0x198>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d00b      	beq.n	800076e <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000756:	6805      	ldr	r5, [r0, #0]
 8000758:	68ea      	ldr	r2, [r5, #12]
 800075a:	688c      	ldr	r4, [r1, #8]
 800075c:	b29b      	uxth	r3, r3
 800075e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000762:	3b1e      	subs	r3, #30
 8000764:	fa04 f303 	lsl.w	r3, r4, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	60eb      	str	r3, [r5, #12]
 800076c:	e01b      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800076e:	6802      	ldr	r2, [r0, #0]
 8000770:	68d3      	ldr	r3, [r2, #12]
 8000772:	688c      	ldr	r4, [r1, #8]
 8000774:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000778:	60d3      	str	r3, [r2, #12]
 800077a:	e014      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800077c:	6805      	ldr	r5, [r0, #0]
 800077e:	692a      	ldr	r2, [r5, #16]
 8000780:	b29b      	uxth	r3, r3
 8000782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000786:	2407      	movs	r4, #7
 8000788:	fa04 f303 	lsl.w	r3, r4, r3
 800078c:	ea22 0303 	bic.w	r3, r2, r3
 8000790:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000792:	6805      	ldr	r5, [r0, #0]
 8000794:	692a      	ldr	r2, [r5, #16]
 8000796:	688c      	ldr	r4, [r1, #8]
 8000798:	880b      	ldrh	r3, [r1, #0]
 800079a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800079e:	fa04 f303 	lsl.w	r3, r4, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80007a6:	684b      	ldr	r3, [r1, #4]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d824      	bhi.n	80007f6 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007ac:	6805      	ldr	r5, [r0, #0]
 80007ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007b4:	3b05      	subs	r3, #5
 80007b6:	241f      	movs	r4, #31
 80007b8:	fa04 f303 	lsl.w	r3, r4, r3
 80007bc:	ea22 0303 	bic.w	r3, r2, r3
 80007c0:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007c2:	6805      	ldr	r5, [r0, #0]
 80007c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007c6:	684b      	ldr	r3, [r1, #4]
 80007c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007cc:	3b05      	subs	r3, #5
 80007ce:	880c      	ldrh	r4, [r1, #0]
 80007d0:	fa04 f303 	lsl.w	r3, r4, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007d8:	6802      	ldr	r2, [r0, #0]
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <HAL_ADC_ConfigChannel+0x19c>)
 80007dc:	429a      	cmp	r2, r3
 80007de:	d03a      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007e0:	6802      	ldr	r2, [r0, #0]
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <HAL_ADC_ConfigChannel+0x19c>)
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d03f      	beq.n	8000868 <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 80007e8:	2300      	movs	r3, #0
 80007ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007ee:	4618      	mov	r0, r3
}
 80007f0:	b002      	add	sp, #8
 80007f2:	bc30      	pop	{r4, r5}
 80007f4:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80007f6:	2b0c      	cmp	r3, #12
 80007f8:	d816      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007fa:	6805      	ldr	r5, [r0, #0]
 80007fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80007fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000802:	3b23      	subs	r3, #35	; 0x23
 8000804:	241f      	movs	r4, #31
 8000806:	fa04 f303 	lsl.w	r3, r4, r3
 800080a:	ea22 0303 	bic.w	r3, r2, r3
 800080e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000810:	6805      	ldr	r5, [r0, #0]
 8000812:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000814:	684b      	ldr	r3, [r1, #4]
 8000816:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800081a:	3b23      	subs	r3, #35	; 0x23
 800081c:	880c      	ldrh	r4, [r1, #0]
 800081e:	fa04 f303 	lsl.w	r3, r4, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	632b      	str	r3, [r5, #48]	; 0x30
 8000826:	e7d7      	b.n	80007d8 <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000828:	6805      	ldr	r5, [r0, #0]
 800082a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800082c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000830:	3b41      	subs	r3, #65	; 0x41
 8000832:	241f      	movs	r4, #31
 8000834:	fa04 f303 	lsl.w	r3, r4, r3
 8000838:	ea22 0303 	bic.w	r3, r2, r3
 800083c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800083e:	6805      	ldr	r5, [r0, #0]
 8000840:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000842:	684b      	ldr	r3, [r1, #4]
 8000844:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000848:	3b41      	subs	r3, #65	; 0x41
 800084a:	880c      	ldrh	r4, [r1, #0]
 800084c:	fa04 f303 	lsl.w	r3, r4, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000854:	e7c0      	b.n	80007d8 <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000856:	680b      	ldr	r3, [r1, #0]
 8000858:	2b12      	cmp	r3, #18
 800085a:	d1c1      	bne.n	80007e0 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 800085c:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <HAL_ADC_ConfigChannel+0x1a0>)
 800085e:	6853      	ldr	r3, [r2, #4]
 8000860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000864:	6053      	str	r3, [r2, #4]
 8000866:	e7bb      	b.n	80007e0 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000868:	680b      	ldr	r3, [r1, #0]
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <HAL_ADC_ConfigChannel+0x198>)
 800086c:	2b11      	cmp	r3, #17
 800086e:	bf18      	it	ne
 8000870:	4293      	cmpne	r3, r2
 8000872:	d1b9      	bne.n	80007e8 <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_ADC_ConfigChannel+0x1a0>)
 8000876:	6853      	ldr	r3, [r2, #4]
 8000878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800087c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800087e:	680a      	ldr	r2, [r1, #0]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_ADC_ConfigChannel+0x198>)
 8000882:	429a      	cmp	r2, r3
 8000884:	d1b0      	bne.n	80007e8 <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_ADC_ConfigChannel+0x1a4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_ADC_ConfigChannel+0x1a8>)
 800088c:	fba2 2303 	umull	r2, r3, r2, r3
 8000890:	0c9b      	lsrs	r3, r3, #18
 8000892:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000896:	005a      	lsls	r2, r3, #1
 8000898:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800089a:	e002      	b.n	80008a2 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80008a2:	9b01      	ldr	r3, [sp, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f9      	bne.n	800089c <HAL_ADC_ConfigChannel+0x184>
 80008a8:	e79e      	b.n	80007e8 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80008aa:	2002      	movs	r0, #2
 80008ac:	e7a0      	b.n	80007f0 <HAL_ADC_ConfigChannel+0xd8>
 80008ae:	bf00      	nop
 80008b0:	10000012 	.word	0x10000012
 80008b4:	40012000 	.word	0x40012000
 80008b8:	40012300 	.word	0x40012300
 80008bc:	200000b0 	.word	0x200000b0
 80008c0:	431bde83 	.word	0x431bde83

080008c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80008c6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008d0:	0200      	lsls	r0, r0, #8
 80008d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008d8:	4a02      	ldr	r2, [pc, #8]	; (80008e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008da:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80008dc:	60ca      	str	r2, [r1, #12]
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00
 80008e4:	05fa0000 	.word	0x05fa0000

080008e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_NVIC_SetPriority+0x54>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f2:	f1c3 0407 	rsb	r4, r3, #7
 80008f6:	2c04      	cmp	r4, #4
 80008f8:	bf28      	it	cs
 80008fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fc:	1d1d      	adds	r5, r3, #4
 80008fe:	2d06      	cmp	r5, #6
 8000900:	d913      	bls.n	800092a <HAL_NVIC_SetPriority+0x42>
 8000902:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	2501      	movs	r5, #1
 8000906:	fa05 f404 	lsl.w	r4, r5, r4
 800090a:	3c01      	subs	r4, #1
 800090c:	4021      	ands	r1, r4
 800090e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	fa05 f303 	lsl.w	r3, r5, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800091a:	2800      	cmp	r0, #0
 800091c:	db07      	blt.n	800092e <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	0109      	lsls	r1, r1, #4
 8000920:	b2c9      	uxtb	r1, r1
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_NVIC_SetPriority+0x58>)
 8000924:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000926:	bc30      	pop	{r4, r5}
 8000928:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	2300      	movs	r3, #0
 800092c:	e7ea      	b.n	8000904 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	f000 000f 	and.w	r0, r0, #15
 8000932:	0109      	lsls	r1, r1, #4
 8000934:	b2c9      	uxtb	r1, r1
 8000936:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_NVIC_SetPriority+0x5c>)
 8000938:	5419      	strb	r1, [r3, r0]
 800093a:	e7f4      	b.n	8000926 <HAL_NVIC_SetPriority+0x3e>
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	e000e400 	.word	0xe000e400
 8000944:	e000ed14 	.word	0xe000ed14

08000948 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000948:	0942      	lsrs	r2, r0, #5
 800094a:	f000 001f 	and.w	r0, r0, #31
 800094e:	2301      	movs	r3, #1
 8000950:	fa03 f000 	lsl.w	r0, r3, r0
 8000954:	4b01      	ldr	r3, [pc, #4]	; (800095c <HAL_NVIC_EnableIRQ+0x14>)
 8000956:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	3801      	subs	r0, #1
 8000962:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000966:	d20a      	bcs.n	800097e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_SYSTICK_Config+0x24>)
 800096a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	21f0      	movs	r1, #240	; 0xf0
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_SYSTICK_Config+0x28>)
 8000970:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	2000      	movs	r0, #0
 8000976:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800098c:	2804      	cmp	r0, #4
 800098e:	d005      	beq.n	800099c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000992:	6813      	ldr	r3, [r2, #0]
 8000994:	f023 0304 	bic.w	r3, r3, #4
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800099c:	4a02      	ldr	r2, [pc, #8]	; (80009a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800099e:	6813      	ldr	r3, [r2, #0]
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	4770      	bx	lr
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d038      	beq.n	8000a22 <HAL_CRC_Init+0x76>
{
 80009b0:	b510      	push	{r4, lr}
 80009b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80009b4:	7f43      	ldrb	r3, [r0, #29]
 80009b6:	b31b      	cbz	r3, 8000a00 <HAL_CRC_Init+0x54>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80009b8:	2302      	movs	r3, #2
 80009ba:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80009bc:	7923      	ldrb	r3, [r4, #4]
 80009be:	bb1b      	cbnz	r3, 8000a08 <HAL_CRC_Init+0x5c>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_CRC_Init+0x7c>)
 80009c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80009c6:	6822      	ldr	r2, [r4, #0]
 80009c8:	6893      	ldr	r3, [r2, #8]
 80009ca:	f023 0318 	bic.w	r3, r3, #24
 80009ce:	6093      	str	r3, [r2, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80009d0:	7963      	ldrb	r3, [r4, #5]
 80009d2:	bb13      	cbnz	r3, 8000a1a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	f04f 32ff 	mov.w	r2, #4294967295
 80009da:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	6893      	ldr	r3, [r2, #8]
 80009e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80009e4:	6961      	ldr	r1, [r4, #20]
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6093      	str	r3, [r2, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	6893      	ldr	r3, [r2, #8]
 80009ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009f2:	69a1      	ldr	r1, [r4, #24]
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009f8:	2301      	movs	r3, #1
 80009fa:	7763      	strb	r3, [r4, #29]
  
  /* Return function status */
  return HAL_OK;
 80009fc:	2000      	movs	r0, #0
 80009fe:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000a00:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000a02:	f007 fffb 	bl	80089fc <HAL_CRC_MspInit>
 8000a06:	e7d7      	b.n	80009b8 <HAL_CRC_Init+0xc>
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a08:	68e2      	ldr	r2, [r4, #12]
 8000a0a:	68a1      	ldr	r1, [r4, #8]
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f000 f80d 	bl	8000a2c <HAL_CRCEx_Polynomial_Set>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d0dc      	beq.n	80009d0 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
}
 8000a18:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	6922      	ldr	r2, [r4, #16]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	e7dc      	b.n	80009dc <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8000a22:	2001      	movs	r0, #1
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	04c11db7 	.word	0x04c11db7

08000a2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a2c:	b410      	push	{r4}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a2e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000a30:	e000      	b.n	8000a34 <HAL_CRCEx_Polynomial_Set+0x8>
 8000a32:	4623      	mov	r3, r4
 8000a34:	fa21 f403 	lsr.w	r4, r1, r3
 8000a38:	f014 0f01 	tst.w	r4, #1
 8000a3c:	d103      	bne.n	8000a46 <HAL_CRCEx_Polynomial_Set+0x1a>
 8000a3e:	1e5c      	subs	r4, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f6      	bne.n	8000a32 <HAL_CRCEx_Polynomial_Set+0x6>
 8000a44:	4623      	mov	r3, r4
  {
  }

  switch (PolyLength)
 8000a46:	2a10      	cmp	r2, #16
 8000a48:	d013      	beq.n	8000a72 <HAL_CRCEx_Polynomial_Set+0x46>
 8000a4a:	2a18      	cmp	r2, #24
 8000a4c:	d00d      	beq.n	8000a6a <HAL_CRCEx_Polynomial_Set+0x3e>
 8000a4e:	2a08      	cmp	r2, #8
 8000a50:	d013      	beq.n	8000a7a <HAL_CRCEx_Polynomial_Set+0x4e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8000a52:	6803      	ldr	r3, [r0, #0]
 8000a54:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8000a56:	6801      	ldr	r1, [r0, #0]
 8000a58:	688b      	ldr	r3, [r1, #8]
 8000a5a:	f023 0318 	bic.w	r3, r3, #24
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8000a62:	2000      	movs	r0, #0
}
 8000a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a68:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d9f1      	bls.n	8000a52 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8000a6e:	2001      	movs	r0, #1
 8000a70:	e7f8      	b.n	8000a64 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8000a72:	2b07      	cmp	r3, #7
 8000a74:	d9ed      	bls.n	8000a52 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
 8000a78:	e7f4      	b.n	8000a64 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d9e9      	bls.n	8000a52 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e7f0      	b.n	8000a64 <HAL_CRCEx_Polynomial_Set+0x38>
	...

08000a84 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000a84:	b338      	cbz	r0, 8000ad6 <HAL_DMA2D_Init+0x52>
{ 
 8000a86:	b510      	push	{r4, lr}
 8000a88:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000a8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000a8e:	b1eb      	cbz	r3, 8000acc <HAL_DMA2D_Init+0x48>
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000a90:	2302      	movs	r3, #2
 8000a92:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000a96:	6822      	ldr	r2, [r4, #0]
 8000a98:	6813      	ldr	r3, [r2, #0]
 8000a9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a9e:	6861      	ldr	r1, [r4, #4]
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000aa8:	f023 0307 	bic.w	r3, r3, #7
 8000aac:	68a1      	ldr	r1, [r4, #8]
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_DMA2D_Init+0x58>)
 8000ab8:	400b      	ands	r3, r1
 8000aba:	68e1      	ldr	r1, [r4, #12]
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000aca:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8000acc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8000ad0:	f006 fd36 	bl	8007540 <HAL_DMA2D_MspInit>
 8000ad4:	e7dc      	b.n	8000a90 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	ffffc000 	.word	0xffffc000

08000ae0 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000ae0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d059      	beq.n	8000b9c <HAL_DMA2D_ConfigLayer+0xbc>
{ 
 8000ae8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8000aea:	2301      	movs	r3, #1
 8000aec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000af0:	2302      	movs	r3, #2
 8000af2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000af6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	1c8b      	adds	r3, r1, #2
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	58c3      	ldr	r3, [r0, r3]
 8000b02:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b06:	3a09      	subs	r2, #9
 8000b08:	2a01      	cmp	r2, #1
 8000b0a:	d91e      	bls.n	8000b4a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000b0c:	1c8a      	adds	r2, r1, #2
 8000b0e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8000b12:	6852      	ldr	r2, [r2, #4]
 8000b14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000b18:	bb41      	cbnz	r1, 8000b6c <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000b1a:	6804      	ldr	r4, [r0, #0]
 8000b1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000b1e:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8000b20:	402a      	ands	r2, r5
 8000b22:	4313      	orrs	r3, r2
 8000b24:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b26:	6802      	ldr	r2, [r0, #0]
 8000b28:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8000b2c:	699c      	ldr	r4, [r3, #24]
 8000b2e:	6194      	str	r4, [r2, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	3b09      	subs	r3, #9
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d910      	bls.n	8000b5a <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8000b44:	4618      	mov	r0, r3
}
 8000b46:	bc30      	pop	{r4, r5}
 8000b48:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000b4a:	1c8a      	adds	r2, r1, #2
 8000b4c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8000b50:	6852      	ldr	r2, [r2, #4]
 8000b52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000b56:	4313      	orrs	r3, r2
 8000b58:	e7de      	b.n	8000b18 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000b5a:	6802      	ldr	r2, [r0, #0]
 8000b5c:	3102      	adds	r1, #2
 8000b5e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8000b62:	684b      	ldr	r3, [r1, #4]
 8000b64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b68:	6293      	str	r3, [r2, #40]	; 0x28
 8000b6a:	e7e5      	b.n	8000b38 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000b6c:	6804      	ldr	r4, [r0, #0]
 8000b6e:	69e5      	ldr	r5, [r4, #28]
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8000b72:	402a      	ands	r2, r5
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8000b78:	6802      	ldr	r2, [r0, #0]
 8000b7a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8000b7e:	699c      	ldr	r4, [r3, #24]
 8000b80:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	3b09      	subs	r3, #9
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d8d6      	bhi.n	8000b38 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8000b8a:	6802      	ldr	r2, [r0, #0]
 8000b8c:	3102      	adds	r1, #2
 8000b8e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8000b92:	684b      	ldr	r3, [r1, #4]
 8000b94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b98:	6213      	str	r3, [r2, #32]
 8000b9a:	e7cd      	b.n	8000b38 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	4770      	bx	lr
 8000ba0:	00fcfff0 	.word	0x00fcfff0

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ba8:	2400      	movs	r4, #0
 8000baa:	e037      	b.n	8000c1c <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bac:	2609      	movs	r6, #9
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	fa06 f60e 	lsl.w	r6, r6, lr
 8000bb6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bb8:	3302      	adds	r3, #2
 8000bba:	4e6c      	ldr	r6, [pc, #432]	; (8000d6c <HAL_GPIO_Init+0x1c8>)
 8000bbc:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <HAL_GPIO_Init+0x1cc>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	43eb      	mvns	r3, r5
 8000bc6:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bca:	684f      	ldr	r7, [r1, #4]
 8000bcc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000bd0:	d001      	beq.n	8000bd6 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000bd2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000bd6:	4a66      	ldr	r2, [pc, #408]	; (8000d70 <HAL_GPIO_Init+0x1cc>)
 8000bd8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000bda:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	684f      	ldr	r7, [r1, #4]
 8000be2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000be6:	d001      	beq.n	8000bec <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8000be8:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000bec:	4a60      	ldr	r2, [pc, #384]	; (8000d70 <HAL_GPIO_Init+0x1cc>)
 8000bee:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bf2:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	684f      	ldr	r7, [r1, #4]
 8000bf8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bfc:	d001      	beq.n	8000c02 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8000bfe:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000c02:	4a5b      	ldr	r2, [pc, #364]	; (8000d70 <HAL_GPIO_Init+0x1cc>)
 8000c04:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000c06:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c08:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c0a:	684e      	ldr	r6, [r1, #4]
 8000c0c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c10:	d001      	beq.n	8000c16 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8000c12:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000c16:	4a56      	ldr	r2, [pc, #344]	; (8000d70 <HAL_GPIO_Init+0x1cc>)
 8000c18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1a:	3401      	adds	r4, #1
 8000c1c:	2c0f      	cmp	r4, #15
 8000c1e:	f200 80a3 	bhi.w	8000d68 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 8000c22:	2301      	movs	r3, #1
 8000c24:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	680a      	ldr	r2, [r1, #0]
 8000c28:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000c2c:	42ab      	cmp	r3, r5
 8000c2e:	d1f4      	bne.n	8000c1a <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c30:	684a      	ldr	r2, [r1, #4]
 8000c32:	2a12      	cmp	r2, #18
 8000c34:	bf18      	it	ne
 8000c36:	2a02      	cmpne	r2, #2
 8000c38:	d112      	bne.n	8000c60 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000c3a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000c3e:	f10e 0e08 	add.w	lr, lr, #8
 8000c42:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c46:	f004 0607 	and.w	r6, r4, #7
 8000c4a:	00b6      	lsls	r6, r6, #2
 8000c4c:	270f      	movs	r7, #15
 8000c4e:	40b7      	lsls	r7, r6
 8000c50:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c54:	690f      	ldr	r7, [r1, #16]
 8000c56:	fa07 f606 	lsl.w	r6, r7, r6
 8000c5a:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8000c5c:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8000c60:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c62:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c70:	684f      	ldr	r7, [r1, #4]
 8000c72:	f007 0703 	and.w	r7, r7, #3
 8000c76:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c7a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000c7c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7e:	684e      	ldr	r6, [r1, #4]
 8000c80:	1e77      	subs	r7, r6, #1
 8000c82:	2e11      	cmp	r6, #17
 8000c84:	bf18      	it	ne
 8000c86:	2f01      	cmpne	r7, #1
 8000c88:	d901      	bls.n	8000c8e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8a:	2e12      	cmp	r6, #18
 8000c8c:	d10f      	bne.n	8000cae <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 8000c8e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c90:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c92:	68cf      	ldr	r7, [r1, #12]
 8000c94:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c98:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000c9a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c9c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9e:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ca2:	684e      	ldr	r6, [r1, #4]
 8000ca4:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000ca8:	40a6      	lsls	r6, r4
 8000caa:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000cac:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cae:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cb0:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cb2:	688b      	ldr	r3, [r1, #8]
 8000cb4:	fa03 f30e 	lsl.w	r3, r3, lr
 8000cb8:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000cba:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbc:	684b      	ldr	r3, [r1, #4]
 8000cbe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cc2:	d0aa      	beq.n	8000c1a <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_GPIO_Init+0x1d0>)
 8000cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8000cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cd8:	08a3      	lsrs	r3, r4, #2
 8000cda:	1c9e      	adds	r6, r3, #2
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_GPIO_Init+0x1c8>)
 8000cde:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ce2:	f004 0603 	and.w	r6, r4, #3
 8000ce6:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000cea:	260f      	movs	r6, #15
 8000cec:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cf0:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cf4:	4f20      	ldr	r7, [pc, #128]	; (8000d78 <HAL_GPIO_Init+0x1d4>)
 8000cf6:	42b8      	cmp	r0, r7
 8000cf8:	f43f af5a 	beq.w	8000bb0 <HAL_GPIO_Init+0xc>
 8000cfc:	4e1f      	ldr	r6, [pc, #124]	; (8000d7c <HAL_GPIO_Init+0x1d8>)
 8000cfe:	42b0      	cmp	r0, r6
 8000d00:	d022      	beq.n	8000d48 <HAL_GPIO_Init+0x1a4>
 8000d02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d06:	42b0      	cmp	r0, r6
 8000d08:	d020      	beq.n	8000d4c <HAL_GPIO_Init+0x1a8>
 8000d0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d0e:	42b0      	cmp	r0, r6
 8000d10:	d01e      	beq.n	8000d50 <HAL_GPIO_Init+0x1ac>
 8000d12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d16:	42b0      	cmp	r0, r6
 8000d18:	d01c      	beq.n	8000d54 <HAL_GPIO_Init+0x1b0>
 8000d1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d1e:	42b0      	cmp	r0, r6
 8000d20:	d01a      	beq.n	8000d58 <HAL_GPIO_Init+0x1b4>
 8000d22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d26:	42b0      	cmp	r0, r6
 8000d28:	d018      	beq.n	8000d5c <HAL_GPIO_Init+0x1b8>
 8000d2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d2e:	42b0      	cmp	r0, r6
 8000d30:	d016      	beq.n	8000d60 <HAL_GPIO_Init+0x1bc>
 8000d32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d36:	42b0      	cmp	r0, r6
 8000d38:	d014      	beq.n	8000d64 <HAL_GPIO_Init+0x1c0>
 8000d3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d3e:	42b0      	cmp	r0, r6
 8000d40:	f43f af34 	beq.w	8000bac <HAL_GPIO_Init+0x8>
 8000d44:	260a      	movs	r6, #10
 8000d46:	e734      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d48:	2601      	movs	r6, #1
 8000d4a:	e732      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d4c:	2602      	movs	r6, #2
 8000d4e:	e730      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d50:	2603      	movs	r6, #3
 8000d52:	e72e      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d54:	2604      	movs	r6, #4
 8000d56:	e72c      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d58:	2605      	movs	r6, #5
 8000d5a:	e72a      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d5c:	2606      	movs	r6, #6
 8000d5e:	e728      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d60:	2607      	movs	r6, #7
 8000d62:	e726      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
 8000d64:	2608      	movs	r6, #8
 8000d66:	e724      	b.n	8000bb2 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8000d68:	b003      	add	sp, #12
 8000d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40013c00 	.word	0x40013c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	f200 8092 	bhi.w	8000eac <HAL_GPIO_DeInit+0x12c>
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	e00a      	b.n	8000da2 <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000d8c:	2609      	movs	r6, #9
 8000d8e:	e000      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000d90:	2600      	movs	r6, #0
 8000d92:	fa06 f202 	lsl.w	r2, r6, r2
 8000d96:	4294      	cmp	r4, r2
 8000d98:	d06f      	beq.n	8000e7a <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	f200 8084 	bhi.w	8000eaa <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8000da2:	2201      	movs	r2, #1
 8000da4:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8000da6:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 8000daa:	42aa      	cmp	r2, r5
 8000dac:	d1f5      	bne.n	8000d9a <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dae:	6806      	ldr	r6, [r0, #0]
 8000db0:	005f      	lsls	r7, r3, #1
 8000db2:	2403      	movs	r4, #3
 8000db4:	40bc      	lsls	r4, r7
 8000db6:	43e4      	mvns	r4, r4
 8000db8:	4026      	ands	r6, r4
 8000dba:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dbc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000dc0:	f10e 0e08 	add.w	lr, lr, #8
 8000dc4:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 8000dc8:	f003 0607 	and.w	r6, r3, #7
 8000dcc:	00b6      	lsls	r6, r6, #2
 8000dce:	270f      	movs	r7, #15
 8000dd0:	fa07 f606 	lsl.w	r6, r7, r6
 8000dd4:	ea2c 0606 	bic.w	r6, ip, r6
 8000dd8:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ddc:	6886      	ldr	r6, [r0, #8]
 8000dde:	4026      	ands	r6, r4
 8000de0:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de2:	6846      	ldr	r6, [r0, #4]
 8000de4:	ea26 0202 	bic.w	r2, r6, r2
 8000de8:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dea:	68c2      	ldr	r2, [r0, #12]
 8000dec:	4014      	ands	r4, r2
 8000dee:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8000df0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8000df4:	f10e 0402 	add.w	r4, lr, #2
 8000df8:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <HAL_GPIO_DeInit+0x130>)
 8000dfa:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4097      	lsls	r7, r2
 8000e06:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e08:	4e2a      	ldr	r6, [pc, #168]	; (8000eb4 <HAL_GPIO_DeInit+0x134>)
 8000e0a:	42b0      	cmp	r0, r6
 8000e0c:	d0c0      	beq.n	8000d90 <HAL_GPIO_DeInit+0x10>
 8000e0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e12:	42b0      	cmp	r0, r6
 8000e14:	d021      	beq.n	8000e5a <HAL_GPIO_DeInit+0xda>
 8000e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e1a:	42b0      	cmp	r0, r6
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_DeInit+0xde>
 8000e1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e22:	42b0      	cmp	r0, r6
 8000e24:	d01d      	beq.n	8000e62 <HAL_GPIO_DeInit+0xe2>
 8000e26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e2a:	42b0      	cmp	r0, r6
 8000e2c:	d01b      	beq.n	8000e66 <HAL_GPIO_DeInit+0xe6>
 8000e2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e32:	42b0      	cmp	r0, r6
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_DeInit+0xea>
 8000e36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e3a:	42b0      	cmp	r0, r6
 8000e3c:	d017      	beq.n	8000e6e <HAL_GPIO_DeInit+0xee>
 8000e3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e42:	42b0      	cmp	r0, r6
 8000e44:	d015      	beq.n	8000e72 <HAL_GPIO_DeInit+0xf2>
 8000e46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e4a:	42b0      	cmp	r0, r6
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_DeInit+0xf6>
 8000e4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e52:	42b0      	cmp	r0, r6
 8000e54:	d09a      	beq.n	8000d8c <HAL_GPIO_DeInit+0xc>
 8000e56:	260a      	movs	r6, #10
 8000e58:	e79b      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	e799      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e5e:	2602      	movs	r6, #2
 8000e60:	e797      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e62:	2603      	movs	r6, #3
 8000e64:	e795      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e66:	2604      	movs	r6, #4
 8000e68:	e793      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e6a:	2605      	movs	r6, #5
 8000e6c:	e791      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e6e:	2606      	movs	r6, #6
 8000e70:	e78f      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e72:	2607      	movs	r6, #7
 8000e74:	e78d      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
 8000e76:	2608      	movs	r6, #8
 8000e78:	e78b      	b.n	8000d92 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000e7a:	4e0d      	ldr	r6, [pc, #52]	; (8000eb0 <HAL_GPIO_DeInit+0x130>)
 8000e7c:	f10e 0202 	add.w	r2, lr, #2
 8000e80:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 8000e84:	ea24 0707 	bic.w	r7, r4, r7
 8000e88:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <HAL_GPIO_DeInit+0x138>)
 8000e8e:	6826      	ldr	r6, [r4, #0]
 8000e90:	43ea      	mvns	r2, r5
 8000e92:	4016      	ands	r6, r2
 8000e94:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000e96:	6865      	ldr	r5, [r4, #4]
 8000e98:	4015      	ands	r5, r2
 8000e9a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000e9c:	68a5      	ldr	r5, [r4, #8]
 8000e9e:	4015      	ands	r5, r2
 8000ea0:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000ea2:	68e5      	ldr	r5, [r4, #12]
 8000ea4:	402a      	ands	r2, r5
 8000ea6:	60e2      	str	r2, [r4, #12]
 8000ea8:	e777      	b.n	8000d9a <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	b912      	cbnz	r2, 8000ec4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ebe:	0409      	lsls	r1, r1, #16
 8000ec0:	6181      	str	r1, [r0, #24]
 8000ec2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000ec4:	6181      	str	r1, [r0, #24]
 8000ec6:	4770      	bx	lr

08000ec8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8000eca:	684d      	ldr	r5, [r1, #4]
 8000ecc:	6804      	ldr	r4, [r0, #0]
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8000ed4:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000ed6:	01d2      	lsls	r2, r2, #7
 8000ed8:	4414      	add	r4, r2
 8000eda:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8000ede:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000ee2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8000ee6:	6806      	ldr	r6, [r0, #0]
 8000ee8:	1994      	adds	r4, r2, r6
 8000eea:	680b      	ldr	r3, [r1, #0]
 8000eec:	68f6      	ldr	r6, [r6, #12]
 8000eee:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8000ef2:	4433      	add	r3, r6
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000efa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8000efe:	68cd      	ldr	r5, [r1, #12]
 8000f00:	6804      	ldr	r4, [r0, #0]
 8000f02:	68e3      	ldr	r3, [r4, #12]
 8000f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f08:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000f0a:	4414      	add	r4, r2
 8000f0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8000f10:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000f14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8000f18:	6806      	ldr	r6, [r0, #0]
 8000f1a:	1994      	adds	r4, r2, r6
 8000f1c:	688b      	ldr	r3, [r1, #8]
 8000f1e:	68f6      	ldr	r6, [r6, #12]
 8000f20:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000f24:	4433      	add	r3, r6
 8000f26:	3301      	adds	r3, #1
 8000f28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000f2c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000f30:	6803      	ldr	r3, [r0, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8000f38:	f024 0407 	bic.w	r4, r4, #7
 8000f3c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000f40:	6803      	ldr	r3, [r0, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	690c      	ldr	r4, [r1, #16]
 8000f46:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8000f4a:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8000f4e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8000f52:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000f54:	6805      	ldr	r5, [r0, #0]
 8000f56:	4415      	add	r5, r2
 8000f58:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8000f62:	6805      	ldr	r5, [r0, #0]
 8000f64:	4415      	add	r5, r2
 8000f66:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000f6a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8000f6e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000f72:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8000f76:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000f7a:	6803      	ldr	r3, [r0, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8000f82:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8000f86:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000f8a:	6803      	ldr	r3, [r0, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	694d      	ldr	r5, [r1, #20]
 8000f90:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8000f9c:	4d2c      	ldr	r5, [pc, #176]	; (8001050 <LTDC_SetConfig+0x188>)
 8000f9e:	4035      	ands	r5, r6
 8000fa0:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000fa4:	6803      	ldr	r3, [r0, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	69cd      	ldr	r5, [r1, #28]
 8000faa:	6a0e      	ldr	r6, [r1, #32]
 8000fac:	4335      	orrs	r5, r6
 8000fae:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8000fba:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000fbe:	6803      	ldr	r3, [r0, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000fc4:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000fc8:	690b      	ldr	r3, [r1, #16]
 8000fca:	b16b      	cbz	r3, 8000fe8 <LTDC_SetConfig+0x120>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d039      	beq.n	8001044 <LTDC_SetConfig+0x17c>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	bf18      	it	ne
 8000fd4:	2b04      	cmpne	r3, #4
 8000fd6:	d037      	beq.n	8001048 <LTDC_SetConfig+0x180>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d037      	beq.n	800104c <LTDC_SetConfig+0x184>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d001      	beq.n	8000fe4 <LTDC_SetConfig+0x11c>
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8000fe0:	2601      	movs	r6, #1
 8000fe2:	e002      	b.n	8000fea <LTDC_SetConfig+0x122>
    tmp = 2;
 8000fe4:	2602      	movs	r6, #2
 8000fe6:	e000      	b.n	8000fea <LTDC_SetConfig+0x122>
    tmp = 4;
 8000fe8:	2604      	movs	r6, #4
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000fea:	6804      	ldr	r4, [r0, #0]
 8000fec:	4414      	add	r4, r2
 8000fee:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8000ff2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8000ff6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8000ffa:	6804      	ldr	r4, [r0, #0]
 8000ffc:	4414      	add	r4, r2
 8000ffe:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8001000:	fb05 f506 	mul.w	r5, r5, r6
 8001004:	684b      	ldr	r3, [r1, #4]
 8001006:	680f      	ldr	r7, [r1, #0]
 8001008:	1bdb      	subs	r3, r3, r7
 800100a:	fb03 f306 	mul.w	r3, r3, r6
 800100e:	3303      	adds	r3, #3
 8001010:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001014:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001018:	6803      	ldr	r3, [r0, #0]
 800101a:	4413      	add	r3, r2
 800101c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8001020:	4c0c      	ldr	r4, [pc, #48]	; (8001054 <LTDC_SetConfig+0x18c>)
 8001022:	402c      	ands	r4, r5
 8001024:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	4413      	add	r3, r2
 800102c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800102e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	441a      	add	r2, r3
 8001036:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3;
 8001044:	2603      	movs	r6, #3
 8001046:	e7d0      	b.n	8000fea <LTDC_SetConfig+0x122>
    tmp = 2;
 8001048:	2602      	movs	r6, #2
 800104a:	e7ce      	b.n	8000fea <LTDC_SetConfig+0x122>
 800104c:	2602      	movs	r6, #2
 800104e:	e7cc      	b.n	8000fea <LTDC_SetConfig+0x122>
 8001050:	fffff8f8 	.word	0xfffff8f8
 8001054:	fffff800 	.word	0xfffff800

08001058 <HAL_LTDC_Init>:
  if(hltdc == NULL)
 8001058:	2800      	cmp	r0, #0
 800105a:	d077      	beq.n	800114c <HAL_LTDC_Init+0xf4>
{
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4604      	mov	r4, r0
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001060:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d06c      	beq.n	8001142 <HAL_LTDC_Init+0xea>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001068:	2302      	movs	r3, #2
 800106a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	6993      	ldr	r3, [r2, #24]
 8001072:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001076:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001078:	6821      	ldr	r1, [r4, #0]
 800107a:	698a      	ldr	r2, [r1, #24]
 800107c:	6863      	ldr	r3, [r4, #4]
 800107e:	68a0      	ldr	r0, [r4, #8]
 8001080:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001082:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001084:	4303      	orrs	r3, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001086:	6920      	ldr	r0, [r4, #16]
 8001088:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800108a:	4313      	orrs	r3, r2
 800108c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800108e:	6821      	ldr	r1, [r4, #0]
 8001090:	688a      	ldr	r2, [r1, #8]
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_LTDC_Init+0xf8>)
 8001094:	401a      	ands	r2, r3
 8001096:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8001098:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800109a:	6820      	ldr	r0, [r4, #0]
 800109c:	6882      	ldr	r2, [r0, #8]
 800109e:	69a1      	ldr	r1, [r4, #24]
 80010a0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010a4:	430a      	orrs	r2, r1
 80010a6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80010a8:	6821      	ldr	r1, [r4, #0]
 80010aa:	68ca      	ldr	r2, [r1, #12]
 80010ac:	401a      	ands	r2, r3
 80010ae:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80010b0:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80010b2:	6820      	ldr	r0, [r4, #0]
 80010b4:	68c2      	ldr	r2, [r0, #12]
 80010b6:	6a21      	ldr	r1, [r4, #32]
 80010b8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010bc:	430a      	orrs	r2, r1
 80010be:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80010c0:	6821      	ldr	r1, [r4, #0]
 80010c2:	690a      	ldr	r2, [r1, #16]
 80010c4:	401a      	ands	r2, r3
 80010c6:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80010c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	6902      	ldr	r2, [r0, #16]
 80010ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010d0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010d4:	430a      	orrs	r2, r1
 80010d6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80010d8:	6821      	ldr	r1, [r4, #0]
 80010da:	694a      	ldr	r2, [r1, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80010e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80010e2:	6821      	ldr	r1, [r4, #0]
 80010e4:	694b      	ldr	r3, [r1, #20]
 80010e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010e8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80010ec:	4313      	orrs	r3, r2
 80010ee:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80010f0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80010f4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80010f8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80010fa:	6821      	ldr	r1, [r4, #0]
 80010fc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80010fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001102:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001104:	6821      	ldr	r1, [r4, #0]
 8001106:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001108:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800110c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001110:	4303      	orrs	r3, r0
 8001112:	4313      	orrs	r3, r2
 8001114:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8001120:	6822      	ldr	r2, [r4, #0]
 8001122:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	6993      	ldr	r3, [r2, #24]
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001134:	2000      	movs	r0, #0
 8001136:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800113a:	2301      	movs	r3, #1
 800113c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001140:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8001142:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001146:	f006 f96b 	bl	8007420 <HAL_LTDC_MspInit>
 800114a:	e78d      	b.n	8001068 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800114c:	2001      	movs	r0, #1
 800114e:	4770      	bx	lr
 8001150:	f000f800 	.word	0xf000f800

08001154 <HAL_LTDC_DeInit>:
{
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc); 
 8001158:	f006 f9bc 	bl	80074d4 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800115c:	2000      	movs	r0, #0
 800115e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001162:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001166:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800116a:	bd10      	pop	{r4, pc}

0800116c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800116c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_LTDC_ConfigLayer+0xc>
 8001174:	2002      	movs	r0, #2
 8001176:	4770      	bx	lr
{   
 8001178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800117c:	4696      	mov	lr, r2
 800117e:	460f      	mov	r7, r1
 8001180:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8001182:	f04f 0801 	mov.w	r8, #1
 8001186:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800118a:	2302      	movs	r3, #2
 800118c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001190:	2434      	movs	r4, #52	; 0x34
 8001192:	fb04 0402 	mla	r4, r4, r2, r0
 8001196:	3438      	adds	r4, #56	; 0x38
 8001198:	460d      	mov	r5, r1
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80011aa:	4672      	mov	r2, lr
 80011ac:	4639      	mov	r1, r7
 80011ae:	4630      	mov	r0, r6
 80011b0:	f7ff fe8a 	bl	8000ec8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80011b4:	6833      	ldr	r3, [r6, #0]
 80011b6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80011ba:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80011be:	2000      	movs	r0, #0
 80011c0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
  return HAL_OK;
 80011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011c8 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 80011c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d01d      	beq.n	800120c <HAL_LTDC_ConfigColorKeying+0x44>
{
 80011d0:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 80011d2:	2401      	movs	r4, #1
 80011d4:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80011d8:	2302      	movs	r3, #2
 80011da:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80011de:	6803      	ldr	r3, [r0, #0]
 80011e0:	01d2      	lsls	r2, r2, #7
 80011e2:	4413      	add	r3, r2
 80011e4:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 80011e8:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80011ec:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80011f0:	6803      	ldr	r3, [r0, #0]
 80011f2:	441a      	add	r2, r3
 80011f4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80011f8:	6803      	ldr	r3, [r0, #0]
 80011fa:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80011fc:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001200:	2300      	movs	r3, #0
 8001202:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8001206:	4618      	mov	r0, r3
}
 8001208:	bc30      	pop	{r4, r5}
 800120a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800120c:	2002      	movs	r0, #2
 800120e:	4770      	bx	lr

08001210 <HAL_LTDC_ConfigCLUT>:
{
 8001210:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hltdc);
 8001212:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8001216:	2c01      	cmp	r4, #1
 8001218:	d036      	beq.n	8001288 <HAL_LTDC_ConfigCLUT+0x78>
 800121a:	2401      	movs	r4, #1
 800121c:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8001220:	2402      	movs	r4, #2
 8001222:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  for(counter = 0; (counter < CLUTSize); counter++)
 8001226:	2600      	movs	r6, #0
 8001228:	e012      	b.n	8001250 <HAL_LTDC_ConfigCLUT+0x40>
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 800122a:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 800122e:	680f      	ldr	r7, [r1, #0]
 8001230:	b2fd      	uxtb	r5, r7
 8001232:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
 8001236:	f407 457f 	and.w	r5, r7, #65280	; 0xff00
 800123a:	432c      	orrs	r4, r5
 800123c:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 8001240:	433c      	orrs	r4, r7
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8001242:	3104      	adds	r1, #4
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001244:	6805      	ldr	r5, [r0, #0]
 8001246:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
 800124a:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
  for(counter = 0; (counter < CLUTSize); counter++)
 800124e:	3601      	adds	r6, #1
 8001250:	4296      	cmp	r6, r2
 8001252:	d210      	bcs.n	8001276 <HAL_LTDC_ConfigCLUT+0x66>
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001254:	2434      	movs	r4, #52	; 0x34
 8001256:	fb04 0403 	mla	r4, r4, r3, r0
 800125a:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 800125c:	2c06      	cmp	r4, #6
 800125e:	d0e4      	beq.n	800122a <HAL_LTDC_ConfigCLUT+0x1a>
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8001260:	680d      	ldr	r5, [r1, #0]
 8001262:	b2ec      	uxtb	r4, r5
 8001264:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 8001268:	f405 477f 	and.w	r7, r5, #65280	; 0xff00
 800126c:	433c      	orrs	r4, r7
 800126e:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8001272:	432c      	orrs	r4, r5
 8001274:	e7e5      	b.n	8001242 <HAL_LTDC_ConfigCLUT+0x32>
  hltdc->State = HAL_LTDC_STATE_READY; 
 8001276:	2301      	movs	r3, #1
 8001278:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);  
 800127c:	2300      	movs	r3, #0
 800127e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8001282:	4618      	mov	r0, r3
}
 8001284:	bcf0      	pop	{r4, r5, r6, r7}
 8001286:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8001288:	2002      	movs	r0, #2
 800128a:	e7fb      	b.n	8001284 <HAL_LTDC_ConfigCLUT+0x74>

0800128c <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 800128c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d017      	beq.n	80012c4 <HAL_LTDC_EnableColorKeying+0x38>
 8001294:	2201      	movs	r2, #1
 8001296:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800129a:	2302      	movs	r3, #2
 800129c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80012a0:	6803      	ldr	r3, [r0, #0]
 80012a2:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80012a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY; 
 80012b6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012ba:	2300      	movs	r3, #0
 80012bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;  
 80012c0:	4618      	mov	r0, r3
 80012c2:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80012c4:	2002      	movs	r0, #2
}
 80012c6:	4770      	bx	lr

080012c8 <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 80012c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d017      	beq.n	8001300 <HAL_LTDC_DisableColorKeying+0x38>
 80012d0:	2201      	movs	r2, #1
 80012d2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80012e2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80012e6:	f023 0302 	bic.w	r3, r3, #2
 80012ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80012ee:	6803      	ldr	r3, [r0, #0]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY; 
 80012f2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012f6:	2300      	movs	r3, #0
 80012f8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80012fc:	4618      	mov	r0, r3
 80012fe:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8001300:	2002      	movs	r0, #2
}
 8001302:	4770      	bx	lr

08001304 <HAL_LTDC_SetWindowPosition>:
{
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001306:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 800130a:	2c01      	cmp	r4, #1
 800130c:	d101      	bne.n	8001312 <HAL_LTDC_SetWindowPosition+0xe>
 800130e:	2002      	movs	r0, #2
}
 8001310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001312:	4615      	mov	r5, r2
 8001314:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001316:	2601      	movs	r6, #1
 8001318:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800131c:	2202      	movs	r2, #2
 800131e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001322:	2034      	movs	r0, #52	; 0x34
 8001324:	fb00 f003 	mul.w	r0, r0, r3
 8001328:	f100 0738 	add.w	r7, r0, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
 800132c:	4420      	add	r0, r4
 800132e:	6381      	str	r1, [r0, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001330:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001332:	4411      	add	r1, r2
 8001334:	63c1      	str	r1, [r0, #60]	; 0x3c
  pLayerCfg->WindowY0 = Y0;
 8001336:	6405      	str	r5, [r0, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001338:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800133a:	4415      	add	r5, r2
 800133c:	6445      	str	r5, [r0, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800133e:	461a      	mov	r2, r3
 8001340:	19e1      	adds	r1, r4, r7
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff fdc0 	bl	8000ec8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800134c:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001350:	2000      	movs	r0, #0
 8001352:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8001356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001358 <HAL_LTDC_SetAlpha>:
{
 8001358:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800135a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_LTDC_SetAlpha+0xe>
 8001362:	2002      	movs	r0, #2
}
 8001364:	bd38      	pop	{r3, r4, r5, pc}
 8001366:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001368:	2501      	movs	r5, #1
 800136a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800136e:	2302      	movs	r3, #2
 8001370:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001374:	2334      	movs	r3, #52	; 0x34
 8001376:	fb03 f302 	mul.w	r3, r3, r2
 800137a:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 800137e:	4423      	add	r3, r4
 8001380:	64d9      	str	r1, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001382:	1821      	adds	r1, r4, r0
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fd9f 	bl	8000ec8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800138e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001392:	2000      	movs	r0, #0
 8001394:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8001398:	bd38      	pop	{r3, r4, r5, pc}

0800139a <HAL_LTDC_SetAddress>:
{
 800139a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 800139c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_LTDC_SetAddress+0xe>
 80013a4:	2002      	movs	r0, #2
}
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80013aa:	2501      	movs	r5, #1
 80013ac:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80013b6:	2334      	movs	r3, #52	; 0x34
 80013b8:	fb03 f302 	mul.w	r3, r3, r2
 80013bc:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80013c0:	4423      	add	r3, r4
 80013c2:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80013c4:	1821      	adds	r1, r4, r0
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff fd7e 	bl	8000ec8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80013d0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 80013da:	bd38      	pop	{r3, r4, r5, pc}

080013dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80013dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e0:	b083      	sub	sp, #12
 80013e2:	4607      	mov	r7, r0
 80013e4:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013e6:	f8d0 8000 	ldr.w	r8, [r0]
  int32_t len = 0;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80013ea:	00ca      	lsls	r2, r1, #3
 80013ec:	1a52      	subs	r2, r2, r1
 80013ee:	0093      	lsls	r3, r2, #2
 80013f0:	4403      	add	r3, r0
 80013f2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80013f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013f6:	1ab6      	subs	r6, r6, r2

  if (len > ep->maxpacket)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d900      	bls.n	8001400 <PCD_WriteEmptyTxFifo+0x24>
  {
    len = ep->maxpacket;
 80013fe:	461e      	mov	r6, r3
  }


  len32b = (len + 3) / 4;
 8001400:	f116 0903 	adds.w	r9, r6, #3
 8001404:	d402      	bmi.n	800140c <PCD_WriteEmptyTxFifo+0x30>
 8001406:	ea4f 09a9 	mov.w	r9, r9, asr #2

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800140a:	e019      	b.n	8001440 <PCD_WriteEmptyTxFifo+0x64>
  len32b = (len + 3) / 4;
 800140c:	f109 0903 	add.w	r9, r9, #3
 8001410:	e7f9      	b.n	8001406 <PCD_WriteEmptyTxFifo+0x2a>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 8001412:	f116 0903 	adds.w	r9, r6, #3
 8001416:	d42f      	bmi.n	8001478 <PCD_WriteEmptyTxFifo+0x9c>
 8001418:	ea4f 09a9 	mov.w	r9, r9, asr #2

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 800141c:	00eb      	lsls	r3, r5, #3
 800141e:	1b5b      	subs	r3, r3, r5
 8001420:	009c      	lsls	r4, r3, #2
 8001422:	443c      	add	r4, r7
 8001424:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001426:	7c3b      	ldrb	r3, [r7, #16]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	b2b3      	uxth	r3, r6
 800142c:	b2ea      	uxtb	r2, r5
 800142e:	4640      	mov	r0, r8
 8001430:	f002 fca2 	bl	8003d78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001436:	4433      	add	r3, r6
 8001438:	6463      	str	r3, [r4, #68]	; 0x44
    ep->xfer_count += len;
 800143a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800143c:	4433      	add	r3, r6
 800143e:	6523      	str	r3, [r4, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8001440:	4641      	mov	r1, r8
 8001442:	eb08 1345 	add.w	r3, r8, r5, lsl #5
 8001446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4599      	cmp	r9, r3
 8001450:	d215      	bcs.n	800147e <PCD_WriteEmptyTxFifo+0xa2>
          ep->xfer_count < ep->xfer_len &&
 8001452:	00ea      	lsls	r2, r5, #3
 8001454:	1b52      	subs	r2, r2, r5
 8001456:	0093      	lsls	r3, r2, #2
 8001458:	443b      	add	r3, r7
 800145a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800145e:	429a      	cmp	r2, r3
 8001460:	d20d      	bcs.n	800147e <PCD_WriteEmptyTxFifo+0xa2>
          ep->xfer_count < ep->xfer_len &&
 8001462:	b163      	cbz	r3, 800147e <PCD_WriteEmptyTxFifo+0xa2>
    len = ep->xfer_len - ep->xfer_count;
 8001464:	1a9e      	subs	r6, r3, r2
    if (len > ep->maxpacket)
 8001466:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800146a:	0093      	lsls	r3, r2, #2
 800146c:	443b      	add	r3, r7
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	429e      	cmp	r6, r3
 8001472:	d9ce      	bls.n	8001412 <PCD_WriteEmptyTxFifo+0x36>
      len = ep->maxpacket;
 8001474:	461e      	mov	r6, r3
 8001476:	e7cc      	b.n	8001412 <PCD_WriteEmptyTxFifo+0x36>
    len32b = (len + 3) / 4;
 8001478:	f109 0903 	add.w	r9, r9, #3
 800147c:	e7cc      	b.n	8001418 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if(len <= 0)
 800147e:	2e00      	cmp	r6, #0
 8001480:	dd03      	ble.n	800148a <PCD_WriteEmptyTxFifo+0xae>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;

  }

  return HAL_OK;
}
 8001482:	2000      	movs	r0, #0
 8001484:	b003      	add	sp, #12
 8001486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fifoemptymsk = 0x1 << epnum;
 800148a:	2301      	movs	r3, #1
 800148c:	40ab      	lsls	r3, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800148e:	f8d1 5834 	ldr.w	r5, [r1, #2100]	; 0x834
 8001492:	ea25 0503 	bic.w	r5, r5, r3
 8001496:	f8c1 5834 	str.w	r5, [r1, #2100]	; 0x834
 800149a:	e7f2      	b.n	8001482 <PCD_WriteEmptyTxFifo+0xa6>

0800149c <HAL_PCD_Init>:
  if(hpcd == NULL)
 800149c:	2800      	cmp	r0, #0
 800149e:	d072      	beq.n	8001586 <HAL_PCD_Init+0xea>
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80014ac:	f007 fbaa 	bl	8008c04 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	f002 fa05 	bl	80038c0 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80014b6:	4625      	mov	r5, r4
 80014b8:	f855 7b10 	ldr.w	r7, [r5], #16
 80014bc:	466e      	mov	r6, sp
 80014be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80014ce:	1d23      	adds	r3, r4, #4
 80014d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d2:	4638      	mov	r0, r7
 80014d4:	f002 f9b0 	bl	8003838 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80014d8:	2100      	movs	r1, #0
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f002 f9f6 	bl	80038cc <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 80014e0:	2200      	movs	r2, #0
 80014e2:	e010      	b.n	8001506 <HAL_PCD_Init+0x6a>
   hpcd->IN_ep[i].is_in = 1;
 80014e4:	00d1      	lsls	r1, r2, #3
 80014e6:	1a89      	subs	r1, r1, r2
 80014e8:	008b      	lsls	r3, r1, #2
 80014ea:	4423      	add	r3, r4
 80014ec:	2101      	movs	r1, #1
 80014ee:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
 80014f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80014f6:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f8:	2100      	movs	r1, #0
 80014fa:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket =  0;
 80014fe:	6419      	str	r1, [r3, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0;
 8001500:	6459      	str	r1, [r3, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0;
 8001502:	64d9      	str	r1, [r3, #76]	; 0x4c
 for (i = 0; i < 15 ; i++)
 8001504:	3201      	adds	r2, #1
 8001506:	2a0e      	cmp	r2, #14
 8001508:	d9ec      	bls.n	80014e4 <HAL_PCD_Init+0x48>
 800150a:	2200      	movs	r2, #0
 800150c:	e018      	b.n	8001540 <HAL_PCD_Init+0xa4>
   hpcd->OUT_ep[i].is_in = 0;
 800150e:	00d1      	lsls	r1, r2, #3
 8001510:	1a89      	subs	r1, r1, r2
 8001512:	008b      	lsls	r3, r1, #2
 8001514:	4423      	add	r3, r4
 8001516:	2100      	movs	r1, #0
 8001518:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 800151c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001520:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001522:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8001526:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0;
 800152a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0;
 800152e:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0;
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8001538:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800153c:	6059      	str	r1, [r3, #4]
 for (i = 0; i < 15 ; i++)
 800153e:	3201      	adds	r2, #1
 8001540:	2a0e      	cmp	r2, #14
 8001542:	d9e4      	bls.n	800150e <HAL_PCD_Init+0x72>
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001544:	4625      	mov	r5, r4
 8001546:	f855 7b10 	ldr.w	r7, [r5], #16
 800154a:	466e      	mov	r6, sp
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001554:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001558:	e886 0003 	stmia.w	r6, {r0, r1}
 800155c:	1d23      	adds	r3, r4, #4
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	4638      	mov	r0, r7
 8001562:	f002 f9f7 	bl	8003954 <USB_DevInit>
 hpcd->State= HAL_PCD_STATE_READY;
 8001566:	2301      	movs	r3, #1
 8001568:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
 if (hpcd->Init.lpm_enable ==1)
 800156c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_PCD_Init+0xe2>
 USB_DevDisconnect (hpcd->Instance);
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	f002 fddb 	bl	800412e <USB_DevDisconnect>
 return HAL_OK;
 8001578:	2000      	movs	r0, #0
}
 800157a:	b00b      	add	sp, #44	; 0x2c
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   HAL_PCDEx_ActivateLPM(hpcd);
 800157e:	4620      	mov	r0, r4
 8001580:	f000 fcc6 	bl	8001f10 <HAL_PCDEx_ActivateLPM>
 8001584:	e7f5      	b.n	8001572 <HAL_PCD_Init+0xd6>
    return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	4770      	bx	lr

0800158a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800158a:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_PCD_Start+0xc>
 8001592:	2002      	movs	r0, #2
 8001594:	4770      	bx	lr
{
 8001596:	b510      	push	{r4, lr}
 8001598:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800159a:	2301      	movs	r3, #1
 800159c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 80015a0:	6800      	ldr	r0, [r0, #0]
 80015a2:	f002 fdb8 	bl	8004116 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80015a6:	6820      	ldr	r0, [r4, #0]
 80015a8:	f002 f984 	bl	80038b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <HAL_PCD_IRQHandler>:
{
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ba:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015bc:	4630      	mov	r0, r6
 80015be:	f002 fded 	bl	800419c <USB_GetMode>
 80015c2:	b108      	cbz	r0, 80015c8 <HAL_PCD_IRQHandler+0x14>
 80015c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015c8:	4607      	mov	r7, r0
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	f002 fdbb 	bl	8004146 <USB_ReadInterrupts>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d0f7      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x10>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	f002 fdb6 	bl	8004146 <USB_ReadInterrupts>
 80015da:	f010 0f02 	tst.w	r0, #2
 80015de:	d002      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x32>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	2202      	movs	r2, #2
 80015e4:	615a      	str	r2, [r3, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015e6:	6820      	ldr	r0, [r4, #0]
 80015e8:	f002 fdad 	bl	8004146 <USB_ReadInterrupts>
 80015ec:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80015f0:	f040 8090 	bne.w	8001714 <HAL_PCD_IRQHandler+0x160>
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 80015f4:	463d      	mov	r5, r7
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f002 fda5 	bl	8004146 <USB_ReadInterrupts>
 80015fc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001600:	f040 810d 	bne.w	800181e <HAL_PCD_IRQHandler+0x26a>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	f002 fd9e 	bl	8004146 <USB_ReadInterrupts>
 800160a:	2800      	cmp	r0, #0
 800160c:	f2c0 8179 	blt.w	8001902 <HAL_PCD_IRQHandler+0x34e>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001610:	6820      	ldr	r0, [r4, #0]
 8001612:	f002 fd98 	bl	8004146 <USB_ReadInterrupts>
 8001616:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800161a:	d009      	beq.n	8001630 <HAL_PCD_IRQHandler+0x7c>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800161c:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001620:	f013 0f01 	tst.w	r3, #1
 8001624:	f040 8186 	bne.w	8001934 <HAL_PCD_IRQHandler+0x380>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	f002 fd88 	bl	8004146 <USB_ReadInterrupts>
 8001636:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800163a:	d014      	beq.n	8001666 <HAL_PCD_IRQHandler+0xb2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001642:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8001644:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 8177 	bne.w	800193c <HAL_PCD_IRQHandler+0x388>
        hpcd->LPM_State = LPM_L1;
 800164e:	2101      	movs	r1, #1
 8001650:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800165c:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001660:	4620      	mov	r0, r4
 8001662:	f007 fc4b 	bl	8008efc <HAL_PCDEx_LPM_Callback>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	f002 fd6d 	bl	8004146 <USB_ReadInterrupts>
 800166c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001670:	f040 8168 	bne.w	8001944 <HAL_PCD_IRQHandler+0x390>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	f002 fd66 	bl	8004146 <USB_ReadInterrupts>
 800167a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800167e:	f040 81bc 	bne.w	80019fa <HAL_PCD_IRQHandler+0x446>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001682:	6820      	ldr	r0, [r4, #0]
 8001684:	f002 fd5f 	bl	8004146 <USB_ReadInterrupts>
 8001688:	f010 0f10 	tst.w	r0, #16
 800168c:	d014      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x104>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	6993      	ldr	r3, [r2, #24]
 8001692:	f023 0310 	bic.w	r3, r3, #16
 8001696:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001698:	6a37      	ldr	r7, [r6, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800169a:	f007 080f 	and.w	r8, r7, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800169e:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	f000 8236 	beq.w	8001b14 <HAL_PCD_IRQHandler+0x560>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	f000 8254 	beq.w	8001b56 <HAL_PCD_IRQHandler+0x5a2>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6993      	ldr	r3, [r2, #24]
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f002 fd44 	bl	8004146 <USB_ReadInterrupts>
 80016be:	f010 0f08 	tst.w	r0, #8
 80016c2:	f040 825c 	bne.w	8001b7e <HAL_PCD_IRQHandler+0x5ca>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f002 fd3d 	bl	8004146 <USB_ReadInterrupts>
 80016cc:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80016d0:	f040 825c 	bne.w	8001b8c <HAL_PCD_IRQHandler+0x5d8>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	f002 fd36 	bl	8004146 <USB_ReadInterrupts>
 80016da:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80016de:	f040 825e 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x5ea>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	f002 fd2f 	bl	8004146 <USB_ReadInterrupts>
 80016e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80016ec:	f040 8260 	bne.w	8001bb0 <HAL_PCD_IRQHandler+0x5fc>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	f002 fd28 	bl	8004146 <USB_ReadInterrupts>
 80016f6:	f010 0f04 	tst.w	r0, #4
 80016fa:	f43f af63 	beq.w	80015c4 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001702:	f015 0f04 	tst.w	r5, #4
 8001706:	f040 825b 	bne.w	8001bc0 <HAL_PCD_IRQHandler+0x60c>
      hpcd->Instance->GOTGINT |= temp;
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4315      	orrs	r5, r2
 8001710:	605d      	str	r5, [r3, #4]
 8001712:	e757      	b.n	80015c4 <HAL_PCD_IRQHandler+0x10>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	f002 fd1a 	bl	800414e <USB_ReadDevAllOutEpInterrupt>
 800171a:	4680      	mov	r8, r0
      epnum = 0;
 800171c:	463d      	mov	r5, r7
      while ( ep_intr )
 800171e:	e048      	b.n	80017b2 <HAL_PCD_IRQHandler+0x1fe>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001720:	f8d6 2b08 	ldr.w	r2, [r6, #2824]	; 0xb08
 8001724:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001728:	d05d      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x232>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 800172a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e059      	b.n	80017e6 <HAL_PCD_IRQHandler+0x232>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001732:	00e9      	lsls	r1, r5, #3
 8001734:	1b49      	subs	r1, r1, r5
 8001736:	008a      	lsls	r2, r1, #2
 8001738:	4422      	add	r2, r4
 800173a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001744:	1ac9      	subs	r1, r1, r3
 8001746:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800174a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800174e:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001752:	440b      	add	r3, r1
 8001754:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001758:	e048      	b.n	80017ec <HAL_PCD_IRQHandler+0x238>
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 800175a:	2d00      	cmp	r5, #0
 800175c:	d14d      	bne.n	80017fa <HAL_PCD_IRQHandler+0x246>
 800175e:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001762:	0093      	lsls	r3, r2, #2
 8001764:	4423      	add	r3, r4
 8001766:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d145      	bne.n	80017fa <HAL_PCD_IRQHandler+0x246>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800176e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001772:	2101      	movs	r1, #1
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f002 fd31 	bl	80041dc <USB_EP0_OutStart>
 800177a:	e03e      	b.n	80017fa <HAL_PCD_IRQHandler+0x246>
            HAL_PCD_SetupStageCallback(hpcd);
 800177c:	4620      	mov	r0, r4
 800177e:	f007 fa79 	bl	8008c74 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001782:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001786:	2208      	movs	r2, #8
 8001788:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800178c:	f019 0f10 	tst.w	r9, #16
 8001790:	d004      	beq.n	800179c <HAL_PCD_IRQHandler+0x1e8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001792:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001796:	2210      	movs	r2, #16
 8001798:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800179c:	f019 0f20 	tst.w	r9, #32
 80017a0:	d004      	beq.n	80017ac <HAL_PCD_IRQHandler+0x1f8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017a2:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80017a6:	2220      	movs	r2, #32
 80017a8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 80017ac:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80017ae:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while ( ep_intr )
 80017b2:	f1b8 0f00 	cmp.w	r8, #0
 80017b6:	f43f af1e 	beq.w	80015f6 <HAL_PCD_IRQHandler+0x42>
        if (ep_intr & 0x1)
 80017ba:	f018 0f01 	tst.w	r8, #1
 80017be:	d0f5      	beq.n	80017ac <HAL_PCD_IRQHandler+0x1f8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80017c0:	fa5f fa85 	uxtb.w	sl, r5
 80017c4:	4651      	mov	r1, sl
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f002 fcd1 	bl	800416e <USB_ReadDevOutEPInterrupt>
 80017cc:	4681      	mov	r9, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017ce:	f010 0f01 	tst.w	r0, #1
 80017d2:	d012      	beq.n	80017fa <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017d4:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80017d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017dc:	2201      	movs	r2, #1
 80017de:	609a      	str	r2, [r3, #8]
            if (hpcd->Init.dma_enable == 1)
 80017e0:	6922      	ldr	r2, [r4, #16]
 80017e2:	2a01      	cmp	r2, #1
 80017e4:	d09c      	beq.n	8001720 <HAL_PCD_IRQHandler+0x16c>
            if(hpcd->Init.dma_enable == 1)
 80017e6:	6922      	ldr	r2, [r4, #16]
 80017e8:	2a01      	cmp	r2, #1
 80017ea:	d0a2      	beq.n	8001732 <HAL_PCD_IRQHandler+0x17e>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80017ec:	4651      	mov	r1, sl
 80017ee:	4620      	mov	r0, r4
 80017f0:	f007 fa48 	bl	8008c84 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 80017f4:	6923      	ldr	r3, [r4, #16]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d0af      	beq.n	800175a <HAL_PCD_IRQHandler+0x1a6>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017fa:	f019 0f08 	tst.w	r9, #8
 80017fe:	d0c5      	beq.n	800178c <HAL_PCD_IRQHandler+0x1d8>
            if (hpcd->Init.dma_enable == 1)
 8001800:	6923      	ldr	r3, [r4, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d1ba      	bne.n	800177c <HAL_PCD_IRQHandler+0x1c8>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001806:	f8d6 3b08 	ldr.w	r3, [r6, #2824]	; 0xb08
 800180a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800180e:	d0b5      	beq.n	800177c <HAL_PCD_IRQHandler+0x1c8>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001810:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001818:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 800181c:	e7ae      	b.n	800177c <HAL_PCD_IRQHandler+0x1c8>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800181e:	6820      	ldr	r0, [r4, #0]
 8001820:	f002 fc9d 	bl	800415e <USB_ReadDevAllInEpInterrupt>
 8001824:	4680      	mov	r8, r0
      epnum = 0;
 8001826:	463d      	mov	r5, r7
      while ( ep_intr )
 8001828:	e02e      	b.n	8001888 <HAL_PCD_IRQHandler+0x2d4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800182a:	00ea      	lsls	r2, r5, #3
 800182c:	1b52      	subs	r2, r2, r5
 800182e:	0093      	lsls	r3, r2, #2
 8001830:	4423      	add	r3, r4
 8001832:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001836:	440a      	add	r2, r1
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
 800183a:	e046      	b.n	80018ca <HAL_PCD_IRQHandler+0x316>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800183c:	f019 0f08 	tst.w	r9, #8
 8001840:	d004      	beq.n	800184c <HAL_PCD_IRQHandler+0x298>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001842:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001846:	2208      	movs	r2, #8
 8001848:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800184c:	f019 0f10 	tst.w	r9, #16
 8001850:	d004      	beq.n	800185c <HAL_PCD_IRQHandler+0x2a8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001852:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001856:	2210      	movs	r2, #16
 8001858:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800185c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001860:	d004      	beq.n	800186c <HAL_PCD_IRQHandler+0x2b8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001862:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800186c:	f019 0f02 	tst.w	r9, #2
 8001870:	d004      	beq.n	800187c <HAL_PCD_IRQHandler+0x2c8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001872:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8001876:	2202      	movs	r2, #2
 8001878:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800187c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001880:	d13a      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x344>
        epnum++;
 8001882:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8001884:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while ( ep_intr )
 8001888:	f1b8 0f00 	cmp.w	r8, #0
 800188c:	f43f aeba 	beq.w	8001604 <HAL_PCD_IRQHandler+0x50>
        if (ep_intr & 0x1) /* In ITR */
 8001890:	f018 0f01 	tst.w	r8, #1
 8001894:	d0f5      	beq.n	8001882 <HAL_PCD_IRQHandler+0x2ce>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001896:	fa5f fa85 	uxtb.w	sl, r5
 800189a:	4651      	mov	r1, sl
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	f002 fc6f 	bl	8004180 <USB_ReadDevInEPInterrupt>
 80018a2:	4681      	mov	r9, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018a4:	f010 0f01 	tst.w	r0, #1
 80018a8:	d0c8      	beq.n	800183c <HAL_PCD_IRQHandler+0x288>
            fifoemptymsk = 0x1 << epnum;
 80018aa:	2201      	movs	r2, #1
 80018ac:	fa02 f005 	lsl.w	r0, r2, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018b0:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 80018b4:	ea23 0300 	bic.w	r3, r3, r0
 80018b8:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018bc:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80018c0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1)
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d0af      	beq.n	800182a <HAL_PCD_IRQHandler+0x276>
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80018ca:	4651      	mov	r1, sl
 80018cc:	4620      	mov	r0, r4
 80018ce:	f007 f9e5 	bl	8008c9c <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 80018d2:	6923      	ldr	r3, [r4, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d1b1      	bne.n	800183c <HAL_PCD_IRQHandler+0x288>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80018d8:	2d00      	cmp	r5, #0
 80018da:	d1af      	bne.n	800183c <HAL_PCD_IRQHandler+0x288>
 80018dc:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80018e0:	0093      	lsls	r3, r2, #2
 80018e2:	4423      	add	r3, r4
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1a8      	bne.n	800183c <HAL_PCD_IRQHandler+0x288>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80018ea:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80018ee:	2101      	movs	r1, #1
 80018f0:	6820      	ldr	r0, [r4, #0]
 80018f2:	f002 fc73 	bl	80041dc <USB_EP0_OutStart>
 80018f6:	e7a1      	b.n	800183c <HAL_PCD_IRQHandler+0x288>
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80018f8:	4629      	mov	r1, r5
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff fd6e 	bl	80013dc <PCD_WriteEmptyTxFifo>
 8001900:	e7bf      	b.n	8001882 <HAL_PCD_IRQHandler+0x2ce>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001902:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if(hpcd->LPM_State == LPM_L1)
 800190e:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8001912:	2b01      	cmp	r3, #1
 8001914:	d007      	beq.n	8001926 <HAL_PCD_IRQHandler+0x372>
        HAL_PCD_ResumeCallback(hpcd);
 8001916:	4620      	mov	r0, r4
 8001918:	f007 f9fa 	bl	8008d10 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	e674      	b.n	8001610 <HAL_PCD_IRQHandler+0x5c>
        hpcd->LPM_State = LPM_L0;
 8001926:	2100      	movs	r1, #0
 8001928:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800192c:	4620      	mov	r0, r4
 800192e:	f007 fae5 	bl	8008efc <HAL_PCDEx_LPM_Callback>
 8001932:	e7f3      	b.n	800191c <HAL_PCD_IRQHandler+0x368>
        HAL_PCD_SuspendCallback(hpcd);
 8001934:	4620      	mov	r0, r4
 8001936:	f007 f9d3 	bl	8008ce0 <HAL_PCD_SuspendCallback>
 800193a:	e675      	b.n	8001628 <HAL_PCD_IRQHandler+0x74>
        HAL_PCD_SuspendCallback(hpcd);
 800193c:	4620      	mov	r0, r4
 800193e:	f007 f9cf 	bl	8008ce0 <HAL_PCD_SuspendCallback>
 8001942:	e690      	b.n	8001666 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001944:	46b0      	mov	r8, r6
 8001946:	f506 6900 	add.w	r9, r6, #2048	; 0x800
 800194a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c9 3004 	str.w	r3, [r9, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8001956:	2110      	movs	r1, #16
 8001958:	6820      	ldr	r0, [r4, #0]
 800195a:	f001 ffcd 	bl	80038f8 <USB_FlushTxFifo>
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800195e:	e013      	b.n	8001988 <HAL_PCD_IRQHandler+0x3d4>
        USBx_INEP(i)->DIEPINT = 0xFF;
 8001960:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8001964:	21ff      	movs	r1, #255	; 0xff
 8001966:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800196a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800196e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001972:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8001976:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800197a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800197e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001982:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001986:	3701      	adds	r7, #1
 8001988:	6863      	ldr	r3, [r4, #4]
 800198a:	429f      	cmp	r7, r3
 800198c:	d3e8      	bcc.n	8001960 <HAL_PCD_IRQHandler+0x3ac>
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	f8c9 3018 	str.w	r3, [r9, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8001996:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800199a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800199e:	f8c9 301c 	str.w	r3, [r9, #28]
      if(hpcd->Init.use_dedicated_ep1)
 80019a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019a4:	b1e3      	cbz	r3, 80019e0 <HAL_PCD_IRQHandler+0x42c>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80019a6:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
 80019aa:	f043 030b 	orr.w	r3, r3, #11
 80019ae:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80019b2:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80019b6:	f043 030b 	orr.w	r3, r3, #11
 80019ba:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019be:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 80019c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019c6:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019ca:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80019ce:	7c21      	ldrb	r1, [r4, #16]
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	f002 fc03 	bl	80041dc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	e649      	b.n	8001674 <HAL_PCD_IRQHandler+0xc0>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80019e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80019e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e8:	f8c9 3014 	str.w	r3, [r9, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80019ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80019f0:	f043 030b 	orr.w	r3, r3, #11
 80019f4:	f8c9 3010 	str.w	r3, [r9, #16]
 80019f8:	e7e1      	b.n	80019be <HAL_PCD_IRQHandler+0x40a>
      USB_ActivateSetup(hpcd->Instance);
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	f002 fbd2 	bl	80041a4 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	68d3      	ldr	r3, [r2, #12]
 8001a04:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001a08:	60d3      	str	r3, [r2, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001a0a:	6820      	ldr	r0, [r4, #0]
 8001a0c:	f002 f85e 	bl	8003acc <USB_GetDevSpeed>
 8001a10:	b988      	cbnz	r0, 8001a36 <HAL_PCD_IRQHandler+0x482>
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8001a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1a:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	68d3      	ldr	r3, [r2, #12]
 8001a20:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001a24:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 8001a26:	4620      	mov	r0, r4
 8001a28:	f007 f949 	bl	8008cbe <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	e625      	b.n	8001682 <HAL_PCD_IRQHandler+0xce>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001a36:	2303      	movs	r3, #3
 8001a38:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8001a3a:	2340      	movs	r3, #64	; 0x40
 8001a3c:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001a3e:	f000 fda7 	bl	8002590 <HAL_RCC_GetHCLKFreq>
		if((hclk >= 14200000)&&(hclk < 15000000))
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_PCD_IRQHandler+0x614>)
 8001a44:	4403      	add	r3, r0
 8001a46:	4a61      	ldr	r2, [pc, #388]	; (8001bcc <HAL_PCD_IRQHandler+0x618>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d805      	bhi.n	8001a58 <HAL_PCD_IRQHandler+0x4a4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a4c:	6822      	ldr	r2, [r4, #0]
 8001a4e:	68d3      	ldr	r3, [r2, #12]
 8001a50:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001a54:	60d3      	str	r3, [r2, #12]
 8001a56:	e7e6      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 15000000)&&(hclk < 16000000))
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_PCD_IRQHandler+0x61c>)
 8001a5a:	4403      	add	r3, r0
 8001a5c:	4a5d      	ldr	r2, [pc, #372]	; (8001bd4 <HAL_PCD_IRQHandler+0x620>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d805      	bhi.n	8001a6e <HAL_PCD_IRQHandler+0x4ba>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a62:	6822      	ldr	r2, [r4, #0]
 8001a64:	68d3      	ldr	r3, [r2, #12]
 8001a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a6a:	60d3      	str	r3, [r2, #12]
 8001a6c:	e7db      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 16000000)&&(hclk < 17200000))
 8001a6e:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_PCD_IRQHandler+0x624>)
 8001a70:	4403      	add	r3, r0
 8001a72:	4a5a      	ldr	r2, [pc, #360]	; (8001bdc <HAL_PCD_IRQHandler+0x628>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d805      	bhi.n	8001a84 <HAL_PCD_IRQHandler+0x4d0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	68d3      	ldr	r3, [r2, #12]
 8001a7c:	f443 5350 	orr.w	r3, r3, #13312	; 0x3400
 8001a80:	60d3      	str	r3, [r2, #12]
 8001a82:	e7d0      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 17200000)&&(hclk < 18500000))
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_PCD_IRQHandler+0x62c>)
 8001a86:	4403      	add	r3, r0
 8001a88:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_PCD_IRQHandler+0x630>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d805      	bhi.n	8001a9a <HAL_PCD_IRQHandler+0x4e6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	68d3      	ldr	r3, [r2, #12]
 8001a92:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001a96:	60d3      	str	r3, [r2, #12]
 8001a98:	e7c5      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 18500000)&&(hclk < 20000000))
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_PCD_IRQHandler+0x634>)
 8001a9c:	4403      	add	r3, r0
 8001a9e:	4a53      	ldr	r2, [pc, #332]	; (8001bec <HAL_PCD_IRQHandler+0x638>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d805      	bhi.n	8001ab0 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	68d3      	ldr	r3, [r2, #12]
 8001aa8:	f443 5330 	orr.w	r3, r3, #11264	; 0x2c00
 8001aac:	60d3      	str	r3, [r2, #12]
 8001aae:	e7ba      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 20000000)&&(hclk < 21800000))
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_PCD_IRQHandler+0x63c>)
 8001ab2:	4403      	add	r3, r0
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_PCD_IRQHandler+0x640>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d805      	bhi.n	8001ac6 <HAL_PCD_IRQHandler+0x512>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	68d3      	ldr	r3, [r2, #12]
 8001abe:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001ac2:	60d3      	str	r3, [r2, #12]
 8001ac4:	e7af      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_PCD_IRQHandler+0x644>)
 8001ac8:	4403      	add	r3, r0
 8001aca:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_PCD_IRQHandler+0x648>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d805      	bhi.n	8001adc <HAL_PCD_IRQHandler+0x528>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	68d3      	ldr	r3, [r2, #12]
 8001ad4:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001ad8:	60d3      	str	r3, [r2, #12]
 8001ada:	e7a4      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 24000000)&&(hclk < 27700000))
 8001adc:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <HAL_PCD_IRQHandler+0x64c>)
 8001ade:	4403      	add	r3, r0
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_PCD_IRQHandler+0x650>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d805      	bhi.n	8001af2 <HAL_PCD_IRQHandler+0x53e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	68d3      	ldr	r3, [r2, #12]
 8001aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aee:	60d3      	str	r3, [r2, #12]
 8001af0:	e799      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <HAL_PCD_IRQHandler+0x654>)
 8001af4:	4403      	add	r3, r0
 8001af6:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_PCD_IRQHandler+0x658>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d805      	bhi.n	8001b08 <HAL_PCD_IRQHandler+0x554>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	68d3      	ldr	r3, [r2, #12]
 8001b00:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b04:	60d3      	str	r3, [r2, #12]
 8001b06:	e78e      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001b08:	6822      	ldr	r2, [r4, #0]
 8001b0a:	68d3      	ldr	r3, [r2, #12]
 8001b0c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001b10:	60d3      	str	r3, [r2, #12]
 8001b12:	e788      	b.n	8001a26 <HAL_PCD_IRQHandler+0x472>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8001b14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b18:	421f      	tst	r7, r3
 8001b1a:	f43f adc8 	beq.w	80016ae <HAL_PCD_IRQHandler+0xfa>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8001b1e:	093f      	lsrs	r7, r7, #4
 8001b20:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8001b24:	ebaa 0308 	sub.w	r3, sl, r8
 8001b28:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001b2c:	44a1      	add	r9, r4
 8001b2e:	f3c7 020a 	ubfx	r2, r7, #0, #11
 8001b32:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 8001b36:	4630      	mov	r0, r6
 8001b38:	f002 fa62 	bl	8004000 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b3c:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001b40:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
 8001b44:	443b      	add	r3, r7
 8001b46:	f8c9 3204 	str.w	r3, [r9, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b4a:	f8d9 3210 	ldr.w	r3, [r9, #528]	; 0x210
 8001b4e:	441f      	add	r7, r3
 8001b50:	f8c9 7210 	str.w	r7, [r9, #528]	; 0x210
 8001b54:	e5ab      	b.n	80016ae <HAL_PCD_IRQHandler+0xfa>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8001b56:	2208      	movs	r2, #8
 8001b58:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f002 fa4f 	bl	8004000 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b62:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8001b66:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001b6a:	eba3 0108 	sub.w	r1, r3, r8
 8001b6e:	008a      	lsls	r2, r1, #2
 8001b70:	4422      	add	r2, r4
 8001b72:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8001b76:	441f      	add	r7, r3
 8001b78:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8001b7c:	e597      	b.n	80016ae <HAL_PCD_IRQHandler+0xfa>
      HAL_PCD_SOFCallback(hpcd);
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f007 f897 	bl	8008cb2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	2208      	movs	r2, #8
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	e59c      	b.n	80016c6 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001b8c:	b2e9      	uxtb	r1, r5
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f007 f8ca 	bl	8008d28 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	e59a      	b.n	80016d4 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001b9e:	b2e9      	uxtb	r1, r5
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f007 f8bb 	bl	8008d1c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	e598      	b.n	80016e2 <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ConnectCallback(hpcd);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f007 f8bf 	bl	8008d34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	e597      	b.n	80016f0 <HAL_PCD_IRQHandler+0x13c>
        HAL_PCD_DisconnectCallback(hpcd);
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f007 f8bd 	bl	8008d40 <HAL_PCD_DisconnectCallback>
 8001bc6:	e5a0      	b.n	800170a <HAL_PCD_IRQHandler+0x156>
 8001bc8:	ff275340 	.word	0xff275340
 8001bcc:	000c34ff 	.word	0x000c34ff
 8001bd0:	ff1b1e40 	.word	0xff1b1e40
 8001bd4:	000f423f 	.word	0x000f423f
 8001bd8:	ff0bdc00 	.word	0xff0bdc00
 8001bdc:	00124f7f 	.word	0x00124f7f
 8001be0:	fef98c80 	.word	0xfef98c80
 8001be4:	0013d61f 	.word	0x0013d61f
 8001be8:	fee5b660 	.word	0xfee5b660
 8001bec:	0016e35f 	.word	0x0016e35f
 8001bf0:	feced300 	.word	0xfeced300
 8001bf4:	001b773f 	.word	0x001b773f
 8001bf8:	feb35bc0 	.word	0xfeb35bc0
 8001bfc:	002191bf 	.word	0x002191bf
 8001c00:	fe91ca00 	.word	0xfe91ca00
 8001c04:	0038751f 	.word	0x0038751f
 8001c08:	fe5954e0 	.word	0xfe5954e0
 8001c0c:	00419cdf 	.word	0x00419cdf

08001c10 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001c10:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_SetAddress+0xc>
 8001c18:	2002      	movs	r0, #2
 8001c1a:	4770      	bx	lr
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c20:	2301      	movs	r3, #1
 8001c22:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001c26:	6800      	ldr	r0, [r0, #0]
 8001c28:	f002 fa65 	bl	80040f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <HAL_PCD_EP_Open>:
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8001c36:	b24d      	sxtb	r5, r1
 8001c38:	2d00      	cmp	r5, #0
 8001c3a:	db18      	blt.n	8001c6e <HAL_PCD_EP_Open+0x3a>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001c3c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8001c40:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001c44:	00b4      	lsls	r4, r6, #2
 8001c46:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001c4a:	4404      	add	r4, r0
  ep->num   = ep_addr & 0x7F;
 8001c4c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001c50:	7021      	strb	r1, [r4, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001c52:	0fed      	lsrs	r5, r5, #31
 8001c54:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8001c56:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8001c58:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8001c5a:	b105      	cbz	r5, 8001c5e <HAL_PCD_EP_Open+0x2a>
    ep->tx_fifo_num = ep->num;
 8001c5c:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK )
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d00d      	beq.n	8001c7e <HAL_PCD_EP_Open+0x4a>
  __HAL_LOCK(hpcd);
 8001c62:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10c      	bne.n	8001c84 <HAL_PCD_EP_Open+0x50>
 8001c6a:	2002      	movs	r0, #2
}
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001c6e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8001c72:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001c76:	00b4      	lsls	r4, r6, #2
 8001c78:	3438      	adds	r4, #56	; 0x38
 8001c7a:	4404      	add	r4, r0
 8001c7c:	e7e6      	b.n	8001c4c <HAL_PCD_EP_Open+0x18>
    ep->data_pid_start = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	7123      	strb	r3, [r4, #4]
 8001c82:	e7ee      	b.n	8001c62 <HAL_PCD_EP_Open+0x2e>
 8001c84:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8001c86:	2301      	movs	r3, #1
 8001c88:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	6800      	ldr	r0, [r0, #0]
 8001c90:	f001 ff3c 	bl	8003b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return ret;
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}

08001c9c <HAL_PCD_EP_Close>:
{
 8001c9c:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80) == 0x80)
 8001c9e:	b24a      	sxtb	r2, r1
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	db12      	blt.n	8001cca <HAL_PCD_EP_Close+0x2e>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001ca4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001ca8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001cac:	00a3      	lsls	r3, r4, #2
 8001cae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb2:	4403      	add	r3, r0
  ep->num   = ep_addr & 0x7F;
 8001cb4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001cb8:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001cba:	0fd2      	lsrs	r2, r2, #31
 8001cbc:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8001cbe:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8001cc2:	2a01      	cmp	r2, #1
 8001cc4:	d109      	bne.n	8001cda <HAL_PCD_EP_Close+0x3e>
 8001cc6:	2002      	movs	r0, #2
}
 8001cc8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001cca:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001cce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001cd2:	00a3      	lsls	r3, r4, #2
 8001cd4:	3338      	adds	r3, #56	; 0x38
 8001cd6:	4403      	add	r3, r0
 8001cd8:	e7ec      	b.n	8001cb4 <HAL_PCD_EP_Close+0x18>
 8001cda:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6800      	ldr	r0, [r0, #0]
 8001ce6:	f001 ff59 	bl	8003b9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001cf0:	bd10      	pop	{r4, pc}

08001cf2 <HAL_PCD_EP_Receive>:
{
 8001cf2:	b570      	push	{r4, r5, r6, lr}
 8001cf4:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001cf8:	00f5      	lsls	r5, r6, #3
 8001cfa:	1ba9      	subs	r1, r5, r6
 8001cfc:	008c      	lsls	r4, r1, #2
 8001cfe:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001d02:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 8001d04:	1bad      	subs	r5, r5, r6
 8001d06:	00ac      	lsls	r4, r5, #2
 8001d08:	4404      	add	r4, r0
 8001d0a:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
 8001d0e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0;
 8001d18:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001d1c:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1)
 8001d20:	6903      	ldr	r3, [r0, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d006      	beq.n	8001d34 <HAL_PCD_EP_Receive+0x42>
  if ((ep_addr & 0x7F) == 0)
 8001d26:	b166      	cbz	r6, 8001d42 <HAL_PCD_EP_Receive+0x50>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	6800      	ldr	r0, [r0, #0]
 8001d2c:	f002 f838 	bl	8003da0 <USB_EPStartXfer>
}
 8001d30:	2000      	movs	r0, #0
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001d34:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 8001d38:	00ac      	lsls	r4, r5, #2
 8001d3a:	4404      	add	r4, r0
 8001d3c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
 8001d40:	e7f1      	b.n	8001d26 <HAL_PCD_EP_Receive+0x34>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	6800      	ldr	r0, [r0, #0]
 8001d46:	f001 ff69 	bl	8003c1c <USB_EP0StartXfer>
 8001d4a:	e7f1      	b.n	8001d30 <HAL_PCD_EP_Receive+0x3e>

08001d4c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001d4c:	f001 010f 	and.w	r1, r1, #15
 8001d50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001d54:	008b      	lsls	r3, r1, #2
 8001d56:	4418      	add	r0, r3
}
 8001d58:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 8001d5c:	4770      	bx	lr

08001d5e <HAL_PCD_EP_Transmit>:
{
 8001d5e:	b570      	push	{r4, r5, r6, lr}
 8001d60:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001d64:	00f5      	lsls	r5, r6, #3
 8001d66:	1ba9      	subs	r1, r5, r6
 8001d68:	008c      	lsls	r4, r1, #2
 8001d6a:	3438      	adds	r4, #56	; 0x38
 8001d6c:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 8001d6e:	1bad      	subs	r5, r5, r6
 8001d70:	00ac      	lsls	r4, r5, #2
 8001d72:	4404      	add	r4, r0
 8001d74:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
 8001d76:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001d82:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1)
 8001d86:	6903      	ldr	r3, [r0, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d006      	beq.n	8001d9a <HAL_PCD_EP_Transmit+0x3c>
  if ((ep_addr & 0x7F) == 0)
 8001d8c:	b15e      	cbz	r6, 8001da6 <HAL_PCD_EP_Transmit+0x48>
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	6800      	ldr	r0, [r0, #0]
 8001d92:	f002 f805 	bl	8003da0 <USB_EPStartXfer>
}
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001d9a:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 8001d9e:	00ac      	lsls	r4, r5, #2
 8001da0:	4404      	add	r4, r0
 8001da2:	64a2      	str	r2, [r4, #72]	; 0x48
 8001da4:	e7f2      	b.n	8001d8c <HAL_PCD_EP_Transmit+0x2e>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	6800      	ldr	r0, [r0, #0]
 8001daa:	f001 ff37 	bl	8003c1c <USB_EP0StartXfer>
 8001dae:	e7f2      	b.n	8001d96 <HAL_PCD_EP_Transmit+0x38>

08001db0 <HAL_PCD_EP_SetStall>:
{
 8001db0:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001db2:	f001 020f 	and.w	r2, r1, #15
 8001db6:	6843      	ldr	r3, [r0, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d831      	bhi.n	8001e20 <HAL_PCD_EP_SetStall+0x70>
  if ((0x80 & ep_addr) == 0x80)
 8001dbc:	b24a      	sxtb	r2, r1
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	db12      	blt.n	8001de8 <HAL_PCD_EP_SetStall+0x38>
    ep = &hpcd->OUT_ep[ep_addr];
 8001dc2:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001dc6:	00a3      	lsls	r3, r4, #2
 8001dc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dcc:	4403      	add	r3, r0
  ep->is_stall = 1;
 8001dce:	2401      	movs	r4, #1
 8001dd0:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001dd2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001dd6:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001dd8:	0fd2      	lsrs	r2, r2, #31
 8001dda:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8001ddc:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8001de0:	2a01      	cmp	r2, #1
 8001de2:	d109      	bne.n	8001df8 <HAL_PCD_EP_SetStall+0x48>
 8001de4:	2002      	movs	r0, #2
}
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001de8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001dec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001df0:	00a3      	lsls	r3, r4, #2
 8001df2:	3338      	adds	r3, #56	; 0x38
 8001df4:	4403      	add	r3, r0
 8001df6:	e7ea      	b.n	8001dce <HAL_PCD_EP_SetStall+0x1e>
 8001df8:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001e00:	4619      	mov	r1, r3
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	f002 f910 	bl	8004028 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001e08:	b11c      	cbz	r4, 8001e12 <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001e10:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e12:	f505 726f 	add.w	r2, r5, #956	; 0x3bc
 8001e16:	7c29      	ldrb	r1, [r5, #16]
 8001e18:	6828      	ldr	r0, [r5, #0]
 8001e1a:	f002 f9df 	bl	80041dc <USB_EP0_OutStart>
 8001e1e:	e7f4      	b.n	8001e0a <HAL_PCD_EP_SetStall+0x5a>
    return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	bd38      	pop	{r3, r4, r5, pc}

08001e24 <HAL_PCD_EP_ClrStall>:
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001e24:	f001 020f 	and.w	r2, r1, #15
 8001e28:	6843      	ldr	r3, [r0, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d82a      	bhi.n	8001e84 <HAL_PCD_EP_ClrStall+0x60>
{
 8001e2e:	b510      	push	{r4, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001e30:	b24a      	sxtb	r2, r1
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	db12      	blt.n	8001e5c <HAL_PCD_EP_ClrStall+0x38>
    ep = &hpcd->OUT_ep[ep_addr];
 8001e36:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001e3a:	00a3      	lsls	r3, r4, #2
 8001e3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e40:	4403      	add	r3, r0
  ep->is_stall = 0;
 8001e42:	2400      	movs	r4, #0
 8001e44:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001e46:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001e4a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001e4c:	0fd2      	lsrs	r2, r2, #31
 8001e4e:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8001e50:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d109      	bne.n	8001e6c <HAL_PCD_EP_ClrStall+0x48>
 8001e58:	2002      	movs	r0, #2
}
 8001e5a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e5c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001e60:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001e64:	00a3      	lsls	r3, r4, #2
 8001e66:	3338      	adds	r3, #56	; 0x38
 8001e68:	4403      	add	r3, r0
 8001e6a:	e7ea      	b.n	8001e42 <HAL_PCD_EP_ClrStall+0x1e>
 8001e6c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001e74:	4619      	mov	r1, r3
 8001e76:	6800      	ldr	r0, [r0, #0]
 8001e78:	f002 f908 	bl	800408c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001e82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
 8001e86:	4770      	bx	lr

08001e88 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8001e88:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d014      	beq.n	8001eba <HAL_PCD_EP_Flush+0x32>
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001e94:	2301      	movs	r3, #1
 8001e96:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  if ((ep_addr & 0x80) == 0x80)
 8001e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e9e:	d106      	bne.n	8001eae <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 8001ea0:	6800      	ldr	r0, [r0, #0]
 8001ea2:	f001 fd3d 	bl	8003920 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001eac:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8001eae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001eb2:	6800      	ldr	r0, [r0, #0]
 8001eb4:	f001 fd20 	bl	80038f8 <USB_FlushTxFifo>
 8001eb8:	e7f5      	b.n	8001ea6 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8001eba:	2002      	movs	r0, #2
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ebe:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ec0:	6804      	ldr	r4, [r0, #0]
 8001ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0)
 8001ec4:	b129      	cbz	r1, 8001ed2 <HAL_PCDEx_SetTxFiFo+0x14>
 8001ec6:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eca:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e00c      	b.n	8001eec <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8001ed2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001ed6:	62a0      	str	r0, [r4, #40]	; 0x28
 8001ed8:	e012      	b.n	8001f00 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eda:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001ede:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001ee2:	6849      	ldr	r1, [r1, #4]
 8001ee4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	1e69      	subs	r1, r5, #1
 8001eee:	428b      	cmp	r3, r1
 8001ef0:	dbf3      	blt.n	8001eda <HAL_PCDEx_SetTxFiFo+0x1c>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8001ef2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001ef6:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001efa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001efe:	6048      	str	r0, [r1, #4]
  }
  
  return HAL_OK;
}
 8001f00:	2000      	movs	r0, #0
 8001f02:	bc30      	pop	{r4, r5}
 8001f04:	4770      	bx	lr

08001f06 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f10:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001f12:	6803      	ldr	r3, [r0, #0]
  
  hpcd->lpm_active = ENABLE;
 8001f14:	2101      	movs	r1, #1
 8001f16:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f882 03ec 	strb.w	r0, [r2, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001f26:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f2a:	4a02      	ldr	r2, [pc, #8]	; (8001f34 <HAL_PCDEx_ActivateLPM+0x24>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
  
  return HAL_OK;  
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	10000003 	.word	0x10000003

08001f38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_PWREx_EnableOverDrive+0x74>)
 8001f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f52:	6813      	ldr	r3, [r2, #0]
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5a:	f7fe fb01 	bl	8000560 <HAL_GetTick>
 8001f5e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f6a:	f7fe faf9 	bl	8000560 <HAL_GetTick>
 8001f6e:	1b00      	subs	r0, r0, r4
 8001f70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f74:	d9f4      	bls.n	8001f60 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001f86:	f7fe faeb 	bl	8000560 <HAL_GetTick>
 8001f8a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f94:	d107      	bne.n	8001fa6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f96:	f7fe fae3 	bl	8000560 <HAL_GetTick>
 8001f9a:	1b00      	subs	r0, r0, r4
 8001f9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fa0:	d9f4      	bls.n	8001f8c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e7e8      	b.n	8001f78 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	e7e6      	b.n	8001f78 <HAL_PWREx_EnableOverDrive+0x40>
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	f000 81db 	beq.w	8002370 <HAL_RCC_OscConfig+0x3bc>
{
 8001fba:	b570      	push	{r4, r5, r6, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	f013 0f01 	tst.w	r3, #1
 8001fc6:	d03a      	beq.n	800203e <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4ba2      	ldr	r3, [pc, #648]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d02b      	beq.n	800202c <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd4:	4b9f      	ldr	r3, [pc, #636]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe6:	d050      	beq.n	800208a <HAL_RCC_OscConfig+0xd6>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d154      	bne.n	8002096 <HAL_RCC_OscConfig+0xe2>
 8001fec:	4b99      	ldr	r3, [pc, #612]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffe:	6863      	ldr	r3, [r4, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05f      	beq.n	80020c4 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe faac 	bl	8000560 <HAL_GetTick>
 8002008:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002012:	d114      	bne.n	800203e <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe faa4 	bl	8000560 <HAL_GetTick>
 8002018:	1b40      	subs	r0, r0, r5
 800201a:	2864      	cmp	r0, #100	; 0x64
 800201c:	d9f5      	bls.n	800200a <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 800201e:	2003      	movs	r0, #3
 8002020:	e1ab      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800202a:	d0d9      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002034:	d003      	beq.n	800203e <HAL_RCC_OscConfig+0x8a>
 8002036:	6863      	ldr	r3, [r4, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 819b 	beq.w	8002374 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f013 0f02 	tst.w	r3, #2
 8002044:	d064      	beq.n	8002110 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b83      	ldr	r3, [pc, #524]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f013 0f0c 	tst.w	r3, #12
 800204e:	d04d      	beq.n	80020ec <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002050:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d042      	beq.n	80020e2 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205c:	68e3      	ldr	r3, [r4, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d079      	beq.n	8002156 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002062:	4a7c      	ldr	r2, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002064:	6813      	ldr	r3, [r2, #0]
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fa78 	bl	8000560 <HAL_GetTick>
 8002070:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b78      	ldr	r3, [pc, #480]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f013 0f02 	tst.w	r3, #2
 800207a:	d163      	bne.n	8002144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fa70 	bl	8000560 <HAL_GetTick>
 8002080:	1b40      	subs	r0, r0, r5
 8002082:	2802      	cmp	r0, #2
 8002084:	d9f5      	bls.n	8002072 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8002086:	2003      	movs	r0, #3
 8002088:	e177      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	4a72      	ldr	r2, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e7b3      	b.n	8001ffe <HAL_RCC_OscConfig+0x4a>
 8002096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_OscConfig+0xfc>
 800209c:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e7a6      	b.n	8001ffe <HAL_RCC_OscConfig+0x4a>
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e79c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80020c4:	f7fe fa4c 	bl	8000560 <HAL_GetTick>
 80020c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020d2:	d0b4      	beq.n	800203e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe fa44 	bl	8000560 <HAL_GetTick>
 80020d8:	1b40      	subs	r0, r0, r5
 80020da:	2864      	cmp	r0, #100	; 0x64
 80020dc:	d9f5      	bls.n	80020ca <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e14b      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020ea:	d1b7      	bne.n	800205c <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f013 0f02 	tst.w	r3, #2
 80020f4:	d004      	beq.n	8002100 <HAL_RCC_OscConfig+0x14c>
 80020f6:	68e3      	ldr	r3, [r4, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
 80020fe:	e13c      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4a54      	ldr	r2, [pc, #336]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002108:	6921      	ldr	r1, [r4, #16]
 800210a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800210e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	f013 0f08 	tst.w	r3, #8
 8002116:	d046      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002118:	6963      	ldr	r3, [r4, #20]
 800211a:	b383      	cbz	r3, 800217e <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211c:	4a4d      	ldr	r2, [pc, #308]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800211e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fa1b 	bl	8000560 <HAL_GetTick>
 800212a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	f013 0f02 	tst.w	r3, #2
 8002134:	d137      	bne.n	80021a6 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fa13 	bl	8000560 <HAL_GetTick>
 800213a:	1b40      	subs	r0, r0, r5
 800213c:	2802      	cmp	r0, #2
 800213e:	d9f5      	bls.n	800212c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002140:	2003      	movs	r0, #3
 8002142:	e11a      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800214c:	6921      	ldr	r1, [r4, #16]
 800214e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e7dc      	b.n	8002110 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002156:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002160:	f7fe f9fe 	bl	8000560 <HAL_GetTick>
 8002164:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f013 0f02 	tst.w	r3, #2
 800216e:	d0cf      	beq.n	8002110 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe f9f6 	bl	8000560 <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2802      	cmp	r0, #2
 8002178:	d9f5      	bls.n	8002166 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800217a:	2003      	movs	r0, #3
 800217c:	e0fd      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4a35      	ldr	r2, [pc, #212]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002180:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe f9ea 	bl	8000560 <HAL_GetTick>
 800218c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f013 0f02 	tst.w	r3, #2
 8002196:	d006      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe f9e2 	bl	8000560 <HAL_GetTick>
 800219c:	1b40      	subs	r0, r0, r5
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f5      	bls.n	800218e <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80021a2:	2003      	movs	r0, #3
 80021a4:	e0e9      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f013 0f04 	tst.w	r3, #4
 80021ac:	d07e      	beq.n	80022ac <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021b6:	d131      	bne.n	800221c <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80021ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021cc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_OscConfig+0x2a4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021d6:	d023      	beq.n	8002220 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	68a3      	ldr	r3, [r4, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d034      	beq.n	8002248 <HAL_RCC_OscConfig+0x294>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13c      	bne.n	800225c <HAL_RCC_OscConfig+0x2a8>
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80021e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	671a      	str	r2, [r3, #112]	; 0x70
 80021ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f4:	68a3      	ldr	r3, [r4, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d046      	beq.n	8002288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe f9b1 	bl	8000560 <HAL_GetTick>
 80021fe:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f013 0f02 	tst.w	r3, #2
 8002208:	d14f      	bne.n	80022aa <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe f9a9 	bl	8000560 <HAL_GetTick>
 800220e:	1b80      	subs	r0, r0, r6
 8002210:	f241 3388 	movw	r3, #5000	; 0x1388
 8002214:	4298      	cmp	r0, r3
 8002216:	d9f3      	bls.n	8002200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002218:	2003      	movs	r0, #3
 800221a:	e0ae      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
  FlagStatus pwrclkchanged = RESET;
 800221c:	2500      	movs	r5, #0
 800221e:	e7d6      	b.n	80021ce <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_RCC_OscConfig+0x2a4>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800222a:	f7fe f999 	bl	8000560 <HAL_GetTick>
 800222e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_OscConfig+0x2a4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002238:	d1ce      	bne.n	80021d8 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe f991 	bl	8000560 <HAL_GetTick>
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	2864      	cmp	r0, #100	; 0x64
 8002242:	d9f5      	bls.n	8002230 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
 8002246:	e098      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	4a02      	ldr	r2, [pc, #8]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 800224a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	e7cf      	b.n	80021f4 <HAL_RCC_OscConfig+0x240>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	2b05      	cmp	r3, #5
 800225e:	d009      	beq.n	8002274 <HAL_RCC_OscConfig+0x2c0>
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	671a      	str	r2, [r3, #112]	; 0x70
 800226a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800226c:	f022 0204 	bic.w	r2, r2, #4
 8002270:	671a      	str	r2, [r3, #112]	; 0x70
 8002272:	e7bf      	b.n	80021f4 <HAL_RCC_OscConfig+0x240>
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002278:	f042 0204 	orr.w	r2, r2, #4
 800227c:	671a      	str	r2, [r3, #112]	; 0x70
 800227e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	671a      	str	r2, [r3, #112]	; 0x70
 8002286:	e7b5      	b.n	80021f4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe f96a 	bl	8000560 <HAL_GetTick>
 800228c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f013 0f02 	tst.w	r3, #2
 8002296:	d008      	beq.n	80022aa <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe f962 	bl	8000560 <HAL_GetTick>
 800229c:	1b80      	subs	r0, r0, r6
 800229e:	f241 3388 	movw	r3, #5000	; 0x1388
 80022a2:	4298      	cmp	r0, r3
 80022a4:	d9f3      	bls.n	800228e <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
 80022a8:	e067      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022aa:	b9f5      	cbnz	r5, 80022ea <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ac:	69a3      	ldr	r3, [r4, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d062      	beq.n	8002378 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b2:	4a34      	ldr	r2, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	f002 020c 	and.w	r2, r2, #12
 80022ba:	2a08      	cmp	r2, #8
 80022bc:	d05f      	beq.n	800237e <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe f948 	bl	8000560 <HAL_GetTick>
 80022d0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022da:	d047      	beq.n	800236c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe f940 	bl	8000560 <HAL_GetTick>
 80022e0:	1b00      	subs	r0, r0, r4
 80022e2:	2802      	cmp	r0, #2
 80022e4:	d9f5      	bls.n	80022d2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e047      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 80022ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6413      	str	r3, [r2, #64]	; 0x40
 80022f4:	e7da      	b.n	80022ac <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002300:	f7fe f92e 	bl	8000560 <HAL_GetTick>
 8002304:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800230e:	d006      	beq.n	800231e <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe f926 	bl	8000560 <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	2802      	cmp	r0, #2
 8002318:	d9f5      	bls.n	8002306 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
 800231c:	e02d      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231e:	69e3      	ldr	r3, [r4, #28]
 8002320:	6a22      	ldr	r2, [r4, #32]
 8002322:	4313      	orrs	r3, r2
 8002324:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002326:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800232a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800232c:	0852      	lsrs	r2, r2, #1
 800232e:	3a01      	subs	r2, #1
 8002330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002334:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002336:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800233a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002340:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002348:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800234a:	f7fe f909 	bl	8000560 <HAL_GetTick>
 800234e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x3d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe f901 	bl	8000560 <HAL_GetTick>
 800235e:	1b00      	subs	r0, r0, r4
 8002360:	2802      	cmp	r0, #2
 8002362:	d9f5      	bls.n	8002350 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002364:	2003      	movs	r0, #3
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002368:	2000      	movs	r0, #0
 800236a:	e006      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
 800236c:	2000      	movs	r0, #0
 800236e:	e004      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
 8002372:	4770      	bx	lr
        return HAL_ERROR;
 8002374:	2001      	movs	r0, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8002378:	2000      	movs	r0, #0
}
 800237a:	b002      	add	sp, #8
 800237c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
 8002380:	e7fb      	b.n	800237a <HAL_RCC_OscConfig+0x3c6>
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d041      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x92>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d001      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800239a:	4822      	ldr	r0, [pc, #136]	; (8002424 <HAL_RCC_GetSysClockFreq+0x9c>)
 800239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023ac:	d012      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023b6:	2300      	movs	r3, #0
 80023b8:	481b      	ldr	r0, [pc, #108]	; (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ba:	fba1 0100 	umull	r0, r1, r1, r0
 80023be:	f7fd ff2f 	bl	8000220 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80023ce:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80023dc:	461e      	mov	r6, r3
 80023de:	2700      	movs	r7, #0
 80023e0:	015c      	lsls	r4, r3, #5
 80023e2:	2500      	movs	r5, #0
 80023e4:	1ae4      	subs	r4, r4, r3
 80023e6:	eb65 0507 	sbc.w	r5, r5, r7
 80023ea:	01a9      	lsls	r1, r5, #6
 80023ec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80023f0:	01a0      	lsls	r0, r4, #6
 80023f2:	1b00      	subs	r0, r0, r4
 80023f4:	eb61 0105 	sbc.w	r1, r1, r5
 80023f8:	00cb      	lsls	r3, r1, #3
 80023fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023fe:	00c4      	lsls	r4, r0, #3
 8002400:	19a0      	adds	r0, r4, r6
 8002402:	eb43 0107 	adc.w	r1, r3, r7
 8002406:	028b      	lsls	r3, r1, #10
 8002408:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800240c:	0284      	lsls	r4, r0, #10
 800240e:	4620      	mov	r0, r4
 8002410:	4619      	mov	r1, r3
 8002412:	2300      	movs	r3, #0
 8002414:	f7fd ff04 	bl	8000220 <__aeabi_uldivmod>
 8002418:	e7d3      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800241c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400
 8002428:	017d7840 	.word	0x017d7840

0800242c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800242c:	2800      	cmp	r0, #0
 800242e:	f000 80a2 	beq.w	8002576 <HAL_RCC_ClockConfig+0x14a>
{
 8002432:	b570      	push	{r4, r5, r6, lr}
 8002434:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x154>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	428b      	cmp	r3, r1
 8002440:	d20c      	bcs.n	800245c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_RCC_ClockConfig+0x154>)
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	f023 030f 	bic.w	r3, r3, #15
 800244a:	430b      	orrs	r3, r1
 800244c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	4299      	cmp	r1, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	f013 0f02 	tst.w	r3, #2
 8002462:	d017      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	f013 0f04 	tst.w	r3, #4
 8002468:	d004      	beq.n	8002474 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246a:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 800246c:	6893      	ldr	r3, [r2, #8]
 800246e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002472:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	f013 0f08 	tst.w	r3, #8
 800247a:	d004      	beq.n	8002486 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4a41      	ldr	r2, [pc, #260]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 800247e:	6893      	ldr	r3, [r2, #8]
 8002480:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002484:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002486:	4a3f      	ldr	r2, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 8002488:	6893      	ldr	r3, [r2, #8]
 800248a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248e:	68a0      	ldr	r0, [r4, #8]
 8002490:	4303      	orrs	r3, r0
 8002492:	6093      	str	r3, [r2, #8]
 8002494:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	f013 0f01 	tst.w	r3, #1
 800249c:	d031      	beq.n	8002502 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d025      	beq.n	80024f4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4a36      	ldr	r2, [pc, #216]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f012 0f02 	tst.w	r2, #2
 80024b0:	d063      	beq.n	800257a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 80024b4:	688a      	ldr	r2, [r1, #8]
 80024b6:	f022 0203 	bic.w	r2, r2, #3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80024be:	f7fe f84f 	bl	8000560 <HAL_GetTick>
 80024c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c4:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	6862      	ldr	r2, [r4, #4]
 80024ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024d2:	d016      	beq.n	8002502 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe f844 	bl	8000560 <HAL_GetTick>
 80024d8:	1b80      	subs	r0, r0, r6
 80024da:	f241 3388 	movw	r3, #5000	; 0x1388
 80024de:	4298      	cmp	r0, r3
 80024e0:	d9f0      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80024e2:	2003      	movs	r0, #3
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80024ee:	d1e0      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4a23      	ldr	r2, [pc, #140]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80024fc:	d1d9      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80024fe:	2001      	movs	r0, #1
 8002500:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCC_ClockConfig+0x154>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	429d      	cmp	r5, r3
 800250c:	d20c      	bcs.n	8002528 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_RCC_ClockConfig+0x154>)
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f023 030f 	bic.w	r3, r3, #15
 8002516:	432b      	orrs	r3, r5
 8002518:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	429d      	cmp	r5, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
}
 8002526:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f013 0f04 	tst.w	r3, #4
 800252e:	d006      	beq.n	800253e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002538:	68e1      	ldr	r1, [r4, #12]
 800253a:	430b      	orrs	r3, r1
 800253c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f013 0f08 	tst.w	r3, #8
 8002544:	d007      	beq.n	8002556 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002546:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 8002548:	6893      	ldr	r3, [r2, #8]
 800254a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800254e:	6921      	ldr	r1, [r4, #16]
 8002550:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002554:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002556:	f7ff ff17 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x158>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x15c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	40d8      	lsrs	r0, r3
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_RCC_ClockConfig+0x160>)
 800256a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800256c:	2000      	movs	r0, #0
 800256e:	f006 fab5 	bl	8008adc <HAL_InitTick>
  return HAL_OK;
 8002572:	2000      	movs	r0, #0
 8002574:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002576:	2001      	movs	r0, #1
 8002578:	4770      	bx	lr
        return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	0801e60c 	.word	0x0801e60c
 800258c:	200000b0 	.word	0x200000b0

08002590 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002590:	4b01      	ldr	r3, [pc, #4]	; (8002598 <HAL_RCC_GetHCLKFreq+0x8>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	200000b0 	.word	0x200000b0

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800259e:	f7ff fff7 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025aa:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80025ae:	40d8      	lsrs	r0, r3
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	0801e61c 	.word	0x0801e61c

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025be:	f7ff ffe7 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80025ca:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80025ce:	40d8      	lsrs	r0, r3
 80025d0:	bd08      	pop	{r3, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	0801e61c 	.word	0x0801e61c

080025dc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025dc:	230f      	movs	r3, #15
 80025de:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_GetClockConfig+0x34>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80025f0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80025f8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002602:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetClockConfig+0x38>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	600b      	str	r3, [r1, #0]
 800260e:	4770      	bx	lr
 8002610:	40023800 	.word	0x40023800
 8002614:	40023c00 	.word	0x40023c00

08002618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800261e:	6803      	ldr	r3, [r0, #0]
 8002620:	f013 0f01 	tst.w	r3, #1
 8002624:	d00c      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002626:	4baf      	ldr	r3, [pc, #700]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002638:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800263a:	b1c3      	cbz	r3, 800266e <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 800263c:	2700      	movs	r7, #0
 800263e:	e000      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002640:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002648:	d015      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800264a:	4aa6      	ldr	r2, [pc, #664]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800264c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002650:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002656:	430b      	orrs	r3, r1
 8002658:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800265c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800265e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002662:	d006      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 811b 	beq.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  uint32_t pllsaiused = 0;
 800266a:	2500      	movs	r5, #0
 800266c:	e004      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 800266e:	2701      	movs	r7, #1
 8002670:	e7e7      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8002672:	2701      	movs	r7, #1
 8002674:	e7f6      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8002676:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800267e:	d00f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002680:	4a98      	ldr	r2, [pc, #608]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002682:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002686:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800268a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800268c:	430b      	orrs	r3, r1
 800268e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002698:	f000 8104 	beq.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800269c:	b903      	cbnz	r3, 80026a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 800269e:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80026a6:	d000      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x92>
  {    
      plli2sused = 1; 
 80026a8:	2701      	movs	r7, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026aa:	f013 0f20 	tst.w	r3, #32
 80026ae:	f040 80fb 	bne.w	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f013 0f10 	tst.w	r3, #16
 80026b8:	d00c      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ba:	4b8a      	ldr	r3, [pc, #552]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80026bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80026c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80026c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026ce:	430a      	orrs	r2, r1
 80026d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026dc:	4a81      	ldr	r2, [pc, #516]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80026de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80026e8:	430b      	orrs	r3, r1
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80026f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026fc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002700:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002702:	430b      	orrs	r3, r1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800270e:	d008      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002710:	4a74      	ldr	r2, [pc, #464]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002712:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002716:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800271a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800271c:	430b      	orrs	r3, r1
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800272a:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800272c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002730:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002734:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002736:	430b      	orrs	r3, r1
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002744:	4a67      	ldr	r2, [pc, #412]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002746:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002750:	430b      	orrs	r3, r1
 8002752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275e:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002760:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002764:	f023 030c 	bic.w	r3, r3, #12
 8002768:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800276a:	430b      	orrs	r3, r1
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002778:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800277a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800277e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002782:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002784:	430b      	orrs	r3, r1
 8002786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002792:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002794:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002798:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800279c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800279e:	430b      	orrs	r3, r1
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027aa:	d008      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ac:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80027ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027c6:	4a47      	ldr	r2, [pc, #284]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80027c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027d0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80027d2:	430b      	orrs	r3, r1
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80027e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80027ec:	430b      	orrs	r3, r1
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80027fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002804:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002806:	430b      	orrs	r3, r1
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002814:	4a33      	ldr	r2, [pc, #204]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002816:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800281a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800281e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002820:	430b      	orrs	r3, r1
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800282c:	d00d      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800282e:	4a2d      	ldr	r2, [pc, #180]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002830:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002834:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002838:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800283a:	430b      	orrs	r3, r1
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002840:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002846:	f000 8099 	beq.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	f013 0f08 	tst.w	r3, #8
 8002850:	d000      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1; 
 8002852:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002854:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800285c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002860:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002864:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002866:	430b      	orrs	r3, r1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002872:	d009      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002876:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002882:	430b      	orrs	r3, r1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002888:	2f00      	cmp	r7, #0
 800288a:	d179      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002892:	d075      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002894:	2d00      	cmp	r5, #0
 8002896:	f040 8107 	bne.w	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800289a:	2000      	movs	r0, #0
}
 800289c:	b003      	add	sp, #12
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 80028a0:	2501      	movs	r5, #1
 80028a2:	e6e9      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 80028a4:	2701      	movs	r7, #1
 80028a6:	e6f9      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80028aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028c6:	f7fd fe4b 	bl	8000560 <HAL_GetTick>
 80028ca:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028d4:	d10a      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7fd fe43 	bl	8000560 <HAL_GetTick>
 80028da:	1b80      	subs	r0, r0, r6
 80028dc:	2864      	cmp	r0, #100	; 0x64
 80028de:	d9f5      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        return HAL_TIMEOUT;
 80028e0:	2003      	movs	r0, #3
 80028e2:	e7db      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ec:	4bb3      	ldr	r3, [pc, #716]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028f4:	d015      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80028f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d010      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002900:	4bae      	ldr	r3, [pc, #696]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002904:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800290a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800290e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002910:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002912:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002916:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002918:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	f013 0f01 	tst.w	r3, #1
 8002920:	d112      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002924:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002928:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800292c:	d01d      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x352>
 800292e:	4aa3      	ldr	r2, [pc, #652]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002930:	6893      	ldr	r3, [r2, #8]
 8002932:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	49a0      	ldr	r1, [pc, #640]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800293a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800293c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800293e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002942:	4313      	orrs	r3, r2
 8002944:	670b      	str	r3, [r1, #112]	; 0x70
 8002946:	e6b4      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002948:	f7fd fe0a 	bl	8000560 <HAL_GetTick>
 800294c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	4b9b      	ldr	r3, [pc, #620]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	f013 0f02 	tst.w	r3, #2
 8002956:	d1e4      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fd fe02 	bl	8000560 <HAL_GetTick>
 800295c:	1b80      	subs	r0, r0, r6
 800295e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002962:	4298      	cmp	r0, r3
 8002964:	d9f3      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x336>
            return HAL_TIMEOUT;
 8002966:	2003      	movs	r0, #3
 8002968:	e798      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800296a:	4894      	ldr	r0, [pc, #592]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800296c:	6882      	ldr	r2, [r0, #8]
 800296e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002972:	4993      	ldr	r1, [pc, #588]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002974:	4019      	ands	r1, r3
 8002976:	430a      	orrs	r2, r1
 8002978:	6082      	str	r2, [r0, #8]
 800297a:	e7dd      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x320>
      pllsaiused = 1; 
 800297c:	2501      	movs	r5, #1
 800297e:	e764      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002980:	4a8e      	ldr	r2, [pc, #568]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002988:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800298a:	f7fd fde9 	bl	8000560 <HAL_GetTick>
 800298e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002990:	4b8a      	ldr	r3, [pc, #552]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002998:	d006      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800299a:	f7fd fde1 	bl	8000560 <HAL_GetTick>
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	2864      	cmp	r0, #100	; 0x64
 80029a2:	d9f5      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x378>
        return HAL_TIMEOUT;
 80029a4:	2003      	movs	r0, #3
 80029a6:	e779      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f013 0f01 	tst.w	r3, #1
 80029ae:	d013      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80029b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029b2:	b98b      	cbnz	r3, 80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029b4:	4a81      	ldr	r2, [pc, #516]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 80029b6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ba:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029be:	6860      	ldr	r0, [r4, #4]
 80029c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80029c8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80029cc:	430b      	orrs	r3, r1
 80029ce:	68a1      	ldr	r1, [r4, #8]
 80029d0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80029d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029e2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80029e6:	d043      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80029e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80029ec:	d003      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80029ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f4:	d03c      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80029fc:	d011      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029fe:	4a6f      	ldr	r2, [pc, #444]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a00:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a04:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a08:	6866      	ldr	r6, [r4, #4]
 8002a0a:	6923      	ldr	r3, [r4, #16]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002a12:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002a16:	4303      	orrs	r3, r0
 8002a18:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a28:	d00d      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a34:	68e2      	ldr	r2, [r4, #12]
 8002a36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a3a:	68a2      	ldr	r2, [r4, #8]
 8002a3c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002a40:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002a46:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a50:	f7fd fd86 	bl	8000560 <HAL_GetTick>
 8002a54:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a56:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a5e:	f47f af19 	bne.w	8002894 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a62:	f7fd fd7d 	bl	8000560 <HAL_GetTick>
 8002a66:	1b80      	subs	r0, r0, r6
 8002a68:	2864      	cmp	r0, #100	; 0x64
 8002a6a:	d9f4      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e715      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002a72:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a76:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a7a:	6860      	ldr	r0, [r4, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a84:	68e0      	ldr	r0, [r4, #12]
 8002a86:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a8a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002a94:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a98:	f023 031f 	bic.w	r3, r3, #31
 8002a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a9e:	3901      	subs	r1, #1
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aa6:	e7a6      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002aa8:	4a44      	ldr	r2, [pc, #272]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ab2:	f7fd fd55 	bl	8000560 <HAL_GetTick>
 8002ab6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002ac0:	d006      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac2:	f7fd fd4d 	bl	8000560 <HAL_GetTick>
 8002ac6:	1b40      	subs	r0, r0, r5
 8002ac8:	2864      	cmp	r0, #100	; 0x64
 8002aca:	d9f5      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e6e5      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002ad6:	d001      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002ad8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ada:	b122      	cbz	r2, 8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002adc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002ae0:	d01d      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ae4:	b9db      	cbnz	r3, 8002b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002ae8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002af0:	6960      	ldr	r0, [r4, #20]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002afa:	69a0      	ldr	r0, [r4, #24]
 8002afc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b00:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b04:	430b      	orrs	r3, r1
 8002b06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b0a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b14:	3901      	subs	r1, #1
 8002b16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002b24:	d003      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002b26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2c:	d031      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	f013 0f08 	tst.w	r3, #8
 8002b34:	d019      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x552>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002b38:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b40:	6960      	ldr	r0, [r4, #20]
 8002b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b4a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	69e1      	ldr	r1, [r4, #28]
 8002b52:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b64:	430b      	orrs	r3, r1
 8002b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b74:	f7fd fcf4 	bl	8000560 <HAL_GetTick>
 8002b78:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002b82:	d119      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b84:	f7fd fcec 	bl	8000560 <HAL_GetTick>
 8002b88:	1b00      	subs	r0, r0, r4
 8002b8a:	2864      	cmp	r0, #100	; 0x64
 8002b8c:	d9f5      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x562>
        return HAL_TIMEOUT;
 8002b8e:	2003      	movs	r0, #3
 8002b90:	e684      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8002b94:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b98:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b9c:	6965      	ldr	r5, [r4, #20]
 8002b9e:	6a23      	ldr	r3, [r4, #32]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002ba6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002baa:	4303      	orrs	r3, r0
 8002bac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002bb6:	e7ba      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
  return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e66f      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	0ffffcff 	.word	0x0ffffcff

08002bc4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002bc4:	b1d8      	cbz	r0, 8002bfe <HAL_SDRAM_Init+0x3a>
{   
 8002bc6:	b538      	push	{r3, r4, r5, lr}
 8002bc8:	4604      	mov	r4, r0
 8002bca:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002bcc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002bd0:	b183      	cbz	r3, 8002bf4 <HAL_SDRAM_Init+0x30>
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002bd8:	1d21      	adds	r1, r4, #4
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	f000 fd6c 	bl	80036b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002be0:	6862      	ldr	r2, [r4, #4]
 8002be2:	4629      	mov	r1, r5
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	f000 fda1 	bl	800372c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002bf4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002bf8:	f004 fc9e 	bl	8007538 <HAL_SDRAM_MspInit>
 8002bfc:	e7e9      	b.n	8002bd2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	4770      	bx	lr

08002c02 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002c02:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002c04:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d101      	bne.n	8002c12 <HAL_SDRAM_SendCommand+0x10>
  {
    return HAL_BUSY;
 8002c0e:	2002      	movs	r0, #2
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
}
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
 8002c12:	460d      	mov	r5, r1
 8002c14:	4604      	mov	r4, r0
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002c1c:	6800      	ldr	r0, [r0, #0]
 8002c1e:	f000 fdd1 	bl	80037c4 <FMC_SDRAM_SendCommand>
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HAL_SDRAM_SendCommand+0x30>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8002c2e:	2000      	movs	r0, #0
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002c32:	2305      	movs	r3, #5
 8002c34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8002c38:	2000      	movs	r0, #0
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}

08002c3c <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002c3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d101      	bne.n	8002c4a <HAL_SDRAM_ProgramRefreshRate+0xe>
  {
    return HAL_BUSY;
 8002c46:	2002      	movs	r0, #2
 8002c48:	4770      	bx	lr
{
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002c54:	6800      	ldr	r0, [r0, #0]
 8002c56:	f000 fdcb 	bl	80037f0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8002c60:	2000      	movs	r0, #0
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c66:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c68:	6a04      	ldr	r4, [r0, #32]
 8002c6a:	f024 0401 	bic.w	r4, r4, #1
 8002c6e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002c70:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c72:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002c76:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002c7e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c80:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c82:	6203      	str	r3, [r0, #32]
}
 8002c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8a:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8c:	6a03      	ldr	r3, [r0, #32]
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c94:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c96:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c98:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002c9c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002ca4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002caa:	6203      	str	r3, [r0, #32]
}
 8002cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002cb2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002cb8:	f041 0107 	orr.w	r1, r1, #7
 8002cbc:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002cbe:	6083      	str	r3, [r0, #8]
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc2:	6802      	ldr	r2, [r0, #0]
 8002cc4:	68d3      	ldr	r3, [r2, #12]
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002ccc:	6802      	ldr	r2, [r0, #0]
 8002cce:	6813      	ldr	r3, [r2, #0]
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_IC_CaptureCallback>:
{
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_TriggerCallback>:
{
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IRQHandler>:
{
 8002ce2:	b510      	push	{r4, lr}
 8002ce4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce6:	6803      	ldr	r3, [r0, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	f012 0f02 	tst.w	r2, #2
 8002cee:	d011      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	f012 0f02 	tst.w	r2, #2
 8002cf6:	d00d      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf8:	f06f 0202 	mvn.w	r2, #2
 8002cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f013 0f03 	tst.w	r3, #3
 8002d0a:	d079      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0c:	f7ff ffe6 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d10:	2300      	movs	r3, #0
 8002d12:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	f012 0f04 	tst.w	r2, #4
 8002d1c:	d012      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	f012 0f04 	tst.w	r2, #4
 8002d24:	d00e      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d26:	f06f 0204 	mvn.w	r2, #4
 8002d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002d38:	d068      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff ffce 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d40:	2300      	movs	r3, #0
 8002d42:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	f012 0f08 	tst.w	r2, #8
 8002d4c:	d012      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	f012 0f08 	tst.w	r2, #8
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d56:	f06f 0208 	mvn.w	r2, #8
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f013 0f03 	tst.w	r3, #3
 8002d68:	d057      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff ffb6 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d70:	2300      	movs	r3, #0
 8002d72:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	f012 0f10 	tst.w	r2, #16
 8002d7c:	d012      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	f012 0f10 	tst.w	r2, #16
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d86:	f06f 0210 	mvn.w	r2, #16
 8002d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002d98:	d046      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff ff9e 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	2300      	movs	r3, #0
 8002da2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	f012 0f01 	tst.w	r2, #1
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	f012 0f01 	tst.w	r2, #1
 8002db4:	d13f      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dbe:	d003      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dc6:	d13d      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dd8:	d13b      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002de2:	d003      	beq.n	8002dec <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dea:	d139      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	f012 0f20 	tst.w	r2, #32
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	f012 0f20 	tst.w	r2, #32
 8002dfc:	d137      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x18c>
 8002dfe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e00:	f7ff ff6b 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff ff6a 	bl	8002cde <HAL_TIM_PWM_PulseFinishedCallback>
 8002e0a:	e781      	b.n	8002d10 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff ff64 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff ff63 	bl	8002cde <HAL_TIM_PWM_PulseFinishedCallback>
 8002e18:	e792      	b.n	8002d40 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ff5d 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	4620      	mov	r0, r4
 8002e22:	f7ff ff5c 	bl	8002cde <HAL_TIM_PWM_PulseFinishedCallback>
 8002e26:	e7a3      	b.n	8002d70 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff ff56 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7ff ff55 	bl	8002cde <HAL_TIM_PWM_PulseFinishedCallback>
 8002e34:	e7b4      	b.n	8002da0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e36:	f06f 0201 	mvn.w	r2, #1
 8002e3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f005 fb9e 	bl	800857e <HAL_TIM_PeriodElapsedCallback>
 8002e42:	e7b8      	b.n	8002db6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f000 f993 	bl	8003176 <HAL_TIMEx_BreakCallback>
 8002e50:	e7ba      	b.n	8002dc8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 f98c 	bl	8003176 <HAL_TIMEx_BreakCallback>
 8002e5e:	e7bc      	b.n	8002dda <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff ff3a 	bl	8002ce0 <HAL_TIM_TriggerCallback>
 8002e6c:	e7be      	b.n	8002dec <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f000 f97d 	bl	8003174 <HAL_TIMEx_CommutationCallback>
}
 8002e7a:	e7c0      	b.n	8002dfe <HAL_TIM_IRQHandler+0x11c>

08002e7c <TIM_Base_SetConfig>:
{
 8002e7c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8002e7e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e80:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <TIM_Base_SetConfig+0x124>)
 8002e82:	4290      	cmp	r0, r2
 8002e84:	bf14      	ite	ne
 8002e86:	2200      	movne	r2, #0
 8002e88:	2201      	moveq	r2, #1
 8002e8a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e8e:	bf14      	ite	ne
 8002e90:	4614      	movne	r4, r2
 8002e92:	f042 0401 	orreq.w	r4, r2, #1
 8002e96:	b9d4      	cbnz	r4, 8002ece <TIM_Base_SetConfig+0x52>
 8002e98:	4d42      	ldr	r5, [pc, #264]	; (8002fa4 <TIM_Base_SetConfig+0x128>)
 8002e9a:	42a8      	cmp	r0, r5
 8002e9c:	bf14      	ite	ne
 8002e9e:	2500      	movne	r5, #0
 8002ea0:	2501      	moveq	r5, #1
 8002ea2:	4e41      	ldr	r6, [pc, #260]	; (8002fa8 <TIM_Base_SetConfig+0x12c>)
 8002ea4:	42b0      	cmp	r0, r6
 8002ea6:	d054      	beq.n	8002f52 <TIM_Base_SetConfig+0xd6>
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	d152      	bne.n	8002f52 <TIM_Base_SetConfig+0xd6>
 8002eac:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002eb0:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8002eb4:	42a8      	cmp	r0, r5
 8002eb6:	bf14      	ite	ne
 8002eb8:	2500      	movne	r5, #0
 8002eba:	2501      	moveq	r5, #1
 8002ebc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002ec0:	42b0      	cmp	r0, r6
 8002ec2:	d002      	beq.n	8002eca <TIM_Base_SetConfig+0x4e>
 8002ec4:	b90d      	cbnz	r5, 8002eca <TIM_Base_SetConfig+0x4e>
 8002ec6:	2500      	movs	r5, #0
 8002ec8:	e002      	b.n	8002ed0 <TIM_Base_SetConfig+0x54>
 8002eca:	2501      	movs	r5, #1
 8002ecc:	e000      	b.n	8002ed0 <TIM_Base_SetConfig+0x54>
 8002ece:	2501      	movs	r5, #1
 8002ed0:	b11d      	cbz	r5, 8002eda <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ed6:	684d      	ldr	r5, [r1, #4]
 8002ed8:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002eda:	2c00      	cmp	r4, #0
 8002edc:	d13d      	bne.n	8002f5a <TIM_Base_SetConfig+0xde>
 8002ede:	4c31      	ldr	r4, [pc, #196]	; (8002fa4 <TIM_Base_SetConfig+0x128>)
 8002ee0:	42a0      	cmp	r0, r4
 8002ee2:	bf14      	ite	ne
 8002ee4:	2400      	movne	r4, #0
 8002ee6:	2401      	moveq	r4, #1
 8002ee8:	4d2f      	ldr	r5, [pc, #188]	; (8002fa8 <TIM_Base_SetConfig+0x12c>)
 8002eea:	42a8      	cmp	r0, r5
 8002eec:	d050      	beq.n	8002f90 <TIM_Base_SetConfig+0x114>
 8002eee:	2c00      	cmp	r4, #0
 8002ef0:	d14e      	bne.n	8002f90 <TIM_Base_SetConfig+0x114>
 8002ef2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002ef6:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8002efa:	42a0      	cmp	r0, r4
 8002efc:	bf14      	ite	ne
 8002efe:	2400      	movne	r4, #0
 8002f00:	2401      	moveq	r4, #1
 8002f02:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f06:	42a8      	cmp	r0, r5
 8002f08:	d044      	beq.n	8002f94 <TIM_Base_SetConfig+0x118>
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	d142      	bne.n	8002f94 <TIM_Base_SetConfig+0x118>
 8002f0e:	4c27      	ldr	r4, [pc, #156]	; (8002fac <TIM_Base_SetConfig+0x130>)
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	bf14      	ite	ne
 8002f14:	2400      	movne	r4, #0
 8002f16:	2401      	moveq	r4, #1
 8002f18:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002f1c:	42a8      	cmp	r0, r5
 8002f1e:	d03b      	beq.n	8002f98 <TIM_Base_SetConfig+0x11c>
 8002f20:	2c00      	cmp	r4, #0
 8002f22:	d139      	bne.n	8002f98 <TIM_Base_SetConfig+0x11c>
 8002f24:	4c22      	ldr	r4, [pc, #136]	; (8002fb0 <TIM_Base_SetConfig+0x134>)
 8002f26:	42a0      	cmp	r0, r4
 8002f28:	bf14      	ite	ne
 8002f2a:	2400      	movne	r4, #0
 8002f2c:	2401      	moveq	r4, #1
 8002f2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f32:	42a8      	cmp	r0, r5
 8002f34:	d032      	beq.n	8002f9c <TIM_Base_SetConfig+0x120>
 8002f36:	2c00      	cmp	r4, #0
 8002f38:	d130      	bne.n	8002f9c <TIM_Base_SetConfig+0x120>
 8002f3a:	4c1e      	ldr	r4, [pc, #120]	; (8002fb4 <TIM_Base_SetConfig+0x138>)
 8002f3c:	42a0      	cmp	r0, r4
 8002f3e:	bf14      	ite	ne
 8002f40:	2400      	movne	r4, #0
 8002f42:	2401      	moveq	r4, #1
 8002f44:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8002f48:	42a8      	cmp	r0, r5
 8002f4a:	d004      	beq.n	8002f56 <TIM_Base_SetConfig+0xda>
 8002f4c:	b91c      	cbnz	r4, 8002f56 <TIM_Base_SetConfig+0xda>
 8002f4e:	2400      	movs	r4, #0
 8002f50:	e004      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002f52:	2501      	movs	r5, #1
 8002f54:	e7bc      	b.n	8002ed0 <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f56:	2401      	movs	r4, #1
 8002f58:	e000      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
 8002f5a:	2401      	movs	r4, #1
 8002f5c:	b11c      	cbz	r4, 8002f66 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	68cc      	ldr	r4, [r1, #12]
 8002f64:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6a:	694c      	ldr	r4, [r1, #20]
 8002f6c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002f6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	688b      	ldr	r3, [r1, #8]
 8002f72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <TIM_Base_SetConfig+0x13c>)
 8002f7a:	4298      	cmp	r0, r3
 8002f7c:	bf08      	it	eq
 8002f7e:	f042 0201 	orreq.w	r2, r2, #1
 8002f82:	b10a      	cbz	r2, 8002f88 <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 8002f84:	690b      	ldr	r3, [r1, #16]
 8002f86:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6143      	str	r3, [r0, #20]
}
 8002f8c:	bc70      	pop	{r4, r5, r6}
 8002f8e:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f90:	2401      	movs	r4, #1
 8002f92:	e7e3      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
 8002f94:	2401      	movs	r4, #1
 8002f96:	e7e1      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
 8002f98:	2401      	movs	r4, #1
 8002f9a:	e7df      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
 8002f9c:	2401      	movs	r4, #1
 8002f9e:	e7dd      	b.n	8002f5c <TIM_Base_SetConfig+0xe0>
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40001800 	.word	0x40001800
 8002fb4:	40002000 	.word	0x40002000
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002fbc:	b1a8      	cbz	r0, 8002fea <HAL_TIM_Base_Init+0x2e>
{ 
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fc6:	b15b      	cbz	r3, 8002fe0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fce:	1d21      	adds	r1, r4, #4
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	f7ff ff53 	bl	8002e7c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fdc:	2000      	movs	r0, #0
 8002fde:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002fe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fe4:	f005 fd20 	bl	8008a28 <HAL_TIM_Base_MspInit>
 8002fe8:	e7ee      	b.n	8002fc8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
 8002fec:	4770      	bx	lr

08002fee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fee:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002ff0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ff6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002ffa:	4319      	orrs	r1, r3
 8002ffc:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	6084      	str	r4, [r0, #8]
} 
 8003000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003008:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d07d      	beq.n	800310c <HAL_TIM_ConfigClockSource+0x104>
{
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003014:	2301      	movs	r3, #1
 8003016:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003020:	6802      	ldr	r2, [r0, #0]
 8003022:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_TIM_ConfigClockSource+0x108>)
 8003026:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003028:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d059      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xdc>
 8003030:	d910      	bls.n	8003054 <HAL_TIM_ConfigClockSource+0x4c>
 8003032:	2b70      	cmp	r3, #112	; 0x70
 8003034:	d03e      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xac>
 8003036:	d81f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x70>
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d049      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xc8>
 800303c:	2b60      	cmp	r3, #96	; 0x60
 800303e:	d132      	bne.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003040:	68ca      	ldr	r2, [r1, #12]
 8003042:	6849      	ldr	r1, [r1, #4]
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	f7ff fe20 	bl	8002c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800304a:	2160      	movs	r1, #96	; 0x60
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	f7ff fe30 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 8003052:	e028      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003054:	2b10      	cmp	r3, #16
 8003056:	d04f      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xf0>
 8003058:	d908      	bls.n	800306c <HAL_TIM_ConfigClockSource+0x64>
 800305a:	2b20      	cmp	r3, #32
 800305c:	d051      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0xfa>
 800305e:	2b30      	cmp	r3, #48	; 0x30
 8003060:	d121      	bne.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003062:	2130      	movs	r1, #48	; 0x30
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	f7ff fe24 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 800306a:	e01c      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800306c:	b9db      	cbnz	r3, 80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800306e:	2100      	movs	r1, #0
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	f7ff fe1e 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 8003076:	e016      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d00e      	beq.n	800309c <HAL_TIM_ConfigClockSource+0x94>
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d110      	bne.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 8003084:	68cb      	ldr	r3, [r1, #12]
 8003086:	684a      	ldr	r2, [r1, #4]
 8003088:	6889      	ldr	r1, [r1, #8]
 800308a:	6820      	ldr	r0, [r4, #0]
 800308c:	f7ff ffaf 	bl	8002fee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	6893      	ldr	r3, [r2, #8]
 8003094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003098:	6093      	str	r3, [r2, #8]
    break;
 800309a:	e004      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	6891      	ldr	r1, [r2, #8]
 80030a0:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_TIM_ConfigClockSource+0x10c>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80030b2:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80030b4:	68cb      	ldr	r3, [r1, #12]
 80030b6:	684a      	ldr	r2, [r1, #4]
 80030b8:	6889      	ldr	r1, [r1, #8]
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f7ff ff97 	bl	8002fee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c0:	6822      	ldr	r2, [r4, #0]
 80030c2:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_TIM_ConfigClockSource+0x110>)
 80030c6:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80030cc:	6093      	str	r3, [r2, #8]
    break;
 80030ce:	e7ea      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80030d0:	68ca      	ldr	r2, [r1, #12]
 80030d2:	6849      	ldr	r1, [r1, #4]
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f7ff fdc5 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030da:	2150      	movs	r1, #80	; 0x50
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	f7ff fde8 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 80030e2:	e7e0      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80030e4:	68ca      	ldr	r2, [r1, #12]
 80030e6:	6849      	ldr	r1, [r1, #4]
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	f7ff fdbb 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	f7ff fdde 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 80030f6:	e7d6      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80030f8:	2110      	movs	r1, #16
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	f7ff fdd9 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 8003100:	e7d1      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003102:	2120      	movs	r1, #32
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	f7ff fdd4 	bl	8002cb2 <TIM_ITRx_SetConfig>
    break;
 800310a:	e7cc      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800310c:	2002      	movs	r0, #2
 800310e:	4770      	bx	lr
 8003110:	fffe0088 	.word	0xfffe0088
 8003114:	fffefff8 	.word	0xfffefff8
 8003118:	fffeff88 	.word	0xfffeff88

0800311c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800311c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d021      	beq.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 8003124:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003126:	2301      	movs	r3, #1
 8003128:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800312c:	6804      	ldr	r4, [r0, #0]
 800312e:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003132:	4d0e      	ldr	r5, [pc, #56]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003134:	4e0e      	ldr	r6, [pc, #56]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003136:	42ac      	cmp	r4, r5
 8003138:	bf18      	it	ne
 800313a:	42b4      	cmpne	r4, r6
 800313c:	d103      	bne.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800313e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003142:	684d      	ldr	r5, [r1, #4]
 8003144:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800314a:	680d      	ldr	r5, [r1, #0]
 800314c:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	6889      	ldr	r1, [r1, #8]
 8003154:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003156:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800315c:	2300      	movs	r3, #0
 800315e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8003162:	4618      	mov	r0, r3
} 
 8003164:	bc70      	pop	{r4, r5, r6}
 8003166:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003168:	2002      	movs	r0, #2
 800316a:	4770      	bx	lr
 800316c:	40010400 	.word	0x40010400
 8003170:	40010000 	.word	0x40010000

08003174 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003174:	4770      	bx	lr

08003176 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003176:	4770      	bx	lr

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317c:	4605      	mov	r5, r0
 800317e:	460f      	mov	r7, r1
 8003180:	4616      	mov	r6, r2
 8003182:	4698      	mov	r8, r3
 8003184:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	ea37 0303 	bics.w	r3, r7, r3
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	42b3      	cmp	r3, r6
 8003196:	d11e      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003198:	f1b4 3fff 	cmp.w	r4, #4294967295
 800319c:	d0f3      	beq.n	8003186 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800319e:	b12c      	cbz	r4, 80031ac <UART_WaitOnFlagUntilTimeout+0x34>
 80031a0:	f7fd f9de 	bl	8000560 <HAL_GetTick>
 80031a4:	eba0 0008 	sub.w	r0, r0, r8
 80031a8:	4284      	cmp	r4, r0
 80031aa:	d8ec      	bhi.n	8003186 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ac:	682a      	ldr	r2, [r5, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	682a      	ldr	r2, [r5, #0]
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031c0:	2320      	movs	r3, #32
 80031c2:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80031c6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ca:	2300      	movs	r3, #0
 80031cc:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80031d0:	2003      	movs	r0, #3
 80031d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 80031d6:	2000      	movs	r0, #0
}
 80031d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031dc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e0:	6883      	ldr	r3, [r0, #8]
 80031e2:	6902      	ldr	r2, [r0, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	6942      	ldr	r2, [r0, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	69c2      	ldr	r2, [r0, #28]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80031ee:	6801      	ldr	r1, [r0, #0]
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	4aa0      	ldr	r2, [pc, #640]	; (8003474 <UART_SetConfig+0x298>)
 80031f4:	4002      	ands	r2, r0
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	6853      	ldr	r3, [r2, #4]
 80031fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003202:	68e1      	ldr	r1, [r4, #12]
 8003204:	430b      	orrs	r3, r1
 8003206:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003208:	69a3      	ldr	r3, [r4, #24]
 800320a:	6a22      	ldr	r2, [r4, #32]
 800320c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	688a      	ldr	r2, [r1, #8]
 8003212:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321a:	6825      	ldr	r5, [r4, #0]
 800321c:	4b96      	ldr	r3, [pc, #600]	; (8003478 <UART_SetConfig+0x29c>)
 800321e:	429d      	cmp	r5, r3
 8003220:	d02b      	beq.n	800327a <UART_SetConfig+0x9e>
 8003222:	4b96      	ldr	r3, [pc, #600]	; (800347c <UART_SetConfig+0x2a0>)
 8003224:	429d      	cmp	r5, r3
 8003226:	d03c      	beq.n	80032a2 <UART_SetConfig+0xc6>
 8003228:	4b95      	ldr	r3, [pc, #596]	; (8003480 <UART_SetConfig+0x2a4>)
 800322a:	429d      	cmp	r5, r3
 800322c:	d052      	beq.n	80032d4 <UART_SetConfig+0xf8>
 800322e:	4b95      	ldr	r3, [pc, #596]	; (8003484 <UART_SetConfig+0x2a8>)
 8003230:	429d      	cmp	r5, r3
 8003232:	d067      	beq.n	8003304 <UART_SetConfig+0x128>
 8003234:	4b94      	ldr	r3, [pc, #592]	; (8003488 <UART_SetConfig+0x2ac>)
 8003236:	429d      	cmp	r5, r3
 8003238:	d07c      	beq.n	8003334 <UART_SetConfig+0x158>
 800323a:	4b94      	ldr	r3, [pc, #592]	; (800348c <UART_SetConfig+0x2b0>)
 800323c:	429d      	cmp	r5, r3
 800323e:	f000 8094 	beq.w	800336a <UART_SetConfig+0x18e>
 8003242:	4b93      	ldr	r3, [pc, #588]	; (8003490 <UART_SetConfig+0x2b4>)
 8003244:	429d      	cmp	r5, r3
 8003246:	f000 80ab 	beq.w	80033a0 <UART_SetConfig+0x1c4>
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <UART_SetConfig+0x2b8>)
 800324c:	429d      	cmp	r5, r3
 800324e:	f000 80c2 	beq.w	80033d6 <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003252:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003254:	69e2      	ldr	r2, [r4, #28]
 8003256:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800325a:	f000 80db 	beq.w	8003414 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800325e:	2b08      	cmp	r3, #8
 8003260:	f200 8168 	bhi.w	8003534 <UART_SetConfig+0x358>
 8003264:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003268:	013c0131 	.word	0x013c0131
 800326c:	01660147 	.word	0x01660147
 8003270:	01660151 	.word	0x01660151
 8003274:	01660166 	.word	0x01660166
 8003278:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b03      	cmp	r3, #3
 8003288:	d803      	bhi.n	8003292 <UART_SetConfig+0xb6>
 800328a:	e8df f003 	tbb	[pc, r3]
 800328e:	06bf      	.short	0x06bf
 8003290:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003292:	2310      	movs	r3, #16
 8003294:	e7de      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003296:	2302      	movs	r3, #2
 8003298:	e7dc      	b.n	8003254 <UART_SetConfig+0x78>
 800329a:	2304      	movs	r3, #4
 800329c:	e7da      	b.n	8003254 <UART_SetConfig+0x78>
 800329e:	2308      	movs	r3, #8
 80032a0:	e7d8      	b.n	8003254 <UART_SetConfig+0x78>
 80032a2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d808      	bhi.n	80032c4 <UART_SetConfig+0xe8>
 80032b2:	e8df f003 	tbb	[pc, r3]
 80032b6:	07ad      	.short	0x07ad
 80032b8:	070b0707 	.word	0x070b0707
 80032bc:	07090707 	.word	0x07090707
 80032c0:	0707      	.short	0x0707
 80032c2:	0d          	.byte	0x0d
 80032c3:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80032c4:	2310      	movs	r3, #16
 80032c6:	e7c5      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c8:	2302      	movs	r3, #2
 80032ca:	e7c3      	b.n	8003254 <UART_SetConfig+0x78>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e7c1      	b.n	8003254 <UART_SetConfig+0x78>
 80032d0:	2308      	movs	r3, #8
 80032d2:	e7bf      	b.n	8003254 <UART_SetConfig+0x78>
 80032d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d00d      	beq.n	8003300 <UART_SetConfig+0x124>
 80032e4:	d905      	bls.n	80032f2 <UART_SetConfig+0x116>
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d008      	beq.n	80032fc <UART_SetConfig+0x120>
 80032ea:	2b30      	cmp	r3, #48	; 0x30
 80032ec:	d104      	bne.n	80032f8 <UART_SetConfig+0x11c>
 80032ee:	2308      	movs	r3, #8
 80032f0:	e7b0      	b.n	8003254 <UART_SetConfig+0x78>
 80032f2:	b90b      	cbnz	r3, 80032f8 <UART_SetConfig+0x11c>
 80032f4:	2300      	movs	r3, #0
 80032f6:	e7ad      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80032f8:	2310      	movs	r3, #16
 80032fa:	e7ab      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fc:	2302      	movs	r3, #2
 80032fe:	e7a9      	b.n	8003254 <UART_SetConfig+0x78>
 8003300:	2304      	movs	r3, #4
 8003302:	e7a7      	b.n	8003254 <UART_SetConfig+0x78>
 8003304:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d00d      	beq.n	8003330 <UART_SetConfig+0x154>
 8003314:	d905      	bls.n	8003322 <UART_SetConfig+0x146>
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d008      	beq.n	800332c <UART_SetConfig+0x150>
 800331a:	2bc0      	cmp	r3, #192	; 0xc0
 800331c:	d104      	bne.n	8003328 <UART_SetConfig+0x14c>
 800331e:	2308      	movs	r3, #8
 8003320:	e798      	b.n	8003254 <UART_SetConfig+0x78>
 8003322:	b90b      	cbnz	r3, 8003328 <UART_SetConfig+0x14c>
 8003324:	2300      	movs	r3, #0
 8003326:	e795      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003328:	2310      	movs	r3, #16
 800332a:	e793      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800332c:	2302      	movs	r3, #2
 800332e:	e791      	b.n	8003254 <UART_SetConfig+0x78>
 8003330:	2304      	movs	r3, #4
 8003332:	e78f      	b.n	8003254 <UART_SetConfig+0x78>
 8003334:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003344:	d00f      	beq.n	8003366 <UART_SetConfig+0x18a>
 8003346:	d907      	bls.n	8003358 <UART_SetConfig+0x17c>
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d009      	beq.n	8003362 <UART_SetConfig+0x186>
 800334e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003352:	d104      	bne.n	800335e <UART_SetConfig+0x182>
 8003354:	2308      	movs	r3, #8
 8003356:	e77d      	b.n	8003254 <UART_SetConfig+0x78>
 8003358:	b90b      	cbnz	r3, 800335e <UART_SetConfig+0x182>
 800335a:	2300      	movs	r3, #0
 800335c:	e77a      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800335e:	2310      	movs	r3, #16
 8003360:	e778      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003362:	2302      	movs	r3, #2
 8003364:	e776      	b.n	8003254 <UART_SetConfig+0x78>
 8003366:	2304      	movs	r3, #4
 8003368:	e774      	b.n	8003254 <UART_SetConfig+0x78>
 800336a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d00f      	beq.n	800339c <UART_SetConfig+0x1c0>
 800337c:	d907      	bls.n	800338e <UART_SetConfig+0x1b2>
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003382:	d009      	beq.n	8003398 <UART_SetConfig+0x1bc>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d104      	bne.n	8003394 <UART_SetConfig+0x1b8>
 800338a:	2308      	movs	r3, #8
 800338c:	e762      	b.n	8003254 <UART_SetConfig+0x78>
 800338e:	b90b      	cbnz	r3, 8003394 <UART_SetConfig+0x1b8>
 8003390:	2301      	movs	r3, #1
 8003392:	e75f      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003394:	2310      	movs	r3, #16
 8003396:	e75d      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003398:	2302      	movs	r3, #2
 800339a:	e75b      	b.n	8003254 <UART_SetConfig+0x78>
 800339c:	2304      	movs	r3, #4
 800339e:	e759      	b.n	8003254 <UART_SetConfig+0x78>
 80033a0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d00f      	beq.n	80033d2 <UART_SetConfig+0x1f6>
 80033b2:	d907      	bls.n	80033c4 <UART_SetConfig+0x1e8>
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b8:	d009      	beq.n	80033ce <UART_SetConfig+0x1f2>
 80033ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033be:	d104      	bne.n	80033ca <UART_SetConfig+0x1ee>
 80033c0:	2308      	movs	r3, #8
 80033c2:	e747      	b.n	8003254 <UART_SetConfig+0x78>
 80033c4:	b90b      	cbnz	r3, 80033ca <UART_SetConfig+0x1ee>
 80033c6:	2300      	movs	r3, #0
 80033c8:	e744      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80033ca:	2310      	movs	r3, #16
 80033cc:	e742      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ce:	2302      	movs	r3, #2
 80033d0:	e740      	b.n	8003254 <UART_SetConfig+0x78>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e73e      	b.n	8003254 <UART_SetConfig+0x78>
 80033d6:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e6:	d00f      	beq.n	8003408 <UART_SetConfig+0x22c>
 80033e8:	d907      	bls.n	80033fa <UART_SetConfig+0x21e>
 80033ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ee:	d009      	beq.n	8003404 <UART_SetConfig+0x228>
 80033f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033f4:	d104      	bne.n	8003400 <UART_SetConfig+0x224>
 80033f6:	2308      	movs	r3, #8
 80033f8:	e72c      	b.n	8003254 <UART_SetConfig+0x78>
 80033fa:	b90b      	cbnz	r3, 8003400 <UART_SetConfig+0x224>
 80033fc:	2300      	movs	r3, #0
 80033fe:	e729      	b.n	8003254 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003400:	2310      	movs	r3, #16
 8003402:	e727      	b.n	8003254 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003404:	2302      	movs	r3, #2
 8003406:	e725      	b.n	8003254 <UART_SetConfig+0x78>
 8003408:	2304      	movs	r3, #4
 800340a:	e723      	b.n	8003254 <UART_SetConfig+0x78>
 800340c:	2301      	movs	r3, #1
 800340e:	e721      	b.n	8003254 <UART_SetConfig+0x78>
 8003410:	2300      	movs	r3, #0
 8003412:	e71f      	b.n	8003254 <UART_SetConfig+0x78>
    switch (clocksource)
 8003414:	2b08      	cmp	r3, #8
 8003416:	d855      	bhi.n	80034c4 <UART_SetConfig+0x2e8>
 8003418:	e8df f003 	tbb	[pc, r3]
 800341c:	54221705 	.word	0x54221705
 8003420:	54545440 	.word	0x54545440
 8003424:	4b          	.byte	0x4b
 8003425:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003426:	f7ff f8b9 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 800342a:	6862      	ldr	r2, [r4, #4]
 800342c:	0853      	lsrs	r3, r2, #1
 800342e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003432:	fbb3 f3f2 	udiv	r3, r3, r2
 8003436:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003438:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800343a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800343e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003442:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	60d3      	str	r3, [r2, #12]
 8003448:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800344a:	f7ff f8b7 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	0853      	lsrs	r3, r2, #1
 8003452:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003456:	fbb3 f3f2 	udiv	r3, r3, r2
 800345a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800345c:	2000      	movs	r0, #0
      break;
 800345e:	e7ec      	b.n	800343a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003460:	6862      	ldr	r2, [r4, #4]
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <UART_SetConfig+0x2bc>)
 8003464:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003468:	fbb3 f3f2 	udiv	r3, r3, r2
 800346c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800346e:	2000      	movs	r0, #0
      break;
 8003470:	e7e3      	b.n	800343a <UART_SetConfig+0x25e>
 8003472:	bf00      	nop
 8003474:	efff69f3 	.word	0xefff69f3
 8003478:	40011000 	.word	0x40011000
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40004c00 	.word	0x40004c00
 8003488:	40005000 	.word	0x40005000
 800348c:	40011400 	.word	0x40011400
 8003490:	40007800 	.word	0x40007800
 8003494:	40007c00 	.word	0x40007c00
 8003498:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800349c:	f7fe ff74 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 80034a0:	6862      	ldr	r2, [r4, #4]
 80034a2:	0853      	lsrs	r3, r2, #1
 80034a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ae:	2000      	movs	r0, #0
      break;
 80034b0:	e7c3      	b.n	800343a <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034b2:	6862      	ldr	r2, [r4, #4]
 80034b4:	0853      	lsrs	r3, r2, #1
 80034b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80034ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80034be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c0:	2000      	movs	r0, #0
      break;
 80034c2:	e7ba      	b.n	800343a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e7b7      	b.n	800343a <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034ca:	f7ff f867 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80034d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80034d8:	b280      	uxth	r0, r0
 80034da:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	2000      	movs	r0, #0
      break;
 80034de:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034e0:	f7ff f86c 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80034ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80034ee:	b280      	uxth	r0, r0
 80034f0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f2:	2000      	movs	r0, #0
      break;
 80034f4:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <UART_SetConfig+0x35c>)
 80034fa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80034fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003506:	2000      	movs	r0, #0
      break;
 8003508:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800350a:	f7fe ff3d 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800350e:	6863      	ldr	r3, [r4, #4]
 8003510:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003514:	fbb0 f0f3 	udiv	r0, r0, r3
 8003518:	b280      	uxth	r0, r0
 800351a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800351c:	2000      	movs	r0, #0
      break;
 800351e:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003520:	6862      	ldr	r2, [r4, #4]
 8003522:	0853      	lsrs	r3, r2, #1
 8003524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003528:	fbb3 f3f2 	udiv	r3, r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003530:	2000      	movs	r0, #0
      break;
 8003532:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003534:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	00f42400 	.word	0x00f42400

0800353c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800353e:	f013 0f01 	tst.w	r3, #1
 8003542:	d006      	beq.n	8003552 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003544:	6802      	ldr	r2, [r0, #0]
 8003546:	6853      	ldr	r3, [r2, #4]
 8003548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800354c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800354e:	430b      	orrs	r3, r1
 8003550:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003552:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003554:	f013 0f02 	tst.w	r3, #2
 8003558:	d006      	beq.n	8003568 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800355a:	6802      	ldr	r2, [r0, #0]
 800355c:	6853      	ldr	r3, [r2, #4]
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003564:	430b      	orrs	r3, r1
 8003566:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003568:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800356a:	f013 0f04 	tst.w	r3, #4
 800356e:	d006      	beq.n	800357e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003570:	6802      	ldr	r2, [r0, #0]
 8003572:	6853      	ldr	r3, [r2, #4]
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800357a:	430b      	orrs	r3, r1
 800357c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003580:	f013 0f08 	tst.w	r3, #8
 8003584:	d006      	beq.n	8003594 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003586:	6802      	ldr	r2, [r0, #0]
 8003588:	6853      	ldr	r3, [r2, #4]
 800358a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800358e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003590:	430b      	orrs	r3, r1
 8003592:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003594:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003596:	f013 0f10 	tst.w	r3, #16
 800359a:	d006      	beq.n	80035aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800359c:	6802      	ldr	r2, [r0, #0]
 800359e:	6893      	ldr	r3, [r2, #8]
 80035a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ac:	f013 0f20 	tst.w	r3, #32
 80035b0:	d006      	beq.n	80035c0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	6893      	ldr	r3, [r2, #8]
 80035b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80035bc:	430b      	orrs	r3, r1
 80035be:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c8:	6802      	ldr	r2, [r0, #0]
 80035ca:	6853      	ldr	r3, [r2, #4]
 80035cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035dc:	d00b      	beq.n	80035f6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035e4:	d006      	beq.n	80035f4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	6853      	ldr	r3, [r2, #4]
 80035ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035ee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]
 80035f4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f6:	6802      	ldr	r2, [r0, #0]
 80035f8:	6853      	ldr	r3, [r2, #4]
 80035fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035fe:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003600:	430b      	orrs	r3, r1
 8003602:	6053      	str	r3, [r2, #4]
 8003604:	e7eb      	b.n	80035de <UART_AdvFeatureConfig+0xa2>

08003606 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003606:	b510      	push	{r4, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	2300      	movs	r3, #0
 800360e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003610:	f7fc ffa6 	bl	8000560 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f012 0f08 	tst.w	r2, #8
 800361c:	d109      	bne.n	8003632 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800361e:	2320      	movs	r3, #32
 8003620:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8003624:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003628:	2000      	movs	r0, #0
 800362a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800362e:	b002      	add	sp, #8
 8003630:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003632:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4603      	mov	r3, r0
 800363a:	2200      	movs	r2, #0
 800363c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff fd99 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8003646:	2800      	cmp	r0, #0
 8003648:	d0e9      	beq.n	800361e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800364a:	2003      	movs	r0, #3
 800364c:	e7ef      	b.n	800362e <UART_CheckIdleState+0x28>

0800364e <HAL_UART_Init>:
  if(huart == NULL)
 800364e:	b378      	cbz	r0, 80036b0 <HAL_UART_Init+0x62>
{
 8003650:	b510      	push	{r4, lr}
 8003652:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003654:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003658:	b30b      	cbz	r3, 800369e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800365a:	2324      	movs	r3, #36	; 0x24
 800365c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366a:	4620      	mov	r0, r4
 800366c:	f7ff fdb6 	bl	80031dc <UART_SetConfig>
 8003670:	2801      	cmp	r0, #1
 8003672:	d01f      	beq.n	80036b4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003676:	b9bb      	cbnz	r3, 80036a8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	6853      	ldr	r3, [r2, #4]
 800367c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003680:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	6893      	ldr	r3, [r2, #8]
 8003686:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800368a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ffb5 	bl	8003606 <UART_CheckIdleState>
 800369c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800369e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80036a2:	f005 f9e9 	bl	8008a78 <HAL_UART_MspInit>
 80036a6:	e7d8      	b.n	800365a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7ff ff47 	bl	800353c <UART_AdvFeatureConfig>
 80036ae:	e7e3      	b.n	8003678 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80036b0:	2001      	movs	r0, #1
 80036b2:	4770      	bx	lr
}
 80036b4:	bd10      	pop	{r4, pc}
	...

080036b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80036b8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80036ba:	680b      	ldr	r3, [r1, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d018      	beq.n	80036f2 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80036c0:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80036c2:	4a19      	ldr	r2, [pc, #100]	; (8003728 <FMC_SDRAM_Init+0x70>)
 80036c4:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80036c6:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 80036c8:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80036ca:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 80036cc:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 80036ce:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 80036d0:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 80036d2:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 80036d4:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 80036d6:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 80036d8:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 80036da:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 80036dc:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 80036de:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 80036e0:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 80036e2:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 80036e4:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80036e6:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80036e8:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80036ea:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80036ec:	2000      	movs	r0, #0
 80036ee:	bc30      	pop	{r4, r5}
 80036f0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80036f2:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80036f4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80036f8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80036fa:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80036fc:	4313      	orrs	r3, r2
                        Init->ReadPipeDelay);
 80036fe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8003700:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003702:	431c      	orrs	r4, r3
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003704:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <FMC_SDRAM_Init+0x70>)
 8003708:	401a      	ands	r2, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800370a:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 800370c:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800370e:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 8003710:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 8003712:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 8003714:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 8003716:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 8003718:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 800371a:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800371c:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 800371e:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003720:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003722:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003724:	6043      	str	r3, [r0, #4]
 8003726:	e7e1      	b.n	80036ec <FMC_SDRAM_Init+0x34>
 8003728:	ffff8000 	.word	0xffff8000

0800372c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800372c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800372e:	2a01      	cmp	r2, #1
 8003730:	d021      	beq.n	8003776 <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003732:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003734:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003738:	680b      	ldr	r3, [r1, #0]
 800373a:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800373c:	684c      	ldr	r4, [r1, #4]
 800373e:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003740:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003744:	688c      	ldr	r4, [r1, #8]
 8003746:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003748:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800374c:	68cc      	ldr	r4, [r1, #12]
 800374e:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003750:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003754:	690c      	ldr	r4, [r1, #16]
 8003756:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800375c:	694c      	ldr	r4, [r1, #20]
 800375e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003760:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8003764:	6989      	ldr	r1, [r1, #24]
 8003766:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003768:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800376c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800376e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003770:	2000      	movs	r0, #0
 8003772:	bc30      	pop	{r4, r5}
 8003774:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003776:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003778:	4c11      	ldr	r4, [pc, #68]	; (80037c0 <FMC_SDRAM_Timing_Init+0x94>)
 800377a:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800377c:	68cb      	ldr	r3, [r1, #12]
 800377e:	1e5a      	subs	r2, r3, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8003780:	694b      	ldr	r3, [r1, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003786:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800378a:	431c      	orrs	r4, r3
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800378c:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800378e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003792:	680b      	ldr	r3, [r1, #0]
 8003794:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003796:	684d      	ldr	r5, [r1, #4]
 8003798:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800379a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800379e:	688d      	ldr	r5, [r1, #8]
 80037a0:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80037a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80037a6:	690d      	ldr	r5, [r1, #16]
 80037a8:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80037aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 80037ae:	6989      	ldr	r1, [r1, #24]
 80037b0:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80037b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80037b6:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80037b8:	6084      	str	r4, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80037ba:	60c3      	str	r3, [r0, #12]
 80037bc:	e7d8      	b.n	8003770 <FMC_SDRAM_Timing_Init+0x44>
 80037be:	bf00      	nop
 80037c0:	ff0f0fff 	.word	0xff0f0fff

080037c4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80037c4:	b410      	push	{r4}
 80037c6:	b083      	sub	sp, #12
 80037c8:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80037ca:	2000      	movs	r0, #0
 80037cc:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80037ce:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80037d0:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80037d2:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80037d8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 80037dc:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80037de:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80037e2:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 80037e8:	b003      	add	sp, #12
 80037ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80037f0:	6943      	ldr	r3, [r0, #20]
 80037f2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80037f6:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80037f8:	2000      	movs	r0, #0
 80037fa:	4770      	bx	lr

080037fc <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 80037fc:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80037fe:	3301      	adds	r3, #1
 8003800:	4a0c      	ldr	r2, [pc, #48]	; (8003834 <USB_CoreReset+0x38>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d811      	bhi.n	800382a <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003806:	6902      	ldr	r2, [r0, #16]
 8003808:	2a00      	cmp	r2, #0
 800380a:	daf8      	bge.n	80037fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800380c:	6903      	ldr	r3, [r0, #16]
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6103      	str	r3, [r0, #16]
  count = 0;
 8003814:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000)
 8003816:	3301      	adds	r3, #1
 8003818:	4a06      	ldr	r2, [pc, #24]	; (8003834 <USB_CoreReset+0x38>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d807      	bhi.n	800382e <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800381e:	6902      	ldr	r2, [r0, #16]
 8003820:	f012 0f01 	tst.w	r2, #1
 8003824:	d1f7      	bne.n	8003816 <USB_CoreReset+0x1a>

  return HAL_OK;
 8003826:	2000      	movs	r0, #0
 8003828:	4770      	bx	lr
      return HAL_TIMEOUT;
 800382a:	2003      	movs	r0, #3
 800382c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800382e:	2003      	movs	r0, #3
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	00030d40 	.word	0x00030d40

08003838 <USB_CoreInit>:
{
 8003838:	b084      	sub	sp, #16
 800383a:	b510      	push	{r4, lr}
 800383c:	4604      	mov	r4, r0
 800383e:	a803      	add	r0, sp, #12
 8003840:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003844:	9b08      	ldr	r3, [sp, #32]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d011      	beq.n	800386e <USB_CoreInit+0x36>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800384a:	68e3      	ldr	r3, [r4, #12]
 800384c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003850:	60e3      	str	r3, [r4, #12]
    USB_CoreReset(USBx);
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff ffd2 	bl	80037fc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800385c:	63a3      	str	r3, [r4, #56]	; 0x38
  if(cfg.dma_enable == ENABLE)
 800385e:	9b06      	ldr	r3, [sp, #24]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d01c      	beq.n	800389e <USB_CoreInit+0x66>
}
 8003864:	2000      	movs	r0, #0
 8003866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386a:	b004      	add	sp, #16
 800386c:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800386e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003874:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003876:	68e2      	ldr	r2, [r4, #12]
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <USB_CoreInit+0x78>)
 800387a:	4013      	ands	r3, r2
 800387c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003884:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1)
 8003886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d003      	beq.n	8003894 <USB_CoreInit+0x5c>
    USB_CoreReset(USBx);
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff ffb5 	bl	80037fc <USB_CoreReset>
 8003892:	e7e4      	b.n	800385e <USB_CoreInit+0x26>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003894:	68e3      	ldr	r3, [r4, #12]
 8003896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389a:	60e3      	str	r3, [r4, #12]
 800389c:	e7f6      	b.n	800388c <USB_CoreInit+0x54>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800389e:	68a3      	ldr	r3, [r4, #8]
 80038a0:	f043 0306 	orr.w	r3, r3, #6
 80038a4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038a6:	68a3      	ldr	r3, [r4, #8]
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	60a3      	str	r3, [r4, #8]
 80038ae:	e7d9      	b.n	8003864 <USB_CoreInit+0x2c>
 80038b0:	ffbdffbf 	.word	0xffbdffbf

080038b4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038b4:	6883      	ldr	r3, [r0, #8]
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6083      	str	r3, [r0, #8]
}
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr

080038c0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038c0:	6883      	ldr	r3, [r0, #8]
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6083      	str	r3, [r0, #8]
}
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr

080038cc <USB_SetCurrentMode>:
{
 80038cc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038ce:	68c3      	ldr	r3, [r0, #12]
 80038d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80038d4:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80038d6:	2901      	cmp	r1, #1
 80038d8:	d009      	beq.n	80038ee <USB_SetCurrentMode+0x22>
  else if ( mode == USB_OTG_DEVICE_MODE)
 80038da:	b919      	cbnz	r1, 80038e4 <USB_SetCurrentMode+0x18>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038dc:	68c3      	ldr	r3, [r0, #12]
 80038de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80038e4:	2032      	movs	r0, #50	; 0x32
 80038e6:	f7fc fe41 	bl	800056c <HAL_Delay>
}
 80038ea:	2000      	movs	r0, #0
 80038ec:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038ee:	68c3      	ldr	r3, [r0, #12]
 80038f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038f4:	60c3      	str	r3, [r0, #12]
 80038f6:	e7f5      	b.n	80038e4 <USB_SetCurrentMode+0x18>

080038f8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80038f8:	0189      	lsls	r1, r1, #6
 80038fa:	f041 0120 	orr.w	r1, r1, #32
 80038fe:	6101      	str	r1, [r0, #16]
  uint32_t count = 0;
 8003900:	2300      	movs	r3, #0
    if (++count > 200000)
 8003902:	3301      	adds	r3, #1
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <USB_FlushTxFifo+0x24>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d805      	bhi.n	8003916 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800390a:	6902      	ldr	r2, [r0, #16]
 800390c:	f012 0f20 	tst.w	r2, #32
 8003910:	d1f7      	bne.n	8003902 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003912:	2000      	movs	r0, #0
 8003914:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003916:	2003      	movs	r0, #3
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	00030d40 	.word	0x00030d40

08003920 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003920:	2310      	movs	r3, #16
 8003922:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8003924:	2300      	movs	r3, #0
    if (++count > 200000)
 8003926:	3301      	adds	r3, #1
 8003928:	4a05      	ldr	r2, [pc, #20]	; (8003940 <USB_FlushRxFifo+0x20>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d805      	bhi.n	800393a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800392e:	6902      	ldr	r2, [r0, #16]
 8003930:	f012 0f10 	tst.w	r2, #16
 8003934:	d1f7      	bne.n	8003926 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003936:	2000      	movs	r0, #0
 8003938:	4770      	bx	lr
      return HAL_TIMEOUT;
 800393a:	2003      	movs	r0, #3
}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003944:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003948:	4319      	orrs	r1, r3
 800394a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800394e:	2000      	movs	r0, #0
 8003950:	4770      	bx	lr
	...

08003954 <USB_DevInit>:
{
 8003954:	b084      	sub	sp, #16
 8003956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003958:	4605      	mov	r5, r0
 800395a:	a807      	add	r0, sp, #28
 800395c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003960:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003966:	63ab      	str	r3, [r5, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8003968:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800396a:	b95f      	cbnz	r7, 8003984 <USB_DevInit+0x30>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800396c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800396e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003972:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397a:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003982:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0;
 8003984:	462c      	mov	r4, r5
 8003986:	2300      	movs	r3, #0
 8003988:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800398c:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8003990:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8003994:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800399a:	2b01      	cmp	r3, #1
 800399c:	d014      	beq.n	80039c8 <USB_DevInit+0x74>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d01e      	beq.n	80039e0 <USB_DevInit+0x8c>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80039a2:	2103      	movs	r1, #3
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff ffcd 	bl	8003944 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80039aa:	2110      	movs	r1, #16
 80039ac:	4628      	mov	r0, r5
 80039ae:	f7ff ffa3 	bl	80038f8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80039b2:	4628      	mov	r0, r5
 80039b4:	f7ff ffb4 	bl	8003920 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80039bc:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80039be:	f04f 32ff 	mov.w	r2, #4294967295
 80039c2:	61b2      	str	r2, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80039c4:	61f3      	str	r3, [r6, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80039c6:	e020      	b.n	8003a0a <USB_DevInit+0xb6>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80039c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ca:	b923      	cbnz	r3, 80039d6 <USB_DevInit+0x82>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80039cc:	2100      	movs	r1, #0
 80039ce:	4628      	mov	r0, r5
 80039d0:	f7ff ffb8 	bl	8003944 <USB_SetDevSpeed>
 80039d4:	e7e9      	b.n	80039aa <USB_DevInit+0x56>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80039d6:	2101      	movs	r1, #1
 80039d8:	4628      	mov	r0, r5
 80039da:	f7ff ffb3 	bl	8003944 <USB_SetDevSpeed>
 80039de:	e7e4      	b.n	80039aa <USB_DevInit+0x56>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80039e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039e2:	b923      	cbnz	r3, 80039ee <USB_DevInit+0x9a>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80039e4:	2100      	movs	r1, #0
 80039e6:	4628      	mov	r0, r5
 80039e8:	f7ff ffac 	bl	8003944 <USB_SetDevSpeed>
 80039ec:	e7dd      	b.n	80039aa <USB_DevInit+0x56>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80039ee:	2101      	movs	r1, #1
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7ff ffa7 	bl	8003944 <USB_SetDevSpeed>
 80039f6:	e7d8      	b.n	80039aa <USB_DevInit+0x56>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80039f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039fc:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0;
 8003a00:	2200      	movs	r2, #0
 8003a02:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	608a      	str	r2, [r1, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003a08:	3301      	adds	r3, #1
 8003a0a:	9907      	ldr	r1, [sp, #28]
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d20b      	bcs.n	8003a28 <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a10:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003a14:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8003a18:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	dbeb      	blt.n	80039f8 <USB_DevInit+0xa4>
      USBx_INEP(i)->DIEPCTL = 0;
 8003a20:	2000      	movs	r0, #0
 8003a22:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8003a26:	e7eb      	b.n	8003a00 <USB_DevInit+0xac>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e008      	b.n	8003a3e <USB_DevInit+0xea>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003a2c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 8003a30:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8003a34:	2200      	movs	r2, #0
 8003a36:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	6082      	str	r2, [r0, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d20d      	bcs.n	8003a5e <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a42:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003a46:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8003a4a:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8003a4e:	f1be 0f00 	cmp.w	lr, #0
 8003a52:	dbeb      	blt.n	8003a2c <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8003a54:	f04f 0e00 	mov.w	lr, #0
 8003a58:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
 8003a5c:	e7ea      	b.n	8003a34 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a5e:	6933      	ldr	r3, [r6, #16]
 8003a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a64:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8003a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d01a      	beq.n	8003aa2 <USB_DevInit+0x14e>
  USBx->GINTMSK = 0;
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	61aa      	str	r2, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8003a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a74:	616a      	str	r2, [r5, #20]
  if (cfg.dma_enable == DISABLE)
 8003a76:	b91b      	cbnz	r3, 8003a80 <USB_DevInit+0x12c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a78:	69ab      	ldr	r3, [r5, #24]
 8003a7a:	f043 0310 	orr.w	r3, r3, #16
 8003a7e:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003a80:	69aa      	ldr	r2, [r5, #24]
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <USB_DevInit+0x168>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61ab      	str	r3, [r5, #24]
  if(cfg.Sof_enable)
 8003a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a8a:	b11b      	cbz	r3, 8003a94 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a8c:	69ab      	ldr	r3, [r5, #24]
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8003a94:	2f01      	cmp	r7, #1
 8003a96:	d00c      	beq.n	8003ab2 <USB_DevInit+0x15e>
}
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a9e:	b004      	add	sp, #16
 8003aa0:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <USB_DevInit+0x16c>)
 8003aa4:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003aa6:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <USB_DevInit+0x170>)
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	6332      	str	r2, [r6, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8003aae:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003ab0:	e7dc      	b.n	8003a6c <USB_DevInit+0x118>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ab2:	69aa      	ldr	r2, [r5, #24]
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <USB_DevInit+0x174>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61ab      	str	r3, [r5, #24]
 8003aba:	e7ed      	b.n	8003a98 <USB_DevInit+0x144>
 8003abc:	803c3800 	.word	0x803c3800
 8003ac0:	00800100 	.word	0x00800100
 8003ac4:	00010003 	.word	0x00010003
 8003ac8:	40000004 	.word	0x40000004

08003acc <USB_GetDevSpeed>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003acc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003ad0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003ad4:	f013 0f06 	tst.w	r3, #6
 8003ad8:	d010      	beq.n	8003afc <USB_GetDevSpeed+0x30>
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003ada:	6883      	ldr	r3, [r0, #8]
 8003adc:	f003 0306 	and.w	r3, r3, #6
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d00d      	beq.n	8003b00 <USB_GetDevSpeed+0x34>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003ae4:	6883      	ldr	r3, [r0, #8]
 8003ae6:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d00a      	beq.n	8003b04 <USB_GetDevSpeed+0x38>
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003aee:	6883      	ldr	r3, [r0, #8]
 8003af0:	f003 0306 	and.w	r3, r3, #6
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d007      	beq.n	8003b08 <USB_GetDevSpeed+0x3c>
  uint8_t speed = 0;
 8003af8:	2000      	movs	r0, #0
 8003afa:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003b00:	2003      	movs	r0, #3
 8003b02:	4770      	bx	lr
 8003b04:	2003      	movs	r0, #3
 8003b06:	4770      	bx	lr
    speed = USB_OTG_SPEED_LOW;
 8003b08:	2002      	movs	r0, #2
}
 8003b0a:	4770      	bx	lr

08003b0c <USB_ActivateEndpoint>:
{
 8003b0c:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 8003b0e:	784b      	ldrb	r3, [r1, #1]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d020      	beq.n	8003b56 <USB_ActivateEndpoint+0x4a>
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8003b14:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8003b18:	780d      	ldrb	r5, [r1, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	40aa      	lsls	r2, r5
 8003b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b22:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8003b26:	780b      	ldrb	r3, [r1, #0]
 8003b28:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003b2c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003b30:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003b34:	d10c      	bne.n	8003b50 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8003b36:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003b3a:	688b      	ldr	r3, [r1, #8]
 8003b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b40:	78c9      	ldrb	r1, [r1, #3]
 8003b42:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003b46:	4313      	orrs	r3, r2
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <USB_ActivateEndpoint+0x8c>)
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	bc30      	pop	{r4, r5}
 8003b54:	4770      	bx	lr
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003b56:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003b5a:	780d      	ldrb	r5, [r1, #0]
 8003b5c:	40ab      	lsls	r3, r5
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8003b66:	780a      	ldrb	r2, [r1, #0]
 8003b68:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8003b6c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003b70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003b74:	d1ec      	bne.n	8003b50 <USB_ActivateEndpoint+0x44>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8003b76:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8003b7a:	688b      	ldr	r3, [r1, #8]
 8003b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b80:	78c9      	ldrb	r1, [r1, #3]
 8003b82:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003b86:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003b8a:	4323      	orrs	r3, r4
 8003b8c:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <USB_ActivateEndpoint+0x8c>)
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8003b94:	e7dc      	b.n	8003b50 <USB_ActivateEndpoint+0x44>
 8003b96:	bf00      	nop
 8003b98:	10008000 	.word	0x10008000

08003b9c <USB_DeactivateEndpoint>:
{
 8003b9c:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 8003b9e:	784b      	ldrb	r3, [r1, #1]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d01d      	beq.n	8003be0 <USB_DeactivateEndpoint+0x44>
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8003ba4:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003ba8:	780d      	ldrb	r5, [r1, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	fa02 f505 	lsl.w	r5, r2, r5
 8003bb0:	ea24 4405 	bic.w	r4, r4, r5, lsl #16
 8003bb4:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8003bb8:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8003bbc:	780d      	ldrb	r5, [r1, #0]
 8003bbe:	40aa      	lsls	r2, r5
 8003bc0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8003bc4:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8003bc8:	780b      	ldrb	r3, [r1, #0]
 8003bca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003bce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003bd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bd6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003bda:	2000      	movs	r0, #0
 8003bdc:	bc30      	pop	{r4, r5}
 8003bde:	4770      	bx	lr
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8003be0:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8003be4:	780a      	ldrb	r2, [r1, #0]
 8003be6:	fa03 f202 	lsl.w	r2, r3, r2
 8003bea:	b292      	uxth	r2, r2
 8003bec:	ea25 0202 	bic.w	r2, r5, r2
 8003bf0:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8003bf4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003bf8:	780d      	ldrb	r5, [r1, #0]
 8003bfa:	40ab      	lsls	r3, r5
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	ea22 0303 	bic.w	r3, r2, r3
 8003c02:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8003c06:	780b      	ldrb	r3, [r1, #0]
 8003c08:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c0c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c14:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003c18:	e7df      	b.n	8003bda <USB_DeactivateEndpoint+0x3e>
	...

08003c1c <USB_EP0StartXfer>:
{
 8003c1c:	b430      	push	{r4, r5}
  if (ep->is_in == 1)
 8003c1e:	784b      	ldrb	r3, [r1, #1]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d037      	beq.n	8003c94 <USB_EP0StartXfer+0x78>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c24:	780b      	ldrb	r3, [r1, #0]
 8003c26:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c2a:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8003c2e:	4c50      	ldr	r4, [pc, #320]	; (8003d70 <USB_EP0StartXfer+0x154>)
 8003c30:	402c      	ands	r4, r5
 8003c32:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c36:	780b      	ldrb	r3, [r1, #0]
 8003c38:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c3c:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8003c40:	4c4c      	ldr	r4, [pc, #304]	; (8003d74 <USB_EP0StartXfer+0x158>)
 8003c42:	402c      	ands	r4, r5
 8003c44:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (ep->xfer_len > 0)
 8003c48:	694b      	ldr	r3, [r1, #20]
 8003c4a:	b10b      	cbz	r3, 8003c50 <USB_EP0StartXfer+0x34>
      ep->xfer_len = ep->maxpacket;
 8003c4c:	688b      	ldr	r3, [r1, #8]
 8003c4e:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8003c50:	780b      	ldrb	r3, [r1, #0]
 8003c52:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c56:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003c5a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003c5e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c62:	780b      	ldrb	r3, [r1, #0]
 8003c64:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c68:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003c6c:	688d      	ldr	r5, [r1, #8]
 8003c6e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003c72:	432c      	orrs	r4, r5
 8003c74:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (dma == 1)
 8003c78:	2a01      	cmp	r2, #1
 8003c7a:	d071      	beq.n	8003d60 <USB_EP0StartXfer+0x144>
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c7c:	780b      	ldrb	r3, [r1, #0]
 8003c7e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003c8e:	2000      	movs	r0, #0
 8003c90:	bc30      	pop	{r4, r5}
 8003c92:	4770      	bx	lr
    if (ep->xfer_len == 0)
 8003c94:	694b      	ldr	r3, [r1, #20]
 8003c96:	bb83      	cbnz	r3, 8003cfa <USB_EP0StartXfer+0xde>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c98:	780b      	ldrb	r3, [r1, #0]
 8003c9a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c9e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003ca2:	4c34      	ldr	r4, [pc, #208]	; (8003d74 <USB_EP0StartXfer+0x158>)
 8003ca4:	402c      	ands	r4, r5
 8003ca6:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003caa:	780b      	ldrb	r3, [r1, #0]
 8003cac:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003cb0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003cb4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003cb8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cbc:	780b      	ldrb	r3, [r1, #0]
 8003cbe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003cc2:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003cc6:	4c2a      	ldr	r4, [pc, #168]	; (8003d70 <USB_EP0StartXfer+0x154>)
 8003cc8:	402c      	ands	r4, r5
 8003cca:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    if (dma == 1)
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d03f      	beq.n	8003d52 <USB_EP0StartXfer+0x136>
      if (ep->xfer_len > 0U)
 8003cd2:	694b      	ldr	r3, [r1, #20]
 8003cd4:	b13b      	cbz	r3, 8003ce6 <USB_EP0StartXfer+0xca>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003cd6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003cda:	780d      	ldrb	r5, [r1, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	40aa      	lsls	r2, r5
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ce6:	780b      	ldrb	r3, [r1, #0]
 8003ce8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003cec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cf4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003cf8:	e7c9      	b.n	8003c8e <USB_EP0StartXfer+0x72>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cfa:	780b      	ldrb	r3, [r1, #0]
 8003cfc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d00:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003d04:	4c1a      	ldr	r4, [pc, #104]	; (8003d70 <USB_EP0StartXfer+0x154>)
 8003d06:	402c      	ands	r4, r5
 8003d08:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d0c:	780b      	ldrb	r3, [r1, #0]
 8003d0e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d12:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003d16:	4c17      	ldr	r4, [pc, #92]	; (8003d74 <USB_EP0StartXfer+0x158>)
 8003d18:	402c      	ands	r4, r5
 8003d1a:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if(ep->xfer_len > ep->maxpacket)
 8003d1e:	694c      	ldr	r4, [r1, #20]
 8003d20:	688b      	ldr	r3, [r1, #8]
 8003d22:	429c      	cmp	r4, r3
 8003d24:	d900      	bls.n	8003d28 <USB_EP0StartXfer+0x10c>
        ep->xfer_len = ep->maxpacket;
 8003d26:	614b      	str	r3, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003d28:	780b      	ldrb	r3, [r1, #0]
 8003d2a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d2e:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003d32:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003d36:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d3a:	780b      	ldrb	r3, [r1, #0]
 8003d3c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d40:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003d44:	694d      	ldr	r5, [r1, #20]
 8003d46:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003d4a:	432c      	orrs	r4, r5
 8003d4c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8003d50:	e7bd      	b.n	8003cce <USB_EP0StartXfer+0xb2>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d52:	780b      	ldrb	r3, [r1, #0]
 8003d54:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d58:	690a      	ldr	r2, [r1, #16]
 8003d5a:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
 8003d5e:	e7c2      	b.n	8003ce6 <USB_EP0StartXfer+0xca>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d60:	780b      	ldrb	r3, [r1, #0]
 8003d62:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d66:	68ca      	ldr	r2, [r1, #12]
 8003d68:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
 8003d6c:	e786      	b.n	8003c7c <USB_EP0StartXfer+0x60>
 8003d6e:	bf00      	nop
 8003d70:	fff80000 	.word	0xfff80000
 8003d74:	e007ffff 	.word	0xe007ffff

08003d78 <USB_WritePacket>:
{
 8003d78:	b470      	push	{r4, r5, r6}
 8003d7a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0)
 8003d7e:	b964      	cbnz	r4, 8003d9a <USB_WritePacket+0x22>
    count32b =  (len + 3) / 4;
 8003d80:	3303      	adds	r3, #3
 8003d82:	109e      	asrs	r6, r3, #2
    for (i = 0; i < count32b; i++, src += 4)
 8003d84:	e007      	b.n	8003d96 <USB_WritePacket+0x1e>
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003d86:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d92:	601d      	str	r5, [r3, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8003d94:	3401      	adds	r4, #1
 8003d96:	42b4      	cmp	r4, r6
 8003d98:	d3f5      	bcc.n	8003d86 <USB_WritePacket+0xe>
}
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	bc70      	pop	{r4, r5, r6}
 8003d9e:	4770      	bx	lr

08003da0 <USB_EPStartXfer>:
{
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	b082      	sub	sp, #8
  if (ep->is_in == 1)
 8003da4:	784b      	ldrb	r3, [r1, #1]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d03c      	beq.n	8003e24 <USB_EPStartXfer+0x84>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003daa:	780b      	ldrb	r3, [r1, #0]
 8003dac:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003db0:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8003db4:	4c8f      	ldr	r4, [pc, #572]	; (8003ff4 <USB_EPStartXfer+0x254>)
 8003db6:	402c      	ands	r4, r5
 8003db8:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dbc:	780b      	ldrb	r3, [r1, #0]
 8003dbe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003dc2:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8003dc6:	4c8c      	ldr	r4, [pc, #560]	; (8003ff8 <USB_EPStartXfer+0x258>)
 8003dc8:	402c      	ands	r4, r5
 8003dca:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (ep->xfer_len == 0)
 8003dce:	694b      	ldr	r3, [r1, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 80d0 	bne.w	8003f76 <USB_EPStartXfer+0x1d6>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dd6:	780b      	ldrb	r3, [r1, #0]
 8003dd8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003ddc:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003de0:	688d      	ldr	r5, [r1, #8]
 8003de2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003de6:	432c      	orrs	r4, r5
 8003de8:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8003dec:	780b      	ldrb	r3, [r1, #0]
 8003dee:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003df2:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003df6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003dfa:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    if (dma == 1)
 8003dfe:	2a01      	cmp	r2, #1
 8003e00:	f000 80d8 	beq.w	8003fb4 <USB_EPStartXfer+0x214>
    if (ep->type == EP_TYPE_ISOC)
 8003e04:	78cb      	ldrb	r3, [r1, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	f000 80db 	beq.w	8003fc2 <USB_EPStartXfer+0x222>
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e0c:	780b      	ldrb	r3, [r1, #0]
 8003e0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003e12:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003e16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003e1e:	2000      	movs	r0, #0
 8003e20:	b002      	add	sp, #8
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0)
 8003e24:	694b      	ldr	r3, [r1, #20]
 8003e26:	bb5b      	cbnz	r3, 8003e80 <USB_EPStartXfer+0xe0>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e28:	780b      	ldrb	r3, [r1, #0]
 8003e2a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e2e:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003e32:	4c71      	ldr	r4, [pc, #452]	; (8003ff8 <USB_EPStartXfer+0x258>)
 8003e34:	402c      	ands	r4, r5
 8003e36:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003e3a:	780b      	ldrb	r3, [r1, #0]
 8003e3c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e40:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003e44:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e48:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e4c:	780b      	ldrb	r3, [r1, #0]
 8003e4e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e52:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003e56:	4c67      	ldr	r4, [pc, #412]	; (8003ff4 <USB_EPStartXfer+0x254>)
 8003e58:	402c      	ands	r4, r5
 8003e5a:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    if (dma == 1)
 8003e5e:	2a01      	cmp	r2, #1
 8003e60:	d052      	beq.n	8003f08 <USB_EPStartXfer+0x168>
      if (ep->type != EP_TYPE_ISOC)
 8003e62:	78cb      	ldrb	r3, [r1, #3]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d055      	beq.n	8003f14 <USB_EPStartXfer+0x174>
        if (ep->xfer_len > 0)
 8003e68:	694b      	ldr	r3, [r1, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d052      	beq.n	8003f14 <USB_EPStartXfer+0x174>
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8003e6e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003e72:	780e      	ldrb	r6, [r1, #0]
 8003e74:	2401      	movs	r4, #1
 8003e76:	40b4      	lsls	r4, r6
 8003e78:	4323      	orrs	r3, r4
 8003e7a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003e7e:	e049      	b.n	8003f14 <USB_EPStartXfer+0x174>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e80:	780b      	ldrb	r3, [r1, #0]
 8003e82:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e86:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003e8a:	4c5a      	ldr	r4, [pc, #360]	; (8003ff4 <USB_EPStartXfer+0x254>)
 8003e8c:	402c      	ands	r4, r5
 8003e8e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e92:	780b      	ldrb	r3, [r1, #0]
 8003e94:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e98:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003e9c:	4c56      	ldr	r4, [pc, #344]	; (8003ff8 <USB_EPStartXfer+0x258>)
 8003e9e:	402c      	ands	r4, r5
 8003ea0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8003ea4:	780c      	ldrb	r4, [r1, #0]
 8003ea6:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003eaa:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003eae:	694b      	ldr	r3, [r1, #20]
 8003eb0:	688e      	ldr	r6, [r1, #8]
 8003eb2:	4433      	add	r3, r6
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	fbb3 f3f6 	udiv	r3, r3, r6
 8003eba:	4e50      	ldr	r6, [pc, #320]	; (8003ffc <USB_EPStartXfer+0x25c>)
 8003ebc:	ea06 43c3 	and.w	r3, r6, r3, lsl #19
 8003ec0:	432b      	orrs	r3, r5
 8003ec2:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ec6:	780b      	ldrb	r3, [r1, #0]
 8003ec8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003ecc:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003ed0:	694d      	ldr	r5, [r1, #20]
 8003ed2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003ed6:	432c      	orrs	r4, r5
 8003ed8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8003edc:	78cb      	ldrb	r3, [r1, #3]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d1bd      	bne.n	8003e5e <USB_EPStartXfer+0xbe>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ee2:	780b      	ldrb	r3, [r1, #0]
 8003ee4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003ee8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003eec:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8003ef0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8003ef4:	780b      	ldrb	r3, [r1, #0]
 8003ef6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003efa:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003efe:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003f02:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8003f06:	e7aa      	b.n	8003e5e <USB_EPStartXfer+0xbe>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f08:	780b      	ldrb	r3, [r1, #0]
 8003f0a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003f0e:	690c      	ldr	r4, [r1, #16]
 8003f10:	f8c3 4914 	str.w	r4, [r3, #2324]	; 0x914
    if (ep->type == EP_TYPE_ISOC)
 8003f14:	78cb      	ldrb	r3, [r1, #3]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d014      	beq.n	8003f44 <USB_EPStartXfer+0x1a4>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f1a:	780b      	ldrb	r3, [r1, #0]
 8003f1c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003f20:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003f24:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003f28:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8003f2c:	78cb      	ldrb	r3, [r1, #3]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	f47f af75 	bne.w	8003e1e <USB_EPStartXfer+0x7e>
 8003f34:	4614      	mov	r4, r2
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8003f36:	8a8b      	ldrh	r3, [r1, #20]
 8003f38:	780a      	ldrb	r2, [r1, #0]
 8003f3a:	68c9      	ldr	r1, [r1, #12]
 8003f3c:	9400      	str	r4, [sp, #0]
 8003f3e:	f7ff ff1b 	bl	8003d78 <USB_WritePacket>
 8003f42:	e76c      	b.n	8003e1e <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8003f44:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003f48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f4c:	d109      	bne.n	8003f62 <USB_EPStartXfer+0x1c2>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f4e:	780b      	ldrb	r3, [r1, #0]
 8003f50:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003f54:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003f58:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003f5c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8003f60:	e7db      	b.n	8003f1a <USB_EPStartXfer+0x17a>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f62:	780b      	ldrb	r3, [r1, #0]
 8003f64:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003f68:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003f6c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003f70:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8003f74:	e7d1      	b.n	8003f1a <USB_EPStartXfer+0x17a>
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8003f76:	688c      	ldr	r4, [r1, #8]
 8003f78:	4423      	add	r3, r4
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8003f80:	780c      	ldrb	r4, [r1, #0]
 8003f82:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003f86:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	; 0xb10
 8003f8a:	4e1c      	ldr	r6, [pc, #112]	; (8003ffc <USB_EPStartXfer+0x25c>)
 8003f8c:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8003f90:	4335      	orrs	r5, r6
 8003f92:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003f96:	780c      	ldrb	r4, [r1, #0]
 8003f98:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003f9c:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8003fa0:	688d      	ldr	r5, [r1, #8]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	fb05 f503 	mul.w	r5, r5, r3
 8003fa8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003fac:	4335      	orrs	r5, r6
 8003fae:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
 8003fb2:	e724      	b.n	8003dfe <USB_EPStartXfer+0x5e>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003fb4:	780b      	ldrb	r3, [r1, #0]
 8003fb6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003fba:	68ca      	ldr	r2, [r1, #12]
 8003fbc:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
 8003fc0:	e720      	b.n	8003e04 <USB_EPStartXfer+0x64>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8003fc2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003fc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fca:	d109      	bne.n	8003fe0 <USB_EPStartXfer+0x240>
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fcc:	780b      	ldrb	r3, [r1, #0]
 8003fce:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003fd2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003fd6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fda:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003fde:	e715      	b.n	8003e0c <USB_EPStartXfer+0x6c>
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003fe0:	780b      	ldrb	r3, [r1, #0]
 8003fe2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003fe6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fee:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003ff2:	e70b      	b.n	8003e0c <USB_EPStartXfer+0x6c>
 8003ff4:	fff80000 	.word	0xfff80000
 8003ff8:	e007ffff 	.word	0xe007ffff
 8003ffc:	1ff80000 	.word	0x1ff80000

08004000 <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 8004000:	3203      	adds	r2, #3
 8004002:	1092      	asrs	r2, r2, #2
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004004:	2300      	movs	r3, #0
 8004006:	4293      	cmp	r3, r2
 8004008:	d20c      	bcs.n	8004024 <USB_ReadPacket+0x24>
{
 800400a:	b410      	push	{r4}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800400c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8004010:	6824      	ldr	r4, [r4, #0]
 8004012:	f841 4b04 	str.w	r4, [r1], #4
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004016:	3301      	adds	r3, #1
 8004018:	4293      	cmp	r3, r2
 800401a:	d3f7      	bcc.n	800400c <USB_ReadPacket+0xc>
}
 800401c:	4608      	mov	r0, r1
 800401e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	4608      	mov	r0, r1
 8004026:	4770      	bx	lr

08004028 <USB_EPSetStall>:
  if (ep->is_in == 1)
 8004028:	784b      	ldrb	r3, [r1, #1]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d017      	beq.n	800405e <USB_EPSetStall+0x36>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800402e:	780b      	ldrb	r3, [r1, #0]
 8004030:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004034:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004038:	2a00      	cmp	r2, #0
 800403a:	db05      	blt.n	8004048 <USB_EPSetStall+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800403c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004040:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004044:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004048:	780b      	ldrb	r3, [r1, #0]
 800404a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800404e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004056:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800405e:	780b      	ldrb	r3, [r1, #0]
 8004060:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004064:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004068:	2a00      	cmp	r2, #0
 800406a:	db05      	blt.n	8004078 <USB_EPSetStall+0x50>
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800406c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004070:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004074:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004078:	780b      	ldrb	r3, [r1, #0]
 800407a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800407e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004086:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800408a:	e7e6      	b.n	800405a <USB_EPSetStall+0x32>

0800408c <USB_EPClearStall>:
  if (ep->is_in == 1)
 800408c:	784b      	ldrb	r3, [r1, #1]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d00f      	beq.n	80040b2 <USB_EPClearStall+0x26>
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004092:	780b      	ldrb	r3, [r1, #0]
 8004094:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004098:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800409c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040a0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80040a4:	78cb      	ldrb	r3, [r1, #3]
 80040a6:	3b02      	subs	r3, #2
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d919      	bls.n	80040e2 <USB_EPClearStall+0x56>
}
 80040ae:	2000      	movs	r0, #0
 80040b0:	4770      	bx	lr
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040b2:	780b      	ldrb	r3, [r1, #0]
 80040b4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80040b8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80040bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040c0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80040c4:	78cb      	ldrb	r3, [r1, #3]
 80040c6:	3b02      	subs	r3, #2
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d8ef      	bhi.n	80040ae <USB_EPClearStall+0x22>
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040ce:	780b      	ldrb	r3, [r1, #0]
 80040d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80040e0:	e7e5      	b.n	80040ae <USB_EPClearStall+0x22>
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040e2:	780b      	ldrb	r3, [r1, #0]
 80040e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80040f4:	e7db      	b.n	80040ae <USB_EPClearStall+0x22>

080040f6 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80040f6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80040fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040fe:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8004102:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004106:	0109      	lsls	r1, r1, #4
 8004108:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800410c:	430b      	orrs	r3, r1
 800410e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8004112:	2000      	movs	r0, #0
 8004114:	4770      	bx	lr

08004116 <USB_DevConnect>:
{
 8004116:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004118:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8004124:	2003      	movs	r0, #3
 8004126:	f7fc fa21 	bl	800056c <HAL_Delay>
}
 800412a:	2000      	movs	r0, #0
 800412c:	bd08      	pop	{r3, pc}

0800412e <USB_DevDisconnect>:
{
 800412e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004130:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800413c:	2003      	movs	r0, #3
 800413e:	f7fc fa15 	bl	800056c <HAL_Delay>
}
 8004142:	2000      	movs	r0, #0
 8004144:	bd08      	pop	{r3, pc}

08004146 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8004146:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8004148:	6980      	ldr	r0, [r0, #24]
}
 800414a:	4010      	ands	r0, r2
 800414c:	4770      	bx	lr

0800414e <USB_ReadDevAllOutEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 800414e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004152:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004156:	69c0      	ldr	r0, [r0, #28]
 8004158:	4018      	ands	r0, r3
}
 800415a:	0c00      	lsrs	r0, r0, #16
 800415c:	4770      	bx	lr

0800415e <USB_ReadDevAllInEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 800415e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004162:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8004166:	69c0      	ldr	r0, [r0, #28]
 8004168:	4018      	ands	r0, r3
}
 800416a:	b280      	uxth	r0, r0
 800416c:	4770      	bx	lr

0800416e <USB_ReadDevOutEPInterrupt>:
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800416e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004172:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  v &= USBx_DEVICE->DOEPMSK;
 8004176:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800417a:	6940      	ldr	r0, [r0, #20]
}
 800417c:	4010      	ands	r0, r2
 800417e:	4770      	bx	lr

08004180 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004180:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004184:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
 8004188:	40cb      	lsrs	r3, r1
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4313      	orrs	r3, r2
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004190:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004194:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
}
 8004198:	4018      	ands	r0, r3
 800419a:	4770      	bx	lr

0800419c <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 800419c:	6940      	ldr	r0, [r0, #20]
}
 800419e:	f000 0001 	and.w	r0, r0, #1
 80041a2:	4770      	bx	lr

080041a4 <USB_ActivateSetup>:
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041a4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <USB_ActivateSetup+0x34>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80041b0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	f002 0206 	and.w	r2, r2, #6
 80041ba:	2a04      	cmp	r2, #4
 80041bc:	d005      	beq.n	80041ca <USB_ActivateSetup+0x26>
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	605a      	str	r2, [r3, #4]
}
 80041c6:	2000      	movs	r0, #0
 80041c8:	4770      	bx	lr
    USBx_INEP(0)->DIEPCTL |= 3;
 80041ca:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80041ce:	f042 0203 	orr.w	r2, r2, #3
 80041d2:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80041d6:	e7f2      	b.n	80041be <USB_ActivateSetup+0x1a>
 80041d8:	fffff800 	.word	0xfffff800

080041dc <USB_EP0_OutStart>:
{
 80041dc:	b410      	push	{r4}
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80041de:	2400      	movs	r4, #0
 80041e0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80041e4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80041e8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80041ec:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80041f0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80041f4:	f044 0418 	orr.w	r4, r4, #24
 80041f8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041fc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004200:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004204:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1)
 8004208:	2901      	cmp	r1, #1
 800420a:	d003      	beq.n	8004214 <USB_EP0_OutStart+0x38>
}
 800420c:	2000      	movs	r0, #0
 800420e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004212:	4770      	bx	lr
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 8004214:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8004218:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800421c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004220:	e7f4      	b.n	800420c <USB_EP0_OutStart+0x30>
	...

08004224 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <FATFS_LinkDriverEx+0x44>)
 8004226:	7a5b      	ldrb	r3, [r3, #9]
 8004228:	b9db      	cbnz	r3, 8004262 <FATFS_LinkDriverEx+0x3e>
{
 800422a:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <FATFS_LinkDriverEx+0x44>)
 800422e:	7a5d      	ldrb	r5, [r3, #9]
 8004230:	b2ed      	uxtb	r5, r5
 8004232:	2400      	movs	r4, #0
 8004234:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004236:	7a5d      	ldrb	r5, [r3, #9]
 8004238:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800423c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800423e:	7a58      	ldrb	r0, [r3, #9]
 8004240:	4418      	add	r0, r3
 8004242:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004244:	7a5a      	ldrb	r2, [r3, #9]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	1c50      	adds	r0, r2, #1
 800424a:	b2c0      	uxtb	r0, r0
 800424c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800424e:	3230      	adds	r2, #48	; 0x30
 8004250:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004252:	233a      	movs	r3, #58	; 0x3a
 8004254:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004256:	232f      	movs	r3, #47	; 0x2f
 8004258:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800425a:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 800425c:	4620      	mov	r0, r4
  }

  return ret;
}
 800425e:	bc30      	pop	{r4, r5}
 8004260:	4770      	bx	lr
  uint8_t ret = 1;
 8004262:	2001      	movs	r0, #1
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	200004e0 	.word	0x200004e0

0800426c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800426c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	f7ff ffd8 	bl	8004224 <FATFS_LinkDriverEx>
}
 8004274:	bd08      	pop	{r3, pc}

08004276 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004276:	2884      	cmp	r0, #132	; 0x84
 8004278:	d001      	beq.n	800427e <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800427a:	3003      	adds	r0, #3
 800427c:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800427e:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004280:	4770      	bx	lr

08004282 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004282:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8004286:	3000      	adds	r0, #0
 8004288:	bf18      	it	ne
 800428a:	2001      	movne	r0, #1
 800428c:	4770      	bx	lr

0800428e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800428e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004290:	f001 f8be 	bl	8005410 <vTaskStartScheduler>
  
  return osOK;
}
 8004294:	2000      	movs	r0, #0
 8004296:	bd08      	pop	{r3, pc}

08004298 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004298:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 800429a:	f7ff fff2 	bl	8004282 <inHandlerMode>
 800429e:	b910      	cbnz	r0, 80042a6 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80042a0:	f001 f900 	bl	80054a4 <xTaskGetTickCount>
  }
}
 80042a4:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80042a6:	f001 f903 	bl	80054b0 <xTaskGetTickCountFromISR>
 80042aa:	bd08      	pop	{r3, pc}

080042ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b085      	sub	sp, #20
 80042b0:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b2:	6844      	ldr	r4, [r0, #4]
 80042b4:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042b6:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80042bc:	f7ff ffdb 	bl	8004276 <makeFreeRtosPriority>
 80042c0:	ab03      	add	r3, sp, #12
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	9000      	str	r0, [sp, #0]
 80042c6:	463b      	mov	r3, r7
 80042c8:	b2b2      	uxth	r2, r6
 80042ca:	4629      	mov	r1, r5
 80042cc:	4620      	mov	r0, r4
 80042ce:	f001 f86d 	bl	80053ac <xTaskCreate>
 80042d2:	2801      	cmp	r0, #1
 80042d4:	d102      	bne.n	80042dc <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042d6:	9803      	ldr	r0, [sp, #12]
}
 80042d8:	b005      	add	sp, #20
 80042da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 80042dc:	2000      	movs	r0, #0
 80042de:	e7fb      	b.n	80042d8 <osThreadCreate+0x2c>

080042e0 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 80042e0:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80042e2:	f001 fb7f 	bl	80059e4 <xTaskGetCurrentTaskHandle>
#else
	return NULL;
#endif
}
 80042e6:	bd08      	pop	{r3, pc}

080042e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042e8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042ea:	4603      	mov	r3, r0
 80042ec:	b900      	cbnz	r0, 80042f0 <osDelay+0x8>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 f9f7 	bl	80056e4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042f6:	2000      	movs	r0, #0
 80042f8:	bd08      	pop	{r3, pc}

080042fa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80042fa:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80042fc:	2001      	movs	r0, #1
 80042fe:	f000 fd67 	bl	8004dd0 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8004302:	bd08      	pop	{r3, pc}

08004304 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004304:	b530      	push	{r4, r5, lr}
 8004306:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004308:	2300      	movs	r3, #0
 800430a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800430c:	b360      	cbz	r0, 8004368 <osMutexWait+0x64>
 800430e:	460c      	mov	r4, r1
 8004310:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8004312:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004316:	d00d      	beq.n	8004334 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8004318:	b901      	cbnz	r1, 800431c <osMutexWait+0x18>
  ticks = 0;
 800431a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800431c:	f7ff ffb1 	bl	8004282 <inHandlerMode>
 8004320:	b1b8      	cbz	r0, 8004352 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004322:	aa01      	add	r2, sp, #4
 8004324:	2100      	movs	r1, #0
 8004326:	4628      	mov	r0, r5
 8004328:	f000 fea2 	bl	8005070 <xQueueReceiveFromISR>
 800432c:	2801      	cmp	r0, #1
 800432e:	d004      	beq.n	800433a <osMutexWait+0x36>
      return osErrorOS;
 8004330:	20ff      	movs	r0, #255	; 0xff
 8004332:	e017      	b.n	8004364 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8004334:	f04f 34ff 	mov.w	r4, #4294967295
 8004338:	e7f0      	b.n	800431c <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	b1b3      	cbz	r3, 800436c <osMutexWait+0x68>
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <osMutexWait+0x70>)
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800434e:	2000      	movs	r0, #0
 8004350:	e008      	b.n	8004364 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004352:	2300      	movs	r3, #0
 8004354:	4622      	mov	r2, r4
 8004356:	4619      	mov	r1, r3
 8004358:	4628      	mov	r0, r5
 800435a:	f000 fdab 	bl	8004eb4 <xQueueGenericReceive>
 800435e:	2801      	cmp	r0, #1
 8004360:	d006      	beq.n	8004370 <osMutexWait+0x6c>
    return osErrorOS;
 8004362:	20ff      	movs	r0, #255	; 0xff
}
 8004364:	b003      	add	sp, #12
 8004366:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8004368:	2080      	movs	r0, #128	; 0x80
 800436a:	e7fb      	b.n	8004364 <osMutexWait+0x60>
  return osOK;
 800436c:	2000      	movs	r0, #0
 800436e:	e7f9      	b.n	8004364 <osMutexWait+0x60>
 8004370:	2000      	movs	r0, #0
 8004372:	e7f7      	b.n	8004364 <osMutexWait+0x60>
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004378:	b510      	push	{r4, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8004382:	f7ff ff7e 	bl	8004282 <inHandlerMode>
 8004386:	b1a0      	cbz	r0, 80043b2 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004388:	a901      	add	r1, sp, #4
 800438a:	4620      	mov	r0, r4
 800438c:	f000 fd2b 	bl	8004de6 <xQueueGiveFromISR>
 8004390:	2801      	cmp	r0, #1
 8004392:	d002      	beq.n	800439a <osMutexRelease+0x22>
      return osErrorOS;
 8004394:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8004396:	b002      	add	sp, #8
 8004398:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	b1ab      	cbz	r3, 80043ca <osMutexRelease+0x52>
 800439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <osMutexRelease+0x58>)
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80043ae:	2000      	movs	r0, #0
 80043b0:	e7f1      	b.n	8004396 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80043b2:	2300      	movs	r3, #0
 80043b4:	461a      	mov	r2, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fc31 	bl	8004c20 <xQueueGenericSend>
 80043be:	2801      	cmp	r0, #1
 80043c0:	d001      	beq.n	80043c6 <osMutexRelease+0x4e>
    result = osErrorOS;
 80043c2:	20ff      	movs	r0, #255	; 0xff
 80043c4:	e7e7      	b.n	8004396 <osMutexRelease+0x1e>
  osStatus result = osOK;
 80043c6:	2000      	movs	r0, #0
 80043c8:	e7e5      	b.n	8004396 <osMutexRelease+0x1e>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e7e3      	b.n	8004396 <osMutexRelease+0x1e>
 80043ce:	bf00      	nop
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80043d4:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80043d6:	2901      	cmp	r1, #1
 80043d8:	d10d      	bne.n	80043f6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80043da:	2203      	movs	r2, #3
 80043dc:	2100      	movs	r1, #0
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 fbf8 	bl	8004bd4 <xQueueGenericCreate>
 80043e4:	4604      	mov	r4, r0
 80043e6:	b120      	cbz	r0, 80043f2 <osSemaphoreCreate+0x1e>
 80043e8:	2300      	movs	r3, #0
 80043ea:	461a      	mov	r2, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	f000 fc17 	bl	8004c20 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80043f2:	4620      	mov	r0, r4
 80043f4:	bd10      	pop	{r4, pc}
    return NULL;
 80043f6:	2400      	movs	r4, #0
 80043f8:	e7fb      	b.n	80043f2 <osSemaphoreCreate+0x1e>

080043fa <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80043fa:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80043fc:	f001 faf8 	bl	80059f0 <xTaskGetSchedulerState>
 8004400:	2801      	cmp	r0, #1
 8004402:	d001      	beq.n	8004408 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004404:	f000 f91e 	bl	8004644 <xPortSysTickHandler>
 8004408:	bd08      	pop	{r3, pc}

0800440a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440a:	f100 0308 	add.w	r3, r0, #8
 800440e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004416:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004418:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	6003      	str	r3, [r0, #0]
 800441e:	4770      	bx	lr

08004420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	6103      	str	r3, [r0, #16]
 8004424:	4770      	bx	lr

08004426 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004426:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004428:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004432:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004434:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004436:	6803      	ldr	r3, [r0, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	6003      	str	r3, [r0, #0]
 800443c:	4770      	bx	lr

0800443e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800443e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004440:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004442:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004446:	d002      	beq.n	800444e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004448:	f100 0208 	add.w	r2, r0, #8
 800444c:	e002      	b.n	8004454 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800444e:	6902      	ldr	r2, [r0, #16]
 8004450:	e004      	b.n	800445c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004452:	461a      	mov	r2, r3
 8004454:	6853      	ldr	r3, [r2, #4]
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	42a5      	cmp	r5, r4
 800445a:	d2fa      	bcs.n	8004452 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800445c:	6853      	ldr	r3, [r2, #4]
 800445e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004460:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004462:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004464:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004466:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004468:	6803      	ldr	r3, [r0, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	6003      	str	r3, [r0, #0]
}
 800446e:	bc30      	pop	{r4, r5}
 8004470:	4770      	bx	lr

08004472 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004472:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004474:	6842      	ldr	r2, [r0, #4]
 8004476:	6881      	ldr	r1, [r0, #8]
 8004478:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800447a:	6882      	ldr	r2, [r0, #8]
 800447c:	6841      	ldr	r1, [r0, #4]
 800447e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	4290      	cmp	r0, r2
 8004484:	d005      	beq.n	8004492 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004486:	2200      	movs	r2, #0
 8004488:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	3801      	subs	r0, #1
 800448e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004490:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004492:	6882      	ldr	r2, [r0, #8]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	e7f6      	b.n	8004486 <uxListRemove+0x14>

08004498 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <prvTaskExitError+0x38>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d00a      	beq.n	80044b8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	b672      	cpsid	i
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	b662      	cpsie	i
 80044b6:	e7fe      	b.n	80044b6 <prvTaskExitError+0x1e>
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	b672      	cpsid	i
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	b662      	cpsie	i
 80044cc:	e7fe      	b.n	80044cc <prvTaskExitError+0x34>
 80044ce:	bf00      	nop
 80044d0:	20000004 	.word	0x20000004

080044d4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044d4:	4806      	ldr	r0, [pc, #24]	; (80044f0 <prvPortStartFirstTask+0x1c>)
 80044d6:	6800      	ldr	r0, [r0, #0]
 80044d8:	6800      	ldr	r0, [r0, #0]
 80044da:	f380 8808 	msr	MSP, r0
 80044de:	b662      	cpsie	i
 80044e0:	b661      	cpsie	f
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	df00      	svc	0
 80044ec:	bf00      	nop
 80044ee:	0000      	.short	0x0000
 80044f0:	e000ed08 	.word	0xe000ed08

080044f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004504 <vPortEnableVFP+0x10>
 80044f8:	6801      	ldr	r1, [r0, #0]
 80044fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044fe:	6001      	str	r1, [r0, #0]
 8004500:	4770      	bx	lr
 8004502:	0000      	.short	0x0000
 8004504:	e000ed88 	.word	0xe000ed88

08004508 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800450c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004510:	f021 0101 	bic.w	r1, r1, #1
 8004514:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <pxPortInitialiseStack+0x28>)
 800451a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800451e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004522:	f06f 0302 	mvn.w	r3, #2
 8004526:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800452a:	3844      	subs	r0, #68	; 0x44
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	08004499 	.word	0x08004499
	...

08004540 <SVC_Handler>:
	__asm volatile (
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pxCurrentTCBConst2>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	6808      	ldr	r0, [r1, #0]
 8004546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	f380 8809 	msr	PSP, r0
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	4770      	bx	lr
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst2>:
 8004560:	2000f50c 	.word	0x2000f50c

08004564 <vPortEnterCritical>:
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	b672      	cpsid	i
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	b662      	cpsie	i
	uxCriticalNesting++;
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <vPortEnterCritical+0x44>)
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10f      	bne.n	80045a4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <vPortEnterCritical+0x48>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f013 0fff 	tst.w	r3, #255	; 0xff
 800458c:	d00a      	beq.n	80045a4 <vPortEnterCritical+0x40>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	e7fe      	b.n	80045a2 <vPortEnterCritical+0x3e>
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000004 	.word	0x20000004
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <vPortExitCritical+0x2c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b953      	cbnz	r3, 80045cc <vPortExitCritical+0x1c>
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	b672      	cpsid	i
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	b662      	cpsie	i
 80045ca:	e7fe      	b.n	80045ca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4a03      	ldr	r2, [pc, #12]	; (80045dc <vPortExitCritical+0x2c>)
 80045d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045d2:	b90b      	cbnz	r3, 80045d8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000004 	.word	0x20000004

080045e0 <PendSV_Handler>:
	__asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004604:	b672      	cpsid	i
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	b662      	cpsie	i
 8004614:	f001 f8d2 	bl	80057bc <vTaskSwitchContext>
 8004618:	f04f 0000 	mov.w	r0, #0
 800461c:	f380 8811 	msr	BASEPRI, r0
 8004620:	bc08      	pop	{r3}
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f01e 0f10 	tst.w	lr, #16
 800462e:	bf08      	it	eq
 8004630:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004634:	f380 8809 	msr	PSP, r0
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <pxCurrentTCBConst>:
 8004640:	2000f50c 	.word	0x2000f50c

08004644 <xPortSysTickHandler>:
{
 8004644:	b508      	push	{r3, lr}
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	b672      	cpsid	i
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800465a:	f000 ff31 	bl	80054c0 <xTaskIncrementTick>
 800465e:	b118      	cbz	r0, 8004668 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <xPortSysTickHandler+0x2c>)
 8004666:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004668:	2300      	movs	r3, #0
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	bd08      	pop	{r3, pc}
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <vPortSetupTimerInterrupt+0x1c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <vPortSetupTimerInterrupt+0x20>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	3b01      	subs	r3, #1
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <vPortSetupTimerInterrupt+0x24>)
 8004684:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004686:	2207      	movs	r2, #7
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <vPortSetupTimerInterrupt+0x28>)
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	200000b0 	.word	0x200000b0
 8004694:	10624dd3 	.word	0x10624dd3
 8004698:	e000e014 	.word	0xe000e014
 800469c:	e000e010 	.word	0xe000e010

080046a0 <xPortStartScheduler>:
{
 80046a0:	b500      	push	{lr}
 80046a2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <xPortStartScheduler+0x90>)
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046ac:	22ff      	movs	r2, #255	; 0xff
 80046ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <xPortStartScheduler+0x94>)
 80046c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046c4:	2207      	movs	r2, #7
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <xPortStartScheduler+0x98>)
 80046c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ca:	e009      	b.n	80046e0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <xPortStartScheduler+0x98>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046e8:	d1f0      	bne.n	80046cc <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <xPortStartScheduler+0x98>)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046f4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <xPortStartScheduler+0x90>)
 80046fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <xPortStartScheduler+0x9c>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004706:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800470e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004710:	f7ff ffb0 	bl	8004674 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004714:	2200      	movs	r2, #0
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <xPortStartScheduler+0xa0>)
 8004718:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800471a:	f7ff feeb 	bl	80044f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <xPortStartScheduler+0xa4>)
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004726:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004728:	f7ff fed4 	bl	80044d4 <prvPortStartFirstTask>
	prvTaskExitError();
 800472c:	f7ff feb4 	bl	8004498 <prvTaskExitError>
 8004730:	e000e400 	.word	0xe000e400
 8004734:	200004ec 	.word	0x200004ec
 8004738:	200004f0 	.word	0x200004f0
 800473c:	e000ed20 	.word	0xe000ed20
 8004740:	20000004 	.word	0x20000004
 8004744:	e000ef34 	.word	0xe000ef34

08004748 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004748:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800474c:	2b0f      	cmp	r3, #15
 800474e:	d911      	bls.n	8004774 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <vPortValidateInterruptPriority+0x54>)
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <vPortValidateInterruptPriority+0x58>)
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	4293      	cmp	r3, r2
 800475c:	d20a      	bcs.n	8004774 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	b672      	cpsid	i
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	b662      	cpsie	i
 8004772:	e7fe      	b.n	8004772 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <vPortValidateInterruptPriority+0x5c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800477c:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <vPortValidateInterruptPriority+0x60>)
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4293      	cmp	r3, r2
 8004782:	d90a      	bls.n	800479a <vPortValidateInterruptPriority+0x52>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	b672      	cpsid	i
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	b662      	cpsie	i
 8004798:	e7fe      	b.n	8004798 <vPortValidateInterruptPriority+0x50>
 800479a:	4770      	bx	lr
 800479c:	e000e3f0 	.word	0xe000e3f0
 80047a0:	200004ec 	.word	0x200004ec
 80047a4:	e000ed0c 	.word	0xe000ed0c
 80047a8:	200004f0 	.word	0x200004f0

080047ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047ac:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047ae:	f012 0f07 	tst.w	r2, #7
 80047b2:	d01e      	beq.n	80047f2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ba:	f5c1 4370 	rsb	r3, r1, #61440	; 0xf000
 80047be:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c2:	480e      	ldr	r0, [pc, #56]	; (80047fc <prvHeapInit+0x50>)
 80047c4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047c6:	2100      	movs	r1, #0
 80047c8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047ca:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80047cc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047ce:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <prvHeapInit+0x54>)
 80047d4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80047d6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047d8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047da:	1a99      	subs	r1, r3, r2
 80047dc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047de:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <prvHeapInit+0x58>)
 80047e2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <prvHeapInit+0x5c>)
 80047e6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047ec:	4b07      	ldr	r3, [pc, #28]	; (800480c <prvHeapInit+0x60>)
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80047f6:	e7e4      	b.n	80047c2 <prvHeapInit+0x16>
 80047f8:	200004f8 	.word	0x200004f8
 80047fc:	2000f504 	.word	0x2000f504
 8004800:	200004f4 	.word	0x200004f4
 8004804:	2000f500 	.word	0x2000f500
 8004808:	2000f4fc 	.word	0x2000f4fc
 800480c:	2000f4f8 	.word	0x2000f4f8

08004810 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004810:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <prvInsertBlockIntoFreeList+0x50>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4282      	cmp	r2, r0
 8004818:	d31b      	bcc.n	8004852 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	185c      	adds	r4, r3, r1
 800481e:	42a0      	cmp	r0, r4
 8004820:	d103      	bne.n	800482a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004822:	6840      	ldr	r0, [r0, #4]
 8004824:	4401      	add	r1, r0
 8004826:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004828:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800482a:	6841      	ldr	r1, [r0, #4]
 800482c:	1844      	adds	r4, r0, r1
 800482e:	42a2      	cmp	r2, r4
 8004830:	d113      	bne.n	800485a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004832:	4c0c      	ldr	r4, [pc, #48]	; (8004864 <prvInsertBlockIntoFreeList+0x54>)
 8004834:	6824      	ldr	r4, [r4, #0]
 8004836:	42a2      	cmp	r2, r4
 8004838:	d00d      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800483a:	6852      	ldr	r2, [r2, #4]
 800483c:	4411      	add	r1, r2
 800483e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004846:	4298      	cmp	r0, r3
 8004848:	d000      	beq.n	800484c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800484a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004850:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004852:	4613      	mov	r3, r2
 8004854:	e7de      	b.n	8004814 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004856:	6004      	str	r4, [r0, #0]
 8004858:	e7f5      	b.n	8004846 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800485a:	6002      	str	r2, [r0, #0]
 800485c:	e7f3      	b.n	8004846 <prvInsertBlockIntoFreeList+0x36>
 800485e:	bf00      	nop
 8004860:	2000f504 	.word	0x2000f504
 8004864:	200004f4 	.word	0x200004f4

08004868 <pvPortMalloc>:
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800486c:	f000 fe12 	bl	8005494 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004870:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <pvPortMalloc+0x100>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	b1cb      	cbz	r3, 80048aa <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004876:	4b3d      	ldr	r3, [pc, #244]	; (800496c <pvPortMalloc+0x104>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	421c      	tst	r4, r3
 800487c:	d169      	bne.n	8004952 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 800487e:	b1bc      	cbz	r4, 80048b0 <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8004880:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004882:	f014 0f07 	tst.w	r4, #7
 8004886:	d013      	beq.n	80048b0 <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004888:	f024 0407 	bic.w	r4, r4, #7
 800488c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800488e:	f004 0307 	and.w	r3, r4, #7
 8004892:	b16b      	cbz	r3, 80048b0 <pvPortMalloc+0x48>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	b672      	cpsid	i
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	b662      	cpsie	i
 80048a8:	e7fe      	b.n	80048a8 <pvPortMalloc+0x40>
			prvHeapInit();
 80048aa:	f7ff ff7f 	bl	80047ac <prvHeapInit>
 80048ae:	e7e2      	b.n	8004876 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048b0:	2c00      	cmp	r4, #0
 80048b2:	d050      	beq.n	8004956 <pvPortMalloc+0xee>
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <pvPortMalloc+0x108>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d84e      	bhi.n	800495a <pvPortMalloc+0xf2>
				pxBlock = xStart.pxNextFreeBlock;
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <pvPortMalloc+0x10c>)
 80048be:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c0:	e001      	b.n	80048c6 <pvPortMalloc+0x5e>
					pxPreviousBlock = pxBlock;
 80048c2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80048c4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c6:	686a      	ldr	r2, [r5, #4]
 80048c8:	4294      	cmp	r4, r2
 80048ca:	d902      	bls.n	80048d2 <pvPortMalloc+0x6a>
 80048cc:	682a      	ldr	r2, [r5, #0]
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d1f7      	bne.n	80048c2 <pvPortMalloc+0x5a>
				if( pxBlock != pxEnd )
 80048d2:	4a25      	ldr	r2, [pc, #148]	; (8004968 <pvPortMalloc+0x100>)
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	4295      	cmp	r5, r2
 80048d8:	d041      	beq.n	800495e <pvPortMalloc+0xf6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048da:	681e      	ldr	r6, [r3, #0]
 80048dc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048de:	682a      	ldr	r2, [r5, #0]
 80048e0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e2:	686b      	ldr	r3, [r5, #4]
 80048e4:	1b1b      	subs	r3, r3, r4
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d912      	bls.n	8004910 <pvPortMalloc+0xa8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048ea:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ec:	f010 0f07 	tst.w	r0, #7
 80048f0:	d00a      	beq.n	8004908 <pvPortMalloc+0xa0>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	b672      	cpsid	i
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	b662      	cpsie	i
 8004906:	e7fe      	b.n	8004906 <pvPortMalloc+0x9e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004908:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800490a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800490c:	f7ff ff80 	bl	8004810 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004910:	686a      	ldr	r2, [r5, #4]
 8004912:	4917      	ldr	r1, [pc, #92]	; (8004970 <pvPortMalloc+0x108>)
 8004914:	680b      	ldr	r3, [r1, #0]
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800491a:	4917      	ldr	r1, [pc, #92]	; (8004978 <pvPortMalloc+0x110>)
 800491c:	6809      	ldr	r1, [r1, #0]
 800491e:	428b      	cmp	r3, r1
 8004920:	d201      	bcs.n	8004926 <pvPortMalloc+0xbe>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004922:	4915      	ldr	r1, [pc, #84]	; (8004978 <pvPortMalloc+0x110>)
 8004924:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <pvPortMalloc+0x104>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4313      	orrs	r3, r2
 800492c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004932:	f000 fe57 	bl	80055e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004936:	f016 0f07 	tst.w	r6, #7
 800493a:	d012      	beq.n	8004962 <pvPortMalloc+0xfa>
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	b672      	cpsid	i
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	b662      	cpsie	i
 8004950:	e7fe      	b.n	8004950 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8004952:	2600      	movs	r6, #0
 8004954:	e7ed      	b.n	8004932 <pvPortMalloc+0xca>
 8004956:	2600      	movs	r6, #0
 8004958:	e7eb      	b.n	8004932 <pvPortMalloc+0xca>
 800495a:	2600      	movs	r6, #0
 800495c:	e7e9      	b.n	8004932 <pvPortMalloc+0xca>
 800495e:	2600      	movs	r6, #0
 8004960:	e7e7      	b.n	8004932 <pvPortMalloc+0xca>
}
 8004962:	4630      	mov	r0, r6
 8004964:	bd70      	pop	{r4, r5, r6, pc}
 8004966:	bf00      	nop
 8004968:	200004f4 	.word	0x200004f4
 800496c:	2000f4f8 	.word	0x2000f4f8
 8004970:	2000f4fc 	.word	0x2000f4fc
 8004974:	2000f504 	.word	0x2000f504
 8004978:	2000f500 	.word	0x2000f500

0800497c <vPortFree>:
	if( pv != NULL )
 800497c:	2800      	cmp	r0, #0
 800497e:	d034      	beq.n	80049ea <vPortFree+0x6e>
{
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004984:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004988:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800498c:	4917      	ldr	r1, [pc, #92]	; (80049ec <vPortFree+0x70>)
 800498e:	6809      	ldr	r1, [r1, #0]
 8004990:	420a      	tst	r2, r1
 8004992:	d10a      	bne.n	80049aa <vPortFree+0x2e>
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	b672      	cpsid	i
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	b662      	cpsie	i
 80049a8:	e7fe      	b.n	80049a8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049aa:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80049ae:	b150      	cbz	r0, 80049c6 <vPortFree+0x4a>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	b672      	cpsid	i
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	b662      	cpsie	i
 80049c4:	e7fe      	b.n	80049c4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c6:	ea22 0201 	bic.w	r2, r2, r1
 80049ca:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80049ce:	f000 fd61 	bl	8005494 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049d2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80049d6:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <vPortFree+0x74>)
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	440b      	add	r3, r1
 80049dc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff ff16 	bl	8004810 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80049e4:	f000 fdfe 	bl	80055e4 <xTaskResumeAll>
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	4770      	bx	lr
 80049ec:	2000f4f8 	.word	0x2000f4f8
 80049f0:	2000f4fc 	.word	0x2000f4fc

080049f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f8:	f7ff fdb4 	bl	8004564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d004      	beq.n	8004a0e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004a04:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f7ff fdd3 	bl	80045b0 <vPortExitCritical>

	return xReturn;
}
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004a0e:	2401      	movs	r4, #1
 8004a10:	e7f9      	b.n	8004a06 <prvIsQueueFull+0x12>

08004a12 <prvIsQueueEmpty>:
{
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004a16:	f7ff fda5 	bl	8004564 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1c:	b123      	cbz	r3, 8004a28 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8004a1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004a20:	f7ff fdc6 	bl	80045b0 <vPortExitCritical>
}
 8004a24:	4620      	mov	r0, r4
 8004a26:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004a28:	2401      	movs	r4, #1
 8004a2a:	e7f9      	b.n	8004a20 <prvIsQueueEmpty+0xe>

08004a2c <prvCopyDataToQueue>:
{
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a32:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004a36:	b94a      	cbnz	r2, 8004a4c <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a38:	6803      	ldr	r3, [r0, #0]
 8004a3a:	bb53      	cbnz	r3, 8004a92 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004a3c:	6840      	ldr	r0, [r0, #4]
 8004a3e:	f001 f839 	bl	8005ab4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004a46:	3501      	adds	r5, #1
 8004a48:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004a4c:	b96e      	cbnz	r6, 8004a6a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a4e:	6880      	ldr	r0, [r0, #8]
 8004a50:	f019 fad4 	bl	801dffc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a5c:	6862      	ldr	r2, [r4, #4]
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d319      	bcc.n	8004a96 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004a66:	2000      	movs	r0, #0
 8004a68:	e7ed      	b.n	8004a46 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6a:	68c0      	ldr	r0, [r0, #12]
 8004a6c:	f019 fac6 	bl	801dffc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a72:	425b      	negs	r3, r3
 8004a74:	68e2      	ldr	r2, [r4, #12]
 8004a76:	441a      	add	r2, r3
 8004a78:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	428a      	cmp	r2, r1
 8004a7e:	d202      	bcs.n	8004a86 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a80:	6862      	ldr	r2, [r4, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004a86:	2e02      	cmp	r6, #2
 8004a88:	d107      	bne.n	8004a9a <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a8a:	b145      	cbz	r5, 8004a9e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004a8c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e7d9      	b.n	8004a46 <prvCopyDataToQueue+0x1a>
 8004a92:	2000      	movs	r0, #0
 8004a94:	e7d7      	b.n	8004a46 <prvCopyDataToQueue+0x1a>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e7d5      	b.n	8004a46 <prvCopyDataToQueue+0x1a>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e7d3      	b.n	8004a46 <prvCopyDataToQueue+0x1a>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7d1      	b.n	8004a46 <prvCopyDataToQueue+0x1a>

08004aa2 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aa2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004aa4:	b172      	cbz	r2, 8004ac4 <prvCopyDataFromQueue+0x22>
{
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004aaa:	68c4      	ldr	r4, [r0, #12]
 8004aac:	4414      	add	r4, r2
 8004aae:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ab0:	6840      	ldr	r0, [r0, #4]
 8004ab2:	4284      	cmp	r4, r0
 8004ab4:	d301      	bcc.n	8004aba <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	60d8      	str	r0, [r3, #12]
 8004aba:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f019 fa9d 	bl	801dffc <memcpy>
 8004ac2:	bd10      	pop	{r4, pc}
 8004ac4:	4770      	bx	lr

08004ac6 <prvUnlockQueue>:
{
 8004ac6:	b538      	push	{r3, r4, r5, lr}
 8004ac8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004aca:	f7ff fd4b 	bl	8004564 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004ace:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004ad2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad4:	e001      	b.n	8004ada <prvUnlockQueue+0x14>
			--cTxLock;
 8004ad6:	3c01      	subs	r4, #1
 8004ad8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	dd0a      	ble.n	8004af4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae0:	b143      	cbz	r3, 8004af4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004ae6:	f000 fed3 	bl	8005890 <xTaskRemoveFromEventList>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d0f3      	beq.n	8004ad6 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8004aee:	f000 ff73 	bl	80059d8 <vTaskMissedYield>
 8004af2:	e7f0      	b.n	8004ad6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004af4:	23ff      	movs	r3, #255	; 0xff
 8004af6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004afa:	f7ff fd59 	bl	80045b0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004afe:	f7ff fd31 	bl	8004564 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004b02:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004b06:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b08:	e001      	b.n	8004b0e <prvUnlockQueue+0x48>
				--cRxLock;
 8004b0a:	3c01      	subs	r4, #1
 8004b0c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	dd0a      	ble.n	8004b28 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b12:	692b      	ldr	r3, [r5, #16]
 8004b14:	b143      	cbz	r3, 8004b28 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b16:	f105 0010 	add.w	r0, r5, #16
 8004b1a:	f000 feb9 	bl	8005890 <xTaskRemoveFromEventList>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0f3      	beq.n	8004b0a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8004b22:	f000 ff59 	bl	80059d8 <vTaskMissedYield>
 8004b26:	e7f0      	b.n	8004b0a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004b28:	23ff      	movs	r3, #255	; 0xff
 8004b2a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004b2e:	f7ff fd3f 	bl	80045b0 <vPortExitCritical>
 8004b32:	bd38      	pop	{r3, r4, r5, pc}

08004b34 <xQueueGenericReset>:
{
 8004b34:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004b36:	b330      	cbz	r0, 8004b86 <xQueueGenericReset+0x52>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004b3c:	f7ff fd12 	bl	8004564 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b40:	6821      	ldr	r1, [r4, #0]
 8004b42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b46:	fb03 1002 	mla	r0, r3, r2, r1
 8004b4a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b50:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004b52:	3a01      	subs	r2, #1
 8004b54:	fb02 1303 	mla	r3, r2, r3, r1
 8004b58:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b5a:	23ff      	movs	r3, #255	; 0xff
 8004b5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004b64:	b9d5      	cbnz	r5, 8004b9c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	b303      	cbz	r3, 8004bac <xQueueGenericReset+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b6a:	f104 0010 	add.w	r0, r4, #16
 8004b6e:	f000 fe8f 	bl	8005890 <xTaskRemoveFromEventList>
 8004b72:	b1d8      	cbz	r0, 8004bac <xQueueGenericReset+0x78>
					queueYIELD_IF_USING_PREEMPTION();
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <xQueueGenericReset+0x80>)
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	e012      	b.n	8004bac <xQueueGenericReset+0x78>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	b672      	cpsid	i
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	b662      	cpsie	i
 8004b9a:	e7fe      	b.n	8004b9a <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b9c:	f104 0010 	add.w	r0, r4, #16
 8004ba0:	f7ff fc33 	bl	800440a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ba8:	f7ff fc2f 	bl	800440a <vListInitialise>
	taskEXIT_CRITICAL();
 8004bac:	f7ff fd00 	bl	80045b0 <vPortExitCritical>
}
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <prvInitialiseNewQueue>:
{
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	b139      	cbz	r1, 8004bd0 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bc0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004bc2:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bc4:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ffb3 	bl	8004b34 <xQueueGenericReset>
 8004bce:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bd0:	601b      	str	r3, [r3, #0]
 8004bd2:	e7f6      	b.n	8004bc2 <prvInitialiseNewQueue+0xa>

08004bd4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bd4:	b950      	cbnz	r0, 8004bec <xQueueGenericCreate+0x18>
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	b672      	cpsid	i
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	b662      	cpsie	i
 8004bea:	e7fe      	b.n	8004bea <xQueueGenericCreate+0x16>
	{
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf2:	b111      	cbz	r1, 8004bfa <xQueueGenericCreate+0x26>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	fb01 f000 	mul.w	r0, r1, r0
 8004bf8:	e000      	b.n	8004bfc <xQueueGenericCreate+0x28>
			xQueueSizeInBytes = ( size_t ) 0;
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	4617      	mov	r7, r2
 8004bfe:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004c00:	3048      	adds	r0, #72	; 0x48
 8004c02:	f7ff fe31 	bl	8004868 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004c06:	4606      	mov	r6, r0
 8004c08:	b138      	cbz	r0, 8004c1a <xQueueGenericCreate+0x46>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c0a:	9000      	str	r0, [sp, #0]
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7ff ffcf 	bl	8004bb8 <prvInitialiseNewQueue>
	}
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c20 <xQueueGenericSend>:
{
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004c26:	b170      	cbz	r0, 8004c46 <xQueueGenericSend+0x26>
 8004c28:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2a:	b1b9      	cbz	r1, 8004c5c <xQueueGenericSend+0x3c>
 8004c2c:	2501      	movs	r5, #1
 8004c2e:	b9dd      	cbnz	r5, 8004c68 <xQueueGenericSend+0x48>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	b672      	cpsid	i
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	b662      	cpsie	i
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericSend+0x24>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	b672      	cpsid	i
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	b662      	cpsie	i
 8004c5a:	e7fe      	b.n	8004c5a <xQueueGenericSend+0x3a>
 8004c5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004c5e:	b90a      	cbnz	r2, 8004c64 <xQueueGenericSend+0x44>
 8004c60:	2501      	movs	r5, #1
 8004c62:	e7e4      	b.n	8004c2e <xQueueGenericSend+0xe>
 8004c64:	2500      	movs	r5, #0
 8004c66:	e7e2      	b.n	8004c2e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d00b      	beq.n	8004c84 <xQueueGenericSend+0x64>
 8004c6c:	b97d      	cbnz	r5, 8004c8e <xQueueGenericSend+0x6e>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	b672      	cpsid	i
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	b662      	cpsie	i
 8004c82:	e7fe      	b.n	8004c82 <xQueueGenericSend+0x62>
 8004c84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c86:	2a01      	cmp	r2, #1
 8004c88:	d0f0      	beq.n	8004c6c <xQueueGenericSend+0x4c>
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	e7ee      	b.n	8004c6c <xQueueGenericSend+0x4c>
 8004c8e:	461e      	mov	r6, r3
 8004c90:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c92:	f000 fead 	bl	80059f0 <xTaskGetSchedulerState>
 8004c96:	b910      	cbnz	r0, 8004c9e <xQueueGenericSend+0x7e>
 8004c98:	9b01      	ldr	r3, [sp, #4]
 8004c9a:	b103      	cbz	r3, 8004c9e <xQueueGenericSend+0x7e>
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	b955      	cbnz	r5, 8004cb6 <xQueueGenericSend+0x96>
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	b672      	cpsid	i
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	b662      	cpsie	i
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSend+0x94>
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	e02c      	b.n	8004d14 <xQueueGenericSend+0xf4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cba:	4632      	mov	r2, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff feb4 	bl	8004a2c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc6:	b18b      	cbz	r3, 8004cec <xQueueGenericSend+0xcc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ccc:	f000 fde0 	bl	8005890 <xTaskRemoveFromEventList>
 8004cd0:	b138      	cbz	r0, 8004ce2 <xQueueGenericSend+0xc2>
							queueYIELD_IF_USING_PREEMPTION();
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <xQueueGenericSend+0x194>)
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ce2:	f7ff fc65 	bl	80045b0 <vPortExitCritical>
				return pdPASS;
 8004ce6:	2001      	movs	r0, #1
}
 8004ce8:	b005      	add	sp, #20
 8004cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d0f8      	beq.n	8004ce2 <xQueueGenericSend+0xc2>
						queueYIELD_IF_USING_PREEMPTION();
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <xQueueGenericSend+0x194>)
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	e7ef      	b.n	8004ce2 <xQueueGenericSend+0xc2>
					taskEXIT_CRITICAL();
 8004d02:	f7ff fc55 	bl	80045b0 <vPortExitCritical>
					return errQUEUE_FULL;
 8004d06:	2000      	movs	r0, #0
 8004d08:	e7ee      	b.n	8004ce8 <xQueueGenericSend+0xc8>
				prvUnlockQueue( pxQueue );
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f7ff fedb 	bl	8004ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d10:	f000 fc68 	bl	80055e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004d14:	f7ff fc26 	bl	8004564 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d3cc      	bcc.n	8004cba <xQueueGenericSend+0x9a>
 8004d20:	2e02      	cmp	r6, #2
 8004d22:	d0ca      	beq.n	8004cba <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d24:	9b01      	ldr	r3, [sp, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0eb      	beq.n	8004d02 <xQueueGenericSend+0xe2>
				else if( xEntryTimeSet == pdFALSE )
 8004d2a:	b91d      	cbnz	r5, 8004d34 <xQueueGenericSend+0x114>
					vTaskSetTimeOutState( &xTimeOut );
 8004d2c:	a802      	add	r0, sp, #8
 8004d2e:	f000 fdf7 	bl	8005920 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d32:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8004d34:	f7ff fc3c 	bl	80045b0 <vPortExitCritical>
		vTaskSuspendAll();
 8004d38:	f000 fbac 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d3c:	f7ff fc12 	bl	8004564 <vPortEnterCritical>
 8004d40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <xQueueGenericSend+0x132>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d102      	bne.n	8004d64 <xQueueGenericSend+0x144>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d64:	f7ff fc24 	bl	80045b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d68:	a901      	add	r1, sp, #4
 8004d6a:	a802      	add	r0, sp, #8
 8004d6c:	f000 fdf0 	bl	8005950 <xTaskCheckForTimeOut>
 8004d70:	b9c8      	cbnz	r0, 8004da6 <xQueueGenericSend+0x186>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff fe3e 	bl	80049f4 <prvIsQueueFull>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0c6      	beq.n	8004d0a <xQueueGenericSend+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d7c:	9901      	ldr	r1, [sp, #4]
 8004d7e:	f104 0010 	add.w	r0, r4, #16
 8004d82:	f000 fd6b 	bl	800585c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff fe9d 	bl	8004ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d8c:	f000 fc2a 	bl	80055e4 <xTaskResumeAll>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1bf      	bne.n	8004d14 <xQueueGenericSend+0xf4>
					portYIELD_WITHIN_API();
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <xQueueGenericSend+0x194>)
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	e7b6      	b.n	8004d14 <xQueueGenericSend+0xf4>
			prvUnlockQueue( pxQueue );
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7ff fe8d 	bl	8004ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dac:	f000 fc1a 	bl	80055e4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004db0:	2000      	movs	r0, #0
 8004db2:	e799      	b.n	8004ce8 <xQueueGenericSend+0xc8>
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8004db8:	b148      	cbz	r0, 8004dce <prvInitialiseMutex+0x16>
	{
 8004dba:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dc0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004dc2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	f7ff ff2a 	bl	8004c20 <xQueueGenericSend>
 8004dcc:	bd08      	pop	{r3, pc}
 8004dce:	4770      	bx	lr

08004dd0 <xQueueCreateMutex>:
	{
 8004dd0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	f7ff fefc 	bl	8004bd4 <xQueueGenericCreate>
 8004ddc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8004dde:	f7ff ffeb 	bl	8004db8 <prvInitialiseMutex>
	}
 8004de2:	4620      	mov	r0, r4
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004de6:	b170      	cbz	r0, 8004e06 <xQueueGiveFromISR+0x20>
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004dee:	b1ab      	cbz	r3, 8004e1c <xQueueGiveFromISR+0x36>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	e7fe      	b.n	8004e04 <xQueueGiveFromISR+0x1e>
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	b672      	cpsid	i
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	b662      	cpsie	i
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004e1c:	6803      	ldr	r3, [r0, #0]
 8004e1e:	b163      	cbz	r3, 8004e3a <xQueueGiveFromISR+0x54>
 8004e20:	2301      	movs	r3, #1
 8004e22:	b983      	cbnz	r3, 8004e46 <xQueueGiveFromISR+0x60>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	b672      	cpsid	i
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	b662      	cpsie	i
 8004e38:	e7fe      	b.n	8004e38 <xQueueGiveFromISR+0x52>
 8004e3a:	6843      	ldr	r3, [r0, #4]
 8004e3c:	b90b      	cbnz	r3, 8004e42 <xQueueGiveFromISR+0x5c>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e7ef      	b.n	8004e22 <xQueueGiveFromISR+0x3c>
 8004e42:	2300      	movs	r3, #0
 8004e44:	e7ed      	b.n	8004e22 <xQueueGiveFromISR+0x3c>
 8004e46:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e48:	f7ff fc7e 	bl	8004748 <vPortValidateInterruptPriority>
	__asm volatile
 8004e4c:	f3ef 8511 	mrs	r5, BASEPRI
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	b672      	cpsid	i
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d21a      	bcs.n	8004ea2 <xQueueGiveFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e70:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004e72:	3201      	adds	r2, #1
 8004e74:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d10c      	bne.n	8004e96 <xQueueGiveFromISR+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e7e:	b193      	cbz	r3, 8004ea6 <xQueueGiveFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e84:	f000 fd04 	bl	8005890 <xTaskRemoveFromEventList>
 8004e88:	b178      	cbz	r0, 8004eaa <xQueueGiveFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8004e8a:	b186      	cbz	r6, 8004eae <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	6030      	str	r0, [r6, #0]
	__asm volatile
 8004e90:	f385 8811 	msr	BASEPRI, r5
}
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e96:	3301      	adds	r3, #1
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7f6      	b.n	8004e90 <xQueueGiveFromISR+0xaa>
			xReturn = errQUEUE_FULL;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e7f4      	b.n	8004e90 <xQueueGiveFromISR+0xaa>
			xReturn = pdPASS;
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7f2      	b.n	8004e90 <xQueueGiveFromISR+0xaa>
 8004eaa:	2001      	movs	r0, #1
 8004eac:	e7f0      	b.n	8004e90 <xQueueGiveFromISR+0xaa>
 8004eae:	2001      	movs	r0, #1
 8004eb0:	e7ee      	b.n	8004e90 <xQueueGiveFromISR+0xaa>
	...

08004eb4 <xQueueGenericReceive>:
{
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004ebc:	b170      	cbz	r0, 8004edc <xQueueGenericReceive+0x28>
 8004ebe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec0:	b1b9      	cbz	r1, 8004ef2 <xQueueGenericReceive+0x3e>
 8004ec2:	2501      	movs	r5, #1
 8004ec4:	b9dd      	cbnz	r5, 8004efe <xQueueGenericReceive+0x4a>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	e7fe      	b.n	8004eda <xQueueGenericReceive+0x26>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	b672      	cpsid	i
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	b662      	cpsie	i
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericReceive+0x3c>
 8004ef2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004ef4:	b90a      	cbnz	r2, 8004efa <xQueueGenericReceive+0x46>
 8004ef6:	2501      	movs	r5, #1
 8004ef8:	e7e4      	b.n	8004ec4 <xQueueGenericReceive+0x10>
 8004efa:	2500      	movs	r5, #0
 8004efc:	e7e2      	b.n	8004ec4 <xQueueGenericReceive+0x10>
 8004efe:	461f      	mov	r7, r3
 8004f00:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f02:	f000 fd75 	bl	80059f0 <xTaskGetSchedulerState>
 8004f06:	b910      	cbnz	r0, 8004f0e <xQueueGenericReceive+0x5a>
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	b103      	cbz	r3, 8004f0e <xQueueGenericReceive+0x5a>
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	b955      	cbnz	r5, 8004f26 <xQueueGenericReceive+0x72>
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	b672      	cpsid	i
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	b662      	cpsie	i
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericReceive+0x70>
 8004f26:	2600      	movs	r6, #0
 8004f28:	e05d      	b.n	8004fe6 <xQueueGenericReceive+0x132>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004f2a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff fdb7 	bl	8004aa2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004f34:	b9df      	cbnz	r7, 8004f6e <xQueueGenericReceive+0xba>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004f36:	3d01      	subs	r5, #1
 8004f38:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	b913      	cbnz	r3, 8004f44 <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004f3e:	f000 fe17 	bl	8005b70 <pvTaskIncrementMutexHeldCount>
 8004f42:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	b163      	cbz	r3, 8004f62 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f48:	f104 0010 	add.w	r0, r4, #16
 8004f4c:	f000 fca0 	bl	8005890 <xTaskRemoveFromEventList>
 8004f50:	b138      	cbz	r0, 8004f62 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	4b45      	ldr	r3, [pc, #276]	; (800506c <xQueueGenericReceive+0x1b8>)
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004f62:	f7ff fb25 	bl	80045b0 <vPortExitCritical>
				return pdPASS;
 8004f66:	2001      	movs	r0, #1
}
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004f6e:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f5      	beq.n	8004f62 <xQueueGenericReceive+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f7a:	f000 fc89 	bl	8005890 <xTaskRemoveFromEventList>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d0ef      	beq.n	8004f62 <xQueueGenericReceive+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <xQueueGenericReceive+0x1b8>)
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	e7e6      	b.n	8004f62 <xQueueGenericReceive+0xae>
					taskEXIT_CRITICAL();
 8004f94:	f7ff fb0c 	bl	80045b0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7e5      	b.n	8004f68 <xQueueGenericReceive+0xb4>
					vTaskSetTimeOutState( &xTimeOut );
 8004f9c:	a802      	add	r0, sp, #8
 8004f9e:	f000 fcbf 	bl	8005920 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa2:	2601      	movs	r6, #1
 8004fa4:	e029      	b.n	8004ffa <xQueueGenericReceive+0x146>
		prvLockQueue( pxQueue );
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004fac:	e031      	b.n	8005012 <xQueueGenericReceive+0x15e>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb4:	e033      	b.n	800501e <xQueueGenericReceive+0x16a>
						taskENTER_CRITICAL();
 8004fb6:	f7ff fad5 	bl	8004564 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004fba:	6860      	ldr	r0, [r4, #4]
 8004fbc:	f000 fd28 	bl	8005a10 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004fc0:	f7ff faf6 	bl	80045b0 <vPortExitCritical>
 8004fc4:	e03b      	b.n	800503e <xQueueGenericReceive+0x18a>
				prvUnlockQueue( pxQueue );
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fd7d 	bl	8004ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fcc:	f000 fb0a 	bl	80055e4 <xTaskResumeAll>
 8004fd0:	e009      	b.n	8004fe6 <xQueueGenericReceive+0x132>
			prvUnlockQueue( pxQueue );
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7ff fd77 	bl	8004ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fd8:	f000 fb04 	bl	80055e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff fd18 	bl	8004a12 <prvIsQueueEmpty>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d140      	bne.n	8005068 <xQueueGenericReceive+0x1b4>
		taskENTER_CRITICAL();
 8004fe6:	f7ff fabd 	bl	8004564 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	d19c      	bne.n	8004f2a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ce      	beq.n	8004f94 <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	d0d0      	beq.n	8004f9c <xQueueGenericReceive+0xe8>
		taskEXIT_CRITICAL();
 8004ffa:	f7ff fad9 	bl	80045b0 <vPortExitCritical>
		vTaskSuspendAll();
 8004ffe:	f000 fa49 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005002:	f7ff faaf 	bl	8004564 <vPortEnterCritical>
 8005006:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800500a:	b25b      	sxtb	r3, r3
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d0c9      	beq.n	8004fa6 <xQueueGenericReceive+0xf2>
 8005012:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d0c7      	beq.n	8004fae <xQueueGenericReceive+0xfa>
 800501e:	f7ff fac7 	bl	80045b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005022:	a901      	add	r1, sp, #4
 8005024:	a802      	add	r0, sp, #8
 8005026:	f000 fc93 	bl	8005950 <xTaskCheckForTimeOut>
 800502a:	2800      	cmp	r0, #0
 800502c:	d1d1      	bne.n	8004fd2 <xQueueGenericReceive+0x11e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff fcef 	bl	8004a12 <prvIsQueueEmpty>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0c6      	beq.n	8004fc6 <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0bb      	beq.n	8004fb6 <xQueueGenericReceive+0x102>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800503e:	9901      	ldr	r1, [sp, #4]
 8005040:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005044:	f000 fc0a 	bl	800585c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fd3c 	bl	8004ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800504e:	f000 fac9 	bl	80055e4 <xTaskResumeAll>
 8005052:	2800      	cmp	r0, #0
 8005054:	d1c7      	bne.n	8004fe6 <xQueueGenericReceive+0x132>
					portYIELD_WITHIN_API();
 8005056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <xQueueGenericReceive+0x1b8>)
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	e7be      	b.n	8004fe6 <xQueueGenericReceive+0x132>
				return errQUEUE_EMPTY;
 8005068:	2000      	movs	r0, #0
 800506a:	e77d      	b.n	8004f68 <xQueueGenericReceive+0xb4>
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <xQueueReceiveFromISR>:
{
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005074:	b170      	cbz	r0, 8005094 <xQueueReceiveFromISR+0x24>
 8005076:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005078:	b1b9      	cbz	r1, 80050aa <xQueueReceiveFromISR+0x3a>
 800507a:	2301      	movs	r3, #1
 800507c:	b9db      	cbnz	r3, 80050b6 <xQueueReceiveFromISR+0x46>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	b672      	cpsid	i
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	b662      	cpsie	i
 8005092:	e7fe      	b.n	8005092 <xQueueReceiveFromISR+0x22>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	b672      	cpsid	i
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	b662      	cpsie	i
 80050a8:	e7fe      	b.n	80050a8 <xQueueReceiveFromISR+0x38>
 80050aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050ac:	b90b      	cbnz	r3, 80050b2 <xQueueReceiveFromISR+0x42>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7e4      	b.n	800507c <xQueueReceiveFromISR+0xc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e7e2      	b.n	800507c <xQueueReceiveFromISR+0xc>
 80050b6:	4617      	mov	r7, r2
 80050b8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ba:	f7ff fb45 	bl	8004748 <vPortValidateInterruptPriority>
	__asm volatile
 80050be:	f3ef 8611 	mrs	r6, BASEPRI
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	b672      	cpsid	i
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050da:	f1b8 0f00 	cmp.w	r8, #0
 80050de:	d020      	beq.n	8005122 <xQueueReceiveFromISR+0xb2>
			const int8_t cRxLock = pxQueue->cRxLock;
 80050e0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80050e4:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e6:	4649      	mov	r1, r9
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7ff fcda 	bl	8004aa2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80050ee:	f108 33ff 	add.w	r3, r8, #4294967295
 80050f2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80050f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80050f8:	d10d      	bne.n	8005116 <xQueueReceiveFromISR+0xa6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	b19b      	cbz	r3, 8005126 <xQueueReceiveFromISR+0xb6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050fe:	f104 0010 	add.w	r0, r4, #16
 8005102:	f000 fbc5 	bl	8005890 <xTaskRemoveFromEventList>
 8005106:	b180      	cbz	r0, 800512a <xQueueReceiveFromISR+0xba>
						if( pxHigherPriorityTaskWoken != NULL )
 8005108:	b18f      	cbz	r7, 800512e <xQueueReceiveFromISR+0xbe>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800510a:	2001      	movs	r0, #1
 800510c:	6038      	str	r0, [r7, #0]
	__asm volatile
 800510e:	f386 8811 	msr	BASEPRI, r6
}
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005116:	1c6b      	adds	r3, r5, #1
 8005118:	b25b      	sxtb	r3, r3
 800511a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800511e:	2001      	movs	r0, #1
 8005120:	e7f5      	b.n	800510e <xQueueReceiveFromISR+0x9e>
			xReturn = pdFAIL;
 8005122:	2000      	movs	r0, #0
 8005124:	e7f3      	b.n	800510e <xQueueReceiveFromISR+0x9e>
			xReturn = pdPASS;
 8005126:	2001      	movs	r0, #1
 8005128:	e7f1      	b.n	800510e <xQueueReceiveFromISR+0x9e>
 800512a:	2001      	movs	r0, #1
 800512c:	e7ef      	b.n	800510e <xQueueReceiveFromISR+0x9e>
 800512e:	2001      	movs	r0, #1
 8005130:	e7ed      	b.n	800510e <xQueueReceiveFromISR+0x9e>
	...

08005134 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <prvResetNextTaskUnblockTime+0x2c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	b94b      	cbnz	r3, 8005150 <prvResetNextTaskUnblockTime+0x1c>
 800513c:	2301      	movs	r3, #1
 800513e:	b94b      	cbnz	r3, 8005154 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <prvResetNextTaskUnblockTime+0x2c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <prvResetNextTaskUnblockTime+0x30>)
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005150:	2300      	movs	r3, #0
 8005152:	e7f4      	b.n	800513e <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <prvResetNextTaskUnblockTime+0x30>)
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	2000f510 	.word	0x2000f510
 8005164:	2000f5e8 	.word	0x2000f5e8

08005168 <prvDeleteTCB>:
	{
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 800516c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800516e:	f7ff fc05 	bl	800497c <vPortFree>
			vPortFree( pxTCB );
 8005172:	4620      	mov	r0, r4
 8005174:	f7ff fc02 	bl	800497c <vPortFree>
 8005178:	bd10      	pop	{r4, pc}

0800517a <prvInitialiseNewTask>:
{
 800517a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517e:	4680      	mov	r8, r0
 8005180:	4699      	mov	r9, r3
 8005182:	9d08      	ldr	r5, [sp, #32]
 8005184:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005186:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005188:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800518a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800518e:	4413      	add	r3, r2
 8005190:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005194:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005198:	2300      	movs	r3, #0
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d807      	bhi.n	80051ae <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800519e:	5cc8      	ldrb	r0, [r1, r3]
 80051a0:	18e2      	adds	r2, r4, r3
 80051a2:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80051a6:	5cca      	ldrb	r2, [r1, r3]
 80051a8:	b10a      	cbz	r2, 80051ae <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051aa:	3301      	adds	r3, #1
 80051ac:	e7f5      	b.n	800519a <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ae:	2300      	movs	r3, #0
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051b4:	2d06      	cmp	r5, #6
 80051b6:	d900      	bls.n	80051ba <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051b8:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80051ba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80051bc:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051be:	f04f 0a00 	mov.w	sl, #0
 80051c2:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051c6:	1d20      	adds	r0, r4, #4
 80051c8:	f7ff f92a 	bl	8004420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051cc:	f104 0018 	add.w	r0, r4, #24
 80051d0:	f7ff f926 	bl	8004420 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051d4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d6:	f1c5 0507 	rsb	r5, r5, #7
 80051da:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051dc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80051de:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051e2:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e6:	464a      	mov	r2, r9
 80051e8:	4641      	mov	r1, r8
 80051ea:	4630      	mov	r0, r6
 80051ec:	f7ff f98c 	bl	8004508 <pxPortInitialiseStack>
 80051f0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80051f2:	b107      	cbz	r7, 80051f6 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051f4:	603c      	str	r4, [r7, #0]
 80051f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080051fc <prvInitialiseTaskLists>:
{
 80051fc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051fe:	2400      	movs	r4, #0
 8005200:	e007      	b.n	8005212 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005202:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005206:	0093      	lsls	r3, r2, #2
 8005208:	480e      	ldr	r0, [pc, #56]	; (8005244 <prvInitialiseTaskLists+0x48>)
 800520a:	4418      	add	r0, r3
 800520c:	f7ff f8fd 	bl	800440a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005210:	3401      	adds	r4, #1
 8005212:	2c06      	cmp	r4, #6
 8005214:	d9f5      	bls.n	8005202 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005216:	4d0c      	ldr	r5, [pc, #48]	; (8005248 <prvInitialiseTaskLists+0x4c>)
 8005218:	4628      	mov	r0, r5
 800521a:	f7ff f8f6 	bl	800440a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521e:	4c0b      	ldr	r4, [pc, #44]	; (800524c <prvInitialiseTaskLists+0x50>)
 8005220:	4620      	mov	r0, r4
 8005222:	f7ff f8f2 	bl	800440a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005226:	480a      	ldr	r0, [pc, #40]	; (8005250 <prvInitialiseTaskLists+0x54>)
 8005228:	f7ff f8ef 	bl	800440a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <prvInitialiseTaskLists+0x58>)
 800522e:	f7ff f8ec 	bl	800440a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005232:	4809      	ldr	r0, [pc, #36]	; (8005258 <prvInitialiseTaskLists+0x5c>)
 8005234:	f7ff f8e9 	bl	800440a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <prvInitialiseTaskLists+0x60>)
 800523a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <prvInitialiseTaskLists+0x64>)
 800523e:	601c      	str	r4, [r3, #0]
 8005240:	bd38      	pop	{r3, r4, r5, pc}
 8005242:	bf00      	nop
 8005244:	2000f518 	.word	0x2000f518
 8005248:	2000f5bc 	.word	0x2000f5bc
 800524c:	2000f5d0 	.word	0x2000f5d0
 8005250:	2000f5f0 	.word	0x2000f5f0
 8005254:	2000f61c 	.word	0x2000f61c
 8005258:	2000f608 	.word	0x2000f608
 800525c:	2000f510 	.word	0x2000f510
 8005260:	2000f514 	.word	0x2000f514

08005264 <prvAddNewTaskToReadyList>:
{
 8005264:	b510      	push	{r4, lr}
 8005266:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005268:	f7ff f97c 	bl	8004564 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800526c:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <prvAddNewTaskToReadyList+0x8c>)
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005274:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <prvAddNewTaskToReadyList+0x90>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d031      	beq.n	80052e0 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <prvAddNewTaskToReadyList+0x94>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	b93b      	cbnz	r3, 8005292 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <prvAddNewTaskToReadyList+0x90>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800528a:	429a      	cmp	r2, r3
 800528c:	d801      	bhi.n	8005292 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800528e:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <prvAddNewTaskToReadyList+0x90>)
 8005290:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <prvAddNewTaskToReadyList+0x98>)
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800529a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	4917      	ldr	r1, [pc, #92]	; (8005300 <prvAddNewTaskToReadyList+0x9c>)
 80052a2:	6808      	ldr	r0, [r1, #0]
 80052a4:	4302      	orrs	r2, r0
 80052a6:	600a      	str	r2, [r1, #0]
 80052a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	1d21      	adds	r1, r4, #4
 80052b0:	4814      	ldr	r0, [pc, #80]	; (8005304 <prvAddNewTaskToReadyList+0xa0>)
 80052b2:	4410      	add	r0, r2
 80052b4:	f7ff f8b7 	bl	8004426 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80052b8:	f7ff f97a 	bl	80045b0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <prvAddNewTaskToReadyList+0x94>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b16b      	cbz	r3, 80052de <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <prvAddNewTaskToReadyList+0x90>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d207      	bcs.n	80052de <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <prvAddNewTaskToReadyList+0xa4>)
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <prvAddNewTaskToReadyList+0x90>)
 80052e2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d1d3      	bne.n	8005292 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80052ea:	f7ff ff87 	bl	80051fc <prvInitialiseTaskLists>
 80052ee:	e7d0      	b.n	8005292 <prvAddNewTaskToReadyList+0x2e>
 80052f0:	2000f5a4 	.word	0x2000f5a4
 80052f4:	2000f50c 	.word	0x2000f50c
 80052f8:	2000f604 	.word	0x2000f604
 80052fc:	2000f5b4 	.word	0x2000f5b4
 8005300:	2000f5b8 	.word	0x2000f5b8
 8005304:	2000f518 	.word	0x2000f518
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005312:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <prvAddCurrentTaskToDelayedList+0x84>)
 8005314:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005316:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	3004      	adds	r0, #4
 800531c:	f7ff f8a9 	bl	8004472 <uxListRemove>
 8005320:	b950      	cbnz	r0, 8005338 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	2301      	movs	r3, #1
 800532a:	fa03 f202 	lsl.w	r2, r3, r2
 800532e:	491a      	ldr	r1, [pc, #104]	; (8005398 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005330:	680b      	ldr	r3, [r1, #0]
 8005332:	ea23 0302 	bic.w	r3, r3, r2
 8005336:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005338:	f1b4 3fff 	cmp.w	r4, #4294967295
 800533c:	bf14      	ite	ne
 800533e:	2300      	movne	r3, #0
 8005340:	2301      	moveq	r3, #1
 8005342:	2e00      	cmp	r6, #0
 8005344:	bf08      	it	eq
 8005346:	2300      	moveq	r3, #0
 8005348:	b99b      	cbnz	r3, 8005372 <prvAddCurrentTaskToDelayedList+0x66>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800534a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005352:	42a5      	cmp	r5, r4
 8005354:	d814      	bhi.n	8005380 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <prvAddCurrentTaskToDelayedList+0x90>)
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	3104      	adds	r1, #4
 8005360:	f7ff f86d 	bl	800443e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005364:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	429c      	cmp	r4, r3
 800536a:	d201      	bcs.n	8005370 <prvAddCurrentTaskToDelayedList+0x64>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800536e:	601c      	str	r4, [r3, #0]
 8005370:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	3104      	adds	r1, #4
 8005378:	480a      	ldr	r0, [pc, #40]	; (80053a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800537a:	f7ff f854 	bl	8004426 <vListInsertEnd>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <prvAddCurrentTaskToDelayedList+0x88>)
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	3104      	adds	r1, #4
 800538a:	f7ff f858 	bl	800443e <vListInsert>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	2000f630 	.word	0x2000f630
 8005394:	2000f50c 	.word	0x2000f50c
 8005398:	2000f5b8 	.word	0x2000f5b8
 800539c:	2000f510 	.word	0x2000f510
 80053a0:	2000f5e8 	.word	0x2000f5e8
 80053a4:	2000f608 	.word	0x2000f608
 80053a8:	2000f514 	.word	0x2000f514

080053ac <xTaskCreate>:
	{
 80053ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b0:	b085      	sub	sp, #20
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
 80053b6:	4615      	mov	r5, r2
 80053b8:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ba:	0090      	lsls	r0, r2, #2
 80053bc:	f7ff fa54 	bl	8004868 <pvPortMalloc>
			if( pxStack != NULL )
 80053c0:	b300      	cbz	r0, 8005404 <xTaskCreate+0x58>
 80053c2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80053c4:	2054      	movs	r0, #84	; 0x54
 80053c6:	f7ff fa4f 	bl	8004868 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80053ca:	4604      	mov	r4, r0
 80053cc:	b1b0      	cbz	r0, 80053fc <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80053ce:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80053d2:	b1cc      	cbz	r4, 8005408 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053d4:	2300      	movs	r3, #0
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	9402      	str	r4, [sp, #8]
 80053da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4643      	mov	r3, r8
 80053e4:	462a      	mov	r2, r5
 80053e6:	4639      	mov	r1, r7
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff fec6 	bl	800517a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff ff38 	bl	8005264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053f4:	2001      	movs	r0, #1
	}
 80053f6:	b005      	add	sp, #20
 80053f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80053fc:	4648      	mov	r0, r9
 80053fe:	f7ff fabd 	bl	800497c <vPortFree>
 8005402:	e7e6      	b.n	80053d2 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8005404:	2400      	movs	r4, #0
 8005406:	e7e4      	b.n	80053d2 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800540c:	e7f3      	b.n	80053f6 <xTaskCreate+0x4a>
	...

08005410 <vTaskStartScheduler>:
{
 8005410:	b500      	push	{lr}
 8005412:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <vTaskStartScheduler+0x6c>)
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005420:	4917      	ldr	r1, [pc, #92]	; (8005480 <vTaskStartScheduler+0x70>)
 8005422:	4818      	ldr	r0, [pc, #96]	; (8005484 <vTaskStartScheduler+0x74>)
 8005424:	f7ff ffc2 	bl	80053ac <xTaskCreate>
	if( xReturn == pdPASS )
 8005428:	2801      	cmp	r0, #1
 800542a:	d005      	beq.n	8005438 <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800542c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005430:	d019      	beq.n	8005466 <vTaskStartScheduler+0x56>
}
 8005432:	b003      	add	sp, #12
 8005434:	f85d fb04 	ldr.w	pc, [sp], #4
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <vTaskStartScheduler+0x78>)
 8005452:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005454:	2201      	movs	r2, #1
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <vTaskStartScheduler+0x7c>)
 8005458:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800545a:	2200      	movs	r2, #0
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <vTaskStartScheduler+0x80>)
 800545e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005460:	f7ff f91e 	bl	80046a0 <xPortStartScheduler>
 8005464:	e7e5      	b.n	8005432 <vTaskStartScheduler+0x22>
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	b672      	cpsid	i
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	b662      	cpsie	i
 800547a:	e7fe      	b.n	800547a <vTaskStartScheduler+0x6a>
 800547c:	2000f5e4 	.word	0x2000f5e4
 8005480:	0801e254 	.word	0x0801e254
 8005484:	08005795 	.word	0x08005795
 8005488:	2000f5e8 	.word	0x2000f5e8
 800548c:	2000f604 	.word	0x2000f604
 8005490:	2000f630 	.word	0x2000f630

08005494 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005494:	4a02      	ldr	r2, [pc, #8]	; (80054a0 <vTaskSuspendAll+0xc>)
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000f5b0 	.word	0x2000f5b0

080054a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80054a4:	4b01      	ldr	r3, [pc, #4]	; (80054ac <xTaskGetTickCount+0x8>)
 80054a6:	6818      	ldr	r0, [r3, #0]
}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000f630 	.word	0x2000f630

080054b0 <xTaskGetTickCountFromISR>:
{
 80054b0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054b2:	f7ff f949 	bl	8004748 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80054b6:	4b01      	ldr	r3, [pc, #4]	; (80054bc <xTaskGetTickCountFromISR+0xc>)
 80054b8:	6818      	ldr	r0, [r3, #0]
}
 80054ba:	bd08      	pop	{r3, pc}
 80054bc:	2000f630 	.word	0x2000f630

080054c0 <xTaskIncrementTick>:
{
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <xTaskIncrementTick+0xf8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d16a      	bne.n	80055a0 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + 1;
 80054ca:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <xTaskIncrementTick+0xfc>)
 80054cc:	681d      	ldr	r5, [r3, #0]
 80054ce:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80054d0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80054d2:	b9d5      	cbnz	r5, 800550a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <xTaskIncrementTick+0x100>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b153      	cbz	r3, 80054f2 <xTaskIncrementTick+0x32>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	e7fe      	b.n	80054f0 <xTaskIncrementTick+0x30>
 80054f2:	4a33      	ldr	r2, [pc, #204]	; (80055c0 <xTaskIncrementTick+0x100>)
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <xTaskIncrementTick+0x104>)
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	6019      	str	r1, [r3, #0]
 80054fe:	4a32      	ldr	r2, [pc, #200]	; (80055c8 <xTaskIncrementTick+0x108>)
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	f7ff fe15 	bl	8005134 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800550a:	4b30      	ldr	r3, [pc, #192]	; (80055cc <xTaskIncrementTick+0x10c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429d      	cmp	r5, r3
 8005510:	d23a      	bcs.n	8005588 <xTaskIncrementTick+0xc8>
BaseType_t xSwitchRequired = pdFALSE;
 8005512:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <xTaskIncrementTick+0x110>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800551e:	009a      	lsls	r2, r3, #2
 8005520:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <xTaskIncrementTick+0x114>)
 8005522:	589b      	ldr	r3, [r3, r2]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d940      	bls.n	80055aa <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8005528:	2401      	movs	r4, #1
 800552a:	e03e      	b.n	80055aa <xTaskIncrementTick+0xea>
							xSwitchRequired = pdTRUE;
 800552c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <xTaskIncrementTick+0x100>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	b353      	cbz	r3, 800558c <xTaskIncrementTick+0xcc>
 8005536:	2300      	movs	r3, #0
 8005538:	bb53      	cbnz	r3, 8005590 <xTaskIncrementTick+0xd0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <xTaskIncrementTick+0x100>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005542:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005544:	429d      	cmp	r5, r3
 8005546:	d328      	bcc.n	800559a <xTaskIncrementTick+0xda>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005548:	1d37      	adds	r7, r6, #4
 800554a:	4638      	mov	r0, r7
 800554c:	f7fe ff91 	bl	8004472 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005550:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005552:	b11b      	cbz	r3, 800555c <xTaskIncrementTick+0x9c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005554:	f106 0018 	add.w	r0, r6, #24
 8005558:	f7fe ff8b 	bl	8004472 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800555c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800555e:	2201      	movs	r2, #1
 8005560:	409a      	lsls	r2, r3
 8005562:	491d      	ldr	r1, [pc, #116]	; (80055d8 <xTaskIncrementTick+0x118>)
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	4302      	orrs	r2, r0
 8005568:	600a      	str	r2, [r1, #0]
 800556a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800556e:	009a      	lsls	r2, r3, #2
 8005570:	4639      	mov	r1, r7
 8005572:	4818      	ldr	r0, [pc, #96]	; (80055d4 <xTaskIncrementTick+0x114>)
 8005574:	4410      	add	r0, r2
 8005576:	f7fe ff56 	bl	8004426 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800557a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <xTaskIncrementTick+0x110>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	429a      	cmp	r2, r3
 8005584:	d2d2      	bcs.n	800552c <xTaskIncrementTick+0x6c>
 8005586:	e7d2      	b.n	800552e <xTaskIncrementTick+0x6e>
 8005588:	2400      	movs	r4, #0
 800558a:	e7d0      	b.n	800552e <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800558c:	2301      	movs	r3, #1
 800558e:	e7d3      	b.n	8005538 <xTaskIncrementTick+0x78>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <xTaskIncrementTick+0x10c>)
 8005596:	601a      	str	r2, [r3, #0]
					break;
 8005598:	e7bc      	b.n	8005514 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 800559a:	4a0c      	ldr	r2, [pc, #48]	; (80055cc <xTaskIncrementTick+0x10c>)
 800559c:	6013      	str	r3, [r2, #0]
						break;
 800559e:	e7b9      	b.n	8005514 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <xTaskIncrementTick+0x11c>)
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80055a8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <xTaskIncrementTick+0x120>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 80055b0:	2401      	movs	r4, #1
}
 80055b2:	4620      	mov	r0, r4
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2000f5b0 	.word	0x2000f5b0
 80055bc:	2000f630 	.word	0x2000f630
 80055c0:	2000f510 	.word	0x2000f510
 80055c4:	2000f514 	.word	0x2000f514
 80055c8:	2000f5ec 	.word	0x2000f5ec
 80055cc:	2000f5e8 	.word	0x2000f5e8
 80055d0:	2000f50c 	.word	0x2000f50c
 80055d4:	2000f518 	.word	0x2000f518
 80055d8:	2000f5b8 	.word	0x2000f5b8
 80055dc:	2000f5ac 	.word	0x2000f5ac
 80055e0:	2000f634 	.word	0x2000f634

080055e4 <xTaskResumeAll>:
{
 80055e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <xTaskResumeAll+0xdc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	b953      	cbnz	r3, 8005602 <xTaskResumeAll+0x1e>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	e7fe      	b.n	8005600 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8005602:	f7fe ffaf 	bl	8004564 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <xTaskResumeAll+0xdc>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	3a01      	subs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d150      	bne.n	80056b6 <xTaskResumeAll+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005614:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <xTaskResumeAll+0xe0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b923      	cbnz	r3, 8005624 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800561a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800561c:	f7fe ffc8 	bl	80045b0 <vPortExitCritical>
}
 8005620:	4620      	mov	r0, r4
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005626:	4b28      	ldr	r3, [pc, #160]	; (80056c8 <xTaskResumeAll+0xe4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	b31b      	cbz	r3, 8005674 <xTaskResumeAll+0x90>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <xTaskResumeAll+0xe4>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005632:	f104 0018 	add.w	r0, r4, #24
 8005636:	f7fe ff1c 	bl	8004472 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563a:	1d25      	adds	r5, r4, #4
 800563c:	4628      	mov	r0, r5
 800563e:	f7fe ff18 	bl	8004472 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005644:	2201      	movs	r2, #1
 8005646:	409a      	lsls	r2, r3
 8005648:	4920      	ldr	r1, [pc, #128]	; (80056cc <xTaskResumeAll+0xe8>)
 800564a:	6808      	ldr	r0, [r1, #0]
 800564c:	4302      	orrs	r2, r0
 800564e:	600a      	str	r2, [r1, #0]
 8005650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005654:	009a      	lsls	r2, r3, #2
 8005656:	4629      	mov	r1, r5
 8005658:	481d      	ldr	r0, [pc, #116]	; (80056d0 <xTaskResumeAll+0xec>)
 800565a:	4410      	add	r0, r2
 800565c:	f7fe fee3 	bl	8004426 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005660:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <xTaskResumeAll+0xf0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d3dc      	bcc.n	8005626 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 800566c:	2201      	movs	r2, #1
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <xTaskResumeAll+0xf4>)
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e7d8      	b.n	8005626 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8005674:	b10c      	cbz	r4, 800567a <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8005676:	f7ff fd5d 	bl	8005134 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <xTaskResumeAll+0xf8>)
 800567c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800567e:	b974      	cbnz	r4, 800569e <xTaskResumeAll+0xba>
				if( xYieldPending != pdFALSE )
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <xTaskResumeAll+0xf4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	b1cb      	cbz	r3, 80056ba <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8005686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <xTaskResumeAll+0xfc>)
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005696:	2401      	movs	r4, #1
 8005698:	e7c0      	b.n	800561c <xTaskResumeAll+0x38>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800569a:	3c01      	subs	r4, #1
 800569c:	d007      	beq.n	80056ae <xTaskResumeAll+0xca>
							if( xTaskIncrementTick() != pdFALSE )
 800569e:	f7ff ff0f 	bl	80054c0 <xTaskIncrementTick>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0f9      	beq.n	800569a <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80056a6:	2201      	movs	r2, #1
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <xTaskResumeAll+0xf4>)
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e7f5      	b.n	800569a <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <xTaskResumeAll+0xf8>)
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e7e4      	b.n	8005680 <xTaskResumeAll+0x9c>
BaseType_t xAlreadyYielded = pdFALSE;
 80056b6:	2400      	movs	r4, #0
 80056b8:	e7b0      	b.n	800561c <xTaskResumeAll+0x38>
 80056ba:	2400      	movs	r4, #0
 80056bc:	e7ae      	b.n	800561c <xTaskResumeAll+0x38>
 80056be:	bf00      	nop
 80056c0:	2000f5b0 	.word	0x2000f5b0
 80056c4:	2000f5a4 	.word	0x2000f5a4
 80056c8:	2000f5f0 	.word	0x2000f5f0
 80056cc:	2000f5b8 	.word	0x2000f5b8
 80056d0:	2000f518 	.word	0x2000f518
 80056d4:	2000f50c 	.word	0x2000f50c
 80056d8:	2000f634 	.word	0x2000f634
 80056dc:	2000f5ac 	.word	0x2000f5ac
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vTaskDelay>:
	{
 80056e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e6:	b1b8      	cbz	r0, 8005718 <vTaskDelay+0x34>
 80056e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <vTaskDelay+0x4c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	b153      	cbz	r3, 8005706 <vTaskDelay+0x22>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	b672      	cpsid	i
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	b662      	cpsie	i
 8005704:	e7fe      	b.n	8005704 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8005706:	f7ff fec5 	bl	8005494 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800570a:	2100      	movs	r1, #0
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fdfd 	bl	800530c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005712:	f7ff ff67 	bl	80055e4 <xTaskResumeAll>
 8005716:	e000      	b.n	800571a <vTaskDelay+0x36>
	BaseType_t xAlreadyYielded = pdFALSE;
 8005718:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 800571a:	b938      	cbnz	r0, 800572c <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <vTaskDelay+0x50>)
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	2000f5b0 	.word	0x2000f5b0
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <prvCheckTasksWaitingTermination+0x50>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	b313      	cbz	r3, 8005784 <prvCheckTasksWaitingTermination+0x4c>
{
 800573e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8005740:	f7ff fea8 	bl	8005494 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <prvCheckTasksWaitingTermination+0x54>)
 8005746:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8005748:	f7ff ff4c 	bl	80055e4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800574c:	b924      	cbnz	r4, 8005758 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <prvCheckTasksWaitingTermination+0x50>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f4      	bne.n	8005740 <prvCheckTasksWaitingTermination+0x8>
}
 8005756:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8005758:	f7fe ff04 	bl	8004564 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <prvCheckTasksWaitingTermination+0x54>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005762:	1d20      	adds	r0, r4, #4
 8005764:	f7fe fe85 	bl	8004472 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005768:	4a09      	ldr	r2, [pc, #36]	; (8005790 <prvCheckTasksWaitingTermination+0x58>)
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005770:	4a05      	ldr	r2, [pc, #20]	; (8005788 <prvCheckTasksWaitingTermination+0x50>)
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	3b01      	subs	r3, #1
 8005776:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8005778:	f7fe ff1a 	bl	80045b0 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff fcf3 	bl	8005168 <prvDeleteTCB>
 8005782:	e7e4      	b.n	800574e <prvCheckTasksWaitingTermination+0x16>
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	2000f5a8 	.word	0x2000f5a8
 800578c:	2000f61c 	.word	0x2000f61c
 8005790:	2000f5a4 	.word	0x2000f5a4

08005794 <prvIdleTask>:
{
 8005794:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005796:	f7ff ffcf 	bl	8005738 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <prvIdleTask+0x20>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d9f9      	bls.n	8005796 <prvIdleTask+0x2>
				taskYIELD();
 80057a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <prvIdleTask+0x24>)
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	e7f0      	b.n	8005796 <prvIdleTask+0x2>
 80057b4:	2000f518 	.word	0x2000f518
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057bc:	4b22      	ldr	r3, [pc, #136]	; (8005848 <vTaskSwitchContext+0x8c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b9d3      	cbnz	r3, 80057f8 <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
 80057c2:	2200      	movs	r2, #0
 80057c4:	4b21      	ldr	r3, [pc, #132]	; (800584c <vTaskSwitchContext+0x90>)
 80057c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057c8:	4b21      	ldr	r3, [pc, #132]	; (8005850 <vTaskSwitchContext+0x94>)
 80057ca:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80057cc:	fab3 f383 	clz	r3, r3
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f1c3 031f 	rsb	r3, r3, #31
 80057d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80057da:	008a      	lsls	r2, r1, #2
 80057dc:	491d      	ldr	r1, [pc, #116]	; (8005854 <vTaskSwitchContext+0x98>)
 80057de:	588a      	ldr	r2, [r1, r2]
 80057e0:	b972      	cbnz	r2, 8005800 <vTaskSwitchContext+0x44>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	b672      	cpsid	i
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	b662      	cpsie	i
 80057f6:	e7fe      	b.n	80057f6 <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
 80057f8:	2201      	movs	r2, #1
 80057fa:	4b14      	ldr	r3, [pc, #80]	; (800584c <vTaskSwitchContext+0x90>)
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	4770      	bx	lr
{
 8005800:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005802:	4814      	ldr	r0, [pc, #80]	; (8005854 <vTaskSwitchContext+0x98>)
 8005804:	009a      	lsls	r2, r3, #2
 8005806:	18d4      	adds	r4, r2, r3
 8005808:	00a1      	lsls	r1, r4, #2
 800580a:	4401      	add	r1, r0
 800580c:	684c      	ldr	r4, [r1, #4]
 800580e:	6864      	ldr	r4, [r4, #4]
 8005810:	604c      	str	r4, [r1, #4]
 8005812:	441a      	add	r2, r3
 8005814:	0091      	lsls	r1, r2, #2
 8005816:	3108      	adds	r1, #8
 8005818:	4408      	add	r0, r1
 800581a:	4284      	cmp	r4, r0
 800581c:	d00b      	beq.n	8005836 <vTaskSwitchContext+0x7a>
 800581e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005822:	009a      	lsls	r2, r3, #2
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <vTaskSwitchContext+0x98>)
 8005826:	4413      	add	r3, r2
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <vTaskSwitchContext+0x9c>)
 800582e:	601a      	str	r2, [r3, #0]
}
 8005830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005834:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005836:	6860      	ldr	r0, [r4, #4]
 8005838:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800583c:	0091      	lsls	r1, r2, #2
 800583e:	4a05      	ldr	r2, [pc, #20]	; (8005854 <vTaskSwitchContext+0x98>)
 8005840:	440a      	add	r2, r1
 8005842:	6050      	str	r0, [r2, #4]
 8005844:	e7eb      	b.n	800581e <vTaskSwitchContext+0x62>
 8005846:	bf00      	nop
 8005848:	2000f5b0 	.word	0x2000f5b0
 800584c:	2000f634 	.word	0x2000f634
 8005850:	2000f5b8 	.word	0x2000f5b8
 8005854:	2000f518 	.word	0x2000f518
 8005858:	2000f50c 	.word	0x2000f50c

0800585c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800585c:	b950      	cbnz	r0, 8005874 <vTaskPlaceOnEventList+0x18>
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	b672      	cpsid	i
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	b662      	cpsie	i
 8005872:	e7fe      	b.n	8005872 <vTaskPlaceOnEventList+0x16>
{
 8005874:	b510      	push	{r4, lr}
 8005876:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <vTaskPlaceOnEventList+0x30>)
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	3118      	adds	r1, #24
 800587e:	f7fe fdde 	bl	800443e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005882:	2101      	movs	r1, #1
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff fd41 	bl	800530c <prvAddCurrentTaskToDelayedList>
 800588a:	bd10      	pop	{r4, pc}
 800588c:	2000f50c 	.word	0x2000f50c

08005890 <xTaskRemoveFromEventList>:
{
 8005890:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005892:	68c3      	ldr	r3, [r0, #12]
 8005894:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005896:	b324      	cbz	r4, 80058e2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005898:	f104 0518 	add.w	r5, r4, #24
 800589c:	4628      	mov	r0, r5
 800589e:	f7fe fde8 	bl	8004472 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <xTaskRemoveFromEventList+0x78>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	bb3b      	cbnz	r3, 80058f8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058a8:	1d25      	adds	r5, r4, #4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fe fde1 	bl	8004472 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	4915      	ldr	r1, [pc, #84]	; (800590c <xTaskRemoveFromEventList+0x7c>)
 80058b8:	6808      	ldr	r0, [r1, #0]
 80058ba:	4302      	orrs	r2, r0
 80058bc:	600a      	str	r2, [r1, #0]
 80058be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058c2:	009a      	lsls	r2, r3, #2
 80058c4:	4629      	mov	r1, r5
 80058c6:	4812      	ldr	r0, [pc, #72]	; (8005910 <xTaskRemoveFromEventList+0x80>)
 80058c8:	4410      	add	r0, r2
 80058ca:	f7fe fdac 	bl	8004426 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <xTaskRemoveFromEventList+0x84>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d913      	bls.n	8005902 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 80058da:	2001      	movs	r0, #1
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <xTaskRemoveFromEventList+0x88>)
 80058de:	6018      	str	r0, [r3, #0]
 80058e0:	bd38      	pop	{r3, r4, r5, pc}
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	b672      	cpsid	i
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	b662      	cpsie	i
 80058f6:	e7fe      	b.n	80058f6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058f8:	4629      	mov	r1, r5
 80058fa:	4808      	ldr	r0, [pc, #32]	; (800591c <xTaskRemoveFromEventList+0x8c>)
 80058fc:	f7fe fd93 	bl	8004426 <vListInsertEnd>
 8005900:	e7e5      	b.n	80058ce <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8005902:	2000      	movs	r0, #0
}
 8005904:	bd38      	pop	{r3, r4, r5, pc}
 8005906:	bf00      	nop
 8005908:	2000f5b0 	.word	0x2000f5b0
 800590c:	2000f5b8 	.word	0x2000f5b8
 8005910:	2000f518 	.word	0x2000f518
 8005914:	2000f50c 	.word	0x2000f50c
 8005918:	2000f634 	.word	0x2000f634
 800591c:	2000f5f0 	.word	0x2000f5f0

08005920 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8005920:	b130      	cbz	r0, 8005930 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005922:	4a09      	ldr	r2, [pc, #36]	; (8005948 <vTaskSetTimeOutState+0x28>)
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005928:	4a08      	ldr	r2, [pc, #32]	; (800594c <vTaskSetTimeOutState+0x2c>)
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	6042      	str	r2, [r0, #4]
 800592e:	4770      	bx	lr
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	b672      	cpsid	i
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	b662      	cpsie	i
 8005944:	e7fe      	b.n	8005944 <vTaskSetTimeOutState+0x24>
 8005946:	bf00      	nop
 8005948:	2000f5ec 	.word	0x2000f5ec
 800594c:	2000f630 	.word	0x2000f630

08005950 <xTaskCheckForTimeOut>:
{
 8005950:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8005952:	b1c0      	cbz	r0, 8005986 <xTaskCheckForTimeOut+0x36>
 8005954:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8005956:	b309      	cbz	r1, 800599c <xTaskCheckForTimeOut+0x4c>
 8005958:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800595a:	f7fe fe03 	bl	8004564 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800595e:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <xTaskCheckForTimeOut+0x80>)
 8005960:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d02e      	beq.n	80059c8 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <xTaskCheckForTimeOut+0x84>)
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	4290      	cmp	r0, r2
 8005972:	d002      	beq.n	800597a <xTaskCheckForTimeOut+0x2a>
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	4291      	cmp	r1, r2
 8005978:	d228      	bcs.n	80059cc <xTaskCheckForTimeOut+0x7c>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	1a88      	subs	r0, r1, r2
 800597e:	4283      	cmp	r3, r0
 8005980:	d817      	bhi.n	80059b2 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8005982:	2401      	movs	r4, #1
 8005984:	e01c      	b.n	80059c0 <xTaskCheckForTimeOut+0x70>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	b672      	cpsid	i
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	b662      	cpsie	i
 800599a:	e7fe      	b.n	800599a <xTaskCheckForTimeOut+0x4a>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	b672      	cpsid	i
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	b662      	cpsie	i
 80059b0:	e7fe      	b.n	80059b0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80059b2:	1a52      	subs	r2, r2, r1
 80059b4:	4413      	add	r3, r2
 80059b6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7ff ffb1 	bl	8005920 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80059be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80059c0:	f7fe fdf6 	bl	80045b0 <vPortExitCritical>
}
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80059c8:	2400      	movs	r4, #0
 80059ca:	e7f9      	b.n	80059c0 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 80059cc:	2401      	movs	r4, #1
 80059ce:	e7f7      	b.n	80059c0 <xTaskCheckForTimeOut+0x70>
 80059d0:	2000f630 	.word	0x2000f630
 80059d4:	2000f5ec 	.word	0x2000f5ec

080059d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80059d8:	2201      	movs	r2, #1
 80059da:	4b01      	ldr	r3, [pc, #4]	; (80059e0 <vTaskMissedYield+0x8>)
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4770      	bx	lr
 80059e0:	2000f634 	.word	0x2000f634

080059e4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80059e4:	4b01      	ldr	r3, [pc, #4]	; (80059ec <xTaskGetCurrentTaskHandle+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
	}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	2000f50c 	.word	0x2000f50c

080059f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <xTaskGetSchedulerState+0x18>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	b123      	cbz	r3, 8005a00 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <xTaskGetSchedulerState+0x1c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b91b      	cbnz	r3, 8005a04 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 80059fc:	2002      	movs	r0, #2
 80059fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a00:	2001      	movs	r0, #1
 8005a02:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a04:	2000      	movs	r0, #0
	}
 8005a06:	4770      	bx	lr
 8005a08:	2000f604 	.word	0x2000f604
 8005a0c:	2000f5b0 	.word	0x2000f5b0

08005a10 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d047      	beq.n	8005aa4 <vTaskPriorityInherit+0x94>
	{
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a1a:	4923      	ldr	r1, [pc, #140]	; (8005aa8 <vTaskPriorityInherit+0x98>)
 8005a1c:	6809      	ldr	r1, [r1, #0]
 8005a1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005a20:	428b      	cmp	r3, r1
 8005a22:	d216      	bcs.n	8005a52 <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a24:	6981      	ldr	r1, [r0, #24]
 8005a26:	2900      	cmp	r1, #0
 8005a28:	db05      	blt.n	8005a36 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2a:	491f      	ldr	r1, [pc, #124]	; (8005aa8 <vTaskPriorityInherit+0x98>)
 8005a2c:	6809      	ldr	r1, [r1, #0]
 8005a2e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005a30:	f1c1 0107 	rsb	r1, r1, #7
 8005a34:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a36:	6960      	ldr	r0, [r4, #20]
 8005a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a3c:	0099      	lsls	r1, r3, #2
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <vTaskPriorityInherit+0x9c>)
 8005a40:	440b      	add	r3, r1
 8005a42:	4298      	cmp	r0, r3
 8005a44:	d006      	beq.n	8005a54 <vTaskPriorityInherit+0x44>
 8005a46:	2300      	movs	r3, #0
 8005a48:	b933      	cbnz	r3, 8005a58 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <vTaskPriorityInherit+0x98>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7f7      	b.n	8005a48 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a58:	1d25      	adds	r5, r4, #4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f7fe fd09 	bl	8004472 <uxListRemove>
 8005a60:	b968      	cbnz	r0, 8005a7e <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a68:	008a      	lsls	r2, r1, #2
 8005a6a:	4910      	ldr	r1, [pc, #64]	; (8005aac <vTaskPriorityInherit+0x9c>)
 8005a6c:	588a      	ldr	r2, [r1, r2]
 8005a6e:	b932      	cbnz	r2, 8005a7e <vTaskPriorityInherit+0x6e>
 8005a70:	2201      	movs	r2, #1
 8005a72:	409a      	lsls	r2, r3
 8005a74:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <vTaskPriorityInherit+0xa0>)
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	ea23 0302 	bic.w	r3, r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <vTaskPriorityInherit+0x98>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005a86:	2201      	movs	r2, #1
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	4909      	ldr	r1, [pc, #36]	; (8005ab0 <vTaskPriorityInherit+0xa0>)
 8005a8c:	6808      	ldr	r0, [r1, #0]
 8005a8e:	4302      	orrs	r2, r0
 8005a90:	600a      	str	r2, [r1, #0]
 8005a92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a96:	009a      	lsls	r2, r3, #2
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4804      	ldr	r0, [pc, #16]	; (8005aac <vTaskPriorityInherit+0x9c>)
 8005a9c:	4410      	add	r0, r2
 8005a9e:	f7fe fcc2 	bl	8004426 <vListInsertEnd>
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	2000f50c 	.word	0x2000f50c
 8005aac:	2000f518 	.word	0x2000f518
 8005ab0:	2000f5b8 	.word	0x2000f5b8

08005ab4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d04e      	beq.n	8005b56 <xTaskPriorityDisinherit+0xa2>
	{
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005abc:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <xTaskPriorityDisinherit+0xb0>)
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	4290      	cmp	r0, r2
 8005ac2:	d00a      	beq.n	8005ada <xTaskPriorityDisinherit+0x26>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	b672      	cpsid	i
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	b662      	cpsie	i
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ada:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005adc:	b952      	cbnz	r2, 8005af4 <xTaskPriorityDisinherit+0x40>
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	b672      	cpsid	i
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	b662      	cpsie	i
 8005af2:	e7fe      	b.n	8005af2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 8005af4:	3a01      	subs	r2, #1
 8005af6:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005af8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005afa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005afc:	4288      	cmp	r0, r1
 8005afe:	d02c      	beq.n	8005b5a <xTaskPriorityDisinherit+0xa6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b00:	bb6a      	cbnz	r2, 8005b5e <xTaskPriorityDisinherit+0xaa>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b02:	1d25      	adds	r5, r4, #4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f7fe fcb4 	bl	8004472 <uxListRemove>
 8005b0a:	b970      	cbnz	r0, 8005b2a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b0e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005b12:	008b      	lsls	r3, r1, #2
 8005b14:	4914      	ldr	r1, [pc, #80]	; (8005b68 <xTaskPriorityDisinherit+0xb4>)
 8005b16:	58cb      	ldr	r3, [r1, r3]
 8005b18:	b93b      	cbnz	r3, 8005b2a <xTaskPriorityDisinherit+0x76>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8005b20:	4912      	ldr	r1, [pc, #72]	; (8005b6c <xTaskPriorityDisinherit+0xb8>)
 8005b22:	680b      	ldr	r3, [r1, #0]
 8005b24:	ea23 0302 	bic.w	r3, r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2e:	f1c3 0207 	rsb	r2, r3, #7
 8005b32:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b34:	2401      	movs	r4, #1
 8005b36:	fa04 f203 	lsl.w	r2, r4, r3
 8005b3a:	490c      	ldr	r1, [pc, #48]	; (8005b6c <xTaskPriorityDisinherit+0xb8>)
 8005b3c:	6808      	ldr	r0, [r1, #0]
 8005b3e:	4302      	orrs	r2, r0
 8005b40:	600a      	str	r2, [r1, #0]
 8005b42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b46:	009a      	lsls	r2, r3, #2
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4807      	ldr	r0, [pc, #28]	; (8005b68 <xTaskPriorityDisinherit+0xb4>)
 8005b4c:	4410      	add	r0, r2
 8005b4e:	f7fe fc6a 	bl	8004426 <vListInsertEnd>
					xReturn = pdTRUE;
 8005b52:	4620      	mov	r0, r4
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005b56:	2000      	movs	r0, #0
 8005b58:	4770      	bx	lr
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	bd38      	pop	{r3, r4, r5, pc}
 8005b5e:	2000      	movs	r0, #0
	}
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
 8005b62:	bf00      	nop
 8005b64:	2000f50c 	.word	0x2000f50c
 8005b68:	2000f518 	.word	0x2000f518
 8005b6c:	2000f5b8 	.word	0x2000f5b8

08005b70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <pvTaskIncrementMutexHeldCount+0x18>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	b123      	cbz	r3, 8005b80 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b76:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <pvTaskIncrementMutexHeldCount+0x18>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8005b80:	4b01      	ldr	r3, [pc, #4]	; (8005b88 <pvTaskIncrementMutexHeldCount+0x18>)
 8005b82:	6818      	ldr	r0, [r3, #0]
	}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	2000f50c 	.word	0x2000f50c

08005b8c <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8005b90:	4800      	ldr	r0, [pc, #0]	; (8005b94 <USBD_MSC_GetHSCfgDesc+0x8>)
 8005b92:	4770      	bx	lr
 8005b94:	20000060 	.word	0x20000060

08005b98 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8005b98:	2320      	movs	r3, #32
 8005b9a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8005b9c:	4800      	ldr	r0, [pc, #0]	; (8005ba0 <USBD_MSC_GetFSCfgDesc+0x8>)
 8005b9e:	4770      	bx	lr
 8005ba0:	20000040 	.word	0x20000040

08005ba4 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8005ba8:	4800      	ldr	r0, [pc, #0]	; (8005bac <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8005baa:	4770      	bx	lr
 8005bac:	2000008c 	.word	0x2000008c

08005bb0 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8005bb0:	230a      	movs	r3, #10
 8005bb2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000080 	.word	0x20000080

08005bbc <USBD_MSC_Init>:
{
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005bc0:	7c03      	ldrb	r3, [r0, #16]
 8005bc2:	b9c3      	cbnz	r3, 8005bf6 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8005bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc8:	2202      	movs	r2, #2
 8005bca:	2101      	movs	r1, #1
 8005bcc:	f003 f906 	bl	8008ddc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8005bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	2181      	movs	r1, #129	; 0x81
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f003 f8ff 	bl	8008ddc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8005bde:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8005be2:	f018 f9fb 	bl	801dfdc <malloc>
 8005be6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8005bea:	b180      	cbz	r0, 8005c0e <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f8f3 	bl	8005dd8 <MSC_BOT_Init>
    ret = 0;
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f003 f8ee 	bl	8008ddc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	2202      	movs	r2, #2
 8005c04:	2181      	movs	r1, #129	; 0x81
 8005c06:	4620      	mov	r0, r4
 8005c08:	f003 f8e8 	bl	8008ddc <USBD_LL_OpenEP>
 8005c0c:	e7e7      	b.n	8005bde <USBD_MSC_Init+0x22>
    ret = 1; 
 8005c0e:	2001      	movs	r0, #1
}
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <USBD_MSC_DeInit>:
{
 8005c12:	b510      	push	{r4, lr}
 8005c14:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8005c16:	2101      	movs	r1, #1
 8005c18:	f003 f8f1 	bl	8008dfe <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8005c1c:	2181      	movs	r1, #129	; 0x81
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f003 f8ed 	bl	8008dfe <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 f903 	bl	8005e30 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8005c2a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8005c2e:	b120      	cbz	r0, 8005c3a <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8005c30:	f018 f9dc 	bl	801dfec <free>
    pdev->pClassData  = NULL; 
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <USBD_MSC_Setup>:
{
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8005c44:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c48:	780b      	ldrb	r3, [r1, #0]
 8005c4a:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8005c4e:	d035      	beq.n	8005cbc <USBD_MSC_Setup+0x7e>
 8005c50:	2a20      	cmp	r2, #32
 8005c52:	d178      	bne.n	8005d46 <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 8005c54:	784a      	ldrb	r2, [r1, #1]
 8005c56:	2afe      	cmp	r2, #254	; 0xfe
 8005c58:	d005      	beq.n	8005c66 <USBD_MSC_Setup+0x28>
 8005c5a:	2aff      	cmp	r2, #255	; 0xff
 8005c5c:	d01d      	beq.n	8005c9a <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 8005c5e:	f000 fe5b 	bl	8006918 <USBD_CtlError>
       return USBD_FAIL; 
 8005c62:	2002      	movs	r0, #2
 8005c64:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 8005c66:	884a      	ldrh	r2, [r1, #2]
 8005c68:	b912      	cbnz	r2, 8005c70 <USBD_MSC_Setup+0x32>
         (req->wLength == 1) &&
 8005c6a:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8005c6c:	2a01      	cmp	r2, #1
 8005c6e:	d005      	beq.n	8005c7c <USBD_MSC_Setup+0x3e>
         USBD_CtlError(pdev , req);
 8005c70:	4621      	mov	r1, r4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 fe50 	bl	8006918 <USBD_CtlError>
         return USBD_FAIL; 
 8005c78:	2002      	movs	r0, #2
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 1) &&
 8005c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c80:	d0f6      	beq.n	8005c70 <USBD_MSC_Setup+0x32>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8005c82:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	4798      	blx	r3
 8005c8a:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	f001 f89e 	bl	8006dd2 <USBD_CtlSendData>
  return 0;
 8005c96:	2000      	movs	r0, #0
      break;
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 8005c9a:	884a      	ldrh	r2, [r1, #2]
 8005c9c:	b90a      	cbnz	r2, 8005ca2 <USBD_MSC_Setup+0x64>
         (req->wLength == 0) &&
 8005c9e:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8005ca0:	b12a      	cbz	r2, 8005cae <USBD_MSC_Setup+0x70>
         USBD_CtlError(pdev , req);
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 fe37 	bl	8006918 <USBD_CtlError>
         return USBD_FAIL; 
 8005caa:	2002      	movs	r0, #2
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 0) &&
 8005cae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cb2:	d1f6      	bne.n	8005ca2 <USBD_MSC_Setup+0x64>
         MSC_BOT_Reset(pdev);
 8005cb4:	f000 f8af 	bl	8005e16 <MSC_BOT_Reset>
  return 0;
 8005cb8:	2000      	movs	r0, #0
      break;
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8005cbc:	784b      	ldrb	r3, [r1, #1]
 8005cbe:	2b0a      	cmp	r3, #10
 8005cc0:	d005      	beq.n	8005cce <USBD_MSC_Setup+0x90>
 8005cc2:	2b0b      	cmp	r3, #11
 8005cc4:	d009      	beq.n	8005cda <USBD_MSC_Setup+0x9c>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d00b      	beq.n	8005ce2 <USBD_MSC_Setup+0xa4>
  return 0;
 8005cca:	2000      	movs	r0, #0
}
 8005ccc:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlSendData (pdev,
 8005cce:	2201      	movs	r2, #1
 8005cd0:	1d31      	adds	r1, r6, #4
 8005cd2:	f001 f87e 	bl	8006dd2 <USBD_CtlSendData>
  return 0;
 8005cd6:	2000      	movs	r0, #0
      break;
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
      hmsc->interface = (uint8_t)(req->wValue);
 8005cda:	788b      	ldrb	r3, [r1, #2]
 8005cdc:	6073      	str	r3, [r6, #4]
  return 0;
 8005cde:	2000      	movs	r0, #0
      break;
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005ce2:	7909      	ldrb	r1, [r1, #4]
 8005ce4:	f003 f899 	bl	8008e1a <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8005ce8:	7921      	ldrb	r1, [r4, #4]
 8005cea:	4628      	mov	r0, r5
 8005cec:	f003 f887 	bl	8008dfe <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8005cf0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db0e      	blt.n	8005d16 <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005cf8:	7c2b      	ldrb	r3, [r5, #16]
 8005cfa:	b9eb      	cbnz	r3, 8005d38 <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 8005cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d00:	2202      	movs	r2, #2
 8005d02:	2101      	movs	r1, #1
 8005d04:	4628      	mov	r0, r5
 8005d06:	f003 f869 	bl	8008ddc <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005d0a:	7921      	ldrb	r1, [r4, #4]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 f93b 	bl	8005f88 <MSC_BOT_CplClrFeature>
  return 0;
 8005d12:	2000      	movs	r0, #0
      break;
 8005d14:	bd70      	pop	{r4, r5, r6, pc}
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005d16:	7c2b      	ldrb	r3, [r5, #16]
 8005d18:	b93b      	cbnz	r3, 8005d2a <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 8005d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1e:	2202      	movs	r2, #2
 8005d20:	2181      	movs	r1, #129	; 0x81
 8005d22:	4628      	mov	r0, r5
 8005d24:	f003 f85a 	bl	8008ddc <USBD_LL_OpenEP>
 8005d28:	e7ef      	b.n	8005d0a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8005d2a:	2340      	movs	r3, #64	; 0x40
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	2181      	movs	r1, #129	; 0x81
 8005d30:	4628      	mov	r0, r5
 8005d32:	f003 f853 	bl	8008ddc <USBD_LL_OpenEP>
 8005d36:	e7e8      	b.n	8005d0a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f003 f84c 	bl	8008ddc <USBD_LL_OpenEP>
 8005d44:	e7e1      	b.n	8005d0a <USBD_MSC_Setup+0xcc>
  return 0;
 8005d46:	2000      	movs	r0, #0
 8005d48:	bd70      	pop	{r4, r5, r6, pc}

08005d4a <USBD_MSC_DataIn>:
{
 8005d4a:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8005d4c:	f000 f892 	bl	8005e74 <MSC_BOT_DataIn>
}
 8005d50:	2000      	movs	r0, #0
 8005d52:	bd08      	pop	{r3, pc}

08005d54 <USBD_MSC_DataOut>:
{
 8005d54:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8005d56:	f000 f8fd 	bl	8005f54 <MSC_BOT_DataOut>
}
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	bd08      	pop	{r3, pc}

08005d5e <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8005d5e:	b109      	cbz	r1, 8005d64 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8005d60:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8005d64:	2000      	movs	r0, #0
 8005d66:	4770      	bx	lr

08005d68 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8005d6c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8005d70:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8005d74:	b923      	cbnz	r3, 8005d80 <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 8005d76:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 8005d7a:	b10b      	cbz	r3, 8005d80 <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8005d7c:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 8005d7e:	b13b      	cbz	r3, 8005d90 <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005d80:	2181      	movs	r1, #129	; 0x81
 8005d82:	4628      	mov	r0, r5
 8005d84:	f003 f857 	bl	8008e36 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005d88:	7a63      	ldrb	r3, [r4, #9]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d004      	beq.n	8005d98 <MSC_BOT_Abort+0x30>
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8005d90:	2101      	movs	r1, #1
 8005d92:	f003 f850 	bl	8008e36 <USBD_LL_StallEP>
 8005d96:	e7f3      	b.n	8005d80 <MSC_BOT_Abort+0x18>
  {
    USBD_LL_PrepareReceive (pdev,
 8005d98:	231f      	movs	r3, #31
 8005d9a:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4628      	mov	r0, r5
 8005da2:	f003 f897 	bl	8008ed4 <USBD_LL_PrepareReceive>
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8005da6:	e7f2      	b.n	8005d8e <MSC_BOT_Abort+0x26>

08005da8 <MSC_BOT_SendData>:
{
 8005da8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8005daa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8005dae:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bf28      	it	cs
 8005db6:	4613      	movcs	r3, r2
 8005db8:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 8005dba:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8005dca:	2204      	movs	r2, #4
 8005dcc:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8005dce:	460a      	mov	r2, r1
 8005dd0:	2181      	movs	r1, #129	; 0x81
 8005dd2:	f003 f871 	bl	8008eb8 <USBD_LL_Transmit>
 8005dd6:	bd10      	pop	{r4, pc}

08005dd8 <MSC_BOT_Init>:
{
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8005ddc:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8005de0:	2000      	movs	r0, #0
 8005de2:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005de4:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8005de6:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 8005dea:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8005dee:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005df6:	2101      	movs	r1, #1
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f003 f80e 	bl	8008e1a <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005dfe:	2181      	movs	r1, #129	; 0x81
 8005e00:	4620      	mov	r0, r4
 8005e02:	f003 f80a 	bl	8008e1a <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8005e06:	231f      	movs	r3, #31
 8005e08:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f003 f860 	bl	8008ed4 <USBD_LL_PrepareReceive>
 8005e14:	bd38      	pop	{r3, r4, r5, pc}

08005e16 <MSC_BOT_Reset>:
{
 8005e16:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8005e18:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8005e20:	2101      	movs	r1, #1
 8005e22:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8005e24:	231f      	movs	r3, #31
 8005e26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e2a:	f003 f853 	bl	8008ed4 <USBD_LL_PrepareReceive>
 8005e2e:	bd08      	pop	{r3, pc}

08005e30 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8005e30:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8005e34:	2200      	movs	r2, #0
 8005e36:	721a      	strb	r2, [r3, #8]
 8005e38:	4770      	bx	lr
	...

08005e3c <MSC_BOT_SendCSW>:
{
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8005e40:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <MSC_BOT_SendCSW+0x34>)
 8005e46:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8005e4a:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8005e52:	230d      	movs	r3, #13
 8005e54:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8005e58:	2181      	movs	r1, #129	; 0x81
 8005e5a:	f003 f82d 	bl	8008eb8 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8005e5e:	231f      	movs	r3, #31
 8005e60:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8005e64:	2101      	movs	r1, #1
 8005e66:	4628      	mov	r0, r5
 8005e68:	f003 f834 	bl	8008ed4 <USBD_LL_PrepareReceive>
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	53425355 	.word	0x53425355

08005e74 <MSC_BOT_DataIn>:
{
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8005e78:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8005e7c:	7a0b      	ldrb	r3, [r1, #8]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d007      	beq.n	8005e92 <MSC_BOT_DataIn+0x1e>
 8005e82:	d304      	bcc.n	8005e8e <MSC_BOT_DataIn+0x1a>
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d803      	bhi.n	8005e90 <MSC_BOT_DataIn+0x1c>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f7ff ffd7 	bl	8005e3c <MSC_BOT_SendCSW>
 8005e8e:	bd10      	pop	{r4, pc}
 8005e90:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8005e92:	f201 221b 	addw	r2, r1, #539	; 0x21b
 8005e96:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 8005e9a:	f000 fb6e 	bl	800657a <SCSI_ProcessCmd>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	daf5      	bge.n	8005e8e <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ffc9 	bl	8005e3c <MSC_BOT_SendCSW>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <MSC_BOT_CBW_Decode>:
{
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8005eb0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005eb4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8005eb8:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005ebc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005ec0:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	f003 f813 	bl	8008ef0 <USBD_LL_GetRxDataSize>
 8005eca:	281f      	cmp	r0, #31
 8005ecc:	d104      	bne.n	8005ed8 <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8005ece:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <MSC_BOT_CBW_Decode+0xa4>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d00c      	beq.n	8005ef2 <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 8005ed8:	2320      	movs	r3, #32
 8005eda:	2205      	movs	r2, #5
 8005edc:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f8ea 	bl	80060ba <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 8005eea:	4628      	mov	r0, r5
 8005eec:	f7ff ff3c 	bl	8005d68 <MSC_BOT_Abort>
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 8005ef2:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8005ef6:	2901      	cmp	r1, #1
 8005ef8:	d8ee      	bhi.n	8005ed8 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8005efa:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ea      	beq.n	8005ed8 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8005f02:	2b10      	cmp	r3, #16
 8005f04:	d8e8      	bhi.n	8005ed8 <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 8005f06:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 fb35 	bl	800657a <SCSI_ProcessCmd>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	db0b      	blt.n	8005f2c <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8005f14:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d905      	bls.n	8005f2a <MSC_BOT_CBW_Decode+0x7e>
      if (hmsc->bot_data_length > 0)
 8005f1e:	8962      	ldrh	r2, [r4, #10]
 8005f20:	b982      	cbnz	r2, 8005f44 <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 8005f22:	2100      	movs	r1, #0
 8005f24:	4628      	mov	r0, r5
 8005f26:	f7ff ff89 	bl	8005e3c <MSC_BOT_SendCSW>
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8005f2c:	7a23      	ldrb	r3, [r4, #8]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d003      	beq.n	8005f3a <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 8005f32:	4628      	mov	r0, r5
 8005f34:	f7ff ff18 	bl	8005d68 <MSC_BOT_Abort>
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
       MSC_BOT_SendCSW (pdev,
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff ff7d 	bl	8005e3c <MSC_BOT_SendCSW>
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
        MSC_BOT_SendData(pdev,
 8005f44:	f104 010c 	add.w	r1, r4, #12
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff ff2d 	bl	8005da8 <MSC_BOT_SendData>
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	43425355 	.word	0x43425355

08005f54 <MSC_BOT_DataOut>:
{
 8005f54:	b510      	push	{r4, lr}
 8005f56:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8005f58:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8005f5c:	7a1a      	ldrb	r2, [r3, #8]
 8005f5e:	b112      	cbz	r2, 8005f66 <MSC_BOT_DataOut+0x12>
 8005f60:	2a01      	cmp	r2, #1
 8005f62:	d003      	beq.n	8005f6c <MSC_BOT_DataOut+0x18>
 8005f64:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 8005f66:	f7ff ffa1 	bl	8005eac <MSC_BOT_CBW_Decode>
    break;
 8005f6a:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8005f6c:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8005f70:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005f74:	f000 fb01 	bl	800657a <SCSI_ProcessCmd>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	db00      	blt.n	8005f7e <MSC_BOT_DataOut+0x2a>
 8005f7c:	bd10      	pop	{r4, pc}
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff ff5b 	bl	8005e3c <MSC_BOT_SendCSW>
}
 8005f86:	e7f9      	b.n	8005f7c <MSC_BOT_DataOut+0x28>

08005f88 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005f88:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8005f8a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8005f8e:	7a63      	ldrb	r3, [r4, #9]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d003      	beq.n	8005f9c <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005f94:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f98:	d106      	bne.n	8005fa8 <MSC_BOT_CplClrFeature+0x20>
 8005f9a:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005f9c:	2181      	movs	r1, #129	; 0x81
 8005f9e:	f002 ff4a 	bl	8008e36 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	7263      	strb	r3, [r4, #9]
 8005fa6:	bd10      	pop	{r4, pc}
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f6      	beq.n	8005f9a <MSC_BOT_CplClrFeature+0x12>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8005fac:	2101      	movs	r1, #1
 8005fae:	f7ff ff45 	bl	8005e3c <MSC_BOT_SendCSW>
  }
  
}
 8005fb2:	e7f2      	b.n	8005f9a <MSC_BOT_CplClrFeature+0x12>

08005fb4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005fb4:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8005fb6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 8005fba:	7853      	ldrb	r3, [r2, #1]
 8005fbc:	f013 0f01 	tst.w	r3, #1
 8005fc0:	d10d      	bne.n	8005fde <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005fc2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8005fc6:	69d8      	ldr	r0, [r3, #28]
 8005fc8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005fcc:	008b      	lsls	r3, r1, #2
 8005fce:	4418      	add	r0, r3
    len = pPage[4] + 5;
 8005fd0:	7901      	ldrb	r1, [r0, #4]
 8005fd2:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 8005fd4:	7913      	ldrb	r3, [r2, #4]
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	d203      	bcs.n	8005fe2 <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 8005fda:	460b      	mov	r3, r1
 8005fdc:	e001      	b.n	8005fe2 <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 8005fde:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8005fe0:	4806      	ldr	r0, [pc, #24]	; (8005ffc <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 8005fe2:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 8005fe4:	e004      	b.n	8005ff0 <SCSI_Inquiry+0x3c>
  {
    len--;
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8005fea:	5cc1      	ldrb	r1, [r0, r3]
 8005fec:	18e2      	adds	r2, r4, r3
 8005fee:	7311      	strb	r1, [r2, #12]
  while (len) 
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f8      	bne.n	8005fe6 <SCSI_Inquiry+0x32>
  }
  return 0;
}
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	0801e26c 	.word	0x0801e26c

08006000 <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006000:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 8006004:	2308      	movs	r3, #8
 8006006:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 8006008:	e005      	b.n	8006016 <SCSI_ModeSense6+0x16>
  {
    len--;
 800600a:	3b01      	subs	r3, #1
 800600c:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800600e:	4a04      	ldr	r2, [pc, #16]	; (8006020 <SCSI_ModeSense6+0x20>)
 8006010:	5cd1      	ldrb	r1, [r2, r3]
 8006012:	18c2      	adds	r2, r0, r3
 8006014:	7311      	strb	r1, [r2, #12]
  while (len) 
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f7      	bne.n	800600a <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 800601a:	2000      	movs	r0, #0
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	0801e264 	.word	0x0801e264

08006024 <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006024:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 8006028:	2308      	movs	r3, #8
 800602a:	8143      	strh	r3, [r0, #10]

  while (len) 
 800602c:	e005      	b.n	800603a <SCSI_ModeSense10+0x16>
  {
    len--;
 800602e:	3b01      	subs	r3, #1
 8006030:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006032:	4a04      	ldr	r2, [pc, #16]	; (8006044 <SCSI_ModeSense10+0x20>)
 8006034:	5cd1      	ldrb	r1, [r2, r3]
 8006036:	18c2      	adds	r2, r0, r3
 8006038:	7311      	strb	r1, [r2, #12]
  while (len) 
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f7      	bne.n	800602e <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 800603e:	2000      	movs	r0, #0
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	0801e25c 	.word	0x0801e25c

08006048 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006048:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800604a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800604e:	2300      	movs	r3, #0
 8006050:	e004      	b.n	800605c <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 8006052:	18e1      	adds	r1, r4, r3
 8006054:	2000      	movs	r0, #0
 8006056:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8006058:	3301      	adds	r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b11      	cmp	r3, #17
 800605e:	d9f8      	bls.n	8006052 <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8006060:	2370      	movs	r3, #112	; 0x70
 8006062:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8006064:	230c      	movs	r3, #12
 8006066:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006068:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 800606c:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8006070:	428b      	cmp	r3, r1
 8006072:	d00f      	beq.n	8006094 <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8006074:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8006078:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800607c:	7908      	ldrb	r0, [r1, #4]
 800607e:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8006080:	7a48      	ldrb	r0, [r1, #9]
 8006082:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8006084:	7a09      	ldrb	r1, [r1, #8]
 8006086:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 8006088:	3301      	adds	r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006090:	2b04      	cmp	r3, #4
 8006092:	d009      	beq.n	80060a8 <SCSI_RequestSense+0x60>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8006094:	2312      	movs	r3, #18
 8006096:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006098:	7913      	ldrb	r3, [r2, #4]
 800609a:	2b12      	cmp	r3, #18
 800609c:	d800      	bhi.n	80060a0 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 800609e:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 80060a0:	2000      	movs	r0, #0
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a6:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 80060ae:	e7f1      	b.n	8006094 <SCSI_RequestSense+0x4c>

080060b0 <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 80060b0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 80060b4:	2000      	movs	r0, #0
 80060b6:	8158      	strh	r0, [r3, #10]
  return 0;
}
 80060b8:	4770      	bx	lr

080060ba <SCSI_SenseCode>:
{
 80060ba:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80060bc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80060c0:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 80060c4:	f101 0047 	add.w	r0, r1, #71	; 0x47
 80060c8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80060cc:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 80060d2:	3101      	adds	r1, #1
 80060d4:	b2c9      	uxtb	r1, r1
 80060d6:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80060da:	2904      	cmp	r1, #4
 80060dc:	d002      	beq.n	80060e4 <SCSI_SenseCode+0x2a>
}
 80060de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e2:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 80060ea:	e7f8      	b.n	80060de <SCSI_SenseCode+0x24>

080060ec <SCSI_TestUnitReady>:
{
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80060f0:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80060f4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80060f8:	b95b      	cbnz	r3, 8006112 <SCSI_TestUnitReady+0x26>
 80060fa:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80060fc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	4608      	mov	r0, r1
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	b960      	cbnz	r0, 8006124 <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 800610a:	2200      	movs	r2, #0
 800610c:	816a      	strh	r2, [r5, #10]
}
 800610e:	4618      	mov	r0, r3
 8006110:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8006112:	2320      	movs	r3, #32
 8006114:	2205      	movs	r2, #5
 8006116:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 800611a:	f7ff ffce 	bl	80060ba <SCSI_SenseCode>
    return -1;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	e7f4      	b.n	800610e <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 8006124:	233a      	movs	r3, #58	; 0x3a
 8006126:	2202      	movs	r2, #2
 8006128:	4631      	mov	r1, r6
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff ffc5 	bl	80060ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006130:	2305      	movs	r3, #5
 8006132:	722b      	strb	r3, [r5, #8]
    return -1;
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	e7e9      	b.n	800610e <SCSI_TestUnitReady+0x22>

0800613a <SCSI_ReadFormatCapacity>:
{
 800613a:	b570      	push	{r4, r5, r6, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	4605      	mov	r5, r0
 8006140:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006142:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 8006146:	2300      	movs	r3, #0
 8006148:	e004      	b.n	8006154 <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 800614a:	18e2      	adds	r2, r4, r3
 800614c:	2100      	movs	r1, #0
 800614e:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 8006150:	3301      	adds	r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b0b      	cmp	r3, #11
 8006156:	d9f8      	bls.n	800614a <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8006158:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f10d 0206 	add.w	r2, sp, #6
 8006162:	4669      	mov	r1, sp
 8006164:	4630      	mov	r0, r6
 8006166:	4798      	blx	r3
 8006168:	4601      	mov	r1, r0
 800616a:	b9d8      	cbnz	r0, 80061a4 <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 800616c:	2308      	movs	r3, #8
 800616e:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8006170:	9a00      	ldr	r2, [sp, #0]
 8006172:	1e53      	subs	r3, r2, #1
 8006174:	0e18      	lsrs	r0, r3, #24
 8006176:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8006178:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800617c:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800617e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006182:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8006184:	3a01      	subs	r2, #1
 8006186:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 8006188:	2302      	movs	r3, #2
 800618a:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800618c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006190:	2200      	movs	r2, #0
 8006192:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006194:	0a1a      	lsrs	r2, r3, #8
 8006196:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006198:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 800619a:	230c      	movs	r3, #12
 800619c:	8163      	strh	r3, [r4, #10]
}
 800619e:	4608      	mov	r0, r1
 80061a0:	b002      	add	sp, #8
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 80061a4:	233a      	movs	r3, #58	; 0x3a
 80061a6:	2202      	movs	r2, #2
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	f7ff ff85 	bl	80060ba <SCSI_SenseCode>
    return -1;
 80061b0:	f04f 31ff 	mov.w	r1, #4294967295
 80061b4:	e7f3      	b.n	800619e <SCSI_ReadFormatCapacity+0x64>

080061b6 <SCSI_ReadCapacity10>:
{
 80061b6:	b570      	push	{r4, r5, r6, lr}
 80061b8:	4605      	mov	r5, r0
 80061ba:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80061bc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80061c0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f204 225e 	addw	r2, r4, #606	; 0x25e
 80061ca:	f504 7118 	add.w	r1, r4, #608	; 0x260
 80061ce:	4630      	mov	r0, r6
 80061d0:	4798      	blx	r3
 80061d2:	b9c8      	cbnz	r0, 8006208 <SCSI_ReadCapacity10+0x52>
 80061d4:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 80061d6:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 80061da:	1e53      	subs	r3, r2, #1
 80061dc:	0e18      	lsrs	r0, r3, #24
 80061de:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 80061e0:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80061e4:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 80061e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80061ea:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 80061ec:	3a01      	subs	r2, #1
 80061ee:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80061f0:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 80061f4:	2200      	movs	r2, #0
 80061f6:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80061f8:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80061fa:	0a1a      	lsrs	r2, r3, #8
 80061fc:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80061fe:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 8006200:	2308      	movs	r3, #8
 8006202:	8163      	strh	r3, [r4, #10]
}
 8006204:	4608      	mov	r0, r1
 8006206:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8006208:	233a      	movs	r3, #58	; 0x3a
 800620a:	2202      	movs	r2, #2
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	f7ff ff53 	bl	80060ba <SCSI_SenseCode>
    return -1;
 8006214:	f04f 31ff 	mov.w	r1, #4294967295
 8006218:	e7f4      	b.n	8006204 <SCSI_ReadCapacity10+0x4e>

0800621a <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 800621a:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800621c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8006220:	4413      	add	r3, r2
 8006222:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 8006226:	42a3      	cmp	r3, r4
 8006228:	d801      	bhi.n	800622e <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 800622a:	2000      	movs	r0, #0
}
 800622c:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 800622e:	2321      	movs	r3, #33	; 0x21
 8006230:	2205      	movs	r2, #5
 8006232:	f7ff ff42 	bl	80060ba <SCSI_SenseCode>
    return -1;
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	bd10      	pop	{r4, pc}

0800623c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800623c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006240:	4606      	mov	r6, r0
 8006242:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8006244:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8006248:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 800624c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006250:	bf28      	it	cs
 8006252:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8006256:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800625a:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 800625e:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8006262:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8006266:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 800626a:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800626e:	b29b      	uxth	r3, r3
 8006270:	fbb1 f2f2 	udiv	r2, r1, r2
 8006274:	4639      	mov	r1, r7
 8006276:	4640      	mov	r0, r8
 8006278:	47c8      	blx	r9
 800627a:	2800      	cmp	r0, #0
 800627c:	db1a      	blt.n	80062b4 <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 800627e:	b2ab      	uxth	r3, r5
 8006280:	463a      	mov	r2, r7
 8006282:	2181      	movs	r1, #129	; 0x81
 8006284:	4630      	mov	r0, r6
 8006286:	f002 fe17 	bl	8008eb8 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 800628a:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 800628e:	442b      	add	r3, r5
 8006290:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8006294:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8006298:	1b5b      	subs	r3, r3, r5
 800629a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800629e:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 80062a2:	1b55      	subs	r5, r2, r5
 80062a4:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 80062a8:	b973      	cbnz	r3, 80062c8 <SCSI_ProcessRead+0x8c>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80062aa:	2303      	movs	r3, #3
 80062ac:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 80062ae:	2000      	movs	r0, #0
 80062b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 80062b4:	2311      	movs	r3, #17
 80062b6:	2204      	movs	r2, #4
 80062b8:	4641      	mov	r1, r8
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff fefd 	bl	80060ba <SCSI_SenseCode>
    return -1; 
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return 0;
 80062c8:	2000      	movs	r0, #0
}
 80062ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062ce <SCSI_Read10>:
{
 80062ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d0:	4606      	mov	r6, r0
 80062d2:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80062d4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80062d8:	7a23      	ldrb	r3, [r4, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d137      	bne.n	800634e <SCSI_Read10+0x80>
 80062de:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80062e0:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da3a      	bge.n	800635e <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80062e8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	4608      	mov	r0, r1
 80062f0:	4798      	blx	r3
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d13c      	bne.n	8006370 <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80062f6:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 80062f8:	78ea      	ldrb	r2, [r5, #3]
 80062fa:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80062fc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8006300:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 8006302:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8006306:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 8006308:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800630a:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800630e:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 8006310:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8006312:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006316:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800631a:	4639      	mov	r1, r7
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ff7c 	bl	800621a <SCSI_CheckAddressRange>
 8006322:	2800      	cmp	r0, #0
 8006324:	db37      	blt.n	8006396 <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006326:	2302      	movs	r3, #2
 8006328:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800632a:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 800632e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8006332:	fb01 f202 	mul.w	r2, r1, r2
 8006336:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800633a:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 800633e:	fb03 f301 	mul.w	r3, r3, r1
 8006342:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8006346:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800634a:	4293      	cmp	r3, r2
 800634c:	d119      	bne.n	8006382 <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 8006354:	4639      	mov	r1, r7
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff70 	bl	800623c <SCSI_ProcessRead>
 800635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 800635e:	2320      	movs	r3, #32
 8006360:	2205      	movs	r2, #5
 8006362:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006366:	f7ff fea8 	bl	80060ba <SCSI_SenseCode>
      return -1;
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8006370:	233a      	movs	r3, #58	; 0x3a
 8006372:	2202      	movs	r2, #2
 8006374:	4639      	mov	r1, r7
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff fe9f 	bl	80060ba <SCSI_SenseCode>
      return -1;
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8006382:	2320      	movs	r3, #32
 8006384:	2205      	movs	r2, #5
 8006386:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff fe95 	bl	80060ba <SCSI_SenseCode>
      return -1;
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return -1; /* error */
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
}
 800639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800639c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800639c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a0:	4606      	mov	r6, r0
 80063a2:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80063a4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80063a8:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 80063ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80063b0:	bf28      	it	cs
 80063b2:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80063b6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80063ba:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 80063be:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80063c2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 80063c6:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 80063ca:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80063d4:	4639      	mov	r1, r7
 80063d6:	4640      	mov	r0, r8
 80063d8:	47c8      	blx	r9
 80063da:	2800      	cmp	r0, #0
 80063dc:	db1d      	blt.n	800641a <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 80063de:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 80063e2:	442b      	add	r3, r5
 80063e4:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 80063e8:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 80063ec:	1b5b      	subs	r3, r3, r5
 80063ee:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80063f2:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 80063f6:	1b55      	subs	r5, r2, r5
 80063f8:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 80063fc:	b1bb      	cbz	r3, 800642e <SCSI_ProcessWrite+0x92>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 80063fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006402:	bf28      	it	cs
 8006404:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8006408:	b29b      	uxth	r3, r3
 800640a:	463a      	mov	r2, r7
 800640c:	2101      	movs	r1, #1
 800640e:	4630      	mov	r0, r6
 8006410:	f002 fd60 	bl	8008ed4 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 8006414:	2000      	movs	r0, #0
}
 8006416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 800641a:	2303      	movs	r3, #3
 800641c:	2204      	movs	r2, #4
 800641e:	4641      	mov	r1, r8
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff fe4a 	bl	80060ba <SCSI_SenseCode>
    return -1; 
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800642e:	2100      	movs	r1, #0
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff fd03 	bl	8005e3c <MSC_BOT_SendCSW>
  return 0;
 8006436:	2000      	movs	r0, #0
 8006438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800643c <SCSI_Write10>:
{
 800643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	4605      	mov	r5, r0
 8006442:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8006444:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006448:	7a23      	ldrb	r3, [r4, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d172      	bne.n	8006534 <SCSI_Write10+0xf8>
 800644e:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8006450:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8006454:	2b00      	cmp	r3, #0
 8006456:	db48      	blt.n	80064ea <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8006458:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	4608      	mov	r0, r1
 8006460:	4798      	blx	r3
 8006462:	2800      	cmp	r0, #0
 8006464:	d14a      	bne.n	80064fc <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8006466:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4638      	mov	r0, r7
 800646e:	4798      	blx	r3
 8006470:	4680      	mov	r8, r0
 8006472:	2800      	cmp	r0, #0
 8006474:	d14b      	bne.n	800650e <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8006476:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 8006478:	78f2      	ldrb	r2, [r6, #3]
 800647a:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800647c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8006480:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 8006482:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8006486:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 8006488:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800648a:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800648e:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 8006490:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8006492:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006496:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 800649a:	4639      	mov	r1, r7
 800649c:	4628      	mov	r0, r5
 800649e:	f7ff febc 	bl	800621a <SCSI_CheckAddressRange>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	db4a      	blt.n	800653c <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80064a6:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 80064aa:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80064ae:	fb01 f202 	mul.w	r2, r1, r2
 80064b2:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80064b6:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 80064ba:	fb03 f301 	mul.w	r3, r3, r1
 80064be:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80064c2:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d12a      	bne.n	8006520 <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80064ca:	2101      	movs	r1, #1
 80064cc:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d2:	bf28      	it	cs
 80064d4:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f104 020c 	add.w	r2, r4, #12
 80064de:	4628      	mov	r0, r5
 80064e0:	f002 fcf8 	bl	8008ed4 <USBD_LL_PrepareReceive>
}
 80064e4:	4640      	mov	r0, r8
 80064e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 80064ea:	2320      	movs	r3, #32
 80064ec:	2205      	movs	r2, #5
 80064ee:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80064f2:	f7ff fde2 	bl	80060ba <SCSI_SenseCode>
      return -1;
 80064f6:	f04f 38ff 	mov.w	r8, #4294967295
 80064fa:	e7f3      	b.n	80064e4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80064fc:	233a      	movs	r3, #58	; 0x3a
 80064fe:	2202      	movs	r2, #2
 8006500:	4639      	mov	r1, r7
 8006502:	4628      	mov	r0, r5
 8006504:	f7ff fdd9 	bl	80060ba <SCSI_SenseCode>
      return -1;
 8006508:	f04f 38ff 	mov.w	r8, #4294967295
 800650c:	e7ea      	b.n	80064e4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 800650e:	2327      	movs	r3, #39	; 0x27
 8006510:	2202      	movs	r2, #2
 8006512:	4639      	mov	r1, r7
 8006514:	4628      	mov	r0, r5
 8006516:	f7ff fdd0 	bl	80060ba <SCSI_SenseCode>
      return -1;
 800651a:	f04f 38ff 	mov.w	r8, #4294967295
 800651e:	e7e1      	b.n	80064e4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8006520:	2320      	movs	r3, #32
 8006522:	2205      	movs	r2, #5
 8006524:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006528:	4628      	mov	r0, r5
 800652a:	f7ff fdc6 	bl	80060ba <SCSI_SenseCode>
      return -1;
 800652e:	f04f 38ff 	mov.w	r8, #4294967295
 8006532:	e7d7      	b.n	80064e4 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 8006534:	f7ff ff32 	bl	800639c <SCSI_ProcessWrite>
 8006538:	4680      	mov	r8, r0
 800653a:	e7d3      	b.n	80064e4 <SCSI_Write10+0xa8>
      return -1; /* error */      
 800653c:	f04f 38ff 	mov.w	r8, #4294967295
 8006540:	e7d0      	b.n	80064e4 <SCSI_Write10+0xa8>

08006542 <SCSI_Verify10>:
{
 8006542:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8006544:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8006548:	7853      	ldrb	r3, [r2, #1]
 800654a:	f013 0f02 	tst.w	r3, #2
 800654e:	d10a      	bne.n	8006566 <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 8006550:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8006554:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8006558:	f7ff fe5f 	bl	800621a <SCSI_CheckAddressRange>
 800655c:	2800      	cmp	r0, #0
 800655e:	db09      	blt.n	8006574 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 8006560:	2000      	movs	r0, #0
 8006562:	8160      	strh	r0, [r4, #10]
  return 0;
 8006564:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 8006566:	2324      	movs	r3, #36	; 0x24
 8006568:	2205      	movs	r2, #5
 800656a:	f7ff fda6 	bl	80060ba <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	bd10      	pop	{r4, pc}
    return -1; /* error */      
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006578:	bd10      	pop	{r4, pc}

0800657a <SCSI_ProcessCmd>:
{
 800657a:	b508      	push	{r3, lr}
  switch (params[0])
 800657c:	7813      	ldrb	r3, [r2, #0]
 800657e:	2b5a      	cmp	r3, #90	; 0x5a
 8006580:	d853      	bhi.n	800662a <SCSI_ProcessCmd+0xb0>
 8006582:	e8df f003 	tbb	[pc, r3]
 8006586:	522e      	.short	0x522e
 8006588:	52523152 	.word	0x52523152
 800658c:	52525252 	.word	0x52525252
 8006590:	52525252 	.word	0x52525252
 8006594:	52525252 	.word	0x52525252
 8006598:	52525234 	.word	0x52525234
 800659c:	52525252 	.word	0x52525252
 80065a0:	5252373d 	.word	0x5252373d
 80065a4:	5252523a 	.word	0x5252523a
 80065a8:	46524352 	.word	0x46524352
 80065ac:	52495252 	.word	0x52495252
 80065b0:	5252524c 	.word	0x5252524c
 80065b4:	52524f52 	.word	0x52524f52
 80065b8:	52525252 	.word	0x52525252
 80065bc:	52525252 	.word	0x52525252
 80065c0:	52525252 	.word	0x52525252
 80065c4:	52525252 	.word	0x52525252
 80065c8:	52525252 	.word	0x52525252
 80065cc:	52525252 	.word	0x52525252
 80065d0:	52525252 	.word	0x52525252
 80065d4:	52525252 	.word	0x52525252
 80065d8:	52525252 	.word	0x52525252
 80065dc:	52525252 	.word	0x52525252
 80065e0:	40          	.byte	0x40
 80065e1:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 80065e2:	f7ff fd83 	bl	80060ec <SCSI_TestUnitReady>
 80065e6:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 80065e8:	f7ff fd2e 	bl	8006048 <SCSI_RequestSense>
 80065ec:	bd08      	pop	{r3, pc}
    return SCSI_Inquiry(pdev, lun, params);
 80065ee:	f7ff fce1 	bl	8005fb4 <SCSI_Inquiry>
 80065f2:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 80065f4:	f7ff fd5c 	bl	80060b0 <SCSI_StartStopUnit>
 80065f8:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 80065fa:	f7ff fd59 	bl	80060b0 <SCSI_StartStopUnit>
 80065fe:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense6 (pdev, lun, params);
 8006600:	f7ff fcfe 	bl	8006000 <SCSI_ModeSense6>
 8006604:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense10 (pdev, lun, params);
 8006606:	f7ff fd0d 	bl	8006024 <SCSI_ModeSense10>
 800660a:	bd08      	pop	{r3, pc}
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 800660c:	f7ff fd95 	bl	800613a <SCSI_ReadFormatCapacity>
 8006610:	bd08      	pop	{r3, pc}
    return SCSI_ReadCapacity10(pdev, lun, params);
 8006612:	f7ff fdd0 	bl	80061b6 <SCSI_ReadCapacity10>
 8006616:	bd08      	pop	{r3, pc}
    return SCSI_Read10(pdev, lun, params); 
 8006618:	f7ff fe59 	bl	80062ce <SCSI_Read10>
 800661c:	bd08      	pop	{r3, pc}
    return SCSI_Write10(pdev, lun, params);
 800661e:	f7ff ff0d 	bl	800643c <SCSI_Write10>
 8006622:	bd08      	pop	{r3, pc}
    return SCSI_Verify10(pdev, lun, params);
 8006624:	f7ff ff8d 	bl	8006542 <SCSI_Verify10>
 8006628:	bd08      	pop	{r3, pc}
    SCSI_SenseCode(pdev, 
 800662a:	2320      	movs	r3, #32
 800662c:	2205      	movs	r2, #5
 800662e:	f7ff fd44 	bl	80060ba <SCSI_SenseCode>
    return -1;
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006636:	bd08      	pop	{r3, pc}

08006638 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006638:	b198      	cbz	r0, 8006662 <USBD_Init+0x2a>
{
 800663a:	b508      	push	{r3, lr}
 800663c:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800663e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8006642:	b110      	cbz	r0, 800664a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8006644:	2000      	movs	r0, #0
 8006646:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800664a:	b109      	cbz	r1, 8006650 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800664c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8006650:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006652:	2301      	movs	r3, #1
 8006654:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8006658:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800665a:	f002 fb77 	bl	8008d4c <USBD_LL_Init>
  
  return USBD_OK; 
 800665e:	2000      	movs	r0, #0
 8006660:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8006662:	2002      	movs	r0, #2
 8006664:	4770      	bx	lr

08006666 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8006666:	b119      	cbz	r1, 8006670 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006668:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800666c:	2000      	movs	r0, #0
 800666e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8006670:	2002      	movs	r0, #2
  }
  
  return status;
}
 8006672:	4770      	bx	lr

08006674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006674:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006676:	f002 fba3 	bl	8008dc0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800667a:	2000      	movs	r0, #0
 800667c:	bd08      	pop	{r3, pc}

0800667e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800667e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8006680:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006684:	b123      	cbz	r3, 8006690 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4798      	blx	r3
 800668a:	b118      	cbz	r0, 8006694 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800668c:	2002      	movs	r0, #2
 800668e:	bd08      	pop	{r3, pc}
 8006690:	2002      	movs	r0, #2
 8006692:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 8006694:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8006696:	bd08      	pop	{r3, pc}

08006698 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006698:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800669a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4798      	blx	r3
  return USBD_OK;
}
 80066a2:	2000      	movs	r0, #0
 80066a4:	bd08      	pop	{r3, pc}

080066a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066a6:	b538      	push	{r3, r4, r5, lr}
 80066a8:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066aa:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 f91e 	bl	80068f0 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80066ba:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80066be:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80066c2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 80066c6:	f001 031f 	and.w	r3, r1, #31
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d00e      	beq.n	80066ec <USBD_LL_SetupStage+0x46>
 80066ce:	b13b      	cbz	r3, 80066e0 <USBD_LL_SetupStage+0x3a>
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d010      	beq.n	80066f6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80066d4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80066d8:	4620      	mov	r0, r4
 80066da:	f002 fbac 	bl	8008e36 <USBD_LL_StallEP>
    break;
 80066de:	e003      	b.n	80066e8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80066e0:	4629      	mov	r1, r5
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 fa8a 	bl	8006bfc <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80066e8:	2000      	movs	r0, #0
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80066ec:	4629      	mov	r1, r5
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 faa8 	bl	8006c44 <USBD_StdItfReq>
    break;
 80066f4:	e7f8      	b.n	80066e8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80066f6:	4629      	mov	r1, r5
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fabf 	bl	8006c7c <USBD_StdEPReq>
    break;
 80066fe:	e7f3      	b.n	80066e8 <USBD_LL_SetupStage+0x42>

08006700 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8006704:	bb19      	cbnz	r1, 800674e <USBD_LL_DataOutStage+0x4e>
 8006706:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006708:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800670c:	2a03      	cmp	r2, #3
 800670e:	d127      	bne.n	8006760 <USBD_LL_DataOutStage+0x60>
    {
      if(pep->rem_length > pep->maxpacket)
 8006710:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8006714:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8006718:	4291      	cmp	r1, r2
 800671a:	d80b      	bhi.n	8006734 <USBD_LL_DataOutStage+0x34>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800671c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	b11b      	cbz	r3, 800672c <USBD_LL_DataOutStage+0x2c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006724:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006728:	2a03      	cmp	r2, #3
 800672a:	d00e      	beq.n	800674a <USBD_LL_DataOutStage+0x4a>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fb6d 	bl	8006e0c <USBD_CtlSendStatus>
 8006732:	e015      	b.n	8006760 <USBD_LL_DataOutStage+0x60>
        pep->rem_length -=  pep->maxpacket;
 8006734:	1a89      	subs	r1, r1, r2
 8006736:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 800673a:	428a      	cmp	r2, r1
 800673c:	bf28      	it	cs
 800673e:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8006740:	b292      	uxth	r2, r2
 8006742:	4619      	mov	r1, r3
 8006744:	f000 fb5a 	bl	8006dfc <USBD_CtlContinueRx>
 8006748:	e00a      	b.n	8006760 <USBD_LL_DataOutStage+0x60>
          pdev->pClass->EP0_RxReady(pdev); 
 800674a:	4798      	blx	r3
 800674c:	e7ee      	b.n	800672c <USBD_LL_DataOutStage+0x2c>
 800674e:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006750:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	b11b      	cbz	r3, 8006760 <USBD_LL_DataOutStage+0x60>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006758:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800675c:	2903      	cmp	r1, #3
 800675e:	d001      	beq.n	8006764 <USBD_LL_DataOutStage+0x64>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006760:	2000      	movs	r0, #0
 8006762:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8006764:	4611      	mov	r1, r2
 8006766:	4798      	blx	r3
 8006768:	e7fa      	b.n	8006760 <USBD_LL_DataOutStage+0x60>

0800676a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800676a:	b510      	push	{r4, lr}
 800676c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800676e:	2900      	cmp	r1, #0
 8006770:	d147      	bne.n	8006802 <USBD_LL_DataInStage+0x98>
 8006772:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006774:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8006778:	2a02      	cmp	r2, #2
 800677a:	d005      	beq.n	8006788 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800677c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8006780:	2b01      	cmp	r3, #1
 8006782:	d03a      	beq.n	80067fa <USBD_LL_DataInStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006784:	2000      	movs	r0, #0
 8006786:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8006788:	69c1      	ldr	r1, [r0, #28]
 800678a:	6a02      	ldr	r2, [r0, #32]
 800678c:	4291      	cmp	r1, r2
 800678e:	d817      	bhi.n	80067c0 <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 8006790:	6981      	ldr	r1, [r0, #24]
 8006792:	fbb1 f3f2 	udiv	r3, r1, r2
 8006796:	fb02 1313 	mls	r3, r2, r3, r1
 800679a:	b92b      	cbnz	r3, 80067a8 <USBD_LL_DataInStage+0x3e>
 800679c:	428a      	cmp	r2, r1
 800679e:	d803      	bhi.n	80067a8 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 80067a0:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d318      	bcc.n	80067da <USBD_LL_DataInStage+0x70>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80067a8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	b11b      	cbz	r3, 80067b8 <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067b0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80067b4:	2a03      	cmp	r2, #3
 80067b6:	d01d      	beq.n	80067f4 <USBD_LL_DataInStage+0x8a>
          USBD_CtlReceiveStatus(pdev);
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fb32 	bl	8006e22 <USBD_CtlReceiveStatus>
 80067be:	e7dd      	b.n	800677c <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 80067c0:	1a8a      	subs	r2, r1, r2
 80067c2:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 80067c4:	b292      	uxth	r2, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f000 fb10 	bl	8006dec <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 80067cc:	2300      	movs	r3, #0
 80067ce:	461a      	mov	r2, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	4620      	mov	r0, r4
 80067d4:	f002 fb7e 	bl	8008ed4 <USBD_LL_PrepareReceive>
 80067d8:	e7d0      	b.n	800677c <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80067da:	2200      	movs	r2, #0
 80067dc:	4611      	mov	r1, r2
 80067de:	f000 fb05 	bl	8006dec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80067e2:	2100      	movs	r1, #0
 80067e4:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80067e8:	460b      	mov	r3, r1
 80067ea:	460a      	mov	r2, r1
 80067ec:	4620      	mov	r0, r4
 80067ee:	f002 fb71 	bl	8008ed4 <USBD_LL_PrepareReceive>
 80067f2:	e7c3      	b.n	800677c <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 80067f4:	4620      	mov	r0, r4
 80067f6:	4798      	blx	r3
 80067f8:	e7de      	b.n	80067b8 <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8006800:	e7c0      	b.n	8006784 <USBD_LL_DataInStage+0x1a>
 8006802:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8006804:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ba      	beq.n	8006784 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800680e:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8006812:	2903      	cmp	r1, #3
 8006814:	d1b6      	bne.n	8006784 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8006816:	4611      	mov	r1, r2
 8006818:	4798      	blx	r3
 800681a:	e7b3      	b.n	8006784 <USBD_LL_DataInStage+0x1a>

0800681c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	2200      	movs	r2, #0
 8006824:	4611      	mov	r1, r2
 8006826:	f002 fad9 	bl	8008ddc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800682a:	2540      	movs	r5, #64	; 0x40
 800682c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006830:	462b      	mov	r3, r5
 8006832:	2200      	movs	r2, #0
 8006834:	2180      	movs	r1, #128	; 0x80
 8006836:	4620      	mov	r0, r4
 8006838:	f002 fad0 	bl	8008ddc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800683c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683e:	2301      	movs	r3, #1
 8006840:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8006844:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8006848:	b12b      	cbz	r3, 8006856 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800684a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	7921      	ldrb	r1, [r4, #4]
 8006852:	4620      	mov	r0, r4
 8006854:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8006856:	2000      	movs	r0, #0
 8006858:	bd38      	pop	{r3, r4, r5, pc}

0800685a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800685a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800685c:	2000      	movs	r0, #0
 800685e:	4770      	bx	lr

08006860 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006860:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006864:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006868:	2304      	movs	r3, #4
 800686a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800686e:	2000      	movs	r0, #0
 8006870:	4770      	bx	lr

08006872 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8006872:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8006876:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800687a:	2000      	movs	r0, #0
 800687c:	4770      	bx	lr

0800687e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800687e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006880:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006884:	2b03      	cmp	r3, #3
 8006886:	d001      	beq.n	800688c <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8006888:	2000      	movs	r0, #0
 800688a:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 800688c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f8      	beq.n	8006888 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8006896:	4798      	blx	r3
 8006898:	e7f6      	b.n	8006888 <USBD_LL_SOF+0xa>

0800689a <USBD_LL_IsoINIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800689a:	2000      	movs	r0, #0
 800689c:	4770      	bx	lr

0800689e <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800689e:	2000      	movs	r0, #0
 80068a0:	4770      	bx	lr

080068a2 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80068a2:	2000      	movs	r0, #0
 80068a4:	4770      	bx	lr

080068a6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80068a6:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a8:	2201      	movs	r2, #1
 80068aa:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80068ae:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	7901      	ldrb	r1, [r0, #4]
 80068b6:	4790      	blx	r2
   
  return USBD_OK;
}
 80068b8:	2000      	movs	r0, #0
 80068ba:	bd08      	pop	{r3, pc}

080068bc <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 80068bc:	2300      	movs	r3, #0

    while (*buf != '\0') 
 80068be:	e002      	b.n	80068c6 <USBD_GetLen+0xa>
    {
        len++;
 80068c0:	3301      	adds	r3, #1
 80068c2:	b2db      	uxtb	r3, r3
        buf++;
 80068c4:	3001      	adds	r0, #1
    while (*buf != '\0') 
 80068c6:	7802      	ldrb	r2, [r0, #0]
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d1f9      	bne.n	80068c0 <USBD_GetLen+0x4>
    }

    return len;
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	4770      	bx	lr

080068d0 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068d0:	884b      	ldrh	r3, [r1, #2]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d000      	beq.n	80068d8 <USBD_SetFeature+0x8>
 80068d6:	4770      	bx	lr
{
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 80068dc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80068e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fa8f 	bl	8006e0c <USBD_CtlSendStatus>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80068f0:	780b      	ldrb	r3, [r1, #0]
 80068f2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80068f4:	784b      	ldrb	r3, [r1, #1]
 80068f6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80068f8:	788b      	ldrb	r3, [r1, #2]
 80068fa:	78ca      	ldrb	r2, [r1, #3]
 80068fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006900:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006902:	790b      	ldrb	r3, [r1, #4]
 8006904:	794a      	ldrb	r2, [r1, #5]
 8006906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800690a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800690c:	798b      	ldrb	r3, [r1, #6]
 800690e:	79ca      	ldrb	r2, [r1, #7]
 8006910:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006914:	80c3      	strh	r3, [r0, #6]
 8006916:	4770      	bx	lr

08006918 <USBD_CtlError>:
{
 8006918:	b510      	push	{r4, lr}
 800691a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	f002 fa8a 	bl	8008e36 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006922:	2100      	movs	r1, #0
 8006924:	4620      	mov	r0, r4
 8006926:	f002 fa86 	bl	8008e36 <USBD_LL_StallEP>
 800692a:	bd10      	pop	{r4, pc}

0800692c <USBD_GetDescriptor>:
{
 800692c:	b530      	push	{r4, r5, lr}
 800692e:	b083      	sub	sp, #12
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8006934:	884a      	ldrh	r2, [r1, #2]
 8006936:	0a13      	lsrs	r3, r2, #8
 8006938:	3b01      	subs	r3, #1
 800693a:	2b0e      	cmp	r3, #14
 800693c:	f200 808d 	bhi.w	8006a5a <USBD_GetDescriptor+0x12e>
 8006940:	e8df f003 	tbb	[pc, r3]
 8006944:	8b331f17 	.word	0x8b331f17
 8006948:	8b7c6f8b 	.word	0x8b7c6f8b
 800694c:	8b8b8b8b 	.word	0x8b8b8b8b
 8006950:	8b8b      	.short	0x8b8b
 8006952:	08          	.byte	0x08
 8006953:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006954:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f10d 0106 	add.w	r1, sp, #6
 800695e:	7c00      	ldrb	r0, [r0, #16]
 8006960:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8006962:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006966:	b112      	cbz	r2, 800696e <USBD_GetDescriptor+0x42>
 8006968:	88eb      	ldrh	r3, [r5, #6]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d179      	bne.n	8006a62 <USBD_GetDescriptor+0x136>
}
 800696e:	b003      	add	sp, #12
 8006970:	bd30      	pop	{r4, r5, pc}
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006972:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f10d 0106 	add.w	r1, sp, #6
 800697c:	7c00      	ldrb	r0, [r0, #16]
 800697e:	4798      	blx	r3
    break;
 8006980:	e7ef      	b.n	8006962 <USBD_GetDescriptor+0x36>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006982:	7c03      	ldrb	r3, [r0, #16]
 8006984:	b943      	cbnz	r3, 8006998 <USBD_GetDescriptor+0x6c>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006986:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	f10d 0006 	add.w	r0, sp, #6
 8006990:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006992:	2302      	movs	r3, #2
 8006994:	7043      	strb	r3, [r0, #1]
 8006996:	e7e4      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006998:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	f10d 0006 	add.w	r0, sp, #6
 80069a2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a4:	2302      	movs	r3, #2
 80069a6:	7043      	strb	r3, [r0, #1]
 80069a8:	e7db      	b.n	8006962 <USBD_GetDescriptor+0x36>
    switch ((uint8_t)(req->wValue))
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	2a05      	cmp	r2, #5
 80069ae:	d834      	bhi.n	8006a1a <USBD_GetDescriptor+0xee>
 80069b0:	e8df f002 	tbb	[pc, r2]
 80069b4:	1b130b03 	.word	0x1b130b03
 80069b8:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80069ba:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f10d 0106 	add.w	r1, sp, #6
 80069c4:	7c00      	ldrb	r0, [r0, #16]
 80069c6:	4798      	blx	r3
      break;
 80069c8:	e7cb      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069ca:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f10d 0106 	add.w	r1, sp, #6
 80069d4:	7c00      	ldrb	r0, [r0, #16]
 80069d6:	4798      	blx	r3
      break;
 80069d8:	e7c3      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069da:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f10d 0106 	add.w	r1, sp, #6
 80069e4:	7c00      	ldrb	r0, [r0, #16]
 80069e6:	4798      	blx	r3
      break;
 80069e8:	e7bb      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069ea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f10d 0106 	add.w	r1, sp, #6
 80069f4:	7c00      	ldrb	r0, [r0, #16]
 80069f6:	4798      	blx	r3
      break;
 80069f8:	e7b3      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069fa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f10d 0106 	add.w	r1, sp, #6
 8006a04:	7c00      	ldrb	r0, [r0, #16]
 8006a06:	4798      	blx	r3
      break;
 8006a08:	e7ab      	b.n	8006962 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a0a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f10d 0106 	add.w	r1, sp, #6
 8006a14:	7c00      	ldrb	r0, [r0, #16]
 8006a16:	4798      	blx	r3
      break;
 8006a18:	e7a3      	b.n	8006962 <USBD_GetDescriptor+0x36>
       USBD_CtlError(pdev , req);
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7ff ff7c 	bl	8006918 <USBD_CtlError>
      return;
 8006a20:	e7a5      	b.n	800696e <USBD_GetDescriptor+0x42>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006a22:	7c03      	ldrb	r3, [r0, #16]
 8006a24:	b933      	cbnz	r3, 8006a34 <USBD_GetDescriptor+0x108>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a26:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	f10d 0006 	add.w	r0, sp, #6
 8006a30:	4798      	blx	r3
      break;
 8006a32:	e796      	b.n	8006962 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7ff ff6f 	bl	8006918 <USBD_CtlError>
      return;
 8006a3a:	e798      	b.n	800696e <USBD_GetDescriptor+0x42>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006a3c:	7c03      	ldrb	r3, [r0, #16]
 8006a3e:	b943      	cbnz	r3, 8006a52 <USBD_GetDescriptor+0x126>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a40:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f10d 0006 	add.w	r0, sp, #6
 8006a4a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a4c:	2307      	movs	r3, #7
 8006a4e:	7043      	strb	r3, [r0, #1]
      break; 
 8006a50:	e787      	b.n	8006962 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7ff ff60 	bl	8006918 <USBD_CtlError>
      return;
 8006a58:	e789      	b.n	800696e <USBD_GetDescriptor+0x42>
     USBD_CtlError(pdev , req);
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	f7ff ff5c 	bl	8006918 <USBD_CtlError>
    return;
 8006a60:	e785      	b.n	800696e <USBD_GetDescriptor+0x42>
    len = MIN(len , req->wLength);
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf28      	it	cs
 8006a66:	461a      	movcs	r2, r3
 8006a68:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f9af 	bl	8006dd2 <USBD_CtlSendData>
 8006a74:	e77b      	b.n	800696e <USBD_GetDescriptor+0x42>

08006a76 <USBD_SetAddress>:
{
 8006a76:	b538      	push	{r3, r4, r5, lr}
 8006a78:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006a7a:	888b      	ldrh	r3, [r1, #4]
 8006a7c:	b9e3      	cbnz	r3, 8006ab8 <USBD_SetAddress+0x42>
 8006a7e:	88cb      	ldrh	r3, [r1, #6]
 8006a80:	b9d3      	cbnz	r3, 8006ab8 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006a82:	788d      	ldrb	r5, [r1, #2]
 8006a84:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006a88:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d00c      	beq.n	8006aaa <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 8006a90:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006a94:	4629      	mov	r1, r5
 8006a96:	f002 fa01 	bl	8008e9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f9b6 	bl	8006e0c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8006aa0:	b135      	cbz	r5, 8006ab0 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 8006aaa:	f7ff ff35 	bl	8006918 <USBD_CtlError>
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                        
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff ff2d 	bl	8006918 <USBD_CtlError>
 8006abe:	bd38      	pop	{r3, r4, r5, pc}

08006ac0 <USBD_SetConfig>:
{
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8006ac6:	7889      	ldrb	r1, [r1, #2]
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <USBD_SetConfig+0xa0>)
 8006aca:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006acc:	2901      	cmp	r1, #1
 8006ace:	d809      	bhi.n	8006ae4 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8006ad0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d009      	beq.n	8006aec <USBD_SetConfig+0x2c>
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d01c      	beq.n	8006b16 <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7ff ff1b 	bl	8006918 <USBD_CtlError>
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                              
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7ff ff17 	bl	8006918 <USBD_CtlError>
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8006aec:	b181      	cbz	r1, 8006b10 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8006aee:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006af0:	2303      	movs	r3, #3
 8006af2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006af6:	f7ff fdc2 	bl	800667e <USBD_SetClassConfig>
 8006afa:	2802      	cmp	r0, #2
 8006afc:	d003      	beq.n	8006b06 <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f984 	bl	8006e0c <USBD_CtlSendStatus>
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 8006b06:	4629      	mov	r1, r5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff ff05 	bl	8006918 <USBD_CtlError>
          return;
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 8006b10:	f000 f97c 	bl	8006e0c <USBD_CtlSendStatus>
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0) 
 8006b16:	b189      	cbz	r1, 8006b3c <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8006b18:	6843      	ldr	r3, [r0, #4]
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d01d      	beq.n	8006b5a <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006b1e:	b2d9      	uxtb	r1, r3
 8006b20:	f7ff fdba 	bl	8006698 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <USBD_SetConfig+0xa0>)
 8006b26:	7819      	ldrb	r1, [r3, #0]
 8006b28:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7ff fda7 	bl	800667e <USBD_SetClassConfig>
 8006b30:	2802      	cmp	r0, #2
 8006b32:	d00d      	beq.n	8006b50 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 f969 	bl	8006e0c <USBD_CtlSendStatus>
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006b42:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8006b44:	f7ff fda8 	bl	8006698 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f95f 	bl	8006e0c <USBD_CtlSendStatus>
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 8006b50:	4629      	mov	r1, r5
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff fee0 	bl	8006918 <USBD_CtlError>
          return;
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 8006b5a:	f000 f957 	bl	8006e0c <USBD_CtlSendStatus>
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	2000f638 	.word	0x2000f638

08006b64 <USBD_GetConfig>:
{
 8006b64:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 8006b66:	88cb      	ldrh	r3, [r1, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d108      	bne.n	8006b7e <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8006b6c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d007      	beq.n	8006b84 <USBD_GetConfig+0x20>
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d00d      	beq.n	8006b94 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8006b78:	f7ff fece 	bl	8006918 <USBD_CtlError>
 8006b7c:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 8006b7e:	f7ff fecb 	bl	8006918 <USBD_CtlError>
 8006b82:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8006b84:	4601      	mov	r1, r0
 8006b86:	2300      	movs	r3, #0
 8006b88:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f000 f920 	bl	8006dd2 <USBD_CtlSendData>
      break;
 8006b92:	bd08      	pop	{r3, pc}
      USBD_CtlSendData (pdev, 
 8006b94:	2201      	movs	r2, #1
 8006b96:	1d01      	adds	r1, r0, #4
 8006b98:	f000 f91b 	bl	8006dd2 <USBD_CtlSendData>
      break;
 8006b9c:	bd08      	pop	{r3, pc}

08006b9e <USBD_GetStatus>:
{
 8006b9e:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8006ba0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006ba4:	3b02      	subs	r3, #2
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d80c      	bhi.n	8006bc4 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006baa:	2301      	movs	r3, #1
 8006bac:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8006bae:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8006bb2:	b10b      	cbz	r3, 8006bb8 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f100 010c 	add.w	r1, r0, #12
 8006bbe:	f000 f908 	bl	8006dd2 <USBD_CtlSendData>
    break;
 8006bc2:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8006bc4:	f7ff fea8 	bl	8006918 <USBD_CtlError>
 8006bc8:	bd08      	pop	{r3, pc}

08006bca <USBD_ClrFeature>:
{
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8006bce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006bd2:	3b02      	subs	r3, #2
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d80e      	bhi.n	8006bf6 <USBD_ClrFeature+0x2c>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006bd8:	884b      	ldrh	r3, [r1, #2]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d000      	beq.n	8006be0 <USBD_ClrFeature+0x16>
 8006bde:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 8006be0:	2300      	movs	r3, #0
 8006be2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006be6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f90c 	bl	8006e0c <USBD_CtlSendStatus>
 8006bf4:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8006bf6:	f7ff fe8f 	bl	8006918 <USBD_CtlError>
}
 8006bfa:	e7f0      	b.n	8006bde <USBD_ClrFeature+0x14>

08006bfc <USBD_StdDevReq>:
{
 8006bfc:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8006bfe:	784b      	ldrb	r3, [r1, #1]
 8006c00:	2b09      	cmp	r3, #9
 8006c02:	d81c      	bhi.n	8006c3e <USBD_StdDevReq+0x42>
 8006c04:	e8df f003 	tbb	[pc, r3]
 8006c08:	151b1812 	.word	0x151b1812
 8006c0c:	1b05091b 	.word	0x1b05091b
 8006c10:	0c0f      	.short	0x0c0f
    USBD_GetDescriptor (pdev, req) ;
 8006c12:	f7ff fe8b 	bl	800692c <USBD_GetDescriptor>
}
 8006c16:	2000      	movs	r0, #0
 8006c18:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8006c1a:	f7ff ff2c 	bl	8006a76 <USBD_SetAddress>
    break;
 8006c1e:	e7fa      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8006c20:	f7ff ff4e 	bl	8006ac0 <USBD_SetConfig>
    break;
 8006c24:	e7f7      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8006c26:	f7ff ff9d 	bl	8006b64 <USBD_GetConfig>
    break;
 8006c2a:	e7f4      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8006c2c:	f7ff ffb7 	bl	8006b9e <USBD_GetStatus>
    break;
 8006c30:	e7f1      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8006c32:	f7ff fe4d 	bl	80068d0 <USBD_SetFeature>
    break;
 8006c36:	e7ee      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8006c38:	f7ff ffc7 	bl	8006bca <USBD_ClrFeature>
    break;
 8006c3c:	e7eb      	b.n	8006c16 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8006c3e:	f7ff fe6b 	bl	8006918 <USBD_CtlError>
    break;
 8006c42:	e7e8      	b.n	8006c16 <USBD_StdDevReq+0x1a>

08006c44 <USBD_StdItfReq>:
{
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8006c4a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d111      	bne.n	8006c76 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006c52:	790b      	ldrb	r3, [r1, #4]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d903      	bls.n	8006c60 <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
 8006c58:	f7ff fe5e 	bl	8006918 <USBD_CtlError>
}
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 8006c60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006c68:	88eb      	ldrh	r3, [r5, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f6      	bne.n	8006c5c <USBD_StdItfReq+0x18>
         USBD_CtlSendStatus(pdev);
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f8cc 	bl	8006e0c <USBD_CtlSendStatus>
 8006c74:	e7f2      	b.n	8006c5c <USBD_StdItfReq+0x18>
     USBD_CtlError(pdev , req);
 8006c76:	f7ff fe4f 	bl	8006918 <USBD_CtlError>
    break;
 8006c7a:	e7ef      	b.n	8006c5c <USBD_StdItfReq+0x18>

08006c7c <USBD_StdEPReq>:
{
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4605      	mov	r5, r0
 8006c80:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8006c82:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8006c84:	780b      	ldrb	r3, [r1, #0]
 8006c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d011      	beq.n	8006cb2 <USBD_StdEPReq+0x36>
 8006c8e:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8006c90:	7863      	ldrb	r3, [r4, #1]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d02d      	beq.n	8006cf2 <USBD_StdEPReq+0x76>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d04f      	beq.n	8006d3a <USBD_StdEPReq+0xbe>
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d10d      	bne.n	8006cba <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 8006c9e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d00b      	beq.n	8006cbe <USBD_StdEPReq+0x42>
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d010      	beq.n	8006ccc <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8006caa:	4621      	mov	r1, r4
 8006cac:	f7ff fe34 	bl	8006918 <USBD_CtlError>
      break;    
 8006cb0:	e003      	b.n	8006cba <USBD_StdEPReq+0x3e>
    pdev->pClass->Setup (pdev, req);
 8006cb2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4798      	blx	r3
}
 8006cba:	2000      	movs	r0, #0
 8006cbc:	bd38      	pop	{r3, r4, r5, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	bf18      	it	ne
 8006cc2:	2980      	cmpne	r1, #128	; 0x80
 8006cc4:	d0f9      	beq.n	8006cba <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8006cc6:	f002 f8b6 	bl	8008e36 <USBD_LL_StallEP>
 8006cca:	e7f6      	b.n	8006cba <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006ccc:	8863      	ldrh	r3, [r4, #2]
 8006cce:	b91b      	cbnz	r3, 8006cd8 <USBD_StdEPReq+0x5c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	bf18      	it	ne
 8006cd4:	2980      	cmpne	r1, #128	; 0x80
 8006cd6:	d109      	bne.n	8006cec <USBD_StdEPReq+0x70>
      pdev->pClass->Setup (pdev, req);   
 8006cd8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f000 f891 	bl	8006e0c <USBD_CtlSendStatus>
      break;
 8006cea:	e7e6      	b.n	8006cba <USBD_StdEPReq+0x3e>
          USBD_LL_StallEP(pdev , ep_addr);
 8006cec:	f002 f8a3 	bl	8008e36 <USBD_LL_StallEP>
 8006cf0:	e7f2      	b.n	8006cd8 <USBD_StdEPReq+0x5c>
    switch (pdev->dev_state) 
 8006cf2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d005      	beq.n	8006d06 <USBD_StdEPReq+0x8a>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d00a      	beq.n	8006d14 <USBD_StdEPReq+0x98>
      USBD_CtlError(pdev , req);
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f7ff fe0a 	bl	8006918 <USBD_CtlError>
      break;    
 8006d04:	e7d9      	b.n	8006cba <USBD_StdEPReq+0x3e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006d06:	2900      	cmp	r1, #0
 8006d08:	bf18      	it	ne
 8006d0a:	2980      	cmpne	r1, #128	; 0x80
 8006d0c:	d0d5      	beq.n	8006cba <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8006d0e:	f002 f892 	bl	8008e36 <USBD_LL_StallEP>
 8006d12:	e7d2      	b.n	8006cba <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006d14:	8863      	ldrh	r3, [r4, #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1cf      	bne.n	8006cba <USBD_StdEPReq+0x3e>
        if ((ep_addr & 0x7F) != 0x00) 
 8006d1a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006d1e:	d103      	bne.n	8006d28 <USBD_StdEPReq+0xac>
        USBD_CtlSendStatus(pdev);
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f873 	bl	8006e0c <USBD_CtlSendStatus>
 8006d26:	e7c8      	b.n	8006cba <USBD_StdEPReq+0x3e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006d28:	f002 f893 	bl	8008e52 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8006d2c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	4621      	mov	r1, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	4798      	blx	r3
 8006d38:	e7f2      	b.n	8006d20 <USBD_StdEPReq+0xa4>
    switch (pdev->dev_state) 
 8006d3a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d005      	beq.n	8006d4e <USBD_StdEPReq+0xd2>
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d009      	beq.n	8006d5a <USBD_StdEPReq+0xde>
      USBD_CtlError(pdev , req);
 8006d46:	4621      	mov	r1, r4
 8006d48:	f7ff fde6 	bl	8006918 <USBD_CtlError>
      break;
 8006d4c:	e7b5      	b.n	8006cba <USBD_StdEPReq+0x3e>
      if ((ep_addr & 0x7F) != 0x00) 
 8006d4e:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006d52:	d0b2      	beq.n	8006cba <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8006d54:	f002 f86f 	bl	8008e36 <USBD_LL_StallEP>
 8006d58:	e7af      	b.n	8006cba <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006d5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d5e:	d111      	bne.n	8006d84 <USBD_StdEPReq+0x108>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006d60:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006d64:	3410      	adds	r4, #16
 8006d66:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8006d6a:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f002 f87e 	bl	8008e6e <USBD_LL_IsStallEP>
 8006d72:	b170      	cbz	r0, 8006d92 <USBD_StdEPReq+0x116>
        pep->status = 0x0001;     
 8006d74:	2301      	movs	r3, #1
 8006d76:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8006d78:	2202      	movs	r2, #2
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f828 	bl	8006dd2 <USBD_CtlSendData>
      break;
 8006d82:	e79a      	b.n	8006cba <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006d84:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8006d88:	3401      	adds	r4, #1
 8006d8a:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8006d8e:	3404      	adds	r4, #4
 8006d90:	e7ec      	b.n	8006d6c <USBD_StdEPReq+0xf0>
        pep->status = 0x0000;  
 8006d92:	2300      	movs	r3, #0
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	e7ef      	b.n	8006d78 <USBD_StdEPReq+0xfc>

08006d98 <USBD_GetString>:
  if (desc != NULL) 
 8006d98:	b1d0      	cbz	r0, 8006dd0 <USBD_GetString+0x38>
{
 8006d9a:	b570      	push	{r4, r5, r6, lr}
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	4616      	mov	r6, r2
 8006da0:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006da2:	f7ff fd8b 	bl	80068bc <USBD_GetLen>
 8006da6:	3001      	adds	r0, #1
 8006da8:	0040      	lsls	r0, r0, #1
 8006daa:	b280      	uxth	r0, r0
 8006dac:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8006dae:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006db0:	2303      	movs	r3, #3
 8006db2:	706b      	strb	r3, [r5, #1]
 8006db4:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8006db6:	e007      	b.n	8006dc8 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	3401      	adds	r4, #1
 8006dbe:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8006dc8:	7821      	ldrb	r1, [r4, #0]
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d1f4      	bne.n	8006db8 <USBD_GetString+0x20>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	4770      	bx	lr

08006dd2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006ddc:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8006dde:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006de0:	460a      	mov	r2, r1
 8006de2:	2100      	movs	r1, #0
 8006de4:	f002 f868 	bl	8008eb8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006de8:	2000      	movs	r0, #0
 8006dea:	bd10      	pop	{r4, pc}

08006dec <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006dec:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006dee:	4613      	mov	r3, r2
 8006df0:	460a      	mov	r2, r1
 8006df2:	2100      	movs	r1, #0
 8006df4:	f002 f860 	bl	8008eb8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006df8:	2000      	movs	r0, #0
 8006dfa:	bd08      	pop	{r3, pc}

08006dfc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006dfc:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8006dfe:	4613      	mov	r3, r2
 8006e00:	460a      	mov	r2, r1
 8006e02:	2100      	movs	r1, #0
 8006e04:	f002 f866 	bl	8008ed4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8006e08:	2000      	movs	r0, #0
 8006e0a:	bd08      	pop	{r3, pc}

08006e0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006e0c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e0e:	2304      	movs	r3, #4
 8006e10:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006e14:	2300      	movs	r3, #0
 8006e16:	461a      	mov	r2, r3
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f002 f84d 	bl	8008eb8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8006e1e:	2000      	movs	r0, #0
 8006e20:	bd08      	pop	{r3, pc}

08006e22 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006e22:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006e24:	2305      	movs	r3, #5
 8006e26:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f002 f850 	bl	8008ed4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8006e34:	2000      	movs	r0, #0
 8006e36:	bd08      	pop	{r3, pc}

08006e38 <GRAPHICS_MainTask>:
//extern  WM_HWIN CreateFramewin(void);
extern WM_HWIN CreateWindowMain(void);
extern WM_HWIN CreateWindowGraph(void);


void GRAPHICS_MainTask(void) {
 8006e38:	b508      	push	{r3, lr}
  /* 1- Create a FrameWin using GUIBuilder */
	// CreateFramewin();
	CreateWindowMain();
 8006e3a:	f000 f913 	bl	8007064 <CreateWindowMain>
	//GUI_DispStringAt("Hello world!", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);

/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 8006e3e:	2064      	movs	r0, #100	; 0x64
 8006e40:	f00f fdc0 	bl	80169c4 <GUI_Delay>
 8006e44:	e7fb      	b.n	8006e3e <GRAPHICS_MainTask+0x6>
	...

08006e48 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	4604      	mov	r4, r0
  int                    NCode;
  int                    Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8006e4c:	6803      	ldr	r3, [r0, #0]
 8006e4e:	2b1d      	cmp	r3, #29
 8006e50:	d005      	beq.n	8006e5e <_cbDialog+0x16>
 8006e52:	2b26      	cmp	r3, #38	; 0x26
 8006e54:	f000 80e7 	beq.w	8007026 <_cbDialog+0x1de>
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8006e58:	f00b fb7a 	bl	8012550 <WM_DefaultProc>
 8006e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    WINDOW_SetBkColor(hItem, GUI_MAKE_COLOR(0x00000000));
 8006e5e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8006e62:	6840      	ldr	r0, [r0, #4]
 8006e64:	f002 f9c4 	bl	80091f0 <WINDOW_SetBkColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
 8006e68:	f640 0101 	movw	r1, #2049	; 0x801
 8006e6c:	6860      	ldr	r0, [r4, #4]
 8006e6e:	f008 fba5 	bl	800f5bc <WM_GetDialogItem>
 8006e72:	4606      	mov	r6, r0
    BUTTON_SetText(hItem, "Start");
 8006e74:	496e      	ldr	r1, [pc, #440]	; (8007030 <_cbDialog+0x1e8>)
 8006e76:	f007 fab9 	bl	800e3ec <BUTTON_SetText>
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006e7a:	4d6e      	ldr	r5, [pc, #440]	; (8007034 <_cbDialog+0x1ec>)
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f007 fae6 	bl	800e450 <BUTTON_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8006e84:	f640 0104 	movw	r1, #2052	; 0x804
 8006e88:	6860      	ldr	r0, [r4, #4]
 8006e8a:	f008 fb97 	bl	800f5bc <WM_GetDialogItem>
 8006e8e:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 8006e90:	4969      	ldr	r1, [pc, #420]	; (8007038 <_cbDialog+0x1f0>)
 8006e92:	f004 fdbd 	bl	800ba10 <TEXT_SetFont>
    TEXT_SetText(hItem, "STM32 Loadcell measument system");
 8006e96:	4969      	ldr	r1, [pc, #420]	; (800703c <_cbDialog+0x1f4>)
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f004 fdd5 	bl	800ba48 <TEXT_SetText>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006e9e:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f004 fe1c 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8006ea8:	210e      	movs	r1, #14
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f004 fdfe 	bl	800baac <TEXT_SetTextAlign>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_0);
 8006eb0:	f640 0105 	movw	r1, #2053	; 0x805
 8006eb4:	6860      	ldr	r0, [r4, #4]
 8006eb6:	f008 fb81 	bl	800f5bc <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006eba:	4629      	mov	r1, r5
 8006ebc:	f005 fe24 	bl	800cb08 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 8006ec0:	f640 0106 	movw	r1, #2054	; 0x806
 8006ec4:	6860      	ldr	r0, [r4, #4]
 8006ec6:	f008 fb79 	bl	800f5bc <WM_GetDialogItem>
 8006eca:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006ecc:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006ed0:	f004 fe06 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Points");
 8006ed4:	495a      	ldr	r1, [pc, #360]	; (8007040 <_cbDialog+0x1f8>)
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f004 fdb6 	bl	800ba48 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f004 fd96 	bl	800ba10 <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8006ee4:	210c      	movs	r1, #12
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f004 fde0 	bl	800baac <TEXT_SetTextAlign>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8006eec:	f640 0107 	movw	r1, #2055	; 0x807
 8006ef0:	6860      	ldr	r0, [r4, #4]
 8006ef2:	f008 fb63 	bl	800f5bc <WM_GetDialogItem>
 8006ef6:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006ef8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006efc:	f004 fdf0 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Period [us]");
 8006f00:	4950      	ldr	r1, [pc, #320]	; (8007044 <_cbDialog+0x1fc>)
 8006f02:	4630      	mov	r0, r6
 8006f04:	f004 fda0 	bl	800ba48 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f004 fd80 	bl	800ba10 <TEXT_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
 8006f10:	f640 0109 	movw	r1, #2057	; 0x809
 8006f14:	6860      	ldr	r0, [r4, #4]
 8006f16:	f008 fb51 	bl	800f5bc <WM_GetDialogItem>
 8006f1a:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_13_ASCII);
 8006f1c:	494a      	ldr	r1, [pc, #296]	; (8007048 <_cbDialog+0x200>)
 8006f1e:	f004 fd77 	bl	800ba10 <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8006f22:	210e      	movs	r1, #14
 8006f24:	4630      	mov	r0, r6
 8006f26:	f004 fdc1 	bl	800baac <TEXT_SetTextAlign>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006f2a:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f004 fdd6 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetText(hItem, "(c) Tapio Valli 2018");
 8006f34:	4945      	ldr	r1, [pc, #276]	; (800704c <_cbDialog+0x204>)
 8006f36:	4630      	mov	r0, r6
 8006f38:	f004 fd86 	bl	800ba48 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_1);
 8006f3c:	f640 010a 	movw	r1, #2058	; 0x80a
 8006f40:	6860      	ldr	r0, [r4, #4]
 8006f42:	f008 fb3b 	bl	800f5bc <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006f46:	4629      	mov	r1, r5
 8006f48:	f005 fdde 	bl	800cb08 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_2);
 8006f4c:	f640 010b 	movw	r1, #2059	; 0x80b
 8006f50:	6860      	ldr	r0, [r4, #4]
 8006f52:	f008 fb33 	bl	800f5bc <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006f56:	4629      	mov	r1, r5
 8006f58:	f005 fdd6 	bl	800cb08 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 8006f5c:	f640 010c 	movw	r1, #2060	; 0x80c
 8006f60:	6860      	ldr	r0, [r4, #4]
 8006f62:	f008 fb2b 	bl	800f5bc <WM_GetDialogItem>
 8006f66:	4606      	mov	r6, r0
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f004 fd51 	bl	800ba10 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006f6e:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006f72:	4630      	mov	r0, r6
 8006f74:	f004 fdb4 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8006f78:	210c      	movs	r1, #12
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f004 fd96 	bl	800baac <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Average");
 8006f80:	4933      	ldr	r1, [pc, #204]	; (8007050 <_cbDialog+0x208>)
 8006f82:	4630      	mov	r0, r6
 8006f84:	f004 fd60 	bl	800ba48 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_3);
 8006f88:	f640 010d 	movw	r1, #2061	; 0x80d
 8006f8c:	6860      	ldr	r0, [r4, #4]
 8006f8e:	f008 fb15 	bl	800f5bc <WM_GetDialogItem>
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006f92:	4629      	mov	r1, r5
 8006f94:	f005 fdb8 	bl	800cb08 <SPINBOX_SetFont>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 8006f98:	f640 010e 	movw	r1, #2062	; 0x80e
 8006f9c:	6860      	ldr	r0, [r4, #4]
 8006f9e:	f008 fb0d 	bl	800f5bc <WM_GetDialogItem>
 8006fa2:	4606      	mov	r6, r0
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8006fa4:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006fa8:	f004 fd9a 	bl	800bae0 <TEXT_SetTextColor>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006fac:	4629      	mov	r1, r5
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f004 fd2e 	bl	800ba10 <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8006fb4:	210c      	movs	r1, #12
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f004 fd78 	bl	800baac <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Count [ms]");
 8006fbc:	4925      	ldr	r1, [pc, #148]	; (8007054 <_cbDialog+0x20c>)
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f004 fd42 	bl	800ba48 <TEXT_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TREEVIEW_0);
 8006fc4:	f640 010f 	movw	r1, #2063	; 0x80f
 8006fc8:	6860      	ldr	r0, [r4, #4]
 8006fca:	f008 faf7 	bl	800f5bc <WM_GetDialogItem>
 8006fce:	4606      	mov	r6, r0
    hTreeItemCur = TREEVIEW_GetItem(hItem, 0, TREEVIEW_GET_LAST);
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f003 fc3e 	bl	800a854 <TREEVIEW_GetItem>
 8006fd8:	4607      	mov	r7, r0
    hTreeItemNew = TREEVIEW_ITEM_Create(TREEVIEW_ITEM_TYPE_NODE, "0", 0);
 8006fda:	2200      	movs	r2, #0
 8006fdc:	491e      	ldr	r1, [pc, #120]	; (8007058 <_cbDialog+0x210>)
 8006fde:	2001      	movs	r0, #1
 8006fe0:	f003 fa06 	bl	800a3f0 <TREEVIEW_ITEM_Create>
    TREEVIEW_AttachItem(hItem, hTreeItemNew, hTreeItemCur, TREEVIEW_INSERT_BELOW);
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	463a      	mov	r2, r7
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f003 fa2c 	bl	800a448 <TREEVIEW_AttachItem>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
 8006ff0:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8006ff4:	6860      	ldr	r0, [r4, #4]
 8006ff6:	f008 fae1 	bl	800f5bc <WM_GetDialogItem>
 8006ffa:	4606      	mov	r6, r0
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f007 fa27 	bl	800e450 <BUTTON_SetFont>
    BUTTON_SetText(hItem, "Graph");
 8007002:	4916      	ldr	r1, [pc, #88]	; (800705c <_cbDialog+0x214>)
 8007004:	4630      	mov	r0, r6
 8007006:	f007 f9f1 	bl	800e3ec <BUTTON_SetText>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
 800700a:	f640 0111 	movw	r1, #2065	; 0x811
 800700e:	6860      	ldr	r0, [r4, #4]
 8007010:	f008 fad4 	bl	800f5bc <WM_GetDialogItem>
 8007014:	4604      	mov	r4, r0
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8007016:	4629      	mov	r1, r5
 8007018:	f007 fa1a 	bl	800e450 <BUTTON_SetFont>
    BUTTON_SetText(hItem, "USB");
 800701c:	4910      	ldr	r1, [pc, #64]	; (8007060 <_cbDialog+0x218>)
 800701e:	4620      	mov	r0, r4
 8007020:	f007 f9e4 	bl	800e3ec <BUTTON_SetText>
    break;
 8007024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 8007026:	6880      	ldr	r0, [r0, #8]
 8007028:	f008 fb54 	bl	800f6d4 <WM_GetId>
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702e:	bf00      	nop
 8007030:	0801e418 	.word	0x0801e418
 8007034:	0801f80c 	.word	0x0801f80c
 8007038:	0801eae4 	.word	0x0801eae4
 800703c:	0801e420 	.word	0x0801e420
 8007040:	0801e440 	.word	0x0801e440
 8007044:	0801e448 	.word	0x0801e448
 8007048:	0802038c 	.word	0x0802038c
 800704c:	0801e454 	.word	0x0801e454
 8007050:	0801e46c 	.word	0x0801e46c
 8007054:	0801e474 	.word	0x0801e474
 8007058:	0801e480 	.word	0x0801e480
 800705c:	0801e484 	.word	0x0801e484
 8007060:	0801e48c 	.word	0x0801e48c

08007064 <CreateWindowMain>:
/*********************************************************************
*
*       CreateWindowMain
*/
WM_HWIN CreateWindowMain(void);
WM_HWIN CreateWindowMain(void) {
 8007064:	b500      	push	{lr}
 8007066:	b083      	sub	sp, #12
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8007068:	f008 fa48 	bl	800f4fc <WM_GetDesktopWindow>
 800706c:	2300      	movs	r3, #0
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4603      	mov	r3, r0
 8007074:	4a03      	ldr	r2, [pc, #12]	; (8007084 <CreateWindowMain+0x20>)
 8007076:	210f      	movs	r1, #15
 8007078:	4803      	ldr	r0, [pc, #12]	; (8007088 <CreateWindowMain+0x24>)
 800707a:	f006 ffb9 	bl	800dff0 <GUI_CreateDialogBox>
  return hWin;
}
 800707e:	b003      	add	sp, #12
 8007080:	f85d fb04 	ldr.w	pc, [sp], #4
 8007084:	08006e49 	.word	0x08006e49
 8007088:	0801e274 	.word	0x0801e274

0800708c <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 800708c:	b508      	push	{r3, lr}
  return ((int) osKernelSysTick());
 800708e:	f7fd f903 	bl	8004298 <osKernelSysTick>
}
 8007092:	bd08      	pop	{r3, pc}

08007094 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 8007094:	b508      	push	{r3, lr}
  osDelay( ms );
 8007096:	f7fd f927 	bl	80042e8 <osDelay>
 800709a:	bd08      	pop	{r3, pc}

0800709c <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 800709c:	4770      	bx	lr
	...

080070a0 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 80070a0:	b510      	push	{r4, lr}
 80070a2:	b082      	sub	sp, #8
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 80070a4:	2400      	movs	r4, #0
 80070a6:	a802      	add	r0, sp, #8
 80070a8:	f840 4d04 	str.w	r4, [r0, #-4]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 80070ac:	f7fd f925 	bl	80042fa <osMutexCreate>
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <GUI_X_InitOS+0x28>)
 80070b2:	6018      	str	r0, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 80070b4:	a802      	add	r0, sp, #8
 80070b6:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 80070ba:	2101      	movs	r1, #1
 80070bc:	f7fd f98a 	bl	80043d4 <osSemaphoreCreate>
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <GUI_X_InitOS+0x2c>)
 80070c2:	6018      	str	r0, [r3, #0]
}
 80070c4:	b002      	add	sp, #8
 80070c6:	bd10      	pop	{r4, pc}
 80070c8:	2000f63c 	.word	0x2000f63c
 80070cc:	2000f640 	.word	0x2000f640

080070d0 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 80070d0:	b508      	push	{r3, lr}
  osMutexRelease(osMutex);
 80070d2:	4b02      	ldr	r3, [pc, #8]	; (80070dc <GUI_X_Unlock+0xc>)
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	f7fd f94f 	bl	8004378 <osMutexRelease>
 80070da:	bd08      	pop	{r3, pc}
 80070dc:	2000f63c 	.word	0x2000f63c

080070e0 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
 80070e0:	b508      	push	{r3, lr}
  osMutexWait(osMutex , osWaitForever) ;
 80070e2:	f04f 31ff 	mov.w	r1, #4294967295
 80070e6:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <GUI_X_Lock+0x10>)
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f7fd f90b 	bl	8004304 <osMutexWait>
 80070ee:	bd08      	pop	{r3, pc}
 80070f0:	2000f63c 	.word	0x2000f63c

080070f4 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 80070f4:	b508      	push	{r3, lr}
  return ((U32) osThreadGetId());
 80070f6:	f7fd f8f3 	bl	80042e0 <osThreadGetId>
}
 80070fa:	bd08      	pop	{r3, pc}

080070fc <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 80070fc:	b508      	push	{r3, lr}

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 80070fe:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 8007102:	4802      	ldr	r0, [pc, #8]	; (800710c <GUI_X_Config+0x10>)
 8007104:	f012 f932 	bl	801936c <GUI_ALLOC_AssignMemory>
 8007108:	bd08      	pop	{r3, pc}
 800710a:	bf00      	nop
 800710c:	2000f644 	.word	0x2000f644

08007110 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8007110:	4b2c      	ldr	r3, [pc, #176]	; (80071c4 <HAL_FMC_MspInit+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b103      	cbz	r3, 8007118 <HAL_FMC_MspInit+0x8>
 8007116:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b087      	sub	sp, #28
    return;
  }
  FMC_Initialized = 1;
 800711c:	2201      	movs	r2, #1
 800711e:	4b29      	ldr	r3, [pc, #164]	; (80071c4 <HAL_FMC_MspInit+0xb4>)
 8007120:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007122:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <HAL_FMC_MspInit+0xb8>)
 8007124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8007136:	f64f 7383 	movw	r3, #65411	; 0xff83
 800713a:	9301      	str	r3, [sp, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	2702      	movs	r7, #2
 800713e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007140:	2600      	movs	r6, #0
 8007142:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007144:	2503      	movs	r5, #3
 8007146:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007148:	240c      	movs	r4, #12
 800714a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800714c:	a901      	add	r1, sp, #4
 800714e:	481f      	ldr	r0, [pc, #124]	; (80071cc <HAL_FMC_MspInit+0xbc>)
 8007150:	f7f9 fd28 	bl	8000ba4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8007154:	f248 1333 	movw	r3, #33075	; 0x8133
 8007158:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007160:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007162:	a901      	add	r1, sp, #4
 8007164:	481a      	ldr	r0, [pc, #104]	; (80071d0 <HAL_FMC_MspInit+0xc0>)
 8007166:	f7f9 fd1d 	bl	8000ba4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800716a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800716e:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007170:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007172:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007174:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007176:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007178:	a901      	add	r1, sp, #4
 800717a:	4816      	ldr	r0, [pc, #88]	; (80071d4 <HAL_FMC_MspInit+0xc4>)
 800717c:	f7f9 fd12 	bl	8000ba4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8007180:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007184:	9301      	str	r3, [sp, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007186:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007188:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800718a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800718c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800718e:	a901      	add	r1, sp, #4
 8007190:	4811      	ldr	r0, [pc, #68]	; (80071d8 <HAL_FMC_MspInit+0xc8>)
 8007192:	f7f9 fd07 	bl	8000ba4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8007196:	2328      	movs	r3, #40	; 0x28
 8007198:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071a0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80071a2:	a901      	add	r1, sp, #4
 80071a4:	480d      	ldr	r0, [pc, #52]	; (80071dc <HAL_FMC_MspInit+0xcc>)
 80071a6:	f7f9 fcfd 	bl	8000ba4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80071aa:	2308      	movs	r3, #8
 80071ac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ae:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071b4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80071b6:	a901      	add	r1, sp, #4
 80071b8:	4809      	ldr	r0, [pc, #36]	; (80071e0 <HAL_FMC_MspInit+0xd0>)
 80071ba:	f7f9 fcf3 	bl	8000ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80071be:	b007      	add	sp, #28
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c2:	bf00      	nop
 80071c4:	2002ae54 	.word	0x2002ae54
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40021000 	.word	0x40021000
 80071d0:	40021800 	.word	0x40021800
 80071d4:	40020c00 	.word	0x40020c00
 80071d8:	40021400 	.word	0x40021400
 80071dc:	40021c00 	.word	0x40021c00
 80071e0:	40020800 	.word	0x40020800

080071e4 <MX_LCD_Init>:
{ 
 80071e4:	b510      	push	{r4, lr}
 80071e6:	b09a      	sub	sp, #104	; 0x68
  HAL_LTDC_DeInit(&hltdc);
 80071e8:	4c38      	ldr	r4, [pc, #224]	; (80072cc <MX_LCD_Init+0xe8>)
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7f9 ffb2 	bl	8001154 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 80071f0:	4b37      	ldr	r3, [pc, #220]	; (80072d0 <MX_LCD_Init+0xec>)
 80071f2:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80071f8:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80071fa:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80071fc:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 7;
 80071fe:	2207      	movs	r2, #7
 8007200:	6162      	str	r2, [r4, #20]
  hltdc.Init.VerticalSync = 3;
 8007202:	2203      	movs	r2, #3
 8007204:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8007206:	220e      	movs	r2, #14
 8007208:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800720a:	2205      	movs	r2, #5
 800720c:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800720e:	f240 228e 	movw	r2, #654	; 0x28e
 8007212:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8007214:	f240 12e5 	movw	r2, #485	; 0x1e5
 8007218:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800721a:	f44f 7225 	mov.w	r2, #660	; 0x294
 800721e:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8007220:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007224:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800722a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800722e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007232:	4620      	mov	r0, r4
 8007234:	f7f9 ff10 	bl	8001058 <HAL_LTDC_Init>
 8007238:	2800      	cmp	r0, #0
 800723a:	d138      	bne.n	80072ae <MX_LCD_Init+0xca>
  pLayerCfg.WindowX0 = 0;
 800723c:	2200      	movs	r2, #0
 800723e:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8007240:	920e      	str	r2, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8007242:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8007244:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007246:	9211      	str	r2, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8007248:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800724a:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800724c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007250:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007252:	2305      	movs	r3, #5
 8007254:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8007256:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8007258:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800725a:	9218      	str	r2, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800725c:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8007260:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8007264:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007268:	a90d      	add	r1, sp, #52	; 0x34
 800726a:	4818      	ldr	r0, [pc, #96]	; (80072cc <MX_LCD_Init+0xe8>)
 800726c:	f7f9 ff7e 	bl	800116c <HAL_LTDC_ConfigLayer>
 8007270:	bb10      	cbnz	r0, 80072b8 <MX_LCD_Init+0xd4>
  pLayerCfg1.WindowX0 = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 8007276:	9301      	str	r3, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8007278:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 800727a:	9303      	str	r3, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800727c:	9304      	str	r3, [sp, #16]
  pLayerCfg1.Alpha = 0;
 800727e:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8007280:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8007282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007286:	9207      	str	r2, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007288:	2205      	movs	r2, #5
 800728a:	9208      	str	r2, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800728e:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8007290:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8007292:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8007296:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800729a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800729e:	2201      	movs	r2, #1
 80072a0:	4669      	mov	r1, sp
 80072a2:	480a      	ldr	r0, [pc, #40]	; (80072cc <MX_LCD_Init+0xe8>)
 80072a4:	f7f9 ff62 	bl	800116c <HAL_LTDC_ConfigLayer>
 80072a8:	b958      	cbnz	r0, 80072c2 <MX_LCD_Init+0xde>
}
 80072aa:	b01a      	add	sp, #104	; 0x68
 80072ac:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 80072ae:	2171      	movs	r1, #113	; 0x71
 80072b0:	4808      	ldr	r0, [pc, #32]	; (80072d4 <MX_LCD_Init+0xf0>)
 80072b2:	f001 f96d 	bl	8008590 <_Error_Handler>
 80072b6:	e7c1      	b.n	800723c <MX_LCD_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 80072b8:	2185      	movs	r1, #133	; 0x85
 80072ba:	4806      	ldr	r0, [pc, #24]	; (80072d4 <MX_LCD_Init+0xf0>)
 80072bc:	f001 f968 	bl	8008590 <_Error_Handler>
 80072c0:	e7d7      	b.n	8007272 <MX_LCD_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80072c2:	2199      	movs	r1, #153	; 0x99
 80072c4:	4803      	ldr	r0, [pc, #12]	; (80072d4 <MX_LCD_Init+0xf0>)
 80072c6:	f001 f963 	bl	8008590 <_Error_Handler>
}
 80072ca:	e7ee      	b.n	80072aa <MX_LCD_Init+0xc6>
 80072cc:	2002b058 	.word	0x2002b058
 80072d0:	40016800 	.word	0x40016800
 80072d4:	0801e57c 	.word	0x0801e57c

080072d8 <MX_FMC_Init>:
{  
 80072d8:	b500      	push	{lr}
 80072da:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80072dc:	4812      	ldr	r0, [pc, #72]	; (8007328 <MX_FMC_Init+0x50>)
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <MX_FMC_Init+0x54>)
 80072e0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80072e2:	2200      	movs	r2, #0
 80072e4:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80072e6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80072e8:	2304      	movs	r3, #4
 80072ea:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80072ec:	2310      	movs	r3, #16
 80072ee:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	6141      	str	r1, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80072f8:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80072fa:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80072fc:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80072fe:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8007300:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8007302:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 8007304:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 8007306:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8007308:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 800730a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 800730c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800730e:	a901      	add	r1, sp, #4
 8007310:	f7fb fc58 	bl	8002bc4 <HAL_SDRAM_Init>
 8007314:	b910      	cbnz	r0, 800731c <MX_FMC_Init+0x44>
}
 8007316:	b009      	add	sp, #36	; 0x24
 8007318:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800731c:	21bf      	movs	r1, #191	; 0xbf
 800731e:	4804      	ldr	r0, [pc, #16]	; (8007330 <MX_FMC_Init+0x58>)
 8007320:	f001 f936 	bl	8008590 <_Error_Handler>
}
 8007324:	e7f7      	b.n	8007316 <MX_FMC_Init+0x3e>
 8007326:	bf00      	nop
 8007328:	2002b140 	.word	0x2002b140
 800732c:	a0000140 	.word	0xa0000140
 8007330:	0801e57c 	.word	0x0801e57c

08007334 <MX_SDRAM_InitEx>:
{
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007342:	4c21      	ldr	r4, [pc, #132]	; (80073c8 <MX_SDRAM_InitEx+0x94>)
 8007344:	2601      	movs	r6, #1
 8007346:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8007348:	2710      	movs	r7, #16
 800734a:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800734c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800734e:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8007352:	4d1e      	ldr	r5, [pc, #120]	; (80073cc <MX_SDRAM_InitEx+0x98>)
 8007354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f7fb fc51 	bl	8002c02 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8007360:	4630      	mov	r0, r6
 8007362:	f7f9 f903 	bl	800056c <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8007366:	2302      	movs	r3, #2
 8007368:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800736a:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800736c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800736e:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8007372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007376:	4621      	mov	r1, r4
 8007378:	4628      	mov	r0, r5
 800737a:	f7fb fc42 	bl	8002c02 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800737e:	2303      	movs	r3, #3
 8007380:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007382:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8007384:	2308      	movs	r3, #8
 8007386:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8007388:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800738c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f7fb fc35 	bl	8002c02 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8007398:	f44f 730c 	mov.w	r3, #560	; 0x230
 800739c:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800739e:	2304      	movs	r3, #4
 80073a0:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80073a2:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80073a4:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80073aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	f7fb fc26 	bl	8002c02 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 80073b6:	f240 6165 	movw	r1, #1637	; 0x665
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7fb fc3e 	bl	8002c3c <HAL_SDRAM_ProgramRefreshRate>
}
 80073c0:	b002      	add	sp, #8
 80073c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c6:	bf00      	nop
 80073c8:	2002ae44 	.word	0x2002ae44
 80073cc:	2002b140 	.word	0x2002b140

080073d0 <MX_DMA2D_Init>:
{
 80073d0:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 80073d2:	4810      	ldr	r0, [pc, #64]	; (8007414 <MX_DMA2D_Init+0x44>)
 80073d4:	4b10      	ldr	r3, [pc, #64]	; (8007418 <MX_DMA2D_Init+0x48>)
 80073d6:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80073d8:	2300      	movs	r3, #0
 80073da:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80073dc:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80073de:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80073e0:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80073e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80073e4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80073e6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80073e8:	f7f9 fb4c 	bl	8000a84 <HAL_DMA2D_Init>
 80073ec:	b928      	cbnz	r0, 80073fa <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80073ee:	2101      	movs	r1, #1
 80073f0:	4808      	ldr	r0, [pc, #32]	; (8007414 <MX_DMA2D_Init+0x44>)
 80073f2:	f7f9 fb75 	bl	8000ae0 <HAL_DMA2D_ConfigLayer>
 80073f6:	b930      	cbnz	r0, 8007406 <MX_DMA2D_Init+0x36>
 80073f8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80073fa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80073fe:	4807      	ldr	r0, [pc, #28]	; (800741c <MX_DMA2D_Init+0x4c>)
 8007400:	f001 f8c6 	bl	8008590 <_Error_Handler>
 8007404:	e7f3      	b.n	80073ee <MX_DMA2D_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 8007406:	f240 1113 	movw	r1, #275	; 0x113
 800740a:	4804      	ldr	r0, [pc, #16]	; (800741c <MX_DMA2D_Init+0x4c>)
 800740c:	f001 f8c0 	bl	8008590 <_Error_Handler>
}
 8007410:	e7f2      	b.n	80073f8 <MX_DMA2D_Init+0x28>
 8007412:	bf00      	nop
 8007414:	2002b100 	.word	0x2002b100
 8007418:	4002b000 	.word	0x4002b000
 800741c:	0801e57c 	.word	0x0801e57c

08007420 <HAL_LTDC_MspInit>:
  if(ltdcHandle->Instance==LTDC)
 8007420:	6802      	ldr	r2, [r0, #0]
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <HAL_LTDC_MspInit+0x9c>)
 8007424:	429a      	cmp	r2, r3
 8007426:	d000      	beq.n	800742a <HAL_LTDC_MspInit+0xa>
 8007428:	4770      	bx	lr
{
 800742a:	b570      	push	{r4, r5, r6, lr}
 800742c:	b086      	sub	sp, #24
    __HAL_RCC_LTDC_CLK_ENABLE();
 800742e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8007432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007434:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8007444:	2310      	movs	r3, #16
 8007446:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007448:	2502      	movs	r5, #2
 800744a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744c:	2400      	movs	r4, #0
 800744e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007450:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007452:	260e      	movs	r6, #14
 8007454:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8007456:	a901      	add	r1, sp, #4
 8007458:	4819      	ldr	r0, [pc, #100]	; (80074c0 <HAL_LTDC_MspInit+0xa0>)
 800745a:	f7f9 fba3 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800745e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8007462:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007464:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007468:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800746a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800746c:	a901      	add	r1, sp, #4
 800746e:	4815      	ldr	r0, [pc, #84]	; (80074c4 <HAL_LTDC_MspInit+0xa4>)
 8007470:	f7f9 fb98 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8007474:	23f7      	movs	r3, #247	; 0xf7
 8007476:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007478:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800747c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800747e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8007480:	a901      	add	r1, sp, #4
 8007482:	4811      	ldr	r0, [pc, #68]	; (80074c8 <HAL_LTDC_MspInit+0xa8>)
 8007484:	f7f9 fb8e 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8007488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800748c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800748e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007490:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007492:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007494:	2309      	movs	r3, #9
 8007496:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8007498:	a901      	add	r1, sp, #4
 800749a:	480c      	ldr	r0, [pc, #48]	; (80074cc <HAL_LTDC_MspInit+0xac>)
 800749c:	f7f9 fb82 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80074a0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80074a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074aa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074ac:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80074ae:	a901      	add	r1, sp, #4
 80074b0:	4807      	ldr	r0, [pc, #28]	; (80074d0 <HAL_LTDC_MspInit+0xb0>)
 80074b2:	f7f9 fb77 	bl	8000ba4 <HAL_GPIO_Init>
}
 80074b6:	b006      	add	sp, #24
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	bf00      	nop
 80074bc:	40016800 	.word	0x40016800
 80074c0:	40021000 	.word	0x40021000
 80074c4:	40022400 	.word	0x40022400
 80074c8:	40022800 	.word	0x40022800
 80074cc:	40021800 	.word	0x40021800
 80074d0:	40022000 	.word	0x40022000

080074d4 <HAL_LTDC_MspDeInit>:
{
 80074d4:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 80074d6:	6802      	ldr	r2, [r0, #0]
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <HAL_LTDC_MspDeInit+0x48>)
 80074da:	429a      	cmp	r2, r3
 80074dc:	d000      	beq.n	80074e0 <HAL_LTDC_MspDeInit+0xc>
 80074de:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 80074e0:	4a0f      	ldr	r2, [pc, #60]	; (8007520 <HAL_LTDC_MspDeInit+0x4c>)
 80074e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80074e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074e8:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 80074ea:	2110      	movs	r1, #16
 80074ec:	480d      	ldr	r0, [pc, #52]	; (8007524 <HAL_LTDC_MspDeInit+0x50>)
 80074ee:	f7f9 fc47 	bl	8000d80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80074f2:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80074f6:	480c      	ldr	r0, [pc, #48]	; (8007528 <HAL_LTDC_MspDeInit+0x54>)
 80074f8:	f7f9 fc42 	bl	8000d80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80074fc:	21f7      	movs	r1, #247	; 0xf7
 80074fe:	480b      	ldr	r0, [pc, #44]	; (800752c <HAL_LTDC_MspDeInit+0x58>)
 8007500:	f7f9 fc3e 	bl	8000d80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8007504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007508:	4809      	ldr	r0, [pc, #36]	; (8007530 <HAL_LTDC_MspDeInit+0x5c>)
 800750a:	f7f9 fc39 	bl	8000d80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 800750e:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8007512:	4808      	ldr	r0, [pc, #32]	; (8007534 <HAL_LTDC_MspDeInit+0x60>)
 8007514:	f7f9 fc34 	bl	8000d80 <HAL_GPIO_DeInit>
}
 8007518:	e7e1      	b.n	80074de <HAL_LTDC_MspDeInit+0xa>
 800751a:	bf00      	nop
 800751c:	40016800 	.word	0x40016800
 8007520:	40023800 	.word	0x40023800
 8007524:	40021000 	.word	0x40021000
 8007528:	40022400 	.word	0x40022400
 800752c:	40022800 	.word	0x40022800
 8007530:	40021800 	.word	0x40021800
 8007534:	40022000 	.word	0x40022000

08007538 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800753a:	f7ff fde9 	bl	8007110 <HAL_FMC_MspInit>
 800753e:	bd08      	pop	{r3, pc}

08007540 <HAL_DMA2D_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
  if(dma2dHandle->Instance==DMA2D)
 8007540:	6802      	ldr	r2, [r0, #0]
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <HAL_DMA2D_MspInit+0x28>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d000      	beq.n	800754a <HAL_DMA2D_MspInit+0xa>
    __HAL_RCC_DMA2D_CLK_ENABLE();
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8007548:	4770      	bx	lr
{
 800754a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800754c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8007550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007552:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	9b01      	ldr	r3, [sp, #4]
}
 8007562:	b002      	add	sp, #8
 8007564:	e7f0      	b.n	8007548 <HAL_DMA2D_MspInit+0x8>
 8007566:	bf00      	nop
 8007568:	4002b000 	.word	0x4002b000

0800756c <_DMA_ExecOperation>:
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <_DMA_ExecOperation+0x10>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b11b      	cbz	r3, 800757a <_DMA_ExecOperation+0xe>
    return;
  
  while(TransferInProgress) {
 8007572:	4b02      	ldr	r3, [pc, #8]	; (800757c <_DMA_ExecOperation+0x10>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1fb      	bne.n	8007572 <_DMA_ExecOperation+0x6>
 800757a:	4770      	bx	lr
 800757c:	2002ae58 	.word	0x2002ae58

08007580 <GetPixelformat>:
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex) {
  

  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8007580:	2801      	cmp	r0, #1
 8007582:	d901      	bls.n	8007588 <GetPixelformat+0x8>
    return 0;
 8007584:	2000      	movs	r0, #0
 8007586:	4770      	bx	lr
  }

  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <GetPixelformat+0xa4>)
 800758a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800758e:	4a26      	ldr	r2, [pc, #152]	; (8007628 <GetPixelformat+0xa8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	bf14      	ite	ne
 8007594:	2200      	movne	r2, #0
 8007596:	2201      	moveq	r2, #1
 8007598:	4924      	ldr	r1, [pc, #144]	; (800762c <GetPixelformat+0xac>)
 800759a:	4825      	ldr	r0, [pc, #148]	; (8007630 <GetPixelformat+0xb0>)
 800759c:	428b      	cmp	r3, r1
 800759e:	bf18      	it	ne
 80075a0:	4283      	cmpne	r3, r0
 80075a2:	d030      	beq.n	8007606 <GetPixelformat+0x86>
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	d12e      	bne.n	8007606 <GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 80075a8:	4a22      	ldr	r2, [pc, #136]	; (8007634 <GetPixelformat+0xb4>)
 80075aa:	4923      	ldr	r1, [pc, #140]	; (8007638 <GetPixelformat+0xb8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bf18      	it	ne
 80075b0:	428b      	cmpne	r3, r1
 80075b2:	d02a      	beq.n	800760a <GetPixelformat+0x8a>
    return LTDC_PIXEL_FORMAT_RGB888;
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 80075b4:	4a21      	ldr	r2, [pc, #132]	; (800763c <GetPixelformat+0xbc>)
 80075b6:	4922      	ldr	r1, [pc, #136]	; (8007640 <GetPixelformat+0xc0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bf18      	it	ne
 80075bc:	428b      	cmpne	r3, r1
 80075be:	d101      	bne.n	80075c4 <GetPixelformat+0x44>
    return LTDC_PIXEL_FORMAT_RGB565;
 80075c0:	2002      	movs	r0, #2
 80075c2:	4770      	bx	lr
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 80075c4:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <GetPixelformat+0xc4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d021      	beq.n	800760e <GetPixelformat+0x8e>
    return LTDC_PIXEL_FORMAT_ARGB1555;
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <GetPixelformat+0xc8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d020      	beq.n	8007612 <GetPixelformat+0x92>
    return LTDC_PIXEL_FORMAT_ARGB4444;
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 80075d0:	491e      	ldr	r1, [pc, #120]	; (800764c <GetPixelformat+0xcc>)
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <GetPixelformat+0xd0>)
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf18      	it	ne
 80075d8:	4293      	cmpne	r3, r2
 80075da:	bf0c      	ite	eq
 80075dc:	2201      	moveq	r2, #1
 80075de:	2200      	movne	r2, #0
 80075e0:	491c      	ldr	r1, [pc, #112]	; (8007654 <GetPixelformat+0xd4>)
 80075e2:	428b      	cmp	r3, r1
 80075e4:	bf14      	ite	ne
 80075e6:	2100      	movne	r1, #0
 80075e8:	2101      	moveq	r1, #1
 80075ea:	481b      	ldr	r0, [pc, #108]	; (8007658 <GetPixelformat+0xd8>)
 80075ec:	4283      	cmp	r3, r0
 80075ee:	bf08      	it	eq
 80075f0:	f042 0201 	orreq.w	r2, r2, #1
 80075f4:	b97a      	cbnz	r2, 8007616 <GetPixelformat+0x96>
 80075f6:	b971      	cbnz	r1, 8007616 <GetPixelformat+0x96>
    return LTDC_PIXEL_FORMAT_L8;
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 80075f8:	4a18      	ldr	r2, [pc, #96]	; (800765c <GetPixelformat+0xdc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00d      	beq.n	800761a <GetPixelformat+0x9a>
    return LTDC_PIXEL_FORMAT_AL44;
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 80075fe:	4a18      	ldr	r2, [pc, #96]	; (8007660 <GetPixelformat+0xe0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00c      	beq.n	800761e <GetPixelformat+0x9e>
 8007604:	e7fe      	b.n	8007604 <GetPixelformat+0x84>
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8007606:	2000      	movs	r0, #0
 8007608:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 800760a:	2001      	movs	r0, #1
 800760c:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800760e:	2003      	movs	r0, #3
 8007610:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8007612:	2004      	movs	r0, #4
 8007614:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 8007616:	2005      	movs	r0, #5
 8007618:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 800761a:	2006      	movs	r0, #6
 800761c:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL88;
 800761e:	2007      	movs	r0, #7
  }
  while (1); // Error
} 
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	0801e5bc 	.word	0x0801e5bc
 8007628:	0802166c 	.word	0x0802166c
 800762c:	08021624 	.word	0x08021624
 8007630:	080216b4 	.word	0x080216b4
 8007634:	08021684 	.word	0x08021684
 8007638:	0802163c 	.word	0x0802163c
 800763c:	08021654 	.word	0x08021654
 8007640:	0802169c 	.word	0x0802169c
 8007644:	080216e4 	.word	0x080216e4
 8007648:	080216cc 	.word	0x080216cc
 800764c:	08021744 	.word	0x08021744
 8007650:	0802175c 	.word	0x0802175c
 8007654:	08021714 	.word	0x08021714
 8007658:	0802172c 	.word	0x0802172c
 800765c:	08021774 	.word	0x08021774
 8007660:	080216fc 	.word	0x080216fc

08007664 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 8007664:	2200      	movs	r2, #0
 8007666:	4b01      	ldr	r3, [pc, #4]	; (800766c <TransferComplete+0x8>)
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	4770      	bx	lr
 800766c:	2002ae58 	.word	0x2002ae58

08007670 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	4607      	mov	r7, r0
 8007674:	460e      	mov	r6, r1
 8007676:	4615      	mov	r5, r2
 8007678:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800767a:	f7ff ff77 	bl	800756c <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800767e:	2201      	movs	r2, #1
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <DMA2D_CopyBuffer+0x48>)
 8007682:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff7b 	bl	8007580 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800768a:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <DMA2D_CopyBuffer+0x4c>)
 800768c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007690:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8007692:	60d6      	str	r6, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8007694:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8007696:	9b07      	ldr	r3, [sp, #28]
 8007698:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800769e:	61d0      	str	r0, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80076a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80076a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076a8:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	f043 0301 	orr.w	r3, r3, #1
 80076b0:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 80076b2:	f7ff ff5b 	bl	800756c <_DMA_ExecOperation>
 80076b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b8:	2002ae58 	.word	0x2002ae58
 80076bc:	4002b000 	.word	0x4002b000

080076c0 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80076c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c4:	4680      	mov	r8, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	4615      	mov	r5, r2
 80076ca:	461e      	mov	r6, r3
 80076cc:	9c08      	ldr	r4, [sp, #32]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 80076ce:	f7ff ff4d 	bl	800756c <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 80076d2:	2201      	movs	r2, #1
 80076d4:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <DMA2D_CopyBufferWithAlpha+0x54>)
 80076d6:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 80076d8:	4640      	mov	r0, r8
 80076da:	f7ff ff51 	bl	8007580 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 80076de:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <DMA2D_CopyBufferWithAlpha+0x58>)
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <DMA2D_CopyBufferWithAlpha+0x5c>)
 80076e2:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 80076e4:	60d7      	str	r7, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80076e6:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 80076e8:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 80076ea:	9b07      	ldr	r3, [sp, #28]
 80076ec:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80076ee:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 80076f0:	6194      	str	r4, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 80076f2:	2300      	movs	r3, #0
 80076f4:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 80076f6:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 80076f8:	6350      	str	r0, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80076fa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80076fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007702:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8007704:	6813      	ldr	r3, [r2, #0]
 8007706:	f043 0301 	orr.w	r3, r3, #1
 800770a:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800770c:	f7ff ff2e 	bl	800756c <_DMA_ExecOperation>
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007714:	2002ae58 	.word	0x2002ae58
 8007718:	4002b000 	.word	0x4002b000
 800771c:	00020200 	.word	0x00020200

08007720 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4607      	mov	r7, r0
 8007724:	460e      	mov	r6, r1
 8007726:	4615      	mov	r5, r2
 8007728:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800772a:	f7ff ff1f 	bl	800756c <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800772e:	2201      	movs	r2, #1
 8007730:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <DMA2D_FillBuffer+0x44>)
 8007732:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ff23 	bl	8007580 <GetPixelformat>

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800773a:	490b      	ldr	r1, [pc, #44]	; (8007768 <DMA2D_FillBuffer+0x48>)
 800773c:	4b0b      	ldr	r3, [pc, #44]	; (800776c <DMA2D_FillBuffer+0x4c>)
 800773e:	600b      	str	r3, [r1, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 8007740:	9b07      	ldr	r3, [sp, #28]
 8007742:	638b      	str	r3, [r1, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 8007744:	63ce      	str	r6, [r1, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 8007746:	9b06      	ldr	r3, [sp, #24]
 8007748:	640b      	str	r3, [r1, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 800774a:	6348      	str	r0, [r1, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800774c:	b2a4      	uxth	r4, r4
 800774e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007752:	644c      	str	r4, [r1, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8007754:	680a      	ldr	r2, [r1, #0]
 8007756:	f240 2301 	movw	r3, #513	; 0x201
 800775a:	4313      	orrs	r3, r2
 800775c:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800775e:	f7ff ff05 	bl	800756c <_DMA_ExecOperation>
 8007762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007764:	2002ae58 	.word	0x2002ae58
 8007768:	4002b000 	.word	0x4002b000
 800776c:	00030200 	.word	0x00030200

08007770 <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	4607      	mov	r7, r0
 8007774:	460e      	mov	r6, r1
 8007776:	4615      	mov	r5, r2
 8007778:	461c      	mov	r4, r3

  /* Set up mode */
  _DMA_ExecOperation();
 800777a:	f7ff fef7 	bl	800756c <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 800777e:	2201      	movs	r2, #1
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <_DMA_ConvertColor+0x44>)
 8007782:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8007784:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <_DMA_ConvertColor+0x48>)
 8007786:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800778a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 800778c:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800778e:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 8007790:	2200      	movs	r2, #0
 8007792:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8007794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8007796:	61dd      	str	r5, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 8007798:	635c      	str	r4, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 800779a:	9a06      	ldr	r2, [sp, #24]
 800779c:	0412      	lsls	r2, r2, #16
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80077a4:	6819      	ldr	r1, [r3, #0]
 80077a6:	f240 2201 	movw	r2, #513	; 0x201
 80077aa:	430a      	orrs	r2, r1
 80077ac:	601a      	str	r2, [r3, #0]
  
  _DMA_ExecOperation();
 80077ae:	f7ff fedd 	bl	800756c <_DMA_ExecOperation>
 80077b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b4:	2002ae58 	.word	0x2002ae58
 80077b8:	4002b000 	.word	0x4002b000

080077bc <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80077bc:	b500      	push	{lr}
 80077be:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 80077c0:	9200      	str	r2, [sp, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	f7ff ffd3 	bl	8007770 <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 80077ca:	b003      	add	sp, #12
 80077cc:	f85d fb04 	ldr.w	pc, [sp], #4

080077d0 <_Index2ColorBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 80077d0:	b510      	push	{r4, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	2400      	movs	r4, #0
 80077d6:	9400      	str	r4, [sp, #0]
 80077d8:	f7ff fff0 	bl	80077bc <_DMA_Index2ColorBulk>
 80077dc:	b002      	add	sp, #8
 80077de:	bd10      	pop	{r4, pc}

080077e0 <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 80077e0:	b510      	push	{r4, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	2400      	movs	r4, #0
 80077e6:	9400      	str	r4, [sp, #0]
 80077e8:	f7ff ffe8 	bl	80077bc <_DMA_Index2ColorBulk>
 80077ec:	b002      	add	sp, #8
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 80077f0:	b510      	push	{r4, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	2404      	movs	r4, #4
 80077f6:	9400      	str	r4, [sp, #0]
 80077f8:	f7ff ffe0 	bl	80077bc <_DMA_Index2ColorBulk>
 80077fc:	b002      	add	sp, #8
 80077fe:	bd10      	pop	{r4, pc}

08007800 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8007800:	b510      	push	{r4, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	2402      	movs	r4, #2
 8007806:	9400      	str	r4, [sp, #0]
 8007808:	f7ff ffd8 	bl	80077bc <_DMA_Index2ColorBulk>
 800780c:	b002      	add	sp, #8
 800780e:	bd10      	pop	{r4, pc}

08007810 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8007810:	b510      	push	{r4, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	2403      	movs	r4, #3
 8007816:	9400      	str	r4, [sp, #0]
 8007818:	f7ff ffd0 	bl	80077bc <_DMA_Index2ColorBulk>
 800781c:	b002      	add	sp, #8
 800781e:	bd10      	pop	{r4, pc}

08007820 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8007820:	b500      	push	{lr}
 8007822:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8007824:	9200      	str	r2, [sp, #0]
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	2200      	movs	r2, #0
 800782a:	f7ff ffa1 	bl	8007770 <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 800782e:	b003      	add	sp, #12
 8007830:	f85d fb04 	ldr.w	pc, [sp], #4

08007834 <_Color2IndexBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8007834:	b510      	push	{r4, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	2400      	movs	r4, #0
 800783a:	9400      	str	r4, [sp, #0]
 800783c:	f7ff fff0 	bl	8007820 <_DMA_Color2IndexBulk>
 8007840:	b002      	add	sp, #8
 8007842:	bd10      	pop	{r4, pc}

08007844 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8007844:	b510      	push	{r4, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	2400      	movs	r4, #0
 800784a:	9400      	str	r4, [sp, #0]
 800784c:	f7ff ffe8 	bl	8007820 <_DMA_Color2IndexBulk>
 8007850:	b002      	add	sp, #8
 8007852:	bd10      	pop	{r4, pc}

08007854 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8007854:	b510      	push	{r4, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	2404      	movs	r4, #4
 800785a:	9400      	str	r4, [sp, #0]
 800785c:	f7ff ffe0 	bl	8007820 <_DMA_Color2IndexBulk>
 8007860:	b002      	add	sp, #8
 8007862:	bd10      	pop	{r4, pc}

08007864 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8007864:	b510      	push	{r4, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	2402      	movs	r4, #2
 800786a:	9400      	str	r4, [sp, #0]
 800786c:	f7ff ffd8 	bl	8007820 <_DMA_Color2IndexBulk>
 8007870:	b002      	add	sp, #8
 8007872:	bd10      	pop	{r4, pc}

08007874 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8007874:	b510      	push	{r4, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	2403      	movs	r4, #3
 800787a:	9400      	str	r4, [sp, #0]
 800787c:	f7ff ffd0 	bl	8007820 <_DMA_Color2IndexBulk>
 8007880:	b002      	add	sp, #8
 8007882:	bd10      	pop	{r4, pc}

08007884 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 8007884:	b410      	push	{r4}
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8007886:	4909      	ldr	r1, [pc, #36]	; (80078ac <GetBufferSize+0x28>)
 8007888:	00c3      	lsls	r3, r0, #3
 800788a:	1a1c      	subs	r4, r3, r0
 800788c:	00a2      	lsls	r2, r4, #2
 800788e:	440a      	add	r2, r1
 8007890:	68d4      	ldr	r4, [r2, #12]
 8007892:	6912      	ldr	r2, [r2, #16]
 8007894:	fb02 f204 	mul.w	r2, r2, r4
 8007898:	1a1b      	subs	r3, r3, r0
 800789a:	0098      	lsls	r0, r3, #2
 800789c:	4401      	add	r1, r0
 800789e:	6948      	ldr	r0, [r1, #20]
}
 80078a0:	fb00 f002 	mul.w	r0, r0, r2
 80078a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	2002ae5c 	.word	0x2002ae5c

080078b0 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 80078b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	4606      	mov	r6, r0
 80078b8:	4688      	mov	r8, r1
 80078ba:	4617      	mov	r7, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80078bc:	f7ff ffe2 	bl	8007884 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80078c0:	4c0c      	ldr	r4, [pc, #48]	; (80078f4 <LCD_LL_CopyBuffer+0x44>)
 80078c2:	00f5      	lsls	r5, r6, #3
 80078c4:	1baa      	subs	r2, r5, r6
 80078c6:	0093      	lsls	r3, r2, #2
 80078c8:	18e2      	adds	r2, r4, r3
 80078ca:	58e1      	ldr	r1, [r4, r3]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 80078cc:	68d3      	ldr	r3, [r2, #12]
 80078ce:	6912      	ldr	r2, [r2, #16]
 80078d0:	9200      	str	r2, [sp, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	9202      	str	r2, [sp, #8]
 80078d6:	9201      	str	r2, [sp, #4]
 80078d8:	fb00 1207 	mla	r2, r0, r7, r1
 80078dc:	fb00 1108 	mla	r1, r0, r8, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	f7ff fec5 	bl	8007670 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80078e6:	1bad      	subs	r5, r5, r6
 80078e8:	00ab      	lsls	r3, r5, #2
 80078ea:	441c      	add	r4, r3
 80078ec:	60a7      	str	r7, [r4, #8]
}
 80078ee:	b004      	add	sp, #16
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	2002ae5c 	.word	0x2002ae5c

080078f8 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80078f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	4680      	mov	r8, r0
 8007900:	460c      	mov	r4, r1
 8007902:	4692      	mov	sl, r2
 8007904:	4699      	mov	r9, r3
 8007906:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8007908:	f7ff ffbc 	bl	8007884 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <LCD_LL_CopyRect+0x70>)
 800790e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8007912:	eba7 0108 	sub.w	r1, r7, r8
 8007916:	008a      	lsls	r2, r1, #2
 8007918:	eb03 0e02 	add.w	lr, r3, r2
 800791c:	5899      	ldr	r1, [r3, r2]
 800791e:	f8de 500c 	ldr.w	r5, [lr, #12]
 8007922:	fb0a 4405 	mla	r4, sl, r5, r4
 8007926:	f8de 2014 	ldr.w	r2, [lr, #20]
 800792a:	eba7 0708 	sub.w	r7, r7, r8
 800792e:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8007932:	4473      	add	r3, lr
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	fb03 f000 	mul.w	r0, r3, r0
 800793a:	fb02 0404 	mla	r4, r2, r4, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 800793e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007940:	fb03 9905 	mla	r9, r3, r5, r9
 8007944:	fb09 0202 	mla	r2, r9, r2, r0
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8007948:	1bad      	subs	r5, r5, r6
 800794a:	2300      	movs	r3, #0
 800794c:	9302      	str	r3, [sp, #8]
 800794e:	9501      	str	r5, [sp, #4]
 8007950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4633      	mov	r3, r6
 8007956:	440a      	add	r2, r1
 8007958:	4421      	add	r1, r4
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fe88 	bl	8007670 <DMA2D_CopyBuffer>
}
 8007960:	b004      	add	sp, #16
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	bf00      	nop
 8007968:	2002ae5c 	.word	0x2002ae5c

0800796c <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	4607      	mov	r7, r0
 8007970:	460e      	mov	r6, r1
 8007972:	4615      	mov	r5, r2
 8007974:	461c      	mov	r4, r3
	
  _DMA_ExecOperation();
 8007976:	f7ff fdf9 	bl	800756c <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800797a:	2201      	movs	r2, #1
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <DMA2D_DrawBitmapL8+0x44>)
 800797e:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <DMA2D_DrawBitmapL8+0x48>)
 8007982:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8007986:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8007988:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800798a:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800798c:	611d      	str	r5, [r3, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 800798e:	641c      	str	r4, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8007990:	2205      	movs	r2, #5
 8007992:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8007998:	9a08      	ldr	r2, [sp, #32]
 800799a:	9907      	ldr	r1, [sp, #28]
 800799c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80079a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 80079aa:	f7ff fddf 	bl	800756c <_DMA_ExecOperation>
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	2002ae58 	.word	0x2002ae58
 80079b4:	4002b000 	.word	0x4002b000

080079b8 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 80079b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079bc:	4607      	mov	r7, r0
 80079be:	4689      	mov	r9, r1
 80079c0:	4690      	mov	r8, r2
 80079c2:	461c      	mov	r4, r3
 80079c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28

  _DMA_ExecOperation();
 80079c8:	f7ff fdd0 	bl	800756c <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 80079cc:	2201      	movs	r2, #1
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <_DMA_DrawAlphaBitmap+0x54>)
 80079d0:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80079d2:	490f      	ldr	r1, [pc, #60]	; (8007a10 <_DMA_DrawAlphaBitmap+0x58>)
 80079d4:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <_DMA_DrawAlphaBitmap+0x5c>)
 80079d6:	600b      	str	r3, [r1, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 80079d8:	f8c1 900c 	str.w	r9, [r1, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 80079dc:	614f      	str	r7, [r1, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 80079de:	63cf      	str	r7, [r1, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	610b      	str	r3, [r1, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 80079e4:	618e      	str	r6, [r1, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 80079e6:	640e      	str	r6, [r1, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 80079e8:	2300      	movs	r3, #0
 80079ea:	61cb      	str	r3, [r1, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 80079ec:	624d      	str	r5, [r1, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 80079ee:	634d      	str	r5, [r1, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 80079f0:	b2a4      	uxth	r4, r4
 80079f2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80079f6:	644c      	str	r4, [r1, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80079f8:	680a      	ldr	r2, [r1, #0]
 80079fa:	f240 2301 	movw	r3, #513	; 0x201
 80079fe:	4313      	orrs	r3, r2
 8007a00:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 8007a02:	f7ff fdb3 	bl	800756c <_DMA_ExecOperation>
 8007a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0a:	bf00      	nop
 8007a0c:	2002ae58 	.word	0x2002ae58
 8007a10:	4002b000 	.word	0x4002b000
 8007a14:	00020200 	.word	0x00020200

08007a18 <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8007a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	4681      	mov	r9, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	4692      	mov	sl, r2
 8007a24:	461f      	mov	r7, r3
 8007a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 8007a2a:	f7ff fda9 	bl	8007580 <GetPixelformat>
 8007a2e:	4680      	mov	r8, r0
  BufferSize = GetBufferSize(LayerIndex);
 8007a30:	4648      	mov	r0, r9
 8007a32:	f7ff ff27 	bl	8007884 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <_LCD_DrawBitmapAlpha+0x80>)
 8007a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a3c:	eba1 0e09 	sub.w	lr, r1, r9
 8007a40:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8007a44:	eb03 0c02 	add.w	ip, r3, r2
 8007a48:	f853 e002 	ldr.w	lr, [r3, r2]
 8007a4c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007a50:	fb0a 4402 	mla	r4, sl, r2, r4
 8007a54:	f8dc a014 	ldr.w	sl, [ip, #20]
 8007a58:	eba1 0109 	sub.w	r1, r1, r9
 8007a5c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8007a60:	4463      	add	r3, ip
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	fb03 f000 	mul.w	r0, r3, r0
 8007a68:	fb0a 0404 	mla	r4, sl, r4, r0
 8007a6c:	eb0e 0004 	add.w	r0, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8007a70:	4633      	mov	r3, r6
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	db0e      	blt.n	8007a94 <_LCD_DrawBitmapAlpha+0x7c>
 8007a76:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8007a7a:	1b52      	subs	r2, r2, r5
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8007a7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a86:	462a      	mov	r2, r5
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7ff ff95 	bl	80079b8 <_DMA_DrawAlphaBitmap>
}
 8007a8e:	b004      	add	sp, #16
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8007a94:	1cf3      	adds	r3, r6, #3
 8007a96:	e7ee      	b.n	8007a76 <_LCD_DrawBitmapAlpha+0x5e>
 8007a98:	2002ae5c 	.word	0x2002ae5c

08007a9c <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	9e08      	ldr	r6, [sp, #32]
 8007aa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8007aa4:	462c      	mov	r4, r5
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	db0e      	blt.n	8007ac8 <_LCD_DrawMemdevAlpha+0x2c>
 8007aaa:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8007aae:	4635      	mov	r5, r6
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	db0b      	blt.n	8007acc <_LCD_DrawMemdevAlpha+0x30>
 8007ab4:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8007ab8:	2600      	movs	r6, #0
 8007aba:	9602      	str	r6, [sp, #8]
 8007abc:	9501      	str	r5, [sp, #4]
 8007abe:	9400      	str	r4, [sp, #0]
 8007ac0:	f7ff ff7a 	bl	80079b8 <_DMA_DrawAlphaBitmap>
}
 8007ac4:	b004      	add	sp, #16
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8007ac8:	1cec      	adds	r4, r5, #3
 8007aca:	e7ee      	b.n	8007aaa <_LCD_DrawMemdevAlpha+0xe>
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8007acc:	1cf5      	adds	r5, r6, #3
 8007ace:	e7f1      	b.n	8007ab4 <_LCD_DrawMemdevAlpha+0x18>

08007ad0 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8007ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	4691      	mov	r9, r2
 8007adc:	4698      	mov	r8, r3
 8007ade:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ae0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8007ae2:	f7ff fecf 	bl	8007884 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8007ae6:	4b17      	ldr	r3, [pc, #92]	; (8007b44 <LCD_LL_DrawBitmap16bpp+0x74>)
 8007ae8:	00e9      	lsls	r1, r5, #3
 8007aea:	eba1 0e05 	sub.w	lr, r1, r5
 8007aee:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8007af2:	eb03 0c02 	add.w	ip, r3, r2
 8007af6:	589a      	ldr	r2, [r3, r2]
 8007af8:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8007afc:	fb09 440e 	mla	r4, r9, lr, r4
 8007b00:	f8dc 9014 	ldr.w	r9, [ip, #20]
 8007b04:	1b49      	subs	r1, r1, r5
 8007b06:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8007b0a:	4463      	add	r3, ip
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	fb03 f000 	mul.w	r0, r3, r0
 8007b12:	fb09 0404 	mla	r4, r9, r4, r0
 8007b16:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8007b18:	463b      	mov	r3, r7
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	db0f      	blt.n	8007b3e <LCD_LL_DrawBitmap16bpp+0x6e>
 8007b1e:	ebc6 0163 	rsb	r1, r6, r3, asr #1
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8007b22:	ebae 0306 	sub.w	r3, lr, r6
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	9101      	str	r1, [sp, #4]
 8007b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4633      	mov	r3, r6
 8007b30:	4641      	mov	r1, r8
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7ff fd9c 	bl	8007670 <DMA2D_CopyBuffer>
}
 8007b38:	b005      	add	sp, #20
 8007b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8007b3e:	1c7b      	adds	r3, r7, #1
 8007b40:	e7ed      	b.n	8007b1e <LCD_LL_DrawBitmap16bpp+0x4e>
 8007b42:	bf00      	nop
 8007b44:	2002ae5c 	.word	0x2002ae5c

08007b48 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8007b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	4605      	mov	r5, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	4691      	mov	r9, r2
 8007b54:	4698      	mov	r8, r3
 8007b56:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8007b5a:	f7ff fe93 	bl	8007884 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <LCD_LL_DrawBitmap32bpp+0x74>)
 8007b60:	00e9      	lsls	r1, r5, #3
 8007b62:	eba1 0e05 	sub.w	lr, r1, r5
 8007b66:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8007b6a:	eb03 0c02 	add.w	ip, r3, r2
 8007b6e:	589a      	ldr	r2, [r3, r2]
 8007b70:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8007b74:	fb09 440e 	mla	r4, r9, lr, r4
 8007b78:	f8dc 9014 	ldr.w	r9, [ip, #20]
 8007b7c:	1b49      	subs	r1, r1, r5
 8007b7e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8007b82:	4463      	add	r3, ip
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	fb03 f000 	mul.w	r0, r3, r0
 8007b8a:	fb09 0404 	mla	r4, r9, r4, r0
 8007b8e:	4422      	add	r2, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8007b90:	463b      	mov	r3, r7
 8007b92:	2f00      	cmp	r7, #0
 8007b94:	db0f      	blt.n	8007bb6 <LCD_LL_DrawBitmap32bpp+0x6e>
 8007b96:	ebc6 01a3 	rsb	r1, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8007b9a:	ebae 0306 	sub.w	r3, lr, r6
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	9101      	str	r1, [sp, #4]
 8007ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4633      	mov	r3, r6
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff fd88 	bl	80076c0 <DMA2D_CopyBufferWithAlpha>
}
 8007bb0:	b005      	add	sp, #20
 8007bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8007bb6:	1cfb      	adds	r3, r7, #3
 8007bb8:	e7ed      	b.n	8007b96 <LCD_LL_DrawBitmap32bpp+0x4e>
 8007bba:	bf00      	nop
 8007bbc:	2002ae5c 	.word	0x2002ae5c

08007bc0 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8007bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460d      	mov	r5, r1
 8007bca:	4614      	mov	r4, r2
 8007bcc:	4698      	mov	r8, r3
 8007bce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8007bd0:	f7ff fe58 	bl	8007884 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8007bd4:	4a16      	ldr	r2, [pc, #88]	; (8007c30 <LCD_LL_DrawBitmap8bpp+0x70>)
 8007bd6:	00f1      	lsls	r1, r6, #3
 8007bd8:	eba1 0e06 	sub.w	lr, r1, r6
 8007bdc:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8007be0:	eb02 0c03 	add.w	ip, r2, r3
 8007be4:	58d3      	ldr	r3, [r2, r3]
 8007be6:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8007bea:	fb04 550e 	mla	r5, r4, lr, r5
 8007bee:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8007bf2:	1b89      	subs	r1, r1, r6
 8007bf4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8007bf8:	4462      	add	r2, ip
 8007bfa:	6892      	ldr	r2, [r2, #8]
 8007bfc:	fb02 f000 	mul.w	r0, r2, r0
 8007c00:	fb04 0505 	mla	r5, r4, r5, r0
 8007c04:	195c      	adds	r4, r3, r5
  OffLineSrc = BytesPerLine - xSize;
 8007c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c08:	eba3 0907 	sub.w	r9, r3, r7
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8007c0c:	ebae 0507 	sub.w	r5, lr, r7
  PixelFormat = GetPixelformat(LayerIndex);
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff fcb5 	bl	8007580 <GetPixelformat>
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	9302      	str	r3, [sp, #8]
 8007c1a:	9701      	str	r7, [sp, #4]
 8007c1c:	9000      	str	r0, [sp, #0]
 8007c1e:	462b      	mov	r3, r5
 8007c20:	464a      	mov	r2, r9
 8007c22:	4621      	mov	r1, r4
 8007c24:	4640      	mov	r0, r8
 8007c26:	f7ff fea1 	bl	800796c <DMA2D_DrawBitmapL8>
}
 8007c2a:	b005      	add	sp, #20
 8007c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c30:	2002ae5c 	.word	0x2002ae5c

08007c34 <LCD_LL_FillRect>:
{
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	4690      	mov	r8, r2
 8007c40:	461d      	mov	r5, r3
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8007c42:	f010 f8b5 	bl	8017db0 <GUI_GetDrawMode>
 8007c46:	2801      	cmp	r0, #1
 8007c48:	d02e      	beq.n	8007ca8 <LCD_LL_FillRect+0x74>
    xSize = x1 - x0 + 1;
 8007c4a:	1b2d      	subs	r5, r5, r4
 8007c4c:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	eba3 0708 	sub.w	r7, r3, r8
 8007c54:	3701      	adds	r7, #1
    BufferSize = GetBufferSize(LayerIndex);
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff fe14 	bl	8007884 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <LCD_LL_FillRect+0x98>)
 8007c5e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8007c62:	ebae 0106 	sub.w	r1, lr, r6
 8007c66:	008a      	lsls	r2, r1, #2
 8007c68:	eb03 0c02 	add.w	ip, r3, r2
 8007c6c:	5899      	ldr	r1, [r3, r2]
 8007c6e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007c72:	fb02 4408 	mla	r4, r2, r8, r4
 8007c76:	f8dc 8014 	ldr.w	r8, [ip, #20]
 8007c7a:	ebae 0e06 	sub.w	lr, lr, r6
 8007c7e:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8007c82:	4463      	add	r3, ip
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	fb03 f000 	mul.w	r0, r3, r0
 8007c8a:	fb08 0404 	mla	r4, r8, r4, r0
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8007c8e:	1b52      	subs	r2, r2, r5
 8007c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	9200      	str	r2, [sp, #0]
 8007c96:	463b      	mov	r3, r7
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4421      	add	r1, r4
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff fd3f 	bl	8007720 <DMA2D_FillBuffer>
}
 8007ca2:	b002      	add	sp, #8
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2119      	movs	r1, #25
 8007cac:	4630      	mov	r0, r6
 8007cae:	f00d f831 	bl	8014d14 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f00d faa1 	bl	8015200 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8007cbe:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <LCD_LL_FillRect+0x9c>)
 8007cc0:	2119      	movs	r1, #25
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f00d f826 	bl	8014d14 <LCD_SetDevFunc>
 8007cc8:	e7eb      	b.n	8007ca2 <LCD_LL_FillRect+0x6e>
 8007cca:	bf00      	nop
 8007ccc:	2002ae5c 	.word	0x2002ae5c
 8007cd0:	08007c35 	.word	0x08007c35

08007cd4 <DMA2D_Init>:
{
 8007cd4:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 8007cd6:	480b      	ldr	r0, [pc, #44]	; (8007d04 <DMA2D_Init+0x30>)
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <DMA2D_Init+0x34>)
 8007cda:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007cdc:	f7f8 fed2 	bl	8000a84 <HAL_DMA2D_Init>
 8007ce0:	b928      	cbnz	r0, 8007cee <DMA2D_Init+0x1a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4807      	ldr	r0, [pc, #28]	; (8007d04 <DMA2D_Init+0x30>)
 8007ce6:	f7f8 fefb 	bl	8000ae0 <HAL_DMA2D_ConfigLayer>
 8007cea:	b928      	cbnz	r0, 8007cf8 <DMA2D_Init+0x24>
 8007cec:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8007cee:	21d5      	movs	r1, #213	; 0xd5
 8007cf0:	4806      	ldr	r0, [pc, #24]	; (8007d0c <DMA2D_Init+0x38>)
 8007cf2:	f000 fc4d 	bl	8008590 <_Error_Handler>
 8007cf6:	e7f4      	b.n	8007ce2 <DMA2D_Init+0xe>
    _Error_Handler(__FILE__, __LINE__);
 8007cf8:	21da      	movs	r1, #218	; 0xda
 8007cfa:	4804      	ldr	r0, [pc, #16]	; (8007d0c <DMA2D_Init+0x38>)
 8007cfc:	f000 fc48 	bl	8008590 <_Error_Handler>
}
 8007d00:	e7f4      	b.n	8007cec <DMA2D_Init+0x18>
 8007d02:	bf00      	nop
 8007d04:	2002b100 	.word	0x2002b100
 8007d08:	08007665 	.word	0x08007665
 8007d0c:	0801e598 	.word	0x0801e598

08007d10 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8007d12:	2300      	movs	r3, #0
 8007d14:	461a      	mov	r2, r3
 8007d16:	4950      	ldr	r1, [pc, #320]	; (8007e58 <LCD_X_Config+0x148>)
 8007d18:	4850      	ldr	r0, [pc, #320]	; (8007e5c <LCD_X_Config+0x14c>)
 8007d1a:	f00f fc7d 	bl	8017618 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f00d f882 	bl	8014e28 <LCD_GetSwapXYEx>
 8007d24:	b350      	cbz	r0, 8007d7c <LCD_X_Config+0x6c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8007d26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007d2a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f00c ffa2 	bl	8014c78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8007d34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007d38:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f00c ff81 	bl	8014c44 <LCD_SetVSizeEx>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 8007d42:	2301      	movs	r3, #1
 8007d44:	2200      	movs	r2, #0
 8007d46:	4944      	ldr	r1, [pc, #272]	; (8007e58 <LCD_X_Config+0x148>)
 8007d48:	4844      	ldr	r0, [pc, #272]	; (8007e5c <LCD_X_Config+0x14c>)
 8007d4a:	f00f fc65 	bl	8017618 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f00d f86a 	bl	8014e28 <LCD_GetSwapXYEx>
 8007d54:	b308      	cbz	r0, 8007d9a <LCD_X_Config+0x8a>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 8007d56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007d5a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d5e:	2001      	movs	r0, #1
 8007d60:	f00c ff8a 	bl	8014c78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8007d64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007d68:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	f00c ff69 	bl	8014c44 <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8007d72:	4b3b      	ldr	r3, [pc, #236]	; (8007e60 <LCD_X_Config+0x150>)
 8007d74:	2400      	movs	r4, #0
 8007d76:	601c      	str	r4, [r3, #0]

#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8007d78:	61dc      	str	r4, [r3, #28]
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8007d7a:	e051      	b.n	8007e20 <LCD_X_Config+0x110>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8007d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007d80:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d84:	2000      	movs	r0, #0
 8007d86:	f00c ff77 	bl	8014c78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8007d8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007d8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d92:	2000      	movs	r0, #0
 8007d94:	f00c ff56 	bl	8014c44 <LCD_SetVSizeEx>
 8007d98:	e7d3      	b.n	8007d42 <LCD_X_Config+0x32>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 8007d9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007d9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007da2:	2001      	movs	r0, #1
 8007da4:	f00c ff68 	bl	8014c78 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8007da8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007dac:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007db0:	2001      	movs	r0, #1
 8007db2:	f00c ff47 	bl	8014c44 <LCD_SetVSizeEx>
 8007db6:	e7dc      	b.n	8007d72 <LCD_X_Config+0x62>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8007db8:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <LCD_X_Config+0x154>)
 8007dba:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8007dbe:	4f28      	ldr	r7, [pc, #160]	; (8007e60 <LCD_X_Config+0x150>)
 8007dc0:	00e3      	lsls	r3, r4, #3
 8007dc2:	1b1b      	subs	r3, r3, r4
 8007dc4:	009d      	lsls	r5, r3, #2
 8007dc6:	197e      	adds	r6, r7, r5
 8007dc8:	61b2      	str	r2, [r6, #24]

    layer_prop[i].pending_buffer = -1;
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	6073      	str	r3, [r6, #4]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f00c fff1 	bl	8014db8 <LCD_GetBitsPerPixelEx>
 8007dd6:	10c0      	asrs	r0, r0, #3
 8007dd8:	6170      	str	r0, [r6, #20]
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8007dda:	4a23      	ldr	r2, [pc, #140]	; (8007e68 <LCD_X_Config+0x158>)
 8007ddc:	2121      	movs	r1, #33	; 0x21
 8007dde:	4620      	mov	r0, r4
 8007de0:	f00c ff98 	bl	8014d14 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8007de4:	4a21      	ldr	r2, [pc, #132]	; (8007e6c <LCD_X_Config+0x15c>)
 8007de6:	2123      	movs	r1, #35	; 0x23
 8007de8:	4620      	mov	r0, r4
 8007dea:	f00c ff93 	bl	8014d14 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8007dee:	4a20      	ldr	r2, [pc, #128]	; (8007e70 <LCD_X_Config+0x160>)
 8007df0:	2119      	movs	r1, #25
 8007df2:	4620      	mov	r0, r4
 8007df4:	f00c ff8e 	bl	8014d14 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8007df8:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <LCD_X_Config+0x164>)
 8007dfa:	2125      	movs	r1, #37	; 0x25
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f00c ff89 	bl	8014d14 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8007e02:	4a1d      	ldr	r2, [pc, #116]	; (8007e78 <LCD_X_Config+0x168>)
 8007e04:	2124      	movs	r1, #36	; 0x24
 8007e06:	4620      	mov	r0, r4
 8007e08:	f00c ff84 	bl	8014d14 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <LCD_X_Config+0x16c>)
 8007e0e:	2128      	movs	r1, #40	; 0x28
 8007e10:	4620      	mov	r0, r4
 8007e12:	f00c ff7f 	bl	8014d14 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8007e16:	5979      	ldr	r1, [r7, r5]
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f00c fefb 	bl	8014c14 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8007e1e:	3401      	adds	r4, #1
 8007e20:	2c01      	cmp	r4, #1
 8007e22:	d9c9      	bls.n	8007db8 <LCD_X_Config+0xa8>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8007e24:	4916      	ldr	r1, [pc, #88]	; (8007e80 <LCD_X_Config+0x170>)
 8007e26:	4817      	ldr	r0, [pc, #92]	; (8007e84 <LCD_X_Config+0x174>)
 8007e28:	f011 ff5e 	bl	8019ce8 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8007e2c:	4916      	ldr	r1, [pc, #88]	; (8007e88 <LCD_X_Config+0x178>)
 8007e2e:	4817      	ldr	r0, [pc, #92]	; (8007e8c <LCD_X_Config+0x17c>)
 8007e30:	f011 fd08 	bl	8019844 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8007e34:	4916      	ldr	r1, [pc, #88]	; (8007e90 <LCD_X_Config+0x180>)
 8007e36:	4817      	ldr	r0, [pc, #92]	; (8007e94 <LCD_X_Config+0x184>)
 8007e38:	f011 fec4 	bl	8019bc4 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8007e3c:	4916      	ldr	r1, [pc, #88]	; (8007e98 <LCD_X_Config+0x188>)
 8007e3e:	4817      	ldr	r0, [pc, #92]	; (8007e9c <LCD_X_Config+0x18c>)
 8007e40:	f011 fc6a 	bl	8019718 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8007e44:	4916      	ldr	r1, [pc, #88]	; (8007ea0 <LCD_X_Config+0x190>)
 8007e46:	4817      	ldr	r0, [pc, #92]	; (8007ea4 <LCD_X_Config+0x194>)
 8007e48:	f011 fe14 	bl	8019a74 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8007e4c:	4916      	ldr	r1, [pc, #88]	; (8007ea8 <LCD_X_Config+0x198>)
 8007e4e:	4817      	ldr	r0, [pc, #92]	; (8007eac <LCD_X_Config+0x19c>)
 8007e50:	f00e faec 	bl	801642c <GUI_SetFuncDrawAlpha>
 8007e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e56:	bf00      	nop
 8007e58:	0802166c 	.word	0x0802166c
 8007e5c:	080214b4 	.word	0x080214b4
 8007e60:	2002ae5c 	.word	0x2002ae5c
 8007e64:	0801e5bc 	.word	0x0801e5bc
 8007e68:	080078b1 	.word	0x080078b1
 8007e6c:	080078f9 	.word	0x080078f9
 8007e70:	08007c35 	.word	0x08007c35
 8007e74:	08007bc1 	.word	0x08007bc1
 8007e78:	08007ad1 	.word	0x08007ad1
 8007e7c:	08007b49 	.word	0x08007b49
 8007e80:	08007811 	.word	0x08007811
 8007e84:	08007875 	.word	0x08007875
 8007e88:	08007801 	.word	0x08007801
 8007e8c:	08007865 	.word	0x08007865
 8007e90:	080077f1 	.word	0x080077f1
 8007e94:	08007855 	.word	0x08007855
 8007e98:	080077e1 	.word	0x080077e1
 8007e9c:	08007845 	.word	0x08007845
 8007ea0:	080077d1 	.word	0x080077d1
 8007ea4:	08007835 	.word	0x08007835
 8007ea8:	08007a19 	.word	0x08007a19
 8007eac:	08007a9d 	.word	0x08007a9d

08007eb0 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4615      	mov	r5, r2
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8007eb8:	3903      	subs	r1, #3
 8007eba:	290b      	cmp	r1, #11
 8007ebc:	f200 809f 	bhi.w	8007ffe <LCD_X_DisplayDriver+0x14e>
 8007ec0:	e8df f001 	tbb	[pc, r1]
 8007ec4:	342c2406 	.word	0x342c2406
 8007ec8:	793c5c64 	.word	0x793c5c64
 8007ecc:	1b8d809d 	.word	0x1b8d809d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8007ed0:	494c      	ldr	r1, [pc, #304]	; (8008004 <LCD_X_DisplayDriver+0x154>)
 8007ed2:	00c3      	lsls	r3, r0, #3
 8007ed4:	1a1b      	subs	r3, r3, r0
 8007ed6:	009a      	lsls	r2, r3, #2
 8007ed8:	1888      	adds	r0, r1, r2
 8007eda:	588e      	ldr	r6, [r1, r2]
 8007edc:	6869      	ldr	r1, [r5, #4]
 8007ede:	68c3      	ldr	r3, [r0, #12]
 8007ee0:	fb03 f301 	mul.w	r3, r3, r1
 8007ee4:	6941      	ldr	r1, [r0, #20]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	fb01 6103 	mla	r1, r1, r3, r6
 8007eec:	4846      	ldr	r0, [pc, #280]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007eee:	f7f9 fa54 	bl	800139a <HAL_LTDC_SetAddress>
 int r = 0;
 8007ef2:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	b002      	add	sp, #8
 8007ef8:	bd70      	pop	{r4, r5, r6, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8007efa:	6811      	ldr	r1, [r2, #0]
 8007efc:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8007f00:	00a2      	lsls	r2, r4, #2
 8007f02:	4b40      	ldr	r3, [pc, #256]	; (8008004 <LCD_X_DisplayDriver+0x154>)
 8007f04:	4413      	add	r3, r2
 8007f06:	6059      	str	r1, [r3, #4]
 int r = 0;
 8007f08:	2500      	movs	r5, #0
    break;
 8007f0a:	e7f3      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4629      	mov	r1, r5
 8007f12:	483d      	ldr	r0, [pc, #244]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f14:	f7f9 f97c 	bl	8001210 <HAL_LTDC_ConfigCLUT>
 int r = 0;
 8007f18:	2500      	movs	r5, #0
    break;
 8007f1a:	e7eb      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_ENABLE(&hltdc);
 8007f1c:	4b3a      	ldr	r3, [pc, #232]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	6993      	ldr	r3, [r2, #24]
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	6193      	str	r3, [r2, #24]
 int r = 0;
 8007f28:	2500      	movs	r5, #0
    break;
 8007f2a:	e7e3      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    __HAL_LTDC_DISABLE(&hltdc);
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	6993      	ldr	r3, [r2, #24]
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	6193      	str	r3, [r2, #24]
 int r = 0;
 8007f38:	2500      	movs	r5, #0
    break;
 8007f3a:	e7db      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d011      	beq.n	8007f66 <LCD_X_DisplayDriver+0xb6>
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8007f42:	4b31      	ldr	r3, [pc, #196]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 8007f4a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007f4e:	f023 0301 	bic.w	r3, r3, #1
 8007f52:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8007f56:	4b2c      	ldr	r3, [pc, #176]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007f5c:	f043 0301 	orr.w	r3, r3, #1
 8007f60:	6253      	str	r3, [r2, #36]	; 0x24
 int r = 0;
 8007f62:	2500      	movs	r5, #0
    break;
 8007f64:	e7c6      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8007f66:	4b28      	ldr	r3, [pc, #160]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	eb03 14c0 	add.w	r4, r3, r0, lsl #7
 8007f6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007f7a:	e7ec      	b.n	8007f56 <LCD_X_DisplayDriver+0xa6>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	6852      	ldr	r2, [r2, #4]
 8007f80:	6829      	ldr	r1, [r5, #0]
 8007f82:	4821      	ldr	r0, [pc, #132]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007f84:	f7f9 f9be 	bl	8001304 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 8007f88:	2500      	movs	r5, #0
    break;
 8007f8a:	e7b3      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8007f8c:	466a      	mov	r2, sp
 8007f8e:	a901      	add	r1, sp, #4
 8007f90:	f00e fe7a 	bl	8016c88 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8007f94:	6828      	ldr	r0, [r5, #0]
 8007f96:	00e2      	lsls	r2, r4, #3
 8007f98:	1b12      	subs	r2, r2, r4
 8007f9a:	0091      	lsls	r1, r2, #2
 8007f9c:	4b19      	ldr	r3, [pc, #100]	; (8008004 <LCD_X_DisplayDriver+0x154>)
 8007f9e:	440b      	add	r3, r1
 8007fa0:	60d8      	str	r0, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8007fa2:	686a      	ldr	r2, [r5, #4]
 8007fa4:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	9a00      	ldr	r2, [sp, #0]
 8007faa:	9901      	ldr	r1, [sp, #4]
 8007fac:	4816      	ldr	r0, [pc, #88]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007fae:	f7f9 f9a9 	bl	8001304 <HAL_LTDC_SetWindowPosition>
 int r = 0;
 8007fb2:	2500      	movs	r5, #0
    break;
 8007fb4:	e79e      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6829      	ldr	r1, [r5, #0]
 8007fba:	4813      	ldr	r0, [pc, #76]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007fbc:	f7f9 f9cc 	bl	8001358 <HAL_LTDC_SetAlpha>
 int r = 0;
 8007fc0:	2500      	movs	r5, #0
    break;
 8007fc2:	e797      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8007fc4:	6815      	ldr	r5, [r2, #0]
 8007fc6:	b12d      	cbz	r5, 8007fd4 <LCD_X_DisplayDriver+0x124>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8007fc8:	4601      	mov	r1, r0
 8007fca:	480f      	ldr	r0, [pc, #60]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007fcc:	f7f9 f95e 	bl	800128c <HAL_LTDC_EnableColorKeying>
 int r = 0;
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	e78f      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	480c      	ldr	r0, [pc, #48]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007fd8:	f7f9 f976 	bl	80012c8 <HAL_LTDC_DisableColorKeying>
 8007fdc:	e78a      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8007fe4:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8007fe8:	4311      	orrs	r1, r2
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8007fea:	041b      	lsls	r3, r3, #16
 8007fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4319      	orrs	r1, r3
 8007ff4:	4804      	ldr	r0, [pc, #16]	; (8008008 <LCD_X_DisplayDriver+0x158>)
 8007ff6:	f7f9 f8e7 	bl	80011c8 <HAL_LTDC_ConfigColorKeying>
 int r = 0;
 8007ffa:	2500      	movs	r5, #0
    break;
 8007ffc:	e77a      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
    r = -1;
 8007ffe:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 8008002:	e777      	b.n	8007ef4 <LCD_X_DisplayDriver+0x44>
 8008004:	2002ae5c 	.word	0x2002ae5c
 8008008:	2002b058 	.word	0x2002b058

0800800c <GRAPHICS_HW_Init>:
  
   OS_TimeMS++;
} 

void GRAPHICS_HW_Init(void)
{ 
 800800c:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 800800e:	f7ff f963 	bl	80072d8 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8008012:	f7ff f98f 	bl	8007334 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 8008016:	f7ff f8e5 	bl	80071e4 <MX_LCD_Init>
  MX_DMA2D_Init();
 800801a:	f7ff f9d9 	bl	80073d0 <MX_DMA2D_Init>
  DMA2D_Init();
 800801e:	f7ff fe59 	bl	8007cd4 <DMA2D_Init>
 8008022:	bd08      	pop	{r3, pc}

08008024 <GRAPHICS_Init>:
 
}

void GRAPHICS_Init(void)
{
 8008024:	b508      	push	{r3, lr}
  /* Initialize the GUI */
  GUI_Init();
 8008026:	f00f fcab 	bl	8017980 <GUI_Init>
 800802a:	bd08      	pop	{r3, pc}

0800802c <BSP_SDRAM_Init>:
  uint8_t sdramstatus = SDRAM_OK;
  
  /* place for custom code */
  
  return sdramstatus;
}
 800802c:	2000      	movs	r0, #0
 800802e:	4770      	bx	lr

08008030 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008030:	b508      	push	{r3, lr}
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 8008032:	4903      	ldr	r1, [pc, #12]	; (8008040 <MX_FATFS_Init+0x10>)
 8008034:	4803      	ldr	r0, [pc, #12]	; (8008044 <MX_FATFS_Init+0x14>)
 8008036:	f7fc f919 	bl	800426c <FATFS_LinkDriver>
 800803a:	4b03      	ldr	r3, [pc, #12]	; (8008048 <MX_FATFS_Init+0x18>)
 800803c:	7018      	strb	r0, [r3, #0]
 800803e:	bd08      	pop	{r3, pc}
 8008040:	2002b174 	.word	0x2002b174
 8008044:	0801e5f8 	.word	0x0801e5f8
 8008048:	2002b5dc 	.word	0x2002b5dc

0800804c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008052:	4ba8      	ldr	r3, [pc, #672]	; (80082f4 <MX_GPIO_Init+0x2a8>)
 8008054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008056:	f042 0210 	orr.w	r2, r2, #16
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
 800805c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805e:	f002 0210 	and.w	r2, r2, #16
 8008062:	9200      	str	r2, [sp, #0]
 8008064:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
 800806e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008070:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008074:	9201      	str	r2, [sp, #4]
 8008076:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800807a:	f042 0202 	orr.w	r2, r2, #2
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
 8008080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008082:	f002 0202 	and.w	r2, r2, #2
 8008086:	9202      	str	r2, [sp, #8]
 8008088:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800808a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800808c:	f042 0208 	orr.w	r2, r2, #8
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
 8008092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008094:	f002 0208 	and.w	r2, r2, #8
 8008098:	9203      	str	r2, [sp, #12]
 800809a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800809c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809e:	f042 0204 	orr.w	r2, r2, #4
 80080a2:	631a      	str	r2, [r3, #48]	; 0x30
 80080a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080a6:	f002 0204 	and.w	r2, r2, #4
 80080aa:	9204      	str	r2, [sp, #16]
 80080ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
 80080b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b8:	f002 0201 	and.w	r2, r2, #1
 80080bc:	9205      	str	r2, [sp, #20]
 80080be:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80080c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
 80080c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80080ce:	9206      	str	r2, [sp, #24]
 80080d0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80080d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
 80080da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080dc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80080e0:	9207      	str	r2, [sp, #28]
 80080e2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80080e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
 80080ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80080f2:	9208      	str	r2, [sp, #32]
 80080f4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80080f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f8:	f042 0220 	orr.w	r2, r2, #32
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
 80080fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008100:	f002 0220 	and.w	r2, r2, #32
 8008104:	9209      	str	r2, [sp, #36]	; 0x24
 8008106:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800810e:	631a      	str	r2, [r3, #48]	; 0x30
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008116:	930a      	str	r3, [sp, #40]	; 0x28
 8008118:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800811a:	2201      	movs	r2, #1
 800811c:	2120      	movs	r1, #32
 800811e:	4876      	ldr	r0, [pc, #472]	; (80082f8 <MX_GPIO_Init+0x2ac>)
 8008120:	f7f8 fecc 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8008124:	2200      	movs	r2, #0
 8008126:	f241 010c 	movw	r1, #4108	; 0x100c
 800812a:	4874      	ldr	r0, [pc, #464]	; (80082fc <MX_GPIO_Init+0x2b0>)
 800812c:	f7f8 fec6 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8008130:	2200      	movs	r2, #0
 8008132:	2108      	movs	r1, #8
 8008134:	4872      	ldr	r0, [pc, #456]	; (8008300 <MX_GPIO_Init+0x2b4>)
 8008136:	f7f8 fec1 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800813a:	2200      	movs	r2, #0
 800813c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008140:	4870      	ldr	r0, [pc, #448]	; (8008304 <MX_GPIO_Init+0x2b8>)
 8008142:	f7f8 febb 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8008146:	2200      	movs	r2, #0
 8008148:	21c8      	movs	r1, #200	; 0xc8
 800814a:	486f      	ldr	r0, [pc, #444]	; (8008308 <MX_GPIO_Init+0x2bc>)
 800814c:	f7f8 feb6 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8008150:	f04f 0908 	mov.w	r9, #8
 8008154:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008158:	2400      	movs	r4, #0
 800815a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800815e:	a90b      	add	r1, sp, #44	; 0x2c
 8008160:	486a      	ldr	r0, [pc, #424]	; (800830c <MX_GPIO_Init+0x2c0>)
 8008162:	f7f8 fd1f 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8008166:	f04f 0a04 	mov.w	sl, #4
 800816a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816e:	2502      	movs	r5, #2
 8008170:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008172:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008174:	2603      	movs	r6, #3
 8008176:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008178:	2309      	movs	r3, #9
 800817a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800817c:	a90b      	add	r1, sp, #44	; 0x2c
 800817e:	4863      	ldr	r0, [pc, #396]	; (800830c <MX_GPIO_Init+0x2c0>)
 8008180:	f7f8 fd10 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8008184:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008188:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800818a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800818e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008190:	230b      	movs	r3, #11
 8008192:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008194:	a90b      	add	r1, sp, #44	; 0x2c
 8008196:	485c      	ldr	r0, [pc, #368]	; (8008308 <MX_GPIO_Init+0x2bc>)
 8008198:	f7f8 fd04 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800819c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80081a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081a2:	2312      	movs	r3, #18
 80081a4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081a6:	2701      	movs	r7, #1
 80081a8:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081aa:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80081ac:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b0:	a90b      	add	r1, sp, #44	; 0x2c
 80081b2:	4857      	ldr	r0, [pc, #348]	; (8008310 <MX_GPIO_Init+0x2c4>)
 80081b4:	f7f8 fcf6 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80081b8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80081bc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081be:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081c2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80081c4:	f04f 080a 	mov.w	r8, #10
 80081c8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081cc:	a90b      	add	r1, sp, #44	; 0x2c
 80081ce:	4850      	ldr	r0, [pc, #320]	; (8008310 <MX_GPIO_Init+0x2c4>)
 80081d0:	f7f8 fce8 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80081d4:	2310      	movs	r3, #16
 80081d6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081da:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081dc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80081de:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80081e0:	a90b      	add	r1, sp, #44	; 0x2c
 80081e2:	484b      	ldr	r0, [pc, #300]	; (8008310 <MX_GPIO_Init+0x2c4>)
 80081e4:	f7f8 fcde 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ec:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ee:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80081f2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80081f6:	a90b      	add	r1, sp, #44	; 0x2c
 80081f8:	483f      	ldr	r0, [pc, #252]	; (80082f8 <MX_GPIO_Init+0x2ac>)
 80081fa:	f7f8 fcd3 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80081fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8008202:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008204:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008208:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800820a:	230c      	movs	r3, #12
 800820c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800820e:	a90b      	add	r1, sp, #44	; 0x2c
 8008210:	4840      	ldr	r0, [pc, #256]	; (8008314 <MX_GPIO_Init+0x2c8>)
 8008212:	f7f8 fcc7 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8008216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008220:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008222:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8008224:	a90b      	add	r1, sp, #44	; 0x2c
 8008226:	483c      	ldr	r0, [pc, #240]	; (8008318 <MX_GPIO_Init+0x2cc>)
 8008228:	f7f8 fcbc 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800822c:	2360      	movs	r3, #96	; 0x60
 800822e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008230:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008232:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008234:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008236:	f04f 0b0d 	mov.w	fp, #13
 800823a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800823e:	a90b      	add	r1, sp, #44	; 0x2c
 8008240:	4832      	ldr	r0, [pc, #200]	; (800830c <MX_GPIO_Init+0x2c0>)
 8008242:	f7f8 fcaf 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8008246:	2340      	movs	r3, #64	; 0x40
 8008248:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800824e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008250:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8008254:	a90b      	add	r1, sp, #44	; 0x2c
 8008256:	482e      	ldr	r0, [pc, #184]	; (8008310 <MX_GPIO_Init+0x2c4>)
 8008258:	f7f8 fca4 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008262:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008264:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008266:	a90b      	add	r1, sp, #44	; 0x2c
 8008268:	482c      	ldr	r0, [pc, #176]	; (800831c <MX_GPIO_Init+0x2d0>)
 800826a:	f7f8 fc9b 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008272:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <MX_GPIO_Init+0x2d4>)
 8008274:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008276:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8008278:	a90b      	add	r1, sp, #44	; 0x2c
 800827a:	481f      	ldr	r0, [pc, #124]	; (80082f8 <MX_GPIO_Init+0x2ac>)
 800827c:	f7f8 fc92 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8008280:	23f0      	movs	r3, #240	; 0xf0
 8008282:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008284:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008286:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008288:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800828a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800828e:	a90b      	add	r1, sp, #44	; 0x2c
 8008290:	481a      	ldr	r0, [pc, #104]	; (80082fc <MX_GPIO_Init+0x2b0>)
 8008292:	f7f8 fc87 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8008296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800829a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80082a2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80082a6:	a90b      	add	r1, sp, #44	; 0x2c
 80082a8:	4817      	ldr	r0, [pc, #92]	; (8008308 <MX_GPIO_Init+0x2bc>)
 80082aa:	f7f8 fc7b 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80082ae:	2320      	movs	r3, #32
 80082b0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80082b8:	a90b      	add	r1, sp, #44	; 0x2c
 80082ba:	480f      	ldr	r0, [pc, #60]	; (80082f8 <MX_GPIO_Init+0x2ac>)
 80082bc:	f7f8 fc72 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80082c0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80082ca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80082ce:	a90b      	add	r1, sp, #44	; 0x2c
 80082d0:	4809      	ldr	r0, [pc, #36]	; (80082f8 <MX_GPIO_Init+0x2ac>)
 80082d2:	f7f8 fc67 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80082d6:	f241 030c 	movw	r3, #4108	; 0x100c
 80082da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082dc:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80082e2:	a90b      	add	r1, sp, #44	; 0x2c
 80082e4:	4805      	ldr	r0, [pc, #20]	; (80082fc <MX_GPIO_Init+0x2b0>)
 80082e6:	f7f8 fc5d 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80082ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f0:	940c      	str	r4, [sp, #48]	; 0x30
 80082f2:	e017      	b.n	8008324 <MX_GPIO_Init+0x2d8>
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40020c00 	.word	0x40020c00
 80082fc:	40022000 	.word	0x40022000
 8008300:	40022800 	.word	0x40022800
 8008304:	40021c00 	.word	0x40021c00
 8008308:	40021800 	.word	0x40021800
 800830c:	40021000 	.word	0x40021000
 8008310:	40020400 	.word	0x40020400
 8008314:	40020800 	.word	0x40020800
 8008318:	40020000 	.word	0x40020000
 800831c:	40022400 	.word	0x40022400
 8008320:	10120000 	.word	0x10120000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8008326:	a90b      	add	r1, sp, #44	; 0x2c
 8008328:	4881      	ldr	r0, [pc, #516]	; (8008530 <MX_GPIO_Init+0x4e4>)
 800832a:	f7f8 fc3b 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800832e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008332:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008336:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8008338:	a90b      	add	r1, sp, #44	; 0x2c
 800833a:	487e      	ldr	r0, [pc, #504]	; (8008534 <MX_GPIO_Init+0x4e8>)
 800833c:	f7f8 fc32 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8008340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008344:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008346:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008348:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800834c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8008350:	a90b      	add	r1, sp, #44	; 0x2c
 8008352:	4879      	ldr	r0, [pc, #484]	; (8008538 <MX_GPIO_Init+0x4ec>)
 8008354:	f7f8 fc26 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008358:	2310      	movs	r3, #16
 800835a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800835c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008360:	a90b      	add	r1, sp, #44	; 0x2c
 8008362:	4876      	ldr	r0, [pc, #472]	; (800853c <MX_GPIO_Init+0x4f0>)
 8008364:	f7f8 fc1e 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8008368:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008370:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8008372:	230c      	movs	r3, #12
 8008374:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8008376:	a90b      	add	r1, sp, #44	; 0x2c
 8008378:	4870      	ldr	r0, [pc, #448]	; (800853c <MX_GPIO_Init+0x4f0>)
 800837a:	f7f8 fc13 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800837e:	f248 0304 	movw	r3, #32772	; 0x8004
 8008382:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008384:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008386:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008388:	a90b      	add	r1, sp, #44	; 0x2c
 800838a:	486d      	ldr	r0, [pc, #436]	; (8008540 <MX_GPIO_Init+0x4f4>)
 800838c:	f7f8 fc0a 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8008390:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008392:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008394:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008396:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008398:	2305      	movs	r3, #5
 800839a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800839c:	a90b      	add	r1, sp, #44	; 0x2c
 800839e:	4869      	ldr	r0, [pc, #420]	; (8008544 <MX_GPIO_Init+0x4f8>)
 80083a0:	f7f8 fc00 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80083a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083a8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083aa:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ac:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ae:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80083b0:	a90b      	add	r1, sp, #44	; 0x2c
 80083b2:	4863      	ldr	r0, [pc, #396]	; (8008540 <MX_GPIO_Init+0x4f4>)
 80083b4:	f7f8 fbf6 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80083b8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80083bc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083be:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80083c4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80083c8:	a90b      	add	r1, sp, #44	; 0x2c
 80083ca:	485d      	ldr	r0, [pc, #372]	; (8008540 <MX_GPIO_Init+0x4f4>)
 80083cc:	f7f8 fbea 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80083d0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80083d8:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 80083da:	a90b      	add	r1, sp, #44	; 0x2c
 80083dc:	4859      	ldr	r0, [pc, #356]	; (8008544 <MX_GPIO_Init+0x4f8>)
 80083de:	f7f8 fbe1 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80083e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80083e8:	4b57      	ldr	r3, [pc, #348]	; (8008548 <MX_GPIO_Init+0x4fc>)
 80083ea:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ec:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80083ee:	a90b      	add	r1, sp, #44	; 0x2c
 80083f0:	4854      	ldr	r0, [pc, #336]	; (8008544 <MX_GPIO_Init+0x4f8>)
 80083f2:	f7f8 fbd7 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80083f6:	23c0      	movs	r3, #192	; 0xc0
 80083f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083fa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083fe:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008400:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008404:	a90b      	add	r1, sp, #44	; 0x2c
 8008406:	484a      	ldr	r0, [pc, #296]	; (8008530 <MX_GPIO_Init+0x4e4>)
 8008408:	f7f8 fbcc 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800840c:	2310      	movs	r3, #16
 800840e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008410:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008412:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008414:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008416:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800841a:	a90b      	add	r1, sp, #44	; 0x2c
 800841c:	4848      	ldr	r0, [pc, #288]	; (8008540 <MX_GPIO_Init+0x4f4>)
 800841e:	f7f8 fbc1 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8008422:	23c8      	movs	r3, #200	; 0xc8
 8008424:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008426:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008428:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800842a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800842c:	a90b      	add	r1, sp, #44	; 0x2c
 800842e:	4842      	ldr	r0, [pc, #264]	; (8008538 <MX_GPIO_Init+0x4ec>)
 8008430:	f7f8 fbb8 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8008434:	2305      	movs	r3, #5
 8008436:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008438:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800843c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800843e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008442:	a90b      	add	r1, sp, #44	; 0x2c
 8008444:	483a      	ldr	r0, [pc, #232]	; (8008530 <MX_GPIO_Init+0x4e4>)
 8008446:	f7f8 fbad 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800844a:	2332      	movs	r3, #50	; 0x32
 800844c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800844e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008450:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008452:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008454:	230b      	movs	r3, #11
 8008456:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008458:	a90b      	add	r1, sp, #44	; 0x2c
 800845a:	4835      	ldr	r0, [pc, #212]	; (8008530 <MX_GPIO_Init+0x4e4>)
 800845c:	f7f8 fba2 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008460:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008464:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008466:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008468:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800846a:	2309      	movs	r3, #9
 800846c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800846e:	a90b      	add	r1, sp, #44	; 0x2c
 8008470:	4836      	ldr	r0, [pc, #216]	; (800854c <MX_GPIO_Init+0x500>)
 8008472:	f7f8 fb97 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8008476:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800847a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008480:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008482:	2309      	movs	r3, #9
 8008484:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008486:	a90b      	add	r1, sp, #44	; 0x2c
 8008488:	482c      	ldr	r0, [pc, #176]	; (800853c <MX_GPIO_Init+0x4f0>)
 800848a:	f7f8 fb8b 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800848e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008492:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008494:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8008496:	a90b      	add	r1, sp, #44	; 0x2c
 8008498:	4827      	ldr	r0, [pc, #156]	; (8008538 <MX_GPIO_Init+0x4ec>)
 800849a:	f7f8 fb83 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800849e:	2386      	movs	r3, #134	; 0x86
 80084a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084a6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084a8:	230b      	movs	r3, #11
 80084aa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ac:	a90b      	add	r1, sp, #44	; 0x2c
 80084ae:	4828      	ldr	r0, [pc, #160]	; (8008550 <MX_GPIO_Init+0x504>)
 80084b0:	f7f8 fb78 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80084b4:	2350      	movs	r3, #80	; 0x50
 80084b6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084bc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80084be:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c2:	a90b      	add	r1, sp, #44	; 0x2c
 80084c4:	4822      	ldr	r0, [pc, #136]	; (8008550 <MX_GPIO_Init+0x504>)
 80084c6:	f7f8 fb6d 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80084ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80084ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084d0:	2312      	movs	r3, #18
 80084d2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084d4:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084d6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80084d8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80084dc:	a90b      	add	r1, sp, #44	; 0x2c
 80084de:	4818      	ldr	r0, [pc, #96]	; (8008540 <MX_GPIO_Init+0x4f4>)
 80084e0:	f7f8 fb60 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80084e4:	2328      	movs	r3, #40	; 0x28
 80084e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ec:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80084ee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f2:	a90b      	add	r1, sp, #44	; 0x2c
 80084f4:	4816      	ldr	r0, [pc, #88]	; (8008550 <MX_GPIO_Init+0x504>)
 80084f6:	f7f8 fb55 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80084fa:	2340      	movs	r3, #64	; 0x40
 80084fc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008500:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008502:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8008504:	2309      	movs	r3, #9
 8008506:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8008508:	a90b      	add	r1, sp, #44	; 0x2c
 800850a:	480d      	ldr	r0, [pc, #52]	; (8008540 <MX_GPIO_Init+0x4f4>)
 800850c:	f7f8 fb4a 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8008510:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008514:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008516:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008518:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800851a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800851c:	2305      	movs	r3, #5
 800851e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008520:	a90b      	add	r1, sp, #44	; 0x2c
 8008522:	480a      	ldr	r0, [pc, #40]	; (800854c <MX_GPIO_Init+0x500>)
 8008524:	f7f8 fb3e 	bl	8000ba4 <HAL_GPIO_Init>

}
 8008528:	b011      	add	sp, #68	; 0x44
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	bf00      	nop
 8008530:	40020800 	.word	0x40020800
 8008534:	40022800 	.word	0x40022800
 8008538:	40021800 	.word	0x40021800
 800853c:	40020c00 	.word	0x40020c00
 8008540:	40021c00 	.word	0x40021c00
 8008544:	40022000 	.word	0x40022000
 8008548:	10120000 	.word	0x10120000
 800854c:	40020400 	.word	0x40020400
 8008550:	40020000 	.word	0x40020000

08008554 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8008554:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8008556:	f7ff fd6b 	bl	8008030 <MX_FATFS_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800855a:	f000 fb37 	bl	8008bcc <MX_USB_DEVICE_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 800855e:	f7fe fc6b 	bl	8006e38 <GRAPHICS_MainTask>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008562:	2001      	movs	r0, #1
 8008564:	f7fb fec0 	bl	80042e8 <osDelay>
 8008568:	e7fb      	b.n	8008562 <StartDefaultTask+0xe>

0800856a <StartUSBDTask>:
  /* USER CODE END 5 */ 
}

/* StartUSBDTask function */
void StartUSBDTask(void const * argument)
{
 800856a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartUSBDTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800856c:	2001      	movs	r0, #1
 800856e:	f7fb febb 	bl	80042e8 <osDelay>
 8008572:	e7fb      	b.n	800856c <StartUSBDTask+0x2>

08008574 <StartSTEMWINTask>:
  /* USER CODE END StartUSBDTask */
}

/* StartSTEMWINTask function */
void StartSTEMWINTask(void const * argument)
{
 8008574:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSTEMWINTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008576:	2001      	movs	r0, #1
 8008578:	f7fb feb6 	bl	80042e8 <osDelay>
 800857c:	e7fb      	b.n	8008576 <StartSTEMWINTask+0x2>

0800857e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800857e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8008580:	6803      	ldr	r3, [r0, #0]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008586:	d000      	beq.n	800858a <HAL_TIM_PeriodElapsedCallback+0xc>
 8008588:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800858a:	f7f7 ffdd 	bl	8000548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800858e:	e7fb      	b.n	8008588 <HAL_TIM_PeriodElapsedCallback+0xa>

08008590 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8008590:	e7fe      	b.n	8008590 <_Error_Handler>
	...

08008594 <MX_ADC3_Init>:
{
 8008594:	b500      	push	{lr}
 8008596:	b085      	sub	sp, #20
  hadc3.Instance = ADC3;
 8008598:	4816      	ldr	r0, [pc, #88]	; (80085f4 <MX_ADC3_Init+0x60>)
 800859a:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <MX_ADC3_Init+0x64>)
 800859c:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800859e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085a2:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80085a4:	2300      	movs	r3, #0
 80085a6:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80085a8:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80085aa:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80085ac:	6203      	str	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80085ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80085b0:	4a12      	ldr	r2, [pc, #72]	; (80085fc <MX_ADC3_Init+0x68>)
 80085b2:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80085b4:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 80085b6:	2201      	movs	r2, #1
 80085b8:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80085ba:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80085bc:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80085be:	f7f8 f881 	bl	80006c4 <HAL_ADC_Init>
 80085c2:	b960      	cbnz	r0, 80085de <MX_ADC3_Init+0x4a>
  sConfig.Channel = ADC_CHANNEL_0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80085c8:	2201      	movs	r2, #1
 80085ca:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80085cc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80085ce:	4669      	mov	r1, sp
 80085d0:	4808      	ldr	r0, [pc, #32]	; (80085f4 <MX_ADC3_Init+0x60>)
 80085d2:	f7f8 f8a1 	bl	8000718 <HAL_ADC_ConfigChannel>
 80085d6:	b938      	cbnz	r0, 80085e8 <MX_ADC3_Init+0x54>
}
 80085d8:	b005      	add	sp, #20
 80085da:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80085de:	f240 112d 	movw	r1, #301	; 0x12d
 80085e2:	4807      	ldr	r0, [pc, #28]	; (8008600 <MX_ADC3_Init+0x6c>)
 80085e4:	f7ff ffd4 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80085e8:	f240 1137 	movw	r1, #311	; 0x137
 80085ec:	4804      	ldr	r0, [pc, #16]	; (8008600 <MX_ADC3_Init+0x6c>)
 80085ee:	f7ff ffcf 	bl	8008590 <_Error_Handler>
 80085f2:	bf00      	nop
 80085f4:	2002b608 	.word	0x2002b608
 80085f8:	40012200 	.word	0x40012200
 80085fc:	0f000001 	.word	0x0f000001
 8008600:	0801e5c4 	.word	0x0801e5c4

08008604 <MX_USART1_UART_Init>:
{
 8008604:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8008606:	480d      	ldr	r0, [pc, #52]	; (800863c <MX_USART1_UART_Init+0x38>)
 8008608:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <MX_USART1_UART_Init+0x3c>)
 800860a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800860c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008610:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8008612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008616:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008618:	2300      	movs	r3, #0
 800861a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800861c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800861e:	220c      	movs	r2, #12
 8008620:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008622:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008624:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008626:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008628:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800862a:	f7fb f810 	bl	800364e <HAL_UART_Init>
 800862e:	b900      	cbnz	r0, 8008632 <MX_USART1_UART_Init+0x2e>
 8008630:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8008632:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008636:	4803      	ldr	r0, [pc, #12]	; (8008644 <MX_USART1_UART_Init+0x40>)
 8008638:	f7ff ffaa 	bl	8008590 <_Error_Handler>
 800863c:	2002b650 	.word	0x2002b650
 8008640:	40011000 	.word	0x40011000
 8008644:	0801e5c4 	.word	0x0801e5c4

08008648 <MX_CRC_Init>:
{
 8008648:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800864a:	4809      	ldr	r0, [pc, #36]	; (8008670 <MX_CRC_Init+0x28>)
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <MX_CRC_Init+0x2c>)
 800864e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008650:	2300      	movs	r3, #0
 8008652:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008654:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008656:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008658:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800865a:	2301      	movs	r3, #1
 800865c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800865e:	f7f8 f9a5 	bl	80009ac <HAL_CRC_Init>
 8008662:	b900      	cbnz	r0, 8008666 <MX_CRC_Init+0x1e>
 8008664:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8008666:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800866a:	4803      	ldr	r0, [pc, #12]	; (8008678 <MX_CRC_Init+0x30>)
 800866c:	f7ff ff90 	bl	8008590 <_Error_Handler>
 8008670:	2002b5e4 	.word	0x2002b5e4
 8008674:	40023000 	.word	0x40023000
 8008678:	0801e5c4 	.word	0x0801e5c4

0800867c <MX_TIM1_Init>:
{
 800867c:	b500      	push	{lr}
 800867e:	b089      	sub	sp, #36	; 0x24
  htim1.Instance = TIM1;
 8008680:	4818      	ldr	r0, [pc, #96]	; (80086e4 <MX_TIM1_Init+0x68>)
 8008682:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <MX_TIM1_Init+0x6c>)
 8008684:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 100;
 8008686:	2364      	movs	r3, #100	; 0x64
 8008688:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800868a:	2300      	movs	r3, #0
 800868c:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 800868e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008690:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8008692:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008694:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008696:	f7fa fc91 	bl	8002fbc <HAL_TIM_Base_Init>
 800869a:	b9a0      	cbnz	r0, 80086c6 <MX_TIM1_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800869c:	a908      	add	r1, sp, #32
 800869e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a2:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80086a6:	480f      	ldr	r0, [pc, #60]	; (80086e4 <MX_TIM1_Init+0x68>)
 80086a8:	f7fa fcae 	bl	8003008 <HAL_TIM_ConfigClockSource>
 80086ac:	b980      	cbnz	r0, 80086d0 <MX_TIM1_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086ae:	2300      	movs	r3, #0
 80086b0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80086b2:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086b4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80086b6:	a901      	add	r1, sp, #4
 80086b8:	480a      	ldr	r0, [pc, #40]	; (80086e4 <MX_TIM1_Init+0x68>)
 80086ba:	f7fa fd2f 	bl	800311c <HAL_TIMEx_MasterConfigSynchronization>
 80086be:	b960      	cbnz	r0, 80086da <MX_TIM1_Init+0x5e>
}
 80086c0:	b009      	add	sp, #36	; 0x24
 80086c2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80086c6:	f240 115d 	movw	r1, #349	; 0x15d
 80086ca:	4808      	ldr	r0, [pc, #32]	; (80086ec <MX_TIM1_Init+0x70>)
 80086cc:	f7ff ff60 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80086d0:	f240 1163 	movw	r1, #355	; 0x163
 80086d4:	4805      	ldr	r0, [pc, #20]	; (80086ec <MX_TIM1_Init+0x70>)
 80086d6:	f7ff ff5b 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80086da:	f240 116b 	movw	r1, #363	; 0x16b
 80086de:	4803      	ldr	r0, [pc, #12]	; (80086ec <MX_TIM1_Init+0x70>)
 80086e0:	f7ff ff56 	bl	8008590 <_Error_Handler>
 80086e4:	2002b6c0 	.word	0x2002b6c0
 80086e8:	40010000 	.word	0x40010000
 80086ec:	0801e5c4 	.word	0x0801e5c4

080086f0 <SystemClock_Config>:
{
 80086f0:	b500      	push	{lr}
 80086f2:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 80086f4:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <SystemClock_Config+0x100>)
 80086f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80086fc:	641a      	str	r2, [r3, #64]	; 0x40
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008708:	4b3a      	ldr	r3, [pc, #232]	; (80087f4 <SystemClock_Config+0x104>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800871c:	2301      	movs	r3, #1
 800871e:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008724:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008726:	2302      	movs	r3, #2
 8008728:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800872a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800872e:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008730:	2219      	movs	r2, #25
 8008732:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008734:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008738:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800873a:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800873c:	2308      	movs	r3, #8
 800873e:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008740:	a828      	add	r0, sp, #160	; 0xa0
 8008742:	f7f9 fc37 	bl	8001fb4 <HAL_RCC_OscConfig>
 8008746:	2800      	cmp	r0, #0
 8008748:	d140      	bne.n	80087cc <SystemClock_Config+0xdc>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800874a:	f7f9 fbf5 	bl	8001f38 <HAL_PWREx_EnableOverDrive>
 800874e:	2800      	cmp	r0, #0
 8008750:	d140      	bne.n	80087d4 <SystemClock_Config+0xe4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008752:	230f      	movs	r3, #15
 8008754:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008756:	2302      	movs	r3, #2
 8008758:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800875a:	2300      	movs	r3, #0
 800875c:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800875e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008762:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008768:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800876a:	2106      	movs	r1, #6
 800876c:	a823      	add	r0, sp, #140	; 0x8c
 800876e:	f7f9 fe5d 	bl	800242c <HAL_RCC_ClockConfig>
 8008772:	2800      	cmp	r0, #0
 8008774:	d132      	bne.n	80087dc <SystemClock_Config+0xec>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8008776:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <SystemClock_Config+0x108>)
 8008778:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800877a:	23c0      	movs	r3, #192	; 0xc0
 800877c:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800877e:	2304      	movs	r3, #4
 8008780:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8008782:	2302      	movs	r3, #2
 8008784:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8008786:	2301      	movs	r3, #1
 8008788:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800878a:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800878c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008790:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008792:	2300      	movs	r3, #0
 8008794:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8008796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800879a:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800879c:	a802      	add	r0, sp, #8
 800879e:	f7f9 ff3b 	bl	8002618 <HAL_RCCEx_PeriphCLKConfig>
 80087a2:	b9f8      	cbnz	r0, 80087e4 <SystemClock_Config+0xf4>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80087a4:	f7f9 fef4 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80087a8:	4b14      	ldr	r3, [pc, #80]	; (80087fc <SystemClock_Config+0x10c>)
 80087aa:	fba3 3000 	umull	r3, r0, r3, r0
 80087ae:	0980      	lsrs	r0, r0, #6
 80087b0:	f7f8 f8d6 	bl	8000960 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80087b4:	2004      	movs	r0, #4
 80087b6:	f7f8 f8e9 	bl	800098c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80087ba:	2200      	movs	r2, #0
 80087bc:	210f      	movs	r1, #15
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	f7f8 f891 	bl	80008e8 <HAL_NVIC_SetPriority>
}
 80087c6:	b035      	add	sp, #212	; 0xd4
 80087c8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80087cc:	21e4      	movs	r1, #228	; 0xe4
 80087ce:	480c      	ldr	r0, [pc, #48]	; (8008800 <SystemClock_Config+0x110>)
 80087d0:	f7ff fede 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80087d4:	21eb      	movs	r1, #235	; 0xeb
 80087d6:	480a      	ldr	r0, [pc, #40]	; (8008800 <SystemClock_Config+0x110>)
 80087d8:	f7ff feda 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80087dc:	21f9      	movs	r1, #249	; 0xf9
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <SystemClock_Config+0x110>)
 80087e0:	f7ff fed6 	bl	8008590 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80087e4:	f44f 7184 	mov.w	r1, #264	; 0x108
 80087e8:	4805      	ldr	r0, [pc, #20]	; (8008800 <SystemClock_Config+0x110>)
 80087ea:	f7ff fed1 	bl	8008590 <_Error_Handler>
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800
 80087f4:	40007000 	.word	0x40007000
 80087f8:	00200048 	.word	0x00200048
 80087fc:	10624dd3 	.word	0x10624dd3
 8008800:	0801e5c4 	.word	0x0801e5c4

08008804 <main>:
{
 8008804:	b500      	push	{lr}
 8008806:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8008808:	f7f7 fe92 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 800880c:	f7ff ff70 	bl	80086f0 <SystemClock_Config>
  MX_GPIO_Init();
 8008810:	f7ff fc1c 	bl	800804c <MX_GPIO_Init>
  MX_ADC3_Init();
 8008814:	f7ff febe 	bl	8008594 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8008818:	f7ff fef4 	bl	8008604 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800881c:	f7ff ff14 	bl	8008648 <MX_CRC_Init>
  MX_TIM1_Init();
 8008820:	f7ff ff2c 	bl	800867c <MX_TIM1_Init>
  GRAPHICS_HW_Init();
 8008824:	f7ff fbf2 	bl	800800c <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8008828:	f7ff fbfc 	bl	8008024 <GRAPHICS_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800882c:	4c14      	ldr	r4, [pc, #80]	; (8008880 <main+0x7c>)
 800882e:	ad0b      	add	r5, sp, #44	; 0x2c
 8008830:	4626      	mov	r6, r4
 8008832:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008836:	6833      	ldr	r3, [r6, #0]
 8008838:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800883a:	2100      	movs	r1, #0
 800883c:	a80b      	add	r0, sp, #44	; 0x2c
 800883e:	f7fb fd35 	bl	80042ac <osThreadCreate>
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <main+0x80>)
 8008844:	6018      	str	r0, [r3, #0]
  osThreadDef(USBDTask, StartUSBDTask, osPriorityNormal, 0, 1024);
 8008846:	ad06      	add	r5, sp, #24
 8008848:	f104 0614 	add.w	r6, r4, #20
 800884c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800884e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	602b      	str	r3, [r5, #0]
  USBDTaskHandle = osThreadCreate(osThread(USBDTask), NULL);
 8008854:	2100      	movs	r1, #0
 8008856:	a806      	add	r0, sp, #24
 8008858:	f7fb fd28 	bl	80042ac <osThreadCreate>
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <main+0x84>)
 800885e:	6018      	str	r0, [r3, #0]
  osThreadDef(STEMWINTask, StartSTEMWINTask, osPriorityNormal, 0, 1024);
 8008860:	ad01      	add	r5, sp, #4
 8008862:	3428      	adds	r4, #40	; 0x28
 8008864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	602b      	str	r3, [r5, #0]
  STEMWINTaskHandle = osThreadCreate(osThread(STEMWINTask), NULL);
 800886c:	2100      	movs	r1, #0
 800886e:	a801      	add	r0, sp, #4
 8008870:	f7fb fd1c 	bl	80042ac <osThreadCreate>
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <main+0x88>)
 8008876:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8008878:	f7fb fd09 	bl	800428e <osKernelStart>
 800887c:	e7fe      	b.n	800887c <main+0x78>
 800887e:	bf00      	nop
 8008880:	0801e218 	.word	0x0801e218
 8008884:	2002b5e0 	.word	0x2002b5e0
 8008888:	2002b700 	.word	0x2002b700
 800888c:	2002b704 	.word	0x2002b704

08008890 <SDRAMDISK_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
  return Stat;
 8008890:	4b01      	ldr	r3, [pc, #4]	; (8008898 <SDRAMDISK_status+0x8>)
 8008892:	7818      	ldrb	r0, [r3, #0]
}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	200000ac 	.word	0x200000ac

0800889c <SDRAMDISK_read>:
  * @retval DRESULT: Operation result
  */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pSrcBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 800889c:	025b      	lsls	r3, r3, #9
 800889e:	089b      	lsrs	r3, r3, #2
  uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 80088a0:	f502 02c0 	add.w	r2, r2, #6291456	; 0x600000
 80088a4:	0252      	lsls	r2, r2, #9

  for(; BufferSize != 0; BufferSize--)
 80088a6:	e004      	b.n	80088b2 <SDRAMDISK_read+0x16>
  {
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 80088a8:	6810      	ldr	r0, [r2, #0]
 80088aa:	6008      	str	r0, [r1, #0]
  for(; BufferSize != 0; BufferSize--)
 80088ac:	3b01      	subs	r3, #1
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 80088ae:	3204      	adds	r2, #4
 80088b0:	3104      	adds	r1, #4
  for(; BufferSize != 0; BufferSize--)
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1f8      	bne.n	80088a8 <SDRAMDISK_read+0xc>
  }

  return RES_OK;
}
 80088b6:	2000      	movs	r0, #0
 80088b8:	4770      	bx	lr

080088ba <SDRAMDISK_write>:
  */
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pDstBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 80088ba:	025b      	lsls	r3, r3, #9
 80088bc:	089b      	lsrs	r3, r3, #2
  uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 80088be:	f502 02c0 	add.w	r2, r2, #6291456	; 0x600000
 80088c2:	0252      	lsls	r2, r2, #9

  for(; BufferSize != 0; BufferSize--)
 80088c4:	e004      	b.n	80088d0 <SDRAMDISK_write+0x16>
  {
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 80088c6:	6808      	ldr	r0, [r1, #0]
 80088c8:	6010      	str	r0, [r2, #0]
  for(; BufferSize != 0; BufferSize--)
 80088ca:	3b01      	subs	r3, #1
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 80088cc:	3204      	adds	r2, #4
 80088ce:	3104      	adds	r1, #4
  for(; BufferSize != 0; BufferSize--)
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f8      	bne.n	80088c6 <SDRAMDISK_write+0xc>
  }

  return RES_OK;
}
 80088d4:	2000      	movs	r0, #0
 80088d6:	4770      	bx	lr

080088d8 <SDRAMDISK_ioctl>:
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80088d8:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <SDRAMDISK_ioctl+0x40>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f013 0f01 	tst.w	r3, #1
 80088e0:	d001      	beq.n	80088e6 <SDRAMDISK_ioctl+0xe>
 80088e2:	2003      	movs	r0, #3
 80088e4:	4770      	bx	lr

  switch (cmd)
 80088e6:	2903      	cmp	r1, #3
 80088e8:	d813      	bhi.n	8008912 <SDRAMDISK_ioctl+0x3a>
 80088ea:	e8df f001 	tbb	[pc, r1]
 80088ee:	0402      	.short	0x0402
 80088f0:	0e09      	.short	0x0e09
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80088f2:	2000      	movs	r0, #0
 80088f4:	4770      	bx	lr
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 80088f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088fa:	6013      	str	r3, [r2, #0]
    res = RES_OK;
 80088fc:	2000      	movs	r0, #0
    break;
 80088fe:	4770      	bx	lr

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 8008900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008904:	8013      	strh	r3, [r2, #0]
    res = RES_OK;
 8008906:	2000      	movs	r0, #0
    break;
 8008908:	4770      	bx	lr

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 1;
 800890a:	2301      	movs	r3, #1
 800890c:	6013      	str	r3, [r2, #0]
	res = RES_OK;
 800890e:	2000      	movs	r0, #0
    break;
 8008910:	4770      	bx	lr

  default:
    res = RES_PARERR;
 8008912:	2004      	movs	r0, #4
  }

  return res;
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	200000ac 	.word	0x200000ac

0800891c <SDRAMDISK_initialize>:
{
 800891c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800891e:	2201      	movs	r2, #1
 8008920:	4b06      	ldr	r3, [pc, #24]	; (800893c <SDRAMDISK_initialize+0x20>)
 8008922:	701a      	strb	r2, [r3, #0]
  if(BSP_SDRAM_Init() == SDRAM_OK)
 8008924:	f7ff fb82 	bl	800802c <BSP_SDRAM_Init>
 8008928:	b920      	cbnz	r0, 8008934 <SDRAMDISK_initialize+0x18>
    Stat &= ~STA_NOINIT;
 800892a:	4a04      	ldr	r2, [pc, #16]	; (800893c <SDRAMDISK_initialize+0x20>)
 800892c:	7813      	ldrb	r3, [r2, #0]
 800892e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008932:	7013      	strb	r3, [r2, #0]
  return Stat;
 8008934:	4b01      	ldr	r3, [pc, #4]	; (800893c <SDRAMDISK_initialize+0x20>)
 8008936:	7818      	ldrb	r0, [r3, #0]
}
 8008938:	bd08      	pop	{r3, pc}
 800893a:	bf00      	nop
 800893c:	200000ac 	.word	0x200000ac

08008940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008942:	2003      	movs	r0, #3
 8008944:	f7f7 ffbe 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	4611      	mov	r1, r2
 800894c:	f06f 000b 	mvn.w	r0, #11
 8008950:	f7f7 ffca 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008954:	2200      	movs	r2, #0
 8008956:	4611      	mov	r1, r2
 8008958:	f06f 000a 	mvn.w	r0, #10
 800895c:	f7f7 ffc4 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008960:	2200      	movs	r2, #0
 8008962:	4611      	mov	r1, r2
 8008964:	f06f 0009 	mvn.w	r0, #9
 8008968:	f7f7 ffbe 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800896c:	2200      	movs	r2, #0
 800896e:	4611      	mov	r1, r2
 8008970:	f06f 0004 	mvn.w	r0, #4
 8008974:	f7f7 ffb8 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008978:	2200      	movs	r2, #0
 800897a:	4611      	mov	r1, r2
 800897c:	f06f 0003 	mvn.w	r0, #3
 8008980:	f7f7 ffb2 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008984:	2200      	movs	r2, #0
 8008986:	210f      	movs	r1, #15
 8008988:	f06f 0001 	mvn.w	r0, #1
 800898c:	f7f7 ffac 	bl	80008e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008990:	2200      	movs	r2, #0
 8008992:	210f      	movs	r1, #15
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	f7f7 ffa6 	bl	80008e8 <HAL_NVIC_SetPriority>
 800899c:	bd08      	pop	{r3, pc}
	...

080089a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <HAL_ADC_MspInit+0x50>)
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d000      	beq.n	80089aa <HAL_ADC_MspInit+0xa>
 80089a8:	4770      	bx	lr
{
 80089aa:	b530      	push	{r4, r5, lr}
 80089ac:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80089ae:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 80089b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089b8:	645a      	str	r2, [r3, #68]	; 0x44
 80089ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	9b00      	ldr	r3, [sp, #0]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80089c4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80089c8:	9301      	str	r3, [sp, #4]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089ca:	2503      	movs	r5, #3
 80089cc:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ce:	2400      	movs	r4, #0
 80089d0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80089d2:	a901      	add	r1, sp, #4
 80089d4:	4807      	ldr	r0, [pc, #28]	; (80089f4 <HAL_ADC_MspInit+0x54>)
 80089d6:	f7f8 f8e5 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80089da:	2301      	movs	r3, #1
 80089dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089de:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80089e2:	a901      	add	r1, sp, #4
 80089e4:	4804      	ldr	r0, [pc, #16]	; (80089f8 <HAL_ADC_MspInit+0x58>)
 80089e6:	f7f8 f8dd 	bl	8000ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80089ea:	b007      	add	sp, #28
 80089ec:	bd30      	pop	{r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	40012200 	.word	0x40012200
 80089f4:	40021400 	.word	0x40021400
 80089f8:	40020000 	.word	0x40020000

080089fc <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 80089fc:	6802      	ldr	r2, [r0, #0]
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_CRC_MspInit+0x28>)
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d000      	beq.n	8008a06 <HAL_CRC_MspInit+0xa>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008a04:	4770      	bx	lr
{
 8008a06:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8008a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
}
 8008a1e:	b002      	add	sp, #8
 8008a20:	e7f0      	b.n	8008a04 <HAL_CRC_MspInit+0x8>
 8008a22:	bf00      	nop
 8008a24:	40023000 	.word	0x40023000

08008a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8008a28:	6802      	ldr	r2, [r0, #0]
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <HAL_TIM_Base_MspInit+0x48>)
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d000      	beq.n	8008a32 <HAL_TIM_Base_MspInit+0xa>
 8008a30:	4770      	bx	lr
{
 8008a32:	b500      	push	{lr}
 8008a34:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008a36:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8008a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3c:	f042 0201 	orr.w	r2, r2, #1
 8008a40:	645a      	str	r2, [r3, #68]	; 0x44
 8008a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8008a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a50:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a52:	2302      	movs	r3, #2
 8008a54:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 8008a60:	a901      	add	r1, sp, #4
 8008a62:	4804      	ldr	r0, [pc, #16]	; (8008a74 <HAL_TIM_Base_MspInit+0x4c>)
 8008a64:	f7f8 f89e 	bl	8000ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008a68:	b007      	add	sp, #28
 8008a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a6e:	bf00      	nop
 8008a70:	40010000 	.word	0x40010000
 8008a74:	40020000 	.word	0x40020000

08008a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8008a78:	6802      	ldr	r2, [r0, #0]
 8008a7a:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <HAL_UART_MspInit+0x58>)
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d000      	beq.n	8008a82 <HAL_UART_MspInit+0xa>
 8008a80:	4770      	bx	lr
{
 8008a82:	b570      	push	{r4, r5, r6, lr}
 8008a84:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a86:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a8c:	f042 0210 	orr.w	r2, r2, #16
 8008a90:	645a      	str	r2, [r3, #68]	; 0x44
 8008a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa0:	2602      	movs	r6, #2
 8008aa2:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa4:	2400      	movs	r4, #0
 8008aa6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008aaa:	2507      	movs	r5, #7
 8008aac:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008aae:	a901      	add	r1, sp, #4
 8008ab0:	4808      	ldr	r0, [pc, #32]	; (8008ad4 <HAL_UART_MspInit+0x5c>)
 8008ab2:	f7f8 f877 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008abc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008abe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ac2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8008ac4:	a901      	add	r1, sp, #4
 8008ac6:	4804      	ldr	r0, [pc, #16]	; (8008ad8 <HAL_UART_MspInit+0x60>)
 8008ac8:	f7f8 f86c 	bl	8000ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008acc:	b006      	add	sp, #24
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	40011000 	.word	0x40011000
 8008ad4:	40020400 	.word	0x40020400
 8008ad8:	40020000 	.word	0x40020000

08008adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008adc:	b500      	push	{lr}
 8008ade:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	201c      	movs	r0, #28
 8008ae6:	f7f7 feff 	bl	80008e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8008aea:	201c      	movs	r0, #28
 8008aec:	f7f7 ff2c 	bl	8000948 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8008af0:	4b15      	ldr	r3, [pc, #84]	; (8008b48 <HAL_InitTick+0x6c>)
 8008af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008af4:	f042 0201 	orr.w	r2, r2, #1
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008b04:	a902      	add	r1, sp, #8
 8008b06:	a803      	add	r0, sp, #12
 8008b08:	f7f9 fd68 	bl	80025dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008b0c:	f7f9 fd46 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8008b10:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008b12:	480e      	ldr	r0, [pc, #56]	; (8008b4c <HAL_InitTick+0x70>)
 8008b14:	fba0 2303 	umull	r2, r3, r0, r3
 8008b18:	0c9b      	lsrs	r3, r3, #18
 8008b1a:	3b01      	subs	r3, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8008b1c:	480c      	ldr	r0, [pc, #48]	; (8008b50 <HAL_InitTick+0x74>)
 8008b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008b22:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8008b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b28:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8008b2a:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b30:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8008b32:	f7fa fa43 	bl	8002fbc <HAL_TIM_Base_Init>
 8008b36:	b118      	cbz	r0, 8008b40 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008b38:	2001      	movs	r0, #1
}
 8008b3a:	b009      	add	sp, #36	; 0x24
 8008b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim2);
 8008b40:	4803      	ldr	r0, [pc, #12]	; (8008b50 <HAL_InitTick+0x74>)
 8008b42:	f7fa f8be 	bl	8002cc2 <HAL_TIM_Base_Start_IT>
 8008b46:	e7f8      	b.n	8008b3a <HAL_InitTick+0x5e>
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	431bde83 	.word	0x431bde83
 8008b50:	2002b708 	.word	0x2002b708

08008b54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008b54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8008b56:	f7fb fc50 	bl	80043fa <osSystickHandler>
 8008b5a:	bd08      	pop	{r3, pc}

08008b5c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8008b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b5e:	4802      	ldr	r0, [pc, #8]	; (8008b68 <TIM2_IRQHandler+0xc>)
 8008b60:	f7fa f8bf 	bl	8002ce2 <HAL_TIM_IRQHandler>
 8008b64:	bd08      	pop	{r3, pc}
 8008b66:	bf00      	nop
 8008b68:	2002b708 	.word	0x2002b708

08008b6c <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8008b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008b6e:	4802      	ldr	r0, [pc, #8]	; (8008b78 <OTG_FS_IRQHandler+0xc>)
 8008b70:	f7f8 fd20 	bl	80015b4 <HAL_PCD_IRQHandler>
 8008b74:	bd08      	pop	{r3, pc}
 8008b76:	bf00      	nop
 8008b78:	2002b96c 	.word	0x2002b96c

08008b7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b7c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b7e:	4a0f      	ldr	r2, [pc, #60]	; (8008bbc <SystemInit+0x40>)
 8008b80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <SystemInit+0x44>)
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	f041 0101 	orr.w	r1, r1, #1
 8008b94:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b96:	2000      	movs	r0, #0
 8008b98:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008b9a:	681c      	ldr	r4, [r3, #0]
 8008b9c:	4909      	ldr	r1, [pc, #36]	; (8008bc4 <SystemInit+0x48>)
 8008b9e:	4021      	ands	r1, r4
 8008ba0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008ba2:	4909      	ldr	r1, [pc, #36]	; (8008bc8 <SystemInit+0x4c>)
 8008ba4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008ba6:	6819      	ldr	r1, [r3, #0]
 8008ba8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8008bac:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008bae:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bb4:	6093      	str	r3, [r2, #8]
#endif
}
 8008bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	e000ed00 	.word	0xe000ed00
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	fef6ffff 	.word	0xfef6ffff
 8008bc8:	24003010 	.word	0x24003010

08008bcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bcc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8008bce:	4c09      	ldr	r4, [pc, #36]	; (8008bf4 <MX_USB_DEVICE_Init+0x28>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <MX_USB_DEVICE_Init+0x2c>)
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7fd fd2f 	bl	8006638 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8008bda:	4908      	ldr	r1, [pc, #32]	; (8008bfc <MX_USB_DEVICE_Init+0x30>)
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f7fd fd42 	bl	8006666 <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8008be2:	4907      	ldr	r1, [pc, #28]	; (8008c00 <MX_USB_DEVICE_Init+0x34>)
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7fd f8ba 	bl	8005d5e <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7fd fd42 	bl	8006674 <USBD_Start>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2002b748 	.word	0x2002b748
 8008bf8:	200000b4 	.word	0x200000b4
 8008bfc:	20000008 	.word	0x20000008
 8008c00:	200000f8 	.word	0x200000f8

08008c04 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c04:	6803      	ldr	r3, [r0, #0]
 8008c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c0a:	d000      	beq.n	8008c0e <HAL_PCD_MspInit+0xa>
 8008c0c:	4770      	bx	lr
{
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	b088      	sub	sp, #32
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8008c12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1c:	2400      	movs	r4, #0
 8008c1e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c20:	2303      	movs	r3, #3
 8008c22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c24:	230a      	movs	r3, #10
 8008c26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c28:	a903      	add	r1, sp, #12
 8008c2a:	4810      	ldr	r0, [pc, #64]	; (8008c6c <HAL_PCD_MspInit+0x68>)
 8008c2c:	f7f7 ffba 	bl	8000ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c30:	4b0f      	ldr	r3, [pc, #60]	; (8008c70 <HAL_PCD_MspInit+0x6c>)
 8008c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c38:	635a      	str	r2, [r3, #52]	; 0x34
 8008c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008c40:	9201      	str	r2, [sp, #4]
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008c56:	4622      	mov	r2, r4
 8008c58:	2105      	movs	r1, #5
 8008c5a:	2043      	movs	r0, #67	; 0x43
 8008c5c:	f7f7 fe44 	bl	80008e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c60:	2043      	movs	r0, #67	; 0x43
 8008c62:	f7f7 fe71 	bl	8000948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c66:	b008      	add	sp, #32
 8008c68:	bd10      	pop	{r4, pc}
 8008c6a:	bf00      	nop
 8008c6c:	40020000 	.word	0x40020000
 8008c70:	40023800 	.word	0x40023800

08008c74 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008c74:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c76:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8008c7a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008c7e:	f7fd fd12 	bl	80066a6 <USBD_LL_SetupStage>
 8008c82:	bd08      	pop	{r3, pc}

08008c84 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c84:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c86:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8008c8a:	0093      	lsls	r3, r2, #2
 8008c8c:	4403      	add	r3, r0
 8008c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c92:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008c96:	f7fd fd33 	bl	8006700 <USBD_LL_DataOutStage>
 8008c9a:	bd08      	pop	{r3, pc}

08008c9c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c9c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c9e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8008ca2:	0093      	lsls	r3, r2, #2
 8008ca4:	4403      	add	r3, r0
 8008ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008cac:	f7fd fd5d 	bl	800676a <USBD_LL_DataInStage>
 8008cb0:	bd08      	pop	{r3, pc}

08008cb2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008cb2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cb4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008cb8:	f7fd fde1 	bl	800687e <USBD_LL_SOF>
 8008cbc:	bd08      	pop	{r3, pc}

08008cbe <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8008cc2:	68c3      	ldr	r3, [r0, #12]
 8008cc4:	b14b      	cbz	r3, 8008cda <HAL_PCD_ResetCallback+0x1c>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8008cc6:	2101      	movs	r1, #1
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cc8:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8008ccc:	f7fd fdc5 	bl	800685a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cd0:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8008cd4:	f7fd fda2 	bl	800681c <USBD_LL_Reset>
 8008cd8:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_HIGH;
 8008cda:	2100      	movs	r1, #0
 8008cdc:	e7f4      	b.n	8008cc8 <HAL_PCD_ResetCallback+0xa>
	...

08008ce0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ce4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008ce8:	f7fd fdba 	bl	8006860 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8008cf2:	f043 0301 	orr.w	r3, r3, #1
 8008cf6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cfa:	6a23      	ldr	r3, [r4, #32]
 8008cfc:	b123      	cbz	r3, 8008d08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cfe:	4a03      	ldr	r2, [pc, #12]	; (8008d0c <HAL_PCD_SuspendCallback+0x2c>)
 8008d00:	6913      	ldr	r3, [r2, #16]
 8008d02:	f043 0306 	orr.w	r3, r3, #6
 8008d06:	6113      	str	r3, [r2, #16]
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000ed00 	.word	0xe000ed00

08008d10 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008d10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d12:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008d16:	f7fd fdac 	bl	8006872 <USBD_LL_Resume>
 8008d1a:	bd08      	pop	{r3, pc}

08008d1c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008d1c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d1e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008d22:	f7fd fdbc 	bl	800689e <USBD_LL_IsoOUTIncomplete>
 8008d26:	bd08      	pop	{r3, pc}

08008d28 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008d28:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d2a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008d2e:	f7fd fdb4 	bl	800689a <USBD_LL_IsoINIncomplete>
 8008d32:	bd08      	pop	{r3, pc}

08008d34 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008d34:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d36:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008d3a:	f7fd fdb2 	bl	80068a2 <USBD_LL_DevConnected>
 8008d3e:	bd08      	pop	{r3, pc}

08008d40 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008d40:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d42:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008d46:	f7fd fdae 	bl	80068a6 <USBD_LL_DevDisconnected>
 8008d4a:	bd08      	pop	{r3, pc}

08008d4c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d4c:	7803      	ldrb	r3, [r0, #0]
 8008d4e:	b10b      	cbz	r3, 8008d54 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8008d50:	2000      	movs	r0, #0
 8008d52:	4770      	bx	lr
{
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8008d58:	4817      	ldr	r0, [pc, #92]	; (8008db8 <USBD_LL_Init+0x6c>)
 8008d5a:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d5e:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008d66:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008d68:	2306      	movs	r3, #6
 8008d6a:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8008d74:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d76:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d78:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d7a:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d7c:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d80:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d82:	f7f8 fb8b 	bl	800149c <HAL_PCD_Init>
 8008d86:	b980      	cbnz	r0, 8008daa <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d88:	4c0b      	ldr	r4, [pc, #44]	; (8008db8 <USBD_LL_Init+0x6c>)
 8008d8a:	2180      	movs	r1, #128	; 0x80
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7f9 f8ba 	bl	8001f06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d92:	2240      	movs	r2, #64	; 0x40
 8008d94:	2100      	movs	r1, #0
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7f9 f891 	bl	8001ebe <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d9c:	2280      	movs	r2, #128	; 0x80
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7f9 f88c 	bl	8001ebe <HAL_PCDEx_SetTxFiFo>
}
 8008da6:	2000      	movs	r0, #0
 8008da8:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8008daa:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008dae:	4803      	ldr	r0, [pc, #12]	; (8008dbc <USBD_LL_Init+0x70>)
 8008db0:	f7ff fbee 	bl	8008590 <_Error_Handler>
 8008db4:	e7e8      	b.n	8008d88 <USBD_LL_Init+0x3c>
 8008db6:	bf00      	nop
 8008db8:	2002b96c 	.word	0x2002b96c
 8008dbc:	0801e624 	.word	0x0801e624

08008dc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008dc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008dc2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008dc6:	f7f8 fbe0 	bl	800158a <HAL_PCD_Start>
     
  switch (hal_status) {
 8008dca:	b118      	cbz	r0, 8008dd4 <USBD_LL_Start+0x14>
 8008dcc:	2802      	cmp	r0, #2
 8008dce:	d003      	beq.n	8008dd8 <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dd0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008dd2:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008dd8:	2001      	movs	r0, #1
    break;
 8008dda:	bd08      	pop	{r3, pc}

08008ddc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008de0:	4613      	mov	r3, r2
 8008de2:	4622      	mov	r2, r4
 8008de4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008de8:	f7f8 ff24 	bl	8001c34 <HAL_PCD_EP_Open>

  switch (hal_status) {
 8008dec:	b118      	cbz	r0, 8008df6 <USBD_LL_OpenEP+0x1a>
 8008dee:	2802      	cmp	r0, #2
 8008df0:	d003      	beq.n	8008dfa <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008df2:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008df4:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8008df6:	2000      	movs	r0, #0
 8008df8:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8008dfa:	2001      	movs	r0, #1
    break;
 8008dfc:	bd10      	pop	{r4, pc}

08008dfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dfe:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e00:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008e04:	f7f8 ff4a 	bl	8001c9c <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8008e08:	b118      	cbz	r0, 8008e12 <USBD_LL_CloseEP+0x14>
 8008e0a:	2802      	cmp	r0, #2
 8008e0c:	d003      	beq.n	8008e16 <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8008e10:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008e12:	2000      	movs	r0, #0
 8008e14:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008e16:	2001      	movs	r0, #1
    break;
 8008e18:	bd08      	pop	{r3, pc}

08008e1a <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e1a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008e1c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008e20:	f7f9 f832 	bl	8001e88 <HAL_PCD_EP_Flush>
      
  switch (hal_status) {
 8008e24:	b118      	cbz	r0, 8008e2e <USBD_LL_FlushEP+0x14>
 8008e26:	2802      	cmp	r0, #2
 8008e28:	d003      	beq.n	8008e32 <USBD_LL_FlushEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e2a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8008e2c:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008e2e:	2000      	movs	r0, #0
 8008e30:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008e32:	2001      	movs	r0, #1
    break;
 8008e34:	bd08      	pop	{r3, pc}

08008e36 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e36:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e38:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008e3c:	f7f8 ffb8 	bl	8001db0 <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8008e40:	b118      	cbz	r0, 8008e4a <USBD_LL_StallEP+0x14>
 8008e42:	2802      	cmp	r0, #2
 8008e44:	d003      	beq.n	8008e4e <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e46:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8008e48:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008e4e:	2001      	movs	r0, #1
    break;
 8008e50:	bd08      	pop	{r3, pc}

08008e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e52:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008e54:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008e58:	f7f8 ffe4 	bl	8001e24 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8008e5c:	b118      	cbz	r0, 8008e66 <USBD_LL_ClearStallEP+0x14>
 8008e5e:	2802      	cmp	r0, #2
 8008e60:	d003      	beq.n	8008e6a <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e62:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8008e64:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008e66:	2000      	movs	r0, #0
 8008e68:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008e6a:	2001      	movs	r0, #1
    break;
 8008e6c:	bd08      	pop	{r3, pc}

08008e6e <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e6e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8008e72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008e76:	d108      	bne.n	8008e8a <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008e78:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8008e7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008e80:	008a      	lsls	r2, r1, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
  }
}
 8008e88:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008e8a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8008e8e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008e92:	008a      	lsls	r2, r1, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8008e9a:	4770      	bx	lr

08008e9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008ea2:	f7f8 feb5 	bl	8001c10 <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8008ea6:	b118      	cbz	r0, 8008eb0 <USBD_LL_SetUSBAddress+0x14>
 8008ea8:	2802      	cmp	r0, #2
 8008eaa:	d003      	beq.n	8008eb4 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eac:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8008eae:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008eb4:	2001      	movs	r0, #1
    break;
 8008eb6:	bd08      	pop	{r3, pc}

08008eb8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008eb8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008eba:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008ebe:	f7f8 ff4e 	bl	8001d5e <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8008ec2:	b118      	cbz	r0, 8008ecc <USBD_LL_Transmit+0x14>
 8008ec4:	2802      	cmp	r0, #2
 8008ec6:	d003      	beq.n	8008ed0 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ec8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8008eca:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008ecc:	2000      	movs	r0, #0
 8008ece:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008ed0:	2001      	movs	r0, #1
    break;
 8008ed2:	bd08      	pop	{r3, pc}

08008ed4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ed4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ed6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008eda:	f7f8 ff0a 	bl	8001cf2 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8008ede:	b118      	cbz	r0, 8008ee8 <USBD_LL_PrepareReceive+0x14>
 8008ee0:	2802      	cmp	r0, #2
 8008ee2:	d003      	beq.n	8008eec <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ee4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8008ee6:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8008ee8:	2000      	movs	r0, #0
 8008eea:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8008eec:	2001      	movs	r0, #1
    break;
 8008eee:	bd08      	pop	{r3, pc}

08008ef0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ef2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008ef6:	f7f8 ff29 	bl	8001d4c <HAL_PCD_EP_GetRxCount>
}
 8008efa:	bd08      	pop	{r3, pc}

08008efc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008efc:	b510      	push	{r4, lr}
 8008efe:	4604      	mov	r4, r0
  switch (msg)
 8008f00:	b111      	cbz	r1, 8008f08 <HAL_PCDEx_LPM_Callback+0xc>
 8008f02:	2901      	cmp	r1, #1
 8008f04:	d016      	beq.n	8008f34 <HAL_PCDEx_LPM_Callback+0x38>
 8008f06:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b95b      	cbnz	r3, 8008f24 <HAL_PCDEx_LPM_Callback+0x28>
      SystemClock_Config();
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8008f1a:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8008f1e:	f7fd fca8 	bl	8006872 <USBD_LL_Resume>
    break;
 8008f22:	bd10      	pop	{r4, pc}
      SystemClock_Config();
 8008f24:	f7ff fbe4 	bl	80086f0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f28:	4a0c      	ldr	r2, [pc, #48]	; (8008f5c <HAL_PCDEx_LPM_Callback+0x60>)
 8008f2a:	6913      	ldr	r3, [r2, #16]
 8008f2c:	f023 0306 	bic.w	r3, r3, #6
 8008f30:	6113      	str	r3, [r2, #16]
 8008f32:	e7eb      	b.n	8008f0c <HAL_PCDEx_LPM_Callback+0x10>
    
  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f34:	6802      	ldr	r2, [r0, #0]
 8008f36:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8008f42:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8008f46:	f7fd fc8b 	bl	8006860 <USBD_LL_Suspend>
    
    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 8008f4a:	6a23      	ldr	r3, [r4, #32]
 8008f4c:	b123      	cbz	r3, 8008f58 <HAL_PCDEx_LPM_Callback+0x5c>
    {   
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f4e:	4a03      	ldr	r2, [pc, #12]	; (8008f5c <HAL_PCDEx_LPM_Callback+0x60>)
 8008f50:	6913      	ldr	r3, [r2, #16]
 8008f52:	f043 0306 	orr.w	r3, r3, #6
 8008f56:	6113      	str	r3, [r2, #16]
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	bf00      	nop
 8008f5c:	e000ed00 	.word	0xe000ed00

08008f60 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f60:	2312      	movs	r3, #18
 8008f62:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8008f64:	4800      	ldr	r0, [pc, #0]	; (8008f68 <USBD_FS_DeviceDescriptor+0x8>)
 8008f66:	4770      	bx	lr
 8008f68:	200000e0 	.word	0x200000e0

08008f6c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008f70:	4800      	ldr	r0, [pc, #0]	; (8008f74 <USBD_FS_LangIDStrDescriptor+0x8>)
 8008f72:	4770      	bx	lr
 8008f74:	200000f4 	.word	0x200000f4

08008f78 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8008f78:	230c      	movs	r3, #12
 8008f7a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8008f7c:	4800      	ldr	r0, [pc, #0]	; (8008f80 <USBD_FS_USR_BOSDescriptor+0x8>)
 8008f7e:	4770      	bx	lr
 8008f80:	200000d4 	.word	0x200000d4

08008f84 <USBD_FS_ProductStrDescriptor>:
{
 8008f84:	b508      	push	{r3, lr}
 8008f86:	460a      	mov	r2, r1
  if(speed == 0)
 8008f88:	b128      	cbz	r0, 8008f96 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f8a:	4905      	ldr	r1, [pc, #20]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008f8c:	4805      	ldr	r0, [pc, #20]	; (8008fa4 <USBD_FS_ProductStrDescriptor+0x20>)
 8008f8e:	f7fd ff03 	bl	8006d98 <USBD_GetString>
}
 8008f92:	4803      	ldr	r0, [pc, #12]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008f94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f96:	4902      	ldr	r1, [pc, #8]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <USBD_FS_ProductStrDescriptor+0x20>)
 8008f9a:	f7fd fefd 	bl	8006d98 <USBD_GetString>
 8008f9e:	e7f8      	b.n	8008f92 <USBD_FS_ProductStrDescriptor+0xe>
 8008fa0:	2002bd6c 	.word	0x2002bd6c
 8008fa4:	0801e668 	.word	0x0801e668

08008fa8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008fa8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008faa:	4c04      	ldr	r4, [pc, #16]	; (8008fbc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8008fac:	460a      	mov	r2, r1
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4803      	ldr	r0, [pc, #12]	; (8008fc0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008fb2:	f7fd fef1 	bl	8006d98 <USBD_GetString>
}
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	bf00      	nop
 8008fbc:	2002bd6c 	.word	0x2002bd6c
 8008fc0:	0801e654 	.word	0x0801e654

08008fc4 <USBD_FS_SerialStrDescriptor>:
{
 8008fc4:	b508      	push	{r3, lr}
 8008fc6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008fc8:	b128      	cbz	r0, 8008fd6 <USBD_FS_SerialStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8008fca:	4905      	ldr	r1, [pc, #20]	; (8008fe0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8008fcc:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <USBD_FS_SerialStrDescriptor+0x20>)
 8008fce:	f7fd fee3 	bl	8006d98 <USBD_GetString>
}
 8008fd2:	4803      	ldr	r0, [pc, #12]	; (8008fe0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8008fd4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8008fd6:	4902      	ldr	r1, [pc, #8]	; (8008fe0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8008fd8:	4802      	ldr	r0, [pc, #8]	; (8008fe4 <USBD_FS_SerialStrDescriptor+0x20>)
 8008fda:	f7fd fedd 	bl	8006d98 <USBD_GetString>
 8008fde:	e7f8      	b.n	8008fd2 <USBD_FS_SerialStrDescriptor+0xe>
 8008fe0:	2002bd6c 	.word	0x2002bd6c
 8008fe4:	0801e67c 	.word	0x0801e67c

08008fe8 <USBD_FS_ConfigStrDescriptor>:
{
 8008fe8:	b508      	push	{r3, lr}
 8008fea:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008fec:	b128      	cbz	r0, 8008ffa <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fee:	4905      	ldr	r1, [pc, #20]	; (8009004 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008ff0:	4805      	ldr	r0, [pc, #20]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x20>)
 8008ff2:	f7fd fed1 	bl	8006d98 <USBD_GetString>
}
 8008ff6:	4803      	ldr	r0, [pc, #12]	; (8009004 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008ff8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ffa:	4902      	ldr	r1, [pc, #8]	; (8009004 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8008ffc:	4802      	ldr	r0, [pc, #8]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x20>)
 8008ffe:	f7fd fecb 	bl	8006d98 <USBD_GetString>
 8009002:	e7f8      	b.n	8008ff6 <USBD_FS_ConfigStrDescriptor+0xe>
 8009004:	2002bd6c 	.word	0x2002bd6c
 8009008:	0801e638 	.word	0x0801e638

0800900c <USBD_FS_InterfaceStrDescriptor>:
{
 800900c:	b508      	push	{r3, lr}
 800900e:	460a      	mov	r2, r1
  if(speed == 0)
 8009010:	b128      	cbz	r0, 800901e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009012:	4905      	ldr	r1, [pc, #20]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009016:	f7fd febf 	bl	8006d98 <USBD_GetString>
}
 800901a:	4803      	ldr	r0, [pc, #12]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800901c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800901e:	4902      	ldr	r1, [pc, #8]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8009020:	4802      	ldr	r0, [pc, #8]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8009022:	f7fd feb9 	bl	8006d98 <USBD_GetString>
 8009026:	e7f8      	b.n	800901a <USBD_FS_InterfaceStrDescriptor+0xe>
 8009028:	2002bd6c 	.word	0x2002bd6c
 800902c:	0801e644 	.word	0x0801e644

08009030 <STORAGE_Init_FS>:
int8_t STORAGE_Init_FS(uint8_t lun)
{
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
  /* USER CODE END 2 */
}
 8009030:	2000      	movs	r0, #0
 8009032:	4770      	bx	lr

08009034 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009038:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800903a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800903e:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8009040:	2000      	movs	r0, #0
 8009042:	4770      	bx	lr

08009044 <STORAGE_IsReady_FS>:
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009044:	2000      	movs	r0, #0
 8009046:	4770      	bx	lr

08009048 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009048:	2000      	movs	r0, #0
 800904a:	4770      	bx	lr

0800904c <STORAGE_Read_FS>:
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800904c:	2000      	movs	r0, #0
 800904e:	4770      	bx	lr

08009050 <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 8009050:	2000      	movs	r0, #0
 8009052:	4770      	bx	lr

08009054 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 8009054:	2000      	movs	r0, #0
 8009056:	4770      	bx	lr

08009058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009090 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800905c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800905e:	e003      	b.n	8009068 <LoopCopyDataInit>

08009060 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009062:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009064:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009066:	3104      	adds	r1, #4

08009068 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009068:	480b      	ldr	r0, [pc, #44]	; (8009098 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800906c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800906e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009070:	d3f6      	bcc.n	8009060 <CopyDataInit>
  ldr  r2, =_sbss
 8009072:	4a0b      	ldr	r2, [pc, #44]	; (80090a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009074:	e002      	b.n	800907c <LoopFillZerobss>

08009076 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009076:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009078:	f842 3b04 	str.w	r3, [r2], #4

0800907c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800907e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009080:	d3f9      	bcc.n	8009076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009082:	f7ff fd7b 	bl	8008b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009086:	f014 ff85 	bl	801df94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800908a:	f7ff fbbb 	bl	8008804 <main>
  bx  lr    
 800908e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009090:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009094:	080224c8 	.word	0x080224c8
  ldr  r0, =_sdata
 8009098:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800909c:	200004c4 	.word	0x200004c4
  ldr  r2, =_sbss
 80090a0:	200004c4 	.word	0x200004c4
  ldr  r3, = _ebss
 80090a4:	2002c148 	.word	0x2002c148

080090a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090a8:	e7fe      	b.n	80090a8 <ADC_IRQHandler>
	...

080090ac <WINDOW_Callback>:
 80090ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090b0:	6846      	ldr	r6, [r0, #4]
 80090b2:	b083      	sub	sp, #12
 80090b4:	4604      	mov	r4, r0
 80090b6:	4630      	mov	r0, r6
 80090b8:	f010 f85a 	bl	8019170 <GUI_ALLOC_LockH>
 80090bc:	ad02      	add	r5, sp, #8
 80090be:	4603      	mov	r3, r0
 80090c0:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 80090c4:	f845 0d08 	str.w	r0, [r5, #-8]!
 80090c8:	4668      	mov	r0, sp
 80090ca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80090cc:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 80090d0:	f010 f860 	bl	8019194 <GUI_ALLOC_UnlockH>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	3b0e      	subs	r3, #14
 80090d8:	2b1c      	cmp	r3, #28
 80090da:	d819      	bhi.n	8009110 <WINDOW_Callback+0x64>
 80090dc:	e8df f003 	tbb	[pc, r3]
 80090e0:	18180f2d 	.word	0x18180f2d
 80090e4:	18181818 	.word	0x18181818
 80090e8:	18181818 	.word	0x18181818
 80090ec:	18181818 	.word	0x18181818
 80090f0:	18564f3a 	.word	0x18564f3a
 80090f4:	1818186f 	.word	0x1818186f
 80090f8:	18181818 	.word	0x18181818
 80090fc:	1f          	.byte	0x1f
 80090fd:	00          	.byte	0x00
 80090fe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009102:	4599      	cmp	r9, r3
 8009104:	d004      	beq.n	8009110 <WINDOW_Callback+0x64>
 8009106:	4648      	mov	r0, r9
 8009108:	f00c fc22 	bl	8015950 <LCD_SetBkColor>
 800910c:	f00e fbe8 	bl	80178e0 <GUI_Clear>
 8009110:	2f00      	cmp	r7, #0
 8009112:	d059      	beq.n	80091c8 <WINDOW_Callback+0x11c>
 8009114:	4620      	mov	r0, r4
 8009116:	47b8      	blx	r7
 8009118:	b003      	add	sp, #12
 800911a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800911e:	4630      	mov	r0, r6
 8009120:	f010 f826 	bl	8019170 <GUI_ALLOC_LockH>
 8009124:	68e3      	ldr	r3, [r4, #12]
 8009126:	9000      	str	r0, [sp, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d05e      	beq.n	80091ea <WINDOW_Callback+0x13e>
 800912c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800912e:	4668      	mov	r0, sp
 8009130:	f010 f830 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913a:	68e3      	ldr	r3, [r4, #12]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	2a00      	cmp	r2, #0
 8009140:	dde6      	ble.n	8009110 <WINDOW_Callback+0x64>
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b09      	cmp	r3, #9
 8009146:	d04c      	beq.n	80091e2 <WINDOW_Callback+0x136>
 8009148:	2b0a      	cmp	r3, #10
 800914a:	d1e1      	bne.n	8009110 <WINDOW_Callback+0x64>
 800914c:	4630      	mov	r0, r6
 800914e:	f005 fd19 	bl	800eb84 <WM_SetFocusOnPrevChild>
 8009152:	e7e1      	b.n	8009118 <WINDOW_Callback+0x6c>
 8009154:	68e4      	ldr	r4, [r4, #12]
 8009156:	2c01      	cmp	r4, #1
 8009158:	d1de      	bne.n	8009118 <WINDOW_Callback+0x6c>
 800915a:	4640      	mov	r0, r8
 800915c:	f006 fd8a 	bl	800fc74 <WM_IsWindow>
 8009160:	2800      	cmp	r0, #0
 8009162:	d03e      	beq.n	80091e2 <WINDOW_Callback+0x136>
 8009164:	4640      	mov	r0, r8
 8009166:	f006 fe11 	bl	800fd8c <WM_SetFocus>
 800916a:	4640      	mov	r0, r8
 800916c:	f006 fd54 	bl	800fc18 <WM_HasFocus>
 8009170:	2800      	cmp	r0, #0
 8009172:	d0d1      	beq.n	8009118 <WINDOW_Callback+0x6c>
 8009174:	4640      	mov	r0, r8
 8009176:	4621      	mov	r1, r4
 8009178:	f000 f960 	bl	800943c <WIDGET_OrState>
 800917c:	e7cc      	b.n	8009118 <WINDOW_Callback+0x6c>
 800917e:	4630      	mov	r0, r6
 8009180:	4621      	mov	r1, r4
 8009182:	f000 f9c7 	bl	8009514 <WIDGET_HandleActive>
 8009186:	b003      	add	sp, #12
 8009188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800918c:	4630      	mov	r0, r6
 800918e:	f00f ffef 	bl	8019170 <GUI_ALLOC_LockH>
 8009192:	68e4      	ldr	r4, [r4, #12]
 8009194:	9001      	str	r0, [sp, #4]
 8009196:	b164      	cbz	r4, 80091b2 <WINDOW_Callback+0x106>
 8009198:	4631      	mov	r1, r6
 800919a:	6860      	ldr	r0, [r4, #4]
 800919c:	f005 fa78 	bl	800e690 <WM__IsAncestorOrSelf>
 80091a0:	4631      	mov	r1, r6
 80091a2:	b9a8      	cbnz	r0, 80091d0 <WINDOW_Callback+0x124>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	f005 fa63 	bl	800e670 <WM__IsAncestor>
 80091aa:	b110      	cbz	r0, 80091b2 <WINDOW_Callback+0x106>
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
 80091b2:	a801      	add	r0, sp, #4
 80091b4:	f00f ffee 	bl	8019194 <GUI_ALLOC_UnlockH>
 80091b8:	b003      	add	sp, #12
 80091ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091be:	f8c4 900c 	str.w	r9, [r4, #12]
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091c8:	4620      	mov	r0, r4
 80091ca:	f009 f9c1 	bl	8012550 <WM_DefaultProc>
 80091ce:	e7a3      	b.n	8009118 <WINDOW_Callback+0x6c>
 80091d0:	6860      	ldr	r0, [r4, #4]
 80091d2:	f005 fa4d 	bl	800e670 <WM__IsAncestor>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d0eb      	beq.n	80091b2 <WINDOW_Callback+0x106>
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	639a      	str	r2, [r3, #56]	; 0x38
 80091e0:	e7e7      	b.n	80091b2 <WINDOW_Callback+0x106>
 80091e2:	4630      	mov	r0, r6
 80091e4:	f005 fd08 	bl	800ebf8 <WM_SetFocusOnNextChild>
 80091e8:	e796      	b.n	8009118 <WINDOW_Callback+0x6c>
 80091ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80091ec:	60e3      	str	r3, [r4, #12]
 80091ee:	e79e      	b.n	800912e <WINDOW_Callback+0x82>

080091f0 <WINDOW_SetBkColor>:
 80091f0:	b530      	push	{r4, r5, lr}
 80091f2:	4604      	mov	r4, r0
 80091f4:	b083      	sub	sp, #12
 80091f6:	460d      	mov	r5, r1
 80091f8:	f00d fc3a 	bl	8016a70 <GUI_Lock>
 80091fc:	4620      	mov	r0, r4
 80091fe:	f00f ffb7 	bl	8019170 <GUI_ALLOC_LockH>
 8009202:	ab02      	add	r3, sp, #8
 8009204:	6405      	str	r5, [r0, #64]	; 0x40
 8009206:	f843 0d04 	str.w	r0, [r3, #-4]!
 800920a:	4618      	mov	r0, r3
 800920c:	f00f ffc2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009210:	4620      	mov	r0, r4
 8009212:	f008 fc37 	bl	8011a84 <WM_InvalidateWindow>
 8009216:	f00d fc21 	bl	8016a5c <GUI_Unlock>
 800921a:	b003      	add	sp, #12
 800921c:	bd30      	pop	{r4, r5, pc}
 800921e:	bf00      	nop

08009220 <WINDOW_CreateIndirect>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	6987      	ldr	r7, [r0, #24]
 8009226:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 800922a:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 800922e:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8009232:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8009236:	8a44      	ldrh	r4, [r0, #18]
 8009238:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 800923c:	b087      	sub	sp, #28
 800923e:	4688      	mov	r8, r1
 8009240:	4493      	add	fp, r2
 8009242:	449a      	add	sl, r3
 8009244:	f00d fc14 	bl	8016a70 <GUI_Lock>
 8009248:	f107 0318 	add.w	r3, r7, #24
 800924c:	4f13      	ldr	r7, [pc, #76]	; (800929c <WINDOW_CreateIndirect+0x7c>)
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	9401      	str	r4, [sp, #4]
 8009252:	f8cd 8000 	str.w	r8, [sp]
 8009256:	4658      	mov	r0, fp
 8009258:	4651      	mov	r1, sl
 800925a:	4632      	mov	r2, r6
 800925c:	462b      	mov	r3, r5
 800925e:	9702      	str	r7, [sp, #8]
 8009260:	f008 fc6c 	bl	8011b3c <WM_CreateWindowAsChild>
 8009264:	4604      	mov	r4, r0
 8009266:	b198      	cbz	r0, 8009290 <WINDOW_CreateIndirect+0x70>
 8009268:	f00f ff82 	bl	8019170 <GUI_ALLOC_LockH>
 800926c:	fa0f f189 	sxth.w	r1, r9
 8009270:	2210      	movs	r2, #16
 8009272:	9005      	str	r0, [sp, #20]
 8009274:	f000 f854 	bl	8009320 <WIDGET__Init>
 8009278:	a806      	add	r0, sp, #24
 800927a:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <WINDOW_CreateIndirect+0x80>)
 800927c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8009280:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	6359      	str	r1, [r3, #52]	; 0x34
 8009286:	2100      	movs	r1, #0
 8009288:	6399      	str	r1, [r3, #56]	; 0x38
 800928a:	641a      	str	r2, [r3, #64]	; 0x40
 800928c:	f00f ff82 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009290:	f00d fbe4 	bl	8016a5c <GUI_Unlock>
 8009294:	4620      	mov	r0, r4
 8009296:	b007      	add	sp, #28
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	080090ad 	.word	0x080090ad
 80092a0:	20000118 	.word	0x20000118

080092a4 <WIDGET__RotateRect90>:
 80092a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80092a8:	b470      	push	{r4, r5, r6}
 80092aa:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80092ae:	8854      	ldrh	r4, [r2, #2]
 80092b0:	88d5      	ldrh	r5, [r2, #6]
 80092b2:	8810      	ldrh	r0, [r2, #0]
 80092b4:	8892      	ldrh	r2, [r2, #4]
 80092b6:	80ca      	strh	r2, [r1, #6]
 80092b8:	1af3      	subs	r3, r6, r3
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	1b5d      	subs	r5, r3, r5
 80092be:	1b1b      	subs	r3, r3, r4
 80092c0:	800d      	strh	r5, [r1, #0]
 80092c2:	808b      	strh	r3, [r1, #4]
 80092c4:	8048      	strh	r0, [r1, #2]
 80092c6:	bc70      	pop	{r4, r5, r6}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop

080092cc <WIDGET__GetClientRect>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80092d0:	071b      	lsls	r3, r3, #28
 80092d2:	b082      	sub	sp, #8
 80092d4:	460c      	mov	r4, r1
 80092d6:	d404      	bmi.n	80092e2 <WIDGET__GetClientRect+0x16>
 80092d8:	4608      	mov	r0, r1
 80092da:	f006 f8e5 	bl	800f4a8 <WM_GetClientRect>
 80092de:	b002      	add	sp, #8
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	4668      	mov	r0, sp
 80092e4:	f006 f8e0 	bl	800f4a8 <WM_GetClientRect>
 80092e8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80092ec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80092f0:	f8bd 2000 	ldrh.w	r2, [sp]
 80092f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80092f8:	8020      	strh	r0, [r4, #0]
 80092fa:	80a1      	strh	r1, [r4, #4]
 80092fc:	8062      	strh	r2, [r4, #2]
 80092fe:	80e3      	strh	r3, [r4, #6]
 8009300:	b002      	add	sp, #8
 8009302:	bd10      	pop	{r4, pc}

08009304 <WIDGET__GetInsideRect>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4605      	mov	r5, r0
 8009308:	460c      	mov	r4, r1
 800930a:	f008 fae5 	bl	80118d8 <WM__GetClientRectWin>
 800930e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009310:	4620      	mov	r0, r4
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4621      	mov	r1, r4
 8009316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931a:	f00c bc61 	b.w	8015be0 <GUI__ReduceRect>
 800931e:	bf00      	nop

08009320 <WIDGET__Init>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <WIDGET__Init+0xc>)
 8009322:	8642      	strh	r2, [r0, #50]	; 0x32
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	8601      	strh	r1, [r0, #48]	; 0x30
 8009328:	62c3      	str	r3, [r0, #44]	; 0x2c
 800932a:	4770      	bx	lr
 800932c:	2000011c 	.word	0x2000011c

08009330 <WIDGET__FillStringInRect>:
 8009330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009334:	4c40      	ldr	r4, [pc, #256]	; (8009438 <WIDGET__FillStringInRect+0x108>)
 8009336:	6825      	ldr	r5, [r4, #0]
 8009338:	696e      	ldr	r6, [r5, #20]
 800933a:	b085      	sub	sp, #20
 800933c:	4607      	mov	r7, r0
 800933e:	460c      	mov	r4, r1
 8009340:	4691      	mov	r9, r2
 8009342:	4698      	mov	r8, r3
 8009344:	b306      	cbz	r6, 8009388 <WIDGET__FillStringInRect+0x58>
 8009346:	6808      	ldr	r0, [r1, #0]
 8009348:	6849      	ldr	r1, [r1, #4]
 800934a:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 800934e:	f8b5 e050 	ldrh.w	lr, [r5, #80]	; 0x50
 8009352:	466d      	mov	r5, sp
 8009354:	c503      	stmia	r5!, {r0, r1}
 8009356:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800935a:	f8bd 5000 	ldrh.w	r5, [sp]
 800935e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8009362:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009366:	441d      	add	r5, r3
 8009368:	4472      	add	r2, lr
 800936a:	4463      	add	r3, ip
 800936c:	448e      	add	lr, r1
 800936e:	4630      	mov	r0, r6
 8009370:	4669      	mov	r1, sp
 8009372:	f8ad 5000 	strh.w	r5, [sp]
 8009376:	f8ad 3004 	strh.w	r3, [sp, #4]
 800937a:	f8ad 2002 	strh.w	r2, [sp, #2]
 800937e:	f8ad e006 	strh.w	lr, [sp, #6]
 8009382:	f00e fdc5 	bl	8017f10 <GUI_RectsIntersect>
 8009386:	b128      	cbz	r0, 8009394 <WIDGET__FillStringInRect+0x64>
 8009388:	b10f      	cbz	r7, 800938e <WIDGET__FillStringInRect+0x5e>
 800938a:	783b      	ldrb	r3, [r7, #0]
 800938c:	b92b      	cbnz	r3, 800939a <WIDGET__FillStringInRect+0x6a>
 800938e:	4620      	mov	r0, r4
 8009390:	f00e fa6c 	bl	801786c <GUI_ClearRectEx>
 8009394:	b005      	add	sp, #20
 8009396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939a:	f00e fcf1 	bl	8017d80 <GUI_GetBkColor>
 800939e:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80093a2:	d344      	bcc.n	800942e <WIDGET__FillStringInRect+0xfe>
 80093a4:	2000      	movs	r0, #0
 80093a6:	f00e fe91 	bl	80180cc <GUI_SetTextMode>
 80093aa:	4649      	mov	r1, r9
 80093ac:	4642      	mov	r2, r8
 80093ae:	a802      	add	r0, sp, #8
 80093b0:	f00c fb9e 	bl	8015af0 <GUI__IntersectRects>
 80093b4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80093b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80093bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80093c0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	f00e fa1b 	bl	8017800 <GUI_ClearRect>
 80093ca:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80093ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80093d2:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80093d6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80093da:	3a01      	subs	r2, #1
 80093dc:	f00e fa10 	bl	8017800 <GUI_ClearRect>
 80093e0:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80093e4:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80093e8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80093ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80093f0:	3001      	adds	r0, #1
 80093f2:	f00e fa05 	bl	8017800 <GUI_ClearRect>
 80093f6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80093fa:	f9b4 0000 	ldrsh.w	r0, [r4]
 80093fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009402:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009406:	3101      	adds	r1, #1
 8009408:	f00e f9fa 	bl	8017800 <GUI_ClearRect>
 800940c:	4648      	mov	r0, r9
 800940e:	f006 fd69 	bl	800fee4 <WM_SetUserClipRect>
 8009412:	f9b8 1000 	ldrsh.w	r1, [r8]
 8009416:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800941a:	4604      	mov	r4, r0
 800941c:	4638      	mov	r0, r7
 800941e:	f00d fe89 	bl	8017134 <GUI_DispStringAt>
 8009422:	4620      	mov	r0, r4
 8009424:	f006 fd5e 	bl	800fee4 <WM_SetUserClipRect>
 8009428:	b005      	add	sp, #20
 800942a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800942e:	2002      	movs	r0, #2
 8009430:	f00e fe4c 	bl	80180cc <GUI_SetTextMode>
 8009434:	e7ea      	b.n	800940c <WIDGET__FillStringInRect+0xdc>
 8009436:	bf00      	nop
 8009438:	2000026c 	.word	0x2000026c

0800943c <WIDGET_OrState>:
 800943c:	b530      	push	{r4, r5, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	b083      	sub	sp, #12
 8009442:	460d      	mov	r5, r1
 8009444:	b908      	cbnz	r0, 800944a <WIDGET_OrState+0xe>
 8009446:	b003      	add	sp, #12
 8009448:	bd30      	pop	{r4, r5, pc}
 800944a:	f00d fb11 	bl	8016a70 <GUI_Lock>
 800944e:	4620      	mov	r0, r4
 8009450:	f00f fe8e 	bl	8019170 <GUI_ALLOC_LockH>
 8009454:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009456:	9001      	str	r0, [sp, #4]
 8009458:	ea05 0203 	and.w	r2, r5, r3
 800945c:	42aa      	cmp	r2, r5
 800945e:	d004      	beq.n	800946a <WIDGET_OrState+0x2e>
 8009460:	431d      	orrs	r5, r3
 8009462:	8645      	strh	r5, [r0, #50]	; 0x32
 8009464:	4620      	mov	r0, r4
 8009466:	f008 fb0d 	bl	8011a84 <WM_InvalidateWindow>
 800946a:	a801      	add	r0, sp, #4
 800946c:	f00f fe92 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009470:	f00d faf4 	bl	8016a5c <GUI_Unlock>
 8009474:	b003      	add	sp, #12
 8009476:	bd30      	pop	{r4, r5, pc}

08009478 <WIDGET_AndState>:
 8009478:	b530      	push	{r4, r5, lr}
 800947a:	4604      	mov	r4, r0
 800947c:	b083      	sub	sp, #12
 800947e:	460d      	mov	r5, r1
 8009480:	b908      	cbnz	r0, 8009486 <WIDGET_AndState+0xe>
 8009482:	b003      	add	sp, #12
 8009484:	bd30      	pop	{r4, r5, pc}
 8009486:	f00d faf3 	bl	8016a70 <GUI_Lock>
 800948a:	4620      	mov	r0, r4
 800948c:	f00f fe70 	bl	8019170 <GUI_ALLOC_LockH>
 8009490:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009492:	9001      	str	r0, [sp, #4]
 8009494:	ea23 0505 	bic.w	r5, r3, r5
 8009498:	42ab      	cmp	r3, r5
 800949a:	d003      	beq.n	80094a4 <WIDGET_AndState+0x2c>
 800949c:	8645      	strh	r5, [r0, #50]	; 0x32
 800949e:	4620      	mov	r0, r4
 80094a0:	f008 faf0 	bl	8011a84 <WM_InvalidateWindow>
 80094a4:	a801      	add	r0, sp, #4
 80094a6:	f00f fe75 	bl	8019194 <GUI_ALLOC_UnlockH>
 80094aa:	f00d fad7 	bl	8016a5c <GUI_Unlock>
 80094ae:	b003      	add	sp, #12
 80094b0:	bd30      	pop	{r4, r5, pc}
 80094b2:	bf00      	nop

080094b4 <WIDGET_SetFocusable>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	4604      	mov	r4, r0
 80094b8:	b082      	sub	sp, #8
 80094ba:	b9c9      	cbnz	r1, 80094f0 <WIDGET_SetFocusable+0x3c>
 80094bc:	b908      	cbnz	r0, 80094c2 <WIDGET_SetFocusable+0xe>
 80094be:	b002      	add	sp, #8
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	f00d fad5 	bl	8016a70 <GUI_Lock>
 80094c6:	4620      	mov	r0, r4
 80094c8:	f00f fe52 	bl	8019170 <GUI_ALLOC_LockH>
 80094cc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80094ce:	9001      	str	r0, [sp, #4]
 80094d0:	f023 0210 	bic.w	r2, r3, #16
 80094d4:	b292      	uxth	r2, r2
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d003      	beq.n	80094e2 <WIDGET_SetFocusable+0x2e>
 80094da:	8642      	strh	r2, [r0, #50]	; 0x32
 80094dc:	4620      	mov	r0, r4
 80094de:	f008 fad1 	bl	8011a84 <WM_InvalidateWindow>
 80094e2:	a801      	add	r0, sp, #4
 80094e4:	f00f fe56 	bl	8019194 <GUI_ALLOC_UnlockH>
 80094e8:	f00d fab8 	bl	8016a5c <GUI_Unlock>
 80094ec:	b002      	add	sp, #8
 80094ee:	bd10      	pop	{r4, pc}
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d0e4      	beq.n	80094be <WIDGET_SetFocusable+0xa>
 80094f4:	f00d fabc 	bl	8016a70 <GUI_Lock>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f00f fe39 	bl	8019170 <GUI_ALLOC_LockH>
 80094fe:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009500:	9001      	str	r0, [sp, #4]
 8009502:	06da      	lsls	r2, r3, #27
 8009504:	d4ed      	bmi.n	80094e2 <WIDGET_SetFocusable+0x2e>
 8009506:	f043 0310 	orr.w	r3, r3, #16
 800950a:	8643      	strh	r3, [r0, #50]	; 0x32
 800950c:	4620      	mov	r0, r4
 800950e:	f008 fab9 	bl	8011a84 <WM_InvalidateWindow>
 8009512:	e7e6      	b.n	80094e2 <WIDGET_SetFocusable+0x2e>

08009514 <WIDGET_HandleActive>:
 8009514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009518:	460d      	mov	r5, r1
 800951a:	b084      	sub	sp, #16
 800951c:	4607      	mov	r7, r0
 800951e:	b920      	cbnz	r0, 800952a <WIDGET_HandleActive+0x16>
 8009520:	2401      	movs	r4, #1
 8009522:	4620      	mov	r0, r4
 8009524:	b004      	add	sp, #16
 8009526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952a:	f00f fe21 	bl	8019170 <GUI_ALLOC_LockH>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	9002      	str	r0, [sp, #8]
 8009532:	2b16      	cmp	r3, #22
 8009534:	4606      	mov	r6, r0
 8009536:	f000 8090 	beq.w	800965a <WIDGET_HandleActive+0x146>
 800953a:	dd2a      	ble.n	8009592 <WIDGET_HandleActive+0x7e>
 800953c:	2b1f      	cmp	r3, #31
 800953e:	d07c      	beq.n	800963a <WIDGET_HandleActive+0x126>
 8009540:	dd51      	ble.n	80095e6 <WIDGET_HandleActive+0xd2>
 8009542:	2b31      	cmp	r3, #49	; 0x31
 8009544:	d037      	beq.n	80095b6 <WIDGET_HandleActive+0xa2>
 8009546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800954a:	d148      	bne.n	80095de <WIDGET_HandleActive+0xca>
 800954c:	68eb      	ldr	r3, [r5, #12]
 800954e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009550:	6819      	ldr	r1, [r3, #0]
 8009552:	6815      	ldr	r5, [r2, #0]
 8009554:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009556:	a802      	add	r0, sp, #8
 8009558:	1a6d      	subs	r5, r5, r1
 800955a:	f00f fe1b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800955e:	f00d fa87 	bl	8016a70 <GUI_Lock>
 8009562:	4638      	mov	r0, r7
 8009564:	f00f fe04 	bl	8019170 <GUI_ALLOC_LockH>
 8009568:	ac04      	add	r4, sp, #16
 800956a:	4269      	negs	r1, r5
 800956c:	9500      	str	r5, [sp, #0]
 800956e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009572:	462b      	mov	r3, r5
 8009574:	460a      	mov	r2, r1
 8009576:	f005 f8e5 	bl	800e744 <WM__UpdateChildPositions>
 800957a:	4620      	mov	r0, r4
 800957c:	f00f fe0a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009580:	f00d fa6c 	bl	8016a5c <GUI_Unlock>
 8009584:	4638      	mov	r0, r7
 8009586:	f008 fa7d 	bl	8011a84 <WM_InvalidateWindow>
 800958a:	9e02      	ldr	r6, [sp, #8]
 800958c:	2400      	movs	r4, #0
 800958e:	b95e      	cbnz	r6, 80095a8 <WIDGET_HandleActive+0x94>
 8009590:	e7c7      	b.n	8009522 <WIDGET_HandleActive+0xe>
 8009592:	2b11      	cmp	r3, #17
 8009594:	d057      	beq.n	8009646 <WIDGET_HandleActive+0x132>
 8009596:	dd3c      	ble.n	8009612 <WIDGET_HandleActive+0xfe>
 8009598:	2b14      	cmp	r3, #20
 800959a:	d011      	beq.n	80095c0 <WIDGET_HandleActive+0xac>
 800959c:	2b15      	cmp	r3, #21
 800959e:	d11e      	bne.n	80095de <WIDGET_HandleActive+0xca>
 80095a0:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 80095a4:	60eb      	str	r3, [r5, #12]
 80095a6:	2400      	movs	r4, #0
 80095a8:	a802      	add	r0, sp, #8
 80095aa:	f00f fdf3 	bl	8019194 <GUI_ALLOC_UnlockH>
 80095ae:	4620      	mov	r0, r4
 80095b0:	b004      	add	sp, #16
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b6:	2400      	movs	r4, #0
 80095b8:	60ec      	str	r4, [r5, #12]
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d1f4      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 80095be:	e7b0      	b.n	8009522 <WIDGET_HandleActive+0xe>
 80095c0:	68ec      	ldr	r4, [r5, #12]
 80095c2:	4621      	mov	r1, r4
 80095c4:	f008 f988 	bl	80118d8 <WM__GetClientRectWin>
 80095c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80095ca:	4620      	mov	r0, r4
 80095cc:	4621      	mov	r1, r4
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	f00c fb06 	bl	8015be0 <GUI__ReduceRect>
 80095d4:	9e02      	ldr	r6, [sp, #8]
 80095d6:	2400      	movs	r4, #0
 80095d8:	2e00      	cmp	r6, #0
 80095da:	d1e5      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 80095dc:	e7a1      	b.n	8009522 <WIDGET_HandleActive+0xe>
 80095de:	2401      	movs	r4, #1
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	d1e1      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 80095e4:	e79d      	b.n	8009522 <WIDGET_HandleActive+0xe>
 80095e6:	2b1e      	cmp	r3, #30
 80095e8:	d1f9      	bne.n	80095de <WIDGET_HandleActive+0xca>
 80095ea:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80095ee:	f1b8 0f01 	cmp.w	r8, #1
 80095f2:	d136      	bne.n	8009662 <WIDGET_HandleActive+0x14e>
 80095f4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80095f6:	f003 0410 	and.w	r4, r3, #16
 80095fa:	b2a4      	uxth	r4, r4
 80095fc:	2c00      	cmp	r4, #0
 80095fe:	d153      	bne.n	80096a8 <WIDGET_HandleActive+0x194>
 8009600:	a802      	add	r0, sp, #8
 8009602:	f00f fdc7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009606:	9e02      	ldr	r6, [sp, #8]
 8009608:	f8c5 800c 	str.w	r8, [r5, #12]
 800960c:	2e00      	cmp	r6, #0
 800960e:	d1cb      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 8009610:	e787      	b.n	8009522 <WIDGET_HandleActive+0xe>
 8009612:	2b0d      	cmp	r3, #13
 8009614:	d1e3      	bne.n	80095de <WIDGET_HandleActive+0xca>
 8009616:	68eb      	ldr	r3, [r5, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0df      	beq.n	80095de <WIDGET_HandleActive+0xca>
 800961e:	7a1b      	ldrb	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0dc      	beq.n	80095de <WIDGET_HandleActive+0xca>
 8009624:	a802      	add	r0, sp, #8
 8009626:	f00f fdb5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800962a:	4638      	mov	r0, r7
 800962c:	f006 fe34 	bl	8010298 <WM_BringToTop>
 8009630:	9e02      	ldr	r6, [sp, #8]
 8009632:	2400      	movs	r4, #0
 8009634:	2e00      	cmp	r6, #0
 8009636:	d1b7      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 8009638:	e773      	b.n	8009522 <WIDGET_HandleActive+0xe>
 800963a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800963c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009640:	60eb      	str	r3, [r5, #12]
 8009642:	2400      	movs	r4, #0
 8009644:	e7b0      	b.n	80095a8 <WIDGET_HandleActive+0x94>
 8009646:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009648:	06db      	lsls	r3, r3, #27
 800964a:	d504      	bpl.n	8009656 <WIDGET_HandleActive+0x142>
 800964c:	68eb      	ldr	r3, [r5, #12]
 800964e:	b113      	cbz	r3, 8009656 <WIDGET_HandleActive+0x142>
 8009650:	7a1b      	ldrb	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d13e      	bne.n	80096d4 <WIDGET_HandleActive+0x1c0>
 8009656:	2401      	movs	r4, #1
 8009658:	e7a6      	b.n	80095a8 <WIDGET_HandleActive+0x94>
 800965a:	68eb      	ldr	r3, [r5, #12]
 800965c:	8603      	strh	r3, [r0, #48]	; 0x30
 800965e:	2400      	movs	r4, #0
 8009660:	e7a2      	b.n	80095a8 <WIDGET_HandleActive+0x94>
 8009662:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8009664:	f00d fa04 	bl	8016a70 <GUI_Lock>
 8009668:	4638      	mov	r0, r7
 800966a:	f00f fd81 	bl	8019170 <GUI_ALLOC_LockH>
 800966e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009670:	9003      	str	r0, [sp, #12]
 8009672:	f024 0401 	bic.w	r4, r4, #1
 8009676:	429c      	cmp	r4, r3
 8009678:	d003      	beq.n	8009682 <WIDGET_HandleActive+0x16e>
 800967a:	8644      	strh	r4, [r0, #50]	; 0x32
 800967c:	4638      	mov	r0, r7
 800967e:	f008 fa01 	bl	8011a84 <WM_InvalidateWindow>
 8009682:	a803      	add	r0, sp, #12
 8009684:	f00f fd86 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009688:	2409      	movs	r4, #9
 800968a:	f00d f9e7 	bl	8016a5c <GUI_Unlock>
 800968e:	a802      	add	r0, sp, #8
 8009690:	f00f fd80 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009694:	4621      	mov	r1, r4
 8009696:	4638      	mov	r0, r7
 8009698:	f006 faf8 	bl	800fc8c <WM_NotifyParent>
 800969c:	9e02      	ldr	r6, [sp, #8]
 800969e:	2400      	movs	r4, #0
 80096a0:	60ec      	str	r4, [r5, #12]
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	d180      	bne.n	80095a8 <WIDGET_HandleActive+0x94>
 80096a6:	e73c      	b.n	8009522 <WIDGET_HandleActive+0xe>
 80096a8:	f043 0401 	orr.w	r4, r3, #1
 80096ac:	f00d f9e0 	bl	8016a70 <GUI_Lock>
 80096b0:	4638      	mov	r0, r7
 80096b2:	f00f fd5d 	bl	8019170 <GUI_ALLOC_LockH>
 80096b6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80096b8:	9003      	str	r0, [sp, #12]
 80096ba:	42a3      	cmp	r3, r4
 80096bc:	d003      	beq.n	80096c6 <WIDGET_HandleActive+0x1b2>
 80096be:	8644      	strh	r4, [r0, #50]	; 0x32
 80096c0:	4638      	mov	r0, r7
 80096c2:	f008 f9df 	bl	8011a84 <WM_InvalidateWindow>
 80096c6:	a803      	add	r0, sp, #12
 80096c8:	f00f fd64 	bl	8019194 <GUI_ALLOC_UnlockH>
 80096cc:	2408      	movs	r4, #8
 80096ce:	f00d f9c5 	bl	8016a5c <GUI_Unlock>
 80096d2:	e7dc      	b.n	800968e <WIDGET_HandleActive+0x17a>
 80096d4:	a802      	add	r0, sp, #8
 80096d6:	f00f fd5d 	bl	8019194 <GUI_ALLOC_UnlockH>
 80096da:	4638      	mov	r0, r7
 80096dc:	f006 fb56 	bl	800fd8c <WM_SetFocus>
 80096e0:	9e02      	ldr	r6, [sp, #8]
 80096e2:	2401      	movs	r4, #1
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	f47f af5f 	bne.w	80095a8 <WIDGET_HandleActive+0x94>
 80096ea:	e71a      	b.n	8009522 <WIDGET_HandleActive+0xe>

080096ec <WIDGET__SetScrollState>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	460c      	mov	r4, r1
 80096f0:	21fe      	movs	r1, #254	; 0xfe
 80096f2:	4615      	mov	r5, r2
 80096f4:	4606      	mov	r6, r0
 80096f6:	f005 ff61 	bl	800f5bc <WM_GetDialogItem>
 80096fa:	4621      	mov	r1, r4
 80096fc:	f006 fbb4 	bl	800fe68 <WM_SetScrollState>
 8009700:	4630      	mov	r0, r6
 8009702:	21ff      	movs	r1, #255	; 0xff
 8009704:	f005 ff5a 	bl	800f5bc <WM_GetDialogItem>
 8009708:	4629      	mov	r1, r5
 800970a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800970e:	f006 bbab 	b.w	800fe68 <WM_SetScrollState>
 8009712:	bf00      	nop

08009714 <WIDGET__DrawTriangle>:
 8009714:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	460d      	mov	r5, r1
 800971c:	0701      	lsls	r1, r0, #28
 800971e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009722:	4617      	mov	r7, r2
 8009724:	461c      	mov	r4, r3
 8009726:	d411      	bmi.n	800974c <WIDGET__DrawTriangle+0x38>
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfa8      	it	ge
 800972c:	ebc3 0602 	rsbge	r6, r3, r2
 8009730:	db1c      	blt.n	800976c <WIDGET__DrawTriangle+0x58>
 8009732:	4628      	mov	r0, r5
 8009734:	4631      	mov	r1, r6
 8009736:	19e2      	adds	r2, r4, r7
 8009738:	3c01      	subs	r4, #1
 800973a:	f00d fb5b 	bl	8016df4 <GUI_DrawVLine>
 800973e:	1c63      	adds	r3, r4, #1
 8009740:	4445      	add	r5, r8
 8009742:	f106 0601 	add.w	r6, r6, #1
 8009746:	d1f4      	bne.n	8009732 <WIDGET__DrawTriangle+0x1e>
 8009748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974c:	2b00      	cmp	r3, #0
 800974e:	dbfb      	blt.n	8009748 <WIDGET__DrawTriangle+0x34>
 8009750:	1ad6      	subs	r6, r2, r3
 8009752:	19e2      	adds	r2, r4, r7
 8009754:	4628      	mov	r0, r5
 8009756:	4631      	mov	r1, r6
 8009758:	3c01      	subs	r4, #1
 800975a:	f00d faf5 	bl	8016d48 <GUI_DrawHLine>
 800975e:	1c62      	adds	r2, r4, #1
 8009760:	4445      	add	r5, r8
 8009762:	f106 0601 	add.w	r6, r6, #1
 8009766:	d1f4      	bne.n	8009752 <WIDGET__DrawTriangle+0x3e>
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009770 <WIDGET__EFFECT_DrawDown>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	4604      	mov	r4, r0
 8009774:	b084      	sub	sp, #16
 8009776:	4668      	mov	r0, sp
 8009778:	f005 fe96 	bl	800f4a8 <WM_GetClientRect>
 800977c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800977e:	071b      	lsls	r3, r3, #28
 8009780:	d517      	bpl.n	80097b2 <WIDGET__EFFECT_DrawDown+0x42>
 8009782:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8009786:	f9b4 3000 	ldrsh.w	r3, [r4]
 800978a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800978e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8009792:	f8bd 6000 	ldrh.w	r6, [sp]
 8009796:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800979a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800979e:	1aeb      	subs	r3, r5, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	1a59      	subs	r1, r3, r1
 80097a4:	1a1b      	subs	r3, r3, r0
 80097a6:	f8ad 1000 	strh.w	r1, [sp]
 80097aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80097ae:	f8ad 2006 	strh.w	r2, [sp, #6]
 80097b2:	f104 0308 	add.w	r3, r4, #8
 80097b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80097bc:	ab02      	add	r3, sp, #8
 80097be:	6815      	ldr	r5, [r2, #0]
 80097c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80097c4:	4619      	mov	r1, r3
 80097c6:	4620      	mov	r0, r4
 80097c8:	f004 ff7e 	bl	800e6c8 <WM__Screen2Client>
 80097cc:	f9bd 2000 	ldrsh.w	r2, [sp]
 80097d0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80097d4:	442a      	add	r2, r5
 80097d6:	429a      	cmp	r2, r3
 80097d8:	dc14      	bgt.n	8009804 <WIDGET__EFFECT_DrawDown+0x94>
 80097da:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80097de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80097e2:	1b52      	subs	r2, r2, r5
 80097e4:	429a      	cmp	r2, r3
 80097e6:	db0d      	blt.n	8009804 <WIDGET__EFFECT_DrawDown+0x94>
 80097e8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80097ec:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80097f0:	442a      	add	r2, r5
 80097f2:	429a      	cmp	r2, r3
 80097f4:	dc06      	bgt.n	8009804 <WIDGET__EFFECT_DrawDown+0x94>
 80097f6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80097fa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80097fe:	1b55      	subs	r5, r2, r5
 8009800:	429d      	cmp	r5, r3
 8009802:	da03      	bge.n	800980c <WIDGET__EFFECT_DrawDown+0x9c>
 8009804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009806:	4668      	mov	r0, sp
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	4798      	blx	r3
 800980c:	b004      	add	sp, #16
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <WIDGET_SetEffect>:
 8009810:	b500      	push	{lr}
 8009812:	b085      	sub	sp, #20
 8009814:	2200      	movs	r2, #0
 8009816:	9103      	str	r1, [sp, #12]
 8009818:	f44f 7340 	mov.w	r3, #768	; 0x300
 800981c:	4669      	mov	r1, sp
 800981e:	9202      	str	r2, [sp, #8]
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	f008 f83d 	bl	80118a0 <WM_SendMessage>
 8009826:	b005      	add	sp, #20
 8009828:	f85d fb04 	ldr.w	pc, [sp], #4

0800982c <_GetNextVisibleItem>:
 800982c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982e:	b083      	sub	sp, #12
 8009830:	4607      	mov	r7, r0
 8009832:	f00f fc9d 	bl	8019170 <GUI_ALLOC_LockH>
 8009836:	8b03      	ldrh	r3, [r0, #24]
 8009838:	9000      	str	r0, [sp, #0]
 800983a:	079c      	lsls	r4, r3, #30
 800983c:	d50d      	bpl.n	800985a <_GetNextVisibleItem+0x2e>
 800983e:	6845      	ldr	r5, [r0, #4]
 8009840:	4668      	mov	r0, sp
 8009842:	f00f fca7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009846:	bb0d      	cbnz	r5, 800988c <_GetNextVisibleItem+0x60>
 8009848:	4638      	mov	r0, r7
 800984a:	b003      	add	sp, #12
 800984c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984e:	0792      	lsls	r2, r2, #30
 8009850:	d42b      	bmi.n	80098aa <_GetNextVisibleItem+0x7e>
 8009852:	a801      	add	r0, sp, #4
 8009854:	f00f fc9e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009858:	9800      	ldr	r0, [sp, #0]
 800985a:	6845      	ldr	r5, [r0, #4]
 800985c:	4668      	mov	r0, sp
 800985e:	b915      	cbnz	r5, 8009866 <_GetNextVisibleItem+0x3a>
 8009860:	f00f fc98 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009864:	e7f0      	b.n	8009848 <_GetNextVisibleItem+0x1c>
 8009866:	f00f fc95 	bl	8019194 <GUI_ALLOC_UnlockH>
 800986a:	4628      	mov	r0, r5
 800986c:	f00f fc80 	bl	8019170 <GUI_ALLOC_LockH>
 8009870:	9000      	str	r0, [sp, #0]
 8009872:	4628      	mov	r0, r5
 8009874:	f00f fc7c 	bl	8019170 <GUI_ALLOC_LockH>
 8009878:	7f06      	ldrb	r6, [r0, #28]
 800987a:	9001      	str	r0, [sp, #4]
 800987c:	6884      	ldr	r4, [r0, #8]
 800987e:	a801      	add	r0, sp, #4
 8009880:	b93c      	cbnz	r4, 8009892 <_GetNextVisibleItem+0x66>
 8009882:	f00f fc87 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009886:	4668      	mov	r0, sp
 8009888:	f00f fc84 	bl	8019194 <GUI_ALLOC_UnlockH>
 800988c:	4628      	mov	r0, r5
 800988e:	b003      	add	sp, #12
 8009890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009892:	f00f fc7f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009896:	4620      	mov	r0, r4
 8009898:	f00f fc6a 	bl	8019170 <GUI_ALLOC_LockH>
 800989c:	7f03      	ldrb	r3, [r0, #28]
 800989e:	9001      	str	r0, [sp, #4]
 80098a0:	42b3      	cmp	r3, r6
 80098a2:	da03      	bge.n	80098ac <_GetNextVisibleItem+0x80>
 80098a4:	8b02      	ldrh	r2, [r0, #24]
 80098a6:	07d1      	lsls	r1, r2, #31
 80098a8:	d4d1      	bmi.n	800984e <_GetNextVisibleItem+0x22>
 80098aa:	461e      	mov	r6, r3
 80098ac:	2e00      	cmp	r6, #0
 80098ae:	d1e5      	bne.n	800987c <_GetNextVisibleItem+0x50>
 80098b0:	a801      	add	r0, sp, #4
 80098b2:	e7e6      	b.n	8009882 <_GetNextVisibleItem+0x56>

080098b4 <_GetPrevVisibleItem>:
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	4607      	mov	r7, r0
 80098bc:	f00f fc58 	bl	8019170 <GUI_ALLOC_LockH>
 80098c0:	ae02      	add	r6, sp, #8
 80098c2:	f890 801c 	ldrb.w	r8, [r0, #28]
 80098c6:	f846 0d04 	str.w	r0, [r6, #-4]!
 80098ca:	4603      	mov	r3, r0
 80098cc:	2500      	movs	r5, #0
 80098ce:	689c      	ldr	r4, [r3, #8]
 80098d0:	4630      	mov	r0, r6
 80098d2:	b944      	cbnz	r4, 80098e6 <_GetPrevVisibleItem+0x32>
 80098d4:	f00f fc5e 	bl	8019194 <GUI_ALLOC_UnlockH>
 80098d8:	2d00      	cmp	r5, #0
 80098da:	bf14      	ite	ne
 80098dc:	4628      	movne	r0, r5
 80098de:	4638      	moveq	r0, r7
 80098e0:	b002      	add	sp, #8
 80098e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e6:	f00f fc55 	bl	8019194 <GUI_ALLOC_UnlockH>
 80098ea:	4620      	mov	r0, r4
 80098ec:	f00f fc40 	bl	8019170 <GUI_ALLOC_LockH>
 80098f0:	9001      	str	r0, [sp, #4]
 80098f2:	b915      	cbnz	r5, 80098fa <_GetPrevVisibleItem+0x46>
 80098f4:	f890 801c 	ldrb.w	r8, [r0, #28]
 80098f8:	4625      	mov	r5, r4
 80098fa:	8b02      	ldrh	r2, [r0, #24]
 80098fc:	07d3      	lsls	r3, r2, #31
 80098fe:	d507      	bpl.n	8009910 <_GetPrevVisibleItem+0x5c>
 8009900:	7f01      	ldrb	r1, [r0, #28]
 8009902:	4588      	cmp	r8, r1
 8009904:	dd04      	ble.n	8009910 <_GetPrevVisibleItem+0x5c>
 8009906:	f012 0f02 	tst.w	r2, #2
 800990a:	bf08      	it	eq
 800990c:	4625      	moveq	r5, r4
 800990e:	4688      	mov	r8, r1
 8009910:	4603      	mov	r3, r0
 8009912:	e7dc      	b.n	80098ce <_GetPrevVisibleItem+0x1a>

08009914 <TREEVIEW_OwnerDraw>:
 8009914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	6843      	ldr	r3, [r0, #4]
 800991a:	3b01      	subs	r3, #1
 800991c:	2b1a      	cmp	r3, #26
 800991e:	b084      	sub	sp, #16
 8009920:	4604      	mov	r4, r0
 8009922:	d856      	bhi.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009924:	2101      	movs	r1, #1
 8009926:	4aa6      	ldr	r2, [pc, #664]	; (8009bc0 <TREEVIEW_OwnerDraw+0x2ac>)
 8009928:	fa01 f303 	lsl.w	r3, r1, r3
 800992c:	401a      	ands	r2, r3
 800992e:	2a00      	cmp	r2, #0
 8009930:	d153      	bne.n	80099da <TREEVIEW_OwnerDraw+0xc6>
 8009932:	0159      	lsls	r1, r3, #5
 8009934:	f100 8088 	bmi.w	8009a48 <TREEVIEW_OwnerDraw+0x134>
 8009938:	f013 7000 	ands.w	r0, r3, #33554432	; 0x2000000
 800993c:	d04a      	beq.n	80099d4 <TREEVIEW_OwnerDraw+0xc0>
 800993e:	6a23      	ldr	r3, [r4, #32]
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f00f fc15 	bl	8019170 <GUI_ALLOC_LockH>
 8009946:	aa04      	add	r2, sp, #16
 8009948:	8a84      	ldrh	r4, [r0, #20]
 800994a:	f842 0d08 	str.w	r0, [r2, #-8]!
 800994e:	4610      	mov	r0, r2
 8009950:	f00f fc20 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009954:	4620      	mov	r0, r4
 8009956:	e03d      	b.n	80099d4 <TREEVIEW_OwnerDraw+0xc0>
 8009958:	07ab      	lsls	r3, r5, #30
 800995a:	bf4c      	ite	mi
 800995c:	68b8      	ldrmi	r0, [r7, #8]
 800995e:	6838      	ldrpl	r0, [r7, #0]
 8009960:	f00e fb22 	bl	8017fa8 <GUI_SetColor>
 8009964:	6963      	ldr	r3, [r4, #20]
 8009966:	f8ad 300a 	strh.w	r3, [sp, #10]
 800996a:	8a79      	ldrh	r1, [r7, #18]
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	69a3      	ldr	r3, [r4, #24]
 8009970:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009974:	a802      	add	r0, sp, #8
 8009976:	1e4a      	subs	r2, r1, #1
 8009978:	f8ad 200e 	strh.w	r2, [sp, #14]
 800997c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009980:	f00d fa90 	bl	8016ea4 <GUI_FillRectEx>
 8009984:	8a3a      	ldrh	r2, [r7, #16]
 8009986:	8a79      	ldrh	r1, [r7, #18]
 8009988:	8afb      	ldrh	r3, [r7, #22]
 800998a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800998e:	3a01      	subs	r2, #1
 8009990:	a802      	add	r0, sp, #8
 8009992:	f8ad 100a 	strh.w	r1, [sp, #10]
 8009996:	f8ad 200c 	strh.w	r2, [sp, #12]
 800999a:	f00d fa83 	bl	8016ea4 <GUI_FillRectEx>
 800999e:	8aba      	ldrh	r2, [r7, #20]
 80099a0:	69a3      	ldr	r3, [r4, #24]
 80099a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80099a6:	a802      	add	r0, sp, #8
 80099a8:	1c53      	adds	r3, r2, #1
 80099aa:	f8ad 3008 	strh.w	r3, [sp, #8]
 80099ae:	f00d fa79 	bl	8016ea4 <GUI_FillRectEx>
 80099b2:	8af9      	ldrh	r1, [r7, #22]
 80099b4:	6920      	ldr	r0, [r4, #16]
 80099b6:	69a2      	ldr	r2, [r4, #24]
 80099b8:	69e3      	ldr	r3, [r4, #28]
 80099ba:	f8ad 0008 	strh.w	r0, [sp, #8]
 80099be:	3101      	adds	r1, #1
 80099c0:	a802      	add	r0, sp, #8
 80099c2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80099c6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80099ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80099ce:	f00d fa69 	bl	8016ea4 <GUI_FillRectEx>
 80099d2:	2000      	movs	r0, #0
 80099d4:	b004      	add	sp, #16
 80099d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6a27      	ldr	r7, [r4, #32]
 80099de:	f00f fbc7 	bl	8019170 <GUI_ALLOC_LockH>
 80099e2:	4603      	mov	r3, r0
 80099e4:	a804      	add	r0, sp, #16
 80099e6:	f8b3 509c 	ldrh.w	r5, [r3, #156]	; 0x9c
 80099ea:	f840 3d0c 	str.w	r3, [r0, #-12]!
 80099ee:	f8b3 80c0 	ldrh.w	r8, [r3, #192]	; 0xc0
 80099f2:	f8b3 60c2 	ldrh.w	r6, [r3, #194]	; 0xc2
 80099f6:	f00f fbcd 	bl	8019194 <GUI_ALLOC_UnlockH>
 80099fa:	6863      	ldr	r3, [r4, #4]
 80099fc:	3b05      	subs	r3, #5
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d8e7      	bhi.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <TREEVIEW_OwnerDraw+0xf4>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009959 	.word	0x08009959
 8009a0c:	08009aeb 	.word	0x08009aeb
 8009a10:	080099d3 	.word	0x080099d3
 8009a14:	080099d3 	.word	0x080099d3
 8009a18:	080099d3 	.word	0x080099d3
 8009a1c:	080099d3 	.word	0x080099d3
 8009a20:	080099d3 	.word	0x080099d3
 8009a24:	080099d3 	.word	0x080099d3
 8009a28:	080099d3 	.word	0x080099d3
 8009a2c:	080099d3 	.word	0x080099d3
 8009a30:	080099d3 	.word	0x080099d3
 8009a34:	080099d3 	.word	0x080099d3
 8009a38:	080099d3 	.word	0x080099d3
 8009a3c:	08009ad1 	.word	0x08009ad1
 8009a40:	080099d3 	.word	0x080099d3
 8009a44:	08009a75 	.word	0x08009a75
 8009a48:	6800      	ldr	r0, [r0, #0]
 8009a4a:	f00f fb91 	bl	8019170 <GUI_ALLOC_LockH>
 8009a4e:	6a23      	ldr	r3, [r4, #32]
 8009a50:	9000      	str	r0, [sp, #0]
 8009a52:	6818      	ldr	r0, [r3, #0]
 8009a54:	f00f fb8c 	bl	8019170 <GUI_ALLOC_LockH>
 8009a58:	4604      	mov	r4, r0
 8009a5a:	9001      	str	r0, [sp, #4]
 8009a5c:	8ac0      	ldrh	r0, [r0, #22]
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d071      	beq.n	8009b46 <TREEVIEW_OwnerDraw+0x232>
 8009a62:	4604      	mov	r4, r0
 8009a64:	a801      	add	r0, sp, #4
 8009a66:	f00f fb95 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009a6a:	4668      	mov	r0, sp
 8009a6c:	f00f fb92 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009a70:	4620      	mov	r0, r4
 8009a72:	e7af      	b.n	80099d4 <TREEVIEW_OwnerDraw+0xc0>
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f00e fa97 	bl	8017fa8 <GUI_SetColor>
 8009a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a7e:	b19b      	cbz	r3, 8009aa8 <TREEVIEW_OwnerDraw+0x194>
 8009a80:	463d      	mov	r5, r7
 8009a82:	2600      	movs	r6, #0
 8009a84:	f9b5 0026 	ldrsh.w	r0, [r5, #38]	; 0x26
 8009a88:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 8009a8c:	4290      	cmp	r0, r2
 8009a8e:	4601      	mov	r1, r0
 8009a90:	d077      	beq.n	8009b82 <TREEVIEW_OwnerDraw+0x26e>
 8009a92:	f9b5 002c 	ldrsh.w	r0, [r5, #44]	; 0x2c
 8009a96:	f00d f957 	bl	8016d48 <GUI_DrawHLine>
 8009a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a9e:	3601      	adds	r6, #1
 8009aa0:	429e      	cmp	r6, r3
 8009aa2:	f105 0502 	add.w	r5, r5, #2
 8009aa6:	dbed      	blt.n	8009a84 <TREEVIEW_OwnerDraw+0x170>
 8009aa8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d090      	beq.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	2500      	movs	r5, #0
 8009ab4:	f9b6 0040 	ldrsh.w	r0, [r6, #64]	; 0x40
 8009ab8:	6961      	ldr	r1, [r4, #20]
 8009aba:	69e2      	ldr	r2, [r4, #28]
 8009abc:	f00d f99a 	bl	8016df4 <GUI_DrawVLine>
 8009ac0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	429d      	cmp	r5, r3
 8009ac8:	f106 0602 	add.w	r6, r6, #2
 8009acc:	dbf2      	blt.n	8009ab4 <TREEVIEW_OwnerDraw+0x1a0>
 8009ace:	e780      	b.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f00e fa69 	bl	8017fa8 <GUI_SetColor>
 8009ad6:	68b8      	ldr	r0, [r7, #8]
 8009ad8:	f00e fa5a 	bl	8017f90 <GUI_SetBkColor>
 8009adc:	6a38      	ldr	r0, [r7, #32]
 8009ade:	f107 0110 	add.w	r1, r7, #16
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f00d fbf6 	bl	80172d4 <GUI_DispStringInRect>
 8009ae8:	e773      	b.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	f63f af70 	bhi.w	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009af2:	e8df f003 	tbb	[pc, r3]
 8009af6:	1919      	.short	0x1919
 8009af8:	0319      	.short	0x0319
 8009afa:	03          	.byte	0x03
 8009afb:	00          	.byte	0x00
 8009afc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009afe:	6963      	ldr	r3, [r4, #20]
 8009b00:	69e5      	ldr	r5, [r4, #28]
 8009b02:	8842      	ldrh	r2, [r0, #2]
 8009b04:	f9b7 4068 	ldrsh.w	r4, [r7, #104]	; 0x68
 8009b08:	8801      	ldrh	r1, [r0, #0]
 8009b0a:	1aed      	subs	r5, r5, r3
 8009b0c:	1aaa      	subs	r2, r5, r2
 8009b0e:	fa04 f888 	sxtah	r8, r4, r8
 8009b12:	fa03 f386 	sxtah	r3, r3, r6
 8009b16:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009b1a:	eba8 0151 	sub.w	r1, r8, r1, lsr #1
 8009b1e:	eb03 0262 	add.w	r2, r3, r2, asr #1
 8009b22:	f00d f9ef 	bl	8016f04 <GUI_DrawBitmap>
 8009b26:	e754      	b.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009b28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009b2a:	6963      	ldr	r3, [r4, #20]
 8009b2c:	69e4      	ldr	r4, [r4, #28]
 8009b2e:	8842      	ldrh	r2, [r0, #2]
 8009b30:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 8009b34:	1ae4      	subs	r4, r4, r3
 8009b36:	1aa2      	subs	r2, r4, r2
 8009b38:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009b3c:	eb03 0262 	add.w	r2, r3, r2, asr #1
 8009b40:	f00d f9e0 	bl	8016f04 <GUI_DrawBitmap>
 8009b44:	e745      	b.n	80099d2 <TREEVIEW_OwnerDraw+0xbe>
 8009b46:	9d00      	ldr	r5, [sp, #0]
 8009b48:	6920      	ldr	r0, [r4, #16]
 8009b4a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009b4c:	7e1e      	ldrb	r6, [r3, #24]
 8009b4e:	bb20      	cbnz	r0, 8009b9a <TREEVIEW_OwnerDraw+0x286>
 8009b50:	f105 077c 	add.w	r7, r5, #124	; 0x7c
 8009b54:	4629      	mov	r1, r5
 8009b56:	8b23      	ldrh	r3, [r4, #24]
 8009b58:	07da      	lsls	r2, r3, #31
 8009b5a:	d519      	bpl.n	8009b90 <TREEVIEW_OwnerDraw+0x27c>
 8009b5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009b60:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8009b64:	b322      	cbz	r2, 8009bb0 <TREEVIEW_OwnerDraw+0x29c>
 8009b66:	8854      	ldrh	r4, [r2, #2]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 8009b6e:	429e      	cmp	r6, r3
 8009b70:	bfb8      	it	lt
 8009b72:	461e      	movlt	r6, r3
 8009b74:	4296      	cmp	r6, r2
 8009b76:	bfb8      	it	lt
 8009b78:	4616      	movlt	r6, r2
 8009b7a:	42a6      	cmp	r6, r4
 8009b7c:	bfa8      	it	ge
 8009b7e:	4634      	movge	r4, r6
 8009b80:	e770      	b.n	8009a64 <TREEVIEW_OwnerDraw+0x150>
 8009b82:	f9b5 102c 	ldrsh.w	r1, [r5, #44]	; 0x2c
 8009b86:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 8009b8a:	f00d f933 	bl	8016df4 <GUI_DrawVLine>
 8009b8e:	e784      	b.n	8009a9a <TREEVIEW_OwnerDraw+0x186>
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	b193      	cbz	r3, 8009bba <TREEVIEW_OwnerDraw+0x2a6>
 8009b94:	885a      	ldrh	r2, [r3, #2]
 8009b96:	2400      	movs	r4, #0
 8009b98:	e7e7      	b.n	8009b6a <TREEVIEW_OwnerDraw+0x256>
 8009b9a:	f00f fae9 	bl	8019170 <GUI_ALLOC_LockH>
 8009b9e:	ab04      	add	r3, sp, #16
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	f843 0d08 	str.w	r0, [r3, #-8]!
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f00f faf4 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009bac:	9900      	ldr	r1, [sp, #0]
 8009bae:	e7d2      	b.n	8009b56 <TREEVIEW_OwnerDraw+0x242>
 8009bb0:	331e      	adds	r3, #30
 8009bb2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8009bb6:	686a      	ldr	r2, [r5, #4]
 8009bb8:	e7d5      	b.n	8009b66 <TREEVIEW_OwnerDraw+0x252>
 8009bba:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8009bbe:	e7e9      	b.n	8009b94 <TREEVIEW_OwnerDraw+0x280>
 8009bc0:	000a0031 	.word	0x000a0031

08009bc4 <_CollapseItem>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	f00f fad2 	bl	8019170 <GUI_ALLOC_LockH>
 8009bcc:	8b03      	ldrh	r3, [r0, #24]
 8009bce:	9000      	str	r0, [sp, #0]
 8009bd0:	f003 0203 	and.w	r2, r3, #3
 8009bd4:	2a03      	cmp	r2, #3
 8009bd6:	6804      	ldr	r4, [r0, #0]
 8009bd8:	d004      	beq.n	8009be4 <_CollapseItem+0x20>
 8009bda:	4668      	mov	r0, sp
 8009bdc:	f00f fada 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009be0:	b002      	add	sp, #8
 8009be2:	bd10      	pop	{r4, pc}
 8009be4:	f023 0302 	bic.w	r3, r3, #2
 8009be8:	8303      	strh	r3, [r0, #24]
 8009bea:	4668      	mov	r0, sp
 8009bec:	f00f fad2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	d0f5      	beq.n	8009be0 <_CollapseItem+0x1c>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f00f fabb 	bl	8019170 <GUI_ALLOC_LockH>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	a802      	add	r0, sp, #8
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009c04:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009c08:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8009c0c:	f00f fac2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009c10:	4620      	mov	r0, r4
 8009c12:	f007 ff37 	bl	8011a84 <WM_InvalidateWindow>
 8009c16:	e7e3      	b.n	8009be0 <_CollapseItem+0x1c>

08009c18 <_ExpandItem>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	f00f faa8 	bl	8019170 <GUI_ALLOC_LockH>
 8009c20:	8b03      	ldrh	r3, [r0, #24]
 8009c22:	9000      	str	r0, [sp, #0]
 8009c24:	f003 0203 	and.w	r2, r3, #3
 8009c28:	2a01      	cmp	r2, #1
 8009c2a:	6804      	ldr	r4, [r0, #0]
 8009c2c:	d004      	beq.n	8009c38 <_ExpandItem+0x20>
 8009c2e:	4668      	mov	r0, sp
 8009c30:	f00f fab0 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009c34:	b002      	add	sp, #8
 8009c36:	bd10      	pop	{r4, pc}
 8009c38:	f043 0302 	orr.w	r3, r3, #2
 8009c3c:	8303      	strh	r3, [r0, #24]
 8009c3e:	4668      	mov	r0, sp
 8009c40:	f00f faa8 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009c44:	2c00      	cmp	r4, #0
 8009c46:	d0f5      	beq.n	8009c34 <_ExpandItem+0x1c>
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f00f fa91 	bl	8019170 <GUI_ALLOC_LockH>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	a802      	add	r0, sp, #8
 8009c52:	2200      	movs	r2, #0
 8009c54:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009c58:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009c5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8009c60:	f00f fa98 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009c64:	4620      	mov	r0, r4
 8009c66:	f007 ff0d 	bl	8011a84 <WM_InvalidateWindow>
 8009c6a:	e7e3      	b.n	8009c34 <_ExpandItem+0x1c>

08009c6c <_CalcParams>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	b09f      	sub	sp, #124	; 0x7c
 8009c72:	4681      	mov	r9, r0
 8009c74:	2100      	movs	r1, #0
 8009c76:	2240      	movs	r2, #64	; 0x40
 8009c78:	a80e      	add	r0, sp, #56	; 0x38
 8009c7a:	f014 f9e4 	bl	801e046 <memset>
 8009c7e:	4648      	mov	r0, r9
 8009c80:	f00f fa76 	bl	8019170 <GUI_ALLOC_LockH>
 8009c84:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
 8009c88:	9001      	str	r0, [sp, #4]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8009c90:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8009c94:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8009c98:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8009c9c:	f10d 0a04 	add.w	sl, sp, #4
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	f000 8087 	beq.w	8009db4 <_CalcParams+0x148>
 8009ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8009caa:	f10d 0a04 	add.w	sl, sp, #4
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f00f fa5e 	bl	8019170 <GUI_ALLOC_LockH>
 8009cb4:	8b06      	ldrh	r6, [r0, #24]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	7f05      	ldrb	r5, [r0, #28]
 8009cba:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8009cbe:	8a82      	ldrh	r2, [r0, #20]
 8009cc0:	9002      	str	r0, [sp, #8]
 8009cc2:	f026 0604 	bic.w	r6, r6, #4
 8009cc6:	8306      	strh	r6, [r0, #24]
 8009cc8:	f04f 0e00 	mov.w	lr, #0
 8009ccc:	ae1e      	add	r6, sp, #120	; 0x78
 8009cce:	f8a0 e01a 	strh.w	lr, [r0, #26]
 8009cd2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8009cd6:	4291      	cmp	r1, r2
 8009cd8:	f840 7c40 	str.w	r7, [r0, #-64]
 8009cdc:	bfb8      	it	lt
 8009cde:	f8c3 20b8 	strlt.w	r2, [r3, #184]	; 0xb8
 8009ce2:	a802      	add	r0, sp, #8
 8009ce4:	f00f fa56 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	f2c0 8082 	blt.w	8009df2 <_CalcParams+0x186>
 8009cee:	4650      	mov	r0, sl
 8009cf0:	f00f fa50 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009cf4:	9703      	str	r7, [sp, #12]
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d078      	beq.n	8009dee <_CalcParams+0x182>
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	261b      	movs	r6, #27
 8009d00:	9606      	str	r6, [sp, #24]
 8009d02:	f8cd 9014 	str.w	r9, [sp, #20]
 8009d06:	930d      	str	r3, [sp, #52]	; 0x34
 8009d08:	a805      	add	r0, sp, #20
 8009d0a:	47c0      	blx	r8
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4648      	mov	r0, r9
 8009d10:	f00f fa2e 	bl	8019170 <GUI_ALLOC_LockH>
 8009d14:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8009d18:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8009d1c:	9001      	str	r0, [sp, #4]
 8009d1e:	4414      	add	r4, r2
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8009d26:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	f00f fa20 	bl	8019170 <GUI_ALLOC_LockH>
 8009d30:	8b03      	ldrh	r3, [r0, #24]
 8009d32:	9005      	str	r0, [sp, #20]
 8009d34:	07da      	lsls	r2, r3, #31
 8009d36:	d552      	bpl.n	8009dde <_CalcParams+0x172>
 8009d38:	079b      	lsls	r3, r3, #30
 8009d3a:	d450      	bmi.n	8009dde <_CalcParams+0x172>
 8009d3c:	7f04      	ldrb	r4, [r0, #28]
 8009d3e:	6846      	ldr	r6, [r0, #4]
 8009d40:	a805      	add	r0, sp, #20
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	d13c      	bne.n	8009dc0 <_CalcParams+0x154>
 8009d46:	f00f fa25 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f00f fa10 	bl	8019170 <GUI_ALLOC_LockH>
 8009d50:	1c6c      	adds	r4, r5, #1
 8009d52:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8009d56:	9004      	str	r0, [sp, #16]
 8009d58:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 8009d5c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8009d60:	f00f fa06 	bl	8019170 <GUI_ALLOC_LockH>
 8009d64:	4603      	mov	r3, r0
 8009d66:	3d01      	subs	r5, #1
 8009d68:	a805      	add	r0, sp, #20
 8009d6a:	9305      	str	r3, [sp, #20]
 8009d6c:	b11b      	cbz	r3, 8009d76 <_CalcParams+0x10a>
 8009d6e:	8b1a      	ldrh	r2, [r3, #24]
 8009d70:	f042 0204 	orr.w	r2, r2, #4
 8009d74:	831a      	strh	r2, [r3, #24]
 8009d76:	f00f fa0d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009d7a:	2d00      	cmp	r5, #0
 8009d7c:	dcee      	bgt.n	8009d5c <_CalcParams+0xf0>
 8009d7e:	9b04      	ldr	r3, [sp, #16]
 8009d80:	7f1d      	ldrb	r5, [r3, #28]
 8009d82:	689c      	ldr	r4, [r3, #8]
 8009d84:	2601      	movs	r6, #1
 8009d86:	1e6b      	subs	r3, r5, #1
 8009d88:	409e      	lsls	r6, r3
 8009d8a:	b2b6      	uxth	r6, r6
 8009d8c:	b92c      	cbnz	r4, 8009d9a <_CalcParams+0x12e>
 8009d8e:	e00e      	b.n	8009dae <_CalcParams+0x142>
 8009d90:	8b42      	ldrh	r2, [r0, #26]
 8009d92:	6884      	ldr	r4, [r0, #8]
 8009d94:	4332      	orrs	r2, r6
 8009d96:	8342      	strh	r2, [r0, #26]
 8009d98:	b14c      	cbz	r4, 8009dae <_CalcParams+0x142>
 8009d9a:	a804      	add	r0, sp, #16
 8009d9c:	f00f f9fa 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009da0:	4620      	mov	r0, r4
 8009da2:	f00f f9e5 	bl	8019170 <GUI_ALLOC_LockH>
 8009da6:	9004      	str	r0, [sp, #16]
 8009da8:	7f02      	ldrb	r2, [r0, #28]
 8009daa:	4295      	cmp	r5, r2
 8009dac:	dbf0      	blt.n	8009d90 <_CalcParams+0x124>
 8009dae:	a804      	add	r0, sp, #16
 8009db0:	f00f f9f0 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009db4:	4650      	mov	r0, sl
 8009db6:	f00f f9ed 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009dba:	b01f      	add	sp, #124	; 0x7c
 8009dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc0:	f00f f9e8 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f00f f9d3 	bl	8019170 <GUI_ALLOC_LockH>
 8009dca:	9005      	str	r0, [sp, #20]
 8009dcc:	7f03      	ldrb	r3, [r0, #28]
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	dbb5      	blt.n	8009d3e <_CalcParams+0xd2>
 8009dd2:	a805      	add	r0, sp, #20
 8009dd4:	4637      	mov	r7, r6
 8009dd6:	f00f f9dd 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009dda:	462c      	mov	r4, r5
 8009ddc:	e767      	b.n	8009cae <_CalcParams+0x42>
 8009dde:	6844      	ldr	r4, [r0, #4]
 8009de0:	a805      	add	r0, sp, #20
 8009de2:	f00f f9d7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009de6:	2c00      	cmp	r4, #0
 8009de8:	d0af      	beq.n	8009d4a <_CalcParams+0xde>
 8009dea:	4627      	mov	r7, r4
 8009dec:	e7f5      	b.n	8009dda <_CalcParams+0x16e>
 8009dee:	4644      	mov	r4, r8
 8009df0:	e78d      	b.n	8009d0e <_CalcParams+0xa2>
 8009df2:	4638      	mov	r0, r7
 8009df4:	f00f f9bc 	bl	8019170 <GUI_ALLOC_LockH>
 8009df8:	1c66      	adds	r6, r4, #1
 8009dfa:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8009dfe:	9004      	str	r0, [sp, #16]
 8009e00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e04:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8009e08:	f00f f9b2 	bl	8019170 <GUI_ALLOC_LockH>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	3c01      	subs	r4, #1
 8009e10:	a805      	add	r0, sp, #20
 8009e12:	9305      	str	r3, [sp, #20]
 8009e14:	b11b      	cbz	r3, 8009e1e <_CalcParams+0x1b2>
 8009e16:	8b1a      	ldrh	r2, [r3, #24]
 8009e18:	f042 0204 	orr.w	r2, r2, #4
 8009e1c:	831a      	strh	r2, [r3, #24]
 8009e1e:	f00f f9b9 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009e22:	42a5      	cmp	r5, r4
 8009e24:	dbee      	blt.n	8009e04 <_CalcParams+0x198>
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	7f1c      	ldrb	r4, [r3, #28]
 8009e2a:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009e2e:	1e66      	subs	r6, r4, #1
 8009e30:	2201      	movs	r2, #1
 8009e32:	fa02 f606 	lsl.w	r6, r2, r6
 8009e36:	b2b6      	uxth	r6, r6
 8009e38:	f1bb 0f00 	cmp.w	fp, #0
 8009e3c:	d108      	bne.n	8009e50 <_CalcParams+0x1e4>
 8009e3e:	e011      	b.n	8009e64 <_CalcParams+0x1f8>
 8009e40:	8b41      	ldrh	r1, [r0, #26]
 8009e42:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009e46:	4331      	orrs	r1, r6
 8009e48:	8341      	strh	r1, [r0, #26]
 8009e4a:	f1bb 0f00 	cmp.w	fp, #0
 8009e4e:	d009      	beq.n	8009e64 <_CalcParams+0x1f8>
 8009e50:	a804      	add	r0, sp, #16
 8009e52:	f00f f99f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009e56:	4658      	mov	r0, fp
 8009e58:	f00f f98a 	bl	8019170 <GUI_ALLOC_LockH>
 8009e5c:	9004      	str	r0, [sp, #16]
 8009e5e:	7f02      	ldrb	r2, [r0, #28]
 8009e60:	4294      	cmp	r4, r2
 8009e62:	dbed      	blt.n	8009e40 <_CalcParams+0x1d4>
 8009e64:	a804      	add	r0, sp, #16
 8009e66:	f00f f995 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009e6a:	e740      	b.n	8009cee <_CalcParams+0x82>

08009e6c <_ManageAutoScroll>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	4d8a      	ldr	r5, [pc, #552]	; (800a09c <_ManageAutoScroll+0x230>)
 8009e72:	682e      	ldr	r6, [r5, #0]
 8009e74:	b095      	sub	sp, #84	; 0x54
 8009e76:	4604      	mov	r4, r0
 8009e78:	b126      	cbz	r6, 8009e84 <_ManageAutoScroll+0x18>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	b015      	add	sp, #84	; 0x54
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	2301      	movs	r3, #1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f00f f972 	bl	8019170 <GUI_ALLOC_LockH>
 8009e8c:	a906      	add	r1, sp, #24
 8009e8e:	9003      	str	r0, [sp, #12]
 8009e90:	4620      	mov	r0, r4
 8009e92:	f005 fc3f 	bl	800f714 <WM_GetInsideRectExScrollbar>
 8009e96:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8009e9a:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8009e9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ea2:	1aff      	subs	r7, r7, r3
 8009ea4:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8009ea8:	3701      	adds	r7, #1
 8009eaa:	42bb      	cmp	r3, r7
 8009eac:	bfd4      	ite	le
 8009eae:	2300      	movle	r3, #0
 8009eb0:	2301      	movgt	r3, #1
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d175      	bne.n	8009fa4 <_ManageAutoScroll+0x138>
 8009eb8:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8009ebc:	464b      	mov	r3, r9
 8009ebe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009ec2:	071a      	lsls	r2, r3, #28
 8009ec4:	d446      	bmi.n	8009f54 <_ManageAutoScroll+0xe8>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f005 fda4 	bl	800fa14 <WM_GetScrollbarV>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f040 80d1 	bne.w	800a074 <_ManageAutoScroll+0x208>
 8009ed2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8009ed6:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 8009eda:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8009ede:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8009ee2:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8009ee6:	1a82      	subs	r2, r0, r2
 8009ee8:	3201      	adds	r2, #1
 8009eea:	4291      	cmp	r1, r2
 8009eec:	bfd4      	ite	le
 8009eee:	2600      	movle	r6, #0
 8009ef0:	2601      	movgt	r6, #1
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d04c      	beq.n	8009f90 <_ManageAutoScroll+0x124>
 8009ef6:	6459      	str	r1, [r3, #68]	; 0x44
 8009ef8:	64da      	str	r2, [r3, #76]	; 0x4c
 8009efa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009efe:	075b      	lsls	r3, r3, #29
 8009f00:	d53a      	bpl.n	8009f78 <_ManageAutoScroll+0x10c>
 8009f02:	4640      	mov	r0, r8
 8009f04:	f00f f946 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f004 fdda 	bl	800eac4 <WM_SetScrollbarH>
 8009f10:	4620      	mov	r0, r4
 8009f12:	f00f f92d 	bl	8019170 <GUI_ALLOC_LockH>
 8009f16:	9003      	str	r0, [sp, #12]
 8009f18:	9b00      	ldr	r3, [sp, #0]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <_ManageAutoScroll+0xb4>
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	d039      	beq.n	8009f94 <_ManageAutoScroll+0x128>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f28:	af08      	add	r7, sp, #32
 8009f2a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8009f2e:	3344      	adds	r3, #68	; 0x44
 8009f30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f34:	ae0b      	add	r6, sp, #44	; 0x2c
 8009f36:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f00f f92a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009f40:	4620      	mov	r0, r4
 8009f42:	4639      	mov	r1, r7
 8009f44:	4632      	mov	r2, r6
 8009f46:	f7ff fbd1 	bl	80096ec <WIDGET__SetScrollState>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	b015      	add	sp, #84	; 0x54
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	f10d 080c 	add.w	r8, sp, #12
 8009f58:	4640      	mov	r0, r8
 8009f5a:	f00f f91b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009f5e:	9900      	ldr	r1, [sp, #0]
 8009f60:	4620      	mov	r0, r4
 8009f62:	f004 fddf 	bl	800eb24 <WM_SetScrollbarV>
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff fe80 	bl	8009c6c <_CalcParams>
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f00f f8ff 	bl	8019170 <GUI_ALLOC_LockH>
 8009f72:	9003      	str	r0, [sp, #12]
 8009f74:	4603      	mov	r3, r0
 8009f76:	e7b0      	b.n	8009eda <_ManageAutoScroll+0x6e>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f005 fd03 	bl	800f984 <WM_GetScrollbarH>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0ca      	beq.n	8009f18 <_ManageAutoScroll+0xac>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	d1cc      	bne.n	8009f22 <_ManageAutoScroll+0xb6>
 8009f88:	2201      	movs	r2, #1
 8009f8a:	645a      	str	r2, [r3, #68]	; 0x44
 8009f8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8009f8e:	e7c8      	b.n	8009f22 <_ManageAutoScroll+0xb6>
 8009f90:	649e      	str	r6, [r3, #72]	; 0x48
 8009f92:	e7b2      	b.n	8009efa <_ManageAutoScroll+0x8e>
 8009f94:	4640      	mov	r0, r8
 8009f96:	f00f f8fd 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	b015      	add	sp, #84	; 0x54
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa4:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 8009fa8:	3301      	adds	r3, #1
 8009faa:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f00f f8de 	bl	8019170 <GUI_ALLOC_LockH>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	a814      	add	r0, sp, #80	; 0x50
 8009fb8:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
 8009fbc:	f840 3d40 	str.w	r3, [r0, #-64]!
 8009fc0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8009fc4:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8009fc8:	f00f f8e4 	bl	8019194 <GUI_ALLOC_UnlockH>
 8009fcc:	f1b8 0f01 	cmp.w	r8, #1
 8009fd0:	dd60      	ble.n	800a094 <_ManageAutoScroll+0x228>
 8009fd2:	a908      	add	r1, sp, #32
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f005 fb9d 	bl	800f714 <WM_GetInsideRectExScrollbar>
 8009fda:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 8009fde:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8009fe2:	1a8a      	subs	r2, r1, r2
 8009fe4:	9201      	str	r2, [sp, #4]
 8009fe6:	2f00      	cmp	r7, #0
 8009fe8:	d054      	beq.n	800a094 <_ManageAutoScroll+0x228>
 8009fea:	46b0      	mov	r8, r6
 8009fec:	f108 0801 	add.w	r8, r8, #1
 8009ff0:	9705      	str	r7, [sp, #20]
 8009ff2:	f1ba 0f00 	cmp.w	sl, #0
 8009ff6:	d03b      	beq.n	800a070 <_ManageAutoScroll+0x204>
 8009ff8:	231b      	movs	r3, #27
 8009ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffc:	ab05      	add	r3, sp, #20
 8009ffe:	940b      	str	r4, [sp, #44]	; 0x2c
 800a000:	9313      	str	r3, [sp, #76]	; 0x4c
 800a002:	a80b      	add	r0, sp, #44	; 0x2c
 800a004:	47d0      	blx	sl
 800a006:	4602      	mov	r2, r0
 800a008:	4638      	mov	r0, r7
 800a00a:	4416      	add	r6, r2
 800a00c:	f00f f8b0 	bl	8019170 <GUI_ALLOC_LockH>
 800a010:	8b03      	ldrh	r3, [r0, #24]
 800a012:	900b      	str	r0, [sp, #44]	; 0x2c
 800a014:	07df      	lsls	r7, r3, #31
 800a016:	d51c      	bpl.n	800a052 <_ManageAutoScroll+0x1e6>
 800a018:	0799      	lsls	r1, r3, #30
 800a01a:	d41a      	bmi.n	800a052 <_ManageAutoScroll+0x1e6>
 800a01c:	f890 b01c 	ldrb.w	fp, [r0, #28]
 800a020:	6847      	ldr	r7, [r0, #4]
 800a022:	a80b      	add	r0, sp, #44	; 0x2c
 800a024:	b92f      	cbnz	r7, 800a032 <_ManageAutoScroll+0x1c6>
 800a026:	f00f f8b5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a02a:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	e745      	b.n	8009ebe <_ManageAutoScroll+0x52>
 800a032:	f00f f8af 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a036:	4638      	mov	r0, r7
 800a038:	f00f f89a 	bl	8019170 <GUI_ALLOC_LockH>
 800a03c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a03e:	7f02      	ldrb	r2, [r0, #28]
 800a040:	4593      	cmp	fp, r2
 800a042:	dbed      	blt.n	800a020 <_ManageAutoScroll+0x1b4>
 800a044:	a80b      	add	r0, sp, #44	; 0x2c
 800a046:	f00f f8a5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a04a:	9b01      	ldr	r3, [sp, #4]
 800a04c:	42b3      	cmp	r3, r6
 800a04e:	dacd      	bge.n	8009fec <_ManageAutoScroll+0x180>
 800a050:	e7eb      	b.n	800a02a <_ManageAutoScroll+0x1be>
 800a052:	6847      	ldr	r7, [r0, #4]
 800a054:	a80b      	add	r0, sp, #44	; 0x2c
 800a056:	f00f f89d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	42b3      	cmp	r3, r6
 800a05e:	dbe4      	blt.n	800a02a <_ManageAutoScroll+0x1be>
 800a060:	2f00      	cmp	r7, #0
 800a062:	d0e2      	beq.n	800a02a <_ManageAutoScroll+0x1be>
 800a064:	f108 0801 	add.w	r8, r8, #1
 800a068:	9705      	str	r7, [sp, #20]
 800a06a:	f1ba 0f00 	cmp.w	sl, #0
 800a06e:	d1c3      	bne.n	8009ff8 <_ManageAutoScroll+0x18c>
 800a070:	4652      	mov	r2, sl
 800a072:	e7c9      	b.n	800a008 <_ManageAutoScroll+0x19c>
 800a074:	9b00      	ldr	r3, [sp, #0]
 800a076:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800a07a:	b933      	cbnz	r3, 800a08a <_ManageAutoScroll+0x21e>
 800a07c:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 800a080:	2201      	movs	r2, #1
 800a082:	9200      	str	r2, [sp, #0]
 800a084:	639a      	str	r2, [r3, #56]	; 0x38
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
 800a088:	e727      	b.n	8009eda <_ManageAutoScroll+0x6e>
 800a08a:	2301      	movs	r3, #1
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 800a092:	e722      	b.n	8009eda <_ManageAutoScroll+0x6e>
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	e7c7      	b.n	800a02a <_ManageAutoScroll+0x1be>
 800a09a:	bf00      	nop
 800a09c:	2002ae94 	.word	0x2002ae94

0800a0a0 <_GetVisibility>:
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	b091      	sub	sp, #68	; 0x44
 800a0a6:	4681      	mov	r9, r0
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	9201      	str	r2, [sp, #4]
 800a0ae:	f005 fb31 	bl	800f714 <WM_GetInsideRectExScrollbar>
 800a0b2:	4648      	mov	r0, r9
 800a0b4:	f8bd a012 	ldrh.w	sl, [sp, #18]
 800a0b8:	f00f f85a 	bl	8019170 <GUI_ALLOC_LockH>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	a810      	add	r0, sp, #64	; 0x40
 800a0c0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800a0c2:	f840 2d38 	str.w	r2, [r0, #-56]!
 800a0c6:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 800a0ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0cc:	9200      	str	r2, [sp, #0]
 800a0ce:	1e65      	subs	r5, r4, #1
 800a0d0:	f00f f860 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d035      	beq.n	800a144 <_GetVisibility+0xa4>
 800a0d8:	b197      	cbz	r7, 800a100 <_GetVisibility+0x60>
 800a0da:	42b7      	cmp	r7, r6
 800a0dc:	d02d      	beq.n	800a13a <_GetVisibility+0x9a>
 800a0de:	ac07      	add	r4, sp, #28
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f00f f845 	bl	8019170 <GUI_ALLOC_LockH>
 800a0e6:	8b03      	ldrh	r3, [r0, #24]
 800a0e8:	9007      	str	r0, [sp, #28]
 800a0ea:	07df      	lsls	r7, r3, #31
 800a0ec:	d51a      	bpl.n	800a124 <_GetVisibility+0x84>
 800a0ee:	0799      	lsls	r1, r3, #30
 800a0f0:	d418      	bmi.n	800a124 <_GetVisibility+0x84>
 800a0f2:	f890 801c 	ldrb.w	r8, [r0, #28]
 800a0f6:	6847      	ldr	r7, [r0, #4]
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	b92f      	cbnz	r7, 800a108 <_GetVisibility+0x68>
 800a0fc:	f00f f84a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a100:	2002      	movs	r0, #2
 800a102:	b011      	add	sp, #68	; 0x44
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	f00f f844 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a10c:	4638      	mov	r0, r7
 800a10e:	f00f f82f 	bl	8019170 <GUI_ALLOC_LockH>
 800a112:	9007      	str	r0, [sp, #28]
 800a114:	7f02      	ldrb	r2, [r0, #28]
 800a116:	4590      	cmp	r8, r2
 800a118:	dbed      	blt.n	800a0f6 <_GetVisibility+0x56>
 800a11a:	4620      	mov	r0, r4
 800a11c:	f00f f83a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a120:	b93d      	cbnz	r5, 800a132 <_GetVisibility+0x92>
 800a122:	e011      	b.n	800a148 <_GetVisibility+0xa8>
 800a124:	6847      	ldr	r7, [r0, #4]
 800a126:	4620      	mov	r0, r4
 800a128:	f00f f834 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a12c:	b155      	cbz	r5, 800a144 <_GetVisibility+0xa4>
 800a12e:	2f00      	cmp	r7, #0
 800a130:	d0e6      	beq.n	800a100 <_GetVisibility+0x60>
 800a132:	42be      	cmp	r6, r7
 800a134:	f105 35ff 	add.w	r5, r5, #4294967295
 800a138:	d1d2      	bne.n	800a0e0 <_GetVisibility+0x40>
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	b011      	add	sp, #68	; 0x44
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	2f00      	cmp	r7, #0
 800a146:	d0db      	beq.n	800a100 <_GetVisibility+0x60>
 800a148:	fa0f f58a 	sxth.w	r5, sl
 800a14c:	f04f 0b1b 	mov.w	fp, #27
 800a150:	f10d 0a0c 	add.w	sl, sp, #12
 800a154:	9b00      	ldr	r3, [sp, #0]
 800a156:	9703      	str	r7, [sp, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d02e      	beq.n	800a1ba <_GetVisibility+0x11a>
 800a15c:	f8cd b020 	str.w	fp, [sp, #32]
 800a160:	f8cd 901c 	str.w	r9, [sp, #28]
 800a164:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800a168:	a807      	add	r0, sp, #28
 800a16a:	4798      	blx	r3
 800a16c:	42b7      	cmp	r7, r6
 800a16e:	4405      	add	r5, r0
 800a170:	d027      	beq.n	800a1c2 <_GetVisibility+0x122>
 800a172:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800a176:	4295      	cmp	r5, r2
 800a178:	dcc2      	bgt.n	800a100 <_GetVisibility+0x60>
 800a17a:	4638      	mov	r0, r7
 800a17c:	f00e fff8 	bl	8019170 <GUI_ALLOC_LockH>
 800a180:	8b03      	ldrh	r3, [r0, #24]
 800a182:	9007      	str	r0, [sp, #28]
 800a184:	07da      	lsls	r2, r3, #31
 800a186:	d533      	bpl.n	800a1f0 <_GetVisibility+0x150>
 800a188:	079b      	lsls	r3, r3, #30
 800a18a:	d431      	bmi.n	800a1f0 <_GetVisibility+0x150>
 800a18c:	f890 801c 	ldrb.w	r8, [r0, #28]
 800a190:	ac07      	add	r4, sp, #28
 800a192:	6847      	ldr	r7, [r0, #4]
 800a194:	4620      	mov	r0, r4
 800a196:	2f00      	cmp	r7, #0
 800a198:	d0b0      	beq.n	800a0fc <_GetVisibility+0x5c>
 800a19a:	f00e fffb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f00e ffe6 	bl	8019170 <GUI_ALLOC_LockH>
 800a1a4:	9007      	str	r0, [sp, #28]
 800a1a6:	7f02      	ldrb	r2, [r0, #28]
 800a1a8:	4590      	cmp	r8, r2
 800a1aa:	dbf2      	blt.n	800a192 <_GetVisibility+0xf2>
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f00e fff1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	9703      	str	r7, [sp, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1d0      	bne.n	800a15c <_GetVisibility+0xbc>
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	42b7      	cmp	r7, r6
 800a1be:	4405      	add	r5, r0
 800a1c0:	d1d7      	bne.n	800a172 <_GetVisibility+0xd2>
 800a1c2:	9c01      	ldr	r4, [sp, #4]
 800a1c4:	b154      	cbz	r4, 800a1dc <_GetVisibility+0x13c>
 800a1c6:	b2ab      	uxth	r3, r5
 800a1c8:	1a18      	subs	r0, r3, r0
 800a1ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a1ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800a1d2:	8060      	strh	r0, [r4, #2]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	80e3      	strh	r3, [r4, #6]
 800a1d8:	8021      	strh	r1, [r4, #0]
 800a1da:	80a2      	strh	r2, [r4, #4]
 800a1dc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	4285      	cmp	r5, r0
 800a1e4:	bfd4      	ite	le
 800a1e6:	2000      	movle	r0, #0
 800a1e8:	2001      	movgt	r0, #1
 800a1ea:	b011      	add	sp, #68	; 0x44
 800a1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f0:	6847      	ldr	r7, [r0, #4]
 800a1f2:	a807      	add	r0, sp, #28
 800a1f4:	f00e ffce 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a1f8:	2f00      	cmp	r7, #0
 800a1fa:	d1ab      	bne.n	800a154 <_GetVisibility+0xb4>
 800a1fc:	e780      	b.n	800a100 <_GetVisibility+0x60>
 800a1fe:	bf00      	nop

0800a200 <_UpdateScrollPos>:
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	4607      	mov	r7, r0
 800a208:	f00e ffb2 	bl	8019170 <GUI_ALLOC_LockH>
 800a20c:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 800a210:	9001      	str	r0, [sp, #4]
 800a212:	4630      	mov	r0, r6
 800a214:	f00e ffac 	bl	8019170 <GUI_ALLOC_LockH>
 800a218:	ad08      	add	r5, sp, #32
 800a21a:	4603      	mov	r3, r0
 800a21c:	f845 0d0c 	str.w	r0, [r5, #-12]!
 800a220:	f890 801c 	ldrb.w	r8, [r0, #28]
 800a224:	689c      	ldr	r4, [r3, #8]
 800a226:	4628      	mov	r0, r5
 800a228:	2c00      	cmp	r4, #0
 800a22a:	d13f      	bne.n	800a2ac <_UpdateScrollPos+0xac>
 800a22c:	f00e ffb2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a230:	e00d      	b.n	800a24e <_UpdateScrollPos+0x4e>
 800a232:	9901      	ldr	r1, [sp, #4]
 800a234:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 800a236:	db04      	blt.n	800a242 <_UpdateScrollPos+0x42>
 800a238:	2a01      	cmp	r2, #1
 800a23a:	d802      	bhi.n	800a242 <_UpdateScrollPos+0x42>
 800a23c:	3001      	adds	r0, #1
 800a23e:	63c8      	str	r0, [r1, #60]	; 0x3c
 800a240:	2401      	movs	r4, #1
 800a242:	f8d1 20b4 	ldr.w	r2, [r1, #180]	; 0xb4
 800a246:	4282      	cmp	r2, r0
 800a248:	dd41      	ble.n	800a2ce <_UpdateScrollPos+0xce>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d041      	beq.n	800a2d2 <_UpdateScrollPos+0xd2>
 800a24e:	4631      	mov	r1, r6
 800a250:	2200      	movs	r2, #0
 800a252:	4638      	mov	r0, r7
 800a254:	f7ff ff24 	bl	800a0a0 <_GetVisibility>
 800a258:	1c41      	adds	r1, r0, #1
 800a25a:	4603      	mov	r3, r0
 800a25c:	f100 32ff 	add.w	r2, r0, #4294967295
 800a260:	d1e7      	bne.n	800a232 <_UpdateScrollPos+0x32>
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a266:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a26a:	3901      	subs	r1, #1
 800a26c:	4291      	cmp	r1, r2
 800a26e:	63d9      	str	r1, [r3, #60]	; 0x3c
 800a270:	f04f 0401 	mov.w	r4, #1
 800a274:	dbeb      	blt.n	800a24e <_UpdateScrollPos+0x4e>
 800a276:	2a00      	cmp	r2, #0
 800a278:	dd01      	ble.n	800a27e <_UpdateScrollPos+0x7e>
 800a27a:	3a01      	subs	r2, #1
 800a27c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a27e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a282:	ca07      	ldmia	r2, {r0, r1, r2}
 800a284:	3344      	adds	r3, #68	; 0x44
 800a286:	ae02      	add	r6, sp, #8
 800a288:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a28c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a290:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a294:	a801      	add	r0, sp, #4
 800a296:	f00e ff7d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a29a:	4638      	mov	r0, r7
 800a29c:	4631      	mov	r1, r6
 800a29e:	462a      	mov	r2, r5
 800a2a0:	f7ff fa24 	bl	80096ec <WIDGET__SetScrollState>
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	b008      	add	sp, #32
 800a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ac:	f00e ff72 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f00e ff5d 	bl	8019170 <GUI_ALLOC_LockH>
 800a2b6:	9005      	str	r0, [sp, #20]
 800a2b8:	7f02      	ldrb	r2, [r0, #28]
 800a2ba:	4542      	cmp	r2, r8
 800a2bc:	da05      	bge.n	800a2ca <_UpdateScrollPos+0xca>
 800a2be:	8b04      	ldrh	r4, [r0, #24]
 800a2c0:	f004 0402 	and.w	r4, r4, #2
 800a2c4:	b2a4      	uxth	r4, r4
 800a2c6:	b134      	cbz	r4, 800a2d6 <_UpdateScrollPos+0xd6>
 800a2c8:	4690      	mov	r8, r2
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	e7aa      	b.n	800a224 <_UpdateScrollPos+0x24>
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e7d1      	b.n	800a276 <_UpdateScrollPos+0x76>
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	e7d3      	b.n	800a27e <_UpdateScrollPos+0x7e>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f00e ff5c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a2dc:	a801      	add	r0, sp, #4
 800a2de:	f00e ff59 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	b008      	add	sp, #32
 800a2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ea:	bf00      	nop

0800a2ec <_SetSel>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	f00e ff3c 	bl	8019170 <GUI_ALLOC_LockH>
 800a2f8:	ab04      	add	r3, sp, #16
 800a2fa:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 800a2fe:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800a302:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
 800a306:	4618      	mov	r0, r3
 800a308:	f00e ff44 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7ff ff77 	bl	800a200 <_UpdateScrollPos>
 800a312:	b998      	cbnz	r0, 800a33c <_SetSel+0x50>
 800a314:	4631      	mov	r1, r6
 800a316:	aa02      	add	r2, sp, #8
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff fec1 	bl	800a0a0 <_GetVisibility>
 800a31e:	2801      	cmp	r0, #1
 800a320:	d915      	bls.n	800a34e <_SetSel+0x62>
 800a322:	4629      	mov	r1, r5
 800a324:	4620      	mov	r0, r4
 800a326:	aa02      	add	r2, sp, #8
 800a328:	f7ff feba 	bl	800a0a0 <_GetVisibility>
 800a32c:	2801      	cmp	r0, #1
 800a32e:	d909      	bls.n	800a344 <_SetSel+0x58>
 800a330:	4620      	mov	r0, r4
 800a332:	2104      	movs	r1, #4
 800a334:	f005 fcaa 	bl	800fc8c <WM_NotifyParent>
 800a338:	b004      	add	sp, #16
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	4620      	mov	r0, r4
 800a33e:	f007 fba1 	bl	8011a84 <WM_InvalidateWindow>
 800a342:	e7f5      	b.n	800a330 <_SetSel+0x44>
 800a344:	a902      	add	r1, sp, #8
 800a346:	4620      	mov	r0, r4
 800a348:	f007 fad6 	bl	80118f8 <WM_InvalidateRect>
 800a34c:	e7f0      	b.n	800a330 <_SetSel+0x44>
 800a34e:	4620      	mov	r0, r4
 800a350:	a902      	add	r1, sp, #8
 800a352:	f007 fad1 	bl	80118f8 <WM_InvalidateRect>
 800a356:	e7e4      	b.n	800a322 <_SetSel+0x36>

0800a358 <TREEVIEW_CreateIndirect>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	6986      	ldr	r6, [r0, #24]
 800a35e:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 800a362:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 800a366:	8a47      	ldrh	r7, [r0, #18]
 800a368:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 800a36c:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800a370:	b089      	sub	sp, #36	; 0x24
 800a372:	4688      	mov	r8, r1
 800a374:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800a378:	9705      	str	r7, [sp, #20]
 800a37a:	eb01 0902 	add.w	r9, r1, r2
 800a37e:	449b      	add	fp, r3
 800a380:	2702      	movs	r7, #2
 800a382:	f00c fb75 	bl	8016a70 <GUI_Lock>
 800a386:	f106 039c 	add.w	r3, r6, #156	; 0x9c
 800a38a:	4e16      	ldr	r6, [pc, #88]	; (800a3e4 <TREEVIEW_CreateIndirect+0x8c>)
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	f8cd 8000 	str.w	r8, [sp]
 800a392:	4623      	mov	r3, r4
 800a394:	4648      	mov	r0, r9
 800a396:	4659      	mov	r1, fp
 800a398:	462a      	mov	r2, r5
 800a39a:	9701      	str	r7, [sp, #4]
 800a39c:	9602      	str	r6, [sp, #8]
 800a39e:	f007 fbcd 	bl	8011b3c <WM_CreateWindowAsChild>
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	b1c0      	cbz	r0, 800a3d8 <TREEVIEW_CreateIndirect+0x80>
 800a3a6:	f00e fee3 	bl	8019170 <GUI_ALLOC_LockH>
 800a3aa:	ae08      	add	r6, sp, #32
 800a3ac:	fa0f f18a 	sxth.w	r1, sl
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	9007      	str	r0, [sp, #28]
 800a3b4:	f7fe ffb4 	bl	8009320 <WIDGET__Init>
 800a3b8:	f856 5d04 	ldr.w	r5, [r6, #-4]!
 800a3bc:	490a      	ldr	r1, [pc, #40]	; (800a3e8 <TREEVIEW_CreateIndirect+0x90>)
 800a3be:	224c      	movs	r2, #76	; 0x4c
 800a3c0:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800a3c4:	f013 fe1a 	bl	801dffc <memcpy>
 800a3c8:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <TREEVIEW_CreateIndirect+0x94>)
 800a3ca:	9f05      	ldr	r7, [sp, #20]
 800a3cc:	f8a5 709c 	strh.w	r7, [r5, #156]	; 0x9c
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	636b      	str	r3, [r5, #52]	; 0x34
 800a3d4:	f00e fede 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a3d8:	f00c fb40 	bl	8016a5c <GUI_Unlock>
 800a3dc:	4620      	mov	r0, r4
 800a3de:	b009      	add	sp, #36	; 0x24
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	0800aaed 	.word	0x0800aaed
 800a3e8:	20000120 	.word	0x20000120
 800a3ec:	08009915 	.word	0x08009915

0800a3f0 <TREEVIEW_ITEM_Create>:
 800a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	4617      	mov	r7, r2
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	f00c fb39 	bl	8016a70 <GUI_Lock>
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7f5 ff06 	bl	8000210 <strlen>
 800a404:	3020      	adds	r0, #32
 800a406:	f00f f83b 	bl	8019480 <GUI_ALLOC_AllocZero>
 800a40a:	4605      	mov	r5, r0
 800a40c:	b920      	cbnz	r0, 800a418 <TREEVIEW_ITEM_Create+0x28>
 800a40e:	f00c fb25 	bl	8016a5c <GUI_Unlock>
 800a412:	4628      	mov	r0, r5
 800a414:	b003      	add	sp, #12
 800a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a418:	f00e feaa 	bl	8019170 <GUI_ALLOC_LockH>
 800a41c:	4603      	mov	r3, r0
 800a41e:	4621      	mov	r1, r4
 800a420:	301d      	adds	r0, #29
 800a422:	60df      	str	r7, [r3, #12]
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	f013 fed3 	bl	801e1d0 <strcpy>
 800a42a:	b126      	cbz	r6, 800a436 <TREEVIEW_ITEM_Create+0x46>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	8b1a      	ldrh	r2, [r3, #24]
 800a430:	f042 0201 	orr.w	r2, r2, #1
 800a434:	831a      	strh	r2, [r3, #24]
 800a436:	a801      	add	r0, sp, #4
 800a438:	f00e feac 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a43c:	f00c fb0e 	bl	8016a5c <GUI_Unlock>
 800a440:	4628      	mov	r0, r5
 800a442:	b003      	add	sp, #12
 800a444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a446:	bf00      	nop

0800a448 <TREEVIEW_AttachItem>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	4604      	mov	r4, r0
 800a44e:	b08d      	sub	sp, #52	; 0x34
 800a450:	468a      	mov	sl, r1
 800a452:	4693      	mov	fp, r2
 800a454:	461f      	mov	r7, r3
 800a456:	2800      	cmp	r0, #0
 800a458:	d053      	beq.n	800a502 <TREEVIEW_AttachItem+0xba>
 800a45a:	b921      	cbnz	r1, 800a466 <TREEVIEW_AttachItem+0x1e>
 800a45c:	4689      	mov	r9, r1
 800a45e:	4648      	mov	r0, r9
 800a460:	b00d      	add	sp, #52	; 0x34
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	f00c fb03 	bl	8016a70 <GUI_Lock>
 800a46a:	4650      	mov	r0, sl
 800a46c:	f00e fe80 	bl	8019170 <GUI_ALLOC_LockH>
 800a470:	6845      	ldr	r5, [r0, #4]
 800a472:	9006      	str	r0, [sp, #24]
 800a474:	2d00      	cmp	r5, #0
 800a476:	d149      	bne.n	800a50c <TREEVIEW_AttachItem+0xc4>
 800a478:	46a8      	mov	r8, r5
 800a47a:	462e      	mov	r6, r5
 800a47c:	6883      	ldr	r3, [r0, #8]
 800a47e:	a806      	add	r0, sp, #24
 800a480:	2b00      	cmp	r3, #0
 800a482:	f040 80fc 	bne.w	800a67e <TREEVIEW_AttachItem+0x236>
 800a486:	f00e fe85 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a48a:	4620      	mov	r0, r4
 800a48c:	f00e fe70 	bl	8019170 <GUI_ALLOC_LockH>
 800a490:	9007      	str	r0, [sp, #28]
 800a492:	4650      	mov	r0, sl
 800a494:	f00e fe6c 	bl	8019170 <GUI_ALLOC_LockH>
 800a498:	9b07      	ldr	r3, [sp, #28]
 800a49a:	9008      	str	r0, [sp, #32]
 800a49c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	f000 80f1 	beq.w	800a688 <TREEVIEW_AttachItem+0x240>
 800a4a6:	f1bb 0f00 	cmp.w	fp, #0
 800a4aa:	d056      	beq.n	800a55a <TREEVIEW_AttachItem+0x112>
 800a4ac:	2f02      	cmp	r7, #2
 800a4ae:	f000 8127 	beq.w	800a700 <TREEVIEW_AttachItem+0x2b8>
 800a4b2:	2f00      	cmp	r7, #0
 800a4b4:	f000 8109 	beq.w	800a6ca <TREEVIEW_AttachItem+0x282>
 800a4b8:	2f01      	cmp	r7, #1
 800a4ba:	f000 813a 	beq.w	800a732 <TREEVIEW_AttachItem+0x2ea>
 800a4be:	aa0b      	add	r2, sp, #44	; 0x2c
 800a4c0:	9204      	str	r2, [sp, #16]
 800a4c2:	3101      	adds	r1, #1
 800a4c4:	af0c      	add	r7, sp, #48	; 0x30
 800a4c6:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 800a4ca:	a807      	add	r0, sp, #28
 800a4cc:	f00e fe62 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a4d0:	f857 3d10 	ldr.w	r3, [r7, #-16]!
 800a4d4:	601c      	str	r4, [r3, #0]
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	f00e fe5c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f00e fe47 	bl	8019170 <GUI_ALLOC_LockH>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f04f 0b00 	mov.w	fp, #0
 800a4e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ea:	9804      	ldr	r0, [sp, #16]
 800a4ec:	f8c3 b0b8 	str.w	fp, [r3, #184]	; 0xb8
 800a4f0:	f8c3 b0bc 	str.w	fp, [r3, #188]	; 0xbc
 800a4f4:	f00e fe4e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	46d9      	mov	r9, fp
 800a4fc:	f007 fac2 	bl	8011a84 <WM_InvalidateWindow>
 800a500:	e036      	b.n	800a570 <TREEVIEW_AttachItem+0x128>
 800a502:	4681      	mov	r9, r0
 800a504:	4648      	mov	r0, r9
 800a506:	b00d      	add	sp, #52	; 0x34
 800a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50c:	4650      	mov	r0, sl
 800a50e:	f00e fe2f 	bl	8019170 <GUI_ALLOC_LockH>
 800a512:	8b03      	ldrh	r3, [r0, #24]
 800a514:	900b      	str	r0, [sp, #44]	; 0x2c
 800a516:	07d9      	lsls	r1, r3, #31
 800a518:	f890 901c 	ldrb.w	r9, [r0, #28]
 800a51c:	f140 80a7 	bpl.w	800a66e <TREEVIEW_AttachItem+0x226>
 800a520:	6846      	ldr	r6, [r0, #4]
 800a522:	2e00      	cmp	r6, #0
 800a524:	f000 80a3 	beq.w	800a66e <TREEVIEW_AttachItem+0x226>
 800a528:	4630      	mov	r0, r6
 800a52a:	f00e fe21 	bl	8019170 <GUI_ALLOC_LockH>
 800a52e:	ab0c      	add	r3, sp, #48	; 0x30
 800a530:	4686      	mov	lr, r0
 800a532:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a536:	7f01      	ldrb	r1, [r0, #28]
 800a538:	46d4      	mov	ip, sl
 800a53a:	4589      	cmp	r9, r1
 800a53c:	f280 80c3 	bge.w	800a6c6 <TREEVIEW_AttachItem+0x27e>
 800a540:	f8de 8004 	ldr.w	r8, [lr, #4]
 800a544:	f1b8 0f00 	cmp.w	r8, #0
 800a548:	f040 80ac 	bne.w	800a6a4 <TREEVIEW_AttachItem+0x25c>
 800a54c:	4618      	mov	r0, r3
 800a54e:	f00e fe21 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a552:	e08d      	b.n	800a670 <TREEVIEW_AttachItem+0x228>
 800a554:	a809      	add	r0, sp, #36	; 0x24
 800a556:	f00e fe1d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a55a:	a807      	add	r0, sp, #28
 800a55c:	af08      	add	r7, sp, #32
 800a55e:	f00e fe19 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a562:	4638      	mov	r0, r7
 800a564:	f00e fe16 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a568:	ab0b      	add	r3, sp, #44	; 0x2c
 800a56a:	f04f 0901 	mov.w	r9, #1
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	4650      	mov	r0, sl
 800a572:	f00e fdfd 	bl	8019170 <GUI_ALLOC_LockH>
 800a576:	9006      	str	r0, [sp, #24]
 800a578:	4620      	mov	r0, r4
 800a57a:	f00e fdf9 	bl	8019170 <GUI_ALLOC_LockH>
 800a57e:	9a06      	ldr	r2, [sp, #24]
 800a580:	9008      	str	r0, [sp, #32]
 800a582:	7f12      	ldrb	r2, [r2, #28]
 800a584:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800a586:	9205      	str	r2, [sp, #20]
 800a588:	f00d fd70 	bl	801806c <GUI_SetFont>
 800a58c:	f8dd b018 	ldr.w	fp, [sp, #24]
 800a590:	9908      	ldr	r1, [sp, #32]
 800a592:	f89b 001c 	ldrb.w	r0, [fp, #28]
 800a596:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a59a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 800a59e:	fb00 2202 	mla	r2, r0, r2, r2
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f10b 001d 	add.w	r0, fp, #29
 800a5a8:	fa1f fa82 	uxth.w	sl, r2
 800a5ac:	f00c ff84 	bl	80174b8 <GUI_GetStringDistX>
 800a5b0:	4450      	add	r0, sl
 800a5b2:	f8ab 0014 	strh.w	r0, [fp, #20]
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	d03d      	beq.n	800a636 <TREEVIEW_AttachItem+0x1ee>
 800a5ba:	f1b9 0f00 	cmp.w	r9, #0
 800a5be:	d13a      	bne.n	800a636 <TREEVIEW_AttachItem+0x1ee>
 800a5c0:	9806      	ldr	r0, [sp, #24]
 800a5c2:	46ab      	mov	fp, r5
 800a5c4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a5c8:	6004      	str	r4, [r0, #0]
 800a5ca:	6045      	str	r5, [r0, #4]
 800a5cc:	e003      	b.n	800a5d6 <TREEVIEW_AttachItem+0x18e>
 800a5ce:	455e      	cmp	r6, fp
 800a5d0:	d019      	beq.n	800a606 <TREEVIEW_AttachItem+0x1be>
 800a5d2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800a5d6:	9908      	ldr	r1, [sp, #32]
 800a5d8:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 800a5dc:	3501      	adds	r5, #1
 800a5de:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 800a5e2:	f1bb 0f00 	cmp.w	fp, #0
 800a5e6:	d0f2      	beq.n	800a5ce <TREEVIEW_AttachItem+0x186>
 800a5e8:	a806      	add	r0, sp, #24
 800a5ea:	f00e fdd3 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a5ee:	4658      	mov	r0, fp
 800a5f0:	f00e fdbe 	bl	8019170 <GUI_ALLOC_LockH>
 800a5f4:	9a05      	ldr	r2, [sp, #20]
 800a5f6:	7f01      	ldrb	r1, [r0, #28]
 800a5f8:	9006      	str	r0, [sp, #24]
 800a5fa:	4411      	add	r1, r2
 800a5fc:	ebc8 0101 	rsb	r1, r8, r1
 800a600:	6004      	str	r4, [r0, #0]
 800a602:	7701      	strb	r1, [r0, #28]
 800a604:	e7e3      	b.n	800a5ce <TREEVIEW_AttachItem+0x186>
 800a606:	4630      	mov	r0, r6
 800a608:	f00e fdb2 	bl	8019170 <GUI_ALLOC_LockH>
 800a60c:	aa0c      	add	r2, sp, #48	; 0x30
 800a60e:	f842 0d08 	str.w	r0, [r2, #-8]!
 800a612:	f8c0 a004 	str.w	sl, [r0, #4]
 800a616:	4610      	mov	r0, r2
 800a618:	f00e fdbc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a61c:	f1ba 0f00 	cmp.w	sl, #0
 800a620:	d009      	beq.n	800a636 <TREEVIEW_AttachItem+0x1ee>
 800a622:	4650      	mov	r0, sl
 800a624:	f00e fda4 	bl	8019170 <GUI_ALLOC_LockH>
 800a628:	aa0c      	add	r2, sp, #48	; 0x30
 800a62a:	f842 0d0c 	str.w	r0, [r2, #-12]!
 800a62e:	6086      	str	r6, [r0, #8]
 800a630:	4610      	mov	r0, r2
 800a632:	f00e fdaf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a636:	4638      	mov	r0, r7
 800a638:	f00e fdac 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a63c:	a806      	add	r0, sp, #24
 800a63e:	f00e fda9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a642:	4620      	mov	r0, r4
 800a644:	f00e fd94 	bl	8019170 <GUI_ALLOC_LockH>
 800a648:	4602      	mov	r2, r0
 800a64a:	2100      	movs	r1, #0
 800a64c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a64e:	9804      	ldr	r0, [sp, #16]
 800a650:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
 800a654:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
 800a658:	f00e fd9c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a65c:	4620      	mov	r0, r4
 800a65e:	f007 fa11 	bl	8011a84 <WM_InvalidateWindow>
 800a662:	f00c f9fb 	bl	8016a5c <GUI_Unlock>
 800a666:	4648      	mov	r0, r9
 800a668:	b00d      	add	sp, #52	; 0x34
 800a66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66e:	4656      	mov	r6, sl
 800a670:	a80b      	add	r0, sp, #44	; 0x2c
 800a672:	f00e fd8f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a676:	9806      	ldr	r0, [sp, #24]
 800a678:	f890 801c 	ldrb.w	r8, [r0, #28]
 800a67c:	e6fe      	b.n	800a47c <TREEVIEW_AttachItem+0x34>
 800a67e:	f00e fd89 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	e7ec      	b.n	800a662 <TREEVIEW_AttachItem+0x21a>
 800a688:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	f47f af64 	bne.w	800a55a <TREEVIEW_AttachItem+0x112>
 800a692:	f8c3 a0a8 	str.w	sl, [r3, #168]	; 0xa8
 800a696:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800a69a:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 800a69e:	6041      	str	r1, [r0, #4]
 800a6a0:	6081      	str	r1, [r0, #8]
 800a6a2:	e70c      	b.n	800a4be <TREEVIEW_AttachItem+0x76>
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f00e fd74 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	f00e fd5f 	bl	8019170 <GUI_ALLOC_LockH>
 800a6b2:	900a      	str	r0, [sp, #40]	; 0x28
 800a6b4:	7f01      	ldrb	r1, [r0, #28]
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	4589      	cmp	r9, r1
 800a6ba:	bfb4      	ite	lt
 800a6bc:	46c4      	movlt	ip, r8
 800a6be:	46b4      	movge	ip, r6
 800a6c0:	4686      	mov	lr, r0
 800a6c2:	4646      	mov	r6, r8
 800a6c4:	e739      	b.n	800a53a <TREEVIEW_AttachItem+0xf2>
 800a6c6:	4666      	mov	r6, ip
 800a6c8:	e740      	b.n	800a54c <TREEVIEW_AttachItem+0x104>
 800a6ca:	4658      	mov	r0, fp
 800a6cc:	f00e fd50 	bl	8019170 <GUI_ALLOC_LockH>
 800a6d0:	6887      	ldr	r7, [r0, #8]
 800a6d2:	900a      	str	r0, [sp, #40]	; 0x28
 800a6d4:	2f00      	cmp	r7, #0
 800a6d6:	d164      	bne.n	800a7a2 <TREEVIEW_AttachItem+0x35a>
 800a6d8:	9b07      	ldr	r3, [sp, #28]
 800a6da:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 800a6de:	9b08      	ldr	r3, [sp, #32]
 800a6e0:	7f01      	ldrb	r1, [r0, #28]
 800a6e2:	f8c0 a008 	str.w	sl, [r0, #8]
 800a6e6:	a80a      	add	r0, sp, #40	; 0x28
 800a6e8:	7719      	strb	r1, [r3, #28]
 800a6ea:	f8c3 b004 	str.w	fp, [r3, #4]
 800a6ee:	609f      	str	r7, [r3, #8]
 800a6f0:	f00e fd50 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6f8:	9204      	str	r2, [sp, #16]
 800a6fa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800a6fe:	e6e0      	b.n	800a4c2 <TREEVIEW_AttachItem+0x7a>
 800a700:	4658      	mov	r0, fp
 800a702:	f00e fd35 	bl	8019170 <GUI_ALLOC_LockH>
 800a706:	8b03      	ldrh	r3, [r0, #24]
 800a708:	9009      	str	r0, [sp, #36]	; 0x24
 800a70a:	07da      	lsls	r2, r3, #31
 800a70c:	f57f af22 	bpl.w	800a554 <TREEVIEW_AttachItem+0x10c>
 800a710:	6847      	ldr	r7, [r0, #4]
 800a712:	2f00      	cmp	r7, #0
 800a714:	d15f      	bne.n	800a7d6 <TREEVIEW_AttachItem+0x38e>
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800a71c:	7f01      	ldrb	r1, [r0, #28]
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	f8c0 a004 	str.w	sl, [r0, #4]
 800a724:	3101      	adds	r1, #1
 800a726:	7719      	strb	r1, [r3, #28]
 800a728:	605f      	str	r7, [r3, #4]
 800a72a:	f8c3 b008 	str.w	fp, [r3, #8]
 800a72e:	a809      	add	r0, sp, #36	; 0x24
 800a730:	e7de      	b.n	800a6f0 <TREEVIEW_AttachItem+0x2a8>
 800a732:	4658      	mov	r0, fp
 800a734:	f00e fd1c 	bl	8019170 <GUI_ALLOC_LockH>
 800a738:	af0c      	add	r7, sp, #48	; 0x30
 800a73a:	4603      	mov	r3, r0
 800a73c:	f847 0d0c 	str.w	r0, [r7, #-12]!
 800a740:	7f1b      	ldrb	r3, [r3, #28]
 800a742:	9305      	str	r3, [sp, #20]
 800a744:	4638      	mov	r0, r7
 800a746:	f00e fd25 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a74a:	4658      	mov	r0, fp
 800a74c:	f00e fd10 	bl	8019170 <GUI_ALLOC_LockH>
 800a750:	8b03      	ldrh	r3, [r0, #24]
 800a752:	900b      	str	r0, [sp, #44]	; 0x2c
 800a754:	07db      	lsls	r3, r3, #31
 800a756:	7f01      	ldrb	r1, [r0, #28]
 800a758:	d502      	bpl.n	800a760 <TREEVIEW_AttachItem+0x318>
 800a75a:	6842      	ldr	r2, [r0, #4]
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	d147      	bne.n	800a7f0 <TREEVIEW_AttachItem+0x3a8>
 800a760:	ab0b      	add	r3, sp, #44	; 0x2c
 800a762:	4618      	mov	r0, r3
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	f00e fd15 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a76a:	4658      	mov	r0, fp
 800a76c:	f00e fd00 	bl	8019170 <GUI_ALLOC_LockH>
 800a770:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a774:	9009      	str	r0, [sp, #36]	; 0x24
 800a776:	f1b9 0f00 	cmp.w	r9, #0
 800a77a:	d11f      	bne.n	800a7bc <TREEVIEW_AttachItem+0x374>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	9a05      	ldr	r2, [sp, #20]
 800a786:	f8c0 a004 	str.w	sl, [r0, #4]
 800a78a:	f8c3 9004 	str.w	r9, [r3, #4]
 800a78e:	f8c3 b008 	str.w	fp, [r3, #8]
 800a792:	771a      	strb	r2, [r3, #28]
 800a794:	4638      	mov	r0, r7
 800a796:	f00e fcfd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a79a:	9b07      	ldr	r3, [sp, #28]
 800a79c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800a7a0:	e68f      	b.n	800a4c2 <TREEVIEW_AttachItem+0x7a>
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	f00e fce4 	bl	8019170 <GUI_ALLOC_LockH>
 800a7a8:	ab0c      	add	r3, sp, #48	; 0x30
 800a7aa:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800a7ae:	f8c0 a004 	str.w	sl, [r0, #4]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f00e fcee 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a7b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7ba:	e790      	b.n	800a6de <TREEVIEW_AttachItem+0x296>
 800a7bc:	4648      	mov	r0, r9
 800a7be:	f00e fcd7 	bl	8019170 <GUI_ALLOC_LockH>
 800a7c2:	ab0c      	add	r3, sp, #48	; 0x30
 800a7c4:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a7c8:	f8c0 a008 	str.w	sl, [r0, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f00e fce1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a7d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7d4:	e7d5      	b.n	800a782 <TREEVIEW_AttachItem+0x33a>
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f00e fcca 	bl	8019170 <GUI_ALLOC_LockH>
 800a7dc:	ab0c      	add	r3, sp, #48	; 0x30
 800a7de:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a7e2:	f8c0 a008 	str.w	sl, [r0, #8]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f00e fcd4 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ee:	e795      	b.n	800a71c <TREEVIEW_AttachItem+0x2d4>
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	9103      	str	r1, [sp, #12]
 800a7f4:	9202      	str	r2, [sp, #8]
 800a7f6:	f00e fcbb 	bl	8019170 <GUI_ALLOC_LockH>
 800a7fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a7fc:	4686      	mov	lr, r0
 800a7fe:	f843 ed08 	str.w	lr, [r3, #-8]!
 800a802:	9903      	ldr	r1, [sp, #12]
 800a804:	f89e e01c 	ldrb.w	lr, [lr, #28]
 800a808:	9a02      	ldr	r2, [sp, #8]
 800a80a:	4571      	cmp	r1, lr
 800a80c:	da20      	bge.n	800a850 <TREEVIEW_AttachItem+0x408>
 800a80e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a812:	f1b9 0f00 	cmp.w	r9, #0
 800a816:	d106      	bne.n	800a826 <TREEVIEW_AttachItem+0x3de>
 800a818:	4618      	mov	r0, r3
 800a81a:	9202      	str	r2, [sp, #8]
 800a81c:	f00e fcba 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a820:	9a02      	ldr	r2, [sp, #8]
 800a822:	4693      	mov	fp, r2
 800a824:	e79c      	b.n	800a760 <TREEVIEW_AttachItem+0x318>
 800a826:	4618      	mov	r0, r3
 800a828:	9103      	str	r1, [sp, #12]
 800a82a:	9202      	str	r2, [sp, #8]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	f00e fcb1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a832:	4648      	mov	r0, r9
 800a834:	f00e fc9c 	bl	8019170 <GUI_ALLOC_LockH>
 800a838:	900a      	str	r0, [sp, #40]	; 0x28
 800a83a:	9a02      	ldr	r2, [sp, #8]
 800a83c:	f890 e01c 	ldrb.w	lr, [r0, #28]
 800a840:	9903      	ldr	r1, [sp, #12]
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	4571      	cmp	r1, lr
 800a846:	bfb4      	ite	lt
 800a848:	46cb      	movlt	fp, r9
 800a84a:	4693      	movge	fp, r2
 800a84c:	464a      	mov	r2, r9
 800a84e:	e7dc      	b.n	800a80a <TREEVIEW_AttachItem+0x3c2>
 800a850:	465a      	mov	r2, fp
 800a852:	e7e1      	b.n	800a818 <TREEVIEW_AttachItem+0x3d0>

0800a854 <TREEVIEW_GetItem>:
 800a854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a856:	b087      	sub	sp, #28
 800a858:	2300      	movs	r3, #0
 800a85a:	460c      	mov	r4, r1
 800a85c:	4615      	mov	r5, r2
 800a85e:	9303      	str	r3, [sp, #12]
 800a860:	b921      	cbnz	r1, 800a86c <TREEVIEW_GetItem+0x18>
 800a862:	2a01      	cmp	r2, #1
 800a864:	d902      	bls.n	800a86c <TREEVIEW_GetItem+0x18>
 800a866:	4608      	mov	r0, r1
 800a868:	b007      	add	sp, #28
 800a86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d0fb      	beq.n	800a868 <TREEVIEW_GetItem+0x14>
 800a870:	9001      	str	r0, [sp, #4]
 800a872:	f00c f8fd 	bl	8016a70 <GUI_Lock>
 800a876:	9801      	ldr	r0, [sp, #4]
 800a878:	f00e fc7a 	bl	8019170 <GUI_ALLOC_LockH>
 800a87c:	9002      	str	r0, [sp, #8]
 800a87e:	b944      	cbnz	r4, 800a892 <TREEVIEW_GetItem+0x3e>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	2d05      	cmp	r5, #5
 800a884:	f200 80c5 	bhi.w	800aa12 <TREEVIEW_GetItem+0x1be>
 800a888:	e8df f005 	tbb	[pc, r5]
 800a88c:	324b6d73 	.word	0x324b6d73
 800a890:	091a      	.short	0x091a
 800a892:	4620      	mov	r0, r4
 800a894:	f00e fc6c 	bl	8019170 <GUI_ALLOC_LockH>
 800a898:	9003      	str	r0, [sp, #12]
 800a89a:	4603      	mov	r3, r0
 800a89c:	e7f1      	b.n	800a882 <TREEVIEW_GetItem+0x2e>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d06d      	beq.n	800a97e <TREEVIEW_GetItem+0x12a>
 800a8a2:	7f1e      	ldrb	r6, [r3, #28]
 800a8a4:	2e00      	cmp	r6, #0
 800a8a6:	d16c      	bne.n	800a982 <TREEVIEW_GetItem+0x12e>
 800a8a8:	4634      	mov	r4, r6
 800a8aa:	a803      	add	r0, sp, #12
 800a8ac:	f00e fc72 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a8b0:	a802      	add	r0, sp, #8
 800a8b2:	f00e fc6f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a8b6:	f00c f8d1 	bl	8016a5c <GUI_Unlock>
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	b007      	add	sp, #28
 800a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05c      	beq.n	800a97e <TREEVIEW_GetItem+0x12a>
 800a8c4:	8b1c      	ldrh	r4, [r3, #24]
 800a8c6:	f014 0401 	ands.w	r4, r4, #1
 800a8ca:	d0ee      	beq.n	800a8aa <TREEVIEW_GetItem+0x56>
 800a8cc:	685c      	ldr	r4, [r3, #4]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f00e fc4e 	bl	8019170 <GUI_ALLOC_LockH>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	9005      	str	r0, [sp, #20]
 800a8d8:	7f02      	ldrb	r2, [r0, #28]
 800a8da:	7f1b      	ldrb	r3, [r3, #28]
 800a8dc:	a805      	add	r0, sp, #20
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	bf98      	it	ls
 800a8e2:	2400      	movls	r4, #0
 800a8e4:	f00e fc56 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1dd      	bne.n	800a8aa <TREEVIEW_GetItem+0x56>
 800a8ee:	e7df      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d044      	beq.n	800a97e <TREEVIEW_GetItem+0x12a>
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	7f1e      	ldrb	r6, [r3, #28]
 800a8f8:	f00e fc3a 	bl	8019170 <GUI_ALLOC_LockH>
 800a8fc:	6884      	ldr	r4, [r0, #8]
 800a8fe:	9005      	str	r0, [sp, #20]
 800a900:	ad05      	add	r5, sp, #20
 800a902:	b91c      	cbnz	r4, 800a90c <TREEVIEW_GetItem+0xb8>
 800a904:	e027      	b.n	800a956 <TREEVIEW_GetItem+0x102>
 800a906:	dc26      	bgt.n	800a956 <TREEVIEW_GetItem+0x102>
 800a908:	6884      	ldr	r4, [r0, #8]
 800a90a:	b324      	cbz	r4, 800a956 <TREEVIEW_GetItem+0x102>
 800a90c:	4628      	mov	r0, r5
 800a90e:	f00e fc41 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a912:	4620      	mov	r0, r4
 800a914:	f00e fc2c 	bl	8019170 <GUI_ALLOC_LockH>
 800a918:	9005      	str	r0, [sp, #20]
 800a91a:	7f03      	ldrb	r3, [r0, #28]
 800a91c:	429e      	cmp	r6, r3
 800a91e:	d1f2      	bne.n	800a906 <TREEVIEW_GetItem+0xb2>
 800a920:	e01a      	b.n	800a958 <TREEVIEW_GetItem+0x104>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d02b      	beq.n	800a97e <TREEVIEW_GetItem+0x12a>
 800a926:	4620      	mov	r0, r4
 800a928:	f00e fc22 	bl	8019170 <GUI_ALLOC_LockH>
 800a92c:	8b03      	ldrh	r3, [r0, #24]
 800a92e:	9005      	str	r0, [sp, #20]
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	7f06      	ldrb	r6, [r0, #28]
 800a934:	d502      	bpl.n	800a93c <TREEVIEW_GetItem+0xe8>
 800a936:	6845      	ldr	r5, [r0, #4]
 800a938:	2d00      	cmp	r5, #0
 800a93a:	d13a      	bne.n	800a9b2 <TREEVIEW_GetItem+0x15e>
 800a93c:	ad05      	add	r5, sp, #20
 800a93e:	4628      	mov	r0, r5
 800a940:	f00e fc28 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a944:	2c00      	cmp	r4, #0
 800a946:	d0cf      	beq.n	800a8e8 <TREEVIEW_GetItem+0x94>
 800a948:	4620      	mov	r0, r4
 800a94a:	f00e fc11 	bl	8019170 <GUI_ALLOC_LockH>
 800a94e:	6844      	ldr	r4, [r0, #4]
 800a950:	9005      	str	r0, [sp, #20]
 800a952:	2c00      	cmp	r4, #0
 800a954:	d150      	bne.n	800a9f8 <TREEVIEW_GetItem+0x1a4>
 800a956:	2400      	movs	r4, #0
 800a958:	4628      	mov	r0, r5
 800a95a:	f00e fc1b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1a2      	bne.n	800a8aa <TREEVIEW_GetItem+0x56>
 800a964:	e7a4      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>
 800a966:	9a02      	ldr	r2, [sp, #8]
 800a968:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d19c      	bne.n	800a8aa <TREEVIEW_GetItem+0x56>
 800a970:	e79e      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>
 800a972:	9a02      	ldr	r2, [sp, #8]
 800a974:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d196      	bne.n	800a8aa <TREEVIEW_GetItem+0x56>
 800a97c:	e798      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>
 800a97e:	461c      	mov	r4, r3
 800a980:	e796      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>
 800a982:	4620      	mov	r0, r4
 800a984:	f00e fbf4 	bl	8019170 <GUI_ALLOC_LockH>
 800a988:	6884      	ldr	r4, [r0, #8]
 800a98a:	9005      	str	r0, [sp, #20]
 800a98c:	3e01      	subs	r6, #1
 800a98e:	ad05      	add	r5, sp, #20
 800a990:	b924      	cbnz	r4, 800a99c <TREEVIEW_GetItem+0x148>
 800a992:	e7e0      	b.n	800a956 <TREEVIEW_GetItem+0x102>
 800a994:	dcdf      	bgt.n	800a956 <TREEVIEW_GetItem+0x102>
 800a996:	6884      	ldr	r4, [r0, #8]
 800a998:	2c00      	cmp	r4, #0
 800a99a:	d0dc      	beq.n	800a956 <TREEVIEW_GetItem+0x102>
 800a99c:	4628      	mov	r0, r5
 800a99e:	f00e fbf9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f00e fbe4 	bl	8019170 <GUI_ALLOC_LockH>
 800a9a8:	9005      	str	r0, [sp, #20]
 800a9aa:	7f03      	ldrb	r3, [r0, #28]
 800a9ac:	429e      	cmp	r6, r3
 800a9ae:	d1f1      	bne.n	800a994 <TREEVIEW_GetItem+0x140>
 800a9b0:	e7d2      	b.n	800a958 <TREEVIEW_GetItem+0x104>
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f00e fbdc 	bl	8019170 <GUI_ALLOC_LockH>
 800a9b8:	af06      	add	r7, sp, #24
 800a9ba:	7f03      	ldrb	r3, [r0, #28]
 800a9bc:	f847 0d08 	str.w	r0, [r7, #-8]!
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	462c      	mov	r4, r5
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	da14      	bge.n	800a9f4 <TREEVIEW_GetItem+0x1a0>
 800a9ca:	6855      	ldr	r5, [r2, #4]
 800a9cc:	b91d      	cbnz	r5, 800a9d6 <TREEVIEW_GetItem+0x182>
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f00e fbe0 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a9d4:	e7b2      	b.n	800a93c <TREEVIEW_GetItem+0xe8>
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f00e fbdc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f00e fbc7 	bl	8019170 <GUI_ALLOC_LockH>
 800a9e2:	7f03      	ldrb	r3, [r0, #28]
 800a9e4:	9004      	str	r0, [sp, #16]
 800a9e6:	429e      	cmp	r6, r3
 800a9e8:	bfb4      	ite	lt
 800a9ea:	4629      	movlt	r1, r5
 800a9ec:	4621      	movge	r1, r4
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	462c      	mov	r4, r5
 800a9f2:	e7e8      	b.n	800a9c6 <TREEVIEW_GetItem+0x172>
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	e7ea      	b.n	800a9ce <TREEVIEW_GetItem+0x17a>
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f00e fbcb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f00e fbb6 	bl	8019170 <GUI_ALLOC_LockH>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	9005      	str	r0, [sp, #20]
 800aa08:	7f02      	ldrb	r2, [r0, #28]
 800aa0a:	7f1b      	ldrb	r3, [r3, #28]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d1a2      	bne.n	800a956 <TREEVIEW_GetItem+0x102>
 800aa10:	e7a2      	b.n	800a958 <TREEVIEW_GetItem+0x104>
 800aa12:	2400      	movs	r4, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f47f af48 	bne.w	800a8aa <TREEVIEW_GetItem+0x56>
 800aa1a:	e749      	b.n	800a8b0 <TREEVIEW_GetItem+0x5c>

0800aa1c <TREEVIEW_ITEM_Expand>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	4604      	mov	r4, r0
 800aa20:	b082      	sub	sp, #8
 800aa22:	b908      	cbnz	r0, 800aa28 <TREEVIEW_ITEM_Expand+0xc>
 800aa24:	b002      	add	sp, #8
 800aa26:	bd10      	pop	{r4, pc}
 800aa28:	f00c f822 	bl	8016a70 <GUI_Lock>
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f00e fb9f 	bl	8019170 <GUI_ALLOC_LockH>
 800aa32:	8b03      	ldrh	r3, [r0, #24]
 800aa34:	9000      	str	r0, [sp, #0]
 800aa36:	f003 0203 	and.w	r2, r3, #3
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	6804      	ldr	r4, [r0, #0]
 800aa3e:	d006      	beq.n	800aa4e <TREEVIEW_ITEM_Expand+0x32>
 800aa40:	4668      	mov	r0, sp
 800aa42:	f00e fba7 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aa46:	f00c f809 	bl	8016a5c <GUI_Unlock>
 800aa4a:	b002      	add	sp, #8
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	f043 0302 	orr.w	r3, r3, #2
 800aa52:	8303      	strh	r3, [r0, #24]
 800aa54:	4668      	mov	r0, sp
 800aa56:	f00e fb9d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aa5a:	2c00      	cmp	r4, #0
 800aa5c:	d0f3      	beq.n	800aa46 <TREEVIEW_ITEM_Expand+0x2a>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f00e fb86 	bl	8019170 <GUI_ALLOC_LockH>
 800aa64:	4603      	mov	r3, r0
 800aa66:	a802      	add	r0, sp, #8
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800aa6e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800aa72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800aa76:	f00e fb8d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f007 f802 	bl	8011a84 <WM_InvalidateWindow>
 800aa80:	e7e1      	b.n	800aa46 <TREEVIEW_ITEM_Expand+0x2a>
 800aa82:	bf00      	nop

0800aa84 <TREEVIEW_ITEM_Collapse>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	b082      	sub	sp, #8
 800aa8a:	b908      	cbnz	r0, 800aa90 <TREEVIEW_ITEM_Collapse+0xc>
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	f00b ffee 	bl	8016a70 <GUI_Lock>
 800aa94:	4620      	mov	r0, r4
 800aa96:	f00e fb6b 	bl	8019170 <GUI_ALLOC_LockH>
 800aa9a:	8b03      	ldrh	r3, [r0, #24]
 800aa9c:	9000      	str	r0, [sp, #0]
 800aa9e:	f003 0203 	and.w	r2, r3, #3
 800aaa2:	2a03      	cmp	r2, #3
 800aaa4:	6804      	ldr	r4, [r0, #0]
 800aaa6:	d006      	beq.n	800aab6 <TREEVIEW_ITEM_Collapse+0x32>
 800aaa8:	4668      	mov	r0, sp
 800aaaa:	f00e fb73 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aaae:	f00b ffd5 	bl	8016a5c <GUI_Unlock>
 800aab2:	b002      	add	sp, #8
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	f023 0302 	bic.w	r3, r3, #2
 800aaba:	8303      	strh	r3, [r0, #24]
 800aabc:	4668      	mov	r0, sp
 800aabe:	f00e fb69 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aac2:	2c00      	cmp	r4, #0
 800aac4:	d0f3      	beq.n	800aaae <TREEVIEW_ITEM_Collapse+0x2a>
 800aac6:	4620      	mov	r0, r4
 800aac8:	f00e fb52 	bl	8019170 <GUI_ALLOC_LockH>
 800aacc:	4603      	mov	r3, r0
 800aace:	a802      	add	r0, sp, #8
 800aad0:	2200      	movs	r2, #0
 800aad2:	f840 3d04 	str.w	r3, [r0, #-4]!
 800aad6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800aada:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800aade:	f00e fb59 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aae2:	4620      	mov	r0, r4
 800aae4:	f006 ffce 	bl	8011a84 <WM_InvalidateWindow>
 800aae8:	e7e1      	b.n	800aaae <TREEVIEW_ITEM_Collapse+0x2a>
 800aaea:	bf00      	nop

0800aaec <TREEVIEW_Callback>:
 800aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800aaf4:	b0c5      	sub	sp, #276	; 0x114
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4601      	mov	r1, r0
 800aafa:	4658      	mov	r0, fp
 800aafc:	f7fe fd0a 	bl	8009514 <WIDGET_HandleActive>
 800ab00:	b150      	cbz	r0, 800ab18 <TREEVIEW_Callback+0x2c>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	2b26      	cmp	r3, #38	; 0x26
 800ab06:	d068      	beq.n	800abda <TREEVIEW_Callback+0xee>
 800ab08:	dc09      	bgt.n	800ab1e <TREEVIEW_Callback+0x32>
 800ab0a:	2b0e      	cmp	r3, #14
 800ab0c:	d025      	beq.n	800ab5a <TREEVIEW_Callback+0x6e>
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	f000 80a1 	beq.w	800ac56 <TREEVIEW_Callback+0x16a>
 800ab14:	2b0b      	cmp	r3, #11
 800ab16:	d075      	beq.n	800ac04 <TREEVIEW_Callback+0x118>
 800ab18:	b045      	add	sp, #276	; 0x114
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	f240 1213 	movw	r2, #275	; 0x113
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d048      	beq.n	800abb8 <TREEVIEW_Callback+0xcc>
 800ab26:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ab2a:	f000 810b 	beq.w	800ad44 <TREEVIEW_Callback+0x258>
 800ab2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab30:	d1f2      	bne.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ab32:	4658      	mov	r0, fp
 800ab34:	f00e fb1c 	bl	8019170 <GUI_ALLOC_LockH>
 800ab38:	ab44      	add	r3, sp, #272	; 0x110
 800ab3a:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 800ab3e:	f843 0d70 	str.w	r0, [r3, #-112]!
 800ab42:	4618      	mov	r0, r3
 800ab44:	f00e fb26 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ab48:	2c00      	cmp	r4, #0
 800ab4a:	d1e5      	bne.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ab4c:	4658      	mov	r0, fp
 800ab4e:	f7ff f88d 	bl	8009c6c <_CalcParams>
 800ab52:	4658      	mov	r0, fp
 800ab54:	f7ff f98a 	bl	8009e6c <_ManageAutoScroll>
 800ab58:	e7de      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ab5a:	4658      	mov	r0, fp
 800ab5c:	f00e fb08 	bl	8019170 <GUI_ALLOC_LockH>
 800ab60:	ab44      	add	r3, sp, #272	; 0x110
 800ab62:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 800ab66:	f843 0dd0 	str.w	r0, [r3, #-208]!
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f00e fb12 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	d1d1      	bne.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ab74:	68e3      	ldr	r3, [r4, #12]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	d0cd      	beq.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ab7c:	4658      	mov	r0, fp
 800ab7e:	681f      	ldr	r7, [r3, #0]
 800ab80:	f00e faf6 	bl	8019170 <GUI_ALLOC_LockH>
 800ab84:	4603      	mov	r3, r0
 800ab86:	a844      	add	r0, sp, #272	; 0x110
 800ab88:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800ab8c:	f840 3dc8 	str.w	r3, [r0, #-200]!
 800ab90:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 800ab94:	f00e fafe 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ab98:	f1a7 0310 	sub.w	r3, r7, #16
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	f200 8176 	bhi.w	800ae8e <TREEVIEW_Callback+0x3a2>
 800aba2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aba6:	0152      	.short	0x0152
 800aba8:	01110169 	.word	0x01110169
 800abac:	01740147 	.word	0x01740147
 800abb0:	01740174 	.word	0x01740174
 800abb4:	0104013f 	.word	0x0104013f
 800abb8:	4658      	mov	r0, fp
 800abba:	f00e fad9 	bl	8019170 <GUI_ALLOC_LockH>
 800abbe:	9010      	str	r0, [sp, #64]	; 0x40
 800abc0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800abc4:	f003 fecc 	bl	800e960 <WM_DeleteTimer>
 800abc8:	a844      	add	r0, sp, #272	; 0x110
 800abca:	2200      	movs	r2, #0
 800abcc:	f850 3dd0 	ldr.w	r3, [r0, #-208]!
 800abd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800abd4:	f00e fade 	bl	8019194 <GUI_ALLOC_UnlockH>
 800abd8:	e79e      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	2b05      	cmp	r3, #5
 800abde:	f000 80c9 	beq.w	800ad74 <TREEVIEW_Callback+0x288>
 800abe2:	2b06      	cmp	r3, #6
 800abe4:	d198      	bne.n	800ab18 <TREEVIEW_Callback+0x2c>
 800abe6:	4658      	mov	r0, fp
 800abe8:	f00e fac2 	bl	8019170 <GUI_ALLOC_LockH>
 800abec:	4603      	mov	r3, r0
 800abee:	a844      	add	r0, sp, #272	; 0x110
 800abf0:	2200      	movs	r2, #0
 800abf2:	f840 3d70 	str.w	r3, [r0, #-112]!
 800abf6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800abfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800abfe:	f00e fac9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ac02:	e789      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ac04:	4658      	mov	r0, fp
 800ac06:	f00e fab3 	bl	8019170 <GUI_ALLOC_LockH>
 800ac0a:	ab44      	add	r3, sp, #272	; 0x110
 800ac0c:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
 800ac10:	f843 0d94 	str.w	r0, [r3, #-148]!
 800ac14:	4618      	mov	r0, r3
 800ac16:	f00e fabd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	f43f af7c 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ac20:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800ac24:	e00b      	b.n	800ac3e <TREEVIEW_Callback+0x152>
 800ac26:	4603      	mov	r3, r0
 800ac28:	685d      	ldr	r5, [r3, #4]
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	f00e fab2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ac30:	4620      	mov	r0, r4
 800ac32:	f00e fbaf 	bl	8019394 <GUI_ALLOC_Free>
 800ac36:	2d00      	cmp	r5, #0
 800ac38:	f43f af6e 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ac3c:	462c      	mov	r4, r5
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f00e fa96 	bl	8019170 <GUI_ALLOC_LockH>
 800ac44:	6902      	ldr	r2, [r0, #16]
 800ac46:	9028      	str	r0, [sp, #160]	; 0xa0
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d0ec      	beq.n	800ac26 <TREEVIEW_Callback+0x13a>
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f00e fba1 	bl	8019394 <GUI_ALLOC_Free>
 800ac52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ac54:	e7e8      	b.n	800ac28 <TREEVIEW_Callback+0x13c>
 800ac56:	4658      	mov	r0, fp
 800ac58:	f00e fa8a 	bl	8019170 <GUI_ALLOC_LockH>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	900a      	str	r0, [sp, #40]	; 0x28
 800ac60:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800ac62:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800ac66:	f00d fa01 	bl	801806c <GUI_SetFont>
 800ac6a:	68e3      	ldr	r3, [r4, #12]
 800ac6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	6859      	ldr	r1, [r3, #4]
 800ac72:	ab14      	add	r3, sp, #80	; 0x50
 800ac74:	c303      	stmia	r3!, {r0, r1}
 800ac76:	f9b2 1000 	ldrsh.w	r1, [r2]
 800ac7a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ac7e:	4249      	negs	r1, r1
 800ac80:	4252      	negs	r2, r2
 800ac82:	a814      	add	r0, sp, #80	; 0x50
 800ac84:	f00d f8fa 	bl	8017e7c <GUI_MoveRect>
 800ac88:	a910      	add	r1, sp, #64	; 0x40
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f004 fd42 	bl	800f714 <WM_GetInsideRectExScrollbar>
 800ac90:	a814      	add	r0, sp, #80	; 0x50
 800ac92:	a910      	add	r1, sp, #64	; 0x40
 800ac94:	f00a ff0c 	bl	8015ab0 <GUI__IntersectRect>
 800ac98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800ac9e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800aca2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800aca4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800aca8:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 800acac:	951b      	str	r5, [sp, #108]	; 0x6c
 800acae:	1a89      	subs	r1, r1, r2
 800acb0:	3101      	adds	r1, #1
 800acb2:	1b12      	subs	r2, r2, r4
 800acb4:	4281      	cmp	r1, r0
 800acb6:	bfac      	ite	ge
 800acb8:	1851      	addge	r1, r2, r1
 800acba:	1811      	addlt	r1, r2, r0
 800acbc:	921a      	str	r2, [sp, #104]	; 0x68
 800acbe:	911c      	str	r1, [sp, #112]	; 0x70
 800acc0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800acc2:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800acc6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800acca:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800acce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800acd2:	900c      	str	r0, [sp, #48]	; 0x30
 800acd4:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800acd8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 800acdc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800ace0:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 800ace4:	2f00      	cmp	r7, #0
 800ace6:	f000 80d6 	beq.w	800ae96 <TREEVIEW_Callback+0x3aa>
 800acea:	2800      	cmp	r0, #0
 800acec:	f000 84df 	beq.w	800b6ae <TREEVIEW_Callback+0xbc2>
 800acf0:	3f01      	subs	r7, #1
 800acf2:	2500      	movs	r5, #0
 800acf4:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800acf8:	e00b      	b.n	800ad12 <TREEVIEW_Callback+0x226>
 800acfa:	4648      	mov	r0, r9
 800acfc:	f00e fa4a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ad00:	42bd      	cmp	r5, r7
 800ad02:	940c      	str	r4, [sp, #48]	; 0x30
 800ad04:	f000 80c8 	beq.w	800ae98 <TREEVIEW_Callback+0x3ac>
 800ad08:	3501      	adds	r5, #1
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	f000 8352 	beq.w	800b3b4 <TREEVIEW_Callback+0x8c8>
 800ad10:	4620      	mov	r0, r4
 800ad12:	f00e fa2d 	bl	8019170 <GUI_ALLOC_LockH>
 800ad16:	8b03      	ldrh	r3, [r0, #24]
 800ad18:	901f      	str	r0, [sp, #124]	; 0x7c
 800ad1a:	07d9      	lsls	r1, r3, #31
 800ad1c:	d510      	bpl.n	800ad40 <TREEVIEW_Callback+0x254>
 800ad1e:	079a      	lsls	r2, r3, #30
 800ad20:	d40e      	bmi.n	800ad40 <TREEVIEW_Callback+0x254>
 800ad22:	7f06      	ldrb	r6, [r0, #28]
 800ad24:	6844      	ldr	r4, [r0, #4]
 800ad26:	2c00      	cmp	r4, #0
 800ad28:	d0e7      	beq.n	800acfa <TREEVIEW_Callback+0x20e>
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f00e fa32 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f00e fa1d 	bl	8019170 <GUI_ALLOC_LockH>
 800ad36:	901f      	str	r0, [sp, #124]	; 0x7c
 800ad38:	7f03      	ldrb	r3, [r0, #28]
 800ad3a:	429e      	cmp	r6, r3
 800ad3c:	dbf2      	blt.n	800ad24 <TREEVIEW_Callback+0x238>
 800ad3e:	e7dc      	b.n	800acfa <TREEVIEW_Callback+0x20e>
 800ad40:	6844      	ldr	r4, [r0, #4]
 800ad42:	e7da      	b.n	800acfa <TREEVIEW_Callback+0x20e>
 800ad44:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800ad48:	f1b8 0f00 	cmp.w	r8, #0
 800ad4c:	f000 8493 	beq.w	800b676 <TREEVIEW_Callback+0xb8a>
 800ad50:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ad54:	4658      	mov	r0, fp
 800ad56:	b14b      	cbz	r3, 800ad6c <TREEVIEW_Callback+0x280>
 800ad58:	f004 ff50 	bl	800fbfc <WM_HasCaptured>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f000 839c 	beq.w	800b49a <TREEVIEW_Callback+0x9ae>
 800ad62:	4658      	mov	r0, fp
 800ad64:	2101      	movs	r1, #1
 800ad66:	f004 ff91 	bl	800fc8c <WM_NotifyParent>
 800ad6a:	e6d5      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ad6c:	2102      	movs	r1, #2
 800ad6e:	f004 ff8d 	bl	800fc8c <WM_NotifyParent>
 800ad72:	e6d1      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ad74:	4658      	mov	r0, fp
 800ad76:	f00e f9fb 	bl	8019170 <GUI_ALLOC_LockH>
 800ad7a:	9010      	str	r0, [sp, #64]	; 0x40
 800ad7c:	4658      	mov	r0, fp
 800ad7e:	68a5      	ldr	r5, [r4, #8]
 800ad80:	f004 fe48 	bl	800fa14 <WM_GetScrollbarV>
 800ad84:	4285      	cmp	r5, r0
 800ad86:	f000 8426 	beq.w	800b5d6 <TREEVIEW_Callback+0xaea>
 800ad8a:	4658      	mov	r0, fp
 800ad8c:	68a5      	ldr	r5, [r4, #8]
 800ad8e:	f004 fdf9 	bl	800f984 <WM_GetScrollbarH>
 800ad92:	4285      	cmp	r5, r0
 800ad94:	f000 848e 	beq.w	800b6b4 <TREEVIEW_Callback+0xbc8>
 800ad98:	a810      	add	r0, sp, #64	; 0x40
 800ad9a:	f00e f9fb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ad9e:	4658      	mov	r0, fp
 800ada0:	f006 fe70 	bl	8011a84 <WM_InvalidateWindow>
 800ada4:	4658      	mov	r0, fp
 800ada6:	210a      	movs	r1, #10
 800ada8:	f004 ff70 	bl	800fc8c <WM_NotifyParent>
 800adac:	e6b4      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800adae:	b90d      	cbnz	r5, 800adb4 <TREEVIEW_Callback+0x2c8>
 800adb0:	e6b2      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800adb2:	4605      	mov	r5, r0
 800adb4:	4628      	mov	r0, r5
 800adb6:	f7fe fd39 	bl	800982c <_GetNextVisibleItem>
 800adba:	4285      	cmp	r5, r0
 800adbc:	d1f9      	bne.n	800adb2 <TREEVIEW_Callback+0x2c6>
 800adbe:	4658      	mov	r0, fp
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7ff fa93 	bl	800a2ec <_SetSel>
 800adc6:	e6a7      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800adc8:	2d00      	cmp	r5, #0
 800adca:	f43f aea5 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800adce:	4628      	mov	r0, r5
 800add0:	f00e f9ce 	bl	8019170 <GUI_ALLOC_LockH>
 800add4:	ab44      	add	r3, sp, #272	; 0x110
 800add6:	8b04      	ldrh	r4, [r0, #24]
 800add8:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800addc:	4618      	mov	r0, r3
 800adde:	f00e f9d9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ade2:	07e6      	lsls	r6, r4, #31
 800ade4:	f57f ae98 	bpl.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ade8:	07a0      	lsls	r0, r4, #30
 800adea:	f140 849d 	bpl.w	800b728 <TREEVIEW_Callback+0xc3c>
 800adee:	4658      	mov	r0, fp
 800adf0:	f00e f9be 	bl	8019170 <GUI_ALLOC_LockH>
 800adf4:	901f      	str	r0, [sp, #124]	; 0x7c
 800adf6:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800adfa:	f00e f9b9 	bl	8019170 <GUI_ALLOC_LockH>
 800adfe:	6843      	ldr	r3, [r0, #4]
 800ae00:	9028      	str	r0, [sp, #160]	; 0xa0
 800ae02:	b12b      	cbz	r3, 800ae10 <TREEVIEW_Callback+0x324>
 800ae04:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ae06:	4658      	mov	r0, fp
 800ae08:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800ae0c:	f006 fe3a 	bl	8011a84 <WM_InvalidateWindow>
 800ae10:	a81f      	add	r0, sp, #124	; 0x7c
 800ae12:	f00e f9bf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ae16:	a828      	add	r0, sp, #160	; 0xa0
 800ae18:	f00e f9bc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ae1c:	4658      	mov	r0, fp
 800ae1e:	f7ff f9ef 	bl	800a200 <_UpdateScrollPos>
 800ae22:	e679      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae24:	2e00      	cmp	r6, #0
 800ae26:	f43f ae77 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ae2a:	4658      	mov	r0, fp
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	f7ff fa5d 	bl	800a2ec <_SetSel>
 800ae32:	e671      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae34:	2d00      	cmp	r5, #0
 800ae36:	f43f ae6f 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f7fe fcf6 	bl	800982c <_GetNextVisibleItem>
 800ae40:	4601      	mov	r1, r0
 800ae42:	4658      	mov	r0, fp
 800ae44:	f7ff fa52 	bl	800a2ec <_SetSel>
 800ae48:	e666      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	f43f ae64 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ae50:	4628      	mov	r0, r5
 800ae52:	f00e f98d 	bl	8019170 <GUI_ALLOC_LockH>
 800ae56:	ab44      	add	r3, sp, #272	; 0x110
 800ae58:	8b04      	ldrh	r4, [r0, #24]
 800ae5a:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f00e f998 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ae64:	07e1      	lsls	r1, r4, #31
 800ae66:	f140 84c3 	bpl.w	800b7f0 <TREEVIEW_Callback+0xd04>
 800ae6a:	07a2      	lsls	r2, r4, #30
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f140 8460 	bpl.w	800b732 <TREEVIEW_Callback+0xc46>
 800ae72:	f7ff fe07 	bl	800aa84 <TREEVIEW_ITEM_Collapse>
 800ae76:	e64f      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae78:	2d00      	cmp	r5, #0
 800ae7a:	f43f ae4d 	beq.w	800ab18 <TREEVIEW_Callback+0x2c>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f7fe fd18 	bl	80098b4 <_GetPrevVisibleItem>
 800ae84:	4601      	mov	r1, r0
 800ae86:	4658      	mov	r0, fp
 800ae88:	f7ff fa30 	bl	800a2ec <_SetSel>
 800ae8c:	e644      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f007 fb5e 	bl	8012550 <WM_DefaultProc>
 800ae94:	e640      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800ae96:	4604      	mov	r4, r0
 800ae98:	2c00      	cmp	r4, #0
 800ae9a:	f000 8440 	beq.w	800b71e <TREEVIEW_Callback+0xc32>
 800ae9e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800aea2:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800aea6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800aeaa:	b21b      	sxth	r3, r3
 800aeac:	429a      	cmp	r2, r3
 800aeae:	f2c0 83f9 	blt.w	800b6a4 <TREEVIEW_Callback+0xbb8>
 800aeb2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800aeb6:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800aeba:	f8cd c00c 	str.w	ip, [sp, #12]
 800aebe:	465e      	mov	r6, fp
 800aec0:	4645      	mov	r5, r8
 800aec2:	f8cd a014 	str.w	sl, [sp, #20]
 800aec6:	9803      	ldr	r0, [sp, #12]
 800aec8:	f00e f964 	bl	8019194 <GUI_ALLOC_UnlockH>
 800aecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aece:	930d      	str	r3, [sp, #52]	; 0x34
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	d067      	beq.n	800afa4 <TREEVIEW_Callback+0x4b8>
 800aed4:	221b      	movs	r2, #27
 800aed6:	ab0d      	add	r3, sp, #52	; 0x34
 800aed8:	961f      	str	r6, [sp, #124]	; 0x7c
 800aeda:	9220      	str	r2, [sp, #128]	; 0x80
 800aedc:	9327      	str	r3, [sp, #156]	; 0x9c
 800aede:	4648      	mov	r0, r9
 800aee0:	47a8      	blx	r5
 800aee2:	4604      	mov	r4, r0
 800aee4:	b287      	uxth	r7, r0
 800aee6:	4630      	mov	r0, r6
 800aee8:	f00e f942 	bl	8019170 <GUI_ALLOC_LockH>
 800aeec:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800aef0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800aef4:	900a      	str	r0, [sp, #40]	; 0x28
 800aef6:	1e4b      	subs	r3, r1, #1
 800aef8:	443b      	add	r3, r7
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	b219      	sxth	r1, r3
 800aefe:	428a      	cmp	r2, r1
 800af00:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800af04:	dd51      	ble.n	800afaa <TREEVIEW_Callback+0x4be>
 800af06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af08:	4423      	add	r3, r4
 800af0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800af0e:	f00e f92f 	bl	8019170 <GUI_ALLOC_LockH>
 800af12:	8b03      	ldrh	r3, [r0, #24]
 800af14:	901f      	str	r0, [sp, #124]	; 0x7c
 800af16:	07da      	lsls	r2, r3, #31
 800af18:	d53c      	bpl.n	800af94 <TREEVIEW_Callback+0x4a8>
 800af1a:	079f      	lsls	r7, r3, #30
 800af1c:	d43a      	bmi.n	800af94 <TREEVIEW_Callback+0x4a8>
 800af1e:	7f07      	ldrb	r7, [r0, #28]
 800af20:	6844      	ldr	r4, [r0, #4]
 800af22:	4648      	mov	r0, r9
 800af24:	b9fc      	cbnz	r4, 800af66 <TREEVIEW_Callback+0x47a>
 800af26:	f00e f935 	bl	8019194 <GUI_ALLOC_UnlockH>
 800af2a:	940c      	str	r4, [sp, #48]	; 0x30
 800af2c:	2000      	movs	r0, #0
 800af2e:	f004 ffd9 	bl	800fee4 <WM_SetUserClipRect>
 800af32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af34:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800af36:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800af3a:	4290      	cmp	r0, r2
 800af3c:	f000 8249 	beq.w	800b3d2 <TREEVIEW_Callback+0x8e6>
 800af40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af42:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800af46:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800af4a:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 800af4e:	f00a fcff 	bl	8015950 <LCD_SetBkColor>
 800af52:	a812      	add	r0, sp, #72	; 0x48
 800af54:	f00c fc8a 	bl	801786c <GUI_ClearRectEx>
 800af58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af5a:	f7fe fc09 	bl	8009770 <WIDGET__EFFECT_DrawDown>
 800af5e:	9803      	ldr	r0, [sp, #12]
 800af60:	f00e f918 	bl	8019194 <GUI_ALLOC_UnlockH>
 800af64:	e5d8      	b.n	800ab18 <TREEVIEW_Callback+0x2c>
 800af66:	f00e f915 	bl	8019194 <GUI_ALLOC_UnlockH>
 800af6a:	4620      	mov	r0, r4
 800af6c:	f00e f900 	bl	8019170 <GUI_ALLOC_LockH>
 800af70:	901f      	str	r0, [sp, #124]	; 0x7c
 800af72:	7f03      	ldrb	r3, [r0, #28]
 800af74:	429f      	cmp	r7, r3
 800af76:	dbd3      	blt.n	800af20 <TREEVIEW_Callback+0x434>
 800af78:	4648      	mov	r0, r9
 800af7a:	f00e f90b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800af7e:	940c      	str	r4, [sp, #48]	; 0x30
 800af80:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800af84:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800af88:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800af8c:	b21b      	sxth	r3, r3
 800af8e:	429a      	cmp	r2, r3
 800af90:	da99      	bge.n	800aec6 <TREEVIEW_Callback+0x3da>
 800af92:	e7cb      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800af94:	6844      	ldr	r4, [r0, #4]
 800af96:	4648      	mov	r0, r9
 800af98:	f00e f8fc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800af9c:	940c      	str	r4, [sp, #48]	; 0x30
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	d1ee      	bne.n	800af80 <TREEVIEW_Callback+0x494>
 800afa2:	e7c3      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800afa4:	462f      	mov	r7, r5
 800afa6:	462c      	mov	r4, r5
 800afa8:	e79d      	b.n	800aee6 <TREEVIEW_Callback+0x3fa>
 800afaa:	a812      	add	r0, sp, #72	; 0x48
 800afac:	f004 ff9a 	bl	800fee4 <WM_SetUserClipRect>
 800afb0:	a90c      	add	r1, sp, #48	; 0x30
 800afb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afb6:	911e      	str	r1, [sp, #120]	; 0x78
 800afb8:	4423      	add	r3, r4
 800afba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800afbc:	1e59      	subs	r1, r3, #1
 800afbe:	911d      	str	r1, [sp, #116]	; 0x74
 800afc0:	2a00      	cmp	r2, #0
 800afc2:	d0a2      	beq.n	800af0a <TREEVIEW_Callback+0x41e>
 800afc4:	f8df e8b0 	ldr.w	lr, [pc, #2224]	; 800b878 <TREEVIEW_Callback+0xd8c>
 800afc8:	9805      	ldr	r0, [sp, #20]
 800afca:	f8de 3000 	ldr.w	r3, [lr]
 800afce:	2100      	movs	r1, #0
 800afd0:	2270      	movs	r2, #112	; 0x70
 800afd2:	4798      	blx	r3
 800afd4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800afd6:	4638      	mov	r0, r7
 800afd8:	f00e f8ca 	bl	8019170 <GUI_ALLOC_LockH>
 800afdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afde:	900e      	str	r0, [sp, #56]	; 0x38
 800afe0:	f8d3 8000 	ldr.w	r8, [r3]
 800afe4:	4640      	mov	r0, r8
 800afe6:	f00e f8c3 	bl	8019170 <GUI_ALLOC_LockH>
 800afea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afec:	900f      	str	r0, [sp, #60]	; 0x3c
 800afee:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800aff2:	079b      	lsls	r3, r3, #30
 800aff4:	f100 80fe 	bmi.w	800b1f4 <TREEVIEW_Callback+0x708>
 800aff8:	4638      	mov	r0, r7
 800affa:	f003 fb5b 	bl	800e6b4 <WM__IsEnabled>
 800affe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b000:	2800      	cmp	r0, #0
 800b002:	f040 80ee 	bne.w	800b1e2 <TREEVIEW_Callback+0x6f6>
 800b006:	f04f 0c02 	mov.w	ip, #2
 800b00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00c:	932f      	str	r3, [sp, #188]	; 0xbc
 800b00e:	f8cd c008 	str.w	ip, [sp, #8]
 800b012:	f00c fed9 	bl	8017dc8 <GUI_GetFontSizeY>
 800b016:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01a:	f891 e01c 	ldrb.w	lr, [r1, #28]
 800b01e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b022:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 800b026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b02a:	fb0e 2202 	mla	r2, lr, r2, r2
 800b02e:	449b      	add	fp, r3
 800b030:	4493      	add	fp, r2
 800b032:	4682      	mov	sl, r0
 800b034:	fa1f fb8b 	uxth.w	fp, fp
 800b038:	f101 001d 	add.w	r0, r1, #29
 800b03c:	f8ad b0b0 	strh.w	fp, [sp, #176]	; 0xb0
 800b040:	f00c fa3a 	bl	80174b8 <GUI_GetStringDistX>
 800b044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b046:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b048:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b04c:	1aca      	subs	r2, r1, r3
 800b04e:	3201      	adds	r2, #1
 800b050:	ebca 0202 	rsb	r2, sl, r2
 800b054:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800b058:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b05a:	eb03 0262 	add.w	r2, r3, r2, asr #1
 800b05e:	b292      	uxth	r2, r2
 800b060:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b064:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b068:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 800b06c:	4458      	add	r0, fp
 800b06e:	4492      	add	sl, r2
 800b070:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 800b074:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 800b078:	f8ad a0b6 	strh.w	sl, [sp, #182]	; 0xb6
 800b07c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800b07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b080:	9129      	str	r1, [sp, #164]	; 0xa4
 800b082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b084:	932a      	str	r3, [sp, #168]	; 0xa8
 800b086:	321d      	adds	r2, #29
 800b088:	4638      	mov	r0, r7
 800b08a:	9230      	str	r2, [sp, #192]	; 0xc0
 800b08c:	f003 fb12 	bl	800e6b4 <WM__IsEnabled>
 800b090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b092:	2800      	cmp	r0, #0
 800b094:	f040 8096 	bne.w	800b1c4 <TREEVIEW_Callback+0x6d8>
 800b098:	2102      	movs	r1, #2
 800b09a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b09c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b0a0:	f8b2 a018 	ldrh.w	sl, [r2, #24]
 800b0a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800b0a6:	9128      	str	r1, [sp, #160]	; 0xa0
 800b0a8:	f01a 0a01 	ands.w	sl, sl, #1
 800b0ac:	d004      	beq.n	800b0b8 <TREEVIEW_Callback+0x5cc>
 800b0ae:	6850      	ldr	r0, [r2, #4]
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f040 8190 	bne.w	800b3d6 <TREEVIEW_Callback+0x8ea>
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800b0bc:	07d2      	lsls	r2, r2, #31
 800b0be:	f140 80a6 	bpl.w	800b20e <TREEVIEW_Callback+0x722>
 800b0c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b0c8:	f891 801c 	ldrb.w	r8, [r1, #28]
 800b0cc:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b0ce:	fb08 0002 	mla	r0, r8, r2, r0
 800b0d2:	f100 38ff 	add.w	r8, r0, #4294967295
 800b0d6:	6908      	ldr	r0, [r1, #16]
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	f040 816e 	bne.w	800b3ba <TREEVIEW_Callback+0x8ce>
 800b0de:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800b0e2:	8b09      	ldrh	r1, [r1, #24]
 800b0e4:	07c8      	lsls	r0, r1, #31
 800b0e6:	d561      	bpl.n	800b1ac <TREEVIEW_Callback+0x6c0>
 800b0e8:	f001 0102 	and.w	r1, r1, #2
 800b0ec:	b289      	uxth	r1, r1
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	f000 8157 	beq.w	800b3a2 <TREEVIEW_Callback+0x8b6>
 800b0f4:	f1ba 0f00 	cmp.w	sl, #0
 800b0f8:	f000 814b 	beq.w	800b392 <TREEVIEW_Callback+0x8a6>
 800b0fc:	f04f 0b04 	mov.w	fp, #4
 800b100:	2101      	movs	r1, #1
 800b102:	f8cd b010 	str.w	fp, [sp, #16]
 800b106:	468c      	mov	ip, r1
 800b108:	46de      	mov	lr, fp
 800b10a:	46da      	mov	sl, fp
 800b10c:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800b110:	eb02 7bd2 	add.w	fp, r2, r2, lsr #31
 800b114:	fa1f f888 	uxth.w	r8, r8
 800b118:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 800b11c:	9040      	str	r0, [sp, #256]	; 0x100
 800b11e:	eb08 0a6b 	add.w	sl, r8, fp, asr #1
 800b122:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b126:	f88d e10c 	strb.w	lr, [sp, #268]	; 0x10c
 800b12a:	f8ad a108 	strh.w	sl, [sp, #264]	; 0x108
 800b12e:	f857 000b 	ldr.w	r0, [r7, fp]
 800b132:	2800      	cmp	r0, #0
 800b134:	f000 81ad 	beq.w	800b492 <TREEVIEW_Callback+0x9a6>
 800b138:	4490      	add	r8, r2
 800b13a:	f8ad 810a 	strh.w	r8, [sp, #266]	; 0x10a
 800b13e:	9041      	str	r0, [sp, #260]	; 0x104
 800b140:	f88d 110d 	strb.w	r1, [sp, #269]	; 0x10d
 800b144:	a80e      	add	r0, sp, #56	; 0x38
 800b146:	f00e f825 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b14a:	a80f      	add	r0, sp, #60	; 0x3c
 800b14c:	f00e f822 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b150:	9b05      	ldr	r3, [sp, #20]
 800b152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b154:	931e      	str	r3, [sp, #120]	; 0x78
 800b156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b15a:	932e      	str	r3, [sp, #184]	; 0xb8
 800b15c:	af16      	add	r7, sp, #88	; 0x58
 800b15e:	2305      	movs	r3, #5
 800b160:	9317      	str	r3, [sp, #92]	; 0x5c
 800b162:	4638      	mov	r0, r7
 800b164:	4790      	blx	r2
 800b166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b168:	2212      	movs	r2, #18
 800b16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b16e:	4638      	mov	r0, r7
 800b170:	4798      	blx	r3
 800b172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b174:	2214      	movs	r2, #20
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	9217      	str	r2, [sp, #92]	; 0x5c
 800b17a:	4638      	mov	r0, r7
 800b17c:	4798      	blx	r3
 800b17e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800b180:	2206      	movs	r2, #6
 800b182:	9217      	str	r2, [sp, #92]	; 0x5c
 800b184:	b133      	cbz	r3, 800b194 <TREEVIEW_Callback+0x6a8>
 800b186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b188:	f89d 210c 	ldrb.w	r2, [sp, #268]	; 0x10c
 800b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18e:	9218      	str	r2, [sp, #96]	; 0x60
 800b190:	4638      	mov	r0, r7
 800b192:	4798      	blx	r3
 800b194:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b196:	2b00      	cmp	r3, #0
 800b198:	f43f aeb5 	beq.w	800af06 <TREEVIEW_Callback+0x41a>
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	9218      	str	r2, [sp, #96]	; 0x60
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	4798      	blx	r3
 800b1aa:	e6ac      	b.n	800af06 <TREEVIEW_Callback+0x41a>
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	f000 81ce 	beq.w	800b550 <TREEVIEW_Callback+0xa64>
 800b1b4:	4442      	add	r2, r8
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	f8ad 210a 	strh.w	r2, [sp, #266]	; 0x10a
 800b1bc:	9141      	str	r1, [sp, #260]	; 0x104
 800b1be:	f88d 310d 	strb.w	r3, [sp, #269]	; 0x10d
 800b1c2:	e7bf      	b.n	800b144 <TREEVIEW_Callback+0x658>
 800b1c4:	f8b3 109c 	ldrh.w	r1, [r3, #156]	; 0x9c
 800b1c8:	f001 0102 	and.w	r1, r1, #2
 800b1cc:	b289      	uxth	r1, r1
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	f43f af63 	beq.w	800b09a <TREEVIEW_Callback+0x5ae>
 800b1d4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800b1d8:	ebb8 0001 	subs.w	r0, r8, r1
 800b1dc:	4241      	negs	r1, r0
 800b1de:	4141      	adcs	r1, r0
 800b1e0:	e75b      	b.n	800b09a <TREEVIEW_Callback+0x5ae>
 800b1e2:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800b1e6:	ebb8 0e01 	subs.w	lr, r8, r1
 800b1ea:	f1de 0c00 	rsbs	ip, lr, #0
 800b1ee:	eb5c 0c0e 	adcs.w	ip, ip, lr
 800b1f2:	e70a      	b.n	800b00a <TREEVIEW_Callback+0x51e>
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f003 fa5d 	bl	800e6b4 <WM__IsEnabled>
 800b1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f040 80fc 	bne.w	800b3fa <TREEVIEW_Callback+0x90e>
 800b202:	2302      	movs	r3, #2
 800b204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b20c:	e6f4      	b.n	800aff8 <TREEVIEW_Callback+0x50c>
 800b20e:	4638      	mov	r0, r7
 800b210:	f003 fa50 	bl	800e6b4 <WM__IsEnabled>
 800b214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b216:	2800      	cmp	r0, #0
 800b218:	f040 812a 	bne.w	800b470 <TREEVIEW_Callback+0x984>
 800b21c:	2202      	movs	r2, #2
 800b21e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b222:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b224:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b226:	922b      	str	r2, [sp, #172]	; 0xac
 800b228:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b22a:	9206      	str	r2, [sp, #24]
 800b22c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b22e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b230:	f8dd e018 	ldr.w	lr, [sp, #24]
 800b234:	9204      	str	r2, [sp, #16]
 800b236:	44be      	add	lr, r7
 800b238:	9709      	str	r7, [sp, #36]	; 0x24
 800b23a:	7f08      	ldrb	r0, [r1, #28]
 800b23c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b240:	9f04      	ldr	r7, [sp, #16]
 800b242:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 800b246:	fb02 7b00 	mla	fp, r2, r0, r7
 800b24a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b24e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 800b252:	2800      	cmp	r0, #0
 800b254:	f000 80e2 	beq.w	800b41c <TREEVIEW_Callback+0x930>
 800b258:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800b25c:	ea4f 78d2 	mov.w	r8, r2, lsr #31
 800b260:	af44      	add	r7, sp, #272	; 0x110
 800b262:	f8cd 8020 	str.w	r8, [sp, #32]
 800b266:	4490      	add	r8, r2
 800b268:	eb07 0c40 	add.w	ip, r7, r0, lsl #1
 800b26c:	ebab 0868 	sub.w	r8, fp, r8, asr #1
 800b270:	fa1f f888 	uxth.w	r8, r8
 800b274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b276:	f82c 8c3e 	strh.w	r8, [ip, #-62]
 800b27a:	f82c 8c4a 	strh.w	r8, [ip, #-74]
 800b27e:	f82c 7c44 	strh.w	r7, [ip, #-68]
 800b282:	8b0f      	ldrh	r7, [r1, #24]
 800b284:	f8cd c01c 	str.w	ip, [sp, #28]
 800b288:	077f      	lsls	r7, r7, #29
 800b28a:	bf58      	it	pl
 800b28c:	f8dd c018 	ldrpl.w	ip, [sp, #24]
 800b290:	fa1f fe8e 	uxth.w	lr, lr
 800b294:	f8cd e01c 	str.w	lr, [sp, #28]
 800b298:	bf58      	it	pl
 800b29a:	fa1f fe8c 	uxthpl.w	lr, ip
 800b29e:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 800b2a2:	1c47      	adds	r7, r0, #1
 800b2a4:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800b2a8:	b2ff      	uxtb	r7, r7
 800b2aa:	f82c ec38 	strh.w	lr, [ip, #-56]
 800b2ae:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 800b2b2:	f8b1 e018 	ldrh.w	lr, [r1, #24]
 800b2b6:	f01e 0f01 	tst.w	lr, #1
 800b2ba:	f000 813f 	beq.w	800b53c <TREEVIEW_Callback+0xa50>
 800b2be:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b2c2:	4494      	add	ip, r2
 800b2c4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800b2c8:	44e3      	add	fp, ip
 800b2ca:	f1ba 0f00 	cmp.w	sl, #0
 800b2ce:	f000 81ce 	beq.w	800b66e <TREEVIEW_Callback+0xb82>
 800b2d2:	f01e 0f02 	tst.w	lr, #2
 800b2d6:	f000 8138 	beq.w	800b54a <TREEVIEW_Callback+0xa5e>
 800b2da:	3002      	adds	r0, #2
 800b2dc:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800b2e0:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800b2e4:	9009      	str	r0, [sp, #36]	; 0x24
 800b2e6:	f8cd e004 	str.w	lr, [sp, #4]
 800b2ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ec:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800b2f0:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800b2f4:	b2c7      	uxtb	r7, r0
 800b2f6:	9807      	ldr	r0, [sp, #28]
 800b2f8:	f82e 0c44 	strh.w	r0, [lr, #-68]
 800b2fc:	fa1f fb8b 	uxth.w	fp, fp
 800b300:	9801      	ldr	r0, [sp, #4]
 800b302:	f82e bc3e 	strh.w	fp, [lr, #-62]
 800b306:	f82e bc4a 	strh.w	fp, [lr, #-74]
 800b30a:	f8cd e020 	str.w	lr, [sp, #32]
 800b30e:	f8dd e018 	ldr.w	lr, [sp, #24]
 800b312:	f820 ec38 	strh.w	lr, [r0, #-56]
 800b316:	a844      	add	r0, sp, #272	; 0x110
 800b318:	eb00 0e47 	add.w	lr, r0, r7, lsl #1
 800b31c:	9807      	ldr	r0, [sp, #28]
 800b31e:	f82e 0c38 	strh.w	r0, [lr, #-56]
 800b322:	f8cd e018 	str.w	lr, [sp, #24]
 800b326:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800b32a:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 800b32e:	f8cd e020 	str.w	lr, [sp, #32]
 800b332:	f82e 0c44 	strh.w	r0, [lr, #-68]
 800b336:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 800b33a:	eb0e 0047 	add.w	r0, lr, r7, lsl #1
 800b33e:	3701      	adds	r7, #1
 800b340:	f820 8c4a 	strh.w	r8, [r0, #-74]
 800b344:	f820 bc3e 	strh.w	fp, [r0, #-62]
 800b348:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 800b34c:	9f04      	ldr	r7, [sp, #16]
 800b34e:	8b48      	ldrh	r0, [r1, #26]
 800b350:	4467      	add	r7, ip
 800b352:	3f01      	subs	r7, #1
 800b354:	2800      	cmp	r0, #0
 800b356:	f000 8083 	beq.w	800b460 <TREEVIEW_Callback+0x974>
 800b35a:	f89d e0de 	ldrb.w	lr, [sp, #222]	; 0xde
 800b35e:	f010 0f01 	tst.w	r0, #1
 800b362:	d009      	beq.n	800b378 <TREEVIEW_Callback+0x88c>
 800b364:	f50d 7888 	add.w	r8, sp, #272	; 0x110
 800b368:	eb08 0c4e 	add.w	ip, r8, lr, lsl #1
 800b36c:	f10e 0e01 	add.w	lr, lr, #1
 800b370:	f82c 7c30 	strh.w	r7, [ip, #-48]
 800b374:	fa5f fe8e 	uxtb.w	lr, lr
 800b378:	0840      	lsrs	r0, r0, #1
 800b37a:	4417      	add	r7, r2
 800b37c:	d1ef      	bne.n	800b35e <TREEVIEW_Callback+0x872>
 800b37e:	f88d e0de 	strb.w	lr, [sp, #222]	; 0xde
 800b382:	f891 801c 	ldrb.w	r8, [r1, #28]
 800b386:	9804      	ldr	r0, [sp, #16]
 800b388:	fb08 0802 	mla	r8, r8, r2, r0
 800b38c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b390:	e6a1      	b.n	800b0d6 <TREEVIEW_Callback+0x5ea>
 800b392:	4651      	mov	r1, sl
 800b394:	fa1f f888 	uxth.w	r8, r8
 800b398:	f8cd a010 	str.w	sl, [sp, #16]
 800b39c:	46d4      	mov	ip, sl
 800b39e:	46d3      	mov	fp, sl
 800b3a0:	e6c5      	b.n	800b12e <TREEVIEW_Callback+0x642>
 800b3a2:	f1ba 0f00 	cmp.w	sl, #0
 800b3a6:	d0f4      	beq.n	800b392 <TREEVIEW_Callback+0x8a6>
 800b3a8:	f04f 0e03 	mov.w	lr, #3
 800b3ac:	9104      	str	r1, [sp, #16]
 800b3ae:	468c      	mov	ip, r1
 800b3b0:	46f2      	mov	sl, lr
 800b3b2:	e6ab      	b.n	800b10c <TREEVIEW_Callback+0x620>
 800b3b4:	af0a      	add	r7, sp, #40	; 0x28
 800b3b6:	9703      	str	r7, [sp, #12]
 800b3b8:	e5b8      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800b3ba:	f00d fed9 	bl	8019170 <GUI_ALLOC_LockH>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	4648      	mov	r0, r9
 800b3c2:	971f      	str	r7, [sp, #124]	; 0x7c
 800b3c4:	f00d fee6 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b3d0:	e687      	b.n	800b0e2 <TREEVIEW_Callback+0x5f6>
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	e5c1      	b.n	800af5a <TREEVIEW_Callback+0x46e>
 800b3d6:	f00d fecb 	bl	8019170 <GUI_ALLOC_LockH>
 800b3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3dc:	901f      	str	r0, [sp, #124]	; 0x7c
 800b3de:	f890 a01c 	ldrb.w	sl, [r0, #28]
 800b3e2:	7f1b      	ldrb	r3, [r3, #28]
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	459a      	cmp	sl, r3
 800b3e8:	bf94      	ite	ls
 800b3ea:	f04f 0a00 	movls.w	sl, #0
 800b3ee:	f04f 0a01 	movhi.w	sl, #1
 800b3f2:	f00d fecf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f8:	e65e      	b.n	800b0b8 <TREEVIEW_Callback+0x5cc>
 800b3fa:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 800b3fe:	f003 0302 	and.w	r3, r3, #2
 800b402:	b29b      	uxth	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	f43f aefd 	beq.w	800b204 <TREEVIEW_Callback+0x718>
 800b40a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800b40e:	ebb8 0c03 	subs.w	ip, r8, r3
 800b412:	f1dc 0300 	rsbs	r3, ip, #0
 800b416:	eb53 030c 	adcs.w	r3, r3, ip
 800b41a:	e6f3      	b.n	800b204 <TREEVIEW_Callback+0x718>
 800b41c:	8b08      	ldrh	r0, [r1, #24]
 800b41e:	f000 0003 	and.w	r0, r0, #3
 800b422:	2803      	cmp	r0, #3
 800b424:	f040 8088 	bne.w	800b538 <TREEVIEW_Callback+0xa4c>
 800b428:	f1ba 0f00 	cmp.w	sl, #0
 800b42c:	f000 8084 	beq.w	800b538 <TREEVIEW_Callback+0xa4c>
 800b430:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800b434:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b438:	eb02 77d2 	add.w	r7, r2, r2, lsr #31
 800b43c:	eb0b 0767 	add.w	r7, fp, r7, asr #1
 800b440:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b444:	eb0b 0840 	add.w	r8, fp, r0, lsl #1
 800b448:	b2bf      	uxth	r7, r7
 800b44a:	3001      	adds	r0, #1
 800b44c:	f828 7c3e 	strh.w	r7, [r8, #-62]
 800b450:	f828 7c4a 	strh.w	r7, [r8, #-74]
 800b454:	f828 ec44 	strh.w	lr, [r8, #-68]
 800b458:	f828 cc38 	strh.w	ip, [r8, #-56]
 800b45c:	f88d 00c4 	strb.w	r0, [sp, #196]	; 0xc4
 800b460:	f891 801c 	ldrb.w	r8, [r1, #28]
 800b464:	9804      	ldr	r0, [sp, #16]
 800b466:	fb08 0802 	mla	r8, r8, r2, r0
 800b46a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b46e:	e632      	b.n	800b0d6 <TREEVIEW_Callback+0x5ea>
 800b470:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800b474:	f002 0202 	and.w	r2, r2, #2
 800b478:	b292      	uxth	r2, r2
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	f43f aecf 	beq.w	800b21e <TREEVIEW_Callback+0x732>
 800b480:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b484:	ebb8 0e02 	subs.w	lr, r8, r2
 800b488:	f1de 0200 	rsbs	r2, lr, #0
 800b48c:	eb52 020e 	adcs.w	r2, r2, lr
 800b490:	e6c5      	b.n	800b21e <TREEVIEW_Callback+0x732>
 800b492:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b496:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b498:	e64e      	b.n	800b138 <TREEVIEW_Callback+0x64c>
 800b49a:	2101      	movs	r1, #1
 800b49c:	4658      	mov	r0, fp
 800b49e:	f003 fbf7 	bl	800ec90 <WM_SetCapture>
 800b4a2:	af44      	add	r7, sp, #272	; 0x110
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800b4aa:	f00d fe61 	bl	8019170 <GUI_ALLOC_LockH>
 800b4ae:	9703      	str	r7, [sp, #12]
 800b4b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b4b4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b4b6:	f84c 0db8 	str.w	r0, [ip, #-184]!
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4660      	mov	r0, ip
 800b4be:	f8cd c00c 	str.w	ip, [sp, #12]
 800b4c2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800b4c4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800b4c8:	1e7c      	subs	r4, r7, #1
 800b4ca:	f00d fe63 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b4ce:	2f00      	cmp	r7, #0
 800b4d0:	d041      	beq.n	800b556 <TREEVIEW_Callback+0xa6a>
 800b4d2:	b186      	cbz	r6, 800b4f6 <TREEVIEW_Callback+0xa0a>
 800b4d4:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f00d fe49 	bl	8019170 <GUI_ALLOC_LockH>
 800b4de:	8b03      	ldrh	r3, [r0, #24]
 800b4e0:	9028      	str	r0, [sp, #160]	; 0xa0
 800b4e2:	07de      	lsls	r6, r3, #31
 800b4e4:	d520      	bpl.n	800b528 <TREEVIEW_Callback+0xa3c>
 800b4e6:	0799      	lsls	r1, r3, #30
 800b4e8:	d41e      	bmi.n	800b528 <TREEVIEW_Callback+0xa3c>
 800b4ea:	7f07      	ldrb	r7, [r0, #28]
 800b4ec:	6846      	ldr	r6, [r0, #4]
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	b95e      	cbnz	r6, 800b50a <TREEVIEW_Callback+0xa1e>
 800b4f2:	f00d fe4f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b4f6:	4658      	mov	r0, fp
 800b4f8:	f00d fe3a 	bl	8019170 <GUI_ALLOC_LockH>
 800b4fc:	ab44      	add	r3, sp, #272	; 0x110
 800b4fe:	f843 0dc0 	str.w	r0, [r3, #-192]!
 800b502:	4618      	mov	r0, r3
 800b504:	f00d fe46 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b508:	e42b      	b.n	800ad62 <TREEVIEW_Callback+0x276>
 800b50a:	f00d fe43 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b50e:	4630      	mov	r0, r6
 800b510:	f00d fe2e 	bl	8019170 <GUI_ALLOC_LockH>
 800b514:	9028      	str	r0, [sp, #160]	; 0xa0
 800b516:	7f03      	ldrb	r3, [r0, #28]
 800b518:	429f      	cmp	r7, r3
 800b51a:	dbe7      	blt.n	800b4ec <TREEVIEW_Callback+0xa00>
 800b51c:	4650      	mov	r0, sl
 800b51e:	f00d fe39 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b522:	b1d4      	cbz	r4, 800b55a <TREEVIEW_Callback+0xa6e>
 800b524:	3c01      	subs	r4, #1
 800b526:	e7d7      	b.n	800b4d8 <TREEVIEW_Callback+0x9ec>
 800b528:	6846      	ldr	r6, [r0, #4]
 800b52a:	4650      	mov	r0, sl
 800b52c:	f00d fe32 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b530:	b18c      	cbz	r4, 800b556 <TREEVIEW_Callback+0xa6a>
 800b532:	2e00      	cmp	r6, #0
 800b534:	d1f6      	bne.n	800b524 <TREEVIEW_Callback+0xa38>
 800b536:	e7de      	b.n	800b4f6 <TREEVIEW_Callback+0xa0a>
 800b538:	46d8      	mov	r8, fp
 800b53a:	e5cc      	b.n	800b0d6 <TREEVIEW_Callback+0x5ea>
 800b53c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b540:	1e50      	subs	r0, r2, #1
 800b542:	4496      	add	lr, r2
 800b544:	4483      	add	fp, r0
 800b546:	ea4f 0c6e 	mov.w	ip, lr, asr #1
 800b54a:	fa1f fb8b 	uxth.w	fp, fp
 800b54e:	e6e2      	b.n	800b316 <TREEVIEW_Callback+0x82a>
 800b550:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800b554:	e62e      	b.n	800b1b4 <TREEVIEW_Callback+0x6c8>
 800b556:	2e00      	cmp	r6, #0
 800b558:	d0cd      	beq.n	800b4f6 <TREEVIEW_Callback+0xa0a>
 800b55a:	2400      	movs	r4, #0
 800b55c:	961f      	str	r6, [sp, #124]	; 0x7c
 800b55e:	2d00      	cmp	r5, #0
 800b560:	d033      	beq.n	800b5ca <TREEVIEW_Callback+0xade>
 800b562:	201b      	movs	r0, #27
 800b564:	a91f      	add	r1, sp, #124	; 0x7c
 800b566:	9029      	str	r0, [sp, #164]	; 0xa4
 800b568:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 800b56c:	9130      	str	r1, [sp, #192]	; 0xc0
 800b56e:	a828      	add	r0, sp, #160	; 0xa0
 800b570:	47a8      	blx	r5
 800b572:	45a1      	cmp	r9, r4
 800b574:	4404      	add	r4, r0
 800b576:	db01      	blt.n	800b57c <TREEVIEW_Callback+0xa90>
 800b578:	45a1      	cmp	r9, r4
 800b57a:	dd35      	ble.n	800b5e8 <TREEVIEW_Callback+0xafc>
 800b57c:	4630      	mov	r0, r6
 800b57e:	f00d fdf7 	bl	8019170 <GUI_ALLOC_LockH>
 800b582:	8b03      	ldrh	r3, [r0, #24]
 800b584:	9028      	str	r0, [sp, #160]	; 0xa0
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d518      	bpl.n	800b5bc <TREEVIEW_Callback+0xad0>
 800b58a:	079b      	lsls	r3, r3, #30
 800b58c:	d416      	bmi.n	800b5bc <TREEVIEW_Callback+0xad0>
 800b58e:	4603      	mov	r3, r0
 800b590:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800b594:	685e      	ldr	r6, [r3, #4]
 800b596:	7f07      	ldrb	r7, [r0, #28]
 800b598:	4650      	mov	r0, sl
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	d0a9      	beq.n	800b4f2 <TREEVIEW_Callback+0xa06>
 800b59e:	f00d fdf9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f00d fde4 	bl	8019170 <GUI_ALLOC_LockH>
 800b5a8:	9028      	str	r0, [sp, #160]	; 0xa0
 800b5aa:	7f02      	ldrb	r2, [r0, #28]
 800b5ac:	4297      	cmp	r7, r2
 800b5ae:	da0e      	bge.n	800b5ce <TREEVIEW_Callback+0xae2>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	685e      	ldr	r6, [r3, #4]
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	d09b      	beq.n	800b4f2 <TREEVIEW_Callback+0xa06>
 800b5ba:	e7f0      	b.n	800b59e <TREEVIEW_Callback+0xab2>
 800b5bc:	6846      	ldr	r6, [r0, #4]
 800b5be:	a828      	add	r0, sp, #160	; 0xa0
 800b5c0:	f00d fde8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b5c4:	2e00      	cmp	r6, #0
 800b5c6:	d1c9      	bne.n	800b55c <TREEVIEW_Callback+0xa70>
 800b5c8:	e795      	b.n	800b4f6 <TREEVIEW_Callback+0xa0a>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	e7d1      	b.n	800b572 <TREEVIEW_Callback+0xa86>
 800b5ce:	4650      	mov	r0, sl
 800b5d0:	f00d fde0 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b5d4:	e7c2      	b.n	800b55c <TREEVIEW_Callback+0xa70>
 800b5d6:	68a0      	ldr	r0, [r4, #8]
 800b5d8:	a928      	add	r1, sp, #160	; 0xa0
 800b5da:	f004 faef 	bl	800fbbc <WM_GetScrollState>
 800b5de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b5e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5e4:	f7ff bbd8 	b.w	800ad98 <TREEVIEW_Callback+0x2ac>
 800b5e8:	4658      	mov	r0, fp
 800b5ea:	f00d fdc1 	bl	8019170 <GUI_ALLOC_LockH>
 800b5ee:	9014      	str	r0, [sp, #80]	; 0x50
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f00d fdbd 	bl	8019170 <GUI_ALLOC_LockH>
 800b5f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5f8:	9016      	str	r0, [sp, #88]	; 0x58
 800b5fa:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800b5fc:	f8d8 5000 	ldr.w	r5, [r8]
 800b600:	7f03      	ldrb	r3, [r0, #28]
 800b602:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 800b606:	f9b2 70c0 	ldrsh.w	r7, [r2, #192]	; 0xc0
 800b60a:	4429      	add	r1, r5
 800b60c:	fb04 f303 	mul.w	r3, r4, r3
 800b610:	1bc9      	subs	r1, r1, r7
 800b612:	428b      	cmp	r3, r1
 800b614:	dc05      	bgt.n	800b622 <TREEVIEW_Callback+0xb36>
 800b616:	18e5      	adds	r5, r4, r3
 800b618:	428d      	cmp	r5, r1
 800b61a:	dd02      	ble.n	800b622 <TREEVIEW_Callback+0xb36>
 800b61c:	8b05      	ldrh	r5, [r0, #24]
 800b61e:	07ef      	lsls	r7, r5, #31
 800b620:	d451      	bmi.n	800b6c6 <TREEVIEW_Callback+0xbda>
 800b622:	f8b2 109c 	ldrh.w	r1, [r2, #156]	; 0x9c
 800b626:	0789      	lsls	r1, r1, #30
 800b628:	d533      	bpl.n	800b692 <TREEVIEW_Callback+0xba6>
 800b62a:	4658      	mov	r0, fp
 800b62c:	a928      	add	r1, sp, #160	; 0xa0
 800b62e:	f004 f871 	bl	800f714 <WM_GetInsideRectExScrollbar>
 800b632:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	; 0xa0
 800b636:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
 800b63a:	f8d8 2000 	ldr.w	r2, [r8]
 800b63e:	42a2      	cmp	r2, r4
 800b640:	db1f      	blt.n	800b682 <TREEVIEW_Callback+0xb96>
 800b642:	4282      	cmp	r2, r0
 800b644:	dc1d      	bgt.n	800b682 <TREEVIEW_Callback+0xb96>
 800b646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b648:	f8d2 40ac 	ldr.w	r4, [r2, #172]	; 0xac
 800b64c:	2c00      	cmp	r4, #0
 800b64e:	d047      	beq.n	800b6e0 <TREEVIEW_Callback+0xbf4>
 800b650:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b652:	9803      	ldr	r0, [sp, #12]
 800b654:	8b14      	ldrh	r4, [r2, #24]
 800b656:	f00d fd9d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b65a:	a814      	add	r0, sp, #80	; 0x50
 800b65c:	f00d fd9a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b660:	07a7      	lsls	r7, r4, #30
 800b662:	4630      	mov	r0, r6
 800b664:	d538      	bpl.n	800b6d8 <TREEVIEW_Callback+0xbec>
 800b666:	f7fe faad 	bl	8009bc4 <_CollapseItem>
 800b66a:	f7ff bb7a 	b.w	800ad62 <TREEVIEW_Callback+0x276>
 800b66e:	44e3      	add	fp, ip
 800b670:	fa1f fb8b 	uxth.w	fp, fp
 800b674:	e64f      	b.n	800b316 <TREEVIEW_Callback+0x82a>
 800b676:	4658      	mov	r0, fp
 800b678:	2103      	movs	r1, #3
 800b67a:	f004 fb07 	bl	800fc8c <WM_NotifyParent>
 800b67e:	f7ff ba4b 	b.w	800ab18 <TREEVIEW_Callback+0x2c>
 800b682:	9803      	ldr	r0, [sp, #12]
 800b684:	f00d fd86 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b688:	a814      	add	r0, sp, #80	; 0x50
 800b68a:	f00d fd83 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b68e:	f7ff bb68 	b.w	800ad62 <TREEVIEW_Callback+0x276>
 800b692:	301d      	adds	r0, #29
 800b694:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
 800b698:	441c      	add	r4, r3
 800b69a:	f00b ff0d 	bl	80174b8 <GUI_GetStringDistX>
 800b69e:	4425      	add	r5, r4
 800b6a0:	4428      	add	r0, r5
 800b6a2:	e7ca      	b.n	800b63a <TREEVIEW_Callback+0xb4e>
 800b6a4:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800b6a8:	f8cd b00c 	str.w	fp, [sp, #12]
 800b6ac:	e43e      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800b6ae:	ab0a      	add	r3, sp, #40	; 0x28
 800b6b0:	9303      	str	r3, [sp, #12]
 800b6b2:	e43b      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800b6b4:	68a0      	ldr	r0, [r4, #8]
 800b6b6:	a928      	add	r1, sp, #160	; 0xa0
 800b6b8:	f004 fa80 	bl	800fbbc <WM_GetScrollState>
 800b6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b6c0:	649a      	str	r2, [r3, #72]	; 0x48
 800b6c2:	f7ff bb69 	b.w	800ad98 <TREEVIEW_Callback+0x2ac>
 800b6c6:	9803      	ldr	r0, [sp, #12]
 800b6c8:	f00d fd64 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b6cc:	a814      	add	r0, sp, #80	; 0x50
 800b6ce:	f00d fd61 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b6d2:	07ac      	lsls	r4, r5, #30
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	d4c6      	bmi.n	800b666 <TREEVIEW_Callback+0xb7a>
 800b6d8:	f7fe fa9e 	bl	8009c18 <_ExpandItem>
 800b6dc:	f7ff bb41 	b.w	800ad62 <TREEVIEW_Callback+0x276>
 800b6e0:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
 800b6e4:	4658      	mov	r0, fp
 800b6e6:	f006 f9cd 	bl	8011a84 <WM_InvalidateWindow>
 800b6ea:	9803      	ldr	r0, [sp, #12]
 800b6ec:	f00d fd52 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b6f0:	a814      	add	r0, sp, #80	; 0x50
 800b6f2:	f00d fd4f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4623      	mov	r3, r4
 800b6fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b6fe:	4658      	mov	r0, fp
 800b700:	f003 f948 	bl	800e994 <WM_CreateTimer>
 800b704:	4604      	mov	r4, r0
 800b706:	4658      	mov	r0, fp
 800b708:	f00d fd32 	bl	8019170 <GUI_ALLOC_LockH>
 800b70c:	4603      	mov	r3, r0
 800b70e:	9014      	str	r0, [sp, #80]	; 0x50
 800b710:	a814      	add	r0, sp, #80	; 0x50
 800b712:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 800b716:	f00d fd3d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b71a:	f7ff bb22 	b.w	800ad62 <TREEVIEW_Callback+0x276>
 800b71e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b722:	f8cd 800c 	str.w	r8, [sp, #12]
 800b726:	e401      	b.n	800af2c <TREEVIEW_Callback+0x440>
 800b728:	4628      	mov	r0, r5
 800b72a:	f7ff f977 	bl	800aa1c <TREEVIEW_ITEM_Expand>
 800b72e:	f7ff b9f3 	b.w	800ab18 <TREEVIEW_Callback+0x2c>
 800b732:	f00d fd1d 	bl	8019170 <GUI_ALLOC_LockH>
 800b736:	af16      	add	r7, sp, #88	; 0x58
 800b738:	9016      	str	r0, [sp, #88]	; 0x58
 800b73a:	9703      	str	r7, [sp, #12]
 800b73c:	f890 801c 	ldrb.w	r8, [r0, #28]
 800b740:	9505      	str	r5, [sp, #20]
 800b742:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800b746:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800b74a:	462f      	mov	r7, r5
 800b74c:	e018      	b.n	800b780 <TREEVIEW_Callback+0xc94>
 800b74e:	f00d fd21 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b752:	2c00      	cmp	r4, #0
 800b754:	d133      	bne.n	800b7be <TREEVIEW_Callback+0xcd2>
 800b756:	4638      	mov	r0, r7
 800b758:	f00d fd0a 	bl	8019170 <GUI_ALLOC_LockH>
 800b75c:	901f      	str	r0, [sp, #124]	; 0x7c
 800b75e:	4648      	mov	r0, r9
 800b760:	463c      	mov	r4, r7
 800b762:	f00d fd17 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b766:	9803      	ldr	r0, [sp, #12]
 800b768:	f00d fd14 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f00d fcff 	bl	8019170 <GUI_ALLOC_LockH>
 800b772:	9016      	str	r0, [sp, #88]	; 0x58
 800b774:	7f03      	ldrb	r3, [r0, #28]
 800b776:	4598      	cmp	r8, r3
 800b778:	dc31      	bgt.n	800b7de <TREEVIEW_Callback+0xcf2>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d02d      	beq.n	800b7da <TREEVIEW_Callback+0xcee>
 800b77e:	4627      	mov	r7, r4
 800b780:	4638      	mov	r0, r7
 800b782:	f00d fcf5 	bl	8019170 <GUI_ALLOC_LockH>
 800b786:	9028      	str	r0, [sp, #160]	; 0xa0
 800b788:	7f06      	ldrb	r6, [r0, #28]
 800b78a:	2400      	movs	r4, #0
 800b78c:	6885      	ldr	r5, [r0, #8]
 800b78e:	4650      	mov	r0, sl
 800b790:	2d00      	cmp	r5, #0
 800b792:	d0dc      	beq.n	800b74e <TREEVIEW_Callback+0xc62>
 800b794:	f00d fcfe 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b798:	4628      	mov	r0, r5
 800b79a:	f00d fce9 	bl	8019170 <GUI_ALLOC_LockH>
 800b79e:	9028      	str	r0, [sp, #160]	; 0xa0
 800b7a0:	b90c      	cbnz	r4, 800b7a6 <TREEVIEW_Callback+0xcba>
 800b7a2:	7f06      	ldrb	r6, [r0, #28]
 800b7a4:	462c      	mov	r4, r5
 800b7a6:	8b02      	ldrh	r2, [r0, #24]
 800b7a8:	07d3      	lsls	r3, r2, #31
 800b7aa:	d5ef      	bpl.n	800b78c <TREEVIEW_Callback+0xca0>
 800b7ac:	7f01      	ldrb	r1, [r0, #28]
 800b7ae:	42b1      	cmp	r1, r6
 800b7b0:	daec      	bge.n	800b78c <TREEVIEW_Callback+0xca0>
 800b7b2:	f012 0f02 	tst.w	r2, #2
 800b7b6:	bf08      	it	eq
 800b7b8:	462c      	moveq	r4, r5
 800b7ba:	460e      	mov	r6, r1
 800b7bc:	e7e6      	b.n	800b78c <TREEVIEW_Callback+0xca0>
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f00d fcd6 	bl	8019170 <GUI_ALLOC_LockH>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	4648      	mov	r0, r9
 800b7c8:	8b1e      	ldrh	r6, [r3, #24]
 800b7ca:	931f      	str	r3, [sp, #124]	; 0x7c
 800b7cc:	f00d fce2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b7d0:	07f1      	lsls	r1, r6, #31
 800b7d2:	d4c8      	bmi.n	800b766 <TREEVIEW_Callback+0xc7a>
 800b7d4:	42a7      	cmp	r7, r4
 800b7d6:	d1d2      	bne.n	800b77e <TREEVIEW_Callback+0xc92>
 800b7d8:	e7c5      	b.n	800b766 <TREEVIEW_Callback+0xc7a>
 800b7da:	9d05      	ldr	r5, [sp, #20]
 800b7dc:	462c      	mov	r4, r5
 800b7de:	9803      	ldr	r0, [sp, #12]
 800b7e0:	f00d fcd8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b7e4:	4658      	mov	r0, fp
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	f7fe fd80 	bl	800a2ec <_SetSel>
 800b7ec:	f7ff b994 	b.w	800ab18 <TREEVIEW_Callback+0x2c>
 800b7f0:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800b7f4:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f00d fcb9 	bl	8019170 <GUI_ALLOC_LockH>
 800b7fe:	9028      	str	r0, [sp, #160]	; 0xa0
 800b800:	7f07      	ldrb	r7, [r0, #28]
 800b802:	4603      	mov	r3, r0
 800b804:	2400      	movs	r4, #0
 800b806:	689e      	ldr	r6, [r3, #8]
 800b808:	4650      	mov	r0, sl
 800b80a:	b986      	cbnz	r6, 800b82e <TREEVIEW_Callback+0xd42>
 800b80c:	f00d fcc2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b810:	bb1c      	cbnz	r4, 800b85a <TREEVIEW_Callback+0xd6e>
 800b812:	4628      	mov	r0, r5
 800b814:	f00d fcac 	bl	8019170 <GUI_ALLOC_LockH>
 800b818:	901f      	str	r0, [sp, #124]	; 0x7c
 800b81a:	4648      	mov	r0, r9
 800b81c:	f00d fcba 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b820:	462c      	mov	r4, r5
 800b822:	4658      	mov	r0, fp
 800b824:	4621      	mov	r1, r4
 800b826:	f7fe fd61 	bl	800a2ec <_SetSel>
 800b82a:	f7ff b975 	b.w	800ab18 <TREEVIEW_Callback+0x2c>
 800b82e:	f00d fcb1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b832:	4630      	mov	r0, r6
 800b834:	f00d fc9c 	bl	8019170 <GUI_ALLOC_LockH>
 800b838:	9028      	str	r0, [sp, #160]	; 0xa0
 800b83a:	b90c      	cbnz	r4, 800b840 <TREEVIEW_Callback+0xd54>
 800b83c:	7f07      	ldrb	r7, [r0, #28]
 800b83e:	4634      	mov	r4, r6
 800b840:	8b01      	ldrh	r1, [r0, #24]
 800b842:	07ca      	lsls	r2, r1, #31
 800b844:	d507      	bpl.n	800b856 <TREEVIEW_Callback+0xd6a>
 800b846:	7f02      	ldrb	r2, [r0, #28]
 800b848:	42ba      	cmp	r2, r7
 800b84a:	da04      	bge.n	800b856 <TREEVIEW_Callback+0xd6a>
 800b84c:	f011 0f02 	tst.w	r1, #2
 800b850:	bf08      	it	eq
 800b852:	4634      	moveq	r4, r6
 800b854:	4617      	mov	r7, r2
 800b856:	4603      	mov	r3, r0
 800b858:	e7d5      	b.n	800b806 <TREEVIEW_Callback+0xd1a>
 800b85a:	4620      	mov	r0, r4
 800b85c:	f00d fc88 	bl	8019170 <GUI_ALLOC_LockH>
 800b860:	4603      	mov	r3, r0
 800b862:	4648      	mov	r0, r9
 800b864:	8b1e      	ldrh	r6, [r3, #24]
 800b866:	931f      	str	r3, [sp, #124]	; 0x7c
 800b868:	f00d fc94 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b86c:	07f3      	lsls	r3, r6, #31
 800b86e:	d4d8      	bmi.n	800b822 <TREEVIEW_Callback+0xd36>
 800b870:	42a5      	cmp	r5, r4
 800b872:	d0d6      	beq.n	800b822 <TREEVIEW_Callback+0xd36>
 800b874:	4625      	mov	r5, r4
 800b876:	e7bf      	b.n	800b7f8 <TREEVIEW_Callback+0xd0c>
 800b878:	20000240 	.word	0x20000240

0800b87c <TEXT_Callback>:
 800b87c:	b530      	push	{r4, r5, lr}
 800b87e:	6845      	ldr	r5, [r0, #4]
 800b880:	b085      	sub	sp, #20
 800b882:	4604      	mov	r4, r0
 800b884:	4601      	mov	r1, r0
 800b886:	4628      	mov	r0, r5
 800b888:	f7fd fe44 	bl	8009514 <WIDGET_HandleActive>
 800b88c:	b1b8      	cbz	r0, 800b8be <TEXT_Callback+0x42>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	2b0f      	cmp	r3, #15
 800b892:	d016      	beq.n	800b8c2 <TEXT_Callback+0x46>
 800b894:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800b898:	d040      	beq.n	800b91c <TEXT_Callback+0xa0>
 800b89a:	2b0b      	cmp	r3, #11
 800b89c:	d10c      	bne.n	800b8b8 <TEXT_Callback+0x3c>
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f00d fc66 	bl	8019170 <GUI_ALLOC_LockH>
 800b8a4:	ad04      	add	r5, sp, #16
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f845 3d08 	str.w	r3, [r5, #-8]!
 800b8ac:	3044      	adds	r0, #68	; 0x44
 800b8ae:	f00d fd91 	bl	80193d4 <GUI_ALLOC_FreePtr>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f00d fc6e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f006 fe49 	bl	8012550 <WM_DefaultProc>
 800b8be:	b005      	add	sp, #20
 800b8c0:	bd30      	pop	{r4, r5, pc}
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f00d fc54 	bl	8019170 <GUI_ALLOC_LockH>
 800b8c8:	9000      	str	r0, [sp, #0]
 800b8ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b8cc:	f00a f848 	bl	8015960 <LCD_SetColor>
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b8d4:	f00c fbca 	bl	801806c <GUI_SetFont>
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f003 f8e3 	bl	800eaa4 <WM_GetHasTrans>
 800b8de:	b340      	cbz	r0, 800b932 <TEXT_Callback+0xb6>
 800b8e0:	9b00      	ldr	r3, [sp, #0]
 800b8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e4:	b1ab      	cbz	r3, 800b912 <TEXT_Callback+0x96>
 800b8e6:	2002      	movs	r0, #2
 800b8e8:	f00c fbf0 	bl	80180cc <GUI_SetTextMode>
 800b8ec:	a802      	add	r0, sp, #8
 800b8ee:	f003 fddb 	bl	800f4a8 <WM_GetClientRect>
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800b8f6:	f00d fc3b 	bl	8019170 <GUI_ALLOC_LockH>
 800b8fa:	9b00      	ldr	r3, [sp, #0]
 800b8fc:	9001      	str	r0, [sp, #4]
 800b8fe:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800b902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b906:	a902      	add	r1, sp, #8
 800b908:	f00b fd0a 	bl	8017320 <GUI_DispStringInRectWrap>
 800b90c:	a801      	add	r0, sp, #4
 800b90e:	f00d fc41 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b912:	4668      	mov	r0, sp
 800b914:	f00d fc3e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b918:	b005      	add	sp, #20
 800b91a:	bd30      	pop	{r4, r5, pc}
 800b91c:	68e3      	ldr	r3, [r4, #12]
 800b91e:	b17b      	cbz	r3, 800b940 <TEXT_Callback+0xc4>
 800b920:	7a1b      	ldrb	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bf0c      	ite	eq
 800b926:	2102      	moveq	r1, #2
 800b928:	2101      	movne	r1, #1
 800b92a:	4628      	mov	r0, r5
 800b92c:	f004 f9ae 	bl	800fc8c <WM_NotifyParent>
 800b930:	e7c2      	b.n	800b8b8 <TEXT_Callback+0x3c>
 800b932:	9b00      	ldr	r3, [sp, #0]
 800b934:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b936:	f00a f80b 	bl	8015950 <LCD_SetBkColor>
 800b93a:	f00b ffd1 	bl	80178e0 <GUI_Clear>
 800b93e:	e7cf      	b.n	800b8e0 <TEXT_Callback+0x64>
 800b940:	2103      	movs	r1, #3
 800b942:	e7f2      	b.n	800b92a <TEXT_Callback+0xae>

0800b944 <TEXT_CreateIndirect>:
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4689      	mov	r9, r1
 800b94a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800b94e:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 800b952:	f8d0 a018 	ldr.w	sl, [r0, #24]
 800b956:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 800b95a:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 800b95e:	8a47      	ldrh	r7, [r0, #18]
 800b960:	8906      	ldrh	r6, [r0, #8]
 800b962:	6845      	ldr	r5, [r0, #4]
 800b964:	b089      	sub	sp, #36	; 0x24
 800b966:	1888      	adds	r0, r1, r2
 800b968:	449b      	add	fp, r3
 800b96a:	9005      	str	r0, [sp, #20]
 800b96c:	f00b f880 	bl	8016a70 <GUI_Lock>
 800b970:	f10a 0320 	add.w	r3, sl, #32
 800b974:	f04f 0c03 	mov.w	ip, #3
 800b978:	f8df e090 	ldr.w	lr, [pc, #144]	; 800ba0c <TEXT_CreateIndirect+0xc8>
 800b97c:	9303      	str	r3, [sp, #12]
 800b97e:	f8cd 9000 	str.w	r9, [sp]
 800b982:	4623      	mov	r3, r4
 800b984:	9805      	ldr	r0, [sp, #20]
 800b986:	f8cd c004 	str.w	ip, [sp, #4]
 800b98a:	4659      	mov	r1, fp
 800b98c:	4642      	mov	r2, r8
 800b98e:	f8cd e008 	str.w	lr, [sp, #8]
 800b992:	f006 f8d3 	bl	8011b3c <WM_CreateWindowAsChild>
 800b996:	4604      	mov	r4, r0
 800b998:	b300      	cbz	r0, 800b9dc <TEXT_CreateIndirect+0x98>
 800b99a:	b32d      	cbz	r5, 800b9e8 <TEXT_CreateIndirect+0xa4>
 800b99c:	4628      	mov	r0, r5
 800b99e:	f7f4 fc37 	bl	8000210 <strlen>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f00d fd6c 	bl	8019480 <GUI_ALLOC_AllocZero>
 800b9a8:	4681      	mov	r9, r0
 800b9aa:	b9f8      	cbnz	r0, 800b9ec <TEXT_CreateIndirect+0xa8>
 800b9ac:	f10d 081c 	add.w	r8, sp, #28
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f00d fbdd 	bl	8019170 <GUI_ALLOC_LockH>
 800b9b6:	b231      	sxth	r1, r6
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	9007      	str	r0, [sp, #28]
 800b9bc:	f7fd fcb0 	bl	8009320 <WIDGET__Init>
 800b9c0:	4b11      	ldr	r3, [pc, #68]	; (800ba08 <TEXT_CreateIndirect+0xc4>)
 800b9c2:	9e07      	ldr	r6, [sp, #28]
 800b9c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9c6:	f106 0534 	add.w	r5, r6, #52	; 0x34
 800b9ca:	f8c6 9044 	str.w	r9, [r6, #68]	; 0x44
 800b9ce:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
 800b9d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	f00d fbdc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800b9dc:	f00b f83e 	bl	8016a5c <GUI_Unlock>
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	b009      	add	sp, #36	; 0x24
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	46a9      	mov	r9, r5
 800b9ea:	e7df      	b.n	800b9ac <TEXT_CreateIndirect+0x68>
 800b9ec:	f00d fbc0 	bl	8019170 <GUI_ALLOC_LockH>
 800b9f0:	f10d 0820 	add.w	r8, sp, #32
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b9fa:	f012 fbe9 	bl	801e1d0 <strcpy>
 800b9fe:	4640      	mov	r0, r8
 800ba00:	f00d fbc8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ba04:	e7d4      	b.n	800b9b0 <TEXT_CreateIndirect+0x6c>
 800ba06:	bf00      	nop
 800ba08:	2000016c 	.word	0x2000016c
 800ba0c:	0800b87d 	.word	0x0800b87d

0800ba10 <TEXT_SetFont>:
 800ba10:	b530      	push	{r4, r5, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	b083      	sub	sp, #12
 800ba16:	460d      	mov	r5, r1
 800ba18:	b908      	cbnz	r0, 800ba1e <TEXT_SetFont+0xe>
 800ba1a:	b003      	add	sp, #12
 800ba1c:	bd30      	pop	{r4, r5, pc}
 800ba1e:	f00b f827 	bl	8016a70 <GUI_Lock>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f00d fba4 	bl	8019170 <GUI_ALLOC_LockH>
 800ba28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ba2a:	9001      	str	r0, [sp, #4]
 800ba2c:	42ab      	cmp	r3, r5
 800ba2e:	d003      	beq.n	800ba38 <TEXT_SetFont+0x28>
 800ba30:	6345      	str	r5, [r0, #52]	; 0x34
 800ba32:	4620      	mov	r0, r4
 800ba34:	f006 f826 	bl	8011a84 <WM_InvalidateWindow>
 800ba38:	a801      	add	r0, sp, #4
 800ba3a:	f00d fbab 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ba3e:	f00b f80d 	bl	8016a5c <GUI_Unlock>
 800ba42:	b003      	add	sp, #12
 800ba44:	bd30      	pop	{r4, r5, pc}
 800ba46:	bf00      	nop

0800ba48 <TEXT_SetText>:
 800ba48:	b530      	push	{r4, r5, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	460d      	mov	r5, r1
 800ba50:	b918      	cbnz	r0, 800ba5a <TEXT_SetText+0x12>
 800ba52:	2501      	movs	r5, #1
 800ba54:	4628      	mov	r0, r5
 800ba56:	b003      	add	sp, #12
 800ba58:	bd30      	pop	{r4, r5, pc}
 800ba5a:	f00b f809 	bl	8016a70 <GUI_Lock>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f00d fb86 	bl	8019170 <GUI_ALLOC_LockH>
 800ba64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba66:	9000      	str	r0, [sp, #0]
 800ba68:	4668      	mov	r0, sp
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	f00d fb92 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ba70:	4629      	mov	r1, r5
 800ba72:	a801      	add	r0, sp, #4
 800ba74:	f00a f8c4 	bl	8015c00 <GUI__SetText>
 800ba78:	f1d0 0501 	rsbs	r5, r0, #1
 800ba7c:	bf38      	it	cc
 800ba7e:	2500      	movcc	r5, #0
 800ba80:	b125      	cbz	r5, 800ba8c <TEXT_SetText+0x44>
 800ba82:	f00a ffeb 	bl	8016a5c <GUI_Unlock>
 800ba86:	4628      	mov	r0, r5
 800ba88:	b003      	add	sp, #12
 800ba8a:	bd30      	pop	{r4, r5, pc}
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f00d fb6f 	bl	8019170 <GUI_ALLOC_LockH>
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba96:	9000      	str	r0, [sp, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	bf18      	it	ne
 800ba9c:	6443      	strne	r3, [r0, #68]	; 0x44
 800ba9e:	4668      	mov	r0, sp
 800baa0:	f00d fb78 	bl	8019194 <GUI_ALLOC_UnlockH>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f005 ffed 	bl	8011a84 <WM_InvalidateWindow>
 800baaa:	e7ea      	b.n	800ba82 <TEXT_SetText+0x3a>

0800baac <TEXT_SetTextAlign>:
 800baac:	b530      	push	{r4, r5, lr}
 800baae:	4604      	mov	r4, r0
 800bab0:	b083      	sub	sp, #12
 800bab2:	460d      	mov	r5, r1
 800bab4:	b188      	cbz	r0, 800bada <TEXT_SetTextAlign+0x2e>
 800bab6:	f00a ffdb 	bl	8016a70 <GUI_Lock>
 800baba:	4620      	mov	r0, r4
 800babc:	f00d fb58 	bl	8019170 <GUI_ALLOC_LockH>
 800bac0:	ab02      	add	r3, sp, #8
 800bac2:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
 800bac6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800baca:	4618      	mov	r0, r3
 800bacc:	f00d fb62 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bad0:	4620      	mov	r0, r4
 800bad2:	f005 ffd7 	bl	8011a84 <WM_InvalidateWindow>
 800bad6:	f00a ffc1 	bl	8016a5c <GUI_Unlock>
 800bada:	b003      	add	sp, #12
 800badc:	bd30      	pop	{r4, r5, pc}
 800bade:	bf00      	nop

0800bae0 <TEXT_SetTextColor>:
 800bae0:	b530      	push	{r4, r5, lr}
 800bae2:	4604      	mov	r4, r0
 800bae4:	b083      	sub	sp, #12
 800bae6:	460d      	mov	r5, r1
 800bae8:	b908      	cbnz	r0, 800baee <TEXT_SetTextColor+0xe>
 800baea:	b003      	add	sp, #12
 800baec:	bd30      	pop	{r4, r5, pc}
 800baee:	f00a ffbf 	bl	8016a70 <GUI_Lock>
 800baf2:	4620      	mov	r0, r4
 800baf4:	f00d fb3c 	bl	8019170 <GUI_ALLOC_LockH>
 800baf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bafa:	9001      	str	r0, [sp, #4]
 800bafc:	42ab      	cmp	r3, r5
 800bafe:	d003      	beq.n	800bb08 <TEXT_SetTextColor+0x28>
 800bb00:	6385      	str	r5, [r0, #56]	; 0x38
 800bb02:	4620      	mov	r0, r4
 800bb04:	f005 ffbe 	bl	8011a84 <WM_InvalidateWindow>
 800bb08:	a801      	add	r0, sp, #4
 800bb0a:	f00d fb43 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bb0e:	f00a ffa5 	bl	8016a5c <GUI_Unlock>
 800bb12:	b003      	add	sp, #12
 800bb14:	bd30      	pop	{r4, r5, pc}
 800bb16:	bf00      	nop

0800bb18 <SPINBOX__DrawBk>:
 800bb18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	b089      	sub	sp, #36	; 0x24
 800bb1e:	460e      	mov	r6, r1
 800bb20:	4680      	mov	r8, r0
 800bb22:	f00d fb25 	bl	8019170 <GUI_ALLOC_LockH>
 800bb26:	4603      	mov	r3, r0
 800bb28:	a808      	add	r0, sp, #32
 800bb2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bb2c:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800bb30:	f840 3d1c 	str.w	r3, [r0, #-28]!
 800bb34:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 800bb38:	f8b3 708a 	ldrh.w	r7, [r3, #138]	; 0x8a
 800bb3c:	6824      	ldr	r4, [r4, #0]
 800bb3e:	f00d fb29 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bb42:	4648      	mov	r0, r9
 800bb44:	a902      	add	r1, sp, #8
 800bb46:	f004 f845 	bl	800fbd4 <WM_GetWindowRectEx>
 800bb4a:	a906      	add	r1, sp, #24
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	f004 f841 	bl	800fbd4 <WM_GetWindowRectEx>
 800bb52:	4630      	mov	r0, r6
 800bb54:	f00c fa28 	bl	8017fa8 <GUI_SetColor>
 800bb58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800bb5c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800bb60:	b2a3      	uxth	r3, r4
 800bb62:	441a      	add	r2, r3
 800bb64:	1a52      	subs	r2, r2, r1
 800bb66:	b292      	uxth	r2, r2
 800bb68:	2d01      	cmp	r5, #1
 800bb6a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800bb6e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bb72:	d031      	beq.n	800bbd8 <SPINBOX__DrawBk+0xc0>
 800bb74:	2d02      	cmp	r5, #2
 800bb76:	d026      	beq.n	800bbc6 <SPINBOX__DrawBk+0xae>
 800bb78:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800bb7c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800bb80:	f8ad 3012 	strh.w	r3, [sp, #18]
 800bb84:	3901      	subs	r1, #1
 800bb86:	1a89      	subs	r1, r1, r2
 800bb88:	b289      	uxth	r1, r1
 800bb8a:	b21b      	sxth	r3, r3
 800bb8c:	b208      	sxth	r0, r1
 800bb8e:	4283      	cmp	r3, r0
 800bb90:	f8ad 1016 	strh.w	r1, [sp, #22]
 800bb94:	dd28      	ble.n	800bbe8 <SPINBOX__DrawBk+0xd0>
 800bb96:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800bb9a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800bb9e:	3101      	adds	r1, #1
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	1b1c      	subs	r4, r3, r4
 800bba4:	1a8a      	subs	r2, r1, r2
 800bba6:	b292      	uxth	r2, r2
 800bba8:	b2a4      	uxth	r4, r4
 800bbaa:	b211      	sxth	r1, r2
 800bbac:	b223      	sxth	r3, r4
 800bbae:	4299      	cmp	r1, r3
 800bbb0:	f8ad 2012 	strh.w	r2, [sp, #18]
 800bbb4:	f8ad 4016 	strh.w	r4, [sp, #22]
 800bbb8:	dc02      	bgt.n	800bbc0 <SPINBOX__DrawBk+0xa8>
 800bbba:	a804      	add	r0, sp, #16
 800bbbc:	f00b f972 	bl	8016ea4 <GUI_FillRectEx>
 800bbc0:	b009      	add	sp, #36	; 0x24
 800bbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbc6:	3701      	adds	r7, #1
 800bbc8:	b2bf      	uxth	r7, r7
 800bbca:	443a      	add	r2, r7
 800bbcc:	441f      	add	r7, r3
 800bbce:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bbd2:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bbd6:	e7cf      	b.n	800bb78 <SPINBOX__DrawBk+0x60>
 800bbd8:	1c79      	adds	r1, r7, #1
 800bbda:	440a      	add	r2, r1
 800bbdc:	441f      	add	r7, r3
 800bbde:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bbe2:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bbe6:	e7c7      	b.n	800bb78 <SPINBOX__DrawBk+0x60>
 800bbe8:	a804      	add	r0, sp, #16
 800bbea:	f00b f95b 	bl	8016ea4 <GUI_FillRectEx>
 800bbee:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800bbf2:	e7d0      	b.n	800bb96 <SPINBOX__DrawBk+0x7e>

0800bbf4 <SPINBOX__GetButtonRect>:
 800bbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	4691      	mov	r9, r2
 800bbfe:	f00d fab7 	bl	8019170 <GUI_ALLOC_LockH>
 800bc02:	4603      	mov	r3, r0
 800bc04:	a802      	add	r0, sp, #8
 800bc06:	885e      	ldrh	r6, [r3, #2]
 800bc08:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800bc0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc0e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800bc12:	f9b3 7000 	ldrsh.w	r7, [r3]
 800bc16:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 800bc1a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800bc1e:	ebc6 060e 	rsb	r6, r6, lr
 800bc22:	f8d1 8000 	ldr.w	r8, [r1]
 800bc26:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 800bc2a:	1bd7      	subs	r7, r2, r7
 800bc2c:	f00d fab2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bc30:	2d01      	cmp	r5, #1
 800bc32:	b2b6      	uxth	r6, r6
 800bc34:	d02f      	beq.n	800bc96 <SPINBOX__GetButtonRect+0xa2>
 800bc36:	d318      	bcc.n	800bc6a <SPINBOX__GetButtonRect+0x76>
 800bc38:	2d02      	cmp	r5, #2
 800bc3a:	d113      	bne.n	800bc64 <SPINBOX__GetButtonRect+0x70>
 800bc3c:	fa1f f888 	uxth.w	r8, r8
 800bc40:	ebc8 0606 	rsb	r6, r8, r6
 800bc44:	80e6      	strh	r6, [r4, #6]
 800bc46:	f8a4 8002 	strh.w	r8, [r4, #2]
 800bc4a:	f1b9 0f00 	cmp.w	r9, #0
 800bc4e:	d133      	bne.n	800bcb8 <SPINBOX__GetButtonRect+0xc4>
 800bc50:	b2bf      	uxth	r7, r7
 800bc52:	ebca 0a07 	rsb	sl, sl, r7
 800bc56:	ebc8 0a0a 	rsb	sl, r8, sl
 800bc5a:	ebc8 0707 	rsb	r7, r8, r7
 800bc5e:	f8a4 a000 	strh.w	sl, [r4]
 800bc62:	80a7      	strh	r7, [r4, #4]
 800bc64:	b002      	add	sp, #8
 800bc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6a:	b2bf      	uxth	r7, r7
 800bc6c:	ebca 0a07 	rsb	sl, sl, r7
 800bc70:	fa1f f388 	uxth.w	r3, r8
 800bc74:	ebc3 0a0a 	rsb	sl, r3, sl
 800bc78:	1aff      	subs	r7, r7, r3
 800bc7a:	f8a4 a000 	strh.w	sl, [r4]
 800bc7e:	80a7      	strh	r7, [r4, #4]
 800bc80:	f1b9 0f00 	cmp.w	r9, #0
 800bc84:	d011      	beq.n	800bcaa <SPINBOX__GetButtonRect+0xb6>
 800bc86:	0872      	lsrs	r2, r6, #1
 800bc88:	1af6      	subs	r6, r6, r3
 800bc8a:	1c53      	adds	r3, r2, #1
 800bc8c:	8063      	strh	r3, [r4, #2]
 800bc8e:	80e6      	strh	r6, [r4, #6]
 800bc90:	b002      	add	sp, #8
 800bc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc96:	fa1f f888 	uxth.w	r8, r8
 800bc9a:	44c2      	add	sl, r8
 800bc9c:	f8a4 a004 	strh.w	sl, [r4, #4]
 800bca0:	f8a4 8000 	strh.w	r8, [r4]
 800bca4:	f1b9 0f00 	cmp.w	r9, #0
 800bca8:	d10e      	bne.n	800bcc8 <SPINBOX__GetButtonRect+0xd4>
 800bcaa:	0876      	lsrs	r6, r6, #1
 800bcac:	80e6      	strh	r6, [r4, #6]
 800bcae:	f8a4 8002 	strh.w	r8, [r4, #2]
 800bcb2:	b002      	add	sp, #8
 800bcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb8:	44c2      	add	sl, r8
 800bcba:	f8a4 a004 	strh.w	sl, [r4, #4]
 800bcbe:	f8a4 8000 	strh.w	r8, [r4]
 800bcc2:	b002      	add	sp, #8
 800bcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc8:	0873      	lsrs	r3, r6, #1
 800bcca:	ebc8 0806 	rsb	r8, r8, r6
 800bcce:	3301      	adds	r3, #1
 800bcd0:	8063      	strh	r3, [r4, #2]
 800bcd2:	f8a4 8006 	strh.w	r8, [r4, #6]
 800bcd6:	b002      	add	sp, #8
 800bcd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bcdc <SPINBOX_Callback>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	6844      	ldr	r4, [r0, #4]
 800bce2:	b093      	sub	sp, #76	; 0x4c
 800bce4:	4605      	mov	r5, r0
 800bce6:	4620      	mov	r0, r4
 800bce8:	f00d fa42 	bl	8019170 <GUI_ALLOC_LockH>
 800bcec:	ae12      	add	r6, sp, #72	; 0x48
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f846 0d24 	str.w	r0, [r6, #-36]!
 800bcf4:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 800bcf8:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f00d fa49 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	2b0d      	cmp	r3, #13
 800bd06:	f000 80c3 	beq.w	800be90 <SPINBOX_Callback+0x1b4>
 800bd0a:	2b1e      	cmp	r3, #30
 800bd0c:	f000 80e6 	beq.w	800bedc <SPINBOX_Callback+0x200>
 800bd10:	4620      	mov	r0, r4
 800bd12:	4629      	mov	r1, r5
 800bd14:	f7fd fbfe 	bl	8009514 <WIDGET_HandleActive>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	f000 80b6 	beq.w	800be8a <SPINBOX_Callback+0x1ae>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	2b11      	cmp	r3, #17
 800bd22:	f000 8108 	beq.w	800bf36 <SPINBOX_Callback+0x25a>
 800bd26:	f340 80cd 	ble.w	800bec4 <SPINBOX_Callback+0x1e8>
 800bd2a:	2b28      	cmp	r3, #40	; 0x28
 800bd2c:	f000 822b 	beq.w	800c186 <SPINBOX_Callback+0x4aa>
 800bd30:	f340 80e3 	ble.w	800befa <SPINBOX_Callback+0x21e>
 800bd34:	f240 1213 	movw	r2, #275	; 0x113
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	f000 81d4 	beq.w	800c0e6 <SPINBOX_Callback+0x40a>
 800bd3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800bd42:	f040 80c7 	bne.w	800bed4 <SPINBOX_Callback+0x1f8>
 800bd46:	68eb      	ldr	r3, [r5, #12]
 800bd48:	4620      	mov	r0, r4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 83be 	beq.w	800c4cc <SPINBOX_Callback+0x7f0>
 800bd50:	f00d fa0e 	bl	8019170 <GUI_ALLOC_LockH>
 800bd54:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd56:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800bd5a:	f003 ff6b 	bl	800fc34 <WM_IsFocusable>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f040 8332 	bne.w	800c3c8 <SPINBOX_Callback+0x6ec>
 800bd64:	4620      	mov	r0, r4
 800bd66:	f004 f811 	bl	800fd8c <WM_SetFocus>
 800bd6a:	68ee      	ldr	r6, [r5, #12]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	6871      	ldr	r1, [r6, #4]
 800bd70:	9103      	str	r1, [sp, #12]
 800bd72:	6837      	ldr	r7, [r6, #0]
 800bd74:	f00d f9fc 	bl	8019170 <GUI_ALLOC_LockH>
 800bd78:	ad12      	add	r5, sp, #72	; 0x48
 800bd7a:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 800bd7e:	f845 0d10 	str.w	r0, [r5, #-16]!
 800bd82:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800bd86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800bd88:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 800bd8c:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 800bd90:	f9b0 1000 	ldrsh.w	r1, [r0]
 800bd94:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 800bd98:	9002      	str	r0, [sp, #8]
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	ebce 0909 	rsb	r9, lr, r9
 800bda0:	f8d2 8000 	ldr.w	r8, [r2]
 800bda4:	ebc1 0b0b 	rsb	fp, r1, fp
 800bda8:	f00d f9f4 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bdac:	f1ba 0f01 	cmp.w	sl, #1
 800bdb0:	fa1f f989 	uxth.w	r9, r9
 800bdb4:	f000 836c 	beq.w	800c490 <SPINBOX_Callback+0x7b4>
 800bdb8:	f0c0 8356 	bcc.w	800c468 <SPINBOX_Callback+0x78c>
 800bdbc:	f1ba 0f02 	cmp.w	sl, #2
 800bdc0:	f040 834b 	bne.w	800c45a <SPINBOX_Callback+0x77e>
 800bdc4:	9a02      	ldr	r2, [sp, #8]
 800bdc6:	fa1f f888 	uxth.w	r8, r8
 800bdca:	fa1f fb8b 	uxth.w	fp, fp
 800bdce:	ebc2 0a0b 	rsb	sl, r2, fp
 800bdd2:	ebc8 0909 	rsb	r9, r8, r9
 800bdd6:	ebc8 0a0a 	rsb	sl, r8, sl
 800bdda:	ebc8 020b 	rsb	r2, r8, fp
 800bdde:	fa1f f989 	uxth.w	r9, r9
 800bde2:	fa0f fa8a 	sxth.w	sl, sl
 800bde6:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdea:	b292      	uxth	r2, r2
 800bdec:	4557      	cmp	r7, sl
 800bdee:	f2c0 821b 	blt.w	800c228 <SPINBOX_Callback+0x54c>
 800bdf2:	b213      	sxth	r3, r2
 800bdf4:	429f      	cmp	r7, r3
 800bdf6:	f300 8217 	bgt.w	800c228 <SPINBOX_Callback+0x54c>
 800bdfa:	9903      	ldr	r1, [sp, #12]
 800bdfc:	fa0f f388 	sxth.w	r3, r8
 800be00:	4299      	cmp	r1, r3
 800be02:	f2c0 8211 	blt.w	800c228 <SPINBOX_Callback+0x54c>
 800be06:	9902      	ldr	r1, [sp, #8]
 800be08:	b20b      	sxth	r3, r1
 800be0a:	9903      	ldr	r1, [sp, #12]
 800be0c:	4299      	cmp	r1, r3
 800be0e:	f300 820b 	bgt.w	800c228 <SPINBOX_Callback+0x54c>
 800be12:	2700      	movs	r7, #0
 800be14:	7a33      	ldrb	r3, [r6, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8242 	beq.w	800c2a0 <SPINBOX_Callback+0x5c4>
 800be1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1e:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 800be22:	42b7      	cmp	r7, r6
 800be24:	b272      	sxtb	r2, r6
 800be26:	d02b      	beq.n	800be80 <SPINBOX_Callback+0x1a4>
 800be28:	f04f 0801 	mov.w	r8, #1
 800be2c:	3201      	adds	r2, #1
 800be2e:	f883 80a2 	strb.w	r8, [r3, #162]	; 0xa2
 800be32:	d025      	beq.n	800be80 <SPINBOX_Callback+0x1a4>
 800be34:	4620      	mov	r0, r4
 800be36:	f00d f99b 	bl	8019170 <GUI_ALLOC_LockH>
 800be3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800be3c:	900c      	str	r0, [sp, #48]	; 0x30
 800be3e:	079a      	lsls	r2, r3, #30
 800be40:	d51a      	bpl.n	800be78 <SPINBOX_Callback+0x19c>
 800be42:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800be46:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800be4a:	b2f6      	uxtb	r6, r6
 800be4c:	fa08 f806 	lsl.w	r8, r8, r6
 800be50:	ea22 0208 	bic.w	r2, r2, r8
 800be54:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f040 823e 	bne.w	800c2da <SPINBOX_Callback+0x5fe>
 800be5e:	4620      	mov	r0, r4
 800be60:	2102      	movs	r1, #2
 800be62:	f003 ff13 	bl	800fc8c <WM_NotifyParent>
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	4632      	mov	r2, r6
 800be6c:	f7ff fec2 	bl	800bbf4 <SPINBOX__GetButtonRect>
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f005 fd40 	bl	80118f8 <WM_InvalidateRect>
 800be78:	a80c      	add	r0, sp, #48	; 0x30
 800be7a:	f00d f98b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800be7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be80:	f883 70a1 	strb.w	r7, [r3, #161]	; 0xa1
 800be84:	a80b      	add	r0, sp, #44	; 0x2c
 800be86:	f00d f985 	bl	8019194 <GUI_ALLOC_UnlockH>
 800be8a:	b013      	add	sp, #76	; 0x4c
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	68eb      	ldr	r3, [r5, #12]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0f8      	beq.n	800be8a <SPINBOX_Callback+0x1ae>
 800be98:	7a1b      	ldrb	r3, [r3, #8]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0f5      	beq.n	800be8a <SPINBOX_Callback+0x1ae>
 800be9e:	4638      	mov	r0, r7
 800bea0:	f003 fec8 	bl	800fc34 <WM_IsFocusable>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d1f0      	bne.n	800be8a <SPINBOX_Callback+0x1ae>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f003 fec3 	bl	800fc34 <WM_IsFocusable>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d0eb      	beq.n	800be8a <SPINBOX_Callback+0x1ae>
 800beb2:	4620      	mov	r0, r4
 800beb4:	f003 feb0 	bl	800fc18 <WM_HasFocus>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d1e6      	bne.n	800be8a <SPINBOX_Callback+0x1ae>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f003 ff65 	bl	800fd8c <WM_SetFocus>
 800bec2:	e7e2      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800bec4:	2b0e      	cmp	r3, #14
 800bec6:	f000 80cf 	beq.w	800c068 <SPINBOX_Callback+0x38c>
 800beca:	2b0f      	cmp	r3, #15
 800becc:	f000 80e4 	beq.w	800c098 <SPINBOX_Callback+0x3bc>
 800bed0:	2b0b      	cmp	r3, #11
 800bed2:	d020      	beq.n	800bf16 <SPINBOX_Callback+0x23a>
 800bed4:	4628      	mov	r0, r5
 800bed6:	f006 fb3b 	bl	8012550 <WM_DefaultProc>
 800beda:	e7d6      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800bedc:	4638      	mov	r0, r7
 800bede:	f003 fea9 	bl	800fc34 <WM_IsFocusable>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	f43f af14 	beq.w	800bd10 <SPINBOX_Callback+0x34>
 800bee8:	68eb      	ldr	r3, [r5, #12]
 800beea:	4638      	mov	r0, r7
 800beec:	2101      	movs	r1, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 81fe 	beq.w	800c2f0 <SPINBOX_Callback+0x614>
 800bef4:	f7fd faa2 	bl	800943c <WIDGET_OrState>
 800bef8:	e70a      	b.n	800bd10 <SPINBOX_Callback+0x34>
 800befa:	2b26      	cmp	r3, #38	; 0x26
 800befc:	d1ea      	bne.n	800bed4 <SPINBOX_Callback+0x1f8>
 800befe:	68e9      	ldr	r1, [r5, #12]
 800bf00:	2905      	cmp	r1, #5
 800bf02:	f000 8275 	beq.w	800c3f0 <SPINBOX_Callback+0x714>
 800bf06:	dbc0      	blt.n	800be8a <SPINBOX_Callback+0x1ae>
 800bf08:	3908      	subs	r1, #8
 800bf0a:	2901      	cmp	r1, #1
 800bf0c:	d8bd      	bhi.n	800be8a <SPINBOX_Callback+0x1ae>
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f005 fdb8 	bl	8011a84 <WM_InvalidateWindow>
 800bf14:	e7b9      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800bf16:	4620      	mov	r0, r4
 800bf18:	f00d f92a 	bl	8019170 <GUI_ALLOC_LockH>
 800bf1c:	9009      	str	r0, [sp, #36]	; 0x24
 800bf1e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 800bf22:	2800      	cmp	r0, #0
 800bf24:	f040 8268 	bne.w	800c3f8 <SPINBOX_Callback+0x71c>
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f00d f933 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f006 fb0e 	bl	8012550 <WM_DefaultProc>
 800bf34:	e7a9      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800bf36:	4620      	mov	r0, r4
 800bf38:	f00d f91a 	bl	8019170 <GUI_ALLOC_LockH>
 800bf3c:	68ee      	ldr	r6, [r5, #12]
 800bf3e:	900a      	str	r0, [sp, #40]	; 0x28
 800bf40:	6871      	ldr	r1, [r6, #4]
 800bf42:	9103      	str	r1, [sp, #12]
 800bf44:	4620      	mov	r0, r4
 800bf46:	f8d6 8000 	ldr.w	r8, [r6]
 800bf4a:	f00d f911 	bl	8019170 <GUI_ALLOC_LockH>
 800bf4e:	ad12      	add	r5, sp, #72	; 0x48
 800bf50:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 800bf54:	f845 0d10 	str.w	r0, [r5, #-16]!
 800bf58:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800bf5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bf5e:	f890 708c 	ldrb.w	r7, [r0, #140]	; 0x8c
 800bf62:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 800bf66:	f9b0 1000 	ldrsh.w	r1, [r0]
 800bf6a:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 800bf6e:	9002      	str	r0, [sp, #8]
 800bf70:	4628      	mov	r0, r5
 800bf72:	ebce 0a0a 	rsb	sl, lr, sl
 800bf76:	f8d3 9000 	ldr.w	r9, [r3]
 800bf7a:	ebc1 0b0b 	rsb	fp, r1, fp
 800bf7e:	f00d f909 	bl	8019194 <GUI_ALLOC_UnlockH>
 800bf82:	2f01      	cmp	r7, #1
 800bf84:	fa1f fa8a 	uxth.w	sl, sl
 800bf88:	f000 825b 	beq.w	800c442 <SPINBOX_Callback+0x766>
 800bf8c:	f0c0 8246 	bcc.w	800c41c <SPINBOX_Callback+0x740>
 800bf90:	2f02      	cmp	r7, #2
 800bf92:	f040 823e 	bne.w	800c412 <SPINBOX_Callback+0x736>
 800bf96:	9a02      	ldr	r2, [sp, #8]
 800bf98:	fa1f f389 	uxth.w	r3, r9
 800bf9c:	fa1f fb8b 	uxth.w	fp, fp
 800bfa0:	ebc2 070b 	rsb	r7, r2, fp
 800bfa4:	ebc3 0a0a 	rsb	sl, r3, sl
 800bfa8:	1aff      	subs	r7, r7, r3
 800bfaa:	ebc3 010b 	rsb	r1, r3, fp
 800bfae:	fa1f fa8a 	uxth.w	sl, sl
 800bfb2:	b23f      	sxth	r7, r7
 800bfb4:	f8cd a010 	str.w	sl, [sp, #16]
 800bfb8:	fa1f f981 	uxth.w	r9, r1
 800bfbc:	45b8      	cmp	r8, r7
 800bfbe:	f2c0 80e7 	blt.w	800c190 <SPINBOX_Callback+0x4b4>
 800bfc2:	fa0f f289 	sxth.w	r2, r9
 800bfc6:	4590      	cmp	r8, r2
 800bfc8:	f300 80e2 	bgt.w	800c190 <SPINBOX_Callback+0x4b4>
 800bfcc:	9903      	ldr	r1, [sp, #12]
 800bfce:	b21a      	sxth	r2, r3
 800bfd0:	4291      	cmp	r1, r2
 800bfd2:	f2c0 80dd 	blt.w	800c190 <SPINBOX_Callback+0x4b4>
 800bfd6:	9904      	ldr	r1, [sp, #16]
 800bfd8:	b20a      	sxth	r2, r1
 800bfda:	9903      	ldr	r1, [sp, #12]
 800bfdc:	4291      	cmp	r1, r2
 800bfde:	f300 80d7 	bgt.w	800c190 <SPINBOX_Callback+0x4b4>
 800bfe2:	f04f 0900 	mov.w	r9, #0
 800bfe6:	46c8      	mov	r8, r9
 800bfe8:	f04f 0a01 	mov.w	sl, #1
 800bfec:	4620      	mov	r0, r4
 800bfee:	2101      	movs	r1, #1
 800bff0:	f002 fe4e 	bl	800ec90 <WM_SetCapture>
 800bff4:	7a37      	ldrb	r7, [r6, #8]
 800bff6:	2f01      	cmp	r7, #1
 800bff8:	f000 817d 	beq.w	800c2f6 <SPINBOX_Callback+0x61a>
 800bffc:	2f80      	cmp	r7, #128	; 0x80
 800bffe:	f000 817a 	beq.w	800c2f6 <SPINBOX_Callback+0x61a>
 800c002:	bb57      	cbnz	r7, 800c05a <SPINBOX_Callback+0x37e>
 800c004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c006:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 800c00a:	b272      	sxtb	r2, r6
 800c00c:	3201      	adds	r2, #1
 800c00e:	d025      	beq.n	800c05c <SPINBOX_Callback+0x380>
 800c010:	4620      	mov	r0, r4
 800c012:	f00d f8ad 	bl	8019170 <GUI_ALLOC_LockH>
 800c016:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c018:	900c      	str	r0, [sp, #48]	; 0x30
 800c01a:	079b      	lsls	r3, r3, #30
 800c01c:	d51a      	bpl.n	800c054 <SPINBOX_Callback+0x378>
 800c01e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800c022:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c026:	b2f6      	uxtb	r6, r6
 800c028:	2101      	movs	r1, #1
 800c02a:	40b1      	lsls	r1, r6
 800c02c:	ea22 0201 	bic.w	r2, r2, r1
 800c030:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 800c034:	2b00      	cmp	r3, #0
 800c036:	f040 82f7 	bne.w	800c628 <SPINBOX_Callback+0x94c>
 800c03a:	4620      	mov	r0, r4
 800c03c:	2102      	movs	r1, #2
 800c03e:	f003 fe25 	bl	800fc8c <WM_NotifyParent>
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	4632      	mov	r2, r6
 800c048:	f7ff fdd4 	bl	800bbf4 <SPINBOX__GetButtonRect>
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f005 fc52 	bl	80118f8 <WM_InvalidateRect>
 800c054:	a80c      	add	r0, sp, #48	; 0x30
 800c056:	f00d f89d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05c:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 800c060:	a80a      	add	r0, sp, #40	; 0x28
 800c062:	f00d f897 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c066:	e710      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c068:	68ec      	ldr	r4, [r5, #12]
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f43f af31 	beq.w	800bed4 <SPINBOX_Callback+0x1f8>
 800c072:	4638      	mov	r0, r7
 800c074:	f003 fdde 	bl	800fc34 <WM_IsFocusable>
 800c078:	2800      	cmp	r0, #0
 800c07a:	f000 8288 	beq.w	800c58e <SPINBOX_Callback+0x8b2>
 800c07e:	68ab      	ldr	r3, [r5, #8]
 800c080:	42bb      	cmp	r3, r7
 800c082:	f040 8259 	bne.w	800c538 <SPINBOX_Callback+0x85c>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	3b09      	subs	r3, #9
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	f63f af22 	bhi.w	800bed4 <SPINBOX_Callback+0x1f8>
 800c090:	6868      	ldr	r0, [r5, #4]
 800c092:	f003 fe7b 	bl	800fd8c <WM_SetFocus>
 800c096:	e71d      	b.n	800bed4 <SPINBOX_Callback+0x1f8>
 800c098:	4620      	mov	r0, r4
 800c09a:	f00d f869 	bl	8019170 <GUI_ALLOC_LockH>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a6:	6815      	ldr	r5, [r2, #0]
 800c0a8:	f00d f874 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f004 f8d3 	bl	8010258 <WM_GetWindowSizeY>
 800c0b2:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f340 81a7 	ble.w	800c40c <SPINBOX_Callback+0x730>
 800c0be:	f004 f84b 	bl	8010158 <WM_ShowWindow>
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f00d f854 	bl	8019170 <GUI_ALLOC_LockH>
 800c0c8:	ab12      	add	r3, sp, #72	; 0x48
 800c0ca:	f843 0d10 	str.w	r0, [r3, #-16]!
 800c0ce:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800c0d2:	6815      	ldr	r5, [r2, #0]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f00d f85d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c0da:	2d00      	cmp	r5, #0
 800c0dc:	f43f aed5 	beq.w	800be8a <SPINBOX_Callback+0x1ae>
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	47a8      	blx	r5
 800c0e4:	e6d1      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f00d f842 	bl	8019170 <GUI_ALLOC_LockH>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	a812      	add	r0, sp, #72	; 0x48
 800c0f0:	f840 2d20 	str.w	r2, [r0, #-32]!
 800c0f4:	f892 50a0 	ldrb.w	r5, [r2, #160]	; 0xa0
 800c0f8:	f00d f84c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f00d f837 	bl	8019170 <GUI_ALLOC_LockH>
 800c102:	900b      	str	r0, [sp, #44]	; 0x2c
 800c104:	f990 60a2 	ldrsb.w	r6, [r0, #162]	; 0xa2
 800c108:	4603      	mov	r3, r0
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	f040 8162 	bne.w	800c3d4 <SPINBOX_Callback+0x6f8>
 800c110:	a80b      	add	r0, sp, #44	; 0x2c
 800c112:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 800c116:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 800c11a:	f00d f83b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c11e:	b26b      	sxtb	r3, r5
 800c120:	3301      	adds	r3, #1
 800c122:	f000 814f 	beq.w	800c3c4 <SPINBOX_Callback+0x6e8>
 800c126:	4638      	mov	r0, r7
 800c128:	f003 fd84 	bl	800fc34 <WM_IsFocusable>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f000 813e 	beq.w	800c3ae <SPINBOX_Callback+0x6d2>
 800c132:	2d00      	cmp	r5, #0
 800c134:	ad0e      	add	r5, sp, #56	; 0x38
 800c136:	bf14      	ite	ne
 800c138:	f04f 0c13 	movne.w	ip, #19
 800c13c:	f04f 0c11 	moveq.w	ip, #17
 800c140:	4629      	mov	r1, r5
 800c142:	f04f 0e0e 	mov.w	lr, #14
 800c146:	aa0c      	add	r2, sp, #48	; 0x30
 800c148:	2301      	movs	r3, #1
 800c14a:	4638      	mov	r0, r7
 800c14c:	9410      	str	r4, [sp, #64]	; 0x40
 800c14e:	970f      	str	r7, [sp, #60]	; 0x3c
 800c150:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800c154:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800c158:	9211      	str	r2, [sp, #68]	; 0x44
 800c15a:	930d      	str	r3, [sp, #52]	; 0x34
 800c15c:	f005 fba0 	bl	80118a0 <WM_SendMessage>
 800c160:	4638      	mov	r0, r7
 800c162:	4629      	mov	r1, r5
 800c164:	960d      	str	r6, [sp, #52]	; 0x34
 800c166:	f005 fb9b 	bl	80118a0 <WM_SendMessage>
 800c16a:	4620      	mov	r0, r4
 800c16c:	f00d f800 	bl	8019170 <GUI_ALLOC_LockH>
 800c170:	2132      	movs	r1, #50	; 0x32
 800c172:	4603      	mov	r3, r0
 800c174:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 800c178:	930e      	str	r3, [sp, #56]	; 0x38
 800c17a:	f002 fc4b 	bl	800ea14 <WM_RestartTimer>
 800c17e:	4628      	mov	r0, r5
 800c180:	f00d f808 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c184:	e681      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c186:	4638      	mov	r0, r7
 800c188:	68e9      	ldr	r1, [r5, #12]
 800c18a:	f003 f953 	bl	800f434 <WM_SetEnableState>
 800c18e:	e67c      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c190:	4620      	mov	r0, r4
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	f00c ffec 	bl	8019170 <GUI_ALLOC_LockH>
 800c198:	900e      	str	r0, [sp, #56]	; 0x38
 800c19a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c19c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800c1a0:	6809      	ldr	r1, [r1, #0]
 800c1a2:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800c1a6:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 800c1aa:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800c1ae:	9102      	str	r1, [sp, #8]
 800c1b0:	8881      	ldrh	r1, [r0, #4]
 800c1b2:	8800      	ldrh	r0, [r0, #0]
 800c1b4:	9007      	str	r0, [sp, #28]
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	ebce 0b0b 	rsb	fp, lr, fp
 800c1bc:	9205      	str	r2, [sp, #20]
 800c1be:	9106      	str	r1, [sp, #24]
 800c1c0:	f00c ffe8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c1c4:	f1ba 0f01 	cmp.w	sl, #1
 800c1c8:	fa1f fb8b 	uxth.w	fp, fp
 800c1cc:	9b00      	ldr	r3, [sp, #0]
 800c1ce:	f000 81ce 	beq.w	800c56e <SPINBOX_Callback+0x892>
 800c1d2:	f0c0 81b6 	bcc.w	800c542 <SPINBOX_Callback+0x866>
 800c1d6:	f1ba 0f02 	cmp.w	sl, #2
 800c1da:	d10c      	bne.n	800c1f6 <SPINBOX_Callback+0x51a>
 800c1dc:	9902      	ldr	r1, [sp, #8]
 800c1de:	b28b      	uxth	r3, r1
 800c1e0:	9905      	ldr	r1, [sp, #20]
 800c1e2:	ebc3 0a0b 	rsb	sl, r3, fp
 800c1e6:	4419      	add	r1, r3
 800c1e8:	fa1f fa8a 	uxth.w	sl, sl
 800c1ec:	f8cd a010 	str.w	sl, [sp, #16]
 800c1f0:	fa1f f981 	uxth.w	r9, r1
 800c1f4:	b21f      	sxth	r7, r3
 800c1f6:	45b8      	cmp	r8, r7
 800c1f8:	f2c0 80f4 	blt.w	800c3e4 <SPINBOX_Callback+0x708>
 800c1fc:	fa0f f189 	sxth.w	r1, r9
 800c200:	4588      	cmp	r8, r1
 800c202:	f300 80ef 	bgt.w	800c3e4 <SPINBOX_Callback+0x708>
 800c206:	9a03      	ldr	r2, [sp, #12]
 800c208:	b21b      	sxth	r3, r3
 800c20a:	429a      	cmp	r2, r3
 800c20c:	f2c0 80ea 	blt.w	800c3e4 <SPINBOX_Callback+0x708>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	fa0f fa83 	sxth.w	sl, r3
 800c216:	4552      	cmp	r2, sl
 800c218:	f300 80e4 	bgt.w	800c3e4 <SPINBOX_Callback+0x708>
 800c21c:	f04f 0901 	mov.w	r9, #1
 800c220:	46c8      	mov	r8, r9
 800c222:	f04f 0a02 	mov.w	sl, #2
 800c226:	e6e1      	b.n	800bfec <SPINBOX_Callback+0x310>
 800c228:	4620      	mov	r0, r4
 800c22a:	9201      	str	r2, [sp, #4]
 800c22c:	f00c ffa0 	bl	8019170 <GUI_ALLOC_LockH>
 800c230:	900e      	str	r0, [sp, #56]	; 0x38
 800c232:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c234:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800c238:	6809      	ldr	r1, [r1, #0]
 800c23a:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800c23e:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 800c242:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 800c246:	9104      	str	r1, [sp, #16]
 800c248:	8881      	ldrh	r1, [r0, #4]
 800c24a:	8800      	ldrh	r0, [r0, #0]
 800c24c:	9007      	str	r0, [sp, #28]
 800c24e:	4628      	mov	r0, r5
 800c250:	ebce 0b0b 	rsb	fp, lr, fp
 800c254:	9305      	str	r3, [sp, #20]
 800c256:	9106      	str	r1, [sp, #24]
 800c258:	f00c ff9c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c25c:	f1b9 0f01 	cmp.w	r9, #1
 800c260:	fa1f fb8b 	uxth.w	fp, fp
 800c264:	9a01      	ldr	r2, [sp, #4]
 800c266:	f000 81ba 	beq.w	800c5de <SPINBOX_Callback+0x902>
 800c26a:	f0c0 81a0 	bcc.w	800c5ae <SPINBOX_Callback+0x8d2>
 800c26e:	f1b9 0f02 	cmp.w	r9, #2
 800c272:	d10d      	bne.n	800c290 <SPINBOX_Callback+0x5b4>
 800c274:	9904      	ldr	r1, [sp, #16]
 800c276:	9a05      	ldr	r2, [sp, #20]
 800c278:	fa1f f881 	uxth.w	r8, r1
 800c27c:	ebc8 090b 	rsb	r9, r8, fp
 800c280:	4442      	add	r2, r8
 800c282:	fa1f f989 	uxth.w	r9, r9
 800c286:	f8cd 9008 	str.w	r9, [sp, #8]
 800c28a:	b292      	uxth	r2, r2
 800c28c:	fa0f fa88 	sxth.w	sl, r8
 800c290:	4557      	cmp	r7, sl
 800c292:	f280 8109 	bge.w	800c4a8 <SPINBOX_Callback+0x7cc>
 800c296:	7a33      	ldrb	r3, [r6, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f040 811b 	bne.w	800c4d4 <SPINBOX_Callback+0x7f8>
 800c29e:	27ff      	movs	r7, #255	; 0xff
 800c2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a2:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 800c2a6:	b272      	sxtb	r2, r6
 800c2a8:	3201      	adds	r2, #1
 800c2aa:	f43f ade9 	beq.w	800be80 <SPINBOX_Callback+0x1a4>
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f00c ff5e 	bl	8019170 <GUI_ALLOC_LockH>
 800c2b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c2b6:	900c      	str	r0, [sp, #48]	; 0x30
 800c2b8:	079b      	lsls	r3, r3, #30
 800c2ba:	f57f addd 	bpl.w	800be78 <SPINBOX_Callback+0x19c>
 800c2be:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800c2c2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c2c6:	b2f6      	uxtb	r6, r6
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	40b1      	lsls	r1, r6
 800c2cc:	ea22 0201 	bic.w	r2, r2, r1
 800c2d0:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f43f adc2 	beq.w	800be5e <SPINBOX_Callback+0x182>
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f002 fb40 	bl	800e960 <WM_DeleteTimer>
 800c2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 800c2ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800c2ee:	e5b6      	b.n	800be5e <SPINBOX_Callback+0x182>
 800c2f0:	f7fd f8c2 	bl	8009478 <WIDGET_AndState>
 800c2f4:	e50c      	b.n	800bd10 <SPINBOX_Callback+0x34>
 800c2f6:	7a73      	ldrb	r3, [r6, #9]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f47f aeae 	bne.w	800c05a <SPINBOX_Callback+0x37e>
 800c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c300:	fa4f f688 	sxtb.w	r6, r8
 800c304:	1c71      	adds	r1, r6, #1
 800c306:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 800c30a:	f000 8186 	beq.w	800c61a <SPINBOX_Callback+0x93e>
 800c30e:	4620      	mov	r0, r4
 800c310:	f00c ff2e 	bl	8019170 <GUI_ALLOC_LockH>
 800c314:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c316:	900b      	str	r0, [sp, #44]	; 0x2c
 800c318:	079a      	lsls	r2, r3, #30
 800c31a:	f100 819c 	bmi.w	800c656 <SPINBOX_Callback+0x97a>
 800c31e:	af0b      	add	r7, sp, #44	; 0x2c
 800c320:	4638      	mov	r0, r7
 800c322:	f00c ff37 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c326:	4620      	mov	r0, r4
 800c328:	f00c ff22 	bl	8019170 <GUI_ALLOC_LockH>
 800c32c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c330:	900e      	str	r0, [sp, #56]	; 0x38
 800c332:	4681      	mov	r9, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 8181 	beq.w	800c63c <SPINBOX_Callback+0x960>
 800c33a:	4628      	mov	r0, r5
 800c33c:	f00c ff2a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c340:	4620      	mov	r0, r4
 800c342:	f00c ff15 	bl	8019170 <GUI_ALLOC_LockH>
 800c346:	900b      	str	r0, [sp, #44]	; 0x2c
 800c348:	f990 90a2 	ldrsb.w	r9, [r0, #162]	; 0xa2
 800c34c:	4603      	mov	r3, r0
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	f040 815a 	bne.w	800c60a <SPINBOX_Callback+0x92e>
 800c356:	4638      	mov	r0, r7
 800c358:	f8b3 a088 	ldrh.w	sl, [r3, #136]	; 0x88
 800c35c:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 800c360:	f00c ff18 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c364:	3601      	adds	r6, #1
 800c366:	f43f ae78 	beq.w	800c05a <SPINBOX_Callback+0x37e>
 800c36a:	4638      	mov	r0, r7
 800c36c:	f003 fc62 	bl	800fc34 <WM_IsFocusable>
 800c370:	2800      	cmp	r0, #0
 800c372:	f000 81b7 	beq.w	800c6e4 <SPINBOX_Callback+0xa08>
 800c376:	f1b8 0f00 	cmp.w	r8, #0
 800c37a:	bf14      	ite	ne
 800c37c:	f04f 0e13 	movne.w	lr, #19
 800c380:	f04f 0e11 	moveq.w	lr, #17
 800c384:	aa0c      	add	r2, sp, #48	; 0x30
 800c386:	2301      	movs	r3, #1
 800c388:	4638      	mov	r0, r7
 800c38a:	4629      	mov	r1, r5
 800c38c:	260e      	movs	r6, #14
 800c38e:	9410      	str	r4, [sp, #64]	; 0x40
 800c390:	970f      	str	r7, [sp, #60]	; 0x3c
 800c392:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800c396:	960e      	str	r6, [sp, #56]	; 0x38
 800c398:	9211      	str	r2, [sp, #68]	; 0x44
 800c39a:	930d      	str	r3, [sp, #52]	; 0x34
 800c39c:	f005 fa80 	bl	80118a0 <WM_SendMessage>
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800c3a8:	f005 fa7a 	bl	80118a0 <WM_SendMessage>
 800c3ac:	e655      	b.n	800c05a <SPINBOX_Callback+0x37e>
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	f040 8125 	bne.w	800c600 <SPINBOX_Callback+0x924>
 800c3b6:	f001 fd21 	bl	800ddfc <EDIT_GetValue>
 800c3ba:	eb08 0100 	add.w	r1, r8, r0
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f001 fd32 	bl	800de28 <EDIT_SetValue>
 800c3c4:	ad0e      	add	r5, sp, #56	; 0x38
 800c3c6:	e6d0      	b.n	800c16a <SPINBOX_Callback+0x48e>
 800c3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ca:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800c3ce:	f003 fcdd 	bl	800fd8c <WM_SetFocus>
 800c3d2:	e4ca      	b.n	800bd6a <SPINBOX_Callback+0x8e>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 800c3da:	a80b      	add	r0, sp, #44	; 0x2c
 800c3dc:	f00c feda 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c3e0:	ad0e      	add	r5, sp, #56	; 0x38
 800c3e2:	e6c2      	b.n	800c16a <SPINBOX_Callback+0x48e>
 800c3e4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c3e8:	46c8      	mov	r8, r9
 800c3ea:	f04f 0a00 	mov.w	sl, #0
 800c3ee:	e5fd      	b.n	800bfec <SPINBOX_Callback+0x310>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f003 fc4b 	bl	800fc8c <WM_NotifyParent>
 800c3f6:	e548      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c3f8:	f002 fab2 	bl	800e960 <WM_DeleteTimer>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fe:	2100      	movs	r1, #0
 800c400:	22ff      	movs	r2, #255	; 0xff
 800c402:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 800c406:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800c40a:	e58d      	b.n	800bf28 <SPINBOX_Callback+0x24c>
 800c40c:	f003 fee4 	bl	80101d8 <WM_HideWindow>
 800c410:	e657      	b.n	800c0c2 <SPINBOX_Callback+0x3e6>
 800c412:	2700      	movs	r7, #0
 800c414:	9704      	str	r7, [sp, #16]
 800c416:	46b9      	mov	r9, r7
 800c418:	463b      	mov	r3, r7
 800c41a:	e5cf      	b.n	800bfbc <SPINBOX_Callback+0x2e0>
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	fa1f f289 	uxth.w	r2, r9
 800c422:	fa1f fb8b 	uxth.w	fp, fp
 800c426:	ebc3 070b 	rsb	r7, r3, fp
 800c42a:	4613      	mov	r3, r2
 800c42c:	1aff      	subs	r7, r7, r3
 800c42e:	ebc2 020b 	rsb	r2, r2, fp
 800c432:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800c436:	b23f      	sxth	r7, r7
 800c438:	fa1f f982 	uxth.w	r9, r2
 800c43c:	f8cd a010 	str.w	sl, [sp, #16]
 800c440:	e5bc      	b.n	800bfbc <SPINBOX_Callback+0x2e0>
 800c442:	9902      	ldr	r1, [sp, #8]
 800c444:	fa1f f389 	uxth.w	r3, r9
 800c448:	4449      	add	r1, r9
 800c44a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800c44e:	fa1f f981 	uxth.w	r9, r1
 800c452:	f8cd a010 	str.w	sl, [sp, #16]
 800c456:	b21f      	sxth	r7, r3
 800c458:	e5b0      	b.n	800bfbc <SPINBOX_Callback+0x2e0>
 800c45a:	f04f 0a00 	mov.w	sl, #0
 800c45e:	f8cd a008 	str.w	sl, [sp, #8]
 800c462:	4652      	mov	r2, sl
 800c464:	46d0      	mov	r8, sl
 800c466:	e4c1      	b.n	800bdec <SPINBOX_Callback+0x110>
 800c468:	9902      	ldr	r1, [sp, #8]
 800c46a:	fa1f fb8b 	uxth.w	fp, fp
 800c46e:	fa1f f388 	uxth.w	r3, r8
 800c472:	4698      	mov	r8, r3
 800c474:	ebc1 0a0b 	rsb	sl, r1, fp
 800c478:	ebc3 030b 	rsb	r3, r3, fp
 800c47c:	ebc8 0a0a 	rsb	sl, r8, sl
 800c480:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800c484:	fa0f fa8a 	sxth.w	sl, sl
 800c488:	b29a      	uxth	r2, r3
 800c48a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c48e:	e4ad      	b.n	800bdec <SPINBOX_Callback+0x110>
 800c490:	9a02      	ldr	r2, [sp, #8]
 800c492:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800c496:	4442      	add	r2, r8
 800c498:	fa1f f888 	uxth.w	r8, r8
 800c49c:	b292      	uxth	r2, r2
 800c49e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4a2:	fa0f fa88 	sxth.w	sl, r8
 800c4a6:	e4a1      	b.n	800bdec <SPINBOX_Callback+0x110>
 800c4a8:	b212      	sxth	r2, r2
 800c4aa:	4297      	cmp	r7, r2
 800c4ac:	f73f aef3 	bgt.w	800c296 <SPINBOX_Callback+0x5ba>
 800c4b0:	9a03      	ldr	r2, [sp, #12]
 800c4b2:	fa0f f888 	sxth.w	r8, r8
 800c4b6:	4542      	cmp	r2, r8
 800c4b8:	f6ff aeed 	blt.w	800c296 <SPINBOX_Callback+0x5ba>
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	fa0f f983 	sxth.w	r9, r3
 800c4c2:	454a      	cmp	r2, r9
 800c4c4:	f73f aee7 	bgt.w	800c296 <SPINBOX_Callback+0x5ba>
 800c4c8:	2701      	movs	r7, #1
 800c4ca:	e4a3      	b.n	800be14 <SPINBOX_Callback+0x138>
 800c4cc:	2103      	movs	r1, #3
 800c4ce:	f003 fbdd 	bl	800fc8c <WM_NotifyParent>
 800c4d2:	e4da      	b.n	800be8a <SPINBOX_Callback+0x1ae>
 800c4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d6:	f893 70a1 	ldrb.w	r7, [r3, #161]	; 0xa1
 800c4da:	b27a      	sxtb	r2, r7
 800c4dc:	3201      	adds	r2, #1
 800c4de:	f43f accf 	beq.w	800be80 <SPINBOX_Callback+0x1a4>
 800c4e2:	2600      	movs	r6, #0
 800c4e4:	f883 60a2 	strb.w	r6, [r3, #162]	; 0xa2
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f00c fe41 	bl	8019170 <GUI_ALLOC_LockH>
 800c4ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c4f0:	900c      	str	r0, [sp, #48]	; 0x30
 800c4f2:	0799      	lsls	r1, r3, #30
 800c4f4:	d51a      	bpl.n	800c52c <SPINBOX_Callback+0x850>
 800c4f6:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800c4fa:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800c4fe:	b2ff      	uxtb	r7, r7
 800c500:	2101      	movs	r1, #1
 800c502:	40b9      	lsls	r1, r7
 800c504:	ea22 0201 	bic.w	r2, r2, r1
 800c508:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 810f 	bne.w	800c730 <SPINBOX_Callback+0xa54>
 800c512:	4620      	mov	r0, r4
 800c514:	2102      	movs	r1, #2
 800c516:	f003 fbb9 	bl	800fc8c <WM_NotifyParent>
 800c51a:	4620      	mov	r0, r4
 800c51c:	4629      	mov	r1, r5
 800c51e:	463a      	mov	r2, r7
 800c520:	f7ff fb68 	bl	800bbf4 <SPINBOX__GetButtonRect>
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f005 f9e6 	bl	80118f8 <WM_InvalidateRect>
 800c52c:	a80c      	add	r0, sp, #48	; 0x30
 800c52e:	f00c fe31 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c532:	27ff      	movs	r7, #255	; 0xff
 800c534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c536:	e4a3      	b.n	800be80 <SPINBOX_Callback+0x1a4>
 800c538:	4638      	mov	r0, r7
 800c53a:	4629      	mov	r1, r5
 800c53c:	f005 f9b0 	bl	80118a0 <WM_SendMessage>
 800c540:	e4c8      	b.n	800bed4 <SPINBOX_Callback+0x1f8>
 800c542:	9b06      	ldr	r3, [sp, #24]
 800c544:	9907      	ldr	r1, [sp, #28]
 800c546:	1a5a      	subs	r2, r3, r1
 800c548:	9b05      	ldr	r3, [sp, #20]
 800c54a:	9902      	ldr	r1, [sp, #8]
 800c54c:	b292      	uxth	r2, r2
 800c54e:	1ad7      	subs	r7, r2, r3
 800c550:	b28b      	uxth	r3, r1
 800c552:	1aff      	subs	r7, r7, r3
 800c554:	1ad2      	subs	r2, r2, r3
 800c556:	ebc3 030b 	rsb	r3, r3, fp
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	b23f      	sxth	r7, r7
 800c564:	fa1f f982 	uxth.w	r9, r2
 800c568:	f10b 0301 	add.w	r3, fp, #1
 800c56c:	e643      	b.n	800c1f6 <SPINBOX_Callback+0x51a>
 800c56e:	9a02      	ldr	r2, [sp, #8]
 800c570:	9905      	ldr	r1, [sp, #20]
 800c572:	b293      	uxth	r3, r2
 800c574:	4419      	add	r1, r3
 800c576:	ebc3 030b 	rsb	r3, r3, fp
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	fa1f f981 	uxth.w	r9, r1
 800c586:	f10b 0301 	add.w	r3, fp, #1
 800c58a:	b217      	sxth	r7, r2
 800c58c:	e633      	b.n	800c1f6 <SPINBOX_Callback+0x51a>
 800c58e:	4638      	mov	r0, r7
 800c590:	f001 fc34 	bl	800ddfc <EDIT_GetValue>
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	2b11      	cmp	r3, #17
 800c598:	4601      	mov	r1, r0
 800c59a:	d040      	beq.n	800c61e <SPINBOX_Callback+0x942>
 800c59c:	2b13      	cmp	r3, #19
 800c59e:	f47f ac99 	bne.w	800bed4 <SPINBOX_Callback+0x1f8>
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	ebc8 0101 	rsb	r1, r8, r1
 800c5a8:	f001 fc3e 	bl	800de28 <EDIT_SetValue>
 800c5ac:	e492      	b.n	800bed4 <SPINBOX_Callback+0x1f8>
 800c5ae:	9b06      	ldr	r3, [sp, #24]
 800c5b0:	9907      	ldr	r1, [sp, #28]
 800c5b2:	1a5a      	subs	r2, r3, r1
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	9904      	ldr	r1, [sp, #16]
 800c5b8:	b292      	uxth	r2, r2
 800c5ba:	ebc3 0a02 	rsb	sl, r3, r2
 800c5be:	b28b      	uxth	r3, r1
 800c5c0:	ebc3 0a0a 	rsb	sl, r3, sl
 800c5c4:	1ad2      	subs	r2, r2, r3
 800c5c6:	ebc3 030b 	rsb	r3, r3, fp
 800c5ca:	ea4f 085b 	mov.w	r8, fp, lsr #1
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	fa0f fa8a 	sxth.w	sl, sl
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	9302      	str	r3, [sp, #8]
 800c5d8:	f108 0801 	add.w	r8, r8, #1
 800c5dc:	e658      	b.n	800c290 <SPINBOX_Callback+0x5b4>
 800c5de:	9a04      	ldr	r2, [sp, #16]
 800c5e0:	b293      	uxth	r3, r2
 800c5e2:	9a05      	ldr	r2, [sp, #20]
 800c5e4:	441a      	add	r2, r3
 800c5e6:	ebc3 030b 	rsb	r3, r3, fp
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	9302      	str	r3, [sp, #8]
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	ea4f 085b 	mov.w	r8, fp, lsr #1
 800c5f4:	b292      	uxth	r2, r2
 800c5f6:	f108 0801 	add.w	r8, r8, #1
 800c5fa:	fa0f fa83 	sxth.w	sl, r3
 800c5fe:	e647      	b.n	800c290 <SPINBOX_Callback+0x5b4>
 800c600:	f001 fbfc 	bl	800ddfc <EDIT_GetValue>
 800c604:	ebc8 0100 	rsb	r1, r8, r0
 800c608:	e6d9      	b.n	800c3be <SPINBOX_Callback+0x6e2>
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800c610:	4638      	mov	r0, r7
 800c612:	f00c fdbf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c618:	e520      	b.n	800c05c <SPINBOX_Callback+0x380>
 800c61a:	af0b      	add	r7, sp, #44	; 0x2c
 800c61c:	e690      	b.n	800c340 <SPINBOX_Callback+0x664>
 800c61e:	4638      	mov	r0, r7
 800c620:	4441      	add	r1, r8
 800c622:	f001 fc01 	bl	800de28 <EDIT_SetValue>
 800c626:	e455      	b.n	800bed4 <SPINBOX_Callback+0x1f8>
 800c628:	4618      	mov	r0, r3
 800c62a:	f002 f999 	bl	800e960 <WM_DeleteTimer>
 800c62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c630:	22ff      	movs	r2, #255	; 0xff
 800c632:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 800c636:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800c63a:	e4fe      	b.n	800c03a <SPINBOX_Callback+0x35e>
 800c63c:	4620      	mov	r0, r4
 800c63e:	f240 41d2 	movw	r1, #1234	; 0x4d2
 800c642:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c646:	f002 f9a5 	bl	800e994 <WM_CreateTimer>
 800c64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c64c:	f8c9 009c 	str.w	r0, [r9, #156]	; 0x9c
 800c650:	f883 80a0 	strb.w	r8, [r3, #160]	; 0xa0
 800c654:	e671      	b.n	800c33a <SPINBOX_Callback+0x65e>
 800c656:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
 800c65a:	ea4a 0a03 	orr.w	sl, sl, r3
 800c65e:	f880 a0a3 	strb.w	sl, [r0, #163]	; 0xa3
 800c662:	2101      	movs	r1, #1
 800c664:	4620      	mov	r0, r4
 800c666:	f003 fb11 	bl	800fc8c <WM_NotifyParent>
 800c66a:	4620      	mov	r0, r4
 800c66c:	f00c fd80 	bl	8019170 <GUI_ALLOC_LockH>
 800c670:	4603      	mov	r3, r0
 800c672:	a812      	add	r0, sp, #72	; 0x48
 800c674:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800c678:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 800c67c:	f840 3d18 	str.w	r3, [r0, #-24]!
 800c680:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800c684:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c688:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 800c68a:	f893 b08c 	ldrb.w	fp, [r3, #140]	; 0x8c
 800c68e:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 800c692:	683f      	ldr	r7, [r7, #0]
 800c694:	ebce 030c 	rsb	r3, lr, ip
 800c698:	b29b      	uxth	r3, r3
 800c69a:	1a8a      	subs	r2, r1, r2
 800c69c:	9201      	str	r2, [sp, #4]
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	f00c fd78 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c6a4:	f1bb 0f01 	cmp.w	fp, #1
 800c6a8:	9a01      	ldr	r2, [sp, #4]
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	d04a      	beq.n	800c744 <SPINBOX_Callback+0xa68>
 800c6ae:	d32a      	bcc.n	800c706 <SPINBOX_Callback+0xa2a>
 800c6b0:	f1bb 0f02 	cmp.w	fp, #2
 800c6b4:	d111      	bne.n	800c6da <SPINBOX_Callback+0x9fe>
 800c6b6:	b2bf      	uxth	r7, r7
 800c6b8:	1bdb      	subs	r3, r3, r7
 800c6ba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800c6be:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 800c6c2:	f1b9 0f00 	cmp.w	r9, #0
 800c6c6:	d154      	bne.n	800c772 <SPINBOX_Callback+0xa96>
 800c6c8:	b292      	uxth	r2, r2
 800c6ca:	ebca 0302 	rsb	r3, sl, r2
 800c6ce:	1bdb      	subs	r3, r3, r7
 800c6d0:	1bd2      	subs	r2, r2, r7
 800c6d2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800c6d6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	f005 f90b 	bl	80118f8 <WM_InvalidateRect>
 800c6e2:	e61c      	b.n	800c31e <SPINBOX_Callback+0x642>
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ea:	d107      	bne.n	800c6fc <SPINBOX_Callback+0xa20>
 800c6ec:	f001 fb86 	bl	800ddfc <EDIT_GetValue>
 800c6f0:	eb0a 0100 	add.w	r1, sl, r0
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f001 fb97 	bl	800de28 <EDIT_SetValue>
 800c6fa:	e4ae      	b.n	800c05a <SPINBOX_Callback+0x37e>
 800c6fc:	f001 fb7e 	bl	800ddfc <EDIT_GetValue>
 800c700:	ebca 0100 	rsb	r1, sl, r0
 800c704:	e7f6      	b.n	800c6f4 <SPINBOX_Callback+0xa18>
 800c706:	b291      	uxth	r1, r2
 800c708:	ebca 0001 	rsb	r0, sl, r1
 800c70c:	b2ba      	uxth	r2, r7
 800c70e:	1a80      	subs	r0, r0, r2
 800c710:	1a89      	subs	r1, r1, r2
 800c712:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800c716:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 800c71a:	f1b9 0f00 	cmp.w	r9, #0
 800c71e:	d022      	beq.n	800c766 <SPINBOX_Callback+0xa8a>
 800c720:	0859      	lsrs	r1, r3, #1
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	1c4a      	adds	r2, r1, #1
 800c726:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800c72a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800c72e:	e7d4      	b.n	800c6da <SPINBOX_Callback+0x9fe>
 800c730:	4618      	mov	r0, r3
 800c732:	f002 f915 	bl	800e960 <WM_DeleteTimer>
 800c736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c738:	22ff      	movs	r2, #255	; 0xff
 800c73a:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
 800c73e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800c742:	e6e6      	b.n	800c512 <SPINBOX_Callback+0x836>
 800c744:	b2bf      	uxth	r7, r7
 800c746:	44ba      	add	sl, r7
 800c748:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800c74c:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 800c750:	f1b9 0f00 	cmp.w	r9, #0
 800c754:	d007      	beq.n	800c766 <SPINBOX_Callback+0xa8a>
 800c756:	085a      	lsrs	r2, r3, #1
 800c758:	3201      	adds	r2, #1
 800c75a:	1bdb      	subs	r3, r3, r7
 800c75c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800c760:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800c764:	e7b9      	b.n	800c6da <SPINBOX_Callback+0x9fe>
 800c766:	085b      	lsrs	r3, r3, #1
 800c768:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800c76c:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 800c770:	e7b3      	b.n	800c6da <SPINBOX_Callback+0x9fe>
 800c772:	44ba      	add	sl, r7
 800c774:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800c778:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 800c77c:	e7ad      	b.n	800c6da <SPINBOX_Callback+0x9fe>
 800c77e:	bf00      	nop

0800c780 <SPINBOX__GetButtonRectEx>:
 800c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c784:	6a0b      	ldr	r3, [r1, #32]
 800c786:	b082      	sub	sp, #8
 800c788:	460c      	mov	r4, r1
 800c78a:	f893 8000 	ldrb.w	r8, [r3]
 800c78e:	f00c fcef 	bl	8019170 <GUI_ALLOC_LockH>
 800c792:	4603      	mov	r3, r0
 800c794:	a802      	add	r0, sp, #8
 800c796:	885e      	ldrh	r6, [r3, #2]
 800c798:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800c79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79e:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 800c7a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c7a6:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 800c7aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c7ae:	ebc6 060c 	rsb	r6, r6, ip
 800c7b2:	6817      	ldr	r7, [r2, #0]
 800c7b4:	f8b3 908a 	ldrh.w	r9, [r3, #138]	; 0x8a
 800c7b8:	ebc1 0a0e 	rsb	sl, r1, lr
 800c7bc:	f00c fcea 	bl	8019194 <GUI_ALLOC_UnlockH>
 800c7c0:	2d01      	cmp	r5, #1
 800c7c2:	b2b6      	uxth	r6, r6
 800c7c4:	d037      	beq.n	800c836 <SPINBOX__GetButtonRectEx+0xb6>
 800c7c6:	d31f      	bcc.n	800c808 <SPINBOX__GetButtonRectEx+0x88>
 800c7c8:	2d02      	cmp	r5, #2
 800c7ca:	d00a      	beq.n	800c7e2 <SPINBOX__GetButtonRectEx+0x62>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6122      	str	r2, [r4, #16]
 800c7d6:	6160      	str	r0, [r4, #20]
 800c7d8:	61a1      	str	r1, [r4, #24]
 800c7da:	61e3      	str	r3, [r4, #28]
 800c7dc:	b002      	add	sp, #8
 800c7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e2:	b2bf      	uxth	r7, r7
 800c7e4:	1bf3      	subs	r3, r6, r7
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	d12f      	bne.n	800c84e <SPINBOX__GetButtonRectEx+0xce>
 800c7ee:	fa1f fa8a 	uxth.w	sl, sl
 800c7f2:	ebc9 020a 	rsb	r2, r9, sl
 800c7f6:	1bd2      	subs	r2, r2, r7
 800c7f8:	ebc7 0a0a 	rsb	sl, r7, sl
 800c7fc:	b212      	sxth	r2, r2
 800c7fe:	fa0f f18a 	sxth.w	r1, sl
 800c802:	b238      	sxth	r0, r7
 800c804:	b21b      	sxth	r3, r3
 800c806:	e7e5      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>
 800c808:	fa1f fa8a 	uxth.w	sl, sl
 800c80c:	ebc9 020a 	rsb	r2, r9, sl
 800c810:	b2bb      	uxth	r3, r7
 800c812:	1ad2      	subs	r2, r2, r3
 800c814:	ebc3 0a0a 	rsb	sl, r3, sl
 800c818:	b292      	uxth	r2, r2
 800c81a:	fa1f fa8a 	uxth.w	sl, sl
 800c81e:	f1b8 0f00 	cmp.w	r8, #0
 800c822:	d023      	beq.n	800c86c <SPINBOX__GetButtonRectEx+0xec>
 800c824:	0870      	lsrs	r0, r6, #1
 800c826:	1af3      	subs	r3, r6, r3
 800c828:	3001      	adds	r0, #1
 800c82a:	b200      	sxth	r0, r0
 800c82c:	b21b      	sxth	r3, r3
 800c82e:	b212      	sxth	r2, r2
 800c830:	fa0f f18a 	sxth.w	r1, sl
 800c834:	e7ce      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>
 800c836:	b2ba      	uxth	r2, r7
 800c838:	eb02 0109 	add.w	r1, r2, r9
 800c83c:	b289      	uxth	r1, r1
 800c83e:	f1b8 0f00 	cmp.w	r8, #0
 800c842:	d10b      	bne.n	800c85c <SPINBOX__GetButtonRectEx+0xdc>
 800c844:	b212      	sxth	r2, r2
 800c846:	b209      	sxth	r1, r1
 800c848:	0873      	lsrs	r3, r6, #1
 800c84a:	4610      	mov	r0, r2
 800c84c:	e7c2      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>
 800c84e:	44b9      	add	r9, r7
 800c850:	b23a      	sxth	r2, r7
 800c852:	fa0f f189 	sxth.w	r1, r9
 800c856:	b21b      	sxth	r3, r3
 800c858:	4610      	mov	r0, r2
 800c85a:	e7bb      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>
 800c85c:	0870      	lsrs	r0, r6, #1
 800c85e:	1ab3      	subs	r3, r6, r2
 800c860:	3001      	adds	r0, #1
 800c862:	b209      	sxth	r1, r1
 800c864:	b200      	sxth	r0, r0
 800c866:	b21b      	sxth	r3, r3
 800c868:	b212      	sxth	r2, r2
 800c86a:	e7b3      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>
 800c86c:	b212      	sxth	r2, r2
 800c86e:	b238      	sxth	r0, r7
 800c870:	fa0f f18a 	sxth.w	r1, sl
 800c874:	0873      	lsrs	r3, r6, #1
 800c876:	e7ad      	b.n	800c7d4 <SPINBOX__GetButtonRectEx+0x54>

0800c878 <SPINBOX_CreateIndirect>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	6944      	ldr	r4, [r0, #20]
 800c87e:	b08f      	sub	sp, #60	; 0x3c
 800c880:	460d      	mov	r5, r1
 800c882:	4616      	mov	r6, r2
 800c884:	4698      	mov	r8, r3
 800c886:	b18c      	cbz	r4, 800c8ac <SPINBOX_CreateIndirect+0x34>
 800c888:	fa0f fa84 	sxth.w	sl, r4
 800c88c:	ea4f 4b24 	mov.w	fp, r4, asr #16
 800c890:	45da      	cmp	sl, fp
 800c892:	8943      	ldrh	r3, [r0, #10]
 800c894:	8981      	ldrh	r1, [r0, #12]
 800c896:	89c7      	ldrh	r7, [r0, #14]
 800c898:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 800c89c:	8904      	ldrh	r4, [r0, #8]
 800c89e:	6982      	ldr	r2, [r0, #24]
 800c8a0:	bfa8      	it	ge
 800c8a2:	2000      	movge	r0, #0
 800c8a4:	db0c      	blt.n	800c8c0 <SPINBOX_CreateIndirect+0x48>
 800c8a6:	b00f      	add	sp, #60	; 0x3c
 800c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ac:	46a2      	mov	sl, r4
 800c8ae:	8943      	ldrh	r3, [r0, #10]
 800c8b0:	8981      	ldrh	r1, [r0, #12]
 800c8b2:	89c7      	ldrh	r7, [r0, #14]
 800c8b4:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 800c8b8:	8904      	ldrh	r4, [r0, #8]
 800c8ba:	6982      	ldr	r2, [r0, #24]
 800c8bc:	f04f 0b64 	mov.w	fp, #100	; 0x64
 800c8c0:	9109      	str	r1, [sp, #36]	; 0x24
 800c8c2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8c4:	930a      	str	r3, [sp, #40]	; 0x28
 800c8c6:	f00a f8d3 	bl	8016a70 <GUI_Lock>
 800c8ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8d0:	f8df e230 	ldr.w	lr, [pc, #560]	; 800cb04 <SPINBOX_CreateIndirect+0x28c>
 800c8d4:	9500      	str	r5, [sp, #0]
 800c8d6:	3278      	adds	r2, #120	; 0x78
 800c8d8:	f04f 0c02 	mov.w	ip, #2
 800c8dc:	b23f      	sxth	r7, r7
 800c8de:	fa0f f989 	sxth.w	r9, r9
 800c8e2:	9203      	str	r2, [sp, #12]
 800c8e4:	fa06 f083 	sxtah	r0, r6, r3
 800c8e8:	fa08 f181 	sxtah	r1, r8, r1
 800c8ec:	463a      	mov	r2, r7
 800c8ee:	464b      	mov	r3, r9
 800c8f0:	f8cd c004 	str.w	ip, [sp, #4]
 800c8f4:	f8cd e008 	str.w	lr, [sp, #8]
 800c8f8:	f005 f920 	bl	8011b3c <WM_CreateWindowAsChild>
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	b928      	cbnz	r0, 800c90c <SPINBOX_CreateIndirect+0x94>
 800c900:	f00a f8ac 	bl	8016a5c <GUI_Unlock>
 800c904:	4640      	mov	r0, r8
 800c906:	b00f      	add	sp, #60	; 0x3c
 800c908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90c:	f00c fc30 	bl	8019170 <GUI_ALLOC_LockH>
 800c910:	b221      	sxth	r1, r4
 800c912:	2210      	movs	r2, #16
 800c914:	900c      	str	r0, [sp, #48]	; 0x30
 800c916:	f7fc fd03 	bl	8009320 <WIDGET__Init>
 800c91a:	4b76      	ldr	r3, [pc, #472]	; (800caf4 <SPINBOX_CreateIndirect+0x27c>)
 800c91c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c91e:	681c      	ldr	r4, [r3, #0]
 800c920:	4975      	ldr	r1, [pc, #468]	; (800caf8 <SPINBOX_CreateIndirect+0x280>)
 800c922:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
 800c926:	2260      	movs	r2, #96	; 0x60
 800c928:	3034      	adds	r0, #52	; 0x34
 800c92a:	f011 fb67 	bl	801dffc <memcpy>
 800c92e:	6863      	ldr	r3, [r4, #4]
 800c930:	4640      	mov	r0, r8
 800c932:	4798      	blx	r3
 800c934:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c938:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800c93c:	f8d3 c000 	ldr.w	ip, [r3]
 800c940:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800c944:	4249      	negs	r1, r1
 800c946:	b95a      	cbnz	r2, 800c960 <SPINBOX_CreateIndirect+0xe8>
 800c948:	187a      	adds	r2, r7, r1
 800c94a:	4591      	cmp	r9, r2
 800c94c:	460b      	mov	r3, r1
 800c94e:	f280 80b7 	bge.w	800cac0 <SPINBOX_CreateIndirect+0x248>
 800c952:	eb09 0201 	add.w	r2, r9, r1
 800c956:	9207      	str	r2, [sp, #28]
 800c958:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 800c95c:	4613      	mov	r3, r2
 800c95e:	e002      	b.n	800c966 <SPINBOX_CreateIndirect+0xee>
 800c960:	9207      	str	r2, [sp, #28]
 800c962:	eb09 0301 	add.w	r3, r9, r1
 800c966:	f1ba 0f00 	cmp.w	sl, #0
 800c96a:	bfb5      	itete	lt
 800c96c:	f1ca 0000 	rsblt	r0, sl, #0
 800c970:	4650      	movge	r0, sl
 800c972:	2602      	movlt	r6, #2
 800c974:	2601      	movge	r6, #1
 800c976:	2809      	cmp	r0, #9
 800c978:	dd09      	ble.n	800c98e <SPINBOX_CreateIndirect+0x116>
 800c97a:	4d60      	ldr	r5, [pc, #384]	; (800cafc <SPINBOX_CreateIndirect+0x284>)
 800c97c:	fb85 e400 	smull	lr, r4, r5, r0
 800c980:	17c0      	asrs	r0, r0, #31
 800c982:	ebc0 00a4 	rsb	r0, r0, r4, asr #2
 800c986:	2809      	cmp	r0, #9
 800c988:	f106 0601 	add.w	r6, r6, #1
 800c98c:	dcf6      	bgt.n	800c97c <SPINBOX_CreateIndirect+0x104>
 800c98e:	f1bb 0f00 	cmp.w	fp, #0
 800c992:	bfb5      	itete	lt
 800c994:	f1cb 0400 	rsblt	r4, fp, #0
 800c998:	465c      	movge	r4, fp
 800c99a:	2502      	movlt	r5, #2
 800c99c:	2501      	movge	r5, #1
 800c99e:	2c09      	cmp	r4, #9
 800c9a0:	dd0a      	ble.n	800c9b8 <SPINBOX_CreateIndirect+0x140>
 800c9a2:	f8df e158 	ldr.w	lr, [pc, #344]	; 800cafc <SPINBOX_CreateIndirect+0x284>
 800c9a6:	fb8e 2004 	smull	r2, r0, lr, r4
 800c9aa:	17e4      	asrs	r4, r4, #31
 800c9ac:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 800c9b0:	2c09      	cmp	r4, #9
 800c9b2:	f105 0501 	add.w	r5, r5, #1
 800c9b6:	dcf6      	bgt.n	800c9a6 <SPINBOX_CreateIndirect+0x12e>
 800c9b8:	9109      	str	r1, [sp, #36]	; 0x24
 800c9ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c9bc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800c9c0:	f000 f942 	bl	800cc48 <EDIT_GetDefaultFont>
 800c9c4:	f00b fa26 	bl	8017e14 <GUI_GetYDistOfFont>
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9cc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c9d0:	4298      	cmp	r0, r3
 800c9d2:	da73      	bge.n	800cabc <SPINBOX_CreateIndirect+0x244>
 800c9d4:	ebc0 0909 	rsb	r9, r0, r9
 800c9d8:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 800c9dc:	ea4f 0469 	mov.w	r4, r9, asr #1
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	ebb7 0e02 	subs.w	lr, r7, r2
 800c9e8:	d44e      	bmi.n	800ca88 <SPINBOX_CreateIndirect+0x210>
 800c9ea:	4843      	ldr	r0, [pc, #268]	; (800caf8 <SPINBOX_CreateIndirect+0x280>)
 800c9ec:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 800c9f0:	2801      	cmp	r0, #1
 800c9f2:	d077      	beq.n	800cae4 <SPINBOX_CreateIndirect+0x26c>
 800c9f4:	d36e      	bcc.n	800cad4 <SPINBOX_CreateIndirect+0x25c>
 800c9f6:	2802      	cmp	r0, #2
 800c9f8:	d170      	bne.n	800cadc <SPINBOX_CreateIndirect+0x264>
 800c9fa:	9a07      	ldr	r2, [sp, #28]
 800c9fc:	4494      	add	ip, r2
 800c9fe:	eba7 024c 	sub.w	r2, r7, ip, lsl #1
 800ca02:	3a02      	subs	r2, #2
 800ca04:	f10c 0c01 	add.w	ip, ip, #1
 800ca08:	f04f 0e02 	mov.w	lr, #2
 800ca0c:	2700      	movs	r7, #0
 800ca0e:	4660      	mov	r0, ip
 800ca10:	f8cd e004 	str.w	lr, [sp, #4]
 800ca14:	4621      	mov	r1, r4
 800ca16:	f8cd 8000 	str.w	r8, [sp]
 800ca1a:	42b5      	cmp	r5, r6
 800ca1c:	bfac      	ite	ge
 800ca1e:	9504      	strge	r5, [sp, #16]
 800ca20:	9604      	strlt	r6, [sp, #16]
 800ca22:	9702      	str	r7, [sp, #8]
 800ca24:	9703      	str	r7, [sp, #12]
 800ca26:	f000 fd1b 	bl	800d460 <EDIT_CreateEx>
 800ca2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 800ca32:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 800ca36:	f8c2 b084 	str.w	fp, [r2, #132]	; 0x84
 800ca3a:	465b      	mov	r3, fp
 800ca3c:	4652      	mov	r2, sl
 800ca3e:	4651      	mov	r1, sl
 800ca40:	9700      	str	r7, [sp, #0]
 800ca42:	9701      	str	r7, [sp, #4]
 800ca44:	f000 fabc 	bl	800cfc0 <EDIT_SetDecMode>
 800ca48:	4620      	mov	r0, r4
 800ca4a:	492d      	ldr	r1, [pc, #180]	; (800cb00 <SPINBOX_CreateIndirect+0x288>)
 800ca4c:	f7fc fee0 	bl	8009810 <WIDGET_SetEffect>
 800ca50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca52:	4620      	mov	r0, r4
 800ca54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca56:	4639      	mov	r1, r7
 800ca58:	f001 f990 	bl	800dd7c <EDIT_SetBkColor>
 800ca5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca5e:	4620      	mov	r0, r4
 800ca60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ca62:	2101      	movs	r1, #1
 800ca64:	f001 f98a 	bl	800dd7c <EDIT_SetBkColor>
 800ca68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f001 f9a4 	bl	800ddbc <EDIT_SetTextColor>
 800ca74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca76:	4620      	mov	r0, r4
 800ca78:	2101      	movs	r1, #1
 800ca7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ca7c:	f001 f99e 	bl	800ddbc <EDIT_SetTextColor>
 800ca80:	4620      	mov	r0, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	f001 fa78 	bl	800df78 <EDIT_SetCursorAtChar>
 800ca88:	a80c      	add	r0, sp, #48	; 0x30
 800ca8a:	f00c fb83 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ca8e:	f009 ffef 	bl	8016a70 <GUI_Lock>
 800ca92:	4640      	mov	r0, r8
 800ca94:	f00c fb6c 	bl	8019170 <GUI_ALLOC_LockH>
 800ca98:	ac0e      	add	r4, sp, #56	; 0x38
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f844 3d04 	str.w	r3, [r4, #-4]!
 800caa0:	2100      	movs	r1, #0
 800caa2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 800caa6:	f7fc fd05 	bl	80094b4 <WIDGET_SetFocusable>
 800caaa:	4620      	mov	r0, r4
 800caac:	f00c fb72 	bl	8019194 <GUI_ALLOC_UnlockH>
 800cab0:	f009 ffd4 	bl	8016a5c <GUI_Unlock>
 800cab4:	f009 ffd2 	bl	8016a5c <GUI_Unlock>
 800cab8:	4640      	mov	r0, r8
 800caba:	e724      	b.n	800c906 <SPINBOX_CreateIndirect+0x8e>
 800cabc:	4664      	mov	r4, ip
 800cabe:	e790      	b.n	800c9e2 <SPINBOX_CreateIndirect+0x16a>
 800cac0:	2f00      	cmp	r7, #0
 800cac2:	463a      	mov	r2, r7
 800cac4:	bfb8      	it	lt
 800cac6:	1cfa      	addlt	r2, r7, #3
 800cac8:	1092      	asrs	r2, r2, #2
 800caca:	9207      	str	r2, [sp, #28]
 800cacc:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 800cad0:	444b      	add	r3, r9
 800cad2:	e748      	b.n	800c966 <SPINBOX_CreateIndirect+0xee>
 800cad4:	eb01 020e 	add.w	r2, r1, lr
 800cad8:	3a01      	subs	r2, #1
 800cada:	e795      	b.n	800ca08 <SPINBOX_CreateIndirect+0x190>
 800cadc:	f04f 0c00 	mov.w	ip, #0
 800cae0:	4662      	mov	r2, ip
 800cae2:	e791      	b.n	800ca08 <SPINBOX_CreateIndirect+0x190>
 800cae4:	9a07      	ldr	r2, [sp, #28]
 800cae6:	4471      	add	r1, lr
 800cae8:	4494      	add	ip, r2
 800caea:	f10c 0c01 	add.w	ip, ip, #1
 800caee:	1e4a      	subs	r2, r1, #1
 800caf0:	e78a      	b.n	800ca08 <SPINBOX_CreateIndirect+0x190>
 800caf2:	bf00      	nop
 800caf4:	200001dc 	.word	0x200001dc
 800caf8:	2000017c 	.word	0x2000017c
 800cafc:	66666667 	.word	0x66666667
 800cb00:	080217c0 	.word	0x080217c0
 800cb04:	0800bcdd 	.word	0x0800bcdd

0800cb08 <SPINBOX_SetFont>:
 800cb08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	b089      	sub	sp, #36	; 0x24
 800cb10:	460d      	mov	r5, r1
 800cb12:	b910      	cbnz	r0, 800cb1a <SPINBOX_SetFont+0x12>
 800cb14:	b009      	add	sp, #36	; 0x24
 800cb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb1a:	f009 ffa9 	bl	8016a70 <GUI_Lock>
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f00c fb26 	bl	8019170 <GUI_ALLOC_LockH>
 800cb24:	4603      	mov	r3, r0
 800cb26:	a808      	add	r0, sp, #32
 800cb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2a:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 800cb2e:	f840 3d14 	str.w	r3, [r0, #-20]!
 800cb32:	f893 908c 	ldrb.w	r9, [r3, #140]	; 0x8c
 800cb36:	6817      	ldr	r7, [r2, #0]
 800cb38:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 800cb3c:	f00c fb2a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800cb40:	f009 ff8c 	bl	8016a5c <GUI_Unlock>
 800cb44:	4629      	mov	r1, r5
 800cb46:	4630      	mov	r0, r6
 800cb48:	f001 f8fe 	bl	800dd48 <EDIT_SetFont>
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	a904      	add	r1, sp, #16
 800cb50:	f003 f840 	bl	800fbd4 <WM_GetWindowRectEx>
 800cb54:	4630      	mov	r0, r6
 800cb56:	a906      	add	r1, sp, #24
 800cb58:	f003 f83c 	bl	800fbd4 <WM_GetWindowRectEx>
 800cb5c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800cb60:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800cb64:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800cb68:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	1a65      	subs	r5, r4, r1
 800cb72:	1c5c      	adds	r4, r3, #1
 800cb74:	f00b f94e 	bl	8017e14 <GUI_GetYDistOfFont>
 800cb78:	f1b9 0f01 	cmp.w	r9, #1
 800cb7c:	f105 0501 	add.w	r5, r5, #1
 800cb80:	d04a      	beq.n	800cc18 <SPINBOX_SetFont+0x110>
 800cb82:	d32f      	bcc.n	800cbe4 <SPINBOX_SetFont+0xdc>
 800cb84:	f1b9 0f02 	cmp.w	r9, #2
 800cb88:	d054      	beq.n	800cc34 <SPINBOX_SetFont+0x12c>
 800cb8a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cb8e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800cb92:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 800cb96:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 800cb9a:	ebc2 0e0e 	rsb	lr, r2, lr
 800cb9e:	f10e 0e01 	add.w	lr, lr, #1
 800cba2:	eba5 0247 	sub.w	r2, r5, r7, lsl #1
 800cba6:	4596      	cmp	lr, r2
 800cba8:	da2c      	bge.n	800cc04 <SPINBOX_SetFont+0xfc>
 800cbaa:	1a2d      	subs	r5, r5, r0
 800cbac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cbb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbb4:	eb02 0765 	add.w	r7, r2, r5, asr #1
 800cbb8:	b2bf      	uxth	r7, r7
 800cbba:	183c      	adds	r4, r7, r0
 800cbbc:	b2a4      	uxth	r4, r4
 800cbbe:	b2bf      	uxth	r7, r7
 800cbc0:	b23a      	sxth	r2, r7
 800cbc2:	b225      	sxth	r5, r4
 800cbc4:	1aad      	subs	r5, r5, r2
 800cbc6:	b209      	sxth	r1, r1
 800cbc8:	3501      	adds	r5, #1
 800cbca:	b21b      	sxth	r3, r3
 800cbcc:	1a5b      	subs	r3, r3, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	9500      	str	r5, [sp, #0]
 800cbd2:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cbd6:	f8ad 701a 	strh.w	r7, [sp, #26]
 800cbda:	f003 f993 	bl	800ff04 <WM_SetWindowPos>
 800cbde:	b009      	add	sp, #36	; 0x24
 800cbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbe4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cbe8:	ebc8 0302 	rsb	r3, r8, r2
 800cbec:	3b01      	subs	r3, #1
 800cbee:	b2b9      	uxth	r1, r7
 800cbf0:	1a5b      	subs	r3, r3, r1
 800cbf2:	4423      	add	r3, r4
 800cbf4:	4411      	add	r1, r2
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	b289      	uxth	r1, r1
 800cbfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cbfe:	f8ad 1018 	strh.w	r1, [sp, #24]
 800cc02:	e7c6      	b.n	800cb92 <SPINBOX_SetFont+0x8a>
 800cc04:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cc08:	b2bf      	uxth	r7, r7
 800cc0a:	1e54      	subs	r4, r2, #1
 800cc0c:	1be4      	subs	r4, r4, r7
 800cc0e:	442c      	add	r4, r5
 800cc10:	4417      	add	r7, r2
 800cc12:	b2a4      	uxth	r4, r4
 800cc14:	b2bf      	uxth	r7, r7
 800cc16:	e7d3      	b.n	800cbc0 <SPINBOX_SetFont+0xb8>
 800cc18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cc1c:	b2bb      	uxth	r3, r7
 800cc1e:	18d1      	adds	r1, r2, r3
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	4441      	add	r1, r8
 800cc24:	4423      	add	r3, r4
 800cc26:	b289      	uxth	r1, r1
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	f8ad 1018 	strh.w	r1, [sp, #24]
 800cc2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc32:	e7ae      	b.n	800cb92 <SPINBOX_SetFont+0x8a>
 800cc34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cc38:	ebc8 0302 	rsb	r3, r8, r2
 800cc3c:	f108 0801 	add.w	r8, r8, #1
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b2b9      	uxth	r1, r7
 800cc44:	4442      	add	r2, r8
 800cc46:	e7d3      	b.n	800cbf0 <SPINBOX_SetFont+0xe8>

0800cc48 <EDIT_GetDefaultFont>:
 800cc48:	4b01      	ldr	r3, [pc, #4]	; (800cc50 <EDIT_GetDefaultFont+0x8>)
 800cc4a:	6898      	ldr	r0, [r3, #8]
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	200001e0 	.word	0x200001e0

0800cc54 <_AddPosition>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cc58:	f9b0 7038 	ldrsh.w	r7, [r0, #56]	; 0x38
 800cc5c:	f890 4056 	ldrb.w	r4, [r0, #86]	; 0x56
 800cc60:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800cc62:	4605      	mov	r5, r0
 800cc64:	1aff      	subs	r7, r7, r3
 800cc66:	f014 0001 	ands.w	r0, r4, #1
 800cc6a:	f107 33ff 	add.w	r3, r7, #4294967295
 800cc6e:	d000      	beq.n	800cc72 <_AddPosition+0x1e>
 800cc70:	b386      	cbz	r6, 800ccd4 <_AddPosition+0x80>
 800cc72:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 800cc76:	b10f      	cbz	r7, 800cc7c <_AddPosition+0x28>
 800cc78:	42bb      	cmp	r3, r7
 800cc7a:	dc29      	bgt.n	800ccd0 <_AddPosition+0x7c>
 800cc7c:	1e5c      	subs	r4, r3, #1
 800cc7e:	b39b      	cbz	r3, 800cce8 <_AddPosition+0x94>
 800cc80:	4613      	mov	r3, r2
 800cc82:	3c01      	subs	r4, #1
 800cc84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cc88:	1c67      	adds	r7, r4, #1
 800cc8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc8e:	d1f8      	bne.n	800cc82 <_AddPosition+0x2e>
 800cc90:	2a00      	cmp	r2, #0
 800cc92:	eb03 0706 	add.w	r7, r3, r6
 800cc96:	db10      	blt.n	800ccba <_AddPosition+0x66>
 800cc98:	d001      	beq.n	800cc9e <_AddPosition+0x4a>
 800cc9a:	42be      	cmp	r6, r7
 800cc9c:	db0f      	blt.n	800ccbe <_AddPosition+0x6a>
 800cc9e:	b158      	cbz	r0, 800ccb8 <_AddPosition+0x64>
 800cca0:	b94e      	cbnz	r6, 800ccb6 <_AddPosition+0x62>
 800cca2:	b14f      	cbz	r7, 800ccb8 <_AddPosition+0x64>
 800cca4:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 800cca8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ccaa:	3a01      	subs	r2, #1
 800ccac:	4293      	cmp	r3, r2
 800ccae:	da03      	bge.n	800ccb8 <_AddPosition+0x64>
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ccb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb6:	b18f      	cbz	r7, 800ccdc <_AddPosition+0x88>
 800ccb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccba:	42be      	cmp	r6, r7
 800ccbc:	ddef      	ble.n	800cc9e <_AddPosition+0x4a>
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4639      	mov	r1, r7
 800ccc2:	f001 f8b1 	bl	800de28 <EDIT_SetValue>
 800ccc6:	f895 0056 	ldrb.w	r0, [r5, #86]	; 0x56
 800ccca:	f000 0001 	and.w	r0, r0, #1
 800ccce:	e7e6      	b.n	800cc9e <_AddPosition+0x4a>
 800ccd0:	1e9c      	subs	r4, r3, #2
 800ccd2:	e7d5      	b.n	800cc80 <_AddPosition+0x2c>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfc8      	it	gt
 800ccd8:	1ebb      	subgt	r3, r7, #2
 800ccda:	e7ca      	b.n	800cc72 <_AddPosition+0x1e>
 800ccdc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	ddea      	ble.n	800ccb8 <_AddPosition+0x64>
 800cce2:	3b01      	subs	r3, #1
 800cce4:	64eb      	str	r3, [r5, #76]	; 0x4c
 800cce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce8:	4613      	mov	r3, r2
 800ccea:	e7d1      	b.n	800cc90 <_AddPosition+0x3c>

0800ccec <_UpdateBuffer>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	f00c fa3e 	bl	8019170 <GUI_ALLOC_LockH>
 800ccf4:	9001      	str	r0, [sp, #4]
 800ccf6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ccf8:	f00c fa3a 	bl	8019170 <GUI_ALLOC_LockH>
 800ccfc:	9b01      	ldr	r3, [sp, #4]
 800ccfe:	9002      	str	r0, [sp, #8]
 800cd00:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800cd04:	9003      	str	r0, [sp, #12]
 800cd06:	07d1      	lsls	r1, r2, #31
 800cd08:	d553      	bpl.n	800cdb2 <_UpdateBuffer+0xc6>
 800cd0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	db62      	blt.n	800cdd6 <_UpdateBuffer+0xea>
 800cd10:	a903      	add	r1, sp, #12
 800cd12:	f00a ff79 	bl	8017c08 <GUI_AddSign>
 800cd16:	9b01      	ldr	r3, [sp, #4]
 800cd18:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800cd1c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cd20:	3901      	subs	r1, #1
 800cd22:	ab03      	add	r3, sp, #12
 800cd24:	b2c9      	uxtb	r1, r1
 800cd26:	f00a ff7d 	bl	8017c24 <GUI_AddDecShift>
 800cd2a:	a802      	add	r0, sp, #8
 800cd2c:	f00c fa32 	bl	8019194 <GUI_ALLOC_UnlockH>
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 800cd36:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cd3a:	3c02      	subs	r4, #2
 800cd3c:	b10a      	cbz	r2, 800cd42 <_UpdateBuffer+0x56>
 800cd3e:	43d2      	mvns	r2, r2
 800cd40:	4414      	add	r4, r2
 800cd42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cd44:	f00c fa14 	bl	8019170 <GUI_ALLOC_LockH>
 800cd48:	2c00      	cmp	r4, #0
 800cd4a:	9002      	str	r0, [sp, #8]
 800cd4c:	9003      	str	r0, [sp, #12]
 800cd4e:	db28      	blt.n	800cda2 <_UpdateBuffer+0xb6>
 800cd50:	4d27      	ldr	r5, [pc, #156]	; (800cdf0 <_UpdateBuffer+0x104>)
 800cd52:	2300      	movs	r3, #0
 800cd54:	2620      	movs	r6, #32
 800cd56:	e006      	b.n	800cd66 <_UpdateBuffer+0x7a>
 800cd58:	7006      	strb	r6, [r0, #0]
 800cd5a:	9803      	ldr	r0, [sp, #12]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	3001      	adds	r0, #1
 800cd60:	429c      	cmp	r4, r3
 800cd62:	9003      	str	r0, [sp, #12]
 800cd64:	db1d      	blt.n	800cda2 <_UpdateBuffer+0xb6>
 800cd66:	7802      	ldrb	r2, [r0, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d03c      	beq.n	800cde6 <_UpdateBuffer+0xfa>
 800cd6c:	2a30      	cmp	r2, #48	; 0x30
 800cd6e:	d118      	bne.n	800cda2 <_UpdateBuffer+0xb6>
 800cd70:	7842      	ldrb	r2, [r0, #1]
 800cd72:	7829      	ldrb	r1, [r5, #0]
 800cd74:	4291      	cmp	r1, r2
 800cd76:	d014      	beq.n	800cda2 <_UpdateBuffer+0xb6>
 800cd78:	b19a      	cbz	r2, 800cda2 <_UpdateBuffer+0xb6>
 800cd7a:	9a01      	ldr	r2, [sp, #4]
 800cd7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800cd80:	0792      	lsls	r2, r2, #30
 800cd82:	d5eb      	bpl.n	800cd5c <_UpdateBuffer+0x70>
 800cd84:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800cd88:	2a2b      	cmp	r2, #43	; 0x2b
 800cd8a:	d001      	beq.n	800cd90 <_UpdateBuffer+0xa4>
 800cd8c:	2a2d      	cmp	r2, #45	; 0x2d
 800cd8e:	d1e3      	bne.n	800cd58 <_UpdateBuffer+0x6c>
 800cd90:	7002      	strb	r2, [r0, #0]
 800cd92:	f800 6c01 	strb.w	r6, [r0, #-1]
 800cd96:	9803      	ldr	r0, [sp, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	9003      	str	r0, [sp, #12]
 800cda0:	dae1      	bge.n	800cd66 <_UpdateBuffer+0x7a>
 800cda2:	a802      	add	r0, sp, #8
 800cda4:	f00c f9f6 	bl	8019194 <GUI_ALLOC_UnlockH>
 800cda8:	a801      	add	r0, sp, #4
 800cdaa:	f00c f9f3 	bl	8019194 <GUI_ALLOC_UnlockH>
 800cdae:	b004      	add	sp, #16
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800cdb4:	b20a      	sxth	r2, r1
 800cdb6:	2a0a      	cmp	r2, #10
 800cdb8:	dd0a      	ble.n	800cdd0 <_UpdateBuffer+0xe4>
 800cdba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	bfb4      	ite	lt
 800cdc0:	b2c9      	uxtblt	r1, r1
 800cdc2:	210a      	movge	r1, #10
 800cdc4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cdc8:	ab03      	add	r3, sp, #12
 800cdca:	f00a ff2b 	bl	8017c24 <GUI_AddDecShift>
 800cdce:	e7ac      	b.n	800cd2a <_UpdateBuffer+0x3e>
 800cdd0:	b2c9      	uxtb	r1, r1
 800cdd2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cdd4:	e7f6      	b.n	800cdc4 <_UpdateBuffer+0xd8>
 800cdd6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800cdda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cdde:	ab03      	add	r3, sp, #12
 800cde0:	f00a ff20 	bl	8017c24 <GUI_AddDecShift>
 800cde4:	e7a1      	b.n	800cd2a <_UpdateBuffer+0x3e>
 800cde6:	2a2b      	cmp	r2, #43	; 0x2b
 800cde8:	d0b8      	beq.n	800cd5c <_UpdateBuffer+0x70>
 800cdea:	2a2d      	cmp	r2, #45	; 0x2d
 800cdec:	d1be      	bne.n	800cd6c <_UpdateBuffer+0x80>
 800cdee:	e7b5      	b.n	800cd5c <_UpdateBuffer+0x70>
 800cdf0:	2002bff4 	.word	0x2002bff4

0800cdf4 <_AddKeyDec>:
 800cdf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	460e      	mov	r6, r1
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	f00c f9b7 	bl	8019170 <GUI_ALLOC_LockH>
 800ce02:	4604      	mov	r4, r0
 800ce04:	9000      	str	r0, [sp, #0]
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d032      	beq.n	800ce70 <_AddKeyDec+0x7c>
 800ce0a:	f1a6 0310 	sub.w	r3, r6, #16
 800ce0e:	2b1d      	cmp	r3, #29
 800ce10:	d87d      	bhi.n	800cf0e <_AddKeyDec+0x11a>
 800ce12:	e8df f003 	tbb	[pc, r3]
 800ce16:	6f4d      	.short	0x6f4d
 800ce18:	7c7c3617 	.word	0x7c7c3617
 800ce1c:	7c7c7c7c 	.word	0x7c7c7c7c
 800ce20:	7c7c7c7c 	.word	0x7c7c7c7c
 800ce24:	7c7c7c7c 	.word	0x7c7c7c7c
 800ce28:	7c7c7c7c 	.word	0x7c7c7c7c
 800ce2c:	7c7c7c7c 	.word	0x7c7c7c7c
 800ce30:	627c447c 	.word	0x627c447c
 800ce34:	a801      	add	r0, sp, #4
 800ce36:	f00c f9ad 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f000 fff3 	bl	800de28 <EDIT_SetValue>
 800ce42:	9c00      	ldr	r4, [sp, #0]
 800ce44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ce46:	4628      	mov	r0, r5
 800ce48:	3101      	adds	r1, #1
 800ce4a:	f000 fadb 	bl	800d404 <EDIT__SetCursorPos>
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 fabc 	bl	800d3cc <EDIT__GetCurrentChar>
 800ce54:	4b58      	ldr	r3, [pc, #352]	; (800cfb8 <_AddKeyDec+0x1c4>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	4283      	cmp	r3, r0
 800ce5a:	d109      	bne.n	800ce70 <_AddKeyDec+0x7c>
 800ce5c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800ce60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ce62:	3b01      	subs	r3, #1
 800ce64:	4299      	cmp	r1, r3
 800ce66:	db33      	blt.n	800ced0 <_AddKeyDec+0xdc>
 800ce68:	3901      	subs	r1, #1
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f000 faca 	bl	800d404 <EDIT__SetCursorPos>
 800ce70:	4668      	mov	r0, sp
 800ce72:	f00c f98f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7ff ff38 	bl	800ccec <_UpdateBuffer>
 800ce7c:	b003      	add	sp, #12
 800ce7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce82:	f000 faa3 	bl	800d3cc <EDIT__GetCurrentChar>
 800ce86:	b2c0      	uxtb	r0, r0
 800ce88:	282d      	cmp	r0, #45	; 0x2d
 800ce8a:	d07d      	beq.n	800cf88 <_AddKeyDec+0x194>
 800ce8c:	282b      	cmp	r0, #43	; 0x2b
 800ce8e:	d07b      	beq.n	800cf88 <_AddKeyDec+0x194>
 800ce90:	9800      	ldr	r0, [sp, #0]
 800ce92:	4629      	mov	r1, r5
 800ce94:	f04f 32ff 	mov.w	r2, #4294967295
 800ce98:	f7ff fedc 	bl	800cc54 <_AddPosition>
 800ce9c:	e7e8      	b.n	800ce70 <_AddKeyDec+0x7c>
 800ce9e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800cea0:	2900      	cmp	r1, #0
 800cea2:	d1e5      	bne.n	800ce70 <_AddKeyDec+0x7c>
 800cea4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	db1d      	blt.n	800cee6 <_AddKeyDec+0xf2>
 800ceaa:	3101      	adds	r1, #1
 800ceac:	4628      	mov	r0, r5
 800ceae:	e7cc      	b.n	800ce4a <_AddKeyDec+0x56>
 800ceb0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	3901      	subs	r1, #1
 800ceb6:	f000 faa5 	bl	800d404 <EDIT__SetCursorPos>
 800ceba:	9800      	ldr	r0, [sp, #0]
 800cebc:	f000 fa86 	bl	800d3cc <EDIT__GetCurrentChar>
 800cec0:	4b3d      	ldr	r3, [pc, #244]	; (800cfb8 <_AddKeyDec+0x1c4>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	4283      	cmp	r3, r0
 800cec6:	d1d3      	bne.n	800ce70 <_AddKeyDec+0x7c>
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cecc:	2900      	cmp	r1, #0
 800cece:	dccb      	bgt.n	800ce68 <_AddKeyDec+0x74>
 800ced0:	3101      	adds	r1, #1
 800ced2:	4628      	mov	r0, r5
 800ced4:	f000 fa96 	bl	800d404 <EDIT__SetCursorPos>
 800ced8:	e7ca      	b.n	800ce70 <_AddKeyDec+0x7c>
 800ceda:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800cedc:	2900      	cmp	r1, #0
 800cede:	d1c7      	bne.n	800ce70 <_AddKeyDec+0x7c>
 800cee0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	dde1      	ble.n	800ceaa <_AddKeyDec+0xb6>
 800cee6:	4259      	negs	r1, r3
 800cee8:	4628      	mov	r0, r5
 800ceea:	f000 ff9d 	bl	800de28 <EDIT_SetValue>
 800ceee:	9c00      	ldr	r4, [sp, #0]
 800cef0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cef2:	e7da      	b.n	800ceaa <_AddKeyDec+0xb6>
 800cef4:	f000 fa6a 	bl	800d3cc <EDIT__GetCurrentChar>
 800cef8:	b2c0      	uxtb	r0, r0
 800cefa:	282d      	cmp	r0, #45	; 0x2d
 800cefc:	d044      	beq.n	800cf88 <_AddKeyDec+0x194>
 800cefe:	282b      	cmp	r0, #43	; 0x2b
 800cf00:	d042      	beq.n	800cf88 <_AddKeyDec+0x194>
 800cf02:	9800      	ldr	r0, [sp, #0]
 800cf04:	4629      	mov	r1, r5
 800cf06:	2201      	movs	r2, #1
 800cf08:	f7ff fea4 	bl	800cc54 <_AddPosition>
 800cf0c:	e7b0      	b.n	800ce70 <_AddKeyDec+0x7c>
 800cf0e:	f000 fa5d 	bl	800d3cc <EDIT__GetCurrentChar>
 800cf12:	b2c0      	uxtb	r0, r0
 800cf14:	282d      	cmp	r0, #45	; 0x2d
 800cf16:	d0ab      	beq.n	800ce70 <_AddKeyDec+0x7c>
 800cf18:	282b      	cmp	r0, #43	; 0x2b
 800cf1a:	d0a9      	beq.n	800ce70 <_AddKeyDec+0x7c>
 800cf1c:	f1a6 0930 	sub.w	r9, r6, #48	; 0x30
 800cf20:	f1b9 0f09 	cmp.w	r9, #9
 800cf24:	d8a4      	bhi.n	800ce70 <_AddKeyDec+0x7c>
 800cf26:	f8dd 8000 	ldr.w	r8, [sp]
 800cf2a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800cf2e:	f00c f91f 	bl	8019170 <GUI_ALLOC_LockH>
 800cf32:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
 800cf36:	9001      	str	r0, [sp, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	4684      	mov	ip, r0
 800cf3c:	f04f 0700 	mov.w	r7, #0
 800cf40:	f77f af78 	ble.w	800ce34 <_AddKeyDec+0x40>
 800cf44:	f8d8 604c 	ldr.w	r6, [r8, #76]	; 0x4c
 800cf48:	f8df e070 	ldr.w	lr, [pc, #112]	; 800cfbc <_AddKeyDec+0x1c8>
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	463c      	mov	r4, r7
 800cf50:	e012      	b.n	800cf78 <_AddKeyDec+0x184>
 800cf52:	f898 1056 	ldrb.w	r1, [r8, #86]	; 0x56
 800cf56:	f81c 2003 	ldrb.w	r2, [ip, r3]
 800cf5a:	0789      	lsls	r1, r1, #30
 800cf5c:	d501      	bpl.n	800cf62 <_AddKeyDec+0x16e>
 800cf5e:	2a20      	cmp	r2, #32
 800cf60:	d023      	beq.n	800cfaa <_AddKeyDec+0x1b6>
 800cf62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf66:	2909      	cmp	r1, #9
 800cf68:	d917      	bls.n	800cf9a <_AddKeyDec+0x1a6>
 800cf6a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf6c:	bf08      	it	eq
 800cf6e:	427f      	negeq	r7, r7
 800cf70:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cf74:	f4ff af5e 	bcc.w	800ce34 <_AddKeyDec+0x40>
 800cf78:	42b3      	cmp	r3, r6
 800cf7a:	d1ea      	bne.n	800cf52 <_AddKeyDec+0x15e>
 800cf7c:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 800cf80:	3401      	adds	r4, #1
 800cf82:	fb02 7709 	mla	r7, r2, r9, r7
 800cf86:	e7f3      	b.n	800cf70 <_AddKeyDec+0x17c>
 800cf88:	9b00      	ldr	r3, [sp, #0]
 800cf8a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800cf8c:	2900      	cmp	r1, #0
 800cf8e:	dd0f      	ble.n	800cfb0 <_AddKeyDec+0x1bc>
 800cf90:	4249      	negs	r1, r1
 800cf92:	4628      	mov	r0, r5
 800cf94:	f000 ff48 	bl	800de28 <EDIT_SetValue>
 800cf98:	e76a      	b.n	800ce70 <_AddKeyDec+0x7c>
 800cf9a:	2900      	cmp	r1, #0
 800cf9c:	dbe5      	blt.n	800cf6a <_AddKeyDec+0x176>
 800cf9e:	f85e 0024 	ldr.w	r0, [lr, r4, lsl #2]
 800cfa2:	3401      	adds	r4, #1
 800cfa4:	fb00 7701 	mla	r7, r0, r1, r7
 800cfa8:	e7df      	b.n	800cf6a <_AddKeyDec+0x176>
 800cfaa:	2100      	movs	r1, #0
 800cfac:	2230      	movs	r2, #48	; 0x30
 800cfae:	e7f6      	b.n	800cf9e <_AddKeyDec+0x1aa>
 800cfb0:	f43f af5e 	beq.w	800ce70 <_AddKeyDec+0x7c>
 800cfb4:	e7ec      	b.n	800cf90 <_AddKeyDec+0x19c>
 800cfb6:	bf00      	nop
 800cfb8:	2002bff4 	.word	0x2002bff4
 800cfbc:	080215fc 	.word	0x080215fc

0800cfc0 <EDIT_SetDecMode>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	4689      	mov	r9, r1
 800cfca:	4614      	mov	r4, r2
 800cfcc:	461d      	mov	r5, r3
 800cfce:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cfd2:	f009 fd4d 	bl	8016a70 <GUI_Lock>
 800cfd6:	b926      	cbnz	r6, 800cfe2 <EDIT_SetDecMode+0x22>
 800cfd8:	f009 fd40 	bl	8016a5c <GUI_Unlock>
 800cfdc:	b002      	add	sp, #8
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f00c f8c4 	bl	8019170 <GUI_ALLOC_LockH>
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	4603      	mov	r3, r0
 800cfec:	f847 3d04 	str.w	r3, [r7, #-4]!
 800cff0:	4840      	ldr	r0, [pc, #256]	; (800d0f4 <EDIT_SetDecMode+0x134>)
 800cff2:	4941      	ldr	r1, [pc, #260]	; (800d0f8 <EDIT_SetDecMode+0x138>)
 800cff4:	f893 a088 	ldrb.w	sl, [r3, #136]	; 0x88
 800cff8:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
 800cffc:	2200      	movs	r2, #0
 800cffe:	f04f 0901 	mov.w	r9, #1
 800d002:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800d006:	6598      	str	r0, [r3, #88]	; 0x58
 800d008:	63dc      	str	r4, [r3, #60]	; 0x3c
 800d00a:	641d      	str	r5, [r3, #64]	; 0x40
 800d00c:	f883 e044 	strb.w	lr, [r3, #68]	; 0x44
 800d010:	f883 8056 	strb.w	r8, [r3, #86]	; 0x56
 800d014:	65d9      	str	r1, [r3, #92]	; 0x5c
 800d016:	64da      	str	r2, [r3, #76]	; 0x4c
 800d018:	4638      	mov	r0, r7
 800d01a:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 800d01e:	f00c f8b9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d022:	f1ba 0f00 	cmp.w	sl, #0
 800d026:	d035      	beq.n	800d094 <EDIT_SetDecMode+0xd4>
 800d028:	2d00      	cmp	r5, #0
 800d02a:	bfbd      	ittte	lt
 800d02c:	426d      	neglt	r5, r5
 800d02e:	f04f 39ff 	movlt.w	r9, #4294967295
 800d032:	2302      	movlt	r3, #2
 800d034:	464b      	movge	r3, r9
 800d036:	2d09      	cmp	r5, #9
 800d038:	dd09      	ble.n	800d04e <EDIT_SetDecMode+0x8e>
 800d03a:	4930      	ldr	r1, [pc, #192]	; (800d0fc <EDIT_SetDecMode+0x13c>)
 800d03c:	fb81 0205 	smull	r0, r2, r1, r5
 800d040:	17ed      	asrs	r5, r5, #31
 800d042:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 800d046:	2d09      	cmp	r5, #9
 800d048:	f103 0301 	add.w	r3, r3, #1
 800d04c:	dcf6      	bgt.n	800d03c <EDIT_SetDecMode+0x7c>
 800d04e:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d052:	d03d      	beq.n	800d0d0 <EDIT_SetDecMode+0x110>
 800d054:	2c00      	cmp	r4, #0
 800d056:	db48      	blt.n	800d0ea <EDIT_SetDecMode+0x12a>
 800d058:	2501      	movs	r5, #1
 800d05a:	4629      	mov	r1, r5
 800d05c:	2c09      	cmp	r4, #9
 800d05e:	dd09      	ble.n	800d074 <EDIT_SetDecMode+0xb4>
 800d060:	4826      	ldr	r0, [pc, #152]	; (800d0fc <EDIT_SetDecMode+0x13c>)
 800d062:	fb80 e204 	smull	lr, r2, r0, r4
 800d066:	17e4      	asrs	r4, r4, #31
 800d068:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
 800d06c:	2c09      	cmp	r4, #9
 800d06e:	f101 0101 	add.w	r1, r1, #1
 800d072:	dcf6      	bgt.n	800d062 <EDIT_SetDecMode+0xa2>
 800d074:	3501      	adds	r5, #1
 800d076:	d025      	beq.n	800d0c4 <EDIT_SetDecMode+0x104>
 800d078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d07a:	b10a      	cbz	r2, 800d080 <EDIT_SetDecMode+0xc0>
 800d07c:	3101      	adds	r1, #1
 800d07e:	3301      	adds	r3, #1
 800d080:	f018 0f01 	tst.w	r8, #1
 800d084:	bf18      	it	ne
 800d086:	3301      	addne	r3, #1
 800d088:	428b      	cmp	r3, r1
 800d08a:	bfa8      	it	ge
 800d08c:	4619      	movge	r1, r3
 800d08e:	4630      	mov	r0, r6
 800d090:	f000 fefa 	bl	800de88 <EDIT_SetMaxLen>
 800d094:	4630      	mov	r0, r6
 800d096:	f7ff fe29 	bl	800ccec <_UpdateBuffer>
 800d09a:	4630      	mov	r0, r6
 800d09c:	f00c f868 	bl	8019170 <GUI_ALLOC_LockH>
 800d0a0:	9001      	str	r0, [sp, #4]
 800d0a2:	f000 f993 	bl	800d3cc <EDIT__GetCurrentChar>
 800d0a6:	4b16      	ldr	r3, [pc, #88]	; (800d100 <EDIT_SetDecMode+0x140>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	4283      	cmp	r3, r0
 800d0ac:	d016      	beq.n	800d0dc <EDIT_SetDecMode+0x11c>
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	f00c f870 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f004 fce5 	bl	8011a84 <WM_InvalidateWindow>
 800d0ba:	f009 fccf 	bl	8016a5c <GUI_Unlock>
 800d0be:	b002      	add	sp, #8
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0c6:	1e4a      	subs	r2, r1, #1
 800d0c8:	4290      	cmp	r0, r2
 800d0ca:	bf08      	it	eq
 800d0cc:	3101      	addeq	r1, #1
 800d0ce:	e7d3      	b.n	800d078 <EDIT_SetDecMode+0xb8>
 800d0d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d0d2:	1e5a      	subs	r2, r3, #1
 800d0d4:	4291      	cmp	r1, r2
 800d0d6:	bf08      	it	eq
 800d0d8:	3301      	addeq	r3, #1
 800d0da:	e7bb      	b.n	800d054 <EDIT_SetDecMode+0x94>
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	3101      	adds	r1, #1
 800d0e4:	f000 f98e 	bl	800d404 <EDIT__SetCursorPos>
 800d0e8:	e7e1      	b.n	800d0ae <EDIT_SetDecMode+0xee>
 800d0ea:	4264      	negs	r4, r4
 800d0ec:	f04f 35ff 	mov.w	r5, #4294967295
 800d0f0:	2102      	movs	r1, #2
 800d0f2:	e7b3      	b.n	800d05c <EDIT_SetDecMode+0x9c>
 800d0f4:	0800cdf5 	.word	0x0800cdf5
 800d0f8:	0800cced 	.word	0x0800cced
 800d0fc:	66666667 	.word	0x66666667
 800d100:	2002bff4 	.word	0x2002bff4

0800d104 <_Paint>:
 800d104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d108:	b08d      	sub	sp, #52	; 0x34
 800d10a:	2300      	movs	r3, #0
 800d10c:	4606      	mov	r6, r0
 800d10e:	460c      	mov	r4, r1
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	f001 facf 	bl	800e6b4 <WM__IsEnabled>
 800d116:	4605      	mov	r5, r0
 800d118:	4630      	mov	r0, r6
 800d11a:	f00c f829 	bl	8019170 <GUI_ALLOC_LockH>
 800d11e:	9001      	str	r0, [sp, #4]
 800d120:	b12c      	cbz	r4, 800d12e <_Paint+0x2a>
 800d122:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 800d126:	f042 0204 	orr.w	r2, r2, #4
 800d12a:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
 800d12e:	f105 021e 	add.w	r2, r5, #30
 800d132:	ae06      	add	r6, sp, #24
 800d134:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d138:	f008 fc0a 	bl	8015950 <LCD_SetBkColor>
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d142:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800d144:	f008 fc0c 	bl	8015960 <LCD_SetColor>
 800d148:	9d01      	ldr	r5, [sp, #4]
 800d14a:	2300      	movs	r3, #0
 800d14c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800d14e:	9302      	str	r3, [sp, #8]
 800d150:	f00a ff8c 	bl	801806c <GUI_SetFont>
 800d154:	4628      	mov	r0, r5
 800d156:	4631      	mov	r1, r6
 800d158:	f7fc f8d4 	bl	8009304 <WIDGET__GetInsideRect>
 800d15c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d15e:	2800      	cmp	r0, #0
 800d160:	f040 80d2 	bne.w	800d308 <_Paint+0x204>
 800d164:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d168:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d16c:	f10d 0920 	add.w	r9, sp, #32
 800d170:	e889 0003 	stmia.w	r9, {r0, r1}
 800d174:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800d178:	f8bd e020 	ldrh.w	lr, [sp, #32]
 800d17c:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800d180:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800d182:	4496      	add	lr, r2
 800d184:	3f01      	subs	r7, #1
 800d186:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800d18a:	f10e 0e01 	add.w	lr, lr, #1
 800d18e:	1abf      	subs	r7, r7, r2
 800d190:	4660      	mov	r0, ip
 800d192:	4649      	mov	r1, r9
 800d194:	4652      	mov	r2, sl
 800d196:	f8ad e020 	strh.w	lr, [sp, #32]
 800d19a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800d19e:	f008 fc0d 	bl	80159bc <GUI__CalcTextRect>
 800d1a2:	f8b5 8032 	ldrh.w	r8, [r5, #50]	; 0x32
 800d1a6:	f018 0801 	ands.w	r8, r8, #1
 800d1aa:	d034      	beq.n	800d216 <_Paint+0x112>
 800d1ac:	f895 8055 	ldrb.w	r8, [r5, #85]	; 0x55
 800d1b0:	9802      	ldr	r0, [sp, #8]
 800d1b2:	f1b8 0f00 	cmp.w	r8, #0
 800d1b6:	bf08      	it	eq
 800d1b8:	f04f 0801 	moveq.w	r8, #1
 800d1bc:	f009 f9d2 	bl	8016564 <GUI__GetNumChars>
 800d1c0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d1c4:	4683      	mov	fp, r0
 800d1c6:	f1be 0f00 	cmp.w	lr, #0
 800d1ca:	d029      	beq.n	800d220 <_Paint+0x11c>
 800d1cc:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	9203      	str	r2, [sp, #12]
 800d1d4:	b953      	cbnz	r3, 800d1ec <_Paint+0xe8>
 800d1d6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d1d8:	b933      	cbnz	r3, 800d1e8 <_Paint+0xe4>
 800d1da:	4b79      	ldr	r3, [pc, #484]	; (800d3c0 <_Paint+0x2bc>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	f000 80df 	beq.w	800d3a2 <_Paint+0x29e>
 800d1e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d1e6:	e006      	b.n	800d1f6 <_Paint+0xf2>
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d0f6      	beq.n	800d1da <_Paint+0xd6>
 800d1ec:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800d1ee:	45bb      	cmp	fp, r7
 800d1f0:	f300 809a 	bgt.w	800d328 <_Paint+0x224>
 800d1f4:	463b      	mov	r3, r7
 800d1f6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d1fa:	aa04      	add	r2, sp, #16
 800d1fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d200:	4677      	mov	r7, lr
 800d202:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d206:	4638      	mov	r0, r7
 800d208:	4619      	mov	r1, r3
 800d20a:	465a      	mov	r2, fp
 800d20c:	f008 fefa 	bl	8016004 <GUI__GetCursorPosX>
 800d210:	4428      	add	r0, r5
 800d212:	f8ad 0010 	strh.w	r0, [sp, #16]
 800d216:	9b02      	ldr	r3, [sp, #8]
 800d218:	b113      	cbz	r3, 800d220 <_Paint+0x11c>
 800d21a:	a802      	add	r0, sp, #8
 800d21c:	f00b ffba 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d224:	2800      	cmp	r0, #0
 800d226:	d17b      	bne.n	800d320 <_Paint+0x21c>
 800d228:	2000      	movs	r0, #0
 800d22a:	f004 ff01 	bl	8012030 <WM__InitIVRSearch>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d049      	beq.n	800d2c6 <_Paint+0x1c2>
 800d232:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d3c8 <_Paint+0x2c4>
 800d236:	e033      	b.n	800d2a0 <_Paint+0x19c>
 800d238:	9d01      	ldr	r5, [sp, #4]
 800d23a:	8e6f      	ldrh	r7, [r5, #50]	; 0x32
 800d23c:	07f8      	lsls	r0, r7, #31
 800d23e:	d528      	bpl.n	800d292 <_Paint+0x18e>
 800d240:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
 800d244:	0719      	lsls	r1, r3, #28
 800d246:	d54a      	bpl.n	800d2de <_Paint+0x1da>
 800d248:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	4443      	add	r3, r8
 800d250:	2000      	movs	r0, #0
 800d252:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d256:	f002 fe45 	bl	800fee4 <WM_SetUserClipRect>
 800d25a:	a804      	add	r0, sp, #16
 800d25c:	f002 fe42 	bl	800fee4 <WM_SetUserClipRect>
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800d266:	0752      	lsls	r2, r2, #29
 800d268:	d445      	bmi.n	800d2f6 <_Paint+0x1f2>
 800d26a:	9800      	ldr	r0, [sp, #0]
 800d26c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800d270:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800d274:	f009 ff5e 	bl	8017134 <GUI_DispStringAt>
 800d278:	f8db 3000 	ldr.w	r3, [fp]
 800d27c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800d280:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 800d284:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d288:	eb00 0208 	add.w	r2, r0, r8
 800d28c:	3a01      	subs	r2, #1
 800d28e:	f00a fc8d 	bl	8017bac <GUI__InvertRectColors>
 800d292:	2000      	movs	r0, #0
 800d294:	f002 fe26 	bl	800fee4 <WM_SetUserClipRect>
 800d298:	b974      	cbnz	r4, 800d2b8 <_Paint+0x1b4>
 800d29a:	f004 fda3 	bl	8011de4 <WM__GetNextIVR>
 800d29e:	b190      	cbz	r0, 800d2c6 <_Paint+0x1c2>
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f002 fe1f 	bl	800fee4 <WM_SetUserClipRect>
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d0c6      	beq.n	800d238 <_Paint+0x134>
 800d2aa:	9800      	ldr	r0, [sp, #0]
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	464a      	mov	r2, r9
 800d2b0:	4653      	mov	r3, sl
 800d2b2:	f7fc f83d 	bl	8009330 <WIDGET__FillStringInRect>
 800d2b6:	e7bf      	b.n	800d238 <_Paint+0x134>
 800d2b8:	9801      	ldr	r0, [sp, #4]
 800d2ba:	f7fc fa59 	bl	8009770 <WIDGET__EFFECT_DrawDown>
 800d2be:	f004 fd91 	bl	8011de4 <WM__GetNextIVR>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d1ec      	bne.n	800d2a0 <_Paint+0x19c>
 800d2c6:	bb24      	cbnz	r4, 800d312 <_Paint+0x20e>
 800d2c8:	a801      	add	r0, sp, #4
 800d2ca:	f00b ff63 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	b113      	cbz	r3, 800d2d8 <_Paint+0x1d4>
 800d2d2:	4668      	mov	r0, sp
 800d2d4:	f00b ff5e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d2d8:	b00d      	add	sp, #52	; 0x34
 800d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2de:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800d2e2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800d2e6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d2ea:	eb00 0208 	add.w	r2, r0, r8
 800d2ee:	3a01      	subs	r2, #1
 800d2f0:	f00a fc5c 	bl	8017bac <GUI__InvertRectColors>
 800d2f4:	e7cd      	b.n	800d292 <_Paint+0x18e>
 800d2f6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d2f8:	f00a fe56 	bl	8017fa8 <GUI_SetColor>
 800d2fc:	9b01      	ldr	r3, [sp, #4]
 800d2fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d302:	f00a fe45 	bl	8017f90 <GUI_SetBkColor>
 800d306:	e7b0      	b.n	800d26a <_Paint+0x166>
 800d308:	f00b ff32 	bl	8019170 <GUI_ALLOC_LockH>
 800d30c:	9002      	str	r0, [sp, #8]
 800d30e:	4684      	mov	ip, r0
 800d310:	e72a      	b.n	800d168 <_Paint+0x64>
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	2100      	movs	r1, #0
 800d316:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800d31a:	f001 fb7b 	bl	800ea14 <WM_RestartTimer>
 800d31e:	e7d3      	b.n	800d2c8 <_Paint+0x1c4>
 800d320:	f00b ff26 	bl	8019170 <GUI_ALLOC_LockH>
 800d324:	9000      	str	r0, [sp, #0]
 800d326:	e77f      	b.n	800d228 <_Paint+0x124>
 800d328:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d32a:	b1f3      	cbz	r3, 800d36a <_Paint+0x266>
 800d32c:	b1ec      	cbz	r4, 800d36a <_Paint+0x266>
 800d32e:	443b      	add	r3, r7
 800d330:	429f      	cmp	r7, r3
 800d332:	da41      	bge.n	800d3b8 <_Paint+0x2b4>
 800d334:	4670      	mov	r0, lr
 800d336:	f04f 0800 	mov.w	r8, #0
 800d33a:	e000      	b.n	800d33e <_Paint+0x23a>
 800d33c:	9802      	ldr	r0, [sp, #8]
 800d33e:	4639      	mov	r1, r7
 800d340:	465a      	mov	r2, fp
 800d342:	2300      	movs	r3, #0
 800d344:	f008 fe72 	bl	801602c <GUI__GetCursorCharacter>
 800d348:	f00b f8c4 	bl	80184d4 <GUI_GetCharDistX>
 800d34c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d34e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d350:	3701      	adds	r7, #1
 800d352:	441a      	add	r2, r3
 800d354:	4297      	cmp	r7, r2
 800d356:	4480      	add	r8, r0
 800d358:	dbf0      	blt.n	800d33c <_Paint+0x238>
 800d35a:	9d03      	ldr	r5, [sp, #12]
 800d35c:	9f02      	ldr	r7, [sp, #8]
 800d35e:	f1b8 0f00 	cmp.w	r8, #0
 800d362:	d10e      	bne.n	800d382 <_Paint+0x27e>
 800d364:	f04f 0801 	mov.w	r8, #1
 800d368:	e00b      	b.n	800d382 <_Paint+0x27e>
 800d36a:	4639      	mov	r1, r7
 800d36c:	ab03      	add	r3, sp, #12
 800d36e:	4670      	mov	r0, lr
 800d370:	465a      	mov	r2, fp
 800d372:	f008 fe5b 	bl	801602c <GUI__GetCursorCharacter>
 800d376:	f00b f8ad 	bl	80184d4 <GUI_GetCharDistX>
 800d37a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d37c:	9f02      	ldr	r7, [sp, #8]
 800d37e:	9d03      	ldr	r5, [sp, #12]
 800d380:	4680      	mov	r8, r0
 800d382:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d386:	aa04      	add	r2, sp, #16
 800d388:	e882 0003 	stmia.w	r2, {r0, r1}
 800d38c:	2d00      	cmp	r5, #0
 800d38e:	f43f af38 	beq.w	800d202 <_Paint+0xfe>
 800d392:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d396:	ebc8 0505 	rsb	r5, r8, r5
 800d39a:	b2ad      	uxth	r5, r5
 800d39c:	f8ad 5010 	strh.w	r5, [sp, #16]
 800d3a0:	e731      	b.n	800d206 <_Paint+0x102>
 800d3a2:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <_Paint+0x2c0>)
 800d3a4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4670      	mov	r0, lr
 800d3aa:	4659      	mov	r1, fp
 800d3ac:	4798      	blx	r3
 800d3ae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d3b0:	9f02      	ldr	r7, [sp, #8]
 800d3b2:	9003      	str	r0, [sp, #12]
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	e7e4      	b.n	800d382 <_Paint+0x27e>
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	f04f 0801 	mov.w	r8, #1
 800d3be:	e71a      	b.n	800d1f6 <_Paint+0xf2>
 800d3c0:	2002bfc8 	.word	0x2002bfc8
 800d3c4:	2002bfdc 	.word	0x2002bfdc
 800d3c8:	2000026c 	.word	0x2000026c

0800d3cc <EDIT__GetCurrentChar>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	b918      	cbnz	r0, 800d3de <EDIT__GetCurrentChar+0x12>
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4620      	mov	r0, r4
 800d3da:	b002      	add	sp, #8
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
 800d3de:	f00b fec7 	bl	8019170 <GUI_ALLOC_LockH>
 800d3e2:	ad02      	add	r5, sp, #8
 800d3e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d3e6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	f009 f88c 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800d3f0:	4430      	add	r0, r6
 800d3f2:	f009 f84b 	bl	801648c <GUI_UC_GetCharCode>
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f00b fecb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d3fe:	4620      	mov	r0, r4
 800d400:	b002      	add	sp, #8
 800d402:	bd70      	pop	{r4, r5, r6, pc}

0800d404 <EDIT__SetCursorPos>:
 800d404:	b530      	push	{r4, r5, lr}
 800d406:	b083      	sub	sp, #12
 800d408:	460c      	mov	r4, r1
 800d40a:	f00b feb1 	bl	8019170 <GUI_ALLOC_LockH>
 800d40e:	9000      	str	r0, [sp, #0]
 800d410:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d412:	b1f8      	cbz	r0, 800d454 <EDIT__SetCursorPos+0x50>
 800d414:	f00b feac 	bl	8019170 <GUI_ALLOC_LockH>
 800d418:	9001      	str	r0, [sp, #4]
 800d41a:	f009 f8a3 	bl	8016564 <GUI__GetNumChars>
 800d41e:	9b00      	ldr	r3, [sp, #0]
 800d420:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 800d424:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800d428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d42a:	2900      	cmp	r1, #0
 800d42c:	bf0c      	ite	eq
 800d42e:	4629      	moveq	r1, r5
 800d430:	1e69      	subne	r1, r5, #1
 800d432:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d436:	428c      	cmp	r4, r1
 800d438:	bfa8      	it	ge
 800d43a:	460c      	movge	r4, r1
 800d43c:	4284      	cmp	r4, r0
 800d43e:	bfb8      	it	lt
 800d440:	4620      	movlt	r0, r4
 800d442:	4282      	cmp	r2, r0
 800d444:	f04f 0200 	mov.w	r2, #0
 800d448:	bf18      	it	ne
 800d44a:	64d8      	strne	r0, [r3, #76]	; 0x4c
 800d44c:	651a      	str	r2, [r3, #80]	; 0x50
 800d44e:	a801      	add	r0, sp, #4
 800d450:	f00b fea0 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d454:	4668      	mov	r0, sp
 800d456:	f00b fe9d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d45a:	b003      	add	sp, #12
 800d45c:	bd30      	pop	{r4, r5, pc}
 800d45e:	bf00      	nop

0800d460 <EDIT_CreateEx>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	b089      	sub	sp, #36	; 0x24
 800d466:	4683      	mov	fp, r0
 800d468:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d46a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800d46c:	4e42      	ldr	r6, [pc, #264]	; (800d578 <EDIT_CreateEx+0x118>)
 800d46e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800d470:	468a      	mov	sl, r1
 800d472:	4691      	mov	r9, r2
 800d474:	4698      	mov	r8, r3
 800d476:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800d47a:	f009 faf9 	bl	8016a70 <GUI_Lock>
 800d47e:	9400      	str	r4, [sp, #0]
 800d480:	2460      	movs	r4, #96	; 0x60
 800d482:	9602      	str	r6, [sp, #8]
 800d484:	9501      	str	r5, [sp, #4]
 800d486:	4658      	mov	r0, fp
 800d488:	4651      	mov	r1, sl
 800d48a:	464a      	mov	r2, r9
 800d48c:	4643      	mov	r3, r8
 800d48e:	9403      	str	r4, [sp, #12]
 800d490:	f004 fb54 	bl	8011b3c <WM_CreateWindowAsChild>
 800d494:	4606      	mov	r6, r0
 800d496:	b928      	cbnz	r0, 800d4a4 <EDIT_CreateEx+0x44>
 800d498:	f009 fae0 	bl	8016a5c <GUI_Unlock>
 800d49c:	4630      	mov	r0, r6
 800d49e:	b009      	add	sp, #36	; 0x24
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	f00b fe64 	bl	8019170 <GUI_ALLOC_LockH>
 800d4a8:	4d34      	ldr	r5, [pc, #208]	; (800d57c <EDIT_CreateEx+0x11c>)
 800d4aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d4ac:	9005      	str	r0, [sp, #20]
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	f7fb ff36 	bl	8009320 <WIDGET__Init>
 800d4b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4b6:	f8dd e014 	ldr.w	lr, [sp, #20]
 800d4ba:	4474      	add	r4, lr
 800d4bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	1c7b      	adds	r3, r7, #1
 800d4c8:	bf18      	it	ne
 800d4ca:	2301      	movne	r3, #1
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	2f00      	cmp	r7, #0
 800d4d0:	f88e 2055 	strb.w	r2, [lr, #85]	; 0x55
 800d4d4:	f88e 3088 	strb.w	r3, [lr, #136]	; 0x88
 800d4d8:	dd4a      	ble.n	800d570 <EDIT_CreateEx+0x110>
 800d4da:	b2bf      	uxth	r7, r7
 800d4dc:	b23d      	sxth	r5, r7
 800d4de:	4415      	add	r5, r2
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	f8ae 7038 	strh.w	r7, [lr, #56]	; 0x38
 800d4e6:	f8ae 303a 	strh.w	r3, [lr, #58]	; 0x3a
 800d4ea:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 800d4ee:	a805      	add	r0, sp, #20
 800d4f0:	f00b fe50 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f00b fe3b 	bl	8019170 <GUI_ALLOC_LockH>
 800d4fa:	ac08      	add	r4, sp, #32
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800d500:	f844 0d08 	str.w	r0, [r4, #-8]!
 800d504:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d506:	4415      	add	r5, r2
 800d508:	4620      	mov	r0, r4
 800d50a:	f00b fe43 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d50e:	4638      	mov	r0, r7
 800d510:	4629      	mov	r1, r5
 800d512:	f00b fff3 	bl	80194fc <GUI_ALLOC_Realloc>
 800d516:	4680      	mov	r8, r0
 800d518:	b300      	cbz	r0, 800d55c <EDIT_CreateEx+0xfc>
 800d51a:	b187      	cbz	r7, 800d53e <EDIT_CreateEx+0xde>
 800d51c:	4630      	mov	r0, r6
 800d51e:	f00b fe27 	bl	8019170 <GUI_ALLOC_LockH>
 800d522:	4603      	mov	r3, r0
 800d524:	4620      	mov	r0, r4
 800d526:	875d      	strh	r5, [r3, #58]	; 0x3a
 800d528:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
 800d52c:	9306      	str	r3, [sp, #24]
 800d52e:	f00b fe31 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d532:	f009 fa93 	bl	8016a5c <GUI_Unlock>
 800d536:	4630      	mov	r0, r6
 800d538:	b009      	add	sp, #36	; 0x24
 800d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53e:	f00b fe17 	bl	8019170 <GUI_ALLOC_LockH>
 800d542:	f10d 0920 	add.w	r9, sp, #32
 800d546:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <EDIT_CreateEx+0x120>)
 800d548:	f849 0d04 	str.w	r0, [r9, #-4]!
 800d54c:	4639      	mov	r1, r7
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	462a      	mov	r2, r5
 800d552:	4798      	blx	r3
 800d554:	4648      	mov	r0, r9
 800d556:	f00b fe1d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d55a:	e7df      	b.n	800d51c <EDIT_CreateEx+0xbc>
 800d55c:	4630      	mov	r0, r6
 800d55e:	f004 fbe5 	bl	8011d2c <WM_DeleteWindow>
 800d562:	f009 fa7b 	bl	8016a5c <GUI_Unlock>
 800d566:	4646      	mov	r6, r8
 800d568:	4630      	mov	r0, r6
 800d56a:	b009      	add	sp, #36	; 0x24
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	2509      	movs	r5, #9
 800d572:	2708      	movs	r7, #8
 800d574:	e7b4      	b.n	800d4e0 <EDIT_CreateEx+0x80>
 800d576:	bf00      	nop
 800d578:	0800dc39 	.word	0x0800dc39
 800d57c:	200001e0 	.word	0x200001e0
 800d580:	20000240 	.word	0x20000240

0800d584 <EDIT_SetCursorAtPixel>:
 800d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d588:	4604      	mov	r4, r0
 800d58a:	b084      	sub	sp, #16
 800d58c:	460d      	mov	r5, r1
 800d58e:	b910      	cbnz	r0, 800d596 <EDIT_SetCursorAtPixel+0x12>
 800d590:	b004      	add	sp, #16
 800d592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d596:	f009 fa6b 	bl	8016a70 <GUI_Lock>
 800d59a:	4620      	mov	r0, r4
 800d59c:	f00b fde8 	bl	8019170 <GUI_ALLOC_LockH>
 800d5a0:	9001      	str	r0, [sp, #4]
 800d5a2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d5a4:	b938      	cbnz	r0, 800d5b6 <EDIT_SetCursorAtPixel+0x32>
 800d5a6:	a801      	add	r0, sp, #4
 800d5a8:	f00b fdf4 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d5ac:	f009 fa56 	bl	8016a5c <GUI_Unlock>
 800d5b0:	b004      	add	sp, #16
 800d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b6:	f00b fddb 	bl	8019170 <GUI_ALLOC_LockH>
 800d5ba:	9b01      	ldr	r3, [sp, #4]
 800d5bc:	9000      	str	r0, [sp, #0]
 800d5be:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d5c0:	f00a fd54 	bl	801806c <GUI_SetFont>
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f002 fe28 	bl	801021c <WM_GetWindowSizeX>
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	9800      	ldr	r0, [sp, #0]
 800d5d0:	f009 ff72 	bl	80174b8 <GUI_GetStringDistX>
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d5d8:	f002 0203 	and.w	r2, r2, #3
 800d5dc:	2a01      	cmp	r2, #1
 800d5de:	4606      	mov	r6, r0
 800d5e0:	d059      	beq.n	800d696 <EDIT_SetCursorAtPixel+0x112>
 800d5e2:	2a02      	cmp	r2, #2
 800d5e4:	d021      	beq.n	800d62a <EDIT_SetCursorAtPixel+0xa6>
 800d5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5ea:	6812      	ldr	r2, [r2, #0]
 800d5ec:	43db      	mvns	r3, r3
 800d5ee:	1a9b      	subs	r3, r3, r2
 800d5f0:	441d      	add	r5, r3
 800d5f2:	9800      	ldr	r0, [sp, #0]
 800d5f4:	f008 ffb6 	bl	8016564 <GUI__GetNumChars>
 800d5f8:	2d00      	cmp	r5, #0
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	db6d      	blt.n	800d6da <EDIT_SetCursorAtPixel+0x156>
 800d5fe:	42b5      	cmp	r5, r6
 800d600:	dd1c      	ble.n	800d63c <EDIT_SetCursorAtPixel+0xb8>
 800d602:	4620      	mov	r0, r4
 800d604:	f00b fdb4 	bl	8019170 <GUI_ALLOC_LockH>
 800d608:	9002      	str	r0, [sp, #8]
 800d60a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d14a      	bne.n	800d6a6 <EDIT_SetCursorAtPixel+0x122>
 800d610:	a802      	add	r0, sp, #8
 800d612:	f00b fdbf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d616:	4668      	mov	r0, sp
 800d618:	f00b fdbc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d61c:	4638      	mov	r0, r7
 800d61e:	f00a fd25 	bl	801806c <GUI_SetFont>
 800d622:	4620      	mov	r0, r4
 800d624:	f004 fa2e 	bl	8011a84 <WM_InvalidateWindow>
 800d628:	e7bd      	b.n	800d5a6 <EDIT_SetCursorAtPixel+0x22>
 800d62a:	ebc0 0808 	rsb	r8, r0, r8
 800d62e:	f108 0801 	add.w	r8, r8, #1
 800d632:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800d636:	eba5 0568 	sub.w	r5, r5, r8, asr #1
 800d63a:	e7da      	b.n	800d5f2 <EDIT_SetCursorAtPixel+0x6e>
 800d63c:	4629      	mov	r1, r5
 800d63e:	4602      	mov	r2, r0
 800d640:	9800      	ldr	r0, [sp, #0]
 800d642:	f008 fce9 	bl	8016018 <GUI__GetCursorPosChar>
 800d646:	4605      	mov	r5, r0
 800d648:	4620      	mov	r0, r4
 800d64a:	f00b fd91 	bl	8019170 <GUI_ALLOC_LockH>
 800d64e:	9002      	str	r0, [sp, #8]
 800d650:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d652:	2800      	cmp	r0, #0
 800d654:	d0dc      	beq.n	800d610 <EDIT_SetCursorAtPixel+0x8c>
 800d656:	f00b fd8b 	bl	8019170 <GUI_ALLOC_LockH>
 800d65a:	9003      	str	r0, [sp, #12]
 800d65c:	f008 ff82 	bl	8016564 <GUI__GetNumChars>
 800d660:	9b02      	ldr	r3, [sp, #8]
 800d662:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 800d666:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800d66a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d66c:	2900      	cmp	r1, #0
 800d66e:	bf0c      	ite	eq
 800d670:	4631      	moveq	r1, r6
 800d672:	1e71      	subne	r1, r6, #1
 800d674:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800d678:	428d      	cmp	r5, r1
 800d67a:	bfa8      	it	ge
 800d67c:	460d      	movge	r5, r1
 800d67e:	4285      	cmp	r5, r0
 800d680:	bfb8      	it	lt
 800d682:	4628      	movlt	r0, r5
 800d684:	4282      	cmp	r2, r0
 800d686:	d000      	beq.n	800d68a <EDIT_SetCursorAtPixel+0x106>
 800d688:	64d8      	str	r0, [r3, #76]	; 0x4c
 800d68a:	2200      	movs	r2, #0
 800d68c:	651a      	str	r2, [r3, #80]	; 0x50
 800d68e:	a803      	add	r0, sp, #12
 800d690:	f00b fd80 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d694:	e7bc      	b.n	800d610 <EDIT_SetCursorAtPixel+0x8c>
 800d696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d698:	ebc8 0800 	rsb	r8, r8, r0
 800d69c:	43db      	mvns	r3, r3
 800d69e:	ebc3 0808 	rsb	r8, r3, r8
 800d6a2:	4445      	add	r5, r8
 800d6a4:	e7a5      	b.n	800d5f2 <EDIT_SetCursorAtPixel+0x6e>
 800d6a6:	f00b fd63 	bl	8019170 <GUI_ALLOC_LockH>
 800d6aa:	9003      	str	r0, [sp, #12]
 800d6ac:	f008 ff5a 	bl	8016564 <GUI__GetNumChars>
 800d6b0:	9b02      	ldr	r3, [sp, #8]
 800d6b2:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 800d6b6:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800d6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	bf0c      	ite	eq
 800d6c0:	4629      	moveq	r1, r5
 800d6c2:	1e69      	subne	r1, r5, #1
 800d6c4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800d6c8:	4588      	cmp	r8, r1
 800d6ca:	bfa8      	it	ge
 800d6cc:	4688      	movge	r8, r1
 800d6ce:	4580      	cmp	r8, r0
 800d6d0:	bfb8      	it	lt
 800d6d2:	4640      	movlt	r0, r8
 800d6d4:	4282      	cmp	r2, r0
 800d6d6:	d1d7      	bne.n	800d688 <EDIT_SetCursorAtPixel+0x104>
 800d6d8:	e7d7      	b.n	800d68a <EDIT_SetCursorAtPixel+0x106>
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f00b fd48 	bl	8019170 <GUI_ALLOC_LockH>
 800d6e0:	9002      	str	r0, [sp, #8]
 800d6e2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d093      	beq.n	800d610 <EDIT_SetCursorAtPixel+0x8c>
 800d6e8:	f00b fd42 	bl	8019170 <GUI_ALLOC_LockH>
 800d6ec:	9003      	str	r0, [sp, #12]
 800d6ee:	f008 ff39 	bl	8016564 <GUI__GetNumChars>
 800d6f2:	9b02      	ldr	r3, [sp, #8]
 800d6f4:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 800d6f8:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800d6fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6fe:	2900      	cmp	r1, #0
 800d700:	bf0c      	ite	eq
 800d702:	4629      	moveq	r1, r5
 800d704:	1e69      	subne	r1, r5, #1
 800d706:	ea01 71e1 	and.w	r1, r1, r1, asr #31
 800d70a:	4281      	cmp	r1, r0
 800d70c:	bfb8      	it	lt
 800d70e:	4608      	movlt	r0, r1
 800d710:	4282      	cmp	r2, r0
 800d712:	d1b9      	bne.n	800d688 <EDIT_SetCursorAtPixel+0x104>
 800d714:	e7b9      	b.n	800d68a <EDIT_SetCursorAtPixel+0x106>
 800d716:	bf00      	nop

0800d718 <EDIT_AddKey>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	4683      	mov	fp, r0
 800d71e:	b089      	sub	sp, #36	; 0x24
 800d720:	460e      	mov	r6, r1
 800d722:	b910      	cbnz	r0, 800d72a <EDIT_AddKey+0x12>
 800d724:	b009      	add	sp, #36	; 0x24
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72a:	f009 f9a1 	bl	8016a70 <GUI_Lock>
 800d72e:	4658      	mov	r0, fp
 800d730:	f00b fd1e 	bl	8019170 <GUI_ALLOC_LockH>
 800d734:	ad08      	add	r5, sp, #32
 800d736:	4602      	mov	r2, r0
 800d738:	f845 0d18 	str.w	r0, [r5, #-24]!
 800d73c:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800d73e:	f892 9054 	ldrb.w	r9, [r2, #84]	; 0x54
 800d742:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800d746:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 800d748:	4628      	mov	r0, r5
 800d74a:	f00b fd23 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d74e:	b157      	cbz	r7, 800d766 <EDIT_AddKey+0x4e>
 800d750:	4631      	mov	r1, r6
 800d752:	4658      	mov	r0, fp
 800d754:	47b8      	blx	r7
 800d756:	4658      	mov	r0, fp
 800d758:	f004 f994 	bl	8011a84 <WM_InvalidateWindow>
 800d75c:	f009 f97e 	bl	8016a5c <GUI_Unlock>
 800d760:	b009      	add	sp, #36	; 0x24
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d766:	f1a6 0208 	sub.w	r2, r6, #8
 800d76a:	2a16      	cmp	r2, #22
 800d76c:	f200 8100 	bhi.w	800d970 <EDIT_AddKey+0x258>
 800d770:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d774:	00fe009a 	.word	0x00fe009a
 800d778:	00fe00fe 	.word	0x00fe00fe
 800d77c:	00fe00fe 	.word	0x00fe00fe
 800d780:	00fe00fe 	.word	0x00fe00fe
 800d784:	007f00d5 	.word	0x007f00d5
 800d788:	00460073 	.word	0x00460073
 800d78c:	00fe00fe 	.word	0x00fe00fe
 800d790:	00fe00fe 	.word	0x00fe00fe
 800d794:	00fe00fe 	.word	0x00fe00fe
 800d798:	00fe00fe 	.word	0x00fe00fe
 800d79c:	003700fe 	.word	0x003700fe
 800d7a0:	0017      	.short	0x0017
 800d7a2:	4658      	mov	r0, fp
 800d7a4:	f00b fce4 	bl	8019170 <GUI_ALLOC_LockH>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	a808      	add	r0, sp, #32
 800d7ac:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d7ae:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d7b2:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800d7b4:	f00b fcee 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d7b8:	2c00      	cmp	r4, #0
 800d7ba:	d0cc      	beq.n	800d756 <EDIT_AddKey+0x3e>
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f00b fcd7 	bl	8019170 <GUI_ALLOC_LockH>
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	9007      	str	r0, [sp, #28]
 800d7c8:	f008 fe9e 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f7f2 fd1e 	bl	8000210 <strlen>
 800d7d4:	4285      	cmp	r5, r0
 800d7d6:	f0c0 81b7 	bcc.w	800db48 <EDIT_AddKey+0x430>
 800d7da:	a807      	add	r0, sp, #28
 800d7dc:	f00b fcda 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d7e0:	e7b9      	b.n	800d756 <EDIT_AddKey+0x3e>
 800d7e2:	4658      	mov	r0, fp
 800d7e4:	f00b fcc4 	bl	8019170 <GUI_ALLOC_LockH>
 800d7e8:	f1b9 0f01 	cmp.w	r9, #1
 800d7ec:	9002      	str	r0, [sp, #8]
 800d7ee:	f040 8171 	bne.w	800dad4 <EDIT_AddKey+0x3bc>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f00b fccb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d7fe:	e7aa      	b.n	800d756 <EDIT_AddKey+0x3e>
 800d800:	f1b8 0f00 	cmp.w	r8, #0
 800d804:	d0a7      	beq.n	800d756 <EDIT_AddKey+0x3e>
 800d806:	4640      	mov	r0, r8
 800d808:	f00b fcb2 	bl	8019170 <GUI_ALLOC_LockH>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4605      	mov	r5, r0
 800d810:	9007      	str	r0, [sp, #28]
 800d812:	f008 fe79 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800d816:	4405      	add	r5, r0
 800d818:	4628      	mov	r0, r5
 800d81a:	f008 fe37 	bl	801648c <GUI_UC_GetCharCode>
 800d81e:	2200      	movs	r2, #0
 800d820:	4606      	mov	r6, r0
 800d822:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d826:	f88d 201a 	strb.w	r2, [sp, #26]
 800d82a:	f008 fe51 	bl	80164d0 <GUI_UC__CalcSizeOfChar>
 800d82e:	3e01      	subs	r6, #1
 800d830:	4604      	mov	r4, r0
 800d832:	b2b6      	uxth	r6, r6
 800d834:	4630      	mov	r0, r6
 800d836:	f008 fe4b 	bl	80164d0 <GUI_UC__CalcSizeOfChar>
 800d83a:	4284      	cmp	r4, r0
 800d83c:	d1cd      	bne.n	800d7da <EDIT_AddKey+0xc2>
 800d83e:	4631      	mov	r1, r6
 800d840:	a806      	add	r0, sp, #24
 800d842:	f008 fe33 	bl	80164ac <GUI_UC_Encode>
 800d846:	a906      	add	r1, sp, #24
 800d848:	4628      	mov	r0, r5
 800d84a:	4622      	mov	r2, r4
 800d84c:	f010 fbd6 	bl	801dffc <memcpy>
 800d850:	4658      	mov	r0, fp
 800d852:	2105      	movs	r1, #5
 800d854:	f002 fa1a 	bl	800fc8c <WM_NotifyParent>
 800d858:	e7bf      	b.n	800d7da <EDIT_AddKey+0xc2>
 800d85a:	4658      	mov	r0, fp
 800d85c:	f00b fc88 	bl	8019170 <GUI_ALLOC_LockH>
 800d860:	9006      	str	r0, [sp, #24]
 800d862:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d864:	2800      	cmp	r0, #0
 800d866:	f040 8162 	bne.w	800db2e <EDIT_AddKey+0x416>
 800d86a:	a806      	add	r0, sp, #24
 800d86c:	f00b fc92 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d870:	e771      	b.n	800d756 <EDIT_AddKey+0x3e>
 800d872:	f1b8 0f00 	cmp.w	r8, #0
 800d876:	f43f af6e 	beq.w	800d756 <EDIT_AddKey+0x3e>
 800d87a:	4640      	mov	r0, r8
 800d87c:	f00b fc78 	bl	8019170 <GUI_ALLOC_LockH>
 800d880:	4621      	mov	r1, r4
 800d882:	4605      	mov	r5, r0
 800d884:	9007      	str	r0, [sp, #28]
 800d886:	f008 fe3f 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800d88a:	4405      	add	r5, r0
 800d88c:	4628      	mov	r0, r5
 800d88e:	f008 fdfd 	bl	801648c <GUI_UC_GetCharCode>
 800d892:	2200      	movs	r2, #0
 800d894:	4606      	mov	r6, r0
 800d896:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d89a:	f88d 201a 	strb.w	r2, [sp, #26]
 800d89e:	f008 fe17 	bl	80164d0 <GUI_UC__CalcSizeOfChar>
 800d8a2:	3601      	adds	r6, #1
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	e7c4      	b.n	800d832 <EDIT_AddKey+0x11a>
 800d8a8:	2c00      	cmp	r4, #0
 800d8aa:	f43f af54 	beq.w	800d756 <EDIT_AddKey+0x3e>
 800d8ae:	4658      	mov	r0, fp
 800d8b0:	f00b fc5e 	bl	8019170 <GUI_ALLOC_LockH>
 800d8b4:	9006      	str	r0, [sp, #24]
 800d8b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d8b8:	b300      	cbz	r0, 800d8fc <EDIT_AddKey+0x1e4>
 800d8ba:	f00b fc59 	bl	8019170 <GUI_ALLOC_LockH>
 800d8be:	9007      	str	r0, [sp, #28]
 800d8c0:	f008 fe50 	bl	8016564 <GUI__GetNumChars>
 800d8c4:	9a06      	ldr	r2, [sp, #24]
 800d8c6:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 800d8ca:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 800d8ce:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800d8d0:	3c01      	subs	r4, #1
 800d8d2:	2d00      	cmp	r5, #0
 800d8d4:	bf0c      	ite	eq
 800d8d6:	4635      	moveq	r5, r6
 800d8d8:	1e75      	subne	r5, r6, #1
 800d8da:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d8de:	42a5      	cmp	r5, r4
 800d8e0:	bfb8      	it	lt
 800d8e2:	462c      	movlt	r4, r5
 800d8e4:	4284      	cmp	r4, r0
 800d8e6:	bfb8      	it	lt
 800d8e8:	4620      	movlt	r0, r4
 800d8ea:	4281      	cmp	r1, r0
 800d8ec:	f04f 0100 	mov.w	r1, #0
 800d8f0:	bf18      	it	ne
 800d8f2:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800d8f4:	6511      	str	r1, [r2, #80]	; 0x50
 800d8f6:	a807      	add	r0, sp, #28
 800d8f8:	f00b fc4c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d8fc:	a806      	add	r0, sp, #24
 800d8fe:	f00b fc49 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d902:	4658      	mov	r0, fp
 800d904:	f00b fc34 	bl	8019170 <GUI_ALLOC_LockH>
 800d908:	4602      	mov	r2, r0
 800d90a:	a806      	add	r0, sp, #24
 800d90c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d90e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800d910:	9206      	str	r2, [sp, #24]
 800d912:	f00b fc3f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d916:	2c00      	cmp	r4, #0
 800d918:	f43f af1d 	beq.w	800d756 <EDIT_AddKey+0x3e>
 800d91c:	e74e      	b.n	800d7bc <EDIT_AddKey+0xa4>
 800d91e:	4658      	mov	r0, fp
 800d920:	f00b fc26 	bl	8019170 <GUI_ALLOC_LockH>
 800d924:	9006      	str	r0, [sp, #24]
 800d926:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d928:	2800      	cmp	r0, #0
 800d92a:	d09e      	beq.n	800d86a <EDIT_AddKey+0x152>
 800d92c:	f00b fc20 	bl	8019170 <GUI_ALLOC_LockH>
 800d930:	9007      	str	r0, [sp, #28]
 800d932:	f008 fe17 	bl	8016564 <GUI__GetNumChars>
 800d936:	9a06      	ldr	r2, [sp, #24]
 800d938:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 800d93c:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 800d940:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800d942:	3c01      	subs	r4, #1
 800d944:	2d00      	cmp	r5, #0
 800d946:	bf0c      	ite	eq
 800d948:	4635      	moveq	r5, r6
 800d94a:	1e75      	subne	r5, r6, #1
 800d94c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d950:	42a5      	cmp	r5, r4
 800d952:	bfb8      	it	lt
 800d954:	462c      	movlt	r4, r5
 800d956:	4284      	cmp	r4, r0
 800d958:	bfb8      	it	lt
 800d95a:	4620      	movlt	r0, r4
 800d95c:	4281      	cmp	r1, r0
 800d95e:	f04f 0100 	mov.w	r1, #0
 800d962:	bf18      	it	ne
 800d964:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800d966:	6511      	str	r1, [r2, #80]	; 0x50
 800d968:	a807      	add	r0, sp, #28
 800d96a:	f00b fc13 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d96e:	e77c      	b.n	800d86a <EDIT_AddKey+0x152>
 800d970:	2e1f      	cmp	r6, #31
 800d972:	f77f aef0 	ble.w	800d756 <EDIT_AddKey+0x3e>
 800d976:	f1b9 0f00 	cmp.w	r9, #0
 800d97a:	f040 80f9 	bne.w	800db70 <EDIT_AddKey+0x458>
 800d97e:	4658      	mov	r0, fp
 800d980:	f00b fbf6 	bl	8019170 <GUI_ALLOC_LockH>
 800d984:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	; 0x38
 800d988:	9003      	str	r0, [sp, #12]
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	4607      	mov	r7, r0
 800d98e:	dd08      	ble.n	800d9a2 <EDIT_AddKey+0x28a>
 800d990:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d992:	2800      	cmp	r0, #0
 800d994:	f040 810e 	bne.w	800dbb4 <EDIT_AddKey+0x49c>
 800d998:	4680      	mov	r8, r0
 800d99a:	4590      	cmp	r8, r2
 800d99c:	f280 80e4 	bge.w	800db68 <EDIT_AddKey+0x450>
 800d9a0:	9f03      	ldr	r7, [sp, #12]
 800d9a2:	b2b6      	uxth	r6, r6
 800d9a4:	a803      	add	r0, sp, #12
 800d9a6:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
 800d9aa:	f00b fbf3 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f008 fd8e 	bl	80164d0 <GUI_UC__CalcSizeOfChar>
 800d9b4:	4607      	mov	r7, r0
 800d9b6:	4658      	mov	r0, fp
 800d9b8:	f00b fbda 	bl	8019170 <GUI_ALLOC_LockH>
 800d9bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d9be:	9004      	str	r0, [sp, #16]
 800d9c0:	2a00      	cmp	r2, #0
 800d9c2:	f040 8109 	bne.w	800dbd8 <EDIT_AddKey+0x4c0>
 800d9c6:	4615      	mov	r5, r2
 800d9c8:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800d9ca:	443d      	add	r5, r7
 800d9cc:	3501      	adds	r5, #1
 800d9ce:	1aad      	subs	r5, r5, r2
 800d9d0:	a804      	add	r0, sp, #16
 800d9d2:	f00b fbdf 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d9d6:	2d00      	cmp	r5, #0
 800d9d8:	f340 80fa 	ble.w	800dbd0 <EDIT_AddKey+0x4b8>
 800d9dc:	4658      	mov	r0, fp
 800d9de:	f00b fbc7 	bl	8019170 <GUI_ALLOC_LockH>
 800d9e2:	f10d 0a20 	add.w	sl, sp, #32
 800d9e6:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800d9e8:	f84a 0d08 	str.w	r0, [sl, #-8]!
 800d9ec:	3510      	adds	r5, #16
 800d9ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d9f0:	9000      	str	r0, [sp, #0]
 800d9f2:	eb05 0902 	add.w	r9, r5, r2
 800d9f6:	4650      	mov	r0, sl
 800d9f8:	f00b fbcc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800d9fc:	9800      	ldr	r0, [sp, #0]
 800d9fe:	4649      	mov	r1, r9
 800da00:	f00b fd7c 	bl	80194fc <GUI_ALLOC_Realloc>
 800da04:	9001      	str	r0, [sp, #4]
 800da06:	2800      	cmp	r0, #0
 800da08:	f43f aea5 	beq.w	800d756 <EDIT_AddKey+0x3e>
 800da0c:	9b00      	ldr	r3, [sp, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 80f1 	beq.w	800dbf6 <EDIT_AddKey+0x4de>
 800da14:	ad07      	add	r5, sp, #28
 800da16:	4658      	mov	r0, fp
 800da18:	f00b fbaa 	bl	8019170 <GUI_ALLOC_LockH>
 800da1c:	4602      	mov	r2, r0
 800da1e:	9b01      	ldr	r3, [sp, #4]
 800da20:	9006      	str	r0, [sp, #24]
 800da22:	4650      	mov	r0, sl
 800da24:	f8a2 903a 	strh.w	r9, [r2, #58]	; 0x3a
 800da28:	6353      	str	r3, [r2, #52]	; 0x34
 800da2a:	f00b fbb3 	bl	8019194 <GUI_ALLOC_UnlockH>
 800da2e:	4658      	mov	r0, fp
 800da30:	f00b fb9e 	bl	8019170 <GUI_ALLOC_LockH>
 800da34:	4602      	mov	r2, r0
 800da36:	a803      	add	r0, sp, #12
 800da38:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 800da3c:	9203      	str	r2, [sp, #12]
 800da3e:	f00b fba9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800da42:	4648      	mov	r0, r9
 800da44:	f00b fb94 	bl	8019170 <GUI_ALLOC_LockH>
 800da48:	4641      	mov	r1, r8
 800da4a:	4681      	mov	r9, r0
 800da4c:	9007      	str	r0, [sp, #28]
 800da4e:	f008 fd5b 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800da52:	eb09 0800 	add.w	r8, r9, r0
 800da56:	4640      	mov	r0, r8
 800da58:	f7f2 fbda 	bl	8000210 <strlen>
 800da5c:	4641      	mov	r1, r8
 800da5e:	1c42      	adds	r2, r0, #1
 800da60:	eb08 0007 	add.w	r0, r8, r7
 800da64:	f010 fad5 	bl	801e012 <memmove>
 800da68:	4631      	mov	r1, r6
 800da6a:	4640      	mov	r0, r8
 800da6c:	f008 fd1e 	bl	80164ac <GUI_UC_Encode>
 800da70:	4628      	mov	r0, r5
 800da72:	f00b fb8f 	bl	8019194 <GUI_ALLOC_UnlockH>
 800da76:	4658      	mov	r0, fp
 800da78:	2105      	movs	r1, #5
 800da7a:	f002 f907 	bl	800fc8c <WM_NotifyParent>
 800da7e:	4658      	mov	r0, fp
 800da80:	f00b fb76 	bl	8019170 <GUI_ALLOC_LockH>
 800da84:	9006      	str	r0, [sp, #24]
 800da86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800da88:	b300      	cbz	r0, 800dacc <EDIT_AddKey+0x3b4>
 800da8a:	f00b fb71 	bl	8019170 <GUI_ALLOC_LockH>
 800da8e:	9007      	str	r0, [sp, #28]
 800da90:	f008 fd68 	bl	8016564 <GUI__GetNumChars>
 800da94:	9a06      	ldr	r2, [sp, #24]
 800da96:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 800da9a:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 800da9e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800daa0:	3401      	adds	r4, #1
 800daa2:	2e00      	cmp	r6, #0
 800daa4:	bf0c      	ite	eq
 800daa6:	463e      	moveq	r6, r7
 800daa8:	1e7e      	subne	r6, r7, #1
 800daaa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800daae:	42a6      	cmp	r6, r4
 800dab0:	bfb8      	it	lt
 800dab2:	4634      	movlt	r4, r6
 800dab4:	4284      	cmp	r4, r0
 800dab6:	bfb8      	it	lt
 800dab8:	4620      	movlt	r0, r4
 800daba:	4281      	cmp	r1, r0
 800dabc:	f04f 0100 	mov.w	r1, #0
 800dac0:	bf18      	it	ne
 800dac2:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800dac4:	6511      	str	r1, [r2, #80]	; 0x50
 800dac6:	4628      	mov	r0, r5
 800dac8:	f00b fb64 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dacc:	4650      	mov	r0, sl
 800dace:	f00b fb61 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dad2:	e640      	b.n	800d756 <EDIT_AddKey+0x3e>
 800dad4:	2201      	movs	r2, #1
 800dad6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800dada:	4658      	mov	r0, fp
 800dadc:	f00b fb48 	bl	8019170 <GUI_ALLOC_LockH>
 800dae0:	9006      	str	r0, [sp, #24]
 800dae2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800dae4:	b1f8      	cbz	r0, 800db26 <EDIT_AddKey+0x40e>
 800dae6:	f00b fb43 	bl	8019170 <GUI_ALLOC_LockH>
 800daea:	9007      	str	r0, [sp, #28]
 800daec:	f008 fd3a 	bl	8016564 <GUI__GetNumChars>
 800daf0:	9a06      	ldr	r2, [sp, #24]
 800daf2:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 800daf6:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 800dafa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800dafc:	2e00      	cmp	r6, #0
 800dafe:	bf0c      	ite	eq
 800db00:	463e      	moveq	r6, r7
 800db02:	1e7e      	subne	r6, r7, #1
 800db04:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800db08:	42a6      	cmp	r6, r4
 800db0a:	bfb8      	it	lt
 800db0c:	4634      	movlt	r4, r6
 800db0e:	4284      	cmp	r4, r0
 800db10:	bfb8      	it	lt
 800db12:	4620      	movlt	r0, r4
 800db14:	4281      	cmp	r1, r0
 800db16:	f04f 0100 	mov.w	r1, #0
 800db1a:	bf18      	it	ne
 800db1c:	64d0      	strne	r0, [r2, #76]	; 0x4c
 800db1e:	6511      	str	r1, [r2, #80]	; 0x50
 800db20:	a807      	add	r0, sp, #28
 800db22:	f00b fb37 	bl	8019194 <GUI_ALLOC_UnlockH>
 800db26:	a806      	add	r0, sp, #24
 800db28:	f00b fb34 	bl	8019194 <GUI_ALLOC_UnlockH>
 800db2c:	e664      	b.n	800d7f8 <EDIT_AddKey+0xe0>
 800db2e:	f00b fb1f 	bl	8019170 <GUI_ALLOC_LockH>
 800db32:	9007      	str	r0, [sp, #28]
 800db34:	f008 fd16 	bl	8016564 <GUI__GetNumChars>
 800db38:	9a06      	ldr	r2, [sp, #24]
 800db3a:	3401      	adds	r4, #1
 800db3c:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 800db40:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 800db44:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800db46:	e6fd      	b.n	800d944 <EDIT_AddKey+0x22c>
 800db48:	442c      	add	r4, r5
 800db4a:	4620      	mov	r0, r4
 800db4c:	f008 fc8e 	bl	801646c <GUI_UC_GetCharSize>
 800db50:	1821      	adds	r1, r4, r0
 800db52:	4620      	mov	r0, r4
 800db54:	f010 fb3c 	bl	801e1d0 <strcpy>
 800db58:	a807      	add	r0, sp, #28
 800db5a:	f00b fb1b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800db5e:	4658      	mov	r0, fp
 800db60:	2105      	movs	r1, #5
 800db62:	f002 f893 	bl	800fc8c <WM_NotifyParent>
 800db66:	e5f6      	b.n	800d756 <EDIT_AddKey+0x3e>
 800db68:	a803      	add	r0, sp, #12
 800db6a:	f00b fb13 	bl	8019194 <GUI_ALLOC_UnlockH>
 800db6e:	e5f2      	b.n	800d756 <EDIT_AddKey+0x3e>
 800db70:	4658      	mov	r0, fp
 800db72:	f00b fafd 	bl	8019170 <GUI_ALLOC_LockH>
 800db76:	f10d 0a20 	add.w	sl, sp, #32
 800db7a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800db7c:	f84a 0d08 	str.w	r0, [sl, #-8]!
 800db80:	4602      	mov	r2, r0
 800db82:	4650      	mov	r0, sl
 800db84:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
 800db86:	f00b fb05 	bl	8019194 <GUI_ALLOC_UnlockH>
 800db8a:	2d00      	cmp	r5, #0
 800db8c:	f43f aef7 	beq.w	800d97e <EDIT_AddKey+0x266>
 800db90:	4628      	mov	r0, r5
 800db92:	f00b faed 	bl	8019170 <GUI_ALLOC_LockH>
 800db96:	4639      	mov	r1, r7
 800db98:	4605      	mov	r5, r0
 800db9a:	9007      	str	r0, [sp, #28]
 800db9c:	f008 fcb4 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800dba0:	4607      	mov	r7, r0
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7f2 fb34 	bl	8000210 <strlen>
 800dba8:	4287      	cmp	r7, r0
 800dbaa:	d332      	bcc.n	800dc12 <EDIT_AddKey+0x4fa>
 800dbac:	a807      	add	r0, sp, #28
 800dbae:	f00b faf1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dbb2:	e6e4      	b.n	800d97e <EDIT_AddKey+0x266>
 800dbb4:	f00b fadc 	bl	8019170 <GUI_ALLOC_LockH>
 800dbb8:	ad08      	add	r5, sp, #32
 800dbba:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dbbe:	f008 fcd1 	bl	8016564 <GUI__GetNumChars>
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f00b fae5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dbca:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800dbce:	e6e4      	b.n	800d99a <EDIT_AddKey+0x282>
 800dbd0:	f10d 0a18 	add.w	sl, sp, #24
 800dbd4:	ad07      	add	r5, sp, #28
 800dbd6:	e72a      	b.n	800da2e <EDIT_AddKey+0x316>
 800dbd8:	4610      	mov	r0, r2
 800dbda:	f00b fac9 	bl	8019170 <GUI_ALLOC_LockH>
 800dbde:	f10d 0920 	add.w	r9, sp, #32
 800dbe2:	f849 0d0c 	str.w	r0, [r9, #-12]!
 800dbe6:	f7f2 fb13 	bl	8000210 <strlen>
 800dbea:	4605      	mov	r5, r0
 800dbec:	4648      	mov	r0, r9
 800dbee:	f00b fad1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dbf2:	9804      	ldr	r0, [sp, #16]
 800dbf4:	e6e8      	b.n	800d9c8 <EDIT_AddKey+0x2b0>
 800dbf6:	f00b fabb 	bl	8019170 <GUI_ALLOC_LockH>
 800dbfa:	ad08      	add	r5, sp, #32
 800dbfc:	4a0d      	ldr	r2, [pc, #52]	; (800dc34 <EDIT_AddKey+0x51c>)
 800dbfe:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dc02:	6813      	ldr	r3, [r2, #0]
 800dc04:	9900      	ldr	r1, [sp, #0]
 800dc06:	464a      	mov	r2, r9
 800dc08:	4798      	blx	r3
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f00b fac2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dc10:	e701      	b.n	800da16 <EDIT_AddKey+0x2fe>
 800dc12:	443d      	add	r5, r7
 800dc14:	4628      	mov	r0, r5
 800dc16:	f008 fc29 	bl	801646c <GUI_UC_GetCharSize>
 800dc1a:	1829      	adds	r1, r5, r0
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f010 fad7 	bl	801e1d0 <strcpy>
 800dc22:	a807      	add	r0, sp, #28
 800dc24:	f00b fab6 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dc28:	4658      	mov	r0, fp
 800dc2a:	2105      	movs	r1, #5
 800dc2c:	f002 f82e 	bl	800fc8c <WM_NotifyParent>
 800dc30:	e6a5      	b.n	800d97e <EDIT_AddKey+0x266>
 800dc32:	bf00      	nop
 800dc34:	20000240 	.word	0x20000240

0800dc38 <EDIT_Callback>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	6845      	ldr	r5, [r0, #4]
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4628      	mov	r0, r5
 800dc42:	f000 fd37 	bl	800e6b4 <WM__IsEnabled>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4606      	mov	r6, r0
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7fb fc62 	bl	8009514 <WIDGET_HandleActive>
 800dc50:	b1d8      	cbz	r0, 800dc8a <EDIT_Callback+0x52>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	2b0f      	cmp	r3, #15
 800dc56:	d030      	beq.n	800dcba <EDIT_Callback+0x82>
 800dc58:	dc19      	bgt.n	800dc8e <EDIT_Callback+0x56>
 800dc5a:	2b0b      	cmp	r3, #11
 800dc5c:	d032      	beq.n	800dcc4 <EDIT_Callback+0x8c>
 800dc5e:	2b0e      	cmp	r3, #14
 800dc60:	d13d      	bne.n	800dcde <EDIT_Callback+0xa6>
 800dc62:	2e00      	cmp	r6, #0
 800dc64:	d03b      	beq.n	800dcde <EDIT_Callback+0xa6>
 800dc66:	68e3      	ldr	r3, [r4, #12]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	2a00      	cmp	r2, #0
 800dc6c:	dd37      	ble.n	800dcde <EDIT_Callback+0xa6>
 800dc6e:	6819      	ldr	r1, [r3, #0]
 800dc70:	f1a1 0309 	sub.w	r3, r1, #9
 800dc74:	2b19      	cmp	r3, #25
 800dc76:	d805      	bhi.n	800dc84 <EDIT_Callback+0x4c>
 800dc78:	2001      	movs	r0, #1
 800dc7a:	4a32      	ldr	r2, [pc, #200]	; (800dd44 <EDIT_Callback+0x10c>)
 800dc7c:	fa00 f303 	lsl.w	r3, r0, r3
 800dc80:	401a      	ands	r2, r3
 800dc82:	bb62      	cbnz	r2, 800dcde <EDIT_Callback+0xa6>
 800dc84:	4628      	mov	r0, r5
 800dc86:	f7ff fd47 	bl	800d718 <EDIT_AddKey>
 800dc8a:	b002      	add	sp, #8
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	f240 1213 	movw	r2, #275	; 0x113
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d028      	beq.n	800dce8 <EDIT_Callback+0xb0>
 800dc96:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800dc9a:	d120      	bne.n	800dcde <EDIT_Callback+0xa6>
 800dc9c:	68e3      	ldr	r3, [r4, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d04b      	beq.n	800dd3a <EDIT_Callback+0x102>
 800dca2:	7a1a      	ldrb	r2, [r3, #8]
 800dca4:	2a00      	cmp	r2, #0
 800dca6:	d043      	beq.n	800dd30 <EDIT_Callback+0xf8>
 800dca8:	6819      	ldr	r1, [r3, #0]
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f7ff fc6a 	bl	800d584 <EDIT_SetCursorAtPixel>
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	f001 ffea 	bl	800fc8c <WM_NotifyParent>
 800dcb8:	e011      	b.n	800dcde <EDIT_Callback+0xa6>
 800dcba:	4628      	mov	r0, r5
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	f7ff fa21 	bl	800d104 <_Paint>
 800dcc2:	e7e2      	b.n	800dc8a <EDIT_Callback+0x52>
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	f00b fa53 	bl	8019170 <GUI_ALLOC_LockH>
 800dcca:	ad02      	add	r5, sp, #8
 800dccc:	4603      	mov	r3, r0
 800dcce:	f845 3d04 	str.w	r3, [r5, #-4]!
 800dcd2:	3034      	adds	r0, #52	; 0x34
 800dcd4:	f00b fb7e 	bl	80193d4 <GUI_ALLOC_FreePtr>
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f00b fa5b 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dcde:	4620      	mov	r0, r4
 800dce0:	f004 fc36 	bl	8012550 <WM_DefaultProc>
 800dce4:	b002      	add	sp, #8
 800dce6:	bd70      	pop	{r4, r5, r6, pc}
 800dce8:	4628      	mov	r0, r5
 800dcea:	f004 f83d 	bl	8011d68 <WM_SelectWindow>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f00b fa3e 	bl	8019170 <GUI_ALLOC_LockH>
 800dcf4:	ae02      	add	r6, sp, #8
 800dcf6:	f846 0d04 	str.w	r0, [r6, #-4]!
 800dcfa:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
 800dcfe:	f083 0304 	eor.w	r3, r3, #4
 800dd02:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800dd06:	4630      	mov	r0, r6
 800dd08:	f00b fa44 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	2100      	movs	r1, #0
 800dd10:	f7ff f9f8 	bl	800d104 <_Paint>
 800dd14:	4628      	mov	r0, r5
 800dd16:	f00b fa2b 	bl	8019170 <GUI_ALLOC_LockH>
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	f000 fe76 	bl	800ea14 <WM_RestartTimer>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f00b fa33 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dd2e:	e7d6      	b.n	800dcde <EDIT_Callback+0xa6>
 800dd30:	4628      	mov	r0, r5
 800dd32:	2102      	movs	r1, #2
 800dd34:	f001 ffaa 	bl	800fc8c <WM_NotifyParent>
 800dd38:	e7d1      	b.n	800dcde <EDIT_Callback+0xa6>
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	2103      	movs	r1, #3
 800dd3e:	f001 ffa5 	bl	800fc8c <WM_NotifyParent>
 800dd42:	e7cc      	b.n	800dcde <EDIT_Callback+0xa6>
 800dd44:	03040013 	.word	0x03040013

0800dd48 <EDIT_SetFont>:
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	460e      	mov	r6, r1
 800dd50:	b188      	cbz	r0, 800dd76 <EDIT_SetFont+0x2e>
 800dd52:	f008 fe8d 	bl	8016a70 <GUI_Lock>
 800dd56:	4620      	mov	r0, r4
 800dd58:	f00b fa0a 	bl	8019170 <GUI_ALLOC_LockH>
 800dd5c:	ad02      	add	r5, sp, #8
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f845 3d04 	str.w	r3, [r5, #-4]!
 800dd64:	6686      	str	r6, [r0, #104]	; 0x68
 800dd66:	4620      	mov	r0, r4
 800dd68:	f003 fe8c 	bl	8011a84 <WM_InvalidateWindow>
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f00b fa11 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dd72:	f008 fe73 	bl	8016a5c <GUI_Unlock>
 800dd76:	b002      	add	sp, #8
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
 800dd7a:	bf00      	nop

0800dd7c <EDIT_SetBkColor>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4604      	mov	r4, r0
 800dd80:	b082      	sub	sp, #8
 800dd82:	460d      	mov	r5, r1
 800dd84:	4616      	mov	r6, r2
 800dd86:	b908      	cbnz	r0, 800dd8c <EDIT_SetBkColor+0x10>
 800dd88:	b002      	add	sp, #8
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f008 fe70 	bl	8016a70 <GUI_Lock>
 800dd90:	4620      	mov	r0, r4
 800dd92:	f00b f9ed 	bl	8019170 <GUI_ALLOC_LockH>
 800dd96:	4603      	mov	r3, r0
 800dd98:	9001      	str	r0, [sp, #4]
 800dd9a:	b108      	cbz	r0, 800dda0 <EDIT_SetBkColor+0x24>
 800dd9c:	2d02      	cmp	r5, #2
 800dd9e:	d906      	bls.n	800ddae <EDIT_SetBkColor+0x32>
 800dda0:	a801      	add	r0, sp, #4
 800dda2:	f00b f9f7 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dda6:	f008 fe59 	bl	8016a5c <GUI_Unlock>
 800ddaa:	b002      	add	sp, #8
 800ddac:	bd70      	pop	{r4, r5, r6, pc}
 800ddae:	351e      	adds	r5, #30
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800ddb6:	f003 fe65 	bl	8011a84 <WM_InvalidateWindow>
 800ddba:	e7f1      	b.n	800dda0 <EDIT_SetBkColor+0x24>

0800ddbc <EDIT_SetTextColor>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	4616      	mov	r6, r2
 800ddc6:	b908      	cbnz	r0, 800ddcc <EDIT_SetTextColor+0x10>
 800ddc8:	b002      	add	sp, #8
 800ddca:	bd70      	pop	{r4, r5, r6, pc}
 800ddcc:	f008 fe50 	bl	8016a70 <GUI_Lock>
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f00b f9cd 	bl	8019170 <GUI_ALLOC_LockH>
 800ddd6:	9001      	str	r0, [sp, #4]
 800ddd8:	b108      	cbz	r0, 800ddde <EDIT_SetTextColor+0x22>
 800ddda:	2d02      	cmp	r5, #2
 800dddc:	d906      	bls.n	800ddec <EDIT_SetTextColor+0x30>
 800ddde:	a801      	add	r0, sp, #4
 800dde0:	f00b f9d8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dde4:	f008 fe3a 	bl	8016a5c <GUI_Unlock>
 800dde8:	b002      	add	sp, #8
 800ddea:	bd70      	pop	{r4, r5, r6, pc}
 800ddec:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	66ee      	str	r6, [r5, #108]	; 0x6c
 800ddf4:	f003 fe46 	bl	8011a84 <WM_InvalidateWindow>
 800ddf8:	e7f1      	b.n	800ddde <EDIT_SetTextColor+0x22>
 800ddfa:	bf00      	nop

0800ddfc <EDIT_GetValue>:
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	4604      	mov	r4, r0
 800de00:	b082      	sub	sp, #8
 800de02:	b168      	cbz	r0, 800de20 <EDIT_GetValue+0x24>
 800de04:	f008 fe34 	bl	8016a70 <GUI_Lock>
 800de08:	4620      	mov	r0, r4
 800de0a:	f00b f9b1 	bl	8019170 <GUI_ALLOC_LockH>
 800de0e:	ab02      	add	r3, sp, #8
 800de10:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800de12:	f843 0d04 	str.w	r0, [r3, #-4]!
 800de16:	4618      	mov	r0, r3
 800de18:	f00b f9bc 	bl	8019194 <GUI_ALLOC_UnlockH>
 800de1c:	f008 fe1e 	bl	8016a5c <GUI_Unlock>
 800de20:	4620      	mov	r0, r4
 800de22:	b002      	add	sp, #8
 800de24:	bd10      	pop	{r4, pc}
 800de26:	bf00      	nop

0800de28 <EDIT_SetValue>:
 800de28:	b530      	push	{r4, r5, lr}
 800de2a:	4604      	mov	r4, r0
 800de2c:	b083      	sub	sp, #12
 800de2e:	460d      	mov	r5, r1
 800de30:	b908      	cbnz	r0, 800de36 <EDIT_SetValue+0xe>
 800de32:	b003      	add	sp, #12
 800de34:	bd30      	pop	{r4, r5, pc}
 800de36:	f008 fe1b 	bl	8016a70 <GUI_Lock>
 800de3a:	4620      	mov	r0, r4
 800de3c:	f00b f998 	bl	8019170 <GUI_ALLOC_LockH>
 800de40:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800de42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800de44:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800de46:	9001      	str	r0, [sp, #4]
 800de48:	428d      	cmp	r5, r1
 800de4a:	bfb8      	it	lt
 800de4c:	460d      	movlt	r5, r1
 800de4e:	4295      	cmp	r5, r2
 800de50:	bfa8      	it	ge
 800de52:	4615      	movge	r5, r2
 800de54:	42ab      	cmp	r3, r5
 800de56:	d012      	beq.n	800de7e <EDIT_SetValue+0x56>
 800de58:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800de5a:	6485      	str	r5, [r0, #72]	; 0x48
 800de5c:	b10b      	cbz	r3, 800de62 <EDIT_SetValue+0x3a>
 800de5e:	4620      	mov	r0, r4
 800de60:	4798      	blx	r3
 800de62:	4620      	mov	r0, r4
 800de64:	f003 fe0e 	bl	8011a84 <WM_InvalidateWindow>
 800de68:	a801      	add	r0, sp, #4
 800de6a:	f00b f993 	bl	8019194 <GUI_ALLOC_UnlockH>
 800de6e:	4620      	mov	r0, r4
 800de70:	2105      	movs	r1, #5
 800de72:	f001 ff0b 	bl	800fc8c <WM_NotifyParent>
 800de76:	f008 fdf1 	bl	8016a5c <GUI_Unlock>
 800de7a:	b003      	add	sp, #12
 800de7c:	bd30      	pop	{r4, r5, pc}
 800de7e:	a801      	add	r0, sp, #4
 800de80:	f00b f988 	bl	8019194 <GUI_ALLOC_UnlockH>
 800de84:	e7f7      	b.n	800de76 <EDIT_SetValue+0x4e>
 800de86:	bf00      	nop

0800de88 <EDIT_SetMaxLen>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	4604      	mov	r4, r0
 800de8e:	b085      	sub	sp, #20
 800de90:	460d      	mov	r5, r1
 800de92:	b910      	cbnz	r0, 800de9a <EDIT_SetMaxLen+0x12>
 800de94:	b005      	add	sp, #20
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	f008 fde9 	bl	8016a70 <GUI_Lock>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f00b f966 	bl	8019170 <GUI_ALLOC_LockH>
 800dea4:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800dea8:	9000      	str	r0, [sp, #0]
 800deaa:	42ab      	cmp	r3, r5
 800deac:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
 800deb0:	d035      	beq.n	800df1e <EDIT_SetMaxLen+0x96>
 800deb2:	dd02      	ble.n	800deba <EDIT_SetMaxLen+0x32>
 800deb4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d139      	bne.n	800df2e <EDIT_SetMaxLen+0xa6>
 800deba:	4668      	mov	r0, sp
 800debc:	f00b f96a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dec0:	4620      	mov	r0, r4
 800dec2:	f00b f955 	bl	8019170 <GUI_ALLOC_LockH>
 800dec6:	ae04      	add	r6, sp, #16
 800dec8:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800deca:	f846 0d08 	str.w	r0, [r6, #-8]!
 800dece:	ebc8 0805 	rsb	r8, r8, r5
 800ded2:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 800ded6:	f108 0801 	add.w	r8, r8, #1
 800deda:	4490      	add	r8, r2
 800dedc:	4630      	mov	r0, r6
 800dede:	f00b f959 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dee2:	4648      	mov	r0, r9
 800dee4:	4641      	mov	r1, r8
 800dee6:	f00b fb09 	bl	80194fc <GUI_ALLOC_Realloc>
 800deea:	4682      	mov	sl, r0
 800deec:	b170      	cbz	r0, 800df0c <EDIT_SetMaxLen+0x84>
 800deee:	f1b9 0f00 	cmp.w	r9, #0
 800def2:	d027      	beq.n	800df44 <EDIT_SetMaxLen+0xbc>
 800def4:	4620      	mov	r0, r4
 800def6:	f00b f93b 	bl	8019170 <GUI_ALLOC_LockH>
 800defa:	4603      	mov	r3, r0
 800defc:	4630      	mov	r0, r6
 800defe:	f8a3 803a 	strh.w	r8, [r3, #58]	; 0x3a
 800df02:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
 800df06:	9302      	str	r3, [sp, #8]
 800df08:	f00b f944 	bl	8019194 <GUI_ALLOC_UnlockH>
 800df0c:	4620      	mov	r0, r4
 800df0e:	f00b f92f 	bl	8019170 <GUI_ALLOC_LockH>
 800df12:	4603      	mov	r3, r0
 800df14:	4620      	mov	r0, r4
 800df16:	871d      	strh	r5, [r3, #56]	; 0x38
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	f003 fdb3 	bl	8011a84 <WM_InvalidateWindow>
 800df1e:	4668      	mov	r0, sp
 800df20:	f00b f938 	bl	8019194 <GUI_ALLOC_UnlockH>
 800df24:	f008 fd9a 	bl	8016a5c <GUI_Unlock>
 800df28:	b005      	add	sp, #20
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	f00b f91f 	bl	8019170 <GUI_ALLOC_LockH>
 800df32:	9001      	str	r0, [sp, #4]
 800df34:	f008 fb16 	bl	8016564 <GUI__GetNumChars>
 800df38:	4285      	cmp	r5, r0
 800df3a:	db12      	blt.n	800df62 <EDIT_SetMaxLen+0xda>
 800df3c:	a801      	add	r0, sp, #4
 800df3e:	f00b f929 	bl	8019194 <GUI_ALLOC_UnlockH>
 800df42:	e7ba      	b.n	800deba <EDIT_SetMaxLen+0x32>
 800df44:	f00b f914 	bl	8019170 <GUI_ALLOC_LockH>
 800df48:	f10d 0b10 	add.w	fp, sp, #16
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <EDIT_SetMaxLen+0xec>)
 800df4e:	f84b 0d04 	str.w	r0, [fp, #-4]!
 800df52:	4649      	mov	r1, r9
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4642      	mov	r2, r8
 800df58:	4798      	blx	r3
 800df5a:	4658      	mov	r0, fp
 800df5c:	f00b f91a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800df60:	e7c8      	b.n	800def4 <EDIT_SetMaxLen+0x6c>
 800df62:	9801      	ldr	r0, [sp, #4]
 800df64:	4629      	mov	r1, r5
 800df66:	f008 facf 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 800df6a:	9b01      	ldr	r3, [sp, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	541a      	strb	r2, [r3, r0]
 800df70:	e7e4      	b.n	800df3c <EDIT_SetMaxLen+0xb4>
 800df72:	bf00      	nop
 800df74:	20000240 	.word	0x20000240

0800df78 <EDIT_SetCursorAtChar>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	4604      	mov	r4, r0
 800df7c:	b082      	sub	sp, #8
 800df7e:	460d      	mov	r5, r1
 800df80:	f008 fd76 	bl	8016a70 <GUI_Lock>
 800df84:	b91c      	cbnz	r4, 800df8e <EDIT_SetCursorAtChar+0x16>
 800df86:	f008 fd69 	bl	8016a5c <GUI_Unlock>
 800df8a:	b002      	add	sp, #8
 800df8c:	bd70      	pop	{r4, r5, r6, pc}
 800df8e:	4620      	mov	r0, r4
 800df90:	f00b f8ee 	bl	8019170 <GUI_ALLOC_LockH>
 800df94:	9000      	str	r0, [sp, #0]
 800df96:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800df98:	b1f8      	cbz	r0, 800dfda <EDIT_SetCursorAtChar+0x62>
 800df9a:	f00b f8e9 	bl	8019170 <GUI_ALLOC_LockH>
 800df9e:	9001      	str	r0, [sp, #4]
 800dfa0:	f008 fae0 	bl	8016564 <GUI__GetNumChars>
 800dfa4:	9b00      	ldr	r3, [sp, #0]
 800dfa6:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 800dfaa:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800dfae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfb0:	2900      	cmp	r1, #0
 800dfb2:	bf0c      	ite	eq
 800dfb4:	4631      	moveq	r1, r6
 800dfb6:	1e71      	subne	r1, r6, #1
 800dfb8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800dfbc:	428d      	cmp	r5, r1
 800dfbe:	bfa8      	it	ge
 800dfc0:	460d      	movge	r5, r1
 800dfc2:	4285      	cmp	r5, r0
 800dfc4:	bfb8      	it	lt
 800dfc6:	4628      	movlt	r0, r5
 800dfc8:	4282      	cmp	r2, r0
 800dfca:	f04f 0200 	mov.w	r2, #0
 800dfce:	bf18      	it	ne
 800dfd0:	64d8      	strne	r0, [r3, #76]	; 0x4c
 800dfd2:	651a      	str	r2, [r3, #80]	; 0x50
 800dfd4:	a801      	add	r0, sp, #4
 800dfd6:	f00b f8dd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dfda:	4668      	mov	r0, sp
 800dfdc:	f00b f8da 	bl	8019194 <GUI_ALLOC_UnlockH>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f003 fd4f 	bl	8011a84 <WM_InvalidateWindow>
 800dfe6:	f008 fd39 	bl	8016a5c <GUI_Unlock>
 800dfea:	b002      	add	sp, #8
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
 800dfee:	bf00      	nop

0800dff0 <GUI_CreateDialogBox>:
 800dff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	4699      	mov	r9, r3
 800dff8:	4604      	mov	r4, r0
 800dffa:	460d      	mov	r5, r1
 800dffc:	4616      	mov	r6, r2
 800dffe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e000:	2b00      	cmp	r3, #0
 800e002:	d037      	beq.n	800e074 <GUI_CreateDialogBox+0x84>
 800e004:	9600      	str	r6, [sp, #0]
 800e006:	463a      	mov	r2, r7
 800e008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e00a:	6826      	ldr	r6, [r4, #0]
 800e00c:	4620      	mov	r0, r4
 800e00e:	4649      	mov	r1, r9
 800e010:	47b0      	blx	r6
 800e012:	4682      	mov	sl, r0
 800e014:	b918      	cbnz	r0, 800e01e <GUI_CreateDialogBox+0x2e>
 800e016:	4650      	mov	r0, sl
 800e018:	b002      	add	sp, #8
 800e01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01e:	f001 fa5d 	bl	800f4dc <WM_GetClientWindow>
 800e022:	8a61      	ldrh	r1, [r4, #18]
 800e024:	4607      	mov	r7, r0
 800e026:	4650      	mov	r0, sl
 800e028:	f7fb fa08 	bl	800943c <WIDGET_OrState>
 800e02c:	4650      	mov	r0, sl
 800e02e:	f002 f893 	bl	8010158 <WM_ShowWindow>
 800e032:	3d01      	subs	r5, #1
 800e034:	4638      	mov	r0, r7
 800e036:	f002 f88f 	bl	8010158 <WM_ShowWindow>
 800e03a:	2d00      	cmp	r5, #0
 800e03c:	bfc8      	it	gt
 800e03e:	f04f 0800 	movgt.w	r8, #0
 800e042:	dc04      	bgt.n	800e04e <GUI_CreateDialogBox+0x5e>
 800e044:	e01a      	b.n	800e07c <GUI_CreateDialogBox+0x8c>
 800e046:	f002 f887 	bl	8010158 <WM_ShowWindow>
 800e04a:	3d01      	subs	r5, #1
 800e04c:	d016      	beq.n	800e07c <GUI_CreateDialogBox+0x8c>
 800e04e:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 800e052:	f8cd 8000 	str.w	r8, [sp]
 800e056:	2200      	movs	r2, #0
 800e058:	4620      	mov	r0, r4
 800e05a:	4613      	mov	r3, r2
 800e05c:	4639      	mov	r1, r7
 800e05e:	47b0      	blx	r6
 800e060:	4606      	mov	r6, r0
 800e062:	2800      	cmp	r0, #0
 800e064:	d1ef      	bne.n	800e046 <GUI_CreateDialogBox+0x56>
 800e066:	4650      	mov	r0, sl
 800e068:	f003 fe60 	bl	8011d2c <WM_DeleteWindow>
 800e06c:	4630      	mov	r0, r6
 800e06e:	b002      	add	sp, #8
 800e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e074:	f001 fa42 	bl	800f4fc <WM_GetDesktopWindow>
 800e078:	4681      	mov	r9, r0
 800e07a:	e7c3      	b.n	800e004 <GUI_CreateDialogBox+0x14>
 800e07c:	4638      	mov	r0, r7
 800e07e:	211d      	movs	r1, #29
 800e080:	f001 fe56 	bl	800fd30 <WM_SendMessageNoPara>
 800e084:	f1b9 3fff 	cmp.w	r9, #4294967295
 800e088:	d0c5      	beq.n	800e016 <GUI_CreateDialogBox+0x26>
 800e08a:	f008 fcf1 	bl	8016a70 <GUI_Lock>
 800e08e:	f001 fb11 	bl	800f6b4 <WM_GetFocusedWindow>
 800e092:	b960      	cbnz	r0, 800e0ae <GUI_CreateDialogBox+0xbe>
 800e094:	45d1      	cmp	r9, sl
 800e096:	d002      	beq.n	800e09e <GUI_CreateDialogBox+0xae>
 800e098:	4650      	mov	r0, sl
 800e09a:	f000 fdad 	bl	800ebf8 <WM_SetFocusOnNextChild>
 800e09e:	f008 fcdd 	bl	8016a5c <GUI_Unlock>
 800e0a2:	4650      	mov	r0, sl
 800e0a4:	b002      	add	sp, #8
 800e0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0f4      	beq.n	800e098 <GUI_CreateDialogBox+0xa8>
 800e0ae:	f00b f855 	bl	801915c <GUI_ALLOC_h2p>
 800e0b2:	6980      	ldr	r0, [r0, #24]
 800e0b4:	4550      	cmp	r0, sl
 800e0b6:	d1f8      	bne.n	800e0aa <GUI_CreateDialogBox+0xba>
 800e0b8:	e7f1      	b.n	800e09e <GUI_CreateDialogBox+0xae>
 800e0ba:	bf00      	nop

0800e0bc <BUTTON_Callback>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	6845      	ldr	r5, [r0, #4]
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4601      	mov	r1, r0
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7fb fa24 	bl	8009514 <WIDGET_HandleActive>
 800e0cc:	b168      	cbz	r0, 800e0ea <BUTTON_Callback+0x2e>
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	2b0f      	cmp	r3, #15
 800e0d2:	d059      	beq.n	800e188 <BUTTON_Callback+0xcc>
 800e0d4:	dd0b      	ble.n	800e0ee <BUTTON_Callback+0x32>
 800e0d6:	2b28      	cmp	r3, #40	; 0x28
 800e0d8:	d045      	beq.n	800e166 <BUTTON_Callback+0xaa>
 800e0da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e0de:	d03c      	beq.n	800e15a <BUTTON_Callback+0x9e>
 800e0e0:	2b11      	cmp	r3, #17
 800e0e2:	d049      	beq.n	800e178 <BUTTON_Callback+0xbc>
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f004 fa33 	bl	8012550 <WM_DefaultProc>
 800e0ea:	b002      	add	sp, #8
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	2b0b      	cmp	r3, #11
 800e0f0:	d020      	beq.n	800e134 <BUTTON_Callback+0x78>
 800e0f2:	2b0e      	cmp	r3, #14
 800e0f4:	d1f6      	bne.n	800e0e4 <BUTTON_Callback+0x28>
 800e0f6:	68e3      	ldr	r3, [r4, #12]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	6859      	ldr	r1, [r3, #4]
 800e0fc:	2a0d      	cmp	r2, #13
 800e0fe:	d053      	beq.n	800e1a8 <BUTTON_Callback+0xec>
 800e100:	2a20      	cmp	r2, #32
 800e102:	d131      	bne.n	800e168 <BUTTON_Callback+0xac>
 800e104:	2900      	cmp	r1, #0
 800e106:	4628      	mov	r0, r5
 800e108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e10c:	dd7d      	ble.n	800e20a <BUTTON_Callback+0x14e>
 800e10e:	f7fb f995 	bl	800943c <WIDGET_OrState>
 800e112:	4628      	mov	r0, r5
 800e114:	f00b f82c 	bl	8019170 <GUI_ALLOC_LockH>
 800e118:	ab02      	add	r3, sp, #8
 800e11a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e11c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e120:	4618      	mov	r0, r3
 800e122:	f00b f837 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e126:	07a2      	lsls	r2, r4, #30
 800e128:	d5df      	bpl.n	800e0ea <BUTTON_Callback+0x2e>
 800e12a:	4628      	mov	r0, r5
 800e12c:	2101      	movs	r1, #1
 800e12e:	f001 fdad 	bl	800fc8c <WM_NotifyParent>
 800e132:	e7da      	b.n	800e0ea <BUTTON_Callback+0x2e>
 800e134:	4628      	mov	r0, r5
 800e136:	f00b f81b 	bl	8019170 <GUI_ALLOC_LockH>
 800e13a:	ad02      	add	r5, sp, #8
 800e13c:	4603      	mov	r3, r0
 800e13e:	3068      	adds	r0, #104	; 0x68
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	f00b f947 	bl	80193d4 <GUI_ALLOC_FreePtr>
 800e146:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 800e14a:	2103      	movs	r1, #3
 800e14c:	306c      	adds	r0, #108	; 0x6c
 800e14e:	f00b f967 	bl	8019420 <GUI_ALLOC_FreePtrArray>
 800e152:	4628      	mov	r0, r5
 800e154:	f00b f81e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e158:	e7c4      	b.n	800e0e4 <BUTTON_Callback+0x28>
 800e15a:	4b32      	ldr	r3, [pc, #200]	; (800e224 <BUTTON_Callback+0x168>)
 800e15c:	4628      	mov	r0, r5
 800e15e:	4621      	mov	r1, r4
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4798      	blx	r3
 800e164:	e7c1      	b.n	800e0ea <BUTTON_Callback+0x2e>
 800e166:	68e3      	ldr	r3, [r4, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1bb      	bne.n	800e0e4 <BUTTON_Callback+0x28>
 800e16c:	4628      	mov	r0, r5
 800e16e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e172:	f7fb f981 	bl	8009478 <WIDGET_AndState>
 800e176:	e7b5      	b.n	800e0e4 <BUTTON_Callback+0x28>
 800e178:	4b2b      	ldr	r3, [pc, #172]	; (800e228 <BUTTON_Callback+0x16c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0b4      	beq.n	800e0ea <BUTTON_Callback+0x2e>
 800e180:	4628      	mov	r0, r5
 800e182:	4621      	mov	r1, r4
 800e184:	4798      	blx	r3
 800e186:	e7b0      	b.n	800e0ea <BUTTON_Callback+0x2e>
 800e188:	4628      	mov	r0, r5
 800e18a:	f00a fff1 	bl	8019170 <GUI_ALLOC_LockH>
 800e18e:	ab02      	add	r3, sp, #8
 800e190:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e194:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800e196:	6814      	ldr	r4, [r2, #0]
 800e198:	4618      	mov	r0, r3
 800e19a:	f00a fffb 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e19e:	2c00      	cmp	r4, #0
 800e1a0:	d0a3      	beq.n	800e0ea <BUTTON_Callback+0x2e>
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	47a0      	blx	r4
 800e1a6:	e7a0      	b.n	800e0ea <BUTTON_Callback+0x2e>
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	dddd      	ble.n	800e168 <BUTTON_Callback+0xac>
 800e1ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f7fb f943 	bl	800943c <WIDGET_OrState>
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f00a ffda 	bl	8019170 <GUI_ALLOC_LockH>
 800e1bc:	ac02      	add	r4, sp, #8
 800e1be:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800e1c0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f00a ffe5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e1ca:	07b1      	lsls	r1, r6, #30
 800e1cc:	d503      	bpl.n	800e1d6 <BUTTON_Callback+0x11a>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	f001 fd5b 	bl	800fc8c <WM_NotifyParent>
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1dc:	f7fb f94c 	bl	8009478 <WIDGET_AndState>
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f00a ffc5 	bl	8019170 <GUI_ALLOC_LockH>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800e1ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	f00a ffd0 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	f008 fd7b 	bl	8016cf0 <GUI_StoreKey>
 800e1fa:	07a3      	lsls	r3, r4, #30
 800e1fc:	f57f af75 	bpl.w	800e0ea <BUTTON_Callback+0x2e>
 800e200:	4628      	mov	r0, r5
 800e202:	2102      	movs	r1, #2
 800e204:	f001 fd42 	bl	800fc8c <WM_NotifyParent>
 800e208:	e76f      	b.n	800e0ea <BUTTON_Callback+0x2e>
 800e20a:	f7fb f935 	bl	8009478 <WIDGET_AndState>
 800e20e:	4628      	mov	r0, r5
 800e210:	f00a ffae 	bl	8019170 <GUI_ALLOC_LockH>
 800e214:	ab02      	add	r3, sp, #8
 800e216:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e218:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e21c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800e21e:	4618      	mov	r0, r3
 800e220:	e7e6      	b.n	800e1f0 <BUTTON_Callback+0x134>
 800e222:	bf00      	nop
 800e224:	20000204 	.word	0x20000204
 800e228:	2002ae98 	.word	0x2002ae98

0800e22c <_OnTouchDefault>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	460c      	mov	r4, r1
 800e232:	4606      	mov	r6, r0
 800e234:	f00a ff9c 	bl	8019170 <GUI_ALLOC_LockH>
 800e238:	ab02      	add	r3, sp, #8
 800e23a:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 800e23c:	f843 0d08 	str.w	r0, [r3, #-8]!
 800e240:	4668      	mov	r0, sp
 800e242:	f00a ffa7 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e246:	68e3      	ldr	r3, [r4, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d037      	beq.n	800e2bc <_OnTouchDefault+0x90>
 800e24c:	7a1b      	ldrb	r3, [r3, #8]
 800e24e:	b91b      	cbnz	r3, 800e258 <_OnTouchDefault+0x2c>
 800e250:	05e9      	lsls	r1, r5, #23
 800e252:	d419      	bmi.n	800e288 <_OnTouchDefault+0x5c>
 800e254:	b002      	add	sp, #8
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	05ec      	lsls	r4, r5, #23
 800e25a:	d4fb      	bmi.n	800e254 <_OnTouchDefault+0x28>
 800e25c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e260:	4630      	mov	r0, r6
 800e262:	f7fb f8eb 	bl	800943c <WIDGET_OrState>
 800e266:	4630      	mov	r0, r6
 800e268:	f00a ff82 	bl	8019170 <GUI_ALLOC_LockH>
 800e26c:	ab02      	add	r3, sp, #8
 800e26e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e270:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e274:	4618      	mov	r0, r3
 800e276:	f00a ff8d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e27a:	07a0      	lsls	r0, r4, #30
 800e27c:	d5ea      	bpl.n	800e254 <_OnTouchDefault+0x28>
 800e27e:	4630      	mov	r0, r6
 800e280:	2101      	movs	r1, #1
 800e282:	f001 fd03 	bl	800fc8c <WM_NotifyParent>
 800e286:	e7e5      	b.n	800e254 <_OnTouchDefault+0x28>
 800e288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e28c:	4630      	mov	r0, r6
 800e28e:	f7fb f8f3 	bl	8009478 <WIDGET_AndState>
 800e292:	4630      	mov	r0, r6
 800e294:	f00a ff6c 	bl	8019170 <GUI_ALLOC_LockH>
 800e298:	ab02      	add	r3, sp, #8
 800e29a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e29c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e2a0:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f00a ff76 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	f008 fd21 	bl	8016cf0 <GUI_StoreKey>
 800e2ae:	07a2      	lsls	r2, r4, #30
 800e2b0:	d5d0      	bpl.n	800e254 <_OnTouchDefault+0x28>
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	2102      	movs	r1, #2
 800e2b6:	f001 fce9 	bl	800fc8c <WM_NotifyParent>
 800e2ba:	e7cb      	b.n	800e254 <_OnTouchDefault+0x28>
 800e2bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7fb f8d9 	bl	8009478 <WIDGET_AndState>
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f00a ff52 	bl	8019170 <GUI_ALLOC_LockH>
 800e2cc:	ab02      	add	r3, sp, #8
 800e2ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e2d0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f00a ff5d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e2da:	07a3      	lsls	r3, r4, #30
 800e2dc:	d5ba      	bpl.n	800e254 <_OnTouchDefault+0x28>
 800e2de:	4630      	mov	r0, r6
 800e2e0:	2103      	movs	r1, #3
 800e2e2:	f001 fcd3 	bl	800fc8c <WM_NotifyParent>
 800e2e6:	e7b5      	b.n	800e254 <_OnTouchDefault+0x28>

0800e2e8 <BUTTON_CreateIndirect>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	6987      	ldr	r7, [r0, #24]
 800e2ee:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 800e2f2:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 800e2f6:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800e2fa:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800e2fe:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 800e302:	b087      	sub	sp, #28
 800e304:	4688      	mov	r8, r1
 800e306:	4493      	add	fp, r2
 800e308:	449a      	add	sl, r3
 800e30a:	4604      	mov	r4, r0
 800e30c:	f008 fbb0 	bl	8016a70 <GUI_Lock>
 800e310:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e314:	f04f 0e00 	mov.w	lr, #0
 800e318:	4f31      	ldr	r7, [pc, #196]	; (800e3e0 <BUTTON_CreateIndirect+0xf8>)
 800e31a:	9303      	str	r3, [sp, #12]
 800e31c:	9702      	str	r7, [sp, #8]
 800e31e:	f8cd 8000 	str.w	r8, [sp]
 800e322:	4658      	mov	r0, fp
 800e324:	4651      	mov	r1, sl
 800e326:	4632      	mov	r2, r6
 800e328:	462b      	mov	r3, r5
 800e32a:	f8cd e004 	str.w	lr, [sp, #4]
 800e32e:	f003 fc05 	bl	8011b3c <WM_CreateWindowAsChild>
 800e332:	4607      	mov	r7, r0
 800e334:	b928      	cbnz	r0, 800e342 <BUTTON_CreateIndirect+0x5a>
 800e336:	f008 fb91 	bl	8016a5c <GUI_Unlock>
 800e33a:	4638      	mov	r0, r7
 800e33c:	b007      	add	sp, #28
 800e33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e342:	f00a ff15 	bl	8019170 <GUI_ALLOC_LockH>
 800e346:	4e27      	ldr	r6, [pc, #156]	; (800e3e4 <BUTTON_CreateIndirect+0xfc>)
 800e348:	9005      	str	r0, [sp, #20]
 800e34a:	fa0f f189 	sxth.w	r1, r9
 800e34e:	2210      	movs	r2, #16
 800e350:	f7fa ffe6 	bl	8009320 <WIDGET__Init>
 800e354:	f10d 0818 	add.w	r8, sp, #24
 800e358:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e35a:	f858 ed04 	ldr.w	lr, [r8, #-4]!
 800e35e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800e3e8 <BUTTON_CreateIndirect+0x100>
 800e362:	f10e 0534 	add.w	r5, lr, #52	; 0x34
 800e366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e36a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e36c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800e370:	f8d9 6000 	ldr.w	r6, [r9]
 800e374:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800e378:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 800e37c:	4640      	mov	r0, r8
 800e37e:	f00a ff09 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e382:	f8d9 3000 	ldr.w	r3, [r9]
 800e386:	4638      	mov	r0, r7
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4798      	blx	r3
 800e38c:	f008 fb66 	bl	8016a5c <GUI_Unlock>
 800e390:	6865      	ldr	r5, [r4, #4]
 800e392:	f008 fb6d 	bl	8016a70 <GUI_Lock>
 800e396:	4638      	mov	r0, r7
 800e398:	f00a feea 	bl	8019170 <GUI_ALLOC_LockH>
 800e39c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800e39e:	9004      	str	r0, [sp, #16]
 800e3a0:	a804      	add	r0, sp, #16
 800e3a2:	9405      	str	r4, [sp, #20]
 800e3a4:	f00a fef6 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	f007 fc28 	bl	8015c00 <GUI__SetText>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d0c0      	beq.n	800e336 <BUTTON_CreateIndirect+0x4e>
 800e3b4:	9b05      	ldr	r3, [sp, #20]
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	d009      	beq.n	800e3ce <BUTTON_CreateIndirect+0xe6>
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	f00a fed8 	bl	8019170 <GUI_ALLOC_LockH>
 800e3c0:	9a05      	ldr	r2, [sp, #20]
 800e3c2:	6682      	str	r2, [r0, #104]	; 0x68
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	a804      	add	r0, sp, #16
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	f00a fee3 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	f003 fb58 	bl	8011a84 <WM_InvalidateWindow>
 800e3d4:	f008 fb42 	bl	8016a5c <GUI_Unlock>
 800e3d8:	4638      	mov	r0, r7
 800e3da:	b007      	add	sp, #28
 800e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e0:	0800e0bd 	.word	0x0800e0bd
 800e3e4:	20000208 	.word	0x20000208
 800e3e8:	20000238 	.word	0x20000238

0800e3ec <BUTTON_SetText>:
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	b082      	sub	sp, #8
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	b918      	cbnz	r0, 800e3fe <BUTTON_SetText+0x12>
 800e3f6:	2501      	movs	r5, #1
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	b002      	add	sp, #8
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	f008 fb37 	bl	8016a70 <GUI_Lock>
 800e402:	4620      	mov	r0, r4
 800e404:	f00a feb4 	bl	8019170 <GUI_ALLOC_LockH>
 800e408:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800e40a:	9000      	str	r0, [sp, #0]
 800e40c:	4668      	mov	r0, sp
 800e40e:	9601      	str	r6, [sp, #4]
 800e410:	f00a fec0 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e414:	4629      	mov	r1, r5
 800e416:	a801      	add	r0, sp, #4
 800e418:	f007 fbf2 	bl	8015c00 <GUI__SetText>
 800e41c:	f1d0 0501 	rsbs	r5, r0, #1
 800e420:	bf38      	it	cc
 800e422:	2500      	movcc	r5, #0
 800e424:	b97d      	cbnz	r5, 800e446 <BUTTON_SetText+0x5a>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	42b3      	cmp	r3, r6
 800e42a:	d009      	beq.n	800e440 <BUTTON_SetText+0x54>
 800e42c:	4620      	mov	r0, r4
 800e42e:	f00a fe9f 	bl	8019170 <GUI_ALLOC_LockH>
 800e432:	9a01      	ldr	r2, [sp, #4]
 800e434:	6682      	str	r2, [r0, #104]	; 0x68
 800e436:	4603      	mov	r3, r0
 800e438:	4668      	mov	r0, sp
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	f00a feaa 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e440:	4620      	mov	r0, r4
 800e442:	f003 fb1f 	bl	8011a84 <WM_InvalidateWindow>
 800e446:	f008 fb09 	bl	8016a5c <GUI_Unlock>
 800e44a:	4628      	mov	r0, r5
 800e44c:	b002      	add	sp, #8
 800e44e:	bd70      	pop	{r4, r5, r6, pc}

0800e450 <BUTTON_SetFont>:
 800e450:	b530      	push	{r4, r5, lr}
 800e452:	4604      	mov	r4, r0
 800e454:	b083      	sub	sp, #12
 800e456:	460d      	mov	r5, r1
 800e458:	b180      	cbz	r0, 800e47c <BUTTON_SetFont+0x2c>
 800e45a:	f008 fb09 	bl	8016a70 <GUI_Lock>
 800e45e:	4620      	mov	r0, r4
 800e460:	f00a fe86 	bl	8019170 <GUI_ALLOC_LockH>
 800e464:	ab02      	add	r3, sp, #8
 800e466:	6545      	str	r5, [r0, #84]	; 0x54
 800e468:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e46c:	4618      	mov	r0, r3
 800e46e:	f00a fe91 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e472:	4620      	mov	r0, r4
 800e474:	f003 fb06 	bl	8011a84 <WM_InvalidateWindow>
 800e478:	f008 faf0 	bl	8016a5c <GUI_Unlock>
 800e47c:	b003      	add	sp, #12
 800e47e:	bd30      	pop	{r4, r5, pc}

0800e480 <WM__ForEachDesc>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	b085      	sub	sp, #20
 800e486:	460d      	mov	r5, r1
 800e488:	4614      	mov	r4, r2
 800e48a:	f00a fe67 	bl	801915c <GUI_ALLOC_h2p>
 800e48e:	69c0      	ldr	r0, [r0, #28]
 800e490:	9002      	str	r0, [sp, #8]
 800e492:	2800      	cmp	r0, #0
 800e494:	f000 8099 	beq.w	800e5ca <WM__ForEachDesc+0x14a>
 800e498:	4621      	mov	r1, r4
 800e49a:	47a8      	blx	r5
 800e49c:	9802      	ldr	r0, [sp, #8]
 800e49e:	f00a fe5d 	bl	801915c <GUI_ALLOC_h2p>
 800e4a2:	69c0      	ldr	r0, [r0, #28]
 800e4a4:	9003      	str	r0, [sp, #12]
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f000 8087 	beq.w	800e5ba <WM__ForEachDesc+0x13a>
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	47a8      	blx	r5
 800e4b0:	9803      	ldr	r0, [sp, #12]
 800e4b2:	f00a fe53 	bl	801915c <GUI_ALLOC_h2p>
 800e4b6:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800e4ba:	f1b8 0f00 	cmp.w	r8, #0
 800e4be:	d074      	beq.n	800e5aa <WM__ForEachDesc+0x12a>
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	47a8      	blx	r5
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f00a fe48 	bl	801915c <GUI_ALLOC_h2p>
 800e4cc:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	d061      	beq.n	800e59a <WM__ForEachDesc+0x11a>
 800e4d6:	4648      	mov	r0, r9
 800e4d8:	4621      	mov	r1, r4
 800e4da:	47a8      	blx	r5
 800e4dc:	4648      	mov	r0, r9
 800e4de:	f00a fe3d 	bl	801915c <GUI_ALLOC_h2p>
 800e4e2:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800e4e6:	f1ba 0f00 	cmp.w	sl, #0
 800e4ea:	d04e      	beq.n	800e58a <WM__ForEachDesc+0x10a>
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	47a8      	blx	r5
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	f00a fe32 	bl	801915c <GUI_ALLOC_h2p>
 800e4f8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800e4fc:	f1bb 0f00 	cmp.w	fp, #0
 800e500:	d03b      	beq.n	800e57a <WM__ForEachDesc+0xfa>
 800e502:	4658      	mov	r0, fp
 800e504:	4621      	mov	r1, r4
 800e506:	47a8      	blx	r5
 800e508:	4658      	mov	r0, fp
 800e50a:	f00a fe27 	bl	801915c <GUI_ALLOC_h2p>
 800e50e:	69c0      	ldr	r0, [r0, #28]
 800e510:	9001      	str	r0, [sp, #4]
 800e512:	2800      	cmp	r0, #0
 800e514:	d029      	beq.n	800e56a <WM__ForEachDesc+0xea>
 800e516:	4621      	mov	r1, r4
 800e518:	47a8      	blx	r5
 800e51a:	9801      	ldr	r0, [sp, #4]
 800e51c:	f00a fe1e 	bl	801915c <GUI_ALLOC_h2p>
 800e520:	69c6      	ldr	r6, [r0, #28]
 800e522:	b1de      	cbz	r6, 800e55c <WM__ForEachDesc+0xdc>
 800e524:	4630      	mov	r0, r6
 800e526:	4621      	mov	r1, r4
 800e528:	47a8      	blx	r5
 800e52a:	4630      	mov	r0, r6
 800e52c:	f00a fe16 	bl	801915c <GUI_ALLOC_h2p>
 800e530:	69c7      	ldr	r7, [r0, #28]
 800e532:	b16f      	cbz	r7, 800e550 <WM__ForEachDesc+0xd0>
 800e534:	4638      	mov	r0, r7
 800e536:	4621      	mov	r1, r4
 800e538:	47a8      	blx	r5
 800e53a:	4638      	mov	r0, r7
 800e53c:	4629      	mov	r1, r5
 800e53e:	4622      	mov	r2, r4
 800e540:	f7ff ff9e 	bl	800e480 <WM__ForEachDesc>
 800e544:	4638      	mov	r0, r7
 800e546:	f00a fe09 	bl	801915c <GUI_ALLOC_h2p>
 800e54a:	6a07      	ldr	r7, [r0, #32]
 800e54c:	2f00      	cmp	r7, #0
 800e54e:	d1f1      	bne.n	800e534 <WM__ForEachDesc+0xb4>
 800e550:	4630      	mov	r0, r6
 800e552:	f00a fe03 	bl	801915c <GUI_ALLOC_h2p>
 800e556:	6a06      	ldr	r6, [r0, #32]
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d1e3      	bne.n	800e524 <WM__ForEachDesc+0xa4>
 800e55c:	9801      	ldr	r0, [sp, #4]
 800e55e:	f00a fdfd 	bl	801915c <GUI_ALLOC_h2p>
 800e562:	6a00      	ldr	r0, [r0, #32]
 800e564:	9001      	str	r0, [sp, #4]
 800e566:	2800      	cmp	r0, #0
 800e568:	d1d5      	bne.n	800e516 <WM__ForEachDesc+0x96>
 800e56a:	4658      	mov	r0, fp
 800e56c:	f00a fdf6 	bl	801915c <GUI_ALLOC_h2p>
 800e570:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800e574:	f1bb 0f00 	cmp.w	fp, #0
 800e578:	d1c3      	bne.n	800e502 <WM__ForEachDesc+0x82>
 800e57a:	4650      	mov	r0, sl
 800e57c:	f00a fdee 	bl	801915c <GUI_ALLOC_h2p>
 800e580:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800e584:	f1ba 0f00 	cmp.w	sl, #0
 800e588:	d1b0      	bne.n	800e4ec <WM__ForEachDesc+0x6c>
 800e58a:	4648      	mov	r0, r9
 800e58c:	f00a fde6 	bl	801915c <GUI_ALLOC_h2p>
 800e590:	f8d0 9020 	ldr.w	r9, [r0, #32]
 800e594:	f1b9 0f00 	cmp.w	r9, #0
 800e598:	d19d      	bne.n	800e4d6 <WM__ForEachDesc+0x56>
 800e59a:	4640      	mov	r0, r8
 800e59c:	f00a fdde 	bl	801915c <GUI_ALLOC_h2p>
 800e5a0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800e5a4:	f1b8 0f00 	cmp.w	r8, #0
 800e5a8:	d18a      	bne.n	800e4c0 <WM__ForEachDesc+0x40>
 800e5aa:	9803      	ldr	r0, [sp, #12]
 800e5ac:	f00a fdd6 	bl	801915c <GUI_ALLOC_h2p>
 800e5b0:	6a00      	ldr	r0, [r0, #32]
 800e5b2:	9003      	str	r0, [sp, #12]
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f47f af79 	bne.w	800e4ac <WM__ForEachDesc+0x2c>
 800e5ba:	9802      	ldr	r0, [sp, #8]
 800e5bc:	f00a fdce 	bl	801915c <GUI_ALLOC_h2p>
 800e5c0:	6a00      	ldr	r0, [r0, #32]
 800e5c2:	9002      	str	r0, [sp, #8]
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	f47f af67 	bne.w	800e498 <WM__ForEachDesc+0x18>
 800e5ca:	b005      	add	sp, #20
 800e5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5d0 <WM__GetFocusedChild>:
 800e5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d2:	4d10      	ldr	r5, [pc, #64]	; (800e614 <WM__GetFocusedChild+0x44>)
 800e5d4:	4c10      	ldr	r4, [pc, #64]	; (800e618 <WM__GetFocusedChild+0x48>)
 800e5d6:	682b      	ldr	r3, [r5, #0]
 800e5d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800e5dc:	4607      	mov	r7, r0
 800e5de:	b083      	sub	sp, #12
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	b90b      	cbnz	r3, 800e5e8 <WM__GetFocusedChild+0x18>
 800e5e4:	b003      	add	sp, #12
 800e5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e8:	f00a fdc2 	bl	8019170 <GUI_ALLOC_LockH>
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	9001      	str	r0, [sp, #4]
 800e5f0:	b158      	cbz	r0, 800e60a <WM__GetFocusedChild+0x3a>
 800e5f2:	6986      	ldr	r6, [r0, #24]
 800e5f4:	a801      	add	r0, sp, #4
 800e5f6:	f00a fdcd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e5fa:	42b7      	cmp	r7, r6
 800e5fc:	bf06      	itte	eq
 800e5fe:	682b      	ldreq	r3, [r5, #0]
 800e600:	f854 0023 	ldreq.w	r0, [r4, r3, lsl #2]
 800e604:	2000      	movne	r0, #0
 800e606:	b003      	add	sp, #12
 800e608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60a:	a801      	add	r0, sp, #4
 800e60c:	f00a fdc2 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e610:	4630      	mov	r0, r6
 800e612:	e7e7      	b.n	800e5e4 <WM__GetFocusedChild+0x14>
 800e614:	2002bf94 	.word	0x2002bf94
 800e618:	2002bf84 	.word	0x2002bf84

0800e61c <WM__GetLastSibling>:
 800e61c:	b510      	push	{r4, lr}
 800e61e:	4604      	mov	r4, r0
 800e620:	b908      	cbnz	r0, 800e626 <WM__GetLastSibling+0xa>
 800e622:	e006      	b.n	800e632 <WM__GetLastSibling+0x16>
 800e624:	461c      	mov	r4, r3
 800e626:	4620      	mov	r0, r4
 800e628:	f00a fd98 	bl	801915c <GUI_ALLOC_h2p>
 800e62c:	6a03      	ldr	r3, [r0, #32]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1f8      	bne.n	800e624 <WM__GetLastSibling+0x8>
 800e632:	4620      	mov	r0, r4
 800e634:	bd10      	pop	{r4, pc}
 800e636:	bf00      	nop

0800e638 <WM__GetPrevSibling>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4605      	mov	r5, r0
 800e63c:	f001 f994 	bl	800f968 <WM_GetParent>
 800e640:	b910      	cbnz	r0, 800e648 <WM__GetPrevSibling+0x10>
 800e642:	2400      	movs	r4, #0
 800e644:	4620      	mov	r0, r4
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	f00a fd88 	bl	801915c <GUI_ALLOC_h2p>
 800e64c:	69c4      	ldr	r4, [r0, #28]
 800e64e:	2c00      	cmp	r4, #0
 800e650:	d0f7      	beq.n	800e642 <WM__GetPrevSibling+0xa>
 800e652:	42a5      	cmp	r5, r4
 800e654:	d103      	bne.n	800e65e <WM__GetPrevSibling+0x26>
 800e656:	e7f4      	b.n	800e642 <WM__GetPrevSibling+0xa>
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0f2      	beq.n	800e642 <WM__GetPrevSibling+0xa>
 800e65c:	461c      	mov	r4, r3
 800e65e:	4620      	mov	r0, r4
 800e660:	f00a fd7c 	bl	801915c <GUI_ALLOC_h2p>
 800e664:	6a03      	ldr	r3, [r0, #32]
 800e666:	42ab      	cmp	r3, r5
 800e668:	d1f6      	bne.n	800e658 <WM__GetPrevSibling+0x20>
 800e66a:	4620      	mov	r0, r4
 800e66c:	bd38      	pop	{r3, r4, r5, pc}
 800e66e:	bf00      	nop

0800e670 <WM__IsAncestor>:
 800e670:	b510      	push	{r4, lr}
 800e672:	460c      	mov	r4, r1
 800e674:	b138      	cbz	r0, 800e686 <WM__IsAncestor+0x16>
 800e676:	b131      	cbz	r1, 800e686 <WM__IsAncestor+0x16>
 800e678:	f00a fd70 	bl	801915c <GUI_ALLOC_h2p>
 800e67c:	6980      	ldr	r0, [r0, #24]
 800e67e:	42a0      	cmp	r0, r4
 800e680:	d003      	beq.n	800e68a <WM__IsAncestor+0x1a>
 800e682:	2800      	cmp	r0, #0
 800e684:	d1f8      	bne.n	800e678 <WM__IsAncestor+0x8>
 800e686:	2000      	movs	r0, #0
 800e688:	bd10      	pop	{r4, pc}
 800e68a:	2001      	movs	r0, #1
 800e68c:	bd10      	pop	{r4, pc}
 800e68e:	bf00      	nop

0800e690 <WM__IsAncestorOrSelf>:
 800e690:	4288      	cmp	r0, r1
 800e692:	b510      	push	{r4, lr}
 800e694:	460c      	mov	r4, r1
 800e696:	d00a      	beq.n	800e6ae <WM__IsAncestorOrSelf+0x1e>
 800e698:	b138      	cbz	r0, 800e6aa <WM__IsAncestorOrSelf+0x1a>
 800e69a:	b131      	cbz	r1, 800e6aa <WM__IsAncestorOrSelf+0x1a>
 800e69c:	f00a fd5e 	bl	801915c <GUI_ALLOC_h2p>
 800e6a0:	6980      	ldr	r0, [r0, #24]
 800e6a2:	4284      	cmp	r4, r0
 800e6a4:	d003      	beq.n	800e6ae <WM__IsAncestorOrSelf+0x1e>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d1f8      	bne.n	800e69c <WM__IsAncestorOrSelf+0xc>
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	bd10      	pop	{r4, pc}
 800e6ae:	2001      	movs	r0, #1
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	bf00      	nop

0800e6b4 <WM__IsEnabled>:
 800e6b4:	b508      	push	{r3, lr}
 800e6b6:	f00a fd51 	bl	801915c <GUI_ALLOC_h2p>
 800e6ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e6bc:	f080 0010 	eor.w	r0, r0, #16
 800e6c0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800e6c4:	bd08      	pop	{r3, pc}
 800e6c6:	bf00      	nop

0800e6c8 <WM__Screen2Client>:
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	4608      	mov	r0, r1
 800e6cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e6d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e6d4:	4252      	negs	r2, r2
 800e6d6:	4249      	negs	r1, r1
 800e6d8:	f009 bbd0 	b.w	8017e7c <GUI_MoveRect>

0800e6dc <WM__SendMessage>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	4c0d      	ldr	r4, [pc, #52]	; (800e714 <WM__SendMessage+0x38>)
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	2b13      	cmp	r3, #19
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	dd00      	ble.n	800e6ec <WM__SendMessage+0x10>
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	f00a fd36 	bl	801915c <GUI_ALLOC_h2p>
 800e6f0:	6903      	ldr	r3, [r0, #16]
 800e6f2:	606e      	str	r6, [r5, #4]
 800e6f4:	b143      	cbz	r3, 800e708 <WM__SendMessage+0x2c>
 800e6f6:	6822      	ldr	r2, [r4, #0]
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	3201      	adds	r2, #1
 800e6fc:	6022      	str	r2, [r4, #0]
 800e6fe:	4798      	blx	r3
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	3b01      	subs	r3, #1
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	4628      	mov	r0, r5
 800e70a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e70e:	f003 bf1f 	b.w	8012550 <WM_DefaultProc>
 800e712:	bf00      	nop
 800e714:	2002ae9c 	.word	0x2002ae9c

0800e718 <WM__SendMessageNoPara>:
 800e718:	b530      	push	{r4, r5, lr}
 800e71a:	b085      	sub	sp, #20
 800e71c:	2300      	movs	r3, #0
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	9302      	str	r3, [sp, #8]
 800e724:	9303      	str	r3, [sp, #12]
 800e726:	460d      	mov	r5, r1
 800e728:	4604      	mov	r4, r0
 800e72a:	f00a fd17 	bl	801915c <GUI_ALLOC_h2p>
 800e72e:	6903      	ldr	r3, [r0, #16]
 800e730:	b12b      	cbz	r3, 800e73e <WM__SendMessageNoPara+0x26>
 800e732:	a804      	add	r0, sp, #16
 800e734:	9401      	str	r4, [sp, #4]
 800e736:	f840 5d10 	str.w	r5, [r0, #-16]!
 800e73a:	4668      	mov	r0, sp
 800e73c:	4798      	blx	r3
 800e73e:	b005      	add	sp, #20
 800e740:	bd30      	pop	{r4, r5, pc}
 800e742:	bf00      	nop

0800e744 <WM__UpdateChildPositions>:
 800e744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e748:	69c4      	ldr	r4, [r0, #28]
 800e74a:	b08b      	sub	sp, #44	; 0x2c
 800e74c:	9106      	str	r1, [sp, #24]
 800e74e:	9202      	str	r2, [sp, #8]
 800e750:	9307      	str	r3, [sp, #28]
 800e752:	2c00      	cmp	r4, #0
 800e754:	f000 808b 	beq.w	800e86e <WM__UpdateChildPositions+0x12a>
 800e758:	b29b      	uxth	r3, r3
 800e75a:	9303      	str	r3, [sp, #12]
 800e75c:	b28b      	uxth	r3, r1
 800e75e:	9304      	str	r3, [sp, #16]
 800e760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e762:	b29b      	uxth	r3, r3
 800e764:	9305      	str	r3, [sp, #20]
 800e766:	e046      	b.n	800e7f6 <WM__UpdateChildPositions+0xb2>
 800e768:	9e06      	ldr	r6, [sp, #24]
 800e76a:	9b07      	ldr	r3, [sp, #28]
 800e76c:	442e      	add	r6, r5
 800e76e:	443b      	add	r3, r7
 800e770:	b2b6      	uxth	r6, r6
 800e772:	fa1f fb83 	uxth.w	fp, r3
 800e776:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800e77a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e77e:	d058      	beq.n	800e832 <WM__UpdateChildPositions+0xee>
 800e780:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800e784:	d160      	bne.n	800e848 <WM__UpdateChildPositions+0x104>
 800e786:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e78a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800e78e:	44ca      	add	sl, r9
 800e790:	44c4      	add	ip, r8
 800e792:	fa1f fa8a 	uxth.w	sl, sl
 800e796:	fa1f fc8c 	uxth.w	ip, ip
 800e79a:	b236      	sxth	r6, r6
 800e79c:	b22d      	sxth	r5, r5
 800e79e:	fa0f fa8a 	sxth.w	sl, sl
 800e7a2:	fa0f f989 	sxth.w	r9, r9
 800e7a6:	1b71      	subs	r1, r6, r5
 800e7a8:	ebc9 020a 	rsb	r2, r9, sl
 800e7ac:	d100      	bne.n	800e7b0 <WM__UpdateChildPositions+0x6c>
 800e7ae:	b132      	cbz	r2, 800e7be <WM__UpdateChildPositions+0x7a>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f8cd c004 	str.w	ip, [sp, #4]
 800e7b6:	f000 fc0f 	bl	800efd8 <WM_MoveWindow>
 800e7ba:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e7be:	fa0f f38b 	sxth.w	r3, fp
 800e7c2:	b23f      	sxth	r7, r7
 800e7c4:	fa0f fc8c 	sxth.w	ip, ip
 800e7c8:	fa0f f888 	sxth.w	r8, r8
 800e7cc:	1b9e      	subs	r6, r3, r6
 800e7ce:	1bed      	subs	r5, r5, r7
 800e7d0:	ebca 0a0c 	rsb	sl, sl, ip
 800e7d4:	ebc8 0909 	rsb	r9, r8, r9
 800e7d8:	1971      	adds	r1, r6, r5
 800e7da:	eb0a 0209 	add.w	r2, sl, r9
 800e7de:	d100      	bne.n	800e7e2 <WM__UpdateChildPositions+0x9e>
 800e7e0:	b112      	cbz	r2, 800e7e8 <WM__UpdateChildPositions+0xa4>
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f001 fa98 	bl	800fd18 <WM_ResizeWindow>
 800e7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ea:	6a1c      	ldr	r4, [r3, #32]
 800e7ec:	a809      	add	r0, sp, #36	; 0x24
 800e7ee:	f00a fcd1 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e7f2:	2c00      	cmp	r4, #0
 800e7f4:	d03b      	beq.n	800e86e <WM__UpdateChildPositions+0x12a>
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f00a fcba 	bl	8019170 <GUI_ALLOC_LockH>
 800e7fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e7fe:	9009      	str	r0, [sp, #36]	; 0x24
 800e800:	f402 7320 	and.w	r3, r2, #640	; 0x280
 800e804:	2b80      	cmp	r3, #128	; 0x80
 800e806:	8805      	ldrh	r5, [r0, #0]
 800e808:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800e80c:	8887      	ldrh	r7, [r0, #4]
 800e80e:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 800e812:	d024      	beq.n	800e85e <WM__UpdateChildPositions+0x11a>
 800e814:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e818:	d0a6      	beq.n	800e768 <WM__UpdateChildPositions+0x24>
 800e81a:	9e04      	ldr	r6, [sp, #16]
 800e81c:	9b04      	ldr	r3, [sp, #16]
 800e81e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800e822:	442e      	add	r6, r5
 800e824:	443b      	add	r3, r7
 800e826:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e82a:	b2b6      	uxth	r6, r6
 800e82c:	fa1f fb83 	uxth.w	fp, r3
 800e830:	d1a6      	bne.n	800e780 <WM__UpdateChildPositions+0x3c>
 800e832:	f8dd a014 	ldr.w	sl, [sp, #20]
 800e836:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e83a:	44ca      	add	sl, r9
 800e83c:	44c4      	add	ip, r8
 800e83e:	fa1f fa8a 	uxth.w	sl, sl
 800e842:	fa1f fc8c 	uxth.w	ip, ip
 800e846:	e7a8      	b.n	800e79a <WM__UpdateChildPositions+0x56>
 800e848:	9802      	ldr	r0, [sp, #8]
 800e84a:	fa1f fc80 	uxth.w	ip, r0
 800e84e:	eb0c 0a09 	add.w	sl, ip, r9
 800e852:	44c4      	add	ip, r8
 800e854:	fa1f fa8a 	uxth.w	sl, sl
 800e858:	fa1f fc8c 	uxth.w	ip, ip
 800e85c:	e79d      	b.n	800e79a <WM__UpdateChildPositions+0x56>
 800e85e:	9e03      	ldr	r6, [sp, #12]
 800e860:	9b03      	ldr	r3, [sp, #12]
 800e862:	442e      	add	r6, r5
 800e864:	443b      	add	r3, r7
 800e866:	b2b6      	uxth	r6, r6
 800e868:	fa1f fb83 	uxth.w	fp, r3
 800e86c:	e783      	b.n	800e776 <WM__UpdateChildPositions+0x32>
 800e86e:	b00b      	add	sp, #44	; 0x2c
 800e870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e874 <WM__AddCriticalHandle>:
 800e874:	4b02      	ldr	r3, [pc, #8]	; (800e880 <WM__AddCriticalHandle+0xc>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	6002      	str	r2, [r0, #0]
 800e87a:	6018      	str	r0, [r3, #0]
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	2002bfb0 	.word	0x2002bfb0

0800e884 <WM__GetClientRectEx>:
 800e884:	b530      	push	{r4, r5, lr}
 800e886:	460c      	mov	r4, r1
 800e888:	b083      	sub	sp, #12
 800e88a:	b158      	cbz	r0, 800e8a4 <WM__GetClientRectEx+0x20>
 800e88c:	b151      	cbz	r1, 800e8a4 <WM__GetClientRectEx+0x20>
 800e88e:	f00a fc6f 	bl	8019170 <GUI_ALLOC_LockH>
 800e892:	ad02      	add	r5, sp, #8
 800e894:	4621      	mov	r1, r4
 800e896:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e89a:	f003 f81d 	bl	80118d8 <WM__GetClientRectWin>
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f00a fc78 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e8a4:	b003      	add	sp, #12
 800e8a6:	bd30      	pop	{r4, r5, pc}

0800e8a8 <_cbTimer>:
 800e8a8:	b510      	push	{r4, lr}
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	6840      	ldr	r0, [r0, #4]
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	9302      	str	r3, [sp, #8]
 800e8b8:	9303      	str	r3, [sp, #12]
 800e8ba:	b150      	cbz	r0, 800e8d2 <_cbTimer+0x2a>
 800e8bc:	f00a fc4e 	bl	801915c <GUI_ALLOC_h2p>
 800e8c0:	6863      	ldr	r3, [r4, #4]
 800e8c2:	6840      	ldr	r0, [r0, #4]
 800e8c4:	9303      	str	r3, [sp, #12]
 800e8c6:	4669      	mov	r1, sp
 800e8c8:	f240 1313 	movw	r3, #275	; 0x113
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	f002 ffe7 	bl	80118a0 <WM_SendMessage>
 800e8d2:	b004      	add	sp, #16
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	bf00      	nop

0800e8d8 <WM__DeleteAssocTimer>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	4605      	mov	r5, r0
 800e8de:	f008 f8c7 	bl	8016a70 <GUI_Lock>
 800e8e2:	4668      	mov	r0, sp
 800e8e4:	f007 ff02 	bl	80166ec <GUI_TIMER__GetFirstTimer>
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	b174      	cbz	r4, 800e90a <WM__DeleteAssocTimer+0x32>
 800e8ec:	2101      	movs	r1, #1
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f008 f848 	bl	8016984 <GUI_TIMER_GetFlag>
 800e8f4:	9b00      	ldr	r3, [sp, #0]
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	4669      	mov	r1, sp
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	b103      	cbz	r3, 800e900 <WM__DeleteAssocTimer+0x28>
 800e8fe:	b942      	cbnz	r2, 800e912 <WM__DeleteAssocTimer+0x3a>
 800e900:	f007 ff0c 	bl	801671c <GUI_TIMER__GetNextTimerLin>
 800e904:	4604      	mov	r4, r0
 800e906:	2c00      	cmp	r4, #0
 800e908:	d1f0      	bne.n	800e8ec <WM__DeleteAssocTimer+0x14>
 800e90a:	f008 f8a7 	bl	8016a5c <GUI_Unlock>
 800e90e:	b002      	add	sp, #8
 800e910:	bd70      	pop	{r4, r5, r6, pc}
 800e912:	4618      	mov	r0, r3
 800e914:	f00a fc22 	bl	801915c <GUI_ALLOC_h2p>
 800e918:	6843      	ldr	r3, [r0, #4]
 800e91a:	42ab      	cmp	r3, r5
 800e91c:	d005      	beq.n	800e92a <WM__DeleteAssocTimer+0x52>
 800e91e:	4620      	mov	r0, r4
 800e920:	4669      	mov	r1, sp
 800e922:	f007 fefb 	bl	801671c <GUI_TIMER__GetNextTimerLin>
 800e926:	4604      	mov	r4, r0
 800e928:	e7df      	b.n	800e8ea <WM__DeleteAssocTimer+0x12>
 800e92a:	4620      	mov	r0, r4
 800e92c:	4669      	mov	r1, sp
 800e92e:	9e00      	ldr	r6, [sp, #0]
 800e930:	f007 fef4 	bl	801671c <GUI_TIMER__GetNextTimerLin>
 800e934:	4604      	mov	r4, r0
 800e936:	2e00      	cmp	r6, #0
 800e938:	d0d7      	beq.n	800e8ea <WM__DeleteAssocTimer+0x12>
 800e93a:	f008 f899 	bl	8016a70 <GUI_Lock>
 800e93e:	4630      	mov	r0, r6
 800e940:	f00a fc16 	bl	8019170 <GUI_ALLOC_LockH>
 800e944:	9001      	str	r0, [sp, #4]
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	f007 ff5e 	bl	8016808 <GUI_TIMER_Delete>
 800e94c:	a801      	add	r0, sp, #4
 800e94e:	f00a fc21 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e952:	4630      	mov	r0, r6
 800e954:	f00a fd1e 	bl	8019394 <GUI_ALLOC_Free>
 800e958:	f008 f880 	bl	8016a5c <GUI_Unlock>
 800e95c:	e7c5      	b.n	800e8ea <WM__DeleteAssocTimer+0x12>
 800e95e:	bf00      	nop

0800e960 <WM_DeleteTimer>:
 800e960:	b530      	push	{r4, r5, lr}
 800e962:	4604      	mov	r4, r0
 800e964:	b083      	sub	sp, #12
 800e966:	b198      	cbz	r0, 800e990 <WM_DeleteTimer+0x30>
 800e968:	f008 f882 	bl	8016a70 <GUI_Lock>
 800e96c:	4620      	mov	r0, r4
 800e96e:	f00a fbff 	bl	8019170 <GUI_ALLOC_LockH>
 800e972:	ad02      	add	r5, sp, #8
 800e974:	4603      	mov	r3, r0
 800e976:	6800      	ldr	r0, [r0, #0]
 800e978:	f845 3d04 	str.w	r3, [r5, #-4]!
 800e97c:	f007 ff44 	bl	8016808 <GUI_TIMER_Delete>
 800e980:	4628      	mov	r0, r5
 800e982:	f00a fc07 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e986:	4620      	mov	r0, r4
 800e988:	f00a fd04 	bl	8019394 <GUI_ALLOC_Free>
 800e98c:	f008 f866 	bl	8016a5c <GUI_Unlock>
 800e990:	b003      	add	sp, #12
 800e992:	bd30      	pop	{r4, r5, pc}

0800e994 <WM_CreateTimer>:
 800e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e998:	b082      	sub	sp, #8
 800e99a:	4680      	mov	r8, r0
 800e99c:	460f      	mov	r7, r1
 800e99e:	4615      	mov	r5, r2
 800e9a0:	f008 f866 	bl	8016a70 <GUI_Lock>
 800e9a4:	200c      	movs	r0, #12
 800e9a6:	f00a fd6b 	bl	8019480 <GUI_ALLOC_AllocZero>
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	b928      	cbnz	r0, 800e9ba <WM_CreateTimer+0x26>
 800e9ae:	f008 f855 	bl	8016a5c <GUI_Unlock>
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	b002      	add	sp, #8
 800e9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ba:	f008 f801 	bl	80169c0 <GUI_GetTime>
 800e9be:	4622      	mov	r2, r4
 800e9c0:	1941      	adds	r1, r0, r5
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4812      	ldr	r0, [pc, #72]	; (800ea10 <WM_CreateTimer+0x7c>)
 800e9c6:	f007 fec9 	bl	801675c <GUI_TIMER_Create>
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	b946      	cbnz	r6, 800e9e2 <WM_CreateTimer+0x4e>
 800e9d0:	f00a fce0 	bl	8019394 <GUI_ALLOC_Free>
 800e9d4:	f008 f842 	bl	8016a5c <GUI_Unlock>
 800e9d8:	4634      	mov	r4, r6
 800e9da:	4620      	mov	r0, r4
 800e9dc:	b002      	add	sp, #8
 800e9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e2:	f00a fbc5 	bl	8019170 <GUI_ALLOC_LockH>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	a802      	add	r0, sp, #8
 800e9ea:	f8c3 8004 	str.w	r8, [r3, #4]
 800e9ee:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e9f2:	609f      	str	r7, [r3, #8]
 800e9f4:	601e      	str	r6, [r3, #0]
 800e9f6:	f00a fbcd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f007 ff67 	bl	80168d0 <GUI_TIMER_SetPeriod>
 800ea02:	f008 f82b 	bl	8016a5c <GUI_Unlock>
 800ea06:	4620      	mov	r0, r4
 800ea08:	b002      	add	sp, #8
 800ea0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0e:	bf00      	nop
 800ea10:	0800e8a9 	.word	0x0800e8a9

0800ea14 <WM_RestartTimer>:
 800ea14:	b530      	push	{r4, r5, lr}
 800ea16:	4604      	mov	r4, r0
 800ea18:	b083      	sub	sp, #12
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	b908      	cbnz	r0, 800ea22 <WM_RestartTimer+0xe>
 800ea1e:	b003      	add	sp, #12
 800ea20:	bd30      	pop	{r4, r5, pc}
 800ea22:	f008 f825 	bl	8016a70 <GUI_Lock>
 800ea26:	4620      	mov	r0, r4
 800ea28:	f00a fba2 	bl	8019170 <GUI_ALLOC_LockH>
 800ea2c:	9001      	str	r0, [sp, #4]
 800ea2e:	b94d      	cbnz	r5, 800ea44 <WM_RestartTimer+0x30>
 800ea30:	6800      	ldr	r0, [r0, #0]
 800ea32:	f007 ff63 	bl	80168fc <GUI_TIMER_Restart>
 800ea36:	a801      	add	r0, sp, #4
 800ea38:	f00a fbac 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ea3c:	f008 f80e 	bl	8016a5c <GUI_Unlock>
 800ea40:	b003      	add	sp, #12
 800ea42:	bd30      	pop	{r4, r5, pc}
 800ea44:	6800      	ldr	r0, [r0, #0]
 800ea46:	4629      	mov	r1, r5
 800ea48:	f007 ff42 	bl	80168d0 <GUI_TIMER_SetPeriod>
 800ea4c:	9801      	ldr	r0, [sp, #4]
 800ea4e:	e7ef      	b.n	800ea30 <WM_RestartTimer+0x1c>

0800ea50 <WM_SetHasTrans>:
 800ea50:	b530      	push	{r4, r5, lr}
 800ea52:	4604      	mov	r4, r0
 800ea54:	b083      	sub	sp, #12
 800ea56:	f008 f80b 	bl	8016a70 <GUI_Lock>
 800ea5a:	b91c      	cbnz	r4, 800ea64 <WM_SetHasTrans+0x14>
 800ea5c:	f007 fffe 	bl	8016a5c <GUI_Unlock>
 800ea60:	b003      	add	sp, #12
 800ea62:	bd30      	pop	{r4, r5, pc}
 800ea64:	4620      	mov	r0, r4
 800ea66:	f00a fb83 	bl	8019170 <GUI_ALLOC_LockH>
 800ea6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ea6c:	9001      	str	r0, [sp, #4]
 800ea6e:	07db      	lsls	r3, r3, #31
 800ea70:	d506      	bpl.n	800ea80 <WM_SetHasTrans+0x30>
 800ea72:	a801      	add	r0, sp, #4
 800ea74:	f00a fb8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ea78:	f007 fff0 	bl	8016a5c <GUI_Unlock>
 800ea7c:	b003      	add	sp, #12
 800ea7e:	bd30      	pop	{r4, r5, pc}
 800ea80:	4620      	mov	r0, r4
 800ea82:	f001 fb87 	bl	8010194 <WM_ValidateWindow>
 800ea86:	9a01      	ldr	r2, [sp, #4]
 800ea88:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <WM_SetHasTrans+0x50>)
 800ea8a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800ea8c:	6819      	ldr	r1, [r3, #0]
 800ea8e:	f040 0501 	orr.w	r5, r0, #1
 800ea92:	3101      	adds	r1, #1
 800ea94:	4620      	mov	r0, r4
 800ea96:	6295      	str	r5, [r2, #40]	; 0x28
 800ea98:	6019      	str	r1, [r3, #0]
 800ea9a:	f002 fff3 	bl	8011a84 <WM_InvalidateWindow>
 800ea9e:	e7e8      	b.n	800ea72 <WM_SetHasTrans+0x22>
 800eaa0:	2002bfc4 	.word	0x2002bfc4

0800eaa4 <WM_GetHasTrans>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	f007 ffe2 	bl	8016a70 <GUI_Lock>
 800eaac:	b12c      	cbz	r4, 800eaba <WM_GetHasTrans+0x16>
 800eaae:	4620      	mov	r0, r4
 800eab0:	f00a fb54 	bl	801915c <GUI_ALLOC_h2p>
 800eab4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800eab6:	f004 0401 	and.w	r4, r4, #1
 800eaba:	f007 ffcf 	bl	8016a5c <GUI_Unlock>
 800eabe:	4620      	mov	r0, r4
 800eac0:	bd10      	pop	{r4, pc}
 800eac2:	bf00      	nop

0800eac4 <WM_SetScrollbarH>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	4605      	mov	r5, r0
 800eac8:	b082      	sub	sp, #8
 800eaca:	460e      	mov	r6, r1
 800eacc:	f007 ffd0 	bl	8016a70 <GUI_Lock>
 800ead0:	4628      	mov	r0, r5
 800ead2:	21ff      	movs	r1, #255	; 0xff
 800ead4:	f000 fd72 	bl	800f5bc <WM_GetDialogItem>
 800ead8:	4604      	mov	r4, r0
 800eada:	b15e      	cbz	r6, 800eaf4 <WM_SetScrollbarH+0x30>
 800eadc:	b990      	cbnz	r0, 800eb04 <WM_SetScrollbarH+0x40>
 800eade:	4628      	mov	r0, r5
 800eae0:	4621      	mov	r1, r4
 800eae2:	f00c f9f1 	bl	801aec8 <SCROLLBAR_CreateAttached>
 800eae6:	f007 ffb9 	bl	8016a5c <GUI_Unlock>
 800eaea:	1c20      	adds	r0, r4, #0
 800eaec:	bf18      	it	ne
 800eaee:	2001      	movne	r0, #1
 800eaf0:	b002      	add	sp, #8
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d0f6      	beq.n	800eae6 <WM_SetScrollbarH+0x22>
 800eaf8:	f001 fb6e 	bl	80101d8 <WM_HideWindow>
 800eafc:	4620      	mov	r0, r4
 800eafe:	f003 fbc1 	bl	8012284 <WM__DeleteSecure>
 800eb02:	e7f0      	b.n	800eae6 <WM_SetScrollbarH+0x22>
 800eb04:	f00a fb34 	bl	8019170 <GUI_ALLOC_LockH>
 800eb08:	ab02      	add	r3, sp, #8
 800eb0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800eb0c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800eb10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eb14:	f042 0202 	orr.w	r2, r2, #2
 800eb18:	6282      	str	r2, [r0, #40]	; 0x28
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f00a fb3a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800eb20:	e7e1      	b.n	800eae6 <WM_SetScrollbarH+0x22>
 800eb22:	bf00      	nop

0800eb24 <WM_SetScrollbarV>:
 800eb24:	b570      	push	{r4, r5, r6, lr}
 800eb26:	4605      	mov	r5, r0
 800eb28:	b082      	sub	sp, #8
 800eb2a:	460e      	mov	r6, r1
 800eb2c:	f007 ffa0 	bl	8016a70 <GUI_Lock>
 800eb30:	4628      	mov	r0, r5
 800eb32:	21fe      	movs	r1, #254	; 0xfe
 800eb34:	f000 fd42 	bl	800f5bc <WM_GetDialogItem>
 800eb38:	4604      	mov	r4, r0
 800eb3a:	b15e      	cbz	r6, 800eb54 <WM_SetScrollbarV+0x30>
 800eb3c:	b990      	cbnz	r0, 800eb64 <WM_SetScrollbarV+0x40>
 800eb3e:	4628      	mov	r0, r5
 800eb40:	2108      	movs	r1, #8
 800eb42:	f00c f9c1 	bl	801aec8 <SCROLLBAR_CreateAttached>
 800eb46:	f007 ff89 	bl	8016a5c <GUI_Unlock>
 800eb4a:	1c20      	adds	r0, r4, #0
 800eb4c:	bf18      	it	ne
 800eb4e:	2001      	movne	r0, #1
 800eb50:	b002      	add	sp, #8
 800eb52:	bd70      	pop	{r4, r5, r6, pc}
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d0f6      	beq.n	800eb46 <WM_SetScrollbarV+0x22>
 800eb58:	f001 fb3e 	bl	80101d8 <WM_HideWindow>
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f003 fb91 	bl	8012284 <WM__DeleteSecure>
 800eb62:	e7f0      	b.n	800eb46 <WM_SetScrollbarV+0x22>
 800eb64:	f00a fb04 	bl	8019170 <GUI_ALLOC_LockH>
 800eb68:	ab02      	add	r3, sp, #8
 800eb6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800eb6c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800eb70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eb74:	f042 0202 	orr.w	r2, r2, #2
 800eb78:	6282      	str	r2, [r0, #40]	; 0x28
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f00a fb0a 	bl	8019194 <GUI_ALLOC_UnlockH>
 800eb80:	e7e1      	b.n	800eb46 <WM_SetScrollbarV+0x22>
 800eb82:	bf00      	nop

0800eb84 <WM_SetFocusOnPrevChild>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	4604      	mov	r4, r0
 800eb88:	b908      	cbnz	r0, 800eb8e <WM_SetFocusOnPrevChild+0xa>
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
 800eb8e:	f007 ff6f 	bl	8016a70 <GUI_Lock>
 800eb92:	4620      	mov	r0, r4
 800eb94:	f7ff fd1c 	bl	800e5d0 <WM__GetFocusedChild>
 800eb98:	4604      	mov	r4, r0
 800eb9a:	bb38      	cbnz	r0, 800ebec <WM_SetFocusOnPrevChild+0x68>
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f7ff fd3d 	bl	800e61c <WM__GetLastSibling>
 800eba2:	4605      	mov	r5, r0
 800eba4:	42ac      	cmp	r4, r5
 800eba6:	bf08      	it	eq
 800eba8:	2500      	moveq	r5, #0
 800ebaa:	462c      	mov	r4, r5
 800ebac:	e00d      	b.n	800ebca <WM_SetFocusOnPrevChild+0x46>
 800ebae:	4620      	mov	r0, r4
 800ebb0:	b184      	cbz	r4, 800ebd4 <WM_SetFocusOnPrevChild+0x50>
 800ebb2:	f7ff fd41 	bl	800e638 <WM__GetPrevSibling>
 800ebb6:	b910      	cbnz	r0, 800ebbe <WM_SetFocusOnPrevChild+0x3a>
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7ff fd2f 	bl	800e61c <WM__GetLastSibling>
 800ebbe:	4284      	cmp	r4, r0
 800ebc0:	bf08      	it	eq
 800ebc2:	2000      	moveq	r0, #0
 800ebc4:	4285      	cmp	r5, r0
 800ebc6:	d00f      	beq.n	800ebe8 <WM_SetFocusOnPrevChild+0x64>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f001 f832 	bl	800fc34 <WM_IsFocusable>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d0ec      	beq.n	800ebae <WM_SetFocusOnPrevChild+0x2a>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f001 f8d9 	bl	800fd8c <WM_SetFocus>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	bf18      	it	ne
 800ebde:	2400      	movne	r4, #0
 800ebe0:	f007 ff3c 	bl	8016a5c <GUI_Unlock>
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	462c      	mov	r4, r5
 800ebea:	e7f3      	b.n	800ebd4 <WM_SetFocusOnPrevChild+0x50>
 800ebec:	f7ff fd24 	bl	800e638 <WM__GetPrevSibling>
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d1d6      	bne.n	800eba4 <WM_SetFocusOnPrevChild+0x20>
 800ebf6:	e7d1      	b.n	800eb9c <WM_SetFocusOnPrevChild+0x18>

0800ebf8 <WM_SetFocusOnNextChild>:
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	b910      	cbnz	r0, 800ec04 <WM_SetFocusOnNextChild+0xc>
 800ebfe:	4604      	mov	r4, r0
 800ec00:	4620      	mov	r0, r4
 800ec02:	bd70      	pop	{r4, r5, r6, pc}
 800ec04:	f007 ff34 	bl	8016a70 <GUI_Lock>
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff fce1 	bl	800e5d0 <WM__GetFocusedChild>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d135      	bne.n	800ec80 <WM_SetFocusOnNextChild+0x88>
 800ec14:	4630      	mov	r0, r6
 800ec16:	f00a faa1 	bl	801915c <GUI_ALLOC_h2p>
 800ec1a:	69c5      	ldr	r5, [r0, #28]
 800ec1c:	42ac      	cmp	r4, r5
 800ec1e:	bf08      	it	eq
 800ec20:	2500      	moveq	r5, #0
 800ec22:	462c      	mov	r4, r5
 800ec24:	e00f      	b.n	800ec46 <WM_SetFocusOnNextChild+0x4e>
 800ec26:	4620      	mov	r0, r4
 800ec28:	b30c      	cbz	r4, 800ec6e <WM_SetFocusOnNextChild+0x76>
 800ec2a:	f00a fa97 	bl	801915c <GUI_ALLOC_h2p>
 800ec2e:	6a03      	ldr	r3, [r0, #32]
 800ec30:	b91b      	cbnz	r3, 800ec3a <WM_SetFocusOnNextChild+0x42>
 800ec32:	4630      	mov	r0, r6
 800ec34:	f00a fa92 	bl	801915c <GUI_ALLOC_h2p>
 800ec38:	69c3      	ldr	r3, [r0, #28]
 800ec3a:	429c      	cmp	r4, r3
 800ec3c:	bf08      	it	eq
 800ec3e:	2300      	moveq	r3, #0
 800ec40:	429d      	cmp	r5, r3
 800ec42:	d019      	beq.n	800ec78 <WM_SetFocusOnNextChild+0x80>
 800ec44:	461c      	mov	r4, r3
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 fff4 	bl	800fc34 <WM_IsFocusable>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0ea      	beq.n	800ec26 <WM_SetFocusOnNextChild+0x2e>
 800ec50:	b16c      	cbz	r4, 800ec6e <WM_SetFocusOnNextChild+0x76>
 800ec52:	4d0e      	ldr	r5, [pc, #56]	; (800ec8c <WM_SetFocusOnNextChild+0x94>)
 800ec54:	4620      	mov	r0, r4
 800ec56:	682e      	ldr	r6, [r5, #0]
 800ec58:	f003 f86c 	bl	8011d34 <WM__GetTopLevelLayer>
 800ec5c:	1c42      	adds	r2, r0, #1
 800ec5e:	4603      	mov	r3, r0
 800ec60:	d006      	beq.n	800ec70 <WM_SetFocusOnNextChild+0x78>
 800ec62:	4620      	mov	r0, r4
 800ec64:	602b      	str	r3, [r5, #0]
 800ec66:	f001 f891 	bl	800fd8c <WM_SetFocus>
 800ec6a:	602e      	str	r6, [r5, #0]
 800ec6c:	b100      	cbz	r0, 800ec70 <WM_SetFocusOnNextChild+0x78>
 800ec6e:	2400      	movs	r4, #0
 800ec70:	f007 fef4 	bl	8016a5c <GUI_Unlock>
 800ec74:	4620      	mov	r0, r4
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	462c      	mov	r4, r5
 800ec7a:	2c00      	cmp	r4, #0
 800ec7c:	d1e9      	bne.n	800ec52 <WM_SetFocusOnNextChild+0x5a>
 800ec7e:	e7f6      	b.n	800ec6e <WM_SetFocusOnNextChild+0x76>
 800ec80:	f00a fa6c 	bl	801915c <GUI_ALLOC_h2p>
 800ec84:	6a05      	ldr	r5, [r0, #32]
 800ec86:	2d00      	cmp	r5, #0
 800ec88:	d1c8      	bne.n	800ec1c <WM_SetFocusOnNextChild+0x24>
 800ec8a:	e7c3      	b.n	800ec14 <WM_SetFocusOnNextChild+0x1c>
 800ec8c:	2002bf94 	.word	0x2002bf94

0800ec90 <WM_SetCapture>:
 800ec90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec92:	4e10      	ldr	r6, [pc, #64]	; (800ecd4 <WM_SetCapture+0x44>)
 800ec94:	4c10      	ldr	r4, [pc, #64]	; (800ecd8 <WM_SetCapture+0x48>)
 800ec96:	b085      	sub	sp, #20
 800ec98:	4605      	mov	r5, r0
 800ec9a:	460f      	mov	r7, r1
 800ec9c:	f007 fee8 	bl	8016a70 <GUI_Lock>
 800eca0:	6833      	ldr	r3, [r6, #0]
 800eca2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800eca6:	42a8      	cmp	r0, r5
 800eca8:	d000      	beq.n	800ecac <WM_SetCapture+0x1c>
 800ecaa:	b938      	cbnz	r0, 800ecbc <WM_SetCapture+0x2c>
 800ecac:	4a0b      	ldr	r2, [pc, #44]	; (800ecdc <WM_SetCapture+0x4c>)
 800ecae:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ecb2:	7017      	strb	r7, [r2, #0]
 800ecb4:	f007 fed2 	bl	8016a5c <GUI_Unlock>
 800ecb8:	b005      	add	sp, #20
 800ecba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecbc:	a904      	add	r1, sp, #16
 800ecbe:	2318      	movs	r3, #24
 800ecc0:	f841 3d10 	str.w	r3, [r1, #-16]!
 800ecc4:	4669      	mov	r1, sp
 800ecc6:	f7ff fd09 	bl	800e6dc <WM__SendMessage>
 800ecca:	6833      	ldr	r3, [r6, #0]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800ecd2:	e7eb      	b.n	800ecac <WM_SetCapture+0x1c>
 800ecd4:	2002bf94 	.word	0x2002bf94
 800ecd8:	2002bfb8 	.word	0x2002bfb8
 800ecdc:	2002bf98 	.word	0x2002bf98

0800ece0 <_MoveDescendents>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	b0b5      	sub	sp, #212	; 0xd4
 800ece6:	2300      	movs	r3, #0
 800ece8:	9006      	str	r0, [sp, #24]
 800ecea:	468a      	mov	sl, r1
 800ecec:	931c      	str	r3, [sp, #112]	; 0x70
 800ecee:	931d      	str	r3, [sp, #116]	; 0x74
 800ecf0:	931e      	str	r3, [sp, #120]	; 0x78
 800ecf2:	931f      	str	r3, [sp, #124]	; 0x7c
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	f000 8115 	beq.w	800ef24 <_MoveDescendents+0x244>
 800ecfa:	9806      	ldr	r0, [sp, #24]
 800ecfc:	f04f 0b03 	mov.w	fp, #3
 800ed00:	4691      	mov	r9, r2
 800ed02:	f00a fa35 	bl	8019170 <GUI_ALLOC_LockH>
 800ed06:	4651      	mov	r1, sl
 800ed08:	464a      	mov	r2, r9
 800ed0a:	900a      	str	r0, [sp, #40]	; 0x28
 800ed0c:	f009 f8b6 	bl	8017e7c <GUI_MoveRect>
 800ed10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed12:	4651      	mov	r1, sl
 800ed14:	3008      	adds	r0, #8
 800ed16:	464a      	mov	r2, r9
 800ed18:	f009 f8b0 	bl	8017e7c <GUI_MoveRect>
 800ed1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1e:	a80a      	add	r0, sp, #40	; 0x28
 800ed20:	69da      	ldr	r2, [r3, #28]
 800ed22:	6a1b      	ldr	r3, [r3, #32]
 800ed24:	9307      	str	r3, [sp, #28]
 800ed26:	9204      	str	r2, [sp, #16]
 800ed28:	f00a fa34 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9320      	str	r3, [sp, #128]	; 0x80
 800ed30:	9321      	str	r3, [sp, #132]	; 0x84
 800ed32:	9322      	str	r3, [sp, #136]	; 0x88
 800ed34:	9323      	str	r3, [sp, #140]	; 0x8c
 800ed36:	9b04      	ldr	r3, [sp, #16]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f000 80e2 	beq.w	800ef02 <_MoveDescendents+0x222>
 800ed3e:	9804      	ldr	r0, [sp, #16]
 800ed40:	f00a fa16 	bl	8019170 <GUI_ALLOC_LockH>
 800ed44:	4651      	mov	r1, sl
 800ed46:	464a      	mov	r2, r9
 800ed48:	900b      	str	r0, [sp, #44]	; 0x2c
 800ed4a:	f009 f897 	bl	8017e7c <GUI_MoveRect>
 800ed4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ed50:	4651      	mov	r1, sl
 800ed52:	3008      	adds	r0, #8
 800ed54:	464a      	mov	r2, r9
 800ed56:	f009 f891 	bl	8017e7c <GUI_MoveRect>
 800ed5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed5c:	a80b      	add	r0, sp, #44	; 0x2c
 800ed5e:	69da      	ldr	r2, [r3, #28]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	9308      	str	r3, [sp, #32]
 800ed64:	9205      	str	r2, [sp, #20]
 800ed66:	f00a fa15 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9324      	str	r3, [sp, #144]	; 0x90
 800ed6e:	9325      	str	r3, [sp, #148]	; 0x94
 800ed70:	9326      	str	r3, [sp, #152]	; 0x98
 800ed72:	9327      	str	r3, [sp, #156]	; 0x9c
 800ed74:	9b05      	ldr	r3, [sp, #20]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 80b3 	beq.w	800eee2 <_MoveDescendents+0x202>
 800ed7c:	9805      	ldr	r0, [sp, #20]
 800ed7e:	464c      	mov	r4, r9
 800ed80:	f00a f9f6 	bl	8019170 <GUI_ALLOC_LockH>
 800ed84:	4651      	mov	r1, sl
 800ed86:	4622      	mov	r2, r4
 800ed88:	900c      	str	r0, [sp, #48]	; 0x30
 800ed8a:	f009 f877 	bl	8017e7c <GUI_MoveRect>
 800ed8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ed90:	4651      	mov	r1, sl
 800ed92:	3008      	adds	r0, #8
 800ed94:	4622      	mov	r2, r4
 800ed96:	f009 f871 	bl	8017e7c <GUI_MoveRect>
 800ed9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed9c:	a80c      	add	r0, sp, #48	; 0x30
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	9309      	str	r3, [sp, #36]	; 0x24
 800eda4:	9202      	str	r2, [sp, #8]
 800eda6:	f00a f9f5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800edaa:	2300      	movs	r3, #0
 800edac:	9328      	str	r3, [sp, #160]	; 0xa0
 800edae:	9329      	str	r3, [sp, #164]	; 0xa4
 800edb0:	932a      	str	r3, [sp, #168]	; 0xa8
 800edb2:	932b      	str	r3, [sp, #172]	; 0xac
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 8082 	beq.w	800eec0 <_MoveDescendents+0x1e0>
 800edbc:	9802      	ldr	r0, [sp, #8]
 800edbe:	4655      	mov	r5, sl
 800edc0:	f00a f9d6 	bl	8019170 <GUI_ALLOC_LockH>
 800edc4:	4629      	mov	r1, r5
 800edc6:	4622      	mov	r2, r4
 800edc8:	900d      	str	r0, [sp, #52]	; 0x34
 800edca:	f009 f857 	bl	8017e7c <GUI_MoveRect>
 800edce:	980d      	ldr	r0, [sp, #52]	; 0x34
 800edd0:	4629      	mov	r1, r5
 800edd2:	3008      	adds	r0, #8
 800edd4:	4622      	mov	r2, r4
 800edd6:	f009 f851 	bl	8017e7c <GUI_MoveRect>
 800edda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eddc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800ede0:	6a1b      	ldr	r3, [r3, #32]
 800ede2:	9303      	str	r3, [sp, #12]
 800ede4:	2700      	movs	r7, #0
 800ede6:	a80d      	add	r0, sp, #52	; 0x34
 800ede8:	f00a f9d4 	bl	8019194 <GUI_ALLOC_UnlockH>
 800edec:	972c      	str	r7, [sp, #176]	; 0xb0
 800edee:	972d      	str	r7, [sp, #180]	; 0xb4
 800edf0:	972e      	str	r7, [sp, #184]	; 0xb8
 800edf2:	972f      	str	r7, [sp, #188]	; 0xbc
 800edf4:	f1b8 0f00 	cmp.w	r8, #0
 800edf8:	d052      	beq.n	800eea0 <_MoveDescendents+0x1c0>
 800edfa:	4640      	mov	r0, r8
 800edfc:	f00a f9b8 	bl	8019170 <GUI_ALLOC_LockH>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4622      	mov	r2, r4
 800ee04:	900e      	str	r0, [sp, #56]	; 0x38
 800ee06:	f009 f839 	bl	8017e7c <GUI_MoveRect>
 800ee0a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ee0c:	4622      	mov	r2, r4
 800ee0e:	4629      	mov	r1, r5
 800ee10:	3008      	adds	r0, #8
 800ee12:	f009 f833 	bl	8017e7c <GUI_MoveRect>
 800ee16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee18:	a80e      	add	r0, sp, #56	; 0x38
 800ee1a:	69de      	ldr	r6, [r3, #28]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	f00a f9b8 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ee24:	2200      	movs	r2, #0
 800ee26:	9230      	str	r2, [sp, #192]	; 0xc0
 800ee28:	9231      	str	r2, [sp, #196]	; 0xc4
 800ee2a:	9232      	str	r2, [sp, #200]	; 0xc8
 800ee2c:	9233      	str	r2, [sp, #204]	; 0xcc
 800ee2e:	af1a      	add	r7, sp, #104	; 0x68
 800ee30:	b90e      	cbnz	r6, 800ee36 <_MoveDescendents+0x156>
 800ee32:	e027      	b.n	800ee84 <_MoveDescendents+0x1a4>
 800ee34:	464e      	mov	r6, r9
 800ee36:	4630      	mov	r0, r6
 800ee38:	f00a f99a 	bl	8019170 <GUI_ALLOC_LockH>
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	4622      	mov	r2, r4
 800ee40:	900f      	str	r0, [sp, #60]	; 0x3c
 800ee42:	f009 f81b 	bl	8017e7c <GUI_MoveRect>
 800ee46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4622      	mov	r2, r4
 800ee4c:	3008      	adds	r0, #8
 800ee4e:	f009 f815 	bl	8017e7c <GUI_MoveRect>
 800ee52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee54:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 800ee58:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800ee5c:	a80f      	add	r0, sp, #60	; 0x3c
 800ee5e:	f00a f999 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ee62:	4650      	mov	r0, sl
 800ee64:	4629      	mov	r1, r5
 800ee66:	4622      	mov	r2, r4
 800ee68:	f7ff ff3a 	bl	800ece0 <_MoveDescendents>
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	a930      	add	r1, sp, #192	; 0xc0
 800ee70:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800ee74:	9733      	str	r7, [sp, #204]	; 0xcc
 800ee76:	951a      	str	r5, [sp, #104]	; 0x68
 800ee78:	941b      	str	r4, [sp, #108]	; 0x6c
 800ee7a:	f7ff fc2f 	bl	800e6dc <WM__SendMessage>
 800ee7e:	f1b9 0f00 	cmp.w	r9, #0
 800ee82:	d1d7      	bne.n	800ee34 <_MoveDescendents+0x154>
 800ee84:	ab18      	add	r3, sp, #96	; 0x60
 800ee86:	4640      	mov	r0, r8
 800ee88:	a92c      	add	r1, sp, #176	; 0xb0
 800ee8a:	932f      	str	r3, [sp, #188]	; 0xbc
 800ee8c:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 800ee90:	9518      	str	r5, [sp, #96]	; 0x60
 800ee92:	9419      	str	r4, [sp, #100]	; 0x64
 800ee94:	f7ff fc22 	bl	800e6dc <WM__SendMessage>
 800ee98:	9b01      	ldr	r3, [sp, #4]
 800ee9a:	b10b      	cbz	r3, 800eea0 <_MoveDescendents+0x1c0>
 800ee9c:	4698      	mov	r8, r3
 800ee9e:	e7ac      	b.n	800edfa <_MoveDescendents+0x11a>
 800eea0:	aa16      	add	r2, sp, #88	; 0x58
 800eea2:	9802      	ldr	r0, [sp, #8]
 800eea4:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 800eea8:	a928      	add	r1, sp, #160	; 0xa0
 800eeaa:	922b      	str	r2, [sp, #172]	; 0xac
 800eeac:	9516      	str	r5, [sp, #88]	; 0x58
 800eeae:	9417      	str	r4, [sp, #92]	; 0x5c
 800eeb0:	f7ff fc14 	bl	800e6dc <WM__SendMessage>
 800eeb4:	9b03      	ldr	r3, [sp, #12]
 800eeb6:	b113      	cbz	r3, 800eebe <_MoveDescendents+0x1de>
 800eeb8:	9302      	str	r3, [sp, #8]
 800eeba:	4618      	mov	r0, r3
 800eebc:	e780      	b.n	800edc0 <_MoveDescendents+0xe0>
 800eebe:	46aa      	mov	sl, r5
 800eec0:	aa14      	add	r2, sp, #80	; 0x50
 800eec2:	9805      	ldr	r0, [sp, #20]
 800eec4:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 800eec8:	a924      	add	r1, sp, #144	; 0x90
 800eeca:	9227      	str	r2, [sp, #156]	; 0x9c
 800eecc:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800eed0:	9415      	str	r4, [sp, #84]	; 0x54
 800eed2:	f7ff fc03 	bl	800e6dc <WM__SendMessage>
 800eed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed8:	b113      	cbz	r3, 800eee0 <_MoveDescendents+0x200>
 800eeda:	9305      	str	r3, [sp, #20]
 800eedc:	4618      	mov	r0, r3
 800eede:	e74f      	b.n	800ed80 <_MoveDescendents+0xa0>
 800eee0:	46a1      	mov	r9, r4
 800eee2:	aa12      	add	r2, sp, #72	; 0x48
 800eee4:	9804      	ldr	r0, [sp, #16]
 800eee6:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 800eeea:	a920      	add	r1, sp, #128	; 0x80
 800eeec:	9223      	str	r2, [sp, #140]	; 0x8c
 800eeee:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800eef2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800eef6:	f7ff fbf1 	bl	800e6dc <WM__SendMessage>
 800eefa:	9b08      	ldr	r3, [sp, #32]
 800eefc:	b10b      	cbz	r3, 800ef02 <_MoveDescendents+0x222>
 800eefe:	9304      	str	r3, [sp, #16]
 800ef00:	e71d      	b.n	800ed3e <_MoveDescendents+0x5e>
 800ef02:	ab10      	add	r3, sp, #64	; 0x40
 800ef04:	2203      	movs	r2, #3
 800ef06:	9806      	ldr	r0, [sp, #24]
 800ef08:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef0a:	a91c      	add	r1, sp, #112	; 0x70
 800ef0c:	921c      	str	r2, [sp, #112]	; 0x70
 800ef0e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ef12:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800ef16:	f7ff fbe1 	bl	800e6dc <WM__SendMessage>
 800ef1a:	9b07      	ldr	r3, [sp, #28]
 800ef1c:	b113      	cbz	r3, 800ef24 <_MoveDescendents+0x244>
 800ef1e:	9306      	str	r3, [sp, #24]
 800ef20:	4618      	mov	r0, r3
 800ef22:	e6ee      	b.n	800ed02 <_MoveDescendents+0x22>
 800ef24:	b035      	add	sp, #212	; 0xd4
 800ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2a:	bf00      	nop

0800ef2c <WM__MoveWindow>:
 800ef2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef30:	b08b      	sub	sp, #44	; 0x2c
 800ef32:	2300      	movs	r3, #0
 800ef34:	4605      	mov	r5, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	4616      	mov	r6, r2
 800ef3a:	9306      	str	r3, [sp, #24]
 800ef3c:	9307      	str	r3, [sp, #28]
 800ef3e:	9308      	str	r3, [sp, #32]
 800ef40:	9309      	str	r3, [sp, #36]	; 0x24
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d03a      	beq.n	800efbc <WM__MoveWindow+0x90>
 800ef46:	b909      	cbnz	r1, 800ef4c <WM__MoveWindow+0x20>
 800ef48:	2a00      	cmp	r2, #0
 800ef4a:	d037      	beq.n	800efbc <WM__MoveWindow+0x90>
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	f00a f90f 	bl	8019170 <GUI_ALLOC_LockH>
 800ef52:	4603      	mov	r3, r0
 800ef54:	c803      	ldmia	r0, {r0, r1}
 800ef56:	f10d 0808 	add.w	r8, sp, #8
 800ef5a:	e888 0003 	stmia.w	r8, {r0, r1}
 800ef5e:	4632      	mov	r2, r6
 800ef60:	4618      	mov	r0, r3
 800ef62:	4621      	mov	r1, r4
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	f008 ff89 	bl	8017e7c <GUI_MoveRect>
 800ef6a:	9801      	ldr	r0, [sp, #4]
 800ef6c:	af0a      	add	r7, sp, #40	; 0x28
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4632      	mov	r2, r6
 800ef72:	3008      	adds	r0, #8
 800ef74:	f008 ff82 	bl	8017e7c <GUI_MoveRect>
 800ef78:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800ef7c:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800ef80:	4638      	mov	r0, r7
 800ef82:	f00a f907 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ef86:	4632      	mov	r2, r6
 800ef88:	4648      	mov	r0, r9
 800ef8a:	4621      	mov	r1, r4
 800ef8c:	f7ff fea8 	bl	800ece0 <_MoveDescendents>
 800ef90:	4628      	mov	r0, r5
 800ef92:	f00a f8ed 	bl	8019170 <GUI_ALLOC_LockH>
 800ef96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ef98:	9001      	str	r0, [sp, #4]
 800ef9a:	0792      	lsls	r2, r2, #30
 800ef9c:	d501      	bpl.n	800efa2 <WM__MoveWindow+0x76>
 800ef9e:	6981      	ldr	r1, [r0, #24]
 800efa0:	b979      	cbnz	r1, 800efc2 <WM__MoveWindow+0x96>
 800efa2:	4638      	mov	r0, r7
 800efa4:	f00a f8f6 	bl	8019194 <GUI_ALLOC_UnlockH>
 800efa8:	2203      	movs	r2, #3
 800efaa:	ab04      	add	r3, sp, #16
 800efac:	4628      	mov	r0, r5
 800efae:	a906      	add	r1, sp, #24
 800efb0:	9404      	str	r4, [sp, #16]
 800efb2:	9605      	str	r6, [sp, #20]
 800efb4:	9206      	str	r2, [sp, #24]
 800efb6:	9309      	str	r3, [sp, #36]	; 0x24
 800efb8:	f7ff fb90 	bl	800e6dc <WM__SendMessage>
 800efbc:	b00b      	add	sp, #44	; 0x2c
 800efbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efc2:	6a02      	ldr	r2, [r0, #32]
 800efc4:	f002 fb8c 	bl	80116e0 <WM__InvalidateParent>
 800efc8:	9b01      	ldr	r3, [sp, #4]
 800efca:	4640      	mov	r0, r8
 800efcc:	6999      	ldr	r1, [r3, #24]
 800efce:	6a1a      	ldr	r2, [r3, #32]
 800efd0:	f002 fb86 	bl	80116e0 <WM__InvalidateParent>
 800efd4:	e7e5      	b.n	800efa2 <WM__MoveWindow+0x76>
 800efd6:	bf00      	nop

0800efd8 <WM_MoveWindow>:
 800efd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efdc:	b08b      	sub	sp, #44	; 0x2c
 800efde:	4605      	mov	r5, r0
 800efe0:	460c      	mov	r4, r1
 800efe2:	4616      	mov	r6, r2
 800efe4:	f007 fd44 	bl	8016a70 <GUI_Lock>
 800efe8:	2300      	movs	r3, #0
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	9307      	str	r3, [sp, #28]
 800efee:	9308      	str	r3, [sp, #32]
 800eff0:	9309      	str	r3, [sp, #36]	; 0x24
 800eff2:	2d00      	cmp	r5, #0
 800eff4:	d03a      	beq.n	800f06c <WM_MoveWindow+0x94>
 800eff6:	b90c      	cbnz	r4, 800effc <WM_MoveWindow+0x24>
 800eff8:	2e00      	cmp	r6, #0
 800effa:	d037      	beq.n	800f06c <WM_MoveWindow+0x94>
 800effc:	4628      	mov	r0, r5
 800effe:	f00a f8b7 	bl	8019170 <GUI_ALLOC_LockH>
 800f002:	4603      	mov	r3, r0
 800f004:	c803      	ldmia	r0, {r0, r1}
 800f006:	f10d 0808 	add.w	r8, sp, #8
 800f00a:	e888 0003 	stmia.w	r8, {r0, r1}
 800f00e:	4632      	mov	r2, r6
 800f010:	4618      	mov	r0, r3
 800f012:	4621      	mov	r1, r4
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	f008 ff31 	bl	8017e7c <GUI_MoveRect>
 800f01a:	9801      	ldr	r0, [sp, #4]
 800f01c:	af0a      	add	r7, sp, #40	; 0x28
 800f01e:	4621      	mov	r1, r4
 800f020:	4632      	mov	r2, r6
 800f022:	3008      	adds	r0, #8
 800f024:	f008 ff2a 	bl	8017e7c <GUI_MoveRect>
 800f028:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800f02c:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800f030:	4638      	mov	r0, r7
 800f032:	f00a f8af 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f036:	4632      	mov	r2, r6
 800f038:	4648      	mov	r0, r9
 800f03a:	4621      	mov	r1, r4
 800f03c:	f7ff fe50 	bl	800ece0 <_MoveDescendents>
 800f040:	4628      	mov	r0, r5
 800f042:	f00a f895 	bl	8019170 <GUI_ALLOC_LockH>
 800f046:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f048:	9001      	str	r0, [sp, #4]
 800f04a:	0792      	lsls	r2, r2, #30
 800f04c:	d501      	bpl.n	800f052 <WM_MoveWindow+0x7a>
 800f04e:	6981      	ldr	r1, [r0, #24]
 800f050:	b989      	cbnz	r1, 800f076 <WM_MoveWindow+0x9e>
 800f052:	4638      	mov	r0, r7
 800f054:	f00a f89e 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f058:	2203      	movs	r2, #3
 800f05a:	ab04      	add	r3, sp, #16
 800f05c:	4628      	mov	r0, r5
 800f05e:	a906      	add	r1, sp, #24
 800f060:	9404      	str	r4, [sp, #16]
 800f062:	9605      	str	r6, [sp, #20]
 800f064:	9206      	str	r2, [sp, #24]
 800f066:	9309      	str	r3, [sp, #36]	; 0x24
 800f068:	f7ff fb38 	bl	800e6dc <WM__SendMessage>
 800f06c:	f007 fcf6 	bl	8016a5c <GUI_Unlock>
 800f070:	b00b      	add	sp, #44	; 0x2c
 800f072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f076:	6a02      	ldr	r2, [r0, #32]
 800f078:	f002 fb32 	bl	80116e0 <WM__InvalidateParent>
 800f07c:	9b01      	ldr	r3, [sp, #4]
 800f07e:	4640      	mov	r0, r8
 800f080:	6999      	ldr	r1, [r3, #24]
 800f082:	6a1a      	ldr	r2, [r3, #32]
 800f084:	f002 fb2c 	bl	80116e0 <WM__InvalidateParent>
 800f088:	e7e3      	b.n	800f052 <WM_MoveWindow+0x7a>
 800f08a:	bf00      	nop

0800f08c <WM_MoveTo>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	4604      	mov	r4, r0
 800f090:	b082      	sub	sp, #8
 800f092:	460e      	mov	r6, r1
 800f094:	4615      	mov	r5, r2
 800f096:	f007 fceb 	bl	8016a70 <GUI_Lock>
 800f09a:	b19c      	cbz	r4, 800f0c4 <WM_MoveTo+0x38>
 800f09c:	4620      	mov	r0, r4
 800f09e:	f00a f867 	bl	8019170 <GUI_ALLOC_LockH>
 800f0a2:	ab02      	add	r3, sp, #8
 800f0a4:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f0a8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f0ac:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f0b0:	1a76      	subs	r6, r6, r1
 800f0b2:	1aad      	subs	r5, r5, r2
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f00a f86d 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4631      	mov	r1, r6
 800f0be:	462a      	mov	r2, r5
 800f0c0:	f7ff ff34 	bl	800ef2c <WM__MoveWindow>
 800f0c4:	f007 fcca 	bl	8016a5c <GUI_Unlock>
 800f0c8:	b002      	add	sp, #8
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}

0800f0cc <WM_ResizeWindow.part.7>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	b08a      	sub	sp, #40	; 0x28
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	4690      	mov	r8, r2
 800f0d8:	f007 fcca 	bl	8016a70 <GUI_Lock>
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f00a f847 	bl	8019170 <GUI_ALLOC_LockH>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	c803      	ldmia	r0, {r0, r1}
 800f0e6:	ad04      	add	r5, sp, #16
 800f0e8:	ac06      	add	r4, sp, #24
 800f0ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800f0ee:	9303      	str	r3, [sp, #12]
 800f0f0:	e884 0003 	stmia.w	r4, {r0, r1}
 800f0f4:	b14f      	cbz	r7, 800f10a <WM_ResizeWindow.part.7+0x3e>
 800f0f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0f8:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800f0fc:	2a80      	cmp	r2, #128	; 0x80
 800f0fe:	d05b      	beq.n	800f1b8 <WM_ResizeWindow.part.7+0xec>
 800f100:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f104:	4417      	add	r7, r2
 800f106:	f8ad 701c 	strh.w	r7, [sp, #28]
 800f10a:	f1b8 0f00 	cmp.w	r8, #0
 800f10e:	d00a      	beq.n	800f126 <WM_ResizeWindow.part.7+0x5a>
 800f110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f112:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800f116:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f11a:	d053      	beq.n	800f1c4 <WM_ResizeWindow.part.7+0xf8>
 800f11c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f120:	4490      	add	r8, r2
 800f122:	f8ad 801e 	strh.w	r8, [sp, #30]
 800f126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f128:	03d1      	lsls	r1, r2, #15
 800f12a:	d43f      	bmi.n	800f1ac <WM_ResizeWindow.part.7+0xe0>
 800f12c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f130:	0792      	lsls	r2, r2, #30
 800f132:	e883 0003 	stmia.w	r3, {r0, r1}
 800f136:	d50b      	bpl.n	800f150 <WM_ResizeWindow.part.7+0x84>
 800f138:	4629      	mov	r1, r5
 800f13a:	4622      	mov	r2, r4
 800f13c:	a808      	add	r0, sp, #32
 800f13e:	f008 fe6b 	bl	8017e18 <GUI_MergeRect>
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	a808      	add	r0, sp, #32
 800f146:	6999      	ldr	r1, [r3, #24]
 800f148:	6a1a      	ldr	r2, [r3, #32]
 800f14a:	f002 fb41 	bl	80117d0 <WM__InvalidateRectEx>
 800f14e:	9b03      	ldr	r3, [sp, #12]
 800f150:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800f154:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800f158:	f9bd c01e 	ldrsh.w	ip, [sp, #30]
 800f15c:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800f160:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 800f164:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800f168:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 800f16c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800f170:	ebc0 0c0c 	rsb	ip, r0, ip
 800f174:	4618      	mov	r0, r3
 800f176:	1b2b      	subs	r3, r5, r4
 800f178:	ac0a      	add	r4, sp, #40	; 0x28
 800f17a:	ebc1 010e 	rsb	r1, r1, lr
 800f17e:	f8cd c000 	str.w	ip, [sp]
 800f182:	1aba      	subs	r2, r7, r2
 800f184:	f7ff fade 	bl	800e744 <WM__UpdateChildPositions>
 800f188:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800f18c:	f101 0008 	add.w	r0, r1, #8
 800f190:	f006 fc8e 	bl	8015ab0 <GUI__IntersectRect>
 800f194:	2105      	movs	r1, #5
 800f196:	4630      	mov	r0, r6
 800f198:	f002 fb92 	bl	80118c0 <WM__SendMsgNoData>
 800f19c:	4620      	mov	r0, r4
 800f19e:	f009 fff9 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f1a2:	f007 fc5b 	bl	8016a5c <GUI_Unlock>
 800f1a6:	b00a      	add	sp, #40	; 0x28
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f001 fda1 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1b6:	e7b9      	b.n	800f12c <WM_ResizeWindow.part.7+0x60>
 800f1b8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800f1bc:	1bd7      	subs	r7, r2, r7
 800f1be:	f8ad 7018 	strh.w	r7, [sp, #24]
 800f1c2:	e7a2      	b.n	800f10a <WM_ResizeWindow.part.7+0x3e>
 800f1c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800f1c8:	ebc8 0802 	rsb	r8, r8, r2
 800f1cc:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f1d0:	e7a9      	b.n	800f126 <WM_ResizeWindow.part.7+0x5a>
 800f1d2:	bf00      	nop

0800f1d4 <_GetDialogItem>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	b089      	sub	sp, #36	; 0x24
 800f1da:	460e      	mov	r6, r1
 800f1dc:	9000      	str	r0, [sp, #0]
 800f1de:	f009 ffbd 	bl	801915c <GUI_ALLOC_h2p>
 800f1e2:	69c4      	ldr	r4, [r0, #28]
 800f1e4:	b32c      	cbz	r4, 800f232 <_GetDialogItem+0x5e>
 800f1e6:	f10d 0810 	add.w	r8, sp, #16
 800f1ea:	4645      	mov	r5, r8
 800f1ec:	f10d 0b14 	add.w	fp, sp, #20
 800f1f0:	f10d 0a18 	add.w	sl, sp, #24
 800f1f4:	f10d 091c 	add.w	r9, sp, #28
 800f1f8:	2700      	movs	r7, #0
 800f1fa:	e003      	b.n	800f204 <_GetDialogItem+0x30>
 800f1fc:	f009 ffae 	bl	801915c <GUI_ALLOC_h2p>
 800f200:	6a04      	ldr	r4, [r0, #32]
 800f202:	b1b4      	cbz	r4, 800f232 <_GetDialogItem+0x5e>
 800f204:	2315      	movs	r3, #21
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	f8c8 7000 	str.w	r7, [r8]
 800f20e:	f8cb 7000 	str.w	r7, [fp]
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	f8ca 7000 	str.w	r7, [sl]
 800f218:	f8c9 7000 	str.w	r7, [r9]
 800f21c:	f002 fb40 	bl	80118a0 <WM_SendMessage>
 800f220:	9b07      	ldr	r3, [sp, #28]
 800f222:	429e      	cmp	r6, r3
 800f224:	4620      	mov	r0, r4
 800f226:	46a8      	mov	r8, r5
 800f228:	d1e8      	bne.n	800f1fc <_GetDialogItem+0x28>
 800f22a:	4620      	mov	r0, r4
 800f22c:	b009      	add	sp, #36	; 0x24
 800f22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f232:	9800      	ldr	r0, [sp, #0]
 800f234:	f009 ff92 	bl	801915c <GUI_ALLOC_h2p>
 800f238:	69c0      	ldr	r0, [r0, #28]
 800f23a:	9003      	str	r0, [sp, #12]
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d069      	beq.n	800f314 <_GetDialogItem+0x140>
 800f240:	9803      	ldr	r0, [sp, #12]
 800f242:	2400      	movs	r4, #0
 800f244:	f009 ff8a 	bl	801915c <GUI_ALLOC_h2p>
 800f248:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f24c:	f1bb 0f00 	cmp.w	fp, #0
 800f250:	d027      	beq.n	800f2a2 <_GetDialogItem+0xce>
 800f252:	4633      	mov	r3, r6
 800f254:	af04      	add	r7, sp, #16
 800f256:	465e      	mov	r6, fp
 800f258:	463d      	mov	r5, r7
 800f25a:	f10d 0a14 	add.w	sl, sp, #20
 800f25e:	f10d 0918 	add.w	r9, sp, #24
 800f262:	f10d 081c 	add.w	r8, sp, #28
 800f266:	469b      	mov	fp, r3
 800f268:	e003      	b.n	800f272 <_GetDialogItem+0x9e>
 800f26a:	f009 ff77 	bl	801915c <GUI_ALLOC_h2p>
 800f26e:	6a06      	ldr	r6, [r0, #32]
 800f270:	b1b6      	cbz	r6, 800f2a0 <_GetDialogItem+0xcc>
 800f272:	2315      	movs	r3, #21
 800f274:	4630      	mov	r0, r6
 800f276:	4629      	mov	r1, r5
 800f278:	603c      	str	r4, [r7, #0]
 800f27a:	f8ca 4000 	str.w	r4, [sl]
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	f8c9 4000 	str.w	r4, [r9]
 800f284:	f8c8 4000 	str.w	r4, [r8]
 800f288:	f002 fb0a 	bl	80118a0 <WM_SendMessage>
 800f28c:	9b07      	ldr	r3, [sp, #28]
 800f28e:	459b      	cmp	fp, r3
 800f290:	4630      	mov	r0, r6
 800f292:	462f      	mov	r7, r5
 800f294:	d1e9      	bne.n	800f26a <_GetDialogItem+0x96>
 800f296:	46b3      	mov	fp, r6
 800f298:	4658      	mov	r0, fp
 800f29a:	b009      	add	sp, #36	; 0x24
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	465e      	mov	r6, fp
 800f2a2:	9803      	ldr	r0, [sp, #12]
 800f2a4:	f009 ff5a 	bl	801915c <GUI_ALLOC_h2p>
 800f2a8:	69c0      	ldr	r0, [r0, #28]
 800f2aa:	9002      	str	r0, [sp, #8]
 800f2ac:	b358      	cbz	r0, 800f306 <_GetDialogItem+0x132>
 800f2ae:	f009 ff55 	bl	801915c <GUI_ALLOC_h2p>
 800f2b2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f2b6:	f1bb 0f00 	cmp.w	fp, #0
 800f2ba:	d02e      	beq.n	800f31a <_GetDialogItem+0x146>
 800f2bc:	af04      	add	r7, sp, #16
 800f2be:	463d      	mov	r5, r7
 800f2c0:	f10d 0a14 	add.w	sl, sp, #20
 800f2c4:	465f      	mov	r7, fp
 800f2c6:	f10d 0918 	add.w	r9, sp, #24
 800f2ca:	f10d 081c 	add.w	r8, sp, #28
 800f2ce:	46ab      	mov	fp, r5
 800f2d0:	e003      	b.n	800f2da <_GetDialogItem+0x106>
 800f2d2:	f009 ff43 	bl	801915c <GUI_ALLOC_h2p>
 800f2d6:	6a07      	ldr	r7, [r0, #32]
 800f2d8:	b1ff      	cbz	r7, 800f31a <_GetDialogItem+0x146>
 800f2da:	2315      	movs	r3, #21
 800f2dc:	4638      	mov	r0, r7
 800f2de:	4629      	mov	r1, r5
 800f2e0:	f8cb 4000 	str.w	r4, [fp]
 800f2e4:	f8ca 4000 	str.w	r4, [sl]
 800f2e8:	9304      	str	r3, [sp, #16]
 800f2ea:	f8c9 4000 	str.w	r4, [r9]
 800f2ee:	f8c8 4000 	str.w	r4, [r8]
 800f2f2:	f002 fad5 	bl	80118a0 <WM_SendMessage>
 800f2f6:	9b07      	ldr	r3, [sp, #28]
 800f2f8:	429e      	cmp	r6, r3
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	46ab      	mov	fp, r5
 800f2fe:	d1e8      	bne.n	800f2d2 <_GetDialogItem+0xfe>
 800f300:	46bb      	mov	fp, r7
 800f302:	2f00      	cmp	r7, #0
 800f304:	d1c8      	bne.n	800f298 <_GetDialogItem+0xc4>
 800f306:	9803      	ldr	r0, [sp, #12]
 800f308:	f009 ff28 	bl	801915c <GUI_ALLOC_h2p>
 800f30c:	6a00      	ldr	r0, [r0, #32]
 800f30e:	9003      	str	r0, [sp, #12]
 800f310:	2800      	cmp	r0, #0
 800f312:	d197      	bne.n	800f244 <_GetDialogItem+0x70>
 800f314:	f04f 0b00 	mov.w	fp, #0
 800f318:	e7be      	b.n	800f298 <_GetDialogItem+0xc4>
 800f31a:	9802      	ldr	r0, [sp, #8]
 800f31c:	f009 ff1e 	bl	801915c <GUI_ALLOC_h2p>
 800f320:	69c0      	ldr	r0, [r0, #28]
 800f322:	9001      	str	r0, [sp, #4]
 800f324:	b358      	cbz	r0, 800f37e <_GetDialogItem+0x1aa>
 800f326:	f009 ff19 	bl	801915c <GUI_ALLOC_h2p>
 800f32a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f32e:	f1bb 0f00 	cmp.w	fp, #0
 800f332:	d02c      	beq.n	800f38e <_GetDialogItem+0x1ba>
 800f334:	af04      	add	r7, sp, #16
 800f336:	463d      	mov	r5, r7
 800f338:	f10d 0a14 	add.w	sl, sp, #20
 800f33c:	465f      	mov	r7, fp
 800f33e:	f10d 0918 	add.w	r9, sp, #24
 800f342:	f10d 081c 	add.w	r8, sp, #28
 800f346:	46ab      	mov	fp, r5
 800f348:	e003      	b.n	800f352 <_GetDialogItem+0x17e>
 800f34a:	f009 ff07 	bl	801915c <GUI_ALLOC_h2p>
 800f34e:	6a07      	ldr	r7, [r0, #32]
 800f350:	b1ef      	cbz	r7, 800f38e <_GetDialogItem+0x1ba>
 800f352:	2315      	movs	r3, #21
 800f354:	4638      	mov	r0, r7
 800f356:	4629      	mov	r1, r5
 800f358:	f8cb 4000 	str.w	r4, [fp]
 800f35c:	f8ca 4000 	str.w	r4, [sl]
 800f360:	9304      	str	r3, [sp, #16]
 800f362:	f8c9 4000 	str.w	r4, [r9]
 800f366:	f8c8 4000 	str.w	r4, [r8]
 800f36a:	f002 fa99 	bl	80118a0 <WM_SendMessage>
 800f36e:	9b07      	ldr	r3, [sp, #28]
 800f370:	429e      	cmp	r6, r3
 800f372:	4638      	mov	r0, r7
 800f374:	46ab      	mov	fp, r5
 800f376:	d1e8      	bne.n	800f34a <_GetDialogItem+0x176>
 800f378:	46bb      	mov	fp, r7
 800f37a:	2f00      	cmp	r7, #0
 800f37c:	d18c      	bne.n	800f298 <_GetDialogItem+0xc4>
 800f37e:	9802      	ldr	r0, [sp, #8]
 800f380:	f009 feec 	bl	801915c <GUI_ALLOC_h2p>
 800f384:	6a00      	ldr	r0, [r0, #32]
 800f386:	9002      	str	r0, [sp, #8]
 800f388:	2800      	cmp	r0, #0
 800f38a:	d190      	bne.n	800f2ae <_GetDialogItem+0xda>
 800f38c:	e7bb      	b.n	800f306 <_GetDialogItem+0x132>
 800f38e:	9801      	ldr	r0, [sp, #4]
 800f390:	f009 fee4 	bl	801915c <GUI_ALLOC_h2p>
 800f394:	69c0      	ldr	r0, [r0, #28]
 800f396:	9000      	str	r0, [sp, #0]
 800f398:	b340      	cbz	r0, 800f3ec <_GetDialogItem+0x218>
 800f39a:	f009 fedf 	bl	801915c <GUI_ALLOC_h2p>
 800f39e:	69c5      	ldr	r5, [r0, #28]
 800f3a0:	b365      	cbz	r5, 800f3fc <_GetDialogItem+0x228>
 800f3a2:	f10d 0b10 	add.w	fp, sp, #16
 800f3a6:	465f      	mov	r7, fp
 800f3a8:	f10d 0a14 	add.w	sl, sp, #20
 800f3ac:	f10d 0918 	add.w	r9, sp, #24
 800f3b0:	f10d 081c 	add.w	r8, sp, #28
 800f3b4:	e003      	b.n	800f3be <_GetDialogItem+0x1ea>
 800f3b6:	f009 fed1 	bl	801915c <GUI_ALLOC_h2p>
 800f3ba:	6a05      	ldr	r5, [r0, #32]
 800f3bc:	b1f5      	cbz	r5, 800f3fc <_GetDialogItem+0x228>
 800f3be:	2315      	movs	r3, #21
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	f8cb 4000 	str.w	r4, [fp]
 800f3c8:	f8ca 4000 	str.w	r4, [sl]
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	f8c9 4000 	str.w	r4, [r9]
 800f3d2:	f8c8 4000 	str.w	r4, [r8]
 800f3d6:	f002 fa63 	bl	80118a0 <WM_SendMessage>
 800f3da:	9b07      	ldr	r3, [sp, #28]
 800f3dc:	429e      	cmp	r6, r3
 800f3de:	4628      	mov	r0, r5
 800f3e0:	46bb      	mov	fp, r7
 800f3e2:	d1e8      	bne.n	800f3b6 <_GetDialogItem+0x1e2>
 800f3e4:	46ab      	mov	fp, r5
 800f3e6:	2d00      	cmp	r5, #0
 800f3e8:	f47f af56 	bne.w	800f298 <_GetDialogItem+0xc4>
 800f3ec:	9801      	ldr	r0, [sp, #4]
 800f3ee:	f009 feb5 	bl	801915c <GUI_ALLOC_h2p>
 800f3f2:	6a00      	ldr	r0, [r0, #32]
 800f3f4:	9001      	str	r0, [sp, #4]
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d195      	bne.n	800f326 <_GetDialogItem+0x152>
 800f3fa:	e7c0      	b.n	800f37e <_GetDialogItem+0x1aa>
 800f3fc:	9800      	ldr	r0, [sp, #0]
 800f3fe:	f009 fead 	bl	801915c <GUI_ALLOC_h2p>
 800f402:	69c7      	ldr	r7, [r0, #28]
 800f404:	b927      	cbnz	r7, 800f410 <_GetDialogItem+0x23c>
 800f406:	e00d      	b.n	800f424 <_GetDialogItem+0x250>
 800f408:	f009 fea8 	bl	801915c <GUI_ALLOC_h2p>
 800f40c:	6a07      	ldr	r7, [r0, #32]
 800f40e:	b14f      	cbz	r7, 800f424 <_GetDialogItem+0x250>
 800f410:	4638      	mov	r0, r7
 800f412:	4631      	mov	r1, r6
 800f414:	f7ff fede 	bl	800f1d4 <_GetDialogItem>
 800f418:	4605      	mov	r5, r0
 800f41a:	4638      	mov	r0, r7
 800f41c:	2d00      	cmp	r5, #0
 800f41e:	d0f3      	beq.n	800f408 <_GetDialogItem+0x234>
 800f420:	46ab      	mov	fp, r5
 800f422:	e739      	b.n	800f298 <_GetDialogItem+0xc4>
 800f424:	9800      	ldr	r0, [sp, #0]
 800f426:	f009 fe99 	bl	801915c <GUI_ALLOC_h2p>
 800f42a:	6a00      	ldr	r0, [r0, #32]
 800f42c:	9000      	str	r0, [sp, #0]
 800f42e:	2800      	cmp	r0, #0
 800f430:	d1b3      	bne.n	800f39a <_GetDialogItem+0x1c6>
 800f432:	e7db      	b.n	800f3ec <_GetDialogItem+0x218>

0800f434 <WM_SetEnableState>:
 800f434:	b530      	push	{r4, r5, lr}
 800f436:	4604      	mov	r4, r0
 800f438:	b087      	sub	sp, #28
 800f43a:	460d      	mov	r5, r1
 800f43c:	b908      	cbnz	r0, 800f442 <WM_SetEnableState+0xe>
 800f43e:	b007      	add	sp, #28
 800f440:	bd30      	pop	{r4, r5, pc}
 800f442:	f007 fb15 	bl	8016a70 <GUI_Lock>
 800f446:	4620      	mov	r0, r4
 800f448:	f009 fe92 	bl	8019170 <GUI_ALLOC_LockH>
 800f44c:	9001      	str	r0, [sp, #4]
 800f44e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f450:	b995      	cbnz	r5, 800f478 <WM_SetEnableState+0x44>
 800f452:	f043 0210 	orr.w	r2, r3, #16
 800f456:	4293      	cmp	r3, r2
 800f458:	d012      	beq.n	800f480 <WM_SetEnableState+0x4c>
 800f45a:	6282      	str	r2, [r0, #40]	; 0x28
 800f45c:	a801      	add	r0, sp, #4
 800f45e:	f009 fe99 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f462:	2328      	movs	r3, #40	; 0x28
 800f464:	4620      	mov	r0, r4
 800f466:	a902      	add	r1, sp, #8
 800f468:	9505      	str	r5, [sp, #20]
 800f46a:	9302      	str	r3, [sp, #8]
 800f46c:	f7ff f936 	bl	800e6dc <WM__SendMessage>
 800f470:	f007 faf4 	bl	8016a5c <GUI_Unlock>
 800f474:	b007      	add	sp, #28
 800f476:	bd30      	pop	{r4, r5, pc}
 800f478:	f023 0210 	bic.w	r2, r3, #16
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d1ec      	bne.n	800f45a <WM_SetEnableState+0x26>
 800f480:	a801      	add	r0, sp, #4
 800f482:	f009 fe87 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f486:	e7f3      	b.n	800f470 <WM_SetEnableState+0x3c>

0800f488 <WM_ForEachDesc>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	4606      	mov	r6, r0
 800f48c:	460d      	mov	r5, r1
 800f48e:	4614      	mov	r4, r2
 800f490:	f007 faee 	bl	8016a70 <GUI_Lock>
 800f494:	4630      	mov	r0, r6
 800f496:	4629      	mov	r1, r5
 800f498:	4622      	mov	r2, r4
 800f49a:	f7fe fff1 	bl	800e480 <WM__ForEachDesc>
 800f49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4a2:	f007 badb 	b.w	8016a5c <GUI_Unlock>
 800f4a6:	bf00      	nop

0800f4a8 <WM_GetClientRect>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	f007 fae0 	bl	8016a70 <GUI_Lock>
 800f4b0:	4b08      	ldr	r3, [pc, #32]	; (800f4d4 <WM_GetClientRect+0x2c>)
 800f4b2:	681c      	ldr	r4, [r3, #0]
 800f4b4:	b914      	cbnz	r4, 800f4bc <WM_GetClientRect+0x14>
 800f4b6:	4b08      	ldr	r3, [pc, #32]	; (800f4d8 <WM_GetClientRect+0x30>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800f4bc:	f007 fad8 	bl	8016a70 <GUI_Lock>
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7ff f9de 	bl	800e884 <WM__GetClientRectEx>
 800f4c8:	f007 fac8 	bl	8016a5c <GUI_Unlock>
 800f4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4d0:	f007 bac4 	b.w	8016a5c <GUI_Unlock>
 800f4d4:	2002bf70 	.word	0x2002bf70
 800f4d8:	2000026c 	.word	0x2000026c

0800f4dc <WM_GetClientWindow>:
 800f4dc:	b500      	push	{lr}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	a904      	add	r1, sp, #16
 800f4e2:	2317      	movs	r3, #23
 800f4e4:	f841 3d10 	str.w	r3, [r1, #-16]!
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4669      	mov	r1, sp
 800f4ec:	9303      	str	r3, [sp, #12]
 800f4ee:	f002 f9d7 	bl	80118a0 <WM_SendMessage>
 800f4f2:	9803      	ldr	r0, [sp, #12]
 800f4f4:	b005      	add	sp, #20
 800f4f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4fa:	bf00      	nop

0800f4fc <WM_GetDesktopWindow>:
 800f4fc:	4a03      	ldr	r2, [pc, #12]	; (800f50c <WM_GetDesktopWindow+0x10>)
 800f4fe:	4b04      	ldr	r3, [pc, #16]	; (800f510 <WM_GetDesktopWindow+0x14>)
 800f500:	6812      	ldr	r2, [r2, #0]
 800f502:	7c52      	ldrb	r2, [r2, #17]
 800f504:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	2000026c 	.word	0x2000026c
 800f510:	2002bf74 	.word	0x2002bf74

0800f514 <WM_BringToBottom>:
 800f514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f518:	4604      	mov	r4, r0
 800f51a:	b087      	sub	sp, #28
 800f51c:	f007 faa8 	bl	8016a70 <GUI_Lock>
 800f520:	b924      	cbnz	r4, 800f52c <WM_BringToBottom+0x18>
 800f522:	f007 fa9b 	bl	8016a5c <GUI_Unlock>
 800f526:	b007      	add	sp, #28
 800f528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f52c:	4620      	mov	r0, r4
 800f52e:	f009 fe1f 	bl	8019170 <GUI_ALLOC_LockH>
 800f532:	4603      	mov	r3, r0
 800f534:	c803      	ldmia	r0, {r0, r1}
 800f536:	ad04      	add	r5, sp, #16
 800f538:	e885 0003 	stmia.w	r5, {r0, r1}
 800f53c:	a801      	add	r0, sp, #4
 800f53e:	9301      	str	r3, [sp, #4]
 800f540:	6a1f      	ldr	r7, [r3, #32]
 800f542:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800f546:	f009 fe25 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7ff f874 	bl	800e638 <WM__GetPrevSibling>
 800f550:	4606      	mov	r6, r0
 800f552:	2800      	cmp	r0, #0
 800f554:	d0e5      	beq.n	800f522 <WM_BringToBottom+0xe>
 800f556:	f007 fa8b 	bl	8016a70 <GUI_Lock>
 800f55a:	4620      	mov	r0, r4
 800f55c:	f009 fdfe 	bl	801915c <GUI_ALLOC_h2p>
 800f560:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800f564:	f007 fa7a 	bl	8016a5c <GUI_Unlock>
 800f568:	f018 0f02 	tst.w	r8, #2
 800f56c:	d120      	bne.n	800f5b0 <WM_BringToBottom+0x9c>
 800f56e:	4620      	mov	r0, r4
 800f570:	f009 fdfe 	bl	8019170 <GUI_ALLOC_LockH>
 800f574:	9001      	str	r0, [sp, #4]
 800f576:	4648      	mov	r0, r9
 800f578:	f009 fdfa 	bl	8019170 <GUI_ALLOC_LockH>
 800f57c:	9003      	str	r0, [sp, #12]
 800f57e:	4630      	mov	r0, r6
 800f580:	f009 fdf6 	bl	8019170 <GUI_ALLOC_LockH>
 800f584:	9903      	ldr	r1, [sp, #12]
 800f586:	9a01      	ldr	r2, [sp, #4]
 800f588:	69cd      	ldr	r5, [r1, #28]
 800f58a:	6207      	str	r7, [r0, #32]
 800f58c:	4603      	mov	r3, r0
 800f58e:	6215      	str	r5, [r2, #32]
 800f590:	a801      	add	r0, sp, #4
 800f592:	61cc      	str	r4, [r1, #28]
 800f594:	9302      	str	r3, [sp, #8]
 800f596:	f009 fdfd 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f59a:	a803      	add	r0, sp, #12
 800f59c:	f009 fdfa 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f5a0:	a802      	add	r0, sp, #8
 800f5a2:	f009 fdf7 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f5a6:	f007 fa59 	bl	8016a5c <GUI_Unlock>
 800f5aa:	b007      	add	sp, #28
 800f5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	463a      	mov	r2, r7
 800f5b6:	f002 f90b 	bl	80117d0 <WM__InvalidateRectEx>
 800f5ba:	e7d8      	b.n	800f56e <WM_BringToBottom+0x5a>

0800f5bc <WM_GetDialogItem>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	4688      	mov	r8, r1
 800f5c6:	b918      	cbnz	r0, 800f5d0 <WM_GetDialogItem+0x14>
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	b007      	add	sp, #28
 800f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d0:	f007 fa4e 	bl	8016a70 <GUI_Lock>
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f009 fdcb 	bl	8019170 <GUI_ALLOC_LockH>
 800f5da:	ab06      	add	r3, sp, #24
 800f5dc:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f5e0:	f843 0d14 	str.w	r0, [r3, #-20]!
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f009 fdd5 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f5ea:	f1bb 0f00 	cmp.w	fp, #0
 800f5ee:	d04d      	beq.n	800f68c <WM_GetDialogItem+0xd0>
 800f5f0:	f10d 0908 	add.w	r9, sp, #8
 800f5f4:	464e      	mov	r6, r9
 800f5f6:	2500      	movs	r5, #0
 800f5f8:	f04f 0a15 	mov.w	sl, #21
 800f5fc:	4658      	mov	r0, fp
 800f5fe:	4631      	mov	r1, r6
 800f600:	f8c9 5000 	str.w	r5, [r9]
 800f604:	9503      	str	r5, [sp, #12]
 800f606:	9504      	str	r5, [sp, #16]
 800f608:	9505      	str	r5, [sp, #20]
 800f60a:	f8cd a008 	str.w	sl, [sp, #8]
 800f60e:	f002 f947 	bl	80118a0 <WM_SendMessage>
 800f612:	9b05      	ldr	r3, [sp, #20]
 800f614:	4598      	cmp	r8, r3
 800f616:	46b1      	mov	r9, r6
 800f618:	d03a      	beq.n	800f690 <WM_GetDialogItem+0xd4>
 800f61a:	4658      	mov	r0, fp
 800f61c:	f009 fd9e 	bl	801915c <GUI_ALLOC_h2p>
 800f620:	69c4      	ldr	r4, [r0, #28]
 800f622:	b924      	cbnz	r4, 800f62e <WM_GetDialogItem+0x72>
 800f624:	e017      	b.n	800f656 <WM_GetDialogItem+0x9a>
 800f626:	f009 fd99 	bl	801915c <GUI_ALLOC_h2p>
 800f62a:	6a04      	ldr	r4, [r0, #32]
 800f62c:	b19c      	cbz	r4, 800f656 <WM_GetDialogItem+0x9a>
 800f62e:	4620      	mov	r0, r4
 800f630:	4631      	mov	r1, r6
 800f632:	9503      	str	r5, [sp, #12]
 800f634:	9504      	str	r5, [sp, #16]
 800f636:	9505      	str	r5, [sp, #20]
 800f638:	f8cd a008 	str.w	sl, [sp, #8]
 800f63c:	f002 f930 	bl	80118a0 <WM_SendMessage>
 800f640:	9b05      	ldr	r3, [sp, #20]
 800f642:	4598      	cmp	r8, r3
 800f644:	4620      	mov	r0, r4
 800f646:	46b1      	mov	r9, r6
 800f648:	d1ed      	bne.n	800f626 <WM_GetDialogItem+0x6a>
 800f64a:	f007 fa07 	bl	8016a5c <GUI_Unlock>
 800f64e:	4620      	mov	r0, r4
 800f650:	b007      	add	sp, #28
 800f652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f656:	4658      	mov	r0, fp
 800f658:	f009 fd80 	bl	801915c <GUI_ALLOC_h2p>
 800f65c:	69c7      	ldr	r7, [r0, #28]
 800f65e:	b927      	cbnz	r7, 800f66a <WM_GetDialogItem+0xae>
 800f660:	e00c      	b.n	800f67c <WM_GetDialogItem+0xc0>
 800f662:	f009 fd7b 	bl	801915c <GUI_ALLOC_h2p>
 800f666:	6a07      	ldr	r7, [r0, #32]
 800f668:	b147      	cbz	r7, 800f67c <WM_GetDialogItem+0xc0>
 800f66a:	4638      	mov	r0, r7
 800f66c:	4641      	mov	r1, r8
 800f66e:	f7ff fdb1 	bl	800f1d4 <_GetDialogItem>
 800f672:	4604      	mov	r4, r0
 800f674:	4638      	mov	r0, r7
 800f676:	2c00      	cmp	r4, #0
 800f678:	d0f3      	beq.n	800f662 <WM_GetDialogItem+0xa6>
 800f67a:	e7e6      	b.n	800f64a <WM_GetDialogItem+0x8e>
 800f67c:	4658      	mov	r0, fp
 800f67e:	f009 fd6d 	bl	801915c <GUI_ALLOC_h2p>
 800f682:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800f686:	f1bb 0f00 	cmp.w	fp, #0
 800f68a:	d1b7      	bne.n	800f5fc <WM_GetDialogItem+0x40>
 800f68c:	2400      	movs	r4, #0
 800f68e:	e7dc      	b.n	800f64a <WM_GetDialogItem+0x8e>
 800f690:	465c      	mov	r4, fp
 800f692:	f007 f9e3 	bl	8016a5c <GUI_Unlock>
 800f696:	e7da      	b.n	800f64e <WM_GetDialogItem+0x92>

0800f698 <WM_GetFirstChild>:
 800f698:	b510      	push	{r4, lr}
 800f69a:	4604      	mov	r4, r0
 800f69c:	b138      	cbz	r0, 800f6ae <WM_GetFirstChild+0x16>
 800f69e:	f007 f9e7 	bl	8016a70 <GUI_Lock>
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f009 fd5a 	bl	801915c <GUI_ALLOC_h2p>
 800f6a8:	69c4      	ldr	r4, [r0, #28]
 800f6aa:	f007 f9d7 	bl	8016a5c <GUI_Unlock>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	bd10      	pop	{r4, pc}
 800f6b2:	bf00      	nop

0800f6b4 <WM_GetFocusedWindow>:
 800f6b4:	b510      	push	{r4, lr}
 800f6b6:	f007 f9db 	bl	8016a70 <GUI_Lock>
 800f6ba:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <WM_GetFocusedWindow+0x18>)
 800f6bc:	4b04      	ldr	r3, [pc, #16]	; (800f6d0 <WM_GetFocusedWindow+0x1c>)
 800f6be:	6812      	ldr	r2, [r2, #0]
 800f6c0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f6c4:	f007 f9ca 	bl	8016a5c <GUI_Unlock>
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	bd10      	pop	{r4, pc}
 800f6cc:	2002bf94 	.word	0x2002bf94
 800f6d0:	2002bf84 	.word	0x2002bf84

0800f6d4 <WM_GetId>:
 800f6d4:	b500      	push	{lr}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	a904      	add	r1, sp, #16
 800f6da:	2315      	movs	r3, #21
 800f6dc:	f841 3d10 	str.w	r3, [r1, #-16]!
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4669      	mov	r1, sp
 800f6e4:	9301      	str	r3, [sp, #4]
 800f6e6:	9302      	str	r3, [sp, #8]
 800f6e8:	9303      	str	r3, [sp, #12]
 800f6ea:	f002 f8d9 	bl	80118a0 <WM_SendMessage>
 800f6ee:	9803      	ldr	r0, [sp, #12]
 800f6f0:	b005      	add	sp, #20
 800f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6f6:	bf00      	nop

0800f6f8 <WM_GetInsideRectEx>:
 800f6f8:	b500      	push	{lr}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	ab04      	add	r3, sp, #16
 800f6fe:	2214      	movs	r2, #20
 800f700:	9103      	str	r1, [sp, #12]
 800f702:	4669      	mov	r1, sp
 800f704:	f843 2d10 	str.w	r2, [r3, #-16]!
 800f708:	f002 f8ca 	bl	80118a0 <WM_SendMessage>
 800f70c:	b005      	add	sp, #20
 800f70e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f712:	bf00      	nop

0800f714 <WM_GetInsideRectExScrollbar>:
 800f714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f718:	b08b      	sub	sp, #44	; 0x2c
 800f71a:	468a      	mov	sl, r1
 800f71c:	9001      	str	r0, [sp, #4]
 800f71e:	2800      	cmp	r0, #0
 800f720:	f000 80f7 	beq.w	800f912 <WM_GetInsideRectExScrollbar+0x1fe>
 800f724:	2900      	cmp	r1, #0
 800f726:	f000 80f4 	beq.w	800f912 <WM_GetInsideRectExScrollbar+0x1fe>
 800f72a:	f007 f9a1 	bl	8016a70 <GUI_Lock>
 800f72e:	9801      	ldr	r0, [sp, #4]
 800f730:	f009 fd1e 	bl	8019170 <GUI_ALLOC_LockH>
 800f734:	ab0a      	add	r3, sp, #40	; 0x28
 800f736:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f73a:	f843 0d18 	str.w	r0, [r3, #-24]!
 800f73e:	4618      	mov	r0, r3
 800f740:	9302      	str	r3, [sp, #8]
 800f742:	ac06      	add	r4, sp, #24
 800f744:	f009 fd26 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f748:	f1bb 0f00 	cmp.w	fp, #0
 800f74c:	f000 80e4 	beq.w	800f918 <WM_GetInsideRectExScrollbar+0x204>
 800f750:	ae09      	add	r6, sp, #36	; 0x24
 800f752:	4633      	mov	r3, r6
 800f754:	46a1      	mov	r9, r4
 800f756:	465e      	mov	r6, fp
 800f758:	f10d 081c 	add.w	r8, sp, #28
 800f75c:	af08      	add	r7, sp, #32
 800f75e:	2500      	movs	r5, #0
 800f760:	469b      	mov	fp, r3
 800f762:	e00e      	b.n	800f782 <WM_GetInsideRectExScrollbar+0x6e>
 800f764:	4630      	mov	r0, r6
 800f766:	21ff      	movs	r1, #255	; 0xff
 800f768:	f7ff fd34 	bl	800f1d4 <_GetDialogItem>
 800f76c:	4602      	mov	r2, r0
 800f76e:	4630      	mov	r0, r6
 800f770:	2a00      	cmp	r2, #0
 800f772:	f040 80e8 	bne.w	800f946 <WM_GetInsideRectExScrollbar+0x232>
 800f776:	f009 fcf1 	bl	801915c <GUI_ALLOC_h2p>
 800f77a:	6a06      	ldr	r6, [r0, #32]
 800f77c:	2e00      	cmp	r6, #0
 800f77e:	f000 80cb 	beq.w	800f918 <WM_GetInsideRectExScrollbar+0x204>
 800f782:	2215      	movs	r2, #21
 800f784:	4630      	mov	r0, r6
 800f786:	4649      	mov	r1, r9
 800f788:	6025      	str	r5, [r4, #0]
 800f78a:	f8c8 5000 	str.w	r5, [r8]
 800f78e:	603d      	str	r5, [r7, #0]
 800f790:	f8cb 5000 	str.w	r5, [fp]
 800f794:	9206      	str	r2, [sp, #24]
 800f796:	f002 f883 	bl	80118a0 <WM_SendMessage>
 800f79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79c:	2bff      	cmp	r3, #255	; 0xff
 800f79e:	464c      	mov	r4, r9
 800f7a0:	d1e0      	bne.n	800f764 <WM_GetInsideRectExScrollbar+0x50>
 800f7a2:	9603      	str	r6, [sp, #12]
 800f7a4:	f007 f95a 	bl	8016a5c <GUI_Unlock>
 800f7a8:	f007 f962 	bl	8016a70 <GUI_Lock>
 800f7ac:	9801      	ldr	r0, [sp, #4]
 800f7ae:	f009 fcdf 	bl	8019170 <GUI_ALLOC_LockH>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	9802      	ldr	r0, [sp, #8]
 800f7b6:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800f7ba:	9204      	str	r2, [sp, #16]
 800f7bc:	f009 fcea 	bl	8019194 <GUI_ALLOC_UnlockH>
 800f7c0:	f1bb 0f00 	cmp.w	fp, #0
 800f7c4:	f000 80ab 	beq.w	800f91e <WM_GetInsideRectExScrollbar+0x20a>
 800f7c8:	ae09      	add	r6, sp, #36	; 0x24
 800f7ca:	4633      	mov	r3, r6
 800f7cc:	f10d 081c 	add.w	r8, sp, #28
 800f7d0:	465e      	mov	r6, fp
 800f7d2:	af08      	add	r7, sp, #32
 800f7d4:	2500      	movs	r5, #0
 800f7d6:	f10d 0918 	add.w	r9, sp, #24
 800f7da:	469b      	mov	fp, r3
 800f7dc:	e00d      	b.n	800f7fa <WM_GetInsideRectExScrollbar+0xe6>
 800f7de:	4630      	mov	r0, r6
 800f7e0:	21fe      	movs	r1, #254	; 0xfe
 800f7e2:	f7ff fcf7 	bl	800f1d4 <_GetDialogItem>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	2a00      	cmp	r2, #0
 800f7ec:	d12e      	bne.n	800f84c <WM_GetInsideRectExScrollbar+0x138>
 800f7ee:	f009 fcb5 	bl	801915c <GUI_ALLOC_h2p>
 800f7f2:	6a06      	ldr	r6, [r0, #32]
 800f7f4:	2e00      	cmp	r6, #0
 800f7f6:	f000 8092 	beq.w	800f91e <WM_GetInsideRectExScrollbar+0x20a>
 800f7fa:	2315      	movs	r3, #21
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	4649      	mov	r1, r9
 800f800:	6025      	str	r5, [r4, #0]
 800f802:	f8c8 5000 	str.w	r5, [r8]
 800f806:	9306      	str	r3, [sp, #24]
 800f808:	603d      	str	r5, [r7, #0]
 800f80a:	f8cb 5000 	str.w	r5, [fp]
 800f80e:	f002 f847 	bl	80118a0 <WM_SendMessage>
 800f812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f814:	2bfe      	cmp	r3, #254	; 0xfe
 800f816:	464c      	mov	r4, r9
 800f818:	d1e1      	bne.n	800f7de <WM_GetInsideRectExScrollbar+0xca>
 800f81a:	f007 f91f 	bl	8016a5c <GUI_Unlock>
 800f81e:	f007 f927 	bl	8016a70 <GUI_Lock>
 800f822:	9801      	ldr	r0, [sp, #4]
 800f824:	f009 fc9a 	bl	801915c <GUI_ALLOC_h2p>
 800f828:	46b3      	mov	fp, r6
 800f82a:	8845      	ldrh	r5, [r0, #2]
 800f82c:	8806      	ldrh	r6, [r0, #0]
 800f82e:	f007 f915 	bl	8016a5c <GUI_Unlock>
 800f832:	2214      	movs	r2, #20
 800f834:	9b02      	ldr	r3, [sp, #8]
 800f836:	9801      	ldr	r0, [sp, #4]
 800f838:	9309      	str	r3, [sp, #36]	; 0x24
 800f83a:	4649      	mov	r1, r9
 800f83c:	9206      	str	r2, [sp, #24]
 800f83e:	f002 f82f 	bl	80118a0 <WM_SendMessage>
 800f842:	f1bb 0f00 	cmp.w	fp, #0
 800f846:	d039      	beq.n	800f8bc <WM_GetInsideRectExScrollbar+0x1a8>
 800f848:	465f      	mov	r7, fp
 800f84a:	e015      	b.n	800f878 <WM_GetInsideRectExScrollbar+0x164>
 800f84c:	9200      	str	r2, [sp, #0]
 800f84e:	f007 f905 	bl	8016a5c <GUI_Unlock>
 800f852:	f007 f90d 	bl	8016a70 <GUI_Lock>
 800f856:	9801      	ldr	r0, [sp, #4]
 800f858:	f009 fc80 	bl	801915c <GUI_ALLOC_h2p>
 800f85c:	9a00      	ldr	r2, [sp, #0]
 800f85e:	8806      	ldrh	r6, [r0, #0]
 800f860:	8845      	ldrh	r5, [r0, #2]
 800f862:	4617      	mov	r7, r2
 800f864:	f007 f8fa 	bl	8016a5c <GUI_Unlock>
 800f868:	2314      	movs	r3, #20
 800f86a:	9a02      	ldr	r2, [sp, #8]
 800f86c:	9801      	ldr	r0, [sp, #4]
 800f86e:	9209      	str	r2, [sp, #36]	; 0x24
 800f870:	4649      	mov	r1, r9
 800f872:	9306      	str	r3, [sp, #24]
 800f874:	f002 f814 	bl	80118a0 <WM_SendMessage>
 800f878:	f007 f8fa 	bl	8016a70 <GUI_Lock>
 800f87c:	4638      	mov	r0, r7
 800f87e:	f009 fc6d 	bl	801915c <GUI_ALLOC_h2p>
 800f882:	c803      	ldmia	r0, {r0, r1}
 800f884:	e889 0003 	stmia.w	r9, {r0, r1}
 800f888:	f007 f8e8 	bl	8016a5c <GUI_Unlock>
 800f88c:	b231      	sxth	r1, r6
 800f88e:	b22a      	sxth	r2, r5
 800f890:	4249      	negs	r1, r1
 800f892:	4252      	negs	r2, r2
 800f894:	4648      	mov	r0, r9
 800f896:	f008 faf1 	bl	8017e7c <GUI_MoveRect>
 800f89a:	f007 f8e9 	bl	8016a70 <GUI_Lock>
 800f89e:	4638      	mov	r0, r7
 800f8a0:	f009 fc5c 	bl	801915c <GUI_ALLOC_h2p>
 800f8a4:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800f8a6:	f007 f8d9 	bl	8016a5c <GUI_Unlock>
 800f8aa:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800f8ae:	2b82      	cmp	r3, #130	; 0x82
 800f8b0:	d104      	bne.n	800f8bc <WM_GetInsideRectExScrollbar+0x1a8>
 800f8b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f8bc:	9b03      	ldr	r3, [sp, #12]
 800f8be:	b313      	cbz	r3, 800f906 <WM_GetInsideRectExScrollbar+0x1f2>
 800f8c0:	f007 f8d6 	bl	8016a70 <GUI_Lock>
 800f8c4:	9803      	ldr	r0, [sp, #12]
 800f8c6:	f009 fc49 	bl	801915c <GUI_ALLOC_h2p>
 800f8ca:	c803      	ldmia	r0, {r0, r1}
 800f8cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800f8d0:	f007 f8c4 	bl	8016a5c <GUI_Unlock>
 800f8d4:	b231      	sxth	r1, r6
 800f8d6:	b22a      	sxth	r2, r5
 800f8d8:	4249      	negs	r1, r1
 800f8da:	4252      	negs	r2, r2
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f008 facd 	bl	8017e7c <GUI_MoveRect>
 800f8e2:	f007 f8c5 	bl	8016a70 <GUI_Lock>
 800f8e6:	9803      	ldr	r0, [sp, #12]
 800f8e8:	f009 fc38 	bl	801915c <GUI_ALLOC_h2p>
 800f8ec:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 800f8ee:	f007 f8b5 	bl	8016a5c <GUI_Unlock>
 800f8f2:	f404 7381 	and.w	r3, r4, #258	; 0x102
 800f8f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800f8fa:	d104      	bne.n	800f906 <WM_GetInsideRectExScrollbar+0x1f2>
 800f8fc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800f900:	3b01      	subs	r3, #1
 800f902:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f906:	9b02      	ldr	r3, [sp, #8]
 800f908:	cb03      	ldmia	r3!, {r0, r1}
 800f90a:	f8ca 0000 	str.w	r0, [sl]
 800f90e:	f8ca 1004 	str.w	r1, [sl, #4]
 800f912:	b00b      	add	sp, #44	; 0x2c
 800f914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f918:	2300      	movs	r3, #0
 800f91a:	9303      	str	r3, [sp, #12]
 800f91c:	e742      	b.n	800f7a4 <WM_GetInsideRectExScrollbar+0x90>
 800f91e:	f007 f89d 	bl	8016a5c <GUI_Unlock>
 800f922:	f007 f8a5 	bl	8016a70 <GUI_Lock>
 800f926:	9801      	ldr	r0, [sp, #4]
 800f928:	f009 fc18 	bl	801915c <GUI_ALLOC_h2p>
 800f92c:	8806      	ldrh	r6, [r0, #0]
 800f92e:	8845      	ldrh	r5, [r0, #2]
 800f930:	f007 f894 	bl	8016a5c <GUI_Unlock>
 800f934:	2314      	movs	r3, #20
 800f936:	9a02      	ldr	r2, [sp, #8]
 800f938:	9801      	ldr	r0, [sp, #4]
 800f93a:	9209      	str	r2, [sp, #36]	; 0x24
 800f93c:	4621      	mov	r1, r4
 800f93e:	9306      	str	r3, [sp, #24]
 800f940:	f001 ffae 	bl	80118a0 <WM_SendMessage>
 800f944:	e7ba      	b.n	800f8bc <WM_GetInsideRectExScrollbar+0x1a8>
 800f946:	9203      	str	r2, [sp, #12]
 800f948:	e72c      	b.n	800f7a4 <WM_GetInsideRectExScrollbar+0x90>
 800f94a:	bf00      	nop

0800f94c <WM_GetWindowOrgX>:
 800f94c:	b510      	push	{r4, lr}
 800f94e:	4604      	mov	r4, r0
 800f950:	b140      	cbz	r0, 800f964 <WM_GetWindowOrgX+0x18>
 800f952:	f007 f88d 	bl	8016a70 <GUI_Lock>
 800f956:	4620      	mov	r0, r4
 800f958:	f009 fc00 	bl	801915c <GUI_ALLOC_h2p>
 800f95c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f960:	f007 f87c 	bl	8016a5c <GUI_Unlock>
 800f964:	4620      	mov	r0, r4
 800f966:	bd10      	pop	{r4, pc}

0800f968 <WM_GetParent>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
 800f96c:	b138      	cbz	r0, 800f97e <WM_GetParent+0x16>
 800f96e:	f007 f87f 	bl	8016a70 <GUI_Lock>
 800f972:	4620      	mov	r0, r4
 800f974:	f009 fbf2 	bl	801915c <GUI_ALLOC_h2p>
 800f978:	6984      	ldr	r4, [r0, #24]
 800f97a:	f007 f86f 	bl	8016a5c <GUI_Unlock>
 800f97e:	4620      	mov	r0, r4
 800f980:	bd10      	pop	{r4, pc}
 800f982:	bf00      	nop

0800f984 <WM_GetScrollbarH>:
 800f984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f988:	4681      	mov	r9, r0
 800f98a:	b085      	sub	sp, #20
 800f98c:	b920      	cbnz	r0, 800f998 <WM_GetScrollbarH+0x14>
 800f98e:	4604      	mov	r4, r0
 800f990:	4620      	mov	r0, r4
 800f992:	b005      	add	sp, #20
 800f994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f998:	f007 f86a 	bl	8016a70 <GUI_Lock>
 800f99c:	4648      	mov	r0, r9
 800f99e:	f009 fbdd 	bl	801915c <GUI_ALLOC_h2p>
 800f9a2:	69c4      	ldr	r4, [r0, #28]
 800f9a4:	b1f4      	cbz	r4, 800f9e4 <WM_GetScrollbarH+0x60>
 800f9a6:	466e      	mov	r6, sp
 800f9a8:	466f      	mov	r7, sp
 800f9aa:	2500      	movs	r5, #0
 800f9ac:	f04f 0815 	mov.w	r8, #21
 800f9b0:	e003      	b.n	800f9ba <WM_GetScrollbarH+0x36>
 800f9b2:	f009 fbd3 	bl	801915c <GUI_ALLOC_h2p>
 800f9b6:	6a04      	ldr	r4, [r0, #32]
 800f9b8:	b1a4      	cbz	r4, 800f9e4 <WM_GetScrollbarH+0x60>
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	4669      	mov	r1, sp
 800f9be:	6035      	str	r5, [r6, #0]
 800f9c0:	9501      	str	r5, [sp, #4]
 800f9c2:	9502      	str	r5, [sp, #8]
 800f9c4:	9503      	str	r5, [sp, #12]
 800f9c6:	f8cd 8000 	str.w	r8, [sp]
 800f9ca:	f001 ff69 	bl	80118a0 <WM_SendMessage>
 800f9ce:	9b03      	ldr	r3, [sp, #12]
 800f9d0:	2bff      	cmp	r3, #255	; 0xff
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	463e      	mov	r6, r7
 800f9d6:	d1ec      	bne.n	800f9b2 <WM_GetScrollbarH+0x2e>
 800f9d8:	f007 f840 	bl	8016a5c <GUI_Unlock>
 800f9dc:	4620      	mov	r0, r4
 800f9de:	b005      	add	sp, #20
 800f9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9e4:	4648      	mov	r0, r9
 800f9e6:	f009 fbb9 	bl	801915c <GUI_ALLOC_h2p>
 800f9ea:	69c5      	ldr	r5, [r0, #28]
 800f9ec:	b925      	cbnz	r5, 800f9f8 <WM_GetScrollbarH+0x74>
 800f9ee:	e00c      	b.n	800fa0a <WM_GetScrollbarH+0x86>
 800f9f0:	f009 fbb4 	bl	801915c <GUI_ALLOC_h2p>
 800f9f4:	6a05      	ldr	r5, [r0, #32]
 800f9f6:	b145      	cbz	r5, 800fa0a <WM_GetScrollbarH+0x86>
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	21ff      	movs	r1, #255	; 0xff
 800f9fc:	f7ff fbea 	bl	800f1d4 <_GetDialogItem>
 800fa00:	4604      	mov	r4, r0
 800fa02:	4628      	mov	r0, r5
 800fa04:	2c00      	cmp	r4, #0
 800fa06:	d0f3      	beq.n	800f9f0 <WM_GetScrollbarH+0x6c>
 800fa08:	e7e6      	b.n	800f9d8 <WM_GetScrollbarH+0x54>
 800fa0a:	2400      	movs	r4, #0
 800fa0c:	f007 f826 	bl	8016a5c <GUI_Unlock>
 800fa10:	e7e4      	b.n	800f9dc <WM_GetScrollbarH+0x58>
 800fa12:	bf00      	nop

0800fa14 <WM_GetScrollbarV>:
 800fa14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa18:	4681      	mov	r9, r0
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	b920      	cbnz	r0, 800fa28 <WM_GetScrollbarV+0x14>
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4620      	mov	r0, r4
 800fa22:	b005      	add	sp, #20
 800fa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa28:	f007 f822 	bl	8016a70 <GUI_Lock>
 800fa2c:	4648      	mov	r0, r9
 800fa2e:	f009 fb95 	bl	801915c <GUI_ALLOC_h2p>
 800fa32:	69c4      	ldr	r4, [r0, #28]
 800fa34:	b1f4      	cbz	r4, 800fa74 <WM_GetScrollbarV+0x60>
 800fa36:	466e      	mov	r6, sp
 800fa38:	466f      	mov	r7, sp
 800fa3a:	2500      	movs	r5, #0
 800fa3c:	f04f 0815 	mov.w	r8, #21
 800fa40:	e003      	b.n	800fa4a <WM_GetScrollbarV+0x36>
 800fa42:	f009 fb8b 	bl	801915c <GUI_ALLOC_h2p>
 800fa46:	6a04      	ldr	r4, [r0, #32]
 800fa48:	b1a4      	cbz	r4, 800fa74 <WM_GetScrollbarV+0x60>
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	4669      	mov	r1, sp
 800fa4e:	6035      	str	r5, [r6, #0]
 800fa50:	9501      	str	r5, [sp, #4]
 800fa52:	9502      	str	r5, [sp, #8]
 800fa54:	9503      	str	r5, [sp, #12]
 800fa56:	f8cd 8000 	str.w	r8, [sp]
 800fa5a:	f001 ff21 	bl	80118a0 <WM_SendMessage>
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	2bfe      	cmp	r3, #254	; 0xfe
 800fa62:	4620      	mov	r0, r4
 800fa64:	463e      	mov	r6, r7
 800fa66:	d1ec      	bne.n	800fa42 <WM_GetScrollbarV+0x2e>
 800fa68:	f006 fff8 	bl	8016a5c <GUI_Unlock>
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	b005      	add	sp, #20
 800fa70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa74:	4648      	mov	r0, r9
 800fa76:	f009 fb71 	bl	801915c <GUI_ALLOC_h2p>
 800fa7a:	69c5      	ldr	r5, [r0, #28]
 800fa7c:	b925      	cbnz	r5, 800fa88 <WM_GetScrollbarV+0x74>
 800fa7e:	e00c      	b.n	800fa9a <WM_GetScrollbarV+0x86>
 800fa80:	f009 fb6c 	bl	801915c <GUI_ALLOC_h2p>
 800fa84:	6a05      	ldr	r5, [r0, #32]
 800fa86:	b145      	cbz	r5, 800fa9a <WM_GetScrollbarV+0x86>
 800fa88:	4628      	mov	r0, r5
 800fa8a:	21fe      	movs	r1, #254	; 0xfe
 800fa8c:	f7ff fba2 	bl	800f1d4 <_GetDialogItem>
 800fa90:	4604      	mov	r4, r0
 800fa92:	4628      	mov	r0, r5
 800fa94:	2c00      	cmp	r4, #0
 800fa96:	d0f3      	beq.n	800fa80 <WM_GetScrollbarV+0x6c>
 800fa98:	e7e6      	b.n	800fa68 <WM_GetScrollbarV+0x54>
 800fa9a:	2400      	movs	r4, #0
 800fa9c:	f006 ffde 	bl	8016a5c <GUI_Unlock>
 800faa0:	e7e4      	b.n	800fa6c <WM_GetScrollbarV+0x58>
 800faa2:	bf00      	nop

0800faa4 <WM_GetScrollPartner>:
 800faa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faa8:	b086      	sub	sp, #24
 800faaa:	f10d 0818 	add.w	r8, sp, #24
 800faae:	2315      	movs	r3, #21
 800fab0:	f848 3d10 	str.w	r3, [r8, #-16]!
 800fab4:	2300      	movs	r3, #0
 800fab6:	4641      	mov	r1, r8
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	9304      	str	r3, [sp, #16]
 800fabc:	9305      	str	r3, [sp, #20]
 800fabe:	4604      	mov	r4, r0
 800fac0:	f001 feee 	bl	80118a0 <WM_SendMessage>
 800fac4:	9f05      	ldr	r7, [sp, #20]
 800fac6:	2fff      	cmp	r7, #255	; 0xff
 800fac8:	d071      	beq.n	800fbae <WM_GetScrollPartner+0x10a>
 800faca:	2ffe      	cmp	r7, #254	; 0xfe
 800facc:	bf08      	it	eq
 800face:	27ff      	moveq	r7, #255	; 0xff
 800fad0:	b924      	cbnz	r4, 800fadc <WM_GetScrollPartner+0x38>
 800fad2:	2400      	movs	r4, #0
 800fad4:	4620      	mov	r0, r4
 800fad6:	b006      	add	sp, #24
 800fad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fadc:	f006 ffc8 	bl	8016a70 <GUI_Lock>
 800fae0:	4620      	mov	r0, r4
 800fae2:	f009 fb3b 	bl	801915c <GUI_ALLOC_h2p>
 800fae6:	6984      	ldr	r4, [r0, #24]
 800fae8:	f006 ffb8 	bl	8016a5c <GUI_Unlock>
 800faec:	2c00      	cmp	r4, #0
 800faee:	d0f0      	beq.n	800fad2 <WM_GetScrollPartner+0x2e>
 800faf0:	f006 ffbe 	bl	8016a70 <GUI_Lock>
 800faf4:	4620      	mov	r0, r4
 800faf6:	f009 fb3b 	bl	8019170 <GUI_ALLOC_LockH>
 800fafa:	ab06      	add	r3, sp, #24
 800fafc:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800fb00:	f843 0d14 	str.w	r0, [r3, #-20]!
 800fb04:	4618      	mov	r0, r3
 800fb06:	f009 fb45 	bl	8019194 <GUI_ALLOC_UnlockH>
 800fb0a:	f1ba 0f00 	cmp.w	sl, #0
 800fb0e:	d04c      	beq.n	800fbaa <WM_GetScrollPartner+0x106>
 800fb10:	2500      	movs	r5, #0
 800fb12:	f04f 0915 	mov.w	r9, #21
 800fb16:	4650      	mov	r0, sl
 800fb18:	a902      	add	r1, sp, #8
 800fb1a:	f8c8 5000 	str.w	r5, [r8]
 800fb1e:	9503      	str	r5, [sp, #12]
 800fb20:	9504      	str	r5, [sp, #16]
 800fb22:	9505      	str	r5, [sp, #20]
 800fb24:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb28:	f001 feba 	bl	80118a0 <WM_SendMessage>
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	429f      	cmp	r7, r3
 800fb30:	f10d 0808 	add.w	r8, sp, #8
 800fb34:	d03d      	beq.n	800fbb2 <WM_GetScrollPartner+0x10e>
 800fb36:	4650      	mov	r0, sl
 800fb38:	f009 fb10 	bl	801915c <GUI_ALLOC_h2p>
 800fb3c:	69c4      	ldr	r4, [r0, #28]
 800fb3e:	b924      	cbnz	r4, 800fb4a <WM_GetScrollPartner+0xa6>
 800fb40:	e018      	b.n	800fb74 <WM_GetScrollPartner+0xd0>
 800fb42:	f009 fb0b 	bl	801915c <GUI_ALLOC_h2p>
 800fb46:	6a04      	ldr	r4, [r0, #32]
 800fb48:	b1a4      	cbz	r4, 800fb74 <WM_GetScrollPartner+0xd0>
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	a902      	add	r1, sp, #8
 800fb4e:	9503      	str	r5, [sp, #12]
 800fb50:	9504      	str	r5, [sp, #16]
 800fb52:	9505      	str	r5, [sp, #20]
 800fb54:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb58:	f001 fea2 	bl	80118a0 <WM_SendMessage>
 800fb5c:	9b05      	ldr	r3, [sp, #20]
 800fb5e:	429f      	cmp	r7, r3
 800fb60:	4620      	mov	r0, r4
 800fb62:	f10d 0808 	add.w	r8, sp, #8
 800fb66:	d1ec      	bne.n	800fb42 <WM_GetScrollPartner+0x9e>
 800fb68:	f006 ff78 	bl	8016a5c <GUI_Unlock>
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	b006      	add	sp, #24
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	4650      	mov	r0, sl
 800fb76:	f009 faf1 	bl	801915c <GUI_ALLOC_h2p>
 800fb7a:	69c6      	ldr	r6, [r0, #28]
 800fb7c:	b926      	cbnz	r6, 800fb88 <WM_GetScrollPartner+0xe4>
 800fb7e:	e00c      	b.n	800fb9a <WM_GetScrollPartner+0xf6>
 800fb80:	f009 faec 	bl	801915c <GUI_ALLOC_h2p>
 800fb84:	6a06      	ldr	r6, [r0, #32]
 800fb86:	b146      	cbz	r6, 800fb9a <WM_GetScrollPartner+0xf6>
 800fb88:	4630      	mov	r0, r6
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7ff fb22 	bl	800f1d4 <_GetDialogItem>
 800fb90:	4604      	mov	r4, r0
 800fb92:	4630      	mov	r0, r6
 800fb94:	2c00      	cmp	r4, #0
 800fb96:	d0f3      	beq.n	800fb80 <WM_GetScrollPartner+0xdc>
 800fb98:	e7e6      	b.n	800fb68 <WM_GetScrollPartner+0xc4>
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	f009 fade 	bl	801915c <GUI_ALLOC_h2p>
 800fba0:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800fba4:	f1ba 0f00 	cmp.w	sl, #0
 800fba8:	d1b5      	bne.n	800fb16 <WM_GetScrollPartner+0x72>
 800fbaa:	2400      	movs	r4, #0
 800fbac:	e7dc      	b.n	800fb68 <WM_GetScrollPartner+0xc4>
 800fbae:	27fe      	movs	r7, #254	; 0xfe
 800fbb0:	e78e      	b.n	800fad0 <WM_GetScrollPartner+0x2c>
 800fbb2:	4654      	mov	r4, sl
 800fbb4:	f006 ff52 	bl	8016a5c <GUI_Unlock>
 800fbb8:	e7d8      	b.n	800fb6c <WM_GetScrollPartner+0xc8>
 800fbba:	bf00      	nop

0800fbbc <WM_GetScrollState>:
 800fbbc:	b500      	push	{lr}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	2323      	movs	r3, #35	; 0x23
 800fbc2:	9103      	str	r1, [sp, #12]
 800fbc4:	4669      	mov	r1, sp
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	f001 fe6a 	bl	80118a0 <WM_SendMessage>
 800fbcc:	b005      	add	sp, #20
 800fbce:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbd2:	bf00      	nop

0800fbd4 <WM_GetWindowRectEx>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	460c      	mov	r4, r1
 800fbda:	b168      	cbz	r0, 800fbf8 <WM_GetWindowRectEx+0x24>
 800fbdc:	b161      	cbz	r1, 800fbf8 <WM_GetWindowRectEx+0x24>
 800fbde:	f006 ff47 	bl	8016a70 <GUI_Lock>
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f009 faba 	bl	801915c <GUI_ALLOC_h2p>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	cb03      	ldmia	r3!, {r0, r1}
 800fbec:	6020      	str	r0, [r4, #0]
 800fbee:	6061      	str	r1, [r4, #4]
 800fbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf4:	f006 bf32 	b.w	8016a5c <GUI_Unlock>
 800fbf8:	bd38      	pop	{r3, r4, r5, pc}
 800fbfa:	bf00      	nop

0800fbfc <WM_HasCaptured>:
 800fbfc:	4a04      	ldr	r2, [pc, #16]	; (800fc10 <WM_HasCaptured+0x14>)
 800fbfe:	4b05      	ldr	r3, [pc, #20]	; (800fc14 <WM_HasCaptured+0x18>)
 800fc00:	6812      	ldr	r2, [r2, #0]
 800fc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc06:	1a1b      	subs	r3, r3, r0
 800fc08:	4258      	negs	r0, r3
 800fc0a:	4158      	adcs	r0, r3
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	2002bf94 	.word	0x2002bf94
 800fc14:	2002bfb8 	.word	0x2002bfb8

0800fc18 <WM_HasFocus>:
 800fc18:	4a04      	ldr	r2, [pc, #16]	; (800fc2c <WM_HasFocus+0x14>)
 800fc1a:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <WM_HasFocus+0x18>)
 800fc1c:	6812      	ldr	r2, [r2, #0]
 800fc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc22:	1a1b      	subs	r3, r3, r0
 800fc24:	4258      	negs	r0, r3
 800fc26:	4158      	adcs	r0, r3
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	2002bf94 	.word	0x2002bf94
 800fc30:	2002bf84 	.word	0x2002bf84

0800fc34 <WM_IsFocusable>:
 800fc34:	b530      	push	{r4, r5, lr}
 800fc36:	4604      	mov	r4, r0
 800fc38:	b085      	sub	sp, #20
 800fc3a:	b910      	cbnz	r0, 800fc42 <WM_IsFocusable+0xe>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	b005      	add	sp, #20
 800fc40:	bd30      	pop	{r4, r5, pc}
 800fc42:	f006 ff15 	bl	8016a70 <GUI_Lock>
 800fc46:	4620      	mov	r0, r4
 800fc48:	f009 fa88 	bl	801915c <GUI_ALLOC_h2p>
 800fc4c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800fc4e:	f006 ff05 	bl	8016a5c <GUI_Unlock>
 800fc52:	07ab      	lsls	r3, r5, #30
 800fc54:	d5f2      	bpl.n	800fc3c <WM_IsFocusable+0x8>
 800fc56:	f015 0510 	ands.w	r5, r5, #16
 800fc5a:	d1ef      	bne.n	800fc3c <WM_IsFocusable+0x8>
 800fc5c:	a904      	add	r1, sp, #16
 800fc5e:	231f      	movs	r3, #31
 800fc60:	f841 3d10 	str.w	r3, [r1, #-16]!
 800fc64:	4620      	mov	r0, r4
 800fc66:	4669      	mov	r1, sp
 800fc68:	9503      	str	r5, [sp, #12]
 800fc6a:	f001 fe19 	bl	80118a0 <WM_SendMessage>
 800fc6e:	9803      	ldr	r0, [sp, #12]
 800fc70:	e7e5      	b.n	800fc3e <WM_IsFocusable+0xa>
 800fc72:	bf00      	nop

0800fc74 <WM_IsWindow>:
 800fc74:	b510      	push	{r4, lr}
 800fc76:	4604      	mov	r4, r0
 800fc78:	f006 fefa 	bl	8016a70 <GUI_Lock>
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f001 f823 	bl	8010cc8 <WM__IsWindow>
 800fc82:	4604      	mov	r4, r0
 800fc84:	f006 feea 	bl	8016a5c <GUI_Unlock>
 800fc88:	4620      	mov	r0, r4
 800fc8a:	bd10      	pop	{r4, pc}

0800fc8c <WM_NotifyParent>:
 800fc8c:	b530      	push	{r4, r5, lr}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	4604      	mov	r4, r0
 800fc92:	2326      	movs	r3, #38	; 0x26
 800fc94:	9103      	str	r1, [sp, #12]
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	f006 feea 	bl	8016a70 <GUI_Lock>
 800fc9c:	b91c      	cbnz	r4, 800fca6 <WM_NotifyParent+0x1a>
 800fc9e:	f006 fedd 	bl	8016a5c <GUI_Unlock>
 800fca2:	b005      	add	sp, #20
 800fca4:	bd30      	pop	{r4, r5, pc}
 800fca6:	f006 fee3 	bl	8016a70 <GUI_Lock>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f009 fa56 	bl	801915c <GUI_ALLOC_h2p>
 800fcb0:	6985      	ldr	r5, [r0, #24]
 800fcb2:	f006 fed3 	bl	8016a5c <GUI_Unlock>
 800fcb6:	2d00      	cmp	r5, #0
 800fcb8:	d0f1      	beq.n	800fc9e <WM_NotifyParent+0x12>
 800fcba:	4628      	mov	r0, r5
 800fcbc:	4669      	mov	r1, sp
 800fcbe:	9402      	str	r4, [sp, #8]
 800fcc0:	f7fe fd0c 	bl	800e6dc <WM__SendMessage>
 800fcc4:	f006 feca 	bl	8016a5c <GUI_Unlock>
 800fcc8:	b005      	add	sp, #20
 800fcca:	bd30      	pop	{r4, r5, pc}

0800fccc <WM_OnKey>:
 800fccc:	b530      	push	{r4, r5, lr}
 800fcce:	b087      	sub	sp, #28
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	f006 fecc 	bl	8016a70 <GUI_Lock>
 800fcd8:	4a0d      	ldr	r2, [pc, #52]	; (800fd10 <WM_OnKey+0x44>)
 800fcda:	4b0e      	ldr	r3, [pc, #56]	; (800fd14 <WM_OnKey+0x48>)
 800fcdc:	6812      	ldr	r2, [r2, #0]
 800fcde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fce2:	b928      	cbnz	r0, 800fcf0 <WM_OnKey+0x24>
 800fce4:	4604      	mov	r4, r0
 800fce6:	f006 feb9 	bl	8016a5c <GUI_Unlock>
 800fcea:	4620      	mov	r0, r4
 800fcec:	b007      	add	sp, #28
 800fcee:	bd30      	pop	{r4, r5, pc}
 800fcf0:	230e      	movs	r3, #14
 800fcf2:	a902      	add	r1, sp, #8
 800fcf4:	9302      	str	r3, [sp, #8]
 800fcf6:	ab00      	add	r3, sp, #0
 800fcf8:	9401      	str	r4, [sp, #4]
 800fcfa:	9305      	str	r3, [sp, #20]
 800fcfc:	9500      	str	r5, [sp, #0]
 800fcfe:	f7fe fced 	bl	800e6dc <WM__SendMessage>
 800fd02:	f006 feab 	bl	8016a5c <GUI_Unlock>
 800fd06:	2401      	movs	r4, #1
 800fd08:	4620      	mov	r0, r4
 800fd0a:	b007      	add	sp, #28
 800fd0c:	bd30      	pop	{r4, r5, pc}
 800fd0e:	bf00      	nop
 800fd10:	2002bf94 	.word	0x2002bf94
 800fd14:	2002bf84 	.word	0x2002bf84

0800fd18 <WM_ResizeWindow>:
 800fd18:	b410      	push	{r4}
 800fd1a:	ea51 0402 	orrs.w	r4, r1, r2
 800fd1e:	d000      	beq.n	800fd22 <WM_ResizeWindow+0xa>
 800fd20:	b910      	cbnz	r0, 800fd28 <WM_ResizeWindow+0x10>
 800fd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd2c:	f7ff b9ce 	b.w	800f0cc <WM_ResizeWindow.part.7>

0800fd30 <WM_SendMessageNoPara>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	4605      	mov	r5, r0
 800fd34:	460c      	mov	r4, r1
 800fd36:	f006 fe9b 	bl	8016a70 <GUI_Lock>
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	f7fe fceb 	bl	800e718 <WM__SendMessageNoPara>
 800fd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd46:	f006 be89 	b.w	8016a5c <GUI_Unlock>
 800fd4a:	bf00      	nop

0800fd4c <WM_SendToParent>:
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	460c      	mov	r4, r1
 800fd50:	4605      	mov	r5, r0
 800fd52:	b1c9      	cbz	r1, 800fd88 <WM_SendToParent+0x3c>
 800fd54:	f006 fe8c 	bl	8016a70 <GUI_Lock>
 800fd58:	b91d      	cbnz	r5, 800fd62 <WM_SendToParent+0x16>
 800fd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd5e:	f006 be7d 	b.w	8016a5c <GUI_Unlock>
 800fd62:	f006 fe85 	bl	8016a70 <GUI_Lock>
 800fd66:	4628      	mov	r0, r5
 800fd68:	f009 f9f8 	bl	801915c <GUI_ALLOC_h2p>
 800fd6c:	6986      	ldr	r6, [r0, #24]
 800fd6e:	f006 fe75 	bl	8016a5c <GUI_Unlock>
 800fd72:	2e00      	cmp	r6, #0
 800fd74:	d0f1      	beq.n	800fd5a <WM_SendToParent+0xe>
 800fd76:	60a5      	str	r5, [r4, #8]
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	f7fe fcae 	bl	800e6dc <WM__SendMessage>
 800fd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd84:	f006 be6a 	b.w	8016a5c <GUI_Unlock>
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
 800fd8a:	bf00      	nop

0800fd8c <WM_SetFocus>:
 800fd8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd90:	b087      	sub	sp, #28
 800fd92:	2500      	movs	r5, #0
 800fd94:	4604      	mov	r4, r0
 800fd96:	9502      	str	r5, [sp, #8]
 800fd98:	9503      	str	r5, [sp, #12]
 800fd9a:	9504      	str	r5, [sp, #16]
 800fd9c:	9505      	str	r5, [sp, #20]
 800fd9e:	f006 fe67 	bl	8016a70 <GUI_Lock>
 800fda2:	2c00      	cmp	r4, #0
 800fda4:	d050      	beq.n	800fe48 <WM_SetFocus+0xbc>
 800fda6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800fe60 <WM_SetFocus+0xd4>
 800fdaa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800fe64 <WM_SetFocus+0xd8>
 800fdae:	f8d9 3000 	ldr.w	r3, [r9]
 800fdb2:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800fdb6:	42a0      	cmp	r0, r4
 800fdb8:	d046      	beq.n	800fe48 <WM_SetFocus+0xbc>
 800fdba:	231e      	movs	r3, #30
 800fdbc:	e88d 0011 	stmia.w	sp, {r0, r4}
 800fdc0:	9505      	str	r5, [sp, #20]
 800fdc2:	9302      	str	r3, [sp, #8]
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d145      	bne.n	800fe56 <WM_SetFocus+0xca>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	4620      	mov	r0, r4
 800fdce:	4639      	mov	r1, r7
 800fdd0:	9305      	str	r3, [sp, #20]
 800fdd2:	f7fe fc83 	bl	800e6dc <WM__SendMessage>
 800fdd6:	9e05      	ldr	r6, [sp, #20]
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	d136      	bne.n	800fe4a <WM_SetFocus+0xbe>
 800fddc:	f8d9 3000 	ldr.w	r3, [r9]
 800fde0:	2520      	movs	r5, #32
 800fde2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
 800fde6:	e004      	b.n	800fdf2 <WM_SetFocus+0x66>
 800fde8:	ab00      	add	r3, sp, #0
 800fdea:	9502      	str	r5, [sp, #8]
 800fdec:	9305      	str	r3, [sp, #20]
 800fdee:	f7fe fc75 	bl	800e6dc <WM__SendMessage>
 800fdf2:	f006 fe3d 	bl	8016a70 <GUI_Lock>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f009 f9b0 	bl	801915c <GUI_ALLOC_h2p>
 800fdfc:	6984      	ldr	r4, [r0, #24]
 800fdfe:	f006 fe2d 	bl	8016a5c <GUI_Unlock>
 800fe02:	4620      	mov	r0, r4
 800fe04:	4639      	mov	r1, r7
 800fe06:	2c00      	cmp	r4, #0
 800fe08:	d1ee      	bne.n	800fde8 <WM_SetFocus+0x5c>
 800fe0a:	9c00      	ldr	r4, [sp, #0]
 800fe0c:	f006 fe30 	bl	8016a70 <GUI_Lock>
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 ff59 	bl	8010cc8 <WM__IsWindow>
 800fe16:	4605      	mov	r5, r0
 800fe18:	f006 fe20 	bl	8016a5c <GUI_Unlock>
 800fe1c:	b1ad      	cbz	r5, 800fe4a <WM_SetFocus+0xbe>
 800fe1e:	b1a4      	cbz	r4, 800fe4a <WM_SetFocus+0xbe>
 800fe20:	2520      	movs	r5, #32
 800fe22:	e004      	b.n	800fe2e <WM_SetFocus+0xa2>
 800fe24:	ab00      	add	r3, sp, #0
 800fe26:	9502      	str	r5, [sp, #8]
 800fe28:	9305      	str	r3, [sp, #20]
 800fe2a:	f7fe fc57 	bl	800e6dc <WM__SendMessage>
 800fe2e:	f006 fe1f 	bl	8016a70 <GUI_Lock>
 800fe32:	4620      	mov	r0, r4
 800fe34:	f009 f992 	bl	801915c <GUI_ALLOC_h2p>
 800fe38:	6984      	ldr	r4, [r0, #24]
 800fe3a:	f006 fe0f 	bl	8016a5c <GUI_Unlock>
 800fe3e:	4620      	mov	r0, r4
 800fe40:	4639      	mov	r1, r7
 800fe42:	2c00      	cmp	r4, #0
 800fe44:	d1ee      	bne.n	800fe24 <WM_SetFocus+0x98>
 800fe46:	e000      	b.n	800fe4a <WM_SetFocus+0xbe>
 800fe48:	2601      	movs	r6, #1
 800fe4a:	f006 fe07 	bl	8016a5c <GUI_Unlock>
 800fe4e:	4630      	mov	r0, r6
 800fe50:	b007      	add	sp, #28
 800fe52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe56:	4639      	mov	r1, r7
 800fe58:	f7fe fc40 	bl	800e6dc <WM__SendMessage>
 800fe5c:	e7b5      	b.n	800fdca <WM_SetFocus+0x3e>
 800fe5e:	bf00      	nop
 800fe60:	2002bf94 	.word	0x2002bf94
 800fe64:	2002bf84 	.word	0x2002bf84

0800fe68 <WM_SetScrollState>:
 800fe68:	b500      	push	{lr}
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	b085      	sub	sp, #20
 800fe6e:	b130      	cbz	r0, 800fe7e <WM_SetScrollState+0x16>
 800fe70:	b129      	cbz	r1, 800fe7e <WM_SetScrollState+0x16>
 800fe72:	2224      	movs	r2, #36	; 0x24
 800fe74:	4669      	mov	r1, sp
 800fe76:	9303      	str	r3, [sp, #12]
 800fe78:	9200      	str	r2, [sp, #0]
 800fe7a:	f001 fd11 	bl	80118a0 <WM_SendMessage>
 800fe7e:	b005      	add	sp, #20
 800fe80:	f85d fb04 	ldr.w	pc, [sp], #4

0800fe84 <WM_SetSize>:
 800fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe86:	4604      	mov	r4, r0
 800fe88:	b083      	sub	sp, #12
 800fe8a:	460d      	mov	r5, r1
 800fe8c:	4616      	mov	r6, r2
 800fe8e:	b908      	cbnz	r0, 800fe94 <WM_SetSize+0x10>
 800fe90:	b003      	add	sp, #12
 800fe92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe94:	f006 fdec 	bl	8016a70 <GUI_Lock>
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f009 f969 	bl	8019170 <GUI_ALLOC_LockH>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	a802      	add	r0, sp, #8
 800fea2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fea6:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 800feaa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800feae:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 800feb2:	f840 3d04 	str.w	r3, [r0, #-4]!
 800feb6:	ebc2 020e 	rsb	r2, r2, lr
 800feba:	1a7b      	subs	r3, r7, r1
 800febc:	43db      	mvns	r3, r3
 800febe:	43d2      	mvns	r2, r2
 800fec0:	4415      	add	r5, r2
 800fec2:	441e      	add	r6, r3
 800fec4:	f009 f966 	bl	8019194 <GUI_ALLOC_UnlockH>
 800fec8:	ea56 0305 	orrs.w	r3, r6, r5
 800fecc:	d103      	bne.n	800fed6 <WM_SetSize+0x52>
 800fece:	f006 fdc5 	bl	8016a5c <GUI_Unlock>
 800fed2:	b003      	add	sp, #12
 800fed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed6:	4620      	mov	r0, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	4632      	mov	r2, r6
 800fedc:	f7ff f8f6 	bl	800f0cc <WM_ResizeWindow.part.7>
 800fee0:	e7f5      	b.n	800fece <WM_SetSize+0x4a>
 800fee2:	bf00      	nop

0800fee4 <WM_SetUserClipRect>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4605      	mov	r5, r0
 800fee8:	f006 fdc2 	bl	8016a70 <GUI_Lock>
 800feec:	4b04      	ldr	r3, [pc, #16]	; (800ff00 <WM_SetUserClipRect+0x1c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800fef2:	645d      	str	r5, [r3, #68]	; 0x44
 800fef4:	f000 fdc8 	bl	8010a88 <WM__ActivateClipRect>
 800fef8:	f006 fdb0 	bl	8016a5c <GUI_Unlock>
 800fefc:	4620      	mov	r0, r4
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	2000026c 	.word	0x2000026c

0800ff04 <WM_SetWindowPos>:
 800ff04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff08:	4604      	mov	r4, r0
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	460e      	mov	r6, r1
 800ff0e:	4615      	mov	r5, r2
 800ff10:	4698      	mov	r8, r3
 800ff12:	b938      	cbnz	r0, 800ff24 <WM_SetWindowPos+0x20>
 800ff14:	4620      	mov	r0, r4
 800ff16:	4631      	mov	r1, r6
 800ff18:	462a      	mov	r2, r5
 800ff1a:	f7ff f8b7 	bl	800f08c <WM_MoveTo>
 800ff1e:	b003      	add	sp, #12
 800ff20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff24:	f006 fda4 	bl	8016a70 <GUI_Lock>
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f009 f921 	bl	8019170 <GUI_ALLOC_LockH>
 800ff2e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ff32:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800ff36:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ff3a:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800ff3e:	af02      	add	r7, sp, #8
 800ff40:	1acb      	subs	r3, r1, r3
 800ff42:	43db      	mvns	r3, r3
 800ff44:	f847 0d04 	str.w	r0, [r7, #-4]!
 800ff48:	ebc2 0909 	rsb	r9, r2, r9
 800ff4c:	4498      	add	r8, r3
 800ff4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff50:	ea6f 0909 	mvn.w	r9, r9
 800ff54:	4499      	add	r9, r3
 800ff56:	4638      	mov	r0, r7
 800ff58:	f009 f91c 	bl	8019194 <GUI_ALLOC_UnlockH>
 800ff5c:	ea58 0309 	orrs.w	r3, r8, r9
 800ff60:	d102      	bne.n	800ff68 <WM_SetWindowPos+0x64>
 800ff62:	f006 fd7b 	bl	8016a5c <GUI_Unlock>
 800ff66:	e7d5      	b.n	800ff14 <WM_SetWindowPos+0x10>
 800ff68:	4641      	mov	r1, r8
 800ff6a:	464a      	mov	r2, r9
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7ff f8ad 	bl	800f0cc <WM_ResizeWindow.part.7>
 800ff72:	e7f6      	b.n	800ff62 <WM_SetWindowPos+0x5e>

0800ff74 <WM_InvalidateWindowAndDescs>:
 800ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff78:	4604      	mov	r4, r0
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	f006 fd78 	bl	8016a70 <GUI_Lock>
 800ff80:	b924      	cbnz	r4, 800ff8c <WM_InvalidateWindowAndDescs+0x18>
 800ff82:	b003      	add	sp, #12
 800ff84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff88:	f006 bd68 	b.w	8016a5c <GUI_Unlock>
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f001 fd79 	bl	8011a84 <WM_InvalidateWindow>
 800ff92:	f006 fd6d 	bl	8016a70 <GUI_Lock>
 800ff96:	4620      	mov	r0, r4
 800ff98:	f009 f8e0 	bl	801915c <GUI_ALLOC_h2p>
 800ff9c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800ffa0:	f006 fd5c 	bl	8016a5c <GUI_Unlock>
 800ffa4:	f1b8 0f00 	cmp.w	r8, #0
 800ffa8:	d0eb      	beq.n	800ff82 <WM_InvalidateWindowAndDescs+0xe>
 800ffaa:	f006 fd61 	bl	8016a70 <GUI_Lock>
 800ffae:	4640      	mov	r0, r8
 800ffb0:	f001 fd68 	bl	8011a84 <WM_InvalidateWindow>
 800ffb4:	f006 fd5c 	bl	8016a70 <GUI_Lock>
 800ffb8:	4640      	mov	r0, r8
 800ffba:	f009 f8cf 	bl	801915c <GUI_ALLOC_h2p>
 800ffbe:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800ffc2:	f006 fd4b 	bl	8016a5c <GUI_Unlock>
 800ffc6:	f1b9 0f00 	cmp.w	r9, #0
 800ffca:	f000 80b8 	beq.w	801013e <WM_InvalidateWindowAndDescs+0x1ca>
 800ffce:	f006 fd4f 	bl	8016a70 <GUI_Lock>
 800ffd2:	4648      	mov	r0, r9
 800ffd4:	f001 fd56 	bl	8011a84 <WM_InvalidateWindow>
 800ffd8:	f006 fd4a 	bl	8016a70 <GUI_Lock>
 800ffdc:	4648      	mov	r0, r9
 800ffde:	f009 f8bd 	bl	801915c <GUI_ALLOC_h2p>
 800ffe2:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800ffe6:	f006 fd39 	bl	8016a5c <GUI_Unlock>
 800ffea:	f1ba 0f00 	cmp.w	sl, #0
 800ffee:	f000 809b 	beq.w	8010128 <WM_InvalidateWindowAndDescs+0x1b4>
 800fff2:	f006 fd3d 	bl	8016a70 <GUI_Lock>
 800fff6:	4650      	mov	r0, sl
 800fff8:	f001 fd44 	bl	8011a84 <WM_InvalidateWindow>
 800fffc:	f006 fd38 	bl	8016a70 <GUI_Lock>
 8010000:	4650      	mov	r0, sl
 8010002:	f009 f8ab 	bl	801915c <GUI_ALLOC_h2p>
 8010006:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801000a:	f006 fd27 	bl	8016a5c <GUI_Unlock>
 801000e:	f1bb 0f00 	cmp.w	fp, #0
 8010012:	d07e      	beq.n	8010112 <WM_InvalidateWindowAndDescs+0x19e>
 8010014:	f006 fd2c 	bl	8016a70 <GUI_Lock>
 8010018:	4658      	mov	r0, fp
 801001a:	f001 fd33 	bl	8011a84 <WM_InvalidateWindow>
 801001e:	f006 fd27 	bl	8016a70 <GUI_Lock>
 8010022:	4658      	mov	r0, fp
 8010024:	f009 f89a 	bl	801915c <GUI_ALLOC_h2p>
 8010028:	69c0      	ldr	r0, [r0, #28]
 801002a:	9001      	str	r0, [sp, #4]
 801002c:	f006 fd16 	bl	8016a5c <GUI_Unlock>
 8010030:	9b01      	ldr	r3, [sp, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d063      	beq.n	80100fe <WM_InvalidateWindowAndDescs+0x18a>
 8010036:	f006 fd1b 	bl	8016a70 <GUI_Lock>
 801003a:	9801      	ldr	r0, [sp, #4]
 801003c:	f001 fd22 	bl	8011a84 <WM_InvalidateWindow>
 8010040:	f006 fd16 	bl	8016a70 <GUI_Lock>
 8010044:	9801      	ldr	r0, [sp, #4]
 8010046:	f009 f889 	bl	801915c <GUI_ALLOC_h2p>
 801004a:	69c6      	ldr	r6, [r0, #28]
 801004c:	f006 fd06 	bl	8016a5c <GUI_Unlock>
 8010050:	2e00      	cmp	r6, #0
 8010052:	d04b      	beq.n	80100ec <WM_InvalidateWindowAndDescs+0x178>
 8010054:	f006 fd0c 	bl	8016a70 <GUI_Lock>
 8010058:	4630      	mov	r0, r6
 801005a:	f001 fd13 	bl	8011a84 <WM_InvalidateWindow>
 801005e:	f006 fd07 	bl	8016a70 <GUI_Lock>
 8010062:	4630      	mov	r0, r6
 8010064:	f009 f87a 	bl	801915c <GUI_ALLOC_h2p>
 8010068:	69c5      	ldr	r5, [r0, #28]
 801006a:	f006 fcf7 	bl	8016a5c <GUI_Unlock>
 801006e:	2d00      	cmp	r5, #0
 8010070:	d034      	beq.n	80100dc <WM_InvalidateWindowAndDescs+0x168>
 8010072:	f006 fcfd 	bl	8016a70 <GUI_Lock>
 8010076:	4628      	mov	r0, r5
 8010078:	f001 fd04 	bl	8011a84 <WM_InvalidateWindow>
 801007c:	f006 fcf8 	bl	8016a70 <GUI_Lock>
 8010080:	4628      	mov	r0, r5
 8010082:	f009 f86b 	bl	801915c <GUI_ALLOC_h2p>
 8010086:	69c4      	ldr	r4, [r0, #28]
 8010088:	f006 fce8 	bl	8016a5c <GUI_Unlock>
 801008c:	b1f4      	cbz	r4, 80100cc <WM_InvalidateWindowAndDescs+0x158>
 801008e:	f006 fcef 	bl	8016a70 <GUI_Lock>
 8010092:	4620      	mov	r0, r4
 8010094:	f001 fcf6 	bl	8011a84 <WM_InvalidateWindow>
 8010098:	f006 fcea 	bl	8016a70 <GUI_Lock>
 801009c:	4620      	mov	r0, r4
 801009e:	f009 f85d 	bl	801915c <GUI_ALLOC_h2p>
 80100a2:	69c7      	ldr	r7, [r0, #28]
 80100a4:	f006 fcda 	bl	8016a5c <GUI_Unlock>
 80100a8:	b147      	cbz	r7, 80100bc <WM_InvalidateWindowAndDescs+0x148>
 80100aa:	4638      	mov	r0, r7
 80100ac:	f7ff ff62 	bl	800ff74 <WM_InvalidateWindowAndDescs>
 80100b0:	4638      	mov	r0, r7
 80100b2:	f009 f853 	bl	801915c <GUI_ALLOC_h2p>
 80100b6:	6a07      	ldr	r7, [r0, #32]
 80100b8:	2f00      	cmp	r7, #0
 80100ba:	d1f6      	bne.n	80100aa <WM_InvalidateWindowAndDescs+0x136>
 80100bc:	f006 fcce 	bl	8016a5c <GUI_Unlock>
 80100c0:	4620      	mov	r0, r4
 80100c2:	f009 f84b 	bl	801915c <GUI_ALLOC_h2p>
 80100c6:	6a04      	ldr	r4, [r0, #32]
 80100c8:	2c00      	cmp	r4, #0
 80100ca:	d1e0      	bne.n	801008e <WM_InvalidateWindowAndDescs+0x11a>
 80100cc:	f006 fcc6 	bl	8016a5c <GUI_Unlock>
 80100d0:	4628      	mov	r0, r5
 80100d2:	f009 f843 	bl	801915c <GUI_ALLOC_h2p>
 80100d6:	6a05      	ldr	r5, [r0, #32]
 80100d8:	2d00      	cmp	r5, #0
 80100da:	d1ca      	bne.n	8010072 <WM_InvalidateWindowAndDescs+0xfe>
 80100dc:	f006 fcbe 	bl	8016a5c <GUI_Unlock>
 80100e0:	4630      	mov	r0, r6
 80100e2:	f009 f83b 	bl	801915c <GUI_ALLOC_h2p>
 80100e6:	6a06      	ldr	r6, [r0, #32]
 80100e8:	2e00      	cmp	r6, #0
 80100ea:	d1b3      	bne.n	8010054 <WM_InvalidateWindowAndDescs+0xe0>
 80100ec:	f006 fcb6 	bl	8016a5c <GUI_Unlock>
 80100f0:	9801      	ldr	r0, [sp, #4]
 80100f2:	f009 f833 	bl	801915c <GUI_ALLOC_h2p>
 80100f6:	6a00      	ldr	r0, [r0, #32]
 80100f8:	9001      	str	r0, [sp, #4]
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d19b      	bne.n	8010036 <WM_InvalidateWindowAndDescs+0xc2>
 80100fe:	f006 fcad 	bl	8016a5c <GUI_Unlock>
 8010102:	4658      	mov	r0, fp
 8010104:	f009 f82a 	bl	801915c <GUI_ALLOC_h2p>
 8010108:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801010c:	f1bb 0f00 	cmp.w	fp, #0
 8010110:	d180      	bne.n	8010014 <WM_InvalidateWindowAndDescs+0xa0>
 8010112:	f006 fca3 	bl	8016a5c <GUI_Unlock>
 8010116:	4650      	mov	r0, sl
 8010118:	f009 f820 	bl	801915c <GUI_ALLOC_h2p>
 801011c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8010120:	f1ba 0f00 	cmp.w	sl, #0
 8010124:	f47f af65 	bne.w	800fff2 <WM_InvalidateWindowAndDescs+0x7e>
 8010128:	f006 fc98 	bl	8016a5c <GUI_Unlock>
 801012c:	4648      	mov	r0, r9
 801012e:	f009 f815 	bl	801915c <GUI_ALLOC_h2p>
 8010132:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8010136:	f1b9 0f00 	cmp.w	r9, #0
 801013a:	f47f af48 	bne.w	800ffce <WM_InvalidateWindowAndDescs+0x5a>
 801013e:	f006 fc8d 	bl	8016a5c <GUI_Unlock>
 8010142:	4640      	mov	r0, r8
 8010144:	f009 f80a 	bl	801915c <GUI_ALLOC_h2p>
 8010148:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801014c:	f1b8 0f00 	cmp.w	r8, #0
 8010150:	f47f af2b 	bne.w	800ffaa <WM_InvalidateWindowAndDescs+0x36>
 8010154:	e715      	b.n	800ff82 <WM_InvalidateWindowAndDescs+0xe>
 8010156:	bf00      	nop

08010158 <WM_ShowWindow>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4604      	mov	r4, r0
 801015c:	b082      	sub	sp, #8
 801015e:	b908      	cbnz	r0, 8010164 <WM_ShowWindow+0xc>
 8010160:	b002      	add	sp, #8
 8010162:	bd10      	pop	{r4, pc}
 8010164:	f006 fc84 	bl	8016a70 <GUI_Lock>
 8010168:	4620      	mov	r0, r4
 801016a:	f009 f801 	bl	8019170 <GUI_ALLOC_LockH>
 801016e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010170:	9001      	str	r0, [sp, #4]
 8010172:	079a      	lsls	r2, r3, #30
 8010174:	d506      	bpl.n	8010184 <WM_ShowWindow+0x2c>
 8010176:	a801      	add	r0, sp, #4
 8010178:	f009 f80c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801017c:	f006 fc6e 	bl	8016a5c <GUI_Unlock>
 8010180:	b002      	add	sp, #8
 8010182:	bd10      	pop	{r4, pc}
 8010184:	f043 0302 	orr.w	r3, r3, #2
 8010188:	6283      	str	r3, [r0, #40]	; 0x28
 801018a:	4620      	mov	r0, r4
 801018c:	f7ff fef2 	bl	800ff74 <WM_InvalidateWindowAndDescs>
 8010190:	e7f1      	b.n	8010176 <WM_ShowWindow+0x1e>
 8010192:	bf00      	nop

08010194 <WM_ValidateWindow>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4604      	mov	r4, r0
 8010198:	b082      	sub	sp, #8
 801019a:	f006 fc69 	bl	8016a70 <GUI_Lock>
 801019e:	b91c      	cbnz	r4, 80101a8 <WM_ValidateWindow+0x14>
 80101a0:	f006 fc5c 	bl	8016a5c <GUI_Unlock>
 80101a4:	b002      	add	sp, #8
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	4620      	mov	r0, r4
 80101aa:	f008 ffe1 	bl	8019170 <GUI_ALLOC_LockH>
 80101ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80101b0:	9001      	str	r0, [sp, #4]
 80101b2:	069a      	lsls	r2, r3, #26
 80101b4:	d506      	bpl.n	80101c4 <WM_ValidateWindow+0x30>
 80101b6:	4a07      	ldr	r2, [pc, #28]	; (80101d4 <WM_ValidateWindow+0x40>)
 80101b8:	8811      	ldrh	r1, [r2, #0]
 80101ba:	f023 0320 	bic.w	r3, r3, #32
 80101be:	3901      	subs	r1, #1
 80101c0:	6283      	str	r3, [r0, #40]	; 0x28
 80101c2:	8011      	strh	r1, [r2, #0]
 80101c4:	a801      	add	r0, sp, #4
 80101c6:	f008 ffe5 	bl	8019194 <GUI_ALLOC_UnlockH>
 80101ca:	f006 fc47 	bl	8016a5c <GUI_Unlock>
 80101ce:	b002      	add	sp, #8
 80101d0:	bd10      	pop	{r4, pc}
 80101d2:	bf00      	nop
 80101d4:	2002bf8c 	.word	0x2002bf8c

080101d8 <WM_HideWindow>:
 80101d8:	b510      	push	{r4, lr}
 80101da:	4604      	mov	r4, r0
 80101dc:	b082      	sub	sp, #8
 80101de:	b908      	cbnz	r0, 80101e4 <WM_HideWindow+0xc>
 80101e0:	b002      	add	sp, #8
 80101e2:	bd10      	pop	{r4, pc}
 80101e4:	f006 fc44 	bl	8016a70 <GUI_Lock>
 80101e8:	4620      	mov	r0, r4
 80101ea:	f008 ffc1 	bl	8019170 <GUI_ALLOC_LockH>
 80101ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80101f0:	9001      	str	r0, [sp, #4]
 80101f2:	0791      	lsls	r1, r2, #30
 80101f4:	d406      	bmi.n	8010204 <WM_HideWindow+0x2c>
 80101f6:	a801      	add	r0, sp, #4
 80101f8:	f008 ffcc 	bl	8019194 <GUI_ALLOC_UnlockH>
 80101fc:	f006 fc2e 	bl	8016a5c <GUI_Unlock>
 8010200:	b002      	add	sp, #8
 8010202:	bd10      	pop	{r4, pc}
 8010204:	f022 0202 	bic.w	r2, r2, #2
 8010208:	6282      	str	r2, [r0, #40]	; 0x28
 801020a:	6981      	ldr	r1, [r0, #24]
 801020c:	6a02      	ldr	r2, [r0, #32]
 801020e:	f001 fadf 	bl	80117d0 <WM__InvalidateRectEx>
 8010212:	a801      	add	r0, sp, #4
 8010214:	f008 ffbe 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010218:	e7f0      	b.n	80101fc <WM_HideWindow+0x24>
 801021a:	bf00      	nop

0801021c <WM_GetWindowSizeX>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	b082      	sub	sp, #8
 8010222:	f006 fc25 	bl	8016a70 <GUI_Lock>
 8010226:	b914      	cbnz	r4, 801022e <WM_GetWindowSizeX+0x12>
 8010228:	f001 fdd6 	bl	8011dd8 <WM_GetActiveWindow>
 801022c:	4604      	mov	r4, r0
 801022e:	4620      	mov	r0, r4
 8010230:	f008 ff9e 	bl	8019170 <GUI_ALLOC_LockH>
 8010234:	ab02      	add	r3, sp, #8
 8010236:	f9b0 2000 	ldrsh.w	r2, [r0]
 801023a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801023e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010242:	4618      	mov	r0, r3
 8010244:	1aa4      	subs	r4, r4, r2
 8010246:	f008 ffa5 	bl	8019194 <GUI_ALLOC_UnlockH>
 801024a:	f006 fc07 	bl	8016a5c <GUI_Unlock>
 801024e:	3401      	adds	r4, #1
 8010250:	4620      	mov	r0, r4
 8010252:	b002      	add	sp, #8
 8010254:	bd10      	pop	{r4, pc}
 8010256:	bf00      	nop

08010258 <WM_GetWindowSizeY>:
 8010258:	b510      	push	{r4, lr}
 801025a:	4604      	mov	r4, r0
 801025c:	b082      	sub	sp, #8
 801025e:	f006 fc07 	bl	8016a70 <GUI_Lock>
 8010262:	b914      	cbnz	r4, 801026a <WM_GetWindowSizeY+0x12>
 8010264:	f001 fdb8 	bl	8011dd8 <WM_GetActiveWindow>
 8010268:	4604      	mov	r4, r0
 801026a:	4620      	mov	r0, r4
 801026c:	f008 ff80 	bl	8019170 <GUI_ALLOC_LockH>
 8010270:	ab02      	add	r3, sp, #8
 8010272:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010276:	f843 0d04 	str.w	r0, [r3, #-4]!
 801027a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801027e:	4618      	mov	r0, r3
 8010280:	1aa4      	subs	r4, r4, r2
 8010282:	f008 ff87 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010286:	f006 fbe9 	bl	8016a5c <GUI_Unlock>
 801028a:	3401      	adds	r4, #1
 801028c:	4620      	mov	r0, r4
 801028e:	b002      	add	sp, #8
 8010290:	bd10      	pop	{r4, pc}
 8010292:	bf00      	nop

08010294 <_cbInvalidateOne>:
 8010294:	f001 bbf6 	b.w	8011a84 <WM_InvalidateWindow>

08010298 <WM_BringToTop>:
 8010298:	b530      	push	{r4, r5, lr}
 801029a:	4604      	mov	r4, r0
 801029c:	b083      	sub	sp, #12
 801029e:	f006 fbe7 	bl	8016a70 <GUI_Lock>
 80102a2:	b91c      	cbnz	r4, 80102ac <WM_BringToTop+0x14>
 80102a4:	f006 fbda 	bl	8016a5c <GUI_Unlock>
 80102a8:	b003      	add	sp, #12
 80102aa:	bd30      	pop	{r4, r5, pc}
 80102ac:	4620      	mov	r0, r4
 80102ae:	f008 ff5f 	bl	8019170 <GUI_ALLOC_LockH>
 80102b2:	6a03      	ldr	r3, [r0, #32]
 80102b4:	9000      	str	r0, [sp, #0]
 80102b6:	b343      	cbz	r3, 801030a <WM_BringToTop+0x72>
 80102b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80102ba:	0712      	lsls	r2, r2, #28
 80102bc:	d40d      	bmi.n	80102da <WM_BringToTop+0x42>
 80102be:	4618      	mov	r0, r3
 80102c0:	f008 ff56 	bl	8019170 <GUI_ALLOC_LockH>
 80102c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80102c6:	9001      	str	r0, [sp, #4]
 80102c8:	071b      	lsls	r3, r3, #28
 80102ca:	d525      	bpl.n	8010318 <WM_BringToTop+0x80>
 80102cc:	4668      	mov	r0, sp
 80102ce:	f008 ff61 	bl	8019194 <GUI_ALLOC_UnlockH>
 80102d2:	a801      	add	r0, sp, #4
 80102d4:	f008 ff5e 	bl	8019194 <GUI_ALLOC_UnlockH>
 80102d8:	e7e4      	b.n	80102a4 <WM_BringToTop+0xc>
 80102da:	4603      	mov	r3, r0
 80102dc:	699d      	ldr	r5, [r3, #24]
 80102de:	4668      	mov	r0, sp
 80102e0:	f008 ff58 	bl	8019194 <GUI_ALLOC_UnlockH>
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 fccd 	bl	8010c84 <WM__RemoveWindowFromList>
 80102ea:	4629      	mov	r1, r5
 80102ec:	4620      	mov	r0, r4
 80102ee:	f000 fc5b 	bl	8010ba8 <WM__InsertWindowIntoList>
 80102f2:	4620      	mov	r0, r4
 80102f4:	f001 fbc6 	bl	8011a84 <WM_InvalidateWindow>
 80102f8:	4620      	mov	r0, r4
 80102fa:	490a      	ldr	r1, [pc, #40]	; (8010324 <WM_BringToTop+0x8c>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	f7ff f8c3 	bl	800f488 <WM_ForEachDesc>
 8010302:	f006 fbab 	bl	8016a5c <GUI_Unlock>
 8010306:	b003      	add	sp, #12
 8010308:	bd30      	pop	{r4, r5, pc}
 801030a:	4668      	mov	r0, sp
 801030c:	f008 ff42 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010310:	f006 fba4 	bl	8016a5c <GUI_Unlock>
 8010314:	b003      	add	sp, #12
 8010316:	bd30      	pop	{r4, r5, pc}
 8010318:	a801      	add	r0, sp, #4
 801031a:	f008 ff3b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801031e:	9b00      	ldr	r3, [sp, #0]
 8010320:	e7dc      	b.n	80102dc <WM_BringToTop+0x44>
 8010322:	bf00      	nop
 8010324:	08010295 	.word	0x08010295

08010328 <_OnExit>:
 8010328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	4a1e      	ldr	r2, [pc, #120]	; (80103a8 <_OnExit+0x80>)
 801032e:	4d1f      	ldr	r5, [pc, #124]	; (80103ac <_OnExit+0x84>)
 8010330:	4b1f      	ldr	r3, [pc, #124]	; (80103b0 <_OnExit+0x88>)
 8010332:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80103d8 <_OnExit+0xb0>
 8010336:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80103dc <_OnExit+0xb4>
 801033a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80103e0 <_OnExit+0xb8>
 801033e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80103e4 <_OnExit+0xbc>
 8010342:	491c      	ldr	r1, [pc, #112]	; (80103b4 <_OnExit+0x8c>)
 8010344:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80103e8 <_OnExit+0xc0>
 8010348:	4e1b      	ldr	r6, [pc, #108]	; (80103b8 <_OnExit+0x90>)
 801034a:	4f1c      	ldr	r7, [pc, #112]	; (80103bc <_OnExit+0x94>)
 801034c:	481c      	ldr	r0, [pc, #112]	; (80103c0 <_OnExit+0x98>)
 801034e:	2400      	movs	r4, #0
 8010350:	600c      	str	r4, [r1, #0]
 8010352:	6014      	str	r4, [r2, #0]
 8010354:	6054      	str	r4, [r2, #4]
 8010356:	601c      	str	r4, [r3, #0]
 8010358:	605c      	str	r4, [r3, #4]
 801035a:	4621      	mov	r1, r4
 801035c:	682b      	ldr	r3, [r5, #0]
 801035e:	f8cb 4000 	str.w	r4, [fp]
 8010362:	f8ca 4000 	str.w	r4, [sl]
 8010366:	f8c9 4000 	str.w	r4, [r9]
 801036a:	f8c8 4000 	str.w	r4, [r8]
 801036e:	2218      	movs	r2, #24
 8010370:	f88c 4000 	strb.w	r4, [ip]
 8010374:	6034      	str	r4, [r6, #0]
 8010376:	603c      	str	r4, [r7, #0]
 8010378:	4798      	blx	r3
 801037a:	4b12      	ldr	r3, [pc, #72]	; (80103c4 <_OnExit+0x9c>)
 801037c:	4a12      	ldr	r2, [pc, #72]	; (80103c8 <_OnExit+0xa0>)
 801037e:	601c      	str	r4, [r3, #0]
 8010380:	6014      	str	r4, [r2, #0]
 8010382:	605c      	str	r4, [r3, #4]
 8010384:	4621      	mov	r1, r4
 8010386:	682b      	ldr	r3, [r5, #0]
 8010388:	4810      	ldr	r0, [pc, #64]	; (80103cc <_OnExit+0xa4>)
 801038a:	2210      	movs	r2, #16
 801038c:	4798      	blx	r3
 801038e:	682b      	ldr	r3, [r5, #0]
 8010390:	480f      	ldr	r0, [pc, #60]	; (80103d0 <_OnExit+0xa8>)
 8010392:	4621      	mov	r1, r4
 8010394:	2210      	movs	r2, #16
 8010396:	4798      	blx	r3
 8010398:	682b      	ldr	r3, [r5, #0]
 801039a:	480e      	ldr	r0, [pc, #56]	; (80103d4 <_OnExit+0xac>)
 801039c:	4621      	mov	r1, r4
 801039e:	2210      	movs	r2, #16
 80103a0:	4798      	blx	r3
 80103a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a6:	bf00      	nop
 80103a8:	2002bf84 	.word	0x2002bf84
 80103ac:	20000240 	.word	0x20000240
 80103b0:	2002bfb8 	.word	0x2002bfb8
 80103b4:	2002bfb4 	.word	0x2002bfb4
 80103b8:	2002aea0 	.word	0x2002aea0
 80103bc:	2002aec4 	.word	0x2002aec4
 80103c0:	2002aeac 	.word	0x2002aeac
 80103c4:	2002bf74 	.word	0x2002bf74
 80103c8:	2002bf80 	.word	0x2002bf80
 80103cc:	2002c130 	.word	0x2002c130
 80103d0:	2002c120 	.word	0x2002c120
 80103d4:	2002c110 	.word	0x2002c110
 80103d8:	2002bfb0 	.word	0x2002bfb0
 80103dc:	2002bfc4 	.word	0x2002bfc4
 80103e0:	2002bf70 	.word	0x2002bf70
 80103e4:	2002bfa4 	.word	0x2002bfa4
 80103e8:	2002aec8 	.word	0x2002aec8

080103ec <_Findy1>:
 80103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ee:	4604      	mov	r4, r0
 80103f0:	b085      	sub	sp, #20
 80103f2:	460e      	mov	r6, r1
 80103f4:	4617      	mov	r7, r2
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d033      	beq.n	8010462 <_Findy1+0x76>
 80103fa:	4620      	mov	r0, r4
 80103fc:	f008 feb8 	bl	8019170 <GUI_ALLOC_LockH>
 8010400:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010402:	9000      	str	r0, [sp, #0]
 8010404:	07a2      	lsls	r2, r4, #30
 8010406:	d526      	bpl.n	8010456 <_Findy1+0x6a>
 8010408:	2f00      	cmp	r7, #0
 801040a:	d042      	beq.n	8010492 <_Findy1+0xa6>
 801040c:	ad02      	add	r5, sp, #8
 801040e:	4601      	mov	r1, r0
 8010410:	463a      	mov	r2, r7
 8010412:	4628      	mov	r0, r5
 8010414:	f005 fb6c 	bl	8015af0 <GUI__IntersectRects>
 8010418:	4630      	mov	r0, r6
 801041a:	4629      	mov	r1, r5
 801041c:	f007 fd78 	bl	8017f10 <GUI_RectsIntersect>
 8010420:	2800      	cmp	r0, #0
 8010422:	d02e      	beq.n	8010482 <_Findy1+0x96>
 8010424:	07e3      	lsls	r3, r4, #31
 8010426:	9800      	ldr	r0, [sp, #0]
 8010428:	d41d      	bmi.n	8010466 <_Findy1+0x7a>
 801042a:	2f00      	cmp	r7, #0
 801042c:	d045      	beq.n	80104ba <_Findy1+0xce>
 801042e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010432:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010436:	429a      	cmp	r2, r3
 8010438:	bfb8      	it	lt
 801043a:	461a      	movlt	r2, r3
 801043c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8010440:	429a      	cmp	r2, r3
 8010442:	dd2b      	ble.n	801049c <_Findy1+0xb0>
 8010444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010448:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801044c:	b21a      	sxth	r2, r3
 801044e:	4291      	cmp	r1, r2
 8010450:	db01      	blt.n	8010456 <_Findy1+0x6a>
 8010452:	3b01      	subs	r3, #1
 8010454:	80f3      	strh	r3, [r6, #6]
 8010456:	6a04      	ldr	r4, [r0, #32]
 8010458:	4668      	mov	r0, sp
 801045a:	f008 fe9b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801045e:	2c00      	cmp	r4, #0
 8010460:	d1cb      	bne.n	80103fa <_Findy1+0xe>
 8010462:	b005      	add	sp, #20
 8010464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010466:	69c4      	ldr	r4, [r0, #28]
 8010468:	2c00      	cmp	r4, #0
 801046a:	d0f4      	beq.n	8010456 <_Findy1+0x6a>
 801046c:	4620      	mov	r0, r4
 801046e:	4631      	mov	r1, r6
 8010470:	462a      	mov	r2, r5
 8010472:	f7ff ffbb 	bl	80103ec <_Findy1>
 8010476:	4620      	mov	r0, r4
 8010478:	f008 fe70 	bl	801915c <GUI_ALLOC_h2p>
 801047c:	6a04      	ldr	r4, [r0, #32]
 801047e:	2c00      	cmp	r4, #0
 8010480:	d1f4      	bne.n	801046c <_Findy1+0x80>
 8010482:	9800      	ldr	r0, [sp, #0]
 8010484:	6a04      	ldr	r4, [r0, #32]
 8010486:	4668      	mov	r0, sp
 8010488:	f008 fe84 	bl	8019194 <GUI_ALLOC_UnlockH>
 801048c:	2c00      	cmp	r4, #0
 801048e:	d1b4      	bne.n	80103fa <_Findy1+0xe>
 8010490:	e7e7      	b.n	8010462 <_Findy1+0x76>
 8010492:	c803      	ldmia	r0, {r0, r1}
 8010494:	ad02      	add	r5, sp, #8
 8010496:	e885 0003 	stmia.w	r5, {r0, r1}
 801049a:	e7bd      	b.n	8010418 <_Findy1+0x2c>
 801049c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80104a0:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80104a4:	b21a      	sxth	r2, r3
 80104a6:	4291      	cmp	r1, r2
 80104a8:	ddd5      	ble.n	8010456 <_Findy1+0x6a>
 80104aa:	6a04      	ldr	r4, [r0, #32]
 80104ac:	80f3      	strh	r3, [r6, #6]
 80104ae:	4668      	mov	r0, sp
 80104b0:	f008 fe70 	bl	8019194 <GUI_ALLOC_UnlockH>
 80104b4:	2c00      	cmp	r4, #0
 80104b6:	d1a0      	bne.n	80103fa <_Findy1+0xe>
 80104b8:	e7d3      	b.n	8010462 <_Findy1+0x76>
 80104ba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80104be:	e7bd      	b.n	801043c <_Findy1+0x50>

080104c0 <_Findx0>:
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	4604      	mov	r4, r0
 80104c6:	b084      	sub	sp, #16
 80104c8:	460f      	mov	r7, r1
 80104ca:	4690      	mov	r8, r2
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d048      	beq.n	8010562 <_Findx0+0xa2>
 80104d0:	2600      	movs	r6, #0
 80104d2:	e00c      	b.n	80104ee <_Findx0+0x2e>
 80104d4:	07e3      	lsls	r3, r4, #31
 80104d6:	d430      	bmi.n	801053a <_Findx0+0x7a>
 80104d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80104dc:	9800      	ldr	r0, [sp, #0]
 80104de:	3301      	adds	r3, #1
 80104e0:	803b      	strh	r3, [r7, #0]
 80104e2:	2601      	movs	r6, #1
 80104e4:	6a04      	ldr	r4, [r0, #32]
 80104e6:	4668      	mov	r0, sp
 80104e8:	f008 fe54 	bl	8019194 <GUI_ALLOC_UnlockH>
 80104ec:	b1e4      	cbz	r4, 8010528 <_Findx0+0x68>
 80104ee:	4620      	mov	r0, r4
 80104f0:	f008 fe3e 	bl	8019170 <GUI_ALLOC_LockH>
 80104f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80104f6:	9000      	str	r0, [sp, #0]
 80104f8:	07a2      	lsls	r2, r4, #30
 80104fa:	d5f3      	bpl.n	80104e4 <_Findx0+0x24>
 80104fc:	f1b8 0f00 	cmp.w	r8, #0
 8010500:	d016      	beq.n	8010530 <_Findx0+0x70>
 8010502:	ad02      	add	r5, sp, #8
 8010504:	4601      	mov	r1, r0
 8010506:	4642      	mov	r2, r8
 8010508:	4628      	mov	r0, r5
 801050a:	f005 faf1 	bl	8015af0 <GUI__IntersectRects>
 801050e:	4638      	mov	r0, r7
 8010510:	4629      	mov	r1, r5
 8010512:	f007 fcfd 	bl	8017f10 <GUI_RectsIntersect>
 8010516:	2800      	cmp	r0, #0
 8010518:	d1dc      	bne.n	80104d4 <_Findx0+0x14>
 801051a:	9800      	ldr	r0, [sp, #0]
 801051c:	6a04      	ldr	r4, [r0, #32]
 801051e:	4668      	mov	r0, sp
 8010520:	f008 fe38 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010524:	2c00      	cmp	r4, #0
 8010526:	d1e2      	bne.n	80104ee <_Findx0+0x2e>
 8010528:	4630      	mov	r0, r6
 801052a:	b004      	add	sp, #16
 801052c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010530:	c803      	ldmia	r0, {r0, r1}
 8010532:	ad02      	add	r5, sp, #8
 8010534:	e885 0003 	stmia.w	r5, {r0, r1}
 8010538:	e7e9      	b.n	801050e <_Findx0+0x4e>
 801053a:	9800      	ldr	r0, [sp, #0]
 801053c:	69c4      	ldr	r4, [r0, #28]
 801053e:	2c00      	cmp	r4, #0
 8010540:	d0d0      	beq.n	80104e4 <_Findx0+0x24>
 8010542:	4620      	mov	r0, r4
 8010544:	4639      	mov	r1, r7
 8010546:	462a      	mov	r2, r5
 8010548:	f7ff ffba 	bl	80104c0 <_Findx0>
 801054c:	2800      	cmp	r0, #0
 801054e:	4620      	mov	r0, r4
 8010550:	bf18      	it	ne
 8010552:	2601      	movne	r6, #1
 8010554:	f008 fe02 	bl	801915c <GUI_ALLOC_h2p>
 8010558:	6a04      	ldr	r4, [r0, #32]
 801055a:	2c00      	cmp	r4, #0
 801055c:	d1f1      	bne.n	8010542 <_Findx0+0x82>
 801055e:	9800      	ldr	r0, [sp, #0]
 8010560:	e7dc      	b.n	801051c <_Findx0+0x5c>
 8010562:	4606      	mov	r6, r0
 8010564:	e7e0      	b.n	8010528 <_Findx0+0x68>
 8010566:	bf00      	nop

08010568 <_Findx1>:
 8010568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801056a:	4604      	mov	r4, r0
 801056c:	b085      	sub	sp, #20
 801056e:	460e      	mov	r6, r1
 8010570:	4617      	mov	r7, r2
 8010572:	b960      	cbnz	r0, 801058e <_Findx1+0x26>
 8010574:	e026      	b.n	80105c4 <_Findx1+0x5c>
 8010576:	07e3      	lsls	r3, r4, #31
 8010578:	d42b      	bmi.n	80105d2 <_Findx1+0x6a>
 801057a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801057e:	9800      	ldr	r0, [sp, #0]
 8010580:	3b01      	subs	r3, #1
 8010582:	80b3      	strh	r3, [r6, #4]
 8010584:	6a04      	ldr	r4, [r0, #32]
 8010586:	4668      	mov	r0, sp
 8010588:	f008 fe04 	bl	8019194 <GUI_ALLOC_UnlockH>
 801058c:	b1d4      	cbz	r4, 80105c4 <_Findx1+0x5c>
 801058e:	4620      	mov	r0, r4
 8010590:	f008 fdee 	bl	8019170 <GUI_ALLOC_LockH>
 8010594:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010596:	9000      	str	r0, [sp, #0]
 8010598:	07a2      	lsls	r2, r4, #30
 801059a:	d5f3      	bpl.n	8010584 <_Findx1+0x1c>
 801059c:	b1a7      	cbz	r7, 80105c8 <_Findx1+0x60>
 801059e:	ad02      	add	r5, sp, #8
 80105a0:	4601      	mov	r1, r0
 80105a2:	463a      	mov	r2, r7
 80105a4:	4628      	mov	r0, r5
 80105a6:	f005 faa3 	bl	8015af0 <GUI__IntersectRects>
 80105aa:	4630      	mov	r0, r6
 80105ac:	4629      	mov	r1, r5
 80105ae:	f007 fcaf 	bl	8017f10 <GUI_RectsIntersect>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	d1df      	bne.n	8010576 <_Findx1+0xe>
 80105b6:	9800      	ldr	r0, [sp, #0]
 80105b8:	6a04      	ldr	r4, [r0, #32]
 80105ba:	4668      	mov	r0, sp
 80105bc:	f008 fdea 	bl	8019194 <GUI_ALLOC_UnlockH>
 80105c0:	2c00      	cmp	r4, #0
 80105c2:	d1e4      	bne.n	801058e <_Findx1+0x26>
 80105c4:	b005      	add	sp, #20
 80105c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c8:	c803      	ldmia	r0, {r0, r1}
 80105ca:	ad02      	add	r5, sp, #8
 80105cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80105d0:	e7eb      	b.n	80105aa <_Findx1+0x42>
 80105d2:	9800      	ldr	r0, [sp, #0]
 80105d4:	69c4      	ldr	r4, [r0, #28]
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	d0d4      	beq.n	8010584 <_Findx1+0x1c>
 80105da:	4620      	mov	r0, r4
 80105dc:	4631      	mov	r1, r6
 80105de:	462a      	mov	r2, r5
 80105e0:	f7ff ffc2 	bl	8010568 <_Findx1>
 80105e4:	4620      	mov	r0, r4
 80105e6:	f008 fdb9 	bl	801915c <GUI_ALLOC_h2p>
 80105ea:	6a04      	ldr	r4, [r0, #32]
 80105ec:	2c00      	cmp	r4, #0
 80105ee:	d1f4      	bne.n	80105da <_Findx1+0x72>
 80105f0:	9800      	ldr	r0, [sp, #0]
 80105f2:	e7e1      	b.n	80105b8 <_Findx1+0x50>

080105f4 <_Paint1Trans>:
 80105f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105f8:	4e29      	ldr	r6, [pc, #164]	; (80106a0 <_Paint1Trans+0xac>)
 80105fa:	6833      	ldr	r3, [r6, #0]
 80105fc:	b083      	sub	sp, #12
 80105fe:	4605      	mov	r5, r0
 8010600:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010602:	f008 fdb5 	bl	8019170 <GUI_ALLOC_LockH>
 8010606:	9000      	str	r0, [sp, #0]
 8010608:	4628      	mov	r0, r5
 801060a:	f008 fdb1 	bl	8019170 <GUI_ALLOC_LockH>
 801060e:	4601      	mov	r1, r0
 8010610:	9800      	ldr	r0, [sp, #0]
 8010612:	9101      	str	r1, [sp, #4]
 8010614:	3008      	adds	r0, #8
 8010616:	f007 fc7b 	bl	8017f10 <GUI_RectsIntersect>
 801061a:	4604      	mov	r4, r0
 801061c:	b948      	cbnz	r0, 8010632 <_Paint1Trans+0x3e>
 801061e:	4668      	mov	r0, sp
 8010620:	f008 fdb8 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010624:	a801      	add	r0, sp, #4
 8010626:	f008 fdb5 	bl	8019194 <GUI_ALLOC_UnlockH>
 801062a:	4620      	mov	r0, r4
 801062c:	b003      	add	sp, #12
 801062e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010632:	ac02      	add	r4, sp, #8
 8010634:	9901      	ldr	r1, [sp, #4]
 8010636:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 801063a:	6833      	ldr	r3, [r6, #0]
 801063c:	4f19      	ldr	r7, [pc, #100]	; (80106a4 <_Paint1Trans+0xb0>)
 801063e:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8010642:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8010646:	3208      	adds	r2, #8
 8010648:	f101 0008 	add.w	r0, r1, #8
 801064c:	f005 fa50 	bl	8015af0 <GUI__IntersectRects>
 8010650:	4668      	mov	r0, sp
 8010652:	f008 fd9f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010656:	a802      	add	r0, sp, #8
 8010658:	6833      	ldr	r3, [r6, #0]
 801065a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801065e:	603d      	str	r5, [r7, #0]
 8010660:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010664:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010668:	651a      	str	r2, [r3, #80]	; 0x50
 801066a:	64d9      	str	r1, [r3, #76]	; 0x4c
 801066c:	f008 fd92 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010670:	4628      	mov	r0, r5
 8010672:	f008 fd73 	bl	801915c <GUI_ALLOC_h2p>
 8010676:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8010678:	4a0b      	ldr	r2, [pc, #44]	; (80106a8 <_Paint1Trans+0xb4>)
 801067a:	4b0c      	ldr	r3, [pc, #48]	; (80106ac <_Paint1Trans+0xb8>)
 801067c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8010680:	bf08      	it	eq
 8010682:	4613      	moveq	r3, r2
 8010684:	4628      	mov	r0, r5
 8010686:	4798      	blx	r3
 8010688:	2401      	movs	r4, #1
 801068a:	6833      	ldr	r3, [r6, #0]
 801068c:	2200      	movs	r2, #0
 801068e:	4620      	mov	r0, r4
 8010690:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 8010694:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8010698:	603a      	str	r2, [r7, #0]
 801069a:	b003      	add	sp, #12
 801069c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a0:	2000026c 	.word	0x2000026c
 80106a4:	2002bf70 	.word	0x2002bf70
 80106a8:	080121cd 	.word	0x080121cd
 80106ac:	08012855 	.word	0x08012855

080106b0 <_PaintTransChildren>:
 80106b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b4:	b082      	sub	sp, #8
 80106b6:	4606      	mov	r6, r0
 80106b8:	f008 fd5a 	bl	8019170 <GUI_ALLOC_LockH>
 80106bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80106be:	9001      	str	r0, [sp, #4]
 80106c0:	079b      	lsls	r3, r3, #30
 80106c2:	d524      	bpl.n	801070e <_PaintTransChildren+0x5e>
 80106c4:	69c4      	ldr	r4, [r0, #28]
 80106c6:	ad01      	add	r5, sp, #4
 80106c8:	b92c      	cbnz	r4, 80106d6 <_PaintTransChildren+0x26>
 80106ca:	e020      	b.n	801070e <_PaintTransChildren+0x5e>
 80106cc:	6a1c      	ldr	r4, [r3, #32]
 80106ce:	4668      	mov	r0, sp
 80106d0:	f008 fd60 	bl	8019194 <GUI_ALLOC_UnlockH>
 80106d4:	b1ac      	cbz	r4, 8010702 <_PaintTransChildren+0x52>
 80106d6:	4620      	mov	r0, r4
 80106d8:	f008 fd4a 	bl	8019170 <GUI_ALLOC_LockH>
 80106dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80106de:	9000      	str	r0, [sp, #0]
 80106e0:	f002 0203 	and.w	r2, r2, #3
 80106e4:	2a03      	cmp	r2, #3
 80106e6:	4603      	mov	r3, r0
 80106e8:	d1f0      	bne.n	80106cc <_PaintTransChildren+0x1c>
 80106ea:	9901      	ldr	r1, [sp, #4]
 80106ec:	3108      	adds	r1, #8
 80106ee:	f007 fc0f 	bl	8017f10 <GUI_RectsIntersect>
 80106f2:	b998      	cbnz	r0, 801071c <_PaintTransChildren+0x6c>
 80106f4:	9b00      	ldr	r3, [sp, #0]
 80106f6:	6a1c      	ldr	r4, [r3, #32]
 80106f8:	4668      	mov	r0, sp
 80106fa:	f008 fd4b 	bl	8019194 <GUI_ALLOC_UnlockH>
 80106fe:	2c00      	cmp	r4, #0
 8010700:	d1e9      	bne.n	80106d6 <_PaintTransChildren+0x26>
 8010702:	4628      	mov	r0, r5
 8010704:	f008 fd46 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010708:	b002      	add	sp, #8
 801070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070e:	ad01      	add	r5, sp, #4
 8010710:	4628      	mov	r0, r5
 8010712:	f008 fd3f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010716:	b002      	add	sp, #8
 8010718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801071c:	9b01      	ldr	r3, [sp, #4]
 801071e:	4628      	mov	r0, r5
 8010720:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8010724:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8010728:	899f      	ldrh	r7, [r3, #12]
 801072a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 801072e:	f008 fd31 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010732:	4668      	mov	r0, sp
 8010734:	f008 fd2e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010738:	4620      	mov	r0, r4
 801073a:	f7ff ff5b 	bl	80105f4 <_Paint1Trans>
 801073e:	b988      	cbnz	r0, 8010764 <_PaintTransChildren+0xb4>
 8010740:	4630      	mov	r0, r6
 8010742:	f008 fd15 	bl	8019170 <GUI_ALLOC_LockH>
 8010746:	9001      	str	r0, [sp, #4]
 8010748:	4620      	mov	r0, r4
 801074a:	f008 fd11 	bl	8019170 <GUI_ALLOC_LockH>
 801074e:	9a01      	ldr	r2, [sp, #4]
 8010750:	9000      	str	r0, [sp, #0]
 8010752:	4603      	mov	r3, r0
 8010754:	f8a2 9008 	strh.w	r9, [r2, #8]
 8010758:	f8a2 800a 	strh.w	r8, [r2, #10]
 801075c:	8197      	strh	r7, [r2, #12]
 801075e:	f8a2 a00e 	strh.w	sl, [r2, #14]
 8010762:	e7b3      	b.n	80106cc <_PaintTransChildren+0x1c>
 8010764:	4620      	mov	r0, r4
 8010766:	f008 fcf9 	bl	801915c <GUI_ALLOC_h2p>
 801076a:	9000      	str	r0, [sp, #0]
 801076c:	4620      	mov	r0, r4
 801076e:	f7ff ff9f 	bl	80106b0 <_PaintTransChildren>
 8010772:	4620      	mov	r0, r4
 8010774:	f008 fcf2 	bl	801915c <GUI_ALLOC_h2p>
 8010778:	9000      	str	r0, [sp, #0]
 801077a:	4630      	mov	r0, r6
 801077c:	f008 fcee 	bl	801915c <GUI_ALLOC_h2p>
 8010780:	9001      	str	r0, [sp, #4]
 8010782:	e7dd      	b.n	8010740 <_PaintTransChildren+0x90>

08010784 <_Findx0.constprop.9>:
 8010784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010786:	4604      	mov	r4, r0
 8010788:	b085      	sub	sp, #20
 801078a:	460f      	mov	r7, r1
 801078c:	2800      	cmp	r0, #0
 801078e:	d036      	beq.n	80107fe <_Findx0.constprop.9+0x7a>
 8010790:	2500      	movs	r5, #0
 8010792:	ae02      	add	r6, sp, #8
 8010794:	4620      	mov	r0, r4
 8010796:	f008 fceb 	bl	8019170 <GUI_ALLOC_LockH>
 801079a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801079c:	9000      	str	r0, [sp, #0]
 801079e:	07a2      	lsls	r2, r4, #30
 80107a0:	d508      	bpl.n	80107b4 <_Findx0.constprop.9+0x30>
 80107a2:	c803      	ldmia	r0, {r0, r1}
 80107a4:	e886 0003 	stmia.w	r6, {r0, r1}
 80107a8:	4638      	mov	r0, r7
 80107aa:	4631      	mov	r1, r6
 80107ac:	f007 fbb0 	bl	8017f10 <GUI_RectsIntersect>
 80107b0:	b948      	cbnz	r0, 80107c6 <_Findx0.constprop.9+0x42>
 80107b2:	9800      	ldr	r0, [sp, #0]
 80107b4:	6a04      	ldr	r4, [r0, #32]
 80107b6:	4668      	mov	r0, sp
 80107b8:	f008 fcec 	bl	8019194 <GUI_ALLOC_UnlockH>
 80107bc:	2c00      	cmp	r4, #0
 80107be:	d1e9      	bne.n	8010794 <_Findx0.constprop.9+0x10>
 80107c0:	4628      	mov	r0, r5
 80107c2:	b005      	add	sp, #20
 80107c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c6:	07e3      	lsls	r3, r4, #31
 80107c8:	d406      	bmi.n	80107d8 <_Findx0.constprop.9+0x54>
 80107ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80107ce:	9800      	ldr	r0, [sp, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	803b      	strh	r3, [r7, #0]
 80107d4:	2501      	movs	r5, #1
 80107d6:	e7ed      	b.n	80107b4 <_Findx0.constprop.9+0x30>
 80107d8:	9800      	ldr	r0, [sp, #0]
 80107da:	69c4      	ldr	r4, [r0, #28]
 80107dc:	2c00      	cmp	r4, #0
 80107de:	d0e9      	beq.n	80107b4 <_Findx0.constprop.9+0x30>
 80107e0:	4620      	mov	r0, r4
 80107e2:	4639      	mov	r1, r7
 80107e4:	4632      	mov	r2, r6
 80107e6:	f7ff fe6b 	bl	80104c0 <_Findx0>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	4620      	mov	r0, r4
 80107ee:	bf18      	it	ne
 80107f0:	2501      	movne	r5, #1
 80107f2:	f008 fcb3 	bl	801915c <GUI_ALLOC_h2p>
 80107f6:	6a04      	ldr	r4, [r0, #32]
 80107f8:	2c00      	cmp	r4, #0
 80107fa:	d1f1      	bne.n	80107e0 <_Findx0.constprop.9+0x5c>
 80107fc:	e7d9      	b.n	80107b2 <_Findx0.constprop.9+0x2e>
 80107fe:	4605      	mov	r5, r0
 8010800:	e7de      	b.n	80107c0 <_Findx0.constprop.9+0x3c>
 8010802:	bf00      	nop

08010804 <_Findy1.constprop.10>:
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	4604      	mov	r4, r0
 8010808:	b084      	sub	sp, #16
 801080a:	460e      	mov	r6, r1
 801080c:	b1b0      	cbz	r0, 801083c <_Findy1.constprop.10+0x38>
 801080e:	ad02      	add	r5, sp, #8
 8010810:	4620      	mov	r0, r4
 8010812:	f008 fcad 	bl	8019170 <GUI_ALLOC_LockH>
 8010816:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010818:	9001      	str	r0, [sp, #4]
 801081a:	07a2      	lsls	r2, r4, #30
 801081c:	d508      	bpl.n	8010830 <_Findy1.constprop.10+0x2c>
 801081e:	c803      	ldmia	r0, {r0, r1}
 8010820:	e885 0003 	stmia.w	r5, {r0, r1}
 8010824:	4630      	mov	r0, r6
 8010826:	4629      	mov	r1, r5
 8010828:	f007 fb72 	bl	8017f10 <GUI_RectsIntersect>
 801082c:	b940      	cbnz	r0, 8010840 <_Findy1.constprop.10+0x3c>
 801082e:	9801      	ldr	r0, [sp, #4]
 8010830:	6a04      	ldr	r4, [r0, #32]
 8010832:	a801      	add	r0, sp, #4
 8010834:	f008 fcae 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010838:	2c00      	cmp	r4, #0
 801083a:	d1e9      	bne.n	8010810 <_Findy1.constprop.10+0xc>
 801083c:	b004      	add	sp, #16
 801083e:	bd70      	pop	{r4, r5, r6, pc}
 8010840:	07e3      	lsls	r3, r4, #31
 8010842:	9801      	ldr	r0, [sp, #4]
 8010844:	d418      	bmi.n	8010878 <_Findy1.constprop.10+0x74>
 8010846:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801084a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801084e:	429a      	cmp	r2, r3
 8010850:	dd09      	ble.n	8010866 <_Findy1.constprop.10+0x62>
 8010852:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010856:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801085a:	b21a      	sxth	r2, r3
 801085c:	4291      	cmp	r1, r2
 801085e:	dbe7      	blt.n	8010830 <_Findy1.constprop.10+0x2c>
 8010860:	3b01      	subs	r3, #1
 8010862:	80f3      	strh	r3, [r6, #6]
 8010864:	e7e4      	b.n	8010830 <_Findy1.constprop.10+0x2c>
 8010866:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801086a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801086e:	b21a      	sxth	r2, r3
 8010870:	4291      	cmp	r1, r2
 8010872:	dddd      	ble.n	8010830 <_Findy1.constprop.10+0x2c>
 8010874:	80f3      	strh	r3, [r6, #6]
 8010876:	e7db      	b.n	8010830 <_Findy1.constprop.10+0x2c>
 8010878:	69c4      	ldr	r4, [r0, #28]
 801087a:	2c00      	cmp	r4, #0
 801087c:	d0d8      	beq.n	8010830 <_Findy1.constprop.10+0x2c>
 801087e:	4620      	mov	r0, r4
 8010880:	4631      	mov	r1, r6
 8010882:	462a      	mov	r2, r5
 8010884:	f7ff fdb2 	bl	80103ec <_Findy1>
 8010888:	4620      	mov	r0, r4
 801088a:	f008 fc67 	bl	801915c <GUI_ALLOC_h2p>
 801088e:	6a04      	ldr	r4, [r0, #32]
 8010890:	2c00      	cmp	r4, #0
 8010892:	d1f4      	bne.n	801087e <_Findy1.constprop.10+0x7a>
 8010894:	e7cb      	b.n	801082e <_Findy1.constprop.10+0x2a>
 8010896:	bf00      	nop

08010898 <WM__PaintWinAndOverlays>:
 8010898:	b530      	push	{r4, r5, lr}
 801089a:	b083      	sub	sp, #12
 801089c:	4604      	mov	r4, r0
 801089e:	f008 fc67 	bl	8019170 <GUI_ALLOC_LockH>
 80108a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80108a4:	9001      	str	r0, [sp, #4]
 80108a6:	f640 0301 	movw	r3, #2049	; 0x801
 80108aa:	400b      	ands	r3, r1
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d00e      	beq.n	80108ce <WM__PaintWinAndOverlays+0x36>
 80108b0:	a801      	add	r0, sp, #4
 80108b2:	f008 fc6f 	bl	8019194 <GUI_ALLOC_UnlockH>
 80108b6:	4620      	mov	r0, r4
 80108b8:	f008 fc50 	bl	801915c <GUI_ALLOC_h2p>
 80108bc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80108be:	4a1b      	ldr	r2, [pc, #108]	; (801092c <WM__PaintWinAndOverlays+0x94>)
 80108c0:	4b1b      	ldr	r3, [pc, #108]	; (8010930 <WM__PaintWinAndOverlays+0x98>)
 80108c2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80108c6:	bf08      	it	eq
 80108c8:	4613      	moveq	r3, r2
 80108ca:	4620      	mov	r0, r4
 80108cc:	4798      	blx	r3
 80108ce:	4b19      	ldr	r3, [pc, #100]	; (8010934 <WM__PaintWinAndOverlays+0x9c>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	b90b      	cbnz	r3, 80108d8 <WM__PaintWinAndOverlays+0x40>
 80108d4:	b003      	add	sp, #12
 80108d6:	bd30      	pop	{r4, r5, pc}
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ff fee9 	bl	80106b0 <_PaintTransChildren>
 80108de:	4620      	mov	r0, r4
 80108e0:	f008 fc3c 	bl	801915c <GUI_ALLOC_h2p>
 80108e4:	6985      	ldr	r5, [r0, #24]
 80108e6:	6a04      	ldr	r4, [r0, #32]
 80108e8:	2d00      	cmp	r5, #0
 80108ea:	d0f3      	beq.n	80108d4 <WM__PaintWinAndOverlays+0x3c>
 80108ec:	b184      	cbz	r4, 8010910 <WM__PaintWinAndOverlays+0x78>
 80108ee:	4620      	mov	r0, r4
 80108f0:	f008 fc34 	bl	801915c <GUI_ALLOC_h2p>
 80108f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80108f6:	f003 0303 	and.w	r3, r3, #3
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d011      	beq.n	8010922 <WM__PaintWinAndOverlays+0x8a>
 80108fe:	4620      	mov	r0, r4
 8010900:	f7ff fed6 	bl	80106b0 <_PaintTransChildren>
 8010904:	4620      	mov	r0, r4
 8010906:	f008 fc29 	bl	801915c <GUI_ALLOC_h2p>
 801090a:	6a04      	ldr	r4, [r0, #32]
 801090c:	2c00      	cmp	r4, #0
 801090e:	d1ee      	bne.n	80108ee <WM__PaintWinAndOverlays+0x56>
 8010910:	4628      	mov	r0, r5
 8010912:	f008 fc23 	bl	801915c <GUI_ALLOC_h2p>
 8010916:	6985      	ldr	r5, [r0, #24]
 8010918:	6a04      	ldr	r4, [r0, #32]
 801091a:	2d00      	cmp	r5, #0
 801091c:	d1e6      	bne.n	80108ec <WM__PaintWinAndOverlays+0x54>
 801091e:	b003      	add	sp, #12
 8010920:	bd30      	pop	{r4, r5, pc}
 8010922:	4620      	mov	r0, r4
 8010924:	f7ff fe66 	bl	80105f4 <_Paint1Trans>
 8010928:	e7e9      	b.n	80108fe <WM__PaintWinAndOverlays+0x66>
 801092a:	bf00      	nop
 801092c:	080121cd 	.word	0x080121cd
 8010930:	08012855 	.word	0x08012855
 8010934:	2002bfc4 	.word	0x2002bfc4

08010938 <_cbPaintMemDev>:
 8010938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801093c:	4d18      	ldr	r5, [pc, #96]	; (80109a0 <_cbPaintMemDev+0x68>)
 801093e:	682b      	ldr	r3, [r5, #0]
 8010940:	b082      	sub	sp, #8
 8010942:	4681      	mov	r9, r0
 8010944:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010946:	f008 fc13 	bl	8019170 <GUI_ALLOC_LockH>
 801094a:	682a      	ldr	r2, [r5, #0]
 801094c:	ac02      	add	r4, sp, #8
 801094e:	3208      	adds	r2, #8
 8010950:	4603      	mov	r3, r0
 8010952:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010956:	e892 0003 	ldmia.w	r2, {r0, r1}
 801095a:	f103 0208 	add.w	r2, r3, #8
 801095e:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 8010962:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8010966:	899f      	ldrh	r7, [r3, #12]
 8010968:	89de      	ldrh	r6, [r3, #14]
 801096a:	e882 0003 	stmia.w	r2, {r0, r1}
 801096e:	4620      	mov	r0, r4
 8010970:	f008 fc10 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010974:	f8d9 0000 	ldr.w	r0, [r9]
 8010978:	f7ff ff8e 	bl	8010898 <WM__PaintWinAndOverlays>
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010980:	f008 fbf6 	bl	8019170 <GUI_ALLOC_LockH>
 8010984:	4603      	mov	r3, r0
 8010986:	4620      	mov	r0, r4
 8010988:	f8a3 a008 	strh.w	sl, [r3, #8]
 801098c:	f8a3 800a 	strh.w	r8, [r3, #10]
 8010990:	819f      	strh	r7, [r3, #12]
 8010992:	81de      	strh	r6, [r3, #14]
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	f008 fbfd 	bl	8019194 <GUI_ALLOC_UnlockH>
 801099a:	b002      	add	sp, #8
 801099c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a0:	2000026c 	.word	0x2000026c

080109a4 <_Invalidate1Abs>:
 80109a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109a6:	b085      	sub	sp, #20
 80109a8:	4616      	mov	r6, r2
 80109aa:	460c      	mov	r4, r1
 80109ac:	4605      	mov	r5, r0
 80109ae:	f008 fbd5 	bl	801915c <GUI_ALLOC_h2p>
 80109b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80109b4:	9001      	str	r0, [sp, #4]
 80109b6:	079a      	lsls	r2, r3, #30
 80109b8:	d555      	bpl.n	8010a66 <_Invalidate1Abs+0xc2>
 80109ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 80109be:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80109c2:	4291      	cmp	r1, r2
 80109c4:	dc4f      	bgt.n	8010a66 <_Invalidate1Abs+0xc2>
 80109c6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80109ca:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80109ce:	4291      	cmp	r1, r2
 80109d0:	dc49      	bgt.n	8010a66 <_Invalidate1Abs+0xc2>
 80109d2:	f640 0201 	movw	r2, #2049	; 0x801
 80109d6:	401a      	ands	r2, r3
 80109d8:	2a01      	cmp	r2, #1
 80109da:	d044      	beq.n	8010a66 <_Invalidate1Abs+0xc2>
 80109dc:	4628      	mov	r0, r5
 80109de:	f008 fbc7 	bl	8019170 <GUI_ALLOC_LockH>
 80109e2:	af02      	add	r7, sp, #8
 80109e4:	4603      	mov	r3, r0
 80109e6:	4602      	mov	r2, r0
 80109e8:	4621      	mov	r1, r4
 80109ea:	4638      	mov	r0, r7
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	f005 f87f 	bl	8015af0 <GUI__IntersectRects>
 80109f2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80109f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	dc30      	bgt.n	8010a60 <_Invalidate1Abs+0xbc>
 80109fe:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8010a02:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	dc2a      	bgt.n	8010a60 <_Invalidate1Abs+0xbc>
 8010a0a:	9a01      	ldr	r2, [sp, #4]
 8010a0c:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8010a0e:	f244 0320 	movw	r3, #16416	; 0x4020
 8010a12:	4023      	ands	r3, r4
 8010a14:	bb4b      	cbnz	r3, 8010a6a <_Invalidate1Abs+0xc6>
 8010a16:	4b19      	ldr	r3, [pc, #100]	; (8010a7c <_Invalidate1Abs+0xd8>)
 8010a18:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010a1c:	f8b3 e000 	ldrh.w	lr, [r3]
 8010a20:	4334      	orrs	r4, r6
 8010a22:	f102 0708 	add.w	r7, r2, #8
 8010a26:	f10e 0601 	add.w	r6, lr, #1
 8010a2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8010a2e:	801e      	strh	r6, [r3, #0]
 8010a30:	6294      	str	r4, [r2, #40]	; 0x28
 8010a32:	e000      	b.n	8010a36 <_Invalidate1Abs+0x92>
 8010a34:	461d      	mov	r5, r3
 8010a36:	4628      	mov	r0, r5
 8010a38:	f008 fb90 	bl	801915c <GUI_ALLOC_h2p>
 8010a3c:	6983      	ldr	r3, [r0, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1f8      	bne.n	8010a34 <_Invalidate1Abs+0x90>
 8010a42:	4b0f      	ldr	r3, [pc, #60]	; (8010a80 <_Invalidate1Abs+0xdc>)
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	4295      	cmp	r5, r2
 8010a48:	d016      	beq.n	8010a78 <_Invalidate1Abs+0xd4>
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	429d      	cmp	r5, r3
 8010a4e:	bf0c      	ite	eq
 8010a50:	2302      	moveq	r3, #2
 8010a52:	2300      	movne	r3, #0
 8010a54:	4a0b      	ldr	r2, [pc, #44]	; (8010a84 <_Invalidate1Abs+0xe0>)
 8010a56:	6811      	ldr	r1, [r2, #0]
 8010a58:	430b      	orrs	r3, r1
 8010a5a:	6013      	str	r3, [r2, #0]
 8010a5c:	f005 fcfe 	bl	801645c <GUI_SignalEvent>
 8010a60:	a801      	add	r0, sp, #4
 8010a62:	f008 fb97 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010a66:	b005      	add	sp, #20
 8010a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a6a:	f102 0008 	add.w	r0, r2, #8
 8010a6e:	4601      	mov	r1, r0
 8010a70:	463a      	mov	r2, r7
 8010a72:	f007 f9d1 	bl	8017e18 <GUI_MergeRect>
 8010a76:	e7f3      	b.n	8010a60 <_Invalidate1Abs+0xbc>
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e7eb      	b.n	8010a54 <_Invalidate1Abs+0xb0>
 8010a7c:	2002bf8c 	.word	0x2002bf8c
 8010a80:	2002bf74 	.word	0x2002bf74
 8010a84:	2002bf9c 	.word	0x2002bf9c

08010a88 <WM__ActivateClipRect>:
 8010a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a8c:	4f43      	ldr	r7, [pc, #268]	; (8010b9c <WM__ActivateClipRect+0x114>)
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8010a94:	b086      	sub	sp, #24
 8010a96:	2a00      	cmp	r2, #0
 8010a98:	d139      	bne.n	8010b0e <WM__ActivateClipRect+0x86>
 8010a9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010a9c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8010ba0 <WM__ActivateClipRect+0x118>
 8010aa0:	f008 fb66 	bl	8019170 <GUI_ALLOC_LockH>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	c803      	ldmia	r0, {r0, r1}
 8010aa8:	ae02      	add	r6, sp, #8
 8010aaa:	e886 0003 	stmia.w	r6, {r0, r1}
 8010aae:	4668      	mov	r0, sp
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	f008 fb6f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010ab6:	f8d8 4000 	ldr.w	r4, [r8]
 8010aba:	2c00      	cmp	r4, #0
 8010abc:	d14e      	bne.n	8010b5c <WM__ActivateClipRect+0xd4>
 8010abe:	683c      	ldr	r4, [r7, #0]
 8010ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d061      	beq.n	8010b8a <WM__ActivateClipRect+0x102>
 8010ac6:	6818      	ldr	r0, [r3, #0]
 8010ac8:	6859      	ldr	r1, [r3, #4]
 8010aca:	f8d8 2000 	ldr.w	r2, [r8]
 8010ace:	ad04      	add	r5, sp, #16
 8010ad0:	462b      	mov	r3, r5
 8010ad2:	c303      	stmia	r3!, {r0, r1}
 8010ad4:	b1ca      	cbz	r2, 8010b0a <WM__ActivateClipRect+0x82>
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f008 fb4a 	bl	8019170 <GUI_ALLOC_LockH>
 8010adc:	ac06      	add	r4, sp, #24
 8010ade:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010ae2:	f844 0d14 	str.w	r0, [r4, #-20]!
 8010ae6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010aea:	4628      	mov	r0, r5
 8010aec:	f007 f9c6 	bl	8017e7c <GUI_MoveRect>
 8010af0:	4620      	mov	r0, r4
 8010af2:	f008 fb4f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010af6:	4628      	mov	r0, r5
 8010af8:	4631      	mov	r1, r6
 8010afa:	f004 ffd9 	bl	8015ab0 <GUI__IntersectRect>
 8010afe:	4628      	mov	r0, r5
 8010b00:	f004 f86e 	bl	8014be0 <LCD_SetClipRectEx>
 8010b04:	b006      	add	sp, #24
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010b0c:	e7e3      	b.n	8010ad6 <WM__ActivateClipRect+0x4e>
 8010b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	d03e      	beq.n	8010b92 <WM__ActivateClipRect+0x10a>
 8010b14:	4c22      	ldr	r4, [pc, #136]	; (8010ba0 <WM__ActivateClipRect+0x118>)
 8010b16:	6810      	ldr	r0, [r2, #0]
 8010b18:	6851      	ldr	r1, [r2, #4]
 8010b1a:	6824      	ldr	r4, [r4, #0]
 8010b1c:	ad04      	add	r5, sp, #16
 8010b1e:	462a      	mov	r2, r5
 8010b20:	c203      	stmia	r2!, {r0, r1}
 8010b22:	b1cc      	cbz	r4, 8010b58 <WM__ActivateClipRect+0xd0>
 8010b24:	4620      	mov	r0, r4
 8010b26:	f008 fb23 	bl	8019170 <GUI_ALLOC_LockH>
 8010b2a:	ac06      	add	r4, sp, #24
 8010b2c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010b30:	f844 0d10 	str.w	r0, [r4, #-16]!
 8010b34:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f007 f99f 	bl	8017e7c <GUI_MoveRect>
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f008 fb28 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010b44:	4628      	mov	r0, r5
 8010b46:	4917      	ldr	r1, [pc, #92]	; (8010ba4 <WM__ActivateClipRect+0x11c>)
 8010b48:	f004 ffb2 	bl	8015ab0 <GUI__IntersectRect>
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f004 f847 	bl	8014be0 <LCD_SetClipRectEx>
 8010b52:	b006      	add	sp, #24
 8010b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b58:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8010b5a:	e7e3      	b.n	8010b24 <WM__ActivateClipRect+0x9c>
 8010b5c:	ad04      	add	r5, sp, #16
 8010b5e:	e007      	b.n	8010b70 <WM__ActivateClipRect+0xe8>
 8010b60:	f004 ffa6 	bl	8015ab0 <GUI__IntersectRect>
 8010b64:	9b04      	ldr	r3, [sp, #16]
 8010b66:	699c      	ldr	r4, [r3, #24]
 8010b68:	4628      	mov	r0, r5
 8010b6a:	b154      	cbz	r4, 8010b82 <WM__ActivateClipRect+0xfa>
 8010b6c:	f008 fb12 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010b70:	4620      	mov	r0, r4
 8010b72:	f008 fafd 	bl	8019170 <GUI_ALLOC_LockH>
 8010b76:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010b78:	9004      	str	r0, [sp, #16]
 8010b7a:	0793      	lsls	r3, r2, #30
 8010b7c:	4601      	mov	r1, r0
 8010b7e:	4630      	mov	r0, r6
 8010b80:	d4ee      	bmi.n	8010b60 <WM__ActivateClipRect+0xd8>
 8010b82:	4628      	mov	r0, r5
 8010b84:	f008 fb06 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010b88:	e799      	b.n	8010abe <WM__ActivateClipRect+0x36>
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f004 f828 	bl	8014be0 <LCD_SetClipRectEx>
 8010b90:	e7b8      	b.n	8010b04 <WM__ActivateClipRect+0x7c>
 8010b92:	4804      	ldr	r0, [pc, #16]	; (8010ba4 <WM__ActivateClipRect+0x11c>)
 8010b94:	f004 f824 	bl	8014be0 <LCD_SetClipRectEx>
 8010b98:	e7b4      	b.n	8010b04 <WM__ActivateClipRect+0x7c>
 8010b9a:	bf00      	nop
 8010b9c:	2000026c 	.word	0x2000026c
 8010ba0:	2002bf70 	.word	0x2002bf70
 8010ba4:	2002aeb4 	.word	0x2002aeb4

08010ba8 <WM__InsertWindowIntoList>:
 8010ba8:	b570      	push	{r4, r5, r6, lr}
 8010baa:	460c      	mov	r4, r1
 8010bac:	b084      	sub	sp, #16
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b909      	cbnz	r1, 8010bb6 <WM__InsertWindowIntoList+0xe>
 8010bb2:	b004      	add	sp, #16
 8010bb4:	bd70      	pop	{r4, r5, r6, pc}
 8010bb6:	f008 fadb 	bl	8019170 <GUI_ALLOC_LockH>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	6184      	str	r4, [r0, #24]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	621a      	str	r2, [r3, #32]
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	f008 fad3 	bl	8019170 <GUI_ALLOC_LockH>
 8010bca:	9b01      	ldr	r3, [sp, #4]
 8010bcc:	69c4      	ldr	r4, [r0, #28]
 8010bce:	9002      	str	r0, [sp, #8]
 8010bd0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8010bd2:	2c00      	cmp	r4, #0
 8010bd4:	d029      	beq.n	8010c2a <WM__InsertWindowIntoList+0x82>
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f008 faca 	bl	8019170 <GUI_ALLOC_LockH>
 8010bdc:	0731      	lsls	r1, r6, #28
 8010bde:	9003      	str	r0, [sp, #12]
 8010be0:	d43a      	bmi.n	8010c58 <WM__InsertWindowIntoList+0xb0>
 8010be2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010be4:	071a      	lsls	r2, r3, #28
 8010be6:	d429      	bmi.n	8010c3c <WM__InsertWindowIntoList+0x94>
 8010be8:	a802      	add	r0, sp, #8
 8010bea:	f008 fad3 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010bee:	a803      	add	r0, sp, #12
 8010bf0:	f008 fad0 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f008 fab1 	bl	801915c <GUI_ALLOC_h2p>
 8010bfa:	6a04      	ldr	r4, [r0, #32]
 8010bfc:	9003      	str	r0, [sp, #12]
 8010bfe:	b92c      	cbnz	r4, 8010c0c <WM__InsertWindowIntoList+0x64>
 8010c00:	6205      	str	r5, [r0, #32]
 8010c02:	e00d      	b.n	8010c20 <WM__InsertWindowIntoList+0x78>
 8010c04:	6a04      	ldr	r4, [r0, #32]
 8010c06:	9003      	str	r0, [sp, #12]
 8010c08:	2c00      	cmp	r4, #0
 8010c0a:	d0f9      	beq.n	8010c00 <WM__InsertWindowIntoList+0x58>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f008 faa5 	bl	801915c <GUI_ALLOC_h2p>
 8010c12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010c14:	071b      	lsls	r3, r3, #28
 8010c16:	d5f5      	bpl.n	8010c04 <WM__InsertWindowIntoList+0x5c>
 8010c18:	9a03      	ldr	r2, [sp, #12]
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	6215      	str	r5, [r2, #32]
 8010c1e:	621c      	str	r4, [r3, #32]
 8010c20:	a801      	add	r0, sp, #4
 8010c22:	f008 fab7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c26:	b004      	add	sp, #16
 8010c28:	bd70      	pop	{r4, r5, r6, pc}
 8010c2a:	61c5      	str	r5, [r0, #28]
 8010c2c:	a801      	add	r0, sp, #4
 8010c2e:	f008 fab1 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c32:	a802      	add	r0, sp, #8
 8010c34:	f008 faae 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c38:	b004      	add	sp, #16
 8010c3a:	bd70      	pop	{r4, r5, r6, pc}
 8010c3c:	9a01      	ldr	r2, [sp, #4]
 8010c3e:	9b02      	ldr	r3, [sp, #8]
 8010c40:	6214      	str	r4, [r2, #32]
 8010c42:	a801      	add	r0, sp, #4
 8010c44:	61dd      	str	r5, [r3, #28]
 8010c46:	f008 faa5 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c4a:	a802      	add	r0, sp, #8
 8010c4c:	f008 faa2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c50:	a803      	add	r0, sp, #12
 8010c52:	f008 fa9f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c56:	e7ac      	b.n	8010bb2 <WM__InsertWindowIntoList+0xa>
 8010c58:	a802      	add	r0, sp, #8
 8010c5a:	f008 fa9b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c5e:	a803      	add	r0, sp, #12
 8010c60:	f008 fa98 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010c64:	4620      	mov	r0, r4
 8010c66:	f008 fa79 	bl	801915c <GUI_ALLOC_h2p>
 8010c6a:	6a03      	ldr	r3, [r0, #32]
 8010c6c:	9003      	str	r0, [sp, #12]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0c6      	beq.n	8010c00 <WM__InsertWindowIntoList+0x58>
 8010c72:	4618      	mov	r0, r3
 8010c74:	f008 fa72 	bl	801915c <GUI_ALLOC_h2p>
 8010c78:	6a03      	ldr	r3, [r0, #32]
 8010c7a:	9003      	str	r0, [sp, #12]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1f8      	bne.n	8010c72 <WM__InsertWindowIntoList+0xca>
 8010c80:	e7be      	b.n	8010c00 <WM__InsertWindowIntoList+0x58>
 8010c82:	bf00      	nop

08010c84 <WM__RemoveWindowFromList>:
 8010c84:	b570      	push	{r4, r5, r6, lr}
 8010c86:	4604      	mov	r4, r0
 8010c88:	f008 fa68 	bl	801915c <GUI_ALLOC_h2p>
 8010c8c:	4605      	mov	r5, r0
 8010c8e:	6980      	ldr	r0, [r0, #24]
 8010c90:	b900      	cbnz	r0, 8010c94 <WM__RemoveWindowFromList+0x10>
 8010c92:	bd70      	pop	{r4, r5, r6, pc}
 8010c94:	f008 fa62 	bl	801915c <GUI_ALLOC_h2p>
 8010c98:	69c3      	ldr	r3, [r0, #28]
 8010c9a:	42a3      	cmp	r3, r4
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	d00c      	beq.n	8010cba <WM__RemoveWindowFromList+0x36>
 8010ca0:	b913      	cbnz	r3, 8010ca8 <WM__RemoveWindowFromList+0x24>
 8010ca2:	e010      	b.n	8010cc6 <WM__RemoveWindowFromList+0x42>
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d0f4      	beq.n	8010c92 <WM__RemoveWindowFromList+0xe>
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f008 fa57 	bl	801915c <GUI_ALLOC_h2p>
 8010cae:	6a03      	ldr	r3, [r0, #32]
 8010cb0:	42a3      	cmp	r3, r4
 8010cb2:	d1f7      	bne.n	8010ca4 <WM__RemoveWindowFromList+0x20>
 8010cb4:	6a2b      	ldr	r3, [r5, #32]
 8010cb6:	6203      	str	r3, [r0, #32]
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f008 fa4e 	bl	801915c <GUI_ALLOC_h2p>
 8010cc0:	6a03      	ldr	r3, [r0, #32]
 8010cc2:	61f3      	str	r3, [r6, #28]
 8010cc4:	bd70      	pop	{r4, r5, r6, pc}
 8010cc6:	bd70      	pop	{r4, r5, r6, pc}

08010cc8 <WM__IsWindow>:
 8010cc8:	4b09      	ldr	r3, [pc, #36]	; (8010cf0 <WM__IsWindow+0x28>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	4604      	mov	r4, r0
 8010cd0:	b153      	cbz	r3, 8010ce8 <WM__IsWindow+0x20>
 8010cd2:	4283      	cmp	r3, r0
 8010cd4:	d102      	bne.n	8010cdc <WM__IsWindow+0x14>
 8010cd6:	e009      	b.n	8010cec <WM__IsWindow+0x24>
 8010cd8:	429c      	cmp	r4, r3
 8010cda:	d007      	beq.n	8010cec <WM__IsWindow+0x24>
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f008 fa3d 	bl	801915c <GUI_ALLOC_h2p>
 8010ce2:	6943      	ldr	r3, [r0, #20]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d1f7      	bne.n	8010cd8 <WM__IsWindow+0x10>
 8010ce8:	2000      	movs	r0, #0
 8010cea:	bd10      	pop	{r4, pc}
 8010cec:	2001      	movs	r0, #1
 8010cee:	bd10      	pop	{r4, pc}
 8010cf0:	2002bf90 	.word	0x2002bf90

08010cf4 <WM__InvalidateDrawAndDescs>:
 8010cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	b08f      	sub	sp, #60	; 0x3c
 8010cfc:	b910      	cbnz	r0, 8010d04 <WM__InvalidateDrawAndDescs+0x10>
 8010cfe:	b00f      	add	sp, #60	; 0x3c
 8010d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d04:	f008 fa34 	bl	8019170 <GUI_ALLOC_LockH>
 8010d08:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010d0a:	9005      	str	r0, [sp, #20]
 8010d0c:	0792      	lsls	r2, r2, #30
 8010d0e:	f140 813c 	bpl.w	8010f8a <WM__InvalidateDrawAndDescs+0x296>
 8010d12:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010d14:	b140      	cbz	r0, 8010d28 <WM__InvalidateDrawAndDescs+0x34>
 8010d16:	4ba0      	ldr	r3, [pc, #640]	; (8010f98 <WM__InvalidateDrawAndDescs+0x2a4>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	42a3      	cmp	r3, r4
 8010d1c:	d004      	beq.n	8010d28 <WM__InvalidateDrawAndDescs+0x34>
 8010d1e:	f002 feff 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010d22:	9b05      	ldr	r3, [sp, #20]
 8010d24:	2200      	movs	r2, #0
 8010d26:	625a      	str	r2, [r3, #36]	; 0x24
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f7fe fcb5 	bl	800f698 <WM_GetFirstChild>
 8010d2e:	9003      	str	r0, [sp, #12]
 8010d30:	2800      	cmp	r0, #0
 8010d32:	f000 812a 	beq.w	8010f8a <WM__InvalidateDrawAndDescs+0x296>
 8010d36:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8010f98 <WM__InvalidateDrawAndDescs+0x2a4>
 8010d3a:	9803      	ldr	r0, [sp, #12]
 8010d3c:	f008 fa18 	bl	8019170 <GUI_ALLOC_LockH>
 8010d40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d42:	9006      	str	r0, [sp, #24]
 8010d44:	079b      	lsls	r3, r3, #30
 8010d46:	f140 8115 	bpl.w	8010f74 <WM__InvalidateDrawAndDescs+0x280>
 8010d4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010d4c:	b148      	cbz	r0, 8010d62 <WM__InvalidateDrawAndDescs+0x6e>
 8010d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d52:	9a03      	ldr	r2, [sp, #12]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d004      	beq.n	8010d62 <WM__InvalidateDrawAndDescs+0x6e>
 8010d58:	f002 fee2 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010d5c:	9b06      	ldr	r3, [sp, #24]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	625a      	str	r2, [r3, #36]	; 0x24
 8010d62:	9803      	ldr	r0, [sp, #12]
 8010d64:	f7fe fc98 	bl	800f698 <WM_GetFirstChild>
 8010d68:	9002      	str	r0, [sp, #8]
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	f000 8102 	beq.w	8010f74 <WM__InvalidateDrawAndDescs+0x280>
 8010d70:	9802      	ldr	r0, [sp, #8]
 8010d72:	f008 f9fd 	bl	8019170 <GUI_ALLOC_LockH>
 8010d76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d78:	9007      	str	r0, [sp, #28]
 8010d7a:	079f      	lsls	r7, r3, #30
 8010d7c:	f140 80ef 	bpl.w	8010f5e <WM__InvalidateDrawAndDescs+0x26a>
 8010d80:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010d82:	b148      	cbz	r0, 8010d98 <WM__InvalidateDrawAndDescs+0xa4>
 8010d84:	f8d8 3000 	ldr.w	r3, [r8]
 8010d88:	9a02      	ldr	r2, [sp, #8]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d004      	beq.n	8010d98 <WM__InvalidateDrawAndDescs+0xa4>
 8010d8e:	f002 fec7 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010d92:	9b07      	ldr	r3, [sp, #28]
 8010d94:	2200      	movs	r2, #0
 8010d96:	625a      	str	r2, [r3, #36]	; 0x24
 8010d98:	9802      	ldr	r0, [sp, #8]
 8010d9a:	f7fe fc7d 	bl	800f698 <WM_GetFirstChild>
 8010d9e:	4683      	mov	fp, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	f000 80dc 	beq.w	8010f5e <WM__InvalidateDrawAndDescs+0x26a>
 8010da6:	4658      	mov	r0, fp
 8010da8:	f008 f9e2 	bl	8019170 <GUI_ALLOC_LockH>
 8010dac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010dae:	9008      	str	r0, [sp, #32]
 8010db0:	079e      	lsls	r6, r3, #30
 8010db2:	f140 80c8 	bpl.w	8010f46 <WM__InvalidateDrawAndDescs+0x252>
 8010db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010db8:	b140      	cbz	r0, 8010dcc <WM__InvalidateDrawAndDescs+0xd8>
 8010dba:	f8d8 3000 	ldr.w	r3, [r8]
 8010dbe:	459b      	cmp	fp, r3
 8010dc0:	d004      	beq.n	8010dcc <WM__InvalidateDrawAndDescs+0xd8>
 8010dc2:	f002 fead 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010dc6:	9b08      	ldr	r3, [sp, #32]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	625a      	str	r2, [r3, #36]	; 0x24
 8010dcc:	4658      	mov	r0, fp
 8010dce:	f7fe fc63 	bl	800f698 <WM_GetFirstChild>
 8010dd2:	4682      	mov	sl, r0
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	f000 80b6 	beq.w	8010f46 <WM__InvalidateDrawAndDescs+0x252>
 8010dda:	4650      	mov	r0, sl
 8010ddc:	f008 f9c8 	bl	8019170 <GUI_ALLOC_LockH>
 8010de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010de2:	9009      	str	r0, [sp, #36]	; 0x24
 8010de4:	079d      	lsls	r5, r3, #30
 8010de6:	f140 80a2 	bpl.w	8010f2e <WM__InvalidateDrawAndDescs+0x23a>
 8010dea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010dec:	b140      	cbz	r0, 8010e00 <WM__InvalidateDrawAndDescs+0x10c>
 8010dee:	f8d8 3000 	ldr.w	r3, [r8]
 8010df2:	459a      	cmp	sl, r3
 8010df4:	d004      	beq.n	8010e00 <WM__InvalidateDrawAndDescs+0x10c>
 8010df6:	f002 fe93 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8010e00:	4650      	mov	r0, sl
 8010e02:	f7fe fc49 	bl	800f698 <WM_GetFirstChild>
 8010e06:	9001      	str	r0, [sp, #4]
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	f000 8090 	beq.w	8010f2e <WM__InvalidateDrawAndDescs+0x23a>
 8010e0e:	9801      	ldr	r0, [sp, #4]
 8010e10:	f008 f9ae 	bl	8019170 <GUI_ALLOC_LockH>
 8010e14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010e16:	900a      	str	r0, [sp, #40]	; 0x28
 8010e18:	079c      	lsls	r4, r3, #30
 8010e1a:	d57d      	bpl.n	8010f18 <WM__InvalidateDrawAndDescs+0x224>
 8010e1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e1e:	b148      	cbz	r0, 8010e34 <WM__InvalidateDrawAndDescs+0x140>
 8010e20:	f8d8 3000 	ldr.w	r3, [r8]
 8010e24:	9a01      	ldr	r2, [sp, #4]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d004      	beq.n	8010e34 <WM__InvalidateDrawAndDescs+0x140>
 8010e2a:	f002 fe79 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e30:	2200      	movs	r2, #0
 8010e32:	625a      	str	r2, [r3, #36]	; 0x24
 8010e34:	9801      	ldr	r0, [sp, #4]
 8010e36:	f7fe fc2f 	bl	800f698 <WM_GetFirstChild>
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d06b      	beq.n	8010f18 <WM__InvalidateDrawAndDescs+0x224>
 8010e40:	4630      	mov	r0, r6
 8010e42:	f008 f995 	bl	8019170 <GUI_ALLOC_LockH>
 8010e46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010e48:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e4a:	0799      	lsls	r1, r3, #30
 8010e4c:	d55b      	bpl.n	8010f06 <WM__InvalidateDrawAndDescs+0x212>
 8010e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e50:	b140      	cbz	r0, 8010e64 <WM__InvalidateDrawAndDescs+0x170>
 8010e52:	f8d8 3000 	ldr.w	r3, [r8]
 8010e56:	429e      	cmp	r6, r3
 8010e58:	d004      	beq.n	8010e64 <WM__InvalidateDrawAndDescs+0x170>
 8010e5a:	f002 fe61 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e60:	2200      	movs	r2, #0
 8010e62:	625a      	str	r2, [r3, #36]	; 0x24
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7fe fc17 	bl	800f698 <WM_GetFirstChild>
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d04a      	beq.n	8010f06 <WM__InvalidateDrawAndDescs+0x212>
 8010e70:	4628      	mov	r0, r5
 8010e72:	f008 f97d 	bl	8019170 <GUI_ALLOC_LockH>
 8010e76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010e78:	900c      	str	r0, [sp, #48]	; 0x30
 8010e7a:	079a      	lsls	r2, r3, #30
 8010e7c:	d53a      	bpl.n	8010ef4 <WM__InvalidateDrawAndDescs+0x200>
 8010e7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e80:	b140      	cbz	r0, 8010e94 <WM__InvalidateDrawAndDescs+0x1a0>
 8010e82:	f8d8 3000 	ldr.w	r3, [r8]
 8010e86:	429d      	cmp	r5, r3
 8010e88:	d004      	beq.n	8010e94 <WM__InvalidateDrawAndDescs+0x1a0>
 8010e8a:	f002 fe49 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e90:	2200      	movs	r2, #0
 8010e92:	625a      	str	r2, [r3, #36]	; 0x24
 8010e94:	4628      	mov	r0, r5
 8010e96:	f7fe fbff 	bl	800f698 <WM_GetFirstChild>
 8010e9a:	f04f 0900 	mov.w	r9, #0
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	b340      	cbz	r0, 8010ef4 <WM__InvalidateDrawAndDescs+0x200>
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f008 f964 	bl	8019170 <GUI_ALLOC_LockH>
 8010ea8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010eaa:	900d      	str	r0, [sp, #52]	; 0x34
 8010eac:	079b      	lsls	r3, r3, #30
 8010eae:	d518      	bpl.n	8010ee2 <WM__InvalidateDrawAndDescs+0x1ee>
 8010eb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010eb2:	b140      	cbz	r0, 8010ec6 <WM__InvalidateDrawAndDescs+0x1d2>
 8010eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8010eb8:	429c      	cmp	r4, r3
 8010eba:	d004      	beq.n	8010ec6 <WM__InvalidateDrawAndDescs+0x1d2>
 8010ebc:	f002 fe30 	bl	8013b20 <GUI_MEMDEV_Delete>
 8010ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ec2:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f7fe fbe6 	bl	800f698 <WM_GetFirstChild>
 8010ecc:	4607      	mov	r7, r0
 8010ece:	b140      	cbz	r0, 8010ee2 <WM__InvalidateDrawAndDescs+0x1ee>
 8010ed0:	4638      	mov	r0, r7
 8010ed2:	f7ff ff0f 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	f008 f940 	bl	801915c <GUI_ALLOC_h2p>
 8010edc:	6a07      	ldr	r7, [r0, #32]
 8010ede:	2f00      	cmp	r7, #0
 8010ee0:	d1f6      	bne.n	8010ed0 <WM__InvalidateDrawAndDescs+0x1dc>
 8010ee2:	a80d      	add	r0, sp, #52	; 0x34
 8010ee4:	f008 f956 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f008 f937 	bl	801915c <GUI_ALLOC_h2p>
 8010eee:	6a04      	ldr	r4, [r0, #32]
 8010ef0:	2c00      	cmp	r4, #0
 8010ef2:	d1d6      	bne.n	8010ea2 <WM__InvalidateDrawAndDescs+0x1ae>
 8010ef4:	a80c      	add	r0, sp, #48	; 0x30
 8010ef6:	f008 f94d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010efa:	4628      	mov	r0, r5
 8010efc:	f008 f92e 	bl	801915c <GUI_ALLOC_h2p>
 8010f00:	6a05      	ldr	r5, [r0, #32]
 8010f02:	2d00      	cmp	r5, #0
 8010f04:	d1b4      	bne.n	8010e70 <WM__InvalidateDrawAndDescs+0x17c>
 8010f06:	a80b      	add	r0, sp, #44	; 0x2c
 8010f08:	f008 f944 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f008 f925 	bl	801915c <GUI_ALLOC_h2p>
 8010f12:	6a06      	ldr	r6, [r0, #32]
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	d193      	bne.n	8010e40 <WM__InvalidateDrawAndDescs+0x14c>
 8010f18:	a80a      	add	r0, sp, #40	; 0x28
 8010f1a:	f008 f93b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f1e:	9801      	ldr	r0, [sp, #4]
 8010f20:	f008 f91c 	bl	801915c <GUI_ALLOC_h2p>
 8010f24:	6a00      	ldr	r0, [r0, #32]
 8010f26:	9001      	str	r0, [sp, #4]
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f47f af70 	bne.w	8010e0e <WM__InvalidateDrawAndDescs+0x11a>
 8010f2e:	a809      	add	r0, sp, #36	; 0x24
 8010f30:	f008 f930 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f34:	4650      	mov	r0, sl
 8010f36:	f008 f911 	bl	801915c <GUI_ALLOC_h2p>
 8010f3a:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8010f3e:	f1ba 0f00 	cmp.w	sl, #0
 8010f42:	f47f af4a 	bne.w	8010dda <WM__InvalidateDrawAndDescs+0xe6>
 8010f46:	a808      	add	r0, sp, #32
 8010f48:	f008 f924 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f4c:	4658      	mov	r0, fp
 8010f4e:	f008 f905 	bl	801915c <GUI_ALLOC_h2p>
 8010f52:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8010f56:	f1bb 0f00 	cmp.w	fp, #0
 8010f5a:	f47f af24 	bne.w	8010da6 <WM__InvalidateDrawAndDescs+0xb2>
 8010f5e:	a807      	add	r0, sp, #28
 8010f60:	f008 f918 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f64:	9802      	ldr	r0, [sp, #8]
 8010f66:	f008 f8f9 	bl	801915c <GUI_ALLOC_h2p>
 8010f6a:	6a00      	ldr	r0, [r0, #32]
 8010f6c:	9002      	str	r0, [sp, #8]
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	f47f aefe 	bne.w	8010d70 <WM__InvalidateDrawAndDescs+0x7c>
 8010f74:	a806      	add	r0, sp, #24
 8010f76:	f008 f90d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f7a:	9803      	ldr	r0, [sp, #12]
 8010f7c:	f008 f8ee 	bl	801915c <GUI_ALLOC_h2p>
 8010f80:	6a00      	ldr	r0, [r0, #32]
 8010f82:	9003      	str	r0, [sp, #12]
 8010f84:	2800      	cmp	r0, #0
 8010f86:	f47f aed9 	bne.w	8010d3c <WM__InvalidateDrawAndDescs+0x48>
 8010f8a:	a805      	add	r0, sp, #20
 8010f8c:	f008 f902 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010f90:	b00f      	add	sp, #60	; 0x3c
 8010f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f96:	bf00      	nop
 8010f98:	2002bfc0 	.word	0x2002bfc0

08010f9c <WM_InvalidateWindowAndDescsEx>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	b09f      	sub	sp, #124	; 0x7c
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	9201      	str	r2, [sp, #4]
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	b910      	cbnz	r0, 8010fb0 <WM_InvalidateWindowAndDescsEx+0x14>
 8010faa:	b01f      	add	sp, #124	; 0x7c
 8010fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb0:	f008 f8de 	bl	8019170 <GUI_ALLOC_LockH>
 8010fb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fb6:	9003      	str	r0, [sp, #12]
 8010fb8:	079b      	lsls	r3, r3, #30
 8010fba:	f140 8154 	bpl.w	8011266 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	a80c      	add	r0, sp, #48	; 0x30
 8010fc4:	f004 fd94 	bl	8015af0 <GUI__IntersectRects>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	f000 814c 	beq.w	8011266 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8010fce:	a803      	add	r0, sp, #12
 8010fd0:	f008 f8e0 	bl	8019194 <GUI_ALLOC_UnlockH>
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	a90c      	add	r1, sp, #48	; 0x30
 8010fd8:	9a01      	ldr	r2, [sp, #4]
 8010fda:	f7ff fce3 	bl	80109a4 <_Invalidate1Abs>
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7fe fb5a 	bl	800f698 <WM_GetFirstChild>
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d0df      	beq.n	8010faa <WM_InvalidateWindowAndDescsEx+0xe>
 8010fea:	4620      	mov	r0, r4
 8010fec:	f008 f8c0 	bl	8019170 <GUI_ALLOC_LockH>
 8010ff0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010ff2:	9004      	str	r0, [sp, #16]
 8010ff4:	079f      	lsls	r7, r3, #30
 8010ff6:	f140 813c 	bpl.w	8011272 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	a90c      	add	r1, sp, #48	; 0x30
 8010ffe:	a80e      	add	r0, sp, #56	; 0x38
 8011000:	f004 fd76 	bl	8015af0 <GUI__IntersectRects>
 8011004:	2800      	cmp	r0, #0
 8011006:	f000 8134 	beq.w	8011272 <WM_InvalidateWindowAndDescsEx+0x2d6>
 801100a:	a804      	add	r0, sp, #16
 801100c:	f008 f8c2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011010:	4620      	mov	r0, r4
 8011012:	a90e      	add	r1, sp, #56	; 0x38
 8011014:	9a01      	ldr	r2, [sp, #4]
 8011016:	f7ff fcc5 	bl	80109a4 <_Invalidate1Abs>
 801101a:	4620      	mov	r0, r4
 801101c:	f7fe fb3c 	bl	800f698 <WM_GetFirstChild>
 8011020:	4605      	mov	r5, r0
 8011022:	2800      	cmp	r0, #0
 8011024:	f000 8117 	beq.w	8011256 <WM_InvalidateWindowAndDescsEx+0x2ba>
 8011028:	4628      	mov	r0, r5
 801102a:	f008 f8a1 	bl	8019170 <GUI_ALLOC_LockH>
 801102e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011030:	9005      	str	r0, [sp, #20]
 8011032:	079e      	lsls	r6, r3, #30
 8011034:	f140 8128 	bpl.w	8011288 <WM_InvalidateWindowAndDescsEx+0x2ec>
 8011038:	4602      	mov	r2, r0
 801103a:	a90e      	add	r1, sp, #56	; 0x38
 801103c:	a810      	add	r0, sp, #64	; 0x40
 801103e:	f004 fd57 	bl	8015af0 <GUI__IntersectRects>
 8011042:	2800      	cmp	r0, #0
 8011044:	f000 8120 	beq.w	8011288 <WM_InvalidateWindowAndDescsEx+0x2ec>
 8011048:	a805      	add	r0, sp, #20
 801104a:	f008 f8a3 	bl	8019194 <GUI_ALLOC_UnlockH>
 801104e:	4628      	mov	r0, r5
 8011050:	a910      	add	r1, sp, #64	; 0x40
 8011052:	9a01      	ldr	r2, [sp, #4]
 8011054:	f7ff fca6 	bl	80109a4 <_Invalidate1Abs>
 8011058:	4628      	mov	r0, r5
 801105a:	f7fe fb1d 	bl	800f698 <WM_GetFirstChild>
 801105e:	4606      	mov	r6, r0
 8011060:	2800      	cmp	r0, #0
 8011062:	f000 80f1 	beq.w	8011248 <WM_InvalidateWindowAndDescsEx+0x2ac>
 8011066:	4630      	mov	r0, r6
 8011068:	f008 f882 	bl	8019170 <GUI_ALLOC_LockH>
 801106c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801106e:	9006      	str	r0, [sp, #24]
 8011070:	0799      	lsls	r1, r3, #30
 8011072:	f140 8114 	bpl.w	801129e <WM_InvalidateWindowAndDescsEx+0x302>
 8011076:	4602      	mov	r2, r0
 8011078:	a910      	add	r1, sp, #64	; 0x40
 801107a:	a812      	add	r0, sp, #72	; 0x48
 801107c:	f004 fd38 	bl	8015af0 <GUI__IntersectRects>
 8011080:	2800      	cmp	r0, #0
 8011082:	f000 810c 	beq.w	801129e <WM_InvalidateWindowAndDescsEx+0x302>
 8011086:	a806      	add	r0, sp, #24
 8011088:	f008 f884 	bl	8019194 <GUI_ALLOC_UnlockH>
 801108c:	4630      	mov	r0, r6
 801108e:	a912      	add	r1, sp, #72	; 0x48
 8011090:	9a01      	ldr	r2, [sp, #4]
 8011092:	f7ff fc87 	bl	80109a4 <_Invalidate1Abs>
 8011096:	4630      	mov	r0, r6
 8011098:	f7fe fafe 	bl	800f698 <WM_GetFirstChild>
 801109c:	4607      	mov	r7, r0
 801109e:	2800      	cmp	r0, #0
 80110a0:	f000 80cb 	beq.w	801123a <WM_InvalidateWindowAndDescsEx+0x29e>
 80110a4:	4638      	mov	r0, r7
 80110a6:	f008 f863 	bl	8019170 <GUI_ALLOC_LockH>
 80110aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110ac:	9007      	str	r0, [sp, #28]
 80110ae:	079a      	lsls	r2, r3, #30
 80110b0:	f140 8100 	bpl.w	80112b4 <WM_InvalidateWindowAndDescsEx+0x318>
 80110b4:	4602      	mov	r2, r0
 80110b6:	a912      	add	r1, sp, #72	; 0x48
 80110b8:	a814      	add	r0, sp, #80	; 0x50
 80110ba:	f004 fd19 	bl	8015af0 <GUI__IntersectRects>
 80110be:	2800      	cmp	r0, #0
 80110c0:	f000 80f8 	beq.w	80112b4 <WM_InvalidateWindowAndDescsEx+0x318>
 80110c4:	a807      	add	r0, sp, #28
 80110c6:	f008 f865 	bl	8019194 <GUI_ALLOC_UnlockH>
 80110ca:	4638      	mov	r0, r7
 80110cc:	a914      	add	r1, sp, #80	; 0x50
 80110ce:	9a01      	ldr	r2, [sp, #4]
 80110d0:	f7ff fc68 	bl	80109a4 <_Invalidate1Abs>
 80110d4:	4638      	mov	r0, r7
 80110d6:	f7fe fadf 	bl	800f698 <WM_GetFirstChild>
 80110da:	4680      	mov	r8, r0
 80110dc:	2800      	cmp	r0, #0
 80110de:	f000 80a5 	beq.w	801122c <WM_InvalidateWindowAndDescsEx+0x290>
 80110e2:	4640      	mov	r0, r8
 80110e4:	f008 f844 	bl	8019170 <GUI_ALLOC_LockH>
 80110e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110ea:	9008      	str	r0, [sp, #32]
 80110ec:	079b      	lsls	r3, r3, #30
 80110ee:	f140 80ec 	bpl.w	80112ca <WM_InvalidateWindowAndDescsEx+0x32e>
 80110f2:	4602      	mov	r2, r0
 80110f4:	a914      	add	r1, sp, #80	; 0x50
 80110f6:	a816      	add	r0, sp, #88	; 0x58
 80110f8:	f004 fcfa 	bl	8015af0 <GUI__IntersectRects>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f000 80e4 	beq.w	80112ca <WM_InvalidateWindowAndDescsEx+0x32e>
 8011102:	a808      	add	r0, sp, #32
 8011104:	f008 f846 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011108:	4640      	mov	r0, r8
 801110a:	a916      	add	r1, sp, #88	; 0x58
 801110c:	9a01      	ldr	r2, [sp, #4]
 801110e:	f7ff fc49 	bl	80109a4 <_Invalidate1Abs>
 8011112:	4640      	mov	r0, r8
 8011114:	f7fe fac0 	bl	800f698 <WM_GetFirstChild>
 8011118:	4681      	mov	r9, r0
 801111a:	2800      	cmp	r0, #0
 801111c:	d07d      	beq.n	801121a <WM_InvalidateWindowAndDescsEx+0x27e>
 801111e:	4648      	mov	r0, r9
 8011120:	f008 f826 	bl	8019170 <GUI_ALLOC_LockH>
 8011124:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011126:	9009      	str	r0, [sp, #36]	; 0x24
 8011128:	0799      	lsls	r1, r3, #30
 801112a:	f140 80db 	bpl.w	80112e4 <WM_InvalidateWindowAndDescsEx+0x348>
 801112e:	4602      	mov	r2, r0
 8011130:	a916      	add	r1, sp, #88	; 0x58
 8011132:	a818      	add	r0, sp, #96	; 0x60
 8011134:	f004 fcdc 	bl	8015af0 <GUI__IntersectRects>
 8011138:	2800      	cmp	r0, #0
 801113a:	f000 80d3 	beq.w	80112e4 <WM_InvalidateWindowAndDescsEx+0x348>
 801113e:	a809      	add	r0, sp, #36	; 0x24
 8011140:	f008 f828 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011144:	4648      	mov	r0, r9
 8011146:	a918      	add	r1, sp, #96	; 0x60
 8011148:	9a01      	ldr	r2, [sp, #4]
 801114a:	f7ff fc2b 	bl	80109a4 <_Invalidate1Abs>
 801114e:	4648      	mov	r0, r9
 8011150:	f7fe faa2 	bl	800f698 <WM_GetFirstChild>
 8011154:	4682      	mov	sl, r0
 8011156:	2800      	cmp	r0, #0
 8011158:	d057      	beq.n	801120a <WM_InvalidateWindowAndDescsEx+0x26e>
 801115a:	4650      	mov	r0, sl
 801115c:	f008 f808 	bl	8019170 <GUI_ALLOC_LockH>
 8011160:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011162:	900a      	str	r0, [sp, #40]	; 0x28
 8011164:	079a      	lsls	r2, r3, #30
 8011166:	f140 80ca 	bpl.w	80112fe <WM_InvalidateWindowAndDescsEx+0x362>
 801116a:	4602      	mov	r2, r0
 801116c:	a918      	add	r1, sp, #96	; 0x60
 801116e:	a81a      	add	r0, sp, #104	; 0x68
 8011170:	f004 fcbe 	bl	8015af0 <GUI__IntersectRects>
 8011174:	2800      	cmp	r0, #0
 8011176:	f000 80c2 	beq.w	80112fe <WM_InvalidateWindowAndDescsEx+0x362>
 801117a:	a80a      	add	r0, sp, #40	; 0x28
 801117c:	f008 f80a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011180:	4650      	mov	r0, sl
 8011182:	a91a      	add	r1, sp, #104	; 0x68
 8011184:	9a01      	ldr	r2, [sp, #4]
 8011186:	f7ff fc0d 	bl	80109a4 <_Invalidate1Abs>
 801118a:	4650      	mov	r0, sl
 801118c:	f7fe fa84 	bl	800f698 <WM_GetFirstChild>
 8011190:	4683      	mov	fp, r0
 8011192:	2800      	cmp	r0, #0
 8011194:	d031      	beq.n	80111fa <WM_InvalidateWindowAndDescsEx+0x25e>
 8011196:	4658      	mov	r0, fp
 8011198:	f007 ffea 	bl	8019170 <GUI_ALLOC_LockH>
 801119c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801119e:	900b      	str	r0, [sp, #44]	; 0x2c
 80111a0:	079b      	lsls	r3, r3, #30
 80111a2:	f140 80b9 	bpl.w	8011318 <WM_InvalidateWindowAndDescsEx+0x37c>
 80111a6:	4602      	mov	r2, r0
 80111a8:	a91a      	add	r1, sp, #104	; 0x68
 80111aa:	a81c      	add	r0, sp, #112	; 0x70
 80111ac:	f004 fca0 	bl	8015af0 <GUI__IntersectRects>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	f000 80b1 	beq.w	8011318 <WM_InvalidateWindowAndDescsEx+0x37c>
 80111b6:	a80b      	add	r0, sp, #44	; 0x2c
 80111b8:	f007 ffec 	bl	8019194 <GUI_ALLOC_UnlockH>
 80111bc:	4658      	mov	r0, fp
 80111be:	a91c      	add	r1, sp, #112	; 0x70
 80111c0:	9a01      	ldr	r2, [sp, #4]
 80111c2:	f7ff fbef 	bl	80109a4 <_Invalidate1Abs>
 80111c6:	4658      	mov	r0, fp
 80111c8:	f7fe fa66 	bl	800f698 <WM_GetFirstChild>
 80111cc:	4603      	mov	r3, r0
 80111ce:	b160      	cbz	r0, 80111ea <WM_InvalidateWindowAndDescsEx+0x24e>
 80111d0:	4618      	mov	r0, r3
 80111d2:	a91c      	add	r1, sp, #112	; 0x70
 80111d4:	9a01      	ldr	r2, [sp, #4]
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	f7ff fee0 	bl	8010f9c <WM_InvalidateWindowAndDescsEx>
 80111dc:	9b00      	ldr	r3, [sp, #0]
 80111de:	4618      	mov	r0, r3
 80111e0:	f007 ffbc 	bl	801915c <GUI_ALLOC_h2p>
 80111e4:	6a03      	ldr	r3, [r0, #32]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1f2      	bne.n	80111d0 <WM_InvalidateWindowAndDescsEx+0x234>
 80111ea:	4658      	mov	r0, fp
 80111ec:	f007 ffb6 	bl	801915c <GUI_ALLOC_h2p>
 80111f0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80111f4:	f1bb 0f00 	cmp.w	fp, #0
 80111f8:	d1cd      	bne.n	8011196 <WM_InvalidateWindowAndDescsEx+0x1fa>
 80111fa:	4650      	mov	r0, sl
 80111fc:	f007 ffae 	bl	801915c <GUI_ALLOC_h2p>
 8011200:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8011204:	f1ba 0f00 	cmp.w	sl, #0
 8011208:	d1a7      	bne.n	801115a <WM_InvalidateWindowAndDescsEx+0x1be>
 801120a:	4648      	mov	r0, r9
 801120c:	f007 ffa6 	bl	801915c <GUI_ALLOC_h2p>
 8011210:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8011214:	f1b9 0f00 	cmp.w	r9, #0
 8011218:	d181      	bne.n	801111e <WM_InvalidateWindowAndDescsEx+0x182>
 801121a:	4640      	mov	r0, r8
 801121c:	f007 ff9e 	bl	801915c <GUI_ALLOC_h2p>
 8011220:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8011224:	f1b8 0f00 	cmp.w	r8, #0
 8011228:	f47f af5b 	bne.w	80110e2 <WM_InvalidateWindowAndDescsEx+0x146>
 801122c:	4638      	mov	r0, r7
 801122e:	f007 ff95 	bl	801915c <GUI_ALLOC_h2p>
 8011232:	6a07      	ldr	r7, [r0, #32]
 8011234:	2f00      	cmp	r7, #0
 8011236:	f47f af35 	bne.w	80110a4 <WM_InvalidateWindowAndDescsEx+0x108>
 801123a:	4630      	mov	r0, r6
 801123c:	f007 ff8e 	bl	801915c <GUI_ALLOC_h2p>
 8011240:	6a06      	ldr	r6, [r0, #32]
 8011242:	2e00      	cmp	r6, #0
 8011244:	f47f af0f 	bne.w	8011066 <WM_InvalidateWindowAndDescsEx+0xca>
 8011248:	4628      	mov	r0, r5
 801124a:	f007 ff87 	bl	801915c <GUI_ALLOC_h2p>
 801124e:	6a05      	ldr	r5, [r0, #32]
 8011250:	2d00      	cmp	r5, #0
 8011252:	f47f aee9 	bne.w	8011028 <WM_InvalidateWindowAndDescsEx+0x8c>
 8011256:	4620      	mov	r0, r4
 8011258:	f007 ff80 	bl	801915c <GUI_ALLOC_h2p>
 801125c:	6a04      	ldr	r4, [r0, #32]
 801125e:	2c00      	cmp	r4, #0
 8011260:	f47f aec3 	bne.w	8010fea <WM_InvalidateWindowAndDescsEx+0x4e>
 8011264:	e6a1      	b.n	8010faa <WM_InvalidateWindowAndDescsEx+0xe>
 8011266:	a803      	add	r0, sp, #12
 8011268:	f007 ff94 	bl	8019194 <GUI_ALLOC_UnlockH>
 801126c:	b01f      	add	sp, #124	; 0x7c
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011272:	a804      	add	r0, sp, #16
 8011274:	f007 ff8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011278:	4620      	mov	r0, r4
 801127a:	f007 ff6f 	bl	801915c <GUI_ALLOC_h2p>
 801127e:	6a04      	ldr	r4, [r0, #32]
 8011280:	2c00      	cmp	r4, #0
 8011282:	f47f aeb2 	bne.w	8010fea <WM_InvalidateWindowAndDescsEx+0x4e>
 8011286:	e690      	b.n	8010faa <WM_InvalidateWindowAndDescsEx+0xe>
 8011288:	a805      	add	r0, sp, #20
 801128a:	f007 ff83 	bl	8019194 <GUI_ALLOC_UnlockH>
 801128e:	4628      	mov	r0, r5
 8011290:	f007 ff64 	bl	801915c <GUI_ALLOC_h2p>
 8011294:	6a05      	ldr	r5, [r0, #32]
 8011296:	2d00      	cmp	r5, #0
 8011298:	f47f aec6 	bne.w	8011028 <WM_InvalidateWindowAndDescsEx+0x8c>
 801129c:	e7db      	b.n	8011256 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801129e:	a806      	add	r0, sp, #24
 80112a0:	f007 ff78 	bl	8019194 <GUI_ALLOC_UnlockH>
 80112a4:	4630      	mov	r0, r6
 80112a6:	f007 ff59 	bl	801915c <GUI_ALLOC_h2p>
 80112aa:	6a06      	ldr	r6, [r0, #32]
 80112ac:	2e00      	cmp	r6, #0
 80112ae:	f47f aeda 	bne.w	8011066 <WM_InvalidateWindowAndDescsEx+0xca>
 80112b2:	e7c9      	b.n	8011248 <WM_InvalidateWindowAndDescsEx+0x2ac>
 80112b4:	a807      	add	r0, sp, #28
 80112b6:	f007 ff6d 	bl	8019194 <GUI_ALLOC_UnlockH>
 80112ba:	4638      	mov	r0, r7
 80112bc:	f007 ff4e 	bl	801915c <GUI_ALLOC_h2p>
 80112c0:	6a07      	ldr	r7, [r0, #32]
 80112c2:	2f00      	cmp	r7, #0
 80112c4:	f47f aeee 	bne.w	80110a4 <WM_InvalidateWindowAndDescsEx+0x108>
 80112c8:	e7b7      	b.n	801123a <WM_InvalidateWindowAndDescsEx+0x29e>
 80112ca:	a808      	add	r0, sp, #32
 80112cc:	f007 ff62 	bl	8019194 <GUI_ALLOC_UnlockH>
 80112d0:	4640      	mov	r0, r8
 80112d2:	f007 ff43 	bl	801915c <GUI_ALLOC_h2p>
 80112d6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80112da:	f1b8 0f00 	cmp.w	r8, #0
 80112de:	f47f af00 	bne.w	80110e2 <WM_InvalidateWindowAndDescsEx+0x146>
 80112e2:	e7a3      	b.n	801122c <WM_InvalidateWindowAndDescsEx+0x290>
 80112e4:	a809      	add	r0, sp, #36	; 0x24
 80112e6:	f007 ff55 	bl	8019194 <GUI_ALLOC_UnlockH>
 80112ea:	4648      	mov	r0, r9
 80112ec:	f007 ff36 	bl	801915c <GUI_ALLOC_h2p>
 80112f0:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80112f4:	f1b9 0f00 	cmp.w	r9, #0
 80112f8:	f47f af11 	bne.w	801111e <WM_InvalidateWindowAndDescsEx+0x182>
 80112fc:	e78d      	b.n	801121a <WM_InvalidateWindowAndDescsEx+0x27e>
 80112fe:	a80a      	add	r0, sp, #40	; 0x28
 8011300:	f007 ff48 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011304:	4650      	mov	r0, sl
 8011306:	f007 ff29 	bl	801915c <GUI_ALLOC_h2p>
 801130a:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801130e:	f1ba 0f00 	cmp.w	sl, #0
 8011312:	f47f af22 	bne.w	801115a <WM_InvalidateWindowAndDescsEx+0x1be>
 8011316:	e778      	b.n	801120a <WM_InvalidateWindowAndDescsEx+0x26e>
 8011318:	a80b      	add	r0, sp, #44	; 0x2c
 801131a:	f007 ff3b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801131e:	4658      	mov	r0, fp
 8011320:	f007 ff1c 	bl	801915c <GUI_ALLOC_h2p>
 8011324:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8011328:	f1bb 0f00 	cmp.w	fp, #0
 801132c:	f47f af33 	bne.w	8011196 <WM_InvalidateWindowAndDescsEx+0x1fa>
 8011330:	e763      	b.n	80111fa <WM_InvalidateWindowAndDescsEx+0x25e>
 8011332:	bf00      	nop

08011334 <WM__InvalidateRect>:
 8011334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011338:	460c      	mov	r4, r1
 801133a:	b086      	sub	sp, #24
 801133c:	4605      	mov	r5, r0
 801133e:	4617      	mov	r7, r2
 8011340:	461e      	mov	r6, r3
 8011342:	b911      	cbnz	r1, 801134a <WM__InvalidateRect+0x16>
 8011344:	b006      	add	sp, #24
 8011346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801134a:	4608      	mov	r0, r1
 801134c:	f007 ff10 	bl	8019170 <GUI_ALLOC_LockH>
 8011350:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8011354:	9000      	str	r0, [sp, #0]
 8011356:	f018 0f02 	tst.w	r8, #2
 801135a:	d043      	beq.n	80113e4 <WM__InvalidateRect+0xb0>
 801135c:	4602      	mov	r2, r0
 801135e:	4629      	mov	r1, r5
 8011360:	a802      	add	r0, sp, #8
 8011362:	f004 fbc5 	bl	8015af0 <GUI__IntersectRects>
 8011366:	2800      	cmp	r0, #0
 8011368:	d03c      	beq.n	80113e4 <WM__InvalidateRect+0xb0>
 801136a:	f640 0301 	movw	r3, #2049	; 0x801
 801136e:	ea08 0303 	and.w	r3, r8, r3
 8011372:	2b01      	cmp	r3, #1
 8011374:	d040      	beq.n	80113f8 <WM__InvalidateRect+0xc4>
 8011376:	4620      	mov	r0, r4
 8011378:	a902      	add	r1, sp, #8
 801137a:	4632      	mov	r2, r6
 801137c:	f7ff fb12 	bl	80109a4 <_Invalidate1Abs>
 8011380:	9b00      	ldr	r3, [sp, #0]
 8011382:	69dc      	ldr	r4, [r3, #28]
 8011384:	2c00      	cmp	r4, #0
 8011386:	d02d      	beq.n	80113e4 <WM__InvalidateRect+0xb0>
 8011388:	42bc      	cmp	r4, r7
 801138a:	d02b      	beq.n	80113e4 <WM__InvalidateRect+0xb0>
 801138c:	4620      	mov	r0, r4
 801138e:	f007 feef 	bl	8019170 <GUI_ALLOC_LockH>
 8011392:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011394:	9001      	str	r0, [sp, #4]
 8011396:	079b      	lsls	r3, r3, #30
 8011398:	d52a      	bpl.n	80113f0 <WM__InvalidateRect+0xbc>
 801139a:	4602      	mov	r2, r0
 801139c:	a902      	add	r1, sp, #8
 801139e:	a804      	add	r0, sp, #16
 80113a0:	f004 fba6 	bl	8015af0 <GUI__IntersectRects>
 80113a4:	b320      	cbz	r0, 80113f0 <WM__InvalidateRect+0xbc>
 80113a6:	a801      	add	r0, sp, #4
 80113a8:	f007 fef4 	bl	8019194 <GUI_ALLOC_UnlockH>
 80113ac:	4620      	mov	r0, r4
 80113ae:	a904      	add	r1, sp, #16
 80113b0:	4632      	mov	r2, r6
 80113b2:	f7ff faf7 	bl	80109a4 <_Invalidate1Abs>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f7fe f96e 	bl	800f698 <WM_GetFirstChild>
 80113bc:	4605      	mov	r5, r0
 80113be:	b150      	cbz	r0, 80113d6 <WM__InvalidateRect+0xa2>
 80113c0:	4628      	mov	r0, r5
 80113c2:	a904      	add	r1, sp, #16
 80113c4:	4632      	mov	r2, r6
 80113c6:	f7ff fde9 	bl	8010f9c <WM_InvalidateWindowAndDescsEx>
 80113ca:	4628      	mov	r0, r5
 80113cc:	f007 fec6 	bl	801915c <GUI_ALLOC_h2p>
 80113d0:	6a05      	ldr	r5, [r0, #32]
 80113d2:	2d00      	cmp	r5, #0
 80113d4:	d1f4      	bne.n	80113c0 <WM__InvalidateRect+0x8c>
 80113d6:	4620      	mov	r0, r4
 80113d8:	f007 fec0 	bl	801915c <GUI_ALLOC_h2p>
 80113dc:	6a04      	ldr	r4, [r0, #32]
 80113de:	b10c      	cbz	r4, 80113e4 <WM__InvalidateRect+0xb0>
 80113e0:	42a7      	cmp	r7, r4
 80113e2:	d1d3      	bne.n	801138c <WM__InvalidateRect+0x58>
 80113e4:	4668      	mov	r0, sp
 80113e6:	f007 fed5 	bl	8019194 <GUI_ALLOC_UnlockH>
 80113ea:	b006      	add	sp, #24
 80113ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f0:	a801      	add	r0, sp, #4
 80113f2:	f007 fecf 	bl	8019194 <GUI_ALLOC_UnlockH>
 80113f6:	e7ee      	b.n	80113d6 <WM__InvalidateRect+0xa2>
 80113f8:	9b00      	ldr	r3, [sp, #0]
 80113fa:	a802      	add	r0, sp, #8
 80113fc:	6999      	ldr	r1, [r3, #24]
 80113fe:	6a1a      	ldr	r2, [r3, #32]
 8011400:	4633      	mov	r3, r6
 8011402:	f7ff ff97 	bl	8011334 <WM__InvalidateRect>
 8011406:	e7bb      	b.n	8011380 <WM__InvalidateRect+0x4c>

08011408 <WM__DetachWindow>:
 8011408:	b570      	push	{r4, r5, r6, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	4604      	mov	r4, r0
 801140e:	f007 feaf 	bl	8019170 <GUI_ALLOC_LockH>
 8011412:	6981      	ldr	r1, [r0, #24]
 8011414:	9001      	str	r0, [sp, #4]
 8011416:	b921      	cbnz	r1, 8011422 <WM__DetachWindow+0x1a>
 8011418:	a801      	add	r0, sp, #4
 801141a:	f007 febb 	bl	8019194 <GUI_ALLOC_UnlockH>
 801141e:	b002      	add	sp, #8
 8011420:	bd70      	pop	{r4, r5, r6, pc}
 8011422:	6a02      	ldr	r2, [r0, #32]
 8011424:	2320      	movs	r3, #32
 8011426:	f7ff ff85 	bl	8011334 <WM__InvalidateRect>
 801142a:	4620      	mov	r0, r4
 801142c:	f007 fe96 	bl	801915c <GUI_ALLOC_h2p>
 8011430:	4605      	mov	r5, r0
 8011432:	6980      	ldr	r0, [r0, #24]
 8011434:	b938      	cbnz	r0, 8011446 <WM__DetachWindow+0x3e>
 8011436:	9b01      	ldr	r3, [sp, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	619a      	str	r2, [r3, #24]
 801143c:	a801      	add	r0, sp, #4
 801143e:	f007 fea9 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011442:	b002      	add	sp, #8
 8011444:	bd70      	pop	{r4, r5, r6, pc}
 8011446:	f007 fe89 	bl	801915c <GUI_ALLOC_h2p>
 801144a:	69c3      	ldr	r3, [r0, #28]
 801144c:	429c      	cmp	r4, r3
 801144e:	4606      	mov	r6, r0
 8011450:	d00a      	beq.n	8011468 <WM__DetachWindow+0x60>
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0ef      	beq.n	8011436 <WM__DetachWindow+0x2e>
 8011456:	4618      	mov	r0, r3
 8011458:	f007 fe80 	bl	801915c <GUI_ALLOC_h2p>
 801145c:	6a03      	ldr	r3, [r0, #32]
 801145e:	429c      	cmp	r4, r3
 8011460:	d1f7      	bne.n	8011452 <WM__DetachWindow+0x4a>
 8011462:	6a2b      	ldr	r3, [r5, #32]
 8011464:	6203      	str	r3, [r0, #32]
 8011466:	e7e6      	b.n	8011436 <WM__DetachWindow+0x2e>
 8011468:	4620      	mov	r0, r4
 801146a:	f007 fe77 	bl	801915c <GUI_ALLOC_h2p>
 801146e:	6a03      	ldr	r3, [r0, #32]
 8011470:	61f3      	str	r3, [r6, #28]
 8011472:	e7e0      	b.n	8011436 <WM__DetachWindow+0x2e>

08011474 <WM_DeleteWindow.part.2>:
 8011474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011478:	4f69      	ldr	r7, [pc, #420]	; (8011620 <WM_DeleteWindow.part.2+0x1ac>)
 801147a:	b085      	sub	sp, #20
 801147c:	4604      	mov	r4, r0
 801147e:	f005 faf7 	bl	8016a70 <GUI_Lock>
 8011482:	6838      	ldr	r0, [r7, #0]
 8011484:	b930      	cbnz	r0, 8011494 <WM_DeleteWindow.part.2+0x20>
 8011486:	e0aa      	b.n	80115de <WM_DeleteWindow.part.2+0x16a>
 8011488:	f007 fe68 	bl	801915c <GUI_ALLOC_h2p>
 801148c:	6940      	ldr	r0, [r0, #20]
 801148e:	2800      	cmp	r0, #0
 8011490:	f000 80a5 	beq.w	80115de <WM_DeleteWindow.part.2+0x16a>
 8011494:	4284      	cmp	r4, r0
 8011496:	d1f7      	bne.n	8011488 <WM_DeleteWindow.part.2+0x14>
 8011498:	4625      	mov	r5, r4
 801149a:	e000      	b.n	801149e <WM_DeleteWindow.part.2+0x2a>
 801149c:	461d      	mov	r5, r3
 801149e:	4628      	mov	r0, r5
 80114a0:	f007 fe5c 	bl	801915c <GUI_ALLOC_h2p>
 80114a4:	6983      	ldr	r3, [r0, #24]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1f8      	bne.n	801149c <WM_DeleteWindow.part.2+0x28>
 80114aa:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8011644 <WM_DeleteWindow.part.2+0x1d0>
 80114ae:	f8d8 2000 	ldr.w	r2, [r8]
 80114b2:	4295      	cmp	r5, r2
 80114b4:	f000 80ab 	beq.w	801160e <WM_DeleteWindow.part.2+0x19a>
 80114b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80114bc:	429d      	cmp	r5, r3
 80114be:	bf14      	ite	ne
 80114c0:	f04f 35ff 	movne.w	r5, #4294967295
 80114c4:	2501      	moveq	r5, #1
 80114c6:	f10d 0910 	add.w	r9, sp, #16
 80114ca:	230b      	movs	r3, #11
 80114cc:	4669      	mov	r1, sp
 80114ce:	4620      	mov	r0, r4
 80114d0:	f849 3d10 	str.w	r3, [r9, #-16]!
 80114d4:	9401      	str	r4, [sp, #4]
 80114d6:	f7fd f901 	bl	800e6dc <WM__SendMessage>
 80114da:	4620      	mov	r0, r4
 80114dc:	f7fd f9fc 	bl	800e8d8 <WM__DeleteAssocTimer>
 80114e0:	4620      	mov	r0, r4
 80114e2:	f007 fe45 	bl	8019170 <GUI_ALLOC_LockH>
 80114e6:	9000      	str	r0, [sp, #0]
 80114e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80114ea:	2800      	cmp	r0, #0
 80114ec:	f040 808c 	bne.w	8011608 <WM_DeleteWindow.part.2+0x194>
 80114f0:	4b4c      	ldr	r3, [pc, #304]	; (8011624 <WM_DeleteWindow.part.2+0x1b0>)
 80114f2:	4a4d      	ldr	r2, [pc, #308]	; (8011628 <WM_DeleteWindow.part.2+0x1b4>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4e4d      	ldr	r6, [pc, #308]	; (801162c <WM_DeleteWindow.part.2+0x1b8>)
 80114f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80114fc:	2100      	movs	r1, #0
 80114fe:	4284      	cmp	r4, r0
 8011500:	bf08      	it	eq
 8011502:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8011506:	4a4a      	ldr	r2, [pc, #296]	; (8011630 <WM_DeleteWindow.part.2+0x1bc>)
 8011508:	6031      	str	r1, [r6, #0]
 801150a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801150e:	428c      	cmp	r4, r1
 8011510:	bf04      	itt	eq
 8011512:	2100      	moveq	r1, #0
 8011514:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8011518:	4b46      	ldr	r3, [pc, #280]	; (8011634 <WM_DeleteWindow.part.2+0x1c0>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2100      	movs	r1, #0
 801151e:	b133      	cbz	r3, 801152e <WM_DeleteWindow.part.2+0xba>
 8011520:	685a      	ldr	r2, [r3, #4]
 8011522:	4294      	cmp	r4, r2
 8011524:	bf08      	it	eq
 8011526:	6059      	streq	r1, [r3, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1f8      	bne.n	8011520 <WM_DeleteWindow.part.2+0xac>
 801152e:	4620      	mov	r0, r4
 8011530:	2107      	movs	r1, #7
 8011532:	f7fe fbab 	bl	800fc8c <WM_NotifyParent>
 8011536:	9e00      	ldr	r6, [sp, #0]
 8011538:	69f0      	ldr	r0, [r6, #28]
 801153a:	2800      	cmp	r0, #0
 801153c:	d154      	bne.n	80115e8 <WM_DeleteWindow.part.2+0x174>
 801153e:	4620      	mov	r0, r4
 8011540:	f7ff ff62 	bl	8011408 <WM__DetachWindow>
 8011544:	6838      	ldr	r0, [r7, #0]
 8011546:	b908      	cbnz	r0, 801154c <WM_DeleteWindow.part.2+0xd8>
 8011548:	e00b      	b.n	8011562 <WM_DeleteWindow.part.2+0xee>
 801154a:	b150      	cbz	r0, 8011562 <WM_DeleteWindow.part.2+0xee>
 801154c:	f007 fe06 	bl	801915c <GUI_ALLOC_h2p>
 8011550:	4606      	mov	r6, r0
 8011552:	6940      	ldr	r0, [r0, #20]
 8011554:	4284      	cmp	r4, r0
 8011556:	d1f8      	bne.n	801154a <WM_DeleteWindow.part.2+0xd6>
 8011558:	4620      	mov	r0, r4
 801155a:	f007 fdff 	bl	801915c <GUI_ALLOC_h2p>
 801155e:	6943      	ldr	r3, [r0, #20]
 8011560:	6173      	str	r3, [r6, #20]
 8011562:	9b00      	ldr	r3, [sp, #0]
 8011564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011566:	07d9      	lsls	r1, r3, #31
 8011568:	d503      	bpl.n	8011572 <WM_DeleteWindow.part.2+0xfe>
 801156a:	4a33      	ldr	r2, [pc, #204]	; (8011638 <WM_DeleteWindow.part.2+0x1c4>)
 801156c:	6811      	ldr	r1, [r2, #0]
 801156e:	3901      	subs	r1, #1
 8011570:	6011      	str	r1, [r2, #0]
 8011572:	069a      	lsls	r2, r3, #26
 8011574:	d443      	bmi.n	80115fe <WM_DeleteWindow.part.2+0x18a>
 8011576:	4668      	mov	r0, sp
 8011578:	f007 fe0c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801157c:	4b2f      	ldr	r3, [pc, #188]	; (801163c <WM_DeleteWindow.part.2+0x1c8>)
 801157e:	881a      	ldrh	r2, [r3, #0]
 8011580:	4620      	mov	r0, r4
 8011582:	3a01      	subs	r2, #1
 8011584:	801a      	strh	r2, [r3, #0]
 8011586:	f007 ff05 	bl	8019394 <GUI_ALLOC_Free>
 801158a:	1c6b      	adds	r3, r5, #1
 801158c:	d027      	beq.n	80115de <WM_DeleteWindow.part.2+0x16a>
 801158e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8011592:	4e2b      	ldr	r6, [pc, #172]	; (8011640 <WM_DeleteWindow.part.2+0x1cc>)
 8011594:	f005 fa6c 	bl	8016a70 <GUI_Lock>
 8011598:	6833      	ldr	r3, [r6, #0]
 801159a:	b905      	cbnz	r5, 801159e <WM_DeleteWindow.part.2+0x12a>
 801159c:	683d      	ldr	r5, [r7, #0]
 801159e:	649d      	str	r5, [r3, #72]	; 0x48
 80115a0:	462c      	mov	r4, r5
 80115a2:	e000      	b.n	80115a6 <WM_DeleteWindow.part.2+0x132>
 80115a4:	461c      	mov	r4, r3
 80115a6:	4620      	mov	r0, r4
 80115a8:	f007 fdd8 	bl	801915c <GUI_ALLOC_h2p>
 80115ac:	6983      	ldr	r3, [r0, #24]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1f8      	bne.n	80115a4 <WM_DeleteWindow.part.2+0x130>
 80115b2:	f8d8 2000 	ldr.w	r2, [r8]
 80115b6:	4923      	ldr	r1, [pc, #140]	; (8011644 <WM_DeleteWindow.part.2+0x1d0>)
 80115b8:	4294      	cmp	r4, r2
 80115ba:	d02a      	beq.n	8011612 <WM_DeleteWindow.part.2+0x19e>
 80115bc:	684b      	ldr	r3, [r1, #4]
 80115be:	429c      	cmp	r4, r3
 80115c0:	d02b      	beq.n	801161a <WM_DeleteWindow.part.2+0x1a6>
 80115c2:	f004 f8f7 	bl	80157b4 <LCD_SetClipRectMax>
 80115c6:	4628      	mov	r0, r5
 80115c8:	f007 fdc8 	bl	801915c <GUI_ALLOC_h2p>
 80115cc:	6833      	ldr	r3, [r6, #0]
 80115ce:	f9b0 1000 	ldrsh.w	r1, [r0]
 80115d2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80115d6:	651a      	str	r2, [r3, #80]	; 0x50
 80115d8:	64d9      	str	r1, [r3, #76]	; 0x4c
 80115da:	f005 fa3f 	bl	8016a5c <GUI_Unlock>
 80115de:	f005 fa3d 	bl	8016a5c <GUI_Unlock>
 80115e2:	b005      	add	sp, #20
 80115e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e8:	f7ff ff44 	bl	8011474 <WM_DeleteWindow.part.2>
 80115ec:	69f0      	ldr	r0, [r6, #28]
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d0a5      	beq.n	801153e <WM_DeleteWindow.part.2+0xca>
 80115f2:	f7ff ff3f 	bl	8011474 <WM_DeleteWindow.part.2>
 80115f6:	69f0      	ldr	r0, [r6, #28]
 80115f8:	2800      	cmp	r0, #0
 80115fa:	d1f5      	bne.n	80115e8 <WM_DeleteWindow.part.2+0x174>
 80115fc:	e79f      	b.n	801153e <WM_DeleteWindow.part.2+0xca>
 80115fe:	4b12      	ldr	r3, [pc, #72]	; (8011648 <WM_DeleteWindow.part.2+0x1d4>)
 8011600:	881a      	ldrh	r2, [r3, #0]
 8011602:	3a01      	subs	r2, #1
 8011604:	801a      	strh	r2, [r3, #0]
 8011606:	e7b6      	b.n	8011576 <WM_DeleteWindow.part.2+0x102>
 8011608:	f002 fa8a 	bl	8013b20 <GUI_MEMDEV_Delete>
 801160c:	e770      	b.n	80114f0 <WM_DeleteWindow.part.2+0x7c>
 801160e:	461d      	mov	r5, r3
 8011610:	e759      	b.n	80114c6 <WM_DeleteWindow.part.2+0x52>
 8011612:	4618      	mov	r0, r3
 8011614:	f005 fb4c 	bl	8016cb0 <GUI_SelectLayer>
 8011618:	e7d3      	b.n	80115c2 <WM_DeleteWindow.part.2+0x14e>
 801161a:	2001      	movs	r0, #1
 801161c:	e7fa      	b.n	8011614 <WM_DeleteWindow.part.2+0x1a0>
 801161e:	bf00      	nop
 8011620:	2002bf90 	.word	0x2002bf90
 8011624:	2002bf94 	.word	0x2002bf94
 8011628:	2002bf84 	.word	0x2002bf84
 801162c:	2002aec4 	.word	0x2002aec4
 8011630:	2002bfb8 	.word	0x2002bfb8
 8011634:	2002bfb0 	.word	0x2002bfb0
 8011638:	2002bfc4 	.word	0x2002bfc4
 801163c:	2002bf6c 	.word	0x2002bf6c
 8011640:	2000026c 	.word	0x2000026c
 8011644:	2002bf74 	.word	0x2002bf74
 8011648:	2002bf8c 	.word	0x2002bf8c

0801164c <_Exec1Input>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	4e1f      	ldr	r6, [pc, #124]	; (80116cc <_Exec1Input+0x80>)
 8011650:	6833      	ldr	r3, [r6, #0]
 8011652:	b082      	sub	sp, #8
 8011654:	b9cb      	cbnz	r3, 801168a <_Exec1Input+0x3e>
 8011656:	4b1e      	ldr	r3, [pc, #120]	; (80116d0 <_Exec1Input+0x84>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	b103      	cbz	r3, 801165e <_Exec1Input+0x12>
 801165c:	4798      	blx	r3
 801165e:	4b1d      	ldr	r3, [pc, #116]	; (80116d4 <_Exec1Input+0x88>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	b10b      	cbz	r3, 8011668 <_Exec1Input+0x1c>
 8011664:	4798      	blx	r3
 8011666:	b968      	cbnz	r0, 8011684 <_Exec1Input+0x38>
 8011668:	4b1b      	ldr	r3, [pc, #108]	; (80116d8 <_Exec1Input+0x8c>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8011670:	b908      	cbnz	r0, 8011676 <_Exec1Input+0x2a>
 8011672:	b002      	add	sp, #8
 8011674:	bd70      	pop	{r4, r5, r6, pc}
 8011676:	f005 fb43 	bl	8016d00 <GUI_PollKeyMsg>
 801167a:	3000      	adds	r0, #0
 801167c:	bf18      	it	ne
 801167e:	2001      	movne	r0, #1
 8011680:	b002      	add	sp, #8
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	2001      	movs	r0, #1
 8011686:	b002      	add	sp, #8
 8011688:	bd70      	pop	{r4, r5, r6, pc}
 801168a:	f005 f9f1 	bl	8016a70 <GUI_Lock>
 801168e:	4b13      	ldr	r3, [pc, #76]	; (80116dc <_Exec1Input+0x90>)
 8011690:	681c      	ldr	r4, [r3, #0]
 8011692:	b194      	cbz	r4, 80116ba <_Exec1Input+0x6e>
 8011694:	4620      	mov	r0, r4
 8011696:	f007 fd6b 	bl	8019170 <GUI_ALLOC_LockH>
 801169a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801169c:	9001      	str	r0, [sp, #4]
 801169e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80116a2:	4603      	mov	r3, r0
 80116a4:	a801      	add	r0, sp, #4
 80116a6:	d00d      	beq.n	80116c4 <_Exec1Input+0x78>
 80116a8:	695d      	ldr	r5, [r3, #20]
 80116aa:	f007 fd73 	bl	8019194 <GUI_ALLOC_UnlockH>
 80116ae:	4620      	mov	r0, r4
 80116b0:	462c      	mov	r4, r5
 80116b2:	f7ff fedf 	bl	8011474 <WM_DeleteWindow.part.2>
 80116b6:	2c00      	cmp	r4, #0
 80116b8:	d1ec      	bne.n	8011694 <_Exec1Input+0x48>
 80116ba:	2300      	movs	r3, #0
 80116bc:	6033      	str	r3, [r6, #0]
 80116be:	f005 f9cd 	bl	8016a5c <GUI_Unlock>
 80116c2:	e7c8      	b.n	8011656 <_Exec1Input+0xa>
 80116c4:	695c      	ldr	r4, [r3, #20]
 80116c6:	f007 fd65 	bl	8019194 <GUI_ALLOC_UnlockH>
 80116ca:	e7e2      	b.n	8011692 <_Exec1Input+0x46>
 80116cc:	2002aea0 	.word	0x2002aea0
 80116d0:	2002bf7c 	.word	0x2002bf7c
 80116d4:	2002c04c 	.word	0x2002c04c
 80116d8:	2000026c 	.word	0x2000026c
 80116dc:	2002bf90 	.word	0x2002bf90

080116e0 <WM__InvalidateParent>:
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	4605      	mov	r5, r0
 80116e6:	b086      	sub	sp, #24
 80116e8:	4608      	mov	r0, r1
 80116ea:	460c      	mov	r4, r1
 80116ec:	4617      	mov	r7, r2
 80116ee:	f007 fd35 	bl	801915c <GUI_ALLOC_h2p>
 80116f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80116f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80116f8:	bf0c      	ite	eq
 80116fa:	2620      	moveq	r6, #32
 80116fc:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 8011700:	b914      	cbnz	r4, 8011708 <WM__InvalidateParent+0x28>
 8011702:	b006      	add	sp, #24
 8011704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011708:	4620      	mov	r0, r4
 801170a:	f007 fd31 	bl	8019170 <GUI_ALLOC_LockH>
 801170e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8011712:	9000      	str	r0, [sp, #0]
 8011714:	f018 0f02 	tst.w	r8, #2
 8011718:	d042      	beq.n	80117a0 <WM__InvalidateParent+0xc0>
 801171a:	4602      	mov	r2, r0
 801171c:	4629      	mov	r1, r5
 801171e:	a802      	add	r0, sp, #8
 8011720:	f004 f9e6 	bl	8015af0 <GUI__IntersectRects>
 8011724:	2800      	cmp	r0, #0
 8011726:	d03b      	beq.n	80117a0 <WM__InvalidateParent+0xc0>
 8011728:	f640 0301 	movw	r3, #2049	; 0x801
 801172c:	ea08 0303 	and.w	r3, r8, r3
 8011730:	2b01      	cmp	r3, #1
 8011732:	d045      	beq.n	80117c0 <WM__InvalidateParent+0xe0>
 8011734:	4620      	mov	r0, r4
 8011736:	a902      	add	r1, sp, #8
 8011738:	4632      	mov	r2, r6
 801173a:	f7ff f933 	bl	80109a4 <_Invalidate1Abs>
 801173e:	9b00      	ldr	r3, [sp, #0]
 8011740:	69dc      	ldr	r4, [r3, #28]
 8011742:	2c00      	cmp	r4, #0
 8011744:	d02c      	beq.n	80117a0 <WM__InvalidateParent+0xc0>
 8011746:	42a7      	cmp	r7, r4
 8011748:	d02a      	beq.n	80117a0 <WM__InvalidateParent+0xc0>
 801174a:	4620      	mov	r0, r4
 801174c:	f007 fd10 	bl	8019170 <GUI_ALLOC_LockH>
 8011750:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011752:	9001      	str	r0, [sp, #4]
 8011754:	079b      	lsls	r3, r3, #30
 8011756:	d529      	bpl.n	80117ac <WM__InvalidateParent+0xcc>
 8011758:	4602      	mov	r2, r0
 801175a:	a902      	add	r1, sp, #8
 801175c:	a804      	add	r0, sp, #16
 801175e:	f004 f9c7 	bl	8015af0 <GUI__IntersectRects>
 8011762:	b318      	cbz	r0, 80117ac <WM__InvalidateParent+0xcc>
 8011764:	a801      	add	r0, sp, #4
 8011766:	f007 fd15 	bl	8019194 <GUI_ALLOC_UnlockH>
 801176a:	4620      	mov	r0, r4
 801176c:	a904      	add	r1, sp, #16
 801176e:	4632      	mov	r2, r6
 8011770:	f7ff f918 	bl	80109a4 <_Invalidate1Abs>
 8011774:	4620      	mov	r0, r4
 8011776:	f7fd ff8f 	bl	800f698 <WM_GetFirstChild>
 801177a:	4605      	mov	r5, r0
 801177c:	b150      	cbz	r0, 8011794 <WM__InvalidateParent+0xb4>
 801177e:	4628      	mov	r0, r5
 8011780:	a904      	add	r1, sp, #16
 8011782:	4632      	mov	r2, r6
 8011784:	f7ff fc0a 	bl	8010f9c <WM_InvalidateWindowAndDescsEx>
 8011788:	4628      	mov	r0, r5
 801178a:	f007 fce7 	bl	801915c <GUI_ALLOC_h2p>
 801178e:	6a05      	ldr	r5, [r0, #32]
 8011790:	2d00      	cmp	r5, #0
 8011792:	d1f4      	bne.n	801177e <WM__InvalidateParent+0x9e>
 8011794:	4620      	mov	r0, r4
 8011796:	f007 fce1 	bl	801915c <GUI_ALLOC_h2p>
 801179a:	6a04      	ldr	r4, [r0, #32]
 801179c:	2c00      	cmp	r4, #0
 801179e:	d1d2      	bne.n	8011746 <WM__InvalidateParent+0x66>
 80117a0:	4668      	mov	r0, sp
 80117a2:	f007 fcf7 	bl	8019194 <GUI_ALLOC_UnlockH>
 80117a6:	b006      	add	sp, #24
 80117a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ac:	a801      	add	r0, sp, #4
 80117ae:	f007 fcf1 	bl	8019194 <GUI_ALLOC_UnlockH>
 80117b2:	4620      	mov	r0, r4
 80117b4:	f007 fcd2 	bl	801915c <GUI_ALLOC_h2p>
 80117b8:	6a04      	ldr	r4, [r0, #32]
 80117ba:	2c00      	cmp	r4, #0
 80117bc:	d1c3      	bne.n	8011746 <WM__InvalidateParent+0x66>
 80117be:	e7ef      	b.n	80117a0 <WM__InvalidateParent+0xc0>
 80117c0:	9b00      	ldr	r3, [sp, #0]
 80117c2:	a802      	add	r0, sp, #8
 80117c4:	6999      	ldr	r1, [r3, #24]
 80117c6:	6a1a      	ldr	r2, [r3, #32]
 80117c8:	4633      	mov	r3, r6
 80117ca:	f7ff fdb3 	bl	8011334 <WM__InvalidateRect>
 80117ce:	e7b6      	b.n	801173e <WM__InvalidateParent+0x5e>

080117d0 <WM__InvalidateRectEx>:
 80117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117d2:	460c      	mov	r4, r1
 80117d4:	b087      	sub	sp, #28
 80117d6:	4605      	mov	r5, r0
 80117d8:	4616      	mov	r6, r2
 80117da:	b909      	cbnz	r1, 80117e0 <WM__InvalidateRectEx+0x10>
 80117dc:	b007      	add	sp, #28
 80117de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e0:	4608      	mov	r0, r1
 80117e2:	f007 fcc5 	bl	8019170 <GUI_ALLOC_LockH>
 80117e6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80117e8:	9000      	str	r0, [sp, #0]
 80117ea:	07ba      	lsls	r2, r7, #30
 80117ec:	d541      	bpl.n	8011872 <WM__InvalidateRectEx+0xa2>
 80117ee:	4602      	mov	r2, r0
 80117f0:	4629      	mov	r1, r5
 80117f2:	a802      	add	r0, sp, #8
 80117f4:	f004 f97c 	bl	8015af0 <GUI__IntersectRects>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d03a      	beq.n	8011872 <WM__InvalidateRectEx+0xa2>
 80117fc:	f640 0301 	movw	r3, #2049	; 0x801
 8011800:	403b      	ands	r3, r7
 8011802:	2b01      	cmp	r3, #1
 8011804:	d044      	beq.n	8011890 <WM__InvalidateRectEx+0xc0>
 8011806:	4620      	mov	r0, r4
 8011808:	a902      	add	r1, sp, #8
 801180a:	2220      	movs	r2, #32
 801180c:	f7ff f8ca 	bl	80109a4 <_Invalidate1Abs>
 8011810:	9b00      	ldr	r3, [sp, #0]
 8011812:	69dc      	ldr	r4, [r3, #28]
 8011814:	2c00      	cmp	r4, #0
 8011816:	d02c      	beq.n	8011872 <WM__InvalidateRectEx+0xa2>
 8011818:	42a6      	cmp	r6, r4
 801181a:	d02a      	beq.n	8011872 <WM__InvalidateRectEx+0xa2>
 801181c:	4620      	mov	r0, r4
 801181e:	f007 fca7 	bl	8019170 <GUI_ALLOC_LockH>
 8011822:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011824:	9001      	str	r0, [sp, #4]
 8011826:	079b      	lsls	r3, r3, #30
 8011828:	d528      	bpl.n	801187c <WM__InvalidateRectEx+0xac>
 801182a:	4602      	mov	r2, r0
 801182c:	a902      	add	r1, sp, #8
 801182e:	a804      	add	r0, sp, #16
 8011830:	f004 f95e 	bl	8015af0 <GUI__IntersectRects>
 8011834:	b310      	cbz	r0, 801187c <WM__InvalidateRectEx+0xac>
 8011836:	a801      	add	r0, sp, #4
 8011838:	f007 fcac 	bl	8019194 <GUI_ALLOC_UnlockH>
 801183c:	4620      	mov	r0, r4
 801183e:	a904      	add	r1, sp, #16
 8011840:	2220      	movs	r2, #32
 8011842:	f7ff f8af 	bl	80109a4 <_Invalidate1Abs>
 8011846:	4620      	mov	r0, r4
 8011848:	f7fd ff26 	bl	800f698 <WM_GetFirstChild>
 801184c:	4605      	mov	r5, r0
 801184e:	b150      	cbz	r0, 8011866 <WM__InvalidateRectEx+0x96>
 8011850:	4628      	mov	r0, r5
 8011852:	a904      	add	r1, sp, #16
 8011854:	2220      	movs	r2, #32
 8011856:	f7ff fba1 	bl	8010f9c <WM_InvalidateWindowAndDescsEx>
 801185a:	4628      	mov	r0, r5
 801185c:	f007 fc7e 	bl	801915c <GUI_ALLOC_h2p>
 8011860:	6a05      	ldr	r5, [r0, #32]
 8011862:	2d00      	cmp	r5, #0
 8011864:	d1f4      	bne.n	8011850 <WM__InvalidateRectEx+0x80>
 8011866:	4620      	mov	r0, r4
 8011868:	f007 fc78 	bl	801915c <GUI_ALLOC_h2p>
 801186c:	6a04      	ldr	r4, [r0, #32]
 801186e:	2c00      	cmp	r4, #0
 8011870:	d1d2      	bne.n	8011818 <WM__InvalidateRectEx+0x48>
 8011872:	4668      	mov	r0, sp
 8011874:	f007 fc8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011878:	b007      	add	sp, #28
 801187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187c:	a801      	add	r0, sp, #4
 801187e:	f007 fc89 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011882:	4620      	mov	r0, r4
 8011884:	f007 fc6a 	bl	801915c <GUI_ALLOC_h2p>
 8011888:	6a04      	ldr	r4, [r0, #32]
 801188a:	2c00      	cmp	r4, #0
 801188c:	d1c4      	bne.n	8011818 <WM__InvalidateRectEx+0x48>
 801188e:	e7f0      	b.n	8011872 <WM__InvalidateRectEx+0xa2>
 8011890:	9b00      	ldr	r3, [sp, #0]
 8011892:	a802      	add	r0, sp, #8
 8011894:	6999      	ldr	r1, [r3, #24]
 8011896:	6a1a      	ldr	r2, [r3, #32]
 8011898:	2320      	movs	r3, #32
 801189a:	f7ff fd4b 	bl	8011334 <WM__InvalidateRect>
 801189e:	e7b7      	b.n	8011810 <WM__InvalidateRectEx+0x40>

080118a0 <WM_SendMessage>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4604      	mov	r4, r0
 80118a4:	460d      	mov	r5, r1
 80118a6:	b900      	cbnz	r0, 80118aa <WM_SendMessage+0xa>
 80118a8:	bd38      	pop	{r3, r4, r5, pc}
 80118aa:	f005 f8e1 	bl	8016a70 <GUI_Lock>
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7fc ff13 	bl	800e6dc <WM__SendMessage>
 80118b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118ba:	f005 b8cf 	b.w	8016a5c <GUI_Unlock>
 80118be:	bf00      	nop

080118c0 <WM__SendMsgNoData>:
 80118c0:	b500      	push	{lr}
 80118c2:	b085      	sub	sp, #20
 80118c4:	ab04      	add	r3, sp, #16
 80118c6:	9001      	str	r0, [sp, #4]
 80118c8:	f843 1d10 	str.w	r1, [r3, #-16]!
 80118cc:	4669      	mov	r1, sp
 80118ce:	f7fc ff05 	bl	800e6dc <WM__SendMessage>
 80118d2:	b005      	add	sp, #20
 80118d4:	f85d fb04 	ldr.w	pc, [sp], #4

080118d8 <WM__GetClientRectWin>:
 80118d8:	2300      	movs	r3, #0
 80118da:	800b      	strh	r3, [r1, #0]
 80118dc:	804b      	strh	r3, [r1, #2]
 80118de:	8802      	ldrh	r2, [r0, #0]
 80118e0:	8843      	ldrh	r3, [r0, #2]
 80118e2:	b410      	push	{r4}
 80118e4:	8884      	ldrh	r4, [r0, #4]
 80118e6:	88c0      	ldrh	r0, [r0, #6]
 80118e8:	1aa2      	subs	r2, r4, r2
 80118ea:	1ac3      	subs	r3, r0, r3
 80118ec:	808a      	strh	r2, [r1, #4]
 80118ee:	80cb      	strh	r3, [r1, #6]
 80118f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <WM_InvalidateRect>:
 80118f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118fc:	4607      	mov	r7, r0
 80118fe:	b086      	sub	sp, #24
 8011900:	460c      	mov	r4, r1
 8011902:	b910      	cbnz	r0, 801190a <WM_InvalidateRect+0x12>
 8011904:	b006      	add	sp, #24
 8011906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801190a:	f005 f8b1 	bl	8016a70 <GUI_Lock>
 801190e:	4638      	mov	r0, r7
 8011910:	f007 fc2e 	bl	8019170 <GUI_ALLOC_LockH>
 8011914:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8011918:	9000      	str	r0, [sp, #0]
 801191a:	f018 0f02 	tst.w	r8, #2
 801191e:	d02e      	beq.n	801197e <WM_InvalidateRect+0x86>
 8011920:	c803      	ldmia	r0, {r0, r1}
 8011922:	ae04      	add	r6, sp, #16
 8011924:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8011928:	e886 0003 	stmia.w	r6, {r0, r1}
 801192c:	d12f      	bne.n	801198e <WM_InvalidateRect+0x96>
 801192e:	b17c      	cbz	r4, 8011950 <WM_InvalidateRect+0x58>
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	6861      	ldr	r1, [r4, #4]
 8011934:	9c00      	ldr	r4, [sp, #0]
 8011936:	ab02      	add	r3, sp, #8
 8011938:	c303      	stmia	r3!, {r0, r1}
 801193a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801193e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011942:	a802      	add	r0, sp, #8
 8011944:	f006 fa9a 	bl	8017e7c <GUI_MoveRect>
 8011948:	4630      	mov	r0, r6
 801194a:	a902      	add	r1, sp, #8
 801194c:	f004 f8b0 	bl	8015ab0 <GUI__IntersectRect>
 8011950:	463d      	mov	r5, r7
 8011952:	e008      	b.n	8011966 <WM_InvalidateRect+0x6e>
 8011954:	f004 f8ac 	bl	8015ab0 <GUI__IntersectRect>
 8011958:	9b01      	ldr	r3, [sp, #4]
 801195a:	699c      	ldr	r4, [r3, #24]
 801195c:	a801      	add	r0, sp, #4
 801195e:	b1d4      	cbz	r4, 8011996 <WM_InvalidateRect+0x9e>
 8011960:	f007 fc18 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011964:	4625      	mov	r5, r4
 8011966:	4628      	mov	r0, r5
 8011968:	f007 fc02 	bl	8019170 <GUI_ALLOC_LockH>
 801196c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801196e:	9001      	str	r0, [sp, #4]
 8011970:	0793      	lsls	r3, r2, #30
 8011972:	4601      	mov	r1, r0
 8011974:	4630      	mov	r0, r6
 8011976:	d4ed      	bmi.n	8011954 <WM_InvalidateRect+0x5c>
 8011978:	a801      	add	r0, sp, #4
 801197a:	f007 fc0b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801197e:	4668      	mov	r0, sp
 8011980:	f007 fc08 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011984:	f005 f86a 	bl	8016a5c <GUI_Unlock>
 8011988:	b006      	add	sp, #24
 801198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801198e:	4638      	mov	r0, r7
 8011990:	f7ff f9b0 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 8011994:	e7cb      	b.n	801192e <WM_InvalidateRect+0x36>
 8011996:	f007 fbfd 	bl	8019194 <GUI_ALLOC_UnlockH>
 801199a:	4b0d      	ldr	r3, [pc, #52]	; (80119d0 <WM_InvalidateRect+0xd8>)
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	4295      	cmp	r5, r2
 80119a0:	d002      	beq.n	80119a8 <WM_InvalidateRect+0xb0>
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	429d      	cmp	r5, r3
 80119a6:	d1ea      	bne.n	801197e <WM_InvalidateRect+0x86>
 80119a8:	f640 0301 	movw	r3, #2049	; 0x801
 80119ac:	ea08 0303 	and.w	r3, r8, r3
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d005      	beq.n	80119c0 <WM_InvalidateRect+0xc8>
 80119b4:	4638      	mov	r0, r7
 80119b6:	4631      	mov	r1, r6
 80119b8:	2220      	movs	r2, #32
 80119ba:	f7fe fff3 	bl	80109a4 <_Invalidate1Abs>
 80119be:	e7de      	b.n	801197e <WM_InvalidateRect+0x86>
 80119c0:	9b00      	ldr	r3, [sp, #0]
 80119c2:	4630      	mov	r0, r6
 80119c4:	6999      	ldr	r1, [r3, #24]
 80119c6:	6a1a      	ldr	r2, [r3, #32]
 80119c8:	2320      	movs	r3, #32
 80119ca:	f7ff fcb3 	bl	8011334 <WM__InvalidateRect>
 80119ce:	e7d6      	b.n	801197e <WM_InvalidateRect+0x86>
 80119d0:	2002bf74 	.word	0x2002bf74

080119d4 <_cbBackWin>:
 80119d4:	6803      	ldr	r3, [r0, #0]
 80119d6:	2b0e      	cmp	r3, #14
 80119d8:	b510      	push	{r4, lr}
 80119da:	4604      	mov	r4, r0
 80119dc:	d032      	beq.n	8011a44 <_cbBackWin+0x70>
 80119de:	2b0f      	cmp	r3, #15
 80119e0:	d116      	bne.n	8011a10 <_cbBackWin+0x3c>
 80119e2:	4a26      	ldr	r2, [pc, #152]	; (8011a7c <_cbBackWin+0xa8>)
 80119e4:	6843      	ldr	r3, [r0, #4]
 80119e6:	6811      	ldr	r1, [r2, #0]
 80119e8:	428b      	cmp	r3, r1
 80119ea:	d044      	beq.n	8011a76 <_cbBackWin+0xa2>
 80119ec:	6852      	ldr	r2, [r2, #4]
 80119ee:	4293      	cmp	r3, r2
 80119f0:	bf14      	ite	ne
 80119f2:	f04f 33ff 	movne.w	r3, #4294967295
 80119f6:	2301      	moveq	r3, #1
 80119f8:	4a21      	ldr	r2, [pc, #132]	; (8011a80 <_cbBackWin+0xac>)
 80119fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80119fe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8011a02:	4298      	cmp	r0, r3
 8011a04:	d01b      	beq.n	8011a3e <_cbBackWin+0x6a>
 8011a06:	f006 fac3 	bl	8017f90 <GUI_SetBkColor>
 8011a0a:	f005 ff69 	bl	80178e0 <GUI_Clear>
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	3b0e      	subs	r3, #14
 8011a12:	6860      	ldr	r0, [r4, #4]
 8011a14:	68e1      	ldr	r1, [r4, #12]
 8011a16:	2b1a      	cmp	r3, #26
 8011a18:	d811      	bhi.n	8011a3e <_cbBackWin+0x6a>
 8011a1a:	e8df f003 	tbb	[pc, r3]
 8011a1e:	101c      	.short	0x101c
 8011a20:	10101010 	.word	0x10101010
 8011a24:	2110100e 	.word	0x2110100e
 8011a28:	10101010 	.word	0x10101010
 8011a2c:	10101010 	.word	0x10101010
 8011a30:	10231010 	.word	0x10231010
 8011a34:	10101010 	.word	0x10101010
 8011a38:	27          	.byte	0x27
 8011a39:	00          	.byte	0x00
 8011a3a:	f7fc ff23 	bl	800e884 <WM__GetClientRectEx>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60e3      	str	r3, [r4, #12]
 8011a42:	bd10      	pop	{r4, pc}
 8011a44:	68c3      	ldr	r3, [r0, #12]
 8011a46:	685a      	ldr	r2, [r3, #4]
 8011a48:	2a01      	cmp	r2, #1
 8011a4a:	d1fa      	bne.n	8011a42 <_cbBackWin+0x6e>
 8011a4c:	6818      	ldr	r0, [r3, #0]
 8011a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a52:	f005 b94d 	b.w	8016cf0 <GUI_StoreKey>
 8011a56:	4621      	mov	r1, r4
 8011a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a5c:	f7fe b976 	b.w	800fd4c <WM_SendToParent>
 8011a60:	60e0      	str	r0, [r4, #12]
 8011a62:	bd10      	pop	{r4, pc}
 8011a64:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8011a68:	60e3      	str	r3, [r4, #12]
 8011a6a:	bd10      	pop	{r4, pc}
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a72:	f7ff bf41 	b.w	80118f8 <WM_InvalidateRect>
 8011a76:	2300      	movs	r3, #0
 8011a78:	e7be      	b.n	80119f8 <_cbBackWin+0x24>
 8011a7a:	bf00      	nop
 8011a7c:	2002bf74 	.word	0x2002bf74
 8011a80:	2002bfa8 	.word	0x2002bfa8

08011a84 <WM_InvalidateWindow>:
 8011a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a88:	4607      	mov	r7, r0
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	b910      	cbnz	r0, 8011a94 <WM_InvalidateWindow+0x10>
 8011a8e:	b004      	add	sp, #16
 8011a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a94:	f004 ffec 	bl	8016a70 <GUI_Lock>
 8011a98:	4638      	mov	r0, r7
 8011a9a:	f007 fb69 	bl	8019170 <GUI_ALLOC_LockH>
 8011a9e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8011aa2:	9000      	str	r0, [sp, #0]
 8011aa4:	f018 0f02 	tst.w	r8, #2
 8011aa8:	d01d      	beq.n	8011ae6 <WM_InvalidateWindow+0x62>
 8011aaa:	c803      	ldmia	r0, {r0, r1}
 8011aac:	ae02      	add	r6, sp, #8
 8011aae:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8011ab2:	e886 0003 	stmia.w	r6, {r0, r1}
 8011ab6:	d133      	bne.n	8011b20 <WM_InvalidateWindow+0x9c>
 8011ab8:	463d      	mov	r5, r7
 8011aba:	e008      	b.n	8011ace <WM_InvalidateWindow+0x4a>
 8011abc:	f003 fff8 	bl	8015ab0 <GUI__IntersectRect>
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	699c      	ldr	r4, [r3, #24]
 8011ac4:	a801      	add	r0, sp, #4
 8011ac6:	b1b4      	cbz	r4, 8011af6 <WM_InvalidateWindow+0x72>
 8011ac8:	f007 fb64 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011acc:	4625      	mov	r5, r4
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f007 fb4e 	bl	8019170 <GUI_ALLOC_LockH>
 8011ad4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011ad6:	9001      	str	r0, [sp, #4]
 8011ad8:	0793      	lsls	r3, r2, #30
 8011ada:	4601      	mov	r1, r0
 8011adc:	4630      	mov	r0, r6
 8011ade:	d4ed      	bmi.n	8011abc <WM_InvalidateWindow+0x38>
 8011ae0:	a801      	add	r0, sp, #4
 8011ae2:	f007 fb57 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011ae6:	4668      	mov	r0, sp
 8011ae8:	f007 fb54 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011aec:	f004 ffb6 	bl	8016a5c <GUI_Unlock>
 8011af0:	b004      	add	sp, #16
 8011af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af6:	f007 fb4d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011afa:	4b0f      	ldr	r3, [pc, #60]	; (8011b38 <WM_InvalidateWindow+0xb4>)
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	4295      	cmp	r5, r2
 8011b00:	d002      	beq.n	8011b08 <WM_InvalidateWindow+0x84>
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	429d      	cmp	r5, r3
 8011b06:	d1ee      	bne.n	8011ae6 <WM_InvalidateWindow+0x62>
 8011b08:	f640 0301 	movw	r3, #2049	; 0x801
 8011b0c:	ea08 0303 	and.w	r3, r8, r3
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d009      	beq.n	8011b28 <WM_InvalidateWindow+0xa4>
 8011b14:	4638      	mov	r0, r7
 8011b16:	4631      	mov	r1, r6
 8011b18:	2220      	movs	r2, #32
 8011b1a:	f7fe ff43 	bl	80109a4 <_Invalidate1Abs>
 8011b1e:	e7e2      	b.n	8011ae6 <WM_InvalidateWindow+0x62>
 8011b20:	4638      	mov	r0, r7
 8011b22:	f7ff f8e7 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 8011b26:	e7c7      	b.n	8011ab8 <WM_InvalidateWindow+0x34>
 8011b28:	9b00      	ldr	r3, [sp, #0]
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	6999      	ldr	r1, [r3, #24]
 8011b2e:	6a1a      	ldr	r2, [r3, #32]
 8011b30:	2320      	movs	r3, #32
 8011b32:	f7ff fbff 	bl	8011334 <WM__InvalidateRect>
 8011b36:	e7d6      	b.n	8011ae6 <WM_InvalidateWindow+0x62>
 8011b38:	2002bf74 	.word	0x2002bf74

08011b3c <WM_CreateWindowAsChild>:
 8011b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	b087      	sub	sp, #28
 8011b42:	4699      	mov	r9, r3
 8011b44:	4606      	mov	r6, r0
 8011b46:	460f      	mov	r7, r1
 8011b48:	4690      	mov	r8, r2
 8011b4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011b4c:	f004 ff90 	bl	8016a70 <GUI_Lock>
 8011b50:	4b6f      	ldr	r3, [pc, #444]	; (8011d10 <WM_CreateWindowAsChild+0x1d4>)
 8011b52:	f8d3 a000 	ldr.w	sl, [r3]
 8011b56:	b125      	cbz	r5, 8011b62 <WM_CreateWindowAsChild+0x26>
 8011b58:	1c6b      	adds	r3, r5, #1
 8011b5a:	f000 80d7 	beq.w	8011d0c <WM_CreateWindowAsChild+0x1d0>
 8011b5e:	462c      	mov	r4, r5
 8011b60:	e019      	b.n	8011b96 <WM_CreateWindowAsChild+0x5a>
 8011b62:	4b6c      	ldr	r3, [pc, #432]	; (8011d14 <WM_CreateWindowAsChild+0x1d8>)
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	b963      	cbnz	r3, 8011b82 <WM_CreateWindowAsChild+0x46>
 8011b68:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011b6a:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 8011b6e:	f007 fc87 	bl	8019480 <GUI_ALLOC_AllocZero>
 8011b72:	4604      	mov	r4, r0
 8011b74:	bb80      	cbnz	r0, 8011bd8 <WM_CreateWindowAsChild+0x9c>
 8011b76:	f004 ff71 	bl	8016a5c <GUI_Unlock>
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	b007      	add	sp, #28
 8011b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b82:	4a65      	ldr	r2, [pc, #404]	; (8011d18 <WM_CreateWindowAsChild+0x1dc>)
 8011b84:	4b65      	ldr	r3, [pc, #404]	; (8011d1c <WM_CreateWindowAsChild+0x1e0>)
 8011b86:	6812      	ldr	r2, [r2, #0]
 8011b88:	7c52      	ldrb	r2, [r2, #17]
 8011b8a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8011b8e:	1c62      	adds	r2, r4, #1
 8011b90:	d0ea      	beq.n	8011b68 <WM_CreateWindowAsChild+0x2c>
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	d0e8      	beq.n	8011b68 <WM_CreateWindowAsChild+0x2c>
 8011b96:	4620      	mov	r0, r4
 8011b98:	f007 faea 	bl	8019170 <GUI_ALLOC_LockH>
 8011b9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011ba0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011ba4:	9001      	str	r0, [sp, #4]
 8011ba6:	4416      	add	r6, r2
 8011ba8:	441f      	add	r7, r3
 8011baa:	f1b8 0f00 	cmp.w	r8, #0
 8011bae:	d105      	bne.n	8011bbc <WM_CreateWindowAsChild+0x80>
 8011bb0:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8011bb4:	ebc2 0808 	rsb	r8, r2, r8
 8011bb8:	f108 0801 	add.w	r8, r8, #1
 8011bbc:	f1b9 0f00 	cmp.w	r9, #0
 8011bc0:	d105      	bne.n	8011bce <WM_CreateWindowAsChild+0x92>
 8011bc2:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8011bc6:	ebc3 0909 	rsb	r9, r3, r9
 8011bca:	f109 0901 	add.w	r9, r9, #1
 8011bce:	a801      	add	r0, sp, #4
 8011bd0:	4625      	mov	r5, r4
 8011bd2:	f007 fadf 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011bd6:	e7c7      	b.n	8011b68 <WM_CreateWindowAsChild+0x2c>
 8011bd8:	4b4e      	ldr	r3, [pc, #312]	; (8011d14 <WM_CreateWindowAsChild+0x1d8>)
 8011bda:	881a      	ldrh	r2, [r3, #0]
 8011bdc:	3201      	adds	r2, #1
 8011bde:	801a      	strh	r2, [r3, #0]
 8011be0:	f007 fac6 	bl	8019170 <GUI_ALLOC_LockH>
 8011be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011be6:	4b4e      	ldr	r3, [pc, #312]	; (8011d20 <WM_CreateWindowAsChild+0x1e4>)
 8011be8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011bea:	ea41 0a0a 	orr.w	sl, r1, sl
 8011bee:	f10d 0b18 	add.w	fp, sp, #24
 8011bf2:	44b0      	add	r8, r6
 8011bf4:	44b9      	add	r9, r7
 8011bf6:	ea0a 0303 	and.w	r3, sl, r3
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8011c00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c02:	f84b 0d18 	str.w	r0, [fp, #-24]!
 8011c06:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c0a:	6283      	str	r3, [r0, #40]	; 0x28
 8011c0c:	f8a0 8004 	strh.w	r8, [r0, #4]
 8011c10:	f8a0 9006 	strh.w	r9, [r0, #6]
 8011c14:	6102      	str	r2, [r0, #16]
 8011c16:	8006      	strh	r6, [r0, #0]
 8011c18:	8047      	strh	r7, [r0, #2]
 8011c1a:	4668      	mov	r0, sp
 8011c1c:	f007 faba 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011c20:	4b40      	ldr	r3, [pc, #256]	; (8011d24 <WM_CreateWindowAsChild+0x1e8>)
 8011c22:	6818      	ldr	r0, [r3, #0]
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d161      	bne.n	8011cec <WM_CreateWindowAsChild+0x1b0>
 8011c28:	601c      	str	r4, [r3, #0]
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f7fe ffbb 	bl	8010ba8 <WM__InsertWindowIntoList>
 8011c32:	f01a 0f20 	tst.w	sl, #32
 8011c36:	d135      	bne.n	8011ca4 <WM_CreateWindowAsChild+0x168>
 8011c38:	f01a 0f01 	tst.w	sl, #1
 8011c3c:	d113      	bne.n	8011c66 <WM_CreateWindowAsChild+0x12a>
 8011c3e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8011c42:	d118      	bne.n	8011c76 <WM_CreateWindowAsChild+0x13a>
 8011c44:	f01a 0f02 	tst.w	sl, #2
 8011c48:	d11b      	bne.n	8011c82 <WM_CreateWindowAsChild+0x146>
 8011c4a:	a906      	add	r1, sp, #24
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f841 3d10 	str.w	r3, [r1, #-16]!
 8011c54:	9403      	str	r4, [sp, #12]
 8011c56:	f7fc fd41 	bl	800e6dc <WM__SendMessage>
 8011c5a:	f004 feff 	bl	8016a5c <GUI_Unlock>
 8011c5e:	4620      	mov	r0, r4
 8011c60:	b007      	add	sp, #28
 8011c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c66:	4b30      	ldr	r3, [pc, #192]	; (8011d28 <WM_CreateWindowAsChild+0x1ec>)
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8011c6e:	f102 0201 	add.w	r2, r2, #1
 8011c72:	601a      	str	r2, [r3, #0]
 8011c74:	d0e6      	beq.n	8011c44 <WM_CreateWindowAsChild+0x108>
 8011c76:	4620      	mov	r0, r4
 8011c78:	f7fd fc4c 	bl	800f514 <WM_BringToBottom>
 8011c7c:	f01a 0f02 	tst.w	sl, #2
 8011c80:	d0e3      	beq.n	8011c4a <WM_CreateWindowAsChild+0x10e>
 8011c82:	4620      	mov	r0, r4
 8011c84:	f007 fa74 	bl	8019170 <GUI_ALLOC_LockH>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	4668      	mov	r0, sp
 8011c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	f042 0202 	orr.w	r2, r2, #2
 8011c94:	629a      	str	r2, [r3, #40]	; 0x28
 8011c96:	f007 fa7d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	f7ff fe2b 	bl	80118f8 <WM_InvalidateRect>
 8011ca2:	e7d2      	b.n	8011c4a <WM_CreateWindowAsChild+0x10e>
 8011ca4:	4e1c      	ldr	r6, [pc, #112]	; (8011d18 <WM_CreateWindowAsChild+0x1dc>)
 8011ca6:	f004 fee3 	bl	8016a70 <GUI_Lock>
 8011caa:	6833      	ldr	r3, [r6, #0]
 8011cac:	4625      	mov	r5, r4
 8011cae:	649c      	str	r4, [r3, #72]	; 0x48
 8011cb0:	e000      	b.n	8011cb4 <WM_CreateWindowAsChild+0x178>
 8011cb2:	461d      	mov	r5, r3
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	f007 fa51 	bl	801915c <GUI_ALLOC_h2p>
 8011cba:	6983      	ldr	r3, [r0, #24]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1f8      	bne.n	8011cb2 <WM_CreateWindowAsChild+0x176>
 8011cc0:	4a16      	ldr	r2, [pc, #88]	; (8011d1c <WM_CreateWindowAsChild+0x1e0>)
 8011cc2:	6811      	ldr	r1, [r2, #0]
 8011cc4:	428d      	cmp	r5, r1
 8011cc6:	d01b      	beq.n	8011d00 <WM_CreateWindowAsChild+0x1c4>
 8011cc8:	6853      	ldr	r3, [r2, #4]
 8011cca:	429d      	cmp	r5, r3
 8011ccc:	d01c      	beq.n	8011d08 <WM_CreateWindowAsChild+0x1cc>
 8011cce:	f003 fd71 	bl	80157b4 <LCD_SetClipRectMax>
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f007 fa42 	bl	801915c <GUI_ALLOC_h2p>
 8011cd8:	6833      	ldr	r3, [r6, #0]
 8011cda:	f9b0 1000 	ldrsh.w	r1, [r0]
 8011cde:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8011ce4:	64d9      	str	r1, [r3, #76]	; 0x4c
 8011ce6:	f004 feb9 	bl	8016a5c <GUI_Unlock>
 8011cea:	e7a5      	b.n	8011c38 <WM_CreateWindowAsChild+0xfc>
 8011cec:	f007 fa36 	bl	801915c <GUI_ALLOC_h2p>
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f007 fa32 	bl	801915c <GUI_ALLOC_h2p>
 8011cf8:	6973      	ldr	r3, [r6, #20]
 8011cfa:	6143      	str	r3, [r0, #20]
 8011cfc:	6174      	str	r4, [r6, #20]
 8011cfe:	e794      	b.n	8011c2a <WM_CreateWindowAsChild+0xee>
 8011d00:	4618      	mov	r0, r3
 8011d02:	f004 ffd5 	bl	8016cb0 <GUI_SelectLayer>
 8011d06:	e7e2      	b.n	8011cce <WM_CreateWindowAsChild+0x192>
 8011d08:	2001      	movs	r0, #1
 8011d0a:	e7fa      	b.n	8011d02 <WM_CreateWindowAsChild+0x1c6>
 8011d0c:	2500      	movs	r5, #0
 8011d0e:	e72b      	b.n	8011b68 <WM_CreateWindowAsChild+0x2c>
 8011d10:	2002bfa4 	.word	0x2002bfa4
 8011d14:	2002bf6c 	.word	0x2002bf6c
 8011d18:	2000026c 	.word	0x2000026c
 8011d1c:	2002bf74 	.word	0x2002bf74
 8011d20:	003f3f9f 	.word	0x003f3f9f
 8011d24:	2002bf90 	.word	0x2002bf90
 8011d28:	2002bfc4 	.word	0x2002bfc4

08011d2c <WM_DeleteWindow>:
 8011d2c:	b900      	cbnz	r0, 8011d30 <WM_DeleteWindow+0x4>
 8011d2e:	4770      	bx	lr
 8011d30:	f7ff bba0 	b.w	8011474 <WM_DeleteWindow.part.2>

08011d34 <WM__GetTopLevelLayer>:
 8011d34:	b510      	push	{r4, lr}
 8011d36:	4604      	mov	r4, r0
 8011d38:	e000      	b.n	8011d3c <WM__GetTopLevelLayer+0x8>
 8011d3a:	461c      	mov	r4, r3
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f007 fa0d 	bl	801915c <GUI_ALLOC_h2p>
 8011d42:	6983      	ldr	r3, [r0, #24]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d1f8      	bne.n	8011d3a <WM__GetTopLevelLayer+0x6>
 8011d48:	4a06      	ldr	r2, [pc, #24]	; (8011d64 <WM__GetTopLevelLayer+0x30>)
 8011d4a:	6811      	ldr	r1, [r2, #0]
 8011d4c:	428c      	cmp	r4, r1
 8011d4e:	d006      	beq.n	8011d5e <WM__GetTopLevelLayer+0x2a>
 8011d50:	6850      	ldr	r0, [r2, #4]
 8011d52:	4284      	cmp	r4, r0
 8011d54:	bf14      	ite	ne
 8011d56:	f04f 30ff 	movne.w	r0, #4294967295
 8011d5a:	2001      	moveq	r0, #1
 8011d5c:	bd10      	pop	{r4, pc}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	bf00      	nop
 8011d64:	2002bf74 	.word	0x2002bf74

08011d68 <WM_SelectWindow>:
 8011d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6a:	4f18      	ldr	r7, [pc, #96]	; (8011dcc <WM_SelectWindow+0x64>)
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	f004 fe7f 	bl	8016a70 <GUI_Lock>
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8011d76:	b90d      	cbnz	r5, 8011d7c <WM_SelectWindow+0x14>
 8011d78:	4a15      	ldr	r2, [pc, #84]	; (8011dd0 <WM_SelectWindow+0x68>)
 8011d7a:	6815      	ldr	r5, [r2, #0]
 8011d7c:	649d      	str	r5, [r3, #72]	; 0x48
 8011d7e:	462c      	mov	r4, r5
 8011d80:	e000      	b.n	8011d84 <WM_SelectWindow+0x1c>
 8011d82:	461c      	mov	r4, r3
 8011d84:	4620      	mov	r0, r4
 8011d86:	f007 f9e9 	bl	801915c <GUI_ALLOC_h2p>
 8011d8a:	6983      	ldr	r3, [r0, #24]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1f8      	bne.n	8011d82 <WM_SelectWindow+0x1a>
 8011d90:	4a10      	ldr	r2, [pc, #64]	; (8011dd4 <WM_SelectWindow+0x6c>)
 8011d92:	6811      	ldr	r1, [r2, #0]
 8011d94:	428c      	cmp	r4, r1
 8011d96:	d012      	beq.n	8011dbe <WM_SelectWindow+0x56>
 8011d98:	6853      	ldr	r3, [r2, #4]
 8011d9a:	429c      	cmp	r4, r3
 8011d9c:	d013      	beq.n	8011dc6 <WM_SelectWindow+0x5e>
 8011d9e:	f003 fd09 	bl	80157b4 <LCD_SetClipRectMax>
 8011da2:	4628      	mov	r0, r5
 8011da4:	f007 f9da 	bl	801915c <GUI_ALLOC_h2p>
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	f9b0 1000 	ldrsh.w	r1, [r0]
 8011dae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011db2:	651a      	str	r2, [r3, #80]	; 0x50
 8011db4:	64d9      	str	r1, [r3, #76]	; 0x4c
 8011db6:	f004 fe51 	bl	8016a5c <GUI_Unlock>
 8011dba:	4630      	mov	r0, r6
 8011dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f004 ff76 	bl	8016cb0 <GUI_SelectLayer>
 8011dc4:	e7eb      	b.n	8011d9e <WM_SelectWindow+0x36>
 8011dc6:	2001      	movs	r0, #1
 8011dc8:	e7fa      	b.n	8011dc0 <WM_SelectWindow+0x58>
 8011dca:	bf00      	nop
 8011dcc:	2000026c 	.word	0x2000026c
 8011dd0:	2002bf90 	.word	0x2002bf90
 8011dd4:	2002bf74 	.word	0x2002bf74

08011dd8 <WM_GetActiveWindow>:
 8011dd8:	4b01      	ldr	r3, [pc, #4]	; (8011de0 <WM_GetActiveWindow+0x8>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011dde:	4770      	bx	lr
 8011de0:	2000026c 	.word	0x2000026c

08011de4 <WM__GetNextIVR>:
 8011de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011de8:	f8df 8240 	ldr.w	r8, [pc, #576]	; 801202c <WM__GetNextIVR+0x248>
 8011dec:	f8d8 3000 	ldr.w	r3, [r8]
 8011df0:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8011df4:	b087      	sub	sp, #28
 8011df6:	b130      	cbz	r0, 8011e06 <WM__GetNextIVR+0x22>
 8011df8:	4e8b      	ldr	r6, [pc, #556]	; (8012028 <WM__GetNextIVR+0x244>)
 8011dfa:	6973      	ldr	r3, [r6, #20]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	dd05      	ble.n	8011e0c <WM__GetNextIVR+0x28>
 8011e00:	3b01      	subs	r3, #1
 8011e02:	6173      	str	r3, [r6, #20]
 8011e04:	2000      	movs	r0, #0
 8011e06:	b007      	add	sp, #28
 8011e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e0c:	f106 0708 	add.w	r7, r6, #8
 8011e10:	6933      	ldr	r3, [r6, #16]
 8011e12:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011e16:	ad02      	add	r5, sp, #8
 8011e18:	3301      	adds	r3, #1
 8011e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e1e:	6133      	str	r3, [r6, #16]
 8011e20:	b953      	cbnz	r3, 8011e38 <WM__GetNextIVR+0x54>
 8011e22:	6833      	ldr	r3, [r6, #0]
 8011e24:	9302      	str	r3, [sp, #8]
 8011e26:	8873      	ldrh	r3, [r6, #2]
 8011e28:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8011e2c:	4c7e      	ldr	r4, [pc, #504]	; (8012028 <WM__GetNextIVR+0x244>)
 8011e2e:	b21b      	sxth	r3, r3
 8011e30:	429a      	cmp	r2, r3
 8011e32:	da17      	bge.n	8011e64 <WM__GetNextIVR+0x80>
 8011e34:	6973      	ldr	r3, [r6, #20]
 8011e36:	e7e3      	b.n	8011e00 <WM__GetNextIVR+0x1c>
 8011e38:	89b2      	ldrh	r2, [r6, #12]
 8011e3a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8011e3e:	8973      	ldrh	r3, [r6, #10]
 8011e40:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011e44:	3201      	adds	r2, #1
 8011e46:	b292      	uxth	r2, r2
 8011e48:	b211      	sxth	r1, r2
 8011e4a:	4288      	cmp	r0, r1
 8011e4c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011e50:	daea      	bge.n	8011e28 <WM__GetNextIVR+0x44>
 8011e52:	89f3      	ldrh	r3, [r6, #14]
 8011e54:	8832      	ldrh	r2, [r6, #0]
 8011e56:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011e62:	e7e1      	b.n	8011e28 <WM__GetNextIVR+0x44>
 8011e64:	f8d8 3000 	ldr.w	r3, [r8]
 8011e68:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801202c <WM__GetNextIVR+0x248>
 8011e6c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011e6e:	f007 f97f 	bl	8019170 <GUI_ALLOC_LockH>
 8011e72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011e76:	8821      	ldrh	r1, [r4, #0]
 8011e78:	9001      	str	r0, [sp, #4]
 8011e7a:	428b      	cmp	r3, r1
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	f000 80ba 	beq.w	8011ff6 <WM__GetNextIVR+0x212>
 8011e82:	f8d8 2000 	ldr.w	r2, [r8]
 8011e86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e8a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8011e8c:	b910      	cbnz	r0, 8011e94 <WM__GetNextIVR+0xb0>
 8011e8e:	e00d      	b.n	8011eac <WM__GetNextIVR+0xc8>
 8011e90:	69a0      	ldr	r0, [r4, #24]
 8011e92:	b158      	cbz	r0, 8011eac <WM__GetNextIVR+0xc8>
 8011e94:	f007 f962 	bl	801915c <GUI_ALLOC_h2p>
 8011e98:	4629      	mov	r1, r5
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	6a00      	ldr	r0, [r0, #32]
 8011e9e:	f7fe fc71 	bl	8010784 <_Findx0.constprop.9>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d0f4      	beq.n	8011e90 <WM__GetNextIVR+0xac>
 8011ea6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011eaa:	e7ea      	b.n	8011e82 <WM__GetNextIVR+0x9e>
 8011eac:	9b01      	ldr	r3, [sp, #4]
 8011eae:	4629      	mov	r1, r5
 8011eb0:	69d8      	ldr	r0, [r3, #28]
 8011eb2:	f7fe fc67 	bl	8010784 <_Findx0.constprop.9>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d1f5      	bne.n	8011ea6 <WM__GetNextIVR+0xc2>
 8011eba:	88b3      	ldrh	r3, [r6, #4]
 8011ebc:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8011ec0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011ec4:	b21b      	sxth	r3, r3
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	f300 808d 	bgt.w	8011fe6 <WM__GetNextIVR+0x202>
 8011ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8011ed0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011ed2:	f10d 0810 	add.w	r8, sp, #16
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d02d      	beq.n	8011f36 <WM__GetNextIVR+0x152>
 8011eda:	f007 f93f 	bl	801915c <GUI_ALLOC_h2p>
 8011ede:	6a04      	ldr	r4, [r0, #32]
 8011ee0:	4681      	mov	r9, r0
 8011ee2:	b96c      	cbnz	r4, 8011f00 <WM__GetNextIVR+0x11c>
 8011ee4:	e023      	b.n	8011f2e <WM__GetNextIVR+0x14a>
 8011ee6:	07e1      	lsls	r1, r4, #31
 8011ee8:	d44b      	bmi.n	8011f82 <WM__GetNextIVR+0x19e>
 8011eea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011eee:	9800      	ldr	r0, [sp, #0]
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011ef6:	6a04      	ldr	r4, [r0, #32]
 8011ef8:	4668      	mov	r0, sp
 8011efa:	f007 f94b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011efe:	b1b4      	cbz	r4, 8011f2e <WM__GetNextIVR+0x14a>
 8011f00:	4620      	mov	r0, r4
 8011f02:	f007 f935 	bl	8019170 <GUI_ALLOC_LockH>
 8011f06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011f08:	9000      	str	r0, [sp, #0]
 8011f0a:	07a3      	lsls	r3, r4, #30
 8011f0c:	d5f3      	bpl.n	8011ef6 <WM__GetNextIVR+0x112>
 8011f0e:	c803      	ldmia	r0, {r0, r1}
 8011f10:	e888 0003 	stmia.w	r8, {r0, r1}
 8011f14:	4628      	mov	r0, r5
 8011f16:	4641      	mov	r1, r8
 8011f18:	f005 fffa 	bl	8017f10 <GUI_RectsIntersect>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d1e2      	bne.n	8011ee6 <WM__GetNextIVR+0x102>
 8011f20:	9800      	ldr	r0, [sp, #0]
 8011f22:	6a04      	ldr	r4, [r0, #32]
 8011f24:	4668      	mov	r0, sp
 8011f26:	f007 f935 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011f2a:	2c00      	cmp	r4, #0
 8011f2c:	d1e8      	bne.n	8011f00 <WM__GetNextIVR+0x11c>
 8011f2e:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d1d1      	bne.n	8011eda <WM__GetNextIVR+0xf6>
 8011f36:	9b01      	ldr	r3, [sp, #4]
 8011f38:	69dc      	ldr	r4, [r3, #28]
 8011f3a:	f10d 0810 	add.w	r8, sp, #16
 8011f3e:	b974      	cbnz	r4, 8011f5e <WM__GetNextIVR+0x17a>
 8011f40:	e040      	b.n	8011fc4 <WM__GetNextIVR+0x1e0>
 8011f42:	07e3      	lsls	r3, r4, #31
 8011f44:	d42e      	bmi.n	8011fa4 <WM__GetNextIVR+0x1c0>
 8011f46:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011f4a:	9800      	ldr	r0, [sp, #0]
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011f52:	6a04      	ldr	r4, [r0, #32]
 8011f54:	4668      	mov	r0, sp
 8011f56:	f007 f91d 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011f5a:	2c00      	cmp	r4, #0
 8011f5c:	d032      	beq.n	8011fc4 <WM__GetNextIVR+0x1e0>
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f007 f906 	bl	8019170 <GUI_ALLOC_LockH>
 8011f64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011f66:	9000      	str	r0, [sp, #0]
 8011f68:	07a2      	lsls	r2, r4, #30
 8011f6a:	d5f2      	bpl.n	8011f52 <WM__GetNextIVR+0x16e>
 8011f6c:	c803      	ldmia	r0, {r0, r1}
 8011f6e:	e888 0003 	stmia.w	r8, {r0, r1}
 8011f72:	4628      	mov	r0, r5
 8011f74:	4641      	mov	r1, r8
 8011f76:	f005 ffcb 	bl	8017f10 <GUI_RectsIntersect>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d1e1      	bne.n	8011f42 <WM__GetNextIVR+0x15e>
 8011f7e:	9800      	ldr	r0, [sp, #0]
 8011f80:	e7e7      	b.n	8011f52 <WM__GetNextIVR+0x16e>
 8011f82:	9800      	ldr	r0, [sp, #0]
 8011f84:	69c4      	ldr	r4, [r0, #28]
 8011f86:	2c00      	cmp	r4, #0
 8011f88:	d0b5      	beq.n	8011ef6 <WM__GetNextIVR+0x112>
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	4629      	mov	r1, r5
 8011f8e:	4642      	mov	r2, r8
 8011f90:	f7fe faea 	bl	8010568 <_Findx1>
 8011f94:	4620      	mov	r0, r4
 8011f96:	f007 f8e1 	bl	801915c <GUI_ALLOC_h2p>
 8011f9a:	6a04      	ldr	r4, [r0, #32]
 8011f9c:	2c00      	cmp	r4, #0
 8011f9e:	d1f4      	bne.n	8011f8a <WM__GetNextIVR+0x1a6>
 8011fa0:	9800      	ldr	r0, [sp, #0]
 8011fa2:	e7be      	b.n	8011f22 <WM__GetNextIVR+0x13e>
 8011fa4:	9800      	ldr	r0, [sp, #0]
 8011fa6:	69c4      	ldr	r4, [r0, #28]
 8011fa8:	2c00      	cmp	r4, #0
 8011faa:	d0d2      	beq.n	8011f52 <WM__GetNextIVR+0x16e>
 8011fac:	4620      	mov	r0, r4
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4642      	mov	r2, r8
 8011fb2:	f7fe fad9 	bl	8010568 <_Findx1>
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f007 f8d0 	bl	801915c <GUI_ALLOC_h2p>
 8011fbc:	6a04      	ldr	r4, [r0, #32]
 8011fbe:	2c00      	cmp	r4, #0
 8011fc0:	d1f4      	bne.n	8011fac <WM__GetNextIVR+0x1c8>
 8011fc2:	e7dc      	b.n	8011f7e <WM__GetNextIVR+0x19a>
 8011fc4:	a801      	add	r0, sp, #4
 8011fc6:	f007 f8e5 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011fca:	6933      	ldr	r3, [r6, #16]
 8011fcc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	f73f af2f 	bgt.w	8011e34 <WM__GetNextIVR+0x50>
 8011fd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011fda:	e887 0003 	stmia.w	r7, {r0, r1}
 8011fde:	f7fe fd53 	bl	8010a88 <WM__ActivateClipRect>
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	e70f      	b.n	8011e06 <WM__GetNextIVR+0x22>
 8011fe6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011fea:	e887 0003 	stmia.w	r7, {r0, r1}
 8011fee:	a801      	add	r0, sp, #4
 8011ff0:	f007 f8d0 	bl	8019194 <GUI_ALLOC_UnlockH>
 8011ff4:	e72d      	b.n	8011e52 <WM__GetNextIVR+0x6e>
 8011ff6:	f8d9 1000 	ldr.w	r1, [r9]
 8011ffa:	6863      	ldr	r3, [r4, #4]
 8011ffc:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8011ffe:	9303      	str	r3, [sp, #12]
 8012000:	b150      	cbz	r0, 8012018 <WM__GetNextIVR+0x234>
 8012002:	f007 f8ab 	bl	801915c <GUI_ALLOC_h2p>
 8012006:	4604      	mov	r4, r0
 8012008:	4629      	mov	r1, r5
 801200a:	6a00      	ldr	r0, [r0, #32]
 801200c:	f7fe fbfa 	bl	8010804 <_Findy1.constprop.10>
 8012010:	69a0      	ldr	r0, [r4, #24]
 8012012:	2800      	cmp	r0, #0
 8012014:	d1f5      	bne.n	8012002 <WM__GetNextIVR+0x21e>
 8012016:	9a01      	ldr	r2, [sp, #4]
 8012018:	69d0      	ldr	r0, [r2, #28]
 801201a:	4629      	mov	r1, r5
 801201c:	f7fe fbf2 	bl	8010804 <_Findy1.constprop.10>
 8012020:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012024:	e72d      	b.n	8011e82 <WM__GetNextIVR+0x9e>
 8012026:	bf00      	nop
 8012028:	2002aeac 	.word	0x2002aeac
 801202c:	2000026c 	.word	0x2000026c

08012030 <WM__InitIVRSearch>:
 8012030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012034:	4c60      	ldr	r4, [pc, #384]	; (80121b8 <WM__InitIVRSearch+0x188>)
 8012036:	6822      	ldr	r2, [r4, #0]
 8012038:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 801203c:	b089      	sub	sp, #36	; 0x24
 801203e:	4607      	mov	r7, r0
 8012040:	b14b      	cbz	r3, 8012056 <WM__InitIVRSearch+0x26>
 8012042:	4d5e      	ldr	r5, [pc, #376]	; (80121bc <WM__InitIVRSearch+0x18c>)
 8012044:	696b      	ldr	r3, [r5, #20]
 8012046:	3301      	adds	r3, #1
 8012048:	2b01      	cmp	r3, #1
 801204a:	616b      	str	r3, [r5, #20]
 801204c:	dd09      	ble.n	8012062 <WM__InitIVRSearch+0x32>
 801204e:	2001      	movs	r0, #1
 8012050:	b009      	add	sp, #36	; 0x24
 8012052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012056:	f7fe fd17 	bl	8010a88 <WM__ActivateClipRect>
 801205a:	2001      	movs	r0, #1
 801205c:	b009      	add	sp, #36	; 0x24
 801205e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012062:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8012064:	f007 f884 	bl	8019170 <GUI_ALLOC_LockH>
 8012068:	4b55      	ldr	r3, [pc, #340]	; (80121c0 <WM__InitIVRSearch+0x190>)
 801206a:	9001      	str	r0, [sp, #4]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	f04f 32ff 	mov.w	r2, #4294967295
 8012072:	612a      	str	r2, [r5, #16]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d064      	beq.n	8012142 <WM__InitIVRSearch+0x112>
 8012078:	3008      	adds	r0, #8
 801207a:	c803      	ldmia	r0, {r0, r1}
 801207c:	ae04      	add	r6, sp, #16
 801207e:	e886 0003 	stmia.w	r6, {r0, r1}
 8012082:	b11f      	cbz	r7, 801208c <WM__InitIVRSearch+0x5c>
 8012084:	4639      	mov	r1, r7
 8012086:	4630      	mov	r0, r6
 8012088:	f003 fd12 	bl	8015ab0 <GUI__IntersectRect>
 801208c:	6823      	ldr	r3, [r4, #0]
 801208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012090:	2b00      	cmp	r3, #0
 8012092:	f000 808c 	beq.w	80121ae <WM__InitIVRSearch+0x17e>
 8012096:	6818      	ldr	r0, [r3, #0]
 8012098:	6859      	ldr	r1, [r3, #4]
 801209a:	4f4a      	ldr	r7, [pc, #296]	; (80121c4 <WM__InitIVRSearch+0x194>)
 801209c:	9a01      	ldr	r2, [sp, #4]
 801209e:	9202      	str	r2, [sp, #8]
 80120a0:	ab06      	add	r3, sp, #24
 80120a2:	c303      	stmia	r3!, {r0, r1}
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d164      	bne.n	8012174 <WM__InitIVRSearch+0x144>
 80120aa:	4613      	mov	r3, r2
 80120ac:	f10d 0808 	add.w	r8, sp, #8
 80120b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80120b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80120b8:	a806      	add	r0, sp, #24
 80120ba:	f005 fedf 	bl	8017e7c <GUI_MoveRect>
 80120be:	4630      	mov	r0, r6
 80120c0:	a906      	add	r1, sp, #24
 80120c2:	f003 fcf5 	bl	8015ab0 <GUI__IntersectRect>
 80120c6:	4640      	mov	r0, r8
 80120c8:	f007 f864 	bl	8019194 <GUI_ALLOC_UnlockH>
 80120cc:	f8d7 9000 	ldr.w	r9, [r7]
 80120d0:	f10d 080c 	add.w	r8, sp, #12
 80120d4:	f1b9 0f00 	cmp.w	r9, #0
 80120d8:	d129      	bne.n	801212e <WM__InitIVRSearch+0xfe>
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80120de:	e009      	b.n	80120f4 <WM__InitIVRSearch+0xc4>
 80120e0:	f003 fce6 	bl	8015ab0 <GUI__IntersectRect>
 80120e4:	9b03      	ldr	r3, [sp, #12]
 80120e6:	699c      	ldr	r4, [r3, #24]
 80120e8:	4640      	mov	r0, r8
 80120ea:	2c00      	cmp	r4, #0
 80120ec:	d032      	beq.n	8012154 <WM__InitIVRSearch+0x124>
 80120ee:	f007 f851 	bl	8019194 <GUI_ALLOC_UnlockH>
 80120f2:	4627      	mov	r7, r4
 80120f4:	4638      	mov	r0, r7
 80120f6:	f007 f83b 	bl	8019170 <GUI_ALLOC_LockH>
 80120fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80120fc:	9003      	str	r0, [sp, #12]
 80120fe:	0793      	lsls	r3, r2, #30
 8012100:	4601      	mov	r1, r0
 8012102:	4630      	mov	r0, r6
 8012104:	d4ec      	bmi.n	80120e0 <WM__InitIVRSearch+0xb0>
 8012106:	4640      	mov	r0, r8
 8012108:	f007 f844 	bl	8019194 <GUI_ALLOC_UnlockH>
 801210c:	696b      	ldr	r3, [r5, #20]
 801210e:	2000      	movs	r0, #0
 8012110:	3b01      	subs	r3, #1
 8012112:	616b      	str	r3, [r5, #20]
 8012114:	b009      	add	sp, #36	; 0x24
 8012116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801211a:	f003 fcc9 	bl	8015ab0 <GUI__IntersectRect>
 801211e:	9b03      	ldr	r3, [sp, #12]
 8012120:	699f      	ldr	r7, [r3, #24]
 8012122:	4640      	mov	r0, r8
 8012124:	2f00      	cmp	r7, #0
 8012126:	d030      	beq.n	801218a <WM__InitIVRSearch+0x15a>
 8012128:	f007 f834 	bl	8019194 <GUI_ALLOC_UnlockH>
 801212c:	46b9      	mov	r9, r7
 801212e:	4648      	mov	r0, r9
 8012130:	f007 f81e 	bl	8019170 <GUI_ALLOC_LockH>
 8012134:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012136:	9003      	str	r0, [sp, #12]
 8012138:	0792      	lsls	r2, r2, #30
 801213a:	4601      	mov	r1, r0
 801213c:	4630      	mov	r0, r6
 801213e:	d4ec      	bmi.n	801211a <WM__InitIVRSearch+0xea>
 8012140:	e7e1      	b.n	8012106 <WM__InitIVRSearch+0xd6>
 8012142:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012144:	f013 0602 	ands.w	r6, r3, #2
 8012148:	d029      	beq.n	801219e <WM__InitIVRSearch+0x16e>
 801214a:	c803      	ldmia	r0, {r0, r1}
 801214c:	ae04      	add	r6, sp, #16
 801214e:	e886 0003 	stmia.w	r6, {r0, r1}
 8012152:	e796      	b.n	8012082 <WM__InitIVRSearch+0x52>
 8012154:	f007 f81e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012158:	4b1b      	ldr	r3, [pc, #108]	; (80121c8 <WM__InitIVRSearch+0x198>)
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	4297      	cmp	r7, r2
 801215e:	d002      	beq.n	8012166 <WM__InitIVRSearch+0x136>
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	429f      	cmp	r7, r3
 8012164:	d1d2      	bne.n	801210c <WM__InitIVRSearch+0xdc>
 8012166:	e896 0003 	ldmia.w	r6, {r0, r1}
 801216a:	e885 0003 	stmia.w	r5, {r0, r1}
 801216e:	f7ff fe39 	bl	8011de4 <WM__GetNextIVR>
 8012172:	e76d      	b.n	8012050 <WM__InitIVRSearch+0x20>
 8012174:	f10d 0808 	add.w	r8, sp, #8
 8012178:	4640      	mov	r0, r8
 801217a:	f007 f80b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801217e:	6838      	ldr	r0, [r7, #0]
 8012180:	f006 fff6 	bl	8019170 <GUI_ALLOC_LockH>
 8012184:	9002      	str	r0, [sp, #8]
 8012186:	4603      	mov	r3, r0
 8012188:	e792      	b.n	80120b0 <WM__InitIVRSearch+0x80>
 801218a:	f007 f803 	bl	8019194 <GUI_ALLOC_UnlockH>
 801218e:	4b0e      	ldr	r3, [pc, #56]	; (80121c8 <WM__InitIVRSearch+0x198>)
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	4591      	cmp	r9, r2
 8012194:	d0a1      	beq.n	80120da <WM__InitIVRSearch+0xaa>
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	4599      	cmp	r9, r3
 801219a:	d1b7      	bne.n	801210c <WM__InitIVRSearch+0xdc>
 801219c:	e79d      	b.n	80120da <WM__InitIVRSearch+0xaa>
 801219e:	696b      	ldr	r3, [r5, #20]
 80121a0:	a801      	add	r0, sp, #4
 80121a2:	3b01      	subs	r3, #1
 80121a4:	616b      	str	r3, [r5, #20]
 80121a6:	f006 fff5 	bl	8019194 <GUI_ALLOC_UnlockH>
 80121aa:	4630      	mov	r0, r6
 80121ac:	e750      	b.n	8012050 <WM__InitIVRSearch+0x20>
 80121ae:	a801      	add	r0, sp, #4
 80121b0:	f006 fff0 	bl	8019194 <GUI_ALLOC_UnlockH>
 80121b4:	4f03      	ldr	r7, [pc, #12]	; (80121c4 <WM__InitIVRSearch+0x194>)
 80121b6:	e789      	b.n	80120cc <WM__InitIVRSearch+0x9c>
 80121b8:	2000026c 	.word	0x2000026c
 80121bc:	2002aeac 	.word	0x2002aeac
 80121c0:	2002bfa0 	.word	0x2002bfa0
 80121c4:	2002bf70 	.word	0x2002bf70
 80121c8:	2002bf74 	.word	0x2002bf74

080121cc <WM__Paint1>:
 80121cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121d0:	b089      	sub	sp, #36	; 0x24
 80121d2:	4605      	mov	r5, r0
 80121d4:	f006 ffcc 	bl	8019170 <GUI_ALLOC_LockH>
 80121d8:	f100 0208 	add.w	r2, r0, #8
 80121dc:	4603      	mov	r3, r0
 80121de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121e2:	ac02      	add	r4, sp, #8
 80121e4:	691f      	ldr	r7, [r3, #16]
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80121ec:	a801      	add	r0, sp, #4
 80121ee:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80121f0:	f006 ffd0 	bl	8019194 <GUI_ALLOC_UnlockH>
 80121f4:	b10f      	cbz	r7, 80121fa <WM__Paint1+0x2e>
 80121f6:	07b3      	lsls	r3, r6, #30
 80121f8:	d402      	bmi.n	8012200 <WM__Paint1+0x34>
 80121fa:	b009      	add	sp, #36	; 0x24
 80121fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012200:	4f1e      	ldr	r7, [pc, #120]	; (801227c <WM__Paint1+0xb0>)
 8012202:	4628      	mov	r0, r5
 8012204:	212e      	movs	r1, #46	; 0x2e
 8012206:	f7fd fd93 	bl	800fd30 <WM_SendMessageNoPara>
 801220a:	783b      	ldrb	r3, [r7, #0]
 801220c:	f416 5880 	ands.w	r8, r6, #4096	; 0x1000
 8012210:	f103 0301 	add.w	r3, r3, #1
 8012214:	703b      	strb	r3, [r7, #0]
 8012216:	d118      	bne.n	801224a <WM__Paint1+0x7e>
 8012218:	4620      	mov	r0, r4
 801221a:	f7ff ff09 	bl	8012030 <WM__InitIVRSearch>
 801221e:	b310      	cbz	r0, 8012266 <WM__Paint1+0x9a>
 8012220:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8012280 <WM__Paint1+0xb4>
 8012224:	260f      	movs	r6, #15
 8012226:	9505      	str	r5, [sp, #20]
 8012228:	9604      	str	r6, [sp, #16]
 801222a:	9407      	str	r4, [sp, #28]
 801222c:	f005 fec8 	bl	8017fc0 <GL_SetDefault>
 8012230:	f8d9 3000 	ldr.w	r3, [r9]
 8012234:	4628      	mov	r0, r5
 8012236:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
 801223a:	a904      	add	r1, sp, #16
 801223c:	f7fc fa4e 	bl	800e6dc <WM__SendMessage>
 8012240:	f7ff fdd0 	bl	8011de4 <WM__GetNextIVR>
 8012244:	2800      	cmp	r0, #0
 8012246:	d1ee      	bne.n	8012226 <WM__Paint1+0x5a>
 8012248:	e00d      	b.n	8012266 <WM__Paint1+0x9a>
 801224a:	230f      	movs	r3, #15
 801224c:	9304      	str	r3, [sp, #16]
 801224e:	9505      	str	r5, [sp, #20]
 8012250:	9407      	str	r4, [sp, #28]
 8012252:	f005 feb5 	bl	8017fc0 <GL_SetDefault>
 8012256:	4b0a      	ldr	r3, [pc, #40]	; (8012280 <WM__Paint1+0xb4>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2200      	movs	r2, #0
 801225c:	645a      	str	r2, [r3, #68]	; 0x44
 801225e:	4628      	mov	r0, r5
 8012260:	a904      	add	r1, sp, #16
 8012262:	f7fc fa3b 	bl	800e6dc <WM__SendMessage>
 8012266:	783b      	ldrb	r3, [r7, #0]
 8012268:	4628      	mov	r0, r5
 801226a:	3b01      	subs	r3, #1
 801226c:	212f      	movs	r1, #47	; 0x2f
 801226e:	703b      	strb	r3, [r7, #0]
 8012270:	f7fd fd5e 	bl	800fd30 <WM_SendMessageNoPara>
 8012274:	b009      	add	sp, #36	; 0x24
 8012276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801227a:	bf00      	nop
 801227c:	2002bfa0 	.word	0x2002bfa0
 8012280:	2000026c 	.word	0x2000026c

08012284 <WM__DeleteSecure>:
 8012284:	b508      	push	{r3, lr}
 8012286:	f006 ff69 	bl	801915c <GUI_ALLOC_h2p>
 801228a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801228c:	4a03      	ldr	r2, [pc, #12]	; (801229c <WM__DeleteSecure+0x18>)
 801228e:	2101      	movs	r1, #1
 8012290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012294:	6283      	str	r3, [r0, #40]	; 0x28
 8012296:	6011      	str	r1, [r2, #0]
 8012298:	bd08      	pop	{r3, pc}
 801229a:	bf00      	nop
 801229c:	2002aea0 	.word	0x2002aea0

080122a0 <WM_Exec>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	b0ab      	sub	sp, #172	; 0xac
 80122a6:	f004 fbe3 	bl	8016a70 <GUI_Lock>
 80122aa:	4b94      	ldr	r3, [pc, #592]	; (80124fc <WM_Exec+0x25c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	b103      	cbz	r3, 80122b2 <WM_Exec+0x12>
 80122b0:	4798      	blx	r3
 80122b2:	2500      	movs	r5, #0
 80122b4:	e000      	b.n	80122b8 <WM_Exec+0x18>
 80122b6:	2501      	movs	r5, #1
 80122b8:	f7ff f9c8 	bl	801164c <_Exec1Input>
 80122bc:	2800      	cmp	r0, #0
 80122be:	d1fa      	bne.n	80122b6 <WM_Exec+0x16>
 80122c0:	f8df b240 	ldr.w	fp, [pc, #576]	; 8012504 <WM_Exec+0x264>
 80122c4:	f8db 3000 	ldr.w	r3, [fp]
 80122c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80122cc:	b123      	cbz	r3, 80122d8 <WM_Exec+0x38>
 80122ce:	4b8c      	ldr	r3, [pc, #560]	; (8012500 <WM_Exec+0x260>)
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f040 80f5 	bne.w	80124c2 <WM_Exec+0x222>
 80122d8:	9305      	str	r3, [sp, #20]
 80122da:	f004 fbbf 	bl	8016a5c <GUI_Unlock>
 80122de:	f8df a238 	ldr.w	sl, [pc, #568]	; 8012518 <WM_Exec+0x278>
 80122e2:	f8db 3000 	ldr.w	r3, [fp]
 80122e6:	4c87      	ldr	r4, [pc, #540]	; (8012504 <WM_Exec+0x264>)
 80122e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80122ec:	b123      	cbz	r3, 80122f8 <WM_Exec+0x58>
 80122ee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8012500 <WM_Exec+0x260>
 80122f2:	f8b9 3000 	ldrh.w	r3, [r9]
 80122f6:	b99b      	cbnz	r3, 8012320 <WM_Exec+0x80>
 80122f8:	f004 fbba 	bl	8016a70 <GUI_Lock>
 80122fc:	9a05      	ldr	r2, [sp, #20]
 80122fe:	b14a      	cbz	r2, 8012314 <WM_Exec+0x74>
 8012300:	4b81      	ldr	r3, [pc, #516]	; (8012508 <WM_Exec+0x268>)
 8012302:	6818      	ldr	r0, [r3, #0]
 8012304:	2800      	cmp	r0, #0
 8012306:	f000 80e4 	beq.w	80124d2 <WM_Exec+0x232>
 801230a:	6843      	ldr	r3, [r0, #4]
 801230c:	4798      	blx	r3
 801230e:	4b7f      	ldr	r3, [pc, #508]	; (801250c <WM_Exec+0x26c>)
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]
 8012314:	f004 fba2 	bl	8016a5c <GUI_Unlock>
 8012318:	4628      	mov	r0, r5
 801231a:	b02b      	add	sp, #172	; 0xac
 801231c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012320:	f004 fba6 	bl	8016a70 <GUI_Lock>
 8012324:	4a7a      	ldr	r2, [pc, #488]	; (8012510 <WM_Exec+0x270>)
 8012326:	6816      	ldr	r6, [r2, #0]
 8012328:	b9de      	cbnz	r6, 8012362 <WM_Exec+0xc2>
 801232a:	aa0e      	add	r2, sp, #56	; 0x38
 801232c:	4b79      	ldr	r3, [pc, #484]	; (8012514 <WM_Exec+0x274>)
 801232e:	9204      	str	r2, [sp, #16]
 8012330:	4610      	mov	r0, r2
 8012332:	681e      	ldr	r6, [r3, #0]
 8012334:	f005 fe0a 	bl	8017f4c <GUI_SaveContext_W>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801233e:	9206      	str	r2, [sp, #24]
 8012340:	9307      	str	r3, [sp, #28]
 8012342:	b9c6      	cbnz	r6, 8012376 <WM_Exec+0xd6>
 8012344:	4b72      	ldr	r3, [pc, #456]	; (8012510 <WM_Exec+0x270>)
 8012346:	9806      	ldr	r0, [sp, #24]
 8012348:	601e      	str	r6, [r3, #0]
 801234a:	f005 fe2d 	bl	8017fa8 <GUI_SetColor>
 801234e:	9807      	ldr	r0, [sp, #28]
 8012350:	f005 fe1e 	bl	8017f90 <GUI_SetBkColor>
 8012354:	9804      	ldr	r0, [sp, #16]
 8012356:	f005 fe03 	bl	8017f60 <GUI_RestoreContext>
 801235a:	2501      	movs	r5, #1
 801235c:	f004 fb7e 	bl	8016a5c <GUI_Unlock>
 8012360:	e7bf      	b.n	80122e2 <WM_Exec+0x42>
 8012362:	ab0e      	add	r3, sp, #56	; 0x38
 8012364:	4618      	mov	r0, r3
 8012366:	9304      	str	r3, [sp, #16]
 8012368:	f005 fdf0 	bl	8017f4c <GUI_SaveContext_W>
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012372:	9206      	str	r2, [sp, #24]
 8012374:	9307      	str	r3, [sp, #28]
 8012376:	f04f 0801 	mov.w	r8, #1
 801237a:	ad0c      	add	r5, sp, #48	; 0x30
 801237c:	4630      	mov	r0, r6
 801237e:	9609      	str	r6, [sp, #36]	; 0x24
 8012380:	f006 fef6 	bl	8019170 <GUI_ALLOC_LockH>
 8012384:	f100 0208 	add.w	r2, r0, #8
 8012388:	4603      	mov	r3, r0
 801238a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801238e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012390:	9202      	str	r2, [sp, #8]
 8012392:	e885 0003 	stmia.w	r5, {r0, r1}
 8012396:	699a      	ldr	r2, [r3, #24]
 8012398:	930a      	str	r3, [sp, #40]	; 0x28
 801239a:	a80a      	add	r0, sp, #40	; 0x28
 801239c:	9203      	str	r2, [sp, #12]
 801239e:	691c      	ldr	r4, [r3, #16]
 80123a0:	f006 fef8 	bl	8019194 <GUI_ALLOC_UnlockH>
 80123a4:	9a02      	ldr	r2, [sp, #8]
 80123a6:	f244 0320 	movw	r3, #16416	; 0x4020
 80123aa:	4013      	ands	r3, r2
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d032      	beq.n	8012416 <WM_Exec+0x176>
 80123b0:	b1c4      	cbz	r4, 80123e4 <WM_Exec+0x144>
 80123b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80123b4:	e009      	b.n	80123ca <WM_Exec+0x12a>
 80123b6:	f003 fb7b 	bl	8015ab0 <GUI__IntersectRect>
 80123ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123bc:	699f      	ldr	r7, [r3, #24]
 80123be:	a80b      	add	r0, sp, #44	; 0x2c
 80123c0:	2f00      	cmp	r7, #0
 80123c2:	d032      	beq.n	801242a <WM_Exec+0x18a>
 80123c4:	f006 fee6 	bl	8019194 <GUI_ALLOC_UnlockH>
 80123c8:	463c      	mov	r4, r7
 80123ca:	4620      	mov	r0, r4
 80123cc:	f006 fed0 	bl	8019170 <GUI_ALLOC_LockH>
 80123d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80123d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80123d4:	079f      	lsls	r7, r3, #30
 80123d6:	4601      	mov	r1, r0
 80123d8:	4628      	mov	r0, r5
 80123da:	d4ec      	bmi.n	80123b6 <WM_Exec+0x116>
 80123dc:	a80b      	add	r0, sp, #44	; 0x2c
 80123de:	f006 fed9 	bl	8019194 <GUI_ALLOC_UnlockH>
 80123e2:	2400      	movs	r4, #0
 80123e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123e6:	f006 fec3 	bl	8019170 <GUI_ALLOC_LockH>
 80123ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80123ec:	900a      	str	r0, [sp, #40]	; 0x28
 80123ee:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80123f2:	f023 0320 	bic.w	r3, r3, #32
 80123f6:	0492      	lsls	r2, r2, #18
 80123f8:	bf48      	it	mi
 80123fa:	f043 0304 	orrmi.w	r3, r3, #4
 80123fe:	6283      	str	r3, [r0, #40]	; 0x28
 8012400:	a80a      	add	r0, sp, #40	; 0x28
 8012402:	f006 fec7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012406:	f8b9 3000 	ldrh.w	r3, [r9]
 801240a:	3b01      	subs	r3, #1
 801240c:	f8a9 3000 	strh.w	r3, [r9]
 8012410:	b10c      	cbz	r4, 8012416 <WM_Exec+0x176>
 8012412:	f108 38ff 	add.w	r8, r8, #4294967295
 8012416:	4630      	mov	r0, r6
 8012418:	f006 fea0 	bl	801915c <GUI_ALLOC_h2p>
 801241c:	6946      	ldr	r6, [r0, #20]
 801241e:	2e00      	cmp	r6, #0
 8012420:	d090      	beq.n	8012344 <WM_Exec+0xa4>
 8012422:	f1b8 0f00 	cmp.w	r8, #0
 8012426:	d1a9      	bne.n	801237c <WM_Exec+0xdc>
 8012428:	e78c      	b.n	8012344 <WM_Exec+0xa4>
 801242a:	f006 feb3 	bl	8019194 <GUI_ALLOC_UnlockH>
 801242e:	f8da 3000 	ldr.w	r3, [sl]
 8012432:	429c      	cmp	r4, r3
 8012434:	d003      	beq.n	801243e <WM_Exec+0x19e>
 8012436:	4a38      	ldr	r2, [pc, #224]	; (8012518 <WM_Exec+0x278>)
 8012438:	6853      	ldr	r3, [r2, #4]
 801243a:	429c      	cmp	r4, r3
 801243c:	d1d1      	bne.n	80123e2 <WM_Exec+0x142>
 801243e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012440:	f004 fb16 	bl	8016a70 <GUI_Lock>
 8012444:	f8db 3000 	ldr.w	r3, [fp]
 8012448:	b90f      	cbnz	r7, 801244e <WM_Exec+0x1ae>
 801244a:	4a32      	ldr	r2, [pc, #200]	; (8012514 <WM_Exec+0x274>)
 801244c:	6817      	ldr	r7, [r2, #0]
 801244e:	649f      	str	r7, [r3, #72]	; 0x48
 8012450:	463c      	mov	r4, r7
 8012452:	e000      	b.n	8012456 <WM_Exec+0x1b6>
 8012454:	461c      	mov	r4, r3
 8012456:	4620      	mov	r0, r4
 8012458:	f006 fe80 	bl	801915c <GUI_ALLOC_h2p>
 801245c:	6983      	ldr	r3, [r0, #24]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d1f8      	bne.n	8012454 <WM_Exec+0x1b4>
 8012462:	f8da 1000 	ldr.w	r1, [sl]
 8012466:	428c      	cmp	r4, r1
 8012468:	d03b      	beq.n	80124e2 <WM_Exec+0x242>
 801246a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801246e:	429c      	cmp	r4, r3
 8012470:	d03b      	beq.n	80124ea <WM_Exec+0x24a>
 8012472:	f003 f99f 	bl	80157b4 <LCD_SetClipRectMax>
 8012476:	4638      	mov	r0, r7
 8012478:	f006 fe70 	bl	801915c <GUI_ALLOC_h2p>
 801247c:	f8db 3000 	ldr.w	r3, [fp]
 8012480:	f9b0 1000 	ldrsh.w	r1, [r0]
 8012484:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012488:	651a      	str	r2, [r3, #80]	; 0x50
 801248a:	64d9      	str	r1, [r3, #76]	; 0x4c
 801248c:	f004 fae6 	bl	8016a5c <GUI_Unlock>
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	0759      	lsls	r1, r3, #29
 8012494:	d510      	bpl.n	80124b8 <WM_Exec+0x218>
 8012496:	9a03      	ldr	r2, [sp, #12]
 8012498:	b162      	cbz	r2, 80124b4 <WM_Exec+0x214>
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	f083 0301 	eor.w	r3, r3, #1
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	4628      	mov	r0, r5
 80124a6:	491d      	ldr	r1, [pc, #116]	; (801251c <WM_Exec+0x27c>)
 80124a8:	aa09      	add	r2, sp, #36	; 0x24
 80124aa:	2300      	movs	r3, #0
 80124ac:	f000 fb1a 	bl	8012ae4 <GUI_MEMDEV_Draw>
 80124b0:	2400      	movs	r4, #0
 80124b2:	e797      	b.n	80123e4 <WM_Exec+0x144>
 80124b4:	2301      	movs	r3, #1
 80124b6:	e7f4      	b.n	80124a2 <WM_Exec+0x202>
 80124b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124ba:	f7fe f9ed 	bl	8010898 <WM__PaintWinAndOverlays>
 80124be:	2401      	movs	r4, #1
 80124c0:	e790      	b.n	80123e4 <WM_Exec+0x144>
 80124c2:	4b11      	ldr	r3, [pc, #68]	; (8012508 <WM_Exec+0x268>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	b193      	cbz	r3, 80124ee <WM_Exec+0x24e>
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4798      	blx	r3
 80124cc:	2201      	movs	r2, #1
 80124ce:	9205      	str	r2, [sp, #20]
 80124d0:	e703      	b.n	80122da <WM_Exec+0x3a>
 80124d2:	f003 fccb 	bl	8015e6c <GUI__ManageCache>
 80124d6:	f004 fac1 	bl	8016a5c <GUI_Unlock>
 80124da:	4628      	mov	r0, r5
 80124dc:	b02b      	add	sp, #172	; 0xac
 80124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e2:	4618      	mov	r0, r3
 80124e4:	f004 fbe4 	bl	8016cb0 <GUI_SelectLayer>
 80124e8:	e7c3      	b.n	8012472 <WM_Exec+0x1d2>
 80124ea:	2001      	movs	r0, #1
 80124ec:	e7fa      	b.n	80124e4 <WM_Exec+0x244>
 80124ee:	2001      	movs	r0, #1
 80124f0:	f003 fcbc 	bl	8015e6c <GUI__ManageCache>
 80124f4:	2301      	movs	r3, #1
 80124f6:	9305      	str	r3, [sp, #20]
 80124f8:	e6ef      	b.n	80122da <WM_Exec+0x3a>
 80124fa:	bf00      	nop
 80124fc:	2002bf80 	.word	0x2002bf80
 8012500:	2002bf8c 	.word	0x2002bf8c
 8012504:	2000026c 	.word	0x2000026c
 8012508:	2002bfb4 	.word	0x2002bfb4
 801250c:	2002bf9c 	.word	0x2002bf9c
 8012510:	2002aec4 	.word	0x2002aec4
 8012514:	2002bf90 	.word	0x2002bf90
 8012518:	2002bf74 	.word	0x2002bf74
 801251c:	08010939 	.word	0x08010939

08012520 <WM_Activate>:
 8012520:	4b02      	ldr	r3, [pc, #8]	; (801252c <WM_Activate+0xc>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	2201      	movs	r2, #1
 8012526:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801252a:	4770      	bx	lr
 801252c:	2000026c 	.word	0x2000026c

08012530 <WM_Deactivate>:
 8012530:	b508      	push	{r3, lr}
 8012532:	4b06      	ldr	r3, [pc, #24]	; (801254c <WM_Deactivate+0x1c>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2200      	movs	r2, #0
 8012538:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801253c:	f004 fa98 	bl	8016a70 <GUI_Lock>
 8012540:	f003 f938 	bl	80157b4 <LCD_SetClipRectMax>
 8012544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012548:	f004 ba88 	b.w	8016a5c <GUI_Unlock>
 801254c:	2000026c 	.word	0x2000026c

08012550 <WM_DefaultProc>:
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012554:	e890 0028 	ldmia.w	r0, {r3, r5}
 8012558:	3b0e      	subs	r3, #14
 801255a:	b084      	sub	sp, #16
 801255c:	4604      	mov	r4, r0
 801255e:	68c1      	ldr	r1, [r0, #12]
 8012560:	2b1a      	cmp	r3, #26
 8012562:	d812      	bhi.n	801258a <WM_DefaultProc+0x3a>
 8012564:	e8df f003 	tbb	[pc, r3]
 8012568:	11111147 	.word	0x11111147
 801256c:	110e1111 	.word	0x110e1111
 8012570:	11114e11 	.word	0x11114e11
 8012574:	11111111 	.word	0x11111111
 8012578:	11111111 	.word	0x11111111
 801257c:	11111152 	.word	0x11111152
 8012580:	1111      	.short	0x1111
 8012582:	16          	.byte	0x16
 8012583:	00          	.byte	0x00
 8012584:	4628      	mov	r0, r5
 8012586:	f7fc f97d 	bl	800e884 <WM__GetClientRectEx>
 801258a:	2300      	movs	r3, #0
 801258c:	60e3      	str	r3, [r4, #12]
 801258e:	b004      	add	sp, #16
 8012590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012594:	2d00      	cmp	r5, #0
 8012596:	d0fa      	beq.n	801258e <WM_DefaultProc+0x3e>
 8012598:	f004 fa6a 	bl	8016a70 <GUI_Lock>
 801259c:	4628      	mov	r0, r5
 801259e:	f006 fde7 	bl	8019170 <GUI_ALLOC_LockH>
 80125a2:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80125a6:	9000      	str	r0, [sp, #0]
 80125a8:	f018 0f02 	tst.w	r8, #2
 80125ac:	d01d      	beq.n	80125ea <WM_DefaultProc+0x9a>
 80125ae:	c803      	ldmia	r0, {r0, r1}
 80125b0:	af02      	add	r7, sp, #8
 80125b2:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80125b6:	e887 0003 	stmia.w	r7, {r0, r1}
 80125ba:	d142      	bne.n	8012642 <WM_DefaultProc+0xf2>
 80125bc:	462e      	mov	r6, r5
 80125be:	e008      	b.n	80125d2 <WM_DefaultProc+0x82>
 80125c0:	f003 fa76 	bl	8015ab0 <GUI__IntersectRect>
 80125c4:	9b01      	ldr	r3, [sp, #4]
 80125c6:	699c      	ldr	r4, [r3, #24]
 80125c8:	a801      	add	r0, sp, #4
 80125ca:	b32c      	cbz	r4, 8012618 <WM_DefaultProc+0xc8>
 80125cc:	f006 fde2 	bl	8019194 <GUI_ALLOC_UnlockH>
 80125d0:	4626      	mov	r6, r4
 80125d2:	4630      	mov	r0, r6
 80125d4:	f006 fdcc 	bl	8019170 <GUI_ALLOC_LockH>
 80125d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80125da:	9001      	str	r0, [sp, #4]
 80125dc:	0793      	lsls	r3, r2, #30
 80125de:	4601      	mov	r1, r0
 80125e0:	4638      	mov	r0, r7
 80125e2:	d4ed      	bmi.n	80125c0 <WM_DefaultProc+0x70>
 80125e4:	a801      	add	r0, sp, #4
 80125e6:	f006 fdd5 	bl	8019194 <GUI_ALLOC_UnlockH>
 80125ea:	4668      	mov	r0, sp
 80125ec:	f006 fdd2 	bl	8019194 <GUI_ALLOC_UnlockH>
 80125f0:	f004 fa34 	bl	8016a5c <GUI_Unlock>
 80125f4:	e7cb      	b.n	801258e <WM_DefaultProc+0x3e>
 80125f6:	4628      	mov	r0, r5
 80125f8:	4621      	mov	r1, r4
 80125fa:	f7fd fba7 	bl	800fd4c <WM_SendToParent>
 80125fe:	b004      	add	sp, #16
 8012600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012604:	60c5      	str	r5, [r0, #12]
 8012606:	b004      	add	sp, #16
 8012608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801260c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012610:	60c3      	str	r3, [r0, #12]
 8012612:	b004      	add	sp, #16
 8012614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012618:	f006 fdbc 	bl	8019194 <GUI_ALLOC_UnlockH>
 801261c:	4b0f      	ldr	r3, [pc, #60]	; (801265c <WM_DefaultProc+0x10c>)
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	4296      	cmp	r6, r2
 8012622:	d002      	beq.n	801262a <WM_DefaultProc+0xda>
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	429e      	cmp	r6, r3
 8012628:	d1df      	bne.n	80125ea <WM_DefaultProc+0x9a>
 801262a:	f640 0301 	movw	r3, #2049	; 0x801
 801262e:	ea08 0303 	and.w	r3, r8, r3
 8012632:	2b01      	cmp	r3, #1
 8012634:	d009      	beq.n	801264a <WM_DefaultProc+0xfa>
 8012636:	4628      	mov	r0, r5
 8012638:	4639      	mov	r1, r7
 801263a:	2220      	movs	r2, #32
 801263c:	f7fe f9b2 	bl	80109a4 <_Invalidate1Abs>
 8012640:	e7d3      	b.n	80125ea <WM_DefaultProc+0x9a>
 8012642:	4628      	mov	r0, r5
 8012644:	f7fe fb56 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 8012648:	e7b8      	b.n	80125bc <WM_DefaultProc+0x6c>
 801264a:	9b00      	ldr	r3, [sp, #0]
 801264c:	4638      	mov	r0, r7
 801264e:	6999      	ldr	r1, [r3, #24]
 8012650:	6a1a      	ldr	r2, [r3, #32]
 8012652:	2320      	movs	r3, #32
 8012654:	f7fe fe6e 	bl	8011334 <WM__InvalidateRect>
 8012658:	e7c7      	b.n	80125ea <WM_DefaultProc+0x9a>
 801265a:	bf00      	nop
 801265c:	2002bf74 	.word	0x2002bf74

08012660 <WM_Init>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 801284c <WM_Init+0x1ec>
 8012668:	f899 4000 	ldrb.w	r4, [r9]
 801266c:	b08b      	sub	sp, #44	; 0x2c
 801266e:	2c00      	cmp	r4, #0
 8012670:	d174      	bne.n	801275c <WM_Init+0xfc>
 8012672:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8012850 <WM_Init+0x1f0>
 8012676:	4866      	ldr	r0, [pc, #408]	; (8012810 <WM_Init+0x1b0>)
 8012678:	f8d8 3000 	ldr.w	r3, [r8]
 801267c:	4965      	ldr	r1, [pc, #404]	; (8012814 <WM_Init+0x1b4>)
 801267e:	4a66      	ldr	r2, [pc, #408]	; (8012818 <WM_Init+0x1b8>)
 8012680:	645c      	str	r4, [r3, #68]	; 0x44
 8012682:	4b66      	ldr	r3, [pc, #408]	; (801281c <WM_Init+0x1bc>)
 8012684:	4e66      	ldr	r6, [pc, #408]	; (8012820 <WM_Init+0x1c0>)
 8012686:	601c      	str	r4, [r3, #0]
 8012688:	6004      	str	r4, [r0, #0]
 801268a:	800c      	strh	r4, [r1, #0]
 801268c:	8014      	strh	r4, [r2, #0]
 801268e:	4620      	mov	r0, r4
 8012690:	f004 ff1c 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8012694:	b1c8      	cbz	r0, 80126ca <WM_Init+0x6a>
 8012696:	2300      	movs	r3, #0
 8012698:	f643 72ff 	movw	r2, #16383	; 0x3fff
 801269c:	f04f 37ff 	mov.w	r7, #4294967295
 80126a0:	4960      	ldr	r1, [pc, #384]	; (8012824 <WM_Init+0x1c4>)
 80126a2:	9102      	str	r1, [sp, #8]
 80126a4:	2502      	movs	r5, #2
 80126a6:	4618      	mov	r0, r3
 80126a8:	9303      	str	r3, [sp, #12]
 80126aa:	4619      	mov	r1, r3
 80126ac:	9700      	str	r7, [sp, #0]
 80126ae:	4613      	mov	r3, r2
 80126b0:	9501      	str	r5, [sp, #4]
 80126b2:	f7ff fa43 	bl	8011b3c <WM_CreateWindowAsChild>
 80126b6:	4a5c      	ldr	r2, [pc, #368]	; (8012828 <WM_Init+0x1c8>)
 80126b8:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80126bc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80126c0:	4607      	mov	r7, r0
 80126c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d14b      	bne.n	8012762 <WM_Init+0x102>
 80126ca:	3401      	adds	r4, #1
 80126cc:	2c02      	cmp	r4, #2
 80126ce:	d1de      	bne.n	801268e <WM_Init+0x2e>
 80126d0:	4856      	ldr	r0, [pc, #344]	; (801282c <WM_Init+0x1cc>)
 80126d2:	f7fc f8cf 	bl	800e874 <WM__AddCriticalHandle>
 80126d6:	4856      	ldr	r0, [pc, #344]	; (8012830 <WM_Init+0x1d0>)
 80126d8:	f7fc f8cc 	bl	800e874 <WM__AddCriticalHandle>
 80126dc:	4855      	ldr	r0, [pc, #340]	; (8012834 <WM_Init+0x1d4>)
 80126de:	f7fc f8c9 	bl	800e874 <WM__AddCriticalHandle>
 80126e2:	4855      	ldr	r0, [pc, #340]	; (8012838 <WM_Init+0x1d8>)
 80126e4:	f7fc f8c6 	bl	800e874 <WM__AddCriticalHandle>
 80126e8:	4854      	ldr	r0, [pc, #336]	; (801283c <WM_Init+0x1dc>)
 80126ea:	f7fc f8c3 	bl	800e874 <WM__AddCriticalHandle>
 80126ee:	4854      	ldr	r0, [pc, #336]	; (8012840 <WM_Init+0x1e0>)
 80126f0:	f7fc f8c0 	bl	800e874 <WM__AddCriticalHandle>
 80126f4:	6835      	ldr	r5, [r6, #0]
 80126f6:	f004 f9bb 	bl	8016a70 <GUI_Lock>
 80126fa:	f8d8 3000 	ldr.w	r3, [r8]
 80126fe:	b90d      	cbnz	r5, 8012704 <WM_Init+0xa4>
 8012700:	4a46      	ldr	r2, [pc, #280]	; (801281c <WM_Init+0x1bc>)
 8012702:	6815      	ldr	r5, [r2, #0]
 8012704:	649d      	str	r5, [r3, #72]	; 0x48
 8012706:	462c      	mov	r4, r5
 8012708:	e000      	b.n	801270c <WM_Init+0xac>
 801270a:	461c      	mov	r4, r3
 801270c:	4620      	mov	r0, r4
 801270e:	f006 fd25 	bl	801915c <GUI_ALLOC_h2p>
 8012712:	6983      	ldr	r3, [r0, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1f8      	bne.n	801270a <WM_Init+0xaa>
 8012718:	6832      	ldr	r2, [r6, #0]
 801271a:	4941      	ldr	r1, [pc, #260]	; (8012820 <WM_Init+0x1c0>)
 801271c:	4294      	cmp	r4, r2
 801271e:	d071      	beq.n	8012804 <WM_Init+0x1a4>
 8012720:	684b      	ldr	r3, [r1, #4]
 8012722:	429c      	cmp	r4, r3
 8012724:	d072      	beq.n	801280c <WM_Init+0x1ac>
 8012726:	f003 f845 	bl	80157b4 <LCD_SetClipRectMax>
 801272a:	4628      	mov	r0, r5
 801272c:	f006 fd16 	bl	801915c <GUI_ALLOC_h2p>
 8012730:	f8d8 3000 	ldr.w	r3, [r8]
 8012734:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012738:	f9b0 1000 	ldrsh.w	r1, [r0]
 801273c:	64d9      	str	r1, [r3, #76]	; 0x4c
 801273e:	651a      	str	r2, [r3, #80]	; 0x50
 8012740:	f004 f98c 	bl	8016a5c <GUI_Unlock>
 8012744:	483f      	ldr	r0, [pc, #252]	; (8012844 <WM_Init+0x1e4>)
 8012746:	4b40      	ldr	r3, [pc, #256]	; (8012848 <WM_Init+0x1e8>)
 8012748:	f8d8 2000 	ldr.w	r2, [r8]
 801274c:	6003      	str	r3, [r0, #0]
 801274e:	2301      	movs	r3, #1
 8012750:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 8012754:	f889 3000 	strb.w	r3, [r9]
 8012758:	f005 f900 	bl	801795c <GUI__RegisterExit>
 801275c:	b00b      	add	sp, #44	; 0x2c
 801275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012762:	f004 f985 	bl	8016a70 <GUI_Lock>
 8012766:	4638      	mov	r0, r7
 8012768:	f006 fd02 	bl	8019170 <GUI_ALLOC_LockH>
 801276c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801276e:	9006      	str	r0, [sp, #24]
 8012770:	0799      	lsls	r1, r3, #30
 8012772:	9305      	str	r3, [sp, #20]
 8012774:	d51e      	bpl.n	80127b4 <WM_Init+0x154>
 8012776:	c803      	ldmia	r0, {r0, r1}
 8012778:	f10d 0a20 	add.w	sl, sp, #32
 801277c:	03da      	lsls	r2, r3, #15
 801277e:	e88a 0003 	stmia.w	sl, {r0, r1}
 8012782:	d43b      	bmi.n	80127fc <WM_Init+0x19c>
 8012784:	463d      	mov	r5, r7
 8012786:	46bb      	mov	fp, r7
 8012788:	e008      	b.n	801279c <WM_Init+0x13c>
 801278a:	f003 f991 	bl	8015ab0 <GUI__IntersectRect>
 801278e:	9b07      	ldr	r3, [sp, #28]
 8012790:	699f      	ldr	r7, [r3, #24]
 8012792:	a807      	add	r0, sp, #28
 8012794:	b1a7      	cbz	r7, 80127c0 <WM_Init+0x160>
 8012796:	f006 fcfd 	bl	8019194 <GUI_ALLOC_UnlockH>
 801279a:	463d      	mov	r5, r7
 801279c:	4628      	mov	r0, r5
 801279e:	f006 fce7 	bl	8019170 <GUI_ALLOC_LockH>
 80127a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80127a4:	9007      	str	r0, [sp, #28]
 80127a6:	079b      	lsls	r3, r3, #30
 80127a8:	4601      	mov	r1, r0
 80127aa:	4650      	mov	r0, sl
 80127ac:	d4ed      	bmi.n	801278a <WM_Init+0x12a>
 80127ae:	a807      	add	r0, sp, #28
 80127b0:	f006 fcf0 	bl	8019194 <GUI_ALLOC_UnlockH>
 80127b4:	a806      	add	r0, sp, #24
 80127b6:	f006 fced 	bl	8019194 <GUI_ALLOC_UnlockH>
 80127ba:	f004 f94f 	bl	8016a5c <GUI_Unlock>
 80127be:	e784      	b.n	80126ca <WM_Init+0x6a>
 80127c0:	f006 fce8 	bl	8019194 <GUI_ALLOC_UnlockH>
 80127c4:	6833      	ldr	r3, [r6, #0]
 80127c6:	429d      	cmp	r5, r3
 80127c8:	465f      	mov	r7, fp
 80127ca:	d003      	beq.n	80127d4 <WM_Init+0x174>
 80127cc:	4914      	ldr	r1, [pc, #80]	; (8012820 <WM_Init+0x1c0>)
 80127ce:	684b      	ldr	r3, [r1, #4]
 80127d0:	429d      	cmp	r5, r3
 80127d2:	d1ef      	bne.n	80127b4 <WM_Init+0x154>
 80127d4:	9a05      	ldr	r2, [sp, #20]
 80127d6:	f640 0301 	movw	r3, #2049	; 0x801
 80127da:	4013      	ands	r3, r2
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d005      	beq.n	80127ec <WM_Init+0x18c>
 80127e0:	4638      	mov	r0, r7
 80127e2:	4651      	mov	r1, sl
 80127e4:	2220      	movs	r2, #32
 80127e6:	f7fe f8dd 	bl	80109a4 <_Invalidate1Abs>
 80127ea:	e7e3      	b.n	80127b4 <WM_Init+0x154>
 80127ec:	9b06      	ldr	r3, [sp, #24]
 80127ee:	4650      	mov	r0, sl
 80127f0:	6999      	ldr	r1, [r3, #24]
 80127f2:	6a1a      	ldr	r2, [r3, #32]
 80127f4:	2320      	movs	r3, #32
 80127f6:	f7fe fd9d 	bl	8011334 <WM__InvalidateRect>
 80127fa:	e7db      	b.n	80127b4 <WM_Init+0x154>
 80127fc:	4638      	mov	r0, r7
 80127fe:	f7fe fa79 	bl	8010cf4 <WM__InvalidateDrawAndDescs>
 8012802:	e7bf      	b.n	8012784 <WM_Init+0x124>
 8012804:	4618      	mov	r0, r3
 8012806:	f004 fa53 	bl	8016cb0 <GUI_SelectLayer>
 801280a:	e78c      	b.n	8012726 <WM_Init+0xc6>
 801280c:	2001      	movs	r0, #1
 801280e:	e7fa      	b.n	8012806 <WM_Init+0x1a6>
 8012810:	2002aec4 	.word	0x2002aec4
 8012814:	2002bf8c 	.word	0x2002bf8c
 8012818:	2002bf6c 	.word	0x2002bf6c
 801281c:	2002bf90 	.word	0x2002bf90
 8012820:	2002bf74 	.word	0x2002bf74
 8012824:	080119d5 	.word	0x080119d5
 8012828:	2002bfa8 	.word	0x2002bfa8
 801282c:	2002c130 	.word	0x2002c130
 8012830:	2002c120 	.word	0x2002c120
 8012834:	2002c110 	.word	0x2002c110
 8012838:	2002c138 	.word	0x2002c138
 801283c:	2002c128 	.word	0x2002c128
 8012840:	2002c118 	.word	0x2002c118
 8012844:	2002aea4 	.word	0x2002aea4
 8012848:	08010329 	.word	0x08010329
 801284c:	2002aec8 	.word	0x2002aec8
 8012850:	2000026c 	.word	0x2000026c

08012854 <GUI_MEMDEV_Paint1Static>:
 8012854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012858:	f8df b198 	ldr.w	fp, [pc, #408]	; 80129f4 <GUI_MEMDEV_Paint1Static+0x1a0>
 801285c:	b089      	sub	sp, #36	; 0x24
 801285e:	4604      	mov	r4, r0
 8012860:	2505      	movs	r5, #5
 8012862:	4620      	mov	r0, r4
 8012864:	f006 fc84 	bl	8019170 <GUI_ALLOC_LockH>
 8012868:	4603      	mov	r3, r0
 801286a:	a807      	add	r0, sp, #28
 801286c:	881f      	ldrh	r7, [r3, #0]
 801286e:	889e      	ldrh	r6, [r3, #4]
 8012870:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012874:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8012878:	9307      	str	r3, [sp, #28]
 801287a:	b23f      	sxth	r7, r7
 801287c:	b236      	sxth	r6, r6
 801287e:	1bf6      	subs	r6, r6, r7
 8012880:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012884:	fa0f f989 	sxth.w	r9, r9
 8012888:	f006 fc84 	bl	8019194 <GUI_ALLOC_UnlockH>
 801288c:	3601      	adds	r6, #1
 801288e:	fa0f fc8a 	sxth.w	ip, sl
 8012892:	ebc9 0c0c 	rsb	ip, r9, ip
 8012896:	2e00      	cmp	r6, #0
 8012898:	f10c 0a01 	add.w	sl, ip, #1
 801289c:	dd57      	ble.n	801294e <GUI_MEMDEV_Paint1Static+0xfa>
 801289e:	f1ba 0f00 	cmp.w	sl, #0
 80128a2:	dd54      	ble.n	801294e <GUI_MEMDEV_Paint1Static+0xfa>
 80128a4:	f1b8 0f00 	cmp.w	r8, #0
 80128a8:	d156      	bne.n	8012958 <GUI_MEMDEV_Paint1Static+0x104>
 80128aa:	f7fc fe27 	bl	800f4fc <WM_GetDesktopWindow>
 80128ae:	4284      	cmp	r4, r0
 80128b0:	f000 8082 	beq.w	80129b8 <GUI_MEMDEV_Paint1Static+0x164>
 80128b4:	4a4b      	ldr	r2, [pc, #300]	; (80129e4 <GUI_MEMDEV_Paint1Static+0x190>)
 80128b6:	4b4c      	ldr	r3, [pc, #304]	; (80129e8 <GUI_MEMDEV_Paint1Static+0x194>)
 80128b8:	9201      	str	r2, [sp, #4]
 80128ba:	f04f 0801 	mov.w	r8, #1
 80128be:	9302      	str	r3, [sp, #8]
 80128c0:	4638      	mov	r0, r7
 80128c2:	4649      	mov	r1, r9
 80128c4:	4632      	mov	r2, r6
 80128c6:	4653      	mov	r3, sl
 80128c8:	f8cd 8000 	str.w	r8, [sp]
 80128cc:	f001 f872 	bl	80139b4 <GUI_MEMDEV__CreateFixed>
 80128d0:	4607      	mov	r7, r0
 80128d2:	4620      	mov	r0, r4
 80128d4:	f006 fc4c 	bl	8019170 <GUI_ALLOC_LockH>
 80128d8:	9007      	str	r0, [sp, #28]
 80128da:	6247      	str	r7, [r0, #36]	; 0x24
 80128dc:	2f00      	cmp	r7, #0
 80128de:	d064      	beq.n	80129aa <GUI_MEMDEV_Paint1Static+0x156>
 80128e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80128e2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80129f8 <GUI_MEMDEV_Paint1Static+0x1a4>
 80128e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128ea:	6283      	str	r3, [r0, #40]	; 0x28
 80128ec:	a807      	add	r0, sp, #28
 80128ee:	f006 fc51 	bl	8019194 <GUI_ALLOC_UnlockH>
 80128f2:	4638      	mov	r0, r7
 80128f4:	f001 f982 	bl	8013bfc <GUI_MEMDEV_Select>
 80128f8:	9005      	str	r0, [sp, #20]
 80128fa:	4640      	mov	r0, r8
 80128fc:	f004 f9ae 	bl	8016c5c <GUI__AlphaPreserveTrans>
 8012900:	4638      	mov	r0, r7
 8012902:	f000 f8d7 	bl	8012ab4 <GUI_MEMDEV_GetDataPtr>
 8012906:	4a39      	ldr	r2, [pc, #228]	; (80129ec <GUI_MEMDEV_Paint1Static+0x198>)
 8012908:	f8db 3000 	ldr.w	r3, [fp]
 801290c:	7811      	ldrb	r1, [r2, #0]
 801290e:	fb0a f206 	mul.w	r2, sl, r6
 8012912:	0092      	lsls	r2, r2, #2
 8012914:	4798      	blx	r3
 8012916:	4a36      	ldr	r2, [pc, #216]	; (80129f0 <GUI_MEMDEV_Paint1Static+0x19c>)
 8012918:	f8d9 6000 	ldr.w	r6, [r9]
 801291c:	6014      	str	r4, [r2, #0]
 801291e:	4620      	mov	r0, r4
 8012920:	f7fd f814 	bl	800f94c <WM_GetWindowOrgX>
 8012924:	f8c9 0000 	str.w	r0, [r9]
 8012928:	4620      	mov	r0, r4
 801292a:	f7ff fc4f 	bl	80121cc <WM__Paint1>
 801292e:	2300      	movs	r3, #0
 8012930:	4a2f      	ldr	r2, [pc, #188]	; (80129f0 <GUI_MEMDEV_Paint1Static+0x19c>)
 8012932:	f8c9 6000 	str.w	r6, [r9]
 8012936:	4618      	mov	r0, r3
 8012938:	6013      	str	r3, [r2, #0]
 801293a:	f004 f98f 	bl	8016c5c <GUI__AlphaPreserveTrans>
 801293e:	9805      	ldr	r0, [sp, #20]
 8012940:	f001 f95c 	bl	8013bfc <GUI_MEMDEV_Select>
 8012944:	4620      	mov	r0, r4
 8012946:	f006 fc09 	bl	801915c <GUI_ALLOC_h2p>
 801294a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801294c:	b9f8      	cbnz	r0, 801298e <GUI_MEMDEV_Paint1Static+0x13a>
 801294e:	3d01      	subs	r5, #1
 8012950:	d187      	bne.n	8012862 <GUI_MEMDEV_Paint1Static+0xe>
 8012952:	b009      	add	sp, #36	; 0x24
 8012954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012958:	4640      	mov	r0, r8
 801295a:	f006 fc09 	bl	8019170 <GUI_ALLOC_LockH>
 801295e:	4603      	mov	r3, r0
 8012960:	a808      	add	r0, sp, #32
 8012962:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 8012966:	f840 3d08 	str.w	r3, [r0, #-8]!
 801296a:	fa0f fa8a 	sxth.w	sl, sl
 801296e:	88de      	ldrh	r6, [r3, #6]
 8012970:	f006 fc10 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012974:	4557      	cmp	r7, sl
 8012976:	d00f      	beq.n	8012998 <GUI_MEMDEV_Paint1Static+0x144>
 8012978:	4640      	mov	r0, r8
 801297a:	4639      	mov	r1, r7
 801297c:	464a      	mov	r2, r9
 801297e:	f000 f83d 	bl	80129fc <GUI_MEMDEV_SetOrg>
 8012982:	4620      	mov	r0, r4
 8012984:	f006 fbea 	bl	801915c <GUI_ALLOC_h2p>
 8012988:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801298a:	2800      	cmp	r0, #0
 801298c:	d0df      	beq.n	801294e <GUI_MEMDEV_Paint1Static+0xfa>
 801298e:	f009 fadb 	bl	801bf48 <GUI_MEMDEV_Write>
 8012992:	b009      	add	sp, #36	; 0x24
 8012994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012998:	b236      	sxth	r6, r6
 801299a:	45b1      	cmp	r9, r6
 801299c:	d0d2      	beq.n	8012944 <GUI_MEMDEV_Paint1Static+0xf0>
 801299e:	4640      	mov	r0, r8
 80129a0:	4639      	mov	r1, r7
 80129a2:	464a      	mov	r2, r9
 80129a4:	f000 f82a 	bl	80129fc <GUI_MEMDEV_SetOrg>
 80129a8:	e7eb      	b.n	8012982 <GUI_MEMDEV_Paint1Static+0x12e>
 80129aa:	a807      	add	r0, sp, #28
 80129ac:	f006 fbf2 	bl	8019194 <GUI_ALLOC_UnlockH>
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7ff fc0b 	bl	80121cc <WM__Paint1>
 80129b6:	e7ca      	b.n	801294e <GUI_MEMDEV_Paint1Static+0xfa>
 80129b8:	f002 fa44 	bl	8014e44 <LCD_GetXSize>
 80129bc:	4680      	mov	r8, r0
 80129be:	f002 fa55 	bl	8014e6c <LCD_GetYSize>
 80129c2:	4546      	cmp	r6, r8
 80129c4:	dc03      	bgt.n	80129ce <GUI_MEMDEV_Paint1Static+0x17a>
 80129c6:	4582      	cmp	sl, r0
 80129c8:	f77f af74 	ble.w	80128b4 <GUI_MEMDEV_Paint1Static+0x60>
 80129cc:	46b0      	mov	r8, r6
 80129ce:	4582      	cmp	sl, r0
 80129d0:	bfa8      	it	ge
 80129d2:	4682      	movge	sl, r0
 80129d4:	4652      	mov	r2, sl
 80129d6:	4620      	mov	r0, r4
 80129d8:	4641      	mov	r1, r8
 80129da:	f7fd fa53 	bl	800fe84 <WM_SetSize>
 80129de:	4646      	mov	r6, r8
 80129e0:	e768      	b.n	80128b4 <GUI_MEMDEV_Paint1Static+0x60>
 80129e2:	bf00      	nop
 80129e4:	0801e6f0 	.word	0x0801e6f0
 80129e8:	080216b4 	.word	0x080216b4
 80129ec:	2002aec9 	.word	0x2002aec9
 80129f0:	2002bfc0 	.word	0x2002bfc0
 80129f4:	20000240 	.word	0x20000240
 80129f8:	2002bffc 	.word	0x2002bffc

080129fc <GUI_MEMDEV_SetOrg>:
 80129fc:	b570      	push	{r4, r5, r6, lr}
 80129fe:	4604      	mov	r4, r0
 8012a00:	b082      	sub	sp, #8
 8012a02:	460d      	mov	r5, r1
 8012a04:	4616      	mov	r6, r2
 8012a06:	b928      	cbnz	r0, 8012a14 <GUI_MEMDEV_SetOrg+0x18>
 8012a08:	4b18      	ldr	r3, [pc, #96]	; (8012a6c <GUI_MEMDEV_SetOrg+0x70>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8012a0e:	b90c      	cbnz	r4, 8012a14 <GUI_MEMDEV_SetOrg+0x18>
 8012a10:	b002      	add	sp, #8
 8012a12:	bd70      	pop	{r4, r5, r6, pc}
 8012a14:	f004 f82c 	bl	8016a70 <GUI_Lock>
 8012a18:	4620      	mov	r0, r4
 8012a1a:	f006 fba9 	bl	8019170 <GUI_ALLOC_LockH>
 8012a1e:	b2b6      	uxth	r6, r6
 8012a20:	b2ad      	uxth	r5, r5
 8012a22:	80c6      	strh	r6, [r0, #6]
 8012a24:	8085      	strh	r5, [r0, #4]
 8012a26:	9000      	str	r0, [sp, #0]
 8012a28:	f002 fec4 	bl	80157b4 <LCD_SetClipRectMax>
 8012a2c:	9b00      	ldr	r3, [sp, #0]
 8012a2e:	6958      	ldr	r0, [r3, #20]
 8012a30:	b930      	cbnz	r0, 8012a40 <GUI_MEMDEV_SetOrg+0x44>
 8012a32:	4668      	mov	r0, sp
 8012a34:	f006 fbae 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012a38:	f004 f810 	bl	8016a5c <GUI_Unlock>
 8012a3c:	b002      	add	sp, #8
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	f006 fb96 	bl	8019170 <GUI_ALLOC_LockH>
 8012a44:	9a00      	ldr	r2, [sp, #0]
 8012a46:	9001      	str	r0, [sp, #4]
 8012a48:	8913      	ldrh	r3, [r2, #8]
 8012a4a:	8952      	ldrh	r2, [r2, #10]
 8012a4c:	80c2      	strh	r2, [r0, #6]
 8012a4e:	8083      	strh	r3, [r0, #4]
 8012a50:	b113      	cbz	r3, 8012a58 <GUI_MEMDEV_SetOrg+0x5c>
 8012a52:	b10a      	cbz	r2, 8012a58 <GUI_MEMDEV_SetOrg+0x5c>
 8012a54:	8005      	strh	r5, [r0, #0]
 8012a56:	8046      	strh	r6, [r0, #2]
 8012a58:	a801      	add	r0, sp, #4
 8012a5a:	f006 fb9b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012a5e:	4668      	mov	r0, sp
 8012a60:	f006 fb98 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012a64:	f003 fffa 	bl	8016a5c <GUI_Unlock>
 8012a68:	e7e8      	b.n	8012a3c <GUI_MEMDEV_SetOrg+0x40>
 8012a6a:	bf00      	nop
 8012a6c:	2000026c 	.word	0x2000026c

08012a70 <GUI_MEMDEV_GetYSize>:
 8012a70:	b510      	push	{r4, lr}
 8012a72:	4604      	mov	r4, r0
 8012a74:	b082      	sub	sp, #8
 8012a76:	f003 fffb 	bl	8016a70 <GUI_Lock>
 8012a7a:	b17c      	cbz	r4, 8012a9c <GUI_MEMDEV_GetYSize+0x2c>
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f006 fb77 	bl	8019170 <GUI_ALLOC_LockH>
 8012a82:	ab02      	add	r3, sp, #8
 8012a84:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8012a88:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f006 fb81 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012a92:	f003 ffe3 	bl	8016a5c <GUI_Unlock>
 8012a96:	4620      	mov	r0, r4
 8012a98:	b002      	add	sp, #8
 8012a9a:	bd10      	pop	{r4, pc}
 8012a9c:	4b04      	ldr	r3, [pc, #16]	; (8012ab0 <GUI_MEMDEV_GetYSize+0x40>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8012aa2:	2c00      	cmp	r4, #0
 8012aa4:	d1ea      	bne.n	8012a7c <GUI_MEMDEV_GetYSize+0xc>
 8012aa6:	f003 ffd9 	bl	8016a5c <GUI_Unlock>
 8012aaa:	4620      	mov	r0, r4
 8012aac:	b002      	add	sp, #8
 8012aae:	bd10      	pop	{r4, pc}
 8012ab0:	2000026c 	.word	0x2000026c

08012ab4 <GUI_MEMDEV_GetDataPtr>:
 8012ab4:	b510      	push	{r4, lr}
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	b082      	sub	sp, #8
 8012aba:	b180      	cbz	r0, 8012ade <GUI_MEMDEV_GetDataPtr+0x2a>
 8012abc:	f003 ffd8 	bl	8016a70 <GUI_Lock>
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f006 fb55 	bl	8019170 <GUI_ALLOC_LockH>
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	a802      	add	r0, sp, #8
 8012aca:	f840 4d04 	str.w	r4, [r0, #-4]!
 8012ace:	f006 fb61 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012ad2:	f003 ffc3 	bl	8016a5c <GUI_Unlock>
 8012ad6:	f104 0018 	add.w	r0, r4, #24
 8012ada:	b002      	add	sp, #8
 8012adc:	bd10      	pop	{r4, pc}
 8012ade:	b002      	add	sp, #8
 8012ae0:	bd10      	pop	{r4, pc}
 8012ae2:	bf00      	nop

08012ae4 <GUI_MEMDEV_Draw>:
 8012ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae8:	b087      	sub	sp, #28
 8012aea:	4604      	mov	r4, r0
 8012aec:	4692      	mov	sl, r2
 8012aee:	461d      	mov	r5, r3
 8012af0:	4689      	mov	r9, r1
 8012af2:	f003 ffbd 	bl	8016a70 <GUI_Lock>
 8012af6:	4a58      	ldr	r2, [pc, #352]	; (8012c58 <GUI_MEMDEV_Draw+0x174>)
 8012af8:	6813      	ldr	r3, [r2, #0]
 8012afa:	4a58      	ldr	r2, [pc, #352]	; (8012c5c <GUI_MEMDEV_Draw+0x178>)
 8012afc:	7c5e      	ldrb	r6, [r3, #17]
 8012afe:	5793      	ldrsb	r3, [r2, r6]
 8012b00:	2b01      	cmp	r3, #1
 8012b02:	4630      	mov	r0, r6
 8012b04:	f340 809c 	ble.w	8012c40 <GUI_MEMDEV_Draw+0x15c>
 8012b08:	f002 f91e 	bl	8014d48 <LCD_GetXSizeEx>
 8012b0c:	4680      	mov	r8, r0
 8012b0e:	4630      	mov	r0, r6
 8012b10:	f002 f928 	bl	8014d64 <LCD_GetYSizeEx>
 8012b14:	4607      	mov	r7, r0
 8012b16:	2c00      	cmp	r4, #0
 8012b18:	f000 808f 	beq.w	8012c3a <GUI_MEMDEV_Draw+0x156>
 8012b1c:	a804      	add	r0, sp, #16
 8012b1e:	a905      	add	r1, sp, #20
 8012b20:	f005 f962 	bl	8017de8 <GUI_GetOrg>
 8012b24:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012b28:	9a04      	ldr	r2, [sp, #16]
 8012b2a:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8012b2e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012b32:	9b05      	ldr	r3, [sp, #20]
 8012b34:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012b38:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 8012b3c:	4490      	add	r8, r2
 8012b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012b42:	4674      	mov	r4, lr
 8012b44:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8012b48:	4580      	cmp	r8, r0
 8012b4a:	bfd4      	ite	le
 8012b4c:	ebc4 0408 	rsble	r4, r4, r8
 8012b50:	ebc4 0400 	rsbgt	r4, r4, r0
 8012b54:	441f      	add	r7, r3
 8012b56:	3f01      	subs	r7, #1
 8012b58:	46a0      	mov	r8, r4
 8012b5a:	4634      	mov	r4, r6
 8012b5c:	428f      	cmp	r7, r1
 8012b5e:	bfd4      	ite	le
 8012b60:	ebc4 0407 	rsble	r4, r4, r7
 8012b64:	ebc4 0401 	rsbgt	r4, r4, r1
 8012b68:	f8cd e00c 	str.w	lr, [sp, #12]
 8012b6c:	9602      	str	r6, [sp, #8]
 8012b6e:	f108 0801 	add.w	r8, r8, #1
 8012b72:	1c67      	adds	r7, r4, #1
 8012b74:	b905      	cbnz	r5, 8012b78 <GUI_MEMDEV_Draw+0x94>
 8012b76:	427d      	negs	r5, r7
 8012b78:	f1b8 0f00 	cmp.w	r8, #0
 8012b7c:	dd4f      	ble.n	8012c1e <GUI_MEMDEV_Draw+0x13a>
 8012b7e:	2f00      	cmp	r7, #0
 8012b80:	dd4d      	ble.n	8012c1e <GUI_MEMDEV_Draw+0x13a>
 8012b82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b84:	9200      	str	r2, [sp, #0]
 8012b86:	462b      	mov	r3, r5
 8012b88:	4642      	mov	r2, r8
 8012b8a:	9803      	ldr	r0, [sp, #12]
 8012b8c:	9902      	ldr	r1, [sp, #8]
 8012b8e:	f000 fff1 	bl	8013b74 <GUI_MEMDEV_CreateEx>
 8012b92:	4680      	mov	r8, r0
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d048      	beq.n	8012c2a <GUI_MEMDEV_Draw+0x146>
 8012b98:	f7ff ff6a 	bl	8012a70 <GUI_MEMDEV_GetYSize>
 8012b9c:	42b8      	cmp	r0, r7
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	d004      	beq.n	8012bac <GUI_MEMDEV_Draw+0xc8>
 8012ba2:	4c2d      	ldr	r4, [pc, #180]	; (8012c58 <GUI_MEMDEV_Draw+0x174>)
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d151      	bne.n	8012c50 <GUI_MEMDEV_Draw+0x16c>
 8012bac:	4640      	mov	r0, r8
 8012bae:	f001 f825 	bl	8013bfc <GUI_MEMDEV_Select>
 8012bb2:	f1c6 0b00 	rsb	fp, r6, #0
 8012bb6:	463d      	mov	r5, r7
 8012bb8:	2400      	movs	r4, #0
 8012bba:	e00e      	b.n	8012bda <GUI_MEMDEV_Draw+0xf6>
 8012bbc:	445d      	add	r5, fp
 8012bbe:	b9ac      	cbnz	r4, 8012bec <GUI_MEMDEV_Draw+0x108>
 8012bc0:	4650      	mov	r0, sl
 8012bc2:	47c8      	blx	r9
 8012bc4:	4a26      	ldr	r2, [pc, #152]	; (8012c60 <GUI_MEMDEV_Draw+0x17c>)
 8012bc6:	6813      	ldr	r3, [r2, #0]
 8012bc8:	4434      	add	r4, r6
 8012bca:	20ff      	movs	r0, #255	; 0xff
 8012bcc:	b103      	cbz	r3, 8012bd0 <GUI_MEMDEV_Draw+0xec>
 8012bce:	4798      	blx	r3
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f001 f8bd 	bl	8013d50 <GUI_MEMDEV_CopyToLCD>
 8012bd6:	42a7      	cmp	r7, r4
 8012bd8:	dd12      	ble.n	8012c00 <GUI_MEMDEV_Draw+0x11c>
 8012bda:	42ae      	cmp	r6, r5
 8012bdc:	ddee      	ble.n	8012bbc <GUI_MEMDEV_Draw+0xd8>
 8012bde:	4629      	mov	r1, r5
 8012be0:	4640      	mov	r0, r8
 8012be2:	f009 fb03 	bl	801c1ec <GUI_MEMDEV_ReduceYSize>
 8012be6:	445d      	add	r5, fp
 8012be8:	2c00      	cmp	r4, #0
 8012bea:	d0e9      	beq.n	8012bc0 <GUI_MEMDEV_Draw+0xdc>
 8012bec:	9a02      	ldr	r2, [sp, #8]
 8012bee:	9903      	ldr	r1, [sp, #12]
 8012bf0:	4640      	mov	r0, r8
 8012bf2:	4422      	add	r2, r4
 8012bf4:	f7ff ff02 	bl	80129fc <GUI_MEMDEV_SetOrg>
 8012bf8:	4640      	mov	r0, r8
 8012bfa:	f009 fb17 	bl	801c22c <GUI_MEMDEV_Clear>
 8012bfe:	e7df      	b.n	8012bc0 <GUI_MEMDEV_Draw+0xdc>
 8012c00:	4640      	mov	r0, r8
 8012c02:	f000 ff8d 	bl	8013b20 <GUI_MEMDEV_Delete>
 8012c06:	2000      	movs	r0, #0
 8012c08:	f000 fff8 	bl	8013bfc <GUI_MEMDEV_Select>
 8012c0c:	42be      	cmp	r6, r7
 8012c0e:	d006      	beq.n	8012c1e <GUI_MEMDEV_Draw+0x13a>
 8012c10:	4c11      	ldr	r4, [pc, #68]	; (8012c58 <GUI_MEMDEV_Draw+0x174>)
 8012c12:	6823      	ldr	r3, [r4, #0]
 8012c14:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012c16:	b110      	cbz	r0, 8012c1e <GUI_MEMDEV_Draw+0x13a>
 8012c18:	2133      	movs	r1, #51	; 0x33
 8012c1a:	f7fb fd7d 	bl	800e718 <WM__SendMessageNoPara>
 8012c1e:	f003 ff1d 	bl	8016a5c <GUI_Unlock>
 8012c22:	2000      	movs	r0, #0
 8012c24:	b007      	add	sp, #28
 8012c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2a:	4650      	mov	r0, sl
 8012c2c:	47c8      	blx	r9
 8012c2e:	f003 ff15 	bl	8016a5c <GUI_Unlock>
 8012c32:	2001      	movs	r0, #1
 8012c34:	b007      	add	sp, #28
 8012c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3a:	9402      	str	r4, [sp, #8]
 8012c3c:	9403      	str	r4, [sp, #12]
 8012c3e:	e799      	b.n	8012b74 <GUI_MEMDEV_Draw+0x90>
 8012c40:	f002 f89e 	bl	8014d80 <LCD_GetVXSizeEx>
 8012c44:	4680      	mov	r8, r0
 8012c46:	4630      	mov	r0, r6
 8012c48:	f002 f8a8 	bl	8014d9c <LCD_GetVYSizeEx>
 8012c4c:	4607      	mov	r7, r0
 8012c4e:	e762      	b.n	8012b16 <GUI_MEMDEV_Draw+0x32>
 8012c50:	2132      	movs	r1, #50	; 0x32
 8012c52:	f7fb fd61 	bl	800e718 <WM__SendMessageNoPara>
 8012c56:	e7a9      	b.n	8012bac <GUI_MEMDEV_Draw+0xc8>
 8012c58:	2000026c 	.word	0x2000026c
 8012c5c:	2002bfec 	.word	0x2002bfec
 8012c60:	2002aecc 	.word	0x2002aecc

08012c64 <_GetDevData>:
 8012c64:	4802      	ldr	r0, [pc, #8]	; (8012c70 <_GetDevData+0xc>)
 8012c66:	2901      	cmp	r1, #1
 8012c68:	bf18      	it	ne
 8012c6a:	2000      	movne	r0, #0
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop
 8012c70:	0801e6f0 	.word	0x0801e6f0

08012c74 <_GetDevFunc>:
 8012c74:	4802      	ldr	r0, [pc, #8]	; (8012c80 <_GetDevFunc+0xc>)
 8012c76:	2916      	cmp	r1, #22
 8012c78:	bf18      	it	ne
 8012c7a:	2000      	movne	r0, #0
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop
 8012c80:	0801bdd9 	.word	0x0801bdd9

08012c84 <_GetDevProp>:
 8012c84:	2908      	cmp	r1, #8
 8012c86:	bf0c      	ite	eq
 8012c88:	2020      	moveq	r0, #32
 8012c8a:	2000      	movne	r0, #0
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop

08012c90 <_SetOrg>:
 8012c90:	b508      	push	{r3, lr}
 8012c92:	6800      	ldr	r0, [r0, #0]
 8012c94:	68c3      	ldr	r3, [r0, #12]
 8012c96:	6a1b      	ldr	r3, [r3, #32]
 8012c98:	4798      	blx	r3
 8012c9a:	bd08      	pop	{r3, pc}

08012c9c <_GetRect>:
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	6880      	ldr	r0, [r0, #8]
 8012ca2:	460c      	mov	r4, r1
 8012ca4:	f006 fa64 	bl	8019170 <GUI_ALLOC_LockH>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	a802      	add	r0, sp, #8
 8012cac:	8899      	ldrh	r1, [r3, #4]
 8012cae:	891d      	ldrh	r5, [r3, #8]
 8012cb0:	88da      	ldrh	r2, [r3, #6]
 8012cb2:	895e      	ldrh	r6, [r3, #10]
 8012cb4:	f840 3d04 	str.w	r3, [r0, #-4]!
 8012cb8:	440d      	add	r5, r1
 8012cba:	1993      	adds	r3, r2, r6
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	3d01      	subs	r5, #1
 8012cc0:	8021      	strh	r1, [r4, #0]
 8012cc2:	80a5      	strh	r5, [r4, #4]
 8012cc4:	8062      	strh	r2, [r4, #2]
 8012cc6:	80e3      	strh	r3, [r4, #6]
 8012cc8:	f006 fa64 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012ccc:	b002      	add	sp, #8
 8012cce:	bd70      	pop	{r4, r5, r6, pc}

08012cd0 <_DrawBitmap>:
 8012cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd4:	4ead      	ldr	r6, [pc, #692]	; (8012f8c <_DrawBitmap+0x2bc>)
 8012cd6:	6835      	ldr	r5, [r6, #0]
 8012cd8:	b099      	sub	sp, #100	; 0x64
 8012cda:	6e2d      	ldr	r5, [r5, #96]	; 0x60
 8012cdc:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8012cde:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
 8012ce2:	9307      	str	r3, [sp, #28]
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	460f      	mov	r7, r1
 8012ce8:	4690      	mov	r8, r2
 8012cea:	b915      	cbnz	r5, 8012cf2 <_DrawBitmap+0x22>
 8012cec:	b019      	add	sp, #100	; 0x64
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f006 fa3c 	bl	8019170 <GUI_ALLOC_LockH>
 8012cf8:	6943      	ldr	r3, [r0, #20]
 8012cfa:	9015      	str	r0, [sp, #84]	; 0x54
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f040 823b 	bne.w	8013178 <_DrawBitmap+0x4a8>
 8012d02:	4602      	mov	r2, r0
 8012d04:	68d2      	ldr	r2, [r2, #12]
 8012d06:	9316      	str	r3, [sp, #88]	; 0x58
 8012d08:	a815      	add	r0, sp, #84	; 0x54
 8012d0a:	920a      	str	r2, [sp, #40]	; 0x28
 8012d0c:	f006 fa42 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012d10:	9926      	ldr	r1, [sp, #152]	; 0x98
 8012d12:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012d14:	4439      	add	r1, r7
 8012d16:	910b      	str	r1, [sp, #44]	; 0x2c
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	f000 8233 	beq.w	8013184 <_DrawBitmap+0x4b4>
 8012d1e:	499b      	ldr	r1, [pc, #620]	; (8012f8c <_DrawBitmap+0x2bc>)
 8012d20:	680b      	ldr	r3, [r1, #0]
 8012d22:	7c1a      	ldrb	r2, [r3, #16]
 8012d24:	0792      	lsls	r2, r2, #30
 8012d26:	460d      	mov	r5, r1
 8012d28:	f140 8136 	bpl.w	8012f98 <_DrawBitmap+0x2c8>
 8012d2c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012d2e:	f006 fa1f 	bl	8019170 <GUI_ALLOC_LockH>
 8012d32:	4603      	mov	r3, r0
 8012d34:	a818      	add	r0, sp, #96	; 0x60
 8012d36:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8012d3a:	68dd      	ldr	r5, [r3, #12]
 8012d3c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8012d40:	ebc1 0108 	rsb	r1, r1, r8
 8012d44:	f103 0218 	add.w	r2, r3, #24
 8012d48:	fb05 2201 	mla	r2, r5, r1, r2
 8012d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d52:	1acb      	subs	r3, r1, r3
 8012d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d58:	9304      	str	r3, [sp, #16]
 8012d5a:	f006 fa1b 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012d5e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012d60:	2a17      	cmp	r2, #23
 8012d62:	dd4f      	ble.n	8012e04 <_DrawBitmap+0x134>
 8012d64:	2c00      	cmp	r4, #0
 8012d66:	dd43      	ble.n	8012df0 <_DrawBitmap+0x120>
 8012d68:	4444      	add	r4, r8
 8012d6a:	9406      	str	r4, [sp, #24]
 8012d6c:	9c07      	ldr	r4, [sp, #28]
 8012d6e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8012f94 <_DrawBitmap+0x2c4>
 8012d72:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012d74:	9609      	str	r6, [sp, #36]	; 0x24
 8012d76:	00a4      	lsls	r4, r4, #2
 8012d78:	940d      	str	r4, [sp, #52]	; 0x34
 8012d7a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012d7c:	b128      	cbz	r0, 8012d8a <_DrawBitmap+0xba>
 8012d7e:	6883      	ldr	r3, [r0, #8]
 8012d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d82:	685c      	ldr	r4, [r3, #4]
 8012d84:	9b07      	ldr	r3, [sp, #28]
 8012d86:	4642      	mov	r2, r8
 8012d88:	47a0      	blx	r4
 8012d8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012d8c:	6933      	ldr	r3, [r6, #16]
 8012d8e:	68da      	ldr	r2, [r3, #12]
 8012d90:	2a00      	cmp	r2, #0
 8012d92:	f040 8123 	bne.w	8012fdc <_DrawBitmap+0x30c>
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012d9c:	4798      	blx	r3
 8012d9e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8012da2:	9d07      	ldr	r5, [sp, #28]
 8012da4:	9705      	str	r7, [sp, #20]
 8012da6:	0e04      	lsrs	r4, r0, #24
 8012da8:	46ba      	mov	sl, r7
 8012daa:	4653      	mov	r3, sl
 8012dac:	2600      	movs	r6, #0
 8012dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8012db2:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 8012db6:	f000 80f7 	beq.w	8012fa8 <_DrawBitmap+0x2d8>
 8012dba:	2e00      	cmp	r6, #0
 8012dbc:	f040 80f8 	bne.w	8012fb0 <_DrawBitmap+0x2e0>
 8012dc0:	f8da 0000 	ldr.w	r0, [sl]
 8012dc4:	0e02      	lsrs	r2, r0, #24
 8012dc6:	f040 8101 	bne.w	8012fcc <_DrawBitmap+0x2fc>
 8012dca:	3d01      	subs	r5, #1
 8012dcc:	f10b 0b04 	add.w	fp, fp, #4
 8012dd0:	f10a 0a04 	add.w	sl, sl, #4
 8012dd4:	2d00      	cmp	r5, #0
 8012dd6:	d1e8      	bne.n	8012daa <_DrawBitmap+0xda>
 8012dd8:	9f05      	ldr	r7, [sp, #20]
 8012dda:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8012ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012dde:	4427      	add	r7, r4
 8012de0:	9c04      	ldr	r4, [sp, #16]
 8012de2:	4434      	add	r4, r6
 8012de4:	9e06      	ldr	r6, [sp, #24]
 8012de6:	9404      	str	r4, [sp, #16]
 8012de8:	f108 0801 	add.w	r8, r8, #1
 8012dec:	45b0      	cmp	r8, r6
 8012dee:	d1c4      	bne.n	8012d7a <_DrawBitmap+0xaa>
 8012df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f43f af7a 	beq.w	8012cec <_DrawBitmap+0x1c>
 8012df8:	a816      	add	r0, sp, #88	; 0x58
 8012dfa:	f006 f9cb 	bl	8019194 <GUI_ALLOC_UnlockH>
 8012dfe:	b019      	add	sp, #100	; 0x64
 8012e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e04:	2a10      	cmp	r2, #16
 8012e06:	f000 8292 	beq.w	801332e <_DrawBitmap+0x65e>
 8012e0a:	2a08      	cmp	r2, #8
 8012e0c:	f000 834a 	beq.w	80134a4 <_DrawBitmap+0x7d4>
 8012e10:	4b5f      	ldr	r3, [pc, #380]	; (8012f90 <_DrawBitmap+0x2c0>)
 8012e12:	f1ba 0f00 	cmp.w	sl, #0
 8012e16:	bf08      	it	eq
 8012e18:	469a      	moveq	sl, r3
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	dde8      	ble.n	8012df0 <_DrawBitmap+0x120>
 8012e1e:	4444      	add	r4, r8
 8012e20:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8012e22:	9410      	str	r4, [sp, #64]	; 0x40
 8012e24:	9c04      	ldr	r4, [sp, #16]
 8012e26:	f1c6 0304 	rsb	r3, r6, #4
 8012e2a:	3404      	adds	r4, #4
 8012e2c:	0076      	lsls	r6, r6, #1
 8012e2e:	9404      	str	r4, [sp, #16]
 8012e30:	9611      	str	r6, [sp, #68]	; 0x44
 8012e32:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8012e34:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	00a4      	lsls	r4, r4, #2
 8012e3a:	3601      	adds	r6, #1
 8012e3c:	46c3      	mov	fp, r8
 8012e3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012e40:	9412      	str	r4, [sp, #72]	; 0x48
 8012e42:	960d      	str	r6, [sp, #52]	; 0x34
 8012e44:	e015      	b.n	8012e72 <_DrawBitmap+0x1a2>
 8012e46:	2c04      	cmp	r4, #4
 8012e48:	f000 810c 	beq.w	8013064 <_DrawBitmap+0x394>
 8012e4c:	2c01      	cmp	r4, #1
 8012e4e:	f000 80cc 	beq.w	8012fea <_DrawBitmap+0x31a>
 8012e52:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012e54:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8012e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e58:	4434      	add	r4, r6
 8012e5a:	4433      	add	r3, r6
 8012e5c:	9425      	str	r4, [sp, #148]	; 0x94
 8012e5e:	9e04      	ldr	r6, [sp, #16]
 8012e60:	930d      	str	r3, [sp, #52]	; 0x34
 8012e62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e66:	f10b 0b01 	add.w	fp, fp, #1
 8012e6a:	4426      	add	r6, r4
 8012e6c:	459b      	cmp	fp, r3
 8012e6e:	9604      	str	r6, [sp, #16]
 8012e70:	d0be      	beq.n	8012df0 <_DrawBitmap+0x120>
 8012e72:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8012e74:	9b04      	ldr	r3, [sp, #16]
 8012e76:	2c02      	cmp	r4, #2
 8012e78:	f1a3 0504 	sub.w	r5, r3, #4
 8012e7c:	d1e3      	bne.n	8012e46 <_DrawBitmap+0x176>
 8012e7e:	4c43      	ldr	r4, [pc, #268]	; (8012f8c <_DrawBitmap+0x2bc>)
 8012e80:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 8012e88:	7c1a      	ldrb	r2, [r3, #16]
 8012e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012e90:	f002 0203 	and.w	r2, r2, #3
 8012e94:	409c      	lsls	r4, r3
 8012e96:	2a01      	cmp	r2, #1
 8012e98:	b2e4      	uxtb	r4, r4
 8012e9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e9c:	f000 821f 	beq.w	80132de <_DrawBitmap+0x60e>
 8012ea0:	f0c0 81fe 	bcc.w	80132a0 <_DrawBitmap+0x5d0>
 8012ea4:	2a02      	cmp	r2, #2
 8012ea6:	d1d4      	bne.n	8012e52 <_DrawBitmap+0x182>
 8012ea8:	9a07      	ldr	r2, [sp, #28]
 8012eaa:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8012eac:	960f      	str	r6, [sp, #60]	; 0x3c
 8012eae:	46d1      	mov	r9, sl
 8012eb0:	4692      	mov	sl, r2
 8012eb2:	4553      	cmp	r3, sl
 8012eb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012eb6:	950c      	str	r5, [sp, #48]	; 0x30
 8012eb8:	bfc8      	it	gt
 8012eba:	fa5f f38a 	uxtbgt.w	r3, sl
 8012ebe:	4645      	mov	r5, r8
 8012ec0:	9608      	str	r6, [sp, #32]
 8012ec2:	ebc3 0a0a 	rsb	sl, r3, sl
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	d03e      	beq.n	8012f48 <_DrawBitmap+0x278>
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ed0:	9e08      	ldr	r6, [sp, #32]
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	4498      	add	r8, r3
 8012ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8012ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012eda:	f108 0801 	add.w	r8, r8, #1
 8012ede:	1d1f      	adds	r7, r3, #4
 8012ee0:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8012ee4:	4631      	mov	r1, r6
 8012ee6:	ea4f 1394 	mov.w	r3, r4, lsr #6
 8012eea:	f106 0601 	add.w	r6, r6, #1
 8012eee:	4628      	mov	r0, r5
 8012ef0:	465a      	mov	r2, fp
 8012ef2:	d008      	beq.n	8012f06 <_DrawBitmap+0x236>
 8012ef4:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8012ef8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012efc:	f847 3c04 	str.w	r3, [r7, #-4]
 8012f00:	f8de 3000 	ldr.w	r3, [lr]
 8012f04:	4798      	blx	r3
 8012f06:	00a4      	lsls	r4, r4, #2
 8012f08:	4546      	cmp	r6, r8
 8012f0a:	b2e4      	uxtb	r4, r4
 8012f0c:	f107 0704 	add.w	r7, r7, #4
 8012f10:	d1e6      	bne.n	8012ee0 <_DrawBitmap+0x210>
 8012f12:	9c08      	ldr	r4, [sp, #32]
 8012f14:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012f16:	1c62      	adds	r2, r4, #1
 8012f18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012f1a:	1c73      	adds	r3, r6, #1
 8012f1c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012f20:	4416      	add	r6, r2
 8012f22:	9608      	str	r6, [sp, #32]
 8012f24:	940c      	str	r4, [sp, #48]	; 0x30
 8012f26:	f1ba 0f00 	cmp.w	sl, #0
 8012f2a:	f000 81fe 	beq.w	801332a <_DrawBitmap+0x65a>
 8012f2e:	2304      	movs	r3, #4
 8012f30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012f32:	4553      	cmp	r3, sl
 8012f34:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8012f38:	960f      	str	r6, [sp, #60]	; 0x3c
 8012f3a:	bfc8      	it	gt
 8012f3c:	fa5f f38a 	uxtbgt.w	r3, sl
 8012f40:	ebc3 0a0a 	rsb	sl, r3, sl
 8012f44:	2d00      	cmp	r5, #0
 8012f46:	d1c0      	bne.n	8012eca <_DrawBitmap+0x1fa>
 8012f48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	1d30      	adds	r0, r6, #4
 8012f4e:	09a6      	lsrs	r6, r4, #6
 8012f50:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8012f54:	ea4f 0184 	mov.w	r1, r4, lsl #2
 8012f58:	f102 32ff 	add.w	r2, r2, #4294967295
 8012f5c:	b2cc      	uxtb	r4, r1
 8012f5e:	bf1c      	itt	ne
 8012f60:	f859 1026 	ldrne.w	r1, [r9, r6, lsl #2]
 8012f64:	f840 1c04 	strne.w	r1, [r0, #-4]
 8012f68:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8012f6c:	f100 0004 	add.w	r0, r0, #4
 8012f70:	d1ed      	bne.n	8012f4e <_DrawBitmap+0x27e>
 8012f72:	9e08      	ldr	r6, [sp, #32]
 8012f74:	3b01      	subs	r3, #1
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	1c71      	adds	r1, r6, #1
 8012f7a:	1c5a      	adds	r2, r3, #1
 8012f7c:	18cb      	adds	r3, r1, r3
 8012f7e:	9308      	str	r3, [sp, #32]
 8012f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012f86:	930c      	str	r3, [sp, #48]	; 0x30
 8012f88:	e7cd      	b.n	8012f26 <_DrawBitmap+0x256>
 8012f8a:	bf00      	nop
 8012f8c:	2000026c 	.word	0x2000026c
 8012f90:	0801e6b0 	.word	0x0801e6b0
 8012f94:	20000244 	.word	0x20000244
 8012f98:	9b07      	ldr	r3, [sp, #28]
 8012f9a:	9400      	str	r4, [sp, #0]
 8012f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f9e:	4642      	mov	r2, r8
 8012fa0:	f009 f910 	bl	801c1c4 <GUI_USAGE_AddRect>
 8012fa4:	682b      	ldr	r3, [r5, #0]
 8012fa6:	e6c1      	b.n	8012d2c <_DrawBitmap+0x5c>
 8012fa8:	3601      	adds	r6, #1
 8012faa:	42ae      	cmp	r6, r5
 8012fac:	f47f aeff 	bne.w	8012dae <_DrawBitmap+0xde>
 8012fb0:	00b7      	lsls	r7, r6, #2
 8012fb2:	4658      	mov	r0, fp
 8012fb4:	4651      	mov	r1, sl
 8012fb6:	463a      	mov	r2, r7
 8012fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8012fbc:	1bad      	subs	r5, r5, r6
 8012fbe:	44bb      	add	fp, r7
 8012fc0:	4798      	blx	r3
 8012fc2:	44ba      	add	sl, r7
 8012fc4:	2d00      	cmp	r5, #0
 8012fc6:	f47f aef0 	bne.w	8012daa <_DrawBitmap+0xda>
 8012fca:	e705      	b.n	8012dd8 <_DrawBitmap+0x108>
 8012fcc:	49a9      	ldr	r1, [pc, #676]	; (8013274 <_DrawBitmap+0x5a4>)
 8012fce:	680b      	ldr	r3, [r1, #0]
 8012fd0:	f8db 1000 	ldr.w	r1, [fp]
 8012fd4:	4798      	blx	r3
 8012fd6:	f8cb 0000 	str.w	r0, [fp]
 8012fda:	e6f6      	b.n	8012dca <_DrawBitmap+0xfa>
 8012fdc:	f8d9 3000 	ldr.w	r3, [r9]
 8012fe0:	9804      	ldr	r0, [sp, #16]
 8012fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	4798      	blx	r3
 8012fe8:	e6f7      	b.n	8012dda <_DrawBitmap+0x10a>
 8012fea:	4ea3      	ldr	r6, [pc, #652]	; (8013278 <_DrawBitmap+0x5a8>)
 8012fec:	6833      	ldr	r3, [r6, #0]
 8012fee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012ff0:	f006 f8be 	bl	8019170 <GUI_ALLOC_LockH>
 8012ff4:	6833      	ldr	r3, [r6, #0]
 8012ff6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012ff8:	7c1a      	ldrb	r2, [r3, #16]
 8012ffa:	4ea0      	ldr	r6, [pc, #640]	; (801327c <_DrawBitmap+0x5ac>)
 8012ffc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8013000:	9015      	str	r0, [sp, #84]	; 0x54
 8013002:	5c74      	ldrb	r4, [r6, r1]
 8013004:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8013006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013008:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801300c:	f002 0203 	and.w	r2, r2, #3
 8013010:	2a02      	cmp	r2, #2
 8013012:	fa44 f406 	asr.w	r4, r4, r6
 8013016:	f1c6 0608 	rsb	r6, r6, #8
 801301a:	f000 80dc 	beq.w	80131d6 <_DrawBitmap+0x506>
 801301e:	2a03      	cmp	r2, #3
 8013020:	f000 80b3 	beq.w	801318a <_DrawBitmap+0x4ba>
 8013024:	2a01      	cmp	r2, #1
 8013026:	f000 80b0 	beq.w	801318a <_DrawBitmap+0x4ba>
 801302a:	9825      	ldr	r0, [sp, #148]	; 0x94
 801302c:	464f      	mov	r7, r9
 801302e:	42b7      	cmp	r7, r6
 8013030:	bf38      	it	cc
 8013032:	463e      	movcc	r6, r7
 8013034:	1bbf      	subs	r7, r7, r6
 8013036:	4633      	mov	r3, r6
 8013038:	462a      	mov	r2, r5
 801303a:	f004 0101 	and.w	r1, r4, #1
 801303e:	3b01      	subs	r3, #1
 8013040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013044:	f842 1b04 	str.w	r1, [r2], #4
 8013048:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801304c:	d1f5      	bne.n	801303a <_DrawBitmap+0x36a>
 801304e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8013052:	2f00      	cmp	r7, #0
 8013054:	f000 808c 	beq.w	8013170 <_DrawBitmap+0x4a0>
 8013058:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801305c:	4987      	ldr	r1, [pc, #540]	; (801327c <_DrawBitmap+0x5ac>)
 801305e:	2608      	movs	r6, #8
 8013060:	5ccc      	ldrb	r4, [r1, r3]
 8013062:	e7e4      	b.n	801302e <_DrawBitmap+0x35e>
 8013064:	4984      	ldr	r1, [pc, #528]	; (8013278 <_DrawBitmap+0x5a8>)
 8013066:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013068:	680a      	ldr	r2, [r1, #0]
 801306a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 801306e:	7c12      	ldrb	r2, [r2, #16]
 8013070:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013072:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8013074:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8013078:	f002 0203 	and.w	r2, r2, #3
 801307c:	40a3      	lsls	r3, r4
 801307e:	2a01      	cmp	r2, #1
 8013080:	b2dc      	uxtb	r4, r3
 8013082:	f000 81c4 	beq.w	801340e <_DrawBitmap+0x73e>
 8013086:	f0c0 8197 	bcc.w	80133b8 <_DrawBitmap+0x6e8>
 801308a:	2a02      	cmp	r2, #2
 801308c:	f47f aee1 	bne.w	8012e52 <_DrawBitmap+0x182>
 8013090:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013092:	2900      	cmp	r1, #0
 8013094:	f040 81ef 	bne.w	8013476 <_DrawBitmap+0x7a6>
 8013098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801309a:	9807      	ldr	r0, [sp, #28]
 801309c:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 80130a0:	9208      	str	r2, [sp, #32]
 80130a2:	2801      	cmp	r0, #1
 80130a4:	dd4f      	ble.n	8013146 <_DrawBitmap+0x476>
 80130a6:	2e00      	cmp	r6, #0
 80130a8:	f000 8298 	beq.w	80135dc <_DrawBitmap+0x90c>
 80130ac:	f1a0 0c02 	sub.w	ip, r0, #2
 80130b0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80130b4:	930c      	str	r3, [sp, #48]	; 0x30
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80130ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80130bc:	9b08      	ldr	r3, [sp, #32]
 80130be:	9f08      	ldr	r7, [sp, #32]
 80130c0:	440b      	add	r3, r1
 80130c2:	3302      	adds	r3, #2
 80130c4:	930e      	str	r3, [sp, #56]	; 0x38
 80130c6:	4663      	mov	r3, ip
 80130c8:	f105 0808 	add.w	r8, r5, #8
 80130cc:	46a4      	mov	ip, r4
 80130ce:	9305      	str	r3, [sp, #20]
 80130d0:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
 80130d4:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80130d8:	4639      	mov	r1, r7
 80130da:	4630      	mov	r0, r6
 80130dc:	465a      	mov	r2, fp
 80130de:	d00c      	beq.n	80130fa <_DrawBitmap+0x42a>
 80130e0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80130e4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80130e8:	f848 3c08 	str.w	r3, [r8, #-8]
 80130ec:	f8de 3000 	ldr.w	r3, [lr]
 80130f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80130f4:	4798      	blx	r3
 80130f6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80130fa:	f01c 0c0f 	ands.w	ip, ip, #15
 80130fe:	f107 0101 	add.w	r1, r7, #1
 8013102:	4630      	mov	r0, r6
 8013104:	f107 0702 	add.w	r7, r7, #2
 8013108:	465a      	mov	r2, fp
 801310a:	d006      	beq.n	801311a <_DrawBitmap+0x44a>
 801310c:	68b3      	ldr	r3, [r6, #8]
 801310e:	f85a 402c 	ldr.w	r4, [sl, ip, lsl #2]
 8013112:	f848 4c04 	str.w	r4, [r8, #-4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4798      	blx	r3
 801311a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801311c:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8013120:	429f      	cmp	r7, r3
 8013122:	f108 0808 	add.w	r8, r8, #8
 8013126:	d1d3      	bne.n	80130d0 <_DrawBitmap+0x400>
 8013128:	9b05      	ldr	r3, [sp, #20]
 801312a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801312c:	4664      	mov	r4, ip
 801312e:	469c      	mov	ip, r3
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	1c9a      	adds	r2, r3, #2
 8013134:	1c4b      	adds	r3, r1, #1
 8013136:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013138:	4411      	add	r1, r2
 801313a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801313c:	9108      	str	r1, [sp, #32]
 801313e:	ebac 0042 	sub.w	r0, ip, r2, lsl #1
 8013142:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013146:	2800      	cmp	r0, #0
 8013148:	f43f ae83 	beq.w	8012e52 <_DrawBitmap+0x182>
 801314c:	0924      	lsrs	r4, r4, #4
 801314e:	f43f ae80 	beq.w	8012e52 <_DrawBitmap+0x182>
 8013152:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8013156:	602b      	str	r3, [r5, #0]
 8013158:	2e00      	cmp	r6, #0
 801315a:	f43f ae7a 	beq.w	8012e52 <_DrawBitmap+0x182>
 801315e:	68b3      	ldr	r3, [r6, #8]
 8013160:	9908      	ldr	r1, [sp, #32]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4630      	mov	r0, r6
 8013166:	465a      	mov	r2, fp
 8013168:	4798      	blx	r3
 801316a:	e672      	b.n	8012e52 <_DrawBitmap+0x182>
 801316c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8013170:	a815      	add	r0, sp, #84	; 0x54
 8013172:	f006 f80f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013176:	e66c      	b.n	8012e52 <_DrawBitmap+0x182>
 8013178:	4618      	mov	r0, r3
 801317a:	f005 fff9 	bl	8019170 <GUI_ALLOC_LockH>
 801317e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013180:	4603      	mov	r3, r0
 8013182:	e5bf      	b.n	8012d04 <_DrawBitmap+0x34>
 8013184:	4a3c      	ldr	r2, [pc, #240]	; (8013278 <_DrawBitmap+0x5a8>)
 8013186:	6813      	ldr	r3, [r2, #0]
 8013188:	e5d0      	b.n	8012d2c <_DrawBitmap+0x5c>
 801318a:	6803      	ldr	r3, [r0, #0]
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	689b      	ldr	r3, [r3, #8]
 8013190:	4798      	blx	r3
 8013192:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013194:	46ae      	mov	lr, r5
 8013196:	464d      	mov	r5, r9
 8013198:	42b5      	cmp	r5, r6
 801319a:	bf38      	it	cc
 801319c:	462e      	movcc	r6, r5
 801319e:	1bad      	subs	r5, r5, r6
 80131a0:	4632      	mov	r2, r6
 80131a2:	f10e 0304 	add.w	r3, lr, #4
 80131a6:	f014 0f01 	tst.w	r4, #1
 80131aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80131ae:	d004      	beq.n	80131ba <_DrawBitmap+0x4ea>
 80131b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80131b4:	4041      	eors	r1, r0
 80131b6:	f843 1c04 	str.w	r1, [r3, #-4]
 80131ba:	3a01      	subs	r2, #1
 80131bc:	f103 0304 	add.w	r3, r3, #4
 80131c0:	d1f1      	bne.n	80131a6 <_DrawBitmap+0x4d6>
 80131c2:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80131c6:	2d00      	cmp	r5, #0
 80131c8:	d0d2      	beq.n	8013170 <_DrawBitmap+0x4a0>
 80131ca:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80131ce:	4a2b      	ldr	r2, [pc, #172]	; (801327c <_DrawBitmap+0x5ac>)
 80131d0:	2608      	movs	r6, #8
 80131d2:	5cd4      	ldrb	r4, [r2, r3]
 80131d4:	e7e0      	b.n	8013198 <_DrawBitmap+0x4c8>
 80131d6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80131da:	9925      	ldr	r1, [sp, #148]	; 0x94
 80131dc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80131e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80131e4:	9208      	str	r2, [sp, #32]
 80131e6:	910c      	str	r1, [sp, #48]	; 0x30
 80131e8:	469a      	mov	sl, r3
 80131ea:	45b1      	cmp	r9, r6
 80131ec:	bf38      	it	cc
 80131ee:	464e      	movcc	r6, r9
 80131f0:	ebc6 0909 	rsb	r9, r6, r9
 80131f4:	f1ba 0f00 	cmp.w	sl, #0
 80131f8:	d037      	beq.n	801326a <_DrawBitmap+0x59a>
 80131fa:	2c00      	cmp	r4, #0
 80131fc:	d031      	beq.n	8013262 <_DrawBitmap+0x592>
 80131fe:	464b      	mov	r3, r9
 8013200:	1d2f      	adds	r7, r5, #4
 8013202:	46d1      	mov	r9, sl
 8013204:	469a      	mov	sl, r3
 8013206:	e007      	b.n	8013218 <_DrawBitmap+0x548>
 8013208:	3e01      	subs	r6, #1
 801320a:	f108 0801 	add.w	r8, r8, #1
 801320e:	f107 0704 	add.w	r7, r7, #4
 8013212:	d015      	beq.n	8013240 <_DrawBitmap+0x570>
 8013214:	0864      	lsrs	r4, r4, #1
 8013216:	d021      	beq.n	801325c <_DrawBitmap+0x58c>
 8013218:	f014 0f01 	tst.w	r4, #1
 801321c:	463d      	mov	r5, r7
 801321e:	d0f3      	beq.n	8013208 <_DrawBitmap+0x538>
 8013220:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013224:	4641      	mov	r1, r8
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4648      	mov	r0, r9
 801322a:	465a      	mov	r2, fp
 801322c:	4798      	blx	r3
 801322e:	9b08      	ldr	r3, [sp, #32]
 8013230:	f847 3c04 	str.w	r3, [r7, #-4]
 8013234:	3e01      	subs	r6, #1
 8013236:	f108 0801 	add.w	r8, r8, #1
 801323a:	f107 0704 	add.w	r7, r7, #4
 801323e:	d1e9      	bne.n	8013214 <_DrawBitmap+0x544>
 8013240:	4653      	mov	r3, sl
 8013242:	46ca      	mov	sl, r9
 8013244:	4699      	mov	r9, r3
 8013246:	f1b9 0f00 	cmp.w	r9, #0
 801324a:	d08f      	beq.n	801316c <_DrawBitmap+0x49c>
 801324c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801324e:	490b      	ldr	r1, [pc, #44]	; (801327c <_DrawBitmap+0x5ac>)
 8013250:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8013254:	940c      	str	r4, [sp, #48]	; 0x30
 8013256:	2608      	movs	r6, #8
 8013258:	5c8c      	ldrb	r4, [r1, r2]
 801325a:	e7c6      	b.n	80131ea <_DrawBitmap+0x51a>
 801325c:	4653      	mov	r3, sl
 801325e:	46ca      	mov	sl, r9
 8013260:	4699      	mov	r9, r3
 8013262:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8013266:	44b0      	add	r8, r6
 8013268:	e7ed      	b.n	8013246 <_DrawBitmap+0x576>
 801326a:	b1b4      	cbz	r4, 801329a <_DrawBitmap+0x5ca>
 801326c:	1d2a      	adds	r2, r5, #4
 801326e:	9b08      	ldr	r3, [sp, #32]
 8013270:	e008      	b.n	8013284 <_DrawBitmap+0x5b4>
 8013272:	bf00      	nop
 8013274:	20000254 	.word	0x20000254
 8013278:	2000026c 	.word	0x2000026c
 801327c:	080214e8 	.word	0x080214e8
 8013280:	0864      	lsrs	r4, r4, #1
 8013282:	d00a      	beq.n	801329a <_DrawBitmap+0x5ca>
 8013284:	f014 0f01 	tst.w	r4, #1
 8013288:	bf18      	it	ne
 801328a:	f842 3c04 	strne.w	r3, [r2, #-4]
 801328e:	3e01      	subs	r6, #1
 8013290:	4615      	mov	r5, r2
 8013292:	f102 0204 	add.w	r2, r2, #4
 8013296:	d1f3      	bne.n	8013280 <_DrawBitmap+0x5b0>
 8013298:	e7d5      	b.n	8013246 <_DrawBitmap+0x576>
 801329a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801329e:	e7d2      	b.n	8013246 <_DrawBitmap+0x576>
 80132a0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80132a2:	9e07      	ldr	r6, [sp, #28]
 80132a4:	42b3      	cmp	r3, r6
 80132a6:	bfc8      	it	gt
 80132a8:	b2f3      	uxtbgt	r3, r6
 80132aa:	1af6      	subs	r6, r6, r3
 80132ac:	461a      	mov	r2, r3
 80132ae:	4629      	mov	r1, r5
 80132b0:	09a0      	lsrs	r0, r4, #6
 80132b2:	3a01      	subs	r2, #1
 80132b4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 80132b8:	f841 0b04 	str.w	r0, [r1], #4
 80132bc:	00a4      	lsls	r4, r4, #2
 80132be:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80132c2:	b2e4      	uxtb	r4, r4
 80132c4:	d1f4      	bne.n	80132b0 <_DrawBitmap+0x5e0>
 80132c6:	3b01      	subs	r3, #1
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	3301      	adds	r3, #1
 80132cc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80132d0:	2e00      	cmp	r6, #0
 80132d2:	f43f adbe 	beq.w	8012e52 <_DrawBitmap+0x182>
 80132d6:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 80132da:	2304      	movs	r3, #4
 80132dc:	e7e2      	b.n	80132a4 <_DrawBitmap+0x5d4>
 80132de:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80132e0:	9e07      	ldr	r6, [sp, #28]
 80132e2:	42b3      	cmp	r3, r6
 80132e4:	bfc8      	it	gt
 80132e6:	b2f3      	uxtbgt	r3, r6
 80132e8:	1af6      	subs	r6, r6, r3
 80132ea:	1d2a      	adds	r2, r5, #4
 80132ec:	4619      	mov	r1, r3
 80132ee:	00a0      	lsls	r0, r4, #2
 80132f0:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80132f4:	f101 31ff 	add.w	r1, r1, #4294967295
 80132f8:	b2c4      	uxtb	r4, r0
 80132fa:	d005      	beq.n	8013308 <_DrawBitmap+0x638>
 80132fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013300:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8013304:	f842 0c04 	str.w	r0, [r2, #-4]
 8013308:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801330c:	f102 0204 	add.w	r2, r2, #4
 8013310:	d1ed      	bne.n	80132ee <_DrawBitmap+0x61e>
 8013312:	3b01      	subs	r3, #1
 8013314:	b2db      	uxtb	r3, r3
 8013316:	3301      	adds	r3, #1
 8013318:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801331c:	2e00      	cmp	r6, #0
 801331e:	f43f ad98 	beq.w	8012e52 <_DrawBitmap+0x182>
 8013322:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8013326:	2304      	movs	r3, #4
 8013328:	e7db      	b.n	80132e2 <_DrawBitmap+0x612>
 801332a:	46ca      	mov	sl, r9
 801332c:	e591      	b.n	8012e52 <_DrawBitmap+0x182>
 801332e:	2c00      	cmp	r4, #0
 8013330:	f77f ad5e 	ble.w	8012df0 <_DrawBitmap+0x120>
 8013334:	4444      	add	r4, r8
 8013336:	9406      	str	r4, [sp, #24]
 8013338:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801333a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801333c:	46c1      	mov	r9, r8
 801333e:	f1a4 0a02 	sub.w	sl, r4, #2
 8013342:	2f00      	cmp	r7, #0
 8013344:	d02b      	beq.n	801339e <_DrawBitmap+0x6ce>
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801334a:	685c      	ldr	r4, [r3, #4]
 801334c:	9b07      	ldr	r3, [sp, #28]
 801334e:	4638      	mov	r0, r7
 8013350:	464a      	mov	r2, r9
 8013352:	47a0      	blx	r4
 8013354:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013358:	9d07      	ldr	r5, [sp, #28]
 801335a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801335c:	46d3      	mov	fp, sl
 801335e:	6933      	ldr	r3, [r6, #16]
 8013360:	f83b 0f02 	ldrh.w	r0, [fp, #2]!
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	4798      	blx	r3
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	f848 0b04 	str.w	r0, [r8], #4
 801336e:	4621      	mov	r1, r4
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4638      	mov	r0, r7
 8013374:	464a      	mov	r2, r9
 8013376:	4798      	blx	r3
 8013378:	3d01      	subs	r5, #1
 801337a:	f104 0401 	add.w	r4, r4, #1
 801337e:	d1ee      	bne.n	801335e <_DrawBitmap+0x68e>
 8013380:	9904      	ldr	r1, [sp, #16]
 8013382:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013384:	4421      	add	r1, r4
 8013386:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8013388:	9104      	str	r1, [sp, #16]
 801338a:	44a2      	add	sl, r4
 801338c:	9c06      	ldr	r4, [sp, #24]
 801338e:	f109 0901 	add.w	r9, r9, #1
 8013392:	45a1      	cmp	r9, r4
 8013394:	f43f ad2c 	beq.w	8012df0 <_DrawBitmap+0x120>
 8013398:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801339a:	2f00      	cmp	r7, #0
 801339c:	d1d3      	bne.n	8013346 <_DrawBitmap+0x676>
 801339e:	9d04      	ldr	r5, [sp, #16]
 80133a0:	9c07      	ldr	r4, [sp, #28]
 80133a2:	4657      	mov	r7, sl
 80133a4:	6933      	ldr	r3, [r6, #16]
 80133a6:	f837 0f02 	ldrh.w	r0, [r7, #2]!
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	4798      	blx	r3
 80133ae:	3c01      	subs	r4, #1
 80133b0:	f845 0b04 	str.w	r0, [r5], #4
 80133b4:	d1f6      	bne.n	80133a4 <_DrawBitmap+0x6d4>
 80133b6:	e7e3      	b.n	8013380 <_DrawBitmap+0x6b0>
 80133b8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80133ba:	2e00      	cmp	r6, #0
 80133bc:	d151      	bne.n	8013462 <_DrawBitmap+0x792>
 80133be:	9907      	ldr	r1, [sp, #28]
 80133c0:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 80133c4:	2901      	cmp	r1, #1
 80133c6:	dd1a      	ble.n	80133fe <_DrawBitmap+0x72e>
 80133c8:	104f      	asrs	r7, r1, #1
 80133ca:	464a      	mov	r2, r9
 80133cc:	eb09 0607 	add.w	r6, r9, r7
 80133d0:	f001 0101 	and.w	r1, r1, #1
 80133d4:	f105 0308 	add.w	r3, r5, #8
 80133d8:	0920      	lsrs	r0, r4, #4
 80133da:	f004 040f 	and.w	r4, r4, #15
 80133de:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 80133e2:	f843 0c08 	str.w	r0, [r3, #-8]
 80133e6:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80133ea:	f843 0c04 	str.w	r0, [r3, #-4]
 80133ee:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80133f2:	42b2      	cmp	r2, r6
 80133f4:	f103 0308 	add.w	r3, r3, #8
 80133f8:	d1ee      	bne.n	80133d8 <_DrawBitmap+0x708>
 80133fa:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 80133fe:	2900      	cmp	r1, #0
 8013400:	f43f ad27 	beq.w	8012e52 <_DrawBitmap+0x182>
 8013404:	0924      	lsrs	r4, r4, #4
 8013406:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801340a:	602b      	str	r3, [r5, #0]
 801340c:	e521      	b.n	8012e52 <_DrawBitmap+0x182>
 801340e:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8013410:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013412:	f1c6 0002 	rsb	r0, r6, #2
 8013416:	9e07      	ldr	r6, [sp, #28]
 8013418:	b2c0      	uxtb	r0, r0
 801341a:	42b0      	cmp	r0, r6
 801341c:	bfc8      	it	gt
 801341e:	b2f0      	uxtbgt	r0, r6
 8013420:	1a36      	subs	r6, r6, r0
 8013422:	1d2b      	adds	r3, r5, #4
 8013424:	4602      	mov	r2, r0
 8013426:	0121      	lsls	r1, r4, #4
 8013428:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801342c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013430:	b2cc      	uxtb	r4, r1
 8013432:	d005      	beq.n	8013440 <_DrawBitmap+0x770>
 8013434:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013438:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 801343c:	f843 1c04 	str.w	r1, [r3, #-4]
 8013440:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8013444:	f103 0304 	add.w	r3, r3, #4
 8013448:	d1ed      	bne.n	8013426 <_DrawBitmap+0x756>
 801344a:	1e43      	subs	r3, r0, #1
 801344c:	b2db      	uxtb	r3, r3
 801344e:	3301      	adds	r3, #1
 8013450:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8013454:	2e00      	cmp	r6, #0
 8013456:	f43f acfc 	beq.w	8012e52 <_DrawBitmap+0x182>
 801345a:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801345e:	2002      	movs	r0, #2
 8013460:	e7db      	b.n	801341a <_DrawBitmap+0x74a>
 8013462:	0924      	lsrs	r4, r4, #4
 8013464:	9e07      	ldr	r6, [sp, #28]
 8013466:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801346a:	602b      	str	r3, [r5, #0]
 801346c:	1e71      	subs	r1, r6, #1
 801346e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8013470:	9d04      	ldr	r5, [sp, #16]
 8013472:	7874      	ldrb	r4, [r6, #1]
 8013474:	e7a6      	b.n	80133c4 <_DrawBitmap+0x6f4>
 8013476:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801347a:	d00a      	beq.n	8013492 <_DrawBitmap+0x7c2>
 801347c:	0924      	lsrs	r4, r4, #4
 801347e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8013482:	602b      	str	r3, [r5, #0]
 8013484:	b12e      	cbz	r6, 8013492 <_DrawBitmap+0x7c2>
 8013486:	68b3      	ldr	r3, [r6, #8]
 8013488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4630      	mov	r0, r6
 801348e:	465a      	mov	r2, fp
 8013490:	4798      	blx	r3
 8013492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013494:	9c07      	ldr	r4, [sp, #28]
 8013496:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013498:	9d04      	ldr	r5, [sp, #16]
 801349a:	3301      	adds	r3, #1
 801349c:	1e60      	subs	r0, r4, #1
 801349e:	9308      	str	r3, [sp, #32]
 80134a0:	784c      	ldrb	r4, [r1, #1]
 80134a2:	e5fe      	b.n	80130a2 <_DrawBitmap+0x3d2>
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	f340 80cf 	ble.w	8013648 <_DrawBitmap+0x978>
 80134aa:	4444      	add	r4, r8
 80134ac:	9e07      	ldr	r6, [sp, #28]
 80134ae:	9406      	str	r4, [sp, #24]
 80134b0:	46c1      	mov	r9, r8
 80134b2:	9c04      	ldr	r4, [sp, #16]
 80134b4:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80134b8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80134ba:	f104 0c04 	add.w	ip, r4, #4
 80134be:	44b0      	add	r8, r6
 80134c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80134c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80134c4:	4639      	mov	r1, r7
 80134c6:	ebc6 0b04 	rsb	fp, r6, r4
 80134ca:	4656      	mov	r6, sl
 80134cc:	f1ac 0004 	sub.w	r0, ip, #4
 80134d0:	2e00      	cmp	r6, #0
 80134d2:	d042      	beq.n	801355a <_DrawBitmap+0x88a>
 80134d4:	4a5f      	ldr	r2, [pc, #380]	; (8013654 <_DrawBitmap+0x984>)
 80134d6:	6813      	ldr	r3, [r2, #0]
 80134d8:	7c1b      	ldrb	r3, [r3, #16]
 80134da:	f013 0303 	ands.w	r3, r3, #3
 80134de:	d032      	beq.n	8013546 <_DrawBitmap+0x876>
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	d11e      	bne.n	8013522 <_DrawBitmap+0x852>
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	d05f      	beq.n	80135a8 <_DrawBitmap+0x8d8>
 80134e8:	9d07      	ldr	r5, [sp, #28]
 80134ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80134ec:	f8cd c010 	str.w	ip, [sp, #16]
 80134f0:	46e2      	mov	sl, ip
 80134f2:	f81b 3004 	ldrb.w	r3, [fp, r4]
 80134f6:	4621      	mov	r1, r4
 80134f8:	4638      	mov	r0, r7
 80134fa:	464a      	mov	r2, r9
 80134fc:	3401      	adds	r4, #1
 80134fe:	b143      	cbz	r3, 8013512 <_DrawBitmap+0x842>
 8013500:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8013504:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013508:	f84a 3c04 	str.w	r3, [sl, #-4]
 801350c:	f8de 3000 	ldr.w	r3, [lr]
 8013510:	4798      	blx	r3
 8013512:	3d01      	subs	r5, #1
 8013514:	f10a 0a04 	add.w	sl, sl, #4
 8013518:	d1eb      	bne.n	80134f2 <_DrawBitmap+0x822>
 801351a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801351e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8013520:	4639      	mov	r1, r7
 8013522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013524:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8013526:	9b06      	ldr	r3, [sp, #24]
 8013528:	4414      	add	r4, r2
 801352a:	f109 0901 	add.w	r9, r9, #1
 801352e:	9425      	str	r4, [sp, #148]	; 0x94
 8013530:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013532:	4599      	cmp	r9, r3
 8013534:	4490      	add	r8, r2
 8013536:	44a4      	add	ip, r4
 8013538:	4493      	add	fp, r2
 801353a:	d1c7      	bne.n	80134cc <_DrawBitmap+0x7fc>
 801353c:	2900      	cmp	r1, #0
 801353e:	f47f ac5b 	bne.w	8012df8 <_DrawBitmap+0x128>
 8013542:	f7ff bbd3 	b.w	8012cec <_DrawBitmap+0x1c>
 8013546:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013548:	f813 2b01 	ldrb.w	r2, [r3], #1
 801354c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8013550:	f840 2b04 	str.w	r2, [r0], #4
 8013554:	4598      	cmp	r8, r3
 8013556:	d1f7      	bne.n	8013548 <_DrawBitmap+0x878>
 8013558:	e7e3      	b.n	8013522 <_DrawBitmap+0x852>
 801355a:	4c3e      	ldr	r4, [pc, #248]	; (8013654 <_DrawBitmap+0x984>)
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	7c1b      	ldrb	r3, [r3, #16]
 8013560:	f013 0303 	ands.w	r3, r3, #3
 8013564:	d02e      	beq.n	80135c4 <_DrawBitmap+0x8f4>
 8013566:	2b02      	cmp	r3, #2
 8013568:	d1db      	bne.n	8013522 <_DrawBitmap+0x852>
 801356a:	2f00      	cmp	r7, #0
 801356c:	d060      	beq.n	8013630 <_DrawBitmap+0x960>
 801356e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013572:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013574:	9604      	str	r6, [sp, #16]
 8013576:	4665      	mov	r5, ip
 8013578:	4666      	mov	r6, ip
 801357a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801357e:	4621      	mov	r1, r4
 8013580:	4638      	mov	r0, r7
 8013582:	464a      	mov	r2, r9
 8013584:	3401      	adds	r4, #1
 8013586:	b133      	cbz	r3, 8013596 <_DrawBitmap+0x8c6>
 8013588:	f8d7 e008 	ldr.w	lr, [r7, #8]
 801358c:	f845 3c04 	str.w	r3, [r5, #-4]
 8013590:	f8de 3000 	ldr.w	r3, [lr]
 8013594:	4798      	blx	r3
 8013596:	f1ba 0a01 	subs.w	sl, sl, #1
 801359a:	f105 0504 	add.w	r5, r5, #4
 801359e:	d1ec      	bne.n	801357a <_DrawBitmap+0x8aa>
 80135a0:	46b4      	mov	ip, r6
 80135a2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80135a4:	9e04      	ldr	r6, [sp, #16]
 80135a6:	e7bb      	b.n	8013520 <_DrawBitmap+0x850>
 80135a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135aa:	4661      	mov	r1, ip
 80135ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135b0:	b11a      	cbz	r2, 80135ba <_DrawBitmap+0x8ea>
 80135b2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80135b6:	f841 2c04 	str.w	r2, [r1, #-4]
 80135ba:	4598      	cmp	r8, r3
 80135bc:	f101 0104 	add.w	r1, r1, #4
 80135c0:	d1f4      	bne.n	80135ac <_DrawBitmap+0x8dc>
 80135c2:	e7ad      	b.n	8013520 <_DrawBitmap+0x850>
 80135c4:	4924      	ldr	r1, [pc, #144]	; (8013658 <_DrawBitmap+0x988>)
 80135c6:	9a07      	ldr	r2, [sp, #28]
 80135c8:	680b      	ldr	r3, [r1, #0]
 80135ca:	9925      	ldr	r1, [sp, #148]	; 0x94
 80135cc:	f8cd c00c 	str.w	ip, [sp, #12]
 80135d0:	4798      	blx	r3
 80135d2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80135d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80135d8:	4639      	mov	r1, r7
 80135da:	e7a2      	b.n	8013522 <_DrawBitmap+0x852>
 80135dc:	f1a0 0c02 	sub.w	ip, r0, #2
 80135e0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80135e4:	f109 0701 	add.w	r7, r9, #1
 80135e8:	4649      	mov	r1, r9
 80135ea:	441f      	add	r7, r3
 80135ec:	f105 0208 	add.w	r2, r5, #8
 80135f0:	0920      	lsrs	r0, r4, #4
 80135f2:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80135f6:	bf1c      	itt	ne
 80135f8:	f85a 0020 	ldrne.w	r0, [sl, r0, lsl #2]
 80135fc:	f842 0c08 	strne.w	r0, [r2, #-8]
 8013600:	f014 040f 	ands.w	r4, r4, #15
 8013604:	bf1c      	itt	ne
 8013606:	f85a 0024 	ldrne.w	r0, [sl, r4, lsl #2]
 801360a:	f842 0c04 	strne.w	r0, [r2, #-4]
 801360e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013612:	42b9      	cmp	r1, r7
 8013614:	f102 0208 	add.w	r2, r2, #8
 8013618:	d1ea      	bne.n	80135f0 <_DrawBitmap+0x920>
 801361a:	9a08      	ldr	r2, [sp, #32]
 801361c:	1c91      	adds	r1, r2, #2
 801361e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8013622:	1c5a      	adds	r2, r3, #1
 8013624:	9108      	str	r1, [sp, #32]
 8013626:	ebac 0043 	sub.w	r0, ip, r3, lsl #1
 801362a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801362e:	e58a      	b.n	8013146 <_DrawBitmap+0x476>
 8013630:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013632:	4663      	mov	r3, ip
 8013634:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013638:	b109      	cbz	r1, 801363e <_DrawBitmap+0x96e>
 801363a:	f843 1c04 	str.w	r1, [r3, #-4]
 801363e:	4542      	cmp	r2, r8
 8013640:	f103 0304 	add.w	r3, r3, #4
 8013644:	d1f6      	bne.n	8013634 <_DrawBitmap+0x964>
 8013646:	e76b      	b.n	8013520 <_DrawBitmap+0x850>
 8013648:	9916      	ldr	r1, [sp, #88]	; 0x58
 801364a:	2900      	cmp	r1, #0
 801364c:	f47f abd4 	bne.w	8012df8 <_DrawBitmap+0x128>
 8013650:	f7ff bb4c 	b.w	8012cec <_DrawBitmap+0x1c>
 8013654:	2000026c 	.word	0x2000026c
 8013658:	20000244 	.word	0x20000244

0801365c <_GetPixelIndex>:
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	4b0e      	ldr	r3, [pc, #56]	; (8013698 <_GetPixelIndex+0x3c>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	b082      	sub	sp, #8
 8013664:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8013666:	460c      	mov	r4, r1
 8013668:	4616      	mov	r6, r2
 801366a:	f005 fd81 	bl	8019170 <GUI_ALLOC_LockH>
 801366e:	ab02      	add	r3, sp, #8
 8013670:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013674:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013678:	68c5      	ldr	r5, [r0, #12]
 801367a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801367e:	1a76      	subs	r6, r6, r1
 8013680:	3018      	adds	r0, #24
 8013682:	fb05 0506 	mla	r5, r5, r6, r0
 8013686:	1aa4      	subs	r4, r4, r2
 8013688:	4618      	mov	r0, r3
 801368a:	f005 fd83 	bl	8019194 <GUI_ALLOC_UnlockH>
 801368e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8013692:	b002      	add	sp, #8
 8013694:	bd70      	pop	{r4, r5, r6, pc}
 8013696:	bf00      	nop
 8013698:	2000026c 	.word	0x2000026c

0801369c <_SetPixelIndex>:
 801369c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136a0:	4c1a      	ldr	r4, [pc, #104]	; (801370c <_SetPixelIndex+0x70>)
 80136a2:	6820      	ldr	r0, [r4, #0]
 80136a4:	b083      	sub	sp, #12
 80136a6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80136a8:	460e      	mov	r6, r1
 80136aa:	4615      	mov	r5, r2
 80136ac:	461f      	mov	r7, r3
 80136ae:	f005 fd5f 	bl	8019170 <GUI_ALLOC_LockH>
 80136b2:	6823      	ldr	r3, [r4, #0]
 80136b4:	9000      	str	r0, [sp, #0]
 80136b6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80136b8:	f005 fd5a 	bl	8019170 <GUI_ALLOC_LockH>
 80136bc:	ac02      	add	r4, sp, #8
 80136be:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80136c2:	68c3      	ldr	r3, [r0, #12]
 80136c4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80136c8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80136cc:	ebc8 0805 	rsb	r8, r8, r5
 80136d0:	3018      	adds	r0, #24
 80136d2:	fb03 0808 	mla	r8, r3, r8, r0
 80136d6:	ebc9 0906 	rsb	r9, r9, r6
 80136da:	4620      	mov	r0, r4
 80136dc:	f005 fd5a 	bl	8019194 <GUI_ALLOC_UnlockH>
 80136e0:	f848 7029 	str.w	r7, [r8, r9, lsl #2]
 80136e4:	9b00      	ldr	r3, [sp, #0]
 80136e6:	6958      	ldr	r0, [r3, #20]
 80136e8:	b150      	cbz	r0, 8013700 <_SetPixelIndex+0x64>
 80136ea:	f005 fd41 	bl	8019170 <GUI_ALLOC_LockH>
 80136ee:	9001      	str	r0, [sp, #4]
 80136f0:	6883      	ldr	r3, [r0, #8]
 80136f2:	4631      	mov	r1, r6
 80136f4:	462a      	mov	r2, r5
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	4798      	blx	r3
 80136fa:	4620      	mov	r0, r4
 80136fc:	f005 fd4a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013700:	4668      	mov	r0, sp
 8013702:	f005 fd47 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013706:	b003      	add	sp, #12
 8013708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801370c:	2000026c 	.word	0x2000026c

08013710 <_XorPixel>:
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013714:	4c1e      	ldr	r4, [pc, #120]	; (8013790 <_XorPixel+0x80>)
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	b082      	sub	sp, #8
 801371a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801371c:	4688      	mov	r8, r1
 801371e:	4617      	mov	r7, r2
 8013720:	f005 fd26 	bl	8019170 <GUI_ALLOC_LockH>
 8013724:	6823      	ldr	r3, [r4, #0]
 8013726:	9000      	str	r0, [sp, #0]
 8013728:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801372a:	f005 fd21 	bl	8019170 <GUI_ALLOC_LockH>
 801372e:	ac02      	add	r4, sp, #8
 8013730:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8013734:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013738:	68c2      	ldr	r2, [r0, #12]
 801373a:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801373e:	f100 0318 	add.w	r3, r0, #24
 8013742:	1b7d      	subs	r5, r7, r5
 8013744:	4620      	mov	r0, r4
 8013746:	fb02 3505 	mla	r5, r2, r5, r3
 801374a:	f005 fd23 	bl	8019194 <GUI_ALLOC_UnlockH>
 801374e:	9b00      	ldr	r3, [sp, #0]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	691b      	ldr	r3, [r3, #16]
 8013754:	ebc6 0608 	rsb	r6, r6, r8
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	4798      	blx	r3
 801375c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8013760:	9a00      	ldr	r2, [sp, #0]
 8013762:	4058      	eors	r0, r3
 8013764:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 8013768:	6950      	ldr	r0, [r2, #20]
 801376a:	b150      	cbz	r0, 8013782 <_XorPixel+0x72>
 801376c:	f005 fd00 	bl	8019170 <GUI_ALLOC_LockH>
 8013770:	9001      	str	r0, [sp, #4]
 8013772:	6883      	ldr	r3, [r0, #8]
 8013774:	4641      	mov	r1, r8
 8013776:	463a      	mov	r2, r7
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4798      	blx	r3
 801377c:	4620      	mov	r0, r4
 801377e:	f005 fd09 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013782:	4668      	mov	r0, sp
 8013784:	f005 fd06 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013788:	b002      	add	sp, #8
 801378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801378e:	bf00      	nop
 8013790:	2000026c 	.word	0x2000026c

08013794 <_DrawVLine>:
 8013794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013798:	4e36      	ldr	r6, [pc, #216]	; (8013874 <_DrawVLine+0xe0>)
 801379a:	6830      	ldr	r0, [r6, #0]
 801379c:	b084      	sub	sp, #16
 801379e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80137a0:	460f      	mov	r7, r1
 80137a2:	4614      	mov	r4, r2
 80137a4:	4698      	mov	r8, r3
 80137a6:	f005 fce3 	bl	8019170 <GUI_ALLOC_LockH>
 80137aa:	9001      	str	r0, [sp, #4]
 80137ac:	6940      	ldr	r0, [r0, #20]
 80137ae:	2800      	cmp	r0, #0
 80137b0:	d13c      	bne.n	801382c <_DrawVLine+0x98>
 80137b2:	6833      	ldr	r3, [r6, #0]
 80137b4:	9002      	str	r0, [sp, #8]
 80137b6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80137b8:	f005 fcda 	bl	8019170 <GUI_ALLOC_LockH>
 80137bc:	4603      	mov	r3, r0
 80137be:	a804      	add	r0, sp, #16
 80137c0:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80137c4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80137c8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80137cc:	f840 3d04 	str.w	r3, [r0, #-4]!
 80137d0:	1a61      	subs	r1, r4, r1
 80137d2:	f103 0218 	add.w	r2, r3, #24
 80137d6:	fb0e 2301 	mla	r3, lr, r1, r2
 80137da:	1b7d      	subs	r5, r7, r5
 80137dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80137e0:	f005 fcd8 	bl	8019194 <GUI_ALLOC_UnlockH>
 80137e4:	6833      	ldr	r3, [r6, #0]
 80137e6:	9a01      	ldr	r2, [sp, #4]
 80137e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80137ea:	7c1b      	ldrb	r3, [r3, #16]
 80137ec:	f8d1 a000 	ldr.w	sl, [r1]
 80137f0:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80137f4:	07db      	lsls	r3, r3, #31
 80137f6:	d41c      	bmi.n	8013832 <_DrawVLine+0x9e>
 80137f8:	9802      	ldr	r0, [sp, #8]
 80137fa:	b908      	cbnz	r0, 8013800 <_DrawVLine+0x6c>
 80137fc:	e030      	b.n	8013860 <_DrawVLine+0xcc>
 80137fe:	9802      	ldr	r0, [sp, #8]
 8013800:	6883      	ldr	r3, [r0, #8]
 8013802:	4622      	mov	r2, r4
 8013804:	681e      	ldr	r6, [r3, #0]
 8013806:	4639      	mov	r1, r7
 8013808:	3401      	adds	r4, #1
 801380a:	47b0      	blx	r6
 801380c:	45a0      	cmp	r8, r4
 801380e:	f8c5 a000 	str.w	sl, [r5]
 8013812:	444d      	add	r5, r9
 8013814:	daf3      	bge.n	80137fe <_DrawVLine+0x6a>
 8013816:	a801      	add	r0, sp, #4
 8013818:	f005 fcbc 	bl	8019194 <GUI_ALLOC_UnlockH>
 801381c:	9b02      	ldr	r3, [sp, #8]
 801381e:	b113      	cbz	r3, 8013826 <_DrawVLine+0x92>
 8013820:	a802      	add	r0, sp, #8
 8013822:	f005 fcb7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013826:	b004      	add	sp, #16
 8013828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801382c:	f005 fca0 	bl	8019170 <GUI_ALLOC_LockH>
 8013830:	e7bf      	b.n	80137b2 <_DrawVLine+0x1e>
 8013832:	6813      	ldr	r3, [r2, #0]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	4798      	blx	r3
 801383a:	4606      	mov	r6, r0
 801383c:	9b02      	ldr	r3, [sp, #8]
 801383e:	4622      	mov	r2, r4
 8013840:	4639      	mov	r1, r7
 8013842:	3401      	adds	r4, #1
 8013844:	4618      	mov	r0, r3
 8013846:	b113      	cbz	r3, 801384e <_DrawVLine+0xba>
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4798      	blx	r3
 801384e:	9a01      	ldr	r2, [sp, #4]
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	68d2      	ldr	r2, [r2, #12]
 8013854:	4073      	eors	r3, r6
 8013856:	4544      	cmp	r4, r8
 8013858:	602b      	str	r3, [r5, #0]
 801385a:	4415      	add	r5, r2
 801385c:	ddee      	ble.n	801383c <_DrawVLine+0xa8>
 801385e:	e7da      	b.n	8013816 <_DrawVLine+0x82>
 8013860:	ebc4 0308 	rsb	r3, r4, r8
 8013864:	3301      	adds	r3, #1
 8013866:	3b01      	subs	r3, #1
 8013868:	f8c5 a000 	str.w	sl, [r5]
 801386c:	444d      	add	r5, r9
 801386e:	d1fa      	bne.n	8013866 <_DrawVLine+0xd2>
 8013870:	e7d1      	b.n	8013816 <_DrawVLine+0x82>
 8013872:	bf00      	nop
 8013874:	2000026c 	.word	0x2000026c

08013878 <_FillRect>:
 8013878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801387c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8013964 <_FillRect+0xec>
 8013880:	f8d8 0000 	ldr.w	r0, [r8]
 8013884:	b087      	sub	sp, #28
 8013886:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013888:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 801388c:	468b      	mov	fp, r1
 801388e:	4615      	mov	r5, r2
 8013890:	461f      	mov	r7, r3
 8013892:	f005 fc6d 	bl	8019170 <GUI_ALLOC_LockH>
 8013896:	f8d8 3000 	ldr.w	r3, [r8]
 801389a:	9004      	str	r0, [sp, #16]
 801389c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801389e:	f005 fc67 	bl	8019170 <GUI_ALLOC_LockH>
 80138a2:	f10d 0c18 	add.w	ip, sp, #24
 80138a6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80138aa:	68c2      	ldr	r2, [r0, #12]
 80138ac:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80138b0:	f84c 0d04 	str.w	r0, [ip, #-4]!
 80138b4:	1aeb      	subs	r3, r5, r3
 80138b6:	3018      	adds	r0, #24
 80138b8:	fb02 0303 	mla	r3, r2, r3, r0
 80138bc:	ebc6 060b 	rsb	r6, r6, fp
 80138c0:	4660      	mov	r0, ip
 80138c2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80138c6:	f8cd c00c 	str.w	ip, [sp, #12]
 80138ca:	f005 fc63 	bl	8019194 <GUI_ALLOC_UnlockH>
 80138ce:	9a04      	ldr	r2, [sp, #16]
 80138d0:	f8d8 3000 	ldr.w	r3, [r8]
 80138d4:	6950      	ldr	r0, [r2, #20]
 80138d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138d8:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 80138dc:	681c      	ldr	r4, [r3, #0]
 80138de:	ebcb 0707 	rsb	r7, fp, r7
 80138e2:	3701      	adds	r7, #1
 80138e4:	bb58      	cbnz	r0, 801393e <_FillRect+0xc6>
 80138e6:	454d      	cmp	r5, r9
 80138e8:	dc10      	bgt.n	801390c <_FillRect+0x94>
 80138ea:	f8d8 3000 	ldr.w	r3, [r8]
 80138ee:	7c1b      	ldrb	r3, [r3, #16]
 80138f0:	07db      	lsls	r3, r3, #31
 80138f2:	d411      	bmi.n	8013918 <_FillRect+0xa0>
 80138f4:	2f00      	cmp	r7, #0
 80138f6:	dd05      	ble.n	8013904 <_FillRect+0x8c>
 80138f8:	4639      	mov	r1, r7
 80138fa:	4630      	mov	r0, r6
 80138fc:	3901      	subs	r1, #1
 80138fe:	f840 4b04 	str.w	r4, [r0], #4
 8013902:	d1fb      	bne.n	80138fc <_FillRect+0x84>
 8013904:	3501      	adds	r5, #1
 8013906:	45a9      	cmp	r9, r5
 8013908:	4456      	add	r6, sl
 801390a:	daee      	bge.n	80138ea <_FillRect+0x72>
 801390c:	a804      	add	r0, sp, #16
 801390e:	f005 fc41 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013912:	b007      	add	sp, #28
 8013914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013918:	9b04      	ldr	r3, [sp, #16]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	691b      	ldr	r3, [r3, #16]
 801391e:	689b      	ldr	r3, [r3, #8]
 8013920:	4798      	blx	r3
 8013922:	4632      	mov	r2, r6
 8013924:	463b      	mov	r3, r7
 8013926:	6811      	ldr	r1, [r2, #0]
 8013928:	3b01      	subs	r3, #1
 801392a:	ea81 0100 	eor.w	r1, r1, r0
 801392e:	f842 1b04 	str.w	r1, [r2], #4
 8013932:	d1f8      	bne.n	8013926 <_FillRect+0xae>
 8013934:	3501      	adds	r5, #1
 8013936:	45a9      	cmp	r9, r5
 8013938:	4456      	add	r6, sl
 801393a:	dad6      	bge.n	80138ea <_FillRect+0x72>
 801393c:	e7e6      	b.n	801390c <_FillRect+0x94>
 801393e:	f005 fc17 	bl	8019170 <GUI_ALLOC_LockH>
 8013942:	ebc5 0309 	rsb	r3, r5, r9
 8013946:	3301      	adds	r3, #1
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	4659      	mov	r1, fp
 801394c:	462a      	mov	r2, r5
 801394e:	463b      	mov	r3, r7
 8013950:	9005      	str	r0, [sp, #20]
 8013952:	f008 fc37 	bl	801c1c4 <GUI_USAGE_AddRect>
 8013956:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801395a:	4660      	mov	r0, ip
 801395c:	f005 fc1a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013960:	e7c1      	b.n	80138e6 <_FillRect+0x6e>
 8013962:	bf00      	nop
 8013964:	2000026c 	.word	0x2000026c

08013968 <_DrawHLine>:
 8013968:	b500      	push	{lr}
 801396a:	b083      	sub	sp, #12
 801396c:	9200      	str	r2, [sp, #0]
 801396e:	f7ff ff83 	bl	8013878 <_FillRect>
 8013972:	b003      	add	sp, #12
 8013974:	f85d fb04 	ldr.w	pc, [sp], #4

08013978 <GUI_MEMDEV__WriteToActiveAt>:
 8013978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801397c:	b082      	sub	sp, #8
 801397e:	460e      	mov	r6, r1
 8013980:	4690      	mov	r8, r2
 8013982:	4607      	mov	r7, r0
 8013984:	f005 fbf4 	bl	8019170 <GUI_ALLOC_LockH>
 8013988:	6805      	ldr	r5, [r0, #0]
 801398a:	ac02      	add	r4, sp, #8
 801398c:	68eb      	ldr	r3, [r5, #12]
 801398e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013994:	2000      	movs	r0, #0
 8013996:	2116      	movs	r1, #22
 8013998:	4798      	blx	r3
 801399a:	4605      	mov	r5, r0
 801399c:	4620      	mov	r0, r4
 801399e:	f005 fbf9 	bl	8019194 <GUI_ALLOC_UnlockH>
 80139a2:	b11d      	cbz	r5, 80139ac <GUI_MEMDEV__WriteToActiveAt+0x34>
 80139a4:	4638      	mov	r0, r7
 80139a6:	4631      	mov	r1, r6
 80139a8:	4642      	mov	r2, r8
 80139aa:	47a8      	blx	r5
 80139ac:	b002      	add	sp, #8
 80139ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b2:	bf00      	nop

080139b4 <GUI_MEMDEV__CreateFixed>:
 80139b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b8:	4f4a      	ldr	r7, [pc, #296]	; (8013ae4 <GUI_MEMDEV__CreateFixed+0x130>)
 80139ba:	b087      	sub	sp, #28
 80139bc:	683c      	ldr	r4, [r7, #0]
 80139be:	4682      	mov	sl, r0
 80139c0:	468b      	mov	fp, r1
 80139c2:	4616      	mov	r6, r2
 80139c4:	461d      	mov	r5, r3
 80139c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80139c8:	7c63      	ldrb	r3, [r4, #17]
 80139ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 80139cc:	2200      	movs	r2, #0
 80139ce:	f003 fd95 	bl	80174fc <GUI_DEVICE_Create>
 80139d2:	4604      	mov	r4, r0
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d031      	beq.n	8013a3c <GUI_MEMDEV__CreateFixed+0x88>
 80139d8:	6903      	ldr	r3, [r0, #16]
 80139da:	689b      	ldr	r3, [r3, #8]
 80139dc:	4798      	blx	r3
 80139de:	f001 fb09 	bl	8014ff4 <LCD__GetBPPDevice>
 80139e2:	fb06 f800 	mul.w	r8, r6, r0
 80139e6:	4681      	mov	r9, r0
 80139e8:	f005 fbee 	bl	80191c8 <GUI_ALLOC_RequestSize>
 80139ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80139ee:	f108 0807 	add.w	r8, r8, #7
 80139f2:	f011 0c01 	ands.w	ip, r1, #1
 80139f6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80139fa:	d105      	bne.n	8013a08 <GUI_MEMDEV__CreateFixed+0x54>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	bfb8      	it	lt
 8013a00:	3003      	addlt	r0, #3
 8013a02:	1080      	asrs	r0, r0, #2
 8013a04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013a08:	2d00      	cmp	r5, #0
 8013a0a:	dd42      	ble.n	8013a92 <GUI_MEMDEV__CreateFixed+0xde>
 8013a0c:	f1bc 0f00 	cmp.w	ip, #0
 8013a10:	d04a      	beq.n	8013aa8 <GUI_MEMDEV__CreateFixed+0xf4>
 8013a12:	2300      	movs	r3, #0
 8013a14:	9303      	str	r3, [sp, #12]
 8013a16:	2d00      	cmp	r5, #0
 8013a18:	dd60      	ble.n	8013adc <GUI_MEMDEV__CreateFixed+0x128>
 8013a1a:	fb08 f005 	mul.w	r0, r8, r5
 8013a1e:	3018      	adds	r0, #24
 8013a20:	f1bc 0f00 	cmp.w	ip, #0
 8013a24:	d00e      	beq.n	8013a44 <GUI_MEMDEV__CreateFixed+0x90>
 8013a26:	f005 fb8b 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	b97a      	cbnz	r2, 8013a4e <GUI_MEMDEV__CreateFixed+0x9a>
 8013a2e:	4620      	mov	r0, r4
 8013a30:	9202      	str	r2, [sp, #8]
 8013a32:	f003 fd61 	bl	80174f8 <GUI_DEVICE_Delete>
 8013a36:	9c03      	ldr	r4, [sp, #12]
 8013a38:	2c00      	cmp	r4, #0
 8013a3a:	d147      	bne.n	8013acc <GUI_MEMDEV__CreateFixed+0x118>
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	b007      	add	sp, #28
 8013a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a44:	f005 fd1c 	bl	8019480 <GUI_ALLOC_AllocZero>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	2a00      	cmp	r2, #0
 8013a4c:	d0ef      	beq.n	8013a2e <GUI_MEMDEV__CreateFixed+0x7a>
 8013a4e:	4610      	mov	r0, r2
 8013a50:	9202      	str	r2, [sp, #8]
 8013a52:	f005 fb8d 	bl	8019170 <GUI_ALLOC_LockH>
 8013a56:	4603      	mov	r3, r0
 8013a58:	a806      	add	r0, sp, #24
 8013a5a:	815d      	strh	r5, [r3, #10]
 8013a5c:	9d03      	ldr	r5, [sp, #12]
 8013a5e:	f8a3 a004 	strh.w	sl, [r3, #4]
 8013a62:	f840 3d04 	str.w	r3, [r0, #-4]!
 8013a66:	f8a3 b006 	strh.w	fp, [r3, #6]
 8013a6a:	811e      	strh	r6, [r3, #8]
 8013a6c:	f8c3 800c 	str.w	r8, [r3, #12]
 8013a70:	f8c3 9010 	str.w	r9, [r3, #16]
 8013a74:	615d      	str	r5, [r3, #20]
 8013a76:	601c      	str	r4, [r3, #0]
 8013a78:	f005 fb8c 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013a7c:	9a02      	ldr	r2, [sp, #8]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013a82:	6125      	str	r5, [r4, #16]
 8013a84:	60a2      	str	r2, [r4, #8]
 8013a86:	7c5b      	ldrb	r3, [r3, #17]
 8013a88:	61a3      	str	r3, [r4, #24]
 8013a8a:	4610      	mov	r0, r2
 8013a8c:	b007      	add	sp, #28
 8013a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a92:	f1b8 0f00 	cmp.w	r8, #0
 8013a96:	d115      	bne.n	8013ac4 <GUI_MEMDEV__CreateFixed+0x110>
 8013a98:	4640      	mov	r0, r8
 8013a9a:	426d      	negs	r5, r5
 8013a9c:	42a8      	cmp	r0, r5
 8013a9e:	bfb8      	it	lt
 8013aa0:	4605      	movlt	r5, r0
 8013aa2:	f1bc 0f00 	cmp.w	ip, #0
 8013aa6:	d1b4      	bne.n	8013a12 <GUI_MEMDEV__CreateFixed+0x5e>
 8013aa8:	f8cd c000 	str.w	ip, [sp]
 8013aac:	4650      	mov	r0, sl
 8013aae:	4659      	mov	r1, fp
 8013ab0:	4632      	mov	r2, r6
 8013ab2:	462b      	mov	r3, r5
 8013ab4:	f8cd c008 	str.w	ip, [sp, #8]
 8013ab8:	f008 fb38 	bl	801c12c <GUI_USAGE_BM_Create>
 8013abc:	f8dd c008 	ldr.w	ip, [sp, #8]
 8013ac0:	9003      	str	r0, [sp, #12]
 8013ac2:	e7a8      	b.n	8013a16 <GUI_MEMDEV__CreateFixed+0x62>
 8013ac4:	3818      	subs	r0, #24
 8013ac6:	fbb0 f0f8 	udiv	r0, r0, r8
 8013aca:	e7e6      	b.n	8013a9a <GUI_MEMDEV__CreateFixed+0xe6>
 8013acc:	4620      	mov	r0, r4
 8013ace:	f005 fc61 	bl	8019394 <GUI_ALLOC_Free>
 8013ad2:	9a02      	ldr	r2, [sp, #8]
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	b007      	add	sp, #28
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	4620      	mov	r0, r4
 8013ade:	f003 fd0b 	bl	80174f8 <GUI_DEVICE_Delete>
 8013ae2:	e7ab      	b.n	8013a3c <GUI_MEMDEV__CreateFixed+0x88>
 8013ae4:	2000026c 	.word	0x2000026c

08013ae8 <GUI_MEMDEV_GetBitsPerPixel>:
 8013ae8:	b530      	push	{r4, r5, lr}
 8013aea:	4604      	mov	r4, r0
 8013aec:	b083      	sub	sp, #12
 8013aee:	b198      	cbz	r0, 8013b18 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 8013af0:	f002 ffbe 	bl	8016a70 <GUI_Lock>
 8013af4:	4620      	mov	r0, r4
 8013af6:	f005 fb3b 	bl	8019170 <GUI_ALLOC_LockH>
 8013afa:	6803      	ldr	r3, [r0, #0]
 8013afc:	ad02      	add	r5, sp, #8
 8013afe:	691b      	ldr	r3, [r3, #16]
 8013b00:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013b04:	689b      	ldr	r3, [r3, #8]
 8013b06:	4798      	blx	r3
 8013b08:	f001 fa74 	bl	8014ff4 <LCD__GetBPPDevice>
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	4628      	mov	r0, r5
 8013b10:	f005 fb40 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013b14:	f002 ffa2 	bl	8016a5c <GUI_Unlock>
 8013b18:	4620      	mov	r0, r4
 8013b1a:	b003      	add	sp, #12
 8013b1c:	bd30      	pop	{r4, r5, pc}
 8013b1e:	bf00      	nop

08013b20 <GUI_MEMDEV_Delete>:
 8013b20:	b510      	push	{r4, lr}
 8013b22:	4604      	mov	r4, r0
 8013b24:	b082      	sub	sp, #8
 8013b26:	b908      	cbnz	r0, 8013b2c <GUI_MEMDEV_Delete+0xc>
 8013b28:	b002      	add	sp, #8
 8013b2a:	bd10      	pop	{r4, pc}
 8013b2c:	f002 ffa0 	bl	8016a70 <GUI_Lock>
 8013b30:	4b0f      	ldr	r3, [pc, #60]	; (8013b70 <GUI_MEMDEV_Delete+0x50>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013b36:	42a3      	cmp	r3, r4
 8013b38:	d017      	beq.n	8013b6a <GUI_MEMDEV_Delete+0x4a>
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f005 fb18 	bl	8019170 <GUI_ALLOC_LockH>
 8013b40:	6943      	ldr	r3, [r0, #20]
 8013b42:	9001      	str	r0, [sp, #4]
 8013b44:	b963      	cbnz	r3, 8013b60 <GUI_MEMDEV_Delete+0x40>
 8013b46:	6800      	ldr	r0, [r0, #0]
 8013b48:	f003 fcd6 	bl	80174f8 <GUI_DEVICE_Delete>
 8013b4c:	a801      	add	r0, sp, #4
 8013b4e:	f005 fb21 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013b52:	4620      	mov	r0, r4
 8013b54:	f005 fc1e 	bl	8019394 <GUI_ALLOC_Free>
 8013b58:	f002 ff80 	bl	8016a5c <GUI_Unlock>
 8013b5c:	b002      	add	sp, #8
 8013b5e:	bd10      	pop	{r4, pc}
 8013b60:	4618      	mov	r0, r3
 8013b62:	f008 fb15 	bl	801c190 <GUI_USAGE_DecUseCnt>
 8013b66:	9801      	ldr	r0, [sp, #4]
 8013b68:	e7ed      	b.n	8013b46 <GUI_MEMDEV_Delete+0x26>
 8013b6a:	f004 fa03 	bl	8017f74 <GUI_SelectLCD>
 8013b6e:	e7e4      	b.n	8013b3a <GUI_MEMDEV_Delete+0x1a>
 8013b70:	2000026c 	.word	0x2000026c

08013b74 <GUI_MEMDEV_CreateEx>:
 8013b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	b085      	sub	sp, #20
 8013b7a:	4680      	mov	r8, r0
 8013b7c:	4692      	mov	sl, r2
 8013b7e:	469b      	mov	fp, r3
 8013b80:	4689      	mov	r9, r1
 8013b82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8013b84:	f002 ff74 	bl	8016a70 <GUI_Lock>
 8013b88:	4a19      	ldr	r2, [pc, #100]	; (8013bf0 <GUI_MEMDEV_CreateEx+0x7c>)
 8013b8a:	4b1a      	ldr	r3, [pc, #104]	; (8013bf4 <GUI_MEMDEV_CreateEx+0x80>)
 8013b8c:	6812      	ldr	r2, [r2, #0]
 8013b8e:	7c50      	ldrb	r0, [r2, #17]
 8013b90:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8013b94:	e001      	b.n	8013b9a <GUI_MEMDEV_CreateEx+0x26>
 8013b96:	6824      	ldr	r4, [r4, #0]
 8013b98:	b314      	cbz	r4, 8013be0 <GUI_MEMDEV_CreateEx+0x6c>
 8013b9a:	68e5      	ldr	r5, [r4, #12]
 8013b9c:	682e      	ldr	r6, [r5, #0]
 8013b9e:	2e04      	cmp	r6, #4
 8013ba0:	d1f9      	bne.n	8013b96 <GUI_MEMDEV_CreateEx+0x22>
 8013ba2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	2101      	movs	r1, #1
 8013ba8:	4798      	blx	r3
 8013baa:	4605      	mov	r5, r0
 8013bac:	b190      	cbz	r0, 8013bd4 <GUI_MEMDEV_CreateEx+0x60>
 8013bae:	6924      	ldr	r4, [r4, #16]
 8013bb0:	68a3      	ldr	r3, [r4, #8]
 8013bb2:	4798      	blx	r3
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	bf08      	it	eq
 8013bb8:	4c0f      	ldreq	r4, [pc, #60]	; (8013bf8 <GUI_MEMDEV_CreateEx+0x84>)
 8013bba:	9501      	str	r5, [sp, #4]
 8013bbc:	bf08      	it	eq
 8013bbe:	f047 0701 	orreq.w	r7, r7, #1
 8013bc2:	9700      	str	r7, [sp, #0]
 8013bc4:	9402      	str	r4, [sp, #8]
 8013bc6:	4640      	mov	r0, r8
 8013bc8:	4649      	mov	r1, r9
 8013bca:	4652      	mov	r2, sl
 8013bcc:	465b      	mov	r3, fp
 8013bce:	f7ff fef1 	bl	80139b4 <GUI_MEMDEV__CreateFixed>
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	f002 ff42 	bl	8016a5c <GUI_Unlock>
 8013bd8:	4628      	mov	r0, r5
 8013bda:	b005      	add	sp, #20
 8013bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be0:	f003 fc74 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8013be4:	4604      	mov	r4, r0
 8013be6:	b108      	cbz	r0, 8013bec <GUI_MEMDEV_CreateEx+0x78>
 8013be8:	68c5      	ldr	r5, [r0, #12]
 8013bea:	e7da      	b.n	8013ba2 <GUI_MEMDEV_CreateEx+0x2e>
 8013bec:	4620      	mov	r0, r4
 8013bee:	e7f4      	b.n	8013bda <GUI_MEMDEV_CreateEx+0x66>
 8013bf0:	2000026c 	.word	0x2000026c
 8013bf4:	2002c040 	.word	0x2002c040
 8013bf8:	080216b4 	.word	0x080216b4

08013bfc <GUI_MEMDEV_Select>:
 8013bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bfe:	4f16      	ldr	r7, [pc, #88]	; (8013c58 <GUI_MEMDEV_Select+0x5c>)
 8013c00:	b083      	sub	sp, #12
 8013c02:	4604      	mov	r4, r0
 8013c04:	f002 ff34 	bl	8016a70 <GUI_Lock>
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8013c0c:	b1e4      	cbz	r4, 8013c48 <GUI_MEMDEV_Select+0x4c>
 8013c0e:	b9c6      	cbnz	r6, 8013c42 <GUI_MEMDEV_Select+0x46>
 8013c10:	f7fe fc8e 	bl	8012530 <WM_Deactivate>
 8013c14:	4620      	mov	r0, r4
 8013c16:	f005 faab 	bl	8019170 <GUI_ALLOC_LockH>
 8013c1a:	ad02      	add	r5, sp, #8
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013c22:	661c      	str	r4, [r3, #96]	; 0x60
 8013c24:	6800      	ldr	r0, [r0, #0]
 8013c26:	f003 fcad 	bl	8017584 <GUI_DEVICE_Link>
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f005 fab2 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013c30:	f000 ffc4 	bl	8014bbc <LCD_UpdateColorIndices>
 8013c34:	f001 fdbe 	bl	80157b4 <LCD_SetClipRectMax>
 8013c38:	f002 ff10 	bl	8016a5c <GUI_Unlock>
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	b003      	add	sp, #12
 8013c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c42:	f004 f997 	bl	8017f74 <GUI_SelectLCD>
 8013c46:	e7e3      	b.n	8013c10 <GUI_MEMDEV_Select+0x14>
 8013c48:	f004 f994 	bl	8017f74 <GUI_SelectLCD>
 8013c4c:	f002 ff06 	bl	8016a5c <GUI_Unlock>
 8013c50:	4630      	mov	r0, r6
 8013c52:	b003      	add	sp, #12
 8013c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c56:	bf00      	nop
 8013c58:	2000026c 	.word	0x2000026c

08013c5c <GUI_MEMDEV_CopyToLCDAt>:
 8013c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c60:	4604      	mov	r4, r0
 8013c62:	b084      	sub	sp, #16
 8013c64:	460d      	mov	r5, r1
 8013c66:	4616      	mov	r6, r2
 8013c68:	b910      	cbnz	r0, 8013c70 <GUI_MEMDEV_CopyToLCDAt+0x14>
 8013c6a:	b004      	add	sp, #16
 8013c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c70:	f002 fefe 	bl	8016a70 <GUI_Lock>
 8013c74:	2000      	movs	r0, #0
 8013c76:	f004 f9ed 	bl	8018054 <GUI_SetDrawMode>
 8013c7a:	4f33      	ldr	r7, [pc, #204]	; (8013d48 <GUI_MEMDEV_CopyToLCDAt+0xec>)
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	4681      	mov	r9, r0
 8013c80:	4620      	mov	r0, r4
 8013c82:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8013c86:	f005 fa73 	bl	8019170 <GUI_ALLOC_LockH>
 8013c8a:	6803      	ldr	r3, [r0, #0]
 8013c8c:	9000      	str	r0, [sp, #0]
 8013c8e:	6998      	ldr	r0, [r3, #24]
 8013c90:	f003 f80e 	bl	8016cb0 <GUI_SelectLayer>
 8013c94:	4b2d      	ldr	r3, [pc, #180]	; (8013d4c <GUI_MEMDEV_CopyToLCDAt+0xf0>)
 8013c96:	429d      	cmp	r5, r3
 8013c98:	9b00      	ldr	r3, [sp, #0]
 8013c9a:	bf04      	itt	eq
 8013c9c:	f9b3 5004 	ldrsheq.w	r5, [r3, #4]
 8013ca0:	f9b3 6006 	ldrsheq.w	r6, [r3, #6]
 8013ca4:	891a      	ldrh	r2, [r3, #8]
 8013ca6:	895b      	ldrh	r3, [r3, #10]
 8013ca8:	f8ad 5008 	strh.w	r5, [sp, #8]
 8013cac:	3a01      	subs	r2, #1
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	442a      	add	r2, r5
 8013cb2:	4433      	add	r3, r6
 8013cb4:	4682      	mov	sl, r0
 8013cb6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013cba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013cbe:	f8ad 600a 	strh.w	r6, [sp, #10]
 8013cc2:	f7fe fc2d 	bl	8012520 <WM_Activate>
 8013cc6:	4668      	mov	r0, sp
 8013cc8:	f005 fa64 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013ccc:	a802      	add	r0, sp, #8
 8013cce:	f7fe f9af 	bl	8012030 <WM__InitIVRSearch>
 8013cd2:	bb48      	cbnz	r0, 8013d28 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 8013cd4:	4650      	mov	r0, sl
 8013cd6:	f002 ffeb 	bl	8016cb0 <GUI_SelectLayer>
 8013cda:	f002 fec9 	bl	8016a70 <GUI_Lock>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ce2:	f1b8 0f00 	cmp.w	r8, #0
 8013ce6:	d02c      	beq.n	8013d42 <GUI_MEMDEV_CopyToLCDAt+0xe6>
 8013ce8:	bb43      	cbnz	r3, 8013d3c <GUI_MEMDEV_CopyToLCDAt+0xe0>
 8013cea:	f7fe fc21 	bl	8012530 <WM_Deactivate>
 8013cee:	4640      	mov	r0, r8
 8013cf0:	f005 fa3e 	bl	8019170 <GUI_ALLOC_LockH>
 8013cf4:	ac04      	add	r4, sp, #16
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8013cfc:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
 8013d00:	6800      	ldr	r0, [r0, #0]
 8013d02:	f003 fc3f 	bl	8017584 <GUI_DEVICE_Link>
 8013d06:	4620      	mov	r0, r4
 8013d08:	f005 fa44 	bl	8019194 <GUI_ALLOC_UnlockH>
 8013d0c:	f000 ff56 	bl	8014bbc <LCD_UpdateColorIndices>
 8013d10:	f001 fd50 	bl	80157b4 <LCD_SetClipRectMax>
 8013d14:	f002 fea2 	bl	8016a5c <GUI_Unlock>
 8013d18:	4648      	mov	r0, r9
 8013d1a:	f004 f99b 	bl	8018054 <GUI_SetDrawMode>
 8013d1e:	f002 fe9d 	bl	8016a5c <GUI_Unlock>
 8013d22:	b004      	add	sp, #16
 8013d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d28:	4620      	mov	r0, r4
 8013d2a:	4629      	mov	r1, r5
 8013d2c:	4632      	mov	r2, r6
 8013d2e:	f007 faef 	bl	801b310 <GUI_MEMDEV__WriteToActiveOpaque>
 8013d32:	f7fe f857 	bl	8011de4 <WM__GetNextIVR>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d1f6      	bne.n	8013d28 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 8013d3a:	e7cb      	b.n	8013cd4 <GUI_MEMDEV_CopyToLCDAt+0x78>
 8013d3c:	f004 f91a 	bl	8017f74 <GUI_SelectLCD>
 8013d40:	e7d3      	b.n	8013cea <GUI_MEMDEV_CopyToLCDAt+0x8e>
 8013d42:	f004 f917 	bl	8017f74 <GUI_SelectLCD>
 8013d46:	e7e5      	b.n	8013d14 <GUI_MEMDEV_CopyToLCDAt+0xb8>
 8013d48:	2000026c 	.word	0x2000026c
 8013d4c:	fffff001 	.word	0xfffff001

08013d50 <GUI_MEMDEV_CopyToLCD>:
 8013d50:	4901      	ldr	r1, [pc, #4]	; (8013d58 <GUI_MEMDEV_CopyToLCD+0x8>)
 8013d52:	460a      	mov	r2, r1
 8013d54:	f7ff bf82 	b.w	8013c5c <GUI_MEMDEV_CopyToLCDAt>
 8013d58:	fffff001 	.word	0xfffff001

08013d5c <_GetRect>:
 8013d5c:	6883      	ldr	r3, [r0, #8]
 8013d5e:	695a      	ldr	r2, [r3, #20]
 8013d60:	699b      	ldr	r3, [r3, #24]
 8013d62:	3a01      	subs	r2, #1
 8013d64:	1e58      	subs	r0, r3, #1
 8013d66:	2300      	movs	r3, #0
 8013d68:	808a      	strh	r2, [r1, #4]
 8013d6a:	80c8      	strh	r0, [r1, #6]
 8013d6c:	800b      	strh	r3, [r1, #0]
 8013d6e:	804b      	strh	r3, [r1, #2]
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop

08013d74 <_SetPixelIndex>:
 8013d74:	b410      	push	{r4}
 8013d76:	6880      	ldr	r0, [r0, #8]
 8013d78:	69c4      	ldr	r4, [r0, #28]
 8013d7a:	6800      	ldr	r0, [r0, #0]
 8013d7c:	fb04 1202 	mla	r2, r4, r2, r1
 8013d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop

08013d8c <_GetPixelIndex>:
 8013d8c:	6883      	ldr	r3, [r0, #8]
 8013d8e:	69d8      	ldr	r0, [r3, #28]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	fb00 1202 	mla	r2, r0, r2, r1
 8013d96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013d9a:	4770      	bx	lr

08013d9c <_XorPixel>:
 8013d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9e:	6883      	ldr	r3, [r0, #8]
 8013da0:	69df      	ldr	r7, [r3, #28]
 8013da2:	460d      	mov	r5, r1
 8013da4:	6901      	ldr	r1, [r0, #16]
 8013da6:	fb07 5702 	mla	r7, r7, r2, r5
 8013daa:	4604      	mov	r4, r0
 8013dac:	6818      	ldr	r0, [r3, #0]
 8013dae:	688b      	ldr	r3, [r1, #8]
 8013db0:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8013db4:	4616      	mov	r6, r2
 8013db6:	4798      	blx	r3
 8013db8:	68a3      	ldr	r3, [r4, #8]
 8013dba:	69da      	ldr	r2, [r3, #28]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	fb02 5506 	mla	r5, r2, r6, r5
 8013dc2:	4078      	eors	r0, r7
 8013dc4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dca:	bf00      	nop

08013dcc <_GetDevProp>:
 8013dcc:	3901      	subs	r1, #1
 8013dce:	6883      	ldr	r3, [r0, #8]
 8013dd0:	290d      	cmp	r1, #13
 8013dd2:	d816      	bhi.n	8013e02 <_GetDevProp+0x36>
 8013dd4:	e8df f001 	tbb	[pc, r1]
 8013dd8:	13110d0b 	.word	0x13110d0b
 8013ddc:	0f151515 	.word	0x0f151515
 8013de0:	07090907 	.word	0x07090907
 8013de4:	0707      	.short	0x0707
 8013de6:	2000      	movs	r0, #0
 8013de8:	4770      	bx	lr
 8013dea:	2001      	movs	r0, #1
 8013dec:	4770      	bx	lr
 8013dee:	68d8      	ldr	r0, [r3, #12]
 8013df0:	4770      	bx	lr
 8013df2:	6918      	ldr	r0, [r3, #16]
 8013df4:	4770      	bx	lr
 8013df6:	2020      	movs	r0, #32
 8013df8:	4770      	bx	lr
 8013dfa:	6958      	ldr	r0, [r3, #20]
 8013dfc:	4770      	bx	lr
 8013dfe:	6998      	ldr	r0, [r3, #24]
 8013e00:	4770      	bx	lr
 8013e02:	f04f 30ff 	mov.w	r0, #4294967295
 8013e06:	4770      	bx	lr

08013e08 <_GetDevData>:
 8013e08:	4802      	ldr	r0, [pc, #8]	; (8013e14 <_GetDevData+0xc>)
 8013e0a:	2901      	cmp	r1, #1
 8013e0c:	bf18      	it	ne
 8013e0e:	2000      	movne	r0, #0
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	0801e6f0 	.word	0x0801e6f0

08013e18 <_ReadRect>:
 8013e18:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8013e1c:	6887      	ldr	r7, [r0, #8]
 8013e1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8013e22:	69f8      	ldr	r0, [r7, #28]
 8013e24:	9d08      	ldr	r5, [sp, #32]
 8013e26:	1a5b      	subs	r3, r3, r1
 8013e28:	f103 0801 	add.w	r8, r3, #1
 8013e2c:	fb00 1102 	mla	r1, r0, r2, r1
 8013e30:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8013e34:	008e      	lsls	r6, r1, #2
 8013e36:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8013e3a:	462b      	mov	r3, r5
 8013e3c:	4641      	mov	r1, r8
 8013e3e:	3304      	adds	r3, #4
 8013e40:	1998      	adds	r0, r3, r6
 8013e42:	3804      	subs	r0, #4
 8013e44:	683c      	ldr	r4, [r7, #0]
 8013e46:	1b40      	subs	r0, r0, r5
 8013e48:	3901      	subs	r1, #1
 8013e4a:	5820      	ldr	r0, [r4, r0]
 8013e4c:	f843 0c04 	str.w	r0, [r3, #-4]
 8013e50:	d1f5      	bne.n	8013e3e <_ReadRect+0x26>
 8013e52:	3201      	adds	r2, #1
 8013e54:	1e53      	subs	r3, r2, #1
 8013e56:	459c      	cmp	ip, r3
 8013e58:	4455      	add	r5, sl
 8013e5a:	444e      	add	r6, r9
 8013e5c:	dced      	bgt.n	8013e3a <_ReadRect+0x22>
 8013e5e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8013e62:	4770      	bx	lr

08013e64 <_GetDevFunc>:
 8013e64:	3901      	subs	r1, #1
 8013e66:	2924      	cmp	r1, #36	; 0x24
 8013e68:	d846      	bhi.n	8013ef8 <_GetDevFunc+0x94>
 8013e6a:	e8df f001 	tbb	[pc, r1]
 8013e6e:	1d1f      	.short	0x1d1f
 8013e70:	1745191b 	.word	0x1745191b
 8013e74:	13154545 	.word	0x13154545
 8013e78:	3f454143 	.word	0x3f454143
 8013e7c:	4545453d 	.word	0x4545453d
 8013e80:	3537393b 	.word	0x3537393b
 8013e84:	45314545 	.word	0x45314545
 8013e88:	45454545 	.word	0x45454545
 8013e8c:	292b2d45 	.word	0x292b2d45
 8013e90:	4525      	.short	0x4525
 8013e92:	21          	.byte	0x21
 8013e93:	00          	.byte	0x00
 8013e94:	4819      	ldr	r0, [pc, #100]	; (8013efc <_GetDevFunc+0x98>)
 8013e96:	4770      	bx	lr
 8013e98:	4819      	ldr	r0, [pc, #100]	; (8013f00 <_GetDevFunc+0x9c>)
 8013e9a:	4770      	bx	lr
 8013e9c:	4819      	ldr	r0, [pc, #100]	; (8013f04 <_GetDevFunc+0xa0>)
 8013e9e:	4770      	bx	lr
 8013ea0:	4819      	ldr	r0, [pc, #100]	; (8013f08 <_GetDevFunc+0xa4>)
 8013ea2:	4770      	bx	lr
 8013ea4:	4819      	ldr	r0, [pc, #100]	; (8013f0c <_GetDevFunc+0xa8>)
 8013ea6:	4770      	bx	lr
 8013ea8:	4819      	ldr	r0, [pc, #100]	; (8013f10 <_GetDevFunc+0xac>)
 8013eaa:	4770      	bx	lr
 8013eac:	4819      	ldr	r0, [pc, #100]	; (8013f14 <_GetDevFunc+0xb0>)
 8013eae:	4770      	bx	lr
 8013eb0:	6803      	ldr	r3, [r0, #0]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8013eb6:	4770      	bx	lr
 8013eb8:	6803      	ldr	r3, [r0, #0]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8013ebe:	4770      	bx	lr
 8013ec0:	4815      	ldr	r0, [pc, #84]	; (8013f18 <_GetDevFunc+0xb4>)
 8013ec2:	4770      	bx	lr
 8013ec4:	4815      	ldr	r0, [pc, #84]	; (8013f1c <_GetDevFunc+0xb8>)
 8013ec6:	4770      	bx	lr
 8013ec8:	6803      	ldr	r3, [r0, #0]
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8013ece:	4770      	bx	lr
 8013ed0:	6803      	ldr	r3, [r0, #0]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013ed6:	4770      	bx	lr
 8013ed8:	4811      	ldr	r0, [pc, #68]	; (8013f20 <_GetDevFunc+0xbc>)
 8013eda:	4770      	bx	lr
 8013edc:	4811      	ldr	r0, [pc, #68]	; (8013f24 <_GetDevFunc+0xc0>)
 8013ede:	4770      	bx	lr
 8013ee0:	4811      	ldr	r0, [pc, #68]	; (8013f28 <_GetDevFunc+0xc4>)
 8013ee2:	4770      	bx	lr
 8013ee4:	4811      	ldr	r0, [pc, #68]	; (8013f2c <_GetDevFunc+0xc8>)
 8013ee6:	4770      	bx	lr
 8013ee8:	4811      	ldr	r0, [pc, #68]	; (8013f30 <_GetDevFunc+0xcc>)
 8013eea:	4770      	bx	lr
 8013eec:	4811      	ldr	r0, [pc, #68]	; (8013f34 <_GetDevFunc+0xd0>)
 8013eee:	4770      	bx	lr
 8013ef0:	4811      	ldr	r0, [pc, #68]	; (8013f38 <_GetDevFunc+0xd4>)
 8013ef2:	4770      	bx	lr
 8013ef4:	4811      	ldr	r0, [pc, #68]	; (8013f3c <_GetDevFunc+0xd8>)
 8013ef6:	4770      	bx	lr
 8013ef8:	2000      	movs	r0, #0
 8013efa:	4770      	bx	lr
 8013efc:	08014881 	.word	0x08014881
 8013f00:	08014939 	.word	0x08014939
 8013f04:	080148b9 	.word	0x080148b9
 8013f08:	08014775 	.word	0x08014775
 8013f0c:	08014a49 	.word	0x08014a49
 8013f10:	080148f9 	.word	0x080148f9
 8013f14:	08013e19 	.word	0x08013e19
 8013f18:	08014845 	.word	0x08014845
 8013f1c:	080149d5 	.word	0x080149d5
 8013f20:	080147a5 	.word	0x080147a5
 8013f24:	08013f41 	.word	0x08013f41
 8013f28:	08013f59 	.word	0x08013f59
 8013f2c:	08013f71 	.word	0x08013f71
 8013f30:	08013f89 	.word	0x08013f89
 8013f34:	08013f95 	.word	0x08013f95
 8013f38:	08014815 	.word	0x08014815
 8013f3c:	08014979 	.word	0x08014979

08013f40 <_SetChroma>:
 8013f40:	b500      	push	{lr}
 8013f42:	b083      	sub	sp, #12
 8013f44:	e88d 0006 	stmia.w	sp, {r1, r2}
 8013f48:	6980      	ldr	r0, [r0, #24]
 8013f4a:	210d      	movs	r1, #13
 8013f4c:	466a      	mov	r2, sp
 8013f4e:	f7f3 ffaf 	bl	8007eb0 <LCD_X_DisplayDriver>
 8013f52:	b003      	add	sp, #12
 8013f54:	f85d fb04 	ldr.w	pc, [sp], #4

08013f58 <_SetChromaMode>:
 8013f58:	b500      	push	{lr}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	aa02      	add	r2, sp, #8
 8013f5e:	6980      	ldr	r0, [r0, #24]
 8013f60:	f842 1d04 	str.w	r1, [r2, #-4]!
 8013f64:	210c      	movs	r1, #12
 8013f66:	f7f3 ffa3 	bl	8007eb0 <LCD_X_DisplayDriver>
 8013f6a:	b003      	add	sp, #12
 8013f6c:	f85d fb04 	ldr.w	pc, [sp], #4

08013f70 <_SetAlphaMode>:
 8013f70:	b500      	push	{lr}
 8013f72:	b083      	sub	sp, #12
 8013f74:	aa02      	add	r2, sp, #8
 8013f76:	6980      	ldr	r0, [r0, #24]
 8013f78:	f842 1d04 	str.w	r1, [r2, #-4]!
 8013f7c:	210b      	movs	r1, #11
 8013f7e:	f7f3 ff97 	bl	8007eb0 <LCD_X_DisplayDriver>
 8013f82:	b003      	add	sp, #12
 8013f84:	f85d fb04 	ldr.w	pc, [sp], #4

08013f88 <_Off>:
 8013f88:	6980      	ldr	r0, [r0, #24]
 8013f8a:	2106      	movs	r1, #6
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	f7f3 bf8f 	b.w	8007eb0 <LCD_X_DisplayDriver>
 8013f92:	bf00      	nop

08013f94 <_On>:
 8013f94:	6980      	ldr	r0, [r0, #24]
 8013f96:	2105      	movs	r1, #5
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f7f3 bf89 	b.w	8007eb0 <LCD_X_DisplayDriver>
 8013f9e:	bf00      	nop

08013fa0 <_SetOrg>:
 8013fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fa4:	4604      	mov	r4, r0
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	2300      	movs	r3, #0
 8013faa:	6980      	ldr	r0, [r0, #24]
 8013fac:	9300      	str	r3, [sp, #0]
 8013fae:	4688      	mov	r8, r1
 8013fb0:	4691      	mov	r9, r2
 8013fb2:	9301      	str	r3, [sp, #4]
 8013fb4:	68a5      	ldr	r5, [r4, #8]
 8013fb6:	f000 ff1b 	bl	8014df0 <LCD_GetMirrorXEx>
 8013fba:	4606      	mov	r6, r0
 8013fbc:	69a0      	ldr	r0, [r4, #24]
 8013fbe:	f000 ff25 	bl	8014e0c <LCD_GetMirrorYEx>
 8013fc2:	4607      	mov	r7, r0
 8013fc4:	69a0      	ldr	r0, [r4, #24]
 8013fc6:	f000 ff2f 	bl	8014e28 <LCD_GetSwapXYEx>
 8013fca:	0080      	lsls	r0, r0, #2
 8013fcc:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8013fd0:	4330      	orrs	r0, r6
 8013fd2:	2807      	cmp	r0, #7
 8013fd4:	d811      	bhi.n	8013ffa <_SetOrg+0x5a>
 8013fd6:	e8df f000 	tbb	[pc, r0]
 8013fda:	1b18      	.short	0x1b18
 8013fdc:	3f3a2d24 	.word	0x3f3a2d24
 8013fe0:	0448      	.short	0x0448
 8013fe2:	69a8      	ldr	r0, [r5, #24]
 8013fe4:	692a      	ldr	r2, [r5, #16]
 8013fe6:	6969      	ldr	r1, [r5, #20]
 8013fe8:	68eb      	ldr	r3, [r5, #12]
 8013fea:	1a82      	subs	r2, r0, r2
 8013fec:	1acb      	subs	r3, r1, r3
 8013fee:	ebc9 0202 	rsb	r2, r9, r2
 8013ff2:	ebc8 0303 	rsb	r3, r8, r3
 8013ff6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013ffa:	69a0      	ldr	r0, [r4, #24]
 8013ffc:	2103      	movs	r1, #3
 8013ffe:	466a      	mov	r2, sp
 8014000:	f7f3 ff56 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014004:	b003      	add	sp, #12
 8014006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801400a:	e88d 0300 	stmia.w	sp, {r8, r9}
 801400e:	e7f4      	b.n	8013ffa <_SetOrg+0x5a>
 8014010:	696a      	ldr	r2, [r5, #20]
 8014012:	68eb      	ldr	r3, [r5, #12]
 8014014:	f8cd 9004 	str.w	r9, [sp, #4]
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	ebc8 0303 	rsb	r3, r8, r3
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	e7eb      	b.n	8013ffa <_SetOrg+0x5a>
 8014022:	69aa      	ldr	r2, [r5, #24]
 8014024:	692b      	ldr	r3, [r5, #16]
 8014026:	f8cd 8000 	str.w	r8, [sp]
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	ebc9 0303 	rsb	r3, r9, r3
 8014030:	9301      	str	r3, [sp, #4]
 8014032:	e7e2      	b.n	8013ffa <_SetOrg+0x5a>
 8014034:	6968      	ldr	r0, [r5, #20]
 8014036:	68ea      	ldr	r2, [r5, #12]
 8014038:	69a9      	ldr	r1, [r5, #24]
 801403a:	692b      	ldr	r3, [r5, #16]
 801403c:	1a82      	subs	r2, r0, r2
 801403e:	1acb      	subs	r3, r1, r3
 8014040:	ebc8 0202 	rsb	r2, r8, r2
 8014044:	ebc9 0303 	rsb	r3, r9, r3
 8014048:	e88d 000c 	stmia.w	sp, {r2, r3}
 801404c:	e7d5      	b.n	8013ffa <_SetOrg+0x5a>
 801404e:	f8cd 9000 	str.w	r9, [sp]
 8014052:	f8cd 8004 	str.w	r8, [sp, #4]
 8014056:	e7d0      	b.n	8013ffa <_SetOrg+0x5a>
 8014058:	69aa      	ldr	r2, [r5, #24]
 801405a:	692b      	ldr	r3, [r5, #16]
 801405c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	ebc9 0303 	rsb	r3, r9, r3
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	e7c7      	b.n	8013ffa <_SetOrg+0x5a>
 801406a:	696a      	ldr	r2, [r5, #20]
 801406c:	68eb      	ldr	r3, [r5, #12]
 801406e:	f8cd 9000 	str.w	r9, [sp]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	ebc8 0303 	rsb	r3, r8, r3
 8014078:	9301      	str	r3, [sp, #4]
 801407a:	e7be      	b.n	8013ffa <_SetOrg+0x5a>

0801407c <_FillRect>:
 801407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014080:	6887      	ldr	r7, [r0, #8]
 8014082:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8014084:	b083      	sub	sp, #12
 8014086:	4688      	mov	r8, r1
 8014088:	4691      	mov	r9, r2
 801408a:	469c      	mov	ip, r3
 801408c:	b15c      	cbz	r4, 80140a6 <_FillRect+0x2a>
 801408e:	4d4a      	ldr	r5, [pc, #296]	; (80141b8 <_FillRect+0x13c>)
 8014090:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014092:	9600      	str	r6, [sp, #0]
 8014094:	682d      	ldr	r5, [r5, #0]
 8014096:	6980      	ldr	r0, [r0, #24]
 8014098:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801409a:	682d      	ldr	r5, [r5, #0]
 801409c:	9501      	str	r5, [sp, #4]
 801409e:	47a0      	blx	r4
 80140a0:	b003      	add	sp, #12
 80140a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a6:	4b44      	ldr	r3, [pc, #272]	; (80141b8 <_FillRect+0x13c>)
 80140a8:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	ebc1 0c0c 	rsb	ip, r1, ip
 80140b2:	7c1a      	ldrb	r2, [r3, #16]
 80140b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140b6:	07d2      	lsls	r2, r2, #31
 80140b8:	ebc9 0401 	rsb	r4, r9, r1
 80140bc:	f10c 0601 	add.w	r6, ip, #1
 80140c0:	f104 0501 	add.w	r5, r4, #1
 80140c4:	d453      	bmi.n	801416e <_FillRect+0xf2>
 80140c6:	6839      	ldr	r1, [r7, #0]
 80140c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ca:	fb0a 8009 	mla	r0, sl, r9, r8
 80140ce:	2e0f      	cmp	r6, #15
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80140d6:	d935      	bls.n	8014144 <_FillRect+0xc8>
 80140d8:	2d00      	cmp	r5, #0
 80140da:	d06a      	beq.n	80141b2 <_FillRect+0x136>
 80140dc:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80140e0:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80140e4:	f1c9 0b00 	rsb	fp, r9, #0
 80140e8:	fb09 0808 	mla	r8, r9, r8, r0
 80140ec:	462f      	mov	r7, r5
 80140ee:	4643      	mov	r3, r8
 80140f0:	4631      	mov	r1, r6
 80140f2:	3910      	subs	r1, #16
 80140f4:	290f      	cmp	r1, #15
 80140f6:	601a      	str	r2, [r3, #0]
 80140f8:	605a      	str	r2, [r3, #4]
 80140fa:	609a      	str	r2, [r3, #8]
 80140fc:	60da      	str	r2, [r3, #12]
 80140fe:	611a      	str	r2, [r3, #16]
 8014100:	615a      	str	r2, [r3, #20]
 8014102:	619a      	str	r2, [r3, #24]
 8014104:	61da      	str	r2, [r3, #28]
 8014106:	621a      	str	r2, [r3, #32]
 8014108:	625a      	str	r2, [r3, #36]	; 0x24
 801410a:	629a      	str	r2, [r3, #40]	; 0x28
 801410c:	62da      	str	r2, [r3, #44]	; 0x2c
 801410e:	631a      	str	r2, [r3, #48]	; 0x30
 8014110:	635a      	str	r2, [r3, #52]	; 0x34
 8014112:	639a      	str	r2, [r3, #56]	; 0x38
 8014114:	63da      	str	r2, [r3, #60]	; 0x3c
 8014116:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801411a:	d8ea      	bhi.n	80140f2 <_FillRect+0x76>
 801411c:	3f01      	subs	r7, #1
 801411e:	ebc9 0808 	rsb	r8, r9, r8
 8014122:	d1e4      	bne.n	80140ee <_FillRect+0x72>
 8014124:	f1ac 010f 	sub.w	r1, ip, #15
 8014128:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 801412c:	0909      	lsrs	r1, r1, #4
 801412e:	fb0b fb04 	mul.w	fp, fp, r4
 8014132:	3b01      	subs	r3, #1
 8014134:	3101      	adds	r1, #1
 8014136:	fb09 b303 	mla	r3, r9, r3, fp
 801413a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801413e:	4418      	add	r0, r3
 8014140:	f006 060f 	and.w	r6, r6, #15
 8014144:	2e00      	cmp	r6, #0
 8014146:	d0ab      	beq.n	80140a0 <_FillRect+0x24>
 8014148:	2d00      	cmp	r5, #0
 801414a:	d0a9      	beq.n	80140a0 <_FillRect+0x24>
 801414c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8014150:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8014154:	fb0a 0004 	mla	r0, sl, r4, r0
 8014158:	4601      	mov	r1, r0
 801415a:	4633      	mov	r3, r6
 801415c:	3b01      	subs	r3, #1
 801415e:	f841 2b04 	str.w	r2, [r1], #4
 8014162:	d1fb      	bne.n	801415c <_FillRect+0xe0>
 8014164:	3d01      	subs	r5, #1
 8014166:	ebca 0000 	rsb	r0, sl, r0
 801416a:	d1f5      	bne.n	8014158 <_FillRect+0xdc>
 801416c:	e798      	b.n	80140a0 <_FillRect+0x24>
 801416e:	6903      	ldr	r3, [r0, #16]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	4798      	blx	r3
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	2e00      	cmp	r6, #0
 8014178:	d092      	beq.n	80140a0 <_FillRect+0x24>
 801417a:	2d00      	cmp	r5, #0
 801417c:	d090      	beq.n	80140a0 <_FillRect+0x24>
 801417e:	fb03 8309 	mla	r3, r3, r9, r8
 8014182:	fb04 340a 	mla	r4, r4, sl, r3
 8014186:	ebca 7a8a 	rsb	sl, sl, sl, lsl #30
 801418a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801418e:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8014192:	3d01      	subs	r5, #1
 8014194:	4663      	mov	r3, ip
 8014196:	4632      	mov	r2, r6
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	585c      	ldr	r4, [r3, r1]
 801419c:	3a01      	subs	r2, #1
 801419e:	ea84 0400 	eor.w	r4, r4, r0
 80141a2:	505c      	str	r4, [r3, r1]
 80141a4:	f103 0304 	add.w	r3, r3, #4
 80141a8:	d1f6      	bne.n	8014198 <_FillRect+0x11c>
 80141aa:	44c4      	add	ip, r8
 80141ac:	2d00      	cmp	r5, #0
 80141ae:	d1f0      	bne.n	8014192 <_FillRect+0x116>
 80141b0:	e776      	b.n	80140a0 <_FillRect+0x24>
 80141b2:	4628      	mov	r0, r5
 80141b4:	e7c4      	b.n	8014140 <_FillRect+0xc4>
 80141b6:	bf00      	nop
 80141b8:	2000026c 	.word	0x2000026c

080141bc <_DrawHLine>:
 80141bc:	b500      	push	{lr}
 80141be:	b083      	sub	sp, #12
 80141c0:	9200      	str	r2, [sp, #0]
 80141c2:	f7ff ff5b 	bl	801407c <_FillRect>
 80141c6:	b003      	add	sp, #12
 80141c8:	f85d fb04 	ldr.w	pc, [sp], #4

080141cc <_DrawVLine>:
 80141cc:	b500      	push	{lr}
 80141ce:	b083      	sub	sp, #12
 80141d0:	9300      	str	r3, [sp, #0]
 80141d2:	460b      	mov	r3, r1
 80141d4:	f7ff ff52 	bl	801407c <_FillRect>
 80141d8:	b003      	add	sp, #12
 80141da:	f85d fb04 	ldr.w	pc, [sp], #4
 80141de:	bf00      	nop

080141e0 <_DrawBitmap>:
 80141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e4:	b08f      	sub	sp, #60	; 0x3c
 80141e6:	4607      	mov	r7, r0
 80141e8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80141ea:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80141ee:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80141f0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80141f2:	9309      	str	r3, [sp, #36]	; 0x24
 80141f4:	3e01      	subs	r6, #1
 80141f6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80141fa:	2e1f      	cmp	r6, #31
 80141fc:	d82e      	bhi.n	801425c <_DrawBitmap+0x7c>
 80141fe:	e8df f016 	tbh	[pc, r6, lsl #1]
 8014202:	0030      	.short	0x0030
 8014204:	002d00f2 	.word	0x002d00f2
 8014208:	002d008f 	.word	0x002d008f
 801420c:	002d002d 	.word	0x002d002d
 8014210:	002d00dd 	.word	0x002d00dd
 8014214:	002d002d 	.word	0x002d002d
 8014218:	002d002d 	.word	0x002d002d
 801421c:	002d002d 	.word	0x002d002d
 8014220:	002d002d 	.word	0x002d002d
 8014224:	002d002d 	.word	0x002d002d
 8014228:	002d002d 	.word	0x002d002d
 801422c:	002d002d 	.word	0x002d002d
 8014230:	002d002d 	.word	0x002d002d
 8014234:	002d002d 	.word	0x002d002d
 8014238:	002d002d 	.word	0x002d002d
 801423c:	002d002d 	.word	0x002d002d
 8014240:	0020      	.short	0x0020
 8014242:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8014246:	2c00      	cmp	r4, #0
 8014248:	f000 8263 	beq.w	8014712 <_DrawBitmap+0x532>
 801424c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014250:	69b8      	ldr	r0, [r7, #24]
 8014252:	9602      	str	r6, [sp, #8]
 8014254:	e88d 0208 	stmia.w	sp, {r3, r9}
 8014258:	462b      	mov	r3, r5
 801425a:	47a0      	blx	r4
 801425c:	b00f      	add	sp, #60	; 0x3c
 801425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014262:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
 8014266:	b136      	cbz	r6, 8014276 <_DrawBitmap+0x96>
 8014268:	4bbc      	ldr	r3, [pc, #752]	; (801455c <_DrawBitmap+0x37c>)
 801426a:	930a      	str	r3, [sp, #40]	; 0x28
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	7c1b      	ldrb	r3, [r3, #16]
 8014270:	07db      	lsls	r3, r3, #31
 8014272:	f140 8271 	bpl.w	8014758 <_DrawBitmap+0x578>
 8014276:	f1b9 0f00 	cmp.w	r9, #0
 801427a:	ddef      	ble.n	801425c <_DrawBitmap+0x7c>
 801427c:	4eb7      	ldr	r6, [pc, #732]	; (801455c <_DrawBitmap+0x37c>)
 801427e:	960a      	str	r6, [sp, #40]	; 0x28
 8014280:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014282:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8014560 <_DrawBitmap+0x380>
 8014286:	9408      	str	r4, [sp, #32]
 8014288:	4491      	add	r9, r2
 801428a:	440e      	add	r6, r1
 801428c:	4690      	mov	r8, r2
 801428e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014292:	960b      	str	r6, [sp, #44]	; 0x2c
 8014294:	4662      	mov	r2, ip
 8014296:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014298:	f8d4 9000 	ldr.w	r9, [r4]
 801429c:	680b      	ldr	r3, [r1, #0]
 801429e:	6866      	ldr	r6, [r4, #4]
 80142a0:	7c1b      	ldrb	r3, [r3, #16]
 80142a2:	f003 0303 	and.w	r3, r3, #3
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	f000 820e 	beq.w	80146c8 <_DrawBitmap+0x4e8>
 80142ac:	2b03      	cmp	r3, #3
 80142ae:	f000 81e4 	beq.w	801467a <_DrawBitmap+0x49a>
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	f000 81e1 	beq.w	801467a <_DrawBitmap+0x49a>
 80142b8:	782b      	ldrb	r3, [r5, #0]
 80142ba:	69d0      	ldr	r0, [r2, #28]
 80142bc:	f81b 1003 	ldrb.w	r1, [fp, r3]
 80142c0:	6813      	ldr	r3, [r2, #0]
 80142c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80142c6:	fb00 2008 	mla	r0, r0, r8, r2
 80142ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80142ce:	4121      	asrs	r1, r4
 80142d0:	f1c4 0308 	rsb	r3, r4, #8
 80142d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142d6:	46ac      	mov	ip, r5
 80142d8:	e005      	b.n	80142e6 <_DrawBitmap+0x106>
 80142da:	3a01      	subs	r2, #1
 80142dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80142e0:	f840 4b04 	str.w	r4, [r0], #4
 80142e4:	d012      	beq.n	801430c <_DrawBitmap+0x12c>
 80142e6:	f011 0f01 	tst.w	r1, #1
 80142ea:	bf0c      	ite	eq
 80142ec:	464c      	moveq	r4, r9
 80142ee:	4634      	movne	r4, r6
 80142f0:	3b01      	subs	r3, #1
 80142f2:	d1f2      	bne.n	80142da <_DrawBitmap+0xfa>
 80142f4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80142f8:	f840 4b04 	str.w	r4, [r0], #4
 80142fc:	3a01      	subs	r2, #1
 80142fe:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8014302:	f10c 0c01 	add.w	ip, ip, #1
 8014306:	f04f 0308 	mov.w	r3, #8
 801430a:	d1ec      	bne.n	80142e6 <_DrawBitmap+0x106>
 801430c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801430e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014310:	f108 0801 	add.w	r8, r8, #1
 8014314:	4588      	cmp	r8, r1
 8014316:	4435      	add	r5, r6
 8014318:	d0a0      	beq.n	801425c <_DrawBitmap+0x7c>
 801431a:	68ba      	ldr	r2, [r7, #8]
 801431c:	9c08      	ldr	r4, [sp, #32]
 801431e:	e7ba      	b.n	8014296 <_DrawBitmap+0xb6>
 8014320:	f1b9 0f00 	cmp.w	r9, #0
 8014324:	dd9a      	ble.n	801425c <_DrawBitmap+0x7c>
 8014326:	4b8d      	ldr	r3, [pc, #564]	; (801455c <_DrawBitmap+0x37c>)
 8014328:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	9308      	str	r3, [sp, #32]
 8014330:	4488      	add	r8, r1
 8014332:	4491      	add	r9, r2
 8014334:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014338:	27f0      	movs	r7, #240	; 0xf0
 801433a:	b3bc      	cbz	r4, 80143ac <_DrawBitmap+0x1cc>
 801433c:	9e08      	ldr	r6, [sp, #32]
 801433e:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8014342:	7c30      	ldrb	r0, [r6, #16]
 8014344:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8014348:	f8dc 3000 	ldr.w	r3, [ip]
 801434c:	782e      	ldrb	r6, [r5, #0]
 801434e:	fb01 8a02 	mla	sl, r1, r2, r8
 8014352:	f010 0003 	ands.w	r0, r0, #3
 8014356:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 801435a:	f000 80db 	beq.w	8014514 <_DrawBitmap+0x334>
 801435e:	2802      	cmp	r0, #2
 8014360:	d124      	bne.n	80143ac <_DrawBitmap+0x1cc>
 8014362:	f10a 0a04 	add.w	sl, sl, #4
 8014366:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801436a:	46ab      	mov	fp, r5
 801436c:	e001      	b.n	8014372 <_DrawBitmap+0x192>
 801436e:	3801      	subs	r0, #1
 8014370:	d01c      	beq.n	80143ac <_DrawBitmap+0x1cc>
 8014372:	f1c3 0101 	rsb	r1, r3, #1
 8014376:	0089      	lsls	r1, r1, #2
 8014378:	f1c1 0804 	rsb	r8, r1, #4
 801437c:	fa47 f808 	asr.w	r8, r7, r8
 8014380:	ea08 0806 	and.w	r8, r8, r6
 8014384:	fa38 f101 	lsrs.w	r1, r8, r1
 8014388:	bf1c      	itt	ne
 801438a:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 801438e:	f84a 1c04 	strne.w	r1, [sl, #-4]
 8014392:	3301      	adds	r3, #1
 8014394:	2b02      	cmp	r3, #2
 8014396:	f10a 0a04 	add.w	sl, sl, #4
 801439a:	d1e8      	bne.n	801436e <_DrawBitmap+0x18e>
 801439c:	3801      	subs	r0, #1
 801439e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80143a2:	f04f 0300 	mov.w	r3, #0
 80143a6:	f10b 0b01 	add.w	fp, fp, #1
 80143aa:	d1e2      	bne.n	8014372 <_DrawBitmap+0x192>
 80143ac:	3201      	adds	r2, #1
 80143ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80143b0:	454a      	cmp	r2, r9
 80143b2:	4435      	add	r5, r6
 80143b4:	d1c1      	bne.n	801433a <_DrawBitmap+0x15a>
 80143b6:	b00f      	add	sp, #60	; 0x3c
 80143b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143bc:	f8dc 603c 	ldr.w	r6, [ip, #60]	; 0x3c
 80143c0:	2e00      	cmp	r6, #0
 80143c2:	d05f      	beq.n	8014484 <_DrawBitmap+0x2a4>
 80143c4:	4b65      	ldr	r3, [pc, #404]	; (801455c <_DrawBitmap+0x37c>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	7c1b      	ldrb	r3, [r3, #16]
 80143ca:	079b      	lsls	r3, r3, #30
 80143cc:	d45a      	bmi.n	8014484 <_DrawBitmap+0x2a4>
 80143ce:	2c00      	cmp	r4, #0
 80143d0:	d058      	beq.n	8014484 <_DrawBitmap+0x2a4>
 80143d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143d4:	69b8      	ldr	r0, [r7, #24]
 80143d6:	9403      	str	r4, [sp, #12]
 80143d8:	e88d 0208 	stmia.w	sp, {r3, r9}
 80143dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80143de:	9302      	str	r3, [sp, #8]
 80143e0:	462b      	mov	r3, r5
 80143e2:	47b0      	blx	r6
 80143e4:	e73a      	b.n	801425c <_DrawBitmap+0x7c>
 80143e6:	f1b9 0f00 	cmp.w	r9, #0
 80143ea:	f77f af37 	ble.w	801425c <_DrawBitmap+0x7c>
 80143ee:	4b5b      	ldr	r3, [pc, #364]	; (801455c <_DrawBitmap+0x37c>)
 80143f0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	9308      	str	r3, [sp, #32]
 80143f8:	4488      	add	r8, r1
 80143fa:	4491      	add	r9, r2
 80143fc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014400:	27c0      	movs	r7, #192	; 0xc0
 8014402:	b3bc      	cbz	r4, 8014474 <_DrawBitmap+0x294>
 8014404:	9e08      	ldr	r6, [sp, #32]
 8014406:	f8dc 101c 	ldr.w	r1, [ip, #28]
 801440a:	7c30      	ldrb	r0, [r6, #16]
 801440c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8014410:	f8dc 3000 	ldr.w	r3, [ip]
 8014414:	782e      	ldrb	r6, [r5, #0]
 8014416:	fb01 8a02 	mla	sl, r1, r2, r8
 801441a:	f010 0003 	ands.w	r0, r0, #3
 801441e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8014422:	f000 8096 	beq.w	8014552 <_DrawBitmap+0x372>
 8014426:	2802      	cmp	r0, #2
 8014428:	d124      	bne.n	8014474 <_DrawBitmap+0x294>
 801442a:	f10a 0a04 	add.w	sl, sl, #4
 801442e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014432:	46ab      	mov	fp, r5
 8014434:	e001      	b.n	801443a <_DrawBitmap+0x25a>
 8014436:	3801      	subs	r0, #1
 8014438:	d01c      	beq.n	8014474 <_DrawBitmap+0x294>
 801443a:	f1c3 0103 	rsb	r1, r3, #3
 801443e:	0049      	lsls	r1, r1, #1
 8014440:	f1c1 0806 	rsb	r8, r1, #6
 8014444:	fa47 f808 	asr.w	r8, r7, r8
 8014448:	ea08 0806 	and.w	r8, r8, r6
 801444c:	fa38 f101 	lsrs.w	r1, r8, r1
 8014450:	bf1c      	itt	ne
 8014452:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 8014456:	f84a 1c04 	strne.w	r1, [sl, #-4]
 801445a:	3301      	adds	r3, #1
 801445c:	2b04      	cmp	r3, #4
 801445e:	f10a 0a04 	add.w	sl, sl, #4
 8014462:	d1e8      	bne.n	8014436 <_DrawBitmap+0x256>
 8014464:	3801      	subs	r0, #1
 8014466:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801446a:	f04f 0300 	mov.w	r3, #0
 801446e:	f10b 0b01 	add.w	fp, fp, #1
 8014472:	d1e2      	bne.n	801443a <_DrawBitmap+0x25a>
 8014474:	3201      	adds	r2, #1
 8014476:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014478:	454a      	cmp	r2, r9
 801447a:	4435      	add	r5, r6
 801447c:	d1c1      	bne.n	8014402 <_DrawBitmap+0x222>
 801447e:	b00f      	add	sp, #60	; 0x3c
 8014480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014484:	f1b9 0f00 	cmp.w	r9, #0
 8014488:	f77f aee8 	ble.w	801425c <_DrawBitmap+0x7c>
 801448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801448e:	4f33      	ldr	r7, [pc, #204]	; (801455c <_DrawBitmap+0x37c>)
 8014490:	f1a3 0608 	sub.w	r6, r3, #8
 8014494:	08f3      	lsrs	r3, r6, #3
 8014496:	1c58      	adds	r0, r3, #1
 8014498:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
 801449c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80144a0:	683f      	ldr	r7, [r7, #0]
 80144a2:	960c      	str	r6, [sp, #48]	; 0x30
 80144a4:	f108 0808 	add.w	r8, r8, #8
 80144a8:	00c6      	lsls	r6, r0, #3
 80144aa:	0140      	lsls	r0, r0, #5
 80144ac:	9708      	str	r7, [sp, #32]
 80144ae:	eb09 0b02 	add.w	fp, r9, r2
 80144b2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80144b6:	960b      	str	r6, [sp, #44]	; 0x2c
 80144b8:	900a      	str	r0, [sp, #40]	; 0x28
 80144ba:	468a      	mov	sl, r1
 80144bc:	b314      	cbz	r4, 8014504 <_DrawBitmap+0x324>
 80144be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80144c2:	f8dc 701c 	ldr.w	r7, [ip, #28]
 80144c6:	f898 1010 	ldrb.w	r1, [r8, #16]
 80144ca:	f8dc 3000 	ldr.w	r3, [ip]
 80144ce:	fb07 a702 	mla	r7, r7, r2, sl
 80144d2:	f011 0103 	ands.w	r1, r1, #3
 80144d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80144da:	d05d      	beq.n	8014598 <_DrawBitmap+0x3b8>
 80144dc:	2902      	cmp	r1, #2
 80144de:	d111      	bne.n	8014504 <_DrawBitmap+0x324>
 80144e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144e2:	2900      	cmp	r1, #0
 80144e4:	dd0e      	ble.n	8014504 <_DrawBitmap+0x324>
 80144e6:	4608      	mov	r0, r1
 80144e8:	3704      	adds	r7, #4
 80144ea:	462b      	mov	r3, r5
 80144ec:	4428      	add	r0, r5
 80144ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80144f2:	b119      	cbz	r1, 80144fc <_DrawBitmap+0x31c>
 80144f4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80144f8:	f847 1c04 	str.w	r1, [r7, #-4]
 80144fc:	4298      	cmp	r0, r3
 80144fe:	f107 0704 	add.w	r7, r7, #4
 8014502:	d1f4      	bne.n	80144ee <_DrawBitmap+0x30e>
 8014504:	3201      	adds	r2, #1
 8014506:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014508:	455a      	cmp	r2, fp
 801450a:	4435      	add	r5, r6
 801450c:	d1d6      	bne.n	80144bc <_DrawBitmap+0x2dc>
 801450e:	b00f      	add	sp, #60	; 0x3c
 8014510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014514:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014518:	46ab      	mov	fp, r5
 801451a:	e002      	b.n	8014522 <_DrawBitmap+0x342>
 801451c:	3801      	subs	r0, #1
 801451e:	f43f af45 	beq.w	80143ac <_DrawBitmap+0x1cc>
 8014522:	f1c3 0101 	rsb	r1, r3, #1
 8014526:	0089      	lsls	r1, r1, #2
 8014528:	f1c1 0804 	rsb	r8, r1, #4
 801452c:	fa47 f808 	asr.w	r8, r7, r8
 8014530:	ea08 0806 	and.w	r8, r8, r6
 8014534:	fa28 f101 	lsr.w	r1, r8, r1
 8014538:	3301      	adds	r3, #1
 801453a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 801453e:	f84a 1b04 	str.w	r1, [sl], #4
 8014542:	2b02      	cmp	r3, #2
 8014544:	d1ea      	bne.n	801451c <_DrawBitmap+0x33c>
 8014546:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801454a:	2300      	movs	r3, #0
 801454c:	f10b 0b01 	add.w	fp, fp, #1
 8014550:	e7e4      	b.n	801451c <_DrawBitmap+0x33c>
 8014552:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014556:	46ab      	mov	fp, r5
 8014558:	e006      	b.n	8014568 <_DrawBitmap+0x388>
 801455a:	bf00      	nop
 801455c:	2000026c 	.word	0x2000026c
 8014560:	080214e8 	.word	0x080214e8
 8014564:	3801      	subs	r0, #1
 8014566:	d085      	beq.n	8014474 <_DrawBitmap+0x294>
 8014568:	f1c3 0103 	rsb	r1, r3, #3
 801456c:	0049      	lsls	r1, r1, #1
 801456e:	f1c1 0806 	rsb	r8, r1, #6
 8014572:	fa47 f808 	asr.w	r8, r7, r8
 8014576:	ea08 0806 	and.w	r8, r8, r6
 801457a:	fa28 f101 	lsr.w	r1, r8, r1
 801457e:	3301      	adds	r3, #1
 8014580:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8014584:	f84a 1b04 	str.w	r1, [sl], #4
 8014588:	2b04      	cmp	r3, #4
 801458a:	d1eb      	bne.n	8014564 <_DrawBitmap+0x384>
 801458c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8014590:	2300      	movs	r3, #0
 8014592:	f10b 0b01 	add.w	fp, fp, #1
 8014596:	e7e5      	b.n	8014564 <_DrawBitmap+0x384>
 8014598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801459a:	2b07      	cmp	r3, #7
 801459c:	f340 80d9 	ble.w	8014752 <_DrawBitmap+0x572>
 80145a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80145a2:	462b      	mov	r3, r5
 80145a4:	442e      	add	r6, r5
 80145a6:	4639      	mov	r1, r7
 80145a8:	7818      	ldrb	r0, [r3, #0]
 80145aa:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145ae:	6008      	str	r0, [r1, #0]
 80145b0:	7858      	ldrb	r0, [r3, #1]
 80145b2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145b6:	6048      	str	r0, [r1, #4]
 80145b8:	7898      	ldrb	r0, [r3, #2]
 80145ba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145be:	6088      	str	r0, [r1, #8]
 80145c0:	78d8      	ldrb	r0, [r3, #3]
 80145c2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145c6:	60c8      	str	r0, [r1, #12]
 80145c8:	7918      	ldrb	r0, [r3, #4]
 80145ca:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145ce:	6108      	str	r0, [r1, #16]
 80145d0:	7958      	ldrb	r0, [r3, #5]
 80145d2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145d6:	6148      	str	r0, [r1, #20]
 80145d8:	7998      	ldrb	r0, [r3, #6]
 80145da:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145de:	6188      	str	r0, [r1, #24]
 80145e0:	79d8      	ldrb	r0, [r3, #7]
 80145e2:	3308      	adds	r3, #8
 80145e4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80145e8:	61c8      	str	r0, [r1, #28]
 80145ea:	42b3      	cmp	r3, r6
 80145ec:	f101 0120 	add.w	r1, r1, #32
 80145f0:	d1da      	bne.n	80145a8 <_DrawBitmap+0x3c8>
 80145f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80145f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80145f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145fa:	4437      	add	r7, r6
 80145fc:	44a9      	add	r9, r5
 80145fe:	2903      	cmp	r1, #3
 8014600:	dd28      	ble.n	8014654 <_DrawBitmap+0x474>
 8014602:	460e      	mov	r6, r1
 8014604:	4638      	mov	r0, r7
 8014606:	464b      	mov	r3, r9
 8014608:	9207      	str	r2, [sp, #28]
 801460a:	f893 8000 	ldrb.w	r8, [r3]
 801460e:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8014612:	6002      	str	r2, [r0, #0]
 8014614:	f893 8001 	ldrb.w	r8, [r3, #1]
 8014618:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 801461c:	6042      	str	r2, [r0, #4]
 801461e:	f893 8002 	ldrb.w	r8, [r3, #2]
 8014622:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8014626:	6082      	str	r2, [r0, #8]
 8014628:	f893 8003 	ldrb.w	r8, [r3, #3]
 801462c:	3e04      	subs	r6, #4
 801462e:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8014632:	60c2      	str	r2, [r0, #12]
 8014634:	2e03      	cmp	r6, #3
 8014636:	f103 0304 	add.w	r3, r3, #4
 801463a:	f100 0010 	add.w	r0, r0, #16
 801463e:	dce4      	bgt.n	801460a <_DrawBitmap+0x42a>
 8014640:	3904      	subs	r1, #4
 8014642:	0888      	lsrs	r0, r1, #2
 8014644:	1c43      	adds	r3, r0, #1
 8014646:	9a07      	ldr	r2, [sp, #28]
 8014648:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
 801464c:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8014650:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 8014654:	2900      	cmp	r1, #0
 8014656:	f43f af55 	beq.w	8014504 <_DrawBitmap+0x324>
 801465a:	4449      	add	r1, r9
 801465c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014660:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014664:	f847 3b04 	str.w	r3, [r7], #4
 8014668:	4589      	cmp	r9, r1
 801466a:	d1f7      	bne.n	801465c <_DrawBitmap+0x47c>
 801466c:	3201      	adds	r2, #1
 801466e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014670:	455a      	cmp	r2, fp
 8014672:	4435      	add	r5, r6
 8014674:	f47f af22 	bne.w	80144bc <_DrawBitmap+0x2dc>
 8014678:	e749      	b.n	801450e <_DrawBitmap+0x32e>
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	4798      	blx	r3
 8014680:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014682:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014686:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014688:	44b1      	add	r9, r6
 801468a:	4629      	mov	r1, r5
 801468c:	4632      	mov	r2, r6
 801468e:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8014692:	780e      	ldrb	r6, [r1, #0]
 8014694:	fa4c f403 	asr.w	r4, ip, r3
 8014698:	4226      	tst	r6, r4
 801469a:	f103 0301 	add.w	r3, r3, #1
 801469e:	d00a      	beq.n	80146b6 <_DrawBitmap+0x4d6>
 80146a0:	68bc      	ldr	r4, [r7, #8]
 80146a2:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 80146a6:	6826      	ldr	r6, [r4, #0]
 80146a8:	fb0a 2a08 	mla	sl, sl, r8, r2
 80146ac:	f856 402a 	ldr.w	r4, [r6, sl, lsl #2]
 80146b0:	4044      	eors	r4, r0
 80146b2:	f846 402a 	str.w	r4, [r6, sl, lsl #2]
 80146b6:	2b08      	cmp	r3, #8
 80146b8:	f102 0201 	add.w	r2, r2, #1
 80146bc:	bf04      	itt	eq
 80146be:	3101      	addeq	r1, #1
 80146c0:	2300      	moveq	r3, #0
 80146c2:	454a      	cmp	r2, r9
 80146c4:	d1e5      	bne.n	8014692 <_DrawBitmap+0x4b2>
 80146c6:	e621      	b.n	801430c <_DrawBitmap+0x12c>
 80146c8:	6813      	ldr	r3, [r2, #0]
 80146ca:	69d0      	ldr	r0, [r2, #28]
 80146cc:	7829      	ldrb	r1, [r5, #0]
 80146ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146d0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80146d2:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80146d6:	fb00 2008 	mla	r0, r0, r8, r2
 80146da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80146de:	4121      	asrs	r1, r4
 80146e0:	f1c4 0308 	rsb	r3, r4, #8
 80146e4:	3004      	adds	r0, #4
 80146e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146e8:	462c      	mov	r4, r5
 80146ea:	e005      	b.n	80146f8 <_DrawBitmap+0x518>
 80146ec:	0849      	lsrs	r1, r1, #1
 80146ee:	3a01      	subs	r2, #1
 80146f0:	f100 0004 	add.w	r0, r0, #4
 80146f4:	f43f ae0a 	beq.w	801430c <_DrawBitmap+0x12c>
 80146f8:	f011 0f01 	tst.w	r1, #1
 80146fc:	bf18      	it	ne
 80146fe:	f840 6c04 	strne.w	r6, [r0, #-4]
 8014702:	3b01      	subs	r3, #1
 8014704:	d1f2      	bne.n	80146ec <_DrawBitmap+0x50c>
 8014706:	7863      	ldrb	r3, [r4, #1]
 8014708:	3401      	adds	r4, #1
 801470a:	f81b 1003 	ldrb.w	r1, [fp, r3]
 801470e:	2308      	movs	r3, #8
 8014710:	e7ed      	b.n	80146ee <_DrawBitmap+0x50e>
 8014712:	f1b9 0f00 	cmp.w	r9, #0
 8014716:	f77f ada1 	ble.w	801425c <_DrawBitmap+0x7c>
 801471a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801471e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014722:	4491      	add	r9, r2
 8014724:	4663      	mov	r3, ip
 8014726:	69d8      	ldr	r0, [r3, #28]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	fb00 1c02 	mla	ip, r0, r2, r1
 801472e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8014732:	1f28      	subs	r0, r5, #4
 8014734:	4643      	mov	r3, r8
 8014736:	f850 6f04 	ldr.w	r6, [r0, #4]!
 801473a:	1b44      	subs	r4, r0, r5
 801473c:	3b01      	subs	r3, #1
 801473e:	f844 600c 	str.w	r6, [r4, ip]
 8014742:	d1f8      	bne.n	8014736 <_DrawBitmap+0x556>
 8014744:	3201      	adds	r2, #1
 8014746:	454a      	cmp	r2, r9
 8014748:	4455      	add	r5, sl
 801474a:	f43f ad87 	beq.w	801425c <_DrawBitmap+0x7c>
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	e7e9      	b.n	8014726 <_DrawBitmap+0x546>
 8014752:	4619      	mov	r1, r3
 8014754:	46a9      	mov	r9, r5
 8014756:	e752      	b.n	80145fe <_DrawBitmap+0x41e>
 8014758:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801475a:	69b8      	ldr	r0, [r7, #24]
 801475c:	9300      	str	r3, [sp, #0]
 801475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014760:	9301      	str	r3, [sp, #4]
 8014762:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014764:	9303      	str	r3, [sp, #12]
 8014766:	f8cd 9008 	str.w	r9, [sp, #8]
 801476a:	9404      	str	r4, [sp, #16]
 801476c:	462b      	mov	r3, r5
 801476e:	47b0      	blx	r6
 8014770:	e574      	b.n	801425c <_DrawBitmap+0x7c>
 8014772:	bf00      	nop

08014774 <_GetPos>:
 8014774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014776:	6884      	ldr	r4, [r0, #8]
 8014778:	4605      	mov	r5, r0
 801477a:	460f      	mov	r7, r1
 801477c:	4616      	mov	r6, r2
 801477e:	b124      	cbz	r4, 801478a <_GetPos+0x16>
 8014780:	6a23      	ldr	r3, [r4, #32]
 8014782:	603b      	str	r3, [r7, #0]
 8014784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014786:	6033      	str	r3, [r6, #0]
 8014788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801478a:	204c      	movs	r0, #76	; 0x4c
 801478c:	f004 fbb0 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014790:	4621      	mov	r1, r4
 8014792:	60a8      	str	r0, [r5, #8]
 8014794:	224c      	movs	r2, #76	; 0x4c
 8014796:	f001 f9e5 	bl	8015b64 <GUI__memset>
 801479a:	68ac      	ldr	r4, [r5, #8]
 801479c:	2c00      	cmp	r4, #0
 801479e:	d1ef      	bne.n	8014780 <_GetPos+0xc>
 80147a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147a2:	bf00      	nop

080147a4 <_SetDevFunc>:
 80147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a6:	6884      	ldr	r4, [r0, #8]
 80147a8:	4605      	mov	r5, r0
 80147aa:	460e      	mov	r6, r1
 80147ac:	4617      	mov	r7, r2
 80147ae:	b32c      	cbz	r4, 80147fc <_SetDevFunc+0x58>
 80147b0:	1ef1      	subs	r1, r6, #3
 80147b2:	2925      	cmp	r1, #37	; 0x25
 80147b4:	d815      	bhi.n	80147e2 <_SetDevFunc+0x3e>
 80147b6:	e8df f001 	tbb	[pc, r1]
 80147ba:	1415      	.short	0x1415
 80147bc:	14141414 	.word	0x14141414
 80147c0:	14141414 	.word	0x14141414
 80147c4:	14141414 	.word	0x14141414
 80147c8:	14141414 	.word	0x14141414
 80147cc:	14141414 	.word	0x14141414
 80147d0:	14141417 	.word	0x14141417
 80147d4:	19141414 	.word	0x19141414
 80147d8:	141d141b 	.word	0x141d141b
 80147dc:	1314141f 	.word	0x1314141f
 80147e0:	64a7      	str	r7, [r4, #72]	; 0x48
 80147e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e4:	6467      	str	r7, [r4, #68]	; 0x44
 80147e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e8:	6327      	str	r7, [r4, #48]	; 0x30
 80147ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ec:	63a7      	str	r7, [r4, #56]	; 0x38
 80147ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f0:	6367      	str	r7, [r4, #52]	; 0x34
 80147f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f4:	6427      	str	r7, [r4, #64]	; 0x40
 80147f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f8:	63e7      	str	r7, [r4, #60]	; 0x3c
 80147fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147fc:	204c      	movs	r0, #76	; 0x4c
 80147fe:	f004 fb77 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014802:	4621      	mov	r1, r4
 8014804:	60a8      	str	r0, [r5, #8]
 8014806:	224c      	movs	r2, #76	; 0x4c
 8014808:	f001 f9ac 	bl	8015b64 <GUI__memset>
 801480c:	68ac      	ldr	r4, [r5, #8]
 801480e:	2c00      	cmp	r4, #0
 8014810:	d1ce      	bne.n	80147b0 <_SetDevFunc+0xc>
 8014812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014814 <_Init>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	6884      	ldr	r4, [r0, #8]
 8014818:	4605      	mov	r5, r0
 801481a:	b14c      	cbz	r4, 8014830 <_Init+0x1c>
 801481c:	69a8      	ldr	r0, [r5, #24]
 801481e:	2101      	movs	r1, #1
 8014820:	2200      	movs	r2, #0
 8014822:	f7f3 fb45 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014826:	2c00      	cmp	r4, #0
 8014828:	bf08      	it	eq
 801482a:	f040 0001 	orreq.w	r0, r0, #1
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	204c      	movs	r0, #76	; 0x4c
 8014832:	f004 fb5d 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014836:	4621      	mov	r1, r4
 8014838:	60a8      	str	r0, [r5, #8]
 801483a:	224c      	movs	r2, #76	; 0x4c
 801483c:	f001 f992 	bl	8015b64 <GUI__memset>
 8014840:	68ac      	ldr	r4, [r5, #8]
 8014842:	e7eb      	b.n	801481c <_Init+0x8>

08014844 <_ShowBuffer>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	6885      	ldr	r5, [r0, #8]
 8014848:	b082      	sub	sp, #8
 801484a:	2300      	movs	r3, #0
 801484c:	4604      	mov	r4, r0
 801484e:	9301      	str	r3, [sp, #4]
 8014850:	460e      	mov	r6, r1
 8014852:	b145      	cbz	r5, 8014866 <_ShowBuffer+0x22>
 8014854:	aa02      	add	r2, sp, #8
 8014856:	69a0      	ldr	r0, [r4, #24]
 8014858:	f842 6d04 	str.w	r6, [r2, #-4]!
 801485c:	210e      	movs	r1, #14
 801485e:	f7f3 fb27 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014862:	b002      	add	sp, #8
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	204c      	movs	r0, #76	; 0x4c
 8014868:	f004 fb42 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 801486c:	4629      	mov	r1, r5
 801486e:	60a0      	str	r0, [r4, #8]
 8014870:	224c      	movs	r2, #76	; 0x4c
 8014872:	f001 f977 	bl	8015b64 <GUI__memset>
 8014876:	68a3      	ldr	r3, [r4, #8]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1eb      	bne.n	8014854 <_ShowBuffer+0x10>
 801487c:	b002      	add	sp, #8
 801487e:	bd70      	pop	{r4, r5, r6, pc}

08014880 <_SetVSize>:
 8014880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014882:	6884      	ldr	r4, [r0, #8]
 8014884:	4605      	mov	r5, r0
 8014886:	460e      	mov	r6, r1
 8014888:	4617      	mov	r7, r2
 801488a:	b14c      	cbz	r4, 80148a0 <_SetVSize+0x20>
 801488c:	69a8      	ldr	r0, [r5, #24]
 801488e:	f000 facb 	bl	8014e28 <LCD_GetSwapXYEx>
 8014892:	6166      	str	r6, [r4, #20]
 8014894:	61a7      	str	r7, [r4, #24]
 8014896:	b908      	cbnz	r0, 801489c <_SetVSize+0x1c>
 8014898:	61e6      	str	r6, [r4, #28]
 801489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801489c:	61e7      	str	r7, [r4, #28]
 801489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148a0:	204c      	movs	r0, #76	; 0x4c
 80148a2:	f004 fb25 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 80148a6:	4621      	mov	r1, r4
 80148a8:	60a8      	str	r0, [r5, #8]
 80148aa:	224c      	movs	r2, #76	; 0x4c
 80148ac:	f001 f95a 	bl	8015b64 <GUI__memset>
 80148b0:	68ac      	ldr	r4, [r5, #8]
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	d1ea      	bne.n	801488c <_SetVSize+0xc>
 80148b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148b8 <_SetVis>:
 80148b8:	b570      	push	{r4, r5, r6, lr}
 80148ba:	6884      	ldr	r4, [r0, #8]
 80148bc:	b082      	sub	sp, #8
 80148be:	2300      	movs	r3, #0
 80148c0:	4605      	mov	r5, r0
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	460e      	mov	r6, r1
 80148c6:	b14c      	cbz	r4, 80148dc <_SetVis+0x24>
 80148c8:	aa02      	add	r2, sp, #8
 80148ca:	62e6      	str	r6, [r4, #44]	; 0x2c
 80148cc:	f842 6d04 	str.w	r6, [r2, #-4]!
 80148d0:	69a8      	ldr	r0, [r5, #24]
 80148d2:	2109      	movs	r1, #9
 80148d4:	f7f3 faec 	bl	8007eb0 <LCD_X_DisplayDriver>
 80148d8:	b002      	add	sp, #8
 80148da:	bd70      	pop	{r4, r5, r6, pc}
 80148dc:	204c      	movs	r0, #76	; 0x4c
 80148de:	f004 fb07 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 80148e2:	4621      	mov	r1, r4
 80148e4:	60a8      	str	r0, [r5, #8]
 80148e6:	224c      	movs	r2, #76	; 0x4c
 80148e8:	f001 f93c 	bl	8015b64 <GUI__memset>
 80148ec:	68ac      	ldr	r4, [r5, #8]
 80148ee:	2c00      	cmp	r4, #0
 80148f0:	d1ea      	bne.n	80148c8 <_SetVis+0x10>
 80148f2:	b002      	add	sp, #8
 80148f4:	bd70      	pop	{r4, r5, r6, pc}
 80148f6:	bf00      	nop

080148f8 <_SetAlpha>:
 80148f8:	b570      	push	{r4, r5, r6, lr}
 80148fa:	6884      	ldr	r4, [r0, #8]
 80148fc:	b082      	sub	sp, #8
 80148fe:	2300      	movs	r3, #0
 8014900:	4605      	mov	r5, r0
 8014902:	9301      	str	r3, [sp, #4]
 8014904:	460e      	mov	r6, r1
 8014906:	b14c      	cbz	r4, 801491c <_SetAlpha+0x24>
 8014908:	aa02      	add	r2, sp, #8
 801490a:	62a6      	str	r6, [r4, #40]	; 0x28
 801490c:	f842 6d04 	str.w	r6, [r2, #-4]!
 8014910:	69a8      	ldr	r0, [r5, #24]
 8014912:	210a      	movs	r1, #10
 8014914:	f7f3 facc 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014918:	b002      	add	sp, #8
 801491a:	bd70      	pop	{r4, r5, r6, pc}
 801491c:	204c      	movs	r0, #76	; 0x4c
 801491e:	f004 fae7 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014922:	4621      	mov	r1, r4
 8014924:	60a8      	str	r0, [r5, #8]
 8014926:	224c      	movs	r2, #76	; 0x4c
 8014928:	f001 f91c 	bl	8015b64 <GUI__memset>
 801492c:	68ac      	ldr	r4, [r5, #8]
 801492e:	2c00      	cmp	r4, #0
 8014930:	d1ea      	bne.n	8014908 <_SetAlpha+0x10>
 8014932:	b002      	add	sp, #8
 8014934:	bd70      	pop	{r4, r5, r6, pc}
 8014936:	bf00      	nop

08014938 <_SetVRAMAddr>:
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	6884      	ldr	r4, [r0, #8]
 801493c:	b082      	sub	sp, #8
 801493e:	2300      	movs	r3, #0
 8014940:	4606      	mov	r6, r0
 8014942:	9301      	str	r3, [sp, #4]
 8014944:	460d      	mov	r5, r1
 8014946:	b154      	cbz	r4, 801495e <_SetVRAMAddr+0x26>
 8014948:	aa02      	add	r2, sp, #8
 801494a:	6025      	str	r5, [r4, #0]
 801494c:	6065      	str	r5, [r4, #4]
 801494e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8014952:	69b0      	ldr	r0, [r6, #24]
 8014954:	2102      	movs	r1, #2
 8014956:	f7f3 faab 	bl	8007eb0 <LCD_X_DisplayDriver>
 801495a:	b002      	add	sp, #8
 801495c:	bd70      	pop	{r4, r5, r6, pc}
 801495e:	204c      	movs	r0, #76	; 0x4c
 8014960:	f004 fac6 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014964:	4621      	mov	r1, r4
 8014966:	60b0      	str	r0, [r6, #8]
 8014968:	224c      	movs	r2, #76	; 0x4c
 801496a:	f001 f8fb 	bl	8015b64 <GUI__memset>
 801496e:	68b4      	ldr	r4, [r6, #8]
 8014970:	2c00      	cmp	r4, #0
 8014972:	d1e9      	bne.n	8014948 <_SetVRAMAddr+0x10>
 8014974:	b002      	add	sp, #8
 8014976:	bd70      	pop	{r4, r5, r6, pc}

08014978 <_SetSize>:
 8014978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801497a:	6884      	ldr	r4, [r0, #8]
 801497c:	b083      	sub	sp, #12
 801497e:	2300      	movs	r3, #0
 8014980:	4605      	mov	r5, r0
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	460f      	mov	r7, r1
 8014986:	4616      	mov	r6, r2
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	b1ac      	cbz	r4, 80149b8 <_SetSize+0x40>
 801498c:	69e3      	ldr	r3, [r4, #28]
 801498e:	b153      	cbz	r3, 80149a6 <_SetSize+0x2e>
 8014990:	60e7      	str	r7, [r4, #12]
 8014992:	6126      	str	r6, [r4, #16]
 8014994:	69a8      	ldr	r0, [r5, #24]
 8014996:	9700      	str	r7, [sp, #0]
 8014998:	2107      	movs	r1, #7
 801499a:	466a      	mov	r2, sp
 801499c:	9601      	str	r6, [sp, #4]
 801499e:	f7f3 fa87 	bl	8007eb0 <LCD_X_DisplayDriver>
 80149a2:	b003      	add	sp, #12
 80149a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a6:	69a8      	ldr	r0, [r5, #24]
 80149a8:	f000 fa3e 	bl	8014e28 <LCD_GetSwapXYEx>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	bf0c      	ite	eq
 80149b0:	4638      	moveq	r0, r7
 80149b2:	4630      	movne	r0, r6
 80149b4:	61e0      	str	r0, [r4, #28]
 80149b6:	e7eb      	b.n	8014990 <_SetSize+0x18>
 80149b8:	204c      	movs	r0, #76	; 0x4c
 80149ba:	f004 fa99 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 80149be:	4621      	mov	r1, r4
 80149c0:	60a8      	str	r0, [r5, #8]
 80149c2:	224c      	movs	r2, #76	; 0x4c
 80149c4:	f001 f8ce 	bl	8015b64 <GUI__memset>
 80149c8:	68ac      	ldr	r4, [r5, #8]
 80149ca:	2c00      	cmp	r4, #0
 80149cc:	d1de      	bne.n	801498c <_SetSize+0x14>
 80149ce:	b003      	add	sp, #12
 80149d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149d2:	bf00      	nop

080149d4 <_CopyBuffer>:
 80149d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d8:	6884      	ldr	r4, [r0, #8]
 80149da:	4605      	mov	r5, r0
 80149dc:	460f      	mov	r7, r1
 80149de:	4616      	mov	r6, r2
 80149e0:	b314      	cbz	r4, 8014a28 <_CopyBuffer+0x54>
 80149e2:	42b7      	cmp	r7, r6
 80149e4:	d017      	beq.n	8014a16 <_CopyBuffer+0x42>
 80149e6:	68eb      	ldr	r3, [r5, #12]
 80149e8:	2108      	movs	r1, #8
 80149ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149ec:	4628      	mov	r0, r5
 80149ee:	4798      	blx	r3
 80149f0:	6922      	ldr	r2, [r4, #16]
 80149f2:	6961      	ldr	r1, [r4, #20]
 80149f4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80149f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149fa:	fb01 fe02 	mul.w	lr, r1, r2
 80149fe:	fb00 f00e 	mul.w	r0, r0, lr
 8014a02:	08c2      	lsrs	r2, r0, #3
 8014a04:	fb06 c802 	mla	r8, r6, r2, ip
 8014a08:	b13b      	cbz	r3, 8014a1a <_CopyBuffer+0x46>
 8014a0a:	69a8      	ldr	r0, [r5, #24]
 8014a0c:	4639      	mov	r1, r7
 8014a0e:	4632      	mov	r2, r6
 8014a10:	4798      	blx	r3
 8014a12:	f8c4 8000 	str.w	r8, [r4]
 8014a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a1a:	4b0a      	ldr	r3, [pc, #40]	; (8014a44 <_CopyBuffer+0x70>)
 8014a1c:	fb07 c102 	mla	r1, r7, r2, ip
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4640      	mov	r0, r8
 8014a24:	4798      	blx	r3
 8014a26:	e7f4      	b.n	8014a12 <_CopyBuffer+0x3e>
 8014a28:	204c      	movs	r0, #76	; 0x4c
 8014a2a:	f004 fa61 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	60a8      	str	r0, [r5, #8]
 8014a32:	224c      	movs	r2, #76	; 0x4c
 8014a34:	f001 f896 	bl	8015b64 <GUI__memset>
 8014a38:	68ac      	ldr	r4, [r5, #8]
 8014a3a:	2c00      	cmp	r4, #0
 8014a3c:	d1d1      	bne.n	80149e2 <_CopyBuffer+0xe>
 8014a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a42:	bf00      	nop
 8014a44:	20000244 	.word	0x20000244

08014a48 <_SetPos>:
 8014a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	6884      	ldr	r4, [r0, #8]
 8014a4e:	b089      	sub	sp, #36	; 0x24
 8014a50:	2300      	movs	r3, #0
 8014a52:	4605      	mov	r5, r0
 8014a54:	9302      	str	r3, [sp, #8]
 8014a56:	460f      	mov	r7, r1
 8014a58:	4616      	mov	r6, r2
 8014a5a:	9303      	str	r3, [sp, #12]
 8014a5c:	9304      	str	r3, [sp, #16]
 8014a5e:	9305      	str	r3, [sp, #20]
 8014a60:	9306      	str	r3, [sp, #24]
 8014a62:	9307      	str	r3, [sp, #28]
 8014a64:	2c00      	cmp	r4, #0
 8014a66:	d05f      	beq.n	8014b28 <_SetPos+0xe0>
 8014a68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014a6a:	b133      	cbz	r3, 8014a7a <_SetPos+0x32>
 8014a6c:	69a8      	ldr	r0, [r5, #24]
 8014a6e:	4639      	mov	r1, r7
 8014a70:	4632      	mov	r2, r6
 8014a72:	4798      	blx	r3
 8014a74:	b009      	add	sp, #36	; 0x24
 8014a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7a:	6227      	str	r7, [r4, #32]
 8014a7c:	6266      	str	r6, [r4, #36]	; 0x24
 8014a7e:	f000 faad 	bl	8014fdc <LCD_GetXSizeDisplay>
 8014a82:	4682      	mov	sl, r0
 8014a84:	f000 fab0 	bl	8014fe8 <LCD_GetYSizeDisplay>
 8014a88:	68eb      	ldr	r3, [r5, #12]
 8014a8a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8014a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a90:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8014a94:	4683      	mov	fp, r0
 8014a96:	2108      	movs	r1, #8
 8014a98:	4628      	mov	r0, r5
 8014a9a:	4798      	blx	r3
 8014a9c:	1dc2      	adds	r2, r0, #7
 8014a9e:	bf48      	it	mi
 8014aa0:	f100 020e 	addmi.w	r2, r0, #14
 8014aa4:	10d2      	asrs	r2, r2, #3
 8014aa6:	2f00      	cmp	r7, #0
 8014aa8:	9206      	str	r2, [sp, #24]
 8014aaa:	db57      	blt.n	8014b5c <_SetPos+0x114>
 8014aac:	eb07 0309 	add.w	r3, r7, r9
 8014ab0:	459a      	cmp	sl, r3
 8014ab2:	9702      	str	r7, [sp, #8]
 8014ab4:	bfb6      	itet	lt
 8014ab6:	ebc7 070a 	rsblt	r7, r7, sl
 8014aba:	f8cd 9010 	strge.w	r9, [sp, #16]
 8014abe:	9704      	strlt	r7, [sp, #16]
 8014ac0:	2e00      	cmp	r6, #0
 8014ac2:	db3f      	blt.n	8014b44 <_SetPos+0xfc>
 8014ac4:	eb06 0308 	add.w	r3, r6, r8
 8014ac8:	459b      	cmp	fp, r3
 8014aca:	bfb8      	it	lt
 8014acc:	ebc6 010b 	rsblt	r1, r6, fp
 8014ad0:	9603      	str	r6, [sp, #12]
 8014ad2:	bfa6      	itte	ge
 8014ad4:	f8cd 8014 	strge.w	r8, [sp, #20]
 8014ad8:	4641      	movge	r1, r8
 8014ada:	9105      	strlt	r1, [sp, #20]
 8014adc:	9b04      	ldr	r3, [sp, #16]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd10      	ble.n	8014b04 <_SetPos+0xbc>
 8014ae2:	2900      	cmp	r1, #0
 8014ae4:	dd0e      	ble.n	8014b04 <_SetPos+0xbc>
 8014ae6:	9b02      	ldr	r3, [sp, #8]
 8014ae8:	459a      	cmp	sl, r3
 8014aea:	dd0b      	ble.n	8014b04 <_SetPos+0xbc>
 8014aec:	45b3      	cmp	fp, r6
 8014aee:	dd09      	ble.n	8014b04 <_SetPos+0xbc>
 8014af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d03c      	beq.n	8014b70 <_SetPos+0x128>
 8014af6:	2108      	movs	r1, #8
 8014af8:	69a8      	ldr	r0, [r5, #24]
 8014afa:	eb0d 0201 	add.w	r2, sp, r1
 8014afe:	f7f3 f9d7 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014b02:	e7b7      	b.n	8014a74 <_SetPos+0x2c>
 8014b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d1b4      	bne.n	8014a74 <_SetPos+0x2c>
 8014b0a:	68ac      	ldr	r4, [r5, #8]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	2c00      	cmp	r4, #0
 8014b12:	d03a      	beq.n	8014b8a <_SetPos+0x142>
 8014b14:	aa08      	add	r2, sp, #32
 8014b16:	2300      	movs	r3, #0
 8014b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b1a:	69a8      	ldr	r0, [r5, #24]
 8014b1c:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8014b20:	2109      	movs	r1, #9
 8014b22:	f7f3 f9c5 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014b26:	e7a5      	b.n	8014a74 <_SetPos+0x2c>
 8014b28:	204c      	movs	r0, #76	; 0x4c
 8014b2a:	f004 f9e1 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014b2e:	4621      	mov	r1, r4
 8014b30:	60a8      	str	r0, [r5, #8]
 8014b32:	224c      	movs	r2, #76	; 0x4c
 8014b34:	f001 f816 	bl	8015b64 <GUI__memset>
 8014b38:	68ac      	ldr	r4, [r5, #8]
 8014b3a:	2c00      	cmp	r4, #0
 8014b3c:	d194      	bne.n	8014a68 <_SetPos+0x20>
 8014b3e:	b009      	add	sp, #36	; 0x24
 8014b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b44:	9b07      	ldr	r3, [sp, #28]
 8014b46:	fb02 f206 	mul.w	r2, r2, r6
 8014b4a:	eb08 0106 	add.w	r1, r8, r6
 8014b4e:	fb09 3312 	mls	r3, r9, r2, r3
 8014b52:	2600      	movs	r6, #0
 8014b54:	9105      	str	r1, [sp, #20]
 8014b56:	9307      	str	r3, [sp, #28]
 8014b58:	9603      	str	r6, [sp, #12]
 8014b5a:	e7bf      	b.n	8014adc <_SetPos+0x94>
 8014b5c:	9b07      	ldr	r3, [sp, #28]
 8014b5e:	eb09 0007 	add.w	r0, r9, r7
 8014b62:	fb02 3317 	mls	r3, r2, r7, r3
 8014b66:	2100      	movs	r1, #0
 8014b68:	9307      	str	r3, [sp, #28]
 8014b6a:	9004      	str	r0, [sp, #16]
 8014b6c:	9102      	str	r1, [sp, #8]
 8014b6e:	e7a7      	b.n	8014ac0 <_SetPos+0x78>
 8014b70:	68ac      	ldr	r4, [r5, #8]
 8014b72:	9301      	str	r3, [sp, #4]
 8014b74:	b1b4      	cbz	r4, 8014ba4 <_SetPos+0x15c>
 8014b76:	aa08      	add	r2, sp, #32
 8014b78:	2301      	movs	r3, #1
 8014b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b7c:	69a8      	ldr	r0, [r5, #24]
 8014b7e:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8014b82:	2109      	movs	r1, #9
 8014b84:	f7f3 f994 	bl	8007eb0 <LCD_X_DisplayDriver>
 8014b88:	e7b5      	b.n	8014af6 <_SetPos+0xae>
 8014b8a:	204c      	movs	r0, #76	; 0x4c
 8014b8c:	f004 f9b0 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014b90:	4621      	mov	r1, r4
 8014b92:	60a8      	str	r0, [r5, #8]
 8014b94:	224c      	movs	r2, #76	; 0x4c
 8014b96:	f000 ffe5 	bl	8015b64 <GUI__memset>
 8014b9a:	68ac      	ldr	r4, [r5, #8]
 8014b9c:	2c00      	cmp	r4, #0
 8014b9e:	f43f af69 	beq.w	8014a74 <_SetPos+0x2c>
 8014ba2:	e7b7      	b.n	8014b14 <_SetPos+0xcc>
 8014ba4:	204c      	movs	r0, #76	; 0x4c
 8014ba6:	f004 f9a3 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8014baa:	4621      	mov	r1, r4
 8014bac:	60a8      	str	r0, [r5, #8]
 8014bae:	224c      	movs	r2, #76	; 0x4c
 8014bb0:	f000 ffd8 	bl	8015b64 <GUI__memset>
 8014bb4:	68ac      	ldr	r4, [r5, #8]
 8014bb6:	2c00      	cmp	r4, #0
 8014bb8:	d09d      	beq.n	8014af6 <_SetPos+0xae>
 8014bba:	e7dc      	b.n	8014b76 <_SetPos+0x12e>

08014bbc <LCD_UpdateColorIndices>:
 8014bbc:	b510      	push	{r4, lr}
 8014bbe:	4c07      	ldr	r4, [pc, #28]	; (8014bdc <LCD_UpdateColorIndices+0x20>)
 8014bc0:	6823      	ldr	r3, [r4, #0]
 8014bc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014bc4:	f000 fe8c 	bl	80158e0 <LCD_Color2Index>
 8014bc8:	f000 feaa 	bl	8015920 <LCD_SetColorIndex>
 8014bcc:	6823      	ldr	r3, [r4, #0]
 8014bce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014bd0:	f000 fe86 	bl	80158e0 <LCD_Color2Index>
 8014bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd8:	f000 beae 	b.w	8015938 <LCD_SetBkColorIndex>
 8014bdc:	2000026c 	.word	0x2000026c

08014be0 <LCD_SetClipRectEx>:
 8014be0:	b530      	push	{r4, r5, lr}
 8014be2:	4c0a      	ldr	r4, [pc, #40]	; (8014c0c <LCD_SetClipRectEx+0x2c>)
 8014be4:	4a0a      	ldr	r2, [pc, #40]	; (8014c10 <LCD_SetClipRectEx+0x30>)
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	7c5b      	ldrb	r3, [r3, #17]
 8014bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bee:	68da      	ldr	r2, [r3, #12]
 8014bf0:	b083      	sub	sp, #12
 8014bf2:	4605      	mov	r5, r0
 8014bf4:	4669      	mov	r1, sp
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014bfa:	4790      	blx	r2
 8014bfc:	6820      	ldr	r0, [r4, #0]
 8014bfe:	4629      	mov	r1, r5
 8014c00:	466a      	mov	r2, sp
 8014c02:	3008      	adds	r0, #8
 8014c04:	f000 ff74 	bl	8015af0 <GUI__IntersectRects>
 8014c08:	b003      	add	sp, #12
 8014c0a:	bd30      	pop	{r4, r5, pc}
 8014c0c:	2000026c 	.word	0x2000026c
 8014c10:	2002c040 	.word	0x2002c040

08014c14 <LCD_SetVRAMAddrEx>:
 8014c14:	b510      	push	{r4, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	460c      	mov	r4, r1
 8014c1a:	f002 fc57 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014c1e:	9001      	str	r0, [sp, #4]
 8014c20:	b160      	cbz	r0, 8014c3c <LCD_SetVRAMAddrEx+0x28>
 8014c22:	68c3      	ldr	r3, [r0, #12]
 8014c24:	2109      	movs	r1, #9
 8014c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c28:	a801      	add	r0, sp, #4
 8014c2a:	4798      	blx	r3
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	b128      	cbz	r0, 8014c3c <LCD_SetVRAMAddrEx+0x28>
 8014c30:	9801      	ldr	r0, [sp, #4]
 8014c32:	4621      	mov	r1, r4
 8014c34:	4798      	blx	r3
 8014c36:	2000      	movs	r0, #0
 8014c38:	b002      	add	sp, #8
 8014c3a:	bd10      	pop	{r4, pc}
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	b002      	add	sp, #8
 8014c40:	bd10      	pop	{r4, pc}
 8014c42:	bf00      	nop

08014c44 <LCD_SetVSizeEx>:
 8014c44:	b530      	push	{r4, r5, lr}
 8014c46:	b083      	sub	sp, #12
 8014c48:	460d      	mov	r5, r1
 8014c4a:	4614      	mov	r4, r2
 8014c4c:	f002 fc3e 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014c50:	9001      	str	r0, [sp, #4]
 8014c52:	b168      	cbz	r0, 8014c70 <LCD_SetVSizeEx+0x2c>
 8014c54:	68c3      	ldr	r3, [r0, #12]
 8014c56:	210a      	movs	r1, #10
 8014c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5a:	a801      	add	r0, sp, #4
 8014c5c:	4798      	blx	r3
 8014c5e:	4603      	mov	r3, r0
 8014c60:	b130      	cbz	r0, 8014c70 <LCD_SetVSizeEx+0x2c>
 8014c62:	9801      	ldr	r0, [sp, #4]
 8014c64:	4629      	mov	r1, r5
 8014c66:	4622      	mov	r2, r4
 8014c68:	4798      	blx	r3
 8014c6a:	2000      	movs	r0, #0
 8014c6c:	b003      	add	sp, #12
 8014c6e:	bd30      	pop	{r4, r5, pc}
 8014c70:	2001      	movs	r0, #1
 8014c72:	b003      	add	sp, #12
 8014c74:	bd30      	pop	{r4, r5, pc}
 8014c76:	bf00      	nop

08014c78 <LCD_SetSizeEx>:
 8014c78:	b530      	push	{r4, r5, lr}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	460d      	mov	r5, r1
 8014c7e:	4614      	mov	r4, r2
 8014c80:	f002 fc24 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014c84:	9001      	str	r0, [sp, #4]
 8014c86:	b168      	cbz	r0, 8014ca4 <LCD_SetSizeEx+0x2c>
 8014c88:	68c3      	ldr	r3, [r0, #12]
 8014c8a:	210b      	movs	r1, #11
 8014c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c8e:	a801      	add	r0, sp, #4
 8014c90:	4798      	blx	r3
 8014c92:	4603      	mov	r3, r0
 8014c94:	b130      	cbz	r0, 8014ca4 <LCD_SetSizeEx+0x2c>
 8014c96:	9801      	ldr	r0, [sp, #4]
 8014c98:	4629      	mov	r1, r5
 8014c9a:	4622      	mov	r2, r4
 8014c9c:	4798      	blx	r3
 8014c9e:	2000      	movs	r0, #0
 8014ca0:	b003      	add	sp, #12
 8014ca2:	bd30      	pop	{r4, r5, pc}
 8014ca4:	2001      	movs	r0, #1
 8014ca6:	b003      	add	sp, #12
 8014ca8:	bd30      	pop	{r4, r5, pc}
 8014caa:	bf00      	nop

08014cac <LCD_SetLUTEntryEx>:
 8014cac:	b530      	push	{r4, r5, lr}
 8014cae:	b083      	sub	sp, #12
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	4614      	mov	r4, r2
 8014cb4:	f002 fc0a 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014cb8:	9001      	str	r0, [sp, #4]
 8014cba:	b168      	cbz	r0, 8014cd8 <LCD_SetLUTEntryEx+0x2c>
 8014cbc:	68c3      	ldr	r3, [r0, #12]
 8014cbe:	2110      	movs	r1, #16
 8014cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cc2:	a801      	add	r0, sp, #4
 8014cc4:	4798      	blx	r3
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	b130      	cbz	r0, 8014cd8 <LCD_SetLUTEntryEx+0x2c>
 8014cca:	9801      	ldr	r0, [sp, #4]
 8014ccc:	4629      	mov	r1, r5
 8014cce:	4622      	mov	r2, r4
 8014cd0:	4798      	blx	r3
 8014cd2:	2000      	movs	r0, #0
 8014cd4:	b003      	add	sp, #12
 8014cd6:	bd30      	pop	{r4, r5, pc}
 8014cd8:	2001      	movs	r0, #1
 8014cda:	b003      	add	sp, #12
 8014cdc:	bd30      	pop	{r4, r5, pc}
 8014cde:	bf00      	nop

08014ce0 <LCD_GetPosEx>:
 8014ce0:	b530      	push	{r4, r5, lr}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	460d      	mov	r5, r1
 8014ce6:	4614      	mov	r4, r2
 8014ce8:	f002 fbf0 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014cec:	9001      	str	r0, [sp, #4]
 8014cee:	b168      	cbz	r0, 8014d0c <LCD_GetPosEx+0x2c>
 8014cf0:	68c3      	ldr	r3, [r0, #12]
 8014cf2:	2104      	movs	r1, #4
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf6:	a801      	add	r0, sp, #4
 8014cf8:	4798      	blx	r3
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	b130      	cbz	r0, 8014d0c <LCD_GetPosEx+0x2c>
 8014cfe:	9801      	ldr	r0, [sp, #4]
 8014d00:	4629      	mov	r1, r5
 8014d02:	4622      	mov	r2, r4
 8014d04:	4798      	blx	r3
 8014d06:	2000      	movs	r0, #0
 8014d08:	b003      	add	sp, #12
 8014d0a:	bd30      	pop	{r4, r5, pc}
 8014d0c:	2001      	movs	r0, #1
 8014d0e:	b003      	add	sp, #12
 8014d10:	bd30      	pop	{r4, r5, pc}
 8014d12:	bf00      	nop

08014d14 <LCD_SetDevFunc>:
 8014d14:	b530      	push	{r4, r5, lr}
 8014d16:	b083      	sub	sp, #12
 8014d18:	460d      	mov	r5, r1
 8014d1a:	4614      	mov	r4, r2
 8014d1c:	f002 fbd6 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014d20:	9001      	str	r0, [sp, #4]
 8014d22:	b168      	cbz	r0, 8014d40 <LCD_SetDevFunc+0x2c>
 8014d24:	68c3      	ldr	r3, [r0, #12]
 8014d26:	2116      	movs	r1, #22
 8014d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d2a:	a801      	add	r0, sp, #4
 8014d2c:	4798      	blx	r3
 8014d2e:	4603      	mov	r3, r0
 8014d30:	b130      	cbz	r0, 8014d40 <LCD_SetDevFunc+0x2c>
 8014d32:	9801      	ldr	r0, [sp, #4]
 8014d34:	4629      	mov	r1, r5
 8014d36:	4622      	mov	r2, r4
 8014d38:	4798      	blx	r3
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	b003      	add	sp, #12
 8014d3e:	bd30      	pop	{r4, r5, pc}
 8014d40:	2001      	movs	r0, #1
 8014d42:	b003      	add	sp, #12
 8014d44:	bd30      	pop	{r4, r5, pc}
 8014d46:	bf00      	nop

08014d48 <LCD_GetXSizeEx>:
 8014d48:	2801      	cmp	r0, #1
 8014d4a:	b508      	push	{r3, lr}
 8014d4c:	dd01      	ble.n	8014d52 <LCD_GetXSizeEx+0xa>
 8014d4e:	2000      	movs	r0, #0
 8014d50:	bd08      	pop	{r3, pc}
 8014d52:	f002 fbbb 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014d56:	b120      	cbz	r0, 8014d62 <LCD_GetXSizeEx+0x1a>
 8014d58:	68c3      	ldr	r3, [r0, #12]
 8014d5a:	2101      	movs	r1, #1
 8014d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d5e:	4798      	blx	r3
 8014d60:	bd08      	pop	{r3, pc}
 8014d62:	bd08      	pop	{r3, pc}

08014d64 <LCD_GetYSizeEx>:
 8014d64:	2801      	cmp	r0, #1
 8014d66:	b508      	push	{r3, lr}
 8014d68:	dd01      	ble.n	8014d6e <LCD_GetYSizeEx+0xa>
 8014d6a:	2000      	movs	r0, #0
 8014d6c:	bd08      	pop	{r3, pc}
 8014d6e:	f002 fbad 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014d72:	b120      	cbz	r0, 8014d7e <LCD_GetYSizeEx+0x1a>
 8014d74:	68c3      	ldr	r3, [r0, #12]
 8014d76:	2102      	movs	r1, #2
 8014d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d7a:	4798      	blx	r3
 8014d7c:	bd08      	pop	{r3, pc}
 8014d7e:	bd08      	pop	{r3, pc}

08014d80 <LCD_GetVXSizeEx>:
 8014d80:	2801      	cmp	r0, #1
 8014d82:	b508      	push	{r3, lr}
 8014d84:	dd01      	ble.n	8014d8a <LCD_GetVXSizeEx+0xa>
 8014d86:	2000      	movs	r0, #0
 8014d88:	bd08      	pop	{r3, pc}
 8014d8a:	f002 fb9f 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014d8e:	b120      	cbz	r0, 8014d9a <LCD_GetVXSizeEx+0x1a>
 8014d90:	68c3      	ldr	r3, [r0, #12]
 8014d92:	2103      	movs	r1, #3
 8014d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d96:	4798      	blx	r3
 8014d98:	bd08      	pop	{r3, pc}
 8014d9a:	bd08      	pop	{r3, pc}

08014d9c <LCD_GetVYSizeEx>:
 8014d9c:	2801      	cmp	r0, #1
 8014d9e:	b508      	push	{r3, lr}
 8014da0:	dd01      	ble.n	8014da6 <LCD_GetVYSizeEx+0xa>
 8014da2:	2000      	movs	r0, #0
 8014da4:	bd08      	pop	{r3, pc}
 8014da6:	f002 fb91 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014daa:	b120      	cbz	r0, 8014db6 <LCD_GetVYSizeEx+0x1a>
 8014dac:	68c3      	ldr	r3, [r0, #12]
 8014dae:	2104      	movs	r1, #4
 8014db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db2:	4798      	blx	r3
 8014db4:	bd08      	pop	{r3, pc}
 8014db6:	bd08      	pop	{r3, pc}

08014db8 <LCD_GetBitsPerPixelEx>:
 8014db8:	2801      	cmp	r0, #1
 8014dba:	b508      	push	{r3, lr}
 8014dbc:	dd01      	ble.n	8014dc2 <LCD_GetBitsPerPixelEx+0xa>
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	bd08      	pop	{r3, pc}
 8014dc2:	f002 fb83 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014dc6:	b120      	cbz	r0, 8014dd2 <LCD_GetBitsPerPixelEx+0x1a>
 8014dc8:	68c3      	ldr	r3, [r0, #12]
 8014dca:	2108      	movs	r1, #8
 8014dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dce:	4798      	blx	r3
 8014dd0:	bd08      	pop	{r3, pc}
 8014dd2:	bd08      	pop	{r3, pc}

08014dd4 <LCD_GetNumColorsEx>:
 8014dd4:	2801      	cmp	r0, #1
 8014dd6:	b508      	push	{r3, lr}
 8014dd8:	dd01      	ble.n	8014dde <LCD_GetNumColorsEx+0xa>
 8014dda:	2000      	movs	r0, #0
 8014ddc:	bd08      	pop	{r3, pc}
 8014dde:	f002 fb75 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014de2:	b120      	cbz	r0, 8014dee <LCD_GetNumColorsEx+0x1a>
 8014de4:	68c3      	ldr	r3, [r0, #12]
 8014de6:	2109      	movs	r1, #9
 8014de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dea:	4798      	blx	r3
 8014dec:	bd08      	pop	{r3, pc}
 8014dee:	bd08      	pop	{r3, pc}

08014df0 <LCD_GetMirrorXEx>:
 8014df0:	2801      	cmp	r0, #1
 8014df2:	b508      	push	{r3, lr}
 8014df4:	dd01      	ble.n	8014dfa <LCD_GetMirrorXEx+0xa>
 8014df6:	2000      	movs	r0, #0
 8014df8:	bd08      	pop	{r3, pc}
 8014dfa:	f002 fb67 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014dfe:	b120      	cbz	r0, 8014e0a <LCD_GetMirrorXEx+0x1a>
 8014e00:	68c3      	ldr	r3, [r0, #12]
 8014e02:	210c      	movs	r1, #12
 8014e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e06:	4798      	blx	r3
 8014e08:	bd08      	pop	{r3, pc}
 8014e0a:	bd08      	pop	{r3, pc}

08014e0c <LCD_GetMirrorYEx>:
 8014e0c:	2801      	cmp	r0, #1
 8014e0e:	b508      	push	{r3, lr}
 8014e10:	dd01      	ble.n	8014e16 <LCD_GetMirrorYEx+0xa>
 8014e12:	2000      	movs	r0, #0
 8014e14:	bd08      	pop	{r3, pc}
 8014e16:	f002 fb59 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014e1a:	b120      	cbz	r0, 8014e26 <LCD_GetMirrorYEx+0x1a>
 8014e1c:	68c3      	ldr	r3, [r0, #12]
 8014e1e:	210d      	movs	r1, #13
 8014e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e22:	4798      	blx	r3
 8014e24:	bd08      	pop	{r3, pc}
 8014e26:	bd08      	pop	{r3, pc}

08014e28 <LCD_GetSwapXYEx>:
 8014e28:	2801      	cmp	r0, #1
 8014e2a:	b508      	push	{r3, lr}
 8014e2c:	dd01      	ble.n	8014e32 <LCD_GetSwapXYEx+0xa>
 8014e2e:	2000      	movs	r0, #0
 8014e30:	bd08      	pop	{r3, pc}
 8014e32:	f002 fb4b 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014e36:	b120      	cbz	r0, 8014e42 <LCD_GetSwapXYEx+0x1a>
 8014e38:	68c3      	ldr	r3, [r0, #12]
 8014e3a:	210e      	movs	r1, #14
 8014e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e3e:	4798      	blx	r3
 8014e40:	bd08      	pop	{r3, pc}
 8014e42:	bd08      	pop	{r3, pc}

08014e44 <LCD_GetXSize>:
 8014e44:	b508      	push	{r3, lr}
 8014e46:	4b08      	ldr	r3, [pc, #32]	; (8014e68 <LCD_GetXSize+0x24>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	7c58      	ldrb	r0, [r3, #17]
 8014e4c:	2801      	cmp	r0, #1
 8014e4e:	dd01      	ble.n	8014e54 <LCD_GetXSize+0x10>
 8014e50:	2000      	movs	r0, #0
 8014e52:	bd08      	pop	{r3, pc}
 8014e54:	f002 fb3a 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014e58:	b120      	cbz	r0, 8014e64 <LCD_GetXSize+0x20>
 8014e5a:	68c3      	ldr	r3, [r0, #12]
 8014e5c:	2101      	movs	r1, #1
 8014e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e60:	4798      	blx	r3
 8014e62:	bd08      	pop	{r3, pc}
 8014e64:	bd08      	pop	{r3, pc}
 8014e66:	bf00      	nop
 8014e68:	2000026c 	.word	0x2000026c

08014e6c <LCD_GetYSize>:
 8014e6c:	b508      	push	{r3, lr}
 8014e6e:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <LCD_GetYSize+0x24>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	7c58      	ldrb	r0, [r3, #17]
 8014e74:	2801      	cmp	r0, #1
 8014e76:	dd01      	ble.n	8014e7c <LCD_GetYSize+0x10>
 8014e78:	2000      	movs	r0, #0
 8014e7a:	bd08      	pop	{r3, pc}
 8014e7c:	f002 fb26 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014e80:	b120      	cbz	r0, 8014e8c <LCD_GetYSize+0x20>
 8014e82:	68c3      	ldr	r3, [r0, #12]
 8014e84:	2102      	movs	r1, #2
 8014e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e88:	4798      	blx	r3
 8014e8a:	bd08      	pop	{r3, pc}
 8014e8c:	bd08      	pop	{r3, pc}
 8014e8e:	bf00      	nop
 8014e90:	2000026c 	.word	0x2000026c

08014e94 <LCD_GetNumColors>:
 8014e94:	b508      	push	{r3, lr}
 8014e96:	4b08      	ldr	r3, [pc, #32]	; (8014eb8 <LCD_GetNumColors+0x24>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	7c58      	ldrb	r0, [r3, #17]
 8014e9c:	2801      	cmp	r0, #1
 8014e9e:	dd01      	ble.n	8014ea4 <LCD_GetNumColors+0x10>
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	bd08      	pop	{r3, pc}
 8014ea4:	f002 fb12 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014ea8:	b120      	cbz	r0, 8014eb4 <LCD_GetNumColors+0x20>
 8014eaa:	68c3      	ldr	r3, [r0, #12]
 8014eac:	2109      	movs	r1, #9
 8014eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb0:	4798      	blx	r3
 8014eb2:	bd08      	pop	{r3, pc}
 8014eb4:	bd08      	pop	{r3, pc}
 8014eb6:	bf00      	nop
 8014eb8:	2000026c 	.word	0x2000026c

08014ebc <GUI_GetBitsPerPixelEx>:
 8014ebc:	b508      	push	{r3, lr}
 8014ebe:	4b04      	ldr	r3, [pc, #16]	; (8014ed0 <GUI_GetBitsPerPixelEx+0x14>)
 8014ec0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014ec4:	68c3      	ldr	r3, [r0, #12]
 8014ec6:	2108      	movs	r1, #8
 8014ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eca:	4798      	blx	r3
 8014ecc:	bd08      	pop	{r3, pc}
 8014ece:	bf00      	nop
 8014ed0:	2002c040 	.word	0x2002c040

08014ed4 <LCD_GetPalette>:
 8014ed4:	b508      	push	{r3, lr}
 8014ed6:	4b06      	ldr	r3, [pc, #24]	; (8014ef0 <LCD_GetPalette+0x1c>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	7c58      	ldrb	r0, [r3, #17]
 8014edc:	f002 faf6 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014ee0:	b120      	cbz	r0, 8014eec <LCD_GetPalette+0x18>
 8014ee2:	68c3      	ldr	r3, [r0, #12]
 8014ee4:	2102      	movs	r1, #2
 8014ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee8:	4798      	blx	r3
 8014eea:	bd08      	pop	{r3, pc}
 8014eec:	bd08      	pop	{r3, pc}
 8014eee:	bf00      	nop
 8014ef0:	2000026c 	.word	0x2000026c

08014ef4 <GUI_GetpfIndex2ColorEx>:
 8014ef4:	4b02      	ldr	r3, [pc, #8]	; (8014f00 <GUI_GetpfIndex2ColorEx+0xc>)
 8014ef6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014efa:	691b      	ldr	r3, [r3, #16]
 8014efc:	6858      	ldr	r0, [r3, #4]
 8014efe:	4770      	bx	lr
 8014f00:	2002c040 	.word	0x2002c040

08014f04 <GUI_GetpfColor2IndexEx>:
 8014f04:	4b02      	ldr	r3, [pc, #8]	; (8014f10 <GUI_GetpfColor2IndexEx+0xc>)
 8014f06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f0a:	691b      	ldr	r3, [r3, #16]
 8014f0c:	6818      	ldr	r0, [r3, #0]
 8014f0e:	4770      	bx	lr
 8014f10:	2002c040 	.word	0x2002c040

08014f14 <LCD_GetXSizeMax>:
 8014f14:	b538      	push	{r3, r4, r5, lr}
 8014f16:	2501      	movs	r5, #1
 8014f18:	4628      	mov	r0, r5
 8014f1a:	f002 fad7 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014f1e:	2400      	movs	r4, #0
 8014f20:	2101      	movs	r1, #1
 8014f22:	b168      	cbz	r0, 8014f40 <LCD_GetXSizeMax+0x2c>
 8014f24:	68c3      	ldr	r3, [r0, #12]
 8014f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f28:	4798      	blx	r3
 8014f2a:	4284      	cmp	r4, r0
 8014f2c:	bfb8      	it	lt
 8014f2e:	4604      	movlt	r4, r0
 8014f30:	b15d      	cbz	r5, 8014f4a <LCD_GetXSizeMax+0x36>
 8014f32:	2500      	movs	r5, #0
 8014f34:	4628      	mov	r0, r5
 8014f36:	f002 fac9 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014f3a:	2101      	movs	r1, #1
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d1f1      	bne.n	8014f24 <LCD_GetXSizeMax+0x10>
 8014f40:	4284      	cmp	r4, r0
 8014f42:	bfb8      	it	lt
 8014f44:	4604      	movlt	r4, r0
 8014f46:	2d00      	cmp	r5, #0
 8014f48:	d1f3      	bne.n	8014f32 <LCD_GetXSizeMax+0x1e>
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	bd38      	pop	{r3, r4, r5, pc}
 8014f4e:	bf00      	nop

08014f50 <LCD_GetYSizeMax>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	2501      	movs	r5, #1
 8014f54:	4628      	mov	r0, r5
 8014f56:	f002 fab9 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014f5a:	2400      	movs	r4, #0
 8014f5c:	2102      	movs	r1, #2
 8014f5e:	b168      	cbz	r0, 8014f7c <LCD_GetYSizeMax+0x2c>
 8014f60:	68c3      	ldr	r3, [r0, #12]
 8014f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f64:	4798      	blx	r3
 8014f66:	4284      	cmp	r4, r0
 8014f68:	bfb8      	it	lt
 8014f6a:	4604      	movlt	r4, r0
 8014f6c:	b15d      	cbz	r5, 8014f86 <LCD_GetYSizeMax+0x36>
 8014f6e:	2500      	movs	r5, #0
 8014f70:	4628      	mov	r0, r5
 8014f72:	f002 faab 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014f76:	2102      	movs	r1, #2
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d1f1      	bne.n	8014f60 <LCD_GetYSizeMax+0x10>
 8014f7c:	4284      	cmp	r4, r0
 8014f7e:	bfb8      	it	lt
 8014f80:	4604      	movlt	r4, r0
 8014f82:	2d00      	cmp	r5, #0
 8014f84:	d1f3      	bne.n	8014f6e <LCD_GetYSizeMax+0x1e>
 8014f86:	4620      	mov	r0, r4
 8014f88:	bd38      	pop	{r3, r4, r5, pc}
 8014f8a:	bf00      	nop

08014f8c <LCD_GetVXSizeMax>:
 8014f8c:	b538      	push	{r3, r4, r5, lr}
 8014f8e:	2501      	movs	r5, #1
 8014f90:	4628      	mov	r0, r5
 8014f92:	f002 fa9b 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014f96:	2400      	movs	r4, #0
 8014f98:	2103      	movs	r1, #3
 8014f9a:	b168      	cbz	r0, 8014fb8 <LCD_GetVXSizeMax+0x2c>
 8014f9c:	68c3      	ldr	r3, [r0, #12]
 8014f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa0:	4798      	blx	r3
 8014fa2:	4284      	cmp	r4, r0
 8014fa4:	bfb8      	it	lt
 8014fa6:	4604      	movlt	r4, r0
 8014fa8:	b15d      	cbz	r5, 8014fc2 <LCD_GetVXSizeMax+0x36>
 8014faa:	2500      	movs	r5, #0
 8014fac:	4628      	mov	r0, r5
 8014fae:	f002 fa8d 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8014fb2:	2103      	movs	r1, #3
 8014fb4:	2800      	cmp	r0, #0
 8014fb6:	d1f1      	bne.n	8014f9c <LCD_GetVXSizeMax+0x10>
 8014fb8:	4284      	cmp	r4, r0
 8014fba:	bfb8      	it	lt
 8014fbc:	4604      	movlt	r4, r0
 8014fbe:	2d00      	cmp	r5, #0
 8014fc0:	d1f3      	bne.n	8014faa <LCD_GetVXSizeMax+0x1e>
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	bd38      	pop	{r3, r4, r5, pc}
 8014fc6:	bf00      	nop

08014fc8 <LCD_SetDisplaySize>:
 8014fc8:	4a02      	ldr	r2, [pc, #8]	; (8014fd4 <LCD_SetDisplaySize+0xc>)
 8014fca:	4b03      	ldr	r3, [pc, #12]	; (8014fd8 <LCD_SetDisplaySize+0x10>)
 8014fcc:	6010      	str	r0, [r2, #0]
 8014fce:	6019      	str	r1, [r3, #0]
 8014fd0:	4770      	bx	lr
 8014fd2:	bf00      	nop
 8014fd4:	2002aed4 	.word	0x2002aed4
 8014fd8:	2002aed0 	.word	0x2002aed0

08014fdc <LCD_GetXSizeDisplay>:
 8014fdc:	4b01      	ldr	r3, [pc, #4]	; (8014fe4 <LCD_GetXSizeDisplay+0x8>)
 8014fde:	6818      	ldr	r0, [r3, #0]
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop
 8014fe4:	2002aed4 	.word	0x2002aed4

08014fe8 <LCD_GetYSizeDisplay>:
 8014fe8:	4b01      	ldr	r3, [pc, #4]	; (8014ff0 <LCD_GetYSizeDisplay+0x8>)
 8014fea:	6818      	ldr	r0, [r3, #0]
 8014fec:	4770      	bx	lr
 8014fee:	bf00      	nop
 8014ff0:	2002aed0 	.word	0x2002aed0

08014ff4 <LCD__GetBPPDevice>:
 8014ff4:	b1c8      	cbz	r0, 801502a <LCD__GetBPPDevice+0x36>
 8014ff6:	f030 0301 	bics.w	r3, r0, #1
 8014ffa:	d017      	beq.n	801502c <LCD__GetBPPDevice+0x38>
 8014ffc:	f030 0303 	bics.w	r3, r0, #3
 8015000:	d101      	bne.n	8015006 <LCD__GetBPPDevice+0x12>
 8015002:	2008      	movs	r0, #8
 8015004:	4770      	bx	lr
 8015006:	f030 0307 	bics.w	r3, r0, #7
 801500a:	d0fa      	beq.n	8015002 <LCD__GetBPPDevice+0xe>
 801500c:	f030 030f 	bics.w	r3, r0, #15
 8015010:	d0f7      	beq.n	8015002 <LCD__GetBPPDevice+0xe>
 8015012:	f030 031f 	bics.w	r3, r0, #31
 8015016:	d0f4      	beq.n	8015002 <LCD__GetBPPDevice+0xe>
 8015018:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801501c:	d0f1      	beq.n	8015002 <LCD__GetBPPDevice+0xe>
 801501e:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8015022:	f023 0301 	bic.w	r3, r3, #1
 8015026:	b91b      	cbnz	r3, 8015030 <LCD__GetBPPDevice+0x3c>
 8015028:	2010      	movs	r0, #16
 801502a:	4770      	bx	lr
 801502c:	2001      	movs	r0, #1
 801502e:	4770      	bx	lr
 8015030:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8015034:	f023 030f 	bic.w	r3, r3, #15
 8015038:	2b00      	cmp	r3, #0
 801503a:	d0f5      	beq.n	8015028 <LCD__GetBPPDevice+0x34>
 801503c:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8015040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015044:	2b00      	cmp	r3, #0
 8015046:	d0ef      	beq.n	8015028 <LCD__GetBPPDevice+0x34>
 8015048:	0c00      	lsrs	r0, r0, #16
 801504a:	0400      	lsls	r0, r0, #16
 801504c:	2800      	cmp	r0, #0
 801504e:	bf0c      	ite	eq
 8015050:	2010      	moveq	r0, #16
 8015052:	2020      	movne	r0, #32
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop

08015058 <_SetBkColor>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	4c0b      	ldr	r4, [pc, #44]	; (8015088 <_SetBkColor+0x30>)
 801505c:	6823      	ldr	r3, [r4, #0]
 801505e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015060:	4281      	cmp	r1, r0
 8015062:	d00d      	beq.n	8015080 <_SetBkColor+0x28>
 8015064:	7c5d      	ldrb	r5, [r3, #17]
 8015066:	4909      	ldr	r1, [pc, #36]	; (801508c <_SetBkColor+0x34>)
 8015068:	6358      	str	r0, [r3, #52]	; 0x34
 801506a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	4798      	blx	r3
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	7c1a      	ldrb	r2, [r3, #16]
 8015078:	0752      	lsls	r2, r2, #29
 801507a:	d402      	bmi.n	8015082 <_SetBkColor+0x2a>
 801507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801507e:	6018      	str	r0, [r3, #0]
 8015080:	bd38      	pop	{r3, r4, r5, pc}
 8015082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015084:	6018      	str	r0, [r3, #0]
 8015086:	bd38      	pop	{r3, r4, r5, pc}
 8015088:	2000026c 	.word	0x2000026c
 801508c:	2002c040 	.word	0x2002c040

08015090 <_SetColor>:
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4c0b      	ldr	r4, [pc, #44]	; (80150c0 <_SetColor+0x30>)
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015098:	4281      	cmp	r1, r0
 801509a:	d00d      	beq.n	80150b8 <_SetColor+0x28>
 801509c:	7c5d      	ldrb	r5, [r3, #17]
 801509e:	4909      	ldr	r1, [pc, #36]	; (80150c4 <_SetColor+0x34>)
 80150a0:	6318      	str	r0, [r3, #48]	; 0x30
 80150a2:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80150a6:	691b      	ldr	r3, [r3, #16]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4798      	blx	r3
 80150ac:	6823      	ldr	r3, [r4, #0]
 80150ae:	7c1a      	ldrb	r2, [r3, #16]
 80150b0:	0752      	lsls	r2, r2, #29
 80150b2:	d402      	bmi.n	80150ba <_SetColor+0x2a>
 80150b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150b6:	6018      	str	r0, [r3, #0]
 80150b8:	bd38      	pop	{r3, r4, r5, pc}
 80150ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150bc:	6018      	str	r0, [r3, #0]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	2000026c 	.word	0x2000026c
 80150c4:	2002c040 	.word	0x2002c040

080150c8 <_SetDrawMode>:
 80150c8:	b470      	push	{r4, r5, r6}
 80150ca:	4b08      	ldr	r3, [pc, #32]	; (80150ec <_SetDrawMode+0x24>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	7c1a      	ldrb	r2, [r3, #16]
 80150d0:	ea80 0102 	eor.w	r1, r0, r2
 80150d4:	0749      	lsls	r1, r1, #29
 80150d6:	d505      	bpl.n	80150e4 <_SetDrawMode+0x1c>
 80150d8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80150da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80150dc:	6826      	ldr	r6, [r4, #0]
 80150de:	680d      	ldr	r5, [r1, #0]
 80150e0:	6025      	str	r5, [r4, #0]
 80150e2:	600e      	str	r6, [r1, #0]
 80150e4:	7418      	strb	r0, [r3, #16]
 80150e6:	bc70      	pop	{r4, r5, r6}
 80150e8:	4610      	mov	r0, r2
 80150ea:	4770      	bx	lr
 80150ec:	2000026c 	.word	0x2000026c

080150f0 <LCD_SetDrawMode>:
 80150f0:	b508      	push	{r3, lr}
 80150f2:	4b02      	ldr	r3, [pc, #8]	; (80150fc <LCD_SetDrawMode+0xc>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	689b      	ldr	r3, [r3, #8]
 80150f8:	4798      	blx	r3
 80150fa:	bd08      	pop	{r3, pc}
 80150fc:	2000023c 	.word	0x2000023c

08015100 <LCD_DrawPixel>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4b16      	ldr	r3, [pc, #88]	; (801515c <LCD_DrawPixel+0x5c>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801510a:	428c      	cmp	r4, r1
 801510c:	460a      	mov	r2, r1
 801510e:	dc19      	bgt.n	8015144 <LCD_DrawPixel+0x44>
 8015110:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015114:	428a      	cmp	r2, r1
 8015116:	dc15      	bgt.n	8015144 <LCD_DrawPixel+0x44>
 8015118:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801511c:	4281      	cmp	r1, r0
 801511e:	dc11      	bgt.n	8015144 <LCD_DrawPixel+0x44>
 8015120:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8015124:	4288      	cmp	r0, r1
 8015126:	dc0d      	bgt.n	8015144 <LCD_DrawPixel+0x44>
 8015128:	7c19      	ldrb	r1, [r3, #16]
 801512a:	07c9      	lsls	r1, r1, #31
 801512c:	d40b      	bmi.n	8015146 <LCD_DrawPixel+0x46>
 801512e:	490c      	ldr	r1, [pc, #48]	; (8015160 <LCD_DrawPixel+0x60>)
 8015130:	7c5c      	ldrb	r4, [r3, #17]
 8015132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015134:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	68e5      	ldr	r5, [r4, #12]
 801513c:	4601      	mov	r1, r0
 801513e:	69ad      	ldr	r5, [r5, #24]
 8015140:	4620      	mov	r0, r4
 8015142:	47a8      	blx	r5
 8015144:	bd38      	pop	{r3, r4, r5, pc}
 8015146:	7c59      	ldrb	r1, [r3, #17]
 8015148:	4b05      	ldr	r3, [pc, #20]	; (8015160 <LCD_DrawPixel+0x60>)
 801514a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801514e:	68dc      	ldr	r4, [r3, #12]
 8015150:	4601      	mov	r1, r0
 8015152:	69e4      	ldr	r4, [r4, #28]
 8015154:	4618      	mov	r0, r3
 8015156:	47a0      	blx	r4
 8015158:	bd38      	pop	{r3, r4, r5, pc}
 801515a:	bf00      	nop
 801515c:	2000026c 	.word	0x2000026c
 8015160:	2002c040 	.word	0x2002c040

08015164 <LCD_DrawHLine>:
 8015164:	4b10      	ldr	r3, [pc, #64]	; (80151a8 <LCD_DrawHLine+0x44>)
 8015166:	b570      	push	{r4, r5, r6, lr}
 8015168:	681c      	ldr	r4, [r3, #0]
 801516a:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 801516e:	428e      	cmp	r6, r1
 8015170:	460d      	mov	r5, r1
 8015172:	dc0f      	bgt.n	8015194 <LCD_DrawHLine+0x30>
 8015174:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8015178:	4299      	cmp	r1, r3
 801517a:	dc0b      	bgt.n	8015194 <LCD_DrawHLine+0x30>
 801517c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015184:	4288      	cmp	r0, r1
 8015186:	bfa8      	it	ge
 8015188:	4601      	movge	r1, r0
 801518a:	429a      	cmp	r2, r3
 801518c:	bfb8      	it	lt
 801518e:	4613      	movlt	r3, r2
 8015190:	4299      	cmp	r1, r3
 8015192:	dd00      	ble.n	8015196 <LCD_DrawHLine+0x32>
 8015194:	bd70      	pop	{r4, r5, r6, pc}
 8015196:	7c60      	ldrb	r0, [r4, #17]
 8015198:	4a04      	ldr	r2, [pc, #16]	; (80151ac <LCD_DrawHLine+0x48>)
 801519a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801519e:	68c4      	ldr	r4, [r0, #12]
 80151a0:	462a      	mov	r2, r5
 80151a2:	68a4      	ldr	r4, [r4, #8]
 80151a4:	47a0      	blx	r4
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	2000026c 	.word	0x2000026c
 80151ac:	2002c040 	.word	0x2002c040

080151b0 <LCD_DrawVLine>:
 80151b0:	4b11      	ldr	r3, [pc, #68]	; (80151f8 <LCD_DrawVLine+0x48>)
 80151b2:	b570      	push	{r4, r5, r6, lr}
 80151b4:	681c      	ldr	r4, [r3, #0]
 80151b6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80151ba:	4285      	cmp	r5, r0
 80151bc:	dc0f      	bgt.n	80151de <LCD_DrawVLine+0x2e>
 80151be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151c2:	4298      	cmp	r0, r3
 80151c4:	dc0b      	bgt.n	80151de <LCD_DrawVLine+0x2e>
 80151c6:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 80151ca:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80151ce:	42a9      	cmp	r1, r5
 80151d0:	bfa8      	it	ge
 80151d2:	460d      	movge	r5, r1
 80151d4:	429a      	cmp	r2, r3
 80151d6:	bfb8      	it	lt
 80151d8:	4613      	movlt	r3, r2
 80151da:	429d      	cmp	r5, r3
 80151dc:	dd00      	ble.n	80151e0 <LCD_DrawVLine+0x30>
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	7c61      	ldrb	r1, [r4, #17]
 80151e2:	4a06      	ldr	r2, [pc, #24]	; (80151fc <LCD_DrawVLine+0x4c>)
 80151e4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80151e8:	68e6      	ldr	r6, [r4, #12]
 80151ea:	4601      	mov	r1, r0
 80151ec:	462a      	mov	r2, r5
 80151ee:	4620      	mov	r0, r4
 80151f0:	68f5      	ldr	r5, [r6, #12]
 80151f2:	47a8      	blx	r5
 80151f4:	bd70      	pop	{r4, r5, r6, pc}
 80151f6:	bf00      	nop
 80151f8:	2000026c 	.word	0x2000026c
 80151fc:	2002c040 	.word	0x2002c040

08015200 <LCD_FillRect>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	4c14      	ldr	r4, [pc, #80]	; (8015254 <LCD_FillRect+0x54>)
 8015204:	6824      	ldr	r4, [r4, #0]
 8015206:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801520a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801520e:	42b0      	cmp	r0, r6
 8015210:	bfa8      	it	ge
 8015212:	4606      	movge	r6, r0
 8015214:	42aa      	cmp	r2, r5
 8015216:	bfb8      	it	lt
 8015218:	4615      	movlt	r5, r2
 801521a:	42b5      	cmp	r5, r6
 801521c:	b082      	sub	sp, #8
 801521e:	db0b      	blt.n	8015238 <LCD_FillRect+0x38>
 8015220:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015224:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8015228:	4291      	cmp	r1, r2
 801522a:	bfa8      	it	ge
 801522c:	460a      	movge	r2, r1
 801522e:	4283      	cmp	r3, r0
 8015230:	bfa8      	it	ge
 8015232:	4603      	movge	r3, r0
 8015234:	429a      	cmp	r2, r3
 8015236:	dd01      	ble.n	801523c <LCD_FillRect+0x3c>
 8015238:	b002      	add	sp, #8
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	7c60      	ldrb	r0, [r4, #17]
 801523e:	4906      	ldr	r1, [pc, #24]	; (8015258 <LCD_FillRect+0x58>)
 8015240:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8015244:	68c4      	ldr	r4, [r0, #12]
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	4631      	mov	r1, r6
 801524a:	462b      	mov	r3, r5
 801524c:	6924      	ldr	r4, [r4, #16]
 801524e:	47a0      	blx	r4
 8015250:	b002      	add	sp, #8
 8015252:	bd70      	pop	{r4, r5, r6, pc}
 8015254:	2000026c 	.word	0x2000026c
 8015258:	2002c040 	.word	0x2002c040

0801525c <LCD__DrawBitmap_1bpp>:
 801525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015260:	4c8b      	ldr	r4, [pc, #556]	; (8015490 <LCD__DrawBitmap_1bpp+0x234>)
 8015262:	b091      	sub	sp, #68	; 0x44
 8015264:	6825      	ldr	r5, [r4, #0]
 8015266:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801526a:	920a      	str	r2, [sp, #40]	; 0x28
 801526c:	4604      	mov	r4, r0
 801526e:	4689      	mov	r9, r1
 8015270:	930e      	str	r3, [sp, #56]	; 0x38
 8015272:	b185      	cbz	r5, 8015296 <LCD__DrawBitmap_1bpp+0x3a>
 8015274:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8015276:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8015278:	9401      	str	r4, [sp, #4]
 801527a:	9602      	str	r6, [sp, #8]
 801527c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801527e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8015280:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8015282:	f8cd a000 	str.w	sl, [sp]
 8015286:	9703      	str	r7, [sp, #12]
 8015288:	9404      	str	r4, [sp, #16]
 801528a:	9605      	str	r6, [sp, #20]
 801528c:	682c      	ldr	r4, [r5, #0]
 801528e:	47a0      	blx	r4
 8015290:	b011      	add	sp, #68	; 0x44
 8015292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015296:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8015298:	ea4a 0307 	orr.w	r3, sl, r7
 801529c:	2b01      	cmp	r3, #1
 801529e:	f000 8096 	beq.w	80153ce <LCD__DrawBitmap_1bpp+0x172>
 80152a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80152a4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80152a6:	2f00      	cmp	r7, #0
 80152a8:	f1c6 0308 	rsb	r3, r6, #8
 80152ac:	ddf0      	ble.n	8015290 <LCD__DrawBitmap_1bpp+0x34>
 80152ae:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8015498 <LCD__DrawBitmap_1bpp+0x23c>
 80152b2:	9109      	str	r1, [sp, #36]	; 0x24
 80152b4:	46a8      	mov	r8, r5
 80152b6:	4454      	add	r4, sl
 80152b8:	950c      	str	r5, [sp, #48]	; 0x30
 80152ba:	f8dc 0000 	ldr.w	r0, [ip]
 80152be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80152c0:	940f      	str	r4, [sp, #60]	; 0x3c
 80152c2:	4699      	mov	r9, r3
 80152c4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80152c6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80152ca:	4425      	add	r5, r4
 80152cc:	1e6e      	subs	r6, r5, #1
 80152ce:	42b3      	cmp	r3, r6
 80152d0:	950d      	str	r5, [sp, #52]	; 0x34
 80152d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80152d4:	dc6c      	bgt.n	80153b0 <LCD__DrawBitmap_1bpp+0x154>
 80152d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80152da:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80152de:	4563      	cmp	r3, ip
 80152e0:	db66      	blt.n	80153b0 <LCD__DrawBitmap_1bpp+0x154>
 80152e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80152e4:	2c00      	cmp	r4, #0
 80152e6:	dd63      	ble.n	80153b0 <LCD__DrawBitmap_1bpp+0x154>
 80152e8:	2600      	movs	r6, #0
 80152ea:	4635      	mov	r5, r6
 80152ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80152ee:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80152f0:	e054      	b.n	801539c <LCD__DrawBitmap_1bpp+0x140>
 80152f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80152f4:	1a76      	subs	r6, r6, r1
 80152f6:	fa48 f309 	asr.w	r3, r8, r9
 80152fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80152fe:	fa08 f801 	lsl.w	r8, r8, r1
 8015302:	fa5f f888 	uxtb.w	r8, r8
 8015306:	d102      	bne.n	801530e <LCD__DrawBitmap_1bpp+0xb2>
 8015308:	7c01      	ldrb	r1, [r0, #16]
 801530a:	0789      	lsls	r1, r1, #30
 801530c:	d440      	bmi.n	8015390 <LCD__DrawBitmap_1bpp+0x134>
 801530e:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8015312:	f8db 1000 	ldr.w	r1, [fp]
 8015316:	9108      	str	r1, [sp, #32]
 8015318:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801531a:	b109      	cbz	r1, 8015320 <LCD__DrawBitmap_1bpp+0xc4>
 801531c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015320:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015324:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8015328:	f8cb 3000 	str.w	r3, [fp]
 801532c:	1e63      	subs	r3, r4, #1
 801532e:	428a      	cmp	r2, r1
 8015330:	bfa8      	it	ge
 8015332:	4611      	movge	r1, r2
 8015334:	4563      	cmp	r3, ip
 8015336:	bfa8      	it	ge
 8015338:	4663      	movge	r3, ip
 801533a:	4299      	cmp	r1, r3
 801533c:	dc25      	bgt.n	801538a <LCD__DrawBitmap_1bpp+0x12e>
 801533e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8015342:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015346:	f8cd c018 	str.w	ip, [sp, #24]
 801534a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801534e:	4594      	cmp	ip, r2
 8015350:	bfb8      	it	lt
 8015352:	4694      	movlt	ip, r2
 8015354:	f8cd c01c 	str.w	ip, [sp, #28]
 8015358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801535a:	f8dd c018 	ldr.w	ip, [sp, #24]
 801535e:	4594      	cmp	ip, r2
 8015360:	bfa8      	it	ge
 8015362:	4694      	movge	ip, r2
 8015364:	9a07      	ldr	r2, [sp, #28]
 8015366:	4562      	cmp	r2, ip
 8015368:	dc0f      	bgt.n	801538a <LCD__DrawBitmap_1bpp+0x12e>
 801536a:	7c40      	ldrb	r0, [r0, #17]
 801536c:	4a49      	ldr	r2, [pc, #292]	; (8015494 <LCD__DrawBitmap_1bpp+0x238>)
 801536e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015372:	9a07      	ldr	r2, [sp, #28]
 8015374:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8015378:	f8cd c000 	str.w	ip, [sp]
 801537c:	f8de c010 	ldr.w	ip, [lr, #16]
 8015380:	47e0      	blx	ip
 8015382:	4b45      	ldr	r3, [pc, #276]	; (8015498 <LCD__DrawBitmap_1bpp+0x23c>)
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 801538a:	9908      	ldr	r1, [sp, #32]
 801538c:	f8cb 1000 	str.w	r1, [fp]
 8015390:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8015394:	3501      	adds	r5, #1
 8015396:	4565      	cmp	r5, ip
 8015398:	4454      	add	r4, sl
 801539a:	d009      	beq.n	80153b0 <LCD__DrawBitmap_1bpp+0x154>
 801539c:	ebca 0204 	rsb	r2, sl, r4
 80153a0:	2e00      	cmp	r6, #0
 80153a2:	d1a6      	bne.n	80152f2 <LCD__DrawBitmap_1bpp+0x96>
 80153a4:	f897 8000 	ldrb.w	r8, [r7]
 80153a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80153aa:	464e      	mov	r6, r9
 80153ac:	3701      	adds	r7, #1
 80153ae:	e7a2      	b.n	80152f6 <LCD__DrawBitmap_1bpp+0x9a>
 80153b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80153b2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80153b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80153b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80153b8:	3401      	adds	r4, #1
 80153ba:	4435      	add	r5, r6
 80153bc:	42bc      	cmp	r4, r7
 80153be:	940c      	str	r4, [sp, #48]	; 0x30
 80153c0:	951e      	str	r5, [sp, #120]	; 0x78
 80153c2:	f43f af65 	beq.w	8015290 <LCD__DrawBitmap_1bpp+0x34>
 80153c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80153c8:	9409      	str	r4, [sp, #36]	; 0x24
 80153ca:	4625      	mov	r5, r4
 80153cc:	e77a      	b.n	80152c4 <LCD__DrawBitmap_1bpp+0x68>
 80153ce:	4b32      	ldr	r3, [pc, #200]	; (8015498 <LCD__DrawBitmap_1bpp+0x23c>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80153d6:	1a51      	subs	r1, r2, r1
 80153d8:	2900      	cmp	r1, #0
 80153da:	dd54      	ble.n	8015486 <LCD__DrawBitmap_1bpp+0x22a>
 80153dc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80153e0:	ebc1 050c 	rsb	r5, r1, ip
 80153e4:	2d00      	cmp	r5, #0
 80153e6:	f77f af53 	ble.w	8015290 <LCD__DrawBitmap_1bpp+0x34>
 80153ea:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80153ec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80153ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153f0:	fb06 7701 	mla	r7, r6, r1, r7
 80153f4:	971e      	str	r7, [sp, #120]	; 0x78
 80153f6:	4448      	add	r0, r9
 80153f8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80153fc:	3801      	subs	r0, #1
 80153fe:	1a41      	subs	r1, r0, r1
 8015400:	2900      	cmp	r1, #0
 8015402:	dd03      	ble.n	801540c <LCD__DrawBitmap_1bpp+0x1b0>
 8015404:	1a6d      	subs	r5, r5, r1
 8015406:	2d00      	cmp	r5, #0
 8015408:	f77f af42 	ble.w	8015290 <LCD__DrawBitmap_1bpp+0x34>
 801540c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8015412:	4420      	add	r0, r4
 8015414:	3801      	subs	r0, #1
 8015416:	1a41      	subs	r1, r0, r1
 8015418:	2900      	cmp	r1, #0
 801541a:	dd05      	ble.n	8015428 <LCD__DrawBitmap_1bpp+0x1cc>
 801541c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8015420:	ebc1 0c0c 	rsb	ip, r1, ip
 8015424:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8015428:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801542a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801542e:	1ba1      	subs	r1, r4, r6
 8015430:	4281      	cmp	r1, r0
 8015432:	da10      	bge.n	8015456 <LCD__DrawBitmap_1bpp+0x1fa>
 8015434:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015436:	4634      	mov	r4, r6
 8015438:	1a46      	subs	r6, r0, r1
 801543a:	1a08      	subs	r0, r1, r0
 801543c:	4407      	add	r7, r0
 801543e:	970a      	str	r7, [sp, #40]	; 0x28
 8015440:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015442:	4434      	add	r4, r6
 8015444:	eb07 07e4 	add.w	r7, r7, r4, asr #3
 8015448:	f026 0607 	bic.w	r6, r6, #7
 801544c:	f004 0407 	and.w	r4, r4, #7
 8015450:	971e      	str	r7, [sp, #120]	; 0x78
 8015452:	9420      	str	r4, [sp, #128]	; 0x80
 8015454:	4431      	add	r1, r6
 8015456:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015458:	2c00      	cmp	r4, #0
 801545a:	f77f af19 	ble.w	8015290 <LCD__DrawBitmap_1bpp+0x34>
 801545e:	7c58      	ldrb	r0, [r3, #17]
 8015460:	4b0c      	ldr	r3, [pc, #48]	; (8015494 <LCD__DrawBitmap_1bpp+0x238>)
 8015462:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015464:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015468:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801546a:	68c4      	ldr	r4, [r0, #12]
 801546c:	9500      	str	r5, [sp, #0]
 801546e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015470:	9501      	str	r5, [sp, #4]
 8015472:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015474:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8015476:	9304      	str	r3, [sp, #16]
 8015478:	9602      	str	r6, [sp, #8]
 801547a:	9703      	str	r7, [sp, #12]
 801547c:	9505      	str	r5, [sp, #20]
 801547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015480:	6864      	ldr	r4, [r4, #4]
 8015482:	47a0      	blx	r4
 8015484:	e704      	b.n	8015290 <LCD__DrawBitmap_1bpp+0x34>
 8015486:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015488:	464a      	mov	r2, r9
 801548a:	4628      	mov	r0, r5
 801548c:	e7b3      	b.n	80153f6 <LCD__DrawBitmap_1bpp+0x19a>
 801548e:	bf00      	nop
 8015490:	2002bff8 	.word	0x2002bff8
 8015494:	2002c040 	.word	0x2002c040
 8015498:	2000026c 	.word	0x2000026c

0801549c <LCD_DrawBitmap>:
 801549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a0:	4cb5      	ldr	r4, [pc, #724]	; (8015778 <LCD_DrawBitmap+0x2dc>)
 80154a2:	b091      	sub	sp, #68	; 0x44
 80154a4:	6825      	ldr	r5, [r4, #0]
 80154a6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80154aa:	920a      	str	r2, [sp, #40]	; 0x28
 80154ac:	4604      	mov	r4, r0
 80154ae:	4689      	mov	r9, r1
 80154b0:	930e      	str	r3, [sp, #56]	; 0x38
 80154b2:	b185      	cbz	r5, 80154d6 <LCD_DrawBitmap+0x3a>
 80154b4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80154b6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80154b8:	9401      	str	r4, [sp, #4]
 80154ba:	9602      	str	r6, [sp, #8]
 80154bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80154be:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80154c0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80154c2:	f8cd a000 	str.w	sl, [sp]
 80154c6:	9703      	str	r7, [sp, #12]
 80154c8:	9404      	str	r4, [sp, #16]
 80154ca:	9605      	str	r6, [sp, #20]
 80154cc:	682c      	ldr	r4, [r5, #0]
 80154ce:	47a0      	blx	r4
 80154d0:	b011      	add	sp, #68	; 0x44
 80154d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80154d8:	ea4a 0307 	orr.w	r3, sl, r7
 80154dc:	2b01      	cmp	r3, #1
 80154de:	f000 8096 	beq.w	801560e <LCD_DrawBitmap+0x172>
 80154e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80154e4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80154e6:	2f00      	cmp	r7, #0
 80154e8:	f1c6 0308 	rsb	r3, r6, #8
 80154ec:	ddf0      	ble.n	80154d0 <LCD_DrawBitmap+0x34>
 80154ee:	f8df c290 	ldr.w	ip, [pc, #656]	; 8015780 <LCD_DrawBitmap+0x2e4>
 80154f2:	9109      	str	r1, [sp, #36]	; 0x24
 80154f4:	46a8      	mov	r8, r5
 80154f6:	4454      	add	r4, sl
 80154f8:	950c      	str	r5, [sp, #48]	; 0x30
 80154fa:	f8dc 0000 	ldr.w	r0, [ip]
 80154fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015500:	940f      	str	r4, [sp, #60]	; 0x3c
 8015502:	4699      	mov	r9, r3
 8015504:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8015506:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801550a:	4425      	add	r5, r4
 801550c:	1e6e      	subs	r6, r5, #1
 801550e:	42b3      	cmp	r3, r6
 8015510:	950d      	str	r5, [sp, #52]	; 0x34
 8015512:	960b      	str	r6, [sp, #44]	; 0x2c
 8015514:	dc6c      	bgt.n	80155f0 <LCD_DrawBitmap+0x154>
 8015516:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801551a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801551e:	4563      	cmp	r3, ip
 8015520:	db66      	blt.n	80155f0 <LCD_DrawBitmap+0x154>
 8015522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015524:	2c00      	cmp	r4, #0
 8015526:	dd63      	ble.n	80155f0 <LCD_DrawBitmap+0x154>
 8015528:	2600      	movs	r6, #0
 801552a:	4635      	mov	r5, r6
 801552c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801552e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015530:	e054      	b.n	80155dc <LCD_DrawBitmap+0x140>
 8015532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015534:	1a76      	subs	r6, r6, r1
 8015536:	fa48 f309 	asr.w	r3, r8, r9
 801553a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801553e:	fa08 f801 	lsl.w	r8, r8, r1
 8015542:	fa5f f888 	uxtb.w	r8, r8
 8015546:	d102      	bne.n	801554e <LCD_DrawBitmap+0xb2>
 8015548:	7c01      	ldrb	r1, [r0, #16]
 801554a:	0789      	lsls	r1, r1, #30
 801554c:	d440      	bmi.n	80155d0 <LCD_DrawBitmap+0x134>
 801554e:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8015552:	f8db 1000 	ldr.w	r1, [fp]
 8015556:	9108      	str	r1, [sp, #32]
 8015558:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801555a:	b109      	cbz	r1, 8015560 <LCD_DrawBitmap+0xc4>
 801555c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015560:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015564:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8015568:	f8cb 3000 	str.w	r3, [fp]
 801556c:	1e63      	subs	r3, r4, #1
 801556e:	428a      	cmp	r2, r1
 8015570:	bfa8      	it	ge
 8015572:	4611      	movge	r1, r2
 8015574:	4563      	cmp	r3, ip
 8015576:	bfa8      	it	ge
 8015578:	4663      	movge	r3, ip
 801557a:	4299      	cmp	r1, r3
 801557c:	dc25      	bgt.n	80155ca <LCD_DrawBitmap+0x12e>
 801557e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8015582:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015586:	f8cd c018 	str.w	ip, [sp, #24]
 801558a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801558e:	4594      	cmp	ip, r2
 8015590:	bfb8      	it	lt
 8015592:	4694      	movlt	ip, r2
 8015594:	f8cd c01c 	str.w	ip, [sp, #28]
 8015598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801559a:	f8dd c018 	ldr.w	ip, [sp, #24]
 801559e:	4594      	cmp	ip, r2
 80155a0:	bfa8      	it	ge
 80155a2:	4694      	movge	ip, r2
 80155a4:	9a07      	ldr	r2, [sp, #28]
 80155a6:	4594      	cmp	ip, r2
 80155a8:	db0f      	blt.n	80155ca <LCD_DrawBitmap+0x12e>
 80155aa:	7c40      	ldrb	r0, [r0, #17]
 80155ac:	4a73      	ldr	r2, [pc, #460]	; (801577c <LCD_DrawBitmap+0x2e0>)
 80155ae:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80155b2:	9a07      	ldr	r2, [sp, #28]
 80155b4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80155b8:	f8cd c000 	str.w	ip, [sp]
 80155bc:	f8de c010 	ldr.w	ip, [lr, #16]
 80155c0:	47e0      	blx	ip
 80155c2:	4b6f      	ldr	r3, [pc, #444]	; (8015780 <LCD_DrawBitmap+0x2e4>)
 80155c4:	6818      	ldr	r0, [r3, #0]
 80155c6:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 80155ca:	9908      	ldr	r1, [sp, #32]
 80155cc:	f8cb 1000 	str.w	r1, [fp]
 80155d0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80155d4:	3501      	adds	r5, #1
 80155d6:	4565      	cmp	r5, ip
 80155d8:	4454      	add	r4, sl
 80155da:	d009      	beq.n	80155f0 <LCD_DrawBitmap+0x154>
 80155dc:	ebca 0204 	rsb	r2, sl, r4
 80155e0:	2e00      	cmp	r6, #0
 80155e2:	d1a6      	bne.n	8015532 <LCD_DrawBitmap+0x96>
 80155e4:	f897 8000 	ldrb.w	r8, [r7]
 80155e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155ea:	464e      	mov	r6, r9
 80155ec:	3701      	adds	r7, #1
 80155ee:	e7a2      	b.n	8015536 <LCD_DrawBitmap+0x9a>
 80155f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80155f2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80155f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80155f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80155f8:	3401      	adds	r4, #1
 80155fa:	4435      	add	r5, r6
 80155fc:	42bc      	cmp	r4, r7
 80155fe:	940c      	str	r4, [sp, #48]	; 0x30
 8015600:	951e      	str	r5, [sp, #120]	; 0x78
 8015602:	f43f af65 	beq.w	80154d0 <LCD_DrawBitmap+0x34>
 8015606:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015608:	9409      	str	r4, [sp, #36]	; 0x24
 801560a:	4625      	mov	r5, r4
 801560c:	e77a      	b.n	8015504 <LCD_DrawBitmap+0x68>
 801560e:	4b5c      	ldr	r3, [pc, #368]	; (8015780 <LCD_DrawBitmap+0x2e4>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8015616:	1a50      	subs	r0, r2, r1
 8015618:	2800      	cmp	r0, #0
 801561a:	f340 80c7 	ble.w	80157ac <LCD_DrawBitmap+0x310>
 801561e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8015622:	ebc0 010c 	rsb	r1, r0, ip
 8015626:	2900      	cmp	r1, #0
 8015628:	f77f af52 	ble.w	80154d0 <LCD_DrawBitmap+0x34>
 801562c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801562e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8015630:	fb05 6600 	mla	r6, r5, r0, r6
 8015634:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015636:	961e      	str	r6, [sp, #120]	; 0x78
 8015638:	444d      	add	r5, r9
 801563a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801563e:	3d01      	subs	r5, #1
 8015640:	1a28      	subs	r0, r5, r0
 8015642:	2800      	cmp	r0, #0
 8015644:	dd03      	ble.n	801564e <LCD_DrawBitmap+0x1b2>
 8015646:	1a09      	subs	r1, r1, r0
 8015648:	2900      	cmp	r1, #0
 801564a:	f77f af41 	ble.w	80154d0 <LCD_DrawBitmap+0x34>
 801564e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015650:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8015654:	4425      	add	r5, r4
 8015656:	3d01      	subs	r5, #1
 8015658:	1a28      	subs	r0, r5, r0
 801565a:	2800      	cmp	r0, #0
 801565c:	dd02      	ble.n	8015664 <LCD_DrawBitmap+0x1c8>
 801565e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015660:	1a3f      	subs	r7, r7, r0
 8015662:	970a      	str	r7, [sp, #40]	; 0x28
 8015664:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015668:	4284      	cmp	r4, r0
 801566a:	db18      	blt.n	801569e <LCD_DrawBitmap+0x202>
 801566c:	2500      	movs	r5, #0
 801566e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015670:	2f00      	cmp	r7, #0
 8015672:	f77f af2d 	ble.w	80154d0 <LCD_DrawBitmap+0x34>
 8015676:	7c58      	ldrb	r0, [r3, #17]
 8015678:	4b40      	ldr	r3, [pc, #256]	; (801577c <LCD_DrawBitmap+0x2e0>)
 801567a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801567c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015682:	68c6      	ldr	r6, [r0, #12]
 8015684:	9701      	str	r7, [sp, #4]
 8015686:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8015688:	9702      	str	r7, [sp, #8]
 801568a:	9504      	str	r5, [sp, #16]
 801568c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801568e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8015690:	9100      	str	r1, [sp, #0]
 8015692:	9703      	str	r7, [sp, #12]
 8015694:	9505      	str	r5, [sp, #20]
 8015696:	4621      	mov	r1, r4
 8015698:	6874      	ldr	r4, [r6, #4]
 801569a:	47a0      	blx	r4
 801569c:	e718      	b.n	80154d0 <LCD_DrawBitmap+0x34>
 801569e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80156a2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80156a4:	1b05      	subs	r5, r0, r4
 80156a6:	ebc5 0c0c 	rsb	ip, r5, ip
 80156aa:	1e7e      	subs	r6, r7, #1
 80156ac:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80156b0:	2e1f      	cmp	r6, #31
 80156b2:	d8dc      	bhi.n	801566e <LCD_DrawBitmap+0x1d2>
 80156b4:	a701      	add	r7, pc, #4	; (adr r7, 80156bc <LCD_DrawBitmap+0x220>)
 80156b6:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 80156ba:	bf00      	nop
 80156bc:	08015799 	.word	0x08015799
 80156c0:	08015785 	.word	0x08015785
 80156c4:	0801566f 	.word	0x0801566f
 80156c8:	08015765 	.word	0x08015765
 80156cc:	0801566f 	.word	0x0801566f
 80156d0:	0801566f 	.word	0x0801566f
 80156d4:	0801566f 	.word	0x0801566f
 80156d8:	08015759 	.word	0x08015759
 80156dc:	0801566f 	.word	0x0801566f
 80156e0:	0801566f 	.word	0x0801566f
 80156e4:	0801566f 	.word	0x0801566f
 80156e8:	0801566f 	.word	0x0801566f
 80156ec:	0801566f 	.word	0x0801566f
 80156f0:	0801566f 	.word	0x0801566f
 80156f4:	0801566f 	.word	0x0801566f
 80156f8:	0801574b 	.word	0x0801574b
 80156fc:	0801566f 	.word	0x0801566f
 8015700:	0801566f 	.word	0x0801566f
 8015704:	0801566f 	.word	0x0801566f
 8015708:	0801566f 	.word	0x0801566f
 801570c:	0801566f 	.word	0x0801566f
 8015710:	0801566f 	.word	0x0801566f
 8015714:	0801566f 	.word	0x0801566f
 8015718:	0801573d 	.word	0x0801573d
 801571c:	0801566f 	.word	0x0801566f
 8015720:	0801566f 	.word	0x0801566f
 8015724:	0801566f 	.word	0x0801566f
 8015728:	0801566f 	.word	0x0801566f
 801572c:	0801566f 	.word	0x0801566f
 8015730:	0801566f 	.word	0x0801566f
 8015734:	0801566f 	.word	0x0801566f
 8015738:	0801573d 	.word	0x0801573d
 801573c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801573e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8015742:	961e      	str	r6, [sp, #120]	; 0x78
 8015744:	4604      	mov	r4, r0
 8015746:	2500      	movs	r5, #0
 8015748:	e791      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 801574a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801574c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8015750:	941e      	str	r4, [sp, #120]	; 0x78
 8015752:	2500      	movs	r5, #0
 8015754:	4604      	mov	r4, r0
 8015756:	e78a      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 8015758:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801575a:	442f      	add	r7, r5
 801575c:	971e      	str	r7, [sp, #120]	; 0x78
 801575e:	4604      	mov	r4, r0
 8015760:	2500      	movs	r5, #0
 8015762:	e784      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 8015764:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8015766:	f025 0001 	bic.w	r0, r5, #1
 801576a:	eb06 0665 	add.w	r6, r6, r5, asr #1
 801576e:	961e      	str	r6, [sp, #120]	; 0x78
 8015770:	4404      	add	r4, r0
 8015772:	f005 0501 	and.w	r5, r5, #1
 8015776:	e77a      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 8015778:	2002bff8 	.word	0x2002bff8
 801577c:	2002c040 	.word	0x2002c040
 8015780:	2000026c 	.word	0x2000026c
 8015784:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015786:	f025 0003 	bic.w	r0, r5, #3
 801578a:	eb07 07a5 	add.w	r7, r7, r5, asr #2
 801578e:	971e      	str	r7, [sp, #120]	; 0x78
 8015790:	4404      	add	r4, r0
 8015792:	f005 0503 	and.w	r5, r5, #3
 8015796:	e76a      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 8015798:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801579a:	f025 0007 	bic.w	r0, r5, #7
 801579e:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 80157a2:	961e      	str	r6, [sp, #120]	; 0x78
 80157a4:	4404      	add	r4, r0
 80157a6:	f005 0507 	and.w	r5, r5, #7
 80157aa:	e760      	b.n	801566e <LCD_DrawBitmap+0x1d2>
 80157ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80157ae:	464a      	mov	r2, r9
 80157b0:	460d      	mov	r5, r1
 80157b2:	e741      	b.n	8015638 <LCD_DrawBitmap+0x19c>

080157b4 <LCD_SetClipRectMax>:
 80157b4:	b508      	push	{r3, lr}
 80157b6:	4a05      	ldr	r2, [pc, #20]	; (80157cc <LCD_SetClipRectMax+0x18>)
 80157b8:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <LCD_SetClipRectMax+0x1c>)
 80157ba:	6811      	ldr	r1, [r2, #0]
 80157bc:	7c4a      	ldrb	r2, [r1, #17]
 80157be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80157c2:	68c3      	ldr	r3, [r0, #12]
 80157c4:	3108      	adds	r1, #8
 80157c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157c8:	4798      	blx	r3
 80157ca:	bd08      	pop	{r3, pc}
 80157cc:	2000026c 	.word	0x2000026c
 80157d0:	2002c040 	.word	0x2002c040

080157d4 <emWin_LCD_Init>:
 80157d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157d6:	4e3e      	ldr	r6, [pc, #248]	; (80158d0 <emWin_LCD_Init+0xfc>)
 80157d8:	4f3e      	ldr	r7, [pc, #248]	; (80158d4 <emWin_LCD_Init+0x100>)
 80157da:	6831      	ldr	r1, [r6, #0]
 80157dc:	7c4b      	ldrb	r3, [r1, #17]
 80157de:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80157e2:	68c3      	ldr	r3, [r0, #12]
 80157e4:	b085      	sub	sp, #20
 80157e6:	3108      	adds	r1, #8
 80157e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ea:	4798      	blx	r3
 80157ec:	f006 fed8 	bl	801c5a0 <LCD_InitColors>
 80157f0:	4604      	mov	r4, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d167      	bne.n	80158c6 <emWin_LCD_Init+0xf2>
 80157f6:	4605      	mov	r5, r0
 80157f8:	4628      	mov	r0, r5
 80157fa:	f001 fe67 	bl	80174cc <GUI_DEVICE__GetpDriver>
 80157fe:	210c      	movs	r1, #12
 8015800:	4603      	mov	r3, r0
 8015802:	3501      	adds	r5, #1
 8015804:	eb0d 0001 	add.w	r0, sp, r1
 8015808:	9303      	str	r3, [sp, #12]
 801580a:	b143      	cbz	r3, 801581e <emWin_LCD_Init+0x4a>
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015810:	4798      	blx	r3
 8015812:	4603      	mov	r3, r0
 8015814:	2800      	cmp	r0, #0
 8015816:	d059      	beq.n	80158cc <emWin_LCD_Init+0xf8>
 8015818:	9803      	ldr	r0, [sp, #12]
 801581a:	4798      	blx	r3
 801581c:	4304      	orrs	r4, r0
 801581e:	2d02      	cmp	r5, #2
 8015820:	d1ea      	bne.n	80157f8 <emWin_LCD_Init+0x24>
 8015822:	2c00      	cmp	r4, #0
 8015824:	d14f      	bne.n	80158c6 <emWin_LCD_Init+0xf2>
 8015826:	f006 ff15 	bl	801c654 <LCD_InitLUT>
 801582a:	4b2b      	ldr	r3, [pc, #172]	; (80158d8 <emWin_LCD_Init+0x104>)
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8015832:	429a      	cmp	r2, r3
 8015834:	d044      	beq.n	80158c0 <emWin_LCD_Init+0xec>
 8015836:	4d29      	ldr	r5, [pc, #164]	; (80158dc <emWin_LCD_Init+0x108>)
 8015838:	2401      	movs	r4, #1
 801583a:	4620      	mov	r0, r4
 801583c:	f001 fe46 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8015840:	4603      	mov	r3, r0
 8015842:	9303      	str	r3, [sp, #12]
 8015844:	4620      	mov	r0, r4
 8015846:	3c01      	subs	r4, #1
 8015848:	2b00      	cmp	r3, #0
 801584a:	d037      	beq.n	80158bc <emWin_LCD_Init+0xe8>
 801584c:	f001 fa30 	bl	8016cb0 <GUI_SelectLayer>
 8015850:	682b      	ldr	r3, [r5, #0]
 8015852:	2004      	movs	r0, #4
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	4798      	blx	r3
 8015858:	6830      	ldr	r0, [r6, #0]
 801585a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801585e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8015862:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8015866:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801586a:	4563      	cmp	r3, ip
 801586c:	bfa8      	it	ge
 801586e:	4663      	movge	r3, ip
 8015870:	4299      	cmp	r1, r3
 8015872:	dc14      	bgt.n	801589e <emWin_LCD_Init+0xca>
 8015874:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015878:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801587c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015880:	45e6      	cmp	lr, ip
 8015882:	bfa8      	it	ge
 8015884:	46e6      	movge	lr, ip
 8015886:	4572      	cmp	r2, lr
 8015888:	dc09      	bgt.n	801589e <emWin_LCD_Init+0xca>
 801588a:	7c40      	ldrb	r0, [r0, #17]
 801588c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8015890:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8015894:	f8cd e000 	str.w	lr, [sp]
 8015898:	f8dc c010 	ldr.w	ip, [ip, #16]
 801589c:	47e0      	blx	ip
 801589e:	682b      	ldr	r3, [r5, #0]
 80158a0:	2000      	movs	r0, #0
 80158a2:	689b      	ldr	r3, [r3, #8]
 80158a4:	4798      	blx	r3
 80158a6:	a804      	add	r0, sp, #16
 80158a8:	210e      	movs	r1, #14
 80158aa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80158ae:	68db      	ldr	r3, [r3, #12]
 80158b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b2:	4798      	blx	r3
 80158b4:	4603      	mov	r3, r0
 80158b6:	b108      	cbz	r0, 80158bc <emWin_LCD_Init+0xe8>
 80158b8:	9803      	ldr	r0, [sp, #12]
 80158ba:	4798      	blx	r3
 80158bc:	1c63      	adds	r3, r4, #1
 80158be:	d1bc      	bne.n	801583a <emWin_LCD_Init+0x66>
 80158c0:	2000      	movs	r0, #0
 80158c2:	b005      	add	sp, #20
 80158c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c6:	4620      	mov	r0, r4
 80158c8:	b005      	add	sp, #20
 80158ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158cc:	2001      	movs	r0, #1
 80158ce:	e7fb      	b.n	80158c8 <emWin_LCD_Init+0xf4>
 80158d0:	2000026c 	.word	0x2000026c
 80158d4:	2002c040 	.word	0x2002c040
 80158d8:	2000027c 	.word	0x2000027c
 80158dc:	2000023c 	.word	0x2000023c

080158e0 <LCD_Color2Index>:
 80158e0:	b508      	push	{r3, lr}
 80158e2:	4a05      	ldr	r2, [pc, #20]	; (80158f8 <LCD_Color2Index+0x18>)
 80158e4:	4b05      	ldr	r3, [pc, #20]	; (80158fc <LCD_Color2Index+0x1c>)
 80158e6:	6812      	ldr	r2, [r2, #0]
 80158e8:	7c52      	ldrb	r2, [r2, #17]
 80158ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158ee:	691b      	ldr	r3, [r3, #16]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	4798      	blx	r3
 80158f4:	bd08      	pop	{r3, pc}
 80158f6:	bf00      	nop
 80158f8:	2000026c 	.word	0x2000026c
 80158fc:	2002c040 	.word	0x2002c040

08015900 <LCD_Index2Color>:
 8015900:	b508      	push	{r3, lr}
 8015902:	4a05      	ldr	r2, [pc, #20]	; (8015918 <LCD_Index2Color+0x18>)
 8015904:	4b05      	ldr	r3, [pc, #20]	; (801591c <LCD_Index2Color+0x1c>)
 8015906:	6812      	ldr	r2, [r2, #0]
 8015908:	7c52      	ldrb	r2, [r2, #17]
 801590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801590e:	691b      	ldr	r3, [r3, #16]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	4798      	blx	r3
 8015914:	bd08      	pop	{r3, pc}
 8015916:	bf00      	nop
 8015918:	2000026c 	.word	0x2000026c
 801591c:	2002c040 	.word	0x2002c040

08015920 <LCD_SetColorIndex>:
 8015920:	4b04      	ldr	r3, [pc, #16]	; (8015934 <LCD_SetColorIndex+0x14>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	7c1a      	ldrb	r2, [r3, #16]
 8015926:	0752      	lsls	r2, r2, #29
 8015928:	bf4c      	ite	mi
 801592a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 801592c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 801592e:	6018      	str	r0, [r3, #0]
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	2000026c 	.word	0x2000026c

08015938 <LCD_SetBkColorIndex>:
 8015938:	4b04      	ldr	r3, [pc, #16]	; (801594c <LCD_SetBkColorIndex+0x14>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	7c1a      	ldrb	r2, [r3, #16]
 801593e:	0752      	lsls	r2, r2, #29
 8015940:	bf4c      	ite	mi
 8015942:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8015944:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8015946:	6018      	str	r0, [r3, #0]
 8015948:	4770      	bx	lr
 801594a:	bf00      	nop
 801594c:	2000026c 	.word	0x2000026c

08015950 <LCD_SetBkColor>:
 8015950:	b508      	push	{r3, lr}
 8015952:	4b02      	ldr	r3, [pc, #8]	; (801595c <LCD_SetBkColor+0xc>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	4798      	blx	r3
 801595a:	bd08      	pop	{r3, pc}
 801595c:	2000023c 	.word	0x2000023c

08015960 <LCD_SetColor>:
 8015960:	b508      	push	{r3, lr}
 8015962:	4b02      	ldr	r3, [pc, #8]	; (801596c <LCD_SetColor+0xc>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	4798      	blx	r3
 801596a:	bd08      	pop	{r3, pc}
 801596c:	2000023c 	.word	0x2000023c

08015970 <LCD_SetPixelIndex>:
 8015970:	4b10      	ldr	r3, [pc, #64]	; (80159b4 <LCD_SetPixelIndex+0x44>)
 8015972:	b570      	push	{r4, r5, r6, lr}
 8015974:	681c      	ldr	r4, [r3, #0]
 8015976:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801597a:	4285      	cmp	r5, r0
 801597c:	460e      	mov	r6, r1
 801597e:	4613      	mov	r3, r2
 8015980:	dc0b      	bgt.n	801599a <LCD_SetPixelIndex+0x2a>
 8015982:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015986:	4288      	cmp	r0, r1
 8015988:	dc07      	bgt.n	801599a <LCD_SetPixelIndex+0x2a>
 801598a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801598e:	42b2      	cmp	r2, r6
 8015990:	dc03      	bgt.n	801599a <LCD_SetPixelIndex+0x2a>
 8015992:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8015996:	4296      	cmp	r6, r2
 8015998:	dd00      	ble.n	801599c <LCD_SetPixelIndex+0x2c>
 801599a:	bd70      	pop	{r4, r5, r6, pc}
 801599c:	7c61      	ldrb	r1, [r4, #17]
 801599e:	4a06      	ldr	r2, [pc, #24]	; (80159b8 <LCD_SetPixelIndex+0x48>)
 80159a0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80159a4:	68e5      	ldr	r5, [r4, #12]
 80159a6:	4601      	mov	r1, r0
 80159a8:	4632      	mov	r2, r6
 80159aa:	69ad      	ldr	r5, [r5, #24]
 80159ac:	4620      	mov	r0, r4
 80159ae:	47a8      	blx	r5
 80159b0:	e7f3      	b.n	801599a <LCD_SetPixelIndex+0x2a>
 80159b2:	bf00      	nop
 80159b4:	2000026c 	.word	0x2000026c
 80159b8:	2002c040 	.word	0x2002c040

080159bc <GUI__CalcTextRect>:
 80159bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c0:	460d      	mov	r5, r1
 80159c2:	4614      	mov	r4, r2
 80159c4:	461e      	mov	r6, r3
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d042      	beq.n	8015a50 <GUI__CalcTextRect+0x94>
 80159ca:	f001 fd75 	bl	80174b8 <GUI_GetStringDistX>
 80159ce:	f006 0303 	and.w	r3, r6, #3
 80159d2:	2b01      	cmp	r3, #1
 80159d4:	4680      	mov	r8, r0
 80159d6:	d02b      	beq.n	8015a30 <GUI__CalcTextRect+0x74>
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d142      	bne.n	8015a62 <GUI__CalcTextRect+0xa6>
 80159dc:	f9b5 3000 	ldrsh.w	r3, [r5]
 80159e0:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 80159e4:	1aff      	subs	r7, r7, r3
 80159e6:	3701      	adds	r7, #1
 80159e8:	1a3f      	subs	r7, r7, r0
 80159ea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80159ee:	eb03 0767 	add.w	r7, r3, r7, asr #1
 80159f2:	f006 060c 	and.w	r6, r6, #12
 80159f6:	f002 fd5f 	bl	80184b8 <GUI_GetFontDistY>
 80159fa:	2e04      	cmp	r6, #4
 80159fc:	d023      	beq.n	8015a46 <GUI__CalcTextRect+0x8a>
 80159fe:	2e0c      	cmp	r6, #12
 8015a00:	d12c      	bne.n	8015a5c <GUI__CalcTextRect+0xa0>
 8015a02:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015a06:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015a0a:	1a9b      	subs	r3, r3, r2
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	1a1b      	subs	r3, r3, r0
 8015a10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015a14:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8015a18:	f108 38ff 	add.w	r8, r8, #4294967295
 8015a1c:	3801      	subs	r0, #1
 8015a1e:	44b8      	add	r8, r7
 8015a20:	4418      	add	r0, r3
 8015a22:	f8a4 8004 	strh.w	r8, [r4, #4]
 8015a26:	80e0      	strh	r0, [r4, #6]
 8015a28:	8027      	strh	r7, [r4, #0]
 8015a2a:	8063      	strh	r3, [r4, #2]
 8015a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a30:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8015a34:	f006 060c 	and.w	r6, r6, #12
 8015a38:	1a3f      	subs	r7, r7, r0
 8015a3a:	f002 fd3d 	bl	80184b8 <GUI_GetFontDistY>
 8015a3e:	2e04      	cmp	r6, #4
 8015a40:	f107 0701 	add.w	r7, r7, #1
 8015a44:	d1db      	bne.n	80159fe <GUI__CalcTextRect+0x42>
 8015a46:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015a4a:	1a1b      	subs	r3, r3, r0
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	e7e3      	b.n	8015a18 <GUI__CalcTextRect+0x5c>
 8015a50:	680b      	ldr	r3, [r1, #0]
 8015a52:	684a      	ldr	r2, [r1, #4]
 8015a54:	6062      	str	r2, [r4, #4]
 8015a56:	6023      	str	r3, [r4, #0]
 8015a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a5c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015a60:	e7da      	b.n	8015a18 <GUI__CalcTextRect+0x5c>
 8015a62:	f9b5 7000 	ldrsh.w	r7, [r5]
 8015a66:	e7c4      	b.n	80159f2 <GUI__CalcTextRect+0x36>

08015a68 <GUI__DivideRound32>:
 8015a68:	b141      	cbz	r1, 8015a7c <GUI__DivideRound32+0x14>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	bfb4      	ite	lt
 8015a6e:	eba0 0061 	sublt.w	r0, r0, r1, asr #1
 8015a72:	eb00 0061 	addge.w	r0, r0, r1, asr #1
 8015a76:	fb90 f0f1 	sdiv	r0, r0, r1
 8015a7a:	4770      	bx	lr
 8015a7c:	4608      	mov	r0, r1
 8015a7e:	4770      	bx	lr

08015a80 <GUI__HandleEOLine>:
 8015a80:	b510      	push	{r4, lr}
 8015a82:	4604      	mov	r4, r0
 8015a84:	b082      	sub	sp, #8
 8015a86:	a802      	add	r0, sp, #8
 8015a88:	6822      	ldr	r2, [r4, #0]
 8015a8a:	f840 2d04 	str.w	r2, [r0, #-4]!
 8015a8e:	f000 fd27 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 8015a92:	b2c0      	uxtb	r0, r0
 8015a94:	b148      	cbz	r0, 8015aaa <GUI__HandleEOLine+0x2a>
 8015a96:	280a      	cmp	r0, #10
 8015a98:	d002      	beq.n	8015aa0 <GUI__HandleEOLine+0x20>
 8015a9a:	2000      	movs	r0, #0
 8015a9c:	b002      	add	sp, #8
 8015a9e:	bd10      	pop	{r4, pc}
 8015aa0:	9b01      	ldr	r3, [sp, #4]
 8015aa2:	6023      	str	r3, [r4, #0]
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	b002      	add	sp, #8
 8015aa8:	bd10      	pop	{r4, pc}
 8015aaa:	2001      	movs	r0, #1
 8015aac:	b002      	add	sp, #8
 8015aae:	bd10      	pop	{r4, pc}

08015ab0 <GUI__IntersectRect>:
 8015ab0:	880b      	ldrh	r3, [r1, #0]
 8015ab2:	b410      	push	{r4}
 8015ab4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015ab8:	b21a      	sxth	r2, r3
 8015aba:	4294      	cmp	r4, r2
 8015abc:	bfb8      	it	lt
 8015abe:	8003      	strhlt	r3, [r0, #0]
 8015ac0:	884b      	ldrh	r3, [r1, #2]
 8015ac2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015ac6:	b21a      	sxth	r2, r3
 8015ac8:	4294      	cmp	r4, r2
 8015aca:	bfb8      	it	lt
 8015acc:	8043      	strhlt	r3, [r0, #2]
 8015ace:	888b      	ldrh	r3, [r1, #4]
 8015ad0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015ad4:	b21a      	sxth	r2, r3
 8015ad6:	4294      	cmp	r4, r2
 8015ad8:	bfc8      	it	gt
 8015ada:	8083      	strhgt	r3, [r0, #4]
 8015adc:	88cb      	ldrh	r3, [r1, #6]
 8015ade:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ae6:	b21a      	sxth	r2, r3
 8015ae8:	4291      	cmp	r1, r2
 8015aea:	bfc8      	it	gt
 8015aec:	80c3      	strhgt	r3, [r0, #6]
 8015aee:	4770      	bx	lr

08015af0 <GUI__IntersectRects>:
 8015af0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8015af4:	f9b2 c000 	ldrsh.w	ip, [r2]
 8015af8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015afc:	f9b1 8000 	ldrsh.w	r8, [r1]
 8015b00:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8015b04:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015b08:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8015b0c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015b10:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8015b14:	429f      	cmp	r7, r3
 8015b16:	bfb8      	it	lt
 8015b18:	463b      	movlt	r3, r7
 8015b1a:	45e0      	cmp	r8, ip
 8015b1c:	bfac      	ite	ge
 8015b1e:	4642      	movge	r2, r8
 8015b20:	4662      	movlt	r2, ip
 8015b22:	b292      	uxth	r2, r2
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	42a6      	cmp	r6, r4
 8015b28:	bfa8      	it	ge
 8015b2a:	4634      	movge	r4, r6
 8015b2c:	428d      	cmp	r5, r1
 8015b2e:	bfb8      	it	lt
 8015b30:	4629      	movlt	r1, r5
 8015b32:	fa0f fc82 	sxth.w	ip, r2
 8015b36:	b21f      	sxth	r7, r3
 8015b38:	b2a4      	uxth	r4, r4
 8015b3a:	b289      	uxth	r1, r1
 8015b3c:	45bc      	cmp	ip, r7
 8015b3e:	8002      	strh	r2, [r0, #0]
 8015b40:	8083      	strh	r3, [r0, #4]
 8015b42:	8044      	strh	r4, [r0, #2]
 8015b44:	80c1      	strh	r1, [r0, #6]
 8015b46:	dc08      	bgt.n	8015b5a <GUI__IntersectRects+0x6a>
 8015b48:	b224      	sxth	r4, r4
 8015b4a:	b209      	sxth	r1, r1
 8015b4c:	428c      	cmp	r4, r1
 8015b4e:	bfcc      	ite	gt
 8015b50:	2000      	movgt	r0, #0
 8015b52:	2001      	movle	r0, #1
 8015b54:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8015b58:	4770      	bx	lr
 8015b5a:	2000      	movs	r0, #0
 8015b5c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop

08015b64 <GUI__memset>:
 8015b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b66:	b2c9      	uxtb	r1, r1
 8015b68:	4607      	mov	r7, r0
 8015b6a:	b14a      	cbz	r2, 8015b80 <GUI__memset+0x1c>
 8015b6c:	0784      	lsls	r4, r0, #30
 8015b6e:	4603      	mov	r3, r0
 8015b70:	d008      	beq.n	8015b84 <GUI__memset+0x20>
 8015b72:	e001      	b.n	8015b78 <GUI__memset+0x14>
 8015b74:	0798      	lsls	r0, r3, #30
 8015b76:	d005      	beq.n	8015b84 <GUI__memset+0x20>
 8015b78:	3a01      	subs	r2, #1
 8015b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8015b7e:	d1f9      	bne.n	8015b74 <GUI__memset+0x10>
 8015b80:	4638      	mov	r0, r7
 8015b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b84:	0890      	lsrs	r0, r2, #2
 8015b86:	4684      	mov	ip, r0
 8015b88:	b320      	cbz	r0, 8015bd4 <GUI__memset+0x70>
 8015b8a:	eb01 2501 	add.w	r5, r1, r1, lsl #8
 8015b8e:	2803      	cmp	r0, #3
 8015b90:	f002 0203 	and.w	r2, r2, #3
 8015b94:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8015b98:	dd12      	ble.n	8015bc0 <GUI__memset+0x5c>
 8015b9a:	461c      	mov	r4, r3
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	3e04      	subs	r6, #4
 8015ba0:	2e03      	cmp	r6, #3
 8015ba2:	6025      	str	r5, [r4, #0]
 8015ba4:	6065      	str	r5, [r4, #4]
 8015ba6:	60a5      	str	r5, [r4, #8]
 8015ba8:	60e5      	str	r5, [r4, #12]
 8015baa:	f104 0410 	add.w	r4, r4, #16
 8015bae:	dcf6      	bgt.n	8015b9e <GUI__memset+0x3a>
 8015bb0:	3804      	subs	r0, #4
 8015bb2:	0884      	lsrs	r4, r0, #2
 8015bb4:	1c66      	adds	r6, r4, #1
 8015bb6:	ebb0 0c84 	subs.w	ip, r0, r4, lsl #2
 8015bba:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8015bbe:	d007      	beq.n	8015bd0 <GUI__memset+0x6c>
 8015bc0:	461e      	mov	r6, r3
 8015bc2:	4664      	mov	r4, ip
 8015bc4:	3c01      	subs	r4, #1
 8015bc6:	f846 5b04 	str.w	r5, [r6], #4
 8015bca:	d1fb      	bne.n	8015bc4 <GUI__memset+0x60>
 8015bcc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8015bd0:	2a00      	cmp	r2, #0
 8015bd2:	d0d5      	beq.n	8015b80 <GUI__memset+0x1c>
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f008 fa36 	bl	801e046 <memset>
 8015bda:	4638      	mov	r0, r7
 8015bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bde:	bf00      	nop

08015be0 <GUI__ReduceRect>:
 8015be0:	b470      	push	{r4, r5, r6}
 8015be2:	88cb      	ldrh	r3, [r1, #6]
 8015be4:	880e      	ldrh	r6, [r1, #0]
 8015be6:	888d      	ldrh	r5, [r1, #4]
 8015be8:	884c      	ldrh	r4, [r1, #2]
 8015bea:	b292      	uxth	r2, r2
 8015bec:	4416      	add	r6, r2
 8015bee:	1aad      	subs	r5, r5, r2
 8015bf0:	4414      	add	r4, r2
 8015bf2:	1a9a      	subs	r2, r3, r2
 8015bf4:	8006      	strh	r6, [r0, #0]
 8015bf6:	8085      	strh	r5, [r0, #4]
 8015bf8:	8044      	strh	r4, [r0, #2]
 8015bfa:	80c2      	strh	r2, [r0, #6]
 8015bfc:	bc70      	pop	{r4, r5, r6}
 8015bfe:	4770      	bx	lr

08015c00 <GUI__SetText>:
 8015c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c02:	6807      	ldr	r7, [r0, #0]
 8015c04:	b083      	sub	sp, #12
 8015c06:	4606      	mov	r6, r0
 8015c08:	460d      	mov	r5, r1
 8015c0a:	b9c7      	cbnz	r7, 8015c3e <GUI__SetText+0x3e>
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	d05a      	beq.n	8015cc6 <GUI__SetText+0xc6>
 8015c10:	f04f 32ff 	mov.w	r2, #4294967295
 8015c14:	e000      	b.n	8015c18 <GUI__SetText+0x18>
 8015c16:	461a      	mov	r2, r3
 8015c18:	1c53      	adds	r3, r2, #1
 8015c1a:	5cec      	ldrb	r4, [r5, r3]
 8015c1c:	2c00      	cmp	r4, #0
 8015c1e:	d1fa      	bne.n	8015c16 <GUI__SetText+0x16>
 8015c20:	4638      	mov	r0, r7
 8015c22:	1c94      	adds	r4, r2, #2
 8015c24:	f003 fbaa 	bl	801937c <GUI_ALLOC_GetSize>
 8015c28:	4284      	cmp	r4, r0
 8015c2a:	d026      	beq.n	8015c7a <GUI__SetText+0x7a>
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	f003 fa87 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 8015c32:	4607      	mov	r7, r0
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d130      	bne.n	8015c9a <GUI__SetText+0x9a>
 8015c38:	2000      	movs	r0, #0
 8015c3a:	b003      	add	sp, #12
 8015c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c3e:	4638      	mov	r0, r7
 8015c40:	f003 fa96 	bl	8019170 <GUI_ALLOC_LockH>
 8015c44:	4b23      	ldr	r3, [pc, #140]	; (8015cd4 <GUI__SetText+0xd4>)
 8015c46:	9001      	str	r0, [sp, #4]
 8015c48:	2d00      	cmp	r5, #0
 8015c4a:	bf14      	ite	ne
 8015c4c:	462a      	movne	r2, r5
 8015c4e:	461a      	moveq	r2, r3
 8015c50:	2800      	cmp	r0, #0
 8015c52:	bf08      	it	eq
 8015c54:	4618      	moveq	r0, r3
 8015c56:	7813      	ldrb	r3, [r2, #0]
 8015c58:	7801      	ldrb	r1, [r0, #0]
 8015c5a:	428b      	cmp	r3, r1
 8015c5c:	d109      	bne.n	8015c72 <GUI__SetText+0x72>
 8015c5e:	b373      	cbz	r3, 8015cbe <GUI__SetText+0xbe>
 8015c60:	4604      	mov	r4, r0
 8015c62:	e000      	b.n	8015c66 <GUI__SetText+0x66>
 8015c64:	b35b      	cbz	r3, 8015cbe <GUI__SetText+0xbe>
 8015c66:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015c6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8015c6e:	428b      	cmp	r3, r1
 8015c70:	d0f8      	beq.n	8015c64 <GUI__SetText+0x64>
 8015c72:	a801      	add	r0, sp, #4
 8015c74:	f003 fa8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8015c78:	e7c8      	b.n	8015c0c <GUI__SetText+0xc>
 8015c7a:	4638      	mov	r0, r7
 8015c7c:	f003 fa78 	bl	8019170 <GUI_ALLOC_LockH>
 8015c80:	ae02      	add	r6, sp, #8
 8015c82:	4b15      	ldr	r3, [pc, #84]	; (8015cd8 <GUI__SetText+0xd8>)
 8015c84:	f846 0d04 	str.w	r0, [r6, #-4]!
 8015c88:	4629      	mov	r1, r5
 8015c8a:	4622      	mov	r2, r4
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	4798      	blx	r3
 8015c90:	4630      	mov	r0, r6
 8015c92:	f003 fa7f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8015c96:	2001      	movs	r0, #1
 8015c98:	e7cf      	b.n	8015c3a <GUI__SetText+0x3a>
 8015c9a:	f003 fa69 	bl	8019170 <GUI_ALLOC_LockH>
 8015c9e:	ac02      	add	r4, sp, #8
 8015ca0:	4629      	mov	r1, r5
 8015ca2:	f844 0d04 	str.w	r0, [r4, #-4]!
 8015ca6:	f008 fa93 	bl	801e1d0 <strcpy>
 8015caa:	4620      	mov	r0, r4
 8015cac:	f003 fa72 	bl	8019194 <GUI_ALLOC_UnlockH>
 8015cb0:	4630      	mov	r0, r6
 8015cb2:	f003 fb8f 	bl	80193d4 <GUI_ALLOC_FreePtr>
 8015cb6:	2001      	movs	r0, #1
 8015cb8:	6037      	str	r7, [r6, #0]
 8015cba:	b003      	add	sp, #12
 8015cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cbe:	a801      	add	r0, sp, #4
 8015cc0:	f003 fa68 	bl	8019194 <GUI_ALLOC_UnlockH>
 8015cc4:	e7b8      	b.n	8015c38 <GUI__SetText+0x38>
 8015cc6:	4638      	mov	r0, r7
 8015cc8:	f003 fb58 	bl	801937c <GUI_ALLOC_GetSize>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d0b3      	beq.n	8015c38 <GUI__SetText+0x38>
 8015cd0:	462c      	mov	r4, r5
 8015cd2:	e7ab      	b.n	8015c2c <GUI__SetText+0x2c>
 8015cd4:	0801e468 	.word	0x0801e468
 8015cd8:	20000244 	.word	0x20000244

08015cdc <GUI__sqrt32>:
 8015cdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015ce0:	bf2c      	ite	cs
 8015ce2:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8015ce6:	2300      	movcc	r3, #0
 8015ce8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015cec:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8015cf0:	bf28      	it	cs
 8015cf2:	4608      	movcs	r0, r1
 8015cf4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8015cf8:	4290      	cmp	r0, r2
 8015cfa:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 8015cfe:	bf28      	it	cs
 8015d00:	460b      	movcs	r3, r1
 8015d02:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d06:	ebc2 0200 	rsb	r2, r2, r0
 8015d0a:	bf38      	it	cc
 8015d0c:	4602      	movcc	r2, r0
 8015d0e:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 8015d12:	428a      	cmp	r2, r1
 8015d14:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 8015d18:	bf28      	it	cs
 8015d1a:	4603      	movcs	r3, r0
 8015d1c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d20:	ebc1 0102 	rsb	r1, r1, r2
 8015d24:	bf38      	it	cc
 8015d26:	4611      	movcc	r1, r2
 8015d28:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 8015d2c:	4291      	cmp	r1, r2
 8015d2e:	f103 7000 	add.w	r0, r3, #33554432	; 0x2000000
 8015d32:	bf28      	it	cs
 8015d34:	4603      	movcs	r3, r0
 8015d36:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d3a:	ebc2 0201 	rsb	r2, r2, r1
 8015d3e:	bf38      	it	cc
 8015d40:	460a      	movcc	r2, r1
 8015d42:	f503 0180 	add.w	r1, r3, #4194304	; 0x400000
 8015d46:	428a      	cmp	r2, r1
 8015d48:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 8015d4c:	bf28      	it	cs
 8015d4e:	4603      	movcs	r3, r0
 8015d50:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d54:	ebc1 0102 	rsb	r1, r1, r2
 8015d58:	bf38      	it	cc
 8015d5a:	4611      	movcc	r1, r2
 8015d5c:	f503 1280 	add.w	r2, r3, #1048576	; 0x100000
 8015d60:	4291      	cmp	r1, r2
 8015d62:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 8015d66:	bf28      	it	cs
 8015d68:	4603      	movcs	r3, r0
 8015d6a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d6e:	ebc2 0201 	rsb	r2, r2, r1
 8015d72:	bf38      	it	cc
 8015d74:	460a      	movcc	r2, r1
 8015d76:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
 8015d7a:	428a      	cmp	r2, r1
 8015d7c:	f503 2000 	add.w	r0, r3, #524288	; 0x80000
 8015d80:	bf28      	it	cs
 8015d82:	4603      	movcs	r3, r0
 8015d84:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015d88:	ebc1 0102 	rsb	r1, r1, r2
 8015d8c:	bf38      	it	cc
 8015d8e:	4611      	movcc	r1, r2
 8015d90:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8015d94:	4291      	cmp	r1, r2
 8015d96:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8015d9a:	bf28      	it	cs
 8015d9c:	4603      	movcs	r3, r0
 8015d9e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015da2:	ebc2 0201 	rsb	r2, r2, r1
 8015da6:	bf38      	it	cc
 8015da8:	460a      	movcc	r2, r1
 8015daa:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8015dae:	428a      	cmp	r2, r1
 8015db0:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8015db4:	bf28      	it	cs
 8015db6:	4603      	movcs	r3, r0
 8015db8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015dbc:	ebc1 0102 	rsb	r1, r1, r2
 8015dc0:	bf38      	it	cc
 8015dc2:	4611      	movcc	r1, r2
 8015dc4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8015dc8:	4291      	cmp	r1, r2
 8015dca:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 8015dce:	bf28      	it	cs
 8015dd0:	4603      	movcs	r3, r0
 8015dd2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015dd6:	ebc2 0201 	rsb	r2, r2, r1
 8015dda:	bf38      	it	cc
 8015ddc:	460a      	movcc	r2, r1
 8015dde:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 8015de2:	428a      	cmp	r2, r1
 8015de4:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8015de8:	bf28      	it	cs
 8015dea:	4603      	movcs	r3, r0
 8015dec:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015df0:	ebc1 0102 	rsb	r1, r1, r2
 8015df4:	bf38      	it	cc
 8015df6:	4611      	movcc	r1, r2
 8015df8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8015dfc:	4291      	cmp	r1, r2
 8015dfe:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8015e02:	bf28      	it	cs
 8015e04:	4603      	movcs	r3, r0
 8015e06:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015e0a:	ebc2 0201 	rsb	r2, r2, r1
 8015e0e:	bf38      	it	cc
 8015e10:	460a      	movcc	r2, r1
 8015e12:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8015e16:	428a      	cmp	r2, r1
 8015e18:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8015e1c:	bf28      	it	cs
 8015e1e:	4603      	movcs	r3, r0
 8015e20:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015e24:	ebc1 0102 	rsb	r1, r1, r2
 8015e28:	bf38      	it	cc
 8015e2a:	4611      	movcc	r1, r2
 8015e2c:	f103 0210 	add.w	r2, r3, #16
 8015e30:	4291      	cmp	r1, r2
 8015e32:	f103 0020 	add.w	r0, r3, #32
 8015e36:	bf28      	it	cs
 8015e38:	4603      	movcs	r3, r0
 8015e3a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015e3e:	ebc2 0201 	rsb	r2, r2, r1
 8015e42:	bf38      	it	cc
 8015e44:	460a      	movcc	r2, r1
 8015e46:	1d19      	adds	r1, r3, #4
 8015e48:	428a      	cmp	r2, r1
 8015e4a:	f103 0008 	add.w	r0, r3, #8
 8015e4e:	bf28      	it	cs
 8015e50:	4603      	movcs	r3, r0
 8015e52:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015e56:	ebc1 0102 	rsb	r1, r1, r2
 8015e5a:	bf28      	it	cs
 8015e5c:	460a      	movcs	r2, r1
 8015e5e:	1c98      	adds	r0, r3, #2
 8015e60:	1c59      	adds	r1, r3, #1
 8015e62:	4291      	cmp	r1, r2
 8015e64:	bf88      	it	hi
 8015e66:	4618      	movhi	r0, r3
 8015e68:	0840      	lsrs	r0, r0, #1
 8015e6a:	4770      	bx	lr

08015e6c <GUI__ManageCache>:
 8015e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e6e:	4b3a      	ldr	r3, [pc, #232]	; (8015f58 <GUI__ManageCache+0xec>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	7c5c      	ldrb	r4, [r3, #17]
 8015e74:	2c01      	cmp	r4, #1
 8015e76:	b083      	sub	sp, #12
 8015e78:	4605      	mov	r5, r0
 8015e7a:	dd02      	ble.n	8015e82 <GUI__ManageCache+0x16>
 8015e7c:	2001      	movs	r0, #1
 8015e7e:	b003      	add	sp, #12
 8015e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e82:	4b36      	ldr	r3, [pc, #216]	; (8015f5c <GUI__ManageCache+0xf0>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	b113      	cbz	r3, 8015e8e <GUI__ManageCache+0x22>
 8015e88:	4620      	mov	r0, r4
 8015e8a:	4629      	mov	r1, r5
 8015e8c:	4798      	blx	r3
 8015e8e:	2d01      	cmp	r5, #1
 8015e90:	d026      	beq.n	8015ee0 <GUI__ManageCache+0x74>
 8015e92:	2d02      	cmp	r5, #2
 8015e94:	d00d      	beq.n	8015eb2 <GUI__ManageCache+0x46>
 8015e96:	2d00      	cmp	r5, #0
 8015e98:	d1f0      	bne.n	8015e7c <GUI__ManageCache+0x10>
 8015e9a:	4d31      	ldr	r5, [pc, #196]	; (8015f60 <GUI__ManageCache+0xf4>)
 8015e9c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d03e      	beq.n	8015f22 <GUI__ManageCache+0xb6>
 8015ea4:	2001      	movs	r0, #1
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	bf18      	it	ne
 8015eaa:	3b01      	subne	r3, #1
 8015eac:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8015eb0:	e7e5      	b.n	8015e7e <GUI__ManageCache+0x12>
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	f001 fb0a 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8015eb8:	9001      	str	r0, [sp, #4]
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d0de      	beq.n	8015e7c <GUI__ManageCache+0x10>
 8015ebe:	68c3      	ldr	r3, [r0, #12]
 8015ec0:	210d      	movs	r1, #13
 8015ec2:	a801      	add	r0, sp, #4
 8015ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec6:	4798      	blx	r3
 8015ec8:	4604      	mov	r4, r0
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	d0d6      	beq.n	8015e7c <GUI__ManageCache+0x10>
 8015ece:	4b25      	ldr	r3, [pc, #148]	; (8015f64 <GUI__ManageCache+0xf8>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	b103      	cbz	r3, 8015ed6 <GUI__ManageCache+0x6a>
 8015ed4:	4798      	blx	r3
 8015ed6:	9801      	ldr	r0, [sp, #4]
 8015ed8:	2102      	movs	r1, #2
 8015eda:	47a0      	blx	r4
 8015edc:	2000      	movs	r0, #0
 8015ede:	e7ce      	b.n	8015e7e <GUI__ManageCache+0x12>
 8015ee0:	4e1f      	ldr	r6, [pc, #124]	; (8015f60 <GUI__ManageCache+0xf4>)
 8015ee2:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8015ee6:	b127      	cbz	r7, 8015ef2 <GUI__ManageCache+0x86>
 8015ee8:	3701      	adds	r7, #1
 8015eea:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8015eee:	4628      	mov	r0, r5
 8015ef0:	e7c5      	b.n	8015e7e <GUI__ManageCache+0x12>
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f001 faea 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8015ef8:	9001      	str	r0, [sp, #4]
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d0be      	beq.n	8015e7c <GUI__ManageCache+0x10>
 8015efe:	68c3      	ldr	r3, [r0, #12]
 8015f00:	210d      	movs	r1, #13
 8015f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f04:	a801      	add	r0, sp, #4
 8015f06:	4798      	blx	r3
 8015f08:	4603      	mov	r3, r0
 8015f0a:	2800      	cmp	r0, #0
 8015f0c:	d0b6      	beq.n	8015e7c <GUI__ManageCache+0x10>
 8015f0e:	4629      	mov	r1, r5
 8015f10:	9801      	ldr	r0, [sp, #4]
 8015f12:	4798      	blx	r3
 8015f14:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8015f18:	3301      	adds	r3, #1
 8015f1a:	4638      	mov	r0, r7
 8015f1c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8015f20:	e7ad      	b.n	8015e7e <GUI__ManageCache+0x12>
 8015f22:	4620      	mov	r0, r4
 8015f24:	f001 fad2 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8015f28:	9001      	str	r0, [sp, #4]
 8015f2a:	b188      	cbz	r0, 8015f50 <GUI__ManageCache+0xe4>
 8015f2c:	68c3      	ldr	r3, [r0, #12]
 8015f2e:	210d      	movs	r1, #13
 8015f30:	a801      	add	r0, sp, #4
 8015f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f34:	4798      	blx	r3
 8015f36:	4606      	mov	r6, r0
 8015f38:	b150      	cbz	r0, 8015f50 <GUI__ManageCache+0xe4>
 8015f3a:	4b0a      	ldr	r3, [pc, #40]	; (8015f64 <GUI__ManageCache+0xf8>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	b103      	cbz	r3, 8015f42 <GUI__ManageCache+0xd6>
 8015f40:	4798      	blx	r3
 8015f42:	9801      	ldr	r0, [sp, #4]
 8015f44:	2100      	movs	r1, #0
 8015f46:	47b0      	blx	r6
 8015f48:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	e7aa      	b.n	8015ea6 <GUI__ManageCache+0x3a>
 8015f50:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015f54:	2001      	movs	r0, #1
 8015f56:	e7a6      	b.n	8015ea6 <GUI__ManageCache+0x3a>
 8015f58:	2000026c 	.word	0x2000026c
 8015f5c:	2002aee4 	.word	0x2002aee4
 8015f60:	2002aedc 	.word	0x2002aedc
 8015f64:	2002aed8 	.word	0x2002aed8

08015f68 <_GetCursorPosX>:
 8015f68:	b530      	push	{r4, r5, lr}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	9001      	str	r0, [sp, #4]
 8015f6e:	b162      	cbz	r2, 8015f8a <_GetCursorPosX+0x22>
 8015f70:	4614      	mov	r4, r2
 8015f72:	2500      	movs	r5, #0
 8015f74:	a801      	add	r0, sp, #4
 8015f76:	f000 fab3 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 8015f7a:	f002 faab 	bl	80184d4 <GUI_GetCharDistX>
 8015f7e:	3c01      	subs	r4, #1
 8015f80:	4405      	add	r5, r0
 8015f82:	d1f7      	bne.n	8015f74 <_GetCursorPosX+0xc>
 8015f84:	4628      	mov	r0, r5
 8015f86:	b003      	add	sp, #12
 8015f88:	bd30      	pop	{r4, r5, pc}
 8015f8a:	4615      	mov	r5, r2
 8015f8c:	e7fa      	b.n	8015f84 <_GetCursorPosX+0x1c>
 8015f8e:	bf00      	nop

08015f90 <_GetCursorCharacter>:
 8015f90:	b570      	push	{r4, r5, r6, lr}
 8015f92:	4604      	mov	r4, r0
 8015f94:	b10b      	cbz	r3, 8015f9a <_GetCursorCharacter+0xa>
 8015f96:	2200      	movs	r2, #0
 8015f98:	601a      	str	r2, [r3, #0]
 8015f9a:	b141      	cbz	r1, 8015fae <_GetCursorCharacter+0x1e>
 8015f9c:	4e06      	ldr	r6, [pc, #24]	; (8015fb8 <_GetCursorCharacter+0x28>)
 8015f9e:	460d      	mov	r5, r1
 8015fa0:	6833      	ldr	r3, [r6, #0]
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	4798      	blx	r3
 8015fa8:	3d01      	subs	r5, #1
 8015faa:	4404      	add	r4, r0
 8015fac:	d1f8      	bne.n	8015fa0 <_GetCursorCharacter+0x10>
 8015fae:	4620      	mov	r0, r4
 8015fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fb4:	f000 ba6a 	b.w	801648c <GUI_UC_GetCharCode>
 8015fb8:	2002c038 	.word	0x2002c038

08015fbc <_GetCursorPosChar>:
 8015fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc0:	1e4e      	subs	r6, r1, #1
 8015fc2:	2e00      	cmp	r6, #0
 8015fc4:	4681      	mov	r9, r0
 8015fc6:	4690      	mov	r8, r2
 8015fc8:	dd1a      	ble.n	8016000 <_GetCursorPosChar+0x44>
 8015fca:	4604      	mov	r4, r0
 8015fcc:	2500      	movs	r5, #0
 8015fce:	e006      	b.n	8015fde <_GetCursorPosChar+0x22>
 8015fd0:	4545      	cmp	r5, r8
 8015fd2:	dc0e      	bgt.n	8015ff2 <_GetCursorPosChar+0x36>
 8015fd4:	f000 fa4a 	bl	801646c <GUI_UC_GetCharSize>
 8015fd8:	3e01      	subs	r6, #1
 8015fda:	4404      	add	r4, r0
 8015fdc:	d009      	beq.n	8015ff2 <_GetCursorPosChar+0x36>
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f000 fa54 	bl	801648c <GUI_UC_GetCharCode>
 8015fe4:	4607      	mov	r7, r0
 8015fe6:	f002 fa75 	bl	80184d4 <GUI_GetCharDistX>
 8015fea:	4405      	add	r5, r0
 8015fec:	4620      	mov	r0, r4
 8015fee:	2f00      	cmp	r7, #0
 8015ff0:	d1ee      	bne.n	8015fd0 <_GetCursorPosChar+0x14>
 8015ff2:	ebc9 0104 	rsb	r1, r9, r4
 8015ff6:	4648      	mov	r0, r9
 8015ff8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ffc:	f000 ba98 	b.w	8016530 <GUI_UC__NumBytes2NumChars>
 8016000:	2100      	movs	r1, #0
 8016002:	e7f8      	b.n	8015ff6 <_GetCursorPosChar+0x3a>

08016004 <GUI__GetCursorPosX>:
 8016004:	b510      	push	{r4, lr}
 8016006:	4b03      	ldr	r3, [pc, #12]	; (8016014 <GUI__GetCursorPosX+0x10>)
 8016008:	460c      	mov	r4, r1
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4611      	mov	r1, r2
 801600e:	4622      	mov	r2, r4
 8016010:	4798      	blx	r3
 8016012:	bd10      	pop	{r4, pc}
 8016014:	20000250 	.word	0x20000250

08016018 <GUI__GetCursorPosChar>:
 8016018:	b510      	push	{r4, lr}
 801601a:	4b03      	ldr	r3, [pc, #12]	; (8016028 <GUI__GetCursorPosChar+0x10>)
 801601c:	460c      	mov	r4, r1
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	4611      	mov	r1, r2
 8016022:	4622      	mov	r2, r4
 8016024:	4798      	blx	r3
 8016026:	bd10      	pop	{r4, pc}
 8016028:	20000248 	.word	0x20000248

0801602c <GUI__GetCursorCharacter>:
 801602c:	b510      	push	{r4, lr}
 801602e:	4c02      	ldr	r4, [pc, #8]	; (8016038 <GUI__GetCursorCharacter+0xc>)
 8016030:	6824      	ldr	r4, [r4, #0]
 8016032:	47a0      	blx	r4
 8016034:	bd10      	pop	{r4, pc}
 8016036:	bf00      	nop
 8016038:	2000024c 	.word	0x2000024c

0801603c <GUI__MixColors>:
 801603c:	b430      	push	{r4, r5}
 801603e:	0e0b      	lsrs	r3, r1, #24
 8016040:	ea4f 6410 	mov.w	r4, r0, lsr #24
 8016044:	4b12      	ldr	r3, [pc, #72]	; (8016090 <GUI__MixColors+0x54>)
 8016046:	fb02 f204 	mul.w	r2, r2, r4
 801604a:	fba3 4202 	umull	r4, r2, r3, r2
 801604e:	bf08      	it	eq
 8016050:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8016054:	09d2      	lsrs	r2, r2, #7
 8016056:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801605a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801605e:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 8016062:	f001 15ff 	and.w	r5, r1, #16711935	; 0xff00ff
 8016066:	fb04 f402 	mul.w	r4, r4, r2
 801606a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 801606e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8016072:	fb03 4405 	mla	r4, r3, r5, r4
 8016076:	fb02 f200 	mul.w	r2, r2, r0
 801607a:	0a09      	lsrs	r1, r1, #8
 801607c:	0a24      	lsrs	r4, r4, #8
 801607e:	fb03 2301 	mla	r3, r3, r1, r2
 8016082:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016086:	f003 20ff 	and.w	r0, r3, #4278255360	; 0xff00ff00
 801608a:	4320      	orrs	r0, r4
 801608c:	bc30      	pop	{r4, r5}
 801608e:	4770      	bx	lr
 8016090:	80808081 	.word	0x80808081

08016094 <_OnExit>:
 8016094:	b570      	push	{r4, r5, r6, lr}
 8016096:	4e0a      	ldr	r6, [pc, #40]	; (80160c0 <_OnExit+0x2c>)
 8016098:	4c0a      	ldr	r4, [pc, #40]	; (80160c4 <_OnExit+0x30>)
 801609a:	6830      	ldr	r0, [r6, #0]
 801609c:	4d0a      	ldr	r5, [pc, #40]	; (80160c8 <_OnExit+0x34>)
 801609e:	f002 ff1d 	bl	8018edc <GUI_ALLOC_FreeFixedBlock>
 80160a2:	6820      	ldr	r0, [r4, #0]
 80160a4:	f002 ff1a 	bl	8018edc <GUI_ALLOC_FreeFixedBlock>
 80160a8:	6828      	ldr	r0, [r5, #0]
 80160aa:	f002 ff17 	bl	8018edc <GUI_ALLOC_FreeFixedBlock>
 80160ae:	4907      	ldr	r1, [pc, #28]	; (80160cc <_OnExit+0x38>)
 80160b0:	4a07      	ldr	r2, [pc, #28]	; (80160d0 <_OnExit+0x3c>)
 80160b2:	2300      	movs	r3, #0
 80160b4:	6033      	str	r3, [r6, #0]
 80160b6:	602b      	str	r3, [r5, #0]
 80160b8:	6023      	str	r3, [r4, #0]
 80160ba:	600b      	str	r3, [r1, #0]
 80160bc:	6013      	str	r3, [r2, #0]
 80160be:	bd70      	pop	{r4, r5, r6, pc}
 80160c0:	2002aeec 	.word	0x2002aeec
 80160c4:	2002aee8 	.word	0x2002aee8
 80160c8:	2002aef0 	.word	0x2002aef0
 80160cc:	2002aef4 	.word	0x2002aef4
 80160d0:	2002af04 	.word	0x2002af04

080160d4 <GUI__DoAlphaBlending>:
 80160d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d8:	4c9a      	ldr	r4, [pc, #616]	; (8016344 <GUI__DoAlphaBlending+0x270>)
 80160da:	b091      	sub	sp, #68	; 0x44
 80160dc:	6825      	ldr	r5, [r4, #0]
 80160de:	9108      	str	r1, [sp, #32]
 80160e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80160e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80160e4:	2700      	movs	r7, #0
 80160e6:	9204      	str	r2, [sp, #16]
 80160e8:	461e      	mov	r6, r3
 80160ea:	600f      	str	r7, [r1, #0]
 80160ec:	2d00      	cmp	r5, #0
 80160ee:	f000 80ff 	beq.w	80162f0 <GUI__DoAlphaBlending+0x21c>
 80160f2:	4d95      	ldr	r5, [pc, #596]	; (8016348 <GUI__DoAlphaBlending+0x274>)
 80160f4:	682c      	ldr	r4, [r5, #0]
 80160f6:	b92c      	cbnz	r4, 8016104 <GUI__DoAlphaBlending+0x30>
 80160f8:	4b94      	ldr	r3, [pc, #592]	; (801634c <GUI__DoAlphaBlending+0x278>)
 80160fa:	681c      	ldr	r4, [r3, #0]
 80160fc:	602c      	str	r4, [r5, #0]
 80160fe:	2c00      	cmp	r4, #0
 8016100:	f000 80fe 	beq.w	8016300 <GUI__DoAlphaBlending+0x22c>
 8016104:	4f92      	ldr	r7, [pc, #584]	; (8016350 <GUI__DoAlphaBlending+0x27c>)
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	f000 8106 	beq.w	801631a <GUI__DoAlphaBlending+0x246>
 801610e:	9306      	str	r3, [sp, #24]
 8016110:	2700      	movs	r7, #0
 8016112:	4a90      	ldr	r2, [pc, #576]	; (8016354 <GUI__DoAlphaBlending+0x280>)
 8016114:	6813      	ldr	r3, [r2, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 8109 	beq.w	801632e <GUI__DoAlphaBlending+0x25a>
 801611c:	9305      	str	r3, [sp, #20]
 801611e:	2f00      	cmp	r7, #0
 8016120:	f040 80f5 	bne.w	801630e <GUI__DoAlphaBlending+0x23a>
 8016124:	498c      	ldr	r1, [pc, #560]	; (8016358 <GUI__DoAlphaBlending+0x284>)
 8016126:	4a8d      	ldr	r2, [pc, #564]	; (801635c <GUI__DoAlphaBlending+0x288>)
 8016128:	680b      	ldr	r3, [r1, #0]
 801612a:	7c58      	ldrb	r0, [r3, #17]
 801612c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8016130:	920c      	str	r2, [sp, #48]	; 0x30
 8016132:	6915      	ldr	r5, [r2, #16]
 8016134:	950f      	str	r5, [sp, #60]	; 0x3c
 8016136:	f7fe fec1 	bl	8014ebc <GUI_GetBitsPerPixelEx>
 801613a:	4987      	ldr	r1, [pc, #540]	; (8016358 <GUI__DoAlphaBlending+0x284>)
 801613c:	900a      	str	r0, [sp, #40]	; 0x28
 801613e:	680b      	ldr	r3, [r1, #0]
 8016140:	7c58      	ldrb	r0, [r3, #17]
 8016142:	f7fe fed7 	bl	8014ef4 <GUI_GetpfIndex2ColorEx>
 8016146:	4b86      	ldr	r3, [pc, #536]	; (8016360 <GUI__DoAlphaBlending+0x28c>)
 8016148:	900d      	str	r0, [sp, #52]	; 0x34
 801614a:	42b4      	cmp	r4, r6
 801614c:	bfa8      	it	ge
 801614e:	4634      	movge	r4, r6
 8016150:	4298      	cmp	r0, r3
 8016152:	f000 80da 	beq.w	801630a <GUI__DoAlphaBlending+0x236>
 8016156:	4b83      	ldr	r3, [pc, #524]	; (8016364 <GUI__DoAlphaBlending+0x290>)
 8016158:	1ac3      	subs	r3, r0, r3
 801615a:	bf18      	it	ne
 801615c:	2301      	movne	r3, #1
 801615e:	930e      	str	r3, [sp, #56]	; 0x38
 8016160:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016162:	2600      	movs	r6, #0
 8016164:	4425      	add	r5, r4
 8016166:	46a1      	mov	r9, r4
 8016168:	9c04      	ldr	r4, [sp, #16]
 801616a:	9509      	str	r5, [sp, #36]	; 0x24
 801616c:	46b0      	mov	r8, r6
 801616e:	46b3      	mov	fp, r6
 8016170:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016172:	f854 0b04 	ldr.w	r0, [r4], #4
 8016176:	47a8      	blx	r5
 8016178:	0e05      	lsrs	r5, r0, #24
 801617a:	2dff      	cmp	r5, #255	; 0xff
 801617c:	4607      	mov	r7, r0
 801617e:	d049      	beq.n	8016214 <GUI__DoAlphaBlending+0x140>
 8016180:	f1bb 0f00 	cmp.w	fp, #0
 8016184:	d134      	bne.n	80161f0 <GUI__DoAlphaBlending+0x11c>
 8016186:	4974      	ldr	r1, [pc, #464]	; (8016358 <GUI__DoAlphaBlending+0x284>)
 8016188:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801618c:	680b      	ldr	r3, [r1, #0]
 801618e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016192:	44c2      	add	sl, r8
 8016194:	4553      	cmp	r3, sl
 8016196:	dd61      	ble.n	801625c <GUI__DoAlphaBlending+0x188>
 8016198:	ebca 0a03 	rsb	sl, sl, r3
 801619c:	f8cd a01c 	str.w	sl, [sp, #28]
 80161a0:	46d4      	mov	ip, sl
 80161a2:	469a      	mov	sl, r3
 80161a4:	9a06      	ldr	r2, [sp, #24]
 80161a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161a8:	9908      	ldr	r1, [sp, #32]
 80161aa:	9301      	str	r3, [sp, #4]
 80161ac:	44c4      	add	ip, r8
 80161ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b0:	eb02 0b8c 	add.w	fp, r2, ip, lsl #2
 80161b4:	f8cd b000 	str.w	fp, [sp]
 80161b8:	1e5a      	subs	r2, r3, #1
 80161ba:	4650      	mov	r0, sl
 80161bc:	460b      	mov	r3, r1
 80161be:	f006 f971 	bl	801c4a4 <GUI_ReadRectEx>
 80161c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80161c4:	2917      	cmp	r1, #23
 80161c6:	dd4d      	ble.n	8016264 <GUI__DoAlphaBlending+0x190>
 80161c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161ca:	b17b      	cbz	r3, 80161ec <GUI__DoAlphaBlending+0x118>
 80161cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161ce:	9507      	str	r5, [sp, #28]
 80161d0:	465d      	mov	r5, fp
 80161d2:	46a3      	mov	fp, r4
 80161d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80161d6:	ebca 0a01 	rsb	sl, sl, r1
 80161da:	6828      	ldr	r0, [r5, #0]
 80161dc:	47a0      	blx	r4
 80161de:	f1ba 0a01 	subs.w	sl, sl, #1
 80161e2:	f845 0b04 	str.w	r0, [r5], #4
 80161e6:	d1f8      	bne.n	80161da <GUI__DoAlphaBlending+0x106>
 80161e8:	9d07      	ldr	r5, [sp, #28]
 80161ea:	465c      	mov	r4, fp
 80161ec:	f04f 0b01 	mov.w	fp, #1
 80161f0:	4a5d      	ldr	r2, [pc, #372]	; (8016368 <GUI__DoAlphaBlending+0x294>)
 80161f2:	6813      	ldr	r3, [r2, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d143      	bne.n	8016280 <GUI__DoAlphaBlending+0x1ac>
 80161f8:	b9fd      	cbnz	r5, 801623a <GUI__DoAlphaBlending+0x166>
 80161fa:	9d06      	ldr	r5, [sp, #24]
 80161fc:	59ab      	ldr	r3, [r5, r6]
 80161fe:	9d05      	ldr	r5, [sp, #20]
 8016200:	51ab      	str	r3, [r5, r6]
 8016202:	f1b9 0901 	subs.w	r9, r9, #1
 8016206:	f108 0801 	add.w	r8, r8, #1
 801620a:	f106 0604 	add.w	r6, r6, #4
 801620e:	d010      	beq.n	8016232 <GUI__DoAlphaBlending+0x15e>
 8016210:	9404      	str	r4, [sp, #16]
 8016212:	e7ad      	b.n	8016170 <GUI__DoAlphaBlending+0x9c>
 8016214:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016216:	682b      	ldr	r3, [r5, #0]
 8016218:	9d05      	ldr	r5, [sp, #20]
 801621a:	51a8      	str	r0, [r5, r6]
 801621c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801621e:	f043 0301 	orr.w	r3, r3, #1
 8016222:	f1b9 0901 	subs.w	r9, r9, #1
 8016226:	602b      	str	r3, [r5, #0]
 8016228:	f108 0801 	add.w	r8, r8, #1
 801622c:	f106 0604 	add.w	r6, r6, #4
 8016230:	d1ee      	bne.n	8016210 <GUI__DoAlphaBlending+0x13c>
 8016232:	9805      	ldr	r0, [sp, #20]
 8016234:	b011      	add	sp, #68	; 0x44
 8016236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623a:	462a      	mov	r2, r5
 801623c:	494b      	ldr	r1, [pc, #300]	; (801636c <GUI__DoAlphaBlending+0x298>)
 801623e:	9d06      	ldr	r5, [sp, #24]
 8016240:	680b      	ldr	r3, [r1, #0]
 8016242:	59a9      	ldr	r1, [r5, r6]
 8016244:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 8016248:	4798      	blx	r3
 801624a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801624c:	682b      	ldr	r3, [r5, #0]
 801624e:	9d05      	ldr	r5, [sp, #20]
 8016250:	51a8      	str	r0, [r5, r6]
 8016252:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016254:	f043 0301 	orr.w	r3, r3, #1
 8016258:	602b      	str	r3, [r5, #0]
 801625a:	e7d2      	b.n	8016202 <GUI__DoAlphaBlending+0x12e>
 801625c:	46dc      	mov	ip, fp
 801625e:	f8cd b01c 	str.w	fp, [sp, #28]
 8016262:	e79f      	b.n	80161a4 <GUI__DoAlphaBlending+0xd0>
 8016264:	9a07      	ldr	r2, [sp, #28]
 8016266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016268:	4658      	mov	r0, fp
 801626a:	ebc2 0109 	rsb	r1, r2, r9
 801626e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016270:	f006 fb34 	bl	801c8dc <GUI__ExpandPixelIndicesEx>
 8016274:	4a3c      	ldr	r2, [pc, #240]	; (8016368 <GUI__DoAlphaBlending+0x294>)
 8016276:	6813      	ldr	r3, [r2, #0]
 8016278:	f04f 0b01 	mov.w	fp, #1
 801627c:	2b00      	cmp	r3, #0
 801627e:	d0bb      	beq.n	80161f8 <GUI__DoAlphaBlending+0x124>
 8016280:	9d06      	ldr	r5, [sp, #24]
 8016282:	9e05      	ldr	r6, [sp, #20]
 8016284:	9804      	ldr	r0, [sp, #16]
 8016286:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801628a:	4445      	add	r5, r8
 801628c:	44b0      	add	r8, r6
 801628e:	469c      	mov	ip, r3
 8016290:	4629      	mov	r1, r5
 8016292:	4642      	mov	r2, r8
 8016294:	464b      	mov	r3, r9
 8016296:	47e0      	blx	ip
 8016298:	1d2b      	adds	r3, r5, #4
 801629a:	9d04      	ldr	r5, [sp, #16]
 801629c:	464c      	mov	r4, r9
 801629e:	f108 0204 	add.w	r2, r8, #4
 80162a2:	1f28      	subs	r0, r5, #4
 80162a4:	e009      	b.n	80162ba <GUI__DoAlphaBlending+0x1e6>
 80162a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80162aa:	f842 1c04 	str.w	r1, [r2, #-4]
 80162ae:	3c01      	subs	r4, #1
 80162b0:	f102 0204 	add.w	r2, r2, #4
 80162b4:	f103 0304 	add.w	r3, r3, #4
 80162b8:	d011      	beq.n	80162de <GUI__DoAlphaBlending+0x20a>
 80162ba:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80162be:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80162c2:	d0f0      	beq.n	80162a6 <GUI__DoAlphaBlending+0x1d2>
 80162c4:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80162c8:	f015 4f7f 	tst.w	r5, #4278190080	; 0xff000000
 80162cc:	bf08      	it	eq
 80162ce:	f842 1c04 	streq.w	r1, [r2, #-4]
 80162d2:	3c01      	subs	r4, #1
 80162d4:	f102 0204 	add.w	r2, r2, #4
 80162d8:	f103 0304 	add.w	r3, r3, #4
 80162dc:	d1ed      	bne.n	80162ba <GUI__DoAlphaBlending+0x1e6>
 80162de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80162e0:	9805      	ldr	r0, [sp, #20]
 80162e2:	6833      	ldr	r3, [r6, #0]
 80162e4:	f043 0301 	orr.w	r3, r3, #1
 80162e8:	6033      	str	r3, [r6, #0]
 80162ea:	b011      	add	sp, #68	; 0x44
 80162ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f0:	481f      	ldr	r0, [pc, #124]	; (8016370 <GUI__DoAlphaBlending+0x29c>)
 80162f2:	4b20      	ldr	r3, [pc, #128]	; (8016374 <GUI__DoAlphaBlending+0x2a0>)
 80162f4:	6003      	str	r3, [r0, #0]
 80162f6:	2301      	movs	r3, #1
 80162f8:	6023      	str	r3, [r4, #0]
 80162fa:	f001 fb2f 	bl	801795c <GUI__RegisterExit>
 80162fe:	e6f8      	b.n	80160f2 <GUI__DoAlphaBlending+0x1e>
 8016300:	f7fe fe44 	bl	8014f8c <LCD_GetVXSizeMax>
 8016304:	6028      	str	r0, [r5, #0]
 8016306:	4604      	mov	r4, r0
 8016308:	e6fc      	b.n	8016104 <GUI__DoAlphaBlending+0x30>
 801630a:	970e      	str	r7, [sp, #56]	; 0x38
 801630c:	e728      	b.n	8016160 <GUI__DoAlphaBlending+0x8c>
 801630e:	2500      	movs	r5, #0
 8016310:	9505      	str	r5, [sp, #20]
 8016312:	9805      	ldr	r0, [sp, #20]
 8016314:	b011      	add	sp, #68	; 0x44
 8016316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631a:	00a0      	lsls	r0, r4, #2
 801631c:	f002 fde8 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8016320:	6038      	str	r0, [r7, #0]
 8016322:	f1d0 0701 	rsbs	r7, r0, #1
 8016326:	bf38      	it	cc
 8016328:	2700      	movcc	r7, #0
 801632a:	9006      	str	r0, [sp, #24]
 801632c:	e6f1      	b.n	8016112 <GUI__DoAlphaBlending+0x3e>
 801632e:	6828      	ldr	r0, [r5, #0]
 8016330:	9203      	str	r2, [sp, #12]
 8016332:	0080      	lsls	r0, r0, #2
 8016334:	f002 fddc 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8016338:	9a03      	ldr	r2, [sp, #12]
 801633a:	6010      	str	r0, [r2, #0]
 801633c:	2800      	cmp	r0, #0
 801633e:	d0e6      	beq.n	801630e <GUI__DoAlphaBlending+0x23a>
 8016340:	9005      	str	r0, [sp, #20]
 8016342:	e6ec      	b.n	801611e <GUI__DoAlphaBlending+0x4a>
 8016344:	2002af04 	.word	0x2002af04
 8016348:	2002aef4 	.word	0x2002aef4
 801634c:	2002c048 	.word	0x2002c048
 8016350:	2002aeec 	.word	0x2002aeec
 8016354:	2002aee8 	.word	0x2002aee8
 8016358:	2000026c 	.word	0x2000026c
 801635c:	2002c040 	.word	0x2002c040
 8016360:	0801968d 	.word	0x0801968d
 8016364:	08019685 	.word	0x08019685
 8016368:	2002aef8 	.word	0x2002aef8
 801636c:	20000254 	.word	0x20000254
 8016370:	2002aefc 	.word	0x2002aefc
 8016374:	08016095 	.word	0x08016095

08016378 <GUI__AllocAlphaBuffer>:
 8016378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801637a:	b083      	sub	sp, #12
 801637c:	b9c8      	cbnz	r0, 80163b2 <GUI__AllocAlphaBuffer+0x3a>
 801637e:	4b23      	ldr	r3, [pc, #140]	; (801640c <GUI__AllocAlphaBuffer+0x94>)
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	4607      	mov	r7, r0
 8016384:	b1d2      	cbz	r2, 80163bc <GUI__AllocAlphaBuffer+0x44>
 8016386:	4c22      	ldr	r4, [pc, #136]	; (8016410 <GUI__AllocAlphaBuffer+0x98>)
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	b91b      	cbnz	r3, 8016394 <GUI__AllocAlphaBuffer+0x1c>
 801638c:	4b21      	ldr	r3, [pc, #132]	; (8016414 <GUI__AllocAlphaBuffer+0x9c>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	6023      	str	r3, [r4, #0]
 8016392:	b1db      	cbz	r3, 80163cc <GUI__AllocAlphaBuffer+0x54>
 8016394:	4618      	mov	r0, r3
 8016396:	4e20      	ldr	r6, [pc, #128]	; (8016418 <GUI__AllocAlphaBuffer+0xa0>)
 8016398:	6832      	ldr	r2, [r6, #0]
 801639a:	2500      	movs	r5, #0
 801639c:	b31a      	cbz	r2, 80163e6 <GUI__AllocAlphaBuffer+0x6e>
 801639e:	4e1f      	ldr	r6, [pc, #124]	; (801641c <GUI__AllocAlphaBuffer+0xa4>)
 80163a0:	6833      	ldr	r3, [r6, #0]
 80163a2:	b1bb      	cbz	r3, 80163d4 <GUI__AllocAlphaBuffer+0x5c>
 80163a4:	b117      	cbz	r7, 80163ac <GUI__AllocAlphaBuffer+0x34>
 80163a6:	4e1e      	ldr	r6, [pc, #120]	; (8016420 <GUI__AllocAlphaBuffer+0xa8>)
 80163a8:	6833      	ldr	r3, [r6, #0]
 80163aa:	b32b      	cbz	r3, 80163f8 <GUI__AllocAlphaBuffer+0x80>
 80163ac:	4628      	mov	r0, r5
 80163ae:	b003      	add	sp, #12
 80163b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163b2:	4b16      	ldr	r3, [pc, #88]	; (801640c <GUI__AllocAlphaBuffer+0x94>)
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	af01      	add	r7, sp, #4
 80163b8:	2a00      	cmp	r2, #0
 80163ba:	d1e4      	bne.n	8016386 <GUI__AllocAlphaBuffer+0xe>
 80163bc:	4819      	ldr	r0, [pc, #100]	; (8016424 <GUI__AllocAlphaBuffer+0xac>)
 80163be:	4a1a      	ldr	r2, [pc, #104]	; (8016428 <GUI__AllocAlphaBuffer+0xb0>)
 80163c0:	6002      	str	r2, [r0, #0]
 80163c2:	2201      	movs	r2, #1
 80163c4:	601a      	str	r2, [r3, #0]
 80163c6:	f001 fac9 	bl	801795c <GUI__RegisterExit>
 80163ca:	e7dc      	b.n	8016386 <GUI__AllocAlphaBuffer+0xe>
 80163cc:	f7fe fdde 	bl	8014f8c <LCD_GetVXSizeMax>
 80163d0:	6020      	str	r0, [r4, #0]
 80163d2:	e7e0      	b.n	8016396 <GUI__AllocAlphaBuffer+0x1e>
 80163d4:	6820      	ldr	r0, [r4, #0]
 80163d6:	0080      	lsls	r0, r0, #2
 80163d8:	f002 fd8a 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 80163dc:	2800      	cmp	r0, #0
 80163de:	bf08      	it	eq
 80163e0:	2501      	moveq	r5, #1
 80163e2:	6030      	str	r0, [r6, #0]
 80163e4:	e7de      	b.n	80163a4 <GUI__AllocAlphaBuffer+0x2c>
 80163e6:	0080      	lsls	r0, r0, #2
 80163e8:	f002 fd82 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 80163ec:	f1d0 0501 	rsbs	r5, r0, #1
 80163f0:	6030      	str	r0, [r6, #0]
 80163f2:	bf38      	it	cc
 80163f4:	2500      	movcc	r5, #0
 80163f6:	e7d2      	b.n	801639e <GUI__AllocAlphaBuffer+0x26>
 80163f8:	6820      	ldr	r0, [r4, #0]
 80163fa:	0080      	lsls	r0, r0, #2
 80163fc:	f002 fd78 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8016400:	2800      	cmp	r0, #0
 8016402:	bf08      	it	eq
 8016404:	2501      	moveq	r5, #1
 8016406:	6030      	str	r0, [r6, #0]
 8016408:	e7d0      	b.n	80163ac <GUI__AllocAlphaBuffer+0x34>
 801640a:	bf00      	nop
 801640c:	2002af04 	.word	0x2002af04
 8016410:	2002aef4 	.word	0x2002aef4
 8016414:	2002c048 	.word	0x2002c048
 8016418:	2002aeec 	.word	0x2002aeec
 801641c:	2002aee8 	.word	0x2002aee8
 8016420:	2002aef0 	.word	0x2002aef0
 8016424:	2002aefc 	.word	0x2002aefc
 8016428:	08016095 	.word	0x08016095

0801642c <GUI_SetFuncDrawAlpha>:
 801642c:	b410      	push	{r4}
 801642e:	b160      	cbz	r0, 801644a <GUI_SetFuncDrawAlpha+0x1e>
 8016430:	b141      	cbz	r1, 8016444 <GUI_SetFuncDrawAlpha+0x18>
 8016432:	4604      	mov	r4, r0
 8016434:	2000      	movs	r0, #0
 8016436:	4a07      	ldr	r2, [pc, #28]	; (8016454 <GUI_SetFuncDrawAlpha+0x28>)
 8016438:	4b07      	ldr	r3, [pc, #28]	; (8016458 <GUI_SetFuncDrawAlpha+0x2c>)
 801643a:	6011      	str	r1, [r2, #0]
 801643c:	601c      	str	r4, [r3, #0]
 801643e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016442:	4770      	bx	lr
 8016444:	460c      	mov	r4, r1
 8016446:	2001      	movs	r0, #1
 8016448:	e7f5      	b.n	8016436 <GUI_SetFuncDrawAlpha+0xa>
 801644a:	4601      	mov	r1, r0
 801644c:	4604      	mov	r4, r0
 801644e:	2001      	movs	r0, #1
 8016450:	e7f1      	b.n	8016436 <GUI_SetFuncDrawAlpha+0xa>
 8016452:	bf00      	nop
 8016454:	2002bfe4 	.word	0x2002bfe4
 8016458:	2002bfe8 	.word	0x2002bfe8

0801645c <GUI_SignalEvent>:
 801645c:	b508      	push	{r3, lr}
 801645e:	4b02      	ldr	r3, [pc, #8]	; (8016468 <GUI_SignalEvent+0xc>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	b103      	cbz	r3, 8016466 <GUI_SignalEvent+0xa>
 8016464:	4798      	blx	r3
 8016466:	bd08      	pop	{r3, pc}
 8016468:	2002af08 	.word	0x2002af08

0801646c <GUI_UC_GetCharSize>:
 801646c:	b510      	push	{r4, lr}
 801646e:	4604      	mov	r4, r0
 8016470:	f000 fafe 	bl	8016a70 <GUI_Lock>
 8016474:	4b04      	ldr	r3, [pc, #16]	; (8016488 <GUI_UC_GetCharSize+0x1c>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4620      	mov	r0, r4
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	4798      	blx	r3
 801647e:	4604      	mov	r4, r0
 8016480:	f000 faec 	bl	8016a5c <GUI_Unlock>
 8016484:	4620      	mov	r0, r4
 8016486:	bd10      	pop	{r4, pc}
 8016488:	2002c038 	.word	0x2002c038

0801648c <GUI_UC_GetCharCode>:
 801648c:	b510      	push	{r4, lr}
 801648e:	4604      	mov	r4, r0
 8016490:	f000 faee 	bl	8016a70 <GUI_Lock>
 8016494:	4b04      	ldr	r3, [pc, #16]	; (80164a8 <GUI_UC_GetCharCode+0x1c>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	4620      	mov	r0, r4
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	4798      	blx	r3
 801649e:	4604      	mov	r4, r0
 80164a0:	f000 fadc 	bl	8016a5c <GUI_Unlock>
 80164a4:	4620      	mov	r0, r4
 80164a6:	bd10      	pop	{r4, pc}
 80164a8:	2002c038 	.word	0x2002c038

080164ac <GUI_UC_Encode>:
 80164ac:	b538      	push	{r3, r4, r5, lr}
 80164ae:	4605      	mov	r5, r0
 80164b0:	460c      	mov	r4, r1
 80164b2:	f000 fadd 	bl	8016a70 <GUI_Lock>
 80164b6:	4b05      	ldr	r3, [pc, #20]	; (80164cc <GUI_UC_Encode+0x20>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	4621      	mov	r1, r4
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	4628      	mov	r0, r5
 80164c0:	4798      	blx	r3
 80164c2:	4604      	mov	r4, r0
 80164c4:	f000 faca 	bl	8016a5c <GUI_Unlock>
 80164c8:	4620      	mov	r0, r4
 80164ca:	bd38      	pop	{r3, r4, r5, pc}
 80164cc:	2002c038 	.word	0x2002c038

080164d0 <GUI_UC__CalcSizeOfChar>:
 80164d0:	b508      	push	{r3, lr}
 80164d2:	4b02      	ldr	r3, [pc, #8]	; (80164dc <GUI_UC__CalcSizeOfChar+0xc>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	4798      	blx	r3
 80164da:	bd08      	pop	{r3, pc}
 80164dc:	2002c038 	.word	0x2002c038

080164e0 <GUI_UC__GetCharCodeInc>:
 80164e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164e2:	4e08      	ldr	r6, [pc, #32]	; (8016504 <GUI_UC__GetCharCodeInc+0x24>)
 80164e4:	6804      	ldr	r4, [r0, #0]
 80164e6:	6833      	ldr	r3, [r6, #0]
 80164e8:	4605      	mov	r5, r0
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4620      	mov	r0, r4
 80164ee:	4798      	blx	r3
 80164f0:	6833      	ldr	r3, [r6, #0]
 80164f2:	4607      	mov	r7, r0
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	4620      	mov	r0, r4
 80164f8:	4798      	blx	r3
 80164fa:	4420      	add	r0, r4
 80164fc:	6028      	str	r0, [r5, #0]
 80164fe:	4638      	mov	r0, r7
 8016500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016502:	bf00      	nop
 8016504:	2002c038 	.word	0x2002c038

08016508 <GUI_UC__NumChars2NumBytes>:
 8016508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801650a:	4604      	mov	r4, r0
 801650c:	b161      	cbz	r1, 8016528 <GUI_UC__NumChars2NumBytes+0x20>
 801650e:	4f07      	ldr	r7, [pc, #28]	; (801652c <GUI_UC__NumChars2NumBytes+0x24>)
 8016510:	460d      	mov	r5, r1
 8016512:	2600      	movs	r6, #0
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	4620      	mov	r0, r4
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	4798      	blx	r3
 801651c:	3d01      	subs	r5, #1
 801651e:	4404      	add	r4, r0
 8016520:	4406      	add	r6, r0
 8016522:	d1f7      	bne.n	8016514 <GUI_UC__NumChars2NumBytes+0xc>
 8016524:	4630      	mov	r0, r6
 8016526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016528:	460e      	mov	r6, r1
 801652a:	e7fb      	b.n	8016524 <GUI_UC__NumChars2NumBytes+0x1c>
 801652c:	2002c038 	.word	0x2002c038

08016530 <GUI_UC__NumBytes2NumChars>:
 8016530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016534:	1e0f      	subs	r7, r1, #0
 8016536:	4606      	mov	r6, r0
 8016538:	dd10      	ble.n	801655c <GUI_UC__NumBytes2NumChars+0x2c>
 801653a:	2400      	movs	r4, #0
 801653c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8016560 <GUI_UC__NumBytes2NumChars+0x30>
 8016540:	4625      	mov	r5, r4
 8016542:	f8d8 3000 	ldr.w	r3, [r8]
 8016546:	1930      	adds	r0, r6, r4
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	4798      	blx	r3
 801654c:	4404      	add	r4, r0
 801654e:	42a7      	cmp	r7, r4
 8016550:	f105 0501 	add.w	r5, r5, #1
 8016554:	dcf5      	bgt.n	8016542 <GUI_UC__NumBytes2NumChars+0x12>
 8016556:	4628      	mov	r0, r5
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655c:	2500      	movs	r5, #0
 801655e:	e7fa      	b.n	8016556 <GUI_UC__NumBytes2NumChars+0x26>
 8016560:	2002c038 	.word	0x2002c038

08016564 <GUI__GetNumChars>:
 8016564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016566:	4604      	mov	r4, r0
 8016568:	b188      	cbz	r0, 801658e <GUI__GetNumChars+0x2a>
 801656a:	2600      	movs	r6, #0
 801656c:	4d09      	ldr	r5, [pc, #36]	; (8016594 <GUI__GetNumChars+0x30>)
 801656e:	e000      	b.n	8016572 <GUI__GetNumChars+0xe>
 8016570:	3601      	adds	r6, #1
 8016572:	682b      	ldr	r3, [r5, #0]
 8016574:	4620      	mov	r0, r4
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4798      	blx	r3
 801657a:	682b      	ldr	r3, [r5, #0]
 801657c:	4607      	mov	r7, r0
 801657e:	685b      	ldr	r3, [r3, #4]
 8016580:	4620      	mov	r0, r4
 8016582:	4798      	blx	r3
 8016584:	4404      	add	r4, r0
 8016586:	2f00      	cmp	r7, #0
 8016588:	d1f2      	bne.n	8016570 <GUI__GetNumChars+0xc>
 801658a:	4630      	mov	r0, r6
 801658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801658e:	4606      	mov	r6, r0
 8016590:	4630      	mov	r0, r6
 8016592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016594:	2002c038 	.word	0x2002c038

08016598 <_OnExit>:
 8016598:	4803      	ldr	r0, [pc, #12]	; (80165a8 <_OnExit+0x10>)
 801659a:	4904      	ldr	r1, [pc, #16]	; (80165ac <_OnExit+0x14>)
 801659c:	4a04      	ldr	r2, [pc, #16]	; (80165b0 <_OnExit+0x18>)
 801659e:	2300      	movs	r3, #0
 80165a0:	6003      	str	r3, [r0, #0]
 80165a2:	600b      	str	r3, [r1, #0]
 80165a4:	6013      	str	r3, [r2, #0]
 80165a6:	4770      	bx	lr
 80165a8:	2002af0c 	.word	0x2002af0c
 80165ac:	2002af10 	.word	0x2002af10
 80165b0:	2002af1c 	.word	0x2002af1c

080165b4 <GUI_TIMER_Exec>:
 80165b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165b8:	4e21      	ldr	r6, [pc, #132]	; (8016640 <GUI_TIMER_Exec+0x8c>)
 80165ba:	b085      	sub	sp, #20
 80165bc:	f000 fa58 	bl	8016a70 <GUI_Lock>
 80165c0:	f8d6 8000 	ldr.w	r8, [r6]
 80165c4:	4643      	mov	r3, r8
 80165c6:	4634      	mov	r4, r6
 80165c8:	2700      	movs	r7, #0
 80165ca:	b31b      	cbz	r3, 8016614 <GUI_TIMER_Exec+0x60>
 80165cc:	f000 f9f8 	bl	80169c0 <GUI_GetTime>
 80165d0:	4605      	mov	r5, r0
 80165d2:	6830      	ldr	r0, [r6, #0]
 80165d4:	f002 fdcc 	bl	8019170 <GUI_ALLOC_LockH>
 80165d8:	6942      	ldr	r2, [r0, #20]
 80165da:	9000      	str	r0, [sp, #0]
 80165dc:	1b52      	subs	r2, r2, r5
 80165de:	2a00      	cmp	r2, #0
 80165e0:	4603      	mov	r3, r0
 80165e2:	dc1d      	bgt.n	8016620 <GUI_TIMER_Exec+0x6c>
 80165e4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80165e8:	6821      	ldr	r1, [r4, #0]
 80165ea:	6902      	ldr	r2, [r0, #16]
 80165ec:	9501      	str	r5, [sp, #4]
 80165ee:	4668      	mov	r0, sp
 80165f0:	9103      	str	r1, [sp, #12]
 80165f2:	9202      	str	r2, [sp, #8]
 80165f4:	f8c4 9000 	str.w	r9, [r4]
 80165f8:	681d      	ldr	r5, [r3, #0]
 80165fa:	f002 fdcb 	bl	8019194 <GUI_ALLOC_UnlockH>
 80165fe:	a801      	add	r0, sp, #4
 8016600:	47a8      	blx	r5
 8016602:	f1b9 0f00 	cmp.w	r9, #0
 8016606:	d005      	beq.n	8016614 <GUI_TIMER_Exec+0x60>
 8016608:	6823      	ldr	r3, [r4, #0]
 801660a:	4543      	cmp	r3, r8
 801660c:	d011      	beq.n	8016632 <GUI_TIMER_Exec+0x7e>
 801660e:	2701      	movs	r7, #1
 8016610:	2b00      	cmp	r3, #0
 8016612:	d1db      	bne.n	80165cc <GUI_TIMER_Exec+0x18>
 8016614:	f000 fa22 	bl	8016a5c <GUI_Unlock>
 8016618:	4638      	mov	r0, r7
 801661a:	b005      	add	sp, #20
 801661c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016620:	4668      	mov	r0, sp
 8016622:	f002 fdb7 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016626:	f000 fa19 	bl	8016a5c <GUI_Unlock>
 801662a:	4638      	mov	r0, r7
 801662c:	b005      	add	sp, #20
 801662e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016632:	f000 fa13 	bl	8016a5c <GUI_Unlock>
 8016636:	2700      	movs	r7, #0
 8016638:	4638      	mov	r0, r7
 801663a:	b005      	add	sp, #20
 801663c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016640:	2002af10 	.word	0x2002af10

08016644 <_Link>:
 8016644:	b570      	push	{r4, r5, r6, lr}
 8016646:	4c28      	ldr	r4, [pc, #160]	; (80166e8 <_Link+0xa4>)
 8016648:	b084      	sub	sp, #16
 801664a:	4606      	mov	r6, r0
 801664c:	f002 fd90 	bl	8019170 <GUI_ALLOC_LockH>
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	9001      	str	r0, [sp, #4]
 8016654:	b933      	cbnz	r3, 8016664 <_Link+0x20>
 8016656:	6026      	str	r6, [r4, #0]
 8016658:	6043      	str	r3, [r0, #4]
 801665a:	a801      	add	r0, sp, #4
 801665c:	f002 fd9a 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016660:	b004      	add	sp, #16
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	4618      	mov	r0, r3
 8016666:	f002 fd83 	bl	8019170 <GUI_ALLOC_LockH>
 801666a:	ab04      	add	r3, sp, #16
 801666c:	6945      	ldr	r5, [r0, #20]
 801666e:	f843 0d10 	str.w	r0, [r3, #-16]!
 8016672:	4668      	mov	r0, sp
 8016674:	f002 fd8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016678:	9b01      	ldr	r3, [sp, #4]
 801667a:	695a      	ldr	r2, [r3, #20]
 801667c:	1b52      	subs	r2, r2, r5
 801667e:	2a00      	cmp	r2, #0
 8016680:	dd2e      	ble.n	80166e0 <_Link+0x9c>
 8016682:	6824      	ldr	r4, [r4, #0]
 8016684:	e011      	b.n	80166aa <_Link+0x66>
 8016686:	f002 fd73 	bl	8019170 <GUI_ALLOC_LockH>
 801668a:	4603      	mov	r3, r0
 801668c:	a803      	add	r0, sp, #12
 801668e:	695d      	ldr	r5, [r3, #20]
 8016690:	9303      	str	r3, [sp, #12]
 8016692:	f002 fd7f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016696:	9b01      	ldr	r3, [sp, #4]
 8016698:	695a      	ldr	r2, [r3, #20]
 801669a:	1b52      	subs	r2, r2, r5
 801669c:	2a00      	cmp	r2, #0
 801669e:	dd14      	ble.n	80166ca <_Link+0x86>
 80166a0:	9b02      	ldr	r3, [sp, #8]
 80166a2:	a802      	add	r0, sp, #8
 80166a4:	685c      	ldr	r4, [r3, #4]
 80166a6:	f002 fd75 	bl	8019194 <GUI_ALLOC_UnlockH>
 80166aa:	4620      	mov	r0, r4
 80166ac:	f002 fd60 	bl	8019170 <GUI_ALLOC_LockH>
 80166b0:	6844      	ldr	r4, [r0, #4]
 80166b2:	9002      	str	r0, [sp, #8]
 80166b4:	4603      	mov	r3, r0
 80166b6:	4620      	mov	r0, r4
 80166b8:	2c00      	cmp	r4, #0
 80166ba:	d1e4      	bne.n	8016686 <_Link+0x42>
 80166bc:	9a01      	ldr	r2, [sp, #4]
 80166be:	a802      	add	r0, sp, #8
 80166c0:	6054      	str	r4, [r2, #4]
 80166c2:	605e      	str	r6, [r3, #4]
 80166c4:	f002 fd66 	bl	8019194 <GUI_ALLOC_UnlockH>
 80166c8:	e7c7      	b.n	801665a <_Link+0x16>
 80166ca:	9a02      	ldr	r2, [sp, #8]
 80166cc:	605c      	str	r4, [r3, #4]
 80166ce:	a802      	add	r0, sp, #8
 80166d0:	6056      	str	r6, [r2, #4]
 80166d2:	f002 fd5f 	bl	8019194 <GUI_ALLOC_UnlockH>
 80166d6:	a801      	add	r0, sp, #4
 80166d8:	f002 fd5c 	bl	8019194 <GUI_ALLOC_UnlockH>
 80166dc:	b004      	add	sp, #16
 80166de:	bd70      	pop	{r4, r5, r6, pc}
 80166e0:	6822      	ldr	r2, [r4, #0]
 80166e2:	605a      	str	r2, [r3, #4]
 80166e4:	6026      	str	r6, [r4, #0]
 80166e6:	e7b8      	b.n	801665a <_Link+0x16>
 80166e8:	2002af10 	.word	0x2002af10

080166ec <GUI_TIMER__GetFirstTimer>:
 80166ec:	b530      	push	{r4, r5, lr}
 80166ee:	4b0a      	ldr	r3, [pc, #40]	; (8016718 <GUI_TIMER__GetFirstTimer+0x2c>)
 80166f0:	681c      	ldr	r4, [r3, #0]
 80166f2:	2300      	movs	r3, #0
 80166f4:	b083      	sub	sp, #12
 80166f6:	4605      	mov	r5, r0
 80166f8:	6003      	str	r3, [r0, #0]
 80166fa:	b154      	cbz	r4, 8016712 <GUI_TIMER__GetFirstTimer+0x26>
 80166fc:	4620      	mov	r0, r4
 80166fe:	f002 fd37 	bl	8019170 <GUI_ALLOC_LockH>
 8016702:	ab02      	add	r3, sp, #8
 8016704:	6902      	ldr	r2, [r0, #16]
 8016706:	f843 0d04 	str.w	r0, [r3, #-4]!
 801670a:	602a      	str	r2, [r5, #0]
 801670c:	4618      	mov	r0, r3
 801670e:	f002 fd41 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016712:	4620      	mov	r0, r4
 8016714:	b003      	add	sp, #12
 8016716:	bd30      	pop	{r4, r5, pc}
 8016718:	2002af0c 	.word	0x2002af0c

0801671c <GUI_TIMER__GetNextTimerLin>:
 801671c:	b570      	push	{r4, r5, r6, lr}
 801671e:	2300      	movs	r3, #0
 8016720:	b082      	sub	sp, #8
 8016722:	460d      	mov	r5, r1
 8016724:	600b      	str	r3, [r1, #0]
 8016726:	4604      	mov	r4, r0
 8016728:	b910      	cbnz	r0, 8016730 <GUI_TIMER__GetNextTimerLin+0x14>
 801672a:	4620      	mov	r0, r4
 801672c:	b002      	add	sp, #8
 801672e:	bd70      	pop	{r4, r5, r6, pc}
 8016730:	f002 fd1e 	bl	8019170 <GUI_ALLOC_LockH>
 8016734:	6884      	ldr	r4, [r0, #8]
 8016736:	9001      	str	r0, [sp, #4]
 8016738:	ae01      	add	r6, sp, #4
 801673a:	b92c      	cbnz	r4, 8016748 <GUI_TIMER__GetNextTimerLin+0x2c>
 801673c:	4630      	mov	r0, r6
 801673e:	f002 fd29 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016742:	4620      	mov	r0, r4
 8016744:	b002      	add	sp, #8
 8016746:	bd70      	pop	{r4, r5, r6, pc}
 8016748:	4630      	mov	r0, r6
 801674a:	f002 fd23 	bl	8019194 <GUI_ALLOC_UnlockH>
 801674e:	4620      	mov	r0, r4
 8016750:	f002 fd0e 	bl	8019170 <GUI_ALLOC_LockH>
 8016754:	6903      	ldr	r3, [r0, #16]
 8016756:	9001      	str	r0, [sp, #4]
 8016758:	602b      	str	r3, [r5, #0]
 801675a:	e7ef      	b.n	801673c <GUI_TIMER__GetNextTimerLin+0x20>

0801675c <GUI_TIMER_Create>:
 801675c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016760:	b083      	sub	sp, #12
 8016762:	4681      	mov	r9, r0
 8016764:	460e      	mov	r6, r1
 8016766:	4690      	mov	r8, r2
 8016768:	461f      	mov	r7, r3
 801676a:	f000 f981 	bl	8016a70 <GUI_Lock>
 801676e:	201c      	movs	r0, #28
 8016770:	f002 fe86 	bl	8019480 <GUI_ALLOC_AllocZero>
 8016774:	4604      	mov	r4, r0
 8016776:	b928      	cbnz	r0, 8016784 <GUI_TIMER_Create+0x28>
 8016778:	f000 f970 	bl	8016a5c <GUI_Unlock>
 801677c:	4620      	mov	r0, r4
 801677e:	b003      	add	sp, #12
 8016780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016784:	4b1a      	ldr	r3, [pc, #104]	; (80167f0 <GUI_TIMER_Create+0x94>)
 8016786:	4a1b      	ldr	r2, [pc, #108]	; (80167f4 <GUI_TIMER_Create+0x98>)
 8016788:	601a      	str	r2, [r3, #0]
 801678a:	f002 fcf1 	bl	8019170 <GUI_ALLOC_LockH>
 801678e:	9000      	str	r0, [sp, #0]
 8016790:	b34e      	cbz	r6, 80167e6 <GUI_TIMER_Create+0x8a>
 8016792:	4605      	mov	r5, r0
 8016794:	616e      	str	r6, [r5, #20]
 8016796:	f8c5 9000 	str.w	r9, [r5]
 801679a:	f8c5 8010 	str.w	r8, [r5, #16]
 801679e:	81af      	strh	r7, [r5, #12]
 80167a0:	4668      	mov	r0, sp
 80167a2:	f002 fcf7 	bl	8019194 <GUI_ALLOC_UnlockH>
 80167a6:	4620      	mov	r0, r4
 80167a8:	f7ff ff4c 	bl	8016644 <_Link>
 80167ac:	4b12      	ldr	r3, [pc, #72]	; (80167f8 <GUI_TIMER_Create+0x9c>)
 80167ae:	681a      	ldr	r2, [r3, #0]
 80167b0:	b932      	cbnz	r2, 80167c0 <GUI_TIMER_Create+0x64>
 80167b2:	4812      	ldr	r0, [pc, #72]	; (80167fc <GUI_TIMER_Create+0xa0>)
 80167b4:	4a12      	ldr	r2, [pc, #72]	; (8016800 <GUI_TIMER_Create+0xa4>)
 80167b6:	6002      	str	r2, [r0, #0]
 80167b8:	2201      	movs	r2, #1
 80167ba:	601a      	str	r2, [r3, #0]
 80167bc:	f001 f8ce 	bl	801795c <GUI__RegisterExit>
 80167c0:	4620      	mov	r0, r4
 80167c2:	f002 fcd5 	bl	8019170 <GUI_ALLOC_LockH>
 80167c6:	ab02      	add	r3, sp, #8
 80167c8:	4a0e      	ldr	r2, [pc, #56]	; (8016804 <GUI_TIMER_Create+0xa8>)
 80167ca:	f843 0d04 	str.w	r0, [r3, #-4]!
 80167ce:	6811      	ldr	r1, [r2, #0]
 80167d0:	6081      	str	r1, [r0, #8]
 80167d2:	4618      	mov	r0, r3
 80167d4:	6014      	str	r4, [r2, #0]
 80167d6:	f002 fcdd 	bl	8019194 <GUI_ALLOC_UnlockH>
 80167da:	f000 f93f 	bl	8016a5c <GUI_Unlock>
 80167de:	4620      	mov	r0, r4
 80167e0:	b003      	add	sp, #12
 80167e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167e6:	f000 f8eb 	bl	80169c0 <GUI_GetTime>
 80167ea:	9d00      	ldr	r5, [sp, #0]
 80167ec:	4606      	mov	r6, r0
 80167ee:	e7d1      	b.n	8016794 <GUI_TIMER_Create+0x38>
 80167f0:	2002c010 	.word	0x2002c010
 80167f4:	080165b5 	.word	0x080165b5
 80167f8:	2002af1c 	.word	0x2002af1c
 80167fc:	2002af14 	.word	0x2002af14
 8016800:	08016599 	.word	0x08016599
 8016804:	2002af0c 	.word	0x2002af0c

08016808 <GUI_TIMER_Delete>:
 8016808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801680a:	4605      	mov	r5, r0
 801680c:	b083      	sub	sp, #12
 801680e:	b908      	cbnz	r0, 8016814 <GUI_TIMER_Delete+0xc>
 8016810:	b003      	add	sp, #12
 8016812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016814:	4e2c      	ldr	r6, [pc, #176]	; (80168c8 <GUI_TIMER_Delete+0xc0>)
 8016816:	f000 f92b 	bl	8016a70 <GUI_Lock>
 801681a:	6834      	ldr	r4, [r6, #0]
 801681c:	42a5      	cmp	r5, r4
 801681e:	d040      	beq.n	80168a2 <GUI_TIMER_Delete+0x9a>
 8016820:	b15c      	cbz	r4, 801683a <GUI_TIMER_Delete+0x32>
 8016822:	4620      	mov	r0, r4
 8016824:	f002 fca4 	bl	8019170 <GUI_ALLOC_LockH>
 8016828:	6884      	ldr	r4, [r0, #8]
 801682a:	9000      	str	r0, [sp, #0]
 801682c:	42a5      	cmp	r5, r4
 801682e:	d02a      	beq.n	8016886 <GUI_TIMER_Delete+0x7e>
 8016830:	4668      	mov	r0, sp
 8016832:	f002 fcaf 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016836:	2c00      	cmp	r4, #0
 8016838:	d1f3      	bne.n	8016822 <GUI_TIMER_Delete+0x1a>
 801683a:	4628      	mov	r0, r5
 801683c:	f002 fc98 	bl	8019170 <GUI_ALLOC_LockH>
 8016840:	4b22      	ldr	r3, [pc, #136]	; (80168cc <GUI_TIMER_Delete+0xc4>)
 8016842:	9000      	str	r0, [sp, #0]
 8016844:	681c      	ldr	r4, [r3, #0]
 8016846:	42a5      	cmp	r5, r4
 8016848:	d037      	beq.n	80168ba <GUI_TIMER_Delete+0xb2>
 801684a:	af01      	add	r7, sp, #4
 801684c:	b924      	cbnz	r4, 8016858 <GUI_TIMER_Delete+0x50>
 801684e:	e010      	b.n	8016872 <GUI_TIMER_Delete+0x6a>
 8016850:	4638      	mov	r0, r7
 8016852:	f002 fc9f 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016856:	b164      	cbz	r4, 8016872 <GUI_TIMER_Delete+0x6a>
 8016858:	4620      	mov	r0, r4
 801685a:	f002 fc89 	bl	8019170 <GUI_ALLOC_LockH>
 801685e:	6844      	ldr	r4, [r0, #4]
 8016860:	9001      	str	r0, [sp, #4]
 8016862:	42a5      	cmp	r5, r4
 8016864:	d1f4      	bne.n	8016850 <GUI_TIMER_Delete+0x48>
 8016866:	9a00      	ldr	r2, [sp, #0]
 8016868:	6852      	ldr	r2, [r2, #4]
 801686a:	6042      	str	r2, [r0, #4]
 801686c:	4638      	mov	r0, r7
 801686e:	f002 fc91 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016872:	4668      	mov	r0, sp
 8016874:	f002 fc8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016878:	4628      	mov	r0, r5
 801687a:	f002 fd8b 	bl	8019394 <GUI_ALLOC_Free>
 801687e:	f000 f8ed 	bl	8016a5c <GUI_Unlock>
 8016882:	b003      	add	sp, #12
 8016884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016886:	4628      	mov	r0, r5
 8016888:	f002 fc72 	bl	8019170 <GUI_ALLOC_LockH>
 801688c:	9b00      	ldr	r3, [sp, #0]
 801688e:	6882      	ldr	r2, [r0, #8]
 8016890:	9001      	str	r0, [sp, #4]
 8016892:	a801      	add	r0, sp, #4
 8016894:	609a      	str	r2, [r3, #8]
 8016896:	f002 fc7d 	bl	8019194 <GUI_ALLOC_UnlockH>
 801689a:	4668      	mov	r0, sp
 801689c:	f002 fc7a 	bl	8019194 <GUI_ALLOC_UnlockH>
 80168a0:	e7cb      	b.n	801683a <GUI_TIMER_Delete+0x32>
 80168a2:	4628      	mov	r0, r5
 80168a4:	f002 fc64 	bl	8019170 <GUI_ALLOC_LockH>
 80168a8:	af02      	add	r7, sp, #8
 80168aa:	6883      	ldr	r3, [r0, #8]
 80168ac:	f847 0d04 	str.w	r0, [r7, #-4]!
 80168b0:	4638      	mov	r0, r7
 80168b2:	6033      	str	r3, [r6, #0]
 80168b4:	f002 fc6e 	bl	8019194 <GUI_ALLOC_UnlockH>
 80168b8:	e7bf      	b.n	801683a <GUI_TIMER_Delete+0x32>
 80168ba:	6842      	ldr	r2, [r0, #4]
 80168bc:	601a      	str	r2, [r3, #0]
 80168be:	4668      	mov	r0, sp
 80168c0:	f002 fc68 	bl	8019194 <GUI_ALLOC_UnlockH>
 80168c4:	e7d8      	b.n	8016878 <GUI_TIMER_Delete+0x70>
 80168c6:	bf00      	nop
 80168c8:	2002af0c 	.word	0x2002af0c
 80168cc:	2002af10 	.word	0x2002af10

080168d0 <GUI_TIMER_SetPeriod>:
 80168d0:	b530      	push	{r4, r5, lr}
 80168d2:	4604      	mov	r4, r0
 80168d4:	b083      	sub	sp, #12
 80168d6:	460d      	mov	r5, r1
 80168d8:	b168      	cbz	r0, 80168f6 <GUI_TIMER_SetPeriod+0x26>
 80168da:	f000 f8c9 	bl	8016a70 <GUI_Lock>
 80168de:	4620      	mov	r0, r4
 80168e0:	f002 fc46 	bl	8019170 <GUI_ALLOC_LockH>
 80168e4:	ab02      	add	r3, sp, #8
 80168e6:	6185      	str	r5, [r0, #24]
 80168e8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80168ec:	4618      	mov	r0, r3
 80168ee:	f002 fc51 	bl	8019194 <GUI_ALLOC_UnlockH>
 80168f2:	f000 f8b3 	bl	8016a5c <GUI_Unlock>
 80168f6:	b003      	add	sp, #12
 80168f8:	bd30      	pop	{r4, r5, pc}
 80168fa:	bf00      	nop

080168fc <GUI_TIMER_Restart>:
 80168fc:	b530      	push	{r4, r5, lr}
 80168fe:	4605      	mov	r5, r0
 8016900:	b085      	sub	sp, #20
 8016902:	b908      	cbnz	r0, 8016908 <GUI_TIMER_Restart+0xc>
 8016904:	b005      	add	sp, #20
 8016906:	bd30      	pop	{r4, r5, pc}
 8016908:	f000 f8b2 	bl	8016a70 <GUI_Lock>
 801690c:	4628      	mov	r0, r5
 801690e:	f002 fc2f 	bl	8019170 <GUI_ALLOC_LockH>
 8016912:	9001      	str	r0, [sp, #4]
 8016914:	f000 f854 	bl	80169c0 <GUI_GetTime>
 8016918:	ab04      	add	r3, sp, #16
 801691a:	f853 2d0c 	ldr.w	r2, [r3, #-12]!
 801691e:	6991      	ldr	r1, [r2, #24]
 8016920:	4408      	add	r0, r1
 8016922:	6150      	str	r0, [r2, #20]
 8016924:	4618      	mov	r0, r3
 8016926:	f002 fc35 	bl	8019194 <GUI_ALLOC_UnlockH>
 801692a:	4628      	mov	r0, r5
 801692c:	f002 fc20 	bl	8019170 <GUI_ALLOC_LockH>
 8016930:	4b13      	ldr	r3, [pc, #76]	; (8016980 <GUI_TIMER_Restart+0x84>)
 8016932:	9002      	str	r0, [sp, #8]
 8016934:	681c      	ldr	r4, [r3, #0]
 8016936:	42a5      	cmp	r5, r4
 8016938:	d01b      	beq.n	8016972 <GUI_TIMER_Restart+0x76>
 801693a:	b184      	cbz	r4, 801695e <GUI_TIMER_Restart+0x62>
 801693c:	4620      	mov	r0, r4
 801693e:	f002 fc17 	bl	8019170 <GUI_ALLOC_LockH>
 8016942:	6844      	ldr	r4, [r0, #4]
 8016944:	9003      	str	r0, [sp, #12]
 8016946:	42a5      	cmp	r5, r4
 8016948:	d003      	beq.n	8016952 <GUI_TIMER_Restart+0x56>
 801694a:	a803      	add	r0, sp, #12
 801694c:	f002 fc22 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016950:	e7f3      	b.n	801693a <GUI_TIMER_Restart+0x3e>
 8016952:	9b02      	ldr	r3, [sp, #8]
 8016954:	685b      	ldr	r3, [r3, #4]
 8016956:	6043      	str	r3, [r0, #4]
 8016958:	a803      	add	r0, sp, #12
 801695a:	f002 fc1b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801695e:	a802      	add	r0, sp, #8
 8016960:	f002 fc18 	bl	8019194 <GUI_ALLOC_UnlockH>
 8016964:	4628      	mov	r0, r5
 8016966:	f7ff fe6d 	bl	8016644 <_Link>
 801696a:	f000 f877 	bl	8016a5c <GUI_Unlock>
 801696e:	b005      	add	sp, #20
 8016970:	bd30      	pop	{r4, r5, pc}
 8016972:	6842      	ldr	r2, [r0, #4]
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	a802      	add	r0, sp, #8
 8016978:	f002 fc0c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801697c:	e7f2      	b.n	8016964 <GUI_TIMER_Restart+0x68>
 801697e:	bf00      	nop
 8016980:	2002af10 	.word	0x2002af10

08016984 <GUI_TIMER_GetFlag>:
 8016984:	b530      	push	{r4, r5, lr}
 8016986:	4604      	mov	r4, r0
 8016988:	b083      	sub	sp, #12
 801698a:	460d      	mov	r5, r1
 801698c:	b918      	cbnz	r0, 8016996 <GUI_TIMER_GetFlag+0x12>
 801698e:	2401      	movs	r4, #1
 8016990:	4620      	mov	r0, r4
 8016992:	b003      	add	sp, #12
 8016994:	bd30      	pop	{r4, r5, pc}
 8016996:	f000 f86b 	bl	8016a70 <GUI_Lock>
 801699a:	4620      	mov	r0, r4
 801699c:	f002 fbe8 	bl	8019170 <GUI_ALLOC_LockH>
 80169a0:	ab02      	add	r3, sp, #8
 80169a2:	8982      	ldrh	r2, [r0, #12]
 80169a4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80169a8:	4215      	tst	r5, r2
 80169aa:	4618      	mov	r0, r3
 80169ac:	bf0c      	ite	eq
 80169ae:	2400      	moveq	r4, #0
 80169b0:	2401      	movne	r4, #1
 80169b2:	f002 fbef 	bl	8019194 <GUI_ALLOC_UnlockH>
 80169b6:	f000 f851 	bl	8016a5c <GUI_Unlock>
 80169ba:	4620      	mov	r0, r4
 80169bc:	b003      	add	sp, #12
 80169be:	bd30      	pop	{r4, r5, pc}

080169c0 <GUI_GetTime>:
 80169c0:	f7f0 bb64 	b.w	800708c <GUI_X_GetTime>

080169c4 <GUI_Delay>:
 80169c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169c8:	4607      	mov	r7, r0
 80169ca:	f7f0 fb5f 	bl	800708c <GUI_X_GetTime>
 80169ce:	4407      	add	r7, r0
 80169d0:	f7f0 fb5c 	bl	800708c <GUI_X_GetTime>
 80169d4:	1a3c      	subs	r4, r7, r0
 80169d6:	2c00      	cmp	r4, #0
 80169d8:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8016a40 <GUI_Delay+0x7c>
 80169dc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8016a44 <GUI_Delay+0x80>
 80169e0:	dd23      	ble.n	8016a2a <GUI_Delay+0x66>
 80169e2:	f001 fa5d 	bl	8017ea0 <GUI_Exec>
 80169e6:	f8d9 0000 	ldr.w	r0, [r9]
 80169ea:	4284      	cmp	r4, r0
 80169ec:	bfb4      	ite	lt
 80169ee:	4626      	movlt	r6, r4
 80169f0:	4606      	movge	r6, r0
 80169f2:	f000 f83d 	bl	8016a70 <GUI_Lock>
 80169f6:	f8d8 4000 	ldr.w	r4, [r8]
 80169fa:	f002 fca7 	bl	801934c <GUI_ALLOC_Lock>
 80169fe:	b1b4      	cbz	r4, 8016a2e <GUI_Delay+0x6a>
 8016a00:	4625      	mov	r5, r4
 8016a02:	f000 f82b 	bl	8016a5c <GUI_Unlock>
 8016a06:	3d01      	subs	r5, #1
 8016a08:	d1fb      	bne.n	8016a02 <GUI_Delay+0x3e>
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f7f0 fb42 	bl	8007094 <GUI_X_Delay>
 8016a10:	f000 f82e 	bl	8016a70 <GUI_Lock>
 8016a14:	3c01      	subs	r4, #1
 8016a16:	d1fb      	bne.n	8016a10 <GUI_Delay+0x4c>
 8016a18:	f002 fca0 	bl	801935c <GUI_ALLOC_Unlock>
 8016a1c:	f000 f81e 	bl	8016a5c <GUI_Unlock>
 8016a20:	f7f0 fb34 	bl	800708c <GUI_X_GetTime>
 8016a24:	1a3c      	subs	r4, r7, r0
 8016a26:	2c00      	cmp	r4, #0
 8016a28:	dcdb      	bgt.n	80169e2 <GUI_Delay+0x1e>
 8016a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a2e:	4630      	mov	r0, r6
 8016a30:	f7f0 fb30 	bl	8007094 <GUI_X_Delay>
 8016a34:	f002 fc92 	bl	801935c <GUI_ALLOC_Unlock>
 8016a38:	f000 f810 	bl	8016a5c <GUI_Unlock>
 8016a3c:	e7f0      	b.n	8016a20 <GUI_Delay+0x5c>
 8016a3e:	bf00      	nop
 8016a40:	20000258 	.word	0x20000258
 8016a44:	2002af24 	.word	0x2002af24

08016a48 <_OnExit>:
 8016a48:	b510      	push	{r4, lr}
 8016a4a:	4c03      	ldr	r4, [pc, #12]	; (8016a58 <_OnExit+0x10>)
 8016a4c:	6820      	ldr	r0, [r4, #0]
 8016a4e:	f002 fa45 	bl	8018edc <GUI_ALLOC_FreeFixedBlock>
 8016a52:	2300      	movs	r3, #0
 8016a54:	6023      	str	r3, [r4, #0]
 8016a56:	bd10      	pop	{r4, pc}
 8016a58:	2002af20 	.word	0x2002af20

08016a5c <GUI_Unlock>:
 8016a5c:	4a03      	ldr	r2, [pc, #12]	; (8016a6c <GUI_Unlock+0x10>)
 8016a5e:	6813      	ldr	r3, [r2, #0]
 8016a60:	3b01      	subs	r3, #1
 8016a62:	6013      	str	r3, [r2, #0]
 8016a64:	b103      	cbz	r3, 8016a68 <GUI_Unlock+0xc>
 8016a66:	4770      	bx	lr
 8016a68:	f7f0 bb32 	b.w	80070d0 <GUI_X_Unlock>
 8016a6c:	2002af24 	.word	0x2002af24

08016a70 <GUI_Lock>:
 8016a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a74:	4c2a      	ldr	r4, [pc, #168]	; (8016b20 <GUI_Lock+0xb0>)
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	b963      	cbnz	r3, 8016a94 <GUI_Lock+0x24>
 8016a7a:	f7f0 fb31 	bl	80070e0 <GUI_X_Lock>
 8016a7e:	f7f0 fb39 	bl	80070f4 <GUI_X_GetTaskId>
 8016a82:	4b28      	ldr	r3, [pc, #160]	; (8016b24 <GUI_Lock+0xb4>)
 8016a84:	6018      	str	r0, [r3, #0]
 8016a86:	6823      	ldr	r3, [r4, #0]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	2b01      	cmp	r3, #1
 8016a8c:	6023      	str	r3, [r4, #0]
 8016a8e:	d011      	beq.n	8016ab4 <GUI_Lock+0x44>
 8016a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a94:	4d23      	ldr	r5, [pc, #140]	; (8016b24 <GUI_Lock+0xb4>)
 8016a96:	f7f0 fb2d 	bl	80070f4 <GUI_X_GetTaskId>
 8016a9a:	682b      	ldr	r3, [r5, #0]
 8016a9c:	4298      	cmp	r0, r3
 8016a9e:	d0f2      	beq.n	8016a86 <GUI_Lock+0x16>
 8016aa0:	f7f0 fb1e 	bl	80070e0 <GUI_X_Lock>
 8016aa4:	f7f0 fb26 	bl	80070f4 <GUI_X_GetTaskId>
 8016aa8:	6823      	ldr	r3, [r4, #0]
 8016aaa:	6028      	str	r0, [r5, #0]
 8016aac:	3301      	adds	r3, #1
 8016aae:	2b01      	cmp	r3, #1
 8016ab0:	6023      	str	r3, [r4, #0]
 8016ab2:	d1ed      	bne.n	8016a90 <GUI_Lock+0x20>
 8016ab4:	4e1c      	ldr	r6, [pc, #112]	; (8016b28 <GUI_Lock+0xb8>)
 8016ab6:	6833      	ldr	r3, [r6, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	dd2c      	ble.n	8016b16 <GUI_Lock+0xa6>
 8016abc:	2400      	movs	r4, #0
 8016abe:	4f1b      	ldr	r7, [pc, #108]	; (8016b2c <GUI_Lock+0xbc>)
 8016ac0:	4625      	mov	r5, r4
 8016ac2:	e006      	b.n	8016ad2 <GUI_Lock+0x62>
 8016ac4:	b352      	cbz	r2, 8016b1c <GUI_Lock+0xac>
 8016ac6:	6833      	ldr	r3, [r6, #0]
 8016ac8:	3501      	adds	r5, #1
 8016aca:	429d      	cmp	r5, r3
 8016acc:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8016ad0:	da21      	bge.n	8016b16 <GUI_Lock+0xa6>
 8016ad2:	f7f0 fb0f 	bl	80070f4 <GUI_X_GetTaskId>
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	591a      	ldr	r2, [r3, r4]
 8016ada:	4290      	cmp	r0, r2
 8016adc:	4423      	add	r3, r4
 8016ade:	d1f1      	bne.n	8016ac4 <GUI_Lock+0x54>
 8016ae0:	4e13      	ldr	r6, [pc, #76]	; (8016b30 <GUI_Lock+0xc0>)
 8016ae2:	6833      	ldr	r3, [r6, #0]
 8016ae4:	42ab      	cmp	r3, r5
 8016ae6:	d0d3      	beq.n	8016a90 <GUI_Lock+0x20>
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	db11      	blt.n	8016b10 <GUI_Lock+0xa0>
 8016aec:	4f0f      	ldr	r7, [pc, #60]	; (8016b2c <GUI_Lock+0xbc>)
 8016aee:	683a      	ldr	r2, [r7, #0]
 8016af0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8016af4:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8016af8:	f000 fe02 	bl	8017700 <GUI_DEVICE_UnlinkTaskDevices>
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 8016b02:	441c      	add	r4, r3
 8016b04:	4b0b      	ldr	r3, [pc, #44]	; (8016b34 <GUI_Lock+0xc4>)
 8016b06:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8016b08:	3404      	adds	r4, #4
 8016b0a:	601c      	str	r4, [r3, #0]
 8016b0c:	f000 fdfa 	bl	8017704 <GUI_DEVICE_LinkDevices>
 8016b10:	6035      	str	r5, [r6, #0]
 8016b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b16:	2400      	movs	r4, #0
 8016b18:	4625      	mov	r5, r4
 8016b1a:	e7e1      	b.n	8016ae0 <GUI_Lock+0x70>
 8016b1c:	6018      	str	r0, [r3, #0]
 8016b1e:	e7df      	b.n	8016ae0 <GUI_Lock+0x70>
 8016b20:	2002af24 	.word	0x2002af24
 8016b24:	2002af30 	.word	0x2002af30
 8016b28:	20000260 	.word	0x20000260
 8016b2c:	2002af20 	.word	0x2002af20
 8016b30:	2000025c 	.word	0x2000025c
 8016b34:	2000026c 	.word	0x2000026c

08016b38 <GUITASK_Init>:
 8016b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b3a:	4819      	ldr	r0, [pc, #100]	; (8016ba0 <GUITASK_Init+0x68>)
 8016b3c:	4e19      	ldr	r6, [pc, #100]	; (8016ba4 <GUITASK_Init+0x6c>)
 8016b3e:	4b1a      	ldr	r3, [pc, #104]	; (8016ba8 <GUITASK_Init+0x70>)
 8016b40:	6003      	str	r3, [r0, #0]
 8016b42:	f000 ff0b 	bl	801795c <GUI__RegisterExit>
 8016b46:	6834      	ldr	r4, [r6, #0]
 8016b48:	4f18      	ldr	r7, [pc, #96]	; (8016bac <GUITASK_Init+0x74>)
 8016b4a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8016b4e:	00e4      	lsls	r4, r4, #3
 8016b50:	4620      	mov	r0, r4
 8016b52:	f002 f9cd 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8016b56:	4b16      	ldr	r3, [pc, #88]	; (8016bb0 <GUITASK_Init+0x78>)
 8016b58:	6038      	str	r0, [r7, #0]
 8016b5a:	4622      	mov	r2, r4
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2100      	movs	r1, #0
 8016b60:	4798      	blx	r3
 8016b62:	4b14      	ldr	r3, [pc, #80]	; (8016bb4 <GUITASK_Init+0x7c>)
 8016b64:	f04f 32ff 	mov.w	r2, #4294967295
 8016b68:	601a      	str	r2, [r3, #0]
 8016b6a:	f7f0 fa99 	bl	80070a0 <GUI_X_InitOS>
 8016b6e:	6833      	ldr	r3, [r6, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	dd11      	ble.n	8016b98 <GUITASK_Init+0x60>
 8016b74:	2400      	movs	r4, #0
 8016b76:	4625      	mov	r5, r4
 8016b78:	e003      	b.n	8016b82 <GUITASK_Init+0x4a>
 8016b7a:	b172      	cbz	r2, 8016b9a <GUITASK_Init+0x62>
 8016b7c:	6833      	ldr	r3, [r6, #0]
 8016b7e:	429d      	cmp	r5, r3
 8016b80:	da0a      	bge.n	8016b98 <GUITASK_Init+0x60>
 8016b82:	f7f0 fab7 	bl	80070f4 <GUI_X_GetTaskId>
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	591a      	ldr	r2, [r3, r4]
 8016b8a:	4290      	cmp	r0, r2
 8016b8c:	4423      	add	r3, r4
 8016b8e:	f105 0501 	add.w	r5, r5, #1
 8016b92:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8016b96:	d1f0      	bne.n	8016b7a <GUITASK_Init+0x42>
 8016b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b9a:	6018      	str	r0, [r3, #0]
 8016b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	2002af28 	.word	0x2002af28
 8016ba4:	20000260 	.word	0x20000260
 8016ba8:	08016a49 	.word	0x08016a49
 8016bac:	2002af20 	.word	0x2002af20
 8016bb0:	20000240 	.word	0x20000240
 8016bb4:	2000025c 	.word	0x2000025c

08016bb8 <GUITASK_CopyContext>:
 8016bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bbc:	4f24      	ldr	r7, [pc, #144]	; (8016c50 <GUITASK_CopyContext+0x98>)
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	dd40      	ble.n	8016c46 <GUITASK_CopyContext+0x8e>
 8016bc4:	4e23      	ldr	r6, [pc, #140]	; (8016c54 <GUITASK_CopyContext+0x9c>)
 8016bc6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8016c58 <GUITASK_CopyContext+0xa0>
 8016bca:	6834      	ldr	r4, [r6, #0]
 8016bcc:	f8d8 a000 	ldr.w	sl, [r8]
 8016bd0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8016bd4:	340c      	adds	r4, #12
 8016bd6:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 8016bda:	2500      	movs	r5, #0
 8016bdc:	f1a4 0308 	sub.w	r3, r4, #8
 8016be0:	2270      	movs	r2, #112	; 0x70
 8016be2:	4618      	mov	r0, r3
 8016be4:	4651      	mov	r1, sl
 8016be6:	f007 fa09 	bl	801dffc <memcpy>
 8016bea:	1f22      	subs	r2, r4, #4
 8016bec:	6320      	str	r0, [r4, #48]	; 0x30
 8016bee:	63a0      	str	r0, [r4, #56]	; 0x38
 8016bf0:	f844 5c0c 	str.w	r5, [r4, #-12]
 8016bf4:	6362      	str	r2, [r4, #52]	; 0x34
 8016bf6:	60e4      	str	r4, [r4, #12]
 8016bf8:	3478      	adds	r4, #120	; 0x78
 8016bfa:	454c      	cmp	r4, r9
 8016bfc:	d1ee      	bne.n	8016bdc <GUITASK_CopyContext+0x24>
 8016bfe:	2400      	movs	r4, #0
 8016c00:	4625      	mov	r5, r4
 8016c02:	e003      	b.n	8016c0c <GUITASK_CopyContext+0x54>
 8016c04:	b19a      	cbz	r2, 8016c2e <GUITASK_CopyContext+0x76>
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	4295      	cmp	r5, r2
 8016c0a:	da16      	bge.n	8016c3a <GUITASK_CopyContext+0x82>
 8016c0c:	f7f0 fa72 	bl	80070f4 <GUI_X_GetTaskId>
 8016c10:	6833      	ldr	r3, [r6, #0]
 8016c12:	591a      	ldr	r2, [r3, r4]
 8016c14:	4290      	cmp	r0, r2
 8016c16:	eb03 0104 	add.w	r1, r3, r4
 8016c1a:	f105 0501 	add.w	r5, r5, #1
 8016c1e:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8016c22:	d1ef      	bne.n	8016c04 <GUITASK_CopyContext+0x4c>
 8016c24:	3104      	adds	r1, #4
 8016c26:	f8c8 1000 	str.w	r1, [r8]
 8016c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c2e:	6008      	str	r0, [r1, #0]
 8016c30:	3104      	adds	r1, #4
 8016c32:	f8c8 1000 	str.w	r1, [r8]
 8016c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	3104      	adds	r1, #4
 8016c3e:	f8c8 1000 	str.w	r1, [r8]
 8016c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c46:	4b03      	ldr	r3, [pc, #12]	; (8016c54 <GUITASK_CopyContext+0x9c>)
 8016c48:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8016c58 <GUITASK_CopyContext+0xa0>
 8016c4c:	6819      	ldr	r1, [r3, #0]
 8016c4e:	e7e9      	b.n	8016c24 <GUITASK_CopyContext+0x6c>
 8016c50:	20000260 	.word	0x20000260
 8016c54:	2002af20 	.word	0x2002af20
 8016c58:	2000026c 	.word	0x2000026c

08016c5c <GUI__AlphaPreserveTrans>:
 8016c5c:	b510      	push	{r4, lr}
 8016c5e:	4b09      	ldr	r3, [pc, #36]	; (8016c84 <GUI__AlphaPreserveTrans+0x28>)
 8016c60:	4602      	mov	r2, r0
 8016c62:	781c      	ldrb	r4, [r3, #0]
 8016c64:	b930      	cbnz	r0, 8016c74 <GUI__AlphaPreserveTrans+0x18>
 8016c66:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8016c6a:	701a      	strb	r2, [r3, #0]
 8016c6c:	f005 fd32 	bl	801c6d4 <LCD_AA_SetOrMask>
 8016c70:	4620      	mov	r0, r4
 8016c72:	bd10      	pop	{r4, pc}
 8016c74:	2201      	movs	r2, #1
 8016c76:	2000      	movs	r0, #0
 8016c78:	701a      	strb	r2, [r3, #0]
 8016c7a:	f005 fd2b 	bl	801c6d4 <LCD_AA_SetOrMask>
 8016c7e:	4620      	mov	r0, r4
 8016c80:	bd10      	pop	{r4, pc}
 8016c82:	bf00      	nop
 8016c84:	2002c028 	.word	0x2002c028

08016c88 <GUI_GetLayerPosEx>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	460e      	mov	r6, r1
 8016c8e:	4615      	mov	r5, r2
 8016c90:	f7ff feee 	bl	8016a70 <GUI_Lock>
 8016c94:	4620      	mov	r0, r4
 8016c96:	4631      	mov	r1, r6
 8016c98:	462a      	mov	r2, r5
 8016c9a:	f7fe f821 	bl	8014ce0 <LCD_GetPosEx>
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	b110      	cbz	r0, 8016ca8 <GUI_GetLayerPosEx+0x20>
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	6033      	str	r3, [r6, #0]
 8016ca6:	602b      	str	r3, [r5, #0]
 8016ca8:	f7ff fed8 	bl	8016a5c <GUI_Unlock>
 8016cac:	4620      	mov	r0, r4
 8016cae:	bd70      	pop	{r4, r5, r6, pc}

08016cb0 <GUI_SelectLayer>:
 8016cb0:	b570      	push	{r4, r5, r6, lr}
 8016cb2:	4d0d      	ldr	r5, [pc, #52]	; (8016ce8 <GUI_SelectLayer+0x38>)
 8016cb4:	682b      	ldr	r3, [r5, #0]
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	7c5e      	ldrb	r6, [r3, #17]
 8016cba:	f7ff fed9 	bl	8016a70 <GUI_Lock>
 8016cbe:	2c01      	cmp	r4, #1
 8016cc0:	d903      	bls.n	8016cca <GUI_SelectLayer+0x1a>
 8016cc2:	f7ff fecb 	bl	8016a5c <GUI_Unlock>
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	bd70      	pop	{r4, r5, r6, pc}
 8016cca:	4620      	mov	r0, r4
 8016ccc:	f000 fbfe 	bl	80174cc <GUI_DEVICE__GetpDriver>
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	d0f6      	beq.n	8016cc2 <GUI_SelectLayer+0x12>
 8016cd4:	682b      	ldr	r3, [r5, #0]
 8016cd6:	745c      	strb	r4, [r3, #17]
 8016cd8:	f001 f94c 	bl	8017f74 <GUI_SelectLCD>
 8016cdc:	4b03      	ldr	r3, [pc, #12]	; (8016cec <GUI_SelectLayer+0x3c>)
 8016cde:	601c      	str	r4, [r3, #0]
 8016ce0:	f7ff febc 	bl	8016a5c <GUI_Unlock>
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	bd70      	pop	{r4, r5, r6, pc}
 8016ce8:	2000026c 	.word	0x2000026c
 8016cec:	2002bf94 	.word	0x2002bf94

08016cf0 <GUI_StoreKey>:
 8016cf0:	4b02      	ldr	r3, [pc, #8]	; (8016cfc <GUI_StoreKey+0xc>)
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	b902      	cbnz	r2, 8016cf8 <GUI_StoreKey+0x8>
 8016cf6:	6018      	str	r0, [r3, #0]
 8016cf8:	f7ff bbb0 	b.w	801645c <GUI_SignalEvent>
 8016cfc:	2002af34 	.word	0x2002af34

08016d00 <GUI_PollKeyMsg>:
 8016d00:	b510      	push	{r4, lr}
 8016d02:	f7ff feb5 	bl	8016a70 <GUI_Lock>
 8016d06:	4a0d      	ldr	r2, [pc, #52]	; (8016d3c <GUI_PollKeyMsg+0x3c>)
 8016d08:	490d      	ldr	r1, [pc, #52]	; (8016d40 <GUI_PollKeyMsg+0x40>)
 8016d0a:	6813      	ldr	r3, [r2, #0]
 8016d0c:	6809      	ldr	r1, [r1, #0]
 8016d0e:	428b      	cmp	r3, r1
 8016d10:	d00f      	beq.n	8016d32 <GUI_PollKeyMsg+0x32>
 8016d12:	4c0c      	ldr	r4, [pc, #48]	; (8016d44 <GUI_PollKeyMsg+0x44>)
 8016d14:	42a3      	cmp	r3, r4
 8016d16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d1a:	f04f 0401 	mov.w	r4, #1
 8016d1e:	bf14      	ite	ne
 8016d20:	3308      	addne	r3, #8
 8016d22:	3b50      	subeq	r3, #80	; 0x50
 8016d24:	6013      	str	r3, [r2, #0]
 8016d26:	f7f8 ffd1 	bl	800fccc <WM_OnKey>
 8016d2a:	f7ff fe97 	bl	8016a5c <GUI_Unlock>
 8016d2e:	4620      	mov	r0, r4
 8016d30:	bd10      	pop	{r4, pc}
 8016d32:	2400      	movs	r4, #0
 8016d34:	f7ff fe92 	bl	8016a5c <GUI_Unlock>
 8016d38:	4620      	mov	r0, r4
 8016d3a:	bd10      	pop	{r4, pc}
 8016d3c:	20000268 	.word	0x20000268
 8016d40:	20000264 	.word	0x20000264
 8016d44:	2002af88 	.word	0x2002af88

08016d48 <GUI_DrawHLine>:
 8016d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d4a:	4f14      	ldr	r7, [pc, #80]	; (8016d9c <GUI_DrawHLine+0x54>)
 8016d4c:	b083      	sub	sp, #12
 8016d4e:	4606      	mov	r6, r0
 8016d50:	4614      	mov	r4, r2
 8016d52:	460d      	mov	r5, r1
 8016d54:	f7ff fe8c 	bl	8016a70 <GUI_Lock>
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d5e:	4416      	add	r6, r2
 8016d60:	441d      	add	r5, r3
 8016d62:	441c      	add	r4, r3
 8016d64:	4668      	mov	r0, sp
 8016d66:	b2b3      	uxth	r3, r6
 8016d68:	f8ad 5000 	strh.w	r5, [sp]
 8016d6c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8016d70:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016d74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016d78:	f7fb f95a 	bl	8012030 <WM__InitIVRSearch>
 8016d7c:	b150      	cbz	r0, 8016d94 <GUI_DrawHLine+0x4c>
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d82:	4628      	mov	r0, r5
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	4631      	mov	r1, r6
 8016d88:	4622      	mov	r2, r4
 8016d8a:	4798      	blx	r3
 8016d8c:	f7fb f82a 	bl	8011de4 <WM__GetNextIVR>
 8016d90:	2800      	cmp	r0, #0
 8016d92:	d1f4      	bne.n	8016d7e <GUI_DrawHLine+0x36>
 8016d94:	f7ff fe62 	bl	8016a5c <GUI_Unlock>
 8016d98:	b003      	add	sp, #12
 8016d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d9c:	2000026c 	.word	0x2000026c

08016da0 <GUI_DrawPixel>:
 8016da0:	b570      	push	{r4, r5, r6, lr}
 8016da2:	4e13      	ldr	r6, [pc, #76]	; (8016df0 <GUI_DrawPixel+0x50>)
 8016da4:	b082      	sub	sp, #8
 8016da6:	4605      	mov	r5, r0
 8016da8:	460c      	mov	r4, r1
 8016daa:	f7ff fe61 	bl	8016a70 <GUI_Lock>
 8016dae:	6833      	ldr	r3, [r6, #0]
 8016db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016db4:	4415      	add	r5, r2
 8016db6:	441c      	add	r4, r3
 8016db8:	b2aa      	uxth	r2, r5
 8016dba:	b2a3      	uxth	r3, r4
 8016dbc:	4668      	mov	r0, sp
 8016dbe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016dc2:	f8ad 2000 	strh.w	r2, [sp]
 8016dc6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016dca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016dce:	f7fb f92f 	bl	8012030 <WM__InitIVRSearch>
 8016dd2:	b148      	cbz	r0, 8016de8 <GUI_DrawPixel+0x48>
 8016dd4:	6833      	ldr	r3, [r6, #0]
 8016dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016dd8:	4628      	mov	r0, r5
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	4621      	mov	r1, r4
 8016dde:	4798      	blx	r3
 8016de0:	f7fb f800 	bl	8011de4 <WM__GetNextIVR>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	d1f5      	bne.n	8016dd4 <GUI_DrawPixel+0x34>
 8016de8:	f7ff fe38 	bl	8016a5c <GUI_Unlock>
 8016dec:	b002      	add	sp, #8
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	2000026c 	.word	0x2000026c

08016df4 <GUI_DrawVLine>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	4606      	mov	r6, r0
 8016dfa:	4614      	mov	r4, r2
 8016dfc:	460d      	mov	r5, r1
 8016dfe:	f7ff fe37 	bl	8016a70 <GUI_Lock>
 8016e02:	4b10      	ldr	r3, [pc, #64]	; (8016e44 <GUI_DrawVLine+0x50>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e0a:	4416      	add	r6, r2
 8016e0c:	441d      	add	r5, r3
 8016e0e:	441c      	add	r4, r3
 8016e10:	4668      	mov	r0, sp
 8016e12:	b2b3      	uxth	r3, r6
 8016e14:	f8ad 5002 	strh.w	r5, [sp, #2]
 8016e18:	f8ad 4006 	strh.w	r4, [sp, #6]
 8016e1c:	f8ad 3000 	strh.w	r3, [sp]
 8016e20:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016e24:	f7fb f904 	bl	8012030 <WM__InitIVRSearch>
 8016e28:	b140      	cbz	r0, 8016e3c <GUI_DrawVLine+0x48>
 8016e2a:	4630      	mov	r0, r6
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	4622      	mov	r2, r4
 8016e30:	f7fe f9be 	bl	80151b0 <LCD_DrawVLine>
 8016e34:	f7fa ffd6 	bl	8011de4 <WM__GetNextIVR>
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d1f6      	bne.n	8016e2a <GUI_DrawVLine+0x36>
 8016e3c:	f7ff fe0e 	bl	8016a5c <GUI_Unlock>
 8016e40:	b002      	add	sp, #8
 8016e42:	bd70      	pop	{r4, r5, r6, pc}
 8016e44:	2000026c 	.word	0x2000026c

08016e48 <GUI_FillRect>:
 8016e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e4c:	b083      	sub	sp, #12
 8016e4e:	4607      	mov	r7, r0
 8016e50:	4699      	mov	r9, r3
 8016e52:	460d      	mov	r5, r1
 8016e54:	4690      	mov	r8, r2
 8016e56:	f7ff fe0b 	bl	8016a70 <GUI_Lock>
 8016e5a:	4b11      	ldr	r3, [pc, #68]	; (8016ea0 <GUI_FillRect+0x58>)
 8016e5c:	681c      	ldr	r4, [r3, #0]
 8016e5e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8016e60:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8016e62:	4437      	add	r7, r6
 8016e64:	4425      	add	r5, r4
 8016e66:	4446      	add	r6, r8
 8016e68:	444c      	add	r4, r9
 8016e6a:	4668      	mov	r0, sp
 8016e6c:	f8ad 7000 	strh.w	r7, [sp]
 8016e70:	f8ad 6004 	strh.w	r6, [sp, #4]
 8016e74:	f8ad 5002 	strh.w	r5, [sp, #2]
 8016e78:	f8ad 4006 	strh.w	r4, [sp, #6]
 8016e7c:	f7fb f8d8 	bl	8012030 <WM__InitIVRSearch>
 8016e80:	b148      	cbz	r0, 8016e96 <GUI_FillRect+0x4e>
 8016e82:	4638      	mov	r0, r7
 8016e84:	4629      	mov	r1, r5
 8016e86:	4632      	mov	r2, r6
 8016e88:	4623      	mov	r3, r4
 8016e8a:	f7fe f9b9 	bl	8015200 <LCD_FillRect>
 8016e8e:	f7fa ffa9 	bl	8011de4 <WM__GetNextIVR>
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d1f5      	bne.n	8016e82 <GUI_FillRect+0x3a>
 8016e96:	f7ff fde1 	bl	8016a5c <GUI_Unlock>
 8016e9a:	b003      	add	sp, #12
 8016e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ea0:	2000026c 	.word	0x2000026c

08016ea4 <GUI_FillRectEx>:
 8016ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ea6:	b083      	sub	sp, #12
 8016ea8:	f9b0 7000 	ldrsh.w	r7, [r0]
 8016eac:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8016eb0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8016eb4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8016eb8:	f7ff fdda 	bl	8016a70 <GUI_Lock>
 8016ebc:	4b10      	ldr	r3, [pc, #64]	; (8016f00 <GUI_FillRectEx+0x5c>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ec4:	4417      	add	r7, r2
 8016ec6:	4416      	add	r6, r2
 8016ec8:	441d      	add	r5, r3
 8016eca:	441c      	add	r4, r3
 8016ecc:	4668      	mov	r0, sp
 8016ece:	f8ad 7000 	strh.w	r7, [sp]
 8016ed2:	f8ad 6004 	strh.w	r6, [sp, #4]
 8016ed6:	f8ad 5002 	strh.w	r5, [sp, #2]
 8016eda:	f8ad 4006 	strh.w	r4, [sp, #6]
 8016ede:	f7fb f8a7 	bl	8012030 <WM__InitIVRSearch>
 8016ee2:	b148      	cbz	r0, 8016ef8 <GUI_FillRectEx+0x54>
 8016ee4:	4638      	mov	r0, r7
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	4632      	mov	r2, r6
 8016eea:	4623      	mov	r3, r4
 8016eec:	f7fe f988 	bl	8015200 <LCD_FillRect>
 8016ef0:	f7fa ff78 	bl	8011de4 <WM__GetNextIVR>
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d1f5      	bne.n	8016ee4 <GUI_FillRectEx+0x40>
 8016ef8:	f7ff fdb0 	bl	8016a5c <GUI_Unlock>
 8016efc:	b003      	add	sp, #12
 8016efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f00:	2000026c 	.word	0x2000026c

08016f04 <GUI_DrawBitmap>:
 8016f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f08:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8017008 <GUI_DrawBitmap+0x104>
 8016f0c:	b089      	sub	sp, #36	; 0x24
 8016f0e:	4604      	mov	r4, r0
 8016f10:	460d      	mov	r5, r1
 8016f12:	4616      	mov	r6, r2
 8016f14:	f7ff fdac 	bl	8016a70 <GUI_Lock>
 8016f18:	f8d9 3000 	ldr.w	r3, [r9]
 8016f1c:	8822      	ldrh	r2, [r4, #0]
 8016f1e:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016f20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016f22:	8863      	ldrh	r3, [r4, #2]
 8016f24:	442f      	add	r7, r5
 8016f26:	eb06 0801 	add.w	r8, r6, r1
 8016f2a:	3a01      	subs	r2, #1
 8016f2c:	3b01      	subs	r3, #1
 8016f2e:	443a      	add	r2, r7
 8016f30:	4443      	add	r3, r8
 8016f32:	a806      	add	r0, sp, #24
 8016f34:	f8ad 7018 	strh.w	r7, [sp, #24]
 8016f38:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016f3c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016f40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016f44:	f7fb f874 	bl	8012030 <WM__InitIVRSearch>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d04f      	beq.n	8016fec <GUI_DrawBitmap+0xe8>
 8016f4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801700c <GUI_DrawBitmap+0x108>
 8016f50:	46cb      	mov	fp, r9
 8016f52:	e019      	b.n	8016f88 <GUI_DrawBitmap+0x84>
 8016f54:	f040 0002 	orr.w	r0, r0, #2
 8016f58:	f001 f87c 	bl	8018054 <GUI_SetDrawMode>
 8016f5c:	6921      	ldr	r1, [r4, #16]
 8016f5e:	b319      	cbz	r1, 8016fa8 <GUI_DrawBitmap+0xa4>
 8016f60:	68a0      	ldr	r0, [r4, #8]
 8016f62:	68e6      	ldr	r6, [r4, #12]
 8016f64:	8822      	ldrh	r2, [r4, #0]
 8016f66:	8863      	ldrh	r3, [r4, #2]
 8016f68:	9000      	str	r0, [sp, #0]
 8016f6a:	2001      	movs	r0, #1
 8016f6c:	9002      	str	r0, [sp, #8]
 8016f6e:	9003      	str	r0, [sp, #12]
 8016f70:	9601      	str	r6, [sp, #4]
 8016f72:	680e      	ldr	r6, [r1, #0]
 8016f74:	4638      	mov	r0, r7
 8016f76:	4641      	mov	r1, r8
 8016f78:	47b0      	blx	r6
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	f001 f86a 	bl	8018054 <GUI_SetDrawMode>
 8016f80:	f7fa ff30 	bl	8011de4 <WM__GetNextIVR>
 8016f84:	2800      	cmp	r0, #0
 8016f86:	d031      	beq.n	8016fec <GUI_DrawBitmap+0xe8>
 8016f88:	2000      	movs	r0, #0
 8016f8a:	68e6      	ldr	r6, [r4, #12]
 8016f8c:	f001 f862 	bl	8018054 <GUI_SetDrawMode>
 8016f90:	4605      	mov	r5, r0
 8016f92:	b116      	cbz	r6, 8016f9a <GUI_DrawBitmap+0x96>
 8016f94:	7933      	ldrb	r3, [r6, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d1dc      	bne.n	8016f54 <GUI_DrawBitmap+0x50>
 8016f9a:	f025 0002 	bic.w	r0, r5, #2
 8016f9e:	f001 f859 	bl	8018054 <GUI_SetDrawMode>
 8016fa2:	6921      	ldr	r1, [r4, #16]
 8016fa4:	2900      	cmp	r1, #0
 8016fa6:	d1db      	bne.n	8016f60 <GUI_DrawBitmap+0x5c>
 8016fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8016fac:	f8da 3000 	ldr.w	r3, [sl]
 8016fb0:	7c52      	ldrb	r2, [r2, #17]
 8016fb2:	68e0      	ldr	r0, [r4, #12]
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	4798      	blx	r3
 8016fb8:	b1e8      	cbz	r0, 8016ff6 <GUI_DrawBitmap+0xf2>
 8016fba:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016fbe:	68a6      	ldr	r6, [r4, #8]
 8016fc0:	8822      	ldrh	r2, [r4, #0]
 8016fc2:	8863      	ldrh	r3, [r4, #2]
 8016fc4:	88a1      	ldrh	r1, [r4, #4]
 8016fc6:	9604      	str	r6, [sp, #16]
 8016fc8:	2601      	movs	r6, #1
 8016fca:	f8cd e008 	str.w	lr, [sp, #8]
 8016fce:	9005      	str	r0, [sp, #20]
 8016fd0:	9103      	str	r1, [sp, #12]
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	4641      	mov	r1, r8
 8016fd6:	9600      	str	r6, [sp, #0]
 8016fd8:	9601      	str	r6, [sp, #4]
 8016fda:	f7fe fa5f 	bl	801549c <LCD_DrawBitmap>
 8016fde:	4628      	mov	r0, r5
 8016fe0:	f001 f838 	bl	8018054 <GUI_SetDrawMode>
 8016fe4:	f7fa fefe 	bl	8011de4 <WM__GetNextIVR>
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d1cd      	bne.n	8016f88 <GUI_DrawBitmap+0x84>
 8016fec:	f7ff fd36 	bl	8016a5c <GUI_Unlock>
 8016ff0:	b009      	add	sp, #36	; 0x24
 8016ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ff6:	88e6      	ldrh	r6, [r4, #6]
 8016ff8:	2e01      	cmp	r6, #1
 8016ffa:	bf03      	ittte	eq
 8016ffc:	f8db 3000 	ldreq.w	r3, [fp]
 8017000:	46b6      	moveq	lr, r6
 8017002:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8017004:	46b6      	movne	lr, r6
 8017006:	e7da      	b.n	8016fbe <GUI_DrawBitmap+0xba>
 8017008:	2000026c 	.word	0x2000026c
 801700c:	20000270 	.word	0x20000270

08017010 <GUI_DispString>:
 8017010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017014:	4604      	mov	r4, r0
 8017016:	b083      	sub	sp, #12
 8017018:	2800      	cmp	r0, #0
 801701a:	d069      	beq.n	80170f0 <GUI_DispString+0xe0>
 801701c:	4d44      	ldr	r5, [pc, #272]	; (8017130 <GUI_DispString+0x120>)
 801701e:	f7ff fd27 	bl	8016a70 <GUI_Lock>
 8017022:	f001 fa49 	bl	80184b8 <GUI_GetFontDistY>
 8017026:	682b      	ldr	r3, [r5, #0]
 8017028:	4606      	mov	r6, r0
 801702a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801702e:	f001 fa1f 	bl	8018470 <GUI_GetYAdjust>
 8017032:	682a      	ldr	r2, [r5, #0]
 8017034:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8017036:	fa1f f980 	uxth.w	r9, r0
 801703a:	ebc9 0303 	rsb	r3, r9, r3
 801703e:	b29b      	uxth	r3, r3
 8017040:	8493      	strh	r3, [r2, #36]	; 0x24
 8017042:	7821      	ldrb	r1, [r4, #0]
 8017044:	2900      	cmp	r1, #0
 8017046:	d04a      	beq.n	80170de <GUI_DispString+0xce>
 8017048:	b2b6      	uxth	r6, r6
 801704a:	462f      	mov	r7, r5
 801704c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8017050:	4620      	mov	r0, r4
 8017052:	f001 f94b 	bl	80182ec <GUI__GetLineNumChars>
 8017056:	4682      	mov	sl, r0
 8017058:	4651      	mov	r1, sl
 801705a:	4620      	mov	r0, r4
 801705c:	f001 f96c 	bl	8018338 <GUI__GetLineDistX>
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017064:	f002 0203 	and.w	r2, r2, #3
 8017068:	2a01      	cmp	r2, #1
 801706a:	d05e      	beq.n	801712a <GUI_DispString+0x11a>
 801706c:	2a02      	cmp	r2, #2
 801706e:	d055      	beq.n	801711c <GUI_DispString+0x10c>
 8017070:	fa1f fb80 	uxth.w	fp, r0
 8017074:	2100      	movs	r1, #0
 8017076:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8017078:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 801707a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801707e:	1a51      	subs	r1, r2, r1
 8017080:	b289      	uxth	r1, r1
 8017082:	b28a      	uxth	r2, r1
 8017084:	3801      	subs	r0, #1
 8017086:	f10b 3eff 	add.w	lr, fp, #4294967295
 801708a:	448e      	add	lr, r1
 801708c:	845a      	strh	r2, [r3, #34]	; 0x22
 801708e:	4651      	mov	r1, sl
 8017090:	1833      	adds	r3, r6, r0
 8017092:	f8ad 2000 	strh.w	r2, [sp]
 8017096:	4620      	mov	r0, r4
 8017098:	466a      	mov	r2, sp
 801709a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801709e:	f8ad e004 	strh.w	lr, [sp, #4]
 80170a2:	f001 f98d 	bl	80183c0 <GUI__DispLine>
 80170a6:	682b      	ldr	r3, [r5, #0]
 80170a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80170ac:	849a      	strh	r2, [r3, #36]	; 0x24
 80170ae:	4651      	mov	r1, sl
 80170b0:	4620      	mov	r0, r4
 80170b2:	f7ff fa29 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 80170b6:	5c22      	ldrb	r2, [r4, r0]
 80170b8:	2a0a      	cmp	r2, #10
 80170ba:	eb04 0300 	add.w	r3, r4, r0
 80170be:	d01a      	beq.n	80170f6 <GUI_DispString+0xe6>
 80170c0:	2a0d      	cmp	r2, #13
 80170c2:	d018      	beq.n	80170f6 <GUI_DispString+0xe6>
 80170c4:	f8bd 1000 	ldrh.w	r1, [sp]
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	448b      	add	fp, r1
 80170cc:	f8a2 b022 	strh.w	fp, [r2, #34]	; 0x22
 80170d0:	7819      	ldrb	r1, [r3, #0]
 80170d2:	b119      	cbz	r1, 80170dc <GUI_DispString+0xcc>
 80170d4:	7859      	ldrb	r1, [r3, #1]
 80170d6:	1c5c      	adds	r4, r3, #1
 80170d8:	2900      	cmp	r1, #0
 80170da:	d1b7      	bne.n	801704c <GUI_DispString+0x3c>
 80170dc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80170de:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80170e0:	4499      	add	r9, r3
 80170e2:	f021 0103 	bic.w	r1, r1, #3
 80170e6:	f8a2 9024 	strh.w	r9, [r2, #36]	; 0x24
 80170ea:	8591      	strh	r1, [r2, #44]	; 0x2c
 80170ec:	f7ff fcb6 	bl	8016a5c <GUI_Unlock>
 80170f0:	b003      	add	sp, #12
 80170f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f6:	682a      	ldr	r2, [r5, #0]
 80170f8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80170fa:	f001 0103 	and.w	r1, r1, #3
 80170fe:	3901      	subs	r1, #1
 8017100:	2901      	cmp	r1, #1
 8017102:	bf8a      	itet	hi
 8017104:	8c11      	ldrhhi	r1, [r2, #32]
 8017106:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 801710a:	8451      	strhhi	r1, [r2, #34]	; 0x22
 801710c:	7819      	ldrb	r1, [r3, #0]
 801710e:	290a      	cmp	r1, #10
 8017110:	d1df      	bne.n	80170d2 <GUI_DispString+0xc2>
 8017112:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8017114:	4431      	add	r1, r6
 8017116:	8491      	strh	r1, [r2, #36]	; 0x24
 8017118:	7819      	ldrb	r1, [r3, #0]
 801711a:	e7da      	b.n	80170d2 <GUI_DispString+0xc2>
 801711c:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8017120:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8017124:	fa1f fb80 	uxth.w	fp, r0
 8017128:	e7a5      	b.n	8017076 <GUI_DispString+0x66>
 801712a:	b281      	uxth	r1, r0
 801712c:	468b      	mov	fp, r1
 801712e:	e7a2      	b.n	8017076 <GUI_DispString+0x66>
 8017130:	2000026c 	.word	0x2000026c

08017134 <GUI_DispStringAt>:
 8017134:	b570      	push	{r4, r5, r6, lr}
 8017136:	460c      	mov	r4, r1
 8017138:	4616      	mov	r6, r2
 801713a:	4605      	mov	r5, r0
 801713c:	f7ff fc98 	bl	8016a70 <GUI_Lock>
 8017140:	4b05      	ldr	r3, [pc, #20]	; (8017158 <GUI_DispStringAt+0x24>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	4628      	mov	r0, r5
 8017146:	845c      	strh	r4, [r3, #34]	; 0x22
 8017148:	849e      	strh	r6, [r3, #36]	; 0x24
 801714a:	f7ff ff61 	bl	8017010 <GUI_DispString>
 801714e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017152:	f7ff bc83 	b.w	8016a5c <GUI_Unlock>
 8017156:	bf00      	nop
 8017158:	2000026c 	.word	0x2000026c

0801715c <GUI__DispStringInRect>:
 801715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017160:	b087      	sub	sp, #28
 8017162:	460c      	mov	r4, r1
 8017164:	9001      	str	r0, [sp, #4]
 8017166:	4690      	mov	r8, r2
 8017168:	461d      	mov	r5, r3
 801716a:	f001 f9a5 	bl	80184b8 <GUI_GetFontDistY>
 801716e:	9f01      	ldr	r7, [sp, #4]
 8017170:	4682      	mov	sl, r0
 8017172:	2c00      	cmp	r4, #0
 8017174:	f000 80a8 	beq.w	80172c8 <GUI__DispStringInRect+0x16c>
 8017178:	6820      	ldr	r0, [r4, #0]
 801717a:	6861      	ldr	r1, [r4, #4]
 801717c:	ab02      	add	r3, sp, #8
 801717e:	c303      	stmia	r3!, {r0, r1}
 8017180:	f018 030c 	ands.w	r3, r8, #12
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	d166      	bne.n	8017256 <GUI__DispStringInRect+0xfa>
 8017188:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 801718c:	9701      	str	r7, [sp, #4]
 801718e:	2d00      	cmp	r5, #0
 8017190:	d05e      	beq.n	8017250 <GUI__DispStringInRect+0xf4>
 8017192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017196:	fa1f fa8a 	uxth.w	sl, sl
 801719a:	4638      	mov	r0, r7
 801719c:	f8df b130 	ldr.w	fp, [pc, #304]	; 80172d0 <GUI__DispStringInRect+0x174>
 80171a0:	f8cd a000 	str.w	sl, [sp]
 80171a4:	f008 0803 	and.w	r8, r8, #3
 80171a8:	2700      	movs	r7, #0
 80171aa:	f10d 0904 	add.w	r9, sp, #4
 80171ae:	e031      	b.n	8017214 <GUI__DispStringInRect+0xb8>
 80171b0:	f1b8 0f02 	cmp.w	r8, #2
 80171b4:	d041      	beq.n	801723a <GUI__DispStringInRect+0xde>
 80171b6:	f1b8 0f00 	cmp.w	r8, #0
 80171ba:	d101      	bne.n	80171c0 <GUI__DispStringInRect+0x64>
 80171bc:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 80171c0:	f8db 1000 	ldr.w	r1, [fp]
 80171c4:	f8dd e000 	ldr.w	lr, [sp]
 80171c8:	9801      	ldr	r0, [sp, #4]
 80171ca:	b2ba      	uxth	r2, r7
 80171cc:	f103 3cff 	add.w	ip, r3, #4294967295
 80171d0:	b2b3      	uxth	r3, r6
 80171d2:	44b6      	add	lr, r6
 80171d4:	44bc      	add	ip, r7
 80171d6:	848b      	strh	r3, [r1, #36]	; 0x24
 80171d8:	844a      	strh	r2, [r1, #34]	; 0x22
 80171da:	f8ad 2010 	strh.w	r2, [sp, #16]
 80171de:	4621      	mov	r1, r4
 80171e0:	aa04      	add	r2, sp, #16
 80171e2:	f8ad c014 	strh.w	ip, [sp, #20]
 80171e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80171ea:	f8ad e016 	strh.w	lr, [sp, #22]
 80171ee:	f001 f8e7 	bl	80183c0 <GUI__DispLine>
 80171f2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80171f6:	4621      	mov	r1, r4
 80171f8:	4650      	mov	r0, sl
 80171fa:	f7ff f985 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 80171fe:	4450      	add	r0, sl
 8017200:	9001      	str	r0, [sp, #4]
 8017202:	f001 f959 	bl	80184b8 <GUI_GetFontDistY>
 8017206:	4406      	add	r6, r0
 8017208:	4648      	mov	r0, r9
 801720a:	f7fe fc39 	bl	8015a80 <GUI__HandleEOLine>
 801720e:	b9f8      	cbnz	r0, 8017250 <GUI__DispStringInRect+0xf4>
 8017210:	b1f5      	cbz	r5, 8017250 <GUI__DispStringInRect+0xf4>
 8017212:	9801      	ldr	r0, [sp, #4]
 8017214:	4629      	mov	r1, r5
 8017216:	f001 f869 	bl	80182ec <GUI__GetLineNumChars>
 801721a:	4604      	mov	r4, r0
 801721c:	4601      	mov	r1, r0
 801721e:	9801      	ldr	r0, [sp, #4]
 8017220:	f001 f88a 	bl	8018338 <GUI__GetLineDistX>
 8017224:	f1b8 0f01 	cmp.w	r8, #1
 8017228:	ebc4 0505 	rsb	r5, r4, r5
 801722c:	4603      	mov	r3, r0
 801722e:	d1bf      	bne.n	80171b0 <GUI__DispStringInRect+0x54>
 8017230:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017234:	1a3f      	subs	r7, r7, r0
 8017236:	3701      	adds	r7, #1
 8017238:	e7c2      	b.n	80171c0 <GUI__DispStringInRect+0x64>
 801723a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801723e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017242:	1abf      	subs	r7, r7, r2
 8017244:	1a3f      	subs	r7, r7, r0
 8017246:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801724a:	eb02 0767 	add.w	r7, r2, r7, asr #1
 801724e:	e7b7      	b.n	80171c0 <GUI__DispStringInRect+0x64>
 8017250:	b007      	add	sp, #28
 8017252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017256:	46ab      	mov	fp, r5
 8017258:	b1d5      	cbz	r5, 8017290 <GUI__DispStringInRect+0x134>
 801725a:	462c      	mov	r4, r5
 801725c:	f04f 0b00 	mov.w	fp, #0
 8017260:	f10d 0904 	add.w	r9, sp, #4
 8017264:	e000      	b.n	8017268 <GUI__DispStringInRect+0x10c>
 8017266:	b19c      	cbz	r4, 8017290 <GUI__DispStringInRect+0x134>
 8017268:	4621      	mov	r1, r4
 801726a:	9801      	ldr	r0, [sp, #4]
 801726c:	f001 f83e 	bl	80182ec <GUI__GetLineNumChars>
 8017270:	9e01      	ldr	r6, [sp, #4]
 8017272:	4602      	mov	r2, r0
 8017274:	4601      	mov	r1, r0
 8017276:	4630      	mov	r0, r6
 8017278:	1aa4      	subs	r4, r4, r2
 801727a:	f7ff f945 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 801727e:	1833      	adds	r3, r6, r0
 8017280:	4648      	mov	r0, r9
 8017282:	f10b 0b01 	add.w	fp, fp, #1
 8017286:	9301      	str	r3, [sp, #4]
 8017288:	f7fe fbfa 	bl	8015a80 <GUI__HandleEOLine>
 801728c:	2800      	cmp	r0, #0
 801728e:	d0ea      	beq.n	8017266 <GUI__DispStringInRect+0x10a>
 8017290:	9b00      	ldr	r3, [sp, #0]
 8017292:	2b08      	cmp	r3, #8
 8017294:	d005      	beq.n	80172a2 <GUI__DispStringInRect+0x146>
 8017296:	2b0c      	cmp	r3, #12
 8017298:	d009      	beq.n	80172ae <GUI__DispStringInRect+0x152>
 801729a:	2b04      	cmp	r3, #4
 801729c:	d001      	beq.n	80172a2 <GUI__DispStringInRect+0x146>
 801729e:	2600      	movs	r6, #0
 80172a0:	e774      	b.n	801718c <GUI__DispStringInRect+0x30>
 80172a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80172a6:	fb0a 661b 	mls	r6, sl, fp, r6
 80172aa:	3601      	adds	r6, #1
 80172ac:	e76e      	b.n	801718c <GUI__DispStringInRect+0x30>
 80172ae:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80172b2:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80172b6:	1ad2      	subs	r2, r2, r3
 80172b8:	3201      	adds	r2, #1
 80172ba:	fb0a 2b1b 	mls	fp, sl, fp, r2
 80172be:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80172c2:	eb03 066b 	add.w	r6, r3, fp, asr #1
 80172c6:	e761      	b.n	801718c <GUI__DispStringInRect+0x30>
 80172c8:	a802      	add	r0, sp, #8
 80172ca:	f000 fd55 	bl	8017d78 <GUI_GetClientRect>
 80172ce:	e757      	b.n	8017180 <GUI__DispStringInRect+0x24>
 80172d0:	2000026c 	.word	0x2000026c

080172d4 <GUI_DispStringInRect>:
 80172d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172d6:	4605      	mov	r5, r0
 80172d8:	b083      	sub	sp, #12
 80172da:	460c      	mov	r4, r1
 80172dc:	4617      	mov	r7, r2
 80172de:	b1d8      	cbz	r0, 8017318 <GUI_DispStringInRect+0x44>
 80172e0:	f7ff fbc6 	bl	8016a70 <GUI_Lock>
 80172e4:	b1d4      	cbz	r4, 801731c <GUI_DispStringInRect+0x48>
 80172e6:	4620      	mov	r0, r4
 80172e8:	f7f8 fdfc 	bl	800fee4 <WM_SetUserClipRect>
 80172ec:	4606      	mov	r6, r0
 80172ee:	b138      	cbz	r0, 8017300 <GUI_DispStringInRect+0x2c>
 80172f0:	4668      	mov	r0, sp
 80172f2:	4621      	mov	r1, r4
 80172f4:	4632      	mov	r2, r6
 80172f6:	f7fe fbfb 	bl	8015af0 <GUI__IntersectRects>
 80172fa:	4668      	mov	r0, sp
 80172fc:	f7f8 fdf2 	bl	800fee4 <WM_SetUserClipRect>
 8017300:	4628      	mov	r0, r5
 8017302:	4621      	mov	r1, r4
 8017304:	463a      	mov	r2, r7
 8017306:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801730a:	f7ff ff27 	bl	801715c <GUI__DispStringInRect>
 801730e:	4630      	mov	r0, r6
 8017310:	f7f8 fde8 	bl	800fee4 <WM_SetUserClipRect>
 8017314:	f7ff fba2 	bl	8016a5c <GUI_Unlock>
 8017318:	b003      	add	sp, #12
 801731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801731c:	4626      	mov	r6, r4
 801731e:	e7ef      	b.n	8017300 <GUI_DispStringInRect+0x2c>

08017320 <GUI_DispStringInRectWrap>:
 8017320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017324:	b08b      	sub	sp, #44	; 0x2c
 8017326:	4604      	mov	r4, r0
 8017328:	9100      	str	r1, [sp, #0]
 801732a:	4691      	mov	r9, r2
 801732c:	461f      	mov	r7, r3
 801732e:	2800      	cmp	r0, #0
 8017330:	f000 8092 	beq.w	8017458 <GUI_DispStringInRectWrap+0x138>
 8017334:	f7ff fb9c 	bl	8016a70 <GUI_Lock>
 8017338:	9b00      	ldr	r3, [sp, #0]
 801733a:	881b      	ldrh	r3, [r3, #0]
 801733c:	9302      	str	r3, [sp, #8]
 801733e:	9b00      	ldr	r3, [sp, #0]
 8017340:	9902      	ldr	r1, [sp, #8]
 8017342:	889b      	ldrh	r3, [r3, #4]
 8017344:	9301      	str	r3, [sp, #4]
 8017346:	9b00      	ldr	r3, [sp, #0]
 8017348:	9a01      	ldr	r2, [sp, #4]
 801734a:	885b      	ldrh	r3, [r3, #2]
 801734c:	9304      	str	r3, [sp, #16]
 801734e:	9b00      	ldr	r3, [sp, #0]
 8017350:	88db      	ldrh	r3, [r3, #6]
 8017352:	9305      	str	r3, [sp, #20]
 8017354:	fa0f f882 	sxth.w	r8, r2
 8017358:	b20b      	sxth	r3, r1
 801735a:	ebc3 0808 	rsb	r8, r3, r8
 801735e:	f001 f8ab 	bl	80184b8 <GUI_GetFontDistY>
 8017362:	f019 050c 	ands.w	r5, r9, #12
 8017366:	f108 0801 	add.w	r8, r8, #1
 801736a:	4683      	mov	fp, r0
 801736c:	d177      	bne.n	801745e <GUI_DispStringInRectWrap+0x13e>
 801736e:	9800      	ldr	r0, [sp, #0]
 8017370:	f7f8 fdb8 	bl	800fee4 <WM_SetUserClipRect>
 8017374:	9003      	str	r0, [sp, #12]
 8017376:	b1b8      	cbz	r0, 80173a8 <GUI_DispStringInRectWrap+0x88>
 8017378:	9902      	ldr	r1, [sp, #8]
 801737a:	2200      	movs	r2, #0
 801737c:	4613      	mov	r3, r2
 801737e:	f361 020f 	bfi	r2, r1, #0, #16
 8017382:	9901      	ldr	r1, [sp, #4]
 8017384:	f361 030f 	bfi	r3, r1, #0, #16
 8017388:	9904      	ldr	r1, [sp, #16]
 801738a:	f361 421f 	bfi	r2, r1, #16, #16
 801738e:	9905      	ldr	r1, [sp, #20]
 8017390:	9208      	str	r2, [sp, #32]
 8017392:	f361 431f 	bfi	r3, r1, #16, #16
 8017396:	a808      	add	r0, sp, #32
 8017398:	9900      	ldr	r1, [sp, #0]
 801739a:	9a03      	ldr	r2, [sp, #12]
 801739c:	9309      	str	r3, [sp, #36]	; 0x24
 801739e:	f7fe fba7 	bl	8015af0 <GUI__IntersectRects>
 80173a2:	a808      	add	r0, sp, #32
 80173a4:	f7f8 fd9e 	bl	800fee4 <WM_SetUserClipRect>
 80173a8:	9b04      	ldr	r3, [sp, #16]
 80173aa:	fa1f fa8b 	uxth.w	sl, fp
 80173ae:	b29d      	uxth	r5, r3
 80173b0:	f10a 36ff 	add.w	r6, sl, #4294967295
 80173b4:	f009 0903 	and.w	r9, r9, #3
 80173b8:	463b      	mov	r3, r7
 80173ba:	442e      	add	r6, r5
 80173bc:	464f      	mov	r7, r9
 80173be:	b2b6      	uxth	r6, r6
 80173c0:	4699      	mov	r9, r3
 80173c2:	e017      	b.n	80173f4 <GUI_DispStringInRectWrap+0xd4>
 80173c4:	2f02      	cmp	r7, #2
 80173c6:	d032      	beq.n	801742e <GUI_DispStringInRectWrap+0x10e>
 80173c8:	b91f      	cbnz	r7, 80173d2 <GUI_DispStringInRectWrap+0xb2>
 80173ca:	9b00      	ldr	r3, [sp, #0]
 80173cc:	881a      	ldrh	r2, [r3, #0]
 80173ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80173d2:	4620      	mov	r0, r4
 80173d4:	4659      	mov	r1, fp
 80173d6:	aa06      	add	r2, sp, #24
 80173d8:	f000 fff2 	bl	80183c0 <GUI__DispLine>
 80173dc:	4620      	mov	r0, r4
 80173de:	4641      	mov	r1, r8
 80173e0:	464a      	mov	r2, r9
 80173e2:	f005 fa15 	bl	801c810 <GUI__WrapGetNumBytesToNextLine>
 80173e6:	4404      	add	r4, r0
 80173e8:	4455      	add	r5, sl
 80173ea:	7823      	ldrb	r3, [r4, #0]
 80173ec:	4456      	add	r6, sl
 80173ee:	b2ad      	uxth	r5, r5
 80173f0:	b2b6      	uxth	r6, r6
 80173f2:	b363      	cbz	r3, 801744e <GUI_DispStringInRectWrap+0x12e>
 80173f4:	4641      	mov	r1, r8
 80173f6:	464a      	mov	r2, r9
 80173f8:	4620      	mov	r0, r4
 80173fa:	f005 f9f1 	bl	801c7e0 <GUI__WrapGetNumCharsDisp>
 80173fe:	9b02      	ldr	r3, [sp, #8]
 8017400:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017404:	4601      	mov	r1, r0
 8017406:	9b01      	ldr	r3, [sp, #4]
 8017408:	f8ad 501a 	strh.w	r5, [sp, #26]
 801740c:	4683      	mov	fp, r0
 801740e:	4620      	mov	r0, r4
 8017410:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017414:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017418:	f000 ff8e 	bl	8018338 <GUI__GetLineDistX>
 801741c:	2f01      	cmp	r7, #1
 801741e:	d1d1      	bne.n	80173c4 <GUI_DispStringInRectWrap+0xa4>
 8017420:	9900      	ldr	r1, [sp, #0]
 8017422:	888a      	ldrh	r2, [r1, #4]
 8017424:	3201      	adds	r2, #1
 8017426:	1a10      	subs	r0, r2, r0
 8017428:	f8ad 0018 	strh.w	r0, [sp, #24]
 801742c:	e7d1      	b.n	80173d2 <GUI_DispStringInRectWrap+0xb2>
 801742e:	9900      	ldr	r1, [sp, #0]
 8017430:	880a      	ldrh	r2, [r1, #0]
 8017432:	f9b1 e004 	ldrsh.w	lr, [r1, #4]
 8017436:	b211      	sxth	r1, r2
 8017438:	ebc1 010e 	rsb	r1, r1, lr
 801743c:	1a08      	subs	r0, r1, r0
 801743e:	3001      	adds	r0, #1
 8017440:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8017444:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8017448:	f8ad 2018 	strh.w	r2, [sp, #24]
 801744c:	e7c1      	b.n	80173d2 <GUI_DispStringInRectWrap+0xb2>
 801744e:	9803      	ldr	r0, [sp, #12]
 8017450:	f7f8 fd48 	bl	800fee4 <WM_SetUserClipRect>
 8017454:	f7ff fb02 	bl	8016a5c <GUI_Unlock>
 8017458:	b00b      	add	sp, #44	; 0x2c
 801745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745e:	f7ff fb07 	bl	8016a70 <GUI_Lock>
 8017462:	46a2      	mov	sl, r4
 8017464:	2600      	movs	r6, #0
 8017466:	4650      	mov	r0, sl
 8017468:	4641      	mov	r1, r8
 801746a:	463a      	mov	r2, r7
 801746c:	f005 f9d0 	bl	801c810 <GUI__WrapGetNumBytesToNextLine>
 8017470:	b110      	cbz	r0, 8017478 <GUI_DispStringInRectWrap+0x158>
 8017472:	4482      	add	sl, r0
 8017474:	3601      	adds	r6, #1
 8017476:	e7f6      	b.n	8017466 <GUI_DispStringInRectWrap+0x146>
 8017478:	f7ff faf0 	bl	8016a5c <GUI_Unlock>
 801747c:	2d08      	cmp	r5, #8
 801747e:	d004      	beq.n	801748a <GUI_DispStringInRectWrap+0x16a>
 8017480:	2d0c      	cmp	r5, #12
 8017482:	d009      	beq.n	8017498 <GUI_DispStringInRectWrap+0x178>
 8017484:	2d04      	cmp	r5, #4
 8017486:	f47f af72 	bne.w	801736e <GUI_DispStringInRectWrap+0x4e>
 801748a:	9905      	ldr	r1, [sp, #20]
 801748c:	1c4b      	adds	r3, r1, #1
 801748e:	fb06 361b 	mls	r6, r6, fp, r3
 8017492:	b2b6      	uxth	r6, r6
 8017494:	9604      	str	r6, [sp, #16]
 8017496:	e76a      	b.n	801736e <GUI_DispStringInRectWrap+0x4e>
 8017498:	9904      	ldr	r1, [sp, #16]
 801749a:	9a05      	ldr	r2, [sp, #20]
 801749c:	b213      	sxth	r3, r2
 801749e:	b20a      	sxth	r2, r1
 80174a0:	1a9b      	subs	r3, r3, r2
 80174a2:	3301      	adds	r3, #1
 80174a4:	fb06 361b 	mls	r6, r6, fp, r3
 80174a8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80174ac:	eb01 0566 	add.w	r5, r1, r6, asr #1
 80174b0:	b2ad      	uxth	r5, r5
 80174b2:	9504      	str	r5, [sp, #16]
 80174b4:	e75b      	b.n	801736e <GUI_DispStringInRectWrap+0x4e>
 80174b6:	bf00      	nop

080174b8 <GUI_GetStringDistX>:
 80174b8:	b510      	push	{r4, lr}
 80174ba:	4604      	mov	r4, r0
 80174bc:	f7ff f852 	bl	8016564 <GUI__GetNumChars>
 80174c0:	4601      	mov	r1, r0
 80174c2:	4620      	mov	r0, r4
 80174c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174c8:	f000 bf36 	b.w	8018338 <GUI__GetLineDistX>

080174cc <GUI_DEVICE__GetpDriver>:
 80174cc:	2801      	cmp	r0, #1
 80174ce:	dc0e      	bgt.n	80174ee <GUI_DEVICE__GetpDriver+0x22>
 80174d0:	4b08      	ldr	r3, [pc, #32]	; (80174f4 <GUI_DEVICE__GetpDriver+0x28>)
 80174d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80174d6:	b158      	cbz	r0, 80174f0 <GUI_DEVICE__GetpDriver+0x24>
 80174d8:	68c3      	ldr	r3, [r0, #12]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	b91b      	cbnz	r3, 80174e6 <GUI_DEVICE__GetpDriver+0x1a>
 80174de:	e008      	b.n	80174f2 <GUI_DEVICE__GetpDriver+0x26>
 80174e0:	68c3      	ldr	r3, [r0, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	b123      	cbz	r3, 80174f0 <GUI_DEVICE__GetpDriver+0x24>
 80174e6:	6800      	ldr	r0, [r0, #0]
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d1f9      	bne.n	80174e0 <GUI_DEVICE__GetpDriver+0x14>
 80174ec:	4770      	bx	lr
 80174ee:	2000      	movs	r0, #0
 80174f0:	4770      	bx	lr
 80174f2:	4770      	bx	lr
 80174f4:	2002c040 	.word	0x2002c040

080174f8 <GUI_DEVICE_Delete>:
 80174f8:	f001 bcf0 	b.w	8018edc <GUI_ALLOC_FreeFixedBlock>

080174fc <GUI_DEVICE_Create>:
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
 8017502:	461d      	mov	r5, r3
 8017504:	4607      	mov	r7, r0
 8017506:	460e      	mov	r6, r1
 8017508:	4690      	mov	r8, r2
 801750a:	dc0f      	bgt.n	801752c <GUI_DEVICE_Create+0x30>
 801750c:	201c      	movs	r0, #28
 801750e:	f001 fcef 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 8017512:	b158      	cbz	r0, 801752c <GUI_DEVICE_Create+0x30>
 8017514:	b16e      	cbz	r6, 8017532 <GUI_DEVICE_Create+0x36>
 8017516:	6106      	str	r6, [r0, #16]
 8017518:	2300      	movs	r3, #0
 801751a:	6083      	str	r3, [r0, #8]
 801751c:	6185      	str	r5, [r0, #24]
 801751e:	f8a0 8014 	strh.w	r8, [r0, #20]
 8017522:	60c7      	str	r7, [r0, #12]
 8017524:	6003      	str	r3, [r0, #0]
 8017526:	6043      	str	r3, [r0, #4]
 8017528:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 801752c:	2000      	movs	r0, #0
 801752e:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 8017532:	4b06      	ldr	r3, [pc, #24]	; (801754c <GUI_DEVICE_Create+0x50>)
 8017534:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8017538:	b909      	cbnz	r1, 801753e <GUI_DEVICE_Create+0x42>
 801753a:	e7ed      	b.n	8017518 <GUI_DEVICE_Create+0x1c>
 801753c:	4619      	mov	r1, r3
 801753e:	680b      	ldr	r3, [r1, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d1fb      	bne.n	801753c <GUI_DEVICE_Create+0x40>
 8017544:	690b      	ldr	r3, [r1, #16]
 8017546:	6103      	str	r3, [r0, #16]
 8017548:	e7e6      	b.n	8017518 <GUI_DEVICE_Create+0x1c>
 801754a:	bf00      	nop
 801754c:	2002c040 	.word	0x2002c040

08017550 <GUI_DEVICE_Unlink>:
 8017550:	4a0b      	ldr	r2, [pc, #44]	; (8017580 <GUI_DEVICE_Unlink+0x30>)
 8017552:	6981      	ldr	r1, [r0, #24]
 8017554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017558:	4298      	cmp	r0, r3
 801755a:	6803      	ldr	r3, [r0, #0]
 801755c:	d009      	beq.n	8017572 <GUI_DEVICE_Unlink+0x22>
 801755e:	6842      	ldr	r2, [r0, #4]
 8017560:	b10a      	cbz	r2, 8017566 <GUI_DEVICE_Unlink+0x16>
 8017562:	6013      	str	r3, [r2, #0]
 8017564:	6803      	ldr	r3, [r0, #0]
 8017566:	b103      	cbz	r3, 801756a <GUI_DEVICE_Unlink+0x1a>
 8017568:	605a      	str	r2, [r3, #4]
 801756a:	2300      	movs	r3, #0
 801756c:	6003      	str	r3, [r0, #0]
 801756e:	6043      	str	r3, [r0, #4]
 8017570:	4770      	bx	lr
 8017572:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d0f1      	beq.n	801755e <GUI_DEVICE_Unlink+0xe>
 801757a:	2200      	movs	r2, #0
 801757c:	605a      	str	r2, [r3, #4]
 801757e:	e7ee      	b.n	801755e <GUI_DEVICE_Unlink+0xe>
 8017580:	2002c040 	.word	0x2002c040

08017584 <GUI_DEVICE_Link>:
 8017584:	b430      	push	{r4, r5}
 8017586:	4601      	mov	r1, r0
 8017588:	b110      	cbz	r0, 8017590 <GUI_DEVICE_Link+0xc>
 801758a:	6984      	ldr	r4, [r0, #24]
 801758c:	2c01      	cmp	r4, #1
 801758e:	dd02      	ble.n	8017596 <GUI_DEVICE_Link+0x12>
 8017590:	2001      	movs	r0, #1
 8017592:	bc30      	pop	{r4, r5}
 8017594:	4770      	bx	lr
 8017596:	4b1e      	ldr	r3, [pc, #120]	; (8017610 <GUI_DEVICE_Link+0x8c>)
 8017598:	4d1e      	ldr	r5, [pc, #120]	; (8017614 <GUI_DEVICE_Link+0x90>)
 801759a:	781a      	ldrb	r2, [r3, #0]
 801759c:	4294      	cmp	r4, r2
 801759e:	bfa4      	itt	ge
 80175a0:	1c62      	addge	r2, r4, #1
 80175a2:	701a      	strbge	r2, [r3, #0]
 80175a4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80175a8:	b90b      	cbnz	r3, 80175ae <GUI_DEVICE_Link+0x2a>
 80175aa:	e02c      	b.n	8017606 <GUI_DEVICE_Link+0x82>
 80175ac:	4613      	mov	r3, r2
 80175ae:	685a      	ldr	r2, [r3, #4]
 80175b0:	2a00      	cmp	r2, #0
 80175b2:	d1fb      	bne.n	80175ac <GUI_DEVICE_Link+0x28>
 80175b4:	68ca      	ldr	r2, [r1, #12]
 80175b6:	6810      	ldr	r0, [r2, #0]
 80175b8:	e002      	b.n	80175c0 <GUI_DEVICE_Link+0x3c>
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d0e7      	beq.n	8017590 <GUI_DEVICE_Link+0xc>
 80175c0:	68da      	ldr	r2, [r3, #12]
 80175c2:	6812      	ldr	r2, [r2, #0]
 80175c4:	4282      	cmp	r2, r0
 80175c6:	dcf8      	bgt.n	80175ba <GUI_DEVICE_Link+0x36>
 80175c8:	4290      	cmp	r0, r2
 80175ca:	d00c      	beq.n	80175e6 <GUI_DEVICE_Link+0x62>
 80175cc:	685a      	ldr	r2, [r3, #4]
 80175ce:	b1ba      	cbz	r2, 8017600 <GUI_DEVICE_Link+0x7c>
 80175d0:	6011      	str	r1, [r2, #0]
 80175d2:	604a      	str	r2, [r1, #4]
 80175d4:	428b      	cmp	r3, r1
 80175d6:	bf14      	ite	ne
 80175d8:	461a      	movne	r2, r3
 80175da:	2200      	moveq	r2, #0
 80175dc:	6059      	str	r1, [r3, #4]
 80175de:	2000      	movs	r0, #0
 80175e0:	600a      	str	r2, [r1, #0]
 80175e2:	bc30      	pop	{r4, r5}
 80175e4:	4770      	bx	lr
 80175e6:	8a8a      	ldrh	r2, [r1, #20]
 80175e8:	2a01      	cmp	r2, #1
 80175ea:	d1ef      	bne.n	80175cc <GUI_DEVICE_Link+0x48>
 80175ec:	e004      	b.n	80175f8 <GUI_DEVICE_Link+0x74>
 80175ee:	68d3      	ldr	r3, [r2, #12]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	4283      	cmp	r3, r0
 80175f4:	4613      	mov	r3, r2
 80175f6:	dbe9      	blt.n	80175cc <GUI_DEVICE_Link+0x48>
 80175f8:	681a      	ldr	r2, [r3, #0]
 80175fa:	2a00      	cmp	r2, #0
 80175fc:	d1f7      	bne.n	80175ee <GUI_DEVICE_Link+0x6a>
 80175fe:	e7e5      	b.n	80175cc <GUI_DEVICE_Link+0x48>
 8017600:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
 8017604:	e7e6      	b.n	80175d4 <GUI_DEVICE_Link+0x50>
 8017606:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 801760a:	4618      	mov	r0, r3
 801760c:	e7c1      	b.n	8017592 <GUI_DEVICE_Link+0xe>
 801760e:	bf00      	nop
 8017610:	2002bfee 	.word	0x2002bfee
 8017614:	2002c040 	.word	0x2002c040

08017618 <GUI_DEVICE_CreateAndLink>:
 8017618:	2b01      	cmp	r3, #1
 801761a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801761e:	461e      	mov	r6, r3
 8017620:	4607      	mov	r7, r0
 8017622:	460c      	mov	r4, r1
 8017624:	4690      	mov	r8, r2
 8017626:	dc32      	bgt.n	801768e <GUI_DEVICE_CreateAndLink+0x76>
 8017628:	201c      	movs	r0, #28
 801762a:	f001 fc61 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 801762e:	4605      	mov	r5, r0
 8017630:	2800      	cmp	r0, #0
 8017632:	d02c      	beq.n	801768e <GUI_DEVICE_CreateAndLink+0x76>
 8017634:	2c00      	cmp	r4, #0
 8017636:	d030      	beq.n	801769a <GUI_DEVICE_CreateAndLink+0x82>
 8017638:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80176f8 <GUI_DEVICE_CreateAndLink+0xe0>
 801763c:	6104      	str	r4, [r0, #16]
 801763e:	2300      	movs	r3, #0
 8017640:	4a2c      	ldr	r2, [pc, #176]	; (80176f4 <GUI_DEVICE_CreateAndLink+0xdc>)
 8017642:	602b      	str	r3, [r5, #0]
 8017644:	7811      	ldrb	r1, [r2, #0]
 8017646:	606b      	str	r3, [r5, #4]
 8017648:	428e      	cmp	r6, r1
 801764a:	f85c 1026 	ldr.w	r1, [ip, r6, lsl #2]
 801764e:	60ab      	str	r3, [r5, #8]
 8017650:	bfa4      	itt	ge
 8017652:	1c73      	addge	r3, r6, #1
 8017654:	7013      	strbge	r3, [r2, #0]
 8017656:	61ae      	str	r6, [r5, #24]
 8017658:	f8a5 8014 	strh.w	r8, [r5, #20]
 801765c:	60ef      	str	r7, [r5, #12]
 801765e:	4b26      	ldr	r3, [pc, #152]	; (80176f8 <GUI_DEVICE_CreateAndLink+0xe0>)
 8017660:	b909      	cbnz	r1, 8017666 <GUI_DEVICE_CreateAndLink+0x4e>
 8017662:	e043      	b.n	80176ec <GUI_DEVICE_CreateAndLink+0xd4>
 8017664:	4621      	mov	r1, r4
 8017666:	684c      	ldr	r4, [r1, #4]
 8017668:	2c00      	cmp	r4, #0
 801766a:	d1fb      	bne.n	8017664 <GUI_DEVICE_CreateAndLink+0x4c>
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	68c8      	ldr	r0, [r1, #12]
 8017670:	6800      	ldr	r0, [r0, #0]
 8017672:	4298      	cmp	r0, r3
 8017674:	dd1e      	ble.n	80176b4 <GUI_DEVICE_CreateAndLink+0x9c>
 8017676:	6809      	ldr	r1, [r1, #0]
 8017678:	2900      	cmp	r1, #0
 801767a:	d1f8      	bne.n	801766e <GUI_DEVICE_CreateAndLink+0x56>
 801767c:	b953      	cbnz	r3, 8017694 <GUI_DEVICE_CreateAndLink+0x7c>
 801767e:	4b1f      	ldr	r3, [pc, #124]	; (80176fc <GUI_DEVICE_CreateAndLink+0xe4>)
 8017680:	3616      	adds	r6, #22
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	4628      	mov	r0, r5
 8017686:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 801768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801768e:	2000      	movs	r0, #0
 8017690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017694:	4628      	mov	r0, r5
 8017696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801769a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80176f8 <GUI_DEVICE_CreateAndLink+0xe0>
 801769e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80176a2:	b90a      	cbnz	r2, 80176a8 <GUI_DEVICE_CreateAndLink+0x90>
 80176a4:	e7cb      	b.n	801763e <GUI_DEVICE_CreateAndLink+0x26>
 80176a6:	461a      	mov	r2, r3
 80176a8:	6813      	ldr	r3, [r2, #0]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d1fb      	bne.n	80176a6 <GUI_DEVICE_CreateAndLink+0x8e>
 80176ae:	6913      	ldr	r3, [r2, #16]
 80176b0:	612b      	str	r3, [r5, #16]
 80176b2:	e7c4      	b.n	801763e <GUI_DEVICE_CreateAndLink+0x26>
 80176b4:	d00a      	beq.n	80176cc <GUI_DEVICE_CreateAndLink+0xb4>
 80176b6:	684a      	ldr	r2, [r1, #4]
 80176b8:	b1aa      	cbz	r2, 80176e6 <GUI_DEVICE_CreateAndLink+0xce>
 80176ba:	6015      	str	r5, [r2, #0]
 80176bc:	606a      	str	r2, [r5, #4]
 80176be:	428d      	cmp	r5, r1
 80176c0:	bf14      	ite	ne
 80176c2:	460a      	movne	r2, r1
 80176c4:	2200      	moveq	r2, #0
 80176c6:	604d      	str	r5, [r1, #4]
 80176c8:	602a      	str	r2, [r5, #0]
 80176ca:	e7d7      	b.n	801767c <GUI_DEVICE_CreateAndLink+0x64>
 80176cc:	f1b8 0f01 	cmp.w	r8, #1
 80176d0:	d1f1      	bne.n	80176b6 <GUI_DEVICE_CreateAndLink+0x9e>
 80176d2:	e004      	b.n	80176de <GUI_DEVICE_CreateAndLink+0xc6>
 80176d4:	68d1      	ldr	r1, [r2, #12]
 80176d6:	6809      	ldr	r1, [r1, #0]
 80176d8:	4281      	cmp	r1, r0
 80176da:	4611      	mov	r1, r2
 80176dc:	dbeb      	blt.n	80176b6 <GUI_DEVICE_CreateAndLink+0x9e>
 80176de:	680a      	ldr	r2, [r1, #0]
 80176e0:	2a00      	cmp	r2, #0
 80176e2:	d1f7      	bne.n	80176d4 <GUI_DEVICE_CreateAndLink+0xbc>
 80176e4:	e7e7      	b.n	80176b6 <GUI_DEVICE_CreateAndLink+0x9e>
 80176e6:	f84c 5026 	str.w	r5, [ip, r6, lsl #2]
 80176ea:	e7e8      	b.n	80176be <GUI_DEVICE_CreateAndLink+0xa6>
 80176ec:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	e7c3      	b.n	801767c <GUI_DEVICE_CreateAndLink+0x64>
 80176f4:	2002bfee 	.word	0x2002bfee
 80176f8:	2002c040 	.word	0x2002c040
 80176fc:	2000026c 	.word	0x2000026c

08017700 <GUI_DEVICE_UnlinkTaskDevices>:
 8017700:	2000      	movs	r0, #0
 8017702:	4770      	bx	lr

08017704 <GUI_DEVICE_LinkDevices>:
 8017704:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8017708:	2800      	cmp	r0, #0
 801770a:	d037      	beq.n	801777c <GUI_DEVICE_LinkDevices+0x78>
 801770c:	6984      	ldr	r4, [r0, #24]
 801770e:	4f27      	ldr	r7, [pc, #156]	; (80177ac <GUI_DEVICE_LinkDevices+0xa8>)
 8017710:	4e27      	ldr	r6, [pc, #156]	; (80177b0 <GUI_DEVICE_LinkDevices+0xac>)
 8017712:	783d      	ldrb	r5, [r7, #0]
 8017714:	6801      	ldr	r1, [r0, #0]
 8017716:	2c01      	cmp	r4, #1
 8017718:	46b4      	mov	ip, r6
 801771a:	dd06      	ble.n	801772a <GUI_DEVICE_LinkDevices+0x26>
 801771c:	2900      	cmp	r1, #0
 801771e:	d02c      	beq.n	801777a <GUI_DEVICE_LinkDevices+0x76>
 8017720:	4608      	mov	r0, r1
 8017722:	6984      	ldr	r4, [r0, #24]
 8017724:	6801      	ldr	r1, [r0, #0]
 8017726:	2c01      	cmp	r4, #1
 8017728:	dcf8      	bgt.n	801771c <GUI_DEVICE_LinkDevices+0x18>
 801772a:	42ac      	cmp	r4, r5
 801772c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8017730:	bfa4      	itt	ge
 8017732:	1c65      	addge	r5, r4, #1
 8017734:	b2ed      	uxtbge	r5, r5
 8017736:	b90b      	cbnz	r3, 801773c <GUI_DEVICE_LinkDevices+0x38>
 8017738:	e035      	b.n	80177a6 <GUI_DEVICE_LinkDevices+0xa2>
 801773a:	4613      	mov	r3, r2
 801773c:	685a      	ldr	r2, [r3, #4]
 801773e:	2a00      	cmp	r2, #0
 8017740:	d1fb      	bne.n	801773a <GUI_DEVICE_LinkDevices+0x36>
 8017742:	68c2      	ldr	r2, [r0, #12]
 8017744:	f8d2 8000 	ldr.w	r8, [r2]
 8017748:	68da      	ldr	r2, [r3, #12]
 801774a:	6812      	ldr	r2, [r2, #0]
 801774c:	4542      	cmp	r2, r8
 801774e:	dd06      	ble.n	801775e <GUI_DEVICE_LinkDevices+0x5a>
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d0e2      	beq.n	801771c <GUI_DEVICE_LinkDevices+0x18>
 8017756:	68da      	ldr	r2, [r3, #12]
 8017758:	6812      	ldr	r2, [r2, #0]
 801775a:	4542      	cmp	r2, r8
 801775c:	dcf8      	bgt.n	8017750 <GUI_DEVICE_LinkDevices+0x4c>
 801775e:	4590      	cmp	r8, r2
 8017760:	d00f      	beq.n	8017782 <GUI_DEVICE_LinkDevices+0x7e>
 8017762:	685a      	ldr	r2, [r3, #4]
 8017764:	b19a      	cbz	r2, 801778e <GUI_DEVICE_LinkDevices+0x8a>
 8017766:	6010      	str	r0, [r2, #0]
 8017768:	6042      	str	r2, [r0, #4]
 801776a:	4298      	cmp	r0, r3
 801776c:	bf14      	ite	ne
 801776e:	461a      	movne	r2, r3
 8017770:	2200      	moveq	r2, #0
 8017772:	6058      	str	r0, [r3, #4]
 8017774:	6002      	str	r2, [r0, #0]
 8017776:	2900      	cmp	r1, #0
 8017778:	d1d2      	bne.n	8017720 <GUI_DEVICE_LinkDevices+0x1c>
 801777a:	703d      	strb	r5, [r7, #0]
 801777c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8017780:	4770      	bx	lr
 8017782:	8a82      	ldrh	r2, [r0, #20]
 8017784:	2a01      	cmp	r2, #1
 8017786:	d00a      	beq.n	801779e <GUI_DEVICE_LinkDevices+0x9a>
 8017788:	685a      	ldr	r2, [r3, #4]
 801778a:	2a00      	cmp	r2, #0
 801778c:	d1eb      	bne.n	8017766 <GUI_DEVICE_LinkDevices+0x62>
 801778e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8017792:	e7ea      	b.n	801776a <GUI_DEVICE_LinkDevices+0x66>
 8017794:	68d3      	ldr	r3, [r2, #12]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	4543      	cmp	r3, r8
 801779a:	4613      	mov	r3, r2
 801779c:	dbe1      	blt.n	8017762 <GUI_DEVICE_LinkDevices+0x5e>
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	2a00      	cmp	r2, #0
 80177a2:	d1f7      	bne.n	8017794 <GUI_DEVICE_LinkDevices+0x90>
 80177a4:	e7dd      	b.n	8017762 <GUI_DEVICE_LinkDevices+0x5e>
 80177a6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80177aa:	e7b7      	b.n	801771c <GUI_DEVICE_LinkDevices+0x18>
 80177ac:	2002bfee 	.word	0x2002bfee
 80177b0:	2002c040 	.word	0x2002c040

080177b4 <_OnExit>:
 80177b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177b6:	4e0b      	ldr	r6, [pc, #44]	; (80177e4 <_OnExit+0x30>)
 80177b8:	4d0b      	ldr	r5, [pc, #44]	; (80177e8 <_OnExit+0x34>)
 80177ba:	4f0c      	ldr	r7, [pc, #48]	; (80177ec <_OnExit+0x38>)
 80177bc:	6833      	ldr	r3, [r6, #0]
 80177be:	2400      	movs	r4, #0
 80177c0:	4621      	mov	r1, r4
 80177c2:	2270      	movs	r2, #112	; 0x70
 80177c4:	4628      	mov	r0, r5
 80177c6:	603c      	str	r4, [r7, #0]
 80177c8:	4798      	blx	r3
 80177ca:	6833      	ldr	r3, [r6, #0]
 80177cc:	4808      	ldr	r0, [pc, #32]	; (80177f0 <_OnExit+0x3c>)
 80177ce:	4621      	mov	r1, r4
 80177d0:	2208      	movs	r2, #8
 80177d2:	4798      	blx	r3
 80177d4:	4a07      	ldr	r2, [pc, #28]	; (80177f4 <_OnExit+0x40>)
 80177d6:	4908      	ldr	r1, [pc, #32]	; (80177f8 <_OnExit+0x44>)
 80177d8:	4b08      	ldr	r3, [pc, #32]	; (80177fc <_OnExit+0x48>)
 80177da:	7014      	strb	r4, [r2, #0]
 80177dc:	600d      	str	r5, [r1, #0]
 80177de:	601c      	str	r4, [r3, #0]
 80177e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e2:	bf00      	nop
 80177e4:	20000240 	.word	0x20000240
 80177e8:	2002af9c 	.word	0x2002af9c
 80177ec:	2002b00c 	.word	0x2002b00c
 80177f0:	2002c040 	.word	0x2002c040
 80177f4:	2002c028 	.word	0x2002c028
 80177f8:	2000026c 	.word	0x2000026c
 80177fc:	2002c000 	.word	0x2002c000

08017800 <GUI_ClearRect>:
 8017800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017804:	b082      	sub	sp, #8
 8017806:	469a      	mov	sl, r3
 8017808:	4607      	mov	r7, r0
 801780a:	460d      	mov	r5, r1
 801780c:	4691      	mov	r9, r2
 801780e:	f7ff f92f 	bl	8016a70 <GUI_Lock>
 8017812:	2004      	movs	r0, #4
 8017814:	f7fd fc6c 	bl	80150f0 <LCD_SetDrawMode>
 8017818:	4b13      	ldr	r3, [pc, #76]	; (8017868 <GUI_ClearRect+0x68>)
 801781a:	681c      	ldr	r4, [r3, #0]
 801781c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 801781e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8017820:	4437      	add	r7, r6
 8017822:	4425      	add	r5, r4
 8017824:	4680      	mov	r8, r0
 8017826:	444e      	add	r6, r9
 8017828:	4454      	add	r4, sl
 801782a:	4668      	mov	r0, sp
 801782c:	f8ad 7000 	strh.w	r7, [sp]
 8017830:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017834:	f8ad 5002 	strh.w	r5, [sp, #2]
 8017838:	f8ad 4006 	strh.w	r4, [sp, #6]
 801783c:	f7fa fbf8 	bl	8012030 <WM__InitIVRSearch>
 8017840:	b148      	cbz	r0, 8017856 <GUI_ClearRect+0x56>
 8017842:	4638      	mov	r0, r7
 8017844:	4629      	mov	r1, r5
 8017846:	4632      	mov	r2, r6
 8017848:	4623      	mov	r3, r4
 801784a:	f7fd fcd9 	bl	8015200 <LCD_FillRect>
 801784e:	f7fa fac9 	bl	8011de4 <WM__GetNextIVR>
 8017852:	2800      	cmp	r0, #0
 8017854:	d1f5      	bne.n	8017842 <GUI_ClearRect+0x42>
 8017856:	4640      	mov	r0, r8
 8017858:	f7fd fc4a 	bl	80150f0 <LCD_SetDrawMode>
 801785c:	f7ff f8fe 	bl	8016a5c <GUI_Unlock>
 8017860:	b002      	add	sp, #8
 8017862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017866:	bf00      	nop
 8017868:	2000026c 	.word	0x2000026c

0801786c <GUI_ClearRectEx>:
 801786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017870:	b082      	sub	sp, #8
 8017872:	f9b0 7000 	ldrsh.w	r7, [r0]
 8017876:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801787a:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801787e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8017882:	f7ff f8f5 	bl	8016a70 <GUI_Lock>
 8017886:	2004      	movs	r0, #4
 8017888:	f7fd fc32 	bl	80150f0 <LCD_SetDrawMode>
 801788c:	4b13      	ldr	r3, [pc, #76]	; (80178dc <GUI_ClearRectEx+0x70>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017894:	4680      	mov	r8, r0
 8017896:	4417      	add	r7, r2
 8017898:	4416      	add	r6, r2
 801789a:	441d      	add	r5, r3
 801789c:	441c      	add	r4, r3
 801789e:	4668      	mov	r0, sp
 80178a0:	f8ad 7000 	strh.w	r7, [sp]
 80178a4:	f8ad 6004 	strh.w	r6, [sp, #4]
 80178a8:	f8ad 5002 	strh.w	r5, [sp, #2]
 80178ac:	f8ad 4006 	strh.w	r4, [sp, #6]
 80178b0:	f7fa fbbe 	bl	8012030 <WM__InitIVRSearch>
 80178b4:	b148      	cbz	r0, 80178ca <GUI_ClearRectEx+0x5e>
 80178b6:	4638      	mov	r0, r7
 80178b8:	4629      	mov	r1, r5
 80178ba:	4632      	mov	r2, r6
 80178bc:	4623      	mov	r3, r4
 80178be:	f7fd fc9f 	bl	8015200 <LCD_FillRect>
 80178c2:	f7fa fa8f 	bl	8011de4 <WM__GetNextIVR>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d1f5      	bne.n	80178b6 <GUI_ClearRectEx+0x4a>
 80178ca:	4640      	mov	r0, r8
 80178cc:	f7fd fc10 	bl	80150f0 <LCD_SetDrawMode>
 80178d0:	f7ff f8c4 	bl	8016a5c <GUI_Unlock>
 80178d4:	b002      	add	sp, #8
 80178d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178da:	bf00      	nop
 80178dc:	2000026c 	.word	0x2000026c

080178e0 <GUI_Clear>:
 80178e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e4:	2000      	movs	r0, #0
 80178e6:	b082      	sub	sp, #8
 80178e8:	4601      	mov	r1, r0
 80178ea:	f000 fb01 	bl	8017ef0 <GUI_GotoXY>
 80178ee:	f7ff f8bf 	bl	8016a70 <GUI_Lock>
 80178f2:	2004      	movs	r0, #4
 80178f4:	f7fd fbfc 	bl	80150f0 <LCD_SetDrawMode>
 80178f8:	4b17      	ldr	r3, [pc, #92]	; (8017958 <GUI_Clear+0x78>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80178fe:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8017900:	f5a6 577f 	sub.w	r7, r6, #16320	; 0x3fc0
 8017904:	f5a4 557f 	sub.w	r5, r4, #16320	; 0x3fc0
 8017908:	f506 567f 	add.w	r6, r6, #16320	; 0x3fc0
 801790c:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 8017910:	4680      	mov	r8, r0
 8017912:	3f3f      	subs	r7, #63	; 0x3f
 8017914:	363f      	adds	r6, #63	; 0x3f
 8017916:	3d3f      	subs	r5, #63	; 0x3f
 8017918:	343f      	adds	r4, #63	; 0x3f
 801791a:	4668      	mov	r0, sp
 801791c:	f8ad 7000 	strh.w	r7, [sp]
 8017920:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017924:	f8ad 5002 	strh.w	r5, [sp, #2]
 8017928:	f8ad 4006 	strh.w	r4, [sp, #6]
 801792c:	f7fa fb80 	bl	8012030 <WM__InitIVRSearch>
 8017930:	b148      	cbz	r0, 8017946 <GUI_Clear+0x66>
 8017932:	4638      	mov	r0, r7
 8017934:	4629      	mov	r1, r5
 8017936:	4632      	mov	r2, r6
 8017938:	4623      	mov	r3, r4
 801793a:	f7fd fc61 	bl	8015200 <LCD_FillRect>
 801793e:	f7fa fa51 	bl	8011de4 <WM__GetNextIVR>
 8017942:	2800      	cmp	r0, #0
 8017944:	d1f5      	bne.n	8017932 <GUI_Clear+0x52>
 8017946:	4640      	mov	r0, r8
 8017948:	f7fd fbd2 	bl	80150f0 <LCD_SetDrawMode>
 801794c:	f7ff f886 	bl	8016a5c <GUI_Unlock>
 8017950:	b002      	add	sp, #8
 8017952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017956:	bf00      	nop
 8017958:	2000026c 	.word	0x2000026c

0801795c <GUI__RegisterExit>:
 801795c:	b480      	push	{r7}
 801795e:	b083      	sub	sp, #12
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	4b05      	ldr	r3, [pc, #20]	; (801797c <GUI__RegisterExit+0x20>)
 8017966:	681a      	ldr	r2, [r3, #0]
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	605a      	str	r2, [r3, #4]
 801796c:	4b03      	ldr	r3, [pc, #12]	; (801797c <GUI__RegisterExit+0x20>)
 801796e:	687a      	ldr	r2, [r7, #4]
 8017970:	601a      	str	r2, [r3, #0]
 8017972:	370c      	adds	r7, #12
 8017974:	46bd      	mov	sp, r7
 8017976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797a:	4770      	bx	lr
 801797c:	2002af90 	.word	0x2002af90

08017980 <GUI_Init>:
 8017980:	b590      	push	{r4, r7, lr}
 8017982:	b083      	sub	sp, #12
 8017984:	af00      	add	r7, sp, #0
 8017986:	4b71      	ldr	r3, [pc, #452]	; (8017b4c <GUI_Init+0x1cc>)
 8017988:	4a70      	ldr	r2, [pc, #448]	; (8017b4c <GUI_Init+0x1cc>)
 801798a:	6812      	ldr	r2, [r2, #0]
 801798c:	f022 0201 	bic.w	r2, r2, #1
 8017990:	601a      	str	r2, [r3, #0]
 8017992:	4b6f      	ldr	r3, [pc, #444]	; (8017b50 <GUI_Init+0x1d0>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801799a:	f240 4349 	movw	r3, #1097	; 0x449
 801799e:	429a      	cmp	r2, r3
 80179a0:	bf14      	ite	ne
 80179a2:	2300      	movne	r3, #0
 80179a4:	2301      	moveq	r3, #1
 80179a6:	b2da      	uxtb	r2, r3
 80179a8:	4b69      	ldr	r3, [pc, #420]	; (8017b50 <GUI_Init+0x1d0>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80179b0:	f240 4351 	movw	r3, #1105	; 0x451
 80179b4:	4299      	cmp	r1, r3
 80179b6:	bf14      	ite	ne
 80179b8:	2300      	movne	r3, #0
 80179ba:	2301      	moveq	r3, #1
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	4313      	orrs	r3, r2
 80179c0:	b2db      	uxtb	r3, r3
 80179c2:	461a      	mov	r2, r3
 80179c4:	4b62      	ldr	r3, [pc, #392]	; (8017b50 <GUI_Init+0x1d0>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80179cc:	f240 4352 	movw	r3, #1106	; 0x452
 80179d0:	4299      	cmp	r1, r3
 80179d2:	bf14      	ite	ne
 80179d4:	2300      	movne	r3, #0
 80179d6:	2301      	moveq	r3, #1
 80179d8:	b2db      	uxtb	r3, r3
 80179da:	4313      	orrs	r3, r2
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d010      	beq.n	8017a02 <GUI_Init+0x82>
 80179e0:	4b5c      	ldr	r3, [pc, #368]	; (8017b54 <GUI_Init+0x1d4>)
 80179e2:	2201      	movs	r2, #1
 80179e4:	601a      	str	r2, [r3, #0]
 80179e6:	bf00      	nop
 80179e8:	4b5a      	ldr	r3, [pc, #360]	; (8017b54 <GUI_Init+0x1d4>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d1fb      	bne.n	80179e8 <GUI_Init+0x68>
 80179f0:	4b59      	ldr	r3, [pc, #356]	; (8017b58 <GUI_Init+0x1d8>)
 80179f2:	4a5a      	ldr	r2, [pc, #360]	; (8017b5c <GUI_Init+0x1dc>)
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	4b58      	ldr	r3, [pc, #352]	; (8017b58 <GUI_Init+0x1d8>)
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	4b59      	ldr	r3, [pc, #356]	; (8017b60 <GUI_Init+0x1e0>)
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d018      	beq.n	8017a32 <GUI_Init+0xb2>
 8017a00:	e7fe      	b.n	8017a00 <GUI_Init+0x80>
 8017a02:	4b58      	ldr	r3, [pc, #352]	; (8017b64 <GUI_Init+0x1e4>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017a0a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017a0e:	d110      	bne.n	8017a32 <GUI_Init+0xb2>
 8017a10:	4b55      	ldr	r3, [pc, #340]	; (8017b68 <GUI_Init+0x1e8>)
 8017a12:	2201      	movs	r2, #1
 8017a14:	601a      	str	r2, [r3, #0]
 8017a16:	bf00      	nop
 8017a18:	4b53      	ldr	r3, [pc, #332]	; (8017b68 <GUI_Init+0x1e8>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d1fb      	bne.n	8017a18 <GUI_Init+0x98>
 8017a20:	4b52      	ldr	r3, [pc, #328]	; (8017b6c <GUI_Init+0x1ec>)
 8017a22:	4a4e      	ldr	r2, [pc, #312]	; (8017b5c <GUI_Init+0x1dc>)
 8017a24:	601a      	str	r2, [r3, #0]
 8017a26:	4b51      	ldr	r3, [pc, #324]	; (8017b6c <GUI_Init+0x1ec>)
 8017a28:	681a      	ldr	r2, [r3, #0]
 8017a2a:	4b4d      	ldr	r3, [pc, #308]	; (8017b60 <GUI_Init+0x1e0>)
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d000      	beq.n	8017a32 <GUI_Init+0xb2>
 8017a30:	e7fe      	b.n	8017a30 <GUI_Init+0xb0>
 8017a32:	4b4f      	ldr	r3, [pc, #316]	; (8017b70 <GUI_Init+0x1f0>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d10e      	bne.n	8017a58 <GUI_Init+0xd8>
 8017a3a:	4b4d      	ldr	r3, [pc, #308]	; (8017b70 <GUI_Init+0x1f0>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	601a      	str	r2, [r3, #0]
 8017a40:	f7ef fb5c 	bl	80070fc <GUI_X_Config>
 8017a44:	f7ff f878 	bl	8016b38 <GUITASK_Init>
 8017a48:	f7f0 f962 	bl	8007d10 <LCD_X_Config>
 8017a4c:	4b49      	ldr	r3, [pc, #292]	; (8017b74 <GUI_Init+0x1f4>)
 8017a4e:	4a4a      	ldr	r2, [pc, #296]	; (8017b78 <GUI_Init+0x1f8>)
 8017a50:	601a      	str	r2, [r3, #0]
 8017a52:	4848      	ldr	r0, [pc, #288]	; (8017b74 <GUI_Init+0x1f4>)
 8017a54:	f7ff ff82 	bl	801795c <GUI__RegisterExit>
 8017a58:	4b48      	ldr	r3, [pc, #288]	; (8017b7c <GUI_Init+0x1fc>)
 8017a5a:	222e      	movs	r2, #46	; 0x2e
 8017a5c:	701a      	strb	r2, [r3, #0]
 8017a5e:	f7ef fb1d 	bl	800709c <GUI_X_Init>
 8017a62:	4b47      	ldr	r3, [pc, #284]	; (8017b80 <GUI_Init+0x200>)
 8017a64:	603b      	str	r3, [r7, #0]
 8017a66:	4b47      	ldr	r3, [pc, #284]	; (8017b84 <GUI_Init+0x204>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	461a      	mov	r2, r3
 8017a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8017a6e:	1d19      	adds	r1, r3, #4
 8017a70:	63d9      	str	r1, [r3, #60]	; 0x3c
 8017a72:	641a      	str	r2, [r3, #64]	; 0x40
 8017a74:	f103 0108 	add.w	r1, r3, #8
 8017a78:	683a      	ldr	r2, [r7, #0]
 8017a7a:	6151      	str	r1, [r2, #20]
 8017a7c:	7c5b      	ldrb	r3, [r3, #17]
 8017a7e:	461a      	mov	r2, r3
 8017a80:	4b41      	ldr	r3, [pc, #260]	; (8017b88 <GUI_Init+0x208>)
 8017a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a86:	68da      	ldr	r2, [r3, #12]
 8017a88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8017a8a:	6839      	ldr	r1, [r7, #0]
 8017a8c:	3108      	adds	r1, #8
 8017a8e:	4618      	mov	r0, r3
 8017a90:	4790      	blx	r2
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	4a3d      	ldr	r2, [pc, #244]	; (8017b8c <GUI_Init+0x20c>)
 8017a96:	665a      	str	r2, [r3, #100]	; 0x64
 8017a98:	4b3d      	ldr	r3, [pc, #244]	; (8017b90 <GUI_Init+0x210>)
 8017a9a:	681a      	ldr	r2, [r3, #0]
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	61da      	str	r2, [r3, #28]
 8017aa0:	4b38      	ldr	r3, [pc, #224]	; (8017b84 <GUI_Init+0x204>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	f103 0208 	add.w	r2, r3, #8
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	615a      	str	r2, [r3, #20]
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	2201      	movs	r2, #1
 8017ab0:	761a      	strb	r2, [r3, #24]
 8017ab2:	f7f7 fd23 	bl	800f4fc <WM_GetDesktopWindow>
 8017ab6:	4602      	mov	r2, r0
 8017ab8:	683b      	ldr	r3, [r7, #0]
 8017aba:	649a      	str	r2, [r3, #72]	; 0x48
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	2203      	movs	r2, #3
 8017ac0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8017aca:	631a      	str	r2, [r3, #48]	; 0x30
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8017ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8017ad4:	4b2f      	ldr	r3, [pc, #188]	; (8017b94 <GUI_Init+0x214>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7fd ff39 	bl	8015950 <LCD_SetBkColor>
 8017ade:	4b2e      	ldr	r3, [pc, #184]	; (8017b98 <GUI_Init+0x218>)
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7fd ff3c 	bl	8015960 <LCD_SetColor>
 8017ae8:	4b2c      	ldr	r3, [pc, #176]	; (8017b9c <GUI_Init+0x21c>)
 8017aea:	4a2d      	ldr	r2, [pc, #180]	; (8017ba0 <GUI_Init+0x220>)
 8017aec:	601a      	str	r2, [r3, #0]
 8017aee:	f7fd fe71 	bl	80157d4 <emWin_LCD_Init>
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	f7fd fa72 	bl	8014fdc <LCD_GetXSizeDisplay>
 8017af8:	4603      	mov	r3, r0
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d004      	beq.n	8017b08 <GUI_Init+0x188>
 8017afe:	f7fd fa73 	bl	8014fe8 <LCD_GetYSizeDisplay>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d109      	bne.n	8017b1c <GUI_Init+0x19c>
 8017b08:	f7fd fa04 	bl	8014f14 <LCD_GetXSizeMax>
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	f7fd fa1f 	bl	8014f50 <LCD_GetYSizeMax>
 8017b12:	4603      	mov	r3, r0
 8017b14:	4620      	mov	r0, r4
 8017b16:	4619      	mov	r1, r3
 8017b18:	f7fd fa56 	bl	8014fc8 <LCD_SetDisplaySize>
 8017b1c:	2000      	movs	r0, #0
 8017b1e:	2100      	movs	r1, #0
 8017b20:	f000 fab4 	bl	801808c <GUI_SetOrg>
 8017b24:	f7fa fd9c 	bl	8012660 <WM_Init>
 8017b28:	f7ff f846 	bl	8016bb8 <GUITASK_CopyContext>
 8017b2c:	4b1d      	ldr	r3, [pc, #116]	; (8017ba4 <GUI_Init+0x224>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d002      	beq.n	8017b3a <GUI_Init+0x1ba>
 8017b34:	4b1b      	ldr	r3, [pc, #108]	; (8017ba4 <GUI_Init+0x224>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	4798      	blx	r3
 8017b3a:	4b1b      	ldr	r3, [pc, #108]	; (8017ba8 <GUI_Init+0x228>)
 8017b3c:	2201      	movs	r2, #1
 8017b3e:	701a      	strb	r2, [r3, #0]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	4618      	mov	r0, r3
 8017b44:	370c      	adds	r7, #12
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd90      	pop	{r4, r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	e0002000 	.word	0xe0002000
 8017b50:	e0042000 	.word	0xe0042000
 8017b54:	40023008 	.word	0x40023008
 8017b58:	40023000 	.word	0x40023000
 8017b5c:	f407a5c2 	.word	0xf407a5c2
 8017b60:	b5e8b5cd 	.word	0xb5e8b5cd
 8017b64:	5c001000 	.word	0x5c001000
 8017b68:	58024c08 	.word	0x58024c08
 8017b6c:	58024c00 	.word	0x58024c00
 8017b70:	2002b00c 	.word	0x2002b00c
 8017b74:	2002af94 	.word	0x2002af94
 8017b78:	080177b5 	.word	0x080177b5
 8017b7c:	2002bff4 	.word	0x2002bff4
 8017b80:	2002af9c 	.word	0x2002af9c
 8017b84:	2000026c 	.word	0x2000026c
 8017b88:	2002c040 	.word	0x2002c040
 8017b8c:	080215f4 	.word	0x080215f4
 8017b90:	20000278 	.word	0x20000278
 8017b94:	2000027c 	.word	0x2000027c
 8017b98:	20000274 	.word	0x20000274
 8017b9c:	2002c038 	.word	0x2002c038
 8017ba0:	08022474 	.word	0x08022474
 8017ba4:	2002c018 	.word	0x2002c018
 8017ba8:	2002c020 	.word	0x2002c020

08017bac <GUI__InvertRectColors>:
 8017bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb0:	4c14      	ldr	r4, [pc, #80]	; (8017c04 <GUI__InvertRectColors+0x58>)
 8017bb2:	6825      	ldr	r5, [r4, #0]
 8017bb4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8017bb6:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 8017bb8:	eb04 0803 	add.w	r8, r4, r3
 8017bbc:	1865      	adds	r5, r4, r1
 8017bbe:	4545      	cmp	r5, r8
 8017bc0:	eb06 0700 	add.w	r7, r6, r0
 8017bc4:	4416      	add	r6, r2
 8017bc6:	dc1b      	bgt.n	8017c00 <GUI__InvertRectColors+0x54>
 8017bc8:	42b7      	cmp	r7, r6
 8017bca:	dc14      	bgt.n	8017bf6 <GUI__InvertRectColors+0x4a>
 8017bcc:	463c      	mov	r4, r7
 8017bce:	4629      	mov	r1, r5
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f004 fc95 	bl	801c500 <LCD_GetPixelIndex>
 8017bd6:	f7fd fe93 	bl	8015900 <LCD_Index2Color>
 8017bda:	f080 10ff 	eor.w	r0, r0, #16711935	; 0xff00ff
 8017bde:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8017be2:	f7fd fe7d 	bl	80158e0 <LCD_Color2Index>
 8017be6:	4629      	mov	r1, r5
 8017be8:	4602      	mov	r2, r0
 8017bea:	4620      	mov	r0, r4
 8017bec:	3401      	adds	r4, #1
 8017bee:	f7fd febf 	bl	8015970 <LCD_SetPixelIndex>
 8017bf2:	42a6      	cmp	r6, r4
 8017bf4:	daeb      	bge.n	8017bce <GUI__InvertRectColors+0x22>
 8017bf6:	3501      	adds	r5, #1
 8017bf8:	45a8      	cmp	r8, r5
 8017bfa:	dae5      	bge.n	8017bc8 <GUI__InvertRectColors+0x1c>
 8017bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c04:	2000026c 	.word	0x2000026c

08017c08 <GUI_AddSign>:
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	b410      	push	{r4}
 8017c0c:	dd07      	ble.n	8017c1e <GUI_AddSign+0x16>
 8017c0e:	680b      	ldr	r3, [r1, #0]
 8017c10:	222b      	movs	r2, #43	; 0x2b
 8017c12:	1c5c      	adds	r4, r3, #1
 8017c14:	600c      	str	r4, [r1, #0]
 8017c16:	701a      	strb	r2, [r3, #0]
 8017c18:	680b      	ldr	r3, [r1, #0]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	701a      	strb	r2, [r3, #0]
 8017c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c22:	4770      	bx	lr

08017c24 <GUI_AddDecShift>:
 8017c24:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8017c28:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8017c2c:	d062      	beq.n	8017cf4 <GUI_AddDecShift+0xd0>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	db6b      	blt.n	8017d0a <GUI_AddDecShift+0xe6>
 8017c32:	2400      	movs	r4, #0
 8017c34:	1b09      	subs	r1, r1, r4
 8017c36:	b2c9      	uxtb	r1, r1
 8017c38:	2400      	movs	r4, #0
 8017c3a:	b10a      	cbz	r2, 8017c40 <GUI_AddDecShift+0x1c>
 8017c3c:	3901      	subs	r1, #1
 8017c3e:	b2c9      	uxtb	r1, r1
 8017c40:	b361      	cbz	r1, 8017c9c <GUI_AddDecShift+0x78>
 8017c42:	4f36      	ldr	r7, [pc, #216]	; (8017d1c <GUI_AddDecShift+0xf8>)
 8017c44:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8017d20 <GUI_AddDecShift+0xfc>
 8017c48:	2c00      	cmp	r4, #0
 8017c4a:	d14e      	bne.n	8017cea <GUI_AddDecShift+0xc6>
 8017c4c:	1e4e      	subs	r6, r1, #1
 8017c4e:	4291      	cmp	r1, r2
 8017c50:	b2f6      	uxtb	r6, r6
 8017c52:	d016      	beq.n	8017c82 <GUI_AddDecShift+0x5e>
 8017c54:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 8017c58:	fb90 f4f5 	sdiv	r4, r0, r5
 8017c5c:	b2e4      	uxtb	r4, r4
 8017c5e:	2c0a      	cmp	r4, #10
 8017c60:	d81c      	bhi.n	8017c9c <GUI_AddDecShift+0x78>
 8017c62:	fb05 0014 	mls	r0, r5, r4, r0
 8017c66:	681d      	ldr	r5, [r3, #0]
 8017c68:	bf1d      	ittte	ne
 8017c6a:	3430      	addne	r4, #48	; 0x30
 8017c6c:	4631      	movne	r1, r6
 8017c6e:	b2e4      	uxtbne	r4, r4
 8017c70:	2431      	moveq	r4, #49	; 0x31
 8017c72:	1c6e      	adds	r6, r5, #1
 8017c74:	601e      	str	r6, [r3, #0]
 8017c76:	702c      	strb	r4, [r5, #0]
 8017c78:	b181      	cbz	r1, 8017c9c <GUI_AddDecShift+0x78>
 8017c7a:	1e4e      	subs	r6, r1, #1
 8017c7c:	4291      	cmp	r1, r2
 8017c7e:	b2f6      	uxtb	r6, r6
 8017c80:	d1e8      	bne.n	8017c54 <GUI_AddDecShift+0x30>
 8017c82:	681c      	ldr	r4, [r3, #0]
 8017c84:	1c65      	adds	r5, r4, #1
 8017c86:	601d      	str	r5, [r3, #0]
 8017c88:	f89c 5000 	ldrb.w	r5, [ip]
 8017c8c:	7025      	strb	r5, [r4, #0]
 8017c8e:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 8017c92:	fb90 f4f5 	sdiv	r4, r0, r5
 8017c96:	b2e4      	uxtb	r4, r4
 8017c98:	2c0a      	cmp	r4, #10
 8017c9a:	d9e2      	bls.n	8017c62 <GUI_AddDecShift+0x3e>
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	701a      	strb	r2, [r3, #0]
 8017ca2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8017ca6:	4770      	bx	lr
 8017ca8:	681c      	ldr	r4, [r3, #0]
 8017caa:	1c66      	adds	r6, r4, #1
 8017cac:	601e      	str	r6, [r3, #0]
 8017cae:	f89c 6000 	ldrb.w	r6, [ip]
 8017cb2:	7026      	strb	r6, [r4, #0]
 8017cb4:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 8017cb8:	fb90 f4f6 	sdiv	r4, r0, r6
 8017cbc:	b2e4      	uxtb	r4, r4
 8017cbe:	2c0a      	cmp	r4, #10
 8017cc0:	d8ec      	bhi.n	8017c9c <GUI_AddDecShift+0x78>
 8017cc2:	f104 0801 	add.w	r8, r4, #1
 8017cc6:	fb06 0014 	mls	r0, r6, r4, r0
 8017cca:	b90d      	cbnz	r5, 8017cd0 <GUI_AddDecShift+0xac>
 8017ccc:	fa5f f488 	uxtb.w	r4, r8
 8017cd0:	2c0a      	cmp	r4, #10
 8017cd2:	bf18      	it	ne
 8017cd4:	4629      	movne	r1, r5
 8017cd6:	681d      	ldr	r5, [r3, #0]
 8017cd8:	bf1a      	itte	ne
 8017cda:	3430      	addne	r4, #48	; 0x30
 8017cdc:	b2e4      	uxtbne	r4, r4
 8017cde:	2431      	moveq	r4, #49	; 0x31
 8017ce0:	1c6e      	adds	r6, r5, #1
 8017ce2:	601e      	str	r6, [r3, #0]
 8017ce4:	702c      	strb	r4, [r5, #0]
 8017ce6:	2900      	cmp	r1, #0
 8017ce8:	d0d8      	beq.n	8017c9c <GUI_AddDecShift+0x78>
 8017cea:	1e4d      	subs	r5, r1, #1
 8017cec:	4291      	cmp	r1, r2
 8017cee:	b2ed      	uxtb	r5, r5
 8017cf0:	d1e0      	bne.n	8017cb4 <GUI_AddDecShift+0x90>
 8017cf2:	e7d9      	b.n	8017ca8 <GUI_AddDecShift+0x84>
 8017cf4:	681c      	ldr	r4, [r3, #0]
 8017cf6:	3901      	subs	r1, #1
 8017cf8:	1c60      	adds	r0, r4, #1
 8017cfa:	252d      	movs	r5, #45	; 0x2d
 8017cfc:	6018      	str	r0, [r3, #0]
 8017cfe:	b2c9      	uxtb	r1, r1
 8017d00:	7025      	strb	r5, [r4, #0]
 8017d02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017d06:	2401      	movs	r4, #1
 8017d08:	e797      	b.n	8017c3a <GUI_AddDecShift+0x16>
 8017d0a:	681d      	ldr	r5, [r3, #0]
 8017d0c:	262d      	movs	r6, #45	; 0x2d
 8017d0e:	1c6c      	adds	r4, r5, #1
 8017d10:	601c      	str	r4, [r3, #0]
 8017d12:	4240      	negs	r0, r0
 8017d14:	2401      	movs	r4, #1
 8017d16:	702e      	strb	r6, [r5, #0]
 8017d18:	e78c      	b.n	8017c34 <GUI_AddDecShift+0x10>
 8017d1a:	bf00      	nop
 8017d1c:	080215fc 	.word	0x080215fc
 8017d20:	2002bff4 	.word	0x2002bff4

08017d24 <GUI_CalcColorDist>:
 8017d24:	b2c2      	uxtb	r2, r0
 8017d26:	b2cb      	uxtb	r3, r1
 8017d28:	1ad3      	subs	r3, r2, r3
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	b29a      	uxth	r2, r3
 8017d2e:	b430      	push	{r4, r5}
 8017d30:	0414      	lsls	r4, r2, #16
 8017d32:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8017d36:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017d3a:	ebc5 0404 	rsb	r4, r5, r4
 8017d3e:	b2a4      	uxth	r4, r4
 8017d40:	bf48      	it	mi
 8017d42:	425a      	negmi	r2, r3
 8017d44:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8017d48:	b2a3      	uxth	r3, r4
 8017d4a:	bf48      	it	mi
 8017d4c:	b292      	uxthmi	r2, r2
 8017d4e:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8017d52:	041d      	lsls	r5, r3, #16
 8017d54:	bf48      	it	mi
 8017d56:	4263      	negmi	r3, r4
 8017d58:	b289      	uxth	r1, r1
 8017d5a:	b288      	uxth	r0, r1
 8017d5c:	fb12 f202 	smulbb	r2, r2, r2
 8017d60:	bf48      	it	mi
 8017d62:	b29b      	uxthmi	r3, r3
 8017d64:	fb13 2303 	smlabb	r3, r3, r3, r2
 8017d68:	0402      	lsls	r2, r0, #16
 8017d6a:	bf44      	itt	mi
 8017d6c:	4248      	negmi	r0, r1
 8017d6e:	b280      	uxthmi	r0, r0
 8017d70:	fb00 3000 	mla	r0, r0, r0, r3
 8017d74:	bc30      	pop	{r4, r5}
 8017d76:	4770      	bx	lr

08017d78 <GUI_GetClientRect>:
 8017d78:	b108      	cbz	r0, 8017d7e <GUI_GetClientRect+0x6>
 8017d7a:	f7f7 bb95 	b.w	800f4a8 <WM_GetClientRect>
 8017d7e:	4770      	bx	lr

08017d80 <GUI_GetBkColor>:
 8017d80:	b510      	push	{r4, lr}
 8017d82:	f7fe fe75 	bl	8016a70 <GUI_Lock>
 8017d86:	f004 fbed 	bl	801c564 <LCD_GetBkColorIndex>
 8017d8a:	f7fd fdb9 	bl	8015900 <LCD_Index2Color>
 8017d8e:	4604      	mov	r4, r0
 8017d90:	f7fe fe64 	bl	8016a5c <GUI_Unlock>
 8017d94:	4620      	mov	r0, r4
 8017d96:	bd10      	pop	{r4, pc}

08017d98 <GUI_GetColor>:
 8017d98:	b510      	push	{r4, lr}
 8017d9a:	f7fe fe69 	bl	8016a70 <GUI_Lock>
 8017d9e:	f004 fbe9 	bl	801c574 <LCD_GetColorIndex>
 8017da2:	f7fd fdad 	bl	8015900 <LCD_Index2Color>
 8017da6:	4604      	mov	r4, r0
 8017da8:	f7fe fe58 	bl	8016a5c <GUI_Unlock>
 8017dac:	4620      	mov	r0, r4
 8017dae:	bd10      	pop	{r4, pc}

08017db0 <GUI_GetDrawMode>:
 8017db0:	b510      	push	{r4, lr}
 8017db2:	f7fe fe5d 	bl	8016a70 <GUI_Lock>
 8017db6:	4b03      	ldr	r3, [pc, #12]	; (8017dc4 <GUI_GetDrawMode+0x14>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	7c1c      	ldrb	r4, [r3, #16]
 8017dbc:	f7fe fe4e 	bl	8016a5c <GUI_Unlock>
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	bd10      	pop	{r4, pc}
 8017dc4:	2000026c 	.word	0x2000026c

08017dc8 <GUI_GetFontSizeY>:
 8017dc8:	b510      	push	{r4, lr}
 8017dca:	f7fe fe51 	bl	8016a70 <GUI_Lock>
 8017dce:	4b05      	ldr	r3, [pc, #20]	; (8017de4 <GUI_GetFontSizeY+0x1c>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	69db      	ldr	r3, [r3, #28]
 8017dd4:	7e1c      	ldrb	r4, [r3, #24]
 8017dd6:	7edb      	ldrb	r3, [r3, #27]
 8017dd8:	fb14 f403 	smulbb	r4, r4, r3
 8017ddc:	f7fe fe3e 	bl	8016a5c <GUI_Unlock>
 8017de0:	4620      	mov	r0, r4
 8017de2:	bd10      	pop	{r4, pc}
 8017de4:	2000026c 	.word	0x2000026c

08017de8 <GUI_GetOrg>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4604      	mov	r4, r0
 8017dec:	460d      	mov	r5, r1
 8017dee:	f7fe fe3f 	bl	8016a70 <GUI_Lock>
 8017df2:	4a06      	ldr	r2, [pc, #24]	; (8017e0c <GUI_GetOrg+0x24>)
 8017df4:	4b06      	ldr	r3, [pc, #24]	; (8017e10 <GUI_GetOrg+0x28>)
 8017df6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017dfe:	6022      	str	r2, [r4, #0]
 8017e00:	602b      	str	r3, [r5, #0]
 8017e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e06:	f7fe be29 	b.w	8016a5c <GUI_Unlock>
 8017e0a:	bf00      	nop
 8017e0c:	2002c014 	.word	0x2002c014
 8017e10:	2002c004 	.word	0x2002c004

08017e14 <GUI_GetYDistOfFont>:
 8017e14:	7e40      	ldrb	r0, [r0, #25]
 8017e16:	4770      	bx	lr

08017e18 <GUI_MergeRect>:
 8017e18:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8017e1c:	b318      	cbz	r0, 8017e66 <GUI_MergeRect+0x4e>
 8017e1e:	b329      	cbz	r1, 8017e6c <GUI_MergeRect+0x54>
 8017e20:	b32a      	cbz	r2, 8017e6e <GUI_MergeRect+0x56>
 8017e22:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017e26:	f9b2 4000 	ldrsh.w	r4, [r2]
 8017e2a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8017e2e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017e32:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8017e36:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017e3a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8017e3e:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8017e42:	45a1      	cmp	r9, r4
 8017e44:	bfb8      	it	lt
 8017e46:	464c      	movlt	r4, r9
 8017e48:	45e0      	cmp	r8, ip
 8017e4a:	bfb4      	ite	lt
 8017e4c:	4641      	movlt	r1, r8
 8017e4e:	4661      	movge	r1, ip
 8017e50:	42b7      	cmp	r7, r6
 8017e52:	bfac      	ite	ge
 8017e54:	463a      	movge	r2, r7
 8017e56:	4632      	movlt	r2, r6
 8017e58:	429d      	cmp	r5, r3
 8017e5a:	bfa8      	it	ge
 8017e5c:	462b      	movge	r3, r5
 8017e5e:	8004      	strh	r4, [r0, #0]
 8017e60:	8041      	strh	r1, [r0, #2]
 8017e62:	8082      	strh	r2, [r0, #4]
 8017e64:	80c3      	strh	r3, [r0, #6]
 8017e66:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8017e6a:	4770      	bx	lr
 8017e6c:	4611      	mov	r1, r2
 8017e6e:	680b      	ldr	r3, [r1, #0]
 8017e70:	684a      	ldr	r2, [r1, #4]
 8017e72:	6042      	str	r2, [r0, #4]
 8017e74:	6003      	str	r3, [r0, #0]
 8017e76:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8017e7a:	4770      	bx	lr

08017e7c <GUI_MoveRect>:
 8017e7c:	b470      	push	{r4, r5, r6}
 8017e7e:	b168      	cbz	r0, 8017e9c <GUI_MoveRect+0x20>
 8017e80:	8804      	ldrh	r4, [r0, #0]
 8017e82:	8886      	ldrh	r6, [r0, #4]
 8017e84:	8843      	ldrh	r3, [r0, #2]
 8017e86:	88c5      	ldrh	r5, [r0, #6]
 8017e88:	b289      	uxth	r1, r1
 8017e8a:	b292      	uxth	r2, r2
 8017e8c:	440c      	add	r4, r1
 8017e8e:	4413      	add	r3, r2
 8017e90:	4431      	add	r1, r6
 8017e92:	442a      	add	r2, r5
 8017e94:	8004      	strh	r4, [r0, #0]
 8017e96:	8081      	strh	r1, [r0, #4]
 8017e98:	8043      	strh	r3, [r0, #2]
 8017e9a:	80c2      	strh	r2, [r0, #6]
 8017e9c:	bc70      	pop	{r4, r5, r6}
 8017e9e:	4770      	bx	lr

08017ea0 <GUI_Exec>:
 8017ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017eec <GUI_Exec+0x4c>
 8017ea8:	4f0e      	ldr	r7, [pc, #56]	; (8017ee4 <GUI_Exec+0x44>)
 8017eaa:	4e0f      	ldr	r6, [pc, #60]	; (8017ee8 <GUI_Exec+0x48>)
 8017eac:	2500      	movs	r5, #0
 8017eae:	f8d8 4000 	ldr.w	r4, [r8]
 8017eb2:	b11c      	cbz	r4, 8017ebc <GUI_Exec+0x1c>
 8017eb4:	47a0      	blx	r4
 8017eb6:	1c04      	adds	r4, r0, #0
 8017eb8:	bf18      	it	ne
 8017eba:	2401      	movne	r4, #1
 8017ebc:	f7fa f9f0 	bl	80122a0 <WM_Exec>
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	bf18      	it	ne
 8017ec6:	2401      	movne	r4, #1
 8017ec8:	b11b      	cbz	r3, 8017ed2 <GUI_Exec+0x32>
 8017eca:	4798      	blx	r3
 8017ecc:	2800      	cmp	r0, #0
 8017ece:	bf18      	it	ne
 8017ed0:	2401      	movne	r4, #1
 8017ed2:	6833      	ldr	r3, [r6, #0]
 8017ed4:	b103      	cbz	r3, 8017ed8 <GUI_Exec+0x38>
 8017ed6:	4798      	blx	r3
 8017ed8:	b10c      	cbz	r4, 8017ede <GUI_Exec+0x3e>
 8017eda:	2501      	movs	r5, #1
 8017edc:	e7e7      	b.n	8017eae <GUI_Exec+0xe>
 8017ede:	4628      	mov	r0, r5
 8017ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee4:	2002c03c 	.word	0x2002c03c
 8017ee8:	2002c034 	.word	0x2002c034
 8017eec:	2002c010 	.word	0x2002c010

08017ef0 <GUI_GotoXY>:
 8017ef0:	b538      	push	{r3, r4, r5, lr}
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	460d      	mov	r5, r1
 8017ef6:	f7fe fdbb 	bl	8016a70 <GUI_Lock>
 8017efa:	4b04      	ldr	r3, [pc, #16]	; (8017f0c <GUI_GotoXY+0x1c>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	845c      	strh	r4, [r3, #34]	; 0x22
 8017f00:	849d      	strh	r5, [r3, #36]	; 0x24
 8017f02:	f7fe fdab 	bl	8016a5c <GUI_Unlock>
 8017f06:	2000      	movs	r0, #0
 8017f08:	bd38      	pop	{r3, r4, r5, pc}
 8017f0a:	bf00      	nop
 8017f0c:	2000026c 	.word	0x2000026c

08017f10 <GUI_RectsIntersect>:
 8017f10:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017f14:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	dc14      	bgt.n	8017f46 <GUI_RectsIntersect+0x36>
 8017f1c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8017f20:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017f24:	429a      	cmp	r2, r3
 8017f26:	dc0e      	bgt.n	8017f46 <GUI_RectsIntersect+0x36>
 8017f28:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017f2c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	dc08      	bgt.n	8017f46 <GUI_RectsIntersect+0x36>
 8017f34:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f38:	f9b1 2000 	ldrsh.w	r2, [r1]
 8017f3c:	429a      	cmp	r2, r3
 8017f3e:	bfcc      	ite	gt
 8017f40:	2000      	movgt	r0, #0
 8017f42:	2001      	movle	r0, #1
 8017f44:	4770      	bx	lr
 8017f46:	2000      	movs	r0, #0
 8017f48:	4770      	bx	lr
 8017f4a:	bf00      	nop

08017f4c <GUI_SaveContext_W>:
 8017f4c:	b508      	push	{r3, lr}
 8017f4e:	4b03      	ldr	r3, [pc, #12]	; (8017f5c <GUI_SaveContext_W+0x10>)
 8017f50:	2270      	movs	r2, #112	; 0x70
 8017f52:	6819      	ldr	r1, [r3, #0]
 8017f54:	f006 f852 	bl	801dffc <memcpy>
 8017f58:	bd08      	pop	{r3, pc}
 8017f5a:	bf00      	nop
 8017f5c:	2000026c 	.word	0x2000026c

08017f60 <GUI_RestoreContext>:
 8017f60:	b508      	push	{r3, lr}
 8017f62:	4b03      	ldr	r3, [pc, #12]	; (8017f70 <GUI_RestoreContext+0x10>)
 8017f64:	4601      	mov	r1, r0
 8017f66:	2270      	movs	r2, #112	; 0x70
 8017f68:	6818      	ldr	r0, [r3, #0]
 8017f6a:	f006 f847 	bl	801dffc <memcpy>
 8017f6e:	bd08      	pop	{r3, pc}
 8017f70:	2000026c 	.word	0x2000026c

08017f74 <GUI_SelectLCD>:
 8017f74:	b508      	push	{r3, lr}
 8017f76:	f7fe fd7b 	bl	8016a70 <GUI_Lock>
 8017f7a:	f004 f983 	bl	801c284 <LCD_SelectLCD>
 8017f7e:	f7fc fe1d 	bl	8014bbc <LCD_UpdateColorIndices>
 8017f82:	f7fa facd 	bl	8012520 <WM_Activate>
 8017f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017f8a:	f7fe bd67 	b.w	8016a5c <GUI_Unlock>
 8017f8e:	bf00      	nop

08017f90 <GUI_SetBkColor>:
 8017f90:	b510      	push	{r4, lr}
 8017f92:	4604      	mov	r4, r0
 8017f94:	f7fe fd6c 	bl	8016a70 <GUI_Lock>
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f7fd fcd9 	bl	8015950 <LCD_SetBkColor>
 8017f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fa2:	f7fe bd5b 	b.w	8016a5c <GUI_Unlock>
 8017fa6:	bf00      	nop

08017fa8 <GUI_SetColor>:
 8017fa8:	b510      	push	{r4, lr}
 8017faa:	4604      	mov	r4, r0
 8017fac:	f7fe fd60 	bl	8016a70 <GUI_Lock>
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f7fd fcd5 	bl	8015960 <LCD_SetColor>
 8017fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fba:	f7fe bd4f 	b.w	8016a5c <GUI_Unlock>
 8017fbe:	bf00      	nop

08017fc0 <GL_SetDefault>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	4b20      	ldr	r3, [pc, #128]	; (8018044 <GL_SetDefault+0x84>)
 8017fc4:	4c20      	ldr	r4, [pc, #128]	; (8018048 <GL_SetDefault+0x88>)
 8017fc6:	681d      	ldr	r5, [r3, #0]
 8017fc8:	f7fe fd52 	bl	8016a70 <GUI_Lock>
 8017fcc:	4628      	mov	r0, r5
 8017fce:	f7fd fcbf 	bl	8015950 <LCD_SetBkColor>
 8017fd2:	f7fe fd43 	bl	8016a5c <GUI_Unlock>
 8017fd6:	4b1d      	ldr	r3, [pc, #116]	; (801804c <GL_SetDefault+0x8c>)
 8017fd8:	681d      	ldr	r5, [r3, #0]
 8017fda:	f7fe fd49 	bl	8016a70 <GUI_Lock>
 8017fde:	4628      	mov	r0, r5
 8017fe0:	f7fd fcbe 	bl	8015960 <LCD_SetColor>
 8017fe4:	f7fe fd3a 	bl	8016a5c <GUI_Unlock>
 8017fe8:	f7fe fd42 	bl	8016a70 <GUI_Lock>
 8017fec:	6823      	ldr	r3, [r4, #0]
 8017fee:	2201      	movs	r2, #1
 8017ff0:	761a      	strb	r2, [r3, #24]
 8017ff2:	f7fe fd33 	bl	8016a5c <GUI_Unlock>
 8017ff6:	f7fe fd3b 	bl	8016a70 <GUI_Lock>
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	2500      	movs	r5, #0
 8017ffe:	859d      	strh	r5, [r3, #44]	; 0x2c
 8018000:	f7fe fd2c 	bl	8016a5c <GUI_Unlock>
 8018004:	f7fe fd34 	bl	8016a70 <GUI_Lock>
 8018008:	6823      	ldr	r3, [r4, #0]
 801800a:	855d      	strh	r5, [r3, #42]	; 0x2a
 801800c:	f7fe fd26 	bl	8016a5c <GUI_Unlock>
 8018010:	f7fe fd2e 	bl	8016a70 <GUI_Lock>
 8018014:	4628      	mov	r0, r5
 8018016:	f7fd f86b 	bl	80150f0 <LCD_SetDrawMode>
 801801a:	f7fe fd1f 	bl	8016a5c <GUI_Unlock>
 801801e:	4b0c      	ldr	r3, [pc, #48]	; (8018050 <GL_SetDefault+0x90>)
 8018020:	681d      	ldr	r5, [r3, #0]
 8018022:	f7fe fd25 	bl	8016a70 <GUI_Lock>
 8018026:	6823      	ldr	r3, [r4, #0]
 8018028:	b105      	cbz	r5, 801802c <GL_SetDefault+0x6c>
 801802a:	61dd      	str	r5, [r3, #28]
 801802c:	f7fe fd16 	bl	8016a5c <GUI_Unlock>
 8018030:	f7fe fd1e 	bl	8016a70 <GUI_Lock>
 8018034:	6823      	ldr	r3, [r4, #0]
 8018036:	2200      	movs	r2, #0
 8018038:	769a      	strb	r2, [r3, #26]
 801803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801803e:	f7fe bd0d 	b.w	8016a5c <GUI_Unlock>
 8018042:	bf00      	nop
 8018044:	2000027c 	.word	0x2000027c
 8018048:	2000026c 	.word	0x2000026c
 801804c:	20000274 	.word	0x20000274
 8018050:	20000278 	.word	0x20000278

08018054 <GUI_SetDrawMode>:
 8018054:	b510      	push	{r4, lr}
 8018056:	4604      	mov	r4, r0
 8018058:	f7fe fd0a 	bl	8016a70 <GUI_Lock>
 801805c:	4620      	mov	r0, r4
 801805e:	f7fd f847 	bl	80150f0 <LCD_SetDrawMode>
 8018062:	4604      	mov	r4, r0
 8018064:	f7fe fcfa 	bl	8016a5c <GUI_Unlock>
 8018068:	4620      	mov	r0, r4
 801806a:	bd10      	pop	{r4, pc}

0801806c <GUI_SetFont>:
 801806c:	b538      	push	{r3, r4, r5, lr}
 801806e:	4604      	mov	r4, r0
 8018070:	f7fe fcfe 	bl	8016a70 <GUI_Lock>
 8018074:	4b04      	ldr	r3, [pc, #16]	; (8018088 <GUI_SetFont+0x1c>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	69dd      	ldr	r5, [r3, #28]
 801807a:	b104      	cbz	r4, 801807e <GUI_SetFont+0x12>
 801807c:	61dc      	str	r4, [r3, #28]
 801807e:	f7fe fced 	bl	8016a5c <GUI_Unlock>
 8018082:	4628      	mov	r0, r5
 8018084:	bd38      	pop	{r3, r4, r5, pc}
 8018086:	bf00      	nop
 8018088:	2000026c 	.word	0x2000026c

0801808c <GUI_SetOrg>:
 801808c:	b538      	push	{r3, r4, r5, lr}
 801808e:	4605      	mov	r5, r0
 8018090:	460c      	mov	r4, r1
 8018092:	f7fe fced 	bl	8016a70 <GUI_Lock>
 8018096:	4a09      	ldr	r2, [pc, #36]	; (80180bc <GUI_SetOrg+0x30>)
 8018098:	4b09      	ldr	r3, [pc, #36]	; (80180c0 <GUI_SetOrg+0x34>)
 801809a:	6812      	ldr	r2, [r2, #0]
 801809c:	4909      	ldr	r1, [pc, #36]	; (80180c4 <GUI_SetOrg+0x38>)
 801809e:	7c50      	ldrb	r0, [r2, #17]
 80180a0:	4a09      	ldr	r2, [pc, #36]	; (80180c8 <GUI_SetOrg+0x3c>)
 80180a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80180a6:	800d      	strh	r5, [r1, #0]
 80180a8:	68c3      	ldr	r3, [r0, #12]
 80180aa:	8014      	strh	r4, [r2, #0]
 80180ac:	4629      	mov	r1, r5
 80180ae:	4622      	mov	r2, r4
 80180b0:	6a1c      	ldr	r4, [r3, #32]
 80180b2:	47a0      	blx	r4
 80180b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180b8:	f7fe bcd0 	b.w	8016a5c <GUI_Unlock>
 80180bc:	2000026c 	.word	0x2000026c
 80180c0:	2002c040 	.word	0x2002c040
 80180c4:	2002c014 	.word	0x2002c014
 80180c8:	2002c004 	.word	0x2002c004

080180cc <GUI_SetTextMode>:
 80180cc:	b538      	push	{r3, r4, r5, lr}
 80180ce:	4605      	mov	r5, r0
 80180d0:	f7fe fcce 	bl	8016a70 <GUI_Lock>
 80180d4:	4b04      	ldr	r3, [pc, #16]	; (80180e8 <GUI_SetTextMode+0x1c>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 80180dc:	855d      	strh	r5, [r3, #42]	; 0x2a
 80180de:	f7fe fcbd 	bl	8016a5c <GUI_Unlock>
 80180e2:	4620      	mov	r0, r4
 80180e4:	bd38      	pop	{r3, r4, r5, pc}
 80180e6:	bf00      	nop
 80180e8:	2000026c 	.word	0x2000026c

080180ec <GUIPROP_DispChar>:
 80180ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f0:	4c39      	ldr	r4, [pc, #228]	; (80181d8 <GUIPROP_DispChar+0xec>)
 80180f2:	6823      	ldr	r3, [r4, #0]
 80180f4:	69da      	ldr	r2, [r3, #28]
 80180f6:	f8b3 b02a 	ldrh.w	fp, [r3, #42]	; 0x2a
 80180fa:	69d3      	ldr	r3, [r2, #28]
 80180fc:	b089      	sub	sp, #36	; 0x24
 80180fe:	b143      	cbz	r3, 8018112 <GUIPROP_DispChar+0x26>
 8018100:	881a      	ldrh	r2, [r3, #0]
 8018102:	4290      	cmp	r0, r2
 8018104:	d302      	bcc.n	801810c <GUIPROP_DispChar+0x20>
 8018106:	8859      	ldrh	r1, [r3, #2]
 8018108:	4281      	cmp	r1, r0
 801810a:	d205      	bcs.n	8018118 <GUIPROP_DispChar+0x2c>
 801810c:	689b      	ldr	r3, [r3, #8]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1f6      	bne.n	8018100 <GUIPROP_DispChar+0x14>
 8018112:	b009      	add	sp, #36	; 0x24
 8018114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018118:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801811c:	ebc2 0900 	rsb	r9, r2, r0
 8018120:	eb08 05c9 	add.w	r5, r8, r9, lsl #3
 8018124:	fa0f fb8b 	sxth.w	fp, fp
 8018128:	78ab      	ldrb	r3, [r5, #2]
 801812a:	9307      	str	r3, [sp, #28]
 801812c:	4658      	mov	r0, fp
 801812e:	f7fc ffdf 	bl	80150f0 <LCD_SetDrawMode>
 8018132:	6826      	ldr	r6, [r4, #0]
 8018134:	f818 2039 	ldrb.w	r2, [r8, r9, lsl #3]
 8018138:	69f7      	ldr	r7, [r6, #28]
 801813a:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 801813e:	f897 e01a 	ldrb.w	lr, [r7, #26]
 8018142:	7e3b      	ldrb	r3, [r7, #24]
 8018144:	4682      	mov	sl, r0
 8018146:	f9b6 0022 	ldrsh.w	r0, [r6, #34]	; 0x22
 801814a:	f8cd e000 	str.w	lr, [sp]
 801814e:	7eff      	ldrb	r7, [r7, #27]
 8018150:	9701      	str	r7, [sp, #4]
 8018152:	f04f 0e01 	mov.w	lr, #1
 8018156:	9f07      	ldr	r7, [sp, #28]
 8018158:	9703      	str	r7, [sp, #12]
 801815a:	f8cd e008 	str.w	lr, [sp, #8]
 801815e:	686f      	ldr	r7, [r5, #4]
 8018160:	9704      	str	r7, [sp, #16]
 8018162:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 8018164:	9605      	str	r6, [sp, #20]
 8018166:	f7fd f999 	bl	801549c <LCD_DrawBitmap>
 801816a:	6823      	ldr	r3, [r4, #0]
 801816c:	69db      	ldr	r3, [r3, #28]
 801816e:	7e5e      	ldrb	r6, [r3, #25]
 8018170:	7e19      	ldrb	r1, [r3, #24]
 8018172:	428e      	cmp	r6, r1
 8018174:	d921      	bls.n	80181ba <GUIPROP_DispChar+0xce>
 8018176:	f1bb 0f02 	cmp.w	fp, #2
 801817a:	7edf      	ldrb	r7, [r3, #27]
 801817c:	d01d      	beq.n	80181ba <GUIPROP_DispChar+0xce>
 801817e:	9106      	str	r1, [sp, #24]
 8018180:	f7ff fe0a 	bl	8017d98 <GUI_GetColor>
 8018184:	4683      	mov	fp, r0
 8018186:	f7ff fdfb 	bl	8017d80 <GUI_GetBkColor>
 801818a:	f7ff ff0d 	bl	8017fa8 <GUI_SetColor>
 801818e:	4a12      	ldr	r2, [pc, #72]	; (80181d8 <GUIPROP_DispChar+0xec>)
 8018190:	f818 e039 	ldrb.w	lr, [r8, r9, lsl #3]
 8018194:	6813      	ldr	r3, [r2, #0]
 8018196:	9906      	ldr	r1, [sp, #24]
 8018198:	69da      	ldr	r2, [r3, #28]
 801819a:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 801819e:	7ed2      	ldrb	r2, [r2, #27]
 80181a0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80181a4:	fb0e 0202 	mla	r2, lr, r2, r0
 80181a8:	fb01 3107 	mla	r1, r1, r7, r3
 80181ac:	fb06 3307 	mla	r3, r6, r7, r3
 80181b0:	f7fd f826 	bl	8015200 <LCD_FillRect>
 80181b4:	4658      	mov	r0, fp
 80181b6:	f7ff fef7 	bl	8017fa8 <GUI_SetColor>
 80181ba:	4650      	mov	r0, sl
 80181bc:	f7fc ff98 	bl	80150f0 <LCD_SetDrawMode>
 80181c0:	6823      	ldr	r3, [r4, #0]
 80181c2:	7868      	ldrb	r0, [r5, #1]
 80181c4:	69da      	ldr	r2, [r3, #28]
 80181c6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80181c8:	7e92      	ldrb	r2, [r2, #26]
 80181ca:	fb02 1200 	mla	r2, r2, r0, r1
 80181ce:	845a      	strh	r2, [r3, #34]	; 0x22
 80181d0:	b009      	add	sp, #36	; 0x24
 80181d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d6:	bf00      	nop
 80181d8:	2000026c 	.word	0x2000026c

080181dc <GUIPROP_GetCharDistX>:
 80181dc:	4b11      	ldr	r3, [pc, #68]	; (8018224 <GUIPROP_GetCharDistX+0x48>)
 80181de:	b470      	push	{r4, r5, r6}
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	69dd      	ldr	r5, [r3, #28]
 80181e4:	69eb      	ldr	r3, [r5, #28]
 80181e6:	b143      	cbz	r3, 80181fa <GUIPROP_GetCharDistX+0x1e>
 80181e8:	881a      	ldrh	r2, [r3, #0]
 80181ea:	4290      	cmp	r0, r2
 80181ec:	d302      	bcc.n	80181f4 <GUIPROP_GetCharDistX+0x18>
 80181ee:	885c      	ldrh	r4, [r3, #2]
 80181f0:	4284      	cmp	r4, r0
 80181f2:	d205      	bcs.n	8018200 <GUIPROP_GetCharDistX+0x24>
 80181f4:	689b      	ldr	r3, [r3, #8]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d1f6      	bne.n	80181e8 <GUIPROP_GetCharDistX+0xc>
 80181fa:	4618      	mov	r0, r3
 80181fc:	bc70      	pop	{r4, r5, r6}
 80181fe:	4770      	bx	lr
 8018200:	685e      	ldr	r6, [r3, #4]
 8018202:	7eac      	ldrb	r4, [r5, #26]
 8018204:	1a82      	subs	r2, r0, r2
 8018206:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801820a:	7858      	ldrb	r0, [r3, #1]
 801820c:	fb10 f004 	smulbb	r0, r0, r4
 8018210:	2900      	cmp	r1, #0
 8018212:	d0f3      	beq.n	80181fc <GUIPROP_GetCharDistX+0x20>
 8018214:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 8018218:	fb14 f303 	smulbb	r3, r4, r3
 801821c:	600b      	str	r3, [r1, #0]
 801821e:	bc70      	pop	{r4, r5, r6}
 8018220:	4770      	bx	lr
 8018222:	bf00      	nop
 8018224:	2000026c 	.word	0x2000026c

08018228 <GUIPROP_GetFontInfo>:
 8018228:	2301      	movs	r3, #1
 801822a:	800b      	strh	r3, [r1, #0]
 801822c:	4770      	bx	lr
 801822e:	bf00      	nop

08018230 <GUIPROP_IsInFont>:
 8018230:	69c0      	ldr	r0, [r0, #28]
 8018232:	b150      	cbz	r0, 801824a <GUIPROP_IsInFont+0x1a>
 8018234:	8803      	ldrh	r3, [r0, #0]
 8018236:	428b      	cmp	r3, r1
 8018238:	d802      	bhi.n	8018240 <GUIPROP_IsInFont+0x10>
 801823a:	8843      	ldrh	r3, [r0, #2]
 801823c:	428b      	cmp	r3, r1
 801823e:	d203      	bcs.n	8018248 <GUIPROP_IsInFont+0x18>
 8018240:	6880      	ldr	r0, [r0, #8]
 8018242:	2800      	cmp	r0, #0
 8018244:	d1f6      	bne.n	8018234 <GUIPROP_IsInFont+0x4>
 8018246:	4770      	bx	lr
 8018248:	2001      	movs	r0, #1
 801824a:	4770      	bx	lr

0801824c <_Log2VisBuffered>:
 801824c:	4770      	bx	lr
 801824e:	bf00      	nop

08018250 <_DispLine>:
 8018250:	b570      	push	{r4, r5, r6, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	ab02      	add	r3, sp, #8
 8018256:	4d21      	ldr	r5, [pc, #132]	; (80182dc <_DispLine+0x8c>)
 8018258:	f843 1d08 	str.w	r1, [r3, #-8]!
 801825c:	4c20      	ldr	r4, [pc, #128]	; (80182e0 <_DispLine+0x90>)
 801825e:	682b      	ldr	r3, [r5, #0]
 8018260:	9001      	str	r0, [sp, #4]
 8018262:	4669      	mov	r1, sp
 8018264:	4615      	mov	r5, r2
 8018266:	4798      	blx	r3
 8018268:	6823      	ldr	r3, [r4, #0]
 801826a:	9001      	str	r0, [sp, #4]
 801826c:	6958      	ldr	r0, [r3, #20]
 801826e:	b118      	cbz	r0, 8018278 <_DispLine+0x28>
 8018270:	4629      	mov	r1, r5
 8018272:	f7ff fe4d 	bl	8017f10 <GUI_RectsIntersect>
 8018276:	b1a8      	cbz	r0, 80182a4 <_DispLine+0x54>
 8018278:	2001      	movs	r0, #1
 801827a:	f7fd fdf7 	bl	8015e6c <GUI__ManageCache>
 801827e:	6822      	ldr	r2, [r4, #0]
 8018280:	69d3      	ldr	r3, [r2, #28]
 8018282:	695b      	ldr	r3, [r3, #20]
 8018284:	b1ab      	cbz	r3, 80182b2 <_DispLine+0x62>
 8018286:	4c17      	ldr	r4, [pc, #92]	; (80182e4 <_DispLine+0x94>)
 8018288:	6821      	ldr	r1, [r4, #0]
 801828a:	b169      	cbz	r1, 80182a8 <_DispLine+0x58>
 801828c:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8018290:	689b      	ldr	r3, [r3, #8]
 8018292:	9801      	ldr	r0, [sp, #4]
 8018294:	9900      	ldr	r1, [sp, #0]
 8018296:	4798      	blx	r3
 8018298:	4628      	mov	r0, r5
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	4798      	blx	r3
 801829e:	2000      	movs	r0, #0
 80182a0:	f7fd fde4 	bl	8015e6c <GUI__ManageCache>
 80182a4:	b002      	add	sp, #8
 80182a6:	bd70      	pop	{r4, r5, r6, pc}
 80182a8:	689b      	ldr	r3, [r3, #8]
 80182aa:	9801      	ldr	r0, [sp, #4]
 80182ac:	9900      	ldr	r1, [sp, #0]
 80182ae:	4798      	blx	r3
 80182b0:	e7f5      	b.n	801829e <_DispLine+0x4e>
 80182b2:	4d0d      	ldr	r5, [pc, #52]	; (80182e8 <_DispLine+0x98>)
 80182b4:	9b00      	ldr	r3, [sp, #0]
 80182b6:	3b01      	subs	r3, #1
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	a801      	add	r0, sp, #4
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	dbee      	blt.n	801829e <_DispLine+0x4e>
 80182c0:	f7fe f90e 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 80182c4:	6823      	ldr	r3, [r4, #0]
 80182c6:	69db      	ldr	r3, [r3, #28]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	4606      	mov	r6, r0
 80182cc:	4798      	blx	r3
 80182ce:	682b      	ldr	r3, [r5, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d0ef      	beq.n	80182b4 <_DispLine+0x64>
 80182d4:	4630      	mov	r0, r6
 80182d6:	4798      	blx	r3
 80182d8:	e7ec      	b.n	80182b4 <_DispLine+0x64>
 80182da:	bf00      	nop
 80182dc:	20000280 	.word	0x20000280
 80182e0:	2000026c 	.word	0x2000026c
 80182e4:	2002c00c 	.word	0x2002c00c
 80182e8:	2002c01c 	.word	0x2002c01c

080182ec <GUI__GetLineNumChars>:
 80182ec:	b530      	push	{r4, r5, lr}
 80182ee:	b083      	sub	sp, #12
 80182f0:	460d      	mov	r5, r1
 80182f2:	9001      	str	r0, [sp, #4]
 80182f4:	b1d8      	cbz	r0, 801832e <GUI__GetLineNumChars+0x42>
 80182f6:	4b0f      	ldr	r3, [pc, #60]	; (8018334 <GUI__GetLineNumChars+0x48>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	69db      	ldr	r3, [r3, #28]
 80182fc:	695b      	ldr	r3, [r3, #20]
 80182fe:	b123      	cbz	r3, 801830a <GUI__GetLineNumChars+0x1e>
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	b113      	cbz	r3, 801830a <GUI__GetLineNumChars+0x1e>
 8018304:	4798      	blx	r3
 8018306:	b003      	add	sp, #12
 8018308:	bd30      	pop	{r4, r5, pc}
 801830a:	2d00      	cmp	r5, #0
 801830c:	bfc8      	it	gt
 801830e:	2400      	movgt	r4, #0
 8018310:	dc05      	bgt.n	801831e <GUI__GetLineNumChars+0x32>
 8018312:	e00c      	b.n	801832e <GUI__GetLineNumChars+0x42>
 8018314:	280a      	cmp	r0, #10
 8018316:	d007      	beq.n	8018328 <GUI__GetLineNumChars+0x3c>
 8018318:	3401      	adds	r4, #1
 801831a:	42ac      	cmp	r4, r5
 801831c:	d004      	beq.n	8018328 <GUI__GetLineNumChars+0x3c>
 801831e:	a801      	add	r0, sp, #4
 8018320:	f7fe f8de 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 8018324:	2800      	cmp	r0, #0
 8018326:	d1f5      	bne.n	8018314 <GUI__GetLineNumChars+0x28>
 8018328:	4620      	mov	r0, r4
 801832a:	b003      	add	sp, #12
 801832c:	bd30      	pop	{r4, r5, pc}
 801832e:	2000      	movs	r0, #0
 8018330:	b003      	add	sp, #12
 8018332:	bd30      	pop	{r4, r5, pc}
 8018334:	2000026c 	.word	0x2000026c

08018338 <GUI__GetLineDistX>:
 8018338:	b570      	push	{r4, r5, r6, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	ab04      	add	r3, sp, #16
 801833e:	4a1e      	ldr	r2, [pc, #120]	; (80183b8 <GUI__GetLineDistX+0x80>)
 8018340:	f843 1d10 	str.w	r1, [r3, #-16]!
 8018344:	9001      	str	r0, [sp, #4]
 8018346:	4669      	mov	r1, sp
 8018348:	6813      	ldr	r3, [r2, #0]
 801834a:	4798      	blx	r3
 801834c:	4604      	mov	r4, r0
 801834e:	9001      	str	r0, [sp, #4]
 8018350:	2800      	cmp	r0, #0
 8018352:	d02c      	beq.n	80183ae <GUI__GetLineDistX+0x76>
 8018354:	4b19      	ldr	r3, [pc, #100]	; (80183bc <GUI__GetLineDistX+0x84>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	69db      	ldr	r3, [r3, #28]
 801835a:	695b      	ldr	r3, [r3, #20]
 801835c:	b12b      	cbz	r3, 801836a <GUI__GetLineDistX+0x32>
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	b11b      	cbz	r3, 801836a <GUI__GetLineDistX+0x32>
 8018362:	9900      	ldr	r1, [sp, #0]
 8018364:	4798      	blx	r3
 8018366:	b004      	add	sp, #16
 8018368:	bd70      	pop	{r4, r5, r6, pc}
 801836a:	9b00      	ldr	r3, [sp, #0]
 801836c:	3b01      	subs	r3, #1
 801836e:	2b00      	cmp	r3, #0
 8018370:	9300      	str	r3, [sp, #0]
 8018372:	bfa8      	it	ge
 8018374:	2400      	movge	r4, #0
 8018376:	db1c      	blt.n	80183b2 <GUI__GetLineDistX+0x7a>
 8018378:	a801      	add	r0, sp, #4
 801837a:	f7fe f8b1 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801837e:	4605      	mov	r5, r0
 8018380:	f000 f8a8 	bl	80184d4 <GUI_GetCharDistX>
 8018384:	9b00      	ldr	r3, [sp, #0]
 8018386:	3b01      	subs	r3, #1
 8018388:	2b00      	cmp	r3, #0
 801838a:	4404      	add	r4, r0
 801838c:	9300      	str	r3, [sp, #0]
 801838e:	daf3      	bge.n	8018378 <GUI__GetLineDistX+0x40>
 8018390:	a904      	add	r1, sp, #16
 8018392:	2600      	movs	r6, #0
 8018394:	f841 6d04 	str.w	r6, [r1, #-4]!
 8018398:	4628      	mov	r0, r5
 801839a:	f000 f8ad 	bl	80184f8 <GUI_GetCharDistXEx>
 801839e:	9b03      	ldr	r3, [sp, #12]
 80183a0:	4298      	cmp	r0, r3
 80183a2:	bfb8      	it	lt
 80183a4:	ebc0 0603 	rsblt	r6, r0, r3
 80183a8:	19a0      	adds	r0, r4, r6
 80183aa:	b004      	add	sp, #16
 80183ac:	bd70      	pop	{r4, r5, r6, pc}
 80183ae:	b004      	add	sp, #16
 80183b0:	bd70      	pop	{r4, r5, r6, pc}
 80183b2:	2500      	movs	r5, #0
 80183b4:	462c      	mov	r4, r5
 80183b6:	e7eb      	b.n	8018390 <GUI__GetLineDistX+0x58>
 80183b8:	20000280 	.word	0x20000280
 80183bc:	2000026c 	.word	0x2000026c

080183c0 <GUI__DispLine>:
 80183c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183c2:	4b29      	ldr	r3, [pc, #164]	; (8018468 <GUI__DispLine+0xa8>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	b083      	sub	sp, #12
 80183c8:	4604      	mov	r4, r0
 80183ca:	460d      	mov	r5, r1
 80183cc:	b173      	cbz	r3, 80183ec <GUI__DispLine+0x2c>
 80183ce:	2000      	movs	r0, #0
 80183d0:	f7f9 fe2e 	bl	8012030 <WM__InitIVRSearch>
 80183d4:	b140      	cbz	r0, 80183e8 <GUI__DispLine+0x28>
 80183d6:	4620      	mov	r0, r4
 80183d8:	4629      	mov	r1, r5
 80183da:	466a      	mov	r2, sp
 80183dc:	f7ff ff38 	bl	8018250 <_DispLine>
 80183e0:	f7f9 fd00 	bl	8011de4 <WM__GetNextIVR>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d1f6      	bne.n	80183d6 <GUI__DispLine+0x16>
 80183e8:	b003      	add	sp, #12
 80183ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ec:	6810      	ldr	r0, [r2, #0]
 80183ee:	6851      	ldr	r1, [r2, #4]
 80183f0:	4f1e      	ldr	r7, [pc, #120]	; (801846c <GUI__DispLine+0xac>)
 80183f2:	466b      	mov	r3, sp
 80183f4:	c303      	stmia	r3!, {r0, r1}
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80183fc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8018400:	f8bd e000 	ldrh.w	lr, [sp]
 8018404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018408:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801840c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8018410:	4496      	add	lr, r2
 8018412:	4419      	add	r1, r3
 8018414:	4462      	add	r2, ip
 8018416:	4403      	add	r3, r0
 8018418:	4668      	mov	r0, sp
 801841a:	f8ad e000 	strh.w	lr, [sp]
 801841e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018422:	f8ad 1002 	strh.w	r1, [sp, #2]
 8018426:	f8ad 3006 	strh.w	r3, [sp, #6]
 801842a:	f7f9 fe01 	bl	8012030 <WM__InitIVRSearch>
 801842e:	b950      	cbnz	r0, 8018446 <GUI__DispLine+0x86>
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 8018434:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8018436:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8018438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801843a:	1a61      	subs	r1, r4, r1
 801843c:	1a82      	subs	r2, r0, r2
 801843e:	8459      	strh	r1, [r3, #34]	; 0x22
 8018440:	849a      	strh	r2, [r3, #36]	; 0x24
 8018442:	b003      	add	sp, #12
 8018444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018446:	683b      	ldr	r3, [r7, #0]
 8018448:	f8bd 1000 	ldrh.w	r1, [sp]
 801844c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018450:	8459      	strh	r1, [r3, #34]	; 0x22
 8018452:	849a      	strh	r2, [r3, #36]	; 0x24
 8018454:	4620      	mov	r0, r4
 8018456:	4629      	mov	r1, r5
 8018458:	466a      	mov	r2, sp
 801845a:	f7ff fef9 	bl	8018250 <_DispLine>
 801845e:	f7f9 fcc1 	bl	8011de4 <WM__GetNextIVR>
 8018462:	2800      	cmp	r0, #0
 8018464:	d1ef      	bne.n	8018446 <GUI__DispLine+0x86>
 8018466:	e7e3      	b.n	8018430 <GUI__DispLine+0x70>
 8018468:	2002bff8 	.word	0x2002bff8
 801846c:	2000026c 	.word	0x2000026c

08018470 <GUI_GetYAdjust>:
 8018470:	b510      	push	{r4, lr}
 8018472:	f7fe fafd 	bl	8016a70 <GUI_Lock>
 8018476:	4b0f      	ldr	r3, [pc, #60]	; (80184b4 <GUI_GetYAdjust+0x44>)
 8018478:	681a      	ldr	r2, [r3, #0]
 801847a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 801847c:	f003 030c 	and.w	r3, r3, #12
 8018480:	2b08      	cmp	r3, #8
 8018482:	d008      	beq.n	8018496 <GUI_GetYAdjust+0x26>
 8018484:	2b0c      	cmp	r3, #12
 8018486:	d006      	beq.n	8018496 <GUI_GetYAdjust+0x26>
 8018488:	2b04      	cmp	r3, #4
 801848a:	d00b      	beq.n	80184a4 <GUI_GetYAdjust+0x34>
 801848c:	2400      	movs	r4, #0
 801848e:	f7fe fae5 	bl	8016a5c <GUI_Unlock>
 8018492:	4620      	mov	r0, r4
 8018494:	bd10      	pop	{r4, pc}
 8018496:	69d3      	ldr	r3, [r2, #28]
 8018498:	7e1c      	ldrb	r4, [r3, #24]
 801849a:	0864      	lsrs	r4, r4, #1
 801849c:	f7fe fade 	bl	8016a5c <GUI_Unlock>
 80184a0:	4620      	mov	r0, r4
 80184a2:	bd10      	pop	{r4, pc}
 80184a4:	69d3      	ldr	r3, [r2, #28]
 80184a6:	7e1c      	ldrb	r4, [r3, #24]
 80184a8:	3c01      	subs	r4, #1
 80184aa:	f7fe fad7 	bl	8016a5c <GUI_Unlock>
 80184ae:	4620      	mov	r0, r4
 80184b0:	bd10      	pop	{r4, pc}
 80184b2:	bf00      	nop
 80184b4:	2000026c 	.word	0x2000026c

080184b8 <GUI_GetFontDistY>:
 80184b8:	b510      	push	{r4, lr}
 80184ba:	f7fe fad9 	bl	8016a70 <GUI_Lock>
 80184be:	4b04      	ldr	r3, [pc, #16]	; (80184d0 <GUI_GetFontDistY+0x18>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	69db      	ldr	r3, [r3, #28]
 80184c4:	7e5c      	ldrb	r4, [r3, #25]
 80184c6:	f7fe fac9 	bl	8016a5c <GUI_Unlock>
 80184ca:	4620      	mov	r0, r4
 80184cc:	bd10      	pop	{r4, pc}
 80184ce:	bf00      	nop
 80184d0:	2000026c 	.word	0x2000026c

080184d4 <GUI_GetCharDistX>:
 80184d4:	b510      	push	{r4, lr}
 80184d6:	4604      	mov	r4, r0
 80184d8:	f7fe faca 	bl	8016a70 <GUI_Lock>
 80184dc:	4b05      	ldr	r3, [pc, #20]	; (80184f4 <GUI_GetCharDistX+0x20>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	69db      	ldr	r3, [r3, #28]
 80184e2:	2100      	movs	r1, #0
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	4620      	mov	r0, r4
 80184e8:	4798      	blx	r3
 80184ea:	4604      	mov	r4, r0
 80184ec:	f7fe fab6 	bl	8016a5c <GUI_Unlock>
 80184f0:	4620      	mov	r0, r4
 80184f2:	bd10      	pop	{r4, pc}
 80184f4:	2000026c 	.word	0x2000026c

080184f8 <GUI_GetCharDistXEx>:
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4605      	mov	r5, r0
 80184fc:	460c      	mov	r4, r1
 80184fe:	f7fe fab7 	bl	8016a70 <GUI_Lock>
 8018502:	4b06      	ldr	r3, [pc, #24]	; (801851c <GUI_GetCharDistXEx+0x24>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	69db      	ldr	r3, [r3, #28]
 8018508:	4621      	mov	r1, r4
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	4628      	mov	r0, r5
 801850e:	4798      	blx	r3
 8018510:	4604      	mov	r4, r0
 8018512:	f7fe faa3 	bl	8016a5c <GUI_Unlock>
 8018516:	4620      	mov	r0, r4
 8018518:	bd38      	pop	{r3, r4, r5, pc}
 801851a:	bf00      	nop
 801851c:	2000026c 	.word	0x2000026c

08018520 <_AddFreeMemory>:
 8018520:	4bbf      	ldr	r3, [pc, #764]	; (8018820 <_AddFreeMemory+0x300>)
 8018522:	b4f0      	push	{r4, r5, r6, r7}
 8018524:	68dc      	ldr	r4, [r3, #12]
 8018526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018528:	3c01      	subs	r4, #1
 801852a:	1915      	adds	r5, r2, r4
 801852c:	180c      	adds	r4, r1, r0
 801852e:	42a5      	cmp	r5, r4
 8018530:	d303      	bcc.n	801853a <_AddFreeMemory+0x1a>
 8018532:	580d      	ldr	r5, [r1, r0]
 8018534:	2d00      	cmp	r5, #0
 8018536:	f000 80a2 	beq.w	801867e <_AddFreeMemory+0x15e>
 801853a:	428a      	cmp	r2, r1
 801853c:	d205      	bcs.n	801854a <_AddFreeMemory+0x2a>
 801853e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8018542:	1b0c      	subs	r4, r1, r4
 8018544:	6822      	ldr	r2, [r4, #0]
 8018546:	2a00      	cmp	r2, #0
 8018548:	d04b      	beq.n	80185e2 <_AddFreeMemory+0xc2>
 801854a:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801854e:	4ab4      	ldr	r2, [pc, #720]	; (8018820 <_AddFreeMemory+0x300>)
 8018550:	42a0      	cmp	r0, r4
 8018552:	f080 8120 	bcs.w	8018796 <_AddFreeMemory+0x276>
 8018556:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 801855a:	42a0      	cmp	r0, r4
 801855c:	f080 811d 	bcs.w	801879a <_AddFreeMemory+0x27a>
 8018560:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8018564:	42a0      	cmp	r0, r4
 8018566:	f080 811a 	bcs.w	801879e <_AddFreeMemory+0x27e>
 801856a:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 801856e:	42a0      	cmp	r0, r4
 8018570:	f080 8117 	bcs.w	80187a2 <_AddFreeMemory+0x282>
 8018574:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8018578:	42a0      	cmp	r0, r4
 801857a:	f080 8114 	bcs.w	80187a6 <_AddFreeMemory+0x286>
 801857e:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8018582:	42a0      	cmp	r0, r4
 8018584:	f080 8111 	bcs.w	80187aa <_AddFreeMemory+0x28a>
 8018588:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 801858c:	42a0      	cmp	r0, r4
 801858e:	f080 810e 	bcs.w	80187ae <_AddFreeMemory+0x28e>
 8018592:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8018596:	42a0      	cmp	r0, r4
 8018598:	f080 810b 	bcs.w	80187b2 <_AddFreeMemory+0x292>
 801859c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801859e:	42a0      	cmp	r0, r4
 80185a0:	f080 8109 	bcs.w	80187b6 <_AddFreeMemory+0x296>
 80185a4:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80185a6:	4290      	cmp	r0, r2
 80185a8:	f080 8107 	bcs.w	80187ba <_AddFreeMemory+0x29a>
 80185ac:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80185ae:	4a9c      	ldr	r2, [pc, #624]	; (8018820 <_AddFreeMemory+0x300>)
 80185b0:	42a0      	cmp	r0, r4
 80185b2:	f080 8104 	bcs.w	80187be <_AddFreeMemory+0x29e>
 80185b6:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80185b8:	42a0      	cmp	r0, r4
 80185ba:	f080 8102 	bcs.w	80187c2 <_AddFreeMemory+0x2a2>
 80185be:	6d94      	ldr	r4, [r2, #88]	; 0x58
 80185c0:	42a0      	cmp	r0, r4
 80185c2:	f080 8100 	bcs.w	80187c6 <_AddFreeMemory+0x2a6>
 80185c6:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80185c8:	42a0      	cmp	r0, r4
 80185ca:	f080 80fe 	bcs.w	80187ca <_AddFreeMemory+0x2aa>
 80185ce:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80185d0:	42a0      	cmp	r0, r4
 80185d2:	f080 80fc 	bcs.w	80187ce <_AddFreeMemory+0x2ae>
 80185d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80185d8:	4290      	cmp	r0, r2
 80185da:	f080 80b5 	bcs.w	8018748 <_AddFreeMemory+0x228>
 80185de:	bcf0      	pop	{r4, r5, r6, r7}
 80185e0:	4770      	bx	lr
 80185e2:	6862      	ldr	r2, [r4, #4]
 80185e4:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80185e8:	498d      	ldr	r1, [pc, #564]	; (8018820 <_AddFreeMemory+0x300>)
 80185ea:	42aa      	cmp	r2, r5
 80185ec:	4410      	add	r0, r2
 80185ee:	f080 80fd 	bcs.w	80187ec <_AddFreeMemory+0x2cc>
 80185f2:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 80185f6:	42aa      	cmp	r2, r5
 80185f8:	f080 8105 	bcs.w	8018806 <_AddFreeMemory+0x2e6>
 80185fc:	f8d1 50a8 	ldr.w	r5, [r1, #168]	; 0xa8
 8018600:	42aa      	cmp	r2, r5
 8018602:	f080 80fe 	bcs.w	8018802 <_AddFreeMemory+0x2e2>
 8018606:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 801860a:	42aa      	cmp	r2, r5
 801860c:	f080 80fd 	bcs.w	801880a <_AddFreeMemory+0x2ea>
 8018610:	f8d1 5098 	ldr.w	r5, [r1, #152]	; 0x98
 8018614:	42aa      	cmp	r2, r5
 8018616:	f080 80fa 	bcs.w	801880e <_AddFreeMemory+0x2ee>
 801861a:	f8d1 5090 	ldr.w	r5, [r1, #144]	; 0x90
 801861e:	42aa      	cmp	r2, r5
 8018620:	f080 80f9 	bcs.w	8018816 <_AddFreeMemory+0x2f6>
 8018624:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8018628:	42aa      	cmp	r2, r5
 801862a:	f080 80f2 	bcs.w	8018812 <_AddFreeMemory+0x2f2>
 801862e:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8018632:	428a      	cmp	r2, r1
 8018634:	f080 8104 	bcs.w	8018840 <_AddFreeMemory+0x320>
 8018638:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801863a:	4979      	ldr	r1, [pc, #484]	; (8018820 <_AddFreeMemory+0x300>)
 801863c:	42aa      	cmp	r2, r5
 801863e:	f080 80fd 	bcs.w	801883c <_AddFreeMemory+0x31c>
 8018642:	6f0d      	ldr	r5, [r1, #112]	; 0x70
 8018644:	42aa      	cmp	r2, r5
 8018646:	f080 810e 	bcs.w	8018866 <_AddFreeMemory+0x346>
 801864a:	6e8d      	ldr	r5, [r1, #104]	; 0x68
 801864c:	42aa      	cmp	r2, r5
 801864e:	f080 8108 	bcs.w	8018862 <_AddFreeMemory+0x342>
 8018652:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 8018654:	42aa      	cmp	r2, r5
 8018656:	f080 810c 	bcs.w	8018872 <_AddFreeMemory+0x352>
 801865a:	6d8d      	ldr	r5, [r1, #88]	; 0x58
 801865c:	42aa      	cmp	r2, r5
 801865e:	f080 8106 	bcs.w	801886e <_AddFreeMemory+0x34e>
 8018662:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8018664:	42aa      	cmp	r2, r5
 8018666:	f080 8100 	bcs.w	801886a <_AddFreeMemory+0x34a>
 801866a:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801866c:	42aa      	cmp	r2, r5
 801866e:	d25e      	bcs.n	801872e <_AddFreeMemory+0x20e>
 8018670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018672:	428a      	cmp	r2, r1
 8018674:	bf28      	it	cs
 8018676:	2600      	movcs	r6, #0
 8018678:	d25a      	bcs.n	8018730 <_AddFreeMemory+0x210>
 801867a:	4621      	mov	r1, r4
 801867c:	e765      	b.n	801854a <_AddFreeMemory+0x2a>
 801867e:	6865      	ldr	r5, [r4, #4]
 8018680:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8018684:	42b5      	cmp	r5, r6
 8018686:	4428      	add	r0, r5
 8018688:	f080 80ad 	bcs.w	80187e6 <_AddFreeMemory+0x2c6>
 801868c:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8018690:	42b5      	cmp	r5, r6
 8018692:	f080 80b3 	bcs.w	80187fc <_AddFreeMemory+0x2dc>
 8018696:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801869a:	42b5      	cmp	r5, r6
 801869c:	f080 80ab 	bcs.w	80187f6 <_AddFreeMemory+0x2d6>
 80186a0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80186a4:	42b5      	cmp	r5, r6
 80186a6:	f080 80a3 	bcs.w	80187f0 <_AddFreeMemory+0x2d0>
 80186aa:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80186ae:	42b5      	cmp	r5, r6
 80186b0:	f080 80c1 	bcs.w	8018836 <_AddFreeMemory+0x316>
 80186b4:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 80186b8:	42b5      	cmp	r5, r6
 80186ba:	f080 80b9 	bcs.w	8018830 <_AddFreeMemory+0x310>
 80186be:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80186c2:	42b5      	cmp	r5, r6
 80186c4:	f080 80b1 	bcs.w	801882a <_AddFreeMemory+0x30a>
 80186c8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 80186cc:	42b5      	cmp	r5, r6
 80186ce:	f080 80a9 	bcs.w	8018824 <_AddFreeMemory+0x304>
 80186d2:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 80186d4:	42bd      	cmp	r5, r7
 80186d6:	f080 80a0 	bcs.w	801881a <_AddFreeMemory+0x2fa>
 80186da:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 80186dc:	42bd      	cmp	r5, r7
 80186de:	f080 80b1 	bcs.w	8018844 <_AddFreeMemory+0x324>
 80186e2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80186e4:	42bd      	cmp	r5, r7
 80186e6:	f080 80b3 	bcs.w	8018850 <_AddFreeMemory+0x330>
 80186ea:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80186ec:	42bd      	cmp	r5, r7
 80186ee:	f080 80ac 	bcs.w	801884a <_AddFreeMemory+0x32a>
 80186f2:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 80186f4:	42bd      	cmp	r5, r7
 80186f6:	f080 80b1 	bcs.w	801885c <_AddFreeMemory+0x33c>
 80186fa:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80186fc:	42bd      	cmp	r5, r7
 80186fe:	f080 80aa 	bcs.w	8018856 <_AddFreeMemory+0x336>
 8018702:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8018704:	42bd      	cmp	r5, r7
 8018706:	f080 80b6 	bcs.w	8018876 <_AddFreeMemory+0x356>
 801870a:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801870c:	42b5      	cmp	r5, r6
 801870e:	bf28      	it	cs
 8018710:	f04f 0c00 	movcs.w	ip, #0
 8018714:	f4ff af11 	bcc.w	801853a <_AddFreeMemory+0x1a>
 8018718:	681e      	ldr	r6, [r3, #0]
 801871a:	68a7      	ldr	r7, [r4, #8]
 801871c:	68e4      	ldr	r4, [r4, #12]
 801871e:	1b75      	subs	r5, r6, r5
 8018720:	601d      	str	r5, [r3, #0]
 8018722:	b107      	cbz	r7, 8018726 <_AddFreeMemory+0x206>
 8018724:	607c      	str	r4, [r7, #4]
 8018726:	2c00      	cmp	r4, #0
 8018728:	d058      	beq.n	80187dc <_AddFreeMemory+0x2bc>
 801872a:	6027      	str	r7, [r4, #0]
 801872c:	e705      	b.n	801853a <_AddFreeMemory+0x1a>
 801872e:	2601      	movs	r6, #1
 8018730:	681f      	ldr	r7, [r3, #0]
 8018732:	68a5      	ldr	r5, [r4, #8]
 8018734:	68e1      	ldr	r1, [r4, #12]
 8018736:	1aba      	subs	r2, r7, r2
 8018738:	601a      	str	r2, [r3, #0]
 801873a:	b105      	cbz	r5, 801873e <_AddFreeMemory+0x21e>
 801873c:	6069      	str	r1, [r5, #4]
 801873e:	2900      	cmp	r1, #0
 8018740:	d047      	beq.n	80187d2 <_AddFreeMemory+0x2b2>
 8018742:	600d      	str	r5, [r1, #0]
 8018744:	4621      	mov	r1, r4
 8018746:	e700      	b.n	801854a <_AddFreeMemory+0x2a>
 8018748:	2500      	movs	r5, #0
 801874a:	3508      	adds	r5, #8
 801874c:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8018750:	180e      	adds	r6, r1, r0
 8018752:	6852      	ldr	r2, [r2, #4]
 8018754:	608a      	str	r2, [r1, #8]
 8018756:	2400      	movs	r4, #0
 8018758:	600c      	str	r4, [r1, #0]
 801875a:	6048      	str	r0, [r1, #4]
 801875c:	6109      	str	r1, [r1, #16]
 801875e:	f101 0408 	add.w	r4, r1, #8
 8018762:	f846 0c04 	str.w	r0, [r6, #-4]
 8018766:	b102      	cbz	r2, 801876a <_AddFreeMemory+0x24a>
 8018768:	6054      	str	r4, [r2, #4]
 801876a:	2200      	movs	r2, #0
 801876c:	60ca      	str	r2, [r1, #12]
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	f893 6029 	ldrb.w	r6, [r3, #41]	; 0x29
 8018774:	492a      	ldr	r1, [pc, #168]	; (8018820 <_AddFreeMemory+0x300>)
 8018776:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801877a:	4402      	add	r2, r0
 801877c:	606c      	str	r4, [r5, #4]
 801877e:	601a      	str	r2, [r3, #0]
 8018780:	2e00      	cmp	r6, #0
 8018782:	f47f af2c 	bne.w	80185de <_AddFreeMemory+0xbe>
 8018786:	68cc      	ldr	r4, [r1, #12]
 8018788:	688b      	ldr	r3, [r1, #8]
 801878a:	1aa2      	subs	r2, r4, r2
 801878c:	429a      	cmp	r2, r3
 801878e:	bf88      	it	hi
 8018790:	608a      	strhi	r2, [r1, #8]
 8018792:	bcf0      	pop	{r4, r5, r6, r7}
 8018794:	4770      	bx	lr
 8018796:	250f      	movs	r5, #15
 8018798:	e7d7      	b.n	801874a <_AddFreeMemory+0x22a>
 801879a:	250e      	movs	r5, #14
 801879c:	e7d5      	b.n	801874a <_AddFreeMemory+0x22a>
 801879e:	250d      	movs	r5, #13
 80187a0:	e7d3      	b.n	801874a <_AddFreeMemory+0x22a>
 80187a2:	250c      	movs	r5, #12
 80187a4:	e7d1      	b.n	801874a <_AddFreeMemory+0x22a>
 80187a6:	250b      	movs	r5, #11
 80187a8:	e7cf      	b.n	801874a <_AddFreeMemory+0x22a>
 80187aa:	250a      	movs	r5, #10
 80187ac:	e7cd      	b.n	801874a <_AddFreeMemory+0x22a>
 80187ae:	2509      	movs	r5, #9
 80187b0:	e7cb      	b.n	801874a <_AddFreeMemory+0x22a>
 80187b2:	2508      	movs	r5, #8
 80187b4:	e7c9      	b.n	801874a <_AddFreeMemory+0x22a>
 80187b6:	2507      	movs	r5, #7
 80187b8:	e7c7      	b.n	801874a <_AddFreeMemory+0x22a>
 80187ba:	2506      	movs	r5, #6
 80187bc:	e7c5      	b.n	801874a <_AddFreeMemory+0x22a>
 80187be:	2505      	movs	r5, #5
 80187c0:	e7c3      	b.n	801874a <_AddFreeMemory+0x22a>
 80187c2:	2504      	movs	r5, #4
 80187c4:	e7c1      	b.n	801874a <_AddFreeMemory+0x22a>
 80187c6:	2503      	movs	r5, #3
 80187c8:	e7bf      	b.n	801874a <_AddFreeMemory+0x22a>
 80187ca:	2502      	movs	r5, #2
 80187cc:	e7bd      	b.n	801874a <_AddFreeMemory+0x22a>
 80187ce:	2501      	movs	r5, #1
 80187d0:	e7bb      	b.n	801874a <_AddFreeMemory+0x22a>
 80187d2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80187d6:	4621      	mov	r1, r4
 80187d8:	6475      	str	r5, [r6, #68]	; 0x44
 80187da:	e6b6      	b.n	801854a <_AddFreeMemory+0x2a>
 80187dc:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80187e0:	f8cc 7044 	str.w	r7, [ip, #68]	; 0x44
 80187e4:	e6a9      	b.n	801853a <_AddFreeMemory+0x1a>
 80187e6:	f04f 0c0f 	mov.w	ip, #15
 80187ea:	e795      	b.n	8018718 <_AddFreeMemory+0x1f8>
 80187ec:	260f      	movs	r6, #15
 80187ee:	e79f      	b.n	8018730 <_AddFreeMemory+0x210>
 80187f0:	f04f 0c0c 	mov.w	ip, #12
 80187f4:	e790      	b.n	8018718 <_AddFreeMemory+0x1f8>
 80187f6:	f04f 0c0d 	mov.w	ip, #13
 80187fa:	e78d      	b.n	8018718 <_AddFreeMemory+0x1f8>
 80187fc:	f04f 0c0e 	mov.w	ip, #14
 8018800:	e78a      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018802:	260d      	movs	r6, #13
 8018804:	e794      	b.n	8018730 <_AddFreeMemory+0x210>
 8018806:	260e      	movs	r6, #14
 8018808:	e792      	b.n	8018730 <_AddFreeMemory+0x210>
 801880a:	260c      	movs	r6, #12
 801880c:	e790      	b.n	8018730 <_AddFreeMemory+0x210>
 801880e:	260b      	movs	r6, #11
 8018810:	e78e      	b.n	8018730 <_AddFreeMemory+0x210>
 8018812:	2609      	movs	r6, #9
 8018814:	e78c      	b.n	8018730 <_AddFreeMemory+0x210>
 8018816:	260a      	movs	r6, #10
 8018818:	e78a      	b.n	8018730 <_AddFreeMemory+0x210>
 801881a:	f04f 0c07 	mov.w	ip, #7
 801881e:	e77b      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018820:	2002c050 	.word	0x2002c050
 8018824:	f04f 0c08 	mov.w	ip, #8
 8018828:	e776      	b.n	8018718 <_AddFreeMemory+0x1f8>
 801882a:	f04f 0c09 	mov.w	ip, #9
 801882e:	e773      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018830:	f04f 0c0a 	mov.w	ip, #10
 8018834:	e770      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018836:	f04f 0c0b 	mov.w	ip, #11
 801883a:	e76d      	b.n	8018718 <_AddFreeMemory+0x1f8>
 801883c:	2607      	movs	r6, #7
 801883e:	e777      	b.n	8018730 <_AddFreeMemory+0x210>
 8018840:	2608      	movs	r6, #8
 8018842:	e775      	b.n	8018730 <_AddFreeMemory+0x210>
 8018844:	f04f 0c06 	mov.w	ip, #6
 8018848:	e766      	b.n	8018718 <_AddFreeMemory+0x1f8>
 801884a:	f04f 0c04 	mov.w	ip, #4
 801884e:	e763      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018850:	f04f 0c05 	mov.w	ip, #5
 8018854:	e760      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018856:	f04f 0c02 	mov.w	ip, #2
 801885a:	e75d      	b.n	8018718 <_AddFreeMemory+0x1f8>
 801885c:	f04f 0c03 	mov.w	ip, #3
 8018860:	e75a      	b.n	8018718 <_AddFreeMemory+0x1f8>
 8018862:	2605      	movs	r6, #5
 8018864:	e764      	b.n	8018730 <_AddFreeMemory+0x210>
 8018866:	2606      	movs	r6, #6
 8018868:	e762      	b.n	8018730 <_AddFreeMemory+0x210>
 801886a:	2602      	movs	r6, #2
 801886c:	e760      	b.n	8018730 <_AddFreeMemory+0x210>
 801886e:	2603      	movs	r6, #3
 8018870:	e75e      	b.n	8018730 <_AddFreeMemory+0x210>
 8018872:	2604      	movs	r6, #4
 8018874:	e75c      	b.n	8018730 <_AddFreeMemory+0x210>
 8018876:	f04f 0c01 	mov.w	ip, #1
 801887a:	e74d      	b.n	8018718 <_AddFreeMemory+0x1f8>

0801887c <_RemoveHoles>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8018a54 <_RemoveHoles+0x1d8>
 8018884:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8018888:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801888c:	e893 0030 	ldmia.w	r3, {r4, r5}
 8018890:	3e01      	subs	r6, #1
 8018892:	b083      	sub	sp, #12
 8018894:	4683      	mov	fp, r0
 8018896:	441e      	add	r6, r3
 8018898:	46c1      	mov	r9, r8
 801889a:	b134      	cbz	r4, 80188aa <_RemoveHoles+0x2e>
 801889c:	442b      	add	r3, r5
 801889e:	429e      	cmp	r6, r3
 80188a0:	d906      	bls.n	80188b0 <_RemoveHoles+0x34>
 80188a2:	e893 0030 	ldmia.w	r3, {r4, r5}
 80188a6:	2c00      	cmp	r4, #0
 80188a8:	d1f8      	bne.n	801889c <_RemoveHoles+0x20>
 80188aa:	18e9      	adds	r1, r5, r3
 80188ac:	428e      	cmp	r6, r1
 80188ae:	d803      	bhi.n	80188b8 <_RemoveHoles+0x3c>
 80188b0:	2001      	movs	r0, #1
 80188b2:	b003      	add	sp, #12
 80188b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b8:	58ec      	ldr	r4, [r5, r3]
 80188ba:	684f      	ldr	r7, [r1, #4]
 80188bc:	b154      	cbz	r4, 80188d4 <_RemoveHoles+0x58>
 80188be:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80188c2:	f812 0034 	ldrb.w	r0, [r2, r4, lsl #3]
 80188c6:	2801      	cmp	r0, #1
 80188c8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80188cc:	d005      	beq.n	80188da <_RemoveHoles+0x5e>
 80188ce:	463d      	mov	r5, r7
 80188d0:	460b      	mov	r3, r1
 80188d2:	e7e2      	b.n	801889a <_RemoveHoles+0x1e>
 80188d4:	463d      	mov	r5, r7
 80188d6:	460b      	mov	r3, r1
 80188d8:	e7e7      	b.n	80188aa <_RemoveHoles+0x2e>
 80188da:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 80188de:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 80188e2:	42a8      	cmp	r0, r5
 80188e4:	d97e      	bls.n	80189e4 <_RemoveHoles+0x168>
 80188e6:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 80188ea:	42a8      	cmp	r0, r5
 80188ec:	d97d      	bls.n	80189ea <_RemoveHoles+0x16e>
 80188ee:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 80188f2:	42a8      	cmp	r0, r5
 80188f4:	d97e      	bls.n	80189f4 <_RemoveHoles+0x178>
 80188f6:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80188fa:	42a8      	cmp	r0, r5
 80188fc:	d97d      	bls.n	80189fa <_RemoveHoles+0x17e>
 80188fe:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8018902:	4285      	cmp	r5, r0
 8018904:	f080 8086 	bcs.w	8018a14 <_RemoveHoles+0x198>
 8018908:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 801890c:	4285      	cmp	r5, r0
 801890e:	f080 8084 	bcs.w	8018a1a <_RemoveHoles+0x19e>
 8018912:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8018916:	4285      	cmp	r5, r0
 8018918:	d274      	bcs.n	8018a04 <_RemoveHoles+0x188>
 801891a:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 801891e:	4285      	cmp	r5, r0
 8018920:	d273      	bcs.n	8018a0a <_RemoveHoles+0x18e>
 8018922:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 8018926:	4285      	cmp	r5, r0
 8018928:	f080 8084 	bcs.w	8018a34 <_RemoveHoles+0x1b8>
 801892c:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 8018930:	4285      	cmp	r5, r0
 8018932:	f080 8082 	bcs.w	8018a3a <_RemoveHoles+0x1be>
 8018936:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 801893a:	4285      	cmp	r5, r0
 801893c:	f080 8082 	bcs.w	8018a44 <_RemoveHoles+0x1c8>
 8018940:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8018944:	4285      	cmp	r5, r0
 8018946:	d26d      	bcs.n	8018a24 <_RemoveHoles+0x1a8>
 8018948:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801894c:	4285      	cmp	r5, r0
 801894e:	d26e      	bcs.n	8018a2e <_RemoveHoles+0x1b2>
 8018950:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8018954:	4285      	cmp	r5, r0
 8018956:	d278      	bcs.n	8018a4a <_RemoveHoles+0x1ce>
 8018958:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 801895c:	4285      	cmp	r5, r0
 801895e:	d21f      	bcs.n	80189a0 <_RemoveHoles+0x124>
 8018960:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8018964:	4285      	cmp	r5, r0
 8018966:	d231      	bcs.n	80189cc <_RemoveHoles+0x150>
 8018968:	6053      	str	r3, [r2, #4]
 801896a:	4618      	mov	r0, r3
 801896c:	463a      	mov	r2, r7
 801896e:	f005 fb50 	bl	801e012 <memmove>
 8018972:	4554      	cmp	r4, sl
 8018974:	4603      	mov	r3, r0
 8018976:	d00b      	beq.n	8018990 <_RemoveHoles+0x114>
 8018978:	441f      	add	r7, r3
 801897a:	4628      	mov	r0, r5
 801897c:	4639      	mov	r1, r7
 801897e:	f7ff fdcf 	bl	8018520 <_AddFreeMemory>
 8018982:	f1bb 0f00 	cmp.w	fp, #0
 8018986:	d001      	beq.n	801898c <_RemoveHoles+0x110>
 8018988:	4558      	cmp	r0, fp
 801898a:	d207      	bcs.n	801899c <_RemoveHoles+0x120>
 801898c:	463b      	mov	r3, r7
 801898e:	e786      	b.n	801889e <_RemoveHoles+0x22>
 8018990:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8018994:	1b52      	subs	r2, r2, r5
 8018996:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 801899a:	e7ed      	b.n	8018978 <_RemoveHoles+0xfc>
 801899c:	2000      	movs	r0, #0
 801899e:	e788      	b.n	80188b2 <_RemoveHoles+0x36>
 80189a0:	2001      	movs	r0, #1
 80189a2:	9001      	str	r0, [sp, #4]
 80189a4:	f8d8 0000 	ldr.w	r0, [r8]
 80189a8:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80189ac:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80189b0:	1b40      	subs	r0, r0, r5
 80189b2:	f8c8 0000 	str.w	r0, [r8]
 80189b6:	f1be 0f00 	cmp.w	lr, #0
 80189ba:	d001      	beq.n	80189c0 <_RemoveHoles+0x144>
 80189bc:	f8ce c004 	str.w	ip, [lr, #4]
 80189c0:	f1bc 0f00 	cmp.w	ip, #0
 80189c4:	d007      	beq.n	80189d6 <_RemoveHoles+0x15a>
 80189c6:	f8cc e000 	str.w	lr, [ip]
 80189ca:	e7cd      	b.n	8018968 <_RemoveHoles+0xec>
 80189cc:	f04f 0c00 	mov.w	ip, #0
 80189d0:	f8cd c004 	str.w	ip, [sp, #4]
 80189d4:	e7e6      	b.n	80189a4 <_RemoveHoles+0x128>
 80189d6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80189da:	eb08 00cc 	add.w	r0, r8, ip, lsl #3
 80189de:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 80189e2:	e7c1      	b.n	8018968 <_RemoveHoles+0xec>
 80189e4:	200f      	movs	r0, #15
 80189e6:	9001      	str	r0, [sp, #4]
 80189e8:	e7dc      	b.n	80189a4 <_RemoveHoles+0x128>
 80189ea:	f04f 0c0e 	mov.w	ip, #14
 80189ee:	f8cd c004 	str.w	ip, [sp, #4]
 80189f2:	e7d7      	b.n	80189a4 <_RemoveHoles+0x128>
 80189f4:	200d      	movs	r0, #13
 80189f6:	9001      	str	r0, [sp, #4]
 80189f8:	e7d4      	b.n	80189a4 <_RemoveHoles+0x128>
 80189fa:	f04f 0c0c 	mov.w	ip, #12
 80189fe:	f8cd c004 	str.w	ip, [sp, #4]
 8018a02:	e7cf      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a04:	2009      	movs	r0, #9
 8018a06:	9001      	str	r0, [sp, #4]
 8018a08:	e7cc      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a0a:	f04f 0c08 	mov.w	ip, #8
 8018a0e:	f8cd c004 	str.w	ip, [sp, #4]
 8018a12:	e7c7      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a14:	200b      	movs	r0, #11
 8018a16:	9001      	str	r0, [sp, #4]
 8018a18:	e7c4      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a1a:	f04f 0c0a 	mov.w	ip, #10
 8018a1e:	f8cd c004 	str.w	ip, [sp, #4]
 8018a22:	e7bf      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a24:	f04f 0c04 	mov.w	ip, #4
 8018a28:	f8cd c004 	str.w	ip, [sp, #4]
 8018a2c:	e7ba      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a2e:	2003      	movs	r0, #3
 8018a30:	9001      	str	r0, [sp, #4]
 8018a32:	e7b7      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a34:	2007      	movs	r0, #7
 8018a36:	9001      	str	r0, [sp, #4]
 8018a38:	e7b4      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a3a:	f04f 0c06 	mov.w	ip, #6
 8018a3e:	f8cd c004 	str.w	ip, [sp, #4]
 8018a42:	e7af      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a44:	2005      	movs	r0, #5
 8018a46:	9001      	str	r0, [sp, #4]
 8018a48:	e7ac      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a4a:	f04f 0c02 	mov.w	ip, #2
 8018a4e:	f8cd c004 	str.w	ip, [sp, #4]
 8018a52:	e7a7      	b.n	80189a4 <_RemoveHoles+0x128>
 8018a54:	2002c050 	.word	0x2002c050

08018a58 <_Alloc>:
 8018a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a5c:	4cc3      	ldr	r4, [pc, #780]	; (8018d6c <_Alloc+0x314>)
 8018a5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018a62:	4605      	mov	r5, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	f000 8107 	beq.w	8018c78 <_Alloc+0x220>
 8018a6a:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	42b5      	cmp	r5, r6
 8018a70:	bf24      	itt	cs
 8018a72:	3503      	addcs	r5, #3
 8018a74:	f025 0603 	biccs.w	r6, r5, #3
 8018a78:	360c      	adds	r6, #12
 8018a7a:	42b3      	cmp	r3, r6
 8018a7c:	4dbb      	ldr	r5, [pc, #748]	; (8018d6c <_Alloc+0x314>)
 8018a7e:	d202      	bcs.n	8018a86 <_Alloc+0x2e>
 8018a80:	2000      	movs	r0, #0
 8018a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a86:	686b      	ldr	r3, [r5, #4]
 8018a88:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	f240 8172 	bls.w	8018d74 <_Alloc+0x31c>
 8018a90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018a92:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018a94:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	eb02 0108 	add.w	r1, r2, r8
 8018a9e:	6063      	str	r3, [r4, #4]
 8018aa0:	684b      	ldr	r3, [r1, #4]
 8018aa2:	6263      	str	r3, [r4, #36]	; 0x24
 8018aa4:	2301      	movs	r3, #1
 8018aa6:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 8018aaa:	2d00      	cmp	r5, #0
 8018aac:	d0e8      	beq.n	8018a80 <_Alloc+0x28>
 8018aae:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8018d6c <_Alloc+0x314>
 8018ab2:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 8018ab6:	42be      	cmp	r6, r7
 8018ab8:	f080 813a 	bcs.w	8018d30 <_Alloc+0x2d8>
 8018abc:	f8d9 30b0 	ldr.w	r3, [r9, #176]	; 0xb0
 8018ac0:	429e      	cmp	r6, r3
 8018ac2:	f080 8137 	bcs.w	8018d34 <_Alloc+0x2dc>
 8018ac6:	f8d9 30a8 	ldr.w	r3, [r9, #168]	; 0xa8
 8018aca:	429e      	cmp	r6, r3
 8018acc:	f080 8134 	bcs.w	8018d38 <_Alloc+0x2e0>
 8018ad0:	f8d9 30a0 	ldr.w	r3, [r9, #160]	; 0xa0
 8018ad4:	429e      	cmp	r6, r3
 8018ad6:	f080 8133 	bcs.w	8018d40 <_Alloc+0x2e8>
 8018ada:	f8d9 3098 	ldr.w	r3, [r9, #152]	; 0x98
 8018ade:	429e      	cmp	r6, r3
 8018ae0:	f080 812c 	bcs.w	8018d3c <_Alloc+0x2e4>
 8018ae4:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 8018ae8:	429e      	cmp	r6, r3
 8018aea:	f080 812d 	bcs.w	8018d48 <_Alloc+0x2f0>
 8018aee:	f8d9 3088 	ldr.w	r3, [r9, #136]	; 0x88
 8018af2:	429e      	cmp	r6, r3
 8018af4:	f080 8126 	bcs.w	8018d44 <_Alloc+0x2ec>
 8018af8:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
 8018afc:	429e      	cmp	r6, r3
 8018afe:	f080 8127 	bcs.w	8018d50 <_Alloc+0x2f8>
 8018b02:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
 8018b06:	429e      	cmp	r6, r3
 8018b08:	f080 8120 	bcs.w	8018d4c <_Alloc+0x2f4>
 8018b0c:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8018b10:	429e      	cmp	r6, r3
 8018b12:	f080 8121 	bcs.w	8018d58 <_Alloc+0x300>
 8018b16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018b18:	429e      	cmp	r6, r3
 8018b1a:	f080 811b 	bcs.w	8018d54 <_Alloc+0x2fc>
 8018b1e:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 8018b22:	429e      	cmp	r6, r3
 8018b24:	f080 811a 	bcs.w	8018d5c <_Alloc+0x304>
 8018b28:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 8018b2c:	429e      	cmp	r6, r3
 8018b2e:	f080 8117 	bcs.w	8018d60 <_Alloc+0x308>
 8018b32:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8018b36:	429e      	cmp	r6, r3
 8018b38:	f080 8116 	bcs.w	8018d68 <_Alloc+0x310>
 8018b3c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8018b40:	429e      	cmp	r6, r3
 8018b42:	f080 810f 	bcs.w	8018d64 <_Alloc+0x30c>
 8018b46:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8018b4a:	429e      	cmp	r6, r3
 8018b4c:	bf2c      	ite	cs
 8018b4e:	2300      	movcs	r3, #0
 8018b50:	f06f 0300 	mvncc.w	r3, #0
 8018b54:	2b0f      	cmp	r3, #15
 8018b56:	bf98      	it	ls
 8018b58:	2100      	movls	r1, #0
 8018b5a:	d814      	bhi.n	8018b86 <_Alloc+0x12e>
 8018b5c:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
 8018b60:	2000      	movs	r0, #0
 8018b62:	eb0c 0300 	add.w	r3, ip, r0
 8018b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b68:	b92b      	cbnz	r3, 8018b76 <_Alloc+0x11e>
 8018b6a:	e007      	b.n	8018b7c <_Alloc+0x124>
 8018b6c:	685a      	ldr	r2, [r3, #4]
 8018b6e:	4296      	cmp	r6, r2
 8018b70:	d91d      	bls.n	8018bae <_Alloc+0x156>
 8018b72:	689b      	ldr	r3, [r3, #8]
 8018b74:	b113      	cbz	r3, 8018b7c <_Alloc+0x124>
 8018b76:	689b      	ldr	r3, [r3, #8]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d1f7      	bne.n	8018b6c <_Alloc+0x114>
 8018b7c:	3101      	adds	r1, #1
 8018b7e:	290f      	cmp	r1, #15
 8018b80:	f100 0008 	add.w	r0, r0, #8
 8018b84:	d9ed      	bls.n	8018b62 <_Alloc+0x10a>
 8018b86:	4630      	mov	r0, r6
 8018b88:	f7ff fe78 	bl	801887c <_RemoveHoles>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	d090      	beq.n	8018ab2 <_Alloc+0x5a>
 8018b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b92:	6862      	ldr	r2, [r4, #4]
 8018b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018b96:	4498      	add	r8, r3
 8018b98:	1c50      	adds	r0, r2, #1
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	6060      	str	r0, [r4, #4]
 8018b9e:	f8c8 1004 	str.w	r1, [r8, #4]
 8018ba2:	f803 2035 	strb.w	r2, [r3, r5, lsl #3]
 8018ba6:	4610      	mov	r0, r2
 8018ba8:	6265      	str	r5, [r4, #36]	; 0x24
 8018baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018bb0:	ebc6 0c02 	rsb	ip, r6, r2
 8018bb4:	f101 000c 	add.w	r0, r1, #12
 8018bb8:	4584      	cmp	ip, r0
 8018bba:	bf2c      	ite	cs
 8018bbc:	4630      	movcs	r0, r6
 8018bbe:	4610      	movcc	r0, r2
 8018bc0:	42ba      	cmp	r2, r7
 8018bc2:	f080 8101 	bcs.w	8018dc8 <_Alloc+0x370>
 8018bc6:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8018bca:	4e68      	ldr	r6, [pc, #416]	; (8018d6c <_Alloc+0x314>)
 8018bcc:	42ba      	cmp	r2, r7
 8018bce:	f080 80fd 	bcs.w	8018dcc <_Alloc+0x374>
 8018bd2:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 8018bd6:	42ba      	cmp	r2, r7
 8018bd8:	f080 80fa 	bcs.w	8018dd0 <_Alloc+0x378>
 8018bdc:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8018be0:	42ba      	cmp	r2, r7
 8018be2:	f080 80e9 	bcs.w	8018db8 <_Alloc+0x360>
 8018be6:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8018bea:	42ba      	cmp	r2, r7
 8018bec:	f080 80e6 	bcs.w	8018dbc <_Alloc+0x364>
 8018bf0:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8018bf4:	4297      	cmp	r7, r2
 8018bf6:	f240 80ef 	bls.w	8018dd8 <_Alloc+0x380>
 8018bfa:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8018bfe:	4297      	cmp	r7, r2
 8018c00:	f240 80e8 	bls.w	8018dd4 <_Alloc+0x37c>
 8018c04:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8018c08:	4297      	cmp	r7, r2
 8018c0a:	f240 80f3 	bls.w	8018df4 <_Alloc+0x39c>
 8018c0e:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8018c10:	4297      	cmp	r7, r2
 8018c12:	f240 80ed 	bls.w	8018df0 <_Alloc+0x398>
 8018c16:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8018c18:	4296      	cmp	r6, r2
 8018c1a:	f240 80e7 	bls.w	8018dec <_Alloc+0x394>
 8018c1e:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 8018c20:	4f52      	ldr	r7, [pc, #328]	; (8018d6c <_Alloc+0x314>)
 8018c22:	4296      	cmp	r6, r2
 8018c24:	f240 80e0 	bls.w	8018de8 <_Alloc+0x390>
 8018c28:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8018c2a:	4296      	cmp	r6, r2
 8018c2c:	f240 80da 	bls.w	8018de4 <_Alloc+0x38c>
 8018c30:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8018c32:	42b2      	cmp	r2, r6
 8018c34:	f080 80d4 	bcs.w	8018de0 <_Alloc+0x388>
 8018c38:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8018c3a:	42b2      	cmp	r2, r6
 8018c3c:	f080 80ce 	bcs.w	8018ddc <_Alloc+0x384>
 8018c40:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8018c42:	42b2      	cmp	r2, r6
 8018c44:	f080 80a2 	bcs.w	8018d8c <_Alloc+0x334>
 8018c48:	4291      	cmp	r1, r2
 8018c4a:	bf98      	it	ls
 8018c4c:	2100      	movls	r1, #0
 8018c4e:	f240 809e 	bls.w	8018d8e <_Alloc+0x336>
 8018c52:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8018c54:	1819      	adds	r1, r3, r0
 8018c56:	44a0      	add	r8, r4
 8018c58:	4290      	cmp	r0, r2
 8018c5a:	f04f 0400 	mov.w	r4, #0
 8018c5e:	f8c8 3004 	str.w	r3, [r8, #4]
 8018c62:	601d      	str	r5, [r3, #0]
 8018c64:	6058      	str	r0, [r3, #4]
 8018c66:	611b      	str	r3, [r3, #16]
 8018c68:	609c      	str	r4, [r3, #8]
 8018c6a:	f841 0c04 	str.w	r0, [r1, #-4]
 8018c6e:	f2c0 809d 	blt.w	8018dac <_Alloc+0x354>
 8018c72:	4628      	mov	r0, r5
 8018c74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c78:	4b3d      	ldr	r3, [pc, #244]	; (8018d70 <_Alloc+0x318>)
 8018c7a:	689a      	ldr	r2, [r3, #8]
 8018c7c:	6858      	ldr	r0, [r3, #4]
 8018c7e:	2101      	movs	r1, #1
 8018c80:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8018c84:	b90a      	cbnz	r2, 8018c8a <_Alloc+0x232>
 8018c86:	0882      	lsrs	r2, r0, #2
 8018c88:	609a      	str	r2, [r3, #8]
 8018c8a:	6819      	ldr	r1, [r3, #0]
 8018c8c:	63a1      	str	r1, [r4, #56]	; 0x38
 8018c8e:	f1a1 0314 	sub.w	r3, r1, #20
 8018c92:	265a      	movs	r6, #90	; 0x5a
 8018c94:	4403      	add	r3, r0
 8018c96:	6226      	str	r6, [r4, #32]
 8018c98:	f04f 0b10 	mov.w	fp, #16
 8018c9c:	f04f 0a20 	mov.w	sl, #32
 8018ca0:	f04f 0940 	mov.w	r9, #64	; 0x40
 8018ca4:	f04f 0880 	mov.w	r8, #128	; 0x80
 8018ca8:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8018cac:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8018cb0:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8018cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018cb8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8018cbc:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
 8018cc0:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8018cc4:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 8018cc8:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
 8018ccc:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 8018cd0:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 8018cd4:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8018cd8:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8018cdc:	6727      	str	r7, [r4, #112]	; 0x70
 8018cde:	67a2      	str	r2, [r4, #120]	; 0x78
 8018ce0:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8018ce4:	2202      	movs	r2, #2
 8018ce6:	2601      	movs	r6, #1
 8018ce8:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8018cec:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 8018cf0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8018cf4:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8018cf8:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8018cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8018cfe:	f8c4 c0a8 	str.w	ip, [r4, #168]	; 0xa8
 8018d02:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 8018d06:	6122      	str	r2, [r4, #16]
 8018d08:	60e0      	str	r0, [r4, #12]
 8018d0a:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
 8018d0e:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
 8018d12:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8018d16:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
 8018d1a:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 8018d1e:	605e      	str	r6, [r3, #4]
 8018d20:	6266      	str	r6, [r4, #36]	; 0x24
 8018d22:	6066      	str	r6, [r4, #4]
 8018d24:	f7ff fbfc 	bl	8018520 <_AddFreeMemory>
 8018d28:	f000 f866 	bl	8018df8 <_EnlargeBlocks>
 8018d2c:	6326      	str	r6, [r4, #48]	; 0x30
 8018d2e:	e69c      	b.n	8018a6a <_Alloc+0x12>
 8018d30:	210f      	movs	r1, #15
 8018d32:	e713      	b.n	8018b5c <_Alloc+0x104>
 8018d34:	210e      	movs	r1, #14
 8018d36:	e711      	b.n	8018b5c <_Alloc+0x104>
 8018d38:	210d      	movs	r1, #13
 8018d3a:	e70f      	b.n	8018b5c <_Alloc+0x104>
 8018d3c:	210b      	movs	r1, #11
 8018d3e:	e70d      	b.n	8018b5c <_Alloc+0x104>
 8018d40:	210c      	movs	r1, #12
 8018d42:	e70b      	b.n	8018b5c <_Alloc+0x104>
 8018d44:	2109      	movs	r1, #9
 8018d46:	e709      	b.n	8018b5c <_Alloc+0x104>
 8018d48:	210a      	movs	r1, #10
 8018d4a:	e707      	b.n	8018b5c <_Alloc+0x104>
 8018d4c:	2107      	movs	r1, #7
 8018d4e:	e705      	b.n	8018b5c <_Alloc+0x104>
 8018d50:	2108      	movs	r1, #8
 8018d52:	e703      	b.n	8018b5c <_Alloc+0x104>
 8018d54:	2105      	movs	r1, #5
 8018d56:	e701      	b.n	8018b5c <_Alloc+0x104>
 8018d58:	2106      	movs	r1, #6
 8018d5a:	e6ff      	b.n	8018b5c <_Alloc+0x104>
 8018d5c:	2104      	movs	r1, #4
 8018d5e:	e6fd      	b.n	8018b5c <_Alloc+0x104>
 8018d60:	2103      	movs	r1, #3
 8018d62:	e6fb      	b.n	8018b5c <_Alloc+0x104>
 8018d64:	2101      	movs	r1, #1
 8018d66:	e6f9      	b.n	8018b5c <_Alloc+0x104>
 8018d68:	2102      	movs	r1, #2
 8018d6a:	e6f7      	b.n	8018b5c <_Alloc+0x104>
 8018d6c:	2002c050 	.word	0x2002c050
 8018d70:	2002b010 	.word	0x2002b010
 8018d74:	3a01      	subs	r2, #1
 8018d76:	632a      	str	r2, [r5, #48]	; 0x30
 8018d78:	f000 f83e 	bl	8018df8 <_EnlargeBlocks>
 8018d7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018d7e:	3301      	adds	r3, #1
 8018d80:	632b      	str	r3, [r5, #48]	; 0x30
 8018d82:	2800      	cmp	r0, #0
 8018d84:	f47f ae7c 	bne.w	8018a80 <_Alloc+0x28>
 8018d88:	686b      	ldr	r3, [r5, #4]
 8018d8a:	e681      	b.n	8018a90 <_Alloc+0x38>
 8018d8c:	2101      	movs	r1, #1
 8018d8e:	6826      	ldr	r6, [r4, #0]
 8018d90:	689f      	ldr	r7, [r3, #8]
 8018d92:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8018d96:	1ab6      	subs	r6, r6, r2
 8018d98:	6026      	str	r6, [r4, #0]
 8018d9a:	b10f      	cbz	r7, 8018da0 <_Alloc+0x348>
 8018d9c:	f8c7 c004 	str.w	ip, [r7, #4]
 8018da0:	f1bc 0f00 	cmp.w	ip, #0
 8018da4:	d00c      	beq.n	8018dc0 <_Alloc+0x368>
 8018da6:	f8cc 7000 	str.w	r7, [ip]
 8018daa:	e752      	b.n	8018c52 <_Alloc+0x1fa>
 8018dac:	1a10      	subs	r0, r2, r0
 8018dae:	f7ff fbb7 	bl	8018520 <_AddFreeMemory>
 8018db2:	4628      	mov	r0, r5
 8018db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018db8:	210c      	movs	r1, #12
 8018dba:	e7e8      	b.n	8018d8e <_Alloc+0x336>
 8018dbc:	210b      	movs	r1, #11
 8018dbe:	e7e6      	b.n	8018d8e <_Alloc+0x336>
 8018dc0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8018dc4:	644f      	str	r7, [r1, #68]	; 0x44
 8018dc6:	e744      	b.n	8018c52 <_Alloc+0x1fa>
 8018dc8:	210f      	movs	r1, #15
 8018dca:	e7e0      	b.n	8018d8e <_Alloc+0x336>
 8018dcc:	210e      	movs	r1, #14
 8018dce:	e7de      	b.n	8018d8e <_Alloc+0x336>
 8018dd0:	210d      	movs	r1, #13
 8018dd2:	e7dc      	b.n	8018d8e <_Alloc+0x336>
 8018dd4:	2109      	movs	r1, #9
 8018dd6:	e7da      	b.n	8018d8e <_Alloc+0x336>
 8018dd8:	210a      	movs	r1, #10
 8018dda:	e7d8      	b.n	8018d8e <_Alloc+0x336>
 8018ddc:	2102      	movs	r1, #2
 8018dde:	e7d6      	b.n	8018d8e <_Alloc+0x336>
 8018de0:	2103      	movs	r1, #3
 8018de2:	e7d4      	b.n	8018d8e <_Alloc+0x336>
 8018de4:	2104      	movs	r1, #4
 8018de6:	e7d2      	b.n	8018d8e <_Alloc+0x336>
 8018de8:	2105      	movs	r1, #5
 8018dea:	e7d0      	b.n	8018d8e <_Alloc+0x336>
 8018dec:	2106      	movs	r1, #6
 8018dee:	e7ce      	b.n	8018d8e <_Alloc+0x336>
 8018df0:	2107      	movs	r1, #7
 8018df2:	e7cc      	b.n	8018d8e <_Alloc+0x336>
 8018df4:	2108      	movs	r1, #8
 8018df6:	e7ca      	b.n	8018d8e <_Alloc+0x336>

08018df8 <_EnlargeBlocks>:
 8018df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dfc:	4c34      	ldr	r4, [pc, #208]	; (8018ed0 <_EnlargeBlocks+0xd8>)
 8018dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018e00:	b973      	cbnz	r3, 8018e20 <_EnlargeBlocks+0x28>
 8018e02:	4b34      	ldr	r3, [pc, #208]	; (8018ed4 <_EnlargeBlocks+0xdc>)
 8018e04:	689f      	ldr	r7, [r3, #8]
 8018e06:	685b      	ldr	r3, [r3, #4]
 8018e08:	3708      	adds	r7, #8
 8018e0a:	fbb3 f7f7 	udiv	r7, r3, r7
 8018e0e:	3702      	adds	r7, #2
 8018e10:	00f8      	lsls	r0, r7, #3
 8018e12:	f7ff fe21 	bl	8018a58 <_Alloc>
 8018e16:	4606      	mov	r6, r0
 8018e18:	b960      	cbnz	r0, 8018e34 <_EnlargeBlocks+0x3c>
 8018e1a:	2001      	movs	r0, #1
 8018e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e20:	6923      	ldr	r3, [r4, #16]
 8018e22:	1d1f      	adds	r7, r3, #4
 8018e24:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8018e28:	00f8      	lsls	r0, r7, #3
 8018e2a:	f7ff fe15 	bl	8018a58 <_Alloc>
 8018e2e:	4606      	mov	r6, r0
 8018e30:	2800      	cmp	r0, #0
 8018e32:	d0f2      	beq.n	8018e1a <_EnlargeBlocks+0x22>
 8018e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e36:	6922      	ldr	r2, [r4, #16]
 8018e38:	4b27      	ldr	r3, [pc, #156]	; (8018ed8 <_EnlargeBlocks+0xe0>)
 8018e3a:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8018e44:	00d2      	lsls	r2, r2, #3
 8018e46:	6845      	ldr	r5, [r0, #4]
 8018e48:	f105 0908 	add.w	r9, r5, #8
 8018e4c:	4648      	mov	r0, r9
 8018e4e:	4798      	blx	r3
 8018e50:	6920      	ldr	r0, [r4, #16]
 8018e52:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8018e56:	1e7d      	subs	r5, r7, #1
 8018e58:	42a8      	cmp	r0, r5
 8018e5a:	62e6      	str	r6, [r4, #44]	; 0x2c
 8018e5c:	d235      	bcs.n	8018eca <_EnlargeBlocks+0xd2>
 8018e5e:	eb09 06c0 	add.w	r6, r9, r0, lsl #3
 8018e62:	4603      	mov	r3, r0
 8018e64:	2200      	movs	r2, #0
 8018e66:	18b1      	adds	r1, r6, r2
 8018e68:	3301      	adds	r3, #1
 8018e6a:	42ab      	cmp	r3, r5
 8018e6c:	604b      	str	r3, [r1, #4]
 8018e6e:	f102 0208 	add.w	r2, r2, #8
 8018e72:	d1f8      	bne.n	8018e66 <_EnlargeBlocks+0x6e>
 8018e74:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
 8018e78:	2600      	movs	r6, #0
 8018e7a:	606e      	str	r6, [r5, #4]
 8018e7c:	6863      	ldr	r3, [r4, #4]
 8018e7e:	6260      	str	r0, [r4, #36]	; 0x24
 8018e80:	1a1b      	subs	r3, r3, r0
 8018e82:	443b      	add	r3, r7
 8018e84:	6127      	str	r7, [r4, #16]
 8018e86:	6063      	str	r3, [r4, #4]
 8018e88:	4c11      	ldr	r4, [pc, #68]	; (8018ed0 <_EnlargeBlocks+0xd8>)
 8018e8a:	f1b8 0f00 	cmp.w	r8, #0
 8018e8e:	d019      	beq.n	8018ec4 <_EnlargeBlocks+0xcc>
 8018e90:	f7fd fdee 	bl	8016a70 <GUI_Lock>
 8018e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e96:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8018e9a:	442b      	add	r3, r5
 8018e9c:	6859      	ldr	r1, [r3, #4]
 8018e9e:	6848      	ldr	r0, [r1, #4]
 8018ea0:	f7ff fb3e 	bl	8018520 <_AddFreeMemory>
 8018ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ea6:	6861      	ldr	r1, [r4, #4]
 8018ea8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018eaa:	441d      	add	r5, r3
 8018eac:	3101      	adds	r1, #1
 8018eae:	6061      	str	r1, [r4, #4]
 8018eb0:	606a      	str	r2, [r5, #4]
 8018eb2:	f803 6038 	strb.w	r6, [r3, r8, lsl #3]
 8018eb6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8018eba:	f7fd fdcf 	bl	8016a5c <GUI_Unlock>
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ec4:	4640      	mov	r0, r8
 8018ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eca:	4605      	mov	r5, r0
 8018ecc:	e7d2      	b.n	8018e74 <_EnlargeBlocks+0x7c>
 8018ece:	bf00      	nop
 8018ed0:	2002c050 	.word	0x2002c050
 8018ed4:	2002b010 	.word	0x2002b010
 8018ed8:	20000244 	.word	0x20000244

08018edc <GUI_ALLOC_FreeFixedBlock>:
 8018edc:	b128      	cbz	r0, 8018eea <GUI_ALLOC_FreeFixedBlock+0xe>
 8018ede:	4a03      	ldr	r2, [pc, #12]	; (8018eec <GUI_ALLOC_FreeFixedBlock+0x10>)
 8018ee0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8018ee2:	6003      	str	r3, [r0, #0]
 8018ee4:	b103      	cbz	r3, 8018ee8 <GUI_ALLOC_FreeFixedBlock+0xc>
 8018ee6:	6058      	str	r0, [r3, #4]
 8018ee8:	63d0      	str	r0, [r2, #60]	; 0x3c
 8018eea:	4770      	bx	lr
 8018eec:	2002c050 	.word	0x2002c050

08018ef0 <GUI_ALLOC_GetFixedBlock>:
 8018ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef4:	4d90      	ldr	r5, [pc, #576]	; (8019138 <GUI_ALLOC_GetFixedBlock+0x248>)
 8018ef6:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8018efa:	4604      	mov	r4, r0
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d031      	beq.n	8018f64 <GUI_ALLOC_GetFixedBlock+0x74>
 8018f00:	1ce6      	adds	r6, r4, #3
 8018f02:	f026 0603 	bic.w	r6, r6, #3
 8018f06:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8018f08:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8018f0a:	3604      	adds	r6, #4
 8018f0c:	429e      	cmp	r6, r3
 8018f0e:	bf38      	it	cc
 8018f10:	461e      	movcc	r6, r3
 8018f12:	b162      	cbz	r2, 8018f2e <GUI_ALLOC_GetFixedBlock+0x3e>
 8018f14:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8018f18:	429e      	cmp	r6, r3
 8018f1a:	4614      	mov	r4, r2
 8018f1c:	d104      	bne.n	8018f28 <GUI_ALLOC_GetFixedBlock+0x38>
 8018f1e:	e015      	b.n	8018f4c <GUI_ALLOC_GetFixedBlock+0x5c>
 8018f20:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018f24:	429e      	cmp	r6, r3
 8018f26:	d011      	beq.n	8018f4c <GUI_ALLOC_GetFixedBlock+0x5c>
 8018f28:	6824      	ldr	r4, [r4, #0]
 8018f2a:	2c00      	cmp	r4, #0
 8018f2c:	d1f8      	bne.n	8018f20 <GUI_ALLOC_GetFixedBlock+0x30>
 8018f2e:	68eb      	ldr	r3, [r5, #12]
 8018f30:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8018f32:	441c      	add	r4, r3
 8018f34:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8018f38:	1a61      	subs	r1, r4, r1
 8018f3a:	680b      	ldr	r3, [r1, #0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d172      	bne.n	8019026 <GUI_ALLOC_GetFixedBlock+0x136>
 8018f40:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8018f44:	4566      	cmp	r6, ip
 8018f46:	dd78      	ble.n	801903a <GUI_ALLOC_GetFixedBlock+0x14a>
 8018f48:	2400      	movs	r4, #0
 8018f4a:	e008      	b.n	8018f5e <GUI_ALLOC_GetFixedBlock+0x6e>
 8018f4c:	6823      	ldr	r3, [r4, #0]
 8018f4e:	b10b      	cbz	r3, 8018f54 <GUI_ALLOC_GetFixedBlock+0x64>
 8018f50:	6861      	ldr	r1, [r4, #4]
 8018f52:	6059      	str	r1, [r3, #4]
 8018f54:	6861      	ldr	r1, [r4, #4]
 8018f56:	b101      	cbz	r1, 8018f5a <GUI_ALLOC_GetFixedBlock+0x6a>
 8018f58:	600b      	str	r3, [r1, #0]
 8018f5a:	42a2      	cmp	r2, r4
 8018f5c:	d05e      	beq.n	801901c <GUI_ALLOC_GetFixedBlock+0x12c>
 8018f5e:	4620      	mov	r0, r4
 8018f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f64:	4b75      	ldr	r3, [pc, #468]	; (801913c <GUI_ALLOC_GetFixedBlock+0x24c>)
 8018f66:	689a      	ldr	r2, [r3, #8]
 8018f68:	6858      	ldr	r0, [r3, #4]
 8018f6a:	2101      	movs	r1, #1
 8018f6c:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
 8018f70:	b90a      	cbnz	r2, 8018f76 <GUI_ALLOC_GetFixedBlock+0x86>
 8018f72:	0882      	lsrs	r2, r0, #2
 8018f74:	609a      	str	r2, [r3, #8]
 8018f76:	6819      	ldr	r1, [r3, #0]
 8018f78:	63a9      	str	r1, [r5, #56]	; 0x38
 8018f7a:	f1a1 0314 	sub.w	r3, r1, #20
 8018f7e:	265a      	movs	r6, #90	; 0x5a
 8018f80:	4403      	add	r3, r0
 8018f82:	622e      	str	r6, [r5, #32]
 8018f84:	f04f 0b10 	mov.w	fp, #16
 8018f88:	f04f 0a20 	mov.w	sl, #32
 8018f8c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8018f90:	f04f 0880 	mov.w	r8, #128	; 0x80
 8018f94:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8018f98:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8018f9c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8018fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018fa4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8018fa8:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
 8018fac:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
 8018fb0:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
 8018fb4:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
 8018fb8:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
 8018fbc:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
 8018fc0:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8018fc4:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8018fc8:	672f      	str	r7, [r5, #112]	; 0x70
 8018fca:	67aa      	str	r2, [r5, #120]	; 0x78
 8018fcc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
 8018fd0:	2202      	movs	r2, #2
 8018fd2:	2601      	movs	r6, #1
 8018fd4:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8018fd8:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 8018fdc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8018fe0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8018fe4:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8018fe8:	636b      	str	r3, [r5, #52]	; 0x34
 8018fea:	f8c5 c0a8 	str.w	ip, [r5, #168]	; 0xa8
 8018fee:	f8c5 e0b0 	str.w	lr, [r5, #176]	; 0xb0
 8018ff2:	612a      	str	r2, [r5, #16]
 8018ff4:	60e8      	str	r0, [r5, #12]
 8018ff6:	f8c5 b088 	str.w	fp, [r5, #136]	; 0x88
 8018ffa:	f8c5 a090 	str.w	sl, [r5, #144]	; 0x90
 8018ffe:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
 8019002:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
 8019006:	f8c5 70b8 	str.w	r7, [r5, #184]	; 0xb8
 801900a:	605e      	str	r6, [r3, #4]
 801900c:	626e      	str	r6, [r5, #36]	; 0x24
 801900e:	606e      	str	r6, [r5, #4]
 8019010:	f7ff fa86 	bl	8018520 <_AddFreeMemory>
 8019014:	f7ff fef0 	bl	8018df8 <_EnlargeBlocks>
 8019018:	632e      	str	r6, [r5, #48]	; 0x30
 801901a:	e771      	b.n	8018f00 <GUI_ALLOC_GetFixedBlock+0x10>
 801901c:	6823      	ldr	r3, [r4, #0]
 801901e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019020:	4620      	mov	r0, r4
 8019022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019026:	2000      	movs	r0, #0
 8019028:	f7ff fc28 	bl	801887c <_RemoveHoles>
 801902c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8019030:	1a61      	subs	r1, r4, r1
 8019032:	680b      	ldr	r3, [r1, #0]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d187      	bne.n	8018f48 <GUI_ALLOC_GetFixedBlock+0x58>
 8019038:	e782      	b.n	8018f40 <GUI_ALLOC_GetFixedBlock+0x50>
 801903a:	f8d5 70b8 	ldr.w	r7, [r5, #184]	; 0xb8
 801903e:	4a3e      	ldr	r2, [pc, #248]	; (8019138 <GUI_ALLOC_GetFixedBlock+0x248>)
 8019040:	ebc6 000c 	rsb	r0, r6, ip
 8019044:	1d04      	adds	r4, r0, #4
 8019046:	45bc      	cmp	ip, r7
 8019048:	440c      	add	r4, r1
 801904a:	d259      	bcs.n	8019100 <GUI_ALLOC_GetFixedBlock+0x210>
 801904c:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 8019050:	45bc      	cmp	ip, r7
 8019052:	d259      	bcs.n	8019108 <GUI_ALLOC_GetFixedBlock+0x218>
 8019054:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 8019058:	45bc      	cmp	ip, r7
 801905a:	d253      	bcs.n	8019104 <GUI_ALLOC_GetFixedBlock+0x214>
 801905c:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8019060:	45bc      	cmp	ip, r7
 8019062:	d259      	bcs.n	8019118 <GUI_ALLOC_GetFixedBlock+0x228>
 8019064:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 8019068:	45bc      	cmp	ip, r7
 801906a:	d253      	bcs.n	8019114 <GUI_ALLOC_GetFixedBlock+0x224>
 801906c:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 8019070:	45bc      	cmp	ip, r7
 8019072:	d24d      	bcs.n	8019110 <GUI_ALLOC_GetFixedBlock+0x220>
 8019074:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8019078:	45bc      	cmp	ip, r7
 801907a:	d247      	bcs.n	801910c <GUI_ALLOC_GetFixedBlock+0x21c>
 801907c:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 8019080:	45bc      	cmp	ip, r7
 8019082:	d257      	bcs.n	8019134 <GUI_ALLOC_GetFixedBlock+0x244>
 8019084:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019086:	4594      	cmp	ip, r2
 8019088:	d252      	bcs.n	8019130 <GUI_ALLOC_GetFixedBlock+0x240>
 801908a:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 801908c:	4a2a      	ldr	r2, [pc, #168]	; (8019138 <GUI_ALLOC_GetFixedBlock+0x248>)
 801908e:	45bc      	cmp	ip, r7
 8019090:	d24c      	bcs.n	801912c <GUI_ALLOC_GetFixedBlock+0x23c>
 8019092:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8019094:	45bc      	cmp	ip, r7
 8019096:	d247      	bcs.n	8019128 <GUI_ALLOC_GetFixedBlock+0x238>
 8019098:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801909a:	45bc      	cmp	ip, r7
 801909c:	d242      	bcs.n	8019124 <GUI_ALLOC_GetFixedBlock+0x234>
 801909e:	6d97      	ldr	r7, [r2, #88]	; 0x58
 80190a0:	45bc      	cmp	ip, r7
 80190a2:	d23d      	bcs.n	8019120 <GUI_ALLOC_GetFixedBlock+0x230>
 80190a4:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80190a6:	45bc      	cmp	ip, r7
 80190a8:	d238      	bcs.n	801911c <GUI_ALLOC_GetFixedBlock+0x22c>
 80190aa:	6c97      	ldr	r7, [r2, #72]	; 0x48
 80190ac:	45bc      	cmp	ip, r7
 80190ae:	d20e      	bcs.n	80190ce <GUI_ALLOC_GetFixedBlock+0x1de>
 80190b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80190b2:	4594      	cmp	ip, r2
 80190b4:	bf28      	it	cs
 80190b6:	2200      	movcs	r2, #0
 80190b8:	d20a      	bcs.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 80190ba:	68ea      	ldr	r2, [r5, #12]
 80190bc:	696b      	ldr	r3, [r5, #20]
 80190be:	1b92      	subs	r2, r2, r6
 80190c0:	4433      	add	r3, r6
 80190c2:	60ea      	str	r2, [r5, #12]
 80190c4:	616b      	str	r3, [r5, #20]
 80190c6:	b9a0      	cbnz	r0, 80190f2 <GUI_ALLOC_GetFixedBlock+0x202>
 80190c8:	f844 6c04 	str.w	r6, [r4, #-4]
 80190cc:	e747      	b.n	8018f5e <GUI_ALLOC_GetFixedBlock+0x6e>
 80190ce:	2201      	movs	r2, #1
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	688f      	ldr	r7, [r1, #8]
 80190d4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80190d8:	ebcc 0c03 	rsb	ip, ip, r3
 80190dc:	f8c5 c000 	str.w	ip, [r5]
 80190e0:	b10f      	cbz	r7, 80190e6 <GUI_ALLOC_GetFixedBlock+0x1f6>
 80190e2:	f8c7 8004 	str.w	r8, [r7, #4]
 80190e6:	f1b8 0f00 	cmp.w	r8, #0
 80190ea:	d005      	beq.n	80190f8 <GUI_ALLOC_GetFixedBlock+0x208>
 80190ec:	f8c8 7000 	str.w	r7, [r8]
 80190f0:	e7e3      	b.n	80190ba <GUI_ALLOC_GetFixedBlock+0x1ca>
 80190f2:	f7ff fa15 	bl	8018520 <_AddFreeMemory>
 80190f6:	e7e7      	b.n	80190c8 <GUI_ALLOC_GetFixedBlock+0x1d8>
 80190f8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80190fc:	6457      	str	r7, [r2, #68]	; 0x44
 80190fe:	e7dc      	b.n	80190ba <GUI_ALLOC_GetFixedBlock+0x1ca>
 8019100:	220f      	movs	r2, #15
 8019102:	e7e5      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019104:	220d      	movs	r2, #13
 8019106:	e7e3      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019108:	220e      	movs	r2, #14
 801910a:	e7e1      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 801910c:	2209      	movs	r2, #9
 801910e:	e7df      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019110:	220a      	movs	r2, #10
 8019112:	e7dd      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019114:	220b      	movs	r2, #11
 8019116:	e7db      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019118:	220c      	movs	r2, #12
 801911a:	e7d9      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 801911c:	2202      	movs	r2, #2
 801911e:	e7d7      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019120:	2203      	movs	r2, #3
 8019122:	e7d5      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019124:	2204      	movs	r2, #4
 8019126:	e7d3      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019128:	2205      	movs	r2, #5
 801912a:	e7d1      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 801912c:	2206      	movs	r2, #6
 801912e:	e7cf      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019130:	2207      	movs	r2, #7
 8019132:	e7cd      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019134:	2208      	movs	r2, #8
 8019136:	e7cb      	b.n	80190d0 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8019138:	2002c050 	.word	0x2002c050
 801913c:	2002b010 	.word	0x2002b010

08019140 <GUI_ALLOC_AllocNoInit>:
 8019140:	b510      	push	{r4, lr}
 8019142:	4604      	mov	r4, r0
 8019144:	b900      	cbnz	r0, 8019148 <GUI_ALLOC_AllocNoInit+0x8>
 8019146:	bd10      	pop	{r4, pc}
 8019148:	f7fd fc92 	bl	8016a70 <GUI_Lock>
 801914c:	4620      	mov	r0, r4
 801914e:	f7ff fc83 	bl	8018a58 <_Alloc>
 8019152:	4604      	mov	r4, r0
 8019154:	f7fd fc82 	bl	8016a5c <GUI_Unlock>
 8019158:	4620      	mov	r0, r4
 801915a:	bd10      	pop	{r4, pc}

0801915c <GUI_ALLOC_h2p>:
 801915c:	4b03      	ldr	r3, [pc, #12]	; (801916c <GUI_ALLOC_h2p+0x10>)
 801915e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019160:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019164:	6840      	ldr	r0, [r0, #4]
 8019166:	3008      	adds	r0, #8
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop
 801916c:	2002c050 	.word	0x2002c050

08019170 <GUI_ALLOC_LockH>:
 8019170:	4a07      	ldr	r2, [pc, #28]	; (8019190 <GUI_ALLOC_LockH+0x20>)
 8019172:	69d1      	ldr	r1, [r2, #28]
 8019174:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019176:	3101      	adds	r1, #1
 8019178:	61d1      	str	r1, [r2, #28]
 801917a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 801917e:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8019182:	6852      	ldr	r2, [r2, #4]
 8019184:	3101      	adds	r1, #1
 8019186:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 801918a:	f102 0008 	add.w	r0, r2, #8
 801918e:	4770      	bx	lr
 8019190:	2002c050 	.word	0x2002c050

08019194 <GUI_ALLOC_UnlockH>:
 8019194:	b430      	push	{r4, r5}
 8019196:	4602      	mov	r2, r0
 8019198:	4b0a      	ldr	r3, [pc, #40]	; (80191c4 <GUI_ALLOC_UnlockH+0x30>)
 801919a:	6800      	ldr	r0, [r0, #0]
 801919c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801919e:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80191a2:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
 80191a6:	2c01      	cmp	r4, #1
 80191a8:	d903      	bls.n	80191b2 <GUI_ALLOC_UnlockH+0x1e>
 80191aa:	69dd      	ldr	r5, [r3, #28]
 80191ac:	b10d      	cbz	r5, 80191b2 <GUI_ALLOC_UnlockH+0x1e>
 80191ae:	3d01      	subs	r5, #1
 80191b0:	61dd      	str	r5, [r3, #28]
 80191b2:	3c01      	subs	r4, #1
 80191b4:	f801 4030 	strb.w	r4, [r1, r0, lsl #3]
 80191b8:	2300      	movs	r3, #0
 80191ba:	4618      	mov	r0, r3
 80191bc:	6013      	str	r3, [r2, #0]
 80191be:	bc30      	pop	{r4, r5}
 80191c0:	4770      	bx	lr
 80191c2:	bf00      	nop
 80191c4:	2002c050 	.word	0x2002c050

080191c8 <GUI_ALLOC_RequestSize>:
 80191c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191cc:	4c5c      	ldr	r4, [pc, #368]	; (8019340 <GUI_ALLOC_RequestSize+0x178>)
 80191ce:	f7fd fc4f 	bl	8016a70 <GUI_Lock>
 80191d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d04f      	beq.n	801927a <GUI_ALLOC_RequestSize+0xb2>
 80191da:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80191de:	4a58      	ldr	r2, [pc, #352]	; (8019340 <GUI_ALLOC_RequestSize+0x178>)
 80191e0:	bb63      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 80191e2:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 80191e6:	bb4b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 80191e8:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80191ec:	bb33      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 80191ee:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80191f2:	bb1b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 80191f4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80191f8:	bb03      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 80191fa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80191fe:	b9eb      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019200:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8019204:	b9d3      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019206:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801920a:	b9bb      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 801920c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 801920e:	b9ab      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019210:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8019212:	b99b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019214:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019216:	b98b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019218:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801921a:	b97b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 801921c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801921e:	b96b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019220:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8019222:	b95b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019224:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019226:	b94b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 8019228:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801922a:	b93b      	cbnz	r3, 801923c <GUI_ALLOC_RequestSize+0x74>
 801922c:	6a24      	ldr	r4, [r4, #32]
 801922e:	fb04 f403 	mul.w	r4, r4, r3
 8019232:	f7fd fc13 	bl	8016a5c <GUI_Unlock>
 8019236:	4620      	mov	r0, r4
 8019238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923c:	689b      	ldr	r3, [r3, #8]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d0f4      	beq.n	801922c <GUI_ALLOC_RequestSize+0x64>
 8019242:	2100      	movs	r1, #0
 8019244:	e001      	b.n	801924a <GUI_ALLOC_RequestSize+0x82>
 8019246:	689b      	ldr	r3, [r3, #8]
 8019248:	b13b      	cbz	r3, 801925a <GUI_ALLOC_RequestSize+0x92>
 801924a:	685a      	ldr	r2, [r3, #4]
 801924c:	689b      	ldr	r3, [r3, #8]
 801924e:	4291      	cmp	r1, r2
 8019250:	bf34      	ite	cc
 8019252:	4611      	movcc	r1, r2
 8019254:	460a      	movcs	r2, r1
 8019256:	2b00      	cmp	r3, #0
 8019258:	d1f5      	bne.n	8019246 <GUI_ALLOC_RequestSize+0x7e>
 801925a:	3a0c      	subs	r2, #12
 801925c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8019260:	d867      	bhi.n	8019332 <GUI_ALLOC_RequestSize+0x16a>
 8019262:	6a24      	ldr	r4, [r4, #32]
 8019264:	4b37      	ldr	r3, [pc, #220]	; (8019344 <GUI_ALLOC_RequestSize+0x17c>)
 8019266:	fb04 f202 	mul.w	r2, r4, r2
 801926a:	fba3 1402 	umull	r1, r4, r3, r2
 801926e:	0964      	lsrs	r4, r4, #5
 8019270:	f7fd fbf4 	bl	8016a5c <GUI_Unlock>
 8019274:	4620      	mov	r0, r4
 8019276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801927a:	4b33      	ldr	r3, [pc, #204]	; (8019348 <GUI_ALLOC_RequestSize+0x180>)
 801927c:	689a      	ldr	r2, [r3, #8]
 801927e:	6858      	ldr	r0, [r3, #4]
 8019280:	2101      	movs	r1, #1
 8019282:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8019286:	b90a      	cbnz	r2, 801928c <GUI_ALLOC_RequestSize+0xc4>
 8019288:	0882      	lsrs	r2, r0, #2
 801928a:	609a      	str	r2, [r3, #8]
 801928c:	6819      	ldr	r1, [r3, #0]
 801928e:	63a1      	str	r1, [r4, #56]	; 0x38
 8019290:	f1a1 0314 	sub.w	r3, r1, #20
 8019294:	4403      	add	r3, r0
 8019296:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
 801929a:	f04f 0910 	mov.w	r9, #16
 801929e:	f04f 0820 	mov.w	r8, #32
 80192a2:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80192a6:	f04f 0e80 	mov.w	lr, #128	; 0x80
 80192aa:	f44f 7780 	mov.w	r7, #256	; 0x100
 80192ae:	f44f 7600 	mov.w	r6, #512	; 0x200
 80192b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80192b6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80192ba:	f8c4 a020 	str.w	sl, [r4, #32]
 80192be:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 80192c2:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80192c6:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
 80192ca:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 80192ce:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80192d2:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
 80192d6:	6627      	str	r7, [r4, #96]	; 0x60
 80192d8:	66a6      	str	r6, [r4, #104]	; 0x68
 80192da:	6722      	str	r2, [r4, #112]	; 0x70
 80192dc:	67a5      	str	r5, [r4, #120]	; 0x78
 80192de:	2202      	movs	r2, #2
 80192e0:	2501      	movs	r5, #1
 80192e2:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80192e6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 80192ea:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80192ee:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 80192f2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80192f6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80192fa:	6363      	str	r3, [r4, #52]	; 0x34
 80192fc:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
 8019300:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
 8019304:	6122      	str	r2, [r4, #16]
 8019306:	60e0      	str	r0, [r4, #12]
 8019308:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 801930c:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 8019310:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
 8019314:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
 8019318:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 801931c:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8019320:	605d      	str	r5, [r3, #4]
 8019322:	6265      	str	r5, [r4, #36]	; 0x24
 8019324:	6065      	str	r5, [r4, #4]
 8019326:	f7ff f8fb 	bl	8018520 <_AddFreeMemory>
 801932a:	f7ff fd65 	bl	8018df8 <_EnlargeBlocks>
 801932e:	6325      	str	r5, [r4, #48]	; 0x30
 8019330:	e753      	b.n	80191da <GUI_ALLOC_RequestSize+0x12>
 8019332:	4904      	ldr	r1, [pc, #16]	; (8019344 <GUI_ALLOC_RequestSize+0x17c>)
 8019334:	17d3      	asrs	r3, r2, #31
 8019336:	fb81 0202 	smull	r0, r2, r1, r2
 801933a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801933e:	e775      	b.n	801922c <GUI_ALLOC_RequestSize+0x64>
 8019340:	2002c050 	.word	0x2002c050
 8019344:	51eb851f 	.word	0x51eb851f
 8019348:	2002b010 	.word	0x2002b010

0801934c <GUI_ALLOC_Lock>:
 801934c:	4b02      	ldr	r3, [pc, #8]	; (8019358 <GUI_ALLOC_Lock+0xc>)
 801934e:	699a      	ldr	r2, [r3, #24]
 8019350:	3201      	adds	r2, #1
 8019352:	619a      	str	r2, [r3, #24]
 8019354:	4770      	bx	lr
 8019356:	bf00      	nop
 8019358:	2002c050 	.word	0x2002c050

0801935c <GUI_ALLOC_Unlock>:
 801935c:	4b02      	ldr	r3, [pc, #8]	; (8019368 <GUI_ALLOC_Unlock+0xc>)
 801935e:	699a      	ldr	r2, [r3, #24]
 8019360:	3a01      	subs	r2, #1
 8019362:	619a      	str	r2, [r3, #24]
 8019364:	4770      	bx	lr
 8019366:	bf00      	nop
 8019368:	2002c050 	.word	0x2002c050

0801936c <GUI_ALLOC_AssignMemory>:
 801936c:	4b02      	ldr	r3, [pc, #8]	; (8019378 <GUI_ALLOC_AssignMemory+0xc>)
 801936e:	f021 0103 	bic.w	r1, r1, #3
 8019372:	e883 0003 	stmia.w	r3, {r0, r1}
 8019376:	4770      	bx	lr
 8019378:	2002b010 	.word	0x2002b010

0801937c <GUI_ALLOC_GetSize>:
 801937c:	b130      	cbz	r0, 801938c <GUI_ALLOC_GetSize+0x10>
 801937e:	4b04      	ldr	r3, [pc, #16]	; (8019390 <GUI_ALLOC_GetSize+0x14>)
 8019380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019382:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019386:	6843      	ldr	r3, [r0, #4]
 8019388:	6858      	ldr	r0, [r3, #4]
 801938a:	380c      	subs	r0, #12
 801938c:	4770      	bx	lr
 801938e:	bf00      	nop
 8019390:	2002c050 	.word	0x2002c050

08019394 <GUI_ALLOC_Free>:
 8019394:	b570      	push	{r4, r5, r6, lr}
 8019396:	4604      	mov	r4, r0
 8019398:	b900      	cbnz	r0, 801939c <GUI_ALLOC_Free+0x8>
 801939a:	bd70      	pop	{r4, r5, r6, pc}
 801939c:	4d0c      	ldr	r5, [pc, #48]	; (80193d0 <GUI_ALLOC_Free+0x3c>)
 801939e:	f7fd fb67 	bl	8016a70 <GUI_Lock>
 80193a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80193a4:	00e6      	lsls	r6, r4, #3
 80193a6:	4433      	add	r3, r6
 80193a8:	6859      	ldr	r1, [r3, #4]
 80193aa:	6848      	ldr	r0, [r1, #4]
 80193ac:	f7ff f8b8 	bl	8018520 <_AddFreeMemory>
 80193b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80193b2:	6869      	ldr	r1, [r5, #4]
 80193b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80193b6:	441e      	add	r6, r3
 80193b8:	3101      	adds	r1, #1
 80193ba:	2000      	movs	r0, #0
 80193bc:	6069      	str	r1, [r5, #4]
 80193be:	6072      	str	r2, [r6, #4]
 80193c0:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 80193c4:	626c      	str	r4, [r5, #36]	; 0x24
 80193c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193ca:	f7fd bb47 	b.w	8016a5c <GUI_Unlock>
 80193ce:	bf00      	nop
 80193d0:	2002c050 	.word	0x2002c050

080193d4 <GUI_ALLOC_FreePtr>:
 80193d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d6:	4605      	mov	r5, r0
 80193d8:	f7fd fb4a 	bl	8016a70 <GUI_Lock>
 80193dc:	682c      	ldr	r4, [r5, #0]
 80193de:	b1b4      	cbz	r4, 801940e <GUI_ALLOC_FreePtr+0x3a>
 80193e0:	4e0e      	ldr	r6, [pc, #56]	; (801941c <GUI_ALLOC_FreePtr+0x48>)
 80193e2:	f7fd fb45 	bl	8016a70 <GUI_Lock>
 80193e6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80193e8:	00e7      	lsls	r7, r4, #3
 80193ea:	443b      	add	r3, r7
 80193ec:	6859      	ldr	r1, [r3, #4]
 80193ee:	6848      	ldr	r0, [r1, #4]
 80193f0:	f7ff f896 	bl	8018520 <_AddFreeMemory>
 80193f4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80193f6:	6871      	ldr	r1, [r6, #4]
 80193f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80193fa:	441f      	add	r7, r3
 80193fc:	3101      	adds	r1, #1
 80193fe:	2000      	movs	r0, #0
 8019400:	6071      	str	r1, [r6, #4]
 8019402:	607a      	str	r2, [r7, #4]
 8019404:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 8019408:	6274      	str	r4, [r6, #36]	; 0x24
 801940a:	f7fd fb27 	bl	8016a5c <GUI_Unlock>
 801940e:	2300      	movs	r3, #0
 8019410:	602b      	str	r3, [r5, #0]
 8019412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019416:	f7fd bb21 	b.w	8016a5c <GUI_Unlock>
 801941a:	bf00      	nop
 801941c:	2002c050 	.word	0x2002c050

08019420 <GUI_ALLOC_FreePtrArray>:
 8019420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019424:	f1b1 0a00 	subs.w	sl, r1, #0
 8019428:	dd26      	ble.n	8019478 <GUI_ALLOC_FreePtrArray+0x58>
 801942a:	2400      	movs	r4, #0
 801942c:	4f13      	ldr	r7, [pc, #76]	; (801947c <GUI_ALLOC_FreePtrArray+0x5c>)
 801942e:	4606      	mov	r6, r0
 8019430:	46a0      	mov	r8, r4
 8019432:	f7fd fb1d 	bl	8016a70 <GUI_Lock>
 8019436:	f856 5b04 	ldr.w	r5, [r6], #4
 801943a:	3401      	adds	r4, #1
 801943c:	b1b5      	cbz	r5, 801946c <GUI_ALLOC_FreePtrArray+0x4c>
 801943e:	f7fd fb17 	bl	8016a70 <GUI_Lock>
 8019442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019444:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8019448:	444b      	add	r3, r9
 801944a:	6859      	ldr	r1, [r3, #4]
 801944c:	6848      	ldr	r0, [r1, #4]
 801944e:	f7ff f867 	bl	8018520 <_AddFreeMemory>
 8019452:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019454:	687a      	ldr	r2, [r7, #4]
 8019456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019458:	4489      	add	r9, r1
 801945a:	3201      	adds	r2, #1
 801945c:	607a      	str	r2, [r7, #4]
 801945e:	f8c9 3004 	str.w	r3, [r9, #4]
 8019462:	f801 8035 	strb.w	r8, [r1, r5, lsl #3]
 8019466:	627d      	str	r5, [r7, #36]	; 0x24
 8019468:	f7fd faf8 	bl	8016a5c <GUI_Unlock>
 801946c:	f846 8c04 	str.w	r8, [r6, #-4]
 8019470:	f7fd faf4 	bl	8016a5c <GUI_Unlock>
 8019474:	4554      	cmp	r4, sl
 8019476:	d1dc      	bne.n	8019432 <GUI_ALLOC_FreePtrArray+0x12>
 8019478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801947c:	2002c050 	.word	0x2002c050

08019480 <GUI_ALLOC_AllocZero>:
 8019480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019482:	4604      	mov	r4, r0
 8019484:	f7fd faf4 	bl	8016a70 <GUI_Lock>
 8019488:	b91c      	cbnz	r4, 8019492 <GUI_ALLOC_AllocZero+0x12>
 801948a:	f7fd fae7 	bl	8016a5c <GUI_Unlock>
 801948e:	4620      	mov	r0, r4
 8019490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019492:	f7fd faed 	bl	8016a70 <GUI_Lock>
 8019496:	4620      	mov	r0, r4
 8019498:	f7ff fade 	bl	8018a58 <_Alloc>
 801949c:	4606      	mov	r6, r0
 801949e:	f7fd fadd 	bl	8016a5c <GUI_Unlock>
 80194a2:	b32e      	cbz	r6, 80194f0 <GUI_ALLOC_AllocZero+0x70>
 80194a4:	4d13      	ldr	r5, [pc, #76]	; (80194f4 <GUI_ALLOC_AllocZero+0x74>)
 80194a6:	4914      	ldr	r1, [pc, #80]	; (80194f8 <GUI_ALLOC_AllocZero+0x78>)
 80194a8:	69ea      	ldr	r2, [r5, #28]
 80194aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80194ac:	3201      	adds	r2, #1
 80194ae:	61ea      	str	r2, [r5, #28]
 80194b0:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 80194b4:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
 80194b8:	3001      	adds	r0, #1
 80194ba:	6857      	ldr	r7, [r2, #4]
 80194bc:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 80194c0:	4622      	mov	r2, r4
 80194c2:	680b      	ldr	r3, [r1, #0]
 80194c4:	f107 0008 	add.w	r0, r7, #8
 80194c8:	2100      	movs	r1, #0
 80194ca:	4798      	blx	r3
 80194cc:	683a      	ldr	r2, [r7, #0]
 80194ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80194d0:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 80194d4:	2901      	cmp	r1, #1
 80194d6:	d903      	bls.n	80194e0 <GUI_ALLOC_AllocZero+0x60>
 80194d8:	69e8      	ldr	r0, [r5, #28]
 80194da:	b108      	cbz	r0, 80194e0 <GUI_ALLOC_AllocZero+0x60>
 80194dc:	3801      	subs	r0, #1
 80194de:	61e8      	str	r0, [r5, #28]
 80194e0:	3901      	subs	r1, #1
 80194e2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 80194e6:	4634      	mov	r4, r6
 80194e8:	f7fd fab8 	bl	8016a5c <GUI_Unlock>
 80194ec:	4620      	mov	r0, r4
 80194ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194f0:	4634      	mov	r4, r6
 80194f2:	e7ca      	b.n	801948a <GUI_ALLOC_AllocZero+0xa>
 80194f4:	2002c050 	.word	0x2002c050
 80194f8:	20000240 	.word	0x20000240

080194fc <GUI_ALLOC_Realloc>:
 80194fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019500:	460d      	mov	r5, r1
 8019502:	4606      	mov	r6, r0
 8019504:	b911      	cbnz	r1, 801950c <GUI_ALLOC_Realloc+0x10>
 8019506:	4608      	mov	r0, r1
 8019508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801950c:	f7fd fab0 	bl	8016a70 <GUI_Lock>
 8019510:	4628      	mov	r0, r5
 8019512:	f7ff faa1 	bl	8018a58 <_Alloc>
 8019516:	4607      	mov	r7, r0
 8019518:	f7fd faa0 	bl	8016a5c <GUI_Unlock>
 801951c:	2f00      	cmp	r7, #0
 801951e:	d062      	beq.n	80195e6 <GUI_ALLOC_Realloc+0xea>
 8019520:	2e00      	cmp	r6, #0
 8019522:	d060      	beq.n	80195e6 <GUI_ALLOC_Realloc+0xea>
 8019524:	4c31      	ldr	r4, [pc, #196]	; (80195ec <GUI_ALLOC_Realloc+0xf0>)
 8019526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019528:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 801952c:	4443      	add	r3, r8
 801952e:	685b      	ldr	r3, [r3, #4]
 8019530:	685b      	ldr	r3, [r3, #4]
 8019532:	f1a3 0a0c 	sub.w	sl, r3, #12
 8019536:	f7fd fa9b 	bl	8016a70 <GUI_Lock>
 801953a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801953c:	69e1      	ldr	r1, [r4, #28]
 801953e:	4a2c      	ldr	r2, [pc, #176]	; (80195f0 <GUI_ALLOC_Realloc+0xf4>)
 8019540:	4555      	cmp	r5, sl
 8019542:	bfb8      	it	lt
 8019544:	46aa      	movlt	sl, r5
 8019546:	f813 5037 	ldrb.w	r5, [r3, r7, lsl #3]
 801954a:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 801954e:	3501      	adds	r5, #1
 8019550:	f803 5037 	strb.w	r5, [r3, r7, lsl #3]
 8019554:	3102      	adds	r1, #2
 8019556:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801955a:	61e1      	str	r1, [r4, #28]
 801955c:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 8019560:	eb03 0108 	add.w	r1, r3, r8
 8019564:	3001      	adds	r0, #1
 8019566:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 801956a:	684d      	ldr	r5, [r1, #4]
 801956c:	6813      	ldr	r3, [r2, #0]
 801956e:	f105 0108 	add.w	r1, r5, #8
 8019572:	4652      	mov	r2, sl
 8019574:	f109 0008 	add.w	r0, r9, #8
 8019578:	4798      	blx	r3
 801957a:	f8d9 1000 	ldr.w	r1, [r9]
 801957e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019580:	f813 0031 	ldrb.w	r0, [r3, r1, lsl #3]
 8019584:	2801      	cmp	r0, #1
 8019586:	d903      	bls.n	8019590 <GUI_ALLOC_Realloc+0x94>
 8019588:	69e2      	ldr	r2, [r4, #28]
 801958a:	b10a      	cbz	r2, 8019590 <GUI_ALLOC_Realloc+0x94>
 801958c:	3a01      	subs	r2, #1
 801958e:	61e2      	str	r2, [r4, #28]
 8019590:	1e42      	subs	r2, r0, #1
 8019592:	f803 2031 	strb.w	r2, [r3, r1, lsl #3]
 8019596:	682a      	ldr	r2, [r5, #0]
 8019598:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 801959c:	2901      	cmp	r1, #1
 801959e:	d904      	bls.n	80195aa <GUI_ALLOC_Realloc+0xae>
 80195a0:	69e0      	ldr	r0, [r4, #28]
 80195a2:	4d12      	ldr	r5, [pc, #72]	; (80195ec <GUI_ALLOC_Realloc+0xf0>)
 80195a4:	b108      	cbz	r0, 80195aa <GUI_ALLOC_Realloc+0xae>
 80195a6:	3801      	subs	r0, #1
 80195a8:	61e8      	str	r0, [r5, #28]
 80195aa:	3901      	subs	r1, #1
 80195ac:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 80195b0:	f7fd fa5e 	bl	8016a70 <GUI_Lock>
 80195b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195b6:	4443      	add	r3, r8
 80195b8:	6859      	ldr	r1, [r3, #4]
 80195ba:	6848      	ldr	r0, [r1, #4]
 80195bc:	f7fe ffb0 	bl	8018520 <_AddFreeMemory>
 80195c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195c2:	6861      	ldr	r1, [r4, #4]
 80195c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80195c6:	4498      	add	r8, r3
 80195c8:	3101      	adds	r1, #1
 80195ca:	2000      	movs	r0, #0
 80195cc:	6061      	str	r1, [r4, #4]
 80195ce:	f8c8 2004 	str.w	r2, [r8, #4]
 80195d2:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 80195d6:	6266      	str	r6, [r4, #36]	; 0x24
 80195d8:	f7fd fa40 	bl	8016a5c <GUI_Unlock>
 80195dc:	f7fd fa3e 	bl	8016a5c <GUI_Unlock>
 80195e0:	4638      	mov	r0, r7
 80195e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195e6:	4638      	mov	r0, r7
 80195e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ec:	2002c050 	.word	0x2002c050
 80195f0:	20000244 	.word	0x20000244

080195f4 <GUI_DrawRect>:
 80195f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f8:	b082      	sub	sp, #8
 80195fa:	4604      	mov	r4, r0
 80195fc:	4689      	mov	r9, r1
 80195fe:	4692      	mov	sl, r2
 8019600:	4698      	mov	r8, r3
 8019602:	f7fd fa35 	bl	8016a70 <GUI_Lock>
 8019606:	4b1e      	ldr	r3, [pc, #120]	; (8019680 <GUI_DrawRect+0x8c>)
 8019608:	681f      	ldr	r7, [r3, #0]
 801960a:	7e3e      	ldrb	r6, [r7, #24]
 801960c:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801960e:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 8019610:	3e01      	subs	r6, #1
 8019612:	b2b6      	uxth	r6, r6
 8019614:	442c      	add	r4, r5
 8019616:	44b9      	add	r9, r7
 8019618:	4455      	add	r5, sl
 801961a:	44b8      	add	r8, r7
 801961c:	1ba1      	subs	r1, r4, r6
 801961e:	1972      	adds	r2, r6, r5
 8019620:	ebc6 0309 	rsb	r3, r6, r9
 8019624:	4668      	mov	r0, sp
 8019626:	4446      	add	r6, r8
 8019628:	f8ad 1000 	strh.w	r1, [sp]
 801962c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019630:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019634:	f8ad 6006 	strh.w	r6, [sp, #6]
 8019638:	f7f8 fcfa 	bl	8012030 <WM__InitIVRSearch>
 801963c:	b1d8      	cbz	r0, 8019676 <GUI_DrawRect+0x82>
 801963e:	f109 0701 	add.w	r7, r9, #1
 8019642:	f108 36ff 	add.w	r6, r8, #4294967295
 8019646:	4620      	mov	r0, r4
 8019648:	4649      	mov	r1, r9
 801964a:	462a      	mov	r2, r5
 801964c:	f7fb fd8a 	bl	8015164 <LCD_DrawHLine>
 8019650:	4620      	mov	r0, r4
 8019652:	4641      	mov	r1, r8
 8019654:	462a      	mov	r2, r5
 8019656:	f7fb fd85 	bl	8015164 <LCD_DrawHLine>
 801965a:	4620      	mov	r0, r4
 801965c:	4639      	mov	r1, r7
 801965e:	4632      	mov	r2, r6
 8019660:	f7fb fda6 	bl	80151b0 <LCD_DrawVLine>
 8019664:	4628      	mov	r0, r5
 8019666:	4639      	mov	r1, r7
 8019668:	4632      	mov	r2, r6
 801966a:	f7fb fda1 	bl	80151b0 <LCD_DrawVLine>
 801966e:	f7f8 fbb9 	bl	8011de4 <WM__GetNextIVR>
 8019672:	2800      	cmp	r0, #0
 8019674:	d1e7      	bne.n	8019646 <GUI_DrawRect+0x52>
 8019676:	f7fd f9f1 	bl	8016a5c <GUI_Unlock>
 801967a:	b002      	add	sp, #8
 801967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019680:	2000026c 	.word	0x2000026c

08019684 <LCD_Index2Color_M888>:
 8019684:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019688:	4770      	bx	lr
 801968a:	bf00      	nop

0801968c <LCD_Index2Color_M8888I>:
 801968c:	4770      	bx	lr
 801968e:	bf00      	nop

08019690 <_Index2Color_M8888>:
 8019690:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8019694:	4770      	bx	lr
 8019696:	bf00      	nop

08019698 <_Color2Index_M8888>:
 8019698:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 801969c:	4770      	bx	lr
 801969e:	bf00      	nop

080196a0 <_GetIndexMask_M8888>:
 80196a0:	f04f 30ff 	mov.w	r0, #4294967295
 80196a4:	4770      	bx	lr
 80196a6:	bf00      	nop

080196a8 <_Color2IndexBulk>:
 80196a8:	b410      	push	{r4}
 80196aa:	f850 4b04 	ldr.w	r4, [r0], #4
 80196ae:	3a01      	subs	r2, #1
 80196b0:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80196b4:	600c      	str	r4, [r1, #0]
 80196b6:	4419      	add	r1, r3
 80196b8:	d1f7      	bne.n	80196aa <_Color2IndexBulk+0x2>
 80196ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196be:	4770      	bx	lr

080196c0 <_Index2ColorBulk>:
 80196c0:	b410      	push	{r4}
 80196c2:	6804      	ldr	r4, [r0, #0]
 80196c4:	3a01      	subs	r2, #1
 80196c6:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80196ca:	f841 4b04 	str.w	r4, [r1], #4
 80196ce:	4418      	add	r0, r3
 80196d0:	d1f7      	bne.n	80196c2 <_Index2ColorBulk+0x2>
 80196d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196d6:	4770      	bx	lr

080196d8 <_Color2Index_M888>:
 80196d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80196dc:	4770      	bx	lr
 80196de:	bf00      	nop

080196e0 <_GetIndexMask_M888>:
 80196e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80196e4:	4770      	bx	lr
 80196e6:	bf00      	nop

080196e8 <_Color2IndexBulk>:
 80196e8:	b410      	push	{r4}
 80196ea:	f850 4b04 	ldr.w	r4, [r0], #4
 80196ee:	3a01      	subs	r2, #1
 80196f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80196f4:	600c      	str	r4, [r1, #0]
 80196f6:	4419      	add	r1, r3
 80196f8:	d1f7      	bne.n	80196ea <_Color2IndexBulk+0x2>
 80196fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196fe:	4770      	bx	lr

08019700 <_Index2ColorBulk>:
 8019700:	b410      	push	{r4}
 8019702:	6804      	ldr	r4, [r0, #0]
 8019704:	3a01      	subs	r2, #1
 8019706:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801970a:	f841 4b04 	str.w	r4, [r1], #4
 801970e:	4418      	add	r0, r3
 8019710:	d1f7      	bne.n	8019702 <_Index2ColorBulk+0x2>
 8019712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019716:	4770      	bx	lr

08019718 <GUICC_M888_SetCustColorConv>:
 8019718:	4770      	bx	lr
 801971a:	bf00      	nop

0801971c <LCD_Index2Color_M565>:
 801971c:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8019720:	4b09      	ldr	r3, [pc, #36]	; (8019748 <LCD_Index2Color_M565+0x2c>)
 8019722:	b410      	push	{r4}
 8019724:	5c99      	ldrb	r1, [r3, r2]
 8019726:	4c09      	ldr	r4, [pc, #36]	; (801974c <LCD_Index2Color_M565+0x30>)
 8019728:	f3c0 1245 	ubfx	r2, r0, #5, #6
 801972c:	f000 001f 	and.w	r0, r0, #31
 8019730:	5ca2      	ldrb	r2, [r4, r2]
 8019732:	5c1b      	ldrb	r3, [r3, r0]
 8019734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019738:	0408      	lsls	r0, r1, #16
 801973a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 801973e:	4418      	add	r0, r3
 8019740:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019744:	4770      	bx	lr
 8019746:	bf00      	nop
 8019748:	08022314 	.word	0x08022314
 801974c:	08022334 	.word	0x08022334

08019750 <_Color2Index_M565>:
 8019750:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8019754:	4b07      	ldr	r3, [pc, #28]	; (8019774 <_Color2Index_M565+0x24>)
 8019756:	b410      	push	{r4}
 8019758:	5c99      	ldrb	r1, [r3, r2]
 801975a:	4c07      	ldr	r4, [pc, #28]	; (8019778 <_Color2Index_M565+0x28>)
 801975c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8019760:	b2c0      	uxtb	r0, r0
 8019762:	5ca2      	ldrb	r2, [r4, r2]
 8019764:	5c1b      	ldrb	r3, [r3, r0]
 8019766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801976a:	02c8      	lsls	r0, r1, #11
 801976c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019770:	4418      	add	r0, r3
 8019772:	4770      	bx	lr
 8019774:	08022214 	.word	0x08022214
 8019778:	08022374 	.word	0x08022374

0801977c <_GetIndexMask_M565>:
 801977c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019780:	4770      	bx	lr
 8019782:	bf00      	nop

08019784 <_Color2IndexBulk>:
 8019784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019788:	4c10      	ldr	r4, [pc, #64]	; (80197cc <_Color2IndexBulk+0x48>)
 801978a:	6824      	ldr	r4, [r4, #0]
 801978c:	4607      	mov	r7, r0
 801978e:	460d      	mov	r5, r1
 8019790:	4616      	mov	r6, r2
 8019792:	469c      	mov	ip, r3
 8019794:	b114      	cbz	r4, 801979c <_Color2IndexBulk+0x18>
 8019796:	47a0      	blx	r4
 8019798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801979c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80197d4 <_Color2IndexBulk+0x50>
 80197a0:	4a0b      	ldr	r2, [pc, #44]	; (80197d0 <_Color2IndexBulk+0x4c>)
 80197a2:	f857 4b04 	ldr.w	r4, [r7], #4
 80197a6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80197aa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80197ae:	5c51      	ldrb	r1, [r2, r1]
 80197b0:	f818 3003 	ldrb.w	r3, [r8, r3]
 80197b4:	b2e4      	uxtb	r4, r4
 80197b6:	02c9      	lsls	r1, r1, #11
 80197b8:	5d10      	ldrb	r0, [r2, r4]
 80197ba:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 80197be:	4401      	add	r1, r0
 80197c0:	3e01      	subs	r6, #1
 80197c2:	8029      	strh	r1, [r5, #0]
 80197c4:	4465      	add	r5, ip
 80197c6:	d1ec      	bne.n	80197a2 <_Color2IndexBulk+0x1e>
 80197c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197cc:	2002b020 	.word	0x2002b020
 80197d0:	08022214 	.word	0x08022214
 80197d4:	08022374 	.word	0x08022374

080197d8 <_Index2ColorBulk>:
 80197d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197dc:	4c16      	ldr	r4, [pc, #88]	; (8019838 <_Index2ColorBulk+0x60>)
 80197de:	6824      	ldr	r4, [r4, #0]
 80197e0:	461e      	mov	r6, r3
 80197e2:	b114      	cbz	r4, 80197ea <_Index2ColorBulk+0x12>
 80197e4:	47a0      	blx	r4
 80197e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ea:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80197ee:	3b01      	subs	r3, #1
 80197f0:	3a01      	subs	r2, #1
 80197f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80197f6:	4d11      	ldr	r5, [pc, #68]	; (801983c <_Index2ColorBulk+0x64>)
 80197f8:	f8df c044 	ldr.w	ip, [pc, #68]	; 8019840 <_Index2ColorBulk+0x68>
 80197fc:	fb06 0002 	mla	r0, r6, r2, r0
 8019800:	4273      	negs	r3, r6
 8019802:	e000      	b.n	8019806 <_Index2ColorBulk+0x2e>
 8019804:	3a01      	subs	r2, #1
 8019806:	8804      	ldrh	r4, [r0, #0]
 8019808:	f004 071f 	and.w	r7, r4, #31
 801980c:	ea4f 28d4 	mov.w	r8, r4, lsr #11
 8019810:	f3c4 1645 	ubfx	r6, r4, #5, #6
 8019814:	5def      	ldrb	r7, [r5, r7]
 8019816:	f815 4008 	ldrb.w	r4, [r5, r8]
 801981a:	f81c 6006 	ldrb.w	r6, [ip, r6]
 801981e:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8019822:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8019826:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801982a:	4418      	add	r0, r3
 801982c:	f841 4904 	str.w	r4, [r1], #-4
 8019830:	2a00      	cmp	r2, #0
 8019832:	d1e7      	bne.n	8019804 <_Index2ColorBulk+0x2c>
 8019834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019838:	2002b01c 	.word	0x2002b01c
 801983c:	08022314 	.word	0x08022314
 8019840:	08022334 	.word	0x08022334

08019844 <GUICC_M565_SetCustColorConv>:
 8019844:	4a02      	ldr	r2, [pc, #8]	; (8019850 <GUICC_M565_SetCustColorConv+0xc>)
 8019846:	4b03      	ldr	r3, [pc, #12]	; (8019854 <GUICC_M565_SetCustColorConv+0x10>)
 8019848:	6010      	str	r0, [r2, #0]
 801984a:	6019      	str	r1, [r3, #0]
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	2002b020 	.word	0x2002b020
 8019854:	2002b01c 	.word	0x2002b01c

08019858 <_Color2Index_8888>:
 8019858:	43c3      	mvns	r3, r0
 801985a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801985e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019862:	4313      	orrs	r3, r2
 8019864:	b2c2      	uxtb	r2, r0
 8019866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801986a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801986e:	4318      	orrs	r0, r3
 8019870:	4770      	bx	lr
 8019872:	bf00      	nop

08019874 <_GetIndexMask_8888>:
 8019874:	f04f 30ff 	mov.w	r0, #4294967295
 8019878:	4770      	bx	lr
 801987a:	bf00      	nop

0801987c <_Color2IndexBulk>:
 801987c:	b470      	push	{r4, r5, r6}
 801987e:	f850 4b04 	ldr.w	r4, [r0], #4
 8019882:	43e5      	mvns	r5, r4
 8019884:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8019888:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 801988c:	4335      	orrs	r5, r6
 801988e:	b2e6      	uxtb	r6, r4
 8019890:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8019894:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019898:	432c      	orrs	r4, r5
 801989a:	3a01      	subs	r2, #1
 801989c:	600c      	str	r4, [r1, #0]
 801989e:	4419      	add	r1, r3
 80198a0:	d1ed      	bne.n	801987e <_Color2IndexBulk+0x2>
 80198a2:	bc70      	pop	{r4, r5, r6}
 80198a4:	4770      	bx	lr
 80198a6:	bf00      	nop

080198a8 <_Index2ColorBulk>:
 80198a8:	b470      	push	{r4, r5, r6}
 80198aa:	6804      	ldr	r4, [r0, #0]
 80198ac:	43e5      	mvns	r5, r4
 80198ae:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80198b2:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80198b6:	4335      	orrs	r5, r6
 80198b8:	b2e6      	uxtb	r6, r4
 80198ba:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80198be:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80198c2:	432c      	orrs	r4, r5
 80198c4:	3a01      	subs	r2, #1
 80198c6:	4418      	add	r0, r3
 80198c8:	f841 4b04 	str.w	r4, [r1], #4
 80198cc:	d1ed      	bne.n	80198aa <_Index2ColorBulk+0x2>
 80198ce:	bc70      	pop	{r4, r5, r6}
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop

080198d4 <_Color2Index_888>:
 80198d4:	b2c2      	uxtb	r2, r0
 80198d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80198da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80198de:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80198e2:	4318      	orrs	r0, r3
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop

080198e8 <_GetIndexMask_888>:
 80198e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80198ec:	4770      	bx	lr
 80198ee:	bf00      	nop

080198f0 <_Color2IndexBulk>:
 80198f0:	b470      	push	{r4, r5, r6}
 80198f2:	f850 4b04 	ldr.w	r4, [r0], #4
 80198f6:	b2e6      	uxtb	r6, r4
 80198f8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80198fc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8019900:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019904:	432c      	orrs	r4, r5
 8019906:	3a01      	subs	r2, #1
 8019908:	600c      	str	r4, [r1, #0]
 801990a:	4419      	add	r1, r3
 801990c:	d1f1      	bne.n	80198f2 <_Color2IndexBulk+0x2>
 801990e:	bc70      	pop	{r4, r5, r6}
 8019910:	4770      	bx	lr
 8019912:	bf00      	nop

08019914 <_Index2ColorBulk>:
 8019914:	b470      	push	{r4, r5, r6}
 8019916:	6804      	ldr	r4, [r0, #0]
 8019918:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801991c:	b2e6      	uxtb	r6, r4
 801991e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8019922:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8019926:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801992a:	432c      	orrs	r4, r5
 801992c:	3a01      	subs	r2, #1
 801992e:	4418      	add	r0, r3
 8019930:	f841 4b04 	str.w	r4, [r1], #4
 8019934:	d1ef      	bne.n	8019916 <_Index2ColorBulk+0x2>
 8019936:	bc70      	pop	{r4, r5, r6}
 8019938:	4770      	bx	lr
 801993a:	bf00      	nop

0801993c <LCD_Index2Color_565>:
 801993c:	f000 021f 	and.w	r2, r0, #31
 8019940:	4b09      	ldr	r3, [pc, #36]	; (8019968 <LCD_Index2Color_565+0x2c>)
 8019942:	5c99      	ldrb	r1, [r3, r2]
 8019944:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8019948:	b410      	push	{r4}
 801994a:	f3c0 1045 	ubfx	r0, r0, #5, #6
 801994e:	4c07      	ldr	r4, [pc, #28]	; (801996c <LCD_Index2Color_565+0x30>)
 8019950:	5c9a      	ldrb	r2, [r3, r2]
 8019952:	5c23      	ldrb	r3, [r4, r0]
 8019954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019958:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 801995c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8019960:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019964:	4770      	bx	lr
 8019966:	bf00      	nop
 8019968:	08022314 	.word	0x08022314
 801996c:	08022334 	.word	0x08022334

08019970 <_Color2Index_565>:
 8019970:	b410      	push	{r4}
 8019972:	b2c2      	uxtb	r2, r0
 8019974:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8019978:	4b06      	ldr	r3, [pc, #24]	; (8019994 <_Color2Index_565+0x24>)
 801997a:	4907      	ldr	r1, [pc, #28]	; (8019998 <_Color2Index_565+0x28>)
 801997c:	5c9a      	ldrb	r2, [r3, r2]
 801997e:	5d1b      	ldrb	r3, [r3, r4]
 8019980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019984:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019988:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 801998c:	5c08      	ldrb	r0, [r1, r0]
 801998e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8019992:	4770      	bx	lr
 8019994:	08022214 	.word	0x08022214
 8019998:	08022374 	.word	0x08022374

0801999c <_GetIndexMask_565>:
 801999c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop

080199a4 <_Color2IndexBulk>:
 80199a4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80199a8:	4d0c      	ldr	r5, [pc, #48]	; (80199dc <_Color2IndexBulk+0x38>)
 80199aa:	4f0d      	ldr	r7, [pc, #52]	; (80199e0 <_Color2IndexBulk+0x3c>)
 80199ac:	f850 4b04 	ldr.w	r4, [r0], #4
 80199b0:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80199b4:	fa5f f884 	uxtb.w	r8, r4
 80199b8:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80199bc:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80199c0:	f815 4008 	ldrb.w	r4, [r5, r8]
 80199c4:	5dbe      	ldrb	r6, [r7, r6]
 80199c6:	eb0c 24c4 	add.w	r4, ip, r4, lsl #11
 80199ca:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 80199ce:	3a01      	subs	r2, #1
 80199d0:	800c      	strh	r4, [r1, #0]
 80199d2:	4419      	add	r1, r3
 80199d4:	d1ea      	bne.n	80199ac <_Color2IndexBulk+0x8>
 80199d6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80199da:	4770      	bx	lr
 80199dc:	08022214 	.word	0x08022214
 80199e0:	08022374 	.word	0x08022374

080199e4 <_Index2ColorBulk>:
 80199e4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80199e8:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 80199ec:	3c01      	subs	r4, #1
 80199ee:	3a01      	subs	r2, #1
 80199f0:	fb03 0002 	mla	r0, r3, r2, r0
 80199f4:	4d10      	ldr	r5, [pc, #64]	; (8019a38 <_Index2ColorBulk+0x54>)
 80199f6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8019a3c <_Index2ColorBulk+0x58>
 80199fa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80199fe:	425b      	negs	r3, r3
 8019a00:	e000      	b.n	8019a04 <_Index2ColorBulk+0x20>
 8019a02:	3a01      	subs	r2, #1
 8019a04:	8804      	ldrh	r4, [r0, #0]
 8019a06:	0ae7      	lsrs	r7, r4, #11
 8019a08:	f004 081f 	and.w	r8, r4, #31
 8019a0c:	f3c4 1645 	ubfx	r6, r4, #5, #6
 8019a10:	5def      	ldrb	r7, [r5, r7]
 8019a12:	f815 4008 	ldrb.w	r4, [r5, r8]
 8019a16:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8019a1a:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8019a1e:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8019a22:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8019a26:	4418      	add	r0, r3
 8019a28:	f841 4904 	str.w	r4, [r1], #-4
 8019a2c:	2a00      	cmp	r2, #0
 8019a2e:	d1e8      	bne.n	8019a02 <_Index2ColorBulk+0x1e>
 8019a30:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8019a34:	4770      	bx	lr
 8019a36:	bf00      	nop
 8019a38:	08022314 	.word	0x08022314
 8019a3c:	08022334 	.word	0x08022334

08019a40 <_Color2Index_M8888I>:
 8019a40:	4770      	bx	lr
 8019a42:	bf00      	nop

08019a44 <_GetIndexMask_M8888I>:
 8019a44:	f04f 30ff 	mov.w	r0, #4294967295
 8019a48:	4770      	bx	lr
 8019a4a:	bf00      	nop

08019a4c <_Color2IndexBulk_M8888I>:
 8019a4c:	b410      	push	{r4}
 8019a4e:	f850 4b04 	ldr.w	r4, [r0], #4
 8019a52:	600c      	str	r4, [r1, #0]
 8019a54:	3a01      	subs	r2, #1
 8019a56:	4419      	add	r1, r3
 8019a58:	d1f9      	bne.n	8019a4e <_Color2IndexBulk_M8888I+0x2>
 8019a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a5e:	4770      	bx	lr

08019a60 <_Index2ColorBulk_M8888I>:
 8019a60:	b410      	push	{r4}
 8019a62:	6804      	ldr	r4, [r0, #0]
 8019a64:	f841 4b04 	str.w	r4, [r1], #4
 8019a68:	3a01      	subs	r2, #1
 8019a6a:	4418      	add	r0, r3
 8019a6c:	d1f9      	bne.n	8019a62 <_Index2ColorBulk_M8888I+0x2>
 8019a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a72:	4770      	bx	lr

08019a74 <GUICC_M8888I_SetCustColorConv>:
 8019a74:	4770      	bx	lr
 8019a76:	bf00      	nop

08019a78 <_Color2Index_M4444I>:
 8019a78:	4b0f      	ldr	r3, [pc, #60]	; (8019ab8 <_Color2Index_M4444I+0x40>)
 8019a7a:	b430      	push	{r4, r5}
 8019a7c:	0e02      	lsrs	r2, r0, #24
 8019a7e:	b2c5      	uxtb	r5, r0
 8019a80:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8019a84:	3508      	adds	r5, #8
 8019a86:	3208      	adds	r2, #8
 8019a88:	fba3 1505 	umull	r1, r5, r3, r5
 8019a8c:	fba3 1202 	umull	r1, r2, r3, r2
 8019a90:	3408      	adds	r4, #8
 8019a92:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8019a96:	092d      	lsrs	r5, r5, #4
 8019a98:	fba3 0404 	umull	r0, r4, r3, r4
 8019a9c:	0912      	lsrs	r2, r2, #4
 8019a9e:	3108      	adds	r1, #8
 8019aa0:	0920      	lsrs	r0, r4, #4
 8019aa2:	eb05 3202 	add.w	r2, r5, r2, lsl #12
 8019aa6:	fba3 4301 	umull	r4, r3, r3, r1
 8019aaa:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8019aae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8019ab2:	4418      	add	r0, r3
 8019ab4:	bc30      	pop	{r4, r5}
 8019ab6:	4770      	bx	lr
 8019ab8:	f0f0f0f1 	.word	0xf0f0f0f1

08019abc <_Index2Color_M4444I>:
 8019abc:	4b0b      	ldr	r3, [pc, #44]	; (8019aec <_Index2Color_M4444I+0x30>)
 8019abe:	f3c0 3203 	ubfx	r2, r0, #12, #4
 8019ac2:	f3c0 2103 	ubfx	r1, r0, #8, #4
 8019ac6:	b410      	push	{r4}
 8019ac8:	5c59      	ldrb	r1, [r3, r1]
 8019aca:	5c9c      	ldrb	r4, [r3, r2]
 8019acc:	f000 020f 	and.w	r2, r0, #15
 8019ad0:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8019ad4:	5c9a      	ldrb	r2, [r3, r2]
 8019ad6:	5c18      	ldrb	r0, [r3, r0]
 8019ad8:	0409      	lsls	r1, r1, #16
 8019ada:	eb01 6304 	add.w	r3, r1, r4, lsl #24
 8019ade:	4413      	add	r3, r2
 8019ae0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8019ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ae8:	4770      	bx	lr
 8019aea:	bf00      	nop
 8019aec:	08022104 	.word	0x08022104

08019af0 <_GetIndexMask_M4444I>:
 8019af0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019af4:	4770      	bx	lr
 8019af6:	bf00      	nop

08019af8 <_Color2IndexBulk_M4444I>:
 8019af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afc:	4c17      	ldr	r4, [pc, #92]	; (8019b5c <_Color2IndexBulk_M4444I+0x64>)
 8019afe:	6824      	ldr	r4, [r4, #0]
 8019b00:	4684      	mov	ip, r0
 8019b02:	460e      	mov	r6, r1
 8019b04:	4617      	mov	r7, r2
 8019b06:	4698      	mov	r8, r3
 8019b08:	b114      	cbz	r4, 8019b10 <_Color2IndexBulk_M4444I+0x18>
 8019b0a:	47a0      	blx	r4
 8019b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b10:	4d13      	ldr	r5, [pc, #76]	; (8019b60 <_Color2IndexBulk_M4444I+0x68>)
 8019b12:	f85c 4b04 	ldr.w	r4, [ip], #4
 8019b16:	b2e1      	uxtb	r1, r4
 8019b18:	0e23      	lsrs	r3, r4, #24
 8019b1a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8019b1e:	3108      	adds	r1, #8
 8019b20:	3308      	adds	r3, #8
 8019b22:	fba5 0101 	umull	r0, r1, r5, r1
 8019b26:	fba5 0303 	umull	r0, r3, r5, r3
 8019b2a:	3208      	adds	r2, #8
 8019b2c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019b30:	0909      	lsrs	r1, r1, #4
 8019b32:	091b      	lsrs	r3, r3, #4
 8019b34:	fba5 0202 	umull	r0, r2, r5, r2
 8019b38:	3408      	adds	r4, #8
 8019b3a:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 8019b3e:	0912      	lsrs	r2, r2, #4
 8019b40:	fba5 1404 	umull	r1, r4, r5, r4
 8019b44:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8019b48:	f404 74f8 	and.w	r4, r4, #496	; 0x1f0
 8019b4c:	4422      	add	r2, r4
 8019b4e:	3f01      	subs	r7, #1
 8019b50:	8032      	strh	r2, [r6, #0]
 8019b52:	4446      	add	r6, r8
 8019b54:	d1dd      	bne.n	8019b12 <_Color2IndexBulk_M4444I+0x1a>
 8019b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b5a:	bf00      	nop
 8019b5c:	2002b028 	.word	0x2002b028
 8019b60:	f0f0f0f1 	.word	0xf0f0f0f1

08019b64 <_Index2ColorBulk_M4444I>:
 8019b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b66:	4c15      	ldr	r4, [pc, #84]	; (8019bbc <_Index2ColorBulk_M4444I+0x58>)
 8019b68:	6824      	ldr	r4, [r4, #0]
 8019b6a:	461e      	mov	r6, r3
 8019b6c:	b10c      	cbz	r4, 8019b72 <_Index2ColorBulk_M4444I+0xe>
 8019b6e:	47a0      	blx	r4
 8019b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b72:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8019b76:	3b01      	subs	r3, #1
 8019b78:	3a01      	subs	r2, #1
 8019b7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019b7e:	4d10      	ldr	r5, [pc, #64]	; (8019bc0 <_Index2ColorBulk_M4444I+0x5c>)
 8019b80:	fb06 0002 	mla	r0, r6, r2, r0
 8019b84:	4273      	negs	r3, r6
 8019b86:	e000      	b.n	8019b8a <_Index2ColorBulk_M4444I+0x26>
 8019b88:	3a01      	subs	r2, #1
 8019b8a:	8804      	ldrh	r4, [r0, #0]
 8019b8c:	0b27      	lsrs	r7, r4, #12
 8019b8e:	f004 060f 	and.w	r6, r4, #15
 8019b92:	f3c4 2c03 	ubfx	ip, r4, #8, #4
 8019b96:	5dae      	ldrb	r6, [r5, r6]
 8019b98:	5def      	ldrb	r7, [r5, r7]
 8019b9a:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8019b9e:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8019ba2:	eb06 6707 	add.w	r7, r6, r7, lsl #24
 8019ba6:	5d2e      	ldrb	r6, [r5, r4]
 8019ba8:	eb07 440c 	add.w	r4, r7, ip, lsl #16
 8019bac:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8019bb0:	4418      	add	r0, r3
 8019bb2:	f841 4904 	str.w	r4, [r1], #-4
 8019bb6:	2a00      	cmp	r2, #0
 8019bb8:	d1e6      	bne.n	8019b88 <_Index2ColorBulk_M4444I+0x24>
 8019bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bbc:	2002b024 	.word	0x2002b024
 8019bc0:	08022104 	.word	0x08022104

08019bc4 <GUICC_M4444I_SetCustColorConv>:
 8019bc4:	4a02      	ldr	r2, [pc, #8]	; (8019bd0 <GUICC_M4444I_SetCustColorConv+0xc>)
 8019bc6:	4b03      	ldr	r3, [pc, #12]	; (8019bd4 <GUICC_M4444I_SetCustColorConv+0x10>)
 8019bc8:	6010      	str	r0, [r2, #0]
 8019bca:	6019      	str	r1, [r3, #0]
 8019bcc:	4770      	bx	lr
 8019bce:	bf00      	nop
 8019bd0:	2002b028 	.word	0x2002b028
 8019bd4:	2002b024 	.word	0x2002b024

08019bd8 <_Color2Index_M1555I>:
 8019bd8:	b2c1      	uxtb	r1, r0
 8019bda:	4b09      	ldr	r3, [pc, #36]	; (8019c00 <_Color2Index_M1555I+0x28>)
 8019bdc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8019be0:	b410      	push	{r4}
 8019be2:	5c5c      	ldrb	r4, [r3, r1]
 8019be4:	5c9a      	ldrb	r2, [r3, r2]
 8019be6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8019bea:	0fc0      	lsrs	r0, r0, #31
 8019bec:	eb04 30c0 	add.w	r0, r4, r0, lsl #15
 8019bf0:	5c5b      	ldrb	r3, [r3, r1]
 8019bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bf6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019bfa:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 8019bfe:	4770      	bx	lr
 8019c00:	08022214 	.word	0x08022214

08019c04 <_Index2Color_M1555I>:
 8019c04:	4b0a      	ldr	r3, [pc, #40]	; (8019c30 <_Index2Color_M1555I+0x2c>)
 8019c06:	f3c0 1244 	ubfx	r2, r0, #5, #5
 8019c0a:	f3c0 2184 	ubfx	r1, r0, #10, #5
 8019c0e:	b410      	push	{r4}
 8019c10:	5c59      	ldrb	r1, [r3, r1]
 8019c12:	5c9c      	ldrb	r4, [r3, r2]
 8019c14:	f000 021f 	and.w	r2, r0, #31
 8019c18:	0409      	lsls	r1, r1, #16
 8019c1a:	5c9a      	ldrb	r2, [r3, r2]
 8019c1c:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8019c20:	4413      	add	r3, r2
 8019c22:	f340 30c0 	sbfx	r0, r0, #15, #1
 8019c26:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8019c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c2e:	4770      	bx	lr
 8019c30:	08022314 	.word	0x08022314

08019c34 <_GetIndexMask_M1555I>:
 8019c34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019c38:	4770      	bx	lr
 8019c3a:	bf00      	nop

08019c3c <_Color2IndexBulk_M1555I>:
 8019c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3e:	4c10      	ldr	r4, [pc, #64]	; (8019c80 <_Color2IndexBulk_M1555I+0x44>)
 8019c40:	6824      	ldr	r4, [r4, #0]
 8019c42:	4607      	mov	r7, r0
 8019c44:	460d      	mov	r5, r1
 8019c46:	4616      	mov	r6, r2
 8019c48:	469c      	mov	ip, r3
 8019c4a:	b10c      	cbz	r4, 8019c50 <_Color2IndexBulk_M1555I+0x14>
 8019c4c:	47a0      	blx	r4
 8019c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c50:	4a0c      	ldr	r2, [pc, #48]	; (8019c84 <_Color2IndexBulk_M1555I+0x48>)
 8019c52:	f857 4b04 	ldr.w	r4, [r7], #4
 8019c56:	b2e1      	uxtb	r1, r4
 8019c58:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8019c5c:	5c50      	ldrb	r0, [r2, r1]
 8019c5e:	5cd3      	ldrb	r3, [r2, r3]
 8019c60:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8019c64:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 8019c68:	0fe4      	lsrs	r4, r4, #31
 8019c6a:	5c51      	ldrb	r1, [r2, r1]
 8019c6c:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 8019c70:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8019c74:	3e01      	subs	r6, #1
 8019c76:	802c      	strh	r4, [r5, #0]
 8019c78:	4465      	add	r5, ip
 8019c7a:	d1ea      	bne.n	8019c52 <_Color2IndexBulk_M1555I+0x16>
 8019c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	2002b030 	.word	0x2002b030
 8019c84:	08022214 	.word	0x08022214

08019c88 <_Index2ColorBulk_M1555I>:
 8019c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c8a:	4c15      	ldr	r4, [pc, #84]	; (8019ce0 <_Index2ColorBulk_M1555I+0x58>)
 8019c8c:	6824      	ldr	r4, [r4, #0]
 8019c8e:	461e      	mov	r6, r3
 8019c90:	b10c      	cbz	r4, 8019c96 <_Index2ColorBulk_M1555I+0xe>
 8019c92:	47a0      	blx	r4
 8019c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c96:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8019c9a:	3b01      	subs	r3, #1
 8019c9c:	3a01      	subs	r2, #1
 8019c9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019ca2:	4d10      	ldr	r5, [pc, #64]	; (8019ce4 <_Index2ColorBulk_M1555I+0x5c>)
 8019ca4:	fb06 0002 	mla	r0, r6, r2, r0
 8019ca8:	4273      	negs	r3, r6
 8019caa:	e000      	b.n	8019cae <_Index2ColorBulk_M1555I+0x26>
 8019cac:	3a01      	subs	r2, #1
 8019cae:	8804      	ldrh	r4, [r0, #0]
 8019cb0:	f004 071f 	and.w	r7, r4, #31
 8019cb4:	f3c4 1644 	ubfx	r6, r4, #5, #5
 8019cb8:	f815 c007 	ldrb.w	ip, [r5, r7]
 8019cbc:	5daf      	ldrb	r7, [r5, r6]
 8019cbe:	f3c4 2684 	ubfx	r6, r4, #10, #5
 8019cc2:	f344 34c0 	sbfx	r4, r4, #15, #1
 8019cc6:	eb0c 6404 	add.w	r4, ip, r4, lsl #24
 8019cca:	5dae      	ldrb	r6, [r5, r6]
 8019ccc:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8019cd0:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8019cd4:	4418      	add	r0, r3
 8019cd6:	f841 4904 	str.w	r4, [r1], #-4
 8019cda:	2a00      	cmp	r2, #0
 8019cdc:	d1e6      	bne.n	8019cac <_Index2ColorBulk_M1555I+0x24>
 8019cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ce0:	2002b02c 	.word	0x2002b02c
 8019ce4:	08022314 	.word	0x08022314

08019ce8 <GUICC_M1555I_SetCustColorConv>:
 8019ce8:	4a02      	ldr	r2, [pc, #8]	; (8019cf4 <GUICC_M1555I_SetCustColorConv+0xc>)
 8019cea:	4b03      	ldr	r3, [pc, #12]	; (8019cf8 <GUICC_M1555I_SetCustColorConv+0x10>)
 8019cec:	6010      	str	r0, [r2, #0]
 8019cee:	6019      	str	r1, [r3, #0]
 8019cf0:	4770      	bx	lr
 8019cf2:	bf00      	nop
 8019cf4:	2002b030 	.word	0x2002b030
 8019cf8:	2002b02c 	.word	0x2002b02c

08019cfc <_Color2Index_88666I>:
 8019cfc:	4b05      	ldr	r3, [pc, #20]	; (8019d14 <_Color2Index_88666I+0x18>)
 8019cfe:	b510      	push	{r4, lr}
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	4604      	mov	r4, r0
 8019d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8019d08:	4798      	blx	r3
 8019d0a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8019d0e:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 8019d12:	bd10      	pop	{r4, pc}
 8019d14:	0802172c 	.word	0x0802172c

08019d18 <_Index2Color_88666I>:
 8019d18:	4b05      	ldr	r3, [pc, #20]	; (8019d30 <_Index2Color_88666I+0x18>)
 8019d1a:	b510      	push	{r4, lr}
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	4604      	mov	r4, r0
 8019d20:	b2c0      	uxtb	r0, r0
 8019d22:	4798      	blx	r3
 8019d24:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019d28:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8019d2c:	bd10      	pop	{r4, pc}
 8019d2e:	bf00      	nop
 8019d30:	0802172c 	.word	0x0802172c

08019d34 <_GetIndexMask_88666I>:
 8019d34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019d38:	4770      	bx	lr
 8019d3a:	bf00      	nop

08019d3c <_Color2IndexBulk_88666I>:
 8019d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d40:	4c0a      	ldr	r4, [pc, #40]	; (8019d6c <_Color2IndexBulk_88666I+0x30>)
 8019d42:	4607      	mov	r7, r0
 8019d44:	f8d4 9000 	ldr.w	r9, [r4]
 8019d48:	4615      	mov	r5, r2
 8019d4a:	460c      	mov	r4, r1
 8019d4c:	4698      	mov	r8, r3
 8019d4e:	f857 6b04 	ldr.w	r6, [r7], #4
 8019d52:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 8019d56:	47c8      	blx	r9
 8019d58:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8019d5c:	ea40 4016 	orr.w	r0, r0, r6, lsr #16
 8019d60:	3d01      	subs	r5, #1
 8019d62:	8020      	strh	r0, [r4, #0]
 8019d64:	4444      	add	r4, r8
 8019d66:	d1f2      	bne.n	8019d4e <_Color2IndexBulk_88666I+0x12>
 8019d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d6c:	0802172c 	.word	0x0802172c

08019d70 <_Index2ColorBulk_88666I>:
 8019d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d74:	4c0e      	ldr	r4, [pc, #56]	; (8019db0 <_Index2ColorBulk_88666I+0x40>)
 8019d76:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 8019d7a:	3f01      	subs	r7, #1
 8019d7c:	1e55      	subs	r5, r2, #1
 8019d7e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019d82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019d86:	fb03 0405 	mla	r4, r3, r5, r0
 8019d8a:	f1c3 0800 	rsb	r8, r3, #0
 8019d8e:	e000      	b.n	8019d92 <_Index2ColorBulk_88666I+0x22>
 8019d90:	3d01      	subs	r5, #1
 8019d92:	8826      	ldrh	r6, [r4, #0]
 8019d94:	b2f0      	uxtb	r0, r6
 8019d96:	47c8      	blx	r9
 8019d98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019d9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8019da0:	4444      	add	r4, r8
 8019da2:	f847 0904 	str.w	r0, [r7], #-4
 8019da6:	2d00      	cmp	r5, #0
 8019da8:	d1f2      	bne.n	8019d90 <_Index2ColorBulk_88666I+0x20>
 8019daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019dae:	bf00      	nop
 8019db0:	0802172c 	.word	0x0802172c

08019db4 <_GetIndexMask_8666_1>:
 8019db4:	20ff      	movs	r0, #255	; 0xff
 8019db6:	4770      	bx	lr

08019db8 <_Color2Index_8666_1>:
 8019db8:	b410      	push	{r4}
 8019dba:	b328      	cbz	r0, 8019e08 <_Color2Index_8666_1+0x50>
 8019dbc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019dc0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8019dc4:	4293      	cmp	r3, r2
 8019dc6:	b2c0      	uxtb	r0, r0
 8019dc8:	d021      	beq.n	8019e0e <_Color2Index_8666_1+0x56>
 8019dca:	4915      	ldr	r1, [pc, #84]	; (8019e20 <_Color2Index_8666_1+0x68>)
 8019dcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019dd0:	307f      	adds	r0, #127	; 0x7f
 8019dd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019dda:	fba1 4000 	umull	r4, r0, r1, r0
 8019dde:	327f      	adds	r2, #127	; 0x7f
 8019de0:	337f      	adds	r3, #127	; 0x7f
 8019de2:	fba1 4202 	umull	r4, r2, r1, r2
 8019de6:	09c0      	lsrs	r0, r0, #7
 8019de8:	fba1 4103 	umull	r4, r1, r1, r3
 8019dec:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8019df0:	09d2      	lsrs	r2, r2, #7
 8019df2:	09c9      	lsrs	r1, r1, #7
 8019df4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8019df8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019dfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019e00:	286b      	cmp	r0, #107	; 0x6b
 8019e02:	bf94      	ite	ls
 8019e04:	300c      	addls	r0, #12
 8019e06:	301c      	addhi	r0, #28
 8019e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e0c:	4770      	bx	lr
 8019e0e:	4298      	cmp	r0, r3
 8019e10:	d1db      	bne.n	8019dca <_Color2Index_8666_1+0x12>
 8019e12:	4b04      	ldr	r3, [pc, #16]	; (8019e24 <_Color2Index_8666_1+0x6c>)
 8019e14:	3008      	adds	r0, #8
 8019e16:	fba3 2000 	umull	r2, r0, r3, r0
 8019e1a:	0900      	lsrs	r0, r0, #4
 8019e1c:	3078      	adds	r0, #120	; 0x78
 8019e1e:	e7f3      	b.n	8019e08 <_Color2Index_8666_1+0x50>
 8019e20:	80808081 	.word	0x80808081
 8019e24:	f0f0f0f1 	.word	0xf0f0f0f1

08019e28 <_Index2Color_8666_1>:
 8019e28:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8019e2c:	2b0f      	cmp	r3, #15
 8019e2e:	b430      	push	{r4, r5}
 8019e30:	d92f      	bls.n	8019e92 <_Index2Color_8666_1+0x6a>
 8019e32:	f1a0 030c 	sub.w	r3, r0, #12
 8019e36:	2be7      	cmp	r3, #231	; 0xe7
 8019e38:	d828      	bhi.n	8019e8c <_Index2Color_8666_1+0x64>
 8019e3a:	2877      	cmp	r0, #119	; 0x77
 8019e3c:	bf88      	it	hi
 8019e3e:	f1a0 031c 	subhi.w	r3, r0, #28
 8019e42:	4819      	ldr	r0, [pc, #100]	; (8019ea8 <_Index2Color_8666_1+0x80>)
 8019e44:	4919      	ldr	r1, [pc, #100]	; (8019eac <_Index2Color_8666_1+0x84>)
 8019e46:	fba0 4203 	umull	r4, r2, r0, r3
 8019e4a:	0892      	lsrs	r2, r2, #2
 8019e4c:	fba0 5002 	umull	r5, r0, r0, r2
 8019e50:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8019e54:	fba1 5103 	umull	r5, r1, r1, r3
 8019e58:	0880      	lsrs	r0, r0, #2
 8019e5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019e5e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8019e62:	08c9      	lsrs	r1, r1, #3
 8019e64:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 8019e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e74:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8019e78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8019e7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e80:	eb01 4303 	add.w	r3, r1, r3, lsl #16
 8019e84:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8019e88:	bc30      	pop	{r4, r5}
 8019e8a:	4770      	bx	lr
 8019e8c:	2000      	movs	r0, #0
 8019e8e:	bc30      	pop	{r4, r5}
 8019e90:	4770      	bx	lr
 8019e92:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8019e96:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8019e9a:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8019e9e:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8019ea2:	3008      	adds	r0, #8
 8019ea4:	bc30      	pop	{r4, r5}
 8019ea6:	4770      	bx	lr
 8019ea8:	aaaaaaab 	.word	0xaaaaaaab
 8019eac:	38e38e39 	.word	0x38e38e39

08019eb0 <LCD_Color2Index_8666>:
 8019eb0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8019eb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8019eb8:	4293      	cmp	r3, r2
 8019eba:	b410      	push	{r4}
 8019ebc:	b2c0      	uxtb	r0, r0
 8019ebe:	d020      	beq.n	8019f02 <LCD_Color2Index_8666+0x52>
 8019ec0:	4914      	ldr	r1, [pc, #80]	; (8019f14 <LCD_Color2Index_8666+0x64>)
 8019ec2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ec6:	307f      	adds	r0, #127	; 0x7f
 8019ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019ecc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019ed0:	fba1 4000 	umull	r4, r0, r1, r0
 8019ed4:	337f      	adds	r3, #127	; 0x7f
 8019ed6:	327f      	adds	r2, #127	; 0x7f
 8019ed8:	fba1 4303 	umull	r4, r3, r1, r3
 8019edc:	09c0      	lsrs	r0, r0, #7
 8019ede:	fba1 4102 	umull	r4, r1, r1, r2
 8019ee2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8019ee6:	09db      	lsrs	r3, r3, #7
 8019ee8:	09c9      	lsrs	r1, r1, #7
 8019eea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019eee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ef2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019ef6:	286b      	cmp	r0, #107	; 0x6b
 8019ef8:	bf88      	it	hi
 8019efa:	3028      	addhi	r0, #40	; 0x28
 8019efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f00:	4770      	bx	lr
 8019f02:	4298      	cmp	r0, r3
 8019f04:	d1dc      	bne.n	8019ec0 <LCD_Color2Index_8666+0x10>
 8019f06:	4b04      	ldr	r3, [pc, #16]	; (8019f18 <LCD_Color2Index_8666+0x68>)
 8019f08:	3008      	adds	r0, #8
 8019f0a:	fba3 2000 	umull	r2, r0, r3, r0
 8019f0e:	0900      	lsrs	r0, r0, #4
 8019f10:	3078      	adds	r0, #120	; 0x78
 8019f12:	e7f3      	b.n	8019efc <LCD_Color2Index_8666+0x4c>
 8019f14:	80808081 	.word	0x80808081
 8019f18:	f0f0f0f1 	.word	0xf0f0f0f1

08019f1c <_GetIndexMask_8666>:
 8019f1c:	20ff      	movs	r0, #255	; 0xff
 8019f1e:	4770      	bx	lr

08019f20 <LCD_Index2Color_8666>:
 8019f20:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8019f24:	2b0f      	cmp	r3, #15
 8019f26:	b430      	push	{r4, r5}
 8019f28:	d92c      	bls.n	8019f84 <LCD_Index2Color_8666+0x64>
 8019f2a:	286b      	cmp	r0, #107	; 0x6b
 8019f2c:	d826      	bhi.n	8019f7c <LCD_Index2Color_8666+0x5c>
 8019f2e:	491c      	ldr	r1, [pc, #112]	; (8019fa0 <LCD_Index2Color_8666+0x80>)
 8019f30:	4a1c      	ldr	r2, [pc, #112]	; (8019fa4 <LCD_Index2Color_8666+0x84>)
 8019f32:	fba1 4300 	umull	r4, r3, r1, r0
 8019f36:	089b      	lsrs	r3, r3, #2
 8019f38:	fba1 5103 	umull	r5, r1, r1, r3
 8019f3c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8019f40:	fba2 5200 	umull	r5, r2, r2, r0
 8019f44:	0889      	lsrs	r1, r1, #2
 8019f46:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8019f4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f4e:	08d2      	lsrs	r2, r2, #3
 8019f50:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8019f54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019f58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019f64:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019f68:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8019f6c:	eb02 4000 	add.w	r0, r2, r0, lsl #16
 8019f70:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8019f74:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019f78:	bc30      	pop	{r4, r5}
 8019f7a:	4770      	bx	lr
 8019f7c:	2893      	cmp	r0, #147	; 0x93
 8019f7e:	d90c      	bls.n	8019f9a <LCD_Index2Color_8666+0x7a>
 8019f80:	3828      	subs	r0, #40	; 0x28
 8019f82:	e7d4      	b.n	8019f2e <LCD_Index2Color_8666+0xe>
 8019f84:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8019f88:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8019f8c:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8019f90:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8019f94:	3008      	adds	r0, #8
 8019f96:	bc30      	pop	{r4, r5}
 8019f98:	4770      	bx	lr
 8019f9a:	2000      	movs	r0, #0
 8019f9c:	bc30      	pop	{r4, r5}
 8019f9e:	4770      	bx	lr
 8019fa0:	aaaaaaab 	.word	0xaaaaaaab
 8019fa4:	38e38e39 	.word	0x38e38e39

08019fa8 <_Color2Index_84444>:
 8019fa8:	0f83      	lsrs	r3, r0, #30
 8019faa:	d010      	beq.n	8019fce <_Color2Index_84444+0x26>
 8019fac:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8019fb0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8019fb4:	428a      	cmp	r2, r1
 8019fb6:	b2c0      	uxtb	r0, r0
 8019fb8:	d00b      	beq.n	8019fd2 <_Color2Index_84444+0x2a>
 8019fba:	019b      	lsls	r3, r3, #6
 8019fbc:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 8019fc0:	0980      	lsrs	r0, r0, #6
 8019fc2:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 8019fc6:	0989      	lsrs	r1, r1, #6
 8019fc8:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8019fcc:	4770      	bx	lr
 8019fce:	4618      	mov	r0, r3
 8019fd0:	4770      	bx	lr
 8019fd2:	4290      	cmp	r0, r2
 8019fd4:	d1f1      	bne.n	8019fba <_Color2Index_84444+0x12>
 8019fd6:	0900      	lsrs	r0, r0, #4
 8019fd8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8019fdc:	4770      	bx	lr
 8019fde:	bf00      	nop

08019fe0 <_GetIndexMask_84444>:
 8019fe0:	20ff      	movs	r0, #255	; 0xff
 8019fe2:	4770      	bx	lr

08019fe4 <_Index2Color_84444>:
 8019fe4:	283f      	cmp	r0, #63	; 0x3f
 8019fe6:	d804      	bhi.n	8019ff2 <_Index2Color_84444+0xe>
 8019fe8:	280f      	cmp	r0, #15
 8019fea:	d823      	bhi.n	801a034 <_Index2Color_84444+0x50>
 8019fec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8019ff0:	4770      	bx	lr
 8019ff2:	f000 0103 	and.w	r1, r0, #3
 8019ff6:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8019ffa:	f3c0 1301 	ubfx	r3, r0, #4, #2
 8019ffe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a002:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801a006:	0980      	lsrs	r0, r0, #6
 801a008:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a00c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a010:	b2c9      	uxtb	r1, r1
 801a012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a016:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a01a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a01e:	0409      	lsls	r1, r1, #16
 801a020:	b2d2      	uxtb	r2, r2
 801a022:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a026:	b2db      	uxtb	r3, r3
 801a028:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 801a02c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a030:	4318      	orrs	r0, r3
 801a032:	4770      	bx	lr
 801a034:	f000 030f 	and.w	r3, r0, #15
 801a038:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801a03c:	f3c0 1001 	ubfx	r0, r0, #4, #2
 801a040:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801a044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a048:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 801a04c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a050:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801a054:	4770      	bx	lr
 801a056:	bf00      	nop

0801a058 <_Color2Index_822216>:
 801a058:	4b11      	ldr	r3, [pc, #68]	; (801a0a0 <_Color2Index_822216+0x48>)
 801a05a:	f400 017f 	and.w	r1, r0, #16711680	; 0xff0000
 801a05e:	b410      	push	{r4}
 801a060:	0e04      	lsrs	r4, r0, #24
 801a062:	fba3 2404 	umull	r2, r4, r3, r4
 801a066:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801a06a:	0c0b      	lsrs	r3, r1, #16
 801a06c:	4293      	cmp	r3, r2
 801a06e:	ea4f 1414 	mov.w	r4, r4, lsr #4
 801a072:	b2c0      	uxtb	r0, r0
 801a074:	d00d      	beq.n	801a092 <_Color2Index_822216+0x3a>
 801a076:	09c0      	lsrs	r0, r0, #7
 801a078:	0080      	lsls	r0, r0, #2
 801a07a:	ea40 13d3 	orr.w	r3, r0, r3, lsr #7
 801a07e:	f043 0308 	orr.w	r3, r3, #8
 801a082:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
 801a086:	09d2      	lsrs	r2, r2, #7
 801a088:	ea44 0042 	orr.w	r0, r4, r2, lsl #1
 801a08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a090:	4770      	bx	lr
 801a092:	4298      	cmp	r0, r3
 801a094:	d1ef      	bne.n	801a076 <_Color2Index_822216+0x1e>
 801a096:	0d49      	lsrs	r1, r1, #21
 801a098:	ea41 1004 	orr.w	r0, r1, r4, lsl #4
 801a09c:	e7f6      	b.n	801a08c <_Color2Index_822216+0x34>
 801a09e:	bf00      	nop
 801a0a0:	f0f0f0f1 	.word	0xf0f0f0f1

0801a0a4 <_Index2Color_822216>:
 801a0a4:	f3c0 1303 	ubfx	r3, r0, #4, #4
 801a0a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a0ac:	0702      	lsls	r2, r0, #28
 801a0ae:	ea4f 6303 	mov.w	r3, r3, lsl #24
 801a0b2:	d516      	bpl.n	801a0e2 <_Index2Color_822216+0x3e>
 801a0b4:	f010 0f01 	tst.w	r0, #1
 801a0b8:	bf0c      	ite	eq
 801a0ba:	2200      	moveq	r2, #0
 801a0bc:	22ff      	movne	r2, #255	; 0xff
 801a0be:	f010 0f02 	tst.w	r0, #2
 801a0c2:	bf0c      	ite	eq
 801a0c4:	2300      	moveq	r3, #0
 801a0c6:	f44f 437f 	movne.w	r3, #65280	; 0xff00
 801a0ca:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801a0ce:	f010 0f04 	tst.w	r0, #4
 801a0d2:	ea42 0003 	orr.w	r0, r2, r3
 801a0d6:	bf0c      	ite	eq
 801a0d8:	2300      	moveq	r3, #0
 801a0da:	f44f 037f 	movne.w	r3, #16711680	; 0xff0000
 801a0de:	4318      	orrs	r0, r3
 801a0e0:	4770      	bx	lr
 801a0e2:	f000 0107 	and.w	r1, r0, #7
 801a0e6:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 801a0ea:	0092      	lsls	r2, r2, #2
 801a0ec:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 801a0f0:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 801a0f4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 801a0f8:	4318      	orrs	r0, r3
 801a0fa:	4770      	bx	lr

0801a0fc <_GetIndexMask_822216>:
 801a0fc:	20ff      	movs	r0, #255	; 0xff
 801a0fe:	4770      	bx	lr

0801a100 <_Color2Index_1616I>:
 801a100:	4b06      	ldr	r3, [pc, #24]	; (801a11c <_Color2Index_1616I+0x1c>)
 801a102:	b510      	push	{r4, lr}
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	4604      	mov	r4, r0
 801a108:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801a10c:	4798      	blx	r3
 801a10e:	0e24      	lsrs	r4, r4, #24
 801a110:	4b03      	ldr	r3, [pc, #12]	; (801a120 <_Color2Index_1616I+0x20>)
 801a112:	5d1b      	ldrb	r3, [r3, r4]
 801a114:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801a118:	bd10      	pop	{r4, pc}
 801a11a:	bf00      	nop
 801a11c:	0802178c 	.word	0x0802178c
 801a120:	08022114 	.word	0x08022114

0801a124 <_Index2Color_1616I>:
 801a124:	4b05      	ldr	r3, [pc, #20]	; (801a13c <_Index2Color_1616I+0x18>)
 801a126:	b510      	push	{r4, lr}
 801a128:	685b      	ldr	r3, [r3, #4]
 801a12a:	4604      	mov	r4, r0
 801a12c:	b2c0      	uxtb	r0, r0
 801a12e:	4798      	blx	r3
 801a130:	0924      	lsrs	r4, r4, #4
 801a132:	4b03      	ldr	r3, [pc, #12]	; (801a140 <_Index2Color_1616I+0x1c>)
 801a134:	5d1b      	ldrb	r3, [r3, r4]
 801a136:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801a13a:	bd10      	pop	{r4, pc}
 801a13c:	0802178c 	.word	0x0802178c
 801a140:	08022104 	.word	0x08022104

0801a144 <_GetIndexMask_1616I>:
 801a144:	20ff      	movs	r0, #255	; 0xff
 801a146:	4770      	bx	lr

0801a148 <_Color2IndexBulk_1616I>:
 801a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a14c:	4c0c      	ldr	r4, [pc, #48]	; (801a180 <_Color2IndexBulk_1616I+0x38>)
 801a14e:	f8df a034 	ldr.w	sl, [pc, #52]	; 801a184 <_Color2IndexBulk_1616I+0x3c>
 801a152:	f8d4 9000 	ldr.w	r9, [r4]
 801a156:	4607      	mov	r7, r0
 801a158:	460c      	mov	r4, r1
 801a15a:	4615      	mov	r5, r2
 801a15c:	4698      	mov	r8, r3
 801a15e:	f857 6b04 	ldr.w	r6, [r7], #4
 801a162:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 801a166:	0e36      	lsrs	r6, r6, #24
 801a168:	47c8      	blx	r9
 801a16a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801a16e:	3d01      	subs	r5, #1
 801a170:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a174:	7020      	strb	r0, [r4, #0]
 801a176:	4444      	add	r4, r8
 801a178:	d1f1      	bne.n	801a15e <_Color2IndexBulk_1616I+0x16>
 801a17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a17e:	bf00      	nop
 801a180:	0802178c 	.word	0x0802178c
 801a184:	08022114 	.word	0x08022114

0801a188 <_Index2ColorBulk_1616I>:
 801a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a18c:	4c0f      	ldr	r4, [pc, #60]	; (801a1cc <_Index2ColorBulk_1616I+0x44>)
 801a18e:	f8df a040 	ldr.w	sl, [pc, #64]	; 801a1d0 <_Index2ColorBulk_1616I+0x48>
 801a192:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a196:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 801a19a:	3f01      	subs	r7, #1
 801a19c:	1e55      	subs	r5, r2, #1
 801a19e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a1a2:	fb03 0405 	mla	r4, r3, r5, r0
 801a1a6:	f1c3 0800 	rsb	r8, r3, #0
 801a1aa:	e000      	b.n	801a1ae <_Index2ColorBulk_1616I+0x26>
 801a1ac:	3d01      	subs	r5, #1
 801a1ae:	7826      	ldrb	r6, [r4, #0]
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	0936      	lsrs	r6, r6, #4
 801a1b4:	47c8      	blx	r9
 801a1b6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801a1ba:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 801a1be:	4444      	add	r4, r8
 801a1c0:	f847 0904 	str.w	r0, [r7], #-4
 801a1c4:	2d00      	cmp	r5, #0
 801a1c6:	d1f1      	bne.n	801a1ac <_Index2ColorBulk_1616I+0x24>
 801a1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1cc:	0802178c 	.word	0x0802178c
 801a1d0:	08022104 	.word	0x08022104

0801a1d4 <_Color2Index_16>:
 801a1d4:	b4f0      	push	{r4, r5, r6, r7}
 801a1d6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801a1da:	1c79      	adds	r1, r7, #1
 801a1dc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801a1e0:	1c72      	adds	r2, r6, #1
 801a1e2:	2954      	cmp	r1, #84	; 0x54
 801a1e4:	b2c5      	uxtb	r5, r0
 801a1e6:	f105 0401 	add.w	r4, r5, #1
 801a1ea:	bf94      	ite	ls
 801a1ec:	2100      	movls	r1, #0
 801a1ee:	2101      	movhi	r1, #1
 801a1f0:	2a54      	cmp	r2, #84	; 0x54
 801a1f2:	bf94      	ite	ls
 801a1f4:	2200      	movls	r2, #0
 801a1f6:	2201      	movhi	r2, #1
 801a1f8:	0088      	lsls	r0, r1, #2
 801a1fa:	2c54      	cmp	r4, #84	; 0x54
 801a1fc:	bf94      	ite	ls
 801a1fe:	2400      	movls	r4, #0
 801a200:	2401      	movhi	r4, #1
 801a202:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a206:	1853      	adds	r3, r2, r1
 801a208:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801a20c:	4423      	add	r3, r4
 801a20e:	b902      	cbnz	r2, 801a212 <_Color2Index_16+0x3e>
 801a210:	b161      	cbz	r1, 801a22c <_Color2Index_16+0x58>
 801a212:	4437      	add	r7, r6
 801a214:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 801a218:	443d      	add	r5, r7
 801a21a:	4415      	add	r5, r2
 801a21c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 801a220:	fbb5 f3f3 	udiv	r3, r5, r3
 801a224:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 801a228:	bcf0      	pop	{r4, r5, r6, r7}
 801a22a:	4770      	bx	lr
 801a22c:	2c00      	cmp	r4, #0
 801a22e:	d1f0      	bne.n	801a212 <_Color2Index_16+0x3e>
 801a230:	e7fa      	b.n	801a228 <_Color2Index_16+0x54>
 801a232:	bf00      	nop

0801a234 <_Index2Color_16>:
 801a234:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 801a238:	f3c0 0380 	ubfx	r3, r0, #2, #1
 801a23c:	b430      	push	{r4, r5}
 801a23e:	ea02 0400 	and.w	r4, r2, r0
 801a242:	ea03 0100 	and.w	r1, r3, r0
 801a246:	ebc4 15c2 	rsb	r5, r4, r2, lsl #7
 801a24a:	f3c0 0240 	ubfx	r2, r0, #1, #1
 801a24e:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 801a252:	ebc1 15c3 	rsb	r5, r1, r3, lsl #7
 801a256:	ea02 0300 	and.w	r3, r2, r0
 801a25a:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 801a25e:	eb05 11c1 	add.w	r1, r5, r1, lsl #7
 801a262:	ebc3 10c2 	rsb	r0, r3, r2, lsl #7
 801a266:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 801a26a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801a26e:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 801a272:	bc30      	pop	{r4, r5}
 801a274:	4770      	bx	lr
 801a276:	bf00      	nop

0801a278 <_GetIndexMask_16>:
 801a278:	200f      	movs	r0, #15
 801a27a:	4770      	bx	lr

0801a27c <_DrawDownRect>:
 801a27c:	b510      	push	{r4, lr}
 801a27e:	b09c      	sub	sp, #112	; 0x70
 801a280:	4604      	mov	r4, r0
 801a282:	4668      	mov	r0, sp
 801a284:	f7fd fe62 	bl	8017f4c <GUI_SaveContext_W>
 801a288:	4b09      	ldr	r3, [pc, #36]	; (801a2b0 <_DrawDownRect+0x34>)
 801a28a:	6818      	ldr	r0, [r3, #0]
 801a28c:	f7fb fb68 	bl	8015960 <LCD_SetColor>
 801a290:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a294:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a298:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a29c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a2a0:	f7ff f9a8 	bl	80195f4 <GUI_DrawRect>
 801a2a4:	4668      	mov	r0, sp
 801a2a6:	f7fd fe5b 	bl	8017f60 <GUI_RestoreContext>
 801a2aa:	b01c      	add	sp, #112	; 0x70
 801a2ac:	bd10      	pop	{r4, pc}
 801a2ae:	bf00      	nop
 801a2b0:	20000284 	.word	0x20000284

0801a2b4 <_DrawUpRect>:
 801a2b4:	b510      	push	{r4, lr}
 801a2b6:	b09c      	sub	sp, #112	; 0x70
 801a2b8:	4604      	mov	r4, r0
 801a2ba:	4668      	mov	r0, sp
 801a2bc:	f7fd fe46 	bl	8017f4c <GUI_SaveContext_W>
 801a2c0:	4b09      	ldr	r3, [pc, #36]	; (801a2e8 <_DrawUpRect+0x34>)
 801a2c2:	6818      	ldr	r0, [r3, #0]
 801a2c4:	f7fb fb4c 	bl	8015960 <LCD_SetColor>
 801a2c8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a2cc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a2d0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a2d4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a2d8:	f7ff f98c 	bl	80195f4 <GUI_DrawRect>
 801a2dc:	4668      	mov	r0, sp
 801a2de:	f7fd fe3f 	bl	8017f60 <GUI_RestoreContext>
 801a2e2:	b01c      	add	sp, #112	; 0x70
 801a2e4:	bd10      	pop	{r4, pc}
 801a2e6:	bf00      	nop
 801a2e8:	20000284 	.word	0x20000284

0801a2ec <_DrawDown>:
 801a2ec:	b500      	push	{lr}
 801a2ee:	b09f      	sub	sp, #124	; 0x7c
 801a2f0:	4668      	mov	r0, sp
 801a2f2:	f7f5 f8d9 	bl	800f4a8 <WM_GetClientRect>
 801a2f6:	a802      	add	r0, sp, #8
 801a2f8:	f7fd fe28 	bl	8017f4c <GUI_SaveContext_W>
 801a2fc:	4b09      	ldr	r3, [pc, #36]	; (801a324 <_DrawDown+0x38>)
 801a2fe:	6818      	ldr	r0, [r3, #0]
 801a300:	f7fb fb2e 	bl	8015960 <LCD_SetColor>
 801a304:	f9bd 0000 	ldrsh.w	r0, [sp]
 801a308:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801a30c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a310:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a314:	f7ff f96e 	bl	80195f4 <GUI_DrawRect>
 801a318:	a802      	add	r0, sp, #8
 801a31a:	f7fd fe21 	bl	8017f60 <GUI_RestoreContext>
 801a31e:	b01f      	add	sp, #124	; 0x7c
 801a320:	f85d fb04 	ldr.w	pc, [sp], #4
 801a324:	20000284 	.word	0x20000284

0801a328 <_DrawUp>:
 801a328:	b500      	push	{lr}
 801a32a:	b09f      	sub	sp, #124	; 0x7c
 801a32c:	4668      	mov	r0, sp
 801a32e:	f7f5 f8bb 	bl	800f4a8 <WM_GetClientRect>
 801a332:	a802      	add	r0, sp, #8
 801a334:	f7fd fe0a 	bl	8017f4c <GUI_SaveContext_W>
 801a338:	4b09      	ldr	r3, [pc, #36]	; (801a360 <_DrawUp+0x38>)
 801a33a:	6818      	ldr	r0, [r3, #0]
 801a33c:	f7fb fb10 	bl	8015960 <LCD_SetColor>
 801a340:	f9bd 0000 	ldrsh.w	r0, [sp]
 801a344:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801a348:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a34c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a350:	f7ff f950 	bl	80195f4 <GUI_DrawRect>
 801a354:	a802      	add	r0, sp, #8
 801a356:	f7fd fe03 	bl	8017f60 <GUI_RestoreContext>
 801a35a:	b01f      	add	sp, #124	; 0x7c
 801a35c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a360:	20000284 	.word	0x20000284

0801a364 <_DrawDown>:
 801a364:	4770      	bx	lr
 801a366:	bf00      	nop

0801a368 <_DrawUp>:
 801a368:	4770      	bx	lr
 801a36a:	bf00      	nop

0801a36c <_DrawDownRect>:
 801a36c:	4770      	bx	lr
 801a36e:	bf00      	nop

0801a370 <_DrawUpRect>:
 801a370:	4770      	bx	lr
 801a372:	bf00      	nop

0801a374 <_DrawFlat>:
 801a374:	4770      	bx	lr
 801a376:	bf00      	nop

0801a378 <_DrawButton>:
 801a378:	b5b0      	push	{r4, r5, r7, lr}
 801a37a:	6883      	ldr	r3, [r0, #8]
 801a37c:	4a2c      	ldr	r2, [pc, #176]	; (801a430 <_DrawButton+0xb8>)
 801a37e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801a382:	4604      	mov	r4, r0
 801a384:	b084      	sub	sp, #16
 801a386:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801a388:	f7fd fe0e 	bl	8017fa8 <GUI_SetColor>
 801a38c:	6820      	ldr	r0, [r4, #0]
 801a38e:	f7fe feef 	bl	8019170 <GUI_ALLOC_LockH>
 801a392:	6a23      	ldr	r3, [r4, #32]
 801a394:	9003      	str	r0, [sp, #12]
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d042      	beq.n	801a422 <_DrawButton+0xaa>
 801a39c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 801a3a0:	2b02      	cmp	r3, #2
 801a3a2:	d03e      	beq.n	801a422 <_DrawButton+0xaa>
 801a3a4:	69e0      	ldr	r0, [r4, #28]
 801a3a6:	6921      	ldr	r1, [r4, #16]
 801a3a8:	69a2      	ldr	r2, [r4, #24]
 801a3aa:	f7fc fccd 	bl	8016d48 <GUI_DrawHLine>
 801a3ae:	6920      	ldr	r0, [r4, #16]
 801a3b0:	6961      	ldr	r1, [r4, #20]
 801a3b2:	69e2      	ldr	r2, [r4, #28]
 801a3b4:	f7fc fd1e 	bl	8016df4 <GUI_DrawVLine>
 801a3b8:	6961      	ldr	r1, [r4, #20]
 801a3ba:	69a0      	ldr	r0, [r4, #24]
 801a3bc:	69e2      	ldr	r2, [r4, #28]
 801a3be:	f7fc fd19 	bl	8016df4 <GUI_DrawVLine>
 801a3c2:	6a23      	ldr	r3, [r4, #32]
 801a3c4:	6961      	ldr	r1, [r4, #20]
 801a3c6:	69e7      	ldr	r7, [r4, #28]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	440f      	add	r7, r1
 801a3cc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801a3d0:	2b01      	cmp	r3, #1
 801a3d2:	ea4f 0767 	mov.w	r7, r7, asr #1
 801a3d6:	d106      	bne.n	801a3e6 <_DrawButton+0x6e>
 801a3d8:	9b03      	ldr	r3, [sp, #12]
 801a3da:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801a3de:	2b02      	cmp	r3, #2
 801a3e0:	bf18      	it	ne
 801a3e2:	f101 31ff 	addne.w	r1, r1, #4294967295
 801a3e6:	68ab      	ldr	r3, [r5, #8]
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	6920      	ldr	r0, [r4, #16]
 801a3ec:	69a2      	ldr	r2, [r4, #24]
 801a3ee:	68eb      	ldr	r3, [r5, #12]
 801a3f0:	9301      	str	r3, [sp, #4]
 801a3f2:	3101      	adds	r1, #1
 801a3f4:	463b      	mov	r3, r7
 801a3f6:	3001      	adds	r0, #1
 801a3f8:	3a01      	subs	r2, #1
 801a3fa:	f002 fe23 	bl	801d044 <GUI_DrawGradientV>
 801a3fe:	692b      	ldr	r3, [r5, #16]
 801a400:	9300      	str	r3, [sp, #0]
 801a402:	6920      	ldr	r0, [r4, #16]
 801a404:	69a2      	ldr	r2, [r4, #24]
 801a406:	69e3      	ldr	r3, [r4, #28]
 801a408:	6969      	ldr	r1, [r5, #20]
 801a40a:	9101      	str	r1, [sp, #4]
 801a40c:	3a01      	subs	r2, #1
 801a40e:	1c79      	adds	r1, r7, #1
 801a410:	3b01      	subs	r3, #1
 801a412:	3001      	adds	r0, #1
 801a414:	f002 fe16 	bl	801d044 <GUI_DrawGradientV>
 801a418:	a803      	add	r0, sp, #12
 801a41a:	f7fe febb 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a41e:	b004      	add	sp, #16
 801a420:	bdb0      	pop	{r4, r5, r7, pc}
 801a422:	6960      	ldr	r0, [r4, #20]
 801a424:	6921      	ldr	r1, [r4, #16]
 801a426:	69a2      	ldr	r2, [r4, #24]
 801a428:	f7fc fc8e 	bl	8016d48 <GUI_DrawHLine>
 801a42c:	e7ba      	b.n	801a3a4 <_DrawButton+0x2c>
 801a42e:	bf00      	nop
 801a430:	080219b4 	.word	0x080219b4

0801a434 <_DrawArrow>:
 801a434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a438:	4a38      	ldr	r2, [pc, #224]	; (801a51c <_DrawArrow+0xe8>)
 801a43a:	6883      	ldr	r3, [r0, #8]
 801a43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a440:	4606      	mov	r6, r0
 801a442:	b083      	sub	sp, #12
 801a444:	6998      	ldr	r0, [r3, #24]
 801a446:	f7fd fdaf 	bl	8017fa8 <GUI_SetColor>
 801a44a:	6830      	ldr	r0, [r6, #0]
 801a44c:	f7f5 ff04 	bl	8010258 <WM_GetWindowSizeY>
 801a450:	69f2      	ldr	r2, [r6, #28]
 801a452:	6973      	ldr	r3, [r6, #20]
 801a454:	4607      	mov	r7, r0
 801a456:	6830      	ldr	r0, [r6, #0]
 801a458:	ebc3 0802 	rsb	r8, r3, r2
 801a45c:	f7fe fe88 	bl	8019170 <GUI_ALLOC_LockH>
 801a460:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 801a464:	9001      	str	r0, [sp, #4]
 801a466:	f1b9 0f02 	cmp.w	r9, #2
 801a46a:	d14b      	bne.n	801a504 <_DrawArrow+0xd0>
 801a46c:	4b2c      	ldr	r3, [pc, #176]	; (801a520 <_DrawArrow+0xec>)
 801a46e:	17fc      	asrs	r4, r7, #31
 801a470:	fb83 2307 	smull	r2, r3, r3, r7
 801a474:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801a478:	a801      	add	r0, sp, #4
 801a47a:	f7fe fe8b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a47e:	6a31      	ldr	r1, [r6, #32]
 801a480:	43e2      	mvns	r2, r4
 801a482:	eb02 0308 	add.w	r3, r2, r8
 801a486:	7809      	ldrb	r1, [r1, #0]
 801a488:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a48c:	105b      	asrs	r3, r3, #1
 801a48e:	b9e1      	cbnz	r1, 801a4ca <_DrawArrow+0x96>
 801a490:	69f5      	ldr	r5, [r6, #28]
 801a492:	1aed      	subs	r5, r5, r3
 801a494:	3d01      	subs	r5, #1
 801a496:	f04f 38ff 	mov.w	r8, #4294967295
 801a49a:	6933      	ldr	r3, [r6, #16]
 801a49c:	69b7      	ldr	r7, [r6, #24]
 801a49e:	1aff      	subs	r7, r7, r3
 801a4a0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801a4a4:	2c00      	cmp	r4, #0
 801a4a6:	eb03 0767 	add.w	r7, r3, r7, asr #1
 801a4aa:	db0b      	blt.n	801a4c4 <_DrawArrow+0x90>
 801a4ac:	1b3e      	subs	r6, r7, r4
 801a4ae:	4628      	mov	r0, r5
 801a4b0:	4631      	mov	r1, r6
 801a4b2:	19e2      	adds	r2, r4, r7
 801a4b4:	3c01      	subs	r4, #1
 801a4b6:	f7fc fc47 	bl	8016d48 <GUI_DrawHLine>
 801a4ba:	1c63      	adds	r3, r4, #1
 801a4bc:	4445      	add	r5, r8
 801a4be:	f106 0601 	add.w	r6, r6, #1
 801a4c2:	d1f4      	bne.n	801a4ae <_DrawArrow+0x7a>
 801a4c4:	b003      	add	sp, #12
 801a4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4ca:	6975      	ldr	r5, [r6, #20]
 801a4cc:	07f9      	lsls	r1, r7, #31
 801a4ce:	441d      	add	r5, r3
 801a4d0:	d520      	bpl.n	801a514 <_DrawArrow+0xe0>
 801a4d2:	f1b9 0f02 	cmp.w	r9, #2
 801a4d6:	d01d      	beq.n	801a514 <_DrawArrow+0xe0>
 801a4d8:	f108 0101 	add.w	r1, r8, #1
 801a4dc:	2900      	cmp	r1, #0
 801a4de:	4608      	mov	r0, r1
 801a4e0:	bfb8      	it	lt
 801a4e2:	f108 0004 	addlt.w	r0, r8, #4
 801a4e6:	ebb4 0fa0 	cmp.w	r4, r0, asr #2
 801a4ea:	bfbc      	itt	lt
 801a4ec:	3401      	addlt	r4, #1
 801a4ee:	43e2      	mvnlt	r2, r4
 801a4f0:	440a      	add	r2, r1
 801a4f2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801a4f6:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801a4fa:	da0b      	bge.n	801a514 <_DrawArrow+0xe0>
 801a4fc:	3501      	adds	r5, #1
 801a4fe:	f04f 0801 	mov.w	r8, #1
 801a502:	e7ca      	b.n	801a49a <_DrawArrow+0x66>
 801a504:	4c07      	ldr	r4, [pc, #28]	; (801a524 <_DrawArrow+0xf0>)
 801a506:	fb84 3407 	smull	r3, r4, r4, r7
 801a50a:	443c      	add	r4, r7
 801a50c:	17fb      	asrs	r3, r7, #31
 801a50e:	ebc3 04a4 	rsb	r4, r3, r4, asr #2
 801a512:	e7b1      	b.n	801a478 <_DrawArrow+0x44>
 801a514:	f04f 0801 	mov.w	r8, #1
 801a518:	e7bf      	b.n	801a49a <_DrawArrow+0x66>
 801a51a:	bf00      	nop
 801a51c:	080219b4 	.word	0x080219b4
 801a520:	66666667 	.word	0x66666667
 801a524:	92492493 	.word	0x92492493

0801a528 <SPINBOX_DrawSkinFlex>:
 801a528:	6843      	ldr	r3, [r0, #4]
 801a52a:	b570      	push	{r4, r5, r6, lr}
 801a52c:	4604      	mov	r4, r0
 801a52e:	2b1d      	cmp	r3, #29
 801a530:	d812      	bhi.n	801a558 <SPINBOX_DrawSkinFlex+0x30>
 801a532:	e8df f003 	tbb	[pc, r3]
 801a536:	1117      	.short	0x1117
 801a538:	540f0f11 	.word	0x540f0f11
 801a53c:	13131111 	.word	0x13131111
 801a540:	11112411 	.word	0x11112411
 801a544:	11111111 	.word	0x11111111
 801a548:	11111111 	.word	0x11111111
 801a54c:	11111111 	.word	0x11111111
 801a550:	17111111 	.word	0x17111111
 801a554:	f7ff ff6e 	bl	801a434 <_DrawArrow>
 801a558:	2000      	movs	r0, #0
 801a55a:	bd70      	pop	{r4, r5, r6, pc}
 801a55c:	f7ff ff0c 	bl	801a378 <_DrawButton>
 801a560:	2000      	movs	r0, #0
 801a562:	bd70      	pop	{r4, r5, r6, pc}
 801a564:	492f      	ldr	r1, [pc, #188]	; (801a624 <SPINBOX_DrawSkinFlex+0xfc>)
 801a566:	6800      	ldr	r0, [r0, #0]
 801a568:	f000 f922 	bl	801a7b0 <SPINBOX__ApplyProps>
 801a56c:	6820      	ldr	r0, [r4, #0]
 801a56e:	f7f4 fa6f 	bl	800ea50 <WM_SetHasTrans>
 801a572:	6820      	ldr	r0, [r4, #0]
 801a574:	492c      	ldr	r1, [pc, #176]	; (801a628 <SPINBOX_DrawSkinFlex+0x100>)
 801a576:	f7ef f94b 	bl	8009810 <WIDGET_SetEffect>
 801a57a:	2000      	movs	r0, #0
 801a57c:	bd70      	pop	{r4, r5, r6, pc}
 801a57e:	4e29      	ldr	r6, [pc, #164]	; (801a624 <SPINBOX_DrawSkinFlex+0xfc>)
 801a580:	2500      	movs	r5, #0
 801a582:	68a3      	ldr	r3, [r4, #8]
 801a584:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a588:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a58c:	f7fd fd0c 	bl	8017fa8 <GUI_SetColor>
 801a590:	2d00      	cmp	r5, #0
 801a592:	d02e      	beq.n	801a5f2 <SPINBOX_DrawSkinFlex+0xca>
 801a594:	6960      	ldr	r0, [r4, #20]
 801a596:	6921      	ldr	r1, [r4, #16]
 801a598:	69a2      	ldr	r2, [r4, #24]
 801a59a:	4428      	add	r0, r5
 801a59c:	3102      	adds	r1, #2
 801a59e:	3a02      	subs	r2, #2
 801a5a0:	f7fc fbd2 	bl	8016d48 <GUI_DrawHLine>
 801a5a4:	69e0      	ldr	r0, [r4, #28]
 801a5a6:	6921      	ldr	r1, [r4, #16]
 801a5a8:	69a2      	ldr	r2, [r4, #24]
 801a5aa:	1b40      	subs	r0, r0, r5
 801a5ac:	3102      	adds	r1, #2
 801a5ae:	3a02      	subs	r2, #2
 801a5b0:	f7fc fbca 	bl	8016d48 <GUI_DrawHLine>
 801a5b4:	6920      	ldr	r0, [r4, #16]
 801a5b6:	6961      	ldr	r1, [r4, #20]
 801a5b8:	69e2      	ldr	r2, [r4, #28]
 801a5ba:	4428      	add	r0, r5
 801a5bc:	3102      	adds	r1, #2
 801a5be:	3a02      	subs	r2, #2
 801a5c0:	f7fc fc18 	bl	8016df4 <GUI_DrawVLine>
 801a5c4:	69a0      	ldr	r0, [r4, #24]
 801a5c6:	6961      	ldr	r1, [r4, #20]
 801a5c8:	69e2      	ldr	r2, [r4, #28]
 801a5ca:	1b40      	subs	r0, r0, r5
 801a5cc:	3102      	adds	r1, #2
 801a5ce:	3501      	adds	r5, #1
 801a5d0:	3a02      	subs	r2, #2
 801a5d2:	f7fc fc0f 	bl	8016df4 <GUI_DrawVLine>
 801a5d6:	2d02      	cmp	r5, #2
 801a5d8:	d1d3      	bne.n	801a582 <SPINBOX_DrawSkinFlex+0x5a>
 801a5da:	2000      	movs	r0, #0
 801a5dc:	bd70      	pop	{r4, r5, r6, pc}
 801a5de:	6882      	ldr	r2, [r0, #8]
 801a5e0:	4b10      	ldr	r3, [pc, #64]	; (801a624 <SPINBOX_DrawSkinFlex+0xfc>)
 801a5e2:	6800      	ldr	r0, [r0, #0]
 801a5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5e8:	69d9      	ldr	r1, [r3, #28]
 801a5ea:	f7f1 fa95 	bl	800bb18 <SPINBOX__DrawBk>
 801a5ee:	2000      	movs	r0, #0
 801a5f0:	bd70      	pop	{r4, r5, r6, pc}
 801a5f2:	6920      	ldr	r0, [r4, #16]
 801a5f4:	6961      	ldr	r1, [r4, #20]
 801a5f6:	3001      	adds	r0, #1
 801a5f8:	3101      	adds	r1, #1
 801a5fa:	f7fc fbd1 	bl	8016da0 <GUI_DrawPixel>
 801a5fe:	6920      	ldr	r0, [r4, #16]
 801a600:	69e1      	ldr	r1, [r4, #28]
 801a602:	3001      	adds	r0, #1
 801a604:	3901      	subs	r1, #1
 801a606:	f7fc fbcb 	bl	8016da0 <GUI_DrawPixel>
 801a60a:	69a0      	ldr	r0, [r4, #24]
 801a60c:	6961      	ldr	r1, [r4, #20]
 801a60e:	3801      	subs	r0, #1
 801a610:	3101      	adds	r1, #1
 801a612:	f7fc fbc5 	bl	8016da0 <GUI_DrawPixel>
 801a616:	69a0      	ldr	r0, [r4, #24]
 801a618:	69e1      	ldr	r1, [r4, #28]
 801a61a:	3801      	subs	r0, #1
 801a61c:	3901      	subs	r1, #1
 801a61e:	f7fc fbbf 	bl	8016da0 <GUI_DrawPixel>
 801a622:	e7b7      	b.n	801a594 <SPINBOX_DrawSkinFlex+0x6c>
 801a624:	080219b4 	.word	0x080219b4
 801a628:	0802249c 	.word	0x0802249c

0801a62c <_Create>:
 801a62c:	b570      	push	{r4, r5, r6, lr}
 801a62e:	b08a      	sub	sp, #40	; 0x28
 801a630:	2400      	movs	r4, #0
 801a632:	4606      	mov	r6, r0
 801a634:	9401      	str	r4, [sp, #4]
 801a636:	9402      	str	r4, [sp, #8]
 801a638:	9403      	str	r4, [sp, #12]
 801a63a:	9404      	str	r4, [sp, #16]
 801a63c:	9405      	str	r4, [sp, #20]
 801a63e:	9406      	str	r4, [sp, #24]
 801a640:	9407      	str	r4, [sp, #28]
 801a642:	9408      	str	r4, [sp, #32]
 801a644:	9409      	str	r4, [sp, #36]	; 0x24
 801a646:	f7fe fd93 	bl	8019170 <GUI_ALLOC_LockH>
 801a64a:	ab0a      	add	r3, sp, #40	; 0x28
 801a64c:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 801a650:	f843 0d28 	str.w	r0, [r3, #-40]!
 801a654:	4668      	mov	r0, sp
 801a656:	6895      	ldr	r5, [r2, #8]
 801a658:	f7fe fd9c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a65c:	a80a      	add	r0, sp, #40	; 0x28
 801a65e:	9402      	str	r4, [sp, #8]
 801a660:	f840 6d24 	str.w	r6, [r0, #-36]!
 801a664:	682b      	ldr	r3, [r5, #0]
 801a666:	4798      	blx	r3
 801a668:	b00a      	add	sp, #40	; 0x28
 801a66a:	bd70      	pop	{r4, r5, r6, pc}

0801a66c <_Paint>:
 801a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a670:	b08c      	sub	sp, #48	; 0x30
 801a672:	4604      	mov	r4, r0
 801a674:	f7fe fd7c 	bl	8019170 <GUI_ALLOC_LockH>
 801a678:	4603      	mov	r3, r0
 801a67a:	a80c      	add	r0, sp, #48	; 0x30
 801a67c:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801a680:	f840 3d2c 	str.w	r3, [r0, #-44]!
 801a684:	f893 70a3 	ldrb.w	r7, [r3, #163]	; 0xa3
 801a688:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 801a68c:	f893 608c 	ldrb.w	r6, [r3, #140]	; 0x8c
 801a690:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 801a694:	f7fe fd7e 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a698:	4620      	mov	r0, r4
 801a69a:	9402      	str	r4, [sp, #8]
 801a69c:	f7f4 f80a 	bl	800e6b4 <WM__IsEnabled>
 801a6a0:	2800      	cmp	r0, #0
 801a6a2:	d156      	bne.n	801a752 <_Paint+0xe6>
 801a6a4:	2303      	movs	r3, #3
 801a6a6:	9304      	str	r3, [sp, #16]
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	f7f5 fdb7 	bl	801021c <WM_GetWindowSizeX>
 801a6ae:	4681      	mov	r9, r0
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	f7f5 fdd1 	bl	8010258 <WM_GetWindowSizeY>
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	3801      	subs	r0, #1
 801a6ba:	f109 31ff 	add.w	r1, r9, #4294967295
 801a6be:	220b      	movs	r2, #11
 801a6c0:	9009      	str	r0, [sp, #36]	; 0x24
 801a6c2:	9108      	str	r1, [sp, #32]
 801a6c4:	9306      	str	r3, [sp, #24]
 801a6c6:	9307      	str	r3, [sp, #28]
 801a6c8:	9203      	str	r2, [sp, #12]
 801a6ca:	a802      	add	r0, sp, #8
 801a6cc:	47a8      	blx	r5
 801a6ce:	2e01      	cmp	r6, #1
 801a6d0:	d065      	beq.n	801a79e <_Paint+0x132>
 801a6d2:	d368      	bcc.n	801a7a6 <_Paint+0x13a>
 801a6d4:	2e02      	cmp	r6, #2
 801a6d6:	d034      	beq.n	801a742 <_Paint+0xd6>
 801a6d8:	2305      	movs	r3, #5
 801a6da:	9303      	str	r3, [sp, #12]
 801a6dc:	a802      	add	r0, sp, #8
 801a6de:	47a8      	blx	r5
 801a6e0:	9b04      	ldr	r3, [sp, #16]
 801a6e2:	2b03      	cmp	r3, #3
 801a6e4:	d046      	beq.n	801a774 <_Paint+0x108>
 801a6e6:	07fa      	lsls	r2, r7, #31
 801a6e8:	d501      	bpl.n	801a6ee <_Paint+0x82>
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	9304      	str	r3, [sp, #16]
 801a6ee:	ab0c      	add	r3, sp, #48	; 0x30
 801a6f0:	2600      	movs	r6, #0
 801a6f2:	f803 6d30 	strb.w	r6, [r3, #-48]!
 801a6f6:	a902      	add	r1, sp, #8
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	930a      	str	r3, [sp, #40]	; 0x28
 801a6fc:	f7f2 f840 	bl	800c780 <SPINBOX__GetButtonRectEx>
 801a700:	2309      	movs	r3, #9
 801a702:	9303      	str	r3, [sp, #12]
 801a704:	a802      	add	r0, sp, #8
 801a706:	47a8      	blx	r5
 801a708:	2304      	movs	r3, #4
 801a70a:	9303      	str	r3, [sp, #12]
 801a70c:	a802      	add	r0, sp, #8
 801a70e:	47a8      	blx	r5
 801a710:	2301      	movs	r3, #1
 801a712:	f88d 3000 	strb.w	r3, [sp]
 801a716:	07bb      	lsls	r3, r7, #30
 801a718:	d411      	bmi.n	801a73e <_Paint+0xd2>
 801a71a:	2302      	movs	r3, #2
 801a71c:	9304      	str	r3, [sp, #16]
 801a71e:	a902      	add	r1, sp, #8
 801a720:	4620      	mov	r0, r4
 801a722:	f7f2 f82d 	bl	800c780 <SPINBOX__GetButtonRectEx>
 801a726:	2308      	movs	r3, #8
 801a728:	9303      	str	r3, [sp, #12]
 801a72a:	eb0d 0003 	add.w	r0, sp, r3
 801a72e:	47a8      	blx	r5
 801a730:	2303      	movs	r3, #3
 801a732:	a802      	add	r0, sp, #8
 801a734:	9303      	str	r3, [sp, #12]
 801a736:	47a8      	blx	r5
 801a738:	b00c      	add	sp, #48	; 0x30
 801a73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a73e:	9604      	str	r6, [sp, #16]
 801a740:	e7ed      	b.n	801a71e <_Paint+0xb2>
 801a742:	9a08      	ldr	r2, [sp, #32]
 801a744:	9b06      	ldr	r3, [sp, #24]
 801a746:	ebc8 0202 	rsb	r2, r8, r2
 801a74a:	4443      	add	r3, r8
 801a74c:	9208      	str	r2, [sp, #32]
 801a74e:	9306      	str	r3, [sp, #24]
 801a750:	e7c2      	b.n	801a6d8 <_Paint+0x6c>
 801a752:	4620      	mov	r0, r4
 801a754:	f7f5 fa60 	bl	800fc18 <WM_HasFocus>
 801a758:	4682      	mov	sl, r0
 801a75a:	4648      	mov	r0, r9
 801a75c:	f7f5 fa5c 	bl	800fc18 <WM_HasFocus>
 801a760:	f1ba 0f00 	cmp.w	sl, #0
 801a764:	d103      	bne.n	801a76e <_Paint+0x102>
 801a766:	b910      	cbnz	r0, 801a76e <_Paint+0x102>
 801a768:	2302      	movs	r3, #2
 801a76a:	9304      	str	r3, [sp, #16]
 801a76c:	e79c      	b.n	801a6a8 <_Paint+0x3c>
 801a76e:	2301      	movs	r3, #1
 801a770:	9304      	str	r3, [sp, #16]
 801a772:	e799      	b.n	801a6a8 <_Paint+0x3c>
 801a774:	ab0c      	add	r3, sp, #48	; 0x30
 801a776:	2200      	movs	r2, #0
 801a778:	f803 2d30 	strb.w	r2, [r3, #-48]!
 801a77c:	a902      	add	r1, sp, #8
 801a77e:	4620      	mov	r0, r4
 801a780:	930a      	str	r3, [sp, #40]	; 0x28
 801a782:	f7f1 fffd 	bl	800c780 <SPINBOX__GetButtonRectEx>
 801a786:	2309      	movs	r3, #9
 801a788:	9303      	str	r3, [sp, #12]
 801a78a:	a802      	add	r0, sp, #8
 801a78c:	47a8      	blx	r5
 801a78e:	2304      	movs	r3, #4
 801a790:	9303      	str	r3, [sp, #12]
 801a792:	a802      	add	r0, sp, #8
 801a794:	47a8      	blx	r5
 801a796:	2301      	movs	r3, #1
 801a798:	f88d 3000 	strb.w	r3, [sp]
 801a79c:	e7bf      	b.n	801a71e <_Paint+0xb2>
 801a79e:	9b06      	ldr	r3, [sp, #24]
 801a7a0:	4443      	add	r3, r8
 801a7a2:	9306      	str	r3, [sp, #24]
 801a7a4:	e798      	b.n	801a6d8 <_Paint+0x6c>
 801a7a6:	9b08      	ldr	r3, [sp, #32]
 801a7a8:	ebc8 0303 	rsb	r3, r8, r3
 801a7ac:	9308      	str	r3, [sp, #32]
 801a7ae:	e793      	b.n	801a6d8 <_Paint+0x6c>

0801a7b0 <SPINBOX__ApplyProps>:
 801a7b0:	b530      	push	{r4, r5, lr}
 801a7b2:	b083      	sub	sp, #12
 801a7b4:	460d      	mov	r5, r1
 801a7b6:	f7fe fcdb 	bl	8019170 <GUI_ALLOC_LockH>
 801a7ba:	ab02      	add	r3, sp, #8
 801a7bc:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 801a7c0:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7fe fce5 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a7ca:	68eb      	ldr	r3, [r5, #12]
 801a7cc:	4620      	mov	r0, r4
 801a7ce:	69da      	ldr	r2, [r3, #28]
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	f7f3 fad3 	bl	800dd7c <EDIT_SetBkColor>
 801a7d6:	68eb      	ldr	r3, [r5, #12]
 801a7d8:	4620      	mov	r0, r4
 801a7da:	6a1a      	ldr	r2, [r3, #32]
 801a7dc:	2100      	movs	r1, #0
 801a7de:	f7f3 faed 	bl	800ddbc <EDIT_SetTextColor>
 801a7e2:	68ab      	ldr	r3, [r5, #8]
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	69da      	ldr	r2, [r3, #28]
 801a7e8:	2101      	movs	r1, #1
 801a7ea:	f7f3 fac7 	bl	800dd7c <EDIT_SetBkColor>
 801a7ee:	68ab      	ldr	r3, [r5, #8]
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	6a1a      	ldr	r2, [r3, #32]
 801a7f4:	2101      	movs	r1, #1
 801a7f6:	f7f3 fae1 	bl	800ddbc <EDIT_SetTextColor>
 801a7fa:	b003      	add	sp, #12
 801a7fc:	bd30      	pop	{r4, r5, pc}
 801a7fe:	bf00      	nop

0801a800 <SCROLLBAR_Callback>:
 801a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a804:	6845      	ldr	r5, [r0, #4]
 801a806:	b08f      	sub	sp, #60	; 0x3c
 801a808:	4604      	mov	r4, r0
 801a80a:	4601      	mov	r1, r0
 801a80c:	4628      	mov	r0, r5
 801a80e:	f7ee fe81 	bl	8009514 <WIDGET_HandleActive>
 801a812:	b328      	cbz	r0, 801a860 <SCROLLBAR_Callback+0x60>
 801a814:	6823      	ldr	r3, [r4, #0]
 801a816:	2b23      	cmp	r3, #35	; 0x23
 801a818:	f000 8081 	beq.w	801a91e <SCROLLBAR_Callback+0x11e>
 801a81c:	dc12      	bgt.n	801a844 <SCROLLBAR_Callback+0x44>
 801a81e:	2b0e      	cmp	r3, #14
 801a820:	d021      	beq.n	801a866 <SCROLLBAR_Callback+0x66>
 801a822:	2b0f      	cmp	r3, #15
 801a824:	f000 808c 	beq.w	801a940 <SCROLLBAR_Callback+0x140>
 801a828:	2b0b      	cmp	r3, #11
 801a82a:	d116      	bne.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a82c:	4628      	mov	r0, r5
 801a82e:	f7f5 f939 	bl	800faa4 <WM_GetScrollPartner>
 801a832:	f7f7 f927 	bl	8011a84 <WM_InvalidateWindow>
 801a836:	4628      	mov	r0, r5
 801a838:	f7f5 f896 	bl	800f968 <WM_GetParent>
 801a83c:	2125      	movs	r1, #37	; 0x25
 801a83e:	f7f5 fa77 	bl	800fd30 <WM_SendMessageNoPara>
 801a842:	e00a      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a844:	f240 1213 	movw	r2, #275	; 0x113
 801a848:	4293      	cmp	r3, r2
 801a84a:	d047      	beq.n	801a8dc <SCROLLBAR_Callback+0xdc>
 801a84c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a850:	f000 80a2 	beq.w	801a998 <SCROLLBAR_Callback+0x198>
 801a854:	2b24      	cmp	r3, #36	; 0x24
 801a856:	f000 8081 	beq.w	801a95c <SCROLLBAR_Callback+0x15c>
 801a85a:	4620      	mov	r0, r4
 801a85c:	f7f7 fe78 	bl	8012550 <WM_DefaultProc>
 801a860:	b00f      	add	sp, #60	; 0x3c
 801a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a866:	4628      	mov	r0, r5
 801a868:	f7fe fc82 	bl	8019170 <GUI_ALLOC_LockH>
 801a86c:	ab0e      	add	r3, sp, #56	; 0x38
 801a86e:	6d46      	ldr	r6, [r0, #84]	; 0x54
 801a870:	f843 0d2c 	str.w	r0, [r3, #-44]!
 801a874:	4618      	mov	r0, r3
 801a876:	f7fe fc8d 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a87a:	68e3      	ldr	r3, [r4, #12]
 801a87c:	685a      	ldr	r2, [r3, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	2a00      	cmp	r2, #0
 801a882:	ddea      	ble.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a884:	3b10      	subs	r3, #16
 801a886:	2b12      	cmp	r3, #18
 801a888:	d8e7      	bhi.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a88a:	a201      	add	r2, pc, #4	; (adr r2, 801a890 <SCROLLBAR_Callback+0x90>)
 801a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a890:	0801aae3 	.word	0x0801aae3
 801a894:	0801aae3 	.word	0x0801aae3
 801a898:	0801ab99 	.word	0x0801ab99
 801a89c:	0801ab99 	.word	0x0801ab99
 801a8a0:	0801a85b 	.word	0x0801a85b
 801a8a4:	0801a85b 	.word	0x0801a85b
 801a8a8:	0801a85b 	.word	0x0801a85b
 801a8ac:	0801a85b 	.word	0x0801a85b
 801a8b0:	0801a85b 	.word	0x0801a85b
 801a8b4:	0801a85b 	.word	0x0801a85b
 801a8b8:	0801a85b 	.word	0x0801a85b
 801a8bc:	0801a85b 	.word	0x0801a85b
 801a8c0:	0801a85b 	.word	0x0801a85b
 801a8c4:	0801a85b 	.word	0x0801a85b
 801a8c8:	0801a85b 	.word	0x0801a85b
 801a8cc:	0801a85b 	.word	0x0801a85b
 801a8d0:	0801a85b 	.word	0x0801a85b
 801a8d4:	0801ab4b 	.word	0x0801ab4b
 801a8d8:	0801abdd 	.word	0x0801abdd
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f7fe fc47 	bl	8019170 <GUI_ALLOC_LockH>
 801a8e2:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 801a8e4:	9003      	str	r0, [sp, #12]
 801a8e6:	2e00      	cmp	r6, #0
 801a8e8:	f000 80c8 	beq.w	801aa7c <SCROLLBAR_Callback+0x27c>
 801a8ec:	2d00      	cmp	r5, #0
 801a8ee:	f040 81bb 	bne.w	801ac68 <SCROLLBAR_Callback+0x468>
 801a8f2:	2e00      	cmp	r6, #0
 801a8f4:	f340 80c2 	ble.w	801aa7c <SCROLLBAR_Callback+0x27c>
 801a8f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a8fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	bfb4      	ite	lt
 801a900:	2300      	movlt	r3, #0
 801a902:	2301      	movge	r3, #1
 801a904:	dd00      	ble.n	801a908 <SCROLLBAR_Callback+0x108>
 801a906:	6502      	str	r2, [r0, #80]	; 0x50
 801a908:	2b00      	cmp	r3, #0
 801a90a:	f040 817d 	bne.w	801ac08 <SCROLLBAR_Callback+0x408>
 801a90e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a910:	2132      	movs	r1, #50	; 0x32
 801a912:	f7f4 f87f 	bl	800ea14 <WM_RestartTimer>
 801a916:	a803      	add	r0, sp, #12
 801a918:	f7fe fc3c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a91c:	e79d      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a91e:	4628      	mov	r0, r5
 801a920:	f7fe fc26 	bl	8019170 <GUI_ALLOC_LockH>
 801a924:	9005      	str	r0, [sp, #20]
 801a926:	2800      	cmp	r0, #0
 801a928:	d097      	beq.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a92a:	68e3      	ldr	r3, [r4, #12]
 801a92c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 801a92e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801a930:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801a932:	605a      	str	r2, [r3, #4]
 801a934:	601d      	str	r5, [r3, #0]
 801a936:	6099      	str	r1, [r3, #8]
 801a938:	a805      	add	r0, sp, #20
 801a93a:	f7fe fc2b 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a93e:	e78c      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a940:	4628      	mov	r0, r5
 801a942:	f7fe fc15 	bl	8019170 <GUI_ALLOC_LockH>
 801a946:	9005      	str	r0, [sp, #20]
 801a948:	2800      	cmp	r0, #0
 801a94a:	d089      	beq.n	801a860 <SCROLLBAR_Callback+0x60>
 801a94c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801a94e:	a805      	add	r0, sp, #20
 801a950:	681c      	ldr	r4, [r3, #0]
 801a952:	f7fe fc1f 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a956:	4628      	mov	r0, r5
 801a958:	47a0      	blx	r4
 801a95a:	e781      	b.n	801a860 <SCROLLBAR_Callback+0x60>
 801a95c:	4628      	mov	r0, r5
 801a95e:	68e6      	ldr	r6, [r4, #12]
 801a960:	f7fe fc06 	bl	8019170 <GUI_ALLOC_LockH>
 801a964:	6833      	ldr	r3, [r6, #0]
 801a966:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801a968:	9005      	str	r0, [sp, #20]
 801a96a:	4293      	cmp	r3, r2
 801a96c:	f040 80b6 	bne.w	801aadc <SCROLLBAR_Callback+0x2dc>
 801a970:	6d47      	ldr	r7, [r0, #84]	; 0x54
 801a972:	68b1      	ldr	r1, [r6, #8]
 801a974:	6872      	ldr	r2, [r6, #4]
 801a976:	428f      	cmp	r7, r1
 801a978:	f000 8156 	beq.w	801ac28 <SCROLLBAR_Callback+0x428>
 801a97c:	64c3      	str	r3, [r0, #76]	; 0x4c
 801a97e:	6541      	str	r1, [r0, #84]	; 0x54
 801a980:	6502      	str	r2, [r0, #80]	; 0x50
 801a982:	4628      	mov	r0, r5
 801a984:	f7f7 f87e 	bl	8011a84 <WM_InvalidateWindow>
 801a988:	a805      	add	r0, sp, #20
 801a98a:	f7fe fc03 	bl	8019194 <GUI_ALLOC_UnlockH>
 801a98e:	4628      	mov	r0, r5
 801a990:	2105      	movs	r1, #5
 801a992:	f7f5 f97b 	bl	800fc8c <WM_NotifyParent>
 801a996:	e760      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801a998:	68e6      	ldr	r6, [r4, #12]
 801a99a:	2e00      	cmp	r6, #0
 801a99c:	f43f af5d 	beq.w	801a85a <SCROLLBAR_Callback+0x5a>
 801a9a0:	7a37      	ldrb	r7, [r6, #8]
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	2f00      	cmp	r7, #0
 801a9a6:	d072      	beq.n	801aa8e <SCROLLBAR_Callback+0x28e>
 801a9a8:	f7fe fbe2 	bl	8019170 <GUI_ALLOC_LockH>
 801a9ac:	9003      	str	r0, [sp, #12]
 801a9ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801a9b0:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 801a9b4:	a905      	add	r1, sp, #20
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	4798      	blx	r3
 801a9ba:	9b03      	ldr	r3, [sp, #12]
 801a9bc:	6831      	ldr	r1, [r6, #0]
 801a9be:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801a9c2:	6870      	ldr	r0, [r6, #4]
 801a9c4:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 801a9c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a9c8:	f018 0f08 	tst.w	r8, #8
 801a9cc:	bf14      	ite	ne
 801a9ce:	e886 0003 	stmiane.w	r6, {r0, r1}
 801a9d2:	460e      	moveq	r6, r1
 801a9d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801a9d6:	bf18      	it	ne
 801a9d8:	4606      	movne	r6, r0
 801a9da:	2903      	cmp	r1, #3
 801a9dc:	ebc7 0b02 	rsb	fp, r7, r2
 801a9e0:	f000 81c0 	beq.w	801ad64 <SCROLLBAR_Callback+0x564>
 801a9e4:	9806      	ldr	r0, [sp, #24]
 801a9e6:	42b0      	cmp	r0, r6
 801a9e8:	f2c0 8137 	blt.w	801ac5a <SCROLLBAR_Callback+0x45a>
 801a9ec:	2902      	cmp	r1, #2
 801a9ee:	f000 81f3 	beq.w	801add8 <SCROLLBAR_Callback+0x5d8>
 801a9f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801a9f4:	2a00      	cmp	r2, #0
 801a9f6:	f040 8207 	bne.w	801ae08 <SCROLLBAR_Callback+0x608>
 801a9fa:	2202      	movs	r2, #2
 801a9fc:	659a      	str	r2, [r3, #88]	; 0x58
 801a9fe:	9806      	ldr	r0, [sp, #24]
 801aa00:	f109 39ff 	add.w	r9, r9, #4294967295
 801aa04:	f04f 37ff 	mov.w	r7, #4294967295
 801aa08:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa0a:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
 801aa0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa10:	2900      	cmp	r1, #0
 801aa12:	f040 8181 	bne.w	801ad18 <SCROLLBAR_Callback+0x518>
 801aa16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801aa18:	2a01      	cmp	r2, #1
 801aa1a:	bf04      	itt	eq
 801aa1c:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 801aa1e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 801aa22:	6619      	str	r1, [r3, #96]	; 0x60
 801aa24:	a803      	add	r0, sp, #12
 801aa26:	f7fe fbb5 	bl	8019194 <GUI_ALLOC_UnlockH>
 801aa2a:	2f00      	cmp	r7, #0
 801aa2c:	f000 8102 	beq.w	801ac34 <SCROLLBAR_Callback+0x434>
 801aa30:	f1ba 0f00 	cmp.w	sl, #0
 801aa34:	f000 81bb 	beq.w	801adae <SCROLLBAR_Callback+0x5ae>
 801aa38:	4628      	mov	r0, r5
 801aa3a:	2101      	movs	r1, #1
 801aa3c:	f7f4 f928 	bl	800ec90 <WM_SetCapture>
 801aa40:	2d00      	cmp	r5, #0
 801aa42:	f040 8145 	bne.w	801acd0 <SCROLLBAR_Callback+0x4d0>
 801aa46:	f418 7f80 	tst.w	r8, #256	; 0x100
 801aa4a:	f47f af06 	bne.w	801a85a <SCROLLBAR_Callback+0x5a>
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f7fe fb8e 	bl	8019170 <GUI_ALLOC_LockH>
 801aa54:	ab0e      	add	r3, sp, #56	; 0x38
 801aa56:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801aa58:	f843 0d28 	str.w	r0, [r3, #-40]!
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7fe fb99 	bl	8019194 <GUI_ALLOC_UnlockH>
 801aa62:	f44f 7180 	mov.w	r1, #256	; 0x100
 801aa66:	4628      	mov	r0, r5
 801aa68:	f7ee fce8 	bl	800943c <WIDGET_OrState>
 801aa6c:	07b1      	lsls	r1, r6, #30
 801aa6e:	f57f aef4 	bpl.w	801a85a <SCROLLBAR_Callback+0x5a>
 801aa72:	4628      	mov	r0, r5
 801aa74:	2101      	movs	r1, #1
 801aa76:	f7f5 f909 	bl	800fc8c <WM_NotifyParent>
 801aa7a:	e6ee      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801aa7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801aa7e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801aa80:	4293      	cmp	r3, r2
 801aa82:	bfcc      	ite	gt
 801aa84:	2300      	movgt	r3, #0
 801aa86:	2301      	movle	r3, #1
 801aa88:	f6bf af3e 	bge.w	801a908 <SCROLLBAR_Callback+0x108>
 801aa8c:	e73b      	b.n	801a906 <SCROLLBAR_Callback+0x106>
 801aa8e:	f7fe fb6f 	bl	8019170 <GUI_ALLOC_LockH>
 801aa92:	ab0e      	add	r3, sp, #56	; 0x38
 801aa94:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801aa96:	f843 0d2c 	str.w	r0, [r3, #-44]!
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7fe fb7a 	bl	8019194 <GUI_ALLOC_UnlockH>
 801aaa0:	05f2      	lsls	r2, r6, #23
 801aaa2:	f57f aeda 	bpl.w	801a85a <SCROLLBAR_Callback+0x5a>
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801aaac:	f7ee fce4 	bl	8009478 <WIDGET_AndState>
 801aab0:	4628      	mov	r0, r5
 801aab2:	f7fe fb5d 	bl	8019170 <GUI_ALLOC_LockH>
 801aab6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801aab8:	9004      	str	r0, [sp, #16]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f040 818f 	bne.w	801adde <SCROLLBAR_Callback+0x5de>
 801aac0:	2300      	movs	r3, #0
 801aac2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801aac4:	6583      	str	r3, [r0, #88]	; 0x58
 801aac6:	a804      	add	r0, sp, #16
 801aac8:	f7fe fb64 	bl	8019194 <GUI_ALLOC_UnlockH>
 801aacc:	07b3      	lsls	r3, r6, #30
 801aace:	f57f aec4 	bpl.w	801a85a <SCROLLBAR_Callback+0x5a>
 801aad2:	4628      	mov	r0, r5
 801aad4:	2102      	movs	r1, #2
 801aad6:	f7f5 f8d9 	bl	800fc8c <WM_NotifyParent>
 801aada:	e6be      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801aadc:	68b1      	ldr	r1, [r6, #8]
 801aade:	6872      	ldr	r2, [r6, #4]
 801aae0:	e74c      	b.n	801a97c <SCROLLBAR_Callback+0x17c>
 801aae2:	2d00      	cmp	r5, #0
 801aae4:	f43f aeb9 	beq.w	801a85a <SCROLLBAR_Callback+0x5a>
 801aae8:	f7fb ffc2 	bl	8016a70 <GUI_Lock>
 801aaec:	4628      	mov	r0, r5
 801aaee:	f7fe fb3f 	bl	8019170 <GUI_ALLOC_LockH>
 801aaf2:	ab0e      	add	r3, sp, #56	; 0x38
 801aaf4:	6d06      	ldr	r6, [r0, #80]	; 0x50
 801aaf6:	f843 0d28 	str.w	r0, [r3, #-40]!
 801aafa:	4618      	mov	r0, r3
 801aafc:	f7fe fb4a 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ab00:	f7fb ffb6 	bl	8016a70 <GUI_Lock>
 801ab04:	4628      	mov	r0, r5
 801ab06:	f7fe fb33 	bl	8019170 <GUI_ALLOC_LockH>
 801ab0a:	1e73      	subs	r3, r6, #1
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	9005      	str	r0, [sp, #20]
 801ab10:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801ab12:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801ab14:	f2c0 8191 	blt.w	801ae3a <SCROLLBAR_Callback+0x63a>
 801ab18:	1a8a      	subs	r2, r1, r2
 801ab1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	da5a      	bge.n	801abd8 <SCROLLBAR_Callback+0x3d8>
 801ab22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ab24:	4293      	cmp	r3, r2
 801ab26:	f000 81a9 	beq.w	801ae7c <SCROLLBAR_Callback+0x67c>
 801ab2a:	6502      	str	r2, [r0, #80]	; 0x50
 801ab2c:	4628      	mov	r0, r5
 801ab2e:	f7f6 ffa9 	bl	8011a84 <WM_InvalidateWindow>
 801ab32:	a805      	add	r0, sp, #20
 801ab34:	f7fe fb2e 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ab38:	4628      	mov	r0, r5
 801ab3a:	2105      	movs	r1, #5
 801ab3c:	f7f5 f8a6 	bl	800fc8c <WM_NotifyParent>
 801ab40:	f7fb ff8c 	bl	8016a5c <GUI_Unlock>
 801ab44:	f7fb ff8a 	bl	8016a5c <GUI_Unlock>
 801ab48:	e687      	b.n	801a85a <SCROLLBAR_Callback+0x5a>
 801ab4a:	2d00      	cmp	r5, #0
 801ab4c:	f43f ae85 	beq.w	801a85a <SCROLLBAR_Callback+0x5a>
 801ab50:	f7fb ff8e 	bl	8016a70 <GUI_Lock>
 801ab54:	4628      	mov	r0, r5
 801ab56:	f7fe fb0b 	bl	8019170 <GUI_ALLOC_LockH>
 801ab5a:	ab0e      	add	r3, sp, #56	; 0x38
 801ab5c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801ab5e:	f843 0d28 	str.w	r0, [r3, #-40]!
 801ab62:	4618      	mov	r0, r3
 801ab64:	f7fe fb16 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ab68:	f7fb ff82 	bl	8016a70 <GUI_Lock>
 801ab6c:	4628      	mov	r0, r5
 801ab6e:	f7fe faff 	bl	8019170 <GUI_ALLOC_LockH>
 801ab72:	443e      	add	r6, r7
 801ab74:	2e00      	cmp	r6, #0
 801ab76:	9005      	str	r0, [sp, #20]
 801ab78:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801ab7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801ab7c:	f2c0 815f 	blt.w	801ae3e <SCROLLBAR_Callback+0x63e>
 801ab80:	1ad3      	subs	r3, r2, r3
 801ab82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab86:	429e      	cmp	r6, r3
 801ab88:	f340 815a 	ble.w	801ae40 <SCROLLBAR_Callback+0x640>
 801ab8c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801ab8e:	429a      	cmp	r2, r3
 801ab90:	f000 8174 	beq.w	801ae7c <SCROLLBAR_Callback+0x67c>
 801ab94:	6503      	str	r3, [r0, #80]	; 0x50
 801ab96:	e7c9      	b.n	801ab2c <SCROLLBAR_Callback+0x32c>
 801ab98:	2d00      	cmp	r5, #0
 801ab9a:	f43f ae5e 	beq.w	801a85a <SCROLLBAR_Callback+0x5a>
 801ab9e:	f7fb ff67 	bl	8016a70 <GUI_Lock>
 801aba2:	4628      	mov	r0, r5
 801aba4:	f7fe fae4 	bl	8019170 <GUI_ALLOC_LockH>
 801aba8:	ab0e      	add	r3, sp, #56	; 0x38
 801abaa:	6d06      	ldr	r6, [r0, #80]	; 0x50
 801abac:	f843 0d28 	str.w	r0, [r3, #-40]!
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7fe faef 	bl	8019194 <GUI_ALLOC_UnlockH>
 801abb6:	f7fb ff5b 	bl	8016a70 <GUI_Lock>
 801abba:	4628      	mov	r0, r5
 801abbc:	f7fe fad8 	bl	8019170 <GUI_ALLOC_LockH>
 801abc0:	1c73      	adds	r3, r6, #1
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	9005      	str	r0, [sp, #20]
 801abc6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801abc8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801abca:	f2c0 8136 	blt.w	801ae3a <SCROLLBAR_Callback+0x63a>
 801abce:	1a8a      	subs	r2, r1, r2
 801abd0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801abd4:	4293      	cmp	r3, r2
 801abd6:	dca4      	bgt.n	801ab22 <SCROLLBAR_Callback+0x322>
 801abd8:	461a      	mov	r2, r3
 801abda:	e7a2      	b.n	801ab22 <SCROLLBAR_Callback+0x322>
 801abdc:	2d00      	cmp	r5, #0
 801abde:	f43f ae3c 	beq.w	801a85a <SCROLLBAR_Callback+0x5a>
 801abe2:	f7fb ff45 	bl	8016a70 <GUI_Lock>
 801abe6:	4628      	mov	r0, r5
 801abe8:	f7fe fac2 	bl	8019170 <GUI_ALLOC_LockH>
 801abec:	ab0e      	add	r3, sp, #56	; 0x38
 801abee:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801abf0:	f843 0d28 	str.w	r0, [r3, #-40]!
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7fe facd 	bl	8019194 <GUI_ALLOC_UnlockH>
 801abfa:	f7fb ff39 	bl	8016a70 <GUI_Lock>
 801abfe:	4628      	mov	r0, r5
 801ac00:	f7fe fab6 	bl	8019170 <GUI_ALLOC_LockH>
 801ac04:	1bbe      	subs	r6, r7, r6
 801ac06:	e7b5      	b.n	801ab74 <SCROLLBAR_Callback+0x374>
 801ac08:	4628      	mov	r0, r5
 801ac0a:	f7fe fab1 	bl	8019170 <GUI_ALLOC_LockH>
 801ac0e:	9005      	str	r0, [sp, #20]
 801ac10:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ac12:	f7f3 fea5 	bl	800e960 <WM_DeleteTimer>
 801ac16:	a80e      	add	r0, sp, #56	; 0x38
 801ac18:	2200      	movs	r2, #0
 801ac1a:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801ac1e:	665a      	str	r2, [r3, #100]	; 0x64
 801ac20:	65da      	str	r2, [r3, #92]	; 0x5c
 801ac22:	f7fe fab7 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ac26:	e676      	b.n	801a916 <SCROLLBAR_Callback+0x116>
 801ac28:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801ac2a:	4291      	cmp	r1, r2
 801ac2c:	f43f ae84 	beq.w	801a938 <SCROLLBAR_Callback+0x138>
 801ac30:	4639      	mov	r1, r7
 801ac32:	e6a3      	b.n	801a97c <SCROLLBAR_Callback+0x17c>
 801ac34:	f1ba 0f00 	cmp.w	sl, #0
 801ac38:	f43f aefe 	beq.w	801aa38 <SCROLLBAR_Callback+0x238>
 801ac3c:	4628      	mov	r0, r5
 801ac3e:	f7fe fa97 	bl	8019170 <GUI_ALLOC_LockH>
 801ac42:	9004      	str	r0, [sp, #16]
 801ac44:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ac46:	f7f3 fe8b 	bl	800e960 <WM_DeleteTimer>
 801ac4a:	a80e      	add	r0, sp, #56	; 0x38
 801ac4c:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801ac50:	665f      	str	r7, [r3, #100]	; 0x64
 801ac52:	65df      	str	r7, [r3, #92]	; 0x5c
 801ac54:	f7fe fa9e 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ac58:	e6ee      	b.n	801aa38 <SCROLLBAR_Callback+0x238>
 801ac5a:	9a07      	ldr	r2, [sp, #28]
 801ac5c:	42b2      	cmp	r2, r6
 801ac5e:	dd69      	ble.n	801ad34 <SCROLLBAR_Callback+0x534>
 801ac60:	ebc7 0909 	rsb	r9, r7, r9
 801ac64:	427f      	negs	r7, r7
 801ac66:	e6cf      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801ac68:	f7fb ff02 	bl	8016a70 <GUI_Lock>
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	f7fe fa7f 	bl	8019170 <GUI_ALLOC_LockH>
 801ac72:	ab0e      	add	r3, sp, #56	; 0x38
 801ac74:	6d07      	ldr	r7, [r0, #80]	; 0x50
 801ac76:	f843 0d28 	str.w	r0, [r3, #-40]!
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7fe fa8a 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ac80:	f7fb fef6 	bl	8016a70 <GUI_Lock>
 801ac84:	4628      	mov	r0, r5
 801ac86:	f7fe fa73 	bl	8019170 <GUI_ALLOC_LockH>
 801ac8a:	443e      	add	r6, r7
 801ac8c:	2e00      	cmp	r6, #0
 801ac8e:	9005      	str	r0, [sp, #20]
 801ac90:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801ac92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801ac94:	f2c0 80c9 	blt.w	801ae2a <SCROLLBAR_Callback+0x62a>
 801ac98:	1ad3      	subs	r3, r2, r3
 801ac9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac9e:	42b3      	cmp	r3, r6
 801aca0:	bfa8      	it	ge
 801aca2:	4633      	movge	r3, r6
 801aca4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801aca6:	429a      	cmp	r2, r3
 801aca8:	f000 80ee 	beq.w	801ae88 <SCROLLBAR_Callback+0x688>
 801acac:	6503      	str	r3, [r0, #80]	; 0x50
 801acae:	4628      	mov	r0, r5
 801acb0:	f7f6 fee8 	bl	8011a84 <WM_InvalidateWindow>
 801acb4:	a805      	add	r0, sp, #20
 801acb6:	f7fe fa6d 	bl	8019194 <GUI_ALLOC_UnlockH>
 801acba:	4628      	mov	r0, r5
 801acbc:	2105      	movs	r1, #5
 801acbe:	f7f4 ffe5 	bl	800fc8c <WM_NotifyParent>
 801acc2:	f7fb fecb 	bl	8016a5c <GUI_Unlock>
 801acc6:	f7fb fec9 	bl	8016a5c <GUI_Unlock>
 801acca:	9803      	ldr	r0, [sp, #12]
 801accc:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 801acce:	e610      	b.n	801a8f2 <SCROLLBAR_Callback+0xf2>
 801acd0:	f7fb fece 	bl	8016a70 <GUI_Lock>
 801acd4:	4628      	mov	r0, r5
 801acd6:	f7fe fa4b 	bl	8019170 <GUI_ALLOC_LockH>
 801acda:	f1b9 0f00 	cmp.w	r9, #0
 801acde:	9004      	str	r0, [sp, #16]
 801ace0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801ace2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801ace4:	f2c0 80a7 	blt.w	801ae36 <SCROLLBAR_Callback+0x636>
 801ace8:	1ad3      	subs	r3, r2, r3
 801acea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acee:	454b      	cmp	r3, r9
 801acf0:	bfa8      	it	ge
 801acf2:	464b      	movge	r3, r9
 801acf4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801acf6:	429a      	cmp	r2, r3
 801acf8:	f000 8099 	beq.w	801ae2e <SCROLLBAR_Callback+0x62e>
 801acfc:	6503      	str	r3, [r0, #80]	; 0x50
 801acfe:	4628      	mov	r0, r5
 801ad00:	f7f6 fec0 	bl	8011a84 <WM_InvalidateWindow>
 801ad04:	a804      	add	r0, sp, #16
 801ad06:	f7fe fa45 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ad0a:	4628      	mov	r0, r5
 801ad0c:	2105      	movs	r1, #5
 801ad0e:	f7f4 ffbd 	bl	800fc8c <WM_NotifyParent>
 801ad12:	f7fb fea3 	bl	8016a5c <GUI_Unlock>
 801ad16:	e696      	b.n	801aa46 <SCROLLBAR_Callback+0x246>
 801ad18:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801ad1c:	eba6 0662 	sub.w	r6, r6, r2, asr #1
 801ad20:	1a30      	subs	r0, r6, r0
 801ad22:	3801      	subs	r0, #1
 801ad24:	fb00 f00b 	mul.w	r0, r0, fp
 801ad28:	9301      	str	r3, [sp, #4]
 801ad2a:	f7fa fe9d 	bl	8015a68 <GUI__DivideRound32>
 801ad2e:	9b01      	ldr	r3, [sp, #4]
 801ad30:	6618      	str	r0, [r3, #96]	; 0x60
 801ad32:	e677      	b.n	801aa24 <SCROLLBAR_Callback+0x224>
 801ad34:	9a08      	ldr	r2, [sp, #32]
 801ad36:	42b2      	cmp	r2, r6
 801ad38:	db61      	blt.n	801adfe <SCROLLBAR_Callback+0x5fe>
 801ad3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad3c:	2900      	cmp	r1, #0
 801ad3e:	dd0c      	ble.n	801ad5a <SCROLLBAR_Callback+0x55a>
 801ad40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad42:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ad46:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 801ad4a:	1a30      	subs	r0, r6, r0
 801ad4c:	1e46      	subs	r6, r0, #1
 801ad4e:	fb06 f00b 	mul.w	r0, r6, fp
 801ad52:	f7fa fe89 	bl	8015a68 <GUI__DivideRound32>
 801ad56:	9b03      	ldr	r3, [sp, #12]
 801ad58:	4681      	mov	r9, r0
 801ad5a:	2203      	movs	r2, #3
 801ad5c:	659a      	str	r2, [r3, #88]	; 0x58
 801ad5e:	9806      	ldr	r0, [sp, #24]
 801ad60:	2700      	movs	r7, #0
 801ad62:	e651      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801ad64:	4628      	mov	r0, r5
 801ad66:	f7fe fa03 	bl	8019170 <GUI_ALLOC_LockH>
 801ad6a:	9004      	str	r0, [sp, #16]
 801ad6c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ad6e:	f7f3 fdf7 	bl	800e960 <WM_DeleteTimer>
 801ad72:	a80e      	add	r0, sp, #56	; 0x38
 801ad74:	2200      	movs	r2, #0
 801ad76:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801ad7a:	665a      	str	r2, [r3, #100]	; 0x64
 801ad7c:	65da      	str	r2, [r3, #92]	; 0x5c
 801ad7e:	f7fe fa09 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ad82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad84:	9a06      	ldr	r2, [sp, #24]
 801ad86:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad88:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ad8c:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 801ad90:	1ab2      	subs	r2, r6, r2
 801ad92:	1e50      	subs	r0, r2, #1
 801ad94:	fb00 f00b 	mul.w	r0, r0, fp
 801ad98:	f7fa fe66 	bl	8015a68 <GUI__DivideRound32>
 801ad9c:	4681      	mov	r9, r0
 801ad9e:	a80e      	add	r0, sp, #56	; 0x38
 801ada0:	f850 3d2c 	ldr.w	r3, [r0, #-44]!
 801ada4:	f8c3 9060 	str.w	r9, [r3, #96]	; 0x60
 801ada8:	f7fe f9f4 	bl	8019194 <GUI_ALLOC_UnlockH>
 801adac:	e644      	b.n	801aa38 <SCROLLBAR_Callback+0x238>
 801adae:	4653      	mov	r3, sl
 801adb0:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801adb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801adb8:	4628      	mov	r0, r5
 801adba:	f7f3 fdeb 	bl	800e994 <WM_CreateTimer>
 801adbe:	4606      	mov	r6, r0
 801adc0:	4628      	mov	r0, r5
 801adc2:	f7fe f9d5 	bl	8019170 <GUI_ALLOC_LockH>
 801adc6:	4603      	mov	r3, r0
 801adc8:	a80e      	add	r0, sp, #56	; 0x38
 801adca:	f840 3d28 	str.w	r3, [r0, #-40]!
 801adce:	665e      	str	r6, [r3, #100]	; 0x64
 801add0:	65df      	str	r7, [r3, #92]	; 0x5c
 801add2:	f7fe f9df 	bl	8019194 <GUI_ALLOC_UnlockH>
 801add6:	e62f      	b.n	801aa38 <SCROLLBAR_Callback+0x238>
 801add8:	f04f 37ff 	mov.w	r7, #4294967295
 801addc:	e614      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801adde:	4628      	mov	r0, r5
 801ade0:	f7fe f9c6 	bl	8019170 <GUI_ALLOC_LockH>
 801ade4:	9005      	str	r0, [sp, #20]
 801ade6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ade8:	f7f3 fdba 	bl	800e960 <WM_DeleteTimer>
 801adec:	a80e      	add	r0, sp, #56	; 0x38
 801adee:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801adf2:	665f      	str	r7, [r3, #100]	; 0x64
 801adf4:	65df      	str	r7, [r3, #92]	; 0x5c
 801adf6:	f7fe f9cd 	bl	8019194 <GUI_ALLOC_UnlockH>
 801adfa:	9804      	ldr	r0, [sp, #16]
 801adfc:	e660      	b.n	801aac0 <SCROLLBAR_Callback+0x2c0>
 801adfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae00:	42b2      	cmp	r2, r6
 801ae02:	dd1f      	ble.n	801ae44 <SCROLLBAR_Callback+0x644>
 801ae04:	44b9      	add	r9, r7
 801ae06:	e5ff      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801ae08:	4628      	mov	r0, r5
 801ae0a:	f7fe f9b1 	bl	8019170 <GUI_ALLOC_LockH>
 801ae0e:	9004      	str	r0, [sp, #16]
 801ae10:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ae12:	f7f3 fda5 	bl	800e960 <WM_DeleteTimer>
 801ae16:	a80e      	add	r0, sp, #56	; 0x38
 801ae18:	2200      	movs	r2, #0
 801ae1a:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801ae1e:	665a      	str	r2, [r3, #100]	; 0x64
 801ae20:	65da      	str	r2, [r3, #92]	; 0x5c
 801ae22:	f7fe f9b7 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ae26:	9b03      	ldr	r3, [sp, #12]
 801ae28:	e5e7      	b.n	801a9fa <SCROLLBAR_Callback+0x1fa>
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	e73a      	b.n	801aca4 <SCROLLBAR_Callback+0x4a4>
 801ae2e:	a804      	add	r0, sp, #16
 801ae30:	f7fe f9b0 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ae34:	e76d      	b.n	801ad12 <SCROLLBAR_Callback+0x512>
 801ae36:	2300      	movs	r3, #0
 801ae38:	e75c      	b.n	801acf4 <SCROLLBAR_Callback+0x4f4>
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	e6cc      	b.n	801abd8 <SCROLLBAR_Callback+0x3d8>
 801ae3e:	2600      	movs	r6, #0
 801ae40:	4633      	mov	r3, r6
 801ae42:	e6a3      	b.n	801ab8c <SCROLLBAR_Callback+0x38c>
 801ae44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae46:	42b2      	cmp	r2, r6
 801ae48:	db1c      	blt.n	801ae84 <SCROLLBAR_Callback+0x684>
 801ae4a:	2901      	cmp	r1, #1
 801ae4c:	d020      	beq.n	801ae90 <SCROLLBAR_Callback+0x690>
 801ae4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801ae50:	b17a      	cbz	r2, 801ae72 <SCROLLBAR_Callback+0x672>
 801ae52:	4628      	mov	r0, r5
 801ae54:	f7fe f98c 	bl	8019170 <GUI_ALLOC_LockH>
 801ae58:	9004      	str	r0, [sp, #16]
 801ae5a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ae5c:	f7f3 fd80 	bl	800e960 <WM_DeleteTimer>
 801ae60:	a80e      	add	r0, sp, #56	; 0x38
 801ae62:	2200      	movs	r2, #0
 801ae64:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801ae68:	665a      	str	r2, [r3, #100]	; 0x64
 801ae6a:	65da      	str	r2, [r3, #92]	; 0x5c
 801ae6c:	f7fe f992 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ae70:	9b03      	ldr	r3, [sp, #12]
 801ae72:	2701      	movs	r7, #1
 801ae74:	659f      	str	r7, [r3, #88]	; 0x58
 801ae76:	44b9      	add	r9, r7
 801ae78:	9806      	ldr	r0, [sp, #24]
 801ae7a:	e5c5      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801ae7c:	a805      	add	r0, sp, #20
 801ae7e:	f7fe f989 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ae82:	e65d      	b.n	801ab40 <SCROLLBAR_Callback+0x340>
 801ae84:	2700      	movs	r7, #0
 801ae86:	e5bf      	b.n	801aa08 <SCROLLBAR_Callback+0x208>
 801ae88:	a805      	add	r0, sp, #20
 801ae8a:	f7fe f983 	bl	8019194 <GUI_ALLOC_UnlockH>
 801ae8e:	e718      	b.n	801acc2 <SCROLLBAR_Callback+0x4c2>
 801ae90:	460f      	mov	r7, r1
 801ae92:	e5b9      	b.n	801aa08 <SCROLLBAR_Callback+0x208>

0801ae94 <SCROLLBAR__Rect2VRect>:
 801ae94:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801ae96:	071b      	lsls	r3, r3, #28
 801ae98:	b470      	push	{r4, r5, r6}
 801ae9a:	d512      	bpl.n	801aec2 <SCROLLBAR__Rect2VRect+0x2e>
 801ae9c:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801aea0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801aea4:	888c      	ldrh	r4, [r1, #4]
 801aea6:	8808      	ldrh	r0, [r1, #0]
 801aea8:	88ce      	ldrh	r6, [r1, #6]
 801aeaa:	884a      	ldrh	r2, [r1, #2]
 801aeac:	808e      	strh	r6, [r1, #4]
 801aeae:	1aeb      	subs	r3, r5, r3
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	43c0      	mvns	r0, r0
 801aeb6:	43e4      	mvns	r4, r4
 801aeb8:	4418      	add	r0, r3
 801aeba:	4423      	add	r3, r4
 801aebc:	80c8      	strh	r0, [r1, #6]
 801aebe:	804b      	strh	r3, [r1, #2]
 801aec0:	800a      	strh	r2, [r1, #0]
 801aec2:	bc70      	pop	{r4, r5, r6}
 801aec4:	4770      	bx	lr
 801aec6:	bf00      	nop

0801aec8 <SCROLLBAR_CreateAttached>:
 801aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aecc:	f011 0708 	ands.w	r7, r1, #8
 801aed0:	b088      	sub	sp, #32
 801aed2:	460d      	mov	r5, r1
 801aed4:	4604      	mov	r4, r0
 801aed6:	d169      	bne.n	801afac <SCROLLBAR_CreateAttached+0xe4>
 801aed8:	f7fb fdca 	bl	8016a70 <GUI_Lock>
 801aedc:	4620      	mov	r0, r4
 801aede:	a906      	add	r1, sp, #24
 801aee0:	f7f4 fc0a 	bl	800f6f8 <WM_GetInsideRectEx>
 801aee4:	4b3d      	ldr	r3, [pc, #244]	; (801afdc <SCROLLBAR_CreateAttached+0x114>)
 801aee6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801aeea:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801aeee:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801aef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aef6:	3101      	adds	r1, #1
 801aef8:	1a12      	subs	r2, r2, r0
 801aefa:	1ac9      	subs	r1, r1, r3
 801aefc:	3201      	adds	r2, #1
 801aefe:	f240 3c8a 	movw	ip, #906	; 0x38a
 801af02:	26ff      	movs	r6, #255	; 0xff
 801af04:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 801afe8 <SCROLLBAR_CreateAttached+0x120>
 801af08:	9400      	str	r4, [sp, #0]
 801af0a:	243c      	movs	r4, #60	; 0x3c
 801af0c:	9403      	str	r4, [sp, #12]
 801af0e:	f8cd c004 	str.w	ip, [sp, #4]
 801af12:	f8cd e008 	str.w	lr, [sp, #8]
 801af16:	f7f6 fe11 	bl	8011b3c <WM_CreateWindowAsChild>
 801af1a:	4604      	mov	r4, r0
 801af1c:	2800      	cmp	r0, #0
 801af1e:	d03b      	beq.n	801af98 <SCROLLBAR_CreateAttached+0xd0>
 801af20:	f7fe f926 	bl	8019170 <GUI_ALLOC_LockH>
 801af24:	2f00      	cmp	r7, #0
 801af26:	bf14      	ite	ne
 801af28:	2318      	movne	r3, #24
 801af2a:	2310      	moveq	r3, #16
 801af2c:	bf14      	ite	ne
 801af2e:	2208      	movne	r2, #8
 801af30:	2200      	moveq	r2, #0
 801af32:	f015 0f10 	tst.w	r5, #16
 801af36:	bf18      	it	ne
 801af38:	461a      	movne	r2, r3
 801af3a:	4631      	mov	r1, r6
 801af3c:	9005      	str	r0, [sp, #20]
 801af3e:	f7ee f9ef 	bl	8009320 <WIDGET__Init>
 801af42:	4b27      	ldr	r3, [pc, #156]	; (801afe0 <SCROLLBAR_CreateAttached+0x118>)
 801af44:	4f27      	ldr	r7, [pc, #156]	; (801afe4 <SCROLLBAR_CreateAttached+0x11c>)
 801af46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801af48:	f10d 0e20 	add.w	lr, sp, #32
 801af4c:	f04f 0c00 	mov.w	ip, #0
 801af50:	f85e 5d0c 	ldr.w	r5, [lr, #-12]!
 801af54:	683e      	ldr	r6, [r7, #0]
 801af56:	f105 0834 	add.w	r8, r5, #52	; 0x34
 801af5a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801af5e:	f04f 090a 	mov.w	r9, #10
 801af62:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 801af66:	4670      	mov	r0, lr
 801af68:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
 801af6c:	f8c5 a04c 	str.w	sl, [r5, #76]	; 0x4c
 801af70:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
 801af74:	646e      	str	r6, [r5, #68]	; 0x44
 801af76:	f7fe f90d 	bl	8019194 <GUI_ALLOC_UnlockH>
 801af7a:	683b      	ldr	r3, [r7, #0]
 801af7c:	4620      	mov	r0, r4
 801af7e:	685b      	ldr	r3, [r3, #4]
 801af80:	4798      	blx	r3
 801af82:	4620      	mov	r0, r4
 801af84:	f7f4 fd8e 	bl	800faa4 <WM_GetScrollPartner>
 801af88:	f7f6 fd7c 	bl	8011a84 <WM_InvalidateWindow>
 801af8c:	4620      	mov	r0, r4
 801af8e:	f7f4 fceb 	bl	800f968 <WM_GetParent>
 801af92:	2125      	movs	r1, #37	; 0x25
 801af94:	f7f4 fecc 	bl	800fd30 <WM_SendMessageNoPara>
 801af98:	f7fb fd60 	bl	8016a5c <GUI_Unlock>
 801af9c:	4620      	mov	r0, r4
 801af9e:	2106      	movs	r1, #6
 801afa0:	f7f4 fe74 	bl	800fc8c <WM_NotifyParent>
 801afa4:	4620      	mov	r0, r4
 801afa6:	b008      	add	sp, #32
 801afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afac:	f7fb fd60 	bl	8016a70 <GUI_Lock>
 801afb0:	4620      	mov	r0, r4
 801afb2:	a906      	add	r1, sp, #24
 801afb4:	f7f4 fba0 	bl	800f6f8 <WM_GetInsideRectEx>
 801afb8:	4a08      	ldr	r2, [pc, #32]	; (801afdc <SCROLLBAR_CreateAttached+0x114>)
 801afba:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801afbe:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801afc2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801afc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801afca:	3001      	adds	r0, #1
 801afcc:	1a5b      	subs	r3, r3, r1
 801afce:	1a80      	subs	r0, r0, r2
 801afd0:	3301      	adds	r3, #1
 801afd2:	f240 5c8a 	movw	ip, #1418	; 0x58a
 801afd6:	26fe      	movs	r6, #254	; 0xfe
 801afd8:	e794      	b.n	801af04 <SCROLLBAR_CreateAttached+0x3c>
 801afda:	bf00      	nop
 801afdc:	20000348 	.word	0x20000348
 801afe0:	20000334 	.word	0x20000334
 801afe4:	20000344 	.word	0x20000344
 801afe8:	0801a801 	.word	0x0801a801

0801afec <BUTTON_DrawSkinFlex>:
 801afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff0:	4994      	ldr	r1, [pc, #592]	; (801b244 <BUTTON_DrawSkinFlex+0x258>)
 801aff2:	6882      	ldr	r2, [r0, #8]
 801aff4:	6843      	ldr	r3, [r0, #4]
 801aff6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 801affa:	b088      	sub	sp, #32
 801affc:	4604      	mov	r4, r0
 801affe:	2b12      	cmp	r3, #18
 801b000:	d822      	bhi.n	801b048 <BUTTON_DrawSkinFlex+0x5c>
 801b002:	e8df f003 	tbb	[pc, r3]
 801b006:	21b1      	.short	0x21b1
 801b008:	7b212121 	.word	0x7b212121
 801b00c:	2121210a 	.word	0x2121210a
 801b010:	21212121 	.word	0x21212121
 801b014:	21212121 	.word	0x21212121
 801b018:	25          	.byte	0x25
 801b019:	00          	.byte	0x00
 801b01a:	6800      	ldr	r0, [r0, #0]
 801b01c:	f7fe f8a8 	bl	8019170 <GUI_ALLOC_LockH>
 801b020:	9004      	str	r0, [sp, #16]
 801b022:	6820      	ldr	r0, [r4, #0]
 801b024:	f7f3 fb46 	bl	800e6b4 <WM__IsEnabled>
 801b028:	2800      	cmp	r0, #0
 801b02a:	f040 80a4 	bne.w	801b176 <BUTTON_DrawSkinFlex+0x18a>
 801b02e:	9b04      	ldr	r3, [sp, #16]
 801b030:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801b032:	b905      	cbnz	r5, 801b036 <BUTTON_DrawSkinFlex+0x4a>
 801b034:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801b036:	a804      	add	r0, sp, #16
 801b038:	f7fe f8ac 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b03c:	2200      	movs	r2, #0
 801b03e:	4628      	mov	r0, r5
 801b040:	6821      	ldr	r1, [r4, #0]
 801b042:	4613      	mov	r3, r2
 801b044:	f002 ff7c 	bl	801df40 <GUI_DRAW__Draw>
 801b048:	2000      	movs	r0, #0
 801b04a:	b008      	add	sp, #32
 801b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b050:	6800      	ldr	r0, [r0, #0]
 801b052:	f7fe f88d 	bl	8019170 <GUI_ALLOC_LockH>
 801b056:	6e86      	ldr	r6, [r0, #104]	; 0x68
 801b058:	9004      	str	r0, [sp, #16]
 801b05a:	2e00      	cmp	r6, #0
 801b05c:	f000 80eb 	beq.w	801b236 <BUTTON_DrawSkinFlex+0x24a>
 801b060:	68a3      	ldr	r3, [r4, #8]
 801b062:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 801b066:	2b00      	cmp	r3, #0
 801b068:	f000 80e3 	beq.w	801b232 <BUTTON_DrawSkinFlex+0x246>
 801b06c:	2b03      	cmp	r3, #3
 801b06e:	bf14      	ite	ne
 801b070:	2300      	movne	r3, #0
 801b072:	2302      	moveq	r3, #2
 801b074:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b078:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b07a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801b07c:	f7fc fff6 	bl	801806c <GUI_SetFont>
 801b080:	4620      	mov	r0, r4
 801b082:	ac08      	add	r4, sp, #32
 801b084:	f7fc ff90 	bl	8017fa8 <GUI_SetColor>
 801b088:	a806      	add	r0, sp, #24
 801b08a:	f7fc fe75 	bl	8017d78 <GUI_GetClientRect>
 801b08e:	f854 0d10 	ldr.w	r0, [r4, #-16]!
 801b092:	8bab      	ldrh	r3, [r5, #28]
 801b094:	f8bd c018 	ldrh.w	ip, [sp, #24]
 801b098:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 801b09c:	f8bd e01a 	ldrh.w	lr, [sp, #26]
 801b0a0:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 801b0a4:	f9b0 105e 	ldrsh.w	r1, [r0, #94]	; 0x5e
 801b0a8:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 801b0ac:	449c      	add	ip, r3
 801b0ae:	f10e 0e02 	add.w	lr, lr, #2
 801b0b2:	ebc3 0308 	rsb	r3, r3, r8
 801b0b6:	a806      	add	r0, sp, #24
 801b0b8:	3d02      	subs	r5, #2
 801b0ba:	f8ad c018 	strh.w	ip, [sp, #24]
 801b0be:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b0c2:	f8ad e01a 	strh.w	lr, [sp, #26]
 801b0c6:	f8ad 501e 	strh.w	r5, [sp, #30]
 801b0ca:	f7fc fed7 	bl	8017e7c <GUI_MoveRect>
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f7fe f860 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b0d4:	2002      	movs	r0, #2
 801b0d6:	f7fc fff9 	bl	80180cc <GUI_SetTextMode>
 801b0da:	4630      	mov	r0, r6
 801b0dc:	f7fe f848 	bl	8019170 <GUI_ALLOC_LockH>
 801b0e0:	ac08      	add	r4, sp, #32
 801b0e2:	a906      	add	r1, sp, #24
 801b0e4:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801b0e8:	463a      	mov	r2, r7
 801b0ea:	f7fc f8f3 	bl	80172d4 <GUI_DispStringInRect>
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	f7fe f850 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b0f4:	2000      	movs	r0, #0
 801b0f6:	b008      	add	sp, #32
 801b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0fc:	69ee      	ldr	r6, [r5, #28]
 801b0fe:	2e00      	cmp	r6, #0
 801b100:	d145      	bne.n	801b18e <BUTTON_DrawSkinFlex+0x1a2>
 801b102:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 801b106:	f7fc ff4f 	bl	8017fa8 <GUI_SetColor>
 801b10a:	f104 0010 	add.w	r0, r4, #16
 801b10e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801b110:	4430      	add	r0, r6
 801b112:	4431      	add	r1, r6
 801b114:	1b92      	subs	r2, r2, r6
 801b116:	1b9b      	subs	r3, r3, r6
 801b118:	3601      	adds	r6, #1
 801b11a:	f7fe fa6b 	bl	80195f4 <GUI_DrawRect>
 801b11e:	2e02      	cmp	r6, #2
 801b120:	d1ef      	bne.n	801b102 <BUTTON_DrawSkinFlex+0x116>
 801b122:	68eb      	ldr	r3, [r5, #12]
 801b124:	6961      	ldr	r1, [r4, #20]
 801b126:	69e7      	ldr	r7, [r4, #28]
 801b128:	9300      	str	r3, [sp, #0]
 801b12a:	6920      	ldr	r0, [r4, #16]
 801b12c:	69a2      	ldr	r2, [r4, #24]
 801b12e:	692b      	ldr	r3, [r5, #16]
 801b130:	9301      	str	r3, [sp, #4]
 801b132:	19cb      	adds	r3, r1, r7
 801b134:	4430      	add	r0, r6
 801b136:	1b92      	subs	r2, r2, r6
 801b138:	105b      	asrs	r3, r3, #1
 801b13a:	3102      	adds	r1, #2
 801b13c:	f001 ff82 	bl	801d044 <GUI_DrawGradientV>
 801b140:	69e3      	ldr	r3, [r4, #28]
 801b142:	6967      	ldr	r7, [r4, #20]
 801b144:	696a      	ldr	r2, [r5, #20]
 801b146:	9200      	str	r2, [sp, #0]
 801b148:	6920      	ldr	r0, [r4, #16]
 801b14a:	69a2      	ldr	r2, [r4, #24]
 801b14c:	69a9      	ldr	r1, [r5, #24]
 801b14e:	9101      	str	r1, [sp, #4]
 801b150:	441f      	add	r7, r3
 801b152:	1079      	asrs	r1, r7, #1
 801b154:	4430      	add	r0, r6
 801b156:	3101      	adds	r1, #1
 801b158:	3b02      	subs	r3, #2
 801b15a:	1b92      	subs	r2, r2, r6
 801b15c:	f001 ff72 	bl	801d044 <GUI_DrawGradientV>
 801b160:	2000      	movs	r0, #0
 801b162:	b008      	add	sp, #32
 801b164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b168:	6800      	ldr	r0, [r0, #0]
 801b16a:	f7f3 fc71 	bl	800ea50 <WM_SetHasTrans>
 801b16e:	2000      	movs	r0, #0
 801b170:	b008      	add	sp, #32
 801b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b176:	68a3      	ldr	r3, [r4, #8]
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d160      	bne.n	801b23e <BUTTON_DrawSkinFlex+0x252>
 801b17c:	9b04      	ldr	r3, [sp, #16]
 801b17e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b180:	2a00      	cmp	r2, #0
 801b182:	bf14      	ite	ne
 801b184:	226c      	movne	r2, #108	; 0x6c
 801b186:	2268      	moveq	r2, #104	; 0x68
 801b188:	4413      	add	r3, r2
 801b18a:	685d      	ldr	r5, [r3, #4]
 801b18c:	e753      	b.n	801b036 <BUTTON_DrawSkinFlex+0x4a>
 801b18e:	9600      	str	r6, [sp, #0]
 801b190:	682b      	ldr	r3, [r5, #0]
 801b192:	9301      	str	r3, [sp, #4]
 801b194:	686b      	ldr	r3, [r5, #4]
 801b196:	9302      	str	r3, [sp, #8]
 801b198:	68ae      	ldr	r6, [r5, #8]
 801b19a:	3010      	adds	r0, #16
 801b19c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801b19e:	9603      	str	r6, [sp, #12]
 801b1a0:	f001 fc80 	bl	801caa4 <GUI__DrawTwinArc4>
 801b1a4:	2600      	movs	r6, #0
 801b1a6:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 801b1aa:	f7fc fefd 	bl	8017fa8 <GUI_SetColor>
 801b1ae:	69eb      	ldr	r3, [r5, #28]
 801b1b0:	6921      	ldr	r1, [r4, #16]
 801b1b2:	69a2      	ldr	r2, [r4, #24]
 801b1b4:	6960      	ldr	r0, [r4, #20]
 801b1b6:	4419      	add	r1, r3
 801b1b8:	1ad2      	subs	r2, r2, r3
 801b1ba:	4430      	add	r0, r6
 801b1bc:	f7fb fdc4 	bl	8016d48 <GUI_DrawHLine>
 801b1c0:	69eb      	ldr	r3, [r5, #28]
 801b1c2:	6921      	ldr	r1, [r4, #16]
 801b1c4:	69a2      	ldr	r2, [r4, #24]
 801b1c6:	69e0      	ldr	r0, [r4, #28]
 801b1c8:	4419      	add	r1, r3
 801b1ca:	1ad2      	subs	r2, r2, r3
 801b1cc:	1b80      	subs	r0, r0, r6
 801b1ce:	f7fb fdbb 	bl	8016d48 <GUI_DrawHLine>
 801b1d2:	69eb      	ldr	r3, [r5, #28]
 801b1d4:	6961      	ldr	r1, [r4, #20]
 801b1d6:	69e2      	ldr	r2, [r4, #28]
 801b1d8:	6920      	ldr	r0, [r4, #16]
 801b1da:	4419      	add	r1, r3
 801b1dc:	1ad2      	subs	r2, r2, r3
 801b1de:	4430      	add	r0, r6
 801b1e0:	f7fb fe08 	bl	8016df4 <GUI_DrawVLine>
 801b1e4:	69eb      	ldr	r3, [r5, #28]
 801b1e6:	6961      	ldr	r1, [r4, #20]
 801b1e8:	69e2      	ldr	r2, [r4, #28]
 801b1ea:	69a0      	ldr	r0, [r4, #24]
 801b1ec:	4419      	add	r1, r3
 801b1ee:	1b80      	subs	r0, r0, r6
 801b1f0:	1ad2      	subs	r2, r2, r3
 801b1f2:	3601      	adds	r6, #1
 801b1f4:	f7fb fdfe 	bl	8016df4 <GUI_DrawVLine>
 801b1f8:	2e02      	cmp	r6, #2
 801b1fa:	d1d4      	bne.n	801b1a6 <BUTTON_DrawSkinFlex+0x1ba>
 801b1fc:	68a8      	ldr	r0, [r5, #8]
 801b1fe:	f7fc fed3 	bl	8017fa8 <GUI_SetColor>
 801b202:	69eb      	ldr	r3, [r5, #28]
 801b204:	6920      	ldr	r0, [r4, #16]
 801b206:	69e6      	ldr	r6, [r4, #28]
 801b208:	6961      	ldr	r1, [r4, #20]
 801b20a:	18c2      	adds	r2, r0, r3
 801b20c:	4419      	add	r1, r3
 801b20e:	3a01      	subs	r2, #1
 801b210:	1af3      	subs	r3, r6, r3
 801b212:	3002      	adds	r0, #2
 801b214:	f7fb fe18 	bl	8016e48 <GUI_FillRect>
 801b218:	69eb      	ldr	r3, [r5, #28]
 801b21a:	69a2      	ldr	r2, [r4, #24]
 801b21c:	69e6      	ldr	r6, [r4, #28]
 801b21e:	6961      	ldr	r1, [r4, #20]
 801b220:	1ad0      	subs	r0, r2, r3
 801b222:	4419      	add	r1, r3
 801b224:	3001      	adds	r0, #1
 801b226:	1af3      	subs	r3, r6, r3
 801b228:	3a02      	subs	r2, #2
 801b22a:	f7fb fe0d 	bl	8016e48 <GUI_FillRect>
 801b22e:	69ee      	ldr	r6, [r5, #28]
 801b230:	e777      	b.n	801b122 <BUTTON_DrawSkinFlex+0x136>
 801b232:	2301      	movs	r3, #1
 801b234:	e71e      	b.n	801b074 <BUTTON_DrawSkinFlex+0x88>
 801b236:	a804      	add	r0, sp, #16
 801b238:	f7fd ffac 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b23c:	e704      	b.n	801b048 <BUTTON_DrawSkinFlex+0x5c>
 801b23e:	9b04      	ldr	r3, [sp, #16]
 801b240:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801b242:	e6f8      	b.n	801b036 <BUTTON_DrawSkinFlex+0x4a>
 801b244:	080219c4 	.word	0x080219c4

0801b248 <_Create>:
 801b248:	b570      	push	{r4, r5, r6, lr}
 801b24a:	b08a      	sub	sp, #40	; 0x28
 801b24c:	2400      	movs	r4, #0
 801b24e:	4606      	mov	r6, r0
 801b250:	9401      	str	r4, [sp, #4]
 801b252:	9402      	str	r4, [sp, #8]
 801b254:	9403      	str	r4, [sp, #12]
 801b256:	9404      	str	r4, [sp, #16]
 801b258:	9405      	str	r4, [sp, #20]
 801b25a:	9406      	str	r4, [sp, #24]
 801b25c:	9407      	str	r4, [sp, #28]
 801b25e:	9408      	str	r4, [sp, #32]
 801b260:	9409      	str	r4, [sp, #36]	; 0x24
 801b262:	f7fd ff85 	bl	8019170 <GUI_ALLOC_LockH>
 801b266:	ab0a      	add	r3, sp, #40	; 0x28
 801b268:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801b26a:	f843 0d28 	str.w	r0, [r3, #-40]!
 801b26e:	4668      	mov	r0, sp
 801b270:	6895      	ldr	r5, [r2, #8]
 801b272:	f7fd ff8f 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b276:	a80a      	add	r0, sp, #40	; 0x28
 801b278:	9402      	str	r4, [sp, #8]
 801b27a:	f840 6d24 	str.w	r6, [r0, #-36]!
 801b27e:	682b      	ldr	r3, [r5, #0]
 801b280:	4798      	blx	r3
 801b282:	b00a      	add	sp, #40	; 0x28
 801b284:	bd70      	pop	{r4, r5, r6, pc}
 801b286:	bf00      	nop

0801b288 <_Paint>:
 801b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b28c:	b08a      	sub	sp, #40	; 0x28
 801b28e:	4605      	mov	r5, r0
 801b290:	f7fd ff6e 	bl	8019170 <GUI_ALLOC_LockH>
 801b294:	4603      	mov	r3, r0
 801b296:	a80a      	add	r0, sp, #40	; 0x28
 801b298:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801b29a:	f840 3d28 	str.w	r3, [r0, #-40]!
 801b29e:	4668      	mov	r0, sp
 801b2a0:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 801b2a2:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801b2a6:	f7fd ff75 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b2aa:	4628      	mov	r0, r5
 801b2ac:	f7f4 ffb6 	bl	801021c <WM_GetWindowSizeX>
 801b2b0:	4607      	mov	r7, r0
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	f7f4 ffd0 	bl	8010258 <WM_GetWindowSizeY>
 801b2b8:	3f01      	subs	r7, #1
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	3801      	subs	r0, #1
 801b2be:	f016 0610 	ands.w	r6, r6, #16
 801b2c2:	9008      	str	r0, [sp, #32]
 801b2c4:	9707      	str	r7, [sp, #28]
 801b2c6:	9501      	str	r5, [sp, #4]
 801b2c8:	9306      	str	r3, [sp, #24]
 801b2ca:	9305      	str	r3, [sp, #20]
 801b2cc:	d11d      	bne.n	801b30a <_Paint+0x82>
 801b2ce:	f418 7f80 	tst.w	r8, #256	; 0x100
 801b2d2:	d118      	bne.n	801b306 <_Paint+0x7e>
 801b2d4:	f018 0f01 	tst.w	r8, #1
 801b2d8:	bf14      	ite	ne
 801b2da:	2301      	movne	r3, #1
 801b2dc:	2302      	moveq	r3, #2
 801b2de:	9303      	str	r3, [sp, #12]
 801b2e0:	2305      	movs	r3, #5
 801b2e2:	9302      	str	r3, [sp, #8]
 801b2e4:	a801      	add	r0, sp, #4
 801b2e6:	47a0      	blx	r4
 801b2e8:	2306      	movs	r3, #6
 801b2ea:	9302      	str	r3, [sp, #8]
 801b2ec:	a801      	add	r0, sp, #4
 801b2ee:	47a0      	blx	r4
 801b2f0:	2312      	movs	r3, #18
 801b2f2:	9302      	str	r3, [sp, #8]
 801b2f4:	a801      	add	r0, sp, #4
 801b2f6:	47a0      	blx	r4
 801b2f8:	230a      	movs	r3, #10
 801b2fa:	a801      	add	r0, sp, #4
 801b2fc:	9302      	str	r3, [sp, #8]
 801b2fe:	47a0      	blx	r4
 801b300:	b00a      	add	sp, #40	; 0x28
 801b302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b306:	9603      	str	r6, [sp, #12]
 801b308:	e7ea      	b.n	801b2e0 <_Paint+0x58>
 801b30a:	2303      	movs	r3, #3
 801b30c:	9303      	str	r3, [sp, #12]
 801b30e:	e7e7      	b.n	801b2e0 <_Paint+0x58>

0801b310 <GUI_MEMDEV__WriteToActiveOpaque>:
 801b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b314:	b0a1      	sub	sp, #132	; 0x84
 801b316:	4607      	mov	r7, r0
 801b318:	910f      	str	r1, [sp, #60]	; 0x3c
 801b31a:	920c      	str	r2, [sp, #48]	; 0x30
 801b31c:	b910      	cbnz	r0, 801b324 <GUI_MEMDEV__WriteToActiveOpaque+0x14>
 801b31e:	b021      	add	sp, #132	; 0x84
 801b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b324:	f7fd ff24 	bl	8019170 <GUI_ALLOC_LockH>
 801b328:	ab20      	add	r3, sp, #128	; 0x80
 801b32a:	6944      	ldr	r4, [r0, #20]
 801b32c:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801b330:	4618      	mov	r0, r3
 801b332:	f7fd ff2f 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b336:	4638      	mov	r0, r7
 801b338:	f7f8 fbd6 	bl	8013ae8 <GUI_MEMDEV_GetBitsPerPixel>
 801b33c:	2808      	cmp	r0, #8
 801b33e:	4681      	mov	r9, r0
 801b340:	dd02      	ble.n	801b348 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 801b342:	2c00      	cmp	r4, #0
 801b344:	f000 80d2 	beq.w	801b4ec <GUI_MEMDEV__WriteToActiveOpaque+0x1dc>
 801b348:	f04f 0800 	mov.w	r8, #0
 801b34c:	f04f 0b01 	mov.w	fp, #1
 801b350:	4638      	mov	r0, r7
 801b352:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 801b356:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 801b35a:	f7fd ff09 	bl	8019170 <GUI_ALLOC_LockH>
 801b35e:	4da6      	ldr	r5, [pc, #664]	; (801b5f8 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 801b360:	6801      	ldr	r1, [r0, #0]
 801b362:	682a      	ldr	r2, [r5, #0]
 801b364:	6909      	ldr	r1, [r1, #16]
 801b366:	4603      	mov	r3, r0
 801b368:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 801b36c:	68de      	ldr	r6, [r3, #12]
 801b36e:	9612      	str	r6, [sp, #72]	; 0x48
 801b370:	691e      	ldr	r6, [r3, #16]
 801b372:	f84a 3d14 	str.w	r3, [sl, #-20]!
 801b376:	7c50      	ldrb	r0, [r2, #17]
 801b378:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801b37c:	960b      	str	r6, [sp, #44]	; 0x2c
 801b37e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801b382:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801b386:	684c      	ldr	r4, [r1, #4]
 801b388:	9310      	str	r3, [sp, #64]	; 0x40
 801b38a:	9615      	str	r6, [sp, #84]	; 0x54
 801b38c:	f7f9 fd96 	bl	8014ebc <GUI_GetBitsPerPixelEx>
 801b390:	682a      	ldr	r2, [r5, #0]
 801b392:	9009      	str	r0, [sp, #36]	; 0x24
 801b394:	7c50      	ldrb	r0, [r2, #17]
 801b396:	f7f9 fdad 	bl	8014ef4 <GUI_GetpfIndex2ColorEx>
 801b39a:	4606      	mov	r6, r0
 801b39c:	4650      	mov	r0, sl
 801b39e:	f7fd fef9 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b3a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b3a4:	2808      	cmp	r0, #8
 801b3a6:	f240 809b 	bls.w	801b4e0 <GUI_MEMDEV__WriteToActiveOpaque+0x1d0>
 801b3aa:	2810      	cmp	r0, #16
 801b3ac:	bf8c      	ite	hi
 801b3ae:	2104      	movhi	r1, #4
 801b3b0:	2102      	movls	r1, #2
 801b3b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b3b6:	910e      	str	r1, [sp, #56]	; 0x38
 801b3b8:	42b4      	cmp	r4, r6
 801b3ba:	f000 81b0 	beq.w	801b71e <GUI_MEMDEV__WriteToActiveOpaque+0x40e>
 801b3be:	682b      	ldr	r3, [r5, #0]
 801b3c0:	7c58      	ldrb	r0, [r3, #17]
 801b3c2:	f7f9 fd9f 	bl	8014f04 <GUI_GetpfColor2IndexEx>
 801b3c6:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	00b0      	lsls	r0, r6, #2
 801b3cc:	f7fd feb8 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 801b3d0:	9014      	str	r0, [sp, #80]	; 0x50
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	d0a3      	beq.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b3d6:	4638      	mov	r0, r7
 801b3d8:	f7f7 fb6c 	bl	8012ab4 <GUI_MEMDEV_GetDataPtr>
 801b3dc:	9011      	str	r0, [sp, #68]	; 0x44
 801b3de:	f1b9 0f00 	cmp.w	r9, #0
 801b3e2:	f000 80f4 	beq.w	801b5ce <GUI_MEMDEV__WriteToActiveOpaque+0x2be>
 801b3e6:	4648      	mov	r0, r9
 801b3e8:	f7fd fec2 	bl	8019170 <GUI_ALLOC_LockH>
 801b3ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b3ee:	901c      	str	r0, [sp, #112]	; 0x70
 801b3f0:	2e00      	cmp	r6, #0
 801b3f2:	f340 8190 	ble.w	801b716 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 801b3f6:	2600      	movs	r6, #0
 801b3f8:	960d      	str	r6, [sp, #52]	; 0x34
 801b3fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b3fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b3fe:	3e01      	subs	r6, #1
 801b400:	9616      	str	r6, [sp, #88]	; 0x58
 801b402:	ae1d      	add	r6, sp, #116	; 0x74
 801b404:	9613      	str	r6, [sp, #76]	; 0x4c
 801b406:	f04f 0801 	mov.w	r8, #1
 801b40a:	6883      	ldr	r3, [r0, #8]
 801b40c:	2100      	movs	r1, #0
 801b40e:	911d      	str	r1, [sp, #116]	; 0x74
 801b410:	695b      	ldr	r3, [r3, #20]
 801b412:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801b414:	4798      	blx	r3
 801b416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b418:	4282      	cmp	r2, r0
 801b41a:	4606      	mov	r6, r0
 801b41c:	f000 813a 	beq.w	801b694 <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 801b420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b422:	2a01      	cmp	r2, #1
 801b424:	f000 80fc 	beq.w	801b620 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 801b428:	2800      	cmp	r0, #0
 801b42a:	d047      	beq.n	801b4bc <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801b42c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b430:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 801b434:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b436:	f7fd fe9b 	bl	8019170 <GUI_ALLOC_LockH>
 801b43a:	4607      	mov	r7, r0
 801b43c:	901a      	str	r0, [sp, #104]	; 0x68
 801b43e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b440:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b442:	2808      	cmp	r0, #8
 801b444:	f240 80dc 	bls.w	801b600 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 801b448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b44a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b44c:	46b3      	mov	fp, r6
 801b44e:	fb01 2a03 	mla	sl, r1, r3, r2
 801b452:	46b9      	mov	r9, r7
 801b454:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801b458:	47a0      	blx	r4
 801b45a:	47a8      	blx	r5
 801b45c:	f1bb 0b01 	subs.w	fp, fp, #1
 801b460:	f849 0b04 	str.w	r0, [r9], #4
 801b464:	d1f6      	bne.n	801b454 <GUI_MEMDEV__WriteToActiveOpaque+0x144>
 801b466:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b468:	281f      	cmp	r0, #31
 801b46a:	d804      	bhi.n	801b476 <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 801b46c:	4602      	mov	r2, r0
 801b46e:	4631      	mov	r1, r6
 801b470:	4638      	mov	r0, r7
 801b472:	f001 fc69 	bl	801cd48 <GUI__CompactPixelIndices>
 801b476:	2200      	movs	r2, #0
 801b478:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b47a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b47c:	9203      	str	r2, [sp, #12]
 801b47e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b480:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b482:	9102      	str	r1, [sp, #8]
 801b484:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b486:	9105      	str	r1, [sp, #20]
 801b488:	4410      	add	r0, r2
 801b48a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b48c:	9304      	str	r3, [sp, #16]
 801b48e:	4632      	mov	r2, r6
 801b490:	2301      	movs	r3, #1
 801b492:	f8cd 8000 	str.w	r8, [sp]
 801b496:	f8cd 8004 	str.w	r8, [sp, #4]
 801b49a:	f7f9 ffff 	bl	801549c <LCD_DrawBitmap>
 801b49e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b4a0:	f7fd fe78 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b4a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b4a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b4a8:	6883      	ldr	r3, [r0, #8]
 801b4aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801b4ac:	695b      	ldr	r3, [r3, #20]
 801b4ae:	4416      	add	r6, r2
 801b4b0:	961d      	str	r6, [sp, #116]	; 0x74
 801b4b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b4b4:	4798      	blx	r3
 801b4b6:	4606      	mov	r6, r0
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	d1bb      	bne.n	801b434 <GUI_MEMDEV__WriteToActiveOpaque+0x124>
 801b4bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b4be:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b4c0:	4406      	add	r6, r0
 801b4c2:	9611      	str	r6, [sp, #68]	; 0x44
 801b4c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b4c6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b4ca:	3601      	adds	r6, #1
 801b4cc:	960c      	str	r6, [sp, #48]	; 0x30
 801b4ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801b4d0:	4576      	cmp	r6, lr
 801b4d2:	f000 8120 	beq.w	801b716 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 801b4d6:	3601      	adds	r6, #1
 801b4d8:	960d      	str	r6, [sp, #52]	; 0x34
 801b4da:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b4dc:	4632      	mov	r2, r6
 801b4de:	e794      	b.n	801b40a <GUI_MEMDEV__WriteToActiveOpaque+0xfa>
 801b4e0:	2801      	cmp	r0, #1
 801b4e2:	d16f      	bne.n	801b5c4 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 801b4e4:	ab1e      	add	r3, sp, #120	; 0x78
 801b4e6:	900e      	str	r0, [sp, #56]	; 0x38
 801b4e8:	930a      	str	r3, [sp, #40]	; 0x28
 801b4ea:	e765      	b.n	801b3b8 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801b4ec:	4638      	mov	r0, r7
 801b4ee:	f7fd fe3f 	bl	8019170 <GUI_ALLOC_LockH>
 801b4f2:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 801b4f6:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 801b4fa:	f84a 0d10 	str.w	r0, [sl, #-16]!
 801b4fe:	6801      	ldr	r1, [r0, #0]
 801b500:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801b504:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 801b508:	9609      	str	r6, [sp, #36]	; 0x24
 801b50a:	4602      	mov	r2, r0
 801b50c:	4650      	mov	r0, sl
 801b50e:	690e      	ldr	r6, [r1, #16]
 801b510:	9208      	str	r2, [sp, #32]
 801b512:	f7fd fe3f 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b516:	4838      	ldr	r0, [pc, #224]	; (801b5f8 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 801b518:	4938      	ldr	r1, [pc, #224]	; (801b5fc <GUI_MEMDEV__WriteToActiveOpaque+0x2ec>)
 801b51a:	6800      	ldr	r0, [r0, #0]
 801b51c:	6875      	ldr	r5, [r6, #4]
 801b51e:	7c40      	ldrb	r0, [r0, #17]
 801b520:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b524:	690c      	ldr	r4, [r1, #16]
 801b526:	6821      	ldr	r1, [r4, #0]
 801b528:	910d      	str	r1, [sp, #52]	; 0x34
 801b52a:	f7f9 fcc7 	bl	8014ebc <GUI_GetBitsPerPixelEx>
 801b52e:	2808      	cmp	r0, #8
 801b530:	9a08      	ldr	r2, [sp, #32]
 801b532:	d942      	bls.n	801b5ba <GUI_MEMDEV__WriteToActiveOpaque+0x2aa>
 801b534:	2810      	cmp	r0, #16
 801b536:	bf8c      	ite	hi
 801b538:	2320      	movhi	r3, #32
 801b53a:	2310      	movls	r3, #16
 801b53c:	bf8c      	ite	hi
 801b53e:	2004      	movhi	r0, #4
 801b540:	2002      	movls	r0, #2
 801b542:	930b      	str	r3, [sp, #44]	; 0x2c
 801b544:	900a      	str	r0, [sp, #40]	; 0x28
 801b546:	42a6      	cmp	r6, r4
 801b548:	f000 81f6 	beq.w	801b938 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 801b54c:	f1b9 0f20 	cmp.w	r9, #32
 801b550:	f000 81b0 	beq.w	801b8b4 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 801b554:	f1b9 0f10 	cmp.w	r9, #16
 801b558:	f47f aee1 	bne.w	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b55c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 801b560:	fb08 f00e 	mul.w	r0, r8, lr
 801b564:	f7fd fdec 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 801b568:	9011      	str	r0, [sp, #68]	; 0x44
 801b56a:	2800      	cmp	r0, #0
 801b56c:	f43f aed7 	beq.w	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b570:	f7fd fdfe 	bl	8019170 <GUI_ALLOC_LockH>
 801b574:	901e      	str	r0, [sp, #120]	; 0x78
 801b576:	4638      	mov	r0, r7
 801b578:	f7fd fdfa 	bl	8019170 <GUI_ALLOC_LockH>
 801b57c:	901c      	str	r0, [sp, #112]	; 0x70
 801b57e:	6923      	ldr	r3, [r4, #16]
 801b580:	f100 0918 	add.w	r9, r0, #24
 801b584:	2b00      	cmp	r3, #0
 801b586:	f000 81e9 	beq.w	801b95c <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 801b58a:	6973      	ldr	r3, [r6, #20]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	f000 81e5 	beq.w	801b95c <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 801b592:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801b596:	0080      	lsls	r0, r0, #2
 801b598:	f7fd fdd2 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 801b59c:	900e      	str	r0, [sp, #56]	; 0x38
 801b59e:	2800      	cmp	r0, #0
 801b5a0:	f040 822b 	bne.w	801b9fa <GUI_MEMDEV__WriteToActiveOpaque+0x6ea>
 801b5a4:	901d      	str	r0, [sp, #116]	; 0x74
 801b5a6:	4650      	mov	r0, sl
 801b5a8:	f7fd fdf4 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b5ac:	a81e      	add	r0, sp, #120	; 0x78
 801b5ae:	f7fd fdf1 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b5b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5b4:	f7fd feee 	bl	8019394 <GUI_ALLOC_Free>
 801b5b8:	e6b1      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b5ba:	2108      	movs	r1, #8
 801b5bc:	2301      	movs	r3, #1
 801b5be:	910b      	str	r1, [sp, #44]	; 0x2c
 801b5c0:	930a      	str	r3, [sp, #40]	; 0x28
 801b5c2:	e7c0      	b.n	801b546 <GUI_MEMDEV__WriteToActiveOpaque+0x236>
 801b5c4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801b5c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b5cc:	e6f4      	b.n	801b3b8 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801b5ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b5d0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b5d2:	9502      	str	r5, [sp, #8]
 801b5d4:	2401      	movs	r4, #1
 801b5d6:	9603      	str	r6, [sp, #12]
 801b5d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b5da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b5dc:	9504      	str	r5, [sp, #16]
 801b5de:	9605      	str	r6, [sp, #20]
 801b5e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b5e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b5e8:	9400      	str	r4, [sp, #0]
 801b5ea:	9401      	str	r4, [sp, #4]
 801b5ec:	f7f9 ff56 	bl	801549c <LCD_DrawBitmap>
 801b5f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b5f2:	f7fd fecf 	bl	8019394 <GUI_ALLOC_Free>
 801b5f6:	e692      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b5f8:	2000026c 	.word	0x2000026c
 801b5fc:	2002c040 	.word	0x2002c040
 801b600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b604:	46b1      	mov	r9, r6
 801b606:	fb01 2a03 	mla	sl, r1, r3, r2
 801b60a:	46bb      	mov	fp, r7
 801b60c:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801b610:	47a0      	blx	r4
 801b612:	47a8      	blx	r5
 801b614:	f1b9 0901 	subs.w	r9, r9, #1
 801b618:	f84b 0b04 	str.w	r0, [fp], #4
 801b61c:	d1f6      	bne.n	801b60c <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 801b61e:	e722      	b.n	801b466 <GUI_MEMDEV__WriteToActiveOpaque+0x156>
 801b620:	2800      	cmp	r0, #0
 801b622:	f43f af4b 	beq.w	801b4bc <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801b626:	9517      	str	r5, [sp, #92]	; 0x5c
 801b628:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b62a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b62c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801b630:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801b634:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801b638:	9410      	str	r4, [sp, #64]	; 0x40
 801b63a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b63c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b63e:	9003      	str	r0, [sp, #12]
 801b640:	2c00      	cmp	r4, #0
 801b642:	46a6      	mov	lr, r4
 801b644:	bfb8      	it	lt
 801b646:	f104 0e07 	addlt.w	lr, r4, #7
 801b64a:	f004 0c07 	and.w	ip, r4, #7
 801b64e:	eb0a 0004 	add.w	r0, sl, r4
 801b652:	eb07 04ee 	add.w	r4, r7, lr, asr #3
 801b656:	9404      	str	r4, [sp, #16]
 801b658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b65a:	f8cd c018 	str.w	ip, [sp, #24]
 801b65e:	4632      	mov	r2, r6
 801b660:	4629      	mov	r1, r5
 801b662:	2301      	movs	r3, #1
 801b664:	f8cd 8000 	str.w	r8, [sp]
 801b668:	f8cd 8004 	str.w	r8, [sp, #4]
 801b66c:	f8cd 8008 	str.w	r8, [sp, #8]
 801b670:	9405      	str	r4, [sp, #20]
 801b672:	f7f9 fdf3 	bl	801525c <LCD__DrawBitmap_1bpp>
 801b676:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b678:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b67a:	6883      	ldr	r3, [r0, #8]
 801b67c:	4416      	add	r6, r2
 801b67e:	695b      	ldr	r3, [r3, #20]
 801b680:	961d      	str	r6, [sp, #116]	; 0x74
 801b682:	4659      	mov	r1, fp
 801b684:	464a      	mov	r2, r9
 801b686:	4798      	blx	r3
 801b688:	4606      	mov	r6, r0
 801b68a:	2800      	cmp	r0, #0
 801b68c:	d1d5      	bne.n	801b63a <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 801b68e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b690:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801b692:	e713      	b.n	801b4bc <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 801b694:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b696:	f7fd fd6b 	bl	8019170 <GUI_ALLOC_LockH>
 801b69a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b69c:	901a      	str	r0, [sp, #104]	; 0x68
 801b69e:	2e08      	cmp	r6, #8
 801b6a0:	4681      	mov	r9, r0
 801b6a2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b6a4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b6a6:	4682      	mov	sl, r0
 801b6a8:	d92c      	bls.n	801b704 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 801b6aa:	f836 0b02 	ldrh.w	r0, [r6], #2
 801b6ae:	47a0      	blx	r4
 801b6b0:	47a8      	blx	r5
 801b6b2:	3f01      	subs	r7, #1
 801b6b4:	f84a 0b04 	str.w	r0, [sl], #4
 801b6b8:	d1f7      	bne.n	801b6aa <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 801b6ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b6bc:	2e1f      	cmp	r6, #31
 801b6be:	d804      	bhi.n	801b6ca <GUI_MEMDEV__WriteToActiveOpaque+0x3ba>
 801b6c0:	4648      	mov	r0, r9
 801b6c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b6c4:	4632      	mov	r2, r6
 801b6c6:	f001 fb3f 	bl	801cd48 <GUI__CompactPixelIndices>
 801b6ca:	ae20      	add	r6, sp, #128	; 0x80
 801b6cc:	f8cd 8000 	str.w	r8, [sp]
 801b6d0:	f856 3d18 	ldr.w	r3, [r6, #-24]!
 801b6d4:	9610      	str	r6, [sp, #64]	; 0x40
 801b6d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b6d8:	9602      	str	r6, [sp, #8]
 801b6da:	2000      	movs	r0, #0
 801b6dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b6de:	9003      	str	r0, [sp, #12]
 801b6e0:	9605      	str	r6, [sp, #20]
 801b6e2:	9304      	str	r3, [sp, #16]
 801b6e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b6e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b6e8:	f8cd 8004 	str.w	r8, [sp, #4]
 801b6ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	f7f9 fed4 	bl	801549c <LCD_DrawBitmap>
 801b6f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b6f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b6fa:	440e      	add	r6, r1
 801b6fc:	9611      	str	r6, [sp, #68]	; 0x44
 801b6fe:	f7fd fd49 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b702:	e6df      	b.n	801b4c4 <GUI_MEMDEV__WriteToActiveOpaque+0x1b4>
 801b704:	f816 0b01 	ldrb.w	r0, [r6], #1
 801b708:	47a0      	blx	r4
 801b70a:	47a8      	blx	r5
 801b70c:	3f01      	subs	r7, #1
 801b70e:	f84a 0b04 	str.w	r0, [sl], #4
 801b712:	d1f7      	bne.n	801b704 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 801b714:	e7d1      	b.n	801b6ba <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 801b716:	a81c      	add	r0, sp, #112	; 0x70
 801b718:	f7fd fd3c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b71c:	e768      	b.n	801b5f0 <GUI_MEMDEV__WriteToActiveOpaque+0x2e0>
 801b71e:	4638      	mov	r0, r7
 801b720:	f7f7 f9c8 	bl	8012ab4 <GUI_MEMDEV_GetDataPtr>
 801b724:	4680      	mov	r8, r0
 801b726:	f1b9 0f00 	cmp.w	r9, #0
 801b72a:	f000 80b2 	beq.w	801b892 <GUI_MEMDEV__WriteToActiveOpaque+0x582>
 801b72e:	4648      	mov	r0, r9
 801b730:	f7fd fd1e 	bl	8019170 <GUI_ALLOC_LockH>
 801b734:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b736:	901c      	str	r0, [sp, #112]	; 0x70
 801b738:	2c00      	cmp	r4, #0
 801b73a:	f340 80a6 	ble.w	801b88a <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 801b73e:	ad1d      	add	r5, sp, #116	; 0x74
 801b740:	9513      	str	r5, [sp, #76]	; 0x4c
 801b742:	2600      	movs	r6, #0
 801b744:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 801b748:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b74a:	46b2      	mov	sl, r6
 801b74c:	2501      	movs	r5, #1
 801b74e:	6883      	ldr	r3, [r0, #8]
 801b750:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 801b754:	695b      	ldr	r3, [r3, #20]
 801b756:	4639      	mov	r1, r7
 801b758:	4632      	mov	r2, r6
 801b75a:	4798      	blx	r3
 801b75c:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 801b760:	4586      	cmp	lr, r0
 801b762:	4604      	mov	r4, r0
 801b764:	d02e      	beq.n	801b7c4 <GUI_MEMDEV__WriteToActiveOpaque+0x4b4>
 801b766:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b768:	2801      	cmp	r0, #1
 801b76a:	d05c      	beq.n	801b826 <GUI_MEMDEV__WriteToActiveOpaque+0x516>
 801b76c:	b314      	cbz	r4, 801b7b4 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 801b76e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801b772:	44b3      	add	fp, r6
 801b774:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b776:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 801b77a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b77c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b77e:	9102      	str	r1, [sp, #8]
 801b780:	fb00 830e 	mla	r3, r0, lr, r8
 801b784:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b786:	9203      	str	r2, [sp, #12]
 801b788:	9105      	str	r1, [sp, #20]
 801b78a:	4622      	mov	r2, r4
 801b78c:	9304      	str	r3, [sp, #16]
 801b78e:	4448      	add	r0, r9
 801b790:	4659      	mov	r1, fp
 801b792:	2301      	movs	r3, #1
 801b794:	9500      	str	r5, [sp, #0]
 801b796:	9501      	str	r5, [sp, #4]
 801b798:	f7f9 fe80 	bl	801549c <LCD_DrawBitmap>
 801b79c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b79e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b7a0:	6883      	ldr	r3, [r0, #8]
 801b7a2:	4422      	add	r2, r4
 801b7a4:	695b      	ldr	r3, [r3, #20]
 801b7a6:	921d      	str	r2, [sp, #116]	; 0x74
 801b7a8:	4639      	mov	r1, r7
 801b7aa:	4632      	mov	r2, r6
 801b7ac:	4798      	blx	r3
 801b7ae:	4604      	mov	r4, r0
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	d1df      	bne.n	801b774 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 801b7b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b7b6:	3601      	adds	r6, #1
 801b7b8:	44a0      	add	r8, r4
 801b7ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b7bc:	42b4      	cmp	r4, r6
 801b7be:	dd64      	ble.n	801b88a <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 801b7c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b7c2:	e7c4      	b.n	801b74e <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 801b7c4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801b7c8:	46cb      	mov	fp, r9
 801b7ca:	46b0      	mov	r8, r6
 801b7cc:	46b1      	mov	r9, r6
 801b7ce:	4676      	mov	r6, lr
 801b7d0:	e000      	b.n	801b7d4 <GUI_MEMDEV__WriteToActiveOpaque+0x4c4>
 801b7d2:	46a0      	mov	r8, r4
 801b7d4:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b7d6:	6883      	ldr	r3, [r0, #8]
 801b7d8:	f108 0401 	add.w	r4, r8, #1
 801b7dc:	695b      	ldr	r3, [r3, #20]
 801b7de:	4622      	mov	r2, r4
 801b7e0:	4639      	mov	r1, r7
 801b7e2:	4798      	blx	r3
 801b7e4:	4286      	cmp	r6, r0
 801b7e6:	d0f4      	beq.n	801b7d2 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 801b7e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b7ea:	9103      	str	r1, [sp, #12]
 801b7ec:	464e      	mov	r6, r9
 801b7ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b7f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7f4:	9002      	str	r0, [sp, #8]
 801b7f6:	46d9      	mov	r9, fp
 801b7f8:	46c3      	mov	fp, r8
 801b7fa:	ebc6 0e0b 	rsb	lr, r6, fp
 801b7fe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b802:	f8cd 8010 	str.w	r8, [sp, #16]
 801b806:	f10e 0e01 	add.w	lr, lr, #1
 801b80a:	4431      	add	r1, r6
 801b80c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b80e:	9205      	str	r2, [sp, #20]
 801b810:	9500      	str	r5, [sp, #0]
 801b812:	9501      	str	r5, [sp, #4]
 801b814:	4673      	mov	r3, lr
 801b816:	4648      	mov	r0, r9
 801b818:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b81a:	fb06 880e 	mla	r8, r6, lr, r8
 801b81e:	4626      	mov	r6, r4
 801b820:	f7f9 fe3c 	bl	801549c <LCD_DrawBitmap>
 801b824:	e7c9      	b.n	801b7ba <GUI_MEMDEV__WriteToActiveOpaque+0x4aa>
 801b826:	2c00      	cmp	r4, #0
 801b828:	d0c4      	beq.n	801b7b4 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 801b82a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801b82e:	44b6      	add	lr, r6
 801b830:	46b3      	mov	fp, r6
 801b832:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801b836:	4626      	mov	r6, r4
 801b838:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b83a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b83c:	9003      	str	r0, [sp, #12]
 801b83e:	2c00      	cmp	r4, #0
 801b840:	46a6      	mov	lr, r4
 801b842:	bfb8      	it	lt
 801b844:	f104 0e07 	addlt.w	lr, r4, #7
 801b848:	f004 0c07 	and.w	ip, r4, #7
 801b84c:	eb09 0004 	add.w	r0, r9, r4
 801b850:	eb08 04ee 	add.w	r4, r8, lr, asr #3
 801b854:	9404      	str	r4, [sp, #16]
 801b856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b858:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b85a:	f8cd c018 	str.w	ip, [sp, #24]
 801b85e:	4632      	mov	r2, r6
 801b860:	2301      	movs	r3, #1
 801b862:	9500      	str	r5, [sp, #0]
 801b864:	9501      	str	r5, [sp, #4]
 801b866:	9502      	str	r5, [sp, #8]
 801b868:	9405      	str	r4, [sp, #20]
 801b86a:	f7f9 fcf7 	bl	801525c <LCD__DrawBitmap_1bpp>
 801b86e:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b870:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b872:	6883      	ldr	r3, [r0, #8]
 801b874:	4432      	add	r2, r6
 801b876:	695b      	ldr	r3, [r3, #20]
 801b878:	921d      	str	r2, [sp, #116]	; 0x74
 801b87a:	4639      	mov	r1, r7
 801b87c:	465a      	mov	r2, fp
 801b87e:	4798      	blx	r3
 801b880:	4606      	mov	r6, r0
 801b882:	2800      	cmp	r0, #0
 801b884:	d1d8      	bne.n	801b838 <GUI_MEMDEV__WriteToActiveOpaque+0x528>
 801b886:	465e      	mov	r6, fp
 801b888:	e794      	b.n	801b7b4 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 801b88a:	a81c      	add	r0, sp, #112	; 0x70
 801b88c:	f7fd fc82 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b890:	e545      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b892:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b894:	9502      	str	r5, [sp, #8]
 801b896:	2401      	movs	r4, #1
 801b898:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b89a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b89c:	9004      	str	r0, [sp, #16]
 801b89e:	9603      	str	r6, [sp, #12]
 801b8a0:	9505      	str	r5, [sp, #20]
 801b8a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b8a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b8a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b8a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8aa:	9400      	str	r4, [sp, #0]
 801b8ac:	9401      	str	r4, [sp, #4]
 801b8ae:	f7f9 fdf5 	bl	801549c <LCD_DrawBitmap>
 801b8b2:	e534      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b8b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b8b6:	fb08 f005 	mul.w	r0, r8, r5
 801b8ba:	f7fd fc41 	bl	8019140 <GUI_ALLOC_AllocNoInit>
 801b8be:	900e      	str	r0, [sp, #56]	; 0x38
 801b8c0:	2800      	cmp	r0, #0
 801b8c2:	f43f ad2c 	beq.w	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b8c6:	f7fd fc53 	bl	8019170 <GUI_ALLOC_LockH>
 801b8ca:	901e      	str	r0, [sp, #120]	; 0x78
 801b8cc:	4638      	mov	r0, r7
 801b8ce:	f7fd fc4f 	bl	8019170 <GUI_ALLOC_LockH>
 801b8d2:	901c      	str	r0, [sp, #112]	; 0x70
 801b8d4:	6925      	ldr	r5, [r4, #16]
 801b8d6:	f100 0618 	add.w	r6, r0, #24
 801b8da:	2d00      	cmp	r5, #0
 801b8dc:	f000 8132 	beq.w	801bb44 <GUI_MEMDEV__WriteToActiveOpaque+0x834>
 801b8e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b8e2:	2d02      	cmp	r5, #2
 801b8e4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801b8e8:	f04f 0701 	mov.w	r7, #1
 801b8ec:	f000 8107 	beq.w	801bafe <GUI_MEMDEV__WriteToActiveOpaque+0x7ee>
 801b8f0:	2d04      	cmp	r5, #4
 801b8f2:	f000 80e1 	beq.w	801bab8 <GUI_MEMDEV__WriteToActiveOpaque+0x7a8>
 801b8f6:	2d01      	cmp	r5, #1
 801b8f8:	f000 8183 	beq.w	801bc02 <GUI_MEMDEV__WriteToActiveOpaque+0x8f2>
 801b8fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b8fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b900:	2300      	movs	r3, #0
 801b902:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b904:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b906:	9303      	str	r3, [sp, #12]
 801b908:	9305      	str	r3, [sp, #20]
 801b90a:	9104      	str	r1, [sp, #16]
 801b90c:	2301      	movs	r3, #1
 801b90e:	4629      	mov	r1, r5
 801b910:	9700      	str	r7, [sp, #0]
 801b912:	9701      	str	r7, [sp, #4]
 801b914:	9602      	str	r6, [sp, #8]
 801b916:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b918:	4642      	mov	r2, r8
 801b91a:	441d      	add	r5, r3
 801b91c:	f7f9 fdbe 	bl	801549c <LCD_DrawBitmap>
 801b920:	3c01      	subs	r4, #1
 801b922:	d1ed      	bne.n	801b900 <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 801b924:	4650      	mov	r0, sl
 801b926:	f7fd fc35 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b92a:	a81e      	add	r0, sp, #120	; 0x78
 801b92c:	f7fd fc32 	bl	8019194 <GUI_ALLOC_UnlockH>
 801b930:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b932:	f7fd fd2f 	bl	8019394 <GUI_ALLOC_Free>
 801b936:	e4f2      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b938:	2401      	movs	r4, #1
 801b93a:	3218      	adds	r2, #24
 801b93c:	2500      	movs	r5, #0
 801b93e:	9204      	str	r2, [sp, #16]
 801b940:	f8cd 9008 	str.w	r9, [sp, #8]
 801b944:	f8cd b00c 	str.w	fp, [sp, #12]
 801b948:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b94a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b94e:	9400      	str	r4, [sp, #0]
 801b950:	4642      	mov	r2, r8
 801b952:	9401      	str	r4, [sp, #4]
 801b954:	9505      	str	r5, [sp, #20]
 801b956:	f7f9 fda1 	bl	801549c <LCD_DrawBitmap>
 801b95a:	e4e0      	b.n	801b31e <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 801b95c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b95e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b962:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801b966:	e019      	b.n	801b99c <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 801b968:	2e04      	cmp	r6, #4
 801b96a:	d036      	beq.n	801b9da <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 801b96c:	2e01      	cmp	r6, #1
 801b96e:	d026      	beq.n	801b9be <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 801b970:	2001      	movs	r0, #1
 801b972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b974:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b976:	9000      	str	r0, [sp, #0]
 801b978:	9001      	str	r0, [sp, #4]
 801b97a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b97c:	9602      	str	r6, [sp, #8]
 801b97e:	2000      	movs	r0, #0
 801b980:	9003      	str	r0, [sp, #12]
 801b982:	9005      	str	r0, [sp, #20]
 801b984:	9304      	str	r3, [sp, #16]
 801b986:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b988:	2301      	movs	r3, #1
 801b98a:	4642      	mov	r2, r8
 801b98c:	18cf      	adds	r7, r1, r3
 801b98e:	f7f9 fd85 	bl	801549c <LCD_DrawBitmap>
 801b992:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b994:	3e01      	subs	r6, #1
 801b996:	9609      	str	r6, [sp, #36]	; 0x24
 801b998:	d02c      	beq.n	801b9f4 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 801b99a:	970c      	str	r7, [sp, #48]	; 0x30
 801b99c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b99e:	2e02      	cmp	r6, #2
 801b9a0:	d1e2      	bne.n	801b968 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801b9a2:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b9a6:	464f      	mov	r7, r9
 801b9a8:	4646      	mov	r6, r8
 801b9aa:	f837 0b02 	ldrh.w	r0, [r7], #2
 801b9ae:	47a8      	blx	r5
 801b9b0:	47a0      	blx	r4
 801b9b2:	3e01      	subs	r6, #1
 801b9b4:	f82a 0b02 	strh.w	r0, [sl], #2
 801b9b8:	d1f7      	bne.n	801b9aa <GUI_MEMDEV__WriteToActiveOpaque+0x69a>
 801b9ba:	44d9      	add	r9, fp
 801b9bc:	e7d8      	b.n	801b970 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801b9be:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b9c2:	464f      	mov	r7, r9
 801b9c4:	4646      	mov	r6, r8
 801b9c6:	f837 0b02 	ldrh.w	r0, [r7], #2
 801b9ca:	47a8      	blx	r5
 801b9cc:	47a0      	blx	r4
 801b9ce:	3e01      	subs	r6, #1
 801b9d0:	f80a 0b01 	strb.w	r0, [sl], #1
 801b9d4:	d1f7      	bne.n	801b9c6 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 801b9d6:	44d9      	add	r9, fp
 801b9d8:	e7ca      	b.n	801b970 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801b9da:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801b9dc:	46ca      	mov	sl, r9
 801b9de:	4646      	mov	r6, r8
 801b9e0:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801b9e4:	47a8      	blx	r5
 801b9e6:	47a0      	blx	r4
 801b9e8:	3e01      	subs	r6, #1
 801b9ea:	f847 0b04 	str.w	r0, [r7], #4
 801b9ee:	d1f7      	bne.n	801b9e0 <GUI_MEMDEV__WriteToActiveOpaque+0x6d0>
 801b9f0:	44d9      	add	r9, fp
 801b9f2:	e7bd      	b.n	801b970 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801b9f4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801b9f8:	e5d5      	b.n	801b5a6 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 801b9fa:	f7fd fbb9 	bl	8019170 <GUI_ALLOC_LockH>
 801b9fe:	901d      	str	r0, [sp, #116]	; 0x74
 801ba00:	2800      	cmp	r0, #0
 801ba02:	f43f add0 	beq.w	801b5a6 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 801ba06:	ea4f 0548 	mov.w	r5, r8, lsl #1
 801ba0a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ba0c:	950d      	str	r5, [sp, #52]	; 0x34
 801ba0e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801ba12:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801ba16:	e01a      	b.n	801ba4e <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 801ba18:	f1ba 0f04 	cmp.w	sl, #4
 801ba1c:	d032      	beq.n	801ba84 <GUI_MEMDEV__WriteToActiveOpaque+0x774>
 801ba1e:	f1ba 0f01 	cmp.w	sl, #1
 801ba22:	d028      	beq.n	801ba76 <GUI_MEMDEV__WriteToActiveOpaque+0x766>
 801ba24:	2300      	movs	r3, #0
 801ba26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ba28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ba2a:	9502      	str	r5, [sp, #8]
 801ba2c:	2001      	movs	r0, #1
 801ba2e:	9000      	str	r0, [sp, #0]
 801ba30:	9001      	str	r0, [sp, #4]
 801ba32:	9303      	str	r3, [sp, #12]
 801ba34:	9305      	str	r3, [sp, #20]
 801ba36:	9204      	str	r2, [sp, #16]
 801ba38:	4639      	mov	r1, r7
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ba3e:	4642      	mov	r2, r8
 801ba40:	441f      	add	r7, r3
 801ba42:	f7f9 fd2b 	bl	801549c <LCD_DrawBitmap>
 801ba46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ba48:	3d01      	subs	r5, #1
 801ba4a:	9509      	str	r5, [sp, #36]	; 0x24
 801ba4c:	d02b      	beq.n	801baa6 <GUI_MEMDEV__WriteToActiveOpaque+0x796>
 801ba4e:	f1ba 0f02 	cmp.w	sl, #2
 801ba52:	d1e1      	bne.n	801ba18 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 801ba54:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801ba58:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ba5a:	4648      	mov	r0, r9
 801ba5c:	4642      	mov	r2, r8
 801ba5e:	4653      	mov	r3, sl
 801ba60:	6975      	ldr	r5, [r6, #20]
 801ba62:	47a8      	blx	r5
 801ba64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ba66:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ba68:	44a9      	add	r9, r5
 801ba6a:	4659      	mov	r1, fp
 801ba6c:	4642      	mov	r2, r8
 801ba6e:	4653      	mov	r3, sl
 801ba70:	6925      	ldr	r5, [r4, #16]
 801ba72:	47a8      	blx	r5
 801ba74:	e7d6      	b.n	801ba24 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 801ba76:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801ba7a:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ba7c:	4648      	mov	r0, r9
 801ba7e:	4642      	mov	r2, r8
 801ba80:	2302      	movs	r3, #2
 801ba82:	e7ed      	b.n	801ba60 <GUI_MEMDEV__WriteToActiveOpaque+0x750>
 801ba84:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801ba88:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ba8a:	6975      	ldr	r5, [r6, #20]
 801ba8c:	4648      	mov	r0, r9
 801ba8e:	4642      	mov	r2, r8
 801ba90:	2302      	movs	r3, #2
 801ba92:	47a8      	blx	r5
 801ba94:	6925      	ldr	r5, [r4, #16]
 801ba96:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ba98:	4659      	mov	r1, fp
 801ba9a:	4642      	mov	r2, r8
 801ba9c:	4653      	mov	r3, sl
 801ba9e:	47a8      	blx	r5
 801baa0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801baa2:	44a9      	add	r9, r5
 801baa4:	e7be      	b.n	801ba24 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 801baa6:	a81d      	add	r0, sp, #116	; 0x74
 801baa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801baac:	f7fd fb72 	bl	8019194 <GUI_ALLOC_UnlockH>
 801bab0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bab2:	f7fd fc6f 	bl	8019394 <GUI_ALLOC_Free>
 801bab6:	e576      	b.n	801b5a6 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 801bab8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801baba:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801babe:	46a4      	mov	ip, r4
 801bac0:	f8dc 4010 	ldr.w	r4, [ip, #16]
 801bac4:	f8cd c020 	str.w	ip, [sp, #32]
 801bac8:	4630      	mov	r0, r6
 801baca:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bacc:	4642      	mov	r2, r8
 801bace:	2304      	movs	r3, #4
 801bad0:	47a0      	blx	r4
 801bad2:	2300      	movs	r3, #0
 801bad4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bad6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bad8:	9303      	str	r3, [sp, #12]
 801bada:	9305      	str	r3, [sp, #20]
 801badc:	9204      	str	r2, [sp, #16]
 801bade:	4659      	mov	r1, fp
 801bae0:	2301      	movs	r3, #1
 801bae2:	9700      	str	r7, [sp, #0]
 801bae4:	9701      	str	r7, [sp, #4]
 801bae6:	9402      	str	r4, [sp, #8]
 801bae8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801baea:	4642      	mov	r2, r8
 801baec:	449b      	add	fp, r3
 801baee:	f7f9 fcd5 	bl	801549c <LCD_DrawBitmap>
 801baf2:	3d01      	subs	r5, #1
 801baf4:	444e      	add	r6, r9
 801baf6:	f8dd c020 	ldr.w	ip, [sp, #32]
 801bafa:	d1e1      	bne.n	801bac0 <GUI_MEMDEV__WriteToActiveOpaque+0x7b0>
 801bafc:	e712      	b.n	801b924 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 801bafe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801bb00:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801bb04:	46a4      	mov	ip, r4
 801bb06:	f8dc 4010 	ldr.w	r4, [ip, #16]
 801bb0a:	f8cd c020 	str.w	ip, [sp, #32]
 801bb0e:	4630      	mov	r0, r6
 801bb10:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb12:	4642      	mov	r2, r8
 801bb14:	2302      	movs	r3, #2
 801bb16:	47a0      	blx	r4
 801bb18:	2300      	movs	r3, #0
 801bb1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bb1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bb1e:	9303      	str	r3, [sp, #12]
 801bb20:	9305      	str	r3, [sp, #20]
 801bb22:	9204      	str	r2, [sp, #16]
 801bb24:	4659      	mov	r1, fp
 801bb26:	2301      	movs	r3, #1
 801bb28:	9700      	str	r7, [sp, #0]
 801bb2a:	9701      	str	r7, [sp, #4]
 801bb2c:	9402      	str	r4, [sp, #8]
 801bb2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bb30:	4642      	mov	r2, r8
 801bb32:	449b      	add	fp, r3
 801bb34:	f7f9 fcb2 	bl	801549c <LCD_DrawBitmap>
 801bb38:	3d01      	subs	r5, #1
 801bb3a:	444e      	add	r6, r9
 801bb3c:	f8dd c020 	ldr.w	ip, [sp, #32]
 801bb40:	d1e1      	bne.n	801bb06 <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 801bb42:	e6ef      	b.n	801b924 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 801bb44:	ea4f 0488 	mov.w	r4, r8, lsl #2
 801bb48:	2701      	movs	r7, #1
 801bb4a:	e01a      	b.n	801bb82 <GUI_MEMDEV__WriteToActiveOpaque+0x872>
 801bb4c:	2804      	cmp	r0, #4
 801bb4e:	d045      	beq.n	801bbdc <GUI_MEMDEV__WriteToActiveOpaque+0x8cc>
 801bb50:	2801      	cmp	r0, #1
 801bb52:	d030      	beq.n	801bbb6 <GUI_MEMDEV__WriteToActiveOpaque+0x8a6>
 801bb54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bb56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb58:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bb5a:	9202      	str	r2, [sp, #8]
 801bb5c:	9304      	str	r3, [sp, #16]
 801bb5e:	9700      	str	r7, [sp, #0]
 801bb60:	2301      	movs	r3, #1
 801bb62:	9701      	str	r7, [sp, #4]
 801bb64:	9503      	str	r5, [sp, #12]
 801bb66:	9505      	str	r5, [sp, #20]
 801bb68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bb6a:	4642      	mov	r2, r8
 801bb6c:	eb01 0b03 	add.w	fp, r1, r3
 801bb70:	f7f9 fc94 	bl	801549c <LCD_DrawBitmap>
 801bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb76:	3b01      	subs	r3, #1
 801bb78:	9309      	str	r3, [sp, #36]	; 0x24
 801bb7a:	f43f aed3 	beq.w	801b924 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 801bb7e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801bb82:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bb84:	2802      	cmp	r0, #2
 801bb86:	d1e1      	bne.n	801bb4c <GUI_MEMDEV__WriteToActiveOpaque+0x83c>
 801bb88:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb8a:	46b3      	mov	fp, r6
 801bb8c:	46c1      	mov	r9, r8
 801bb8e:	4643      	mov	r3, r8
 801bb90:	46b0      	mov	r8, r6
 801bb92:	4626      	mov	r6, r4
 801bb94:	460c      	mov	r4, r1
 801bb96:	f85b 0b04 	ldr.w	r0, [fp], #4
 801bb9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb9c:	9308      	str	r3, [sp, #32]
 801bb9e:	4790      	blx	r2
 801bba0:	f1b9 0901 	subs.w	r9, r9, #1
 801bba4:	f824 0b02 	strh.w	r0, [r4], #2
 801bba8:	9b08      	ldr	r3, [sp, #32]
 801bbaa:	d1f4      	bne.n	801bb96 <GUI_MEMDEV__WriteToActiveOpaque+0x886>
 801bbac:	4634      	mov	r4, r6
 801bbae:	4646      	mov	r6, r8
 801bbb0:	4426      	add	r6, r4
 801bbb2:	4698      	mov	r8, r3
 801bbb4:	e7ce      	b.n	801bb54 <GUI_MEMDEV__WriteToActiveOpaque+0x844>
 801bbb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bbb8:	46b3      	mov	fp, r6
 801bbba:	46c1      	mov	r9, r8
 801bbbc:	4643      	mov	r3, r8
 801bbbe:	46b0      	mov	r8, r6
 801bbc0:	4626      	mov	r6, r4
 801bbc2:	460c      	mov	r4, r1
 801bbc4:	f85b 0b04 	ldr.w	r0, [fp], #4
 801bbc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bbca:	9308      	str	r3, [sp, #32]
 801bbcc:	4788      	blx	r1
 801bbce:	f1b9 0901 	subs.w	r9, r9, #1
 801bbd2:	f804 0b01 	strb.w	r0, [r4], #1
 801bbd6:	9b08      	ldr	r3, [sp, #32]
 801bbd8:	d1f4      	bne.n	801bbc4 <GUI_MEMDEV__WriteToActiveOpaque+0x8b4>
 801bbda:	e7e7      	b.n	801bbac <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 801bbdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bbde:	46b3      	mov	fp, r6
 801bbe0:	46c1      	mov	r9, r8
 801bbe2:	4643      	mov	r3, r8
 801bbe4:	46b0      	mov	r8, r6
 801bbe6:	4626      	mov	r6, r4
 801bbe8:	460c      	mov	r4, r1
 801bbea:	f85b 0b04 	ldr.w	r0, [fp], #4
 801bbee:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bbf0:	9308      	str	r3, [sp, #32]
 801bbf2:	4788      	blx	r1
 801bbf4:	f1b9 0901 	subs.w	r9, r9, #1
 801bbf8:	f844 0b04 	str.w	r0, [r4], #4
 801bbfc:	9b08      	ldr	r3, [sp, #32]
 801bbfe:	d1f4      	bne.n	801bbea <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 801bc00:	e7d4      	b.n	801bbac <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 801bc02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801bc04:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801bc08:	46a4      	mov	ip, r4
 801bc0a:	f8dc 4010 	ldr.w	r4, [ip, #16]
 801bc0e:	f8cd c020 	str.w	ip, [sp, #32]
 801bc12:	4630      	mov	r0, r6
 801bc14:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bc16:	4642      	mov	r2, r8
 801bc18:	2301      	movs	r3, #1
 801bc1a:	47a0      	blx	r4
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bc20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bc22:	9303      	str	r3, [sp, #12]
 801bc24:	9305      	str	r3, [sp, #20]
 801bc26:	9204      	str	r2, [sp, #16]
 801bc28:	4659      	mov	r1, fp
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	9700      	str	r7, [sp, #0]
 801bc2e:	9701      	str	r7, [sp, #4]
 801bc30:	9402      	str	r4, [sp, #8]
 801bc32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bc34:	4642      	mov	r2, r8
 801bc36:	449b      	add	fp, r3
 801bc38:	f7f9 fc30 	bl	801549c <LCD_DrawBitmap>
 801bc3c:	3d01      	subs	r5, #1
 801bc3e:	444e      	add	r6, r9
 801bc40:	f8dd c020 	ldr.w	ip, [sp, #32]
 801bc44:	d1e1      	bne.n	801bc0a <GUI_MEMDEV__WriteToActiveOpaque+0x8fa>
 801bc46:	e66d      	b.n	801b924 <GUI_MEMDEV__WriteToActiveOpaque+0x614>

0801bc48 <_WriteToActiveAlpha>:
 801bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc4c:	b093      	sub	sp, #76	; 0x4c
 801bc4e:	4698      	mov	r8, r3
 801bc50:	460e      	mov	r6, r1
 801bc52:	4614      	mov	r4, r2
 801bc54:	9009      	str	r0, [sp, #36]	; 0x24
 801bc56:	f7fd fa8b 	bl	8019170 <GUI_ALLOC_LockH>
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	a812      	add	r0, sp, #72	; 0x48
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	4d5a      	ldr	r5, [pc, #360]	; (801bdcc <_WriteToActiveAlpha+0x184>)
 801bc62:	6912      	ldr	r2, [r2, #16]
 801bc64:	f840 3d08 	str.w	r3, [r0, #-8]!
 801bc68:	6852      	ldr	r2, [r2, #4]
 801bc6a:	9208      	str	r2, [sp, #32]
 801bc6c:	891a      	ldrh	r2, [r3, #8]
 801bc6e:	9207      	str	r2, [sp, #28]
 801bc70:	f8b3 900a 	ldrh.w	r9, [r3, #10]
 801bc74:	f7fd fa8e 	bl	8019194 <GUI_ALLOC_UnlockH>
 801bc78:	682b      	ldr	r3, [r5, #0]
 801bc7a:	4a55      	ldr	r2, [pc, #340]	; (801bdd0 <_WriteToActiveAlpha+0x188>)
 801bc7c:	7c5b      	ldrb	r3, [r3, #17]
 801bc7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc82:	68c3      	ldr	r3, [r0, #12]
 801bc84:	2108      	movs	r1, #8
 801bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc88:	4798      	blx	r3
 801bc8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bc8e:	f8d8 2000 	ldr.w	r2, [r8]
 801bc92:	930a      	str	r3, [sp, #40]	; 0x28
 801bc94:	2817      	cmp	r0, #23
 801bc96:	bf94      	ite	ls
 801bc98:	4682      	movls	sl, r0
 801bc9a:	f04f 0a20 	movhi.w	sl, #32
 801bc9e:	2000      	movs	r0, #0
 801bca0:	920e      	str	r2, [sp, #56]	; 0x38
 801bca2:	f7fa fb69 	bl	8016378 <GUI__AllocAlphaBuffer>
 801bca6:	b110      	cbz	r0, 801bcae <_WriteToActiveAlpha+0x66>
 801bca8:	b013      	add	sp, #76	; 0x4c
 801bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcae:	9a07      	ldr	r2, [sp, #28]
 801bcb0:	682b      	ldr	r3, [r5, #0]
 801bcb2:	b212      	sxth	r2, r2
 801bcb4:	4615      	mov	r5, r2
 801bcb6:	920d      	str	r2, [sp, #52]	; 0x34
 801bcb8:	4435      	add	r5, r6
 801bcba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bcbe:	3d01      	subs	r5, #1
 801bcc0:	1aad      	subs	r5, r5, r2
 801bcc2:	2d00      	cmp	r5, #0
 801bcc4:	bfca      	itet	gt
 801bcc6:	9a0d      	ldrgt	r2, [sp, #52]	; 0x34
 801bcc8:	9d0d      	ldrle	r5, [sp, #52]	; 0x34
 801bcca:	ebc5 0502 	rsbgt	r5, r5, r2
 801bcce:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801bcd2:	42b2      	cmp	r2, r6
 801bcd4:	bfc3      	ittte	gt
 801bcd6:	ebc6 0102 	rsbgt	r1, r6, r2
 801bcda:	ebc1 0505 	rsbgt	r5, r1, r5
 801bcde:	4616      	movgt	r6, r2
 801bce0:	2100      	movle	r1, #0
 801bce2:	2d00      	cmp	r5, #0
 801bce4:	dde0      	ble.n	801bca8 <_WriteToActiveAlpha+0x60>
 801bce6:	fa0f f989 	sxth.w	r9, r9
 801bcea:	eb09 0204 	add.w	r2, r9, r4
 801bcee:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801bcf2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801bcf6:	3a01      	subs	r2, #1
 801bcf8:	1a12      	subs	r2, r2, r0
 801bcfa:	2a00      	cmp	r2, #0
 801bcfc:	bfc8      	it	gt
 801bcfe:	ebc2 0909 	rsbgt	r9, r2, r9
 801bd02:	42a3      	cmp	r3, r4
 801bd04:	bfc3      	ittte	gt
 801bd06:	ebc4 0703 	rsbgt	r7, r4, r3
 801bd0a:	ebc7 0909 	rsbgt	r9, r7, r9
 801bd0e:	461c      	movgt	r4, r3
 801bd10:	2700      	movle	r7, #0
 801bd12:	f1b9 0f00 	cmp.w	r9, #0
 801bd16:	ddc7      	ble.n	801bca8 <_WriteToActiveAlpha+0x60>
 801bd18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801bd1e:	44a1      	add	r9, r4
 801bd20:	fb07 1703 	mla	r7, r7, r3, r1
 801bd24:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bd28:	00bf      	lsls	r7, r7, #2
 801bd2a:	46b1      	mov	r9, r6
 801bd2c:	e01b      	b.n	801bd66 <_WriteToActiveAlpha+0x11e>
 801bd2e:	4630      	mov	r0, r6
 801bd30:	4631      	mov	r1, r6
 801bd32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd34:	2304      	movs	r3, #4
 801bd36:	47e0      	blx	ip
 801bd38:	2301      	movs	r3, #1
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	9604      	str	r6, [sp, #16]
 801bd3e:	9e07      	ldr	r6, [sp, #28]
 801bd40:	9203      	str	r2, [sp, #12]
 801bd42:	9205      	str	r2, [sp, #20]
 801bd44:	4621      	mov	r1, r4
 801bd46:	f04f 0e04 	mov.w	lr, #4
 801bd4a:	f8cd a008 	str.w	sl, [sp, #8]
 801bd4e:	9300      	str	r3, [sp, #0]
 801bd50:	9301      	str	r3, [sp, #4]
 801bd52:	4648      	mov	r0, r9
 801bd54:	462a      	mov	r2, r5
 801bd56:	441c      	add	r4, r3
 801bd58:	fb16 770e 	smlabb	r7, r6, lr, r7
 801bd5c:	f7f9 fb9e 	bl	801549c <LCD_DrawBitmap>
 801bd60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bd62:	42b4      	cmp	r4, r6
 801bd64:	d0a0      	beq.n	801bca8 <_WriteToActiveAlpha+0x60>
 801bd66:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd68:	f7f6 fea4 	bl	8012ab4 <GUI_MEMDEV_GetDataPtr>
 801bd6c:	9e08      	ldr	r6, [sp, #32]
 801bd6e:	9600      	str	r6, [sp, #0]
 801bd70:	ab11      	add	r3, sp, #68	; 0x44
 801bd72:	19c2      	adds	r2, r0, r7
 801bd74:	9301      	str	r3, [sp, #4]
 801bd76:	4648      	mov	r0, r9
 801bd78:	4621      	mov	r1, r4
 801bd7a:	462b      	mov	r3, r5
 801bd7c:	f7fa f9aa 	bl	80160d4 <GUI__DoAlphaBlending>
 801bd80:	4606      	mov	r6, r0
 801bd82:	2800      	cmp	r0, #0
 801bd84:	d090      	beq.n	801bca8 <_WriteToActiveAlpha+0x60>
 801bd86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd88:	4b12      	ldr	r3, [pc, #72]	; (801bdd4 <_WriteToActiveAlpha+0x18c>)
 801bd8a:	429a      	cmp	r2, r3
 801bd8c:	d0d4      	beq.n	801bd38 <_WriteToActiveAlpha+0xf0>
 801bd8e:	4629      	mov	r1, r5
 801bd90:	4652      	mov	r2, sl
 801bd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd94:	f001 f886 	bl	801cea4 <GUI__CompactPixelIndicesEx>
 801bd98:	2800      	cmp	r0, #0
 801bd9a:	d1cd      	bne.n	801bd38 <_WriteToActiveAlpha+0xf0>
 801bd9c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801bda0:	f8de c010 	ldr.w	ip, [lr, #16]
 801bda4:	f1bc 0f00 	cmp.w	ip, #0
 801bda8:	d1c1      	bne.n	801bd2e <_WriteToActiveAlpha+0xe6>
 801bdaa:	46a0      	mov	r8, r4
 801bdac:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801bdb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bdb2:	950f      	str	r5, [sp, #60]	; 0x3c
 801bdb4:	4635      	mov	r5, r6
 801bdb6:	6828      	ldr	r0, [r5, #0]
 801bdb8:	47a0      	blx	r4
 801bdba:	f1bb 0b01 	subs.w	fp, fp, #1
 801bdbe:	f845 0b04 	str.w	r0, [r5], #4
 801bdc2:	d1f8      	bne.n	801bdb6 <_WriteToActiveAlpha+0x16e>
 801bdc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bdc6:	4644      	mov	r4, r8
 801bdc8:	e7b6      	b.n	801bd38 <_WriteToActiveAlpha+0xf0>
 801bdca:	bf00      	nop
 801bdcc:	2000026c 	.word	0x2000026c
 801bdd0:	2002c040 	.word	0x2002c040
 801bdd4:	0801968d 	.word	0x0801968d

0801bdd8 <GUI_MEMDEV__WriteToActiveAlpha>:
 801bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bddc:	4e55      	ldr	r6, [pc, #340]	; (801bf34 <GUI_MEMDEV__WriteToActiveAlpha+0x15c>)
 801bdde:	4b56      	ldr	r3, [pc, #344]	; (801bf38 <GUI_MEMDEV__WriteToActiveAlpha+0x160>)
 801bde0:	6835      	ldr	r5, [r6, #0]
 801bde2:	f8df 9160 	ldr.w	r9, [pc, #352]	; 801bf44 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>
 801bde6:	7c6c      	ldrb	r4, [r5, #17]
 801bde8:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
 801bdec:	f8d9 3000 	ldr.w	r3, [r9]
 801bdf0:	f8de c010 	ldr.w	ip, [lr, #16]
 801bdf4:	b08b      	sub	sp, #44	; 0x2c
 801bdf6:	4680      	mov	r8, r0
 801bdf8:	460c      	mov	r4, r1
 801bdfa:	4617      	mov	r7, r2
 801bdfc:	b153      	cbz	r3, 801be14 <GUI_MEMDEV__WriteToActiveAlpha+0x3c>
 801bdfe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 801be00:	b172      	cbz	r2, 801be20 <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 801be02:	4a4e      	ldr	r2, [pc, #312]	; (801bf3c <GUI_MEMDEV__WriteToActiveAlpha+0x164>)
 801be04:	ebbc 0302 	subs.w	r3, ip, r2
 801be08:	425a      	negs	r2, r3
 801be0a:	415a      	adcs	r2, r3
 801be0c:	4640      	mov	r0, r8
 801be0e:	b98a      	cbnz	r2, 801be34 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 801be10:	4621      	mov	r1, r4
 801be12:	463a      	mov	r2, r7
 801be14:	4663      	mov	r3, ip
 801be16:	f7ff ff17 	bl	801bc48 <_WriteToActiveAlpha>
 801be1a:	b00b      	add	sp, #44	; 0x2c
 801be1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be20:	f8de 200c 	ldr.w	r2, [lr, #12]
 801be24:	6812      	ldr	r2, [r2, #0]
 801be26:	f1d2 0201 	rsbs	r2, r2, #1
 801be2a:	bf38      	it	cc
 801be2c:	2200      	movcc	r2, #0
 801be2e:	4640      	mov	r0, r8
 801be30:	2a00      	cmp	r2, #0
 801be32:	d0ed      	beq.n	801be10 <GUI_MEMDEV__WriteToActiveAlpha+0x38>
 801be34:	f7fd f99c 	bl	8019170 <GUI_ALLOC_LockH>
 801be38:	4602      	mov	r2, r0
 801be3a:	a80a      	add	r0, sp, #40	; 0x28
 801be3c:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 801be40:	f840 2d08 	str.w	r2, [r0, #-8]!
 801be44:	8955      	ldrh	r5, [r2, #10]
 801be46:	68d2      	ldr	r2, [r2, #12]
 801be48:	9207      	str	r2, [sp, #28]
 801be4a:	f7fd f9a3 	bl	8019194 <GUI_ALLOC_UnlockH>
 801be4e:	6830      	ldr	r0, [r6, #0]
 801be50:	eb0b 0204 	add.w	r2, fp, r4
 801be54:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 801be58:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801be5c:	3a01      	subs	r2, #1
 801be5e:	1ad2      	subs	r2, r2, r3
 801be60:	2a00      	cmp	r2, #0
 801be62:	bfcc      	ite	gt
 801be64:	ebc2 0a0b 	rsbgt	sl, r2, fp
 801be68:	46da      	movle	sl, fp
 801be6a:	428c      	cmp	r4, r1
 801be6c:	bfbd      	ittte	lt
 801be6e:	ebc4 0301 	rsblt	r3, r4, r1
 801be72:	ebc3 0a0a 	rsblt	sl, r3, sl
 801be76:	460c      	movlt	r4, r1
 801be78:	2300      	movge	r3, #0
 801be7a:	f1ba 0f00 	cmp.w	sl, #0
 801be7e:	ddcc      	ble.n	801be1a <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 801be80:	b22d      	sxth	r5, r5
 801be82:	19e9      	adds	r1, r5, r7
 801be84:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 801be88:	3901      	subs	r1, #1
 801be8a:	ebcc 0101 	rsb	r1, ip, r1
 801be8e:	2900      	cmp	r1, #0
 801be90:	bfc8      	it	gt
 801be92:	ebc1 0505 	rsbgt	r5, r1, r5
 801be96:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801be9a:	428f      	cmp	r7, r1
 801be9c:	bfbd      	ittte	lt
 801be9e:	ebc7 0c01 	rsblt	ip, r7, r1
 801bea2:	ebcc 0505 	rsblt	r5, ip, r5
 801bea6:	460f      	movlt	r7, r1
 801bea8:	f04f 0c00 	movge.w	ip, #0
 801beac:	2d00      	cmp	r5, #0
 801beae:	ddb4      	ble.n	801be1a <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 801beb0:	4640      	mov	r0, r8
 801beb2:	9305      	str	r3, [sp, #20]
 801beb4:	f8cd c018 	str.w	ip, [sp, #24]
 801beb8:	f7f6 fdfc 	bl	8012ab4 <GUI_MEMDEV_GetDataPtr>
 801bebc:	6836      	ldr	r6, [r6, #0]
 801bebe:	9b05      	ldr	r3, [sp, #20]
 801bec0:	f8dd c018 	ldr.w	ip, [sp, #24]
 801bec4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801bec6:	fb0c 330b 	mla	r3, ip, fp, r3
 801beca:	eb00 0883 	add.w	r8, r0, r3, lsl #2
 801bece:	b319      	cbz	r1, 801bf18 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 801bed0:	4608      	mov	r0, r1
 801bed2:	f7fd f94d 	bl	8019170 <GUI_ALLOC_LockH>
 801bed6:	4606      	mov	r6, r0
 801bed8:	a80a      	add	r0, sp, #40	; 0x28
 801beda:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801bede:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801bee2:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 801bee6:	f840 6d04 	str.w	r6, [r0, #-4]!
 801beea:	1a7f      	subs	r7, r7, r1
 801beec:	3618      	adds	r6, #24
 801beee:	fb0b 6607 	mla	r6, fp, r7, r6
 801bef2:	1ae4      	subs	r4, r4, r3
 801bef4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801bef8:	f7fd f94c 	bl	8019194 <GUI_ALLOC_UnlockH>
 801befc:	2c00      	cmp	r4, #0
 801befe:	d08c      	beq.n	801be1a <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 801bf00:	9f07      	ldr	r7, [sp, #28]
 801bf02:	f8cd b000 	str.w	fp, [sp]
 801bf06:	9701      	str	r7, [sp, #4]
 801bf08:	f8d9 6000 	ldr.w	r6, [r9]
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	4641      	mov	r1, r8
 801bf10:	4652      	mov	r2, sl
 801bf12:	462b      	mov	r3, r5
 801bf14:	47b0      	blx	r6
 801bf16:	e780      	b.n	801be1a <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 801bf18:	7c70      	ldrb	r0, [r6, #17]
 801bf1a:	4e09      	ldr	r6, [pc, #36]	; (801bf40 <GUI_MEMDEV__WriteToActiveAlpha+0x168>)
 801bf1c:	f8cd a000 	str.w	sl, [sp]
 801bf20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801bf24:	9302      	str	r3, [sp, #8]
 801bf26:	9501      	str	r5, [sp, #4]
 801bf28:	4621      	mov	r1, r4
 801bf2a:	463a      	mov	r2, r7
 801bf2c:	4643      	mov	r3, r8
 801bf2e:	6834      	ldr	r4, [r6, #0]
 801bf30:	47a0      	blx	r4
 801bf32:	e772      	b.n	801be1a <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 801bf34:	2000026c 	.word	0x2000026c
 801bf38:	2002c040 	.word	0x2002c040
 801bf3c:	080216b4 	.word	0x080216b4
 801bf40:	2002bfe4 	.word	0x2002bfe4
 801bf44:	2002bfe8 	.word	0x2002bfe8

0801bf48 <GUI_MEMDEV_Write>:
 801bf48:	b570      	push	{r4, r5, r6, lr}
 801bf4a:	4604      	mov	r4, r0
 801bf4c:	b084      	sub	sp, #16
 801bf4e:	b908      	cbnz	r0, 801bf54 <GUI_MEMDEV_Write+0xc>
 801bf50:	b004      	add	sp, #16
 801bf52:	bd70      	pop	{r4, r5, r6, pc}
 801bf54:	f7fa fd8c 	bl	8016a70 <GUI_Lock>
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f7fd f909 	bl	8019170 <GUI_ALLOC_LockH>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	9301      	str	r3, [sp, #4]
 801bf62:	889e      	ldrh	r6, [r3, #4]
 801bf64:	88dd      	ldrh	r5, [r3, #6]
 801bf66:	891a      	ldrh	r2, [r3, #8]
 801bf68:	8959      	ldrh	r1, [r3, #10]
 801bf6a:	f8ad 6008 	strh.w	r6, [sp, #8]
 801bf6e:	186b      	adds	r3, r5, r1
 801bf70:	4432      	add	r2, r6
 801bf72:	3a01      	subs	r2, #1
 801bf74:	3b01      	subs	r3, #1
 801bf76:	a801      	add	r0, sp, #4
 801bf78:	f8ad 200c 	strh.w	r2, [sp, #12]
 801bf7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bf80:	f8ad 500a 	strh.w	r5, [sp, #10]
 801bf84:	f7fd f906 	bl	8019194 <GUI_ALLOC_UnlockH>
 801bf88:	a802      	add	r0, sp, #8
 801bf8a:	f7f6 f851 	bl	8012030 <WM__InitIVRSearch>
 801bf8e:	b150      	cbz	r0, 801bfa6 <GUI_MEMDEV_Write+0x5e>
 801bf90:	b236      	sxth	r6, r6
 801bf92:	b22d      	sxth	r5, r5
 801bf94:	4620      	mov	r0, r4
 801bf96:	4631      	mov	r1, r6
 801bf98:	462a      	mov	r2, r5
 801bf9a:	f7f7 fced 	bl	8013978 <GUI_MEMDEV__WriteToActiveAt>
 801bf9e:	f7f5 ff21 	bl	8011de4 <WM__GetNextIVR>
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	d1f6      	bne.n	801bf94 <GUI_MEMDEV_Write+0x4c>
 801bfa6:	f7fa fd59 	bl	8016a5c <GUI_Unlock>
 801bfaa:	b004      	add	sp, #16
 801bfac:	bd70      	pop	{r4, r5, r6, pc}
 801bfae:	bf00      	nop

0801bfb0 <GUI_USAGE_BM_AddPixel>:
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	b430      	push	{r4, r5}
 801bfb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801bfb8:	f933 5b14 	ldrsh.w	r5, [r3], #20
 801bfbc:	6900      	ldr	r0, [r0, #16]
 801bfbe:	1b49      	subs	r1, r1, r5
 801bfc0:	1b12      	subs	r2, r2, r4
 801bfc2:	fb00 3302 	mla	r3, r0, r2, r3
 801bfc6:	10c8      	asrs	r0, r1, #3
 801bfc8:	2480      	movs	r4, #128	; 0x80
 801bfca:	5c1a      	ldrb	r2, [r3, r0]
 801bfcc:	f001 0107 	and.w	r1, r1, #7
 801bfd0:	fa44 f101 	asr.w	r1, r4, r1
 801bfd4:	4311      	orrs	r1, r2
 801bfd6:	5419      	strb	r1, [r3, r0]
 801bfd8:	bc30      	pop	{r4, r5}
 801bfda:	4770      	bx	lr

0801bfdc <GUI_USAGE_BM_GetNextDirty>:
 801bfdc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801bfe0:	4293      	cmp	r3, r2
 801bfe2:	b470      	push	{r4, r5, r6}
 801bfe4:	680c      	ldr	r4, [r1, #0]
 801bfe6:	8885      	ldrh	r5, [r0, #4]
 801bfe8:	dd39      	ble.n	801c05e <GUI_USAGE_BM_GetNextDirty+0x82>
 801bfea:	b22d      	sxth	r5, r5
 801bfec:	42ac      	cmp	r4, r5
 801bfee:	6903      	ldr	r3, [r0, #16]
 801bff0:	da35      	bge.n	801c05e <GUI_USAGE_BM_GetNextDirty+0x82>
 801bff2:	3014      	adds	r0, #20
 801bff4:	fb02 0203 	mla	r2, r2, r3, r0
 801bff8:	10e0      	asrs	r0, r4, #3
 801bffa:	f004 0307 	and.w	r3, r4, #7
 801bffe:	5c16      	ldrb	r6, [r2, r0]
 801c000:	fa06 f303 	lsl.w	r3, r6, r3
 801c004:	4402      	add	r2, r0
 801c006:	3d01      	subs	r5, #1
 801c008:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c00c:	ebc0 00e5 	rsb	r0, r0, r5, asr #3
 801c010:	f102 0201 	add.w	r2, r2, #1
 801c014:	d10d      	bne.n	801c032 <GUI_USAGE_BM_GetNextDirty+0x56>
 801c016:	b318      	cbz	r0, 801c060 <GUI_USAGE_BM_GetNextDirty+0x84>
 801c018:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c01c:	3408      	adds	r4, #8
 801c01e:	f024 0407 	bic.w	r4, r4, #7
 801c022:	3801      	subs	r0, #1
 801c024:	2b00      	cmp	r3, #0
 801c026:	d0f6      	beq.n	801c016 <GUI_USAGE_BM_GetNextDirty+0x3a>
 801c028:	061d      	lsls	r5, r3, #24
 801c02a:	d404      	bmi.n	801c036 <GUI_USAGE_BM_GetNextDirty+0x5a>
 801c02c:	005b      	lsls	r3, r3, #1
 801c02e:	b2db      	uxtb	r3, r3
 801c030:	3401      	adds	r4, #1
 801c032:	061d      	lsls	r5, r3, #24
 801c034:	d5fa      	bpl.n	801c02c <GUI_USAGE_BM_GetNextDirty+0x50>
 801c036:	2bff      	cmp	r3, #255	; 0xff
 801c038:	d014      	beq.n	801c064 <GUI_USAGE_BM_GetNextDirty+0x88>
 801c03a:	065e      	lsls	r6, r3, #25
 801c03c:	4625      	mov	r5, r4
 801c03e:	d505      	bpl.n	801c04c <GUI_USAGE_BM_GetNextDirty+0x70>
 801c040:	005b      	lsls	r3, r3, #1
 801c042:	b2db      	uxtb	r3, r3
 801c044:	065e      	lsls	r6, r3, #25
 801c046:	f105 0501 	add.w	r5, r5, #1
 801c04a:	d4f9      	bmi.n	801c040 <GUI_USAGE_BM_GetNextDirty+0x64>
 801c04c:	f005 0307 	and.w	r3, r5, #7
 801c050:	2b07      	cmp	r3, #7
 801c052:	d009      	beq.n	801c068 <GUI_USAGE_BM_GetNextDirty+0x8c>
 801c054:	1b28      	subs	r0, r5, r4
 801c056:	3001      	adds	r0, #1
 801c058:	600c      	str	r4, [r1, #0]
 801c05a:	bc70      	pop	{r4, r5, r6}
 801c05c:	4770      	bx	lr
 801c05e:	2000      	movs	r0, #0
 801c060:	bc70      	pop	{r4, r5, r6}
 801c062:	4770      	bx	lr
 801c064:	1de5      	adds	r5, r4, #7
 801c066:	e7f1      	b.n	801c04c <GUI_USAGE_BM_GetNextDirty+0x70>
 801c068:	2800      	cmp	r0, #0
 801c06a:	ddf3      	ble.n	801c054 <GUI_USAGE_BM_GetNextDirty+0x78>
 801c06c:	7813      	ldrb	r3, [r2, #0]
 801c06e:	2bff      	cmp	r3, #255	; 0xff
 801c070:	d10e      	bne.n	801c090 <GUI_USAGE_BM_GetNextDirty+0xb4>
 801c072:	4410      	add	r0, r2
 801c074:	3801      	subs	r0, #1
 801c076:	e003      	b.n	801c080 <GUI_USAGE_BM_GetNextDirty+0xa4>
 801c078:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801c07c:	2bff      	cmp	r3, #255	; 0xff
 801c07e:	d107      	bne.n	801c090 <GUI_USAGE_BM_GetNextDirty+0xb4>
 801c080:	4282      	cmp	r2, r0
 801c082:	f105 0508 	add.w	r5, r5, #8
 801c086:	d1f7      	bne.n	801c078 <GUI_USAGE_BM_GetNextDirty+0x9c>
 801c088:	e7e4      	b.n	801c054 <GUI_USAGE_BM_GetNextDirty+0x78>
 801c08a:	005b      	lsls	r3, r3, #1
 801c08c:	b2db      	uxtb	r3, r3
 801c08e:	3501      	adds	r5, #1
 801c090:	061a      	lsls	r2, r3, #24
 801c092:	d4fa      	bmi.n	801c08a <GUI_USAGE_BM_GetNextDirty+0xae>
 801c094:	e7de      	b.n	801c054 <GUI_USAGE_BM_GetNextDirty+0x78>
 801c096:	bf00      	nop

0801c098 <_GUI_USAGE_BM_Delete>:
 801c098:	f7fd b97c 	b.w	8019394 <GUI_ALLOC_Free>

0801c09c <GUI_USAGE_BM_Clear>:
 801c09c:	4603      	mov	r3, r0
 801c09e:	2100      	movs	r1, #0
 801c0a0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801c0a4:	691b      	ldr	r3, [r3, #16]
 801c0a6:	3014      	adds	r0, #20
 801c0a8:	fb03 f202 	mul.w	r2, r3, r2
 801c0ac:	f001 bfcb 	b.w	801e046 <memset>

0801c0b0 <GUI_USAGE_BM_AddHLine>:
 801c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c0b8:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801c0bc:	1b0c      	subs	r4, r1, r4
 801c0be:	42b4      	cmp	r4, r6
 801c0c0:	da2c      	bge.n	801c11c <GUI_USAGE_BM_AddHLine+0x6c>
 801c0c2:	4423      	add	r3, r4
 801c0c4:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 801c0c8:	6905      	ldr	r5, [r0, #16]
 801c0ca:	3b01      	subs	r3, #1
 801c0cc:	43de      	mvns	r6, r3
 801c0ce:	1bd2      	subs	r2, r2, r7
 801c0d0:	21ff      	movs	r1, #255	; 0xff
 801c0d2:	f004 0707 	and.w	r7, r4, #7
 801c0d6:	3014      	adds	r0, #20
 801c0d8:	10e4      	asrs	r4, r4, #3
 801c0da:	f006 0607 	and.w	r6, r6, #7
 801c0de:	fb05 0502 	mla	r5, r5, r2, r0
 801c0e2:	fa01 f606 	lsl.w	r6, r1, r6
 801c0e6:	fa41 f207 	asr.w	r2, r1, r7
 801c0ea:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801c0ee:	b2f7      	uxtb	r7, r6
 801c0f0:	b2d0      	uxtb	r0, r2
 801c0f2:	eb05 0604 	add.w	r6, r5, r4
 801c0f6:	d013      	beq.n	801c120 <GUI_USAGE_BM_AddHLine+0x70>
 801c0f8:	5d2a      	ldrb	r2, [r5, r4]
 801c0fa:	f103 38ff 	add.w	r8, r3, #4294967295
 801c0fe:	4310      	orrs	r0, r2
 801c100:	f1b8 0f00 	cmp.w	r8, #0
 801c104:	f106 0601 	add.w	r6, r6, #1
 801c108:	5528      	strb	r0, [r5, r4]
 801c10a:	dd04      	ble.n	801c116 <GUI_USAGE_BM_AddHLine+0x66>
 801c10c:	4630      	mov	r0, r6
 801c10e:	4642      	mov	r2, r8
 801c110:	f001 ff99 	bl	801e046 <memset>
 801c114:	4446      	add	r6, r8
 801c116:	7833      	ldrb	r3, [r6, #0]
 801c118:	431f      	orrs	r7, r3
 801c11a:	7037      	strb	r7, [r6, #0]
 801c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c120:	5d2b      	ldrb	r3, [r5, r4]
 801c122:	4038      	ands	r0, r7
 801c124:	4318      	orrs	r0, r3
 801c126:	5528      	strb	r0, [r5, r4]
 801c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c12c <GUI_USAGE_BM_Create>:
 801c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c130:	f102 060f 	add.w	r6, r2, #15
 801c134:	1136      	asrs	r6, r6, #4
 801c136:	0076      	lsls	r6, r6, #1
 801c138:	461f      	mov	r7, r3
 801c13a:	fb06 f303 	mul.w	r3, r6, r3
 801c13e:	b082      	sub	sp, #8
 801c140:	4681      	mov	r9, r0
 801c142:	f103 0014 	add.w	r0, r3, #20
 801c146:	4690      	mov	r8, r2
 801c148:	468a      	mov	sl, r1
 801c14a:	f7fd f999 	bl	8019480 <GUI_ALLOC_AllocZero>
 801c14e:	4605      	mov	r5, r0
 801c150:	b1c0      	cbz	r0, 801c184 <GUI_USAGE_BM_Create+0x58>
 801c152:	f7fa fc8d 	bl	8016a70 <GUI_Lock>
 801c156:	4628      	mov	r0, r5
 801c158:	f7fd f80a 	bl	8019170 <GUI_ALLOC_LockH>
 801c15c:	4604      	mov	r4, r0
 801c15e:	a802      	add	r0, sp, #8
 801c160:	490a      	ldr	r1, [pc, #40]	; (801c18c <GUI_USAGE_BM_Create+0x60>)
 801c162:	f840 4d04 	str.w	r4, [r0, #-4]!
 801c166:	2201      	movs	r2, #1
 801c168:	60a1      	str	r1, [r4, #8]
 801c16a:	81a2      	strh	r2, [r4, #12]
 801c16c:	f8a4 8004 	strh.w	r8, [r4, #4]
 801c170:	80e7      	strh	r7, [r4, #6]
 801c172:	6126      	str	r6, [r4, #16]
 801c174:	f8a4 9000 	strh.w	r9, [r4]
 801c178:	f8a4 a002 	strh.w	sl, [r4, #2]
 801c17c:	f7fd f80a 	bl	8019194 <GUI_ALLOC_UnlockH>
 801c180:	f7fa fc6c 	bl	8016a5c <GUI_Unlock>
 801c184:	4628      	mov	r0, r5
 801c186:	b002      	add	sp, #8
 801c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c18c:	080219d4 	.word	0x080219d4

0801c190 <GUI_USAGE_DecUseCnt>:
 801c190:	b530      	push	{r4, r5, lr}
 801c192:	4605      	mov	r5, r0
 801c194:	b083      	sub	sp, #12
 801c196:	f7fa fc6b 	bl	8016a70 <GUI_Lock>
 801c19a:	4628      	mov	r0, r5
 801c19c:	f7fc ffe8 	bl	8019170 <GUI_ALLOC_LockH>
 801c1a0:	4602      	mov	r2, r0
 801c1a2:	a802      	add	r0, sp, #8
 801c1a4:	8994      	ldrh	r4, [r2, #12]
 801c1a6:	f840 2d04 	str.w	r2, [r0, #-4]!
 801c1aa:	3c01      	subs	r4, #1
 801c1ac:	b2a4      	uxth	r4, r4
 801c1ae:	8194      	strh	r4, [r2, #12]
 801c1b0:	f7fc fff0 	bl	8019194 <GUI_ALLOC_UnlockH>
 801c1b4:	b914      	cbnz	r4, 801c1bc <GUI_USAGE_DecUseCnt+0x2c>
 801c1b6:	4628      	mov	r0, r5
 801c1b8:	f7fd f8ec 	bl	8019394 <GUI_ALLOC_Free>
 801c1bc:	f7fa fc4e 	bl	8016a5c <GUI_Unlock>
 801c1c0:	b003      	add	sp, #12
 801c1c2:	bd30      	pop	{r4, r5, pc}

0801c1c4 <GUI_USAGE_AddRect>:
 801c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1c8:	9c08      	ldr	r4, [sp, #32]
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	4689      	mov	r9, r1
 801c1ce:	4615      	mov	r5, r2
 801c1d0:	4698      	mov	r8, r3
 801c1d2:	68b2      	ldr	r2, [r6, #8]
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	6857      	ldr	r7, [r2, #4]
 801c1d8:	4649      	mov	r1, r9
 801c1da:	462a      	mov	r2, r5
 801c1dc:	4643      	mov	r3, r8
 801c1de:	47b8      	blx	r7
 801c1e0:	3c01      	subs	r4, #1
 801c1e2:	f105 0501 	add.w	r5, r5, #1
 801c1e6:	d1f4      	bne.n	801c1d2 <GUI_USAGE_AddRect+0xe>
 801c1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c1ec <GUI_MEMDEV_ReduceYSize>:
 801c1ec:	b530      	push	{r4, r5, lr}
 801c1ee:	4604      	mov	r4, r0
 801c1f0:	b083      	sub	sp, #12
 801c1f2:	460d      	mov	r5, r1
 801c1f4:	b188      	cbz	r0, 801c21a <GUI_MEMDEV_ReduceYSize+0x2e>
 801c1f6:	f7fa fc3b 	bl	8016a70 <GUI_Lock>
 801c1fa:	4620      	mov	r0, r4
 801c1fc:	f7fc ffb8 	bl	8019170 <GUI_ALLOC_LockH>
 801c200:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c204:	9001      	str	r0, [sp, #4]
 801c206:	42ab      	cmp	r3, r5
 801c208:	bfc8      	it	gt
 801c20a:	8145      	strhgt	r5, [r0, #10]
 801c20c:	a801      	add	r0, sp, #4
 801c20e:	f7fc ffc1 	bl	8019194 <GUI_ALLOC_UnlockH>
 801c212:	f7fa fc23 	bl	8016a5c <GUI_Unlock>
 801c216:	b003      	add	sp, #12
 801c218:	bd30      	pop	{r4, r5, pc}
 801c21a:	4b03      	ldr	r3, [pc, #12]	; (801c228 <GUI_MEMDEV_ReduceYSize+0x3c>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801c220:	2c00      	cmp	r4, #0
 801c222:	d1e8      	bne.n	801c1f6 <GUI_MEMDEV_ReduceYSize+0xa>
 801c224:	b003      	add	sp, #12
 801c226:	bd30      	pop	{r4, r5, pc}
 801c228:	2000026c 	.word	0x2000026c

0801c22c <GUI_MEMDEV_Clear>:
 801c22c:	b510      	push	{r4, lr}
 801c22e:	4604      	mov	r4, r0
 801c230:	b082      	sub	sp, #8
 801c232:	b928      	cbnz	r0, 801c240 <GUI_MEMDEV_Clear+0x14>
 801c234:	4b12      	ldr	r3, [pc, #72]	; (801c280 <GUI_MEMDEV_Clear+0x54>)
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801c23a:	b90c      	cbnz	r4, 801c240 <GUI_MEMDEV_Clear+0x14>
 801c23c:	b002      	add	sp, #8
 801c23e:	bd10      	pop	{r4, pc}
 801c240:	f7fa fc16 	bl	8016a70 <GUI_Lock>
 801c244:	4620      	mov	r0, r4
 801c246:	f7fc ff93 	bl	8019170 <GUI_ALLOC_LockH>
 801c24a:	ab02      	add	r3, sp, #8
 801c24c:	6944      	ldr	r4, [r0, #20]
 801c24e:	f843 0d08 	str.w	r0, [r3, #-8]!
 801c252:	4668      	mov	r0, sp
 801c254:	f7fc ff9e 	bl	8019194 <GUI_ALLOC_UnlockH>
 801c258:	b91c      	cbnz	r4, 801c262 <GUI_MEMDEV_Clear+0x36>
 801c25a:	f7fa fbff 	bl	8016a5c <GUI_Unlock>
 801c25e:	b002      	add	sp, #8
 801c260:	bd10      	pop	{r4, pc}
 801c262:	4620      	mov	r0, r4
 801c264:	f7fc ff84 	bl	8019170 <GUI_ALLOC_LockH>
 801c268:	ac02      	add	r4, sp, #8
 801c26a:	6882      	ldr	r2, [r0, #8]
 801c26c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801c270:	6893      	ldr	r3, [r2, #8]
 801c272:	4798      	blx	r3
 801c274:	4620      	mov	r0, r4
 801c276:	f7fc ff8d 	bl	8019194 <GUI_ALLOC_UnlockH>
 801c27a:	f7fa fbef 	bl	8016a5c <GUI_Unlock>
 801c27e:	e7ee      	b.n	801c25e <GUI_MEMDEV_Clear+0x32>
 801c280:	2000026c 	.word	0x2000026c

0801c284 <LCD_SelectLCD>:
 801c284:	b510      	push	{r4, lr}
 801c286:	4c0e      	ldr	r4, [pc, #56]	; (801c2c0 <LCD_SelectLCD+0x3c>)
 801c288:	4b0e      	ldr	r3, [pc, #56]	; (801c2c4 <LCD_SelectLCD+0x40>)
 801c28a:	6822      	ldr	r2, [r4, #0]
 801c28c:	7c51      	ldrb	r1, [r2, #17]
 801c28e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c292:	b138      	cbz	r0, 801c2a4 <LCD_SelectLCD+0x20>
 801c294:	68c3      	ldr	r3, [r0, #12]
 801c296:	b113      	cbz	r3, 801c29e <LCD_SelectLCD+0x1a>
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	2b04      	cmp	r3, #4
 801c29c:	d00c      	beq.n	801c2b8 <LCD_SelectLCD+0x34>
 801c29e:	6800      	ldr	r0, [r0, #0]
 801c2a0:	2800      	cmp	r0, #0
 801c2a2:	d1f7      	bne.n	801c294 <LCD_SelectLCD+0x10>
 801c2a4:	4613      	mov	r3, r2
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	f103 0208 	add.w	r2, r3, #8
 801c2ac:	6619      	str	r1, [r3, #96]	; 0x60
 801c2ae:	615a      	str	r2, [r3, #20]
 801c2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2b4:	f7f9 ba7e 	b.w	80157b4 <LCD_SetClipRectMax>
 801c2b8:	f7fb f94a 	bl	8017550 <GUI_DEVICE_Unlink>
 801c2bc:	6823      	ldr	r3, [r4, #0]
 801c2be:	e7f2      	b.n	801c2a6 <LCD_SelectLCD+0x22>
 801c2c0:	2000026c 	.word	0x2000026c
 801c2c4:	2002c040 	.word	0x2002c040

0801c2c8 <LCD_ReadRectEx>:
 801c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2cc:	b087      	sub	sp, #28
 801c2ce:	4681      	mov	r9, r0
 801c2d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c2d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c2d4:	68ed      	ldr	r5, [r5, #12]
 801c2d6:	9303      	str	r3, [sp, #12]
 801c2d8:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
 801c2dc:	696f      	ldr	r7, [r5, #20]
 801c2de:	4616      	mov	r6, r2
 801c2e0:	460d      	mov	r5, r1
 801c2e2:	f1bc 0f00 	cmp.w	ip, #0
 801c2e6:	d00f      	beq.n	801c308 <LCD_ReadRectEx+0x40>
 801c2e8:	a811      	add	r0, sp, #68	; 0x44
 801c2ea:	2101      	movs	r1, #1
 801c2ec:	47e0      	blx	ip
 801c2ee:	4684      	mov	ip, r0
 801c2f0:	b150      	cbz	r0, 801c308 <LCD_ReadRectEx+0x40>
 801c2f2:	9b03      	ldr	r3, [sp, #12]
 801c2f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c2f6:	e88d 0018 	stmia.w	sp, {r3, r4}
 801c2fa:	4649      	mov	r1, r9
 801c2fc:	462a      	mov	r2, r5
 801c2fe:	4633      	mov	r3, r6
 801c300:	47e0      	blx	ip
 801c302:	b007      	add	sp, #28
 801c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c308:	4b65      	ldr	r3, [pc, #404]	; (801c4a0 <LCD_ReadRectEx+0x1d8>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	7c58      	ldrb	r0, [r3, #17]
 801c30e:	f7f8 fdd5 	bl	8014ebc <GUI_GetBitsPerPixelEx>
 801c312:	2808      	cmp	r0, #8
 801c314:	9005      	str	r0, [sp, #20]
 801c316:	dc28      	bgt.n	801c36a <LCD_ReadRectEx+0xa2>
 801c318:	f04f 0a01 	mov.w	sl, #1
 801c31c:	9b03      	ldr	r3, [sp, #12]
 801c31e:	429d      	cmp	r5, r3
 801c320:	dcef      	bgt.n	801c302 <LCD_ReadRectEx+0x3a>
 801c322:	f04f 0800 	mov.w	r8, #0
 801c326:	f8cd 9010 	str.w	r9, [sp, #16]
 801c32a:	e00a      	b.n	801c342 <LCD_ReadRectEx+0x7a>
 801c32c:	f1ba 0f04 	cmp.w	sl, #4
 801c330:	f000 80a3 	beq.w	801c47a <LCD_ReadRectEx+0x1b2>
 801c334:	f1ba 0f01 	cmp.w	sl, #1
 801c338:	d01f      	beq.n	801c37a <LCD_ReadRectEx+0xb2>
 801c33a:	9b03      	ldr	r3, [sp, #12]
 801c33c:	3501      	adds	r5, #1
 801c33e:	42ab      	cmp	r3, r5
 801c340:	dbdf      	blt.n	801c302 <LCD_ReadRectEx+0x3a>
 801c342:	f1ba 0f02 	cmp.w	sl, #2
 801c346:	d1f1      	bne.n	801c32c <LCD_ReadRectEx+0x64>
 801c348:	9b04      	ldr	r3, [sp, #16]
 801c34a:	42b3      	cmp	r3, r6
 801c34c:	dcf5      	bgt.n	801c33a <LCD_ReadRectEx+0x72>
 801c34e:	469b      	mov	fp, r3
 801c350:	46a1      	mov	r9, r4
 801c352:	4659      	mov	r1, fp
 801c354:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c356:	462a      	mov	r2, r5
 801c358:	47b8      	blx	r7
 801c35a:	f10b 0b01 	add.w	fp, fp, #1
 801c35e:	f829 0b02 	strh.w	r0, [r9], #2
 801c362:	455e      	cmp	r6, fp
 801c364:	464c      	mov	r4, r9
 801c366:	daf4      	bge.n	801c352 <LCD_ReadRectEx+0x8a>
 801c368:	e7e7      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c36a:	9b05      	ldr	r3, [sp, #20]
 801c36c:	2b10      	cmp	r3, #16
 801c36e:	bfcc      	ite	gt
 801c370:	f04f 0a04 	movgt.w	sl, #4
 801c374:	f04f 0a02 	movle.w	sl, #2
 801c378:	e7d0      	b.n	801c31c <LCD_ReadRectEx+0x54>
 801c37a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c37e:	f10c 33ff 	add.w	r3, ip, #4294967295
 801c382:	2b07      	cmp	r3, #7
 801c384:	d8d9      	bhi.n	801c33a <LCD_ReadRectEx+0x72>
 801c386:	e8df f003 	tbb	[pc, r3]
 801c38a:	3356      	.short	0x3356
 801c38c:	04041515 	.word	0x04041515
 801c390:	0404      	.short	0x0404
 801c392:	9b04      	ldr	r3, [sp, #16]
 801c394:	42b3      	cmp	r3, r6
 801c396:	dcd0      	bgt.n	801c33a <LCD_ReadRectEx+0x72>
 801c398:	469b      	mov	fp, r3
 801c39a:	46a1      	mov	r9, r4
 801c39c:	4659      	mov	r1, fp
 801c39e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c3a0:	462a      	mov	r2, r5
 801c3a2:	47b8      	blx	r7
 801c3a4:	f10b 0b01 	add.w	fp, fp, #1
 801c3a8:	f809 0b01 	strb.w	r0, [r9], #1
 801c3ac:	455e      	cmp	r6, fp
 801c3ae:	464c      	mov	r4, r9
 801c3b0:	daf4      	bge.n	801c39c <LCD_ReadRectEx+0xd4>
 801c3b2:	e7c2      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c3b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 801c3b8:	45b4      	cmp	ip, r6
 801c3ba:	dcbe      	bgt.n	801c33a <LCD_ReadRectEx+0x72>
 801c3bc:	46e1      	mov	r9, ip
 801c3be:	f04f 0b0f 	mov.w	fp, #15
 801c3c2:	4649      	mov	r1, r9
 801c3c4:	462a      	mov	r2, r5
 801c3c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c3c8:	47b8      	blx	r7
 801c3ca:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801c3ce:	7822      	ldrb	r2, [r4, #0]
 801c3d0:	f1c3 0104 	rsb	r1, r3, #4
 801c3d4:	fa0b f303 	lsl.w	r3, fp, r3
 801c3d8:	4088      	lsls	r0, r1
 801c3da:	4013      	ands	r3, r2
 801c3dc:	f109 0901 	add.w	r9, r9, #1
 801c3e0:	4303      	orrs	r3, r0
 801c3e2:	454e      	cmp	r6, r9
 801c3e4:	7023      	strb	r3, [r4, #0]
 801c3e6:	4444      	add	r4, r8
 801c3e8:	f088 0801 	eor.w	r8, r8, #1
 801c3ec:	dae9      	bge.n	801c3c2 <LCD_ReadRectEx+0xfa>
 801c3ee:	e7a4      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c3f0:	9b04      	ldr	r3, [sp, #16]
 801c3f2:	42b3      	cmp	r3, r6
 801c3f4:	dca1      	bgt.n	801c33a <LCD_ReadRectEx+0x72>
 801c3f6:	469b      	mov	fp, r3
 801c3f8:	f64f 793f 	movw	r9, #65343	; 0xff3f
 801c3fc:	4659      	mov	r1, fp
 801c3fe:	462a      	mov	r2, r5
 801c400:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c402:	47b8      	blx	r7
 801c404:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c408:	7822      	ldrb	r2, [r4, #0]
 801c40a:	f1c3 0106 	rsb	r1, r3, #6
 801c40e:	fa49 fc03 	asr.w	ip, r9, r3
 801c412:	4088      	lsls	r0, r1
 801c414:	f108 0301 	add.w	r3, r8, #1
 801c418:	ea0c 0202 	and.w	r2, ip, r2
 801c41c:	f10b 0b01 	add.w	fp, fp, #1
 801c420:	4302      	orrs	r2, r0
 801c422:	f023 0803 	bic.w	r8, r3, #3
 801c426:	455e      	cmp	r6, fp
 801c428:	7022      	strb	r2, [r4, #0]
 801c42a:	fa43 f808 	asr.w	r8, r3, r8
 801c42e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 801c432:	dae3      	bge.n	801c3fc <LCD_ReadRectEx+0x134>
 801c434:	e781      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c436:	f8dd c010 	ldr.w	ip, [sp, #16]
 801c43a:	45b4      	cmp	ip, r6
 801c43c:	f73f af7d 	bgt.w	801c33a <LCD_ReadRectEx+0x72>
 801c440:	46e3      	mov	fp, ip
 801c442:	4659      	mov	r1, fp
 801c444:	462a      	mov	r2, r5
 801c446:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c448:	47b8      	blx	r7
 801c44a:	7823      	ldrb	r3, [r4, #0]
 801c44c:	f64f 7c7f 	movw	ip, #65407	; 0xff7f
 801c450:	f1c8 0107 	rsb	r1, r8, #7
 801c454:	fa4c f208 	asr.w	r2, ip, r8
 801c458:	401a      	ands	r2, r3
 801c45a:	4088      	lsls	r0, r1
 801c45c:	f108 0301 	add.w	r3, r8, #1
 801c460:	f10b 0b01 	add.w	fp, fp, #1
 801c464:	4302      	orrs	r2, r0
 801c466:	f023 0807 	bic.w	r8, r3, #7
 801c46a:	455e      	cmp	r6, fp
 801c46c:	7022      	strb	r2, [r4, #0]
 801c46e:	fa43 f808 	asr.w	r8, r3, r8
 801c472:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 801c476:	dae4      	bge.n	801c442 <LCD_ReadRectEx+0x17a>
 801c478:	e75f      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c47a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801c47e:	45b4      	cmp	ip, r6
 801c480:	f73f af5b 	bgt.w	801c33a <LCD_ReadRectEx+0x72>
 801c484:	46e3      	mov	fp, ip
 801c486:	46a1      	mov	r9, r4
 801c488:	4659      	mov	r1, fp
 801c48a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c48c:	462a      	mov	r2, r5
 801c48e:	47b8      	blx	r7
 801c490:	f10b 0b01 	add.w	fp, fp, #1
 801c494:	f849 0b04 	str.w	r0, [r9], #4
 801c498:	455e      	cmp	r6, fp
 801c49a:	464c      	mov	r4, r9
 801c49c:	daf4      	bge.n	801c488 <LCD_ReadRectEx+0x1c0>
 801c49e:	e74c      	b.n	801c33a <LCD_ReadRectEx+0x72>
 801c4a0:	2000026c 	.word	0x2000026c

0801c4a4 <GUI_ReadRectEx>:
 801c4a4:	b4f0      	push	{r4, r5, r6, r7}
 801c4a6:	4c15      	ldr	r4, [pc, #84]	; (801c4fc <GUI_ReadRectEx+0x58>)
 801c4a8:	9f04      	ldr	r7, [sp, #16]
 801c4aa:	6825      	ldr	r5, [r4, #0]
 801c4ac:	9c05      	ldr	r4, [sp, #20]
 801c4ae:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
 801c4b2:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801c4b6:	4560      	cmp	r0, ip
 801c4b8:	bfb8      	it	lt
 801c4ba:	4660      	movlt	r0, ip
 801c4bc:	42b2      	cmp	r2, r6
 801c4be:	bfa8      	it	ge
 801c4c0:	4632      	movge	r2, r6
 801c4c2:	4290      	cmp	r0, r2
 801c4c4:	dc0b      	bgt.n	801c4de <GUI_ReadRectEx+0x3a>
 801c4c6:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 801c4ca:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801c4ce:	42b1      	cmp	r1, r6
 801c4d0:	bfb8      	it	lt
 801c4d2:	4631      	movlt	r1, r6
 801c4d4:	42ab      	cmp	r3, r5
 801c4d6:	bfa8      	it	ge
 801c4d8:	462b      	movge	r3, r5
 801c4da:	428b      	cmp	r3, r1
 801c4dc:	da04      	bge.n	801c4e8 <GUI_ReadRectEx+0x44>
 801c4de:	bcf0      	pop	{r4, r5, r6, r7}
 801c4e0:	4770      	bx	lr
 801c4e2:	6825      	ldr	r5, [r4, #0]
 801c4e4:	b12d      	cbz	r5, 801c4f2 <GUI_ReadRectEx+0x4e>
 801c4e6:	462c      	mov	r4, r5
 801c4e8:	68e5      	ldr	r5, [r4, #12]
 801c4ea:	682d      	ldr	r5, [r5, #0]
 801c4ec:	f035 0604 	bics.w	r6, r5, #4
 801c4f0:	d1f7      	bne.n	801c4e2 <GUI_ReadRectEx+0x3e>
 801c4f2:	9704      	str	r7, [sp, #16]
 801c4f4:	9405      	str	r4, [sp, #20]
 801c4f6:	bcf0      	pop	{r4, r5, r6, r7}
 801c4f8:	f7ff bee6 	b.w	801c2c8 <LCD_ReadRectEx>
 801c4fc:	2000026c 	.word	0x2000026c

0801c500 <LCD_GetPixelIndex>:
 801c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c504:	4e15      	ldr	r6, [pc, #84]	; (801c55c <LCD_GetPixelIndex+0x5c>)
 801c506:	4d16      	ldr	r5, [pc, #88]	; (801c560 <LCD_GetPixelIndex+0x60>)
 801c508:	6833      	ldr	r3, [r6, #0]
 801c50a:	7c5b      	ldrb	r3, [r3, #17]
 801c50c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c510:	68df      	ldr	r7, [r3, #12]
 801c512:	b082      	sub	sp, #8
 801c514:	4604      	mov	r4, r0
 801c516:	4688      	mov	r8, r1
 801c518:	4618      	mov	r0, r3
 801c51a:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 801c51c:	4669      	mov	r1, sp
 801c51e:	47b8      	blx	r7
 801c520:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c524:	42a3      	cmp	r3, r4
 801c526:	dc0b      	bgt.n	801c540 <LCD_GetPixelIndex+0x40>
 801c528:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c52c:	429c      	cmp	r4, r3
 801c52e:	dc07      	bgt.n	801c540 <LCD_GetPixelIndex+0x40>
 801c530:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801c534:	4543      	cmp	r3, r8
 801c536:	dc03      	bgt.n	801c540 <LCD_GetPixelIndex+0x40>
 801c538:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801c53c:	4598      	cmp	r8, r3
 801c53e:	dd03      	ble.n	801c548 <LCD_GetPixelIndex+0x48>
 801c540:	2000      	movs	r0, #0
 801c542:	b002      	add	sp, #8
 801c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c548:	6833      	ldr	r3, [r6, #0]
 801c54a:	7c5b      	ldrb	r3, [r3, #17]
 801c54c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801c550:	68c3      	ldr	r3, [r0, #12]
 801c552:	4621      	mov	r1, r4
 801c554:	4642      	mov	r2, r8
 801c556:	695b      	ldr	r3, [r3, #20]
 801c558:	4798      	blx	r3
 801c55a:	e7f2      	b.n	801c542 <LCD_GetPixelIndex+0x42>
 801c55c:	2000026c 	.word	0x2000026c
 801c560:	2002c040 	.word	0x2002c040

0801c564 <LCD_GetBkColorIndex>:
 801c564:	4b02      	ldr	r3, [pc, #8]	; (801c570 <LCD_GetBkColorIndex+0xc>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c56a:	6818      	ldr	r0, [r3, #0]
 801c56c:	4770      	bx	lr
 801c56e:	bf00      	nop
 801c570:	2000026c 	.word	0x2000026c

0801c574 <LCD_GetColorIndex>:
 801c574:	4b02      	ldr	r3, [pc, #8]	; (801c580 <LCD_GetColorIndex+0xc>)
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c57a:	6818      	ldr	r0, [r3, #0]
 801c57c:	4770      	bx	lr
 801c57e:	bf00      	nop
 801c580:	2000026c 	.word	0x2000026c

0801c584 <_OnExit>:
 801c584:	b510      	push	{r4, lr}
 801c586:	4c04      	ldr	r4, [pc, #16]	; (801c598 <_OnExit+0x14>)
 801c588:	6820      	ldr	r0, [r4, #0]
 801c58a:	f7fc fca7 	bl	8018edc <GUI_ALLOC_FreeFixedBlock>
 801c58e:	4a03      	ldr	r2, [pc, #12]	; (801c59c <_OnExit+0x18>)
 801c590:	2300      	movs	r3, #0
 801c592:	6023      	str	r3, [r4, #0]
 801c594:	6013      	str	r3, [r2, #0]
 801c596:	bd10      	pop	{r4, pc}
 801c598:	2002c140 	.word	0x2002c140
 801c59c:	2002b03c 	.word	0x2002b03c

0801c5a0 <LCD_InitColors>:
 801c5a0:	b538      	push	{r3, r4, r5, lr}
 801c5a2:	4c0a      	ldr	r4, [pc, #40]	; (801c5cc <LCD_InitColors+0x2c>)
 801c5a4:	6825      	ldr	r5, [r4, #0]
 801c5a6:	b10d      	cbz	r5, 801c5ac <LCD_InitColors+0xc>
 801c5a8:	2000      	movs	r0, #0
 801c5aa:	bd38      	pop	{r3, r4, r5, pc}
 801c5ac:	4b08      	ldr	r3, [pc, #32]	; (801c5d0 <LCD_InitColors+0x30>)
 801c5ae:	6818      	ldr	r0, [r3, #0]
 801c5b0:	0080      	lsls	r0, r0, #2
 801c5b2:	f7fc fc9d 	bl	8018ef0 <GUI_ALLOC_GetFixedBlock>
 801c5b6:	6020      	str	r0, [r4, #0]
 801c5b8:	b130      	cbz	r0, 801c5c8 <LCD_InitColors+0x28>
 801c5ba:	4806      	ldr	r0, [pc, #24]	; (801c5d4 <LCD_InitColors+0x34>)
 801c5bc:	4b06      	ldr	r3, [pc, #24]	; (801c5d8 <LCD_InitColors+0x38>)
 801c5be:	6003      	str	r3, [r0, #0]
 801c5c0:	f7fb f9cc 	bl	801795c <GUI__RegisterExit>
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	bd38      	pop	{r3, r4, r5, pc}
 801c5c8:	2001      	movs	r0, #1
 801c5ca:	bd38      	pop	{r3, r4, r5, pc}
 801c5cc:	2002c140 	.word	0x2002c140
 801c5d0:	200003d8 	.word	0x200003d8
 801c5d4:	2002b034 	.word	0x2002b034
 801c5d8:	0801c585 	.word	0x0801c585

0801c5dc <LCD_GetpPalConvTableBM>:
 801c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5e0:	4681      	mov	r9, r0
 801c5e2:	b348      	cbz	r0, 801c638 <LCD_GetpPalConvTableBM+0x5c>
 801c5e4:	6885      	ldr	r5, [r0, #8]
 801c5e6:	b365      	cbz	r5, 801c642 <LCD_GetpPalConvTableBM+0x66>
 801c5e8:	4f17      	ldr	r7, [pc, #92]	; (801c648 <LCD_GetpPalConvTableBM+0x6c>)
 801c5ea:	683e      	ldr	r6, [r7, #0]
 801c5ec:	b336      	cbz	r6, 801c63c <LCD_GetpPalConvTableBM+0x60>
 801c5ee:	6803      	ldr	r3, [r0, #0]
 801c5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c5f4:	dc1d      	bgt.n	801c632 <LCD_GetpPalConvTableBM+0x56>
 801c5f6:	4a15      	ldr	r2, [pc, #84]	; (801c64c <LCD_GetpPalConvTableBM+0x70>)
 801c5f8:	6812      	ldr	r2, [r2, #0]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	bfb4      	ite	lt
 801c5fe:	4690      	movlt	r8, r2
 801c600:	4698      	movge	r8, r3
 801c602:	f1b8 0f00 	cmp.w	r8, #0
 801c606:	dd0c      	ble.n	801c622 <LCD_GetpPalConvTableBM+0x46>
 801c608:	3d04      	subs	r5, #4
 801c60a:	2400      	movs	r4, #0
 801c60c:	e000      	b.n	801c610 <LCD_GetpPalConvTableBM+0x34>
 801c60e:	683e      	ldr	r6, [r7, #0]
 801c610:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801c614:	f7f9 f964 	bl	80158e0 <LCD_Color2Index>
 801c618:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 801c61c:	3401      	adds	r4, #1
 801c61e:	4544      	cmp	r4, r8
 801c620:	d1f5      	bne.n	801c60e <LCD_GetpPalConvTableBM+0x32>
 801c622:	4b0b      	ldr	r3, [pc, #44]	; (801c650 <LCD_GetpPalConvTableBM+0x74>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	b10b      	cbz	r3, 801c62c <LCD_GetpPalConvTableBM+0x50>
 801c628:	4648      	mov	r0, r9
 801c62a:	4798      	blx	r3
 801c62c:	6838      	ldr	r0, [r7, #0]
 801c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c632:	2000      	movs	r0, #0
 801c634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c63c:	4630      	mov	r0, r6
 801c63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c642:	4628      	mov	r0, r5
 801c644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c648:	2002c140 	.word	0x2002c140
 801c64c:	200003d8 	.word	0x200003d8
 801c650:	2002b03c 	.word	0x2002b03c

0801c654 <LCD_InitLUT>:
 801c654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c658:	f001 fc8c 	bl	801df74 <LCD_GetNumLayers>
 801c65c:	f1b0 0900 	subs.w	r9, r0, #0
 801c660:	dd2f      	ble.n	801c6c2 <LCD_InitLUT+0x6e>
 801c662:	4f19      	ldr	r7, [pc, #100]	; (801c6c8 <LCD_InitLUT+0x74>)
 801c664:	f8df b068 	ldr.w	fp, [pc, #104]	; 801c6d0 <LCD_InitLUT+0x7c>
 801c668:	2500      	movs	r5, #0
 801c66a:	4628      	mov	r0, r5
 801c66c:	f7fa ff2e 	bl	80174cc <GUI_DEVICE__GetpDriver>
 801c670:	b320      	cbz	r0, 801c6bc <LCD_InitLUT+0x68>
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	4628      	mov	r0, r5
 801c676:	f893 8011 	ldrb.w	r8, [r3, #17]
 801c67a:	745d      	strb	r5, [r3, #17]
 801c67c:	f7f8 fb9c 	bl	8014db8 <LCD_GetBitsPerPixelEx>
 801c680:	2808      	cmp	r0, #8
 801c682:	dc18      	bgt.n	801c6b6 <LCD_InitLUT+0x62>
 801c684:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 801c688:	4a10      	ldr	r2, [pc, #64]	; (801c6cc <LCD_InitLUT+0x78>)
 801c68a:	691b      	ldr	r3, [r3, #16]
 801c68c:	4293      	cmp	r3, r2
 801c68e:	d012      	beq.n	801c6b6 <LCD_InitLUT+0x62>
 801c690:	4628      	mov	r0, r5
 801c692:	f7f8 fb9f 	bl	8014dd4 <LCD_GetNumColorsEx>
 801c696:	1e06      	subs	r6, r0, #0
 801c698:	dd0d      	ble.n	801c6b6 <LCD_InitLUT+0x62>
 801c69a:	2400      	movs	r4, #0
 801c69c:	fa5f fa84 	uxtb.w	sl, r4
 801c6a0:	4650      	mov	r0, sl
 801c6a2:	f7f9 f92d 	bl	8015900 <LCD_Index2Color>
 801c6a6:	3401      	adds	r4, #1
 801c6a8:	4602      	mov	r2, r0
 801c6aa:	4651      	mov	r1, sl
 801c6ac:	4628      	mov	r0, r5
 801c6ae:	f7f8 fafd 	bl	8014cac <LCD_SetLUTEntryEx>
 801c6b2:	42a6      	cmp	r6, r4
 801c6b4:	d1f2      	bne.n	801c69c <LCD_InitLUT+0x48>
 801c6b6:	683b      	ldr	r3, [r7, #0]
 801c6b8:	f883 8011 	strb.w	r8, [r3, #17]
 801c6bc:	3501      	adds	r5, #1
 801c6be:	454d      	cmp	r5, r9
 801c6c0:	d1d3      	bne.n	801c66a <LCD_InitLUT+0x16>
 801c6c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6c6:	bf00      	nop
 801c6c8:	2000026c 	.word	0x2000026c
 801c6cc:	08022484 	.word	0x08022484
 801c6d0:	2002c040 	.word	0x2002c040

0801c6d4 <LCD_AA_SetOrMask>:
 801c6d4:	4b02      	ldr	r3, [pc, #8]	; (801c6e0 <LCD_AA_SetOrMask+0xc>)
 801c6d6:	681a      	ldr	r2, [r3, #0]
 801c6d8:	6018      	str	r0, [r3, #0]
 801c6da:	4610      	mov	r0, r2
 801c6dc:	4770      	bx	lr
 801c6de:	bf00      	nop
 801c6e0:	200003dc 	.word	0x200003dc

0801c6e4 <_GetWordWrap>:
 801c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6e8:	b083      	sub	sp, #12
 801c6ea:	ad02      	add	r5, sp, #8
 801c6ec:	460f      	mov	r7, r1
 801c6ee:	f845 0d04 	str.w	r0, [r5, #-4]!
 801c6f2:	4628      	mov	r0, r5
 801c6f4:	9200      	str	r2, [sp, #0]
 801c6f6:	f7f9 fef3 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c6fa:	f04f 0a00 	mov.w	sl, #0
 801c6fe:	4604      	mov	r4, r0
 801c700:	4681      	mov	r9, r0
 801c702:	4656      	mov	r6, sl
 801c704:	46d3      	mov	fp, sl
 801c706:	46d0      	mov	r8, sl
 801c708:	2c00      	cmp	r4, #0
 801c70a:	d03b      	beq.n	801c784 <_GetWordWrap+0xa0>
 801c70c:	2c0a      	cmp	r4, #10
 801c70e:	d039      	beq.n	801c784 <_GetWordWrap+0xa0>
 801c710:	2c20      	cmp	r4, #32
 801c712:	d03c      	beq.n	801c78e <_GetWordWrap+0xaa>
 801c714:	f1b9 0f20 	cmp.w	r9, #32
 801c718:	d03b      	beq.n	801c792 <_GetWordWrap+0xae>
 801c71a:	4920      	ldr	r1, [pc, #128]	; (801c79c <_GetWordWrap+0xb8>)
 801c71c:	680a      	ldr	r2, [r1, #0]
 801c71e:	4920      	ldr	r1, [pc, #128]	; (801c7a0 <_GetWordWrap+0xbc>)
 801c720:	2a00      	cmp	r2, #0
 801c722:	680b      	ldr	r3, [r1, #0]
 801c724:	dd0c      	ble.n	801c740 <_GetWordWrap+0x5c>
 801c726:	8818      	ldrh	r0, [r3, #0]
 801c728:	42a0      	cmp	r0, r4
 801c72a:	d02d      	beq.n	801c788 <_GetWordWrap+0xa4>
 801c72c:	1e98      	subs	r0, r3, #2
 801c72e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c732:	e003      	b.n	801c73c <_GetWordWrap+0x58>
 801c734:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 801c738:	42a2      	cmp	r2, r4
 801c73a:	d025      	beq.n	801c788 <_GetWordWrap+0xa4>
 801c73c:	4283      	cmp	r3, r0
 801c73e:	d1f9      	bne.n	801c734 <_GetWordWrap+0x50>
 801c740:	4620      	mov	r0, r4
 801c742:	f7fb fec7 	bl	80184d4 <GUI_GetCharDistX>
 801c746:	4480      	add	r8, r0
 801c748:	45b8      	cmp	r8, r7
 801c74a:	4682      	mov	sl, r0
 801c74c:	dd0e      	ble.n	801c76c <_GetWordWrap+0x88>
 801c74e:	f1bb 0f00 	cmp.w	fp, #0
 801c752:	d00b      	beq.n	801c76c <_GetWordWrap+0x88>
 801c754:	9a00      	ldr	r2, [sp, #0]
 801c756:	2e00      	cmp	r6, #0
 801c758:	bf18      	it	ne
 801c75a:	46b3      	movne	fp, r6
 801c75c:	b112      	cbz	r2, 801c764 <_GetWordWrap+0x80>
 801c75e:	ebca 0308 	rsb	r3, sl, r8
 801c762:	6013      	str	r3, [r2, #0]
 801c764:	4658      	mov	r0, fp
 801c766:	b003      	add	sp, #12
 801c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76c:	4628      	mov	r0, r5
 801c76e:	f7f9 feb7 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c772:	4604      	mov	r4, r0
 801c774:	f10b 0b01 	add.w	fp, fp, #1
 801c778:	f1b9 0f00 	cmp.w	r9, #0
 801c77c:	bf08      	it	eq
 801c77e:	4681      	moveq	r9, r0
 801c780:	2c00      	cmp	r4, #0
 801c782:	d1c3      	bne.n	801c70c <_GetWordWrap+0x28>
 801c784:	465e      	mov	r6, fp
 801c786:	e7e5      	b.n	801c754 <_GetWordWrap+0x70>
 801c788:	f10b 0601 	add.w	r6, fp, #1
 801c78c:	e7d8      	b.n	801c740 <_GetWordWrap+0x5c>
 801c78e:	465e      	mov	r6, fp
 801c790:	e7d6      	b.n	801c740 <_GetWordWrap+0x5c>
 801c792:	465e      	mov	r6, fp
 801c794:	f04f 0900 	mov.w	r9, #0
 801c798:	e7d2      	b.n	801c740 <_GetWordWrap+0x5c>
 801c79a:	bf00      	nop
 801c79c:	2002b044 	.word	0x2002b044
 801c7a0:	2002b040 	.word	0x2002b040

0801c7a4 <_GetCharWrap>:
 801c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7a8:	b082      	sub	sp, #8
 801c7aa:	af02      	add	r7, sp, #8
 801c7ac:	2400      	movs	r4, #0
 801c7ae:	4688      	mov	r8, r1
 801c7b0:	f847 0d04 	str.w	r0, [r7, #-4]!
 801c7b4:	4625      	mov	r5, r4
 801c7b6:	e008      	b.n	801c7ca <_GetCharWrap+0x26>
 801c7b8:	f7fb fe8c 	bl	80184d4 <GUI_GetCharDistX>
 801c7bc:	4405      	add	r5, r0
 801c7be:	b10c      	cbz	r4, 801c7c4 <_GetCharWrap+0x20>
 801c7c0:	4545      	cmp	r5, r8
 801c7c2:	dc08      	bgt.n	801c7d6 <_GetCharWrap+0x32>
 801c7c4:	2e0a      	cmp	r6, #10
 801c7c6:	d006      	beq.n	801c7d6 <_GetCharWrap+0x32>
 801c7c8:	3401      	adds	r4, #1
 801c7ca:	4638      	mov	r0, r7
 801c7cc:	f7f9 fe88 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c7d0:	4606      	mov	r6, r0
 801c7d2:	2800      	cmp	r0, #0
 801c7d4:	d1f0      	bne.n	801c7b8 <_GetCharWrap+0x14>
 801c7d6:	4620      	mov	r0, r4
 801c7d8:	b002      	add	sp, #8
 801c7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7de:	bf00      	nop

0801c7e0 <GUI__WrapGetNumCharsDisp>:
 801c7e0:	2a01      	cmp	r2, #1
 801c7e2:	b508      	push	{r3, lr}
 801c7e4:	d00b      	beq.n	801c7fe <GUI__WrapGetNumCharsDisp+0x1e>
 801c7e6:	2a02      	cmp	r2, #2
 801c7e8:	d103      	bne.n	801c7f2 <GUI__WrapGetNumCharsDisp+0x12>
 801c7ea:	4b07      	ldr	r3, [pc, #28]	; (801c808 <GUI__WrapGetNumCharsDisp+0x28>)
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	4798      	blx	r3
 801c7f0:	bd08      	pop	{r3, pc}
 801c7f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c7fa:	f7fb bd77 	b.w	80182ec <GUI__GetLineNumChars>
 801c7fe:	4b03      	ldr	r3, [pc, #12]	; (801c80c <GUI__WrapGetNumCharsDisp+0x2c>)
 801c800:	2200      	movs	r2, #0
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	4798      	blx	r3
 801c806:	bd08      	pop	{r3, pc}
 801c808:	200003e0 	.word	0x200003e0
 801c80c:	200003e4 	.word	0x200003e4

0801c810 <GUI__WrapGetNumBytesToNextLine>:
 801c810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c814:	b083      	sub	sp, #12
 801c816:	2a01      	cmp	r2, #1
 801c818:	4615      	mov	r5, r2
 801c81a:	4607      	mov	r7, r0
 801c81c:	9000      	str	r0, [sp, #0]
 801c81e:	4688      	mov	r8, r1
 801c820:	d032      	beq.n	801c888 <GUI__WrapGetNumBytesToNextLine+0x78>
 801c822:	2a02      	cmp	r2, #2
 801c824:	d01c      	beq.n	801c860 <GUI__WrapGetNumBytesToNextLine+0x50>
 801c826:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c82a:	f7fb fd5f 	bl	80182ec <GUI__GetLineNumChars>
 801c82e:	f8dd 9000 	ldr.w	r9, [sp]
 801c832:	4601      	mov	r1, r0
 801c834:	4604      	mov	r4, r0
 801c836:	4648      	mov	r0, r9
 801c838:	f7f9 fe66 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 801c83c:	ae02      	add	r6, sp, #8
 801c83e:	4448      	add	r0, r9
 801c840:	f846 0d08 	str.w	r0, [r6, #-8]!
 801c844:	4668      	mov	r0, sp
 801c846:	f7f9 fe4b 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c84a:	280a      	cmp	r0, #10
 801c84c:	d01a      	beq.n	801c884 <GUI__WrapGetNumBytesToNextLine+0x74>
 801c84e:	2d01      	cmp	r5, #1
 801c850:	d02d      	beq.n	801c8ae <GUI__WrapGetNumBytesToNextLine+0x9e>
 801c852:	4638      	mov	r0, r7
 801c854:	4621      	mov	r1, r4
 801c856:	f7f9 fe57 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 801c85a:	b003      	add	sp, #12
 801c85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c860:	4b1c      	ldr	r3, [pc, #112]	; (801c8d4 <GUI__WrapGetNumBytesToNextLine+0xc4>)
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	4798      	blx	r3
 801c866:	9d00      	ldr	r5, [sp, #0]
 801c868:	4601      	mov	r1, r0
 801c86a:	4604      	mov	r4, r0
 801c86c:	4628      	mov	r0, r5
 801c86e:	f7f9 fe4b 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 801c872:	ab02      	add	r3, sp, #8
 801c874:	4428      	add	r0, r5
 801c876:	f843 0d08 	str.w	r0, [r3, #-8]!
 801c87a:	4668      	mov	r0, sp
 801c87c:	f7f9 fe30 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c880:	280a      	cmp	r0, #10
 801c882:	d1e6      	bne.n	801c852 <GUI__WrapGetNumBytesToNextLine+0x42>
 801c884:	3401      	adds	r4, #1
 801c886:	e7e4      	b.n	801c852 <GUI__WrapGetNumBytesToNextLine+0x42>
 801c888:	4b13      	ldr	r3, [pc, #76]	; (801c8d8 <GUI__WrapGetNumBytesToNextLine+0xc8>)
 801c88a:	aa01      	add	r2, sp, #4
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	4798      	blx	r3
 801c890:	9d00      	ldr	r5, [sp, #0]
 801c892:	4601      	mov	r1, r0
 801c894:	4604      	mov	r4, r0
 801c896:	4628      	mov	r0, r5
 801c898:	f7f9 fe36 	bl	8016508 <GUI_UC__NumChars2NumBytes>
 801c89c:	ae02      	add	r6, sp, #8
 801c89e:	4428      	add	r0, r5
 801c8a0:	f846 0d08 	str.w	r0, [r6, #-8]!
 801c8a4:	4668      	mov	r0, sp
 801c8a6:	f7f9 fe1b 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c8aa:	280a      	cmp	r0, #10
 801c8ac:	d0ea      	beq.n	801c884 <GUI__WrapGetNumBytesToNextLine+0x74>
 801c8ae:	2820      	cmp	r0, #32
 801c8b0:	d1cf      	bne.n	801c852 <GUI__WrapGetNumBytesToNextLine+0x42>
 801c8b2:	f7fb fe0f 	bl	80184d4 <GUI_GetCharDistX>
 801c8b6:	4605      	mov	r5, r0
 801c8b8:	9b01      	ldr	r3, [sp, #4]
 801c8ba:	4598      	cmp	r8, r3
 801c8bc:	4668      	mov	r0, sp
 801c8be:	eb05 0203 	add.w	r2, r5, r3
 801c8c2:	dbc6      	blt.n	801c852 <GUI__WrapGetNumBytesToNextLine+0x42>
 801c8c4:	9201      	str	r2, [sp, #4]
 801c8c6:	f7f9 fe0b 	bl	80164e0 <GUI_UC__GetCharCodeInc>
 801c8ca:	2820      	cmp	r0, #32
 801c8cc:	f104 0401 	add.w	r4, r4, #1
 801c8d0:	d0f2      	beq.n	801c8b8 <GUI__WrapGetNumBytesToNextLine+0xa8>
 801c8d2:	e7be      	b.n	801c852 <GUI__WrapGetNumBytesToNextLine+0x42>
 801c8d4:	200003e0 	.word	0x200003e0
 801c8d8:	200003e4 	.word	0x200003e4

0801c8dc <GUI__ExpandPixelIndicesEx>:
 801c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8e0:	1e0f      	subs	r7, r1, #0
 801c8e2:	4606      	mov	r6, r0
 801c8e4:	dd06      	ble.n	801c8f4 <GUI__ExpandPixelIndicesEx+0x18>
 801c8e6:	2a08      	cmp	r2, #8
 801c8e8:	685d      	ldr	r5, [r3, #4]
 801c8ea:	dd05      	ble.n	801c8f8 <GUI__ExpandPixelIndicesEx+0x1c>
 801c8ec:	2a10      	cmp	r2, #16
 801c8ee:	dd19      	ble.n	801c924 <GUI__ExpandPixelIndicesEx+0x48>
 801c8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8f8:	3a01      	subs	r2, #1
 801c8fa:	2a07      	cmp	r2, #7
 801c8fc:	d8fa      	bhi.n	801c8f4 <GUI__ExpandPixelIndicesEx+0x18>
 801c8fe:	a301      	add	r3, pc, #4	; (adr r3, 801c904 <GUI__ExpandPixelIndicesEx+0x28>)
 801c900:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801c904:	0801c96d 	.word	0x0801c96d
 801c908:	0801c9c5 	.word	0x0801c9c5
 801c90c:	0801c8f5 	.word	0x0801c8f5
 801c910:	0801ca25 	.word	0x0801ca25
 801c914:	0801c8f5 	.word	0x0801c8f5
 801c918:	0801c8f5 	.word	0x0801c8f5
 801c91c:	0801c8f5 	.word	0x0801c8f5
 801c920:	0801c94f 	.word	0x0801c94f
 801c924:	695c      	ldr	r4, [r3, #20]
 801c926:	b12c      	cbz	r4, 801c934 <GUI__ExpandPixelIndicesEx+0x58>
 801c928:	4631      	mov	r1, r6
 801c92a:	463a      	mov	r2, r7
 801c92c:	2302      	movs	r3, #2
 801c92e:	47a0      	blx	r4
 801c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c934:	007f      	lsls	r7, r7, #1
 801c936:	19f4      	adds	r4, r6, r7
 801c938:	19e6      	adds	r6, r4, r7
 801c93a:	1be7      	subs	r7, r4, r7
 801c93c:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 801c940:	47a8      	blx	r5
 801c942:	42bc      	cmp	r4, r7
 801c944:	f846 0d04 	str.w	r0, [r6, #-4]!
 801c948:	d1f8      	bne.n	801c93c <GUI__ExpandPixelIndicesEx+0x60>
 801c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c94e:	eb06 0807 	add.w	r8, r6, r7
 801c952:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 801c956:	ebc7 0708 	rsb	r7, r7, r8
 801c95a:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 801c95e:	47a8      	blx	r5
 801c960:	45b8      	cmp	r8, r7
 801c962:	f846 0d04 	str.w	r0, [r6, #-4]!
 801c966:	d1f8      	bne.n	801c95a <GUI__ExpandPixelIndicesEx+0x7e>
 801c968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c96c:	1e7c      	subs	r4, r7, #1
 801c96e:	10e2      	asrs	r2, r4, #3
 801c970:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 801c974:	f04f 0880 	mov.w	r8, #128	; 0x80
 801c978:	f004 0707 	and.w	r7, r4, #7
 801c97c:	eb06 0a02 	add.w	sl, r6, r2
 801c980:	3b01      	subs	r3, #1
 801c982:	fa48 f807 	asr.w	r8, r8, r7
 801c986:	f816 9002 	ldrb.w	r9, [r6, r2]
 801c98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c98e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801c992:	fa5f f888 	uxtb.w	r8, r8
 801c996:	ea09 0008 	and.w	r0, r9, r8
 801c99a:	f1c7 0307 	rsb	r3, r7, #7
 801c99e:	4118      	asrs	r0, r3
 801c9a0:	47a8      	blx	r5
 801c9a2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c9a6:	f846 0904 	str.w	r0, [r6], #-4
 801c9aa:	2f00      	cmp	r7, #0
 801c9ac:	d16b      	bne.n	801ca86 <GUI__ExpandPixelIndicesEx+0x1aa>
 801c9ae:	f89a 9000 	ldrb.w	r9, [sl]
 801c9b2:	f04f 0801 	mov.w	r8, #1
 801c9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c9ba:	2707      	movs	r7, #7
 801c9bc:	2c00      	cmp	r4, #0
 801c9be:	d099      	beq.n	801c8f4 <GUI__ExpandPixelIndicesEx+0x18>
 801c9c0:	3c01      	subs	r4, #1
 801c9c2:	e7e8      	b.n	801c996 <GUI__ExpandPixelIndicesEx+0xba>
 801c9c4:	1e7c      	subs	r4, r7, #1
 801c9c6:	f004 0903 	and.w	r9, r4, #3
 801c9ca:	10a2      	asrs	r2, r4, #2
 801c9cc:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 801c9d0:	ea4f 0049 	mov.w	r0, r9, lsl #1
 801c9d4:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 801c9d8:	18b7      	adds	r7, r6, r2
 801c9da:	3b01      	subs	r3, #1
 801c9dc:	fa48 f800 	asr.w	r8, r8, r0
 801c9e0:	f816 a002 	ldrb.w	sl, [r6, r2]
 801c9e4:	fa5f f888 	uxtb.w	r8, r8
 801c9e8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801c9ec:	3f01      	subs	r7, #1
 801c9ee:	ea0a 0308 	and.w	r3, sl, r8
 801c9f2:	f1c0 0006 	rsb	r0, r0, #6
 801c9f6:	fa43 f000 	asr.w	r0, r3, r0
 801c9fa:	47a8      	blx	r5
 801c9fc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801ca00:	f846 0904 	str.w	r0, [r6], #-4
 801ca04:	f1b9 0f00 	cmp.w	r9, #0
 801ca08:	d146      	bne.n	801ca98 <GUI__ExpandPixelIndicesEx+0x1bc>
 801ca0a:	f04f 0803 	mov.w	r8, #3
 801ca0e:	f897 a000 	ldrb.w	sl, [r7]
 801ca12:	46c1      	mov	r9, r8
 801ca14:	3f01      	subs	r7, #1
 801ca16:	2c00      	cmp	r4, #0
 801ca18:	f43f af6c 	beq.w	801c8f4 <GUI__ExpandPixelIndicesEx+0x18>
 801ca1c:	3c01      	subs	r4, #1
 801ca1e:	ea4f 0049 	mov.w	r0, r9, lsl #1
 801ca22:	e7e4      	b.n	801c9ee <GUI__ExpandPixelIndicesEx+0x112>
 801ca24:	1e7c      	subs	r4, r7, #1
 801ca26:	f004 0901 	and.w	r9, r4, #1
 801ca2a:	1062      	asrs	r2, r4, #1
 801ca2c:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 801ca30:	ea4f 0089 	mov.w	r0, r9, lsl #2
 801ca34:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 801ca38:	18b7      	adds	r7, r6, r2
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	fa48 f800 	asr.w	r8, r8, r0
 801ca40:	f816 a002 	ldrb.w	sl, [r6, r2]
 801ca44:	fa5f f888 	uxtb.w	r8, r8
 801ca48:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801ca4c:	3f01      	subs	r7, #1
 801ca4e:	ea0a 0308 	and.w	r3, sl, r8
 801ca52:	f1c0 0004 	rsb	r0, r0, #4
 801ca56:	fa43 f000 	asr.w	r0, r3, r0
 801ca5a:	47a8      	blx	r5
 801ca5c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801ca60:	f846 0904 	str.w	r0, [r6], #-4
 801ca64:	f1b9 0f00 	cmp.w	r9, #0
 801ca68:	d111      	bne.n	801ca8e <GUI__ExpandPixelIndicesEx+0x1b2>
 801ca6a:	f897 a000 	ldrb.w	sl, [r7]
 801ca6e:	f04f 080f 	mov.w	r8, #15
 801ca72:	3f01      	subs	r7, #1
 801ca74:	f04f 0901 	mov.w	r9, #1
 801ca78:	2c00      	cmp	r4, #0
 801ca7a:	f43f af3b 	beq.w	801c8f4 <GUI__ExpandPixelIndicesEx+0x18>
 801ca7e:	3c01      	subs	r4, #1
 801ca80:	ea4f 0089 	mov.w	r0, r9, lsl #2
 801ca84:	e7e3      	b.n	801ca4e <GUI__ExpandPixelIndicesEx+0x172>
 801ca86:	3f01      	subs	r7, #1
 801ca88:	fa5f f888 	uxtb.w	r8, r8
 801ca8c:	e796      	b.n	801c9bc <GUI__ExpandPixelIndicesEx+0xe0>
 801ca8e:	fa5f f888 	uxtb.w	r8, r8
 801ca92:	f04f 0900 	mov.w	r9, #0
 801ca96:	e7ef      	b.n	801ca78 <GUI__ExpandPixelIndicesEx+0x19c>
 801ca98:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca9c:	fa5f f888 	uxtb.w	r8, r8
 801caa0:	e7b9      	b.n	801ca16 <GUI__ExpandPixelIndicesEx+0x13a>
 801caa2:	bf00      	nop

0801caa4 <GUI__DrawTwinArc4>:
 801caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	b093      	sub	sp, #76	; 0x4c
 801caaa:	4607      	mov	r7, r0
 801caac:	4698      	mov	r8, r3
 801caae:	460c      	mov	r4, r1
 801cab0:	4691      	mov	r9, r2
 801cab2:	f7f9 ffdd 	bl	8016a70 <GUI_Lock>
 801cab6:	4ba3      	ldr	r3, [pc, #652]	; (801cd44 <GUI__DrawTwinArc4+0x2a0>)
 801cab8:	681d      	ldr	r5, [r3, #0]
 801caba:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 801cabc:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 801cabe:	19f7      	adds	r7, r6, r7
 801cac0:	44b1      	add	r9, r6
 801cac2:	44a8      	add	r8, r5
 801cac4:	442c      	add	r4, r5
 801cac6:	a810      	add	r0, sp, #64	; 0x40
 801cac8:	9709      	str	r7, [sp, #36]	; 0x24
 801caca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cace:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801cad2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801cad6:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 801cada:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801cade:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 801cae2:	f7f5 faa5 	bl	8012030 <WM__InitIVRSearch>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	d07e      	beq.n	801cbe8 <GUI__DrawTwinArc4+0x144>
 801caea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801caec:	3b01      	subs	r3, #1
 801caee:	9303      	str	r3, [sp, #12]
 801caf0:	fb03 f303 	mul.w	r3, r3, r3
 801caf4:	9306      	str	r3, [sp, #24]
 801caf6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801caf8:	9a06      	ldr	r2, [sp, #24]
 801cafa:	fb03 f303 	mul.w	r3, r3, r3
 801cafe:	9305      	str	r3, [sp, #20]
 801cb00:	1a9b      	subs	r3, r3, r2
 801cb02:	930e      	str	r3, [sp, #56]	; 0x38
 801cb04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb06:	3b02      	subs	r3, #2
 801cb08:	9307      	str	r3, [sp, #28]
 801cb0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb0c:	3b03      	subs	r3, #3
 801cb0e:	930f      	str	r3, [sp, #60]	; 0x3c
 801cb10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb12:	4423      	add	r3, r4
 801cb14:	3402      	adds	r4, #2
 801cb16:	930d      	str	r3, [sp, #52]	; 0x34
 801cb18:	940c      	str	r4, [sp, #48]	; 0x30
 801cb1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	dd5f      	ble.n	801cbe0 <GUI__DrawTwinArc4+0x13c>
 801cb20:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cb22:	f7fb fa41 	bl	8017fa8 <GUI_SetColor>
 801cb26:	9b03      	ldr	r3, [sp, #12]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d062      	beq.n	801cbf2 <GUI__DrawTwinArc4+0x14e>
 801cb2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb30:	980e      	ldr	r0, [sp, #56]	; 0x38
 801cb32:	1ad3      	subs	r3, r2, r3
 801cb34:	9304      	str	r3, [sp, #16]
 801cb36:	f7f9 f8d1 	bl	8015cdc <GUI__sqrt32>
 801cb3a:	9b04      	ldr	r3, [sp, #16]
 801cb3c:	9e03      	ldr	r6, [sp, #12]
 801cb3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb40:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801cb44:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801cb48:	9c03      	ldr	r4, [sp, #12]
 801cb4a:	441e      	add	r6, r3
 801cb4c:	9b03      	ldr	r3, [sp, #12]
 801cb4e:	1ad5      	subs	r5, r2, r3
 801cb50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb54:	4607      	mov	r7, r0
 801cb56:	449b      	add	fp, r3
 801cb58:	ebc3 0a02 	rsb	sl, r3, r2
 801cb5c:	2000      	movs	r0, #0
 801cb5e:	e002      	b.n	801cb66 <GUI__DrawTwinArc4+0xc2>
 801cb60:	2000      	movs	r0, #0
 801cb62:	f109 0901 	add.w	r9, r9, #1
 801cb66:	ebc0 030b 	rsb	r3, r0, fp
 801cb6a:	ebc7 0c0b 	rsb	ip, r7, fp
 801cb6e:	3b01      	subs	r3, #1
 801cb70:	eb00 080a 	add.w	r8, r0, sl
 801cb74:	461a      	mov	r2, r3
 801cb76:	4660      	mov	r0, ip
 801cb78:	f108 0801 	add.w	r8, r8, #1
 801cb7c:	4629      	mov	r1, r5
 801cb7e:	4457      	add	r7, sl
 801cb80:	9302      	str	r3, [sp, #8]
 801cb82:	f8cd c004 	str.w	ip, [sp, #4]
 801cb86:	f7f8 faed 	bl	8015164 <LCD_DrawHLine>
 801cb8a:	4640      	mov	r0, r8
 801cb8c:	4629      	mov	r1, r5
 801cb8e:	463a      	mov	r2, r7
 801cb90:	f7f8 fae8 	bl	8015164 <LCD_DrawHLine>
 801cb94:	9b02      	ldr	r3, [sp, #8]
 801cb96:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	4660      	mov	r0, ip
 801cb9e:	4631      	mov	r1, r6
 801cba0:	f7f8 fae0 	bl	8015164 <LCD_DrawHLine>
 801cba4:	4640      	mov	r0, r8
 801cba6:	4631      	mov	r1, r6
 801cba8:	463a      	mov	r2, r7
 801cbaa:	f7f8 fadb 	bl	8015164 <LCD_DrawHLine>
 801cbae:	3c01      	subs	r4, #1
 801cbb0:	9b05      	ldr	r3, [sp, #20]
 801cbb2:	9e04      	ldr	r6, [sp, #16]
 801cbb4:	fb04 f804 	mul.w	r8, r4, r4
 801cbb8:	ebc8 0003 	rsb	r0, r8, r3
 801cbbc:	464d      	mov	r5, r9
 801cbbe:	4426      	add	r6, r4
 801cbc0:	d017      	beq.n	801cbf2 <GUI__DrawTwinArc4+0x14e>
 801cbc2:	f7f9 f88b 	bl	8015cdc <GUI__sqrt32>
 801cbc6:	9b03      	ldr	r3, [sp, #12]
 801cbc8:	42a3      	cmp	r3, r4
 801cbca:	4607      	mov	r7, r0
 801cbcc:	ddc8      	ble.n	801cb60 <GUI__DrawTwinArc4+0xbc>
 801cbce:	9b06      	ldr	r3, [sp, #24]
 801cbd0:	ebc8 0003 	rsb	r0, r8, r3
 801cbd4:	f7f9 f882 	bl	8015cdc <GUI__sqrt32>
 801cbd8:	e7c3      	b.n	801cb62 <GUI__DrawTwinArc4+0xbe>
 801cbda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cbdc:	2b02      	cmp	r3, #2
 801cbde:	d161      	bne.n	801cca4 <GUI__DrawTwinArc4+0x200>
 801cbe0:	f7f5 f900 	bl	8011de4 <WM__GetNextIVR>
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	d198      	bne.n	801cb1a <GUI__DrawTwinArc4+0x76>
 801cbe8:	f7f9 ff38 	bl	8016a5c <GUI_Unlock>
 801cbec:	b013      	add	sp, #76	; 0x4c
 801cbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cbf4:	2b01      	cmp	r3, #1
 801cbf6:	d0f3      	beq.n	801cbe0 <GUI__DrawTwinArc4+0x13c>
 801cbf8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801cbfa:	f7fb f9d5 	bl	8017fa8 <GUI_SetColor>
 801cbfe:	9b07      	ldr	r3, [sp, #28]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d0ea      	beq.n	801cbda <GUI__DrawTwinArc4+0x136>
 801cc04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801cc0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cc0c:	461c      	mov	r4, r3
 801cc0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cc10:	1ad3      	subs	r3, r2, r3
 801cc12:	9304      	str	r3, [sp, #16]
 801cc14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cc16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cc18:	449a      	add	sl, r3
 801cc1a:	ebc3 0902 	rsb	r9, r3, r2
 801cc1e:	e029      	b.n	801cc74 <GUI__DrawTwinArc4+0x1d0>
 801cc20:	f04f 0800 	mov.w	r8, #0
 801cc24:	4640      	mov	r0, r8
 801cc26:	ebc8 030a 	rsb	r3, r8, sl
 801cc2a:	f103 3bff 	add.w	fp, r3, #4294967295
 801cc2e:	ebc0 0c0a 	rsb	ip, r0, sl
 801cc32:	44c8      	add	r8, r9
 801cc34:	eb00 0609 	add.w	r6, r0, r9
 801cc38:	4629      	mov	r1, r5
 801cc3a:	4660      	mov	r0, ip
 801cc3c:	f108 0801 	add.w	r8, r8, #1
 801cc40:	465a      	mov	r2, fp
 801cc42:	f8cd c004 	str.w	ip, [sp, #4]
 801cc46:	f7f8 fa8d 	bl	8015164 <LCD_DrawHLine>
 801cc4a:	4629      	mov	r1, r5
 801cc4c:	4640      	mov	r0, r8
 801cc4e:	4632      	mov	r2, r6
 801cc50:	f7f8 fa88 	bl	8015164 <LCD_DrawHLine>
 801cc54:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cc58:	4639      	mov	r1, r7
 801cc5a:	4660      	mov	r0, ip
 801cc5c:	465a      	mov	r2, fp
 801cc5e:	f7f8 fa81 	bl	8015164 <LCD_DrawHLine>
 801cc62:	4640      	mov	r0, r8
 801cc64:	4639      	mov	r1, r7
 801cc66:	4632      	mov	r2, r6
 801cc68:	f7f8 fa7c 	bl	8015164 <LCD_DrawHLine>
 801cc6c:	3c01      	subs	r4, #1
 801cc6e:	f105 0501 	add.w	r5, r5, #1
 801cc72:	d0b2      	beq.n	801cbda <GUI__DrawTwinArc4+0x136>
 801cc74:	9b05      	ldr	r3, [sp, #20]
 801cc76:	9f04      	ldr	r7, [sp, #16]
 801cc78:	fb04 f604 	mul.w	r6, r4, r4
 801cc7c:	1b98      	subs	r0, r3, r6
 801cc7e:	f7f9 f82d 	bl	8015cdc <GUI__sqrt32>
 801cc82:	9b03      	ldr	r3, [sp, #12]
 801cc84:	42a3      	cmp	r3, r4
 801cc86:	4427      	add	r7, r4
 801cc88:	ddca      	ble.n	801cc20 <GUI__DrawTwinArc4+0x17c>
 801cc8a:	9b06      	ldr	r3, [sp, #24]
 801cc8c:	1b98      	subs	r0, r3, r6
 801cc8e:	f7f9 f825 	bl	8015cdc <GUI__sqrt32>
 801cc92:	9b07      	ldr	r3, [sp, #28]
 801cc94:	42a3      	cmp	r3, r4
 801cc96:	dd02      	ble.n	801cc9e <GUI__DrawTwinArc4+0x1fa>
 801cc98:	f100 38ff 	add.w	r8, r0, #4294967295
 801cc9c:	e7c3      	b.n	801cc26 <GUI__DrawTwinArc4+0x182>
 801cc9e:	f04f 0800 	mov.w	r8, #0
 801cca2:	e7c0      	b.n	801cc26 <GUI__DrawTwinArc4+0x182>
 801cca4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cca6:	f7fb f97f 	bl	8017fa8 <GUI_SetColor>
 801ccaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d097      	beq.n	801cbe0 <GUI__DrawTwinArc4+0x13c>
 801ccb0:	4699      	mov	r9, r3
 801ccb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ccb6:	441a      	add	r2, r3
 801ccb8:	9204      	str	r2, [sp, #16]
 801ccba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ccbc:	f1c3 0403 	rsb	r4, r3, #3
 801ccc0:	ebc3 0b02 	rsb	fp, r3, r2
 801ccc4:	9b04      	ldr	r3, [sp, #16]
 801ccc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ccc8:	f103 38ff 	add.w	r8, r3, #4294967295
 801cccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccce:	441c      	add	r4, r3
 801ccd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ccd2:	1ad3      	subs	r3, r2, r3
 801ccd4:	f10b 0701 	add.w	r7, fp, #1
 801ccd8:	9308      	str	r3, [sp, #32]
 801ccda:	e01e      	b.n	801cd1a <GUI__DrawTwinArc4+0x276>
 801ccdc:	2500      	movs	r5, #0
 801ccde:	9b04      	ldr	r3, [sp, #16]
 801cce0:	ebc5 0a03 	rsb	sl, r5, r3
 801cce4:	4621      	mov	r1, r4
 801cce6:	445d      	add	r5, fp
 801cce8:	4650      	mov	r0, sl
 801ccea:	4642      	mov	r2, r8
 801ccec:	f7f8 fa3a 	bl	8015164 <LCD_DrawHLine>
 801ccf0:	4621      	mov	r1, r4
 801ccf2:	4638      	mov	r0, r7
 801ccf4:	462a      	mov	r2, r5
 801ccf6:	f7f8 fa35 	bl	8015164 <LCD_DrawHLine>
 801ccfa:	4650      	mov	r0, sl
 801ccfc:	4631      	mov	r1, r6
 801ccfe:	4642      	mov	r2, r8
 801cd00:	f7f8 fa30 	bl	8015164 <LCD_DrawHLine>
 801cd04:	4638      	mov	r0, r7
 801cd06:	4631      	mov	r1, r6
 801cd08:	462a      	mov	r2, r5
 801cd0a:	f7f8 fa2b 	bl	8015164 <LCD_DrawHLine>
 801cd0e:	f1b9 0901 	subs.w	r9, r9, #1
 801cd12:	f104 0401 	add.w	r4, r4, #1
 801cd16:	f43f af63 	beq.w	801cbe0 <GUI__DrawTwinArc4+0x13c>
 801cd1a:	9b05      	ldr	r3, [sp, #20]
 801cd1c:	9e08      	ldr	r6, [sp, #32]
 801cd1e:	fb09 f509 	mul.w	r5, r9, r9
 801cd22:	1b58      	subs	r0, r3, r5
 801cd24:	f7f8 ffda 	bl	8015cdc <GUI__sqrt32>
 801cd28:	9b03      	ldr	r3, [sp, #12]
 801cd2a:	454b      	cmp	r3, r9
 801cd2c:	444e      	add	r6, r9
 801cd2e:	ddd5      	ble.n	801ccdc <GUI__DrawTwinArc4+0x238>
 801cd30:	9b06      	ldr	r3, [sp, #24]
 801cd32:	1b58      	subs	r0, r3, r5
 801cd34:	f7f8 ffd2 	bl	8015cdc <GUI__sqrt32>
 801cd38:	9b07      	ldr	r3, [sp, #28]
 801cd3a:	454b      	cmp	r3, r9
 801cd3c:	ddce      	ble.n	801ccdc <GUI__DrawTwinArc4+0x238>
 801cd3e:	1e45      	subs	r5, r0, #1
 801cd40:	e7cd      	b.n	801ccde <GUI__DrawTwinArc4+0x23a>
 801cd42:	bf00      	nop
 801cd44:	2000026c 	.word	0x2000026c

0801cd48 <GUI__CompactPixelIndices>:
 801cd48:	2a08      	cmp	r2, #8
 801cd4a:	b410      	push	{r4}
 801cd4c:	dd0e      	ble.n	801cd6c <GUI__CompactPixelIndices+0x24>
 801cd4e:	2a10      	cmp	r2, #16
 801cd50:	dc1b      	bgt.n	801cd8a <GUI__CompactPixelIndices+0x42>
 801cd52:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cd56:	4603      	mov	r3, r0
 801cd58:	f850 2b04 	ldr.w	r2, [r0], #4
 801cd5c:	f823 2b02 	strh.w	r2, [r3], #2
 801cd60:	428b      	cmp	r3, r1
 801cd62:	d1f9      	bne.n	801cd58 <GUI__CompactPixelIndices+0x10>
 801cd64:	2001      	movs	r0, #1
 801cd66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd6a:	4770      	bx	lr
 801cd6c:	2a02      	cmp	r2, #2
 801cd6e:	d010      	beq.n	801cd92 <GUI__CompactPixelIndices+0x4a>
 801cd70:	2a04      	cmp	r2, #4
 801cd72:	d076      	beq.n	801ce62 <GUI__CompactPixelIndices+0x11a>
 801cd74:	2a01      	cmp	r2, #1
 801cd76:	d034      	beq.n	801cde2 <GUI__CompactPixelIndices+0x9a>
 801cd78:	4401      	add	r1, r0
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	f850 2b04 	ldr.w	r2, [r0], #4
 801cd80:	f803 2b01 	strb.w	r2, [r3], #1
 801cd84:	428b      	cmp	r3, r1
 801cd86:	d1f9      	bne.n	801cd7c <GUI__CompactPixelIndices+0x34>
 801cd88:	e7ec      	b.n	801cd64 <GUI__CompactPixelIndices+0x1c>
 801cd8a:	2000      	movs	r0, #0
 801cd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd90:	4770      	bx	lr
 801cd92:	4602      	mov	r2, r0
 801cd94:	2901      	cmp	r1, #1
 801cd96:	6813      	ldr	r3, [r2, #0]
 801cd98:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801cd9c:	b2db      	uxtb	r3, r3
 801cd9e:	d01d      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801cda0:	6854      	ldr	r4, [r2, #4]
 801cda2:	2902      	cmp	r1, #2
 801cda4:	f004 0403 	and.w	r4, r4, #3
 801cda8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 801cdac:	d016      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801cdae:	6894      	ldr	r4, [r2, #8]
 801cdb0:	2903      	cmp	r1, #3
 801cdb2:	f004 0403 	and.w	r4, r4, #3
 801cdb6:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 801cdba:	d00f      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801cdbc:	68d4      	ldr	r4, [r2, #12]
 801cdbe:	f004 0403 	and.w	r4, r4, #3
 801cdc2:	4323      	orrs	r3, r4
 801cdc4:	3904      	subs	r1, #4
 801cdc6:	f800 3b01 	strb.w	r3, [r0], #1
 801cdca:	f102 0210 	add.w	r2, r2, #16
 801cdce:	d0c9      	beq.n	801cd64 <GUI__CompactPixelIndices+0x1c>
 801cdd0:	6813      	ldr	r3, [r2, #0]
 801cdd2:	2901      	cmp	r1, #1
 801cdd4:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	d1e1      	bne.n	801cda0 <GUI__CompactPixelIndices+0x58>
 801cddc:	7003      	strb	r3, [r0, #0]
 801cdde:	2001      	movs	r0, #1
 801cde0:	e7c1      	b.n	801cd66 <GUI__CompactPixelIndices+0x1e>
 801cde2:	4602      	mov	r2, r0
 801cde4:	2901      	cmp	r1, #1
 801cde6:	6813      	ldr	r3, [r2, #0]
 801cde8:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801cdec:	b2db      	uxtb	r3, r3
 801cdee:	d0f5      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801cdf0:	6854      	ldr	r4, [r2, #4]
 801cdf2:	2902      	cmp	r1, #2
 801cdf4:	f004 0401 	and.w	r4, r4, #1
 801cdf8:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 801cdfc:	d0ee      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801cdfe:	6894      	ldr	r4, [r2, #8]
 801ce00:	2903      	cmp	r1, #3
 801ce02:	f004 0401 	and.w	r4, r4, #1
 801ce06:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 801ce0a:	d0e7      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801ce0c:	68d4      	ldr	r4, [r2, #12]
 801ce0e:	2904      	cmp	r1, #4
 801ce10:	f004 0401 	and.w	r4, r4, #1
 801ce14:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 801ce18:	d0e0      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801ce1a:	6914      	ldr	r4, [r2, #16]
 801ce1c:	2905      	cmp	r1, #5
 801ce1e:	f004 0401 	and.w	r4, r4, #1
 801ce22:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 801ce26:	d0d9      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801ce28:	6954      	ldr	r4, [r2, #20]
 801ce2a:	2906      	cmp	r1, #6
 801ce2c:	f004 0401 	and.w	r4, r4, #1
 801ce30:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 801ce34:	d0d2      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801ce36:	6994      	ldr	r4, [r2, #24]
 801ce38:	3907      	subs	r1, #7
 801ce3a:	f004 0401 	and.w	r4, r4, #1
 801ce3e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 801ce42:	d0cb      	beq.n	801cddc <GUI__CompactPixelIndices+0x94>
 801ce44:	69d4      	ldr	r4, [r2, #28]
 801ce46:	f004 0401 	and.w	r4, r4, #1
 801ce4a:	4323      	orrs	r3, r4
 801ce4c:	f800 3b01 	strb.w	r3, [r0], #1
 801ce50:	3220      	adds	r2, #32
 801ce52:	6813      	ldr	r3, [r2, #0]
 801ce54:	2901      	cmp	r1, #1
 801ce56:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801ce5a:	b2db      	uxtb	r3, r3
 801ce5c:	d1c8      	bne.n	801cdf0 <GUI__CompactPixelIndices+0xa8>
 801ce5e:	7003      	strb	r3, [r0, #0]
 801ce60:	e7bd      	b.n	801cdde <GUI__CompactPixelIndices+0x96>
 801ce62:	f100 0308 	add.w	r3, r0, #8
 801ce66:	f853 2c08 	ldr.w	r2, [r3, #-8]
 801ce6a:	2901      	cmp	r1, #1
 801ce6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801ce70:	b2d2      	uxtb	r2, r2
 801ce72:	d012      	beq.n	801ce9a <GUI__CompactPixelIndices+0x152>
 801ce74:	f853 4c04 	ldr.w	r4, [r3, #-4]
 801ce78:	f004 040f 	and.w	r4, r4, #15
 801ce7c:	4322      	orrs	r2, r4
 801ce7e:	3902      	subs	r1, #2
 801ce80:	f800 2b01 	strb.w	r2, [r0], #1
 801ce84:	f103 0308 	add.w	r3, r3, #8
 801ce88:	f43f af6c 	beq.w	801cd64 <GUI__CompactPixelIndices+0x1c>
 801ce8c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 801ce90:	2901      	cmp	r1, #1
 801ce92:	ea4f 1202 	mov.w	r2, r2, lsl #4
 801ce96:	b2d2      	uxtb	r2, r2
 801ce98:	d1ec      	bne.n	801ce74 <GUI__CompactPixelIndices+0x12c>
 801ce9a:	7002      	strb	r2, [r0, #0]
 801ce9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cea0:	4608      	mov	r0, r1
 801cea2:	4770      	bx	lr

0801cea4 <GUI__CompactPixelIndicesEx>:
 801cea4:	2a08      	cmp	r2, #8
 801cea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ceaa:	460c      	mov	r4, r1
 801ceac:	681e      	ldr	r6, [r3, #0]
 801ceae:	4605      	mov	r5, r0
 801ceb0:	dd0c      	ble.n	801cecc <GUI__CompactPixelIndicesEx+0x28>
 801ceb2:	2a10      	cmp	r2, #16
 801ceb4:	dc20      	bgt.n	801cef8 <GUI__CompactPixelIndicesEx+0x54>
 801ceb6:	691f      	ldr	r7, [r3, #16]
 801ceb8:	2f00      	cmp	r7, #0
 801ceba:	f000 8091 	beq.w	801cfe0 <GUI__CompactPixelIndicesEx+0x13c>
 801cebe:	4629      	mov	r1, r5
 801cec0:	4622      	mov	r2, r4
 801cec2:	2302      	movs	r3, #2
 801cec4:	47b8      	blx	r7
 801cec6:	2001      	movs	r0, #1
 801cec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cecc:	3a01      	subs	r2, #1
 801cece:	2a07      	cmp	r2, #7
 801ced0:	d80f      	bhi.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>
 801ced2:	e8df f002 	tbb	[pc, r2]
 801ced6:	5004      	.short	0x5004
 801ced8:	0e0e750e 	.word	0x0e0e750e
 801cedc:	9a0e      	.short	0x9a0e
 801cede:	4680      	mov	r8, r0
 801cee0:	f8d8 0000 	ldr.w	r0, [r8]
 801cee4:	47b0      	blx	r6
 801cee6:	2c01      	cmp	r4, #1
 801cee8:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 801ceec:	b2c7      	uxtb	r7, r0
 801ceee:	d106      	bne.n	801cefe <GUI__CompactPixelIndicesEx+0x5a>
 801cef0:	702f      	strb	r7, [r5, #0]
 801cef2:	2001      	movs	r0, #1
 801cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cef8:	2000      	movs	r0, #0
 801cefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cefe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cf02:	47b0      	blx	r6
 801cf04:	2c02      	cmp	r4, #2
 801cf06:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 801cf0a:	b2c7      	uxtb	r7, r0
 801cf0c:	d0f0      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801cf12:	47b0      	blx	r6
 801cf14:	2c03      	cmp	r4, #3
 801cf16:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 801cf1a:	b2c7      	uxtb	r7, r0
 801cf1c:	d0e8      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf1e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801cf22:	47b0      	blx	r6
 801cf24:	2c04      	cmp	r4, #4
 801cf26:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801cf2a:	b2c7      	uxtb	r7, r0
 801cf2c:	d0e0      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf2e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801cf32:	47b0      	blx	r6
 801cf34:	2c05      	cmp	r4, #5
 801cf36:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 801cf3a:	b2c7      	uxtb	r7, r0
 801cf3c:	d0d8      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf3e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801cf42:	47b0      	blx	r6
 801cf44:	2c06      	cmp	r4, #6
 801cf46:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 801cf4a:	b2c7      	uxtb	r7, r0
 801cf4c:	d0d0      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf4e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801cf52:	47b0      	blx	r6
 801cf54:	2c07      	cmp	r4, #7
 801cf56:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 801cf5a:	b2c7      	uxtb	r7, r0
 801cf5c:	d0c8      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf5e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801cf62:	47b0      	blx	r6
 801cf64:	3c08      	subs	r4, #8
 801cf66:	ea47 0000 	orr.w	r0, r7, r0
 801cf6a:	f805 0b01 	strb.w	r0, [r5], #1
 801cf6e:	f108 0820 	add.w	r8, r8, #32
 801cf72:	d1b5      	bne.n	801cee0 <GUI__CompactPixelIndicesEx+0x3c>
 801cf74:	e7bd      	b.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>
 801cf76:	4680      	mov	r8, r0
 801cf78:	f8d8 0000 	ldr.w	r0, [r8]
 801cf7c:	47b0      	blx	r6
 801cf7e:	2c01      	cmp	r4, #1
 801cf80:	ea4f 1080 	mov.w	r0, r0, lsl #6
 801cf84:	b2c7      	uxtb	r7, r0
 801cf86:	d0b3      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cf8c:	47b0      	blx	r6
 801cf8e:	2c02      	cmp	r4, #2
 801cf90:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801cf94:	b2c7      	uxtb	r7, r0
 801cf96:	d0ab      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cf98:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801cf9c:	47b0      	blx	r6
 801cf9e:	2c03      	cmp	r4, #3
 801cfa0:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 801cfa4:	b2c7      	uxtb	r7, r0
 801cfa6:	d0a3      	beq.n	801cef0 <GUI__CompactPixelIndicesEx+0x4c>
 801cfa8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801cfac:	47b0      	blx	r6
 801cfae:	3c04      	subs	r4, #4
 801cfb0:	ea47 0000 	orr.w	r0, r7, r0
 801cfb4:	f805 0b01 	strb.w	r0, [r5], #1
 801cfb8:	f108 0810 	add.w	r8, r8, #16
 801cfbc:	d1dc      	bne.n	801cf78 <GUI__CompactPixelIndicesEx+0xd4>
 801cfbe:	e798      	b.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>
 801cfc0:	f100 0708 	add.w	r7, r0, #8
 801cfc4:	f857 0c08 	ldr.w	r0, [r7, #-8]
 801cfc8:	47b0      	blx	r6
 801cfca:	2c01      	cmp	r4, #1
 801cfcc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801cfd0:	fa5f f880 	uxtb.w	r8, r0
 801cfd4:	d10d      	bne.n	801cff2 <GUI__CompactPixelIndicesEx+0x14e>
 801cfd6:	f885 8000 	strb.w	r8, [r5]
 801cfda:	4620      	mov	r0, r4
 801cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfe0:	4607      	mov	r7, r0
 801cfe2:	f857 0b04 	ldr.w	r0, [r7], #4
 801cfe6:	47b0      	blx	r6
 801cfe8:	3c01      	subs	r4, #1
 801cfea:	f825 0b02 	strh.w	r0, [r5], #2
 801cfee:	d1f8      	bne.n	801cfe2 <GUI__CompactPixelIndicesEx+0x13e>
 801cff0:	e77f      	b.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>
 801cff2:	f857 0c04 	ldr.w	r0, [r7, #-4]
 801cff6:	47b0      	blx	r6
 801cff8:	3c02      	subs	r4, #2
 801cffa:	ea48 0000 	orr.w	r0, r8, r0
 801cffe:	f805 0b01 	strb.w	r0, [r5], #1
 801d002:	f107 0708 	add.w	r7, r7, #8
 801d006:	d1dd      	bne.n	801cfc4 <GUI__CompactPixelIndicesEx+0x120>
 801d008:	e773      	b.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>
 801d00a:	691f      	ldr	r7, [r3, #16]
 801d00c:	b13f      	cbz	r7, 801d01e <GUI__CompactPixelIndicesEx+0x17a>
 801d00e:	4628      	mov	r0, r5
 801d010:	4622      	mov	r2, r4
 801d012:	4629      	mov	r1, r5
 801d014:	2301      	movs	r3, #1
 801d016:	47b8      	blx	r7
 801d018:	2001      	movs	r0, #1
 801d01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d01e:	462f      	mov	r7, r5
 801d020:	f857 0b04 	ldr.w	r0, [r7], #4
 801d024:	47b0      	blx	r6
 801d026:	3c01      	subs	r4, #1
 801d028:	f805 0b01 	strb.w	r0, [r5], #1
 801d02c:	d1f8      	bne.n	801d020 <GUI__CompactPixelIndicesEx+0x17c>
 801d02e:	e760      	b.n	801cef2 <GUI__CompactPixelIndicesEx+0x4e>

0801d030 <_GetCharCode>:
 801d030:	7800      	ldrb	r0, [r0, #0]
 801d032:	4770      	bx	lr

0801d034 <_GetCharSize>:
 801d034:	2001      	movs	r0, #1
 801d036:	4770      	bx	lr

0801d038 <_CalcSizeOfChar>:
 801d038:	2001      	movs	r0, #1
 801d03a:	4770      	bx	lr

0801d03c <_Encode>:
 801d03c:	7001      	strb	r1, [r0, #0]
 801d03e:	2001      	movs	r0, #1
 801d040:	4770      	bx	lr
 801d042:	bf00      	nop

0801d044 <GUI_DrawGradientV>:
 801d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d048:	b091      	sub	sp, #68	; 0x44
 801d04a:	4606      	mov	r6, r0
 801d04c:	469a      	mov	sl, r3
 801d04e:	460f      	mov	r7, r1
 801d050:	4690      	mov	r8, r2
 801d052:	f7f9 fd0d 	bl	8016a70 <GUI_Lock>
 801d056:	4b68      	ldr	r3, [pc, #416]	; (801d1f8 <GUI_DrawGradientV+0x1b4>)
 801d058:	681c      	ldr	r4, [r3, #0]
 801d05a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801d05c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801d05e:	19ae      	adds	r6, r5, r6
 801d060:	44a8      	add	r8, r5
 801d062:	19e7      	adds	r7, r4, r7
 801d064:	44a2      	add	sl, r4
 801d066:	a80e      	add	r0, sp, #56	; 0x38
 801d068:	9607      	str	r6, [sp, #28]
 801d06a:	f8cd 8020 	str.w	r8, [sp, #32]
 801d06e:	9702      	str	r7, [sp, #8]
 801d070:	f8cd a004 	str.w	sl, [sp, #4]
 801d074:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 801d078:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
 801d07c:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 801d080:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
 801d084:	f7f4 ffd4 	bl	8012030 <WM__InitIVRSearch>
 801d088:	2800      	cmp	r0, #0
 801d08a:	f000 8098 	beq.w	801d1be <GUI_DrawGradientV+0x17a>
 801d08e:	9e01      	ldr	r6, [sp, #4]
 801d090:	9c02      	ldr	r4, [sp, #8]
 801d092:	1b35      	subs	r5, r6, r4
 801d094:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d096:	b2f4      	uxtb	r4, r6
 801d098:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d09a:	fa5f fe86 	uxtb.w	lr, r6
 801d09e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d0a0:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801d0a4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d0a6:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801d0aa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d0ac:	f3c6 4107 	ubfx	r1, r6, #16, #8
 801d0b0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d0b2:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801d0b6:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d0ba:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d0bc:	105b      	asrs	r3, r3, #1
 801d0be:	0e32      	lsrs	r2, r6, #24
 801d0c0:	ebc4 0e0e 	rsb	lr, r4, lr
 801d0c4:	fb05 3604 	mla	r6, r5, r4, r3
 801d0c8:	fb05 3400 	mla	r4, r5, r0, r3
 801d0cc:	940b      	str	r4, [sp, #44]	; 0x2c
 801d0ce:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801d0d0:	960a      	str	r6, [sp, #40]	; 0x28
 801d0d2:	1a3f      	subs	r7, r7, r0
 801d0d4:	fb05 3601 	mla	r6, r5, r1, r3
 801d0d8:	ebc1 0c0c 	rsb	ip, r1, ip
 801d0dc:	fb05 3302 	mla	r3, r5, r2, r3
 801d0e0:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 801d0e4:	f8cd e018 	str.w	lr, [sp, #24]
 801d0e8:	9703      	str	r7, [sp, #12]
 801d0ea:	960c      	str	r6, [sp, #48]	; 0x30
 801d0ec:	f8cd c010 	str.w	ip, [sp, #16]
 801d0f0:	930d      	str	r3, [sp, #52]	; 0x34
 801d0f2:	9205      	str	r2, [sp, #20]
 801d0f4:	f7fa fe50 	bl	8017d98 <GUI_GetColor>
 801d0f8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d0fa:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801d0fc:	9009      	str	r0, [sp, #36]	; 0x24
 801d0fe:	42a6      	cmp	r6, r4
 801d100:	d070      	beq.n	801d1e4 <GUI_DrawGradientV+0x1a0>
 801d102:	2d00      	cmp	r5, #0
 801d104:	d057      	beq.n	801d1b6 <GUI_DrawGradientV+0x172>
 801d106:	9e02      	ldr	r6, [sp, #8]
 801d108:	9c01      	ldr	r4, [sp, #4]
 801d10a:	42a6      	cmp	r6, r4
 801d10c:	dc62      	bgt.n	801d1d4 <GUI_DrawGradientV+0x190>
 801d10e:	4634      	mov	r4, r6
 801d110:	f04f 0b01 	mov.w	fp, #1
 801d114:	ae0a      	add	r6, sp, #40	; 0x28
 801d116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d118:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 801d11c:	46da      	mov	sl, fp
 801d11e:	e006      	b.n	801d12e <GUI_DrawGradientV+0xea>
 801d120:	f10a 0a01 	add.w	sl, sl, #1
 801d124:	9801      	ldr	r0, [sp, #4]
 801d126:	3401      	adds	r4, #1
 801d128:	42a0      	cmp	r0, r4
 801d12a:	db2f      	blt.n	801d18c <GUI_DrawGradientV+0x148>
 801d12c:	465a      	mov	r2, fp
 801d12e:	9b04      	ldr	r3, [sp, #16]
 801d130:	fb98 f1f5 	sdiv	r1, r8, r5
 801d134:	4498      	add	r8, r3
 801d136:	9b05      	ldr	r3, [sp, #20]
 801d138:	fb99 fcf5 	sdiv	ip, r9, r5
 801d13c:	4499      	add	r9, r3
 801d13e:	9b06      	ldr	r3, [sp, #24]
 801d140:	fb96 f0f5 	sdiv	r0, r6, r5
 801d144:	441e      	add	r6, r3
 801d146:	9b03      	ldr	r3, [sp, #12]
 801d148:	fb97 fef5 	sdiv	lr, r7, r5
 801d14c:	441f      	add	r7, r3
 801d14e:	9b02      	ldr	r3, [sp, #8]
 801d150:	0409      	lsls	r1, r1, #16
 801d152:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 801d156:	42a3      	cmp	r3, r4
 801d158:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 801d15c:	ea41 0b0c 	orr.w	fp, r1, ip
 801d160:	4610      	mov	r0, r2
 801d162:	dadf      	bge.n	801d124 <GUI_DrawGradientV+0xe0>
 801d164:	4593      	cmp	fp, r2
 801d166:	d0db      	beq.n	801d120 <GUI_DrawGradientV+0xdc>
 801d168:	f7f8 fbfa 	bl	8015960 <LCD_SetColor>
 801d16c:	f1ba 0f01 	cmp.w	sl, #1
 801d170:	d02a      	beq.n	801d1c8 <GUI_DrawGradientV+0x184>
 801d172:	ebca 0104 	rsb	r1, sl, r4
 801d176:	9807      	ldr	r0, [sp, #28]
 801d178:	9a08      	ldr	r2, [sp, #32]
 801d17a:	1e63      	subs	r3, r4, #1
 801d17c:	f7f8 f840 	bl	8015200 <LCD_FillRect>
 801d180:	9801      	ldr	r0, [sp, #4]
 801d182:	3401      	adds	r4, #1
 801d184:	42a0      	cmp	r0, r4
 801d186:	f04f 0a01 	mov.w	sl, #1
 801d18a:	dacf      	bge.n	801d12c <GUI_DrawGradientV+0xe8>
 801d18c:	4653      	mov	r3, sl
 801d18e:	46da      	mov	sl, fp
 801d190:	4650      	mov	r0, sl
 801d192:	469b      	mov	fp, r3
 801d194:	f7f8 fbe4 	bl	8015960 <LCD_SetColor>
 801d198:	f1bb 0f01 	cmp.w	fp, #1
 801d19c:	d01c      	beq.n	801d1d8 <GUI_DrawGradientV+0x194>
 801d19e:	9c01      	ldr	r4, [sp, #4]
 801d1a0:	9807      	ldr	r0, [sp, #28]
 801d1a2:	9a08      	ldr	r2, [sp, #32]
 801d1a4:	ebcb 0104 	rsb	r1, fp, r4
 801d1a8:	3101      	adds	r1, #1
 801d1aa:	4623      	mov	r3, r4
 801d1ac:	f7f8 f828 	bl	8015200 <LCD_FillRect>
 801d1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d1b2:	f7f8 fbd5 	bl	8015960 <LCD_SetColor>
 801d1b6:	f7f4 fe15 	bl	8011de4 <WM__GetNextIVR>
 801d1ba:	2800      	cmp	r0, #0
 801d1bc:	d19a      	bne.n	801d0f4 <GUI_DrawGradientV+0xb0>
 801d1be:	f7f9 fc4d 	bl	8016a5c <GUI_Unlock>
 801d1c2:	b011      	add	sp, #68	; 0x44
 801d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c8:	9807      	ldr	r0, [sp, #28]
 801d1ca:	9a08      	ldr	r2, [sp, #32]
 801d1cc:	1e61      	subs	r1, r4, #1
 801d1ce:	f7f7 ffc9 	bl	8015164 <LCD_DrawHLine>
 801d1d2:	e7a7      	b.n	801d124 <GUI_DrawGradientV+0xe0>
 801d1d4:	f7f8 fbc4 	bl	8015960 <LCD_SetColor>
 801d1d8:	9807      	ldr	r0, [sp, #28]
 801d1da:	9901      	ldr	r1, [sp, #4]
 801d1dc:	9a08      	ldr	r2, [sp, #32]
 801d1de:	f7f7 ffc1 	bl	8015164 <LCD_DrawHLine>
 801d1e2:	e7e5      	b.n	801d1b0 <GUI_DrawGradientV+0x16c>
 801d1e4:	4630      	mov	r0, r6
 801d1e6:	f7f8 fbbb 	bl	8015960 <LCD_SetColor>
 801d1ea:	9807      	ldr	r0, [sp, #28]
 801d1ec:	9902      	ldr	r1, [sp, #8]
 801d1ee:	9a08      	ldr	r2, [sp, #32]
 801d1f0:	9b01      	ldr	r3, [sp, #4]
 801d1f2:	f7f8 f805 	bl	8015200 <LCD_FillRect>
 801d1f6:	e7db      	b.n	801d1b0 <GUI_DrawGradientV+0x16c>
 801d1f8:	2000026c 	.word	0x2000026c

0801d1fc <GUI_DrawGradientH>:
 801d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d200:	b091      	sub	sp, #68	; 0x44
 801d202:	4606      	mov	r6, r0
 801d204:	4698      	mov	r8, r3
 801d206:	460f      	mov	r7, r1
 801d208:	4692      	mov	sl, r2
 801d20a:	f7f9 fc31 	bl	8016a70 <GUI_Lock>
 801d20e:	4b68      	ldr	r3, [pc, #416]	; (801d3b0 <GUI_DrawGradientH+0x1b4>)
 801d210:	681c      	ldr	r4, [r3, #0]
 801d212:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801d214:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801d216:	19ae      	adds	r6, r5, r6
 801d218:	44aa      	add	sl, r5
 801d21a:	19e7      	adds	r7, r4, r7
 801d21c:	44a0      	add	r8, r4
 801d21e:	a80e      	add	r0, sp, #56	; 0x38
 801d220:	9602      	str	r6, [sp, #8]
 801d222:	f8cd a004 	str.w	sl, [sp, #4]
 801d226:	9707      	str	r7, [sp, #28]
 801d228:	f8cd 8020 	str.w	r8, [sp, #32]
 801d22c:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 801d230:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 801d234:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 801d238:	f8ad 803e 	strh.w	r8, [sp, #62]	; 0x3e
 801d23c:	f7f4 fef8 	bl	8012030 <WM__InitIVRSearch>
 801d240:	2800      	cmp	r0, #0
 801d242:	f000 8098 	beq.w	801d376 <GUI_DrawGradientH+0x17a>
 801d246:	9e01      	ldr	r6, [sp, #4]
 801d248:	9c02      	ldr	r4, [sp, #8]
 801d24a:	1b35      	subs	r5, r6, r4
 801d24c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d24e:	b2f4      	uxtb	r4, r6
 801d250:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d252:	fa5f fe86 	uxtb.w	lr, r6
 801d256:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d258:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801d25c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d25e:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801d262:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d264:	f3c6 4107 	ubfx	r1, r6, #16, #8
 801d268:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801d26a:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801d26e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d272:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d274:	105b      	asrs	r3, r3, #1
 801d276:	0e32      	lsrs	r2, r6, #24
 801d278:	ebc4 0e0e 	rsb	lr, r4, lr
 801d27c:	fb05 3604 	mla	r6, r5, r4, r3
 801d280:	fb05 3400 	mla	r4, r5, r0, r3
 801d284:	940b      	str	r4, [sp, #44]	; 0x2c
 801d286:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801d288:	960a      	str	r6, [sp, #40]	; 0x28
 801d28a:	1a3f      	subs	r7, r7, r0
 801d28c:	fb05 3601 	mla	r6, r5, r1, r3
 801d290:	ebc1 0c0c 	rsb	ip, r1, ip
 801d294:	fb05 3302 	mla	r3, r5, r2, r3
 801d298:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 801d29c:	f8cd e018 	str.w	lr, [sp, #24]
 801d2a0:	9703      	str	r7, [sp, #12]
 801d2a2:	960c      	str	r6, [sp, #48]	; 0x30
 801d2a4:	f8cd c010 	str.w	ip, [sp, #16]
 801d2a8:	930d      	str	r3, [sp, #52]	; 0x34
 801d2aa:	9205      	str	r2, [sp, #20]
 801d2ac:	f7fa fd74 	bl	8017d98 <GUI_GetColor>
 801d2b0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d2b2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801d2b4:	9009      	str	r0, [sp, #36]	; 0x24
 801d2b6:	42a6      	cmp	r6, r4
 801d2b8:	d070      	beq.n	801d39c <GUI_DrawGradientH+0x1a0>
 801d2ba:	2d00      	cmp	r5, #0
 801d2bc:	d057      	beq.n	801d36e <GUI_DrawGradientH+0x172>
 801d2be:	9e02      	ldr	r6, [sp, #8]
 801d2c0:	9c01      	ldr	r4, [sp, #4]
 801d2c2:	42a6      	cmp	r6, r4
 801d2c4:	dc62      	bgt.n	801d38c <GUI_DrawGradientH+0x190>
 801d2c6:	4634      	mov	r4, r6
 801d2c8:	f04f 0b01 	mov.w	fp, #1
 801d2cc:	ae0a      	add	r6, sp, #40	; 0x28
 801d2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2d0:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 801d2d4:	46da      	mov	sl, fp
 801d2d6:	e006      	b.n	801d2e6 <GUI_DrawGradientH+0xea>
 801d2d8:	f10a 0a01 	add.w	sl, sl, #1
 801d2dc:	9801      	ldr	r0, [sp, #4]
 801d2de:	3401      	adds	r4, #1
 801d2e0:	42a0      	cmp	r0, r4
 801d2e2:	db2f      	blt.n	801d344 <GUI_DrawGradientH+0x148>
 801d2e4:	465a      	mov	r2, fp
 801d2e6:	9b04      	ldr	r3, [sp, #16]
 801d2e8:	fb98 f1f5 	sdiv	r1, r8, r5
 801d2ec:	4498      	add	r8, r3
 801d2ee:	9b05      	ldr	r3, [sp, #20]
 801d2f0:	fb99 fcf5 	sdiv	ip, r9, r5
 801d2f4:	4499      	add	r9, r3
 801d2f6:	9b06      	ldr	r3, [sp, #24]
 801d2f8:	fb96 f0f5 	sdiv	r0, r6, r5
 801d2fc:	441e      	add	r6, r3
 801d2fe:	9b03      	ldr	r3, [sp, #12]
 801d300:	fb97 fef5 	sdiv	lr, r7, r5
 801d304:	441f      	add	r7, r3
 801d306:	9b02      	ldr	r3, [sp, #8]
 801d308:	0409      	lsls	r1, r1, #16
 801d30a:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 801d30e:	42a3      	cmp	r3, r4
 801d310:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 801d314:	ea41 0b0c 	orr.w	fp, r1, ip
 801d318:	4610      	mov	r0, r2
 801d31a:	dadf      	bge.n	801d2dc <GUI_DrawGradientH+0xe0>
 801d31c:	4593      	cmp	fp, r2
 801d31e:	d0db      	beq.n	801d2d8 <GUI_DrawGradientH+0xdc>
 801d320:	f7f8 fb1e 	bl	8015960 <LCD_SetColor>
 801d324:	f1ba 0f01 	cmp.w	sl, #1
 801d328:	d02a      	beq.n	801d380 <GUI_DrawGradientH+0x184>
 801d32a:	ebca 0004 	rsb	r0, sl, r4
 801d32e:	1e62      	subs	r2, r4, #1
 801d330:	9907      	ldr	r1, [sp, #28]
 801d332:	9b08      	ldr	r3, [sp, #32]
 801d334:	f7f7 ff64 	bl	8015200 <LCD_FillRect>
 801d338:	9801      	ldr	r0, [sp, #4]
 801d33a:	3401      	adds	r4, #1
 801d33c:	42a0      	cmp	r0, r4
 801d33e:	f04f 0a01 	mov.w	sl, #1
 801d342:	dacf      	bge.n	801d2e4 <GUI_DrawGradientH+0xe8>
 801d344:	4653      	mov	r3, sl
 801d346:	46da      	mov	sl, fp
 801d348:	4650      	mov	r0, sl
 801d34a:	469b      	mov	fp, r3
 801d34c:	f7f8 fb08 	bl	8015960 <LCD_SetColor>
 801d350:	f1bb 0f01 	cmp.w	fp, #1
 801d354:	d01c      	beq.n	801d390 <GUI_DrawGradientH+0x194>
 801d356:	9c01      	ldr	r4, [sp, #4]
 801d358:	9907      	ldr	r1, [sp, #28]
 801d35a:	9b08      	ldr	r3, [sp, #32]
 801d35c:	ebcb 0004 	rsb	r0, fp, r4
 801d360:	3001      	adds	r0, #1
 801d362:	4622      	mov	r2, r4
 801d364:	f7f7 ff4c 	bl	8015200 <LCD_FillRect>
 801d368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d36a:	f7f8 faf9 	bl	8015960 <LCD_SetColor>
 801d36e:	f7f4 fd39 	bl	8011de4 <WM__GetNextIVR>
 801d372:	2800      	cmp	r0, #0
 801d374:	d19a      	bne.n	801d2ac <GUI_DrawGradientH+0xb0>
 801d376:	f7f9 fb71 	bl	8016a5c <GUI_Unlock>
 801d37a:	b011      	add	sp, #68	; 0x44
 801d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d380:	1e60      	subs	r0, r4, #1
 801d382:	9907      	ldr	r1, [sp, #28]
 801d384:	9a08      	ldr	r2, [sp, #32]
 801d386:	f7f7 ff13 	bl	80151b0 <LCD_DrawVLine>
 801d38a:	e7a7      	b.n	801d2dc <GUI_DrawGradientH+0xe0>
 801d38c:	f7f8 fae8 	bl	8015960 <LCD_SetColor>
 801d390:	9801      	ldr	r0, [sp, #4]
 801d392:	9907      	ldr	r1, [sp, #28]
 801d394:	9a08      	ldr	r2, [sp, #32]
 801d396:	f7f7 ff0b 	bl	80151b0 <LCD_DrawVLine>
 801d39a:	e7e5      	b.n	801d368 <GUI_DrawGradientH+0x16c>
 801d39c:	4630      	mov	r0, r6
 801d39e:	f7f8 fadf 	bl	8015960 <LCD_SetColor>
 801d3a2:	9802      	ldr	r0, [sp, #8]
 801d3a4:	9907      	ldr	r1, [sp, #28]
 801d3a6:	9a01      	ldr	r2, [sp, #4]
 801d3a8:	9b08      	ldr	r3, [sp, #32]
 801d3aa:	f7f7 ff29 	bl	8015200 <LCD_FillRect>
 801d3ae:	e7db      	b.n	801d368 <GUI_DrawGradientH+0x16c>
 801d3b0:	2000026c 	.word	0x2000026c

0801d3b4 <GUIMONO_DispChar>:
 801d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801d508 <GUIMONO_DispChar+0x154>
 801d3bc:	f8db 2000 	ldr.w	r2, [fp]
 801d3c0:	69d1      	ldr	r1, [r2, #28]
 801d3c2:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 801d3c6:	69cc      	ldr	r4, [r1, #28]
 801d3c8:	8c97      	ldrh	r7, [r2, #36]	; 0x24
 801d3ca:	89a3      	ldrh	r3, [r4, #12]
 801d3cc:	4283      	cmp	r3, r0
 801d3ce:	b08d      	sub	sp, #52	; 0x34
 801d3d0:	f200 8083 	bhi.w	801d4da <GUIMONO_DispChar+0x126>
 801d3d4:	89e5      	ldrh	r5, [r4, #14]
 801d3d6:	4285      	cmp	r5, r0
 801d3d8:	d37f      	bcc.n	801d4da <GUIMONO_DispChar+0x126>
 801d3da:	1ac3      	subs	r3, r0, r3
 801d3dc:	6826      	ldr	r6, [r4, #0]
 801d3de:	f04f 30ff 	mov.w	r0, #4294967295
 801d3e2:	900a      	str	r0, [sp, #40]	; 0x28
 801d3e4:	1c58      	adds	r0, r3, #1
 801d3e6:	d071      	beq.n	801d4cc <GUIMONO_DispChar+0x118>
 801d3e8:	f8b2 a02a 	ldrh.w	sl, [r2, #42]	; 0x2a
 801d3ec:	7e0d      	ldrb	r5, [r1, #24]
 801d3ee:	7ca2      	ldrb	r2, [r4, #18]
 801d3f0:	f894 8010 	ldrb.w	r8, [r4, #16]
 801d3f4:	9307      	str	r3, [sp, #28]
 801d3f6:	fa0f f18a 	sxth.w	r1, sl
 801d3fa:	fb15 f202 	smulbb	r2, r5, r2
 801d3fe:	4608      	mov	r0, r1
 801d400:	9109      	str	r1, [sp, #36]	; 0x24
 801d402:	9208      	str	r2, [sp, #32]
 801d404:	f7f7 fe74 	bl	80150f0 <LCD_SetDrawMode>
 801d408:	f8db 2000 	ldr.w	r2, [fp]
 801d40c:	900b      	str	r0, [sp, #44]	; 0x2c
 801d40e:	69d1      	ldr	r1, [r2, #28]
 801d410:	9b07      	ldr	r3, [sp, #28]
 801d412:	7e88      	ldrb	r0, [r1, #26]
 801d414:	9000      	str	r0, [sp, #0]
 801d416:	7ec9      	ldrb	r1, [r1, #27]
 801d418:	9101      	str	r1, [sp, #4]
 801d41a:	2001      	movs	r0, #1
 801d41c:	9908      	ldr	r1, [sp, #32]
 801d41e:	9002      	str	r0, [sp, #8]
 801d420:	fb01 6303 	mla	r3, r1, r3, r6
 801d424:	7ca1      	ldrb	r1, [r4, #18]
 801d426:	9103      	str	r1, [sp, #12]
 801d428:	9304      	str	r3, [sp, #16]
 801d42a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801d42c:	9305      	str	r3, [sp, #20]
 801d42e:	fa0f f989 	sxth.w	r9, r9
 801d432:	b23f      	sxth	r7, r7
 801d434:	4642      	mov	r2, r8
 801d436:	4648      	mov	r0, r9
 801d438:	4639      	mov	r1, r7
 801d43a:	462b      	mov	r3, r5
 801d43c:	f7f8 f82e 	bl	801549c <LCD_DrawBitmap>
 801d440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d442:	3201      	adds	r2, #1
 801d444:	d01c      	beq.n	801d480 <GUIMONO_DispChar+0xcc>
 801d446:	f04a 0002 	orr.w	r0, sl, #2
 801d44a:	b200      	sxth	r0, r0
 801d44c:	f7f7 fe50 	bl	80150f0 <LCD_SetDrawMode>
 801d450:	482d      	ldr	r0, [pc, #180]	; (801d508 <GUIMONO_DispChar+0x154>)
 801d452:	6803      	ldr	r3, [r0, #0]
 801d454:	9808      	ldr	r0, [sp, #32]
 801d456:	69da      	ldr	r2, [r3, #28]
 801d458:	7e91      	ldrb	r1, [r2, #26]
 801d45a:	9100      	str	r1, [sp, #0]
 801d45c:	7ed2      	ldrb	r2, [r2, #27]
 801d45e:	9201      	str	r2, [sp, #4]
 801d460:	2101      	movs	r1, #1
 801d462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d464:	9102      	str	r1, [sp, #8]
 801d466:	fb00 6602 	mla	r6, r0, r2, r6
 801d46a:	7ca2      	ldrb	r2, [r4, #18]
 801d46c:	9203      	str	r2, [sp, #12]
 801d46e:	9604      	str	r6, [sp, #16]
 801d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d472:	9305      	str	r3, [sp, #20]
 801d474:	4648      	mov	r0, r9
 801d476:	462b      	mov	r3, r5
 801d478:	4639      	mov	r1, r7
 801d47a:	4642      	mov	r2, r8
 801d47c:	f7f8 f80e 	bl	801549c <LCD_DrawBitmap>
 801d480:	f8db 3000 	ldr.w	r3, [fp]
 801d484:	4d20      	ldr	r5, [pc, #128]	; (801d508 <GUIMONO_DispChar+0x154>)
 801d486:	69db      	ldr	r3, [r3, #28]
 801d488:	7e5a      	ldrb	r2, [r3, #25]
 801d48a:	7e1b      	ldrb	r3, [r3, #24]
 801d48c:	429a      	cmp	r2, r3
 801d48e:	d915      	bls.n	801d4bc <GUIMONO_DispChar+0x108>
 801d490:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d492:	2902      	cmp	r1, #2
 801d494:	d012      	beq.n	801d4bc <GUIMONO_DispChar+0x108>
 801d496:	f08a 0004 	eor.w	r0, sl, #4
 801d49a:	b200      	sxth	r0, r0
 801d49c:	f7f7 fe28 	bl	80150f0 <LCD_SetDrawMode>
 801d4a0:	682b      	ldr	r3, [r5, #0]
 801d4a2:	69db      	ldr	r3, [r3, #28]
 801d4a4:	7e9a      	ldrb	r2, [r3, #26]
 801d4a6:	7e1d      	ldrb	r5, [r3, #24]
 801d4a8:	7ed9      	ldrb	r1, [r3, #27]
 801d4aa:	7e5b      	ldrb	r3, [r3, #25]
 801d4ac:	4648      	mov	r0, r9
 801d4ae:	fb02 9208 	mla	r2, r2, r8, r9
 801d4b2:	fb05 7101 	mla	r1, r5, r1, r7
 801d4b6:	443b      	add	r3, r7
 801d4b8:	f7f7 fea2 	bl	8015200 <LCD_FillRect>
 801d4bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4be:	b2d0      	uxtb	r0, r2
 801d4c0:	f7f7 fe16 	bl	80150f0 <LCD_SetDrawMode>
 801d4c4:	f8db 2000 	ldr.w	r2, [fp]
 801d4c8:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 801d4cc:	7c63      	ldrb	r3, [r4, #17]
 801d4ce:	4499      	add	r9, r3
 801d4d0:	f8a2 9022 	strh.w	r9, [r2, #34]	; 0x22
 801d4d4:	b00d      	add	sp, #52	; 0x34
 801d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4da:	68a5      	ldr	r5, [r4, #8]
 801d4dc:	6866      	ldr	r6, [r4, #4]
 801d4de:	2d00      	cmp	r5, #0
 801d4e0:	d0f4      	beq.n	801d4cc <GUIMONO_DispChar+0x118>
 801d4e2:	882b      	ldrh	r3, [r5, #0]
 801d4e4:	4298      	cmp	r0, r3
 801d4e6:	d3f1      	bcc.n	801d4cc <GUIMONO_DispChar+0x118>
 801d4e8:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 801d4ec:	4580      	cmp	r8, r0
 801d4ee:	d3ed      	bcc.n	801d4cc <GUIMONO_DispChar+0x118>
 801d4f0:	1ac3      	subs	r3, r0, r3
 801d4f2:	686d      	ldr	r5, [r5, #4]
 801d4f4:	b29b      	uxth	r3, r3
 801d4f6:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 801d4fa:	f935 3023 	ldrsh.w	r3, [r5, r3, lsl #2]
 801d4fe:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801d502:	900a      	str	r0, [sp, #40]	; 0x28
 801d504:	e76e      	b.n	801d3e4 <GUIMONO_DispChar+0x30>
 801d506:	bf00      	nop
 801d508:	2000026c 	.word	0x2000026c

0801d50c <GUIMONO_GetCharDistX>:
 801d50c:	4b04      	ldr	r3, [pc, #16]	; (801d520 <GUIMONO_GetCharDistX+0x14>)
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	69db      	ldr	r3, [r3, #28]
 801d512:	69db      	ldr	r3, [r3, #28]
 801d514:	b109      	cbz	r1, 801d51a <GUIMONO_GetCharDistX+0xe>
 801d516:	7c1a      	ldrb	r2, [r3, #16]
 801d518:	600a      	str	r2, [r1, #0]
 801d51a:	7c58      	ldrb	r0, [r3, #17]
 801d51c:	4770      	bx	lr
 801d51e:	bf00      	nop
 801d520:	2000026c 	.word	0x2000026c

0801d524 <GUIMONO_GetFontInfo>:
 801d524:	2302      	movs	r3, #2
 801d526:	800b      	strh	r3, [r1, #0]
 801d528:	4770      	bx	lr
 801d52a:	bf00      	nop

0801d52c <GUIMONO_IsInFont>:
 801d52c:	69c3      	ldr	r3, [r0, #28]
 801d52e:	899a      	ldrh	r2, [r3, #12]
 801d530:	428a      	cmp	r2, r1
 801d532:	d802      	bhi.n	801d53a <GUIMONO_IsInFont+0xe>
 801d534:	89da      	ldrh	r2, [r3, #14]
 801d536:	428a      	cmp	r2, r1
 801d538:	d211      	bcs.n	801d55e <GUIMONO_IsInFont+0x32>
 801d53a:	6898      	ldr	r0, [r3, #8]
 801d53c:	b118      	cbz	r0, 801d546 <GUIMONO_IsInFont+0x1a>
 801d53e:	8803      	ldrh	r3, [r0, #0]
 801d540:	4299      	cmp	r1, r3
 801d542:	d201      	bcs.n	801d548 <GUIMONO_IsInFont+0x1c>
 801d544:	2000      	movs	r0, #0
 801d546:	4770      	bx	lr
 801d548:	8842      	ldrh	r2, [r0, #2]
 801d54a:	428a      	cmp	r2, r1
 801d54c:	d3fa      	bcc.n	801d544 <GUIMONO_IsInFont+0x18>
 801d54e:	1ac9      	subs	r1, r1, r3
 801d550:	6842      	ldr	r2, [r0, #4]
 801d552:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 801d556:	43c0      	mvns	r0, r0
 801d558:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801d55c:	4770      	bx	lr
 801d55e:	2001      	movs	r0, #1
 801d560:	4770      	bx	lr
 801d562:	bf00      	nop

0801d564 <LCD_Index2Color_888>:
 801d564:	b2c2      	uxtb	r2, r0
 801d566:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801d56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d56e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801d572:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d576:	4318      	orrs	r0, r3
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop

0801d57c <LCD_Index2Color_8888>:
 801d57c:	43c3      	mvns	r3, r0
 801d57e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801d582:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d586:	4313      	orrs	r3, r2
 801d588:	b2c2      	uxtb	r2, r0
 801d58a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d58e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d592:	4318      	orrs	r0, r3
 801d594:	4770      	bx	lr
 801d596:	bf00      	nop

0801d598 <_GetIndexMask_0>:
 801d598:	b508      	push	{r3, lr}
 801d59a:	f7f7 fc7b 	bl	8014e94 <LCD_GetNumColors>
 801d59e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801d5a2:	d014      	beq.n	801d5ce <_GetIndexMask_0+0x36>
 801d5a4:	287f      	cmp	r0, #127	; 0x7f
 801d5a6:	d80e      	bhi.n	801d5c6 <_GetIndexMask_0+0x2e>
 801d5a8:	283f      	cmp	r0, #63	; 0x3f
 801d5aa:	d812      	bhi.n	801d5d2 <_GetIndexMask_0+0x3a>
 801d5ac:	281f      	cmp	r0, #31
 801d5ae:	d80c      	bhi.n	801d5ca <_GetIndexMask_0+0x32>
 801d5b0:	280f      	cmp	r0, #15
 801d5b2:	d810      	bhi.n	801d5d6 <_GetIndexMask_0+0x3e>
 801d5b4:	2807      	cmp	r0, #7
 801d5b6:	d812      	bhi.n	801d5de <_GetIndexMask_0+0x46>
 801d5b8:	2803      	cmp	r0, #3
 801d5ba:	d80e      	bhi.n	801d5da <_GetIndexMask_0+0x42>
 801d5bc:	2801      	cmp	r0, #1
 801d5be:	bf94      	ite	ls
 801d5c0:	2000      	movls	r0, #0
 801d5c2:	2001      	movhi	r0, #1
 801d5c4:	bd08      	pop	{r3, pc}
 801d5c6:	207f      	movs	r0, #127	; 0x7f
 801d5c8:	bd08      	pop	{r3, pc}
 801d5ca:	201f      	movs	r0, #31
 801d5cc:	bd08      	pop	{r3, pc}
 801d5ce:	20ff      	movs	r0, #255	; 0xff
 801d5d0:	bd08      	pop	{r3, pc}
 801d5d2:	203f      	movs	r0, #63	; 0x3f
 801d5d4:	bd08      	pop	{r3, pc}
 801d5d6:	200f      	movs	r0, #15
 801d5d8:	bd08      	pop	{r3, pc}
 801d5da:	2003      	movs	r0, #3
 801d5dc:	bd08      	pop	{r3, pc}
 801d5de:	2007      	movs	r0, #7
 801d5e0:	bd08      	pop	{r3, pc}
 801d5e2:	bf00      	nop

0801d5e4 <_Index2Color_0>:
 801d5e4:	b538      	push	{r3, r4, r5, lr}
 801d5e6:	4604      	mov	r4, r0
 801d5e8:	f7f7 fc54 	bl	8014e94 <LCD_GetNumColors>
 801d5ec:	4605      	mov	r5, r0
 801d5ee:	f7f7 fc71 	bl	8014ed4 <LCD_GetPalette>
 801d5f2:	42a5      	cmp	r5, r4
 801d5f4:	d903      	bls.n	801d5fe <_Index2Color_0+0x1a>
 801d5f6:	b118      	cbz	r0, 801d600 <_Index2Color_0+0x1c>
 801d5f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801d5fc:	bd38      	pop	{r3, r4, r5, pc}
 801d5fe:	2000      	movs	r0, #0
 801d600:	bd38      	pop	{r3, r4, r5, pc}
 801d602:	bf00      	nop

0801d604 <_Color2Index_0>:
 801d604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d608:	4605      	mov	r5, r0
 801d60a:	f7f7 fc43 	bl	8014e94 <LCD_GetNumColors>
 801d60e:	4606      	mov	r6, r0
 801d610:	f7f7 fc60 	bl	8014ed4 <LCD_GetPalette>
 801d614:	b308      	cbz	r0, 801d65a <_Color2Index_0+0x56>
 801d616:	1f07      	subs	r7, r0, #4
 801d618:	463a      	mov	r2, r7
 801d61a:	2300      	movs	r3, #0
 801d61c:	e002      	b.n	801d624 <_Color2Index_0+0x20>
 801d61e:	3301      	adds	r3, #1
 801d620:	429e      	cmp	r6, r3
 801d622:	dd06      	ble.n	801d632 <_Color2Index_0+0x2e>
 801d624:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801d628:	42a9      	cmp	r1, r5
 801d62a:	d1f8      	bne.n	801d61e <_Color2Index_0+0x1a>
 801d62c:	4618      	mov	r0, r3
 801d62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d632:	f04f 0900 	mov.w	r9, #0
 801d636:	464c      	mov	r4, r9
 801d638:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801d63c:	4628      	mov	r0, r5
 801d63e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801d642:	f7fa fb6f 	bl	8017d24 <GUI_CalcColorDist>
 801d646:	4580      	cmp	r8, r0
 801d648:	bf88      	it	hi
 801d64a:	46a1      	movhi	r9, r4
 801d64c:	f104 0401 	add.w	r4, r4, #1
 801d650:	bf88      	it	hi
 801d652:	4680      	movhi	r8, r0
 801d654:	42a6      	cmp	r6, r4
 801d656:	dcf1      	bgt.n	801d63c <_Color2Index_0+0x38>
 801d658:	4648      	mov	r0, r9
 801d65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d65e:	bf00      	nop

0801d660 <_DrawUpRect>:
 801d660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d664:	4f1b      	ldr	r7, [pc, #108]	; (801d6d4 <_DrawUpRect+0x74>)
 801d666:	8806      	ldrh	r6, [r0, #0]
 801d668:	8844      	ldrh	r4, [r0, #2]
 801d66a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801d66e:	88c5      	ldrh	r5, [r0, #6]
 801d670:	6838      	ldr	r0, [r7, #0]
 801d672:	b22d      	sxth	r5, r5
 801d674:	fa0f f888 	sxth.w	r8, r8
 801d678:	b236      	sxth	r6, r6
 801d67a:	b224      	sxth	r4, r4
 801d67c:	f7f8 f970 	bl	8015960 <LCD_SetColor>
 801d680:	462b      	mov	r3, r5
 801d682:	4621      	mov	r1, r4
 801d684:	4642      	mov	r2, r8
 801d686:	4630      	mov	r0, r6
 801d688:	f7fb ffb4 	bl	80195f4 <GUI_DrawRect>
 801d68c:	3601      	adds	r6, #1
 801d68e:	3401      	adds	r4, #1
 801d690:	6938      	ldr	r0, [r7, #16]
 801d692:	f7f8 f965 	bl	8015960 <LCD_SetColor>
 801d696:	f1a5 0902 	sub.w	r9, r5, #2
 801d69a:	4620      	mov	r0, r4
 801d69c:	4631      	mov	r1, r6
 801d69e:	f1a8 0202 	sub.w	r2, r8, #2
 801d6a2:	f7f9 fb51 	bl	8016d48 <GUI_DrawHLine>
 801d6a6:	4621      	mov	r1, r4
 801d6a8:	464a      	mov	r2, r9
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	f7f9 fba2 	bl	8016df4 <GUI_DrawVLine>
 801d6b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6b4:	6878      	ldr	r0, [r7, #4]
 801d6b6:	f7f8 f953 	bl	8015960 <LCD_SetColor>
 801d6ba:	4631      	mov	r1, r6
 801d6bc:	1e68      	subs	r0, r5, #1
 801d6be:	4642      	mov	r2, r8
 801d6c0:	f7f9 fb42 	bl	8016d48 <GUI_DrawHLine>
 801d6c4:	4640      	mov	r0, r8
 801d6c6:	4621      	mov	r1, r4
 801d6c8:	464a      	mov	r2, r9
 801d6ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6ce:	f7f9 bb91 	b.w	8016df4 <GUI_DrawVLine>
 801d6d2:	bf00      	nop
 801d6d4:	200003e8 	.word	0x200003e8

0801d6d8 <_DrawDownRect>:
 801d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6dc:	4c27      	ldr	r4, [pc, #156]	; (801d77c <_DrawDownRect+0xa4>)
 801d6de:	8805      	ldrh	r5, [r0, #0]
 801d6e0:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 801d6e4:	8887      	ldrh	r7, [r0, #4]
 801d6e6:	88c6      	ldrh	r6, [r0, #6]
 801d6e8:	6820      	ldr	r0, [r4, #0]
 801d6ea:	b083      	sub	sp, #12
 801d6ec:	f7f8 f938 	bl	8015960 <LCD_SetColor>
 801d6f0:	b22d      	sxth	r5, r5
 801d6f2:	b23f      	sxth	r7, r7
 801d6f4:	fa0f fb8b 	sxth.w	fp, fp
 801d6f8:	68a0      	ldr	r0, [r4, #8]
 801d6fa:	f7f8 f931 	bl	8015960 <LCD_SetColor>
 801d6fe:	b236      	sxth	r6, r6
 801d700:	f10b 0901 	add.w	r9, fp, #1
 801d704:	4658      	mov	r0, fp
 801d706:	4629      	mov	r1, r5
 801d708:	463a      	mov	r2, r7
 801d70a:	f7f9 fb1d 	bl	8016d48 <GUI_DrawHLine>
 801d70e:	4649      	mov	r1, r9
 801d710:	4632      	mov	r2, r6
 801d712:	4628      	mov	r0, r5
 801d714:	f7f9 fb6e 	bl	8016df4 <GUI_DrawVLine>
 801d718:	f105 0a01 	add.w	sl, r5, #1
 801d71c:	1e7b      	subs	r3, r7, #1
 801d71e:	6820      	ldr	r0, [r4, #0]
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	f106 38ff 	add.w	r8, r6, #4294967295
 801d726:	f7f8 f91b 	bl	8015960 <LCD_SetColor>
 801d72a:	f10b 0b02 	add.w	fp, fp, #2
 801d72e:	4648      	mov	r0, r9
 801d730:	4651      	mov	r1, sl
 801d732:	9a01      	ldr	r2, [sp, #4]
 801d734:	f7f9 fb08 	bl	8016d48 <GUI_DrawHLine>
 801d738:	4659      	mov	r1, fp
 801d73a:	4642      	mov	r2, r8
 801d73c:	4650      	mov	r0, sl
 801d73e:	f7f9 fb59 	bl	8016df4 <GUI_DrawVLine>
 801d742:	6920      	ldr	r0, [r4, #16]
 801d744:	f7f8 f90c 	bl	8015960 <LCD_SetColor>
 801d748:	4630      	mov	r0, r6
 801d74a:	4651      	mov	r1, sl
 801d74c:	463a      	mov	r2, r7
 801d74e:	f7f9 fafb 	bl	8016d48 <GUI_DrawHLine>
 801d752:	4649      	mov	r1, r9
 801d754:	4632      	mov	r2, r6
 801d756:	4638      	mov	r0, r7
 801d758:	f7f9 fb4c 	bl	8016df4 <GUI_DrawVLine>
 801d75c:	68e0      	ldr	r0, [r4, #12]
 801d75e:	f7f8 f8ff 	bl	8015960 <LCD_SetColor>
 801d762:	4640      	mov	r0, r8
 801d764:	1ca9      	adds	r1, r5, #2
 801d766:	9a01      	ldr	r2, [sp, #4]
 801d768:	f7f9 faee 	bl	8016d48 <GUI_DrawHLine>
 801d76c:	9801      	ldr	r0, [sp, #4]
 801d76e:	4659      	mov	r1, fp
 801d770:	4642      	mov	r2, r8
 801d772:	b003      	add	sp, #12
 801d774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d778:	f7f9 bb3c 	b.w	8016df4 <GUI_DrawVLine>
 801d77c:	200003e8 	.word	0x200003e8

0801d780 <_DrawDown>:
 801d780:	b500      	push	{lr}
 801d782:	b083      	sub	sp, #12
 801d784:	4668      	mov	r0, sp
 801d786:	f7f1 fe8f 	bl	800f4a8 <WM_GetClientRect>
 801d78a:	4668      	mov	r0, sp
 801d78c:	f7ff ffa4 	bl	801d6d8 <_DrawDownRect>
 801d790:	b003      	add	sp, #12
 801d792:	f85d fb04 	ldr.w	pc, [sp], #4
 801d796:	bf00      	nop

0801d798 <WIDGET_EFFECT_3D_DrawUp>:
 801d798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d79c:	b083      	sub	sp, #12
 801d79e:	4668      	mov	r0, sp
 801d7a0:	f7f1 fe82 	bl	800f4a8 <WM_GetClientRect>
 801d7a4:	4f1d      	ldr	r7, [pc, #116]	; (801d81c <WIDGET_EFFECT_3D_DrawUp+0x84>)
 801d7a6:	f8bd 6000 	ldrh.w	r6, [sp]
 801d7aa:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 801d7ae:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 801d7b2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d7b6:	6838      	ldr	r0, [r7, #0]
 801d7b8:	b22d      	sxth	r5, r5
 801d7ba:	fa0f f888 	sxth.w	r8, r8
 801d7be:	b236      	sxth	r6, r6
 801d7c0:	b224      	sxth	r4, r4
 801d7c2:	f7f8 f8cd 	bl	8015960 <LCD_SetColor>
 801d7c6:	462b      	mov	r3, r5
 801d7c8:	4621      	mov	r1, r4
 801d7ca:	4642      	mov	r2, r8
 801d7cc:	4630      	mov	r0, r6
 801d7ce:	f7fb ff11 	bl	80195f4 <GUI_DrawRect>
 801d7d2:	3601      	adds	r6, #1
 801d7d4:	3401      	adds	r4, #1
 801d7d6:	6938      	ldr	r0, [r7, #16]
 801d7d8:	f7f8 f8c2 	bl	8015960 <LCD_SetColor>
 801d7dc:	f1a5 0902 	sub.w	r9, r5, #2
 801d7e0:	4620      	mov	r0, r4
 801d7e2:	4631      	mov	r1, r6
 801d7e4:	f1a8 0202 	sub.w	r2, r8, #2
 801d7e8:	f7f9 faae 	bl	8016d48 <GUI_DrawHLine>
 801d7ec:	4621      	mov	r1, r4
 801d7ee:	464a      	mov	r2, r9
 801d7f0:	4630      	mov	r0, r6
 801d7f2:	f7f9 faff 	bl	8016df4 <GUI_DrawVLine>
 801d7f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801d7fa:	6878      	ldr	r0, [r7, #4]
 801d7fc:	f7f8 f8b0 	bl	8015960 <LCD_SetColor>
 801d800:	4631      	mov	r1, r6
 801d802:	1e68      	subs	r0, r5, #1
 801d804:	4642      	mov	r2, r8
 801d806:	f7f9 fa9f 	bl	8016d48 <GUI_DrawHLine>
 801d80a:	4640      	mov	r0, r8
 801d80c:	4621      	mov	r1, r4
 801d80e:	464a      	mov	r2, r9
 801d810:	f7f9 faf0 	bl	8016df4 <GUI_DrawVLine>
 801d814:	b003      	add	sp, #12
 801d816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d81a:	bf00      	nop
 801d81c:	200003e8 	.word	0x200003e8

0801d820 <_DrawGraspH>:
 801d820:	4603      	mov	r3, r0
 801d822:	b570      	push	{r4, r5, r6, lr}
 801d824:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d828:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d82c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801d830:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d834:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801d836:	1b95      	subs	r5, r2, r6
 801d838:	3503      	adds	r5, #3
 801d83a:	441c      	add	r4, r3
 801d83c:	10ad      	asrs	r5, r5, #2
 801d83e:	442e      	add	r6, r5
 801d840:	1064      	asrs	r4, r4, #1
 801d842:	1b55      	subs	r5, r2, r5
 801d844:	f7fa fbb0 	bl	8017fa8 <GUI_SetColor>
 801d848:	4620      	mov	r0, r4
 801d84a:	4631      	mov	r1, r6
 801d84c:	462a      	mov	r2, r5
 801d84e:	f7f9 fad1 	bl	8016df4 <GUI_DrawVLine>
 801d852:	4631      	mov	r1, r6
 801d854:	462a      	mov	r2, r5
 801d856:	1ca0      	adds	r0, r4, #2
 801d858:	f7f9 facc 	bl	8016df4 <GUI_DrawVLine>
 801d85c:	4631      	mov	r1, r6
 801d85e:	462a      	mov	r2, r5
 801d860:	1d20      	adds	r0, r4, #4
 801d862:	f7f9 fac7 	bl	8016df4 <GUI_DrawVLine>
 801d866:	4631      	mov	r1, r6
 801d868:	462a      	mov	r2, r5
 801d86a:	1ea0      	subs	r0, r4, #2
 801d86c:	f7f9 fac2 	bl	8016df4 <GUI_DrawVLine>
 801d870:	4631      	mov	r1, r6
 801d872:	462a      	mov	r2, r5
 801d874:	1f20      	subs	r0, r4, #4
 801d876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d87a:	f7f9 babb 	b.w	8016df4 <GUI_DrawVLine>
 801d87e:	bf00      	nop

0801d880 <_DrawGraspV>:
 801d880:	4603      	mov	r3, r0
 801d882:	b570      	push	{r4, r5, r6, lr}
 801d884:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d888:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d88c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 801d890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d894:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801d896:	1b95      	subs	r5, r2, r6
 801d898:	3503      	adds	r5, #3
 801d89a:	441c      	add	r4, r3
 801d89c:	10ad      	asrs	r5, r5, #2
 801d89e:	442e      	add	r6, r5
 801d8a0:	1064      	asrs	r4, r4, #1
 801d8a2:	1b55      	subs	r5, r2, r5
 801d8a4:	f7fa fb80 	bl	8017fa8 <GUI_SetColor>
 801d8a8:	4620      	mov	r0, r4
 801d8aa:	4631      	mov	r1, r6
 801d8ac:	462a      	mov	r2, r5
 801d8ae:	f7f9 fa4b 	bl	8016d48 <GUI_DrawHLine>
 801d8b2:	4631      	mov	r1, r6
 801d8b4:	462a      	mov	r2, r5
 801d8b6:	1ca0      	adds	r0, r4, #2
 801d8b8:	f7f9 fa46 	bl	8016d48 <GUI_DrawHLine>
 801d8bc:	4631      	mov	r1, r6
 801d8be:	462a      	mov	r2, r5
 801d8c0:	1d20      	adds	r0, r4, #4
 801d8c2:	f7f9 fa41 	bl	8016d48 <GUI_DrawHLine>
 801d8c6:	4631      	mov	r1, r6
 801d8c8:	462a      	mov	r2, r5
 801d8ca:	1ea0      	subs	r0, r4, #2
 801d8cc:	f7f9 fa3c 	bl	8016d48 <GUI_DrawHLine>
 801d8d0:	4631      	mov	r1, r6
 801d8d2:	462a      	mov	r2, r5
 801d8d4:	1f20      	subs	r0, r4, #4
 801d8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d8da:	f7f9 ba35 	b.w	8016d48 <GUI_DrawHLine>
 801d8de:	bf00      	nop

0801d8e0 <_DrawFrame>:
 801d8e0:	b538      	push	{r3, r4, r5, lr}
 801d8e2:	4604      	mov	r4, r0
 801d8e4:	6808      	ldr	r0, [r1, #0]
 801d8e6:	460d      	mov	r5, r1
 801d8e8:	f7fa fb5e 	bl	8017fa8 <GUI_SetColor>
 801d8ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d8f0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d8f4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801d8f8:	3101      	adds	r1, #1
 801d8fa:	3a01      	subs	r2, #1
 801d8fc:	f7f9 fa24 	bl	8016d48 <GUI_DrawHLine>
 801d900:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d904:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d908:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801d90c:	3101      	adds	r1, #1
 801d90e:	3a01      	subs	r2, #1
 801d910:	f7f9 fa1a 	bl	8016d48 <GUI_DrawHLine>
 801d914:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d918:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d91c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d920:	3101      	adds	r1, #1
 801d922:	3a01      	subs	r2, #1
 801d924:	f7f9 fa66 	bl	8016df4 <GUI_DrawVLine>
 801d928:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d92c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d930:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d934:	3101      	adds	r1, #1
 801d936:	3a01      	subs	r2, #1
 801d938:	f7f9 fa5c 	bl	8016df4 <GUI_DrawVLine>
 801d93c:	6868      	ldr	r0, [r5, #4]
 801d93e:	f7fa fb33 	bl	8017fa8 <GUI_SetColor>
 801d942:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801d946:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d94a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d94e:	3001      	adds	r0, #1
 801d950:	3101      	adds	r1, #1
 801d952:	3a01      	subs	r2, #1
 801d954:	f7f9 f9f8 	bl	8016d48 <GUI_DrawHLine>
 801d958:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801d95c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d960:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d964:	3801      	subs	r0, #1
 801d966:	3101      	adds	r1, #1
 801d968:	3a01      	subs	r2, #1
 801d96a:	f7f9 f9ed 	bl	8016d48 <GUI_DrawHLine>
 801d96e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d972:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d976:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d97a:	3001      	adds	r0, #1
 801d97c:	3102      	adds	r1, #2
 801d97e:	3a02      	subs	r2, #2
 801d980:	f7f9 fa38 	bl	8016df4 <GUI_DrawVLine>
 801d984:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d988:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d98c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d990:	3102      	adds	r1, #2
 801d992:	3a02      	subs	r2, #2
 801d994:	3801      	subs	r0, #1
 801d996:	f7f9 fa2d 	bl	8016df4 <GUI_DrawVLine>
 801d99a:	68a8      	ldr	r0, [r5, #8]
 801d99c:	f7fa fb04 	bl	8017fa8 <GUI_SetColor>
 801d9a0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d9a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d9a8:	f7f9 f9fa 	bl	8016da0 <GUI_DrawPixel>
 801d9ac:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d9b0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d9b4:	f7f9 f9f4 	bl	8016da0 <GUI_DrawPixel>
 801d9b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d9bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d9c0:	f7f9 f9ee 	bl	8016da0 <GUI_DrawPixel>
 801d9c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d9c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d9d0:	f7f9 b9e6 	b.w	8016da0 <GUI_DrawPixel>

0801d9d4 <_DrawBackgroundH>:
 801d9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9d6:	4604      	mov	r4, r0
 801d9d8:	b083      	sub	sp, #12
 801d9da:	460d      	mov	r5, r1
 801d9dc:	f7ff ff80 	bl	801d8e0 <_DrawFrame>
 801d9e0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d9e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d9e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d9ec:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d9f0:	68ee      	ldr	r6, [r5, #12]
 801d9f2:	692f      	ldr	r7, [r5, #16]
 801d9f4:	9701      	str	r7, [sp, #4]
 801d9f6:	440b      	add	r3, r1
 801d9f8:	9600      	str	r6, [sp, #0]
 801d9fa:	105b      	asrs	r3, r3, #1
 801d9fc:	3102      	adds	r1, #2
 801d9fe:	3002      	adds	r0, #2
 801da00:	3a02      	subs	r2, #2
 801da02:	f7ff fb1f 	bl	801d044 <GUI_DrawGradientV>
 801da06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801da0a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801da0e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801da12:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801da16:	696e      	ldr	r6, [r5, #20]
 801da18:	69ac      	ldr	r4, [r5, #24]
 801da1a:	9401      	str	r4, [sp, #4]
 801da1c:	4419      	add	r1, r3
 801da1e:	1049      	asrs	r1, r1, #1
 801da20:	9600      	str	r6, [sp, #0]
 801da22:	3101      	adds	r1, #1
 801da24:	3b02      	subs	r3, #2
 801da26:	3002      	adds	r0, #2
 801da28:	3a02      	subs	r2, #2
 801da2a:	f7ff fb0b 	bl	801d044 <GUI_DrawGradientV>
 801da2e:	b003      	add	sp, #12
 801da30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da32:	bf00      	nop

0801da34 <_DrawBackgroundV>:
 801da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da36:	4604      	mov	r4, r0
 801da38:	b083      	sub	sp, #12
 801da3a:	460d      	mov	r5, r1
 801da3c:	f7ff ff50 	bl	801d8e0 <_DrawFrame>
 801da40:	f9b4 0000 	ldrsh.w	r0, [r4]
 801da44:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801da48:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801da4c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801da50:	68ee      	ldr	r6, [r5, #12]
 801da52:	692f      	ldr	r7, [r5, #16]
 801da54:	9701      	str	r7, [sp, #4]
 801da56:	4402      	add	r2, r0
 801da58:	9600      	str	r6, [sp, #0]
 801da5a:	1052      	asrs	r2, r2, #1
 801da5c:	3002      	adds	r0, #2
 801da5e:	3102      	adds	r1, #2
 801da60:	3b02      	subs	r3, #2
 801da62:	f7ff fbcb 	bl	801d1fc <GUI_DrawGradientH>
 801da66:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801da6a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801da6e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801da72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801da76:	696e      	ldr	r6, [r5, #20]
 801da78:	69ac      	ldr	r4, [r5, #24]
 801da7a:	9401      	str	r4, [sp, #4]
 801da7c:	4410      	add	r0, r2
 801da7e:	1040      	asrs	r0, r0, #1
 801da80:	9600      	str	r6, [sp, #0]
 801da82:	3001      	adds	r0, #1
 801da84:	3a02      	subs	r2, #2
 801da86:	3102      	adds	r1, #2
 801da88:	3b02      	subs	r3, #2
 801da8a:	f7ff fbb7 	bl	801d1fc <GUI_DrawGradientH>
 801da8e:	b003      	add	sp, #12
 801da90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da92:	bf00      	nop

0801da94 <SCROLLBAR_DrawSkinFlex>:
 801da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da98:	4604      	mov	r4, r0
 801da9a:	b087      	sub	sp, #28
 801da9c:	6800      	ldr	r0, [r0, #0]
 801da9e:	f7fb fb67 	bl	8019170 <GUI_ALLOC_LockH>
 801daa2:	4606      	mov	r6, r0
 801daa4:	a806      	add	r0, sp, #24
 801daa6:	f840 6d0c 	str.w	r6, [r0, #-12]!
 801daaa:	f7fb fb73 	bl	8019194 <GUI_ALLOC_UnlockH>
 801daae:	6a25      	ldr	r5, [r4, #32]
 801dab0:	f8b4 a010 	ldrh.w	sl, [r4, #16]
 801dab4:	682b      	ldr	r3, [r5, #0]
 801dab6:	8aa7      	ldrh	r7, [r4, #20]
 801dab8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 801dabc:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801dac0:	f8ad a010 	strh.w	sl, [sp, #16]
 801dac4:	f8ad 7012 	strh.w	r7, [sp, #18]
 801dac8:	f8ad 9014 	strh.w	r9, [sp, #20]
 801dacc:	f8ad 8016 	strh.w	r8, [sp, #22]
 801dad0:	bb6b      	cbnz	r3, 801db2e <SCROLLBAR_DrawSkinFlex+0x9a>
 801dad2:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 801dcc0 <SCROLLBAR_DrawSkinFlex+0x22c>
 801dad6:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 801dcc4 <SCROLLBAR_DrawSkinFlex+0x230>
 801dada:	4a74      	ldr	r2, [pc, #464]	; (801dcac <SCROLLBAR_DrawSkinFlex+0x218>)
 801dadc:	6863      	ldr	r3, [r4, #4]
 801dade:	3b08      	subs	r3, #8
 801dae0:	2b11      	cmp	r3, #17
 801dae2:	d820      	bhi.n	801db26 <SCROLLBAR_DrawSkinFlex+0x92>
 801dae4:	e8df f003 	tbb	[pc, r3]
 801dae8:	1f1f8337 	.word	0x1f1f8337
 801daec:	1f1f1f71 	.word	0x1f1f1f71
 801daf0:	091f7171 	.word	0x091f7171
 801daf4:	1f1f1f1f 	.word	0x1f1f1f1f
 801daf8:	2e1f      	.short	0x2e1f
 801dafa:	686b      	ldr	r3, [r5, #4]
 801dafc:	496c      	ldr	r1, [pc, #432]	; (801dcb0 <SCROLLBAR_DrawSkinFlex+0x21c>)
 801dafe:	4c6d      	ldr	r4, [pc, #436]	; (801dcb4 <SCROLLBAR_DrawSkinFlex+0x220>)
 801db00:	2b03      	cmp	r3, #3
 801db02:	bf08      	it	eq
 801db04:	460c      	moveq	r4, r1
 801db06:	4621      	mov	r1, r4
 801db08:	a804      	add	r0, sp, #16
 801db0a:	4790      	blx	r2
 801db0c:	682b      	ldr	r3, [r5, #0]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	f000 80ab 	beq.w	801dc6a <SCROLLBAR_DrawSkinFlex+0x1d6>
 801db14:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801db18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801db1c:	1ad3      	subs	r3, r2, r3
 801db1e:	3301      	adds	r3, #1
 801db20:	2b0e      	cmp	r3, #14
 801db22:	f300 80be 	bgt.w	801dca2 <SCROLLBAR_DrawSkinFlex+0x20e>
 801db26:	2000      	movs	r0, #0
 801db28:	b007      	add	sp, #28
 801db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db2e:	a904      	add	r1, sp, #16
 801db30:	460a      	mov	r2, r1
 801db32:	4630      	mov	r0, r6
 801db34:	f7eb fbb6 	bl	80092a4 <WIDGET__RotateRect90>
 801db38:	f8df b18c 	ldr.w	fp, [pc, #396]	; 801dcc8 <SCROLLBAR_DrawSkinFlex+0x234>
 801db3c:	f8df c18c 	ldr.w	ip, [pc, #396]	; 801dccc <SCROLLBAR_DrawSkinFlex+0x238>
 801db40:	4a5d      	ldr	r2, [pc, #372]	; (801dcb8 <SCROLLBAR_DrawSkinFlex+0x224>)
 801db42:	e7cb      	b.n	801dadc <SCROLLBAR_DrawSkinFlex+0x48>
 801db44:	682b      	ldr	r3, [r5, #0]
 801db46:	2b00      	cmp	r3, #0
 801db48:	f000 808a 	beq.w	801dc60 <SCROLLBAR_DrawSkinFlex+0x1cc>
 801db4c:	69a0      	ldr	r0, [r4, #24]
 801db4e:	6923      	ldr	r3, [r4, #16]
 801db50:	1ac0      	subs	r0, r0, r3
 801db52:	3001      	adds	r0, #1
 801db54:	e7e8      	b.n	801db28 <SCROLLBAR_DrawSkinFlex+0x94>
 801db56:	686b      	ldr	r3, [r5, #4]
 801db58:	4856      	ldr	r0, [pc, #344]	; (801dcb4 <SCROLLBAR_DrawSkinFlex+0x220>)
 801db5a:	4955      	ldr	r1, [pc, #340]	; (801dcb0 <SCROLLBAR_DrawSkinFlex+0x21c>)
 801db5c:	2b02      	cmp	r3, #2
 801db5e:	bf14      	ite	ne
 801db60:	4683      	movne	fp, r0
 801db62:	468b      	moveq	fp, r1
 801db64:	4659      	mov	r1, fp
 801db66:	a804      	add	r0, sp, #16
 801db68:	4790      	blx	r2
 801db6a:	682b      	ldr	r3, [r5, #0]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	f000 8083 	beq.w	801dc78 <SCROLLBAR_DrawSkinFlex+0x1e4>
 801db72:	fa0f fa8a 	sxth.w	sl, sl
 801db76:	fa0f f989 	sxth.w	r9, r9
 801db7a:	fa0f f888 	sxth.w	r8, r8
 801db7e:	b23f      	sxth	r7, r7
 801db80:	ebca 0909 	rsb	r9, sl, r9
 801db84:	ebc7 0708 	rsb	r7, r7, r8
 801db88:	f109 0901 	add.w	r9, r9, #1
 801db8c:	3701      	adds	r7, #1
 801db8e:	4c4b      	ldr	r4, [pc, #300]	; (801dcbc <SCROLLBAR_DrawSkinFlex+0x228>)
 801db90:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 801db94:	f1a9 0304 	sub.w	r3, r9, #4
 801db98:	fb84 2403 	smull	r2, r4, r4, r3
 801db9c:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 801dba0:	f7fa fa02 	bl	8017fa8 <GUI_SetColor>
 801dba4:	ebc4 0109 	rsb	r1, r4, r9
 801dba8:	eba9 0961 	sub.w	r9, r9, r1, asr #1
 801dbac:	f109 31ff 	add.w	r1, r9, #4294967295
 801dbb0:	f04f 35ff 	mov.w	r5, #4294967295
 801dbb4:	4630      	mov	r0, r6
 801dbb6:	107a      	asrs	r2, r7, #1
 801dbb8:	4451      	add	r1, sl
 801dbba:	4623      	mov	r3, r4
 801dbbc:	9500      	str	r5, [sp, #0]
 801dbbe:	f7eb fda9 	bl	8009714 <WIDGET__DrawTriangle>
 801dbc2:	2000      	movs	r0, #0
 801dbc4:	b007      	add	sp, #28
 801dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbca:	4c3a      	ldr	r4, [pc, #232]	; (801dcb4 <SCROLLBAR_DrawSkinFlex+0x220>)
 801dbcc:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801dbd0:	69e5      	ldr	r5, [r4, #28]
 801dbd2:	6a24      	ldr	r4, [r4, #32]
 801dbd4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801dbd8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801dbdc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801dbe0:	9500      	str	r5, [sp, #0]
 801dbe2:	9401      	str	r4, [sp, #4]
 801dbe4:	47e0      	blx	ip
 801dbe6:	2000      	movs	r0, #0
 801dbe8:	b007      	add	sp, #28
 801dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbee:	686b      	ldr	r3, [r5, #4]
 801dbf0:	4830      	ldr	r0, [pc, #192]	; (801dcb4 <SCROLLBAR_DrawSkinFlex+0x220>)
 801dbf2:	492f      	ldr	r1, [pc, #188]	; (801dcb0 <SCROLLBAR_DrawSkinFlex+0x21c>)
 801dbf4:	2b01      	cmp	r3, #1
 801dbf6:	bf14      	ite	ne
 801dbf8:	4683      	movne	fp, r0
 801dbfa:	468b      	moveq	fp, r1
 801dbfc:	4659      	mov	r1, fp
 801dbfe:	a804      	add	r0, sp, #16
 801dc00:	4790      	blx	r2
 801dc02:	682b      	ldr	r3, [r5, #0]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d042      	beq.n	801dc8e <SCROLLBAR_DrawSkinFlex+0x1fa>
 801dc08:	fa0f f989 	sxth.w	r9, r9
 801dc0c:	fa0f fa8a 	sxth.w	sl, sl
 801dc10:	ebca 0a09 	rsb	sl, sl, r9
 801dc14:	fa0f f888 	sxth.w	r8, r8
 801dc18:	b23f      	sxth	r7, r7
 801dc1a:	f10a 0a01 	add.w	sl, sl, #1
 801dc1e:	ebc7 0708 	rsb	r7, r7, r8
 801dc22:	4c26      	ldr	r4, [pc, #152]	; (801dcbc <SCROLLBAR_DrawSkinFlex+0x228>)
 801dc24:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 801dc28:	f1aa 0304 	sub.w	r3, sl, #4
 801dc2c:	fb84 1403 	smull	r1, r4, r4, r3
 801dc30:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 801dc34:	f7fa f9b8 	bl	8017fa8 <GUI_SetColor>
 801dc38:	ebc4 010a 	rsb	r1, r4, sl
 801dc3c:	ebaa 0a61 	sub.w	sl, sl, r1, asr #1
 801dc40:	2501      	movs	r5, #1
 801dc42:	f10a 31ff 	add.w	r1, sl, #4294967295
 801dc46:	4630      	mov	r0, r6
 801dc48:	fa47 f205 	asr.w	r2, r7, r5
 801dc4c:	ebc1 0109 	rsb	r1, r1, r9
 801dc50:	4623      	mov	r3, r4
 801dc52:	9500      	str	r5, [sp, #0]
 801dc54:	f7eb fd5e 	bl	8009714 <WIDGET__DrawTriangle>
 801dc58:	2000      	movs	r0, #0
 801dc5a:	b007      	add	sp, #28
 801dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc60:	69e0      	ldr	r0, [r4, #28]
 801dc62:	6963      	ldr	r3, [r4, #20]
 801dc64:	1ac0      	subs	r0, r0, r3
 801dc66:	3001      	adds	r0, #1
 801dc68:	e75e      	b.n	801db28 <SCROLLBAR_DrawSkinFlex+0x94>
 801dc6a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801dc6e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dc72:	1ad3      	subs	r3, r2, r3
 801dc74:	3301      	adds	r3, #1
 801dc76:	e753      	b.n	801db20 <SCROLLBAR_DrawSkinFlex+0x8c>
 801dc78:	b23f      	sxth	r7, r7
 801dc7a:	fa0f f988 	sxth.w	r9, r8
 801dc7e:	ebc7 0909 	rsb	r9, r7, r9
 801dc82:	f109 0901 	add.w	r9, r9, #1
 801dc86:	fa0f fa8a 	sxth.w	sl, sl
 801dc8a:	464f      	mov	r7, r9
 801dc8c:	e77f      	b.n	801db8e <SCROLLBAR_DrawSkinFlex+0xfa>
 801dc8e:	fa0f f888 	sxth.w	r8, r8
 801dc92:	b23f      	sxth	r7, r7
 801dc94:	ebc7 0708 	rsb	r7, r7, r8
 801dc98:	fa0f f989 	sxth.w	r9, r9
 801dc9c:	f107 0a01 	add.w	sl, r7, #1
 801dca0:	e7bf      	b.n	801dc22 <SCROLLBAR_DrawSkinFlex+0x18e>
 801dca2:	a804      	add	r0, sp, #16
 801dca4:	4621      	mov	r1, r4
 801dca6:	47d8      	blx	fp
 801dca8:	2000      	movs	r0, #0
 801dcaa:	e73d      	b.n	801db28 <SCROLLBAR_DrawSkinFlex+0x94>
 801dcac:	0801d9d5 	.word	0x0801d9d5
 801dcb0:	200003fc 	.word	0x200003fc
 801dcb4:	20000428 	.word	0x20000428
 801dcb8:	0801da35 	.word	0x0801da35
 801dcbc:	55555556 	.word	0x55555556
 801dcc0:	0801d821 	.word	0x0801d821
 801dcc4:	0801d045 	.word	0x0801d045
 801dcc8:	0801d881 	.word	0x0801d881
 801dccc:	0801d1fd 	.word	0x0801d1fd

0801dcd0 <_Create>:
 801dcd0:	b530      	push	{r4, r5, lr}
 801dcd2:	b08d      	sub	sp, #52	; 0x34
 801dcd4:	4605      	mov	r5, r0
 801dcd6:	f7fb fa4b 	bl	8019170 <GUI_ALLOC_LockH>
 801dcda:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801dcdc:	4909      	ldr	r1, [pc, #36]	; (801dd04 <_Create+0x34>)
 801dcde:	6481      	str	r1, [r0, #72]	; 0x48
 801dce0:	4603      	mov	r3, r0
 801dce2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 801dce6:	4668      	mov	r0, sp
 801dce8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801dcea:	9300      	str	r3, [sp, #0]
 801dcec:	9201      	str	r2, [sp, #4]
 801dcee:	f7fb fa51 	bl	8019194 <GUI_ALLOC_UnlockH>
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	ab01      	add	r3, sp, #4
 801dcf6:	9503      	str	r5, [sp, #12]
 801dcf8:	9204      	str	r2, [sp, #16]
 801dcfa:	930b      	str	r3, [sp, #44]	; 0x2c
 801dcfc:	a803      	add	r0, sp, #12
 801dcfe:	47a0      	blx	r4
 801dd00:	b00d      	add	sp, #52	; 0x34
 801dd02:	bd30      	pop	{r4, r5, pc}
 801dd04:	0801dd09 	.word	0x0801dd09

0801dd08 <_CalcPositions>:
 801dd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd0c:	b092      	sub	sp, #72	; 0x48
 801dd0e:	460c      	mov	r4, r1
 801dd10:	4605      	mov	r5, r0
 801dd12:	f7fb fa2d 	bl	8019170 <GUI_ALLOC_LockH>
 801dd16:	4603      	mov	r3, r0
 801dd18:	c803      	ldmia	r0, {r0, r1}
 801dd1a:	ae02      	add	r6, sp, #8
 801dd1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801dd1e:	9300      	str	r3, [sp, #0]
 801dd20:	e886 0003 	stmia.w	r6, {r0, r1}
 801dd24:	f002 0108 	and.w	r1, r2, #8
 801dd28:	b289      	uxth	r1, r1
 801dd2a:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 801dd2e:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 801dd32:	2900      	cmp	r1, #0
 801dd34:	d070      	beq.n	801de18 <_CalcPositions+0x110>
 801dd36:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801dd3a:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
 801dd3e:	4696      	mov	lr, r2
 801dd40:	f111 0900 	adds.w	r9, r1, #0
 801dd44:	bf18      	it	ne
 801dd46:	f04f 0901 	movne.w	r9, #1
 801dd4a:	2119      	movs	r1, #25
 801dd4c:	a807      	add	r0, sp, #28
 801dd4e:	61a2      	str	r2, [r4, #24]
 801dd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd52:	9509      	str	r5, [sp, #36]	; 0x24
 801dd54:	9011      	str	r0, [sp, #68]	; 0x44
 801dd56:	f8cd 901c 	str.w	r9, [sp, #28]
 801dd5a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801dd5e:	970e      	str	r7, [sp, #56]	; 0x38
 801dd60:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801dd64:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 801dd68:	910a      	str	r1, [sp, #40]	; 0x28
 801dd6a:	a809      	add	r0, sp, #36	; 0x24
 801dd6c:	4798      	blx	r3
 801dd6e:	9a00      	ldr	r2, [sp, #0]
 801dd70:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 801dd74:	2bff      	cmp	r3, #255	; 0xff
 801dd76:	4605      	mov	r5, r0
 801dd78:	d054      	beq.n	801de24 <_CalcPositions+0x11c>
 801dd7a:	2bfe      	cmp	r3, #254	; 0xfe
 801dd7c:	d05b      	beq.n	801de36 <_CalcPositions+0x12e>
 801dd7e:	427a      	negs	r2, r7
 801dd80:	f1c8 0100 	rsb	r1, r8, #0
 801dd84:	4630      	mov	r0, r6
 801dd86:	f7fa f879 	bl	8017e7c <GUI_MoveRect>
 801dd8a:	4631      	mov	r1, r6
 801dd8c:	9800      	ldr	r0, [sp, #0]
 801dd8e:	f7fd f881 	bl	801ae94 <SCROLLBAR__Rect2VRect>
 801dd92:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801dd96:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
 801dd9a:	9b00      	ldr	r3, [sp, #0]
 801dd9c:	ebc2 0909 	rsb	r9, r2, r9
 801dda0:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 801dda4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801dda6:	f109 0601 	add.w	r6, r9, #1
 801ddaa:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 801ddae:	4651      	mov	r1, sl
 801ddb0:	fb00 f006 	mul.w	r0, r0, r6
 801ddb4:	f7f7 fe58 	bl	8015a68 <GUI__DivideRound32>
 801ddb8:	4b32      	ldr	r3, [pc, #200]	; (801de84 <_CalcPositions+0x17c>)
 801ddba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ddbe:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 801ddc2:	1c5a      	adds	r2, r3, #1
 801ddc4:	4290      	cmp	r0, r2
 801ddc6:	bfd8      	it	le
 801ddc8:	1c98      	addle	r0, r3, #2
 801ddca:	f858 3d48 	ldr.w	r3, [r8, #-72]!
 801ddce:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801ddd2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801ddd4:	42b0      	cmp	r0, r6
 801ddd6:	bfb4      	ite	lt
 801ddd8:	4607      	movlt	r7, r0
 801ddda:	4637      	movge	r7, r6
 801dddc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801ddde:	f8c4 9014 	str.w	r9, [r4, #20]
 801dde2:	1e6b      	subs	r3, r5, #1
 801dde4:	ebc7 0906 	rsb	r9, r7, r6
 801dde8:	442e      	add	r6, r5
 801ddea:	e884 000c 	stmia.w	r4, {r2, r3}
 801ddee:	ebc1 010a 	rsb	r1, r1, sl
 801ddf2:	fb00 f009 	mul.w	r0, r0, r9
 801ddf6:	6126      	str	r6, [r4, #16]
 801ddf8:	f7f7 fe36 	bl	8015a68 <GUI__DivideRound32>
 801ddfc:	4428      	add	r0, r5
 801ddfe:	19c3      	adds	r3, r0, r7
 801de00:	3b01      	subs	r3, #1
 801de02:	60a0      	str	r0, [r4, #8]
 801de04:	60e3      	str	r3, [r4, #12]
 801de06:	f8c4 901c 	str.w	r9, [r4, #28]
 801de0a:	4668      	mov	r0, sp
 801de0c:	6227      	str	r7, [r4, #32]
 801de0e:	f7fb f9c1 	bl	8019194 <GUI_ALLOC_UnlockH>
 801de12:	b012      	add	sp, #72	; 0x48
 801de14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de18:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801de1c:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 801de20:	4694      	mov	ip, r2
 801de22:	e78d      	b.n	801dd40 <_CalcPositions+0x38>
 801de24:	6990      	ldr	r0, [r2, #24]
 801de26:	f7f1 fdf5 	bl	800fa14 <WM_GetScrollbarV>
 801de2a:	b9c0      	cbnz	r0, 801de5e <_CalcPositions+0x156>
 801de2c:	9a00      	ldr	r2, [sp, #0]
 801de2e:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 801de32:	2bfe      	cmp	r3, #254	; 0xfe
 801de34:	d1a3      	bne.n	801dd7e <_CalcPositions+0x76>
 801de36:	6990      	ldr	r0, [r2, #24]
 801de38:	f7f1 fda4 	bl	800f984 <WM_GetScrollbarH>
 801de3c:	2800      	cmp	r0, #0
 801de3e:	d09e      	beq.n	801dd7e <_CalcPositions+0x76>
 801de40:	a904      	add	r1, sp, #16
 801de42:	f7f1 fec7 	bl	800fbd4 <WM_GetWindowRectEx>
 801de46:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801de4a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801de4e:	429a      	cmp	r2, r3
 801de50:	d195      	bne.n	801dd7e <_CalcPositions+0x76>
 801de52:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801de56:	3b01      	subs	r3, #1
 801de58:	f8ad 300e 	strh.w	r3, [sp, #14]
 801de5c:	e78f      	b.n	801dd7e <_CalcPositions+0x76>
 801de5e:	a904      	add	r1, sp, #16
 801de60:	f7f1 feb8 	bl	800fbd4 <WM_GetWindowRectEx>
 801de64:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801de68:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801de6c:	429a      	cmp	r2, r3
 801de6e:	d1dd      	bne.n	801de2c <_CalcPositions+0x124>
 801de70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801de74:	9a00      	ldr	r2, [sp, #0]
 801de76:	3b01      	subs	r3, #1
 801de78:	f8ad 300c 	strh.w	r3, [sp, #12]
 801de7c:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 801de80:	e77b      	b.n	801dd7a <_CalcPositions+0x72>
 801de82:	bf00      	nop
 801de84:	2000034a 	.word	0x2000034a

0801de88 <_Paint>:
 801de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de8a:	b099      	sub	sp, #100	; 0x64
 801de8c:	4606      	mov	r6, r0
 801de8e:	f7fb f96f 	bl	8019170 <GUI_ALLOC_LockH>
 801de92:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801de94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801de96:	9001      	str	r0, [sp, #4]
 801de98:	4605      	mov	r5, r0
 801de9a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 801de9e:	a906      	add	r1, sp, #24
 801dea0:	4630      	mov	r0, r6
 801dea2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801dea4:	9204      	str	r2, [sp, #16]
 801dea6:	9305      	str	r3, [sp, #20]
 801dea8:	f7ff ff2e 	bl	801dd08 <_CalcPositions>
 801deac:	a801      	add	r0, sp, #4
 801deae:	f7fb f971 	bl	8019194 <GUI_ALLOC_UnlockH>
 801deb2:	4628      	mov	r0, r5
 801deb4:	a902      	add	r1, sp, #8
 801deb6:	f7eb fa09 	bl	80092cc <WIDGET__GetClientRect>
 801deba:	9a06      	ldr	r2, [sp, #24]
 801debc:	9b07      	ldr	r3, [sp, #28]
 801debe:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 801dec2:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801dec6:	9213      	str	r2, [sp, #76]	; 0x4c
 801dec8:	2108      	movs	r1, #8
 801deca:	a804      	add	r0, sp, #16
 801decc:	9017      	str	r0, [sp, #92]	; 0x5c
 801dece:	9110      	str	r1, [sp, #64]	; 0x40
 801ded0:	9315      	str	r3, [sp, #84]	; 0x54
 801ded2:	960f      	str	r6, [sp, #60]	; 0x3c
 801ded4:	9714      	str	r7, [sp, #80]	; 0x50
 801ded6:	9516      	str	r5, [sp, #88]	; 0x58
 801ded8:	a80f      	add	r0, sp, #60	; 0x3c
 801deda:	47a0      	blx	r4
 801dedc:	9a07      	ldr	r2, [sp, #28]
 801dede:	9b08      	ldr	r3, [sp, #32]
 801dee0:	3201      	adds	r2, #1
 801dee2:	3b01      	subs	r3, #1
 801dee4:	2110      	movs	r1, #16
 801dee6:	9213      	str	r2, [sp, #76]	; 0x4c
 801dee8:	9315      	str	r3, [sp, #84]	; 0x54
 801deea:	9110      	str	r1, [sp, #64]	; 0x40
 801deec:	a80f      	add	r0, sp, #60	; 0x3c
 801deee:	47a0      	blx	r4
 801def0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801def2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801def4:	3201      	adds	r2, #1
 801def6:	3b01      	subs	r3, #1
 801def8:	2111      	movs	r1, #17
 801defa:	9213      	str	r2, [sp, #76]	; 0x4c
 801defc:	9315      	str	r3, [sp, #84]	; 0x54
 801defe:	9110      	str	r1, [sp, #64]	; 0x40
 801df00:	a80f      	add	r0, sp, #60	; 0x3c
 801df02:	47a0      	blx	r4
 801df04:	2113      	movs	r1, #19
 801df06:	9a08      	ldr	r2, [sp, #32]
 801df08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df0a:	9110      	str	r1, [sp, #64]	; 0x40
 801df0c:	9213      	str	r2, [sp, #76]	; 0x4c
 801df0e:	9315      	str	r3, [sp, #84]	; 0x54
 801df10:	a80f      	add	r0, sp, #60	; 0x3c
 801df12:	47a0      	blx	r4
 801df14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df18:	9213      	str	r2, [sp, #76]	; 0x4c
 801df1a:	2109      	movs	r1, #9
 801df1c:	9315      	str	r3, [sp, #84]	; 0x54
 801df1e:	9110      	str	r1, [sp, #64]	; 0x40
 801df20:	a80f      	add	r0, sp, #60	; 0x3c
 801df22:	47a0      	blx	r4
 801df24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801df26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df28:	429a      	cmp	r2, r3
 801df2a:	d006      	beq.n	801df3a <_Paint+0xb2>
 801df2c:	3201      	adds	r2, #1
 801df2e:	210c      	movs	r1, #12
 801df30:	9213      	str	r2, [sp, #76]	; 0x4c
 801df32:	9315      	str	r3, [sp, #84]	; 0x54
 801df34:	a80f      	add	r0, sp, #60	; 0x3c
 801df36:	9110      	str	r1, [sp, #64]	; 0x40
 801df38:	47a0      	blx	r4
 801df3a:	b019      	add	sp, #100	; 0x64
 801df3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df3e:	bf00      	nop

0801df40 <GUI_DRAW__Draw>:
 801df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df44:	460f      	mov	r7, r1
 801df46:	b082      	sub	sp, #8
 801df48:	4616      	mov	r6, r2
 801df4a:	461d      	mov	r5, r3
 801df4c:	4680      	mov	r8, r0
 801df4e:	b170      	cbz	r0, 801df6e <GUI_DRAW__Draw+0x2e>
 801df50:	f7fb f90e 	bl	8019170 <GUI_ALLOC_LockH>
 801df54:	ac02      	add	r4, sp, #8
 801df56:	6803      	ldr	r3, [r0, #0]
 801df58:	f844 0d04 	str.w	r0, [r4, #-4]!
 801df5c:	4620      	mov	r0, r4
 801df5e:	681c      	ldr	r4, [r3, #0]
 801df60:	f7fb f918 	bl	8019194 <GUI_ALLOC_UnlockH>
 801df64:	4640      	mov	r0, r8
 801df66:	4639      	mov	r1, r7
 801df68:	4632      	mov	r2, r6
 801df6a:	462b      	mov	r3, r5
 801df6c:	47a0      	blx	r4
 801df6e:	b002      	add	sp, #8
 801df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801df74 <LCD_GetNumLayers>:
 801df74:	b510      	push	{r4, lr}
 801df76:	2000      	movs	r0, #0
 801df78:	f7f9 faa8 	bl	80174cc <GUI_DEVICE__GetpDriver>
 801df7c:	1c04      	adds	r4, r0, #0
 801df7e:	f04f 0001 	mov.w	r0, #1
 801df82:	bf18      	it	ne
 801df84:	2401      	movne	r4, #1
 801df86:	f7f9 faa1 	bl	80174cc <GUI_DEVICE__GetpDriver>
 801df8a:	b100      	cbz	r0, 801df8e <LCD_GetNumLayers+0x1a>
 801df8c:	3401      	adds	r4, #1
 801df8e:	4620      	mov	r0, r4
 801df90:	bd10      	pop	{r4, pc}
 801df92:	bf00      	nop

0801df94 <__libc_init_array>:
 801df94:	b570      	push	{r4, r5, r6, lr}
 801df96:	4e0d      	ldr	r6, [pc, #52]	; (801dfcc <__libc_init_array+0x38>)
 801df98:	4c0d      	ldr	r4, [pc, #52]	; (801dfd0 <__libc_init_array+0x3c>)
 801df9a:	1ba4      	subs	r4, r4, r6
 801df9c:	10a4      	asrs	r4, r4, #2
 801df9e:	2500      	movs	r5, #0
 801dfa0:	42a5      	cmp	r5, r4
 801dfa2:	d109      	bne.n	801dfb8 <__libc_init_array+0x24>
 801dfa4:	4e0b      	ldr	r6, [pc, #44]	; (801dfd4 <__libc_init_array+0x40>)
 801dfa6:	4c0c      	ldr	r4, [pc, #48]	; (801dfd8 <__libc_init_array+0x44>)
 801dfa8:	f000 f92a 	bl	801e200 <_init>
 801dfac:	1ba4      	subs	r4, r4, r6
 801dfae:	10a4      	asrs	r4, r4, #2
 801dfb0:	2500      	movs	r5, #0
 801dfb2:	42a5      	cmp	r5, r4
 801dfb4:	d105      	bne.n	801dfc2 <__libc_init_array+0x2e>
 801dfb6:	bd70      	pop	{r4, r5, r6, pc}
 801dfb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dfbc:	4798      	blx	r3
 801dfbe:	3501      	adds	r5, #1
 801dfc0:	e7ee      	b.n	801dfa0 <__libc_init_array+0xc>
 801dfc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dfc6:	4798      	blx	r3
 801dfc8:	3501      	adds	r5, #1
 801dfca:	e7f2      	b.n	801dfb2 <__libc_init_array+0x1e>
 801dfcc:	080224c0 	.word	0x080224c0
 801dfd0:	080224c0 	.word	0x080224c0
 801dfd4:	080224c0 	.word	0x080224c0
 801dfd8:	080224c4 	.word	0x080224c4

0801dfdc <malloc>:
 801dfdc:	4b02      	ldr	r3, [pc, #8]	; (801dfe8 <malloc+0xc>)
 801dfde:	4601      	mov	r1, r0
 801dfe0:	6818      	ldr	r0, [r3, #0]
 801dfe2:	f000 b887 	b.w	801e0f4 <_malloc_r>
 801dfe6:	bf00      	nop
 801dfe8:	20000460 	.word	0x20000460

0801dfec <free>:
 801dfec:	4b02      	ldr	r3, [pc, #8]	; (801dff8 <free+0xc>)
 801dfee:	4601      	mov	r1, r0
 801dff0:	6818      	ldr	r0, [r3, #0]
 801dff2:	f000 b831 	b.w	801e058 <_free_r>
 801dff6:	bf00      	nop
 801dff8:	20000460 	.word	0x20000460

0801dffc <memcpy>:
 801dffc:	b510      	push	{r4, lr}
 801dffe:	1e43      	subs	r3, r0, #1
 801e000:	440a      	add	r2, r1
 801e002:	4291      	cmp	r1, r2
 801e004:	d100      	bne.n	801e008 <memcpy+0xc>
 801e006:	bd10      	pop	{r4, pc}
 801e008:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e010:	e7f7      	b.n	801e002 <memcpy+0x6>

0801e012 <memmove>:
 801e012:	4288      	cmp	r0, r1
 801e014:	b510      	push	{r4, lr}
 801e016:	eb01 0302 	add.w	r3, r1, r2
 801e01a:	d803      	bhi.n	801e024 <memmove+0x12>
 801e01c:	1e42      	subs	r2, r0, #1
 801e01e:	4299      	cmp	r1, r3
 801e020:	d10c      	bne.n	801e03c <memmove+0x2a>
 801e022:	bd10      	pop	{r4, pc}
 801e024:	4298      	cmp	r0, r3
 801e026:	d2f9      	bcs.n	801e01c <memmove+0xa>
 801e028:	1881      	adds	r1, r0, r2
 801e02a:	1ad2      	subs	r2, r2, r3
 801e02c:	42d3      	cmn	r3, r2
 801e02e:	d100      	bne.n	801e032 <memmove+0x20>
 801e030:	bd10      	pop	{r4, pc}
 801e032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e036:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801e03a:	e7f7      	b.n	801e02c <memmove+0x1a>
 801e03c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e040:	f802 4f01 	strb.w	r4, [r2, #1]!
 801e044:	e7eb      	b.n	801e01e <memmove+0xc>

0801e046 <memset>:
 801e046:	4402      	add	r2, r0
 801e048:	4603      	mov	r3, r0
 801e04a:	4293      	cmp	r3, r2
 801e04c:	d100      	bne.n	801e050 <memset+0xa>
 801e04e:	4770      	bx	lr
 801e050:	f803 1b01 	strb.w	r1, [r3], #1
 801e054:	e7f9      	b.n	801e04a <memset+0x4>
	...

0801e058 <_free_r>:
 801e058:	b538      	push	{r3, r4, r5, lr}
 801e05a:	4605      	mov	r5, r0
 801e05c:	2900      	cmp	r1, #0
 801e05e:	d045      	beq.n	801e0ec <_free_r+0x94>
 801e060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e064:	1f0c      	subs	r4, r1, #4
 801e066:	2b00      	cmp	r3, #0
 801e068:	bfb8      	it	lt
 801e06a:	18e4      	addlt	r4, r4, r3
 801e06c:	f000 f8b8 	bl	801e1e0 <__malloc_lock>
 801e070:	4a1f      	ldr	r2, [pc, #124]	; (801e0f0 <_free_r+0x98>)
 801e072:	6813      	ldr	r3, [r2, #0]
 801e074:	4610      	mov	r0, r2
 801e076:	b933      	cbnz	r3, 801e086 <_free_r+0x2e>
 801e078:	6063      	str	r3, [r4, #4]
 801e07a:	6014      	str	r4, [r2, #0]
 801e07c:	4628      	mov	r0, r5
 801e07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e082:	f000 b8ae 	b.w	801e1e2 <__malloc_unlock>
 801e086:	42a3      	cmp	r3, r4
 801e088:	d90c      	bls.n	801e0a4 <_free_r+0x4c>
 801e08a:	6821      	ldr	r1, [r4, #0]
 801e08c:	1862      	adds	r2, r4, r1
 801e08e:	4293      	cmp	r3, r2
 801e090:	bf04      	itt	eq
 801e092:	681a      	ldreq	r2, [r3, #0]
 801e094:	685b      	ldreq	r3, [r3, #4]
 801e096:	6063      	str	r3, [r4, #4]
 801e098:	bf04      	itt	eq
 801e09a:	1852      	addeq	r2, r2, r1
 801e09c:	6022      	streq	r2, [r4, #0]
 801e09e:	6004      	str	r4, [r0, #0]
 801e0a0:	e7ec      	b.n	801e07c <_free_r+0x24>
 801e0a2:	4613      	mov	r3, r2
 801e0a4:	685a      	ldr	r2, [r3, #4]
 801e0a6:	b10a      	cbz	r2, 801e0ac <_free_r+0x54>
 801e0a8:	42a2      	cmp	r2, r4
 801e0aa:	d9fa      	bls.n	801e0a2 <_free_r+0x4a>
 801e0ac:	6819      	ldr	r1, [r3, #0]
 801e0ae:	1858      	adds	r0, r3, r1
 801e0b0:	42a0      	cmp	r0, r4
 801e0b2:	d10b      	bne.n	801e0cc <_free_r+0x74>
 801e0b4:	6820      	ldr	r0, [r4, #0]
 801e0b6:	4401      	add	r1, r0
 801e0b8:	1858      	adds	r0, r3, r1
 801e0ba:	4282      	cmp	r2, r0
 801e0bc:	6019      	str	r1, [r3, #0]
 801e0be:	d1dd      	bne.n	801e07c <_free_r+0x24>
 801e0c0:	6810      	ldr	r0, [r2, #0]
 801e0c2:	6852      	ldr	r2, [r2, #4]
 801e0c4:	605a      	str	r2, [r3, #4]
 801e0c6:	4401      	add	r1, r0
 801e0c8:	6019      	str	r1, [r3, #0]
 801e0ca:	e7d7      	b.n	801e07c <_free_r+0x24>
 801e0cc:	d902      	bls.n	801e0d4 <_free_r+0x7c>
 801e0ce:	230c      	movs	r3, #12
 801e0d0:	602b      	str	r3, [r5, #0]
 801e0d2:	e7d3      	b.n	801e07c <_free_r+0x24>
 801e0d4:	6820      	ldr	r0, [r4, #0]
 801e0d6:	1821      	adds	r1, r4, r0
 801e0d8:	428a      	cmp	r2, r1
 801e0da:	bf04      	itt	eq
 801e0dc:	6811      	ldreq	r1, [r2, #0]
 801e0de:	6852      	ldreq	r2, [r2, #4]
 801e0e0:	6062      	str	r2, [r4, #4]
 801e0e2:	bf04      	itt	eq
 801e0e4:	1809      	addeq	r1, r1, r0
 801e0e6:	6021      	streq	r1, [r4, #0]
 801e0e8:	605c      	str	r4, [r3, #4]
 801e0ea:	e7c7      	b.n	801e07c <_free_r+0x24>
 801e0ec:	bd38      	pop	{r3, r4, r5, pc}
 801e0ee:	bf00      	nop
 801e0f0:	2002b048 	.word	0x2002b048

0801e0f4 <_malloc_r>:
 801e0f4:	b570      	push	{r4, r5, r6, lr}
 801e0f6:	1ccd      	adds	r5, r1, #3
 801e0f8:	f025 0503 	bic.w	r5, r5, #3
 801e0fc:	3508      	adds	r5, #8
 801e0fe:	2d0c      	cmp	r5, #12
 801e100:	bf38      	it	cc
 801e102:	250c      	movcc	r5, #12
 801e104:	2d00      	cmp	r5, #0
 801e106:	4606      	mov	r6, r0
 801e108:	db01      	blt.n	801e10e <_malloc_r+0x1a>
 801e10a:	42a9      	cmp	r1, r5
 801e10c:	d903      	bls.n	801e116 <_malloc_r+0x22>
 801e10e:	230c      	movs	r3, #12
 801e110:	6033      	str	r3, [r6, #0]
 801e112:	2000      	movs	r0, #0
 801e114:	bd70      	pop	{r4, r5, r6, pc}
 801e116:	f000 f863 	bl	801e1e0 <__malloc_lock>
 801e11a:	4a23      	ldr	r2, [pc, #140]	; (801e1a8 <_malloc_r+0xb4>)
 801e11c:	6814      	ldr	r4, [r2, #0]
 801e11e:	4621      	mov	r1, r4
 801e120:	b991      	cbnz	r1, 801e148 <_malloc_r+0x54>
 801e122:	4c22      	ldr	r4, [pc, #136]	; (801e1ac <_malloc_r+0xb8>)
 801e124:	6823      	ldr	r3, [r4, #0]
 801e126:	b91b      	cbnz	r3, 801e130 <_malloc_r+0x3c>
 801e128:	4630      	mov	r0, r6
 801e12a:	f000 f841 	bl	801e1b0 <_sbrk_r>
 801e12e:	6020      	str	r0, [r4, #0]
 801e130:	4629      	mov	r1, r5
 801e132:	4630      	mov	r0, r6
 801e134:	f000 f83c 	bl	801e1b0 <_sbrk_r>
 801e138:	1c43      	adds	r3, r0, #1
 801e13a:	d126      	bne.n	801e18a <_malloc_r+0x96>
 801e13c:	230c      	movs	r3, #12
 801e13e:	6033      	str	r3, [r6, #0]
 801e140:	4630      	mov	r0, r6
 801e142:	f000 f84e 	bl	801e1e2 <__malloc_unlock>
 801e146:	e7e4      	b.n	801e112 <_malloc_r+0x1e>
 801e148:	680b      	ldr	r3, [r1, #0]
 801e14a:	1b5b      	subs	r3, r3, r5
 801e14c:	d41a      	bmi.n	801e184 <_malloc_r+0x90>
 801e14e:	2b0b      	cmp	r3, #11
 801e150:	d90f      	bls.n	801e172 <_malloc_r+0x7e>
 801e152:	600b      	str	r3, [r1, #0]
 801e154:	50cd      	str	r5, [r1, r3]
 801e156:	18cc      	adds	r4, r1, r3
 801e158:	4630      	mov	r0, r6
 801e15a:	f000 f842 	bl	801e1e2 <__malloc_unlock>
 801e15e:	f104 000b 	add.w	r0, r4, #11
 801e162:	1d23      	adds	r3, r4, #4
 801e164:	f020 0007 	bic.w	r0, r0, #7
 801e168:	1ac3      	subs	r3, r0, r3
 801e16a:	d01b      	beq.n	801e1a4 <_malloc_r+0xb0>
 801e16c:	425a      	negs	r2, r3
 801e16e:	50e2      	str	r2, [r4, r3]
 801e170:	bd70      	pop	{r4, r5, r6, pc}
 801e172:	428c      	cmp	r4, r1
 801e174:	bf0d      	iteet	eq
 801e176:	6863      	ldreq	r3, [r4, #4]
 801e178:	684b      	ldrne	r3, [r1, #4]
 801e17a:	6063      	strne	r3, [r4, #4]
 801e17c:	6013      	streq	r3, [r2, #0]
 801e17e:	bf18      	it	ne
 801e180:	460c      	movne	r4, r1
 801e182:	e7e9      	b.n	801e158 <_malloc_r+0x64>
 801e184:	460c      	mov	r4, r1
 801e186:	6849      	ldr	r1, [r1, #4]
 801e188:	e7ca      	b.n	801e120 <_malloc_r+0x2c>
 801e18a:	1cc4      	adds	r4, r0, #3
 801e18c:	f024 0403 	bic.w	r4, r4, #3
 801e190:	42a0      	cmp	r0, r4
 801e192:	d005      	beq.n	801e1a0 <_malloc_r+0xac>
 801e194:	1a21      	subs	r1, r4, r0
 801e196:	4630      	mov	r0, r6
 801e198:	f000 f80a 	bl	801e1b0 <_sbrk_r>
 801e19c:	3001      	adds	r0, #1
 801e19e:	d0cd      	beq.n	801e13c <_malloc_r+0x48>
 801e1a0:	6025      	str	r5, [r4, #0]
 801e1a2:	e7d9      	b.n	801e158 <_malloc_r+0x64>
 801e1a4:	bd70      	pop	{r4, r5, r6, pc}
 801e1a6:	bf00      	nop
 801e1a8:	2002b048 	.word	0x2002b048
 801e1ac:	2002b04c 	.word	0x2002b04c

0801e1b0 <_sbrk_r>:
 801e1b0:	b538      	push	{r3, r4, r5, lr}
 801e1b2:	4c06      	ldr	r4, [pc, #24]	; (801e1cc <_sbrk_r+0x1c>)
 801e1b4:	2300      	movs	r3, #0
 801e1b6:	4605      	mov	r5, r0
 801e1b8:	4608      	mov	r0, r1
 801e1ba:	6023      	str	r3, [r4, #0]
 801e1bc:	f000 f812 	bl	801e1e4 <_sbrk>
 801e1c0:	1c43      	adds	r3, r0, #1
 801e1c2:	d102      	bne.n	801e1ca <_sbrk_r+0x1a>
 801e1c4:	6823      	ldr	r3, [r4, #0]
 801e1c6:	b103      	cbz	r3, 801e1ca <_sbrk_r+0x1a>
 801e1c8:	602b      	str	r3, [r5, #0]
 801e1ca:	bd38      	pop	{r3, r4, r5, pc}
 801e1cc:	2002c144 	.word	0x2002c144

0801e1d0 <strcpy>:
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e1d6:	f803 2b01 	strb.w	r2, [r3], #1
 801e1da:	2a00      	cmp	r2, #0
 801e1dc:	d1f9      	bne.n	801e1d2 <strcpy+0x2>
 801e1de:	4770      	bx	lr

0801e1e0 <__malloc_lock>:
 801e1e0:	4770      	bx	lr

0801e1e2 <__malloc_unlock>:
 801e1e2:	4770      	bx	lr

0801e1e4 <_sbrk>:
 801e1e4:	4b04      	ldr	r3, [pc, #16]	; (801e1f8 <_sbrk+0x14>)
 801e1e6:	6819      	ldr	r1, [r3, #0]
 801e1e8:	4602      	mov	r2, r0
 801e1ea:	b909      	cbnz	r1, 801e1f0 <_sbrk+0xc>
 801e1ec:	4903      	ldr	r1, [pc, #12]	; (801e1fc <_sbrk+0x18>)
 801e1ee:	6019      	str	r1, [r3, #0]
 801e1f0:	6818      	ldr	r0, [r3, #0]
 801e1f2:	4402      	add	r2, r0
 801e1f4:	601a      	str	r2, [r3, #0]
 801e1f6:	4770      	bx	lr
 801e1f8:	2002b050 	.word	0x2002b050
 801e1fc:	2002c148 	.word	0x2002c148

0801e200 <_init>:
 801e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e202:	bf00      	nop
 801e204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e206:	bc08      	pop	{r3}
 801e208:	469e      	mov	lr, r3
 801e20a:	4770      	bx	lr

0801e20c <_fini>:
 801e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e20e:	bf00      	nop
 801e210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e212:	bc08      	pop	{r3}
 801e214:	469e      	mov	lr, r3
 801e216:	4770      	bx	lr
