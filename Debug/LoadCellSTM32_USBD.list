
LoadCellSTM32_USBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b6b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000077a4  0802b884  0802b884  0003b884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08033028  08033028  00043028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08033030  08033030  00043030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08033034  08033034  00043034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000644  20000000  08033038  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002c6e8  20000644  0803367c  00050644  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2002cd2c  0803367c  0005cd2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050644  2**0
                  CONTENTS, READONLY
 10 .debug_info   000acf22  00000000  00000000  00050672  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000096af  00000000  00000000  000fd594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002820  00000000  00000000  00106c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000024a8  00000000  00000000  00109468  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016012  00000000  00000000  0010b910  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fed7  00000000  00000000  00121922  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00114d91  00000000  00000000  001517f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  0026658a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b02c  00000000  00000000  00266688  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000006c  00000000  00000000  002716b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  00271720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000644 	.word	0x20000644
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b86c 	.word	0x0802b86c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000648 	.word	0x20000648
 800020c:	0802b86c 	.word	0x0802b86c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b97a 	b.w	8000e60 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	468c      	mov	ip, r1
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	9e08      	ldr	r6, [sp, #32]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d151      	bne.n	8000c38 <__udivmoddi4+0xb4>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d96d      	bls.n	8000c76 <__udivmoddi4+0xf2>
 8000b9a:	fab2 fe82 	clz	lr, r2
 8000b9e:	f1be 0f00 	cmp.w	lr, #0
 8000ba2:	d00b      	beq.n	8000bbc <__udivmoddi4+0x38>
 8000ba4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ba8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bc0:	0c25      	lsrs	r5, r4, #16
 8000bc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000bc6:	fa1f f987 	uxth.w	r9, r7
 8000bca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bd2:	fb08 f309 	mul.w	r3, r8, r9
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x6c>
 8000bda:	19ed      	adds	r5, r5, r7
 8000bdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000be0:	f080 8123 	bcs.w	8000e2a <__udivmoddi4+0x2a6>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	f240 8120 	bls.w	8000e2a <__udivmoddi4+0x2a6>
 8000bea:	f1a8 0802 	sub.w	r8, r8, #2
 8000bee:	443d      	add	r5, r7
 8000bf0:	1aed      	subs	r5, r5, r3
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c00:	fb00 f909 	mul.w	r9, r0, r9
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x98>
 8000c08:	19e4      	adds	r4, r4, r7
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 810a 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000c12:	45a1      	cmp	r9, r4
 8000c14:	f240 8107 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 0409 	sub.w	r4, r4, r9
 8000c20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d061      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6034      	str	r4, [r6, #0]
 8000c32:	6073      	str	r3, [r6, #4]
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0xc8>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d054      	beq.n	8000cea <__udivmoddi4+0x166>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f040 808e 	bne.w	8000d72 <__udivmoddi4+0x1ee>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xdc>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80fa 	bhi.w	8000e54 <__udivmoddi4+0x2d0>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb65 0503 	sbc.w	r5, r5, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	46ac      	mov	ip, r5
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d03f      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b912      	cbnz	r2, 8000c7e <__udivmoddi4+0xfa>
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c7e:	fab7 fe87 	clz	lr, r7
 8000c82:	f1be 0f00 	cmp.w	lr, #0
 8000c86:	d134      	bne.n	8000cf2 <__udivmoddi4+0x16e>
 8000c88:	1beb      	subs	r3, r5, r7
 8000c8a:	0c3a      	lsrs	r2, r7, #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	2101      	movs	r1, #1
 8000c92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c96:	0c25      	lsrs	r5, r4, #16
 8000c98:	fb02 3318 	mls	r3, r2, r8, r3
 8000c9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca0:	fb0c f308 	mul.w	r3, ip, r8
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x134>
 8000ca8:	19ed      	adds	r5, r5, r7
 8000caa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x132>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	f200 80d1 	bhi.w	8000e58 <__udivmoddi4+0x2d4>
 8000cb6:	4680      	mov	r8, r0
 8000cb8:	1aed      	subs	r5, r5, r3
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000cc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x15c>
 8000cd0:	19e4      	adds	r4, r4, r7
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x15a>
 8000cd8:	45a4      	cmp	ip, r4
 8000cda:	f200 80b8 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 040c 	sub.w	r4, r4, ip
 8000ce4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce8:	e79d      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000cea:	4631      	mov	r1, r6
 8000cec:	4630      	mov	r0, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1ce 0420 	rsb	r4, lr, #32
 8000cf6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000d02:	0c3a      	lsrs	r2, r7, #16
 8000d04:	fa25 f404 	lsr.w	r4, r5, r4
 8000d08:	ea48 0803 	orr.w	r8, r8, r3
 8000d0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d14:	fb02 4411 	mls	r4, r2, r1, r4
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d20:	fb01 f30c 	mul.w	r3, r1, ip
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x1bc>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d32:	f080 808a 	bcs.w	8000e4a <__udivmoddi4+0x2c6>
 8000d36:	42ab      	cmp	r3, r5
 8000d38:	f240 8087 	bls.w	8000e4a <__udivmoddi4+0x2c6>
 8000d3c:	3902      	subs	r1, #2
 8000d3e:	443d      	add	r5, r7
 8000d40:	1aeb      	subs	r3, r5, r3
 8000d42:	fa1f f588 	uxth.w	r5, r8
 8000d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d52:	fb00 f30c 	mul.w	r3, r0, ip
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x1e6>
 8000d5a:	19ed      	adds	r5, r5, r7
 8000d5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d60:	d26f      	bcs.n	8000e42 <__udivmoddi4+0x2be>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d96d      	bls.n	8000e42 <__udivmoddi4+0x2be>
 8000d66:	3802      	subs	r0, #2
 8000d68:	443d      	add	r5, r7
 8000d6a:	1aeb      	subs	r3, r5, r3
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	e78f      	b.n	8000c92 <__udivmoddi4+0x10e>
 8000d72:	f1c1 0720 	rsb	r7, r1, #32
 8000d76:	fa22 f807 	lsr.w	r8, r2, r7
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d80:	ea48 0303 	orr.w	r3, r8, r3
 8000d84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d8c:	40fd      	lsrs	r5, r7
 8000d8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d9e:	fa1f f883 	uxth.w	r8, r3
 8000da2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da6:	fb09 f408 	mul.w	r4, r9, r8
 8000daa:	42ac      	cmp	r4, r5
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x244>
 8000db6:	18ed      	adds	r5, r5, r3
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	d243      	bcs.n	8000e46 <__udivmoddi4+0x2c2>
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	d941      	bls.n	8000e46 <__udivmoddi4+0x2c2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	441d      	add	r5, r3
 8000dc8:	1b2d      	subs	r5, r5, r4
 8000dca:	fa1f fe8e 	uxth.w	lr, lr
 8000dce:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dd2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dda:	fb00 f808 	mul.w	r8, r0, r8
 8000dde:	45a0      	cmp	r8, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x26e>
 8000de2:	18e4      	adds	r4, r4, r3
 8000de4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de8:	d229      	bcs.n	8000e3e <__udivmoddi4+0x2ba>
 8000dea:	45a0      	cmp	r8, r4
 8000dec:	d927      	bls.n	8000e3e <__udivmoddi4+0x2ba>
 8000dee:	3802      	subs	r0, #2
 8000df0:	441c      	add	r4, r3
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	eba4 0408 	sub.w	r4, r4, r8
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	464d      	mov	r5, r9
 8000e04:	d315      	bcc.n	8000e32 <__udivmoddi4+0x2ae>
 8000e06:	d012      	beq.n	8000e2e <__udivmoddi4+0x2aa>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x29c>
 8000e0a:	ebba 030e 	subs.w	r3, sl, lr
 8000e0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	6037      	str	r7, [r6, #0]
 8000e1e:	6074      	str	r4, [r6, #4]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	4618      	mov	r0, r3
 8000e28:	e6f8      	b.n	8000c1c <__udivmoddi4+0x98>
 8000e2a:	4690      	mov	r8, r2
 8000e2c:	e6e0      	b.n	8000bf0 <__udivmoddi4+0x6c>
 8000e2e:	45c2      	cmp	sl, r8
 8000e30:	d2ea      	bcs.n	8000e08 <__udivmoddi4+0x284>
 8000e32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e36:	eb69 0503 	sbc.w	r5, r9, r3
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e4      	b.n	8000e08 <__udivmoddi4+0x284>
 8000e3e:	4628      	mov	r0, r5
 8000e40:	e7d7      	b.n	8000df2 <__udivmoddi4+0x26e>
 8000e42:	4640      	mov	r0, r8
 8000e44:	e791      	b.n	8000d6a <__udivmoddi4+0x1e6>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e7be      	b.n	8000dc8 <__udivmoddi4+0x244>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	e778      	b.n	8000d40 <__udivmoddi4+0x1bc>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	e745      	b.n	8000ce0 <__udivmoddi4+0x15c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xe6>
 8000e58:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5c:	443d      	add	r5, r7
 8000e5e:	e72b      	b.n	8000cb8 <__udivmoddi4+0x134>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e6a:	2228      	movs	r2, #40	; 0x28
 8000e6c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e70:	2209      	movs	r2, #9
 8000e72:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e76:	2235      	movs	r2, #53	; 0x35
 8000e78:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e7c:	220b      	movs	r2, #11
 8000e7e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e82:	f240 121b 	movw	r2, #283	; 0x11b
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e8a:	f240 2215 	movw	r2, #533	; 0x215
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e92:	f240 121d 	movw	r2, #285	; 0x11d
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e9a:	f240 2235 	movw	r2, #565	; 0x235
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ea4:	f000 fcae 	bl	8001804 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eaa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000eae:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eb2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <BSP_LCD_Init+0xd0>)
 8000eec:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ef0:	f002 fb9b 	bl	800362a <HAL_LTDC_GetState>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000efa:	2100      	movs	r1, #0
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000efe:	f000 fba7 	bl	8001650 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000f04:	f002 f880 	bl	8003008 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <BSP_LCD_Init+0xd4>)
 8000f10:	f002 f860 	bl	8002fd4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2108      	movs	r1, #8
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <BSP_LCD_Init+0xd8>)
 8000f1a:	f002 f85b 	bl	8002fd4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000f1e:	f011 f9ef 	bl	8012300 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <BSP_LCD_Init+0xdc>)
 8000f24:	f000 f8d8 	bl	80010d8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2002b30c 	.word	0x2002b30c
 8000f34:	40016800 	.word	0x40016800
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40022800 	.word	0x40022800
 8000f40:	20000000 	.word	0x20000000

08000f44 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <BSP_LCD_GetXSize+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <BSP_LCD_GetXSize+0x24>)
 8000f4e:	2134      	movs	r1, #52	; 0x34
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	3360      	adds	r3, #96	; 0x60
 8000f58:	681b      	ldr	r3, [r3, #0]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	200006a0 	.word	0x200006a0
 8000f68:	2002b30c 	.word	0x2002b30c

08000f6c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <BSP_LCD_GetYSize+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <BSP_LCD_GetYSize+0x24>)
 8000f76:	2134      	movs	r1, #52	; 0x34
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3364      	adds	r3, #100	; 0x64
 8000f80:	681b      	ldr	r3, [r3, #0]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	200006a0 	.word	0x200006a0
 8000f90:	2002b30c 	.word	0x2002b30c

08000f94 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	; 0x40
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000fa4:	f7ff ffce 	bl	8000f44 <BSP_LCD_GetXSize>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000fb0:	f7ff ffdc 	bl	8000f6c <BSP_LCD_GetYSize>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000fc0:	23ff      	movs	r3, #255	; 0xff
 8000fc2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000fe4:	f7ff ffae 	bl	8000f44 <BSP_LCD_GetXSize>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000fec:	f7ff ffbe 	bl	8000f6c <BSP_LCD_GetYSize>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000ffe:	f002 f8f7 	bl	80031f0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	4911      	ldr	r1, [pc, #68]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	490c      	ldr	r1, [pc, #48]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3308      	adds	r3, #8
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <BSP_LCD_LayerDefaultInit+0xbc>)
 800102a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	4907      	ldr	r1, [pc, #28]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3740      	adds	r7, #64	; 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2002b30c 	.word	0x2002b30c
 800104c:	200006a4 	.word	0x200006a4
 8001050:	20000000 	.word	0x20000000

08001054 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <BSP_LCD_SelectLayer+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
} 
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200006a0 	.word	0x200006a0

08001074 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <BSP_LCD_SetTextColor+0x28>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <BSP_LCD_SetTextColor+0x2c>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	200006a0 	.word	0x200006a0
 80010a0:	200006a4 	.word	0x200006a4

080010a4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <BSP_LCD_SetBackColor+0x2c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4908      	ldr	r1, [pc, #32]	; (80010d4 <BSP_LCD_SetBackColor+0x30>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200006a0 	.word	0x200006a0
 80010d4:	200006a4 	.word	0x200006a4

080010d8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <BSP_LCD_SetFont+0x2c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <BSP_LCD_SetFont+0x30>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3308      	adds	r3, #8
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200006a0 	.word	0x200006a0
 8001108:	200006a4 	.word	0x200006a4

0800110c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <BSP_LCD_GetFont+0x24>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <BSP_LCD_GetFont+0x28>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3308      	adds	r3, #8
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200006a0 	.word	0x200006a0
 8001134:	200006a4 	.word	0x200006a4

08001138 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <BSP_LCD_Clear+0x48>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <BSP_LCD_Clear+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <BSP_LCD_Clear+0x4c>)
 800114a:	2134      	movs	r1, #52	; 0x34
 800114c:	fb01 f303 	mul.w	r3, r1, r3
 8001150:	4413      	add	r3, r2
 8001152:	335c      	adds	r3, #92	; 0x5c
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	461d      	mov	r5, r3
 8001158:	f7ff fef4 	bl	8000f44 <BSP_LCD_GetXSize>
 800115c:	4606      	mov	r6, r0
 800115e:	f7ff ff05 	bl	8000f6c <BSP_LCD_GetYSize>
 8001162:	4602      	mov	r2, r0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2300      	movs	r3, #0
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	4632      	mov	r2, r6
 8001170:	4629      	mov	r1, r5
 8001172:	4620      	mov	r0, r4
 8001174:	f000 fc1a 	bl	80019ac <LL_FillBuffer>
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	200006a0 	.word	0x200006a0
 8001184:	2002b30c 	.word	0x2002b30c

08001188 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	492d      	ldr	r1, [pc, #180]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	4827      	ldr	r0, [pc, #156]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4403      	add	r3, r0
 80011b8:	3304      	adds	r3, #4
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4403      	add	r3, r0
 80011c8:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	491f      	ldr	r1, [pc, #124]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3308      	adds	r3, #8
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	88da      	ldrh	r2, [r3, #6]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	fb12 f303 	smulbb	r3, r2, r3
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	f7ff feab 	bl	8000f44 <BSP_LCD_GetXSize>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b298      	uxth	r0, r3
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4915      	ldr	r1, [pc, #84]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3308      	adds	r3, #8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	4602      	mov	r2, r0
 800120a:	4621      	mov	r1, r4
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f987 	bl	8001520 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff1b 	bl	8001074 <BSP_LCD_SetTextColor>
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	200006a0 	.word	0x200006a0
 800124c:	200006a4 	.word	0x200006a4

08001250 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	491b      	ldr	r1, [pc, #108]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4c14      	ldr	r4, [pc, #80]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4423      	add	r3, r4
 800128e:	3308      	adds	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001294:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4c0d      	ldr	r4, [pc, #52]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4423      	add	r3, r4
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	3307      	adds	r3, #7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da00      	bge.n	80012b6 <BSP_LCD_DisplayChar+0x66>
 80012b4:	3307      	adds	r3, #7
 80012b6:	10db      	asrs	r3, r3, #3
 80012b8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012bc:	18ca      	adds	r2, r1, r3
 80012be:	88b9      	ldrh	r1, [r7, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 faba 	bl	800183c <DrawChar>
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	200006a0 	.word	0x200006a0
 80012d4:	200006a4 	.word	0x200006a4

080012d8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	81fb      	strh	r3, [r7, #14]
 80012e6:	460b      	mov	r3, r1
 80012e8:	81bb      	strh	r3, [r7, #12]
 80012ea:	4613      	mov	r3, r2
 80012ec:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80012ee:	2301      	movs	r3, #1
 80012f0:	83fb      	strh	r3, [r7, #30]
 80012f2:	2300      	movs	r3, #0
 80012f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001302:	e002      	b.n	800130a <BSP_LCD_DisplayStringAt+0x32>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3301      	adds	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	617a      	str	r2, [r7, #20]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f6      	bne.n	8001304 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001316:	f7ff fe15 	bl	8000f44 <BSP_LCD_GetXSize>
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	494f      	ldr	r1, [pc, #316]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3308      	adds	r3, #8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	fbb0 f3f3 	udiv	r3, r0, r3
 8001334:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d01c      	beq.n	8001376 <BSP_LCD_DisplayStringAt+0x9e>
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <BSP_LCD_DisplayStringAt+0x98>
 8001340:	2b01      	cmp	r3, #1
 8001342:	d12e      	bne.n	80013a2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad1      	subs	r1, r2, r3
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4843      	ldr	r0, [pc, #268]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	fb03 f301 	mul.w	r3, r3, r1
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	4413      	add	r3, r2
 800136c:	83fb      	strh	r3, [r7, #30]
      break;
 800136e:	e01b      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	83fb      	strh	r3, [r7, #30]
      break;
 8001374:	e018      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b299      	uxth	r1, r3
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4836      	ldr	r0, [pc, #216]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4403      	add	r3, r0
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	fb11 f303 	smulbb	r3, r1, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	83fb      	strh	r3, [r7, #30]
      break;
 80013a0:	e002      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	83fb      	strh	r3, [r7, #30]
      break;
 80013a6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80013a8:	8bfb      	ldrh	r3, [r7, #30]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <BSP_LCD_DisplayStringAt+0xde>
 80013ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da1d      	bge.n	80013f2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013ba:	e01a      	b.n	80013f2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	89b9      	ldrh	r1, [r7, #12]
 80013c2:	8bfb      	ldrh	r3, [r7, #30]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff43 	bl	8001250 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4923      	ldr	r1, [pc, #140]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3308      	adds	r3, #8
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	889a      	ldrh	r2, [r3, #4]
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	4413      	add	r3, r2
 80013e4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
    i++;
 80013ec:	8bbb      	ldrh	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2dc      	uxtb	r4, r3
 8001400:	f7ff fda0 	bl	8000f44 <BSP_LCD_GetXSize>
 8001404:	4605      	mov	r5, r0
 8001406:	8bb9      	ldrh	r1, [r7, #28]
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4403      	add	r3, r0
 8001418:	3308      	adds	r3, #8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	fb03 f301 	mul.w	r3, r3, r1
 8001422:	1aeb      	subs	r3, r5, r3
 8001424:	b299      	uxth	r1, r3
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4403      	add	r3, r0
 8001436:	3308      	adds	r3, #8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	4299      	cmp	r1, r3
 800143e:	bf2c      	ite	cs
 8001440:	2301      	movcs	r3, #1
 8001442:	2300      	movcc	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4023      	ands	r3, r4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1b6      	bne.n	80013bc <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	200006a0 	.word	0x200006a0
 800145c:	200006a4 	.word	0x200006a4

08001460 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800146c:	f7ff fe4e 	bl	800110c <BSP_LCD_GetFont>
 8001470:	4603      	mov	r3, r0
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	fb12 f303 	smulbb	r3, r2, r3
 800147a:	b299      	uxth	r1, r3
 800147c:	2303      	movs	r3, #3
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff ff29 	bl	80012d8 <BSP_LCD_DisplayStringAt>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	460b      	mov	r3, r1
 800149e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014a6:	2134      	movs	r1, #52	; 0x34
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3348      	adds	r3, #72	; 0x48
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d116      	bne.n	80014e4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014bc:	2134      	movs	r1, #52	; 0x34
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	335c      	adds	r3, #92	; 0x5c
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	88bd      	ldrh	r5, [r7, #4]
 80014ca:	f7ff fd3b 	bl	8000f44 <BSP_LCD_GetXSize>
 80014ce:	4603      	mov	r3, r0
 80014d0:	fb03 f205 	mul.w	r2, r3, r5
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4423      	add	r3, r4
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b292      	uxth	r2, r2
 80014e0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80014e2:	e015      	b.n	8001510 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014ea:	2134      	movs	r1, #52	; 0x34
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	335c      	adds	r3, #92	; 0x5c
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	88bd      	ldrh	r5, [r7, #4]
 80014f8:	f7ff fd24 	bl	8000f44 <BSP_LCD_GetXSize>
 80014fc:	4603      	mov	r3, r0
 80014fe:	fb03 f205 	mul.w	r2, r3, r5
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4423      	add	r3, r4
 800150a:	461a      	mov	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bdb0      	pop	{r4, r5, r7, pc}
 8001518:	200006a0 	.word	0x200006a0
 800151c:	2002b30c 	.word	0x2002b30c

08001520 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af02      	add	r7, sp, #8
 8001528:	4604      	mov	r4, r0
 800152a:	4608      	mov	r0, r1
 800152c:	4611      	mov	r1, r2
 800152e:	461a      	mov	r2, r3
 8001530:	4623      	mov	r3, r4
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	4603      	mov	r3, r0
 8001536:	80bb      	strh	r3, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4930      	ldr	r1, [pc, #192]	; (800160c <BSP_LCD_FillRect+0xec>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd8c 	bl	8001074 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 8001562:	2134      	movs	r1, #52	; 0x34
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3348      	adds	r3, #72	; 0x48
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d114      	bne.n	800159c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 8001578:	2134      	movs	r1, #52	; 0x34
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	335c      	adds	r3, #92	; 0x5c
 8001582:	681c      	ldr	r4, [r3, #0]
 8001584:	f7ff fcde 	bl	8000f44 <BSP_LCD_GetXSize>
 8001588:	4602      	mov	r2, r0
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	fb03 f202 	mul.w	r2, r3, r2
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4423      	add	r3, r4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e013      	b.n	80015c4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 80015a2:	2134      	movs	r1, #52	; 0x34
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	335c      	adds	r3, #92	; 0x5c
 80015ac:	681c      	ldr	r4, [r3, #0]
 80015ae:	f7ff fcc9 	bl	8000f44 <BSP_LCD_GetXSize>
 80015b2:	4602      	mov	r2, r0
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4423      	add	r3, r4
 80015c2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 80015c6:	681c      	ldr	r4, [r3, #0]
 80015c8:	68fd      	ldr	r5, [r7, #12]
 80015ca:	887e      	ldrh	r6, [r7, #2]
 80015cc:	f8b7 8000 	ldrh.w	r8, [r7]
 80015d0:	f7ff fcb8 	bl	8000f44 <BSP_LCD_GetXSize>
 80015d4:	4602      	mov	r2, r0
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	1ad1      	subs	r1, r2, r3
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <BSP_LCD_FillRect+0xec>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4403      	add	r3, r0
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9100      	str	r1, [sp, #0]
 80015f0:	4643      	mov	r3, r8
 80015f2:	4632      	mov	r2, r6
 80015f4:	4629      	mov	r1, r5
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 f9d8 	bl	80019ac <LL_FillBuffer>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001606:	bf00      	nop
 8001608:	200006a0 	.word	0x200006a0
 800160c:	200006a4 	.word	0x200006a4
 8001610:	2002b30c 	.word	0x2002b30c

08001614 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <BSP_LCD_DisplayOn+0x30>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <BSP_LCD_DisplayOn+0x30>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	6992      	ldr	r2, [r2, #24]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <BSP_LCD_DisplayOn+0x34>)
 8001630:	f001 fcd0 	bl	8002fd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <BSP_LCD_DisplayOn+0x38>)
 800163a:	f001 fccb 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2002b30c 	.word	0x2002b30c
 8001648:	40022000 	.word	0x40022000
 800164c:	40022800 	.word	0x40022800

08001650 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800165a:	4a64      	ldr	r2, [pc, #400]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b61      	ldr	r3, [pc, #388]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001670:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001672:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b55      	ldr	r3, [pc, #340]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a2:	4a52      	ldr	r2, [pc, #328]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016ea:	4a40      	ldr	r2, [pc, #256]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001732:	2310      	movs	r3, #16
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800173e:	2302      	movs	r3, #2
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001742:	230e      	movs	r3, #14
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	4828      	ldr	r0, [pc, #160]	; (80017f0 <BSP_LCD_MspInit+0x1a0>)
 800174e:	f001 f98b 	bl	8002a68 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800175c:	2309      	movs	r3, #9
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <BSP_LCD_MspInit+0x1a4>)
 8001768:	f001 f97e 	bl	8002a68 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800176c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001776:	230e      	movs	r3, #14
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <BSP_LCD_MspInit+0x1a8>)
 8001782:	f001 f971 	bl	8002a68 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001786:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001790:	230e      	movs	r3, #14
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001798:	4619      	mov	r1, r3
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <BSP_LCD_MspInit+0x1ac>)
 800179c:	f001 f964 	bl	8002a68 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80017a0:	23f7      	movs	r3, #247	; 0xf7
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80017a8:	230e      	movs	r3, #14
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <BSP_LCD_MspInit+0x1b0>)
 80017b4:	f001 f958 	bl	8002a68 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <BSP_LCD_MspInit+0x1a8>)
 80017ca:	f001 f94d 	bl	8002a68 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80017ce:	2308      	movs	r3, #8
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <BSP_LCD_MspInit+0x1b0>)
 80017de:	f001 f943 	bl	8002a68 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3740      	adds	r7, #64	; 0x40
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40022400 	.word	0x40022400
 8001800:	40022800 	.word	0x40022800

08001804 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001810:	2208      	movs	r2, #8
 8001812:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001816:	22c0      	movs	r2, #192	; 0xc0
 8001818:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 800181c:	2205      	movs	r2, #5
 800181e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 800182a:	f003 ff19 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200006bc 	.word	0x200006bc

0800183c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	460b      	mov	r3, r1
 800184a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <DrawChar+0x168>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4953      	ldr	r1, [pc, #332]	; (80019a8 <DrawChar+0x16c>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3308      	adds	r3, #8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	88db      	ldrh	r3, [r3, #6]
 800186a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <DrawChar+0x168>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <DrawChar+0x16c>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3308      	adds	r3, #8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001884:	8a3b      	ldrh	r3, [r7, #16]
 8001886:	3307      	adds	r3, #7
 8001888:	2b00      	cmp	r3, #0
 800188a:	da00      	bge.n	800188e <DrawChar+0x52>
 800188c:	3307      	adds	r3, #7
 800188e:	10db      	asrs	r3, r3, #3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	8a3b      	ldrh	r3, [r7, #16]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e076      	b.n	8001992 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
 80018a6:	3307      	adds	r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da00      	bge.n	80018ae <DrawChar+0x72>
 80018ac:	3307      	adds	r3, #7
 80018ae:	10db      	asrs	r3, r3, #3
 80018b0:	461a      	mov	r2, r3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80018be:	8a3b      	ldrh	r3, [r7, #16]
 80018c0:	3307      	adds	r3, #7
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <DrawChar+0x8c>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d002      	beq.n	80018d4 <DrawChar+0x98>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d004      	beq.n	80018dc <DrawChar+0xa0>
 80018d2:	e00c      	b.n	80018ee <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	617b      	str	r3, [r7, #20]
      break;
 80018da:	e016      	b.n	800190a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	3201      	adds	r2, #1
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
      break;
 80018ec:	e00d      	b.n	800190a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4313      	orrs	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	3202      	adds	r2, #2
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
      break;
 8001908:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e036      	b.n	800197e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001910:	8a3a      	ldrh	r2, [r7, #16]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad2      	subs	r2, r2, r3
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4413      	add	r3, r2
 800191a:	3b01      	subs	r3, #1
 800191c:	2201      	movs	r2, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	461a      	mov	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4413      	add	r3, r2
 8001934:	b298      	uxth	r0, r3
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <DrawChar+0x168>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <DrawChar+0x16c>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff fda0 	bl	8001490 <BSP_LCD_DrawPixel>
 8001950:	e012      	b.n	8001978 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	b29a      	uxth	r2, r3
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4413      	add	r3, r2
 800195a:	b298      	uxth	r0, r3
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <DrawChar+0x168>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4911      	ldr	r1, [pc, #68]	; (80019a8 <DrawChar+0x16c>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3304      	adds	r3, #4
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff fd8c 	bl	8001490 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	3301      	adds	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	8a3a      	ldrh	r2, [r7, #16]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	429a      	cmp	r2, r3
 8001984:	d8c4      	bhi.n	8001910 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	3301      	adds	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	8a7a      	ldrh	r2, [r7, #18]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	429a      	cmp	r2, r3
 8001998:	d884      	bhi.n	80018a4 <DrawChar+0x68>
  }
}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200006a0 	.word	0x200006a0
 80019a8:	200006a4 	.word	0x200006a4

080019ac <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <LL_FillBuffer+0x88>)
 80019bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019c0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <LL_FillBuffer+0x8c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <LL_FillBuffer+0x90>)
 80019c8:	2134      	movs	r1, #52	; 0x34
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3348      	adds	r3, #72	; 0x48
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d103      	bne.n	80019e0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <LL_FillBuffer+0x88>)
 80019da:	2202      	movs	r2, #2
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	e002      	b.n	80019e6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <LL_FillBuffer+0x88>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <LL_FillBuffer+0x88>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <LL_FillBuffer+0x88>)
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <LL_FillBuffer+0x94>)
 80019f0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80019f2:	4810      	ldr	r0, [pc, #64]	; (8001a34 <LL_FillBuffer+0x88>)
 80019f4:	f000 fda0 	bl	8002538 <HAL_DMA2D_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a02:	f000 fef7 	bl	80027f4 <HAL_DMA2D_ConfigLayer>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69f9      	ldr	r1, [r7, #28]
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a18:	f000 fdd8 	bl	80025cc <HAL_DMA2D_Start>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001a22:	210a      	movs	r1, #10
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a26:	f000 fdfc 	bl	8002622 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000660 	.word	0x20000660
 8001a38:	200006a0 	.word	0x200006a0
 8001a3c:	2002b30c 	.word	0x2002b30c
 8001a40:	4002b000 	.word	0x4002b000

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 fc39 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f013 f8ca 	bl	8014be8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f012 ffca 	bl	80149ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000010 	.word	0x20000010
 8001a84:	2002b3b4 	.word	0x2002b3b4

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2002b3b4 	.word	0x2002b3b4

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_Delay+0x40>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3f7      	bcc.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000010 	.word	0x20000010

08001ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e031      	b.n	8001b5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f012 ff9d 	bl	8014a50 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_ADC_Init+0x84>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fa02 	bl	8001f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	ffffeefd 	.word	0xffffeefd

08001b6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Start+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e085      	b.n	8001c92 <HAL_ADC_Start+0x126>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d018      	beq.n	8001bce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	6892      	ldr	r2, [r2, #8]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <HAL_ADC_Start+0x134>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a3c      	ldr	r2, [pc, #240]	; (8001ca4 <HAL_ADC_Start+0x138>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9a      	lsrs	r2, r3, #18
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d059      	beq.n	8001c90 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_ADC_Start+0x13c>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f023 0206 	bic.w	r2, r3, #6
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c3a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_ADC_Start+0x140>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11c      	bne.n	8001c90 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	6892      	ldr	r2, [r2, #8]
 8001c60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	e013      	b.n	8001c90 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_ADC_Start+0x144>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10e      	bne.n	8001c90 <HAL_ADC_Start+0x124>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	6892      	ldr	r2, [r2, #8]
 8001c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200000c4 	.word	0x200000c4
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	fffff8fe 	.word	0xfffff8fe
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	40012000 	.word	0x40012000

08001cb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1c>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e117      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x24c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d936      	bls.n	8001d6a <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4403      	add	r3, r0
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	2007      	movs	r0, #7
 8001d18:	fa00 f303 	lsl.w	r3, r0, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	400b      	ands	r3, r1
 8001d20:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a80      	ldr	r2, [pc, #512]	; (8001f28 <HAL_ADC_ConfigChannel+0x258>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d10a      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	68d1      	ldr	r1, [r2, #12]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6892      	ldr	r2, [r2, #8]
 8001d3a:	0612      	lsls	r2, r2, #24
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e037      	b.n	8001db2 <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6898      	ldr	r0, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461c      	mov	r4, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4423      	add	r3, r4
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	fa00 f303 	lsl.w	r3, r0, r3
 8001d64:	430b      	orrs	r3, r1
 8001d66:	60d3      	str	r3, [r2, #12]
 8001d68:	e023      	b.n	8001db2 <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6919      	ldr	r1, [r3, #16]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4403      	add	r3, r0
 8001d82:	2007      	movs	r0, #7
 8001d84:	fa00 f303 	lsl.w	r3, r0, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6919      	ldr	r1, [r3, #16]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461c      	mov	r4, r3
 8001da4:	4623      	mov	r3, r4
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4423      	add	r3, r4
 8001daa:	fa00 f303 	lsl.w	r3, r0, r3
 8001dae:	430b      	orrs	r3, r1
 8001db0:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d824      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b05      	subs	r3, #5
 8001dd0:	221f      	movs	r2, #31
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4003      	ands	r3, r0
 8001dda:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461c      	mov	r4, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b05      	subs	r3, #5
 8001dfa:	fa04 f303 	lsl.w	r3, r4, r3
 8001dfe:	4303      	orrs	r3, r0
 8001e00:	634b      	str	r3, [r1, #52]	; 0x34
 8001e02:	e04c      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d824      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b23      	subs	r3, #35	; 0x23
 8001e22:	221f      	movs	r2, #31
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461c      	mov	r4, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b23      	subs	r3, #35	; 0x23
 8001e4c:	fa04 f303 	lsl.w	r3, r4, r3
 8001e50:	4303      	orrs	r3, r0
 8001e52:	630b      	str	r3, [r1, #48]	; 0x30
 8001e54:	e023      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b41      	subs	r3, #65	; 0x41
 8001e6c:	221f      	movs	r2, #31
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	4003      	ands	r3, r0
 8001e76:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461c      	mov	r4, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b41      	subs	r3, #65	; 0x41
 8001e96:	fa04 f303 	lsl.w	r3, r4, r3
 8001e9a:	4303      	orrs	r3, r0
 8001e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <HAL_ADC_ConfigChannel+0x25c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1ec>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_ADC_ConfigChannel+0x260>)
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_ADC_ConfigChannel+0x260>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eba:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_ADC_ConfigChannel+0x25c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d125      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x242>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_ADC_ConfigChannel+0x258>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x208>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d11c      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_ADC_ConfigChannel+0x260>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_ADC_ConfigChannel+0x260>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee2:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_ADC_ConfigChannel+0x258>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d111      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_ADC_ConfigChannel+0x264>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_ADC_ConfigChannel+0x268>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9a      	lsrs	r2, r3, #18
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc90      	pop	{r4, r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	10000012 	.word	0x10000012
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	40012300 	.word	0x40012300
 8001f34:	200000c4 	.word	0x200000c4
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f44:	4a77      	ldr	r2, [pc, #476]	; (8002124 <ADC_Init+0x1e8>)
 8001f46:	4b77      	ldr	r3, [pc, #476]	; (8002124 <ADC_Init+0x1e8>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f50:	4974      	ldr	r1, [pc, #464]	; (8002124 <ADC_Init+0x1e8>)
 8001f52:	4b74      	ldr	r3, [pc, #464]	; (8002124 <ADC_Init+0x1e8>)
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	6852      	ldr	r2, [r2, #4]
 8001f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	6851      	ldr	r1, [r2, #4]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6912      	ldr	r2, [r2, #16]
 8001f7c:	0212      	lsls	r2, r2, #8
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	6852      	ldr	r2, [r2, #4]
 8001f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6851      	ldr	r1, [r2, #4]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6892      	ldr	r2, [r2, #8]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	6891      	ldr	r1, [r2, #8]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	4a57      	ldr	r2, [pc, #348]	; (8002128 <ADC_Init+0x1ec>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6892      	ldr	r2, [r2, #8]
 8001fda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	6891      	ldr	r1, [r2, #8]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	6892      	ldr	r2, [r2, #8]
 8001ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	6891      	ldr	r1, [r2, #8]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	e00f      	b.n	8002036 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	6892      	ldr	r2, [r2, #8]
 8002030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	f022 0202 	bic.w	r2, r2, #2
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	6891      	ldr	r1, [r2, #8]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6992      	ldr	r2, [r2, #24]
 8002054:	0052      	lsls	r2, r2, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01b      	beq.n	800209a <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6852      	ldr	r2, [r2, #4]
 800206c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002070:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002080:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	6851      	ldr	r1, [r2, #4]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002090:	3a01      	subs	r2, #1
 8002092:	0352      	lsls	r2, r2, #13
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	e007      	b.n	80020aa <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	6852      	ldr	r2, [r2, #4]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020b4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	69d2      	ldr	r2, [r2, #28]
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0512      	lsls	r2, r2, #20
 80020cc:	430a      	orrs	r2, r1
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	6891      	ldr	r1, [r2, #8]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ee:	0252      	lsls	r2, r2, #9
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	6892      	ldr	r2, [r2, #8]
 80020fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	6891      	ldr	r1, [r2, #8]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6952      	ldr	r2, [r2, #20]
 8002112:	0292      	lsls	r2, r2, #10
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40012300 	.word	0x40012300
 8002128:	0f000001 	.word	0x0f000001

0800212c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <NVIC_SetPriorityGrouping+0x40>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <NVIC_SetPriorityGrouping+0x44>)
 8002156:	4313      	orrs	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <NVIC_SetPriorityGrouping+0x40>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	05fa0000 	.word	0x05fa0000

08002174 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800219a:	4909      	ldr	r1, [pc, #36]	; (80021c0 <NVIC_EnableIRQ+0x30>)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da0b      	bge.n	80021f0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <NVIC_SetPriority+0x4c>)
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	3b04      	subs	r3, #4
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ee:	e009      	b.n	8002204 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	4908      	ldr	r1, [pc, #32]	; (8002214 <NVIC_SetPriority+0x50>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00
 8002214:	e000e100 	.word	0xe000e100

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	2201      	movs	r2, #1
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	401a      	ands	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225e:	2101      	movs	r1, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	1e59      	subs	r1, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff2f 	bl	800212c <NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff44 	bl	8002174 <NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff90 	bl	8002218 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5f 	bl	80021c4 <NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff37 	bl	8002190 <NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffa2 	bl	800227c <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d106      	bne.n	8002360 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800235e:	e005      	b.n	800236c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002360:	4a05      	ldr	r2, [pc, #20]	; (8002378 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e054      	b.n	8002438 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7f5b      	ldrb	r3, [r3, #29]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f012 fb90 	bl	8014ac4 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_CRC_Init+0xc4>)
 80023b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6892      	ldr	r2, [r2, #8]
 80023c4:	f022 0218 	bic.w	r2, r2, #24
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e00c      	b.n	80023e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f834 	bl	8002444 <HAL_CRCEx_Polynomial_Set>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e028      	b.n	8002438 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	795b      	ldrb	r3, [r3, #5]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	e004      	b.n	8002404 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6912      	ldr	r2, [r2, #16]
 8002402:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	6892      	ldr	r2, [r2, #8]
 800240e:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6952      	ldr	r2, [r2, #20]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	6892      	ldr	r2, [r2, #8]
 8002424:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6992      	ldr	r2, [r2, #24]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	04c11db7 	.word	0x04c11db7

08002444 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002450:	231f      	movs	r3, #31
 8002452:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8002454:	bf00      	nop
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_CRCEx_Polynomial_Set+0x2c>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	617a      	str	r2, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f2      	bne.n	8002456 <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b18      	cmp	r3, #24
 8002474:	d843      	bhi.n	80024fe <HAL_CRCEx_Polynomial_Set+0xba>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_CRCEx_Polynomial_Set+0x38>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	080024ff 	.word	0x080024ff
 8002480:	080024ff 	.word	0x080024ff
 8002484:	080024ff 	.word	0x080024ff
 8002488:	080024ff 	.word	0x080024ff
 800248c:	080024ff 	.word	0x080024ff
 8002490:	080024ff 	.word	0x080024ff
 8002494:	080024ff 	.word	0x080024ff
 8002498:	080024ff 	.word	0x080024ff
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	080024ff 	.word	0x080024ff
 80024a4:	080024ff 	.word	0x080024ff
 80024a8:	080024ff 	.word	0x080024ff
 80024ac:	080024ff 	.word	0x080024ff
 80024b0:	080024ff 	.word	0x080024ff
 80024b4:	080024ff 	.word	0x080024ff
 80024b8:	080024ff 	.word	0x080024ff
 80024bc:	080024eb 	.word	0x080024eb
 80024c0:	080024ff 	.word	0x080024ff
 80024c4:	080024ff 	.word	0x080024ff
 80024c8:	080024ff 	.word	0x080024ff
 80024cc:	080024ff 	.word	0x080024ff
 80024d0:	080024ff 	.word	0x080024ff
 80024d4:	080024ff 	.word	0x080024ff
 80024d8:	080024ff 	.word	0x080024ff
 80024dc:	080024e1 	.word	0x080024e1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d90d      	bls.n	8002502 <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e01f      	b.n	800252a <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d90a      	bls.n	8002506 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e01a      	b.n	800252a <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	d907      	bls.n	800250a <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e015      	b.n	800252a <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800250a:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	f022 0118 	bic.w	r1, r2, #24
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e039      	b.n	80025be <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f00e fce0 	bl	8010f24 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6852      	ldr	r2, [r2, #4]
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800258c:	f022 0107 	bic.w	r1, r2, #7
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6892      	ldr	r2, [r2, #8]
 8002594:	430a      	orrs	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_DMA2D_Init+0x90>)
 80025a4:	400b      	ands	r3, r1
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68c9      	ldr	r1, [r1, #12]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	ffffc000 	.word	0xffffc000

080025cc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA2D_Start+0x1c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e018      	b.n	800261a <HAL_DMA2D_Start+0x4e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f98a 	bl	800291c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d056      	beq.n	80026f0 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002642:	f7ff fa21 	bl	8001a88 <HAL_GetTick>
 8002646:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002648:	e04b      	b.n	80026e2 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2204      	movs	r2, #4
 8002694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0a2      	b.n	80027ea <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d01a      	beq.n	80026e2 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_DMA2D_PollForTransfer+0xa0>
 80026b2:	f7ff f9e9 	bl	8001a88 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d90f      	bls.n	80026e2 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2203      	movs	r2, #3
 80026d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e083      	b.n	80027ea <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ac      	beq.n	800264a <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002708:	2b00      	cmp	r3, #0
 800270a:	d061      	beq.n	80027d0 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff f9bc 	bl	8001a88 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002712:	e056      	b.n	80027c2 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02e      	beq.n	8002784 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2229      	movs	r2, #41	; 0x29
 800276e:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d01a      	beq.n	80027c2 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA2D_PollForTransfer+0x180>
 8002792:	f7ff f979 	bl	8001a88 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90f      	bls.n	80027c2 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2203      	movs	r2, #3
 80027b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e013      	b.n	80027ea <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0a1      	beq.n	8002714 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2212      	movs	r2, #18
 80027d6:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3318      	adds	r3, #24
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_DMA2D_ConfigLayer+0x34>
 8002824:	2302      	movs	r3, #2
 8002826:	e071      	b.n	800290c <HAL_DMA2D_ConfigLayer+0x118>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_DMA2D_ConfigLayer+0x124>)
 8002848:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b0a      	cmp	r3, #10
 8002850:	d003      	beq.n	800285a <HAL_DMA2D_ConfigLayer+0x66>
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b09      	cmp	r3, #9
 8002858:	d107      	bne.n	800286a <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e005      	b.n	8002876 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11f      	bne.n	80028bc <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	43d2      	mvns	r2, r2
 800288a:	4011      	ands	r1, r2
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	430a      	orrs	r2, r1
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b0a      	cmp	r3, #10
 80028a2:	d003      	beq.n	80028ac <HAL_DMA2D_ConfigLayer+0xb8>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d126      	bne.n	80028fa <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68d2      	ldr	r2, [r2, #12]
 80028b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
 80028ba:	e01e      	b.n	80028fa <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	69d1      	ldr	r1, [r2, #28]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	4011      	ands	r1, r2
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b0a      	cmp	r3, #10
 80028e2:	d003      	beq.n	80028ec <HAL_DMA2D_ConfigLayer+0xf8>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	d106      	bne.n	80028fa <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80028f8:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	ff03000f 	.word	0xff03000f

0800291c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 800291c:	b480      	push	{r7}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002948:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	0410      	lsls	r0, r2, #16
 8002950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002952:	4302      	orrs	r2, r0
 8002954:	430a      	orrs	r2, r1
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002968:	d174      	bne.n	8002a54 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002970:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002978:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002980:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	431a      	orrs	r2, r3
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	e053      	b.n	8002a4a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e048      	b.n	8002a4a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d111      	bne.n	80029e4 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	0cdb      	lsrs	r3, r3, #19
 80029c4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	0a9b      	lsrs	r3, r3, #10
 80029ca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	02db      	lsls	r3, r3, #11
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	e032      	b.n	8002a4a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d117      	bne.n	8002a1c <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	0fdb      	lsrs	r3, r3, #31
 80029f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	0cdb      	lsrs	r3, r3, #19
 80029f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	0adb      	lsrs	r3, r3, #11
 80029fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	03db      	lsls	r3, r3, #15
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	e016      	b.n	8002a4a <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	0f1b      	lsrs	r3, r3, #28
 8002a20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	0b1b      	lsrs	r3, r3, #12
 8002a2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	011a      	lsls	r2, r3, #4
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	431a      	orrs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002a52:	e003      	b.n	8002a5c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	372c      	adds	r7, #44	; 0x2c
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e175      	b.n	8002d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8164 	bne.w	8002d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x4e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d123      	bne.n	8002afe <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d00b      	beq.n	8002b52 <HAL_GPIO_Init+0xea>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b46:	2b11      	cmp	r3, #17
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80be 	beq.w	8002d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	4a65      	ldr	r2, [pc, #404]	; (8002d88 <HAL_GPIO_Init+0x320>)
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_GPIO_Init+0x320>)
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfe:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <HAL_GPIO_Init+0x320>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c0a:	4a60      	ldr	r2, [pc, #384]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_GPIO_Init+0x328>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d037      	beq.n	8002ca6 <HAL_GPIO_Init+0x23e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a56      	ldr	r2, [pc, #344]	; (8002d94 <HAL_GPIO_Init+0x32c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_GPIO_Init+0x23a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <HAL_GPIO_Init+0x330>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x236>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <HAL_GPIO_Init+0x334>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x232>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a53      	ldr	r2, [pc, #332]	; (8002da0 <HAL_GPIO_Init+0x338>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x22e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x33c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x22a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <HAL_GPIO_Init+0x340>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_GPIO_Init+0x344>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_GPIO_Init+0x348>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_GPIO_Init+0x34c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x21a>
 8002c7e:	2309      	movs	r3, #9
 8002c80:	e012      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c82:	230a      	movs	r3, #10
 8002c84:	e010      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c86:	2308      	movs	r3, #8
 8002c88:	e00e      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e00c      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e00a      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e008      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cb8:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	f67f ae86 	bls.w	8002a88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3724      	adds	r7, #36	; 0x24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40020000 	.word	0x40020000
 8002d94:	40020400 	.word	0x40020400
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40021400 	.word	0x40021400
 8002da8:	40021800 	.word	0x40021800
 8002dac:	40021c00 	.word	0x40021c00
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40022400 	.word	0x40022400
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e0da      	b.n	8002f8e <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f040 80ca 	bne.w	8002f88 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	401a      	ands	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	08d9      	lsrs	r1, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3108      	adds	r1, #8
 8002e16:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	200f      	movs	r0, #15
 8002e24:	fa00 f303 	lsl.w	r3, r0, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	401a      	ands	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2103      	movs	r1, #3
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_GPIO_DeInit+0x1e8>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <HAL_GPIO_DeInit+0x1ec>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d037      	beq.n	8002f0e <HAL_GPIO_DeInit+0x152>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a42      	ldr	r2, [pc, #264]	; (8002fac <HAL_GPIO_DeInit+0x1f0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_GPIO_DeInit+0x14e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_GPIO_DeInit+0x1f4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02b      	beq.n	8002f06 <HAL_GPIO_DeInit+0x14a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a40      	ldr	r2, [pc, #256]	; (8002fb4 <HAL_GPIO_DeInit+0x1f8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d025      	beq.n	8002f02 <HAL_GPIO_DeInit+0x146>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_GPIO_DeInit+0x1fc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01f      	beq.n	8002efe <HAL_GPIO_DeInit+0x142>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <HAL_GPIO_DeInit+0x200>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_DeInit+0x13e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <HAL_GPIO_DeInit+0x204>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_DeInit+0x13a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_GPIO_DeInit+0x208>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_DeInit+0x136>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <HAL_GPIO_DeInit+0x20c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_DeInit+0x132>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_GPIO_DeInit+0x210>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_DeInit+0x12e>
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	e012      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002eea:	230a      	movs	r3, #10
 8002eec:	e010      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	e00e      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e00c      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e00a      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e008      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e004      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_DeInit+0x154>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	f002 0203 	and.w	r2, r2, #3
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	fa03 f202 	lsl.w	r2, r3, r2
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d132      	bne.n	8002f88 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002f32:	481c      	ldr	r0, [pc, #112]	; (8002fa4 <HAL_GPIO_DeInit+0x1e8>)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	491a      	ldr	r1, [pc, #104]	; (8002fa4 <HAL_GPIO_DeInit+0x1e8>)
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	0892      	lsrs	r2, r2, #2
 8002f3e:	3202      	adds	r2, #2
 8002f40:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	43d2      	mvns	r2, r2
 8002f48:	400a      	ands	r2, r1
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f50:	491f      	ldr	r1, [pc, #124]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f5e:	491c      	ldr	r1, [pc, #112]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4013      	ands	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f7a:	4915      	ldr	r1, [pc, #84]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_GPIO_DeInit+0x214>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4013      	ands	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	f67f af21 	bls.w	8002dd8 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40021400 	.word	0x40021400
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40021c00 	.word	0x40021c00
 8002fc8:	40022000 	.word	0x40022000
 8002fcc:	40022400 	.word	0x40022400
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0c7      	b.n	80031b2 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f00d fe2e 	bl	8010c98 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	6992      	ldr	r2, [r2, #24]
 800304e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003052:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	6991      	ldr	r1, [r2, #24]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6850      	ldr	r0, [r2, #4]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800306c:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6912      	ldr	r2, [r2, #16]
 8003072:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003074:	430a      	orrs	r2, r1
 8003076:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_LTDC_Init+0x1b4>)
 8003084:	400b      	ands	r3, r1
 8003086:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	6891      	ldr	r1, [r2, #8]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6990      	ldr	r0, [r2, #24]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4302      	orrs	r2, r0
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <HAL_LTDC_Init+0x1b4>)
 80030b2:	400b      	ands	r3, r1
 80030b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	68d1      	ldr	r1, [r2, #12]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6a10      	ldr	r0, [r2, #32]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4302      	orrs	r2, r0
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_LTDC_Init+0x1b4>)
 80030e0:	400b      	ands	r3, r1
 80030e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	6911      	ldr	r1, [r2, #16]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4302      	orrs	r2, r0
 80030fe:	430a      	orrs	r2, r1
 8003100:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6959      	ldr	r1, [r3, #20]
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_LTDC_Init+0x1b4>)
 800310e:	400b      	ands	r3, r1
 8003110:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	6951      	ldr	r1, [r2, #20]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4302      	orrs	r2, r0
 800312c:	430a      	orrs	r2, r1
 800312e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800314e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800315e:	68b8      	ldr	r0, [r7, #8]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4302      	orrs	r2, r0
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800316a:	4302      	orrs	r2, r0
 800316c:	430a      	orrs	r2, r1
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800317a:	f042 0204 	orr.w	r2, r2, #4
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800318a:	f042 0202 	orr.w	r2, r2, #2
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	6992      	ldr	r2, [r2, #24]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	f000f800 	.word	0xf000f800

080031c0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f00d fddf 	bl	8010d8c <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80031f0:	b5b0      	push	{r4, r5, r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_LTDC_ConfigLayer+0x1a>
 8003206:	2302      	movs	r3, #2
 8003208:	e02c      	b.n	8003264 <HAL_LTDC_ConfigLayer+0x74>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2134      	movs	r1, #52	; 0x34
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4614      	mov	r4, r2
 800322e:	461d      	mov	r5, r3
 8003230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f9ff 	bl	8003648 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bdb0      	pop	{r4, r5, r7, pc}

0800326c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_LTDC_ConfigColorKeying+0x1a>
 8003282:	2302      	movs	r3, #2
 8003284:	e031      	b.n	80032ea <HAL_LTDC_ConfigColorKeying+0x7e>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	01db      	lsls	r3, r3, #7
 80032a0:	4413      	add	r3, r2
 80032a2:	3384      	adds	r3, #132	; 0x84
 80032a4:	461a      	mov	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	440b      	add	r3, r1
 80032b2:	3384      	adds	r3, #132	; 0x84
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80032ba:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	01db      	lsls	r3, r3, #7
 80032c6:	4413      	add	r3, r2
 80032c8:	3384      	adds	r3, #132	; 0x84
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	60d3      	str	r3, [r2, #12]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b089      	sub	sp, #36	; 0x24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_LTDC_ConfigCLUT+0x28>
 800331a:	2302      	movs	r3, #2
 800331c:	e059      	b.n	80033d2 <HAL_LTDC_ConfigCLUT+0xdc>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0; (counter < CLUTSize); counter++)
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	e041      	b.n	80033b8 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2134      	movs	r1, #52	; 0x34
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3348      	adds	r3, #72	; 0x48
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d114      	bne.n	8003372 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	4413      	add	r3, r2
 8003350:	061a      	lsls	r2, r3, #24
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	431a      	orrs	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003362:	431a      	orrs	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800336c:	4313      	orrs	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e010      	b.n	8003394 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	061a      	lsls	r2, r3, #24
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	431a      	orrs	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003390:	4313      	orrs	r3, r2
 8003392:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	3304      	adds	r3, #4
 8003398:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	01db      	lsls	r3, r3, #7
 80033a8:	4413      	add	r3, r2
 80033aa:	3384      	adds	r3, #132	; 0x84
 80033ac:	461a      	mov	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0; (counter < CLUTSize); counter++)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3b9      	bcc.n	8003334 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_LTDC_EnableColorKeying+0x18>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e027      	b.n	8003446 <HAL_LTDC_EnableColorKeying+0x68>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	4413      	add	r3, r2
 8003412:	3384      	adds	r3, #132	; 0x84
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	01db      	lsls	r3, r3, #7
 8003420:	440b      	add	r3, r1
 8003422:	3384      	adds	r3, #132	; 0x84
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f043 0302 	orr.w	r3, r3, #2
 800342a:	6013      	str	r3, [r2, #0]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_LTDC_DisableColorKeying+0x18>
 8003466:	2302      	movs	r3, #2
 8003468:	e027      	b.n	80034ba <HAL_LTDC_DisableColorKeying+0x68>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	01db      	lsls	r3, r3, #7
 8003484:	4413      	add	r3, r2
 8003486:	3384      	adds	r3, #132	; 0x84
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	440b      	add	r3, r1
 8003496:	3384      	adds	r3, #132	; 0x84
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0302 	bic.w	r3, r3, #2
 800349e:	6013      	str	r3, [r2, #0]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_LTDC_SetWindowPosition+0x1c>
 80034de:	2302      	movs	r3, #2
 80034e0:	e033      	b.n	800354a <HAL_LTDC_SetWindowPosition+0x84>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2234      	movs	r2, #52	; 0x34
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	3338      	adds	r3, #56	; 0x38
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	441a      	add	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	441a      	add	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	6979      	ldr	r1, [r7, #20]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f88c 	bl	8003648 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_LTDC_SetAlpha+0x1a>
 8003568:	2302      	movs	r3, #2
 800356a:	e024      	b.n	80035b6 <HAL_LTDC_SetAlpha+0x64>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2234      	movs	r2, #52	; 0x34
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	3338      	adds	r3, #56	; 0x38
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6979      	ldr	r1, [r7, #20]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f856 	bl	8003648 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   0 or 1.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_LTDC_SetAddress+0x1a>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e024      	b.n	8003622 <HAL_LTDC_SetAddress+0x64>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2234      	movs	r2, #52	; 0x34
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	3338      	adds	r3, #56	; 0x38
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6979      	ldr	r1, [r7, #20]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f820 	bl	8003648 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003638:	b2db      	uxtb	r3, r3
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	4413      	add	r3, r2
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	01db      	lsls	r3, r3, #7
 8003680:	4413      	add	r3, r2
 8003682:	3384      	adds	r3, #132	; 0x84
 8003684:	461a      	mov	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	01db      	lsls	r3, r3, #7
 8003690:	440b      	add	r3, r1
 8003692:	3384      	adds	r3, #132	; 0x84
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800369a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	01db      	lsls	r3, r3, #7
 80036a6:	4413      	add	r3, r2
 80036a8:	3384      	adds	r3, #132	; 0x84
 80036aa:	4619      	mov	r1, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	4413      	add	r3, r2
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d4:	4413      	add	r3, r2
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	4413      	add	r3, r2
 80036e6:	3384      	adds	r3, #132	; 0x84
 80036e8:	461a      	mov	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	01db      	lsls	r3, r3, #7
 80036f4:	440b      	add	r3, r1
 80036f6:	3384      	adds	r3, #132	; 0x84
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	4413      	add	r3, r2
 800370c:	3384      	adds	r3, #132	; 0x84
 800370e:	4619      	mov	r1, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371e:	4413      	add	r3, r2
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	01db      	lsls	r3, r3, #7
 8003732:	4413      	add	r3, r2
 8003734:	3384      	adds	r3, #132	; 0x84
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	01db      	lsls	r3, r3, #7
 8003742:	440b      	add	r3, r1
 8003744:	3384      	adds	r3, #132	; 0x84
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f023 0307 	bic.w	r3, r3, #7
 800374c:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	01db      	lsls	r3, r3, #7
 8003758:	4413      	add	r3, r2
 800375a:	3384      	adds	r3, #132	; 0x84
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	01db      	lsls	r3, r3, #7
 800378a:	4413      	add	r3, r2
 800378c:	3384      	adds	r3, #132	; 0x84
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	01db      	lsls	r3, r3, #7
 800379a:	4413      	add	r3, r2
 800379c:	3384      	adds	r3, #132	; 0x84
 800379e:	461a      	mov	r2, r3
 80037a0:	2300      	movs	r3, #0
 80037a2:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	01db      	lsls	r3, r3, #7
 80037ae:	4413      	add	r3, r2
 80037b0:	3384      	adds	r3, #132	; 0x84
 80037b2:	4619      	mov	r1, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037ba:	461a      	mov	r2, r3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	431a      	orrs	r2, r3
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	01db      	lsls	r3, r3, #7
 80037d4:	4413      	add	r3, r2
 80037d6:	3384      	adds	r3, #132	; 0x84
 80037d8:	461a      	mov	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	01db      	lsls	r3, r3, #7
 80037e4:	440b      	add	r3, r1
 80037e6:	3384      	adds	r3, #132	; 0x84
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	01db      	lsls	r3, r3, #7
 80037fa:	4413      	add	r3, r2
 80037fc:	3384      	adds	r3, #132	; 0x84
 80037fe:	461a      	mov	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	01db      	lsls	r3, r3, #7
 8003810:	4413      	add	r3, r2
 8003812:	3384      	adds	r3, #132	; 0x84
 8003814:	4619      	mov	r1, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	4413      	add	r3, r2
 8003822:	3384      	adds	r3, #132	; 0x84
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <LTDC_SetConfig+0x348>)
 8003828:	4013      	ands	r3, r2
 800382a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	4413      	add	r3, r2
 8003838:	3384      	adds	r3, #132	; 0x84
 800383a:	4619      	mov	r1, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4313      	orrs	r3, r2
 8003846:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	01db      	lsls	r3, r3, #7
 8003852:	4413      	add	r3, r2
 8003854:	3384      	adds	r3, #132	; 0x84
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	01db      	lsls	r3, r3, #7
 8003862:	4413      	add	r3, r2
 8003864:	3384      	adds	r3, #132	; 0x84
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4413      	add	r3, r2
 8003878:	3384      	adds	r3, #132	; 0x84
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 800388a:	2304      	movs	r3, #4
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e01b      	b.n	80038c8 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8003898:	2303      	movs	r3, #3
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e014      	b.n	80038c8 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d00b      	beq.n	80038be <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d007      	beq.n	80038be <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d003      	beq.n	80038be <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038ba:	2b07      	cmp	r3, #7
 80038bc:	d102      	bne.n	80038c4 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 80038be:	2302      	movs	r3, #2
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e001      	b.n	80038c8 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	01db      	lsls	r3, r3, #7
 80038d2:	4413      	add	r3, r2
 80038d4:	3384      	adds	r3, #132	; 0x84
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	01db      	lsls	r3, r3, #7
 80038e2:	440b      	add	r3, r1
 80038e4:	3384      	adds	r3, #132	; 0x84
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	4413      	add	r3, r2
 80038fa:	3384      	adds	r3, #132	; 0x84
 80038fc:	4618      	mov	r0, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	041a      	lsls	r2, r3, #16
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	69f9      	ldr	r1, [r7, #28]
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	3303      	adds	r3, #3
 800391c:	4313      	orrs	r3, r2
 800391e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	01db      	lsls	r3, r3, #7
 800392a:	4413      	add	r3, r2
 800392c:	3384      	adds	r3, #132	; 0x84
 800392e:	4619      	mov	r1, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	01db      	lsls	r3, r3, #7
 800393a:	4413      	add	r3, r2
 800393c:	3384      	adds	r3, #132	; 0x84
 800393e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <LTDC_SetConfig+0x34c>)
 8003942:	4013      	ands	r3, r2
 8003944:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	01db      	lsls	r3, r3, #7
 8003950:	4413      	add	r3, r2
 8003952:	3384      	adds	r3, #132	; 0x84
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	01db      	lsls	r3, r3, #7
 8003966:	4413      	add	r3, r2
 8003968:	3384      	adds	r3, #132	; 0x84
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	01db      	lsls	r3, r3, #7
 8003976:	440b      	add	r3, r1
 8003978:	3384      	adds	r3, #132	; 0x84
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6013      	str	r3, [r2, #0]
}
 8003982:	bf00      	nop
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	fffff8f8 	.word	0xfffff8f8
 8003994:	fffff800 	.word	0xfffff800

08003998 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399a:	b08f      	sub	sp, #60	; 0x3c
 800399c:	af0a      	add	r7, sp, #40	; 0x28
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0fe      	b.n	8003bac <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f011 f9da 	bl	8014d70 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fe66 	bl	8007692 <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	687e      	ldr	r6, [r7, #4]
 80039ce:	466d      	mov	r5, sp
 80039d0:	f106 0410 	add.w	r4, r6, #16
 80039d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e4:	1d33      	adds	r3, r6, #4
 80039e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f003 fdef 	bl	80075cc <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 fe5d 	bl	80076b4 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e04c      	b.n	8003a9a <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3339      	adds	r3, #57	; 0x39
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	b2d8      	uxtb	r0, r3
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3338      	adds	r3, #56	; 0x38
 8003a28:	4602      	mov	r2, r0
 8003a2a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	b298      	uxth	r0, r3
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	333e      	adds	r3, #62	; 0x3e
 8003a40:	4602      	mov	r2, r0
 8003a42:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	333b      	adds	r3, #59	; 0x3b
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3340      	adds	r3, #64	; 0x40
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3344      	adds	r3, #68	; 0x44
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334c      	adds	r3, #76	; 0x4c
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b0e      	cmp	r3, #14
 8003a9e:	d9af      	bls.n	8003a00 <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e05a      	b.n	8003b5c <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	b298      	uxth	r0, r3
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	333e      	adds	r3, #62	; 0x3e
 8003aea:	4602      	mov	r2, r0
 8003aec:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3340      	adds	r3, #64	; 0x40
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b0e      	cmp	r3, #14
 8003b60:	d9a1      	bls.n	8003aa6 <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	687e      	ldr	r6, [r7, #4]
 8003b6a:	466d      	mov	r5, sp
 8003b6c:	f106 0410 	add.w	r4, r6, #16
 8003b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b80:	1d33      	adds	r3, r6, #4
 8003b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b84:	6838      	ldr	r0, [r7, #0]
 8003b86:	f003 fdbd 	bl	8007704 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f001 f878 	bl	8004c90 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 fdb2 	bl	800870e <USB_DevDisconnect>
 return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb4 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_PCD_Start+0x16>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e012      	b.n	8003bf0 <HAL_PCD_Start+0x3c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 fd82 	bl	80086e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fd45 	bl	8007670 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	; 0x30
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 8003c22:	4b98      	ldr	r3, [pc, #608]	; (8003e84 <HAL_PCD_IRQHandler+0x28c>)
 8003c24:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fe11 	bl	8008852 <USB_GetMode>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 84e1 	bne.w	80045fa <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 fd7d 	bl	800873c <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 84d7 	beq.w	80045f8 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 fd74 	bl	800873c <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d103      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2202      	movs	r2, #2
 8003c64:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fd66 	bl	800873c <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7a:	f040 80ed 	bne.w	8003e58 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 fd6d 	bl	8008766 <USB_ReadDevAllOutEpInterrupt>
 8003c8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 8003c8e:	e0df      	b.n	8003e50 <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80d4 	beq.w	8003e44 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fd8d 	bl	80087c6 <USB_ReadDevOutEPInterrupt>
 8003cac:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8082 	beq.w	8003dbe <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d111      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d13c      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	1ad1      	subs	r1, r2, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4403      	add	r3, r0
 8003d36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d3a:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4403      	add	r3, r0
 8003d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4419      	add	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d78:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f011 f849 	bl	8014e18 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d117      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d114      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x1c6>
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003db6:	461a      	mov	r2, r3
 8003db8:	2101      	movs	r1, #1
 8003dba:	f004 fd8f 	bl	80088dc <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d021      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d111      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f010 fffd 	bl	8014df4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	461a      	mov	r2, r3
 8003e08:	2308      	movs	r3, #8
 8003e0a:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	2310      	movs	r3, #16
 8003e26:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2320      	movs	r3, #32
 8003e42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	3301      	adds	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f47f af1c 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 fc6d 	bl	800873c <USB_ReadInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6c:	f040 80c6 	bne.w	8003ffc <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f004 fc8e 	bl	8008796 <USB_ReadDevAllInEpInterrupt>
 8003e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 8003e80:	e0b8      	b.n	8003ff4 <HAL_PCD_IRQHandler+0x3fc>
 8003e82:	bf00      	nop
 8003e84:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80aa 	beq.w	8003fe8 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f004 fcad 	bl	80087fe <USB_ReadDevInEPInterrupt>
 8003ea4:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05a      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d11b      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3344      	adds	r3, #68	; 0x44
 8003efc:	6819      	ldr	r1, [r3, #0]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4403      	add	r3, r0
 8003f0c:	3340      	adds	r3, #64	; 0x40
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4419      	add	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4403      	add	r3, r0
 8003f20:	3344      	adds	r3, #68	; 0x44
 8003f22:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f010 ff8f 	bl	8014e4e <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d116      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d113      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x36e>
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	334c      	adds	r3, #76	; 0x4c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2101      	movs	r1, #1
 8003f62:	f004 fcbb 	bl	80088dc <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2308      	movs	r3, #8
 8003f80:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8003fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fd70 	bl	8004ac8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	3301      	adds	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f af46 	bne.w	8003e88 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f004 fb9b 	bl	800873c <USB_ReadInterrupts>
 8004006:	4603      	mov	r3, r0
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004010:	d120      	bne.n	8004054 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	461a      	mov	r2, r3
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800403a:	2100      	movs	r1, #0
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f011 fa53 	bl	80154e8 <HAL_PCDEx_LPM_Callback>
 8004042:	e002      	b.n	800404a <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f010 ff7b 	bl	8014f40 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fb6f 	bl	800873c <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	d10f      	bne.n	800408a <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d102      	bne.n	8004080 <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f010 ff38 	bl	8014ef0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004088:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fb54 	bl	800873c <USB_ReadInterrupts>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409e:	d11e      	bne.n	80040de <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040a8:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80040ce:	2101      	movs	r1, #1
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f011 fa09 	bl	80154e8 <HAL_PCDEx_LPM_Callback>
 80040d6:	e002      	b.n	80040de <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f010 ff09 	bl	8014ef0 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 fb2a 	bl	800873c <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	f040 80b0 	bne.w	8004256 <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fc:	461a      	mov	r2, r3
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2110      	movs	r1, #16
 8004112:	4618      	mov	r0, r3
 8004114:	f003 fc44 	bl	80079a0 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411c:	e036      	b.n	800418c <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	461a      	mov	r2, r3
 800412c:	23ff      	movs	r3, #255	; 0xff
 800412e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	4619      	mov	r1, r3
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004150:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	23ff      	movs	r3, #255	; 0xff
 8004162:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	4619      	mov	r1, r3
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004184:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	3301      	adds	r3, #1
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	429a      	cmp	r2, r3
 8004194:	d8c3      	bhi.n	800411e <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	461a      	mov	r2, r3
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	461a      	mov	r2, r3
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041b8:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d018      	beq.n	80041f4 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	461a      	mov	r2, r3
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d4:	f043 030b 	orr.w	r3, r3, #11
 80041d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	461a      	mov	r2, r3
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f043 030b 	orr.w	r3, r3, #11
 80041f0:	6453      	str	r3, [r2, #68]	; 0x44
 80041f2:	e015      	b.n	8004220 <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	461a      	mov	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004208:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	461a      	mov	r2, r3
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f043 030b 	orr.w	r3, r3, #11
 800421e:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	461a      	mov	r2, r3
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004234:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	b2d9      	uxtb	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004246:	461a      	mov	r2, r3
 8004248:	f004 fb48 	bl	80088dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f004 fa6e 	bl	800873c <USB_ReadInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426a:	f040 80d7 	bne.w	800441c <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f004 fafc 	bl	8008870 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004286:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f003 fbe7 	bl	8007a60 <USB_GetDevSpeed>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10f      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a4:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	68d2      	ldr	r2, [r2, #12]
 80042b0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e0a9      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2203      	movs	r2, #3
 80042bc:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80042c4:	f001 f966 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80042c8:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <HAL_PCD_IRQHandler+0x8bc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d90c      	bls.n	80042ec <HAL_PCD_IRQHandler+0x6f4>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a78      	ldr	r2, [pc, #480]	; (80044b8 <HAL_PCD_IRQHandler+0x8c0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d808      	bhi.n	80042ec <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	68d2      	ldr	r2, [r2, #12]
 80042e4:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	e08f      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a72      	ldr	r2, [pc, #456]	; (80044b8 <HAL_PCD_IRQHandler+0x8c0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d90c      	bls.n	800430e <HAL_PCD_IRQHandler+0x716>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a71      	ldr	r2, [pc, #452]	; (80044bc <HAL_PCD_IRQHandler+0x8c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d808      	bhi.n	800430e <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	68d2      	ldr	r2, [r2, #12]
 8004306:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e07e      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_PCD_IRQHandler+0x8c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d90c      	bls.n	8004330 <HAL_PCD_IRQHandler+0x738>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a69      	ldr	r2, [pc, #420]	; (80044c0 <HAL_PCD_IRQHandler+0x8c8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d808      	bhi.n	8004330 <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	68d2      	ldr	r2, [r2, #12]
 8004328:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e06d      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a63      	ldr	r2, [pc, #396]	; (80044c0 <HAL_PCD_IRQHandler+0x8c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d90c      	bls.n	8004352 <HAL_PCD_IRQHandler+0x75a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a62      	ldr	r2, [pc, #392]	; (80044c4 <HAL_PCD_IRQHandler+0x8cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d808      	bhi.n	8004352 <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800434e:	60da      	str	r2, [r3, #12]
 8004350:	e05c      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_PCD_IRQHandler+0x8cc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d90c      	bls.n	8004374 <HAL_PCD_IRQHandler+0x77c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a5a      	ldr	r2, [pc, #360]	; (80044c8 <HAL_PCD_IRQHandler+0x8d0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d808      	bhi.n	8004374 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	68d2      	ldr	r2, [r2, #12]
 800436c:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	e04b      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <HAL_PCD_IRQHandler+0x8d0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d90c      	bls.n	8004396 <HAL_PCD_IRQHandler+0x79e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a53      	ldr	r2, [pc, #332]	; (80044cc <HAL_PCD_IRQHandler+0x8d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d808      	bhi.n	8004396 <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	e03a      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a4c      	ldr	r2, [pc, #304]	; (80044cc <HAL_PCD_IRQHandler+0x8d4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d90c      	bls.n	80043b8 <HAL_PCD_IRQHandler+0x7c0>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a4b      	ldr	r2, [pc, #300]	; (80044d0 <HAL_PCD_IRQHandler+0x8d8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d808      	bhi.n	80043b8 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	68d2      	ldr	r2, [r2, #12]
 80043b0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e029      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a45      	ldr	r2, [pc, #276]	; (80044d0 <HAL_PCD_IRQHandler+0x8d8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d90c      	bls.n	80043da <HAL_PCD_IRQHandler+0x7e2>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a44      	ldr	r2, [pc, #272]	; (80044d4 <HAL_PCD_IRQHandler+0x8dc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d808      	bhi.n	80043da <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	e018      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a3d      	ldr	r2, [pc, #244]	; (80044d4 <HAL_PCD_IRQHandler+0x8dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90c      	bls.n	80043fc <HAL_PCD_IRQHandler+0x804>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <HAL_PCD_IRQHandler+0x8e0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d808      	bhi.n	80043fc <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	68d2      	ldr	r2, [r2, #12]
 80043f4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e007      	b.n	800440c <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800440a:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f010 fd46 	bl	8014e9e <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800441a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 f98b 	bl	800873c <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d174      	bne.n	800451a <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	6992      	ldr	r2, [r2, #24]
 800443a:	f022 0210 	bic.w	r2, r2, #16
 800443e:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 020f 	and.w	r2, r3, #15
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	0c5b      	lsrs	r3, r3, #17
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	2b02      	cmp	r3, #2
 8004468:	d138      	bne.n	80044dc <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d049      	beq.n	800450a <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	b29b      	uxth	r3, r3
 8004480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6a38      	ldr	r0, [r7, #32]
 800448a:	f003 fffb 	bl	8008484 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449a:	441a      	add	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ac:	441a      	add	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	619a      	str	r2, [r3, #24]
 80044b2:	e02a      	b.n	800450a <HAL_PCD_IRQHandler+0x912>
 80044b4:	00d8acbf 	.word	0x00d8acbf
 80044b8:	00e4e1bf 	.word	0x00e4e1bf
 80044bc:	00f423ff 	.word	0x00f423ff
 80044c0:	0106737f 	.word	0x0106737f
 80044c4:	011a499f 	.word	0x011a499f
 80044c8:	01312cff 	.word	0x01312cff
 80044cc:	014ca43f 	.word	0x014ca43f
 80044d0:	016e35ff 	.word	0x016e35ff
 80044d4:	01a6ab1f 	.word	0x01a6ab1f
 80044d8:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	0c5b      	lsrs	r3, r3, #17
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d110      	bne.n	800450a <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80044ee:	2208      	movs	r2, #8
 80044f0:	4619      	mov	r1, r3
 80044f2:	6a38      	ldr	r0, [r7, #32]
 80044f4:	f003 ffc6 	bl	8008484 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004504:	441a      	add	r2, r3
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	6992      	ldr	r2, [r2, #24]
 8004514:	f042 0210 	orr.w	r2, r2, #16
 8004518:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 f90c 	bl	800873c <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d106      	bne.n	800453c <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f010 fca7 	bl	8014e82 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f004 f8fb 	bl	800873c <USB_ReadInterrupts>
 8004546:	4603      	mov	r3, r0
 8004548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004550:	d10a      	bne.n	8004568 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f010 fd11 	bl	8014f80 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f004 f8e5 	bl	800873c <USB_ReadInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457c:	d10a      	bne.n	8004594 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	b2db      	uxtb	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f010 fce9 	bl	8014f5c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 f8cf 	bl	800873c <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a8:	d107      	bne.n	80045ba <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f010 fcfa 	bl	8014fa4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f004 f8bc 	bl	800873c <USB_ReadInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d115      	bne.n	80045fa <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f010 fced 	bl	8014fc0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6851      	ldr	r1, [r2, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	e000      	b.n	80045fa <HAL_PCD_IRQHandler+0xa02>
      return;
 80045f8:	bf00      	nop
    }
  }
}
 80045fa:	3730      	adds	r7, #48	; 0x30
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_PCD_SetAddress+0x1a>
 8004616:	2302      	movs	r3, #2
 8004618:	e00f      	b.n	800463a <HAL_PCD_SetAddress+0x3a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f004 f832 	bl	8008694 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	461a      	mov	r2, r3
 8004650:	4603      	mov	r3, r0
 8004652:	70fb      	strb	r3, [r7, #3]
 8004654:	460b      	mov	r3, r1
 8004656:	803b      	strh	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004664:	2b00      	cmp	r3, #0
 8004666:	da0b      	bge.n	8004680 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	3338      	adds	r3, #56	; 0x38
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e00b      	b.n	8004698 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 80046a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	09db      	lsrs	r3, r3, #7
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80046b4:	883a      	ldrh	r2, [r7, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	78ba      	ldrb	r2, [r7, #2]
 80046be:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 80046d2:	78bb      	ldrb	r3, [r7, #2]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d102      	bne.n	80046de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_PCD_EP_Open+0xaa>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e00e      	b.n	800470a <HAL_PCD_EP_Open+0xc8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f003 f9e6 	bl	8007acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004708:	7afb      	ldrb	r3, [r7, #11]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 800471e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004722:	2b00      	cmp	r3, #0
 8004724:	da0b      	bge.n	800473e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	3338      	adds	r3, #56	; 0x38
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e00b      	b.n	8004756 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	09db      	lsrs	r3, r3, #7
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_PCD_EP_Close+0x6e>
 800477c:	2302      	movs	r3, #2
 800477e:	e00e      	b.n	800479e <HAL_PCD_EP_Close+0x8c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	4618      	mov	r0, r3
 8004790:	f003 fa24 	bl	8007bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	460b      	mov	r3, r1
 80047b4:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80047b6:	7afb      	ldrb	r3, [r7, #11]
 80047b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004800:	7afb      	ldrb	r3, [r7, #11]
 8004802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	f003 fca0 	bl	800815c <USB_EP0StartXfer>
 800481c:	e008      	b.n	8004830 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6979      	ldr	r1, [r7, #20]
 800482c:	f003 fa52 	bl	8007cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800487c:	7afb      	ldrb	r3, [r7, #11]
 800487e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3338      	adds	r3, #56	; 0x38
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2201      	movs	r2, #1
 80048a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80048aa:	7afb      	ldrb	r3, [r7, #11]
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d102      	bne.n	80048c4 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 80048c4:	7afb      	ldrb	r3, [r7, #11]
 80048c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	f003 fc3e 	bl	800815c <USB_EP0StartXfer>
 80048e0:	e008      	b.n	80048f4 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	f003 f9f0 	bl	8007cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	460b      	mov	r3, r1
 8004908:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d901      	bls.n	800491c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e050      	b.n	80049be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 800491c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004920:	2b00      	cmp	r3, #0
 8004922:	da0b      	bge.n	800493c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3338      	adds	r3, #56	; 0x38
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e009      	b.n	8004950 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_PCD_EP_SetStall+0x82>
 800497c:	2302      	movs	r3, #2
 800497e:	e01e      	b.n	80049be <HAL_PCD_EP_SetStall+0xc0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	4618      	mov	r0, r3
 8004990:	f003 fda2 	bl	80084d8 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	b2d9      	uxtb	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80049ae:	461a      	mov	r2, r3
 80049b0:	f003 ff94 	bl	80088dc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d901      	bls.n	80049e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e040      	b.n	8004a66 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 80049e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da0b      	bge.n	8004a04 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	3338      	adds	r3, #56	; 0x38
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e009      	b.n	8004a18 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	09db      	lsrs	r3, r3, #7
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_PCD_EP_ClrStall+0x82>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e00e      	b.n	8004a66 <HAL_PCD_EP_ClrStall+0xa0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f003 fdaf 	bl	80085ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_PCD_EP_Flush+0x1a>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e01b      	b.n	8004ac0 <HAL_PCD_EP_Flush+0x52>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  if ((ep_addr & 0x80) == 0x80)
 8004a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da09      	bge.n	8004aac <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f002 ff7b 	bl	80079a0 <USB_FlushTxFifo>
 8004aaa:	e004      	b.n	8004ab6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f002 ff9b 	bl	80079ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	3338      	adds	r3, #56	; 0x38
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d202      	bcs.n	8004b0e <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3303      	adds	r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da00      	bge.n	8004b18 <PCD_WriteEmptyTxFifo+0x50>
 8004b16:	3303      	adds	r3, #3
 8004b18:	109b      	asrs	r3, r3, #2
 8004b1a:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004b1c:	e02e      	b.n	8004b7c <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d202      	bcs.n	8004b3a <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da00      	bge.n	8004b44 <PCD_WriteEmptyTxFifo+0x7c>
 8004b42:	3303      	adds	r3, #3
 8004b44:	109b      	asrs	r3, r3, #2
 8004b46:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	b298      	uxth	r0, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f003 fc58 	bl	8008414 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	441a      	add	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d909      	bls.n	8004ba6 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d203      	bcs.n	8004ba6 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1bb      	bne.n	8004b1e <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dc10      	bgt.n	8004bce <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004bac:	2201      	movs	r2, #1
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	4013      	ands	r3, r2
 8004bcc:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
 8004be4:	4613      	mov	r3, r2
 8004be6:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	883a      	ldrh	r2, [r7, #0]
 8004c04:	0411      	lsls	r1, r2, #16
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0c:	e028      	b.n	8004c60 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e00d      	b.n	8004c3e <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	3340      	adds	r3, #64	; 0x40
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	dbec      	blt.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	883a      	ldrh	r2, [r7, #0]
 8004c52:	0410      	lsls	r0, r2, #16
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	4302      	orrs	r2, r0
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	10000003 	.word	0x10000003

08004cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d06:	f7fc febf 	bl	8001a88 <HAL_GetTick>
 8004d0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d0c:	e009      	b.n	8004d22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d0e:	f7fc febb 	bl	8001a88 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1c:	d901      	bls.n	8004d22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e022      	b.n	8004d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc fea4 	bl	8001a88 <HAL_GetTick>
 8004d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d42:	e009      	b.n	8004d58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d44:	f7fc fea0 	bl	8001a88 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d52:	d901      	bls.n	8004d58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e007      	b.n	8004d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d64:	d1ee      	bne.n	8004d44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40007000 	.word	0x40007000

08004d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004d80:	2300      	movs	r3, #0
 8004d82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e25c      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8087 	beq.w	8004eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d9c:	4b96      	ldr	r3, [pc, #600]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d00c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da8:	4b93      	ldr	r3, [pc, #588]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d112      	bne.n	8004dda <HAL_RCC_OscConfig+0x62>
 8004db4:	4b90      	ldr	r3, [pc, #576]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x130>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d168      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e236      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_OscConfig+0x7a>
 8004de4:	4a84      	ldr	r2, [pc, #528]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004de6:	4b84      	ldr	r3, [pc, #528]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e02e      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x9c>
 8004dfa:	4a7f      	ldr	r2, [pc, #508]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4a7c      	ldr	r2, [pc, #496]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e08:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	4a76      	ldr	r2, [pc, #472]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e20:	4b75      	ldr	r3, [pc, #468]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004e38:	4a6f      	ldr	r2, [pc, #444]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4a6c      	ldr	r2, [pc, #432]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e46:	4b6c      	ldr	r3, [pc, #432]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc fe16 	bl	8001a88 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fc fe12 	bl	8001a88 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e1ea      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xe8>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fe02 	bl	8001a88 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fc fdfe 	bl	8001a88 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1d6      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x110>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d069      	beq.n	8004f8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eb6:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec2:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d11c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x190>
 8004ece:	4b4a      	ldr	r3, [pc, #296]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e1aa      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4941      	ldr	r1, [pc, #260]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	e040      	b.n	8004f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d023      	beq.n	8004f58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f12:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fdb4 	bl	8001a88 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f24:	f7fc fdb0 	bl	8001a88 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e188      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	492d      	ldr	r1, [pc, #180]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
 8004f56:	e018      	b.n	8004f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fd90 	bl	8001a88 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fd8c 	bl	8001a88 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e164      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d038      	beq.n	8005008 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d019      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fc fd6d 	bl	8001a88 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fc fd69 	bl	8001a88 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e141      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x23a>
 8004fd0:	e01a      	b.n	8005008 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fc fd53 	bl	8001a88 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fc fd4f 	bl	8001a88 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d903      	bls.n	8004ffc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e127      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
 8004ff8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffc:	4b94      	ldr	r3, [pc, #592]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ee      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80a4 	beq.w	800515e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b8e      	ldr	r3, [pc, #568]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	4a8b      	ldr	r2, [pc, #556]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005024:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503e:	4b85      	ldr	r3, [pc, #532]	; (8005254 <HAL_RCC_OscConfig+0x4dc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800504a:	4a82      	ldr	r2, [pc, #520]	; (8005254 <HAL_RCC_OscConfig+0x4dc>)
 800504c:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCC_OscConfig+0x4dc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7fc fd17 	bl	8001a88 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fc fd13 	bl	8001a88 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b64      	cmp	r3, #100	; 0x64
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0eb      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005070:	4b78      	ldr	r3, [pc, #480]	; (8005254 <HAL_RCC_OscConfig+0x4dc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HAL_RCC_OscConfig+0x31a>
 8005084:	4a72      	ldr	r2, [pc, #456]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005086:	4b72      	ldr	r3, [pc, #456]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	e02d      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x33c>
 800509a:	4a6d      	ldr	r2, [pc, #436]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 800509c:	4b6c      	ldr	r3, [pc, #432]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	4a6a      	ldr	r2, [pc, #424]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050a8:	4b69      	ldr	r3, [pc, #420]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	e01c      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x35e>
 80050bc:	4a64      	ldr	r2, [pc, #400]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050be:	4b64      	ldr	r3, [pc, #400]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
 80050c8:	4a61      	ldr	r2, [pc, #388]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050ca:	4b61      	ldr	r3, [pc, #388]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	; 0x70
 80050d4:	e00b      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 80050d6:	4a5e      	ldr	r2, [pc, #376]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050d8:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4a5b      	ldr	r2, [pc, #364]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050e4:	4b5a      	ldr	r3, [pc, #360]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d015      	beq.n	8005122 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fcc7 	bl	8001a88 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fcc3 	bl	8001a88 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e099      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCC_OscConfig+0x386>
 8005120:	e014      	b.n	800514c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fc fcb1 	bl	8001a88 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fc fcad 	bl	8001a88 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e083      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	4b43      	ldr	r3, [pc, #268]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	4a3f      	ldr	r2, [pc, #252]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005154:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d06f      	beq.n	8005246 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005166:	4b3a      	ldr	r3, [pc, #232]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b08      	cmp	r3, #8
 8005170:	d067      	beq.n	8005242 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d149      	bne.n	800520e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4a35      	ldr	r2, [pc, #212]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 800517c:	4b34      	ldr	r3, [pc, #208]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc fc7f 	bl	8001a88 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518e:	f7fc fc7b 	bl	8001a88 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e053      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ac:	4928      	ldr	r1, [pc, #160]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	3b01      	subs	r3, #1
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051da:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fc fc4f 	bl	8001a88 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fc fc4b 	bl	8001a88 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e023      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x476>
 800520c:	e01b      	b.n	8005246 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521a:	f7fc fc35 	bl	8001a88 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005222:	f7fc fc31 	bl	8001a88 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e009      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_OscConfig+0x4d8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x4aa>
 8005240:	e001      	b.n	8005246 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	40007000 	.word	0x40007000

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0ce      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d210      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4966      	ldr	r1, [pc, #408]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 020f 	bic.w	r2, r3, #15
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528e:	4b62      	ldr	r3, [pc, #392]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d001      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0b6      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b8:	4a58      	ldr	r2, [pc, #352]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	4b58      	ldr	r3, [pc, #352]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	4b52      	ldr	r3, [pc, #328]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052dc:	494f      	ldr	r1, [pc, #316]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052de:	4b4f      	ldr	r3, [pc, #316]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d040      	beq.n	800537c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b46      	ldr	r3, [pc, #280]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d115      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e07d      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e071      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532a:	4b3c      	ldr	r3, [pc, #240]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e069      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533a:	4938      	ldr	r1, [pc, #224]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4313      	orrs	r3, r2
 800534a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534c:	f7fc fb9c 	bl	8001a88 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fc fb98 	bl	8001a88 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e051      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 020c 	and.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d1eb      	bne.n	8005354 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537c:	4b26      	ldr	r3, [pc, #152]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d910      	bls.n	80053ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4923      	ldr	r1, [pc, #140]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	4b22      	ldr	r3, [pc, #136]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 020f 	bic.w	r2, r3, #15
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e030      	b.n	800540e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b8:	4918      	ldr	r1, [pc, #96]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053d6:	4911      	ldr	r1, [pc, #68]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ea:	f000 f81d 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053ee:	4601      	mov	r1, r0
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4a09      	ldr	r2, [pc, #36]	; (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <HAL_RCC_ClockConfig+0x1cc>)
 8005404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005406:	2000      	movs	r0, #0
 8005408:	f00f fbee 	bl	8014be8 <HAL_InitTick>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800
 8005420:	0802f03c 	.word	0x0802f03c
 8005424:	200000c4 	.word	0x200000c4

08005428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005430:	2200      	movs	r2, #0
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	617a      	str	r2, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 800543c:	2200      	movs	r2, #0
 800543e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005440:	4a51      	ldr	r2, [pc, #324]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	f002 020c 	and.w	r2, r2, #12
 8005448:	2a04      	cmp	r2, #4
 800544a:	d007      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x34>
 800544c:	2a08      	cmp	r2, #8
 800544e:	d008      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0x3a>
 8005450:	2a00      	cmp	r2, #0
 8005452:	f040 8090 	bne.w	8005576 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005456:	4b4d      	ldr	r3, [pc, #308]	; (800558c <HAL_RCC_GetSysClockFreq+0x164>)
 8005458:	613b      	str	r3, [r7, #16]
       break;
 800545a:	e08f      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545c:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <HAL_RCC_GetSysClockFreq+0x168>)
 800545e:	613b      	str	r3, [r7, #16]
      break;
 8005460:	e08c      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005462:	4a49      	ldr	r2, [pc, #292]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 8005464:	6852      	ldr	r2, [r2, #4]
 8005466:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800546a:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800546c:	4a46      	ldr	r2, [pc, #280]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 800546e:	6852      	ldr	r2, [r2, #4]
 8005470:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005474:	2a00      	cmp	r2, #0
 8005476:	d023      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005478:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	ea03 0301 	and.w	r3, r3, r1
 800548e:	ea04 0402 	and.w	r4, r4, r2
 8005492:	4a3f      	ldr	r2, [pc, #252]	; (8005590 <HAL_RCC_GetSysClockFreq+0x168>)
 8005494:	fb02 f104 	mul.w	r1, r2, r4
 8005498:	2200      	movs	r2, #0
 800549a:	fb02 f203 	mul.w	r2, r2, r3
 800549e:	440a      	add	r2, r1
 80054a0:	493b      	ldr	r1, [pc, #236]	; (8005590 <HAL_RCC_GetSysClockFreq+0x168>)
 80054a2:	fba3 0101 	umull	r0, r1, r3, r1
 80054a6:	1853      	adds	r3, r2, r1
 80054a8:	4619      	mov	r1, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	461a      	mov	r2, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	f7fb fb4e 	bl	8000b54 <__aeabi_uldivmod>
 80054b8:	4603      	mov	r3, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e04c      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c0:	4a31      	ldr	r2, [pc, #196]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c2:	6852      	ldr	r2, [r2, #4]
 80054c4:	0992      	lsrs	r2, r2, #6
 80054c6:	4611      	mov	r1, r2
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f240 15ff 	movw	r5, #511	; 0x1ff
 80054d0:	f04f 0600 	mov.w	r6, #0
 80054d4:	ea05 0501 	and.w	r5, r5, r1
 80054d8:	ea06 0602 	and.w	r6, r6, r2
 80054dc:	4629      	mov	r1, r5
 80054de:	4632      	mov	r2, r6
 80054e0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80054e4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80054e8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80054ec:	4651      	mov	r1, sl
 80054ee:	465a      	mov	r2, fp
 80054f0:	46aa      	mov	sl, r5
 80054f2:	46b3      	mov	fp, r6
 80054f4:	4655      	mov	r5, sl
 80054f6:	465e      	mov	r6, fp
 80054f8:	1b4d      	subs	r5, r1, r5
 80054fa:	eb62 0606 	sbc.w	r6, r2, r6
 80054fe:	4629      	mov	r1, r5
 8005500:	4632      	mov	r2, r6
 8005502:	0194      	lsls	r4, r2, #6
 8005504:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005508:	018b      	lsls	r3, r1, #6
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	eb64 0402 	sbc.w	r4, r4, r2
 8005510:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005514:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005518:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800551c:	4643      	mov	r3, r8
 800551e:	464c      	mov	r4, r9
 8005520:	4655      	mov	r5, sl
 8005522:	465e      	mov	r6, fp
 8005524:	18ed      	adds	r5, r5, r3
 8005526:	eb46 0604 	adc.w	r6, r6, r4
 800552a:	462b      	mov	r3, r5
 800552c:	4634      	mov	r4, r6
 800552e:	02a2      	lsls	r2, r4, #10
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005542:	4618      	mov	r0, r3
 8005544:	4621      	mov	r1, r4
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	461a      	mov	r2, r3
 800554e:	4623      	mov	r3, r4
 8005550:	f7fb fb00 	bl	8000b54 <__aeabi_uldivmod>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCC_GetSysClockFreq+0x160>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	613b      	str	r3, [r7, #16]
      break;
 8005574:	e002      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetSysClockFreq+0x164>)
 8005578:	613b      	str	r3, [r7, #16]
      break;
 800557a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557c:	693b      	ldr	r3, [r7, #16]
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	00f42400 	.word	0x00f42400
 8005590:	017d7840 	.word	0x017d7840

08005594 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	200000c4 	.word	0x200000c4

080055ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055b0:	f7ff fff0 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055b4:	4601      	mov	r1, r0
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0a9b      	lsrs	r3, r3, #10
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	0802f04c 	.word	0x0802f04c

080055d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055d8:	f7ff ffdc 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055dc:	4601      	mov	r1, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0b5b      	lsrs	r3, r3, #13
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	0802f04c 	.word	0x0802f04c

080055fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	220f      	movs	r2, #15
 800560a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800560c:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0203 	and.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	08db      	lsrs	r3, r3, #3
 8005636:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <HAL_RCC_GetClockConfig+0x60>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005688:	4a69      	ldr	r2, [pc, #420]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568a:	4b69      	ldr	r3, [pc, #420]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005692:	6093      	str	r3, [r2, #8]
 8005694:	4966      	ldr	r1, [pc, #408]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	4b66      	ldr	r3, [pc, #408]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 80056aa:	2301      	movs	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d017      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ba:	495d      	ldr	r1, [pc, #372]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	4b5c      	ldr	r3, [pc, #368]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d8:	d101      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 80056da:	2301      	movs	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 80056e6:	2301      	movs	r3, #1
 80056e8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d017      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056f6:	494e      	ldr	r1, [pc, #312]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f8:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005714:	d101      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005716:	2301      	movs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005722:	2301      	movs	r3, #1
 8005724:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005732:	2301      	movs	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 808b 	beq.w	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005744:	4a3a      	ldr	r2, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005746:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574e:	6413      	str	r3, [r2, #64]	; 0x40
 8005750:	4b37      	ldr	r3, [pc, #220]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800575c:	4a35      	ldr	r2, [pc, #212]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800575e:	4b35      	ldr	r3, [pc, #212]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005766:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005768:	f7fc f98e 	bl	8001a88 <HAL_GetTick>
 800576c:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005770:	f7fc f98a 	bl	8001a88 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e355      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005782:	4b2c      	ldr	r3, [pc, #176]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800578e:	4b28      	ldr	r3, [pc, #160]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d035      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d02e      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fc f952 	bl	8001a88 <HAL_GetTick>
 80057e4:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e6:	e00a      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e8:	f7fc f94e 	bl	8001a88 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e317      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ee      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005816:	d111      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005818:	4805      	ldr	r0, [pc, #20]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005826:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005828:	400b      	ands	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	6083      	str	r3, [r0, #8]
 800582e:	e00b      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005830:	40023800 	.word	0x40023800
 8005834:	40007000 	.word	0x40007000
 8005838:	0ffffcff 	.word	0x0ffffcff
 800583c:	4ab0      	ldr	r2, [pc, #704]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800583e:	4bb0      	ldr	r3, [pc, #704]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005846:	6093      	str	r3, [r2, #8]
 8005848:	49ad      	ldr	r1, [pc, #692]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800584a:	4bad      	ldr	r3, [pc, #692]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800584c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005856:	4313      	orrs	r3, r2
 8005858:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	d010      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005866:	4aa6      	ldr	r2, [pc, #664]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005868:	4ba5      	ldr	r3, [pc, #660]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005872:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005876:	49a2      	ldr	r1, [pc, #648]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005878:	4ba1      	ldr	r3, [pc, #644]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800587a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005894:	499a      	ldr	r1, [pc, #616]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005896:	4b9a      	ldr	r3, [pc, #616]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058b6:	4992      	ldr	r1, [pc, #584]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058b8:	4b91      	ldr	r3, [pc, #580]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058d8:	4989      	ldr	r1, [pc, #548]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fa:	4981      	ldr	r1, [pc, #516]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058fc:	4b80      	ldr	r3, [pc, #512]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800591c:	4978      	ldr	r1, [pc, #480]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800591e:	4b78      	ldr	r3, [pc, #480]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f023 0203 	bic.w	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593e:	4970      	ldr	r1, [pc, #448]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f023 020c 	bic.w	r2, r3, #12
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005960:	4967      	ldr	r1, [pc, #412]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005962:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005982:	495f      	ldr	r1, [pc, #380]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005984:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059a4:	4956      	ldr	r1, [pc, #344]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059a6:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80059c6:	494e      	ldr	r1, [pc, #312]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059c8:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059e8:	4945      	ldr	r1, [pc, #276]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a0a:	493d      	ldr	r1, [pc, #244]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a0c:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a2c:	4934      	ldr	r1, [pc, #208]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a2e:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a4e:	492c      	ldr	r1, [pc, #176]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a8e:	491c      	ldr	r1, [pc, #112]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ab0:	4913      	ldr	r1, [pc, #76]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d005      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad6:	f040 80d8 	bne.w	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ae4:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fb ffcf 	bl	8001a88 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aee:	f7fb ffcb 	bl	8001a88 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b64      	cmp	r3, #100	; 0x64
 8005afa:	d903      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e196      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005b00:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b04:	4b6c      	ldr	r3, [pc, #432]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ee      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d021      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b24:	4b64      	ldr	r3, [pc, #400]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b32:	4b61      	ldr	r3, [pc, #388]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b40:	495d      	ldr	r1, [pc, #372]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	019a      	lsls	r2, r3, #6
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d02e      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8a:	d129      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b8c:	4b4a      	ldr	r3, [pc, #296]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b9a:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba0:	0f1b      	lsrs	r3, r3, #28
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ba8:	4943      	ldr	r1, [pc, #268]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005bc8:	493b      	ldr	r1, [pc, #236]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bca:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f023 021f 	bic.w	r2, r3, #31
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01d      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bec:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bfa:	4b2f      	ldr	r3, [pc, #188]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	0f1b      	lsrs	r3, r3, #28
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c08:	492b      	ldr	r1, [pc, #172]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	019a      	lsls	r2, r3, #6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	071b      	lsls	r3, r3, #28
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d011      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c34:	4920      	ldr	r1, [pc, #128]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c58:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c62:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c64:	f7fb ff10 	bl	8001a88 <HAL_GetTick>
 8005c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c6c:	f7fb ff0c 	bl	8001a88 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0d7      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	f040 80cd 	bne.w	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9e:	f7fb fef3 	bl	8001a88 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ca6:	f7fb feef 	bl	8001a88 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b64      	cmp	r3, #100	; 0x64
 8005cb2:	d903      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0ba      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005cb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cbc:	4b5e      	ldr	r3, [pc, #376]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc8:	d0ed      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d02e      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d12a      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf2:	4b51      	ldr	r3, [pc, #324]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d00:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d06:	0f1b      	lsrs	r3, r3, #28
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d0e:	494a      	ldr	r1, [pc, #296]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	019a      	lsls	r2, r3, #6
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	071b      	lsls	r3, r3, #28
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d2e:	4942      	ldr	r1, [pc, #264]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d30:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d022      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	d11d      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d5e:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	0e1b      	lsrs	r3, r3, #24
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d6c:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	0f1b      	lsrs	r3, r3, #28
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d7a:	492f      	ldr	r1, [pc, #188]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	019a      	lsls	r2, r3, #6
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	071b      	lsls	r3, r3, #28
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d028      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005da6:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005db4:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dc2:	491d      	ldr	r1, [pc, #116]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019a      	lsls	r2, r3, #6
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	071b      	lsls	r3, r3, #28
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005de2:	4915      	ldr	r1, [pc, #84]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005de4:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005df8:	4a0f      	ldr	r2, [pc, #60]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e04:	f7fb fe40 	bl	8001a88 <HAL_GetTick>
 8005e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e0c:	f7fb fe3c 	bl	8001a88 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e007      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2a:	d1ef      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40023800 	.word	0x40023800

08005e3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e025      	b.n	8005e9c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f00b f853 	bl	8010f10 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f001 fa7f 	bl	8007380 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	f001 fae9 	bl	8007464 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SDRAM_Read_32b+0x20>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e028      	b.n	8005f16 <HAL_SDRAM_Read_32b+0x72>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d101      	bne.n	8005edc <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e01c      	b.n	8005f16 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	d10e      	bne.n	8005f06 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e014      	b.n	8005f16 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	3304      	adds	r3, #4
 8005efe:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ef      	bne.n	8005eec <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_SDRAM_Write_32b+0x24>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e02a      	b.n	8005f9c <HAL_SDRAM_Write_32b+0x7a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d101      	bne.n	8005f62 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e01c      	b.n	8005f9c <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d002      	beq.n	8005f6e <HAL_SDRAM_Write_32b+0x4c>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d10e      	bne.n	8005f8c <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e014      	b.n	8005f9c <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3304      	adds	r3, #4
 8005f84:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ef      	bne.n	8005f72 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e018      	b.n	8005ff6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 fac5 	bl	8007564 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d104      	bne.n	8005fec <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005fea:	e003      	b.n	8005ff4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d101      	bne.n	8006018 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006014:	2302      	movs	r3, #2
 8006016:	e00e      	b.n	8006036 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fabd 	bl	80075a6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e01d      	b.n	800608c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f00e fd4d 	bl	8014b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fa91 	bl	80065a4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_Base_Stop>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10f      	bne.n	800610a <HAL_TIM_Base_Stop+0x40>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f240 4344 	movw	r3, #1092	; 0x444
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <HAL_TIM_Base_Stop+0x40>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	68d2      	ldr	r2, [r2, #12]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d122      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d11b      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f06f 0202 	mvn.w	r2, #2
 8006182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9e5 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800619e:	e005      	b.n	80061ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f9d7 	bl	8006554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f9e8 	bl	800657c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d122      	bne.n	8006206 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d11b      	bne.n	8006206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f06f 0204 	mvn.w	r2, #4
 80061d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9bb 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 80061f2:	e005      	b.n	8006200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9ad 	bl	8006554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9be 	bl	800657c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d122      	bne.n	800625a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b08      	cmp	r3, #8
 8006220:	d11b      	bne.n	800625a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f06f 0208 	mvn.w	r2, #8
 800622a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2204      	movs	r2, #4
 8006230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f991 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 8006246:	e005      	b.n	8006254 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f983 	bl	8006554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f994 	bl	800657c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b10      	cmp	r3, #16
 8006266:	d122      	bne.n	80062ae <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b10      	cmp	r3, #16
 8006274:	d11b      	bne.n	80062ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f06f 0210 	mvn.w	r2, #16
 800627e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2208      	movs	r2, #8
 8006284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f967 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800629a:	e005      	b.n	80062a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f959 	bl	8006554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f96a 	bl	800657c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0201 	mvn.w	r2, #1
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f00d fe3b 	bl	8013f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b80      	cmp	r3, #128	; 0x80
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fb07 	bl	8006914 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 faf0 	bl	8006914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f918 	bl	8006590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0220 	mvn.w	r2, #32
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 faba 	bl	8006900 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIM_ConfigClockSource+0x1c>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e0c8      	b.n	8006542 <HAL_TIM_ConfigClockSource+0x1ae>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4b60      	ldr	r3, [pc, #384]	; (800654c <HAL_TIM_ConfigClockSource+0x1b8>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d077      	beq.n	80064d8 <HAL_TIM_ConfigClockSource+0x144>
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d80e      	bhi.n	800640a <HAL_TIM_ConfigClockSource+0x76>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	f000 808a 	beq.w	8006506 <HAL_TIM_ConfigClockSource+0x172>
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d802      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x68>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d07e      	beq.n	80064f8 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 80063fa:	e099      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	f000 8089 	beq.w	8006514 <HAL_TIM_ConfigClockSource+0x180>
 8006402:	2b30      	cmp	r3, #48	; 0x30
 8006404:	f000 808d 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8006408:	e092      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800640a:	2b70      	cmp	r3, #112	; 0x70
 800640c:	d016      	beq.n	800643c <HAL_TIM_ConfigClockSource+0xa8>
 800640e:	2b70      	cmp	r3, #112	; 0x70
 8006410:	d804      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x88>
 8006412:	2b50      	cmp	r3, #80	; 0x50
 8006414:	d040      	beq.n	8006498 <HAL_TIM_ConfigClockSource+0x104>
 8006416:	2b60      	cmp	r3, #96	; 0x60
 8006418:	d04e      	beq.n	80064b8 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 800641a:	e089      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d003      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x96>
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d024      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006428:	e082      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6899      	ldr	r1, [r3, #8]
 8006434:	4b46      	ldr	r3, [pc, #280]	; (8006550 <HAL_TIM_ConfigClockSource+0x1bc>)
 8006436:	400b      	ands	r3, r1
 8006438:	6093      	str	r3, [r2, #8]
    break;
 800643a:	e079      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6899      	ldr	r1, [r3, #8]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f000 f9e1 	bl	8006812 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4b3c      	ldr	r3, [pc, #240]	; (800654c <HAL_TIM_ConfigClockSource+0x1b8>)
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006466:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
    break;
 8006470:	e05e      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6899      	ldr	r1, [r3, #8]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f000 f9c6 	bl	8006812 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	6892      	ldr	r2, [r2, #8]
 8006490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006494:	609a      	str	r2, [r3, #8]
    break;
 8006496:	e04b      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	461a      	mov	r2, r3
 80064a6:	f000 f92d 	bl	8006704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2150      	movs	r1, #80	; 0x50
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f98e 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 80064b6:	e03b      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	461a      	mov	r2, r3
 80064c6:	f000 f950 	bl	800676a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2160      	movs	r1, #96	; 0x60
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f97e 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 80064d6:	e02b      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6859      	ldr	r1, [r3, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f000 f90d 	bl	8006704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2140      	movs	r1, #64	; 0x40
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 f96e 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 80064f6:	e01b      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f967 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 8006504:	e014      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2110      	movs	r1, #16
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f960 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 8006512:	e00d      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2120      	movs	r1, #32
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f959 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 8006520:	e006      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2130      	movs	r1, #48	; 0x30
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f952 	bl	80067d2 <TIM_ITRx_SetConfig>
    break;
 800652e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	fffeff88 	.word	0xfffeff88
 8006550:	fffefff8 	.word	0xfffefff8

08006554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a47      	ldr	r2, [pc, #284]	; (80066d8 <TIM_Base_SetConfig+0x134>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <TIM_Base_SetConfig+0x44>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d00f      	beq.n	80065e8 <TIM_Base_SetConfig+0x44>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a44      	ldr	r2, [pc, #272]	; (80066dc <TIM_Base_SetConfig+0x138>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0x44>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a43      	ldr	r2, [pc, #268]	; (80066e0 <TIM_Base_SetConfig+0x13c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0x44>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a42      	ldr	r2, [pc, #264]	; (80066e4 <TIM_Base_SetConfig+0x140>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0x44>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a41      	ldr	r2, [pc, #260]	; (80066e8 <TIM_Base_SetConfig+0x144>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <TIM_Base_SetConfig+0x48>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <TIM_Base_SetConfig+0x4a>
 80065ec:	2300      	movs	r3, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <TIM_Base_SetConfig+0x134>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d02b      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006612:	d027      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a31      	ldr	r2, [pc, #196]	; (80066dc <TIM_Base_SetConfig+0x138>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d023      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a30      	ldr	r2, [pc, #192]	; (80066e0 <TIM_Base_SetConfig+0x13c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d01f      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <TIM_Base_SetConfig+0x140>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01b      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <TIM_Base_SetConfig+0x144>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d017      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2d      	ldr	r2, [pc, #180]	; (80066ec <TIM_Base_SetConfig+0x148>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <TIM_Base_SetConfig+0x14c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00f      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <TIM_Base_SetConfig+0x150>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <TIM_Base_SetConfig+0x154>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a29      	ldr	r2, [pc, #164]	; (80066fc <TIM_Base_SetConfig+0x158>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xc0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a28      	ldr	r2, [pc, #160]	; (8006700 <TIM_Base_SetConfig+0x15c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d101      	bne.n	8006668 <TIM_Base_SetConfig+0xc4>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <TIM_Base_SetConfig+0xc6>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a0c      	ldr	r2, [pc, #48]	; (80066d8 <TIM_Base_SetConfig+0x134>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_Base_SetConfig+0x110>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <TIM_Base_SetConfig+0x144>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d101      	bne.n	80066b8 <TIM_Base_SetConfig+0x114>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <TIM_Base_SetConfig+0x116>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	615a      	str	r2, [r3, #20]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	40001800 	.word	0x40001800
 80066fc:	40001c00 	.word	0x40001c00
 8006700:	40002000 	.word	0x40002000

08006704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0201 	bic.w	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 030a 	bic.w	r3, r3, #10
 8006748:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800676a:	b480      	push	{r7}
 800676c:	b087      	sub	sp, #28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 0210 	bic.w	r2, r3, #16
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	031b      	lsls	r3, r3, #12
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	f043 0307 	orr.w	r3, r3, #7
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	431a      	orrs	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4313      	orrs	r3, r2
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	609a      	str	r2, [r3, #8]
} 
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800686c:	2302      	movs	r3, #2
 800686e:	e03d      	b.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1a      	ldr	r2, [pc, #104]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a19      	ldr	r2, [pc, #100]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
} 
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40010400 	.word	0x40010400

08006900 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e043      	b.n	80069c2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f00e f908 	bl	8014b64 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2224      	movs	r2, #36	; 0x24
 8006958:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9c3 	bl	8006cf8 <UART_SetConfig>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e022      	b.n	80069c2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc25 	bl	80071d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	6852      	ldr	r2, [r2, #4]
 8006994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006998:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	6892      	ldr	r2, [r2, #8]
 80069a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fcac 	bl	8007318 <UART_CheckIdleState>
 80069c0:	4603      	mov	r3, r0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b088      	sub	sp, #32
 80069ce:	af02      	add	r7, sp, #8
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d175      	bne.n	8006ad6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_UART_Transmit+0x2c>
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e06e      	b.n	8006ad8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_UART_Transmit+0x3e>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e067      	b.n	8006ad8 <HAL_UART_Transmit+0x10e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2221      	movs	r2, #33	; 0x21
 8006a1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a1e:	f7fb f833 	bl	8001a88 <HAL_GetTick>
 8006a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006a34:	e032      	b.n	8006a9c <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f906 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e03a      	b.n	8006ad8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d110      	bne.n	8006a8e <HAL_UART_Transmit+0xc4>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10c      	bne.n	8006a8e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	8812      	ldrh	r2, [r2, #0]
 8006a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a84:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3302      	adds	r3, #2
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	e006      	b.n	8006a9c <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1c59      	adds	r1, r3, #1
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1c6      	bne.n	8006a36 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2140      	movs	r1, #64	; 0x40
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f8d6 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e00a      	b.n	8006ad8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e000      	b.n	8006ad8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ad6:	2302      	movs	r3, #2
  }
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	f040 80ac 	bne.w	8006c5a <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_Receive+0x2e>
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0a4      	b.n	8006c5c <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Receive+0x40>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e09d      	b.n	8006c5c <HAL_UART_Receive+0x17c>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2222      	movs	r2, #34	; 0x22
 8006b32:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006b36:	f7fa ffa7 	bl	8001a88 <HAL_GetTick>
 8006b3a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d10e      	bne.n	8006b74 <HAL_UART_Receive+0x94>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <HAL_UART_Receive+0x8a>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b68:	e028      	b.n	8006bbc <HAL_UART_Receive+0xdc>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	22ff      	movs	r2, #255	; 0xff
 8006b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b72:	e023      	b.n	8006bbc <HAL_UART_Receive+0xdc>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10d      	bne.n	8006b98 <HAL_UART_Receive+0xb8>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_UART_Receive+0xae>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	22ff      	movs	r2, #255	; 0xff
 8006b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b8c:	e016      	b.n	8006bbc <HAL_UART_Receive+0xdc>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	227f      	movs	r2, #127	; 0x7f
 8006b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b96:	e011      	b.n	8006bbc <HAL_UART_Receive+0xdc>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba0:	d10c      	bne.n	8006bbc <HAL_UART_Receive+0xdc>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <HAL_UART_Receive+0xd4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	227f      	movs	r2, #127	; 0x7f
 8006bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bb2:	e003      	b.n	8006bbc <HAL_UART_Receive+0xdc>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	223f      	movs	r2, #63	; 0x3f
 8006bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bc2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8006bc4:	e039      	b.n	8006c3a <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2200      	movs	r2, #0
 8006be0:	2120      	movs	r1, #32
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f83e 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e034      	b.n	8006c5c <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	d112      	bne.n	8006c22 <HAL_UART_Receive+0x142>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10e      	bne.n	8006c22 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	8b7b      	ldrh	r3, [r7, #26]
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	e00b      	b.n	8006c3a <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	60ba      	str	r2, [r7, #8]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c2e:	b2d1      	uxtb	r1, r2
 8006c30:	8b7a      	ldrh	r2, [r7, #26]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	400a      	ands	r2, r1
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1bf      	bne.n	8006bc6 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e000      	b.n	8006c5c <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	e02c      	b.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d028      	beq.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c84:	f7fa ff00 	bl	8001a88 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d31d      	bcc.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ca2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	6892      	ldr	r2, [r2, #8]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e00f      	b.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69da      	ldr	r2, [r3, #28]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	401a      	ands	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	bf0c      	ite	eq
 8006ce0:	2301      	moveq	r3, #1
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d0c3      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006d04:	2310      	movs	r3, #16
 8006d06:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	4baa      	ldr	r3, [pc, #680]	; (8006fe0 <UART_SetConfig+0x2e8>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	6852      	ldr	r2, [r2, #4]
 8006d4a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68d2      	ldr	r2, [r2, #12]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	6892      	ldr	r2, [r2, #8]
 8006d6c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a9a      	ldr	r2, [pc, #616]	; (8006fe4 <UART_SetConfig+0x2ec>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d11f      	bne.n	8006dc0 <UART_SetConfig+0xc8>
 8006d80:	4b99      	ldr	r3, [pc, #612]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f200 813e 	bhi.w	800700c <UART_SetConfig+0x314>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0xa0>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006db5 	.word	0x08006db5
 8006da0:	08006daf 	.word	0x08006daf
 8006da4:	08006dbb 	.word	0x08006dbb
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
 8006dac:	e12e      	b.n	800700c <UART_SetConfig+0x314>
 8006dae:	2302      	movs	r3, #2
 8006db0:	75fb      	strb	r3, [r7, #23]
 8006db2:	e12b      	b.n	800700c <UART_SetConfig+0x314>
 8006db4:	2304      	movs	r3, #4
 8006db6:	75fb      	strb	r3, [r7, #23]
 8006db8:	e128      	b.n	800700c <UART_SetConfig+0x314>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	75fb      	strb	r3, [r7, #23]
 8006dbe:	e125      	b.n	800700c <UART_SetConfig+0x314>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a89      	ldr	r2, [pc, #548]	; (8006fec <UART_SetConfig+0x2f4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d130      	bne.n	8006e2c <UART_SetConfig+0x134>
 8006dca:	4b87      	ldr	r3, [pc, #540]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	f200 8119 	bhi.w	800700c <UART_SetConfig+0x314>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0xe8>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e15 	.word	0x08006e15
 8006de4:	0800700d 	.word	0x0800700d
 8006de8:	0800700d 	.word	0x0800700d
 8006dec:	0800700d 	.word	0x0800700d
 8006df0:	08006e21 	.word	0x08006e21
 8006df4:	0800700d 	.word	0x0800700d
 8006df8:	0800700d 	.word	0x0800700d
 8006dfc:	0800700d 	.word	0x0800700d
 8006e00:	08006e1b 	.word	0x08006e1b
 8006e04:	0800700d 	.word	0x0800700d
 8006e08:	0800700d 	.word	0x0800700d
 8006e0c:	0800700d 	.word	0x0800700d
 8006e10:	08006e27 	.word	0x08006e27
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
 8006e18:	e0f8      	b.n	800700c <UART_SetConfig+0x314>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	75fb      	strb	r3, [r7, #23]
 8006e1e:	e0f5      	b.n	800700c <UART_SetConfig+0x314>
 8006e20:	2304      	movs	r3, #4
 8006e22:	75fb      	strb	r3, [r7, #23]
 8006e24:	e0f2      	b.n	800700c <UART_SetConfig+0x314>
 8006e26:	2308      	movs	r3, #8
 8006e28:	75fb      	strb	r3, [r7, #23]
 8006e2a:	e0ef      	b.n	800700c <UART_SetConfig+0x314>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6f      	ldr	r2, [pc, #444]	; (8006ff0 <UART_SetConfig+0x2f8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d11c      	bne.n	8006e70 <UART_SetConfig+0x178>
 8006e36:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d00f      	beq.n	8006e64 <UART_SetConfig+0x16c>
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d802      	bhi.n	8006e4e <UART_SetConfig+0x156>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <UART_SetConfig+0x160>
 8006e4c:	e0de      	b.n	800700c <UART_SetConfig+0x314>
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d005      	beq.n	8006e5e <UART_SetConfig+0x166>
 8006e52:	2b30      	cmp	r3, #48	; 0x30
 8006e54:	d009      	beq.n	8006e6a <UART_SetConfig+0x172>
 8006e56:	e0d9      	b.n	800700c <UART_SetConfig+0x314>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	e0d6      	b.n	800700c <UART_SetConfig+0x314>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
 8006e62:	e0d3      	b.n	800700c <UART_SetConfig+0x314>
 8006e64:	2304      	movs	r3, #4
 8006e66:	75fb      	strb	r3, [r7, #23]
 8006e68:	e0d0      	b.n	800700c <UART_SetConfig+0x314>
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	75fb      	strb	r3, [r7, #23]
 8006e6e:	e0cd      	b.n	800700c <UART_SetConfig+0x314>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a5f      	ldr	r2, [pc, #380]	; (8006ff4 <UART_SetConfig+0x2fc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d11c      	bne.n	8006eb4 <UART_SetConfig+0x1bc>
 8006e7a:	4b5b      	ldr	r3, [pc, #364]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d00f      	beq.n	8006ea8 <UART_SetConfig+0x1b0>
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d802      	bhi.n	8006e92 <UART_SetConfig+0x19a>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <UART_SetConfig+0x1a4>
 8006e90:	e0bc      	b.n	800700c <UART_SetConfig+0x314>
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d005      	beq.n	8006ea2 <UART_SetConfig+0x1aa>
 8006e96:	2bc0      	cmp	r3, #192	; 0xc0
 8006e98:	d009      	beq.n	8006eae <UART_SetConfig+0x1b6>
 8006e9a:	e0b7      	b.n	800700c <UART_SetConfig+0x314>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	e0b4      	b.n	800700c <UART_SetConfig+0x314>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	75fb      	strb	r3, [r7, #23]
 8006ea6:	e0b1      	b.n	800700c <UART_SetConfig+0x314>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	75fb      	strb	r3, [r7, #23]
 8006eac:	e0ae      	b.n	800700c <UART_SetConfig+0x314>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	75fb      	strb	r3, [r7, #23]
 8006eb2:	e0ab      	b.n	800700c <UART_SetConfig+0x314>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a4f      	ldr	r2, [pc, #316]	; (8006ff8 <UART_SetConfig+0x300>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d120      	bne.n	8006f00 <UART_SetConfig+0x208>
 8006ebe:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ecc:	d012      	beq.n	8006ef4 <UART_SetConfig+0x1fc>
 8006ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed2:	d802      	bhi.n	8006eda <UART_SetConfig+0x1e2>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <UART_SetConfig+0x1f0>
 8006ed8:	e098      	b.n	800700c <UART_SetConfig+0x314>
 8006eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ede:	d006      	beq.n	8006eee <UART_SetConfig+0x1f6>
 8006ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ee4:	d009      	beq.n	8006efa <UART_SetConfig+0x202>
 8006ee6:	e091      	b.n	800700c <UART_SetConfig+0x314>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75fb      	strb	r3, [r7, #23]
 8006eec:	e08e      	b.n	800700c <UART_SetConfig+0x314>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	75fb      	strb	r3, [r7, #23]
 8006ef2:	e08b      	b.n	800700c <UART_SetConfig+0x314>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	75fb      	strb	r3, [r7, #23]
 8006ef8:	e088      	b.n	800700c <UART_SetConfig+0x314>
 8006efa:	2308      	movs	r3, #8
 8006efc:	75fb      	strb	r3, [r7, #23]
 8006efe:	e085      	b.n	800700c <UART_SetConfig+0x314>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a3d      	ldr	r2, [pc, #244]	; (8006ffc <UART_SetConfig+0x304>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d120      	bne.n	8006f4c <UART_SetConfig+0x254>
 8006f0a:	4b37      	ldr	r3, [pc, #220]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d012      	beq.n	8006f40 <UART_SetConfig+0x248>
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d802      	bhi.n	8006f26 <UART_SetConfig+0x22e>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <UART_SetConfig+0x23c>
 8006f24:	e072      	b.n	800700c <UART_SetConfig+0x314>
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d006      	beq.n	8006f3a <UART_SetConfig+0x242>
 8006f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f30:	d009      	beq.n	8006f46 <UART_SetConfig+0x24e>
 8006f32:	e06b      	b.n	800700c <UART_SetConfig+0x314>
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	e068      	b.n	800700c <UART_SetConfig+0x314>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	75fb      	strb	r3, [r7, #23]
 8006f3e:	e065      	b.n	800700c <UART_SetConfig+0x314>
 8006f40:	2304      	movs	r3, #4
 8006f42:	75fb      	strb	r3, [r7, #23]
 8006f44:	e062      	b.n	800700c <UART_SetConfig+0x314>
 8006f46:	2308      	movs	r3, #8
 8006f48:	75fb      	strb	r3, [r7, #23]
 8006f4a:	e05f      	b.n	800700c <UART_SetConfig+0x314>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <UART_SetConfig+0x308>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d120      	bne.n	8006f98 <UART_SetConfig+0x2a0>
 8006f56:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d012      	beq.n	8006f8c <UART_SetConfig+0x294>
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d802      	bhi.n	8006f72 <UART_SetConfig+0x27a>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <UART_SetConfig+0x288>
 8006f70:	e04c      	b.n	800700c <UART_SetConfig+0x314>
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f76:	d006      	beq.n	8006f86 <UART_SetConfig+0x28e>
 8006f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f7c:	d009      	beq.n	8006f92 <UART_SetConfig+0x29a>
 8006f7e:	e045      	b.n	800700c <UART_SetConfig+0x314>
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
 8006f84:	e042      	b.n	800700c <UART_SetConfig+0x314>
 8006f86:	2302      	movs	r3, #2
 8006f88:	75fb      	strb	r3, [r7, #23]
 8006f8a:	e03f      	b.n	800700c <UART_SetConfig+0x314>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	75fb      	strb	r3, [r7, #23]
 8006f90:	e03c      	b.n	800700c <UART_SetConfig+0x314>
 8006f92:	2308      	movs	r3, #8
 8006f94:	75fb      	strb	r3, [r7, #23]
 8006f96:	e039      	b.n	800700c <UART_SetConfig+0x314>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <UART_SetConfig+0x30c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d135      	bne.n	800700e <UART_SetConfig+0x316>
 8006fa2:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <UART_SetConfig+0x2f0>)
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb0:	d012      	beq.n	8006fd8 <UART_SetConfig+0x2e0>
 8006fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb6:	d802      	bhi.n	8006fbe <UART_SetConfig+0x2c6>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <UART_SetConfig+0x2d4>
 8006fbc:	e026      	b.n	800700c <UART_SetConfig+0x314>
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc2:	d006      	beq.n	8006fd2 <UART_SetConfig+0x2da>
 8006fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fc8:	d01e      	beq.n	8007008 <UART_SetConfig+0x310>
 8006fca:	e01f      	b.n	800700c <UART_SetConfig+0x314>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
 8006fd0:	e01c      	b.n	800700c <UART_SetConfig+0x314>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	75fb      	strb	r3, [r7, #23]
 8006fd6:	e019      	b.n	800700c <UART_SetConfig+0x314>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	75fb      	strb	r3, [r7, #23]
 8006fdc:	e016      	b.n	800700c <UART_SetConfig+0x314>
 8006fde:	bf00      	nop
 8006fe0:	efff69f3 	.word	0xefff69f3
 8006fe4:	40011000 	.word	0x40011000
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40004400 	.word	0x40004400
 8006ff0:	40004800 	.word	0x40004800
 8006ff4:	40004c00 	.word	0x40004c00
 8006ff8:	40005000 	.word	0x40005000
 8006ffc:	40011400 	.word	0x40011400
 8007000:	40007800 	.word	0x40007800
 8007004:	40007c00 	.word	0x40007c00
 8007008:	2308      	movs	r3, #8
 800700a:	75fb      	strb	r3, [r7, #23]
 800700c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007016:	d16c      	bne.n	80070f2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b08      	cmp	r3, #8
 800701c:	d854      	bhi.n	80070c8 <UART_SetConfig+0x3d0>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x32c>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007049 	.word	0x08007049
 8007028:	08007065 	.word	0x08007065
 800702c:	08007081 	.word	0x08007081
 8007030:	080070c9 	.word	0x080070c9
 8007034:	08007097 	.word	0x08007097
 8007038:	080070c9 	.word	0x080070c9
 800703c:	080070c9 	.word	0x080070c9
 8007040:	080070c9 	.word	0x080070c9
 8007044:	080070b3 	.word	0x080070b3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007048:	f7fe fab0 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800704c:	4603      	mov	r3, r0
 800704e:	005a      	lsls	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	441a      	add	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	82bb      	strh	r3, [r7, #20]
      break;
 8007062:	e034      	b.n	80070ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007064:	f7fe fab6 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8007068:	4603      	mov	r3, r0
 800706a:	005a      	lsls	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	441a      	add	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	82bb      	strh	r3, [r7, #20]
      break;
 800707e:	e026      	b.n	80070ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	085a      	lsrs	r2, r3, #1
 8007086:	4b51      	ldr	r3, [pc, #324]	; (80071cc <UART_SetConfig+0x4d4>)
 8007088:	4413      	add	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6852      	ldr	r2, [r2, #4]
 800708e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007092:	82bb      	strh	r3, [r7, #20]
      break;
 8007094:	e01b      	b.n	80070ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007096:	f7fe f9c7 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 800709a:	4603      	mov	r3, r0
 800709c:	005a      	lsls	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	82bb      	strh	r3, [r7, #20]
      break;
 80070b0:	e00d      	b.n	80070ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c4:	82bb      	strh	r3, [r7, #20]
      break;
 80070c6:	e002      	b.n	80070ce <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	74fb      	strb	r3, [r7, #19]
      break;
 80070cc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80070ce:	8abb      	ldrh	r3, [r7, #20]
 80070d0:	f023 030f 	bic.w	r3, r3, #15
 80070d4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070d6:	8abb      	ldrh	r3, [r7, #20]
 80070d8:	105b      	asrs	r3, r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	897a      	ldrh	r2, [r7, #10]
 80070ee:	60da      	str	r2, [r3, #12]
 80070f0:	e067      	b.n	80071c2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d861      	bhi.n	80071bc <UART_SetConfig+0x4c4>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0x408>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007125 	.word	0x08007125
 8007104:	08007145 	.word	0x08007145
 8007108:	08007165 	.word	0x08007165
 800710c:	080071bd 	.word	0x080071bd
 8007110:	08007181 	.word	0x08007181
 8007114:	080071bd 	.word	0x080071bd
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071bd 	.word	0x080071bd
 8007120:	080071a1 	.word	0x080071a1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681c      	ldr	r4, [r3, #0]
 8007128:	f7fe fa40 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800712c:	4602      	mov	r2, r0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	fbb2 f3f3 	udiv	r3, r2, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	60e3      	str	r3, [r4, #12]
      break;
 8007142:	e03e      	b.n	80071c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681c      	ldr	r4, [r3, #0]
 8007148:	f7fe fa44 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 800714c:	4602      	mov	r2, r0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	fbb2 f3f3 	udiv	r3, r2, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	60e3      	str	r3, [r4, #12]
      break;
 8007162:	e02e      	b.n	80071c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	0859      	lsrs	r1, r3, #1
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <UART_SetConfig+0x4d8>)
 8007170:	440b      	add	r3, r1
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	6849      	ldr	r1, [r1, #4]
 8007176:	fbb3 f3f1 	udiv	r3, r3, r1
 800717a:	b29b      	uxth	r3, r3
 800717c:	60d3      	str	r3, [r2, #12]
      break;
 800717e:	e020      	b.n	80071c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681c      	ldr	r4, [r3, #0]
 8007184:	f7fe f950 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	441a      	add	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	fbb2 f3f3 	udiv	r3, r2, r3
 800719a:	b29b      	uxth	r3, r3
 800719c:	60e3      	str	r3, [r4, #12]
      break;
 800719e:	e010      	b.n	80071c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6852      	ldr	r2, [r2, #4]
 80071a8:	0852      	lsrs	r2, r2, #1
 80071aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6852      	ldr	r2, [r2, #4]
 80071b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80071b6:	b292      	uxth	r2, r2
 80071b8:	60da      	str	r2, [r3, #12]
      break;
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	74fb      	strb	r3, [r7, #19]
      break;
 80071c0:	bf00      	nop
    }
  }

  return ret;
 80071c2:	7cfb      	ldrb	r3, [r7, #19]

}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}
 80071cc:	01e84800 	.word	0x01e84800
 80071d0:	00f42400 	.word	0x00f42400

080071d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	6852      	ldr	r2, [r2, #4]
 80071f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	6852      	ldr	r2, [r2, #4]
 8007214:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	6852      	ldr	r2, [r2, #4]
 8007236:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	6892      	ldr	r2, [r2, #8]
 800727a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	6892      	ldr	r2, [r2, #8]
 800729c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	6852      	ldr	r2, [r2, #4]
 80072be:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d2:	d10a      	bne.n	80072ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	6852      	ldr	r2, [r2, #4]
 8007300:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800732a:	f7fa fbad 	bl	8001a88 <HAL_GetTick>
 800732e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b08      	cmp	r3, #8
 800733c:	d10e      	bne.n	800735c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fc89 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e00c      	b.n	8007376 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d027      	beq.n	80073ea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4b2f      	ldr	r3, [pc, #188]	; (8007460 <FMC_SDRAM_Init+0xe0>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073b0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80073b6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80073bc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80073c2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80073c8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80073ce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80073d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e032      	b.n	8007450 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007400:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007406:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4b12      	ldr	r3, [pc, #72]	; (8007460 <FMC_SDRAM_Init+0xe0>)
 8007418:	4013      	ands	r3, r2
 800741a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007424:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800742a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007430:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007436:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800743c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4313      	orrs	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	ffff8000 	.word	0xffff8000

08007464 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d02e      	beq.n	80074dc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800748a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	3b01      	subs	r3, #1
 8007498:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800749a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80074a4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80074ae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80074b8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	3b01      	subs	r3, #1
 80074c0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80074c2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074cc:	4313      	orrs	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	609a      	str	r2, [r3, #8]
 80074da:	e039      	b.n	8007550 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <FMC_SDRAM_Timing_Init+0xfc>)
 80074e6:	4013      	ands	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074fa:	4313      	orrs	r3, r2
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800750e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	3b01      	subs	r3, #1
 800751c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800751e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	3b01      	subs	r3, #1
 8007526:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007528:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	3b01      	subs	r3, #1
 8007530:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007532:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	3b01      	subs	r3, #1
 800753a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800753c:	4313      	orrs	r3, r2
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	ff0f0fff 	.word	0xff0f0fff

08007564 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800757c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	3b01      	subs	r3, #1
 8007584:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007586:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075cc:	b084      	sub	sp, #16
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	f107 0014 	add.w	r0, r7, #20
 80075da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d11e      	bne.n	8007622 <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	4b1d      	ldr	r3, [pc, #116]	; (800766c <USB_CoreInit+0xa0>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8007608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760a:	2b01      	cmp	r3, #1
 800760c:	d105      	bne.n	800761a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f9a4 	bl	8008968 <USB_CoreReset>
 8007620:	e00c      	b.n	800763c <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f99a 	bl	8008968 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10b      	bne.n	800765a <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f043 0206 	orr.w	r2, r3, #6
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007666:	b004      	add	sp, #16
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	ffbdffbf 	.word	0xffbdffbf

08007670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d106      	bne.n	80076e0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	e008      	b.n	80076f2 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 80076f2:	2032      	movs	r0, #50	; 0x32
 80076f4:	f7fa f9d4 	bl	8001aa0 <HAL_Delay>

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007704:	b084      	sub	sp, #16
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	f107 001c 	add.w	r0, r7, #28
 8007712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 8007726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007728:	2b00      	cmp	r3, #0
 800772a:	d111      	bne.n	8007750 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007756:	461a      	mov	r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10c      	bne.n	800778e <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800777a:	2100      	movs	r1, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f957 	bl	8007a30 <USB_SetDevSpeed>
 8007782:	e018      	b.n	80077b6 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f952 	bl	8007a30 <USB_SetDevSpeed>
 800778c:	e013      	b.n	80077b6 <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b03      	cmp	r3, #3
 8007792:	d10c      	bne.n	80077ae <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800779a:	2100      	movs	r1, #0
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f947 	bl	8007a30 <USB_SetDevSpeed>
 80077a2:	e008      	b.n	80077b6 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80077a4:	2101      	movs	r1, #1
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f942 	bl	8007a30 <USB_SetDevSpeed>
 80077ac:	e003      	b.n	80077b6 <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80077ae:	2103      	movs	r1, #3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f93d 	bl	8007a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80077b6:	2110      	movs	r1, #16
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f8f1 	bl	80079a0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f914 	bl	80079ec <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	461a      	mov	r2, r3
 80077cc:	2300      	movs	r3, #0
 80077ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	461a      	mov	r2, r3
 80077d8:	2300      	movs	r3, #0
 80077da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	461a      	mov	r2, r3
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e034      	b.n	8007866 <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007812:	d10a      	bne.n	800782a <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	461a      	mov	r2, r3
 8007822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	e008      	b.n	800783c <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	461a      	mov	r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007848:	461a      	mov	r2, r3
 800784a:	2300      	movs	r3, #0
 800784c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	461a      	mov	r2, r3
 800785c:	23ff      	movs	r3, #255	; 0xff
 800785e:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	429a      	cmp	r2, r3
 800786c:	d8c6      	bhi.n	80077fc <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e034      	b.n	80078de <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800788a:	d10a      	bne.n	80078a2 <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e008      	b.n	80078b4 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	23ff      	movs	r3, #255	; 0xff
 80078d6:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3301      	adds	r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d8c6      	bhi.n	8007874 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d115      	bne.n	800792e <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	461a      	mov	r2, r3
 800790a:	4b21      	ldr	r3, [pc, #132]	; (8007990 <USB_DevInit+0x28c>)
 800790c:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	4619      	mov	r1, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <USB_DevInit+0x290>)
 8007920:	4313      	orrs	r3, r2
 8007922:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800793a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f043 0210 	orr.w	r2, r3, #16
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <USB_DevInit+0x294>)
 8007954:	4313      	orrs	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f043 0208 	orr.w	r2, r3, #8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	2b01      	cmp	r3, #1
 8007970:	d105      	bne.n	800797e <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <USB_DevInit+0x298>)
 8007978:	4313      	orrs	r3, r2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798a:	b004      	add	sp, #16
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	00800100 	.word	0x00800100
 8007994:	00010003 	.word	0x00010003
 8007998:	803c3800 	.word	0x803c3800
 800799c:	40000004 	.word	0x40000004

080079a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	019b      	lsls	r3, r3, #6
 80079b2:	f043 0220 	orr.w	r2, r3, #32
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <USB_FlushTxFifo+0x48>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e006      	b.n	80079da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d0f0      	beq.n	80079ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	00030d40 	.word	0x00030d40

080079ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2210      	movs	r2, #16
 80079fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <USB_FlushRxFifo+0x40>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e006      	b.n	8007a1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d0f0      	beq.n	80079fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	00030d40 	.word	0x00030d40

08007a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	4619      	mov	r1, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0306 	and.w	r3, r3, #6
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e01c      	b.n	8007abc <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0306 	and.w	r3, r3, #6
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d007      	beq.n	8007aa2 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d102      	bne.n	8007aa8 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	73fb      	strb	r3, [r7, #15]
 8007aa6:	e009      	b.n	8007abc <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0306 	and.w	r3, r3, #6
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d101      	bne.n	8007abc <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d13c      	bne.n	8007b58 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	2301      	movs	r3, #1
 8007af6:	4083      	lsls	r3, r0
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d158      	bne.n	8007bc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	4618      	mov	r0, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	78c9      	ldrb	r1, [r1, #3]
 8007b42:	0489      	lsls	r1, r1, #18
 8007b44:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	7809      	ldrb	r1, [r1, #0]
 8007b4a:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <USB_ActivateEndpoint+0x10c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	e037      	b.n	8007bc8 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	4619      	mov	r1, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4082      	lsls	r2, r0
 8007b72:	0412      	lsls	r2, r2, #16
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11b      	bne.n	8007bc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	78c9      	ldrb	r1, [r1, #3]
 8007bbc:	0489      	lsls	r1, r1, #18
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <USB_ActivateEndpoint+0x10c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	10008000 	.word	0x10008000

08007bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d135      	bne.n	8007c5a <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	2301      	movs	r3, #1
 8007c06:	4083      	lsls	r3, r0
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	4619      	mov	r1, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	2301      	movs	r3, #1
 8007c28:	4083      	lsls	r3, r0
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c40:	4619      	mov	r1, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c56:	600b      	str	r3, [r1, #0]
 8007c58:	e034      	b.n	8007cc4 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c60:	4619      	mov	r1, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	2301      	movs	r3, #1
 8007c72:	4083      	lsls	r3, r0
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	43db      	mvns	r3, r3
 8007c78:	4013      	ands	r3, r2
 8007c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c82:	4619      	mov	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	2301      	movs	r3, #1
 8007c94:	4083      	lsls	r3, r0
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	4619      	mov	r1, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cc2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f040 8148 	bne.w	8007f80 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d139      	bne.n	8007d6c <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	4619      	mov	r1, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	4b96      	ldr	r3, [pc, #600]	; (8007f74 <USB_EPStartXfer+0x2a0>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d42:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d52:	4619      	mov	r1, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	4b84      	ldr	r3, [pc, #528]	; (8007f78 <USB_EPStartXfer+0x2a4>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	610b      	str	r3, [r1, #16]
 8007d6a:	e084      	b.n	8007e76 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	4b7a      	ldr	r3, [pc, #488]	; (8007f78 <USB_EPStartXfer+0x2a4>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	4619      	mov	r1, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	4b70      	ldr	r3, [pc, #448]	; (8007f74 <USB_EPStartXfer+0x2a0>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6959      	ldr	r1, [r3, #20]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	440b      	add	r3, r1
 8007de2:	1e59      	subs	r1, r3, #1
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dec:	04d9      	lsls	r1, r3, #19
 8007dee:	4b63      	ldr	r3, [pc, #396]	; (8007f7c <USB_EPStartXfer+0x2a8>)
 8007df0:	400b      	ands	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	4619      	mov	r1, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d125      	bne.n	8007e76 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007e4e:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e74:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d10b      	bne.n	8007e94 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	6153      	str	r3, [r2, #20]
 8007e92:	e016      	b.n	8007ec2 <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	78db      	ldrb	r3, [r3, #3]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d012      	beq.n	8007ec2 <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	4610      	mov	r0, r2
 8007eba:	2201      	movs	r2, #1
 8007ebc:	4082      	lsls	r2, r0
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d12e      	bne.n	8007f28 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d113      	bne.n	8007f02 <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007efe:	600b      	str	r3, [r1, #0]
 8007f00:	e012      	b.n	8007f28 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	4619      	mov	r1, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f26:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	4619      	mov	r1, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f4c:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	f040 80f7 	bne.w	8008146 <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	68d9      	ldr	r1, [r3, #12]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	b298      	uxth	r0, r3
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fa51 	bl	8008414 <USB_WritePacket>
 8007f72:	e0e8      	b.n	8008146 <USB_EPStartXfer+0x472>
 8007f74:	e007ffff 	.word	0xe007ffff
 8007f78:	fff80000 	.word	0xfff80000
 8007f7c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8e:	4619      	mov	r1, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	4b6b      	ldr	r3, [pc, #428]	; (8008150 <USB_EPStartXfer+0x47c>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	691a      	ldr	r2, [r3, #16]
 8007fc6:	4b63      	ldr	r3, [pc, #396]	; (8008154 <USB_EPStartXfer+0x480>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d129      	bne.n	8008028 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	4619      	mov	r1, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008024:	610b      	str	r3, [r1, #16]
 8008026:	e03a      	b.n	800809e <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4413      	add	r3, r2
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804c:	4619      	mov	r1, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	8afb      	ldrh	r3, [r7, #22]
 8008060:	04db      	lsls	r3, r3, #19
 8008062:	4618      	mov	r0, r3
 8008064:	4b3c      	ldr	r3, [pc, #240]	; (8008158 <USB_EPStartXfer+0x484>)
 8008066:	4003      	ands	r3, r0
 8008068:	4313      	orrs	r3, r2
 800806a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	4618      	mov	r0, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	8af9      	ldrh	r1, [r7, #22]
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800809a:	4313      	orrs	r3, r2
 800809c:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d10a      	bne.n	80080ba <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	461a      	mov	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	78db      	ldrb	r3, [r3, #3]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d12e      	bne.n	8008120 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d113      	bne.n	80080fa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	4619      	mov	r1, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080f6:	600b      	str	r3, [r1, #0]
 80080f8:	e012      	b.n	8008120 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	4619      	mov	r1, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811e:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	4619      	mov	r1, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008144:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	fff80000 	.word	0xfff80000
 8008154:	e007ffff 	.word	0xe007ffff
 8008158:	1ff80000 	.word	0x1ff80000

0800815c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b01      	cmp	r3, #1
 8008170:	f040 80cd 	bne.w	800830e <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d139      	bne.n	80081f0 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	4619      	mov	r1, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	4b9b      	ldr	r3, [pc, #620]	; (800840c <USB_EP0StartXfer+0x2b0>)
 800819e:	4013      	ands	r3, r2
 80081a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	4619      	mov	r1, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	4619      	mov	r1, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	4b89      	ldr	r3, [pc, #548]	; (8008410 <USB_EP0StartXfer+0x2b4>)
 80081ea:	4013      	ands	r3, r2
 80081ec:	610b      	str	r3, [r1, #16]
 80081ee:	e058      	b.n	80082a2 <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	4619      	mov	r1, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	4b7f      	ldr	r3, [pc, #508]	; (8008410 <USB_EP0StartXfer+0x2b4>)
 8008212:	4013      	ands	r3, r2
 8008214:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	4619      	mov	r1, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	4b75      	ldr	r3, [pc, #468]	; (800840c <USB_EP0StartXfer+0x2b0>)
 8008238:	4013      	ands	r3, r2
 800823a:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	695a      	ldr	r2, [r3, #20]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	429a      	cmp	r2, r3
 8008246:	d903      	bls.n	8008250 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	4619      	mov	r1, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008274:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	4619      	mov	r1, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829e:	4313      	orrs	r3, r2
 80082a0:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d10b      	bne.n	80082c0 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b6:	461a      	mov	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	6153      	str	r3, [r2, #20]
 80082be:	e012      	b.n	80082e6 <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ce:	4619      	mov	r1, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	2301      	movs	r3, #1
 80082e0:	4083      	lsls	r3, r0
 80082e2:	4313      	orrs	r3, r2
 80082e4:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f4:	4619      	mov	r1, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800830a:	600b      	str	r3, [r1, #0]
 800830c:	e077      	b.n	80083fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831c:	4619      	mov	r1, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	4b38      	ldr	r3, [pc, #224]	; (8008410 <USB_EP0StartXfer+0x2b4>)
 8008330:	4013      	ands	r3, r2
 8008332:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	4619      	mov	r1, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	4b2d      	ldr	r3, [pc, #180]	; (800840c <USB_EP0StartXfer+0x2b0>)
 8008356:	4013      	ands	r3, r2
 8008358:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	4619      	mov	r1, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800838e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839e:	4619      	mov	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b8:	4313      	orrs	r3, r2
 80083ba:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d10a      	bne.n	80083d8 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d0:	461a      	mov	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	4619      	mov	r1, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083fc:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	e007ffff 	.word	0xe007ffff
 8008410:	fff80000 	.word	0xfff80000

08008414 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4611      	mov	r1, r2
 8008420:	461a      	mov	r2, r3
 8008422:	460b      	mov	r3, r1
 8008424:	71fb      	strb	r3, [r7, #7]
 8008426:	4613      	mov	r3, r2
 8008428:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 800842a:	2300      	movs	r3, #0
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8008432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d11d      	bne.n	8008476 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 800843a:	88bb      	ldrh	r3, [r7, #4]
 800843c:	3303      	adds	r3, #3
 800843e:	2b00      	cmp	r3, #0
 8008440:	da00      	bge.n	8008444 <USB_WritePacket+0x30>
 8008442:	3303      	adds	r3, #3
 8008444:	109b      	asrs	r3, r3, #2
 8008446:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e00f      	b.n	800846e <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	031a      	lsls	r2, r3, #12
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845a:	461a      	mov	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	3301      	adds	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	3304      	adds	r3, #4
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	429a      	cmp	r2, r3
 8008474:	d3eb      	bcc.n	800844e <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	3303      	adds	r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	da00      	bge.n	80084a0 <USB_ReadPacket+0x1c>
 800849e:	3303      	adds	r3, #3
 80084a0:	109b      	asrs	r3, r3, #2
 80084a2:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e00b      	b.n	80084c2 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	3301      	adds	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3304      	adds	r3, #4
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d3ef      	bcc.n	80084aa <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 80084ca:	68bb      	ldr	r3, [r7, #8]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d130      	bne.n	800854c <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db12      	blt.n	8008524 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	4619      	mov	r1, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008522:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008532:	4619      	mov	r1, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008548:	600b      	str	r3, [r1, #0]
 800854a:	e02f      	b.n	80085ac <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	db12      	blt.n	8008586 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	4619      	mov	r1, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008584:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	4619      	mov	r1, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085aa:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d12e      	bne.n	800862a <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085da:	4619      	mov	r1, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085f0:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	78db      	ldrb	r3, [r3, #3]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d003      	beq.n	8008602 <USB_EPClearStall+0x48>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d141      	bne.n	8008686 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008610:	4619      	mov	r1, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008626:	600b      	str	r3, [r1, #0]
 8008628:	e02d      	b.n	8008686 <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008638:	4619      	mov	r1, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800864e:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	78db      	ldrb	r3, [r3, #3]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d003      	beq.n	8008660 <USB_EPClearStall+0xa6>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	78db      	ldrb	r3, [r3, #3]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d112      	bne.n	8008686 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	4619      	mov	r1, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008684:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086bc:	4619      	mov	r1, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086ce:	4313      	orrs	r3, r2
 80086d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f023 0302 	bic.w	r3, r3, #2
 80086fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80086fe:	2003      	movs	r0, #3
 8008700:	f7f9 f9ce 	bl	8001aa0 <HAL_Delay>

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	461a      	mov	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f043 0302 	orr.w	r3, r3, #2
 800872a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800872c:	2003      	movs	r0, #3
 800872e:	f7f9 f9b7 	bl	8001aa0 <HAL_Delay>

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4013      	ands	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
  return v;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4013      	ands	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	0c1b      	lsrs	r3, r3, #16
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4013      	ands	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	b29b      	uxth	r3, r3
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4013      	ands	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  return v;
 80087f0:	68fb      	ldr	r3, [r7, #12]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	fa22 f303 	lsr.w	r3, r2, r3
 8008826:	01db      	lsls	r3, r3, #7
 8008828:	b2db      	uxtb	r3, r3
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4013      	ands	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  return v;
 8008844:	68fb      	ldr	r3, [r7, #12]
}
 8008846:	4618      	mov	r0, r3
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f003 0301 	and.w	r3, r3, #1
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
	...

08008870 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887e:	4619      	mov	r1, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <USB_ActivateSetup+0x68>)
 800888a:	4013      	ands	r3, r2
 800888c:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 0306 	and.w	r3, r3, #6
 800889a:	2b04      	cmp	r3, #4
 800889c:	d10a      	bne.n	80088b4 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	461a      	mov	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f043 0303 	orr.w	r3, r3, #3
 80088b2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ba:	461a      	mov	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	fffff800 	.word	0xfffff800

080088dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	460b      	mov	r3, r1
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f0:	461a      	mov	r2, r3
 80088f2:	2300      	movs	r3, #0
 80088f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	461a      	mov	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800890a:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f043 0318 	orr.w	r3, r3, #24
 8008920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008928:	461a      	mov	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008936:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d10c      	bne.n	8008958 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8008956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3301      	adds	r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4a13      	ldr	r2, [pc, #76]	; (80089cc <USB_CoreReset+0x64>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d901      	bls.n	8008986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e01b      	b.n	80089be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	daf2      	bge.n	8008974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f043 0201 	orr.w	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a09      	ldr	r2, [pc, #36]	; (80089cc <USB_CoreReset+0x64>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d901      	bls.n	80089b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e006      	b.n	80089be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d0f0      	beq.n	800899e <USB_CoreReset+0x36>

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	00030d40 	.word	0x00030d40

080089d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <disk_status+0x30>)
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	79fa      	ldrb	r2, [r7, #7]
 80089e8:	4905      	ldr	r1, [pc, #20]	; (8008a00 <disk_status+0x30>)
 80089ea:	440a      	add	r2, r1
 80089ec:	7a12      	ldrb	r2, [r2, #8]
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000768 	.word	0x20000768

08008a04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	4a0d      	ldr	r2, [pc, #52]	; (8008a4c <disk_initialize+0x48>)
 8008a16:	5cd3      	ldrb	r3, [r2, r3]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d111      	bne.n	8008a40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	4a0b      	ldr	r2, [pc, #44]	; (8008a4c <disk_initialize+0x48>)
 8008a20:	2101      	movs	r1, #1
 8008a22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	4a09      	ldr	r2, [pc, #36]	; (8008a4c <disk_initialize+0x48>)
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	79fa      	ldrb	r2, [r7, #7]
 8008a32:	4906      	ldr	r1, [pc, #24]	; (8008a4c <disk_initialize+0x48>)
 8008a34:	440a      	add	r2, r1
 8008a36:	7a12      	ldrb	r2, [r2, #8]
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000768 	.word	0x20000768

08008a50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <disk_read+0x3c>)
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	689c      	ldr	r4, [r3, #8]
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <disk_read+0x3c>)
 8008a70:	4413      	add	r3, r2
 8008a72:	7a18      	ldrb	r0, [r3, #8]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	47a0      	blx	r4
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000768 	.word	0x20000768

08008a90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <disk_write+0x3c>)
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	68dc      	ldr	r4, [r3, #12]
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4a07      	ldr	r2, [pc, #28]	; (8008acc <disk_write+0x3c>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	7a18      	ldrb	r0, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	47a0      	blx	r4
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd90      	pop	{r4, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000768 	.word	0x20000768

08008ad0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	603a      	str	r2, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
 8008adc:	460b      	mov	r3, r1
 8008ade:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	4a09      	ldr	r2, [pc, #36]	; (8008b08 <disk_ioctl+0x38>)
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	4906      	ldr	r1, [pc, #24]	; (8008b08 <disk_ioctl+0x38>)
 8008af0:	440a      	add	r2, r1
 8008af2:	7a10      	ldrb	r0, [r2, #8]
 8008af4:	79b9      	ldrb	r1, [r7, #6]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
  return res;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000768 	.word	0x20000768

08008b0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3301      	adds	r3, #1
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	b21a      	sxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b21b      	sxth	r3, r3
 8008b2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b2e:	89fb      	ldrh	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3303      	adds	r3, #3
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	3202      	adds	r2, #2
 8008b54:	7812      	ldrb	r2, [r2, #0]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	3201      	adds	r2, #1
 8008b62:	7812      	ldrb	r2, [r2, #0]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	887a      	ldrh	r2, [r7, #2]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	887b      	ldrh	r3, [r7, #2]
 8008b9c:	0a1b      	lsrs	r3, r3, #8
 8008b9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	607a      	str	r2, [r7, #4]
 8008ba6:	887a      	ldrh	r2, [r7, #2]
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	701a      	strb	r2, [r3, #0]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	0a1b      	lsrs	r3, r3, #8
 8008be4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	0a1b      	lsrs	r3, r3, #8
 8008bf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	701a      	strb	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00d      	beq.n	8008c46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	617a      	str	r2, [r7, #20]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	1c51      	adds	r1, r2, #1
 8008c34:	6139      	str	r1, [r7, #16]
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f1      	bne.n	8008c2a <mem_cpy+0x1a>
	}
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c52:	b480      	push	{r7}
 8008c54:	b087      	sub	sp, #28
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	617a      	str	r2, [r7, #20]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f3      	bne.n	8008c62 <mem_set+0x10>
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c86:	b480      	push	{r7}
 8008c88:	b089      	sub	sp, #36	; 0x24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	61fb      	str	r3, [r7, #28]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	61fa      	str	r2, [r7, #28]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	61ba      	str	r2, [r7, #24]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	1acb      	subs	r3, r1, r3
 8008cb2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <mem_cmp+0x40>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0eb      	beq.n	8008c9e <mem_cmp+0x18>

	return r;
 8008cc6:	697b      	ldr	r3, [r7, #20]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3724      	adds	r7, #36	; 0x24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008cde:	e002      	b.n	8008ce6 <chk_chr+0x12>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	607b      	str	r3, [r7, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <chk_chr+0x26>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d1f2      	bne.n	8008ce0 <chk_chr+0xc>
	return *str;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d009      	beq.n	8008d2c <lock_fs+0x22>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f002 ffa8 	bl	800bc72 <ff_req_grant>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <lock_fs+0x22>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e000      	b.n	8008d2e <lock_fs+0x24>
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00d      	beq.n	8008d64 <unlock_fs+0x2e>
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2b0c      	cmp	r3, #12
 8008d4c:	d00a      	beq.n	8008d64 <unlock_fs+0x2e>
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	2b0b      	cmp	r3, #11
 8008d52:	d007      	beq.n	8008d64 <unlock_fs+0x2e>
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d004      	beq.n	8008d64 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f002 ff9c 	bl	800bc9c <ff_rel_grant>
	}
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e029      	b.n	8008dd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d80:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <chk_lock+0xb4>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01d      	beq.n	8008dca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d8e:	4a24      	ldr	r2, [pc, #144]	; (8008e20 <chk_lock+0xb4>)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	4413      	add	r3, r2
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d116      	bne.n	8008dce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008da0:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <chk_lock+0xb4>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d10c      	bne.n	8008dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008db4:	4a1a      	ldr	r2, [pc, #104]	; (8008e20 <chk_lock+0xb4>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	4413      	add	r3, r2
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d102      	bne.n	8008dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008dc8:	e007      	b.n	8008dda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d9d2      	bls.n	8008d80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d109      	bne.n	8008df4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <chk_lock+0x80>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d101      	bne.n	8008df0 <chk_lock+0x84>
 8008dec:	2300      	movs	r3, #0
 8008dee:	e010      	b.n	8008e12 <chk_lock+0xa6>
 8008df0:	2312      	movs	r3, #18
 8008df2:	e00e      	b.n	8008e12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d108      	bne.n	8008e0c <chk_lock+0xa0>
 8008dfa:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <chk_lock+0xb4>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	4413      	add	r3, r2
 8008e02:	330c      	adds	r3, #12
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e0a:	d101      	bne.n	8008e10 <chk_lock+0xa4>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	e000      	b.n	8008e12 <chk_lock+0xa6>
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20000748 	.word	0x20000748

08008e24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e002      	b.n	8008e36 <enq_lock+0x12>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d806      	bhi.n	8008e4a <enq_lock+0x26>
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <enq_lock+0x40>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	4413      	add	r3, r2
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f2      	bne.n	8008e30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000748 	.word	0x20000748

08008e68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e01f      	b.n	8008eb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e78:	4a41      	ldr	r2, [pc, #260]	; (8008f80 <inc_lock+0x118>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d113      	bne.n	8008eb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e8a:	4a3d      	ldr	r2, [pc, #244]	; (8008f80 <inc_lock+0x118>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	4413      	add	r3, r2
 8008e92:	3304      	adds	r3, #4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d109      	bne.n	8008eb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e9e:	4a38      	ldr	r2, [pc, #224]	; (8008f80 <inc_lock+0x118>)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d006      	beq.n	8008ec0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9dc      	bls.n	8008e78 <inc_lock+0x10>
 8008ebe:	e000      	b.n	8008ec2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ec0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d132      	bne.n	8008f2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e002      	b.n	8008ed4 <inc_lock+0x6c>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d806      	bhi.n	8008ee8 <inc_lock+0x80>
 8008eda:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <inc_lock+0x118>)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	4413      	add	r3, r2
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f2      	bne.n	8008ece <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d101      	bne.n	8008ef2 <inc_lock+0x8a>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e040      	b.n	8008f74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4922      	ldr	r1, [pc, #136]	; (8008f80 <inc_lock+0x118>)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	440b      	add	r3, r1
 8008efe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	491e      	ldr	r1, [pc, #120]	; (8008f80 <inc_lock+0x118>)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	440b      	add	r3, r1
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	491a      	ldr	r1, [pc, #104]	; (8008f80 <inc_lock+0x118>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008f20:	4a17      	ldr	r2, [pc, #92]	; (8008f80 <inc_lock+0x118>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	4413      	add	r3, r2
 8008f28:	330c      	adds	r3, #12
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <inc_lock+0xe0>
 8008f34:	4a12      	ldr	r2, [pc, #72]	; (8008f80 <inc_lock+0x118>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	4413      	add	r3, r2
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <inc_lock+0xe0>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e015      	b.n	8008f74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d108      	bne.n	8008f60 <inc_lock+0xf8>
 8008f4e:	4a0c      	ldr	r2, [pc, #48]	; (8008f80 <inc_lock+0x118>)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	4413      	add	r3, r2
 8008f56:	330c      	adds	r3, #12
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	e001      	b.n	8008f64 <inc_lock+0xfc>
 8008f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f64:	4906      	ldr	r1, [pc, #24]	; (8008f80 <inc_lock+0x118>)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	440b      	add	r3, r1
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	20000748 	.word	0x20000748

08008f84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d825      	bhi.n	8008fe4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f98:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <dec_lock+0x74>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008fa6:	89fb      	ldrh	r3, [r7, #14]
 8008fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fac:	d101      	bne.n	8008fb2 <dec_lock+0x2e>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <dec_lock+0x3a>
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008fbe:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <dec_lock+0x74>)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	89fa      	ldrh	r2, [r7, #14]
 8008fca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008fcc:	89fb      	ldrh	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <dec_lock+0x5a>
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <dec_lock+0x74>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	4413      	add	r3, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	737b      	strb	r3, [r7, #13]
 8008fe2:	e001      	b.n	8008fe8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008fe8:	7b7b      	ldrb	r3, [r7, #13]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000748 	.word	0x20000748

08008ffc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e010      	b.n	800902c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <clear_lock+0x44>)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	4413      	add	r3, r2
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	429a      	cmp	r2, r3
 8009018:	d105      	bne.n	8009026 <clear_lock+0x2a>
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <clear_lock+0x44>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d9eb      	bls.n	800900a <clear_lock+0xe>
	}
}
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000748 	.word	0x20000748

08009044 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	78db      	ldrb	r3, [r3, #3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d034      	beq.n	80090c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	7858      	ldrb	r0, [r3, #1]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009068:	2301      	movs	r3, #1
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	f7ff fd10 	bl	8008a90 <disk_write>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009076:	2301      	movs	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	e022      	b.n	80090c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	1ad2      	subs	r2, r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	429a      	cmp	r2, r3
 8009090:	d217      	bcs.n	80090c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	789b      	ldrb	r3, [r3, #2]
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	e010      	b.n	80090bc <sync_window+0x78>
					wsect += fs->fsize;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4413      	add	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7858      	ldrb	r0, [r3, #1]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090ae:	2301      	movs	r3, #1
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	f7ff fced 	bl	8008a90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d8eb      	bhi.n	800909a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d01b      	beq.n	800911c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ffad 	bl	8009044 <sync_window>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d113      	bne.n	800911c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7858      	ldrb	r0, [r3, #1]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090fe:	2301      	movs	r3, #1
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	f7ff fca5 	bl	8008a50 <disk_read>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009112:	2301      	movs	r3, #1
 8009114:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff87 	bl	8009044 <sync_window>
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d158      	bne.n	80091f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d148      	bne.n	80091da <sync_fs+0xb2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	791b      	ldrb	r3, [r3, #4]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d144      	bne.n	80091da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3334      	adds	r3, #52	; 0x34
 8009154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fd79 	bl	8008c52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3334      	adds	r3, #52	; 0x34
 8009164:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009168:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fd08 	bl	8008b82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3334      	adds	r3, #52	; 0x34
 8009176:	4921      	ldr	r1, [pc, #132]	; (80091fc <sync_fs+0xd4>)
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fd1d 	bl	8008bb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3334      	adds	r3, #52	; 0x34
 8009182:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009186:	491e      	ldr	r1, [pc, #120]	; (8009200 <sync_fs+0xd8>)
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fd15 	bl	8008bb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3334      	adds	r3, #52	; 0x34
 8009192:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	4619      	mov	r1, r3
 800919c:	4610      	mov	r0, r2
 800919e:	f7ff fd0b 	bl	8008bb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3334      	adds	r3, #52	; 0x34
 80091a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7ff fd01 	bl	8008bb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7858      	ldrb	r0, [r3, #1]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ce:	2301      	movs	r3, #1
 80091d0:	f7ff fc5e 	bl	8008a90 <disk_write>
			fs->fsi_flag = 0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fc74 	bl	8008ad0 <disk_ioctl>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <sync_fs+0xca>
 80091ee:	2301      	movs	r3, #1
 80091f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	41615252 	.word	0x41615252
 8009200:	61417272 	.word	0x61417272

08009204 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	3b02      	subs	r3, #2
 8009212:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	1e9a      	subs	r2, r3, #2
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d801      	bhi.n	8009224 <clust2sect+0x20>
 8009220:	2300      	movs	r3, #0
 8009222:	e008      	b.n	8009236 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	895b      	ldrh	r3, [r3, #10]
 8009228:	461a      	mov	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	fb03 f202 	mul.w	r2, r3, r2
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4413      	add	r3, r2
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d904      	bls.n	8009262 <get_fat+0x20>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d802      	bhi.n	8009268 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009262:	2301      	movs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e08c      	b.n	8009382 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d045      	beq.n	8009302 <get_fat+0xc0>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d05d      	beq.n	8009336 <get_fat+0xf4>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d177      	bne.n	800936e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4413      	add	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0a5b      	lsrs	r3, r3, #9
 8009294:	4413      	add	r3, r2
 8009296:	4619      	mov	r1, r3
 8009298:	6938      	ldr	r0, [r7, #16]
 800929a:	f7ff ff17 	bl	80090cc <move_window>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d167      	bne.n	8009374 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	60fa      	str	r2, [r7, #12]
 80092aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4413      	add	r3, r2
 80092b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092b6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0a5b      	lsrs	r3, r3, #9
 80092c0:	4413      	add	r3, r2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6938      	ldr	r0, [r7, #16]
 80092c6:	f7ff ff01 	bl	80090cc <move_window>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d153      	bne.n	8009378 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4413      	add	r3, r2
 80092da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	461a      	mov	r2, r3
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <get_fat+0xb6>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	091b      	lsrs	r3, r3, #4
 80092f6:	e002      	b.n	80092fe <get_fat+0xbc>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092fe:	617b      	str	r3, [r7, #20]
			break;
 8009300:	e03f      	b.n	8009382 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	4413      	add	r3, r2
 800930c:	4619      	mov	r1, r3
 800930e:	6938      	ldr	r0, [r7, #16]
 8009310:	f7ff fedc 	bl	80090cc <move_window>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d130      	bne.n	800937c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fbee 	bl	8008b0c <ld_word>
 8009330:	4603      	mov	r3, r0
 8009332:	617b      	str	r3, [r7, #20]
			break;
 8009334:	e025      	b.n	8009382 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	09db      	lsrs	r3, r3, #7
 800933e:	4413      	add	r3, r2
 8009340:	4619      	mov	r1, r3
 8009342:	6938      	ldr	r0, [r7, #16]
 8009344:	f7ff fec2 	bl	80090cc <move_window>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d118      	bne.n	8009380 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800935c:	4413      	add	r3, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fbec 	bl	8008b3c <ld_dword>
 8009364:	4603      	mov	r3, r0
 8009366:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800936a:	617b      	str	r3, [r7, #20]
			break;
 800936c:	e009      	b.n	8009382 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800936e:	2301      	movs	r3, #1
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	e006      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009374:	bf00      	nop
 8009376:	e004      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009378:	bf00      	nop
 800937a:	e002      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800937c:	bf00      	nop
 800937e:	e000      	b.n	8009382 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009380:	bf00      	nop
		}
	}

	return val;
 8009382:	697b      	ldr	r3, [r7, #20]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009398:	2302      	movs	r3, #2
 800939a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	f240 80d6 	bls.w	8009550 <put_fat+0x1c4>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	699a      	ldr	r2, [r3, #24]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	f240 80d0 	bls.w	8009550 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d073      	beq.n	80094a0 <put_fat+0x114>
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	f000 8091 	beq.w	80094e0 <put_fat+0x154>
 80093be:	2b01      	cmp	r3, #1
 80093c0:	f040 80c6 	bne.w	8009550 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	0a5b      	lsrs	r3, r3, #9
 80093da:	4413      	add	r3, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff fe74 	bl	80090cc <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093e8:	7ffb      	ldrb	r3, [r7, #31]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f040 80a9 	bne.w	8009542 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	1c59      	adds	r1, r3, #1
 80093fa:	61b9      	str	r1, [r7, #24]
 80093fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009400:	4413      	add	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00d      	beq.n	800942a <put_fat+0x9e>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b25b      	sxtb	r3, r3
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	b25a      	sxtb	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	b25b      	sxtb	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b25b      	sxtb	r3, r3
 8009426:	b2db      	uxtb	r3, r3
 8009428:	e001      	b.n	800942e <put_fat+0xa2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	4413      	add	r3, r2
 8009442:	4619      	mov	r1, r3
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff fe41 	bl	80090cc <move_window>
 800944a:	4603      	mov	r3, r0
 800944c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800944e:	7ffb      	ldrb	r3, [r7, #31]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d178      	bne.n	8009546 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	4413      	add	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <put_fat+0xea>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e00e      	b.n	8009494 <put_fat+0x108>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f023 030f 	bic.w	r3, r3, #15
 8009480:	b25a      	sxtb	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	b25b      	sxtb	r3, r3
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	b25b      	sxtb	r3, r3
 800948e:	4313      	orrs	r3, r2
 8009490:	b25b      	sxtb	r3, r3
 8009492:	b2db      	uxtb	r3, r3
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2201      	movs	r2, #1
 800949c:	70da      	strb	r2, [r3, #3]
			break;
 800949e:	e057      	b.n	8009550 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	0a1b      	lsrs	r3, r3, #8
 80094a8:	4413      	add	r3, r2
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fe0d 	bl	80090cc <move_window>
 80094b2:	4603      	mov	r3, r0
 80094b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094b6:	7ffb      	ldrb	r3, [r7, #31]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d146      	bne.n	800954a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80094ca:	4413      	add	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	b292      	uxth	r2, r2
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fb55 	bl	8008b82 <st_word>
			fs->wflag = 1;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	70da      	strb	r2, [r3, #3]
			break;
 80094de:	e037      	b.n	8009550 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	09db      	lsrs	r3, r3, #7
 80094e8:	4413      	add	r3, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff fded 	bl	80090cc <move_window>
 80094f2:	4603      	mov	r3, r0
 80094f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094f6:	7ffb      	ldrb	r3, [r7, #31]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d128      	bne.n	800954e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009510:	4413      	add	r3, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fb12 	bl	8008b3c <ld_dword>
 8009518:	4603      	mov	r3, r0
 800951a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800951e:	4323      	orrs	r3, r4
 8009520:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009530:	4413      	add	r3, r2
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff fb3f 	bl	8008bb8 <st_dword>
			fs->wflag = 1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	70da      	strb	r2, [r3, #3]
			break;
 8009540:	e006      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009542:	bf00      	nop
 8009544:	e004      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009546:	bf00      	nop
 8009548:	e002      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800954e:	bf00      	nop
		}
	}
	return res;
 8009550:	7ffb      	ldrb	r3, [r7, #31]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3724      	adds	r7, #36	; 0x24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}

0800955a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d904      	bls.n	8009580 <remove_chain+0x26>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	429a      	cmp	r2, r3
 800957e:	d801      	bhi.n	8009584 <remove_chain+0x2a>
 8009580:	2302      	movs	r3, #2
 8009582:	e04b      	b.n	800961c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	69b8      	ldr	r0, [r7, #24]
 8009592:	f7ff fefb 	bl	800938c <put_fat>
 8009596:	4603      	mov	r3, r0
 8009598:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800959a:	7ffb      	ldrb	r3, [r7, #31]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <remove_chain+0x4a>
 80095a0:	7ffb      	ldrb	r3, [r7, #31]
 80095a2:	e03b      	b.n	800961c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff fe4b 	bl	8009242 <get_fat>
 80095ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d031      	beq.n	8009618 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <remove_chain+0x64>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e02e      	b.n	800961c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d101      	bne.n	80095ca <remove_chain+0x70>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e028      	b.n	800961c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095ca:	2200      	movs	r2, #0
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	69b8      	ldr	r0, [r7, #24]
 80095d0:	f7ff fedc 	bl	800938c <put_fat>
 80095d4:	4603      	mov	r3, r0
 80095d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095d8:	7ffb      	ldrb	r3, [r7, #31]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <remove_chain+0x88>
 80095de:	7ffb      	ldrb	r3, [r7, #31]
 80095e0:	e01c      	b.n	800961c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	695a      	ldr	r2, [r3, #20]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	3b02      	subs	r3, #2
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d20b      	bcs.n	8009608 <remove_chain+0xae>
			fs->free_clst++;
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8c6      	bhi.n	80095a4 <remove_chain+0x4a>
 8009616:	e000      	b.n	800961a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009618:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10d      	bne.n	8009656 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <create_chain+0x2c>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	429a      	cmp	r2, r3
 800964e:	d81b      	bhi.n	8009688 <create_chain+0x64>
 8009650:	2301      	movs	r3, #1
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	e018      	b.n	8009688 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fdf2 	bl	8009242 <get_fat>
 800965e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d801      	bhi.n	800966a <create_chain+0x46>
 8009666:	2301      	movs	r3, #1
 8009668:	e070      	b.n	800974c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d101      	bne.n	8009676 <create_chain+0x52>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	e06a      	b.n	800974c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	699a      	ldr	r2, [r3, #24]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	429a      	cmp	r2, r3
 800967e:	d901      	bls.n	8009684 <create_chain+0x60>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	e063      	b.n	800974c <create_chain+0x128>
		scl = clst;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	3301      	adds	r3, #1
 8009690:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	429a      	cmp	r2, r3
 800969a:	d807      	bhi.n	80096ac <create_chain+0x88>
				ncl = 2;
 800969c:	2302      	movs	r3, #2
 800969e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d901      	bls.n	80096ac <create_chain+0x88>
 80096a8:	2300      	movs	r3, #0
 80096aa:	e04f      	b.n	800974c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80096ac:	69f9      	ldr	r1, [r7, #28]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fdc7 	bl	8009242 <get_fat>
 80096b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d003      	beq.n	80096ca <create_chain+0xa6>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d101      	bne.n	80096ce <create_chain+0xaa>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	e03e      	b.n	800974c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1da      	bne.n	800968c <create_chain+0x68>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e038      	b.n	800974c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80096da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	69f9      	ldr	r1, [r7, #28]
 80096e2:	6938      	ldr	r0, [r7, #16]
 80096e4:	f7ff fe52 	bl	800938c <put_fat>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <create_chain+0xe2>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6938      	ldr	r0, [r7, #16]
 80096fe:	f7ff fe45 	bl	800938c <put_fat>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d116      	bne.n	800973a <create_chain+0x116>
		fs->last_clst = ncl;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	695a      	ldr	r2, [r3, #20]
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	3b02      	subs	r3, #2
 800971c:	429a      	cmp	r2, r3
 800971e:	d804      	bhi.n	800972a <create_chain+0x106>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	791b      	ldrb	r3, [r3, #4]
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	711a      	strb	r2, [r3, #4]
 8009738:	e007      	b.n	800974a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d102      	bne.n	8009746 <create_chain+0x122>
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	e000      	b.n	8009748 <create_chain+0x124>
 8009746:	2301      	movs	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800974a:	69fb      	ldr	r3, [r7, #28]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	3304      	adds	r3, #4
 800976a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	0a5b      	lsrs	r3, r3, #9
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	8952      	ldrh	r2, [r2, #10]
 8009774:	fbb3 f3f2 	udiv	r3, r3, r2
 8009778:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	613a      	str	r2, [r7, #16]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <clmt_clust+0x3a>
 800978a:	2300      	movs	r3, #0
 800978c:	e010      	b.n	80097b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d307      	bcc.n	80097a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	3304      	adds	r3, #4
 80097a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097a4:	e7e9      	b.n	800977a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80097a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097d2:	d204      	bcs.n	80097de <dir_sdi+0x22>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	f003 031f 	and.w	r3, r3, #31
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80097de:	2302      	movs	r3, #2
 80097e0:	e063      	b.n	80098aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <dir_sdi+0x46>
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d902      	bls.n	8009802 <dir_sdi+0x46>
		clst = fs->dirbase;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009800:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10c      	bne.n	8009822 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	8912      	ldrh	r2, [r2, #8]
 8009810:	4293      	cmp	r3, r2
 8009812:	d301      	bcc.n	8009818 <dir_sdi+0x5c>
 8009814:	2302      	movs	r3, #2
 8009816:	e048      	b.n	80098aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	61da      	str	r2, [r3, #28]
 8009820:	e029      	b.n	8009876 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	895b      	ldrh	r3, [r3, #10]
 8009826:	025b      	lsls	r3, r3, #9
 8009828:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800982a:	e019      	b.n	8009860 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6979      	ldr	r1, [r7, #20]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fd06 	bl	8009242 <get_fat>
 8009836:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d101      	bne.n	8009844 <dir_sdi+0x88>
 8009840:	2301      	movs	r3, #1
 8009842:	e032      	b.n	80098aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d904      	bls.n	8009854 <dir_sdi+0x98>
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	699a      	ldr	r2, [r3, #24]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	429a      	cmp	r2, r3
 8009852:	d801      	bhi.n	8009858 <dir_sdi+0x9c>
 8009854:	2302      	movs	r3, #2
 8009856:	e028      	b.n	80098aa <dir_sdi+0xee>
			ofs -= csz;
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d2e1      	bcs.n	800982c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009868:	6979      	ldr	r1, [r7, #20]
 800986a:	6938      	ldr	r0, [r7, #16]
 800986c:	f7ff fcca 	bl	8009204 <clust2sect>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <dir_sdi+0xcc>
 8009884:	2302      	movs	r3, #2
 8009886:	e010      	b.n	80098aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	441a      	add	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	3320      	adds	r3, #32
 80098c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <dir_next+0x28>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d8:	d301      	bcc.n	80098de <dir_next+0x2c>
 80098da:	2304      	movs	r3, #4
 80098dc:	e0aa      	b.n	8009a34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f040 8098 	bne.w	8009a1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	8912      	ldrh	r2, [r2, #8]
 8009904:	4293      	cmp	r3, r2
 8009906:	f0c0 8088 	bcc.w	8009a1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	61da      	str	r2, [r3, #28]
 8009910:	2304      	movs	r3, #4
 8009912:	e08f      	b.n	8009a34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	0a5b      	lsrs	r3, r3, #9
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	8952      	ldrh	r2, [r2, #10]
 800991c:	3a01      	subs	r2, #1
 800991e:	4013      	ands	r3, r2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d17a      	bne.n	8009a1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f7ff fc88 	bl	8009242 <get_fat>
 8009932:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d801      	bhi.n	800993e <dir_next+0x8c>
 800993a:	2302      	movs	r3, #2
 800993c:	e07a      	b.n	8009a34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d101      	bne.n	800994a <dir_next+0x98>
 8009946:	2301      	movs	r3, #1
 8009948:	e074      	b.n	8009a34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	429a      	cmp	r2, r3
 8009952:	d858      	bhi.n	8009a06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d104      	bne.n	8009964 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	61da      	str	r2, [r3, #28]
 8009960:	2304      	movs	r3, #4
 8009962:	e067      	b.n	8009a34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7ff fe59 	bl	8009624 <create_chain>
 8009972:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <dir_next+0xcc>
 800997a:	2307      	movs	r3, #7
 800997c:	e05a      	b.n	8009a34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <dir_next+0xd6>
 8009984:	2302      	movs	r3, #2
 8009986:	e055      	b.n	8009a34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d101      	bne.n	8009994 <dir_next+0xe2>
 8009990:	2301      	movs	r3, #1
 8009992:	e04f      	b.n	8009a34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fb55 	bl	8009044 <sync_window>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <dir_next+0xf2>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e047      	b.n	8009a34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3334      	adds	r3, #52	; 0x34
 80099a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f94f 	bl	8008c52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	6979      	ldr	r1, [r7, #20]
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7ff fc22 	bl	8009204 <clust2sect>
 80099c0:	4602      	mov	r2, r0
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30
 80099c6:	e012      	b.n	80099ee <dir_next+0x13c>
						fs->wflag = 1;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fb38 	bl	8009044 <sync_window>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <dir_next+0x12c>
 80099da:	2301      	movs	r3, #1
 80099dc:	e02a      	b.n	8009a34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	895b      	ldrh	r3, [r3, #10]
 80099f2:	461a      	mov	r2, r3
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d8e6      	bhi.n	80099c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad2      	subs	r2, r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a0c:	6979      	ldr	r1, [r7, #20]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff fbf8 	bl	8009204 <clust2sect>
 8009a14:	4602      	mov	r2, r0
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	441a      	add	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff feb4 	bl	80097bc <dir_sdi>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d12b      	bne.n	8009ab6 <dir_alloc+0x7a>
		n = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fb2f 	bl	80090cc <move_window>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11d      	bne.n	8009ab4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2be5      	cmp	r3, #229	; 0xe5
 8009a80:	d004      	beq.n	8009a8c <dir_alloc+0x50>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d107      	bne.n	8009a9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d102      	bne.n	8009aa0 <dir_alloc+0x64>
 8009a9a:	e00c      	b.n	8009ab6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff ff05 	bl	80098b2 <dir_next>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0d7      	beq.n	8009a62 <dir_alloc+0x26>
 8009ab2:	e000      	b.n	8009ab6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ab4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d101      	bne.n	8009ac0 <dir_alloc+0x84>
 8009abc:	2307      	movs	r3, #7
 8009abe:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	331a      	adds	r3, #26
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff f817 	bl	8008b0c <ld_word>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d109      	bne.n	8009afe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	3314      	adds	r3, #20
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff f80c 	bl	8008b0c <ld_word>
 8009af4:	4603      	mov	r3, r0
 8009af6:	041b      	lsls	r3, r3, #16
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009afe:	68fb      	ldr	r3, [r7, #12]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	331a      	adds	r3, #26
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff f82f 	bl	8008b82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d109      	bne.n	8009b40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f103 0214 	add.w	r2, r3, #20
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	0c1b      	lsrs	r3, r3, #16
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7ff f821 	bl	8008b82 <st_word>
	}
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009b52:	2304      	movs	r3, #4
 8009b54:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009b5c:	e03c      	b.n	8009bd8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6938      	ldr	r0, [r7, #16]
 8009b66:	f7ff fab1 	bl	80090cc <move_window>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d136      	bne.n	8009be2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009b82:	2304      	movs	r3, #4
 8009b84:	75fb      	strb	r3, [r7, #23]
 8009b86:	e031      	b.n	8009bec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	330b      	adds	r3, #11
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b94:	73bb      	strb	r3, [r7, #14]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7bba      	ldrb	r2, [r7, #14]
 8009b9a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	2be5      	cmp	r3, #229	; 0xe5
 8009ba0:	d011      	beq.n	8009bc6 <dir_read+0x7e>
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba6:	d00e      	beq.n	8009bc6 <dir_read+0x7e>
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b0f      	cmp	r3, #15
 8009bac:	d00b      	beq.n	8009bc6 <dir_read+0x7e>
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	f023 0320 	bic.w	r3, r3, #32
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2301      	moveq	r3, #1
 8009bba:	2300      	movne	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d00f      	beq.n	8009be6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fe72 	bl	80098b2 <dir_next>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d108      	bne.n	8009bea <dir_read+0xa2>
	while (dp->sect) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1be      	bne.n	8009b5e <dir_read+0x16>
 8009be0:	e004      	b.n	8009bec <dir_read+0xa4>
		if (res != FR_OK) break;
 8009be2:	bf00      	nop
 8009be4:	e002      	b.n	8009bec <dir_read+0xa4>
				break;
 8009be6:	bf00      	nop
 8009be8:	e000      	b.n	8009bec <dir_read+0xa4>
		if (res != FR_OK) break;
 8009bea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <dir_read+0xb0>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	61da      	str	r2, [r3, #28]
	return res;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b086      	sub	sp, #24
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c10:	2100      	movs	r1, #0
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fdd2 	bl	80097bc <dir_sdi>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <dir_find+0x24>
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	e03e      	b.n	8009ca4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6938      	ldr	r0, [r7, #16]
 8009c2e:	f7ff fa4d 	bl	80090cc <move_window>
 8009c32:	4603      	mov	r3, r0
 8009c34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d12f      	bne.n	8009c9c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <dir_find+0x4e>
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	75fb      	strb	r3, [r7, #23]
 8009c4e:	e028      	b.n	8009ca2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	330b      	adds	r3, #11
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	330b      	adds	r3, #11
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 0308 	and.w	r3, r3, #8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <dir_find+0x86>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a18      	ldr	r0, [r3, #32]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3324      	adds	r3, #36	; 0x24
 8009c7a:	220b      	movs	r2, #11
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f7ff f802 	bl	8008c86 <mem_cmp>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00b      	beq.n	8009ca0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff fe11 	bl	80098b2 <dir_next>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0c5      	beq.n	8009c26 <dir_find+0x24>
 8009c9a:	e002      	b.n	8009ca2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c9c:	bf00      	nop
 8009c9e:	e000      	b.n	8009ca2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ca0:	bf00      	nop

	return res;
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cba:	2101      	movs	r1, #1
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff febd 	bl	8009a3c <dir_alloc>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d11c      	bne.n	8009d06 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	68b8      	ldr	r0, [r7, #8]
 8009cd4:	f7ff f9fa 	bl	80090cc <move_window>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d111      	bne.n	8009d06 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe ffb1 	bl	8008c52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a18      	ldr	r0, [r3, #32]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3324      	adds	r3, #36	; 0x24
 8009cf8:	220b      	movs	r2, #11
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	f7fe ff88 	bl	8008c10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2201      	movs	r2, #1
 8009d04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d04e      	beq.n	8009dc6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009d30:	e021      	b.n	8009d76 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1a      	ldr	r2, [r3, #32]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	1c59      	adds	r1, r3, #1
 8009d3a:	6179      	str	r1, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d100      	bne.n	8009d4a <get_fileinfo+0x3a>
 8009d48:	e015      	b.n	8009d76 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	2b05      	cmp	r3, #5
 8009d4e:	d101      	bne.n	8009d54 <get_fileinfo+0x44>
 8009d50:	23e5      	movs	r3, #229	; 0xe5
 8009d52:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d106      	bne.n	8009d68 <get_fileinfo+0x58>
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	613a      	str	r2, [r7, #16]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	4413      	add	r3, r2
 8009d64:	222e      	movs	r2, #46	; 0x2e
 8009d66:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	613a      	str	r2, [r7, #16]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4413      	add	r3, r2
 8009d72:	7bfa      	ldrb	r2, [r7, #15]
 8009d74:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b0a      	cmp	r3, #10
 8009d7a:	d9da      	bls.n	8009d32 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	4413      	add	r3, r2
 8009d82:	3309      	adds	r3, #9
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	7ada      	ldrb	r2, [r3, #11]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	331c      	adds	r3, #28
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fecf 	bl	8008b3c <ld_dword>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	3316      	adds	r3, #22
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fec6 	bl	8008b3c <ld_dword>
 8009db0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	80da      	strh	r2, [r3, #6]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	809a      	strh	r2, [r3, #4]
 8009dc4:	e000      	b.n	8009dc8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009dc6:	bf00      	nop
}
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009de6:	220b      	movs	r2, #11
 8009de8:	2120      	movs	r1, #32
 8009dea:	68b8      	ldr	r0, [r7, #8]
 8009dec:	f7fe ff31 	bl	8008c52 <mem_set>
	si = i = 0; ni = 8;
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	2308      	movs	r3, #8
 8009dfa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	617a      	str	r2, [r7, #20]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e0a:	7ffb      	ldrb	r3, [r7, #31]
 8009e0c:	2b20      	cmp	r3, #32
 8009e0e:	d94e      	bls.n	8009eae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e10:	7ffb      	ldrb	r3, [r7, #31]
 8009e12:	2b2f      	cmp	r3, #47	; 0x2f
 8009e14:	d006      	beq.n	8009e24 <create_name+0x54>
 8009e16:	7ffb      	ldrb	r3, [r7, #31]
 8009e18:	2b5c      	cmp	r3, #92	; 0x5c
 8009e1a:	d110      	bne.n	8009e3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e1c:	e002      	b.n	8009e24 <create_name+0x54>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	3301      	adds	r3, #1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	4413      	add	r3, r2
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e2e:	d0f6      	beq.n	8009e1e <create_name+0x4e>
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	4413      	add	r3, r2
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b5c      	cmp	r3, #92	; 0x5c
 8009e3a:	d0f0      	beq.n	8009e1e <create_name+0x4e>
			break;
 8009e3c:	e038      	b.n	8009eb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009e3e:	7ffb      	ldrb	r3, [r7, #31]
 8009e40:	2b2e      	cmp	r3, #46	; 0x2e
 8009e42:	d003      	beq.n	8009e4c <create_name+0x7c>
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d30c      	bcc.n	8009e66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	2b0b      	cmp	r3, #11
 8009e50:	d002      	beq.n	8009e58 <create_name+0x88>
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	2b2e      	cmp	r3, #46	; 0x2e
 8009e56:	d001      	beq.n	8009e5c <create_name+0x8c>
 8009e58:	2306      	movs	r3, #6
 8009e5a:	e044      	b.n	8009ee6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	230b      	movs	r3, #11
 8009e62:	61bb      	str	r3, [r7, #24]
			continue;
 8009e64:	e022      	b.n	8009eac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da04      	bge.n	8009e78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009e6e:	7ffb      	ldrb	r3, [r7, #31]
 8009e70:	3b80      	subs	r3, #128	; 0x80
 8009e72:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <create_name+0x120>)
 8009e74:	5cd3      	ldrb	r3, [r2, r3]
 8009e76:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009e78:	7ffb      	ldrb	r3, [r7, #31]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	481d      	ldr	r0, [pc, #116]	; (8009ef4 <create_name+0x124>)
 8009e7e:	f7fe ff29 	bl	8008cd4 <chk_chr>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <create_name+0xbc>
 8009e88:	2306      	movs	r3, #6
 8009e8a:	e02c      	b.n	8009ee6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009e8c:	7ffb      	ldrb	r3, [r7, #31]
 8009e8e:	2b60      	cmp	r3, #96	; 0x60
 8009e90:	d905      	bls.n	8009e9e <create_name+0xce>
 8009e92:	7ffb      	ldrb	r3, [r7, #31]
 8009e94:	2b7a      	cmp	r3, #122	; 0x7a
 8009e96:	d802      	bhi.n	8009e9e <create_name+0xce>
 8009e98:	7ffb      	ldrb	r3, [r7, #31]
 8009e9a:	3b20      	subs	r3, #32
 8009e9c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	613a      	str	r2, [r7, #16]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	7ffa      	ldrb	r2, [r7, #31]
 8009eaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009eac:	e7a6      	b.n	8009dfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009eae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <create_name+0xf4>
 8009ec0:	2306      	movs	r3, #6
 8009ec2:	e010      	b.n	8009ee6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2be5      	cmp	r3, #229	; 0xe5
 8009eca:	d102      	bne.n	8009ed2 <create_name+0x102>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2205      	movs	r2, #5
 8009ed0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	330b      	adds	r3, #11
 8009ed6:	7ffa      	ldrb	r2, [r7, #31]
 8009ed8:	2a20      	cmp	r2, #32
 8009eda:	d801      	bhi.n	8009ee0 <create_name+0x110>
 8009edc:	2204      	movs	r2, #4
 8009ede:	e000      	b.n	8009ee2 <create_name+0x112>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009ee4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0802edc8 	.word	0x0802edc8
 8009ef4:	0802b884 	.word	0x0802b884

08009ef8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f0c:	e002      	b.n	8009f14 <follow_path+0x1c>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b2f      	cmp	r3, #47	; 0x2f
 8009f1a:	d0f8      	beq.n	8009f0e <follow_path+0x16>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b5c      	cmp	r3, #92	; 0x5c
 8009f22:	d0f4      	beq.n	8009f0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2200      	movs	r2, #0
 8009f28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b1f      	cmp	r3, #31
 8009f30:	d80a      	bhi.n	8009f48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2280      	movs	r2, #128	; 0x80
 8009f36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fc3d 	bl	80097bc <dir_sdi>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
 8009f46:	e043      	b.n	8009fd0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f48:	463b      	mov	r3, r7
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff3f 	bl	8009dd0 <create_name>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d134      	bne.n	8009fc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fe50 	bl	8009c02 <dir_find>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d127      	bne.n	8009fca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d122      	bne.n	8009fca <follow_path+0xd2>
 8009f84:	2305      	movs	r3, #5
 8009f86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f88:	e01f      	b.n	8009fca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11c      	bne.n	8009fce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	799b      	ldrb	r3, [r3, #6]
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fa0:	2305      	movs	r3, #5
 8009fa2:	75fb      	strb	r3, [r7, #23]
 8009fa4:	e014      	b.n	8009fd0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fd86 	bl	8009aca <ld_clust>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fc4:	e7c0      	b.n	8009f48 <follow_path+0x50>
			if (res != FR_OK) break;
 8009fc6:	bf00      	nop
 8009fc8:	e002      	b.n	8009fd0 <follow_path+0xd8>
				break;
 8009fca:	bf00      	nop
 8009fcc:	e000      	b.n	8009fd0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fce:	bf00      	nop
			}
		}
	}

	return res;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b087      	sub	sp, #28
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d031      	beq.n	800a054 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	e002      	b.n	8009ffe <get_ldnumber+0x24>
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b20      	cmp	r3, #32
 800a004:	d903      	bls.n	800a00e <get_ldnumber+0x34>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b3a      	cmp	r3, #58	; 0x3a
 800a00c:	d1f4      	bne.n	8009ff8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b3a      	cmp	r3, #58	; 0x3a
 800a014:	d11c      	bne.n	800a050 <get_ldnumber+0x76>
			tp = *path;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	60fa      	str	r2, [r7, #12]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	3b30      	subs	r3, #48	; 0x30
 800a026:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b09      	cmp	r3, #9
 800a02c:	d80e      	bhi.n	800a04c <get_ldnumber+0x72>
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	429a      	cmp	r2, r3
 800a034:	d10a      	bne.n	800a04c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <get_ldnumber+0x72>
					vol = (int)i;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3301      	adds	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	e002      	b.n	800a056 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a050:	2300      	movs	r3, #0
 800a052:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a054:	693b      	ldr	r3, [r7, #16]
}
 800a056:	4618      	mov	r0, r3
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
	...

0800a064 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	70da      	strb	r2, [r3, #3]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff f824 	bl	80090cc <move_window>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <check_fs+0x2a>
 800a08a:	2304      	movs	r3, #4
 800a08c:	e038      	b.n	800a100 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3334      	adds	r3, #52	; 0x34
 800a092:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fd38 	bl	8008b0c <ld_word>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d001      	beq.n	800a0ac <check_fs+0x48>
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e029      	b.n	800a100 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0b2:	2be9      	cmp	r3, #233	; 0xe9
 800a0b4:	d009      	beq.n	800a0ca <check_fs+0x66>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0bc:	2beb      	cmp	r3, #235	; 0xeb
 800a0be:	d11e      	bne.n	800a0fe <check_fs+0x9a>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a0c6:	2b90      	cmp	r3, #144	; 0x90
 800a0c8:	d119      	bne.n	800a0fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3334      	adds	r3, #52	; 0x34
 800a0ce:	3336      	adds	r3, #54	; 0x36
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fd33 	bl	8008b3c <ld_dword>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0dc:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <check_fs+0xa4>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d101      	bne.n	800a0e6 <check_fs+0x82>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e00c      	b.n	800a100 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3334      	adds	r3, #52	; 0x34
 800a0ea:	3352      	adds	r3, #82	; 0x52
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fd25 	bl	8008b3c <ld_dword>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <check_fs+0xa8>)
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d101      	bne.n	800a0fe <check_fs+0x9a>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e000      	b.n	800a100 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a0fe:	2302      	movs	r3, #2
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	00544146 	.word	0x00544146
 800a10c:	33544146 	.word	0x33544146

0800a110 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b096      	sub	sp, #88	; 0x58
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	4613      	mov	r3, r2
 800a11c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff ff58 	bl	8009fda <get_ldnumber>
 800a12a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	da01      	bge.n	800a136 <find_volume+0x26>
 800a132:	230b      	movs	r3, #11
 800a134:	e236      	b.n	800a5a4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a136:	4aac      	ldr	r2, [pc, #688]	; (800a3e8 <find_volume+0x2d8>)
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a13e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <find_volume+0x3a>
 800a146:	230c      	movs	r3, #12
 800a148:	e22c      	b.n	800a5a4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a14a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a14c:	f7fe fddd 	bl	8008d0a <lock_fs>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <find_volume+0x4a>
 800a156:	230f      	movs	r3, #15
 800a158:	e224      	b.n	800a5a4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01a      	beq.n	800a1a6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	4618      	mov	r0, r3
 800a176:	f7fe fc2b 	bl	80089d0 <disk_status>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10c      	bne.n	800a1a6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d007      	beq.n	800a1a2 <find_volume+0x92>
 800a192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a196:	f003 0304 	and.w	r3, r3, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a19e:	230a      	movs	r3, #10
 800a1a0:	e200      	b.n	800a5a4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e1fe      	b.n	800a5a4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe fc23 	bl	8008a04 <disk_initialize>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e1e7      	b.n	800a5a4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d007      	beq.n	800a1ea <find_volume+0xda>
 800a1da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a1e6:	230a      	movs	r3, #10
 800a1e8:	e1dc      	b.n	800a5a4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a1ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1f2:	f7ff ff37 	bl	800a064 <check_fs>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a200:	2b02      	cmp	r3, #2
 800a202:	d14b      	bne.n	800a29c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a204:	2300      	movs	r3, #0
 800a206:	643b      	str	r3, [r7, #64]	; 0x40
 800a208:	e01f      	b.n	800a24a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a218:	4413      	add	r3, r2
 800a21a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	3304      	adds	r3, #4
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d006      	beq.n	800a234 <find_volume+0x124>
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	3308      	adds	r3, #8
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fc86 	bl	8008b3c <ld_dword>
 800a230:	4602      	mov	r2, r0
 800a232:	e000      	b.n	800a236 <find_volume+0x126>
 800a234:	2200      	movs	r2, #0
 800a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a23e:	440b      	add	r3, r1
 800a240:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a246:	3301      	adds	r3, #1
 800a248:	643b      	str	r3, [r7, #64]	; 0x40
 800a24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d9dc      	bls.n	800a20a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a250:	2300      	movs	r3, #0
 800a252:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <find_volume+0x150>
 800a25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25c:	3b01      	subs	r3, #1
 800a25e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a268:	4413      	add	r3, r2
 800a26a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a26e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a272:	2b00      	cmp	r3, #0
 800a274:	d005      	beq.n	800a282 <find_volume+0x172>
 800a276:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a27a:	f7ff fef3 	bl	800a064 <check_fs>
 800a27e:	4603      	mov	r3, r0
 800a280:	e000      	b.n	800a284 <find_volume+0x174>
 800a282:	2303      	movs	r3, #3
 800a284:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d905      	bls.n	800a29c <find_volume+0x18c>
 800a290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a292:	3301      	adds	r3, #1
 800a294:	643b      	str	r3, [r7, #64]	; 0x40
 800a296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d9e1      	bls.n	800a260 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a29c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d101      	bne.n	800a2a8 <find_volume+0x198>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e17d      	b.n	800a5a4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d901      	bls.n	800a2b4 <find_volume+0x1a4>
 800a2b0:	230d      	movs	r3, #13
 800a2b2:	e177      	b.n	800a5a4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	3334      	adds	r3, #52	; 0x34
 800a2b8:	330b      	adds	r3, #11
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fc26 	bl	8008b0c <ld_word>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c6:	d001      	beq.n	800a2cc <find_volume+0x1bc>
 800a2c8:	230d      	movs	r3, #13
 800a2ca:	e16b      	b.n	800a5a4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	3334      	adds	r3, #52	; 0x34
 800a2d0:	3316      	adds	r3, #22
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe fc1a 	bl	8008b0c <ld_word>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <find_volume+0x1e0>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	3334      	adds	r3, #52	; 0x34
 800a2e6:	3324      	adds	r3, #36	; 0x24
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe fc27 	bl	8008b3c <ld_dword>
 800a2ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	789b      	ldrb	r3, [r3, #2]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d005      	beq.n	800a314 <find_volume+0x204>
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	789b      	ldrb	r3, [r3, #2]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d001      	beq.n	800a314 <find_volume+0x204>
 800a310:	230d      	movs	r3, #13
 800a312:	e147      	b.n	800a5a4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	789b      	ldrb	r3, [r3, #2]
 800a318:	461a      	mov	r2, r3
 800a31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a31c:	fb02 f303 	mul.w	r3, r2, r3
 800a320:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a328:	b29a      	uxth	r2, r3
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	895b      	ldrh	r3, [r3, #10]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d008      	beq.n	800a348 <find_volume+0x238>
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	895b      	ldrh	r3, [r3, #10]
 800a33a:	461a      	mov	r2, r3
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	895b      	ldrh	r3, [r3, #10]
 800a340:	3b01      	subs	r3, #1
 800a342:	4013      	ands	r3, r2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <find_volume+0x23c>
 800a348:	230d      	movs	r3, #13
 800a34a:	e12b      	b.n	800a5a4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	3334      	adds	r3, #52	; 0x34
 800a350:	3311      	adds	r3, #17
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe fbda 	bl	8008b0c <ld_word>
 800a358:	4603      	mov	r3, r0
 800a35a:	461a      	mov	r2, r3
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	891b      	ldrh	r3, [r3, #8]
 800a364:	f003 030f 	and.w	r3, r3, #15
 800a368:	b29b      	uxth	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <find_volume+0x262>
 800a36e:	230d      	movs	r3, #13
 800a370:	e118      	b.n	800a5a4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	3334      	adds	r3, #52	; 0x34
 800a376:	3313      	adds	r3, #19
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fbc7 	bl	8008b0c <ld_word>
 800a37e:	4603      	mov	r3, r0
 800a380:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a384:	2b00      	cmp	r3, #0
 800a386:	d106      	bne.n	800a396 <find_volume+0x286>
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	3334      	adds	r3, #52	; 0x34
 800a38c:	3320      	adds	r3, #32
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fbd4 	bl	8008b3c <ld_dword>
 800a394:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	3334      	adds	r3, #52	; 0x34
 800a39a:	330e      	adds	r3, #14
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fbb5 	bl	8008b0c <ld_word>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a3a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <find_volume+0x2a0>
 800a3ac:	230d      	movs	r3, #13
 800a3ae:	e0f9      	b.n	800a5a4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a3b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b4:	4413      	add	r3, r2
 800a3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3b8:	8912      	ldrh	r2, [r2, #8]
 800a3ba:	0912      	lsrs	r2, r2, #4
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	4413      	add	r3, r2
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d201      	bcs.n	800a3ce <find_volume+0x2be>
 800a3ca:	230d      	movs	r3, #13
 800a3cc:	e0ea      	b.n	800a5a4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d6:	8952      	ldrh	r2, [r2, #10]
 800a3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <find_volume+0x2dc>
 800a3e4:	230d      	movs	r3, #13
 800a3e6:	e0dd      	b.n	800a5a4 <find_volume+0x494>
 800a3e8:	20000740 	.word	0x20000740
		fmt = FS_FAT32;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d802      	bhi.n	800a402 <find_volume+0x2f2>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a408:	4293      	cmp	r3, r2
 800a40a:	d802      	bhi.n	800a412 <find_volume+0x302>
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a41e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a424:	441a      	add	r2, r3
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a42a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	441a      	add	r2, r3
 800a430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a432:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d11e      	bne.n	800a47a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	3334      	adds	r3, #52	; 0x34
 800a440:	332a      	adds	r3, #42	; 0x2a
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fb62 	bl	8008b0c <ld_word>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <find_volume+0x342>
 800a44e:	230d      	movs	r3, #13
 800a450:	e0a8      	b.n	800a5a4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	891b      	ldrh	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <find_volume+0x34e>
 800a45a:	230d      	movs	r3, #13
 800a45c:	e0a2      	b.n	800a5a4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	3334      	adds	r3, #52	; 0x34
 800a462:	332c      	adds	r3, #44	; 0x2c
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fb69 	bl	8008b3c <ld_dword>
 800a46a:	4602      	mov	r2, r0
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	647b      	str	r3, [r7, #68]	; 0x44
 800a478:	e01f      	b.n	800a4ba <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	891b      	ldrh	r3, [r3, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <find_volume+0x376>
 800a482:	230d      	movs	r3, #13
 800a484:	e08e      	b.n	800a5a4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a48c:	441a      	add	r2, r3
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a496:	2b02      	cmp	r3, #2
 800a498:	d103      	bne.n	800a4a2 <find_volume+0x392>
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	e00a      	b.n	800a4b8 <find_volume+0x3a8>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	4413      	add	r3, r2
 800a4ac:	085a      	lsrs	r2, r3, #1
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4b8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	69da      	ldr	r2, [r3, #28]
 800a4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4c4:	0a5b      	lsrs	r3, r3, #9
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d201      	bcs.n	800a4ce <find_volume+0x3be>
 800a4ca:	230d      	movs	r3, #13
 800a4cc:	e06a      	b.n	800a5a4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d4:	615a      	str	r2, [r3, #20]
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	695a      	ldr	r2, [r3, #20]
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	2280      	movs	r2, #128	; 0x80
 800a4e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a4e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d149      	bne.n	800a580 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	3334      	adds	r3, #52	; 0x34
 800a4f0:	3330      	adds	r3, #48	; 0x30
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fb0a 	bl	8008b0c <ld_word>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d140      	bne.n	800a580 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a500:	3301      	adds	r3, #1
 800a502:	4619      	mov	r1, r3
 800a504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a506:	f7fe fde1 	bl	80090cc <move_window>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d137      	bne.n	800a580 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	2200      	movs	r2, #0
 800a514:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	3334      	adds	r3, #52	; 0x34
 800a51a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe faf4 	bl	8008b0c <ld_word>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d127      	bne.n	800a580 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	3334      	adds	r3, #52	; 0x34
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fb01 	bl	8008b3c <ld_dword>
 800a53a:	4602      	mov	r2, r0
 800a53c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ac <find_volume+0x49c>)
 800a53e:	429a      	cmp	r2, r3
 800a540:	d11e      	bne.n	800a580 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	3334      	adds	r3, #52	; 0x34
 800a546:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe faf6 	bl	8008b3c <ld_dword>
 800a550:	4602      	mov	r2, r0
 800a552:	4b17      	ldr	r3, [pc, #92]	; (800a5b0 <find_volume+0x4a0>)
 800a554:	429a      	cmp	r2, r3
 800a556:	d113      	bne.n	800a580 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	3334      	adds	r3, #52	; 0x34
 800a55c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe faeb 	bl	8008b3c <ld_dword>
 800a566:	4602      	mov	r2, r0
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	3334      	adds	r3, #52	; 0x34
 800a570:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fae1 	bl	8008b3c <ld_dword>
 800a57a:	4602      	mov	r2, r0
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a586:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <find_volume+0x4a4>)
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	3301      	adds	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <find_volume+0x4a4>)
 800a592:	801a      	strh	r2, [r3, #0]
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <find_volume+0x4a4>)
 800a596:	881a      	ldrh	r2, [r3, #0]
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a59c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a59e:	f7fe fd2d 	bl	8008ffc <clear_lock>
#endif
	return FR_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3758      	adds	r7, #88	; 0x58
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	41615252 	.word	0x41615252
 800a5b0:	61417272 	.word	0x61417272
 800a5b4:	20000744 	.word	0x20000744

0800a5b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01a      	beq.n	800a5fe <validate+0x46>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d016      	beq.n	800a5fe <validate+0x46>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d011      	beq.n	800a5fe <validate+0x46>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	88da      	ldrh	r2, [r3, #6]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	889b      	ldrh	r3, [r3, #4]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d10a      	bne.n	800a5fe <validate+0x46>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe f9ee 	bl	80089d0 <disk_status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <validate+0x52>
		*fs = 0;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a604:	2309      	movs	r3, #9
 800a606:	73fb      	strb	r3, [r7, #15]
 800a608:	e00f      	b.n	800a62a <validate+0x72>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fb77 	bl	8008d0a <lock_fs>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <validate+0x6e>
 800a622:	230f      	movs	r3, #15
 800a624:	e002      	b.n	800a62c <validate+0x74>
		res = FR_OK;			/* Valid object */
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a646:	f107 0310 	add.w	r3, r7, #16
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fcc5 	bl	8009fda <get_ldnumber>
 800a650:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	da01      	bge.n	800a65c <f_mount+0x28>
 800a658:	230b      	movs	r3, #11
 800a65a:	e048      	b.n	800a6ee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a65c:	4a26      	ldr	r2, [pc, #152]	; (800a6f8 <f_mount+0xc4>)
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a664:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7fe fcc5 	bl	8008ffc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	4618      	mov	r0, r3
 800a678:	f001 faef 	bl	800bc5a <ff_del_syncobj>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <f_mount+0x52>
 800a682:	2302      	movs	r3, #2
 800a684:	e033      	b.n	800a6ee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2200      	movs	r2, #0
 800a68a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	f001 fabb 	bl	800bc1e <ff_cre_syncobj>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <f_mount+0x7e>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e01d      	b.n	800a6ee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4910      	ldr	r1, [pc, #64]	; (800a6f8 <f_mount+0xc4>)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <f_mount+0x94>
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d001      	beq.n	800a6cc <f_mount+0x98>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e010      	b.n	800a6ee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a6cc:	f107 010c 	add.w	r1, r7, #12
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff fd1a 	bl	800a110 <find_volume>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	7dfa      	ldrb	r2, [r7, #23]
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fb25 	bl	8008d36 <unlock_fs>
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000740 	.word	0x20000740

0800a6fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b098      	sub	sp, #96	; 0x60
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <f_open+0x18>
 800a710:	2309      	movs	r3, #9
 800a712:	e1b4      	b.n	800aa7e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a71a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a71c:	79fa      	ldrb	r2, [r7, #7]
 800a71e:	f107 0110 	add.w	r1, r7, #16
 800a722:	f107 0308 	add.w	r3, r7, #8
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fcf2 	bl	800a110 <find_volume>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a736:	2b00      	cmp	r3, #0
 800a738:	f040 8191 	bne.w	800aa5e <f_open+0x362>
		dj.obj.fs = fs;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	f107 0314 	add.w	r3, r7, #20
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff fbd5 	bl	8009ef8 <follow_path>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11a      	bne.n	800a792 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a75c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a760:	b25b      	sxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	da03      	bge.n	800a76e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a766:	2306      	movs	r3, #6
 800a768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a76c:	e011      	b.n	800a792 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	bf14      	ite	ne
 800a778:	2301      	movne	r3, #1
 800a77a:	2300      	moveq	r3, #0
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	461a      	mov	r2, r3
 800a780:	f107 0314 	add.w	r3, r7, #20
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe faf0 	bl	8008d6c <chk_lock>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	f003 031c 	and.w	r3, r3, #28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d07f      	beq.n	800a89c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a79c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d017      	beq.n	800a7d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a7a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d10e      	bne.n	800a7ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a7ac:	f7fe fb3a 	bl	8008e24 <enq_lock>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d006      	beq.n	800a7c4 <f_open+0xc8>
 800a7b6:	f107 0314 	add.w	r3, r7, #20
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff fa76 	bl	8009cac <dir_register>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	e000      	b.n	800a7c6 <f_open+0xca>
 800a7c4:	2312      	movs	r3, #18
 800a7c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	f043 0308 	orr.w	r3, r3, #8
 800a7d0:	71fb      	strb	r3, [r7, #7]
 800a7d2:	e010      	b.n	800a7f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7d4:	7ebb      	ldrb	r3, [r7, #26]
 800a7d6:	f003 0311 	and.w	r3, r3, #17
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <f_open+0xea>
					res = FR_DENIED;
 800a7de:	2307      	movs	r3, #7
 800a7e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7e4:	e007      	b.n	800a7f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <f_open+0xfa>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d168      	bne.n	800a8d0 <f_open+0x1d4>
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d063      	beq.n	800a8d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a808:	f007 fdcc 	bl	80123a4 <get_fattime>
 800a80c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	330e      	adds	r3, #14
 800a812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe f9cf 	bl	8008bb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81c:	3316      	adds	r3, #22
 800a81e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe f9c9 	bl	8008bb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	330b      	adds	r3, #11
 800a82a:	2220      	movs	r2, #32
 800a82c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff f948 	bl	8009aca <ld_clust>
 800a83a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a840:	2200      	movs	r2, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff f960 	bl	8009b08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	331c      	adds	r3, #28
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe f9b2 	bl	8008bb8 <st_dword>
					fs->wflag = 1;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2201      	movs	r2, #1
 800a858:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d037      	beq.n	800a8d0 <f_open+0x1d4>
						dw = fs->winsect;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	2200      	movs	r2, #0
 800a86c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe fe73 	bl	800955a <remove_chain>
 800a874:	4603      	mov	r3, r0
 800a876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a87a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d126      	bne.n	800a8d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fc20 	bl	80090cc <move_window>
 800a88c:	4603      	mov	r3, r0
 800a88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a896:	3a01      	subs	r2, #1
 800a898:	611a      	str	r2, [r3, #16]
 800a89a:	e019      	b.n	800a8d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a89c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d115      	bne.n	800a8d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a8a4:	7ebb      	ldrb	r3, [r7, #26]
 800a8a6:	f003 0310 	and.w	r3, r3, #16
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a8ae:	2304      	movs	r3, #4
 800a8b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8b4:	e00c      	b.n	800a8d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d007      	beq.n	800a8d0 <f_open+0x1d4>
 800a8c0:	7ebb      	ldrb	r3, [r7, #26]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <f_open+0x1d4>
						res = FR_DENIED;
 800a8ca:	2307      	movs	r3, #7
 800a8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d128      	bne.n	800a92a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a8d8:	79fb      	ldrb	r3, [r7, #7]
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a8f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	f023 0301 	bic.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bf14      	ite	ne
 800a902:	2301      	movne	r3, #1
 800a904:	2300      	moveq	r3, #0
 800a906:	b2db      	uxtb	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	f107 0314 	add.w	r3, r7, #20
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe faa9 	bl	8008e68 <inc_lock>
 800a916:	4602      	mov	r2, r0
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <f_open+0x22e>
 800a924:	2302      	movs	r3, #2
 800a926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a92a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f040 8095 	bne.w	800aa5e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a938:	4611      	mov	r1, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff f8c5 	bl	8009aca <ld_clust>
 800a940:	4602      	mov	r2, r0
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	331c      	adds	r3, #28
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe f8f6 	bl	8008b3c <ld_dword>
 800a950:	4602      	mov	r2, r0
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	88da      	ldrh	r2, [r3, #6]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	79fa      	ldrb	r2, [r7, #7]
 800a96e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3330      	adds	r3, #48	; 0x30
 800a986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe f960 	bl	8008c52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d060      	beq.n	800aa5e <f_open+0x362>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d05c      	beq.n	800aa5e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68da      	ldr	r2, [r3, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	895b      	ldrh	r3, [r3, #10]
 800a9b0:	025b      	lsls	r3, r3, #9
 800a9b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	657b      	str	r3, [r7, #84]	; 0x54
 800a9c0:	e016      	b.n	800a9f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fc3b 	bl	8009242 <get_fat>
 800a9cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d802      	bhi.n	800a9da <f_open+0x2de>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a9da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e0:	d102      	bne.n	800a9e8 <f_open+0x2ec>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a9f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <f_open+0x304>
 800a9f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d8e0      	bhi.n	800a9c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aa06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d127      	bne.n	800aa5e <f_open+0x362>
 800aa0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d022      	beq.n	800aa5e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fbf1 	bl	8009204 <clust2sect>
 800aa22:	6478      	str	r0, [r7, #68]	; 0x44
 800aa24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d103      	bne.n	800aa32 <f_open+0x336>
						res = FR_INT_ERR;
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa30:	e015      	b.n	800aa5e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa34:	0a5a      	lsrs	r2, r3, #9
 800aa36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa38:	441a      	add	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	7858      	ldrb	r0, [r3, #1]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a1a      	ldr	r2, [r3, #32]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f7fd ffff 	bl	8008a50 <disk_read>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <f_open+0x362>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <f_open+0x370>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe f95e 	bl	8008d36 <unlock_fs>
 800aa7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3760      	adds	r7, #96	; 0x60
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b08c      	sub	sp, #48	; 0x30
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f107 0210 	add.w	r2, r7, #16
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fd86 	bl	800a5b8 <validate>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d107      	bne.n	800aaca <f_write+0x44>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	7d5b      	ldrb	r3, [r3, #21]
 800aabe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d009      	beq.n	800aade <f_write+0x58>
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe f92f 	bl	8008d36 <unlock_fs>
 800aad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aadc:	e173      	b.n	800adc6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	7d1b      	ldrb	r3, [r3, #20]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <f_write+0x72>
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2107      	movs	r1, #7
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe f921 	bl	8008d36 <unlock_fs>
 800aaf4:	2307      	movs	r3, #7
 800aaf6:	e166      	b.n	800adc6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	699a      	ldr	r2, [r3, #24]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	441a      	add	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	f080 814b 	bcs.w	800ada0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	43db      	mvns	r3, r3
 800ab10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab12:	e145      	b.n	800ada0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f040 8101 	bne.w	800ad24 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	0a5b      	lsrs	r3, r3, #9
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	8952      	ldrh	r2, [r2, #10]
 800ab2c:	3a01      	subs	r2, #1
 800ab2e:	4013      	ands	r3, r2
 800ab30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d14d      	bne.n	800abd4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10c      	bne.n	800ab5a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d11a      	bne.n	800ab82 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2100      	movs	r1, #0
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fd67 	bl	8009624 <create_chain>
 800ab56:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab58:	e013      	b.n	800ab82 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	4619      	mov	r1, r3
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f7fe fdf3 	bl	8009754 <clmt_clust>
 800ab6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab70:	e007      	b.n	800ab82 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fe fd52 	bl	8009624 <create_chain>
 800ab80:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8110 	beq.w	800adaa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d109      	bne.n	800aba4 <f_write+0x11e>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2202      	movs	r2, #2
 800ab94:	755a      	strb	r2, [r3, #21]
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2102      	movs	r1, #2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe f8cb 	bl	8008d36 <unlock_fs>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e110      	b.n	800adc6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d109      	bne.n	800abc0 <f_write+0x13a>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2201      	movs	r2, #1
 800abb0:	755a      	strb	r2, [r3, #21]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2101      	movs	r1, #1
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe f8bd 	bl	8008d36 <unlock_fs>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e102      	b.n	800adc6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <f_write+0x14e>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	7d1b      	ldrb	r3, [r3, #20]
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	da1d      	bge.n	800ac1a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	7858      	ldrb	r0, [r3, #1]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a1a      	ldr	r2, [r3, #32]
 800abec:	2301      	movs	r3, #1
 800abee:	f7fd ff4f 	bl	8008a90 <disk_write>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <f_write+0x186>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	755a      	strb	r2, [r3, #21]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2101      	movs	r1, #1
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe f897 	bl	8008d36 <unlock_fs>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e0dc      	b.n	800adc6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	7d1b      	ldrb	r3, [r3, #20]
 800ac10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fe faee 	bl	8009204 <clust2sect>
 800ac28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d109      	bne.n	800ac44 <f_write+0x1be>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2202      	movs	r2, #2
 800ac34:	755a      	strb	r2, [r3, #21]
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	2102      	movs	r1, #2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe f87b 	bl	8008d36 <unlock_fs>
 800ac40:	2302      	movs	r3, #2
 800ac42:	e0c0      	b.n	800adc6 <f_write+0x340>
			sect += csect;
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	4413      	add	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	0a5b      	lsrs	r3, r3, #9
 800ac50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d041      	beq.n	800acdc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	8952      	ldrh	r2, [r2, #10]
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d905      	bls.n	800ac72 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	895b      	ldrh	r3, [r3, #10]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	7858      	ldrb	r0, [r3, #1]
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	69f9      	ldr	r1, [r7, #28]
 800ac7c:	f7fd ff08 	bl	8008a90 <disk_write>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <f_write+0x214>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	755a      	strb	r2, [r3, #21]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2101      	movs	r1, #1
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fe f850 	bl	8008d36 <unlock_fs>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e095      	b.n	800adc6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6a1a      	ldr	r2, [r3, #32]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	1ad2      	subs	r2, r2, r3
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d215      	bcs.n	800acd4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6a1a      	ldr	r2, [r3, #32]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	025b      	lsls	r3, r3, #9
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	4413      	add	r3, r2
 800acbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7fd ffa5 	bl	8008c10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	7d1b      	ldrb	r3, [r3, #20]
 800acca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	025b      	lsls	r3, r3, #9
 800acd8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800acda:	e044      	b.n	800ad66 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a1a      	ldr	r2, [r3, #32]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d01b      	beq.n	800ad1e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	699a      	ldr	r2, [r3, #24]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800acee:	429a      	cmp	r2, r3
 800acf0:	d215      	bcs.n	800ad1e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	7858      	ldrb	r0, [r3, #1]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acfc:	2301      	movs	r3, #1
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	f7fd fea6 	bl	8008a50 <disk_read>
 800ad04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	755a      	strb	r2, [r3, #21]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2101      	movs	r1, #1
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe f80e 	bl	8008d36 <unlock_fs>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e053      	b.n	800adc6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d901      	bls.n	800ad3e <f_write+0x2b8>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	4413      	add	r3, r2
 800ad4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad50:	69f9      	ldr	r1, [r7, #28]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fd ff5c 	bl	8008c10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	4413      	add	r3, r2
 800ad6c:	61fb      	str	r3, [r7, #28]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	619a      	str	r2, [r3, #24]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	bf38      	it	cc
 800ad86:	461a      	movcc	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	60da      	str	r2, [r3, #12]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	441a      	add	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f47f aeb6 	bne.w	800ab14 <f_write+0x8e>
 800ada8:	e000      	b.n	800adac <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adaa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	7d1b      	ldrb	r3, [r3, #20]
 800adb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2100      	movs	r1, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fd ffb9 	bl	8008d36 <unlock_fs>
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3730      	adds	r7, #48	; 0x30
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f107 0208 	add.w	r2, r7, #8
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff fbea 	bl	800a5b8 <validate>
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d16d      	bne.n	800aeca <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7d1b      	ldrb	r3, [r3, #20]
 800adf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d067      	beq.n	800aeca <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7d1b      	ldrb	r3, [r3, #20]
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da1a      	bge.n	800ae3a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	7858      	ldrb	r0, [r3, #1]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1a      	ldr	r2, [r3, #32]
 800ae12:	2301      	movs	r3, #1
 800ae14:	f7fd fe3c 	bl	8008a90 <disk_write>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d006      	beq.n	800ae2c <f_sync+0x5e>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2101      	movs	r1, #1
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fd ff87 	bl	8008d36 <unlock_fs>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e055      	b.n	800aed8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae3a:	f007 fab3 	bl	80123a4 <get_fattime>
 800ae3e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fe f93f 	bl	80090cc <move_window>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d138      	bne.n	800aeca <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	330b      	adds	r3, #11
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	320b      	adds	r2, #11
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	f042 0220 	orr.w	r2, r2, #32
 800ae6c:	b2d2      	uxtb	r2, r2
 800ae6e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	f7fe fe44 	bl	8009b08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f103 021c 	add.w	r2, r3, #28
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7fd fe93 	bl	8008bb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3316      	adds	r3, #22
 800ae96:	6939      	ldr	r1, [r7, #16]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd fe8d 	bl	8008bb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3312      	adds	r3, #18
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fd fe6c 	bl	8008b82 <st_word>
					fs->wflag = 1;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2201      	movs	r2, #1
 800aeae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe f938 	bl	8009128 <sync_fs>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7d1b      	ldrb	r3, [r3, #20]
 800aec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	7dfa      	ldrb	r2, [r7, #23]
 800aece:	4611      	mov	r1, r2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fd ff30 	bl	8008d36 <unlock_fs>
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff70 	bl	800adce <f_sync>
 800aeee:	4603      	mov	r3, r0
 800aef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11d      	bne.n	800af34 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f107 0208 	add.w	r2, r7, #8
 800aefe:	4611      	mov	r1, r2
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff fb59 	bl	800a5b8 <validate>
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d111      	bne.n	800af34 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe f835 	bl	8008f84 <dec_lock>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fd ff01 	bl	8008d36 <unlock_fs>
#endif
		}
	}
	return res;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b086      	sub	sp, #24
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <f_opendir+0x14>
 800af4e:	2309      	movs	r3, #9
 800af50:	e06a      	b.n	800b028 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800af56:	f107 010c 	add.w	r1, r7, #12
 800af5a:	463b      	mov	r3, r7
 800af5c:	2200      	movs	r2, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff f8d6 	bl	800a110 <find_volume>
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d14f      	bne.n	800b00e <f_opendir+0xd0>
		obj->fs = fs;
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7fe ffbd 	bl	8009ef8 <follow_path>
 800af7e:	4603      	mov	r3, r0
 800af80:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d13d      	bne.n	800b004 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af8e:	b25b      	sxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	db12      	blt.n	800afba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	799b      	ldrb	r3, [r3, #6]
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fe fd8e 	bl	8009aca <ld_clust>
 800afae:	4602      	mov	r2, r0
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	609a      	str	r2, [r3, #8]
 800afb4:	e001      	b.n	800afba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800afb6:	2305      	movs	r3, #5
 800afb8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d121      	bne.n	800b004 <f_opendir+0xc6>
				obj->id = fs->id;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	88da      	ldrh	r2, [r3, #6]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7fe fbf6 	bl	80097bc <dir_sdi>
 800afd0:	4603      	mov	r3, r0
 800afd2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d114      	bne.n	800b004 <f_opendir+0xc6>
					if (obj->sclust) {
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00d      	beq.n	800affe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800afe2:	2100      	movs	r1, #0
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7fd ff3f 	bl	8008e68 <inc_lock>
 800afea:	4602      	mov	r2, r0
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d105      	bne.n	800b004 <f_opendir+0xc6>
 800aff8:	2312      	movs	r3, #18
 800affa:	75fb      	strb	r3, [r7, #23]
 800affc:	e002      	b.n	800b004 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2200      	movs	r2, #0
 800b002:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	2b04      	cmp	r3, #4
 800b008:	d101      	bne.n	800b00e <f_opendir+0xd0>
 800b00a:	2305      	movs	r3, #5
 800b00c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <f_opendir+0xdc>
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	7dfa      	ldrb	r2, [r7, #23]
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7fd fe88 	bl	8008d36 <unlock_fs>
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f107 0208 	add.w	r2, r7, #8
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fab9 	bl	800a5b8 <validate>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d115      	bne.n	800b07c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fd ff91 	bl	8008f84 <dec_lock>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d102      	bne.n	800b072 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f7fd fe5d 	bl	8008d36 <unlock_fs>
#endif
	}
	return res;
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f107 0208 	add.w	r2, r7, #8
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff fa8d 	bl	800a5b8 <validate>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d126      	bne.n	800b0f6 <f_readdir+0x70>
		if (!fno) {
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7fe fb83 	bl	80097bc <dir_sdi>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
 800b0ba:	e01c      	b.n	800b0f6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b0bc:	2100      	movs	r1, #0
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7fe fd42 	bl	8009b48 <dir_read>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d101      	bne.n	800b0d2 <f_readdir+0x4c>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10e      	bne.n	800b0f6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fe fe18 	bl	8009d10 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fe fbe5 	bl	80098b2 <dir_next>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d101      	bne.n	800b0f6 <f_readdir+0x70>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	7bfa      	ldrb	r2, [r7, #15]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd fe1a 	bl	8008d36 <unlock_fs>
 800b102:	7bfb      	ldrb	r3, [r7, #15]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b092      	sub	sp, #72	; 0x48
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b118:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b11c:	f107 030c 	add.w	r3, r7, #12
 800b120:	2200      	movs	r2, #0
 800b122:	4618      	mov	r0, r3
 800b124:	f7fe fff4 	bl	800a110 <find_volume>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b12e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b132:	2b00      	cmp	r3, #0
 800b134:	f040 8099 	bne.w	800b26a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	695a      	ldr	r2, [r3, #20]
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	3b02      	subs	r3, #2
 800b148:	429a      	cmp	r2, r3
 800b14a:	d804      	bhi.n	800b156 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	695a      	ldr	r2, [r3, #20]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	e089      	b.n	800b26a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d128      	bne.n	800b1b4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b162:	2302      	movs	r3, #2
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe f866 	bl	8009242 <get_fat>
 800b176:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d103      	bne.n	800b188 <f_getfree+0x7c>
 800b180:	2301      	movs	r3, #1
 800b182:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b186:	e063      	b.n	800b250 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d103      	bne.n	800b196 <f_getfree+0x8a>
 800b18e:	2302      	movs	r3, #2
 800b190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b194:	e05c      	b.n	800b250 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <f_getfree+0x96>
 800b19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19e:	3301      	adds	r3, #1
 800b1a0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3db      	bcc.n	800b16a <f_getfree+0x5e>
 800b1b2:	e04d      	b.n	800b250 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d113      	bne.n	800b1f6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	63ba      	str	r2, [r7, #56]	; 0x38
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f7fd ff78 	bl	80090cc <move_window>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b1e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d131      	bne.n	800b24e <f_getfree+0x142>
							p = fs->win;
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	3334      	adds	r3, #52	; 0x34
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b1f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d10f      	bne.n	800b21e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b200:	f7fd fc84 	bl	8008b0c <ld_word>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <f_getfree+0x104>
 800b20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b20c:	3301      	adds	r3, #1
 800b20e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	3302      	adds	r3, #2
 800b214:	633b      	str	r3, [r7, #48]	; 0x30
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	3b02      	subs	r3, #2
 800b21a:	637b      	str	r3, [r7, #52]	; 0x34
 800b21c:	e010      	b.n	800b240 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b21e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b220:	f7fd fc8c 	bl	8008b3c <ld_dword>
 800b224:	4603      	mov	r3, r0
 800b226:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <f_getfree+0x128>
 800b22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b230:	3301      	adds	r3, #1
 800b232:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	3304      	adds	r3, #4
 800b238:	633b      	str	r3, [r7, #48]	; 0x30
 800b23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23c:	3b04      	subs	r3, #4
 800b23e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b242:	3b01      	subs	r3, #1
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1bd      	bne.n	800b1c8 <f_getfree+0xbc>
 800b24c:	e000      	b.n	800b250 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b24e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b254:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b25a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b260:	7912      	ldrb	r2, [r2, #4]
 800b262:	f042 0201 	orr.w	r2, r2, #1
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd fd5f 	bl	8008d36 <unlock_fs>
 800b278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3748      	adds	r7, #72	; 0x48
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b09d      	sub	sp, #116	; 0x74
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	460b      	mov	r3, r1
 800b292:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b294:	2301      	movs	r3, #1
 800b296:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b29c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fe99 	bl	8009fda <get_ldnumber>
 800b2a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	da02      	bge.n	800b2b6 <f_mkfs+0x32>
 800b2b0:	230b      	movs	r3, #11
 800b2b2:	f000 bc0d 	b.w	800bad0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b2b6:	4a94      	ldr	r2, [pc, #592]	; (800b508 <f_mkfs+0x284>)
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <f_mkfs+0x4a>
 800b2c2:	4a91      	ldr	r2, [pc, #580]	; (800b508 <f_mkfs+0x284>)
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b2da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fd fb90 	bl	8008a04 <disk_initialize>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b2ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <f_mkfs+0x76>
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e3ea      	b.n	800bad0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b2fa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <f_mkfs+0x86>
 800b306:	230a      	movs	r3, #10
 800b308:	e3e2      	b.n	800bad0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b30a:	f107 0214 	add.w	r2, r7, #20
 800b30e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b312:	2103      	movs	r1, #3
 800b314:	4618      	mov	r0, r3
 800b316:	f7fd fbdb 	bl	8008ad0 <disk_ioctl>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10c      	bne.n	800b33a <f_mkfs+0xb6>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d009      	beq.n	800b33a <f_mkfs+0xb6>
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b32c:	d805      	bhi.n	800b33a <f_mkfs+0xb6>
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	1e5a      	subs	r2, r3, #1
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	4013      	ands	r3, r2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <f_mkfs+0xba>
 800b33a:	2301      	movs	r3, #1
 800b33c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b33e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b342:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <f_mkfs+0xce>
 800b34a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d809      	bhi.n	800b366 <f_mkfs+0xe2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b358:	d805      	bhi.n	800b366 <f_mkfs+0xe2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4013      	ands	r3, r2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <f_mkfs+0xe6>
 800b366:	2313      	movs	r3, #19
 800b368:	e3b2      	b.n	800bad0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b36a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b372:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b37a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b388:	fb02 f303 	mul.w	r3, r2, r3
 800b38c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <f_mkfs+0x114>
 800b394:	230e      	movs	r3, #14
 800b396:	e39b      	b.n	800bad0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b398:	f107 0210 	add.w	r2, r7, #16
 800b39c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fd fb94 	bl	8008ad0 <disk_ioctl>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <f_mkfs+0x12e>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e38e      	b.n	800bad0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b3b2:	7afb      	ldrb	r3, [r7, #11]
 800b3b4:	f003 0308 	and.w	r3, r3, #8
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <f_mkfs+0x13c>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e000      	b.n	800b3c2 <f_mkfs+0x13e>
 800b3c0:	233f      	movs	r3, #63	; 0x3f
 800b3c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d201      	bcs.n	800b3d0 <f_mkfs+0x14c>
 800b3cc:	230e      	movs	r3, #14
 800b3ce:	e37f      	b.n	800bad0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b7f      	cmp	r3, #127	; 0x7f
 800b3dc:	d801      	bhi.n	800b3e2 <f_mkfs+0x15e>
 800b3de:	230e      	movs	r3, #14
 800b3e0:	e376      	b.n	800bad0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b80      	cmp	r3, #128	; 0x80
 800b3e6:	d901      	bls.n	800b3ec <f_mkfs+0x168>
 800b3e8:	2313      	movs	r3, #19
 800b3ea:	e371      	b.n	800bad0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
 800b3ee:	f003 0302 	and.w	r3, r3, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00d      	beq.n	800b412 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d004      	beq.n	800b40a <f_mkfs+0x186>
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d103      	bne.n	800b412 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b40a:	2303      	movs	r3, #3
 800b40c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b410:	e009      	b.n	800b426 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b412:	7afb      	ldrb	r3, [r7, #11]
 800b414:	f003 0301 	and.w	r3, r3, #1
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <f_mkfs+0x19c>
 800b41c:	2313      	movs	r3, #19
 800b41e:	e357      	b.n	800bad0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b420:	2302      	movs	r3, #2
 800b422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b42a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d13c      	bne.n	800b4ac <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11b      	bne.n	800b470 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	0c5b      	lsrs	r3, r3, #17
 800b43c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b43e:	2300      	movs	r3, #0
 800b440:	64bb      	str	r3, [r7, #72]	; 0x48
 800b442:	2301      	movs	r3, #1
 800b444:	66bb      	str	r3, [r7, #104]	; 0x68
 800b446:	e005      	b.n	800b454 <f_mkfs+0x1d0>
 800b448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b44a:	3301      	adds	r3, #1
 800b44c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b44e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	66bb      	str	r3, [r7, #104]	; 0x68
 800b454:	4a2d      	ldr	r2, [pc, #180]	; (800b50c <f_mkfs+0x288>)
 800b456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d007      	beq.n	800b470 <f_mkfs+0x1ec>
 800b460:	4a2a      	ldr	r2, [pc, #168]	; (800b50c <f_mkfs+0x288>)
 800b462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b468:	461a      	mov	r2, r3
 800b46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d9eb      	bls.n	800b448 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b474:	fbb2 f3f3 	udiv	r3, r2, r3
 800b478:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	3302      	adds	r3, #2
 800b47e:	009a      	lsls	r2, r3, #2
 800b480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b482:	4413      	add	r3, r2
 800b484:	1e5a      	subs	r2, r3, #1
 800b486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b488:	fbb2 f3f3 	udiv	r3, r2, r3
 800b48c:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b48e:	2320      	movs	r3, #32
 800b490:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b492:	2300      	movs	r3, #0
 800b494:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d903      	bls.n	800b4a8 <f_mkfs+0x224>
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	4a1b      	ldr	r2, [pc, #108]	; (800b510 <f_mkfs+0x28c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d952      	bls.n	800b54e <f_mkfs+0x2ca>
 800b4a8:	230e      	movs	r3, #14
 800b4aa:	e311      	b.n	800bad0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11b      	bne.n	800b4ea <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	0b1b      	lsrs	r3, r3, #12
 800b4b6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4bc:	2301      	movs	r3, #1
 800b4be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4c0:	e005      	b.n	800b4ce <f_mkfs+0x24a>
 800b4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4ce:	4a11      	ldr	r2, [pc, #68]	; (800b514 <f_mkfs+0x290>)
 800b4d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <f_mkfs+0x266>
 800b4da:	4a0e      	ldr	r2, [pc, #56]	; (800b514 <f_mkfs+0x290>)
 800b4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d9eb      	bls.n	800b4c2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d90c      	bls.n	800b518 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	3302      	adds	r3, #2
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b506:	e012      	b.n	800b52e <f_mkfs+0x2aa>
 800b508:	20000740 	.word	0x20000740
 800b50c:	0802ee48 	.word	0x0802ee48
 800b510:	0ffffff5 	.word	0x0ffffff5
 800b514:	0802ee58 	.word	0x0802ee58
				} else {
					fmt = FS_FAT12;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b51e:	6a3a      	ldr	r2, [r7, #32]
 800b520:	4613      	mov	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4413      	add	r3, r2
 800b526:	3301      	adds	r3, #1
 800b528:	085b      	lsrs	r3, r3, #1
 800b52a:	3303      	adds	r3, #3
 800b52c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b52e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b532:	4413      	add	r3, r2
 800b534:	1e5a      	subs	r2, r3, #1
 800b536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b538:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53c:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800b53e:	2301      	movs	r3, #1
 800b540:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b544:	015a      	lsls	r2, r3, #5
 800b546:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b548:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b552:	4413      	add	r3, r2
 800b554:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b55a:	fb02 f203 	mul.w	r2, r2, r3
 800b55e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b560:	441a      	add	r2, r3
 800b562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b564:	4413      	add	r3, r2
 800b566:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	1e5a      	subs	r2, r3, #1
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	425b      	negs	r3, r3
 800b574:	401a      	ands	r2, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b57c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b580:	2b03      	cmp	r3, #3
 800b582:	d108      	bne.n	800b596 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b588:	4413      	add	r3, r2
 800b58a:	657b      	str	r3, [r7, #84]	; 0x54
 800b58c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b58e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b590:	4413      	add	r3, r2
 800b592:	65bb      	str	r3, [r7, #88]	; 0x58
 800b594:	e006      	b.n	800b5a4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5a0:	4413      	add	r3, r2
 800b5a2:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b5a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5a6:	011a      	lsls	r2, r3, #4
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	441a      	add	r2, r3
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	1ad2      	subs	r2, r2, r3
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d901      	bls.n	800b5ba <f_mkfs+0x336>
 800b5b6:	230e      	movs	r3, #14
 800b5b8:	e28a      	b.n	800bad0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5c4:	fb01 f303 	mul.w	r3, r1, r3
 800b5c8:	1ad2      	subs	r2, r2, r3
 800b5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5cc:	1ad2      	subs	r2, r2, r3
 800b5ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b5d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d10f      	bne.n	800b5fe <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d80a      	bhi.n	800b5fe <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <f_mkfs+0x376>
 800b5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5f0:	085b      	lsrs	r3, r3, #1
 800b5f2:	607b      	str	r3, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d144      	bne.n	800b684 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b5fa:	230e      	movs	r3, #14
 800b5fc:	e268      	b.n	800bad0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b5fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b602:	2b02      	cmp	r3, #2
 800b604:	d133      	bne.n	800b66e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d91e      	bls.n	800b64e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d107      	bne.n	800b626 <f_mkfs+0x3a2>
 800b616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d803      	bhi.n	800b626 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b61e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	e033      	b.n	800b68e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	f003 0302 	and.w	r3, r3, #2
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d003      	beq.n	800b638 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b630:	2303      	movs	r3, #3
 800b632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b636:	e02a      	b.n	800b68e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d105      	bne.n	800b64a <f_mkfs+0x3c6>
 800b63e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	607b      	str	r3, [r7, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b80      	cmp	r3, #128	; 0x80
 800b648:	d91e      	bls.n	800b688 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b64a:	230e      	movs	r3, #14
 800b64c:	e240      	b.n	800bad0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b654:	4293      	cmp	r3, r2
 800b656:	d80a      	bhi.n	800b66e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d105      	bne.n	800b66a <f_mkfs+0x3e6>
 800b65e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b660:	005b      	lsls	r3, r3, #1
 800b662:	607b      	str	r3, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b80      	cmp	r3, #128	; 0x80
 800b668:	d910      	bls.n	800b68c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b66a:	230e      	movs	r3, #14
 800b66c:	e230      	b.n	800bad0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b66e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10c      	bne.n	800b690 <f_mkfs+0x40c>
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d907      	bls.n	800b690 <f_mkfs+0x40c>
 800b680:	230e      	movs	r3, #14
 800b682:	e225      	b.n	800bad0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b684:	bf00      	nop
 800b686:	e6ce      	b.n	800b426 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b688:	bf00      	nop
 800b68a:	e6cc      	b.n	800b426 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b68c:	bf00      	nop
			pau = au;
 800b68e:	e6ca      	b.n	800b426 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b690:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b692:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b694:	461a      	mov	r2, r3
 800b696:	2100      	movs	r1, #0
 800b698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b69a:	f7fd fada 	bl	8008c52 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b69e:	220b      	movs	r2, #11
 800b6a0:	49bc      	ldr	r1, [pc, #752]	; (800b994 <f_mkfs+0x710>)
 800b6a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6a4:	f7fd fab4 	bl	8008c10 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	330b      	adds	r3, #11
 800b6ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fd fa66 	bl	8008b82 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	330d      	adds	r3, #13
 800b6ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	330e      	adds	r3, #14
 800b6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6c6:	b292      	uxth	r2, r2
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fd fa59 	bl	8008b82 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d2:	3310      	adds	r3, #16
 800b6d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	f103 0211 	add.w	r2, r3, #17
 800b6e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	d002      	beq.n	800b6ee <f_mkfs+0x46a>
 800b6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	e000      	b.n	800b6f0 <f_mkfs+0x46c>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f7fd fa45 	bl	8008b82 <st_word>
		if (sz_vol < 0x10000) {
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fe:	d208      	bcs.n	800b712 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	3313      	adds	r3, #19
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	b292      	uxth	r2, r2
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd fa39 	bl	8008b82 <st_word>
 800b710:	e006      	b.n	800b720 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	3320      	adds	r3, #32
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fd fa4c 	bl	8008bb8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	3315      	adds	r3, #21
 800b724:	22f8      	movs	r2, #248	; 0xf8
 800b726:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	3318      	adds	r3, #24
 800b72c:	213f      	movs	r1, #63	; 0x3f
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fd fa27 	bl	8008b82 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	331a      	adds	r3, #26
 800b738:	21ff      	movs	r1, #255	; 0xff
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fd fa21 	bl	8008b82 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	331c      	adds	r3, #28
 800b744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b746:	4618      	mov	r0, r3
 800b748:	f7fd fa36 	bl	8008bb8 <st_dword>
		if (fmt == FS_FAT32) {
 800b74c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b750:	2b03      	cmp	r3, #3
 800b752:	d131      	bne.n	800b7b8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b75a:	f006 fe23 	bl	80123a4 <get_fattime>
 800b75e:	4603      	mov	r3, r0
 800b760:	4619      	mov	r1, r3
 800b762:	4620      	mov	r0, r4
 800b764:	f7fd fa28 	bl	8008bb8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	3324      	adds	r3, #36	; 0x24
 800b76c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fd fa22 	bl	8008bb8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	332c      	adds	r3, #44	; 0x2c
 800b778:	2102      	movs	r1, #2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fd fa1c 	bl	8008bb8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	3330      	adds	r3, #48	; 0x30
 800b784:	2101      	movs	r1, #1
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd f9fb 	bl	8008b82 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	3332      	adds	r3, #50	; 0x32
 800b790:	2106      	movs	r1, #6
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd f9f5 	bl	8008b82 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	3340      	adds	r3, #64	; 0x40
 800b79c:	2280      	movs	r2, #128	; 0x80
 800b79e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	3342      	adds	r3, #66	; 0x42
 800b7a4:	2229      	movs	r2, #41	; 0x29
 800b7a6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	3347      	adds	r3, #71	; 0x47
 800b7ac:	2213      	movs	r2, #19
 800b7ae:	497a      	ldr	r1, [pc, #488]	; (800b998 <f_mkfs+0x714>)
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fd fa2d 	bl	8008c10 <mem_cpy>
 800b7b6:	e020      	b.n	800b7fa <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ba:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b7be:	f006 fdf1 	bl	80123a4 <get_fattime>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7fd f9f6 	bl	8008bb8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	3316      	adds	r3, #22
 800b7d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7d2:	b292      	uxth	r2, r2
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fd f9d3 	bl	8008b82 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	3324      	adds	r3, #36	; 0x24
 800b7e0:	2280      	movs	r2, #128	; 0x80
 800b7e2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	3326      	adds	r3, #38	; 0x26
 800b7e8:	2229      	movs	r2, #41	; 0x29
 800b7ea:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	332b      	adds	r3, #43	; 0x2b
 800b7f0:	2213      	movs	r2, #19
 800b7f2:	496a      	ldr	r1, [pc, #424]	; (800b99c <f_mkfs+0x718>)
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd fa0b 	bl	8008c10 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b800:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b804:	4618      	mov	r0, r3
 800b806:	f7fd f9bc 	bl	8008b82 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b80a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b80e:	2301      	movs	r3, #1
 800b810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b814:	f7fd f93c 	bl	8008a90 <disk_write>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <f_mkfs+0x59e>
 800b81e:	2301      	movs	r3, #1
 800b820:	e156      	b.n	800bad0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b822:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b826:	2b03      	cmp	r3, #3
 800b828:	d140      	bne.n	800b8ac <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	1d9a      	adds	r2, r3, #6
 800b82e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b832:	2301      	movs	r3, #1
 800b834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b836:	f7fd f92b 	bl	8008a90 <disk_write>
			mem_set(buf, 0, ss);
 800b83a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b83c:	461a      	mov	r2, r3
 800b83e:	2100      	movs	r1, #0
 800b840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b842:	f7fd fa06 	bl	8008c52 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b846:	4956      	ldr	r1, [pc, #344]	; (800b9a0 <f_mkfs+0x71c>)
 800b848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b84a:	f7fd f9b5 	bl	8008bb8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b854:	4953      	ldr	r1, [pc, #332]	; (800b9a4 <f_mkfs+0x720>)
 800b856:	4618      	mov	r0, r3
 800b858:	f7fd f9ae 	bl	8008bb8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	3b01      	subs	r3, #1
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fd f9a5 	bl	8008bb8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b874:	2102      	movs	r1, #2
 800b876:	4618      	mov	r0, r3
 800b878:	f7fd f99e 	bl	8008bb8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b882:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b886:	4618      	mov	r0, r3
 800b888:	f7fd f97b 	bl	8008b82 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	1dda      	adds	r2, r3, #7
 800b890:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b894:	2301      	movs	r3, #1
 800b896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b898:	f7fd f8fa 	bl	8008a90 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	1c5a      	adds	r2, r3, #1
 800b8a0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8a8:	f7fd f8f2 	bl	8008a90 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b2:	f7fd f9ce 	bl	8008c52 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b8b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8b8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8be:	e04b      	b.n	800b958 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800b8c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d113      	bne.n	800b8f0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b8c8:	f06f 0107 	mvn.w	r1, #7
 800b8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ce:	f7fd f973 	bl	8008bb8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	f04f 31ff 	mov.w	r1, #4294967295
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fd f96c 	bl	8008bb8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd f965 	bl	8008bb8 <st_dword>
 800b8ee:	e00b      	b.n	800b908 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b8f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <f_mkfs+0x678>
 800b8f8:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <f_mkfs+0x724>)
 800b8fa:	e001      	b.n	800b900 <f_mkfs+0x67c>
 800b8fc:	f06f 0307 	mvn.w	r3, #7
 800b900:	4619      	mov	r1, r3
 800b902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b904:	f7fd f958 	bl	8008bb8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b90c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	4293      	cmp	r3, r2
 800b912:	bf28      	it	cs
 800b914:	4613      	movcs	r3, r2
 800b916:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b918:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b91c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b91e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b922:	f7fd f8b5 	bl	8008a90 <disk_write>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <f_mkfs+0x6ac>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e0cf      	b.n	800bad0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800b930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b932:	461a      	mov	r2, r3
 800b934:	2100      	movs	r1, #0
 800b936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b938:	f7fd f98b 	bl	8008c52 <mem_set>
				sect += n; nsect -= n;
 800b93c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b940:	4413      	add	r3, r2
 800b942:	667b      	str	r3, [r7, #100]	; 0x64
 800b944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800b94c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1dc      	bne.n	800b90c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b954:	3301      	adds	r3, #1
 800b956:	64bb      	str	r3, [r7, #72]	; 0x48
 800b958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d3af      	bcc.n	800b8c0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b964:	2b03      	cmp	r3, #3
 800b966:	d101      	bne.n	800b96c <f_mkfs+0x6e8>
 800b968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b96a:	e000      	b.n	800b96e <f_mkfs+0x6ea>
 800b96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	4293      	cmp	r3, r2
 800b976:	bf28      	it	cs
 800b978:	4613      	movcs	r3, r2
 800b97a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b97c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b982:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b986:	f7fd f883 	bl	8008a90 <disk_write>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00d      	beq.n	800b9ac <f_mkfs+0x728>
 800b990:	2301      	movs	r3, #1
 800b992:	e09d      	b.n	800bad0 <f_mkfs+0x84c>
 800b994:	0802b894 	.word	0x0802b894
 800b998:	0802b8a0 	.word	0x0802b8a0
 800b99c:	0802b8b4 	.word	0x0802b8b4
 800b9a0:	41615252 	.word	0x41615252
 800b9a4:	61417272 	.word	0x61417272
 800b9a8:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800b9ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9b0:	4413      	add	r3, r2
 800b9b2:	667b      	str	r3, [r7, #100]	; 0x64
 800b9b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800b9bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1d6      	bne.n	800b970 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800b9c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d103      	bne.n	800b9d2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b9d0:	e010      	b.n	800b9f4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9d8:	d303      	bcc.n	800b9e2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800b9da:	2306      	movs	r3, #6
 800b9dc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b9e0:	e008      	b.n	800b9f4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800b9e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d101      	bne.n	800b9ee <f_mkfs+0x76a>
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	e000      	b.n	800b9f0 <f_mkfs+0x76c>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d15b      	bne.n	800bab6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800b9fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba00:	461a      	mov	r2, r3
 800ba02:	2100      	movs	r1, #0
 800ba04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba06:	f7fd f924 	bl	8008c52 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fd f8b4 	bl	8008b82 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba20:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3302      	adds	r3, #2
 800ba34:	2201      	movs	r2, #1
 800ba36:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	3303      	adds	r3, #3
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	3304      	adds	r3, #4
 800ba44:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800ba48:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	441a      	add	r2, r3
 800ba50:	4b21      	ldr	r3, [pc, #132]	; (800bad8 <f_mkfs+0x854>)
 800ba52:	fba3 1302 	umull	r1, r3, r3, r2
 800ba56:	1ad2      	subs	r2, r2, r3
 800ba58:	0852      	lsrs	r2, r2, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	0b5b      	lsrs	r3, r3, #13
 800ba5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	3305      	adds	r3, #5
 800ba64:	22fe      	movs	r2, #254	; 0xfe
 800ba66:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	3306      	adds	r3, #6
 800ba6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba6e:	0892      	lsrs	r2, r2, #2
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	3308      	adds	r3, #8
 800ba88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fd f894 	bl	8008bb8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	330c      	adds	r3, #12
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fd f88d 	bl	8008bb8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ba9e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800baa2:	2301      	movs	r3, #1
 800baa4:	2200      	movs	r2, #0
 800baa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baa8:	f7fc fff2 	bl	8008a90 <disk_write>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <f_mkfs+0x832>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e00c      	b.n	800bad0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bab6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800baba:	2200      	movs	r2, #0
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd f806 	bl	8008ad0 <disk_ioctl>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <f_mkfs+0x84a>
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <f_mkfs+0x84c>

	return FR_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3774      	adds	r7, #116	; 0x74
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd90      	pop	{r4, r7, pc}
 800bad8:	0515565b 	.word	0x0515565b

0800badc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	4613      	mov	r3, r2
 800bae8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800baf2:	4b1f      	ldr	r3, [pc, #124]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800baf4:	7a5b      	ldrb	r3, [r3, #9]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d131      	bne.n	800bb60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bafc:	4b1c      	ldr	r3, [pc, #112]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bafe:	7a5b      	ldrb	r3, [r3, #9]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	461a      	mov	r2, r3
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb0a:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb0c:	7a5b      	ldrb	r3, [r3, #9]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4a17      	ldr	r2, [pc, #92]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb1a:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb1c:	7a5b      	ldrb	r3, [r3, #9]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb24:	4413      	add	r3, r2
 800bb26:	79fa      	ldrb	r2, [r7, #7]
 800bb28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb2a:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb2c:	7a5b      	ldrb	r3, [r3, #9]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	b2d1      	uxtb	r1, r2
 800bb34:	4a0e      	ldr	r2, [pc, #56]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb36:	7251      	strb	r1, [r2, #9]
 800bb38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb3a:	7dbb      	ldrb	r3, [r7, #22]
 800bb3c:	3330      	adds	r3, #48	; 0x30
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	3301      	adds	r3, #1
 800bb48:	223a      	movs	r2, #58	; 0x3a
 800bb4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3302      	adds	r3, #2
 800bb50:	222f      	movs	r2, #47	; 0x2f
 800bb52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	3303      	adds	r3, #3
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20000768 	.word	0x20000768

0800bb74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff ffaa 	bl	800badc <FATFS_LinkDriverEx>
 800bb88:	4603      	mov	r3, r0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800bba4:	2301      	movs	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800bba8:	4b15      	ldr	r3, [pc, #84]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbaa:	7a5b      	ldrb	r3, [r3, #9]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01e      	beq.n	800bbf0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	3b30      	subs	r3, #48	; 0x30
 800bbb8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	4a10      	ldr	r2, [pc, #64]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d013      	beq.n	800bbf0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	4a0d      	ldr	r2, [pc, #52]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	4a0a      	ldr	r2, [pc, #40]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbd8:	4413      	add	r3, r2
 800bbda:	2200      	movs	r2, #0
 800bbdc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800bbde:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbe0:	7a5b      	ldrb	r3, [r3, #9]
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <FATFS_UnLinkDriverEx+0x6c>)
 800bbea:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	20000768 	.word	0x20000768

0800bc04 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff ffc0 	bl	800bb94 <FATFS_UnLinkDriverEx>
 800bc14:	4603      	mov	r3, r0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	4603      	mov	r3, r0
 800bc26:	6039      	str	r1, [r7, #0]
 800bc28:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bc2e:	f107 0308 	add.w	r3, r7, #8
 800bc32:	2101      	movs	r1, #1
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 f951 	bl	800bedc <osSemaphoreCreate>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bf14      	ite	ne
 800bc48:	2301      	movne	r3, #1
 800bc4a:	2300      	moveq	r3, #0
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	60fb      	str	r3, [r7, #12]

    return ret;
 800bc50:	68fb      	ldr	r3, [r7, #12]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f9de 	bl	800c024 <osSemaphoreDelete>
    return 1;
 800bc68:	2301      	movs	r3, #1
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800bc7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f948 	bl	800bf18 <osSemaphoreWait>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <ff_req_grant+0x20>
  {
    ret = 1;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bc92:	68fb      	ldr	r3, [r7, #12]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f987 	bl	800bfb8 <osSemaphoreRelease>
}
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b085      	sub	sp, #20
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	4603      	mov	r3, r0
 800bcba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bcc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcc4:	2b84      	cmp	r3, #132	; 0x84
 800bcc6:	d005      	beq.n	800bcd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bcc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4413      	add	r3, r2
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bce8:	f3ef 8305 	mrs	r3, IPSR
 800bcec:	607b      	str	r3, [r7, #4]
  return(result);
 800bcee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd0a:	f001 fd1f 	bl	800d74c <vTaskStartScheduler>
  
  return osOK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bd18:	f7ff ffe3 	bl	800bce2 <inHandlerMode>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bd22:	f001 fe19 	bl	800d958 <xTaskGetTickCountFromISR>
 800bd26:	4603      	mov	r3, r0
 800bd28:	e002      	b.n	800bd30 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bd2a:	f001 fe05 	bl	800d938 <xTaskGetTickCount>
 800bd2e:	4603      	mov	r3, r0
  }
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af02      	add	r7, sp, #8
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685c      	ldr	r4, [r3, #4]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd4a:	b29e      	uxth	r6, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ffad 	bl	800bcb2 <makeFreeRtosPriority>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	f107 030c 	add.w	r3, r7, #12
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	9200      	str	r2, [sp, #0]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	4632      	mov	r2, r6
 800bd66:	4629      	mov	r1, r5
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f001 fb8d 	bl	800d488 <xTaskCreate>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d001      	beq.n	800bd78 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800bd74:	2300      	movs	r3, #0
 800bd76:	e000      	b.n	800bd7a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800bd78:	68fb      	ldr	r3, [r7, #12]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd82 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800bd86:	f002 f8fb 	bl	800df80 <xTaskGetCurrentTaskHandle>
 800bd8a:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <osDelay+0x16>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	e000      	b.n	800bda8 <osDelay+0x18>
 800bda6:	2301      	movs	r3, #1
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 fc99 	bl	800d6e0 <vTaskDelay>
  
  return osOK;
 800bdae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	f000 fec1 	bl	800cb48 <xQueueCreateMutex>
 800bdc6:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bdda:	2300      	movs	r3, #0
 800bddc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <osMutexWait+0x18>
    return osErrorParameter;
 800bde4:	2380      	movs	r3, #128	; 0x80
 800bde6:	e03c      	b.n	800be62 <osMutexWait+0x92>
  }
  
  ticks = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d103      	bne.n	800bdfc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	e009      	b.n	800be10 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d006      	beq.n	800be10 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <osMutexWait+0x40>
      ticks = 1;
 800be0c:	2301      	movs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800be10:	f7ff ff67 	bl	800bce2 <inHandlerMode>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d017      	beq.n	800be4a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	461a      	mov	r2, r3
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 f954 	bl	800d0d0 <xQueueReceiveFromISR>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d001      	beq.n	800be32 <osMutexWait+0x62>
      return osErrorOS;
 800be2e:	23ff      	movs	r3, #255	; 0xff
 800be30:	e017      	b.n	800be62 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d013      	beq.n	800be60 <osMutexWait+0x90>
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <osMutexWait+0x9c>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	e00a      	b.n	800be60 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800be4a:	2300      	movs	r3, #0
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	2100      	movs	r1, #0
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 f825 	bl	800cea0 <xQueueGenericReceive>
 800be56:	4603      	mov	r3, r0
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d001      	beq.n	800be60 <osMutexWait+0x90>
    return osErrorOS;
 800be5c:	23ff      	movs	r3, #255	; 0xff
 800be5e:	e000      	b.n	800be62 <osMutexWait+0x92>
  }
  
  return osOK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800be80:	f7ff ff2f 	bl	800bce2 <inHandlerMode>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d016      	beq.n	800beb8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 ff73 	bl	800cd7c <xQueueGiveFromISR>
 800be96:	4603      	mov	r3, r0
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d001      	beq.n	800bea0 <osMutexRelease+0x30>
      return osErrorOS;
 800be9c:	23ff      	movs	r3, #255	; 0xff
 800be9e:	e017      	b.n	800bed0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d013      	beq.n	800bece <osMutexRelease+0x5e>
 800bea6:	4b0c      	ldr	r3, [pc, #48]	; (800bed8 <osMutexRelease+0x68>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	e00a      	b.n	800bece <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800beb8:	2300      	movs	r3, #0
 800beba:	2200      	movs	r2, #0
 800bebc:	2100      	movs	r1, #0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fe5a 	bl	800cb78 <xQueueGenericSend>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d001      	beq.n	800bece <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800beca:	23ff      	movs	r3, #255	; 0xff
 800becc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bece:	68fb      	ldr	r3, [r7, #12]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d110      	bne.n	800bf0e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800beec:	2203      	movs	r2, #3
 800beee:	2100      	movs	r1, #0
 800bef0:	2001      	movs	r0, #1
 800bef2:	f000 fdb5 	bl	800ca60 <xQueueGenericCreate>
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d005      	beq.n	800bf0a <osSemaphoreCreate+0x2e>
 800befe:	2300      	movs	r3, #0
 800bf00:	2200      	movs	r2, #0
 800bf02:	2100      	movs	r1, #0
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 fe37 	bl	800cb78 <xQueueGenericSend>
    return sema;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	e000      	b.n	800bf10 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800bf0e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bf2c:	2380      	movs	r3, #128	; 0x80
 800bf2e:	e03c      	b.n	800bfaa <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d103      	bne.n	800bf44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	e009      	b.n	800bf58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d006      	beq.n	800bf58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <osSemaphoreWait+0x40>
      ticks = 1;
 800bf54:	2301      	movs	r3, #1
 800bf56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bf58:	f7ff fec3 	bl	800bce2 <inHandlerMode>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d017      	beq.n	800bf92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	461a      	mov	r2, r3
 800bf68:	2100      	movs	r1, #0
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f001 f8b0 	bl	800d0d0 <xQueueReceiveFromISR>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d001      	beq.n	800bf7a <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf76:	23ff      	movs	r3, #255	; 0xff
 800bf78:	e017      	b.n	800bfaa <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d013      	beq.n	800bfa8 <osSemaphoreWait+0x90>
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <osSemaphoreWait+0x9c>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	e00a      	b.n	800bfa8 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf92:	2300      	movs	r3, #0
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	2100      	movs	r1, #0
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 ff81 	bl	800cea0 <xQueueGenericReceive>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d001      	beq.n	800bfa8 <osSemaphoreWait+0x90>
    return osErrorOS;
 800bfa4:	23ff      	movs	r3, #255	; 0xff
 800bfa6:	e000      	b.n	800bfaa <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bfc8:	f7ff fe8b 	bl	800bce2 <inHandlerMode>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d016      	beq.n	800c000 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bfd2:	f107 0308 	add.w	r3, r7, #8
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fecf 	bl	800cd7c <xQueueGiveFromISR>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d001      	beq.n	800bfe8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bfe4:	23ff      	movs	r3, #255	; 0xff
 800bfe6:	e017      	b.n	800c018 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d013      	beq.n	800c016 <osSemaphoreRelease+0x5e>
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <osSemaphoreRelease+0x68>)
 800bff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	e00a      	b.n	800c016 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c000:	2300      	movs	r3, #0
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fdb6 	bl	800cb78 <xQueueGenericSend>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d001      	beq.n	800c016 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c012:	23ff      	movs	r3, #255	; 0xff
 800c014:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c016:	68fb      	ldr	r3, [r7, #12]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	e000ed04 	.word	0xe000ed04

0800c024 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c02c:	f7ff fe59 	bl	800bce2 <inHandlerMode>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c036:	2382      	movs	r3, #130	; 0x82
 800c038:	e003      	b.n	800c042 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f8cb 	bl	800d1d6 <vQueueDelete>

  return osOK; 
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c04e:	f001 ffa7 	bl	800dfa0 <xTaskGetSchedulerState>
 800c052:	4603      	mov	r3, r0
 800c054:	2b01      	cmp	r3, #1
 800c056:	d001      	beq.n	800c05c <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c058:	f000 fa2e 	bl	800c4b8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c05c:	bf00      	nop
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f103 0208 	add.w	r2, r3, #8
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f04f 32ff 	mov.w	r2, #4294967295
 800c078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f103 0208 	add.w	r2, r3, #8
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f103 0208 	add.w	r2, r3, #8
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	689a      	ldr	r2, [r3, #8]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	601a      	str	r2, [r3, #0]
}
 800c0f6:	bf00      	nop
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c118:	d103      	bne.n	800c122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e00c      	b.n	800c13c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3308      	adds	r3, #8
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	e002      	b.n	800c130 <vListInsert+0x2e>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d9f6      	bls.n	800c12a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	601a      	str	r2, [r3, #0]
}
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	6892      	ldr	r2, [r2, #8]
 800c18a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	6852      	ldr	r2, [r2, #4]
 800c194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d103      	bne.n	800c1a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689a      	ldr	r2, [r3, #8]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	1e5a      	subs	r2, r3, #1
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3b04      	subs	r3, #4
 800c1d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f023 0201 	bic.w	r2, r3, #1
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b04      	subs	r3, #4
 800c1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1f8:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <pxPortInitialiseStack+0x64>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3b14      	subs	r3, #20
 800c202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3b04      	subs	r3, #4
 800c20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f06f 0202 	mvn.w	r2, #2
 800c216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3b20      	subs	r3, #32
 800c21c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c21e:	68fb      	ldr	r3, [r7, #12]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	0800c231 	.word	0x0800c231

0800c230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c236:	4b0e      	ldr	r3, [pc, #56]	; (800c270 <prvTaskExitError+0x40>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d00b      	beq.n	800c258 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	b672      	cpsid	i
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	b662      	cpsie	i
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	e7fe      	b.n	800c256 <prvTaskExitError+0x26>
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	b672      	cpsid	i
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	b662      	cpsie	i
 800c26c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800c26e:	e7fe      	b.n	800c26e <prvTaskExitError+0x3e>
 800c270:	20000014 	.word	0x20000014
	...

0800c280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <pxCurrentTCBConst2>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f380 8809 	msr	PSP, r0
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f380 8811 	msr	BASEPRI, r0
 800c29a:	4770      	bx	lr
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst2>:
 800c2a0:	2000f794 	.word	0x2000f794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c2a8:	4806      	ldr	r0, [pc, #24]	; (800c2c4 <prvPortStartFirstTask+0x1c>)
 800c2aa:	6800      	ldr	r0, [r0, #0]
 800c2ac:	6800      	ldr	r0, [r0, #0]
 800c2ae:	f380 8808 	msr	MSP, r0
 800c2b2:	b662      	cpsie	i
 800c2b4:	b661      	cpsie	f
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	df00      	svc	0
 800c2c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2c2:	bf00      	nop
 800c2c4:	e000ed08 	.word	0xe000ed08

0800c2c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2ce:	4b2c      	ldr	r3, [pc, #176]	; (800c380 <xPortStartScheduler+0xb8>)
 800c2d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	22ff      	movs	r2, #255	; 0xff
 800c2de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	4b24      	ldr	r3, [pc, #144]	; (800c384 <xPortStartScheduler+0xbc>)
 800c2f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2f6:	4b24      	ldr	r3, [pc, #144]	; (800c388 <xPortStartScheduler+0xc0>)
 800c2f8:	2207      	movs	r2, #7
 800c2fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2fc:	e009      	b.n	800c312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c2fe:	4b22      	ldr	r3, [pc, #136]	; (800c388 <xPortStartScheduler+0xc0>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3b01      	subs	r3, #1
 800c304:	4a20      	ldr	r2, [pc, #128]	; (800c388 <xPortStartScheduler+0xc0>)
 800c306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c312:	79fb      	ldrb	r3, [r7, #7]
 800c314:	b2db      	uxtb	r3, r3
 800c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31a:	2b80      	cmp	r3, #128	; 0x80
 800c31c:	d0ef      	beq.n	800c2fe <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c31e:	4b1a      	ldr	r3, [pc, #104]	; (800c388 <xPortStartScheduler+0xc0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	4a18      	ldr	r2, [pc, #96]	; (800c388 <xPortStartScheduler+0xc0>)
 800c326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c328:	4b17      	ldr	r3, [pc, #92]	; (800c388 <xPortStartScheduler+0xc0>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c330:	4a15      	ldr	r2, [pc, #84]	; (800c388 <xPortStartScheduler+0xc0>)
 800c332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	b2da      	uxtb	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <xPortStartScheduler+0xc4>)
 800c33e:	4b13      	ldr	r3, [pc, #76]	; (800c38c <xPortStartScheduler+0xc4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c348:	4a10      	ldr	r2, [pc, #64]	; (800c38c <xPortStartScheduler+0xc4>)
 800c34a:	4b10      	ldr	r3, [pc, #64]	; (800c38c <xPortStartScheduler+0xc4>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c354:	f000 f8d2 	bl	800c4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <xPortStartScheduler+0xc8>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c35e:	f000 f8e9 	bl	800c534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c362:	4a0c      	ldr	r2, [pc, #48]	; (800c394 <xPortStartScheduler+0xcc>)
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <xPortStartScheduler+0xcc>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c36c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c36e:	f7ff ff9b 	bl	800c2a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800c372:	f7ff ff5d 	bl	800c230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	e000e400 	.word	0xe000e400
 800c384:	20000774 	.word	0x20000774
 800c388:	20000778 	.word	0x20000778
 800c38c:	e000ed20 	.word	0xe000ed20
 800c390:	20000014 	.word	0x20000014
 800c394:	e000ef34 	.word	0xe000ef34

0800c398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	b672      	cpsid	i
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	b662      	cpsie	i
 800c3b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <vPortEnterCritical+0x5c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	4a0e      	ldr	r2, [pc, #56]	; (800c3f4 <vPortEnterCritical+0x5c>)
 800c3bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3be:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <vPortEnterCritical+0x5c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d110      	bne.n	800c3e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <vPortEnterCritical+0x60>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <vPortEnterCritical+0x50>
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	b672      	cpsid	i
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	b662      	cpsie	i
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	e7fe      	b.n	800c3e6 <vPortEnterCritical+0x4e>
	}
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20000014 	.word	0x20000014
 800c3f8:	e000ed04 	.word	0xe000ed04

0800c3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <vPortExitCritical+0x50>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10b      	bne.n	800c422 <vPortExitCritical+0x26>
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	b672      	cpsid	i
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	b662      	cpsie	i
 800c41e:	607b      	str	r3, [r7, #4]
 800c420:	e7fe      	b.n	800c420 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <vPortExitCritical+0x50>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3b01      	subs	r3, #1
 800c428:	4a08      	ldr	r2, [pc, #32]	; (800c44c <vPortExitCritical+0x50>)
 800c42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c42c:	4b07      	ldr	r3, [pc, #28]	; (800c44c <vPortExitCritical+0x50>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d104      	bne.n	800c43e <vPortExitCritical+0x42>
 800c434:	2300      	movs	r3, #0
 800c436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c43e:	bf00      	nop
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20000014 	.word	0x20000014

0800c450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c450:	f3ef 8009 	mrs	r0, PSP
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4b15      	ldr	r3, [pc, #84]	; (800c4b0 <pxCurrentTCBConst>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	f01e 0f10 	tst.w	lr, #16
 800c460:	bf08      	it	eq
 800c462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	6010      	str	r0, [r2, #0]
 800c46c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800c470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c474:	b672      	cpsid	i
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	b662      	cpsie	i
 800c484:	f001 fb38 	bl	800daf8 <vTaskSwitchContext>
 800c488:	f04f 0000 	mov.w	r0, #0
 800c48c:	f380 8811 	msr	BASEPRI, r0
 800c490:	bc08      	pop	{r3}
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	6808      	ldr	r0, [r1, #0]
 800c496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f01e 0f10 	tst.w	lr, #16
 800c49e:	bf08      	it	eq
 800c4a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4a4:	f380 8809 	msr	PSP, r0
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop

0800c4b0 <pxCurrentTCBConst>:
 800c4b0:	2000f794 	.word	0x2000f794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	b672      	cpsid	i
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	b662      	cpsie	i
 800c4d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4d4:	f001 fa52 	bl	800d97c <xTaskIncrementTick>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d003      	beq.n	800c4e6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <xPortSysTickHandler+0x40>)
 800c4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	e000ed04 	.word	0xe000ed04

0800c4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c500:	4a08      	ldr	r2, [pc, #32]	; (800c524 <vPortSetupTimerInterrupt+0x28>)
 800c502:	4b09      	ldr	r3, [pc, #36]	; (800c528 <vPortSetupTimerInterrupt+0x2c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4909      	ldr	r1, [pc, #36]	; (800c52c <vPortSetupTimerInterrupt+0x30>)
 800c508:	fba1 1303 	umull	r1, r3, r1, r3
 800c50c:	099b      	lsrs	r3, r3, #6
 800c50e:	3b01      	subs	r3, #1
 800c510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c512:	4b07      	ldr	r3, [pc, #28]	; (800c530 <vPortSetupTimerInterrupt+0x34>)
 800c514:	2207      	movs	r2, #7
 800c516:	601a      	str	r2, [r3, #0]
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	e000e014 	.word	0xe000e014
 800c528:	200000c4 	.word	0x200000c4
 800c52c:	10624dd3 	.word	0x10624dd3
 800c530:	e000e010 	.word	0xe000e010

0800c534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c544 <vPortEnableVFP+0x10>
 800c538:	6801      	ldr	r1, [r0, #0]
 800c53a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c53e:	6001      	str	r1, [r0, #0]
 800c540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c542:	bf00      	nop
 800c544:	e000ed88 	.word	0xe000ed88

0800c548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800c54e:	f3ef 8305 	mrs	r3, IPSR
 800c552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b0f      	cmp	r3, #15
 800c558:	d915      	bls.n	800c586 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c55a:	4a18      	ldr	r2, [pc, #96]	; (800c5bc <vPortValidateInterruptPriority+0x74>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c564:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <vPortValidateInterruptPriority+0x78>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	7afa      	ldrb	r2, [r7, #11]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d20b      	bcs.n	800c586 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	b672      	cpsid	i
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	b662      	cpsie	i
 800c582:	607b      	str	r3, [r7, #4]
 800c584:	e7fe      	b.n	800c584 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <vPortValidateInterruptPriority+0x7c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c58e:	4b0e      	ldr	r3, [pc, #56]	; (800c5c8 <vPortValidateInterruptPriority+0x80>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d90b      	bls.n	800c5ae <vPortValidateInterruptPriority+0x66>
 800c596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59a:	b672      	cpsid	i
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	b662      	cpsie	i
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	e7fe      	b.n	800c5ac <vPortValidateInterruptPriority+0x64>
	}
 800c5ae:	bf00      	nop
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	e000e3f0 	.word	0xe000e3f0
 800c5c0:	20000774 	.word	0x20000774
 800c5c4:	e000ed0c 	.word	0xe000ed0c
 800c5c8:	20000778 	.word	0x20000778

0800c5cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08a      	sub	sp, #40	; 0x28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5d8:	f001 f902 	bl	800d7e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5dc:	4b5a      	ldr	r3, [pc, #360]	; (800c748 <pvPortMalloc+0x17c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5e4:	f000 f916 	bl	800c814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5e8:	4b58      	ldr	r3, [pc, #352]	; (800c74c <pvPortMalloc+0x180>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 8090 	bne.w	800c716 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d01e      	beq.n	800c63a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c5fc:	2208      	movs	r2, #8
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4413      	add	r3, r2
 800c602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d015      	beq.n	800c63a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f023 0307 	bic.w	r3, r3, #7
 800c614:	3308      	adds	r3, #8
 800c616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f003 0307 	and.w	r3, r3, #7
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00b      	beq.n	800c63a <pvPortMalloc+0x6e>
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	b672      	cpsid	i
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	b662      	cpsie	i
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e7fe      	b.n	800c638 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d06a      	beq.n	800c716 <pvPortMalloc+0x14a>
 800c640:	4b43      	ldr	r3, [pc, #268]	; (800c750 <pvPortMalloc+0x184>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	429a      	cmp	r2, r3
 800c648:	d865      	bhi.n	800c716 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c64a:	4b42      	ldr	r3, [pc, #264]	; (800c754 <pvPortMalloc+0x188>)
 800c64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c64e:	4b41      	ldr	r3, [pc, #260]	; (800c754 <pvPortMalloc+0x188>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c654:	e004      	b.n	800c660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d203      	bcs.n	800c672 <pvPortMalloc+0xa6>
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1f1      	bne.n	800c656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c672:	4b35      	ldr	r3, [pc, #212]	; (800c748 <pvPortMalloc+0x17c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c678:	429a      	cmp	r2, r3
 800c67a:	d04c      	beq.n	800c716 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2208      	movs	r2, #8
 800c682:	4413      	add	r3, r2
 800c684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	1ad2      	subs	r2, r2, r3
 800c696:	2308      	movs	r3, #8
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d920      	bls.n	800c6e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	f003 0307 	and.w	r3, r3, #7
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <pvPortMalloc+0xfc>
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	b672      	cpsid	i
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	b662      	cpsie	i
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	e7fe      	b.n	800c6c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6da:	69b8      	ldr	r0, [r7, #24]
 800c6dc:	f000 f8fc 	bl	800c8d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6e0:	4b1b      	ldr	r3, [pc, #108]	; (800c750 <pvPortMalloc+0x184>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	4a19      	ldr	r2, [pc, #100]	; (800c750 <pvPortMalloc+0x184>)
 800c6ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6ee:	4b18      	ldr	r3, [pc, #96]	; (800c750 <pvPortMalloc+0x184>)
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4b19      	ldr	r3, [pc, #100]	; (800c758 <pvPortMalloc+0x18c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d203      	bcs.n	800c702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <pvPortMalloc+0x184>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a16      	ldr	r2, [pc, #88]	; (800c758 <pvPortMalloc+0x18c>)
 800c700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	4b11      	ldr	r3, [pc, #68]	; (800c74c <pvPortMalloc+0x180>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	431a      	orrs	r2, r3
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c716:	f001 f871 	bl	800d7fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <pvPortMalloc+0x170>
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	b672      	cpsid	i
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	b662      	cpsie	i
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e7fe      	b.n	800c73a <pvPortMalloc+0x16e>
	return pvReturn;
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3728      	adds	r7, #40	; 0x28
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2000f784 	.word	0x2000f784
 800c74c:	2000f790 	.word	0x2000f790
 800c750:	2000f788 	.word	0x2000f788
 800c754:	2000f77c 	.word	0x2000f77c
 800c758:	2000f78c 	.word	0x2000f78c

0800c75c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d04a      	beq.n	800c804 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c76e:	2308      	movs	r3, #8
 800c770:	425b      	negs	r3, r3
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	4413      	add	r3, r2
 800c776:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4b22      	ldr	r3, [pc, #136]	; (800c80c <vPortFree+0xb0>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4013      	ands	r3, r2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10b      	bne.n	800c7a2 <vPortFree+0x46>
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	b672      	cpsid	i
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	b662      	cpsie	i
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	e7fe      	b.n	800c7a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00b      	beq.n	800c7c2 <vPortFree+0x66>
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	b672      	cpsid	i
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	b662      	cpsie	i
 800c7be:	60bb      	str	r3, [r7, #8]
 800c7c0:	e7fe      	b.n	800c7c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b11      	ldr	r3, [pc, #68]	; (800c80c <vPortFree+0xb0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d019      	beq.n	800c804 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d115      	bne.n	800c804 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	4b0b      	ldr	r3, [pc, #44]	; (800c80c <vPortFree+0xb0>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	401a      	ands	r2, r3
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7e8:	f000 fffa 	bl	800d7e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <vPortFree+0xb4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	4a06      	ldr	r2, [pc, #24]	; (800c810 <vPortFree+0xb4>)
 800c7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	f000 f86c 	bl	800c8d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c800:	f000 fffc 	bl	800d7fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c804:	bf00      	nop
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	2000f790 	.word	0x2000f790
 800c810:	2000f788 	.word	0x2000f788

0800c814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c81a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c81e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c820:	4b27      	ldr	r3, [pc, #156]	; (800c8c0 <prvHeapInit+0xac>)
 800c822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00c      	beq.n	800c848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3307      	adds	r3, #7
 800c832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0307 	bic.w	r3, r3, #7
 800c83a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	4a1f      	ldr	r2, [pc, #124]	; (800c8c0 <prvHeapInit+0xac>)
 800c844:	4413      	add	r3, r2
 800c846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c84c:	4a1d      	ldr	r2, [pc, #116]	; (800c8c4 <prvHeapInit+0xb0>)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c852:	4b1c      	ldr	r3, [pc, #112]	; (800c8c4 <prvHeapInit+0xb0>)
 800c854:	2200      	movs	r2, #0
 800c856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	4413      	add	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c860:	2208      	movs	r2, #8
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	1a9b      	subs	r3, r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f023 0307 	bic.w	r3, r3, #7
 800c86e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4a15      	ldr	r2, [pc, #84]	; (800c8c8 <prvHeapInit+0xb4>)
 800c874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c876:	4b14      	ldr	r3, [pc, #80]	; (800c8c8 <prvHeapInit+0xb4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2200      	movs	r2, #0
 800c87c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c87e:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <prvHeapInit+0xb4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c894:	4b0c      	ldr	r3, [pc, #48]	; (800c8c8 <prvHeapInit+0xb4>)
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	4a0a      	ldr	r2, [pc, #40]	; (800c8cc <prvHeapInit+0xb8>)
 800c8a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	4a09      	ldr	r2, [pc, #36]	; (800c8d0 <prvHeapInit+0xbc>)
 800c8aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8ac:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <prvHeapInit+0xc0>)
 800c8ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8b2:	601a      	str	r2, [r3, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	2000077c 	.word	0x2000077c
 800c8c4:	2000f77c 	.word	0x2000f77c
 800c8c8:	2000f784 	.word	0x2000f784
 800c8cc:	2000f78c 	.word	0x2000f78c
 800c8d0:	2000f788 	.word	0x2000f788
 800c8d4:	2000f790 	.word	0x2000f790

0800c8d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8e0:	4b28      	ldr	r3, [pc, #160]	; (800c984 <prvInsertBlockIntoFreeList+0xac>)
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	e002      	b.n	800c8ec <prvInsertBlockIntoFreeList+0x14>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d3f7      	bcc.n	800c8e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	441a      	add	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d108      	bne.n	800c91a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	441a      	add	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	441a      	add	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d118      	bne.n	800c960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <prvInsertBlockIntoFreeList+0xb0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	429a      	cmp	r2, r3
 800c938:	d00d      	beq.n	800c956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	441a      	add	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	e008      	b.n	800c968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c956:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <prvInsertBlockIntoFreeList+0xb0>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	e003      	b.n	800c968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d002      	beq.n	800c976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c976:	bf00      	nop
 800c978:	3714      	adds	r7, #20
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	2000f77c 	.word	0x2000f77c
 800c988:	2000f784 	.word	0x2000f784

0800c98c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10b      	bne.n	800c9b8 <xQueueGenericReset+0x2c>
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	60bb      	str	r3, [r7, #8]
 800c9b6:	e7fe      	b.n	800c9b6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c9b8:	f7ff fcee 	bl	800c398 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c4:	68f9      	ldr	r1, [r7, #12]
 800c9c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9c8:	fb01 f303 	mul.w	r3, r1, r3
 800c9cc:	441a      	add	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	68f9      	ldr	r1, [r7, #12]
 800c9ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	441a      	add	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	22ff      	movs	r2, #255	; 0xff
 800c9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	22ff      	movs	r2, #255	; 0xff
 800ca04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d114      	bne.n	800ca38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d01a      	beq.n	800ca4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3310      	adds	r3, #16
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 f8ee 	bl	800dbfc <xTaskRemoveFromEventList>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d012      	beq.n	800ca4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca26:	4b0d      	ldr	r3, [pc, #52]	; (800ca5c <xQueueGenericReset+0xd0>)
 800ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	e009      	b.n	800ca4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3310      	adds	r3, #16
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7ff fb0f 	bl	800c060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3324      	adds	r3, #36	; 0x24
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff fb0a 	bl	800c060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca4c:	f7ff fcd6 	bl	800c3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca50:	2301      	movs	r3, #1
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	e000ed04 	.word	0xe000ed04

0800ca60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b08a      	sub	sp, #40	; 0x28
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10b      	bne.n	800ca8c <xQueueGenericCreate+0x2c>
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	b672      	cpsid	i
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	b662      	cpsie	i
 800ca88:	613b      	str	r3, [r7, #16]
 800ca8a:	e7fe      	b.n	800ca8a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61fb      	str	r3, [r7, #28]
 800ca96:	e004      	b.n	800caa2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	fb02 f303 	mul.w	r3, r2, r3
 800caa0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	3348      	adds	r3, #72	; 0x48
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fd90 	bl	800c5cc <pvPortMalloc>
 800caac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	3348      	adds	r3, #72	; 0x48
 800cab8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caba:	79fa      	ldrb	r2, [r7, #7]
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	4613      	mov	r3, r2
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f805 	bl	800cad6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800cacc:	69bb      	ldr	r3, [r7, #24]
	}
 800cace:	4618      	mov	r0, r3
 800cad0:	3720      	adds	r7, #32
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b084      	sub	sp, #16
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	60b9      	str	r1, [r7, #8]
 800cae0:	607a      	str	r2, [r7, #4]
 800cae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	e002      	b.n	800caf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb04:	2101      	movs	r1, #1
 800cb06:	69b8      	ldr	r0, [r7, #24]
 800cb08:	f7ff ff40 	bl	800c98c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb0c:	bf00      	nop
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00e      	beq.n	800cb40 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb34:	2300      	movs	r3, #0
 800cb36:	2200      	movs	r2, #0
 800cb38:	2100      	movs	r1, #0
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f81c 	bl	800cb78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb52:	2301      	movs	r3, #1
 800cb54:	617b      	str	r3, [r7, #20]
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6939      	ldr	r1, [r7, #16]
 800cb60:	6978      	ldr	r0, [r7, #20]
 800cb62:	f7ff ff7d 	bl	800ca60 <xQueueGenericCreate>
 800cb66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff ffd3 	bl	800cb14 <prvInitialiseMutex>

		return pxNewQueue;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
	}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08e      	sub	sp, #56	; 0x38
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb86:	2300      	movs	r3, #0
 800cb88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10b      	bne.n	800cbac <xQueueGenericSend+0x34>
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	b672      	cpsid	i
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	b662      	cpsie	i
 800cba8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbaa:	e7fe      	b.n	800cbaa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d103      	bne.n	800cbba <xQueueGenericSend+0x42>
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <xQueueGenericSend+0x46>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGenericSend+0x48>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10b      	bne.n	800cbdc <xQueueGenericSend+0x64>
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	b672      	cpsid	i
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	b662      	cpsie	i
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbda:	e7fe      	b.n	800cbda <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d103      	bne.n	800cbea <xQueueGenericSend+0x72>
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d101      	bne.n	800cbee <xQueueGenericSend+0x76>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e000      	b.n	800cbf0 <xQueueGenericSend+0x78>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <xQueueGenericSend+0x94>
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	b672      	cpsid	i
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	b662      	cpsie	i
 800cc08:	623b      	str	r3, [r7, #32]
 800cc0a:	e7fe      	b.n	800cc0a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc0c:	f001 f9c8 	bl	800dfa0 <xTaskGetSchedulerState>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d102      	bne.n	800cc1c <xQueueGenericSend+0xa4>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <xQueueGenericSend+0xa8>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <xQueueGenericSend+0xaa>
 800cc20:	2300      	movs	r3, #0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10b      	bne.n	800cc3e <xQueueGenericSend+0xc6>
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	b672      	cpsid	i
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	b662      	cpsie	i
 800cc3a:	61fb      	str	r3, [r7, #28]
 800cc3c:	e7fe      	b.n	800cc3c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc3e:	f7ff fbab 	bl	800c398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d302      	bcc.n	800cc54 <xQueueGenericSend+0xdc>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d129      	bne.n	800cca8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc5a:	f000 fadb 	bl	800d214 <prvCopyDataToQueue>
 800cc5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d010      	beq.n	800cc8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 ffc5 	bl	800dbfc <xTaskRemoveFromEventList>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d013      	beq.n	800cca0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc78:	4b3f      	ldr	r3, [pc, #252]	; (800cd78 <xQueueGenericSend+0x200>)
 800cc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	e00a      	b.n	800cca0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d007      	beq.n	800cca0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc90:	4b39      	ldr	r3, [pc, #228]	; (800cd78 <xQueueGenericSend+0x200>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cca0:	f7ff fbac 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e063      	b.n	800cd70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccae:	f7ff fba5 	bl	800c3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e05c      	b.n	800cd70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d106      	bne.n	800ccca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 ffff 	bl	800dcc4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccca:	f7ff fb97 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccce:	f000 fd87 	bl	800d7e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccd2:	f7ff fb61 	bl	800c398 <vPortEnterCritical>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccdc:	b25b      	sxtb	r3, r3
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce2:	d103      	bne.n	800ccec <xQueueGenericSend+0x174>
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccf2:	b25b      	sxtb	r3, r3
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d103      	bne.n	800cd02 <xQueueGenericSend+0x18a>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd02:	f7ff fb7b 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd06:	1d3a      	adds	r2, r7, #4
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fffe 	bl	800dd10 <xTaskCheckForTimeOut>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d124      	bne.n	800cd64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1c:	f000 fb72 	bl	800d404 <prvIsQueueFull>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d018      	beq.n	800cd58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	3310      	adds	r3, #16
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 ff3e 	bl	800dbb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd36:	f000 fafd 	bl	800d334 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd3a:	f000 fd5f 	bl	800d7fc <xTaskResumeAll>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f47f af7c 	bne.w	800cc3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd46:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <xQueueGenericSend+0x200>)
 800cd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	e772      	b.n	800cc3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd5a:	f000 faeb 	bl	800d334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd5e:	f000 fd4d 	bl	800d7fc <xTaskResumeAll>
 800cd62:	e76c      	b.n	800cc3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd66:	f000 fae5 	bl	800d334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd6a:	f000 fd47 	bl	800d7fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd6e:	2300      	movs	r3, #0
		}
	}
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3738      	adds	r7, #56	; 0x38
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08e      	sub	sp, #56	; 0x38
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10b      	bne.n	800cda8 <xQueueGiveFromISR+0x2c>
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	b672      	cpsid	i
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	b662      	cpsie	i
 800cda4:	623b      	str	r3, [r7, #32]
 800cda6:	e7fe      	b.n	800cda6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00b      	beq.n	800cdc8 <xQueueGiveFromISR+0x4c>
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	b672      	cpsid	i
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	b662      	cpsie	i
 800cdc4:	61fb      	str	r3, [r7, #28]
 800cdc6:	e7fe      	b.n	800cdc6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d103      	bne.n	800cdd8 <xQueueGiveFromISR+0x5c>
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <xQueueGiveFromISR+0x60>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e000      	b.n	800cdde <xQueueGiveFromISR+0x62>
 800cddc:	2300      	movs	r3, #0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10b      	bne.n	800cdfa <xQueueGiveFromISR+0x7e>
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	b672      	cpsid	i
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	b662      	cpsie	i
 800cdf6:	61bb      	str	r3, [r7, #24]
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdfa:	f7ff fba5 	bl	800c548 <vPortValidateInterruptPriority>
	__asm volatile
 800cdfe:	f3ef 8211 	mrs	r2, BASEPRI
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	b672      	cpsid	i
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	b662      	cpsie	i
 800ce16:	617a      	str	r2, [r7, #20]
 800ce18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ce1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d92b      	bls.n	800ce86 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce48:	d112      	bne.n	800ce70 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d016      	beq.n	800ce80 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	3324      	adds	r3, #36	; 0x24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fed0 	bl	800dbfc <xTaskRemoveFromEventList>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00e      	beq.n	800ce80 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	e007      	b.n	800ce80 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce74:	3301      	adds	r3, #1
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	b25a      	sxtb	r2, r3
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce80:	2301      	movs	r3, #1
 800ce82:	637b      	str	r3, [r7, #52]	; 0x34
 800ce84:	e001      	b.n	800ce8a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	637b      	str	r3, [r7, #52]	; 0x34
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3738      	adds	r7, #56	; 0x38
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
	...

0800cea0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08e      	sub	sp, #56	; 0x38
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xQueueGenericReceive+0x34>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	b672      	cpsid	i
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	b662      	cpsie	i
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
 800ced2:	e7fe      	b.n	800ced2 <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d103      	bne.n	800cee2 <xQueueGenericReceive+0x42>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <xQueueGenericReceive+0x46>
 800cee2:	2301      	movs	r3, #1
 800cee4:	e000      	b.n	800cee8 <xQueueGenericReceive+0x48>
 800cee6:	2300      	movs	r3, #0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10b      	bne.n	800cf04 <xQueueGenericReceive+0x64>
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	b672      	cpsid	i
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	b662      	cpsie	i
 800cf00:	623b      	str	r3, [r7, #32]
 800cf02:	e7fe      	b.n	800cf02 <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf04:	f001 f84c 	bl	800dfa0 <xTaskGetSchedulerState>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d102      	bne.n	800cf14 <xQueueGenericReceive+0x74>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <xQueueGenericReceive+0x78>
 800cf14:	2301      	movs	r3, #1
 800cf16:	e000      	b.n	800cf1a <xQueueGenericReceive+0x7a>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10b      	bne.n	800cf36 <xQueueGenericReceive+0x96>
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	b672      	cpsid	i
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	b662      	cpsie	i
 800cf32:	61fb      	str	r3, [r7, #28]
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf36:	f7ff fa2f 	bl	800c398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d046      	beq.n	800cfd4 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf50:	f000 f9ca 	bl	800d2e8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d121      	bne.n	800cf9e <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	1e5a      	subs	r2, r3, #1
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d104      	bne.n	800cf74 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cf6a:	f001 f935 	bl	800e1d8 <pvTaskIncrementMutexHeldCount>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d027      	beq.n	800cfcc <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	3310      	adds	r3, #16
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fe3b 	bl	800dbfc <xTaskRemoveFromEventList>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01f      	beq.n	800cfcc <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800cf8c:	4b4f      	ldr	r3, [pc, #316]	; (800d0cc <xQueueGenericReceive+0x22c>)
 800cf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	e016      	b.n	800cfcc <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfa2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00f      	beq.n	800cfcc <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	3324      	adds	r3, #36	; 0x24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fe23 	bl	800dbfc <xTaskRemoveFromEventList>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800cfbc:	4b43      	ldr	r3, [pc, #268]	; (800d0cc <xQueueGenericReceive+0x22c>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800cfcc:	f7ff fa16 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e077      	b.n	800d0c4 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfda:	f7ff fa0f 	bl	800c3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e070      	b.n	800d0c4 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800cfe8:	f107 0314 	add.w	r3, r7, #20
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 fe69 	bl	800dcc4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cff2:	2301      	movs	r3, #1
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cff6:	f7ff fa01 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cffa:	f000 fbf1 	bl	800d7e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cffe:	f7ff f9cb 	bl	800c398 <vPortEnterCritical>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d008:	b25b      	sxtb	r3, r3
 800d00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00e:	d103      	bne.n	800d018 <xQueueGenericReceive+0x178>
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d024:	d103      	bne.n	800d02e <xQueueGenericReceive+0x18e>
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d02e:	f7ff f9e5 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d032:	1d3a      	adds	r2, r7, #4
 800d034:	f107 0314 	add.w	r3, r7, #20
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 fe68 	bl	800dd10 <xTaskCheckForTimeOut>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d131      	bne.n	800d0aa <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d048:	f000 f9c6 	bl	800d3d8 <prvIsQueueEmpty>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d025      	beq.n	800d09e <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d108      	bne.n	800d06c <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800d05a:	f7ff f99d 	bl	800c398 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	4618      	mov	r0, r3
 800d064:	f000 ffba 	bl	800dfdc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800d068:	f7ff f9c8 	bl	800c3fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	3324      	adds	r3, #36	; 0x24
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f000 fd9b 	bl	800dbb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d07c:	f000 f95a 	bl	800d334 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d080:	f000 fbbc 	bl	800d7fc <xTaskResumeAll>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	f47f af55 	bne.w	800cf36 <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 800d08c:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <xQueueGenericReceive+0x22c>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	e74b      	b.n	800cf36 <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d09e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0a0:	f000 f948 	bl	800d334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0a4:	f000 fbaa 	bl	800d7fc <xTaskResumeAll>
 800d0a8:	e745      	b.n	800cf36 <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800d0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ac:	f000 f942 	bl	800d334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0b0:	f000 fba4 	bl	800d7fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b6:	f000 f98f 	bl	800d3d8 <prvIsQueueEmpty>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f43f af3a 	beq.w	800cf36 <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3738      	adds	r7, #56	; 0x38
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08e      	sub	sp, #56	; 0x38
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <xQueueReceiveFromISR+0x2e>
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	623b      	str	r3, [r7, #32]
 800d0fc:	e7fe      	b.n	800d0fc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d103      	bne.n	800d10c <xQueueReceiveFromISR+0x3c>
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <xQueueReceiveFromISR+0x40>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e000      	b.n	800d112 <xQueueReceiveFromISR+0x42>
 800d110:	2300      	movs	r3, #0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10b      	bne.n	800d12e <xQueueReceiveFromISR+0x5e>
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	b672      	cpsid	i
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	b662      	cpsie	i
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	e7fe      	b.n	800d12c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d12e:	f7ff fa0b 	bl	800c548 <vPortValidateInterruptPriority>
	__asm volatile
 800d132:	f3ef 8211 	mrs	r2, BASEPRI
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	b672      	cpsid	i
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	b662      	cpsie	i
 800d14a:	61ba      	str	r2, [r7, #24]
 800d14c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d14e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d02f      	beq.n	800d1be <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d16c:	f000 f8bc 	bl	800d2e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	1e5a      	subs	r2, r3, #1
 800d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d176:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d112      	bne.n	800d1a8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d016      	beq.n	800d1b8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	3310      	adds	r3, #16
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fd34 	bl	800dbfc <xTaskRemoveFromEventList>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00e      	beq.n	800d1b8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	e007      	b.n	800d1b8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	b25a      	sxtb	r2, r3
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d1bc:	e001      	b.n	800d1c2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3738      	adds	r7, #56	; 0x38
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10b      	bne.n	800d200 <vQueueDelete+0x2a>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	b672      	cpsid	i
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	b662      	cpsie	i
 800d1fc:	60bb      	str	r3, [r7, #8]
 800d1fe:	e7fe      	b.n	800d1fe <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 f917 	bl	800d434 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff faa8 	bl	800c75c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d20c:	bf00      	nop
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d220:	2300      	movs	r3, #0
 800d222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10d      	bne.n	800d24e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d14d      	bne.n	800d2d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 ff42 	bl	800e0c8 <xTaskPriorityDisinherit>
 800d244:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	605a      	str	r2, [r3, #4]
 800d24c:	e043      	b.n	800d2d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d119      	bne.n	800d288 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6898      	ldr	r0, [r3, #8]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25c:	461a      	mov	r2, r3
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	f01d faa0 	bl	802a7a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	441a      	add	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689a      	ldr	r2, [r3, #8]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d32b      	bcc.n	800d2d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	609a      	str	r2, [r3, #8]
 800d286:	e026      	b.n	800d2d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	68d8      	ldr	r0, [r3, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	461a      	mov	r2, r3
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	f01d fa86 	bl	802a7a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	425b      	negs	r3, r3
 800d2a2:	441a      	add	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d207      	bcs.n	800d2c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685a      	ldr	r2, [r3, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2bc:	425b      	negs	r3, r3
 800d2be:	441a      	add	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d105      	bne.n	800d2d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2de:	697b      	ldr	r3, [r7, #20]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d018      	beq.n	800d32c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	441a      	add	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68da      	ldr	r2, [r3, #12]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	429a      	cmp	r2, r3
 800d312:	d303      	bcc.n	800d31c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68d9      	ldr	r1, [r3, #12]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	461a      	mov	r2, r3
 800d326:	6838      	ldr	r0, [r7, #0]
 800d328:	f01d fa3c 	bl	802a7a4 <memcpy>
	}
}
 800d32c:	bf00      	nop
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d33c:	f7ff f82c 	bl	800c398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d346:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d348:	e011      	b.n	800d36e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d012      	beq.n	800d378 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3324      	adds	r3, #36	; 0x24
 800d356:	4618      	mov	r0, r3
 800d358:	f000 fc50 	bl	800dbfc <xTaskRemoveFromEventList>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d362:	f000 fd37 	bl	800ddd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	3b01      	subs	r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dce9      	bgt.n	800d34a <prvUnlockQueue+0x16>
 800d376:	e000      	b.n	800d37a <prvUnlockQueue+0x46>
					break;
 800d378:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d382:	f7ff f83b 	bl	800c3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d386:	f7ff f807 	bl	800c398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d390:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d392:	e011      	b.n	800d3b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d012      	beq.n	800d3c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3310      	adds	r3, #16
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 fc2b 	bl	800dbfc <xTaskRemoveFromEventList>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3ac:	f000 fd12 	bl	800ddd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3b0:	7bbb      	ldrb	r3, [r7, #14]
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	dce9      	bgt.n	800d394 <prvUnlockQueue+0x60>
 800d3c0:	e000      	b.n	800d3c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	22ff      	movs	r2, #255	; 0xff
 800d3c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3cc:	f7ff f816 	bl	800c3fc <vPortExitCritical>
}
 800d3d0:	bf00      	nop
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3e0:	f7fe ffda 	bl	800c398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	e001      	b.n	800d3f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3f6:	f7ff f801 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d40c:	f7fe ffc4 	bl	800c398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d418:	429a      	cmp	r2, r3
 800d41a:	d102      	bne.n	800d422 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d41c:	2301      	movs	r3, #1
 800d41e:	60fb      	str	r3, [r7, #12]
 800d420:	e001      	b.n	800d426 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d422:	2300      	movs	r3, #0
 800d424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d426:	f7fe ffe9 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800d42a:	68fb      	ldr	r3, [r7, #12]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	e016      	b.n	800d470 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d442:	4a10      	ldr	r2, [pc, #64]	; (800d484 <vQueueUnregisterQueue+0x50>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	4413      	add	r3, r2
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d10b      	bne.n	800d46a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d452:	4a0c      	ldr	r2, [pc, #48]	; (800d484 <vQueueUnregisterQueue+0x50>)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2100      	movs	r1, #0
 800d458:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d45c:	4a09      	ldr	r2, [pc, #36]	; (800d484 <vQueueUnregisterQueue+0x50>)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	4413      	add	r3, r2
 800d464:	2200      	movs	r2, #0
 800d466:	605a      	str	r2, [r3, #4]
				break;
 800d468:	e005      	b.n	800d476 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3301      	adds	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b07      	cmp	r3, #7
 800d474:	d9e5      	bls.n	800d442 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d476:	bf00      	nop
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	2002b3b8 	.word	0x2002b3b8

0800d488 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08c      	sub	sp, #48	; 0x30
 800d48c:	af04      	add	r7, sp, #16
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	4613      	mov	r3, r2
 800d496:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d498:	88fb      	ldrh	r3, [r7, #6]
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff f895 	bl	800c5cc <pvPortMalloc>
 800d4a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00e      	beq.n	800d4c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d4aa:	2054      	movs	r0, #84	; 0x54
 800d4ac:	f7ff f88e 	bl	800c5cc <pvPortMalloc>
 800d4b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	631a      	str	r2, [r3, #48]	; 0x30
 800d4be:	e005      	b.n	800d4cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4c0:	6978      	ldr	r0, [r7, #20]
 800d4c2:	f7ff f94b 	bl	800c75c <vPortFree>
 800d4c6:	e001      	b.n	800d4cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d013      	beq.n	800d4fa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4d2:	88fa      	ldrh	r2, [r7, #6]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9303      	str	r3, [sp, #12]
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	9302      	str	r3, [sp, #8]
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f000 f80e 	bl	800d50a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4ee:	69f8      	ldr	r0, [r7, #28]
 800d4f0:	f000 f88c 	bl	800d60c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	61bb      	str	r3, [r7, #24]
 800d4f8:	e002      	b.n	800d500 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d500:	69bb      	ldr	r3, [r7, #24]
	}
 800d502:	4618      	mov	r0, r3
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b088      	sub	sp, #32
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	607a      	str	r2, [r7, #4]
 800d516:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d522:	440b      	add	r3, r1
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4413      	add	r3, r2
 800d528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	f003 0307 	and.w	r3, r3, #7
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <prvInitialiseNewTask+0x4a>
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	b672      	cpsid	i
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	b662      	cpsie	i
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	e7fe      	b.n	800d552 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]
 800d558:	e012      	b.n	800d580 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	4413      	add	r3, r2
 800d560:	7819      	ldrb	r1, [r3, #0]
 800d562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	4413      	add	r3, r2
 800d568:	3334      	adds	r3, #52	; 0x34
 800d56a:	460a      	mov	r2, r1
 800d56c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	4413      	add	r3, r2
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	3301      	adds	r3, #1
 800d57e:	61fb      	str	r3, [r7, #28]
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2b0f      	cmp	r3, #15
 800d584:	d9e9      	bls.n	800d55a <prvInitialiseNewTask+0x50>
 800d586:	e000      	b.n	800d58a <prvInitialiseNewTask+0x80>
		{
			break;
 800d588:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	2b06      	cmp	r3, #6
 800d596:	d901      	bls.n	800d59c <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d598:	2306      	movs	r3, #6
 800d59a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fe fd74 	bl	800c0a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	3318      	adds	r3, #24
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe fd6f 	bl	800c0a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	f1c3 0207 	rsb	r2, r3, #7
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	2200      	movs	r2, #0
 800d5dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	68f9      	ldr	r1, [r7, #12]
 800d5ea:	69b8      	ldr	r0, [r7, #24]
 800d5ec:	f7fe fdec 	bl	800c1c8 <pxPortInitialiseStack>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d602:	bf00      	nop
 800d604:	3720      	adds	r7, #32
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d614:	f7fe fec0 	bl	800c398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d618:	4b2a      	ldr	r3, [pc, #168]	; (800d6c4 <prvAddNewTaskToReadyList+0xb8>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	4a29      	ldr	r2, [pc, #164]	; (800d6c4 <prvAddNewTaskToReadyList+0xb8>)
 800d620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d622:	4b29      	ldr	r3, [pc, #164]	; (800d6c8 <prvAddNewTaskToReadyList+0xbc>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d109      	bne.n	800d63e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d62a:	4a27      	ldr	r2, [pc, #156]	; (800d6c8 <prvAddNewTaskToReadyList+0xbc>)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d630:	4b24      	ldr	r3, [pc, #144]	; (800d6c4 <prvAddNewTaskToReadyList+0xb8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d110      	bne.n	800d65a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d638:	f000 fbf0 	bl	800de1c <prvInitialiseTaskLists>
 800d63c:	e00d      	b.n	800d65a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d63e:	4b23      	ldr	r3, [pc, #140]	; (800d6cc <prvAddNewTaskToReadyList+0xc0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d109      	bne.n	800d65a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d646:	4b20      	ldr	r3, [pc, #128]	; (800d6c8 <prvAddNewTaskToReadyList+0xbc>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	429a      	cmp	r2, r3
 800d652:	d802      	bhi.n	800d65a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d654:	4a1c      	ldr	r2, [pc, #112]	; (800d6c8 <prvAddNewTaskToReadyList+0xbc>)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d65a:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <prvAddNewTaskToReadyList+0xc4>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	3301      	adds	r3, #1
 800d660:	4a1b      	ldr	r2, [pc, #108]	; (800d6d0 <prvAddNewTaskToReadyList+0xc4>)
 800d662:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	2201      	movs	r2, #1
 800d66a:	409a      	lsls	r2, r3
 800d66c:	4b19      	ldr	r3, [pc, #100]	; (800d6d4 <prvAddNewTaskToReadyList+0xc8>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4313      	orrs	r3, r2
 800d672:	4a18      	ldr	r2, [pc, #96]	; (800d6d4 <prvAddNewTaskToReadyList+0xc8>)
 800d674:	6013      	str	r3, [r2, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <prvAddNewTaskToReadyList+0xcc>)
 800d684:	441a      	add	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	3304      	adds	r3, #4
 800d68a:	4619      	mov	r1, r3
 800d68c:	4610      	mov	r0, r2
 800d68e:	f7fe fd14 	bl	800c0ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d692:	f7fe feb3 	bl	800c3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d696:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <prvAddNewTaskToReadyList+0xc0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00e      	beq.n	800d6bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d69e:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <prvAddNewTaskToReadyList+0xbc>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d207      	bcs.n	800d6bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6ac:	4b0b      	ldr	r3, [pc, #44]	; (800d6dc <prvAddNewTaskToReadyList+0xd0>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6bc:	bf00      	nop
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	2000f894 	.word	0x2000f894
 800d6c8:	2000f794 	.word	0x2000f794
 800d6cc:	2000f8a0 	.word	0x2000f8a0
 800d6d0:	2000f8b0 	.word	0x2000f8b0
 800d6d4:	2000f89c 	.word	0x2000f89c
 800d6d8:	2000f798 	.word	0x2000f798
 800d6dc:	e000ed04 	.word	0xe000ed04

0800d6e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d018      	beq.n	800d724 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d6f2:	4b14      	ldr	r3, [pc, #80]	; (800d744 <vTaskDelay+0x64>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <vTaskDelay+0x32>
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	b672      	cpsid	i
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	b662      	cpsie	i
 800d70e:	60bb      	str	r3, [r7, #8]
 800d710:	e7fe      	b.n	800d710 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d712:	f000 f865 	bl	800d7e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d716:	2100      	movs	r1, #0
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fd71 	bl	800e200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d71e:	f000 f86d 	bl	800d7fc <xTaskResumeAll>
 800d722:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d107      	bne.n	800d73a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d72a:	4b07      	ldr	r3, [pc, #28]	; (800d748 <vTaskDelay+0x68>)
 800d72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d73a:	bf00      	nop
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	2000f8bc 	.word	0x2000f8bc
 800d748:	e000ed04 	.word	0xe000ed04

0800d74c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d752:	4b1d      	ldr	r3, [pc, #116]	; (800d7c8 <vTaskStartScheduler+0x7c>)
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	2300      	movs	r3, #0
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	2300      	movs	r3, #0
 800d75c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d760:	491a      	ldr	r1, [pc, #104]	; (800d7cc <vTaskStartScheduler+0x80>)
 800d762:	481b      	ldr	r0, [pc, #108]	; (800d7d0 <vTaskStartScheduler+0x84>)
 800d764:	f7ff fe90 	bl	800d488 <xTaskCreate>
 800d768:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d117      	bne.n	800d7a0 <vTaskStartScheduler+0x54>
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	b672      	cpsid	i
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	b662      	cpsie	i
 800d784:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d786:	4b13      	ldr	r3, [pc, #76]	; (800d7d4 <vTaskStartScheduler+0x88>)
 800d788:	f04f 32ff 	mov.w	r2, #4294967295
 800d78c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d78e:	4b12      	ldr	r3, [pc, #72]	; (800d7d8 <vTaskStartScheduler+0x8c>)
 800d790:	2201      	movs	r2, #1
 800d792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d794:	4b11      	ldr	r3, [pc, #68]	; (800d7dc <vTaskStartScheduler+0x90>)
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d79a:	f7fe fd95 	bl	800c2c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d79e:	e00f      	b.n	800d7c0 <vTaskStartScheduler+0x74>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a6:	d10b      	bne.n	800d7c0 <vTaskStartScheduler+0x74>
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	b672      	cpsid	i
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	b662      	cpsie	i
 800d7bc:	607b      	str	r3, [r7, #4]
 800d7be:	e7fe      	b.n	800d7be <vTaskStartScheduler+0x72>
}
 800d7c0:	bf00      	nop
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	2000f8b8 	.word	0x2000f8b8
 800d7cc:	0802b8c8 	.word	0x0802b8c8
 800d7d0:	0800dded 	.word	0x0800dded
 800d7d4:	2000f8b4 	.word	0x2000f8b4
 800d7d8:	2000f8a0 	.word	0x2000f8a0
 800d7dc:	2000f898 	.word	0x2000f898

0800d7e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d7e4:	4b04      	ldr	r3, [pc, #16]	; (800d7f8 <vTaskSuspendAll+0x18>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	4a03      	ldr	r2, [pc, #12]	; (800d7f8 <vTaskSuspendAll+0x18>)
 800d7ec:	6013      	str	r3, [r2, #0]
}
 800d7ee:	bf00      	nop
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	2000f8bc 	.word	0x2000f8bc

0800d7fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d806:	2300      	movs	r3, #0
 800d808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d80a:	4b42      	ldr	r3, [pc, #264]	; (800d914 <xTaskResumeAll+0x118>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10b      	bne.n	800d82a <xTaskResumeAll+0x2e>
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	b672      	cpsid	i
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	b662      	cpsie	i
 800d826:	603b      	str	r3, [r7, #0]
 800d828:	e7fe      	b.n	800d828 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d82a:	f7fe fdb5 	bl	800c398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d82e:	4b39      	ldr	r3, [pc, #228]	; (800d914 <xTaskResumeAll+0x118>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3b01      	subs	r3, #1
 800d834:	4a37      	ldr	r2, [pc, #220]	; (800d914 <xTaskResumeAll+0x118>)
 800d836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d838:	4b36      	ldr	r3, [pc, #216]	; (800d914 <xTaskResumeAll+0x118>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d161      	bne.n	800d904 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d840:	4b35      	ldr	r3, [pc, #212]	; (800d918 <xTaskResumeAll+0x11c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d05d      	beq.n	800d904 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d848:	e02e      	b.n	800d8a8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d84a:	4b34      	ldr	r3, [pc, #208]	; (800d91c <xTaskResumeAll+0x120>)
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3318      	adds	r3, #24
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe fc8c 	bl	800c174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	3304      	adds	r3, #4
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fc87 	bl	800c174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	2201      	movs	r2, #1
 800d86c:	409a      	lsls	r2, r3
 800d86e:	4b2c      	ldr	r3, [pc, #176]	; (800d920 <xTaskResumeAll+0x124>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4313      	orrs	r3, r2
 800d874:	4a2a      	ldr	r2, [pc, #168]	; (800d920 <xTaskResumeAll+0x124>)
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87c:	4613      	mov	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4a27      	ldr	r2, [pc, #156]	; (800d924 <xTaskResumeAll+0x128>)
 800d886:	441a      	add	r2, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fe fc13 	bl	800c0ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d898:	4b23      	ldr	r3, [pc, #140]	; (800d928 <xTaskResumeAll+0x12c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d302      	bcc.n	800d8a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d8a2:	4b22      	ldr	r3, [pc, #136]	; (800d92c <xTaskResumeAll+0x130>)
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8a8:	4b1c      	ldr	r3, [pc, #112]	; (800d91c <xTaskResumeAll+0x120>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1cc      	bne.n	800d84a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8b6:	f000 fb3d 	bl	800df34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d8ba:	4b1d      	ldr	r3, [pc, #116]	; (800d930 <xTaskResumeAll+0x134>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d010      	beq.n	800d8e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8c6:	f000 f859 	bl	800d97c <xTaskIncrementTick>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d8d0:	4b16      	ldr	r3, [pc, #88]	; (800d92c <xTaskResumeAll+0x130>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1f1      	bne.n	800d8c6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	; (800d930 <xTaskResumeAll+0x134>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8e8:	4b10      	ldr	r3, [pc, #64]	; (800d92c <xTaskResumeAll+0x130>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d009      	beq.n	800d904 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8f4:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <xTaskResumeAll+0x138>)
 800d8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d904:	f7fe fd7a 	bl	800c3fc <vPortExitCritical>

	return xAlreadyYielded;
 800d908:	68bb      	ldr	r3, [r7, #8]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	2000f8bc 	.word	0x2000f8bc
 800d918:	2000f894 	.word	0x2000f894
 800d91c:	2000f854 	.word	0x2000f854
 800d920:	2000f89c 	.word	0x2000f89c
 800d924:	2000f798 	.word	0x2000f798
 800d928:	2000f794 	.word	0x2000f794
 800d92c:	2000f8a8 	.word	0x2000f8a8
 800d930:	2000f8a4 	.word	0x2000f8a4
 800d934:	e000ed04 	.word	0xe000ed04

0800d938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d93e:	4b05      	ldr	r3, [pc, #20]	; (800d954 <xTaskGetTickCount+0x1c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d944:	687b      	ldr	r3, [r7, #4]
}
 800d946:	4618      	mov	r0, r3
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	2000f898 	.word	0x2000f898

0800d958 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d95e:	f7fe fdf3 	bl	800c548 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d962:	2300      	movs	r3, #0
 800d964:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d966:	4b04      	ldr	r3, [pc, #16]	; (800d978 <xTaskGetTickCountFromISR+0x20>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d96c:	683b      	ldr	r3, [r7, #0]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	2000f898 	.word	0x2000f898

0800d97c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d986:	4b51      	ldr	r3, [pc, #324]	; (800dacc <xTaskIncrementTick+0x150>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f040 808e 	bne.w	800daac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800d990:	4b4f      	ldr	r3, [pc, #316]	; (800dad0 <xTaskIncrementTick+0x154>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d998:	4a4d      	ldr	r2, [pc, #308]	; (800dad0 <xTaskIncrementTick+0x154>)
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d121      	bne.n	800d9e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d9a4:	4b4b      	ldr	r3, [pc, #300]	; (800dad4 <xTaskIncrementTick+0x158>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00b      	beq.n	800d9c6 <xTaskIncrementTick+0x4a>
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	b672      	cpsid	i
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	b662      	cpsie	i
 800d9c2:	603b      	str	r3, [r7, #0]
 800d9c4:	e7fe      	b.n	800d9c4 <xTaskIncrementTick+0x48>
 800d9c6:	4b43      	ldr	r3, [pc, #268]	; (800dad4 <xTaskIncrementTick+0x158>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	4b42      	ldr	r3, [pc, #264]	; (800dad8 <xTaskIncrementTick+0x15c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a40      	ldr	r2, [pc, #256]	; (800dad4 <xTaskIncrementTick+0x158>)
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	4a40      	ldr	r2, [pc, #256]	; (800dad8 <xTaskIncrementTick+0x15c>)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	4b40      	ldr	r3, [pc, #256]	; (800dadc <xTaskIncrementTick+0x160>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	4a3e      	ldr	r2, [pc, #248]	; (800dadc <xTaskIncrementTick+0x160>)
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	f000 faa6 	bl	800df34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9e8:	4b3d      	ldr	r3, [pc, #244]	; (800dae0 <xTaskIncrementTick+0x164>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d34d      	bcc.n	800da8e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9f2:	4b38      	ldr	r3, [pc, #224]	; (800dad4 <xTaskIncrementTick+0x158>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <xTaskIncrementTick+0x84>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e000      	b.n	800da02 <xTaskIncrementTick+0x86>
 800da00:	2300      	movs	r3, #0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d004      	beq.n	800da10 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da06:	4b36      	ldr	r3, [pc, #216]	; (800dae0 <xTaskIncrementTick+0x164>)
 800da08:	f04f 32ff 	mov.w	r2, #4294967295
 800da0c:	601a      	str	r2, [r3, #0]
					break;
 800da0e:	e03e      	b.n	800da8e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800da10:	4b30      	ldr	r3, [pc, #192]	; (800dad4 <xTaskIncrementTick+0x158>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	d203      	bcs.n	800da30 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da28:	4a2d      	ldr	r2, [pc, #180]	; (800dae0 <xTaskIncrementTick+0x164>)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6013      	str	r3, [r2, #0]
						break;
 800da2e:	e02e      	b.n	800da8e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	3304      	adds	r3, #4
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe fb9d 	bl	800c174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d004      	beq.n	800da4c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	3318      	adds	r3, #24
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fb94 	bl	800c174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da50:	2201      	movs	r2, #1
 800da52:	409a      	lsls	r2, r3
 800da54:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <xTaskIncrementTick+0x168>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4313      	orrs	r3, r2
 800da5a:	4a22      	ldr	r2, [pc, #136]	; (800dae4 <xTaskIncrementTick+0x168>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	4613      	mov	r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4a1f      	ldr	r2, [pc, #124]	; (800dae8 <xTaskIncrementTick+0x16c>)
 800da6c:	441a      	add	r2, r3
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	3304      	adds	r3, #4
 800da72:	4619      	mov	r1, r3
 800da74:	4610      	mov	r0, r2
 800da76:	f7fe fb20 	bl	800c0ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7e:	4b1b      	ldr	r3, [pc, #108]	; (800daec <xTaskIncrementTick+0x170>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	429a      	cmp	r2, r3
 800da86:	d3b4      	bcc.n	800d9f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800da88:	2301      	movs	r3, #1
 800da8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da8c:	e7b1      	b.n	800d9f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da8e:	4b17      	ldr	r3, [pc, #92]	; (800daec <xTaskIncrementTick+0x170>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4914      	ldr	r1, [pc, #80]	; (800dae8 <xTaskIncrementTick+0x16c>)
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	440b      	add	r3, r1
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d907      	bls.n	800dab6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800daa6:	2301      	movs	r3, #1
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e004      	b.n	800dab6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800daac:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <xTaskIncrementTick+0x174>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3301      	adds	r3, #1
 800dab2:	4a0f      	ldr	r2, [pc, #60]	; (800daf0 <xTaskIncrementTick+0x174>)
 800dab4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dab6:	4b0f      	ldr	r3, [pc, #60]	; (800daf4 <xTaskIncrementTick+0x178>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800dabe:	2301      	movs	r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dac2:	697b      	ldr	r3, [r7, #20]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	2000f8bc 	.word	0x2000f8bc
 800dad0:	2000f898 	.word	0x2000f898
 800dad4:	2000f84c 	.word	0x2000f84c
 800dad8:	2000f850 	.word	0x2000f850
 800dadc:	2000f8ac 	.word	0x2000f8ac
 800dae0:	2000f8b4 	.word	0x2000f8b4
 800dae4:	2000f89c 	.word	0x2000f89c
 800dae8:	2000f798 	.word	0x2000f798
 800daec:	2000f794 	.word	0x2000f794
 800daf0:	2000f8a4 	.word	0x2000f8a4
 800daf4:	2000f8a8 	.word	0x2000f8a8

0800daf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dafe:	4b27      	ldr	r3, [pc, #156]	; (800db9c <vTaskSwitchContext+0xa4>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db06:	4b26      	ldr	r3, [pc, #152]	; (800dba0 <vTaskSwitchContext+0xa8>)
 800db08:	2201      	movs	r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db0c:	e040      	b.n	800db90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800db0e:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <vTaskSwitchContext+0xa8>)
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db14:	4b23      	ldr	r3, [pc, #140]	; (800dba4 <vTaskSwitchContext+0xac>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	fab3 f383 	clz	r3, r3
 800db20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800db22:	7afb      	ldrb	r3, [r7, #11]
 800db24:	f1c3 031f 	rsb	r3, r3, #31
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	491f      	ldr	r1, [pc, #124]	; (800dba8 <vTaskSwitchContext+0xb0>)
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	440b      	add	r3, r1
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d10b      	bne.n	800db56 <vTaskSwitchContext+0x5e>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	b672      	cpsid	i
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	b662      	cpsie	i
 800db52:	607b      	str	r3, [r7, #4]
 800db54:	e7fe      	b.n	800db54 <vTaskSwitchContext+0x5c>
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4a11      	ldr	r2, [pc, #68]	; (800dba8 <vTaskSwitchContext+0xb0>)
 800db62:	4413      	add	r3, r2
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	605a      	str	r2, [r3, #4]
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	685a      	ldr	r2, [r3, #4]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	3308      	adds	r3, #8
 800db78:	429a      	cmp	r2, r3
 800db7a:	d104      	bne.n	800db86 <vTaskSwitchContext+0x8e>
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	605a      	str	r2, [r3, #4]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	4a07      	ldr	r2, [pc, #28]	; (800dbac <vTaskSwitchContext+0xb4>)
 800db8e:	6013      	str	r3, [r2, #0]
}
 800db90:	bf00      	nop
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	2000f8bc 	.word	0x2000f8bc
 800dba0:	2000f8a8 	.word	0x2000f8a8
 800dba4:	2000f89c 	.word	0x2000f89c
 800dba8:	2000f798 	.word	0x2000f798
 800dbac:	2000f794 	.word	0x2000f794

0800dbb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10b      	bne.n	800dbd8 <vTaskPlaceOnEventList+0x28>
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	b672      	cpsid	i
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	b662      	cpsie	i
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	e7fe      	b.n	800dbd6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <vTaskPlaceOnEventList+0x48>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3318      	adds	r3, #24
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7fe fa8e 	bl	800c102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	6838      	ldr	r0, [r7, #0]
 800dbea:	f000 fb09 	bl	800e200 <prvAddCurrentTaskToDelayedList>
}
 800dbee:	bf00      	nop
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	2000f794 	.word	0x2000f794

0800dbfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10b      	bne.n	800dc2a <xTaskRemoveFromEventList+0x2e>
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	b672      	cpsid	i
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	b662      	cpsie	i
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e7fe      	b.n	800dc28 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	3318      	adds	r3, #24
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe faa0 	bl	800c174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc34:	4b1d      	ldr	r3, [pc, #116]	; (800dcac <xTaskRemoveFromEventList+0xb0>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11c      	bne.n	800dc76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fa97 	bl	800c174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	409a      	lsls	r2, r3
 800dc4e:	4b18      	ldr	r3, [pc, #96]	; (800dcb0 <xTaskRemoveFromEventList+0xb4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	4a16      	ldr	r2, [pc, #88]	; (800dcb0 <xTaskRemoveFromEventList+0xb4>)
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4a13      	ldr	r2, [pc, #76]	; (800dcb4 <xTaskRemoveFromEventList+0xb8>)
 800dc66:	441a      	add	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7fe fa23 	bl	800c0ba <vListInsertEnd>
 800dc74:	e005      	b.n	800dc82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	3318      	adds	r3, #24
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	480e      	ldr	r0, [pc, #56]	; (800dcb8 <xTaskRemoveFromEventList+0xbc>)
 800dc7e:	f7fe fa1c 	bl	800c0ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc86:	4b0d      	ldr	r3, [pc, #52]	; (800dcbc <xTaskRemoveFromEventList+0xc0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d905      	bls.n	800dc9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc90:	2301      	movs	r3, #1
 800dc92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc94:	4b0a      	ldr	r3, [pc, #40]	; (800dcc0 <xTaskRemoveFromEventList+0xc4>)
 800dc96:	2201      	movs	r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	e001      	b.n	800dca0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800dca0:	697b      	ldr	r3, [r7, #20]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	2000f8bc 	.word	0x2000f8bc
 800dcb0:	2000f89c 	.word	0x2000f89c
 800dcb4:	2000f798 	.word	0x2000f798
 800dcb8:	2000f854 	.word	0x2000f854
 800dcbc:	2000f794 	.word	0x2000f794
 800dcc0:	2000f8a8 	.word	0x2000f8a8

0800dcc4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10b      	bne.n	800dcea <vTaskSetTimeOutState+0x26>
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	b672      	cpsid	i
 800dcd8:	f383 8811 	msr	BASEPRI, r3
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	b662      	cpsie	i
 800dce6:	60fb      	str	r3, [r7, #12]
 800dce8:	e7fe      	b.n	800dce8 <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcea:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <vTaskSetTimeOutState+0x44>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcf2:	4b06      	ldr	r3, [pc, #24]	; (800dd0c <vTaskSetTimeOutState+0x48>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	605a      	str	r2, [r3, #4]
}
 800dcfa:	bf00      	nop
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	2000f8ac 	.word	0x2000f8ac
 800dd0c:	2000f898 	.word	0x2000f898

0800dd10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d10b      	bne.n	800dd38 <xTaskCheckForTimeOut+0x28>
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	e7fe      	b.n	800dd36 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <xTaskCheckForTimeOut+0x46>
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	b672      	cpsid	i
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	b662      	cpsie	i
 800dd52:	60bb      	str	r3, [r7, #8]
 800dd54:	e7fe      	b.n	800dd54 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800dd56:	f7fe fb1f 	bl	800c398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd5a:	4b1c      	ldr	r3, [pc, #112]	; (800ddcc <xTaskCheckForTimeOut+0xbc>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd68:	d102      	bne.n	800dd70 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
 800dd6e:	e026      	b.n	800ddbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	4b16      	ldr	r3, [pc, #88]	; (800ddd0 <xTaskCheckForTimeOut+0xc0>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d007      	beq.n	800dd8c <xTaskCheckForTimeOut+0x7c>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d802      	bhi.n	800dd8c <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd86:	2301      	movs	r3, #1
 800dd88:	617b      	str	r3, [r7, #20]
 800dd8a:	e018      	b.n	800ddbe <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	1ad2      	subs	r2, r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d20e      	bcs.n	800ddba <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6859      	ldr	r1, [r3, #4]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	1acb      	subs	r3, r1, r3
 800dda8:	441a      	add	r2, r3
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff ff88 	bl	800dcc4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	e001      	b.n	800ddbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ddbe:	f7fe fb1d 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800ddc2:	697b      	ldr	r3, [r7, #20]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	2000f898 	.word	0x2000f898
 800ddd0:	2000f8ac 	.word	0x2000f8ac

0800ddd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddd8:	4b03      	ldr	r3, [pc, #12]	; (800dde8 <vTaskMissedYield+0x14>)
 800ddda:	2201      	movs	r2, #1
 800dddc:	601a      	str	r2, [r3, #0]
}
 800ddde:	bf00      	nop
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	2000f8a8 	.word	0x2000f8a8

0800ddec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ddf4:	f000 f852 	bl	800de9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ddf8:	4b06      	ldr	r3, [pc, #24]	; (800de14 <prvIdleTask+0x28>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d9f9      	bls.n	800ddf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800de00:	4b05      	ldr	r3, [pc, #20]	; (800de18 <prvIdleTask+0x2c>)
 800de02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de10:	e7f0      	b.n	800ddf4 <prvIdleTask+0x8>
 800de12:	bf00      	nop
 800de14:	2000f798 	.word	0x2000f798
 800de18:	e000ed04 	.word	0xe000ed04

0800de1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de22:	2300      	movs	r3, #0
 800de24:	607b      	str	r3, [r7, #4]
 800de26:	e00c      	b.n	800de42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	4613      	mov	r3, r2
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	4413      	add	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4a12      	ldr	r2, [pc, #72]	; (800de7c <prvInitialiseTaskLists+0x60>)
 800de34:	4413      	add	r3, r2
 800de36:	4618      	mov	r0, r3
 800de38:	f7fe f912 	bl	800c060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3301      	adds	r3, #1
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b06      	cmp	r3, #6
 800de46:	d9ef      	bls.n	800de28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de48:	480d      	ldr	r0, [pc, #52]	; (800de80 <prvInitialiseTaskLists+0x64>)
 800de4a:	f7fe f909 	bl	800c060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de4e:	480d      	ldr	r0, [pc, #52]	; (800de84 <prvInitialiseTaskLists+0x68>)
 800de50:	f7fe f906 	bl	800c060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de54:	480c      	ldr	r0, [pc, #48]	; (800de88 <prvInitialiseTaskLists+0x6c>)
 800de56:	f7fe f903 	bl	800c060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de5a:	480c      	ldr	r0, [pc, #48]	; (800de8c <prvInitialiseTaskLists+0x70>)
 800de5c:	f7fe f900 	bl	800c060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de60:	480b      	ldr	r0, [pc, #44]	; (800de90 <prvInitialiseTaskLists+0x74>)
 800de62:	f7fe f8fd 	bl	800c060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de66:	4b0b      	ldr	r3, [pc, #44]	; (800de94 <prvInitialiseTaskLists+0x78>)
 800de68:	4a05      	ldr	r2, [pc, #20]	; (800de80 <prvInitialiseTaskLists+0x64>)
 800de6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de6c:	4b0a      	ldr	r3, [pc, #40]	; (800de98 <prvInitialiseTaskLists+0x7c>)
 800de6e:	4a05      	ldr	r2, [pc, #20]	; (800de84 <prvInitialiseTaskLists+0x68>)
 800de70:	601a      	str	r2, [r3, #0]
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	2000f798 	.word	0x2000f798
 800de80:	2000f824 	.word	0x2000f824
 800de84:	2000f838 	.word	0x2000f838
 800de88:	2000f854 	.word	0x2000f854
 800de8c:	2000f868 	.word	0x2000f868
 800de90:	2000f880 	.word	0x2000f880
 800de94:	2000f84c 	.word	0x2000f84c
 800de98:	2000f850 	.word	0x2000f850

0800de9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dea2:	e028      	b.n	800def6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800dea4:	f7ff fc9c 	bl	800d7e0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800dea8:	4b17      	ldr	r3, [pc, #92]	; (800df08 <prvCheckTasksWaitingTermination+0x6c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	bf0c      	ite	eq
 800deb0:	2301      	moveq	r3, #1
 800deb2:	2300      	movne	r3, #0
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800deb8:	f7ff fca0 	bl	800d7fc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d119      	bne.n	800def6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800dec2:	f7fe fa69 	bl	800c398 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dec6:	4b10      	ldr	r3, [pc, #64]	; (800df08 <prvCheckTasksWaitingTermination+0x6c>)
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	3304      	adds	r3, #4
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe f94e 	bl	800c174 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800ded8:	4b0c      	ldr	r3, [pc, #48]	; (800df0c <prvCheckTasksWaitingTermination+0x70>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3b01      	subs	r3, #1
 800dede:	4a0b      	ldr	r2, [pc, #44]	; (800df0c <prvCheckTasksWaitingTermination+0x70>)
 800dee0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800dee2:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <prvCheckTasksWaitingTermination+0x74>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	4a09      	ldr	r2, [pc, #36]	; (800df10 <prvCheckTasksWaitingTermination+0x74>)
 800deea:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800deec:	f7fe fa86 	bl	800c3fc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800def0:	6838      	ldr	r0, [r7, #0]
 800def2:	f000 f80f 	bl	800df14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800def6:	4b06      	ldr	r3, [pc, #24]	; (800df10 <prvCheckTasksWaitingTermination+0x74>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1d2      	bne.n	800dea4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	2000f868 	.word	0x2000f868
 800df0c:	2000f894 	.word	0x2000f894
 800df10:	2000f87c 	.word	0x2000f87c

0800df14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fc1b 	bl	800c75c <vPortFree>
			vPortFree( pxTCB );
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7fe fc18 	bl	800c75c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df3a:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <prvResetNextTaskUnblockTime+0x44>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <prvResetNextTaskUnblockTime+0x14>
 800df44:	2301      	movs	r3, #1
 800df46:	e000      	b.n	800df4a <prvResetNextTaskUnblockTime+0x16>
 800df48:	2300      	movs	r3, #0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df4e:	4b0b      	ldr	r3, [pc, #44]	; (800df7c <prvResetNextTaskUnblockTime+0x48>)
 800df50:	f04f 32ff 	mov.w	r2, #4294967295
 800df54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df56:	e008      	b.n	800df6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df58:	4b07      	ldr	r3, [pc, #28]	; (800df78 <prvResetNextTaskUnblockTime+0x44>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4a05      	ldr	r2, [pc, #20]	; (800df7c <prvResetNextTaskUnblockTime+0x48>)
 800df68:	6013      	str	r3, [r2, #0]
}
 800df6a:	bf00      	nop
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	2000f84c 	.word	0x2000f84c
 800df7c:	2000f8b4 	.word	0x2000f8b4

0800df80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <xTaskGetCurrentTaskHandle+0x1c>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800df8c:	687b      	ldr	r3, [r7, #4]
	}
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	2000f794 	.word	0x2000f794

0800dfa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <xTaskGetSchedulerState+0x34>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d102      	bne.n	800dfb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	607b      	str	r3, [r7, #4]
 800dfb2:	e008      	b.n	800dfc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfb4:	4b08      	ldr	r3, [pc, #32]	; (800dfd8 <xTaskGetSchedulerState+0x38>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d102      	bne.n	800dfc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	607b      	str	r3, [r7, #4]
 800dfc0:	e001      	b.n	800dfc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfc6:	687b      	ldr	r3, [r7, #4]
	}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	2000f8a0 	.word	0x2000f8a0
 800dfd8:	2000f8bc 	.word	0x2000f8bc

0800dfdc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d062      	beq.n	800e0b4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff2:	4b32      	ldr	r3, [pc, #200]	; (800e0bc <vTaskPriorityInherit+0xe0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d25b      	bcs.n	800e0b4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	2b00      	cmp	r3, #0
 800e002:	db06      	blt.n	800e012 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e004:	4b2d      	ldr	r3, [pc, #180]	; (800e0bc <vTaskPriorityInherit+0xe0>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	f1c3 0207 	rsb	r2, r3, #7
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6959      	ldr	r1, [r3, #20]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	4613      	mov	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4a27      	ldr	r2, [pc, #156]	; (800e0c0 <vTaskPriorityInherit+0xe4>)
 800e024:	4413      	add	r3, r2
 800e026:	4299      	cmp	r1, r3
 800e028:	d101      	bne.n	800e02e <vTaskPriorityInherit+0x52>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e000      	b.n	800e030 <vTaskPriorityInherit+0x54>
 800e02e:	2300      	movs	r3, #0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d03a      	beq.n	800e0aa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3304      	adds	r3, #4
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fe f89b 	bl	800c174 <uxListRemove>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d115      	bne.n	800e070 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e048:	491d      	ldr	r1, [pc, #116]	; (800e0c0 <vTaskPriorityInherit+0xe4>)
 800e04a:	4613      	mov	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	440b      	add	r3, r1
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10a      	bne.n	800e070 <vTaskPriorityInherit+0x94>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05e:	2201      	movs	r2, #1
 800e060:	fa02 f303 	lsl.w	r3, r2, r3
 800e064:	43da      	mvns	r2, r3
 800e066:	4b17      	ldr	r3, [pc, #92]	; (800e0c4 <vTaskPriorityInherit+0xe8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4013      	ands	r3, r2
 800e06c:	4a15      	ldr	r2, [pc, #84]	; (800e0c4 <vTaskPriorityInherit+0xe8>)
 800e06e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e070:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <vTaskPriorityInherit+0xe0>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07e:	2201      	movs	r2, #1
 800e080:	409a      	lsls	r2, r3
 800e082:	4b10      	ldr	r3, [pc, #64]	; (800e0c4 <vTaskPriorityInherit+0xe8>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4313      	orrs	r3, r2
 800e088:	4a0e      	ldr	r2, [pc, #56]	; (800e0c4 <vTaskPriorityInherit+0xe8>)
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e090:	4613      	mov	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4413      	add	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4a09      	ldr	r2, [pc, #36]	; (800e0c0 <vTaskPriorityInherit+0xe4>)
 800e09a:	441a      	add	r2, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f7fe f809 	bl	800c0ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0a8:	e004      	b.n	800e0b4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0aa:	4b04      	ldr	r3, [pc, #16]	; (800e0bc <vTaskPriorityInherit+0xe0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800e0b4:	bf00      	nop
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	2000f794 	.word	0x2000f794
 800e0c0:	2000f798 	.word	0x2000f798
 800e0c4:	2000f89c 	.word	0x2000f89c

0800e0c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d070      	beq.n	800e1c0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0de:	4b3b      	ldr	r3, [pc, #236]	; (800e1cc <xTaskPriorityDisinherit+0x104>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d00b      	beq.n	800e100 <xTaskPriorityDisinherit+0x38>
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	b672      	cpsid	i
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	b662      	cpsie	i
 800e0fc:	60fb      	str	r3, [r7, #12]
 800e0fe:	e7fe      	b.n	800e0fe <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10b      	bne.n	800e120 <xTaskPriorityDisinherit+0x58>
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	b672      	cpsid	i
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	b662      	cpsie	i
 800e11c:	60bb      	str	r3, [r7, #8]
 800e11e:	e7fe      	b.n	800e11e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e124:	1e5a      	subs	r2, r3, #1
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e132:	429a      	cmp	r2, r3
 800e134:	d044      	beq.n	800e1c0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d140      	bne.n	800e1c0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3304      	adds	r3, #4
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe f816 	bl	800c174 <uxListRemove>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d115      	bne.n	800e17a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e152:	491f      	ldr	r1, [pc, #124]	; (800e1d0 <xTaskPriorityDisinherit+0x108>)
 800e154:	4613      	mov	r3, r2
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4413      	add	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	440b      	add	r3, r1
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <xTaskPriorityDisinherit+0xb2>
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e168:	2201      	movs	r2, #1
 800e16a:	fa02 f303 	lsl.w	r3, r2, r3
 800e16e:	43da      	mvns	r2, r3
 800e170:	4b18      	ldr	r3, [pc, #96]	; (800e1d4 <xTaskPriorityDisinherit+0x10c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4013      	ands	r3, r2
 800e176:	4a17      	ldr	r2, [pc, #92]	; (800e1d4 <xTaskPriorityDisinherit+0x10c>)
 800e178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	f1c3 0207 	rsb	r2, r3, #7
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e192:	2201      	movs	r2, #1
 800e194:	409a      	lsls	r2, r3
 800e196:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <xTaskPriorityDisinherit+0x10c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	4a0d      	ldr	r2, [pc, #52]	; (800e1d4 <xTaskPriorityDisinherit+0x10c>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a08      	ldr	r2, [pc, #32]	; (800e1d0 <xTaskPriorityDisinherit+0x108>)
 800e1ae:	441a      	add	r2, r3
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7fd ff7f 	bl	800c0ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1c0:	697b      	ldr	r3, [r7, #20]
	}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	2000f794 	.word	0x2000f794
 800e1d0:	2000f798 	.word	0x2000f798
 800e1d4:	2000f89c 	.word	0x2000f89c

0800e1d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e1d8:	b480      	push	{r7}
 800e1da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e1dc:	4b07      	ldr	r3, [pc, #28]	; (800e1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d004      	beq.n	800e1ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e1e4:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1ea:	3201      	adds	r2, #1
 800e1ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e1ee:	4b03      	ldr	r3, [pc, #12]	; (800e1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
	}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	2000f794 	.word	0x2000f794

0800e200 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e20a:	4b29      	ldr	r3, [pc, #164]	; (800e2b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e210:	4b28      	ldr	r3, [pc, #160]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3304      	adds	r3, #4
 800e216:	4618      	mov	r0, r3
 800e218:	f7fd ffac 	bl	800c174 <uxListRemove>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10b      	bne.n	800e23a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e222:	4b24      	ldr	r3, [pc, #144]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	2201      	movs	r2, #1
 800e22a:	fa02 f303 	lsl.w	r3, r2, r3
 800e22e:	43da      	mvns	r2, r3
 800e230:	4b21      	ldr	r3, [pc, #132]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4013      	ands	r3, r2
 800e236:	4a20      	ldr	r2, [pc, #128]	; (800e2b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e238:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e240:	d10a      	bne.n	800e258 <prvAddCurrentTaskToDelayedList+0x58>
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d007      	beq.n	800e258 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e248:	4b1a      	ldr	r3, [pc, #104]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4619      	mov	r1, r3
 800e250:	481a      	ldr	r0, [pc, #104]	; (800e2bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800e252:	f7fd ff32 	bl	800c0ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e256:	e026      	b.n	800e2a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4413      	add	r3, r2
 800e25e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e260:	4b14      	ldr	r3, [pc, #80]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d209      	bcs.n	800e284 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e270:	4b13      	ldr	r3, [pc, #76]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3304      	adds	r3, #4
 800e27a:	4619      	mov	r1, r3
 800e27c:	4610      	mov	r0, r2
 800e27e:	f7fd ff40 	bl	800c102 <vListInsert>
}
 800e282:	e010      	b.n	800e2a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e284:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	4619      	mov	r1, r3
 800e290:	4610      	mov	r0, r2
 800e292:	f7fd ff36 	bl	800c102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e296:	4b0c      	ldr	r3, [pc, #48]	; (800e2c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d202      	bcs.n	800e2a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e2a0:	4a09      	ldr	r2, [pc, #36]	; (800e2c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	6013      	str	r3, [r2, #0]
}
 800e2a6:	bf00      	nop
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	2000f898 	.word	0x2000f898
 800e2b4:	2000f794 	.word	0x2000f794
 800e2b8:	2000f89c 	.word	0x2000f89c
 800e2bc:	2000f880 	.word	0x2000f880
 800e2c0:	2000f850 	.word	0x2000f850
 800e2c4:	2000f84c 	.word	0x2000f84c
 800e2c8:	2000f8b4 	.word	0x2000f8b4

0800e2cc <USBD_MSC_Init>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	70fb      	strb	r3, [r7, #3]
  int16_t ret = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	81fb      	strh	r3, [r7, #14]
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7c1b      	ldrb	r3, [r3, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10e      	bne.n	800e302 <USBD_MSC_Init+0x36>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800e2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f006 fefb 	bl	80150e8 <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_HS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800e2f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	2181      	movs	r1, #129	; 0x81
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f006 fef4 	bl	80150e8 <USBD_LL_OpenEP>
 800e300:	e00b      	b.n	800e31a <USBD_MSC_Init+0x4e>
                   MSC_MAX_HS_PACKET);  
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800e302:	2340      	movs	r3, #64	; 0x40
 800e304:	2202      	movs	r2, #2
 800e306:	2101      	movs	r1, #1
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f006 feed 	bl	80150e8 <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800e30e:	2340      	movs	r3, #64	; 0x40
 800e310:	2202      	movs	r2, #2
 800e312:	2181      	movs	r1, #129	; 0x81
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f006 fee7 	bl	80150e8 <USBD_LL_OpenEP>
                   MSC_EPIN_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);  
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800e31a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800e31e:	f01c fa1f 	bl	802a760 <malloc>
 800e322:	4603      	mov	r3, r0
 800e324:	461a      	mov	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e332:	2b00      	cmp	r3, #0
 800e334:	d102      	bne.n	800e33c <USBD_MSC_Init+0x70>
  {
    ret = 1; 
 800e336:	2301      	movs	r3, #1
 800e338:	81fb      	strh	r3, [r7, #14]
 800e33a:	e004      	b.n	800e346 <USBD_MSC_Init+0x7a>
  }
  else
  {
    /* Init the BOT  layer */
    MSC_BOT_Init(pdev); 
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f958 	bl	800e5f2 <MSC_BOT_Init>
    ret = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	81fb      	strh	r3, [r7, #14]
  }
  
  return ret;
 800e346:	89fb      	ldrh	r3, [r7, #14]
 800e348:	b2db      	uxtb	r3, r3
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b082      	sub	sp, #8
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	460b      	mov	r3, r1
 800e35c:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 800e35e:	2101      	movs	r1, #1
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f006 feff 	bl	8015164 <USBD_LL_CloseEP>
                  MSC_EPOUT_ADDR);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800e366:	2181      	movs	r1, #129	; 0x81
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f006 fefb 	bl	8015164 <USBD_LL_CloseEP>
                  MSC_EPIN_ADDR);
  
  
    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f989 	bl	800e686 <MSC_BOT_DeInit>
  
  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d009      	beq.n	800e392 <USBD_MSC_DeInit+0x40>
  {
    USBD_free(pdev->pClassData);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e384:	4618      	mov	r0, r3
 800e386:	f01c f9f3 	bl	802a770 <free>
    pdev->pClassData  = NULL; 
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return 0;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3ac:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d04a      	beq.n	800e450 <USBD_MSC_Setup+0xb4>
 800e3ba:	2b20      	cmp	r3, #32
 800e3bc:	d000      	beq.n	800e3c0 <USBD_MSC_Setup+0x24>
      
    }  
    break;
   
  default:
    break;
 800e3be:	e0a0      	b.n	800e502 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	785b      	ldrb	r3, [r3, #1]
 800e3c4:	2bfe      	cmp	r3, #254	; 0xfe
 800e3c6:	d002      	beq.n	800e3ce <USBD_MSC_Setup+0x32>
 800e3c8:	2bff      	cmp	r3, #255	; 0xff
 800e3ca:	d023      	beq.n	800e414 <USBD_MSC_Setup+0x78>
 800e3cc:	e039      	b.n	800e442 <USBD_MSC_Setup+0xa6>
      if((req->wValue  == 0) && 
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	885b      	ldrh	r3, [r3, #2]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d118      	bne.n	800e408 <USBD_MSC_Setup+0x6c>
         (req->wLength == 1) &&
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d114      	bne.n	800e408 <USBD_MSC_Setup+0x6c>
         ((req->bmRequest & 0x80) == 0x80))
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	b25b      	sxtb	r3, r3
         (req->wLength == 1) &&
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	da0f      	bge.n	800e408 <USBD_MSC_Setup+0x6c>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800e3ee:	699b      	ldr	r3, [r3, #24]
 800e3f0:	4798      	blx	r3
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	601a      	str	r2, [r3, #0]
                          (uint8_t *)&hmsc->max_lun,
 800e3fa:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f001 fff9 	bl	80103f8 <USBD_CtlSendData>
      break;
 800e406:	e022      	b.n	800e44e <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f001 ff88 	bl	8010320 <USBD_CtlError>
         return USBD_FAIL; 
 800e410:	2302      	movs	r3, #2
 800e412:	e077      	b.n	800e504 <USBD_MSC_Setup+0x168>
      if((req->wValue  == 0) && 
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	885b      	ldrh	r3, [r3, #2]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10c      	bne.n	800e436 <USBD_MSC_Setup+0x9a>
         (req->wLength == 0) &&
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 800e420:	2b00      	cmp	r3, #0
 800e422:	d108      	bne.n	800e436 <USBD_MSC_Setup+0x9a>
        ((req->bmRequest & 0x80) != 0x80))
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	b25b      	sxtb	r3, r3
         (req->wLength == 0) &&
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	db03      	blt.n	800e436 <USBD_MSC_Setup+0x9a>
         MSC_BOT_Reset(pdev);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f90f 	bl	800e652 <MSC_BOT_Reset>
      break;
 800e434:	e00b      	b.n	800e44e <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f001 ff71 	bl	8010320 <USBD_CtlError>
         return USBD_FAIL; 
 800e43e:	2302      	movs	r3, #2
 800e440:	e060      	b.n	800e504 <USBD_MSC_Setup+0x168>
       USBD_CtlError(pdev , req);
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f001 ff6b 	bl	8010320 <USBD_CtlError>
       return USBD_FAIL; 
 800e44a:	2302      	movs	r3, #2
 800e44c:	e05a      	b.n	800e504 <USBD_MSC_Setup+0x168>
    break;
 800e44e:	e058      	b.n	800e502 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	785b      	ldrb	r3, [r3, #1]
 800e454:	2b0a      	cmp	r3, #10
 800e456:	d004      	beq.n	800e462 <USBD_MSC_Setup+0xc6>
 800e458:	2b0b      	cmp	r3, #11
 800e45a:	d00a      	beq.n	800e472 <USBD_MSC_Setup+0xd6>
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d00f      	beq.n	800e480 <USBD_MSC_Setup+0xe4>
    break;
 800e460:	e04e      	b.n	800e500 <USBD_MSC_Setup+0x164>
                        (uint8_t *)&hmsc->interface,
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 800e466:	2201      	movs	r2, #1
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f001 ffc4 	bl	80103f8 <USBD_CtlSendData>
      break;
 800e470:	e046      	b.n	800e500 <USBD_MSC_Setup+0x164>
      hmsc->interface = (uint8_t)(req->wValue);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	885b      	ldrh	r3, [r3, #2]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	461a      	mov	r2, r3
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	605a      	str	r2, [r3, #4]
      break;
 800e47e:	e03f      	b.n	800e500 <USBD_MSC_Setup+0x164>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	889b      	ldrh	r3, [r3, #4]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	4619      	mov	r1, r3
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f006 fea1 	bl	80151d0 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	889b      	ldrh	r3, [r3, #4]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f006 fe64 	bl	8015164 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	889b      	ldrh	r3, [r3, #4]
 800e4a0:	b25b      	sxtb	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	da12      	bge.n	800e4cc <USBD_MSC_Setup+0x130>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7c1b      	ldrb	r3, [r3, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d107      	bne.n	800e4be <USBD_MSC_Setup+0x122>
          USBD_LL_OpenEP(pdev,
 800e4ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	2181      	movs	r1, #129	; 0x81
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f006 fe16 	bl	80150e8 <USBD_LL_OpenEP>
 800e4bc:	e018      	b.n	800e4f0 <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 800e4be:	2340      	movs	r3, #64	; 0x40
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	2181      	movs	r1, #129	; 0x81
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f006 fe0f 	bl	80150e8 <USBD_LL_OpenEP>
 800e4ca:	e011      	b.n	800e4f0 <USBD_MSC_Setup+0x154>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	7c1b      	ldrb	r3, [r3, #16]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d107      	bne.n	800e4e4 <USBD_MSC_Setup+0x148>
          USBD_LL_OpenEP(pdev,
 800e4d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d8:	2202      	movs	r2, #2
 800e4da:	2101      	movs	r1, #1
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f006 fe03 	bl	80150e8 <USBD_LL_OpenEP>
 800e4e2:	e005      	b.n	800e4f0 <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 800e4e4:	2340      	movs	r3, #64	; 0x40
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f006 fdfc 	bl	80150e8 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	889b      	ldrh	r3, [r3, #4]
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fa39 	bl	800e970 <MSC_BOT_CplClrFeature>
      break;
 800e4fe:	bf00      	nop
    break;
 800e500:	bf00      	nop
  }
  return 0;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	460b      	mov	r3, r1
 800e516:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800e518:	78fb      	ldrb	r3, [r7, #3]
 800e51a:	4619      	mov	r1, r3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f8c3 	bl	800e6a8 <MSC_BOT_DataIn>
  return 0;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev, 
                               uint8_t epnum)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800e538:	78fb      	ldrb	r3, [r7, #3]
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f8e4 	bl	800e70a <MSC_BOT_DataOut>
  return 0;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2220      	movs	r2, #32
 800e558:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800e55a:	4b03      	ldr	r3, [pc, #12]	; (800e568 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	20000050 	.word	0x20000050

0800e56c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2220      	movs	r2, #32
 800e578:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800e57a:	4b03      	ldr	r3, [pc, #12]	; (800e588 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	20000070 	.word	0x20000070

0800e58c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2220      	movs	r2, #32
 800e598:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800e59a:	4b03      	ldr	r3, [pc, #12]	; (800e5a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	20000090 	.word	0x20000090

0800e5ac <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	220a      	movs	r2, #10
 800e5b8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800e5ba:	4b03      	ldr	r3, [pc, #12]	; (800e5c8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr
 800e5c8:	200000b0 	.word	0x200000b0

0800e5cc <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData= fops;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e600:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	725a      	strb	r2, [r3, #9]
  
  hmsc->scsi_sense_tail = 0;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
  
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2000      	movs	r0, #0
 800e628:	4798      	blx	r3
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800e62a:	2101      	movs	r1, #1
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f006 fdcf 	bl	80151d0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800e632:	2181      	movs	r1, #129	; 0x81
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f006 fdcb 	bl	80151d0 <USBD_LL_FlushEP>
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 800e640:	231f      	movs	r3, #31
 800e642:	2101      	movs	r1, #1
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f006 ff01 	bl	801544c <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);    
}
 800e64a:	bf00      	nop
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e660:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2201      	movs	r2, #1
 800e66c:	725a      	strb	r2, [r3, #9]
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 800e674:	231f      	movs	r3, #31
 800e676:	2101      	movs	r1, #1
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f006 fee7 	bl	801544c <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);   
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800e686:	b480      	push	{r7}
 800e688:	b085      	sub	sp, #20
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e694:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	721a      	strb	r2, [r3, #8]
}
 800e69c:	bf00      	nop
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e6ba:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	7a1b      	ldrb	r3, [r3, #8]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d004      	beq.n	800e6ce <MSC_BOT_DataIn+0x26>
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	db19      	blt.n	800e6fc <MSC_BOT_DataIn+0x54>
 800e6c8:	2b04      	cmp	r3, #4
 800e6ca:	dc17      	bgt.n	800e6fc <MSC_BOT_DataIn+0x54>
 800e6cc:	e011      	b.n	800e6f2 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e6da:	461a      	mov	r2, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 f96d 	bl	800e9bc <SCSI_ProcessCmd>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da0b      	bge.n	800e700 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f8e6 	bl	800e8bc <MSC_BOT_SendCSW>
    }
    break;
 800e6f0:	e006      	b.n	800e700 <MSC_BOT_DataIn+0x58>
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f8e1 	bl	800e8bc <MSC_BOT_SendCSW>
    
    break;
 800e6fa:	e002      	b.n	800e702 <MSC_BOT_DataIn+0x5a>
    
  default:
    break;
 800e6fc:	bf00      	nop
 800e6fe:	e000      	b.n	800e702 <MSC_BOT_DataIn+0x5a>
    break;
 800e700:	bf00      	nop
  }
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e71c:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	7a1b      	ldrb	r3, [r3, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <MSC_BOT_DataOut+0x22>
 800e726:	2b01      	cmp	r3, #1
 800e728:	d004      	beq.n	800e734 <MSC_BOT_DataOut+0x2a>
    }

    break;
    
  default:
    break;
 800e72a:	e015      	b.n	800e758 <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f817 	bl	800e760 <MSC_BOT_CBW_Decode>
    break;
 800e732:	e011      	b.n	800e758 <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e740:	461a      	mov	r2, r3
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f93a 	bl	800e9bc <SCSI_ProcessCmd>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	da03      	bge.n	800e756 <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800e74e:	2101      	movs	r1, #1
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f8b3 	bl	800e8bc <MSC_BOT_SendCSW>
    break;
 800e756:	bf00      	nop
  }
}
 800e758:	bf00      	nop
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly  
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e76e:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e788:	2101      	movs	r1, #1
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f006 fe98 	bl	80154c0 <USBD_LL_GetRxDataSize>
 800e790:	4603      	mov	r3, r0
 800e792:	2b1f      	cmp	r3, #31
 800e794:	d114      	bne.n	800e7c0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e79c:	4a30      	ldr	r2, [pc, #192]	; (800e860 <MSC_BOT_CBW_Decode+0x100>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d10e      	bne.n	800e7c0 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1) || 
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d809      	bhi.n	800e7c0 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1) || 
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d004      	beq.n	800e7c0 <MSC_BOT_CBW_Decode+0x60>
            (hmsc->cbw.bCBLength > 16))
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
          (hmsc->cbw.bCBLength < 1) || 
 800e7bc:	2b10      	cmp	r3, #16
 800e7be:	d90e      	bls.n	800e7de <MSC_BOT_CBW_Decode+0x7e>
  {
    
    SCSI_SenseCode(pdev,
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e7c6:	2320      	movs	r3, #32
 800e7c8:	2205      	movs	r2, #5
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 fc39 	bl	800f042 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f89c 	bl	800e914 <MSC_BOT_Abort>
        MSC_BOT_SendCSW (pdev,
                         USBD_CSW_CMD_PASSED);
      }
    }
  }
}
 800e7dc:	e03b      	b.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
    if(SCSI_ProcessCmd(pdev,
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f8e5 	bl	800e9bc <SCSI_ProcessCmd>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	da0c      	bge.n	800e812 <MSC_BOT_CBW_Decode+0xb2>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	7a1b      	ldrb	r3, [r3, #8]
 800e7fc:	2b05      	cmp	r3, #5
 800e7fe:	d104      	bne.n	800e80a <MSC_BOT_CBW_Decode+0xaa>
       MSC_BOT_SendCSW (pdev,
 800e800:	2101      	movs	r1, #1
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f85a 	bl	800e8bc <MSC_BOT_SendCSW>
}
 800e808:	e025      	b.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
        MSC_BOT_Abort(pdev);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f882 	bl	800e914 <MSC_BOT_Abort>
}
 800e810:	e021      	b.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	7a1b      	ldrb	r3, [r3, #8]
 800e816:	2b02      	cmp	r3, #2
 800e818:	d01d      	beq.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d019      	beq.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN)) 
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e826:	2b03      	cmp	r3, #3
 800e828:	d015      	beq.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
      if (hmsc->bot_data_length > 0)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	895b      	ldrh	r3, [r3, #10]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <MSC_BOT_CBW_Decode+0xe6>
                         hmsc->bot_data, 
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f103 010c 	add.w	r1, r3, #12
        MSC_BOT_SendData(pdev,
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	895b      	ldrh	r3, [r3, #10]
 800e83c:	461a      	mov	r2, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 f810 	bl	800e864 <MSC_BOT_SendData>
}
 800e844:	e007      	b.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
      else if (hmsc->bot_data_length == 0) 
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	895b      	ldrh	r3, [r3, #10]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d103      	bne.n	800e856 <MSC_BOT_CBW_Decode+0xf6>
        MSC_BOT_SendCSW (pdev,
 800e84e:	2100      	movs	r1, #0
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f833 	bl	800e8bc <MSC_BOT_SendCSW>
}
 800e856:	bf00      	nop
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	43425355 	.word	0x43425355

0800e864 <MSC_BOT_SendData>:
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	4613      	mov	r3, r2
 800e870:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e878:	617b      	str	r3, [r7, #20]
  
  len = MIN (hmsc->cbw.dDataLength, len);
 800e87a:	88fa      	ldrh	r2, [r7, #6]
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e882:	4293      	cmp	r3, r2
 800e884:	bf28      	it	cs
 800e886:	4613      	movcs	r3, r2
 800e888:	80fb      	strh	r3, [r7, #6]
  hmsc->csw.dDataResidue -= len;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800e890:	88fb      	ldrh	r3, [r7, #6]
 800e892:	1ad2      	subs	r2, r2, r3
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800e8a8:	88fb      	ldrh	r3, [r7, #6]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	2181      	movs	r1, #129	; 0x81
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f006 fd92 	bl	80153d8 <USBD_LL_Transmit>
}
 800e8b4:	bf00      	nop
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e8ce:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4a0f      	ldr	r2, [pc, #60]	; (800e910 <MSC_BOT_SendCSW+0x54>)
 800e8d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	78fa      	ldrb	r2, [r7, #3]
 800e8dc:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f503 720b 	add.w	r2, r3, #556	; 0x22c
  USBD_LL_Transmit (pdev, 
 800e8ec:	230d      	movs	r3, #13
 800e8ee:	2181      	movs	r1, #129	; 0x81
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f006 fd71 	bl	80153d8 <USBD_LL_Transmit>
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
                    MSC_EPOUT_ADDR,
                    (uint8_t *)&hmsc->cbw, 
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  USBD_LL_PrepareReceive (pdev,
 800e8fc:	231f      	movs	r3, #31
 800e8fe:	2101      	movs	r1, #1
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f006 fda3 	bl	801544c <USBD_LL_PrepareReceive>
                    USBD_BOT_CBW_LENGTH);  
  
}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	53425355 	.word	0x53425355

0800e914 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e922:	60fb      	str	r3, [r7, #12]
  
  if ((hmsc->cbw.bmFlags == 0) && 
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d10c      	bne.n	800e948 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0) &&
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 800e934:	2b00      	cmp	r3, #0
 800e936:	d007      	beq.n	800e948 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0) &&
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d103      	bne.n	800e948 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800e940:	2101      	movs	r1, #1
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f006 fc7a 	bl	801523c <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e948:	2181      	movs	r1, #129	; 0x81
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f006 fc76 	bl	801523c <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	7a5b      	ldrb	r3, [r3, #9]
 800e954:	2b02      	cmp	r3, #2
 800e956:	d107      	bne.n	800e968 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
    USBD_LL_PrepareReceive (pdev,
 800e95e:	231f      	movs	r3, #31
 800e960:	2101      	movs	r1, #1
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f006 fd72 	bl	801544c <USBD_LL_PrepareReceive>
                      USBD_BOT_CBW_LENGTH);    
  }
}
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e982:	60fb      	str	r3, [r7, #12]
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	7a5b      	ldrb	r3, [r3, #9]
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d107      	bne.n	800e99c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e98c:	2181      	movs	r1, #129	; 0x81
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f006 fc54 	bl	801523c <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	725a      	strb	r2, [r3, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 800e99a:	e00b      	b.n	800e9b4 <MSC_BOT_CplClrFeature+0x44>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e99c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	da07      	bge.n	800e9b4 <MSC_BOT_CplClrFeature+0x44>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	7a5b      	ldrb	r3, [r3, #9]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d003      	beq.n	800e9b4 <MSC_BOT_CplClrFeature+0x44>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff ff84 	bl	800e8bc <MSC_BOT_SendCSW>
}
 800e9b4:	bf00      	nop
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	72fb      	strb	r3, [r7, #11]
  
  switch (params[0])
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b5a      	cmp	r3, #90	; 0x5a
 800e9d0:	f200 811a 	bhi.w	800ec08 <SCSI_ProcessCmd+0x24c>
 800e9d4:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <SCSI_ProcessCmd+0x20>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800eb49 	.word	0x0800eb49
 800e9e0:	0800ec09 	.word	0x0800ec09
 800e9e4:	0800ec09 	.word	0x0800ec09
 800e9e8:	0800eb59 	.word	0x0800eb59
 800e9ec:	0800ec09 	.word	0x0800ec09
 800e9f0:	0800ec09 	.word	0x0800ec09
 800e9f4:	0800ec09 	.word	0x0800ec09
 800e9f8:	0800ec09 	.word	0x0800ec09
 800e9fc:	0800ec09 	.word	0x0800ec09
 800ea00:	0800ec09 	.word	0x0800ec09
 800ea04:	0800ec09 	.word	0x0800ec09
 800ea08:	0800ec09 	.word	0x0800ec09
 800ea0c:	0800ec09 	.word	0x0800ec09
 800ea10:	0800ec09 	.word	0x0800ec09
 800ea14:	0800ec09 	.word	0x0800ec09
 800ea18:	0800ec09 	.word	0x0800ec09
 800ea1c:	0800ec09 	.word	0x0800ec09
 800ea20:	0800ec09 	.word	0x0800ec09
 800ea24:	0800eb69 	.word	0x0800eb69
 800ea28:	0800ec09 	.word	0x0800ec09
 800ea2c:	0800ec09 	.word	0x0800ec09
 800ea30:	0800ec09 	.word	0x0800ec09
 800ea34:	0800ec09 	.word	0x0800ec09
 800ea38:	0800ec09 	.word	0x0800ec09
 800ea3c:	0800ec09 	.word	0x0800ec09
 800ea40:	0800ec09 	.word	0x0800ec09
 800ea44:	0800eb99 	.word	0x0800eb99
 800ea48:	0800eb79 	.word	0x0800eb79
 800ea4c:	0800ec09 	.word	0x0800ec09
 800ea50:	0800ec09 	.word	0x0800ec09
 800ea54:	0800eb89 	.word	0x0800eb89
 800ea58:	0800ec09 	.word	0x0800ec09
 800ea5c:	0800ec09 	.word	0x0800ec09
 800ea60:	0800ec09 	.word	0x0800ec09
 800ea64:	0800ec09 	.word	0x0800ec09
 800ea68:	0800ebb9 	.word	0x0800ebb9
 800ea6c:	0800ec09 	.word	0x0800ec09
 800ea70:	0800ebc9 	.word	0x0800ebc9
 800ea74:	0800ec09 	.word	0x0800ec09
 800ea78:	0800ec09 	.word	0x0800ec09
 800ea7c:	0800ebd9 	.word	0x0800ebd9
 800ea80:	0800ec09 	.word	0x0800ec09
 800ea84:	0800ebe9 	.word	0x0800ebe9
 800ea88:	0800ec09 	.word	0x0800ec09
 800ea8c:	0800ec09 	.word	0x0800ec09
 800ea90:	0800ec09 	.word	0x0800ec09
 800ea94:	0800ec09 	.word	0x0800ec09
 800ea98:	0800ebf9 	.word	0x0800ebf9
 800ea9c:	0800ec09 	.word	0x0800ec09
 800eaa0:	0800ec09 	.word	0x0800ec09
 800eaa4:	0800ec09 	.word	0x0800ec09
 800eaa8:	0800ec09 	.word	0x0800ec09
 800eaac:	0800ec09 	.word	0x0800ec09
 800eab0:	0800ec09 	.word	0x0800ec09
 800eab4:	0800ec09 	.word	0x0800ec09
 800eab8:	0800ec09 	.word	0x0800ec09
 800eabc:	0800ec09 	.word	0x0800ec09
 800eac0:	0800ec09 	.word	0x0800ec09
 800eac4:	0800ec09 	.word	0x0800ec09
 800eac8:	0800ec09 	.word	0x0800ec09
 800eacc:	0800ec09 	.word	0x0800ec09
 800ead0:	0800ec09 	.word	0x0800ec09
 800ead4:	0800ec09 	.word	0x0800ec09
 800ead8:	0800ec09 	.word	0x0800ec09
 800eadc:	0800ec09 	.word	0x0800ec09
 800eae0:	0800ec09 	.word	0x0800ec09
 800eae4:	0800ec09 	.word	0x0800ec09
 800eae8:	0800ec09 	.word	0x0800ec09
 800eaec:	0800ec09 	.word	0x0800ec09
 800eaf0:	0800ec09 	.word	0x0800ec09
 800eaf4:	0800ec09 	.word	0x0800ec09
 800eaf8:	0800ec09 	.word	0x0800ec09
 800eafc:	0800ec09 	.word	0x0800ec09
 800eb00:	0800ec09 	.word	0x0800ec09
 800eb04:	0800ec09 	.word	0x0800ec09
 800eb08:	0800ec09 	.word	0x0800ec09
 800eb0c:	0800ec09 	.word	0x0800ec09
 800eb10:	0800ec09 	.word	0x0800ec09
 800eb14:	0800ec09 	.word	0x0800ec09
 800eb18:	0800ec09 	.word	0x0800ec09
 800eb1c:	0800ec09 	.word	0x0800ec09
 800eb20:	0800ec09 	.word	0x0800ec09
 800eb24:	0800ec09 	.word	0x0800ec09
 800eb28:	0800ec09 	.word	0x0800ec09
 800eb2c:	0800ec09 	.word	0x0800ec09
 800eb30:	0800ec09 	.word	0x0800ec09
 800eb34:	0800ec09 	.word	0x0800ec09
 800eb38:	0800ec09 	.word	0x0800ec09
 800eb3c:	0800ec09 	.word	0x0800ec09
 800eb40:	0800ec09 	.word	0x0800ec09
 800eb44:	0800eba9 	.word	0x0800eba9
  {
  case SCSI_TEST_UNIT_READY:
    return SCSI_TestUnitReady(pdev, lun, params);
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f000 f866 	bl	800ec20 <SCSI_TestUnitReady>
 800eb54:	4603      	mov	r3, r0
 800eb56:	e05f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_REQUEST_SENSE:
    return SCSI_RequestSense (pdev, lun, params);
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f000 fa04 	bl	800ef6c <SCSI_RequestSense>
 800eb64:	4603      	mov	r3, r0
 800eb66:	e057      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
  case SCSI_INQUIRY:
    return SCSI_Inquiry(pdev, lun, params);
 800eb68:	7afb      	ldrb	r3, [r7, #11]
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f000 f890 	bl	800ec94 <SCSI_Inquiry>
 800eb74:	4603      	mov	r3, r0
 800eb76:	e04f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_START_STOP_UNIT:
    return SCSI_StartStopUnit(pdev, lun, params);
 800eb78:	7afb      	ldrb	r3, [r7, #11]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 fa9d 	bl	800f0be <SCSI_StartStopUnit>
 800eb84:	4603      	mov	r3, r0
 800eb86:	e047      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_ALLOW_MEDIUM_REMOVAL:
    return SCSI_StartStopUnit(pdev, lun, params);
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f000 fa95 	bl	800f0be <SCSI_StartStopUnit>
 800eb94:	4603      	mov	r3, r0
 800eb96:	e03f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE6:
    return SCSI_ModeSense6 (pdev, lun, params);
 800eb98:	7afb      	ldrb	r3, [r7, #11]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f000 f994 	bl	800eecc <SCSI_ModeSense6>
 800eba4:	4603      	mov	r3, r0
 800eba6:	e037      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE10:
    return SCSI_ModeSense10 (pdev, lun, params);
 800eba8:	7afb      	ldrb	r3, [r7, #11]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	4619      	mov	r1, r3
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f000 f9b4 	bl	800ef1c <SCSI_ModeSense10>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	e02f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_FORMAT_CAPACITIES:
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f000 f91f 	bl	800ee02 <SCSI_ReadFormatCapacity>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	e027      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_CAPACITY10:
    return SCSI_ReadCapacity10(pdev, lun, params);
 800ebc8:	7afb      	ldrb	r3, [r7, #11]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f8b0 	bl	800ed34 <SCSI_ReadCapacity10>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	e01f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ10:
    return SCSI_Read10(pdev, lun, params); 
 800ebd8:	7afb      	ldrb	r3, [r7, #11]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	4619      	mov	r1, r3
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 fa82 	bl	800f0e8 <SCSI_Read10>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	e017      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_WRITE10:
    return SCSI_Write10(pdev, lun, params);
 800ebe8:	7afb      	ldrb	r3, [r7, #11]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	4619      	mov	r1, r3
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f000 fb1b 	bl	800f22a <SCSI_Write10>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	e00f      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(pdev, lun, params);
 800ebf8:	7afb      	ldrb	r3, [r7, #11]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 fbd5 	bl	800f3ae <SCSI_Verify10>
 800ec04:	4603      	mov	r3, r0
 800ec06:	e007      	b.n	800ec18 <SCSI_ProcessCmd+0x25c>
    
  default:
    SCSI_SenseCode(pdev, 
 800ec08:	7af9      	ldrb	r1, [r7, #11]
 800ec0a:	2320      	movs	r3, #32
 800ec0c:	2205      	movs	r2, #5
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f000 fa17 	bl	800f042 <SCSI_SenseCode>
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 800ec14:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ec34:	617b      	str	r3, [r7, #20]
    
  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0)
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00a      	beq.n	800ec56 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev,
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ec46:	2320      	movs	r3, #32
 800ec48:	2205      	movs	r2, #5
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 f9f9 	bl	800f042 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	e019      	b.n	800ec8a <SCSI_TestUnitReady+0x6a>
  }  
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	7afa      	ldrb	r2, [r7, #11]
 800ec60:	4610      	mov	r0, r2
 800ec62:	4798      	blx	r3
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00b      	beq.n	800ec82 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev,
 800ec6a:	7af9      	ldrb	r1, [r7, #11]
 800ec6c:	233a      	movs	r3, #58	; 0x3a
 800ec6e:	2202      	movs	r2, #2
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 f9e6 	bl	800f042 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2205      	movs	r2, #5
 800ec7a:	721a      	strb	r2, [r3, #8]
    return -1;
 800ec7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec80:	e003      	b.n	800ec8a <SCSI_TestUnitReady+0x6a>
  } 
  hmsc->bot_data_length = 0;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2200      	movs	r2, #0
 800ec86:	815a      	strh	r2, [r3, #10]
  return 0;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b089      	sub	sp, #36	; 0x24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eca8:	617b      	str	r3, [r7, #20]
  
  if (params[1] & 0x01)/*Evpd is set*/
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	3301      	adds	r3, #1
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d004      	beq.n	800ecc2 <SCSI_Inquiry+0x2e>
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 800ecb8:	4b1d      	ldr	r3, [pc, #116]	; (800ed30 <SCSI_Inquiry+0x9c>)
 800ecba:	61fb      	str	r3, [r7, #28]
    len = LENGTH_INQUIRY_PAGE00;
 800ecbc:	2307      	movs	r3, #7
 800ecbe:	837b      	strh	r3, [r7, #26]
 800ecc0:	e01b      	b.n	800ecfa <SCSI_Inquiry+0x66>
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ecc8:	69d9      	ldr	r1, [r3, #28]
 800ecca:	7afa      	ldrb	r2, [r7, #11]
 800eccc:	4613      	mov	r3, r2
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	440b      	add	r3, r1
 800ecd6:	61fb      	str	r3, [r7, #28]
    len = pPage[4] + 5;
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	3305      	adds	r3, #5
 800ece2:	837b      	strh	r3, [r7, #26]
    
    if (params[4] <= len)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3304      	adds	r3, #4
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	8b7a      	ldrh	r2, [r7, #26]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d303      	bcc.n	800ecfa <SCSI_Inquiry+0x66>
    {
      len = params[4];
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	837b      	strh	r3, [r7, #26]
    }
  }
  hmsc->bot_data_length = len;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	8b7a      	ldrh	r2, [r7, #26]
 800ecfe:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 800ed00:	e00b      	b.n	800ed1a <SCSI_Inquiry+0x86>
  {
    len--;
 800ed02:	8b7b      	ldrh	r3, [r7, #26]
 800ed04:	3b01      	subs	r3, #1
 800ed06:	837b      	strh	r3, [r7, #26]
    hmsc->bot_data[len] = pPage[len];
 800ed08:	8b7b      	ldrh	r3, [r7, #26]
 800ed0a:	8b7a      	ldrh	r2, [r7, #26]
 800ed0c:	69f9      	ldr	r1, [r7, #28]
 800ed0e:	440a      	add	r2, r1
 800ed10:	7811      	ldrb	r1, [r2, #0]
 800ed12:	697a      	ldr	r2, [r7, #20]
 800ed14:	4413      	add	r3, r2
 800ed16:	460a      	mov	r2, r1
 800ed18:	731a      	strb	r2, [r3, #12]
  while (len) 
 800ed1a:	8b7b      	ldrh	r3, [r7, #26]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1f0      	bne.n	800ed02 <SCSI_Inquiry+0x6e>
  }
  return 0;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3724      	adds	r7, #36	; 0x24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop
 800ed30:	0802ee68 	.word	0x0802ee68

0800ed34 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ed48:	617b      	str	r3, [r7, #20]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800ed5e:	7af8      	ldrb	r0, [r7, #11]
 800ed60:	4798      	blx	r3
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d008      	beq.n	800ed7a <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev,
 800ed68:	7af9      	ldrb	r1, [r7, #11]
 800ed6a:	233a      	movs	r3, #58	; 0x3a
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 f967 	bl	800f042 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 800ed74:	f04f 33ff 	mov.w	r3, #4294967295
 800ed78:	e03f      	b.n	800edfa <SCSI_ReadCapacity10+0xc6>
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800ed80:	3b01      	subs	r3, #1
 800ed82:	0e1b      	lsrs	r3, r3, #24
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800ed90:	3b01      	subs	r3, #1
 800ed92:	0c1b      	lsrs	r3, r3, #16
 800ed94:	b2da      	uxtb	r2, r3
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800eda0:	3b01      	subs	r3, #1
 800eda2:	0a1b      	lsrs	r3, r3, #8
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	3b01      	subs	r3, #1
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	73da      	strb	r2, [r3, #15]
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800edc0:	161b      	asrs	r3, r3, #24
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800edce:	141b      	asrs	r3, r3, #16
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	b29b      	uxth	r3, r3
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800edec:	b2da      	uxtb	r2, r3
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data_length = 8;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2208      	movs	r2, #8
 800edf6:	815a      	strh	r2, [r3, #10]
    return 0;
 800edf8:	2300      	movs	r3, #0
  }
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b088      	sub	sp, #32
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	60f8      	str	r0, [r7, #12]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	607a      	str	r2, [r7, #4]
 800ee0e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ee16:	61bb      	str	r3, [r7, #24]
  
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 800ee18:	2300      	movs	r3, #0
 800ee1a:	83fb      	strh	r3, [r7, #30]
 800ee1c:	e007      	b.n	800ee2e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0;
 800ee1e:	8bfb      	ldrh	r3, [r7, #30]
 800ee20:	69ba      	ldr	r2, [r7, #24]
 800ee22:	4413      	add	r3, r2
 800ee24:	2200      	movs	r2, #0
 800ee26:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < 12 ; i++) 
 800ee28:	8bfb      	ldrh	r3, [r7, #30]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	83fb      	strh	r3, [r7, #30]
 800ee2e:	8bfb      	ldrh	r3, [r7, #30]
 800ee30:	2b0b      	cmp	r3, #11
 800ee32:	d9f4      	bls.n	800ee1e <SCSI_ReadFormatCapacity+0x1c>
  }
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f107 0216 	add.w	r2, r7, #22
 800ee40:	f107 0110 	add.w	r1, r7, #16
 800ee44:	7af8      	ldrb	r0, [r7, #11]
 800ee46:	4798      	blx	r3
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d008      	beq.n	800ee60 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev,
 800ee4e:	7af9      	ldrb	r1, [r7, #11]
 800ee50:	233a      	movs	r3, #58	; 0x3a
 800ee52:	2202      	movs	r2, #2
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f000 f8f4 	bl	800f042 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 800ee5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5e:	e030      	b.n	800eec2 <SCSI_ReadFormatCapacity+0xc0>
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	2208      	movs	r2, #8
 800ee64:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	0e1b      	lsrs	r3, r3, #24
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	0c1b      	lsrs	r3, r3, #16
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	0a1b      	lsrs	r3, r3, #8
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data[8] = 0x02;
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	2202      	movs	r2, #2
 800ee9a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800ee9c:	8afb      	ldrh	r3, [r7, #22]
 800ee9e:	141b      	asrs	r3, r3, #16
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800eea6:	8afb      	ldrh	r3, [r7, #22]
 800eea8:	0a1b      	lsrs	r3, r3, #8
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800eeb2:	8afb      	ldrh	r3, [r7, #22]
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	75da      	strb	r2, [r3, #23]
    
    hmsc->bot_data_length = 12;
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	220c      	movs	r2, #12
 800eebe:	815a      	strh	r2, [r3, #10]
    return 0;
 800eec0:	2300      	movs	r3, #0
  }
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3720      	adds	r7, #32
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
	...

0800eecc <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800eecc:	b480      	push	{r7}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	460b      	mov	r3, r1
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eee0:	613b      	str	r3, [r7, #16]
  uint16_t len = 8 ;
 800eee2:	2308      	movs	r3, #8
 800eee4:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	8afa      	ldrh	r2, [r7, #22]
 800eeea:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 800eeec:	e00a      	b.n	800ef04 <SCSI_ModeSense6+0x38>
  {
    len--;
 800eeee:	8afb      	ldrh	r3, [r7, #22]
 800eef0:	3b01      	subs	r3, #1
 800eef2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800eef4:	8afb      	ldrh	r3, [r7, #22]
 800eef6:	8afa      	ldrh	r2, [r7, #22]
 800eef8:	4907      	ldr	r1, [pc, #28]	; (800ef18 <SCSI_ModeSense6+0x4c>)
 800eefa:	5c89      	ldrb	r1, [r1, r2]
 800eefc:	693a      	ldr	r2, [r7, #16]
 800eefe:	4413      	add	r3, r2
 800ef00:	460a      	mov	r2, r1
 800ef02:	731a      	strb	r2, [r3, #12]
  while (len) 
 800ef04:	8afb      	ldrh	r3, [r7, #22]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1f1      	bne.n	800eeee <SCSI_ModeSense6+0x22>
  }
  return 0;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	371c      	adds	r7, #28
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr
 800ef18:	0802ee70 	.word	0x0802ee70

0800ef1c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	460b      	mov	r3, r1
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8;
 800ef2a:	2308      	movs	r3, #8
 800ef2c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ef34:	613b      	str	r3, [r7, #16]
  
  hmsc->bot_data_length = len;
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	8afa      	ldrh	r2, [r7, #22]
 800ef3a:	815a      	strh	r2, [r3, #10]

  while (len) 
 800ef3c:	e00a      	b.n	800ef54 <SCSI_ModeSense10+0x38>
  {
    len--;
 800ef3e:	8afb      	ldrh	r3, [r7, #22]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800ef44:	8afb      	ldrh	r3, [r7, #22]
 800ef46:	8afa      	ldrh	r2, [r7, #22]
 800ef48:	4907      	ldr	r1, [pc, #28]	; (800ef68 <SCSI_ModeSense10+0x4c>)
 800ef4a:	5c89      	ldrb	r1, [r1, r2]
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	4413      	add	r3, r2
 800ef50:	460a      	mov	r2, r1
 800ef52:	731a      	strb	r2, [r3, #12]
  while (len) 
 800ef54:	8afb      	ldrh	r3, [r7, #22]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1f1      	bne.n	800ef3e <SCSI_ModeSense10+0x22>
  }
  return 0;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	371c      	adds	r7, #28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	0802ee78 	.word	0x0802ee78

0800ef6c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b087      	sub	sp, #28
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	460b      	mov	r3, r1
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ef80:	613b      	str	r3, [r7, #16]
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800ef82:	2300      	movs	r3, #0
 800ef84:	75fb      	strb	r3, [r7, #23]
 800ef86:	e007      	b.n	800ef98 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0;
 800ef88:	7dfb      	ldrb	r3, [r7, #23]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	2200      	movs	r2, #0
 800ef90:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800ef92:	7dfb      	ldrb	r3, [r7, #23]
 800ef94:	3301      	adds	r3, #1
 800ef96:	75fb      	strb	r3, [r7, #23]
 800ef98:	7dfb      	ldrb	r3, [r7, #23]
 800ef9a:	2b11      	cmp	r3, #17
 800ef9c:	d9f4      	bls.n	800ef88 <SCSI_RequestSense+0x1c>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2270      	movs	r2, #112	; 0x70
 800efa2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	220c      	movs	r2, #12
 800efa8:	74da      	strb	r2, [r3, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d02e      	beq.n	800f018 <SCSI_RequestSense+0xac>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	3347      	adds	r3, #71	; 0x47
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	4413      	add	r3, r2
 800efc8:	791a      	ldrb	r2, [r3, #4]
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	3347      	adds	r3, #71	; 0x47
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	4413      	add	r3, r2
 800efdc:	7a5a      	ldrb	r2, [r3, #9]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	3347      	adds	r3, #71	; 0x47
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	4413      	add	r3, r2
 800eff0:	7a1a      	ldrb	r2, [r3, #8]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800effc:	3301      	adds	r3, #1
 800effe:	b2da      	uxtb	r2, r3
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d103      	bne.n	800f018 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0;
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	2212      	movs	r2, #18
 800f01c:	815a      	strh	r2, [r3, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	3304      	adds	r3, #4
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b12      	cmp	r3, #18
 800f026:	d805      	bhi.n	800f034 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3304      	adds	r3, #4
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	b29a      	uxth	r2, r3
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	371c      	adds	r7, #28
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr

0800f042 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f042:	b480      	push	{r7}
 800f044:	b085      	sub	sp, #20
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
 800f04a:	4608      	mov	r0, r1
 800f04c:	4611      	mov	r1, r2
 800f04e:	461a      	mov	r2, r3
 800f050:	4603      	mov	r3, r0
 800f052:	70fb      	strb	r3, [r7, #3]
 800f054:	460b      	mov	r3, r1
 800f056:	70bb      	strb	r3, [r7, #2]
 800f058:	4613      	mov	r3, r2
 800f05a:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f062:	60fb      	str	r3, [r7, #12]
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	3347      	adds	r3, #71	; 0x47
 800f06e:	00db      	lsls	r3, r3, #3
 800f070:	4413      	add	r3, r2
 800f072:	78ba      	ldrb	r2, [r7, #2]
 800f074:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f07c:	4618      	mov	r0, r3
 800f07e:	787b      	ldrb	r3, [r7, #1]
 800f080:	021b      	lsls	r3, r3, #8
 800f082:	4619      	mov	r1, r3
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	f100 0347 	add.w	r3, r0, #71	; 0x47
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	4413      	add	r3, r2
 800f08e:	6099      	str	r1, [r3, #8]
  hmsc->scsi_sense_tail++;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f096:	3301      	adds	r3, #1
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f0a6:	2b04      	cmp	r3, #4
 800f0a8:	d103      	bne.n	800f0b2 <SCSI_SenseCode+0x70>
  {
    hmsc->scsi_sense_tail = 0;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800f0b2:	bf00      	nop
 800f0b4:	3714      	adds	r7, #20
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b087      	sub	sp, #28
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	607a      	str	r2, [r7, #4]
 800f0ca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0d2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	815a      	strh	r2, [r3, #10]
  return 0;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	371c      	adds	r7, #28
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0fc:	617b      	str	r3, [r7, #20]
  
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	7a1b      	ldrb	r3, [r3, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f040 8083 	bne.w	800f20e <SCSI_Read10+0x126>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f10e:	b25b      	sxtb	r3, r3
 800f110:	2b00      	cmp	r3, #0
 800f112:	db0a      	blt.n	800f12a <SCSI_Read10+0x42>
    {
      SCSI_SenseCode(pdev,
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f11a:	2320      	movs	r3, #32
 800f11c:	2205      	movs	r2, #5
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff ff8f 	bl	800f042 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	e07b      	b.n	800f222 <SCSI_Read10+0x13a>
    }    
    
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	7afa      	ldrb	r2, [r7, #11]
 800f134:	4610      	mov	r0, r2
 800f136:	4798      	blx	r3
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d008      	beq.n	800f150 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev,
 800f13e:	7af9      	ldrb	r1, [r7, #11]
 800f140:	233a      	movs	r3, #58	; 0x3a
 800f142:	2202      	movs	r2, #2
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f7ff ff7c 	bl	800f042 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 800f14a:	f04f 33ff 	mov.w	r3, #4294967295
 800f14e:	e068      	b.n	800f222 <SCSI_Read10+0x13a>
    } 
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3302      	adds	r3, #2
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	3303      	adds	r3, #3
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f160:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	3304      	adds	r3, #4
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 800f16a:	4313      	orrs	r3, r2
          params[5];
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	3205      	adds	r2, #5
 800f170:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 800f172:	4313      	orrs	r3, r2
 800f174:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3307      	adds	r3, #7
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	021b      	lsls	r3, r3, #8
      params[8];  
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	3208      	adds	r2, #8
 800f188:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800f18a:	4313      	orrs	r3, r2
 800f18c:	461a      	mov	r2, r3
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    
    
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	7af9      	ldrb	r1, [r7, #11]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 f936 	bl	800f416 <SCSI_CheckAddressRange>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	da02      	bge.n	800f1b6 <SCSI_Read10+0xce>
    {
      return -1; /* error */
 800f1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b4:	e035      	b.n	800f222 <SCSI_Read10+0x13a>
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	721a      	strb	r2, [r3, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f1c8:	fb02 f203 	mul.w	r2, r2, r3
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f1de:	fb02 f203 	mul.w	r2, r2, r3
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d00a      	beq.n	800f20e <SCSI_Read10+0x126>
    {
      SCSI_SenseCode(pdev,
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f1fe:	2320      	movs	r3, #32
 800f200:	2205      	movs	r2, #5
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff ff1d 	bl	800f042 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 800f208:	f04f 33ff 	mov.w	r3, #4294967295
 800f20c:	e009      	b.n	800f222 <SCSI_Read10+0x13a>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f214:	815a      	strh	r2, [r3, #10]
  
  return SCSI_ProcessRead(pdev, lun);
 800f216:	7afb      	ldrb	r3, [r7, #11]
 800f218:	4619      	mov	r1, r3
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f000 f91f 	bl	800f45e <SCSI_ProcessRead>
 800f220:	4603      	mov	r3, r0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b086      	sub	sp, #24
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	460b      	mov	r3, r1
 800f234:	607a      	str	r2, [r7, #4]
 800f236:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f23e:	617b      	str	r3, [r7, #20]
  
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	7a1b      	ldrb	r3, [r3, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f040 80a8 	bne.w	800f39a <SCSI_Write10+0x170>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f250:	b25b      	sxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	da0a      	bge.n	800f26c <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev,
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f25c:	2320      	movs	r3, #32
 800f25e:	2205      	movs	r2, #5
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f7ff feee 	bl	800f042 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 800f266:	f04f 33ff 	mov.w	r3, #4294967295
 800f26a:	e09c      	b.n	800f3a6 <SCSI_Write10+0x17c>
    }
    
    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	7afa      	ldrb	r2, [r7, #11]
 800f276:	4610      	mov	r0, r2
 800f278:	4798      	blx	r3
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d008      	beq.n	800f292 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev,
 800f280:	7af9      	ldrb	r1, [r7, #11]
 800f282:	233a      	movs	r3, #58	; 0x3a
 800f284:	2202      	movs	r2, #2
 800f286:	68f8      	ldr	r0, [r7, #12]
 800f288:	f7ff fedb 	bl	800f042 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e089      	b.n	800f3a6 <SCSI_Write10+0x17c>
    } 
    
    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	7afa      	ldrb	r2, [r7, #11]
 800f29c:	4610      	mov	r0, r2
 800f29e:	4798      	blx	r3
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d008      	beq.n	800f2b8 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev,
 800f2a6:	7af9      	ldrb	r1, [r7, #11]
 800f2a8:	2327      	movs	r3, #39	; 0x27
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7ff fec8 	bl	800f042 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     WRITE_PROTECTED);
      return -1;
 800f2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b6:	e076      	b.n	800f3a6 <SCSI_Write10+0x17c>
    } 
    
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3302      	adds	r3, #2
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3303      	adds	r3, #3
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f2c8:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 800f2d2:	4313      	orrs	r3, r2
          params[5];
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	3205      	adds	r2, #5
 800f2d8:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3307      	adds	r3, #7
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	021b      	lsls	r3, r3, #8
      params[8];  
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	3208      	adds	r2, #8
 800f2f0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev,
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              lun,
                              hmsc->scsi_blk_addr,
                              hmsc->scsi_blk_len) < 0)
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 800f308:	b29b      	uxth	r3, r3
 800f30a:	7af9      	ldrb	r1, [r7, #11]
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f000 f882 	bl	800f416 <SCSI_CheckAddressRange>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	da02      	bge.n	800f31e <SCSI_Write10+0xf4>
    {
      return -1; /* error */      
 800f318:	f04f 33ff 	mov.w	r3, #4294967295
 800f31c:	e043      	b.n	800f3a6 <SCSI_Write10+0x17c>
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f32a:	fb02 f203 	mul.w	r2, r2, r3
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800f340:	fb02 f203 	mul.w	r2, r2, r3
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f356:	429a      	cmp	r2, r3
 800f358:	d00a      	beq.n	800f370 <SCSI_Write10+0x146>
    {
      SCSI_SenseCode(pdev,
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f360:	2320      	movs	r3, #32
 800f362:	2205      	movs	r2, #5
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7ff fe6c 	bl	800f042 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 800f36a:	f04f 33ff 	mov.w	r3, #4294967295
 800f36e:	e01a      	b.n	800f3a6 <SCSI_Write10+0x17c>
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	2201      	movs	r2, #1
 800f374:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      hmsc->bot_data, 
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f103 020c 	add.w	r2, r3, #12
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f386:	bf28      	it	cs
 800f388:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	2101      	movs	r1, #1
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f006 f85b 	bl	801544c <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800f396:	2300      	movs	r3, #0
 800f398:	e005      	b.n	800f3a6 <SCSI_Write10+0x17c>
    return SCSI_ProcessWrite(pdev, lun);
 800f39a:	7afb      	ldrb	r3, [r7, #11]
 800f39c:	4619      	mov	r1, r3
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f000 f8c3 	bl	800f52a <SCSI_ProcessWrite>
 800f3a4:	4603      	mov	r3, r0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3718      	adds	r7, #24
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b086      	sub	sp, #24
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	60f8      	str	r0, [r7, #12]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	607a      	str	r2, [r7, #4]
 800f3ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f3c2:	617b      	str	r3, [r7, #20]
  
  if ((params[1]& 0x02) == 0x02) 
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	f003 0302 	and.w	r3, r3, #2
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d008      	beq.n	800f3e4 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode (pdev,
 800f3d2:	7af9      	ldrb	r1, [r7, #11]
 800f3d4:	2324      	movs	r3, #36	; 0x24
 800f3d6:	2205      	movs	r2, #5
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7ff fe32 	bl	800f042 <SCSI_SenseCode>
                    lun, 
                    ILLEGAL_REQUEST, 
                    INVALID_FIELED_IN_COMMAND);
    return -1; /* Error, Verify Mode Not supported*/
 800f3de:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e2:	e014      	b.n	800f40e <SCSI_Verify10+0x60>
  }
  
  if(SCSI_CheckAddressRange(pdev,
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                            lun, 
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
  if(SCSI_CheckAddressRange(pdev,
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	7af9      	ldrb	r1, [r7, #11]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 f80e 	bl	800f416 <SCSI_CheckAddressRange>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	da02      	bge.n	800f406 <SCSI_Verify10+0x58>
  {
    return -1; /* error */      
 800f400:	f04f 33ff 	mov.w	r3, #4294967295
 800f404:	e003      	b.n	800f40e <SCSI_Verify10+0x60>
  }
  hmsc->bot_data_length = 0;
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2200      	movs	r2, #0
 800f40a:	815a      	strh	r2, [r3, #10]
  return 0;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3718      	adds	r7, #24
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b086      	sub	sp, #24
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	461a      	mov	r2, r3
 800f422:	460b      	mov	r3, r1
 800f424:	72fb      	strb	r3, [r7, #11]
 800f426:	4613      	mov	r3, r2
 800f428:	813b      	strh	r3, [r7, #8]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f430:	617b      	str	r3, [r7, #20]
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800f432:	893a      	ldrh	r2, [r7, #8]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	441a      	add	r2, r3
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f43e:	429a      	cmp	r2, r3
 800f440:	d908      	bls.n	800f454 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev,
 800f442:	7af9      	ldrb	r1, [r7, #11]
 800f444:	2321      	movs	r3, #33	; 0x21
 800f446:	2205      	movs	r2, #5
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fdfa 	bl	800f042 <SCSI_SenseCode>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
 800f44e:	f04f 33ff 	mov.w	r3, #4294967295
 800f452:	e000      	b.n	800f456 <SCSI_CheckAddressRange+0x40>
  }
  return 0;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800f45e:	b590      	push	{r4, r7, lr}
 800f460:	b085      	sub	sp, #20
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	460b      	mov	r3, r1
 800f468:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f470:	60fb      	str	r3, [r7, #12]
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f47c:	bf28      	it	cs
 800f47e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f482:	60bb      	str	r3, [r7, #8]
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f48a:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data, 
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800f49e:	fbb3 f2f2 	udiv	r2, r3, r2
                              len / hmsc->scsi_blk_size) < 0)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	78f8      	ldrb	r0, [r7, #3]
 800f4b4:	47a0      	blx	r4
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	da08      	bge.n	800f4ce <SCSI_ProcessRead+0x70>
  {
    
    SCSI_SenseCode(pdev,
 800f4bc:	78f9      	ldrb	r1, [r7, #3]
 800f4be:	2311      	movs	r3, #17
 800f4c0:	2204      	movs	r2, #4
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7ff fdbd 	bl	800f042 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   UNRECOVERED_READ_ERROR);
    return -1; 
 800f4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4cc:	e029      	b.n	800f522 <SCSI_ProcessRead+0xc4>
  }
  
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR,
             hmsc->bot_data,
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f103 020c 	add.w	r2, r3, #12
  USBD_LL_Transmit (pdev, 
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	2181      	movs	r1, #129	; 0x81
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f005 ff7c 	bl	80153d8 <USBD_LL_Transmit>
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	441a      	add	r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	1ad2      	subs	r2, r2, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	1ad2      	subs	r2, r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f516:	2b00      	cmp	r3, #0
 800f518:	d102      	bne.n	800f520 <SCSI_ProcessRead+0xc2>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2203      	movs	r2, #3
 800f51e:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3714      	adds	r7, #20
 800f526:	46bd      	mov	sp, r7
 800f528:	bd90      	pop	{r4, r7, pc}

0800f52a <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800f52a:	b590      	push	{r4, r7, lr}
 800f52c:	b085      	sub	sp, #20
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	460b      	mov	r3, r1
 800f534:	70fb      	strb	r3, [r7, #3]
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f53c:	60fb      	str	r3, [r7, #12]
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f548:	bf28      	it	cs
 800f54a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f54e:	60bb      	str	r3, [r7, #8]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f556:	695c      	ldr	r4, [r3, #20]
                              hmsc->bot_data, 
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800f56a:	fbb3 f2f2 	udiv	r2, r3, r2
                              len / hmsc->scsi_blk_size) < 0)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f574:	4618      	mov	r0, r3
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	78f8      	ldrb	r0, [r7, #3]
 800f580:	47a0      	blx	r4
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	da08      	bge.n	800f59a <SCSI_ProcessWrite+0x70>
  {
    SCSI_SenseCode(pdev,
 800f588:	78f9      	ldrb	r1, [r7, #3]
 800f58a:	2303      	movs	r3, #3
 800f58c:	2204      	movs	r2, #4
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff fd57 	bl	800f042 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   WRITE_FAULT);     
    return -1; 
 800f594:	f04f 33ff 	mov.w	r3, #4294967295
 800f598:	e032      	b.n	800f600 <SCSI_ProcessWrite+0xd6>
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	441a      	add	r2, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	1ad2      	subs	r2, r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	1ad2      	subs	r2, r2, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d104      	bne.n	800f5de <SCSI_ProcessWrite+0xb4>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff f970 	bl	800e8bc <MSC_BOT_SendCSW>
 800f5dc:	e00f      	b.n	800f5fe <SCSI_ProcessWrite+0xd4>
  else
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f103 020c 	add.w	r2, r3, #12
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f5ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5ee:	bf28      	it	cs
 800f5f0:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	2101      	movs	r1, #1
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f005 ff27 	bl	801544c <USBD_LL_PrepareReceive>
  }
  
  return 0;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	bd90      	pop	{r4, r7, pc}

0800f608 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	4613      	mov	r3, r2
 800f614:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800f61c:	2302      	movs	r3, #2
 800f61e:	e01a      	b.n	800f656 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f626:	2b00      	cmp	r3, #0
 800f628:	d003      	beq.n	800f632 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2201      	movs	r2, #1
 800f644:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	79fa      	ldrb	r2, [r7, #7]
 800f64c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f005 fcc4 	bl	8014fdc <USBD_LL_Init>
  
  return USBD_OK; 
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f65e:	b480      	push	{r7}
 800f660:	b085      	sub	sp, #20
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d006      	beq.n	800f680 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	683a      	ldr	r2, [r7, #0]
 800f676:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]
 800f67e:	e001      	b.n	800f684 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800f680:	2302      	movs	r3, #2
 800f682:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800f684:	7bfb      	ldrb	r3, [r7, #15]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3714      	adds	r7, #20
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f005 fcf2 	bl	8015084 <USBD_LL_Start>
  
  return USBD_OK;  
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00c      	beq.n	800f6f4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	78fa      	ldrb	r2, [r7, #3]
 800f6e4:	4611      	mov	r1, r2
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	4798      	blx	r3
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	78fa      	ldrb	r2, [r7, #3]
 800f714:	4611      	mov	r1, r2
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	4798      	blx	r3
  return USBD_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	4618      	mov	r0, r3
 800f738:	f000 fdb5 	bl	80102a6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2201      	movs	r2, #1
 800f740:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800f74a:	461a      	mov	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800f758:	f003 031f 	and.w	r3, r3, #31
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d00b      	beq.n	800f778 <USBD_LL_SetupStage+0x54>
 800f760:	2b02      	cmp	r3, #2
 800f762:	d011      	beq.n	800f788 <USBD_LL_SetupStage+0x64>
 800f764:	2b00      	cmp	r3, #0
 800f766:	d117      	bne.n	800f798 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 f9c7 	bl	800fb04 <USBD_StdDevReq>
    break;
 800f776:	e01a      	b.n	800f7ae <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fa0f 	bl	800fba4 <USBD_StdItfReq>
    break;
 800f786:	e012      	b.n	800f7ae <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa3a 	bl	800fc0a <USBD_StdEPReq>
    break;
 800f796:	e00a      	b.n	800f7ae <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800f79e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f005 fd48 	bl	801523c <USBD_LL_StallEP>
    break;
 800f7ac:	bf00      	nop
  }  
  return USBD_OK;  
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800f7c6:	7afb      	ldrb	r3, [r7, #11]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d138      	bne.n	800f83e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f7d2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d142      	bne.n	800f864 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	689a      	ldr	r2, [r3, #8]
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d914      	bls.n	800f814 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	689a      	ldr	r2, [r3, #8]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	1ad2      	subs	r2, r2, r3
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	68da      	ldr	r2, [r3, #12]
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	4293      	cmp	r3, r2
 800f802:	bf28      	it	cs
 800f804:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800f806:	b29b      	uxth	r3, r3
 800f808:	461a      	mov	r2, r3
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 fe21 	bl	8010454 <USBD_CtlContinueRx>
 800f812:	e027      	b.n	800f864 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00a      	beq.n	800f836 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f826:	2b03      	cmp	r3, #3
 800f828:	d105      	bne.n	800f836 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f830:	691b      	ldr	r3, [r3, #16]
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f000 fe1e 	bl	8010478 <USBD_CtlSendStatus>
 800f83c:	e012      	b.n	800f864 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00c      	beq.n	800f864 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800f850:	2b03      	cmp	r3, #3
 800f852:	d107      	bne.n	800f864 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	7afa      	ldrb	r2, [r7, #11]
 800f85e:	4611      	mov	r1, r2
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	4798      	blx	r3
  }  
  return USBD_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b086      	sub	sp, #24
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	460b      	mov	r3, r1
 800f878:	607a      	str	r2, [r7, #4]
 800f87a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800f87c:	7afb      	ldrb	r3, [r7, #11]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d16c      	bne.n	800f95c <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3314      	adds	r3, #20
 800f886:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d157      	bne.n	800f942 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	689a      	ldr	r2, [r3, #8]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d915      	bls.n	800f8ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	689a      	ldr	r2, [r3, #8]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	1ad2      	subs	r2, r2, r3
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	6879      	ldr	r1, [r7, #4]
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f000 fdba 	bl	8010430 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800f8bc:	2300      	movs	r3, #0
 800f8be:	2200      	movs	r2, #0
 800f8c0:	2100      	movs	r1, #0
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f005 fdc2 	bl	801544c <USBD_LL_PrepareReceive>
 800f8c8:	e03b      	b.n	800f942 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	68d2      	ldr	r2, [r2, #12]
 800f8d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8d6:	fb02 f201 	mul.w	r2, r2, r1
 800f8da:	1a9b      	subs	r3, r3, r2
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d11c      	bne.n	800f91a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d316      	bcc.n	800f91a <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	685a      	ldr	r2, [r3, #4]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d20f      	bcs.n	800f91a <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	f000 fd96 	bl	8010430 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800f90c:	2300      	movs	r3, #0
 800f90e:	2200      	movs	r2, #0
 800f910:	2100      	movs	r1, #0
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f005 fd9a 	bl	801544c <USBD_LL_PrepareReceive>
 800f918:	e013      	b.n	800f942 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00a      	beq.n	800f93c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d105      	bne.n	800f93c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f000 fdae 	bl	801049e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d11a      	bne.n	800f982 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f7ff feac 	bl	800f6aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2200      	movs	r2, #0
 800f956:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800f95a:	e012      	b.n	800f982 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00c      	beq.n	800f982 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d107      	bne.n	800f982 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f978:	695b      	ldr	r3, [r3, #20]
 800f97a:	7afa      	ldrb	r2, [r7, #11]
 800f97c:	4611      	mov	r1, r2
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	4798      	blx	r3
  }  
  return USBD_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800f994:	2340      	movs	r3, #64	; 0x40
 800f996:	2200      	movs	r2, #0
 800f998:	2100      	movs	r1, #0
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f005 fba4 	bl	80150e8 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2240      	movs	r2, #64	; 0x40
 800f9a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800f9a8:	2340      	movs	r3, #64	; 0x40
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	2180      	movs	r1, #128	; 0x80
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f005 fb9a 	bl	80150e8 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2240      	movs	r2, #64	; 0x40
 800f9b8:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d009      	beq.n	800f9e0 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	6852      	ldr	r2, [r2, #4]
 800f9d8:	b2d2      	uxtb	r2, r2
 800f9da:	4611      	mov	r1, r2
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	4798      	blx	r3
 
  
  return USBD_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	b083      	sub	sp, #12
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	78fa      	ldrb	r2, [r7, #3]
 800f9fa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2204      	movs	r2, #4
 800fa22:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b082      	sub	sp, #8
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d10b      	bne.n	800fa80 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa6e:	69db      	ldr	r3, [r3, #28]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d005      	beq.n	800fa80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa7a:	69db      	ldr	r3, [r3, #28]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	460b      	mov	r3, r1
 800fa94:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	370c      	adds	r7, #12
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b083      	sub	sp, #12
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	6852      	ldr	r2, [r2, #4]
 800faf0:	b2d2      	uxtb	r2, r2
 800faf2:	4611      	mov	r1, r2
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	4798      	blx	r3
   
  return USBD_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
	...

0800fb04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	785b      	ldrb	r3, [r3, #1]
 800fb16:	2b09      	cmp	r3, #9
 800fb18:	d839      	bhi.n	800fb8e <USBD_StdDevReq+0x8a>
 800fb1a:	a201      	add	r2, pc, #4	; (adr r2, 800fb20 <USBD_StdDevReq+0x1c>)
 800fb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb20:	0800fb71 	.word	0x0800fb71
 800fb24:	0800fb85 	.word	0x0800fb85
 800fb28:	0800fb8f 	.word	0x0800fb8f
 800fb2c:	0800fb7b 	.word	0x0800fb7b
 800fb30:	0800fb8f 	.word	0x0800fb8f
 800fb34:	0800fb53 	.word	0x0800fb53
 800fb38:	0800fb49 	.word	0x0800fb49
 800fb3c:	0800fb8f 	.word	0x0800fb8f
 800fb40:	0800fb67 	.word	0x0800fb67
 800fb44:	0800fb5d 	.word	0x0800fb5d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f936 	bl	800fdbc <USBD_GetDescriptor>
    break;
 800fb50:	e022      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fa41 	bl	800ffdc <USBD_SetAddress>
    break;
 800fb5a:	e01d      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 fa7a 	bl	8010058 <USBD_SetConfig>
    break;
 800fb64:	e018      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fafd 	bl	8010168 <USBD_GetConfig>
    break;
 800fb6e:	e013      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fb2a 	bl	80101cc <USBD_GetStatus>
    break;
 800fb78:	e00e      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fb4f 	bl	8010220 <USBD_SetFeature>
    break;
 800fb82:	e009      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fb65 	bl	8010256 <USBD_ClrFeature>
    break;
 800fb8c:	e004      	b.n	800fb98 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fbc5 	bl	8010320 <USBD_CtlError>
    break;
 800fb96:	bf00      	nop
  }
  
  return ret;
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop

0800fba4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800fbb8:	2b03      	cmp	r3, #3
 800fbba:	d11b      	bne.n	800fbf4 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	889b      	ldrh	r3, [r3, #4]
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d811      	bhi.n	800fbea <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	88db      	ldrh	r3, [r3, #6]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d110      	bne.n	800fbfe <USBD_StdItfReq+0x5a>
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10d      	bne.n	800fbfe <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fc48 	bl	8010478 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800fbe8:	e009      	b.n	800fbfe <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800fbea:	6839      	ldr	r1, [r7, #0]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 fb97 	bl	8010320 <USBD_CtlError>
    break;
 800fbf2:	e004      	b.n	800fbfe <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fb92 	bl	8010320 <USBD_CtlError>
    break;
 800fbfc:	e000      	b.n	800fc00 <USBD_StdItfReq+0x5c>
    break;
 800fbfe:	bf00      	nop
  }
  return USBD_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b084      	sub	sp, #16
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
 800fc12:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800fc14:	2300      	movs	r3, #0
 800fc16:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	889b      	ldrh	r3, [r3, #4]
 800fc1c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc26:	2b20      	cmp	r3, #32
 800fc28:	d108      	bne.n	800fc3c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	4798      	blx	r3
    
    return USBD_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e0ba      	b.n	800fdb2 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	785b      	ldrb	r3, [r3, #1]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d039      	beq.n	800fcb8 <USBD_StdEPReq+0xae>
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d002      	beq.n	800fc4e <USBD_StdEPReq+0x44>
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d06b      	beq.n	800fd24 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800fc4c:	e0b0      	b.n	800fdb0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d002      	beq.n	800fc5e <USBD_StdEPReq+0x54>
 800fc58:	2b03      	cmp	r3, #3
 800fc5a:	d00c      	beq.n	800fc76 <USBD_StdEPReq+0x6c>
 800fc5c:	e025      	b.n	800fcaa <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d027      	beq.n	800fcb4 <USBD_StdEPReq+0xaa>
 800fc64:	7bbb      	ldrb	r3, [r7, #14]
 800fc66:	2b80      	cmp	r3, #128	; 0x80
 800fc68:	d024      	beq.n	800fcb4 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800fc6a:	7bbb      	ldrb	r3, [r7, #14]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f005 fae4 	bl	801523c <USBD_LL_StallEP>
      break;	
 800fc74:	e01e      	b.n	800fcb4 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	885b      	ldrh	r3, [r3, #2]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d10a      	bne.n	800fc94 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800fc7e:	7bbb      	ldrb	r3, [r7, #14]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d007      	beq.n	800fc94 <USBD_StdEPReq+0x8a>
 800fc84:	7bbb      	ldrb	r3, [r7, #14]
 800fc86:	2b80      	cmp	r3, #128	; 0x80
 800fc88:	d004      	beq.n	800fc94 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800fc8a:	7bbb      	ldrb	r3, [r7, #14]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f005 fad4 	bl	801523c <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fbe8 	bl	8010478 <USBD_CtlSendStatus>
      break;
 800fca8:	e005      	b.n	800fcb6 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800fcaa:	6839      	ldr	r1, [r7, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fb37 	bl	8010320 <USBD_CtlError>
      break;    
 800fcb2:	e000      	b.n	800fcb6 <USBD_StdEPReq+0xac>
      break;	
 800fcb4:	bf00      	nop
    break;
 800fcb6:	e07b      	b.n	800fdb0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800fcbe:	2b02      	cmp	r3, #2
 800fcc0:	d002      	beq.n	800fcc8 <USBD_StdEPReq+0xbe>
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d00c      	beq.n	800fce0 <USBD_StdEPReq+0xd6>
 800fcc6:	e024      	b.n	800fd12 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d026      	beq.n	800fd1c <USBD_StdEPReq+0x112>
 800fcce:	7bbb      	ldrb	r3, [r7, #14]
 800fcd0:	2b80      	cmp	r3, #128	; 0x80
 800fcd2:	d023      	beq.n	800fd1c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800fcd4:	7bbb      	ldrb	r3, [r7, #14]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f005 faaf 	bl	801523c <USBD_LL_StallEP>
      break;	
 800fcde:	e01d      	b.n	800fd1c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	885b      	ldrh	r3, [r3, #2]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d11b      	bne.n	800fd20 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
 800fcea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d00b      	beq.n	800fd0a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800fcf2:	7bbb      	ldrb	r3, [r7, #14]
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f005 fad6 	bl	80152a8 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 fbb4 	bl	8010478 <USBD_CtlSendStatus>
      break;
 800fd10:	e006      	b.n	800fd20 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fb03 	bl	8010320 <USBD_CtlError>
      break;    
 800fd1a:	e002      	b.n	800fd22 <USBD_StdEPReq+0x118>
      break;	
 800fd1c:	bf00      	nop
 800fd1e:	e047      	b.n	800fdb0 <USBD_StdEPReq+0x1a6>
      break;
 800fd20:	bf00      	nop
    break;
 800fd22:	e045      	b.n	800fdb0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d002      	beq.n	800fd34 <USBD_StdEPReq+0x12a>
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d00b      	beq.n	800fd4a <USBD_StdEPReq+0x140>
 800fd32:	e036      	b.n	800fda2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800fd34:	7bbb      	ldrb	r3, [r7, #14]
 800fd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d036      	beq.n	800fdac <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800fd3e:	7bbb      	ldrb	r3, [r7, #14]
 800fd40:	4619      	mov	r1, r3
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f005 fa7a 	bl	801523c <USBD_LL_StallEP>
      break;	
 800fd48:	e030      	b.n	800fdac <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800fd4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	da08      	bge.n	800fd64 <USBD_StdEPReq+0x15a>
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd58:	3301      	adds	r3, #1
 800fd5a:	011b      	lsls	r3, r3, #4
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	4413      	add	r3, r2
 800fd60:	3304      	adds	r3, #4
 800fd62:	e007      	b.n	800fd74 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800fd64:	7bbb      	ldrb	r3, [r7, #14]
 800fd66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800fd6a:	3310      	adds	r3, #16
 800fd6c:	011b      	lsls	r3, r3, #4
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	4413      	add	r3, r2
 800fd72:	3304      	adds	r3, #4
 800fd74:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800fd76:	7bbb      	ldrb	r3, [r7, #14]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f005 faca 	bl	8015314 <USBD_LL_IsStallEP>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
 800fd8c:	e002      	b.n	800fd94 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800fd94:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800fd96:	2202      	movs	r2, #2
 800fd98:	4619      	mov	r1, r3
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 fb2c 	bl	80103f8 <USBD_CtlSendData>
      break;
 800fda0:	e005      	b.n	800fdae <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fabb 	bl	8010320 <USBD_CtlError>
      break;
 800fdaa:	e000      	b.n	800fdae <USBD_StdEPReq+0x1a4>
      break;	
 800fdac:	bf00      	nop
    break;
 800fdae:	bf00      	nop
  }
  return ret;
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	885b      	ldrh	r3, [r3, #2]
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	2b0e      	cmp	r3, #14
 800fdd2:	f200 80e5 	bhi.w	800ffa0 <USBD_GetDescriptor+0x1e4>
 800fdd6:	a201      	add	r2, pc, #4	; (adr r2, 800fddc <USBD_GetDescriptor+0x20>)
 800fdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fddc:	0800fe31 	.word	0x0800fe31
 800fde0:	0800fe49 	.word	0x0800fe49
 800fde4:	0800fe89 	.word	0x0800fe89
 800fde8:	0800ffa1 	.word	0x0800ffa1
 800fdec:	0800ffa1 	.word	0x0800ffa1
 800fdf0:	0800ff4d 	.word	0x0800ff4d
 800fdf4:	0800ff73 	.word	0x0800ff73
 800fdf8:	0800ffa1 	.word	0x0800ffa1
 800fdfc:	0800ffa1 	.word	0x0800ffa1
 800fe00:	0800ffa1 	.word	0x0800ffa1
 800fe04:	0800ffa1 	.word	0x0800ffa1
 800fe08:	0800ffa1 	.word	0x0800ffa1
 800fe0c:	0800ffa1 	.word	0x0800ffa1
 800fe10:	0800ffa1 	.word	0x0800ffa1
 800fe14:	0800fe19 	.word	0x0800fe19
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fe1e:	69db      	ldr	r3, [r3, #28]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	7c12      	ldrb	r2, [r2, #16]
 800fe24:	f107 010a 	add.w	r1, r7, #10
 800fe28:	4610      	mov	r0, r2
 800fe2a:	4798      	blx	r3
 800fe2c:	60f8      	str	r0, [r7, #12]
    break;
 800fe2e:	e0bc      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	7c12      	ldrb	r2, [r2, #16]
 800fe3c:	f107 010a 	add.w	r1, r7, #10
 800fe40:	4610      	mov	r0, r2
 800fe42:	4798      	blx	r3
 800fe44:	60f8      	str	r0, [r7, #12]
    break;
 800fe46:	e0b0      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	7c1b      	ldrb	r3, [r3, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10d      	bne.n	800fe6c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe58:	f107 020a 	add.w	r2, r7, #10
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
 800fe60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3301      	adds	r3, #1
 800fe66:	2202      	movs	r2, #2
 800fe68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fe6a:	e09e      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe74:	f107 020a 	add.w	r2, r7, #10
 800fe78:	4610      	mov	r0, r2
 800fe7a:	4798      	blx	r3
 800fe7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	3301      	adds	r3, #1
 800fe82:	2202      	movs	r2, #2
 800fe84:	701a      	strb	r2, [r3, #0]
    break;
 800fe86:	e090      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	885b      	ldrh	r3, [r3, #2]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	2b05      	cmp	r3, #5
 800fe90:	d856      	bhi.n	800ff40 <USBD_GetDescriptor+0x184>
 800fe92:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <USBD_GetDescriptor+0xdc>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800feb1 	.word	0x0800feb1
 800fe9c:	0800fec9 	.word	0x0800fec9
 800fea0:	0800fee1 	.word	0x0800fee1
 800fea4:	0800fef9 	.word	0x0800fef9
 800fea8:	0800ff11 	.word	0x0800ff11
 800feac:	0800ff29 	.word	0x0800ff29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	7c12      	ldrb	r2, [r2, #16]
 800febc:	f107 010a 	add.w	r1, r7, #10
 800fec0:	4610      	mov	r0, r2
 800fec2:	4798      	blx	r3
 800fec4:	60f8      	str	r0, [r7, #12]
      break;
 800fec6:	e040      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	7c12      	ldrb	r2, [r2, #16]
 800fed4:	f107 010a 	add.w	r1, r7, #10
 800fed8:	4610      	mov	r0, r2
 800feda:	4798      	blx	r3
 800fedc:	60f8      	str	r0, [r7, #12]
      break;
 800fede:	e034      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	7c12      	ldrb	r2, [r2, #16]
 800feec:	f107 010a 	add.w	r1, r7, #10
 800fef0:	4610      	mov	r0, r2
 800fef2:	4798      	blx	r3
 800fef4:	60f8      	str	r0, [r7, #12]
      break;
 800fef6:	e028      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fefe:	691b      	ldr	r3, [r3, #16]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	7c12      	ldrb	r2, [r2, #16]
 800ff04:	f107 010a 	add.w	r1, r7, #10
 800ff08:	4610      	mov	r0, r2
 800ff0a:	4798      	blx	r3
 800ff0c:	60f8      	str	r0, [r7, #12]
      break;
 800ff0e:	e01c      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff16:	695b      	ldr	r3, [r3, #20]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	7c12      	ldrb	r2, [r2, #16]
 800ff1c:	f107 010a 	add.w	r1, r7, #10
 800ff20:	4610      	mov	r0, r2
 800ff22:	4798      	blx	r3
 800ff24:	60f8      	str	r0, [r7, #12]
      break;
 800ff26:	e010      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	7c12      	ldrb	r2, [r2, #16]
 800ff34:	f107 010a 	add.w	r1, r7, #10
 800ff38:	4610      	mov	r0, r2
 800ff3a:	4798      	blx	r3
 800ff3c:	60f8      	str	r0, [r7, #12]
      break;
 800ff3e:	e004      	b.n	800ff4a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f9ec 	bl	8010320 <USBD_CtlError>
      return;
 800ff48:	e044      	b.n	800ffd4 <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 800ff4a:	e02e      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7c1b      	ldrb	r3, [r3, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d109      	bne.n	800ff68 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff5c:	f107 020a 	add.w	r2, r7, #10
 800ff60:	4610      	mov	r0, r2
 800ff62:	4798      	blx	r3
 800ff64:	60f8      	str	r0, [r7, #12]
      break;
 800ff66:	e020      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f9d8 	bl	8010320 <USBD_CtlError>
      return;
 800ff70:	e030      	b.n	800ffd4 <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	7c1b      	ldrb	r3, [r3, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d10d      	bne.n	800ff96 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff82:	f107 020a 	add.w	r2, r7, #10
 800ff86:	4610      	mov	r0, r2
 800ff88:	4798      	blx	r3
 800ff8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	2207      	movs	r2, #7
 800ff92:	701a      	strb	r2, [r3, #0]
      break; 
 800ff94:	e009      	b.n	800ffaa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f9c1 	bl	8010320 <USBD_CtlError>
      return;
 800ff9e:	e019      	b.n	800ffd4 <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 f9bc 	bl	8010320 <USBD_CtlError>
    return;
 800ffa8:	e014      	b.n	800ffd4 <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800ffaa:	897b      	ldrh	r3, [r7, #10]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d011      	beq.n	800ffd4 <USBD_GetDescriptor+0x218>
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	88db      	ldrh	r3, [r3, #6]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00d      	beq.n	800ffd4 <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	88da      	ldrh	r2, [r3, #6]
 800ffbc:	897b      	ldrh	r3, [r7, #10]
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	bf28      	it	cs
 800ffc2:	4613      	movcs	r3, r2
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800ffc8:	897b      	ldrh	r3, [r7, #10]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	68f9      	ldr	r1, [r7, #12]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fa12 	bl	80103f8 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop

0800ffdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	889b      	ldrh	r3, [r3, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d12c      	bne.n	8010048 <USBD_SetAddress+0x6c>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d128      	bne.n	8010048 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	885b      	ldrh	r3, [r3, #2]
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010000:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8010008:	2b03      	cmp	r3, #3
 801000a:	d104      	bne.n	8010016 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 f986 	bl	8010320 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8010014:	e01c      	b.n	8010050 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7bfa      	ldrb	r2, [r7, #15]
 801001a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f005 f9a2 	bl	801536c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 fa25 	bl	8010478 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d004      	beq.n	801003e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2202      	movs	r2, #2
 8010038:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 801003c:	e008      	b.n	8010050 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8010046:	e003      	b.n	8010050 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f968 	bl	8010320 <USBD_CtlError>
  } 
}
 8010050:	bf00      	nop
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	885b      	ldrh	r3, [r3, #2]
 8010066:	b2da      	uxtb	r2, r3
 8010068:	4b3e      	ldr	r3, [pc, #248]	; (8010164 <USBD_SetConfig+0x10c>)
 801006a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 801006c:	4b3d      	ldr	r3, [pc, #244]	; (8010164 <USBD_SetConfig+0x10c>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d904      	bls.n	801007e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 f952 	bl	8010320 <USBD_CtlError>
 801007c:	e06f      	b.n	801015e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8010084:	2b02      	cmp	r3, #2
 8010086:	d002      	beq.n	801008e <USBD_SetConfig+0x36>
 8010088:	2b03      	cmp	r3, #3
 801008a:	d023      	beq.n	80100d4 <USBD_SetConfig+0x7c>
 801008c:	e062      	b.n	8010154 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 801008e:	4b35      	ldr	r3, [pc, #212]	; (8010164 <USBD_SetConfig+0x10c>)
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d01a      	beq.n	80100cc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8010096:	4b33      	ldr	r3, [pc, #204]	; (8010164 <USBD_SetConfig+0x10c>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2203      	movs	r2, #3
 80100a4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80100a8:	4b2e      	ldr	r3, [pc, #184]	; (8010164 <USBD_SetConfig+0x10c>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f7ff fb06 	bl	800f6c0 <USBD_SetClassConfig>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	d104      	bne.n	80100c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 f92f 	bl	8010320 <USBD_CtlError>
          return;
 80100c2:	e04c      	b.n	801015e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f9d7 	bl	8010478 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80100ca:	e048      	b.n	801015e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 f9d3 	bl	8010478 <USBD_CtlSendStatus>
      break;
 80100d2:	e044      	b.n	801015e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80100d4:	4b23      	ldr	r3, [pc, #140]	; (8010164 <USBD_SetConfig+0x10c>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d112      	bne.n	8010102 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2202      	movs	r2, #2
 80100e0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80100e4:	4b1f      	ldr	r3, [pc, #124]	; (8010164 <USBD_SetConfig+0x10c>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	461a      	mov	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80100ee:	4b1d      	ldr	r3, [pc, #116]	; (8010164 <USBD_SetConfig+0x10c>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	4619      	mov	r1, r3
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fb02 	bl	800f6fe <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f9bc 	bl	8010478 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010100:	e02d      	b.n	801015e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8010102:	4b18      	ldr	r3, [pc, #96]	; (8010164 <USBD_SetConfig+0x10c>)
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	429a      	cmp	r2, r3
 801010e:	d01d      	beq.n	801014c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7ff faf0 	bl	800f6fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801011e:	4b11      	ldr	r3, [pc, #68]	; (8010164 <USBD_SetConfig+0x10c>)
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	461a      	mov	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8010128:	4b0e      	ldr	r3, [pc, #56]	; (8010164 <USBD_SetConfig+0x10c>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	4619      	mov	r1, r3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff fac6 	bl	800f6c0 <USBD_SetClassConfig>
 8010134:	4603      	mov	r3, r0
 8010136:	2b02      	cmp	r3, #2
 8010138:	d104      	bne.n	8010144 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 801013a:	6839      	ldr	r1, [r7, #0]
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f8ef 	bl	8010320 <USBD_CtlError>
          return;
 8010142:	e00c      	b.n	801015e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 f997 	bl	8010478 <USBD_CtlSendStatus>
      break;
 801014a:	e008      	b.n	801015e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 f993 	bl	8010478 <USBD_CtlSendStatus>
      break;
 8010152:	e004      	b.n	801015e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f8e2 	bl	8010320 <USBD_CtlError>
      break;
 801015c:	bf00      	nop
    }
  }
}
 801015e:	3708      	adds	r7, #8
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	2000f8c0 	.word	0x2000f8c0

08010168 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	88db      	ldrh	r3, [r3, #6]
 8010176:	2b01      	cmp	r3, #1
 8010178:	d004      	beq.n	8010184 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 801017a:	6839      	ldr	r1, [r7, #0]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f8cf 	bl	8010320 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010182:	e01f      	b.n	80101c4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801018a:	2b02      	cmp	r3, #2
 801018c:	d002      	beq.n	8010194 <USBD_GetConfig+0x2c>
 801018e:	2b03      	cmp	r3, #3
 8010190:	d00b      	beq.n	80101aa <USBD_GetConfig+0x42>
 8010192:	e012      	b.n	80101ba <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 801019e:	2201      	movs	r2, #1
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f928 	bl	80103f8 <USBD_CtlSendData>
      break;
 80101a8:	e00c      	b.n	80101c4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80101ae:	2201      	movs	r2, #1
 80101b0:	4619      	mov	r1, r3
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f920 	bl	80103f8 <USBD_CtlSendData>
      break;
 80101b8:	e004      	b.n	80101c4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80101ba:	6839      	ldr	r1, [r7, #0]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f8af 	bl	8010320 <USBD_CtlError>
      break;
 80101c2:	bf00      	nop
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80101dc:	3b02      	subs	r3, #2
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d815      	bhi.n	801020e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2201      	movs	r2, #1
 80101e6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d005      	beq.n	80101fe <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	f043 0202 	orr.w	r2, r3, #2
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8010202:	2202      	movs	r2, #2
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f8f6 	bl	80103f8 <USBD_CtlSendData>
                      2);
    break;
 801020c:	e004      	b.n	8010218 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f885 	bl	8010320 <USBD_CtlError>
    break;
 8010216:	bf00      	nop
  }
}
 8010218:	bf00      	nop
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	885b      	ldrh	r3, [r3, #2]
 801022e:	2b01      	cmp	r3, #1
 8010230:	d10d      	bne.n	801024e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2201      	movs	r2, #1
 8010236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 f915 	bl	8010478 <USBD_CtlSendStatus>
  }

}
 801024e:	bf00      	nop
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b082      	sub	sp, #8
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8010266:	3b02      	subs	r3, #2
 8010268:	2b01      	cmp	r3, #1
 801026a:	d812      	bhi.n	8010292 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	885b      	ldrh	r3, [r3, #2]
 8010270:	2b01      	cmp	r3, #1
 8010272:	d113      	bne.n	801029c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f8f4 	bl	8010478 <USBD_CtlSendStatus>
    }
    break;
 8010290:	e004      	b.n	801029c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8010292:	6839      	ldr	r1, [r7, #0]
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f843 	bl	8010320 <USBD_CtlError>
    break;
 801029a:	e000      	b.n	801029e <USBD_ClrFeature+0x48>
    break;
 801029c:	bf00      	nop
  }
}
 801029e:	bf00      	nop
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80102a6:	b480      	push	{r7}
 80102a8:	b083      	sub	sp, #12
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	781a      	ldrb	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	785a      	ldrb	r2, [r3, #1]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	3302      	adds	r3, #2
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	3303      	adds	r3, #3
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	4413      	add	r3, r2
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	3304      	adds	r3, #4
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	3305      	adds	r3, #5
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	021b      	lsls	r3, r3, #8
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	4413      	add	r3, r2
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	3306      	adds	r3, #6
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	b29a      	uxth	r2, r3
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	3307      	adds	r3, #7
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	b29b      	uxth	r3, r3
 8010308:	021b      	lsls	r3, r3, #8
 801030a:	b29b      	uxth	r3, r3
 801030c:	4413      	add	r3, r2
 801030e:	b29a      	uxth	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	80da      	strh	r2, [r3, #6]

}
 8010314:	bf00      	nop
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 801032a:	2180      	movs	r1, #128	; 0x80
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f004 ff85 	bl	801523c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8010332:	2100      	movs	r1, #0
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f004 ff81 	bl	801523c <USBD_LL_StallEP>
}
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b086      	sub	sp, #24
 8010346:	af00      	add	r7, sp, #0
 8010348:	60f8      	str	r0, [r7, #12]
 801034a:	60b9      	str	r1, [r7, #8]
 801034c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 801034e:	2300      	movs	r3, #0
 8010350:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d033      	beq.n	80103c0 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8010358:	68f8      	ldr	r0, [r7, #12]
 801035a:	f000 f835 	bl	80103c8 <USBD_GetLen>
 801035e:	4603      	mov	r3, r0
 8010360:	3301      	adds	r3, #1
 8010362:	b29b      	uxth	r3, r3
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	b29a      	uxth	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 801036c:	7dfb      	ldrb	r3, [r7, #23]
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	75fa      	strb	r2, [r7, #23]
 8010372:	461a      	mov	r2, r3
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	4413      	add	r3, r2
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	8812      	ldrh	r2, [r2, #0]
 801037c:	b2d2      	uxtb	r2, r2
 801037e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8010380:	7dfb      	ldrb	r3, [r7, #23]
 8010382:	1c5a      	adds	r2, r3, #1
 8010384:	75fa      	strb	r2, [r7, #23]
 8010386:	461a      	mov	r2, r3
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	4413      	add	r3, r2
 801038c:	2203      	movs	r2, #3
 801038e:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8010390:	e012      	b.n	80103b8 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8010392:	7dfb      	ldrb	r3, [r7, #23]
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	75fa      	strb	r2, [r7, #23]
 8010398:	461a      	mov	r2, r3
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	441a      	add	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	1c59      	adds	r1, r3, #1
 80103a2:	60f9      	str	r1, [r7, #12]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80103a8:	7dfb      	ldrb	r3, [r7, #23]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	75fa      	strb	r2, [r7, #23]
 80103ae:	461a      	mov	r2, r3
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	4413      	add	r3, r2
 80103b4:	2200      	movs	r2, #0
 80103b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1e8      	bne.n	8010392 <USBD_GetString+0x50>
    }
  } 
}
 80103c0:	bf00      	nop
 80103c2:	3718      	adds	r7, #24
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80103d4:	e005      	b.n	80103e2 <USBD_GetLen+0x1a>
    {
        len++;
 80103d6:	7bfb      	ldrb	r3, [r7, #15]
 80103d8:	3301      	adds	r3, #1
 80103da:	73fb      	strb	r3, [r7, #15]
        buf++;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3301      	adds	r3, #1
 80103e0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1f5      	bne.n	80103d6 <USBD_GetLen+0xe>
    }

    return len;
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3714      	adds	r7, #20
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	4613      	mov	r3, r2
 8010404:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2202      	movs	r2, #2
 801040a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 801040e:	88fa      	ldrh	r2, [r7, #6]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8010414:	88fa      	ldrh	r2, [r7, #6]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 801041a:	88fb      	ldrh	r3, [r7, #6]
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	2100      	movs	r1, #0
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f004 ffd9 	bl	80153d8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	4613      	mov	r3, r2
 801043c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 801043e:	88fb      	ldrh	r3, [r7, #6]
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	2100      	movs	r1, #0
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f004 ffc7 	bl	80153d8 <USBD_LL_Transmit>
  
  return USBD_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	4613      	mov	r3, r2
 8010460:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8010462:	88fb      	ldrh	r3, [r7, #6]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	2100      	movs	r1, #0
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f004 ffef 	bl	801544c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3710      	adds	r7, #16
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2204      	movs	r2, #4
 8010484:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8010488:	2300      	movs	r3, #0
 801048a:	2200      	movs	r2, #0
 801048c:	2100      	movs	r1, #0
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f004 ffa2 	bl	80153d8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2205      	movs	r2, #5
 80104aa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80104ae:	2300      	movs	r3, #0
 80104b0:	2200      	movs	r2, #0
 80104b2:	2100      	movs	r1, #0
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f004 ffc9 	bl	801544c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80104ba:	2300      	movs	r3, #0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <GRAPHICS_MainTask>:

#include "DIALOG.h"
extern  WM_HWIN CreateFramewin(void);


void GRAPHICS_MainTask(void) {
 80104c4:	b580      	push	{r7, lr}
 80104c6:	af00      	add	r7, sp, #0
  /* 1- Create a FrameWin using GUIBuilder */
	CreateWindowMain();
 80104c8:	f000 fa00 	bl	80108cc <CreateWindowMain>
	//GUI_DispStringAt("Hello world!", (LCD_GetXSize()-150)/2, (LCD_GetYSize()-20)/2);

/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
 80104cc:	2064      	movs	r0, #100	; 0x64
 80104ce:	f012 fe37 	bl	8023140 <GUI_Delay>
 80104d2:	e7fb      	b.n	80104cc <GRAPHICS_MainTask+0x8>

080104d4 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  int                    NCode;
  int                    Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b1d      	cmp	r3, #29
 80104e2:	d003      	beq.n	80104ec <_cbDialog+0x18>
 80104e4:	2b26      	cmp	r3, #38	; 0x26
 80104e6:	f000 8116 	beq.w	8010716 <_cbDialog+0x242>
 80104ea:	e1e5      	b.n	80108b8 <_cbDialog+0x3e4>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'WindowMain'
    //
    hItem = pMsg->hWin;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	61fb      	str	r3, [r7, #28]
    WINDOW_SetBkColor(hItem, GUI_MAKE_COLOR(0x00000000));
 80104f2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80104f6:	69f8      	ldr	r0, [r7, #28]
 80104f8:	f005 fa38 	bl	801596c <WINDOW_SetBkColor>
    //
    // Initialization of 'ButtonStart'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	f640 0101 	movw	r1, #2049	; 0x801
 8010504:	4618      	mov	r0, r3
 8010506:	f00b fc17 	bl	801bd38 <WM_GetDialogItem>
 801050a:	61f8      	str	r0, [r7, #28]
    BUTTON_SetText(hItem, "Start");
 801050c:	49bd      	ldr	r1, [pc, #756]	; (8010804 <_cbDialog+0x330>)
 801050e:	69f8      	ldr	r0, [r7, #28]
 8010510:	f00a fb2a 	bl	801ab68 <BUTTON_SetText>
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010514:	49bc      	ldr	r1, [pc, #752]	; (8010808 <_cbDialog+0x334>)
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	f00a fb58 	bl	801abcc <BUTTON_SetFont>
    //
    // Initialization of 'TextHeaderMain'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	f640 0104 	movw	r1, #2052	; 0x804
 8010524:	4618      	mov	r0, r3
 8010526:	f00b fc07 	bl	801bd38 <WM_GetDialogItem>
 801052a:	61f8      	str	r0, [r7, #28]
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 801052c:	49b7      	ldr	r1, [pc, #732]	; (801080c <_cbDialog+0x338>)
 801052e:	69f8      	ldr	r0, [r7, #28]
 8010530:	f007 fe2c 	bl	801818c <TEXT_SetFont>
    TEXT_SetText(hItem, "STM32 Loadcell measument system");
 8010534:	49b6      	ldr	r1, [pc, #728]	; (8010810 <_cbDialog+0x33c>)
 8010536:	69f8      	ldr	r0, [r7, #28]
 8010538:	f007 fe44 	bl	80181c4 <TEXT_SetText>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 801053c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8010540:	69f8      	ldr	r0, [r7, #28]
 8010542:	f007 fe8b 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8010546:	210e      	movs	r1, #14
 8010548:	69f8      	ldr	r0, [r7, #28]
 801054a:	f007 fe6d 	bl	8018228 <TEXT_SetTextAlign>
    //
    // Initialization of 'SpinboxPoints'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_0);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	f640 0105 	movw	r1, #2053	; 0x805
 8010556:	4618      	mov	r0, r3
 8010558:	f00b fbee 	bl	801bd38 <WM_GetDialogItem>
 801055c:	61f8      	str	r0, [r7, #28]
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 801055e:	49aa      	ldr	r1, [pc, #680]	; (8010808 <_cbDialog+0x334>)
 8010560:	69f8      	ldr	r0, [r7, #28]
 8010562:	f008 fe8f 	bl	8019284 <SPINBOX_SetFont>
    //
    // Initialization of 'SpinboxTextPoints'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	f640 0106 	movw	r1, #2054	; 0x806
 801056e:	4618      	mov	r0, r3
 8010570:	f00b fbe2 	bl	801bd38 <WM_GetDialogItem>
 8010574:	61f8      	str	r0, [r7, #28]
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 8010576:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 801057a:	69f8      	ldr	r0, [r7, #28]
 801057c:	f007 fe6e 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Points");
 8010580:	49a4      	ldr	r1, [pc, #656]	; (8010814 <_cbDialog+0x340>)
 8010582:	69f8      	ldr	r0, [r7, #28]
 8010584:	f007 fe1e 	bl	80181c4 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010588:	499f      	ldr	r1, [pc, #636]	; (8010808 <_cbDialog+0x334>)
 801058a:	69f8      	ldr	r0, [r7, #28]
 801058c:	f007 fdfe 	bl	801818c <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8010590:	210c      	movs	r1, #12
 8010592:	69f8      	ldr	r0, [r7, #28]
 8010594:	f007 fe48 	bl	8018228 <TEXT_SetTextAlign>
    //
    // Initialization of 'SpinboxTextPeriod'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	f640 0107 	movw	r1, #2055	; 0x807
 80105a0:	4618      	mov	r0, r3
 80105a2:	f00b fbc9 	bl	801bd38 <WM_GetDialogItem>
 80105a6:	61f8      	str	r0, [r7, #28]
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 80105a8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80105ac:	69f8      	ldr	r0, [r7, #28]
 80105ae:	f007 fe55 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetText(hItem, "Period [us]");
 80105b2:	4999      	ldr	r1, [pc, #612]	; (8010818 <_cbDialog+0x344>)
 80105b4:	69f8      	ldr	r0, [r7, #28]
 80105b6:	f007 fe05 	bl	80181c4 <TEXT_SetText>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 80105ba:	4993      	ldr	r1, [pc, #588]	; (8010808 <_cbDialog+0x334>)
 80105bc:	69f8      	ldr	r0, [r7, #28]
 80105be:	f007 fde5 	bl	801818c <TEXT_SetFont>
    //
    // Initialization of 'TextCopyrightMain'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f640 0109 	movw	r1, #2057	; 0x809
 80105ca:	4618      	mov	r0, r3
 80105cc:	f00b fbb4 	bl	801bd38 <WM_GetDialogItem>
 80105d0:	61f8      	str	r0, [r7, #28]
    TEXT_SetFont(hItem, GUI_FONT_13_ASCII);
 80105d2:	4992      	ldr	r1, [pc, #584]	; (801081c <_cbDialog+0x348>)
 80105d4:	69f8      	ldr	r0, [r7, #28]
 80105d6:	f007 fdd9 	bl	801818c <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 80105da:	210e      	movs	r1, #14
 80105dc:	69f8      	ldr	r0, [r7, #28]
 80105de:	f007 fe23 	bl	8018228 <TEXT_SetTextAlign>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 80105e2:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80105e6:	69f8      	ldr	r0, [r7, #28]
 80105e8:	f007 fe38 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetText(hItem, "(c) Tapio Valli 2018");
 80105ec:	498c      	ldr	r1, [pc, #560]	; (8010820 <_cbDialog+0x34c>)
 80105ee:	69f8      	ldr	r0, [r7, #28]
 80105f0:	f007 fde8 	bl	80181c4 <TEXT_SetText>
    //
    // Initialization of 'SpinboxPeriod'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_1);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	f640 010a 	movw	r1, #2058	; 0x80a
 80105fc:	4618      	mov	r0, r3
 80105fe:	f00b fb9b 	bl	801bd38 <WM_GetDialogItem>
 8010602:	61f8      	str	r0, [r7, #28]
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010604:	4980      	ldr	r1, [pc, #512]	; (8010808 <_cbDialog+0x334>)
 8010606:	69f8      	ldr	r0, [r7, #28]
 8010608:	f008 fe3c 	bl	8019284 <SPINBOX_SetFont>
    //
    // Initialization of 'SpinboxAvg'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_2);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	f640 010b 	movw	r1, #2059	; 0x80b
 8010614:	4618      	mov	r0, r3
 8010616:	f00b fb8f 	bl	801bd38 <WM_GetDialogItem>
 801061a:	61f8      	str	r0, [r7, #28]
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 801061c:	497a      	ldr	r1, [pc, #488]	; (8010808 <_cbDialog+0x334>)
 801061e:	69f8      	ldr	r0, [r7, #28]
 8010620:	f008 fe30 	bl	8019284 <SPINBOX_SetFont>
    //
    // Initialization of 'SpinboxTextAvg'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	f640 010c 	movw	r1, #2060	; 0x80c
 801062c:	4618      	mov	r0, r3
 801062e:	f00b fb83 	bl	801bd38 <WM_GetDialogItem>
 8010632:	61f8      	str	r0, [r7, #28]
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010634:	4974      	ldr	r1, [pc, #464]	; (8010808 <_cbDialog+0x334>)
 8010636:	69f8      	ldr	r0, [r7, #28]
 8010638:	f007 fda8 	bl	801818c <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 801063c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8010640:	69f8      	ldr	r0, [r7, #28]
 8010642:	f007 fe0b 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8010646:	210c      	movs	r1, #12
 8010648:	69f8      	ldr	r0, [r7, #28]
 801064a:	f007 fded 	bl	8018228 <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Average");
 801064e:	4975      	ldr	r1, [pc, #468]	; (8010824 <_cbDialog+0x350>)
 8010650:	69f8      	ldr	r0, [r7, #28]
 8010652:	f007 fdb7 	bl	80181c4 <TEXT_SetText>
    //
    // Initialization of 'SpinboxCount'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_3);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	f640 010d 	movw	r1, #2061	; 0x80d
 801065e:	4618      	mov	r0, r3
 8010660:	f00b fb6a 	bl	801bd38 <WM_GetDialogItem>
 8010664:	61f8      	str	r0, [r7, #28]
    SPINBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010666:	4968      	ldr	r1, [pc, #416]	; (8010808 <_cbDialog+0x334>)
 8010668:	69f8      	ldr	r0, [r7, #28]
 801066a:	f008 fe0b 	bl	8019284 <SPINBOX_SetFont>
    //
    // Initialization of 'SpinboxTextCount'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	f640 010e 	movw	r1, #2062	; 0x80e
 8010676:	4618      	mov	r0, r3
 8010678:	f00b fb5e 	bl	801bd38 <WM_GetDialogItem>
 801067c:	61f8      	str	r0, [r7, #28]
    TEXT_SetTextColor(hItem, GUI_MAKE_COLOR(0x0000FFFF));
 801067e:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8010682:	69f8      	ldr	r0, [r7, #28]
 8010684:	f007 fdea 	bl	801825c <TEXT_SetTextColor>
    TEXT_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010688:	495f      	ldr	r1, [pc, #380]	; (8010808 <_cbDialog+0x334>)
 801068a:	69f8      	ldr	r0, [r7, #28]
 801068c:	f007 fd7e 	bl	801818c <TEXT_SetFont>
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8010690:	210c      	movs	r1, #12
 8010692:	69f8      	ldr	r0, [r7, #28]
 8010694:	f007 fdc8 	bl	8018228 <TEXT_SetTextAlign>
    TEXT_SetText(hItem, "Count [ms]");
 8010698:	4963      	ldr	r1, [pc, #396]	; (8010828 <_cbDialog+0x354>)
 801069a:	69f8      	ldr	r0, [r7, #28]
 801069c:	f007 fd92 	bl	80181c4 <TEXT_SetText>
    //
    // Initialization of 'TreeviewFiles'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TREEVIEW_0);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	f640 010f 	movw	r1, #2063	; 0x80f
 80106a8:	4618      	mov	r0, r3
 80106aa:	f00b fb45 	bl	801bd38 <WM_GetDialogItem>
 80106ae:	61f8      	str	r0, [r7, #28]
    hTreeItemCur = TREEVIEW_GetItem(hItem, 0, TREEVIEW_GET_LAST);
 80106b0:	2201      	movs	r2, #1
 80106b2:	2100      	movs	r1, #0
 80106b4:	69f8      	ldr	r0, [r7, #28]
 80106b6:	f006 fc8b 	bl	8016fd0 <TREEVIEW_GetItem>
 80106ba:	61b8      	str	r0, [r7, #24]
    hTreeItemNew = TREEVIEW_ITEM_Create(TREEVIEW_ITEM_TYPE_NODE, "0", 0);
 80106bc:	2200      	movs	r2, #0
 80106be:	495b      	ldr	r1, [pc, #364]	; (801082c <_cbDialog+0x358>)
 80106c0:	2001      	movs	r0, #1
 80106c2:	f006 fa53 	bl	8016b6c <TREEVIEW_ITEM_Create>
 80106c6:	6178      	str	r0, [r7, #20]
    TREEVIEW_AttachItem(hItem, hTreeItemNew, hTreeItemCur, TREEVIEW_INSERT_BELOW);
 80106c8:	2301      	movs	r3, #1
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	6979      	ldr	r1, [r7, #20]
 80106ce:	69f8      	ldr	r0, [r7, #28]
 80106d0:	f006 fa78 	bl	8016bc4 <TREEVIEW_AttachItem>
    //
    // Initialization of 'ButtonGraph'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80106dc:	4618      	mov	r0, r3
 80106de:	f00b fb2b 	bl	801bd38 <WM_GetDialogItem>
 80106e2:	61f8      	str	r0, [r7, #28]
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 80106e4:	4948      	ldr	r1, [pc, #288]	; (8010808 <_cbDialog+0x334>)
 80106e6:	69f8      	ldr	r0, [r7, #28]
 80106e8:	f00a fa70 	bl	801abcc <BUTTON_SetFont>
    BUTTON_SetText(hItem, "Graph");
 80106ec:	4950      	ldr	r1, [pc, #320]	; (8010830 <_cbDialog+0x35c>)
 80106ee:	69f8      	ldr	r0, [r7, #28]
 80106f0:	f00a fa3a 	bl	801ab68 <BUTTON_SetText>
    //
    // Initialization of 'ButtonUSB'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	f640 0111 	movw	r1, #2065	; 0x811
 80106fc:	4618      	mov	r0, r3
 80106fe:	f00b fb1b 	bl	801bd38 <WM_GetDialogItem>
 8010702:	61f8      	str	r0, [r7, #28]
    BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8010704:	4940      	ldr	r1, [pc, #256]	; (8010808 <_cbDialog+0x334>)
 8010706:	69f8      	ldr	r0, [r7, #28]
 8010708:	f00a fa60 	bl	801abcc <BUTTON_SetFont>
    BUTTON_SetText(hItem, "USB");
 801070c:	4949      	ldr	r1, [pc, #292]	; (8010834 <_cbDialog+0x360>)
 801070e:	69f8      	ldr	r0, [r7, #28]
 8010710:	f00a fa2a 	bl	801ab68 <BUTTON_SetText>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 8010714:	e0d5      	b.n	80108c2 <_cbDialog+0x3ee>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	4618      	mov	r0, r3
 801071c:	f00b fb98 	bl	801be50 <WM_GetId>
 8010720:	6138      	str	r0, [r7, #16]
    NCode = pMsg->Data.v;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	60fb      	str	r3, [r7, #12]
    switch(Id) {
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 801072e:	2b10      	cmp	r3, #16
 8010730:	f200 80c6 	bhi.w	80108c0 <_cbDialog+0x3ec>
 8010734:	a201      	add	r2, pc, #4	; (adr r2, 801073c <_cbDialog+0x268>)
 8010736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073a:	bf00      	nop
 801073c:	08010781 	.word	0x08010781
 8010740:	080108c1 	.word	0x080108c1
 8010744:	080108c1 	.word	0x080108c1
 8010748:	080108c1 	.word	0x080108c1
 801074c:	0801078f 	.word	0x0801078f
 8010750:	080108c1 	.word	0x080108c1
 8010754:	080108c1 	.word	0x080108c1
 8010758:	080108c1 	.word	0x080108c1
 801075c:	080108c1 	.word	0x080108c1
 8010760:	080107b9 	.word	0x080107b9
 8010764:	080107e1 	.word	0x080107e1
 8010768:	080108c1 	.word	0x080108c1
 801076c:	0801083d 	.word	0x0801083d
 8010770:	080108c1 	.word	0x080108c1
 8010774:	08010865 	.word	0x08010865
 8010778:	08010889 	.word	0x08010889
 801077c:	08010897 	.word	0x08010897
    case ID_BUTTON_0: // Notifications sent by 'ButtonStart'
      switch(NCode) {
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b01      	cmp	r3, #1
 8010784:	d001      	beq.n	801078a <_cbDialog+0x2b6>
 8010786:	2b02      	cmp	r3, #2
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8010788:	e000      	b.n	801078c <_cbDialog+0x2b8>
        break;
 801078a:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 801078c:	e093      	b.n	80108b6 <_cbDialog+0x3e2>
    case ID_SPINBOX_0: // Notifications sent by 'SpinboxPoints'
      switch(NCode) {
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	3b01      	subs	r3, #1
 8010792:	2b04      	cmp	r3, #4
 8010794:	f200 8086 	bhi.w	80108a4 <_cbDialog+0x3d0>
 8010798:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <_cbDialog+0x2cc>)
 801079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079e:	bf00      	nop
 80107a0:	080107b5 	.word	0x080107b5
 80107a4:	080107b5 	.word	0x080107b5
 80107a8:	080107b5 	.word	0x080107b5
 80107ac:	080108a5 	.word	0x080108a5
 80107b0:	080107b5 	.word	0x080107b5
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 80107b4:	bf00      	nop
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 80107b6:	e075      	b.n	80108a4 <_cbDialog+0x3d0>
    case ID_SPINBOX_1: // Notifications sent by 'SpinboxPeriod'
      switch(NCode) {
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	3b01      	subs	r3, #1
 80107bc:	2b04      	cmp	r3, #4
 80107be:	d873      	bhi.n	80108a8 <_cbDialog+0x3d4>
 80107c0:	a201      	add	r2, pc, #4	; (adr r2, 80107c8 <_cbDialog+0x2f4>)
 80107c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c6:	bf00      	nop
 80107c8:	080107dd 	.word	0x080107dd
 80107cc:	080107dd 	.word	0x080107dd
 80107d0:	080107dd 	.word	0x080107dd
 80107d4:	080108a9 	.word	0x080108a9
 80107d8:	080107dd 	.word	0x080107dd
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 80107dc:	bf00      	nop
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 80107de:	e063      	b.n	80108a8 <_cbDialog+0x3d4>
    case ID_SPINBOX_2: // Notifications sent by 'SpinboxAvg'
      switch(NCode) {
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	2b04      	cmp	r3, #4
 80107e6:	d861      	bhi.n	80108ac <_cbDialog+0x3d8>
 80107e8:	a201      	add	r2, pc, #4	; (adr r2, 80107f0 <_cbDialog+0x31c>)
 80107ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ee:	bf00      	nop
 80107f0:	08010839 	.word	0x08010839
 80107f4:	08010839 	.word	0x08010839
 80107f8:	08010839 	.word	0x08010839
 80107fc:	080108ad 	.word	0x080108ad
 8010800:	08010839 	.word	0x08010839
 8010804:	0802b9bc 	.word	0x0802b9bc
 8010808:	080301d4 	.word	0x080301d4
 801080c:	0802f4ac 	.word	0x0802f4ac
 8010810:	0802b9c4 	.word	0x0802b9c4
 8010814:	0802b9e4 	.word	0x0802b9e4
 8010818:	0802b9ec 	.word	0x0802b9ec
 801081c:	08030d54 	.word	0x08030d54
 8010820:	0802b9f8 	.word	0x0802b9f8
 8010824:	0802ba10 	.word	0x0802ba10
 8010828:	0802ba18 	.word	0x0802ba18
 801082c:	0802ba24 	.word	0x0802ba24
 8010830:	0802ba28 	.word	0x0802ba28
 8010834:	0802ba30 	.word	0x0802ba30
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8010838:	bf00      	nop
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 801083a:	e037      	b.n	80108ac <_cbDialog+0x3d8>
    case ID_SPINBOX_3: // Notifications sent by 'SpinboxCount'
      switch(NCode) {
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3b01      	subs	r3, #1
 8010840:	2b04      	cmp	r3, #4
 8010842:	d835      	bhi.n	80108b0 <_cbDialog+0x3dc>
 8010844:	a201      	add	r2, pc, #4	; (adr r2, 801084c <_cbDialog+0x378>)
 8010846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084a:	bf00      	nop
 801084c:	08010861 	.word	0x08010861
 8010850:	08010861 	.word	0x08010861
 8010854:	08010861 	.word	0x08010861
 8010858:	080108b1 	.word	0x080108b1
 801085c:	08010861 	.word	0x08010861
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8010860:	bf00      	nop
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 8010862:	e025      	b.n	80108b0 <_cbDialog+0x3dc>
    case ID_TREEVIEW_0: // Notifications sent by 'TreeviewFiles'
      switch(NCode) {
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3b01      	subs	r3, #1
 8010868:	2b03      	cmp	r3, #3
 801086a:	d823      	bhi.n	80108b4 <_cbDialog+0x3e0>
 801086c:	a201      	add	r2, pc, #4	; (adr r2, 8010874 <_cbDialog+0x3a0>)
 801086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010872:	bf00      	nop
 8010874:	08010885 	.word	0x08010885
 8010878:	08010885 	.word	0x08010885
 801087c:	08010885 	.word	0x08010885
 8010880:	08010885 	.word	0x08010885
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8010884:	bf00      	nop
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 8010886:	e015      	b.n	80108b4 <_cbDialog+0x3e0>
    case ID_BUTTON_1: // Notifications sent by 'ButtonGraph'
      switch(NCode) {
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2b01      	cmp	r3, #1
 801088c:	d001      	beq.n	8010892 <_cbDialog+0x3be>
 801088e:	2b02      	cmp	r3, #2
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8010890:	e000      	b.n	8010894 <_cbDialog+0x3c0>
        break;
 8010892:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 8010894:	e00f      	b.n	80108b6 <_cbDialog+0x3e2>
    case ID_BUTTON_2: // Notifications sent by 'ButtonUSB'
      switch(NCode) {
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b01      	cmp	r3, #1
 801089a:	d001      	beq.n	80108a0 <_cbDialog+0x3cc>
 801089c:	2b02      	cmp	r3, #2
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 801089e:	e000      	b.n	80108a2 <_cbDialog+0x3ce>
        break;
 80108a0:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 80108a2:	e008      	b.n	80108b6 <_cbDialog+0x3e2>
      break;
 80108a4:	bf00      	nop
 80108a6:	e00b      	b.n	80108c0 <_cbDialog+0x3ec>
      break;
 80108a8:	bf00      	nop
 80108aa:	e009      	b.n	80108c0 <_cbDialog+0x3ec>
      break;
 80108ac:	bf00      	nop
 80108ae:	e007      	b.n	80108c0 <_cbDialog+0x3ec>
      break;
 80108b0:	bf00      	nop
 80108b2:	e005      	b.n	80108c0 <_cbDialog+0x3ec>
      break;
 80108b4:	bf00      	nop
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 80108b6:	e003      	b.n	80108c0 <_cbDialog+0x3ec>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f00e fa07 	bl	801eccc <WM_DefaultProc>
    break;
 80108be:	e000      	b.n	80108c2 <_cbDialog+0x3ee>
    break;
 80108c0:	bf00      	nop
  }
}
 80108c2:	bf00      	nop
 80108c4:	3720      	adds	r7, #32
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop

080108cc <CreateWindowMain>:
/*********************************************************************
*
*       CreateWindowMain
*/
WM_HWIN CreateWindowMain(void);
WM_HWIN CreateWindowMain(void) {
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 80108d2:	f00b f9d1 	bl	801bc78 <WM_GetDesktopWindow>
 80108d6:	4602      	mov	r2, r0
 80108d8:	2300      	movs	r3, #0
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	2300      	movs	r3, #0
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	4613      	mov	r3, r2
 80108e2:	4a05      	ldr	r2, [pc, #20]	; (80108f8 <CreateWindowMain+0x2c>)
 80108e4:	210f      	movs	r1, #15
 80108e6:	4805      	ldr	r0, [pc, #20]	; (80108fc <CreateWindowMain+0x30>)
 80108e8:	f009 ff40 	bl	801a76c <GUI_CreateDialogBox>
 80108ec:	6078      	str	r0, [r7, #4]
  return hWin;
 80108ee:	687b      	ldr	r3, [r7, #4]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	080104d5 	.word	0x080104d5
 80108fc:	0802ee80 	.word	0x0802ee80

08010900 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
  return ((int) osKernelSysTick());
 8010904:	f7fb fa06 	bl	800bd14 <osKernelSysTick>
 8010908:	4603      	mov	r3, r0
}
 801090a:	4618      	mov	r0, r3
 801090c:	bd80      	pop	{r7, pc}

0801090e <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b082      	sub	sp, #8
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  osDelay( ms );
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	f7fb fa39 	bl	800bd90 <osDelay>
}
 801091e:	bf00      	nop
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 8010926:	b480      	push	{r7}
 8010928:	af00      	add	r7, sp, #0
}
 801092a:	bf00      	nop
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 801093a:	2300      	movs	r3, #0
 801093c:	607b      	str	r3, [r7, #4]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 801093e:	1d3b      	adds	r3, r7, #4
 8010940:	4618      	mov	r0, r3
 8010942:	f7fb fa39 	bl	800bdb8 <osMutexCreate>
 8010946:	4602      	mov	r2, r0
 8010948:	4b07      	ldr	r3, [pc, #28]	; (8010968 <GUI_X_InitOS+0x34>)
 801094a:	601a      	str	r2, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 801094c:	2300      	movs	r3, #0
 801094e:	603b      	str	r3, [r7, #0]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 8010950:	463b      	mov	r3, r7
 8010952:	2101      	movs	r1, #1
 8010954:	4618      	mov	r0, r3
 8010956:	f7fb fac1 	bl	800bedc <osSemaphoreCreate>
 801095a:	4602      	mov	r2, r0
 801095c:	4b03      	ldr	r3, [pc, #12]	; (801096c <GUI_X_InitOS+0x38>)
 801095e:	601a      	str	r2, [r3, #0]
}
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	2000f8c4 	.word	0x2000f8c4
 801096c:	2000f8c8 	.word	0x2000f8c8

08010970 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
  osMutexRelease(osMutex);
 8010974:	4b03      	ldr	r3, [pc, #12]	; (8010984 <GUI_X_Unlock+0x14>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4618      	mov	r0, r3
 801097a:	f7fb fa79 	bl	800be70 <osMutexRelease>
}
 801097e:	bf00      	nop
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2000f8c4 	.word	0x2000f8c4

08010988 <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
  osMutexWait(osMutex , osWaitForever) ;
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <GUI_X_Lock+0x18>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f04f 31ff 	mov.w	r1, #4294967295
 8010994:	4618      	mov	r0, r3
 8010996:	f7fb fa1b 	bl	800bdd0 <osMutexWait>
}
 801099a:	bf00      	nop
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	2000f8c4 	.word	0x2000f8c4

080109a4 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 80109a4:	b580      	push	{r7, lr}
 80109a6:	af00      	add	r7, sp, #0
  return ((U32) osThreadGetId());
 80109a8:	f7fb f9eb 	bl	800bd82 <osThreadGetId>
 80109ac:	4603      	mov	r3, r0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	bd80      	pop	{r7, pc}
	...

080109b4 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 80109b8:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 80109bc:	4802      	ldr	r0, [pc, #8]	; (80109c8 <GUI_X_Config+0x14>)
 80109be:	f015 f893 	bl	8025ae8 <GUI_ALLOC_AssignMemory>

}
 80109c2:	bf00      	nop
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	2000f8cc 	.word	0x2000f8cc

080109cc <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08e      	sub	sp, #56	; 0x38
 80109d0:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 80109d2:	483c      	ldr	r0, [pc, #240]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109d4:	f7f2 fbf4 	bl	80031c0 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 80109d8:	4b3a      	ldr	r3, [pc, #232]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109da:	4a3b      	ldr	r2, [pc, #236]	; (8010ac8 <MX_LCD_Init+0xfc>)
 80109dc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80109de:	4b39      	ldr	r3, [pc, #228]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80109e4:	4b37      	ldr	r3, [pc, #220]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80109ea:	4b36      	ldr	r3, [pc, #216]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80109f0:	4b34      	ldr	r3, [pc, #208]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80109f6:	4b33      	ldr	r3, [pc, #204]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109f8:	2228      	movs	r2, #40	; 0x28
 80109fa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80109fc:	4b31      	ldr	r3, [pc, #196]	; (8010ac4 <MX_LCD_Init+0xf8>)
 80109fe:	2209      	movs	r2, #9
 8010a00:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8010a02:	4b30      	ldr	r3, [pc, #192]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a04:	2235      	movs	r2, #53	; 0x35
 8010a06:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8010a08:	4b2e      	ldr	r3, [pc, #184]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a0a:	220b      	movs	r2, #11
 8010a0c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8010a0e:	4b2d      	ldr	r3, [pc, #180]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a10:	f240 2215 	movw	r2, #533	; 0x215
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8010a16:	4b2b      	ldr	r3, [pc, #172]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a18:	f240 121b 	movw	r2, #283	; 0x11b
 8010a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8010a1e:	4b29      	ldr	r3, [pc, #164]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a20:	f240 2235 	movw	r2, #565	; 0x235
 8010a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8010a26:	4b27      	ldr	r3, [pc, #156]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a28:	f240 121d 	movw	r2, #285	; 0x11d
 8010a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8010a2e:	4b25      	ldr	r3, [pc, #148]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8010a36:	4b23      	ldr	r3, [pc, #140]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8010a3e:	4b21      	ldr	r3, [pc, #132]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8010a46:	481f      	ldr	r0, [pc, #124]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010a48:	f7f2 fade 	bl	8003008 <HAL_LTDC_Init>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <MX_LCD_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010a52:	2170      	movs	r1, #112	; 0x70
 8010a54:	481d      	ldr	r0, [pc, #116]	; (8010acc <MX_LCD_Init+0x100>)
 8010a56:	f003 fa8b 	bl	8013f70 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8010a5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010a62:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8010a68:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010a6c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8010a72:	23ff      	movs	r3, #255	; 0xff
 8010a74:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8010a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a7e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8010a80:	2305      	movs	r3, #5
 8010a82:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8010a84:	2300      	movs	r3, #0
 8010a86:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8010a96:	2300      	movs	r3, #0
 8010a98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8010aa2:	1d3b      	adds	r3, r7, #4
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4806      	ldr	r0, [pc, #24]	; (8010ac4 <MX_LCD_Init+0xf8>)
 8010aaa:	f7f2 fba1 	bl	80031f0 <HAL_LTDC_ConfigLayer>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d003      	beq.n	8010abc <MX_LCD_Init+0xf0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010ab4:	2184      	movs	r1, #132	; 0x84
 8010ab6:	4805      	ldr	r0, [pc, #20]	; (8010acc <MX_LCD_Init+0x100>)
 8010ab8:	f003 fa5a 	bl	8013f70 <_Error_Handler>
  }

}
 8010abc:	bf00      	nop
 8010abe:	3738      	adds	r7, #56	; 0x38
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2002b3f8 	.word	0x2002b3f8
 8010ac8:	40016800 	.word	0x40016800
 8010acc:	0802ba34 	.word	0x0802ba34

08010ad0 <MX_FMC_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b088      	sub	sp, #32
 8010ad4:	af00      	add	r7, sp, #0
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8010ad6:	4b21      	ldr	r3, [pc, #132]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010ad8:	4a21      	ldr	r2, [pc, #132]	; (8010b60 <MX_FMC_Init+0x90>)
 8010ada:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8010adc:	4b1f      	ldr	r3, [pc, #124]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8010ae2:	4b1e      	ldr	r3, [pc, #120]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8010ae8:	4b1c      	ldr	r3, [pc, #112]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010aea:	2204      	movs	r2, #4
 8010aec:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8010aee:	4b1b      	ldr	r3, [pc, #108]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010af0:	2210      	movs	r2, #16
 8010af2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8010af4:	4b19      	ldr	r3, [pc, #100]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010af6:	2240      	movs	r2, #64	; 0x40
 8010af8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8010afa:	4b18      	ldr	r3, [pc, #96]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b00:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8010b02:	4b16      	ldr	r3, [pc, #88]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8010b08:	4b14      	ldr	r3, [pc, #80]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b0e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8010b10:	4b12      	ldr	r3, [pc, #72]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010b16:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8010b18:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8010b1e:	2302      	movs	r3, #2
 8010b20:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8010b22:	2307      	movs	r3, #7
 8010b24:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8010b26:	2304      	movs	r3, #4
 8010b28:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8010b2a:	2306      	movs	r3, #6
 8010b2c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8010b2e:	2302      	movs	r3, #2
 8010b30:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8010b32:	2302      	movs	r3, #2
 8010b34:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8010b36:	2302      	movs	r3, #2
 8010b38:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8010b3a:	1d3b      	adds	r3, r7, #4
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	4807      	ldr	r0, [pc, #28]	; (8010b5c <MX_FMC_Init+0x8c>)
 8010b40:	f7f5 f97c 	bl	8005e3c <HAL_SDRAM_Init>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <MX_FMC_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010b4a:	21aa      	movs	r1, #170	; 0xaa
 8010b4c:	4805      	ldr	r0, [pc, #20]	; (8010b64 <MX_FMC_Init+0x94>)
 8010b4e:	f003 fa0f 	bl	8013f70 <_Error_Handler>
  }

}
 8010b52:	bf00      	nop
 8010b54:	3720      	adds	r7, #32
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	2002b4e0 	.word	0x2002b4e0
 8010b60:	a0000140 	.word	0xa0000140
 8010b64:	0802ba34 	.word	0x0802ba34

08010b68 <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8010b72:	4b2b      	ldr	r3, [pc, #172]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8010b78:	4b29      	ldr	r3, [pc, #164]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b7a:	2210      	movs	r2, #16
 8010b7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8010b7e:	4b28      	ldr	r3, [pc, #160]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b80:	2201      	movs	r2, #1
 8010b82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8010b84:	4b26      	ldr	r3, [pc, #152]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b86:	2200      	movs	r2, #0
 8010b88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8010b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b8e:	4924      	ldr	r1, [pc, #144]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b90:	4824      	ldr	r0, [pc, #144]	; (8010c24 <MX_SDRAM_InitEx+0xbc>)
 8010b92:	f7f5 fa09 	bl	8005fa8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8010b96:	2001      	movs	r0, #1
 8010b98:	f7f0 ff82 	bl	8001aa0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8010b9c:	4b20      	ldr	r3, [pc, #128]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8010ba2:	4b1f      	ldr	r3, [pc, #124]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010ba4:	2210      	movs	r2, #16
 8010ba6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8010ba8:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010baa:	2201      	movs	r2, #1
 8010bac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8010bae:	4b1c      	ldr	r3, [pc, #112]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8010bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bb8:	4919      	ldr	r1, [pc, #100]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bba:	481a      	ldr	r0, [pc, #104]	; (8010c24 <MX_SDRAM_InitEx+0xbc>)
 8010bbc:	f7f5 f9f4 	bl	8005fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8010bc0:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bc2:	2203      	movs	r2, #3
 8010bc4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8010bc6:	4b16      	ldr	r3, [pc, #88]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bc8:	2210      	movs	r2, #16
 8010bca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8010bcc:	4b14      	ldr	r3, [pc, #80]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bce:	2208      	movs	r2, #8
 8010bd0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8010bd2:	4b13      	ldr	r3, [pc, #76]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8010bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bdc:	4910      	ldr	r1, [pc, #64]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bde:	4811      	ldr	r0, [pc, #68]	; (8010c24 <MX_SDRAM_InitEx+0xbc>)
 8010be0:	f7f5 f9e2 	bl	8005fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8010be4:	f44f 730c 	mov.w	r3, #560	; 0x230
 8010be8:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8010bea:	4b0d      	ldr	r3, [pc, #52]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bec:	2204      	movs	r2, #4
 8010bee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bf2:	2210      	movs	r2, #16
 8010bf4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8010bf6:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4a08      	ldr	r2, [pc, #32]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010c00:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8010c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c06:	4906      	ldr	r1, [pc, #24]	; (8010c20 <MX_SDRAM_InitEx+0xb8>)
 8010c08:	4806      	ldr	r0, [pc, #24]	; (8010c24 <MX_SDRAM_InitEx+0xbc>)
 8010c0a:	f7f5 f9cd 	bl	8005fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8010c0e:	f240 6165 	movw	r1, #1637	; 0x665
 8010c12:	4804      	ldr	r0, [pc, #16]	; (8010c24 <MX_SDRAM_InitEx+0xbc>)
 8010c14:	f7f5 f9f3 	bl	8005ffe <HAL_SDRAM_ProgramRefreshRate>
}
 8010c18:	bf00      	nop
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	2002b0cc 	.word	0x2002b0cc
 8010c24:	2002b4e0 	.word	0x2002b4e0

08010c28 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	af00      	add	r7, sp, #0
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8010c2c:	4b17      	ldr	r3, [pc, #92]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c2e:	4a18      	ldr	r2, [pc, #96]	; (8010c90 <MX_DMA2D_Init+0x68>)
 8010c30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8010c32:	4b16      	ldr	r3, [pc, #88]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8010c38:	4b14      	ldr	r3, [pc, #80]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8010c3e:	4b13      	ldr	r3, [pc, #76]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8010c44:	4b11      	ldr	r3, [pc, #68]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8010c4a:	4b10      	ldr	r3, [pc, #64]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010c50:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8010c56:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c58:	2200      	movs	r2, #0
 8010c5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8010c5c:	480b      	ldr	r0, [pc, #44]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c5e:	f7f1 fc6b 	bl	8002538 <HAL_DMA2D_Init>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d003      	beq.n	8010c70 <MX_DMA2D_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010c68:	21f9      	movs	r1, #249	; 0xf9
 8010c6a:	480a      	ldr	r0, [pc, #40]	; (8010c94 <MX_DMA2D_Init+0x6c>)
 8010c6c:	f003 f980 	bl	8013f70 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8010c70:	2101      	movs	r1, #1
 8010c72:	4806      	ldr	r0, [pc, #24]	; (8010c8c <MX_DMA2D_Init+0x64>)
 8010c74:	f7f1 fdbe 	bl	80027f4 <HAL_DMA2D_ConfigLayer>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d003      	beq.n	8010c86 <MX_DMA2D_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010c7e:	21fe      	movs	r1, #254	; 0xfe
 8010c80:	4804      	ldr	r0, [pc, #16]	; (8010c94 <MX_DMA2D_Init+0x6c>)
 8010c82:	f003 f975 	bl	8013f70 <_Error_Handler>
  }

}
 8010c86:	bf00      	nop
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	2002b4a0 	.word	0x2002b4a0
 8010c90:	4002b000 	.word	0x4002b000
 8010c94:	0802ba34 	.word	0x0802ba34

08010c98 <HAL_LTDC_MspInit>:

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a32      	ldr	r2, [pc, #200]	; (8010d70 <HAL_LTDC_MspInit+0xd8>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d15e      	bne.n	8010d68 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8010caa:	4a32      	ldr	r2, [pc, #200]	; (8010d74 <HAL_LTDC_MspInit+0xdc>)
 8010cac:	4b31      	ldr	r3, [pc, #196]	; (8010d74 <HAL_LTDC_MspInit+0xdc>)
 8010cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <HAL_LTDC_MspInit+0xdc>)
 8010cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cbe:	60bb      	str	r3, [r7, #8]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8010cc2:	2310      	movs	r3, #16
 8010cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8010cd2:	230e      	movs	r3, #14
 8010cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8010cd6:	f107 030c 	add.w	r3, r7, #12
 8010cda:	4619      	mov	r1, r3
 8010cdc:	4826      	ldr	r0, [pc, #152]	; (8010d78 <HAL_LTDC_MspInit+0xe0>)
 8010cde:	f7f1 fec3 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8010ce2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8010ce6:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ce8:	2302      	movs	r3, #2
 8010cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cec:	2300      	movs	r3, #0
 8010cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8010cf4:	230e      	movs	r3, #14
 8010cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8010cf8:	f107 030c 	add.w	r3, r7, #12
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	481f      	ldr	r0, [pc, #124]	; (8010d7c <HAL_LTDC_MspInit+0xe4>)
 8010d00:	f7f1 feb2 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8010d04:	23f7      	movs	r3, #247	; 0xf7
 8010d06:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d08:	2302      	movs	r3, #2
 8010d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d10:	2300      	movs	r3, #0
 8010d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8010d14:	230e      	movs	r3, #14
 8010d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8010d18:	f107 030c 	add.w	r3, r7, #12
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4818      	ldr	r0, [pc, #96]	; (8010d80 <HAL_LTDC_MspInit+0xe8>)
 8010d20:	f7f1 fea2 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8010d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d2a:	2302      	movs	r3, #2
 8010d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d32:	2300      	movs	r3, #0
 8010d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8010d36:	2309      	movs	r3, #9
 8010d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8010d3a:	f107 030c 	add.w	r3, r7, #12
 8010d3e:	4619      	mov	r1, r3
 8010d40:	4810      	ldr	r0, [pc, #64]	; (8010d84 <HAL_LTDC_MspInit+0xec>)
 8010d42:	f7f1 fe91 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8010d46:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8010d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d54:	2300      	movs	r3, #0
 8010d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8010d58:	230e      	movs	r3, #14
 8010d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010d5c:	f107 030c 	add.w	r3, r7, #12
 8010d60:	4619      	mov	r1, r3
 8010d62:	4809      	ldr	r0, [pc, #36]	; (8010d88 <HAL_LTDC_MspInit+0xf0>)
 8010d64:	f7f1 fe80 	bl	8002a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8010d68:	bf00      	nop
 8010d6a:	3720      	adds	r7, #32
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	40016800 	.word	0x40016800
 8010d74:	40023800 	.word	0x40023800
 8010d78:	40021000 	.word	0x40021000
 8010d7c:	40022400 	.word	0x40022400
 8010d80:	40022800 	.word	0x40022800
 8010d84:	40021800 	.word	0x40021800
 8010d88:	40022000 	.word	0x40022000

08010d8c <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a11      	ldr	r2, [pc, #68]	; (8010de0 <HAL_LTDC_MspDeInit+0x54>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d11c      	bne.n	8010dd8 <HAL_LTDC_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8010d9e:	4a11      	ldr	r2, [pc, #68]	; (8010de4 <HAL_LTDC_MspDeInit+0x58>)
 8010da0:	4b10      	ldr	r3, [pc, #64]	; (8010de4 <HAL_LTDC_MspDeInit+0x58>)
 8010da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010da4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010da8:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8010daa:	2110      	movs	r1, #16
 8010dac:	480e      	ldr	r0, [pc, #56]	; (8010de8 <HAL_LTDC_MspDeInit+0x5c>)
 8010dae:	f7f2 f805 	bl	8002dbc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8010db2:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8010db6:	480d      	ldr	r0, [pc, #52]	; (8010dec <HAL_LTDC_MspDeInit+0x60>)
 8010db8:	f7f2 f800 	bl	8002dbc <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8010dbc:	21f7      	movs	r1, #247	; 0xf7
 8010dbe:	480c      	ldr	r0, [pc, #48]	; (8010df0 <HAL_LTDC_MspDeInit+0x64>)
 8010dc0:	f7f1 fffc 	bl	8002dbc <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8010dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010dc8:	480a      	ldr	r0, [pc, #40]	; (8010df4 <HAL_LTDC_MspDeInit+0x68>)
 8010dca:	f7f1 fff7 	bl	8002dbc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8010dce:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8010dd2:	4809      	ldr	r0, [pc, #36]	; (8010df8 <HAL_LTDC_MspDeInit+0x6c>)
 8010dd4:	f7f1 fff2 	bl	8002dbc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8010dd8:	bf00      	nop
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	40016800 	.word	0x40016800
 8010de4:	40023800 	.word	0x40023800
 8010de8:	40021000 	.word	0x40021000
 8010dec:	40022400 	.word	0x40022400
 8010df0:	40022800 	.word	0x40022800
 8010df4:	40021800 	.word	0x40021800
 8010df8:	40022000 	.word	0x40022000

08010dfc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8010e02:	4b3b      	ldr	r3, [pc, #236]	; (8010ef0 <HAL_FMC_MspInit+0xf4>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d16d      	bne.n	8010ee6 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 8010e0a:	4b39      	ldr	r3, [pc, #228]	; (8010ef0 <HAL_FMC_MspInit+0xf4>)
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010e10:	4a38      	ldr	r2, [pc, #224]	; (8010ef4 <HAL_FMC_MspInit+0xf8>)
 8010e12:	4b38      	ldr	r3, [pc, #224]	; (8010ef4 <HAL_FMC_MspInit+0xf8>)
 8010e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e16:	f043 0301 	orr.w	r3, r3, #1
 8010e1a:	6393      	str	r3, [r2, #56]	; 0x38
 8010e1c:	4b35      	ldr	r3, [pc, #212]	; (8010ef4 <HAL_FMC_MspInit+0xf8>)
 8010e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	603b      	str	r3, [r7, #0]
 8010e26:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8010e28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8010e2c:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e2e:	2302      	movs	r3, #2
 8010e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e32:	2300      	movs	r3, #0
 8010e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e36:	2303      	movs	r3, #3
 8010e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010e3a:	230c      	movs	r3, #12
 8010e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010e3e:	1d3b      	adds	r3, r7, #4
 8010e40:	4619      	mov	r1, r3
 8010e42:	482d      	ldr	r0, [pc, #180]	; (8010ef8 <HAL_FMC_MspInit+0xfc>)
 8010e44:	f7f1 fe10 	bl	8002a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8010e48:	f248 1333 	movw	r3, #33075	; 0x8133
 8010e4c:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e4e:	2302      	movs	r3, #2
 8010e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e56:	2303      	movs	r3, #3
 8010e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010e5a:	230c      	movs	r3, #12
 8010e5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010e5e:	1d3b      	adds	r3, r7, #4
 8010e60:	4619      	mov	r1, r3
 8010e62:	4826      	ldr	r0, [pc, #152]	; (8010efc <HAL_FMC_MspInit+0x100>)
 8010e64:	f7f1 fe00 	bl	8002a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8010e68:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010e6c:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e6e:	2302      	movs	r3, #2
 8010e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e76:	2303      	movs	r3, #3
 8010e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010e7a:	230c      	movs	r3, #12
 8010e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010e7e:	1d3b      	adds	r3, r7, #4
 8010e80:	4619      	mov	r1, r3
 8010e82:	481f      	ldr	r0, [pc, #124]	; (8010f00 <HAL_FMC_MspInit+0x104>)
 8010e84:	f7f1 fdf0 	bl	8002a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8010e88:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8010e8c:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e8e:	2302      	movs	r3, #2
 8010e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e92:	2300      	movs	r3, #0
 8010e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e96:	2303      	movs	r3, #3
 8010e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010e9a:	230c      	movs	r3, #12
 8010e9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010e9e:	1d3b      	adds	r3, r7, #4
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	4818      	ldr	r0, [pc, #96]	; (8010f04 <HAL_FMC_MspInit+0x108>)
 8010ea4:	f7f1 fde0 	bl	8002a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8010ea8:	2328      	movs	r3, #40	; 0x28
 8010eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eac:	2302      	movs	r3, #2
 8010eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010eb8:	230c      	movs	r3, #12
 8010eba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010ebc:	1d3b      	adds	r3, r7, #4
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	4811      	ldr	r0, [pc, #68]	; (8010f08 <HAL_FMC_MspInit+0x10c>)
 8010ec2:	f7f1 fdd1 	bl	8002a68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8010ec6:	2308      	movs	r3, #8
 8010ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eca:	2302      	movs	r3, #2
 8010ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ed2:	2303      	movs	r3, #3
 8010ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010ed6:	230c      	movs	r3, #12
 8010ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8010eda:	1d3b      	adds	r3, r7, #4
 8010edc:	4619      	mov	r1, r3
 8010ede:	480b      	ldr	r0, [pc, #44]	; (8010f0c <HAL_FMC_MspInit+0x110>)
 8010ee0:	f7f1 fdc2 	bl	8002a68 <HAL_GPIO_Init>
 8010ee4:	e000      	b.n	8010ee8 <HAL_FMC_MspInit+0xec>
    return;
 8010ee6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8010ee8:	3718      	adds	r7, #24
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	2002b0dc 	.word	0x2002b0dc
 8010ef4:	40023800 	.word	0x40023800
 8010ef8:	40021000 	.word	0x40021000
 8010efc:	40021800 	.word	0x40021800
 8010f00:	40020c00 	.word	0x40020c00
 8010f04:	40021400 	.word	0x40021400
 8010f08:	40021c00 	.word	0x40021c00
 8010f0c:	40020800 	.word	0x40020800

08010f10 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8010f18:	f7ff ff70 	bl	8010dfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8010f1c:	bf00      	nop
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a0a      	ldr	r2, [pc, #40]	; (8010f5c <HAL_DMA2D_MspInit+0x38>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d10b      	bne.n	8010f4e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8010f36:	4a0a      	ldr	r2, [pc, #40]	; (8010f60 <HAL_DMA2D_MspInit+0x3c>)
 8010f38:	4b09      	ldr	r3, [pc, #36]	; (8010f60 <HAL_DMA2D_MspInit+0x3c>)
 8010f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010f40:	6313      	str	r3, [r2, #48]	; 0x30
 8010f42:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <HAL_DMA2D_MspInit+0x3c>)
 8010f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f4a:	60fb      	str	r3, [r7, #12]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8010f4e:	bf00      	nop
 8010f50:	3714      	adds	r7, #20
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	4002b000 	.word	0x4002b000
 8010f60:	40023800 	.word	0x40023800

08010f64 <_Color2IndexBulk_M8888I_DMA2D>:
}                                                                                                              \
static void _Index2ColorBulk_##PFIX##_DMA2D(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex) { \
  _DMA_Index2ColorBulk(pIndex, pColor, NumItems, SizeOfIndex, PIXELFORMAT);                                    \
}

DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af02      	add	r7, sp, #8
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
 8010f70:	70fb      	strb	r3, [r7, #3]
 8010f72:	78fa      	ldrb	r2, [r7, #3]
 8010f74:	2300      	movs	r3, #0
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	68b9      	ldr	r1, [r7, #8]
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f000 fae9 	bl	8011556 <_DMA_Color2IndexBulk>
 8010f84:	bf00      	nop
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <_Index2ColorBulk_M8888I_DMA2D>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	70fb      	strb	r3, [r7, #3]
 8010f9a:	78fa      	ldrb	r2, [r7, #3]
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	68b9      	ldr	r1, [r7, #8]
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f000 fac2 	bl	8011530 <_DMA_Index2ColorBulk>
 8010fac:	bf00      	nop
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af02      	add	r7, sp, #8
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
 8010fc0:	70fb      	strb	r3, [r7, #3]
 8010fc2:	78fa      	ldrb	r2, [r7, #3]
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	4613      	mov	r3, r2
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	68b9      	ldr	r1, [r7, #8]
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f000 fac1 	bl	8011556 <_DMA_Color2IndexBulk>
 8010fd4:	bf00      	nop
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <_Index2ColorBulk_M888_DMA2D>:
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b086      	sub	sp, #24
 8010fe0:	af02      	add	r7, sp, #8
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]
 8010fe8:	70fb      	strb	r3, [r7, #3]
 8010fea:	78fa      	ldrb	r2, [r7, #3]
 8010fec:	2300      	movs	r3, #0
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f000 fa9a 	bl	8011530 <_DMA_Index2ColorBulk>
 8010ffc:	bf00      	nop
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8011004:	b580      	push	{r7, lr}
 8011006:	b086      	sub	sp, #24
 8011008:	af02      	add	r7, sp, #8
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
 8011010:	70fb      	strb	r3, [r7, #3]
 8011012:	78fa      	ldrb	r2, [r7, #3]
 8011014:	2302      	movs	r3, #2
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	4613      	mov	r3, r2
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	68f8      	ldr	r0, [r7, #12]
 8011020:	f000 fa99 	bl	8011556 <_DMA_Color2IndexBulk>
 8011024:	bf00      	nop
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_Index2ColorBulk_M565_DMA2D>:
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af02      	add	r7, sp, #8
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
 8011038:	70fb      	strb	r3, [r7, #3]
 801103a:	78fa      	ldrb	r2, [r7, #3]
 801103c:	2302      	movs	r3, #2
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	4613      	mov	r3, r2
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	68b9      	ldr	r1, [r7, #8]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f000 fa72 	bl	8011530 <_DMA_Index2ColorBulk>
 801104c:	bf00      	nop
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af02      	add	r7, sp, #8
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	70fb      	strb	r3, [r7, #3]
 8011062:	78fa      	ldrb	r2, [r7, #3]
 8011064:	2303      	movs	r3, #3
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	4613      	mov	r3, r2
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f000 fa71 	bl	8011556 <_DMA_Color2IndexBulk>
 8011074:	bf00      	nop
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <_Index2ColorBulk_M1555I_DMA2D>:
 801107c:	b580      	push	{r7, lr}
 801107e:	b086      	sub	sp, #24
 8011080:	af02      	add	r7, sp, #8
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	70fb      	strb	r3, [r7, #3]
 801108a:	78fa      	ldrb	r2, [r7, #3]
 801108c:	2303      	movs	r3, #3
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	4613      	mov	r3, r2
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	68b9      	ldr	r1, [r7, #8]
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f000 fa4a 	bl	8011530 <_DMA_Index2ColorBulk>
 801109c:	bf00      	nop
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b086      	sub	sp, #24
 80110a8:	af02      	add	r7, sp, #8
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	70fb      	strb	r3, [r7, #3]
 80110b2:	78fa      	ldrb	r2, [r7, #3]
 80110b4:	2304      	movs	r3, #4
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	4613      	mov	r3, r2
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	68b9      	ldr	r1, [r7, #8]
 80110be:	68f8      	ldr	r0, [r7, #12]
 80110c0:	f000 fa49 	bl	8011556 <_DMA_Color2IndexBulk>
 80110c4:	bf00      	nop
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <_Index2ColorBulk_M4444I_DMA2D>:
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	70fb      	strb	r3, [r7, #3]
 80110da:	78fa      	ldrb	r2, [r7, #3]
 80110dc:	2304      	movs	r3, #4
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	4613      	mov	r3, r2
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	68b9      	ldr	r1, [r7, #8]
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 fa22 	bl	8011530 <_DMA_Index2ColorBulk>
 80110ec:	bf00      	nop
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <_DMA_ExecOperation>:

/*********************************************************************
*
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {
 80110f4:	b480      	push	{r7}
 80110f6:	af00      	add	r7, sp, #0

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 80110f8:	4b08      	ldr	r3, [pc, #32]	; (801111c <_DMA_ExecOperation+0x28>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d006      	beq.n	8011110 <_DMA_ExecOperation+0x1c>
    return;
  
  while(TransferInProgress) {
 8011102:	bf00      	nop
 8011104:	4b05      	ldr	r3, [pc, #20]	; (801111c <_DMA_ExecOperation+0x28>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1fa      	bne.n	8011104 <_DMA_ExecOperation+0x10>
 801110e:	e000      	b.n	8011112 <_DMA_ExecOperation+0x1e>
    return;
 8011110:	bf00      	nop
  }
}
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	2002b0fc 	.word	0x2002b0fc

08011120 <GetPixelformat>:
/**
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex) {
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  

  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d001      	beq.n	8011132 <GetPixelformat+0x12>
    return 0;
 801112e:	2300      	movs	r3, #0
 8011130:	e0af      	b.n	8011292 <GetPixelformat+0x172>
  }

  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 8011132:	4a5b      	ldr	r2, [pc, #364]	; (80112a0 <GetPixelformat+0x180>)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801113a:	4a5a      	ldr	r2, [pc, #360]	; (80112a4 <GetPixelformat+0x184>)
 801113c:	4293      	cmp	r3, r2
 801113e:	bf0c      	ite	eq
 8011140:	2301      	moveq	r3, #1
 8011142:	2300      	movne	r3, #0
 8011144:	b2da      	uxtb	r2, r3
 8011146:	4956      	ldr	r1, [pc, #344]	; (80112a0 <GetPixelformat+0x180>)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801114e:	4956      	ldr	r1, [pc, #344]	; (80112a8 <GetPixelformat+0x188>)
 8011150:	428b      	cmp	r3, r1
 8011152:	bf0c      	ite	eq
 8011154:	2301      	moveq	r3, #1
 8011156:	2300      	movne	r3, #0
 8011158:	b2db      	uxtb	r3, r3
 801115a:	4313      	orrs	r3, r2
 801115c:	b2db      	uxtb	r3, r3
 801115e:	4619      	mov	r1, r3
 8011160:	4a4f      	ldr	r2, [pc, #316]	; (80112a0 <GetPixelformat+0x180>)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011168:	4a50      	ldr	r2, [pc, #320]	; (80112ac <GetPixelformat+0x18c>)
 801116a:	4293      	cmp	r3, r2
 801116c:	bf0c      	ite	eq
 801116e:	2301      	moveq	r3, #1
 8011170:	2300      	movne	r3, #0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	430b      	orrs	r3, r1
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <GetPixelformat+0x5e>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 801117a:	2300      	movs	r3, #0
 801117c:	e089      	b.n	8011292 <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 801117e:	4a48      	ldr	r2, [pc, #288]	; (80112a0 <GetPixelformat+0x180>)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011186:	4a4a      	ldr	r2, [pc, #296]	; (80112b0 <GetPixelformat+0x190>)
 8011188:	4293      	cmp	r3, r2
 801118a:	bf0c      	ite	eq
 801118c:	2301      	moveq	r3, #1
 801118e:	2300      	movne	r3, #0
 8011190:	b2da      	uxtb	r2, r3
 8011192:	4943      	ldr	r1, [pc, #268]	; (80112a0 <GetPixelformat+0x180>)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801119a:	4946      	ldr	r1, [pc, #280]	; (80112b4 <GetPixelformat+0x194>)
 801119c:	428b      	cmp	r3, r1
 801119e:	bf0c      	ite	eq
 80111a0:	2301      	moveq	r3, #1
 80111a2:	2300      	movne	r3, #0
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	4313      	orrs	r3, r2
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d001      	beq.n	80111b2 <GetPixelformat+0x92>
    return LTDC_PIXEL_FORMAT_RGB888;
 80111ae:	2301      	movs	r3, #1
 80111b0:	e06f      	b.n	8011292 <GetPixelformat+0x172>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 80111b2:	4a3b      	ldr	r2, [pc, #236]	; (80112a0 <GetPixelformat+0x180>)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111ba:	4a3f      	ldr	r2, [pc, #252]	; (80112b8 <GetPixelformat+0x198>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	bf0c      	ite	eq
 80111c0:	2301      	moveq	r3, #1
 80111c2:	2300      	movne	r3, #0
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	4936      	ldr	r1, [pc, #216]	; (80112a0 <GetPixelformat+0x180>)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80111ce:	493b      	ldr	r1, [pc, #236]	; (80112bc <GetPixelformat+0x19c>)
 80111d0:	428b      	cmp	r3, r1
 80111d2:	bf0c      	ite	eq
 80111d4:	2301      	moveq	r3, #1
 80111d6:	2300      	movne	r3, #0
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	4313      	orrs	r3, r2
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <GetPixelformat+0xc6>
    return LTDC_PIXEL_FORMAT_RGB565;
 80111e2:	2302      	movs	r3, #2
 80111e4:	e055      	b.n	8011292 <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 80111e6:	4a2e      	ldr	r2, [pc, #184]	; (80112a0 <GetPixelformat+0x180>)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111ee:	4a34      	ldr	r2, [pc, #208]	; (80112c0 <GetPixelformat+0x1a0>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d101      	bne.n	80111f8 <GetPixelformat+0xd8>
    return LTDC_PIXEL_FORMAT_ARGB1555;
 80111f4:	2303      	movs	r3, #3
 80111f6:	e04c      	b.n	8011292 <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 80111f8:	4a29      	ldr	r2, [pc, #164]	; (80112a0 <GetPixelformat+0x180>)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011200:	4a30      	ldr	r2, [pc, #192]	; (80112c4 <GetPixelformat+0x1a4>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d101      	bne.n	801120a <GetPixelformat+0xea>
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8011206:	2304      	movs	r3, #4
 8011208:	e043      	b.n	8011292 <GetPixelformat+0x172>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 801120a:	4a25      	ldr	r2, [pc, #148]	; (80112a0 <GetPixelformat+0x180>)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011212:	4a2d      	ldr	r2, [pc, #180]	; (80112c8 <GetPixelformat+0x1a8>)
 8011214:	4293      	cmp	r3, r2
 8011216:	bf0c      	ite	eq
 8011218:	2301      	moveq	r3, #1
 801121a:	2300      	movne	r3, #0
 801121c:	b2da      	uxtb	r2, r3
 801121e:	4920      	ldr	r1, [pc, #128]	; (80112a0 <GetPixelformat+0x180>)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011226:	4929      	ldr	r1, [pc, #164]	; (80112cc <GetPixelformat+0x1ac>)
 8011228:	428b      	cmp	r3, r1
 801122a:	bf0c      	ite	eq
 801122c:	2301      	moveq	r3, #1
 801122e:	2300      	movne	r3, #0
 8011230:	b2db      	uxtb	r3, r3
 8011232:	4313      	orrs	r3, r2
 8011234:	b2db      	uxtb	r3, r3
 8011236:	4619      	mov	r1, r3
 8011238:	4a19      	ldr	r2, [pc, #100]	; (80112a0 <GetPixelformat+0x180>)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011240:	4a23      	ldr	r2, [pc, #140]	; (80112d0 <GetPixelformat+0x1b0>)
 8011242:	4293      	cmp	r3, r2
 8011244:	bf0c      	ite	eq
 8011246:	2301      	moveq	r3, #1
 8011248:	2300      	movne	r3, #0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	430b      	orrs	r3, r1
 801124e:	4914      	ldr	r1, [pc, #80]	; (80112a0 <GetPixelformat+0x180>)
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011256:	491f      	ldr	r1, [pc, #124]	; (80112d4 <GetPixelformat+0x1b4>)
 8011258:	428a      	cmp	r2, r1
 801125a:	bf0c      	ite	eq
 801125c:	2201      	moveq	r2, #1
 801125e:	2200      	movne	r2, #0
 8011260:	b2d2      	uxtb	r2, r2
 8011262:	4313      	orrs	r3, r2
 8011264:	2b00      	cmp	r3, #0
 8011266:	d001      	beq.n	801126c <GetPixelformat+0x14c>
    return LTDC_PIXEL_FORMAT_L8;
 8011268:	2305      	movs	r3, #5
 801126a:	e012      	b.n	8011292 <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 801126c:	4a0c      	ldr	r2, [pc, #48]	; (80112a0 <GetPixelformat+0x180>)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011274:	4a18      	ldr	r2, [pc, #96]	; (80112d8 <GetPixelformat+0x1b8>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d101      	bne.n	801127e <GetPixelformat+0x15e>
    return LTDC_PIXEL_FORMAT_AL44;
 801127a:	2306      	movs	r3, #6
 801127c:	e009      	b.n	8011292 <GetPixelformat+0x172>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 801127e:	4a08      	ldr	r2, [pc, #32]	; (80112a0 <GetPixelformat+0x180>)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011286:	4a15      	ldr	r2, [pc, #84]	; (80112dc <GetPixelformat+0x1bc>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d101      	bne.n	8011290 <GetPixelformat+0x170>
    return LTDC_PIXEL_FORMAT_AL88;
 801128c:	2307      	movs	r3, #7
 801128e:	e000      	b.n	8011292 <GetPixelformat+0x172>
  }
  while (1); // Error
 8011290:	e7fe      	b.n	8011290 <GetPixelformat+0x170>
} 
 8011292:	4618      	mov	r0, r3
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	200000bc 	.word	0x200000bc
 80112a4:	08032080 	.word	0x08032080
 80112a8:	08031ff0 	.word	0x08031ff0
 80112ac:	08032038 	.word	0x08032038
 80112b0:	08032008 	.word	0x08032008
 80112b4:	08032050 	.word	0x08032050
 80112b8:	08032068 	.word	0x08032068
 80112bc:	08032020 	.word	0x08032020
 80112c0:	080320b0 	.word	0x080320b0
 80112c4:	08032098 	.word	0x08032098
 80112c8:	08032128 	.word	0x08032128
 80112cc:	08032110 	.word	0x08032110
 80112d0:	080320f8 	.word	0x080320f8
 80112d4:	080320e0 	.word	0x080320e0
 80112d8:	08032140 	.word	0x08032140
 80112dc:	080320c8 	.word	0x080320c8

080112e0 <TransferComplete>:
  * @note   This example shows a simple way to report end of DMA2D transfer, and
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b083      	sub	sp, #12
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  TransferInProgress = 0; 
 80112e8:	4b04      	ldr	r3, [pc, #16]	; (80112fc <TransferComplete+0x1c>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	701a      	strb	r2, [r3, #0]
}
 80112ee:	bf00      	nop
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	2002b0fc 	.word	0x2002b0fc

08011300 <DMA2D_Init>:
  * @brief  Initialize the DMA2D.
  * @param  None
  * @retval None
  */
void DMA2D_Init(void) 
{
 8011300:	b580      	push	{r7, lr}
 8011302:	af00      	add	r7, sp, #0
   /* Configure the DMA2D transfer complete callback mode */ 
	hdma2d.XferCpltCallback  = TransferComplete;	
 8011304:	4b0c      	ldr	r3, [pc, #48]	; (8011338 <DMA2D_Init+0x38>)
 8011306:	4a0d      	ldr	r2, [pc, #52]	; (801133c <DMA2D_Init+0x3c>)
 8011308:	611a      	str	r2, [r3, #16]
	
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801130a:	480b      	ldr	r0, [pc, #44]	; (8011338 <DMA2D_Init+0x38>)
 801130c:	f7f1 f914 	bl	8002538 <HAL_DMA2D_Init>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d003      	beq.n	801131e <DMA2D_Init+0x1e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8011316:	21d1      	movs	r1, #209	; 0xd1
 8011318:	4809      	ldr	r0, [pc, #36]	; (8011340 <DMA2D_Init+0x40>)
 801131a:	f002 fe29 	bl	8013f70 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801131e:	2101      	movs	r1, #1
 8011320:	4805      	ldr	r0, [pc, #20]	; (8011338 <DMA2D_Init+0x38>)
 8011322:	f7f1 fa67 	bl	80027f4 <HAL_DMA2D_ConfigLayer>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d003      	beq.n	8011334 <DMA2D_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 801132c:	21d6      	movs	r1, #214	; 0xd6
 801132e:	4804      	ldr	r0, [pc, #16]	; (8011340 <DMA2D_Init+0x40>)
 8011330:	f002 fe1e 	bl	8013f70 <_Error_Handler>
  }

}
 8011334:	bf00      	nop
 8011336:	bd80      	pop	{r7, pc}
 8011338:	2002b4a0 	.word	0x2002b4a0
 801133c:	080112e1 	.word	0x080112e1
 8011340:	0802ba50 	.word	0x0802ba50

08011344 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 8011352:	f7ff fecf 	bl	80110f4 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 8011356:	4b16      	ldr	r3, [pc, #88]	; (80113b0 <DMA2D_CopyBuffer+0x6c>)
 8011358:	2201      	movs	r2, #1
 801135a:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f7ff fedf 	bl	8011120 <GetPixelformat>
 8011362:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8011364:	4b13      	ldr	r3, [pc, #76]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 8011366:	f44f 7200 	mov.w	r2, #512	; 0x200
 801136a:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 801136c:	4a11      	ldr	r2, [pc, #68]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8011372:	4a10      	ldr	r2, [pc, #64]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8011378:	4a0e      	ldr	r2, [pc, #56]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 801137e:	4a0d      	ldr	r2, [pc, #52]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 8011380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011382:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8011384:	4a0b      	ldr	r2, [pc, #44]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 801138a:	4a0a      	ldr	r2, [pc, #40]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	041b      	lsls	r3, r3, #16
 8011390:	6a39      	ldr	r1, [r7, #32]
 8011392:	b289      	uxth	r1, r1
 8011394:	430b      	orrs	r3, r1
 8011396:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8011398:	4a06      	ldr	r2, [pc, #24]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 801139a:	4b06      	ldr	r3, [pc, #24]	; (80113b4 <DMA2D_CopyBuffer+0x70>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f043 0301 	orr.w	r3, r3, #1
 80113a2:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 80113a4:	f7ff fea6 	bl	80110f4 <_DMA_ExecOperation>

}
 80113a8:	bf00      	nop
 80113aa:	3718      	adds	r7, #24
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	2002b0fc 	.word	0x2002b0fc
 80113b4:	4002b000 	.word	0x4002b000

080113b8 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b086      	sub	sp, #24
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
 80113c4:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 80113c6:	f7ff fe95 	bl	80110f4 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 80113ca:	4b1c      	ldr	r3, [pc, #112]	; (801143c <DMA2D_CopyBufferWithAlpha+0x84>)
 80113cc:	2201      	movs	r2, #1
 80113ce:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f7ff fea5 	bl	8011120 <GetPixelformat>
 80113d6:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 80113d8:	4b19      	ldr	r3, [pc, #100]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113da:	4a1a      	ldr	r2, [pc, #104]	; (8011444 <DMA2D_CopyBufferWithAlpha+0x8c>)
 80113dc:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 80113de:	4a18      	ldr	r2, [pc, #96]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80113e4:	4a16      	ldr	r2, [pc, #88]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 80113ea:	4a15      	ldr	r2, [pc, #84]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6153      	str	r3, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 80113f0:	4a13      	ldr	r2, [pc, #76]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80113f6:	4a12      	ldr	r2, [pc, #72]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 80113fc:	4a10      	ldr	r2, [pc, #64]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 80113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011400:	6193      	str	r3, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8011402:	4b0f      	ldr	r3, [pc, #60]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 8011404:	2200      	movs	r2, #0
 8011406:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;
 8011408:	4a0d      	ldr	r2, [pc, #52]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 801140e:	4a0c      	ldr	r2, [pc, #48]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8011414:	4a0a      	ldr	r2, [pc, #40]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	041b      	lsls	r3, r3, #16
 801141a:	6a39      	ldr	r1, [r7, #32]
 801141c:	b289      	uxth	r1, r1
 801141e:	430b      	orrs	r3, r1
 8011420:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 8011422:	4a07      	ldr	r2, [pc, #28]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 8011424:	4b06      	ldr	r3, [pc, #24]	; (8011440 <DMA2D_CopyBufferWithAlpha+0x88>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f043 0301 	orr.w	r3, r3, #1
 801142c:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 801142e:	f7ff fe61 	bl	80110f4 <_DMA_ExecOperation>
}
 8011432:	bf00      	nop
 8011434:	3718      	adds	r7, #24
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	2002b0fc 	.word	0x2002b0fc
 8011440:	4002b000 	.word	0x4002b000
 8011444:	00020200 	.word	0x00020200

08011448 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	607a      	str	r2, [r7, #4]
 8011454:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  _DMA_ExecOperation();
 8011456:	f7ff fe4d 	bl	80110f4 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 801145a:	4b15      	ldr	r3, [pc, #84]	; (80114b0 <DMA2D_FillBuffer+0x68>)
 801145c:	2201      	movs	r2, #1
 801145e:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f7ff fe5d 	bl	8011120 <GetPixelformat>
 8011466:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8011468:	4b12      	ldr	r3, [pc, #72]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 801146a:	4a13      	ldr	r2, [pc, #76]	; (80114b8 <DMA2D_FillBuffer+0x70>)
 801146c:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 801146e:	4a11      	ldr	r2, [pc, #68]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011472:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 8011474:	4a0f      	ldr	r2, [pc, #60]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 801147a:	4a0e      	ldr	r2, [pc, #56]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 8011480:	4a0c      	ldr	r2, [pc, #48]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8011486:	4a0b      	ldr	r2, [pc, #44]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	041b      	lsls	r3, r3, #16
 801148c:	6839      	ldr	r1, [r7, #0]
 801148e:	b289      	uxth	r1, r1
 8011490:	430b      	orrs	r3, r1
 8011492:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8011494:	4907      	ldr	r1, [pc, #28]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011496:	4b07      	ldr	r3, [pc, #28]	; (80114b4 <DMA2D_FillBuffer+0x6c>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	f240 2301 	movw	r3, #513	; 0x201
 801149e:	4313      	orrs	r3, r2
 80114a0:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 80114a2:	f7ff fe27 	bl	80110f4 <_DMA_ExecOperation>
}
 80114a6:	bf00      	nop
 80114a8:	3718      	adds	r7, #24
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	2002b0fc 	.word	0x2002b0fc
 80114b4:	4002b000 	.word	0x4002b000
 80114b8:	00030200 	.word	0x00030200

080114bc <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]

  /* Set up mode */
  _DMA_ExecOperation();
 80114ca:	f7ff fe13 	bl	80110f4 <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 80114ce:	4b16      	ldr	r3, [pc, #88]	; (8011528 <_DMA_ConvertColor+0x6c>)
 80114d0:	2201      	movs	r2, #1
 80114d2:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80114d4:	4b15      	ldr	r3, [pc, #84]	; (801152c <_DMA_ConvertColor+0x70>)
 80114d6:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 80114da:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 80114dc:	4a13      	ldr	r2, [pc, #76]	; (801152c <_DMA_ConvertColor+0x70>)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80114e2:	4a12      	ldr	r2, [pc, #72]	; (801152c <_DMA_ConvertColor+0x70>)
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 80114e8:	4b10      	ldr	r3, [pc, #64]	; (801152c <_DMA_ConvertColor+0x70>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 80114ee:	4b0f      	ldr	r3, [pc, #60]	; (801152c <_DMA_ConvertColor+0x70>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 80114f4:	4a0d      	ldr	r2, [pc, #52]	; (801152c <_DMA_ConvertColor+0x70>)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 80114fa:	4a0c      	ldr	r2, [pc, #48]	; (801152c <_DMA_ConvertColor+0x70>)
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8011500:	4a0a      	ldr	r2, [pc, #40]	; (801152c <_DMA_ConvertColor+0x70>)
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	041b      	lsls	r3, r3, #16
 8011506:	f043 0301 	orr.w	r3, r3, #1
 801150a:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 801150c:	4907      	ldr	r1, [pc, #28]	; (801152c <_DMA_ConvertColor+0x70>)
 801150e:	4b07      	ldr	r3, [pc, #28]	; (801152c <_DMA_ConvertColor+0x70>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	f240 2301 	movw	r3, #513	; 0x201
 8011516:	4313      	orrs	r3, r2
 8011518:	600b      	str	r3, [r1, #0]
  
  _DMA_ExecOperation();
 801151a:	f7ff fdeb 	bl	80110f4 <_DMA_ExecOperation>
}
 801151e:	bf00      	nop
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	2002b0fc 	.word	0x2002b0fc
 801152c:	4002b000 	.word	0x4002b000

08011530 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af02      	add	r7, sp, #8
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	2300      	movs	r3, #0
 8011544:	69ba      	ldr	r2, [r7, #24]
 8011546:	68b9      	ldr	r1, [r7, #8]
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f7ff ffb7 	bl	80114bc <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 801154e:	bf00      	nop
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8011556:	b580      	push	{r7, lr}
 8011558:	b086      	sub	sp, #24
 801155a:	af02      	add	r7, sp, #8
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]
 8011562:	70fb      	strb	r3, [r7, #3]
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	2200      	movs	r2, #0
 801156c:	68b9      	ldr	r1, [r7, #8]
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff ffa4 	bl	80114bc <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 8011574:	bf00      	nop
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8011584:	4912      	ldr	r1, [pc, #72]	; (80115d0 <GetBufferSize+0x54>)
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	4613      	mov	r3, r2
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	440b      	add	r3, r1
 8011592:	330c      	adds	r3, #12
 8011594:	6819      	ldr	r1, [r3, #0]
 8011596:	480e      	ldr	r0, [pc, #56]	; (80115d0 <GetBufferSize+0x54>)
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	4613      	mov	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	1a9b      	subs	r3, r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4403      	add	r3, r0
 80115a4:	3310      	adds	r3, #16
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	fb03 f101 	mul.w	r1, r3, r1
 80115ac:	4808      	ldr	r0, [pc, #32]	; (80115d0 <GetBufferSize+0x54>)
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	4613      	mov	r3, r2
 80115b2:	00db      	lsls	r3, r3, #3
 80115b4:	1a9b      	subs	r3, r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4403      	add	r3, r0
 80115ba:	3314      	adds	r3, #20
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	fb03 f301 	mul.w	r3, r3, r1
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	2002b0e0 	.word	0x2002b0e0

080115d4 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 80115d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d6:	b08d      	sub	sp, #52	; 0x34
 80115d8:	af04      	add	r7, sp, #16
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff ffca 	bl	801157c <GetBufferSize>
 80115e8:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80115ea:	4926      	ldr	r1, [pc, #152]	; (8011684 <LCD_LL_CopyBuffer+0xb0>)
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	4613      	mov	r3, r2
 80115f0:	00db      	lsls	r3, r3, #3
 80115f2:	1a9b      	subs	r3, r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	440b      	add	r3, r1
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4619      	mov	r1, r3
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	fb02 f303 	mul.w	r3, r2, r3
 8011604:	440b      	add	r3, r1
 8011606:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 8011608:	491e      	ldr	r1, [pc, #120]	; (8011684 <LCD_LL_CopyBuffer+0xb0>)
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	4613      	mov	r3, r2
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	1a9b      	subs	r3, r3, r2
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	440b      	add	r3, r1
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4619      	mov	r1, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	69fa      	ldr	r2, [r7, #28]
 801161e:	fb02 f303 	mul.w	r3, r2, r3
 8011622:	440b      	add	r3, r1
 8011624:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	69bc      	ldr	r4, [r7, #24]
 801162a:	697d      	ldr	r5, [r7, #20]
 801162c:	4915      	ldr	r1, [pc, #84]	; (8011684 <LCD_LL_CopyBuffer+0xb0>)
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	4613      	mov	r3, r2
 8011632:	00db      	lsls	r3, r3, #3
 8011634:	1a9b      	subs	r3, r3, r2
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	440b      	add	r3, r1
 801163a:	330c      	adds	r3, #12
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	461e      	mov	r6, r3
 8011640:	4910      	ldr	r1, [pc, #64]	; (8011684 <LCD_LL_CopyBuffer+0xb0>)
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	4613      	mov	r3, r2
 8011646:	00db      	lsls	r3, r3, #3
 8011648:	1a9b      	subs	r3, r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	440b      	add	r3, r1
 801164e:	3310      	adds	r3, #16
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	461a      	mov	r2, r3
 8011654:	2300      	movs	r3, #0
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	2300      	movs	r3, #0
 801165a:	9301      	str	r3, [sp, #4]
 801165c:	9200      	str	r2, [sp, #0]
 801165e:	4633      	mov	r3, r6
 8011660:	462a      	mov	r2, r5
 8011662:	4621      	mov	r1, r4
 8011664:	f7ff fe6e 	bl	8011344 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8011668:	4906      	ldr	r1, [pc, #24]	; (8011684 <LCD_LL_CopyBuffer+0xb0>)
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	4613      	mov	r3, r2
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	1a9b      	subs	r3, r3, r2
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	440b      	add	r3, r1
 8011676:	3308      	adds	r3, #8
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	601a      	str	r2, [r3, #0]
}
 801167c:	bf00      	nop
 801167e:	3724      	adds	r7, #36	; 0x24
 8011680:	46bd      	mov	sp, r7
 8011682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011684:	2002b0e0 	.word	0x2002b0e0

08011688 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8011688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801168a:	b08f      	sub	sp, #60	; 0x3c
 801168c:	af04      	add	r7, sp, #16
 801168e:	6178      	str	r0, [r7, #20]
 8011690:	6139      	str	r1, [r7, #16]
 8011692:	60fa      	str	r2, [r7, #12]
 8011694:	60bb      	str	r3, [r7, #8]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff ff6f 	bl	801157c <GetBufferSize>
 801169e:	6278      	str	r0, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80116a0:	4942      	ldr	r1, [pc, #264]	; (80117ac <LCD_LL_CopyRect+0x124>)
 80116a2:	697a      	ldr	r2, [r7, #20]
 80116a4:	4613      	mov	r3, r2
 80116a6:	00db      	lsls	r3, r3, #3
 80116a8:	1a9b      	subs	r3, r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	440b      	add	r3, r1
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	461c      	mov	r4, r3
 80116b2:	493e      	ldr	r1, [pc, #248]	; (80117ac <LCD_LL_CopyRect+0x124>)
 80116b4:	697a      	ldr	r2, [r7, #20]
 80116b6:	4613      	mov	r3, r2
 80116b8:	00db      	lsls	r3, r3, #3
 80116ba:	1a9b      	subs	r3, r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	440b      	add	r3, r1
 80116c0:	330c      	adds	r3, #12
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	68fa      	ldr	r2, [r7, #12]
 80116c6:	fb02 f203 	mul.w	r2, r2, r3
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	18d1      	adds	r1, r2, r3
 80116ce:	4837      	ldr	r0, [pc, #220]	; (80117ac <LCD_LL_CopyRect+0x124>)
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	4613      	mov	r3, r2
 80116d4:	00db      	lsls	r3, r3, #3
 80116d6:	1a9b      	subs	r3, r3, r2
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	4403      	add	r3, r0
 80116dc:	3314      	adds	r3, #20
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	fb03 f301 	mul.w	r3, r3, r1
 80116e4:	4618      	mov	r0, r3
 80116e6:	4931      	ldr	r1, [pc, #196]	; (80117ac <LCD_LL_CopyRect+0x124>)
 80116e8:	697a      	ldr	r2, [r7, #20]
 80116ea:	4613      	mov	r3, r2
 80116ec:	00db      	lsls	r3, r3, #3
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	440b      	add	r3, r1
 80116f4:	3304      	adds	r3, #4
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	fb03 f302 	mul.w	r3, r3, r2
 8011700:	4403      	add	r3, r0
 8011702:	4423      	add	r3, r4
 8011704:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8011706:	4929      	ldr	r1, [pc, #164]	; (80117ac <LCD_LL_CopyRect+0x124>)
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	4613      	mov	r3, r2
 801170c:	00db      	lsls	r3, r3, #3
 801170e:	1a9b      	subs	r3, r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	440b      	add	r3, r1
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	461c      	mov	r4, r3
 8011718:	4924      	ldr	r1, [pc, #144]	; (80117ac <LCD_LL_CopyRect+0x124>)
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	4613      	mov	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	1a9b      	subs	r3, r3, r2
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	440b      	add	r3, r1
 8011726:	330c      	adds	r3, #12
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801172c:	fb02 f203 	mul.w	r2, r2, r3
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	18d1      	adds	r1, r2, r3
 8011734:	481d      	ldr	r0, [pc, #116]	; (80117ac <LCD_LL_CopyRect+0x124>)
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	4613      	mov	r3, r2
 801173a:	00db      	lsls	r3, r3, #3
 801173c:	1a9b      	subs	r3, r3, r2
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	4403      	add	r3, r0
 8011742:	3314      	adds	r3, #20
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	fb03 f301 	mul.w	r3, r3, r1
 801174a:	4618      	mov	r0, r3
 801174c:	4917      	ldr	r1, [pc, #92]	; (80117ac <LCD_LL_CopyRect+0x124>)
 801174e:	697a      	ldr	r2, [r7, #20]
 8011750:	4613      	mov	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	1a9b      	subs	r3, r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	440b      	add	r3, r1
 801175a:	3304      	adds	r3, #4
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	461a      	mov	r2, r3
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	fb03 f302 	mul.w	r3, r3, r2
 8011766:	4403      	add	r3, r0
 8011768:	4423      	add	r3, r4
 801176a:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 801176c:	697c      	ldr	r4, [r7, #20]
 801176e:	6a3d      	ldr	r5, [r7, #32]
 8011770:	69fe      	ldr	r6, [r7, #28]
 8011772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011774:	607b      	str	r3, [r7, #4]
 8011776:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011778:	480c      	ldr	r0, [pc, #48]	; (80117ac <LCD_LL_CopyRect+0x124>)
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	4613      	mov	r3, r2
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	1a9b      	subs	r3, r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	4403      	add	r3, r0
 8011786:	330c      	adds	r3, #12
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	461a      	mov	r2, r3
 8011790:	2300      	movs	r3, #0
 8011792:	9302      	str	r3, [sp, #8]
 8011794:	9201      	str	r2, [sp, #4]
 8011796:	9100      	str	r1, [sp, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4632      	mov	r2, r6
 801179c:	4629      	mov	r1, r5
 801179e:	4620      	mov	r0, r4
 80117a0:	f7ff fdd0 	bl	8011344 <DMA2D_CopyBuffer>
}
 80117a4:	bf00      	nop
 80117a6:	372c      	adds	r7, #44	; 0x2c
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ac:	2002b0e0 	.word	0x2002b0e0

080117b0 <LCD_LL_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void LCD_LL_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 80117b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117b2:	b08b      	sub	sp, #44	; 0x2c
 80117b4:	af02      	add	r7, sp, #8
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
 80117bc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 80117be:	f012 feb5 	bl	802452c <GUI_GetDrawMode>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d110      	bne.n	80117ea <LCD_LL_FillRect+0x3a>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80117c8:	2200      	movs	r2, #0
 80117ca:	2119      	movs	r1, #25
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f00f fe5f 	bl	8021490 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80117d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	6879      	ldr	r1, [r7, #4]
 80117d8:	68b8      	ldr	r0, [r7, #8]
 80117da:	f010 f8cf 	bl	802197c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 80117de:	4a32      	ldr	r2, [pc, #200]	; (80118a8 <LCD_LL_FillRect+0xf8>)
 80117e0:	2119      	movs	r1, #25
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f00f fe54 	bl	8021490 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }	
}
 80117e8:	e059      	b.n	801189e <LCD_LL_FillRect+0xee>
    xSize = x1 - x0 + 1;
 80117ea:	683a      	ldr	r2, [r7, #0]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	3301      	adds	r3, #1
 80117f2:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 80117f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	3301      	adds	r3, #1
 80117fc:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	4618      	mov	r0, r3
 8011802:	f7ff febb 	bl	801157c <GetBufferSize>
 8011806:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8011808:	4928      	ldr	r1, [pc, #160]	; (80118ac <LCD_LL_FillRect+0xfc>)
 801180a:	68fa      	ldr	r2, [r7, #12]
 801180c:	4613      	mov	r3, r2
 801180e:	00db      	lsls	r3, r3, #3
 8011810:	1a9b      	subs	r3, r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	440b      	add	r3, r1
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	461c      	mov	r4, r3
 801181a:	4924      	ldr	r1, [pc, #144]	; (80118ac <LCD_LL_FillRect+0xfc>)
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	4613      	mov	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	1a9b      	subs	r3, r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	440b      	add	r3, r1
 8011828:	330c      	adds	r3, #12
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	fb02 f203 	mul.w	r2, r2, r3
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	18d1      	adds	r1, r2, r3
 8011836:	481d      	ldr	r0, [pc, #116]	; (80118ac <LCD_LL_FillRect+0xfc>)
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	4613      	mov	r3, r2
 801183c:	00db      	lsls	r3, r3, #3
 801183e:	1a9b      	subs	r3, r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	4403      	add	r3, r0
 8011844:	3314      	adds	r3, #20
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	fb03 f301 	mul.w	r3, r3, r1
 801184c:	4618      	mov	r0, r3
 801184e:	4917      	ldr	r1, [pc, #92]	; (80118ac <LCD_LL_FillRect+0xfc>)
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	4613      	mov	r3, r2
 8011854:	00db      	lsls	r3, r3, #3
 8011856:	1a9b      	subs	r3, r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	440b      	add	r3, r1
 801185c:	3308      	adds	r3, #8
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	461a      	mov	r2, r3
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	fb03 f302 	mul.w	r3, r3, r2
 8011868:	4403      	add	r3, r0
 801186a:	4423      	add	r3, r4
 801186c:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	693c      	ldr	r4, [r7, #16]
 8011872:	69fd      	ldr	r5, [r7, #28]
 8011874:	69be      	ldr	r6, [r7, #24]
 8011876:	490d      	ldr	r1, [pc, #52]	; (80118ac <LCD_LL_FillRect+0xfc>)
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4613      	mov	r3, r2
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	1a9b      	subs	r3, r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	440b      	add	r3, r1
 8011884:	330c      	adds	r3, #12
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	461a      	mov	r2, r3
 801188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011890:	9301      	str	r3, [sp, #4]
 8011892:	9200      	str	r2, [sp, #0]
 8011894:	4633      	mov	r3, r6
 8011896:	462a      	mov	r2, r5
 8011898:	4621      	mov	r1, r4
 801189a:	f7ff fdd5 	bl	8011448 <DMA2D_FillBuffer>
}
 801189e:	bf00      	nop
 80118a0:	3724      	adds	r7, #36	; 0x24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118a6:	bf00      	nop
 80118a8:	080117b1 	.word	0x080117b1
 80118ac:	2002b0e0 	.word	0x2002b0e0

080118b0 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
 80118bc:	603b      	str	r3, [r7, #0]
	
  _DMA_ExecOperation();
 80118be:	f7ff fc19 	bl	80110f4 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 80118c2:	4b15      	ldr	r3, [pc, #84]	; (8011918 <DMA2D_DrawBitmapL8+0x68>)
 80118c4:	2201      	movs	r2, #1
 80118c6:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80118c8:	4b14      	ldr	r3, [pc, #80]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118ca:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 80118ce:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 80118d0:	4a12      	ldr	r2, [pc, #72]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80118d6:	4a11      	ldr	r2, [pc, #68]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 80118dc:	4a0f      	ldr	r2, [pc, #60]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 80118e2:	4a0e      	ldr	r2, [pc, #56]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80118e8:	4b0c      	ldr	r3, [pc, #48]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118ea:	2205      	movs	r2, #5
 80118ec:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 80118ee:	4a0b      	ldr	r2, [pc, #44]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 80118f4:	4909      	ldr	r1, [pc, #36]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	041a      	lsls	r2, r3, #16
 80118fa:	6a3b      	ldr	r3, [r7, #32]
 80118fc:	4313      	orrs	r3, r2
 80118fe:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 8011900:	4a06      	ldr	r2, [pc, #24]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 8011902:	4b06      	ldr	r3, [pc, #24]	; (801191c <DMA2D_DrawBitmapL8+0x6c>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f043 0301 	orr.w	r3, r3, #1
 801190a:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 801190c:	f7ff fbf2 	bl	80110f4 <_DMA_ExecOperation>
}
 8011910:	bf00      	nop
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	2002b0fc 	.word	0x2002b0fc
 801191c:	4002b000 	.word	0x4002b000

08011920 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	603b      	str	r3, [r7, #0]

  _DMA_ExecOperation();
 801192e:	f7ff fbe1 	bl	80110f4 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 8011932:	4b1b      	ldr	r3, [pc, #108]	; (80119a0 <_DMA_DrawAlphaBitmap+0x80>)
 8011934:	2201      	movs	r2, #1
 8011936:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8011938:	4b1a      	ldr	r3, [pc, #104]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 801193a:	4a1b      	ldr	r2, [pc, #108]	; (80119a8 <_DMA_DrawAlphaBitmap+0x88>)
 801193c:	601a      	str	r2, [r3, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 801193e:	4a19      	ldr	r2, [pc, #100]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 8011944:	4a17      	ldr	r2, [pc, #92]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 801194a:	4a16      	ldr	r2, [pc, #88]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 8011950:	4a14      	ldr	r2, [pc, #80]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011952:	69bb      	ldr	r3, [r7, #24]
 8011954:	6113      	str	r3, [r2, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 8011956:	4a13      	ldr	r2, [pc, #76]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	6193      	str	r3, [r2, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 801195c:	4a11      	ldr	r2, [pc, #68]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8011962:	4b10      	ldr	r3, [pc, #64]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011964:	2200      	movs	r2, #0
 8011966:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 8011968:	4a0e      	ldr	r2, [pc, #56]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 801196e:	4a0d      	ldr	r2, [pc, #52]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	6353      	str	r3, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8011974:	4a0b      	ldr	r2, [pc, #44]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	041b      	lsls	r3, r3, #16
 801197a:	4619      	mov	r1, r3
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	b29b      	uxth	r3, r3
 8011980:	430b      	orrs	r3, r1
 8011982:	6453      	str	r3, [r2, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8011984:	4907      	ldr	r1, [pc, #28]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011986:	4b07      	ldr	r3, [pc, #28]	; (80119a4 <_DMA_DrawAlphaBitmap+0x84>)
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	f240 2301 	movw	r3, #513	; 0x201
 801198e:	4313      	orrs	r3, r2
 8011990:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 8011992:	f7ff fbaf 	bl	80110f4 <_DMA_ExecOperation>
}
 8011996:	bf00      	nop
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	2002b0fc 	.word	0x2002b0fc
 80119a4:	4002b000 	.word	0x4002b000
 80119a8:	00020200 	.word	0x00020200

080119ac <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 80119ac:	b590      	push	{r4, r7, lr}
 80119ae:	b08f      	sub	sp, #60	; 0x3c
 80119b0:	af04      	add	r7, sp, #16
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
 80119b8:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fbaf 	bl	8011120 <GetPixelformat>
 80119c2:	6278      	str	r0, [r7, #36]	; 0x24
  BufferSize = GetBufferSize(LayerIndex);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fdd8 	bl	801157c <GetBufferSize>
 80119cc:	6238      	str	r0, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80119ce:	492c      	ldr	r1, [pc, #176]	; (8011a80 <_LCD_DrawBitmapAlpha+0xd4>)
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	4613      	mov	r3, r2
 80119d4:	00db      	lsls	r3, r3, #3
 80119d6:	1a9b      	subs	r3, r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	440b      	add	r3, r1
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	461c      	mov	r4, r3
 80119e0:	4927      	ldr	r1, [pc, #156]	; (8011a80 <_LCD_DrawBitmapAlpha+0xd4>)
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	4613      	mov	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	440b      	add	r3, r1
 80119ee:	330c      	adds	r3, #12
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	fb02 f203 	mul.w	r2, r2, r3
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	18d1      	adds	r1, r2, r3
 80119fc:	4820      	ldr	r0, [pc, #128]	; (8011a80 <_LCD_DrawBitmapAlpha+0xd4>)
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	4613      	mov	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	1a9b      	subs	r3, r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	4403      	add	r3, r0
 8011a0a:	3314      	adds	r3, #20
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	fb03 f301 	mul.w	r3, r3, r1
 8011a12:	4618      	mov	r0, r3
 8011a14:	491a      	ldr	r1, [pc, #104]	; (8011a80 <_LCD_DrawBitmapAlpha+0xd4>)
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	4613      	mov	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	1a9b      	subs	r3, r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	440b      	add	r3, r1
 8011a22:	3308      	adds	r3, #8
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	461a      	mov	r2, r3
 8011a28:	6a3b      	ldr	r3, [r7, #32]
 8011a2a:	fb03 f302 	mul.w	r3, r3, r2
 8011a2e:	4403      	add	r3, r0
 8011a30:	4423      	add	r3, r4
 8011a32:	61fb      	str	r3, [r7, #28]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8011a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	da00      	bge.n	8011a3c <_LCD_DrawBitmapAlpha+0x90>
 8011a3a:	3303      	adds	r3, #3
 8011a3c:	109b      	asrs	r3, r3, #2
 8011a3e:	461a      	mov	r2, r3
 8011a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	61bb      	str	r3, [r7, #24]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8011a46:	490e      	ldr	r1, [pc, #56]	; (8011a80 <_LCD_DrawBitmapAlpha+0xd4>)
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	1a9b      	subs	r3, r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	440b      	add	r3, r1
 8011a54:	330c      	adds	r3, #12
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	617b      	str	r3, [r7, #20]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8011a5e:	69f8      	ldr	r0, [r7, #28]
 8011a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a62:	9302      	str	r3, [sp, #8]
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	f7ff ff55 	bl	8011920 <_DMA_DrawAlphaBitmap>
}
 8011a76:	bf00      	nop
 8011a78:	372c      	adds	r7, #44	; 0x2c
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd90      	pop	{r4, r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	2002b0e0 	.word	0x2002b0e0

08011a84 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b08a      	sub	sp, #40	; 0x28
 8011a88:	af04      	add	r7, sp, #16
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
 8011a90:	603b      	str	r3, [r7, #0]
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8011a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	da00      	bge.n	8011a9a <_LCD_DrawMemdevAlpha+0x16>
 8011a98:	3303      	adds	r3, #3
 8011a9a:	109b      	asrs	r3, r3, #2
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	1ad3      	subs	r3, r2, r3
 8011aa2:	617b      	str	r3, [r7, #20]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8011aa4:	6a3b      	ldr	r3, [r7, #32]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	da00      	bge.n	8011aac <_LCD_DrawMemdevAlpha+0x28>
 8011aaa:	3303      	adds	r3, #3
 8011aac:	109b      	asrs	r3, r3, #2
 8011aae:	461a      	mov	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	613b      	str	r3, [r7, #16]
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	9302      	str	r3, [sp, #8]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	68b9      	ldr	r1, [r7, #8]
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7ff ff29 	bl	8011920 <_DMA_DrawAlphaBitmap>
}
 8011ace:	bf00      	nop
 8011ad0:	3718      	adds	r7, #24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8011ad8:	b5b0      	push	{r4, r5, r7, lr}
 8011ada:	b08c      	sub	sp, #48	; 0x30
 8011adc:	af04      	add	r7, sp, #16
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
 8011ae4:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7ff fd47 	bl	801157c <GetBufferSize>
 8011aee:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8011af0:	492c      	ldr	r1, [pc, #176]	; (8011ba4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	4613      	mov	r3, r2
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	1a9b      	subs	r3, r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	440b      	add	r3, r1
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	461c      	mov	r4, r3
 8011b02:	4928      	ldr	r1, [pc, #160]	; (8011ba4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	4613      	mov	r3, r2
 8011b08:	00db      	lsls	r3, r3, #3
 8011b0a:	1a9b      	subs	r3, r3, r2
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	440b      	add	r3, r1
 8011b10:	330c      	adds	r3, #12
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	fb02 f203 	mul.w	r2, r2, r3
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	18d1      	adds	r1, r2, r3
 8011b1e:	4821      	ldr	r0, [pc, #132]	; (8011ba4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	4613      	mov	r3, r2
 8011b24:	00db      	lsls	r3, r3, #3
 8011b26:	1a9b      	subs	r3, r3, r2
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	4403      	add	r3, r0
 8011b2c:	3314      	adds	r3, #20
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	fb03 f301 	mul.w	r3, r3, r1
 8011b34:	4618      	mov	r0, r3
 8011b36:	491b      	ldr	r1, [pc, #108]	; (8011ba4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	1a9b      	subs	r3, r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	440b      	add	r3, r1
 8011b44:	3308      	adds	r3, #8
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	fb03 f302 	mul.w	r3, r3, r2
 8011b50:	4403      	add	r3, r0
 8011b52:	4423      	add	r3, r4
 8011b54:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8011b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	da00      	bge.n	8011b5e <LCD_LL_DrawBitmap16bpp+0x86>
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	105b      	asrs	r3, r3, #1
 8011b60:	461a      	mov	r2, r3
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	1ad3      	subs	r3, r2, r3
 8011b66:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8011b68:	490e      	ldr	r1, [pc, #56]	; (8011ba4 <LCD_LL_DrawBitmap16bpp+0xcc>)
 8011b6a:	68fa      	ldr	r2, [r7, #12]
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	00db      	lsls	r3, r3, #3
 8011b70:	1a9b      	subs	r3, r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	440b      	add	r3, r1
 8011b76:	330c      	adds	r3, #12
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	69bc      	ldr	r4, [r7, #24]
 8011b84:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8011b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	6939      	ldr	r1, [r7, #16]
 8011b8c:	9102      	str	r1, [sp, #8]
 8011b8e:	9201      	str	r2, [sp, #4]
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	462b      	mov	r3, r5
 8011b94:	4622      	mov	r2, r4
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	f7ff fbd4 	bl	8011344 <DMA2D_CopyBuffer>
}
 8011b9c:	bf00      	nop
 8011b9e:	3720      	adds	r7, #32
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8011ba4:	2002b0e0 	.word	0x2002b0e0

08011ba8 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8011ba8:	b5b0      	push	{r4, r5, r7, lr}
 8011baa:	b08c      	sub	sp, #48	; 0x30
 8011bac:	af04      	add	r7, sp, #16
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7ff fcdf 	bl	801157c <GetBufferSize>
 8011bbe:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8011bc0:	492c      	ldr	r1, [pc, #176]	; (8011c74 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	00db      	lsls	r3, r3, #3
 8011bc8:	1a9b      	subs	r3, r3, r2
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	440b      	add	r3, r1
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	461c      	mov	r4, r3
 8011bd2:	4928      	ldr	r1, [pc, #160]	; (8011c74 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	00db      	lsls	r3, r3, #3
 8011bda:	1a9b      	subs	r3, r3, r2
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	440b      	add	r3, r1
 8011be0:	330c      	adds	r3, #12
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	fb02 f203 	mul.w	r2, r2, r3
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	18d1      	adds	r1, r2, r3
 8011bee:	4821      	ldr	r0, [pc, #132]	; (8011c74 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	00db      	lsls	r3, r3, #3
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	4403      	add	r3, r0
 8011bfc:	3314      	adds	r3, #20
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	fb03 f301 	mul.w	r3, r3, r1
 8011c04:	4618      	mov	r0, r3
 8011c06:	491b      	ldr	r1, [pc, #108]	; (8011c74 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	00db      	lsls	r3, r3, #3
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	440b      	add	r3, r1
 8011c14:	3308      	adds	r3, #8
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	461a      	mov	r2, r3
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	fb03 f302 	mul.w	r3, r3, r2
 8011c20:	4403      	add	r3, r0
 8011c22:	4423      	add	r3, r4
 8011c24:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da00      	bge.n	8011c2e <LCD_LL_DrawBitmap32bpp+0x86>
 8011c2c:	3303      	adds	r3, #3
 8011c2e:	109b      	asrs	r3, r3, #2
 8011c30:	461a      	mov	r2, r3
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8011c38:	490e      	ldr	r1, [pc, #56]	; (8011c74 <LCD_LL_DrawBitmap32bpp+0xcc>)
 8011c3a:	68fa      	ldr	r2, [r7, #12]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	00db      	lsls	r3, r3, #3
 8011c40:	1a9b      	subs	r3, r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	440b      	add	r3, r1
 8011c46:	330c      	adds	r3, #12
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	69bc      	ldr	r4, [r7, #24]
 8011c54:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8011c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c58:	697a      	ldr	r2, [r7, #20]
 8011c5a:	6939      	ldr	r1, [r7, #16]
 8011c5c:	9102      	str	r1, [sp, #8]
 8011c5e:	9201      	str	r2, [sp, #4]
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	462b      	mov	r3, r5
 8011c64:	4622      	mov	r2, r4
 8011c66:	6839      	ldr	r1, [r7, #0]
 8011c68:	f7ff fba6 	bl	80113b8 <DMA2D_CopyBufferWithAlpha>
}
 8011c6c:	bf00      	nop
 8011c6e:	3720      	adds	r7, #32
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bdb0      	pop	{r4, r5, r7, pc}
 8011c74:	2002b0e0 	.word	0x2002b0e0

08011c78 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8011c78:	b590      	push	{r4, r7, lr}
 8011c7a:	b08f      	sub	sp, #60	; 0x3c
 8011c7c:	af04      	add	r7, sp, #16
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	607a      	str	r2, [r7, #4]
 8011c84:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7ff fc77 	bl	801157c <GetBufferSize>
 8011c8e:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8011c90:	492c      	ldr	r1, [pc, #176]	; (8011d44 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	4613      	mov	r3, r2
 8011c96:	00db      	lsls	r3, r3, #3
 8011c98:	1a9b      	subs	r3, r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	440b      	add	r3, r1
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	461c      	mov	r4, r3
 8011ca2:	4928      	ldr	r1, [pc, #160]	; (8011d44 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8011ca4:	68fa      	ldr	r2, [r7, #12]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	00db      	lsls	r3, r3, #3
 8011caa:	1a9b      	subs	r3, r3, r2
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	440b      	add	r3, r1
 8011cb0:	330c      	adds	r3, #12
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	fb02 f203 	mul.w	r2, r2, r3
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	18d1      	adds	r1, r2, r3
 8011cbe:	4821      	ldr	r0, [pc, #132]	; (8011d44 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	1a9b      	subs	r3, r3, r2
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	4403      	add	r3, r0
 8011ccc:	3314      	adds	r3, #20
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	fb03 f301 	mul.w	r3, r3, r1
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	491b      	ldr	r1, [pc, #108]	; (8011d44 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	00db      	lsls	r3, r3, #3
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	3308      	adds	r3, #8
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	461a      	mov	r2, r3
 8011cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cec:	fb03 f302 	mul.w	r3, r3, r2
 8011cf0:	4403      	add	r3, r0
 8011cf2:	4423      	add	r3, r4
 8011cf4:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8011cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	1ad3      	subs	r3, r2, r3
 8011cfc:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8011cfe:	4911      	ldr	r1, [pc, #68]	; (8011d44 <LCD_LL_DrawBitmap8bpp+0xcc>)
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	4613      	mov	r3, r2
 8011d04:	00db      	lsls	r3, r3, #3
 8011d06:	1a9b      	subs	r3, r3, r2
 8011d08:	009b      	lsls	r3, r3, #2
 8011d0a:	440b      	add	r3, r1
 8011d0c:	330c      	adds	r3, #12
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d12:	1ad3      	subs	r3, r2, r3
 8011d14:	61bb      	str	r3, [r7, #24]
  PixelFormat = GetPixelformat(LayerIndex);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff fa01 	bl	8011120 <GetPixelformat>
 8011d1e:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8011d20:	6a39      	ldr	r1, [r7, #32]
 8011d22:	69f8      	ldr	r0, [r7, #28]
 8011d24:	69bc      	ldr	r4, [r7, #24]
 8011d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d2a:	9202      	str	r2, [sp, #8]
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	4623      	mov	r3, r4
 8011d34:	4602      	mov	r2, r0
 8011d36:	6838      	ldr	r0, [r7, #0]
 8011d38:	f7ff fdba 	bl	80118b0 <DMA2D_DrawBitmapL8>
}
 8011d3c:	bf00      	nop
 8011d3e:	372c      	adds	r7, #44	; 0x2c
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd90      	pop	{r4, r7, pc}
 8011d44:	2002b0e0 	.word	0x2002b0e0

08011d48 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8011d4e:	2300      	movs	r3, #0
 8011d50:	2200      	movs	r2, #0
 8011d52:	4953      	ldr	r1, [pc, #332]	; (8011ea0 <LCD_X_Config+0x158>)
 8011d54:	4853      	ldr	r0, [pc, #332]	; (8011ea4 <LCD_X_Config+0x15c>)
 8011d56:	f012 f81d 	bl	8023d94 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8011d5a:	2000      	movs	r0, #0
 8011d5c:	f00f fc22 	bl	80215a4 <LCD_GetSwapXYEx>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00e      	beq.n	8011d84 <LCD_X_Config+0x3c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8011d66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011d6a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f00f fb40 	bl	80213f4 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8011d74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011d78:	f44f 7188 	mov.w	r1, #272	; 0x110
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	f00f fb1f 	bl	80213c0 <LCD_SetVSizeEx>
 8011d82:	e00d      	b.n	8011da0 <LCD_X_Config+0x58>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8011d84:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011d88:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	f00f fb31 	bl	80213f4 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8011d92:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011d96:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	f00f fb10 	bl	80213c0 <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8011da0:	4b41      	ldr	r3, [pc, #260]	; (8011ea8 <LCD_X_Config+0x160>)
 8011da2:	2200      	movs	r2, #0
 8011da4:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8011da6:	2300      	movs	r3, #0
 8011da8:	607b      	str	r3, [r7, #4]
 8011daa:	e059      	b.n	8011e60 <LCD_X_Config+0x118>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8011dac:	4a3f      	ldr	r2, [pc, #252]	; (8011eac <LCD_X_Config+0x164>)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011db4:	483c      	ldr	r0, [pc, #240]	; (8011ea8 <LCD_X_Config+0x160>)
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	4613      	mov	r3, r2
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	1a9b      	subs	r3, r3, r2
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	4403      	add	r3, r0
 8011dc2:	3318      	adds	r3, #24
 8011dc4:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8011dc6:	4938      	ldr	r1, [pc, #224]	; (8011ea8 <LCD_X_Config+0x160>)
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	440b      	add	r3, r1
 8011dd4:	3304      	adds	r3, #4
 8011dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dda:	601a      	str	r2, [r3, #0]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f00f fba8 	bl	8021534 <LCD_GetBitsPerPixelEx>
 8011de4:	4603      	mov	r3, r0
 8011de6:	10d9      	asrs	r1, r3, #3
 8011de8:	482f      	ldr	r0, [pc, #188]	; (8011ea8 <LCD_X_Config+0x160>)
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	4613      	mov	r3, r2
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	1a9b      	subs	r3, r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4403      	add	r3, r0
 8011df6:	3314      	adds	r3, #20
 8011df8:	6019      	str	r1, [r3, #0]
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4a2c      	ldr	r2, [pc, #176]	; (8011eb0 <LCD_X_Config+0x168>)
 8011dfe:	2121      	movs	r1, #33	; 0x21
 8011e00:	4618      	mov	r0, r3
 8011e02:	f00f fb45 	bl	8021490 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	4a2a      	ldr	r2, [pc, #168]	; (8011eb4 <LCD_X_Config+0x16c>)
 8011e0a:	2123      	movs	r1, #35	; 0x23
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f00f fb3f 	bl	8021490 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4a28      	ldr	r2, [pc, #160]	; (8011eb8 <LCD_X_Config+0x170>)
 8011e16:	2119      	movs	r1, #25
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f00f fb39 	bl	8021490 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4a26      	ldr	r2, [pc, #152]	; (8011ebc <LCD_X_Config+0x174>)
 8011e22:	2125      	movs	r1, #37	; 0x25
 8011e24:	4618      	mov	r0, r3
 8011e26:	f00f fb33 	bl	8021490 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a24      	ldr	r2, [pc, #144]	; (8011ec0 <LCD_X_Config+0x178>)
 8011e2e:	2124      	movs	r1, #36	; 0x24
 8011e30:	4618      	mov	r0, r3
 8011e32:	f00f fb2d 	bl	8021490 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4a22      	ldr	r2, [pc, #136]	; (8011ec4 <LCD_X_Config+0x17c>)
 8011e3a:	2128      	movs	r1, #40	; 0x28
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f00f fb27 	bl	8021490 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	4918      	ldr	r1, [pc, #96]	; (8011ea8 <LCD_X_Config+0x160>)
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	4613      	mov	r3, r2
 8011e4a:	00db      	lsls	r3, r3, #3
 8011e4c:	1a9b      	subs	r3, r3, r2
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	440b      	add	r3, r1
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4619      	mov	r1, r3
 8011e56:	f00f fa9b 	bl	8021390 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	607b      	str	r3, [r7, #4]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d0a2      	beq.n	8011dac <LCD_X_Config+0x64>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8011e66:	4918      	ldr	r1, [pc, #96]	; (8011ec8 <LCD_X_Config+0x180>)
 8011e68:	4818      	ldr	r0, [pc, #96]	; (8011ecc <LCD_X_Config+0x184>)
 8011e6a:	f014 fafb 	bl	8026464 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8011e6e:	4918      	ldr	r1, [pc, #96]	; (8011ed0 <LCD_X_Config+0x188>)
 8011e70:	4818      	ldr	r0, [pc, #96]	; (8011ed4 <LCD_X_Config+0x18c>)
 8011e72:	f014 f8a5 	bl	8025fc0 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8011e76:	4918      	ldr	r1, [pc, #96]	; (8011ed8 <LCD_X_Config+0x190>)
 8011e78:	4818      	ldr	r0, [pc, #96]	; (8011edc <LCD_X_Config+0x194>)
 8011e7a:	f014 fa61 	bl	8026340 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8011e7e:	4918      	ldr	r1, [pc, #96]	; (8011ee0 <LCD_X_Config+0x198>)
 8011e80:	4818      	ldr	r0, [pc, #96]	; (8011ee4 <LCD_X_Config+0x19c>)
 8011e82:	f014 f807 	bl	8025e94 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8011e86:	4918      	ldr	r1, [pc, #96]	; (8011ee8 <LCD_X_Config+0x1a0>)
 8011e88:	4818      	ldr	r0, [pc, #96]	; (8011eec <LCD_X_Config+0x1a4>)
 8011e8a:	f014 f9b1 	bl	80261f0 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8011e8e:	4918      	ldr	r1, [pc, #96]	; (8011ef0 <LCD_X_Config+0x1a8>)
 8011e90:	4818      	ldr	r0, [pc, #96]	; (8011ef4 <LCD_X_Config+0x1ac>)
 8011e92:	f010 fe89 	bl	8022ba8 <GUI_SetFuncDrawAlpha>
}
 8011e96:	bf00      	nop
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	08032038 	.word	0x08032038
 8011ea4:	08031e7c 	.word	0x08031e7c
 8011ea8:	2002b0e0 	.word	0x2002b0e0
 8011eac:	200000bc 	.word	0x200000bc
 8011eb0:	080115d5 	.word	0x080115d5
 8011eb4:	08011689 	.word	0x08011689
 8011eb8:	080117b1 	.word	0x080117b1
 8011ebc:	08011c79 	.word	0x08011c79
 8011ec0:	08011ad9 	.word	0x08011ad9
 8011ec4:	08011ba9 	.word	0x08011ba9
 8011ec8:	0801107d 	.word	0x0801107d
 8011ecc:	08011055 	.word	0x08011055
 8011ed0:	0801102d 	.word	0x0801102d
 8011ed4:	08011005 	.word	0x08011005
 8011ed8:	080110cd 	.word	0x080110cd
 8011edc:	080110a5 	.word	0x080110a5
 8011ee0:	08010fdd 	.word	0x08010fdd
 8011ee4:	08010fb5 	.word	0x08010fb5
 8011ee8:	08010f8d 	.word	0x08010f8d
 8011eec:	08010f65 	.word	0x08010f65
 8011ef0:	080119ad 	.word	0x080119ad
 8011ef4:	08011a85 	.word	0x08011a85

08011ef8 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8011ef8:	b590      	push	{r4, r7, lr}
 8011efa:	b08b      	sub	sp, #44	; 0x2c
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
 int r = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	3b03      	subs	r3, #3
 8011f0c:	2b0b      	cmp	r3, #11
 8011f0e:	f200 80fa 	bhi.w	8012106 <LCD_X_DisplayDriver+0x20e>
 8011f12:	a201      	add	r2, pc, #4	; (adr r2, 8011f18 <LCD_X_DisplayDriver+0x20>)
 8011f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f18:	08011f49 	.word	0x08011f49
 8011f1c:	08011fb1 	.word	0x08011fb1
 8011f20:	08011fbf 	.word	0x08011fbf
 8011f24:	08011fd1 	.word	0x08011fd1
 8011f28:	08012061 	.word	0x08012061
 8011f2c:	0801204b 	.word	0x0801204b
 8011f30:	08011fe3 	.word	0x08011fe3
 8011f34:	080120af 	.word	0x080120af
 8011f38:	08012107 	.word	0x08012107
 8011f3c:	080120bf 	.word	0x080120bf
 8011f40:	080120db 	.word	0x080120db
 8011f44:	08011f99 	.word	0x08011f99
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8011f48:	4973      	ldr	r1, [pc, #460]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 8011f4a:	68fa      	ldr	r2, [r7, #12]
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	00db      	lsls	r3, r3, #3
 8011f50:	1a9b      	subs	r3, r3, r2
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	440b      	add	r3, r1
 8011f56:	6819      	ldr	r1, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6858      	ldr	r0, [r3, #4]
 8011f5c:	4c6e      	ldr	r4, [pc, #440]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	4613      	mov	r3, r2
 8011f62:	00db      	lsls	r3, r3, #3
 8011f64:	1a9b      	subs	r3, r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	4423      	add	r3, r4
 8011f6a:	330c      	adds	r3, #12
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	fb03 f000 	mul.w	r0, r3, r0
 8011f72:	4c69      	ldr	r4, [pc, #420]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	4613      	mov	r3, r2
 8011f78:	00db      	lsls	r3, r3, #3
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	4423      	add	r3, r4
 8011f80:	3314      	adds	r3, #20
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	fb03 f300 	mul.w	r3, r3, r0
 8011f88:	440b      	add	r3, r1
 8011f8a:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	6a39      	ldr	r1, [r7, #32]
 8011f90:	4862      	ldr	r0, [pc, #392]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011f92:	f7f1 fb14 	bl	80035be <HAL_LTDC_SetAddress>
    break;
 8011f96:	e0b9      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SHOWBUFFER: 
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6819      	ldr	r1, [r3, #0]
 8011f9c:	485e      	ldr	r0, [pc, #376]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	00db      	lsls	r3, r3, #3
 8011fa4:	1a9b      	subs	r3, r3, r2
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	4403      	add	r3, r0
 8011faa:	3304      	adds	r3, #4
 8011fac:	6019      	str	r1, [r3, #0]
    break;
 8011fae:	e0ad      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETLUTENTRY: 
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8011fb0:	6879      	ldr	r1, [r7, #4]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	4859      	ldr	r0, [pc, #356]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fb8:	f7f1 f99d 	bl	80032f6 <HAL_LTDC_ConfigCLUT>
    break;
 8011fbc:	e0a6      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc);
 8011fbe:	4b57      	ldr	r3, [pc, #348]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a56      	ldr	r2, [pc, #344]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fc4:	6812      	ldr	r2, [r2, #0]
 8011fc6:	6992      	ldr	r2, [r2, #24]
 8011fc8:	f042 0201 	orr.w	r2, r2, #1
 8011fcc:	619a      	str	r2, [r3, #24]
    break;
 8011fce:	e09d      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc);
 8011fd0:	4b52      	ldr	r3, [pc, #328]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4a51      	ldr	r2, [pc, #324]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fd6:	6812      	ldr	r2, [r2, #0]
 8011fd8:	6992      	ldr	r2, [r2, #24]
 8011fda:	f022 0201 	bic.w	r2, r2, #1
 8011fde:	619a      	str	r2, [r3, #24]
    break;
 8011fe0:	e094      	b.n	801210c <LCD_X_DisplayDriver+0x214>
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d113      	bne.n	8012012 <LCD_X_DisplayDriver+0x11a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8011fea:	4b4c      	ldr	r3, [pc, #304]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	01db      	lsls	r3, r3, #7
 8011ff4:	4413      	add	r3, r2
 8011ff6:	3384      	adds	r3, #132	; 0x84
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	4b48      	ldr	r3, [pc, #288]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4619      	mov	r1, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	01db      	lsls	r3, r3, #7
 8012004:	440b      	add	r3, r1
 8012006:	3384      	adds	r3, #132	; 0x84
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f043 0301 	orr.w	r3, r3, #1
 801200e:	6013      	str	r3, [r2, #0]
 8012010:	e012      	b.n	8012038 <LCD_X_DisplayDriver+0x140>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8012012:	4b42      	ldr	r3, [pc, #264]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	01db      	lsls	r3, r3, #7
 801201c:	4413      	add	r3, r2
 801201e:	3384      	adds	r3, #132	; 0x84
 8012020:	461a      	mov	r2, r3
 8012022:	4b3e      	ldr	r3, [pc, #248]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4619      	mov	r1, r3
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	01db      	lsls	r3, r3, #7
 801202c:	440b      	add	r3, r1
 801202e:	3384      	adds	r3, #132	; 0x84
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f023 0301 	bic.w	r3, r3, #1
 8012036:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8012038:	4b38      	ldr	r3, [pc, #224]	; (801211c <LCD_X_DisplayDriver+0x224>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a37      	ldr	r2, [pc, #220]	; (801211c <LCD_X_DisplayDriver+0x224>)
 801203e:	6812      	ldr	r2, [r2, #0]
 8012040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012042:	f042 0201 	orr.w	r2, r2, #1
 8012046:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8012048:	e060      	b.n	801210c <LCD_X_DisplayDriver+0x214>
    
  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc, 
                               ((LCD_X_SETPOS_INFO *)pData)->xPos, 
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 801204e:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8012054:	461a      	mov	r2, r3
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	4830      	ldr	r0, [pc, #192]	; (801211c <LCD_X_DisplayDriver+0x224>)
 801205a:	f7f1 fa34 	bl	80034c6 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 801205e:	e055      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8012060:	f107 0214 	add.w	r2, r7, #20
 8012064:	f107 0318 	add.w	r3, r7, #24
 8012068:	4619      	mov	r1, r3
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f011 f9ca 	bl	8023404 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6819      	ldr	r1, [r3, #0]
 8012074:	4828      	ldr	r0, [pc, #160]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	4613      	mov	r3, r2
 801207a:	00db      	lsls	r3, r3, #3
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	4403      	add	r3, r0
 8012082:	330c      	adds	r3, #12
 8012084:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6859      	ldr	r1, [r3, #4]
 801208a:	4823      	ldr	r0, [pc, #140]	; (8012118 <LCD_X_DisplayDriver+0x220>)
 801208c:	68fa      	ldr	r2, [r7, #12]
 801208e:	4613      	mov	r3, r2
 8012090:	00db      	lsls	r3, r3, #3
 8012092:	1a9b      	subs	r3, r3, r2
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	4403      	add	r3, r0
 8012098:	3310      	adds	r3, #16
 801209a:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	4619      	mov	r1, r3
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	461a      	mov	r2, r3
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	481d      	ldr	r0, [pc, #116]	; (801211c <LCD_X_DisplayDriver+0x224>)
 80120a8:	f7f1 fa0d 	bl	80034c6 <HAL_LTDC_SetWindowPosition>
    break;
 80120ac:	e02e      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	68fa      	ldr	r2, [r7, #12]
 80120b4:	4619      	mov	r1, r3
 80120b6:	4819      	ldr	r0, [pc, #100]	; (801211c <LCD_X_DisplayDriver+0x224>)
 80120b8:	f7f1 fa4b 	bl	8003552 <HAL_LTDC_SetAlpha>
    break;
 80120bc:	e026      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d004      	beq.n	80120d0 <LCD_X_DisplayDriver+0x1d8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80120c6:	68f9      	ldr	r1, [r7, #12]
 80120c8:	4814      	ldr	r0, [pc, #80]	; (801211c <LCD_X_DisplayDriver+0x224>)
 80120ca:	f7f1 f988 	bl	80033de <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
    }
    break;
 80120ce:	e01d      	b.n	801210c <LCD_X_DisplayDriver+0x214>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 80120d0:	68f9      	ldr	r1, [r7, #12]
 80120d2:	4812      	ldr	r0, [pc, #72]	; (801211c <LCD_X_DisplayDriver+0x224>)
 80120d4:	f7f1 f9bd 	bl	8003452 <HAL_LTDC_DisableColorKeying>
    break;
 80120d8:	e018      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	0c1b      	lsrs	r3, r3, #16
 80120e0:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80120ea:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	041b      	lsls	r3, r3, #16
 80120f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80120f6:	4313      	orrs	r3, r2
 80120f8:	61fb      	str	r3, [r7, #28]
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	69f9      	ldr	r1, [r7, #28]
 80120fe:	4807      	ldr	r0, [pc, #28]	; (801211c <LCD_X_DisplayDriver+0x224>)
 8012100:	f7f1 f8b4 	bl	800326c <HAL_LTDC_ConfigColorKeying>
    break;
 8012104:	e002      	b.n	801210c <LCD_X_DisplayDriver+0x214>

  default:
    r = -1;
 8012106:	f04f 33ff 	mov.w	r3, #4294967295
 801210a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r; 
 801210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801210e:	4618      	mov	r0, r3
 8012110:	372c      	adds	r7, #44	; 0x2c
 8012112:	46bd      	mov	sp, r7
 8012114:	bd90      	pop	{r4, r7, pc}
 8012116:	bf00      	nop
 8012118:	2002b0e0 	.word	0x2002b0e0
 801211c:	2002b3f8 	.word	0x2002b3f8

08012120 <GRAPHICS_HW_Init>:
  
   OS_TimeMS++;
} 

void GRAPHICS_HW_Init(void)
{ 
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
  MX_FMC_Init(); 
 8012124:	f7fe fcd4 	bl	8010ad0 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8012128:	f7fe fd1e 	bl	8010b68 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 801212c:	f7fe fc4e 	bl	80109cc <MX_LCD_Init>
  MX_DMA2D_Init();
 8012130:	f7fe fd7a 	bl	8010c28 <MX_DMA2D_Init>
  DMA2D_Init();
 8012134:	f7ff f8e4 	bl	8011300 <DMA2D_Init>
 
}
 8012138:	bf00      	nop
 801213a:	bd80      	pop	{r7, pc}

0801213c <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	af00      	add	r7, sp, #0
  /* Initialize the GUI */
  GUI_Init();
 8012140:	f011 ffdc 	bl	80240fc <GUI_Init>

  /* Activate the use of memory device feature */
     /* USER CODE BEGIN WM_SetCreateFlags */
      //WM_SetCreateFlags(WM_CF_MEMDEV);
    /* USER CODE END WM_SetCreateFlags */
}
 8012144:	bf00      	nop
 8012146:	bd80      	pop	{r7, pc}

08012148 <String_GetString>:
//
//         Any character typed other than those above will be masked with 0x7F and stored in the buffer
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_GetString( uint8_t *Buffer )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
    uint16_t Length = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	82fb      	strh	r3, [r7, #22]
    uint16_t Byte = 1;
 8012154:	2301      	movs	r3, #1
 8012156:	82bb      	strh	r3, [r7, #20]
    uint8_t  *Ptr;
    //
    //  Looop until exited
    //
    Ptr = Buffer;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	613b      	str	r3, [r7, #16]
    while ( Byte != 0 )
 801215c:	e081      	b.n	8012262 <String_GetString+0x11a>
    {
        //
        //  Get the byte
        //
        Byte = String_GetByte() & ASCII_MASK;
 801215e:	f000 f8bd 	bl	80122dc <String_GetByte>
 8012162:	4603      	mov	r3, r0
 8012164:	b29b      	uxth	r3, r3
 8012166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801216a:	82bb      	strh	r3, [r7, #20]
        //
        //  Handle special characters
        //
        switch ( Byte )
 801216c:	8abb      	ldrh	r3, [r7, #20]
 801216e:	3b03      	subs	r3, #3
 8012170:	2b18      	cmp	r3, #24
 8012172:	d86c      	bhi.n	801224e <String_GetString+0x106>
 8012174:	a201      	add	r2, pc, #4	; (adr r2, 801217c <String_GetString+0x34>)
 8012176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217a:	bf00      	nop
 801217c:	0801220b 	.word	0x0801220b
 8012180:	0801224f 	.word	0x0801224f
 8012184:	0801224f 	.word	0x0801224f
 8012188:	0801224f 	.word	0x0801224f
 801218c:	0801224f 	.word	0x0801224f
 8012190:	080121ed 	.word	0x080121ed
 8012194:	0801224f 	.word	0x0801224f
 8012198:	080121e1 	.word	0x080121e1
 801219c:	0801224f 	.word	0x0801224f
 80121a0:	0801224f 	.word	0x0801224f
 80121a4:	080121e1 	.word	0x080121e1
 80121a8:	0801224f 	.word	0x0801224f
 80121ac:	0801224f 	.word	0x0801224f
 80121b0:	0801224f 	.word	0x0801224f
 80121b4:	0801224f 	.word	0x0801224f
 80121b8:	08012215 	.word	0x08012215
 80121bc:	0801224f 	.word	0x0801224f
 80121c0:	0801224f 	.word	0x0801224f
 80121c4:	08012229 	.word	0x08012229
 80121c8:	0801224f 	.word	0x0801224f
 80121cc:	08012229 	.word	0x08012229
 80121d0:	0801224f 	.word	0x0801224f
 80121d4:	0801224f 	.word	0x0801224f
 80121d8:	0801224f 	.word	0x0801224f
 80121dc:	08012229 	.word	0x08012229
            case '\n':
            case '\r':
                //
                //  Add a null to the end of the buffer
                //
                *Ptr = '\0';
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	2200      	movs	r2, #0
 80121e4:	701a      	strb	r2, [r3, #0]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 80121e6:	2300      	movs	r3, #0
 80121e8:	82bb      	strh	r3, [r7, #20]
                break;
 80121ea:	e03a      	b.n	8012262 <String_GetString+0x11a>
            case '\b':
                //
                //  If we have characters to delete
                //  then delete the last one and decrement the length
                //
                if (Ptr > Buffer )
 80121ec:	693a      	ldr	r2, [r7, #16]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d936      	bls.n	8012262 <String_GetString+0x11a>
                {
                    Ptr--;
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	3b01      	subs	r3, #1
 80121f8:	613b      	str	r3, [r7, #16]
                    Length--;
 80121fa:	8afb      	ldrh	r3, [r7, #22]
 80121fc:	3b01      	subs	r3, #1
 80121fe:	82fb      	strh	r3, [r7, #22]
                    //
                    //  Erase the character
                    //
                    String_PutStringN("\b \b", 3);
 8012200:	2103      	movs	r1, #3
 8012202:	481c      	ldr	r0, [pc, #112]	; (8012274 <String_GetString+0x12c>)
 8012204:	f000 f83a 	bl	801227c <String_PutStringN>
                }
                break;
 8012208:	e02b      	b.n	8012262 <String_GetString+0x11a>
            //
            case 'c' & CONTROL_MASK:
                //
                //  Set the length to zero
                //
                Length = 0;
 801220a:	2300      	movs	r3, #0
 801220c:	82fb      	strh	r3, [r7, #22]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	82bb      	strh	r3, [r7, #20]
                break;
 8012212:	e026      	b.n	8012262 <String_GetString+0x11a>
            //
            case 'r' & CONTROL_MASK:
                //
                //  new line
                //
                String_PutStringN( "\n\r", 2);
 8012214:	2102      	movs	r1, #2
 8012216:	4818      	ldr	r0, [pc, #96]	; (8012278 <String_GetString+0x130>)
 8012218:	f000 f830 	bl	801227c <String_PutStringN>
                //
                //  output buffer
                //
                String_PutStringN( (char *)Buffer, Length );
 801221c:	8afb      	ldrh	r3, [r7, #22]
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f82b 	bl	801227c <String_PutStringN>
                break;
 8012226:	e01c      	b.n	8012262 <String_GetString+0x11a>
            {
                uint16_t Counter;
                //
                //  Point to the beginning of the buffer
                //
                Ptr = Buffer;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	613b      	str	r3, [r7, #16]
                //
                //  Erase the line visually
                //
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 801222c:	2300      	movs	r3, #0
 801222e:	81fb      	strh	r3, [r7, #14]
 8012230:	e006      	b.n	8012240 <String_GetString+0xf8>
                {
                    String_PutStringN("\b \b", 3);
 8012232:	2103      	movs	r1, #3
 8012234:	480f      	ldr	r0, [pc, #60]	; (8012274 <String_GetString+0x12c>)
 8012236:	f000 f821 	bl	801227c <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 801223a:	89fb      	ldrh	r3, [r7, #14]
 801223c:	3301      	adds	r3, #1
 801223e:	81fb      	strh	r3, [r7, #14]
 8012240:	89fa      	ldrh	r2, [r7, #14]
 8012242:	8afb      	ldrh	r3, [r7, #22]
 8012244:	429a      	cmp	r2, r3
 8012246:	d3f4      	bcc.n	8012232 <String_GetString+0xea>
                }
                //
                //  Zero out the length of the string
                //
                Length = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	82fb      	strh	r3, [r7, #22]
                break;
 801224c:	e009      	b.n	8012262 <String_GetString+0x11a>
            //
            default:
                //
                //  Store the byte
                //
                *(Ptr++) = Byte;
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	1c5a      	adds	r2, r3, #1
 8012252:	613a      	str	r2, [r7, #16]
 8012254:	8aba      	ldrh	r2, [r7, #20]
 8012256:	b2d2      	uxtb	r2, r2
 8012258:	701a      	strb	r2, [r3, #0]
                //
                //  Increment the length
                //
                Length++;
 801225a:	8afb      	ldrh	r3, [r7, #22]
 801225c:	3301      	adds	r3, #1
 801225e:	82fb      	strh	r3, [r7, #22]
                //
                // Echo it back to the user
                //
			//String_PutByte( Byte );
                break;
 8012260:	bf00      	nop
    while ( Byte != 0 )
 8012262:	8abb      	ldrh	r3, [r7, #20]
 8012264:	2b00      	cmp	r3, #0
 8012266:	f47f af7a 	bne.w	801215e <String_GetString+0x16>
        }
    }
    return Length;
 801226a:	8afb      	ldrh	r3, [r7, #22]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	0802ba74 	.word	0x0802ba74
 8012278:	0802ba78 	.word	0x0802ba78

0801227c <String_PutStringN>:
//
//  Note:   This routine interfaces directly with the STM32CubeMX Hal
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_PutStringN( char *Buffer, uint16_t Length )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	460b      	mov	r3, r1
 8012286:	807b      	strh	r3, [r7, #2]
    //
    //  Don't do anything if length is zero
    //
    if ( Length > 0 )
 8012288:	887b      	ldrh	r3, [r7, #2]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00d      	beq.n	80122aa <String_PutStringN+0x2e>
        //
#else
            //
            //  Loop through the buffer
            //
            for ( ; Length > 0 ; Length-- )
 801228e:	e009      	b.n	80122a4 <String_PutStringN+0x28>
            {
                //
                //  output a character
                //
                String_PutByte( (uint8_t)*(Buffer++) );
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	1c5a      	adds	r2, r3, #1
 8012294:	607a      	str	r2, [r7, #4]
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	4618      	mov	r0, r3
 801229a:	f000 f80b 	bl	80122b4 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 801229e:	887b      	ldrh	r3, [r7, #2]
 80122a0:	3b01      	subs	r3, #1
 80122a2:	807b      	strh	r3, [r7, #2]
 80122a4:	887b      	ldrh	r3, [r7, #2]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1f2      	bne.n	8012290 <String_PutStringN+0x14>
            }
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    }
    return Length;
 80122aa:	887b      	ldrh	r3, [r7, #2]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	71fb      	strb	r3, [r7, #7]
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 80122be:	1df9      	adds	r1, r7, #7
 80122c0:	f04f 33ff 	mov.w	r3, #4294967295
 80122c4:	2201      	movs	r2, #1
 80122c6:	4804      	ldr	r0, [pc, #16]	; (80122d8 <String_PutByte+0x24>)
 80122c8:	f7f4 fb7f 	bl	80069ca <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
 80122cc:	79fb      	ldrb	r3, [r7, #7]
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	2002baf8 	.word	0x2002baf8

080122dc <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 80122e2:	1df9      	adds	r1, r7, #7
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
 80122e8:	2201      	movs	r2, #1
 80122ea:	4804      	ldr	r0, [pc, #16]	; (80122fc <String_GetByte+0x20>)
 80122ec:	f7f4 fbf8 	bl	8006ae0 <HAL_UART_Receive>
    return Byte;
 80122f0:	79fb      	ldrb	r3, [r7, #7]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	2002baf8 	.word	0x2002baf8

08012300 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
  uint8_t sdramstatus = SDRAM_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	71fb      	strb	r3, [r7, #7]

  /* place for custom code */

  return sdramstatus;
 801230a:	79fb      	ldrb	r3, [r7, #7]
}
 801230c:	4618      	mov	r0, r3
 801230e:	370c      	adds	r7, #12
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8012328:	68f9      	ldr	r1, [r7, #12]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	4806      	ldr	r0, [pc, #24]	; (8012348 <BSP_SDRAM_ReadData+0x30>)
 8012330:	f7f3 fdb8 	bl	8005ea4 <HAL_SDRAM_Read_32b>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 801233a:	2301      	movs	r3, #1
 801233c:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 801233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3718      	adds	r7, #24
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	2002b4e0 	.word	0x2002b4e0

0801234c <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 801235c:	68f9      	ldr	r1, [r7, #12]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	4806      	ldr	r0, [pc, #24]	; (801237c <BSP_SDRAM_WriteData+0x30>)
 8012364:	f7f3 fddd 	bl	8005f22 <HAL_SDRAM_Write_32b>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d001      	beq.n	8012372 <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 8012372:	7dfb      	ldrb	r3, [r7, #23]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3718      	adds	r7, #24
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	2002b4e0 	.word	0x2002b4e0

08012380 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012380:	b580      	push	{r7, lr}
 8012382:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 8012384:	4904      	ldr	r1, [pc, #16]	; (8012398 <MX_FATFS_Init+0x18>)
 8012386:	4805      	ldr	r0, [pc, #20]	; (801239c <MX_FATFS_Init+0x1c>)
 8012388:	f7f9 fbf4 	bl	800bb74 <FATFS_LinkDriver>
 801238c:	4603      	mov	r3, r0
 801238e:	461a      	mov	r2, r3
 8012390:	4b03      	ldr	r3, [pc, #12]	; (80123a0 <MX_FATFS_Init+0x20>)
 8012392:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012394:	bf00      	nop
 8012396:	bd80      	pop	{r7, pc}
 8012398:	2002b514 	.word	0x2002b514
 801239c:	0802f028 	.word	0x0802f028
 80123a0:	2002b97c 	.word	0x2002b97c

080123a4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80123a4:	b480      	push	{r7}
 80123a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80123a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <myPrintf>:
DMA_HandleTypeDef hdma_memtomem_dma2_stream2;
DMA_HandleTypeDef hdma_memtomem_dma2_stream1;
SDRAM_HandleTypeDef hsdram1;

// https://www.experts-exchange.com/questions/29003980/Display-a-Float-Variable-in-C-without-using-the-function-printf.html
char *myPrintf(float source) {
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b086      	sub	sp, #24
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	ed87 0a01 	vstr	s0, [r7, #4]
	int iValue, dValue;
	static char Display[20];

	// iValue contains the integer portion of the
	// floating point number.
	iValue = source;
 80123be:	edd7 7a01 	vldr	s15, [r7, #4]
 80123c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123c6:	ee17 3a90 	vmov	r3, s15
 80123ca:	60fb      	str	r3, [r7, #12]

	// dValue contains the first 2 digits of the fractional part
	//of the floating point number.
	dValue = (source * 100) - (iValue * 100);
 80123cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80123d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012414 <myPrintf+0x60>
 80123d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2264      	movs	r2, #100	; 0x64
 80123dc:	fb02 f303 	mul.w	r3, r2, r3
 80123e0:	ee07 3a90 	vmov	s15, r3
 80123e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123f0:	ee17 3a90 	vmov	r3, s15
 80123f4:	60bb      	str	r3, [r7, #8]

	snprintf(Display, 20, "%d%c%d", iValue, '.', dValue);
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	9301      	str	r3, [sp, #4]
 80123fa:	232e      	movs	r3, #46	; 0x2e
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	4a05      	ldr	r2, [pc, #20]	; (8012418 <myPrintf+0x64>)
 8012402:	2114      	movs	r1, #20
 8012404:	4805      	ldr	r0, [pc, #20]	; (801241c <myPrintf+0x68>)
 8012406:	f002 f9f3 	bl	80147f0 <snprintf>

	return Display;
 801240a:	4b04      	ldr	r3, [pc, #16]	; (801241c <myPrintf+0x68>)
}
 801240c:	4618      	mov	r0, r3
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	42c80000 	.word	0x42c80000
 8012418:	0802ba7c 	.word	0x0802ba7c
 801241c:	2002b100 	.word	0x2002b100

08012420 <MY_LCD_DisplayStringAtLine>:

void MY_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr, uint8_t mode) {
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	4603      	mov	r3, r0
 8012428:	6039      	str	r1, [r7, #0]
 801242a:	80fb      	strh	r3, [r7, #6]
 801242c:	4613      	mov	r3, r2
 801242e:	717b      	strb	r3, [r7, #5]

	switch (mode) {
 8012430:	797b      	ldrb	r3, [r7, #5]
 8012432:	2b02      	cmp	r3, #2
 8012434:	d011      	beq.n	801245a <MY_LCD_DisplayStringAtLine+0x3a>
 8012436:	2b03      	cmp	r3, #3
 8012438:	d01d      	beq.n	8012476 <MY_LCD_DisplayStringAtLine+0x56>
 801243a:	2b01      	cmp	r3, #1
 801243c:	d129      	bne.n	8012492 <MY_LCD_DisplayStringAtLine+0x72>
	case 1:
		BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 801243e:	f7ee fe65 	bl	800110c <BSP_LCD_GetFont>
 8012442:	4603      	mov	r3, r0
 8012444:	88db      	ldrh	r3, [r3, #6]
 8012446:	88fa      	ldrh	r2, [r7, #6]
 8012448:	fb12 f303 	smulbb	r3, r2, r3
 801244c:	b299      	uxth	r1, r3
 801244e:	2303      	movs	r3, #3
 8012450:	683a      	ldr	r2, [r7, #0]
 8012452:	2000      	movs	r0, #0
 8012454:	f7ee ff40 	bl	80012d8 <BSP_LCD_DisplayStringAt>
		break;
 8012458:	e029      	b.n	80124ae <MY_LCD_DisplayStringAtLine+0x8e>
	case 2:
		BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 801245a:	f7ee fe57 	bl	800110c <BSP_LCD_GetFont>
 801245e:	4603      	mov	r3, r0
 8012460:	88db      	ldrh	r3, [r3, #6]
 8012462:	88fa      	ldrh	r2, [r7, #6]
 8012464:	fb12 f303 	smulbb	r3, r2, r3
 8012468:	b299      	uxth	r1, r3
 801246a:	2301      	movs	r3, #1
 801246c:	683a      	ldr	r2, [r7, #0]
 801246e:	2000      	movs	r0, #0
 8012470:	f7ee ff32 	bl	80012d8 <BSP_LCD_DisplayStringAt>
		break;
 8012474:	e01b      	b.n	80124ae <MY_LCD_DisplayStringAtLine+0x8e>
	case 3:
		BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, RIGHT_MODE);
 8012476:	f7ee fe49 	bl	800110c <BSP_LCD_GetFont>
 801247a:	4603      	mov	r3, r0
 801247c:	88db      	ldrh	r3, [r3, #6]
 801247e:	88fa      	ldrh	r2, [r7, #6]
 8012480:	fb12 f303 	smulbb	r3, r2, r3
 8012484:	b299      	uxth	r1, r3
 8012486:	2302      	movs	r3, #2
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	2000      	movs	r0, #0
 801248c:	f7ee ff24 	bl	80012d8 <BSP_LCD_DisplayStringAt>
		break;
 8012490:	e00d      	b.n	80124ae <MY_LCD_DisplayStringAtLine+0x8e>
	default:
		BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 8012492:	f7ee fe3b 	bl	800110c <BSP_LCD_GetFont>
 8012496:	4603      	mov	r3, r0
 8012498:	88db      	ldrh	r3, [r3, #6]
 801249a:	88fa      	ldrh	r2, [r7, #6]
 801249c:	fb12 f303 	smulbb	r3, r2, r3
 80124a0:	b299      	uxth	r1, r3
 80124a2:	2301      	movs	r3, #1
 80124a4:	683a      	ldr	r2, [r7, #0]
 80124a6:	2000      	movs	r0, #0
 80124a8:	f7ee ff16 	bl	80012d8 <BSP_LCD_DisplayStringAt>
		break;
 80124ac:	bf00      	nop
	}
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <initArray>:

void initArray(Array *a, size_t initialSize) {
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) pvPortMalloc(initialSize * sizeof(uint16_t));
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	005b      	lsls	r3, r3, #1
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fa f881 	bl	800c5cc <pvPortMalloc>
 80124ca:	4602      	mov	r2, r0
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	601a      	str	r2, [r3, #0]
	a->used = 0;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2200      	movs	r2, #0
 80124d4:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	683a      	ldr	r2, [r7, #0]
 80124da:	609a      	str	r2, [r3, #8]
}
 80124dc:	bf00      	nop
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	683a      	ldr	r2, [r7, #0]
 80124f2:	609a      	str	r2, [r3, #8]
	vPortFree(a->array);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fa f92f 	bl	800c75c <vPortFree>
	a->array = (uint16_t *) pvPortMalloc(a->size * sizeof(uint16_t));
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	4618      	mov	r0, r3
 8012506:	f7fa f861 	bl	800c5cc <pvPortMalloc>
 801250a:	4602      	mov	r2, r0
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	601a      	str	r2, [r3, #0]
	a->used = 0;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2200      	movs	r2, #0
 8012514:	605a      	str	r2, [r3, #4]
}
 8012516:	bf00      	nop
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <freeArray>:

void freeArray(Array *a) {
 801251e:	b580      	push	{r7, lr}
 8012520:	b082      	sub	sp, #8
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
	vPortFree(a->array);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4618      	mov	r0, r3
 801252c:	f7fa f916 	bl	800c75c <vPortFree>
	a->array = NULL;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2200      	movs	r2, #0
 8012534:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	609a      	str	r2, [r3, #8]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	689a      	ldr	r2, [r3, #8]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	605a      	str	r2, [r3, #4]
}
 8012544:	bf00      	nop
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <string_parse>:

// mod from
// https://stackoverflow.com/questions/13230253/how-do-i-parse-a-string-in-c
char * string_parse(char * parse_string, uint8_t idx) {
 801254c:	b580      	push	{r7, lr}
 801254e:	b08c      	sub	sp, #48	; 0x30
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]

	char *work_string;
	uint8_t stringArray[30];
	static uint8_t wordArray[30];
	uint8_t i = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t counter = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t argCounter = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t wordCounter = 0;
 801256a:	2300      	movs	r3, #0
 801256c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Let's make a copy for work
	work_string = parse_string;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	62fb      	str	r3, [r7, #44]	; 0x2c

	// And move it to array
	while (*work_string != '\0') {
 8012574:	e010      	b.n	8012598 <string_parse+0x4c>
		stringArray[i] = (int) *work_string;
 8012576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801257a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801257c:	7812      	ldrb	r2, [r2, #0]
 801257e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012582:	440b      	add	r3, r1
 8012584:	f803 2c28 	strb.w	r2, [r3, #-40]
		i++;
 8012588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801258c:	3301      	adds	r3, #1
 801258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		work_string++;
 8012592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012594:	3301      	adds	r3, #1
 8012596:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*work_string != '\0') {
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d1ea      	bne.n	8012576 <string_parse+0x2a>
	}

	// Terminate
	stringArray[i] = '\0';
 80125a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80125a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80125a8:	4413      	add	r3, r2
 80125aa:	2200      	movs	r2, #0
 80125ac:	f803 2c28 	strb.w	r2, [r3, #-40]

	// Main function.
	counter = 0;
 80125b0:	2300      	movs	r3, #0
 80125b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while (stringArray[wordCounter] != '\0') {
 80125b6:	e060      	b.n	801267a <string_parse+0x12e>
		// Puts first word into temporary wordArray.
		while ((stringArray[wordCounter] != ' ')
				&& (stringArray[wordCounter] != '\0')) {
			wordArray[counter++] = stringArray[wordCounter++];
 80125b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 80125c2:	461a      	mov	r2, r3
 80125c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125c8:	1c59      	adds	r1, r3, #1
 80125ca:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
 80125ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80125d2:	440b      	add	r3, r1
 80125d4:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80125d8:	4b2f      	ldr	r3, [pc, #188]	; (8012698 <string_parse+0x14c>)
 80125da:	5499      	strb	r1, [r3, r2]
		while ((stringArray[wordCounter] != ' ')
 80125dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80125e4:	4413      	add	r3, r2
 80125e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80125ea:	2b20      	cmp	r3, #32
 80125ec:	d008      	beq.n	8012600 <string_parse+0xb4>
				&& (stringArray[wordCounter] != '\0')) {
 80125ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80125f6:	4413      	add	r3, r2
 80125f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d1db      	bne.n	80125b8 <string_parse+0x6c>
		}
		wordArray[counter] = '\0';
 8012600:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012604:	4a24      	ldr	r2, [pc, #144]	; (8012698 <string_parse+0x14c>)
 8012606:	2100      	movs	r1, #0
 8012608:	54d1      	strb	r1, [r2, r3]

		// Return the content of wordArray at requested index.
		if (argCounter == idx) {
 801260a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 801260e:	78fb      	ldrb	r3, [r7, #3]
 8012610:	429a      	cmp	r2, r3
 8012612:	d101      	bne.n	8012618 <string_parse+0xcc>
			return wordArray;
 8012614:	4b20      	ldr	r3, [pc, #128]	; (8012698 <string_parse+0x14c>)
 8012616:	e03a      	b.n	801268e <string_parse+0x142>
		} else if (argCounter > idx) {
 8012618:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	429a      	cmp	r2, r3
 8012620:	d903      	bls.n	801262a <string_parse+0xde>
			// Too many arguments
			_Error_Handler(__FILE__, __LINE__);
 8012622:	2187      	movs	r1, #135	; 0x87
 8012624:	481d      	ldr	r0, [pc, #116]	; (801269c <string_parse+0x150>)
 8012626:	f001 fca3 	bl	8013f70 <_Error_Handler>
		}

		//Clears temporary wordArray for new use.
		for (counter = 0; counter < 30; counter++) {
 801262a:	2300      	movs	r3, #0
 801262c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012630:	e009      	b.n	8012646 <string_parse+0xfa>
			wordArray[counter] = '\0';
 8012632:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012636:	4a18      	ldr	r2, [pc, #96]	; (8012698 <string_parse+0x14c>)
 8012638:	2100      	movs	r1, #0
 801263a:	54d1      	strb	r1, [r2, r3]
		for (counter = 0; counter < 30; counter++) {
 801263c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012640:	3301      	adds	r3, #1
 8012642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012646:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801264a:	2b1d      	cmp	r3, #29
 801264c:	d9f1      	bls.n	8012632 <string_parse+0xe6>
		}

		if (stringArray[wordCounter] != '\0') {
 801264e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012652:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012656:	4413      	add	r3, r2
 8012658:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d004      	beq.n	801266a <string_parse+0x11e>
			wordCounter++;
 8012660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012664:	3301      	adds	r3, #1
 8012666:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}

		counter = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		argCounter++;
 8012670:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012674:	3301      	adds	r3, #1
 8012676:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	while (stringArray[wordCounter] != '\0') {
 801267a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801267e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012682:	4413      	add	r3, r2
 8012684:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1a7      	bne.n	80125dc <string_parse+0x90>
	}

	// If we return here. the parse_string had less arguments as requested
	// In that case, return empty string
	return NULL;
 801268c:	2300      	movs	r3, #0
}
 801268e:	4618      	mov	r0, r3
 8012690:	3730      	adds	r7, #48	; 0x30
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	2002b114 	.word	0x2002b114
 801269c:	0802ba84 	.word	0x0802ba84

080126a0 <PlotData>:
	}

	return n;
}

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	683a      	ldr	r2, [r7, #0]
 80126b0:	b291      	uxth	r1, r2
 80126b2:	2201      	movs	r2, #1
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ee feeb 	bl	8001490 <BSP_LCD_DrawPixel>
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
	...

080126c4 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ee fd32 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7ee fce5 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 80126da:	6838      	ldr	r0, [r7, #0]
 80126dc:	f7ee fcca 	bl	8001074 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 80126e0:	4803      	ldr	r0, [pc, #12]	; (80126f0 <InitScreen+0x2c>)
 80126e2:	f7ee fcf9 	bl	80010d8 <BSP_LCD_SetFont>
}
 80126e6:	bf00      	nop
 80126e8:	3708      	adds	r7, #8
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20000008 	.word	0x20000008

080126f4 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b090      	sub	sp, #64	; 0x40
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7ee fd42 	bl	8001188 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 8012704:	f107 030c 	add.w	r3, r7, #12
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	2132      	movs	r1, #50	; 0x32
 801270c:	4618      	mov	r0, r3
 801270e:	f002 f86f 	bl	80147f0 <snprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	b29b      	uxth	r3, r3
 8012716:	f107 020c 	add.w	r2, r7, #12
 801271a:	4611      	mov	r1, r2
 801271c:	4618      	mov	r0, r3
 801271e:	f7ee fe9f 	bl	8001460 <BSP_LCD_DisplayStringAtLine>
}
 8012722:	bf00      	nop
 8012724:	3740      	adds	r7, #64	; 0x40
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
	...

0801272c <CountDown>:

void CountDown(uint32_t millisecs) {
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8012734:	f04f 31ff 	mov.w	r1, #4294967295
 8012738:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801273c:	f7ff ffc2 	bl	80126c4 <InitScreen>

	LCDWrite(5, " ");
 8012740:	4914      	ldr	r1, [pc, #80]	; (8012794 <CountDown+0x68>)
 8012742:	2005      	movs	r0, #5
 8012744:	f7ff ffd6 	bl	80126f4 <LCDWrite>
	HAL_Delay(1);
 8012748:	2001      	movs	r0, #1
 801274a:	f7ef f9a9 	bl	8001aa0 <HAL_Delay>

	LCDWrite(5, "Starting in 3... ");
 801274e:	4912      	ldr	r1, [pc, #72]	; (8012798 <CountDown+0x6c>)
 8012750:	2005      	movs	r0, #5
 8012752:	f7ff ffcf 	bl	80126f4 <LCDWrite>
	HAL_Delay(millisecs);
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7ef f9a2 	bl	8001aa0 <HAL_Delay>

	LCDWrite(5, "Starting in 2... ");
 801275c:	490f      	ldr	r1, [pc, #60]	; (801279c <CountDown+0x70>)
 801275e:	2005      	movs	r0, #5
 8012760:	f7ff ffc8 	bl	80126f4 <LCDWrite>
	HAL_Delay(millisecs);
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ef f99b 	bl	8001aa0 <HAL_Delay>

	LCDWrite(5, "Starting in 1... ");
 801276a:	490d      	ldr	r1, [pc, #52]	; (80127a0 <CountDown+0x74>)
 801276c:	2005      	movs	r0, #5
 801276e:	f7ff ffc1 	bl	80126f4 <LCDWrite>
	HAL_Delay(millisecs);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ef f994 	bl	8001aa0 <HAL_Delay>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 8012778:	490a      	ldr	r1, [pc, #40]	; (80127a4 <CountDown+0x78>)
 801277a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801277e:	f7ff ffa1 	bl	80126c4 <InitScreen>
	LCDWrite(5, "GO!");
 8012782:	4909      	ldr	r1, [pc, #36]	; (80127a8 <CountDown+0x7c>)
 8012784:	2005      	movs	r0, #5
 8012786:	f7ff ffb5 	bl	80126f4 <LCDWrite>
}
 801278a:	bf00      	nop
 801278c:	3708      	adds	r7, #8
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	0802ba98 	.word	0x0802ba98
 8012798:	0802ba9c 	.word	0x0802ba9c
 801279c:	0802bab0 	.word	0x0802bab0
 80127a0:	0802bac4 	.word	0x0802bac4
 80127a4:	ffff0000 	.word	0xffff0000
 80127a8:	0802bad8 	.word	0x0802bad8

080127ac <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b090      	sub	sp, #64	; 0x40
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 80127b4:	f107 0308 	add.w	r3, r7, #8
 80127b8:	6879      	ldr	r1, [r7, #4]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7f8 fbbf 	bl	800af3e <f_opendir>
 80127c0:	4603      	mov	r3, r0
 80127c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80127c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d140      	bne.n	8012850 <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 80127ce:	f107 0308 	add.w	r3, r7, #8
 80127d2:	4922      	ldr	r1, [pc, #136]	; (801285c <scan_files+0xb0>)
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7f8 fc56 	bl	800b086 <f_readdir>
 80127da:	4603      	mov	r3, r0
 80127dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 80127e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d12e      	bne.n	8012846 <scan_files+0x9a>
 80127e8:	4b1c      	ldr	r3, [pc, #112]	; (801285c <scan_files+0xb0>)
 80127ea:	7a5b      	ldrb	r3, [r3, #9]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d02a      	beq.n	8012846 <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 80127f0:	4b1a      	ldr	r3, [pc, #104]	; (801285c <scan_files+0xb0>)
 80127f2:	7a1b      	ldrb	r3, [r3, #8]
 80127f4:	f003 0310 	and.w	r3, r3, #16
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d01b      	beq.n	8012834 <scan_files+0x88>
				i = strlen(path);
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ed fd11 	bl	8000224 <strlen>
 8012802:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012808:	4413      	add	r3, r2
 801280a:	4a15      	ldr	r2, [pc, #84]	; (8012860 <scan_files+0xb4>)
 801280c:	4915      	ldr	r1, [pc, #84]	; (8012864 <scan_files+0xb8>)
 801280e:	4618      	mov	r0, r3
 8012810:	f002 f80f 	bl	8014832 <sprintf>
				res = scan_files(path); /* Enter the directory */
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7ff ffc9 	bl	80127ac <scan_files>
 801281a:	4603      	mov	r3, r0
 801281c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 8012820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012824:	2b00      	cmp	r3, #0
 8012826:	d10d      	bne.n	8012844 <scan_files+0x98>
					break;
				path[i] = 0;
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282c:	4413      	add	r3, r2
 801282e:	2200      	movs	r2, #0
 8012830:	701a      	strb	r2, [r3, #0]
 8012832:	e7cc      	b.n	80127ce <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 8012834:	4b09      	ldr	r3, [pc, #36]	; (801285c <scan_files+0xb0>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a09      	ldr	r2, [pc, #36]	; (8012860 <scan_files+0xb4>)
 801283a:	6879      	ldr	r1, [r7, #4]
 801283c:	480a      	ldr	r0, [pc, #40]	; (8012868 <scan_files+0xbc>)
 801283e:	f018 f88b 	bl	802a958 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 8012842:	e7c4      	b.n	80127ce <scan_files+0x22>
					break;
 8012844:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8012846:	f107 0308 	add.w	r3, r7, #8
 801284a:	4618      	mov	r0, r3
 801284c:	f7f8 fbf0 	bl	800b030 <f_closedir>
	}

	return res;
 8012850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012854:	4618      	mov	r0, r3
 8012856:	3740      	adds	r7, #64	; 0x40
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	2002b134 	.word	0x2002b134
 8012860:	2002b13d 	.word	0x2002b13d
 8012864:	0802badc 	.word	0x0802badc
 8012868:	0802bae0 	.word	0x0802bae0

0801286c <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 801286c:	b590      	push	{r4, r7, lr}
 801286e:	b097      	sub	sp, #92	; 0x5c
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]

	TIM_HandleTypeDef htim2;
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 8012878:	4827      	ldr	r0, [pc, #156]	; (8012918 <SamplePoints+0xac>)
 801287a:	f7ef f977 	bl	8001b6c <HAL_ADC_Start>
	htim2.Instance = TIM2;
 801287e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012882:	617b      	str	r3, [r7, #20]

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 8012884:	2300      	movs	r3, #0
 8012886:	657b      	str	r3, [r7, #84]	; 0x54
 8012888:	e031      	b.n	80128ee <SamplePoints+0x82>

		// Set the TIM2 to zero
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2200      	movs	r2, #0
 801288e:	625a      	str	r2, [r3, #36]	; 0x24

		// Sample ADC3[0] and store to array[i]
		// Takes apprx 15 ADCClk cycles for 12 bits = 15 * (1/25 MHz) = 0.6 us
		// Lets substract 1 us from Period_us to compensate for loop + conversion
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012896:	005b      	lsls	r3, r3, #1
 8012898:	18d4      	adds	r4, r2, r3
 801289a:	481f      	ldr	r0, [pc, #124]	; (8012918 <SamplePoints+0xac>)
 801289c:	f7ef fa0a 	bl	8001cb4 <HAL_ADC_GetValue>
 80128a0:	4603      	mov	r3, r0
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	8023      	strh	r3, [r4, #0]

		// Start TIM2
		if ((HAL_TIM_Base_Start(&htim2)) != HAL_OK) {
 80128a6:	f107 0314 	add.w	r3, r7, #20
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f3 fbf2 	bl	8006094 <HAL_TIM_Base_Start>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d004      	beq.n	80128c0 <SamplePoints+0x54>
			_Error_Handler(__FILE__, __LINE__);
 80128b6:	f44f 7191 	mov.w	r1, #290	; 0x122
 80128ba:	4818      	ldr	r0, [pc, #96]	; (801291c <SamplePoints+0xb0>)
 80128bc:	f001 fb58 	bl	8013f70 <_Error_Handler>
		}

		// Wait for Period_us-1 us
		while ((__HAL_TIM_GET_COUNTER(&htim2)) < (Period_us - 1)) {
 80128c0:	bf00      	nop
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	3b01      	subs	r3, #1
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d3f9      	bcc.n	80128c2 <SamplePoints+0x56>
		}

		// printf("End Counter %lu \r\n", __HAL_TIM_GET_COUNTER(&htim2));

		// Stop TIM2
		if ((HAL_TIM_Base_Stop(&htim2)) != HAL_OK) {
 80128ce:	f107 0314 	add.w	r3, r7, #20
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7f3 fbf9 	bl	80060ca <HAL_TIM_Base_Stop>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d004      	beq.n	80128e8 <SamplePoints+0x7c>
			_Error_Handler(__FILE__, __LINE__);
 80128de:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80128e2:	480e      	ldr	r0, [pc, #56]	; (801291c <SamplePoints+0xb0>)
 80128e4:	f001 fb44 	bl	8013f70 <_Error_Handler>
	for (i = 0; i < NoOfPoints; i++) {
 80128e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128ea:	3301      	adds	r3, #1
 80128ec:	657b      	str	r3, [r7, #84]	; 0x54
 80128ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d3c9      	bcc.n	801288a <SamplePoints+0x1e>
		}
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80128f6:	f04f 31ff 	mov.w	r1, #4294967295
 80128fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80128fe:	f7ff fee1 	bl	80126c4 <InitScreen>
	LCDWrite(5, "DONE!");
 8012902:	4907      	ldr	r1, [pc, #28]	; (8012920 <SamplePoints+0xb4>)
 8012904:	2005      	movs	r0, #5
 8012906:	f7ff fef5 	bl	80126f4 <LCDWrite>

	printf("Sampling done.\r\n");
 801290a:	4806      	ldr	r0, [pc, #24]	; (8012924 <SamplePoints+0xb8>)
 801290c:	f018 f898 	bl	802aa40 <puts>
}
 8012910:	bf00      	nop
 8012912:	375c      	adds	r7, #92	; 0x5c
 8012914:	46bd      	mov	sp, r7
 8012916:	bd90      	pop	{r4, r7, pc}
 8012918:	2002ba50 	.word	0x2002ba50
 801291c:	0802ba84 	.word	0x0802ba84
 8012920:	0802baf0 	.word	0x0802baf0
 8012924:	0802baf8 	.word	0x0802baf8

08012928 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 8012928:	b5b0      	push	{r4, r5, r7, lr}
 801292a:	b09a      	sub	sp, #104	; 0x68
 801292c:	af02      	add	r7, sp, #8
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 8012934:	4842      	ldr	r0, [pc, #264]	; (8012a40 <AvgAndPlotPoints+0x118>)
 8012936:	f018 f883 	bl	802aa40 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 801293a:	4942      	ldr	r1, [pc, #264]	; (8012a44 <AvgAndPlotPoints+0x11c>)
 801293c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012940:	f7ff fec0 	bl	80126c4 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 8012944:	2300      	movs	r3, #0
 8012946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012948:	e059      	b.n	80129fe <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 801294a:	2300      	movs	r3, #0
 801294c:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 801294e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012950:	65bb      	str	r3, [r7, #88]	; 0x58
 8012952:	e00c      	b.n	801296e <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	4413      	add	r3, r2
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012964:	4413      	add	r3, r2
 8012966:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 8012968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801296a:	3301      	adds	r3, #1
 801296c:	65bb      	str	r3, [r7, #88]	; 0x58
 801296e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	441a      	add	r2, r3
 8012974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012976:	429a      	cmp	r2, r3
 8012978:	d8ec      	bhi.n	8012954 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 801297a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012982:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 8012984:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012986:	f7ed fded 	bl	8000564 <__aeabi_ui2d>
 801298a:	f04f 0200 	mov.w	r2, #0
 801298e:	4b2e      	ldr	r3, [pc, #184]	; (8012a48 <AvgAndPlotPoints+0x120>)
 8012990:	f7ed fe5e 	bl	8000650 <__aeabi_dmul>
 8012994:	4603      	mov	r3, r0
 8012996:	460c      	mov	r4, r1
 8012998:	4625      	mov	r5, r4
 801299a:	461c      	mov	r4, r3
 801299c:	68b8      	ldr	r0, [r7, #8]
 801299e:	f7ed fde1 	bl	8000564 <__aeabi_ui2d>
 80129a2:	4602      	mov	r2, r0
 80129a4:	460b      	mov	r3, r1
 80129a6:	4620      	mov	r0, r4
 80129a8:	4629      	mov	r1, r5
 80129aa:	f7ed ff7b 	bl	80008a4 <__aeabi_ddiv>
 80129ae:	4603      	mov	r3, r0
 80129b0:	460c      	mov	r4, r1
 80129b2:	4618      	mov	r0, r3
 80129b4:	4621      	mov	r1, r4
 80129b6:	f7ee f85d 	bl	8000a74 <__aeabi_d2uiz>
 80129ba:	4603      	mov	r3, r0
 80129bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 80129be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80129c0:	f7ed fdd0 	bl	8000564 <__aeabi_ui2d>
 80129c4:	f04f 0200 	mov.w	r2, #0
 80129c8:	4b20      	ldr	r3, [pc, #128]	; (8012a4c <AvgAndPlotPoints+0x124>)
 80129ca:	f7ed ff6b 	bl	80008a4 <__aeabi_ddiv>
 80129ce:	4603      	mov	r3, r0
 80129d0:	460c      	mov	r4, r1
 80129d2:	4618      	mov	r0, r3
 80129d4:	4621      	mov	r1, r4
 80129d6:	f04f 0200 	mov.w	r2, #0
 80129da:	4b1d      	ldr	r3, [pc, #116]	; (8012a50 <AvgAndPlotPoints+0x128>)
 80129dc:	f7ed fe38 	bl	8000650 <__aeabi_dmul>
 80129e0:	4603      	mov	r3, r0
 80129e2:	460c      	mov	r4, r1
 80129e4:	4618      	mov	r0, r3
 80129e6:	4621      	mov	r1, r4
 80129e8:	f7ee f844 	bl	8000a74 <__aeabi_d2uiz>
 80129ec:	4603      	mov	r3, r0
 80129ee:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 80129f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80129f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80129f4:	f7ff fe54 	bl	80126a0 <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 80129f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129fa:	3301      	adds	r3, #1
 80129fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80129fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d3a1      	bcc.n	801294a <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 8012a06:	687a      	ldr	r2, [r7, #4]
 8012a08:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8012a0a:	4812      	ldr	r0, [pc, #72]	; (8012a54 <AvgAndPlotPoints+0x12c>)
 8012a0c:	f017 ffa4 	bl	802a958 <iprintf>

	LCDWrite(0, "");
 8012a10:	4911      	ldr	r1, [pc, #68]	; (8012a58 <AvgAndPlotPoints+0x130>)
 8012a12:	2000      	movs	r0, #0
 8012a14:	f7ff fe6e 	bl	80126f4 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 8012a18:	f107 0014 	add.w	r0, r7, #20
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	4a0e      	ldr	r2, [pc, #56]	; (8012a5c <AvgAndPlotPoints+0x134>)
 8012a24:	2132      	movs	r1, #50	; 0x32
 8012a26:	f001 fee3 	bl	80147f0 <snprintf>
	LCDWrite(0, MyStr);
 8012a2a:	f107 0314 	add.w	r3, r7, #20
 8012a2e:	4619      	mov	r1, r3
 8012a30:	2000      	movs	r0, #0
 8012a32:	f7ff fe5f 	bl	80126f4 <LCDWrite>
}
 8012a36:	bf00      	nop
 8012a38:	3760      	adds	r7, #96	; 0x60
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	0802bb08 	.word	0x0802bb08
 8012a44:	ffff0000 	.word	0xffff0000
 8012a48:	407e0000 	.word	0x407e0000
 8012a4c:	40f00000 	.word	0x40f00000
 8012a50:	40710000 	.word	0x40710000
 8012a54:	0802bb20 	.word	0x0802bb20
 8012a58:	0802bb4c 	.word	0x0802bb4c
 8012a5c:	0802bb50 	.word	0x0802bb50

08012a60 <DirList>:
	}

	printf("Closed file %s OK \r\n", "MEAS1.TXT");
}

void DirList(void) {
 8012a60:	b5b0      	push	{r4, r5, r7, lr}
 8012a62:	f6ad 2d48 	subw	sp, sp, #2632	; 0xa48
 8012a66:	af00      	add	r7, sp, #0

	FATFS fs;
	FRESULT res;
	DWORD buff[_MAX_SS];

	strcpy(buff, "");
 8012a68:	f107 0308 	add.w	r3, r7, #8
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	701a      	strb	r2, [r3, #0]

		// File list
		res = scan_files(buff);
 8012a70:	f107 0308 	add.w	r3, r7, #8
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff fe99 	bl	80127ac <scan_files>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	f887 3a47 	strb.w	r3, [r7, #2631]	; 0xa47
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 8012a80:	463a      	mov	r2, r7
 8012a82:	1d39      	adds	r1, r7, #4
 8012a84:	f107 0308 	add.w	r3, r7, #8
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7f8 fb3f 	bl	800b10c <f_getfree>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f887 3a47 	strb.w	r3, [r7, #2631]	; 0xa47
		if (res) {
 8012a94:	f897 3a47 	ldrb.w	r3, [r7, #2631]	; 0xa47
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d007      	beq.n	8012aac <DirList+0x4c>
			printf("Error: Filesystem free space check failed \r\n");
 8012a9c:	4821      	ldr	r0, [pc, #132]	; (8012b24 <DirList+0xc4>)
 8012a9e:	f017 ffcf 	bl	802aa40 <puts>
			_Error_Handler(__FILE__, __LINE__);
 8012aa2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8012aa6:	4820      	ldr	r0, [pc, #128]	; (8012b28 <DirList+0xc8>)
 8012aa8:	f001 fa62 	bl	8013f70 <_Error_Handler>
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 8012aac:	463b      	mov	r3, r7
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	699b      	ldr	r3, [r3, #24]
 8012ab2:	3b02      	subs	r3, #2
 8012ab4:	463a      	mov	r2, r7
 8012ab6:	6812      	ldr	r2, [r2, #0]
 8012ab8:	8952      	ldrh	r2, [r2, #10]
 8012aba:	fb02 f303 	mul.w	r3, r2, r3
 8012abe:	f8c7 3a40 	str.w	r3, [r7, #2624]	; 0xa40
		fre_sect = fre_clust * fsp->csize;
 8012ac2:	463b      	mov	r3, r7
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	895b      	ldrh	r3, [r3, #10]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	1d3b      	adds	r3, r7, #4
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	fb03 f302 	mul.w	r3, r3, r2
 8012ad2:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c

		// Print the free space (assuming 512 bytes/sector)
		printf(
 8012ad6:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	; 0xa40
 8012ada:	0adc      	lsrs	r4, r3, #11
 8012adc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8012ae0:	0add      	lsrs	r5, r3, #11
				"%10lu KiB total drive space.\n%10lu KiB available (%s\%%). \n",
				(tot_sect / 2048), (fre_sect / 2048),
				myPrintf(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 8012ae2:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8012ae6:	ee07 3a90 	vmov	s15, r3
 8012aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012aee:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	; 0xa40
 8012af2:	ee07 3a90 	vmov	s15, r3
 8012af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
		printf(
 8012afe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012b2c <DirList+0xcc>
 8012b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b06:	eeb0 0a67 	vmov.f32	s0, s15
 8012b0a:	f7ff fc53 	bl	80123b4 <myPrintf>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	462a      	mov	r2, r5
 8012b12:	4621      	mov	r1, r4
 8012b14:	4806      	ldr	r0, [pc, #24]	; (8012b30 <DirList+0xd0>)
 8012b16:	f017 ff1f 	bl	802a958 <iprintf>

}
 8012b1a:	bf00      	nop
 8012b1c:	f607 2748 	addw	r7, r7, #2632	; 0xa48
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bdb0      	pop	{r4, r5, r7, pc}
 8012b24:	0802bc3c 	.word	0x0802bc3c
 8012b28:	0802ba84 	.word	0x0802ba84
 8012b2c:	42c80000 	.word	0x42c80000
 8012b30:	0802bc68 	.word	0x0802bc68

08012b34 <SCB_EnableICache>:
{
 8012b34:	b480      	push	{r7}
 8012b36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012b3c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8012b40:	4b09      	ldr	r3, [pc, #36]	; (8012b68 <SCB_EnableICache+0x34>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8012b48:	4a07      	ldr	r2, [pc, #28]	; (8012b68 <SCB_EnableICache+0x34>)
 8012b4a:	4b07      	ldr	r3, [pc, #28]	; (8012b68 <SCB_EnableICache+0x34>)
 8012b4c:	695b      	ldr	r3, [r3, #20]
 8012b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012b52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012b58:	f3bf 8f6f 	isb	sy
}
 8012b5c:	bf00      	nop
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop
 8012b68:	e000ed00 	.word	0xe000ed00

08012b6c <SCB_EnableDCache>:
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b085      	sub	sp, #20
 8012b70:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8012b72:	4b1d      	ldr	r3, [pc, #116]	; (8012be8 <SCB_EnableDCache+0x7c>)
 8012b74:	2200      	movs	r2, #0
 8012b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8012b7a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8012b7e:	4b1a      	ldr	r3, [pc, #104]	; (8012be8 <SCB_EnableDCache+0x7c>)
 8012b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b84:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	0b5b      	lsrs	r3, r3, #13
 8012b8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012b8e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	08db      	lsrs	r3, r3, #3
 8012b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012b98:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8012b9a:	4913      	ldr	r1, [pc, #76]	; (8012be8 <SCB_EnableDCache+0x7c>)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	015a      	lsls	r2, r3, #5
 8012ba0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8012ba4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8012baa:	4313      	orrs	r3, r2
 8012bac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	1e5a      	subs	r2, r3, #1
 8012bb4:	60ba      	str	r2, [r7, #8]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1ef      	bne.n	8012b9a <SCB_EnableDCache+0x2e>
    } while(sets--);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	1e5a      	subs	r2, r3, #1
 8012bbe:	60fa      	str	r2, [r7, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d1e5      	bne.n	8012b90 <SCB_EnableDCache+0x24>
 8012bc4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8012bc8:	4a07      	ldr	r2, [pc, #28]	; (8012be8 <SCB_EnableDCache+0x7c>)
 8012bca:	4b07      	ldr	r3, [pc, #28]	; (8012be8 <SCB_EnableDCache+0x7c>)
 8012bcc:	695b      	ldr	r3, [r3, #20]
 8012bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012bd2:	6153      	str	r3, [r2, #20]
 8012bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012bd8:	f3bf 8f6f 	isb	sy
}
 8012bdc:	bf00      	nop
 8012bde:	3714      	adds	r7, #20
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr
 8012be8:	e000ed00 	.word	0xe000ed00

08012bec <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8012bec:	b5b0      	push	{r4, r5, r7, lr}
 8012bee:	b090      	sub	sp, #64	; 0x40
 8012bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache-------------------------------------------------------------*/
  SCB_EnableICache();
 8012bf2:	f7ff ff9f 	bl	8012b34 <SCB_EnableICache>

  /* Enable D-Cache-------------------------------------------------------------*/
  SCB_EnableDCache();
 8012bf6:	f7ff ffb9 	bl	8012b6c <SCB_EnableDCache>

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012bfa:	f7ee ff23 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012bfe:	f000 f84f 	bl	8012ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012c02:	f000 f9fd 	bl	8013000 <MX_GPIO_Init>
  MX_ADC3_Init();
 8012c06:	f000 f8fb 	bl	8012e00 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8012c0a:	f000 f9c5 	bl	8012f98 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8012c0e:	f000 f949 	bl	8012ea4 <MX_CRC_Init>
  MX_TIM1_Init();
 8012c12:	f000 f96f 	bl	8012ef4 <MX_TIM1_Init>


  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8012c16:	f7ff fa83 	bl	8012120 <GRAPHICS_HW_Init>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8012c1a:	f7ff fa8f 	bl	801213c <GRAPHICS_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8012c1e:	4b1a      	ldr	r3, [pc, #104]	; (8012c88 <main+0x9c>)
 8012c20:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8012c24:	461d      	mov	r5, r3
 8012c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8012c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c32:	2100      	movs	r1, #0
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f9 f87d 	bl	800bd34 <osThreadCreate>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	4b13      	ldr	r3, [pc, #76]	; (8012c8c <main+0xa0>)
 8012c3e:	601a      	str	r2, [r3, #0]

  /* definition and creation of USBDTask */
  osThreadDef(USBDTask, StartUSBDTask, osPriorityNormal, 0, 1024);
 8012c40:	4b13      	ldr	r3, [pc, #76]	; (8012c90 <main+0xa4>)
 8012c42:	f107 0418 	add.w	r4, r7, #24
 8012c46:	461d      	mov	r5, r3
 8012c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c4c:	682b      	ldr	r3, [r5, #0]
 8012c4e:	6023      	str	r3, [r4, #0]
  USBDTaskHandle = osThreadCreate(osThread(USBDTask), NULL);
 8012c50:	f107 0318 	add.w	r3, r7, #24
 8012c54:	2100      	movs	r1, #0
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f9 f86c 	bl	800bd34 <osThreadCreate>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	4b0d      	ldr	r3, [pc, #52]	; (8012c94 <main+0xa8>)
 8012c60:	601a      	str	r2, [r3, #0]

  /* definition and creation of STEMWINTask */
  osThreadDef(STEMWINTask, StartSTEMWINTask, osPriorityNormal, 0, 1024);
 8012c62:	4b0d      	ldr	r3, [pc, #52]	; (8012c98 <main+0xac>)
 8012c64:	1d3c      	adds	r4, r7, #4
 8012c66:	461d      	mov	r5, r3
 8012c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c6c:	682b      	ldr	r3, [r5, #0]
 8012c6e:	6023      	str	r3, [r4, #0]
  STEMWINTaskHandle = osThreadCreate(osThread(STEMWINTask), NULL);
 8012c70:	1d3b      	adds	r3, r7, #4
 8012c72:	2100      	movs	r1, #0
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7f9 f85d 	bl	800bd34 <osThreadCreate>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	4b07      	ldr	r3, [pc, #28]	; (8012c9c <main+0xb0>)
 8012c7e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */


  /* Start scheduler */
  osKernelStart();
 8012c80:	f7f9 f841 	bl	800bd06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8012c84:	e7fe      	b.n	8012c84 <main+0x98>
 8012c86:	bf00      	nop
 8012c88:	0802c050 	.word	0x0802c050
 8012c8c:	2002bbc8 	.word	0x2002bbc8
 8012c90:	0802c070 	.word	0x0802c070
 8012c94:	2002be7c 	.word	0x2002be7c
 8012c98:	0802c090 	.word	0x0802c090
 8012c9c:	2002c2e8 	.word	0x2002c2e8

08012ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b0b4      	sub	sp, #208	; 0xd0
 8012ca4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012ca6:	4a51      	ldr	r2, [pc, #324]	; (8012dec <SystemClock_Config+0x14c>)
 8012ca8:	4b50      	ldr	r3, [pc, #320]	; (8012dec <SystemClock_Config+0x14c>)
 8012caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8012cb2:	4b4e      	ldr	r3, [pc, #312]	; (8012dec <SystemClock_Config+0x14c>)
 8012cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012cba:	607b      	str	r3, [r7, #4]
 8012cbc:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012cbe:	4a4c      	ldr	r2, [pc, #304]	; (8012df0 <SystemClock_Config+0x150>)
 8012cc0:	4b4b      	ldr	r3, [pc, #300]	; (8012df0 <SystemClock_Config+0x150>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012cc8:	6013      	str	r3, [r2, #0]
 8012cca:	4b49      	ldr	r3, [pc, #292]	; (8012df0 <SystemClock_Config+0x150>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012cd2:	603b      	str	r3, [r7, #0]
 8012cd4:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012ce4:	2302      	movs	r3, #2
 8012ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8012cf2:	2319      	movs	r3, #25
 8012cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8012cf8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012d00:	2302      	movs	r3, #2
 8012d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8012d06:	2308      	movs	r3, #8
 8012d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012d0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7f2 f831 	bl	8004d78 <HAL_RCC_OscConfig>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d004      	beq.n	8012d26 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012d1c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8012d20:	4834      	ldr	r0, [pc, #208]	; (8012df4 <SystemClock_Config+0x154>)
 8012d22:	f001 f925 	bl	8013f70 <_Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8012d26:	f7f1 ffd7 	bl	8004cd8 <HAL_PWREx_EnableOverDrive>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d004      	beq.n	8012d3a <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012d30:	f240 1135 	movw	r1, #309	; 0x135
 8012d34:	482f      	ldr	r0, [pc, #188]	; (8012df4 <SystemClock_Config+0x154>)
 8012d36:	f001 f91b 	bl	8013f70 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012d3a:	230f      	movs	r3, #15
 8012d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012d40:	2302      	movs	r3, #2
 8012d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012d46:	2300      	movs	r3, #0
 8012d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012d4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8012d5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012d60:	2106      	movs	r1, #6
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f2 fa78 	bl	8005258 <HAL_RCC_ClockConfig>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d004      	beq.n	8012d78 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012d6e:	f240 1143 	movw	r1, #323	; 0x143
 8012d72:	4820      	ldr	r0, [pc, #128]	; (8012df4 <SystemClock_Config+0x154>)
 8012d74:	f001 f8fc 	bl	8013f70 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8012d78:	4b1f      	ldr	r3, [pc, #124]	; (8012df8 <SystemClock_Config+0x158>)
 8012d7a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8012d7c:	23c0      	movs	r3, #192	; 0xc0
 8012d7e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8012d80:	2304      	movs	r3, #4
 8012d82:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012d84:	2302      	movs	r3, #2
 8012d86:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8012d88:	2301      	movs	r3, #1
 8012d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8012d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012d94:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8012d96:	2300      	movs	r3, #0
 8012d98:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8012d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012da2:	f107 0308 	add.w	r3, r7, #8
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7f2 fc5a 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d004      	beq.n	8012dbc <SystemClock_Config+0x11c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012db2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8012db6:	480f      	ldr	r0, [pc, #60]	; (8012df4 <SystemClock_Config+0x154>)
 8012db8:	f001 f8da 	bl	8013f70 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8012dbc:	f7f2 fbea 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	4b0e      	ldr	r3, [pc, #56]	; (8012dfc <SystemClock_Config+0x15c>)
 8012dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8012dc8:	099b      	lsrs	r3, r3, #6
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ef faad 	bl	800232a <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8012dd0:	2004      	movs	r0, #4
 8012dd2:	f7ef fab7 	bl	8002344 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	210f      	movs	r1, #15
 8012dda:	f04f 30ff 	mov.w	r0, #4294967295
 8012dde:	f7ef fa7a 	bl	80022d6 <HAL_NVIC_SetPriority>
}
 8012de2:	bf00      	nop
 8012de4:	37d0      	adds	r7, #208	; 0xd0
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	40023800 	.word	0x40023800
 8012df0:	40007000 	.word	0x40007000
 8012df4:	0802c0a4 	.word	0x0802c0a4
 8012df8:	00200048 	.word	0x00200048
 8012dfc:	10624dd3 	.word	0x10624dd3

08012e00 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc3.Instance = ADC3;
 8012e06:	4b23      	ldr	r3, [pc, #140]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e08:	4a23      	ldr	r2, [pc, #140]	; (8012e98 <MX_ADC3_Init+0x98>)
 8012e0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012e0c:	4b21      	ldr	r3, [pc, #132]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012e12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8012e14:	4b1f      	ldr	r3, [pc, #124]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8012e1a:	4b1e      	ldr	r3, [pc, #120]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8012e20:	4b1c      	ldr	r3, [pc, #112]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e22:	2200      	movs	r2, #0
 8012e24:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8012e26:	4b1b      	ldr	r3, [pc, #108]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012e2c:	4b19      	ldr	r3, [pc, #100]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e2e:	2200      	movs	r2, #0
 8012e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012e32:	4b18      	ldr	r3, [pc, #96]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e34:	4a19      	ldr	r2, [pc, #100]	; (8012e9c <MX_ADC3_Init+0x9c>)
 8012e36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012e38:	4b16      	ldr	r3, [pc, #88]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8012e3e:	4b15      	ldr	r3, [pc, #84]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e40:	2201      	movs	r2, #1
 8012e42:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8012e44:	4b13      	ldr	r3, [pc, #76]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012e4a:	4b12      	ldr	r3, [pc, #72]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012e50:	4810      	ldr	r0, [pc, #64]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e52:	f7ee fe47 	bl	8001ae4 <HAL_ADC_Init>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d004      	beq.n	8012e66 <MX_ADC3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012e5c:	f240 1177 	movw	r1, #375	; 0x177
 8012e60:	480f      	ldr	r0, [pc, #60]	; (8012ea0 <MX_ADC3_Init+0xa0>)
 8012e62:	f001 f885 	bl	8013f70 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012e72:	463b      	mov	r3, r7
 8012e74:	4619      	mov	r1, r3
 8012e76:	4807      	ldr	r0, [pc, #28]	; (8012e94 <MX_ADC3_Init+0x94>)
 8012e78:	f7ee ff2a 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d004      	beq.n	8012e8c <MX_ADC3_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012e82:	f240 1181 	movw	r1, #385	; 0x181
 8012e86:	4806      	ldr	r0, [pc, #24]	; (8012ea0 <MX_ADC3_Init+0xa0>)
 8012e88:	f001 f872 	bl	8013f70 <_Error_Handler>
  }

}
 8012e8c:	bf00      	nop
 8012e8e:	3710      	adds	r7, #16
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	2002ba50 	.word	0x2002ba50
 8012e98:	40012200 	.word	0x40012200
 8012e9c:	0f000001 	.word	0x0f000001
 8012ea0:	0802c0a4 	.word	0x0802c0a4

08012ea4 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8012ea8:	4b0f      	ldr	r3, [pc, #60]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012eaa:	4a10      	ldr	r2, [pc, #64]	; (8012eec <MX_CRC_Init+0x48>)
 8012eac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8012eae:	4b0e      	ldr	r3, [pc, #56]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8012eb4:	4b0c      	ldr	r3, [pc, #48]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8012eba:	4b0b      	ldr	r3, [pc, #44]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8012ec0:	4b09      	ldr	r3, [pc, #36]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8012ec6:	4b08      	ldr	r3, [pc, #32]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012ec8:	2201      	movs	r2, #1
 8012eca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012ecc:	4806      	ldr	r0, [pc, #24]	; (8012ee8 <MX_CRC_Init+0x44>)
 8012ece:	f7ef fa55 	bl	800237c <HAL_CRC_Init>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d004      	beq.n	8012ee2 <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012ed8:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8012edc:	4804      	ldr	r0, [pc, #16]	; (8012ef0 <MX_CRC_Init+0x4c>)
 8012ede:	f001 f847 	bl	8013f70 <_Error_Handler>
  }

}
 8012ee2:	bf00      	nop
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	2002b9cc 	.word	0x2002b9cc
 8012eec:	40023000 	.word	0x40023000
 8012ef0:	0802c0a4 	.word	0x0802c0a4

08012ef4 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b088      	sub	sp, #32
 8012ef8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8012efa:	4b24      	ldr	r3, [pc, #144]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012efc:	4a24      	ldr	r2, [pc, #144]	; (8012f90 <MX_TIM1_Init+0x9c>)
 8012efe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8012f00:	4b22      	ldr	r3, [pc, #136]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f02:	2264      	movs	r2, #100	; 0x64
 8012f04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012f06:	4b21      	ldr	r3, [pc, #132]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8012f0c:	4b1f      	ldr	r3, [pc, #124]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012f12:	4b1e      	ldr	r3, [pc, #120]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8012f18:	4b1c      	ldr	r3, [pc, #112]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012f1e:	4b1b      	ldr	r3, [pc, #108]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8012f24:	4819      	ldr	r0, [pc, #100]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f26:	f7f3 f88a 	bl	800603e <HAL_TIM_Base_Init>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d004      	beq.n	8012f3a <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012f30:	f240 11a7 	movw	r1, #423	; 0x1a7
 8012f34:	4817      	ldr	r0, [pc, #92]	; (8012f94 <MX_TIM1_Init+0xa0>)
 8012f36:	f001 f81b 	bl	8013f70 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8012f40:	f107 0310 	add.w	r3, r7, #16
 8012f44:	4619      	mov	r1, r3
 8012f46:	4811      	ldr	r0, [pc, #68]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f48:	f7f3 fa24 	bl	8006394 <HAL_TIM_ConfigClockSource>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d004      	beq.n	8012f5c <MX_TIM1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012f52:	f240 11ad 	movw	r1, #429	; 0x1ad
 8012f56:	480f      	ldr	r0, [pc, #60]	; (8012f94 <MX_TIM1_Init+0xa0>)
 8012f58:	f001 f80a 	bl	8013f70 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012f60:	2300      	movs	r3, #0
 8012f62:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012f64:	2300      	movs	r3, #0
 8012f66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8012f68:	1d3b      	adds	r3, r7, #4
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	4807      	ldr	r0, [pc, #28]	; (8012f8c <MX_TIM1_Init+0x98>)
 8012f6e:	f7f3 fc73 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d004      	beq.n	8012f82 <MX_TIM1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012f78:	f240 11b5 	movw	r1, #437	; 0x1b5
 8012f7c:	4805      	ldr	r0, [pc, #20]	; (8012f94 <MX_TIM1_Init+0xa0>)
 8012f7e:	f000 fff7 	bl	8013f70 <_Error_Handler>
  }

}
 8012f82:	bf00      	nop
 8012f84:	3720      	adds	r7, #32
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	2002bdd8 	.word	0x2002bdd8
 8012f90:	40010000 	.word	0x40010000
 8012f94:	0802c0a4 	.word	0x0802c0a4

08012f98 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8012f9c:	4b15      	ldr	r3, [pc, #84]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012f9e:	4a16      	ldr	r2, [pc, #88]	; (8012ff8 <MX_USART1_UART_Init+0x60>)
 8012fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012fa2:	4b14      	ldr	r3, [pc, #80]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012faa:	4b12      	ldr	r3, [pc, #72]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012fb0:	4b10      	ldr	r3, [pc, #64]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012fb6:	4b0f      	ldr	r3, [pc, #60]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012fbc:	4b0d      	ldr	r3, [pc, #52]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fbe:	220c      	movs	r2, #12
 8012fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012fc2:	4b0c      	ldr	r3, [pc, #48]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012fc8:	4b0a      	ldr	r3, [pc, #40]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fca:	2200      	movs	r2, #0
 8012fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012fce:	4b09      	ldr	r3, [pc, #36]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012fd4:	4b07      	ldr	r3, [pc, #28]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012fda:	4806      	ldr	r0, [pc, #24]	; (8012ff4 <MX_USART1_UART_Init+0x5c>)
 8012fdc:	f7f3 fca4 	bl	8006928 <HAL_UART_Init>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d004      	beq.n	8012ff0 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012fe6:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8012fea:	4804      	ldr	r0, [pc, #16]	; (8012ffc <MX_USART1_UART_Init+0x64>)
 8012fec:	f000 ffc0 	bl	8013f70 <_Error_Handler>
  }

}
 8012ff0:	bf00      	nop
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	2002baf8 	.word	0x2002baf8
 8012ff8:	40011000 	.word	0x40011000
 8012ffc:	0802c0a4 	.word	0x0802c0a4

08013000 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b090      	sub	sp, #64	; 0x40
 8013004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013006:	4aad      	ldr	r2, [pc, #692]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013008:	4bac      	ldr	r3, [pc, #688]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801300c:	f043 0310 	orr.w	r3, r3, #16
 8013010:	6313      	str	r3, [r2, #48]	; 0x30
 8013012:	4baa      	ldr	r3, [pc, #680]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013016:	f003 0310 	and.w	r3, r3, #16
 801301a:	62bb      	str	r3, [r7, #40]	; 0x28
 801301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801301e:	4aa7      	ldr	r2, [pc, #668]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013020:	4ba6      	ldr	r3, [pc, #664]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013028:	6313      	str	r3, [r2, #48]	; 0x30
 801302a:	4ba4      	ldr	r3, [pc, #656]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013032:	627b      	str	r3, [r7, #36]	; 0x24
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013036:	4aa1      	ldr	r2, [pc, #644]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013038:	4ba0      	ldr	r3, [pc, #640]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801303c:	f043 0302 	orr.w	r3, r3, #2
 8013040:	6313      	str	r3, [r2, #48]	; 0x30
 8013042:	4b9e      	ldr	r3, [pc, #632]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013046:	f003 0302 	and.w	r3, r3, #2
 801304a:	623b      	str	r3, [r7, #32]
 801304c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801304e:	4a9b      	ldr	r2, [pc, #620]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013050:	4b9a      	ldr	r3, [pc, #616]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013054:	f043 0308 	orr.w	r3, r3, #8
 8013058:	6313      	str	r3, [r2, #48]	; 0x30
 801305a:	4b98      	ldr	r3, [pc, #608]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801305e:	f003 0308 	and.w	r3, r3, #8
 8013062:	61fb      	str	r3, [r7, #28]
 8013064:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013066:	4a95      	ldr	r2, [pc, #596]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013068:	4b94      	ldr	r3, [pc, #592]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801306c:	f043 0304 	orr.w	r3, r3, #4
 8013070:	6313      	str	r3, [r2, #48]	; 0x30
 8013072:	4b92      	ldr	r3, [pc, #584]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013076:	f003 0304 	and.w	r3, r3, #4
 801307a:	61bb      	str	r3, [r7, #24]
 801307c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801307e:	4a8f      	ldr	r2, [pc, #572]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013080:	4b8e      	ldr	r3, [pc, #568]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013084:	f043 0301 	orr.w	r3, r3, #1
 8013088:	6313      	str	r3, [r2, #48]	; 0x30
 801308a:	4b8c      	ldr	r3, [pc, #560]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	617b      	str	r3, [r7, #20]
 8013094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8013096:	4a89      	ldr	r2, [pc, #548]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013098:	4b88      	ldr	r3, [pc, #544]	; (80132bc <MX_GPIO_Init+0x2bc>)
 801309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801309c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80130a0:	6313      	str	r3, [r2, #48]	; 0x30
 80130a2:	4b86      	ldr	r3, [pc, #536]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80130aa:	613b      	str	r3, [r7, #16]
 80130ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80130ae:	4a83      	ldr	r2, [pc, #524]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130b0:	4b82      	ldr	r3, [pc, #520]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130b8:	6313      	str	r3, [r2, #48]	; 0x30
 80130ba:	4b80      	ldr	r3, [pc, #512]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80130c6:	4a7d      	ldr	r2, [pc, #500]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130c8:	4b7c      	ldr	r3, [pc, #496]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80130d0:	6313      	str	r3, [r2, #48]	; 0x30
 80130d2:	4b7a      	ldr	r3, [pc, #488]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80130da:	60bb      	str	r3, [r7, #8]
 80130dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80130de:	4a77      	ldr	r2, [pc, #476]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130e0:	4b76      	ldr	r3, [pc, #472]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130e4:	f043 0320 	orr.w	r3, r3, #32
 80130e8:	6313      	str	r3, [r2, #48]	; 0x30
 80130ea:	4b74      	ldr	r3, [pc, #464]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ee:	f003 0320 	and.w	r3, r3, #32
 80130f2:	607b      	str	r3, [r7, #4]
 80130f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80130f6:	4a71      	ldr	r2, [pc, #452]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130f8:	4b70      	ldr	r3, [pc, #448]	; (80132bc <MX_GPIO_Init+0x2bc>)
 80130fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013100:	6313      	str	r3, [r2, #48]	; 0x30
 8013102:	4b6e      	ldr	r3, [pc, #440]	; (80132bc <MX_GPIO_Init+0x2bc>)
 8013104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801310a:	603b      	str	r3, [r7, #0]
 801310c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 801310e:	2201      	movs	r2, #1
 8013110:	2120      	movs	r1, #32
 8013112:	486b      	ldr	r0, [pc, #428]	; (80132c0 <MX_GPIO_Init+0x2c0>)
 8013114:	f7ef ff5e 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8013118:	2200      	movs	r2, #0
 801311a:	f241 010c 	movw	r1, #4108	; 0x100c
 801311e:	4869      	ldr	r0, [pc, #420]	; (80132c4 <MX_GPIO_Init+0x2c4>)
 8013120:	f7ef ff58 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8013124:	2200      	movs	r2, #0
 8013126:	2108      	movs	r1, #8
 8013128:	4867      	ldr	r0, [pc, #412]	; (80132c8 <MX_GPIO_Init+0x2c8>)
 801312a:	f7ef ff53 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 801312e:	2200      	movs	r2, #0
 8013130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013134:	4865      	ldr	r0, [pc, #404]	; (80132cc <MX_GPIO_Init+0x2cc>)
 8013136:	f7ef ff4d 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 801313a:	2200      	movs	r2, #0
 801313c:	21c8      	movs	r1, #200	; 0xc8
 801313e:	4864      	ldr	r0, [pc, #400]	; (80132d0 <MX_GPIO_Init+0x2d0>)
 8013140:	f7ef ff48 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8013144:	2308      	movs	r3, #8
 8013146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013148:	2300      	movs	r3, #0
 801314a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801314c:	2300      	movs	r3, #0
 801314e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013154:	4619      	mov	r1, r3
 8013156:	485f      	ldr	r0, [pc, #380]	; (80132d4 <MX_GPIO_Init+0x2d4>)
 8013158:	f7ef fc86 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 801315c:	2304      	movs	r3, #4
 801315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013160:	2302      	movs	r3, #2
 8013162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013164:	2300      	movs	r3, #0
 8013166:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013168:	2303      	movs	r3, #3
 801316a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801316c:	2309      	movs	r3, #9
 801316e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8013170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013174:	4619      	mov	r1, r3
 8013176:	4857      	ldr	r0, [pc, #348]	; (80132d4 <MX_GPIO_Init+0x2d4>)
 8013178:	f7ef fc76 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 801317c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8013180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013182:	2302      	movs	r3, #2
 8013184:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013186:	2300      	movs	r3, #0
 8013188:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801318a:	2303      	movs	r3, #3
 801318c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801318e:	230b      	movs	r3, #11
 8013190:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013196:	4619      	mov	r1, r3
 8013198:	484d      	ldr	r0, [pc, #308]	; (80132d0 <MX_GPIO_Init+0x2d0>)
 801319a:	f7ef fc65 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 801319e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80131a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80131a4:	2312      	movs	r3, #18
 80131a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80131a8:	2301      	movs	r3, #1
 80131aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131ac:	2300      	movs	r3, #0
 80131ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80131b0:	2304      	movs	r3, #4
 80131b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131b8:	4619      	mov	r1, r3
 80131ba:	4847      	ldr	r0, [pc, #284]	; (80132d8 <MX_GPIO_Init+0x2d8>)
 80131bc:	f7ef fc54 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80131c0:	f643 4323 	movw	r3, #15395	; 0x3c23
 80131c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131c6:	2302      	movs	r3, #2
 80131c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131ca:	2300      	movs	r3, #0
 80131cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131ce:	2303      	movs	r3, #3
 80131d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80131d2:	230a      	movs	r3, #10
 80131d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131da:	4619      	mov	r1, r3
 80131dc:	483e      	ldr	r0, [pc, #248]	; (80132d8 <MX_GPIO_Init+0x2d8>)
 80131de:	f7ef fc43 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80131e2:	2310      	movs	r3, #16
 80131e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131e6:	2302      	movs	r3, #2
 80131e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131ee:	2300      	movs	r3, #0
 80131f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80131f2:	2302      	movs	r3, #2
 80131f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80131f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131fa:	4619      	mov	r1, r3
 80131fc:	4836      	ldr	r0, [pc, #216]	; (80132d8 <MX_GPIO_Init+0x2d8>)
 80131fe:	f7ef fc33 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8013202:	2380      	movs	r3, #128	; 0x80
 8013204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013206:	2302      	movs	r3, #2
 8013208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801320a:	2300      	movs	r3, #0
 801320c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801320e:	2300      	movs	r3, #0
 8013210:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8013212:	2308      	movs	r3, #8
 8013214:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8013216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801321a:	4619      	mov	r1, r3
 801321c:	4828      	ldr	r0, [pc, #160]	; (80132c0 <MX_GPIO_Init+0x2c0>)
 801321e:	f7ef fc23 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8013222:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8013226:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013228:	2302      	movs	r3, #2
 801322a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801322c:	2300      	movs	r3, #0
 801322e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013230:	2303      	movs	r3, #3
 8013232:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8013234:	230c      	movs	r3, #12
 8013236:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801323c:	4619      	mov	r1, r3
 801323e:	4827      	ldr	r0, [pc, #156]	; (80132dc <MX_GPIO_Init+0x2dc>)
 8013240:	f7ef fc12 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8013244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801324a:	2302      	movs	r3, #2
 801324c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801324e:	2300      	movs	r3, #0
 8013250:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013252:	2300      	movs	r3, #0
 8013254:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8013256:	2301      	movs	r3, #1
 8013258:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801325a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801325e:	4619      	mov	r1, r3
 8013260:	481f      	ldr	r0, [pc, #124]	; (80132e0 <MX_GPIO_Init+0x2e0>)
 8013262:	f7ef fc01 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8013266:	2360      	movs	r3, #96	; 0x60
 8013268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801326a:	2302      	movs	r3, #2
 801326c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801326e:	2300      	movs	r3, #0
 8013270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013272:	2300      	movs	r3, #0
 8013274:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8013276:	230d      	movs	r3, #13
 8013278:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801327a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801327e:	4619      	mov	r1, r3
 8013280:	4814      	ldr	r0, [pc, #80]	; (80132d4 <MX_GPIO_Init+0x2d4>)
 8013282:	f7ef fbf1 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8013286:	2340      	movs	r3, #64	; 0x40
 8013288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801328a:	2302      	movs	r3, #2
 801328c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801328e:	2300      	movs	r3, #0
 8013290:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013292:	2303      	movs	r3, #3
 8013294:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8013296:	230a      	movs	r3, #10
 8013298:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801329a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801329e:	4619      	mov	r1, r3
 80132a0:	480d      	ldr	r0, [pc, #52]	; (80132d8 <MX_GPIO_Init+0x2d8>)
 80132a2:	f7ef fbe1 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80132a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80132ac:	2300      	movs	r3, #0
 80132ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132b0:	2300      	movs	r3, #0
 80132b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80132b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132b8:	4619      	mov	r1, r3
 80132ba:	e013      	b.n	80132e4 <MX_GPIO_Init+0x2e4>
 80132bc:	40023800 	.word	0x40023800
 80132c0:	40020c00 	.word	0x40020c00
 80132c4:	40022000 	.word	0x40022000
 80132c8:	40022800 	.word	0x40022800
 80132cc:	40021c00 	.word	0x40021c00
 80132d0:	40021800 	.word	0x40021800
 80132d4:	40021000 	.word	0x40021000
 80132d8:	40020400 	.word	0x40020400
 80132dc:	40020800 	.word	0x40020800
 80132e0:	40020000 	.word	0x40020000
 80132e4:	48ba      	ldr	r0, [pc, #744]	; (80135d0 <MX_GPIO_Init+0x5d0>)
 80132e6:	f7ef fbbf 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80132ea:	2340      	movs	r3, #64	; 0x40
 80132ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80132ee:	4bb9      	ldr	r3, [pc, #740]	; (80135d4 <MX_GPIO_Init+0x5d4>)
 80132f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132f2:	2300      	movs	r3, #0
 80132f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80132f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132fa:	4619      	mov	r1, r3
 80132fc:	48b6      	ldr	r0, [pc, #728]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 80132fe:	f7ef fbb3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8013302:	23f0      	movs	r3, #240	; 0xf0
 8013304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013306:	2302      	movs	r3, #2
 8013308:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801330a:	2300      	movs	r3, #0
 801330c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801330e:	2300      	movs	r3, #0
 8013310:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8013312:	230a      	movs	r3, #10
 8013314:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801331a:	4619      	mov	r1, r3
 801331c:	48af      	ldr	r0, [pc, #700]	; (80135dc <MX_GPIO_Init+0x5dc>)
 801331e:	f7ef fba3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8013322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013328:	2302      	movs	r3, #2
 801332a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801332c:	2300      	movs	r3, #0
 801332e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013330:	2300      	movs	r3, #0
 8013332:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8013334:	230a      	movs	r3, #10
 8013336:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8013338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801333c:	4619      	mov	r1, r3
 801333e:	48a8      	ldr	r0, [pc, #672]	; (80135e0 <MX_GPIO_Init+0x5e0>)
 8013340:	f7ef fb92 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8013344:	2320      	movs	r3, #32
 8013346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013348:	2301      	movs	r3, #1
 801334a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801334c:	2300      	movs	r3, #0
 801334e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013350:	2300      	movs	r3, #0
 8013352:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8013354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013358:	4619      	mov	r1, r3
 801335a:	489f      	ldr	r0, [pc, #636]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 801335c:	f7ef fb84 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8013360:	2308      	movs	r3, #8
 8013362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013364:	2302      	movs	r3, #2
 8013366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013368:	2300      	movs	r3, #0
 801336a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801336c:	2300      	movs	r3, #0
 801336e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8013370:	230d      	movs	r3, #13
 8013372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8013374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013378:	4619      	mov	r1, r3
 801337a:	4897      	ldr	r0, [pc, #604]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 801337c:	f7ef fb74 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8013380:	f241 030c 	movw	r3, #4108	; 0x100c
 8013384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013386:	2301      	movs	r3, #1
 8013388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801338a:	2300      	movs	r3, #0
 801338c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801338e:	2300      	movs	r3, #0
 8013390:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013396:	4619      	mov	r1, r3
 8013398:	4890      	ldr	r0, [pc, #576]	; (80135dc <MX_GPIO_Init+0x5dc>)
 801339a:	f7ef fb65 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 801339e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80133a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80133a4:	2300      	movs	r3, #0
 80133a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80133ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133b0:	4619      	mov	r1, r3
 80133b2:	488c      	ldr	r0, [pc, #560]	; (80135e4 <MX_GPIO_Init+0x5e4>)
 80133b4:	f7ef fb58 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80133b8:	2308      	movs	r3, #8
 80133ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133bc:	2301      	movs	r3, #1
 80133be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133c0:	2300      	movs	r3, #0
 80133c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133c4:	2300      	movs	r3, #0
 80133c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80133c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133cc:	4619      	mov	r1, r3
 80133ce:	4886      	ldr	r0, [pc, #536]	; (80135e8 <MX_GPIO_Init+0x5e8>)
 80133d0:	f7ef fb4a 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80133d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133da:	2302      	movs	r3, #2
 80133dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133de:	2300      	movs	r3, #0
 80133e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133e2:	2300      	movs	r3, #0
 80133e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80133e6:	230d      	movs	r3, #13
 80133e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80133ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133ee:	4619      	mov	r1, r3
 80133f0:	487b      	ldr	r0, [pc, #492]	; (80135e0 <MX_GPIO_Init+0x5e0>)
 80133f2:	f7ef fb39 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80133f6:	2310      	movs	r3, #16
 80133f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80133fa:	2300      	movs	r3, #0
 80133fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133fe:	2300      	movs	r3, #0
 8013400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013406:	4619      	mov	r1, r3
 8013408:	4873      	ldr	r0, [pc, #460]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 801340a:	f7ef fb2d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 801340e:	2304      	movs	r3, #4
 8013410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013412:	2302      	movs	r3, #2
 8013414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013416:	2300      	movs	r3, #0
 8013418:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801341a:	2303      	movs	r3, #3
 801341c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801341e:	230c      	movs	r3, #12
 8013420:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8013422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013426:	4619      	mov	r1, r3
 8013428:	486b      	ldr	r0, [pc, #428]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 801342a:	f7ef fb1d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 801342e:	f248 0304 	movw	r3, #32772	; 0x8004
 8013432:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013434:	2300      	movs	r3, #0
 8013436:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013438:	2300      	movs	r3, #0
 801343a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801343c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013440:	4619      	mov	r1, r3
 8013442:	486a      	ldr	r0, [pc, #424]	; (80135ec <MX_GPIO_Init+0x5ec>)
 8013444:	f7ef fb10 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8013448:	2302      	movs	r3, #2
 801344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801344c:	2302      	movs	r3, #2
 801344e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013450:	2300      	movs	r3, #0
 8013452:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013454:	2300      	movs	r3, #0
 8013456:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013458:	2305      	movs	r3, #5
 801345a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 801345c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013460:	4619      	mov	r1, r3
 8013462:	485e      	ldr	r0, [pc, #376]	; (80135dc <MX_GPIO_Init+0x5dc>)
 8013464:	f7ef fb00 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8013468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801346c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801346e:	2301      	movs	r3, #1
 8013470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013472:	2300      	movs	r3, #0
 8013474:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013476:	2300      	movs	r3, #0
 8013478:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 801347a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801347e:	4619      	mov	r1, r3
 8013480:	485a      	ldr	r0, [pc, #360]	; (80135ec <MX_GPIO_Init+0x5ec>)
 8013482:	f7ef faf1 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8013486:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 801348a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801348c:	2302      	movs	r3, #2
 801348e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013490:	2300      	movs	r3, #0
 8013492:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013494:	2300      	movs	r3, #0
 8013496:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8013498:	230d      	movs	r3, #13
 801349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801349c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134a0:	4619      	mov	r1, r3
 80134a2:	4852      	ldr	r0, [pc, #328]	; (80135ec <MX_GPIO_Init+0x5ec>)
 80134a4:	f7ef fae0 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80134a8:	2301      	movs	r3, #1
 80134aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134ac:	2302      	movs	r3, #2
 80134ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134b0:	2300      	movs	r3, #0
 80134b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134b4:	2300      	movs	r3, #0
 80134b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80134b8:	2302      	movs	r3, #2
 80134ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 80134bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134c0:	4619      	mov	r1, r3
 80134c2:	4846      	ldr	r0, [pc, #280]	; (80135dc <MX_GPIO_Init+0x5dc>)
 80134c4:	f7ef fad0 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80134c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80134ce:	4b41      	ldr	r3, [pc, #260]	; (80135d4 <MX_GPIO_Init+0x5d4>)
 80134d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134d2:	2300      	movs	r3, #0
 80134d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80134d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134da:	4619      	mov	r1, r3
 80134dc:	483f      	ldr	r0, [pc, #252]	; (80135dc <MX_GPIO_Init+0x5dc>)
 80134de:	f7ef fac3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80134e2:	23c0      	movs	r3, #192	; 0xc0
 80134e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134e6:	2302      	movs	r3, #2
 80134e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134ea:	2300      	movs	r3, #0
 80134ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134ee:	2303      	movs	r3, #3
 80134f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80134f2:	2308      	movs	r3, #8
 80134f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80134f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134fa:	4619      	mov	r1, r3
 80134fc:	4839      	ldr	r0, [pc, #228]	; (80135e4 <MX_GPIO_Init+0x5e4>)
 80134fe:	f7ef fab3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8013502:	2310      	movs	r3, #16
 8013504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013506:	2302      	movs	r3, #2
 8013508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801350a:	2300      	movs	r3, #0
 801350c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801350e:	2303      	movs	r3, #3
 8013510:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013512:	230a      	movs	r3, #10
 8013514:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8013516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801351a:	4619      	mov	r1, r3
 801351c:	4833      	ldr	r0, [pc, #204]	; (80135ec <MX_GPIO_Init+0x5ec>)
 801351e:	f7ef faa3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8013522:	23c8      	movs	r3, #200	; 0xc8
 8013524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013526:	2301      	movs	r3, #1
 8013528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801352a:	2300      	movs	r3, #0
 801352c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801352e:	2300      	movs	r3, #0
 8013530:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013536:	4619      	mov	r1, r3
 8013538:	4829      	ldr	r0, [pc, #164]	; (80135e0 <MX_GPIO_Init+0x5e0>)
 801353a:	f7ef fa95 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 801353e:	2305      	movs	r3, #5
 8013540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013542:	2302      	movs	r3, #2
 8013544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013546:	2300      	movs	r3, #0
 8013548:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801354a:	2303      	movs	r3, #3
 801354c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801354e:	230a      	movs	r3, #10
 8013550:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013556:	4619      	mov	r1, r3
 8013558:	4822      	ldr	r0, [pc, #136]	; (80135e4 <MX_GPIO_Init+0x5e4>)
 801355a:	f7ef fa85 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801355e:	2332      	movs	r3, #50	; 0x32
 8013560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013562:	2302      	movs	r3, #2
 8013564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013566:	2300      	movs	r3, #0
 8013568:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801356a:	2303      	movs	r3, #3
 801356c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801356e:	230b      	movs	r3, #11
 8013570:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013576:	4619      	mov	r1, r3
 8013578:	481a      	ldr	r0, [pc, #104]	; (80135e4 <MX_GPIO_Init+0x5e4>)
 801357a:	f7ef fa75 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801357e:	2304      	movs	r3, #4
 8013580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013582:	2302      	movs	r3, #2
 8013584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013586:	2300      	movs	r3, #0
 8013588:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801358a:	2303      	movs	r3, #3
 801358c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801358e:	2309      	movs	r3, #9
 8013590:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013596:	4619      	mov	r1, r3
 8013598:	4815      	ldr	r0, [pc, #84]	; (80135f0 <MX_GPIO_Init+0x5f0>)
 801359a:	f7ef fa65 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 801359e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80135a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80135a4:	2302      	movs	r3, #2
 80135a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135a8:	2300      	movs	r3, #0
 80135aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135ac:	2303      	movs	r3, #3
 80135ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80135b0:	2309      	movs	r3, #9
 80135b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80135b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135b8:	4619      	mov	r1, r3
 80135ba:	4807      	ldr	r0, [pc, #28]	; (80135d8 <MX_GPIO_Init+0x5d8>)
 80135bc:	f7ef fa54 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80135c0:	2304      	movs	r3, #4
 80135c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80135c4:	2300      	movs	r3, #0
 80135c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135c8:	2300      	movs	r3, #0
 80135ca:	637b      	str	r3, [r7, #52]	; 0x34
 80135cc:	e012      	b.n	80135f4 <MX_GPIO_Init+0x5f4>
 80135ce:	bf00      	nop
 80135d0:	40022400 	.word	0x40022400
 80135d4:	10120000 	.word	0x10120000
 80135d8:	40020c00 	.word	0x40020c00
 80135dc:	40022000 	.word	0x40022000
 80135e0:	40021800 	.word	0x40021800
 80135e4:	40020800 	.word	0x40020800
 80135e8:	40022800 	.word	0x40022800
 80135ec:	40021c00 	.word	0x40021c00
 80135f0:	40020400 	.word	0x40020400
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80135f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135f8:	4619      	mov	r1, r3
 80135fa:	4834      	ldr	r0, [pc, #208]	; (80136cc <MX_GPIO_Init+0x6cc>)
 80135fc:	f7ef fa34 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013600:	2386      	movs	r3, #134	; 0x86
 8013602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013604:	2302      	movs	r3, #2
 8013606:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013608:	2300      	movs	r3, #0
 801360a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801360c:	2303      	movs	r3, #3
 801360e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013610:	230b      	movs	r3, #11
 8013612:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013618:	4619      	mov	r1, r3
 801361a:	482d      	ldr	r0, [pc, #180]	; (80136d0 <MX_GPIO_Init+0x6d0>)
 801361c:	f7ef fa24 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8013620:	2350      	movs	r3, #80	; 0x50
 8013622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013624:	2302      	movs	r3, #2
 8013626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013628:	2300      	movs	r3, #0
 801362a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801362c:	2300      	movs	r3, #0
 801362e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8013630:	230d      	movs	r3, #13
 8013632:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013638:	4619      	mov	r1, r3
 801363a:	4825      	ldr	r0, [pc, #148]	; (80136d0 <MX_GPIO_Init+0x6d0>)
 801363c:	f7ef fa14 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8013640:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013646:	2312      	movs	r3, #18
 8013648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801364a:	2301      	movs	r3, #1
 801364c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801364e:	2303      	movs	r3, #3
 8013650:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8013652:	2304      	movs	r3, #4
 8013654:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801365a:	4619      	mov	r1, r3
 801365c:	481d      	ldr	r0, [pc, #116]	; (80136d4 <MX_GPIO_Init+0x6d4>)
 801365e:	f7ef fa03 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8013662:	2328      	movs	r3, #40	; 0x28
 8013664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013666:	2302      	movs	r3, #2
 8013668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801366a:	2300      	movs	r3, #0
 801366c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801366e:	2303      	movs	r3, #3
 8013670:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013672:	230a      	movs	r3, #10
 8013674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801367a:	4619      	mov	r1, r3
 801367c:	4814      	ldr	r0, [pc, #80]	; (80136d0 <MX_GPIO_Init+0x6d0>)
 801367e:	f7ef f9f3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8013682:	2340      	movs	r3, #64	; 0x40
 8013684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013686:	2302      	movs	r3, #2
 8013688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801368a:	2300      	movs	r3, #0
 801368c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801368e:	2300      	movs	r3, #0
 8013690:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8013692:	2309      	movs	r3, #9
 8013694:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8013696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801369a:	4619      	mov	r1, r3
 801369c:	480d      	ldr	r0, [pc, #52]	; (80136d4 <MX_GPIO_Init+0x6d4>)
 801369e:	f7ef f9e3 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80136a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80136a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80136a8:	2302      	movs	r3, #2
 80136aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136b0:	2300      	movs	r3, #0
 80136b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80136b4:	2305      	movs	r3, #5
 80136b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80136b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136bc:	4619      	mov	r1, r3
 80136be:	4806      	ldr	r0, [pc, #24]	; (80136d8 <MX_GPIO_Init+0x6d8>)
 80136c0:	f7ef f9d2 	bl	8002a68 <HAL_GPIO_Init>

}
 80136c4:	bf00      	nop
 80136c6:	3740      	adds	r7, #64	; 0x40
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	40021800 	.word	0x40021800
 80136d0:	40020000 	.word	0x40020000
 80136d4:	40021c00 	.word	0x40021c00
 80136d8:	40020400 	.word	0x40020400

080136dc <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 80136ea:	f107 010c 	add.w	r1, r7, #12
 80136ee:	230a      	movs	r3, #10
 80136f0:	2201      	movs	r2, #1
 80136f2:	4804      	ldr	r0, [pc, #16]	; (8013704 <__io_putchar+0x28>)
 80136f4:	f7f3 f969 	bl	80069ca <HAL_UART_Transmit>
	return ch;
 80136f8:	687b      	ldr	r3, [r7, #4]
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3710      	adds	r7, #16
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	2002baf8 	.word	0x2002baf8

08013708 <_write>:

int _write(int file, char *ptr, int len) {
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8013714:	2300      	movs	r3, #0
 8013716:	617b      	str	r3, [r7, #20]
 8013718:	e009      	b.n	801372e <_write+0x26>
		__io_putchar(*ptr++);
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	1c5a      	adds	r2, r3, #1
 801371e:	60ba      	str	r2, [r7, #8]
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	4618      	mov	r0, r3
 8013724:	f7ff ffda 	bl	80136dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	3301      	adds	r3, #1
 801372c:	617b      	str	r3, [r7, #20]
 801372e:	697a      	ldr	r2, [r7, #20]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	429a      	cmp	r2, r3
 8013734:	dbf1      	blt.n	801371a <_write+0x12>
	}
	return len;
 8013736:	687b      	ldr	r3, [r7, #4]
}
 8013738:	4618      	mov	r0, r3
 801373a:	3718      	adds	r7, #24
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <__io_getchar>:

int __io_getchar(void) {
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status = HAL_BUSY;
 8013746:	2302      	movs	r3, #2
 8013748:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	while (Status != HAL_OK)
 801374a:	e007      	b.n	801375c <__io_getchar+0x1c>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 801374c:	1db9      	adds	r1, r7, #6
 801374e:	230a      	movs	r3, #10
 8013750:	2201      	movs	r2, #1
 8013752:	4806      	ldr	r0, [pc, #24]	; (801376c <__io_getchar+0x2c>)
 8013754:	f7f3 f9c4 	bl	8006ae0 <HAL_UART_Receive>
 8013758:	4603      	mov	r3, r0
 801375a:	71fb      	strb	r3, [r7, #7]
	while (Status != HAL_OK)
 801375c:	79fb      	ldrb	r3, [r7, #7]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1f4      	bne.n	801374c <__io_getchar+0xc>

	return (Data);
 8013762:	79bb      	ldrb	r3, [r7, #6]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	2002baf8 	.word	0x2002baf8

08013770 <_read>:

int _read(int file, char *ptr, int len) {
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b087      	sub	sp, #28
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801377c:	2300      	movs	r3, #0
 801377e:	617b      	str	r3, [r7, #20]
 8013780:	e00a      	b.n	8013798 <_read+0x28>
		*ptr++ = __io_getchar();
 8013782:	68bc      	ldr	r4, [r7, #8]
 8013784:	1c63      	adds	r3, r4, #1
 8013786:	60bb      	str	r3, [r7, #8]
 8013788:	f7ff ffda 	bl	8013740 <__io_getchar>
 801378c:	4603      	mov	r3, r0
 801378e:	b2db      	uxtb	r3, r3
 8013790:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	3301      	adds	r3, #1
 8013796:	617b      	str	r3, [r7, #20]
 8013798:	697a      	ldr	r2, [r7, #20]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	429a      	cmp	r2, r3
 801379e:	dbf0      	blt.n	8013782 <_read+0x12>
	}
	return len;
 80137a0:	687b      	ldr	r3, [r7, #4]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	371c      	adds	r7, #28
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd90      	pop	{r4, r7, pc}

080137aa <vOutputChar>:

// FreeRTOS printf functions need this
void vOutputChar(const char cChar, const TickType_t xTicksToWait) {
 80137aa:	b480      	push	{r7}
 80137ac:	b083      	sub	sp, #12
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	4603      	mov	r3, r0
 80137b2:	6039      	str	r1, [r7, #0]
 80137b4:	71fb      	strb	r3, [r7, #7]
	/* Eg. send a byte to the UART. */
}
 80137b6:	bf00      	nop
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <xApplicationMemoryPermissions>:

BaseType_t xApplicationMemoryPermissions(uint32_t aAddress) {
 80137c2:	b480      	push	{r7}
 80137c4:	b083      	sub	sp, #12
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
	return 3;
 80137ca:	2303      	movs	r3, #3
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80137d8:	b5b0      	push	{r4, r5, r7, lr}
 80137da:	f6ad 0df8 	subw	sp, sp, #2296	; 0x8f8
 80137de:	af02      	add	r7, sp, #8
 80137e0:	1d3b      	adds	r3, r7, #4
 80137e2:	6018      	str	r0, [r3, #0]
	/* init code for FATFS */
	MX_FATFS_Init();
 80137e4:	f7fe fdcc 	bl	8012380 <MX_FATFS_Init>

	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80137e8:	f001 faa6 	bl	8014d38 <MX_USB_DEVICE_Init>
	//GRAPHICS_MainTask();

	/* USER CODE BEGIN 5 */

	// Start LCD
	BSP_LCD_Init();
 80137ec:	f7ed fb3a 	bl	8000e64 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80137f0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80137f4:	2000      	movs	r0, #0
 80137f6:	f7ed fbcd 	bl	8000f94 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 80137fa:	2000      	movs	r0, #0
 80137fc:	f7ed fc2a 	bl	8001054 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8013800:	f7ed ff08 	bl	8001614 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8013804:	f04f 30ff 	mov.w	r0, #4294967295
 8013808:	f7ed fc96 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 801380c:	f04f 30ff 	mov.w	r0, #4294967295
 8013810:	f7ed fc48 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8013814:	48d6      	ldr	r0, [pc, #856]	; (8013b70 <StartDefaultTask+0x398>)
 8013816:	f7ed fc2d 	bl	8001074 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 801381a:	48d6      	ldr	r0, [pc, #856]	; (8013b74 <StartDefaultTask+0x39c>)
 801381c:	f7ed fc5c 	bl	80010d8 <BSP_LCD_SetFont>
	BSP_LCD_GetFont();
 8013820:	f7ed fc74 	bl	800110c <BSP_LCD_GetFont>
	MY_LCD_DisplayStringAtLine(5, "Starting ...", 2);
 8013824:	2202      	movs	r2, #2
 8013826:	49d4      	ldr	r1, [pc, #848]	; (8013b78 <StartDefaultTask+0x3a0>)
 8013828:	2005      	movs	r0, #5
 801382a:	f7fe fdf9 	bl	8012420 <MY_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 801382e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8013832:	f7ee f935 	bl	8001aa0 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8013836:	48ce      	ldr	r0, [pc, #824]	; (8013b70 <StartDefaultTask+0x398>)
 8013838:	f7ed fc7e 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 801383c:	48cc      	ldr	r0, [pc, #816]	; (8013b70 <StartDefaultTask+0x398>)
 801383e:	f7ed fc31 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8013842:	f04f 30ff 	mov.w	r0, #4294967295
 8013846:	f7ed fc15 	bl	8001074 <BSP_LCD_SetTextColor>
	MY_LCD_DisplayStringAtLine(5, "Starting ...", 2);
 801384a:	2202      	movs	r2, #2
 801384c:	49ca      	ldr	r1, [pc, #808]	; (8013b78 <StartDefaultTask+0x3a0>)
 801384e:	2005      	movs	r0, #5
 8013850:	f7fe fde6 	bl	8012420 <MY_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8013854:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8013858:	f7ee f922 	bl	8001aa0 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 801385c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8013860:	f7ed fc6a 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8013864:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8013868:	f7ed fc1c 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 801386c:	f04f 30ff 	mov.w	r0, #4294967295
 8013870:	f7ed fc00 	bl	8001074 <BSP_LCD_SetTextColor>

	// Initialize SDRAM FATFS
	printf("Format SDRAM disk ... \r\n");
 8013874:	48c1      	ldr	r0, [pc, #772]	; (8013b7c <StartDefaultTask+0x3a4>)
 8013876:	f017 f8e3 	bl	802aa40 <puts>
	//if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
	//	printf("	SDRAM FATFS link Success \r\n");
	//}
	// Register the file system object to the FatFs module
	if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 801387a:	2200      	movs	r2, #0
 801387c:	49c0      	ldr	r1, [pc, #768]	; (8013b80 <StartDefaultTask+0x3a8>)
 801387e:	48c1      	ldr	r0, [pc, #772]	; (8013b84 <StartDefaultTask+0x3ac>)
 8013880:	f7f6 fed8 	bl	800a634 <f_mount>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d005      	beq.n	8013896 <StartDefaultTask+0xbe>
		// FatFs Initialization Error
		_Error_Handler(__FILE__, __LINE__);
 801388a:	f240 31f3 	movw	r1, #1011	; 0x3f3
 801388e:	48be      	ldr	r0, [pc, #760]	; (8013b88 <StartDefaultTask+0x3b0>)
 8013890:	f000 fb6e 	bl	8013f70 <_Error_Handler>
 8013894:	e002      	b.n	801389c <StartDefaultTask+0xc4>
	} else {
		printf("	SDRAM FATFS mount Success \r\n");
 8013896:	48bd      	ldr	r0, [pc, #756]	; (8013b8c <StartDefaultTask+0x3b4>)
 8013898:	f017 f8d2 	bl	802aa40 <puts>
	}
	// Create a FAT file system (format) on the logical drive
	if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 801389c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	4bbb      	ldr	r3, [pc, #748]	; (8013b90 <StartDefaultTask+0x3b8>)
 80138a4:	2200      	movs	r2, #0
 80138a6:	2102      	movs	r1, #2
 80138a8:	48b5      	ldr	r0, [pc, #724]	; (8013b80 <StartDefaultTask+0x3a8>)
 80138aa:	f7f7 fceb 	bl	800b284 <f_mkfs>
 80138ae:	4603      	mov	r3, r0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d005      	beq.n	80138c0 <StartDefaultTask+0xe8>
			sizeof(workBuffer)) != FR_OK) {
		// FatFs Format Error
		_Error_Handler(__FILE__, __LINE__);
 80138b4:	f240 31fb 	movw	r1, #1019	; 0x3fb
 80138b8:	48b3      	ldr	r0, [pc, #716]	; (8013b88 <StartDefaultTask+0x3b0>)
 80138ba:	f000 fb59 	bl	8013f70 <_Error_Handler>
 80138be:	e002      	b.n	80138c6 <StartDefaultTask+0xee>
	} else {
		printf("Format SDRAM disk done OK \r\n");
 80138c0:	48b4      	ldr	r0, [pc, #720]	; (8013b94 <StartDefaultTask+0x3bc>)
 80138c2:	f017 f8bd 	bl	802aa40 <puts>
	}

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 80138c6:	48ae      	ldr	r0, [pc, #696]	; (8013b80 <StartDefaultTask+0x3a8>)
 80138c8:	f7f8 f99c 	bl	800bc04 <FATFS_UnLinkDriver>

	char Arg[30];
	char Cmd[30];
	char CmdBuffer[30];

	uint8_t n = 0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	f887 38e7 	strb.w	r3, [r7, #2279]	; 0x8e7
	uint32_t MeasNo = 0;
 80138d2:	2300      	movs	r3, #0
 80138d4:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0

	uint32_t NoOfPoints = 19200;
 80138d8:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80138dc:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
	uint32_t AvgSize = 10;
 80138e0:	230a      	movs	r3, #10
 80138e2:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
	uint32_t Period_us = 100;
 80138e6:	2364      	movs	r3, #100	; 0x64
 80138e8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
	uint32_t Count_ms = 1000;
 80138ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80138f0:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80138f4:	f04f 31ff 	mov.w	r1, #4294967295
 80138f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80138fc:	f7fe fee2 	bl	80126c4 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 8013900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013904:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 8013908:	4618      	mov	r0, r3
 801390a:	f7fe fdd4 	bl	80124b6 <initArray>

	// LCDWrite(5, "Ready.");

	Cmd[0] = '\0';
 801390e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013912:	2200      	movs	r2, #0
 8013914:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 8013916:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801391a:	2200      	movs	r2, #0
 801391c:	701a      	strb	r2, [r3, #0]

	while (!((strcmp(Cmd, "quit") == 0) && (n == 0))) {
 801391e:	e2a8      	b.n	8013e72 <StartDefaultTask+0x69a>

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %s secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				myPrintf(NoOfPoints * Period_us / 1000000.0));
 8013920:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8013924:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8013928:	fb02 f303 	mul.w	r3, r2, r3
 801392c:	4618      	mov	r0, r3
 801392e:	f7ec fe19 	bl	8000564 <__aeabi_ui2d>
 8013932:	a38d      	add	r3, pc, #564	; (adr r3, 8013b68 <StartDefaultTask+0x390>)
 8013934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013938:	f7ec ffb4 	bl	80008a4 <__aeabi_ddiv>
 801393c:	4603      	mov	r3, r0
 801393e:	460c      	mov	r4, r1
		printf(
 8013940:	4618      	mov	r0, r3
 8013942:	4621      	mov	r1, r4
 8013944:	f7ed f8b6 	bl	8000ab4 <__aeabi_d2f>
 8013948:	4603      	mov	r3, r0
 801394a:	ee00 3a10 	vmov	s0, r3
 801394e:	f7fe fd31 	bl	80123b4 <myPrintf>
 8013952:	4603      	mov	r3, r0
 8013954:	9301      	str	r3, [sp, #4]
 8013956:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8013960:	f8d7 28d8 	ldr.w	r2, [r7, #2264]	; 0x8d8
 8013964:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 8013968:	488b      	ldr	r0, [pc, #556]	; (8013b98 <StartDefaultTask+0x3c0>)
 801396a:	f016 fff5 	bl	802a958 <iprintf>

		Cmd[0] = '\0';
 801396e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013972:	2200      	movs	r2, #0
 8013974:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 8013976:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801397a:	2200      	movs	r2, #0
 801397c:	701a      	strb	r2, [r3, #0]

		strcpy(CmdBuffer, " ");
 801397e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013982:	2220      	movs	r2, #32
 8013984:	801a      	strh	r2, [r3, #0]
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8013986:	e004      	b.n	8013992 <StartDefaultTask+0x1ba>
			String_GetString((uint8_t *) CmdBuffer);
 8013988:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801398c:	4618      	mov	r0, r3
 801398e:	f7fe fbdb 	bl	8012148 <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8013992:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013996:	4981      	ldr	r1, [pc, #516]	; (8013b9c <StartDefaultTask+0x3c4>)
 8013998:	4618      	mov	r0, r3
 801399a:	f7ec fc39 	bl	8000210 <strcmp>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d0f1      	beq.n	8013988 <StartDefaultTask+0x1b0>
 80139a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d0ec      	beq.n	8013988 <StartDefaultTask+0x1b0>
		}

		//printf("\r\n I got %s \r\n", CmdBuffer);

		// Parse and copy arg 0
		cmdPtr = string_parse((char *) CmdBuffer, 0);
 80139ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80139b2:	2100      	movs	r1, #0
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fe fdc9 	bl	801254c <string_parse>
 80139ba:	f8c7 08ec 	str.w	r0, [r7, #2284]	; 0x8ec

		uint8_t i = 0;
 80139be:	2300      	movs	r3, #0
 80139c0:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
		while (*cmdPtr != '\0') {
 80139c4:	e011      	b.n	80139ea <StartDefaultTask+0x212>
			Cmd[i] = (char) *cmdPtr;
 80139c6:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 80139ca:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 80139ce:	7811      	ldrb	r1, [r2, #0]
 80139d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80139d4:	54d1      	strb	r1, [r2, r3]
			i++;
 80139d6:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 80139da:	3301      	adds	r3, #1
 80139dc:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
			cmdPtr++;
 80139e0:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80139e4:	3301      	adds	r3, #1
 80139e6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
		while (*cmdPtr != '\0') {
 80139ea:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1e8      	bne.n	80139c6 <StartDefaultTask+0x1ee>
		}
		Cmd[i] = '\0';
 80139f4:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 80139f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80139fc:	2100      	movs	r1, #0
 80139fe:	54d1      	strb	r1, [r2, r3]

		argPtr = string_parse((char *) CmdBuffer, 1);
 8013a00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a04:	2101      	movs	r1, #1
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fe fda0 	bl	801254c <string_parse>
 8013a0c:	f8c7 08e8 	str.w	r0, [r7, #2280]	; 0x8e8

		i = 0;
 8013a10:	2300      	movs	r3, #0
 8013a12:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
		while ((argPtr != NULL) && (*argPtr != '\0')) {
 8013a16:	e011      	b.n	8013a3c <StartDefaultTask+0x264>
			Arg[i] = (char) *argPtr;
 8013a18:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8013a1c:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
 8013a20:	7811      	ldrb	r1, [r2, #0]
 8013a22:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8013a26:	54d1      	strb	r1, [r2, r3]
			i++;
 8013a28:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
			argPtr++;
 8013a32:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8013a36:	3301      	adds	r3, #1
 8013a38:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
		while ((argPtr != NULL) && (*argPtr != '\0')) {
 8013a3c:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d004      	beq.n	8013a4e <StartDefaultTask+0x276>
 8013a44:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e4      	bne.n	8013a18 <StartDefaultTask+0x240>
		}
		Arg[i] = '\0';
 8013a4e:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8013a52:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8013a56:	2100      	movs	r1, #0
 8013a58:	54d1      	strb	r1, [r2, r3]

		// Branch based on command

		// Length of the second argument
		n = strlen(Arg);
 8013a5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ec fbe0 	bl	8000224 <strlen>
 8013a64:	4603      	mov	r3, r0
 8013a66:	f887 38e7 	strb.w	r3, [r7, #2279]	; 0x8e7

		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 0)) {
 8013a6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013a6e:	494c      	ldr	r1, [pc, #304]	; (8013ba0 <StartDefaultTask+0x3c8>)
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7ec fbcd 	bl	8000210 <strcmp>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f040 80df 	bne.w	8013c3c <StartDefaultTask+0x464>
 8013a7e:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f040 80da 	bne.w	8013c3c <StartDefaultTask+0x464>

			// Countdown
			CountDown(Count_ms);
 8013a88:	f8d7 08d0 	ldr.w	r0, [r7, #2256]	; 0x8d0
 8013a8c:	f7fe fe4e 	bl	801272c <CountDown>

			MeasNo++;
 8013a90:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	; 0x8e0
 8013a94:	3301      	adds	r3, #1
 8013a96:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 8013a9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a9e:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8013aa2:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fe fee0 	bl	801286c <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 8013aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013ab0:	f8d7 28d8 	ldr.w	r2, [r7, #2264]	; 0x8d8
 8013ab4:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7fe ff35 	bl	8012928 <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt

			// Unlink the SDRAM disk I/O driver
			FATFS_UnLinkDriver(SDRAMPath);
 8013abe:	4830      	ldr	r0, [pc, #192]	; (8013b80 <StartDefaultTask+0x3a8>)
 8013ac0:	f7f8 f8a0 	bl	800bc04 <FATFS_UnLinkDriver>

			char fname[30] = " ";
 8013ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013ac8:	2220      	movs	r2, #32
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	3304      	adds	r3, #4
 8013ace:	2200      	movs	r2, #0
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	605a      	str	r2, [r3, #4]
 8013ad4:	609a      	str	r2, [r3, #8]
 8013ad6:	60da      	str	r2, [r3, #12]
 8013ad8:	611a      	str	r2, [r3, #16]
 8013ada:	615a      	str	r2, [r3, #20]
 8013adc:	831a      	strh	r2, [r3, #24]

			sprintf(fname, "meas_%lu.txt", MeasNo);
 8013ade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013ae2:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8013ae6:	492f      	ldr	r1, [pc, #188]	; (8013ba4 <StartDefaultTask+0x3cc>)
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f000 fea2 	bl	8014832 <sprintf>

			printf("Writing data to file %s... ", fname);
 8013aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013af2:	4619      	mov	r1, r3
 8013af4:	482c      	ldr	r0, [pc, #176]	; (8013ba8 <StartDefaultTask+0x3d0>)
 8013af6:	f016 ff2f 	bl	802a958 <iprintf>

			// Link the SDRAM disk I/O driver
			if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) != 0) {
 8013afa:	4921      	ldr	r1, [pc, #132]	; (8013b80 <StartDefaultTask+0x3a8>)
 8013afc:	482b      	ldr	r0, [pc, #172]	; (8013bac <StartDefaultTask+0x3d4>)
 8013afe:	f7f8 f839 	bl	800bb74 <FATFS_LinkDriver>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d007      	beq.n	8013b18 <StartDefaultTask+0x340>
				printf("	SDRAM FATFS link Error \r\n");
 8013b08:	4829      	ldr	r0, [pc, #164]	; (8013bb0 <StartDefaultTask+0x3d8>)
 8013b0a:	f016 ff99 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013b0e:	f240 4175 	movw	r1, #1141	; 0x475
 8013b12:	481d      	ldr	r0, [pc, #116]	; (8013b88 <StartDefaultTask+0x3b0>)
 8013b14:	f000 fa2c 	bl	8013f70 <_Error_Handler>
			}

			// Register the file system object to the FatFs module
			if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 8013b18:	2200      	movs	r2, #0
 8013b1a:	4919      	ldr	r1, [pc, #100]	; (8013b80 <StartDefaultTask+0x3a8>)
 8013b1c:	4819      	ldr	r0, [pc, #100]	; (8013b84 <StartDefaultTask+0x3ac>)
 8013b1e:	f7f6 fd89 	bl	800a634 <f_mount>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d007      	beq.n	8013b38 <StartDefaultTask+0x360>
				// FatFs Initialization Error
				printf("	SDRAM FATFS mount Error \r\n");
 8013b28:	4822      	ldr	r0, [pc, #136]	; (8013bb4 <StartDefaultTask+0x3dc>)
 8013b2a:	f016 ff89 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013b2e:	f240 417c 	movw	r1, #1148	; 0x47c
 8013b32:	4815      	ldr	r0, [pc, #84]	; (8013b88 <StartDefaultTask+0x3b0>)
 8013b34:	f000 fa1c 	bl	8013f70 <_Error_Handler>
			}

			// Create and Open a new text file object with write access
			if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8013b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013b3c:	220a      	movs	r2, #10
 8013b3e:	4619      	mov	r1, r3
 8013b40:	481d      	ldr	r0, [pc, #116]	; (8013bb8 <StartDefaultTask+0x3e0>)
 8013b42:	f7f6 fddb 	bl	800a6fc <f_open>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d007      	beq.n	8013b5c <StartDefaultTask+0x384>
				// File Open for write Error
				printf("	SDRAM FATFS fopen Error \r\n");
 8013b4c:	481b      	ldr	r0, [pc, #108]	; (8013bbc <StartDefaultTask+0x3e4>)
 8013b4e:	f016 ff77 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013b52:	f240 4183 	movw	r1, #1155	; 0x483
 8013b56:	480c      	ldr	r0, [pc, #48]	; (8013b88 <StartDefaultTask+0x3b0>)
 8013b58:	f000 fa0a 	bl	8013f70 <_Error_Handler>
			}

			char buffer[30];

			// Write data to the text file
			for (int idx = 0; idx < NoOfPoints; idx++) {
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
 8013b62:	e04c      	b.n	8013bfe <StartDefaultTask+0x426>
 8013b64:	f3af 8000 	nop.w
 8013b68:	00000000 	.word	0x00000000
 8013b6c:	412e8480 	.word	0x412e8480
 8013b70:	ff0000ff 	.word	0xff0000ff
 8013b74:	20000000 	.word	0x20000000
 8013b78:	0802c0b4 	.word	0x0802c0b4
 8013b7c:	0802c0c4 	.word	0x0802c0c4
 8013b80:	2002bdd4 	.word	0x2002bdd4
 8013b84:	2002c0b4 	.word	0x2002c0b4
 8013b88:	0802c0a4 	.word	0x0802c0a4
 8013b8c:	0802c0dc 	.word	0x0802c0dc
 8013b90:	2002bbd4 	.word	0x2002bbd4
 8013b94:	0802c0fc 	.word	0x0802c0fc
 8013b98:	0802c118 	.word	0x0802c118
 8013b9c:	0802c184 	.word	0x0802c184
 8013ba0:	0802c188 	.word	0x0802c188
 8013ba4:	0802c190 	.word	0x0802c190
 8013ba8:	0802c1a0 	.word	0x0802c1a0
 8013bac:	0802f028 	.word	0x0802f028
 8013bb0:	0802c1bc 	.word	0x0802c1bc
 8013bb4:	0802c1d8 	.word	0x0802c1d8
 8013bb8:	2002be80 	.word	0x2002be80
 8013bbc:	0802c1f4 	.word	0x0802c1f4
				sprintf(buffer, "%lu \r\n", ((uint32_t) Data.array[idx]));
 8013bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	4413      	add	r3, r2
 8013bce:	881b      	ldrh	r3, [r3, #0]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f107 0314 	add.w	r3, r7, #20
 8013bd6:	49bb      	ldr	r1, [pc, #748]	; (8013ec4 <StartDefaultTask+0x6ec>)
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 fe2a 	bl	8014832 <sprintf>
				res = f_write(&MyFile, buffer, sizeof(buffer),
 8013bde:	f107 0114 	add.w	r1, r7, #20
 8013be2:	4bb9      	ldr	r3, [pc, #740]	; (8013ec8 <StartDefaultTask+0x6f0>)
 8013be4:	221e      	movs	r2, #30
 8013be6:	48b9      	ldr	r0, [pc, #740]	; (8013ecc <StartDefaultTask+0x6f4>)
 8013be8:	f7f6 ff4d 	bl	800aa86 <f_write>
 8013bec:	4603      	mov	r3, r0
 8013bee:	461a      	mov	r2, r3
 8013bf0:	4bb7      	ldr	r3, [pc, #732]	; (8013ed0 <StartDefaultTask+0x6f8>)
 8013bf2:	701a      	strb	r2, [r3, #0]
			for (int idx = 0; idx < NoOfPoints; idx++) {
 8013bf4:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
 8013bfe:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8013c02:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d3da      	bcc.n	8013bc0 <StartDefaultTask+0x3e8>
						(void *) &byteswritten);
			}

			if ((byteswritten == 0) || (res != FR_OK)) {
 8013c0a:	4baf      	ldr	r3, [pc, #700]	; (8013ec8 <StartDefaultTask+0x6f0>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d003      	beq.n	8013c1a <StartDefaultTask+0x442>
 8013c12:	4baf      	ldr	r3, [pc, #700]	; (8013ed0 <StartDefaultTask+0x6f8>)
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d007      	beq.n	8013c2a <StartDefaultTask+0x452>
				printf("	SDRAM FATFS write Error \r\n");
 8013c1a:	48ae      	ldr	r0, [pc, #696]	; (8013ed4 <StartDefaultTask+0x6fc>)
 8013c1c:	f016 ff10 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013c20:	f240 4191 	movw	r1, #1169	; 0x491
 8013c24:	48ac      	ldr	r0, [pc, #688]	; (8013ed8 <StartDefaultTask+0x700>)
 8013c26:	f000 f9a3 	bl	8013f70 <_Error_Handler>
			}

			// Close the text file
			f_close(&MyFile);
 8013c2a:	48a8      	ldr	r0, [pc, #672]	; (8013ecc <StartDefaultTask+0x6f4>)
 8013c2c:	f7f7 f958 	bl	800aee0 <f_close>
			// printf("SDRAM FATFS fclose Success \r\n");

			printf("Write OK \r\n");
 8013c30:	48aa      	ldr	r0, [pc, #680]	; (8013edc <StartDefaultTask+0x704>)
 8013c32:	f016 ff05 	bl	802aa40 <puts>

			DirList();
 8013c36:	f7fe ff13 	bl	8012a60 <DirList>
		if ((strcmp(Cmd, "meas") == 0) && (n == 0)) {
 8013c3a:	e11a      	b.n	8013e72 <StartDefaultTask+0x69a>
//					&Data, NoOfPoints, MeasNo);
//
//		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n > 0)) {
 8013c3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c40:	49a7      	ldr	r1, [pc, #668]	; (8013ee0 <StartDefaultTask+0x708>)
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ec fae4 	bl	8000210 <strcmp>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d125      	bne.n	8013c9a <StartDefaultTask+0x4c2>
 8013c4e:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d021      	beq.n	8013c9a <StartDefaultTask+0x4c2>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 8013c56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013c5a:	220a      	movs	r2, #10
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f016 ff8e 	bl	802ab80 <strtol>
 8013c64:	4603      	mov	r3, r0
 8013c66:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
			printf("Old Data size is %u New NoOfPOints = %lu \r\n", Data.size,
 8013c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c6e:	689b      	ldr	r3, [r3, #8]
 8013c70:	f8d7 28dc 	ldr.w	r2, [r7, #2268]	; 0x8dc
 8013c74:	4619      	mov	r1, r3
 8013c76:	489b      	ldr	r0, [pc, #620]	; (8013ee4 <StartDefaultTask+0x70c>)
 8013c78:	f016 fe6e 	bl	802a958 <iprintf>
					NoOfPoints);

			insertArray(&Data, NoOfPoints);
 8013c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c80:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fe fc2d 	bl	80124e4 <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 8013c8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	4619      	mov	r1, r3
 8013c92:	4895      	ldr	r0, [pc, #596]	; (8013ee8 <StartDefaultTask+0x710>)
 8013c94:	f016 fe60 	bl	802a958 <iprintf>
 8013c98:	e0eb      	b.n	8013e72 <StartDefaultTask+0x69a>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n > 0)) {
 8013c9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c9e:	4993      	ldr	r1, [pc, #588]	; (8013eec <StartDefaultTask+0x714>)
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ec fab5 	bl	8000210 <strcmp>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10e      	bne.n	8013cca <StartDefaultTask+0x4f2>
 8013cac:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00a      	beq.n	8013cca <StartDefaultTask+0x4f2>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 8013cb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013cb8:	220a      	movs	r2, #10
 8013cba:	2100      	movs	r1, #0
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f016 ff5f 	bl	802ab80 <strtol>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
 8013cc8:	e0d3      	b.n	8013e72 <StartDefaultTask+0x69a>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n > 0)) {
 8013cca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013cce:	4988      	ldr	r1, [pc, #544]	; (8013ef0 <StartDefaultTask+0x718>)
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7ec fa9d 	bl	8000210 <strcmp>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10e      	bne.n	8013cfa <StartDefaultTask+0x522>
 8013cdc:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00a      	beq.n	8013cfa <StartDefaultTask+0x522>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 8013ce4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013ce8:	220a      	movs	r2, #10
 8013cea:	2100      	movs	r1, #0
 8013cec:	4618      	mov	r0, r3
 8013cee:	f016 ff47 	bl	802ab80 <strtol>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8013cf8:	e0bb      	b.n	8013e72 <StartDefaultTask+0x69a>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n > 0)) {
 8013cfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013cfe:	497d      	ldr	r1, [pc, #500]	; (8013ef4 <StartDefaultTask+0x71c>)
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ec fa85 	bl	8000210 <strcmp>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10e      	bne.n	8013d2a <StartDefaultTask+0x552>
 8013d0c:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00a      	beq.n	8013d2a <StartDefaultTask+0x552>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 8013d14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013d18:	220a      	movs	r2, #10
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f016 ff2f 	bl	802ab80 <strtol>
 8013d22:	4603      	mov	r3, r0
 8013d24:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
 8013d28:	e0a3      	b.n	8013e72 <StartDefaultTask+0x69a>
		}

		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 0)) {
 8013d2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013d2e:	4972      	ldr	r1, [pc, #456]	; (8013ef8 <StartDefaultTask+0x720>)
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7ec fa6d 	bl	8000210 <strcmp>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	f040 8089 	bne.w	8013e50 <StartDefaultTask+0x678>
 8013d3e:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f040 8084 	bne.w	8013e50 <StartDefaultTask+0x678>

			// Unlink the SDRAM disk I/O driver
			FATFS_UnLinkDriver(SDRAMPath);
 8013d48:	486c      	ldr	r0, [pc, #432]	; (8013efc <StartDefaultTask+0x724>)
 8013d4a:	f7f7 ff5b 	bl	800bc04 <FATFS_UnLinkDriver>

			// Link the SDRAM disk I/O driver
			if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) != 0) {
 8013d4e:	496b      	ldr	r1, [pc, #428]	; (8013efc <StartDefaultTask+0x724>)
 8013d50:	486b      	ldr	r0, [pc, #428]	; (8013f00 <StartDefaultTask+0x728>)
 8013d52:	f7f7 ff0f 	bl	800bb74 <FATFS_LinkDriver>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d007      	beq.n	8013d6c <StartDefaultTask+0x594>
				printf("	SDRAM FATFS link Error \r\n");
 8013d5c:	4869      	ldr	r0, [pc, #420]	; (8013f04 <StartDefaultTask+0x72c>)
 8013d5e:	f016 fe6f 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013d62:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8013d66:	485c      	ldr	r0, [pc, #368]	; (8013ed8 <StartDefaultTask+0x700>)
 8013d68:	f000 f902 	bl	8013f70 <_Error_Handler>
			}

			// Register the file system object to the FatFs module
			if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	4963      	ldr	r1, [pc, #396]	; (8013efc <StartDefaultTask+0x724>)
 8013d70:	4865      	ldr	r0, [pc, #404]	; (8013f08 <StartDefaultTask+0x730>)
 8013d72:	f7f6 fc5f 	bl	800a634 <f_mount>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d007      	beq.n	8013d8c <StartDefaultTask+0x5b4>
				// FatFs Initialization Error
				printf("	SDRAM FATFS mount Error \r\n");
 8013d7c:	4863      	ldr	r0, [pc, #396]	; (8013f0c <StartDefaultTask+0x734>)
 8013d7e:	f016 fe5f 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013d82:	f240 41d3 	movw	r1, #1235	; 0x4d3
 8013d86:	4854      	ldr	r0, [pc, #336]	; (8013ed8 <StartDefaultTask+0x700>)
 8013d88:	f000 f8f2 	bl	8013f70 <_Error_Handler>
			}

			strcpy(buff, "");
 8013d8c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d90:	2200      	movs	r2, #0
 8013d92:	701a      	strb	r2, [r3, #0]

			// File list
			res = scan_files(buff);
 8013d94:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fe fd07 	bl	80127ac <scan_files>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	461a      	mov	r2, r3
 8013da2:	4b4b      	ldr	r3, [pc, #300]	; (8013ed0 <StartDefaultTask+0x6f8>)
 8013da4:	701a      	strb	r2, [r3, #0]
			// Disk free space
			DWORD fre_clust, fre_sect, tot_sect;
			FATFS *fsp;

			// Get volume information and free clusters of drive 1
			res = f_getfree(buff, &fre_clust, &fsp);
 8013da6:	f107 020c 	add.w	r2, r7, #12
 8013daa:	f107 0110 	add.w	r1, r7, #16
 8013dae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f7 f9aa 	bl	800b10c <f_getfree>
 8013db8:	4603      	mov	r3, r0
 8013dba:	461a      	mov	r2, r3
 8013dbc:	4b44      	ldr	r3, [pc, #272]	; (8013ed0 <StartDefaultTask+0x6f8>)
 8013dbe:	701a      	strb	r2, [r3, #0]
			if (res) {
 8013dc0:	4b43      	ldr	r3, [pc, #268]	; (8013ed0 <StartDefaultTask+0x6f8>)
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d007      	beq.n	8013dd8 <StartDefaultTask+0x600>
				printf("Error: Filesystem free space check failed \r\n");
 8013dc8:	4851      	ldr	r0, [pc, #324]	; (8013f10 <StartDefaultTask+0x738>)
 8013dca:	f016 fe39 	bl	802aa40 <puts>
				_Error_Handler(__FILE__, __LINE__);
 8013dce:	f240 41e3 	movw	r1, #1251	; 0x4e3
 8013dd2:	4841      	ldr	r0, [pc, #260]	; (8013ed8 <StartDefaultTask+0x700>)
 8013dd4:	f000 f8cc 	bl	8013f70 <_Error_Handler>
			}

			// Get total sectors and free sectors
			tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 8013dd8:	f107 030c 	add.w	r3, r7, #12
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	699b      	ldr	r3, [r3, #24]
 8013de0:	3b02      	subs	r3, #2
 8013de2:	f107 020c 	add.w	r2, r7, #12
 8013de6:	6812      	ldr	r2, [r2, #0]
 8013de8:	8952      	ldrh	r2, [r2, #10]
 8013dea:	fb02 f303 	mul.w	r3, r2, r3
 8013dee:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
			fre_sect = fre_clust * fsp->csize;
 8013df2:	f107 030c 	add.w	r3, r7, #12
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	895b      	ldrh	r3, [r3, #10]
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	f107 0310 	add.w	r3, r7, #16
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	fb03 f302 	mul.w	r3, r3, r2
 8013e06:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0

			// Print the free space (assuming 512 bytes/sector)
			printf(
 8013e0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8013e0e:	0adc      	lsrs	r4, r3, #11
 8013e10:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8013e14:	0add      	lsrs	r5, r3, #11
					"%10lu KiB total drive space.\n%10lu KiB available (%s\%%). \n",
					(tot_sect / 2048), (fre_sect / 2048),
					myPrintf(
							((float) (fre_sect)) / ((float) (tot_sect))
 8013e16:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8013e1a:	ee07 3a90 	vmov	s15, r3
 8013e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8013e26:	ee07 3a90 	vmov	s15, r3
 8013e2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			printf(
 8013e32:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013f14 <StartDefaultTask+0x73c>
 8013e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013e3e:	f7fe fab9 	bl	80123b4 <myPrintf>
 8013e42:	4603      	mov	r3, r0
 8013e44:	462a      	mov	r2, r5
 8013e46:	4621      	mov	r1, r4
 8013e48:	4833      	ldr	r0, [pc, #204]	; (8013f18 <StartDefaultTask+0x740>)
 8013e4a:	f016 fd85 	bl	802a958 <iprintf>
		else if ((strcmp(Cmd, "dir") == 0) && (n == 0)) {
 8013e4e:	e010      	b.n	8013e72 <StartDefaultTask+0x69a>
									* 100.0));

		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 0)) {
 8013e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013e54:	4931      	ldr	r1, [pc, #196]	; (8013f1c <StartDefaultTask+0x744>)
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7ec f9da 	bl	8000210 <strcmp>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d104      	bne.n	8013e6c <StartDefaultTask+0x694>
 8013e62:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d100      	bne.n	8013e6c <StartDefaultTask+0x694>
 8013e6a:	e002      	b.n	8013e72 <StartDefaultTask+0x69a>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 8013e6c:	482c      	ldr	r0, [pc, #176]	; (8013f20 <StartDefaultTask+0x748>)
 8013e6e:	f016 fde7 	bl	802aa40 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 0))) {
 8013e72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013e76:	4929      	ldr	r1, [pc, #164]	; (8013f1c <StartDefaultTask+0x744>)
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ec f9c9 	bl	8000210 <strcmp>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	f47f ad4d 	bne.w	8013920 <StartDefaultTask+0x148>
 8013e86:	f897 38e7 	ldrb.w	r3, [r7, #2279]	; 0x8e7
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	f47f ad48 	bne.w	8013920 <StartDefaultTask+0x148>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 8013e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fe fb42 	bl	801251e <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 8013e9a:	4818      	ldr	r0, [pc, #96]	; (8013efc <StartDefaultTask+0x724>)
 8013e9c:	f7f7 feb2 	bl	800bc04 <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8013ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8013ea4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8013ea8:	f7fe fc0c 	bl	80126c4 <InitScreen>
	LCDWrite(5, "Stop.");
 8013eac:	491d      	ldr	r1, [pc, #116]	; (8013f24 <StartDefaultTask+0x74c>)
 8013eae:	2005      	movs	r0, #5
 8013eb0:	f7fe fc20 	bl	80126f4 <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 8013eb4:	481c      	ldr	r0, [pc, #112]	; (8013f28 <StartDefaultTask+0x750>)
 8013eb6:	f016 fdc3 	bl	802aa40 <puts>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8013eba:	2001      	movs	r0, #1
 8013ebc:	f7f7 ff68 	bl	800bd90 <osDelay>
 8013ec0:	e7fb      	b.n	8013eba <StartDefaultTask+0x6e2>
 8013ec2:	bf00      	nop
 8013ec4:	0802c210 	.word	0x0802c210
 8013ec8:	2002bbcc 	.word	0x2002bbcc
 8013ecc:	2002be80 	.word	0x2002be80
 8013ed0:	2002c0b0 	.word	0x2002c0b0
 8013ed4:	0802c218 	.word	0x0802c218
 8013ed8:	0802c0a4 	.word	0x0802c0a4
 8013edc:	0802c234 	.word	0x0802c234
 8013ee0:	0802c240 	.word	0x0802c240
 8013ee4:	0802c24c 	.word	0x0802c24c
 8013ee8:	0802c278 	.word	0x0802c278
 8013eec:	0802c290 	.word	0x0802c290
 8013ef0:	0802c298 	.word	0x0802c298
 8013ef4:	0802c2a4 	.word	0x0802c2a4
 8013ef8:	0802c2b0 	.word	0x0802c2b0
 8013efc:	2002bdd4 	.word	0x2002bdd4
 8013f00:	0802f028 	.word	0x0802f028
 8013f04:	0802c1bc 	.word	0x0802c1bc
 8013f08:	2002c0b4 	.word	0x2002c0b4
 8013f0c:	0802c1d8 	.word	0x0802c1d8
 8013f10:	0802c2b4 	.word	0x0802c2b4
 8013f14:	42c80000 	.word	0x42c80000
 8013f18:	0802c2e0 	.word	0x0802c2e0
 8013f1c:	0802c31c 	.word	0x0802c31c
 8013f20:	0802c324 	.word	0x0802c324
 8013f24:	0802c340 	.word	0x0802c340
 8013f28:	0802c348 	.word	0x0802c348

08013f2c <StartUSBDTask>:
  /* USER CODE END 5 */
}

/* StartUSBDTask function */
void StartUSBDTask(void const * argument)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSBDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8013f34:	2001      	movs	r0, #1
 8013f36:	f7f7 ff2b 	bl	800bd90 <osDelay>
 8013f3a:	e7fb      	b.n	8013f34 <StartUSBDTask+0x8>

08013f3c <StartSTEMWINTask>:
  /* USER CODE END StartUSBDTask */
}

/* StartSTEMWINTask function */
void StartSTEMWINTask(void const * argument)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSTEMWINTask */

	/* Graphic application */
	GRAPHICS_MainTask();
 8013f44:	f7fc fabe 	bl	80104c4 <GRAPHICS_MainTask>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8013f48:	2001      	movs	r0, #1
 8013f4a:	f7f7 ff21 	bl	800bd90 <osDelay>
 8013f4e:	e7fb      	b.n	8013f48 <StartSTEMWINTask+0xc>

08013f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f60:	d101      	bne.n	8013f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013f62:	f7ed fd7d 	bl	8001a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013f66:	bf00      	nop
 8013f68:	3708      	adds	r7, #8
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
	...

08013f70 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("\r\nError file = %s Line = %d \r\n", file, line);
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	6879      	ldr	r1, [r7, #4]
 8013f7e:	4802      	ldr	r0, [pc, #8]	; (8013f88 <_Error_Handler+0x18>)
 8013f80:	f016 fcea 	bl	802a958 <iprintf>
 8013f84:	e7f9      	b.n	8013f7a <_Error_Handler+0xa>
 8013f86:	bf00      	nop
 8013f88:	0802c364 	.word	0x0802c364

08013f8c <strbuf_init>:
const static _U32 u32 = {
	ucBytes : { 0, 1, 2, 3 }
};

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	68ba      	ldr	r2, [r7, #8]
 8013f9c:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	68ba      	ldr	r2, [r7, #8]
 8013fa2:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	1e5a      	subs	r2, r3, #1
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	3310      	adds	r3, #16
 8013fb6:	2210      	movs	r2, #16
 8013fb8:	2100      	movs	r1, #0
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f016 fc17 	bl	802a7ee <memset>
}
 8013fc0:	bf00      	nop
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d10d      	bne.n	8013ff6 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	2214      	movs	r2, #20
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ff fbe1 	bl	80137aa <vOutputChar>
		apStr->curLen++;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	1c5a      	adds	r2, r3, #1
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e022      	b.n	801403c <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	689b      	ldr	r3, [r3, #8]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d20e      	bcs.n	8014020 <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	1c59      	adds	r1, r3, #1
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	6011      	str	r1, [r2, #0]
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	b2d2      	uxtb	r2, r2
 8014010:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	68db      	ldr	r3, [r3, #12]
 8014016:	1c5a      	adds	r2, r3, #1
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 801401c:	2301      	movs	r3, #1
 801401e:	e00d      	b.n	801403c <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	689b      	ldr	r3, [r3, #8]
 8014028:	429a      	cmp	r2, r3
 801402a:	d106      	bne.n	801403a <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	1c59      	adds	r1, r3, #1
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	6011      	str	r1, [r2, #0]
 8014036:	2200      	movs	r2, #0
 8014038:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 801403a:	2300      	movs	r3, #0
}
 801403c:	4618      	mov	r0, r3
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static portINLINE BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d112      	bne.n	801407c <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2214      	movs	r2, #20
 801405c:	4611      	mov	r1, r2
 801405e:	4618      	mov	r0, r3
 8014060:	f7ff fba3 	bl	80137aa <vOutputChar>
		if( c == 0 )
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d101      	bne.n	801406e <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 801406a:	2300      	movs	r3, #0
 801406c:	e02e      	b.n	80140cc <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	1c5a      	adds	r2, r3, #1
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8014078:	2301      	movs	r3, #1
 801407a:	e027      	b.n	80140cc <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	429a      	cmp	r2, r3
 8014086:	d213      	bcs.n	80140b0 <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	1c59      	adds	r1, r3, #1
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	6011      	str	r1, [r2, #0]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	b2d2      	uxtb	r2, r2
 8014096:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d101      	bne.n	80140a2 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 801409e:	2300      	movs	r3, #0
 80140a0:	e014      	b.n	80140cc <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	1c5a      	adds	r2, r3, #1
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80140ac:	2301      	movs	r3, #1
 80140ae:	e00d      	b.n	80140cc <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d106      	bne.n	80140ca <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	1c59      	adds	r1, r3, #1
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	6011      	str	r1, [r2, #0]
 80140c6:	2200      	movs	r2, #0
 80140c8:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80140ca:	2300      	movs	r3, #0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80140d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80140de:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ff fb6d 	bl	80137c2 <xApplicationMemoryPermissions>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d101      	bne.n	80140f2 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80140ee:	4b4c      	ldr	r3, [pc, #304]	; (8014220 <prints+0x14c>)
 80140f0:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	695b      	ldr	r3, [r3, #20]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	dd1b      	ble.n	8014132 <prints+0x5e>
	{
		register int count = 0;
 80140fa:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80140fc:	683d      	ldr	r5, [r7, #0]
 80140fe:	e001      	b.n	8014104 <prints+0x30>
		{
			++count;
 8014100:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8014102:	3501      	adds	r5, #1
 8014104:	782b      	ldrb	r3, [r5, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1fa      	bne.n	8014100 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	695b      	ldr	r3, [r3, #20]
 801410e:	42a3      	cmp	r3, r4
 8014110:	dc03      	bgt.n	801411a <prints+0x46>
		{
			apBuf->flags.width = 0;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2200      	movs	r2, #0
 8014116:	615a      	str	r2, [r3, #20]
 8014118:	e004      	b.n	8014124 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	695b      	ldr	r3, [r3, #20]
 801411e:	1b1a      	subs	r2, r3, r4
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	7f1b      	ldrb	r3, [r3, #28]
 8014128:	f003 0302 	and.w	r3, r3, #2
 801412c:	2b00      	cmp	r3, #0
 801412e:	d000      	beq.n	8014132 <prints+0x5e>
		{
			padchar = '0';
 8014130:	2630      	movs	r6, #48	; 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	7f1b      	ldrb	r3, [r3, #28]
 8014136:	f003 0301 	and.w	r3, r3, #1
 801413a:	2b00      	cmp	r3, #0
 801413c:	d112      	bne.n	8014164 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 801413e:	e00d      	b.n	801415c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8014140:	4631      	mov	r1, r6
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff ff40 	bl	8013fc8 <strbuf_printchar>
 8014148:	4603      	mov	r3, r0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <prints+0x7e>
			{
				return pdFALSE;
 801414e:	2300      	movs	r3, #0
 8014150:	e062      	b.n	8014218 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	695b      	ldr	r3, [r3, #20]
 8014156:	1e5a      	subs	r2, r3, #1
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	615a      	str	r2, [r3, #20]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	695b      	ldr	r3, [r3, #20]
 8014160:	2b00      	cmp	r3, #0
 8014162:	dced      	bgt.n	8014140 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7f9b      	ldrb	r3, [r3, #30]
 8014168:	f003 0302 	and.w	r3, r3, #2
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b00      	cmp	r3, #0
 8014170:	d036      	beq.n	80141e0 <prints+0x10c>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	7f1b      	ldrb	r3, [r3, #28]
 8014176:	2b01      	cmp	r3, #1
 8014178:	d132      	bne.n	80141e0 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 801417a:	6838      	ldr	r0, [r7, #0]
 801417c:	f7ec f852 	bl	8000224 <strlen>
 8014180:	4603      	mov	r3, r0
 8014182:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	699a      	ldr	r2, [r3, #24]
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	429a      	cmp	r2, r3
 801418c:	dd28      	ble.n	80141e0 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	699a      	ldr	r2, [r3, #24]
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8014198:	e00b      	b.n	80141b2 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 801419a:	2130      	movs	r1, #48	; 0x30
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff ff13 	bl	8013fc8 <strbuf_printchar>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d101      	bne.n	80141ac <prints+0xd8>
				{
					return pdFALSE;
 80141a8:	2300      	movs	r3, #0
 80141aa:	e035      	b.n	8014218 <prints+0x144>
			for( ; i; i-- )
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	3b01      	subs	r3, #1
 80141b0:	60fb      	str	r3, [r7, #12]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d1f0      	bne.n	801419a <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80141b8:	e012      	b.n	80141e0 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	4619      	mov	r1, r3
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f7ff ff01 	bl	8013fc8 <strbuf_printchar>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d101      	bne.n	80141d0 <prints+0xfc>
		{
			return pdFALSE;
 80141cc:	2300      	movs	r3, #0
 80141ce:	e023      	b.n	8014218 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	3301      	adds	r3, #1
 80141d4:	603b      	str	r3, [r7, #0]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	699b      	ldr	r3, [r3, #24]
 80141da:	1e5a      	subs	r2, r3, #1
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	619a      	str	r2, [r3, #24]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	699b      	ldr	r3, [r3, #24]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d012      	beq.n	801420e <prints+0x13a>
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d1e4      	bne.n	80141ba <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80141f0:	e00d      	b.n	801420e <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80141f2:	4631      	mov	r1, r6
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7ff fee7 	bl	8013fc8 <strbuf_printchar>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d101      	bne.n	8014204 <prints+0x130>
		{
			return pdFALSE;
 8014200:	2300      	movs	r3, #0
 8014202:	e009      	b.n	8014218 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	695b      	ldr	r3, [r3, #20]
 8014208:	1e5a      	subs	r2, r3, #1
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	615a      	str	r2, [r3, #20]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	2b00      	cmp	r3, #0
 8014214:	dced      	bgt.n	80141f2 <prints+0x11e>
		}
	}

	return pdTRUE;
 8014216:	2301      	movs	r3, #1
}
 8014218:	4618      	mov	r0, r3
 801421a:	3714      	adds	r7, #20
 801421c:	46bd      	mov	sp, r7
 801421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014220:	0802c384 	.word	0x0802c384

08014224 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8014224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014228:	b087      	sub	sp, #28
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8014230:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8014234:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	7f93      	ldrb	r3, [r2, #30]
 8014240:	f043 0302 	orr.w	r3, r3, #2
 8014244:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d10b      	bne.n	8014264 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 801424c:	2330      	movs	r3, #48	; 0x30
 801424e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8014250:	2300      	movs	r3, #0
 8014252:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8014254:	f107 030c 	add.w	r3, r7, #12
 8014258:	4619      	mov	r1, r3
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7ff ff3a 	bl	80140d4 <prints>
 8014260:	4603      	mov	r3, r0
 8014262:	e065      	b.n	8014330 <printi+0x10c>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	7f9b      	ldrb	r3, [r3, #30]
 8014268:	f003 0301 	and.w	r3, r3, #1
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d009      	beq.n	8014286 <printi+0x62>
 8014272:	2e0a      	cmp	r6, #10
 8014274:	d107      	bne.n	8014286 <printi+0x62>
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	da04      	bge.n	8014286 <printi+0x62>
	{
		neg = 1;
 801427c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	425b      	negs	r3, r3
 8014284:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8014286:	f107 040c 	add.w	r4, r7, #12
 801428a:	340b      	adds	r4, #11

	*s = '\0';
 801428c:	2300      	movs	r3, #0
 801428e:	7023      	strb	r3, [r4, #0]
	switch( base )
 8014290:	2e0a      	cmp	r6, #10
 8014292:	d026      	beq.n	80142e2 <printi+0xbe>
 8014294:	2e10      	cmp	r6, #16
 8014296:	d013      	beq.n	80142c0 <printi+0x9c>
 8014298:	2e08      	cmp	r6, #8
 801429a:	d022      	beq.n	80142e2 <printi+0xbe>
 801429c:	e024      	b.n	80142e8 <printi+0xc4>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 801429e:	462b      	mov	r3, r5
 80142a0:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 80142a4:	f1b8 0f09 	cmp.w	r8, #9
 80142a8:	dd03      	ble.n	80142b2 <printi+0x8e>
			{
				t += apBuf->flags.letBase - '0' - 10;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	7f5b      	ldrb	r3, [r3, #29]
 80142ae:	3b3a      	subs	r3, #58	; 0x3a
 80142b0:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 80142b2:	3c01      	subs	r4, #1
 80142b4:	fa5f f388 	uxtb.w	r3, r8
 80142b8:	3330      	adds	r3, #48	; 0x30
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 80142be:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 80142c0:	2d00      	cmp	r5, #0
 80142c2:	d1ec      	bne.n	801429e <printi+0x7a>
		}
		break;
 80142c4:	e010      	b.n	80142e8 <printi+0xc4>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 80142c6:	fbb5 f3f6 	udiv	r3, r5, r6
 80142ca:	fb06 f303 	mul.w	r3, r6, r3
 80142ce:	1aeb      	subs	r3, r5, r3
 80142d0:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80142d2:	3c01      	subs	r4, #1
 80142d4:	fa5f f388 	uxtb.w	r3, r8
 80142d8:	3330      	adds	r3, #48	; 0x30
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	7023      	strb	r3, [r4, #0]
			u /= base;
 80142de:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80142e2:	2d00      	cmp	r5, #0
 80142e4:	d1ef      	bne.n	80142c6 <printi+0xa2>
		}
		break;
 80142e6:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80142e8:	f1b9 0f00 	cmp.w	r9, #0
 80142ec:	d01b      	beq.n	8014326 <printi+0x102>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	695b      	ldr	r3, [r3, #20]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d014      	beq.n	8014320 <printi+0xfc>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	7f1b      	ldrb	r3, [r3, #28]
 80142fa:	f003 0302 	and.w	r3, r3, #2
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d00e      	beq.n	8014320 <printi+0xfc>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8014302:	212d      	movs	r1, #45	; 0x2d
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f7ff fe5f 	bl	8013fc8 <strbuf_printchar>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <printi+0xf0>
			{
				return pdFALSE;
 8014310:	2300      	movs	r3, #0
 8014312:	e00d      	b.n	8014330 <printi+0x10c>
			}
			--apBuf->flags.width;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	695b      	ldr	r3, [r3, #20]
 8014318:	1e5a      	subs	r2, r3, #1
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	615a      	str	r2, [r3, #20]
 801431e:	e002      	b.n	8014326 <printi+0x102>
		}
		else
		{
			*( --s ) = '-';
 8014320:	3c01      	subs	r4, #1
 8014322:	232d      	movs	r3, #45	; 0x2d
 8014324:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8014326:	4621      	mov	r1, r4
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff fed3 	bl	80140d4 <prints>
 801432e:	4603      	mov	r3, r0
}
 8014330:	4618      	mov	r0, r3
 8014332:	371c      	adds	r7, #28
 8014334:	46bd      	mov	sp, r7
 8014336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801433c <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 801433c:	b590      	push	{r4, r7, lr}
 801433e:	b089      	sub	sp, #36	; 0x24
 8014340:	af02      	add	r7, sp, #8
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 801434e:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8014354:	b2db      	uxtb	r3, r3
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	b2d2      	uxtb	r2, r2
 801435a:	f107 0008 	add.w	r0, r7, #8
 801435e:	9201      	str	r2, [sp, #4]
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	4623      	mov	r3, r4
 8014364:	460a      	mov	r2, r1
 8014366:	4909      	ldr	r1, [pc, #36]	; (801438c <printIp+0x50>)
 8014368:	f000 fa63 	bl	8014832 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	7f93      	ldrb	r3, [r2, #30]
 8014370:	f043 0302 	orr.w	r3, r3, #2
 8014374:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8014376:	f107 0308 	add.w	r3, r7, #8
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7ff fea9 	bl	80140d4 <prints>

	return pdTRUE;
 8014382:	2301      	movs	r3, #1
}
 8014384:	4618      	mov	r0, r3
 8014386:	371c      	adds	r7, #28
 8014388:	46bd      	mov	sp, r7
 801438a:	bd90      	pop	{r4, r7, pc}
 801438c:	0802c38c 	.word	0x0802c38c

08014390 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	4603      	mov	r3, r0
 8014398:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 801439a:	4b0b      	ldr	r3, [pc, #44]	; (80143c8 <usNetToHost+0x38>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4a0b      	ldr	r2, [pc, #44]	; (80143cc <usNetToHost+0x3c>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d101      	bne.n	80143a8 <usNetToHost+0x18>
	{
		return usValue;
 80143a4:	88fb      	ldrh	r3, [r7, #6]
 80143a6:	e009      	b.n	80143bc <usNetToHost+0x2c>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 80143a8:	88fb      	ldrh	r3, [r7, #6]
 80143aa:	021b      	lsls	r3, r3, #8
 80143ac:	b21a      	sxth	r2, r3
 80143ae:	88fb      	ldrh	r3, [r7, #6]
 80143b0:	0a1b      	lsrs	r3, r3, #8
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	b21b      	sxth	r3, r3
 80143b6:	4313      	orrs	r3, r2
 80143b8:	b21b      	sxth	r3, r3
 80143ba:	b29b      	uxth	r3, r3
	}
}
 80143bc:	4618      	mov	r0, r3
 80143be:	370c      	adds	r7, #12
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr
 80143c8:	0802f024 	.word	0x0802f024
 80143cc:	00010203 	.word	0x00010203

080143d0 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b088      	sub	sp, #32
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 80143da:	f04f 33ff 	mov.w	r3, #4294967295
 80143de:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80143e0:	2300      	movs	r3, #0
 80143e2:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80143e4:	2300      	movs	r3, #0
 80143e6:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80143e8:	2300      	movs	r3, #0
 80143ea:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80143ec:	2300      	movs	r3, #0
 80143ee:	61fb      	str	r3, [r7, #28]
 80143f0:	e023      	b.n	801443a <printIPv6+0x6a>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	005b      	lsls	r3, r3, #1
 80143f6:	683a      	ldr	r2, [r7, #0]
 80143f8:	4413      	add	r3, r2
 80143fa:	881b      	ldrh	r3, [r3, #0]
 80143fc:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80143fe:	897b      	ldrh	r3, [r7, #10]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d107      	bne.n	8014414 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d101      	bne.n	801440e <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	3301      	adds	r3, #1
 8014412:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8014414:	897b      	ldrh	r3, [r7, #10]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d102      	bne.n	8014420 <printIPv6+0x50>
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	2b07      	cmp	r3, #7
 801441e:	d109      	bne.n	8014434 <printIPv6+0x64>
		{
			if( iZeroLength < iCurLength )
 8014420:	697a      	ldr	r2, [r7, #20]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	429a      	cmp	r2, r3
 8014426:	da03      	bge.n	8014430 <printIPv6+0x60>
			{
				iZeroLength = iCurLength;
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 8014430:	2300      	movs	r3, #0
 8014432:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	3301      	adds	r3, #1
 8014438:	61fb      	str	r3, [r7, #28]
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	2b07      	cmp	r3, #7
 801443e:	ddd8      	ble.n	80143f2 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2210      	movs	r2, #16
 8014444:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2261      	movs	r2, #97	; 0x61
 801444a:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 801444c:	2300      	movs	r3, #0
 801444e:	61fb      	str	r3, [r7, #28]
 8014450:	e02b      	b.n	80144aa <printIPv6+0xda>
	{
		if( iIndex == iZeroStart )
 8014452:	69fa      	ldr	r2, [r7, #28]
 8014454:	69bb      	ldr	r3, [r7, #24]
 8014456:	429a      	cmp	r2, r3
 8014458:	d110      	bne.n	801447c <printIPv6+0xac>
		{
			iIndex += iZeroLength - 1;
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	3b01      	subs	r3, #1
 801445e:	69fa      	ldr	r2, [r7, #28]
 8014460:	4413      	add	r3, r2
 8014462:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 8014464:	213a      	movs	r1, #58	; 0x3a
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7ff fdae 	bl	8013fc8 <strbuf_printchar>
			if( iIndex == 7 )
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	2b07      	cmp	r3, #7
 8014470:	d118      	bne.n	80144a4 <printIPv6+0xd4>
			{
				strbuf_printchar( apBuf, ':' );
 8014472:	213a      	movs	r1, #58	; 0x3a
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7ff fda7 	bl	8013fc8 <strbuf_printchar>
 801447a:	e013      	b.n	80144a4 <printIPv6+0xd4>
			}
		}
		else
		{
			if( iIndex > 0 )
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	2b00      	cmp	r3, #0
 8014480:	dd03      	ble.n	801448a <printIPv6+0xba>
			{
				strbuf_printchar( apBuf, ':' );
 8014482:	213a      	movs	r1, #58	; 0x3a
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7ff fd9f 	bl	8013fc8 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	683a      	ldr	r2, [r7, #0]
 8014490:	4413      	add	r3, r2
 8014492:	881b      	ldrh	r3, [r3, #0]
 8014494:	4618      	mov	r0, r3
 8014496:	f7ff ff7b 	bl	8014390 <usNetToHost>
 801449a:	4603      	mov	r3, r0
 801449c:	4619      	mov	r1, r3
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f7ff fec0 	bl	8014224 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	3301      	adds	r3, #1
 80144a8:	61fb      	str	r3, [r7, #28]
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	2b07      	cmp	r3, #7
 80144ae:	ddd0      	ble.n	8014452 <printIPv6+0x82>
		}
	}

	return pdTRUE;
 80144b0:	2301      	movs	r3, #1
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3720      	adds	r7, #32
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
	...

080144bc <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 80144bc:	b590      	push	{r4, r7, lr}
 80144be:	b087      	sub	sp, #28
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	60ba      	str	r2, [r7, #8]
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2b25      	cmp	r3, #37	; 0x25
 80144d6:	d00f      	beq.n	80144f8 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80144d8:	6979      	ldr	r1, [r7, #20]
 80144da:	68f8      	ldr	r0, [r7, #12]
 80144dc:	f7ff fdb2 	bl	8014044 <strbuf_printchar_inline>
 80144e0:	4603      	mov	r3, r0
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	f000 817e 	beq.w	80147e4 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	1c5a      	adds	r2, r3, #1
 80144ec:	60ba      	str	r2, [r7, #8]
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	2b25      	cmp	r3, #37	; 0x25
 80144f6:	d1ef      	bne.n	80144d8 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	1c5a      	adds	r2, r3, #1
 80144fc:	60ba      	str	r2, [r7, #8]
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	2b00      	cmp	r3, #0
 8014506:	f000 8165 	beq.w	80147d4 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	2b25      	cmp	r3, #37	; 0x25
 801450e:	d108      	bne.n	8014522 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8014510:	6979      	ldr	r1, [r7, #20]
 8014512:	68f8      	ldr	r0, [r7, #12]
 8014514:	f7ff fd58 	bl	8013fc8 <strbuf_printchar>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	f040 814e 	bne.w	80147bc <tiny_print+0x300>
			{
				return;
 8014520:	e161      	b.n	80147e6 <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	3310      	adds	r3, #16
 8014526:	2210      	movs	r2, #16
 8014528:	2100      	movs	r1, #0
 801452a:	4618      	mov	r0, r3
 801452c:	f016 f95f 	bl	802a7ee <memset>

		if( ch == '-' )
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	2b2d      	cmp	r3, #45	; 0x2d
 8014534:	d114      	bne.n	8014560 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	60ba      	str	r2, [r7, #8]
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2201      	movs	r2, #1
 8014544:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 8014546:	e00b      	b.n	8014560 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	1c5a      	adds	r2, r3, #1
 801454c:	60ba      	str	r2, [r7, #8]
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	7f1b      	ldrb	r3, [r3, #28]
 8014556:	f043 0302 	orr.w	r3, r3, #2
 801455a:	b2da      	uxtb	r2, r3
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	2b30      	cmp	r3, #48	; 0x30
 8014564:	d0f0      	beq.n	8014548 <tiny_print+0x8c>
		}
		if( ch == '*' )
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	2b2a      	cmp	r3, #42	; 0x2a
 801456a:	d120      	bne.n	80145ae <tiny_print+0xf2>
		{
			ch = *( format++ );
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	1c5a      	adds	r2, r3, #1
 8014570:	60ba      	str	r2, [r7, #8]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	1d1a      	adds	r2, r3, #4
 801457a:	607a      	str	r2, [r7, #4]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	615a      	str	r2, [r3, #20]
 8014582:	e01a      	b.n	80145ba <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	695a      	ldr	r2, [r3, #20]
 8014588:	4613      	mov	r3, r2
 801458a:	009b      	lsls	r3, r3, #2
 801458c:	4413      	add	r3, r2
 801458e:	005b      	lsls	r3, r3, #1
 8014590:	461a      	mov	r2, r3
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	695a      	ldr	r2, [r3, #20]
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	3b30      	subs	r3, #48	; 0x30
 801459e:	441a      	add	r2, r3
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	1c5a      	adds	r2, r3, #1
 80145a8:	60ba      	str	r2, [r7, #8]
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2b2f      	cmp	r3, #47	; 0x2f
 80145b2:	dd02      	ble.n	80145ba <tiny_print+0xfe>
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	2b39      	cmp	r3, #57	; 0x39
 80145b8:	dde4      	ble.n	8014584 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b2e      	cmp	r3, #46	; 0x2e
 80145be:	d12e      	bne.n	801461e <tiny_print+0x162>
		{
			ch = *( format++ );
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	1c5a      	adds	r2, r3, #1
 80145c4:	60ba      	str	r2, [r7, #8]
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	2b2a      	cmp	r3, #42	; 0x2a
 80145ce:	d120      	bne.n	8014612 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	1d1a      	adds	r2, r3, #4
 80145d4:	607a      	str	r2, [r7, #4]
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	1c5a      	adds	r2, r3, #1
 80145e0:	60ba      	str	r2, [r7, #8]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	617b      	str	r3, [r7, #20]
 80145e6:	e01a      	b.n	801461e <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	699a      	ldr	r2, [r3, #24]
 80145ec:	4613      	mov	r3, r2
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	4413      	add	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	461a      	mov	r2, r3
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	699a      	ldr	r2, [r3, #24]
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	3b30      	subs	r3, #48	; 0x30
 8014602:	441a      	add	r2, r3
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	1c5a      	adds	r2, r3, #1
 801460c:	60ba      	str	r2, [r7, #8]
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	2b2f      	cmp	r3, #47	; 0x2f
 8014616:	dd02      	ble.n	801461e <tiny_print+0x162>
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	2b39      	cmp	r3, #57	; 0x39
 801461c:	dde4      	ble.n	80145e8 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	699b      	ldr	r3, [r3, #24]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d104      	bne.n	8014630 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	699b      	ldr	r3, [r3, #24]
 801462a:	1e5a      	subs	r2, r3, #1
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	2b70      	cmp	r3, #112	; 0x70
 8014634:	d118      	bne.n	8014668 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b69      	cmp	r3, #105	; 0x69
 801463c:	d114      	bne.n	8014668 <tiny_print+0x1ac>
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	3301      	adds	r3, #1
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	2b70      	cmp	r3, #112	; 0x70
 8014646:	d10f      	bne.n	8014668 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	3302      	adds	r3, #2
 801464c:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	1d1a      	adds	r2, r3, #4
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	4619      	mov	r1, r3
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7ff feb9 	bl	80143d0 <printIPv6>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	f040 80ad 	bne.w	80147c0 <tiny_print+0x304>
				{
					break;
 8014666:	e0b8      	b.n	80147da <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	2b73      	cmp	r3, #115	; 0x73
 801466c:	d112      	bne.n	8014694 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	1d1a      	adds	r2, r3, #4
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8014678:	2c00      	cmp	r4, #0
 801467a:	d001      	beq.n	8014680 <tiny_print+0x1c4>
 801467c:	4623      	mov	r3, r4
 801467e:	e000      	b.n	8014682 <tiny_print+0x1c6>
 8014680:	4b5a      	ldr	r3, [pc, #360]	; (80147ec <tiny_print+0x330>)
 8014682:	4619      	mov	r1, r3
 8014684:	68f8      	ldr	r0, [r7, #12]
 8014686:	f7ff fd25 	bl	80140d4 <prints>
 801468a:	4603      	mov	r3, r0
 801468c:	2b00      	cmp	r3, #0
 801468e:	f040 8099 	bne.w	80147c4 <tiny_print+0x308>
			{
				break;
 8014692:	e0a2      	b.n	80147da <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	2b63      	cmp	r3, #99	; 0x63
 8014698:	d10f      	bne.n	80146ba <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	1d1a      	adds	r2, r3, #4
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 80146a6:	7c3b      	ldrb	r3, [r7, #16]
 80146a8:	4619      	mov	r1, r3
 80146aa:	68f8      	ldr	r0, [r7, #12]
 80146ac:	f7ff fc8c 	bl	8013fc8 <strbuf_printchar>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f040 8088 	bne.w	80147c8 <tiny_print+0x30c>
			{
				return;
 80146b8:	e095      	b.n	80147e6 <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	2b6c      	cmp	r3, #108	; 0x6c
 80146be:	d109      	bne.n	80146d4 <tiny_print+0x218>
		{
			ch = *( format++ );
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	1c5a      	adds	r2, r3, #1
 80146c4:	60ba      	str	r2, [r7, #8]
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	7f93      	ldrb	r3, [r2, #30]
 80146ce:	f043 0304 	orr.w	r3, r3, #4
 80146d2:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	2b4c      	cmp	r3, #76	; 0x4c
 80146d8:	d109      	bne.n	80146ee <tiny_print+0x232>
		{
			ch = *( format++ );
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	60ba      	str	r2, [r7, #8]
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80146e4:	68fa      	ldr	r2, [r7, #12]
 80146e6:	7f93      	ldrb	r3, [r2, #30]
 80146e8:	f043 0308 	orr.w	r3, r3, #8
 80146ec:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	220a      	movs	r2, #10
 80146f2:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2261      	movs	r2, #97	; 0x61
 80146f8:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2b64      	cmp	r3, #100	; 0x64
 80146fe:	d002      	beq.n	8014706 <tiny_print+0x24a>
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	2b75      	cmp	r3, #117	; 0x75
 8014704:	d116      	bne.n	8014734 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	2b64      	cmp	r3, #100	; 0x64
 801470a:	bf0c      	ite	eq
 801470c:	2301      	moveq	r3, #1
 801470e:	2300      	movne	r3, #0
 8014710:	b2d9      	uxtb	r1, r3
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	7f93      	ldrb	r3, [r2, #30]
 8014716:	f361 0300 	bfi	r3, r1, #0, #1
 801471a:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	1d1a      	adds	r2, r3, #4
 8014720:	607a      	str	r2, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4619      	mov	r1, r3
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f7ff fd7c 	bl	8014224 <printi>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d14c      	bne.n	80147cc <tiny_print+0x310>
			{
				break;
 8014732:	e052      	b.n	80147da <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	2210      	movs	r2, #16
 8014738:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	2b78      	cmp	r3, #120	; 0x78
 801473e:	d117      	bne.n	8014770 <tiny_print+0x2b4>
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	2b69      	cmp	r3, #105	; 0x69
 8014746:	d113      	bne.n	8014770 <tiny_print+0x2b4>
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	3301      	adds	r3, #1
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	2b70      	cmp	r3, #112	; 0x70
 8014750:	d10e      	bne.n	8014770 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	3302      	adds	r3, #2
 8014756:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	1d1a      	adds	r2, r3, #4
 801475c:	607a      	str	r2, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4619      	mov	r1, r3
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7ff fdea 	bl	801433c <printIp>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d130      	bne.n	80147d0 <tiny_print+0x314>
			{
				break;
 801476e:	e034      	b.n	80147da <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	2b78      	cmp	r3, #120	; 0x78
 8014774:	d009      	beq.n	801478a <tiny_print+0x2ce>
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	2b58      	cmp	r3, #88	; 0x58
 801477a:	d006      	beq.n	801478a <tiny_print+0x2ce>
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	2b70      	cmp	r3, #112	; 0x70
 8014780:	d003      	beq.n	801478a <tiny_print+0x2ce>
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	2b6f      	cmp	r3, #111	; 0x6f
 8014786:	f47f ae9f 	bne.w	80144c8 <tiny_print+0xc>
		{
			if( ch == 'X' )
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	2b58      	cmp	r3, #88	; 0x58
 801478e:	d103      	bne.n	8014798 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2241      	movs	r2, #65	; 0x41
 8014794:	775a      	strb	r2, [r3, #29]
 8014796:	e005      	b.n	80147a4 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	2b6f      	cmp	r3, #111	; 0x6f
 801479c:	d102      	bne.n	80147a4 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2208      	movs	r2, #8
 80147a2:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	1d1a      	adds	r2, r3, #4
 80147a8:	607a      	str	r2, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	4619      	mov	r1, r3
 80147ae:	68f8      	ldr	r0, [r7, #12]
 80147b0:	f7ff fd38 	bl	8014224 <printi>
 80147b4:	4603      	mov	r3, r0
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d00e      	beq.n	80147d8 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 80147ba:	e00a      	b.n	80147d2 <tiny_print+0x316>
			continue;
 80147bc:	bf00      	nop
 80147be:	e683      	b.n	80144c8 <tiny_print+0xc>
				continue;
 80147c0:	bf00      	nop
 80147c2:	e681      	b.n	80144c8 <tiny_print+0xc>
			continue;
 80147c4:	bf00      	nop
 80147c6:	e67f      	b.n	80144c8 <tiny_print+0xc>
			continue;
 80147c8:	bf00      	nop
 80147ca:	e67d      	b.n	80144c8 <tiny_print+0xc>
			continue;
 80147cc:	bf00      	nop
 80147ce:	e67b      	b.n	80144c8 <tiny_print+0xc>
			continue;
 80147d0:	bf00      	nop
	{
 80147d2:	e679      	b.n	80144c8 <tiny_print+0xc>
			break;
 80147d4:	bf00      	nop
 80147d6:	e000      	b.n	80147da <tiny_print+0x31e>
				break;
 80147d8:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80147da:	2100      	movs	r1, #0
 80147dc:	68f8      	ldr	r0, [r7, #12]
 80147de:	f7ff fbf3 	bl	8013fc8 <strbuf_printchar>
 80147e2:	e000      	b.n	80147e6 <tiny_print+0x32a>
					return;
 80147e4:	bf00      	nop
}
 80147e6:	371c      	adds	r7, #28
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd90      	pop	{r4, r7, pc}
 80147ec:	0802c398 	.word	0x0802c398

080147f0 <snprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80147f0:	b40c      	push	{r2, r3}
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b08c      	sub	sp, #48	; 0x30
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6078      	str	r0, [r7, #4]
 80147fa:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80147fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014800:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	441a      	add	r2, r3
 8014808:	f107 030c 	add.w	r3, r7, #12
 801480c:	6879      	ldr	r1, [r7, #4]
 801480e:	4618      	mov	r0, r3
 8014810:	f7ff fbbc 	bl	8013f8c <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8014814:	f107 030c 	add.w	r3, r7, #12
 8014818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801481a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801481c:	4618      	mov	r0, r3
 801481e:	f7ff fe4d 	bl	80144bc <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8014822:	69bb      	ldr	r3, [r7, #24]
}
 8014824:	4618      	mov	r0, r3
 8014826:	3730      	adds	r7, #48	; 0x30
 8014828:	46bd      	mov	sp, r7
 801482a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801482e:	b002      	add	sp, #8
 8014830:	4770      	bx	lr

08014832 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8014832:	b40e      	push	{r1, r2, r3}
 8014834:	b580      	push	{r7, lr}
 8014836:	b08d      	sub	sp, #52	; 0x34
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 801483c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014840:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8014848:	f107 030c 	add.w	r3, r7, #12
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	f7ff fb9c 	bl	8013f8c <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8014854:	f107 030c 	add.w	r3, r7, #12
 8014858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801485a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff fe2d 	bl	80144bc <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8014862:	69bb      	ldr	r3, [r7, #24]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3734      	adds	r7, #52	; 0x34
 8014868:	46bd      	mov	sp, r7
 801486a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801486e:	b003      	add	sp, #12
 8014870:	4770      	bx	lr
	...

08014874 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	4603      	mov	r3, r0
 801487c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801487e:	4b0b      	ldr	r3, [pc, #44]	; (80148ac <SDRAMDISK_initialize+0x38>)
 8014880:	2201      	movs	r2, #1
 8014882:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 8014884:	f7fd fd3c 	bl	8012300 <BSP_SDRAM_Init>
 8014888:	4603      	mov	r3, r0
 801488a:	2b00      	cmp	r3, #0
 801488c:	d107      	bne.n	801489e <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801488e:	4b07      	ldr	r3, [pc, #28]	; (80148ac <SDRAMDISK_initialize+0x38>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	f023 0301 	bic.w	r3, r3, #1
 8014898:	b2da      	uxtb	r2, r3
 801489a:	4b04      	ldr	r3, [pc, #16]	; (80148ac <SDRAMDISK_initialize+0x38>)
 801489c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801489e:	4b03      	ldr	r3, [pc, #12]	; (80148ac <SDRAMDISK_initialize+0x38>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	b2db      	uxtb	r3, r3
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	200000c0 	.word	0x200000c0

080148b0 <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	4603      	mov	r3, r0
 80148b8:	71fb      	strb	r3, [r7, #7]
  return Stat;
 80148ba:	4b04      	ldr	r3, [pc, #16]	; (80148cc <SDRAMDISK_status+0x1c>)
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	b2db      	uxtb	r3, r3
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	370c      	adds	r7, #12
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr
 80148cc:	200000c0 	.word	0x200000c0

080148d0 <SDRAMDISK_read>:

/* USER CODE BEGIN beforeWriteSection */
/* can be used to modify previous code / undefine following code / add new code */

//TV: Moved to user code because changes
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b088      	sub	sp, #32
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60b9      	str	r1, [r7, #8]
 80148d8:	607a      	str	r2, [r7, #4]
 80148da:	603b      	str	r3, [r7, #0]
 80148dc:	4603      	mov	r3, r0
 80148de:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 80148e0:	f107 0308 	add.w	r3, r7, #8
 80148e4:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	025b      	lsls	r3, r3, #9
 80148ea:	089b      	lsrs	r3, r3, #2
 80148ec:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	4b08      	ldr	r3, [pc, #32]	; (8014914 <SDRAMDISK_read+0x44>)
 80148f2:	4413      	add	r3, r2
 80148f4:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 80148f6:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 80148f8:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 80148fe:	69ba      	ldr	r2, [r7, #24]
 8014900:	4619      	mov	r1, r3
 8014902:	f7fd fd09 	bl	8012318 <BSP_SDRAM_ReadData>
 8014906:	4603      	mov	r3, r0
 8014908:	74fb      	strb	r3, [r7, #19]

	return RES_OK;
 801490a:	7cfb      	ldrb	r3, [r7, #19]
}
 801490c:	4618      	mov	r0, r3
 801490e:	3720      	adds	r7, #32
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	00600800 	.word	0x00600800

08014918 <SDRAMDISK_write>:
/* USER CODE BEGIN beforeIoctlSection */
/* can be used to modify previous code / undefine following code / add new code */

//TV: Moved to user code because changes
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 8014918:	b580      	push	{r7, lr}
 801491a:	b088      	sub	sp, #32
 801491c:	af00      	add	r7, sp, #0
 801491e:	60b9      	str	r1, [r7, #8]
 8014920:	607a      	str	r2, [r7, #4]
 8014922:	603b      	str	r3, [r7, #0]
 8014924:	4603      	mov	r3, r0
 8014926:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 8014928:	f107 0308 	add.w	r3, r7, #8
 801492c:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	025b      	lsls	r3, r3, #9
 8014932:	089b      	lsrs	r3, r3, #2
 8014934:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	4b08      	ldr	r3, [pc, #32]	; (801495c <SDRAMDISK_write+0x44>)
 801493a:	4413      	add	r3, r2
 801493c:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 801493e:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8014940:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8014946:	69ba      	ldr	r2, [r7, #24]
 8014948:	4619      	mov	r1, r3
 801494a:	f7fd fcff 	bl	801234c <BSP_SDRAM_WriteData>
 801494e:	4603      	mov	r3, r0
 8014950:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 8014952:	7cfb      	ldrb	r3, [r7, #19]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3720      	adds	r7, #32
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	00600800 	.word	0x00600800

08014960 <SDRAMDISK_ioctl>:
/* USER CODE BEGIN lastSection */
/* can be used to modify / undefine previous code or add new code */

//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 8014960:	b480      	push	{r7}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	4603      	mov	r3, r0
 8014968:	603a      	str	r2, [r7, #0]
 801496a:	71fb      	strb	r3, [r7, #7]
 801496c:	460b      	mov	r3, r1
 801496e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 8014970:	2301      	movs	r3, #1
 8014972:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 8014974:	4b1b      	ldr	r3, [pc, #108]	; (80149e4 <SDRAMDISK_ioctl+0x84>)
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	b2db      	uxtb	r3, r3
 801497a:	f003 0301 	and.w	r3, r3, #1
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 8014982:	2303      	movs	r3, #3
 8014984:	e027      	b.n	80149d6 <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 8014986:	79bb      	ldrb	r3, [r7, #6]
 8014988:	2b03      	cmp	r3, #3
 801498a:	d821      	bhi.n	80149d0 <SDRAMDISK_ioctl+0x70>
 801498c:	a201      	add	r2, pc, #4	; (adr r2, 8014994 <SDRAMDISK_ioctl+0x34>)
 801498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014992:	bf00      	nop
 8014994:	080149a5 	.word	0x080149a5
 8014998:	080149ab 	.word	0x080149ab
 801499c:	080149b7 	.word	0x080149b7
 80149a0:	080149c5 	.word	0x080149c5
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 80149a4:	2300      	movs	r3, #0
 80149a6:	73fb      	strb	r3, [r7, #15]
		break;
 80149a8:	e014      	b.n	80149d4 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	4a0e      	ldr	r2, [pc, #56]	; (80149e8 <SDRAMDISK_ioctl+0x88>)
 80149ae:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80149b0:	2300      	movs	r3, #0
 80149b2:	73fb      	strb	r3, [r7, #15]
		break;
 80149b4:	e00e      	b.n	80149d4 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149bc:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 80149be:	2300      	movs	r3, #0
 80149c0:	73fb      	strb	r3, [r7, #15]
		break;
 80149c2:	e007      	b.n	80149d4 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	2201      	movs	r2, #1
 80149c8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80149ca:	2300      	movs	r3, #0
 80149cc:	73fb      	strb	r3, [r7, #15]
		break;
 80149ce:	e001      	b.n	80149d4 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 80149d0:	2304      	movs	r3, #4
 80149d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80149d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	200000c0 	.word	0x200000c0
 80149e8:	007ff800 	.word	0x007ff800

080149ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80149f0:	2003      	movs	r0, #3
 80149f2:	f7ed fc65 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80149f6:	2200      	movs	r2, #0
 80149f8:	2100      	movs	r1, #0
 80149fa:	f06f 000b 	mvn.w	r0, #11
 80149fe:	f7ed fc6a 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8014a02:	2200      	movs	r2, #0
 8014a04:	2100      	movs	r1, #0
 8014a06:	f06f 000a 	mvn.w	r0, #10
 8014a0a:	f7ed fc64 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8014a0e:	2200      	movs	r2, #0
 8014a10:	2100      	movs	r1, #0
 8014a12:	f06f 0009 	mvn.w	r0, #9
 8014a16:	f7ed fc5e 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	2100      	movs	r1, #0
 8014a1e:	f06f 0004 	mvn.w	r0, #4
 8014a22:	f7ed fc58 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8014a26:	2200      	movs	r2, #0
 8014a28:	2100      	movs	r1, #0
 8014a2a:	f06f 0003 	mvn.w	r0, #3
 8014a2e:	f7ed fc52 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014a32:	2200      	movs	r2, #0
 8014a34:	210f      	movs	r1, #15
 8014a36:	f06f 0001 	mvn.w	r0, #1
 8014a3a:	f7ed fc4c 	bl	80022d6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8014a3e:	2200      	movs	r2, #0
 8014a40:	210f      	movs	r1, #15
 8014a42:	f04f 30ff 	mov.w	r0, #4294967295
 8014a46:	f7ed fc46 	bl	80022d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014a4a:	bf00      	nop
 8014a4c:	bd80      	pop	{r7, pc}
	...

08014a50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b088      	sub	sp, #32
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4a15      	ldr	r2, [pc, #84]	; (8014ab4 <HAL_ADC_MspInit+0x64>)
 8014a5e:	4293      	cmp	r3, r2
 8014a60:	d124      	bne.n	8014aac <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8014a62:	4a15      	ldr	r2, [pc, #84]	; (8014ab8 <HAL_ADC_MspInit+0x68>)
 8014a64:	4b14      	ldr	r3, [pc, #80]	; (8014ab8 <HAL_ADC_MspInit+0x68>)
 8014a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8014a6e:	4b12      	ldr	r3, [pc, #72]	; (8014ab8 <HAL_ADC_MspInit+0x68>)
 8014a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014a76:	60bb      	str	r3, [r7, #8]
 8014a78:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8014a7a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8014a7e:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014a80:	2303      	movs	r3, #3
 8014a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a84:	2300      	movs	r3, #0
 8014a86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014a88:	f107 030c 	add.w	r3, r7, #12
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	480b      	ldr	r0, [pc, #44]	; (8014abc <HAL_ADC_MspInit+0x6c>)
 8014a90:	f7ed ffea 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8014a94:	2301      	movs	r3, #1
 8014a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8014aa0:	f107 030c 	add.w	r3, r7, #12
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	4806      	ldr	r0, [pc, #24]	; (8014ac0 <HAL_ADC_MspInit+0x70>)
 8014aa8:	f7ed ffde 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8014aac:	bf00      	nop
 8014aae:	3720      	adds	r7, #32
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	40012200 	.word	0x40012200
 8014ab8:	40023800 	.word	0x40023800
 8014abc:	40021400 	.word	0x40021400
 8014ac0:	40020000 	.word	0x40020000

08014ac4 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a0a      	ldr	r2, [pc, #40]	; (8014afc <HAL_CRC_MspInit+0x38>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d10b      	bne.n	8014aee <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8014ad6:	4a0a      	ldr	r2, [pc, #40]	; (8014b00 <HAL_CRC_MspInit+0x3c>)
 8014ad8:	4b09      	ldr	r3, [pc, #36]	; (8014b00 <HAL_CRC_MspInit+0x3c>)
 8014ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8014ae2:	4b07      	ldr	r3, [pc, #28]	; (8014b00 <HAL_CRC_MspInit+0x3c>)
 8014ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014aea:	60fb      	str	r3, [r7, #12]
 8014aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8014aee:	bf00      	nop
 8014af0:	3714      	adds	r7, #20
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	40023000 	.word	0x40023000
 8014b00:	40023800 	.word	0x40023800

08014b04 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b088      	sub	sp, #32
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4a11      	ldr	r2, [pc, #68]	; (8014b58 <HAL_TIM_Base_MspInit+0x54>)
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d11c      	bne.n	8014b50 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014b16:	4a11      	ldr	r2, [pc, #68]	; (8014b5c <HAL_TIM_Base_MspInit+0x58>)
 8014b18:	4b10      	ldr	r3, [pc, #64]	; (8014b5c <HAL_TIM_Base_MspInit+0x58>)
 8014b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b1c:	f043 0301 	orr.w	r3, r3, #1
 8014b20:	6453      	str	r3, [r2, #68]	; 0x44
 8014b22:	4b0e      	ldr	r3, [pc, #56]	; (8014b5c <HAL_TIM_Base_MspInit+0x58>)
 8014b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	60bb      	str	r3, [r7, #8]
 8014b2c:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8014b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014b32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b34:	2302      	movs	r3, #2
 8014b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014b40:	2301      	movs	r3, #1
 8014b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 8014b44:	f107 030c 	add.w	r3, r7, #12
 8014b48:	4619      	mov	r1, r3
 8014b4a:	4805      	ldr	r0, [pc, #20]	; (8014b60 <HAL_TIM_Base_MspInit+0x5c>)
 8014b4c:	f7ed ff8c 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8014b50:	bf00      	nop
 8014b52:	3720      	adds	r7, #32
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	40010000 	.word	0x40010000
 8014b5c:	40023800 	.word	0x40023800
 8014b60:	40020000 	.word	0x40020000

08014b64 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b088      	sub	sp, #32
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	4a19      	ldr	r2, [pc, #100]	; (8014bd8 <HAL_UART_MspInit+0x74>)
 8014b72:	4293      	cmp	r3, r2
 8014b74:	d12c      	bne.n	8014bd0 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014b76:	4a19      	ldr	r2, [pc, #100]	; (8014bdc <HAL_UART_MspInit+0x78>)
 8014b78:	4b18      	ldr	r3, [pc, #96]	; (8014bdc <HAL_UART_MspInit+0x78>)
 8014b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b7c:	f043 0310 	orr.w	r3, r3, #16
 8014b80:	6453      	str	r3, [r2, #68]	; 0x44
 8014b82:	4b16      	ldr	r3, [pc, #88]	; (8014bdc <HAL_UART_MspInit+0x78>)
 8014b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b86:	f003 0310 	and.w	r3, r3, #16
 8014b8a:	60bb      	str	r3, [r7, #8]
 8014b8c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8014b8e:	2380      	movs	r3, #128	; 0x80
 8014b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b92:	2302      	movs	r3, #2
 8014b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b96:	2300      	movs	r3, #0
 8014b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014b9e:	2307      	movs	r3, #7
 8014ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8014ba2:	f107 030c 	add.w	r3, r7, #12
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	480d      	ldr	r0, [pc, #52]	; (8014be0 <HAL_UART_MspInit+0x7c>)
 8014baa:	f7ed ff5d 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8014bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bb4:	2302      	movs	r3, #2
 8014bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014bc0:	2307      	movs	r3, #7
 8014bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8014bc4:	f107 030c 	add.w	r3, r7, #12
 8014bc8:	4619      	mov	r1, r3
 8014bca:	4806      	ldr	r0, [pc, #24]	; (8014be4 <HAL_UART_MspInit+0x80>)
 8014bcc:	f7ed ff4c 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8014bd0:	bf00      	nop
 8014bd2:	3720      	adds	r7, #32
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	40011000 	.word	0x40011000
 8014bdc:	40023800 	.word	0x40023800
 8014be0:	40020400 	.word	0x40020400
 8014be4:	40020000 	.word	0x40020000

08014be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b08c      	sub	sp, #48	; 0x30
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	6879      	ldr	r1, [r7, #4]
 8014bfc:	201c      	movs	r0, #28
 8014bfe:	f7ed fb6a 	bl	80022d6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8014c02:	201c      	movs	r0, #28
 8014c04:	f7ed fb83 	bl	800230e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8014c08:	4a20      	ldr	r2, [pc, #128]	; (8014c8c <HAL_InitTick+0xa4>)
 8014c0a:	4b20      	ldr	r3, [pc, #128]	; (8014c8c <HAL_InitTick+0xa4>)
 8014c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c0e:	f043 0301 	orr.w	r3, r3, #1
 8014c12:	6413      	str	r3, [r2, #64]	; 0x40
 8014c14:	4b1d      	ldr	r3, [pc, #116]	; (8014c8c <HAL_InitTick+0xa4>)
 8014c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c18:	f003 0301 	and.w	r3, r3, #1
 8014c1c:	60fb      	str	r3, [r7, #12]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014c20:	f107 0210 	add.w	r2, r7, #16
 8014c24:	f107 0314 	add.w	r3, r7, #20
 8014c28:	4611      	mov	r1, r2
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7f0 fce6 	bl	80055fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8014c30:	f7f0 fcbc 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8014c34:	4603      	mov	r3, r0
 8014c36:	005b      	lsls	r3, r3, #1
 8014c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8014c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c3c:	4a14      	ldr	r2, [pc, #80]	; (8014c90 <HAL_InitTick+0xa8>)
 8014c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8014c42:	0c9b      	lsrs	r3, r3, #18
 8014c44:	3b01      	subs	r3, #1
 8014c46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8014c48:	4b12      	ldr	r3, [pc, #72]	; (8014c94 <HAL_InitTick+0xac>)
 8014c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014c4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8014c50:	4b10      	ldr	r3, [pc, #64]	; (8014c94 <HAL_InitTick+0xac>)
 8014c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8014c56:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8014c58:	4a0e      	ldr	r2, [pc, #56]	; (8014c94 <HAL_InitTick+0xac>)
 8014c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8014c5e:	4b0d      	ldr	r3, [pc, #52]	; (8014c94 <HAL_InitTick+0xac>)
 8014c60:	2200      	movs	r2, #0
 8014c62:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014c64:	4b0b      	ldr	r3, [pc, #44]	; (8014c94 <HAL_InitTick+0xac>)
 8014c66:	2200      	movs	r2, #0
 8014c68:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8014c6a:	480a      	ldr	r0, [pc, #40]	; (8014c94 <HAL_InitTick+0xac>)
 8014c6c:	f7f1 f9e7 	bl	800603e <HAL_TIM_Base_Init>
 8014c70:	4603      	mov	r3, r0
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d104      	bne.n	8014c80 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8014c76:	4807      	ldr	r0, [pc, #28]	; (8014c94 <HAL_InitTick+0xac>)
 8014c78:	f7f1 fa52 	bl	8006120 <HAL_TIM_Base_Start_IT>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	e000      	b.n	8014c82 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8014c80:	2301      	movs	r3, #1
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3730      	adds	r7, #48	; 0x30
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	40023800 	.word	0x40023800
 8014c90:	431bde83 	.word	0x431bde83
 8014c94:	2002c2ec 	.word	0x2002c2ec

08014c98 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8014c9c:	f7f7 f9d5 	bl	800c04a <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014ca0:	bf00      	nop
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014ca8:	4802      	ldr	r0, [pc, #8]	; (8014cb4 <TIM2_IRQHandler+0x10>)
 8014caa:	f7f1 fa54 	bl	8006156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014cae:	bf00      	nop
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	2002c2ec 	.word	0x2002c2ec

08014cb8 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8014cbc:	4802      	ldr	r0, [pc, #8]	; (8014cc8 <OTG_FS_IRQHandler+0x10>)
 8014cbe:	f7ee ff9b 	bl	8003bf8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8014cc2:	bf00      	nop
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	2002c550 	.word	0x2002c550

08014ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014cd0:	4a15      	ldr	r2, [pc, #84]	; (8014d28 <SystemInit+0x5c>)
 8014cd2:	4b15      	ldr	r3, [pc, #84]	; (8014d28 <SystemInit+0x5c>)
 8014cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014ce0:	4a12      	ldr	r2, [pc, #72]	; (8014d2c <SystemInit+0x60>)
 8014ce2:	4b12      	ldr	r3, [pc, #72]	; (8014d2c <SystemInit+0x60>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f043 0301 	orr.w	r3, r3, #1
 8014cea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014cec:	4b0f      	ldr	r3, [pc, #60]	; (8014d2c <SystemInit+0x60>)
 8014cee:	2200      	movs	r2, #0
 8014cf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014cf2:	490e      	ldr	r1, [pc, #56]	; (8014d2c <SystemInit+0x60>)
 8014cf4:	4b0d      	ldr	r3, [pc, #52]	; (8014d2c <SystemInit+0x60>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	4b0d      	ldr	r3, [pc, #52]	; (8014d30 <SystemInit+0x64>)
 8014cfa:	4013      	ands	r3, r2
 8014cfc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014cfe:	4b0b      	ldr	r3, [pc, #44]	; (8014d2c <SystemInit+0x60>)
 8014d00:	4a0c      	ldr	r2, [pc, #48]	; (8014d34 <SystemInit+0x68>)
 8014d02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014d04:	4a09      	ldr	r2, [pc, #36]	; (8014d2c <SystemInit+0x60>)
 8014d06:	4b09      	ldr	r3, [pc, #36]	; (8014d2c <SystemInit+0x60>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014d0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014d10:	4b06      	ldr	r3, [pc, #24]	; (8014d2c <SystemInit+0x60>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014d16:	4b04      	ldr	r3, [pc, #16]	; (8014d28 <SystemInit+0x5c>)
 8014d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014d1c:	609a      	str	r2, [r3, #8]
#endif
}
 8014d1e:	bf00      	nop
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr
 8014d28:	e000ed00 	.word	0xe000ed00
 8014d2c:	40023800 	.word	0x40023800
 8014d30:	fef6ffff 	.word	0xfef6ffff
 8014d34:	24003010 	.word	0x24003010

08014d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4908      	ldr	r1, [pc, #32]	; (8014d60 <MX_USB_DEVICE_Init+0x28>)
 8014d40:	4808      	ldr	r0, [pc, #32]	; (8014d64 <MX_USB_DEVICE_Init+0x2c>)
 8014d42:	f7fa fc61 	bl	800f608 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8014d46:	4908      	ldr	r1, [pc, #32]	; (8014d68 <MX_USB_DEVICE_Init+0x30>)
 8014d48:	4806      	ldr	r0, [pc, #24]	; (8014d64 <MX_USB_DEVICE_Init+0x2c>)
 8014d4a:	f7fa fc88 	bl	800f65e <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8014d4e:	4907      	ldr	r1, [pc, #28]	; (8014d6c <MX_USB_DEVICE_Init+0x34>)
 8014d50:	4804      	ldr	r0, [pc, #16]	; (8014d64 <MX_USB_DEVICE_Init+0x2c>)
 8014d52:	f7f9 fc3b 	bl	800e5cc <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8014d56:	4803      	ldr	r0, [pc, #12]	; (8014d64 <MX_USB_DEVICE_Init+0x2c>)
 8014d58:	f7fa fc9b 	bl	800f692 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014d5c:	bf00      	nop
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	200000c8 	.word	0x200000c8
 8014d64:	2002c32c 	.word	0x2002c32c
 8014d68:	20000018 	.word	0x20000018
 8014d6c:	2000010c 	.word	0x2000010c

08014d70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b08a      	sub	sp, #40	; 0x28
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014d80:	d130      	bne.n	8014de4 <HAL_PCD_MspInit+0x74>
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014d82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d88:	2302      	movs	r3, #2
 8014d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d90:	2303      	movs	r3, #3
 8014d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014d94:	230a      	movs	r3, #10
 8014d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d98:	f107 0314 	add.w	r3, r7, #20
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	4813      	ldr	r0, [pc, #76]	; (8014dec <HAL_PCD_MspInit+0x7c>)
 8014da0:	f7ed fe62 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014da4:	4a12      	ldr	r2, [pc, #72]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014da6:	4b12      	ldr	r3, [pc, #72]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dae:	6353      	str	r3, [r2, #52]	; 0x34
 8014db0:	4b0f      	ldr	r3, [pc, #60]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014db8:	613b      	str	r3, [r7, #16]
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	4a0c      	ldr	r2, [pc, #48]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014dbe:	4b0c      	ldr	r3, [pc, #48]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8014dc8:	4b09      	ldr	r3, [pc, #36]	; (8014df0 <HAL_PCD_MspInit+0x80>)
 8014dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014dd0:	60fb      	str	r3, [r7, #12]
 8014dd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	2105      	movs	r1, #5
 8014dd8:	2043      	movs	r0, #67	; 0x43
 8014dda:	f7ed fa7c 	bl	80022d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014dde:	2043      	movs	r0, #67	; 0x43
 8014de0:	f7ed fa95 	bl	800230e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014de4:	bf00      	nop
 8014de6:	3728      	adds	r7, #40	; 0x28
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	40020000 	.word	0x40020000
 8014df0:	40023800 	.word	0x40023800

08014df4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014e08:	4619      	mov	r1, r3
 8014e0a:	4610      	mov	r0, r2
 8014e0c:	f7fa fc8a 	bl	800f724 <USBD_LL_SetupStage>
}
 8014e10:	bf00      	nop
 8014e12:	3708      	adds	r7, #8
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	460b      	mov	r3, r1
 8014e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8014e2a:	78fa      	ldrb	r2, [r7, #3]
 8014e2c:	6879      	ldr	r1, [r7, #4]
 8014e2e:	4613      	mov	r3, r2
 8014e30:	00db      	lsls	r3, r3, #3
 8014e32:	1a9b      	subs	r3, r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	440b      	add	r3, r1
 8014e38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	78fb      	ldrb	r3, [r7, #3]
 8014e40:	4619      	mov	r1, r3
 8014e42:	f7fa fcb9 	bl	800f7b8 <USBD_LL_DataOutStage>
}
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}

08014e4e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014e4e:	b580      	push	{r7, lr}
 8014e50:	b082      	sub	sp, #8
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	6078      	str	r0, [r7, #4]
 8014e56:	460b      	mov	r3, r1
 8014e58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8014e60:	78fa      	ldrb	r2, [r7, #3]
 8014e62:	6879      	ldr	r1, [r7, #4]
 8014e64:	4613      	mov	r3, r2
 8014e66:	00db      	lsls	r3, r3, #3
 8014e68:	1a9b      	subs	r3, r3, r2
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	440b      	add	r3, r1
 8014e6e:	3344      	adds	r3, #68	; 0x44
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	78fb      	ldrb	r3, [r7, #3]
 8014e74:	4619      	mov	r1, r3
 8014e76:	f7fa fcfa 	bl	800f86e <USBD_LL_DataInStage>
}
 8014e7a:	bf00      	nop
 8014e7c:	3708      	adds	r7, #8
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}

08014e82 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b082      	sub	sp, #8
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fa fde0 	bl	800fa56 <USBD_LL_SOF>
}
 8014e96:	bf00      	nop
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d002      	beq.n	8014eb8 <HAL_PCD_ResetCallback+0x1a>
 8014eb2:	2b02      	cmp	r3, #2
 8014eb4:	d003      	beq.n	8014ebe <HAL_PCD_ResetCallback+0x20>
 8014eb6:	e005      	b.n	8014ec4 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	73fb      	strb	r3, [r7, #15]
    break;
 8014ebc:	e005      	b.n	8014eca <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8014ec2:	e002      	b.n	8014eca <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	73fb      	strb	r3, [r7, #15]
    break;    
 8014ec8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014ed0:	7bfa      	ldrb	r2, [r7, #15]
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7fa fd88 	bl	800f9ea <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7fa fd53 	bl	800f98c <USBD_LL_Reset>
}
 8014ee6:	bf00      	nop
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
	...

08014ef0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7fa fd83 	bl	800fa0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f043 0301 	orr.w	r3, r3, #1
 8014f1c:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6a1b      	ldr	r3, [r3, #32]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d005      	beq.n	8014f32 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014f26:	4a05      	ldr	r2, [pc, #20]	; (8014f3c <HAL_PCD_SuspendCallback+0x4c>)
 8014f28:	4b04      	ldr	r3, [pc, #16]	; (8014f3c <HAL_PCD_SuspendCallback+0x4c>)
 8014f2a:	691b      	ldr	r3, [r3, #16]
 8014f2c:	f043 0306 	orr.w	r3, r3, #6
 8014f30:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014f32:	bf00      	nop
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	e000ed00 	.word	0xe000ed00

08014f40 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fa fd70 	bl	800fa34 <USBD_LL_Resume>
}
 8014f54:	bf00      	nop
 8014f56:	3708      	adds	r7, #8
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	460b      	mov	r3, r1
 8014f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014f6e:	78fa      	ldrb	r2, [r7, #3]
 8014f70:	4611      	mov	r1, r2
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fa fd96 	bl	800faa4 <USBD_LL_IsoOUTIncomplete>
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	460b      	mov	r3, r1
 8014f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014f92:	78fa      	ldrb	r2, [r7, #3]
 8014f94:	4611      	mov	r1, r2
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fa fd77 	bl	800fa8a <USBD_LL_IsoINIncomplete>
}
 8014f9c:	bf00      	nop
 8014f9e:	3708      	adds	r7, #8
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b082      	sub	sp, #8
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7fa fd83 	bl	800fabe <USBD_LL_DevConnected>
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fa fd80 	bl	800fad4 <USBD_LL_DevDisconnected>
}
 8014fd4:	bf00      	nop
 8014fd6:	3708      	adds	r7, #8
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d142      	bne.n	8015072 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014fec:	4a23      	ldr	r2, [pc, #140]	; (801507c <USBD_LL_Init+0xa0>)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	4a21      	ldr	r2, [pc, #132]	; (801507c <USBD_LL_Init+0xa0>)
 8014ff8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014ffc:	4b1f      	ldr	r3, [pc, #124]	; (801507c <USBD_LL_Init+0xa0>)
 8014ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015004:	4b1d      	ldr	r3, [pc, #116]	; (801507c <USBD_LL_Init+0xa0>)
 8015006:	2206      	movs	r2, #6
 8015008:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801500a:	4b1c      	ldr	r3, [pc, #112]	; (801507c <USBD_LL_Init+0xa0>)
 801500c:	2202      	movs	r2, #2
 801500e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015010:	4b1a      	ldr	r3, [pc, #104]	; (801507c <USBD_LL_Init+0xa0>)
 8015012:	2200      	movs	r2, #0
 8015014:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8015016:	4b19      	ldr	r3, [pc, #100]	; (801507c <USBD_LL_Init+0xa0>)
 8015018:	2200      	movs	r2, #0
 801501a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801501c:	4b17      	ldr	r3, [pc, #92]	; (801507c <USBD_LL_Init+0xa0>)
 801501e:	2202      	movs	r2, #2
 8015020:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015022:	4b16      	ldr	r3, [pc, #88]	; (801507c <USBD_LL_Init+0xa0>)
 8015024:	2200      	movs	r2, #0
 8015026:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015028:	4b14      	ldr	r3, [pc, #80]	; (801507c <USBD_LL_Init+0xa0>)
 801502a:	2200      	movs	r2, #0
 801502c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801502e:	4b13      	ldr	r3, [pc, #76]	; (801507c <USBD_LL_Init+0xa0>)
 8015030:	2200      	movs	r2, #0
 8015032:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015034:	4b11      	ldr	r3, [pc, #68]	; (801507c <USBD_LL_Init+0xa0>)
 8015036:	2200      	movs	r2, #0
 8015038:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801503a:	4b10      	ldr	r3, [pc, #64]	; (801507c <USBD_LL_Init+0xa0>)
 801503c:	2200      	movs	r2, #0
 801503e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015040:	480e      	ldr	r0, [pc, #56]	; (801507c <USBD_LL_Init+0xa0>)
 8015042:	f7ee fca9 	bl	8003998 <HAL_PCD_Init>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d004      	beq.n	8015056 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 801504c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8015050:	480b      	ldr	r0, [pc, #44]	; (8015080 <USBD_LL_Init+0xa4>)
 8015052:	f7fe ff8d 	bl	8013f70 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015056:	2180      	movs	r1, #128	; 0x80
 8015058:	4808      	ldr	r0, [pc, #32]	; (801507c <USBD_LL_Init+0xa0>)
 801505a:	f7ef fe08 	bl	8004c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801505e:	2240      	movs	r2, #64	; 0x40
 8015060:	2100      	movs	r1, #0
 8015062:	4806      	ldr	r0, [pc, #24]	; (801507c <USBD_LL_Init+0xa0>)
 8015064:	f7ef fdb8 	bl	8004bd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015068:	2280      	movs	r2, #128	; 0x80
 801506a:	2101      	movs	r1, #1
 801506c:	4803      	ldr	r0, [pc, #12]	; (801507c <USBD_LL_Init+0xa0>)
 801506e:	f7ef fdb3 	bl	8004bd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015072:	2300      	movs	r3, #0
}
 8015074:	4618      	mov	r0, r3
 8015076:	3708      	adds	r7, #8
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	2002c550 	.word	0x2002c550
 8015080:	0802c3d0 	.word	0x0802c3d0

08015084 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015090:	2300      	movs	r3, #0
 8015092:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801509a:	4618      	mov	r0, r3
 801509c:	f7ee fd8a 	bl	8003bb4 <HAL_PCD_Start>
 80150a0:	4603      	mov	r3, r0
 80150a2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80150a4:	7bbb      	ldrb	r3, [r7, #14]
 80150a6:	2b03      	cmp	r3, #3
 80150a8:	d816      	bhi.n	80150d8 <USBD_LL_Start+0x54>
 80150aa:	a201      	add	r2, pc, #4	; (adr r2, 80150b0 <USBD_LL_Start+0x2c>)
 80150ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b0:	080150c1 	.word	0x080150c1
 80150b4:	080150c7 	.word	0x080150c7
 80150b8:	080150cd 	.word	0x080150cd
 80150bc:	080150d3 	.word	0x080150d3
    case HAL_OK :
      usb_status = USBD_OK;
 80150c0:	2300      	movs	r3, #0
 80150c2:	73fb      	strb	r3, [r7, #15]
    break;
 80150c4:	e00b      	b.n	80150de <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80150c6:	2302      	movs	r3, #2
 80150c8:	73fb      	strb	r3, [r7, #15]
    break;
 80150ca:	e008      	b.n	80150de <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80150cc:	2301      	movs	r3, #1
 80150ce:	73fb      	strb	r3, [r7, #15]
    break;
 80150d0:	e005      	b.n	80150de <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80150d2:	2302      	movs	r3, #2
 80150d4:	73fb      	strb	r3, [r7, #15]
    break;
 80150d6:	e002      	b.n	80150de <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80150d8:	2302      	movs	r3, #2
 80150da:	73fb      	strb	r3, [r7, #15]
    break;
 80150dc:	bf00      	nop
  }
  return usb_status;
 80150de:	7bfb      	ldrb	r3, [r7, #15]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	4608      	mov	r0, r1
 80150f2:	4611      	mov	r1, r2
 80150f4:	461a      	mov	r2, r3
 80150f6:	4603      	mov	r3, r0
 80150f8:	70fb      	strb	r3, [r7, #3]
 80150fa:	460b      	mov	r3, r1
 80150fc:	70bb      	strb	r3, [r7, #2]
 80150fe:	4613      	mov	r3, r2
 8015100:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015102:	2300      	movs	r3, #0
 8015104:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015106:	2300      	movs	r3, #0
 8015108:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8015110:	78bb      	ldrb	r3, [r7, #2]
 8015112:	883a      	ldrh	r2, [r7, #0]
 8015114:	78f9      	ldrb	r1, [r7, #3]
 8015116:	f7ef fa94 	bl	8004642 <HAL_PCD_EP_Open>
 801511a:	4603      	mov	r3, r0
 801511c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801511e:	7bbb      	ldrb	r3, [r7, #14]
 8015120:	2b03      	cmp	r3, #3
 8015122:	d817      	bhi.n	8015154 <USBD_LL_OpenEP+0x6c>
 8015124:	a201      	add	r2, pc, #4	; (adr r2, 801512c <USBD_LL_OpenEP+0x44>)
 8015126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801512a:	bf00      	nop
 801512c:	0801513d 	.word	0x0801513d
 8015130:	08015143 	.word	0x08015143
 8015134:	08015149 	.word	0x08015149
 8015138:	0801514f 	.word	0x0801514f
    case HAL_OK :
      usb_status = USBD_OK;
 801513c:	2300      	movs	r3, #0
 801513e:	73fb      	strb	r3, [r7, #15]
    break;
 8015140:	e00b      	b.n	801515a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015142:	2302      	movs	r3, #2
 8015144:	73fb      	strb	r3, [r7, #15]
    break;
 8015146:	e008      	b.n	801515a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015148:	2301      	movs	r3, #1
 801514a:	73fb      	strb	r3, [r7, #15]
    break;
 801514c:	e005      	b.n	801515a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801514e:	2302      	movs	r3, #2
 8015150:	73fb      	strb	r3, [r7, #15]
    break;
 8015152:	e002      	b.n	801515a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8015154:	2302      	movs	r3, #2
 8015156:	73fb      	strb	r3, [r7, #15]
    break;
 8015158:	bf00      	nop
  }
  return usb_status;
 801515a:	7bfb      	ldrb	r3, [r7, #15]
}
 801515c:	4618      	mov	r0, r3
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801517e:	78fa      	ldrb	r2, [r7, #3]
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7ef fac5 	bl	8004712 <HAL_PCD_EP_Close>
 8015188:	4603      	mov	r3, r0
 801518a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 801518c:	7bbb      	ldrb	r3, [r7, #14]
 801518e:	2b03      	cmp	r3, #3
 8015190:	d816      	bhi.n	80151c0 <USBD_LL_CloseEP+0x5c>
 8015192:	a201      	add	r2, pc, #4	; (adr r2, 8015198 <USBD_LL_CloseEP+0x34>)
 8015194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015198:	080151a9 	.word	0x080151a9
 801519c:	080151af 	.word	0x080151af
 80151a0:	080151b5 	.word	0x080151b5
 80151a4:	080151bb 	.word	0x080151bb
    case HAL_OK :
      usb_status = USBD_OK;
 80151a8:	2300      	movs	r3, #0
 80151aa:	73fb      	strb	r3, [r7, #15]
    break;
 80151ac:	e00b      	b.n	80151c6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80151ae:	2302      	movs	r3, #2
 80151b0:	73fb      	strb	r3, [r7, #15]
    break;
 80151b2:	e008      	b.n	80151c6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80151b4:	2301      	movs	r3, #1
 80151b6:	73fb      	strb	r3, [r7, #15]
    break;
 80151b8:	e005      	b.n	80151c6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80151ba:	2302      	movs	r3, #2
 80151bc:	73fb      	strb	r3, [r7, #15]
    break;
 80151be:	e002      	b.n	80151c6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80151c0:	2302      	movs	r3, #2
 80151c2:	73fb      	strb	r3, [r7, #15]
    break;
 80151c4:	bf00      	nop
  }
  return usb_status;  
 80151c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151dc:	2300      	movs	r3, #0
 80151de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151e0:	2300      	movs	r3, #0
 80151e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80151ea:	78fa      	ldrb	r2, [r7, #3]
 80151ec:	4611      	mov	r1, r2
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7ef fc3d 	bl	8004a6e <HAL_PCD_EP_Flush>
 80151f4:	4603      	mov	r3, r0
 80151f6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80151f8:	7bbb      	ldrb	r3, [r7, #14]
 80151fa:	2b03      	cmp	r3, #3
 80151fc:	d816      	bhi.n	801522c <USBD_LL_FlushEP+0x5c>
 80151fe:	a201      	add	r2, pc, #4	; (adr r2, 8015204 <USBD_LL_FlushEP+0x34>)
 8015200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015204:	08015215 	.word	0x08015215
 8015208:	0801521b 	.word	0x0801521b
 801520c:	08015221 	.word	0x08015221
 8015210:	08015227 	.word	0x08015227
    case HAL_OK :
      usb_status = USBD_OK;
 8015214:	2300      	movs	r3, #0
 8015216:	73fb      	strb	r3, [r7, #15]
    break;
 8015218:	e00b      	b.n	8015232 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801521a:	2302      	movs	r3, #2
 801521c:	73fb      	strb	r3, [r7, #15]
    break;
 801521e:	e008      	b.n	8015232 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015220:	2301      	movs	r3, #1
 8015222:	73fb      	strb	r3, [r7, #15]
    break;
 8015224:	e005      	b.n	8015232 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015226:	2302      	movs	r3, #2
 8015228:	73fb      	strb	r3, [r7, #15]
    break;
 801522a:	e002      	b.n	8015232 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801522c:	2302      	movs	r3, #2
 801522e:	73fb      	strb	r3, [r7, #15]
    break;
 8015230:	bf00      	nop
  }
  return usb_status;  
 8015232:	7bfb      	ldrb	r3, [r7, #15]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3710      	adds	r7, #16
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b084      	sub	sp, #16
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	460b      	mov	r3, r1
 8015246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015248:	2300      	movs	r3, #0
 801524a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801524c:	2300      	movs	r3, #0
 801524e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015256:	78fa      	ldrb	r2, [r7, #3]
 8015258:	4611      	mov	r1, r2
 801525a:	4618      	mov	r0, r3
 801525c:	f7ef fb4f 	bl	80048fe <HAL_PCD_EP_SetStall>
 8015260:	4603      	mov	r3, r0
 8015262:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015264:	7bbb      	ldrb	r3, [r7, #14]
 8015266:	2b03      	cmp	r3, #3
 8015268:	d816      	bhi.n	8015298 <USBD_LL_StallEP+0x5c>
 801526a:	a201      	add	r2, pc, #4	; (adr r2, 8015270 <USBD_LL_StallEP+0x34>)
 801526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015270:	08015281 	.word	0x08015281
 8015274:	08015287 	.word	0x08015287
 8015278:	0801528d 	.word	0x0801528d
 801527c:	08015293 	.word	0x08015293
    case HAL_OK :
      usb_status = USBD_OK;
 8015280:	2300      	movs	r3, #0
 8015282:	73fb      	strb	r3, [r7, #15]
    break;
 8015284:	e00b      	b.n	801529e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015286:	2302      	movs	r3, #2
 8015288:	73fb      	strb	r3, [r7, #15]
    break;
 801528a:	e008      	b.n	801529e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801528c:	2301      	movs	r3, #1
 801528e:	73fb      	strb	r3, [r7, #15]
    break;
 8015290:	e005      	b.n	801529e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015292:	2302      	movs	r3, #2
 8015294:	73fb      	strb	r3, [r7, #15]
    break;
 8015296:	e002      	b.n	801529e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8015298:	2302      	movs	r3, #2
 801529a:	73fb      	strb	r3, [r7, #15]
    break;
 801529c:	bf00      	nop
  }
  return usb_status;  
 801529e:	7bfb      	ldrb	r3, [r7, #15]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152b4:	2300      	movs	r3, #0
 80152b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152b8:	2300      	movs	r3, #0
 80152ba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80152c2:	78fa      	ldrb	r2, [r7, #3]
 80152c4:	4611      	mov	r1, r2
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7ef fb7d 	bl	80049c6 <HAL_PCD_EP_ClrStall>
 80152cc:	4603      	mov	r3, r0
 80152ce:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80152d0:	7bbb      	ldrb	r3, [r7, #14]
 80152d2:	2b03      	cmp	r3, #3
 80152d4:	d816      	bhi.n	8015304 <USBD_LL_ClearStallEP+0x5c>
 80152d6:	a201      	add	r2, pc, #4	; (adr r2, 80152dc <USBD_LL_ClearStallEP+0x34>)
 80152d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152dc:	080152ed 	.word	0x080152ed
 80152e0:	080152f3 	.word	0x080152f3
 80152e4:	080152f9 	.word	0x080152f9
 80152e8:	080152ff 	.word	0x080152ff
    case HAL_OK :
      usb_status = USBD_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	73fb      	strb	r3, [r7, #15]
    break;
 80152f0:	e00b      	b.n	801530a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80152f2:	2302      	movs	r3, #2
 80152f4:	73fb      	strb	r3, [r7, #15]
    break;
 80152f6:	e008      	b.n	801530a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80152f8:	2301      	movs	r3, #1
 80152fa:	73fb      	strb	r3, [r7, #15]
    break;
 80152fc:	e005      	b.n	801530a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80152fe:	2302      	movs	r3, #2
 8015300:	73fb      	strb	r3, [r7, #15]
    break;
 8015302:	e002      	b.n	801530a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8015304:	2302      	movs	r3, #2
 8015306:	73fb      	strb	r3, [r7, #15]
    break;
 8015308:	bf00      	nop
  }
  return usb_status; 
 801530a:	7bfb      	ldrb	r3, [r7, #15]
}
 801530c:	4618      	mov	r0, r3
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	460b      	mov	r3, r1
 801531e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015326:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801532c:	2b00      	cmp	r3, #0
 801532e:	da0b      	bge.n	8015348 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015330:	78fb      	ldrb	r3, [r7, #3]
 8015332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015336:	68f9      	ldr	r1, [r7, #12]
 8015338:	4613      	mov	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	1a9b      	subs	r3, r3, r2
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	440b      	add	r3, r1
 8015342:	333a      	adds	r3, #58	; 0x3a
 8015344:	781b      	ldrb	r3, [r3, #0]
 8015346:	e00b      	b.n	8015360 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015348:	78fb      	ldrb	r3, [r7, #3]
 801534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801534e:	68f9      	ldr	r1, [r7, #12]
 8015350:	4613      	mov	r3, r2
 8015352:	00db      	lsls	r3, r3, #3
 8015354:	1a9b      	subs	r3, r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	440b      	add	r3, r1
 801535a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 801535e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015360:	4618      	mov	r0, r3
 8015362:	3714      	adds	r7, #20
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	460b      	mov	r3, r1
 8015376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015378:	2300      	movs	r3, #0
 801537a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801537c:	2300      	movs	r3, #0
 801537e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015386:	78fa      	ldrb	r2, [r7, #3]
 8015388:	4611      	mov	r1, r2
 801538a:	4618      	mov	r0, r3
 801538c:	f7ef f938 	bl	8004600 <HAL_PCD_SetAddress>
 8015390:	4603      	mov	r3, r0
 8015392:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8015394:	7bbb      	ldrb	r3, [r7, #14]
 8015396:	2b03      	cmp	r3, #3
 8015398:	d816      	bhi.n	80153c8 <USBD_LL_SetUSBAddress+0x5c>
 801539a:	a201      	add	r2, pc, #4	; (adr r2, 80153a0 <USBD_LL_SetUSBAddress+0x34>)
 801539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a0:	080153b1 	.word	0x080153b1
 80153a4:	080153b7 	.word	0x080153b7
 80153a8:	080153bd 	.word	0x080153bd
 80153ac:	080153c3 	.word	0x080153c3
    case HAL_OK :
      usb_status = USBD_OK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	73fb      	strb	r3, [r7, #15]
    break;
 80153b4:	e00b      	b.n	80153ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80153b6:	2302      	movs	r3, #2
 80153b8:	73fb      	strb	r3, [r7, #15]
    break;
 80153ba:	e008      	b.n	80153ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80153bc:	2301      	movs	r3, #1
 80153be:	73fb      	strb	r3, [r7, #15]
    break;
 80153c0:	e005      	b.n	80153ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80153c2:	2302      	movs	r3, #2
 80153c4:	73fb      	strb	r3, [r7, #15]
    break;
 80153c6:	e002      	b.n	80153ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80153c8:	2302      	movs	r3, #2
 80153ca:	73fb      	strb	r3, [r7, #15]
    break;
 80153cc:	bf00      	nop
  }
  return usb_status;  
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	607a      	str	r2, [r7, #4]
 80153e2:	461a      	mov	r2, r3
 80153e4:	460b      	mov	r3, r1
 80153e6:	72fb      	strb	r3, [r7, #11]
 80153e8:	4613      	mov	r3, r2
 80153ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153ec:	2300      	movs	r3, #0
 80153ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153f0:	2300      	movs	r3, #0
 80153f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80153fa:	893b      	ldrh	r3, [r7, #8]
 80153fc:	7af9      	ldrb	r1, [r7, #11]
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	f7ef fa34 	bl	800486c <HAL_PCD_EP_Transmit>
 8015404:	4603      	mov	r3, r0
 8015406:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8015408:	7dbb      	ldrb	r3, [r7, #22]
 801540a:	2b03      	cmp	r3, #3
 801540c:	d816      	bhi.n	801543c <USBD_LL_Transmit+0x64>
 801540e:	a201      	add	r2, pc, #4	; (adr r2, 8015414 <USBD_LL_Transmit+0x3c>)
 8015410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015414:	08015425 	.word	0x08015425
 8015418:	0801542b 	.word	0x0801542b
 801541c:	08015431 	.word	0x08015431
 8015420:	08015437 	.word	0x08015437
    case HAL_OK :
      usb_status = USBD_OK;
 8015424:	2300      	movs	r3, #0
 8015426:	75fb      	strb	r3, [r7, #23]
    break;
 8015428:	e00b      	b.n	8015442 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801542a:	2302      	movs	r3, #2
 801542c:	75fb      	strb	r3, [r7, #23]
    break;
 801542e:	e008      	b.n	8015442 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015430:	2301      	movs	r3, #1
 8015432:	75fb      	strb	r3, [r7, #23]
    break;
 8015434:	e005      	b.n	8015442 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015436:	2302      	movs	r3, #2
 8015438:	75fb      	strb	r3, [r7, #23]
    break;
 801543a:	e002      	b.n	8015442 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 801543c:	2302      	movs	r3, #2
 801543e:	75fb      	strb	r3, [r7, #23]
    break;
 8015440:	bf00      	nop
  }
  return usb_status;    
 8015442:	7dfb      	ldrb	r3, [r7, #23]
}
 8015444:	4618      	mov	r0, r3
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b086      	sub	sp, #24
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	607a      	str	r2, [r7, #4]
 8015456:	461a      	mov	r2, r3
 8015458:	460b      	mov	r3, r1
 801545a:	72fb      	strb	r3, [r7, #11]
 801545c:	4613      	mov	r3, r2
 801545e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015460:	2300      	movs	r3, #0
 8015462:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801546e:	893b      	ldrh	r3, [r7, #8]
 8015470:	7af9      	ldrb	r1, [r7, #11]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	f7ef f997 	bl	80047a6 <HAL_PCD_EP_Receive>
 8015478:	4603      	mov	r3, r0
 801547a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 801547c:	7dbb      	ldrb	r3, [r7, #22]
 801547e:	2b03      	cmp	r3, #3
 8015480:	d816      	bhi.n	80154b0 <USBD_LL_PrepareReceive+0x64>
 8015482:	a201      	add	r2, pc, #4	; (adr r2, 8015488 <USBD_LL_PrepareReceive+0x3c>)
 8015484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015488:	08015499 	.word	0x08015499
 801548c:	0801549f 	.word	0x0801549f
 8015490:	080154a5 	.word	0x080154a5
 8015494:	080154ab 	.word	0x080154ab
    case HAL_OK :
      usb_status = USBD_OK;
 8015498:	2300      	movs	r3, #0
 801549a:	75fb      	strb	r3, [r7, #23]
    break;
 801549c:	e00b      	b.n	80154b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801549e:	2302      	movs	r3, #2
 80154a0:	75fb      	strb	r3, [r7, #23]
    break;
 80154a2:	e008      	b.n	80154b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80154a4:	2301      	movs	r3, #1
 80154a6:	75fb      	strb	r3, [r7, #23]
    break;
 80154a8:	e005      	b.n	80154b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80154aa:	2302      	movs	r3, #2
 80154ac:	75fb      	strb	r3, [r7, #23]
    break;
 80154ae:	e002      	b.n	80154b6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80154b0:	2302      	movs	r3, #2
 80154b2:	75fb      	strb	r3, [r7, #23]
    break;
 80154b4:	bf00      	nop
  }
  return usb_status; 
 80154b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3718      	adds	r7, #24
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	460b      	mov	r3, r1
 80154ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80154d2:	78fa      	ldrb	r2, [r7, #3]
 80154d4:	4611      	mov	r1, r2
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7ef f9af 	bl	800483a <HAL_PCD_EP_GetRxCount>
 80154dc:	4603      	mov	r3, r0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
	...

080154e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	460b      	mov	r3, r1
 80154f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80154f4:	78fb      	ldrb	r3, [r7, #3]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <HAL_PCDEx_LPM_Callback+0x18>
 80154fa:	2b01      	cmp	r3, #1
 80154fc:	d020      	beq.n	8015540 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80154fe:	e03d      	b.n	801557c <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6a1b      	ldr	r3, [r3, #32]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d007      	beq.n	8015518 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8015508:	f7fd fbca 	bl	8012ca0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801550c:	4a1d      	ldr	r2, [pc, #116]	; (8015584 <HAL_PCDEx_LPM_Callback+0x9c>)
 801550e:	4b1d      	ldr	r3, [pc, #116]	; (8015584 <HAL_PCDEx_LPM_Callback+0x9c>)
 8015510:	691b      	ldr	r3, [r3, #16]
 8015512:	f023 0306 	bic.w	r3, r3, #6
 8015516:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015520:	461a      	mov	r2, r3
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	f023 0301 	bic.w	r3, r3, #1
 8015530:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8015538:	4618      	mov	r0, r3
 801553a:	f7fa fa7b 	bl	800fa34 <USBD_LL_Resume>
    break;
 801553e:	e01d      	b.n	801557c <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015548:	461a      	mov	r2, r3
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	f043 0301 	orr.w	r3, r3, #1
 8015558:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8015560:	4618      	mov	r0, r3
 8015562:	f7fa fa52 	bl	800fa0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6a1b      	ldr	r3, [r3, #32]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d005      	beq.n	801557a <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801556e:	4a05      	ldr	r2, [pc, #20]	; (8015584 <HAL_PCDEx_LPM_Callback+0x9c>)
 8015570:	4b04      	ldr	r3, [pc, #16]	; (8015584 <HAL_PCDEx_LPM_Callback+0x9c>)
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	f043 0306 	orr.w	r3, r3, #6
 8015578:	6113      	str	r3, [r2, #16]
    break;   
 801557a:	bf00      	nop
}
 801557c:	bf00      	nop
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	e000ed00 	.word	0xe000ed00

08015588 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	4603      	mov	r3, r0
 8015590:	6039      	str	r1, [r7, #0]
 8015592:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	2212      	movs	r2, #18
 8015598:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801559a:	4b03      	ldr	r3, [pc, #12]	; (80155a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801559c:	4618      	mov	r0, r3
 801559e:	370c      	adds	r7, #12
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr
 80155a8:	200000e8 	.word	0x200000e8

080155ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	2204      	movs	r2, #4
 80155bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80155be:	4b03      	ldr	r3, [pc, #12]	; (80155cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	370c      	adds	r7, #12
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr
 80155cc:	20000108 	.word	0x20000108

080155d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	4603      	mov	r3, r0
 80155d8:	6039      	str	r1, [r7, #0]
 80155da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d105      	bne.n	80155ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155e2:	683a      	ldr	r2, [r7, #0]
 80155e4:	4907      	ldr	r1, [pc, #28]	; (8015604 <USBD_FS_ProductStrDescriptor+0x34>)
 80155e6:	4808      	ldr	r0, [pc, #32]	; (8015608 <USBD_FS_ProductStrDescriptor+0x38>)
 80155e8:	f7fa feab 	bl	8010342 <USBD_GetString>
 80155ec:	e004      	b.n	80155f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155ee:	683a      	ldr	r2, [r7, #0]
 80155f0:	4904      	ldr	r1, [pc, #16]	; (8015604 <USBD_FS_ProductStrDescriptor+0x34>)
 80155f2:	4805      	ldr	r0, [pc, #20]	; (8015608 <USBD_FS_ProductStrDescriptor+0x38>)
 80155f4:	f7fa fea5 	bl	8010342 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155f8:	4b02      	ldr	r3, [pc, #8]	; (8015604 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	3708      	adds	r7, #8
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}
 8015602:	bf00      	nop
 8015604:	2002c950 	.word	0x2002c950
 8015608:	0802c3e4 	.word	0x0802c3e4

0801560c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	4603      	mov	r3, r0
 8015614:	6039      	str	r1, [r7, #0]
 8015616:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015618:	683a      	ldr	r2, [r7, #0]
 801561a:	4904      	ldr	r1, [pc, #16]	; (801562c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801561c:	4804      	ldr	r0, [pc, #16]	; (8015630 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801561e:	f7fa fe90 	bl	8010342 <USBD_GetString>
  return USBD_StrDesc;
 8015622:	4b02      	ldr	r3, [pc, #8]	; (801562c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015624:	4618      	mov	r0, r3
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	2002c950 	.word	0x2002c950
 8015630:	0802c3f8 	.word	0x0802c3f8

08015634 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	4603      	mov	r3, r0
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015640:	79fb      	ldrb	r3, [r7, #7]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d105      	bne.n	8015652 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8015646:	683a      	ldr	r2, [r7, #0]
 8015648:	4907      	ldr	r1, [pc, #28]	; (8015668 <USBD_FS_SerialStrDescriptor+0x34>)
 801564a:	4808      	ldr	r0, [pc, #32]	; (801566c <USBD_FS_SerialStrDescriptor+0x38>)
 801564c:	f7fa fe79 	bl	8010342 <USBD_GetString>
 8015650:	e004      	b.n	801565c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	4904      	ldr	r1, [pc, #16]	; (8015668 <USBD_FS_SerialStrDescriptor+0x34>)
 8015656:	4805      	ldr	r0, [pc, #20]	; (801566c <USBD_FS_SerialStrDescriptor+0x38>)
 8015658:	f7fa fe73 	bl	8010342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <USBD_FS_SerialStrDescriptor+0x34>)
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	2002c950 	.word	0x2002c950
 801566c:	0802c40c 	.word	0x0802c40c

08015670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	6039      	str	r1, [r7, #0]
 801567a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801567c:	79fb      	ldrb	r3, [r7, #7]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d105      	bne.n	801568e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015682:	683a      	ldr	r2, [r7, #0]
 8015684:	4907      	ldr	r1, [pc, #28]	; (80156a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015686:	4808      	ldr	r0, [pc, #32]	; (80156a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015688:	f7fa fe5b 	bl	8010342 <USBD_GetString>
 801568c:	e004      	b.n	8015698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	4904      	ldr	r1, [pc, #16]	; (80156a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015692:	4805      	ldr	r0, [pc, #20]	; (80156a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015694:	f7fa fe55 	bl	8010342 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015698:	4b02      	ldr	r3, [pc, #8]	; (80156a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801569a:	4618      	mov	r0, r3
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	2002c950 	.word	0x2002c950
 80156a8:	0802c41c 	.word	0x0802c41c

080156ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	4603      	mov	r3, r0
 80156b4:	6039      	str	r1, [r7, #0]
 80156b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80156b8:	79fb      	ldrb	r3, [r7, #7]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d105      	bne.n	80156ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156be:	683a      	ldr	r2, [r7, #0]
 80156c0:	4907      	ldr	r1, [pc, #28]	; (80156e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80156c2:	4808      	ldr	r0, [pc, #32]	; (80156e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80156c4:	f7fa fe3d 	bl	8010342 <USBD_GetString>
 80156c8:	e004      	b.n	80156d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156ca:	683a      	ldr	r2, [r7, #0]
 80156cc:	4904      	ldr	r1, [pc, #16]	; (80156e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80156ce:	4805      	ldr	r0, [pc, #20]	; (80156e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80156d0:	f7fa fe37 	bl	8010342 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156d4:	4b02      	ldr	r3, [pc, #8]	; (80156e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3708      	adds	r7, #8
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	2002c950 	.word	0x2002c950
 80156e4:	0802c428 	.word	0x0802c428

080156e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156e8:	b480      	push	{r7}
 80156ea:	b083      	sub	sp, #12
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	4603      	mov	r3, r0
 80156f0:	6039      	str	r1, [r7, #0]
 80156f2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	220c      	movs	r2, #12
 80156f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80156fa:	4b03      	ldr	r3, [pc, #12]	; (8015708 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	370c      	adds	r7, #12
 8015700:	46bd      	mov	sp, r7
 8015702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015706:	4770      	bx	lr
 8015708:	200000fc 	.word	0x200000fc

0801570c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	4603      	mov	r3, r0
 8015714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015716:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015718:	4618      	mov	r0, r3
 801571a:	370c      	adds	r7, #12
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr

08015724 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015724:	b480      	push	{r7}
 8015726:	b085      	sub	sp, #20
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015738:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015740:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8015742:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015744:	4618      	mov	r0, r3
 8015746:	3714      	adds	r7, #20
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	4603      	mov	r3, r0
 8015758:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801575a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801575c:	4618      	mov	r0, r3
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	4603      	mov	r3, r0
 8015770:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8015772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015774:	4618      	mov	r0, r3
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015780:	b480      	push	{r7}
 8015782:	b085      	sub	sp, #20
 8015784:	af00      	add	r7, sp, #0
 8015786:	60b9      	str	r1, [r7, #8]
 8015788:	607a      	str	r2, [r7, #4]
 801578a:	461a      	mov	r2, r3
 801578c:	4603      	mov	r3, r0
 801578e:	73fb      	strb	r3, [r7, #15]
 8015790:	4613      	mov	r3, r2
 8015792:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8015794:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015796:	4618      	mov	r0, r3
 8015798:	3714      	adds	r7, #20
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr

080157a2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80157a2:	b480      	push	{r7}
 80157a4:	b085      	sub	sp, #20
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	607a      	str	r2, [r7, #4]
 80157ac:	461a      	mov	r2, r3
 80157ae:	4603      	mov	r3, r0
 80157b0:	73fb      	strb	r3, [r7, #15]
 80157b2:	4613      	mov	r3, r2
 80157b4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80157b6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3714      	adds	r7, #20
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80157c4:	b480      	push	{r7}
 80157c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80157c8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80157d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801580c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80157d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80157da:	e003      	b.n	80157e4 <LoopCopyDataInit>

080157dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80157dc:	4b0c      	ldr	r3, [pc, #48]	; (8015810 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80157de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80157e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80157e2:	3104      	adds	r1, #4

080157e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80157e4:	480b      	ldr	r0, [pc, #44]	; (8015814 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80157e6:	4b0c      	ldr	r3, [pc, #48]	; (8015818 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80157e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80157ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80157ec:	d3f6      	bcc.n	80157dc <CopyDataInit>
  ldr  r2, =_sbss
 80157ee:	4a0b      	ldr	r2, [pc, #44]	; (801581c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80157f0:	e002      	b.n	80157f8 <LoopFillZerobss>

080157f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80157f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80157f4:	f842 3b04 	str.w	r3, [r2], #4

080157f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80157f8:	4b09      	ldr	r3, [pc, #36]	; (8015820 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80157fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80157fc:	d3f9      	bcc.n	80157f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80157fe:	f7ff fa65 	bl	8014ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015802:	f014 ff85 	bl	802a710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015806:	f7fd f9f1 	bl	8012bec <main>
  bx  lr    
 801580a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801580c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8015810:	08033038 	.word	0x08033038
  ldr  r0, =_sdata
 8015814:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015818:	20000644 	.word	0x20000644
  ldr  r2, =_sbss
 801581c:	20000644 	.word	0x20000644
  ldr  r3, = _ebss
 8015820:	2002cd2c 	.word	0x2002cd2c

08015824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015824:	e7fe      	b.n	8015824 <ADC_IRQHandler>
	...

08015828 <WINDOW_Callback>:
 8015828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801582c:	6846      	ldr	r6, [r0, #4]
 801582e:	b083      	sub	sp, #12
 8015830:	4604      	mov	r4, r0
 8015832:	4630      	mov	r0, r6
 8015834:	f010 f85a 	bl	80258ec <GUI_ALLOC_LockH>
 8015838:	ad02      	add	r5, sp, #8
 801583a:	4603      	mov	r3, r0
 801583c:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 8015840:	f845 0d08 	str.w	r0, [r5, #-8]!
 8015844:	4668      	mov	r0, sp
 8015846:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8015848:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801584c:	f010 f860 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015850:	6823      	ldr	r3, [r4, #0]
 8015852:	3b0e      	subs	r3, #14
 8015854:	2b1c      	cmp	r3, #28
 8015856:	d819      	bhi.n	801588c <WINDOW_Callback+0x64>
 8015858:	e8df f003 	tbb	[pc, r3]
 801585c:	18180f2d 	.word	0x18180f2d
 8015860:	18181818 	.word	0x18181818
 8015864:	18181818 	.word	0x18181818
 8015868:	18181818 	.word	0x18181818
 801586c:	18564f3a 	.word	0x18564f3a
 8015870:	1818186f 	.word	0x1818186f
 8015874:	18181818 	.word	0x18181818
 8015878:	1f          	.byte	0x1f
 8015879:	00          	.byte	0x00
 801587a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801587e:	4599      	cmp	r9, r3
 8015880:	d004      	beq.n	801588c <WINDOW_Callback+0x64>
 8015882:	4648      	mov	r0, r9
 8015884:	f00c fc22 	bl	80220cc <LCD_SetBkColor>
 8015888:	f00e fbe8 	bl	802405c <GUI_Clear>
 801588c:	2f00      	cmp	r7, #0
 801588e:	d059      	beq.n	8015944 <WINDOW_Callback+0x11c>
 8015890:	4620      	mov	r0, r4
 8015892:	47b8      	blx	r7
 8015894:	b003      	add	sp, #12
 8015896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801589a:	4630      	mov	r0, r6
 801589c:	f010 f826 	bl	80258ec <GUI_ALLOC_LockH>
 80158a0:	68e3      	ldr	r3, [r4, #12]
 80158a2:	9000      	str	r0, [sp, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d05e      	beq.n	8015966 <WINDOW_Callback+0x13e>
 80158a8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80158aa:	4668      	mov	r0, sp
 80158ac:	f010 f830 	bl	8025910 <GUI_ALLOC_UnlockH>
 80158b0:	b003      	add	sp, #12
 80158b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158b6:	68e3      	ldr	r3, [r4, #12]
 80158b8:	685a      	ldr	r2, [r3, #4]
 80158ba:	2a00      	cmp	r2, #0
 80158bc:	dde6      	ble.n	801588c <WINDOW_Callback+0x64>
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b09      	cmp	r3, #9
 80158c2:	d04c      	beq.n	801595e <WINDOW_Callback+0x136>
 80158c4:	2b0a      	cmp	r3, #10
 80158c6:	d1e1      	bne.n	801588c <WINDOW_Callback+0x64>
 80158c8:	4630      	mov	r0, r6
 80158ca:	f005 fd19 	bl	801b300 <WM_SetFocusOnPrevChild>
 80158ce:	e7e1      	b.n	8015894 <WINDOW_Callback+0x6c>
 80158d0:	68e4      	ldr	r4, [r4, #12]
 80158d2:	2c01      	cmp	r4, #1
 80158d4:	d1de      	bne.n	8015894 <WINDOW_Callback+0x6c>
 80158d6:	4640      	mov	r0, r8
 80158d8:	f006 fd8a 	bl	801c3f0 <WM_IsWindow>
 80158dc:	2800      	cmp	r0, #0
 80158de:	d03e      	beq.n	801595e <WINDOW_Callback+0x136>
 80158e0:	4640      	mov	r0, r8
 80158e2:	f006 fe11 	bl	801c508 <WM_SetFocus>
 80158e6:	4640      	mov	r0, r8
 80158e8:	f006 fd54 	bl	801c394 <WM_HasFocus>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d0d1      	beq.n	8015894 <WINDOW_Callback+0x6c>
 80158f0:	4640      	mov	r0, r8
 80158f2:	4621      	mov	r1, r4
 80158f4:	f000 f960 	bl	8015bb8 <WIDGET_OrState>
 80158f8:	e7cc      	b.n	8015894 <WINDOW_Callback+0x6c>
 80158fa:	4630      	mov	r0, r6
 80158fc:	4621      	mov	r1, r4
 80158fe:	f000 f9c7 	bl	8015c90 <WIDGET_HandleActive>
 8015902:	b003      	add	sp, #12
 8015904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015908:	4630      	mov	r0, r6
 801590a:	f00f ffef 	bl	80258ec <GUI_ALLOC_LockH>
 801590e:	68e4      	ldr	r4, [r4, #12]
 8015910:	9001      	str	r0, [sp, #4]
 8015912:	b164      	cbz	r4, 801592e <WINDOW_Callback+0x106>
 8015914:	4631      	mov	r1, r6
 8015916:	6860      	ldr	r0, [r4, #4]
 8015918:	f005 fa78 	bl	801ae0c <WM__IsAncestorOrSelf>
 801591c:	4631      	mov	r1, r6
 801591e:	b9a8      	cbnz	r0, 801594c <WINDOW_Callback+0x124>
 8015920:	6820      	ldr	r0, [r4, #0]
 8015922:	f005 fa63 	bl	801adec <WM__IsAncestor>
 8015926:	b110      	cbz	r0, 801592e <WINDOW_Callback+0x106>
 8015928:	9b01      	ldr	r3, [sp, #4]
 801592a:	6822      	ldr	r2, [r4, #0]
 801592c:	639a      	str	r2, [r3, #56]	; 0x38
 801592e:	a801      	add	r0, sp, #4
 8015930:	f00f ffee 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015934:	b003      	add	sp, #12
 8015936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801593a:	f8c4 900c 	str.w	r9, [r4, #12]
 801593e:	b003      	add	sp, #12
 8015940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015944:	4620      	mov	r0, r4
 8015946:	f009 f9c1 	bl	801eccc <WM_DefaultProc>
 801594a:	e7a3      	b.n	8015894 <WINDOW_Callback+0x6c>
 801594c:	6860      	ldr	r0, [r4, #4]
 801594e:	f005 fa4d 	bl	801adec <WM__IsAncestor>
 8015952:	2800      	cmp	r0, #0
 8015954:	d0eb      	beq.n	801592e <WINDOW_Callback+0x106>
 8015956:	9b01      	ldr	r3, [sp, #4]
 8015958:	6862      	ldr	r2, [r4, #4]
 801595a:	639a      	str	r2, [r3, #56]	; 0x38
 801595c:	e7e7      	b.n	801592e <WINDOW_Callback+0x106>
 801595e:	4630      	mov	r0, r6
 8015960:	f005 fd08 	bl	801b374 <WM_SetFocusOnNextChild>
 8015964:	e796      	b.n	8015894 <WINDOW_Callback+0x6c>
 8015966:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015968:	60e3      	str	r3, [r4, #12]
 801596a:	e79e      	b.n	80158aa <WINDOW_Callback+0x82>

0801596c <WINDOW_SetBkColor>:
 801596c:	b530      	push	{r4, r5, lr}
 801596e:	4604      	mov	r4, r0
 8015970:	b083      	sub	sp, #12
 8015972:	460d      	mov	r5, r1
 8015974:	f00d fc3a 	bl	80231ec <GUI_Lock>
 8015978:	4620      	mov	r0, r4
 801597a:	f00f ffb7 	bl	80258ec <GUI_ALLOC_LockH>
 801597e:	ab02      	add	r3, sp, #8
 8015980:	6405      	str	r5, [r0, #64]	; 0x40
 8015982:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015986:	4618      	mov	r0, r3
 8015988:	f00f ffc2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801598c:	4620      	mov	r0, r4
 801598e:	f008 fc37 	bl	801e200 <WM_InvalidateWindow>
 8015992:	f00d fc21 	bl	80231d8 <GUI_Unlock>
 8015996:	b003      	add	sp, #12
 8015998:	bd30      	pop	{r4, r5, pc}
 801599a:	bf00      	nop

0801599c <WINDOW_CreateIndirect>:
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	6987      	ldr	r7, [r0, #24]
 80159a2:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 80159a6:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 80159aa:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80159ae:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 80159b2:	8a44      	ldrh	r4, [r0, #18]
 80159b4:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80159b8:	b087      	sub	sp, #28
 80159ba:	4688      	mov	r8, r1
 80159bc:	4493      	add	fp, r2
 80159be:	449a      	add	sl, r3
 80159c0:	f00d fc14 	bl	80231ec <GUI_Lock>
 80159c4:	f107 0318 	add.w	r3, r7, #24
 80159c8:	4f13      	ldr	r7, [pc, #76]	; (8015a18 <WINDOW_CreateIndirect+0x7c>)
 80159ca:	9303      	str	r3, [sp, #12]
 80159cc:	9401      	str	r4, [sp, #4]
 80159ce:	f8cd 8000 	str.w	r8, [sp]
 80159d2:	4658      	mov	r0, fp
 80159d4:	4651      	mov	r1, sl
 80159d6:	4632      	mov	r2, r6
 80159d8:	462b      	mov	r3, r5
 80159da:	9702      	str	r7, [sp, #8]
 80159dc:	f008 fc6c 	bl	801e2b8 <WM_CreateWindowAsChild>
 80159e0:	4604      	mov	r4, r0
 80159e2:	b198      	cbz	r0, 8015a0c <WINDOW_CreateIndirect+0x70>
 80159e4:	f00f ff82 	bl	80258ec <GUI_ALLOC_LockH>
 80159e8:	fa0f f189 	sxth.w	r1, r9
 80159ec:	2210      	movs	r2, #16
 80159ee:	9005      	str	r0, [sp, #20]
 80159f0:	f000 f854 	bl	8015a9c <WIDGET__Init>
 80159f4:	a806      	add	r0, sp, #24
 80159f6:	4a09      	ldr	r2, [pc, #36]	; (8015a1c <WINDOW_CreateIndirect+0x80>)
 80159f8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80159fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80159fe:	6812      	ldr	r2, [r2, #0]
 8015a00:	6359      	str	r1, [r3, #52]	; 0x34
 8015a02:	2100      	movs	r1, #0
 8015a04:	6399      	str	r1, [r3, #56]	; 0x38
 8015a06:	641a      	str	r2, [r3, #64]	; 0x40
 8015a08:	f00f ff82 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015a0c:	f00d fbe4 	bl	80231d8 <GUI_Unlock>
 8015a10:	4620      	mov	r0, r4
 8015a12:	b007      	add	sp, #28
 8015a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a18:	08015829 	.word	0x08015829
 8015a1c:	2000012c 	.word	0x2000012c

08015a20 <WIDGET__RotateRect90>:
 8015a20:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015a24:	b470      	push	{r4, r5, r6}
 8015a26:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8015a2a:	8854      	ldrh	r4, [r2, #2]
 8015a2c:	88d5      	ldrh	r5, [r2, #6]
 8015a2e:	8810      	ldrh	r0, [r2, #0]
 8015a30:	8892      	ldrh	r2, [r2, #4]
 8015a32:	80ca      	strh	r2, [r1, #6]
 8015a34:	1af3      	subs	r3, r6, r3
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	1b5d      	subs	r5, r3, r5
 8015a3a:	1b1b      	subs	r3, r3, r4
 8015a3c:	800d      	strh	r5, [r1, #0]
 8015a3e:	808b      	strh	r3, [r1, #4]
 8015a40:	8048      	strh	r0, [r1, #2]
 8015a42:	bc70      	pop	{r4, r5, r6}
 8015a44:	4770      	bx	lr
 8015a46:	bf00      	nop

08015a48 <WIDGET__GetClientRect>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015a4c:	071b      	lsls	r3, r3, #28
 8015a4e:	b082      	sub	sp, #8
 8015a50:	460c      	mov	r4, r1
 8015a52:	d404      	bmi.n	8015a5e <WIDGET__GetClientRect+0x16>
 8015a54:	4608      	mov	r0, r1
 8015a56:	f006 f8e5 	bl	801bc24 <WM_GetClientRect>
 8015a5a:	b002      	add	sp, #8
 8015a5c:	bd10      	pop	{r4, pc}
 8015a5e:	4668      	mov	r0, sp
 8015a60:	f006 f8e0 	bl	801bc24 <WM_GetClientRect>
 8015a64:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8015a68:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015a6c:	f8bd 2000 	ldrh.w	r2, [sp]
 8015a70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015a74:	8020      	strh	r0, [r4, #0]
 8015a76:	80a1      	strh	r1, [r4, #4]
 8015a78:	8062      	strh	r2, [r4, #2]
 8015a7a:	80e3      	strh	r3, [r4, #6]
 8015a7c:	b002      	add	sp, #8
 8015a7e:	bd10      	pop	{r4, pc}

08015a80 <WIDGET__GetInsideRect>:
 8015a80:	b538      	push	{r3, r4, r5, lr}
 8015a82:	4605      	mov	r5, r0
 8015a84:	460c      	mov	r4, r1
 8015a86:	f008 fae5 	bl	801e054 <WM__GetClientRectWin>
 8015a8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	4621      	mov	r1, r4
 8015a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a96:	f00c bc61 	b.w	802235c <GUI__ReduceRect>
 8015a9a:	bf00      	nop

08015a9c <WIDGET__Init>:
 8015a9c:	4b02      	ldr	r3, [pc, #8]	; (8015aa8 <WIDGET__Init+0xc>)
 8015a9e:	8642      	strh	r2, [r0, #50]	; 0x32
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	8601      	strh	r1, [r0, #48]	; 0x30
 8015aa4:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015aa6:	4770      	bx	lr
 8015aa8:	20000130 	.word	0x20000130

08015aac <WIDGET__FillStringInRect>:
 8015aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ab0:	4c40      	ldr	r4, [pc, #256]	; (8015bb4 <WIDGET__FillStringInRect+0x108>)
 8015ab2:	6825      	ldr	r5, [r4, #0]
 8015ab4:	696e      	ldr	r6, [r5, #20]
 8015ab6:	b085      	sub	sp, #20
 8015ab8:	4607      	mov	r7, r0
 8015aba:	460c      	mov	r4, r1
 8015abc:	4691      	mov	r9, r2
 8015abe:	4698      	mov	r8, r3
 8015ac0:	b306      	cbz	r6, 8015b04 <WIDGET__FillStringInRect+0x58>
 8015ac2:	6808      	ldr	r0, [r1, #0]
 8015ac4:	6849      	ldr	r1, [r1, #4]
 8015ac6:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8015aca:	f8b5 e050 	ldrh.w	lr, [r5, #80]	; 0x50
 8015ace:	466d      	mov	r5, sp
 8015ad0:	c503      	stmia	r5!, {r0, r1}
 8015ad2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015ad6:	f8bd 5000 	ldrh.w	r5, [sp]
 8015ada:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015ade:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015ae2:	441d      	add	r5, r3
 8015ae4:	4472      	add	r2, lr
 8015ae6:	4463      	add	r3, ip
 8015ae8:	448e      	add	lr, r1
 8015aea:	4630      	mov	r0, r6
 8015aec:	4669      	mov	r1, sp
 8015aee:	f8ad 5000 	strh.w	r5, [sp]
 8015af2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015af6:	f8ad 2002 	strh.w	r2, [sp, #2]
 8015afa:	f8ad e006 	strh.w	lr, [sp, #6]
 8015afe:	f00e fdc5 	bl	802468c <GUI_RectsIntersect>
 8015b02:	b128      	cbz	r0, 8015b10 <WIDGET__FillStringInRect+0x64>
 8015b04:	b10f      	cbz	r7, 8015b0a <WIDGET__FillStringInRect+0x5e>
 8015b06:	783b      	ldrb	r3, [r7, #0]
 8015b08:	b92b      	cbnz	r3, 8015b16 <WIDGET__FillStringInRect+0x6a>
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	f00e fa6c 	bl	8023fe8 <GUI_ClearRectEx>
 8015b10:	b005      	add	sp, #20
 8015b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b16:	f00e fcf1 	bl	80244fc <GUI_GetBkColor>
 8015b1a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8015b1e:	d344      	bcc.n	8015baa <WIDGET__FillStringInRect+0xfe>
 8015b20:	2000      	movs	r0, #0
 8015b22:	f00e fe91 	bl	8024848 <GUI_SetTextMode>
 8015b26:	4649      	mov	r1, r9
 8015b28:	4642      	mov	r2, r8
 8015b2a:	a802      	add	r0, sp, #8
 8015b2c:	f00c fb9e 	bl	802226c <GUI__IntersectRects>
 8015b30:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015b34:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015b38:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015b3c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015b40:	3b01      	subs	r3, #1
 8015b42:	f00e fa1b 	bl	8023f7c <GUI_ClearRect>
 8015b46:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8015b4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015b4e:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8015b52:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015b56:	3a01      	subs	r2, #1
 8015b58:	f00e fa10 	bl	8023f7c <GUI_ClearRect>
 8015b5c:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8015b60:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8015b64:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015b68:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	f00e fa05 	bl	8023f7c <GUI_ClearRect>
 8015b72:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8015b76:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015b7a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015b7e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015b82:	3101      	adds	r1, #1
 8015b84:	f00e f9fa 	bl	8023f7c <GUI_ClearRect>
 8015b88:	4648      	mov	r0, r9
 8015b8a:	f006 fd69 	bl	801c660 <WM_SetUserClipRect>
 8015b8e:	f9b8 1000 	ldrsh.w	r1, [r8]
 8015b92:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8015b96:	4604      	mov	r4, r0
 8015b98:	4638      	mov	r0, r7
 8015b9a:	f00d fe89 	bl	80238b0 <GUI_DispStringAt>
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	f006 fd5e 	bl	801c660 <WM_SetUserClipRect>
 8015ba4:	b005      	add	sp, #20
 8015ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015baa:	2002      	movs	r0, #2
 8015bac:	f00e fe4c 	bl	8024848 <GUI_SetTextMode>
 8015bb0:	e7ea      	b.n	8015b88 <WIDGET__FillStringInRect+0xdc>
 8015bb2:	bf00      	nop
 8015bb4:	20000280 	.word	0x20000280

08015bb8 <WIDGET_OrState>:
 8015bb8:	b530      	push	{r4, r5, lr}
 8015bba:	4604      	mov	r4, r0
 8015bbc:	b083      	sub	sp, #12
 8015bbe:	460d      	mov	r5, r1
 8015bc0:	b908      	cbnz	r0, 8015bc6 <WIDGET_OrState+0xe>
 8015bc2:	b003      	add	sp, #12
 8015bc4:	bd30      	pop	{r4, r5, pc}
 8015bc6:	f00d fb11 	bl	80231ec <GUI_Lock>
 8015bca:	4620      	mov	r0, r4
 8015bcc:	f00f fe8e 	bl	80258ec <GUI_ALLOC_LockH>
 8015bd0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015bd2:	9001      	str	r0, [sp, #4]
 8015bd4:	ea05 0203 	and.w	r2, r5, r3
 8015bd8:	42aa      	cmp	r2, r5
 8015bda:	d004      	beq.n	8015be6 <WIDGET_OrState+0x2e>
 8015bdc:	431d      	orrs	r5, r3
 8015bde:	8645      	strh	r5, [r0, #50]	; 0x32
 8015be0:	4620      	mov	r0, r4
 8015be2:	f008 fb0d 	bl	801e200 <WM_InvalidateWindow>
 8015be6:	a801      	add	r0, sp, #4
 8015be8:	f00f fe92 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015bec:	f00d faf4 	bl	80231d8 <GUI_Unlock>
 8015bf0:	b003      	add	sp, #12
 8015bf2:	bd30      	pop	{r4, r5, pc}

08015bf4 <WIDGET_AndState>:
 8015bf4:	b530      	push	{r4, r5, lr}
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	460d      	mov	r5, r1
 8015bfc:	b908      	cbnz	r0, 8015c02 <WIDGET_AndState+0xe>
 8015bfe:	b003      	add	sp, #12
 8015c00:	bd30      	pop	{r4, r5, pc}
 8015c02:	f00d faf3 	bl	80231ec <GUI_Lock>
 8015c06:	4620      	mov	r0, r4
 8015c08:	f00f fe70 	bl	80258ec <GUI_ALLOC_LockH>
 8015c0c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015c0e:	9001      	str	r0, [sp, #4]
 8015c10:	ea23 0505 	bic.w	r5, r3, r5
 8015c14:	42ab      	cmp	r3, r5
 8015c16:	d003      	beq.n	8015c20 <WIDGET_AndState+0x2c>
 8015c18:	8645      	strh	r5, [r0, #50]	; 0x32
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f008 faf0 	bl	801e200 <WM_InvalidateWindow>
 8015c20:	a801      	add	r0, sp, #4
 8015c22:	f00f fe75 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015c26:	f00d fad7 	bl	80231d8 <GUI_Unlock>
 8015c2a:	b003      	add	sp, #12
 8015c2c:	bd30      	pop	{r4, r5, pc}
 8015c2e:	bf00      	nop

08015c30 <WIDGET_SetFocusable>:
 8015c30:	b510      	push	{r4, lr}
 8015c32:	4604      	mov	r4, r0
 8015c34:	b082      	sub	sp, #8
 8015c36:	b9c9      	cbnz	r1, 8015c6c <WIDGET_SetFocusable+0x3c>
 8015c38:	b908      	cbnz	r0, 8015c3e <WIDGET_SetFocusable+0xe>
 8015c3a:	b002      	add	sp, #8
 8015c3c:	bd10      	pop	{r4, pc}
 8015c3e:	f00d fad5 	bl	80231ec <GUI_Lock>
 8015c42:	4620      	mov	r0, r4
 8015c44:	f00f fe52 	bl	80258ec <GUI_ALLOC_LockH>
 8015c48:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015c4a:	9001      	str	r0, [sp, #4]
 8015c4c:	f023 0210 	bic.w	r2, r3, #16
 8015c50:	b292      	uxth	r2, r2
 8015c52:	4293      	cmp	r3, r2
 8015c54:	d003      	beq.n	8015c5e <WIDGET_SetFocusable+0x2e>
 8015c56:	8642      	strh	r2, [r0, #50]	; 0x32
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f008 fad1 	bl	801e200 <WM_InvalidateWindow>
 8015c5e:	a801      	add	r0, sp, #4
 8015c60:	f00f fe56 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015c64:	f00d fab8 	bl	80231d8 <GUI_Unlock>
 8015c68:	b002      	add	sp, #8
 8015c6a:	bd10      	pop	{r4, pc}
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d0e4      	beq.n	8015c3a <WIDGET_SetFocusable+0xa>
 8015c70:	f00d fabc 	bl	80231ec <GUI_Lock>
 8015c74:	4620      	mov	r0, r4
 8015c76:	f00f fe39 	bl	80258ec <GUI_ALLOC_LockH>
 8015c7a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015c7c:	9001      	str	r0, [sp, #4]
 8015c7e:	06da      	lsls	r2, r3, #27
 8015c80:	d4ed      	bmi.n	8015c5e <WIDGET_SetFocusable+0x2e>
 8015c82:	f043 0310 	orr.w	r3, r3, #16
 8015c86:	8643      	strh	r3, [r0, #50]	; 0x32
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f008 fab9 	bl	801e200 <WM_InvalidateWindow>
 8015c8e:	e7e6      	b.n	8015c5e <WIDGET_SetFocusable+0x2e>

08015c90 <WIDGET_HandleActive>:
 8015c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c94:	460d      	mov	r5, r1
 8015c96:	b084      	sub	sp, #16
 8015c98:	4607      	mov	r7, r0
 8015c9a:	b920      	cbnz	r0, 8015ca6 <WIDGET_HandleActive+0x16>
 8015c9c:	2401      	movs	r4, #1
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	b004      	add	sp, #16
 8015ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca6:	f00f fe21 	bl	80258ec <GUI_ALLOC_LockH>
 8015caa:	682b      	ldr	r3, [r5, #0]
 8015cac:	9002      	str	r0, [sp, #8]
 8015cae:	2b16      	cmp	r3, #22
 8015cb0:	4606      	mov	r6, r0
 8015cb2:	f000 8090 	beq.w	8015dd6 <WIDGET_HandleActive+0x146>
 8015cb6:	dd2a      	ble.n	8015d0e <WIDGET_HandleActive+0x7e>
 8015cb8:	2b1f      	cmp	r3, #31
 8015cba:	d07c      	beq.n	8015db6 <WIDGET_HandleActive+0x126>
 8015cbc:	dd51      	ble.n	8015d62 <WIDGET_HandleActive+0xd2>
 8015cbe:	2b31      	cmp	r3, #49	; 0x31
 8015cc0:	d037      	beq.n	8015d32 <WIDGET_HandleActive+0xa2>
 8015cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015cc6:	d148      	bne.n	8015d5a <WIDGET_HandleActive+0xca>
 8015cc8:	68eb      	ldr	r3, [r5, #12]
 8015cca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015ccc:	6819      	ldr	r1, [r3, #0]
 8015cce:	6815      	ldr	r5, [r2, #0]
 8015cd0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015cd2:	a802      	add	r0, sp, #8
 8015cd4:	1a6d      	subs	r5, r5, r1
 8015cd6:	f00f fe1b 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015cda:	f00d fa87 	bl	80231ec <GUI_Lock>
 8015cde:	4638      	mov	r0, r7
 8015ce0:	f00f fe04 	bl	80258ec <GUI_ALLOC_LockH>
 8015ce4:	ac04      	add	r4, sp, #16
 8015ce6:	4269      	negs	r1, r5
 8015ce8:	9500      	str	r5, [sp, #0]
 8015cea:	f844 0d04 	str.w	r0, [r4, #-4]!
 8015cee:	462b      	mov	r3, r5
 8015cf0:	460a      	mov	r2, r1
 8015cf2:	f005 f8e5 	bl	801aec0 <WM__UpdateChildPositions>
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f00f fe0a 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015cfc:	f00d fa6c 	bl	80231d8 <GUI_Unlock>
 8015d00:	4638      	mov	r0, r7
 8015d02:	f008 fa7d 	bl	801e200 <WM_InvalidateWindow>
 8015d06:	9e02      	ldr	r6, [sp, #8]
 8015d08:	2400      	movs	r4, #0
 8015d0a:	b95e      	cbnz	r6, 8015d24 <WIDGET_HandleActive+0x94>
 8015d0c:	e7c7      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015d0e:	2b11      	cmp	r3, #17
 8015d10:	d057      	beq.n	8015dc2 <WIDGET_HandleActive+0x132>
 8015d12:	dd3c      	ble.n	8015d8e <WIDGET_HandleActive+0xfe>
 8015d14:	2b14      	cmp	r3, #20
 8015d16:	d011      	beq.n	8015d3c <WIDGET_HandleActive+0xac>
 8015d18:	2b15      	cmp	r3, #21
 8015d1a:	d11e      	bne.n	8015d5a <WIDGET_HandleActive+0xca>
 8015d1c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8015d20:	60eb      	str	r3, [r5, #12]
 8015d22:	2400      	movs	r4, #0
 8015d24:	a802      	add	r0, sp, #8
 8015d26:	f00f fdf3 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	b004      	add	sp, #16
 8015d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d32:	2400      	movs	r4, #0
 8015d34:	60ec      	str	r4, [r5, #12]
 8015d36:	2e00      	cmp	r6, #0
 8015d38:	d1f4      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015d3a:	e7b0      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015d3c:	68ec      	ldr	r4, [r5, #12]
 8015d3e:	4621      	mov	r1, r4
 8015d40:	f008 f988 	bl	801e054 <WM__GetClientRectWin>
 8015d44:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015d46:	4620      	mov	r0, r4
 8015d48:	4621      	mov	r1, r4
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	f00c fb06 	bl	802235c <GUI__ReduceRect>
 8015d50:	9e02      	ldr	r6, [sp, #8]
 8015d52:	2400      	movs	r4, #0
 8015d54:	2e00      	cmp	r6, #0
 8015d56:	d1e5      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015d58:	e7a1      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015d5a:	2401      	movs	r4, #1
 8015d5c:	2e00      	cmp	r6, #0
 8015d5e:	d1e1      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015d60:	e79d      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015d62:	2b1e      	cmp	r3, #30
 8015d64:	d1f9      	bne.n	8015d5a <WIDGET_HandleActive+0xca>
 8015d66:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8015d6a:	f1b8 0f01 	cmp.w	r8, #1
 8015d6e:	d136      	bne.n	8015dde <WIDGET_HandleActive+0x14e>
 8015d70:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015d72:	f003 0410 	and.w	r4, r3, #16
 8015d76:	b2a4      	uxth	r4, r4
 8015d78:	2c00      	cmp	r4, #0
 8015d7a:	d153      	bne.n	8015e24 <WIDGET_HandleActive+0x194>
 8015d7c:	a802      	add	r0, sp, #8
 8015d7e:	f00f fdc7 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015d82:	9e02      	ldr	r6, [sp, #8]
 8015d84:	f8c5 800c 	str.w	r8, [r5, #12]
 8015d88:	2e00      	cmp	r6, #0
 8015d8a:	d1cb      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015d8c:	e787      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015d8e:	2b0d      	cmp	r3, #13
 8015d90:	d1e3      	bne.n	8015d5a <WIDGET_HandleActive+0xca>
 8015d92:	68eb      	ldr	r3, [r5, #12]
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d0df      	beq.n	8015d5a <WIDGET_HandleActive+0xca>
 8015d9a:	7a1b      	ldrb	r3, [r3, #8]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d0dc      	beq.n	8015d5a <WIDGET_HandleActive+0xca>
 8015da0:	a802      	add	r0, sp, #8
 8015da2:	f00f fdb5 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015da6:	4638      	mov	r0, r7
 8015da8:	f006 fe34 	bl	801ca14 <WM_BringToTop>
 8015dac:	9e02      	ldr	r6, [sp, #8]
 8015dae:	2400      	movs	r4, #0
 8015db0:	2e00      	cmp	r6, #0
 8015db2:	d1b7      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015db4:	e773      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015db6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015db8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015dbc:	60eb      	str	r3, [r5, #12]
 8015dbe:	2400      	movs	r4, #0
 8015dc0:	e7b0      	b.n	8015d24 <WIDGET_HandleActive+0x94>
 8015dc2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015dc4:	06db      	lsls	r3, r3, #27
 8015dc6:	d504      	bpl.n	8015dd2 <WIDGET_HandleActive+0x142>
 8015dc8:	68eb      	ldr	r3, [r5, #12]
 8015dca:	b113      	cbz	r3, 8015dd2 <WIDGET_HandleActive+0x142>
 8015dcc:	7a1b      	ldrb	r3, [r3, #8]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d13e      	bne.n	8015e50 <WIDGET_HandleActive+0x1c0>
 8015dd2:	2401      	movs	r4, #1
 8015dd4:	e7a6      	b.n	8015d24 <WIDGET_HandleActive+0x94>
 8015dd6:	68eb      	ldr	r3, [r5, #12]
 8015dd8:	8603      	strh	r3, [r0, #48]	; 0x30
 8015dda:	2400      	movs	r4, #0
 8015ddc:	e7a2      	b.n	8015d24 <WIDGET_HandleActive+0x94>
 8015dde:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8015de0:	f00d fa04 	bl	80231ec <GUI_Lock>
 8015de4:	4638      	mov	r0, r7
 8015de6:	f00f fd81 	bl	80258ec <GUI_ALLOC_LockH>
 8015dea:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015dec:	9003      	str	r0, [sp, #12]
 8015dee:	f024 0401 	bic.w	r4, r4, #1
 8015df2:	429c      	cmp	r4, r3
 8015df4:	d003      	beq.n	8015dfe <WIDGET_HandleActive+0x16e>
 8015df6:	8644      	strh	r4, [r0, #50]	; 0x32
 8015df8:	4638      	mov	r0, r7
 8015dfa:	f008 fa01 	bl	801e200 <WM_InvalidateWindow>
 8015dfe:	a803      	add	r0, sp, #12
 8015e00:	f00f fd86 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015e04:	2409      	movs	r4, #9
 8015e06:	f00d f9e7 	bl	80231d8 <GUI_Unlock>
 8015e0a:	a802      	add	r0, sp, #8
 8015e0c:	f00f fd80 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015e10:	4621      	mov	r1, r4
 8015e12:	4638      	mov	r0, r7
 8015e14:	f006 faf8 	bl	801c408 <WM_NotifyParent>
 8015e18:	9e02      	ldr	r6, [sp, #8]
 8015e1a:	2400      	movs	r4, #0
 8015e1c:	60ec      	str	r4, [r5, #12]
 8015e1e:	2e00      	cmp	r6, #0
 8015e20:	d180      	bne.n	8015d24 <WIDGET_HandleActive+0x94>
 8015e22:	e73c      	b.n	8015c9e <WIDGET_HandleActive+0xe>
 8015e24:	f043 0401 	orr.w	r4, r3, #1
 8015e28:	f00d f9e0 	bl	80231ec <GUI_Lock>
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	f00f fd5d 	bl	80258ec <GUI_ALLOC_LockH>
 8015e32:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8015e34:	9003      	str	r0, [sp, #12]
 8015e36:	42a3      	cmp	r3, r4
 8015e38:	d003      	beq.n	8015e42 <WIDGET_HandleActive+0x1b2>
 8015e3a:	8644      	strh	r4, [r0, #50]	; 0x32
 8015e3c:	4638      	mov	r0, r7
 8015e3e:	f008 f9df 	bl	801e200 <WM_InvalidateWindow>
 8015e42:	a803      	add	r0, sp, #12
 8015e44:	f00f fd64 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015e48:	2408      	movs	r4, #8
 8015e4a:	f00d f9c5 	bl	80231d8 <GUI_Unlock>
 8015e4e:	e7dc      	b.n	8015e0a <WIDGET_HandleActive+0x17a>
 8015e50:	a802      	add	r0, sp, #8
 8015e52:	f00f fd5d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015e56:	4638      	mov	r0, r7
 8015e58:	f006 fb56 	bl	801c508 <WM_SetFocus>
 8015e5c:	9e02      	ldr	r6, [sp, #8]
 8015e5e:	2401      	movs	r4, #1
 8015e60:	2e00      	cmp	r6, #0
 8015e62:	f47f af5f 	bne.w	8015d24 <WIDGET_HandleActive+0x94>
 8015e66:	e71a      	b.n	8015c9e <WIDGET_HandleActive+0xe>

08015e68 <WIDGET__SetScrollState>:
 8015e68:	b570      	push	{r4, r5, r6, lr}
 8015e6a:	460c      	mov	r4, r1
 8015e6c:	21fe      	movs	r1, #254	; 0xfe
 8015e6e:	4615      	mov	r5, r2
 8015e70:	4606      	mov	r6, r0
 8015e72:	f005 ff61 	bl	801bd38 <WM_GetDialogItem>
 8015e76:	4621      	mov	r1, r4
 8015e78:	f006 fbb4 	bl	801c5e4 <WM_SetScrollState>
 8015e7c:	4630      	mov	r0, r6
 8015e7e:	21ff      	movs	r1, #255	; 0xff
 8015e80:	f005 ff5a 	bl	801bd38 <WM_GetDialogItem>
 8015e84:	4629      	mov	r1, r5
 8015e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e8a:	f006 bbab 	b.w	801c5e4 <WM_SetScrollState>
 8015e8e:	bf00      	nop

08015e90 <WIDGET__DrawTriangle>:
 8015e90:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8015e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e96:	460d      	mov	r5, r1
 8015e98:	0701      	lsls	r1, r0, #28
 8015e9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015e9e:	4617      	mov	r7, r2
 8015ea0:	461c      	mov	r4, r3
 8015ea2:	d411      	bmi.n	8015ec8 <WIDGET__DrawTriangle+0x38>
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	bfa8      	it	ge
 8015ea8:	ebc3 0602 	rsbge	r6, r3, r2
 8015eac:	db1c      	blt.n	8015ee8 <WIDGET__DrawTriangle+0x58>
 8015eae:	4628      	mov	r0, r5
 8015eb0:	4631      	mov	r1, r6
 8015eb2:	19e2      	adds	r2, r4, r7
 8015eb4:	3c01      	subs	r4, #1
 8015eb6:	f00d fb5b 	bl	8023570 <GUI_DrawVLine>
 8015eba:	1c63      	adds	r3, r4, #1
 8015ebc:	4445      	add	r5, r8
 8015ebe:	f106 0601 	add.w	r6, r6, #1
 8015ec2:	d1f4      	bne.n	8015eae <WIDGET__DrawTriangle+0x1e>
 8015ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	dbfb      	blt.n	8015ec4 <WIDGET__DrawTriangle+0x34>
 8015ecc:	1ad6      	subs	r6, r2, r3
 8015ece:	19e2      	adds	r2, r4, r7
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	4631      	mov	r1, r6
 8015ed4:	3c01      	subs	r4, #1
 8015ed6:	f00d faf5 	bl	80234c4 <GUI_DrawHLine>
 8015eda:	1c62      	adds	r2, r4, #1
 8015edc:	4445      	add	r5, r8
 8015ede:	f106 0601 	add.w	r6, r6, #1
 8015ee2:	d1f4      	bne.n	8015ece <WIDGET__DrawTriangle+0x3e>
 8015ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eec <WIDGET__EFFECT_DrawDown>:
 8015eec:	b570      	push	{r4, r5, r6, lr}
 8015eee:	4604      	mov	r4, r0
 8015ef0:	b084      	sub	sp, #16
 8015ef2:	4668      	mov	r0, sp
 8015ef4:	f005 fe96 	bl	801bc24 <WM_GetClientRect>
 8015ef8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015efa:	071b      	lsls	r3, r3, #28
 8015efc:	d517      	bpl.n	8015f2e <WIDGET__EFFECT_DrawDown+0x42>
 8015efe:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8015f02:	f9b4 3000 	ldrsh.w	r3, [r4]
 8015f06:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015f0a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8015f0e:	f8bd 6000 	ldrh.w	r6, [sp]
 8015f12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015f16:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015f1a:	1aeb      	subs	r3, r5, r3
 8015f1c:	b29b      	uxth	r3, r3
 8015f1e:	1a59      	subs	r1, r3, r1
 8015f20:	1a1b      	subs	r3, r3, r0
 8015f22:	f8ad 1000 	strh.w	r1, [sp]
 8015f26:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015f2a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015f2e:	f104 0308 	add.w	r3, r4, #8
 8015f32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015f38:	ab02      	add	r3, sp, #8
 8015f3a:	6815      	ldr	r5, [r2, #0]
 8015f3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f40:	4619      	mov	r1, r3
 8015f42:	4620      	mov	r0, r4
 8015f44:	f004 ff7e 	bl	801ae44 <WM__Screen2Client>
 8015f48:	f9bd 2000 	ldrsh.w	r2, [sp]
 8015f4c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8015f50:	442a      	add	r2, r5
 8015f52:	429a      	cmp	r2, r3
 8015f54:	dc14      	bgt.n	8015f80 <WIDGET__EFFECT_DrawDown+0x94>
 8015f56:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8015f5a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015f5e:	1b52      	subs	r2, r2, r5
 8015f60:	429a      	cmp	r2, r3
 8015f62:	db0d      	blt.n	8015f80 <WIDGET__EFFECT_DrawDown+0x94>
 8015f64:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8015f68:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015f6c:	442a      	add	r2, r5
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	dc06      	bgt.n	8015f80 <WIDGET__EFFECT_DrawDown+0x94>
 8015f72:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015f76:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015f7a:	1b55      	subs	r5, r2, r5
 8015f7c:	429d      	cmp	r5, r3
 8015f7e:	da03      	bge.n	8015f88 <WIDGET__EFFECT_DrawDown+0x9c>
 8015f80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015f82:	4668      	mov	r0, sp
 8015f84:	691b      	ldr	r3, [r3, #16]
 8015f86:	4798      	blx	r3
 8015f88:	b004      	add	sp, #16
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}

08015f8c <WIDGET_SetEffect>:
 8015f8c:	b500      	push	{lr}
 8015f8e:	b085      	sub	sp, #20
 8015f90:	2200      	movs	r2, #0
 8015f92:	9103      	str	r1, [sp, #12]
 8015f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015f98:	4669      	mov	r1, sp
 8015f9a:	9202      	str	r2, [sp, #8]
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	f008 f83d 	bl	801e01c <WM_SendMessage>
 8015fa2:	b005      	add	sp, #20
 8015fa4:	f85d fb04 	ldr.w	pc, [sp], #4

08015fa8 <_GetNextVisibleItem>:
 8015fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015faa:	b083      	sub	sp, #12
 8015fac:	4607      	mov	r7, r0
 8015fae:	f00f fc9d 	bl	80258ec <GUI_ALLOC_LockH>
 8015fb2:	8b03      	ldrh	r3, [r0, #24]
 8015fb4:	9000      	str	r0, [sp, #0]
 8015fb6:	079c      	lsls	r4, r3, #30
 8015fb8:	d50d      	bpl.n	8015fd6 <_GetNextVisibleItem+0x2e>
 8015fba:	6845      	ldr	r5, [r0, #4]
 8015fbc:	4668      	mov	r0, sp
 8015fbe:	f00f fca7 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015fc2:	bb0d      	cbnz	r5, 8016008 <_GetNextVisibleItem+0x60>
 8015fc4:	4638      	mov	r0, r7
 8015fc6:	b003      	add	sp, #12
 8015fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fca:	0792      	lsls	r2, r2, #30
 8015fcc:	d42b      	bmi.n	8016026 <_GetNextVisibleItem+0x7e>
 8015fce:	a801      	add	r0, sp, #4
 8015fd0:	f00f fc9e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015fd4:	9800      	ldr	r0, [sp, #0]
 8015fd6:	6845      	ldr	r5, [r0, #4]
 8015fd8:	4668      	mov	r0, sp
 8015fda:	b915      	cbnz	r5, 8015fe2 <_GetNextVisibleItem+0x3a>
 8015fdc:	f00f fc98 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015fe0:	e7f0      	b.n	8015fc4 <_GetNextVisibleItem+0x1c>
 8015fe2:	f00f fc95 	bl	8025910 <GUI_ALLOC_UnlockH>
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	f00f fc80 	bl	80258ec <GUI_ALLOC_LockH>
 8015fec:	9000      	str	r0, [sp, #0]
 8015fee:	4628      	mov	r0, r5
 8015ff0:	f00f fc7c 	bl	80258ec <GUI_ALLOC_LockH>
 8015ff4:	7f06      	ldrb	r6, [r0, #28]
 8015ff6:	9001      	str	r0, [sp, #4]
 8015ff8:	6884      	ldr	r4, [r0, #8]
 8015ffa:	a801      	add	r0, sp, #4
 8015ffc:	b93c      	cbnz	r4, 801600e <_GetNextVisibleItem+0x66>
 8015ffe:	f00f fc87 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016002:	4668      	mov	r0, sp
 8016004:	f00f fc84 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016008:	4628      	mov	r0, r5
 801600a:	b003      	add	sp, #12
 801600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801600e:	f00f fc7f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016012:	4620      	mov	r0, r4
 8016014:	f00f fc6a 	bl	80258ec <GUI_ALLOC_LockH>
 8016018:	7f03      	ldrb	r3, [r0, #28]
 801601a:	9001      	str	r0, [sp, #4]
 801601c:	42b3      	cmp	r3, r6
 801601e:	da03      	bge.n	8016028 <_GetNextVisibleItem+0x80>
 8016020:	8b02      	ldrh	r2, [r0, #24]
 8016022:	07d1      	lsls	r1, r2, #31
 8016024:	d4d1      	bmi.n	8015fca <_GetNextVisibleItem+0x22>
 8016026:	461e      	mov	r6, r3
 8016028:	2e00      	cmp	r6, #0
 801602a:	d1e5      	bne.n	8015ff8 <_GetNextVisibleItem+0x50>
 801602c:	a801      	add	r0, sp, #4
 801602e:	e7e6      	b.n	8015ffe <_GetNextVisibleItem+0x56>

08016030 <_GetPrevVisibleItem>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	b082      	sub	sp, #8
 8016036:	4607      	mov	r7, r0
 8016038:	f00f fc58 	bl	80258ec <GUI_ALLOC_LockH>
 801603c:	ae02      	add	r6, sp, #8
 801603e:	f890 801c 	ldrb.w	r8, [r0, #28]
 8016042:	f846 0d04 	str.w	r0, [r6, #-4]!
 8016046:	4603      	mov	r3, r0
 8016048:	2500      	movs	r5, #0
 801604a:	689c      	ldr	r4, [r3, #8]
 801604c:	4630      	mov	r0, r6
 801604e:	b944      	cbnz	r4, 8016062 <_GetPrevVisibleItem+0x32>
 8016050:	f00f fc5e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016054:	2d00      	cmp	r5, #0
 8016056:	bf14      	ite	ne
 8016058:	4628      	movne	r0, r5
 801605a:	4638      	moveq	r0, r7
 801605c:	b002      	add	sp, #8
 801605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016062:	f00f fc55 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016066:	4620      	mov	r0, r4
 8016068:	f00f fc40 	bl	80258ec <GUI_ALLOC_LockH>
 801606c:	9001      	str	r0, [sp, #4]
 801606e:	b915      	cbnz	r5, 8016076 <_GetPrevVisibleItem+0x46>
 8016070:	f890 801c 	ldrb.w	r8, [r0, #28]
 8016074:	4625      	mov	r5, r4
 8016076:	8b02      	ldrh	r2, [r0, #24]
 8016078:	07d3      	lsls	r3, r2, #31
 801607a:	d507      	bpl.n	801608c <_GetPrevVisibleItem+0x5c>
 801607c:	7f01      	ldrb	r1, [r0, #28]
 801607e:	4588      	cmp	r8, r1
 8016080:	dd04      	ble.n	801608c <_GetPrevVisibleItem+0x5c>
 8016082:	f012 0f02 	tst.w	r2, #2
 8016086:	bf08      	it	eq
 8016088:	4625      	moveq	r5, r4
 801608a:	4688      	mov	r8, r1
 801608c:	4603      	mov	r3, r0
 801608e:	e7dc      	b.n	801604a <_GetPrevVisibleItem+0x1a>

08016090 <TREEVIEW_OwnerDraw>:
 8016090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016094:	6843      	ldr	r3, [r0, #4]
 8016096:	3b01      	subs	r3, #1
 8016098:	2b1a      	cmp	r3, #26
 801609a:	b084      	sub	sp, #16
 801609c:	4604      	mov	r4, r0
 801609e:	d856      	bhi.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 80160a0:	2101      	movs	r1, #1
 80160a2:	4aa6      	ldr	r2, [pc, #664]	; (801633c <TREEVIEW_OwnerDraw+0x2ac>)
 80160a4:	fa01 f303 	lsl.w	r3, r1, r3
 80160a8:	401a      	ands	r2, r3
 80160aa:	2a00      	cmp	r2, #0
 80160ac:	d153      	bne.n	8016156 <TREEVIEW_OwnerDraw+0xc6>
 80160ae:	0159      	lsls	r1, r3, #5
 80160b0:	f100 8088 	bmi.w	80161c4 <TREEVIEW_OwnerDraw+0x134>
 80160b4:	f013 7000 	ands.w	r0, r3, #33554432	; 0x2000000
 80160b8:	d04a      	beq.n	8016150 <TREEVIEW_OwnerDraw+0xc0>
 80160ba:	6a23      	ldr	r3, [r4, #32]
 80160bc:	6818      	ldr	r0, [r3, #0]
 80160be:	f00f fc15 	bl	80258ec <GUI_ALLOC_LockH>
 80160c2:	aa04      	add	r2, sp, #16
 80160c4:	8a84      	ldrh	r4, [r0, #20]
 80160c6:	f842 0d08 	str.w	r0, [r2, #-8]!
 80160ca:	4610      	mov	r0, r2
 80160cc:	f00f fc20 	bl	8025910 <GUI_ALLOC_UnlockH>
 80160d0:	4620      	mov	r0, r4
 80160d2:	e03d      	b.n	8016150 <TREEVIEW_OwnerDraw+0xc0>
 80160d4:	07ab      	lsls	r3, r5, #30
 80160d6:	bf4c      	ite	mi
 80160d8:	68b8      	ldrmi	r0, [r7, #8]
 80160da:	6838      	ldrpl	r0, [r7, #0]
 80160dc:	f00e fb22 	bl	8024724 <GUI_SetColor>
 80160e0:	6963      	ldr	r3, [r4, #20]
 80160e2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80160e6:	8a79      	ldrh	r1, [r7, #18]
 80160e8:	6922      	ldr	r2, [r4, #16]
 80160ea:	69a3      	ldr	r3, [r4, #24]
 80160ec:	f8ad 2008 	strh.w	r2, [sp, #8]
 80160f0:	a802      	add	r0, sp, #8
 80160f2:	1e4a      	subs	r2, r1, #1
 80160f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80160f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80160fc:	f00d fa90 	bl	8023620 <GUI_FillRectEx>
 8016100:	8a3a      	ldrh	r2, [r7, #16]
 8016102:	8a79      	ldrh	r1, [r7, #18]
 8016104:	8afb      	ldrh	r3, [r7, #22]
 8016106:	f8ad 300e 	strh.w	r3, [sp, #14]
 801610a:	3a01      	subs	r2, #1
 801610c:	a802      	add	r0, sp, #8
 801610e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016112:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016116:	f00d fa83 	bl	8023620 <GUI_FillRectEx>
 801611a:	8aba      	ldrh	r2, [r7, #20]
 801611c:	69a3      	ldr	r3, [r4, #24]
 801611e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016122:	a802      	add	r0, sp, #8
 8016124:	1c53      	adds	r3, r2, #1
 8016126:	f8ad 3008 	strh.w	r3, [sp, #8]
 801612a:	f00d fa79 	bl	8023620 <GUI_FillRectEx>
 801612e:	8af9      	ldrh	r1, [r7, #22]
 8016130:	6920      	ldr	r0, [r4, #16]
 8016132:	69a2      	ldr	r2, [r4, #24]
 8016134:	69e3      	ldr	r3, [r4, #28]
 8016136:	f8ad 0008 	strh.w	r0, [sp, #8]
 801613a:	3101      	adds	r1, #1
 801613c:	a802      	add	r0, sp, #8
 801613e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016142:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016146:	f8ad 300e 	strh.w	r3, [sp, #14]
 801614a:	f00d fa69 	bl	8023620 <GUI_FillRectEx>
 801614e:	2000      	movs	r0, #0
 8016150:	b004      	add	sp, #16
 8016152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016156:	6800      	ldr	r0, [r0, #0]
 8016158:	6a27      	ldr	r7, [r4, #32]
 801615a:	f00f fbc7 	bl	80258ec <GUI_ALLOC_LockH>
 801615e:	4603      	mov	r3, r0
 8016160:	a804      	add	r0, sp, #16
 8016162:	f8b3 509c 	ldrh.w	r5, [r3, #156]	; 0x9c
 8016166:	f840 3d0c 	str.w	r3, [r0, #-12]!
 801616a:	f8b3 80c0 	ldrh.w	r8, [r3, #192]	; 0xc0
 801616e:	f8b3 60c2 	ldrh.w	r6, [r3, #194]	; 0xc2
 8016172:	f00f fbcd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016176:	6863      	ldr	r3, [r4, #4]
 8016178:	3b05      	subs	r3, #5
 801617a:	2b0f      	cmp	r3, #15
 801617c:	d8e7      	bhi.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 801617e:	a201      	add	r2, pc, #4	; (adr r2, 8016184 <TREEVIEW_OwnerDraw+0xf4>)
 8016180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016184:	080160d5 	.word	0x080160d5
 8016188:	08016267 	.word	0x08016267
 801618c:	0801614f 	.word	0x0801614f
 8016190:	0801614f 	.word	0x0801614f
 8016194:	0801614f 	.word	0x0801614f
 8016198:	0801614f 	.word	0x0801614f
 801619c:	0801614f 	.word	0x0801614f
 80161a0:	0801614f 	.word	0x0801614f
 80161a4:	0801614f 	.word	0x0801614f
 80161a8:	0801614f 	.word	0x0801614f
 80161ac:	0801614f 	.word	0x0801614f
 80161b0:	0801614f 	.word	0x0801614f
 80161b4:	0801614f 	.word	0x0801614f
 80161b8:	0801624d 	.word	0x0801624d
 80161bc:	0801614f 	.word	0x0801614f
 80161c0:	080161f1 	.word	0x080161f1
 80161c4:	6800      	ldr	r0, [r0, #0]
 80161c6:	f00f fb91 	bl	80258ec <GUI_ALLOC_LockH>
 80161ca:	6a23      	ldr	r3, [r4, #32]
 80161cc:	9000      	str	r0, [sp, #0]
 80161ce:	6818      	ldr	r0, [r3, #0]
 80161d0:	f00f fb8c 	bl	80258ec <GUI_ALLOC_LockH>
 80161d4:	4604      	mov	r4, r0
 80161d6:	9001      	str	r0, [sp, #4]
 80161d8:	8ac0      	ldrh	r0, [r0, #22]
 80161da:	2800      	cmp	r0, #0
 80161dc:	d071      	beq.n	80162c2 <TREEVIEW_OwnerDraw+0x232>
 80161de:	4604      	mov	r4, r0
 80161e0:	a801      	add	r0, sp, #4
 80161e2:	f00f fb95 	bl	8025910 <GUI_ALLOC_UnlockH>
 80161e6:	4668      	mov	r0, sp
 80161e8:	f00f fb92 	bl	8025910 <GUI_ALLOC_UnlockH>
 80161ec:	4620      	mov	r0, r4
 80161ee:	e7af      	b.n	8016150 <TREEVIEW_OwnerDraw+0xc0>
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f00e fa97 	bl	8024724 <GUI_SetColor>
 80161f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80161fa:	b19b      	cbz	r3, 8016224 <TREEVIEW_OwnerDraw+0x194>
 80161fc:	463d      	mov	r5, r7
 80161fe:	2600      	movs	r6, #0
 8016200:	f9b5 0026 	ldrsh.w	r0, [r5, #38]	; 0x26
 8016204:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 8016208:	4290      	cmp	r0, r2
 801620a:	4601      	mov	r1, r0
 801620c:	d077      	beq.n	80162fe <TREEVIEW_OwnerDraw+0x26e>
 801620e:	f9b5 002c 	ldrsh.w	r0, [r5, #44]	; 0x2c
 8016212:	f00d f957 	bl	80234c4 <GUI_DrawHLine>
 8016216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801621a:	3601      	adds	r6, #1
 801621c:	429e      	cmp	r6, r3
 801621e:	f105 0502 	add.w	r5, r5, #2
 8016222:	dbed      	blt.n	8016200 <TREEVIEW_OwnerDraw+0x170>
 8016224:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016228:	2b00      	cmp	r3, #0
 801622a:	d090      	beq.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 801622c:	463e      	mov	r6, r7
 801622e:	2500      	movs	r5, #0
 8016230:	f9b6 0040 	ldrsh.w	r0, [r6, #64]	; 0x40
 8016234:	6961      	ldr	r1, [r4, #20]
 8016236:	69e2      	ldr	r2, [r4, #28]
 8016238:	f00d f99a 	bl	8023570 <GUI_DrawVLine>
 801623c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016240:	3501      	adds	r5, #1
 8016242:	429d      	cmp	r5, r3
 8016244:	f106 0602 	add.w	r6, r6, #2
 8016248:	dbf2      	blt.n	8016230 <TREEVIEW_OwnerDraw+0x1a0>
 801624a:	e780      	b.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f00e fa69 	bl	8024724 <GUI_SetColor>
 8016252:	68b8      	ldr	r0, [r7, #8]
 8016254:	f00e fa5a 	bl	802470c <GUI_SetBkColor>
 8016258:	6a38      	ldr	r0, [r7, #32]
 801625a:	f107 0110 	add.w	r1, r7, #16
 801625e:	2200      	movs	r2, #0
 8016260:	f00d fbf6 	bl	8023a50 <GUI_DispStringInRect>
 8016264:	e773      	b.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 8016266:	68a3      	ldr	r3, [r4, #8]
 8016268:	2b04      	cmp	r3, #4
 801626a:	f63f af70 	bhi.w	801614e <TREEVIEW_OwnerDraw+0xbe>
 801626e:	e8df f003 	tbb	[pc, r3]
 8016272:	1919      	.short	0x1919
 8016274:	0319      	.short	0x0319
 8016276:	03          	.byte	0x03
 8016277:	00          	.byte	0x00
 8016278:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801627a:	6963      	ldr	r3, [r4, #20]
 801627c:	69e5      	ldr	r5, [r4, #28]
 801627e:	8842      	ldrh	r2, [r0, #2]
 8016280:	f9b7 4068 	ldrsh.w	r4, [r7, #104]	; 0x68
 8016284:	8801      	ldrh	r1, [r0, #0]
 8016286:	1aed      	subs	r5, r5, r3
 8016288:	1aaa      	subs	r2, r5, r2
 801628a:	fa04 f888 	sxtah	r8, r4, r8
 801628e:	fa03 f386 	sxtah	r3, r3, r6
 8016292:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016296:	eba8 0151 	sub.w	r1, r8, r1, lsr #1
 801629a:	eb03 0262 	add.w	r2, r3, r2, asr #1
 801629e:	f00d f9ef 	bl	8023680 <GUI_DrawBitmap>
 80162a2:	e754      	b.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 80162a4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80162a6:	6963      	ldr	r3, [r4, #20]
 80162a8:	69e4      	ldr	r4, [r4, #28]
 80162aa:	8842      	ldrh	r2, [r0, #2]
 80162ac:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 80162b0:	1ae4      	subs	r4, r4, r3
 80162b2:	1aa2      	subs	r2, r4, r2
 80162b4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80162b8:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80162bc:	f00d f9e0 	bl	8023680 <GUI_DrawBitmap>
 80162c0:	e745      	b.n	801614e <TREEVIEW_OwnerDraw+0xbe>
 80162c2:	9d00      	ldr	r5, [sp, #0]
 80162c4:	6920      	ldr	r0, [r4, #16]
 80162c6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80162c8:	7e1e      	ldrb	r6, [r3, #24]
 80162ca:	bb20      	cbnz	r0, 8016316 <TREEVIEW_OwnerDraw+0x286>
 80162cc:	f105 077c 	add.w	r7, r5, #124	; 0x7c
 80162d0:	4629      	mov	r1, r5
 80162d2:	8b23      	ldrh	r3, [r4, #24]
 80162d4:	07da      	lsls	r2, r3, #31
 80162d6:	d519      	bpl.n	801630c <TREEVIEW_OwnerDraw+0x27c>
 80162d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80162dc:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80162e0:	b322      	cbz	r2, 801632c <TREEVIEW_OwnerDraw+0x29c>
 80162e2:	8854      	ldrh	r4, [r2, #2]
 80162e4:	2200      	movs	r2, #0
 80162e6:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 80162ea:	429e      	cmp	r6, r3
 80162ec:	bfb8      	it	lt
 80162ee:	461e      	movlt	r6, r3
 80162f0:	4296      	cmp	r6, r2
 80162f2:	bfb8      	it	lt
 80162f4:	4616      	movlt	r6, r2
 80162f6:	42a6      	cmp	r6, r4
 80162f8:	bfa8      	it	ge
 80162fa:	4634      	movge	r4, r6
 80162fc:	e770      	b.n	80161e0 <TREEVIEW_OwnerDraw+0x150>
 80162fe:	f9b5 102c 	ldrsh.w	r1, [r5, #44]	; 0x2c
 8016302:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 8016306:	f00d f933 	bl	8023570 <GUI_DrawVLine>
 801630a:	e784      	b.n	8016216 <TREEVIEW_OwnerDraw+0x186>
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	b193      	cbz	r3, 8016336 <TREEVIEW_OwnerDraw+0x2a6>
 8016310:	885a      	ldrh	r2, [r3, #2]
 8016312:	2400      	movs	r4, #0
 8016314:	e7e7      	b.n	80162e6 <TREEVIEW_OwnerDraw+0x256>
 8016316:	f00f fae9 	bl	80258ec <GUI_ALLOC_LockH>
 801631a:	ab04      	add	r3, sp, #16
 801631c:	4607      	mov	r7, r0
 801631e:	f843 0d08 	str.w	r0, [r3, #-8]!
 8016322:	4618      	mov	r0, r3
 8016324:	f00f faf4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016328:	9900      	ldr	r1, [sp, #0]
 801632a:	e7d2      	b.n	80162d2 <TREEVIEW_OwnerDraw+0x242>
 801632c:	331e      	adds	r3, #30
 801632e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8016332:	686a      	ldr	r2, [r5, #4]
 8016334:	e7d5      	b.n	80162e2 <TREEVIEW_OwnerDraw+0x252>
 8016336:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 801633a:	e7e9      	b.n	8016310 <TREEVIEW_OwnerDraw+0x280>
 801633c:	000a0031 	.word	0x000a0031

08016340 <_CollapseItem>:
 8016340:	b510      	push	{r4, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	f00f fad2 	bl	80258ec <GUI_ALLOC_LockH>
 8016348:	8b03      	ldrh	r3, [r0, #24]
 801634a:	9000      	str	r0, [sp, #0]
 801634c:	f003 0203 	and.w	r2, r3, #3
 8016350:	2a03      	cmp	r2, #3
 8016352:	6804      	ldr	r4, [r0, #0]
 8016354:	d004      	beq.n	8016360 <_CollapseItem+0x20>
 8016356:	4668      	mov	r0, sp
 8016358:	f00f fada 	bl	8025910 <GUI_ALLOC_UnlockH>
 801635c:	b002      	add	sp, #8
 801635e:	bd10      	pop	{r4, pc}
 8016360:	f023 0302 	bic.w	r3, r3, #2
 8016364:	8303      	strh	r3, [r0, #24]
 8016366:	4668      	mov	r0, sp
 8016368:	f00f fad2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801636c:	2c00      	cmp	r4, #0
 801636e:	d0f5      	beq.n	801635c <_CollapseItem+0x1c>
 8016370:	4620      	mov	r0, r4
 8016372:	f00f fabb 	bl	80258ec <GUI_ALLOC_LockH>
 8016376:	4603      	mov	r3, r0
 8016378:	a802      	add	r0, sp, #8
 801637a:	2200      	movs	r2, #0
 801637c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8016380:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8016384:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8016388:	f00f fac2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801638c:	4620      	mov	r0, r4
 801638e:	f007 ff37 	bl	801e200 <WM_InvalidateWindow>
 8016392:	e7e3      	b.n	801635c <_CollapseItem+0x1c>

08016394 <_ExpandItem>:
 8016394:	b510      	push	{r4, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	f00f faa8 	bl	80258ec <GUI_ALLOC_LockH>
 801639c:	8b03      	ldrh	r3, [r0, #24]
 801639e:	9000      	str	r0, [sp, #0]
 80163a0:	f003 0203 	and.w	r2, r3, #3
 80163a4:	2a01      	cmp	r2, #1
 80163a6:	6804      	ldr	r4, [r0, #0]
 80163a8:	d004      	beq.n	80163b4 <_ExpandItem+0x20>
 80163aa:	4668      	mov	r0, sp
 80163ac:	f00f fab0 	bl	8025910 <GUI_ALLOC_UnlockH>
 80163b0:	b002      	add	sp, #8
 80163b2:	bd10      	pop	{r4, pc}
 80163b4:	f043 0302 	orr.w	r3, r3, #2
 80163b8:	8303      	strh	r3, [r0, #24]
 80163ba:	4668      	mov	r0, sp
 80163bc:	f00f faa8 	bl	8025910 <GUI_ALLOC_UnlockH>
 80163c0:	2c00      	cmp	r4, #0
 80163c2:	d0f5      	beq.n	80163b0 <_ExpandItem+0x1c>
 80163c4:	4620      	mov	r0, r4
 80163c6:	f00f fa91 	bl	80258ec <GUI_ALLOC_LockH>
 80163ca:	4603      	mov	r3, r0
 80163cc:	a802      	add	r0, sp, #8
 80163ce:	2200      	movs	r2, #0
 80163d0:	f840 3d04 	str.w	r3, [r0, #-4]!
 80163d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80163d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80163dc:	f00f fa98 	bl	8025910 <GUI_ALLOC_UnlockH>
 80163e0:	4620      	mov	r0, r4
 80163e2:	f007 ff0d 	bl	801e200 <WM_InvalidateWindow>
 80163e6:	e7e3      	b.n	80163b0 <_ExpandItem+0x1c>

080163e8 <_CalcParams>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	b09f      	sub	sp, #124	; 0x7c
 80163ee:	4681      	mov	r9, r0
 80163f0:	2100      	movs	r1, #0
 80163f2:	2240      	movs	r2, #64	; 0x40
 80163f4:	a80e      	add	r0, sp, #56	; 0x38
 80163f6:	f014 f9fa 	bl	802a7ee <memset>
 80163fa:	4648      	mov	r0, r9
 80163fc:	f00f fa76 	bl	80258ec <GUI_ALLOC_LockH>
 8016400:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
 8016404:	9001      	str	r0, [sp, #4]
 8016406:	2300      	movs	r3, #0
 8016408:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 801640c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8016410:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8016414:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8016418:	f10d 0a04 	add.w	sl, sp, #4
 801641c:	2f00      	cmp	r7, #0
 801641e:	f000 8087 	beq.w	8016530 <_CalcParams+0x148>
 8016422:	f04f 34ff 	mov.w	r4, #4294967295
 8016426:	f10d 0a04 	add.w	sl, sp, #4
 801642a:	4638      	mov	r0, r7
 801642c:	f00f fa5e 	bl	80258ec <GUI_ALLOC_LockH>
 8016430:	8b06      	ldrh	r6, [r0, #24]
 8016432:	9b01      	ldr	r3, [sp, #4]
 8016434:	7f05      	ldrb	r5, [r0, #28]
 8016436:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801643a:	8a82      	ldrh	r2, [r0, #20]
 801643c:	9002      	str	r0, [sp, #8]
 801643e:	f026 0604 	bic.w	r6, r6, #4
 8016442:	8306      	strh	r6, [r0, #24]
 8016444:	f04f 0e00 	mov.w	lr, #0
 8016448:	ae1e      	add	r6, sp, #120	; 0x78
 801644a:	f8a0 e01a 	strh.w	lr, [r0, #26]
 801644e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8016452:	4291      	cmp	r1, r2
 8016454:	f840 7c40 	str.w	r7, [r0, #-64]
 8016458:	bfb8      	it	lt
 801645a:	f8c3 20b8 	strlt.w	r2, [r3, #184]	; 0xb8
 801645e:	a802      	add	r0, sp, #8
 8016460:	f00f fa56 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016464:	42a5      	cmp	r5, r4
 8016466:	f2c0 8082 	blt.w	801656e <_CalcParams+0x186>
 801646a:	4650      	mov	r0, sl
 801646c:	f00f fa50 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016470:	9703      	str	r7, [sp, #12]
 8016472:	f1b8 0f00 	cmp.w	r8, #0
 8016476:	d078      	beq.n	801656a <_CalcParams+0x182>
 8016478:	ab03      	add	r3, sp, #12
 801647a:	261b      	movs	r6, #27
 801647c:	9606      	str	r6, [sp, #24]
 801647e:	f8cd 9014 	str.w	r9, [sp, #20]
 8016482:	930d      	str	r3, [sp, #52]	; 0x34
 8016484:	a805      	add	r0, sp, #20
 8016486:	47c0      	blx	r8
 8016488:	4604      	mov	r4, r0
 801648a:	4648      	mov	r0, r9
 801648c:	f00f fa2e 	bl	80258ec <GUI_ALLOC_LockH>
 8016490:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8016494:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8016498:	9001      	str	r0, [sp, #4]
 801649a:	4414      	add	r4, r2
 801649c:	3301      	adds	r3, #1
 801649e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 80164a2:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 80164a6:	4638      	mov	r0, r7
 80164a8:	f00f fa20 	bl	80258ec <GUI_ALLOC_LockH>
 80164ac:	8b03      	ldrh	r3, [r0, #24]
 80164ae:	9005      	str	r0, [sp, #20]
 80164b0:	07da      	lsls	r2, r3, #31
 80164b2:	d552      	bpl.n	801655a <_CalcParams+0x172>
 80164b4:	079b      	lsls	r3, r3, #30
 80164b6:	d450      	bmi.n	801655a <_CalcParams+0x172>
 80164b8:	7f04      	ldrb	r4, [r0, #28]
 80164ba:	6846      	ldr	r6, [r0, #4]
 80164bc:	a805      	add	r0, sp, #20
 80164be:	2e00      	cmp	r6, #0
 80164c0:	d13c      	bne.n	801653c <_CalcParams+0x154>
 80164c2:	f00f fa25 	bl	8025910 <GUI_ALLOC_UnlockH>
 80164c6:	4638      	mov	r0, r7
 80164c8:	f00f fa10 	bl	80258ec <GUI_ALLOC_LockH>
 80164cc:	1c6c      	adds	r4, r5, #1
 80164ce:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80164d2:	9004      	str	r0, [sp, #16]
 80164d4:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 80164d8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 80164dc:	f00f fa06 	bl	80258ec <GUI_ALLOC_LockH>
 80164e0:	4603      	mov	r3, r0
 80164e2:	3d01      	subs	r5, #1
 80164e4:	a805      	add	r0, sp, #20
 80164e6:	9305      	str	r3, [sp, #20]
 80164e8:	b11b      	cbz	r3, 80164f2 <_CalcParams+0x10a>
 80164ea:	8b1a      	ldrh	r2, [r3, #24]
 80164ec:	f042 0204 	orr.w	r2, r2, #4
 80164f0:	831a      	strh	r2, [r3, #24]
 80164f2:	f00f fa0d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	dcee      	bgt.n	80164d8 <_CalcParams+0xf0>
 80164fa:	9b04      	ldr	r3, [sp, #16]
 80164fc:	7f1d      	ldrb	r5, [r3, #28]
 80164fe:	689c      	ldr	r4, [r3, #8]
 8016500:	2601      	movs	r6, #1
 8016502:	1e6b      	subs	r3, r5, #1
 8016504:	409e      	lsls	r6, r3
 8016506:	b2b6      	uxth	r6, r6
 8016508:	b92c      	cbnz	r4, 8016516 <_CalcParams+0x12e>
 801650a:	e00e      	b.n	801652a <_CalcParams+0x142>
 801650c:	8b42      	ldrh	r2, [r0, #26]
 801650e:	6884      	ldr	r4, [r0, #8]
 8016510:	4332      	orrs	r2, r6
 8016512:	8342      	strh	r2, [r0, #26]
 8016514:	b14c      	cbz	r4, 801652a <_CalcParams+0x142>
 8016516:	a804      	add	r0, sp, #16
 8016518:	f00f f9fa 	bl	8025910 <GUI_ALLOC_UnlockH>
 801651c:	4620      	mov	r0, r4
 801651e:	f00f f9e5 	bl	80258ec <GUI_ALLOC_LockH>
 8016522:	9004      	str	r0, [sp, #16]
 8016524:	7f02      	ldrb	r2, [r0, #28]
 8016526:	4295      	cmp	r5, r2
 8016528:	dbf0      	blt.n	801650c <_CalcParams+0x124>
 801652a:	a804      	add	r0, sp, #16
 801652c:	f00f f9f0 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016530:	4650      	mov	r0, sl
 8016532:	f00f f9ed 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016536:	b01f      	add	sp, #124	; 0x7c
 8016538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653c:	f00f f9e8 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016540:	4630      	mov	r0, r6
 8016542:	f00f f9d3 	bl	80258ec <GUI_ALLOC_LockH>
 8016546:	9005      	str	r0, [sp, #20]
 8016548:	7f03      	ldrb	r3, [r0, #28]
 801654a:	429c      	cmp	r4, r3
 801654c:	dbb5      	blt.n	80164ba <_CalcParams+0xd2>
 801654e:	a805      	add	r0, sp, #20
 8016550:	4637      	mov	r7, r6
 8016552:	f00f f9dd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016556:	462c      	mov	r4, r5
 8016558:	e767      	b.n	801642a <_CalcParams+0x42>
 801655a:	6844      	ldr	r4, [r0, #4]
 801655c:	a805      	add	r0, sp, #20
 801655e:	f00f f9d7 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016562:	2c00      	cmp	r4, #0
 8016564:	d0af      	beq.n	80164c6 <_CalcParams+0xde>
 8016566:	4627      	mov	r7, r4
 8016568:	e7f5      	b.n	8016556 <_CalcParams+0x16e>
 801656a:	4644      	mov	r4, r8
 801656c:	e78d      	b.n	801648a <_CalcParams+0xa2>
 801656e:	4638      	mov	r0, r7
 8016570:	f00f f9bc 	bl	80258ec <GUI_ALLOC_LockH>
 8016574:	1c66      	adds	r6, r4, #1
 8016576:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 801657a:	9004      	str	r0, [sp, #16]
 801657c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016580:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8016584:	f00f f9b2 	bl	80258ec <GUI_ALLOC_LockH>
 8016588:	4603      	mov	r3, r0
 801658a:	3c01      	subs	r4, #1
 801658c:	a805      	add	r0, sp, #20
 801658e:	9305      	str	r3, [sp, #20]
 8016590:	b11b      	cbz	r3, 801659a <_CalcParams+0x1b2>
 8016592:	8b1a      	ldrh	r2, [r3, #24]
 8016594:	f042 0204 	orr.w	r2, r2, #4
 8016598:	831a      	strh	r2, [r3, #24]
 801659a:	f00f f9b9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801659e:	42a5      	cmp	r5, r4
 80165a0:	dbee      	blt.n	8016580 <_CalcParams+0x198>
 80165a2:	9b04      	ldr	r3, [sp, #16]
 80165a4:	7f1c      	ldrb	r4, [r3, #28]
 80165a6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80165aa:	1e66      	subs	r6, r4, #1
 80165ac:	2201      	movs	r2, #1
 80165ae:	fa02 f606 	lsl.w	r6, r2, r6
 80165b2:	b2b6      	uxth	r6, r6
 80165b4:	f1bb 0f00 	cmp.w	fp, #0
 80165b8:	d108      	bne.n	80165cc <_CalcParams+0x1e4>
 80165ba:	e011      	b.n	80165e0 <_CalcParams+0x1f8>
 80165bc:	8b41      	ldrh	r1, [r0, #26]
 80165be:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80165c2:	4331      	orrs	r1, r6
 80165c4:	8341      	strh	r1, [r0, #26]
 80165c6:	f1bb 0f00 	cmp.w	fp, #0
 80165ca:	d009      	beq.n	80165e0 <_CalcParams+0x1f8>
 80165cc:	a804      	add	r0, sp, #16
 80165ce:	f00f f99f 	bl	8025910 <GUI_ALLOC_UnlockH>
 80165d2:	4658      	mov	r0, fp
 80165d4:	f00f f98a 	bl	80258ec <GUI_ALLOC_LockH>
 80165d8:	9004      	str	r0, [sp, #16]
 80165da:	7f02      	ldrb	r2, [r0, #28]
 80165dc:	4294      	cmp	r4, r2
 80165de:	dbed      	blt.n	80165bc <_CalcParams+0x1d4>
 80165e0:	a804      	add	r0, sp, #16
 80165e2:	f00f f995 	bl	8025910 <GUI_ALLOC_UnlockH>
 80165e6:	e740      	b.n	801646a <_CalcParams+0x82>

080165e8 <_ManageAutoScroll>:
 80165e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ec:	4d8a      	ldr	r5, [pc, #552]	; (8016818 <_ManageAutoScroll+0x230>)
 80165ee:	682e      	ldr	r6, [r5, #0]
 80165f0:	b095      	sub	sp, #84	; 0x54
 80165f2:	4604      	mov	r4, r0
 80165f4:	b126      	cbz	r6, 8016600 <_ManageAutoScroll+0x18>
 80165f6:	2300      	movs	r3, #0
 80165f8:	602b      	str	r3, [r5, #0]
 80165fa:	b015      	add	sp, #84	; 0x54
 80165fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016600:	2301      	movs	r3, #1
 8016602:	602b      	str	r3, [r5, #0]
 8016604:	f00f f972 	bl	80258ec <GUI_ALLOC_LockH>
 8016608:	a906      	add	r1, sp, #24
 801660a:	9003      	str	r0, [sp, #12]
 801660c:	4620      	mov	r0, r4
 801660e:	f005 fc3f 	bl	801be90 <WM_GetInsideRectExScrollbar>
 8016612:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016616:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 801661a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801661e:	1aff      	subs	r7, r7, r3
 8016620:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
 8016624:	3701      	adds	r7, #1
 8016626:	42bb      	cmp	r3, r7
 8016628:	bfd4      	ite	le
 801662a:	2300      	movle	r3, #0
 801662c:	2301      	movgt	r3, #1
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d175      	bne.n	8016720 <_ManageAutoScroll+0x138>
 8016634:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8016638:	464b      	mov	r3, r9
 801663a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801663e:	071a      	lsls	r2, r3, #28
 8016640:	d446      	bmi.n	80166d0 <_ManageAutoScroll+0xe8>
 8016642:	4620      	mov	r0, r4
 8016644:	f005 fda4 	bl	801c190 <WM_GetScrollbarV>
 8016648:	2800      	cmp	r0, #0
 801664a:	f040 80d1 	bne.w	80167f0 <_ManageAutoScroll+0x208>
 801664e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016652:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 8016656:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801665a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801665e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8016662:	1a82      	subs	r2, r0, r2
 8016664:	3201      	adds	r2, #1
 8016666:	4291      	cmp	r1, r2
 8016668:	bfd4      	ite	le
 801666a:	2600      	movle	r6, #0
 801666c:	2601      	movgt	r6, #1
 801666e:	2e00      	cmp	r6, #0
 8016670:	d04c      	beq.n	801670c <_ManageAutoScroll+0x124>
 8016672:	6459      	str	r1, [r3, #68]	; 0x44
 8016674:	64da      	str	r2, [r3, #76]	; 0x4c
 8016676:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801667a:	075b      	lsls	r3, r3, #29
 801667c:	d53a      	bpl.n	80166f4 <_ManageAutoScroll+0x10c>
 801667e:	4640      	mov	r0, r8
 8016680:	f00f f946 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016684:	4631      	mov	r1, r6
 8016686:	4620      	mov	r0, r4
 8016688:	f004 fdda 	bl	801b240 <WM_SetScrollbarH>
 801668c:	4620      	mov	r0, r4
 801668e:	f00f f92d 	bl	80258ec <GUI_ALLOC_LockH>
 8016692:	9003      	str	r0, [sp, #12]
 8016694:	9b00      	ldr	r3, [sp, #0]
 8016696:	b90b      	cbnz	r3, 801669c <_ManageAutoScroll+0xb4>
 8016698:	2e00      	cmp	r6, #0
 801669a:	d039      	beq.n	8016710 <_ManageAutoScroll+0x128>
 801669c:	9b03      	ldr	r3, [sp, #12]
 801669e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80166a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80166a4:	af08      	add	r7, sp, #32
 80166a6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80166aa:	3344      	adds	r3, #68	; 0x44
 80166ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166b0:	ae0b      	add	r6, sp, #44	; 0x2c
 80166b2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80166b6:	4640      	mov	r0, r8
 80166b8:	f00f f92a 	bl	8025910 <GUI_ALLOC_UnlockH>
 80166bc:	4620      	mov	r0, r4
 80166be:	4639      	mov	r1, r7
 80166c0:	4632      	mov	r2, r6
 80166c2:	f7ff fbd1 	bl	8015e68 <WIDGET__SetScrollState>
 80166c6:	2300      	movs	r3, #0
 80166c8:	602b      	str	r3, [r5, #0]
 80166ca:	b015      	add	sp, #84	; 0x54
 80166cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166d0:	f10d 080c 	add.w	r8, sp, #12
 80166d4:	4640      	mov	r0, r8
 80166d6:	f00f f91b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80166da:	9900      	ldr	r1, [sp, #0]
 80166dc:	4620      	mov	r0, r4
 80166de:	f004 fddf 	bl	801b2a0 <WM_SetScrollbarV>
 80166e2:	4620      	mov	r0, r4
 80166e4:	f7ff fe80 	bl	80163e8 <_CalcParams>
 80166e8:	4620      	mov	r0, r4
 80166ea:	f00f f8ff 	bl	80258ec <GUI_ALLOC_LockH>
 80166ee:	9003      	str	r0, [sp, #12]
 80166f0:	4603      	mov	r3, r0
 80166f2:	e7b0      	b.n	8016656 <_ManageAutoScroll+0x6e>
 80166f4:	4620      	mov	r0, r4
 80166f6:	f005 fd03 	bl	801c100 <WM_GetScrollbarH>
 80166fa:	2800      	cmp	r0, #0
 80166fc:	d0ca      	beq.n	8016694 <_ManageAutoScroll+0xac>
 80166fe:	9b03      	ldr	r3, [sp, #12]
 8016700:	2e00      	cmp	r6, #0
 8016702:	d1cc      	bne.n	801669e <_ManageAutoScroll+0xb6>
 8016704:	2201      	movs	r2, #1
 8016706:	645a      	str	r2, [r3, #68]	; 0x44
 8016708:	64da      	str	r2, [r3, #76]	; 0x4c
 801670a:	e7c8      	b.n	801669e <_ManageAutoScroll+0xb6>
 801670c:	649e      	str	r6, [r3, #72]	; 0x48
 801670e:	e7b2      	b.n	8016676 <_ManageAutoScroll+0x8e>
 8016710:	4640      	mov	r0, r8
 8016712:	f00f f8fd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016716:	2300      	movs	r3, #0
 8016718:	602b      	str	r3, [r5, #0]
 801671a:	b015      	add	sp, #84	; 0x54
 801671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016720:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 8016724:	3301      	adds	r3, #1
 8016726:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801672a:	4620      	mov	r0, r4
 801672c:	f00f f8de 	bl	80258ec <GUI_ALLOC_LockH>
 8016730:	4603      	mov	r3, r0
 8016732:	a814      	add	r0, sp, #80	; 0x50
 8016734:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
 8016738:	f840 3d40 	str.w	r3, [r0, #-64]!
 801673c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8016740:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8016744:	f00f f8e4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016748:	f1b8 0f01 	cmp.w	r8, #1
 801674c:	dd60      	ble.n	8016810 <_ManageAutoScroll+0x228>
 801674e:	a908      	add	r1, sp, #32
 8016750:	4620      	mov	r0, r4
 8016752:	f005 fb9d 	bl	801be90 <WM_GetInsideRectExScrollbar>
 8016756:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 801675a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801675e:	1a8a      	subs	r2, r1, r2
 8016760:	9201      	str	r2, [sp, #4]
 8016762:	2f00      	cmp	r7, #0
 8016764:	d054      	beq.n	8016810 <_ManageAutoScroll+0x228>
 8016766:	46b0      	mov	r8, r6
 8016768:	f108 0801 	add.w	r8, r8, #1
 801676c:	9705      	str	r7, [sp, #20]
 801676e:	f1ba 0f00 	cmp.w	sl, #0
 8016772:	d03b      	beq.n	80167ec <_ManageAutoScroll+0x204>
 8016774:	231b      	movs	r3, #27
 8016776:	930c      	str	r3, [sp, #48]	; 0x30
 8016778:	ab05      	add	r3, sp, #20
 801677a:	940b      	str	r4, [sp, #44]	; 0x2c
 801677c:	9313      	str	r3, [sp, #76]	; 0x4c
 801677e:	a80b      	add	r0, sp, #44	; 0x2c
 8016780:	47d0      	blx	sl
 8016782:	4602      	mov	r2, r0
 8016784:	4638      	mov	r0, r7
 8016786:	4416      	add	r6, r2
 8016788:	f00f f8b0 	bl	80258ec <GUI_ALLOC_LockH>
 801678c:	8b03      	ldrh	r3, [r0, #24]
 801678e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016790:	07df      	lsls	r7, r3, #31
 8016792:	d51c      	bpl.n	80167ce <_ManageAutoScroll+0x1e6>
 8016794:	0799      	lsls	r1, r3, #30
 8016796:	d41a      	bmi.n	80167ce <_ManageAutoScroll+0x1e6>
 8016798:	f890 b01c 	ldrb.w	fp, [r0, #28]
 801679c:	6847      	ldr	r7, [r0, #4]
 801679e:	a80b      	add	r0, sp, #44	; 0x2c
 80167a0:	b92f      	cbnz	r7, 80167ae <_ManageAutoScroll+0x1c6>
 80167a2:	f00f f8b5 	bl	8025910 <GUI_ALLOC_UnlockH>
 80167a6:	f8c9 8040 	str.w	r8, [r9, #64]	; 0x40
 80167aa:	9b03      	ldr	r3, [sp, #12]
 80167ac:	e745      	b.n	801663a <_ManageAutoScroll+0x52>
 80167ae:	f00f f8af 	bl	8025910 <GUI_ALLOC_UnlockH>
 80167b2:	4638      	mov	r0, r7
 80167b4:	f00f f89a 	bl	80258ec <GUI_ALLOC_LockH>
 80167b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80167ba:	7f02      	ldrb	r2, [r0, #28]
 80167bc:	4593      	cmp	fp, r2
 80167be:	dbed      	blt.n	801679c <_ManageAutoScroll+0x1b4>
 80167c0:	a80b      	add	r0, sp, #44	; 0x2c
 80167c2:	f00f f8a5 	bl	8025910 <GUI_ALLOC_UnlockH>
 80167c6:	9b01      	ldr	r3, [sp, #4]
 80167c8:	42b3      	cmp	r3, r6
 80167ca:	dacd      	bge.n	8016768 <_ManageAutoScroll+0x180>
 80167cc:	e7eb      	b.n	80167a6 <_ManageAutoScroll+0x1be>
 80167ce:	6847      	ldr	r7, [r0, #4]
 80167d0:	a80b      	add	r0, sp, #44	; 0x2c
 80167d2:	f00f f89d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	42b3      	cmp	r3, r6
 80167da:	dbe4      	blt.n	80167a6 <_ManageAutoScroll+0x1be>
 80167dc:	2f00      	cmp	r7, #0
 80167de:	d0e2      	beq.n	80167a6 <_ManageAutoScroll+0x1be>
 80167e0:	f108 0801 	add.w	r8, r8, #1
 80167e4:	9705      	str	r7, [sp, #20]
 80167e6:	f1ba 0f00 	cmp.w	sl, #0
 80167ea:	d1c3      	bne.n	8016774 <_ManageAutoScroll+0x18c>
 80167ec:	4652      	mov	r2, sl
 80167ee:	e7c9      	b.n	8016784 <_ManageAutoScroll+0x19c>
 80167f0:	9b00      	ldr	r3, [sp, #0]
 80167f2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80167f6:	b933      	cbnz	r3, 8016806 <_ManageAutoScroll+0x21e>
 80167f8:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 80167fc:	2201      	movs	r2, #1
 80167fe:	9200      	str	r2, [sp, #0]
 8016800:	639a      	str	r2, [r3, #56]	; 0x38
 8016802:	641a      	str	r2, [r3, #64]	; 0x40
 8016804:	e727      	b.n	8016656 <_ManageAutoScroll+0x6e>
 8016806:	2301      	movs	r3, #1
 8016808:	9300      	str	r3, [sp, #0]
 801680a:	f858 3d44 	ldr.w	r3, [r8, #-68]!
 801680e:	e722      	b.n	8016656 <_ManageAutoScroll+0x6e>
 8016810:	f04f 0800 	mov.w	r8, #0
 8016814:	e7c7      	b.n	80167a6 <_ManageAutoScroll+0x1be>
 8016816:	bf00      	nop
 8016818:	2002b14c 	.word	0x2002b14c

0801681c <_GetVisibility>:
 801681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016820:	b091      	sub	sp, #68	; 0x44
 8016822:	4681      	mov	r9, r0
 8016824:	460e      	mov	r6, r1
 8016826:	a904      	add	r1, sp, #16
 8016828:	9201      	str	r2, [sp, #4]
 801682a:	f005 fb31 	bl	801be90 <WM_GetInsideRectExScrollbar>
 801682e:	4648      	mov	r0, r9
 8016830:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8016834:	f00f f85a 	bl	80258ec <GUI_ALLOC_LockH>
 8016838:	4602      	mov	r2, r0
 801683a:	a810      	add	r0, sp, #64	; 0x40
 801683c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801683e:	f840 2d38 	str.w	r2, [r0, #-56]!
 8016842:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8016846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016848:	9200      	str	r2, [sp, #0]
 801684a:	1e65      	subs	r5, r4, #1
 801684c:	f00f f860 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016850:	2c00      	cmp	r4, #0
 8016852:	d035      	beq.n	80168c0 <_GetVisibility+0xa4>
 8016854:	b197      	cbz	r7, 801687c <_GetVisibility+0x60>
 8016856:	42b7      	cmp	r7, r6
 8016858:	d02d      	beq.n	80168b6 <_GetVisibility+0x9a>
 801685a:	ac07      	add	r4, sp, #28
 801685c:	4638      	mov	r0, r7
 801685e:	f00f f845 	bl	80258ec <GUI_ALLOC_LockH>
 8016862:	8b03      	ldrh	r3, [r0, #24]
 8016864:	9007      	str	r0, [sp, #28]
 8016866:	07df      	lsls	r7, r3, #31
 8016868:	d51a      	bpl.n	80168a0 <_GetVisibility+0x84>
 801686a:	0799      	lsls	r1, r3, #30
 801686c:	d418      	bmi.n	80168a0 <_GetVisibility+0x84>
 801686e:	f890 801c 	ldrb.w	r8, [r0, #28]
 8016872:	6847      	ldr	r7, [r0, #4]
 8016874:	4620      	mov	r0, r4
 8016876:	b92f      	cbnz	r7, 8016884 <_GetVisibility+0x68>
 8016878:	f00f f84a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801687c:	2002      	movs	r0, #2
 801687e:	b011      	add	sp, #68	; 0x44
 8016880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016884:	f00f f844 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016888:	4638      	mov	r0, r7
 801688a:	f00f f82f 	bl	80258ec <GUI_ALLOC_LockH>
 801688e:	9007      	str	r0, [sp, #28]
 8016890:	7f02      	ldrb	r2, [r0, #28]
 8016892:	4590      	cmp	r8, r2
 8016894:	dbed      	blt.n	8016872 <_GetVisibility+0x56>
 8016896:	4620      	mov	r0, r4
 8016898:	f00f f83a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801689c:	b93d      	cbnz	r5, 80168ae <_GetVisibility+0x92>
 801689e:	e011      	b.n	80168c4 <_GetVisibility+0xa8>
 80168a0:	6847      	ldr	r7, [r0, #4]
 80168a2:	4620      	mov	r0, r4
 80168a4:	f00f f834 	bl	8025910 <GUI_ALLOC_UnlockH>
 80168a8:	b155      	cbz	r5, 80168c0 <_GetVisibility+0xa4>
 80168aa:	2f00      	cmp	r7, #0
 80168ac:	d0e6      	beq.n	801687c <_GetVisibility+0x60>
 80168ae:	42be      	cmp	r6, r7
 80168b0:	f105 35ff 	add.w	r5, r5, #4294967295
 80168b4:	d1d2      	bne.n	801685c <_GetVisibility+0x40>
 80168b6:	f04f 30ff 	mov.w	r0, #4294967295
 80168ba:	b011      	add	sp, #68	; 0x44
 80168bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c0:	2f00      	cmp	r7, #0
 80168c2:	d0db      	beq.n	801687c <_GetVisibility+0x60>
 80168c4:	fa0f f58a 	sxth.w	r5, sl
 80168c8:	f04f 0b1b 	mov.w	fp, #27
 80168cc:	f10d 0a0c 	add.w	sl, sp, #12
 80168d0:	9b00      	ldr	r3, [sp, #0]
 80168d2:	9703      	str	r7, [sp, #12]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d02e      	beq.n	8016936 <_GetVisibility+0x11a>
 80168d8:	f8cd b020 	str.w	fp, [sp, #32]
 80168dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80168e0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80168e4:	a807      	add	r0, sp, #28
 80168e6:	4798      	blx	r3
 80168e8:	42b7      	cmp	r7, r6
 80168ea:	4405      	add	r5, r0
 80168ec:	d027      	beq.n	801693e <_GetVisibility+0x122>
 80168ee:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80168f2:	4295      	cmp	r5, r2
 80168f4:	dcc2      	bgt.n	801687c <_GetVisibility+0x60>
 80168f6:	4638      	mov	r0, r7
 80168f8:	f00e fff8 	bl	80258ec <GUI_ALLOC_LockH>
 80168fc:	8b03      	ldrh	r3, [r0, #24]
 80168fe:	9007      	str	r0, [sp, #28]
 8016900:	07da      	lsls	r2, r3, #31
 8016902:	d533      	bpl.n	801696c <_GetVisibility+0x150>
 8016904:	079b      	lsls	r3, r3, #30
 8016906:	d431      	bmi.n	801696c <_GetVisibility+0x150>
 8016908:	f890 801c 	ldrb.w	r8, [r0, #28]
 801690c:	ac07      	add	r4, sp, #28
 801690e:	6847      	ldr	r7, [r0, #4]
 8016910:	4620      	mov	r0, r4
 8016912:	2f00      	cmp	r7, #0
 8016914:	d0b0      	beq.n	8016878 <_GetVisibility+0x5c>
 8016916:	f00e fffb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801691a:	4638      	mov	r0, r7
 801691c:	f00e ffe6 	bl	80258ec <GUI_ALLOC_LockH>
 8016920:	9007      	str	r0, [sp, #28]
 8016922:	7f02      	ldrb	r2, [r0, #28]
 8016924:	4590      	cmp	r8, r2
 8016926:	dbf2      	blt.n	801690e <_GetVisibility+0xf2>
 8016928:	4620      	mov	r0, r4
 801692a:	f00e fff1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801692e:	9b00      	ldr	r3, [sp, #0]
 8016930:	9703      	str	r7, [sp, #12]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1d0      	bne.n	80168d8 <_GetVisibility+0xbc>
 8016936:	4618      	mov	r0, r3
 8016938:	42b7      	cmp	r7, r6
 801693a:	4405      	add	r5, r0
 801693c:	d1d7      	bne.n	80168ee <_GetVisibility+0xd2>
 801693e:	9c01      	ldr	r4, [sp, #4]
 8016940:	b154      	cbz	r4, 8016958 <_GetVisibility+0x13c>
 8016942:	b2ab      	uxth	r3, r5
 8016944:	1a18      	subs	r0, r3, r0
 8016946:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801694a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801694e:	8060      	strh	r0, [r4, #2]
 8016950:	3b01      	subs	r3, #1
 8016952:	80e3      	strh	r3, [r4, #6]
 8016954:	8021      	strh	r1, [r4, #0]
 8016956:	80a2      	strh	r2, [r4, #4]
 8016958:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801695c:	3001      	adds	r0, #1
 801695e:	4285      	cmp	r5, r0
 8016960:	bfd4      	ite	le
 8016962:	2000      	movle	r0, #0
 8016964:	2001      	movgt	r0, #1
 8016966:	b011      	add	sp, #68	; 0x44
 8016968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696c:	6847      	ldr	r7, [r0, #4]
 801696e:	a807      	add	r0, sp, #28
 8016970:	f00e ffce 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016974:	2f00      	cmp	r7, #0
 8016976:	d1ab      	bne.n	80168d0 <_GetVisibility+0xb4>
 8016978:	e780      	b.n	801687c <_GetVisibility+0x60>
 801697a:	bf00      	nop

0801697c <_UpdateScrollPos>:
 801697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016980:	b088      	sub	sp, #32
 8016982:	4607      	mov	r7, r0
 8016984:	f00e ffb2 	bl	80258ec <GUI_ALLOC_LockH>
 8016988:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 801698c:	9001      	str	r0, [sp, #4]
 801698e:	4630      	mov	r0, r6
 8016990:	f00e ffac 	bl	80258ec <GUI_ALLOC_LockH>
 8016994:	ad08      	add	r5, sp, #32
 8016996:	4603      	mov	r3, r0
 8016998:	f845 0d0c 	str.w	r0, [r5, #-12]!
 801699c:	f890 801c 	ldrb.w	r8, [r0, #28]
 80169a0:	689c      	ldr	r4, [r3, #8]
 80169a2:	4628      	mov	r0, r5
 80169a4:	2c00      	cmp	r4, #0
 80169a6:	d13f      	bne.n	8016a28 <_UpdateScrollPos+0xac>
 80169a8:	f00e ffb2 	bl	8025910 <GUI_ALLOC_UnlockH>
 80169ac:	e00d      	b.n	80169ca <_UpdateScrollPos+0x4e>
 80169ae:	9901      	ldr	r1, [sp, #4]
 80169b0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80169b2:	db04      	blt.n	80169be <_UpdateScrollPos+0x42>
 80169b4:	2a01      	cmp	r2, #1
 80169b6:	d802      	bhi.n	80169be <_UpdateScrollPos+0x42>
 80169b8:	3001      	adds	r0, #1
 80169ba:	63c8      	str	r0, [r1, #60]	; 0x3c
 80169bc:	2401      	movs	r4, #1
 80169be:	f8d1 20b4 	ldr.w	r2, [r1, #180]	; 0xb4
 80169c2:	4282      	cmp	r2, r0
 80169c4:	dd41      	ble.n	8016a4a <_UpdateScrollPos+0xce>
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d041      	beq.n	8016a4e <_UpdateScrollPos+0xd2>
 80169ca:	4631      	mov	r1, r6
 80169cc:	2200      	movs	r2, #0
 80169ce:	4638      	mov	r0, r7
 80169d0:	f7ff ff24 	bl	801681c <_GetVisibility>
 80169d4:	1c41      	adds	r1, r0, #1
 80169d6:	4603      	mov	r3, r0
 80169d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80169dc:	d1e7      	bne.n	80169ae <_UpdateScrollPos+0x32>
 80169de:	9b01      	ldr	r3, [sp, #4]
 80169e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80169e2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80169e6:	3901      	subs	r1, #1
 80169e8:	4291      	cmp	r1, r2
 80169ea:	63d9      	str	r1, [r3, #60]	; 0x3c
 80169ec:	f04f 0401 	mov.w	r4, #1
 80169f0:	dbeb      	blt.n	80169ca <_UpdateScrollPos+0x4e>
 80169f2:	2a00      	cmp	r2, #0
 80169f4:	dd01      	ble.n	80169fa <_UpdateScrollPos+0x7e>
 80169f6:	3a01      	subs	r2, #1
 80169f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80169fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80169fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a00:	3344      	adds	r3, #68	; 0x44
 8016a02:	ae02      	add	r6, sp, #8
 8016a04:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8016a08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8016a10:	a801      	add	r0, sp, #4
 8016a12:	f00e ff7d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016a16:	4638      	mov	r0, r7
 8016a18:	4631      	mov	r1, r6
 8016a1a:	462a      	mov	r2, r5
 8016a1c:	f7ff fa24 	bl	8015e68 <WIDGET__SetScrollState>
 8016a20:	4620      	mov	r0, r4
 8016a22:	b008      	add	sp, #32
 8016a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a28:	f00e ff72 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f00e ff5d 	bl	80258ec <GUI_ALLOC_LockH>
 8016a32:	9005      	str	r0, [sp, #20]
 8016a34:	7f02      	ldrb	r2, [r0, #28]
 8016a36:	4542      	cmp	r2, r8
 8016a38:	da05      	bge.n	8016a46 <_UpdateScrollPos+0xca>
 8016a3a:	8b04      	ldrh	r4, [r0, #24]
 8016a3c:	f004 0402 	and.w	r4, r4, #2
 8016a40:	b2a4      	uxth	r4, r4
 8016a42:	b134      	cbz	r4, 8016a52 <_UpdateScrollPos+0xd6>
 8016a44:	4690      	mov	r8, r2
 8016a46:	4603      	mov	r3, r0
 8016a48:	e7aa      	b.n	80169a0 <_UpdateScrollPos+0x24>
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	e7d1      	b.n	80169f2 <_UpdateScrollPos+0x76>
 8016a4e:	460b      	mov	r3, r1
 8016a50:	e7d3      	b.n	80169fa <_UpdateScrollPos+0x7e>
 8016a52:	4628      	mov	r0, r5
 8016a54:	f00e ff5c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016a58:	a801      	add	r0, sp, #4
 8016a5a:	f00e ff59 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016a5e:	4620      	mov	r0, r4
 8016a60:	b008      	add	sp, #32
 8016a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a66:	bf00      	nop

08016a68 <_SetSel>:
 8016a68:	b570      	push	{r4, r5, r6, lr}
 8016a6a:	b084      	sub	sp, #16
 8016a6c:	460d      	mov	r5, r1
 8016a6e:	4604      	mov	r4, r0
 8016a70:	f00e ff3c 	bl	80258ec <GUI_ALLOC_LockH>
 8016a74:	ab04      	add	r3, sp, #16
 8016a76:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
 8016a7a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8016a7e:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
 8016a82:	4618      	mov	r0, r3
 8016a84:	f00e ff44 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f7ff ff77 	bl	801697c <_UpdateScrollPos>
 8016a8e:	b998      	cbnz	r0, 8016ab8 <_SetSel+0x50>
 8016a90:	4631      	mov	r1, r6
 8016a92:	aa02      	add	r2, sp, #8
 8016a94:	4620      	mov	r0, r4
 8016a96:	f7ff fec1 	bl	801681c <_GetVisibility>
 8016a9a:	2801      	cmp	r0, #1
 8016a9c:	d915      	bls.n	8016aca <_SetSel+0x62>
 8016a9e:	4629      	mov	r1, r5
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	aa02      	add	r2, sp, #8
 8016aa4:	f7ff feba 	bl	801681c <_GetVisibility>
 8016aa8:	2801      	cmp	r0, #1
 8016aaa:	d909      	bls.n	8016ac0 <_SetSel+0x58>
 8016aac:	4620      	mov	r0, r4
 8016aae:	2104      	movs	r1, #4
 8016ab0:	f005 fcaa 	bl	801c408 <WM_NotifyParent>
 8016ab4:	b004      	add	sp, #16
 8016ab6:	bd70      	pop	{r4, r5, r6, pc}
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f007 fba1 	bl	801e200 <WM_InvalidateWindow>
 8016abe:	e7f5      	b.n	8016aac <_SetSel+0x44>
 8016ac0:	a902      	add	r1, sp, #8
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f007 fad6 	bl	801e074 <WM_InvalidateRect>
 8016ac8:	e7f0      	b.n	8016aac <_SetSel+0x44>
 8016aca:	4620      	mov	r0, r4
 8016acc:	a902      	add	r1, sp, #8
 8016ace:	f007 fad1 	bl	801e074 <WM_InvalidateRect>
 8016ad2:	e7e4      	b.n	8016a9e <_SetSel+0x36>

08016ad4 <TREEVIEW_CreateIndirect>:
 8016ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad8:	6986      	ldr	r6, [r0, #24]
 8016ada:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 8016ade:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 8016ae2:	8a47      	ldrh	r7, [r0, #18]
 8016ae4:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 8016ae8:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8016aec:	b089      	sub	sp, #36	; 0x24
 8016aee:	4688      	mov	r8, r1
 8016af0:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8016af4:	9705      	str	r7, [sp, #20]
 8016af6:	eb01 0902 	add.w	r9, r1, r2
 8016afa:	449b      	add	fp, r3
 8016afc:	2702      	movs	r7, #2
 8016afe:	f00c fb75 	bl	80231ec <GUI_Lock>
 8016b02:	f106 039c 	add.w	r3, r6, #156	; 0x9c
 8016b06:	4e16      	ldr	r6, [pc, #88]	; (8016b60 <TREEVIEW_CreateIndirect+0x8c>)
 8016b08:	9303      	str	r3, [sp, #12]
 8016b0a:	f8cd 8000 	str.w	r8, [sp]
 8016b0e:	4623      	mov	r3, r4
 8016b10:	4648      	mov	r0, r9
 8016b12:	4659      	mov	r1, fp
 8016b14:	462a      	mov	r2, r5
 8016b16:	9701      	str	r7, [sp, #4]
 8016b18:	9602      	str	r6, [sp, #8]
 8016b1a:	f007 fbcd 	bl	801e2b8 <WM_CreateWindowAsChild>
 8016b1e:	4604      	mov	r4, r0
 8016b20:	b1c0      	cbz	r0, 8016b54 <TREEVIEW_CreateIndirect+0x80>
 8016b22:	f00e fee3 	bl	80258ec <GUI_ALLOC_LockH>
 8016b26:	ae08      	add	r6, sp, #32
 8016b28:	fa0f f18a 	sxth.w	r1, sl
 8016b2c:	2210      	movs	r2, #16
 8016b2e:	9007      	str	r0, [sp, #28]
 8016b30:	f7fe ffb4 	bl	8015a9c <WIDGET__Init>
 8016b34:	f856 5d04 	ldr.w	r5, [r6, #-4]!
 8016b38:	490a      	ldr	r1, [pc, #40]	; (8016b64 <TREEVIEW_CreateIndirect+0x90>)
 8016b3a:	224c      	movs	r2, #76	; 0x4c
 8016b3c:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016b40:	f013 fe30 	bl	802a7a4 <memcpy>
 8016b44:	4b08      	ldr	r3, [pc, #32]	; (8016b68 <TREEVIEW_CreateIndirect+0x94>)
 8016b46:	9f05      	ldr	r7, [sp, #20]
 8016b48:	f8a5 709c 	strh.w	r7, [r5, #156]	; 0x9c
 8016b4c:	4630      	mov	r0, r6
 8016b4e:	636b      	str	r3, [r5, #52]	; 0x34
 8016b50:	f00e fede 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016b54:	f00c fb40 	bl	80231d8 <GUI_Unlock>
 8016b58:	4620      	mov	r0, r4
 8016b5a:	b009      	add	sp, #36	; 0x24
 8016b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b60:	08017269 	.word	0x08017269
 8016b64:	20000134 	.word	0x20000134
 8016b68:	08016091 	.word	0x08016091

08016b6c <TREEVIEW_ITEM_Create>:
 8016b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6e:	460c      	mov	r4, r1
 8016b70:	b083      	sub	sp, #12
 8016b72:	4617      	mov	r7, r2
 8016b74:	4606      	mov	r6, r0
 8016b76:	f00c fb39 	bl	80231ec <GUI_Lock>
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f7e9 fb52 	bl	8000224 <strlen>
 8016b80:	3020      	adds	r0, #32
 8016b82:	f00f f83b 	bl	8025bfc <GUI_ALLOC_AllocZero>
 8016b86:	4605      	mov	r5, r0
 8016b88:	b920      	cbnz	r0, 8016b94 <TREEVIEW_ITEM_Create+0x28>
 8016b8a:	f00c fb25 	bl	80231d8 <GUI_Unlock>
 8016b8e:	4628      	mov	r0, r5
 8016b90:	b003      	add	sp, #12
 8016b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b94:	f00e feaa 	bl	80258ec <GUI_ALLOC_LockH>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	301d      	adds	r0, #29
 8016b9e:	60df      	str	r7, [r3, #12]
 8016ba0:	9301      	str	r3, [sp, #4]
 8016ba2:	f013 ff65 	bl	802aa70 <strcpy>
 8016ba6:	b126      	cbz	r6, 8016bb2 <TREEVIEW_ITEM_Create+0x46>
 8016ba8:	9b01      	ldr	r3, [sp, #4]
 8016baa:	8b1a      	ldrh	r2, [r3, #24]
 8016bac:	f042 0201 	orr.w	r2, r2, #1
 8016bb0:	831a      	strh	r2, [r3, #24]
 8016bb2:	a801      	add	r0, sp, #4
 8016bb4:	f00e feac 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016bb8:	f00c fb0e 	bl	80231d8 <GUI_Unlock>
 8016bbc:	4628      	mov	r0, r5
 8016bbe:	b003      	add	sp, #12
 8016bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bc2:	bf00      	nop

08016bc4 <TREEVIEW_AttachItem>:
 8016bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc8:	4604      	mov	r4, r0
 8016bca:	b08d      	sub	sp, #52	; 0x34
 8016bcc:	468a      	mov	sl, r1
 8016bce:	4693      	mov	fp, r2
 8016bd0:	461f      	mov	r7, r3
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d053      	beq.n	8016c7e <TREEVIEW_AttachItem+0xba>
 8016bd6:	b921      	cbnz	r1, 8016be2 <TREEVIEW_AttachItem+0x1e>
 8016bd8:	4689      	mov	r9, r1
 8016bda:	4648      	mov	r0, r9
 8016bdc:	b00d      	add	sp, #52	; 0x34
 8016bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be2:	f00c fb03 	bl	80231ec <GUI_Lock>
 8016be6:	4650      	mov	r0, sl
 8016be8:	f00e fe80 	bl	80258ec <GUI_ALLOC_LockH>
 8016bec:	6845      	ldr	r5, [r0, #4]
 8016bee:	9006      	str	r0, [sp, #24]
 8016bf0:	2d00      	cmp	r5, #0
 8016bf2:	d149      	bne.n	8016c88 <TREEVIEW_AttachItem+0xc4>
 8016bf4:	46a8      	mov	r8, r5
 8016bf6:	462e      	mov	r6, r5
 8016bf8:	6883      	ldr	r3, [r0, #8]
 8016bfa:	a806      	add	r0, sp, #24
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	f040 80fc 	bne.w	8016dfa <TREEVIEW_AttachItem+0x236>
 8016c02:	f00e fe85 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016c06:	4620      	mov	r0, r4
 8016c08:	f00e fe70 	bl	80258ec <GUI_ALLOC_LockH>
 8016c0c:	9007      	str	r0, [sp, #28]
 8016c0e:	4650      	mov	r0, sl
 8016c10:	f00e fe6c 	bl	80258ec <GUI_ALLOC_LockH>
 8016c14:	9b07      	ldr	r3, [sp, #28]
 8016c16:	9008      	str	r0, [sp, #32]
 8016c18:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8016c1c:	2900      	cmp	r1, #0
 8016c1e:	f000 80f1 	beq.w	8016e04 <TREEVIEW_AttachItem+0x240>
 8016c22:	f1bb 0f00 	cmp.w	fp, #0
 8016c26:	d056      	beq.n	8016cd6 <TREEVIEW_AttachItem+0x112>
 8016c28:	2f02      	cmp	r7, #2
 8016c2a:	f000 8127 	beq.w	8016e7c <TREEVIEW_AttachItem+0x2b8>
 8016c2e:	2f00      	cmp	r7, #0
 8016c30:	f000 8109 	beq.w	8016e46 <TREEVIEW_AttachItem+0x282>
 8016c34:	2f01      	cmp	r7, #1
 8016c36:	f000 813a 	beq.w	8016eae <TREEVIEW_AttachItem+0x2ea>
 8016c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8016c3c:	9204      	str	r2, [sp, #16]
 8016c3e:	3101      	adds	r1, #1
 8016c40:	af0c      	add	r7, sp, #48	; 0x30
 8016c42:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8016c46:	a807      	add	r0, sp, #28
 8016c48:	f00e fe62 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016c4c:	f857 3d10 	ldr.w	r3, [r7, #-16]!
 8016c50:	601c      	str	r4, [r3, #0]
 8016c52:	4638      	mov	r0, r7
 8016c54:	f00e fe5c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f00e fe47 	bl	80258ec <GUI_ALLOC_LockH>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	f04f 0b00 	mov.w	fp, #0
 8016c64:	900b      	str	r0, [sp, #44]	; 0x2c
 8016c66:	9804      	ldr	r0, [sp, #16]
 8016c68:	f8c3 b0b8 	str.w	fp, [r3, #184]	; 0xb8
 8016c6c:	f8c3 b0bc 	str.w	fp, [r3, #188]	; 0xbc
 8016c70:	f00e fe4e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016c74:	4620      	mov	r0, r4
 8016c76:	46d9      	mov	r9, fp
 8016c78:	f007 fac2 	bl	801e200 <WM_InvalidateWindow>
 8016c7c:	e036      	b.n	8016cec <TREEVIEW_AttachItem+0x128>
 8016c7e:	4681      	mov	r9, r0
 8016c80:	4648      	mov	r0, r9
 8016c82:	b00d      	add	sp, #52	; 0x34
 8016c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c88:	4650      	mov	r0, sl
 8016c8a:	f00e fe2f 	bl	80258ec <GUI_ALLOC_LockH>
 8016c8e:	8b03      	ldrh	r3, [r0, #24]
 8016c90:	900b      	str	r0, [sp, #44]	; 0x2c
 8016c92:	07d9      	lsls	r1, r3, #31
 8016c94:	f890 901c 	ldrb.w	r9, [r0, #28]
 8016c98:	f140 80a7 	bpl.w	8016dea <TREEVIEW_AttachItem+0x226>
 8016c9c:	6846      	ldr	r6, [r0, #4]
 8016c9e:	2e00      	cmp	r6, #0
 8016ca0:	f000 80a3 	beq.w	8016dea <TREEVIEW_AttachItem+0x226>
 8016ca4:	4630      	mov	r0, r6
 8016ca6:	f00e fe21 	bl	80258ec <GUI_ALLOC_LockH>
 8016caa:	ab0c      	add	r3, sp, #48	; 0x30
 8016cac:	4686      	mov	lr, r0
 8016cae:	f843 0d08 	str.w	r0, [r3, #-8]!
 8016cb2:	7f01      	ldrb	r1, [r0, #28]
 8016cb4:	46d4      	mov	ip, sl
 8016cb6:	4589      	cmp	r9, r1
 8016cb8:	f280 80c3 	bge.w	8016e42 <TREEVIEW_AttachItem+0x27e>
 8016cbc:	f8de 8004 	ldr.w	r8, [lr, #4]
 8016cc0:	f1b8 0f00 	cmp.w	r8, #0
 8016cc4:	f040 80ac 	bne.w	8016e20 <TREEVIEW_AttachItem+0x25c>
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f00e fe21 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016cce:	e08d      	b.n	8016dec <TREEVIEW_AttachItem+0x228>
 8016cd0:	a809      	add	r0, sp, #36	; 0x24
 8016cd2:	f00e fe1d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016cd6:	a807      	add	r0, sp, #28
 8016cd8:	af08      	add	r7, sp, #32
 8016cda:	f00e fe19 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016cde:	4638      	mov	r0, r7
 8016ce0:	f00e fe16 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016ce4:	ab0b      	add	r3, sp, #44	; 0x2c
 8016ce6:	f04f 0901 	mov.w	r9, #1
 8016cea:	9304      	str	r3, [sp, #16]
 8016cec:	4650      	mov	r0, sl
 8016cee:	f00e fdfd 	bl	80258ec <GUI_ALLOC_LockH>
 8016cf2:	9006      	str	r0, [sp, #24]
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f00e fdf9 	bl	80258ec <GUI_ALLOC_LockH>
 8016cfa:	9a06      	ldr	r2, [sp, #24]
 8016cfc:	9008      	str	r0, [sp, #32]
 8016cfe:	7f12      	ldrb	r2, [r2, #28]
 8016d00:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016d02:	9205      	str	r2, [sp, #20]
 8016d04:	f00d fd70 	bl	80247e8 <GUI_SetFont>
 8016d08:	f8dd b018 	ldr.w	fp, [sp, #24]
 8016d0c:	9908      	ldr	r1, [sp, #32]
 8016d0e:	f89b 001c 	ldrb.w	r0, [fp, #28]
 8016d12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8016d16:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 8016d1a:	fb00 2202 	mla	r2, r0, r2, r2
 8016d1e:	440a      	add	r2, r1
 8016d20:	f10b 001d 	add.w	r0, fp, #29
 8016d24:	fa1f fa82 	uxth.w	sl, r2
 8016d28:	f00c ff84 	bl	8023c34 <GUI_GetStringDistX>
 8016d2c:	4450      	add	r0, sl
 8016d2e:	f8ab 0014 	strh.w	r0, [fp, #20]
 8016d32:	2d00      	cmp	r5, #0
 8016d34:	d03d      	beq.n	8016db2 <TREEVIEW_AttachItem+0x1ee>
 8016d36:	f1b9 0f00 	cmp.w	r9, #0
 8016d3a:	d13a      	bne.n	8016db2 <TREEVIEW_AttachItem+0x1ee>
 8016d3c:	9806      	ldr	r0, [sp, #24]
 8016d3e:	46ab      	mov	fp, r5
 8016d40:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8016d44:	6004      	str	r4, [r0, #0]
 8016d46:	6045      	str	r5, [r0, #4]
 8016d48:	e003      	b.n	8016d52 <TREEVIEW_AttachItem+0x18e>
 8016d4a:	455e      	cmp	r6, fp
 8016d4c:	d019      	beq.n	8016d82 <TREEVIEW_AttachItem+0x1be>
 8016d4e:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8016d52:	9908      	ldr	r1, [sp, #32]
 8016d54:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 8016d58:	3501      	adds	r5, #1
 8016d5a:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 8016d5e:	f1bb 0f00 	cmp.w	fp, #0
 8016d62:	d0f2      	beq.n	8016d4a <TREEVIEW_AttachItem+0x186>
 8016d64:	a806      	add	r0, sp, #24
 8016d66:	f00e fdd3 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016d6a:	4658      	mov	r0, fp
 8016d6c:	f00e fdbe 	bl	80258ec <GUI_ALLOC_LockH>
 8016d70:	9a05      	ldr	r2, [sp, #20]
 8016d72:	7f01      	ldrb	r1, [r0, #28]
 8016d74:	9006      	str	r0, [sp, #24]
 8016d76:	4411      	add	r1, r2
 8016d78:	ebc8 0101 	rsb	r1, r8, r1
 8016d7c:	6004      	str	r4, [r0, #0]
 8016d7e:	7701      	strb	r1, [r0, #28]
 8016d80:	e7e3      	b.n	8016d4a <TREEVIEW_AttachItem+0x186>
 8016d82:	4630      	mov	r0, r6
 8016d84:	f00e fdb2 	bl	80258ec <GUI_ALLOC_LockH>
 8016d88:	aa0c      	add	r2, sp, #48	; 0x30
 8016d8a:	f842 0d08 	str.w	r0, [r2, #-8]!
 8016d8e:	f8c0 a004 	str.w	sl, [r0, #4]
 8016d92:	4610      	mov	r0, r2
 8016d94:	f00e fdbc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016d98:	f1ba 0f00 	cmp.w	sl, #0
 8016d9c:	d009      	beq.n	8016db2 <TREEVIEW_AttachItem+0x1ee>
 8016d9e:	4650      	mov	r0, sl
 8016da0:	f00e fda4 	bl	80258ec <GUI_ALLOC_LockH>
 8016da4:	aa0c      	add	r2, sp, #48	; 0x30
 8016da6:	f842 0d0c 	str.w	r0, [r2, #-12]!
 8016daa:	6086      	str	r6, [r0, #8]
 8016dac:	4610      	mov	r0, r2
 8016dae:	f00e fdaf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016db2:	4638      	mov	r0, r7
 8016db4:	f00e fdac 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016db8:	a806      	add	r0, sp, #24
 8016dba:	f00e fda9 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f00e fd94 	bl	80258ec <GUI_ALLOC_LockH>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8016dca:	9804      	ldr	r0, [sp, #16]
 8016dcc:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
 8016dd0:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
 8016dd4:	f00e fd9c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f007 fa11 	bl	801e200 <WM_InvalidateWindow>
 8016dde:	f00c f9fb 	bl	80231d8 <GUI_Unlock>
 8016de2:	4648      	mov	r0, r9
 8016de4:	b00d      	add	sp, #52	; 0x34
 8016de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dea:	4656      	mov	r6, sl
 8016dec:	a80b      	add	r0, sp, #44	; 0x2c
 8016dee:	f00e fd8f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016df2:	9806      	ldr	r0, [sp, #24]
 8016df4:	f890 801c 	ldrb.w	r8, [r0, #28]
 8016df8:	e6fe      	b.n	8016bf8 <TREEVIEW_AttachItem+0x34>
 8016dfa:	f00e fd89 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016dfe:	f04f 0900 	mov.w	r9, #0
 8016e02:	e7ec      	b.n	8016dde <TREEVIEW_AttachItem+0x21a>
 8016e04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8016e08:	2a00      	cmp	r2, #0
 8016e0a:	f47f af64 	bne.w	8016cd6 <TREEVIEW_AttachItem+0x112>
 8016e0e:	f8c3 a0a8 	str.w	sl, [r3, #168]	; 0xa8
 8016e12:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 8016e16:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 8016e1a:	6041      	str	r1, [r0, #4]
 8016e1c:	6081      	str	r1, [r0, #8]
 8016e1e:	e70c      	b.n	8016c3a <TREEVIEW_AttachItem+0x76>
 8016e20:	4618      	mov	r0, r3
 8016e22:	9301      	str	r3, [sp, #4]
 8016e24:	f00e fd74 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016e28:	4640      	mov	r0, r8
 8016e2a:	f00e fd5f 	bl	80258ec <GUI_ALLOC_LockH>
 8016e2e:	900a      	str	r0, [sp, #40]	; 0x28
 8016e30:	7f01      	ldrb	r1, [r0, #28]
 8016e32:	9b01      	ldr	r3, [sp, #4]
 8016e34:	4589      	cmp	r9, r1
 8016e36:	bfb4      	ite	lt
 8016e38:	46c4      	movlt	ip, r8
 8016e3a:	46b4      	movge	ip, r6
 8016e3c:	4686      	mov	lr, r0
 8016e3e:	4646      	mov	r6, r8
 8016e40:	e739      	b.n	8016cb6 <TREEVIEW_AttachItem+0xf2>
 8016e42:	4666      	mov	r6, ip
 8016e44:	e740      	b.n	8016cc8 <TREEVIEW_AttachItem+0x104>
 8016e46:	4658      	mov	r0, fp
 8016e48:	f00e fd50 	bl	80258ec <GUI_ALLOC_LockH>
 8016e4c:	6887      	ldr	r7, [r0, #8]
 8016e4e:	900a      	str	r0, [sp, #40]	; 0x28
 8016e50:	2f00      	cmp	r7, #0
 8016e52:	d164      	bne.n	8016f1e <TREEVIEW_AttachItem+0x35a>
 8016e54:	9b07      	ldr	r3, [sp, #28]
 8016e56:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
 8016e5a:	9b08      	ldr	r3, [sp, #32]
 8016e5c:	7f01      	ldrb	r1, [r0, #28]
 8016e5e:	f8c0 a008 	str.w	sl, [r0, #8]
 8016e62:	a80a      	add	r0, sp, #40	; 0x28
 8016e64:	7719      	strb	r1, [r3, #28]
 8016e66:	f8c3 b004 	str.w	fp, [r3, #4]
 8016e6a:	609f      	str	r7, [r3, #8]
 8016e6c:	f00e fd50 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016e70:	9b07      	ldr	r3, [sp, #28]
 8016e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8016e74:	9204      	str	r2, [sp, #16]
 8016e76:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8016e7a:	e6e0      	b.n	8016c3e <TREEVIEW_AttachItem+0x7a>
 8016e7c:	4658      	mov	r0, fp
 8016e7e:	f00e fd35 	bl	80258ec <GUI_ALLOC_LockH>
 8016e82:	8b03      	ldrh	r3, [r0, #24]
 8016e84:	9009      	str	r0, [sp, #36]	; 0x24
 8016e86:	07da      	lsls	r2, r3, #31
 8016e88:	f57f af22 	bpl.w	8016cd0 <TREEVIEW_AttachItem+0x10c>
 8016e8c:	6847      	ldr	r7, [r0, #4]
 8016e8e:	2f00      	cmp	r7, #0
 8016e90:	d15f      	bne.n	8016f52 <TREEVIEW_AttachItem+0x38e>
 8016e92:	9b07      	ldr	r3, [sp, #28]
 8016e94:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 8016e98:	7f01      	ldrb	r1, [r0, #28]
 8016e9a:	9b08      	ldr	r3, [sp, #32]
 8016e9c:	f8c0 a004 	str.w	sl, [r0, #4]
 8016ea0:	3101      	adds	r1, #1
 8016ea2:	7719      	strb	r1, [r3, #28]
 8016ea4:	605f      	str	r7, [r3, #4]
 8016ea6:	f8c3 b008 	str.w	fp, [r3, #8]
 8016eaa:	a809      	add	r0, sp, #36	; 0x24
 8016eac:	e7de      	b.n	8016e6c <TREEVIEW_AttachItem+0x2a8>
 8016eae:	4658      	mov	r0, fp
 8016eb0:	f00e fd1c 	bl	80258ec <GUI_ALLOC_LockH>
 8016eb4:	af0c      	add	r7, sp, #48	; 0x30
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	f847 0d0c 	str.w	r0, [r7, #-12]!
 8016ebc:	7f1b      	ldrb	r3, [r3, #28]
 8016ebe:	9305      	str	r3, [sp, #20]
 8016ec0:	4638      	mov	r0, r7
 8016ec2:	f00e fd25 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016ec6:	4658      	mov	r0, fp
 8016ec8:	f00e fd10 	bl	80258ec <GUI_ALLOC_LockH>
 8016ecc:	8b03      	ldrh	r3, [r0, #24]
 8016ece:	900b      	str	r0, [sp, #44]	; 0x2c
 8016ed0:	07db      	lsls	r3, r3, #31
 8016ed2:	7f01      	ldrb	r1, [r0, #28]
 8016ed4:	d502      	bpl.n	8016edc <TREEVIEW_AttachItem+0x318>
 8016ed6:	6842      	ldr	r2, [r0, #4]
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	d147      	bne.n	8016f6c <TREEVIEW_AttachItem+0x3a8>
 8016edc:	ab0b      	add	r3, sp, #44	; 0x2c
 8016ede:	4618      	mov	r0, r3
 8016ee0:	9304      	str	r3, [sp, #16]
 8016ee2:	f00e fd15 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016ee6:	4658      	mov	r0, fp
 8016ee8:	f00e fd00 	bl	80258ec <GUI_ALLOC_LockH>
 8016eec:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016ef0:	9009      	str	r0, [sp, #36]	; 0x24
 8016ef2:	f1b9 0f00 	cmp.w	r9, #0
 8016ef6:	d11f      	bne.n	8016f38 <TREEVIEW_AttachItem+0x374>
 8016ef8:	9b07      	ldr	r3, [sp, #28]
 8016efa:	f8c3 a0a4 	str.w	sl, [r3, #164]	; 0xa4
 8016efe:	9b08      	ldr	r3, [sp, #32]
 8016f00:	9a05      	ldr	r2, [sp, #20]
 8016f02:	f8c0 a004 	str.w	sl, [r0, #4]
 8016f06:	f8c3 9004 	str.w	r9, [r3, #4]
 8016f0a:	f8c3 b008 	str.w	fp, [r3, #8]
 8016f0e:	771a      	strb	r2, [r3, #28]
 8016f10:	4638      	mov	r0, r7
 8016f12:	f00e fcfd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016f16:	9b07      	ldr	r3, [sp, #28]
 8016f18:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8016f1c:	e68f      	b.n	8016c3e <TREEVIEW_AttachItem+0x7a>
 8016f1e:	4638      	mov	r0, r7
 8016f20:	f00e fce4 	bl	80258ec <GUI_ALLOC_LockH>
 8016f24:	ab0c      	add	r3, sp, #48	; 0x30
 8016f26:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8016f2a:	f8c0 a004 	str.w	sl, [r0, #4]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f00e fcee 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016f34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f36:	e790      	b.n	8016e5a <TREEVIEW_AttachItem+0x296>
 8016f38:	4648      	mov	r0, r9
 8016f3a:	f00e fcd7 	bl	80258ec <GUI_ALLOC_LockH>
 8016f3e:	ab0c      	add	r3, sp, #48	; 0x30
 8016f40:	f843 0d08 	str.w	r0, [r3, #-8]!
 8016f44:	f8c0 a008 	str.w	sl, [r0, #8]
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f00e fce1 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f50:	e7d5      	b.n	8016efe <TREEVIEW_AttachItem+0x33a>
 8016f52:	4638      	mov	r0, r7
 8016f54:	f00e fcca 	bl	80258ec <GUI_ALLOC_LockH>
 8016f58:	ab0c      	add	r3, sp, #48	; 0x30
 8016f5a:	f843 0d08 	str.w	r0, [r3, #-8]!
 8016f5e:	f8c0 a008 	str.w	sl, [r0, #8]
 8016f62:	4618      	mov	r0, r3
 8016f64:	f00e fcd4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f6a:	e795      	b.n	8016e98 <TREEVIEW_AttachItem+0x2d4>
 8016f6c:	4610      	mov	r0, r2
 8016f6e:	9103      	str	r1, [sp, #12]
 8016f70:	9202      	str	r2, [sp, #8]
 8016f72:	f00e fcbb 	bl	80258ec <GUI_ALLOC_LockH>
 8016f76:	ab0c      	add	r3, sp, #48	; 0x30
 8016f78:	4686      	mov	lr, r0
 8016f7a:	f843 ed08 	str.w	lr, [r3, #-8]!
 8016f7e:	9903      	ldr	r1, [sp, #12]
 8016f80:	f89e e01c 	ldrb.w	lr, [lr, #28]
 8016f84:	9a02      	ldr	r2, [sp, #8]
 8016f86:	4571      	cmp	r1, lr
 8016f88:	da20      	bge.n	8016fcc <TREEVIEW_AttachItem+0x408>
 8016f8a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016f8e:	f1b9 0f00 	cmp.w	r9, #0
 8016f92:	d106      	bne.n	8016fa2 <TREEVIEW_AttachItem+0x3de>
 8016f94:	4618      	mov	r0, r3
 8016f96:	9202      	str	r2, [sp, #8]
 8016f98:	f00e fcba 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016f9c:	9a02      	ldr	r2, [sp, #8]
 8016f9e:	4693      	mov	fp, r2
 8016fa0:	e79c      	b.n	8016edc <TREEVIEW_AttachItem+0x318>
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	9103      	str	r1, [sp, #12]
 8016fa6:	9202      	str	r2, [sp, #8]
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	f00e fcb1 	bl	8025910 <GUI_ALLOC_UnlockH>
 8016fae:	4648      	mov	r0, r9
 8016fb0:	f00e fc9c 	bl	80258ec <GUI_ALLOC_LockH>
 8016fb4:	900a      	str	r0, [sp, #40]	; 0x28
 8016fb6:	9a02      	ldr	r2, [sp, #8]
 8016fb8:	f890 e01c 	ldrb.w	lr, [r0, #28]
 8016fbc:	9903      	ldr	r1, [sp, #12]
 8016fbe:	9b01      	ldr	r3, [sp, #4]
 8016fc0:	4571      	cmp	r1, lr
 8016fc2:	bfb4      	ite	lt
 8016fc4:	46cb      	movlt	fp, r9
 8016fc6:	4693      	movge	fp, r2
 8016fc8:	464a      	mov	r2, r9
 8016fca:	e7dc      	b.n	8016f86 <TREEVIEW_AttachItem+0x3c2>
 8016fcc:	465a      	mov	r2, fp
 8016fce:	e7e1      	b.n	8016f94 <TREEVIEW_AttachItem+0x3d0>

08016fd0 <TREEVIEW_GetItem>:
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	b087      	sub	sp, #28
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	460c      	mov	r4, r1
 8016fd8:	4615      	mov	r5, r2
 8016fda:	9303      	str	r3, [sp, #12]
 8016fdc:	b921      	cbnz	r1, 8016fe8 <TREEVIEW_GetItem+0x18>
 8016fde:	2a01      	cmp	r2, #1
 8016fe0:	d902      	bls.n	8016fe8 <TREEVIEW_GetItem+0x18>
 8016fe2:	4608      	mov	r0, r1
 8016fe4:	b007      	add	sp, #28
 8016fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d0fb      	beq.n	8016fe4 <TREEVIEW_GetItem+0x14>
 8016fec:	9001      	str	r0, [sp, #4]
 8016fee:	f00c f8fd 	bl	80231ec <GUI_Lock>
 8016ff2:	9801      	ldr	r0, [sp, #4]
 8016ff4:	f00e fc7a 	bl	80258ec <GUI_ALLOC_LockH>
 8016ff8:	9002      	str	r0, [sp, #8]
 8016ffa:	b944      	cbnz	r4, 801700e <TREEVIEW_GetItem+0x3e>
 8016ffc:	9b03      	ldr	r3, [sp, #12]
 8016ffe:	2d05      	cmp	r5, #5
 8017000:	f200 80c5 	bhi.w	801718e <TREEVIEW_GetItem+0x1be>
 8017004:	e8df f005 	tbb	[pc, r5]
 8017008:	324b6d73 	.word	0x324b6d73
 801700c:	091a      	.short	0x091a
 801700e:	4620      	mov	r0, r4
 8017010:	f00e fc6c 	bl	80258ec <GUI_ALLOC_LockH>
 8017014:	9003      	str	r0, [sp, #12]
 8017016:	4603      	mov	r3, r0
 8017018:	e7f1      	b.n	8016ffe <TREEVIEW_GetItem+0x2e>
 801701a:	2b00      	cmp	r3, #0
 801701c:	d06d      	beq.n	80170fa <TREEVIEW_GetItem+0x12a>
 801701e:	7f1e      	ldrb	r6, [r3, #28]
 8017020:	2e00      	cmp	r6, #0
 8017022:	d16c      	bne.n	80170fe <TREEVIEW_GetItem+0x12e>
 8017024:	4634      	mov	r4, r6
 8017026:	a803      	add	r0, sp, #12
 8017028:	f00e fc72 	bl	8025910 <GUI_ALLOC_UnlockH>
 801702c:	a802      	add	r0, sp, #8
 801702e:	f00e fc6f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017032:	f00c f8d1 	bl	80231d8 <GUI_Unlock>
 8017036:	4620      	mov	r0, r4
 8017038:	b007      	add	sp, #28
 801703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801703c:	2b00      	cmp	r3, #0
 801703e:	d05c      	beq.n	80170fa <TREEVIEW_GetItem+0x12a>
 8017040:	8b1c      	ldrh	r4, [r3, #24]
 8017042:	f014 0401 	ands.w	r4, r4, #1
 8017046:	d0ee      	beq.n	8017026 <TREEVIEW_GetItem+0x56>
 8017048:	685c      	ldr	r4, [r3, #4]
 801704a:	4620      	mov	r0, r4
 801704c:	f00e fc4e 	bl	80258ec <GUI_ALLOC_LockH>
 8017050:	9b03      	ldr	r3, [sp, #12]
 8017052:	9005      	str	r0, [sp, #20]
 8017054:	7f02      	ldrb	r2, [r0, #28]
 8017056:	7f1b      	ldrb	r3, [r3, #28]
 8017058:	a805      	add	r0, sp, #20
 801705a:	429a      	cmp	r2, r3
 801705c:	bf98      	it	ls
 801705e:	2400      	movls	r4, #0
 8017060:	f00e fc56 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017064:	9b03      	ldr	r3, [sp, #12]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d1dd      	bne.n	8017026 <TREEVIEW_GetItem+0x56>
 801706a:	e7df      	b.n	801702c <TREEVIEW_GetItem+0x5c>
 801706c:	2b00      	cmp	r3, #0
 801706e:	d044      	beq.n	80170fa <TREEVIEW_GetItem+0x12a>
 8017070:	4620      	mov	r0, r4
 8017072:	7f1e      	ldrb	r6, [r3, #28]
 8017074:	f00e fc3a 	bl	80258ec <GUI_ALLOC_LockH>
 8017078:	6884      	ldr	r4, [r0, #8]
 801707a:	9005      	str	r0, [sp, #20]
 801707c:	ad05      	add	r5, sp, #20
 801707e:	b91c      	cbnz	r4, 8017088 <TREEVIEW_GetItem+0xb8>
 8017080:	e027      	b.n	80170d2 <TREEVIEW_GetItem+0x102>
 8017082:	dc26      	bgt.n	80170d2 <TREEVIEW_GetItem+0x102>
 8017084:	6884      	ldr	r4, [r0, #8]
 8017086:	b324      	cbz	r4, 80170d2 <TREEVIEW_GetItem+0x102>
 8017088:	4628      	mov	r0, r5
 801708a:	f00e fc41 	bl	8025910 <GUI_ALLOC_UnlockH>
 801708e:	4620      	mov	r0, r4
 8017090:	f00e fc2c 	bl	80258ec <GUI_ALLOC_LockH>
 8017094:	9005      	str	r0, [sp, #20]
 8017096:	7f03      	ldrb	r3, [r0, #28]
 8017098:	429e      	cmp	r6, r3
 801709a:	d1f2      	bne.n	8017082 <TREEVIEW_GetItem+0xb2>
 801709c:	e01a      	b.n	80170d4 <TREEVIEW_GetItem+0x104>
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d02b      	beq.n	80170fa <TREEVIEW_GetItem+0x12a>
 80170a2:	4620      	mov	r0, r4
 80170a4:	f00e fc22 	bl	80258ec <GUI_ALLOC_LockH>
 80170a8:	8b03      	ldrh	r3, [r0, #24]
 80170aa:	9005      	str	r0, [sp, #20]
 80170ac:	07db      	lsls	r3, r3, #31
 80170ae:	7f06      	ldrb	r6, [r0, #28]
 80170b0:	d502      	bpl.n	80170b8 <TREEVIEW_GetItem+0xe8>
 80170b2:	6845      	ldr	r5, [r0, #4]
 80170b4:	2d00      	cmp	r5, #0
 80170b6:	d13a      	bne.n	801712e <TREEVIEW_GetItem+0x15e>
 80170b8:	ad05      	add	r5, sp, #20
 80170ba:	4628      	mov	r0, r5
 80170bc:	f00e fc28 	bl	8025910 <GUI_ALLOC_UnlockH>
 80170c0:	2c00      	cmp	r4, #0
 80170c2:	d0cf      	beq.n	8017064 <TREEVIEW_GetItem+0x94>
 80170c4:	4620      	mov	r0, r4
 80170c6:	f00e fc11 	bl	80258ec <GUI_ALLOC_LockH>
 80170ca:	6844      	ldr	r4, [r0, #4]
 80170cc:	9005      	str	r0, [sp, #20]
 80170ce:	2c00      	cmp	r4, #0
 80170d0:	d150      	bne.n	8017174 <TREEVIEW_GetItem+0x1a4>
 80170d2:	2400      	movs	r4, #0
 80170d4:	4628      	mov	r0, r5
 80170d6:	f00e fc1b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80170da:	9b03      	ldr	r3, [sp, #12]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d1a2      	bne.n	8017026 <TREEVIEW_GetItem+0x56>
 80170e0:	e7a4      	b.n	801702c <TREEVIEW_GetItem+0x5c>
 80170e2:	9a02      	ldr	r2, [sp, #8]
 80170e4:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d19c      	bne.n	8017026 <TREEVIEW_GetItem+0x56>
 80170ec:	e79e      	b.n	801702c <TREEVIEW_GetItem+0x5c>
 80170ee:	9a02      	ldr	r2, [sp, #8]
 80170f0:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d196      	bne.n	8017026 <TREEVIEW_GetItem+0x56>
 80170f8:	e798      	b.n	801702c <TREEVIEW_GetItem+0x5c>
 80170fa:	461c      	mov	r4, r3
 80170fc:	e796      	b.n	801702c <TREEVIEW_GetItem+0x5c>
 80170fe:	4620      	mov	r0, r4
 8017100:	f00e fbf4 	bl	80258ec <GUI_ALLOC_LockH>
 8017104:	6884      	ldr	r4, [r0, #8]
 8017106:	9005      	str	r0, [sp, #20]
 8017108:	3e01      	subs	r6, #1
 801710a:	ad05      	add	r5, sp, #20
 801710c:	b924      	cbnz	r4, 8017118 <TREEVIEW_GetItem+0x148>
 801710e:	e7e0      	b.n	80170d2 <TREEVIEW_GetItem+0x102>
 8017110:	dcdf      	bgt.n	80170d2 <TREEVIEW_GetItem+0x102>
 8017112:	6884      	ldr	r4, [r0, #8]
 8017114:	2c00      	cmp	r4, #0
 8017116:	d0dc      	beq.n	80170d2 <TREEVIEW_GetItem+0x102>
 8017118:	4628      	mov	r0, r5
 801711a:	f00e fbf9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801711e:	4620      	mov	r0, r4
 8017120:	f00e fbe4 	bl	80258ec <GUI_ALLOC_LockH>
 8017124:	9005      	str	r0, [sp, #20]
 8017126:	7f03      	ldrb	r3, [r0, #28]
 8017128:	429e      	cmp	r6, r3
 801712a:	d1f1      	bne.n	8017110 <TREEVIEW_GetItem+0x140>
 801712c:	e7d2      	b.n	80170d4 <TREEVIEW_GetItem+0x104>
 801712e:	4628      	mov	r0, r5
 8017130:	f00e fbdc 	bl	80258ec <GUI_ALLOC_LockH>
 8017134:	af06      	add	r7, sp, #24
 8017136:	7f03      	ldrb	r3, [r0, #28]
 8017138:	f847 0d08 	str.w	r0, [r7, #-8]!
 801713c:	4621      	mov	r1, r4
 801713e:	4602      	mov	r2, r0
 8017140:	462c      	mov	r4, r5
 8017142:	429e      	cmp	r6, r3
 8017144:	da14      	bge.n	8017170 <TREEVIEW_GetItem+0x1a0>
 8017146:	6855      	ldr	r5, [r2, #4]
 8017148:	b91d      	cbnz	r5, 8017152 <TREEVIEW_GetItem+0x182>
 801714a:	4638      	mov	r0, r7
 801714c:	f00e fbe0 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017150:	e7b2      	b.n	80170b8 <TREEVIEW_GetItem+0xe8>
 8017152:	4638      	mov	r0, r7
 8017154:	f00e fbdc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017158:	4628      	mov	r0, r5
 801715a:	f00e fbc7 	bl	80258ec <GUI_ALLOC_LockH>
 801715e:	7f03      	ldrb	r3, [r0, #28]
 8017160:	9004      	str	r0, [sp, #16]
 8017162:	429e      	cmp	r6, r3
 8017164:	bfb4      	ite	lt
 8017166:	4629      	movlt	r1, r5
 8017168:	4621      	movge	r1, r4
 801716a:	4602      	mov	r2, r0
 801716c:	462c      	mov	r4, r5
 801716e:	e7e8      	b.n	8017142 <TREEVIEW_GetItem+0x172>
 8017170:	460c      	mov	r4, r1
 8017172:	e7ea      	b.n	801714a <TREEVIEW_GetItem+0x17a>
 8017174:	4628      	mov	r0, r5
 8017176:	f00e fbcb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801717a:	4620      	mov	r0, r4
 801717c:	f00e fbb6 	bl	80258ec <GUI_ALLOC_LockH>
 8017180:	9b03      	ldr	r3, [sp, #12]
 8017182:	9005      	str	r0, [sp, #20]
 8017184:	7f02      	ldrb	r2, [r0, #28]
 8017186:	7f1b      	ldrb	r3, [r3, #28]
 8017188:	429a      	cmp	r2, r3
 801718a:	d1a2      	bne.n	80170d2 <TREEVIEW_GetItem+0x102>
 801718c:	e7a2      	b.n	80170d4 <TREEVIEW_GetItem+0x104>
 801718e:	2400      	movs	r4, #0
 8017190:	2b00      	cmp	r3, #0
 8017192:	f47f af48 	bne.w	8017026 <TREEVIEW_GetItem+0x56>
 8017196:	e749      	b.n	801702c <TREEVIEW_GetItem+0x5c>

08017198 <TREEVIEW_ITEM_Expand>:
 8017198:	b510      	push	{r4, lr}
 801719a:	4604      	mov	r4, r0
 801719c:	b082      	sub	sp, #8
 801719e:	b908      	cbnz	r0, 80171a4 <TREEVIEW_ITEM_Expand+0xc>
 80171a0:	b002      	add	sp, #8
 80171a2:	bd10      	pop	{r4, pc}
 80171a4:	f00c f822 	bl	80231ec <GUI_Lock>
 80171a8:	4620      	mov	r0, r4
 80171aa:	f00e fb9f 	bl	80258ec <GUI_ALLOC_LockH>
 80171ae:	8b03      	ldrh	r3, [r0, #24]
 80171b0:	9000      	str	r0, [sp, #0]
 80171b2:	f003 0203 	and.w	r2, r3, #3
 80171b6:	2a01      	cmp	r2, #1
 80171b8:	6804      	ldr	r4, [r0, #0]
 80171ba:	d006      	beq.n	80171ca <TREEVIEW_ITEM_Expand+0x32>
 80171bc:	4668      	mov	r0, sp
 80171be:	f00e fba7 	bl	8025910 <GUI_ALLOC_UnlockH>
 80171c2:	f00c f809 	bl	80231d8 <GUI_Unlock>
 80171c6:	b002      	add	sp, #8
 80171c8:	bd10      	pop	{r4, pc}
 80171ca:	f043 0302 	orr.w	r3, r3, #2
 80171ce:	8303      	strh	r3, [r0, #24]
 80171d0:	4668      	mov	r0, sp
 80171d2:	f00e fb9d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80171d6:	2c00      	cmp	r4, #0
 80171d8:	d0f3      	beq.n	80171c2 <TREEVIEW_ITEM_Expand+0x2a>
 80171da:	4620      	mov	r0, r4
 80171dc:	f00e fb86 	bl	80258ec <GUI_ALLOC_LockH>
 80171e0:	4603      	mov	r3, r0
 80171e2:	a802      	add	r0, sp, #8
 80171e4:	2200      	movs	r2, #0
 80171e6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80171ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80171ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80171f2:	f00e fb8d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80171f6:	4620      	mov	r0, r4
 80171f8:	f007 f802 	bl	801e200 <WM_InvalidateWindow>
 80171fc:	e7e1      	b.n	80171c2 <TREEVIEW_ITEM_Expand+0x2a>
 80171fe:	bf00      	nop

08017200 <TREEVIEW_ITEM_Collapse>:
 8017200:	b510      	push	{r4, lr}
 8017202:	4604      	mov	r4, r0
 8017204:	b082      	sub	sp, #8
 8017206:	b908      	cbnz	r0, 801720c <TREEVIEW_ITEM_Collapse+0xc>
 8017208:	b002      	add	sp, #8
 801720a:	bd10      	pop	{r4, pc}
 801720c:	f00b ffee 	bl	80231ec <GUI_Lock>
 8017210:	4620      	mov	r0, r4
 8017212:	f00e fb6b 	bl	80258ec <GUI_ALLOC_LockH>
 8017216:	8b03      	ldrh	r3, [r0, #24]
 8017218:	9000      	str	r0, [sp, #0]
 801721a:	f003 0203 	and.w	r2, r3, #3
 801721e:	2a03      	cmp	r2, #3
 8017220:	6804      	ldr	r4, [r0, #0]
 8017222:	d006      	beq.n	8017232 <TREEVIEW_ITEM_Collapse+0x32>
 8017224:	4668      	mov	r0, sp
 8017226:	f00e fb73 	bl	8025910 <GUI_ALLOC_UnlockH>
 801722a:	f00b ffd5 	bl	80231d8 <GUI_Unlock>
 801722e:	b002      	add	sp, #8
 8017230:	bd10      	pop	{r4, pc}
 8017232:	f023 0302 	bic.w	r3, r3, #2
 8017236:	8303      	strh	r3, [r0, #24]
 8017238:	4668      	mov	r0, sp
 801723a:	f00e fb69 	bl	8025910 <GUI_ALLOC_UnlockH>
 801723e:	2c00      	cmp	r4, #0
 8017240:	d0f3      	beq.n	801722a <TREEVIEW_ITEM_Collapse+0x2a>
 8017242:	4620      	mov	r0, r4
 8017244:	f00e fb52 	bl	80258ec <GUI_ALLOC_LockH>
 8017248:	4603      	mov	r3, r0
 801724a:	a802      	add	r0, sp, #8
 801724c:	2200      	movs	r2, #0
 801724e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8017252:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8017256:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 801725a:	f00e fb59 	bl	8025910 <GUI_ALLOC_UnlockH>
 801725e:	4620      	mov	r0, r4
 8017260:	f006 ffce 	bl	801e200 <WM_InvalidateWindow>
 8017264:	e7e1      	b.n	801722a <TREEVIEW_ITEM_Collapse+0x2a>
 8017266:	bf00      	nop

08017268 <TREEVIEW_Callback>:
 8017268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801726c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8017270:	b0c5      	sub	sp, #276	; 0x114
 8017272:	4604      	mov	r4, r0
 8017274:	4601      	mov	r1, r0
 8017276:	4658      	mov	r0, fp
 8017278:	f7fe fd0a 	bl	8015c90 <WIDGET_HandleActive>
 801727c:	b150      	cbz	r0, 8017294 <TREEVIEW_Callback+0x2c>
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	2b26      	cmp	r3, #38	; 0x26
 8017282:	d068      	beq.n	8017356 <TREEVIEW_Callback+0xee>
 8017284:	dc09      	bgt.n	801729a <TREEVIEW_Callback+0x32>
 8017286:	2b0e      	cmp	r3, #14
 8017288:	d025      	beq.n	80172d6 <TREEVIEW_Callback+0x6e>
 801728a:	2b0f      	cmp	r3, #15
 801728c:	f000 80a1 	beq.w	80173d2 <TREEVIEW_Callback+0x16a>
 8017290:	2b0b      	cmp	r3, #11
 8017292:	d075      	beq.n	8017380 <TREEVIEW_Callback+0x118>
 8017294:	b045      	add	sp, #276	; 0x114
 8017296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729a:	f240 1213 	movw	r2, #275	; 0x113
 801729e:	4293      	cmp	r3, r2
 80172a0:	d048      	beq.n	8017334 <TREEVIEW_Callback+0xcc>
 80172a2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80172a6:	f000 810b 	beq.w	80174c0 <TREEVIEW_Callback+0x258>
 80172aa:	2b2e      	cmp	r3, #46	; 0x2e
 80172ac:	d1f2      	bne.n	8017294 <TREEVIEW_Callback+0x2c>
 80172ae:	4658      	mov	r0, fp
 80172b0:	f00e fb1c 	bl	80258ec <GUI_ALLOC_LockH>
 80172b4:	ab44      	add	r3, sp, #272	; 0x110
 80172b6:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 80172ba:	f843 0d70 	str.w	r0, [r3, #-112]!
 80172be:	4618      	mov	r0, r3
 80172c0:	f00e fb26 	bl	8025910 <GUI_ALLOC_UnlockH>
 80172c4:	2c00      	cmp	r4, #0
 80172c6:	d1e5      	bne.n	8017294 <TREEVIEW_Callback+0x2c>
 80172c8:	4658      	mov	r0, fp
 80172ca:	f7ff f88d 	bl	80163e8 <_CalcParams>
 80172ce:	4658      	mov	r0, fp
 80172d0:	f7ff f98a 	bl	80165e8 <_ManageAutoScroll>
 80172d4:	e7de      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80172d6:	4658      	mov	r0, fp
 80172d8:	f00e fb08 	bl	80258ec <GUI_ALLOC_LockH>
 80172dc:	ab44      	add	r3, sp, #272	; 0x110
 80172de:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 80172e2:	f843 0dd0 	str.w	r0, [r3, #-208]!
 80172e6:	4618      	mov	r0, r3
 80172e8:	f00e fb12 	bl	8025910 <GUI_ALLOC_UnlockH>
 80172ec:	2d00      	cmp	r5, #0
 80172ee:	d1d1      	bne.n	8017294 <TREEVIEW_Callback+0x2c>
 80172f0:	68e3      	ldr	r3, [r4, #12]
 80172f2:	685a      	ldr	r2, [r3, #4]
 80172f4:	2a00      	cmp	r2, #0
 80172f6:	d0cd      	beq.n	8017294 <TREEVIEW_Callback+0x2c>
 80172f8:	4658      	mov	r0, fp
 80172fa:	681f      	ldr	r7, [r3, #0]
 80172fc:	f00e faf6 	bl	80258ec <GUI_ALLOC_LockH>
 8017300:	4603      	mov	r3, r0
 8017302:	a844      	add	r0, sp, #272	; 0x110
 8017304:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8017308:	f840 3dc8 	str.w	r3, [r0, #-200]!
 801730c:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 8017310:	f00e fafe 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017314:	f1a7 0310 	sub.w	r3, r7, #16
 8017318:	2b08      	cmp	r3, #8
 801731a:	f200 8176 	bhi.w	801760a <TREEVIEW_Callback+0x3a2>
 801731e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017322:	0152      	.short	0x0152
 8017324:	01110169 	.word	0x01110169
 8017328:	01740147 	.word	0x01740147
 801732c:	01740174 	.word	0x01740174
 8017330:	0104013f 	.word	0x0104013f
 8017334:	4658      	mov	r0, fp
 8017336:	f00e fad9 	bl	80258ec <GUI_ALLOC_LockH>
 801733a:	9010      	str	r0, [sp, #64]	; 0x40
 801733c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8017340:	f003 fecc 	bl	801b0dc <WM_DeleteTimer>
 8017344:	a844      	add	r0, sp, #272	; 0x110
 8017346:	2200      	movs	r2, #0
 8017348:	f850 3dd0 	ldr.w	r3, [r0, #-208]!
 801734c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8017350:	f00e fade 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017354:	e79e      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 8017356:	68e3      	ldr	r3, [r4, #12]
 8017358:	2b05      	cmp	r3, #5
 801735a:	f000 80c9 	beq.w	80174f0 <TREEVIEW_Callback+0x288>
 801735e:	2b06      	cmp	r3, #6
 8017360:	d198      	bne.n	8017294 <TREEVIEW_Callback+0x2c>
 8017362:	4658      	mov	r0, fp
 8017364:	f00e fac2 	bl	80258ec <GUI_ALLOC_LockH>
 8017368:	4603      	mov	r3, r0
 801736a:	a844      	add	r0, sp, #272	; 0x110
 801736c:	2200      	movs	r2, #0
 801736e:	f840 3d70 	str.w	r3, [r0, #-112]!
 8017372:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8017376:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 801737a:	f00e fac9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801737e:	e789      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 8017380:	4658      	mov	r0, fp
 8017382:	f00e fab3 	bl	80258ec <GUI_ALLOC_LockH>
 8017386:	ab44      	add	r3, sp, #272	; 0x110
 8017388:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
 801738c:	f843 0d94 	str.w	r0, [r3, #-148]!
 8017390:	4618      	mov	r0, r3
 8017392:	f00e fabd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017396:	2c00      	cmp	r4, #0
 8017398:	f43f af7c 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 801739c:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 80173a0:	e00b      	b.n	80173ba <TREEVIEW_Callback+0x152>
 80173a2:	4603      	mov	r3, r0
 80173a4:	685d      	ldr	r5, [r3, #4]
 80173a6:	4650      	mov	r0, sl
 80173a8:	f00e fab2 	bl	8025910 <GUI_ALLOC_UnlockH>
 80173ac:	4620      	mov	r0, r4
 80173ae:	f00e fbaf 	bl	8025b10 <GUI_ALLOC_Free>
 80173b2:	2d00      	cmp	r5, #0
 80173b4:	f43f af6e 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 80173b8:	462c      	mov	r4, r5
 80173ba:	4620      	mov	r0, r4
 80173bc:	f00e fa96 	bl	80258ec <GUI_ALLOC_LockH>
 80173c0:	6902      	ldr	r2, [r0, #16]
 80173c2:	9028      	str	r0, [sp, #160]	; 0xa0
 80173c4:	2a00      	cmp	r2, #0
 80173c6:	d0ec      	beq.n	80173a2 <TREEVIEW_Callback+0x13a>
 80173c8:	4610      	mov	r0, r2
 80173ca:	f00e fba1 	bl	8025b10 <GUI_ALLOC_Free>
 80173ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80173d0:	e7e8      	b.n	80173a4 <TREEVIEW_Callback+0x13c>
 80173d2:	4658      	mov	r0, fp
 80173d4:	f00e fa8a 	bl	80258ec <GUI_ALLOC_LockH>
 80173d8:	4603      	mov	r3, r0
 80173da:	900a      	str	r0, [sp, #40]	; 0x28
 80173dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80173de:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80173e2:	f00d fa01 	bl	80247e8 <GUI_SetFont>
 80173e6:	68e3      	ldr	r3, [r4, #12]
 80173e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173ea:	6818      	ldr	r0, [r3, #0]
 80173ec:	6859      	ldr	r1, [r3, #4]
 80173ee:	ab14      	add	r3, sp, #80	; 0x50
 80173f0:	c303      	stmia	r3!, {r0, r1}
 80173f2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80173f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80173fa:	4249      	negs	r1, r1
 80173fc:	4252      	negs	r2, r2
 80173fe:	a814      	add	r0, sp, #80	; 0x50
 8017400:	f00d f8fa 	bl	80245f8 <GUI_MoveRect>
 8017404:	a910      	add	r1, sp, #64	; 0x40
 8017406:	4658      	mov	r0, fp
 8017408:	f004 fd42 	bl	801be90 <WM_GetInsideRectExScrollbar>
 801740c:	a814      	add	r0, sp, #80	; 0x50
 801740e:	a910      	add	r1, sp, #64	; 0x40
 8017410:	f00a ff0c 	bl	802222c <GUI__IntersectRect>
 8017414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017416:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801741a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801741e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8017420:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8017424:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 8017428:	951b      	str	r5, [sp, #108]	; 0x6c
 801742a:	1a89      	subs	r1, r1, r2
 801742c:	3101      	adds	r1, #1
 801742e:	1b12      	subs	r2, r2, r4
 8017430:	4281      	cmp	r1, r0
 8017432:	bfac      	ite	ge
 8017434:	1851      	addge	r1, r2, r1
 8017436:	1811      	addlt	r1, r2, r0
 8017438:	921a      	str	r2, [sp, #104]	; 0x68
 801743a:	911c      	str	r1, [sp, #112]	; 0x70
 801743c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801743e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 8017442:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8017446:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801744a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801744e:	900c      	str	r0, [sp, #48]	; 0x30
 8017450:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8017454:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8017458:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 801745c:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 8017460:	2f00      	cmp	r7, #0
 8017462:	f000 80d6 	beq.w	8017612 <TREEVIEW_Callback+0x3aa>
 8017466:	2800      	cmp	r0, #0
 8017468:	f000 84df 	beq.w	8017e2a <TREEVIEW_Callback+0xbc2>
 801746c:	3f01      	subs	r7, #1
 801746e:	2500      	movs	r5, #0
 8017470:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 8017474:	e00b      	b.n	801748e <TREEVIEW_Callback+0x226>
 8017476:	4648      	mov	r0, r9
 8017478:	f00e fa4a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801747c:	42bd      	cmp	r5, r7
 801747e:	940c      	str	r4, [sp, #48]	; 0x30
 8017480:	f000 80c8 	beq.w	8017614 <TREEVIEW_Callback+0x3ac>
 8017484:	3501      	adds	r5, #1
 8017486:	2c00      	cmp	r4, #0
 8017488:	f000 8352 	beq.w	8017b30 <TREEVIEW_Callback+0x8c8>
 801748c:	4620      	mov	r0, r4
 801748e:	f00e fa2d 	bl	80258ec <GUI_ALLOC_LockH>
 8017492:	8b03      	ldrh	r3, [r0, #24]
 8017494:	901f      	str	r0, [sp, #124]	; 0x7c
 8017496:	07d9      	lsls	r1, r3, #31
 8017498:	d510      	bpl.n	80174bc <TREEVIEW_Callback+0x254>
 801749a:	079a      	lsls	r2, r3, #30
 801749c:	d40e      	bmi.n	80174bc <TREEVIEW_Callback+0x254>
 801749e:	7f06      	ldrb	r6, [r0, #28]
 80174a0:	6844      	ldr	r4, [r0, #4]
 80174a2:	2c00      	cmp	r4, #0
 80174a4:	d0e7      	beq.n	8017476 <TREEVIEW_Callback+0x20e>
 80174a6:	4648      	mov	r0, r9
 80174a8:	f00e fa32 	bl	8025910 <GUI_ALLOC_UnlockH>
 80174ac:	4620      	mov	r0, r4
 80174ae:	f00e fa1d 	bl	80258ec <GUI_ALLOC_LockH>
 80174b2:	901f      	str	r0, [sp, #124]	; 0x7c
 80174b4:	7f03      	ldrb	r3, [r0, #28]
 80174b6:	429e      	cmp	r6, r3
 80174b8:	dbf2      	blt.n	80174a0 <TREEVIEW_Callback+0x238>
 80174ba:	e7dc      	b.n	8017476 <TREEVIEW_Callback+0x20e>
 80174bc:	6844      	ldr	r4, [r0, #4]
 80174be:	e7da      	b.n	8017476 <TREEVIEW_Callback+0x20e>
 80174c0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80174c4:	f1b8 0f00 	cmp.w	r8, #0
 80174c8:	f000 8493 	beq.w	8017df2 <TREEVIEW_Callback+0xb8a>
 80174cc:	f898 3008 	ldrb.w	r3, [r8, #8]
 80174d0:	4658      	mov	r0, fp
 80174d2:	b14b      	cbz	r3, 80174e8 <TREEVIEW_Callback+0x280>
 80174d4:	f004 ff50 	bl	801c378 <WM_HasCaptured>
 80174d8:	2800      	cmp	r0, #0
 80174da:	f000 839c 	beq.w	8017c16 <TREEVIEW_Callback+0x9ae>
 80174de:	4658      	mov	r0, fp
 80174e0:	2101      	movs	r1, #1
 80174e2:	f004 ff91 	bl	801c408 <WM_NotifyParent>
 80174e6:	e6d5      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80174e8:	2102      	movs	r1, #2
 80174ea:	f004 ff8d 	bl	801c408 <WM_NotifyParent>
 80174ee:	e6d1      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80174f0:	4658      	mov	r0, fp
 80174f2:	f00e f9fb 	bl	80258ec <GUI_ALLOC_LockH>
 80174f6:	9010      	str	r0, [sp, #64]	; 0x40
 80174f8:	4658      	mov	r0, fp
 80174fa:	68a5      	ldr	r5, [r4, #8]
 80174fc:	f004 fe48 	bl	801c190 <WM_GetScrollbarV>
 8017500:	4285      	cmp	r5, r0
 8017502:	f000 8426 	beq.w	8017d52 <TREEVIEW_Callback+0xaea>
 8017506:	4658      	mov	r0, fp
 8017508:	68a5      	ldr	r5, [r4, #8]
 801750a:	f004 fdf9 	bl	801c100 <WM_GetScrollbarH>
 801750e:	4285      	cmp	r5, r0
 8017510:	f000 848e 	beq.w	8017e30 <TREEVIEW_Callback+0xbc8>
 8017514:	a810      	add	r0, sp, #64	; 0x40
 8017516:	f00e f9fb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801751a:	4658      	mov	r0, fp
 801751c:	f006 fe70 	bl	801e200 <WM_InvalidateWindow>
 8017520:	4658      	mov	r0, fp
 8017522:	210a      	movs	r1, #10
 8017524:	f004 ff70 	bl	801c408 <WM_NotifyParent>
 8017528:	e6b4      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 801752a:	b90d      	cbnz	r5, 8017530 <TREEVIEW_Callback+0x2c8>
 801752c:	e6b2      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 801752e:	4605      	mov	r5, r0
 8017530:	4628      	mov	r0, r5
 8017532:	f7fe fd39 	bl	8015fa8 <_GetNextVisibleItem>
 8017536:	4285      	cmp	r5, r0
 8017538:	d1f9      	bne.n	801752e <TREEVIEW_Callback+0x2c6>
 801753a:	4658      	mov	r0, fp
 801753c:	4629      	mov	r1, r5
 801753e:	f7ff fa93 	bl	8016a68 <_SetSel>
 8017542:	e6a7      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 8017544:	2d00      	cmp	r5, #0
 8017546:	f43f aea5 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 801754a:	4628      	mov	r0, r5
 801754c:	f00e f9ce 	bl	80258ec <GUI_ALLOC_LockH>
 8017550:	ab44      	add	r3, sp, #272	; 0x110
 8017552:	8b04      	ldrh	r4, [r0, #24]
 8017554:	f843 0dc0 	str.w	r0, [r3, #-192]!
 8017558:	4618      	mov	r0, r3
 801755a:	f00e f9d9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801755e:	07e6      	lsls	r6, r4, #31
 8017560:	f57f ae98 	bpl.w	8017294 <TREEVIEW_Callback+0x2c>
 8017564:	07a0      	lsls	r0, r4, #30
 8017566:	f140 849d 	bpl.w	8017ea4 <TREEVIEW_Callback+0xc3c>
 801756a:	4658      	mov	r0, fp
 801756c:	f00e f9be 	bl	80258ec <GUI_ALLOC_LockH>
 8017570:	901f      	str	r0, [sp, #124]	; 0x7c
 8017572:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017576:	f00e f9b9 	bl	80258ec <GUI_ALLOC_LockH>
 801757a:	6843      	ldr	r3, [r0, #4]
 801757c:	9028      	str	r0, [sp, #160]	; 0xa0
 801757e:	b12b      	cbz	r3, 801758c <TREEVIEW_Callback+0x324>
 8017580:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017582:	4658      	mov	r0, fp
 8017584:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8017588:	f006 fe3a 	bl	801e200 <WM_InvalidateWindow>
 801758c:	a81f      	add	r0, sp, #124	; 0x7c
 801758e:	f00e f9bf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017592:	a828      	add	r0, sp, #160	; 0xa0
 8017594:	f00e f9bc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017598:	4658      	mov	r0, fp
 801759a:	f7ff f9ef 	bl	801697c <_UpdateScrollPos>
 801759e:	e679      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80175a0:	2e00      	cmp	r6, #0
 80175a2:	f43f ae77 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 80175a6:	4658      	mov	r0, fp
 80175a8:	4631      	mov	r1, r6
 80175aa:	f7ff fa5d 	bl	8016a68 <_SetSel>
 80175ae:	e671      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80175b0:	2d00      	cmp	r5, #0
 80175b2:	f43f ae6f 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 80175b6:	4628      	mov	r0, r5
 80175b8:	f7fe fcf6 	bl	8015fa8 <_GetNextVisibleItem>
 80175bc:	4601      	mov	r1, r0
 80175be:	4658      	mov	r0, fp
 80175c0:	f7ff fa52 	bl	8016a68 <_SetSel>
 80175c4:	e666      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80175c6:	2d00      	cmp	r5, #0
 80175c8:	f43f ae64 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 80175cc:	4628      	mov	r0, r5
 80175ce:	f00e f98d 	bl	80258ec <GUI_ALLOC_LockH>
 80175d2:	ab44      	add	r3, sp, #272	; 0x110
 80175d4:	8b04      	ldrh	r4, [r0, #24]
 80175d6:	f843 0dc0 	str.w	r0, [r3, #-192]!
 80175da:	4618      	mov	r0, r3
 80175dc:	f00e f998 	bl	8025910 <GUI_ALLOC_UnlockH>
 80175e0:	07e1      	lsls	r1, r4, #31
 80175e2:	f140 84c3 	bpl.w	8017f6c <TREEVIEW_Callback+0xd04>
 80175e6:	07a2      	lsls	r2, r4, #30
 80175e8:	4628      	mov	r0, r5
 80175ea:	f140 8460 	bpl.w	8017eae <TREEVIEW_Callback+0xc46>
 80175ee:	f7ff fe07 	bl	8017200 <TREEVIEW_ITEM_Collapse>
 80175f2:	e64f      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80175f4:	2d00      	cmp	r5, #0
 80175f6:	f43f ae4d 	beq.w	8017294 <TREEVIEW_Callback+0x2c>
 80175fa:	4628      	mov	r0, r5
 80175fc:	f7fe fd18 	bl	8016030 <_GetPrevVisibleItem>
 8017600:	4601      	mov	r1, r0
 8017602:	4658      	mov	r0, fp
 8017604:	f7ff fa30 	bl	8016a68 <_SetSel>
 8017608:	e644      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 801760a:	4620      	mov	r0, r4
 801760c:	f007 fb5e 	bl	801eccc <WM_DefaultProc>
 8017610:	e640      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 8017612:	4604      	mov	r4, r0
 8017614:	2c00      	cmp	r4, #0
 8017616:	f000 8440 	beq.w	8017e9a <TREEVIEW_Callback+0xc32>
 801761a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801761e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8017622:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8017626:	b21b      	sxth	r3, r3
 8017628:	429a      	cmp	r2, r3
 801762a:	f2c0 83f9 	blt.w	8017e20 <TREEVIEW_Callback+0xbb8>
 801762e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8017632:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 8017636:	f8cd c00c 	str.w	ip, [sp, #12]
 801763a:	465e      	mov	r6, fp
 801763c:	4645      	mov	r5, r8
 801763e:	f8cd a014 	str.w	sl, [sp, #20]
 8017642:	9803      	ldr	r0, [sp, #12]
 8017644:	f00e f964 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801764a:	930d      	str	r3, [sp, #52]	; 0x34
 801764c:	2d00      	cmp	r5, #0
 801764e:	d067      	beq.n	8017720 <TREEVIEW_Callback+0x4b8>
 8017650:	221b      	movs	r2, #27
 8017652:	ab0d      	add	r3, sp, #52	; 0x34
 8017654:	961f      	str	r6, [sp, #124]	; 0x7c
 8017656:	9220      	str	r2, [sp, #128]	; 0x80
 8017658:	9327      	str	r3, [sp, #156]	; 0x9c
 801765a:	4648      	mov	r0, r9
 801765c:	47a8      	blx	r5
 801765e:	4604      	mov	r4, r0
 8017660:	b287      	uxth	r7, r0
 8017662:	4630      	mov	r0, r6
 8017664:	f00e f942 	bl	80258ec <GUI_ALLOC_LockH>
 8017668:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 801766c:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 8017670:	900a      	str	r0, [sp, #40]	; 0x28
 8017672:	1e4b      	subs	r3, r1, #1
 8017674:	443b      	add	r3, r7
 8017676:	b29b      	uxth	r3, r3
 8017678:	b219      	sxth	r1, r3
 801767a:	428a      	cmp	r2, r1
 801767c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8017680:	dd51      	ble.n	8017726 <TREEVIEW_Callback+0x4be>
 8017682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017684:	4423      	add	r3, r4
 8017686:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017688:	931b      	str	r3, [sp, #108]	; 0x6c
 801768a:	f00e f92f 	bl	80258ec <GUI_ALLOC_LockH>
 801768e:	8b03      	ldrh	r3, [r0, #24]
 8017690:	901f      	str	r0, [sp, #124]	; 0x7c
 8017692:	07da      	lsls	r2, r3, #31
 8017694:	d53c      	bpl.n	8017710 <TREEVIEW_Callback+0x4a8>
 8017696:	079f      	lsls	r7, r3, #30
 8017698:	d43a      	bmi.n	8017710 <TREEVIEW_Callback+0x4a8>
 801769a:	7f07      	ldrb	r7, [r0, #28]
 801769c:	6844      	ldr	r4, [r0, #4]
 801769e:	4648      	mov	r0, r9
 80176a0:	b9fc      	cbnz	r4, 80176e2 <TREEVIEW_Callback+0x47a>
 80176a2:	f00e f935 	bl	8025910 <GUI_ALLOC_UnlockH>
 80176a6:	940c      	str	r4, [sp, #48]	; 0x30
 80176a8:	2000      	movs	r0, #0
 80176aa:	f004 ffd9 	bl	801c660 <WM_SetUserClipRect>
 80176ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80176b2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80176b6:	4290      	cmp	r0, r2
 80176b8:	f000 8249 	beq.w	8017b4e <TREEVIEW_Callback+0x8e6>
 80176bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80176be:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 80176c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80176c6:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 80176ca:	f00a fcff 	bl	80220cc <LCD_SetBkColor>
 80176ce:	a812      	add	r0, sp, #72	; 0x48
 80176d0:	f00c fc8a 	bl	8023fe8 <GUI_ClearRectEx>
 80176d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176d6:	f7fe fc09 	bl	8015eec <WIDGET__EFFECT_DrawDown>
 80176da:	9803      	ldr	r0, [sp, #12]
 80176dc:	f00e f918 	bl	8025910 <GUI_ALLOC_UnlockH>
 80176e0:	e5d8      	b.n	8017294 <TREEVIEW_Callback+0x2c>
 80176e2:	f00e f915 	bl	8025910 <GUI_ALLOC_UnlockH>
 80176e6:	4620      	mov	r0, r4
 80176e8:	f00e f900 	bl	80258ec <GUI_ALLOC_LockH>
 80176ec:	901f      	str	r0, [sp, #124]	; 0x7c
 80176ee:	7f03      	ldrb	r3, [r0, #28]
 80176f0:	429f      	cmp	r7, r3
 80176f2:	dbd3      	blt.n	801769c <TREEVIEW_Callback+0x434>
 80176f4:	4648      	mov	r0, r9
 80176f6:	f00e f90b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80176fa:	940c      	str	r4, [sp, #48]	; 0x30
 80176fc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8017700:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8017704:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8017708:	b21b      	sxth	r3, r3
 801770a:	429a      	cmp	r2, r3
 801770c:	da99      	bge.n	8017642 <TREEVIEW_Callback+0x3da>
 801770e:	e7cb      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017710:	6844      	ldr	r4, [r0, #4]
 8017712:	4648      	mov	r0, r9
 8017714:	f00e f8fc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017718:	940c      	str	r4, [sp, #48]	; 0x30
 801771a:	2c00      	cmp	r4, #0
 801771c:	d1ee      	bne.n	80176fc <TREEVIEW_Callback+0x494>
 801771e:	e7c3      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017720:	462f      	mov	r7, r5
 8017722:	462c      	mov	r4, r5
 8017724:	e79d      	b.n	8017662 <TREEVIEW_Callback+0x3fa>
 8017726:	a812      	add	r0, sp, #72	; 0x48
 8017728:	f004 ff9a 	bl	801c660 <WM_SetUserClipRect>
 801772c:	a90c      	add	r1, sp, #48	; 0x30
 801772e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017732:	911e      	str	r1, [sp, #120]	; 0x78
 8017734:	4423      	add	r3, r4
 8017736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017738:	1e59      	subs	r1, r3, #1
 801773a:	911d      	str	r1, [sp, #116]	; 0x74
 801773c:	2a00      	cmp	r2, #0
 801773e:	d0a2      	beq.n	8017686 <TREEVIEW_Callback+0x41e>
 8017740:	f8df e8b0 	ldr.w	lr, [pc, #2224]	; 8017ff4 <TREEVIEW_Callback+0xd8c>
 8017744:	9805      	ldr	r0, [sp, #20]
 8017746:	f8de 3000 	ldr.w	r3, [lr]
 801774a:	2100      	movs	r1, #0
 801774c:	2270      	movs	r2, #112	; 0x70
 801774e:	4798      	blx	r3
 8017750:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8017752:	4638      	mov	r0, r7
 8017754:	f00e f8ca 	bl	80258ec <GUI_ALLOC_LockH>
 8017758:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801775a:	900e      	str	r0, [sp, #56]	; 0x38
 801775c:	f8d3 8000 	ldr.w	r8, [r3]
 8017760:	4640      	mov	r0, r8
 8017762:	f00e f8c3 	bl	80258ec <GUI_ALLOC_LockH>
 8017766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017768:	900f      	str	r0, [sp, #60]	; 0x3c
 801776a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801776e:	079b      	lsls	r3, r3, #30
 8017770:	f100 80fe 	bmi.w	8017970 <TREEVIEW_Callback+0x708>
 8017774:	4638      	mov	r0, r7
 8017776:	f003 fb5b 	bl	801ae30 <WM__IsEnabled>
 801777a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801777c:	2800      	cmp	r0, #0
 801777e:	f040 80ee 	bne.w	801795e <TREEVIEW_Callback+0x6f6>
 8017782:	f04f 0c02 	mov.w	ip, #2
 8017786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017788:	932f      	str	r3, [sp, #188]	; 0xbc
 801778a:	f8cd c008 	str.w	ip, [sp, #8]
 801778e:	f00c fed9 	bl	8024544 <GUI_GetFontSizeY>
 8017792:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017796:	f891 e01c 	ldrb.w	lr, [r1, #28]
 801779a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801779e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80177a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80177a6:	fb0e 2202 	mla	r2, lr, r2, r2
 80177aa:	449b      	add	fp, r3
 80177ac:	4493      	add	fp, r2
 80177ae:	4682      	mov	sl, r0
 80177b0:	fa1f fb8b 	uxth.w	fp, fp
 80177b4:	f101 001d 	add.w	r0, r1, #29
 80177b8:	f8ad b0b0 	strh.w	fp, [sp, #176]	; 0xb0
 80177bc:	f00c fa3a 	bl	8023c34 <GUI_GetStringDistX>
 80177c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80177c2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80177c4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80177c8:	1aca      	subs	r2, r1, r3
 80177ca:	3201      	adds	r2, #1
 80177cc:	ebca 0202 	rsb	r2, sl, r2
 80177d0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80177d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80177d6:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80177da:	b292      	uxth	r2, r2
 80177dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80177e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177e4:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 80177e8:	4458      	add	r0, fp
 80177ea:	4492      	add	sl, r2
 80177ec:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 80177f0:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 80177f4:	f8ad a0b6 	strh.w	sl, [sp, #182]	; 0xb6
 80177f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80177fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177fc:	9129      	str	r1, [sp, #164]	; 0xa4
 80177fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017800:	932a      	str	r3, [sp, #168]	; 0xa8
 8017802:	321d      	adds	r2, #29
 8017804:	4638      	mov	r0, r7
 8017806:	9230      	str	r2, [sp, #192]	; 0xc0
 8017808:	f003 fb12 	bl	801ae30 <WM__IsEnabled>
 801780c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801780e:	2800      	cmp	r0, #0
 8017810:	f040 8096 	bne.w	8017940 <TREEVIEW_Callback+0x6d8>
 8017814:	2102      	movs	r1, #2
 8017816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017818:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801781c:	f8b2 a018 	ldrh.w	sl, [r2, #24]
 8017820:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8017822:	9128      	str	r1, [sp, #160]	; 0xa0
 8017824:	f01a 0a01 	ands.w	sl, sl, #1
 8017828:	d004      	beq.n	8017834 <TREEVIEW_Callback+0x5cc>
 801782a:	6850      	ldr	r0, [r2, #4]
 801782c:	2800      	cmp	r0, #0
 801782e:	f040 8190 	bne.w	8017b52 <TREEVIEW_Callback+0x8ea>
 8017832:	4682      	mov	sl, r0
 8017834:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8017838:	07d2      	lsls	r2, r2, #31
 801783a:	f140 80a6 	bpl.w	801798a <TREEVIEW_Callback+0x722>
 801783e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017840:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8017844:	f891 801c 	ldrb.w	r8, [r1, #28]
 8017848:	981a      	ldr	r0, [sp, #104]	; 0x68
 801784a:	fb08 0002 	mla	r0, r8, r2, r0
 801784e:	f100 38ff 	add.w	r8, r0, #4294967295
 8017852:	6908      	ldr	r0, [r1, #16]
 8017854:	2800      	cmp	r0, #0
 8017856:	f040 816e 	bne.w	8017b36 <TREEVIEW_Callback+0x8ce>
 801785a:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 801785e:	8b09      	ldrh	r1, [r1, #24]
 8017860:	07c8      	lsls	r0, r1, #31
 8017862:	d561      	bpl.n	8017928 <TREEVIEW_Callback+0x6c0>
 8017864:	f001 0102 	and.w	r1, r1, #2
 8017868:	b289      	uxth	r1, r1
 801786a:	2900      	cmp	r1, #0
 801786c:	f000 8157 	beq.w	8017b1e <TREEVIEW_Callback+0x8b6>
 8017870:	f1ba 0f00 	cmp.w	sl, #0
 8017874:	f000 814b 	beq.w	8017b0e <TREEVIEW_Callback+0x8a6>
 8017878:	f04f 0b04 	mov.w	fp, #4
 801787c:	2101      	movs	r1, #1
 801787e:	f8cd b010 	str.w	fp, [sp, #16]
 8017882:	468c      	mov	ip, r1
 8017884:	46de      	mov	lr, fp
 8017886:	46da      	mov	sl, fp
 8017888:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 801788c:	eb02 7bd2 	add.w	fp, r2, r2, lsr #31
 8017890:	fa1f f888 	uxth.w	r8, r8
 8017894:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 8017898:	9040      	str	r0, [sp, #256]	; 0x100
 801789a:	eb08 0a6b 	add.w	sl, r8, fp, asr #1
 801789e:	f8dd b010 	ldr.w	fp, [sp, #16]
 80178a2:	f88d e10c 	strb.w	lr, [sp, #268]	; 0x10c
 80178a6:	f8ad a108 	strh.w	sl, [sp, #264]	; 0x108
 80178aa:	f857 000b 	ldr.w	r0, [r7, fp]
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f000 81ad 	beq.w	8017c0e <TREEVIEW_Callback+0x9a6>
 80178b4:	4490      	add	r8, r2
 80178b6:	f8ad 810a 	strh.w	r8, [sp, #266]	; 0x10a
 80178ba:	9041      	str	r0, [sp, #260]	; 0x104
 80178bc:	f88d 110d 	strb.w	r1, [sp, #269]	; 0x10d
 80178c0:	a80e      	add	r0, sp, #56	; 0x38
 80178c2:	f00e f825 	bl	8025910 <GUI_ALLOC_UnlockH>
 80178c6:	a80f      	add	r0, sp, #60	; 0x3c
 80178c8:	f00e f822 	bl	8025910 <GUI_ALLOC_UnlockH>
 80178cc:	9b05      	ldr	r3, [sp, #20]
 80178ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178d0:	931e      	str	r3, [sp, #120]	; 0x78
 80178d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80178d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80178d8:	af16      	add	r7, sp, #88	; 0x58
 80178da:	2305      	movs	r3, #5
 80178dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80178de:	4638      	mov	r0, r7
 80178e0:	4790      	blx	r2
 80178e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178e4:	2212      	movs	r2, #18
 80178e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80178ea:	4638      	mov	r0, r7
 80178ec:	4798      	blx	r3
 80178ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178f0:	2214      	movs	r2, #20
 80178f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80178f6:	4638      	mov	r0, r7
 80178f8:	4798      	blx	r3
 80178fa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80178fc:	2206      	movs	r2, #6
 80178fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8017900:	b133      	cbz	r3, 8017910 <TREEVIEW_Callback+0x6a8>
 8017902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017904:	f89d 210c 	ldrb.w	r2, [sp, #268]	; 0x10c
 8017908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801790a:	9218      	str	r2, [sp, #96]	; 0x60
 801790c:	4638      	mov	r0, r7
 801790e:	4798      	blx	r3
 8017910:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017912:	2b00      	cmp	r3, #0
 8017914:	f43f aeb5 	beq.w	8017682 <TREEVIEW_Callback+0x41a>
 8017918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801791a:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 801791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017920:	9218      	str	r2, [sp, #96]	; 0x60
 8017922:	4638      	mov	r0, r7
 8017924:	4798      	blx	r3
 8017926:	e6ac      	b.n	8017682 <TREEVIEW_Callback+0x41a>
 8017928:	68b9      	ldr	r1, [r7, #8]
 801792a:	2900      	cmp	r1, #0
 801792c:	f000 81ce 	beq.w	8017ccc <TREEVIEW_Callback+0xa64>
 8017930:	4442      	add	r2, r8
 8017932:	2302      	movs	r3, #2
 8017934:	f8ad 210a 	strh.w	r2, [sp, #266]	; 0x10a
 8017938:	9141      	str	r1, [sp, #260]	; 0x104
 801793a:	f88d 310d 	strb.w	r3, [sp, #269]	; 0x10d
 801793e:	e7bf      	b.n	80178c0 <TREEVIEW_Callback+0x658>
 8017940:	f8b3 109c 	ldrh.w	r1, [r3, #156]	; 0x9c
 8017944:	f001 0102 	and.w	r1, r1, #2
 8017948:	b289      	uxth	r1, r1
 801794a:	2900      	cmp	r1, #0
 801794c:	f43f af63 	beq.w	8017816 <TREEVIEW_Callback+0x5ae>
 8017950:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8017954:	ebb8 0001 	subs.w	r0, r8, r1
 8017958:	4241      	negs	r1, r0
 801795a:	4141      	adcs	r1, r0
 801795c:	e75b      	b.n	8017816 <TREEVIEW_Callback+0x5ae>
 801795e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8017962:	ebb8 0e01 	subs.w	lr, r8, r1
 8017966:	f1de 0c00 	rsbs	ip, lr, #0
 801796a:	eb5c 0c0e 	adcs.w	ip, ip, lr
 801796e:	e70a      	b.n	8017786 <TREEVIEW_Callback+0x51e>
 8017970:	4638      	mov	r0, r7
 8017972:	f003 fa5d 	bl	801ae30 <WM__IsEnabled>
 8017976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017978:	2800      	cmp	r0, #0
 801797a:	f040 80fc 	bne.w	8017b76 <TREEVIEW_Callback+0x90e>
 801797e:	2302      	movs	r3, #2
 8017980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017986:	9328      	str	r3, [sp, #160]	; 0xa0
 8017988:	e6f4      	b.n	8017774 <TREEVIEW_Callback+0x50c>
 801798a:	4638      	mov	r0, r7
 801798c:	f003 fa50 	bl	801ae30 <WM__IsEnabled>
 8017990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017992:	2800      	cmp	r0, #0
 8017994:	f040 812a 	bne.w	8017bec <TREEVIEW_Callback+0x984>
 8017998:	2202      	movs	r2, #2
 801799a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801799e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80179a0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80179a2:	922b      	str	r2, [sp, #172]	; 0xac
 80179a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80179a6:	9206      	str	r2, [sp, #24]
 80179a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80179aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80179ac:	f8dd e018 	ldr.w	lr, [sp, #24]
 80179b0:	9204      	str	r2, [sp, #16]
 80179b2:	44be      	add	lr, r7
 80179b4:	9709      	str	r7, [sp, #36]	; 0x24
 80179b6:	7f08      	ldrb	r0, [r1, #28]
 80179b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80179bc:	9f04      	ldr	r7, [sp, #16]
 80179be:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 80179c2:	fb02 7b00 	mla	fp, r2, r0, r7
 80179c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80179ca:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80179ce:	2800      	cmp	r0, #0
 80179d0:	f000 80e2 	beq.w	8017b98 <TREEVIEW_Callback+0x930>
 80179d4:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 80179d8:	ea4f 78d2 	mov.w	r8, r2, lsr #31
 80179dc:	af44      	add	r7, sp, #272	; 0x110
 80179de:	f8cd 8020 	str.w	r8, [sp, #32]
 80179e2:	4490      	add	r8, r2
 80179e4:	eb07 0c40 	add.w	ip, r7, r0, lsl #1
 80179e8:	ebab 0868 	sub.w	r8, fp, r8, asr #1
 80179ec:	fa1f f888 	uxth.w	r8, r8
 80179f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80179f2:	f82c 8c3e 	strh.w	r8, [ip, #-62]
 80179f6:	f82c 8c4a 	strh.w	r8, [ip, #-74]
 80179fa:	f82c 7c44 	strh.w	r7, [ip, #-68]
 80179fe:	8b0f      	ldrh	r7, [r1, #24]
 8017a00:	f8cd c01c 	str.w	ip, [sp, #28]
 8017a04:	077f      	lsls	r7, r7, #29
 8017a06:	bf58      	it	pl
 8017a08:	f8dd c018 	ldrpl.w	ip, [sp, #24]
 8017a0c:	fa1f fe8e 	uxth.w	lr, lr
 8017a10:	f8cd e01c 	str.w	lr, [sp, #28]
 8017a14:	bf58      	it	pl
 8017a16:	fa1f fe8c 	uxthpl.w	lr, ip
 8017a1a:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 8017a1e:	1c47      	adds	r7, r0, #1
 8017a20:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 8017a24:	b2ff      	uxtb	r7, r7
 8017a26:	f82c ec38 	strh.w	lr, [ip, #-56]
 8017a2a:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 8017a2e:	f8b1 e018 	ldrh.w	lr, [r1, #24]
 8017a32:	f01e 0f01 	tst.w	lr, #1
 8017a36:	f000 813f 	beq.w	8017cb8 <TREEVIEW_Callback+0xa50>
 8017a3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8017a3e:	4494      	add	ip, r2
 8017a40:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8017a44:	44e3      	add	fp, ip
 8017a46:	f1ba 0f00 	cmp.w	sl, #0
 8017a4a:	f000 81ce 	beq.w	8017dea <TREEVIEW_Callback+0xb82>
 8017a4e:	f01e 0f02 	tst.w	lr, #2
 8017a52:	f000 8138 	beq.w	8017cc6 <TREEVIEW_Callback+0xa5e>
 8017a56:	3002      	adds	r0, #2
 8017a58:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 8017a5c:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 8017a60:	9009      	str	r0, [sp, #36]	; 0x24
 8017a62:	f8cd e004 	str.w	lr, [sp, #4]
 8017a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a68:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 8017a6c:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 8017a70:	b2c7      	uxtb	r7, r0
 8017a72:	9807      	ldr	r0, [sp, #28]
 8017a74:	f82e 0c44 	strh.w	r0, [lr, #-68]
 8017a78:	fa1f fb8b 	uxth.w	fp, fp
 8017a7c:	9801      	ldr	r0, [sp, #4]
 8017a7e:	f82e bc3e 	strh.w	fp, [lr, #-62]
 8017a82:	f82e bc4a 	strh.w	fp, [lr, #-74]
 8017a86:	f8cd e020 	str.w	lr, [sp, #32]
 8017a8a:	f8dd e018 	ldr.w	lr, [sp, #24]
 8017a8e:	f820 ec38 	strh.w	lr, [r0, #-56]
 8017a92:	a844      	add	r0, sp, #272	; 0x110
 8017a94:	eb00 0e47 	add.w	lr, r0, r7, lsl #1
 8017a98:	9807      	ldr	r0, [sp, #28]
 8017a9a:	f82e 0c38 	strh.w	r0, [lr, #-56]
 8017a9e:	f8cd e018 	str.w	lr, [sp, #24]
 8017aa2:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 8017aa6:	eb0e 0e47 	add.w	lr, lr, r7, lsl #1
 8017aaa:	f8cd e020 	str.w	lr, [sp, #32]
 8017aae:	f82e 0c44 	strh.w	r0, [lr, #-68]
 8017ab2:	f50d 7e88 	add.w	lr, sp, #272	; 0x110
 8017ab6:	eb0e 0047 	add.w	r0, lr, r7, lsl #1
 8017aba:	3701      	adds	r7, #1
 8017abc:	f820 8c4a 	strh.w	r8, [r0, #-74]
 8017ac0:	f820 bc3e 	strh.w	fp, [r0, #-62]
 8017ac4:	f88d 70c4 	strb.w	r7, [sp, #196]	; 0xc4
 8017ac8:	9f04      	ldr	r7, [sp, #16]
 8017aca:	8b48      	ldrh	r0, [r1, #26]
 8017acc:	4467      	add	r7, ip
 8017ace:	3f01      	subs	r7, #1
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	f000 8083 	beq.w	8017bdc <TREEVIEW_Callback+0x974>
 8017ad6:	f89d e0de 	ldrb.w	lr, [sp, #222]	; 0xde
 8017ada:	f010 0f01 	tst.w	r0, #1
 8017ade:	d009      	beq.n	8017af4 <TREEVIEW_Callback+0x88c>
 8017ae0:	f50d 7888 	add.w	r8, sp, #272	; 0x110
 8017ae4:	eb08 0c4e 	add.w	ip, r8, lr, lsl #1
 8017ae8:	f10e 0e01 	add.w	lr, lr, #1
 8017aec:	f82c 7c30 	strh.w	r7, [ip, #-48]
 8017af0:	fa5f fe8e 	uxtb.w	lr, lr
 8017af4:	0840      	lsrs	r0, r0, #1
 8017af6:	4417      	add	r7, r2
 8017af8:	d1ef      	bne.n	8017ada <TREEVIEW_Callback+0x872>
 8017afa:	f88d e0de 	strb.w	lr, [sp, #222]	; 0xde
 8017afe:	f891 801c 	ldrb.w	r8, [r1, #28]
 8017b02:	9804      	ldr	r0, [sp, #16]
 8017b04:	fb08 0802 	mla	r8, r8, r2, r0
 8017b08:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b0c:	e6a1      	b.n	8017852 <TREEVIEW_Callback+0x5ea>
 8017b0e:	4651      	mov	r1, sl
 8017b10:	fa1f f888 	uxth.w	r8, r8
 8017b14:	f8cd a010 	str.w	sl, [sp, #16]
 8017b18:	46d4      	mov	ip, sl
 8017b1a:	46d3      	mov	fp, sl
 8017b1c:	e6c5      	b.n	80178aa <TREEVIEW_Callback+0x642>
 8017b1e:	f1ba 0f00 	cmp.w	sl, #0
 8017b22:	d0f4      	beq.n	8017b0e <TREEVIEW_Callback+0x8a6>
 8017b24:	f04f 0e03 	mov.w	lr, #3
 8017b28:	9104      	str	r1, [sp, #16]
 8017b2a:	468c      	mov	ip, r1
 8017b2c:	46f2      	mov	sl, lr
 8017b2e:	e6ab      	b.n	8017888 <TREEVIEW_Callback+0x620>
 8017b30:	af0a      	add	r7, sp, #40	; 0x28
 8017b32:	9703      	str	r7, [sp, #12]
 8017b34:	e5b8      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017b36:	f00d fed9 	bl	80258ec <GUI_ALLOC_LockH>
 8017b3a:	4607      	mov	r7, r0
 8017b3c:	4648      	mov	r0, r9
 8017b3e:	971f      	str	r7, [sp, #124]	; 0x7c
 8017b40:	f00d fee6 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017b48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8017b4c:	e687      	b.n	801785e <TREEVIEW_Callback+0x5f6>
 8017b4e:	4618      	mov	r0, r3
 8017b50:	e5c1      	b.n	80176d6 <TREEVIEW_Callback+0x46e>
 8017b52:	f00d fecb 	bl	80258ec <GUI_ALLOC_LockH>
 8017b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b58:	901f      	str	r0, [sp, #124]	; 0x7c
 8017b5a:	f890 a01c 	ldrb.w	sl, [r0, #28]
 8017b5e:	7f1b      	ldrb	r3, [r3, #28]
 8017b60:	4648      	mov	r0, r9
 8017b62:	459a      	cmp	sl, r3
 8017b64:	bf94      	ite	ls
 8017b66:	f04f 0a00 	movls.w	sl, #0
 8017b6a:	f04f 0a01 	movhi.w	sl, #1
 8017b6e:	f00d fecf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b74:	e65e      	b.n	8017834 <TREEVIEW_Callback+0x5cc>
 8017b76:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8017b7a:	f003 0302 	and.w	r3, r3, #2
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	f43f aefd 	beq.w	8017980 <TREEVIEW_Callback+0x718>
 8017b86:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8017b8a:	ebb8 0c03 	subs.w	ip, r8, r3
 8017b8e:	f1dc 0300 	rsbs	r3, ip, #0
 8017b92:	eb53 030c 	adcs.w	r3, r3, ip
 8017b96:	e6f3      	b.n	8017980 <TREEVIEW_Callback+0x718>
 8017b98:	8b08      	ldrh	r0, [r1, #24]
 8017b9a:	f000 0003 	and.w	r0, r0, #3
 8017b9e:	2803      	cmp	r0, #3
 8017ba0:	f040 8088 	bne.w	8017cb4 <TREEVIEW_Callback+0xa4c>
 8017ba4:	f1ba 0f00 	cmp.w	sl, #0
 8017ba8:	f000 8084 	beq.w	8017cb4 <TREEVIEW_Callback+0xa4c>
 8017bac:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 8017bb0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8017bb4:	eb02 77d2 	add.w	r7, r2, r2, lsr #31
 8017bb8:	eb0b 0767 	add.w	r7, fp, r7, asr #1
 8017bbc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8017bc0:	eb0b 0840 	add.w	r8, fp, r0, lsl #1
 8017bc4:	b2bf      	uxth	r7, r7
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	f828 7c3e 	strh.w	r7, [r8, #-62]
 8017bcc:	f828 7c4a 	strh.w	r7, [r8, #-74]
 8017bd0:	f828 ec44 	strh.w	lr, [r8, #-68]
 8017bd4:	f828 cc38 	strh.w	ip, [r8, #-56]
 8017bd8:	f88d 00c4 	strb.w	r0, [sp, #196]	; 0xc4
 8017bdc:	f891 801c 	ldrb.w	r8, [r1, #28]
 8017be0:	9804      	ldr	r0, [sp, #16]
 8017be2:	fb08 0802 	mla	r8, r8, r2, r0
 8017be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bea:	e632      	b.n	8017852 <TREEVIEW_Callback+0x5ea>
 8017bec:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8017bf0:	f002 0202 	and.w	r2, r2, #2
 8017bf4:	b292      	uxth	r2, r2
 8017bf6:	2a00      	cmp	r2, #0
 8017bf8:	f43f aecf 	beq.w	801799a <TREEVIEW_Callback+0x732>
 8017bfc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8017c00:	ebb8 0e02 	subs.w	lr, r8, r2
 8017c04:	f1de 0200 	rsbs	r2, lr, #0
 8017c08:	eb52 020e 	adcs.w	r2, r2, lr
 8017c0c:	e6c5      	b.n	801799a <TREEVIEW_Callback+0x732>
 8017c0e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8017c12:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8017c14:	e64e      	b.n	80178b4 <TREEVIEW_Callback+0x64c>
 8017c16:	2101      	movs	r1, #1
 8017c18:	4658      	mov	r0, fp
 8017c1a:	f003 fbf7 	bl	801b40c <WM_SetCapture>
 8017c1e:	af44      	add	r7, sp, #272	; 0x110
 8017c20:	4658      	mov	r0, fp
 8017c22:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8017c26:	f00d fe61 	bl	80258ec <GUI_ALLOC_LockH>
 8017c2a:	9703      	str	r7, [sp, #12]
 8017c2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017c30:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8017c32:	f84c 0db8 	str.w	r0, [ip, #-184]!
 8017c36:	4603      	mov	r3, r0
 8017c38:	4660      	mov	r0, ip
 8017c3a:	f8cd c00c 	str.w	ip, [sp, #12]
 8017c3e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8017c40:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8017c44:	1e7c      	subs	r4, r7, #1
 8017c46:	f00d fe63 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017c4a:	2f00      	cmp	r7, #0
 8017c4c:	d041      	beq.n	8017cd2 <TREEVIEW_Callback+0xa6a>
 8017c4e:	b186      	cbz	r6, 8017c72 <TREEVIEW_Callback+0xa0a>
 8017c50:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8017c54:	4630      	mov	r0, r6
 8017c56:	f00d fe49 	bl	80258ec <GUI_ALLOC_LockH>
 8017c5a:	8b03      	ldrh	r3, [r0, #24]
 8017c5c:	9028      	str	r0, [sp, #160]	; 0xa0
 8017c5e:	07de      	lsls	r6, r3, #31
 8017c60:	d520      	bpl.n	8017ca4 <TREEVIEW_Callback+0xa3c>
 8017c62:	0799      	lsls	r1, r3, #30
 8017c64:	d41e      	bmi.n	8017ca4 <TREEVIEW_Callback+0xa3c>
 8017c66:	7f07      	ldrb	r7, [r0, #28]
 8017c68:	6846      	ldr	r6, [r0, #4]
 8017c6a:	4650      	mov	r0, sl
 8017c6c:	b95e      	cbnz	r6, 8017c86 <TREEVIEW_Callback+0xa1e>
 8017c6e:	f00d fe4f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017c72:	4658      	mov	r0, fp
 8017c74:	f00d fe3a 	bl	80258ec <GUI_ALLOC_LockH>
 8017c78:	ab44      	add	r3, sp, #272	; 0x110
 8017c7a:	f843 0dc0 	str.w	r0, [r3, #-192]!
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f00d fe46 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017c84:	e42b      	b.n	80174de <TREEVIEW_Callback+0x276>
 8017c86:	f00d fe43 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017c8a:	4630      	mov	r0, r6
 8017c8c:	f00d fe2e 	bl	80258ec <GUI_ALLOC_LockH>
 8017c90:	9028      	str	r0, [sp, #160]	; 0xa0
 8017c92:	7f03      	ldrb	r3, [r0, #28]
 8017c94:	429f      	cmp	r7, r3
 8017c96:	dbe7      	blt.n	8017c68 <TREEVIEW_Callback+0xa00>
 8017c98:	4650      	mov	r0, sl
 8017c9a:	f00d fe39 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017c9e:	b1d4      	cbz	r4, 8017cd6 <TREEVIEW_Callback+0xa6e>
 8017ca0:	3c01      	subs	r4, #1
 8017ca2:	e7d7      	b.n	8017c54 <TREEVIEW_Callback+0x9ec>
 8017ca4:	6846      	ldr	r6, [r0, #4]
 8017ca6:	4650      	mov	r0, sl
 8017ca8:	f00d fe32 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017cac:	b18c      	cbz	r4, 8017cd2 <TREEVIEW_Callback+0xa6a>
 8017cae:	2e00      	cmp	r6, #0
 8017cb0:	d1f6      	bne.n	8017ca0 <TREEVIEW_Callback+0xa38>
 8017cb2:	e7de      	b.n	8017c72 <TREEVIEW_Callback+0xa0a>
 8017cb4:	46d8      	mov	r8, fp
 8017cb6:	e5cc      	b.n	8017852 <TREEVIEW_Callback+0x5ea>
 8017cb8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8017cbc:	1e50      	subs	r0, r2, #1
 8017cbe:	4496      	add	lr, r2
 8017cc0:	4483      	add	fp, r0
 8017cc2:	ea4f 0c6e 	mov.w	ip, lr, asr #1
 8017cc6:	fa1f fb8b 	uxth.w	fp, fp
 8017cca:	e6e2      	b.n	8017a92 <TREEVIEW_Callback+0x82a>
 8017ccc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8017cd0:	e62e      	b.n	8017930 <TREEVIEW_Callback+0x6c8>
 8017cd2:	2e00      	cmp	r6, #0
 8017cd4:	d0cd      	beq.n	8017c72 <TREEVIEW_Callback+0xa0a>
 8017cd6:	2400      	movs	r4, #0
 8017cd8:	961f      	str	r6, [sp, #124]	; 0x7c
 8017cda:	2d00      	cmp	r5, #0
 8017cdc:	d033      	beq.n	8017d46 <TREEVIEW_Callback+0xade>
 8017cde:	201b      	movs	r0, #27
 8017ce0:	a91f      	add	r1, sp, #124	; 0x7c
 8017ce2:	9029      	str	r0, [sp, #164]	; 0xa4
 8017ce4:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 8017ce8:	9130      	str	r1, [sp, #192]	; 0xc0
 8017cea:	a828      	add	r0, sp, #160	; 0xa0
 8017cec:	47a8      	blx	r5
 8017cee:	45a1      	cmp	r9, r4
 8017cf0:	4404      	add	r4, r0
 8017cf2:	db01      	blt.n	8017cf8 <TREEVIEW_Callback+0xa90>
 8017cf4:	45a1      	cmp	r9, r4
 8017cf6:	dd35      	ble.n	8017d64 <TREEVIEW_Callback+0xafc>
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	f00d fdf7 	bl	80258ec <GUI_ALLOC_LockH>
 8017cfe:	8b03      	ldrh	r3, [r0, #24]
 8017d00:	9028      	str	r0, [sp, #160]	; 0xa0
 8017d02:	07da      	lsls	r2, r3, #31
 8017d04:	d518      	bpl.n	8017d38 <TREEVIEW_Callback+0xad0>
 8017d06:	079b      	lsls	r3, r3, #30
 8017d08:	d416      	bmi.n	8017d38 <TREEVIEW_Callback+0xad0>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8017d10:	685e      	ldr	r6, [r3, #4]
 8017d12:	7f07      	ldrb	r7, [r0, #28]
 8017d14:	4650      	mov	r0, sl
 8017d16:	2e00      	cmp	r6, #0
 8017d18:	d0a9      	beq.n	8017c6e <TREEVIEW_Callback+0xa06>
 8017d1a:	f00d fdf9 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f00d fde4 	bl	80258ec <GUI_ALLOC_LockH>
 8017d24:	9028      	str	r0, [sp, #160]	; 0xa0
 8017d26:	7f02      	ldrb	r2, [r0, #28]
 8017d28:	4297      	cmp	r7, r2
 8017d2a:	da0e      	bge.n	8017d4a <TREEVIEW_Callback+0xae2>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4650      	mov	r0, sl
 8017d30:	685e      	ldr	r6, [r3, #4]
 8017d32:	2e00      	cmp	r6, #0
 8017d34:	d09b      	beq.n	8017c6e <TREEVIEW_Callback+0xa06>
 8017d36:	e7f0      	b.n	8017d1a <TREEVIEW_Callback+0xab2>
 8017d38:	6846      	ldr	r6, [r0, #4]
 8017d3a:	a828      	add	r0, sp, #160	; 0xa0
 8017d3c:	f00d fde8 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017d40:	2e00      	cmp	r6, #0
 8017d42:	d1c9      	bne.n	8017cd8 <TREEVIEW_Callback+0xa70>
 8017d44:	e795      	b.n	8017c72 <TREEVIEW_Callback+0xa0a>
 8017d46:	4628      	mov	r0, r5
 8017d48:	e7d1      	b.n	8017cee <TREEVIEW_Callback+0xa86>
 8017d4a:	4650      	mov	r0, sl
 8017d4c:	f00d fde0 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017d50:	e7c2      	b.n	8017cd8 <TREEVIEW_Callback+0xa70>
 8017d52:	68a0      	ldr	r0, [r4, #8]
 8017d54:	a928      	add	r1, sp, #160	; 0xa0
 8017d56:	f004 faef 	bl	801c338 <WM_GetScrollState>
 8017d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8017d60:	f7ff bbd8 	b.w	8017514 <TREEVIEW_Callback+0x2ac>
 8017d64:	4658      	mov	r0, fp
 8017d66:	f00d fdc1 	bl	80258ec <GUI_ALLOC_LockH>
 8017d6a:	9014      	str	r0, [sp, #80]	; 0x50
 8017d6c:	4630      	mov	r0, r6
 8017d6e:	f00d fdbd 	bl	80258ec <GUI_ALLOC_LockH>
 8017d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d74:	9016      	str	r0, [sp, #88]	; 0x58
 8017d76:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8017d78:	f8d8 5000 	ldr.w	r5, [r8]
 8017d7c:	7f03      	ldrb	r3, [r0, #28]
 8017d7e:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8017d82:	f9b2 70c0 	ldrsh.w	r7, [r2, #192]	; 0xc0
 8017d86:	4429      	add	r1, r5
 8017d88:	fb04 f303 	mul.w	r3, r4, r3
 8017d8c:	1bc9      	subs	r1, r1, r7
 8017d8e:	428b      	cmp	r3, r1
 8017d90:	dc05      	bgt.n	8017d9e <TREEVIEW_Callback+0xb36>
 8017d92:	18e5      	adds	r5, r4, r3
 8017d94:	428d      	cmp	r5, r1
 8017d96:	dd02      	ble.n	8017d9e <TREEVIEW_Callback+0xb36>
 8017d98:	8b05      	ldrh	r5, [r0, #24]
 8017d9a:	07ef      	lsls	r7, r5, #31
 8017d9c:	d451      	bmi.n	8017e42 <TREEVIEW_Callback+0xbda>
 8017d9e:	f8b2 109c 	ldrh.w	r1, [r2, #156]	; 0x9c
 8017da2:	0789      	lsls	r1, r1, #30
 8017da4:	d533      	bpl.n	8017e0e <TREEVIEW_Callback+0xba6>
 8017da6:	4658      	mov	r0, fp
 8017da8:	a928      	add	r1, sp, #160	; 0xa0
 8017daa:	f004 f871 	bl	801be90 <WM_GetInsideRectExScrollbar>
 8017dae:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	; 0xa0
 8017db2:	f9bd 00a4 	ldrsh.w	r0, [sp, #164]	; 0xa4
 8017db6:	f8d8 2000 	ldr.w	r2, [r8]
 8017dba:	42a2      	cmp	r2, r4
 8017dbc:	db1f      	blt.n	8017dfe <TREEVIEW_Callback+0xb96>
 8017dbe:	4282      	cmp	r2, r0
 8017dc0:	dc1d      	bgt.n	8017dfe <TREEVIEW_Callback+0xb96>
 8017dc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017dc4:	f8d2 40ac 	ldr.w	r4, [r2, #172]	; 0xac
 8017dc8:	2c00      	cmp	r4, #0
 8017dca:	d047      	beq.n	8017e5c <TREEVIEW_Callback+0xbf4>
 8017dcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017dce:	9803      	ldr	r0, [sp, #12]
 8017dd0:	8b14      	ldrh	r4, [r2, #24]
 8017dd2:	f00d fd9d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017dd6:	a814      	add	r0, sp, #80	; 0x50
 8017dd8:	f00d fd9a 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017ddc:	07a7      	lsls	r7, r4, #30
 8017dde:	4630      	mov	r0, r6
 8017de0:	d538      	bpl.n	8017e54 <TREEVIEW_Callback+0xbec>
 8017de2:	f7fe faad 	bl	8016340 <_CollapseItem>
 8017de6:	f7ff bb7a 	b.w	80174de <TREEVIEW_Callback+0x276>
 8017dea:	44e3      	add	fp, ip
 8017dec:	fa1f fb8b 	uxth.w	fp, fp
 8017df0:	e64f      	b.n	8017a92 <TREEVIEW_Callback+0x82a>
 8017df2:	4658      	mov	r0, fp
 8017df4:	2103      	movs	r1, #3
 8017df6:	f004 fb07 	bl	801c408 <WM_NotifyParent>
 8017dfa:	f7ff ba4b 	b.w	8017294 <TREEVIEW_Callback+0x2c>
 8017dfe:	9803      	ldr	r0, [sp, #12]
 8017e00:	f00d fd86 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e04:	a814      	add	r0, sp, #80	; 0x50
 8017e06:	f00d fd83 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e0a:	f7ff bb68 	b.w	80174de <TREEVIEW_Callback+0x276>
 8017e0e:	301d      	adds	r0, #29
 8017e10:	f8d2 5094 	ldr.w	r5, [r2, #148]	; 0x94
 8017e14:	441c      	add	r4, r3
 8017e16:	f00b ff0d 	bl	8023c34 <GUI_GetStringDistX>
 8017e1a:	4425      	add	r5, r4
 8017e1c:	4428      	add	r0, r5
 8017e1e:	e7ca      	b.n	8017db6 <TREEVIEW_Callback+0xb4e>
 8017e20:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8017e24:	f8cd b00c 	str.w	fp, [sp, #12]
 8017e28:	e43e      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017e2a:	ab0a      	add	r3, sp, #40	; 0x28
 8017e2c:	9303      	str	r3, [sp, #12]
 8017e2e:	e43b      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017e30:	68a0      	ldr	r0, [r4, #8]
 8017e32:	a928      	add	r1, sp, #160	; 0xa0
 8017e34:	f004 fa80 	bl	801c338 <WM_GetScrollState>
 8017e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017e3c:	649a      	str	r2, [r3, #72]	; 0x48
 8017e3e:	f7ff bb69 	b.w	8017514 <TREEVIEW_Callback+0x2ac>
 8017e42:	9803      	ldr	r0, [sp, #12]
 8017e44:	f00d fd64 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e48:	a814      	add	r0, sp, #80	; 0x50
 8017e4a:	f00d fd61 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e4e:	07ac      	lsls	r4, r5, #30
 8017e50:	4630      	mov	r0, r6
 8017e52:	d4c6      	bmi.n	8017de2 <TREEVIEW_Callback+0xb7a>
 8017e54:	f7fe fa9e 	bl	8016394 <_ExpandItem>
 8017e58:	f7ff bb41 	b.w	80174de <TREEVIEW_Callback+0x276>
 8017e5c:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
 8017e60:	4658      	mov	r0, fp
 8017e62:	f006 f9cd 	bl	801e200 <WM_InvalidateWindow>
 8017e66:	9803      	ldr	r0, [sp, #12]
 8017e68:	f00d fd52 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e6c:	a814      	add	r0, sp, #80	; 0x50
 8017e6e:	f00d fd4f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e72:	4621      	mov	r1, r4
 8017e74:	4623      	mov	r3, r4
 8017e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017e7a:	4658      	mov	r0, fp
 8017e7c:	f003 f948 	bl	801b110 <WM_CreateTimer>
 8017e80:	4604      	mov	r4, r0
 8017e82:	4658      	mov	r0, fp
 8017e84:	f00d fd32 	bl	80258ec <GUI_ALLOC_LockH>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	9014      	str	r0, [sp, #80]	; 0x50
 8017e8c:	a814      	add	r0, sp, #80	; 0x50
 8017e8e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 8017e92:	f00d fd3d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017e96:	f7ff bb22 	b.w	80174de <TREEVIEW_Callback+0x276>
 8017e9a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8017e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ea2:	e401      	b.n	80176a8 <TREEVIEW_Callback+0x440>
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	f7ff f977 	bl	8017198 <TREEVIEW_ITEM_Expand>
 8017eaa:	f7ff b9f3 	b.w	8017294 <TREEVIEW_Callback+0x2c>
 8017eae:	f00d fd1d 	bl	80258ec <GUI_ALLOC_LockH>
 8017eb2:	af16      	add	r7, sp, #88	; 0x58
 8017eb4:	9016      	str	r0, [sp, #88]	; 0x58
 8017eb6:	9703      	str	r7, [sp, #12]
 8017eb8:	f890 801c 	ldrb.w	r8, [r0, #28]
 8017ebc:	9505      	str	r5, [sp, #20]
 8017ebe:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8017ec2:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 8017ec6:	462f      	mov	r7, r5
 8017ec8:	e018      	b.n	8017efc <TREEVIEW_Callback+0xc94>
 8017eca:	f00d fd21 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017ece:	2c00      	cmp	r4, #0
 8017ed0:	d133      	bne.n	8017f3a <TREEVIEW_Callback+0xcd2>
 8017ed2:	4638      	mov	r0, r7
 8017ed4:	f00d fd0a 	bl	80258ec <GUI_ALLOC_LockH>
 8017ed8:	901f      	str	r0, [sp, #124]	; 0x7c
 8017eda:	4648      	mov	r0, r9
 8017edc:	463c      	mov	r4, r7
 8017ede:	f00d fd17 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017ee2:	9803      	ldr	r0, [sp, #12]
 8017ee4:	f00d fd14 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f00d fcff 	bl	80258ec <GUI_ALLOC_LockH>
 8017eee:	9016      	str	r0, [sp, #88]	; 0x58
 8017ef0:	7f03      	ldrb	r3, [r0, #28]
 8017ef2:	4598      	cmp	r8, r3
 8017ef4:	dc31      	bgt.n	8017f5a <TREEVIEW_Callback+0xcf2>
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d02d      	beq.n	8017f56 <TREEVIEW_Callback+0xcee>
 8017efa:	4627      	mov	r7, r4
 8017efc:	4638      	mov	r0, r7
 8017efe:	f00d fcf5 	bl	80258ec <GUI_ALLOC_LockH>
 8017f02:	9028      	str	r0, [sp, #160]	; 0xa0
 8017f04:	7f06      	ldrb	r6, [r0, #28]
 8017f06:	2400      	movs	r4, #0
 8017f08:	6885      	ldr	r5, [r0, #8]
 8017f0a:	4650      	mov	r0, sl
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	d0dc      	beq.n	8017eca <TREEVIEW_Callback+0xc62>
 8017f10:	f00d fcfe 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017f14:	4628      	mov	r0, r5
 8017f16:	f00d fce9 	bl	80258ec <GUI_ALLOC_LockH>
 8017f1a:	9028      	str	r0, [sp, #160]	; 0xa0
 8017f1c:	b90c      	cbnz	r4, 8017f22 <TREEVIEW_Callback+0xcba>
 8017f1e:	7f06      	ldrb	r6, [r0, #28]
 8017f20:	462c      	mov	r4, r5
 8017f22:	8b02      	ldrh	r2, [r0, #24]
 8017f24:	07d3      	lsls	r3, r2, #31
 8017f26:	d5ef      	bpl.n	8017f08 <TREEVIEW_Callback+0xca0>
 8017f28:	7f01      	ldrb	r1, [r0, #28]
 8017f2a:	42b1      	cmp	r1, r6
 8017f2c:	daec      	bge.n	8017f08 <TREEVIEW_Callback+0xca0>
 8017f2e:	f012 0f02 	tst.w	r2, #2
 8017f32:	bf08      	it	eq
 8017f34:	462c      	moveq	r4, r5
 8017f36:	460e      	mov	r6, r1
 8017f38:	e7e6      	b.n	8017f08 <TREEVIEW_Callback+0xca0>
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	f00d fcd6 	bl	80258ec <GUI_ALLOC_LockH>
 8017f40:	4603      	mov	r3, r0
 8017f42:	4648      	mov	r0, r9
 8017f44:	8b1e      	ldrh	r6, [r3, #24]
 8017f46:	931f      	str	r3, [sp, #124]	; 0x7c
 8017f48:	f00d fce2 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017f4c:	07f1      	lsls	r1, r6, #31
 8017f4e:	d4c8      	bmi.n	8017ee2 <TREEVIEW_Callback+0xc7a>
 8017f50:	42a7      	cmp	r7, r4
 8017f52:	d1d2      	bne.n	8017efa <TREEVIEW_Callback+0xc92>
 8017f54:	e7c5      	b.n	8017ee2 <TREEVIEW_Callback+0xc7a>
 8017f56:	9d05      	ldr	r5, [sp, #20]
 8017f58:	462c      	mov	r4, r5
 8017f5a:	9803      	ldr	r0, [sp, #12]
 8017f5c:	f00d fcd8 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017f60:	4658      	mov	r0, fp
 8017f62:	4621      	mov	r1, r4
 8017f64:	f7fe fd80 	bl	8016a68 <_SetSel>
 8017f68:	f7ff b994 	b.w	8017294 <TREEVIEW_Callback+0x2c>
 8017f6c:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8017f70:	f10d 097c 	add.w	r9, sp, #124	; 0x7c
 8017f74:	4628      	mov	r0, r5
 8017f76:	f00d fcb9 	bl	80258ec <GUI_ALLOC_LockH>
 8017f7a:	9028      	str	r0, [sp, #160]	; 0xa0
 8017f7c:	7f07      	ldrb	r7, [r0, #28]
 8017f7e:	4603      	mov	r3, r0
 8017f80:	2400      	movs	r4, #0
 8017f82:	689e      	ldr	r6, [r3, #8]
 8017f84:	4650      	mov	r0, sl
 8017f86:	b986      	cbnz	r6, 8017faa <TREEVIEW_Callback+0xd42>
 8017f88:	f00d fcc2 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017f8c:	bb1c      	cbnz	r4, 8017fd6 <TREEVIEW_Callback+0xd6e>
 8017f8e:	4628      	mov	r0, r5
 8017f90:	f00d fcac 	bl	80258ec <GUI_ALLOC_LockH>
 8017f94:	901f      	str	r0, [sp, #124]	; 0x7c
 8017f96:	4648      	mov	r0, r9
 8017f98:	f00d fcba 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017f9c:	462c      	mov	r4, r5
 8017f9e:	4658      	mov	r0, fp
 8017fa0:	4621      	mov	r1, r4
 8017fa2:	f7fe fd61 	bl	8016a68 <_SetSel>
 8017fa6:	f7ff b975 	b.w	8017294 <TREEVIEW_Callback+0x2c>
 8017faa:	f00d fcb1 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017fae:	4630      	mov	r0, r6
 8017fb0:	f00d fc9c 	bl	80258ec <GUI_ALLOC_LockH>
 8017fb4:	9028      	str	r0, [sp, #160]	; 0xa0
 8017fb6:	b90c      	cbnz	r4, 8017fbc <TREEVIEW_Callback+0xd54>
 8017fb8:	7f07      	ldrb	r7, [r0, #28]
 8017fba:	4634      	mov	r4, r6
 8017fbc:	8b01      	ldrh	r1, [r0, #24]
 8017fbe:	07ca      	lsls	r2, r1, #31
 8017fc0:	d507      	bpl.n	8017fd2 <TREEVIEW_Callback+0xd6a>
 8017fc2:	7f02      	ldrb	r2, [r0, #28]
 8017fc4:	42ba      	cmp	r2, r7
 8017fc6:	da04      	bge.n	8017fd2 <TREEVIEW_Callback+0xd6a>
 8017fc8:	f011 0f02 	tst.w	r1, #2
 8017fcc:	bf08      	it	eq
 8017fce:	4634      	moveq	r4, r6
 8017fd0:	4617      	mov	r7, r2
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	e7d5      	b.n	8017f82 <TREEVIEW_Callback+0xd1a>
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	f00d fc88 	bl	80258ec <GUI_ALLOC_LockH>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	4648      	mov	r0, r9
 8017fe0:	8b1e      	ldrh	r6, [r3, #24]
 8017fe2:	931f      	str	r3, [sp, #124]	; 0x7c
 8017fe4:	f00d fc94 	bl	8025910 <GUI_ALLOC_UnlockH>
 8017fe8:	07f3      	lsls	r3, r6, #31
 8017fea:	d4d8      	bmi.n	8017f9e <TREEVIEW_Callback+0xd36>
 8017fec:	42a5      	cmp	r5, r4
 8017fee:	d0d6      	beq.n	8017f9e <TREEVIEW_Callback+0xd36>
 8017ff0:	4625      	mov	r5, r4
 8017ff2:	e7bf      	b.n	8017f74 <TREEVIEW_Callback+0xd0c>
 8017ff4:	20000254 	.word	0x20000254

08017ff8 <TEXT_Callback>:
 8017ff8:	b530      	push	{r4, r5, lr}
 8017ffa:	6845      	ldr	r5, [r0, #4]
 8017ffc:	b085      	sub	sp, #20
 8017ffe:	4604      	mov	r4, r0
 8018000:	4601      	mov	r1, r0
 8018002:	4628      	mov	r0, r5
 8018004:	f7fd fe44 	bl	8015c90 <WIDGET_HandleActive>
 8018008:	b1b8      	cbz	r0, 801803a <TEXT_Callback+0x42>
 801800a:	6823      	ldr	r3, [r4, #0]
 801800c:	2b0f      	cmp	r3, #15
 801800e:	d016      	beq.n	801803e <TEXT_Callback+0x46>
 8018010:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8018014:	d040      	beq.n	8018098 <TEXT_Callback+0xa0>
 8018016:	2b0b      	cmp	r3, #11
 8018018:	d10c      	bne.n	8018034 <TEXT_Callback+0x3c>
 801801a:	4628      	mov	r0, r5
 801801c:	f00d fc66 	bl	80258ec <GUI_ALLOC_LockH>
 8018020:	ad04      	add	r5, sp, #16
 8018022:	4603      	mov	r3, r0
 8018024:	f845 3d08 	str.w	r3, [r5, #-8]!
 8018028:	3044      	adds	r0, #68	; 0x44
 801802a:	f00d fd91 	bl	8025b50 <GUI_ALLOC_FreePtr>
 801802e:	4628      	mov	r0, r5
 8018030:	f00d fc6e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018034:	4620      	mov	r0, r4
 8018036:	f006 fe49 	bl	801eccc <WM_DefaultProc>
 801803a:	b005      	add	sp, #20
 801803c:	bd30      	pop	{r4, r5, pc}
 801803e:	4628      	mov	r0, r5
 8018040:	f00d fc54 	bl	80258ec <GUI_ALLOC_LockH>
 8018044:	9000      	str	r0, [sp, #0]
 8018046:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018048:	f00a f848 	bl	80220dc <LCD_SetColor>
 801804c:	9b00      	ldr	r3, [sp, #0]
 801804e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018050:	f00c fbca 	bl	80247e8 <GUI_SetFont>
 8018054:	4628      	mov	r0, r5
 8018056:	f003 f8e3 	bl	801b220 <WM_GetHasTrans>
 801805a:	b340      	cbz	r0, 80180ae <TEXT_Callback+0xb6>
 801805c:	9b00      	ldr	r3, [sp, #0]
 801805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018060:	b1ab      	cbz	r3, 801808e <TEXT_Callback+0x96>
 8018062:	2002      	movs	r0, #2
 8018064:	f00c fbf0 	bl	8024848 <GUI_SetTextMode>
 8018068:	a802      	add	r0, sp, #8
 801806a:	f003 fddb 	bl	801bc24 <WM_GetClientRect>
 801806e:	9b00      	ldr	r3, [sp, #0]
 8018070:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018072:	f00d fc3b 	bl	80258ec <GUI_ALLOC_LockH>
 8018076:	9b00      	ldr	r3, [sp, #0]
 8018078:	9001      	str	r0, [sp, #4]
 801807a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 801807e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018082:	a902      	add	r1, sp, #8
 8018084:	f00b fd0a 	bl	8023a9c <GUI_DispStringInRectWrap>
 8018088:	a801      	add	r0, sp, #4
 801808a:	f00d fc41 	bl	8025910 <GUI_ALLOC_UnlockH>
 801808e:	4668      	mov	r0, sp
 8018090:	f00d fc3e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018094:	b005      	add	sp, #20
 8018096:	bd30      	pop	{r4, r5, pc}
 8018098:	68e3      	ldr	r3, [r4, #12]
 801809a:	b17b      	cbz	r3, 80180bc <TEXT_Callback+0xc4>
 801809c:	7a1b      	ldrb	r3, [r3, #8]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	bf0c      	ite	eq
 80180a2:	2102      	moveq	r1, #2
 80180a4:	2101      	movne	r1, #1
 80180a6:	4628      	mov	r0, r5
 80180a8:	f004 f9ae 	bl	801c408 <WM_NotifyParent>
 80180ac:	e7c2      	b.n	8018034 <TEXT_Callback+0x3c>
 80180ae:	9b00      	ldr	r3, [sp, #0]
 80180b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80180b2:	f00a f80b 	bl	80220cc <LCD_SetBkColor>
 80180b6:	f00b ffd1 	bl	802405c <GUI_Clear>
 80180ba:	e7cf      	b.n	801805c <TEXT_Callback+0x64>
 80180bc:	2103      	movs	r1, #3
 80180be:	e7f2      	b.n	80180a6 <TEXT_Callback+0xae>

080180c0 <TEXT_CreateIndirect>:
 80180c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c4:	4689      	mov	r9, r1
 80180c6:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80180ca:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 80180ce:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80180d2:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 80180d6:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 80180da:	8a47      	ldrh	r7, [r0, #18]
 80180dc:	8906      	ldrh	r6, [r0, #8]
 80180de:	6845      	ldr	r5, [r0, #4]
 80180e0:	b089      	sub	sp, #36	; 0x24
 80180e2:	1888      	adds	r0, r1, r2
 80180e4:	449b      	add	fp, r3
 80180e6:	9005      	str	r0, [sp, #20]
 80180e8:	f00b f880 	bl	80231ec <GUI_Lock>
 80180ec:	f10a 0320 	add.w	r3, sl, #32
 80180f0:	f04f 0c03 	mov.w	ip, #3
 80180f4:	f8df e090 	ldr.w	lr, [pc, #144]	; 8018188 <TEXT_CreateIndirect+0xc8>
 80180f8:	9303      	str	r3, [sp, #12]
 80180fa:	f8cd 9000 	str.w	r9, [sp]
 80180fe:	4623      	mov	r3, r4
 8018100:	9805      	ldr	r0, [sp, #20]
 8018102:	f8cd c004 	str.w	ip, [sp, #4]
 8018106:	4659      	mov	r1, fp
 8018108:	4642      	mov	r2, r8
 801810a:	f8cd e008 	str.w	lr, [sp, #8]
 801810e:	f006 f8d3 	bl	801e2b8 <WM_CreateWindowAsChild>
 8018112:	4604      	mov	r4, r0
 8018114:	b300      	cbz	r0, 8018158 <TEXT_CreateIndirect+0x98>
 8018116:	b32d      	cbz	r5, 8018164 <TEXT_CreateIndirect+0xa4>
 8018118:	4628      	mov	r0, r5
 801811a:	f7e8 f883 	bl	8000224 <strlen>
 801811e:	3001      	adds	r0, #1
 8018120:	f00d fd6c 	bl	8025bfc <GUI_ALLOC_AllocZero>
 8018124:	4681      	mov	r9, r0
 8018126:	b9f8      	cbnz	r0, 8018168 <TEXT_CreateIndirect+0xa8>
 8018128:	f10d 081c 	add.w	r8, sp, #28
 801812c:	4620      	mov	r0, r4
 801812e:	f00d fbdd 	bl	80258ec <GUI_ALLOC_LockH>
 8018132:	b231      	sxth	r1, r6
 8018134:	2200      	movs	r2, #0
 8018136:	9007      	str	r0, [sp, #28]
 8018138:	f7fd fcb0 	bl	8015a9c <WIDGET__Init>
 801813c:	4b11      	ldr	r3, [pc, #68]	; (8018184 <TEXT_CreateIndirect+0xc4>)
 801813e:	9e07      	ldr	r6, [sp, #28]
 8018140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018142:	f106 0534 	add.w	r5, r6, #52	; 0x34
 8018146:	f8c6 9044 	str.w	r9, [r6, #68]	; 0x44
 801814a:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
 801814e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018152:	4640      	mov	r0, r8
 8018154:	f00d fbdc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018158:	f00b f83e 	bl	80231d8 <GUI_Unlock>
 801815c:	4620      	mov	r0, r4
 801815e:	b009      	add	sp, #36	; 0x24
 8018160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018164:	46a9      	mov	r9, r5
 8018166:	e7df      	b.n	8018128 <TEXT_CreateIndirect+0x68>
 8018168:	f00d fbc0 	bl	80258ec <GUI_ALLOC_LockH>
 801816c:	f10d 0820 	add.w	r8, sp, #32
 8018170:	4629      	mov	r1, r5
 8018172:	f848 0d04 	str.w	r0, [r8, #-4]!
 8018176:	f012 fc7b 	bl	802aa70 <strcpy>
 801817a:	4640      	mov	r0, r8
 801817c:	f00d fbc8 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018180:	e7d4      	b.n	801812c <TEXT_CreateIndirect+0x6c>
 8018182:	bf00      	nop
 8018184:	20000180 	.word	0x20000180
 8018188:	08017ff9 	.word	0x08017ff9

0801818c <TEXT_SetFont>:
 801818c:	b530      	push	{r4, r5, lr}
 801818e:	4604      	mov	r4, r0
 8018190:	b083      	sub	sp, #12
 8018192:	460d      	mov	r5, r1
 8018194:	b908      	cbnz	r0, 801819a <TEXT_SetFont+0xe>
 8018196:	b003      	add	sp, #12
 8018198:	bd30      	pop	{r4, r5, pc}
 801819a:	f00b f827 	bl	80231ec <GUI_Lock>
 801819e:	4620      	mov	r0, r4
 80181a0:	f00d fba4 	bl	80258ec <GUI_ALLOC_LockH>
 80181a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80181a6:	9001      	str	r0, [sp, #4]
 80181a8:	42ab      	cmp	r3, r5
 80181aa:	d003      	beq.n	80181b4 <TEXT_SetFont+0x28>
 80181ac:	6345      	str	r5, [r0, #52]	; 0x34
 80181ae:	4620      	mov	r0, r4
 80181b0:	f006 f826 	bl	801e200 <WM_InvalidateWindow>
 80181b4:	a801      	add	r0, sp, #4
 80181b6:	f00d fbab 	bl	8025910 <GUI_ALLOC_UnlockH>
 80181ba:	f00b f80d 	bl	80231d8 <GUI_Unlock>
 80181be:	b003      	add	sp, #12
 80181c0:	bd30      	pop	{r4, r5, pc}
 80181c2:	bf00      	nop

080181c4 <TEXT_SetText>:
 80181c4:	b530      	push	{r4, r5, lr}
 80181c6:	4604      	mov	r4, r0
 80181c8:	b083      	sub	sp, #12
 80181ca:	460d      	mov	r5, r1
 80181cc:	b918      	cbnz	r0, 80181d6 <TEXT_SetText+0x12>
 80181ce:	2501      	movs	r5, #1
 80181d0:	4628      	mov	r0, r5
 80181d2:	b003      	add	sp, #12
 80181d4:	bd30      	pop	{r4, r5, pc}
 80181d6:	f00b f809 	bl	80231ec <GUI_Lock>
 80181da:	4620      	mov	r0, r4
 80181dc:	f00d fb86 	bl	80258ec <GUI_ALLOC_LockH>
 80181e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80181e2:	9000      	str	r0, [sp, #0]
 80181e4:	4668      	mov	r0, sp
 80181e6:	9301      	str	r3, [sp, #4]
 80181e8:	f00d fb92 	bl	8025910 <GUI_ALLOC_UnlockH>
 80181ec:	4629      	mov	r1, r5
 80181ee:	a801      	add	r0, sp, #4
 80181f0:	f00a f8c4 	bl	802237c <GUI__SetText>
 80181f4:	f1d0 0501 	rsbs	r5, r0, #1
 80181f8:	bf38      	it	cc
 80181fa:	2500      	movcc	r5, #0
 80181fc:	b125      	cbz	r5, 8018208 <TEXT_SetText+0x44>
 80181fe:	f00a ffeb 	bl	80231d8 <GUI_Unlock>
 8018202:	4628      	mov	r0, r5
 8018204:	b003      	add	sp, #12
 8018206:	bd30      	pop	{r4, r5, pc}
 8018208:	4620      	mov	r0, r4
 801820a:	f00d fb6f 	bl	80258ec <GUI_ALLOC_LockH>
 801820e:	9b01      	ldr	r3, [sp, #4]
 8018210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018212:	9000      	str	r0, [sp, #0]
 8018214:	429a      	cmp	r2, r3
 8018216:	bf18      	it	ne
 8018218:	6443      	strne	r3, [r0, #68]	; 0x44
 801821a:	4668      	mov	r0, sp
 801821c:	f00d fb78 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018220:	4620      	mov	r0, r4
 8018222:	f005 ffed 	bl	801e200 <WM_InvalidateWindow>
 8018226:	e7ea      	b.n	80181fe <TEXT_SetText+0x3a>

08018228 <TEXT_SetTextAlign>:
 8018228:	b530      	push	{r4, r5, lr}
 801822a:	4604      	mov	r4, r0
 801822c:	b083      	sub	sp, #12
 801822e:	460d      	mov	r5, r1
 8018230:	b188      	cbz	r0, 8018256 <TEXT_SetTextAlign+0x2e>
 8018232:	f00a ffdb 	bl	80231ec <GUI_Lock>
 8018236:	4620      	mov	r0, r4
 8018238:	f00d fb58 	bl	80258ec <GUI_ALLOC_LockH>
 801823c:	ab02      	add	r3, sp, #8
 801823e:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
 8018242:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018246:	4618      	mov	r0, r3
 8018248:	f00d fb62 	bl	8025910 <GUI_ALLOC_UnlockH>
 801824c:	4620      	mov	r0, r4
 801824e:	f005 ffd7 	bl	801e200 <WM_InvalidateWindow>
 8018252:	f00a ffc1 	bl	80231d8 <GUI_Unlock>
 8018256:	b003      	add	sp, #12
 8018258:	bd30      	pop	{r4, r5, pc}
 801825a:	bf00      	nop

0801825c <TEXT_SetTextColor>:
 801825c:	b530      	push	{r4, r5, lr}
 801825e:	4604      	mov	r4, r0
 8018260:	b083      	sub	sp, #12
 8018262:	460d      	mov	r5, r1
 8018264:	b908      	cbnz	r0, 801826a <TEXT_SetTextColor+0xe>
 8018266:	b003      	add	sp, #12
 8018268:	bd30      	pop	{r4, r5, pc}
 801826a:	f00a ffbf 	bl	80231ec <GUI_Lock>
 801826e:	4620      	mov	r0, r4
 8018270:	f00d fb3c 	bl	80258ec <GUI_ALLOC_LockH>
 8018274:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018276:	9001      	str	r0, [sp, #4]
 8018278:	42ab      	cmp	r3, r5
 801827a:	d003      	beq.n	8018284 <TEXT_SetTextColor+0x28>
 801827c:	6385      	str	r5, [r0, #56]	; 0x38
 801827e:	4620      	mov	r0, r4
 8018280:	f005 ffbe 	bl	801e200 <WM_InvalidateWindow>
 8018284:	a801      	add	r0, sp, #4
 8018286:	f00d fb43 	bl	8025910 <GUI_ALLOC_UnlockH>
 801828a:	f00a ffa5 	bl	80231d8 <GUI_Unlock>
 801828e:	b003      	add	sp, #12
 8018290:	bd30      	pop	{r4, r5, pc}
 8018292:	bf00      	nop

08018294 <SPINBOX__DrawBk>:
 8018294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018298:	b089      	sub	sp, #36	; 0x24
 801829a:	460e      	mov	r6, r1
 801829c:	4680      	mov	r8, r0
 801829e:	f00d fb25 	bl	80258ec <GUI_ALLOC_LockH>
 80182a2:	4603      	mov	r3, r0
 80182a4:	a808      	add	r0, sp, #32
 80182a6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80182a8:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80182ac:	f840 3d1c 	str.w	r3, [r0, #-28]!
 80182b0:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 80182b4:	f8b3 708a 	ldrh.w	r7, [r3, #138]	; 0x8a
 80182b8:	6824      	ldr	r4, [r4, #0]
 80182ba:	f00d fb29 	bl	8025910 <GUI_ALLOC_UnlockH>
 80182be:	4648      	mov	r0, r9
 80182c0:	a902      	add	r1, sp, #8
 80182c2:	f004 f845 	bl	801c350 <WM_GetWindowRectEx>
 80182c6:	a906      	add	r1, sp, #24
 80182c8:	4640      	mov	r0, r8
 80182ca:	f004 f841 	bl	801c350 <WM_GetWindowRectEx>
 80182ce:	4630      	mov	r0, r6
 80182d0:	f00c fa28 	bl	8024724 <GUI_SetColor>
 80182d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80182d8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80182dc:	b2a3      	uxth	r3, r4
 80182de:	441a      	add	r2, r3
 80182e0:	1a52      	subs	r2, r2, r1
 80182e2:	b292      	uxth	r2, r2
 80182e4:	2d01      	cmp	r5, #1
 80182e6:	f8ad 3010 	strh.w	r3, [sp, #16]
 80182ea:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182ee:	d031      	beq.n	8018354 <SPINBOX__DrawBk+0xc0>
 80182f0:	2d02      	cmp	r5, #2
 80182f2:	d026      	beq.n	8018342 <SPINBOX__DrawBk+0xae>
 80182f4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80182f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80182fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018300:	3901      	subs	r1, #1
 8018302:	1a89      	subs	r1, r1, r2
 8018304:	b289      	uxth	r1, r1
 8018306:	b21b      	sxth	r3, r3
 8018308:	b208      	sxth	r0, r1
 801830a:	4283      	cmp	r3, r0
 801830c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018310:	dd28      	ble.n	8018364 <SPINBOX__DrawBk+0xd0>
 8018312:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8018316:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801831a:	3101      	adds	r1, #1
 801831c:	1a9b      	subs	r3, r3, r2
 801831e:	1b1c      	subs	r4, r3, r4
 8018320:	1a8a      	subs	r2, r1, r2
 8018322:	b292      	uxth	r2, r2
 8018324:	b2a4      	uxth	r4, r4
 8018326:	b211      	sxth	r1, r2
 8018328:	b223      	sxth	r3, r4
 801832a:	4299      	cmp	r1, r3
 801832c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018330:	f8ad 4016 	strh.w	r4, [sp, #22]
 8018334:	dc02      	bgt.n	801833c <SPINBOX__DrawBk+0xa8>
 8018336:	a804      	add	r0, sp, #16
 8018338:	f00b f972 	bl	8023620 <GUI_FillRectEx>
 801833c:	b009      	add	sp, #36	; 0x24
 801833e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018342:	3701      	adds	r7, #1
 8018344:	b2bf      	uxth	r7, r7
 8018346:	443a      	add	r2, r7
 8018348:	441f      	add	r7, r3
 801834a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801834e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018352:	e7cf      	b.n	80182f4 <SPINBOX__DrawBk+0x60>
 8018354:	1c79      	adds	r1, r7, #1
 8018356:	440a      	add	r2, r1
 8018358:	441f      	add	r7, r3
 801835a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801835e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018362:	e7c7      	b.n	80182f4 <SPINBOX__DrawBk+0x60>
 8018364:	a804      	add	r0, sp, #16
 8018366:	f00b f95b 	bl	8023620 <GUI_FillRectEx>
 801836a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801836e:	e7d0      	b.n	8018312 <SPINBOX__DrawBk+0x7e>

08018370 <SPINBOX__GetButtonRect>:
 8018370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018374:	b082      	sub	sp, #8
 8018376:	460c      	mov	r4, r1
 8018378:	4691      	mov	r9, r2
 801837a:	f00d fab7 	bl	80258ec <GUI_ALLOC_LockH>
 801837e:	4603      	mov	r3, r0
 8018380:	a802      	add	r0, sp, #8
 8018382:	885e      	ldrh	r6, [r3, #2]
 8018384:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8018388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801838a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801838e:	f9b3 7000 	ldrsh.w	r7, [r3]
 8018392:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 8018396:	f840 3d04 	str.w	r3, [r0, #-4]!
 801839a:	ebc6 060e 	rsb	r6, r6, lr
 801839e:	f8d1 8000 	ldr.w	r8, [r1]
 80183a2:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 80183a6:	1bd7      	subs	r7, r2, r7
 80183a8:	f00d fab2 	bl	8025910 <GUI_ALLOC_UnlockH>
 80183ac:	2d01      	cmp	r5, #1
 80183ae:	b2b6      	uxth	r6, r6
 80183b0:	d02f      	beq.n	8018412 <SPINBOX__GetButtonRect+0xa2>
 80183b2:	d318      	bcc.n	80183e6 <SPINBOX__GetButtonRect+0x76>
 80183b4:	2d02      	cmp	r5, #2
 80183b6:	d113      	bne.n	80183e0 <SPINBOX__GetButtonRect+0x70>
 80183b8:	fa1f f888 	uxth.w	r8, r8
 80183bc:	ebc8 0606 	rsb	r6, r8, r6
 80183c0:	80e6      	strh	r6, [r4, #6]
 80183c2:	f8a4 8002 	strh.w	r8, [r4, #2]
 80183c6:	f1b9 0f00 	cmp.w	r9, #0
 80183ca:	d133      	bne.n	8018434 <SPINBOX__GetButtonRect+0xc4>
 80183cc:	b2bf      	uxth	r7, r7
 80183ce:	ebca 0a07 	rsb	sl, sl, r7
 80183d2:	ebc8 0a0a 	rsb	sl, r8, sl
 80183d6:	ebc8 0707 	rsb	r7, r8, r7
 80183da:	f8a4 a000 	strh.w	sl, [r4]
 80183de:	80a7      	strh	r7, [r4, #4]
 80183e0:	b002      	add	sp, #8
 80183e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e6:	b2bf      	uxth	r7, r7
 80183e8:	ebca 0a07 	rsb	sl, sl, r7
 80183ec:	fa1f f388 	uxth.w	r3, r8
 80183f0:	ebc3 0a0a 	rsb	sl, r3, sl
 80183f4:	1aff      	subs	r7, r7, r3
 80183f6:	f8a4 a000 	strh.w	sl, [r4]
 80183fa:	80a7      	strh	r7, [r4, #4]
 80183fc:	f1b9 0f00 	cmp.w	r9, #0
 8018400:	d011      	beq.n	8018426 <SPINBOX__GetButtonRect+0xb6>
 8018402:	0872      	lsrs	r2, r6, #1
 8018404:	1af6      	subs	r6, r6, r3
 8018406:	1c53      	adds	r3, r2, #1
 8018408:	8063      	strh	r3, [r4, #2]
 801840a:	80e6      	strh	r6, [r4, #6]
 801840c:	b002      	add	sp, #8
 801840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018412:	fa1f f888 	uxth.w	r8, r8
 8018416:	44c2      	add	sl, r8
 8018418:	f8a4 a004 	strh.w	sl, [r4, #4]
 801841c:	f8a4 8000 	strh.w	r8, [r4]
 8018420:	f1b9 0f00 	cmp.w	r9, #0
 8018424:	d10e      	bne.n	8018444 <SPINBOX__GetButtonRect+0xd4>
 8018426:	0876      	lsrs	r6, r6, #1
 8018428:	80e6      	strh	r6, [r4, #6]
 801842a:	f8a4 8002 	strh.w	r8, [r4, #2]
 801842e:	b002      	add	sp, #8
 8018430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018434:	44c2      	add	sl, r8
 8018436:	f8a4 a004 	strh.w	sl, [r4, #4]
 801843a:	f8a4 8000 	strh.w	r8, [r4]
 801843e:	b002      	add	sp, #8
 8018440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018444:	0873      	lsrs	r3, r6, #1
 8018446:	ebc8 0806 	rsb	r8, r8, r6
 801844a:	3301      	adds	r3, #1
 801844c:	8063      	strh	r3, [r4, #2]
 801844e:	f8a4 8006 	strh.w	r8, [r4, #6]
 8018452:	b002      	add	sp, #8
 8018454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018458 <SPINBOX_Callback>:
 8018458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801845c:	6844      	ldr	r4, [r0, #4]
 801845e:	b093      	sub	sp, #76	; 0x4c
 8018460:	4605      	mov	r5, r0
 8018462:	4620      	mov	r0, r4
 8018464:	f00d fa42 	bl	80258ec <GUI_ALLOC_LockH>
 8018468:	ae12      	add	r6, sp, #72	; 0x48
 801846a:	4603      	mov	r3, r0
 801846c:	f846 0d24 	str.w	r0, [r6, #-36]!
 8018470:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 8018474:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 8018478:	4630      	mov	r0, r6
 801847a:	f00d fa49 	bl	8025910 <GUI_ALLOC_UnlockH>
 801847e:	682b      	ldr	r3, [r5, #0]
 8018480:	2b0d      	cmp	r3, #13
 8018482:	f000 80c3 	beq.w	801860c <SPINBOX_Callback+0x1b4>
 8018486:	2b1e      	cmp	r3, #30
 8018488:	f000 80e6 	beq.w	8018658 <SPINBOX_Callback+0x200>
 801848c:	4620      	mov	r0, r4
 801848e:	4629      	mov	r1, r5
 8018490:	f7fd fbfe 	bl	8015c90 <WIDGET_HandleActive>
 8018494:	2800      	cmp	r0, #0
 8018496:	f000 80b6 	beq.w	8018606 <SPINBOX_Callback+0x1ae>
 801849a:	682b      	ldr	r3, [r5, #0]
 801849c:	2b11      	cmp	r3, #17
 801849e:	f000 8108 	beq.w	80186b2 <SPINBOX_Callback+0x25a>
 80184a2:	f340 80cd 	ble.w	8018640 <SPINBOX_Callback+0x1e8>
 80184a6:	2b28      	cmp	r3, #40	; 0x28
 80184a8:	f000 822b 	beq.w	8018902 <SPINBOX_Callback+0x4aa>
 80184ac:	f340 80e3 	ble.w	8018676 <SPINBOX_Callback+0x21e>
 80184b0:	f240 1213 	movw	r2, #275	; 0x113
 80184b4:	4293      	cmp	r3, r2
 80184b6:	f000 81d4 	beq.w	8018862 <SPINBOX_Callback+0x40a>
 80184ba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80184be:	f040 80c7 	bne.w	8018650 <SPINBOX_Callback+0x1f8>
 80184c2:	68eb      	ldr	r3, [r5, #12]
 80184c4:	4620      	mov	r0, r4
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	f000 83be 	beq.w	8018c48 <SPINBOX_Callback+0x7f0>
 80184cc:	f00d fa0e 	bl	80258ec <GUI_ALLOC_LockH>
 80184d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80184d2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 80184d6:	f003 ff6b 	bl	801c3b0 <WM_IsFocusable>
 80184da:	2800      	cmp	r0, #0
 80184dc:	f040 8332 	bne.w	8018b44 <SPINBOX_Callback+0x6ec>
 80184e0:	4620      	mov	r0, r4
 80184e2:	f004 f811 	bl	801c508 <WM_SetFocus>
 80184e6:	68ee      	ldr	r6, [r5, #12]
 80184e8:	4620      	mov	r0, r4
 80184ea:	6871      	ldr	r1, [r6, #4]
 80184ec:	9103      	str	r1, [sp, #12]
 80184ee:	6837      	ldr	r7, [r6, #0]
 80184f0:	f00d f9fc 	bl	80258ec <GUI_ALLOC_LockH>
 80184f4:	ad12      	add	r5, sp, #72	; 0x48
 80184f6:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 80184fa:	f845 0d10 	str.w	r0, [r5, #-16]!
 80184fe:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8018502:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018504:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 8018508:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 801850c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8018510:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 8018514:	9002      	str	r0, [sp, #8]
 8018516:	4628      	mov	r0, r5
 8018518:	ebce 0909 	rsb	r9, lr, r9
 801851c:	f8d2 8000 	ldr.w	r8, [r2]
 8018520:	ebc1 0b0b 	rsb	fp, r1, fp
 8018524:	f00d f9f4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018528:	f1ba 0f01 	cmp.w	sl, #1
 801852c:	fa1f f989 	uxth.w	r9, r9
 8018530:	f000 836c 	beq.w	8018c0c <SPINBOX_Callback+0x7b4>
 8018534:	f0c0 8356 	bcc.w	8018be4 <SPINBOX_Callback+0x78c>
 8018538:	f1ba 0f02 	cmp.w	sl, #2
 801853c:	f040 834b 	bne.w	8018bd6 <SPINBOX_Callback+0x77e>
 8018540:	9a02      	ldr	r2, [sp, #8]
 8018542:	fa1f f888 	uxth.w	r8, r8
 8018546:	fa1f fb8b 	uxth.w	fp, fp
 801854a:	ebc2 0a0b 	rsb	sl, r2, fp
 801854e:	ebc8 0909 	rsb	r9, r8, r9
 8018552:	ebc8 0a0a 	rsb	sl, r8, sl
 8018556:	ebc8 020b 	rsb	r2, r8, fp
 801855a:	fa1f f989 	uxth.w	r9, r9
 801855e:	fa0f fa8a 	sxth.w	sl, sl
 8018562:	f8cd 9008 	str.w	r9, [sp, #8]
 8018566:	b292      	uxth	r2, r2
 8018568:	4557      	cmp	r7, sl
 801856a:	f2c0 821b 	blt.w	80189a4 <SPINBOX_Callback+0x54c>
 801856e:	b213      	sxth	r3, r2
 8018570:	429f      	cmp	r7, r3
 8018572:	f300 8217 	bgt.w	80189a4 <SPINBOX_Callback+0x54c>
 8018576:	9903      	ldr	r1, [sp, #12]
 8018578:	fa0f f388 	sxth.w	r3, r8
 801857c:	4299      	cmp	r1, r3
 801857e:	f2c0 8211 	blt.w	80189a4 <SPINBOX_Callback+0x54c>
 8018582:	9902      	ldr	r1, [sp, #8]
 8018584:	b20b      	sxth	r3, r1
 8018586:	9903      	ldr	r1, [sp, #12]
 8018588:	4299      	cmp	r1, r3
 801858a:	f300 820b 	bgt.w	80189a4 <SPINBOX_Callback+0x54c>
 801858e:	2700      	movs	r7, #0
 8018590:	7a33      	ldrb	r3, [r6, #8]
 8018592:	2b00      	cmp	r3, #0
 8018594:	f000 8242 	beq.w	8018a1c <SPINBOX_Callback+0x5c4>
 8018598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801859a:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 801859e:	42b7      	cmp	r7, r6
 80185a0:	b272      	sxtb	r2, r6
 80185a2:	d02b      	beq.n	80185fc <SPINBOX_Callback+0x1a4>
 80185a4:	f04f 0801 	mov.w	r8, #1
 80185a8:	3201      	adds	r2, #1
 80185aa:	f883 80a2 	strb.w	r8, [r3, #162]	; 0xa2
 80185ae:	d025      	beq.n	80185fc <SPINBOX_Callback+0x1a4>
 80185b0:	4620      	mov	r0, r4
 80185b2:	f00d f99b 	bl	80258ec <GUI_ALLOC_LockH>
 80185b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80185b8:	900c      	str	r0, [sp, #48]	; 0x30
 80185ba:	079a      	lsls	r2, r3, #30
 80185bc:	d51a      	bpl.n	80185f4 <SPINBOX_Callback+0x19c>
 80185be:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 80185c2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80185c6:	b2f6      	uxtb	r6, r6
 80185c8:	fa08 f806 	lsl.w	r8, r8, r6
 80185cc:	ea22 0208 	bic.w	r2, r2, r8
 80185d0:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f040 823e 	bne.w	8018a56 <SPINBOX_Callback+0x5fe>
 80185da:	4620      	mov	r0, r4
 80185dc:	2102      	movs	r1, #2
 80185de:	f003 ff13 	bl	801c408 <WM_NotifyParent>
 80185e2:	4620      	mov	r0, r4
 80185e4:	4629      	mov	r1, r5
 80185e6:	4632      	mov	r2, r6
 80185e8:	f7ff fec2 	bl	8018370 <SPINBOX__GetButtonRect>
 80185ec:	4620      	mov	r0, r4
 80185ee:	4629      	mov	r1, r5
 80185f0:	f005 fd40 	bl	801e074 <WM_InvalidateRect>
 80185f4:	a80c      	add	r0, sp, #48	; 0x30
 80185f6:	f00d f98b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80185fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185fc:	f883 70a1 	strb.w	r7, [r3, #161]	; 0xa1
 8018600:	a80b      	add	r0, sp, #44	; 0x2c
 8018602:	f00d f985 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018606:	b013      	add	sp, #76	; 0x4c
 8018608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801860c:	68eb      	ldr	r3, [r5, #12]
 801860e:	68db      	ldr	r3, [r3, #12]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d0f8      	beq.n	8018606 <SPINBOX_Callback+0x1ae>
 8018614:	7a1b      	ldrb	r3, [r3, #8]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d0f5      	beq.n	8018606 <SPINBOX_Callback+0x1ae>
 801861a:	4638      	mov	r0, r7
 801861c:	f003 fec8 	bl	801c3b0 <WM_IsFocusable>
 8018620:	2800      	cmp	r0, #0
 8018622:	d1f0      	bne.n	8018606 <SPINBOX_Callback+0x1ae>
 8018624:	4620      	mov	r0, r4
 8018626:	f003 fec3 	bl	801c3b0 <WM_IsFocusable>
 801862a:	2800      	cmp	r0, #0
 801862c:	d0eb      	beq.n	8018606 <SPINBOX_Callback+0x1ae>
 801862e:	4620      	mov	r0, r4
 8018630:	f003 feb0 	bl	801c394 <WM_HasFocus>
 8018634:	2800      	cmp	r0, #0
 8018636:	d1e6      	bne.n	8018606 <SPINBOX_Callback+0x1ae>
 8018638:	4620      	mov	r0, r4
 801863a:	f003 ff65 	bl	801c508 <WM_SetFocus>
 801863e:	e7e2      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018640:	2b0e      	cmp	r3, #14
 8018642:	f000 80cf 	beq.w	80187e4 <SPINBOX_Callback+0x38c>
 8018646:	2b0f      	cmp	r3, #15
 8018648:	f000 80e4 	beq.w	8018814 <SPINBOX_Callback+0x3bc>
 801864c:	2b0b      	cmp	r3, #11
 801864e:	d020      	beq.n	8018692 <SPINBOX_Callback+0x23a>
 8018650:	4628      	mov	r0, r5
 8018652:	f006 fb3b 	bl	801eccc <WM_DefaultProc>
 8018656:	e7d6      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018658:	4638      	mov	r0, r7
 801865a:	f003 fea9 	bl	801c3b0 <WM_IsFocusable>
 801865e:	2800      	cmp	r0, #0
 8018660:	f43f af14 	beq.w	801848c <SPINBOX_Callback+0x34>
 8018664:	68eb      	ldr	r3, [r5, #12]
 8018666:	4638      	mov	r0, r7
 8018668:	2101      	movs	r1, #1
 801866a:	2b00      	cmp	r3, #0
 801866c:	f000 81fe 	beq.w	8018a6c <SPINBOX_Callback+0x614>
 8018670:	f7fd faa2 	bl	8015bb8 <WIDGET_OrState>
 8018674:	e70a      	b.n	801848c <SPINBOX_Callback+0x34>
 8018676:	2b26      	cmp	r3, #38	; 0x26
 8018678:	d1ea      	bne.n	8018650 <SPINBOX_Callback+0x1f8>
 801867a:	68e9      	ldr	r1, [r5, #12]
 801867c:	2905      	cmp	r1, #5
 801867e:	f000 8275 	beq.w	8018b6c <SPINBOX_Callback+0x714>
 8018682:	dbc0      	blt.n	8018606 <SPINBOX_Callback+0x1ae>
 8018684:	3908      	subs	r1, #8
 8018686:	2901      	cmp	r1, #1
 8018688:	d8bd      	bhi.n	8018606 <SPINBOX_Callback+0x1ae>
 801868a:	4620      	mov	r0, r4
 801868c:	f005 fdb8 	bl	801e200 <WM_InvalidateWindow>
 8018690:	e7b9      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018692:	4620      	mov	r0, r4
 8018694:	f00d f92a 	bl	80258ec <GUI_ALLOC_LockH>
 8018698:	9009      	str	r0, [sp, #36]	; 0x24
 801869a:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 801869e:	2800      	cmp	r0, #0
 80186a0:	f040 8268 	bne.w	8018b74 <SPINBOX_Callback+0x71c>
 80186a4:	4630      	mov	r0, r6
 80186a6:	f00d f933 	bl	8025910 <GUI_ALLOC_UnlockH>
 80186aa:	4628      	mov	r0, r5
 80186ac:	f006 fb0e 	bl	801eccc <WM_DefaultProc>
 80186b0:	e7a9      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 80186b2:	4620      	mov	r0, r4
 80186b4:	f00d f91a 	bl	80258ec <GUI_ALLOC_LockH>
 80186b8:	68ee      	ldr	r6, [r5, #12]
 80186ba:	900a      	str	r0, [sp, #40]	; 0x28
 80186bc:	6871      	ldr	r1, [r6, #4]
 80186be:	9103      	str	r1, [sp, #12]
 80186c0:	4620      	mov	r0, r4
 80186c2:	f8d6 8000 	ldr.w	r8, [r6]
 80186c6:	f00d f911 	bl	80258ec <GUI_ALLOC_LockH>
 80186ca:	ad12      	add	r5, sp, #72	; 0x48
 80186cc:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 80186d0:	f845 0d10 	str.w	r0, [r5, #-16]!
 80186d4:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80186d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80186da:	f890 708c 	ldrb.w	r7, [r0, #140]	; 0x8c
 80186de:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 80186e2:	f9b0 1000 	ldrsh.w	r1, [r0]
 80186e6:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
 80186ea:	9002      	str	r0, [sp, #8]
 80186ec:	4628      	mov	r0, r5
 80186ee:	ebce 0a0a 	rsb	sl, lr, sl
 80186f2:	f8d3 9000 	ldr.w	r9, [r3]
 80186f6:	ebc1 0b0b 	rsb	fp, r1, fp
 80186fa:	f00d f909 	bl	8025910 <GUI_ALLOC_UnlockH>
 80186fe:	2f01      	cmp	r7, #1
 8018700:	fa1f fa8a 	uxth.w	sl, sl
 8018704:	f000 825b 	beq.w	8018bbe <SPINBOX_Callback+0x766>
 8018708:	f0c0 8246 	bcc.w	8018b98 <SPINBOX_Callback+0x740>
 801870c:	2f02      	cmp	r7, #2
 801870e:	f040 823e 	bne.w	8018b8e <SPINBOX_Callback+0x736>
 8018712:	9a02      	ldr	r2, [sp, #8]
 8018714:	fa1f f389 	uxth.w	r3, r9
 8018718:	fa1f fb8b 	uxth.w	fp, fp
 801871c:	ebc2 070b 	rsb	r7, r2, fp
 8018720:	ebc3 0a0a 	rsb	sl, r3, sl
 8018724:	1aff      	subs	r7, r7, r3
 8018726:	ebc3 010b 	rsb	r1, r3, fp
 801872a:	fa1f fa8a 	uxth.w	sl, sl
 801872e:	b23f      	sxth	r7, r7
 8018730:	f8cd a010 	str.w	sl, [sp, #16]
 8018734:	fa1f f981 	uxth.w	r9, r1
 8018738:	45b8      	cmp	r8, r7
 801873a:	f2c0 80e7 	blt.w	801890c <SPINBOX_Callback+0x4b4>
 801873e:	fa0f f289 	sxth.w	r2, r9
 8018742:	4590      	cmp	r8, r2
 8018744:	f300 80e2 	bgt.w	801890c <SPINBOX_Callback+0x4b4>
 8018748:	9903      	ldr	r1, [sp, #12]
 801874a:	b21a      	sxth	r2, r3
 801874c:	4291      	cmp	r1, r2
 801874e:	f2c0 80dd 	blt.w	801890c <SPINBOX_Callback+0x4b4>
 8018752:	9904      	ldr	r1, [sp, #16]
 8018754:	b20a      	sxth	r2, r1
 8018756:	9903      	ldr	r1, [sp, #12]
 8018758:	4291      	cmp	r1, r2
 801875a:	f300 80d7 	bgt.w	801890c <SPINBOX_Callback+0x4b4>
 801875e:	f04f 0900 	mov.w	r9, #0
 8018762:	46c8      	mov	r8, r9
 8018764:	f04f 0a01 	mov.w	sl, #1
 8018768:	4620      	mov	r0, r4
 801876a:	2101      	movs	r1, #1
 801876c:	f002 fe4e 	bl	801b40c <WM_SetCapture>
 8018770:	7a37      	ldrb	r7, [r6, #8]
 8018772:	2f01      	cmp	r7, #1
 8018774:	f000 817d 	beq.w	8018a72 <SPINBOX_Callback+0x61a>
 8018778:	2f80      	cmp	r7, #128	; 0x80
 801877a:	f000 817a 	beq.w	8018a72 <SPINBOX_Callback+0x61a>
 801877e:	bb57      	cbnz	r7, 80187d6 <SPINBOX_Callback+0x37e>
 8018780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018782:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 8018786:	b272      	sxtb	r2, r6
 8018788:	3201      	adds	r2, #1
 801878a:	d025      	beq.n	80187d8 <SPINBOX_Callback+0x380>
 801878c:	4620      	mov	r0, r4
 801878e:	f00d f8ad 	bl	80258ec <GUI_ALLOC_LockH>
 8018792:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018794:	900c      	str	r0, [sp, #48]	; 0x30
 8018796:	079b      	lsls	r3, r3, #30
 8018798:	d51a      	bpl.n	80187d0 <SPINBOX_Callback+0x378>
 801879a:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 801879e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80187a2:	b2f6      	uxtb	r6, r6
 80187a4:	2101      	movs	r1, #1
 80187a6:	40b1      	lsls	r1, r6
 80187a8:	ea22 0201 	bic.w	r2, r2, r1
 80187ac:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	f040 82f7 	bne.w	8018da4 <SPINBOX_Callback+0x94c>
 80187b6:	4620      	mov	r0, r4
 80187b8:	2102      	movs	r1, #2
 80187ba:	f003 fe25 	bl	801c408 <WM_NotifyParent>
 80187be:	4620      	mov	r0, r4
 80187c0:	4629      	mov	r1, r5
 80187c2:	4632      	mov	r2, r6
 80187c4:	f7ff fdd4 	bl	8018370 <SPINBOX__GetButtonRect>
 80187c8:	4620      	mov	r0, r4
 80187ca:	4629      	mov	r1, r5
 80187cc:	f005 fc52 	bl	801e074 <WM_InvalidateRect>
 80187d0:	a80c      	add	r0, sp, #48	; 0x30
 80187d2:	f00d f89d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80187d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187d8:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 80187dc:	a80a      	add	r0, sp, #40	; 0x28
 80187de:	f00d f897 	bl	8025910 <GUI_ALLOC_UnlockH>
 80187e2:	e710      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 80187e4:	68ec      	ldr	r4, [r5, #12]
 80187e6:	6863      	ldr	r3, [r4, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	f43f af31 	beq.w	8018650 <SPINBOX_Callback+0x1f8>
 80187ee:	4638      	mov	r0, r7
 80187f0:	f003 fdde 	bl	801c3b0 <WM_IsFocusable>
 80187f4:	2800      	cmp	r0, #0
 80187f6:	f000 8288 	beq.w	8018d0a <SPINBOX_Callback+0x8b2>
 80187fa:	68ab      	ldr	r3, [r5, #8]
 80187fc:	42bb      	cmp	r3, r7
 80187fe:	f040 8259 	bne.w	8018cb4 <SPINBOX_Callback+0x85c>
 8018802:	6823      	ldr	r3, [r4, #0]
 8018804:	3b09      	subs	r3, #9
 8018806:	2b01      	cmp	r3, #1
 8018808:	f63f af22 	bhi.w	8018650 <SPINBOX_Callback+0x1f8>
 801880c:	6868      	ldr	r0, [r5, #4]
 801880e:	f003 fe7b 	bl	801c508 <WM_SetFocus>
 8018812:	e71d      	b.n	8018650 <SPINBOX_Callback+0x1f8>
 8018814:	4620      	mov	r0, r4
 8018816:	f00d f869 	bl	80258ec <GUI_ALLOC_LockH>
 801881a:	4603      	mov	r3, r0
 801881c:	4630      	mov	r0, r6
 801881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018820:	9309      	str	r3, [sp, #36]	; 0x24
 8018822:	6815      	ldr	r5, [r2, #0]
 8018824:	f00d f874 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018828:	4620      	mov	r0, r4
 801882a:	f004 f8d3 	bl	801c9d4 <WM_GetWindowSizeY>
 801882e:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8018832:	2800      	cmp	r0, #0
 8018834:	4638      	mov	r0, r7
 8018836:	f340 81a7 	ble.w	8018b88 <SPINBOX_Callback+0x730>
 801883a:	f004 f84b 	bl	801c8d4 <WM_ShowWindow>
 801883e:	4620      	mov	r0, r4
 8018840:	f00d f854 	bl	80258ec <GUI_ALLOC_LockH>
 8018844:	ab12      	add	r3, sp, #72	; 0x48
 8018846:	f843 0d10 	str.w	r0, [r3, #-16]!
 801884a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 801884e:	6815      	ldr	r5, [r2, #0]
 8018850:	4618      	mov	r0, r3
 8018852:	f00d f85d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018856:	2d00      	cmp	r5, #0
 8018858:	f43f aed5 	beq.w	8018606 <SPINBOX_Callback+0x1ae>
 801885c:	4620      	mov	r0, r4
 801885e:	47a8      	blx	r5
 8018860:	e6d1      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018862:	4620      	mov	r0, r4
 8018864:	f00d f842 	bl	80258ec <GUI_ALLOC_LockH>
 8018868:	4602      	mov	r2, r0
 801886a:	a812      	add	r0, sp, #72	; 0x48
 801886c:	f840 2d20 	str.w	r2, [r0, #-32]!
 8018870:	f892 50a0 	ldrb.w	r5, [r2, #160]	; 0xa0
 8018874:	f00d f84c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018878:	4620      	mov	r0, r4
 801887a:	f00d f837 	bl	80258ec <GUI_ALLOC_LockH>
 801887e:	900b      	str	r0, [sp, #44]	; 0x2c
 8018880:	f990 60a2 	ldrsb.w	r6, [r0, #162]	; 0xa2
 8018884:	4603      	mov	r3, r0
 8018886:	2e00      	cmp	r6, #0
 8018888:	f040 8162 	bne.w	8018b50 <SPINBOX_Callback+0x6f8>
 801888c:	a80b      	add	r0, sp, #44	; 0x2c
 801888e:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 8018892:	f8b3 8088 	ldrh.w	r8, [r3, #136]	; 0x88
 8018896:	f00d f83b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801889a:	b26b      	sxtb	r3, r5
 801889c:	3301      	adds	r3, #1
 801889e:	f000 814f 	beq.w	8018b40 <SPINBOX_Callback+0x6e8>
 80188a2:	4638      	mov	r0, r7
 80188a4:	f003 fd84 	bl	801c3b0 <WM_IsFocusable>
 80188a8:	2800      	cmp	r0, #0
 80188aa:	f000 813e 	beq.w	8018b2a <SPINBOX_Callback+0x6d2>
 80188ae:	2d00      	cmp	r5, #0
 80188b0:	ad0e      	add	r5, sp, #56	; 0x38
 80188b2:	bf14      	ite	ne
 80188b4:	f04f 0c13 	movne.w	ip, #19
 80188b8:	f04f 0c11 	moveq.w	ip, #17
 80188bc:	4629      	mov	r1, r5
 80188be:	f04f 0e0e 	mov.w	lr, #14
 80188c2:	aa0c      	add	r2, sp, #48	; 0x30
 80188c4:	2301      	movs	r3, #1
 80188c6:	4638      	mov	r0, r7
 80188c8:	9410      	str	r4, [sp, #64]	; 0x40
 80188ca:	970f      	str	r7, [sp, #60]	; 0x3c
 80188cc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80188d0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80188d4:	9211      	str	r2, [sp, #68]	; 0x44
 80188d6:	930d      	str	r3, [sp, #52]	; 0x34
 80188d8:	f005 fba0 	bl	801e01c <WM_SendMessage>
 80188dc:	4638      	mov	r0, r7
 80188de:	4629      	mov	r1, r5
 80188e0:	960d      	str	r6, [sp, #52]	; 0x34
 80188e2:	f005 fb9b 	bl	801e01c <WM_SendMessage>
 80188e6:	4620      	mov	r0, r4
 80188e8:	f00d f800 	bl	80258ec <GUI_ALLOC_LockH>
 80188ec:	2132      	movs	r1, #50	; 0x32
 80188ee:	4603      	mov	r3, r0
 80188f0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 80188f4:	930e      	str	r3, [sp, #56]	; 0x38
 80188f6:	f002 fc4b 	bl	801b190 <WM_RestartTimer>
 80188fa:	4628      	mov	r0, r5
 80188fc:	f00d f808 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018900:	e681      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018902:	4638      	mov	r0, r7
 8018904:	68e9      	ldr	r1, [r5, #12]
 8018906:	f003 f953 	bl	801bbb0 <WM_SetEnableState>
 801890a:	e67c      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 801890c:	4620      	mov	r0, r4
 801890e:	9300      	str	r3, [sp, #0]
 8018910:	f00c ffec 	bl	80258ec <GUI_ALLOC_LockH>
 8018914:	900e      	str	r0, [sp, #56]	; 0x38
 8018916:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018918:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 801891c:	6809      	ldr	r1, [r1, #0]
 801891e:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8018922:	f890 a08c 	ldrb.w	sl, [r0, #140]	; 0x8c
 8018926:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801892a:	9102      	str	r1, [sp, #8]
 801892c:	8881      	ldrh	r1, [r0, #4]
 801892e:	8800      	ldrh	r0, [r0, #0]
 8018930:	9007      	str	r0, [sp, #28]
 8018932:	4628      	mov	r0, r5
 8018934:	ebce 0b0b 	rsb	fp, lr, fp
 8018938:	9205      	str	r2, [sp, #20]
 801893a:	9106      	str	r1, [sp, #24]
 801893c:	f00c ffe8 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018940:	f1ba 0f01 	cmp.w	sl, #1
 8018944:	fa1f fb8b 	uxth.w	fp, fp
 8018948:	9b00      	ldr	r3, [sp, #0]
 801894a:	f000 81ce 	beq.w	8018cea <SPINBOX_Callback+0x892>
 801894e:	f0c0 81b6 	bcc.w	8018cbe <SPINBOX_Callback+0x866>
 8018952:	f1ba 0f02 	cmp.w	sl, #2
 8018956:	d10c      	bne.n	8018972 <SPINBOX_Callback+0x51a>
 8018958:	9902      	ldr	r1, [sp, #8]
 801895a:	b28b      	uxth	r3, r1
 801895c:	9905      	ldr	r1, [sp, #20]
 801895e:	ebc3 0a0b 	rsb	sl, r3, fp
 8018962:	4419      	add	r1, r3
 8018964:	fa1f fa8a 	uxth.w	sl, sl
 8018968:	f8cd a010 	str.w	sl, [sp, #16]
 801896c:	fa1f f981 	uxth.w	r9, r1
 8018970:	b21f      	sxth	r7, r3
 8018972:	45b8      	cmp	r8, r7
 8018974:	f2c0 80f4 	blt.w	8018b60 <SPINBOX_Callback+0x708>
 8018978:	fa0f f189 	sxth.w	r1, r9
 801897c:	4588      	cmp	r8, r1
 801897e:	f300 80ef 	bgt.w	8018b60 <SPINBOX_Callback+0x708>
 8018982:	9a03      	ldr	r2, [sp, #12]
 8018984:	b21b      	sxth	r3, r3
 8018986:	429a      	cmp	r2, r3
 8018988:	f2c0 80ea 	blt.w	8018b60 <SPINBOX_Callback+0x708>
 801898c:	9b04      	ldr	r3, [sp, #16]
 801898e:	fa0f fa83 	sxth.w	sl, r3
 8018992:	4552      	cmp	r2, sl
 8018994:	f300 80e4 	bgt.w	8018b60 <SPINBOX_Callback+0x708>
 8018998:	f04f 0901 	mov.w	r9, #1
 801899c:	46c8      	mov	r8, r9
 801899e:	f04f 0a02 	mov.w	sl, #2
 80189a2:	e6e1      	b.n	8018768 <SPINBOX_Callback+0x310>
 80189a4:	4620      	mov	r0, r4
 80189a6:	9201      	str	r2, [sp, #4]
 80189a8:	f00c ffa0 	bl	80258ec <GUI_ALLOC_LockH>
 80189ac:	900e      	str	r0, [sp, #56]	; 0x38
 80189ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80189b0:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 80189b4:	6809      	ldr	r1, [r1, #0]
 80189b6:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80189ba:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 80189be:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 80189c2:	9104      	str	r1, [sp, #16]
 80189c4:	8881      	ldrh	r1, [r0, #4]
 80189c6:	8800      	ldrh	r0, [r0, #0]
 80189c8:	9007      	str	r0, [sp, #28]
 80189ca:	4628      	mov	r0, r5
 80189cc:	ebce 0b0b 	rsb	fp, lr, fp
 80189d0:	9305      	str	r3, [sp, #20]
 80189d2:	9106      	str	r1, [sp, #24]
 80189d4:	f00c ff9c 	bl	8025910 <GUI_ALLOC_UnlockH>
 80189d8:	f1b9 0f01 	cmp.w	r9, #1
 80189dc:	fa1f fb8b 	uxth.w	fp, fp
 80189e0:	9a01      	ldr	r2, [sp, #4]
 80189e2:	f000 81ba 	beq.w	8018d5a <SPINBOX_Callback+0x902>
 80189e6:	f0c0 81a0 	bcc.w	8018d2a <SPINBOX_Callback+0x8d2>
 80189ea:	f1b9 0f02 	cmp.w	r9, #2
 80189ee:	d10d      	bne.n	8018a0c <SPINBOX_Callback+0x5b4>
 80189f0:	9904      	ldr	r1, [sp, #16]
 80189f2:	9a05      	ldr	r2, [sp, #20]
 80189f4:	fa1f f881 	uxth.w	r8, r1
 80189f8:	ebc8 090b 	rsb	r9, r8, fp
 80189fc:	4442      	add	r2, r8
 80189fe:	fa1f f989 	uxth.w	r9, r9
 8018a02:	f8cd 9008 	str.w	r9, [sp, #8]
 8018a06:	b292      	uxth	r2, r2
 8018a08:	fa0f fa88 	sxth.w	sl, r8
 8018a0c:	4557      	cmp	r7, sl
 8018a0e:	f280 8109 	bge.w	8018c24 <SPINBOX_Callback+0x7cc>
 8018a12:	7a33      	ldrb	r3, [r6, #8]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	f040 811b 	bne.w	8018c50 <SPINBOX_Callback+0x7f8>
 8018a1a:	27ff      	movs	r7, #255	; 0xff
 8018a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a1e:	f893 60a1 	ldrb.w	r6, [r3, #161]	; 0xa1
 8018a22:	b272      	sxtb	r2, r6
 8018a24:	3201      	adds	r2, #1
 8018a26:	f43f ade9 	beq.w	80185fc <SPINBOX_Callback+0x1a4>
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f00c ff5e 	bl	80258ec <GUI_ALLOC_LockH>
 8018a30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018a32:	900c      	str	r0, [sp, #48]	; 0x30
 8018a34:	079b      	lsls	r3, r3, #30
 8018a36:	f57f addd 	bpl.w	80185f4 <SPINBOX_Callback+0x19c>
 8018a3a:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8018a3e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8018a42:	b2f6      	uxtb	r6, r6
 8018a44:	2101      	movs	r1, #1
 8018a46:	40b1      	lsls	r1, r6
 8018a48:	ea22 0201 	bic.w	r2, r2, r1
 8018a4c:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	f43f adc2 	beq.w	80185da <SPINBOX_Callback+0x182>
 8018a56:	4618      	mov	r0, r3
 8018a58:	f002 fb40 	bl	801b0dc <WM_DeleteTimer>
 8018a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a5e:	2100      	movs	r1, #0
 8018a60:	22ff      	movs	r2, #255	; 0xff
 8018a62:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8018a66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8018a6a:	e5b6      	b.n	80185da <SPINBOX_Callback+0x182>
 8018a6c:	f7fd f8c2 	bl	8015bf4 <WIDGET_AndState>
 8018a70:	e50c      	b.n	801848c <SPINBOX_Callback+0x34>
 8018a72:	7a73      	ldrb	r3, [r6, #9]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f47f aeae 	bne.w	80187d6 <SPINBOX_Callback+0x37e>
 8018a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a7c:	fa4f f688 	sxtb.w	r6, r8
 8018a80:	1c71      	adds	r1, r6, #1
 8018a82:	f883 80a1 	strb.w	r8, [r3, #161]	; 0xa1
 8018a86:	f000 8186 	beq.w	8018d96 <SPINBOX_Callback+0x93e>
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f00c ff2e 	bl	80258ec <GUI_ALLOC_LockH>
 8018a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018a92:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a94:	079a      	lsls	r2, r3, #30
 8018a96:	f100 819c 	bmi.w	8018dd2 <SPINBOX_Callback+0x97a>
 8018a9a:	af0b      	add	r7, sp, #44	; 0x2c
 8018a9c:	4638      	mov	r0, r7
 8018a9e:	f00c ff37 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	f00c ff22 	bl	80258ec <GUI_ALLOC_LockH>
 8018aa8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8018aac:	900e      	str	r0, [sp, #56]	; 0x38
 8018aae:	4681      	mov	r9, r0
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	f000 8181 	beq.w	8018db8 <SPINBOX_Callback+0x960>
 8018ab6:	4628      	mov	r0, r5
 8018ab8:	f00c ff2a 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018abc:	4620      	mov	r0, r4
 8018abe:	f00c ff15 	bl	80258ec <GUI_ALLOC_LockH>
 8018ac2:	900b      	str	r0, [sp, #44]	; 0x2c
 8018ac4:	f990 90a2 	ldrsb.w	r9, [r0, #162]	; 0xa2
 8018ac8:	4603      	mov	r3, r0
 8018aca:	f1b9 0f00 	cmp.w	r9, #0
 8018ace:	f040 815a 	bne.w	8018d86 <SPINBOX_Callback+0x92e>
 8018ad2:	4638      	mov	r0, r7
 8018ad4:	f8b3 a088 	ldrh.w	sl, [r3, #136]	; 0x88
 8018ad8:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 8018adc:	f00c ff18 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018ae0:	3601      	adds	r6, #1
 8018ae2:	f43f ae78 	beq.w	80187d6 <SPINBOX_Callback+0x37e>
 8018ae6:	4638      	mov	r0, r7
 8018ae8:	f003 fc62 	bl	801c3b0 <WM_IsFocusable>
 8018aec:	2800      	cmp	r0, #0
 8018aee:	f000 81b7 	beq.w	8018e60 <SPINBOX_Callback+0xa08>
 8018af2:	f1b8 0f00 	cmp.w	r8, #0
 8018af6:	bf14      	ite	ne
 8018af8:	f04f 0e13 	movne.w	lr, #19
 8018afc:	f04f 0e11 	moveq.w	lr, #17
 8018b00:	aa0c      	add	r2, sp, #48	; 0x30
 8018b02:	2301      	movs	r3, #1
 8018b04:	4638      	mov	r0, r7
 8018b06:	4629      	mov	r1, r5
 8018b08:	260e      	movs	r6, #14
 8018b0a:	9410      	str	r4, [sp, #64]	; 0x40
 8018b0c:	970f      	str	r7, [sp, #60]	; 0x3c
 8018b0e:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8018b12:	960e      	str	r6, [sp, #56]	; 0x38
 8018b14:	9211      	str	r2, [sp, #68]	; 0x44
 8018b16:	930d      	str	r3, [sp, #52]	; 0x34
 8018b18:	f005 fa80 	bl	801e01c <WM_SendMessage>
 8018b1c:	4638      	mov	r0, r7
 8018b1e:	4629      	mov	r1, r5
 8018b20:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018b24:	f005 fa7a 	bl	801e01c <WM_SendMessage>
 8018b28:	e655      	b.n	80187d6 <SPINBOX_Callback+0x37e>
 8018b2a:	4638      	mov	r0, r7
 8018b2c:	2d00      	cmp	r5, #0
 8018b2e:	f040 8125 	bne.w	8018d7c <SPINBOX_Callback+0x924>
 8018b32:	f001 fd21 	bl	801a578 <EDIT_GetValue>
 8018b36:	eb08 0100 	add.w	r1, r8, r0
 8018b3a:	4638      	mov	r0, r7
 8018b3c:	f001 fd32 	bl	801a5a4 <EDIT_SetValue>
 8018b40:	ad0e      	add	r5, sp, #56	; 0x38
 8018b42:	e6d0      	b.n	80188e6 <SPINBOX_Callback+0x48e>
 8018b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b46:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8018b4a:	f003 fcdd 	bl	801c508 <WM_SetFocus>
 8018b4e:	e4ca      	b.n	80184e6 <SPINBOX_Callback+0x8e>
 8018b50:	2200      	movs	r2, #0
 8018b52:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8018b56:	a80b      	add	r0, sp, #44	; 0x2c
 8018b58:	f00c feda 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018b5c:	ad0e      	add	r5, sp, #56	; 0x38
 8018b5e:	e6c2      	b.n	80188e6 <SPINBOX_Callback+0x48e>
 8018b60:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8018b64:	46c8      	mov	r8, r9
 8018b66:	f04f 0a00 	mov.w	sl, #0
 8018b6a:	e5fd      	b.n	8018768 <SPINBOX_Callback+0x310>
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	f003 fc4b 	bl	801c408 <WM_NotifyParent>
 8018b72:	e548      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018b74:	f002 fab2 	bl	801b0dc <WM_DeleteTimer>
 8018b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b7a:	2100      	movs	r1, #0
 8018b7c:	22ff      	movs	r2, #255	; 0xff
 8018b7e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8018b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8018b86:	e58d      	b.n	80186a4 <SPINBOX_Callback+0x24c>
 8018b88:	f003 fee4 	bl	801c954 <WM_HideWindow>
 8018b8c:	e657      	b.n	801883e <SPINBOX_Callback+0x3e6>
 8018b8e:	2700      	movs	r7, #0
 8018b90:	9704      	str	r7, [sp, #16]
 8018b92:	46b9      	mov	r9, r7
 8018b94:	463b      	mov	r3, r7
 8018b96:	e5cf      	b.n	8018738 <SPINBOX_Callback+0x2e0>
 8018b98:	9b02      	ldr	r3, [sp, #8]
 8018b9a:	fa1f f289 	uxth.w	r2, r9
 8018b9e:	fa1f fb8b 	uxth.w	fp, fp
 8018ba2:	ebc3 070b 	rsb	r7, r3, fp
 8018ba6:	4613      	mov	r3, r2
 8018ba8:	1aff      	subs	r7, r7, r3
 8018baa:	ebc2 020b 	rsb	r2, r2, fp
 8018bae:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8018bb2:	b23f      	sxth	r7, r7
 8018bb4:	fa1f f982 	uxth.w	r9, r2
 8018bb8:	f8cd a010 	str.w	sl, [sp, #16]
 8018bbc:	e5bc      	b.n	8018738 <SPINBOX_Callback+0x2e0>
 8018bbe:	9902      	ldr	r1, [sp, #8]
 8018bc0:	fa1f f389 	uxth.w	r3, r9
 8018bc4:	4449      	add	r1, r9
 8018bc6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8018bca:	fa1f f981 	uxth.w	r9, r1
 8018bce:	f8cd a010 	str.w	sl, [sp, #16]
 8018bd2:	b21f      	sxth	r7, r3
 8018bd4:	e5b0      	b.n	8018738 <SPINBOX_Callback+0x2e0>
 8018bd6:	f04f 0a00 	mov.w	sl, #0
 8018bda:	f8cd a008 	str.w	sl, [sp, #8]
 8018bde:	4652      	mov	r2, sl
 8018be0:	46d0      	mov	r8, sl
 8018be2:	e4c1      	b.n	8018568 <SPINBOX_Callback+0x110>
 8018be4:	9902      	ldr	r1, [sp, #8]
 8018be6:	fa1f fb8b 	uxth.w	fp, fp
 8018bea:	fa1f f388 	uxth.w	r3, r8
 8018bee:	4698      	mov	r8, r3
 8018bf0:	ebc1 0a0b 	rsb	sl, r1, fp
 8018bf4:	ebc3 030b 	rsb	r3, r3, fp
 8018bf8:	ebc8 0a0a 	rsb	sl, r8, sl
 8018bfc:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8018c00:	fa0f fa8a 	sxth.w	sl, sl
 8018c04:	b29a      	uxth	r2, r3
 8018c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8018c0a:	e4ad      	b.n	8018568 <SPINBOX_Callback+0x110>
 8018c0c:	9a02      	ldr	r2, [sp, #8]
 8018c0e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8018c12:	4442      	add	r2, r8
 8018c14:	fa1f f888 	uxth.w	r8, r8
 8018c18:	b292      	uxth	r2, r2
 8018c1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8018c1e:	fa0f fa88 	sxth.w	sl, r8
 8018c22:	e4a1      	b.n	8018568 <SPINBOX_Callback+0x110>
 8018c24:	b212      	sxth	r2, r2
 8018c26:	4297      	cmp	r7, r2
 8018c28:	f73f aef3 	bgt.w	8018a12 <SPINBOX_Callback+0x5ba>
 8018c2c:	9a03      	ldr	r2, [sp, #12]
 8018c2e:	fa0f f888 	sxth.w	r8, r8
 8018c32:	4542      	cmp	r2, r8
 8018c34:	f6ff aeed 	blt.w	8018a12 <SPINBOX_Callback+0x5ba>
 8018c38:	9b02      	ldr	r3, [sp, #8]
 8018c3a:	fa0f f983 	sxth.w	r9, r3
 8018c3e:	454a      	cmp	r2, r9
 8018c40:	f73f aee7 	bgt.w	8018a12 <SPINBOX_Callback+0x5ba>
 8018c44:	2701      	movs	r7, #1
 8018c46:	e4a3      	b.n	8018590 <SPINBOX_Callback+0x138>
 8018c48:	2103      	movs	r1, #3
 8018c4a:	f003 fbdd 	bl	801c408 <WM_NotifyParent>
 8018c4e:	e4da      	b.n	8018606 <SPINBOX_Callback+0x1ae>
 8018c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c52:	f893 70a1 	ldrb.w	r7, [r3, #161]	; 0xa1
 8018c56:	b27a      	sxtb	r2, r7
 8018c58:	3201      	adds	r2, #1
 8018c5a:	f43f accf 	beq.w	80185fc <SPINBOX_Callback+0x1a4>
 8018c5e:	2600      	movs	r6, #0
 8018c60:	f883 60a2 	strb.w	r6, [r3, #162]	; 0xa2
 8018c64:	4620      	mov	r0, r4
 8018c66:	f00c fe41 	bl	80258ec <GUI_ALLOC_LockH>
 8018c6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018c6c:	900c      	str	r0, [sp, #48]	; 0x30
 8018c6e:	0799      	lsls	r1, r3, #30
 8018c70:	d51a      	bpl.n	8018ca8 <SPINBOX_Callback+0x850>
 8018c72:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8018c76:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8018c7a:	b2ff      	uxtb	r7, r7
 8018c7c:	2101      	movs	r1, #1
 8018c7e:	40b9      	lsls	r1, r7
 8018c80:	ea22 0201 	bic.w	r2, r2, r1
 8018c84:	f880 20a3 	strb.w	r2, [r0, #163]	; 0xa3
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f040 810f 	bne.w	8018eac <SPINBOX_Callback+0xa54>
 8018c8e:	4620      	mov	r0, r4
 8018c90:	2102      	movs	r1, #2
 8018c92:	f003 fbb9 	bl	801c408 <WM_NotifyParent>
 8018c96:	4620      	mov	r0, r4
 8018c98:	4629      	mov	r1, r5
 8018c9a:	463a      	mov	r2, r7
 8018c9c:	f7ff fb68 	bl	8018370 <SPINBOX__GetButtonRect>
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	4629      	mov	r1, r5
 8018ca4:	f005 f9e6 	bl	801e074 <WM_InvalidateRect>
 8018ca8:	a80c      	add	r0, sp, #48	; 0x30
 8018caa:	f00c fe31 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018cae:	27ff      	movs	r7, #255	; 0xff
 8018cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018cb2:	e4a3      	b.n	80185fc <SPINBOX_Callback+0x1a4>
 8018cb4:	4638      	mov	r0, r7
 8018cb6:	4629      	mov	r1, r5
 8018cb8:	f005 f9b0 	bl	801e01c <WM_SendMessage>
 8018cbc:	e4c8      	b.n	8018650 <SPINBOX_Callback+0x1f8>
 8018cbe:	9b06      	ldr	r3, [sp, #24]
 8018cc0:	9907      	ldr	r1, [sp, #28]
 8018cc2:	1a5a      	subs	r2, r3, r1
 8018cc4:	9b05      	ldr	r3, [sp, #20]
 8018cc6:	9902      	ldr	r1, [sp, #8]
 8018cc8:	b292      	uxth	r2, r2
 8018cca:	1ad7      	subs	r7, r2, r3
 8018ccc:	b28b      	uxth	r3, r1
 8018cce:	1aff      	subs	r7, r7, r3
 8018cd0:	1ad2      	subs	r2, r2, r3
 8018cd2:	ebc3 030b 	rsb	r3, r3, fp
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8018cdc:	9304      	str	r3, [sp, #16]
 8018cde:	b23f      	sxth	r7, r7
 8018ce0:	fa1f f982 	uxth.w	r9, r2
 8018ce4:	f10b 0301 	add.w	r3, fp, #1
 8018ce8:	e643      	b.n	8018972 <SPINBOX_Callback+0x51a>
 8018cea:	9a02      	ldr	r2, [sp, #8]
 8018cec:	9905      	ldr	r1, [sp, #20]
 8018cee:	b293      	uxth	r3, r2
 8018cf0:	4419      	add	r1, r3
 8018cf2:	ebc3 030b 	rsb	r3, r3, fp
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8018cfc:	9304      	str	r3, [sp, #16]
 8018cfe:	fa1f f981 	uxth.w	r9, r1
 8018d02:	f10b 0301 	add.w	r3, fp, #1
 8018d06:	b217      	sxth	r7, r2
 8018d08:	e633      	b.n	8018972 <SPINBOX_Callback+0x51a>
 8018d0a:	4638      	mov	r0, r7
 8018d0c:	f001 fc34 	bl	801a578 <EDIT_GetValue>
 8018d10:	6823      	ldr	r3, [r4, #0]
 8018d12:	2b11      	cmp	r3, #17
 8018d14:	4601      	mov	r1, r0
 8018d16:	d040      	beq.n	8018d9a <SPINBOX_Callback+0x942>
 8018d18:	2b13      	cmp	r3, #19
 8018d1a:	f47f ac99 	bne.w	8018650 <SPINBOX_Callback+0x1f8>
 8018d1e:	4638      	mov	r0, r7
 8018d20:	ebc8 0101 	rsb	r1, r8, r1
 8018d24:	f001 fc3e 	bl	801a5a4 <EDIT_SetValue>
 8018d28:	e492      	b.n	8018650 <SPINBOX_Callback+0x1f8>
 8018d2a:	9b06      	ldr	r3, [sp, #24]
 8018d2c:	9907      	ldr	r1, [sp, #28]
 8018d2e:	1a5a      	subs	r2, r3, r1
 8018d30:	9b05      	ldr	r3, [sp, #20]
 8018d32:	9904      	ldr	r1, [sp, #16]
 8018d34:	b292      	uxth	r2, r2
 8018d36:	ebc3 0a02 	rsb	sl, r3, r2
 8018d3a:	b28b      	uxth	r3, r1
 8018d3c:	ebc3 0a0a 	rsb	sl, r3, sl
 8018d40:	1ad2      	subs	r2, r2, r3
 8018d42:	ebc3 030b 	rsb	r3, r3, fp
 8018d46:	ea4f 085b 	mov.w	r8, fp, lsr #1
 8018d4a:	b29b      	uxth	r3, r3
 8018d4c:	fa0f fa8a 	sxth.w	sl, sl
 8018d50:	b292      	uxth	r2, r2
 8018d52:	9302      	str	r3, [sp, #8]
 8018d54:	f108 0801 	add.w	r8, r8, #1
 8018d58:	e658      	b.n	8018a0c <SPINBOX_Callback+0x5b4>
 8018d5a:	9a04      	ldr	r2, [sp, #16]
 8018d5c:	b293      	uxth	r3, r2
 8018d5e:	9a05      	ldr	r2, [sp, #20]
 8018d60:	441a      	add	r2, r3
 8018d62:	ebc3 030b 	rsb	r3, r3, fp
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	9302      	str	r3, [sp, #8]
 8018d6a:	9b04      	ldr	r3, [sp, #16]
 8018d6c:	ea4f 085b 	mov.w	r8, fp, lsr #1
 8018d70:	b292      	uxth	r2, r2
 8018d72:	f108 0801 	add.w	r8, r8, #1
 8018d76:	fa0f fa83 	sxth.w	sl, r3
 8018d7a:	e647      	b.n	8018a0c <SPINBOX_Callback+0x5b4>
 8018d7c:	f001 fbfc 	bl	801a578 <EDIT_GetValue>
 8018d80:	ebc8 0100 	rsb	r1, r8, r0
 8018d84:	e6d9      	b.n	8018b3a <SPINBOX_Callback+0x6e2>
 8018d86:	2200      	movs	r2, #0
 8018d88:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f00c fdbf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d94:	e520      	b.n	80187d8 <SPINBOX_Callback+0x380>
 8018d96:	af0b      	add	r7, sp, #44	; 0x2c
 8018d98:	e690      	b.n	8018abc <SPINBOX_Callback+0x664>
 8018d9a:	4638      	mov	r0, r7
 8018d9c:	4441      	add	r1, r8
 8018d9e:	f001 fc01 	bl	801a5a4 <EDIT_SetValue>
 8018da2:	e455      	b.n	8018650 <SPINBOX_Callback+0x1f8>
 8018da4:	4618      	mov	r0, r3
 8018da6:	f002 f999 	bl	801b0dc <WM_DeleteTimer>
 8018daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018dac:	22ff      	movs	r2, #255	; 0xff
 8018dae:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 8018db2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8018db6:	e4fe      	b.n	80187b6 <SPINBOX_Callback+0x35e>
 8018db8:	4620      	mov	r0, r4
 8018dba:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8018dbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018dc2:	f002 f9a5 	bl	801b110 <WM_CreateTimer>
 8018dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dc8:	f8c9 009c 	str.w	r0, [r9, #156]	; 0x9c
 8018dcc:	f883 80a0 	strb.w	r8, [r3, #160]	; 0xa0
 8018dd0:	e671      	b.n	8018ab6 <SPINBOX_Callback+0x65e>
 8018dd2:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
 8018dd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8018dda:	f880 a0a3 	strb.w	sl, [r0, #163]	; 0xa3
 8018dde:	2101      	movs	r1, #1
 8018de0:	4620      	mov	r0, r4
 8018de2:	f003 fb11 	bl	801c408 <WM_NotifyParent>
 8018de6:	4620      	mov	r0, r4
 8018de8:	f00c fd80 	bl	80258ec <GUI_ALLOC_LockH>
 8018dec:	4603      	mov	r3, r0
 8018dee:	a812      	add	r0, sp, #72	; 0x48
 8018df0:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8018df4:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8018df8:	f840 3d18 	str.w	r3, [r0, #-24]!
 8018dfc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018e00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e04:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8018e06:	f893 b08c 	ldrb.w	fp, [r3, #140]	; 0x8c
 8018e0a:	f8b3 a08a 	ldrh.w	sl, [r3, #138]	; 0x8a
 8018e0e:	683f      	ldr	r7, [r7, #0]
 8018e10:	ebce 030c 	rsb	r3, lr, ip
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	1a8a      	subs	r2, r1, r2
 8018e18:	9201      	str	r2, [sp, #4]
 8018e1a:	9300      	str	r3, [sp, #0]
 8018e1c:	f00c fd78 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018e20:	f1bb 0f01 	cmp.w	fp, #1
 8018e24:	9a01      	ldr	r2, [sp, #4]
 8018e26:	9b00      	ldr	r3, [sp, #0]
 8018e28:	d04a      	beq.n	8018ec0 <SPINBOX_Callback+0xa68>
 8018e2a:	d32a      	bcc.n	8018e82 <SPINBOX_Callback+0xa2a>
 8018e2c:	f1bb 0f02 	cmp.w	fp, #2
 8018e30:	d111      	bne.n	8018e56 <SPINBOX_Callback+0x9fe>
 8018e32:	b2bf      	uxth	r7, r7
 8018e34:	1bdb      	subs	r3, r3, r7
 8018e36:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018e3a:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 8018e3e:	f1b9 0f00 	cmp.w	r9, #0
 8018e42:	d154      	bne.n	8018eee <SPINBOX_Callback+0xa96>
 8018e44:	b292      	uxth	r2, r2
 8018e46:	ebca 0302 	rsb	r3, sl, r2
 8018e4a:	1bdb      	subs	r3, r3, r7
 8018e4c:	1bd2      	subs	r2, r2, r7
 8018e4e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018e52:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018e56:	4620      	mov	r0, r4
 8018e58:	4629      	mov	r1, r5
 8018e5a:	f005 f90b 	bl	801e074 <WM_InvalidateRect>
 8018e5e:	e61c      	b.n	8018a9a <SPINBOX_Callback+0x642>
 8018e60:	4638      	mov	r0, r7
 8018e62:	f1b8 0f00 	cmp.w	r8, #0
 8018e66:	d107      	bne.n	8018e78 <SPINBOX_Callback+0xa20>
 8018e68:	f001 fb86 	bl	801a578 <EDIT_GetValue>
 8018e6c:	eb0a 0100 	add.w	r1, sl, r0
 8018e70:	4638      	mov	r0, r7
 8018e72:	f001 fb97 	bl	801a5a4 <EDIT_SetValue>
 8018e76:	e4ae      	b.n	80187d6 <SPINBOX_Callback+0x37e>
 8018e78:	f001 fb7e 	bl	801a578 <EDIT_GetValue>
 8018e7c:	ebca 0100 	rsb	r1, sl, r0
 8018e80:	e7f6      	b.n	8018e70 <SPINBOX_Callback+0xa18>
 8018e82:	b291      	uxth	r1, r2
 8018e84:	ebca 0001 	rsb	r0, sl, r1
 8018e88:	b2ba      	uxth	r2, r7
 8018e8a:	1a80      	subs	r0, r0, r2
 8018e8c:	1a89      	subs	r1, r1, r2
 8018e8e:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8018e92:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 8018e96:	f1b9 0f00 	cmp.w	r9, #0
 8018e9a:	d022      	beq.n	8018ee2 <SPINBOX_Callback+0xa8a>
 8018e9c:	0859      	lsrs	r1, r3, #1
 8018e9e:	1a9b      	subs	r3, r3, r2
 8018ea0:	1c4a      	adds	r2, r1, #1
 8018ea2:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8018ea6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018eaa:	e7d4      	b.n	8018e56 <SPINBOX_Callback+0x9fe>
 8018eac:	4618      	mov	r0, r3
 8018eae:	f002 f915 	bl	801b0dc <WM_DeleteTimer>
 8018eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018eb4:	22ff      	movs	r2, #255	; 0xff
 8018eb6:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
 8018eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8018ebe:	e6e6      	b.n	8018c8e <SPINBOX_Callback+0x836>
 8018ec0:	b2bf      	uxth	r7, r7
 8018ec2:	44ba      	add	sl, r7
 8018ec4:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8018ec8:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 8018ecc:	f1b9 0f00 	cmp.w	r9, #0
 8018ed0:	d007      	beq.n	8018ee2 <SPINBOX_Callback+0xa8a>
 8018ed2:	085a      	lsrs	r2, r3, #1
 8018ed4:	3201      	adds	r2, #1
 8018ed6:	1bdb      	subs	r3, r3, r7
 8018ed8:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8018edc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018ee0:	e7b9      	b.n	8018e56 <SPINBOX_Callback+0x9fe>
 8018ee2:	085b      	lsrs	r3, r3, #1
 8018ee4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018ee8:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 8018eec:	e7b3      	b.n	8018e56 <SPINBOX_Callback+0x9fe>
 8018eee:	44ba      	add	sl, r7
 8018ef0:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8018ef4:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 8018ef8:	e7ad      	b.n	8018e56 <SPINBOX_Callback+0x9fe>
 8018efa:	bf00      	nop

08018efc <SPINBOX__GetButtonRectEx>:
 8018efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f00:	6a0b      	ldr	r3, [r1, #32]
 8018f02:	b082      	sub	sp, #8
 8018f04:	460c      	mov	r4, r1
 8018f06:	f893 8000 	ldrb.w	r8, [r3]
 8018f0a:	f00c fcef 	bl	80258ec <GUI_ALLOC_LockH>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	a802      	add	r0, sp, #8
 8018f12:	885e      	ldrh	r6, [r3, #2]
 8018f14:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8018f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f1a:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8018f1e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018f22:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 8018f26:	f840 3d04 	str.w	r3, [r0, #-4]!
 8018f2a:	ebc6 060c 	rsb	r6, r6, ip
 8018f2e:	6817      	ldr	r7, [r2, #0]
 8018f30:	f8b3 908a 	ldrh.w	r9, [r3, #138]	; 0x8a
 8018f34:	ebc1 0a0e 	rsb	sl, r1, lr
 8018f38:	f00c fcea 	bl	8025910 <GUI_ALLOC_UnlockH>
 8018f3c:	2d01      	cmp	r5, #1
 8018f3e:	b2b6      	uxth	r6, r6
 8018f40:	d037      	beq.n	8018fb2 <SPINBOX__GetButtonRectEx+0xb6>
 8018f42:	d31f      	bcc.n	8018f84 <SPINBOX__GetButtonRectEx+0x88>
 8018f44:	2d02      	cmp	r5, #2
 8018f46:	d00a      	beq.n	8018f5e <SPINBOX__GetButtonRectEx+0x62>
 8018f48:	2300      	movs	r3, #0
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	461a      	mov	r2, r3
 8018f50:	6122      	str	r2, [r4, #16]
 8018f52:	6160      	str	r0, [r4, #20]
 8018f54:	61a1      	str	r1, [r4, #24]
 8018f56:	61e3      	str	r3, [r4, #28]
 8018f58:	b002      	add	sp, #8
 8018f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f5e:	b2bf      	uxth	r7, r7
 8018f60:	1bf3      	subs	r3, r6, r7
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	f1b8 0f00 	cmp.w	r8, #0
 8018f68:	d12f      	bne.n	8018fca <SPINBOX__GetButtonRectEx+0xce>
 8018f6a:	fa1f fa8a 	uxth.w	sl, sl
 8018f6e:	ebc9 020a 	rsb	r2, r9, sl
 8018f72:	1bd2      	subs	r2, r2, r7
 8018f74:	ebc7 0a0a 	rsb	sl, r7, sl
 8018f78:	b212      	sxth	r2, r2
 8018f7a:	fa0f f18a 	sxth.w	r1, sl
 8018f7e:	b238      	sxth	r0, r7
 8018f80:	b21b      	sxth	r3, r3
 8018f82:	e7e5      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>
 8018f84:	fa1f fa8a 	uxth.w	sl, sl
 8018f88:	ebc9 020a 	rsb	r2, r9, sl
 8018f8c:	b2bb      	uxth	r3, r7
 8018f8e:	1ad2      	subs	r2, r2, r3
 8018f90:	ebc3 0a0a 	rsb	sl, r3, sl
 8018f94:	b292      	uxth	r2, r2
 8018f96:	fa1f fa8a 	uxth.w	sl, sl
 8018f9a:	f1b8 0f00 	cmp.w	r8, #0
 8018f9e:	d023      	beq.n	8018fe8 <SPINBOX__GetButtonRectEx+0xec>
 8018fa0:	0870      	lsrs	r0, r6, #1
 8018fa2:	1af3      	subs	r3, r6, r3
 8018fa4:	3001      	adds	r0, #1
 8018fa6:	b200      	sxth	r0, r0
 8018fa8:	b21b      	sxth	r3, r3
 8018faa:	b212      	sxth	r2, r2
 8018fac:	fa0f f18a 	sxth.w	r1, sl
 8018fb0:	e7ce      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>
 8018fb2:	b2ba      	uxth	r2, r7
 8018fb4:	eb02 0109 	add.w	r1, r2, r9
 8018fb8:	b289      	uxth	r1, r1
 8018fba:	f1b8 0f00 	cmp.w	r8, #0
 8018fbe:	d10b      	bne.n	8018fd8 <SPINBOX__GetButtonRectEx+0xdc>
 8018fc0:	b212      	sxth	r2, r2
 8018fc2:	b209      	sxth	r1, r1
 8018fc4:	0873      	lsrs	r3, r6, #1
 8018fc6:	4610      	mov	r0, r2
 8018fc8:	e7c2      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>
 8018fca:	44b9      	add	r9, r7
 8018fcc:	b23a      	sxth	r2, r7
 8018fce:	fa0f f189 	sxth.w	r1, r9
 8018fd2:	b21b      	sxth	r3, r3
 8018fd4:	4610      	mov	r0, r2
 8018fd6:	e7bb      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>
 8018fd8:	0870      	lsrs	r0, r6, #1
 8018fda:	1ab3      	subs	r3, r6, r2
 8018fdc:	3001      	adds	r0, #1
 8018fde:	b209      	sxth	r1, r1
 8018fe0:	b200      	sxth	r0, r0
 8018fe2:	b21b      	sxth	r3, r3
 8018fe4:	b212      	sxth	r2, r2
 8018fe6:	e7b3      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>
 8018fe8:	b212      	sxth	r2, r2
 8018fea:	b238      	sxth	r0, r7
 8018fec:	fa0f f18a 	sxth.w	r1, sl
 8018ff0:	0873      	lsrs	r3, r6, #1
 8018ff2:	e7ad      	b.n	8018f50 <SPINBOX__GetButtonRectEx+0x54>

08018ff4 <SPINBOX_CreateIndirect>:
 8018ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff8:	6944      	ldr	r4, [r0, #20]
 8018ffa:	b08f      	sub	sp, #60	; 0x3c
 8018ffc:	460d      	mov	r5, r1
 8018ffe:	4616      	mov	r6, r2
 8019000:	4698      	mov	r8, r3
 8019002:	b18c      	cbz	r4, 8019028 <SPINBOX_CreateIndirect+0x34>
 8019004:	fa0f fa84 	sxth.w	sl, r4
 8019008:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801900c:	45da      	cmp	sl, fp
 801900e:	8943      	ldrh	r3, [r0, #10]
 8019010:	8981      	ldrh	r1, [r0, #12]
 8019012:	89c7      	ldrh	r7, [r0, #14]
 8019014:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8019018:	8904      	ldrh	r4, [r0, #8]
 801901a:	6982      	ldr	r2, [r0, #24]
 801901c:	bfa8      	it	ge
 801901e:	2000      	movge	r0, #0
 8019020:	db0c      	blt.n	801903c <SPINBOX_CreateIndirect+0x48>
 8019022:	b00f      	add	sp, #60	; 0x3c
 8019024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019028:	46a2      	mov	sl, r4
 801902a:	8943      	ldrh	r3, [r0, #10]
 801902c:	8981      	ldrh	r1, [r0, #12]
 801902e:	89c7      	ldrh	r7, [r0, #14]
 8019030:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8019034:	8904      	ldrh	r4, [r0, #8]
 8019036:	6982      	ldr	r2, [r0, #24]
 8019038:	f04f 0b64 	mov.w	fp, #100	; 0x64
 801903c:	9109      	str	r1, [sp, #36]	; 0x24
 801903e:	920b      	str	r2, [sp, #44]	; 0x2c
 8019040:	930a      	str	r3, [sp, #40]	; 0x28
 8019042:	f00a f8d3 	bl	80231ec <GUI_Lock>
 8019046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801904a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801904c:	f8df e230 	ldr.w	lr, [pc, #560]	; 8019280 <SPINBOX_CreateIndirect+0x28c>
 8019050:	9500      	str	r5, [sp, #0]
 8019052:	3278      	adds	r2, #120	; 0x78
 8019054:	f04f 0c02 	mov.w	ip, #2
 8019058:	b23f      	sxth	r7, r7
 801905a:	fa0f f989 	sxth.w	r9, r9
 801905e:	9203      	str	r2, [sp, #12]
 8019060:	fa06 f083 	sxtah	r0, r6, r3
 8019064:	fa08 f181 	sxtah	r1, r8, r1
 8019068:	463a      	mov	r2, r7
 801906a:	464b      	mov	r3, r9
 801906c:	f8cd c004 	str.w	ip, [sp, #4]
 8019070:	f8cd e008 	str.w	lr, [sp, #8]
 8019074:	f005 f920 	bl	801e2b8 <WM_CreateWindowAsChild>
 8019078:	4680      	mov	r8, r0
 801907a:	b928      	cbnz	r0, 8019088 <SPINBOX_CreateIndirect+0x94>
 801907c:	f00a f8ac 	bl	80231d8 <GUI_Unlock>
 8019080:	4640      	mov	r0, r8
 8019082:	b00f      	add	sp, #60	; 0x3c
 8019084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019088:	f00c fc30 	bl	80258ec <GUI_ALLOC_LockH>
 801908c:	b221      	sxth	r1, r4
 801908e:	2210      	movs	r2, #16
 8019090:	900c      	str	r0, [sp, #48]	; 0x30
 8019092:	f7fc fd03 	bl	8015a9c <WIDGET__Init>
 8019096:	4b76      	ldr	r3, [pc, #472]	; (8019270 <SPINBOX_CreateIndirect+0x27c>)
 8019098:	980c      	ldr	r0, [sp, #48]	; 0x30
 801909a:	681c      	ldr	r4, [r3, #0]
 801909c:	4975      	ldr	r1, [pc, #468]	; (8019274 <SPINBOX_CreateIndirect+0x280>)
 801909e:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
 80190a2:	2260      	movs	r2, #96	; 0x60
 80190a4:	3034      	adds	r0, #52	; 0x34
 80190a6:	f011 fb7d 	bl	802a7a4 <memcpy>
 80190aa:	6863      	ldr	r3, [r4, #4]
 80190ac:	4640      	mov	r0, r8
 80190ae:	4798      	blx	r3
 80190b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80190b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80190b4:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80190b8:	f8d3 c000 	ldr.w	ip, [r3]
 80190bc:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80190c0:	4249      	negs	r1, r1
 80190c2:	b95a      	cbnz	r2, 80190dc <SPINBOX_CreateIndirect+0xe8>
 80190c4:	187a      	adds	r2, r7, r1
 80190c6:	4591      	cmp	r9, r2
 80190c8:	460b      	mov	r3, r1
 80190ca:	f280 80b7 	bge.w	801923c <SPINBOX_CreateIndirect+0x248>
 80190ce:	eb09 0201 	add.w	r2, r9, r1
 80190d2:	9207      	str	r2, [sp, #28]
 80190d4:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 80190d8:	4613      	mov	r3, r2
 80190da:	e002      	b.n	80190e2 <SPINBOX_CreateIndirect+0xee>
 80190dc:	9207      	str	r2, [sp, #28]
 80190de:	eb09 0301 	add.w	r3, r9, r1
 80190e2:	f1ba 0f00 	cmp.w	sl, #0
 80190e6:	bfb5      	itete	lt
 80190e8:	f1ca 0000 	rsblt	r0, sl, #0
 80190ec:	4650      	movge	r0, sl
 80190ee:	2602      	movlt	r6, #2
 80190f0:	2601      	movge	r6, #1
 80190f2:	2809      	cmp	r0, #9
 80190f4:	dd09      	ble.n	801910a <SPINBOX_CreateIndirect+0x116>
 80190f6:	4d60      	ldr	r5, [pc, #384]	; (8019278 <SPINBOX_CreateIndirect+0x284>)
 80190f8:	fb85 e400 	smull	lr, r4, r5, r0
 80190fc:	17c0      	asrs	r0, r0, #31
 80190fe:	ebc0 00a4 	rsb	r0, r0, r4, asr #2
 8019102:	2809      	cmp	r0, #9
 8019104:	f106 0601 	add.w	r6, r6, #1
 8019108:	dcf6      	bgt.n	80190f8 <SPINBOX_CreateIndirect+0x104>
 801910a:	f1bb 0f00 	cmp.w	fp, #0
 801910e:	bfb5      	itete	lt
 8019110:	f1cb 0400 	rsblt	r4, fp, #0
 8019114:	465c      	movge	r4, fp
 8019116:	2502      	movlt	r5, #2
 8019118:	2501      	movge	r5, #1
 801911a:	2c09      	cmp	r4, #9
 801911c:	dd0a      	ble.n	8019134 <SPINBOX_CreateIndirect+0x140>
 801911e:	f8df e158 	ldr.w	lr, [pc, #344]	; 8019278 <SPINBOX_CreateIndirect+0x284>
 8019122:	fb8e 2004 	smull	r2, r0, lr, r4
 8019126:	17e4      	asrs	r4, r4, #31
 8019128:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 801912c:	2c09      	cmp	r4, #9
 801912e:	f105 0501 	add.w	r5, r5, #1
 8019132:	dcf6      	bgt.n	8019122 <SPINBOX_CreateIndirect+0x12e>
 8019134:	9109      	str	r1, [sp, #36]	; 0x24
 8019136:	930a      	str	r3, [sp, #40]	; 0x28
 8019138:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801913c:	f000 f942 	bl	80193c4 <EDIT_GetDefaultFont>
 8019140:	f00b fa26 	bl	8024590 <GUI_GetYDistOfFont>
 8019144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019148:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801914c:	4298      	cmp	r0, r3
 801914e:	da73      	bge.n	8019238 <SPINBOX_CreateIndirect+0x244>
 8019150:	ebc0 0909 	rsb	r9, r0, r9
 8019154:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 8019158:	ea4f 0469 	mov.w	r4, r9, asr #1
 801915c:	4603      	mov	r3, r0
 801915e:	9a07      	ldr	r2, [sp, #28]
 8019160:	ebb7 0e02 	subs.w	lr, r7, r2
 8019164:	d44e      	bmi.n	8019204 <SPINBOX_CreateIndirect+0x210>
 8019166:	4843      	ldr	r0, [pc, #268]	; (8019274 <SPINBOX_CreateIndirect+0x280>)
 8019168:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 801916c:	2801      	cmp	r0, #1
 801916e:	d077      	beq.n	8019260 <SPINBOX_CreateIndirect+0x26c>
 8019170:	d36e      	bcc.n	8019250 <SPINBOX_CreateIndirect+0x25c>
 8019172:	2802      	cmp	r0, #2
 8019174:	d170      	bne.n	8019258 <SPINBOX_CreateIndirect+0x264>
 8019176:	9a07      	ldr	r2, [sp, #28]
 8019178:	4494      	add	ip, r2
 801917a:	eba7 024c 	sub.w	r2, r7, ip, lsl #1
 801917e:	3a02      	subs	r2, #2
 8019180:	f10c 0c01 	add.w	ip, ip, #1
 8019184:	f04f 0e02 	mov.w	lr, #2
 8019188:	2700      	movs	r7, #0
 801918a:	4660      	mov	r0, ip
 801918c:	f8cd e004 	str.w	lr, [sp, #4]
 8019190:	4621      	mov	r1, r4
 8019192:	f8cd 8000 	str.w	r8, [sp]
 8019196:	42b5      	cmp	r5, r6
 8019198:	bfac      	ite	ge
 801919a:	9504      	strge	r5, [sp, #16]
 801919c:	9604      	strlt	r6, [sp, #16]
 801919e:	9702      	str	r7, [sp, #8]
 80191a0:	9703      	str	r7, [sp, #12]
 80191a2:	f000 fd1b 	bl	8019bdc <EDIT_CreateEx>
 80191a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191a8:	4604      	mov	r4, r0
 80191aa:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 80191ae:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 80191b2:	f8c2 b084 	str.w	fp, [r2, #132]	; 0x84
 80191b6:	465b      	mov	r3, fp
 80191b8:	4652      	mov	r2, sl
 80191ba:	4651      	mov	r1, sl
 80191bc:	9700      	str	r7, [sp, #0]
 80191be:	9701      	str	r7, [sp, #4]
 80191c0:	f000 fabc 	bl	801973c <EDIT_SetDecMode>
 80191c4:	4620      	mov	r0, r4
 80191c6:	492d      	ldr	r1, [pc, #180]	; (801927c <SPINBOX_CreateIndirect+0x288>)
 80191c8:	f7fc fee0 	bl	8015f8c <WIDGET_SetEffect>
 80191cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191ce:	4620      	mov	r0, r4
 80191d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80191d2:	4639      	mov	r1, r7
 80191d4:	f001 f990 	bl	801a4f8 <EDIT_SetBkColor>
 80191d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191da:	4620      	mov	r0, r4
 80191dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80191de:	2101      	movs	r1, #1
 80191e0:	f001 f98a 	bl	801a4f8 <EDIT_SetBkColor>
 80191e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191e6:	4639      	mov	r1, r7
 80191e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80191ea:	4620      	mov	r0, r4
 80191ec:	f001 f9a4 	bl	801a538 <EDIT_SetTextColor>
 80191f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191f2:	4620      	mov	r0, r4
 80191f4:	2101      	movs	r1, #1
 80191f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80191f8:	f001 f99e 	bl	801a538 <EDIT_SetTextColor>
 80191fc:	4620      	mov	r0, r4
 80191fe:	4629      	mov	r1, r5
 8019200:	f001 fa78 	bl	801a6f4 <EDIT_SetCursorAtChar>
 8019204:	a80c      	add	r0, sp, #48	; 0x30
 8019206:	f00c fb83 	bl	8025910 <GUI_ALLOC_UnlockH>
 801920a:	f009 ffef 	bl	80231ec <GUI_Lock>
 801920e:	4640      	mov	r0, r8
 8019210:	f00c fb6c 	bl	80258ec <GUI_ALLOC_LockH>
 8019214:	ac0e      	add	r4, sp, #56	; 0x38
 8019216:	4603      	mov	r3, r0
 8019218:	f844 3d04 	str.w	r3, [r4, #-4]!
 801921c:	2100      	movs	r1, #0
 801921e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8019222:	f7fc fd05 	bl	8015c30 <WIDGET_SetFocusable>
 8019226:	4620      	mov	r0, r4
 8019228:	f00c fb72 	bl	8025910 <GUI_ALLOC_UnlockH>
 801922c:	f009 ffd4 	bl	80231d8 <GUI_Unlock>
 8019230:	f009 ffd2 	bl	80231d8 <GUI_Unlock>
 8019234:	4640      	mov	r0, r8
 8019236:	e724      	b.n	8019082 <SPINBOX_CreateIndirect+0x8e>
 8019238:	4664      	mov	r4, ip
 801923a:	e790      	b.n	801915e <SPINBOX_CreateIndirect+0x16a>
 801923c:	2f00      	cmp	r7, #0
 801923e:	463a      	mov	r2, r7
 8019240:	bfb8      	it	lt
 8019242:	1cfa      	addlt	r2, r7, #3
 8019244:	1092      	asrs	r2, r2, #2
 8019246:	9207      	str	r2, [sp, #28]
 8019248:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
 801924c:	444b      	add	r3, r9
 801924e:	e748      	b.n	80190e2 <SPINBOX_CreateIndirect+0xee>
 8019250:	eb01 020e 	add.w	r2, r1, lr
 8019254:	3a01      	subs	r2, #1
 8019256:	e795      	b.n	8019184 <SPINBOX_CreateIndirect+0x190>
 8019258:	f04f 0c00 	mov.w	ip, #0
 801925c:	4662      	mov	r2, ip
 801925e:	e791      	b.n	8019184 <SPINBOX_CreateIndirect+0x190>
 8019260:	9a07      	ldr	r2, [sp, #28]
 8019262:	4471      	add	r1, lr
 8019264:	4494      	add	ip, r2
 8019266:	f10c 0c01 	add.w	ip, ip, #1
 801926a:	1e4a      	subs	r2, r1, #1
 801926c:	e78a      	b.n	8019184 <SPINBOX_CreateIndirect+0x190>
 801926e:	bf00      	nop
 8019270:	200001f0 	.word	0x200001f0
 8019274:	20000190 	.word	0x20000190
 8019278:	66666667 	.word	0x66666667
 801927c:	0803218c 	.word	0x0803218c
 8019280:	08018459 	.word	0x08018459

08019284 <SPINBOX_SetFont>:
 8019284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019288:	4604      	mov	r4, r0
 801928a:	b089      	sub	sp, #36	; 0x24
 801928c:	460d      	mov	r5, r1
 801928e:	b910      	cbnz	r0, 8019296 <SPINBOX_SetFont+0x12>
 8019290:	b009      	add	sp, #36	; 0x24
 8019292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019296:	f009 ffa9 	bl	80231ec <GUI_Lock>
 801929a:	4620      	mov	r0, r4
 801929c:	f00c fb26 	bl	80258ec <GUI_ALLOC_LockH>
 80192a0:	4603      	mov	r3, r0
 80192a2:	a808      	add	r0, sp, #32
 80192a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a6:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80192aa:	f840 3d14 	str.w	r3, [r0, #-20]!
 80192ae:	f893 908c 	ldrb.w	r9, [r3, #140]	; 0x8c
 80192b2:	6817      	ldr	r7, [r2, #0]
 80192b4:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 80192b8:	f00c fb2a 	bl	8025910 <GUI_ALLOC_UnlockH>
 80192bc:	f009 ff8c 	bl	80231d8 <GUI_Unlock>
 80192c0:	4629      	mov	r1, r5
 80192c2:	4630      	mov	r0, r6
 80192c4:	f001 f8fe 	bl	801a4c4 <EDIT_SetFont>
 80192c8:	4620      	mov	r0, r4
 80192ca:	a904      	add	r1, sp, #16
 80192cc:	f003 f840 	bl	801c350 <WM_GetWindowRectEx>
 80192d0:	4630      	mov	r0, r6
 80192d2:	a906      	add	r1, sp, #24
 80192d4:	f003 f83c 	bl	801c350 <WM_GetWindowRectEx>
 80192d8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80192dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80192e0:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 80192e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80192e8:	4628      	mov	r0, r5
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	1a65      	subs	r5, r4, r1
 80192ee:	1c5c      	adds	r4, r3, #1
 80192f0:	f00b f94e 	bl	8024590 <GUI_GetYDistOfFont>
 80192f4:	f1b9 0f01 	cmp.w	r9, #1
 80192f8:	f105 0501 	add.w	r5, r5, #1
 80192fc:	d04a      	beq.n	8019394 <SPINBOX_SetFont+0x110>
 80192fe:	d32f      	bcc.n	8019360 <SPINBOX_SetFont+0xdc>
 8019300:	f1b9 0f02 	cmp.w	r9, #2
 8019304:	d054      	beq.n	80193b0 <SPINBOX_SetFont+0x12c>
 8019306:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801930a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801930e:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8019312:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 8019316:	ebc2 0e0e 	rsb	lr, r2, lr
 801931a:	f10e 0e01 	add.w	lr, lr, #1
 801931e:	eba5 0247 	sub.w	r2, r5, r7, lsl #1
 8019322:	4596      	cmp	lr, r2
 8019324:	da2c      	bge.n	8019380 <SPINBOX_SetFont+0xfc>
 8019326:	1a2d      	subs	r5, r5, r0
 8019328:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801932c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019330:	eb02 0765 	add.w	r7, r2, r5, asr #1
 8019334:	b2bf      	uxth	r7, r7
 8019336:	183c      	adds	r4, r7, r0
 8019338:	b2a4      	uxth	r4, r4
 801933a:	b2bf      	uxth	r7, r7
 801933c:	b23a      	sxth	r2, r7
 801933e:	b225      	sxth	r5, r4
 8019340:	1aad      	subs	r5, r5, r2
 8019342:	b209      	sxth	r1, r1
 8019344:	3501      	adds	r5, #1
 8019346:	b21b      	sxth	r3, r3
 8019348:	1a5b      	subs	r3, r3, r1
 801934a:	4630      	mov	r0, r6
 801934c:	9500      	str	r5, [sp, #0]
 801934e:	f8ad 401e 	strh.w	r4, [sp, #30]
 8019352:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019356:	f003 f993 	bl	801c680 <WM_SetWindowPos>
 801935a:	b009      	add	sp, #36	; 0x24
 801935c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019360:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019364:	ebc8 0302 	rsb	r3, r8, r2
 8019368:	3b01      	subs	r3, #1
 801936a:	b2b9      	uxth	r1, r7
 801936c:	1a5b      	subs	r3, r3, r1
 801936e:	4423      	add	r3, r4
 8019370:	4411      	add	r1, r2
 8019372:	b29b      	uxth	r3, r3
 8019374:	b289      	uxth	r1, r1
 8019376:	f8ad 301c 	strh.w	r3, [sp, #28]
 801937a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801937e:	e7c6      	b.n	801930e <SPINBOX_SetFont+0x8a>
 8019380:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019384:	b2bf      	uxth	r7, r7
 8019386:	1e54      	subs	r4, r2, #1
 8019388:	1be4      	subs	r4, r4, r7
 801938a:	442c      	add	r4, r5
 801938c:	4417      	add	r7, r2
 801938e:	b2a4      	uxth	r4, r4
 8019390:	b2bf      	uxth	r7, r7
 8019392:	e7d3      	b.n	801933c <SPINBOX_SetFont+0xb8>
 8019394:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019398:	b2bb      	uxth	r3, r7
 801939a:	18d1      	adds	r1, r2, r3
 801939c:	1ad3      	subs	r3, r2, r3
 801939e:	4441      	add	r1, r8
 80193a0:	4423      	add	r3, r4
 80193a2:	b289      	uxth	r1, r1
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80193aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80193ae:	e7ae      	b.n	801930e <SPINBOX_SetFont+0x8a>
 80193b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80193b4:	ebc8 0302 	rsb	r3, r8, r2
 80193b8:	f108 0801 	add.w	r8, r8, #1
 80193bc:	3b01      	subs	r3, #1
 80193be:	b2b9      	uxth	r1, r7
 80193c0:	4442      	add	r2, r8
 80193c2:	e7d3      	b.n	801936c <SPINBOX_SetFont+0xe8>

080193c4 <EDIT_GetDefaultFont>:
 80193c4:	4b01      	ldr	r3, [pc, #4]	; (80193cc <EDIT_GetDefaultFont+0x8>)
 80193c6:	6898      	ldr	r0, [r3, #8]
 80193c8:	4770      	bx	lr
 80193ca:	bf00      	nop
 80193cc:	200001f4 	.word	0x200001f4

080193d0 <_AddPosition>:
 80193d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80193d4:	f9b0 7038 	ldrsh.w	r7, [r0, #56]	; 0x38
 80193d8:	f890 4056 	ldrb.w	r4, [r0, #86]	; 0x56
 80193dc:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80193de:	4605      	mov	r5, r0
 80193e0:	1aff      	subs	r7, r7, r3
 80193e2:	f014 0001 	ands.w	r0, r4, #1
 80193e6:	f107 33ff 	add.w	r3, r7, #4294967295
 80193ea:	d000      	beq.n	80193ee <_AddPosition+0x1e>
 80193ec:	b386      	cbz	r6, 8019450 <_AddPosition+0x80>
 80193ee:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 80193f2:	b10f      	cbz	r7, 80193f8 <_AddPosition+0x28>
 80193f4:	42bb      	cmp	r3, r7
 80193f6:	dc29      	bgt.n	801944c <_AddPosition+0x7c>
 80193f8:	1e5c      	subs	r4, r3, #1
 80193fa:	b39b      	cbz	r3, 8019464 <_AddPosition+0x94>
 80193fc:	4613      	mov	r3, r2
 80193fe:	3c01      	subs	r4, #1
 8019400:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019404:	1c67      	adds	r7, r4, #1
 8019406:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801940a:	d1f8      	bne.n	80193fe <_AddPosition+0x2e>
 801940c:	2a00      	cmp	r2, #0
 801940e:	eb03 0706 	add.w	r7, r3, r6
 8019412:	db10      	blt.n	8019436 <_AddPosition+0x66>
 8019414:	d001      	beq.n	801941a <_AddPosition+0x4a>
 8019416:	42be      	cmp	r6, r7
 8019418:	db0f      	blt.n	801943a <_AddPosition+0x6a>
 801941a:	b158      	cbz	r0, 8019434 <_AddPosition+0x64>
 801941c:	b94e      	cbnz	r6, 8019432 <_AddPosition+0x62>
 801941e:	b14f      	cbz	r7, 8019434 <_AddPosition+0x64>
 8019420:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 8019424:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8019426:	3a01      	subs	r2, #1
 8019428:	4293      	cmp	r3, r2
 801942a:	da03      	bge.n	8019434 <_AddPosition+0x64>
 801942c:	3301      	adds	r3, #1
 801942e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8019430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019432:	b18f      	cbz	r7, 8019458 <_AddPosition+0x88>
 8019434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019436:	42be      	cmp	r6, r7
 8019438:	ddef      	ble.n	801941a <_AddPosition+0x4a>
 801943a:	4608      	mov	r0, r1
 801943c:	4639      	mov	r1, r7
 801943e:	f001 f8b1 	bl	801a5a4 <EDIT_SetValue>
 8019442:	f895 0056 	ldrb.w	r0, [r5, #86]	; 0x56
 8019446:	f000 0001 	and.w	r0, r0, #1
 801944a:	e7e6      	b.n	801941a <_AddPosition+0x4a>
 801944c:	1e9c      	subs	r4, r3, #2
 801944e:	e7d5      	b.n	80193fc <_AddPosition+0x2c>
 8019450:	2b00      	cmp	r3, #0
 8019452:	bfc8      	it	gt
 8019454:	1ebb      	subgt	r3, r7, #2
 8019456:	e7ca      	b.n	80193ee <_AddPosition+0x1e>
 8019458:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801945a:	2b00      	cmp	r3, #0
 801945c:	ddea      	ble.n	8019434 <_AddPosition+0x64>
 801945e:	3b01      	subs	r3, #1
 8019460:	64eb      	str	r3, [r5, #76]	; 0x4c
 8019462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019464:	4613      	mov	r3, r2
 8019466:	e7d1      	b.n	801940c <_AddPosition+0x3c>

08019468 <_UpdateBuffer>:
 8019468:	b570      	push	{r4, r5, r6, lr}
 801946a:	b084      	sub	sp, #16
 801946c:	f00c fa3e 	bl	80258ec <GUI_ALLOC_LockH>
 8019470:	9001      	str	r0, [sp, #4]
 8019472:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019474:	f00c fa3a 	bl	80258ec <GUI_ALLOC_LockH>
 8019478:	9b01      	ldr	r3, [sp, #4]
 801947a:	9002      	str	r0, [sp, #8]
 801947c:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8019480:	9003      	str	r0, [sp, #12]
 8019482:	07d1      	lsls	r1, r2, #31
 8019484:	d553      	bpl.n	801952e <_UpdateBuffer+0xc6>
 8019486:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019488:	2800      	cmp	r0, #0
 801948a:	db62      	blt.n	8019552 <_UpdateBuffer+0xea>
 801948c:	a903      	add	r1, sp, #12
 801948e:	f00a ff79 	bl	8024384 <GUI_AddSign>
 8019492:	9b01      	ldr	r3, [sp, #4]
 8019494:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8019498:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801949c:	3901      	subs	r1, #1
 801949e:	ab03      	add	r3, sp, #12
 80194a0:	b2c9      	uxtb	r1, r1
 80194a2:	f00a ff7d 	bl	80243a0 <GUI_AddDecShift>
 80194a6:	a802      	add	r0, sp, #8
 80194a8:	f00c fa32 	bl	8025910 <GUI_ALLOC_UnlockH>
 80194ac:	9b01      	ldr	r3, [sp, #4]
 80194ae:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 80194b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80194b6:	3c02      	subs	r4, #2
 80194b8:	b10a      	cbz	r2, 80194be <_UpdateBuffer+0x56>
 80194ba:	43d2      	mvns	r2, r2
 80194bc:	4414      	add	r4, r2
 80194be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80194c0:	f00c fa14 	bl	80258ec <GUI_ALLOC_LockH>
 80194c4:	2c00      	cmp	r4, #0
 80194c6:	9002      	str	r0, [sp, #8]
 80194c8:	9003      	str	r0, [sp, #12]
 80194ca:	db28      	blt.n	801951e <_UpdateBuffer+0xb6>
 80194cc:	4d27      	ldr	r5, [pc, #156]	; (801956c <_UpdateBuffer+0x104>)
 80194ce:	2300      	movs	r3, #0
 80194d0:	2620      	movs	r6, #32
 80194d2:	e006      	b.n	80194e2 <_UpdateBuffer+0x7a>
 80194d4:	7006      	strb	r6, [r0, #0]
 80194d6:	9803      	ldr	r0, [sp, #12]
 80194d8:	3301      	adds	r3, #1
 80194da:	3001      	adds	r0, #1
 80194dc:	429c      	cmp	r4, r3
 80194de:	9003      	str	r0, [sp, #12]
 80194e0:	db1d      	blt.n	801951e <_UpdateBuffer+0xb6>
 80194e2:	7802      	ldrb	r2, [r0, #0]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d03c      	beq.n	8019562 <_UpdateBuffer+0xfa>
 80194e8:	2a30      	cmp	r2, #48	; 0x30
 80194ea:	d118      	bne.n	801951e <_UpdateBuffer+0xb6>
 80194ec:	7842      	ldrb	r2, [r0, #1]
 80194ee:	7829      	ldrb	r1, [r5, #0]
 80194f0:	4291      	cmp	r1, r2
 80194f2:	d014      	beq.n	801951e <_UpdateBuffer+0xb6>
 80194f4:	b19a      	cbz	r2, 801951e <_UpdateBuffer+0xb6>
 80194f6:	9a01      	ldr	r2, [sp, #4]
 80194f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80194fc:	0792      	lsls	r2, r2, #30
 80194fe:	d5eb      	bpl.n	80194d8 <_UpdateBuffer+0x70>
 8019500:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8019504:	2a2b      	cmp	r2, #43	; 0x2b
 8019506:	d001      	beq.n	801950c <_UpdateBuffer+0xa4>
 8019508:	2a2d      	cmp	r2, #45	; 0x2d
 801950a:	d1e3      	bne.n	80194d4 <_UpdateBuffer+0x6c>
 801950c:	7002      	strb	r2, [r0, #0]
 801950e:	f800 6c01 	strb.w	r6, [r0, #-1]
 8019512:	9803      	ldr	r0, [sp, #12]
 8019514:	3301      	adds	r3, #1
 8019516:	3001      	adds	r0, #1
 8019518:	429c      	cmp	r4, r3
 801951a:	9003      	str	r0, [sp, #12]
 801951c:	dae1      	bge.n	80194e2 <_UpdateBuffer+0x7a>
 801951e:	a802      	add	r0, sp, #8
 8019520:	f00c f9f6 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019524:	a801      	add	r0, sp, #4
 8019526:	f00c f9f3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801952a:	b004      	add	sp, #16
 801952c:	bd70      	pop	{r4, r5, r6, pc}
 801952e:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8019530:	b20a      	sxth	r2, r1
 8019532:	2a0a      	cmp	r2, #10
 8019534:	dd0a      	ble.n	801954c <_UpdateBuffer+0xe4>
 8019536:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019538:	2800      	cmp	r0, #0
 801953a:	bfb4      	ite	lt
 801953c:	b2c9      	uxtblt	r1, r1
 801953e:	210a      	movge	r1, #10
 8019540:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8019544:	ab03      	add	r3, sp, #12
 8019546:	f00a ff2b 	bl	80243a0 <GUI_AddDecShift>
 801954a:	e7ac      	b.n	80194a6 <_UpdateBuffer+0x3e>
 801954c:	b2c9      	uxtb	r1, r1
 801954e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019550:	e7f6      	b.n	8019540 <_UpdateBuffer+0xd8>
 8019552:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8019556:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801955a:	ab03      	add	r3, sp, #12
 801955c:	f00a ff20 	bl	80243a0 <GUI_AddDecShift>
 8019560:	e7a1      	b.n	80194a6 <_UpdateBuffer+0x3e>
 8019562:	2a2b      	cmp	r2, #43	; 0x2b
 8019564:	d0b8      	beq.n	80194d8 <_UpdateBuffer+0x70>
 8019566:	2a2d      	cmp	r2, #45	; 0x2d
 8019568:	d1be      	bne.n	80194e8 <_UpdateBuffer+0x80>
 801956a:	e7b5      	b.n	80194d8 <_UpdateBuffer+0x70>
 801956c:	2002cbd8 	.word	0x2002cbd8

08019570 <_AddKeyDec>:
 8019570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019574:	b083      	sub	sp, #12
 8019576:	460e      	mov	r6, r1
 8019578:	4605      	mov	r5, r0
 801957a:	f00c f9b7 	bl	80258ec <GUI_ALLOC_LockH>
 801957e:	4604      	mov	r4, r0
 8019580:	9000      	str	r0, [sp, #0]
 8019582:	2800      	cmp	r0, #0
 8019584:	d032      	beq.n	80195ec <_AddKeyDec+0x7c>
 8019586:	f1a6 0310 	sub.w	r3, r6, #16
 801958a:	2b1d      	cmp	r3, #29
 801958c:	d87d      	bhi.n	801968a <_AddKeyDec+0x11a>
 801958e:	e8df f003 	tbb	[pc, r3]
 8019592:	6f4d      	.short	0x6f4d
 8019594:	7c7c3617 	.word	0x7c7c3617
 8019598:	7c7c7c7c 	.word	0x7c7c7c7c
 801959c:	7c7c7c7c 	.word	0x7c7c7c7c
 80195a0:	7c7c7c7c 	.word	0x7c7c7c7c
 80195a4:	7c7c7c7c 	.word	0x7c7c7c7c
 80195a8:	7c7c7c7c 	.word	0x7c7c7c7c
 80195ac:	627c447c 	.word	0x627c447c
 80195b0:	a801      	add	r0, sp, #4
 80195b2:	f00c f9ad 	bl	8025910 <GUI_ALLOC_UnlockH>
 80195b6:	4628      	mov	r0, r5
 80195b8:	4639      	mov	r1, r7
 80195ba:	f000 fff3 	bl	801a5a4 <EDIT_SetValue>
 80195be:	9c00      	ldr	r4, [sp, #0]
 80195c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80195c2:	4628      	mov	r0, r5
 80195c4:	3101      	adds	r1, #1
 80195c6:	f000 fadb 	bl	8019b80 <EDIT__SetCursorPos>
 80195ca:	4620      	mov	r0, r4
 80195cc:	f000 fabc 	bl	8019b48 <EDIT__GetCurrentChar>
 80195d0:	4b58      	ldr	r3, [pc, #352]	; (8019734 <_AddKeyDec+0x1c4>)
 80195d2:	781b      	ldrb	r3, [r3, #0]
 80195d4:	4283      	cmp	r3, r0
 80195d6:	d109      	bne.n	80195ec <_AddKeyDec+0x7c>
 80195d8:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80195dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80195de:	3b01      	subs	r3, #1
 80195e0:	4299      	cmp	r1, r3
 80195e2:	db33      	blt.n	801964c <_AddKeyDec+0xdc>
 80195e4:	3901      	subs	r1, #1
 80195e6:	4628      	mov	r0, r5
 80195e8:	f000 faca 	bl	8019b80 <EDIT__SetCursorPos>
 80195ec:	4668      	mov	r0, sp
 80195ee:	f00c f98f 	bl	8025910 <GUI_ALLOC_UnlockH>
 80195f2:	4628      	mov	r0, r5
 80195f4:	f7ff ff38 	bl	8019468 <_UpdateBuffer>
 80195f8:	b003      	add	sp, #12
 80195fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195fe:	f000 faa3 	bl	8019b48 <EDIT__GetCurrentChar>
 8019602:	b2c0      	uxtb	r0, r0
 8019604:	282d      	cmp	r0, #45	; 0x2d
 8019606:	d07d      	beq.n	8019704 <_AddKeyDec+0x194>
 8019608:	282b      	cmp	r0, #43	; 0x2b
 801960a:	d07b      	beq.n	8019704 <_AddKeyDec+0x194>
 801960c:	9800      	ldr	r0, [sp, #0]
 801960e:	4629      	mov	r1, r5
 8019610:	f04f 32ff 	mov.w	r2, #4294967295
 8019614:	f7ff fedc 	bl	80193d0 <_AddPosition>
 8019618:	e7e8      	b.n	80195ec <_AddKeyDec+0x7c>
 801961a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801961c:	2900      	cmp	r1, #0
 801961e:	d1e5      	bne.n	80195ec <_AddKeyDec+0x7c>
 8019620:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8019622:	2b00      	cmp	r3, #0
 8019624:	db1d      	blt.n	8019662 <_AddKeyDec+0xf2>
 8019626:	3101      	adds	r1, #1
 8019628:	4628      	mov	r0, r5
 801962a:	e7cc      	b.n	80195c6 <_AddKeyDec+0x56>
 801962c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801962e:	4628      	mov	r0, r5
 8019630:	3901      	subs	r1, #1
 8019632:	f000 faa5 	bl	8019b80 <EDIT__SetCursorPos>
 8019636:	9800      	ldr	r0, [sp, #0]
 8019638:	f000 fa86 	bl	8019b48 <EDIT__GetCurrentChar>
 801963c:	4b3d      	ldr	r3, [pc, #244]	; (8019734 <_AddKeyDec+0x1c4>)
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	4283      	cmp	r3, r0
 8019642:	d1d3      	bne.n	80195ec <_AddKeyDec+0x7c>
 8019644:	9b00      	ldr	r3, [sp, #0]
 8019646:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8019648:	2900      	cmp	r1, #0
 801964a:	dccb      	bgt.n	80195e4 <_AddKeyDec+0x74>
 801964c:	3101      	adds	r1, #1
 801964e:	4628      	mov	r0, r5
 8019650:	f000 fa96 	bl	8019b80 <EDIT__SetCursorPos>
 8019654:	e7ca      	b.n	80195ec <_AddKeyDec+0x7c>
 8019656:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8019658:	2900      	cmp	r1, #0
 801965a:	d1c7      	bne.n	80195ec <_AddKeyDec+0x7c>
 801965c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801965e:	2b00      	cmp	r3, #0
 8019660:	dde1      	ble.n	8019626 <_AddKeyDec+0xb6>
 8019662:	4259      	negs	r1, r3
 8019664:	4628      	mov	r0, r5
 8019666:	f000 ff9d 	bl	801a5a4 <EDIT_SetValue>
 801966a:	9c00      	ldr	r4, [sp, #0]
 801966c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801966e:	e7da      	b.n	8019626 <_AddKeyDec+0xb6>
 8019670:	f000 fa6a 	bl	8019b48 <EDIT__GetCurrentChar>
 8019674:	b2c0      	uxtb	r0, r0
 8019676:	282d      	cmp	r0, #45	; 0x2d
 8019678:	d044      	beq.n	8019704 <_AddKeyDec+0x194>
 801967a:	282b      	cmp	r0, #43	; 0x2b
 801967c:	d042      	beq.n	8019704 <_AddKeyDec+0x194>
 801967e:	9800      	ldr	r0, [sp, #0]
 8019680:	4629      	mov	r1, r5
 8019682:	2201      	movs	r2, #1
 8019684:	f7ff fea4 	bl	80193d0 <_AddPosition>
 8019688:	e7b0      	b.n	80195ec <_AddKeyDec+0x7c>
 801968a:	f000 fa5d 	bl	8019b48 <EDIT__GetCurrentChar>
 801968e:	b2c0      	uxtb	r0, r0
 8019690:	282d      	cmp	r0, #45	; 0x2d
 8019692:	d0ab      	beq.n	80195ec <_AddKeyDec+0x7c>
 8019694:	282b      	cmp	r0, #43	; 0x2b
 8019696:	d0a9      	beq.n	80195ec <_AddKeyDec+0x7c>
 8019698:	f1a6 0930 	sub.w	r9, r6, #48	; 0x30
 801969c:	f1b9 0f09 	cmp.w	r9, #9
 80196a0:	d8a4      	bhi.n	80195ec <_AddKeyDec+0x7c>
 80196a2:	f8dd 8000 	ldr.w	r8, [sp]
 80196a6:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80196aa:	f00c f91f 	bl	80258ec <GUI_ALLOC_LockH>
 80196ae:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
 80196b2:	9001      	str	r0, [sp, #4]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	4684      	mov	ip, r0
 80196b8:	f04f 0700 	mov.w	r7, #0
 80196bc:	f77f af78 	ble.w	80195b0 <_AddKeyDec+0x40>
 80196c0:	f8d8 604c 	ldr.w	r6, [r8, #76]	; 0x4c
 80196c4:	f8df e070 	ldr.w	lr, [pc, #112]	; 8019738 <_AddKeyDec+0x1c8>
 80196c8:	3b01      	subs	r3, #1
 80196ca:	463c      	mov	r4, r7
 80196cc:	e012      	b.n	80196f4 <_AddKeyDec+0x184>
 80196ce:	f898 1056 	ldrb.w	r1, [r8, #86]	; 0x56
 80196d2:	f81c 2003 	ldrb.w	r2, [ip, r3]
 80196d6:	0789      	lsls	r1, r1, #30
 80196d8:	d501      	bpl.n	80196de <_AddKeyDec+0x16e>
 80196da:	2a20      	cmp	r2, #32
 80196dc:	d023      	beq.n	8019726 <_AddKeyDec+0x1b6>
 80196de:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80196e2:	2909      	cmp	r1, #9
 80196e4:	d917      	bls.n	8019716 <_AddKeyDec+0x1a6>
 80196e6:	2a2d      	cmp	r2, #45	; 0x2d
 80196e8:	bf08      	it	eq
 80196ea:	427f      	negeq	r7, r7
 80196ec:	f113 33ff 	adds.w	r3, r3, #4294967295
 80196f0:	f4ff af5e 	bcc.w	80195b0 <_AddKeyDec+0x40>
 80196f4:	42b3      	cmp	r3, r6
 80196f6:	d1ea      	bne.n	80196ce <_AddKeyDec+0x15e>
 80196f8:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 80196fc:	3401      	adds	r4, #1
 80196fe:	fb02 7709 	mla	r7, r2, r9, r7
 8019702:	e7f3      	b.n	80196ec <_AddKeyDec+0x17c>
 8019704:	9b00      	ldr	r3, [sp, #0]
 8019706:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8019708:	2900      	cmp	r1, #0
 801970a:	dd0f      	ble.n	801972c <_AddKeyDec+0x1bc>
 801970c:	4249      	negs	r1, r1
 801970e:	4628      	mov	r0, r5
 8019710:	f000 ff48 	bl	801a5a4 <EDIT_SetValue>
 8019714:	e76a      	b.n	80195ec <_AddKeyDec+0x7c>
 8019716:	2900      	cmp	r1, #0
 8019718:	dbe5      	blt.n	80196e6 <_AddKeyDec+0x176>
 801971a:	f85e 0024 	ldr.w	r0, [lr, r4, lsl #2]
 801971e:	3401      	adds	r4, #1
 8019720:	fb00 7701 	mla	r7, r0, r1, r7
 8019724:	e7df      	b.n	80196e6 <_AddKeyDec+0x176>
 8019726:	2100      	movs	r1, #0
 8019728:	2230      	movs	r2, #48	; 0x30
 801972a:	e7f6      	b.n	801971a <_AddKeyDec+0x1aa>
 801972c:	f43f af5e 	beq.w	80195ec <_AddKeyDec+0x7c>
 8019730:	e7ec      	b.n	801970c <_AddKeyDec+0x19c>
 8019732:	bf00      	nop
 8019734:	2002cbd8 	.word	0x2002cbd8
 8019738:	08031fc8 	.word	0x08031fc8

0801973c <EDIT_SetDecMode>:
 801973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019740:	b082      	sub	sp, #8
 8019742:	4606      	mov	r6, r0
 8019744:	4689      	mov	r9, r1
 8019746:	4614      	mov	r4, r2
 8019748:	461d      	mov	r5, r3
 801974a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801974e:	f009 fd4d 	bl	80231ec <GUI_Lock>
 8019752:	b926      	cbnz	r6, 801975e <EDIT_SetDecMode+0x22>
 8019754:	f009 fd40 	bl	80231d8 <GUI_Unlock>
 8019758:	b002      	add	sp, #8
 801975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801975e:	4630      	mov	r0, r6
 8019760:	f00c f8c4 	bl	80258ec <GUI_ALLOC_LockH>
 8019764:	af02      	add	r7, sp, #8
 8019766:	4603      	mov	r3, r0
 8019768:	f847 3d04 	str.w	r3, [r7, #-4]!
 801976c:	4840      	ldr	r0, [pc, #256]	; (8019870 <EDIT_SetDecMode+0x134>)
 801976e:	4941      	ldr	r1, [pc, #260]	; (8019874 <EDIT_SetDecMode+0x138>)
 8019770:	f893 a088 	ldrb.w	sl, [r3, #136]	; 0x88
 8019774:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
 8019778:	2200      	movs	r2, #0
 801977a:	f04f 0901 	mov.w	r9, #1
 801977e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8019782:	6598      	str	r0, [r3, #88]	; 0x58
 8019784:	63dc      	str	r4, [r3, #60]	; 0x3c
 8019786:	641d      	str	r5, [r3, #64]	; 0x40
 8019788:	f883 e044 	strb.w	lr, [r3, #68]	; 0x44
 801978c:	f883 8056 	strb.w	r8, [r3, #86]	; 0x56
 8019790:	65d9      	str	r1, [r3, #92]	; 0x5c
 8019792:	64da      	str	r2, [r3, #76]	; 0x4c
 8019794:	4638      	mov	r0, r7
 8019796:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 801979a:	f00c f8b9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801979e:	f1ba 0f00 	cmp.w	sl, #0
 80197a2:	d035      	beq.n	8019810 <EDIT_SetDecMode+0xd4>
 80197a4:	2d00      	cmp	r5, #0
 80197a6:	bfbd      	ittte	lt
 80197a8:	426d      	neglt	r5, r5
 80197aa:	f04f 39ff 	movlt.w	r9, #4294967295
 80197ae:	2302      	movlt	r3, #2
 80197b0:	464b      	movge	r3, r9
 80197b2:	2d09      	cmp	r5, #9
 80197b4:	dd09      	ble.n	80197ca <EDIT_SetDecMode+0x8e>
 80197b6:	4930      	ldr	r1, [pc, #192]	; (8019878 <EDIT_SetDecMode+0x13c>)
 80197b8:	fb81 0205 	smull	r0, r2, r1, r5
 80197bc:	17ed      	asrs	r5, r5, #31
 80197be:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 80197c2:	2d09      	cmp	r5, #9
 80197c4:	f103 0301 	add.w	r3, r3, #1
 80197c8:	dcf6      	bgt.n	80197b8 <EDIT_SetDecMode+0x7c>
 80197ca:	f1b9 3fff 	cmp.w	r9, #4294967295
 80197ce:	d03d      	beq.n	801984c <EDIT_SetDecMode+0x110>
 80197d0:	2c00      	cmp	r4, #0
 80197d2:	db48      	blt.n	8019866 <EDIT_SetDecMode+0x12a>
 80197d4:	2501      	movs	r5, #1
 80197d6:	4629      	mov	r1, r5
 80197d8:	2c09      	cmp	r4, #9
 80197da:	dd09      	ble.n	80197f0 <EDIT_SetDecMode+0xb4>
 80197dc:	4826      	ldr	r0, [pc, #152]	; (8019878 <EDIT_SetDecMode+0x13c>)
 80197de:	fb80 e204 	smull	lr, r2, r0, r4
 80197e2:	17e4      	asrs	r4, r4, #31
 80197e4:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
 80197e8:	2c09      	cmp	r4, #9
 80197ea:	f101 0101 	add.w	r1, r1, #1
 80197ee:	dcf6      	bgt.n	80197de <EDIT_SetDecMode+0xa2>
 80197f0:	3501      	adds	r5, #1
 80197f2:	d025      	beq.n	8019840 <EDIT_SetDecMode+0x104>
 80197f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197f6:	b10a      	cbz	r2, 80197fc <EDIT_SetDecMode+0xc0>
 80197f8:	3101      	adds	r1, #1
 80197fa:	3301      	adds	r3, #1
 80197fc:	f018 0f01 	tst.w	r8, #1
 8019800:	bf18      	it	ne
 8019802:	3301      	addne	r3, #1
 8019804:	428b      	cmp	r3, r1
 8019806:	bfa8      	it	ge
 8019808:	4619      	movge	r1, r3
 801980a:	4630      	mov	r0, r6
 801980c:	f000 fefa 	bl	801a604 <EDIT_SetMaxLen>
 8019810:	4630      	mov	r0, r6
 8019812:	f7ff fe29 	bl	8019468 <_UpdateBuffer>
 8019816:	4630      	mov	r0, r6
 8019818:	f00c f868 	bl	80258ec <GUI_ALLOC_LockH>
 801981c:	9001      	str	r0, [sp, #4]
 801981e:	f000 f993 	bl	8019b48 <EDIT__GetCurrentChar>
 8019822:	4b16      	ldr	r3, [pc, #88]	; (801987c <EDIT_SetDecMode+0x140>)
 8019824:	781b      	ldrb	r3, [r3, #0]
 8019826:	4283      	cmp	r3, r0
 8019828:	d016      	beq.n	8019858 <EDIT_SetDecMode+0x11c>
 801982a:	4638      	mov	r0, r7
 801982c:	f00c f870 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019830:	4630      	mov	r0, r6
 8019832:	f004 fce5 	bl	801e200 <WM_InvalidateWindow>
 8019836:	f009 fccf 	bl	80231d8 <GUI_Unlock>
 801983a:	b002      	add	sp, #8
 801983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019840:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019842:	1e4a      	subs	r2, r1, #1
 8019844:	4290      	cmp	r0, r2
 8019846:	bf08      	it	eq
 8019848:	3101      	addeq	r1, #1
 801984a:	e7d3      	b.n	80197f4 <EDIT_SetDecMode+0xb8>
 801984c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801984e:	1e5a      	subs	r2, r3, #1
 8019850:	4291      	cmp	r1, r2
 8019852:	bf08      	it	eq
 8019854:	3301      	addeq	r3, #1
 8019856:	e7bb      	b.n	80197d0 <EDIT_SetDecMode+0x94>
 8019858:	9b01      	ldr	r3, [sp, #4]
 801985a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801985c:	4630      	mov	r0, r6
 801985e:	3101      	adds	r1, #1
 8019860:	f000 f98e 	bl	8019b80 <EDIT__SetCursorPos>
 8019864:	e7e1      	b.n	801982a <EDIT_SetDecMode+0xee>
 8019866:	4264      	negs	r4, r4
 8019868:	f04f 35ff 	mov.w	r5, #4294967295
 801986c:	2102      	movs	r1, #2
 801986e:	e7b3      	b.n	80197d8 <EDIT_SetDecMode+0x9c>
 8019870:	08019571 	.word	0x08019571
 8019874:	08019469 	.word	0x08019469
 8019878:	66666667 	.word	0x66666667
 801987c:	2002cbd8 	.word	0x2002cbd8

08019880 <_Paint>:
 8019880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019884:	b08d      	sub	sp, #52	; 0x34
 8019886:	2300      	movs	r3, #0
 8019888:	4606      	mov	r6, r0
 801988a:	460c      	mov	r4, r1
 801988c:	9300      	str	r3, [sp, #0]
 801988e:	f001 facf 	bl	801ae30 <WM__IsEnabled>
 8019892:	4605      	mov	r5, r0
 8019894:	4630      	mov	r0, r6
 8019896:	f00c f829 	bl	80258ec <GUI_ALLOC_LockH>
 801989a:	9001      	str	r0, [sp, #4]
 801989c:	b12c      	cbz	r4, 80198aa <_Paint+0x2a>
 801989e:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 80198a2:	f042 0204 	orr.w	r2, r2, #4
 80198a6:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
 80198aa:	f105 021e 	add.w	r2, r5, #30
 80198ae:	ae06      	add	r6, sp, #24
 80198b0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80198b4:	f008 fc0a 	bl	80220cc <LCD_SetBkColor>
 80198b8:	9b01      	ldr	r3, [sp, #4]
 80198ba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80198be:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80198c0:	f008 fc0c 	bl	80220dc <LCD_SetColor>
 80198c4:	9d01      	ldr	r5, [sp, #4]
 80198c6:	2300      	movs	r3, #0
 80198c8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80198ca:	9302      	str	r3, [sp, #8]
 80198cc:	f00a ff8c 	bl	80247e8 <GUI_SetFont>
 80198d0:	4628      	mov	r0, r5
 80198d2:	4631      	mov	r1, r6
 80198d4:	f7fc f8d4 	bl	8015a80 <WIDGET__GetInsideRect>
 80198d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80198da:	2800      	cmp	r0, #0
 80198dc:	f040 80d2 	bne.w	8019a84 <_Paint+0x204>
 80198e0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80198e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80198e8:	f10d 0920 	add.w	r9, sp, #32
 80198ec:	e889 0003 	stmia.w	r9, {r0, r1}
 80198f0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 80198f4:	f8bd e020 	ldrh.w	lr, [sp, #32]
 80198f8:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80198fc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80198fe:	4496      	add	lr, r2
 8019900:	3f01      	subs	r7, #1
 8019902:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8019906:	f10e 0e01 	add.w	lr, lr, #1
 801990a:	1abf      	subs	r7, r7, r2
 801990c:	4660      	mov	r0, ip
 801990e:	4649      	mov	r1, r9
 8019910:	4652      	mov	r2, sl
 8019912:	f8ad e020 	strh.w	lr, [sp, #32]
 8019916:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801991a:	f008 fc0d 	bl	8022138 <GUI__CalcTextRect>
 801991e:	f8b5 8032 	ldrh.w	r8, [r5, #50]	; 0x32
 8019922:	f018 0801 	ands.w	r8, r8, #1
 8019926:	d034      	beq.n	8019992 <_Paint+0x112>
 8019928:	f895 8055 	ldrb.w	r8, [r5, #85]	; 0x55
 801992c:	9802      	ldr	r0, [sp, #8]
 801992e:	f1b8 0f00 	cmp.w	r8, #0
 8019932:	bf08      	it	eq
 8019934:	f04f 0801 	moveq.w	r8, #1
 8019938:	f009 f9d2 	bl	8022ce0 <GUI__GetNumChars>
 801993c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019940:	4683      	mov	fp, r0
 8019942:	f1be 0f00 	cmp.w	lr, #0
 8019946:	d029      	beq.n	801999c <_Paint+0x11c>
 8019948:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 801994c:	2200      	movs	r2, #0
 801994e:	9203      	str	r2, [sp, #12]
 8019950:	b953      	cbnz	r3, 8019968 <_Paint+0xe8>
 8019952:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8019954:	b933      	cbnz	r3, 8019964 <_Paint+0xe4>
 8019956:	4b79      	ldr	r3, [pc, #484]	; (8019b3c <_Paint+0x2bc>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	2b01      	cmp	r3, #1
 801995c:	f000 80df 	beq.w	8019b1e <_Paint+0x29e>
 8019960:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8019962:	e006      	b.n	8019972 <_Paint+0xf2>
 8019964:	2c00      	cmp	r4, #0
 8019966:	d0f6      	beq.n	8019956 <_Paint+0xd6>
 8019968:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801996a:	45bb      	cmp	fp, r7
 801996c:	f300 809a 	bgt.w	8019aa4 <_Paint+0x224>
 8019970:	463b      	mov	r3, r7
 8019972:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8019976:	aa04      	add	r2, sp, #16
 8019978:	e882 0003 	stmia.w	r2, {r0, r1}
 801997c:	4677      	mov	r7, lr
 801997e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8019982:	4638      	mov	r0, r7
 8019984:	4619      	mov	r1, r3
 8019986:	465a      	mov	r2, fp
 8019988:	f008 fefa 	bl	8022780 <GUI__GetCursorPosX>
 801998c:	4428      	add	r0, r5
 801998e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019992:	9b02      	ldr	r3, [sp, #8]
 8019994:	b113      	cbz	r3, 801999c <_Paint+0x11c>
 8019996:	a802      	add	r0, sp, #8
 8019998:	f00b ffba 	bl	8025910 <GUI_ALLOC_UnlockH>
 801999c:	9b01      	ldr	r3, [sp, #4]
 801999e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80199a0:	2800      	cmp	r0, #0
 80199a2:	d17b      	bne.n	8019a9c <_Paint+0x21c>
 80199a4:	2000      	movs	r0, #0
 80199a6:	f004 ff01 	bl	801e7ac <WM__InitIVRSearch>
 80199aa:	2800      	cmp	r0, #0
 80199ac:	d049      	beq.n	8019a42 <_Paint+0x1c2>
 80199ae:	f8df b194 	ldr.w	fp, [pc, #404]	; 8019b44 <_Paint+0x2c4>
 80199b2:	e033      	b.n	8019a1c <_Paint+0x19c>
 80199b4:	9d01      	ldr	r5, [sp, #4]
 80199b6:	8e6f      	ldrh	r7, [r5, #50]	; 0x32
 80199b8:	07f8      	lsls	r0, r7, #31
 80199ba:	d528      	bpl.n	8019a0e <_Paint+0x18e>
 80199bc:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
 80199c0:	0719      	lsls	r1, r3, #28
 80199c2:	d54a      	bpl.n	8019a5a <_Paint+0x1da>
 80199c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80199c8:	3b01      	subs	r3, #1
 80199ca:	4443      	add	r3, r8
 80199cc:	2000      	movs	r0, #0
 80199ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80199d2:	f002 fe45 	bl	801c660 <WM_SetUserClipRect>
 80199d6:	a804      	add	r0, sp, #16
 80199d8:	f002 fe42 	bl	801c660 <WM_SetUserClipRect>
 80199dc:	9b01      	ldr	r3, [sp, #4]
 80199de:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 80199e2:	0752      	lsls	r2, r2, #29
 80199e4:	d445      	bmi.n	8019a72 <_Paint+0x1f2>
 80199e6:	9800      	ldr	r0, [sp, #0]
 80199e8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80199ec:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80199f0:	f009 ff5e 	bl	80238b0 <GUI_DispStringAt>
 80199f4:	f8db 3000 	ldr.w	r3, [fp]
 80199f8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80199fc:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8019a00:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019a04:	eb00 0208 	add.w	r2, r0, r8
 8019a08:	3a01      	subs	r2, #1
 8019a0a:	f00a fc8d 	bl	8024328 <GUI__InvertRectColors>
 8019a0e:	2000      	movs	r0, #0
 8019a10:	f002 fe26 	bl	801c660 <WM_SetUserClipRect>
 8019a14:	b974      	cbnz	r4, 8019a34 <_Paint+0x1b4>
 8019a16:	f004 fda3 	bl	801e560 <WM__GetNextIVR>
 8019a1a:	b190      	cbz	r0, 8019a42 <_Paint+0x1c2>
 8019a1c:	4630      	mov	r0, r6
 8019a1e:	f002 fe1f 	bl	801c660 <WM_SetUserClipRect>
 8019a22:	2c00      	cmp	r4, #0
 8019a24:	d0c6      	beq.n	80199b4 <_Paint+0x134>
 8019a26:	9800      	ldr	r0, [sp, #0]
 8019a28:	4631      	mov	r1, r6
 8019a2a:	464a      	mov	r2, r9
 8019a2c:	4653      	mov	r3, sl
 8019a2e:	f7fc f83d 	bl	8015aac <WIDGET__FillStringInRect>
 8019a32:	e7bf      	b.n	80199b4 <_Paint+0x134>
 8019a34:	9801      	ldr	r0, [sp, #4]
 8019a36:	f7fc fa59 	bl	8015eec <WIDGET__EFFECT_DrawDown>
 8019a3a:	f004 fd91 	bl	801e560 <WM__GetNextIVR>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d1ec      	bne.n	8019a1c <_Paint+0x19c>
 8019a42:	bb24      	cbnz	r4, 8019a8e <_Paint+0x20e>
 8019a44:	a801      	add	r0, sp, #4
 8019a46:	f00b ff63 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019a4a:	9b00      	ldr	r3, [sp, #0]
 8019a4c:	b113      	cbz	r3, 8019a54 <_Paint+0x1d4>
 8019a4e:	4668      	mov	r0, sp
 8019a50:	f00b ff5e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019a54:	b00d      	add	sp, #52	; 0x34
 8019a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a5a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019a5e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8019a62:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019a66:	eb00 0208 	add.w	r2, r0, r8
 8019a6a:	3a01      	subs	r2, #1
 8019a6c:	f00a fc5c 	bl	8024328 <GUI__InvertRectColors>
 8019a70:	e7cd      	b.n	8019a0e <_Paint+0x18e>
 8019a72:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8019a74:	f00a fe56 	bl	8024724 <GUI_SetColor>
 8019a78:	9b01      	ldr	r3, [sp, #4]
 8019a7a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8019a7e:	f00a fe45 	bl	802470c <GUI_SetBkColor>
 8019a82:	e7b0      	b.n	80199e6 <_Paint+0x166>
 8019a84:	f00b ff32 	bl	80258ec <GUI_ALLOC_LockH>
 8019a88:	9002      	str	r0, [sp, #8]
 8019a8a:	4684      	mov	ip, r0
 8019a8c:	e72a      	b.n	80198e4 <_Paint+0x64>
 8019a8e:	9b01      	ldr	r3, [sp, #4]
 8019a90:	2100      	movs	r1, #0
 8019a92:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8019a96:	f001 fb7b 	bl	801b190 <WM_RestartTimer>
 8019a9a:	e7d3      	b.n	8019a44 <_Paint+0x1c4>
 8019a9c:	f00b ff26 	bl	80258ec <GUI_ALLOC_LockH>
 8019aa0:	9000      	str	r0, [sp, #0]
 8019aa2:	e77f      	b.n	80199a4 <_Paint+0x124>
 8019aa4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8019aa6:	b1f3      	cbz	r3, 8019ae6 <_Paint+0x266>
 8019aa8:	b1ec      	cbz	r4, 8019ae6 <_Paint+0x266>
 8019aaa:	443b      	add	r3, r7
 8019aac:	429f      	cmp	r7, r3
 8019aae:	da41      	bge.n	8019b34 <_Paint+0x2b4>
 8019ab0:	4670      	mov	r0, lr
 8019ab2:	f04f 0800 	mov.w	r8, #0
 8019ab6:	e000      	b.n	8019aba <_Paint+0x23a>
 8019ab8:	9802      	ldr	r0, [sp, #8]
 8019aba:	4639      	mov	r1, r7
 8019abc:	465a      	mov	r2, fp
 8019abe:	2300      	movs	r3, #0
 8019ac0:	f008 fe72 	bl	80227a8 <GUI__GetCursorCharacter>
 8019ac4:	f00b f8c4 	bl	8024c50 <GUI_GetCharDistX>
 8019ac8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8019aca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8019acc:	3701      	adds	r7, #1
 8019ace:	441a      	add	r2, r3
 8019ad0:	4297      	cmp	r7, r2
 8019ad2:	4480      	add	r8, r0
 8019ad4:	dbf0      	blt.n	8019ab8 <_Paint+0x238>
 8019ad6:	9d03      	ldr	r5, [sp, #12]
 8019ad8:	9f02      	ldr	r7, [sp, #8]
 8019ada:	f1b8 0f00 	cmp.w	r8, #0
 8019ade:	d10e      	bne.n	8019afe <_Paint+0x27e>
 8019ae0:	f04f 0801 	mov.w	r8, #1
 8019ae4:	e00b      	b.n	8019afe <_Paint+0x27e>
 8019ae6:	4639      	mov	r1, r7
 8019ae8:	ab03      	add	r3, sp, #12
 8019aea:	4670      	mov	r0, lr
 8019aec:	465a      	mov	r2, fp
 8019aee:	f008 fe5b 	bl	80227a8 <GUI__GetCursorCharacter>
 8019af2:	f00b f8ad 	bl	8024c50 <GUI_GetCharDistX>
 8019af6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8019af8:	9f02      	ldr	r7, [sp, #8]
 8019afa:	9d03      	ldr	r5, [sp, #12]
 8019afc:	4680      	mov	r8, r0
 8019afe:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8019b02:	aa04      	add	r2, sp, #16
 8019b04:	e882 0003 	stmia.w	r2, {r0, r1}
 8019b08:	2d00      	cmp	r5, #0
 8019b0a:	f43f af38 	beq.w	801997e <_Paint+0xfe>
 8019b0e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8019b12:	ebc8 0505 	rsb	r5, r8, r5
 8019b16:	b2ad      	uxth	r5, r5
 8019b18:	f8ad 5010 	strh.w	r5, [sp, #16]
 8019b1c:	e731      	b.n	8019982 <_Paint+0x102>
 8019b1e:	4b08      	ldr	r3, [pc, #32]	; (8019b40 <_Paint+0x2c0>)
 8019b20:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	4670      	mov	r0, lr
 8019b26:	4659      	mov	r1, fp
 8019b28:	4798      	blx	r3
 8019b2a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8019b2c:	9f02      	ldr	r7, [sp, #8]
 8019b2e:	9003      	str	r0, [sp, #12]
 8019b30:	4605      	mov	r5, r0
 8019b32:	e7e4      	b.n	8019afe <_Paint+0x27e>
 8019b34:	463b      	mov	r3, r7
 8019b36:	f04f 0801 	mov.w	r8, #1
 8019b3a:	e71a      	b.n	8019972 <_Paint+0xf2>
 8019b3c:	2002cbac 	.word	0x2002cbac
 8019b40:	2002cbc0 	.word	0x2002cbc0
 8019b44:	20000280 	.word	0x20000280

08019b48 <EDIT__GetCurrentChar>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019b4e:	b082      	sub	sp, #8
 8019b50:	b918      	cbnz	r0, 8019b5a <EDIT__GetCurrentChar+0x12>
 8019b52:	4604      	mov	r4, r0
 8019b54:	4620      	mov	r0, r4
 8019b56:	b002      	add	sp, #8
 8019b58:	bd70      	pop	{r4, r5, r6, pc}
 8019b5a:	f00b fec7 	bl	80258ec <GUI_ALLOC_LockH>
 8019b5e:	ad02      	add	r5, sp, #8
 8019b60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8019b62:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019b66:	4606      	mov	r6, r0
 8019b68:	f009 f88c 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8019b6c:	4430      	add	r0, r6
 8019b6e:	f009 f84b 	bl	8022c08 <GUI_UC_GetCharCode>
 8019b72:	4604      	mov	r4, r0
 8019b74:	4628      	mov	r0, r5
 8019b76:	f00b fecb 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	b002      	add	sp, #8
 8019b7e:	bd70      	pop	{r4, r5, r6, pc}

08019b80 <EDIT__SetCursorPos>:
 8019b80:	b530      	push	{r4, r5, lr}
 8019b82:	b083      	sub	sp, #12
 8019b84:	460c      	mov	r4, r1
 8019b86:	f00b feb1 	bl	80258ec <GUI_ALLOC_LockH>
 8019b8a:	9000      	str	r0, [sp, #0]
 8019b8c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019b8e:	b1f8      	cbz	r0, 8019bd0 <EDIT__SetCursorPos+0x50>
 8019b90:	f00b feac 	bl	80258ec <GUI_ALLOC_LockH>
 8019b94:	9001      	str	r0, [sp, #4]
 8019b96:	f009 f8a3 	bl	8022ce0 <GUI__GetNumChars>
 8019b9a:	9b00      	ldr	r3, [sp, #0]
 8019b9c:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8019ba0:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8019ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019ba6:	2900      	cmp	r1, #0
 8019ba8:	bf0c      	ite	eq
 8019baa:	4629      	moveq	r1, r5
 8019bac:	1e69      	subne	r1, r5, #1
 8019bae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8019bb2:	428c      	cmp	r4, r1
 8019bb4:	bfa8      	it	ge
 8019bb6:	460c      	movge	r4, r1
 8019bb8:	4284      	cmp	r4, r0
 8019bba:	bfb8      	it	lt
 8019bbc:	4620      	movlt	r0, r4
 8019bbe:	4282      	cmp	r2, r0
 8019bc0:	f04f 0200 	mov.w	r2, #0
 8019bc4:	bf18      	it	ne
 8019bc6:	64d8      	strne	r0, [r3, #76]	; 0x4c
 8019bc8:	651a      	str	r2, [r3, #80]	; 0x50
 8019bca:	a801      	add	r0, sp, #4
 8019bcc:	f00b fea0 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019bd0:	4668      	mov	r0, sp
 8019bd2:	f00b fe9d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019bd6:	b003      	add	sp, #12
 8019bd8:	bd30      	pop	{r4, r5, pc}
 8019bda:	bf00      	nop

08019bdc <EDIT_CreateEx>:
 8019bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be0:	b089      	sub	sp, #36	; 0x24
 8019be2:	4683      	mov	fp, r0
 8019be4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019be6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019be8:	4e42      	ldr	r6, [pc, #264]	; (8019cf4 <EDIT_CreateEx+0x118>)
 8019bea:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8019bec:	468a      	mov	sl, r1
 8019bee:	4691      	mov	r9, r2
 8019bf0:	4698      	mov	r8, r3
 8019bf2:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8019bf6:	f009 faf9 	bl	80231ec <GUI_Lock>
 8019bfa:	9400      	str	r4, [sp, #0]
 8019bfc:	2460      	movs	r4, #96	; 0x60
 8019bfe:	9602      	str	r6, [sp, #8]
 8019c00:	9501      	str	r5, [sp, #4]
 8019c02:	4658      	mov	r0, fp
 8019c04:	4651      	mov	r1, sl
 8019c06:	464a      	mov	r2, r9
 8019c08:	4643      	mov	r3, r8
 8019c0a:	9403      	str	r4, [sp, #12]
 8019c0c:	f004 fb54 	bl	801e2b8 <WM_CreateWindowAsChild>
 8019c10:	4606      	mov	r6, r0
 8019c12:	b928      	cbnz	r0, 8019c20 <EDIT_CreateEx+0x44>
 8019c14:	f009 fae0 	bl	80231d8 <GUI_Unlock>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	b009      	add	sp, #36	; 0x24
 8019c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c20:	f00b fe64 	bl	80258ec <GUI_ALLOC_LockH>
 8019c24:	4d34      	ldr	r5, [pc, #208]	; (8019cf8 <EDIT_CreateEx+0x11c>)
 8019c26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019c28:	9005      	str	r0, [sp, #20]
 8019c2a:	2210      	movs	r2, #16
 8019c2c:	f7fb ff36 	bl	8015a9c <WIDGET__Init>
 8019c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c32:	f8dd e014 	ldr.w	lr, [sp, #20]
 8019c36:	4474      	add	r4, lr
 8019c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c3e:	682b      	ldr	r3, [r5, #0]
 8019c40:	6023      	str	r3, [r4, #0]
 8019c42:	1c7b      	adds	r3, r7, #1
 8019c44:	bf18      	it	ne
 8019c46:	2301      	movne	r3, #1
 8019c48:	2201      	movs	r2, #1
 8019c4a:	2f00      	cmp	r7, #0
 8019c4c:	f88e 2055 	strb.w	r2, [lr, #85]	; 0x55
 8019c50:	f88e 3088 	strb.w	r3, [lr, #136]	; 0x88
 8019c54:	dd4a      	ble.n	8019cec <EDIT_CreateEx+0x110>
 8019c56:	b2bf      	uxth	r7, r7
 8019c58:	b23d      	sxth	r5, r7
 8019c5a:	4415      	add	r5, r2
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	f8ae 7038 	strh.w	r7, [lr, #56]	; 0x38
 8019c62:	f8ae 303a 	strh.w	r3, [lr, #58]	; 0x3a
 8019c66:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8019c6a:	a805      	add	r0, sp, #20
 8019c6c:	f00b fe50 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019c70:	4630      	mov	r0, r6
 8019c72:	f00b fe3b 	bl	80258ec <GUI_ALLOC_LockH>
 8019c76:	ac08      	add	r4, sp, #32
 8019c78:	4603      	mov	r3, r0
 8019c7a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 8019c7c:	f844 0d08 	str.w	r0, [r4, #-8]!
 8019c80:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8019c82:	4415      	add	r5, r2
 8019c84:	4620      	mov	r0, r4
 8019c86:	f00b fe43 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019c8a:	4638      	mov	r0, r7
 8019c8c:	4629      	mov	r1, r5
 8019c8e:	f00b fff3 	bl	8025c78 <GUI_ALLOC_Realloc>
 8019c92:	4680      	mov	r8, r0
 8019c94:	b300      	cbz	r0, 8019cd8 <EDIT_CreateEx+0xfc>
 8019c96:	b187      	cbz	r7, 8019cba <EDIT_CreateEx+0xde>
 8019c98:	4630      	mov	r0, r6
 8019c9a:	f00b fe27 	bl	80258ec <GUI_ALLOC_LockH>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	875d      	strh	r5, [r3, #58]	; 0x3a
 8019ca4:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
 8019ca8:	9306      	str	r3, [sp, #24]
 8019caa:	f00b fe31 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019cae:	f009 fa93 	bl	80231d8 <GUI_Unlock>
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	b009      	add	sp, #36	; 0x24
 8019cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cba:	f00b fe17 	bl	80258ec <GUI_ALLOC_LockH>
 8019cbe:	f10d 0920 	add.w	r9, sp, #32
 8019cc2:	4b0e      	ldr	r3, [pc, #56]	; (8019cfc <EDIT_CreateEx+0x120>)
 8019cc4:	f849 0d04 	str.w	r0, [r9, #-4]!
 8019cc8:	4639      	mov	r1, r7
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	462a      	mov	r2, r5
 8019cce:	4798      	blx	r3
 8019cd0:	4648      	mov	r0, r9
 8019cd2:	f00b fe1d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019cd6:	e7df      	b.n	8019c98 <EDIT_CreateEx+0xbc>
 8019cd8:	4630      	mov	r0, r6
 8019cda:	f004 fbe5 	bl	801e4a8 <WM_DeleteWindow>
 8019cde:	f009 fa7b 	bl	80231d8 <GUI_Unlock>
 8019ce2:	4646      	mov	r6, r8
 8019ce4:	4630      	mov	r0, r6
 8019ce6:	b009      	add	sp, #36	; 0x24
 8019ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cec:	2509      	movs	r5, #9
 8019cee:	2708      	movs	r7, #8
 8019cf0:	e7b4      	b.n	8019c5c <EDIT_CreateEx+0x80>
 8019cf2:	bf00      	nop
 8019cf4:	0801a3b5 	.word	0x0801a3b5
 8019cf8:	200001f4 	.word	0x200001f4
 8019cfc:	20000254 	.word	0x20000254

08019d00 <EDIT_SetCursorAtPixel>:
 8019d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d04:	4604      	mov	r4, r0
 8019d06:	b084      	sub	sp, #16
 8019d08:	460d      	mov	r5, r1
 8019d0a:	b910      	cbnz	r0, 8019d12 <EDIT_SetCursorAtPixel+0x12>
 8019d0c:	b004      	add	sp, #16
 8019d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d12:	f009 fa6b 	bl	80231ec <GUI_Lock>
 8019d16:	4620      	mov	r0, r4
 8019d18:	f00b fde8 	bl	80258ec <GUI_ALLOC_LockH>
 8019d1c:	9001      	str	r0, [sp, #4]
 8019d1e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019d20:	b938      	cbnz	r0, 8019d32 <EDIT_SetCursorAtPixel+0x32>
 8019d22:	a801      	add	r0, sp, #4
 8019d24:	f00b fdf4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019d28:	f009 fa56 	bl	80231d8 <GUI_Unlock>
 8019d2c:	b004      	add	sp, #16
 8019d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d32:	f00b fddb 	bl	80258ec <GUI_ALLOC_LockH>
 8019d36:	9b01      	ldr	r3, [sp, #4]
 8019d38:	9000      	str	r0, [sp, #0]
 8019d3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8019d3c:	f00a fd54 	bl	80247e8 <GUI_SetFont>
 8019d40:	4607      	mov	r7, r0
 8019d42:	4620      	mov	r0, r4
 8019d44:	f002 fe28 	bl	801c998 <WM_GetWindowSizeX>
 8019d48:	4680      	mov	r8, r0
 8019d4a:	9800      	ldr	r0, [sp, #0]
 8019d4c:	f009 ff72 	bl	8023c34 <GUI_GetStringDistX>
 8019d50:	9b01      	ldr	r3, [sp, #4]
 8019d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019d54:	f002 0203 	and.w	r2, r2, #3
 8019d58:	2a01      	cmp	r2, #1
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	d059      	beq.n	8019e12 <EDIT_SetCursorAtPixel+0x112>
 8019d5e:	2a02      	cmp	r2, #2
 8019d60:	d021      	beq.n	8019da6 <EDIT_SetCursorAtPixel+0xa6>
 8019d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019d66:	6812      	ldr	r2, [r2, #0]
 8019d68:	43db      	mvns	r3, r3
 8019d6a:	1a9b      	subs	r3, r3, r2
 8019d6c:	441d      	add	r5, r3
 8019d6e:	9800      	ldr	r0, [sp, #0]
 8019d70:	f008 ffb6 	bl	8022ce0 <GUI__GetNumChars>
 8019d74:	2d00      	cmp	r5, #0
 8019d76:	4680      	mov	r8, r0
 8019d78:	db6d      	blt.n	8019e56 <EDIT_SetCursorAtPixel+0x156>
 8019d7a:	42b5      	cmp	r5, r6
 8019d7c:	dd1c      	ble.n	8019db8 <EDIT_SetCursorAtPixel+0xb8>
 8019d7e:	4620      	mov	r0, r4
 8019d80:	f00b fdb4 	bl	80258ec <GUI_ALLOC_LockH>
 8019d84:	9002      	str	r0, [sp, #8]
 8019d86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	d14a      	bne.n	8019e22 <EDIT_SetCursorAtPixel+0x122>
 8019d8c:	a802      	add	r0, sp, #8
 8019d8e:	f00b fdbf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019d92:	4668      	mov	r0, sp
 8019d94:	f00b fdbc 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019d98:	4638      	mov	r0, r7
 8019d9a:	f00a fd25 	bl	80247e8 <GUI_SetFont>
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f004 fa2e 	bl	801e200 <WM_InvalidateWindow>
 8019da4:	e7bd      	b.n	8019d22 <EDIT_SetCursorAtPixel+0x22>
 8019da6:	ebc0 0808 	rsb	r8, r0, r8
 8019daa:	f108 0801 	add.w	r8, r8, #1
 8019dae:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8019db2:	eba5 0568 	sub.w	r5, r5, r8, asr #1
 8019db6:	e7da      	b.n	8019d6e <EDIT_SetCursorAtPixel+0x6e>
 8019db8:	4629      	mov	r1, r5
 8019dba:	4602      	mov	r2, r0
 8019dbc:	9800      	ldr	r0, [sp, #0]
 8019dbe:	f008 fce9 	bl	8022794 <GUI__GetCursorPosChar>
 8019dc2:	4605      	mov	r5, r0
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f00b fd91 	bl	80258ec <GUI_ALLOC_LockH>
 8019dca:	9002      	str	r0, [sp, #8]
 8019dcc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019dce:	2800      	cmp	r0, #0
 8019dd0:	d0dc      	beq.n	8019d8c <EDIT_SetCursorAtPixel+0x8c>
 8019dd2:	f00b fd8b 	bl	80258ec <GUI_ALLOC_LockH>
 8019dd6:	9003      	str	r0, [sp, #12]
 8019dd8:	f008 ff82 	bl	8022ce0 <GUI__GetNumChars>
 8019ddc:	9b02      	ldr	r3, [sp, #8]
 8019dde:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 8019de2:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8019de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019de8:	2900      	cmp	r1, #0
 8019dea:	bf0c      	ite	eq
 8019dec:	4631      	moveq	r1, r6
 8019dee:	1e71      	subne	r1, r6, #1
 8019df0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019df4:	428d      	cmp	r5, r1
 8019df6:	bfa8      	it	ge
 8019df8:	460d      	movge	r5, r1
 8019dfa:	4285      	cmp	r5, r0
 8019dfc:	bfb8      	it	lt
 8019dfe:	4628      	movlt	r0, r5
 8019e00:	4282      	cmp	r2, r0
 8019e02:	d000      	beq.n	8019e06 <EDIT_SetCursorAtPixel+0x106>
 8019e04:	64d8      	str	r0, [r3, #76]	; 0x4c
 8019e06:	2200      	movs	r2, #0
 8019e08:	651a      	str	r2, [r3, #80]	; 0x50
 8019e0a:	a803      	add	r0, sp, #12
 8019e0c:	f00b fd80 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019e10:	e7bc      	b.n	8019d8c <EDIT_SetCursorAtPixel+0x8c>
 8019e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019e14:	ebc8 0800 	rsb	r8, r8, r0
 8019e18:	43db      	mvns	r3, r3
 8019e1a:	ebc3 0808 	rsb	r8, r3, r8
 8019e1e:	4445      	add	r5, r8
 8019e20:	e7a5      	b.n	8019d6e <EDIT_SetCursorAtPixel+0x6e>
 8019e22:	f00b fd63 	bl	80258ec <GUI_ALLOC_LockH>
 8019e26:	9003      	str	r0, [sp, #12]
 8019e28:	f008 ff5a 	bl	8022ce0 <GUI__GetNumChars>
 8019e2c:	9b02      	ldr	r3, [sp, #8]
 8019e2e:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8019e32:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8019e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e38:	2900      	cmp	r1, #0
 8019e3a:	bf0c      	ite	eq
 8019e3c:	4629      	moveq	r1, r5
 8019e3e:	1e69      	subne	r1, r5, #1
 8019e40:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8019e44:	4588      	cmp	r8, r1
 8019e46:	bfa8      	it	ge
 8019e48:	4688      	movge	r8, r1
 8019e4a:	4580      	cmp	r8, r0
 8019e4c:	bfb8      	it	lt
 8019e4e:	4640      	movlt	r0, r8
 8019e50:	4282      	cmp	r2, r0
 8019e52:	d1d7      	bne.n	8019e04 <EDIT_SetCursorAtPixel+0x104>
 8019e54:	e7d7      	b.n	8019e06 <EDIT_SetCursorAtPixel+0x106>
 8019e56:	4620      	mov	r0, r4
 8019e58:	f00b fd48 	bl	80258ec <GUI_ALLOC_LockH>
 8019e5c:	9002      	str	r0, [sp, #8]
 8019e5e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019e60:	2800      	cmp	r0, #0
 8019e62:	d093      	beq.n	8019d8c <EDIT_SetCursorAtPixel+0x8c>
 8019e64:	f00b fd42 	bl	80258ec <GUI_ALLOC_LockH>
 8019e68:	9003      	str	r0, [sp, #12]
 8019e6a:	f008 ff39 	bl	8022ce0 <GUI__GetNumChars>
 8019e6e:	9b02      	ldr	r3, [sp, #8]
 8019e70:	f9b3 5038 	ldrsh.w	r5, [r3, #56]	; 0x38
 8019e74:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8019e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019e7a:	2900      	cmp	r1, #0
 8019e7c:	bf0c      	ite	eq
 8019e7e:	4629      	moveq	r1, r5
 8019e80:	1e69      	subne	r1, r5, #1
 8019e82:	ea01 71e1 	and.w	r1, r1, r1, asr #31
 8019e86:	4281      	cmp	r1, r0
 8019e88:	bfb8      	it	lt
 8019e8a:	4608      	movlt	r0, r1
 8019e8c:	4282      	cmp	r2, r0
 8019e8e:	d1b9      	bne.n	8019e04 <EDIT_SetCursorAtPixel+0x104>
 8019e90:	e7b9      	b.n	8019e06 <EDIT_SetCursorAtPixel+0x106>
 8019e92:	bf00      	nop

08019e94 <EDIT_AddKey>:
 8019e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e98:	4683      	mov	fp, r0
 8019e9a:	b089      	sub	sp, #36	; 0x24
 8019e9c:	460e      	mov	r6, r1
 8019e9e:	b910      	cbnz	r0, 8019ea6 <EDIT_AddKey+0x12>
 8019ea0:	b009      	add	sp, #36	; 0x24
 8019ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ea6:	f009 f9a1 	bl	80231ec <GUI_Lock>
 8019eaa:	4658      	mov	r0, fp
 8019eac:	f00b fd1e 	bl	80258ec <GUI_ALLOC_LockH>
 8019eb0:	ad08      	add	r5, sp, #32
 8019eb2:	4602      	mov	r2, r0
 8019eb4:	f845 0d18 	str.w	r0, [r5, #-24]!
 8019eb8:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8019eba:	f892 9054 	ldrb.w	r9, [r2, #84]	; 0x54
 8019ebe:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 8019ec2:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	f00b fd23 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019eca:	b157      	cbz	r7, 8019ee2 <EDIT_AddKey+0x4e>
 8019ecc:	4631      	mov	r1, r6
 8019ece:	4658      	mov	r0, fp
 8019ed0:	47b8      	blx	r7
 8019ed2:	4658      	mov	r0, fp
 8019ed4:	f004 f994 	bl	801e200 <WM_InvalidateWindow>
 8019ed8:	f009 f97e 	bl	80231d8 <GUI_Unlock>
 8019edc:	b009      	add	sp, #36	; 0x24
 8019ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee2:	f1a6 0208 	sub.w	r2, r6, #8
 8019ee6:	2a16      	cmp	r2, #22
 8019ee8:	f200 8100 	bhi.w	801a0ec <EDIT_AddKey+0x258>
 8019eec:	e8df f012 	tbh	[pc, r2, lsl #1]
 8019ef0:	00fe009a 	.word	0x00fe009a
 8019ef4:	00fe00fe 	.word	0x00fe00fe
 8019ef8:	00fe00fe 	.word	0x00fe00fe
 8019efc:	00fe00fe 	.word	0x00fe00fe
 8019f00:	007f00d5 	.word	0x007f00d5
 8019f04:	00460073 	.word	0x00460073
 8019f08:	00fe00fe 	.word	0x00fe00fe
 8019f0c:	00fe00fe 	.word	0x00fe00fe
 8019f10:	00fe00fe 	.word	0x00fe00fe
 8019f14:	00fe00fe 	.word	0x00fe00fe
 8019f18:	003700fe 	.word	0x003700fe
 8019f1c:	0017      	.short	0x0017
 8019f1e:	4658      	mov	r0, fp
 8019f20:	f00b fce4 	bl	80258ec <GUI_ALLOC_LockH>
 8019f24:	4602      	mov	r2, r0
 8019f26:	a808      	add	r0, sp, #32
 8019f28:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8019f2a:	f840 2d08 	str.w	r2, [r0, #-8]!
 8019f2e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8019f30:	f00b fcee 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019f34:	2c00      	cmp	r4, #0
 8019f36:	d0cc      	beq.n	8019ed2 <EDIT_AddKey+0x3e>
 8019f38:	4620      	mov	r0, r4
 8019f3a:	f00b fcd7 	bl	80258ec <GUI_ALLOC_LockH>
 8019f3e:	4629      	mov	r1, r5
 8019f40:	4604      	mov	r4, r0
 8019f42:	9007      	str	r0, [sp, #28]
 8019f44:	f008 fe9e 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8019f48:	4605      	mov	r5, r0
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	f7e6 f96a 	bl	8000224 <strlen>
 8019f50:	4285      	cmp	r5, r0
 8019f52:	f0c0 81b7 	bcc.w	801a2c4 <EDIT_AddKey+0x430>
 8019f56:	a807      	add	r0, sp, #28
 8019f58:	f00b fcda 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019f5c:	e7b9      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 8019f5e:	4658      	mov	r0, fp
 8019f60:	f00b fcc4 	bl	80258ec <GUI_ALLOC_LockH>
 8019f64:	f1b9 0f01 	cmp.w	r9, #1
 8019f68:	9002      	str	r0, [sp, #8]
 8019f6a:	f040 8171 	bne.w	801a250 <EDIT_AddKey+0x3bc>
 8019f6e:	2200      	movs	r2, #0
 8019f70:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019f74:	4628      	mov	r0, r5
 8019f76:	f00b fccb 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019f7a:	e7aa      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 8019f7c:	f1b8 0f00 	cmp.w	r8, #0
 8019f80:	d0a7      	beq.n	8019ed2 <EDIT_AddKey+0x3e>
 8019f82:	4640      	mov	r0, r8
 8019f84:	f00b fcb2 	bl	80258ec <GUI_ALLOC_LockH>
 8019f88:	4621      	mov	r1, r4
 8019f8a:	4605      	mov	r5, r0
 8019f8c:	9007      	str	r0, [sp, #28]
 8019f8e:	f008 fe79 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8019f92:	4405      	add	r5, r0
 8019f94:	4628      	mov	r0, r5
 8019f96:	f008 fe37 	bl	8022c08 <GUI_UC_GetCharCode>
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019fa2:	f88d 201a 	strb.w	r2, [sp, #26]
 8019fa6:	f008 fe51 	bl	8022c4c <GUI_UC__CalcSizeOfChar>
 8019faa:	3e01      	subs	r6, #1
 8019fac:	4604      	mov	r4, r0
 8019fae:	b2b6      	uxth	r6, r6
 8019fb0:	4630      	mov	r0, r6
 8019fb2:	f008 fe4b 	bl	8022c4c <GUI_UC__CalcSizeOfChar>
 8019fb6:	4284      	cmp	r4, r0
 8019fb8:	d1cd      	bne.n	8019f56 <EDIT_AddKey+0xc2>
 8019fba:	4631      	mov	r1, r6
 8019fbc:	a806      	add	r0, sp, #24
 8019fbe:	f008 fe33 	bl	8022c28 <GUI_UC_Encode>
 8019fc2:	a906      	add	r1, sp, #24
 8019fc4:	4628      	mov	r0, r5
 8019fc6:	4622      	mov	r2, r4
 8019fc8:	f010 fbec 	bl	802a7a4 <memcpy>
 8019fcc:	4658      	mov	r0, fp
 8019fce:	2105      	movs	r1, #5
 8019fd0:	f002 fa1a 	bl	801c408 <WM_NotifyParent>
 8019fd4:	e7bf      	b.n	8019f56 <EDIT_AddKey+0xc2>
 8019fd6:	4658      	mov	r0, fp
 8019fd8:	f00b fc88 	bl	80258ec <GUI_ALLOC_LockH>
 8019fdc:	9006      	str	r0, [sp, #24]
 8019fde:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	f040 8162 	bne.w	801a2aa <EDIT_AddKey+0x416>
 8019fe6:	a806      	add	r0, sp, #24
 8019fe8:	f00b fc92 	bl	8025910 <GUI_ALLOC_UnlockH>
 8019fec:	e771      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 8019fee:	f1b8 0f00 	cmp.w	r8, #0
 8019ff2:	f43f af6e 	beq.w	8019ed2 <EDIT_AddKey+0x3e>
 8019ff6:	4640      	mov	r0, r8
 8019ff8:	f00b fc78 	bl	80258ec <GUI_ALLOC_LockH>
 8019ffc:	4621      	mov	r1, r4
 8019ffe:	4605      	mov	r5, r0
 801a000:	9007      	str	r0, [sp, #28]
 801a002:	f008 fe3f 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 801a006:	4405      	add	r5, r0
 801a008:	4628      	mov	r0, r5
 801a00a:	f008 fdfd 	bl	8022c08 <GUI_UC_GetCharCode>
 801a00e:	2200      	movs	r2, #0
 801a010:	4606      	mov	r6, r0
 801a012:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a016:	f88d 201a 	strb.w	r2, [sp, #26]
 801a01a:	f008 fe17 	bl	8022c4c <GUI_UC__CalcSizeOfChar>
 801a01e:	3601      	adds	r6, #1
 801a020:	4604      	mov	r4, r0
 801a022:	e7c4      	b.n	8019fae <EDIT_AddKey+0x11a>
 801a024:	2c00      	cmp	r4, #0
 801a026:	f43f af54 	beq.w	8019ed2 <EDIT_AddKey+0x3e>
 801a02a:	4658      	mov	r0, fp
 801a02c:	f00b fc5e 	bl	80258ec <GUI_ALLOC_LockH>
 801a030:	9006      	str	r0, [sp, #24]
 801a032:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a034:	b300      	cbz	r0, 801a078 <EDIT_AddKey+0x1e4>
 801a036:	f00b fc59 	bl	80258ec <GUI_ALLOC_LockH>
 801a03a:	9007      	str	r0, [sp, #28]
 801a03c:	f008 fe50 	bl	8022ce0 <GUI__GetNumChars>
 801a040:	9a06      	ldr	r2, [sp, #24]
 801a042:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 801a046:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 801a04a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801a04c:	3c01      	subs	r4, #1
 801a04e:	2d00      	cmp	r5, #0
 801a050:	bf0c      	ite	eq
 801a052:	4635      	moveq	r5, r6
 801a054:	1e75      	subne	r5, r6, #1
 801a056:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a05a:	42a5      	cmp	r5, r4
 801a05c:	bfb8      	it	lt
 801a05e:	462c      	movlt	r4, r5
 801a060:	4284      	cmp	r4, r0
 801a062:	bfb8      	it	lt
 801a064:	4620      	movlt	r0, r4
 801a066:	4281      	cmp	r1, r0
 801a068:	f04f 0100 	mov.w	r1, #0
 801a06c:	bf18      	it	ne
 801a06e:	64d0      	strne	r0, [r2, #76]	; 0x4c
 801a070:	6511      	str	r1, [r2, #80]	; 0x50
 801a072:	a807      	add	r0, sp, #28
 801a074:	f00b fc4c 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a078:	a806      	add	r0, sp, #24
 801a07a:	f00b fc49 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a07e:	4658      	mov	r0, fp
 801a080:	f00b fc34 	bl	80258ec <GUI_ALLOC_LockH>
 801a084:	4602      	mov	r2, r0
 801a086:	a806      	add	r0, sp, #24
 801a088:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801a08a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801a08c:	9206      	str	r2, [sp, #24]
 801a08e:	f00b fc3f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a092:	2c00      	cmp	r4, #0
 801a094:	f43f af1d 	beq.w	8019ed2 <EDIT_AddKey+0x3e>
 801a098:	e74e      	b.n	8019f38 <EDIT_AddKey+0xa4>
 801a09a:	4658      	mov	r0, fp
 801a09c:	f00b fc26 	bl	80258ec <GUI_ALLOC_LockH>
 801a0a0:	9006      	str	r0, [sp, #24]
 801a0a2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	d09e      	beq.n	8019fe6 <EDIT_AddKey+0x152>
 801a0a8:	f00b fc20 	bl	80258ec <GUI_ALLOC_LockH>
 801a0ac:	9007      	str	r0, [sp, #28]
 801a0ae:	f008 fe17 	bl	8022ce0 <GUI__GetNumChars>
 801a0b2:	9a06      	ldr	r2, [sp, #24]
 801a0b4:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 801a0b8:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 801a0bc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801a0be:	3c01      	subs	r4, #1
 801a0c0:	2d00      	cmp	r5, #0
 801a0c2:	bf0c      	ite	eq
 801a0c4:	4635      	moveq	r5, r6
 801a0c6:	1e75      	subne	r5, r6, #1
 801a0c8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a0cc:	42a5      	cmp	r5, r4
 801a0ce:	bfb8      	it	lt
 801a0d0:	462c      	movlt	r4, r5
 801a0d2:	4284      	cmp	r4, r0
 801a0d4:	bfb8      	it	lt
 801a0d6:	4620      	movlt	r0, r4
 801a0d8:	4281      	cmp	r1, r0
 801a0da:	f04f 0100 	mov.w	r1, #0
 801a0de:	bf18      	it	ne
 801a0e0:	64d0      	strne	r0, [r2, #76]	; 0x4c
 801a0e2:	6511      	str	r1, [r2, #80]	; 0x50
 801a0e4:	a807      	add	r0, sp, #28
 801a0e6:	f00b fc13 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a0ea:	e77c      	b.n	8019fe6 <EDIT_AddKey+0x152>
 801a0ec:	2e1f      	cmp	r6, #31
 801a0ee:	f77f aef0 	ble.w	8019ed2 <EDIT_AddKey+0x3e>
 801a0f2:	f1b9 0f00 	cmp.w	r9, #0
 801a0f6:	f040 80f9 	bne.w	801a2ec <EDIT_AddKey+0x458>
 801a0fa:	4658      	mov	r0, fp
 801a0fc:	f00b fbf6 	bl	80258ec <GUI_ALLOC_LockH>
 801a100:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	; 0x38
 801a104:	9003      	str	r0, [sp, #12]
 801a106:	2a00      	cmp	r2, #0
 801a108:	4607      	mov	r7, r0
 801a10a:	dd08      	ble.n	801a11e <EDIT_AddKey+0x28a>
 801a10c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a10e:	2800      	cmp	r0, #0
 801a110:	f040 810e 	bne.w	801a330 <EDIT_AddKey+0x49c>
 801a114:	4680      	mov	r8, r0
 801a116:	4590      	cmp	r8, r2
 801a118:	f280 80e4 	bge.w	801a2e4 <EDIT_AddKey+0x450>
 801a11c:	9f03      	ldr	r7, [sp, #12]
 801a11e:	b2b6      	uxth	r6, r6
 801a120:	a803      	add	r0, sp, #12
 801a122:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
 801a126:	f00b fbf3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a12a:	4630      	mov	r0, r6
 801a12c:	f008 fd8e 	bl	8022c4c <GUI_UC__CalcSizeOfChar>
 801a130:	4607      	mov	r7, r0
 801a132:	4658      	mov	r0, fp
 801a134:	f00b fbda 	bl	80258ec <GUI_ALLOC_LockH>
 801a138:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a13a:	9004      	str	r0, [sp, #16]
 801a13c:	2a00      	cmp	r2, #0
 801a13e:	f040 8109 	bne.w	801a354 <EDIT_AddKey+0x4c0>
 801a142:	4615      	mov	r5, r2
 801a144:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 801a146:	443d      	add	r5, r7
 801a148:	3501      	adds	r5, #1
 801a14a:	1aad      	subs	r5, r5, r2
 801a14c:	a804      	add	r0, sp, #16
 801a14e:	f00b fbdf 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a152:	2d00      	cmp	r5, #0
 801a154:	f340 80fa 	ble.w	801a34c <EDIT_AddKey+0x4b8>
 801a158:	4658      	mov	r0, fp
 801a15a:	f00b fbc7 	bl	80258ec <GUI_ALLOC_LockH>
 801a15e:	f10d 0a20 	add.w	sl, sp, #32
 801a162:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 801a164:	f84a 0d08 	str.w	r0, [sl, #-8]!
 801a168:	3510      	adds	r5, #16
 801a16a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a16c:	9000      	str	r0, [sp, #0]
 801a16e:	eb05 0902 	add.w	r9, r5, r2
 801a172:	4650      	mov	r0, sl
 801a174:	f00b fbcc 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a178:	9800      	ldr	r0, [sp, #0]
 801a17a:	4649      	mov	r1, r9
 801a17c:	f00b fd7c 	bl	8025c78 <GUI_ALLOC_Realloc>
 801a180:	9001      	str	r0, [sp, #4]
 801a182:	2800      	cmp	r0, #0
 801a184:	f43f aea5 	beq.w	8019ed2 <EDIT_AddKey+0x3e>
 801a188:	9b00      	ldr	r3, [sp, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	f000 80f1 	beq.w	801a372 <EDIT_AddKey+0x4de>
 801a190:	ad07      	add	r5, sp, #28
 801a192:	4658      	mov	r0, fp
 801a194:	f00b fbaa 	bl	80258ec <GUI_ALLOC_LockH>
 801a198:	4602      	mov	r2, r0
 801a19a:	9b01      	ldr	r3, [sp, #4]
 801a19c:	9006      	str	r0, [sp, #24]
 801a19e:	4650      	mov	r0, sl
 801a1a0:	f8a2 903a 	strh.w	r9, [r2, #58]	; 0x3a
 801a1a4:	6353      	str	r3, [r2, #52]	; 0x34
 801a1a6:	f00b fbb3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a1aa:	4658      	mov	r0, fp
 801a1ac:	f00b fb9e 	bl	80258ec <GUI_ALLOC_LockH>
 801a1b0:	4602      	mov	r2, r0
 801a1b2:	a803      	add	r0, sp, #12
 801a1b4:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801a1b8:	9203      	str	r2, [sp, #12]
 801a1ba:	f00b fba9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a1be:	4648      	mov	r0, r9
 801a1c0:	f00b fb94 	bl	80258ec <GUI_ALLOC_LockH>
 801a1c4:	4641      	mov	r1, r8
 801a1c6:	4681      	mov	r9, r0
 801a1c8:	9007      	str	r0, [sp, #28]
 801a1ca:	f008 fd5b 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 801a1ce:	eb09 0800 	add.w	r8, r9, r0
 801a1d2:	4640      	mov	r0, r8
 801a1d4:	f7e6 f826 	bl	8000224 <strlen>
 801a1d8:	4641      	mov	r1, r8
 801a1da:	1c42      	adds	r2, r0, #1
 801a1dc:	eb08 0007 	add.w	r0, r8, r7
 801a1e0:	f010 faeb 	bl	802a7ba <memmove>
 801a1e4:	4631      	mov	r1, r6
 801a1e6:	4640      	mov	r0, r8
 801a1e8:	f008 fd1e 	bl	8022c28 <GUI_UC_Encode>
 801a1ec:	4628      	mov	r0, r5
 801a1ee:	f00b fb8f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a1f2:	4658      	mov	r0, fp
 801a1f4:	2105      	movs	r1, #5
 801a1f6:	f002 f907 	bl	801c408 <WM_NotifyParent>
 801a1fa:	4658      	mov	r0, fp
 801a1fc:	f00b fb76 	bl	80258ec <GUI_ALLOC_LockH>
 801a200:	9006      	str	r0, [sp, #24]
 801a202:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a204:	b300      	cbz	r0, 801a248 <EDIT_AddKey+0x3b4>
 801a206:	f00b fb71 	bl	80258ec <GUI_ALLOC_LockH>
 801a20a:	9007      	str	r0, [sp, #28]
 801a20c:	f008 fd68 	bl	8022ce0 <GUI__GetNumChars>
 801a210:	9a06      	ldr	r2, [sp, #24]
 801a212:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 801a216:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 801a21a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801a21c:	3401      	adds	r4, #1
 801a21e:	2e00      	cmp	r6, #0
 801a220:	bf0c      	ite	eq
 801a222:	463e      	moveq	r6, r7
 801a224:	1e7e      	subne	r6, r7, #1
 801a226:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a22a:	42a6      	cmp	r6, r4
 801a22c:	bfb8      	it	lt
 801a22e:	4634      	movlt	r4, r6
 801a230:	4284      	cmp	r4, r0
 801a232:	bfb8      	it	lt
 801a234:	4620      	movlt	r0, r4
 801a236:	4281      	cmp	r1, r0
 801a238:	f04f 0100 	mov.w	r1, #0
 801a23c:	bf18      	it	ne
 801a23e:	64d0      	strne	r0, [r2, #76]	; 0x4c
 801a240:	6511      	str	r1, [r2, #80]	; 0x50
 801a242:	4628      	mov	r0, r5
 801a244:	f00b fb64 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a248:	4650      	mov	r0, sl
 801a24a:	f00b fb61 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a24e:	e640      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 801a250:	2201      	movs	r2, #1
 801a252:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a256:	4658      	mov	r0, fp
 801a258:	f00b fb48 	bl	80258ec <GUI_ALLOC_LockH>
 801a25c:	9006      	str	r0, [sp, #24]
 801a25e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a260:	b1f8      	cbz	r0, 801a2a2 <EDIT_AddKey+0x40e>
 801a262:	f00b fb43 	bl	80258ec <GUI_ALLOC_LockH>
 801a266:	9007      	str	r0, [sp, #28]
 801a268:	f008 fd3a 	bl	8022ce0 <GUI__GetNumChars>
 801a26c:	9a06      	ldr	r2, [sp, #24]
 801a26e:	f9b2 7038 	ldrsh.w	r7, [r2, #56]	; 0x38
 801a272:	f892 6054 	ldrb.w	r6, [r2, #84]	; 0x54
 801a276:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801a278:	2e00      	cmp	r6, #0
 801a27a:	bf0c      	ite	eq
 801a27c:	463e      	moveq	r6, r7
 801a27e:	1e7e      	subne	r6, r7, #1
 801a280:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a284:	42a6      	cmp	r6, r4
 801a286:	bfb8      	it	lt
 801a288:	4634      	movlt	r4, r6
 801a28a:	4284      	cmp	r4, r0
 801a28c:	bfb8      	it	lt
 801a28e:	4620      	movlt	r0, r4
 801a290:	4281      	cmp	r1, r0
 801a292:	f04f 0100 	mov.w	r1, #0
 801a296:	bf18      	it	ne
 801a298:	64d0      	strne	r0, [r2, #76]	; 0x4c
 801a29a:	6511      	str	r1, [r2, #80]	; 0x50
 801a29c:	a807      	add	r0, sp, #28
 801a29e:	f00b fb37 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a2a2:	a806      	add	r0, sp, #24
 801a2a4:	f00b fb34 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a2a8:	e664      	b.n	8019f74 <EDIT_AddKey+0xe0>
 801a2aa:	f00b fb1f 	bl	80258ec <GUI_ALLOC_LockH>
 801a2ae:	9007      	str	r0, [sp, #28]
 801a2b0:	f008 fd16 	bl	8022ce0 <GUI__GetNumChars>
 801a2b4:	9a06      	ldr	r2, [sp, #24]
 801a2b6:	3401      	adds	r4, #1
 801a2b8:	f9b2 6038 	ldrsh.w	r6, [r2, #56]	; 0x38
 801a2bc:	f892 5054 	ldrb.w	r5, [r2, #84]	; 0x54
 801a2c0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801a2c2:	e6fd      	b.n	801a0c0 <EDIT_AddKey+0x22c>
 801a2c4:	442c      	add	r4, r5
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	f008 fc8e 	bl	8022be8 <GUI_UC_GetCharSize>
 801a2cc:	1821      	adds	r1, r4, r0
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f010 fbce 	bl	802aa70 <strcpy>
 801a2d4:	a807      	add	r0, sp, #28
 801a2d6:	f00b fb1b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a2da:	4658      	mov	r0, fp
 801a2dc:	2105      	movs	r1, #5
 801a2de:	f002 f893 	bl	801c408 <WM_NotifyParent>
 801a2e2:	e5f6      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 801a2e4:	a803      	add	r0, sp, #12
 801a2e6:	f00b fb13 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a2ea:	e5f2      	b.n	8019ed2 <EDIT_AddKey+0x3e>
 801a2ec:	4658      	mov	r0, fp
 801a2ee:	f00b fafd 	bl	80258ec <GUI_ALLOC_LockH>
 801a2f2:	f10d 0a20 	add.w	sl, sp, #32
 801a2f6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801a2f8:	f84a 0d08 	str.w	r0, [sl, #-8]!
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	4650      	mov	r0, sl
 801a300:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
 801a302:	f00b fb05 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a306:	2d00      	cmp	r5, #0
 801a308:	f43f aef7 	beq.w	801a0fa <EDIT_AddKey+0x266>
 801a30c:	4628      	mov	r0, r5
 801a30e:	f00b faed 	bl	80258ec <GUI_ALLOC_LockH>
 801a312:	4639      	mov	r1, r7
 801a314:	4605      	mov	r5, r0
 801a316:	9007      	str	r0, [sp, #28]
 801a318:	f008 fcb4 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 801a31c:	4607      	mov	r7, r0
 801a31e:	4628      	mov	r0, r5
 801a320:	f7e5 ff80 	bl	8000224 <strlen>
 801a324:	4287      	cmp	r7, r0
 801a326:	d332      	bcc.n	801a38e <EDIT_AddKey+0x4fa>
 801a328:	a807      	add	r0, sp, #28
 801a32a:	f00b faf1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a32e:	e6e4      	b.n	801a0fa <EDIT_AddKey+0x266>
 801a330:	f00b fadc 	bl	80258ec <GUI_ALLOC_LockH>
 801a334:	ad08      	add	r5, sp, #32
 801a336:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a33a:	f008 fcd1 	bl	8022ce0 <GUI__GetNumChars>
 801a33e:	4680      	mov	r8, r0
 801a340:	4628      	mov	r0, r5
 801a342:	f00b fae5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a346:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 801a34a:	e6e4      	b.n	801a116 <EDIT_AddKey+0x282>
 801a34c:	f10d 0a18 	add.w	sl, sp, #24
 801a350:	ad07      	add	r5, sp, #28
 801a352:	e72a      	b.n	801a1aa <EDIT_AddKey+0x316>
 801a354:	4610      	mov	r0, r2
 801a356:	f00b fac9 	bl	80258ec <GUI_ALLOC_LockH>
 801a35a:	f10d 0920 	add.w	r9, sp, #32
 801a35e:	f849 0d0c 	str.w	r0, [r9, #-12]!
 801a362:	f7e5 ff5f 	bl	8000224 <strlen>
 801a366:	4605      	mov	r5, r0
 801a368:	4648      	mov	r0, r9
 801a36a:	f00b fad1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a36e:	9804      	ldr	r0, [sp, #16]
 801a370:	e6e8      	b.n	801a144 <EDIT_AddKey+0x2b0>
 801a372:	f00b fabb 	bl	80258ec <GUI_ALLOC_LockH>
 801a376:	ad08      	add	r5, sp, #32
 801a378:	4a0d      	ldr	r2, [pc, #52]	; (801a3b0 <EDIT_AddKey+0x51c>)
 801a37a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a37e:	6813      	ldr	r3, [r2, #0]
 801a380:	9900      	ldr	r1, [sp, #0]
 801a382:	464a      	mov	r2, r9
 801a384:	4798      	blx	r3
 801a386:	4628      	mov	r0, r5
 801a388:	f00b fac2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a38c:	e701      	b.n	801a192 <EDIT_AddKey+0x2fe>
 801a38e:	443d      	add	r5, r7
 801a390:	4628      	mov	r0, r5
 801a392:	f008 fc29 	bl	8022be8 <GUI_UC_GetCharSize>
 801a396:	1829      	adds	r1, r5, r0
 801a398:	4628      	mov	r0, r5
 801a39a:	f010 fb69 	bl	802aa70 <strcpy>
 801a39e:	a807      	add	r0, sp, #28
 801a3a0:	f00b fab6 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a3a4:	4658      	mov	r0, fp
 801a3a6:	2105      	movs	r1, #5
 801a3a8:	f002 f82e 	bl	801c408 <WM_NotifyParent>
 801a3ac:	e6a5      	b.n	801a0fa <EDIT_AddKey+0x266>
 801a3ae:	bf00      	nop
 801a3b0:	20000254 	.word	0x20000254

0801a3b4 <EDIT_Callback>:
 801a3b4:	b570      	push	{r4, r5, r6, lr}
 801a3b6:	6845      	ldr	r5, [r0, #4]
 801a3b8:	b082      	sub	sp, #8
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	4628      	mov	r0, r5
 801a3be:	f000 fd37 	bl	801ae30 <WM__IsEnabled>
 801a3c2:	4621      	mov	r1, r4
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f7fb fc62 	bl	8015c90 <WIDGET_HandleActive>
 801a3cc:	b1d8      	cbz	r0, 801a406 <EDIT_Callback+0x52>
 801a3ce:	6823      	ldr	r3, [r4, #0]
 801a3d0:	2b0f      	cmp	r3, #15
 801a3d2:	d030      	beq.n	801a436 <EDIT_Callback+0x82>
 801a3d4:	dc19      	bgt.n	801a40a <EDIT_Callback+0x56>
 801a3d6:	2b0b      	cmp	r3, #11
 801a3d8:	d032      	beq.n	801a440 <EDIT_Callback+0x8c>
 801a3da:	2b0e      	cmp	r3, #14
 801a3dc:	d13d      	bne.n	801a45a <EDIT_Callback+0xa6>
 801a3de:	2e00      	cmp	r6, #0
 801a3e0:	d03b      	beq.n	801a45a <EDIT_Callback+0xa6>
 801a3e2:	68e3      	ldr	r3, [r4, #12]
 801a3e4:	685a      	ldr	r2, [r3, #4]
 801a3e6:	2a00      	cmp	r2, #0
 801a3e8:	dd37      	ble.n	801a45a <EDIT_Callback+0xa6>
 801a3ea:	6819      	ldr	r1, [r3, #0]
 801a3ec:	f1a1 0309 	sub.w	r3, r1, #9
 801a3f0:	2b19      	cmp	r3, #25
 801a3f2:	d805      	bhi.n	801a400 <EDIT_Callback+0x4c>
 801a3f4:	2001      	movs	r0, #1
 801a3f6:	4a32      	ldr	r2, [pc, #200]	; (801a4c0 <EDIT_Callback+0x10c>)
 801a3f8:	fa00 f303 	lsl.w	r3, r0, r3
 801a3fc:	401a      	ands	r2, r3
 801a3fe:	bb62      	cbnz	r2, 801a45a <EDIT_Callback+0xa6>
 801a400:	4628      	mov	r0, r5
 801a402:	f7ff fd47 	bl	8019e94 <EDIT_AddKey>
 801a406:	b002      	add	sp, #8
 801a408:	bd70      	pop	{r4, r5, r6, pc}
 801a40a:	f240 1213 	movw	r2, #275	; 0x113
 801a40e:	4293      	cmp	r3, r2
 801a410:	d028      	beq.n	801a464 <EDIT_Callback+0xb0>
 801a412:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a416:	d120      	bne.n	801a45a <EDIT_Callback+0xa6>
 801a418:	68e3      	ldr	r3, [r4, #12]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d04b      	beq.n	801a4b6 <EDIT_Callback+0x102>
 801a41e:	7a1a      	ldrb	r2, [r3, #8]
 801a420:	2a00      	cmp	r2, #0
 801a422:	d043      	beq.n	801a4ac <EDIT_Callback+0xf8>
 801a424:	6819      	ldr	r1, [r3, #0]
 801a426:	4628      	mov	r0, r5
 801a428:	f7ff fc6a 	bl	8019d00 <EDIT_SetCursorAtPixel>
 801a42c:	4628      	mov	r0, r5
 801a42e:	2101      	movs	r1, #1
 801a430:	f001 ffea 	bl	801c408 <WM_NotifyParent>
 801a434:	e011      	b.n	801a45a <EDIT_Callback+0xa6>
 801a436:	4628      	mov	r0, r5
 801a438:	2101      	movs	r1, #1
 801a43a:	f7ff fa21 	bl	8019880 <_Paint>
 801a43e:	e7e2      	b.n	801a406 <EDIT_Callback+0x52>
 801a440:	4628      	mov	r0, r5
 801a442:	f00b fa53 	bl	80258ec <GUI_ALLOC_LockH>
 801a446:	ad02      	add	r5, sp, #8
 801a448:	4603      	mov	r3, r0
 801a44a:	f845 3d04 	str.w	r3, [r5, #-4]!
 801a44e:	3034      	adds	r0, #52	; 0x34
 801a450:	f00b fb7e 	bl	8025b50 <GUI_ALLOC_FreePtr>
 801a454:	4628      	mov	r0, r5
 801a456:	f00b fa5b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a45a:	4620      	mov	r0, r4
 801a45c:	f004 fc36 	bl	801eccc <WM_DefaultProc>
 801a460:	b002      	add	sp, #8
 801a462:	bd70      	pop	{r4, r5, r6, pc}
 801a464:	4628      	mov	r0, r5
 801a466:	f004 f83d 	bl	801e4e4 <WM_SelectWindow>
 801a46a:	4628      	mov	r0, r5
 801a46c:	f00b fa3e 	bl	80258ec <GUI_ALLOC_LockH>
 801a470:	ae02      	add	r6, sp, #8
 801a472:	f846 0d04 	str.w	r0, [r6, #-4]!
 801a476:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
 801a47a:	f083 0304 	eor.w	r3, r3, #4
 801a47e:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 801a482:	4630      	mov	r0, r6
 801a484:	f00b fa44 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a488:	4628      	mov	r0, r5
 801a48a:	2100      	movs	r1, #0
 801a48c:	f7ff f9f8 	bl	8019880 <_Paint>
 801a490:	4628      	mov	r0, r5
 801a492:	f00b fa2b 	bl	80258ec <GUI_ALLOC_LockH>
 801a496:	2100      	movs	r1, #0
 801a498:	4603      	mov	r3, r0
 801a49a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 801a49e:	9301      	str	r3, [sp, #4]
 801a4a0:	f000 fe76 	bl	801b190 <WM_RestartTimer>
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f00b fa33 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a4aa:	e7d6      	b.n	801a45a <EDIT_Callback+0xa6>
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	2102      	movs	r1, #2
 801a4b0:	f001 ffaa 	bl	801c408 <WM_NotifyParent>
 801a4b4:	e7d1      	b.n	801a45a <EDIT_Callback+0xa6>
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	2103      	movs	r1, #3
 801a4ba:	f001 ffa5 	bl	801c408 <WM_NotifyParent>
 801a4be:	e7cc      	b.n	801a45a <EDIT_Callback+0xa6>
 801a4c0:	03040013 	.word	0x03040013

0801a4c4 <EDIT_SetFont>:
 801a4c4:	b570      	push	{r4, r5, r6, lr}
 801a4c6:	4604      	mov	r4, r0
 801a4c8:	b082      	sub	sp, #8
 801a4ca:	460e      	mov	r6, r1
 801a4cc:	b188      	cbz	r0, 801a4f2 <EDIT_SetFont+0x2e>
 801a4ce:	f008 fe8d 	bl	80231ec <GUI_Lock>
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f00b fa0a 	bl	80258ec <GUI_ALLOC_LockH>
 801a4d8:	ad02      	add	r5, sp, #8
 801a4da:	4603      	mov	r3, r0
 801a4dc:	f845 3d04 	str.w	r3, [r5, #-4]!
 801a4e0:	6686      	str	r6, [r0, #104]	; 0x68
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	f003 fe8c 	bl	801e200 <WM_InvalidateWindow>
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	f00b fa11 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a4ee:	f008 fe73 	bl	80231d8 <GUI_Unlock>
 801a4f2:	b002      	add	sp, #8
 801a4f4:	bd70      	pop	{r4, r5, r6, pc}
 801a4f6:	bf00      	nop

0801a4f8 <EDIT_SetBkColor>:
 801a4f8:	b570      	push	{r4, r5, r6, lr}
 801a4fa:	4604      	mov	r4, r0
 801a4fc:	b082      	sub	sp, #8
 801a4fe:	460d      	mov	r5, r1
 801a500:	4616      	mov	r6, r2
 801a502:	b908      	cbnz	r0, 801a508 <EDIT_SetBkColor+0x10>
 801a504:	b002      	add	sp, #8
 801a506:	bd70      	pop	{r4, r5, r6, pc}
 801a508:	f008 fe70 	bl	80231ec <GUI_Lock>
 801a50c:	4620      	mov	r0, r4
 801a50e:	f00b f9ed 	bl	80258ec <GUI_ALLOC_LockH>
 801a512:	4603      	mov	r3, r0
 801a514:	9001      	str	r0, [sp, #4]
 801a516:	b108      	cbz	r0, 801a51c <EDIT_SetBkColor+0x24>
 801a518:	2d02      	cmp	r5, #2
 801a51a:	d906      	bls.n	801a52a <EDIT_SetBkColor+0x32>
 801a51c:	a801      	add	r0, sp, #4
 801a51e:	f00b f9f7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a522:	f008 fe59 	bl	80231d8 <GUI_Unlock>
 801a526:	b002      	add	sp, #8
 801a528:	bd70      	pop	{r4, r5, r6, pc}
 801a52a:	351e      	adds	r5, #30
 801a52c:	4620      	mov	r0, r4
 801a52e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 801a532:	f003 fe65 	bl	801e200 <WM_InvalidateWindow>
 801a536:	e7f1      	b.n	801a51c <EDIT_SetBkColor+0x24>

0801a538 <EDIT_SetTextColor>:
 801a538:	b570      	push	{r4, r5, r6, lr}
 801a53a:	4604      	mov	r4, r0
 801a53c:	b082      	sub	sp, #8
 801a53e:	460d      	mov	r5, r1
 801a540:	4616      	mov	r6, r2
 801a542:	b908      	cbnz	r0, 801a548 <EDIT_SetTextColor+0x10>
 801a544:	b002      	add	sp, #8
 801a546:	bd70      	pop	{r4, r5, r6, pc}
 801a548:	f008 fe50 	bl	80231ec <GUI_Lock>
 801a54c:	4620      	mov	r0, r4
 801a54e:	f00b f9cd 	bl	80258ec <GUI_ALLOC_LockH>
 801a552:	9001      	str	r0, [sp, #4]
 801a554:	b108      	cbz	r0, 801a55a <EDIT_SetTextColor+0x22>
 801a556:	2d02      	cmp	r5, #2
 801a558:	d906      	bls.n	801a568 <EDIT_SetTextColor+0x30>
 801a55a:	a801      	add	r0, sp, #4
 801a55c:	f00b f9d8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a560:	f008 fe3a 	bl	80231d8 <GUI_Unlock>
 801a564:	b002      	add	sp, #8
 801a566:	bd70      	pop	{r4, r5, r6, pc}
 801a568:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801a56c:	4620      	mov	r0, r4
 801a56e:	66ee      	str	r6, [r5, #108]	; 0x6c
 801a570:	f003 fe46 	bl	801e200 <WM_InvalidateWindow>
 801a574:	e7f1      	b.n	801a55a <EDIT_SetTextColor+0x22>
 801a576:	bf00      	nop

0801a578 <EDIT_GetValue>:
 801a578:	b510      	push	{r4, lr}
 801a57a:	4604      	mov	r4, r0
 801a57c:	b082      	sub	sp, #8
 801a57e:	b168      	cbz	r0, 801a59c <EDIT_GetValue+0x24>
 801a580:	f008 fe34 	bl	80231ec <GUI_Lock>
 801a584:	4620      	mov	r0, r4
 801a586:	f00b f9b1 	bl	80258ec <GUI_ALLOC_LockH>
 801a58a:	ab02      	add	r3, sp, #8
 801a58c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801a58e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a592:	4618      	mov	r0, r3
 801a594:	f00b f9bc 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a598:	f008 fe1e 	bl	80231d8 <GUI_Unlock>
 801a59c:	4620      	mov	r0, r4
 801a59e:	b002      	add	sp, #8
 801a5a0:	bd10      	pop	{r4, pc}
 801a5a2:	bf00      	nop

0801a5a4 <EDIT_SetValue>:
 801a5a4:	b530      	push	{r4, r5, lr}
 801a5a6:	4604      	mov	r4, r0
 801a5a8:	b083      	sub	sp, #12
 801a5aa:	460d      	mov	r5, r1
 801a5ac:	b908      	cbnz	r0, 801a5b2 <EDIT_SetValue+0xe>
 801a5ae:	b003      	add	sp, #12
 801a5b0:	bd30      	pop	{r4, r5, pc}
 801a5b2:	f008 fe1b 	bl	80231ec <GUI_Lock>
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f00b f998 	bl	80258ec <GUI_ALLOC_LockH>
 801a5bc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801a5be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801a5c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801a5c2:	9001      	str	r0, [sp, #4]
 801a5c4:	428d      	cmp	r5, r1
 801a5c6:	bfb8      	it	lt
 801a5c8:	460d      	movlt	r5, r1
 801a5ca:	4295      	cmp	r5, r2
 801a5cc:	bfa8      	it	ge
 801a5ce:	4615      	movge	r5, r2
 801a5d0:	42ab      	cmp	r3, r5
 801a5d2:	d012      	beq.n	801a5fa <EDIT_SetValue+0x56>
 801a5d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801a5d6:	6485      	str	r5, [r0, #72]	; 0x48
 801a5d8:	b10b      	cbz	r3, 801a5de <EDIT_SetValue+0x3a>
 801a5da:	4620      	mov	r0, r4
 801a5dc:	4798      	blx	r3
 801a5de:	4620      	mov	r0, r4
 801a5e0:	f003 fe0e 	bl	801e200 <WM_InvalidateWindow>
 801a5e4:	a801      	add	r0, sp, #4
 801a5e6:	f00b f993 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	2105      	movs	r1, #5
 801a5ee:	f001 ff0b 	bl	801c408 <WM_NotifyParent>
 801a5f2:	f008 fdf1 	bl	80231d8 <GUI_Unlock>
 801a5f6:	b003      	add	sp, #12
 801a5f8:	bd30      	pop	{r4, r5, pc}
 801a5fa:	a801      	add	r0, sp, #4
 801a5fc:	f00b f988 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a600:	e7f7      	b.n	801a5f2 <EDIT_SetValue+0x4e>
 801a602:	bf00      	nop

0801a604 <EDIT_SetMaxLen>:
 801a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a608:	4604      	mov	r4, r0
 801a60a:	b085      	sub	sp, #20
 801a60c:	460d      	mov	r5, r1
 801a60e:	b910      	cbnz	r0, 801a616 <EDIT_SetMaxLen+0x12>
 801a610:	b005      	add	sp, #20
 801a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a616:	f008 fde9 	bl	80231ec <GUI_Lock>
 801a61a:	4620      	mov	r0, r4
 801a61c:	f00b f966 	bl	80258ec <GUI_ALLOC_LockH>
 801a620:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 801a624:	9000      	str	r0, [sp, #0]
 801a626:	42ab      	cmp	r3, r5
 801a628:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
 801a62c:	d035      	beq.n	801a69a <EDIT_SetMaxLen+0x96>
 801a62e:	dd02      	ble.n	801a636 <EDIT_SetMaxLen+0x32>
 801a630:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a632:	2800      	cmp	r0, #0
 801a634:	d139      	bne.n	801a6aa <EDIT_SetMaxLen+0xa6>
 801a636:	4668      	mov	r0, sp
 801a638:	f00b f96a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a63c:	4620      	mov	r0, r4
 801a63e:	f00b f955 	bl	80258ec <GUI_ALLOC_LockH>
 801a642:	ae04      	add	r6, sp, #16
 801a644:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 801a646:	f846 0d08 	str.w	r0, [r6, #-8]!
 801a64a:	ebc8 0805 	rsb	r8, r8, r5
 801a64e:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 801a652:	f108 0801 	add.w	r8, r8, #1
 801a656:	4490      	add	r8, r2
 801a658:	4630      	mov	r0, r6
 801a65a:	f00b f959 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a65e:	4648      	mov	r0, r9
 801a660:	4641      	mov	r1, r8
 801a662:	f00b fb09 	bl	8025c78 <GUI_ALLOC_Realloc>
 801a666:	4682      	mov	sl, r0
 801a668:	b170      	cbz	r0, 801a688 <EDIT_SetMaxLen+0x84>
 801a66a:	f1b9 0f00 	cmp.w	r9, #0
 801a66e:	d027      	beq.n	801a6c0 <EDIT_SetMaxLen+0xbc>
 801a670:	4620      	mov	r0, r4
 801a672:	f00b f93b 	bl	80258ec <GUI_ALLOC_LockH>
 801a676:	4603      	mov	r3, r0
 801a678:	4630      	mov	r0, r6
 801a67a:	f8a3 803a 	strh.w	r8, [r3, #58]	; 0x3a
 801a67e:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
 801a682:	9302      	str	r3, [sp, #8]
 801a684:	f00b f944 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a688:	4620      	mov	r0, r4
 801a68a:	f00b f92f 	bl	80258ec <GUI_ALLOC_LockH>
 801a68e:	4603      	mov	r3, r0
 801a690:	4620      	mov	r0, r4
 801a692:	871d      	strh	r5, [r3, #56]	; 0x38
 801a694:	9300      	str	r3, [sp, #0]
 801a696:	f003 fdb3 	bl	801e200 <WM_InvalidateWindow>
 801a69a:	4668      	mov	r0, sp
 801a69c:	f00b f938 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a6a0:	f008 fd9a 	bl	80231d8 <GUI_Unlock>
 801a6a4:	b005      	add	sp, #20
 801a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6aa:	f00b f91f 	bl	80258ec <GUI_ALLOC_LockH>
 801a6ae:	9001      	str	r0, [sp, #4]
 801a6b0:	f008 fb16 	bl	8022ce0 <GUI__GetNumChars>
 801a6b4:	4285      	cmp	r5, r0
 801a6b6:	db12      	blt.n	801a6de <EDIT_SetMaxLen+0xda>
 801a6b8:	a801      	add	r0, sp, #4
 801a6ba:	f00b f929 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a6be:	e7ba      	b.n	801a636 <EDIT_SetMaxLen+0x32>
 801a6c0:	f00b f914 	bl	80258ec <GUI_ALLOC_LockH>
 801a6c4:	f10d 0b10 	add.w	fp, sp, #16
 801a6c8:	4b09      	ldr	r3, [pc, #36]	; (801a6f0 <EDIT_SetMaxLen+0xec>)
 801a6ca:	f84b 0d04 	str.w	r0, [fp, #-4]!
 801a6ce:	4649      	mov	r1, r9
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	4642      	mov	r2, r8
 801a6d4:	4798      	blx	r3
 801a6d6:	4658      	mov	r0, fp
 801a6d8:	f00b f91a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a6dc:	e7c8      	b.n	801a670 <EDIT_SetMaxLen+0x6c>
 801a6de:	9801      	ldr	r0, [sp, #4]
 801a6e0:	4629      	mov	r1, r5
 801a6e2:	f008 facf 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 801a6e6:	9b01      	ldr	r3, [sp, #4]
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	541a      	strb	r2, [r3, r0]
 801a6ec:	e7e4      	b.n	801a6b8 <EDIT_SetMaxLen+0xb4>
 801a6ee:	bf00      	nop
 801a6f0:	20000254 	.word	0x20000254

0801a6f4 <EDIT_SetCursorAtChar>:
 801a6f4:	b570      	push	{r4, r5, r6, lr}
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	460d      	mov	r5, r1
 801a6fc:	f008 fd76 	bl	80231ec <GUI_Lock>
 801a700:	b91c      	cbnz	r4, 801a70a <EDIT_SetCursorAtChar+0x16>
 801a702:	f008 fd69 	bl	80231d8 <GUI_Unlock>
 801a706:	b002      	add	sp, #8
 801a708:	bd70      	pop	{r4, r5, r6, pc}
 801a70a:	4620      	mov	r0, r4
 801a70c:	f00b f8ee 	bl	80258ec <GUI_ALLOC_LockH>
 801a710:	9000      	str	r0, [sp, #0]
 801a712:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a714:	b1f8      	cbz	r0, 801a756 <EDIT_SetCursorAtChar+0x62>
 801a716:	f00b f8e9 	bl	80258ec <GUI_ALLOC_LockH>
 801a71a:	9001      	str	r0, [sp, #4]
 801a71c:	f008 fae0 	bl	8022ce0 <GUI__GetNumChars>
 801a720:	9b00      	ldr	r3, [sp, #0]
 801a722:	f9b3 6038 	ldrsh.w	r6, [r3, #56]	; 0x38
 801a726:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 801a72a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a72c:	2900      	cmp	r1, #0
 801a72e:	bf0c      	ite	eq
 801a730:	4631      	moveq	r1, r6
 801a732:	1e71      	subne	r1, r6, #1
 801a734:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a738:	428d      	cmp	r5, r1
 801a73a:	bfa8      	it	ge
 801a73c:	460d      	movge	r5, r1
 801a73e:	4285      	cmp	r5, r0
 801a740:	bfb8      	it	lt
 801a742:	4628      	movlt	r0, r5
 801a744:	4282      	cmp	r2, r0
 801a746:	f04f 0200 	mov.w	r2, #0
 801a74a:	bf18      	it	ne
 801a74c:	64d8      	strne	r0, [r3, #76]	; 0x4c
 801a74e:	651a      	str	r2, [r3, #80]	; 0x50
 801a750:	a801      	add	r0, sp, #4
 801a752:	f00b f8dd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a756:	4668      	mov	r0, sp
 801a758:	f00b f8da 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a75c:	4620      	mov	r0, r4
 801a75e:	f003 fd4f 	bl	801e200 <WM_InvalidateWindow>
 801a762:	f008 fd39 	bl	80231d8 <GUI_Unlock>
 801a766:	b002      	add	sp, #8
 801a768:	bd70      	pop	{r4, r5, r6, pc}
 801a76a:	bf00      	nop

0801a76c <GUI_CreateDialogBox>:
 801a76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a770:	b082      	sub	sp, #8
 801a772:	4699      	mov	r9, r3
 801a774:	4604      	mov	r4, r0
 801a776:	460d      	mov	r5, r1
 801a778:	4616      	mov	r6, r2
 801a77a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d037      	beq.n	801a7f0 <GUI_CreateDialogBox+0x84>
 801a780:	9600      	str	r6, [sp, #0]
 801a782:	463a      	mov	r2, r7
 801a784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a786:	6826      	ldr	r6, [r4, #0]
 801a788:	4620      	mov	r0, r4
 801a78a:	4649      	mov	r1, r9
 801a78c:	47b0      	blx	r6
 801a78e:	4682      	mov	sl, r0
 801a790:	b918      	cbnz	r0, 801a79a <GUI_CreateDialogBox+0x2e>
 801a792:	4650      	mov	r0, sl
 801a794:	b002      	add	sp, #8
 801a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a79a:	f001 fa5d 	bl	801bc58 <WM_GetClientWindow>
 801a79e:	8a61      	ldrh	r1, [r4, #18]
 801a7a0:	4607      	mov	r7, r0
 801a7a2:	4650      	mov	r0, sl
 801a7a4:	f7fb fa08 	bl	8015bb8 <WIDGET_OrState>
 801a7a8:	4650      	mov	r0, sl
 801a7aa:	f002 f893 	bl	801c8d4 <WM_ShowWindow>
 801a7ae:	3d01      	subs	r5, #1
 801a7b0:	4638      	mov	r0, r7
 801a7b2:	f002 f88f 	bl	801c8d4 <WM_ShowWindow>
 801a7b6:	2d00      	cmp	r5, #0
 801a7b8:	bfc8      	it	gt
 801a7ba:	f04f 0800 	movgt.w	r8, #0
 801a7be:	dc04      	bgt.n	801a7ca <GUI_CreateDialogBox+0x5e>
 801a7c0:	e01a      	b.n	801a7f8 <GUI_CreateDialogBox+0x8c>
 801a7c2:	f002 f887 	bl	801c8d4 <WM_ShowWindow>
 801a7c6:	3d01      	subs	r5, #1
 801a7c8:	d016      	beq.n	801a7f8 <GUI_CreateDialogBox+0x8c>
 801a7ca:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 801a7ce:	f8cd 8000 	str.w	r8, [sp]
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	4613      	mov	r3, r2
 801a7d8:	4639      	mov	r1, r7
 801a7da:	47b0      	blx	r6
 801a7dc:	4606      	mov	r6, r0
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d1ef      	bne.n	801a7c2 <GUI_CreateDialogBox+0x56>
 801a7e2:	4650      	mov	r0, sl
 801a7e4:	f003 fe60 	bl	801e4a8 <WM_DeleteWindow>
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	b002      	add	sp, #8
 801a7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7f0:	f001 fa42 	bl	801bc78 <WM_GetDesktopWindow>
 801a7f4:	4681      	mov	r9, r0
 801a7f6:	e7c3      	b.n	801a780 <GUI_CreateDialogBox+0x14>
 801a7f8:	4638      	mov	r0, r7
 801a7fa:	211d      	movs	r1, #29
 801a7fc:	f001 fe56 	bl	801c4ac <WM_SendMessageNoPara>
 801a800:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a804:	d0c5      	beq.n	801a792 <GUI_CreateDialogBox+0x26>
 801a806:	f008 fcf1 	bl	80231ec <GUI_Lock>
 801a80a:	f001 fb11 	bl	801be30 <WM_GetFocusedWindow>
 801a80e:	b960      	cbnz	r0, 801a82a <GUI_CreateDialogBox+0xbe>
 801a810:	45d1      	cmp	r9, sl
 801a812:	d002      	beq.n	801a81a <GUI_CreateDialogBox+0xae>
 801a814:	4650      	mov	r0, sl
 801a816:	f000 fdad 	bl	801b374 <WM_SetFocusOnNextChild>
 801a81a:	f008 fcdd 	bl	80231d8 <GUI_Unlock>
 801a81e:	4650      	mov	r0, sl
 801a820:	b002      	add	sp, #8
 801a822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a826:	2800      	cmp	r0, #0
 801a828:	d0f4      	beq.n	801a814 <GUI_CreateDialogBox+0xa8>
 801a82a:	f00b f855 	bl	80258d8 <GUI_ALLOC_h2p>
 801a82e:	6980      	ldr	r0, [r0, #24]
 801a830:	4550      	cmp	r0, sl
 801a832:	d1f8      	bne.n	801a826 <GUI_CreateDialogBox+0xba>
 801a834:	e7f1      	b.n	801a81a <GUI_CreateDialogBox+0xae>
 801a836:	bf00      	nop

0801a838 <BUTTON_Callback>:
 801a838:	b570      	push	{r4, r5, r6, lr}
 801a83a:	6845      	ldr	r5, [r0, #4]
 801a83c:	b082      	sub	sp, #8
 801a83e:	4604      	mov	r4, r0
 801a840:	4601      	mov	r1, r0
 801a842:	4628      	mov	r0, r5
 801a844:	f7fb fa24 	bl	8015c90 <WIDGET_HandleActive>
 801a848:	b168      	cbz	r0, 801a866 <BUTTON_Callback+0x2e>
 801a84a:	6823      	ldr	r3, [r4, #0]
 801a84c:	2b0f      	cmp	r3, #15
 801a84e:	d059      	beq.n	801a904 <BUTTON_Callback+0xcc>
 801a850:	dd0b      	ble.n	801a86a <BUTTON_Callback+0x32>
 801a852:	2b28      	cmp	r3, #40	; 0x28
 801a854:	d045      	beq.n	801a8e2 <BUTTON_Callback+0xaa>
 801a856:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a85a:	d03c      	beq.n	801a8d6 <BUTTON_Callback+0x9e>
 801a85c:	2b11      	cmp	r3, #17
 801a85e:	d049      	beq.n	801a8f4 <BUTTON_Callback+0xbc>
 801a860:	4620      	mov	r0, r4
 801a862:	f004 fa33 	bl	801eccc <WM_DefaultProc>
 801a866:	b002      	add	sp, #8
 801a868:	bd70      	pop	{r4, r5, r6, pc}
 801a86a:	2b0b      	cmp	r3, #11
 801a86c:	d020      	beq.n	801a8b0 <BUTTON_Callback+0x78>
 801a86e:	2b0e      	cmp	r3, #14
 801a870:	d1f6      	bne.n	801a860 <BUTTON_Callback+0x28>
 801a872:	68e3      	ldr	r3, [r4, #12]
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	6859      	ldr	r1, [r3, #4]
 801a878:	2a0d      	cmp	r2, #13
 801a87a:	d053      	beq.n	801a924 <BUTTON_Callback+0xec>
 801a87c:	2a20      	cmp	r2, #32
 801a87e:	d131      	bne.n	801a8e4 <BUTTON_Callback+0xac>
 801a880:	2900      	cmp	r1, #0
 801a882:	4628      	mov	r0, r5
 801a884:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a888:	dd7d      	ble.n	801a986 <BUTTON_Callback+0x14e>
 801a88a:	f7fb f995 	bl	8015bb8 <WIDGET_OrState>
 801a88e:	4628      	mov	r0, r5
 801a890:	f00b f82c 	bl	80258ec <GUI_ALLOC_LockH>
 801a894:	ab02      	add	r3, sp, #8
 801a896:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a898:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a89c:	4618      	mov	r0, r3
 801a89e:	f00b f837 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a8a2:	07a2      	lsls	r2, r4, #30
 801a8a4:	d5df      	bpl.n	801a866 <BUTTON_Callback+0x2e>
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	2101      	movs	r1, #1
 801a8aa:	f001 fdad 	bl	801c408 <WM_NotifyParent>
 801a8ae:	e7da      	b.n	801a866 <BUTTON_Callback+0x2e>
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	f00b f81b 	bl	80258ec <GUI_ALLOC_LockH>
 801a8b6:	ad02      	add	r5, sp, #8
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	3068      	adds	r0, #104	; 0x68
 801a8bc:	9301      	str	r3, [sp, #4]
 801a8be:	f00b f947 	bl	8025b50 <GUI_ALLOC_FreePtr>
 801a8c2:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 801a8c6:	2103      	movs	r1, #3
 801a8c8:	306c      	adds	r0, #108	; 0x6c
 801a8ca:	f00b f967 	bl	8025b9c <GUI_ALLOC_FreePtrArray>
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	f00b f81e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a8d4:	e7c4      	b.n	801a860 <BUTTON_Callback+0x28>
 801a8d6:	4b32      	ldr	r3, [pc, #200]	; (801a9a0 <BUTTON_Callback+0x168>)
 801a8d8:	4628      	mov	r0, r5
 801a8da:	4621      	mov	r1, r4
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	4798      	blx	r3
 801a8e0:	e7c1      	b.n	801a866 <BUTTON_Callback+0x2e>
 801a8e2:	68e3      	ldr	r3, [r4, #12]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d1bb      	bne.n	801a860 <BUTTON_Callback+0x28>
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a8ee:	f7fb f981 	bl	8015bf4 <WIDGET_AndState>
 801a8f2:	e7b5      	b.n	801a860 <BUTTON_Callback+0x28>
 801a8f4:	4b2b      	ldr	r3, [pc, #172]	; (801a9a4 <BUTTON_Callback+0x16c>)
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d0b4      	beq.n	801a866 <BUTTON_Callback+0x2e>
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	4621      	mov	r1, r4
 801a900:	4798      	blx	r3
 801a902:	e7b0      	b.n	801a866 <BUTTON_Callback+0x2e>
 801a904:	4628      	mov	r0, r5
 801a906:	f00a fff1 	bl	80258ec <GUI_ALLOC_LockH>
 801a90a:	ab02      	add	r3, sp, #8
 801a90c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a910:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801a912:	6814      	ldr	r4, [r2, #0]
 801a914:	4618      	mov	r0, r3
 801a916:	f00a fffb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a91a:	2c00      	cmp	r4, #0
 801a91c:	d0a3      	beq.n	801a866 <BUTTON_Callback+0x2e>
 801a91e:	4628      	mov	r0, r5
 801a920:	47a0      	blx	r4
 801a922:	e7a0      	b.n	801a866 <BUTTON_Callback+0x2e>
 801a924:	2900      	cmp	r1, #0
 801a926:	dddd      	ble.n	801a8e4 <BUTTON_Callback+0xac>
 801a928:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a92c:	4628      	mov	r0, r5
 801a92e:	f7fb f943 	bl	8015bb8 <WIDGET_OrState>
 801a932:	4628      	mov	r0, r5
 801a934:	f00a ffda 	bl	80258ec <GUI_ALLOC_LockH>
 801a938:	ac02      	add	r4, sp, #8
 801a93a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801a93c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a940:	4620      	mov	r0, r4
 801a942:	f00a ffe5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a946:	07b1      	lsls	r1, r6, #30
 801a948:	d503      	bpl.n	801a952 <BUTTON_Callback+0x11a>
 801a94a:	4628      	mov	r0, r5
 801a94c:	2101      	movs	r1, #1
 801a94e:	f001 fd5b 	bl	801c408 <WM_NotifyParent>
 801a952:	4628      	mov	r0, r5
 801a954:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a958:	f7fb f94c 	bl	8015bf4 <WIDGET_AndState>
 801a95c:	4628      	mov	r0, r5
 801a95e:	f00a ffc5 	bl	80258ec <GUI_ALLOC_LockH>
 801a962:	4603      	mov	r3, r0
 801a964:	4620      	mov	r0, r4
 801a966:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 801a968:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a96a:	9301      	str	r3, [sp, #4]
 801a96c:	f00a ffd0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a970:	4630      	mov	r0, r6
 801a972:	f008 fd7b 	bl	802346c <GUI_StoreKey>
 801a976:	07a3      	lsls	r3, r4, #30
 801a978:	f57f af75 	bpl.w	801a866 <BUTTON_Callback+0x2e>
 801a97c:	4628      	mov	r0, r5
 801a97e:	2102      	movs	r1, #2
 801a980:	f001 fd42 	bl	801c408 <WM_NotifyParent>
 801a984:	e76f      	b.n	801a866 <BUTTON_Callback+0x2e>
 801a986:	f7fb f935 	bl	8015bf4 <WIDGET_AndState>
 801a98a:	4628      	mov	r0, r5
 801a98c:	f00a ffae 	bl	80258ec <GUI_ALLOC_LockH>
 801a990:	ab02      	add	r3, sp, #8
 801a992:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a994:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a998:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801a99a:	4618      	mov	r0, r3
 801a99c:	e7e6      	b.n	801a96c <BUTTON_Callback+0x134>
 801a99e:	bf00      	nop
 801a9a0:	20000218 	.word	0x20000218
 801a9a4:	2002b150 	.word	0x2002b150

0801a9a8 <_OnTouchDefault>:
 801a9a8:	b570      	push	{r4, r5, r6, lr}
 801a9aa:	b082      	sub	sp, #8
 801a9ac:	460c      	mov	r4, r1
 801a9ae:	4606      	mov	r6, r0
 801a9b0:	f00a ff9c 	bl	80258ec <GUI_ALLOC_LockH>
 801a9b4:	ab02      	add	r3, sp, #8
 801a9b6:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 801a9b8:	f843 0d08 	str.w	r0, [r3, #-8]!
 801a9bc:	4668      	mov	r0, sp
 801a9be:	f00a ffa7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a9c2:	68e3      	ldr	r3, [r4, #12]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d037      	beq.n	801aa38 <_OnTouchDefault+0x90>
 801a9c8:	7a1b      	ldrb	r3, [r3, #8]
 801a9ca:	b91b      	cbnz	r3, 801a9d4 <_OnTouchDefault+0x2c>
 801a9cc:	05e9      	lsls	r1, r5, #23
 801a9ce:	d419      	bmi.n	801aa04 <_OnTouchDefault+0x5c>
 801a9d0:	b002      	add	sp, #8
 801a9d2:	bd70      	pop	{r4, r5, r6, pc}
 801a9d4:	05ec      	lsls	r4, r5, #23
 801a9d6:	d4fb      	bmi.n	801a9d0 <_OnTouchDefault+0x28>
 801a9d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a9dc:	4630      	mov	r0, r6
 801a9de:	f7fb f8eb 	bl	8015bb8 <WIDGET_OrState>
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	f00a ff82 	bl	80258ec <GUI_ALLOC_LockH>
 801a9e8:	ab02      	add	r3, sp, #8
 801a9ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a9ec:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f00a ff8d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801a9f6:	07a0      	lsls	r0, r4, #30
 801a9f8:	d5ea      	bpl.n	801a9d0 <_OnTouchDefault+0x28>
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	2101      	movs	r1, #1
 801a9fe:	f001 fd03 	bl	801c408 <WM_NotifyParent>
 801aa02:	e7e5      	b.n	801a9d0 <_OnTouchDefault+0x28>
 801aa04:	f44f 7180 	mov.w	r1, #256	; 0x100
 801aa08:	4630      	mov	r0, r6
 801aa0a:	f7fb f8f3 	bl	8015bf4 <WIDGET_AndState>
 801aa0e:	4630      	mov	r0, r6
 801aa10:	f00a ff6c 	bl	80258ec <GUI_ALLOC_LockH>
 801aa14:	ab02      	add	r3, sp, #8
 801aa16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801aa18:	f843 0d04 	str.w	r0, [r3, #-4]!
 801aa1c:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f00a ff76 	bl	8025910 <GUI_ALLOC_UnlockH>
 801aa24:	4628      	mov	r0, r5
 801aa26:	f008 fd21 	bl	802346c <GUI_StoreKey>
 801aa2a:	07a2      	lsls	r2, r4, #30
 801aa2c:	d5d0      	bpl.n	801a9d0 <_OnTouchDefault+0x28>
 801aa2e:	4630      	mov	r0, r6
 801aa30:	2102      	movs	r1, #2
 801aa32:	f001 fce9 	bl	801c408 <WM_NotifyParent>
 801aa36:	e7cb      	b.n	801a9d0 <_OnTouchDefault+0x28>
 801aa38:	f44f 7180 	mov.w	r1, #256	; 0x100
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	f7fb f8d9 	bl	8015bf4 <WIDGET_AndState>
 801aa42:	4630      	mov	r0, r6
 801aa44:	f00a ff52 	bl	80258ec <GUI_ALLOC_LockH>
 801aa48:	ab02      	add	r3, sp, #8
 801aa4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801aa4c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801aa50:	4618      	mov	r0, r3
 801aa52:	f00a ff5d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801aa56:	07a3      	lsls	r3, r4, #30
 801aa58:	d5ba      	bpl.n	801a9d0 <_OnTouchDefault+0x28>
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	2103      	movs	r1, #3
 801aa5e:	f001 fcd3 	bl	801c408 <WM_NotifyParent>
 801aa62:	e7b5      	b.n	801a9d0 <_OnTouchDefault+0x28>

0801aa64 <BUTTON_CreateIndirect>:
 801aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa68:	6987      	ldr	r7, [r0, #24]
 801aa6a:	f9b0 b00a 	ldrsh.w	fp, [r0, #10]
 801aa6e:	f9b0 a00c 	ldrsh.w	sl, [r0, #12]
 801aa72:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 801aa76:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 801aa7a:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 801aa7e:	b087      	sub	sp, #28
 801aa80:	4688      	mov	r8, r1
 801aa82:	4493      	add	fp, r2
 801aa84:	449a      	add	sl, r3
 801aa86:	4604      	mov	r4, r0
 801aa88:	f008 fbb0 	bl	80231ec <GUI_Lock>
 801aa8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aa90:	f04f 0e00 	mov.w	lr, #0
 801aa94:	4f31      	ldr	r7, [pc, #196]	; (801ab5c <BUTTON_CreateIndirect+0xf8>)
 801aa96:	9303      	str	r3, [sp, #12]
 801aa98:	9702      	str	r7, [sp, #8]
 801aa9a:	f8cd 8000 	str.w	r8, [sp]
 801aa9e:	4658      	mov	r0, fp
 801aaa0:	4651      	mov	r1, sl
 801aaa2:	4632      	mov	r2, r6
 801aaa4:	462b      	mov	r3, r5
 801aaa6:	f8cd e004 	str.w	lr, [sp, #4]
 801aaaa:	f003 fc05 	bl	801e2b8 <WM_CreateWindowAsChild>
 801aaae:	4607      	mov	r7, r0
 801aab0:	b928      	cbnz	r0, 801aabe <BUTTON_CreateIndirect+0x5a>
 801aab2:	f008 fb91 	bl	80231d8 <GUI_Unlock>
 801aab6:	4638      	mov	r0, r7
 801aab8:	b007      	add	sp, #28
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	f00a ff15 	bl	80258ec <GUI_ALLOC_LockH>
 801aac2:	4e27      	ldr	r6, [pc, #156]	; (801ab60 <BUTTON_CreateIndirect+0xfc>)
 801aac4:	9005      	str	r0, [sp, #20]
 801aac6:	fa0f f189 	sxth.w	r1, r9
 801aaca:	2210      	movs	r2, #16
 801aacc:	f7fa ffe6 	bl	8015a9c <WIDGET__Init>
 801aad0:	f10d 0818 	add.w	r8, sp, #24
 801aad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801aad6:	f858 ed04 	ldr.w	lr, [r8, #-4]!
 801aada:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801ab64 <BUTTON_CreateIndirect+0x100>
 801aade:	f10e 0534 	add.w	r5, lr, #52	; 0x34
 801aae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aae4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801aae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aae8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801aaec:	f8d9 6000 	ldr.w	r6, [r9]
 801aaf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801aaf4:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 801aaf8:	4640      	mov	r0, r8
 801aafa:	f00a ff09 	bl	8025910 <GUI_ALLOC_UnlockH>
 801aafe:	f8d9 3000 	ldr.w	r3, [r9]
 801ab02:	4638      	mov	r0, r7
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	4798      	blx	r3
 801ab08:	f008 fb66 	bl	80231d8 <GUI_Unlock>
 801ab0c:	6865      	ldr	r5, [r4, #4]
 801ab0e:	f008 fb6d 	bl	80231ec <GUI_Lock>
 801ab12:	4638      	mov	r0, r7
 801ab14:	f00a feea 	bl	80258ec <GUI_ALLOC_LockH>
 801ab18:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801ab1a:	9004      	str	r0, [sp, #16]
 801ab1c:	a804      	add	r0, sp, #16
 801ab1e:	9405      	str	r4, [sp, #20]
 801ab20:	f00a fef6 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ab24:	4640      	mov	r0, r8
 801ab26:	4629      	mov	r1, r5
 801ab28:	f007 fc28 	bl	802237c <GUI__SetText>
 801ab2c:	2800      	cmp	r0, #0
 801ab2e:	d0c0      	beq.n	801aab2 <BUTTON_CreateIndirect+0x4e>
 801ab30:	9b05      	ldr	r3, [sp, #20]
 801ab32:	429c      	cmp	r4, r3
 801ab34:	d009      	beq.n	801ab4a <BUTTON_CreateIndirect+0xe6>
 801ab36:	4638      	mov	r0, r7
 801ab38:	f00a fed8 	bl	80258ec <GUI_ALLOC_LockH>
 801ab3c:	9a05      	ldr	r2, [sp, #20]
 801ab3e:	6682      	str	r2, [r0, #104]	; 0x68
 801ab40:	4603      	mov	r3, r0
 801ab42:	a804      	add	r0, sp, #16
 801ab44:	9304      	str	r3, [sp, #16]
 801ab46:	f00a fee3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ab4a:	4638      	mov	r0, r7
 801ab4c:	f003 fb58 	bl	801e200 <WM_InvalidateWindow>
 801ab50:	f008 fb42 	bl	80231d8 <GUI_Unlock>
 801ab54:	4638      	mov	r0, r7
 801ab56:	b007      	add	sp, #28
 801ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab5c:	0801a839 	.word	0x0801a839
 801ab60:	2000021c 	.word	0x2000021c
 801ab64:	2000024c 	.word	0x2000024c

0801ab68 <BUTTON_SetText>:
 801ab68:	b570      	push	{r4, r5, r6, lr}
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	b082      	sub	sp, #8
 801ab6e:	460d      	mov	r5, r1
 801ab70:	b918      	cbnz	r0, 801ab7a <BUTTON_SetText+0x12>
 801ab72:	2501      	movs	r5, #1
 801ab74:	4628      	mov	r0, r5
 801ab76:	b002      	add	sp, #8
 801ab78:	bd70      	pop	{r4, r5, r6, pc}
 801ab7a:	f008 fb37 	bl	80231ec <GUI_Lock>
 801ab7e:	4620      	mov	r0, r4
 801ab80:	f00a feb4 	bl	80258ec <GUI_ALLOC_LockH>
 801ab84:	6e86      	ldr	r6, [r0, #104]	; 0x68
 801ab86:	9000      	str	r0, [sp, #0]
 801ab88:	4668      	mov	r0, sp
 801ab8a:	9601      	str	r6, [sp, #4]
 801ab8c:	f00a fec0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ab90:	4629      	mov	r1, r5
 801ab92:	a801      	add	r0, sp, #4
 801ab94:	f007 fbf2 	bl	802237c <GUI__SetText>
 801ab98:	f1d0 0501 	rsbs	r5, r0, #1
 801ab9c:	bf38      	it	cc
 801ab9e:	2500      	movcc	r5, #0
 801aba0:	b97d      	cbnz	r5, 801abc2 <BUTTON_SetText+0x5a>
 801aba2:	9b01      	ldr	r3, [sp, #4]
 801aba4:	42b3      	cmp	r3, r6
 801aba6:	d009      	beq.n	801abbc <BUTTON_SetText+0x54>
 801aba8:	4620      	mov	r0, r4
 801abaa:	f00a fe9f 	bl	80258ec <GUI_ALLOC_LockH>
 801abae:	9a01      	ldr	r2, [sp, #4]
 801abb0:	6682      	str	r2, [r0, #104]	; 0x68
 801abb2:	4603      	mov	r3, r0
 801abb4:	4668      	mov	r0, sp
 801abb6:	9300      	str	r3, [sp, #0]
 801abb8:	f00a feaa 	bl	8025910 <GUI_ALLOC_UnlockH>
 801abbc:	4620      	mov	r0, r4
 801abbe:	f003 fb1f 	bl	801e200 <WM_InvalidateWindow>
 801abc2:	f008 fb09 	bl	80231d8 <GUI_Unlock>
 801abc6:	4628      	mov	r0, r5
 801abc8:	b002      	add	sp, #8
 801abca:	bd70      	pop	{r4, r5, r6, pc}

0801abcc <BUTTON_SetFont>:
 801abcc:	b530      	push	{r4, r5, lr}
 801abce:	4604      	mov	r4, r0
 801abd0:	b083      	sub	sp, #12
 801abd2:	460d      	mov	r5, r1
 801abd4:	b180      	cbz	r0, 801abf8 <BUTTON_SetFont+0x2c>
 801abd6:	f008 fb09 	bl	80231ec <GUI_Lock>
 801abda:	4620      	mov	r0, r4
 801abdc:	f00a fe86 	bl	80258ec <GUI_ALLOC_LockH>
 801abe0:	ab02      	add	r3, sp, #8
 801abe2:	6545      	str	r5, [r0, #84]	; 0x54
 801abe4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801abe8:	4618      	mov	r0, r3
 801abea:	f00a fe91 	bl	8025910 <GUI_ALLOC_UnlockH>
 801abee:	4620      	mov	r0, r4
 801abf0:	f003 fb06 	bl	801e200 <WM_InvalidateWindow>
 801abf4:	f008 faf0 	bl	80231d8 <GUI_Unlock>
 801abf8:	b003      	add	sp, #12
 801abfa:	bd30      	pop	{r4, r5, pc}

0801abfc <WM__ForEachDesc>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	b085      	sub	sp, #20
 801ac02:	460d      	mov	r5, r1
 801ac04:	4614      	mov	r4, r2
 801ac06:	f00a fe67 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac0a:	69c0      	ldr	r0, [r0, #28]
 801ac0c:	9002      	str	r0, [sp, #8]
 801ac0e:	2800      	cmp	r0, #0
 801ac10:	f000 8099 	beq.w	801ad46 <WM__ForEachDesc+0x14a>
 801ac14:	4621      	mov	r1, r4
 801ac16:	47a8      	blx	r5
 801ac18:	9802      	ldr	r0, [sp, #8]
 801ac1a:	f00a fe5d 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac1e:	69c0      	ldr	r0, [r0, #28]
 801ac20:	9003      	str	r0, [sp, #12]
 801ac22:	2800      	cmp	r0, #0
 801ac24:	f000 8087 	beq.w	801ad36 <WM__ForEachDesc+0x13a>
 801ac28:	4621      	mov	r1, r4
 801ac2a:	47a8      	blx	r5
 801ac2c:	9803      	ldr	r0, [sp, #12]
 801ac2e:	f00a fe53 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac32:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801ac36:	f1b8 0f00 	cmp.w	r8, #0
 801ac3a:	d074      	beq.n	801ad26 <WM__ForEachDesc+0x12a>
 801ac3c:	4640      	mov	r0, r8
 801ac3e:	4621      	mov	r1, r4
 801ac40:	47a8      	blx	r5
 801ac42:	4640      	mov	r0, r8
 801ac44:	f00a fe48 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac48:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801ac4c:	f1b9 0f00 	cmp.w	r9, #0
 801ac50:	d061      	beq.n	801ad16 <WM__ForEachDesc+0x11a>
 801ac52:	4648      	mov	r0, r9
 801ac54:	4621      	mov	r1, r4
 801ac56:	47a8      	blx	r5
 801ac58:	4648      	mov	r0, r9
 801ac5a:	f00a fe3d 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac5e:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801ac62:	f1ba 0f00 	cmp.w	sl, #0
 801ac66:	d04e      	beq.n	801ad06 <WM__ForEachDesc+0x10a>
 801ac68:	4650      	mov	r0, sl
 801ac6a:	4621      	mov	r1, r4
 801ac6c:	47a8      	blx	r5
 801ac6e:	4650      	mov	r0, sl
 801ac70:	f00a fe32 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac74:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801ac78:	f1bb 0f00 	cmp.w	fp, #0
 801ac7c:	d03b      	beq.n	801acf6 <WM__ForEachDesc+0xfa>
 801ac7e:	4658      	mov	r0, fp
 801ac80:	4621      	mov	r1, r4
 801ac82:	47a8      	blx	r5
 801ac84:	4658      	mov	r0, fp
 801ac86:	f00a fe27 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac8a:	69c0      	ldr	r0, [r0, #28]
 801ac8c:	9001      	str	r0, [sp, #4]
 801ac8e:	2800      	cmp	r0, #0
 801ac90:	d029      	beq.n	801ace6 <WM__ForEachDesc+0xea>
 801ac92:	4621      	mov	r1, r4
 801ac94:	47a8      	blx	r5
 801ac96:	9801      	ldr	r0, [sp, #4]
 801ac98:	f00a fe1e 	bl	80258d8 <GUI_ALLOC_h2p>
 801ac9c:	69c6      	ldr	r6, [r0, #28]
 801ac9e:	b1de      	cbz	r6, 801acd8 <WM__ForEachDesc+0xdc>
 801aca0:	4630      	mov	r0, r6
 801aca2:	4621      	mov	r1, r4
 801aca4:	47a8      	blx	r5
 801aca6:	4630      	mov	r0, r6
 801aca8:	f00a fe16 	bl	80258d8 <GUI_ALLOC_h2p>
 801acac:	69c7      	ldr	r7, [r0, #28]
 801acae:	b16f      	cbz	r7, 801accc <WM__ForEachDesc+0xd0>
 801acb0:	4638      	mov	r0, r7
 801acb2:	4621      	mov	r1, r4
 801acb4:	47a8      	blx	r5
 801acb6:	4638      	mov	r0, r7
 801acb8:	4629      	mov	r1, r5
 801acba:	4622      	mov	r2, r4
 801acbc:	f7ff ff9e 	bl	801abfc <WM__ForEachDesc>
 801acc0:	4638      	mov	r0, r7
 801acc2:	f00a fe09 	bl	80258d8 <GUI_ALLOC_h2p>
 801acc6:	6a07      	ldr	r7, [r0, #32]
 801acc8:	2f00      	cmp	r7, #0
 801acca:	d1f1      	bne.n	801acb0 <WM__ForEachDesc+0xb4>
 801accc:	4630      	mov	r0, r6
 801acce:	f00a fe03 	bl	80258d8 <GUI_ALLOC_h2p>
 801acd2:	6a06      	ldr	r6, [r0, #32]
 801acd4:	2e00      	cmp	r6, #0
 801acd6:	d1e3      	bne.n	801aca0 <WM__ForEachDesc+0xa4>
 801acd8:	9801      	ldr	r0, [sp, #4]
 801acda:	f00a fdfd 	bl	80258d8 <GUI_ALLOC_h2p>
 801acde:	6a00      	ldr	r0, [r0, #32]
 801ace0:	9001      	str	r0, [sp, #4]
 801ace2:	2800      	cmp	r0, #0
 801ace4:	d1d5      	bne.n	801ac92 <WM__ForEachDesc+0x96>
 801ace6:	4658      	mov	r0, fp
 801ace8:	f00a fdf6 	bl	80258d8 <GUI_ALLOC_h2p>
 801acec:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801acf0:	f1bb 0f00 	cmp.w	fp, #0
 801acf4:	d1c3      	bne.n	801ac7e <WM__ForEachDesc+0x82>
 801acf6:	4650      	mov	r0, sl
 801acf8:	f00a fdee 	bl	80258d8 <GUI_ALLOC_h2p>
 801acfc:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801ad00:	f1ba 0f00 	cmp.w	sl, #0
 801ad04:	d1b0      	bne.n	801ac68 <WM__ForEachDesc+0x6c>
 801ad06:	4648      	mov	r0, r9
 801ad08:	f00a fde6 	bl	80258d8 <GUI_ALLOC_h2p>
 801ad0c:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801ad10:	f1b9 0f00 	cmp.w	r9, #0
 801ad14:	d19d      	bne.n	801ac52 <WM__ForEachDesc+0x56>
 801ad16:	4640      	mov	r0, r8
 801ad18:	f00a fdde 	bl	80258d8 <GUI_ALLOC_h2p>
 801ad1c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801ad20:	f1b8 0f00 	cmp.w	r8, #0
 801ad24:	d18a      	bne.n	801ac3c <WM__ForEachDesc+0x40>
 801ad26:	9803      	ldr	r0, [sp, #12]
 801ad28:	f00a fdd6 	bl	80258d8 <GUI_ALLOC_h2p>
 801ad2c:	6a00      	ldr	r0, [r0, #32]
 801ad2e:	9003      	str	r0, [sp, #12]
 801ad30:	2800      	cmp	r0, #0
 801ad32:	f47f af79 	bne.w	801ac28 <WM__ForEachDesc+0x2c>
 801ad36:	9802      	ldr	r0, [sp, #8]
 801ad38:	f00a fdce 	bl	80258d8 <GUI_ALLOC_h2p>
 801ad3c:	6a00      	ldr	r0, [r0, #32]
 801ad3e:	9002      	str	r0, [sp, #8]
 801ad40:	2800      	cmp	r0, #0
 801ad42:	f47f af67 	bne.w	801ac14 <WM__ForEachDesc+0x18>
 801ad46:	b005      	add	sp, #20
 801ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad4c <WM__GetFocusedChild>:
 801ad4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad4e:	4d10      	ldr	r5, [pc, #64]	; (801ad90 <WM__GetFocusedChild+0x44>)
 801ad50:	4c10      	ldr	r4, [pc, #64]	; (801ad94 <WM__GetFocusedChild+0x48>)
 801ad52:	682b      	ldr	r3, [r5, #0]
 801ad54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ad58:	4607      	mov	r7, r0
 801ad5a:	b083      	sub	sp, #12
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	b90b      	cbnz	r3, 801ad64 <WM__GetFocusedChild+0x18>
 801ad60:	b003      	add	sp, #12
 801ad62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad64:	f00a fdc2 	bl	80258ec <GUI_ALLOC_LockH>
 801ad68:	4606      	mov	r6, r0
 801ad6a:	9001      	str	r0, [sp, #4]
 801ad6c:	b158      	cbz	r0, 801ad86 <WM__GetFocusedChild+0x3a>
 801ad6e:	6986      	ldr	r6, [r0, #24]
 801ad70:	a801      	add	r0, sp, #4
 801ad72:	f00a fdcd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ad76:	42b7      	cmp	r7, r6
 801ad78:	bf06      	itte	eq
 801ad7a:	682b      	ldreq	r3, [r5, #0]
 801ad7c:	f854 0023 	ldreq.w	r0, [r4, r3, lsl #2]
 801ad80:	2000      	movne	r0, #0
 801ad82:	b003      	add	sp, #12
 801ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad86:	a801      	add	r0, sp, #4
 801ad88:	f00a fdc2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	e7e7      	b.n	801ad60 <WM__GetFocusedChild+0x14>
 801ad90:	2002cb78 	.word	0x2002cb78
 801ad94:	2002cb68 	.word	0x2002cb68

0801ad98 <WM__GetLastSibling>:
 801ad98:	b510      	push	{r4, lr}
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	b908      	cbnz	r0, 801ada2 <WM__GetLastSibling+0xa>
 801ad9e:	e006      	b.n	801adae <WM__GetLastSibling+0x16>
 801ada0:	461c      	mov	r4, r3
 801ada2:	4620      	mov	r0, r4
 801ada4:	f00a fd98 	bl	80258d8 <GUI_ALLOC_h2p>
 801ada8:	6a03      	ldr	r3, [r0, #32]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d1f8      	bne.n	801ada0 <WM__GetLastSibling+0x8>
 801adae:	4620      	mov	r0, r4
 801adb0:	bd10      	pop	{r4, pc}
 801adb2:	bf00      	nop

0801adb4 <WM__GetPrevSibling>:
 801adb4:	b538      	push	{r3, r4, r5, lr}
 801adb6:	4605      	mov	r5, r0
 801adb8:	f001 f994 	bl	801c0e4 <WM_GetParent>
 801adbc:	b910      	cbnz	r0, 801adc4 <WM__GetPrevSibling+0x10>
 801adbe:	2400      	movs	r4, #0
 801adc0:	4620      	mov	r0, r4
 801adc2:	bd38      	pop	{r3, r4, r5, pc}
 801adc4:	f00a fd88 	bl	80258d8 <GUI_ALLOC_h2p>
 801adc8:	69c4      	ldr	r4, [r0, #28]
 801adca:	2c00      	cmp	r4, #0
 801adcc:	d0f7      	beq.n	801adbe <WM__GetPrevSibling+0xa>
 801adce:	42a5      	cmp	r5, r4
 801add0:	d103      	bne.n	801adda <WM__GetPrevSibling+0x26>
 801add2:	e7f4      	b.n	801adbe <WM__GetPrevSibling+0xa>
 801add4:	2b00      	cmp	r3, #0
 801add6:	d0f2      	beq.n	801adbe <WM__GetPrevSibling+0xa>
 801add8:	461c      	mov	r4, r3
 801adda:	4620      	mov	r0, r4
 801addc:	f00a fd7c 	bl	80258d8 <GUI_ALLOC_h2p>
 801ade0:	6a03      	ldr	r3, [r0, #32]
 801ade2:	42ab      	cmp	r3, r5
 801ade4:	d1f6      	bne.n	801add4 <WM__GetPrevSibling+0x20>
 801ade6:	4620      	mov	r0, r4
 801ade8:	bd38      	pop	{r3, r4, r5, pc}
 801adea:	bf00      	nop

0801adec <WM__IsAncestor>:
 801adec:	b510      	push	{r4, lr}
 801adee:	460c      	mov	r4, r1
 801adf0:	b138      	cbz	r0, 801ae02 <WM__IsAncestor+0x16>
 801adf2:	b131      	cbz	r1, 801ae02 <WM__IsAncestor+0x16>
 801adf4:	f00a fd70 	bl	80258d8 <GUI_ALLOC_h2p>
 801adf8:	6980      	ldr	r0, [r0, #24]
 801adfa:	42a0      	cmp	r0, r4
 801adfc:	d003      	beq.n	801ae06 <WM__IsAncestor+0x1a>
 801adfe:	2800      	cmp	r0, #0
 801ae00:	d1f8      	bne.n	801adf4 <WM__IsAncestor+0x8>
 801ae02:	2000      	movs	r0, #0
 801ae04:	bd10      	pop	{r4, pc}
 801ae06:	2001      	movs	r0, #1
 801ae08:	bd10      	pop	{r4, pc}
 801ae0a:	bf00      	nop

0801ae0c <WM__IsAncestorOrSelf>:
 801ae0c:	4288      	cmp	r0, r1
 801ae0e:	b510      	push	{r4, lr}
 801ae10:	460c      	mov	r4, r1
 801ae12:	d00a      	beq.n	801ae2a <WM__IsAncestorOrSelf+0x1e>
 801ae14:	b138      	cbz	r0, 801ae26 <WM__IsAncestorOrSelf+0x1a>
 801ae16:	b131      	cbz	r1, 801ae26 <WM__IsAncestorOrSelf+0x1a>
 801ae18:	f00a fd5e 	bl	80258d8 <GUI_ALLOC_h2p>
 801ae1c:	6980      	ldr	r0, [r0, #24]
 801ae1e:	4284      	cmp	r4, r0
 801ae20:	d003      	beq.n	801ae2a <WM__IsAncestorOrSelf+0x1e>
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d1f8      	bne.n	801ae18 <WM__IsAncestorOrSelf+0xc>
 801ae26:	2000      	movs	r0, #0
 801ae28:	bd10      	pop	{r4, pc}
 801ae2a:	2001      	movs	r0, #1
 801ae2c:	bd10      	pop	{r4, pc}
 801ae2e:	bf00      	nop

0801ae30 <WM__IsEnabled>:
 801ae30:	b508      	push	{r3, lr}
 801ae32:	f00a fd51 	bl	80258d8 <GUI_ALLOC_h2p>
 801ae36:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ae38:	f080 0010 	eor.w	r0, r0, #16
 801ae3c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801ae40:	bd08      	pop	{r3, pc}
 801ae42:	bf00      	nop

0801ae44 <WM__Screen2Client>:
 801ae44:	4603      	mov	r3, r0
 801ae46:	4608      	mov	r0, r1
 801ae48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ae4c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ae50:	4252      	negs	r2, r2
 801ae52:	4249      	negs	r1, r1
 801ae54:	f009 bbd0 	b.w	80245f8 <GUI_MoveRect>

0801ae58 <WM__SendMessage>:
 801ae58:	b570      	push	{r4, r5, r6, lr}
 801ae5a:	4c0d      	ldr	r4, [pc, #52]	; (801ae90 <WM__SendMessage+0x38>)
 801ae5c:	6823      	ldr	r3, [r4, #0]
 801ae5e:	2b13      	cmp	r3, #19
 801ae60:	460d      	mov	r5, r1
 801ae62:	4606      	mov	r6, r0
 801ae64:	dd00      	ble.n	801ae68 <WM__SendMessage+0x10>
 801ae66:	bd70      	pop	{r4, r5, r6, pc}
 801ae68:	f00a fd36 	bl	80258d8 <GUI_ALLOC_h2p>
 801ae6c:	6903      	ldr	r3, [r0, #16]
 801ae6e:	606e      	str	r6, [r5, #4]
 801ae70:	b143      	cbz	r3, 801ae84 <WM__SendMessage+0x2c>
 801ae72:	6822      	ldr	r2, [r4, #0]
 801ae74:	4628      	mov	r0, r5
 801ae76:	3201      	adds	r2, #1
 801ae78:	6022      	str	r2, [r4, #0]
 801ae7a:	4798      	blx	r3
 801ae7c:	6823      	ldr	r3, [r4, #0]
 801ae7e:	3b01      	subs	r3, #1
 801ae80:	6023      	str	r3, [r4, #0]
 801ae82:	bd70      	pop	{r4, r5, r6, pc}
 801ae84:	4628      	mov	r0, r5
 801ae86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae8a:	f003 bf1f 	b.w	801eccc <WM_DefaultProc>
 801ae8e:	bf00      	nop
 801ae90:	2002b154 	.word	0x2002b154

0801ae94 <WM__SendMessageNoPara>:
 801ae94:	b530      	push	{r4, r5, lr}
 801ae96:	b085      	sub	sp, #20
 801ae98:	2300      	movs	r3, #0
 801ae9a:	9300      	str	r3, [sp, #0]
 801ae9c:	9301      	str	r3, [sp, #4]
 801ae9e:	9302      	str	r3, [sp, #8]
 801aea0:	9303      	str	r3, [sp, #12]
 801aea2:	460d      	mov	r5, r1
 801aea4:	4604      	mov	r4, r0
 801aea6:	f00a fd17 	bl	80258d8 <GUI_ALLOC_h2p>
 801aeaa:	6903      	ldr	r3, [r0, #16]
 801aeac:	b12b      	cbz	r3, 801aeba <WM__SendMessageNoPara+0x26>
 801aeae:	a804      	add	r0, sp, #16
 801aeb0:	9401      	str	r4, [sp, #4]
 801aeb2:	f840 5d10 	str.w	r5, [r0, #-16]!
 801aeb6:	4668      	mov	r0, sp
 801aeb8:	4798      	blx	r3
 801aeba:	b005      	add	sp, #20
 801aebc:	bd30      	pop	{r4, r5, pc}
 801aebe:	bf00      	nop

0801aec0 <WM__UpdateChildPositions>:
 801aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec4:	69c4      	ldr	r4, [r0, #28]
 801aec6:	b08b      	sub	sp, #44	; 0x2c
 801aec8:	9106      	str	r1, [sp, #24]
 801aeca:	9202      	str	r2, [sp, #8]
 801aecc:	9307      	str	r3, [sp, #28]
 801aece:	2c00      	cmp	r4, #0
 801aed0:	f000 808b 	beq.w	801afea <WM__UpdateChildPositions+0x12a>
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	9303      	str	r3, [sp, #12]
 801aed8:	b28b      	uxth	r3, r1
 801aeda:	9304      	str	r3, [sp, #16]
 801aedc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aede:	b29b      	uxth	r3, r3
 801aee0:	9305      	str	r3, [sp, #20]
 801aee2:	e046      	b.n	801af72 <WM__UpdateChildPositions+0xb2>
 801aee4:	9e06      	ldr	r6, [sp, #24]
 801aee6:	9b07      	ldr	r3, [sp, #28]
 801aee8:	442e      	add	r6, r5
 801aeea:	443b      	add	r3, r7
 801aeec:	b2b6      	uxth	r6, r6
 801aeee:	fa1f fb83 	uxth.w	fp, r3
 801aef2:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801aef6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801aefa:	d058      	beq.n	801afae <WM__UpdateChildPositions+0xee>
 801aefc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801af00:	d160      	bne.n	801afc4 <WM__UpdateChildPositions+0x104>
 801af02:	f8dd a008 	ldr.w	sl, [sp, #8]
 801af06:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801af0a:	44ca      	add	sl, r9
 801af0c:	44c4      	add	ip, r8
 801af0e:	fa1f fa8a 	uxth.w	sl, sl
 801af12:	fa1f fc8c 	uxth.w	ip, ip
 801af16:	b236      	sxth	r6, r6
 801af18:	b22d      	sxth	r5, r5
 801af1a:	fa0f fa8a 	sxth.w	sl, sl
 801af1e:	fa0f f989 	sxth.w	r9, r9
 801af22:	1b71      	subs	r1, r6, r5
 801af24:	ebc9 020a 	rsb	r2, r9, sl
 801af28:	d100      	bne.n	801af2c <WM__UpdateChildPositions+0x6c>
 801af2a:	b132      	cbz	r2, 801af3a <WM__UpdateChildPositions+0x7a>
 801af2c:	4620      	mov	r0, r4
 801af2e:	f8cd c004 	str.w	ip, [sp, #4]
 801af32:	f000 fc0f 	bl	801b754 <WM_MoveWindow>
 801af36:	f8dd c004 	ldr.w	ip, [sp, #4]
 801af3a:	fa0f f38b 	sxth.w	r3, fp
 801af3e:	b23f      	sxth	r7, r7
 801af40:	fa0f fc8c 	sxth.w	ip, ip
 801af44:	fa0f f888 	sxth.w	r8, r8
 801af48:	1b9e      	subs	r6, r3, r6
 801af4a:	1bed      	subs	r5, r5, r7
 801af4c:	ebca 0a0c 	rsb	sl, sl, ip
 801af50:	ebc8 0909 	rsb	r9, r8, r9
 801af54:	1971      	adds	r1, r6, r5
 801af56:	eb0a 0209 	add.w	r2, sl, r9
 801af5a:	d100      	bne.n	801af5e <WM__UpdateChildPositions+0x9e>
 801af5c:	b112      	cbz	r2, 801af64 <WM__UpdateChildPositions+0xa4>
 801af5e:	4620      	mov	r0, r4
 801af60:	f001 fa98 	bl	801c494 <WM_ResizeWindow>
 801af64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af66:	6a1c      	ldr	r4, [r3, #32]
 801af68:	a809      	add	r0, sp, #36	; 0x24
 801af6a:	f00a fcd1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801af6e:	2c00      	cmp	r4, #0
 801af70:	d03b      	beq.n	801afea <WM__UpdateChildPositions+0x12a>
 801af72:	4620      	mov	r0, r4
 801af74:	f00a fcba 	bl	80258ec <GUI_ALLOC_LockH>
 801af78:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801af7a:	9009      	str	r0, [sp, #36]	; 0x24
 801af7c:	f402 7320 	and.w	r3, r2, #640	; 0x280
 801af80:	2b80      	cmp	r3, #128	; 0x80
 801af82:	8805      	ldrh	r5, [r0, #0]
 801af84:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 801af88:	8887      	ldrh	r7, [r0, #4]
 801af8a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 801af8e:	d024      	beq.n	801afda <WM__UpdateChildPositions+0x11a>
 801af90:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801af94:	d0a6      	beq.n	801aee4 <WM__UpdateChildPositions+0x24>
 801af96:	9e04      	ldr	r6, [sp, #16]
 801af98:	9b04      	ldr	r3, [sp, #16]
 801af9a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801af9e:	442e      	add	r6, r5
 801afa0:	443b      	add	r3, r7
 801afa2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801afa6:	b2b6      	uxth	r6, r6
 801afa8:	fa1f fb83 	uxth.w	fp, r3
 801afac:	d1a6      	bne.n	801aefc <WM__UpdateChildPositions+0x3c>
 801afae:	f8dd a014 	ldr.w	sl, [sp, #20]
 801afb2:	f8dd c014 	ldr.w	ip, [sp, #20]
 801afb6:	44ca      	add	sl, r9
 801afb8:	44c4      	add	ip, r8
 801afba:	fa1f fa8a 	uxth.w	sl, sl
 801afbe:	fa1f fc8c 	uxth.w	ip, ip
 801afc2:	e7a8      	b.n	801af16 <WM__UpdateChildPositions+0x56>
 801afc4:	9802      	ldr	r0, [sp, #8]
 801afc6:	fa1f fc80 	uxth.w	ip, r0
 801afca:	eb0c 0a09 	add.w	sl, ip, r9
 801afce:	44c4      	add	ip, r8
 801afd0:	fa1f fa8a 	uxth.w	sl, sl
 801afd4:	fa1f fc8c 	uxth.w	ip, ip
 801afd8:	e79d      	b.n	801af16 <WM__UpdateChildPositions+0x56>
 801afda:	9e03      	ldr	r6, [sp, #12]
 801afdc:	9b03      	ldr	r3, [sp, #12]
 801afde:	442e      	add	r6, r5
 801afe0:	443b      	add	r3, r7
 801afe2:	b2b6      	uxth	r6, r6
 801afe4:	fa1f fb83 	uxth.w	fp, r3
 801afe8:	e783      	b.n	801aef2 <WM__UpdateChildPositions+0x32>
 801afea:	b00b      	add	sp, #44	; 0x2c
 801afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aff0 <WM__AddCriticalHandle>:
 801aff0:	4b02      	ldr	r3, [pc, #8]	; (801affc <WM__AddCriticalHandle+0xc>)
 801aff2:	681a      	ldr	r2, [r3, #0]
 801aff4:	6002      	str	r2, [r0, #0]
 801aff6:	6018      	str	r0, [r3, #0]
 801aff8:	4770      	bx	lr
 801affa:	bf00      	nop
 801affc:	2002cb94 	.word	0x2002cb94

0801b000 <WM__GetClientRectEx>:
 801b000:	b530      	push	{r4, r5, lr}
 801b002:	460c      	mov	r4, r1
 801b004:	b083      	sub	sp, #12
 801b006:	b158      	cbz	r0, 801b020 <WM__GetClientRectEx+0x20>
 801b008:	b151      	cbz	r1, 801b020 <WM__GetClientRectEx+0x20>
 801b00a:	f00a fc6f 	bl	80258ec <GUI_ALLOC_LockH>
 801b00e:	ad02      	add	r5, sp, #8
 801b010:	4621      	mov	r1, r4
 801b012:	f845 0d04 	str.w	r0, [r5, #-4]!
 801b016:	f003 f81d 	bl	801e054 <WM__GetClientRectWin>
 801b01a:	4628      	mov	r0, r5
 801b01c:	f00a fc78 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b020:	b003      	add	sp, #12
 801b022:	bd30      	pop	{r4, r5, pc}

0801b024 <_cbTimer>:
 801b024:	b510      	push	{r4, lr}
 801b026:	4604      	mov	r4, r0
 801b028:	b084      	sub	sp, #16
 801b02a:	6840      	ldr	r0, [r0, #4]
 801b02c:	2300      	movs	r3, #0
 801b02e:	9300      	str	r3, [sp, #0]
 801b030:	9301      	str	r3, [sp, #4]
 801b032:	9302      	str	r3, [sp, #8]
 801b034:	9303      	str	r3, [sp, #12]
 801b036:	b150      	cbz	r0, 801b04e <_cbTimer+0x2a>
 801b038:	f00a fc4e 	bl	80258d8 <GUI_ALLOC_h2p>
 801b03c:	6863      	ldr	r3, [r4, #4]
 801b03e:	6840      	ldr	r0, [r0, #4]
 801b040:	9303      	str	r3, [sp, #12]
 801b042:	4669      	mov	r1, sp
 801b044:	f240 1313 	movw	r3, #275	; 0x113
 801b048:	9300      	str	r3, [sp, #0]
 801b04a:	f002 ffe7 	bl	801e01c <WM_SendMessage>
 801b04e:	b004      	add	sp, #16
 801b050:	bd10      	pop	{r4, pc}
 801b052:	bf00      	nop

0801b054 <WM__DeleteAssocTimer>:
 801b054:	b570      	push	{r4, r5, r6, lr}
 801b056:	b082      	sub	sp, #8
 801b058:	4605      	mov	r5, r0
 801b05a:	f008 f8c7 	bl	80231ec <GUI_Lock>
 801b05e:	4668      	mov	r0, sp
 801b060:	f007 ff02 	bl	8022e68 <GUI_TIMER__GetFirstTimer>
 801b064:	4604      	mov	r4, r0
 801b066:	b174      	cbz	r4, 801b086 <WM__DeleteAssocTimer+0x32>
 801b068:	2101      	movs	r1, #1
 801b06a:	4620      	mov	r0, r4
 801b06c:	f008 f848 	bl	8023100 <GUI_TIMER_GetFlag>
 801b070:	9b00      	ldr	r3, [sp, #0]
 801b072:	4602      	mov	r2, r0
 801b074:	4669      	mov	r1, sp
 801b076:	4620      	mov	r0, r4
 801b078:	b103      	cbz	r3, 801b07c <WM__DeleteAssocTimer+0x28>
 801b07a:	b942      	cbnz	r2, 801b08e <WM__DeleteAssocTimer+0x3a>
 801b07c:	f007 ff0c 	bl	8022e98 <GUI_TIMER__GetNextTimerLin>
 801b080:	4604      	mov	r4, r0
 801b082:	2c00      	cmp	r4, #0
 801b084:	d1f0      	bne.n	801b068 <WM__DeleteAssocTimer+0x14>
 801b086:	f008 f8a7 	bl	80231d8 <GUI_Unlock>
 801b08a:	b002      	add	sp, #8
 801b08c:	bd70      	pop	{r4, r5, r6, pc}
 801b08e:	4618      	mov	r0, r3
 801b090:	f00a fc22 	bl	80258d8 <GUI_ALLOC_h2p>
 801b094:	6843      	ldr	r3, [r0, #4]
 801b096:	42ab      	cmp	r3, r5
 801b098:	d005      	beq.n	801b0a6 <WM__DeleteAssocTimer+0x52>
 801b09a:	4620      	mov	r0, r4
 801b09c:	4669      	mov	r1, sp
 801b09e:	f007 fefb 	bl	8022e98 <GUI_TIMER__GetNextTimerLin>
 801b0a2:	4604      	mov	r4, r0
 801b0a4:	e7df      	b.n	801b066 <WM__DeleteAssocTimer+0x12>
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	4669      	mov	r1, sp
 801b0aa:	9e00      	ldr	r6, [sp, #0]
 801b0ac:	f007 fef4 	bl	8022e98 <GUI_TIMER__GetNextTimerLin>
 801b0b0:	4604      	mov	r4, r0
 801b0b2:	2e00      	cmp	r6, #0
 801b0b4:	d0d7      	beq.n	801b066 <WM__DeleteAssocTimer+0x12>
 801b0b6:	f008 f899 	bl	80231ec <GUI_Lock>
 801b0ba:	4630      	mov	r0, r6
 801b0bc:	f00a fc16 	bl	80258ec <GUI_ALLOC_LockH>
 801b0c0:	9001      	str	r0, [sp, #4]
 801b0c2:	6800      	ldr	r0, [r0, #0]
 801b0c4:	f007 ff5e 	bl	8022f84 <GUI_TIMER_Delete>
 801b0c8:	a801      	add	r0, sp, #4
 801b0ca:	f00a fc21 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f00a fd1e 	bl	8025b10 <GUI_ALLOC_Free>
 801b0d4:	f008 f880 	bl	80231d8 <GUI_Unlock>
 801b0d8:	e7c5      	b.n	801b066 <WM__DeleteAssocTimer+0x12>
 801b0da:	bf00      	nop

0801b0dc <WM_DeleteTimer>:
 801b0dc:	b530      	push	{r4, r5, lr}
 801b0de:	4604      	mov	r4, r0
 801b0e0:	b083      	sub	sp, #12
 801b0e2:	b198      	cbz	r0, 801b10c <WM_DeleteTimer+0x30>
 801b0e4:	f008 f882 	bl	80231ec <GUI_Lock>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f00a fbff 	bl	80258ec <GUI_ALLOC_LockH>
 801b0ee:	ad02      	add	r5, sp, #8
 801b0f0:	4603      	mov	r3, r0
 801b0f2:	6800      	ldr	r0, [r0, #0]
 801b0f4:	f845 3d04 	str.w	r3, [r5, #-4]!
 801b0f8:	f007 ff44 	bl	8022f84 <GUI_TIMER_Delete>
 801b0fc:	4628      	mov	r0, r5
 801b0fe:	f00a fc07 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b102:	4620      	mov	r0, r4
 801b104:	f00a fd04 	bl	8025b10 <GUI_ALLOC_Free>
 801b108:	f008 f866 	bl	80231d8 <GUI_Unlock>
 801b10c:	b003      	add	sp, #12
 801b10e:	bd30      	pop	{r4, r5, pc}

0801b110 <WM_CreateTimer>:
 801b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b114:	b082      	sub	sp, #8
 801b116:	4680      	mov	r8, r0
 801b118:	460f      	mov	r7, r1
 801b11a:	4615      	mov	r5, r2
 801b11c:	f008 f866 	bl	80231ec <GUI_Lock>
 801b120:	200c      	movs	r0, #12
 801b122:	f00a fd6b 	bl	8025bfc <GUI_ALLOC_AllocZero>
 801b126:	4604      	mov	r4, r0
 801b128:	b928      	cbnz	r0, 801b136 <WM_CreateTimer+0x26>
 801b12a:	f008 f855 	bl	80231d8 <GUI_Unlock>
 801b12e:	4620      	mov	r0, r4
 801b130:	b002      	add	sp, #8
 801b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b136:	f008 f801 	bl	802313c <GUI_GetTime>
 801b13a:	4622      	mov	r2, r4
 801b13c:	1941      	adds	r1, r0, r5
 801b13e:	2301      	movs	r3, #1
 801b140:	4812      	ldr	r0, [pc, #72]	; (801b18c <WM_CreateTimer+0x7c>)
 801b142:	f007 fec9 	bl	8022ed8 <GUI_TIMER_Create>
 801b146:	4606      	mov	r6, r0
 801b148:	4620      	mov	r0, r4
 801b14a:	b946      	cbnz	r6, 801b15e <WM_CreateTimer+0x4e>
 801b14c:	f00a fce0 	bl	8025b10 <GUI_ALLOC_Free>
 801b150:	f008 f842 	bl	80231d8 <GUI_Unlock>
 801b154:	4634      	mov	r4, r6
 801b156:	4620      	mov	r0, r4
 801b158:	b002      	add	sp, #8
 801b15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b15e:	f00a fbc5 	bl	80258ec <GUI_ALLOC_LockH>
 801b162:	4603      	mov	r3, r0
 801b164:	a802      	add	r0, sp, #8
 801b166:	f8c3 8004 	str.w	r8, [r3, #4]
 801b16a:	f840 3d04 	str.w	r3, [r0, #-4]!
 801b16e:	609f      	str	r7, [r3, #8]
 801b170:	601e      	str	r6, [r3, #0]
 801b172:	f00a fbcd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b176:	4630      	mov	r0, r6
 801b178:	4629      	mov	r1, r5
 801b17a:	f007 ff67 	bl	802304c <GUI_TIMER_SetPeriod>
 801b17e:	f008 f82b 	bl	80231d8 <GUI_Unlock>
 801b182:	4620      	mov	r0, r4
 801b184:	b002      	add	sp, #8
 801b186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b18a:	bf00      	nop
 801b18c:	0801b025 	.word	0x0801b025

0801b190 <WM_RestartTimer>:
 801b190:	b530      	push	{r4, r5, lr}
 801b192:	4604      	mov	r4, r0
 801b194:	b083      	sub	sp, #12
 801b196:	460d      	mov	r5, r1
 801b198:	b908      	cbnz	r0, 801b19e <WM_RestartTimer+0xe>
 801b19a:	b003      	add	sp, #12
 801b19c:	bd30      	pop	{r4, r5, pc}
 801b19e:	f008 f825 	bl	80231ec <GUI_Lock>
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	f00a fba2 	bl	80258ec <GUI_ALLOC_LockH>
 801b1a8:	9001      	str	r0, [sp, #4]
 801b1aa:	b94d      	cbnz	r5, 801b1c0 <WM_RestartTimer+0x30>
 801b1ac:	6800      	ldr	r0, [r0, #0]
 801b1ae:	f007 ff63 	bl	8023078 <GUI_TIMER_Restart>
 801b1b2:	a801      	add	r0, sp, #4
 801b1b4:	f00a fbac 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b1b8:	f008 f80e 	bl	80231d8 <GUI_Unlock>
 801b1bc:	b003      	add	sp, #12
 801b1be:	bd30      	pop	{r4, r5, pc}
 801b1c0:	6800      	ldr	r0, [r0, #0]
 801b1c2:	4629      	mov	r1, r5
 801b1c4:	f007 ff42 	bl	802304c <GUI_TIMER_SetPeriod>
 801b1c8:	9801      	ldr	r0, [sp, #4]
 801b1ca:	e7ef      	b.n	801b1ac <WM_RestartTimer+0x1c>

0801b1cc <WM_SetHasTrans>:
 801b1cc:	b530      	push	{r4, r5, lr}
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	b083      	sub	sp, #12
 801b1d2:	f008 f80b 	bl	80231ec <GUI_Lock>
 801b1d6:	b91c      	cbnz	r4, 801b1e0 <WM_SetHasTrans+0x14>
 801b1d8:	f007 fffe 	bl	80231d8 <GUI_Unlock>
 801b1dc:	b003      	add	sp, #12
 801b1de:	bd30      	pop	{r4, r5, pc}
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f00a fb83 	bl	80258ec <GUI_ALLOC_LockH>
 801b1e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b1e8:	9001      	str	r0, [sp, #4]
 801b1ea:	07db      	lsls	r3, r3, #31
 801b1ec:	d506      	bpl.n	801b1fc <WM_SetHasTrans+0x30>
 801b1ee:	a801      	add	r0, sp, #4
 801b1f0:	f00a fb8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b1f4:	f007 fff0 	bl	80231d8 <GUI_Unlock>
 801b1f8:	b003      	add	sp, #12
 801b1fa:	bd30      	pop	{r4, r5, pc}
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f001 fb87 	bl	801c910 <WM_ValidateWindow>
 801b202:	9a01      	ldr	r2, [sp, #4]
 801b204:	4b05      	ldr	r3, [pc, #20]	; (801b21c <WM_SetHasTrans+0x50>)
 801b206:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801b208:	6819      	ldr	r1, [r3, #0]
 801b20a:	f040 0501 	orr.w	r5, r0, #1
 801b20e:	3101      	adds	r1, #1
 801b210:	4620      	mov	r0, r4
 801b212:	6295      	str	r5, [r2, #40]	; 0x28
 801b214:	6019      	str	r1, [r3, #0]
 801b216:	f002 fff3 	bl	801e200 <WM_InvalidateWindow>
 801b21a:	e7e8      	b.n	801b1ee <WM_SetHasTrans+0x22>
 801b21c:	2002cba8 	.word	0x2002cba8

0801b220 <WM_GetHasTrans>:
 801b220:	b510      	push	{r4, lr}
 801b222:	4604      	mov	r4, r0
 801b224:	f007 ffe2 	bl	80231ec <GUI_Lock>
 801b228:	b12c      	cbz	r4, 801b236 <WM_GetHasTrans+0x16>
 801b22a:	4620      	mov	r0, r4
 801b22c:	f00a fb54 	bl	80258d8 <GUI_ALLOC_h2p>
 801b230:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b232:	f004 0401 	and.w	r4, r4, #1
 801b236:	f007 ffcf 	bl	80231d8 <GUI_Unlock>
 801b23a:	4620      	mov	r0, r4
 801b23c:	bd10      	pop	{r4, pc}
 801b23e:	bf00      	nop

0801b240 <WM_SetScrollbarH>:
 801b240:	b570      	push	{r4, r5, r6, lr}
 801b242:	4605      	mov	r5, r0
 801b244:	b082      	sub	sp, #8
 801b246:	460e      	mov	r6, r1
 801b248:	f007 ffd0 	bl	80231ec <GUI_Lock>
 801b24c:	4628      	mov	r0, r5
 801b24e:	21ff      	movs	r1, #255	; 0xff
 801b250:	f000 fd72 	bl	801bd38 <WM_GetDialogItem>
 801b254:	4604      	mov	r4, r0
 801b256:	b15e      	cbz	r6, 801b270 <WM_SetScrollbarH+0x30>
 801b258:	b990      	cbnz	r0, 801b280 <WM_SetScrollbarH+0x40>
 801b25a:	4628      	mov	r0, r5
 801b25c:	4621      	mov	r1, r4
 801b25e:	f00c f9f1 	bl	8027644 <SCROLLBAR_CreateAttached>
 801b262:	f007 ffb9 	bl	80231d8 <GUI_Unlock>
 801b266:	1c20      	adds	r0, r4, #0
 801b268:	bf18      	it	ne
 801b26a:	2001      	movne	r0, #1
 801b26c:	b002      	add	sp, #8
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	2800      	cmp	r0, #0
 801b272:	d0f6      	beq.n	801b262 <WM_SetScrollbarH+0x22>
 801b274:	f001 fb6e 	bl	801c954 <WM_HideWindow>
 801b278:	4620      	mov	r0, r4
 801b27a:	f003 fbc1 	bl	801ea00 <WM__DeleteSecure>
 801b27e:	e7f0      	b.n	801b262 <WM_SetScrollbarH+0x22>
 801b280:	f00a fb34 	bl	80258ec <GUI_ALLOC_LockH>
 801b284:	ab02      	add	r3, sp, #8
 801b286:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b288:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b28c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b290:	f042 0202 	orr.w	r2, r2, #2
 801b294:	6282      	str	r2, [r0, #40]	; 0x28
 801b296:	4618      	mov	r0, r3
 801b298:	f00a fb3a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b29c:	e7e1      	b.n	801b262 <WM_SetScrollbarH+0x22>
 801b29e:	bf00      	nop

0801b2a0 <WM_SetScrollbarV>:
 801b2a0:	b570      	push	{r4, r5, r6, lr}
 801b2a2:	4605      	mov	r5, r0
 801b2a4:	b082      	sub	sp, #8
 801b2a6:	460e      	mov	r6, r1
 801b2a8:	f007 ffa0 	bl	80231ec <GUI_Lock>
 801b2ac:	4628      	mov	r0, r5
 801b2ae:	21fe      	movs	r1, #254	; 0xfe
 801b2b0:	f000 fd42 	bl	801bd38 <WM_GetDialogItem>
 801b2b4:	4604      	mov	r4, r0
 801b2b6:	b15e      	cbz	r6, 801b2d0 <WM_SetScrollbarV+0x30>
 801b2b8:	b990      	cbnz	r0, 801b2e0 <WM_SetScrollbarV+0x40>
 801b2ba:	4628      	mov	r0, r5
 801b2bc:	2108      	movs	r1, #8
 801b2be:	f00c f9c1 	bl	8027644 <SCROLLBAR_CreateAttached>
 801b2c2:	f007 ff89 	bl	80231d8 <GUI_Unlock>
 801b2c6:	1c20      	adds	r0, r4, #0
 801b2c8:	bf18      	it	ne
 801b2ca:	2001      	movne	r0, #1
 801b2cc:	b002      	add	sp, #8
 801b2ce:	bd70      	pop	{r4, r5, r6, pc}
 801b2d0:	2800      	cmp	r0, #0
 801b2d2:	d0f6      	beq.n	801b2c2 <WM_SetScrollbarV+0x22>
 801b2d4:	f001 fb3e 	bl	801c954 <WM_HideWindow>
 801b2d8:	4620      	mov	r0, r4
 801b2da:	f003 fb91 	bl	801ea00 <WM__DeleteSecure>
 801b2de:	e7f0      	b.n	801b2c2 <WM_SetScrollbarV+0x22>
 801b2e0:	f00a fb04 	bl	80258ec <GUI_ALLOC_LockH>
 801b2e4:	ab02      	add	r3, sp, #8
 801b2e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b2e8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b2ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b2f0:	f042 0202 	orr.w	r2, r2, #2
 801b2f4:	6282      	str	r2, [r0, #40]	; 0x28
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f00a fb0a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b2fc:	e7e1      	b.n	801b2c2 <WM_SetScrollbarV+0x22>
 801b2fe:	bf00      	nop

0801b300 <WM_SetFocusOnPrevChild>:
 801b300:	b538      	push	{r3, r4, r5, lr}
 801b302:	4604      	mov	r4, r0
 801b304:	b908      	cbnz	r0, 801b30a <WM_SetFocusOnPrevChild+0xa>
 801b306:	4620      	mov	r0, r4
 801b308:	bd38      	pop	{r3, r4, r5, pc}
 801b30a:	f007 ff6f 	bl	80231ec <GUI_Lock>
 801b30e:	4620      	mov	r0, r4
 801b310:	f7ff fd1c 	bl	801ad4c <WM__GetFocusedChild>
 801b314:	4604      	mov	r4, r0
 801b316:	bb38      	cbnz	r0, 801b368 <WM_SetFocusOnPrevChild+0x68>
 801b318:	4620      	mov	r0, r4
 801b31a:	f7ff fd3d 	bl	801ad98 <WM__GetLastSibling>
 801b31e:	4605      	mov	r5, r0
 801b320:	42ac      	cmp	r4, r5
 801b322:	bf08      	it	eq
 801b324:	2500      	moveq	r5, #0
 801b326:	462c      	mov	r4, r5
 801b328:	e00d      	b.n	801b346 <WM_SetFocusOnPrevChild+0x46>
 801b32a:	4620      	mov	r0, r4
 801b32c:	b184      	cbz	r4, 801b350 <WM_SetFocusOnPrevChild+0x50>
 801b32e:	f7ff fd41 	bl	801adb4 <WM__GetPrevSibling>
 801b332:	b910      	cbnz	r0, 801b33a <WM_SetFocusOnPrevChild+0x3a>
 801b334:	4620      	mov	r0, r4
 801b336:	f7ff fd2f 	bl	801ad98 <WM__GetLastSibling>
 801b33a:	4284      	cmp	r4, r0
 801b33c:	bf08      	it	eq
 801b33e:	2000      	moveq	r0, #0
 801b340:	4285      	cmp	r5, r0
 801b342:	d00f      	beq.n	801b364 <WM_SetFocusOnPrevChild+0x64>
 801b344:	4604      	mov	r4, r0
 801b346:	4620      	mov	r0, r4
 801b348:	f001 f832 	bl	801c3b0 <WM_IsFocusable>
 801b34c:	2800      	cmp	r0, #0
 801b34e:	d0ec      	beq.n	801b32a <WM_SetFocusOnPrevChild+0x2a>
 801b350:	4620      	mov	r0, r4
 801b352:	f001 f8d9 	bl	801c508 <WM_SetFocus>
 801b356:	2800      	cmp	r0, #0
 801b358:	bf18      	it	ne
 801b35a:	2400      	movne	r4, #0
 801b35c:	f007 ff3c 	bl	80231d8 <GUI_Unlock>
 801b360:	4620      	mov	r0, r4
 801b362:	bd38      	pop	{r3, r4, r5, pc}
 801b364:	462c      	mov	r4, r5
 801b366:	e7f3      	b.n	801b350 <WM_SetFocusOnPrevChild+0x50>
 801b368:	f7ff fd24 	bl	801adb4 <WM__GetPrevSibling>
 801b36c:	4605      	mov	r5, r0
 801b36e:	2800      	cmp	r0, #0
 801b370:	d1d6      	bne.n	801b320 <WM_SetFocusOnPrevChild+0x20>
 801b372:	e7d1      	b.n	801b318 <WM_SetFocusOnPrevChild+0x18>

0801b374 <WM_SetFocusOnNextChild>:
 801b374:	b570      	push	{r4, r5, r6, lr}
 801b376:	4606      	mov	r6, r0
 801b378:	b910      	cbnz	r0, 801b380 <WM_SetFocusOnNextChild+0xc>
 801b37a:	4604      	mov	r4, r0
 801b37c:	4620      	mov	r0, r4
 801b37e:	bd70      	pop	{r4, r5, r6, pc}
 801b380:	f007 ff34 	bl	80231ec <GUI_Lock>
 801b384:	4630      	mov	r0, r6
 801b386:	f7ff fce1 	bl	801ad4c <WM__GetFocusedChild>
 801b38a:	4604      	mov	r4, r0
 801b38c:	2800      	cmp	r0, #0
 801b38e:	d135      	bne.n	801b3fc <WM_SetFocusOnNextChild+0x88>
 801b390:	4630      	mov	r0, r6
 801b392:	f00a faa1 	bl	80258d8 <GUI_ALLOC_h2p>
 801b396:	69c5      	ldr	r5, [r0, #28]
 801b398:	42ac      	cmp	r4, r5
 801b39a:	bf08      	it	eq
 801b39c:	2500      	moveq	r5, #0
 801b39e:	462c      	mov	r4, r5
 801b3a0:	e00f      	b.n	801b3c2 <WM_SetFocusOnNextChild+0x4e>
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	b30c      	cbz	r4, 801b3ea <WM_SetFocusOnNextChild+0x76>
 801b3a6:	f00a fa97 	bl	80258d8 <GUI_ALLOC_h2p>
 801b3aa:	6a03      	ldr	r3, [r0, #32]
 801b3ac:	b91b      	cbnz	r3, 801b3b6 <WM_SetFocusOnNextChild+0x42>
 801b3ae:	4630      	mov	r0, r6
 801b3b0:	f00a fa92 	bl	80258d8 <GUI_ALLOC_h2p>
 801b3b4:	69c3      	ldr	r3, [r0, #28]
 801b3b6:	429c      	cmp	r4, r3
 801b3b8:	bf08      	it	eq
 801b3ba:	2300      	moveq	r3, #0
 801b3bc:	429d      	cmp	r5, r3
 801b3be:	d019      	beq.n	801b3f4 <WM_SetFocusOnNextChild+0x80>
 801b3c0:	461c      	mov	r4, r3
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	f000 fff4 	bl	801c3b0 <WM_IsFocusable>
 801b3c8:	2800      	cmp	r0, #0
 801b3ca:	d0ea      	beq.n	801b3a2 <WM_SetFocusOnNextChild+0x2e>
 801b3cc:	b16c      	cbz	r4, 801b3ea <WM_SetFocusOnNextChild+0x76>
 801b3ce:	4d0e      	ldr	r5, [pc, #56]	; (801b408 <WM_SetFocusOnNextChild+0x94>)
 801b3d0:	4620      	mov	r0, r4
 801b3d2:	682e      	ldr	r6, [r5, #0]
 801b3d4:	f003 f86c 	bl	801e4b0 <WM__GetTopLevelLayer>
 801b3d8:	1c42      	adds	r2, r0, #1
 801b3da:	4603      	mov	r3, r0
 801b3dc:	d006      	beq.n	801b3ec <WM_SetFocusOnNextChild+0x78>
 801b3de:	4620      	mov	r0, r4
 801b3e0:	602b      	str	r3, [r5, #0]
 801b3e2:	f001 f891 	bl	801c508 <WM_SetFocus>
 801b3e6:	602e      	str	r6, [r5, #0]
 801b3e8:	b100      	cbz	r0, 801b3ec <WM_SetFocusOnNextChild+0x78>
 801b3ea:	2400      	movs	r4, #0
 801b3ec:	f007 fef4 	bl	80231d8 <GUI_Unlock>
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	bd70      	pop	{r4, r5, r6, pc}
 801b3f4:	462c      	mov	r4, r5
 801b3f6:	2c00      	cmp	r4, #0
 801b3f8:	d1e9      	bne.n	801b3ce <WM_SetFocusOnNextChild+0x5a>
 801b3fa:	e7f6      	b.n	801b3ea <WM_SetFocusOnNextChild+0x76>
 801b3fc:	f00a fa6c 	bl	80258d8 <GUI_ALLOC_h2p>
 801b400:	6a05      	ldr	r5, [r0, #32]
 801b402:	2d00      	cmp	r5, #0
 801b404:	d1c8      	bne.n	801b398 <WM_SetFocusOnNextChild+0x24>
 801b406:	e7c3      	b.n	801b390 <WM_SetFocusOnNextChild+0x1c>
 801b408:	2002cb78 	.word	0x2002cb78

0801b40c <WM_SetCapture>:
 801b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b40e:	4e10      	ldr	r6, [pc, #64]	; (801b450 <WM_SetCapture+0x44>)
 801b410:	4c10      	ldr	r4, [pc, #64]	; (801b454 <WM_SetCapture+0x48>)
 801b412:	b085      	sub	sp, #20
 801b414:	4605      	mov	r5, r0
 801b416:	460f      	mov	r7, r1
 801b418:	f007 fee8 	bl	80231ec <GUI_Lock>
 801b41c:	6833      	ldr	r3, [r6, #0]
 801b41e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b422:	42a8      	cmp	r0, r5
 801b424:	d000      	beq.n	801b428 <WM_SetCapture+0x1c>
 801b426:	b938      	cbnz	r0, 801b438 <WM_SetCapture+0x2c>
 801b428:	4a0b      	ldr	r2, [pc, #44]	; (801b458 <WM_SetCapture+0x4c>)
 801b42a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b42e:	7017      	strb	r7, [r2, #0]
 801b430:	f007 fed2 	bl	80231d8 <GUI_Unlock>
 801b434:	b005      	add	sp, #20
 801b436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b438:	a904      	add	r1, sp, #16
 801b43a:	2318      	movs	r3, #24
 801b43c:	f841 3d10 	str.w	r3, [r1, #-16]!
 801b440:	4669      	mov	r1, sp
 801b442:	f7ff fd09 	bl	801ae58 <WM__SendMessage>
 801b446:	6833      	ldr	r3, [r6, #0]
 801b448:	2200      	movs	r2, #0
 801b44a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801b44e:	e7eb      	b.n	801b428 <WM_SetCapture+0x1c>
 801b450:	2002cb78 	.word	0x2002cb78
 801b454:	2002cb9c 	.word	0x2002cb9c
 801b458:	2002cb7c 	.word	0x2002cb7c

0801b45c <_MoveDescendents>:
 801b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b460:	b0b5      	sub	sp, #212	; 0xd4
 801b462:	2300      	movs	r3, #0
 801b464:	9006      	str	r0, [sp, #24]
 801b466:	468a      	mov	sl, r1
 801b468:	931c      	str	r3, [sp, #112]	; 0x70
 801b46a:	931d      	str	r3, [sp, #116]	; 0x74
 801b46c:	931e      	str	r3, [sp, #120]	; 0x78
 801b46e:	931f      	str	r3, [sp, #124]	; 0x7c
 801b470:	2800      	cmp	r0, #0
 801b472:	f000 8115 	beq.w	801b6a0 <_MoveDescendents+0x244>
 801b476:	9806      	ldr	r0, [sp, #24]
 801b478:	f04f 0b03 	mov.w	fp, #3
 801b47c:	4691      	mov	r9, r2
 801b47e:	f00a fa35 	bl	80258ec <GUI_ALLOC_LockH>
 801b482:	4651      	mov	r1, sl
 801b484:	464a      	mov	r2, r9
 801b486:	900a      	str	r0, [sp, #40]	; 0x28
 801b488:	f009 f8b6 	bl	80245f8 <GUI_MoveRect>
 801b48c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b48e:	4651      	mov	r1, sl
 801b490:	3008      	adds	r0, #8
 801b492:	464a      	mov	r2, r9
 801b494:	f009 f8b0 	bl	80245f8 <GUI_MoveRect>
 801b498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b49a:	a80a      	add	r0, sp, #40	; 0x28
 801b49c:	69da      	ldr	r2, [r3, #28]
 801b49e:	6a1b      	ldr	r3, [r3, #32]
 801b4a0:	9307      	str	r3, [sp, #28]
 801b4a2:	9204      	str	r2, [sp, #16]
 801b4a4:	f00a fa34 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	9320      	str	r3, [sp, #128]	; 0x80
 801b4ac:	9321      	str	r3, [sp, #132]	; 0x84
 801b4ae:	9322      	str	r3, [sp, #136]	; 0x88
 801b4b0:	9323      	str	r3, [sp, #140]	; 0x8c
 801b4b2:	9b04      	ldr	r3, [sp, #16]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f000 80e2 	beq.w	801b67e <_MoveDescendents+0x222>
 801b4ba:	9804      	ldr	r0, [sp, #16]
 801b4bc:	f00a fa16 	bl	80258ec <GUI_ALLOC_LockH>
 801b4c0:	4651      	mov	r1, sl
 801b4c2:	464a      	mov	r2, r9
 801b4c4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b4c6:	f009 f897 	bl	80245f8 <GUI_MoveRect>
 801b4ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b4cc:	4651      	mov	r1, sl
 801b4ce:	3008      	adds	r0, #8
 801b4d0:	464a      	mov	r2, r9
 801b4d2:	f009 f891 	bl	80245f8 <GUI_MoveRect>
 801b4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4d8:	a80b      	add	r0, sp, #44	; 0x2c
 801b4da:	69da      	ldr	r2, [r3, #28]
 801b4dc:	6a1b      	ldr	r3, [r3, #32]
 801b4de:	9308      	str	r3, [sp, #32]
 801b4e0:	9205      	str	r2, [sp, #20]
 801b4e2:	f00a fa15 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	9324      	str	r3, [sp, #144]	; 0x90
 801b4ea:	9325      	str	r3, [sp, #148]	; 0x94
 801b4ec:	9326      	str	r3, [sp, #152]	; 0x98
 801b4ee:	9327      	str	r3, [sp, #156]	; 0x9c
 801b4f0:	9b05      	ldr	r3, [sp, #20]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f000 80b3 	beq.w	801b65e <_MoveDescendents+0x202>
 801b4f8:	9805      	ldr	r0, [sp, #20]
 801b4fa:	464c      	mov	r4, r9
 801b4fc:	f00a f9f6 	bl	80258ec <GUI_ALLOC_LockH>
 801b500:	4651      	mov	r1, sl
 801b502:	4622      	mov	r2, r4
 801b504:	900c      	str	r0, [sp, #48]	; 0x30
 801b506:	f009 f877 	bl	80245f8 <GUI_MoveRect>
 801b50a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b50c:	4651      	mov	r1, sl
 801b50e:	3008      	adds	r0, #8
 801b510:	4622      	mov	r2, r4
 801b512:	f009 f871 	bl	80245f8 <GUI_MoveRect>
 801b516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b518:	a80c      	add	r0, sp, #48	; 0x30
 801b51a:	69da      	ldr	r2, [r3, #28]
 801b51c:	6a1b      	ldr	r3, [r3, #32]
 801b51e:	9309      	str	r3, [sp, #36]	; 0x24
 801b520:	9202      	str	r2, [sp, #8]
 801b522:	f00a f9f5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b526:	2300      	movs	r3, #0
 801b528:	9328      	str	r3, [sp, #160]	; 0xa0
 801b52a:	9329      	str	r3, [sp, #164]	; 0xa4
 801b52c:	932a      	str	r3, [sp, #168]	; 0xa8
 801b52e:	932b      	str	r3, [sp, #172]	; 0xac
 801b530:	9b02      	ldr	r3, [sp, #8]
 801b532:	2b00      	cmp	r3, #0
 801b534:	f000 8082 	beq.w	801b63c <_MoveDescendents+0x1e0>
 801b538:	9802      	ldr	r0, [sp, #8]
 801b53a:	4655      	mov	r5, sl
 801b53c:	f00a f9d6 	bl	80258ec <GUI_ALLOC_LockH>
 801b540:	4629      	mov	r1, r5
 801b542:	4622      	mov	r2, r4
 801b544:	900d      	str	r0, [sp, #52]	; 0x34
 801b546:	f009 f857 	bl	80245f8 <GUI_MoveRect>
 801b54a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b54c:	4629      	mov	r1, r5
 801b54e:	3008      	adds	r0, #8
 801b550:	4622      	mov	r2, r4
 801b552:	f009 f851 	bl	80245f8 <GUI_MoveRect>
 801b556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b558:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b55c:	6a1b      	ldr	r3, [r3, #32]
 801b55e:	9303      	str	r3, [sp, #12]
 801b560:	2700      	movs	r7, #0
 801b562:	a80d      	add	r0, sp, #52	; 0x34
 801b564:	f00a f9d4 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b568:	972c      	str	r7, [sp, #176]	; 0xb0
 801b56a:	972d      	str	r7, [sp, #180]	; 0xb4
 801b56c:	972e      	str	r7, [sp, #184]	; 0xb8
 801b56e:	972f      	str	r7, [sp, #188]	; 0xbc
 801b570:	f1b8 0f00 	cmp.w	r8, #0
 801b574:	d052      	beq.n	801b61c <_MoveDescendents+0x1c0>
 801b576:	4640      	mov	r0, r8
 801b578:	f00a f9b8 	bl	80258ec <GUI_ALLOC_LockH>
 801b57c:	4629      	mov	r1, r5
 801b57e:	4622      	mov	r2, r4
 801b580:	900e      	str	r0, [sp, #56]	; 0x38
 801b582:	f009 f839 	bl	80245f8 <GUI_MoveRect>
 801b586:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b588:	4622      	mov	r2, r4
 801b58a:	4629      	mov	r1, r5
 801b58c:	3008      	adds	r0, #8
 801b58e:	f009 f833 	bl	80245f8 <GUI_MoveRect>
 801b592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b594:	a80e      	add	r0, sp, #56	; 0x38
 801b596:	69de      	ldr	r6, [r3, #28]
 801b598:	6a1b      	ldr	r3, [r3, #32]
 801b59a:	9301      	str	r3, [sp, #4]
 801b59c:	f00a f9b8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	9230      	str	r2, [sp, #192]	; 0xc0
 801b5a4:	9231      	str	r2, [sp, #196]	; 0xc4
 801b5a6:	9232      	str	r2, [sp, #200]	; 0xc8
 801b5a8:	9233      	str	r2, [sp, #204]	; 0xcc
 801b5aa:	af1a      	add	r7, sp, #104	; 0x68
 801b5ac:	b90e      	cbnz	r6, 801b5b2 <_MoveDescendents+0x156>
 801b5ae:	e027      	b.n	801b600 <_MoveDescendents+0x1a4>
 801b5b0:	464e      	mov	r6, r9
 801b5b2:	4630      	mov	r0, r6
 801b5b4:	f00a f99a 	bl	80258ec <GUI_ALLOC_LockH>
 801b5b8:	4629      	mov	r1, r5
 801b5ba:	4622      	mov	r2, r4
 801b5bc:	900f      	str	r0, [sp, #60]	; 0x3c
 801b5be:	f009 f81b 	bl	80245f8 <GUI_MoveRect>
 801b5c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	4622      	mov	r2, r4
 801b5c8:	3008      	adds	r0, #8
 801b5ca:	f009 f815 	bl	80245f8 <GUI_MoveRect>
 801b5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5d0:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 801b5d4:	f8d3 9020 	ldr.w	r9, [r3, #32]
 801b5d8:	a80f      	add	r0, sp, #60	; 0x3c
 801b5da:	f00a f999 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b5de:	4650      	mov	r0, sl
 801b5e0:	4629      	mov	r1, r5
 801b5e2:	4622      	mov	r2, r4
 801b5e4:	f7ff ff3a 	bl	801b45c <_MoveDescendents>
 801b5e8:	4630      	mov	r0, r6
 801b5ea:	a930      	add	r1, sp, #192	; 0xc0
 801b5ec:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 801b5f0:	9733      	str	r7, [sp, #204]	; 0xcc
 801b5f2:	951a      	str	r5, [sp, #104]	; 0x68
 801b5f4:	941b      	str	r4, [sp, #108]	; 0x6c
 801b5f6:	f7ff fc2f 	bl	801ae58 <WM__SendMessage>
 801b5fa:	f1b9 0f00 	cmp.w	r9, #0
 801b5fe:	d1d7      	bne.n	801b5b0 <_MoveDescendents+0x154>
 801b600:	ab18      	add	r3, sp, #96	; 0x60
 801b602:	4640      	mov	r0, r8
 801b604:	a92c      	add	r1, sp, #176	; 0xb0
 801b606:	932f      	str	r3, [sp, #188]	; 0xbc
 801b608:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 801b60c:	9518      	str	r5, [sp, #96]	; 0x60
 801b60e:	9419      	str	r4, [sp, #100]	; 0x64
 801b610:	f7ff fc22 	bl	801ae58 <WM__SendMessage>
 801b614:	9b01      	ldr	r3, [sp, #4]
 801b616:	b10b      	cbz	r3, 801b61c <_MoveDescendents+0x1c0>
 801b618:	4698      	mov	r8, r3
 801b61a:	e7ac      	b.n	801b576 <_MoveDescendents+0x11a>
 801b61c:	aa16      	add	r2, sp, #88	; 0x58
 801b61e:	9802      	ldr	r0, [sp, #8]
 801b620:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 801b624:	a928      	add	r1, sp, #160	; 0xa0
 801b626:	922b      	str	r2, [sp, #172]	; 0xac
 801b628:	9516      	str	r5, [sp, #88]	; 0x58
 801b62a:	9417      	str	r4, [sp, #92]	; 0x5c
 801b62c:	f7ff fc14 	bl	801ae58 <WM__SendMessage>
 801b630:	9b03      	ldr	r3, [sp, #12]
 801b632:	b113      	cbz	r3, 801b63a <_MoveDescendents+0x1de>
 801b634:	9302      	str	r3, [sp, #8]
 801b636:	4618      	mov	r0, r3
 801b638:	e780      	b.n	801b53c <_MoveDescendents+0xe0>
 801b63a:	46aa      	mov	sl, r5
 801b63c:	aa14      	add	r2, sp, #80	; 0x50
 801b63e:	9805      	ldr	r0, [sp, #20]
 801b640:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 801b644:	a924      	add	r1, sp, #144	; 0x90
 801b646:	9227      	str	r2, [sp, #156]	; 0x9c
 801b648:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 801b64c:	9415      	str	r4, [sp, #84]	; 0x54
 801b64e:	f7ff fc03 	bl	801ae58 <WM__SendMessage>
 801b652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b654:	b113      	cbz	r3, 801b65c <_MoveDescendents+0x200>
 801b656:	9305      	str	r3, [sp, #20]
 801b658:	4618      	mov	r0, r3
 801b65a:	e74f      	b.n	801b4fc <_MoveDescendents+0xa0>
 801b65c:	46a1      	mov	r9, r4
 801b65e:	aa12      	add	r2, sp, #72	; 0x48
 801b660:	9804      	ldr	r0, [sp, #16]
 801b662:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 801b666:	a920      	add	r1, sp, #128	; 0x80
 801b668:	9223      	str	r2, [sp, #140]	; 0x8c
 801b66a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 801b66e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801b672:	f7ff fbf1 	bl	801ae58 <WM__SendMessage>
 801b676:	9b08      	ldr	r3, [sp, #32]
 801b678:	b10b      	cbz	r3, 801b67e <_MoveDescendents+0x222>
 801b67a:	9304      	str	r3, [sp, #16]
 801b67c:	e71d      	b.n	801b4ba <_MoveDescendents+0x5e>
 801b67e:	ab10      	add	r3, sp, #64	; 0x40
 801b680:	2203      	movs	r2, #3
 801b682:	9806      	ldr	r0, [sp, #24]
 801b684:	931f      	str	r3, [sp, #124]	; 0x7c
 801b686:	a91c      	add	r1, sp, #112	; 0x70
 801b688:	921c      	str	r2, [sp, #112]	; 0x70
 801b68a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801b68e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 801b692:	f7ff fbe1 	bl	801ae58 <WM__SendMessage>
 801b696:	9b07      	ldr	r3, [sp, #28]
 801b698:	b113      	cbz	r3, 801b6a0 <_MoveDescendents+0x244>
 801b69a:	9306      	str	r3, [sp, #24]
 801b69c:	4618      	mov	r0, r3
 801b69e:	e6ee      	b.n	801b47e <_MoveDescendents+0x22>
 801b6a0:	b035      	add	sp, #212	; 0xd4
 801b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a6:	bf00      	nop

0801b6a8 <WM__MoveWindow>:
 801b6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6ac:	b08b      	sub	sp, #44	; 0x2c
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	4605      	mov	r5, r0
 801b6b2:	460c      	mov	r4, r1
 801b6b4:	4616      	mov	r6, r2
 801b6b6:	9306      	str	r3, [sp, #24]
 801b6b8:	9307      	str	r3, [sp, #28]
 801b6ba:	9308      	str	r3, [sp, #32]
 801b6bc:	9309      	str	r3, [sp, #36]	; 0x24
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d03a      	beq.n	801b738 <WM__MoveWindow+0x90>
 801b6c2:	b909      	cbnz	r1, 801b6c8 <WM__MoveWindow+0x20>
 801b6c4:	2a00      	cmp	r2, #0
 801b6c6:	d037      	beq.n	801b738 <WM__MoveWindow+0x90>
 801b6c8:	4628      	mov	r0, r5
 801b6ca:	f00a f90f 	bl	80258ec <GUI_ALLOC_LockH>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	c803      	ldmia	r0, {r0, r1}
 801b6d2:	f10d 0808 	add.w	r8, sp, #8
 801b6d6:	e888 0003 	stmia.w	r8, {r0, r1}
 801b6da:	4632      	mov	r2, r6
 801b6dc:	4618      	mov	r0, r3
 801b6de:	4621      	mov	r1, r4
 801b6e0:	9301      	str	r3, [sp, #4]
 801b6e2:	f008 ff89 	bl	80245f8 <GUI_MoveRect>
 801b6e6:	9801      	ldr	r0, [sp, #4]
 801b6e8:	af0a      	add	r7, sp, #40	; 0x28
 801b6ea:	4621      	mov	r1, r4
 801b6ec:	4632      	mov	r2, r6
 801b6ee:	3008      	adds	r0, #8
 801b6f0:	f008 ff82 	bl	80245f8 <GUI_MoveRect>
 801b6f4:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801b6f8:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801b6fc:	4638      	mov	r0, r7
 801b6fe:	f00a f907 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b702:	4632      	mov	r2, r6
 801b704:	4648      	mov	r0, r9
 801b706:	4621      	mov	r1, r4
 801b708:	f7ff fea8 	bl	801b45c <_MoveDescendents>
 801b70c:	4628      	mov	r0, r5
 801b70e:	f00a f8ed 	bl	80258ec <GUI_ALLOC_LockH>
 801b712:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b714:	9001      	str	r0, [sp, #4]
 801b716:	0792      	lsls	r2, r2, #30
 801b718:	d501      	bpl.n	801b71e <WM__MoveWindow+0x76>
 801b71a:	6981      	ldr	r1, [r0, #24]
 801b71c:	b979      	cbnz	r1, 801b73e <WM__MoveWindow+0x96>
 801b71e:	4638      	mov	r0, r7
 801b720:	f00a f8f6 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b724:	2203      	movs	r2, #3
 801b726:	ab04      	add	r3, sp, #16
 801b728:	4628      	mov	r0, r5
 801b72a:	a906      	add	r1, sp, #24
 801b72c:	9404      	str	r4, [sp, #16]
 801b72e:	9605      	str	r6, [sp, #20]
 801b730:	9206      	str	r2, [sp, #24]
 801b732:	9309      	str	r3, [sp, #36]	; 0x24
 801b734:	f7ff fb90 	bl	801ae58 <WM__SendMessage>
 801b738:	b00b      	add	sp, #44	; 0x2c
 801b73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b73e:	6a02      	ldr	r2, [r0, #32]
 801b740:	f002 fb8c 	bl	801de5c <WM__InvalidateParent>
 801b744:	9b01      	ldr	r3, [sp, #4]
 801b746:	4640      	mov	r0, r8
 801b748:	6999      	ldr	r1, [r3, #24]
 801b74a:	6a1a      	ldr	r2, [r3, #32]
 801b74c:	f002 fb86 	bl	801de5c <WM__InvalidateParent>
 801b750:	e7e5      	b.n	801b71e <WM__MoveWindow+0x76>
 801b752:	bf00      	nop

0801b754 <WM_MoveWindow>:
 801b754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b758:	b08b      	sub	sp, #44	; 0x2c
 801b75a:	4605      	mov	r5, r0
 801b75c:	460c      	mov	r4, r1
 801b75e:	4616      	mov	r6, r2
 801b760:	f007 fd44 	bl	80231ec <GUI_Lock>
 801b764:	2300      	movs	r3, #0
 801b766:	9306      	str	r3, [sp, #24]
 801b768:	9307      	str	r3, [sp, #28]
 801b76a:	9308      	str	r3, [sp, #32]
 801b76c:	9309      	str	r3, [sp, #36]	; 0x24
 801b76e:	2d00      	cmp	r5, #0
 801b770:	d03a      	beq.n	801b7e8 <WM_MoveWindow+0x94>
 801b772:	b90c      	cbnz	r4, 801b778 <WM_MoveWindow+0x24>
 801b774:	2e00      	cmp	r6, #0
 801b776:	d037      	beq.n	801b7e8 <WM_MoveWindow+0x94>
 801b778:	4628      	mov	r0, r5
 801b77a:	f00a f8b7 	bl	80258ec <GUI_ALLOC_LockH>
 801b77e:	4603      	mov	r3, r0
 801b780:	c803      	ldmia	r0, {r0, r1}
 801b782:	f10d 0808 	add.w	r8, sp, #8
 801b786:	e888 0003 	stmia.w	r8, {r0, r1}
 801b78a:	4632      	mov	r2, r6
 801b78c:	4618      	mov	r0, r3
 801b78e:	4621      	mov	r1, r4
 801b790:	9301      	str	r3, [sp, #4]
 801b792:	f008 ff31 	bl	80245f8 <GUI_MoveRect>
 801b796:	9801      	ldr	r0, [sp, #4]
 801b798:	af0a      	add	r7, sp, #40	; 0x28
 801b79a:	4621      	mov	r1, r4
 801b79c:	4632      	mov	r2, r6
 801b79e:	3008      	adds	r0, #8
 801b7a0:	f008 ff2a 	bl	80245f8 <GUI_MoveRect>
 801b7a4:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801b7a8:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801b7ac:	4638      	mov	r0, r7
 801b7ae:	f00a f8af 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b7b2:	4632      	mov	r2, r6
 801b7b4:	4648      	mov	r0, r9
 801b7b6:	4621      	mov	r1, r4
 801b7b8:	f7ff fe50 	bl	801b45c <_MoveDescendents>
 801b7bc:	4628      	mov	r0, r5
 801b7be:	f00a f895 	bl	80258ec <GUI_ALLOC_LockH>
 801b7c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b7c4:	9001      	str	r0, [sp, #4]
 801b7c6:	0792      	lsls	r2, r2, #30
 801b7c8:	d501      	bpl.n	801b7ce <WM_MoveWindow+0x7a>
 801b7ca:	6981      	ldr	r1, [r0, #24]
 801b7cc:	b989      	cbnz	r1, 801b7f2 <WM_MoveWindow+0x9e>
 801b7ce:	4638      	mov	r0, r7
 801b7d0:	f00a f89e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b7d4:	2203      	movs	r2, #3
 801b7d6:	ab04      	add	r3, sp, #16
 801b7d8:	4628      	mov	r0, r5
 801b7da:	a906      	add	r1, sp, #24
 801b7dc:	9404      	str	r4, [sp, #16]
 801b7de:	9605      	str	r6, [sp, #20]
 801b7e0:	9206      	str	r2, [sp, #24]
 801b7e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b7e4:	f7ff fb38 	bl	801ae58 <WM__SendMessage>
 801b7e8:	f007 fcf6 	bl	80231d8 <GUI_Unlock>
 801b7ec:	b00b      	add	sp, #44	; 0x2c
 801b7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7f2:	6a02      	ldr	r2, [r0, #32]
 801b7f4:	f002 fb32 	bl	801de5c <WM__InvalidateParent>
 801b7f8:	9b01      	ldr	r3, [sp, #4]
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	6999      	ldr	r1, [r3, #24]
 801b7fe:	6a1a      	ldr	r2, [r3, #32]
 801b800:	f002 fb2c 	bl	801de5c <WM__InvalidateParent>
 801b804:	e7e3      	b.n	801b7ce <WM_MoveWindow+0x7a>
 801b806:	bf00      	nop

0801b808 <WM_MoveTo>:
 801b808:	b570      	push	{r4, r5, r6, lr}
 801b80a:	4604      	mov	r4, r0
 801b80c:	b082      	sub	sp, #8
 801b80e:	460e      	mov	r6, r1
 801b810:	4615      	mov	r5, r2
 801b812:	f007 fceb 	bl	80231ec <GUI_Lock>
 801b816:	b19c      	cbz	r4, 801b840 <WM_MoveTo+0x38>
 801b818:	4620      	mov	r0, r4
 801b81a:	f00a f867 	bl	80258ec <GUI_ALLOC_LockH>
 801b81e:	ab02      	add	r3, sp, #8
 801b820:	f9b0 1000 	ldrsh.w	r1, [r0]
 801b824:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b828:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b82c:	1a76      	subs	r6, r6, r1
 801b82e:	1aad      	subs	r5, r5, r2
 801b830:	4618      	mov	r0, r3
 801b832:	f00a f86d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b836:	4620      	mov	r0, r4
 801b838:	4631      	mov	r1, r6
 801b83a:	462a      	mov	r2, r5
 801b83c:	f7ff ff34 	bl	801b6a8 <WM__MoveWindow>
 801b840:	f007 fcca 	bl	80231d8 <GUI_Unlock>
 801b844:	b002      	add	sp, #8
 801b846:	bd70      	pop	{r4, r5, r6, pc}

0801b848 <WM_ResizeWindow.part.7>:
 801b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b84c:	4606      	mov	r6, r0
 801b84e:	b08a      	sub	sp, #40	; 0x28
 801b850:	460f      	mov	r7, r1
 801b852:	4690      	mov	r8, r2
 801b854:	f007 fcca 	bl	80231ec <GUI_Lock>
 801b858:	4630      	mov	r0, r6
 801b85a:	f00a f847 	bl	80258ec <GUI_ALLOC_LockH>
 801b85e:	4603      	mov	r3, r0
 801b860:	c803      	ldmia	r0, {r0, r1}
 801b862:	ad04      	add	r5, sp, #16
 801b864:	ac06      	add	r4, sp, #24
 801b866:	e885 0003 	stmia.w	r5, {r0, r1}
 801b86a:	9303      	str	r3, [sp, #12]
 801b86c:	e884 0003 	stmia.w	r4, {r0, r1}
 801b870:	b14f      	cbz	r7, 801b886 <WM_ResizeWindow.part.7+0x3e>
 801b872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b874:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801b878:	2a80      	cmp	r2, #128	; 0x80
 801b87a:	d05b      	beq.n	801b934 <WM_ResizeWindow.part.7+0xec>
 801b87c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801b880:	4417      	add	r7, r2
 801b882:	f8ad 701c 	strh.w	r7, [sp, #28]
 801b886:	f1b8 0f00 	cmp.w	r8, #0
 801b88a:	d00a      	beq.n	801b8a2 <WM_ResizeWindow.part.7+0x5a>
 801b88c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b88e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801b892:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801b896:	d053      	beq.n	801b940 <WM_ResizeWindow.part.7+0xf8>
 801b898:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b89c:	4490      	add	r8, r2
 801b89e:	f8ad 801e 	strh.w	r8, [sp, #30]
 801b8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b8a4:	03d1      	lsls	r1, r2, #15
 801b8a6:	d43f      	bmi.n	801b928 <WM_ResizeWindow.part.7+0xe0>
 801b8a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b8ac:	0792      	lsls	r2, r2, #30
 801b8ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8b2:	d50b      	bpl.n	801b8cc <WM_ResizeWindow.part.7+0x84>
 801b8b4:	4629      	mov	r1, r5
 801b8b6:	4622      	mov	r2, r4
 801b8b8:	a808      	add	r0, sp, #32
 801b8ba:	f008 fe6b 	bl	8024594 <GUI_MergeRect>
 801b8be:	9b03      	ldr	r3, [sp, #12]
 801b8c0:	a808      	add	r0, sp, #32
 801b8c2:	6999      	ldr	r1, [r3, #24]
 801b8c4:	6a1a      	ldr	r2, [r3, #32]
 801b8c6:	f002 fb41 	bl	801df4c <WM__InvalidateRectEx>
 801b8ca:	9b03      	ldr	r3, [sp, #12]
 801b8cc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b8d0:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b8d4:	f9bd c01e 	ldrsh.w	ip, [sp, #30]
 801b8d8:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 801b8dc:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 801b8e0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801b8e4:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 801b8e8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801b8ec:	ebc0 0c0c 	rsb	ip, r0, ip
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	1b2b      	subs	r3, r5, r4
 801b8f4:	ac0a      	add	r4, sp, #40	; 0x28
 801b8f6:	ebc1 010e 	rsb	r1, r1, lr
 801b8fa:	f8cd c000 	str.w	ip, [sp]
 801b8fe:	1aba      	subs	r2, r7, r2
 801b900:	f7ff fade 	bl	801aec0 <WM__UpdateChildPositions>
 801b904:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 801b908:	f101 0008 	add.w	r0, r1, #8
 801b90c:	f006 fc8e 	bl	802222c <GUI__IntersectRect>
 801b910:	2105      	movs	r1, #5
 801b912:	4630      	mov	r0, r6
 801b914:	f002 fb92 	bl	801e03c <WM__SendMsgNoData>
 801b918:	4620      	mov	r0, r4
 801b91a:	f009 fff9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801b91e:	f007 fc5b 	bl	80231d8 <GUI_Unlock>
 801b922:	b00a      	add	sp, #40	; 0x28
 801b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b928:	4630      	mov	r0, r6
 801b92a:	f001 fda1 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801b92e:	9b03      	ldr	r3, [sp, #12]
 801b930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b932:	e7b9      	b.n	801b8a8 <WM_ResizeWindow.part.7+0x60>
 801b934:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801b938:	1bd7      	subs	r7, r2, r7
 801b93a:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b93e:	e7a2      	b.n	801b886 <WM_ResizeWindow.part.7+0x3e>
 801b940:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b944:	ebc8 0802 	rsb	r8, r8, r2
 801b948:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b94c:	e7a9      	b.n	801b8a2 <WM_ResizeWindow.part.7+0x5a>
 801b94e:	bf00      	nop

0801b950 <_GetDialogItem>:
 801b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b954:	b089      	sub	sp, #36	; 0x24
 801b956:	460e      	mov	r6, r1
 801b958:	9000      	str	r0, [sp, #0]
 801b95a:	f009 ffbd 	bl	80258d8 <GUI_ALLOC_h2p>
 801b95e:	69c4      	ldr	r4, [r0, #28]
 801b960:	b32c      	cbz	r4, 801b9ae <_GetDialogItem+0x5e>
 801b962:	f10d 0810 	add.w	r8, sp, #16
 801b966:	4645      	mov	r5, r8
 801b968:	f10d 0b14 	add.w	fp, sp, #20
 801b96c:	f10d 0a18 	add.w	sl, sp, #24
 801b970:	f10d 091c 	add.w	r9, sp, #28
 801b974:	2700      	movs	r7, #0
 801b976:	e003      	b.n	801b980 <_GetDialogItem+0x30>
 801b978:	f009 ffae 	bl	80258d8 <GUI_ALLOC_h2p>
 801b97c:	6a04      	ldr	r4, [r0, #32]
 801b97e:	b1b4      	cbz	r4, 801b9ae <_GetDialogItem+0x5e>
 801b980:	2315      	movs	r3, #21
 801b982:	4620      	mov	r0, r4
 801b984:	4629      	mov	r1, r5
 801b986:	f8c8 7000 	str.w	r7, [r8]
 801b98a:	f8cb 7000 	str.w	r7, [fp]
 801b98e:	9304      	str	r3, [sp, #16]
 801b990:	f8ca 7000 	str.w	r7, [sl]
 801b994:	f8c9 7000 	str.w	r7, [r9]
 801b998:	f002 fb40 	bl	801e01c <WM_SendMessage>
 801b99c:	9b07      	ldr	r3, [sp, #28]
 801b99e:	429e      	cmp	r6, r3
 801b9a0:	4620      	mov	r0, r4
 801b9a2:	46a8      	mov	r8, r5
 801b9a4:	d1e8      	bne.n	801b978 <_GetDialogItem+0x28>
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	b009      	add	sp, #36	; 0x24
 801b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9ae:	9800      	ldr	r0, [sp, #0]
 801b9b0:	f009 ff92 	bl	80258d8 <GUI_ALLOC_h2p>
 801b9b4:	69c0      	ldr	r0, [r0, #28]
 801b9b6:	9003      	str	r0, [sp, #12]
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	d069      	beq.n	801ba90 <_GetDialogItem+0x140>
 801b9bc:	9803      	ldr	r0, [sp, #12]
 801b9be:	2400      	movs	r4, #0
 801b9c0:	f009 ff8a 	bl	80258d8 <GUI_ALLOC_h2p>
 801b9c4:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801b9c8:	f1bb 0f00 	cmp.w	fp, #0
 801b9cc:	d027      	beq.n	801ba1e <_GetDialogItem+0xce>
 801b9ce:	4633      	mov	r3, r6
 801b9d0:	af04      	add	r7, sp, #16
 801b9d2:	465e      	mov	r6, fp
 801b9d4:	463d      	mov	r5, r7
 801b9d6:	f10d 0a14 	add.w	sl, sp, #20
 801b9da:	f10d 0918 	add.w	r9, sp, #24
 801b9de:	f10d 081c 	add.w	r8, sp, #28
 801b9e2:	469b      	mov	fp, r3
 801b9e4:	e003      	b.n	801b9ee <_GetDialogItem+0x9e>
 801b9e6:	f009 ff77 	bl	80258d8 <GUI_ALLOC_h2p>
 801b9ea:	6a06      	ldr	r6, [r0, #32]
 801b9ec:	b1b6      	cbz	r6, 801ba1c <_GetDialogItem+0xcc>
 801b9ee:	2315      	movs	r3, #21
 801b9f0:	4630      	mov	r0, r6
 801b9f2:	4629      	mov	r1, r5
 801b9f4:	603c      	str	r4, [r7, #0]
 801b9f6:	f8ca 4000 	str.w	r4, [sl]
 801b9fa:	9304      	str	r3, [sp, #16]
 801b9fc:	f8c9 4000 	str.w	r4, [r9]
 801ba00:	f8c8 4000 	str.w	r4, [r8]
 801ba04:	f002 fb0a 	bl	801e01c <WM_SendMessage>
 801ba08:	9b07      	ldr	r3, [sp, #28]
 801ba0a:	459b      	cmp	fp, r3
 801ba0c:	4630      	mov	r0, r6
 801ba0e:	462f      	mov	r7, r5
 801ba10:	d1e9      	bne.n	801b9e6 <_GetDialogItem+0x96>
 801ba12:	46b3      	mov	fp, r6
 801ba14:	4658      	mov	r0, fp
 801ba16:	b009      	add	sp, #36	; 0x24
 801ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba1c:	465e      	mov	r6, fp
 801ba1e:	9803      	ldr	r0, [sp, #12]
 801ba20:	f009 ff5a 	bl	80258d8 <GUI_ALLOC_h2p>
 801ba24:	69c0      	ldr	r0, [r0, #28]
 801ba26:	9002      	str	r0, [sp, #8]
 801ba28:	b358      	cbz	r0, 801ba82 <_GetDialogItem+0x132>
 801ba2a:	f009 ff55 	bl	80258d8 <GUI_ALLOC_h2p>
 801ba2e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801ba32:	f1bb 0f00 	cmp.w	fp, #0
 801ba36:	d02e      	beq.n	801ba96 <_GetDialogItem+0x146>
 801ba38:	af04      	add	r7, sp, #16
 801ba3a:	463d      	mov	r5, r7
 801ba3c:	f10d 0a14 	add.w	sl, sp, #20
 801ba40:	465f      	mov	r7, fp
 801ba42:	f10d 0918 	add.w	r9, sp, #24
 801ba46:	f10d 081c 	add.w	r8, sp, #28
 801ba4a:	46ab      	mov	fp, r5
 801ba4c:	e003      	b.n	801ba56 <_GetDialogItem+0x106>
 801ba4e:	f009 ff43 	bl	80258d8 <GUI_ALLOC_h2p>
 801ba52:	6a07      	ldr	r7, [r0, #32]
 801ba54:	b1ff      	cbz	r7, 801ba96 <_GetDialogItem+0x146>
 801ba56:	2315      	movs	r3, #21
 801ba58:	4638      	mov	r0, r7
 801ba5a:	4629      	mov	r1, r5
 801ba5c:	f8cb 4000 	str.w	r4, [fp]
 801ba60:	f8ca 4000 	str.w	r4, [sl]
 801ba64:	9304      	str	r3, [sp, #16]
 801ba66:	f8c9 4000 	str.w	r4, [r9]
 801ba6a:	f8c8 4000 	str.w	r4, [r8]
 801ba6e:	f002 fad5 	bl	801e01c <WM_SendMessage>
 801ba72:	9b07      	ldr	r3, [sp, #28]
 801ba74:	429e      	cmp	r6, r3
 801ba76:	4638      	mov	r0, r7
 801ba78:	46ab      	mov	fp, r5
 801ba7a:	d1e8      	bne.n	801ba4e <_GetDialogItem+0xfe>
 801ba7c:	46bb      	mov	fp, r7
 801ba7e:	2f00      	cmp	r7, #0
 801ba80:	d1c8      	bne.n	801ba14 <_GetDialogItem+0xc4>
 801ba82:	9803      	ldr	r0, [sp, #12]
 801ba84:	f009 ff28 	bl	80258d8 <GUI_ALLOC_h2p>
 801ba88:	6a00      	ldr	r0, [r0, #32]
 801ba8a:	9003      	str	r0, [sp, #12]
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d197      	bne.n	801b9c0 <_GetDialogItem+0x70>
 801ba90:	f04f 0b00 	mov.w	fp, #0
 801ba94:	e7be      	b.n	801ba14 <_GetDialogItem+0xc4>
 801ba96:	9802      	ldr	r0, [sp, #8]
 801ba98:	f009 ff1e 	bl	80258d8 <GUI_ALLOC_h2p>
 801ba9c:	69c0      	ldr	r0, [r0, #28]
 801ba9e:	9001      	str	r0, [sp, #4]
 801baa0:	b358      	cbz	r0, 801bafa <_GetDialogItem+0x1aa>
 801baa2:	f009 ff19 	bl	80258d8 <GUI_ALLOC_h2p>
 801baa6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801baaa:	f1bb 0f00 	cmp.w	fp, #0
 801baae:	d02c      	beq.n	801bb0a <_GetDialogItem+0x1ba>
 801bab0:	af04      	add	r7, sp, #16
 801bab2:	463d      	mov	r5, r7
 801bab4:	f10d 0a14 	add.w	sl, sp, #20
 801bab8:	465f      	mov	r7, fp
 801baba:	f10d 0918 	add.w	r9, sp, #24
 801babe:	f10d 081c 	add.w	r8, sp, #28
 801bac2:	46ab      	mov	fp, r5
 801bac4:	e003      	b.n	801bace <_GetDialogItem+0x17e>
 801bac6:	f009 ff07 	bl	80258d8 <GUI_ALLOC_h2p>
 801baca:	6a07      	ldr	r7, [r0, #32]
 801bacc:	b1ef      	cbz	r7, 801bb0a <_GetDialogItem+0x1ba>
 801bace:	2315      	movs	r3, #21
 801bad0:	4638      	mov	r0, r7
 801bad2:	4629      	mov	r1, r5
 801bad4:	f8cb 4000 	str.w	r4, [fp]
 801bad8:	f8ca 4000 	str.w	r4, [sl]
 801badc:	9304      	str	r3, [sp, #16]
 801bade:	f8c9 4000 	str.w	r4, [r9]
 801bae2:	f8c8 4000 	str.w	r4, [r8]
 801bae6:	f002 fa99 	bl	801e01c <WM_SendMessage>
 801baea:	9b07      	ldr	r3, [sp, #28]
 801baec:	429e      	cmp	r6, r3
 801baee:	4638      	mov	r0, r7
 801baf0:	46ab      	mov	fp, r5
 801baf2:	d1e8      	bne.n	801bac6 <_GetDialogItem+0x176>
 801baf4:	46bb      	mov	fp, r7
 801baf6:	2f00      	cmp	r7, #0
 801baf8:	d18c      	bne.n	801ba14 <_GetDialogItem+0xc4>
 801bafa:	9802      	ldr	r0, [sp, #8]
 801bafc:	f009 feec 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb00:	6a00      	ldr	r0, [r0, #32]
 801bb02:	9002      	str	r0, [sp, #8]
 801bb04:	2800      	cmp	r0, #0
 801bb06:	d190      	bne.n	801ba2a <_GetDialogItem+0xda>
 801bb08:	e7bb      	b.n	801ba82 <_GetDialogItem+0x132>
 801bb0a:	9801      	ldr	r0, [sp, #4]
 801bb0c:	f009 fee4 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb10:	69c0      	ldr	r0, [r0, #28]
 801bb12:	9000      	str	r0, [sp, #0]
 801bb14:	b340      	cbz	r0, 801bb68 <_GetDialogItem+0x218>
 801bb16:	f009 fedf 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb1a:	69c5      	ldr	r5, [r0, #28]
 801bb1c:	b365      	cbz	r5, 801bb78 <_GetDialogItem+0x228>
 801bb1e:	f10d 0b10 	add.w	fp, sp, #16
 801bb22:	465f      	mov	r7, fp
 801bb24:	f10d 0a14 	add.w	sl, sp, #20
 801bb28:	f10d 0918 	add.w	r9, sp, #24
 801bb2c:	f10d 081c 	add.w	r8, sp, #28
 801bb30:	e003      	b.n	801bb3a <_GetDialogItem+0x1ea>
 801bb32:	f009 fed1 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb36:	6a05      	ldr	r5, [r0, #32]
 801bb38:	b1f5      	cbz	r5, 801bb78 <_GetDialogItem+0x228>
 801bb3a:	2315      	movs	r3, #21
 801bb3c:	4628      	mov	r0, r5
 801bb3e:	4639      	mov	r1, r7
 801bb40:	f8cb 4000 	str.w	r4, [fp]
 801bb44:	f8ca 4000 	str.w	r4, [sl]
 801bb48:	9304      	str	r3, [sp, #16]
 801bb4a:	f8c9 4000 	str.w	r4, [r9]
 801bb4e:	f8c8 4000 	str.w	r4, [r8]
 801bb52:	f002 fa63 	bl	801e01c <WM_SendMessage>
 801bb56:	9b07      	ldr	r3, [sp, #28]
 801bb58:	429e      	cmp	r6, r3
 801bb5a:	4628      	mov	r0, r5
 801bb5c:	46bb      	mov	fp, r7
 801bb5e:	d1e8      	bne.n	801bb32 <_GetDialogItem+0x1e2>
 801bb60:	46ab      	mov	fp, r5
 801bb62:	2d00      	cmp	r5, #0
 801bb64:	f47f af56 	bne.w	801ba14 <_GetDialogItem+0xc4>
 801bb68:	9801      	ldr	r0, [sp, #4]
 801bb6a:	f009 feb5 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb6e:	6a00      	ldr	r0, [r0, #32]
 801bb70:	9001      	str	r0, [sp, #4]
 801bb72:	2800      	cmp	r0, #0
 801bb74:	d195      	bne.n	801baa2 <_GetDialogItem+0x152>
 801bb76:	e7c0      	b.n	801bafa <_GetDialogItem+0x1aa>
 801bb78:	9800      	ldr	r0, [sp, #0]
 801bb7a:	f009 fead 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb7e:	69c7      	ldr	r7, [r0, #28]
 801bb80:	b927      	cbnz	r7, 801bb8c <_GetDialogItem+0x23c>
 801bb82:	e00d      	b.n	801bba0 <_GetDialogItem+0x250>
 801bb84:	f009 fea8 	bl	80258d8 <GUI_ALLOC_h2p>
 801bb88:	6a07      	ldr	r7, [r0, #32]
 801bb8a:	b14f      	cbz	r7, 801bba0 <_GetDialogItem+0x250>
 801bb8c:	4638      	mov	r0, r7
 801bb8e:	4631      	mov	r1, r6
 801bb90:	f7ff fede 	bl	801b950 <_GetDialogItem>
 801bb94:	4605      	mov	r5, r0
 801bb96:	4638      	mov	r0, r7
 801bb98:	2d00      	cmp	r5, #0
 801bb9a:	d0f3      	beq.n	801bb84 <_GetDialogItem+0x234>
 801bb9c:	46ab      	mov	fp, r5
 801bb9e:	e739      	b.n	801ba14 <_GetDialogItem+0xc4>
 801bba0:	9800      	ldr	r0, [sp, #0]
 801bba2:	f009 fe99 	bl	80258d8 <GUI_ALLOC_h2p>
 801bba6:	6a00      	ldr	r0, [r0, #32]
 801bba8:	9000      	str	r0, [sp, #0]
 801bbaa:	2800      	cmp	r0, #0
 801bbac:	d1b3      	bne.n	801bb16 <_GetDialogItem+0x1c6>
 801bbae:	e7db      	b.n	801bb68 <_GetDialogItem+0x218>

0801bbb0 <WM_SetEnableState>:
 801bbb0:	b530      	push	{r4, r5, lr}
 801bbb2:	4604      	mov	r4, r0
 801bbb4:	b087      	sub	sp, #28
 801bbb6:	460d      	mov	r5, r1
 801bbb8:	b908      	cbnz	r0, 801bbbe <WM_SetEnableState+0xe>
 801bbba:	b007      	add	sp, #28
 801bbbc:	bd30      	pop	{r4, r5, pc}
 801bbbe:	f007 fb15 	bl	80231ec <GUI_Lock>
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	f009 fe92 	bl	80258ec <GUI_ALLOC_LockH>
 801bbc8:	9001      	str	r0, [sp, #4]
 801bbca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801bbcc:	b995      	cbnz	r5, 801bbf4 <WM_SetEnableState+0x44>
 801bbce:	f043 0210 	orr.w	r2, r3, #16
 801bbd2:	4293      	cmp	r3, r2
 801bbd4:	d012      	beq.n	801bbfc <WM_SetEnableState+0x4c>
 801bbd6:	6282      	str	r2, [r0, #40]	; 0x28
 801bbd8:	a801      	add	r0, sp, #4
 801bbda:	f009 fe99 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bbde:	2328      	movs	r3, #40	; 0x28
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	a902      	add	r1, sp, #8
 801bbe4:	9505      	str	r5, [sp, #20]
 801bbe6:	9302      	str	r3, [sp, #8]
 801bbe8:	f7ff f936 	bl	801ae58 <WM__SendMessage>
 801bbec:	f007 faf4 	bl	80231d8 <GUI_Unlock>
 801bbf0:	b007      	add	sp, #28
 801bbf2:	bd30      	pop	{r4, r5, pc}
 801bbf4:	f023 0210 	bic.w	r2, r3, #16
 801bbf8:	4293      	cmp	r3, r2
 801bbfa:	d1ec      	bne.n	801bbd6 <WM_SetEnableState+0x26>
 801bbfc:	a801      	add	r0, sp, #4
 801bbfe:	f009 fe87 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bc02:	e7f3      	b.n	801bbec <WM_SetEnableState+0x3c>

0801bc04 <WM_ForEachDesc>:
 801bc04:	b570      	push	{r4, r5, r6, lr}
 801bc06:	4606      	mov	r6, r0
 801bc08:	460d      	mov	r5, r1
 801bc0a:	4614      	mov	r4, r2
 801bc0c:	f007 faee 	bl	80231ec <GUI_Lock>
 801bc10:	4630      	mov	r0, r6
 801bc12:	4629      	mov	r1, r5
 801bc14:	4622      	mov	r2, r4
 801bc16:	f7fe fff1 	bl	801abfc <WM__ForEachDesc>
 801bc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc1e:	f007 badb 	b.w	80231d8 <GUI_Unlock>
 801bc22:	bf00      	nop

0801bc24 <WM_GetClientRect>:
 801bc24:	b538      	push	{r3, r4, r5, lr}
 801bc26:	4605      	mov	r5, r0
 801bc28:	f007 fae0 	bl	80231ec <GUI_Lock>
 801bc2c:	4b08      	ldr	r3, [pc, #32]	; (801bc50 <WM_GetClientRect+0x2c>)
 801bc2e:	681c      	ldr	r4, [r3, #0]
 801bc30:	b914      	cbnz	r4, 801bc38 <WM_GetClientRect+0x14>
 801bc32:	4b08      	ldr	r3, [pc, #32]	; (801bc54 <WM_GetClientRect+0x30>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801bc38:	f007 fad8 	bl	80231ec <GUI_Lock>
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	4629      	mov	r1, r5
 801bc40:	f7ff f9de 	bl	801b000 <WM__GetClientRectEx>
 801bc44:	f007 fac8 	bl	80231d8 <GUI_Unlock>
 801bc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc4c:	f007 bac4 	b.w	80231d8 <GUI_Unlock>
 801bc50:	2002cb54 	.word	0x2002cb54
 801bc54:	20000280 	.word	0x20000280

0801bc58 <WM_GetClientWindow>:
 801bc58:	b500      	push	{lr}
 801bc5a:	b085      	sub	sp, #20
 801bc5c:	a904      	add	r1, sp, #16
 801bc5e:	2317      	movs	r3, #23
 801bc60:	f841 3d10 	str.w	r3, [r1, #-16]!
 801bc64:	2300      	movs	r3, #0
 801bc66:	4669      	mov	r1, sp
 801bc68:	9303      	str	r3, [sp, #12]
 801bc6a:	f002 f9d7 	bl	801e01c <WM_SendMessage>
 801bc6e:	9803      	ldr	r0, [sp, #12]
 801bc70:	b005      	add	sp, #20
 801bc72:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc76:	bf00      	nop

0801bc78 <WM_GetDesktopWindow>:
 801bc78:	4a03      	ldr	r2, [pc, #12]	; (801bc88 <WM_GetDesktopWindow+0x10>)
 801bc7a:	4b04      	ldr	r3, [pc, #16]	; (801bc8c <WM_GetDesktopWindow+0x14>)
 801bc7c:	6812      	ldr	r2, [r2, #0]
 801bc7e:	7c52      	ldrb	r2, [r2, #17]
 801bc80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bc84:	4770      	bx	lr
 801bc86:	bf00      	nop
 801bc88:	20000280 	.word	0x20000280
 801bc8c:	2002cb58 	.word	0x2002cb58

0801bc90 <WM_BringToBottom>:
 801bc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc94:	4604      	mov	r4, r0
 801bc96:	b087      	sub	sp, #28
 801bc98:	f007 faa8 	bl	80231ec <GUI_Lock>
 801bc9c:	b924      	cbnz	r4, 801bca8 <WM_BringToBottom+0x18>
 801bc9e:	f007 fa9b 	bl	80231d8 <GUI_Unlock>
 801bca2:	b007      	add	sp, #28
 801bca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f009 fe1f 	bl	80258ec <GUI_ALLOC_LockH>
 801bcae:	4603      	mov	r3, r0
 801bcb0:	c803      	ldmia	r0, {r0, r1}
 801bcb2:	ad04      	add	r5, sp, #16
 801bcb4:	e885 0003 	stmia.w	r5, {r0, r1}
 801bcb8:	a801      	add	r0, sp, #4
 801bcba:	9301      	str	r3, [sp, #4]
 801bcbc:	6a1f      	ldr	r7, [r3, #32]
 801bcbe:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 801bcc2:	f009 fe25 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bcc6:	4620      	mov	r0, r4
 801bcc8:	f7ff f874 	bl	801adb4 <WM__GetPrevSibling>
 801bccc:	4606      	mov	r6, r0
 801bcce:	2800      	cmp	r0, #0
 801bcd0:	d0e5      	beq.n	801bc9e <WM_BringToBottom+0xe>
 801bcd2:	f007 fa8b 	bl	80231ec <GUI_Lock>
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f009 fdfe 	bl	80258d8 <GUI_ALLOC_h2p>
 801bcdc:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801bce0:	f007 fa7a 	bl	80231d8 <GUI_Unlock>
 801bce4:	f018 0f02 	tst.w	r8, #2
 801bce8:	d120      	bne.n	801bd2c <WM_BringToBottom+0x9c>
 801bcea:	4620      	mov	r0, r4
 801bcec:	f009 fdfe 	bl	80258ec <GUI_ALLOC_LockH>
 801bcf0:	9001      	str	r0, [sp, #4]
 801bcf2:	4648      	mov	r0, r9
 801bcf4:	f009 fdfa 	bl	80258ec <GUI_ALLOC_LockH>
 801bcf8:	9003      	str	r0, [sp, #12]
 801bcfa:	4630      	mov	r0, r6
 801bcfc:	f009 fdf6 	bl	80258ec <GUI_ALLOC_LockH>
 801bd00:	9903      	ldr	r1, [sp, #12]
 801bd02:	9a01      	ldr	r2, [sp, #4]
 801bd04:	69cd      	ldr	r5, [r1, #28]
 801bd06:	6207      	str	r7, [r0, #32]
 801bd08:	4603      	mov	r3, r0
 801bd0a:	6215      	str	r5, [r2, #32]
 801bd0c:	a801      	add	r0, sp, #4
 801bd0e:	61cc      	str	r4, [r1, #28]
 801bd10:	9302      	str	r3, [sp, #8]
 801bd12:	f009 fdfd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bd16:	a803      	add	r0, sp, #12
 801bd18:	f009 fdfa 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bd1c:	a802      	add	r0, sp, #8
 801bd1e:	f009 fdf7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bd22:	f007 fa59 	bl	80231d8 <GUI_Unlock>
 801bd26:	b007      	add	sp, #28
 801bd28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	4649      	mov	r1, r9
 801bd30:	463a      	mov	r2, r7
 801bd32:	f002 f90b 	bl	801df4c <WM__InvalidateRectEx>
 801bd36:	e7d8      	b.n	801bcea <WM_BringToBottom+0x5a>

0801bd38 <WM_GetDialogItem>:
 801bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3c:	4604      	mov	r4, r0
 801bd3e:	b087      	sub	sp, #28
 801bd40:	4688      	mov	r8, r1
 801bd42:	b918      	cbnz	r0, 801bd4c <WM_GetDialogItem+0x14>
 801bd44:	4620      	mov	r0, r4
 801bd46:	b007      	add	sp, #28
 801bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd4c:	f007 fa4e 	bl	80231ec <GUI_Lock>
 801bd50:	4620      	mov	r0, r4
 801bd52:	f009 fdcb 	bl	80258ec <GUI_ALLOC_LockH>
 801bd56:	ab06      	add	r3, sp, #24
 801bd58:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801bd5c:	f843 0d14 	str.w	r0, [r3, #-20]!
 801bd60:	4618      	mov	r0, r3
 801bd62:	f009 fdd5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bd66:	f1bb 0f00 	cmp.w	fp, #0
 801bd6a:	d04d      	beq.n	801be08 <WM_GetDialogItem+0xd0>
 801bd6c:	f10d 0908 	add.w	r9, sp, #8
 801bd70:	464e      	mov	r6, r9
 801bd72:	2500      	movs	r5, #0
 801bd74:	f04f 0a15 	mov.w	sl, #21
 801bd78:	4658      	mov	r0, fp
 801bd7a:	4631      	mov	r1, r6
 801bd7c:	f8c9 5000 	str.w	r5, [r9]
 801bd80:	9503      	str	r5, [sp, #12]
 801bd82:	9504      	str	r5, [sp, #16]
 801bd84:	9505      	str	r5, [sp, #20]
 801bd86:	f8cd a008 	str.w	sl, [sp, #8]
 801bd8a:	f002 f947 	bl	801e01c <WM_SendMessage>
 801bd8e:	9b05      	ldr	r3, [sp, #20]
 801bd90:	4598      	cmp	r8, r3
 801bd92:	46b1      	mov	r9, r6
 801bd94:	d03a      	beq.n	801be0c <WM_GetDialogItem+0xd4>
 801bd96:	4658      	mov	r0, fp
 801bd98:	f009 fd9e 	bl	80258d8 <GUI_ALLOC_h2p>
 801bd9c:	69c4      	ldr	r4, [r0, #28]
 801bd9e:	b924      	cbnz	r4, 801bdaa <WM_GetDialogItem+0x72>
 801bda0:	e017      	b.n	801bdd2 <WM_GetDialogItem+0x9a>
 801bda2:	f009 fd99 	bl	80258d8 <GUI_ALLOC_h2p>
 801bda6:	6a04      	ldr	r4, [r0, #32]
 801bda8:	b19c      	cbz	r4, 801bdd2 <WM_GetDialogItem+0x9a>
 801bdaa:	4620      	mov	r0, r4
 801bdac:	4631      	mov	r1, r6
 801bdae:	9503      	str	r5, [sp, #12]
 801bdb0:	9504      	str	r5, [sp, #16]
 801bdb2:	9505      	str	r5, [sp, #20]
 801bdb4:	f8cd a008 	str.w	sl, [sp, #8]
 801bdb8:	f002 f930 	bl	801e01c <WM_SendMessage>
 801bdbc:	9b05      	ldr	r3, [sp, #20]
 801bdbe:	4598      	cmp	r8, r3
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	46b1      	mov	r9, r6
 801bdc4:	d1ed      	bne.n	801bda2 <WM_GetDialogItem+0x6a>
 801bdc6:	f007 fa07 	bl	80231d8 <GUI_Unlock>
 801bdca:	4620      	mov	r0, r4
 801bdcc:	b007      	add	sp, #28
 801bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd2:	4658      	mov	r0, fp
 801bdd4:	f009 fd80 	bl	80258d8 <GUI_ALLOC_h2p>
 801bdd8:	69c7      	ldr	r7, [r0, #28]
 801bdda:	b927      	cbnz	r7, 801bde6 <WM_GetDialogItem+0xae>
 801bddc:	e00c      	b.n	801bdf8 <WM_GetDialogItem+0xc0>
 801bdde:	f009 fd7b 	bl	80258d8 <GUI_ALLOC_h2p>
 801bde2:	6a07      	ldr	r7, [r0, #32]
 801bde4:	b147      	cbz	r7, 801bdf8 <WM_GetDialogItem+0xc0>
 801bde6:	4638      	mov	r0, r7
 801bde8:	4641      	mov	r1, r8
 801bdea:	f7ff fdb1 	bl	801b950 <_GetDialogItem>
 801bdee:	4604      	mov	r4, r0
 801bdf0:	4638      	mov	r0, r7
 801bdf2:	2c00      	cmp	r4, #0
 801bdf4:	d0f3      	beq.n	801bdde <WM_GetDialogItem+0xa6>
 801bdf6:	e7e6      	b.n	801bdc6 <WM_GetDialogItem+0x8e>
 801bdf8:	4658      	mov	r0, fp
 801bdfa:	f009 fd6d 	bl	80258d8 <GUI_ALLOC_h2p>
 801bdfe:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801be02:	f1bb 0f00 	cmp.w	fp, #0
 801be06:	d1b7      	bne.n	801bd78 <WM_GetDialogItem+0x40>
 801be08:	2400      	movs	r4, #0
 801be0a:	e7dc      	b.n	801bdc6 <WM_GetDialogItem+0x8e>
 801be0c:	465c      	mov	r4, fp
 801be0e:	f007 f9e3 	bl	80231d8 <GUI_Unlock>
 801be12:	e7da      	b.n	801bdca <WM_GetDialogItem+0x92>

0801be14 <WM_GetFirstChild>:
 801be14:	b510      	push	{r4, lr}
 801be16:	4604      	mov	r4, r0
 801be18:	b138      	cbz	r0, 801be2a <WM_GetFirstChild+0x16>
 801be1a:	f007 f9e7 	bl	80231ec <GUI_Lock>
 801be1e:	4620      	mov	r0, r4
 801be20:	f009 fd5a 	bl	80258d8 <GUI_ALLOC_h2p>
 801be24:	69c4      	ldr	r4, [r0, #28]
 801be26:	f007 f9d7 	bl	80231d8 <GUI_Unlock>
 801be2a:	4620      	mov	r0, r4
 801be2c:	bd10      	pop	{r4, pc}
 801be2e:	bf00      	nop

0801be30 <WM_GetFocusedWindow>:
 801be30:	b510      	push	{r4, lr}
 801be32:	f007 f9db 	bl	80231ec <GUI_Lock>
 801be36:	4a04      	ldr	r2, [pc, #16]	; (801be48 <WM_GetFocusedWindow+0x18>)
 801be38:	4b04      	ldr	r3, [pc, #16]	; (801be4c <WM_GetFocusedWindow+0x1c>)
 801be3a:	6812      	ldr	r2, [r2, #0]
 801be3c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801be40:	f007 f9ca 	bl	80231d8 <GUI_Unlock>
 801be44:	4620      	mov	r0, r4
 801be46:	bd10      	pop	{r4, pc}
 801be48:	2002cb78 	.word	0x2002cb78
 801be4c:	2002cb68 	.word	0x2002cb68

0801be50 <WM_GetId>:
 801be50:	b500      	push	{lr}
 801be52:	b085      	sub	sp, #20
 801be54:	a904      	add	r1, sp, #16
 801be56:	2315      	movs	r3, #21
 801be58:	f841 3d10 	str.w	r3, [r1, #-16]!
 801be5c:	2300      	movs	r3, #0
 801be5e:	4669      	mov	r1, sp
 801be60:	9301      	str	r3, [sp, #4]
 801be62:	9302      	str	r3, [sp, #8]
 801be64:	9303      	str	r3, [sp, #12]
 801be66:	f002 f8d9 	bl	801e01c <WM_SendMessage>
 801be6a:	9803      	ldr	r0, [sp, #12]
 801be6c:	b005      	add	sp, #20
 801be6e:	f85d fb04 	ldr.w	pc, [sp], #4
 801be72:	bf00      	nop

0801be74 <WM_GetInsideRectEx>:
 801be74:	b500      	push	{lr}
 801be76:	b085      	sub	sp, #20
 801be78:	ab04      	add	r3, sp, #16
 801be7a:	2214      	movs	r2, #20
 801be7c:	9103      	str	r1, [sp, #12]
 801be7e:	4669      	mov	r1, sp
 801be80:	f843 2d10 	str.w	r2, [r3, #-16]!
 801be84:	f002 f8ca 	bl	801e01c <WM_SendMessage>
 801be88:	b005      	add	sp, #20
 801be8a:	f85d fb04 	ldr.w	pc, [sp], #4
 801be8e:	bf00      	nop

0801be90 <WM_GetInsideRectExScrollbar>:
 801be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be94:	b08b      	sub	sp, #44	; 0x2c
 801be96:	468a      	mov	sl, r1
 801be98:	9001      	str	r0, [sp, #4]
 801be9a:	2800      	cmp	r0, #0
 801be9c:	f000 80f7 	beq.w	801c08e <WM_GetInsideRectExScrollbar+0x1fe>
 801bea0:	2900      	cmp	r1, #0
 801bea2:	f000 80f4 	beq.w	801c08e <WM_GetInsideRectExScrollbar+0x1fe>
 801bea6:	f007 f9a1 	bl	80231ec <GUI_Lock>
 801beaa:	9801      	ldr	r0, [sp, #4]
 801beac:	f009 fd1e 	bl	80258ec <GUI_ALLOC_LockH>
 801beb0:	ab0a      	add	r3, sp, #40	; 0x28
 801beb2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801beb6:	f843 0d18 	str.w	r0, [r3, #-24]!
 801beba:	4618      	mov	r0, r3
 801bebc:	9302      	str	r3, [sp, #8]
 801bebe:	ac06      	add	r4, sp, #24
 801bec0:	f009 fd26 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bec4:	f1bb 0f00 	cmp.w	fp, #0
 801bec8:	f000 80e4 	beq.w	801c094 <WM_GetInsideRectExScrollbar+0x204>
 801becc:	ae09      	add	r6, sp, #36	; 0x24
 801bece:	4633      	mov	r3, r6
 801bed0:	46a1      	mov	r9, r4
 801bed2:	465e      	mov	r6, fp
 801bed4:	f10d 081c 	add.w	r8, sp, #28
 801bed8:	af08      	add	r7, sp, #32
 801beda:	2500      	movs	r5, #0
 801bedc:	469b      	mov	fp, r3
 801bede:	e00e      	b.n	801befe <WM_GetInsideRectExScrollbar+0x6e>
 801bee0:	4630      	mov	r0, r6
 801bee2:	21ff      	movs	r1, #255	; 0xff
 801bee4:	f7ff fd34 	bl	801b950 <_GetDialogItem>
 801bee8:	4602      	mov	r2, r0
 801beea:	4630      	mov	r0, r6
 801beec:	2a00      	cmp	r2, #0
 801beee:	f040 80e8 	bne.w	801c0c2 <WM_GetInsideRectExScrollbar+0x232>
 801bef2:	f009 fcf1 	bl	80258d8 <GUI_ALLOC_h2p>
 801bef6:	6a06      	ldr	r6, [r0, #32]
 801bef8:	2e00      	cmp	r6, #0
 801befa:	f000 80cb 	beq.w	801c094 <WM_GetInsideRectExScrollbar+0x204>
 801befe:	2215      	movs	r2, #21
 801bf00:	4630      	mov	r0, r6
 801bf02:	4649      	mov	r1, r9
 801bf04:	6025      	str	r5, [r4, #0]
 801bf06:	f8c8 5000 	str.w	r5, [r8]
 801bf0a:	603d      	str	r5, [r7, #0]
 801bf0c:	f8cb 5000 	str.w	r5, [fp]
 801bf10:	9206      	str	r2, [sp, #24]
 801bf12:	f002 f883 	bl	801e01c <WM_SendMessage>
 801bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf18:	2bff      	cmp	r3, #255	; 0xff
 801bf1a:	464c      	mov	r4, r9
 801bf1c:	d1e0      	bne.n	801bee0 <WM_GetInsideRectExScrollbar+0x50>
 801bf1e:	9603      	str	r6, [sp, #12]
 801bf20:	f007 f95a 	bl	80231d8 <GUI_Unlock>
 801bf24:	f007 f962 	bl	80231ec <GUI_Lock>
 801bf28:	9801      	ldr	r0, [sp, #4]
 801bf2a:	f009 fcdf 	bl	80258ec <GUI_ALLOC_LockH>
 801bf2e:	4602      	mov	r2, r0
 801bf30:	9802      	ldr	r0, [sp, #8]
 801bf32:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 801bf36:	9204      	str	r2, [sp, #16]
 801bf38:	f009 fcea 	bl	8025910 <GUI_ALLOC_UnlockH>
 801bf3c:	f1bb 0f00 	cmp.w	fp, #0
 801bf40:	f000 80ab 	beq.w	801c09a <WM_GetInsideRectExScrollbar+0x20a>
 801bf44:	ae09      	add	r6, sp, #36	; 0x24
 801bf46:	4633      	mov	r3, r6
 801bf48:	f10d 081c 	add.w	r8, sp, #28
 801bf4c:	465e      	mov	r6, fp
 801bf4e:	af08      	add	r7, sp, #32
 801bf50:	2500      	movs	r5, #0
 801bf52:	f10d 0918 	add.w	r9, sp, #24
 801bf56:	469b      	mov	fp, r3
 801bf58:	e00d      	b.n	801bf76 <WM_GetInsideRectExScrollbar+0xe6>
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	21fe      	movs	r1, #254	; 0xfe
 801bf5e:	f7ff fcf7 	bl	801b950 <_GetDialogItem>
 801bf62:	4602      	mov	r2, r0
 801bf64:	4630      	mov	r0, r6
 801bf66:	2a00      	cmp	r2, #0
 801bf68:	d12e      	bne.n	801bfc8 <WM_GetInsideRectExScrollbar+0x138>
 801bf6a:	f009 fcb5 	bl	80258d8 <GUI_ALLOC_h2p>
 801bf6e:	6a06      	ldr	r6, [r0, #32]
 801bf70:	2e00      	cmp	r6, #0
 801bf72:	f000 8092 	beq.w	801c09a <WM_GetInsideRectExScrollbar+0x20a>
 801bf76:	2315      	movs	r3, #21
 801bf78:	4630      	mov	r0, r6
 801bf7a:	4649      	mov	r1, r9
 801bf7c:	6025      	str	r5, [r4, #0]
 801bf7e:	f8c8 5000 	str.w	r5, [r8]
 801bf82:	9306      	str	r3, [sp, #24]
 801bf84:	603d      	str	r5, [r7, #0]
 801bf86:	f8cb 5000 	str.w	r5, [fp]
 801bf8a:	f002 f847 	bl	801e01c <WM_SendMessage>
 801bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf90:	2bfe      	cmp	r3, #254	; 0xfe
 801bf92:	464c      	mov	r4, r9
 801bf94:	d1e1      	bne.n	801bf5a <WM_GetInsideRectExScrollbar+0xca>
 801bf96:	f007 f91f 	bl	80231d8 <GUI_Unlock>
 801bf9a:	f007 f927 	bl	80231ec <GUI_Lock>
 801bf9e:	9801      	ldr	r0, [sp, #4]
 801bfa0:	f009 fc9a 	bl	80258d8 <GUI_ALLOC_h2p>
 801bfa4:	46b3      	mov	fp, r6
 801bfa6:	8845      	ldrh	r5, [r0, #2]
 801bfa8:	8806      	ldrh	r6, [r0, #0]
 801bfaa:	f007 f915 	bl	80231d8 <GUI_Unlock>
 801bfae:	2214      	movs	r2, #20
 801bfb0:	9b02      	ldr	r3, [sp, #8]
 801bfb2:	9801      	ldr	r0, [sp, #4]
 801bfb4:	9309      	str	r3, [sp, #36]	; 0x24
 801bfb6:	4649      	mov	r1, r9
 801bfb8:	9206      	str	r2, [sp, #24]
 801bfba:	f002 f82f 	bl	801e01c <WM_SendMessage>
 801bfbe:	f1bb 0f00 	cmp.w	fp, #0
 801bfc2:	d039      	beq.n	801c038 <WM_GetInsideRectExScrollbar+0x1a8>
 801bfc4:	465f      	mov	r7, fp
 801bfc6:	e015      	b.n	801bff4 <WM_GetInsideRectExScrollbar+0x164>
 801bfc8:	9200      	str	r2, [sp, #0]
 801bfca:	f007 f905 	bl	80231d8 <GUI_Unlock>
 801bfce:	f007 f90d 	bl	80231ec <GUI_Lock>
 801bfd2:	9801      	ldr	r0, [sp, #4]
 801bfd4:	f009 fc80 	bl	80258d8 <GUI_ALLOC_h2p>
 801bfd8:	9a00      	ldr	r2, [sp, #0]
 801bfda:	8806      	ldrh	r6, [r0, #0]
 801bfdc:	8845      	ldrh	r5, [r0, #2]
 801bfde:	4617      	mov	r7, r2
 801bfe0:	f007 f8fa 	bl	80231d8 <GUI_Unlock>
 801bfe4:	2314      	movs	r3, #20
 801bfe6:	9a02      	ldr	r2, [sp, #8]
 801bfe8:	9801      	ldr	r0, [sp, #4]
 801bfea:	9209      	str	r2, [sp, #36]	; 0x24
 801bfec:	4649      	mov	r1, r9
 801bfee:	9306      	str	r3, [sp, #24]
 801bff0:	f002 f814 	bl	801e01c <WM_SendMessage>
 801bff4:	f007 f8fa 	bl	80231ec <GUI_Lock>
 801bff8:	4638      	mov	r0, r7
 801bffa:	f009 fc6d 	bl	80258d8 <GUI_ALLOC_h2p>
 801bffe:	c803      	ldmia	r0, {r0, r1}
 801c000:	e889 0003 	stmia.w	r9, {r0, r1}
 801c004:	f007 f8e8 	bl	80231d8 <GUI_Unlock>
 801c008:	b231      	sxth	r1, r6
 801c00a:	b22a      	sxth	r2, r5
 801c00c:	4249      	negs	r1, r1
 801c00e:	4252      	negs	r2, r2
 801c010:	4648      	mov	r0, r9
 801c012:	f008 faf1 	bl	80245f8 <GUI_MoveRect>
 801c016:	f007 f8e9 	bl	80231ec <GUI_Lock>
 801c01a:	4638      	mov	r0, r7
 801c01c:	f009 fc5c 	bl	80258d8 <GUI_ALLOC_h2p>
 801c020:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 801c022:	f007 f8d9 	bl	80231d8 <GUI_Unlock>
 801c026:	f007 0382 	and.w	r3, r7, #130	; 0x82
 801c02a:	2b82      	cmp	r3, #130	; 0x82
 801c02c:	d104      	bne.n	801c038 <WM_GetInsideRectExScrollbar+0x1a8>
 801c02e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c032:	3b01      	subs	r3, #1
 801c034:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c038:	9b03      	ldr	r3, [sp, #12]
 801c03a:	b313      	cbz	r3, 801c082 <WM_GetInsideRectExScrollbar+0x1f2>
 801c03c:	f007 f8d6 	bl	80231ec <GUI_Lock>
 801c040:	9803      	ldr	r0, [sp, #12]
 801c042:	f009 fc49 	bl	80258d8 <GUI_ALLOC_h2p>
 801c046:	c803      	ldmia	r0, {r0, r1}
 801c048:	e884 0003 	stmia.w	r4, {r0, r1}
 801c04c:	f007 f8c4 	bl	80231d8 <GUI_Unlock>
 801c050:	b231      	sxth	r1, r6
 801c052:	b22a      	sxth	r2, r5
 801c054:	4249      	negs	r1, r1
 801c056:	4252      	negs	r2, r2
 801c058:	4620      	mov	r0, r4
 801c05a:	f008 facd 	bl	80245f8 <GUI_MoveRect>
 801c05e:	f007 f8c5 	bl	80231ec <GUI_Lock>
 801c062:	9803      	ldr	r0, [sp, #12]
 801c064:	f009 fc38 	bl	80258d8 <GUI_ALLOC_h2p>
 801c068:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 801c06a:	f007 f8b5 	bl	80231d8 <GUI_Unlock>
 801c06e:	f404 7381 	and.w	r3, r4, #258	; 0x102
 801c072:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 801c076:	d104      	bne.n	801c082 <WM_GetInsideRectExScrollbar+0x1f2>
 801c078:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801c07c:	3b01      	subs	r3, #1
 801c07e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c082:	9b02      	ldr	r3, [sp, #8]
 801c084:	cb03      	ldmia	r3!, {r0, r1}
 801c086:	f8ca 0000 	str.w	r0, [sl]
 801c08a:	f8ca 1004 	str.w	r1, [sl, #4]
 801c08e:	b00b      	add	sp, #44	; 0x2c
 801c090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c094:	2300      	movs	r3, #0
 801c096:	9303      	str	r3, [sp, #12]
 801c098:	e742      	b.n	801bf20 <WM_GetInsideRectExScrollbar+0x90>
 801c09a:	f007 f89d 	bl	80231d8 <GUI_Unlock>
 801c09e:	f007 f8a5 	bl	80231ec <GUI_Lock>
 801c0a2:	9801      	ldr	r0, [sp, #4]
 801c0a4:	f009 fc18 	bl	80258d8 <GUI_ALLOC_h2p>
 801c0a8:	8806      	ldrh	r6, [r0, #0]
 801c0aa:	8845      	ldrh	r5, [r0, #2]
 801c0ac:	f007 f894 	bl	80231d8 <GUI_Unlock>
 801c0b0:	2314      	movs	r3, #20
 801c0b2:	9a02      	ldr	r2, [sp, #8]
 801c0b4:	9801      	ldr	r0, [sp, #4]
 801c0b6:	9209      	str	r2, [sp, #36]	; 0x24
 801c0b8:	4621      	mov	r1, r4
 801c0ba:	9306      	str	r3, [sp, #24]
 801c0bc:	f001 ffae 	bl	801e01c <WM_SendMessage>
 801c0c0:	e7ba      	b.n	801c038 <WM_GetInsideRectExScrollbar+0x1a8>
 801c0c2:	9203      	str	r2, [sp, #12]
 801c0c4:	e72c      	b.n	801bf20 <WM_GetInsideRectExScrollbar+0x90>
 801c0c6:	bf00      	nop

0801c0c8 <WM_GetWindowOrgX>:
 801c0c8:	b510      	push	{r4, lr}
 801c0ca:	4604      	mov	r4, r0
 801c0cc:	b140      	cbz	r0, 801c0e0 <WM_GetWindowOrgX+0x18>
 801c0ce:	f007 f88d 	bl	80231ec <GUI_Lock>
 801c0d2:	4620      	mov	r0, r4
 801c0d4:	f009 fc00 	bl	80258d8 <GUI_ALLOC_h2p>
 801c0d8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c0dc:	f007 f87c 	bl	80231d8 <GUI_Unlock>
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	bd10      	pop	{r4, pc}

0801c0e4 <WM_GetParent>:
 801c0e4:	b510      	push	{r4, lr}
 801c0e6:	4604      	mov	r4, r0
 801c0e8:	b138      	cbz	r0, 801c0fa <WM_GetParent+0x16>
 801c0ea:	f007 f87f 	bl	80231ec <GUI_Lock>
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f009 fbf2 	bl	80258d8 <GUI_ALLOC_h2p>
 801c0f4:	6984      	ldr	r4, [r0, #24]
 801c0f6:	f007 f86f 	bl	80231d8 <GUI_Unlock>
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	bd10      	pop	{r4, pc}
 801c0fe:	bf00      	nop

0801c100 <WM_GetScrollbarH>:
 801c100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c104:	4681      	mov	r9, r0
 801c106:	b085      	sub	sp, #20
 801c108:	b920      	cbnz	r0, 801c114 <WM_GetScrollbarH+0x14>
 801c10a:	4604      	mov	r4, r0
 801c10c:	4620      	mov	r0, r4
 801c10e:	b005      	add	sp, #20
 801c110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c114:	f007 f86a 	bl	80231ec <GUI_Lock>
 801c118:	4648      	mov	r0, r9
 801c11a:	f009 fbdd 	bl	80258d8 <GUI_ALLOC_h2p>
 801c11e:	69c4      	ldr	r4, [r0, #28]
 801c120:	b1f4      	cbz	r4, 801c160 <WM_GetScrollbarH+0x60>
 801c122:	466e      	mov	r6, sp
 801c124:	466f      	mov	r7, sp
 801c126:	2500      	movs	r5, #0
 801c128:	f04f 0815 	mov.w	r8, #21
 801c12c:	e003      	b.n	801c136 <WM_GetScrollbarH+0x36>
 801c12e:	f009 fbd3 	bl	80258d8 <GUI_ALLOC_h2p>
 801c132:	6a04      	ldr	r4, [r0, #32]
 801c134:	b1a4      	cbz	r4, 801c160 <WM_GetScrollbarH+0x60>
 801c136:	4620      	mov	r0, r4
 801c138:	4669      	mov	r1, sp
 801c13a:	6035      	str	r5, [r6, #0]
 801c13c:	9501      	str	r5, [sp, #4]
 801c13e:	9502      	str	r5, [sp, #8]
 801c140:	9503      	str	r5, [sp, #12]
 801c142:	f8cd 8000 	str.w	r8, [sp]
 801c146:	f001 ff69 	bl	801e01c <WM_SendMessage>
 801c14a:	9b03      	ldr	r3, [sp, #12]
 801c14c:	2bff      	cmp	r3, #255	; 0xff
 801c14e:	4620      	mov	r0, r4
 801c150:	463e      	mov	r6, r7
 801c152:	d1ec      	bne.n	801c12e <WM_GetScrollbarH+0x2e>
 801c154:	f007 f840 	bl	80231d8 <GUI_Unlock>
 801c158:	4620      	mov	r0, r4
 801c15a:	b005      	add	sp, #20
 801c15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c160:	4648      	mov	r0, r9
 801c162:	f009 fbb9 	bl	80258d8 <GUI_ALLOC_h2p>
 801c166:	69c5      	ldr	r5, [r0, #28]
 801c168:	b925      	cbnz	r5, 801c174 <WM_GetScrollbarH+0x74>
 801c16a:	e00c      	b.n	801c186 <WM_GetScrollbarH+0x86>
 801c16c:	f009 fbb4 	bl	80258d8 <GUI_ALLOC_h2p>
 801c170:	6a05      	ldr	r5, [r0, #32]
 801c172:	b145      	cbz	r5, 801c186 <WM_GetScrollbarH+0x86>
 801c174:	4628      	mov	r0, r5
 801c176:	21ff      	movs	r1, #255	; 0xff
 801c178:	f7ff fbea 	bl	801b950 <_GetDialogItem>
 801c17c:	4604      	mov	r4, r0
 801c17e:	4628      	mov	r0, r5
 801c180:	2c00      	cmp	r4, #0
 801c182:	d0f3      	beq.n	801c16c <WM_GetScrollbarH+0x6c>
 801c184:	e7e6      	b.n	801c154 <WM_GetScrollbarH+0x54>
 801c186:	2400      	movs	r4, #0
 801c188:	f007 f826 	bl	80231d8 <GUI_Unlock>
 801c18c:	e7e4      	b.n	801c158 <WM_GetScrollbarH+0x58>
 801c18e:	bf00      	nop

0801c190 <WM_GetScrollbarV>:
 801c190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c194:	4681      	mov	r9, r0
 801c196:	b085      	sub	sp, #20
 801c198:	b920      	cbnz	r0, 801c1a4 <WM_GetScrollbarV+0x14>
 801c19a:	4604      	mov	r4, r0
 801c19c:	4620      	mov	r0, r4
 801c19e:	b005      	add	sp, #20
 801c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1a4:	f007 f822 	bl	80231ec <GUI_Lock>
 801c1a8:	4648      	mov	r0, r9
 801c1aa:	f009 fb95 	bl	80258d8 <GUI_ALLOC_h2p>
 801c1ae:	69c4      	ldr	r4, [r0, #28]
 801c1b0:	b1f4      	cbz	r4, 801c1f0 <WM_GetScrollbarV+0x60>
 801c1b2:	466e      	mov	r6, sp
 801c1b4:	466f      	mov	r7, sp
 801c1b6:	2500      	movs	r5, #0
 801c1b8:	f04f 0815 	mov.w	r8, #21
 801c1bc:	e003      	b.n	801c1c6 <WM_GetScrollbarV+0x36>
 801c1be:	f009 fb8b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c1c2:	6a04      	ldr	r4, [r0, #32]
 801c1c4:	b1a4      	cbz	r4, 801c1f0 <WM_GetScrollbarV+0x60>
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	4669      	mov	r1, sp
 801c1ca:	6035      	str	r5, [r6, #0]
 801c1cc:	9501      	str	r5, [sp, #4]
 801c1ce:	9502      	str	r5, [sp, #8]
 801c1d0:	9503      	str	r5, [sp, #12]
 801c1d2:	f8cd 8000 	str.w	r8, [sp]
 801c1d6:	f001 ff21 	bl	801e01c <WM_SendMessage>
 801c1da:	9b03      	ldr	r3, [sp, #12]
 801c1dc:	2bfe      	cmp	r3, #254	; 0xfe
 801c1de:	4620      	mov	r0, r4
 801c1e0:	463e      	mov	r6, r7
 801c1e2:	d1ec      	bne.n	801c1be <WM_GetScrollbarV+0x2e>
 801c1e4:	f006 fff8 	bl	80231d8 <GUI_Unlock>
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	b005      	add	sp, #20
 801c1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1f0:	4648      	mov	r0, r9
 801c1f2:	f009 fb71 	bl	80258d8 <GUI_ALLOC_h2p>
 801c1f6:	69c5      	ldr	r5, [r0, #28]
 801c1f8:	b925      	cbnz	r5, 801c204 <WM_GetScrollbarV+0x74>
 801c1fa:	e00c      	b.n	801c216 <WM_GetScrollbarV+0x86>
 801c1fc:	f009 fb6c 	bl	80258d8 <GUI_ALLOC_h2p>
 801c200:	6a05      	ldr	r5, [r0, #32]
 801c202:	b145      	cbz	r5, 801c216 <WM_GetScrollbarV+0x86>
 801c204:	4628      	mov	r0, r5
 801c206:	21fe      	movs	r1, #254	; 0xfe
 801c208:	f7ff fba2 	bl	801b950 <_GetDialogItem>
 801c20c:	4604      	mov	r4, r0
 801c20e:	4628      	mov	r0, r5
 801c210:	2c00      	cmp	r4, #0
 801c212:	d0f3      	beq.n	801c1fc <WM_GetScrollbarV+0x6c>
 801c214:	e7e6      	b.n	801c1e4 <WM_GetScrollbarV+0x54>
 801c216:	2400      	movs	r4, #0
 801c218:	f006 ffde 	bl	80231d8 <GUI_Unlock>
 801c21c:	e7e4      	b.n	801c1e8 <WM_GetScrollbarV+0x58>
 801c21e:	bf00      	nop

0801c220 <WM_GetScrollPartner>:
 801c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c224:	b086      	sub	sp, #24
 801c226:	f10d 0818 	add.w	r8, sp, #24
 801c22a:	2315      	movs	r3, #21
 801c22c:	f848 3d10 	str.w	r3, [r8, #-16]!
 801c230:	2300      	movs	r3, #0
 801c232:	4641      	mov	r1, r8
 801c234:	9303      	str	r3, [sp, #12]
 801c236:	9304      	str	r3, [sp, #16]
 801c238:	9305      	str	r3, [sp, #20]
 801c23a:	4604      	mov	r4, r0
 801c23c:	f001 feee 	bl	801e01c <WM_SendMessage>
 801c240:	9f05      	ldr	r7, [sp, #20]
 801c242:	2fff      	cmp	r7, #255	; 0xff
 801c244:	d071      	beq.n	801c32a <WM_GetScrollPartner+0x10a>
 801c246:	2ffe      	cmp	r7, #254	; 0xfe
 801c248:	bf08      	it	eq
 801c24a:	27ff      	moveq	r7, #255	; 0xff
 801c24c:	b924      	cbnz	r4, 801c258 <WM_GetScrollPartner+0x38>
 801c24e:	2400      	movs	r4, #0
 801c250:	4620      	mov	r0, r4
 801c252:	b006      	add	sp, #24
 801c254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c258:	f006 ffc8 	bl	80231ec <GUI_Lock>
 801c25c:	4620      	mov	r0, r4
 801c25e:	f009 fb3b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c262:	6984      	ldr	r4, [r0, #24]
 801c264:	f006 ffb8 	bl	80231d8 <GUI_Unlock>
 801c268:	2c00      	cmp	r4, #0
 801c26a:	d0f0      	beq.n	801c24e <WM_GetScrollPartner+0x2e>
 801c26c:	f006 ffbe 	bl	80231ec <GUI_Lock>
 801c270:	4620      	mov	r0, r4
 801c272:	f009 fb3b 	bl	80258ec <GUI_ALLOC_LockH>
 801c276:	ab06      	add	r3, sp, #24
 801c278:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801c27c:	f843 0d14 	str.w	r0, [r3, #-20]!
 801c280:	4618      	mov	r0, r3
 801c282:	f009 fb45 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c286:	f1ba 0f00 	cmp.w	sl, #0
 801c28a:	d04c      	beq.n	801c326 <WM_GetScrollPartner+0x106>
 801c28c:	2500      	movs	r5, #0
 801c28e:	f04f 0915 	mov.w	r9, #21
 801c292:	4650      	mov	r0, sl
 801c294:	a902      	add	r1, sp, #8
 801c296:	f8c8 5000 	str.w	r5, [r8]
 801c29a:	9503      	str	r5, [sp, #12]
 801c29c:	9504      	str	r5, [sp, #16]
 801c29e:	9505      	str	r5, [sp, #20]
 801c2a0:	f8cd 9008 	str.w	r9, [sp, #8]
 801c2a4:	f001 feba 	bl	801e01c <WM_SendMessage>
 801c2a8:	9b05      	ldr	r3, [sp, #20]
 801c2aa:	429f      	cmp	r7, r3
 801c2ac:	f10d 0808 	add.w	r8, sp, #8
 801c2b0:	d03d      	beq.n	801c32e <WM_GetScrollPartner+0x10e>
 801c2b2:	4650      	mov	r0, sl
 801c2b4:	f009 fb10 	bl	80258d8 <GUI_ALLOC_h2p>
 801c2b8:	69c4      	ldr	r4, [r0, #28]
 801c2ba:	b924      	cbnz	r4, 801c2c6 <WM_GetScrollPartner+0xa6>
 801c2bc:	e018      	b.n	801c2f0 <WM_GetScrollPartner+0xd0>
 801c2be:	f009 fb0b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c2c2:	6a04      	ldr	r4, [r0, #32]
 801c2c4:	b1a4      	cbz	r4, 801c2f0 <WM_GetScrollPartner+0xd0>
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	a902      	add	r1, sp, #8
 801c2ca:	9503      	str	r5, [sp, #12]
 801c2cc:	9504      	str	r5, [sp, #16]
 801c2ce:	9505      	str	r5, [sp, #20]
 801c2d0:	f8cd 9008 	str.w	r9, [sp, #8]
 801c2d4:	f001 fea2 	bl	801e01c <WM_SendMessage>
 801c2d8:	9b05      	ldr	r3, [sp, #20]
 801c2da:	429f      	cmp	r7, r3
 801c2dc:	4620      	mov	r0, r4
 801c2de:	f10d 0808 	add.w	r8, sp, #8
 801c2e2:	d1ec      	bne.n	801c2be <WM_GetScrollPartner+0x9e>
 801c2e4:	f006 ff78 	bl	80231d8 <GUI_Unlock>
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	b006      	add	sp, #24
 801c2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2f0:	4650      	mov	r0, sl
 801c2f2:	f009 faf1 	bl	80258d8 <GUI_ALLOC_h2p>
 801c2f6:	69c6      	ldr	r6, [r0, #28]
 801c2f8:	b926      	cbnz	r6, 801c304 <WM_GetScrollPartner+0xe4>
 801c2fa:	e00c      	b.n	801c316 <WM_GetScrollPartner+0xf6>
 801c2fc:	f009 faec 	bl	80258d8 <GUI_ALLOC_h2p>
 801c300:	6a06      	ldr	r6, [r0, #32]
 801c302:	b146      	cbz	r6, 801c316 <WM_GetScrollPartner+0xf6>
 801c304:	4630      	mov	r0, r6
 801c306:	4639      	mov	r1, r7
 801c308:	f7ff fb22 	bl	801b950 <_GetDialogItem>
 801c30c:	4604      	mov	r4, r0
 801c30e:	4630      	mov	r0, r6
 801c310:	2c00      	cmp	r4, #0
 801c312:	d0f3      	beq.n	801c2fc <WM_GetScrollPartner+0xdc>
 801c314:	e7e6      	b.n	801c2e4 <WM_GetScrollPartner+0xc4>
 801c316:	4650      	mov	r0, sl
 801c318:	f009 fade 	bl	80258d8 <GUI_ALLOC_h2p>
 801c31c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801c320:	f1ba 0f00 	cmp.w	sl, #0
 801c324:	d1b5      	bne.n	801c292 <WM_GetScrollPartner+0x72>
 801c326:	2400      	movs	r4, #0
 801c328:	e7dc      	b.n	801c2e4 <WM_GetScrollPartner+0xc4>
 801c32a:	27fe      	movs	r7, #254	; 0xfe
 801c32c:	e78e      	b.n	801c24c <WM_GetScrollPartner+0x2c>
 801c32e:	4654      	mov	r4, sl
 801c330:	f006 ff52 	bl	80231d8 <GUI_Unlock>
 801c334:	e7d8      	b.n	801c2e8 <WM_GetScrollPartner+0xc8>
 801c336:	bf00      	nop

0801c338 <WM_GetScrollState>:
 801c338:	b500      	push	{lr}
 801c33a:	b085      	sub	sp, #20
 801c33c:	2323      	movs	r3, #35	; 0x23
 801c33e:	9103      	str	r1, [sp, #12]
 801c340:	4669      	mov	r1, sp
 801c342:	9300      	str	r3, [sp, #0]
 801c344:	f001 fe6a 	bl	801e01c <WM_SendMessage>
 801c348:	b005      	add	sp, #20
 801c34a:	f85d fb04 	ldr.w	pc, [sp], #4
 801c34e:	bf00      	nop

0801c350 <WM_GetWindowRectEx>:
 801c350:	b538      	push	{r3, r4, r5, lr}
 801c352:	4605      	mov	r5, r0
 801c354:	460c      	mov	r4, r1
 801c356:	b168      	cbz	r0, 801c374 <WM_GetWindowRectEx+0x24>
 801c358:	b161      	cbz	r1, 801c374 <WM_GetWindowRectEx+0x24>
 801c35a:	f006 ff47 	bl	80231ec <GUI_Lock>
 801c35e:	4628      	mov	r0, r5
 801c360:	f009 faba 	bl	80258d8 <GUI_ALLOC_h2p>
 801c364:	4603      	mov	r3, r0
 801c366:	cb03      	ldmia	r3!, {r0, r1}
 801c368:	6020      	str	r0, [r4, #0]
 801c36a:	6061      	str	r1, [r4, #4]
 801c36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c370:	f006 bf32 	b.w	80231d8 <GUI_Unlock>
 801c374:	bd38      	pop	{r3, r4, r5, pc}
 801c376:	bf00      	nop

0801c378 <WM_HasCaptured>:
 801c378:	4a04      	ldr	r2, [pc, #16]	; (801c38c <WM_HasCaptured+0x14>)
 801c37a:	4b05      	ldr	r3, [pc, #20]	; (801c390 <WM_HasCaptured+0x18>)
 801c37c:	6812      	ldr	r2, [r2, #0]
 801c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c382:	1a1b      	subs	r3, r3, r0
 801c384:	4258      	negs	r0, r3
 801c386:	4158      	adcs	r0, r3
 801c388:	4770      	bx	lr
 801c38a:	bf00      	nop
 801c38c:	2002cb78 	.word	0x2002cb78
 801c390:	2002cb9c 	.word	0x2002cb9c

0801c394 <WM_HasFocus>:
 801c394:	4a04      	ldr	r2, [pc, #16]	; (801c3a8 <WM_HasFocus+0x14>)
 801c396:	4b05      	ldr	r3, [pc, #20]	; (801c3ac <WM_HasFocus+0x18>)
 801c398:	6812      	ldr	r2, [r2, #0]
 801c39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c39e:	1a1b      	subs	r3, r3, r0
 801c3a0:	4258      	negs	r0, r3
 801c3a2:	4158      	adcs	r0, r3
 801c3a4:	4770      	bx	lr
 801c3a6:	bf00      	nop
 801c3a8:	2002cb78 	.word	0x2002cb78
 801c3ac:	2002cb68 	.word	0x2002cb68

0801c3b0 <WM_IsFocusable>:
 801c3b0:	b530      	push	{r4, r5, lr}
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	b085      	sub	sp, #20
 801c3b6:	b910      	cbnz	r0, 801c3be <WM_IsFocusable+0xe>
 801c3b8:	2000      	movs	r0, #0
 801c3ba:	b005      	add	sp, #20
 801c3bc:	bd30      	pop	{r4, r5, pc}
 801c3be:	f006 ff15 	bl	80231ec <GUI_Lock>
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	f009 fa88 	bl	80258d8 <GUI_ALLOC_h2p>
 801c3c8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801c3ca:	f006 ff05 	bl	80231d8 <GUI_Unlock>
 801c3ce:	07ab      	lsls	r3, r5, #30
 801c3d0:	d5f2      	bpl.n	801c3b8 <WM_IsFocusable+0x8>
 801c3d2:	f015 0510 	ands.w	r5, r5, #16
 801c3d6:	d1ef      	bne.n	801c3b8 <WM_IsFocusable+0x8>
 801c3d8:	a904      	add	r1, sp, #16
 801c3da:	231f      	movs	r3, #31
 801c3dc:	f841 3d10 	str.w	r3, [r1, #-16]!
 801c3e0:	4620      	mov	r0, r4
 801c3e2:	4669      	mov	r1, sp
 801c3e4:	9503      	str	r5, [sp, #12]
 801c3e6:	f001 fe19 	bl	801e01c <WM_SendMessage>
 801c3ea:	9803      	ldr	r0, [sp, #12]
 801c3ec:	e7e5      	b.n	801c3ba <WM_IsFocusable+0xa>
 801c3ee:	bf00      	nop

0801c3f0 <WM_IsWindow>:
 801c3f0:	b510      	push	{r4, lr}
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	f006 fefa 	bl	80231ec <GUI_Lock>
 801c3f8:	4620      	mov	r0, r4
 801c3fa:	f001 f823 	bl	801d444 <WM__IsWindow>
 801c3fe:	4604      	mov	r4, r0
 801c400:	f006 feea 	bl	80231d8 <GUI_Unlock>
 801c404:	4620      	mov	r0, r4
 801c406:	bd10      	pop	{r4, pc}

0801c408 <WM_NotifyParent>:
 801c408:	b530      	push	{r4, r5, lr}
 801c40a:	b085      	sub	sp, #20
 801c40c:	4604      	mov	r4, r0
 801c40e:	2326      	movs	r3, #38	; 0x26
 801c410:	9103      	str	r1, [sp, #12]
 801c412:	9300      	str	r3, [sp, #0]
 801c414:	f006 feea 	bl	80231ec <GUI_Lock>
 801c418:	b91c      	cbnz	r4, 801c422 <WM_NotifyParent+0x1a>
 801c41a:	f006 fedd 	bl	80231d8 <GUI_Unlock>
 801c41e:	b005      	add	sp, #20
 801c420:	bd30      	pop	{r4, r5, pc}
 801c422:	f006 fee3 	bl	80231ec <GUI_Lock>
 801c426:	4620      	mov	r0, r4
 801c428:	f009 fa56 	bl	80258d8 <GUI_ALLOC_h2p>
 801c42c:	6985      	ldr	r5, [r0, #24]
 801c42e:	f006 fed3 	bl	80231d8 <GUI_Unlock>
 801c432:	2d00      	cmp	r5, #0
 801c434:	d0f1      	beq.n	801c41a <WM_NotifyParent+0x12>
 801c436:	4628      	mov	r0, r5
 801c438:	4669      	mov	r1, sp
 801c43a:	9402      	str	r4, [sp, #8]
 801c43c:	f7fe fd0c 	bl	801ae58 <WM__SendMessage>
 801c440:	f006 feca 	bl	80231d8 <GUI_Unlock>
 801c444:	b005      	add	sp, #20
 801c446:	bd30      	pop	{r4, r5, pc}

0801c448 <WM_OnKey>:
 801c448:	b530      	push	{r4, r5, lr}
 801c44a:	b087      	sub	sp, #28
 801c44c:	4605      	mov	r5, r0
 801c44e:	460c      	mov	r4, r1
 801c450:	f006 fecc 	bl	80231ec <GUI_Lock>
 801c454:	4a0d      	ldr	r2, [pc, #52]	; (801c48c <WM_OnKey+0x44>)
 801c456:	4b0e      	ldr	r3, [pc, #56]	; (801c490 <WM_OnKey+0x48>)
 801c458:	6812      	ldr	r2, [r2, #0]
 801c45a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c45e:	b928      	cbnz	r0, 801c46c <WM_OnKey+0x24>
 801c460:	4604      	mov	r4, r0
 801c462:	f006 feb9 	bl	80231d8 <GUI_Unlock>
 801c466:	4620      	mov	r0, r4
 801c468:	b007      	add	sp, #28
 801c46a:	bd30      	pop	{r4, r5, pc}
 801c46c:	230e      	movs	r3, #14
 801c46e:	a902      	add	r1, sp, #8
 801c470:	9302      	str	r3, [sp, #8]
 801c472:	ab00      	add	r3, sp, #0
 801c474:	9401      	str	r4, [sp, #4]
 801c476:	9305      	str	r3, [sp, #20]
 801c478:	9500      	str	r5, [sp, #0]
 801c47a:	f7fe fced 	bl	801ae58 <WM__SendMessage>
 801c47e:	f006 feab 	bl	80231d8 <GUI_Unlock>
 801c482:	2401      	movs	r4, #1
 801c484:	4620      	mov	r0, r4
 801c486:	b007      	add	sp, #28
 801c488:	bd30      	pop	{r4, r5, pc}
 801c48a:	bf00      	nop
 801c48c:	2002cb78 	.word	0x2002cb78
 801c490:	2002cb68 	.word	0x2002cb68

0801c494 <WM_ResizeWindow>:
 801c494:	b410      	push	{r4}
 801c496:	ea51 0402 	orrs.w	r4, r1, r2
 801c49a:	d000      	beq.n	801c49e <WM_ResizeWindow+0xa>
 801c49c:	b910      	cbnz	r0, 801c4a4 <WM_ResizeWindow+0x10>
 801c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4a2:	4770      	bx	lr
 801c4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4a8:	f7ff b9ce 	b.w	801b848 <WM_ResizeWindow.part.7>

0801c4ac <WM_SendMessageNoPara>:
 801c4ac:	b538      	push	{r3, r4, r5, lr}
 801c4ae:	4605      	mov	r5, r0
 801c4b0:	460c      	mov	r4, r1
 801c4b2:	f006 fe9b 	bl	80231ec <GUI_Lock>
 801c4b6:	4628      	mov	r0, r5
 801c4b8:	4621      	mov	r1, r4
 801c4ba:	f7fe fceb 	bl	801ae94 <WM__SendMessageNoPara>
 801c4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4c2:	f006 be89 	b.w	80231d8 <GUI_Unlock>
 801c4c6:	bf00      	nop

0801c4c8 <WM_SendToParent>:
 801c4c8:	b570      	push	{r4, r5, r6, lr}
 801c4ca:	460c      	mov	r4, r1
 801c4cc:	4605      	mov	r5, r0
 801c4ce:	b1c9      	cbz	r1, 801c504 <WM_SendToParent+0x3c>
 801c4d0:	f006 fe8c 	bl	80231ec <GUI_Lock>
 801c4d4:	b91d      	cbnz	r5, 801c4de <WM_SendToParent+0x16>
 801c4d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4da:	f006 be7d 	b.w	80231d8 <GUI_Unlock>
 801c4de:	f006 fe85 	bl	80231ec <GUI_Lock>
 801c4e2:	4628      	mov	r0, r5
 801c4e4:	f009 f9f8 	bl	80258d8 <GUI_ALLOC_h2p>
 801c4e8:	6986      	ldr	r6, [r0, #24]
 801c4ea:	f006 fe75 	bl	80231d8 <GUI_Unlock>
 801c4ee:	2e00      	cmp	r6, #0
 801c4f0:	d0f1      	beq.n	801c4d6 <WM_SendToParent+0xe>
 801c4f2:	60a5      	str	r5, [r4, #8]
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	4621      	mov	r1, r4
 801c4f8:	f7fe fcae 	bl	801ae58 <WM__SendMessage>
 801c4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c500:	f006 be6a 	b.w	80231d8 <GUI_Unlock>
 801c504:	bd70      	pop	{r4, r5, r6, pc}
 801c506:	bf00      	nop

0801c508 <WM_SetFocus>:
 801c508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c50c:	b087      	sub	sp, #28
 801c50e:	2500      	movs	r5, #0
 801c510:	4604      	mov	r4, r0
 801c512:	9502      	str	r5, [sp, #8]
 801c514:	9503      	str	r5, [sp, #12]
 801c516:	9504      	str	r5, [sp, #16]
 801c518:	9505      	str	r5, [sp, #20]
 801c51a:	f006 fe67 	bl	80231ec <GUI_Lock>
 801c51e:	2c00      	cmp	r4, #0
 801c520:	d050      	beq.n	801c5c4 <WM_SetFocus+0xbc>
 801c522:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801c5dc <WM_SetFocus+0xd4>
 801c526:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801c5e0 <WM_SetFocus+0xd8>
 801c52a:	f8d9 3000 	ldr.w	r3, [r9]
 801c52e:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 801c532:	42a0      	cmp	r0, r4
 801c534:	d046      	beq.n	801c5c4 <WM_SetFocus+0xbc>
 801c536:	231e      	movs	r3, #30
 801c538:	e88d 0011 	stmia.w	sp, {r0, r4}
 801c53c:	9505      	str	r5, [sp, #20]
 801c53e:	9302      	str	r3, [sp, #8]
 801c540:	af02      	add	r7, sp, #8
 801c542:	2800      	cmp	r0, #0
 801c544:	d145      	bne.n	801c5d2 <WM_SetFocus+0xca>
 801c546:	2301      	movs	r3, #1
 801c548:	4620      	mov	r0, r4
 801c54a:	4639      	mov	r1, r7
 801c54c:	9305      	str	r3, [sp, #20]
 801c54e:	f7fe fc83 	bl	801ae58 <WM__SendMessage>
 801c552:	9e05      	ldr	r6, [sp, #20]
 801c554:	2e00      	cmp	r6, #0
 801c556:	d136      	bne.n	801c5c6 <WM_SetFocus+0xbe>
 801c558:	f8d9 3000 	ldr.w	r3, [r9]
 801c55c:	2520      	movs	r5, #32
 801c55e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
 801c562:	e004      	b.n	801c56e <WM_SetFocus+0x66>
 801c564:	ab00      	add	r3, sp, #0
 801c566:	9502      	str	r5, [sp, #8]
 801c568:	9305      	str	r3, [sp, #20]
 801c56a:	f7fe fc75 	bl	801ae58 <WM__SendMessage>
 801c56e:	f006 fe3d 	bl	80231ec <GUI_Lock>
 801c572:	4620      	mov	r0, r4
 801c574:	f009 f9b0 	bl	80258d8 <GUI_ALLOC_h2p>
 801c578:	6984      	ldr	r4, [r0, #24]
 801c57a:	f006 fe2d 	bl	80231d8 <GUI_Unlock>
 801c57e:	4620      	mov	r0, r4
 801c580:	4639      	mov	r1, r7
 801c582:	2c00      	cmp	r4, #0
 801c584:	d1ee      	bne.n	801c564 <WM_SetFocus+0x5c>
 801c586:	9c00      	ldr	r4, [sp, #0]
 801c588:	f006 fe30 	bl	80231ec <GUI_Lock>
 801c58c:	4620      	mov	r0, r4
 801c58e:	f000 ff59 	bl	801d444 <WM__IsWindow>
 801c592:	4605      	mov	r5, r0
 801c594:	f006 fe20 	bl	80231d8 <GUI_Unlock>
 801c598:	b1ad      	cbz	r5, 801c5c6 <WM_SetFocus+0xbe>
 801c59a:	b1a4      	cbz	r4, 801c5c6 <WM_SetFocus+0xbe>
 801c59c:	2520      	movs	r5, #32
 801c59e:	e004      	b.n	801c5aa <WM_SetFocus+0xa2>
 801c5a0:	ab00      	add	r3, sp, #0
 801c5a2:	9502      	str	r5, [sp, #8]
 801c5a4:	9305      	str	r3, [sp, #20]
 801c5a6:	f7fe fc57 	bl	801ae58 <WM__SendMessage>
 801c5aa:	f006 fe1f 	bl	80231ec <GUI_Lock>
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	f009 f992 	bl	80258d8 <GUI_ALLOC_h2p>
 801c5b4:	6984      	ldr	r4, [r0, #24]
 801c5b6:	f006 fe0f 	bl	80231d8 <GUI_Unlock>
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	4639      	mov	r1, r7
 801c5be:	2c00      	cmp	r4, #0
 801c5c0:	d1ee      	bne.n	801c5a0 <WM_SetFocus+0x98>
 801c5c2:	e000      	b.n	801c5c6 <WM_SetFocus+0xbe>
 801c5c4:	2601      	movs	r6, #1
 801c5c6:	f006 fe07 	bl	80231d8 <GUI_Unlock>
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	b007      	add	sp, #28
 801c5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5d2:	4639      	mov	r1, r7
 801c5d4:	f7fe fc40 	bl	801ae58 <WM__SendMessage>
 801c5d8:	e7b5      	b.n	801c546 <WM_SetFocus+0x3e>
 801c5da:	bf00      	nop
 801c5dc:	2002cb78 	.word	0x2002cb78
 801c5e0:	2002cb68 	.word	0x2002cb68

0801c5e4 <WM_SetScrollState>:
 801c5e4:	b500      	push	{lr}
 801c5e6:	460b      	mov	r3, r1
 801c5e8:	b085      	sub	sp, #20
 801c5ea:	b130      	cbz	r0, 801c5fa <WM_SetScrollState+0x16>
 801c5ec:	b129      	cbz	r1, 801c5fa <WM_SetScrollState+0x16>
 801c5ee:	2224      	movs	r2, #36	; 0x24
 801c5f0:	4669      	mov	r1, sp
 801c5f2:	9303      	str	r3, [sp, #12]
 801c5f4:	9200      	str	r2, [sp, #0]
 801c5f6:	f001 fd11 	bl	801e01c <WM_SendMessage>
 801c5fa:	b005      	add	sp, #20
 801c5fc:	f85d fb04 	ldr.w	pc, [sp], #4

0801c600 <WM_SetSize>:
 801c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c602:	4604      	mov	r4, r0
 801c604:	b083      	sub	sp, #12
 801c606:	460d      	mov	r5, r1
 801c608:	4616      	mov	r6, r2
 801c60a:	b908      	cbnz	r0, 801c610 <WM_SetSize+0x10>
 801c60c:	b003      	add	sp, #12
 801c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c610:	f006 fdec 	bl	80231ec <GUI_Lock>
 801c614:	4620      	mov	r0, r4
 801c616:	f009 f969 	bl	80258ec <GUI_ALLOC_LockH>
 801c61a:	4603      	mov	r3, r0
 801c61c:	a802      	add	r0, sp, #8
 801c61e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c622:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 801c626:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 801c62a:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 801c62e:	f840 3d04 	str.w	r3, [r0, #-4]!
 801c632:	ebc2 020e 	rsb	r2, r2, lr
 801c636:	1a7b      	subs	r3, r7, r1
 801c638:	43db      	mvns	r3, r3
 801c63a:	43d2      	mvns	r2, r2
 801c63c:	4415      	add	r5, r2
 801c63e:	441e      	add	r6, r3
 801c640:	f009 f966 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c644:	ea56 0305 	orrs.w	r3, r6, r5
 801c648:	d103      	bne.n	801c652 <WM_SetSize+0x52>
 801c64a:	f006 fdc5 	bl	80231d8 <GUI_Unlock>
 801c64e:	b003      	add	sp, #12
 801c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c652:	4620      	mov	r0, r4
 801c654:	4629      	mov	r1, r5
 801c656:	4632      	mov	r2, r6
 801c658:	f7ff f8f6 	bl	801b848 <WM_ResizeWindow.part.7>
 801c65c:	e7f5      	b.n	801c64a <WM_SetSize+0x4a>
 801c65e:	bf00      	nop

0801c660 <WM_SetUserClipRect>:
 801c660:	b538      	push	{r3, r4, r5, lr}
 801c662:	4605      	mov	r5, r0
 801c664:	f006 fdc2 	bl	80231ec <GUI_Lock>
 801c668:	4b04      	ldr	r3, [pc, #16]	; (801c67c <WM_SetUserClipRect+0x1c>)
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801c66e:	645d      	str	r5, [r3, #68]	; 0x44
 801c670:	f000 fdc8 	bl	801d204 <WM__ActivateClipRect>
 801c674:	f006 fdb0 	bl	80231d8 <GUI_Unlock>
 801c678:	4620      	mov	r0, r4
 801c67a:	bd38      	pop	{r3, r4, r5, pc}
 801c67c:	20000280 	.word	0x20000280

0801c680 <WM_SetWindowPos>:
 801c680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c684:	4604      	mov	r4, r0
 801c686:	b083      	sub	sp, #12
 801c688:	460e      	mov	r6, r1
 801c68a:	4615      	mov	r5, r2
 801c68c:	4698      	mov	r8, r3
 801c68e:	b938      	cbnz	r0, 801c6a0 <WM_SetWindowPos+0x20>
 801c690:	4620      	mov	r0, r4
 801c692:	4631      	mov	r1, r6
 801c694:	462a      	mov	r2, r5
 801c696:	f7ff f8b7 	bl	801b808 <WM_MoveTo>
 801c69a:	b003      	add	sp, #12
 801c69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c6a0:	f006 fda4 	bl	80231ec <GUI_Lock>
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f009 f921 	bl	80258ec <GUI_ALLOC_LockH>
 801c6aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c6ae:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c6b2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c6b6:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801c6ba:	af02      	add	r7, sp, #8
 801c6bc:	1acb      	subs	r3, r1, r3
 801c6be:	43db      	mvns	r3, r3
 801c6c0:	f847 0d04 	str.w	r0, [r7, #-4]!
 801c6c4:	ebc2 0909 	rsb	r9, r2, r9
 801c6c8:	4498      	add	r8, r3
 801c6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6cc:	ea6f 0909 	mvn.w	r9, r9
 801c6d0:	4499      	add	r9, r3
 801c6d2:	4638      	mov	r0, r7
 801c6d4:	f009 f91c 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c6d8:	ea58 0309 	orrs.w	r3, r8, r9
 801c6dc:	d102      	bne.n	801c6e4 <WM_SetWindowPos+0x64>
 801c6de:	f006 fd7b 	bl	80231d8 <GUI_Unlock>
 801c6e2:	e7d5      	b.n	801c690 <WM_SetWindowPos+0x10>
 801c6e4:	4641      	mov	r1, r8
 801c6e6:	464a      	mov	r2, r9
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	f7ff f8ad 	bl	801b848 <WM_ResizeWindow.part.7>
 801c6ee:	e7f6      	b.n	801c6de <WM_SetWindowPos+0x5e>

0801c6f0 <WM_InvalidateWindowAndDescs>:
 801c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f4:	4604      	mov	r4, r0
 801c6f6:	b083      	sub	sp, #12
 801c6f8:	f006 fd78 	bl	80231ec <GUI_Lock>
 801c6fc:	b924      	cbnz	r4, 801c708 <WM_InvalidateWindowAndDescs+0x18>
 801c6fe:	b003      	add	sp, #12
 801c700:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c704:	f006 bd68 	b.w	80231d8 <GUI_Unlock>
 801c708:	4620      	mov	r0, r4
 801c70a:	f001 fd79 	bl	801e200 <WM_InvalidateWindow>
 801c70e:	f006 fd6d 	bl	80231ec <GUI_Lock>
 801c712:	4620      	mov	r0, r4
 801c714:	f009 f8e0 	bl	80258d8 <GUI_ALLOC_h2p>
 801c718:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801c71c:	f006 fd5c 	bl	80231d8 <GUI_Unlock>
 801c720:	f1b8 0f00 	cmp.w	r8, #0
 801c724:	d0eb      	beq.n	801c6fe <WM_InvalidateWindowAndDescs+0xe>
 801c726:	f006 fd61 	bl	80231ec <GUI_Lock>
 801c72a:	4640      	mov	r0, r8
 801c72c:	f001 fd68 	bl	801e200 <WM_InvalidateWindow>
 801c730:	f006 fd5c 	bl	80231ec <GUI_Lock>
 801c734:	4640      	mov	r0, r8
 801c736:	f009 f8cf 	bl	80258d8 <GUI_ALLOC_h2p>
 801c73a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801c73e:	f006 fd4b 	bl	80231d8 <GUI_Unlock>
 801c742:	f1b9 0f00 	cmp.w	r9, #0
 801c746:	f000 80b8 	beq.w	801c8ba <WM_InvalidateWindowAndDescs+0x1ca>
 801c74a:	f006 fd4f 	bl	80231ec <GUI_Lock>
 801c74e:	4648      	mov	r0, r9
 801c750:	f001 fd56 	bl	801e200 <WM_InvalidateWindow>
 801c754:	f006 fd4a 	bl	80231ec <GUI_Lock>
 801c758:	4648      	mov	r0, r9
 801c75a:	f009 f8bd 	bl	80258d8 <GUI_ALLOC_h2p>
 801c75e:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801c762:	f006 fd39 	bl	80231d8 <GUI_Unlock>
 801c766:	f1ba 0f00 	cmp.w	sl, #0
 801c76a:	f000 809b 	beq.w	801c8a4 <WM_InvalidateWindowAndDescs+0x1b4>
 801c76e:	f006 fd3d 	bl	80231ec <GUI_Lock>
 801c772:	4650      	mov	r0, sl
 801c774:	f001 fd44 	bl	801e200 <WM_InvalidateWindow>
 801c778:	f006 fd38 	bl	80231ec <GUI_Lock>
 801c77c:	4650      	mov	r0, sl
 801c77e:	f009 f8ab 	bl	80258d8 <GUI_ALLOC_h2p>
 801c782:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801c786:	f006 fd27 	bl	80231d8 <GUI_Unlock>
 801c78a:	f1bb 0f00 	cmp.w	fp, #0
 801c78e:	d07e      	beq.n	801c88e <WM_InvalidateWindowAndDescs+0x19e>
 801c790:	f006 fd2c 	bl	80231ec <GUI_Lock>
 801c794:	4658      	mov	r0, fp
 801c796:	f001 fd33 	bl	801e200 <WM_InvalidateWindow>
 801c79a:	f006 fd27 	bl	80231ec <GUI_Lock>
 801c79e:	4658      	mov	r0, fp
 801c7a0:	f009 f89a 	bl	80258d8 <GUI_ALLOC_h2p>
 801c7a4:	69c0      	ldr	r0, [r0, #28]
 801c7a6:	9001      	str	r0, [sp, #4]
 801c7a8:	f006 fd16 	bl	80231d8 <GUI_Unlock>
 801c7ac:	9b01      	ldr	r3, [sp, #4]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d063      	beq.n	801c87a <WM_InvalidateWindowAndDescs+0x18a>
 801c7b2:	f006 fd1b 	bl	80231ec <GUI_Lock>
 801c7b6:	9801      	ldr	r0, [sp, #4]
 801c7b8:	f001 fd22 	bl	801e200 <WM_InvalidateWindow>
 801c7bc:	f006 fd16 	bl	80231ec <GUI_Lock>
 801c7c0:	9801      	ldr	r0, [sp, #4]
 801c7c2:	f009 f889 	bl	80258d8 <GUI_ALLOC_h2p>
 801c7c6:	69c6      	ldr	r6, [r0, #28]
 801c7c8:	f006 fd06 	bl	80231d8 <GUI_Unlock>
 801c7cc:	2e00      	cmp	r6, #0
 801c7ce:	d04b      	beq.n	801c868 <WM_InvalidateWindowAndDescs+0x178>
 801c7d0:	f006 fd0c 	bl	80231ec <GUI_Lock>
 801c7d4:	4630      	mov	r0, r6
 801c7d6:	f001 fd13 	bl	801e200 <WM_InvalidateWindow>
 801c7da:	f006 fd07 	bl	80231ec <GUI_Lock>
 801c7de:	4630      	mov	r0, r6
 801c7e0:	f009 f87a 	bl	80258d8 <GUI_ALLOC_h2p>
 801c7e4:	69c5      	ldr	r5, [r0, #28]
 801c7e6:	f006 fcf7 	bl	80231d8 <GUI_Unlock>
 801c7ea:	2d00      	cmp	r5, #0
 801c7ec:	d034      	beq.n	801c858 <WM_InvalidateWindowAndDescs+0x168>
 801c7ee:	f006 fcfd 	bl	80231ec <GUI_Lock>
 801c7f2:	4628      	mov	r0, r5
 801c7f4:	f001 fd04 	bl	801e200 <WM_InvalidateWindow>
 801c7f8:	f006 fcf8 	bl	80231ec <GUI_Lock>
 801c7fc:	4628      	mov	r0, r5
 801c7fe:	f009 f86b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c802:	69c4      	ldr	r4, [r0, #28]
 801c804:	f006 fce8 	bl	80231d8 <GUI_Unlock>
 801c808:	b1f4      	cbz	r4, 801c848 <WM_InvalidateWindowAndDescs+0x158>
 801c80a:	f006 fcef 	bl	80231ec <GUI_Lock>
 801c80e:	4620      	mov	r0, r4
 801c810:	f001 fcf6 	bl	801e200 <WM_InvalidateWindow>
 801c814:	f006 fcea 	bl	80231ec <GUI_Lock>
 801c818:	4620      	mov	r0, r4
 801c81a:	f009 f85d 	bl	80258d8 <GUI_ALLOC_h2p>
 801c81e:	69c7      	ldr	r7, [r0, #28]
 801c820:	f006 fcda 	bl	80231d8 <GUI_Unlock>
 801c824:	b147      	cbz	r7, 801c838 <WM_InvalidateWindowAndDescs+0x148>
 801c826:	4638      	mov	r0, r7
 801c828:	f7ff ff62 	bl	801c6f0 <WM_InvalidateWindowAndDescs>
 801c82c:	4638      	mov	r0, r7
 801c82e:	f009 f853 	bl	80258d8 <GUI_ALLOC_h2p>
 801c832:	6a07      	ldr	r7, [r0, #32]
 801c834:	2f00      	cmp	r7, #0
 801c836:	d1f6      	bne.n	801c826 <WM_InvalidateWindowAndDescs+0x136>
 801c838:	f006 fcce 	bl	80231d8 <GUI_Unlock>
 801c83c:	4620      	mov	r0, r4
 801c83e:	f009 f84b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c842:	6a04      	ldr	r4, [r0, #32]
 801c844:	2c00      	cmp	r4, #0
 801c846:	d1e0      	bne.n	801c80a <WM_InvalidateWindowAndDescs+0x11a>
 801c848:	f006 fcc6 	bl	80231d8 <GUI_Unlock>
 801c84c:	4628      	mov	r0, r5
 801c84e:	f009 f843 	bl	80258d8 <GUI_ALLOC_h2p>
 801c852:	6a05      	ldr	r5, [r0, #32]
 801c854:	2d00      	cmp	r5, #0
 801c856:	d1ca      	bne.n	801c7ee <WM_InvalidateWindowAndDescs+0xfe>
 801c858:	f006 fcbe 	bl	80231d8 <GUI_Unlock>
 801c85c:	4630      	mov	r0, r6
 801c85e:	f009 f83b 	bl	80258d8 <GUI_ALLOC_h2p>
 801c862:	6a06      	ldr	r6, [r0, #32]
 801c864:	2e00      	cmp	r6, #0
 801c866:	d1b3      	bne.n	801c7d0 <WM_InvalidateWindowAndDescs+0xe0>
 801c868:	f006 fcb6 	bl	80231d8 <GUI_Unlock>
 801c86c:	9801      	ldr	r0, [sp, #4]
 801c86e:	f009 f833 	bl	80258d8 <GUI_ALLOC_h2p>
 801c872:	6a00      	ldr	r0, [r0, #32]
 801c874:	9001      	str	r0, [sp, #4]
 801c876:	2800      	cmp	r0, #0
 801c878:	d19b      	bne.n	801c7b2 <WM_InvalidateWindowAndDescs+0xc2>
 801c87a:	f006 fcad 	bl	80231d8 <GUI_Unlock>
 801c87e:	4658      	mov	r0, fp
 801c880:	f009 f82a 	bl	80258d8 <GUI_ALLOC_h2p>
 801c884:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801c888:	f1bb 0f00 	cmp.w	fp, #0
 801c88c:	d180      	bne.n	801c790 <WM_InvalidateWindowAndDescs+0xa0>
 801c88e:	f006 fca3 	bl	80231d8 <GUI_Unlock>
 801c892:	4650      	mov	r0, sl
 801c894:	f009 f820 	bl	80258d8 <GUI_ALLOC_h2p>
 801c898:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801c89c:	f1ba 0f00 	cmp.w	sl, #0
 801c8a0:	f47f af65 	bne.w	801c76e <WM_InvalidateWindowAndDescs+0x7e>
 801c8a4:	f006 fc98 	bl	80231d8 <GUI_Unlock>
 801c8a8:	4648      	mov	r0, r9
 801c8aa:	f009 f815 	bl	80258d8 <GUI_ALLOC_h2p>
 801c8ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801c8b2:	f1b9 0f00 	cmp.w	r9, #0
 801c8b6:	f47f af48 	bne.w	801c74a <WM_InvalidateWindowAndDescs+0x5a>
 801c8ba:	f006 fc8d 	bl	80231d8 <GUI_Unlock>
 801c8be:	4640      	mov	r0, r8
 801c8c0:	f009 f80a 	bl	80258d8 <GUI_ALLOC_h2p>
 801c8c4:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801c8c8:	f1b8 0f00 	cmp.w	r8, #0
 801c8cc:	f47f af2b 	bne.w	801c726 <WM_InvalidateWindowAndDescs+0x36>
 801c8d0:	e715      	b.n	801c6fe <WM_InvalidateWindowAndDescs+0xe>
 801c8d2:	bf00      	nop

0801c8d4 <WM_ShowWindow>:
 801c8d4:	b510      	push	{r4, lr}
 801c8d6:	4604      	mov	r4, r0
 801c8d8:	b082      	sub	sp, #8
 801c8da:	b908      	cbnz	r0, 801c8e0 <WM_ShowWindow+0xc>
 801c8dc:	b002      	add	sp, #8
 801c8de:	bd10      	pop	{r4, pc}
 801c8e0:	f006 fc84 	bl	80231ec <GUI_Lock>
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	f009 f801 	bl	80258ec <GUI_ALLOC_LockH>
 801c8ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c8ec:	9001      	str	r0, [sp, #4]
 801c8ee:	079a      	lsls	r2, r3, #30
 801c8f0:	d506      	bpl.n	801c900 <WM_ShowWindow+0x2c>
 801c8f2:	a801      	add	r0, sp, #4
 801c8f4:	f009 f80c 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c8f8:	f006 fc6e 	bl	80231d8 <GUI_Unlock>
 801c8fc:	b002      	add	sp, #8
 801c8fe:	bd10      	pop	{r4, pc}
 801c900:	f043 0302 	orr.w	r3, r3, #2
 801c904:	6283      	str	r3, [r0, #40]	; 0x28
 801c906:	4620      	mov	r0, r4
 801c908:	f7ff fef2 	bl	801c6f0 <WM_InvalidateWindowAndDescs>
 801c90c:	e7f1      	b.n	801c8f2 <WM_ShowWindow+0x1e>
 801c90e:	bf00      	nop

0801c910 <WM_ValidateWindow>:
 801c910:	b510      	push	{r4, lr}
 801c912:	4604      	mov	r4, r0
 801c914:	b082      	sub	sp, #8
 801c916:	f006 fc69 	bl	80231ec <GUI_Lock>
 801c91a:	b91c      	cbnz	r4, 801c924 <WM_ValidateWindow+0x14>
 801c91c:	f006 fc5c 	bl	80231d8 <GUI_Unlock>
 801c920:	b002      	add	sp, #8
 801c922:	bd10      	pop	{r4, pc}
 801c924:	4620      	mov	r0, r4
 801c926:	f008 ffe1 	bl	80258ec <GUI_ALLOC_LockH>
 801c92a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c92c:	9001      	str	r0, [sp, #4]
 801c92e:	069a      	lsls	r2, r3, #26
 801c930:	d506      	bpl.n	801c940 <WM_ValidateWindow+0x30>
 801c932:	4a07      	ldr	r2, [pc, #28]	; (801c950 <WM_ValidateWindow+0x40>)
 801c934:	8811      	ldrh	r1, [r2, #0]
 801c936:	f023 0320 	bic.w	r3, r3, #32
 801c93a:	3901      	subs	r1, #1
 801c93c:	6283      	str	r3, [r0, #40]	; 0x28
 801c93e:	8011      	strh	r1, [r2, #0]
 801c940:	a801      	add	r0, sp, #4
 801c942:	f008 ffe5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c946:	f006 fc47 	bl	80231d8 <GUI_Unlock>
 801c94a:	b002      	add	sp, #8
 801c94c:	bd10      	pop	{r4, pc}
 801c94e:	bf00      	nop
 801c950:	2002cb70 	.word	0x2002cb70

0801c954 <WM_HideWindow>:
 801c954:	b510      	push	{r4, lr}
 801c956:	4604      	mov	r4, r0
 801c958:	b082      	sub	sp, #8
 801c95a:	b908      	cbnz	r0, 801c960 <WM_HideWindow+0xc>
 801c95c:	b002      	add	sp, #8
 801c95e:	bd10      	pop	{r4, pc}
 801c960:	f006 fc44 	bl	80231ec <GUI_Lock>
 801c964:	4620      	mov	r0, r4
 801c966:	f008 ffc1 	bl	80258ec <GUI_ALLOC_LockH>
 801c96a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801c96c:	9001      	str	r0, [sp, #4]
 801c96e:	0791      	lsls	r1, r2, #30
 801c970:	d406      	bmi.n	801c980 <WM_HideWindow+0x2c>
 801c972:	a801      	add	r0, sp, #4
 801c974:	f008 ffcc 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c978:	f006 fc2e 	bl	80231d8 <GUI_Unlock>
 801c97c:	b002      	add	sp, #8
 801c97e:	bd10      	pop	{r4, pc}
 801c980:	f022 0202 	bic.w	r2, r2, #2
 801c984:	6282      	str	r2, [r0, #40]	; 0x28
 801c986:	6981      	ldr	r1, [r0, #24]
 801c988:	6a02      	ldr	r2, [r0, #32]
 801c98a:	f001 fadf 	bl	801df4c <WM__InvalidateRectEx>
 801c98e:	a801      	add	r0, sp, #4
 801c990:	f008 ffbe 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c994:	e7f0      	b.n	801c978 <WM_HideWindow+0x24>
 801c996:	bf00      	nop

0801c998 <WM_GetWindowSizeX>:
 801c998:	b510      	push	{r4, lr}
 801c99a:	4604      	mov	r4, r0
 801c99c:	b082      	sub	sp, #8
 801c99e:	f006 fc25 	bl	80231ec <GUI_Lock>
 801c9a2:	b914      	cbnz	r4, 801c9aa <WM_GetWindowSizeX+0x12>
 801c9a4:	f001 fdd6 	bl	801e554 <WM_GetActiveWindow>
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	4620      	mov	r0, r4
 801c9ac:	f008 ff9e 	bl	80258ec <GUI_ALLOC_LockH>
 801c9b0:	ab02      	add	r3, sp, #8
 801c9b2:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c9b6:	f843 0d04 	str.w	r0, [r3, #-4]!
 801c9ba:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c9be:	4618      	mov	r0, r3
 801c9c0:	1aa4      	subs	r4, r4, r2
 801c9c2:	f008 ffa5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801c9c6:	f006 fc07 	bl	80231d8 <GUI_Unlock>
 801c9ca:	3401      	adds	r4, #1
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	b002      	add	sp, #8
 801c9d0:	bd10      	pop	{r4, pc}
 801c9d2:	bf00      	nop

0801c9d4 <WM_GetWindowSizeY>:
 801c9d4:	b510      	push	{r4, lr}
 801c9d6:	4604      	mov	r4, r0
 801c9d8:	b082      	sub	sp, #8
 801c9da:	f006 fc07 	bl	80231ec <GUI_Lock>
 801c9de:	b914      	cbnz	r4, 801c9e6 <WM_GetWindowSizeY+0x12>
 801c9e0:	f001 fdb8 	bl	801e554 <WM_GetActiveWindow>
 801c9e4:	4604      	mov	r4, r0
 801c9e6:	4620      	mov	r0, r4
 801c9e8:	f008 ff80 	bl	80258ec <GUI_ALLOC_LockH>
 801c9ec:	ab02      	add	r3, sp, #8
 801c9ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c9f2:	f843 0d04 	str.w	r0, [r3, #-4]!
 801c9f6:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	1aa4      	subs	r4, r4, r2
 801c9fe:	f008 ff87 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca02:	f006 fbe9 	bl	80231d8 <GUI_Unlock>
 801ca06:	3401      	adds	r4, #1
 801ca08:	4620      	mov	r0, r4
 801ca0a:	b002      	add	sp, #8
 801ca0c:	bd10      	pop	{r4, pc}
 801ca0e:	bf00      	nop

0801ca10 <_cbInvalidateOne>:
 801ca10:	f001 bbf6 	b.w	801e200 <WM_InvalidateWindow>

0801ca14 <WM_BringToTop>:
 801ca14:	b530      	push	{r4, r5, lr}
 801ca16:	4604      	mov	r4, r0
 801ca18:	b083      	sub	sp, #12
 801ca1a:	f006 fbe7 	bl	80231ec <GUI_Lock>
 801ca1e:	b91c      	cbnz	r4, 801ca28 <WM_BringToTop+0x14>
 801ca20:	f006 fbda 	bl	80231d8 <GUI_Unlock>
 801ca24:	b003      	add	sp, #12
 801ca26:	bd30      	pop	{r4, r5, pc}
 801ca28:	4620      	mov	r0, r4
 801ca2a:	f008 ff5f 	bl	80258ec <GUI_ALLOC_LockH>
 801ca2e:	6a03      	ldr	r3, [r0, #32]
 801ca30:	9000      	str	r0, [sp, #0]
 801ca32:	b343      	cbz	r3, 801ca86 <WM_BringToTop+0x72>
 801ca34:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801ca36:	0712      	lsls	r2, r2, #28
 801ca38:	d40d      	bmi.n	801ca56 <WM_BringToTop+0x42>
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f008 ff56 	bl	80258ec <GUI_ALLOC_LockH>
 801ca40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ca42:	9001      	str	r0, [sp, #4]
 801ca44:	071b      	lsls	r3, r3, #28
 801ca46:	d525      	bpl.n	801ca94 <WM_BringToTop+0x80>
 801ca48:	4668      	mov	r0, sp
 801ca4a:	f008 ff61 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca4e:	a801      	add	r0, sp, #4
 801ca50:	f008 ff5e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca54:	e7e4      	b.n	801ca20 <WM_BringToTop+0xc>
 801ca56:	4603      	mov	r3, r0
 801ca58:	699d      	ldr	r5, [r3, #24]
 801ca5a:	4668      	mov	r0, sp
 801ca5c:	f008 ff58 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca60:	4620      	mov	r0, r4
 801ca62:	f000 fccd 	bl	801d400 <WM__RemoveWindowFromList>
 801ca66:	4629      	mov	r1, r5
 801ca68:	4620      	mov	r0, r4
 801ca6a:	f000 fc5b 	bl	801d324 <WM__InsertWindowIntoList>
 801ca6e:	4620      	mov	r0, r4
 801ca70:	f001 fbc6 	bl	801e200 <WM_InvalidateWindow>
 801ca74:	4620      	mov	r0, r4
 801ca76:	490a      	ldr	r1, [pc, #40]	; (801caa0 <WM_BringToTop+0x8c>)
 801ca78:	2200      	movs	r2, #0
 801ca7a:	f7ff f8c3 	bl	801bc04 <WM_ForEachDesc>
 801ca7e:	f006 fbab 	bl	80231d8 <GUI_Unlock>
 801ca82:	b003      	add	sp, #12
 801ca84:	bd30      	pop	{r4, r5, pc}
 801ca86:	4668      	mov	r0, sp
 801ca88:	f008 ff42 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca8c:	f006 fba4 	bl	80231d8 <GUI_Unlock>
 801ca90:	b003      	add	sp, #12
 801ca92:	bd30      	pop	{r4, r5, pc}
 801ca94:	a801      	add	r0, sp, #4
 801ca96:	f008 ff3b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ca9a:	9b00      	ldr	r3, [sp, #0]
 801ca9c:	e7dc      	b.n	801ca58 <WM_BringToTop+0x44>
 801ca9e:	bf00      	nop
 801caa0:	0801ca11 	.word	0x0801ca11

0801caa4 <_OnExit>:
 801caa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	4a1e      	ldr	r2, [pc, #120]	; (801cb24 <_OnExit+0x80>)
 801caaa:	4d1f      	ldr	r5, [pc, #124]	; (801cb28 <_OnExit+0x84>)
 801caac:	4b1f      	ldr	r3, [pc, #124]	; (801cb2c <_OnExit+0x88>)
 801caae:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801cb54 <_OnExit+0xb0>
 801cab2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801cb58 <_OnExit+0xb4>
 801cab6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 801cb5c <_OnExit+0xb8>
 801caba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 801cb60 <_OnExit+0xbc>
 801cabe:	491c      	ldr	r1, [pc, #112]	; (801cb30 <_OnExit+0x8c>)
 801cac0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801cb64 <_OnExit+0xc0>
 801cac4:	4e1b      	ldr	r6, [pc, #108]	; (801cb34 <_OnExit+0x90>)
 801cac6:	4f1c      	ldr	r7, [pc, #112]	; (801cb38 <_OnExit+0x94>)
 801cac8:	481c      	ldr	r0, [pc, #112]	; (801cb3c <_OnExit+0x98>)
 801caca:	2400      	movs	r4, #0
 801cacc:	600c      	str	r4, [r1, #0]
 801cace:	6014      	str	r4, [r2, #0]
 801cad0:	6054      	str	r4, [r2, #4]
 801cad2:	601c      	str	r4, [r3, #0]
 801cad4:	605c      	str	r4, [r3, #4]
 801cad6:	4621      	mov	r1, r4
 801cad8:	682b      	ldr	r3, [r5, #0]
 801cada:	f8cb 4000 	str.w	r4, [fp]
 801cade:	f8ca 4000 	str.w	r4, [sl]
 801cae2:	f8c9 4000 	str.w	r4, [r9]
 801cae6:	f8c8 4000 	str.w	r4, [r8]
 801caea:	2218      	movs	r2, #24
 801caec:	f88c 4000 	strb.w	r4, [ip]
 801caf0:	6034      	str	r4, [r6, #0]
 801caf2:	603c      	str	r4, [r7, #0]
 801caf4:	4798      	blx	r3
 801caf6:	4b12      	ldr	r3, [pc, #72]	; (801cb40 <_OnExit+0x9c>)
 801caf8:	4a12      	ldr	r2, [pc, #72]	; (801cb44 <_OnExit+0xa0>)
 801cafa:	601c      	str	r4, [r3, #0]
 801cafc:	6014      	str	r4, [r2, #0]
 801cafe:	605c      	str	r4, [r3, #4]
 801cb00:	4621      	mov	r1, r4
 801cb02:	682b      	ldr	r3, [r5, #0]
 801cb04:	4810      	ldr	r0, [pc, #64]	; (801cb48 <_OnExit+0xa4>)
 801cb06:	2210      	movs	r2, #16
 801cb08:	4798      	blx	r3
 801cb0a:	682b      	ldr	r3, [r5, #0]
 801cb0c:	480f      	ldr	r0, [pc, #60]	; (801cb4c <_OnExit+0xa8>)
 801cb0e:	4621      	mov	r1, r4
 801cb10:	2210      	movs	r2, #16
 801cb12:	4798      	blx	r3
 801cb14:	682b      	ldr	r3, [r5, #0]
 801cb16:	480e      	ldr	r0, [pc, #56]	; (801cb50 <_OnExit+0xac>)
 801cb18:	4621      	mov	r1, r4
 801cb1a:	2210      	movs	r2, #16
 801cb1c:	4798      	blx	r3
 801cb1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb22:	bf00      	nop
 801cb24:	2002cb68 	.word	0x2002cb68
 801cb28:	20000254 	.word	0x20000254
 801cb2c:	2002cb9c 	.word	0x2002cb9c
 801cb30:	2002cb98 	.word	0x2002cb98
 801cb34:	2002b158 	.word	0x2002b158
 801cb38:	2002b17c 	.word	0x2002b17c
 801cb3c:	2002b164 	.word	0x2002b164
 801cb40:	2002cb58 	.word	0x2002cb58
 801cb44:	2002cb64 	.word	0x2002cb64
 801cb48:	2002cd14 	.word	0x2002cd14
 801cb4c:	2002cd04 	.word	0x2002cd04
 801cb50:	2002ccf4 	.word	0x2002ccf4
 801cb54:	2002cb94 	.word	0x2002cb94
 801cb58:	2002cba8 	.word	0x2002cba8
 801cb5c:	2002cb54 	.word	0x2002cb54
 801cb60:	2002cb88 	.word	0x2002cb88
 801cb64:	2002b180 	.word	0x2002b180

0801cb68 <_Findy1>:
 801cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb6a:	4604      	mov	r4, r0
 801cb6c:	b085      	sub	sp, #20
 801cb6e:	460e      	mov	r6, r1
 801cb70:	4617      	mov	r7, r2
 801cb72:	2800      	cmp	r0, #0
 801cb74:	d033      	beq.n	801cbde <_Findy1+0x76>
 801cb76:	4620      	mov	r0, r4
 801cb78:	f008 feb8 	bl	80258ec <GUI_ALLOC_LockH>
 801cb7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cb7e:	9000      	str	r0, [sp, #0]
 801cb80:	07a2      	lsls	r2, r4, #30
 801cb82:	d526      	bpl.n	801cbd2 <_Findy1+0x6a>
 801cb84:	2f00      	cmp	r7, #0
 801cb86:	d042      	beq.n	801cc0e <_Findy1+0xa6>
 801cb88:	ad02      	add	r5, sp, #8
 801cb8a:	4601      	mov	r1, r0
 801cb8c:	463a      	mov	r2, r7
 801cb8e:	4628      	mov	r0, r5
 801cb90:	f005 fb6c 	bl	802226c <GUI__IntersectRects>
 801cb94:	4630      	mov	r0, r6
 801cb96:	4629      	mov	r1, r5
 801cb98:	f007 fd78 	bl	802468c <GUI_RectsIntersect>
 801cb9c:	2800      	cmp	r0, #0
 801cb9e:	d02e      	beq.n	801cbfe <_Findy1+0x96>
 801cba0:	07e3      	lsls	r3, r4, #31
 801cba2:	9800      	ldr	r0, [sp, #0]
 801cba4:	d41d      	bmi.n	801cbe2 <_Findy1+0x7a>
 801cba6:	2f00      	cmp	r7, #0
 801cba8:	d045      	beq.n	801cc36 <_Findy1+0xce>
 801cbaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	bfb8      	it	lt
 801cbb6:	461a      	movlt	r2, r3
 801cbb8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	dd2b      	ble.n	801cc18 <_Findy1+0xb0>
 801cbc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cbc4:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801cbc8:	b21a      	sxth	r2, r3
 801cbca:	4291      	cmp	r1, r2
 801cbcc:	db01      	blt.n	801cbd2 <_Findy1+0x6a>
 801cbce:	3b01      	subs	r3, #1
 801cbd0:	80f3      	strh	r3, [r6, #6]
 801cbd2:	6a04      	ldr	r4, [r0, #32]
 801cbd4:	4668      	mov	r0, sp
 801cbd6:	f008 fe9b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cbda:	2c00      	cmp	r4, #0
 801cbdc:	d1cb      	bne.n	801cb76 <_Findy1+0xe>
 801cbde:	b005      	add	sp, #20
 801cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbe2:	69c4      	ldr	r4, [r0, #28]
 801cbe4:	2c00      	cmp	r4, #0
 801cbe6:	d0f4      	beq.n	801cbd2 <_Findy1+0x6a>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	4631      	mov	r1, r6
 801cbec:	462a      	mov	r2, r5
 801cbee:	f7ff ffbb 	bl	801cb68 <_Findy1>
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	f008 fe70 	bl	80258d8 <GUI_ALLOC_h2p>
 801cbf8:	6a04      	ldr	r4, [r0, #32]
 801cbfa:	2c00      	cmp	r4, #0
 801cbfc:	d1f4      	bne.n	801cbe8 <_Findy1+0x80>
 801cbfe:	9800      	ldr	r0, [sp, #0]
 801cc00:	6a04      	ldr	r4, [r0, #32]
 801cc02:	4668      	mov	r0, sp
 801cc04:	f008 fe84 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cc08:	2c00      	cmp	r4, #0
 801cc0a:	d1b4      	bne.n	801cb76 <_Findy1+0xe>
 801cc0c:	e7e7      	b.n	801cbde <_Findy1+0x76>
 801cc0e:	c803      	ldmia	r0, {r0, r1}
 801cc10:	ad02      	add	r5, sp, #8
 801cc12:	e885 0003 	stmia.w	r5, {r0, r1}
 801cc16:	e7bd      	b.n	801cb94 <_Findy1+0x2c>
 801cc18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801cc1c:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801cc20:	b21a      	sxth	r2, r3
 801cc22:	4291      	cmp	r1, r2
 801cc24:	ddd5      	ble.n	801cbd2 <_Findy1+0x6a>
 801cc26:	6a04      	ldr	r4, [r0, #32]
 801cc28:	80f3      	strh	r3, [r6, #6]
 801cc2a:	4668      	mov	r0, sp
 801cc2c:	f008 fe70 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cc30:	2c00      	cmp	r4, #0
 801cc32:	d1a0      	bne.n	801cb76 <_Findy1+0xe>
 801cc34:	e7d3      	b.n	801cbde <_Findy1+0x76>
 801cc36:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cc3a:	e7bd      	b.n	801cbb8 <_Findy1+0x50>

0801cc3c <_Findx0>:
 801cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc40:	4604      	mov	r4, r0
 801cc42:	b084      	sub	sp, #16
 801cc44:	460f      	mov	r7, r1
 801cc46:	4690      	mov	r8, r2
 801cc48:	2800      	cmp	r0, #0
 801cc4a:	d048      	beq.n	801ccde <_Findx0+0xa2>
 801cc4c:	2600      	movs	r6, #0
 801cc4e:	e00c      	b.n	801cc6a <_Findx0+0x2e>
 801cc50:	07e3      	lsls	r3, r4, #31
 801cc52:	d430      	bmi.n	801ccb6 <_Findx0+0x7a>
 801cc54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cc58:	9800      	ldr	r0, [sp, #0]
 801cc5a:	3301      	adds	r3, #1
 801cc5c:	803b      	strh	r3, [r7, #0]
 801cc5e:	2601      	movs	r6, #1
 801cc60:	6a04      	ldr	r4, [r0, #32]
 801cc62:	4668      	mov	r0, sp
 801cc64:	f008 fe54 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cc68:	b1e4      	cbz	r4, 801cca4 <_Findx0+0x68>
 801cc6a:	4620      	mov	r0, r4
 801cc6c:	f008 fe3e 	bl	80258ec <GUI_ALLOC_LockH>
 801cc70:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cc72:	9000      	str	r0, [sp, #0]
 801cc74:	07a2      	lsls	r2, r4, #30
 801cc76:	d5f3      	bpl.n	801cc60 <_Findx0+0x24>
 801cc78:	f1b8 0f00 	cmp.w	r8, #0
 801cc7c:	d016      	beq.n	801ccac <_Findx0+0x70>
 801cc7e:	ad02      	add	r5, sp, #8
 801cc80:	4601      	mov	r1, r0
 801cc82:	4642      	mov	r2, r8
 801cc84:	4628      	mov	r0, r5
 801cc86:	f005 faf1 	bl	802226c <GUI__IntersectRects>
 801cc8a:	4638      	mov	r0, r7
 801cc8c:	4629      	mov	r1, r5
 801cc8e:	f007 fcfd 	bl	802468c <GUI_RectsIntersect>
 801cc92:	2800      	cmp	r0, #0
 801cc94:	d1dc      	bne.n	801cc50 <_Findx0+0x14>
 801cc96:	9800      	ldr	r0, [sp, #0]
 801cc98:	6a04      	ldr	r4, [r0, #32]
 801cc9a:	4668      	mov	r0, sp
 801cc9c:	f008 fe38 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cca0:	2c00      	cmp	r4, #0
 801cca2:	d1e2      	bne.n	801cc6a <_Findx0+0x2e>
 801cca4:	4630      	mov	r0, r6
 801cca6:	b004      	add	sp, #16
 801cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccac:	c803      	ldmia	r0, {r0, r1}
 801ccae:	ad02      	add	r5, sp, #8
 801ccb0:	e885 0003 	stmia.w	r5, {r0, r1}
 801ccb4:	e7e9      	b.n	801cc8a <_Findx0+0x4e>
 801ccb6:	9800      	ldr	r0, [sp, #0]
 801ccb8:	69c4      	ldr	r4, [r0, #28]
 801ccba:	2c00      	cmp	r4, #0
 801ccbc:	d0d0      	beq.n	801cc60 <_Findx0+0x24>
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	4639      	mov	r1, r7
 801ccc2:	462a      	mov	r2, r5
 801ccc4:	f7ff ffba 	bl	801cc3c <_Findx0>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	4620      	mov	r0, r4
 801cccc:	bf18      	it	ne
 801ccce:	2601      	movne	r6, #1
 801ccd0:	f008 fe02 	bl	80258d8 <GUI_ALLOC_h2p>
 801ccd4:	6a04      	ldr	r4, [r0, #32]
 801ccd6:	2c00      	cmp	r4, #0
 801ccd8:	d1f1      	bne.n	801ccbe <_Findx0+0x82>
 801ccda:	9800      	ldr	r0, [sp, #0]
 801ccdc:	e7dc      	b.n	801cc98 <_Findx0+0x5c>
 801ccde:	4606      	mov	r6, r0
 801cce0:	e7e0      	b.n	801cca4 <_Findx0+0x68>
 801cce2:	bf00      	nop

0801cce4 <_Findx1>:
 801cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cce6:	4604      	mov	r4, r0
 801cce8:	b085      	sub	sp, #20
 801ccea:	460e      	mov	r6, r1
 801ccec:	4617      	mov	r7, r2
 801ccee:	b960      	cbnz	r0, 801cd0a <_Findx1+0x26>
 801ccf0:	e026      	b.n	801cd40 <_Findx1+0x5c>
 801ccf2:	07e3      	lsls	r3, r4, #31
 801ccf4:	d42b      	bmi.n	801cd4e <_Findx1+0x6a>
 801ccf6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ccfa:	9800      	ldr	r0, [sp, #0]
 801ccfc:	3b01      	subs	r3, #1
 801ccfe:	80b3      	strh	r3, [r6, #4]
 801cd00:	6a04      	ldr	r4, [r0, #32]
 801cd02:	4668      	mov	r0, sp
 801cd04:	f008 fe04 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cd08:	b1d4      	cbz	r4, 801cd40 <_Findx1+0x5c>
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f008 fdee 	bl	80258ec <GUI_ALLOC_LockH>
 801cd10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cd12:	9000      	str	r0, [sp, #0]
 801cd14:	07a2      	lsls	r2, r4, #30
 801cd16:	d5f3      	bpl.n	801cd00 <_Findx1+0x1c>
 801cd18:	b1a7      	cbz	r7, 801cd44 <_Findx1+0x60>
 801cd1a:	ad02      	add	r5, sp, #8
 801cd1c:	4601      	mov	r1, r0
 801cd1e:	463a      	mov	r2, r7
 801cd20:	4628      	mov	r0, r5
 801cd22:	f005 faa3 	bl	802226c <GUI__IntersectRects>
 801cd26:	4630      	mov	r0, r6
 801cd28:	4629      	mov	r1, r5
 801cd2a:	f007 fcaf 	bl	802468c <GUI_RectsIntersect>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	d1df      	bne.n	801ccf2 <_Findx1+0xe>
 801cd32:	9800      	ldr	r0, [sp, #0]
 801cd34:	6a04      	ldr	r4, [r0, #32]
 801cd36:	4668      	mov	r0, sp
 801cd38:	f008 fdea 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cd3c:	2c00      	cmp	r4, #0
 801cd3e:	d1e4      	bne.n	801cd0a <_Findx1+0x26>
 801cd40:	b005      	add	sp, #20
 801cd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd44:	c803      	ldmia	r0, {r0, r1}
 801cd46:	ad02      	add	r5, sp, #8
 801cd48:	e885 0003 	stmia.w	r5, {r0, r1}
 801cd4c:	e7eb      	b.n	801cd26 <_Findx1+0x42>
 801cd4e:	9800      	ldr	r0, [sp, #0]
 801cd50:	69c4      	ldr	r4, [r0, #28]
 801cd52:	2c00      	cmp	r4, #0
 801cd54:	d0d4      	beq.n	801cd00 <_Findx1+0x1c>
 801cd56:	4620      	mov	r0, r4
 801cd58:	4631      	mov	r1, r6
 801cd5a:	462a      	mov	r2, r5
 801cd5c:	f7ff ffc2 	bl	801cce4 <_Findx1>
 801cd60:	4620      	mov	r0, r4
 801cd62:	f008 fdb9 	bl	80258d8 <GUI_ALLOC_h2p>
 801cd66:	6a04      	ldr	r4, [r0, #32]
 801cd68:	2c00      	cmp	r4, #0
 801cd6a:	d1f4      	bne.n	801cd56 <_Findx1+0x72>
 801cd6c:	9800      	ldr	r0, [sp, #0]
 801cd6e:	e7e1      	b.n	801cd34 <_Findx1+0x50>

0801cd70 <_Paint1Trans>:
 801cd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd74:	4e29      	ldr	r6, [pc, #164]	; (801ce1c <_Paint1Trans+0xac>)
 801cd76:	6833      	ldr	r3, [r6, #0]
 801cd78:	b083      	sub	sp, #12
 801cd7a:	4605      	mov	r5, r0
 801cd7c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801cd7e:	f008 fdb5 	bl	80258ec <GUI_ALLOC_LockH>
 801cd82:	9000      	str	r0, [sp, #0]
 801cd84:	4628      	mov	r0, r5
 801cd86:	f008 fdb1 	bl	80258ec <GUI_ALLOC_LockH>
 801cd8a:	4601      	mov	r1, r0
 801cd8c:	9800      	ldr	r0, [sp, #0]
 801cd8e:	9101      	str	r1, [sp, #4]
 801cd90:	3008      	adds	r0, #8
 801cd92:	f007 fc7b 	bl	802468c <GUI_RectsIntersect>
 801cd96:	4604      	mov	r4, r0
 801cd98:	b948      	cbnz	r0, 801cdae <_Paint1Trans+0x3e>
 801cd9a:	4668      	mov	r0, sp
 801cd9c:	f008 fdb8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cda0:	a801      	add	r0, sp, #4
 801cda2:	f008 fdb5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cda6:	4620      	mov	r0, r4
 801cda8:	b003      	add	sp, #12
 801cdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdae:	ac02      	add	r4, sp, #8
 801cdb0:	9901      	ldr	r1, [sp, #4]
 801cdb2:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 801cdb6:	6833      	ldr	r3, [r6, #0]
 801cdb8:	4f19      	ldr	r7, [pc, #100]	; (801ce20 <_Paint1Trans+0xb0>)
 801cdba:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801cdbe:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801cdc2:	3208      	adds	r2, #8
 801cdc4:	f101 0008 	add.w	r0, r1, #8
 801cdc8:	f005 fa50 	bl	802226c <GUI__IntersectRects>
 801cdcc:	4668      	mov	r0, sp
 801cdce:	f008 fd9f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cdd2:	a802      	add	r0, sp, #8
 801cdd4:	6833      	ldr	r3, [r6, #0]
 801cdd6:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801cdda:	603d      	str	r5, [r7, #0]
 801cddc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cde0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801cde4:	651a      	str	r2, [r3, #80]	; 0x50
 801cde6:	64d9      	str	r1, [r3, #76]	; 0x4c
 801cde8:	f008 fd92 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cdec:	4628      	mov	r0, r5
 801cdee:	f008 fd73 	bl	80258d8 <GUI_ALLOC_h2p>
 801cdf2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801cdf4:	4a0b      	ldr	r2, [pc, #44]	; (801ce24 <_Paint1Trans+0xb4>)
 801cdf6:	4b0c      	ldr	r3, [pc, #48]	; (801ce28 <_Paint1Trans+0xb8>)
 801cdf8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 801cdfc:	bf08      	it	eq
 801cdfe:	4613      	moveq	r3, r2
 801ce00:	4628      	mov	r0, r5
 801ce02:	4798      	blx	r3
 801ce04:	2401      	movs	r4, #1
 801ce06:	6833      	ldr	r3, [r6, #0]
 801ce08:	2200      	movs	r2, #0
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 801ce10:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 801ce14:	603a      	str	r2, [r7, #0]
 801ce16:	b003      	add	sp, #12
 801ce18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce1c:	20000280 	.word	0x20000280
 801ce20:	2002cb54 	.word	0x2002cb54
 801ce24:	0801e949 	.word	0x0801e949
 801ce28:	0801efd1 	.word	0x0801efd1

0801ce2c <_PaintTransChildren>:
 801ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce30:	b082      	sub	sp, #8
 801ce32:	4606      	mov	r6, r0
 801ce34:	f008 fd5a 	bl	80258ec <GUI_ALLOC_LockH>
 801ce38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ce3a:	9001      	str	r0, [sp, #4]
 801ce3c:	079b      	lsls	r3, r3, #30
 801ce3e:	d524      	bpl.n	801ce8a <_PaintTransChildren+0x5e>
 801ce40:	69c4      	ldr	r4, [r0, #28]
 801ce42:	ad01      	add	r5, sp, #4
 801ce44:	b92c      	cbnz	r4, 801ce52 <_PaintTransChildren+0x26>
 801ce46:	e020      	b.n	801ce8a <_PaintTransChildren+0x5e>
 801ce48:	6a1c      	ldr	r4, [r3, #32]
 801ce4a:	4668      	mov	r0, sp
 801ce4c:	f008 fd60 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ce50:	b1ac      	cbz	r4, 801ce7e <_PaintTransChildren+0x52>
 801ce52:	4620      	mov	r0, r4
 801ce54:	f008 fd4a 	bl	80258ec <GUI_ALLOC_LockH>
 801ce58:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801ce5a:	9000      	str	r0, [sp, #0]
 801ce5c:	f002 0203 	and.w	r2, r2, #3
 801ce60:	2a03      	cmp	r2, #3
 801ce62:	4603      	mov	r3, r0
 801ce64:	d1f0      	bne.n	801ce48 <_PaintTransChildren+0x1c>
 801ce66:	9901      	ldr	r1, [sp, #4]
 801ce68:	3108      	adds	r1, #8
 801ce6a:	f007 fc0f 	bl	802468c <GUI_RectsIntersect>
 801ce6e:	b998      	cbnz	r0, 801ce98 <_PaintTransChildren+0x6c>
 801ce70:	9b00      	ldr	r3, [sp, #0]
 801ce72:	6a1c      	ldr	r4, [r3, #32]
 801ce74:	4668      	mov	r0, sp
 801ce76:	f008 fd4b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ce7a:	2c00      	cmp	r4, #0
 801ce7c:	d1e9      	bne.n	801ce52 <_PaintTransChildren+0x26>
 801ce7e:	4628      	mov	r0, r5
 801ce80:	f008 fd46 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ce84:	b002      	add	sp, #8
 801ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce8a:	ad01      	add	r5, sp, #4
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	f008 fd3f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ce92:	b002      	add	sp, #8
 801ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce98:	9b01      	ldr	r3, [sp, #4]
 801ce9a:	4628      	mov	r0, r5
 801ce9c:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 801cea0:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 801cea4:	899f      	ldrh	r7, [r3, #12]
 801cea6:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 801ceaa:	f008 fd31 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ceae:	4668      	mov	r0, sp
 801ceb0:	f008 fd2e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	f7ff ff5b 	bl	801cd70 <_Paint1Trans>
 801ceba:	b988      	cbnz	r0, 801cee0 <_PaintTransChildren+0xb4>
 801cebc:	4630      	mov	r0, r6
 801cebe:	f008 fd15 	bl	80258ec <GUI_ALLOC_LockH>
 801cec2:	9001      	str	r0, [sp, #4]
 801cec4:	4620      	mov	r0, r4
 801cec6:	f008 fd11 	bl	80258ec <GUI_ALLOC_LockH>
 801ceca:	9a01      	ldr	r2, [sp, #4]
 801cecc:	9000      	str	r0, [sp, #0]
 801cece:	4603      	mov	r3, r0
 801ced0:	f8a2 9008 	strh.w	r9, [r2, #8]
 801ced4:	f8a2 800a 	strh.w	r8, [r2, #10]
 801ced8:	8197      	strh	r7, [r2, #12]
 801ceda:	f8a2 a00e 	strh.w	sl, [r2, #14]
 801cede:	e7b3      	b.n	801ce48 <_PaintTransChildren+0x1c>
 801cee0:	4620      	mov	r0, r4
 801cee2:	f008 fcf9 	bl	80258d8 <GUI_ALLOC_h2p>
 801cee6:	9000      	str	r0, [sp, #0]
 801cee8:	4620      	mov	r0, r4
 801ceea:	f7ff ff9f 	bl	801ce2c <_PaintTransChildren>
 801ceee:	4620      	mov	r0, r4
 801cef0:	f008 fcf2 	bl	80258d8 <GUI_ALLOC_h2p>
 801cef4:	9000      	str	r0, [sp, #0]
 801cef6:	4630      	mov	r0, r6
 801cef8:	f008 fcee 	bl	80258d8 <GUI_ALLOC_h2p>
 801cefc:	9001      	str	r0, [sp, #4]
 801cefe:	e7dd      	b.n	801cebc <_PaintTransChildren+0x90>

0801cf00 <_Findx0.constprop.9>:
 801cf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf02:	4604      	mov	r4, r0
 801cf04:	b085      	sub	sp, #20
 801cf06:	460f      	mov	r7, r1
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	d036      	beq.n	801cf7a <_Findx0.constprop.9+0x7a>
 801cf0c:	2500      	movs	r5, #0
 801cf0e:	ae02      	add	r6, sp, #8
 801cf10:	4620      	mov	r0, r4
 801cf12:	f008 fceb 	bl	80258ec <GUI_ALLOC_LockH>
 801cf16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cf18:	9000      	str	r0, [sp, #0]
 801cf1a:	07a2      	lsls	r2, r4, #30
 801cf1c:	d508      	bpl.n	801cf30 <_Findx0.constprop.9+0x30>
 801cf1e:	c803      	ldmia	r0, {r0, r1}
 801cf20:	e886 0003 	stmia.w	r6, {r0, r1}
 801cf24:	4638      	mov	r0, r7
 801cf26:	4631      	mov	r1, r6
 801cf28:	f007 fbb0 	bl	802468c <GUI_RectsIntersect>
 801cf2c:	b948      	cbnz	r0, 801cf42 <_Findx0.constprop.9+0x42>
 801cf2e:	9800      	ldr	r0, [sp, #0]
 801cf30:	6a04      	ldr	r4, [r0, #32]
 801cf32:	4668      	mov	r0, sp
 801cf34:	f008 fcec 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cf38:	2c00      	cmp	r4, #0
 801cf3a:	d1e9      	bne.n	801cf10 <_Findx0.constprop.9+0x10>
 801cf3c:	4628      	mov	r0, r5
 801cf3e:	b005      	add	sp, #20
 801cf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf42:	07e3      	lsls	r3, r4, #31
 801cf44:	d406      	bmi.n	801cf54 <_Findx0.constprop.9+0x54>
 801cf46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cf4a:	9800      	ldr	r0, [sp, #0]
 801cf4c:	3301      	adds	r3, #1
 801cf4e:	803b      	strh	r3, [r7, #0]
 801cf50:	2501      	movs	r5, #1
 801cf52:	e7ed      	b.n	801cf30 <_Findx0.constprop.9+0x30>
 801cf54:	9800      	ldr	r0, [sp, #0]
 801cf56:	69c4      	ldr	r4, [r0, #28]
 801cf58:	2c00      	cmp	r4, #0
 801cf5a:	d0e9      	beq.n	801cf30 <_Findx0.constprop.9+0x30>
 801cf5c:	4620      	mov	r0, r4
 801cf5e:	4639      	mov	r1, r7
 801cf60:	4632      	mov	r2, r6
 801cf62:	f7ff fe6b 	bl	801cc3c <_Findx0>
 801cf66:	2800      	cmp	r0, #0
 801cf68:	4620      	mov	r0, r4
 801cf6a:	bf18      	it	ne
 801cf6c:	2501      	movne	r5, #1
 801cf6e:	f008 fcb3 	bl	80258d8 <GUI_ALLOC_h2p>
 801cf72:	6a04      	ldr	r4, [r0, #32]
 801cf74:	2c00      	cmp	r4, #0
 801cf76:	d1f1      	bne.n	801cf5c <_Findx0.constprop.9+0x5c>
 801cf78:	e7d9      	b.n	801cf2e <_Findx0.constprop.9+0x2e>
 801cf7a:	4605      	mov	r5, r0
 801cf7c:	e7de      	b.n	801cf3c <_Findx0.constprop.9+0x3c>
 801cf7e:	bf00      	nop

0801cf80 <_Findy1.constprop.10>:
 801cf80:	b570      	push	{r4, r5, r6, lr}
 801cf82:	4604      	mov	r4, r0
 801cf84:	b084      	sub	sp, #16
 801cf86:	460e      	mov	r6, r1
 801cf88:	b1b0      	cbz	r0, 801cfb8 <_Findy1.constprop.10+0x38>
 801cf8a:	ad02      	add	r5, sp, #8
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	f008 fcad 	bl	80258ec <GUI_ALLOC_LockH>
 801cf92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cf94:	9001      	str	r0, [sp, #4]
 801cf96:	07a2      	lsls	r2, r4, #30
 801cf98:	d508      	bpl.n	801cfac <_Findy1.constprop.10+0x2c>
 801cf9a:	c803      	ldmia	r0, {r0, r1}
 801cf9c:	e885 0003 	stmia.w	r5, {r0, r1}
 801cfa0:	4630      	mov	r0, r6
 801cfa2:	4629      	mov	r1, r5
 801cfa4:	f007 fb72 	bl	802468c <GUI_RectsIntersect>
 801cfa8:	b940      	cbnz	r0, 801cfbc <_Findy1.constprop.10+0x3c>
 801cfaa:	9801      	ldr	r0, [sp, #4]
 801cfac:	6a04      	ldr	r4, [r0, #32]
 801cfae:	a801      	add	r0, sp, #4
 801cfb0:	f008 fcae 	bl	8025910 <GUI_ALLOC_UnlockH>
 801cfb4:	2c00      	cmp	r4, #0
 801cfb6:	d1e9      	bne.n	801cf8c <_Findy1.constprop.10+0xc>
 801cfb8:	b004      	add	sp, #16
 801cfba:	bd70      	pop	{r4, r5, r6, pc}
 801cfbc:	07e3      	lsls	r3, r4, #31
 801cfbe:	9801      	ldr	r0, [sp, #4]
 801cfc0:	d418      	bmi.n	801cff4 <_Findy1.constprop.10+0x74>
 801cfc2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801cfc6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	dd09      	ble.n	801cfe2 <_Findy1.constprop.10+0x62>
 801cfce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cfd2:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801cfd6:	b21a      	sxth	r2, r3
 801cfd8:	4291      	cmp	r1, r2
 801cfda:	dbe7      	blt.n	801cfac <_Findy1.constprop.10+0x2c>
 801cfdc:	3b01      	subs	r3, #1
 801cfde:	80f3      	strh	r3, [r6, #6]
 801cfe0:	e7e4      	b.n	801cfac <_Findy1.constprop.10+0x2c>
 801cfe2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801cfe6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801cfea:	b21a      	sxth	r2, r3
 801cfec:	4291      	cmp	r1, r2
 801cfee:	dddd      	ble.n	801cfac <_Findy1.constprop.10+0x2c>
 801cff0:	80f3      	strh	r3, [r6, #6]
 801cff2:	e7db      	b.n	801cfac <_Findy1.constprop.10+0x2c>
 801cff4:	69c4      	ldr	r4, [r0, #28]
 801cff6:	2c00      	cmp	r4, #0
 801cff8:	d0d8      	beq.n	801cfac <_Findy1.constprop.10+0x2c>
 801cffa:	4620      	mov	r0, r4
 801cffc:	4631      	mov	r1, r6
 801cffe:	462a      	mov	r2, r5
 801d000:	f7ff fdb2 	bl	801cb68 <_Findy1>
 801d004:	4620      	mov	r0, r4
 801d006:	f008 fc67 	bl	80258d8 <GUI_ALLOC_h2p>
 801d00a:	6a04      	ldr	r4, [r0, #32]
 801d00c:	2c00      	cmp	r4, #0
 801d00e:	d1f4      	bne.n	801cffa <_Findy1.constprop.10+0x7a>
 801d010:	e7cb      	b.n	801cfaa <_Findy1.constprop.10+0x2a>
 801d012:	bf00      	nop

0801d014 <WM__PaintWinAndOverlays>:
 801d014:	b530      	push	{r4, r5, lr}
 801d016:	b083      	sub	sp, #12
 801d018:	4604      	mov	r4, r0
 801d01a:	f008 fc67 	bl	80258ec <GUI_ALLOC_LockH>
 801d01e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801d020:	9001      	str	r0, [sp, #4]
 801d022:	f640 0301 	movw	r3, #2049	; 0x801
 801d026:	400b      	ands	r3, r1
 801d028:	2b01      	cmp	r3, #1
 801d02a:	d00e      	beq.n	801d04a <WM__PaintWinAndOverlays+0x36>
 801d02c:	a801      	add	r0, sp, #4
 801d02e:	f008 fc6f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d032:	4620      	mov	r0, r4
 801d034:	f008 fc50 	bl	80258d8 <GUI_ALLOC_h2p>
 801d038:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801d03a:	4a1b      	ldr	r2, [pc, #108]	; (801d0a8 <WM__PaintWinAndOverlays+0x94>)
 801d03c:	4b1b      	ldr	r3, [pc, #108]	; (801d0ac <WM__PaintWinAndOverlays+0x98>)
 801d03e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 801d042:	bf08      	it	eq
 801d044:	4613      	moveq	r3, r2
 801d046:	4620      	mov	r0, r4
 801d048:	4798      	blx	r3
 801d04a:	4b19      	ldr	r3, [pc, #100]	; (801d0b0 <WM__PaintWinAndOverlays+0x9c>)
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	b90b      	cbnz	r3, 801d054 <WM__PaintWinAndOverlays+0x40>
 801d050:	b003      	add	sp, #12
 801d052:	bd30      	pop	{r4, r5, pc}
 801d054:	4620      	mov	r0, r4
 801d056:	f7ff fee9 	bl	801ce2c <_PaintTransChildren>
 801d05a:	4620      	mov	r0, r4
 801d05c:	f008 fc3c 	bl	80258d8 <GUI_ALLOC_h2p>
 801d060:	6985      	ldr	r5, [r0, #24]
 801d062:	6a04      	ldr	r4, [r0, #32]
 801d064:	2d00      	cmp	r5, #0
 801d066:	d0f3      	beq.n	801d050 <WM__PaintWinAndOverlays+0x3c>
 801d068:	b184      	cbz	r4, 801d08c <WM__PaintWinAndOverlays+0x78>
 801d06a:	4620      	mov	r0, r4
 801d06c:	f008 fc34 	bl	80258d8 <GUI_ALLOC_h2p>
 801d070:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d072:	f003 0303 	and.w	r3, r3, #3
 801d076:	2b03      	cmp	r3, #3
 801d078:	d011      	beq.n	801d09e <WM__PaintWinAndOverlays+0x8a>
 801d07a:	4620      	mov	r0, r4
 801d07c:	f7ff fed6 	bl	801ce2c <_PaintTransChildren>
 801d080:	4620      	mov	r0, r4
 801d082:	f008 fc29 	bl	80258d8 <GUI_ALLOC_h2p>
 801d086:	6a04      	ldr	r4, [r0, #32]
 801d088:	2c00      	cmp	r4, #0
 801d08a:	d1ee      	bne.n	801d06a <WM__PaintWinAndOverlays+0x56>
 801d08c:	4628      	mov	r0, r5
 801d08e:	f008 fc23 	bl	80258d8 <GUI_ALLOC_h2p>
 801d092:	6985      	ldr	r5, [r0, #24]
 801d094:	6a04      	ldr	r4, [r0, #32]
 801d096:	2d00      	cmp	r5, #0
 801d098:	d1e6      	bne.n	801d068 <WM__PaintWinAndOverlays+0x54>
 801d09a:	b003      	add	sp, #12
 801d09c:	bd30      	pop	{r4, r5, pc}
 801d09e:	4620      	mov	r0, r4
 801d0a0:	f7ff fe66 	bl	801cd70 <_Paint1Trans>
 801d0a4:	e7e9      	b.n	801d07a <WM__PaintWinAndOverlays+0x66>
 801d0a6:	bf00      	nop
 801d0a8:	0801e949 	.word	0x0801e949
 801d0ac:	0801efd1 	.word	0x0801efd1
 801d0b0:	2002cba8 	.word	0x2002cba8

0801d0b4 <_cbPaintMemDev>:
 801d0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0b8:	4d18      	ldr	r5, [pc, #96]	; (801d11c <_cbPaintMemDev+0x68>)
 801d0ba:	682b      	ldr	r3, [r5, #0]
 801d0bc:	b082      	sub	sp, #8
 801d0be:	4681      	mov	r9, r0
 801d0c0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d0c2:	f008 fc13 	bl	80258ec <GUI_ALLOC_LockH>
 801d0c6:	682a      	ldr	r2, [r5, #0]
 801d0c8:	ac02      	add	r4, sp, #8
 801d0ca:	3208      	adds	r2, #8
 801d0cc:	4603      	mov	r3, r0
 801d0ce:	f844 0d04 	str.w	r0, [r4, #-4]!
 801d0d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d0d6:	f103 0208 	add.w	r2, r3, #8
 801d0da:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 801d0de:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 801d0e2:	899f      	ldrh	r7, [r3, #12]
 801d0e4:	89de      	ldrh	r6, [r3, #14]
 801d0e6:	e882 0003 	stmia.w	r2, {r0, r1}
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	f008 fc10 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d0f0:	f8d9 0000 	ldr.w	r0, [r9]
 801d0f4:	f7ff ff8e 	bl	801d014 <WM__PaintWinAndOverlays>
 801d0f8:	682b      	ldr	r3, [r5, #0]
 801d0fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d0fc:	f008 fbf6 	bl	80258ec <GUI_ALLOC_LockH>
 801d100:	4603      	mov	r3, r0
 801d102:	4620      	mov	r0, r4
 801d104:	f8a3 a008 	strh.w	sl, [r3, #8]
 801d108:	f8a3 800a 	strh.w	r8, [r3, #10]
 801d10c:	819f      	strh	r7, [r3, #12]
 801d10e:	81de      	strh	r6, [r3, #14]
 801d110:	9301      	str	r3, [sp, #4]
 801d112:	f008 fbfd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d116:	b002      	add	sp, #8
 801d118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d11c:	20000280 	.word	0x20000280

0801d120 <_Invalidate1Abs>:
 801d120:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d122:	b085      	sub	sp, #20
 801d124:	4616      	mov	r6, r2
 801d126:	460c      	mov	r4, r1
 801d128:	4605      	mov	r5, r0
 801d12a:	f008 fbd5 	bl	80258d8 <GUI_ALLOC_h2p>
 801d12e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d130:	9001      	str	r0, [sp, #4]
 801d132:	079a      	lsls	r2, r3, #30
 801d134:	d555      	bpl.n	801d1e2 <_Invalidate1Abs+0xc2>
 801d136:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d13a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d13e:	4291      	cmp	r1, r2
 801d140:	dc4f      	bgt.n	801d1e2 <_Invalidate1Abs+0xc2>
 801d142:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d146:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d14a:	4291      	cmp	r1, r2
 801d14c:	dc49      	bgt.n	801d1e2 <_Invalidate1Abs+0xc2>
 801d14e:	f640 0201 	movw	r2, #2049	; 0x801
 801d152:	401a      	ands	r2, r3
 801d154:	2a01      	cmp	r2, #1
 801d156:	d044      	beq.n	801d1e2 <_Invalidate1Abs+0xc2>
 801d158:	4628      	mov	r0, r5
 801d15a:	f008 fbc7 	bl	80258ec <GUI_ALLOC_LockH>
 801d15e:	af02      	add	r7, sp, #8
 801d160:	4603      	mov	r3, r0
 801d162:	4602      	mov	r2, r0
 801d164:	4621      	mov	r1, r4
 801d166:	4638      	mov	r0, r7
 801d168:	9301      	str	r3, [sp, #4]
 801d16a:	f005 f87f 	bl	802226c <GUI__IntersectRects>
 801d16e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d172:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d176:	429a      	cmp	r2, r3
 801d178:	dc30      	bgt.n	801d1dc <_Invalidate1Abs+0xbc>
 801d17a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d17e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d182:	429a      	cmp	r2, r3
 801d184:	dc2a      	bgt.n	801d1dc <_Invalidate1Abs+0xbc>
 801d186:	9a01      	ldr	r2, [sp, #4]
 801d188:	6a94      	ldr	r4, [r2, #40]	; 0x28
 801d18a:	f244 0320 	movw	r3, #16416	; 0x4020
 801d18e:	4023      	ands	r3, r4
 801d190:	bb4b      	cbnz	r3, 801d1e6 <_Invalidate1Abs+0xc6>
 801d192:	4b19      	ldr	r3, [pc, #100]	; (801d1f8 <_Invalidate1Abs+0xd8>)
 801d194:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d198:	f8b3 e000 	ldrh.w	lr, [r3]
 801d19c:	4334      	orrs	r4, r6
 801d19e:	f102 0708 	add.w	r7, r2, #8
 801d1a2:	f10e 0601 	add.w	r6, lr, #1
 801d1a6:	e887 0003 	stmia.w	r7, {r0, r1}
 801d1aa:	801e      	strh	r6, [r3, #0]
 801d1ac:	6294      	str	r4, [r2, #40]	; 0x28
 801d1ae:	e000      	b.n	801d1b2 <_Invalidate1Abs+0x92>
 801d1b0:	461d      	mov	r5, r3
 801d1b2:	4628      	mov	r0, r5
 801d1b4:	f008 fb90 	bl	80258d8 <GUI_ALLOC_h2p>
 801d1b8:	6983      	ldr	r3, [r0, #24]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d1f8      	bne.n	801d1b0 <_Invalidate1Abs+0x90>
 801d1be:	4b0f      	ldr	r3, [pc, #60]	; (801d1fc <_Invalidate1Abs+0xdc>)
 801d1c0:	681a      	ldr	r2, [r3, #0]
 801d1c2:	4295      	cmp	r5, r2
 801d1c4:	d016      	beq.n	801d1f4 <_Invalidate1Abs+0xd4>
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	429d      	cmp	r5, r3
 801d1ca:	bf0c      	ite	eq
 801d1cc:	2302      	moveq	r3, #2
 801d1ce:	2300      	movne	r3, #0
 801d1d0:	4a0b      	ldr	r2, [pc, #44]	; (801d200 <_Invalidate1Abs+0xe0>)
 801d1d2:	6811      	ldr	r1, [r2, #0]
 801d1d4:	430b      	orrs	r3, r1
 801d1d6:	6013      	str	r3, [r2, #0]
 801d1d8:	f005 fcfe 	bl	8022bd8 <GUI_SignalEvent>
 801d1dc:	a801      	add	r0, sp, #4
 801d1de:	f008 fb97 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d1e2:	b005      	add	sp, #20
 801d1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1e6:	f102 0008 	add.w	r0, r2, #8
 801d1ea:	4601      	mov	r1, r0
 801d1ec:	463a      	mov	r2, r7
 801d1ee:	f007 f9d1 	bl	8024594 <GUI_MergeRect>
 801d1f2:	e7f3      	b.n	801d1dc <_Invalidate1Abs+0xbc>
 801d1f4:	2301      	movs	r3, #1
 801d1f6:	e7eb      	b.n	801d1d0 <_Invalidate1Abs+0xb0>
 801d1f8:	2002cb70 	.word	0x2002cb70
 801d1fc:	2002cb58 	.word	0x2002cb58
 801d200:	2002cb80 	.word	0x2002cb80

0801d204 <WM__ActivateClipRect>:
 801d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d208:	4f43      	ldr	r7, [pc, #268]	; (801d318 <WM__ActivateClipRect+0x114>)
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801d210:	b086      	sub	sp, #24
 801d212:	2a00      	cmp	r2, #0
 801d214:	d139      	bne.n	801d28a <WM__ActivateClipRect+0x86>
 801d216:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d218:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801d31c <WM__ActivateClipRect+0x118>
 801d21c:	f008 fb66 	bl	80258ec <GUI_ALLOC_LockH>
 801d220:	4603      	mov	r3, r0
 801d222:	c803      	ldmia	r0, {r0, r1}
 801d224:	ae02      	add	r6, sp, #8
 801d226:	e886 0003 	stmia.w	r6, {r0, r1}
 801d22a:	4668      	mov	r0, sp
 801d22c:	9300      	str	r3, [sp, #0]
 801d22e:	f008 fb6f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d232:	f8d8 4000 	ldr.w	r4, [r8]
 801d236:	2c00      	cmp	r4, #0
 801d238:	d14e      	bne.n	801d2d8 <WM__ActivateClipRect+0xd4>
 801d23a:	683c      	ldr	r4, [r7, #0]
 801d23c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d061      	beq.n	801d306 <WM__ActivateClipRect+0x102>
 801d242:	6818      	ldr	r0, [r3, #0]
 801d244:	6859      	ldr	r1, [r3, #4]
 801d246:	f8d8 2000 	ldr.w	r2, [r8]
 801d24a:	ad04      	add	r5, sp, #16
 801d24c:	462b      	mov	r3, r5
 801d24e:	c303      	stmia	r3!, {r0, r1}
 801d250:	b1ca      	cbz	r2, 801d286 <WM__ActivateClipRect+0x82>
 801d252:	4610      	mov	r0, r2
 801d254:	f008 fb4a 	bl	80258ec <GUI_ALLOC_LockH>
 801d258:	ac06      	add	r4, sp, #24
 801d25a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801d25e:	f844 0d14 	str.w	r0, [r4, #-20]!
 801d262:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d266:	4628      	mov	r0, r5
 801d268:	f007 f9c6 	bl	80245f8 <GUI_MoveRect>
 801d26c:	4620      	mov	r0, r4
 801d26e:	f008 fb4f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d272:	4628      	mov	r0, r5
 801d274:	4631      	mov	r1, r6
 801d276:	f004 ffd9 	bl	802222c <GUI__IntersectRect>
 801d27a:	4628      	mov	r0, r5
 801d27c:	f004 f86e 	bl	802135c <LCD_SetClipRectEx>
 801d280:	b006      	add	sp, #24
 801d282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d286:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801d288:	e7e3      	b.n	801d252 <WM__ActivateClipRect+0x4e>
 801d28a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d28c:	2a00      	cmp	r2, #0
 801d28e:	d03e      	beq.n	801d30e <WM__ActivateClipRect+0x10a>
 801d290:	4c22      	ldr	r4, [pc, #136]	; (801d31c <WM__ActivateClipRect+0x118>)
 801d292:	6810      	ldr	r0, [r2, #0]
 801d294:	6851      	ldr	r1, [r2, #4]
 801d296:	6824      	ldr	r4, [r4, #0]
 801d298:	ad04      	add	r5, sp, #16
 801d29a:	462a      	mov	r2, r5
 801d29c:	c203      	stmia	r2!, {r0, r1}
 801d29e:	b1cc      	cbz	r4, 801d2d4 <WM__ActivateClipRect+0xd0>
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	f008 fb23 	bl	80258ec <GUI_ALLOC_LockH>
 801d2a6:	ac06      	add	r4, sp, #24
 801d2a8:	f9b0 1000 	ldrsh.w	r1, [r0]
 801d2ac:	f844 0d10 	str.w	r0, [r4, #-16]!
 801d2b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d2b4:	4628      	mov	r0, r5
 801d2b6:	f007 f99f 	bl	80245f8 <GUI_MoveRect>
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	f008 fb28 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d2c0:	4628      	mov	r0, r5
 801d2c2:	4917      	ldr	r1, [pc, #92]	; (801d320 <WM__ActivateClipRect+0x11c>)
 801d2c4:	f004 ffb2 	bl	802222c <GUI__IntersectRect>
 801d2c8:	4628      	mov	r0, r5
 801d2ca:	f004 f847 	bl	802135c <LCD_SetClipRectEx>
 801d2ce:	b006      	add	sp, #24
 801d2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2d4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801d2d6:	e7e3      	b.n	801d2a0 <WM__ActivateClipRect+0x9c>
 801d2d8:	ad04      	add	r5, sp, #16
 801d2da:	e007      	b.n	801d2ec <WM__ActivateClipRect+0xe8>
 801d2dc:	f004 ffa6 	bl	802222c <GUI__IntersectRect>
 801d2e0:	9b04      	ldr	r3, [sp, #16]
 801d2e2:	699c      	ldr	r4, [r3, #24]
 801d2e4:	4628      	mov	r0, r5
 801d2e6:	b154      	cbz	r4, 801d2fe <WM__ActivateClipRect+0xfa>
 801d2e8:	f008 fb12 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	f008 fafd 	bl	80258ec <GUI_ALLOC_LockH>
 801d2f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801d2f4:	9004      	str	r0, [sp, #16]
 801d2f6:	0793      	lsls	r3, r2, #30
 801d2f8:	4601      	mov	r1, r0
 801d2fa:	4630      	mov	r0, r6
 801d2fc:	d4ee      	bmi.n	801d2dc <WM__ActivateClipRect+0xd8>
 801d2fe:	4628      	mov	r0, r5
 801d300:	f008 fb06 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d304:	e799      	b.n	801d23a <WM__ActivateClipRect+0x36>
 801d306:	4630      	mov	r0, r6
 801d308:	f004 f828 	bl	802135c <LCD_SetClipRectEx>
 801d30c:	e7b8      	b.n	801d280 <WM__ActivateClipRect+0x7c>
 801d30e:	4804      	ldr	r0, [pc, #16]	; (801d320 <WM__ActivateClipRect+0x11c>)
 801d310:	f004 f824 	bl	802135c <LCD_SetClipRectEx>
 801d314:	e7b4      	b.n	801d280 <WM__ActivateClipRect+0x7c>
 801d316:	bf00      	nop
 801d318:	20000280 	.word	0x20000280
 801d31c:	2002cb54 	.word	0x2002cb54
 801d320:	2002b16c 	.word	0x2002b16c

0801d324 <WM__InsertWindowIntoList>:
 801d324:	b570      	push	{r4, r5, r6, lr}
 801d326:	460c      	mov	r4, r1
 801d328:	b084      	sub	sp, #16
 801d32a:	4605      	mov	r5, r0
 801d32c:	b909      	cbnz	r1, 801d332 <WM__InsertWindowIntoList+0xe>
 801d32e:	b004      	add	sp, #16
 801d330:	bd70      	pop	{r4, r5, r6, pc}
 801d332:	f008 fadb 	bl	80258ec <GUI_ALLOC_LockH>
 801d336:	4603      	mov	r3, r0
 801d338:	2200      	movs	r2, #0
 801d33a:	6184      	str	r4, [r0, #24]
 801d33c:	4620      	mov	r0, r4
 801d33e:	621a      	str	r2, [r3, #32]
 801d340:	9301      	str	r3, [sp, #4]
 801d342:	f008 fad3 	bl	80258ec <GUI_ALLOC_LockH>
 801d346:	9b01      	ldr	r3, [sp, #4]
 801d348:	69c4      	ldr	r4, [r0, #28]
 801d34a:	9002      	str	r0, [sp, #8]
 801d34c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801d34e:	2c00      	cmp	r4, #0
 801d350:	d029      	beq.n	801d3a6 <WM__InsertWindowIntoList+0x82>
 801d352:	4620      	mov	r0, r4
 801d354:	f008 faca 	bl	80258ec <GUI_ALLOC_LockH>
 801d358:	0731      	lsls	r1, r6, #28
 801d35a:	9003      	str	r0, [sp, #12]
 801d35c:	d43a      	bmi.n	801d3d4 <WM__InsertWindowIntoList+0xb0>
 801d35e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d360:	071a      	lsls	r2, r3, #28
 801d362:	d429      	bmi.n	801d3b8 <WM__InsertWindowIntoList+0x94>
 801d364:	a802      	add	r0, sp, #8
 801d366:	f008 fad3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d36a:	a803      	add	r0, sp, #12
 801d36c:	f008 fad0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d370:	4620      	mov	r0, r4
 801d372:	f008 fab1 	bl	80258d8 <GUI_ALLOC_h2p>
 801d376:	6a04      	ldr	r4, [r0, #32]
 801d378:	9003      	str	r0, [sp, #12]
 801d37a:	b92c      	cbnz	r4, 801d388 <WM__InsertWindowIntoList+0x64>
 801d37c:	6205      	str	r5, [r0, #32]
 801d37e:	e00d      	b.n	801d39c <WM__InsertWindowIntoList+0x78>
 801d380:	6a04      	ldr	r4, [r0, #32]
 801d382:	9003      	str	r0, [sp, #12]
 801d384:	2c00      	cmp	r4, #0
 801d386:	d0f9      	beq.n	801d37c <WM__InsertWindowIntoList+0x58>
 801d388:	4620      	mov	r0, r4
 801d38a:	f008 faa5 	bl	80258d8 <GUI_ALLOC_h2p>
 801d38e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d390:	071b      	lsls	r3, r3, #28
 801d392:	d5f5      	bpl.n	801d380 <WM__InsertWindowIntoList+0x5c>
 801d394:	9a03      	ldr	r2, [sp, #12]
 801d396:	9b01      	ldr	r3, [sp, #4]
 801d398:	6215      	str	r5, [r2, #32]
 801d39a:	621c      	str	r4, [r3, #32]
 801d39c:	a801      	add	r0, sp, #4
 801d39e:	f008 fab7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3a2:	b004      	add	sp, #16
 801d3a4:	bd70      	pop	{r4, r5, r6, pc}
 801d3a6:	61c5      	str	r5, [r0, #28]
 801d3a8:	a801      	add	r0, sp, #4
 801d3aa:	f008 fab1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3ae:	a802      	add	r0, sp, #8
 801d3b0:	f008 faae 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3b4:	b004      	add	sp, #16
 801d3b6:	bd70      	pop	{r4, r5, r6, pc}
 801d3b8:	9a01      	ldr	r2, [sp, #4]
 801d3ba:	9b02      	ldr	r3, [sp, #8]
 801d3bc:	6214      	str	r4, [r2, #32]
 801d3be:	a801      	add	r0, sp, #4
 801d3c0:	61dd      	str	r5, [r3, #28]
 801d3c2:	f008 faa5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3c6:	a802      	add	r0, sp, #8
 801d3c8:	f008 faa2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3cc:	a803      	add	r0, sp, #12
 801d3ce:	f008 fa9f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3d2:	e7ac      	b.n	801d32e <WM__InsertWindowIntoList+0xa>
 801d3d4:	a802      	add	r0, sp, #8
 801d3d6:	f008 fa9b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3da:	a803      	add	r0, sp, #12
 801d3dc:	f008 fa98 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	f008 fa79 	bl	80258d8 <GUI_ALLOC_h2p>
 801d3e6:	6a03      	ldr	r3, [r0, #32]
 801d3e8:	9003      	str	r0, [sp, #12]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d0c6      	beq.n	801d37c <WM__InsertWindowIntoList+0x58>
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	f008 fa72 	bl	80258d8 <GUI_ALLOC_h2p>
 801d3f4:	6a03      	ldr	r3, [r0, #32]
 801d3f6:	9003      	str	r0, [sp, #12]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d1f8      	bne.n	801d3ee <WM__InsertWindowIntoList+0xca>
 801d3fc:	e7be      	b.n	801d37c <WM__InsertWindowIntoList+0x58>
 801d3fe:	bf00      	nop

0801d400 <WM__RemoveWindowFromList>:
 801d400:	b570      	push	{r4, r5, r6, lr}
 801d402:	4604      	mov	r4, r0
 801d404:	f008 fa68 	bl	80258d8 <GUI_ALLOC_h2p>
 801d408:	4605      	mov	r5, r0
 801d40a:	6980      	ldr	r0, [r0, #24]
 801d40c:	b900      	cbnz	r0, 801d410 <WM__RemoveWindowFromList+0x10>
 801d40e:	bd70      	pop	{r4, r5, r6, pc}
 801d410:	f008 fa62 	bl	80258d8 <GUI_ALLOC_h2p>
 801d414:	69c3      	ldr	r3, [r0, #28]
 801d416:	42a3      	cmp	r3, r4
 801d418:	4606      	mov	r6, r0
 801d41a:	d00c      	beq.n	801d436 <WM__RemoveWindowFromList+0x36>
 801d41c:	b913      	cbnz	r3, 801d424 <WM__RemoveWindowFromList+0x24>
 801d41e:	e010      	b.n	801d442 <WM__RemoveWindowFromList+0x42>
 801d420:	2b00      	cmp	r3, #0
 801d422:	d0f4      	beq.n	801d40e <WM__RemoveWindowFromList+0xe>
 801d424:	4618      	mov	r0, r3
 801d426:	f008 fa57 	bl	80258d8 <GUI_ALLOC_h2p>
 801d42a:	6a03      	ldr	r3, [r0, #32]
 801d42c:	42a3      	cmp	r3, r4
 801d42e:	d1f7      	bne.n	801d420 <WM__RemoveWindowFromList+0x20>
 801d430:	6a2b      	ldr	r3, [r5, #32]
 801d432:	6203      	str	r3, [r0, #32]
 801d434:	bd70      	pop	{r4, r5, r6, pc}
 801d436:	4618      	mov	r0, r3
 801d438:	f008 fa4e 	bl	80258d8 <GUI_ALLOC_h2p>
 801d43c:	6a03      	ldr	r3, [r0, #32]
 801d43e:	61f3      	str	r3, [r6, #28]
 801d440:	bd70      	pop	{r4, r5, r6, pc}
 801d442:	bd70      	pop	{r4, r5, r6, pc}

0801d444 <WM__IsWindow>:
 801d444:	4b09      	ldr	r3, [pc, #36]	; (801d46c <WM__IsWindow+0x28>)
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	b510      	push	{r4, lr}
 801d44a:	4604      	mov	r4, r0
 801d44c:	b153      	cbz	r3, 801d464 <WM__IsWindow+0x20>
 801d44e:	4283      	cmp	r3, r0
 801d450:	d102      	bne.n	801d458 <WM__IsWindow+0x14>
 801d452:	e009      	b.n	801d468 <WM__IsWindow+0x24>
 801d454:	429c      	cmp	r4, r3
 801d456:	d007      	beq.n	801d468 <WM__IsWindow+0x24>
 801d458:	4618      	mov	r0, r3
 801d45a:	f008 fa3d 	bl	80258d8 <GUI_ALLOC_h2p>
 801d45e:	6943      	ldr	r3, [r0, #20]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d1f7      	bne.n	801d454 <WM__IsWindow+0x10>
 801d464:	2000      	movs	r0, #0
 801d466:	bd10      	pop	{r4, pc}
 801d468:	2001      	movs	r0, #1
 801d46a:	bd10      	pop	{r4, pc}
 801d46c:	2002cb74 	.word	0x2002cb74

0801d470 <WM__InvalidateDrawAndDescs>:
 801d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d474:	4604      	mov	r4, r0
 801d476:	b08f      	sub	sp, #60	; 0x3c
 801d478:	b910      	cbnz	r0, 801d480 <WM__InvalidateDrawAndDescs+0x10>
 801d47a:	b00f      	add	sp, #60	; 0x3c
 801d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d480:	f008 fa34 	bl	80258ec <GUI_ALLOC_LockH>
 801d484:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801d486:	9005      	str	r0, [sp, #20]
 801d488:	0792      	lsls	r2, r2, #30
 801d48a:	f140 813c 	bpl.w	801d706 <WM__InvalidateDrawAndDescs+0x296>
 801d48e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d490:	b140      	cbz	r0, 801d4a4 <WM__InvalidateDrawAndDescs+0x34>
 801d492:	4ba0      	ldr	r3, [pc, #640]	; (801d714 <WM__InvalidateDrawAndDescs+0x2a4>)
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	42a3      	cmp	r3, r4
 801d498:	d004      	beq.n	801d4a4 <WM__InvalidateDrawAndDescs+0x34>
 801d49a:	f002 feff 	bl	802029c <GUI_MEMDEV_Delete>
 801d49e:	9b05      	ldr	r3, [sp, #20]
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	625a      	str	r2, [r3, #36]	; 0x24
 801d4a4:	4620      	mov	r0, r4
 801d4a6:	f7fe fcb5 	bl	801be14 <WM_GetFirstChild>
 801d4aa:	9003      	str	r0, [sp, #12]
 801d4ac:	2800      	cmp	r0, #0
 801d4ae:	f000 812a 	beq.w	801d706 <WM__InvalidateDrawAndDescs+0x296>
 801d4b2:	f8df 8260 	ldr.w	r8, [pc, #608]	; 801d714 <WM__InvalidateDrawAndDescs+0x2a4>
 801d4b6:	9803      	ldr	r0, [sp, #12]
 801d4b8:	f008 fa18 	bl	80258ec <GUI_ALLOC_LockH>
 801d4bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d4be:	9006      	str	r0, [sp, #24]
 801d4c0:	079b      	lsls	r3, r3, #30
 801d4c2:	f140 8115 	bpl.w	801d6f0 <WM__InvalidateDrawAndDescs+0x280>
 801d4c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d4c8:	b148      	cbz	r0, 801d4de <WM__InvalidateDrawAndDescs+0x6e>
 801d4ca:	f8d8 3000 	ldr.w	r3, [r8]
 801d4ce:	9a03      	ldr	r2, [sp, #12]
 801d4d0:	429a      	cmp	r2, r3
 801d4d2:	d004      	beq.n	801d4de <WM__InvalidateDrawAndDescs+0x6e>
 801d4d4:	f002 fee2 	bl	802029c <GUI_MEMDEV_Delete>
 801d4d8:	9b06      	ldr	r3, [sp, #24]
 801d4da:	2200      	movs	r2, #0
 801d4dc:	625a      	str	r2, [r3, #36]	; 0x24
 801d4de:	9803      	ldr	r0, [sp, #12]
 801d4e0:	f7fe fc98 	bl	801be14 <WM_GetFirstChild>
 801d4e4:	9002      	str	r0, [sp, #8]
 801d4e6:	2800      	cmp	r0, #0
 801d4e8:	f000 8102 	beq.w	801d6f0 <WM__InvalidateDrawAndDescs+0x280>
 801d4ec:	9802      	ldr	r0, [sp, #8]
 801d4ee:	f008 f9fd 	bl	80258ec <GUI_ALLOC_LockH>
 801d4f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d4f4:	9007      	str	r0, [sp, #28]
 801d4f6:	079f      	lsls	r7, r3, #30
 801d4f8:	f140 80ef 	bpl.w	801d6da <WM__InvalidateDrawAndDescs+0x26a>
 801d4fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d4fe:	b148      	cbz	r0, 801d514 <WM__InvalidateDrawAndDescs+0xa4>
 801d500:	f8d8 3000 	ldr.w	r3, [r8]
 801d504:	9a02      	ldr	r2, [sp, #8]
 801d506:	429a      	cmp	r2, r3
 801d508:	d004      	beq.n	801d514 <WM__InvalidateDrawAndDescs+0xa4>
 801d50a:	f002 fec7 	bl	802029c <GUI_MEMDEV_Delete>
 801d50e:	9b07      	ldr	r3, [sp, #28]
 801d510:	2200      	movs	r2, #0
 801d512:	625a      	str	r2, [r3, #36]	; 0x24
 801d514:	9802      	ldr	r0, [sp, #8]
 801d516:	f7fe fc7d 	bl	801be14 <WM_GetFirstChild>
 801d51a:	4683      	mov	fp, r0
 801d51c:	2800      	cmp	r0, #0
 801d51e:	f000 80dc 	beq.w	801d6da <WM__InvalidateDrawAndDescs+0x26a>
 801d522:	4658      	mov	r0, fp
 801d524:	f008 f9e2 	bl	80258ec <GUI_ALLOC_LockH>
 801d528:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d52a:	9008      	str	r0, [sp, #32]
 801d52c:	079e      	lsls	r6, r3, #30
 801d52e:	f140 80c8 	bpl.w	801d6c2 <WM__InvalidateDrawAndDescs+0x252>
 801d532:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d534:	b140      	cbz	r0, 801d548 <WM__InvalidateDrawAndDescs+0xd8>
 801d536:	f8d8 3000 	ldr.w	r3, [r8]
 801d53a:	459b      	cmp	fp, r3
 801d53c:	d004      	beq.n	801d548 <WM__InvalidateDrawAndDescs+0xd8>
 801d53e:	f002 fead 	bl	802029c <GUI_MEMDEV_Delete>
 801d542:	9b08      	ldr	r3, [sp, #32]
 801d544:	2200      	movs	r2, #0
 801d546:	625a      	str	r2, [r3, #36]	; 0x24
 801d548:	4658      	mov	r0, fp
 801d54a:	f7fe fc63 	bl	801be14 <WM_GetFirstChild>
 801d54e:	4682      	mov	sl, r0
 801d550:	2800      	cmp	r0, #0
 801d552:	f000 80b6 	beq.w	801d6c2 <WM__InvalidateDrawAndDescs+0x252>
 801d556:	4650      	mov	r0, sl
 801d558:	f008 f9c8 	bl	80258ec <GUI_ALLOC_LockH>
 801d55c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d55e:	9009      	str	r0, [sp, #36]	; 0x24
 801d560:	079d      	lsls	r5, r3, #30
 801d562:	f140 80a2 	bpl.w	801d6aa <WM__InvalidateDrawAndDescs+0x23a>
 801d566:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d568:	b140      	cbz	r0, 801d57c <WM__InvalidateDrawAndDescs+0x10c>
 801d56a:	f8d8 3000 	ldr.w	r3, [r8]
 801d56e:	459a      	cmp	sl, r3
 801d570:	d004      	beq.n	801d57c <WM__InvalidateDrawAndDescs+0x10c>
 801d572:	f002 fe93 	bl	802029c <GUI_MEMDEV_Delete>
 801d576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d578:	2200      	movs	r2, #0
 801d57a:	625a      	str	r2, [r3, #36]	; 0x24
 801d57c:	4650      	mov	r0, sl
 801d57e:	f7fe fc49 	bl	801be14 <WM_GetFirstChild>
 801d582:	9001      	str	r0, [sp, #4]
 801d584:	2800      	cmp	r0, #0
 801d586:	f000 8090 	beq.w	801d6aa <WM__InvalidateDrawAndDescs+0x23a>
 801d58a:	9801      	ldr	r0, [sp, #4]
 801d58c:	f008 f9ae 	bl	80258ec <GUI_ALLOC_LockH>
 801d590:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d592:	900a      	str	r0, [sp, #40]	; 0x28
 801d594:	079c      	lsls	r4, r3, #30
 801d596:	d57d      	bpl.n	801d694 <WM__InvalidateDrawAndDescs+0x224>
 801d598:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d59a:	b148      	cbz	r0, 801d5b0 <WM__InvalidateDrawAndDescs+0x140>
 801d59c:	f8d8 3000 	ldr.w	r3, [r8]
 801d5a0:	9a01      	ldr	r2, [sp, #4]
 801d5a2:	429a      	cmp	r2, r3
 801d5a4:	d004      	beq.n	801d5b0 <WM__InvalidateDrawAndDescs+0x140>
 801d5a6:	f002 fe79 	bl	802029c <GUI_MEMDEV_Delete>
 801d5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	625a      	str	r2, [r3, #36]	; 0x24
 801d5b0:	9801      	ldr	r0, [sp, #4]
 801d5b2:	f7fe fc2f 	bl	801be14 <WM_GetFirstChild>
 801d5b6:	4606      	mov	r6, r0
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d06b      	beq.n	801d694 <WM__InvalidateDrawAndDescs+0x224>
 801d5bc:	4630      	mov	r0, r6
 801d5be:	f008 f995 	bl	80258ec <GUI_ALLOC_LockH>
 801d5c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d5c4:	900b      	str	r0, [sp, #44]	; 0x2c
 801d5c6:	0799      	lsls	r1, r3, #30
 801d5c8:	d55b      	bpl.n	801d682 <WM__InvalidateDrawAndDescs+0x212>
 801d5ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d5cc:	b140      	cbz	r0, 801d5e0 <WM__InvalidateDrawAndDescs+0x170>
 801d5ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d5d2:	429e      	cmp	r6, r3
 801d5d4:	d004      	beq.n	801d5e0 <WM__InvalidateDrawAndDescs+0x170>
 801d5d6:	f002 fe61 	bl	802029c <GUI_MEMDEV_Delete>
 801d5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5dc:	2200      	movs	r2, #0
 801d5de:	625a      	str	r2, [r3, #36]	; 0x24
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	f7fe fc17 	bl	801be14 <WM_GetFirstChild>
 801d5e6:	4605      	mov	r5, r0
 801d5e8:	2800      	cmp	r0, #0
 801d5ea:	d04a      	beq.n	801d682 <WM__InvalidateDrawAndDescs+0x212>
 801d5ec:	4628      	mov	r0, r5
 801d5ee:	f008 f97d 	bl	80258ec <GUI_ALLOC_LockH>
 801d5f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d5f4:	900c      	str	r0, [sp, #48]	; 0x30
 801d5f6:	079a      	lsls	r2, r3, #30
 801d5f8:	d53a      	bpl.n	801d670 <WM__InvalidateDrawAndDescs+0x200>
 801d5fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d5fc:	b140      	cbz	r0, 801d610 <WM__InvalidateDrawAndDescs+0x1a0>
 801d5fe:	f8d8 3000 	ldr.w	r3, [r8]
 801d602:	429d      	cmp	r5, r3
 801d604:	d004      	beq.n	801d610 <WM__InvalidateDrawAndDescs+0x1a0>
 801d606:	f002 fe49 	bl	802029c <GUI_MEMDEV_Delete>
 801d60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d60c:	2200      	movs	r2, #0
 801d60e:	625a      	str	r2, [r3, #36]	; 0x24
 801d610:	4628      	mov	r0, r5
 801d612:	f7fe fbff 	bl	801be14 <WM_GetFirstChild>
 801d616:	f04f 0900 	mov.w	r9, #0
 801d61a:	4604      	mov	r4, r0
 801d61c:	b340      	cbz	r0, 801d670 <WM__InvalidateDrawAndDescs+0x200>
 801d61e:	4620      	mov	r0, r4
 801d620:	f008 f964 	bl	80258ec <GUI_ALLOC_LockH>
 801d624:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d626:	900d      	str	r0, [sp, #52]	; 0x34
 801d628:	079b      	lsls	r3, r3, #30
 801d62a:	d518      	bpl.n	801d65e <WM__InvalidateDrawAndDescs+0x1ee>
 801d62c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d62e:	b140      	cbz	r0, 801d642 <WM__InvalidateDrawAndDescs+0x1d2>
 801d630:	f8d8 3000 	ldr.w	r3, [r8]
 801d634:	429c      	cmp	r4, r3
 801d636:	d004      	beq.n	801d642 <WM__InvalidateDrawAndDescs+0x1d2>
 801d638:	f002 fe30 	bl	802029c <GUI_MEMDEV_Delete>
 801d63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d63e:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 801d642:	4620      	mov	r0, r4
 801d644:	f7fe fbe6 	bl	801be14 <WM_GetFirstChild>
 801d648:	4607      	mov	r7, r0
 801d64a:	b140      	cbz	r0, 801d65e <WM__InvalidateDrawAndDescs+0x1ee>
 801d64c:	4638      	mov	r0, r7
 801d64e:	f7ff ff0f 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801d652:	4638      	mov	r0, r7
 801d654:	f008 f940 	bl	80258d8 <GUI_ALLOC_h2p>
 801d658:	6a07      	ldr	r7, [r0, #32]
 801d65a:	2f00      	cmp	r7, #0
 801d65c:	d1f6      	bne.n	801d64c <WM__InvalidateDrawAndDescs+0x1dc>
 801d65e:	a80d      	add	r0, sp, #52	; 0x34
 801d660:	f008 f956 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d664:	4620      	mov	r0, r4
 801d666:	f008 f937 	bl	80258d8 <GUI_ALLOC_h2p>
 801d66a:	6a04      	ldr	r4, [r0, #32]
 801d66c:	2c00      	cmp	r4, #0
 801d66e:	d1d6      	bne.n	801d61e <WM__InvalidateDrawAndDescs+0x1ae>
 801d670:	a80c      	add	r0, sp, #48	; 0x30
 801d672:	f008 f94d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d676:	4628      	mov	r0, r5
 801d678:	f008 f92e 	bl	80258d8 <GUI_ALLOC_h2p>
 801d67c:	6a05      	ldr	r5, [r0, #32]
 801d67e:	2d00      	cmp	r5, #0
 801d680:	d1b4      	bne.n	801d5ec <WM__InvalidateDrawAndDescs+0x17c>
 801d682:	a80b      	add	r0, sp, #44	; 0x2c
 801d684:	f008 f944 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d688:	4630      	mov	r0, r6
 801d68a:	f008 f925 	bl	80258d8 <GUI_ALLOC_h2p>
 801d68e:	6a06      	ldr	r6, [r0, #32]
 801d690:	2e00      	cmp	r6, #0
 801d692:	d193      	bne.n	801d5bc <WM__InvalidateDrawAndDescs+0x14c>
 801d694:	a80a      	add	r0, sp, #40	; 0x28
 801d696:	f008 f93b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d69a:	9801      	ldr	r0, [sp, #4]
 801d69c:	f008 f91c 	bl	80258d8 <GUI_ALLOC_h2p>
 801d6a0:	6a00      	ldr	r0, [r0, #32]
 801d6a2:	9001      	str	r0, [sp, #4]
 801d6a4:	2800      	cmp	r0, #0
 801d6a6:	f47f af70 	bne.w	801d58a <WM__InvalidateDrawAndDescs+0x11a>
 801d6aa:	a809      	add	r0, sp, #36	; 0x24
 801d6ac:	f008 f930 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d6b0:	4650      	mov	r0, sl
 801d6b2:	f008 f911 	bl	80258d8 <GUI_ALLOC_h2p>
 801d6b6:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801d6ba:	f1ba 0f00 	cmp.w	sl, #0
 801d6be:	f47f af4a 	bne.w	801d556 <WM__InvalidateDrawAndDescs+0xe6>
 801d6c2:	a808      	add	r0, sp, #32
 801d6c4:	f008 f924 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d6c8:	4658      	mov	r0, fp
 801d6ca:	f008 f905 	bl	80258d8 <GUI_ALLOC_h2p>
 801d6ce:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801d6d2:	f1bb 0f00 	cmp.w	fp, #0
 801d6d6:	f47f af24 	bne.w	801d522 <WM__InvalidateDrawAndDescs+0xb2>
 801d6da:	a807      	add	r0, sp, #28
 801d6dc:	f008 f918 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d6e0:	9802      	ldr	r0, [sp, #8]
 801d6e2:	f008 f8f9 	bl	80258d8 <GUI_ALLOC_h2p>
 801d6e6:	6a00      	ldr	r0, [r0, #32]
 801d6e8:	9002      	str	r0, [sp, #8]
 801d6ea:	2800      	cmp	r0, #0
 801d6ec:	f47f aefe 	bne.w	801d4ec <WM__InvalidateDrawAndDescs+0x7c>
 801d6f0:	a806      	add	r0, sp, #24
 801d6f2:	f008 f90d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d6f6:	9803      	ldr	r0, [sp, #12]
 801d6f8:	f008 f8ee 	bl	80258d8 <GUI_ALLOC_h2p>
 801d6fc:	6a00      	ldr	r0, [r0, #32]
 801d6fe:	9003      	str	r0, [sp, #12]
 801d700:	2800      	cmp	r0, #0
 801d702:	f47f aed9 	bne.w	801d4b8 <WM__InvalidateDrawAndDescs+0x48>
 801d706:	a805      	add	r0, sp, #20
 801d708:	f008 f902 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d70c:	b00f      	add	sp, #60	; 0x3c
 801d70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d712:	bf00      	nop
 801d714:	2002cba4 	.word	0x2002cba4

0801d718 <WM_InvalidateWindowAndDescsEx>:
 801d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d71c:	b09f      	sub	sp, #124	; 0x7c
 801d71e:	460d      	mov	r5, r1
 801d720:	9201      	str	r2, [sp, #4]
 801d722:	4604      	mov	r4, r0
 801d724:	b910      	cbnz	r0, 801d72c <WM_InvalidateWindowAndDescsEx+0x14>
 801d726:	b01f      	add	sp, #124	; 0x7c
 801d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d72c:	f008 f8de 	bl	80258ec <GUI_ALLOC_LockH>
 801d730:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d732:	9003      	str	r0, [sp, #12]
 801d734:	079b      	lsls	r3, r3, #30
 801d736:	f140 8154 	bpl.w	801d9e2 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801d73a:	4602      	mov	r2, r0
 801d73c:	4629      	mov	r1, r5
 801d73e:	a80c      	add	r0, sp, #48	; 0x30
 801d740:	f004 fd94 	bl	802226c <GUI__IntersectRects>
 801d744:	2800      	cmp	r0, #0
 801d746:	f000 814c 	beq.w	801d9e2 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801d74a:	a803      	add	r0, sp, #12
 801d74c:	f008 f8e0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d750:	4620      	mov	r0, r4
 801d752:	a90c      	add	r1, sp, #48	; 0x30
 801d754:	9a01      	ldr	r2, [sp, #4]
 801d756:	f7ff fce3 	bl	801d120 <_Invalidate1Abs>
 801d75a:	4620      	mov	r0, r4
 801d75c:	f7fe fb5a 	bl	801be14 <WM_GetFirstChild>
 801d760:	4604      	mov	r4, r0
 801d762:	2800      	cmp	r0, #0
 801d764:	d0df      	beq.n	801d726 <WM_InvalidateWindowAndDescsEx+0xe>
 801d766:	4620      	mov	r0, r4
 801d768:	f008 f8c0 	bl	80258ec <GUI_ALLOC_LockH>
 801d76c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d76e:	9004      	str	r0, [sp, #16]
 801d770:	079f      	lsls	r7, r3, #30
 801d772:	f140 813c 	bpl.w	801d9ee <WM_InvalidateWindowAndDescsEx+0x2d6>
 801d776:	4602      	mov	r2, r0
 801d778:	a90c      	add	r1, sp, #48	; 0x30
 801d77a:	a80e      	add	r0, sp, #56	; 0x38
 801d77c:	f004 fd76 	bl	802226c <GUI__IntersectRects>
 801d780:	2800      	cmp	r0, #0
 801d782:	f000 8134 	beq.w	801d9ee <WM_InvalidateWindowAndDescsEx+0x2d6>
 801d786:	a804      	add	r0, sp, #16
 801d788:	f008 f8c2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d78c:	4620      	mov	r0, r4
 801d78e:	a90e      	add	r1, sp, #56	; 0x38
 801d790:	9a01      	ldr	r2, [sp, #4]
 801d792:	f7ff fcc5 	bl	801d120 <_Invalidate1Abs>
 801d796:	4620      	mov	r0, r4
 801d798:	f7fe fb3c 	bl	801be14 <WM_GetFirstChild>
 801d79c:	4605      	mov	r5, r0
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	f000 8117 	beq.w	801d9d2 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f008 f8a1 	bl	80258ec <GUI_ALLOC_LockH>
 801d7aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d7ac:	9005      	str	r0, [sp, #20]
 801d7ae:	079e      	lsls	r6, r3, #30
 801d7b0:	f140 8128 	bpl.w	801da04 <WM_InvalidateWindowAndDescsEx+0x2ec>
 801d7b4:	4602      	mov	r2, r0
 801d7b6:	a90e      	add	r1, sp, #56	; 0x38
 801d7b8:	a810      	add	r0, sp, #64	; 0x40
 801d7ba:	f004 fd57 	bl	802226c <GUI__IntersectRects>
 801d7be:	2800      	cmp	r0, #0
 801d7c0:	f000 8120 	beq.w	801da04 <WM_InvalidateWindowAndDescsEx+0x2ec>
 801d7c4:	a805      	add	r0, sp, #20
 801d7c6:	f008 f8a3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d7ca:	4628      	mov	r0, r5
 801d7cc:	a910      	add	r1, sp, #64	; 0x40
 801d7ce:	9a01      	ldr	r2, [sp, #4]
 801d7d0:	f7ff fca6 	bl	801d120 <_Invalidate1Abs>
 801d7d4:	4628      	mov	r0, r5
 801d7d6:	f7fe fb1d 	bl	801be14 <WM_GetFirstChild>
 801d7da:	4606      	mov	r6, r0
 801d7dc:	2800      	cmp	r0, #0
 801d7de:	f000 80f1 	beq.w	801d9c4 <WM_InvalidateWindowAndDescsEx+0x2ac>
 801d7e2:	4630      	mov	r0, r6
 801d7e4:	f008 f882 	bl	80258ec <GUI_ALLOC_LockH>
 801d7e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d7ea:	9006      	str	r0, [sp, #24]
 801d7ec:	0799      	lsls	r1, r3, #30
 801d7ee:	f140 8114 	bpl.w	801da1a <WM_InvalidateWindowAndDescsEx+0x302>
 801d7f2:	4602      	mov	r2, r0
 801d7f4:	a910      	add	r1, sp, #64	; 0x40
 801d7f6:	a812      	add	r0, sp, #72	; 0x48
 801d7f8:	f004 fd38 	bl	802226c <GUI__IntersectRects>
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	f000 810c 	beq.w	801da1a <WM_InvalidateWindowAndDescsEx+0x302>
 801d802:	a806      	add	r0, sp, #24
 801d804:	f008 f884 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d808:	4630      	mov	r0, r6
 801d80a:	a912      	add	r1, sp, #72	; 0x48
 801d80c:	9a01      	ldr	r2, [sp, #4]
 801d80e:	f7ff fc87 	bl	801d120 <_Invalidate1Abs>
 801d812:	4630      	mov	r0, r6
 801d814:	f7fe fafe 	bl	801be14 <WM_GetFirstChild>
 801d818:	4607      	mov	r7, r0
 801d81a:	2800      	cmp	r0, #0
 801d81c:	f000 80cb 	beq.w	801d9b6 <WM_InvalidateWindowAndDescsEx+0x29e>
 801d820:	4638      	mov	r0, r7
 801d822:	f008 f863 	bl	80258ec <GUI_ALLOC_LockH>
 801d826:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d828:	9007      	str	r0, [sp, #28]
 801d82a:	079a      	lsls	r2, r3, #30
 801d82c:	f140 8100 	bpl.w	801da30 <WM_InvalidateWindowAndDescsEx+0x318>
 801d830:	4602      	mov	r2, r0
 801d832:	a912      	add	r1, sp, #72	; 0x48
 801d834:	a814      	add	r0, sp, #80	; 0x50
 801d836:	f004 fd19 	bl	802226c <GUI__IntersectRects>
 801d83a:	2800      	cmp	r0, #0
 801d83c:	f000 80f8 	beq.w	801da30 <WM_InvalidateWindowAndDescsEx+0x318>
 801d840:	a807      	add	r0, sp, #28
 801d842:	f008 f865 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d846:	4638      	mov	r0, r7
 801d848:	a914      	add	r1, sp, #80	; 0x50
 801d84a:	9a01      	ldr	r2, [sp, #4]
 801d84c:	f7ff fc68 	bl	801d120 <_Invalidate1Abs>
 801d850:	4638      	mov	r0, r7
 801d852:	f7fe fadf 	bl	801be14 <WM_GetFirstChild>
 801d856:	4680      	mov	r8, r0
 801d858:	2800      	cmp	r0, #0
 801d85a:	f000 80a5 	beq.w	801d9a8 <WM_InvalidateWindowAndDescsEx+0x290>
 801d85e:	4640      	mov	r0, r8
 801d860:	f008 f844 	bl	80258ec <GUI_ALLOC_LockH>
 801d864:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d866:	9008      	str	r0, [sp, #32]
 801d868:	079b      	lsls	r3, r3, #30
 801d86a:	f140 80ec 	bpl.w	801da46 <WM_InvalidateWindowAndDescsEx+0x32e>
 801d86e:	4602      	mov	r2, r0
 801d870:	a914      	add	r1, sp, #80	; 0x50
 801d872:	a816      	add	r0, sp, #88	; 0x58
 801d874:	f004 fcfa 	bl	802226c <GUI__IntersectRects>
 801d878:	2800      	cmp	r0, #0
 801d87a:	f000 80e4 	beq.w	801da46 <WM_InvalidateWindowAndDescsEx+0x32e>
 801d87e:	a808      	add	r0, sp, #32
 801d880:	f008 f846 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d884:	4640      	mov	r0, r8
 801d886:	a916      	add	r1, sp, #88	; 0x58
 801d888:	9a01      	ldr	r2, [sp, #4]
 801d88a:	f7ff fc49 	bl	801d120 <_Invalidate1Abs>
 801d88e:	4640      	mov	r0, r8
 801d890:	f7fe fac0 	bl	801be14 <WM_GetFirstChild>
 801d894:	4681      	mov	r9, r0
 801d896:	2800      	cmp	r0, #0
 801d898:	d07d      	beq.n	801d996 <WM_InvalidateWindowAndDescsEx+0x27e>
 801d89a:	4648      	mov	r0, r9
 801d89c:	f008 f826 	bl	80258ec <GUI_ALLOC_LockH>
 801d8a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d8a2:	9009      	str	r0, [sp, #36]	; 0x24
 801d8a4:	0799      	lsls	r1, r3, #30
 801d8a6:	f140 80db 	bpl.w	801da60 <WM_InvalidateWindowAndDescsEx+0x348>
 801d8aa:	4602      	mov	r2, r0
 801d8ac:	a916      	add	r1, sp, #88	; 0x58
 801d8ae:	a818      	add	r0, sp, #96	; 0x60
 801d8b0:	f004 fcdc 	bl	802226c <GUI__IntersectRects>
 801d8b4:	2800      	cmp	r0, #0
 801d8b6:	f000 80d3 	beq.w	801da60 <WM_InvalidateWindowAndDescsEx+0x348>
 801d8ba:	a809      	add	r0, sp, #36	; 0x24
 801d8bc:	f008 f828 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d8c0:	4648      	mov	r0, r9
 801d8c2:	a918      	add	r1, sp, #96	; 0x60
 801d8c4:	9a01      	ldr	r2, [sp, #4]
 801d8c6:	f7ff fc2b 	bl	801d120 <_Invalidate1Abs>
 801d8ca:	4648      	mov	r0, r9
 801d8cc:	f7fe faa2 	bl	801be14 <WM_GetFirstChild>
 801d8d0:	4682      	mov	sl, r0
 801d8d2:	2800      	cmp	r0, #0
 801d8d4:	d057      	beq.n	801d986 <WM_InvalidateWindowAndDescsEx+0x26e>
 801d8d6:	4650      	mov	r0, sl
 801d8d8:	f008 f808 	bl	80258ec <GUI_ALLOC_LockH>
 801d8dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d8de:	900a      	str	r0, [sp, #40]	; 0x28
 801d8e0:	079a      	lsls	r2, r3, #30
 801d8e2:	f140 80ca 	bpl.w	801da7a <WM_InvalidateWindowAndDescsEx+0x362>
 801d8e6:	4602      	mov	r2, r0
 801d8e8:	a918      	add	r1, sp, #96	; 0x60
 801d8ea:	a81a      	add	r0, sp, #104	; 0x68
 801d8ec:	f004 fcbe 	bl	802226c <GUI__IntersectRects>
 801d8f0:	2800      	cmp	r0, #0
 801d8f2:	f000 80c2 	beq.w	801da7a <WM_InvalidateWindowAndDescsEx+0x362>
 801d8f6:	a80a      	add	r0, sp, #40	; 0x28
 801d8f8:	f008 f80a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d8fc:	4650      	mov	r0, sl
 801d8fe:	a91a      	add	r1, sp, #104	; 0x68
 801d900:	9a01      	ldr	r2, [sp, #4]
 801d902:	f7ff fc0d 	bl	801d120 <_Invalidate1Abs>
 801d906:	4650      	mov	r0, sl
 801d908:	f7fe fa84 	bl	801be14 <WM_GetFirstChild>
 801d90c:	4683      	mov	fp, r0
 801d90e:	2800      	cmp	r0, #0
 801d910:	d031      	beq.n	801d976 <WM_InvalidateWindowAndDescsEx+0x25e>
 801d912:	4658      	mov	r0, fp
 801d914:	f007 ffea 	bl	80258ec <GUI_ALLOC_LockH>
 801d918:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d91a:	900b      	str	r0, [sp, #44]	; 0x2c
 801d91c:	079b      	lsls	r3, r3, #30
 801d91e:	f140 80b9 	bpl.w	801da94 <WM_InvalidateWindowAndDescsEx+0x37c>
 801d922:	4602      	mov	r2, r0
 801d924:	a91a      	add	r1, sp, #104	; 0x68
 801d926:	a81c      	add	r0, sp, #112	; 0x70
 801d928:	f004 fca0 	bl	802226c <GUI__IntersectRects>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	f000 80b1 	beq.w	801da94 <WM_InvalidateWindowAndDescsEx+0x37c>
 801d932:	a80b      	add	r0, sp, #44	; 0x2c
 801d934:	f007 ffec 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d938:	4658      	mov	r0, fp
 801d93a:	a91c      	add	r1, sp, #112	; 0x70
 801d93c:	9a01      	ldr	r2, [sp, #4]
 801d93e:	f7ff fbef 	bl	801d120 <_Invalidate1Abs>
 801d942:	4658      	mov	r0, fp
 801d944:	f7fe fa66 	bl	801be14 <WM_GetFirstChild>
 801d948:	4603      	mov	r3, r0
 801d94a:	b160      	cbz	r0, 801d966 <WM_InvalidateWindowAndDescsEx+0x24e>
 801d94c:	4618      	mov	r0, r3
 801d94e:	a91c      	add	r1, sp, #112	; 0x70
 801d950:	9a01      	ldr	r2, [sp, #4]
 801d952:	9300      	str	r3, [sp, #0]
 801d954:	f7ff fee0 	bl	801d718 <WM_InvalidateWindowAndDescsEx>
 801d958:	9b00      	ldr	r3, [sp, #0]
 801d95a:	4618      	mov	r0, r3
 801d95c:	f007 ffbc 	bl	80258d8 <GUI_ALLOC_h2p>
 801d960:	6a03      	ldr	r3, [r0, #32]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d1f2      	bne.n	801d94c <WM_InvalidateWindowAndDescsEx+0x234>
 801d966:	4658      	mov	r0, fp
 801d968:	f007 ffb6 	bl	80258d8 <GUI_ALLOC_h2p>
 801d96c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801d970:	f1bb 0f00 	cmp.w	fp, #0
 801d974:	d1cd      	bne.n	801d912 <WM_InvalidateWindowAndDescsEx+0x1fa>
 801d976:	4650      	mov	r0, sl
 801d978:	f007 ffae 	bl	80258d8 <GUI_ALLOC_h2p>
 801d97c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801d980:	f1ba 0f00 	cmp.w	sl, #0
 801d984:	d1a7      	bne.n	801d8d6 <WM_InvalidateWindowAndDescsEx+0x1be>
 801d986:	4648      	mov	r0, r9
 801d988:	f007 ffa6 	bl	80258d8 <GUI_ALLOC_h2p>
 801d98c:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801d990:	f1b9 0f00 	cmp.w	r9, #0
 801d994:	d181      	bne.n	801d89a <WM_InvalidateWindowAndDescsEx+0x182>
 801d996:	4640      	mov	r0, r8
 801d998:	f007 ff9e 	bl	80258d8 <GUI_ALLOC_h2p>
 801d99c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801d9a0:	f1b8 0f00 	cmp.w	r8, #0
 801d9a4:	f47f af5b 	bne.w	801d85e <WM_InvalidateWindowAndDescsEx+0x146>
 801d9a8:	4638      	mov	r0, r7
 801d9aa:	f007 ff95 	bl	80258d8 <GUI_ALLOC_h2p>
 801d9ae:	6a07      	ldr	r7, [r0, #32]
 801d9b0:	2f00      	cmp	r7, #0
 801d9b2:	f47f af35 	bne.w	801d820 <WM_InvalidateWindowAndDescsEx+0x108>
 801d9b6:	4630      	mov	r0, r6
 801d9b8:	f007 ff8e 	bl	80258d8 <GUI_ALLOC_h2p>
 801d9bc:	6a06      	ldr	r6, [r0, #32]
 801d9be:	2e00      	cmp	r6, #0
 801d9c0:	f47f af0f 	bne.w	801d7e2 <WM_InvalidateWindowAndDescsEx+0xca>
 801d9c4:	4628      	mov	r0, r5
 801d9c6:	f007 ff87 	bl	80258d8 <GUI_ALLOC_h2p>
 801d9ca:	6a05      	ldr	r5, [r0, #32]
 801d9cc:	2d00      	cmp	r5, #0
 801d9ce:	f47f aee9 	bne.w	801d7a4 <WM_InvalidateWindowAndDescsEx+0x8c>
 801d9d2:	4620      	mov	r0, r4
 801d9d4:	f007 ff80 	bl	80258d8 <GUI_ALLOC_h2p>
 801d9d8:	6a04      	ldr	r4, [r0, #32]
 801d9da:	2c00      	cmp	r4, #0
 801d9dc:	f47f aec3 	bne.w	801d766 <WM_InvalidateWindowAndDescsEx+0x4e>
 801d9e0:	e6a1      	b.n	801d726 <WM_InvalidateWindowAndDescsEx+0xe>
 801d9e2:	a803      	add	r0, sp, #12
 801d9e4:	f007 ff94 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d9e8:	b01f      	add	sp, #124	; 0x7c
 801d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ee:	a804      	add	r0, sp, #16
 801d9f0:	f007 ff8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	f007 ff6f 	bl	80258d8 <GUI_ALLOC_h2p>
 801d9fa:	6a04      	ldr	r4, [r0, #32]
 801d9fc:	2c00      	cmp	r4, #0
 801d9fe:	f47f aeb2 	bne.w	801d766 <WM_InvalidateWindowAndDescsEx+0x4e>
 801da02:	e690      	b.n	801d726 <WM_InvalidateWindowAndDescsEx+0xe>
 801da04:	a805      	add	r0, sp, #20
 801da06:	f007 ff83 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da0a:	4628      	mov	r0, r5
 801da0c:	f007 ff64 	bl	80258d8 <GUI_ALLOC_h2p>
 801da10:	6a05      	ldr	r5, [r0, #32]
 801da12:	2d00      	cmp	r5, #0
 801da14:	f47f aec6 	bne.w	801d7a4 <WM_InvalidateWindowAndDescsEx+0x8c>
 801da18:	e7db      	b.n	801d9d2 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801da1a:	a806      	add	r0, sp, #24
 801da1c:	f007 ff78 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da20:	4630      	mov	r0, r6
 801da22:	f007 ff59 	bl	80258d8 <GUI_ALLOC_h2p>
 801da26:	6a06      	ldr	r6, [r0, #32]
 801da28:	2e00      	cmp	r6, #0
 801da2a:	f47f aeda 	bne.w	801d7e2 <WM_InvalidateWindowAndDescsEx+0xca>
 801da2e:	e7c9      	b.n	801d9c4 <WM_InvalidateWindowAndDescsEx+0x2ac>
 801da30:	a807      	add	r0, sp, #28
 801da32:	f007 ff6d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da36:	4638      	mov	r0, r7
 801da38:	f007 ff4e 	bl	80258d8 <GUI_ALLOC_h2p>
 801da3c:	6a07      	ldr	r7, [r0, #32]
 801da3e:	2f00      	cmp	r7, #0
 801da40:	f47f aeee 	bne.w	801d820 <WM_InvalidateWindowAndDescsEx+0x108>
 801da44:	e7b7      	b.n	801d9b6 <WM_InvalidateWindowAndDescsEx+0x29e>
 801da46:	a808      	add	r0, sp, #32
 801da48:	f007 ff62 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da4c:	4640      	mov	r0, r8
 801da4e:	f007 ff43 	bl	80258d8 <GUI_ALLOC_h2p>
 801da52:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801da56:	f1b8 0f00 	cmp.w	r8, #0
 801da5a:	f47f af00 	bne.w	801d85e <WM_InvalidateWindowAndDescsEx+0x146>
 801da5e:	e7a3      	b.n	801d9a8 <WM_InvalidateWindowAndDescsEx+0x290>
 801da60:	a809      	add	r0, sp, #36	; 0x24
 801da62:	f007 ff55 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da66:	4648      	mov	r0, r9
 801da68:	f007 ff36 	bl	80258d8 <GUI_ALLOC_h2p>
 801da6c:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801da70:	f1b9 0f00 	cmp.w	r9, #0
 801da74:	f47f af11 	bne.w	801d89a <WM_InvalidateWindowAndDescsEx+0x182>
 801da78:	e78d      	b.n	801d996 <WM_InvalidateWindowAndDescsEx+0x27e>
 801da7a:	a80a      	add	r0, sp, #40	; 0x28
 801da7c:	f007 ff48 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da80:	4650      	mov	r0, sl
 801da82:	f007 ff29 	bl	80258d8 <GUI_ALLOC_h2p>
 801da86:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801da8a:	f1ba 0f00 	cmp.w	sl, #0
 801da8e:	f47f af22 	bne.w	801d8d6 <WM_InvalidateWindowAndDescsEx+0x1be>
 801da92:	e778      	b.n	801d986 <WM_InvalidateWindowAndDescsEx+0x26e>
 801da94:	a80b      	add	r0, sp, #44	; 0x2c
 801da96:	f007 ff3b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801da9a:	4658      	mov	r0, fp
 801da9c:	f007 ff1c 	bl	80258d8 <GUI_ALLOC_h2p>
 801daa0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801daa4:	f1bb 0f00 	cmp.w	fp, #0
 801daa8:	f47f af33 	bne.w	801d912 <WM_InvalidateWindowAndDescsEx+0x1fa>
 801daac:	e763      	b.n	801d976 <WM_InvalidateWindowAndDescsEx+0x25e>
 801daae:	bf00      	nop

0801dab0 <WM__InvalidateRect>:
 801dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dab4:	460c      	mov	r4, r1
 801dab6:	b086      	sub	sp, #24
 801dab8:	4605      	mov	r5, r0
 801daba:	4617      	mov	r7, r2
 801dabc:	461e      	mov	r6, r3
 801dabe:	b911      	cbnz	r1, 801dac6 <WM__InvalidateRect+0x16>
 801dac0:	b006      	add	sp, #24
 801dac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dac6:	4608      	mov	r0, r1
 801dac8:	f007 ff10 	bl	80258ec <GUI_ALLOC_LockH>
 801dacc:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801dad0:	9000      	str	r0, [sp, #0]
 801dad2:	f018 0f02 	tst.w	r8, #2
 801dad6:	d043      	beq.n	801db60 <WM__InvalidateRect+0xb0>
 801dad8:	4602      	mov	r2, r0
 801dada:	4629      	mov	r1, r5
 801dadc:	a802      	add	r0, sp, #8
 801dade:	f004 fbc5 	bl	802226c <GUI__IntersectRects>
 801dae2:	2800      	cmp	r0, #0
 801dae4:	d03c      	beq.n	801db60 <WM__InvalidateRect+0xb0>
 801dae6:	f640 0301 	movw	r3, #2049	; 0x801
 801daea:	ea08 0303 	and.w	r3, r8, r3
 801daee:	2b01      	cmp	r3, #1
 801daf0:	d040      	beq.n	801db74 <WM__InvalidateRect+0xc4>
 801daf2:	4620      	mov	r0, r4
 801daf4:	a902      	add	r1, sp, #8
 801daf6:	4632      	mov	r2, r6
 801daf8:	f7ff fb12 	bl	801d120 <_Invalidate1Abs>
 801dafc:	9b00      	ldr	r3, [sp, #0]
 801dafe:	69dc      	ldr	r4, [r3, #28]
 801db00:	2c00      	cmp	r4, #0
 801db02:	d02d      	beq.n	801db60 <WM__InvalidateRect+0xb0>
 801db04:	42bc      	cmp	r4, r7
 801db06:	d02b      	beq.n	801db60 <WM__InvalidateRect+0xb0>
 801db08:	4620      	mov	r0, r4
 801db0a:	f007 feef 	bl	80258ec <GUI_ALLOC_LockH>
 801db0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801db10:	9001      	str	r0, [sp, #4]
 801db12:	079b      	lsls	r3, r3, #30
 801db14:	d52a      	bpl.n	801db6c <WM__InvalidateRect+0xbc>
 801db16:	4602      	mov	r2, r0
 801db18:	a902      	add	r1, sp, #8
 801db1a:	a804      	add	r0, sp, #16
 801db1c:	f004 fba6 	bl	802226c <GUI__IntersectRects>
 801db20:	b320      	cbz	r0, 801db6c <WM__InvalidateRect+0xbc>
 801db22:	a801      	add	r0, sp, #4
 801db24:	f007 fef4 	bl	8025910 <GUI_ALLOC_UnlockH>
 801db28:	4620      	mov	r0, r4
 801db2a:	a904      	add	r1, sp, #16
 801db2c:	4632      	mov	r2, r6
 801db2e:	f7ff faf7 	bl	801d120 <_Invalidate1Abs>
 801db32:	4620      	mov	r0, r4
 801db34:	f7fe f96e 	bl	801be14 <WM_GetFirstChild>
 801db38:	4605      	mov	r5, r0
 801db3a:	b150      	cbz	r0, 801db52 <WM__InvalidateRect+0xa2>
 801db3c:	4628      	mov	r0, r5
 801db3e:	a904      	add	r1, sp, #16
 801db40:	4632      	mov	r2, r6
 801db42:	f7ff fde9 	bl	801d718 <WM_InvalidateWindowAndDescsEx>
 801db46:	4628      	mov	r0, r5
 801db48:	f007 fec6 	bl	80258d8 <GUI_ALLOC_h2p>
 801db4c:	6a05      	ldr	r5, [r0, #32]
 801db4e:	2d00      	cmp	r5, #0
 801db50:	d1f4      	bne.n	801db3c <WM__InvalidateRect+0x8c>
 801db52:	4620      	mov	r0, r4
 801db54:	f007 fec0 	bl	80258d8 <GUI_ALLOC_h2p>
 801db58:	6a04      	ldr	r4, [r0, #32]
 801db5a:	b10c      	cbz	r4, 801db60 <WM__InvalidateRect+0xb0>
 801db5c:	42a7      	cmp	r7, r4
 801db5e:	d1d3      	bne.n	801db08 <WM__InvalidateRect+0x58>
 801db60:	4668      	mov	r0, sp
 801db62:	f007 fed5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801db66:	b006      	add	sp, #24
 801db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db6c:	a801      	add	r0, sp, #4
 801db6e:	f007 fecf 	bl	8025910 <GUI_ALLOC_UnlockH>
 801db72:	e7ee      	b.n	801db52 <WM__InvalidateRect+0xa2>
 801db74:	9b00      	ldr	r3, [sp, #0]
 801db76:	a802      	add	r0, sp, #8
 801db78:	6999      	ldr	r1, [r3, #24]
 801db7a:	6a1a      	ldr	r2, [r3, #32]
 801db7c:	4633      	mov	r3, r6
 801db7e:	f7ff ff97 	bl	801dab0 <WM__InvalidateRect>
 801db82:	e7bb      	b.n	801dafc <WM__InvalidateRect+0x4c>

0801db84 <WM__DetachWindow>:
 801db84:	b570      	push	{r4, r5, r6, lr}
 801db86:	b082      	sub	sp, #8
 801db88:	4604      	mov	r4, r0
 801db8a:	f007 feaf 	bl	80258ec <GUI_ALLOC_LockH>
 801db8e:	6981      	ldr	r1, [r0, #24]
 801db90:	9001      	str	r0, [sp, #4]
 801db92:	b921      	cbnz	r1, 801db9e <WM__DetachWindow+0x1a>
 801db94:	a801      	add	r0, sp, #4
 801db96:	f007 febb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801db9a:	b002      	add	sp, #8
 801db9c:	bd70      	pop	{r4, r5, r6, pc}
 801db9e:	6a02      	ldr	r2, [r0, #32]
 801dba0:	2320      	movs	r3, #32
 801dba2:	f7ff ff85 	bl	801dab0 <WM__InvalidateRect>
 801dba6:	4620      	mov	r0, r4
 801dba8:	f007 fe96 	bl	80258d8 <GUI_ALLOC_h2p>
 801dbac:	4605      	mov	r5, r0
 801dbae:	6980      	ldr	r0, [r0, #24]
 801dbb0:	b938      	cbnz	r0, 801dbc2 <WM__DetachWindow+0x3e>
 801dbb2:	9b01      	ldr	r3, [sp, #4]
 801dbb4:	2200      	movs	r2, #0
 801dbb6:	619a      	str	r2, [r3, #24]
 801dbb8:	a801      	add	r0, sp, #4
 801dbba:	f007 fea9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dbbe:	b002      	add	sp, #8
 801dbc0:	bd70      	pop	{r4, r5, r6, pc}
 801dbc2:	f007 fe89 	bl	80258d8 <GUI_ALLOC_h2p>
 801dbc6:	69c3      	ldr	r3, [r0, #28]
 801dbc8:	429c      	cmp	r4, r3
 801dbca:	4606      	mov	r6, r0
 801dbcc:	d00a      	beq.n	801dbe4 <WM__DetachWindow+0x60>
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d0ef      	beq.n	801dbb2 <WM__DetachWindow+0x2e>
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f007 fe80 	bl	80258d8 <GUI_ALLOC_h2p>
 801dbd8:	6a03      	ldr	r3, [r0, #32]
 801dbda:	429c      	cmp	r4, r3
 801dbdc:	d1f7      	bne.n	801dbce <WM__DetachWindow+0x4a>
 801dbde:	6a2b      	ldr	r3, [r5, #32]
 801dbe0:	6203      	str	r3, [r0, #32]
 801dbe2:	e7e6      	b.n	801dbb2 <WM__DetachWindow+0x2e>
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f007 fe77 	bl	80258d8 <GUI_ALLOC_h2p>
 801dbea:	6a03      	ldr	r3, [r0, #32]
 801dbec:	61f3      	str	r3, [r6, #28]
 801dbee:	e7e0      	b.n	801dbb2 <WM__DetachWindow+0x2e>

0801dbf0 <WM_DeleteWindow.part.2>:
 801dbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbf4:	4f69      	ldr	r7, [pc, #420]	; (801dd9c <WM_DeleteWindow.part.2+0x1ac>)
 801dbf6:	b085      	sub	sp, #20
 801dbf8:	4604      	mov	r4, r0
 801dbfa:	f005 faf7 	bl	80231ec <GUI_Lock>
 801dbfe:	6838      	ldr	r0, [r7, #0]
 801dc00:	b930      	cbnz	r0, 801dc10 <WM_DeleteWindow.part.2+0x20>
 801dc02:	e0aa      	b.n	801dd5a <WM_DeleteWindow.part.2+0x16a>
 801dc04:	f007 fe68 	bl	80258d8 <GUI_ALLOC_h2p>
 801dc08:	6940      	ldr	r0, [r0, #20]
 801dc0a:	2800      	cmp	r0, #0
 801dc0c:	f000 80a5 	beq.w	801dd5a <WM_DeleteWindow.part.2+0x16a>
 801dc10:	4284      	cmp	r4, r0
 801dc12:	d1f7      	bne.n	801dc04 <WM_DeleteWindow.part.2+0x14>
 801dc14:	4625      	mov	r5, r4
 801dc16:	e000      	b.n	801dc1a <WM_DeleteWindow.part.2+0x2a>
 801dc18:	461d      	mov	r5, r3
 801dc1a:	4628      	mov	r0, r5
 801dc1c:	f007 fe5c 	bl	80258d8 <GUI_ALLOC_h2p>
 801dc20:	6983      	ldr	r3, [r0, #24]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d1f8      	bne.n	801dc18 <WM_DeleteWindow.part.2+0x28>
 801dc26:	f8df 8198 	ldr.w	r8, [pc, #408]	; 801ddc0 <WM_DeleteWindow.part.2+0x1d0>
 801dc2a:	f8d8 2000 	ldr.w	r2, [r8]
 801dc2e:	4295      	cmp	r5, r2
 801dc30:	f000 80ab 	beq.w	801dd8a <WM_DeleteWindow.part.2+0x19a>
 801dc34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dc38:	429d      	cmp	r5, r3
 801dc3a:	bf14      	ite	ne
 801dc3c:	f04f 35ff 	movne.w	r5, #4294967295
 801dc40:	2501      	moveq	r5, #1
 801dc42:	f10d 0910 	add.w	r9, sp, #16
 801dc46:	230b      	movs	r3, #11
 801dc48:	4669      	mov	r1, sp
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	f849 3d10 	str.w	r3, [r9, #-16]!
 801dc50:	9401      	str	r4, [sp, #4]
 801dc52:	f7fd f901 	bl	801ae58 <WM__SendMessage>
 801dc56:	4620      	mov	r0, r4
 801dc58:	f7fd f9fc 	bl	801b054 <WM__DeleteAssocTimer>
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	f007 fe45 	bl	80258ec <GUI_ALLOC_LockH>
 801dc62:	9000      	str	r0, [sp, #0]
 801dc64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801dc66:	2800      	cmp	r0, #0
 801dc68:	f040 808c 	bne.w	801dd84 <WM_DeleteWindow.part.2+0x194>
 801dc6c:	4b4c      	ldr	r3, [pc, #304]	; (801dda0 <WM_DeleteWindow.part.2+0x1b0>)
 801dc6e:	4a4d      	ldr	r2, [pc, #308]	; (801dda4 <WM_DeleteWindow.part.2+0x1b4>)
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	4e4d      	ldr	r6, [pc, #308]	; (801dda8 <WM_DeleteWindow.part.2+0x1b8>)
 801dc74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dc78:	2100      	movs	r1, #0
 801dc7a:	4284      	cmp	r4, r0
 801dc7c:	bf08      	it	eq
 801dc7e:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801dc82:	4a4a      	ldr	r2, [pc, #296]	; (801ddac <WM_DeleteWindow.part.2+0x1bc>)
 801dc84:	6031      	str	r1, [r6, #0]
 801dc86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801dc8a:	428c      	cmp	r4, r1
 801dc8c:	bf04      	itt	eq
 801dc8e:	2100      	moveq	r1, #0
 801dc90:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801dc94:	4b46      	ldr	r3, [pc, #280]	; (801ddb0 <WM_DeleteWindow.part.2+0x1c0>)
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	2100      	movs	r1, #0
 801dc9a:	b133      	cbz	r3, 801dcaa <WM_DeleteWindow.part.2+0xba>
 801dc9c:	685a      	ldr	r2, [r3, #4]
 801dc9e:	4294      	cmp	r4, r2
 801dca0:	bf08      	it	eq
 801dca2:	6059      	streq	r1, [r3, #4]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d1f8      	bne.n	801dc9c <WM_DeleteWindow.part.2+0xac>
 801dcaa:	4620      	mov	r0, r4
 801dcac:	2107      	movs	r1, #7
 801dcae:	f7fe fbab 	bl	801c408 <WM_NotifyParent>
 801dcb2:	9e00      	ldr	r6, [sp, #0]
 801dcb4:	69f0      	ldr	r0, [r6, #28]
 801dcb6:	2800      	cmp	r0, #0
 801dcb8:	d154      	bne.n	801dd64 <WM_DeleteWindow.part.2+0x174>
 801dcba:	4620      	mov	r0, r4
 801dcbc:	f7ff ff62 	bl	801db84 <WM__DetachWindow>
 801dcc0:	6838      	ldr	r0, [r7, #0]
 801dcc2:	b908      	cbnz	r0, 801dcc8 <WM_DeleteWindow.part.2+0xd8>
 801dcc4:	e00b      	b.n	801dcde <WM_DeleteWindow.part.2+0xee>
 801dcc6:	b150      	cbz	r0, 801dcde <WM_DeleteWindow.part.2+0xee>
 801dcc8:	f007 fe06 	bl	80258d8 <GUI_ALLOC_h2p>
 801dccc:	4606      	mov	r6, r0
 801dcce:	6940      	ldr	r0, [r0, #20]
 801dcd0:	4284      	cmp	r4, r0
 801dcd2:	d1f8      	bne.n	801dcc6 <WM_DeleteWindow.part.2+0xd6>
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f007 fdff 	bl	80258d8 <GUI_ALLOC_h2p>
 801dcda:	6943      	ldr	r3, [r0, #20]
 801dcdc:	6173      	str	r3, [r6, #20]
 801dcde:	9b00      	ldr	r3, [sp, #0]
 801dce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dce2:	07d9      	lsls	r1, r3, #31
 801dce4:	d503      	bpl.n	801dcee <WM_DeleteWindow.part.2+0xfe>
 801dce6:	4a33      	ldr	r2, [pc, #204]	; (801ddb4 <WM_DeleteWindow.part.2+0x1c4>)
 801dce8:	6811      	ldr	r1, [r2, #0]
 801dcea:	3901      	subs	r1, #1
 801dcec:	6011      	str	r1, [r2, #0]
 801dcee:	069a      	lsls	r2, r3, #26
 801dcf0:	d443      	bmi.n	801dd7a <WM_DeleteWindow.part.2+0x18a>
 801dcf2:	4668      	mov	r0, sp
 801dcf4:	f007 fe0c 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dcf8:	4b2f      	ldr	r3, [pc, #188]	; (801ddb8 <WM_DeleteWindow.part.2+0x1c8>)
 801dcfa:	881a      	ldrh	r2, [r3, #0]
 801dcfc:	4620      	mov	r0, r4
 801dcfe:	3a01      	subs	r2, #1
 801dd00:	801a      	strh	r2, [r3, #0]
 801dd02:	f007 ff05 	bl	8025b10 <GUI_ALLOC_Free>
 801dd06:	1c6b      	adds	r3, r5, #1
 801dd08:	d027      	beq.n	801dd5a <WM_DeleteWindow.part.2+0x16a>
 801dd0a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 801dd0e:	4e2b      	ldr	r6, [pc, #172]	; (801ddbc <WM_DeleteWindow.part.2+0x1cc>)
 801dd10:	f005 fa6c 	bl	80231ec <GUI_Lock>
 801dd14:	6833      	ldr	r3, [r6, #0]
 801dd16:	b905      	cbnz	r5, 801dd1a <WM_DeleteWindow.part.2+0x12a>
 801dd18:	683d      	ldr	r5, [r7, #0]
 801dd1a:	649d      	str	r5, [r3, #72]	; 0x48
 801dd1c:	462c      	mov	r4, r5
 801dd1e:	e000      	b.n	801dd22 <WM_DeleteWindow.part.2+0x132>
 801dd20:	461c      	mov	r4, r3
 801dd22:	4620      	mov	r0, r4
 801dd24:	f007 fdd8 	bl	80258d8 <GUI_ALLOC_h2p>
 801dd28:	6983      	ldr	r3, [r0, #24]
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d1f8      	bne.n	801dd20 <WM_DeleteWindow.part.2+0x130>
 801dd2e:	f8d8 2000 	ldr.w	r2, [r8]
 801dd32:	4923      	ldr	r1, [pc, #140]	; (801ddc0 <WM_DeleteWindow.part.2+0x1d0>)
 801dd34:	4294      	cmp	r4, r2
 801dd36:	d02a      	beq.n	801dd8e <WM_DeleteWindow.part.2+0x19e>
 801dd38:	684b      	ldr	r3, [r1, #4]
 801dd3a:	429c      	cmp	r4, r3
 801dd3c:	d02b      	beq.n	801dd96 <WM_DeleteWindow.part.2+0x1a6>
 801dd3e:	f004 f8f7 	bl	8021f30 <LCD_SetClipRectMax>
 801dd42:	4628      	mov	r0, r5
 801dd44:	f007 fdc8 	bl	80258d8 <GUI_ALLOC_h2p>
 801dd48:	6833      	ldr	r3, [r6, #0]
 801dd4a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801dd4e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801dd52:	651a      	str	r2, [r3, #80]	; 0x50
 801dd54:	64d9      	str	r1, [r3, #76]	; 0x4c
 801dd56:	f005 fa3f 	bl	80231d8 <GUI_Unlock>
 801dd5a:	f005 fa3d 	bl	80231d8 <GUI_Unlock>
 801dd5e:	b005      	add	sp, #20
 801dd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd64:	f7ff ff44 	bl	801dbf0 <WM_DeleteWindow.part.2>
 801dd68:	69f0      	ldr	r0, [r6, #28]
 801dd6a:	2800      	cmp	r0, #0
 801dd6c:	d0a5      	beq.n	801dcba <WM_DeleteWindow.part.2+0xca>
 801dd6e:	f7ff ff3f 	bl	801dbf0 <WM_DeleteWindow.part.2>
 801dd72:	69f0      	ldr	r0, [r6, #28]
 801dd74:	2800      	cmp	r0, #0
 801dd76:	d1f5      	bne.n	801dd64 <WM_DeleteWindow.part.2+0x174>
 801dd78:	e79f      	b.n	801dcba <WM_DeleteWindow.part.2+0xca>
 801dd7a:	4b12      	ldr	r3, [pc, #72]	; (801ddc4 <WM_DeleteWindow.part.2+0x1d4>)
 801dd7c:	881a      	ldrh	r2, [r3, #0]
 801dd7e:	3a01      	subs	r2, #1
 801dd80:	801a      	strh	r2, [r3, #0]
 801dd82:	e7b6      	b.n	801dcf2 <WM_DeleteWindow.part.2+0x102>
 801dd84:	f002 fa8a 	bl	802029c <GUI_MEMDEV_Delete>
 801dd88:	e770      	b.n	801dc6c <WM_DeleteWindow.part.2+0x7c>
 801dd8a:	461d      	mov	r5, r3
 801dd8c:	e759      	b.n	801dc42 <WM_DeleteWindow.part.2+0x52>
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f005 fb4c 	bl	802342c <GUI_SelectLayer>
 801dd94:	e7d3      	b.n	801dd3e <WM_DeleteWindow.part.2+0x14e>
 801dd96:	2001      	movs	r0, #1
 801dd98:	e7fa      	b.n	801dd90 <WM_DeleteWindow.part.2+0x1a0>
 801dd9a:	bf00      	nop
 801dd9c:	2002cb74 	.word	0x2002cb74
 801dda0:	2002cb78 	.word	0x2002cb78
 801dda4:	2002cb68 	.word	0x2002cb68
 801dda8:	2002b17c 	.word	0x2002b17c
 801ddac:	2002cb9c 	.word	0x2002cb9c
 801ddb0:	2002cb94 	.word	0x2002cb94
 801ddb4:	2002cba8 	.word	0x2002cba8
 801ddb8:	2002cb50 	.word	0x2002cb50
 801ddbc:	20000280 	.word	0x20000280
 801ddc0:	2002cb58 	.word	0x2002cb58
 801ddc4:	2002cb70 	.word	0x2002cb70

0801ddc8 <_Exec1Input>:
 801ddc8:	b570      	push	{r4, r5, r6, lr}
 801ddca:	4e1f      	ldr	r6, [pc, #124]	; (801de48 <_Exec1Input+0x80>)
 801ddcc:	6833      	ldr	r3, [r6, #0]
 801ddce:	b082      	sub	sp, #8
 801ddd0:	b9cb      	cbnz	r3, 801de06 <_Exec1Input+0x3e>
 801ddd2:	4b1e      	ldr	r3, [pc, #120]	; (801de4c <_Exec1Input+0x84>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	b103      	cbz	r3, 801ddda <_Exec1Input+0x12>
 801ddd8:	4798      	blx	r3
 801ddda:	4b1d      	ldr	r3, [pc, #116]	; (801de50 <_Exec1Input+0x88>)
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	b10b      	cbz	r3, 801dde4 <_Exec1Input+0x1c>
 801dde0:	4798      	blx	r3
 801dde2:	b968      	cbnz	r0, 801de00 <_Exec1Input+0x38>
 801dde4:	4b1b      	ldr	r3, [pc, #108]	; (801de54 <_Exec1Input+0x8c>)
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801ddec:	b908      	cbnz	r0, 801ddf2 <_Exec1Input+0x2a>
 801ddee:	b002      	add	sp, #8
 801ddf0:	bd70      	pop	{r4, r5, r6, pc}
 801ddf2:	f005 fb43 	bl	802347c <GUI_PollKeyMsg>
 801ddf6:	3000      	adds	r0, #0
 801ddf8:	bf18      	it	ne
 801ddfa:	2001      	movne	r0, #1
 801ddfc:	b002      	add	sp, #8
 801ddfe:	bd70      	pop	{r4, r5, r6, pc}
 801de00:	2001      	movs	r0, #1
 801de02:	b002      	add	sp, #8
 801de04:	bd70      	pop	{r4, r5, r6, pc}
 801de06:	f005 f9f1 	bl	80231ec <GUI_Lock>
 801de0a:	4b13      	ldr	r3, [pc, #76]	; (801de58 <_Exec1Input+0x90>)
 801de0c:	681c      	ldr	r4, [r3, #0]
 801de0e:	b194      	cbz	r4, 801de36 <_Exec1Input+0x6e>
 801de10:	4620      	mov	r0, r4
 801de12:	f007 fd6b 	bl	80258ec <GUI_ALLOC_LockH>
 801de16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801de18:	9001      	str	r0, [sp, #4]
 801de1a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801de1e:	4603      	mov	r3, r0
 801de20:	a801      	add	r0, sp, #4
 801de22:	d00d      	beq.n	801de40 <_Exec1Input+0x78>
 801de24:	695d      	ldr	r5, [r3, #20]
 801de26:	f007 fd73 	bl	8025910 <GUI_ALLOC_UnlockH>
 801de2a:	4620      	mov	r0, r4
 801de2c:	462c      	mov	r4, r5
 801de2e:	f7ff fedf 	bl	801dbf0 <WM_DeleteWindow.part.2>
 801de32:	2c00      	cmp	r4, #0
 801de34:	d1ec      	bne.n	801de10 <_Exec1Input+0x48>
 801de36:	2300      	movs	r3, #0
 801de38:	6033      	str	r3, [r6, #0]
 801de3a:	f005 f9cd 	bl	80231d8 <GUI_Unlock>
 801de3e:	e7c8      	b.n	801ddd2 <_Exec1Input+0xa>
 801de40:	695c      	ldr	r4, [r3, #20]
 801de42:	f007 fd65 	bl	8025910 <GUI_ALLOC_UnlockH>
 801de46:	e7e2      	b.n	801de0e <_Exec1Input+0x46>
 801de48:	2002b158 	.word	0x2002b158
 801de4c:	2002cb60 	.word	0x2002cb60
 801de50:	2002cc30 	.word	0x2002cc30
 801de54:	20000280 	.word	0x20000280
 801de58:	2002cb74 	.word	0x2002cb74

0801de5c <WM__InvalidateParent>:
 801de5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de60:	4605      	mov	r5, r0
 801de62:	b086      	sub	sp, #24
 801de64:	4608      	mov	r0, r1
 801de66:	460c      	mov	r4, r1
 801de68:	4617      	mov	r7, r2
 801de6a:	f007 fd35 	bl	80258d8 <GUI_ALLOC_h2p>
 801de6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801de70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801de74:	bf0c      	ite	eq
 801de76:	2620      	moveq	r6, #32
 801de78:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 801de7c:	b914      	cbnz	r4, 801de84 <WM__InvalidateParent+0x28>
 801de7e:	b006      	add	sp, #24
 801de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de84:	4620      	mov	r0, r4
 801de86:	f007 fd31 	bl	80258ec <GUI_ALLOC_LockH>
 801de8a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801de8e:	9000      	str	r0, [sp, #0]
 801de90:	f018 0f02 	tst.w	r8, #2
 801de94:	d042      	beq.n	801df1c <WM__InvalidateParent+0xc0>
 801de96:	4602      	mov	r2, r0
 801de98:	4629      	mov	r1, r5
 801de9a:	a802      	add	r0, sp, #8
 801de9c:	f004 f9e6 	bl	802226c <GUI__IntersectRects>
 801dea0:	2800      	cmp	r0, #0
 801dea2:	d03b      	beq.n	801df1c <WM__InvalidateParent+0xc0>
 801dea4:	f640 0301 	movw	r3, #2049	; 0x801
 801dea8:	ea08 0303 	and.w	r3, r8, r3
 801deac:	2b01      	cmp	r3, #1
 801deae:	d045      	beq.n	801df3c <WM__InvalidateParent+0xe0>
 801deb0:	4620      	mov	r0, r4
 801deb2:	a902      	add	r1, sp, #8
 801deb4:	4632      	mov	r2, r6
 801deb6:	f7ff f933 	bl	801d120 <_Invalidate1Abs>
 801deba:	9b00      	ldr	r3, [sp, #0]
 801debc:	69dc      	ldr	r4, [r3, #28]
 801debe:	2c00      	cmp	r4, #0
 801dec0:	d02c      	beq.n	801df1c <WM__InvalidateParent+0xc0>
 801dec2:	42a7      	cmp	r7, r4
 801dec4:	d02a      	beq.n	801df1c <WM__InvalidateParent+0xc0>
 801dec6:	4620      	mov	r0, r4
 801dec8:	f007 fd10 	bl	80258ec <GUI_ALLOC_LockH>
 801decc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801dece:	9001      	str	r0, [sp, #4]
 801ded0:	079b      	lsls	r3, r3, #30
 801ded2:	d529      	bpl.n	801df28 <WM__InvalidateParent+0xcc>
 801ded4:	4602      	mov	r2, r0
 801ded6:	a902      	add	r1, sp, #8
 801ded8:	a804      	add	r0, sp, #16
 801deda:	f004 f9c7 	bl	802226c <GUI__IntersectRects>
 801dede:	b318      	cbz	r0, 801df28 <WM__InvalidateParent+0xcc>
 801dee0:	a801      	add	r0, sp, #4
 801dee2:	f007 fd15 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dee6:	4620      	mov	r0, r4
 801dee8:	a904      	add	r1, sp, #16
 801deea:	4632      	mov	r2, r6
 801deec:	f7ff f918 	bl	801d120 <_Invalidate1Abs>
 801def0:	4620      	mov	r0, r4
 801def2:	f7fd ff8f 	bl	801be14 <WM_GetFirstChild>
 801def6:	4605      	mov	r5, r0
 801def8:	b150      	cbz	r0, 801df10 <WM__InvalidateParent+0xb4>
 801defa:	4628      	mov	r0, r5
 801defc:	a904      	add	r1, sp, #16
 801defe:	4632      	mov	r2, r6
 801df00:	f7ff fc0a 	bl	801d718 <WM_InvalidateWindowAndDescsEx>
 801df04:	4628      	mov	r0, r5
 801df06:	f007 fce7 	bl	80258d8 <GUI_ALLOC_h2p>
 801df0a:	6a05      	ldr	r5, [r0, #32]
 801df0c:	2d00      	cmp	r5, #0
 801df0e:	d1f4      	bne.n	801defa <WM__InvalidateParent+0x9e>
 801df10:	4620      	mov	r0, r4
 801df12:	f007 fce1 	bl	80258d8 <GUI_ALLOC_h2p>
 801df16:	6a04      	ldr	r4, [r0, #32]
 801df18:	2c00      	cmp	r4, #0
 801df1a:	d1d2      	bne.n	801dec2 <WM__InvalidateParent+0x66>
 801df1c:	4668      	mov	r0, sp
 801df1e:	f007 fcf7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801df22:	b006      	add	sp, #24
 801df24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df28:	a801      	add	r0, sp, #4
 801df2a:	f007 fcf1 	bl	8025910 <GUI_ALLOC_UnlockH>
 801df2e:	4620      	mov	r0, r4
 801df30:	f007 fcd2 	bl	80258d8 <GUI_ALLOC_h2p>
 801df34:	6a04      	ldr	r4, [r0, #32]
 801df36:	2c00      	cmp	r4, #0
 801df38:	d1c3      	bne.n	801dec2 <WM__InvalidateParent+0x66>
 801df3a:	e7ef      	b.n	801df1c <WM__InvalidateParent+0xc0>
 801df3c:	9b00      	ldr	r3, [sp, #0]
 801df3e:	a802      	add	r0, sp, #8
 801df40:	6999      	ldr	r1, [r3, #24]
 801df42:	6a1a      	ldr	r2, [r3, #32]
 801df44:	4633      	mov	r3, r6
 801df46:	f7ff fdb3 	bl	801dab0 <WM__InvalidateRect>
 801df4a:	e7b6      	b.n	801deba <WM__InvalidateParent+0x5e>

0801df4c <WM__InvalidateRectEx>:
 801df4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df4e:	460c      	mov	r4, r1
 801df50:	b087      	sub	sp, #28
 801df52:	4605      	mov	r5, r0
 801df54:	4616      	mov	r6, r2
 801df56:	b909      	cbnz	r1, 801df5c <WM__InvalidateRectEx+0x10>
 801df58:	b007      	add	sp, #28
 801df5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df5c:	4608      	mov	r0, r1
 801df5e:	f007 fcc5 	bl	80258ec <GUI_ALLOC_LockH>
 801df62:	6a87      	ldr	r7, [r0, #40]	; 0x28
 801df64:	9000      	str	r0, [sp, #0]
 801df66:	07ba      	lsls	r2, r7, #30
 801df68:	d541      	bpl.n	801dfee <WM__InvalidateRectEx+0xa2>
 801df6a:	4602      	mov	r2, r0
 801df6c:	4629      	mov	r1, r5
 801df6e:	a802      	add	r0, sp, #8
 801df70:	f004 f97c 	bl	802226c <GUI__IntersectRects>
 801df74:	2800      	cmp	r0, #0
 801df76:	d03a      	beq.n	801dfee <WM__InvalidateRectEx+0xa2>
 801df78:	f640 0301 	movw	r3, #2049	; 0x801
 801df7c:	403b      	ands	r3, r7
 801df7e:	2b01      	cmp	r3, #1
 801df80:	d044      	beq.n	801e00c <WM__InvalidateRectEx+0xc0>
 801df82:	4620      	mov	r0, r4
 801df84:	a902      	add	r1, sp, #8
 801df86:	2220      	movs	r2, #32
 801df88:	f7ff f8ca 	bl	801d120 <_Invalidate1Abs>
 801df8c:	9b00      	ldr	r3, [sp, #0]
 801df8e:	69dc      	ldr	r4, [r3, #28]
 801df90:	2c00      	cmp	r4, #0
 801df92:	d02c      	beq.n	801dfee <WM__InvalidateRectEx+0xa2>
 801df94:	42a6      	cmp	r6, r4
 801df96:	d02a      	beq.n	801dfee <WM__InvalidateRectEx+0xa2>
 801df98:	4620      	mov	r0, r4
 801df9a:	f007 fca7 	bl	80258ec <GUI_ALLOC_LockH>
 801df9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801dfa0:	9001      	str	r0, [sp, #4]
 801dfa2:	079b      	lsls	r3, r3, #30
 801dfa4:	d528      	bpl.n	801dff8 <WM__InvalidateRectEx+0xac>
 801dfa6:	4602      	mov	r2, r0
 801dfa8:	a902      	add	r1, sp, #8
 801dfaa:	a804      	add	r0, sp, #16
 801dfac:	f004 f95e 	bl	802226c <GUI__IntersectRects>
 801dfb0:	b310      	cbz	r0, 801dff8 <WM__InvalidateRectEx+0xac>
 801dfb2:	a801      	add	r0, sp, #4
 801dfb4:	f007 fcac 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dfb8:	4620      	mov	r0, r4
 801dfba:	a904      	add	r1, sp, #16
 801dfbc:	2220      	movs	r2, #32
 801dfbe:	f7ff f8af 	bl	801d120 <_Invalidate1Abs>
 801dfc2:	4620      	mov	r0, r4
 801dfc4:	f7fd ff26 	bl	801be14 <WM_GetFirstChild>
 801dfc8:	4605      	mov	r5, r0
 801dfca:	b150      	cbz	r0, 801dfe2 <WM__InvalidateRectEx+0x96>
 801dfcc:	4628      	mov	r0, r5
 801dfce:	a904      	add	r1, sp, #16
 801dfd0:	2220      	movs	r2, #32
 801dfd2:	f7ff fba1 	bl	801d718 <WM_InvalidateWindowAndDescsEx>
 801dfd6:	4628      	mov	r0, r5
 801dfd8:	f007 fc7e 	bl	80258d8 <GUI_ALLOC_h2p>
 801dfdc:	6a05      	ldr	r5, [r0, #32]
 801dfde:	2d00      	cmp	r5, #0
 801dfe0:	d1f4      	bne.n	801dfcc <WM__InvalidateRectEx+0x80>
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	f007 fc78 	bl	80258d8 <GUI_ALLOC_h2p>
 801dfe8:	6a04      	ldr	r4, [r0, #32]
 801dfea:	2c00      	cmp	r4, #0
 801dfec:	d1d2      	bne.n	801df94 <WM__InvalidateRectEx+0x48>
 801dfee:	4668      	mov	r0, sp
 801dff0:	f007 fc8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dff4:	b007      	add	sp, #28
 801dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dff8:	a801      	add	r0, sp, #4
 801dffa:	f007 fc89 	bl	8025910 <GUI_ALLOC_UnlockH>
 801dffe:	4620      	mov	r0, r4
 801e000:	f007 fc6a 	bl	80258d8 <GUI_ALLOC_h2p>
 801e004:	6a04      	ldr	r4, [r0, #32]
 801e006:	2c00      	cmp	r4, #0
 801e008:	d1c4      	bne.n	801df94 <WM__InvalidateRectEx+0x48>
 801e00a:	e7f0      	b.n	801dfee <WM__InvalidateRectEx+0xa2>
 801e00c:	9b00      	ldr	r3, [sp, #0]
 801e00e:	a802      	add	r0, sp, #8
 801e010:	6999      	ldr	r1, [r3, #24]
 801e012:	6a1a      	ldr	r2, [r3, #32]
 801e014:	2320      	movs	r3, #32
 801e016:	f7ff fd4b 	bl	801dab0 <WM__InvalidateRect>
 801e01a:	e7b7      	b.n	801df8c <WM__InvalidateRectEx+0x40>

0801e01c <WM_SendMessage>:
 801e01c:	b538      	push	{r3, r4, r5, lr}
 801e01e:	4604      	mov	r4, r0
 801e020:	460d      	mov	r5, r1
 801e022:	b900      	cbnz	r0, 801e026 <WM_SendMessage+0xa>
 801e024:	bd38      	pop	{r3, r4, r5, pc}
 801e026:	f005 f8e1 	bl	80231ec <GUI_Lock>
 801e02a:	4620      	mov	r0, r4
 801e02c:	4629      	mov	r1, r5
 801e02e:	f7fc ff13 	bl	801ae58 <WM__SendMessage>
 801e032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e036:	f005 b8cf 	b.w	80231d8 <GUI_Unlock>
 801e03a:	bf00      	nop

0801e03c <WM__SendMsgNoData>:
 801e03c:	b500      	push	{lr}
 801e03e:	b085      	sub	sp, #20
 801e040:	ab04      	add	r3, sp, #16
 801e042:	9001      	str	r0, [sp, #4]
 801e044:	f843 1d10 	str.w	r1, [r3, #-16]!
 801e048:	4669      	mov	r1, sp
 801e04a:	f7fc ff05 	bl	801ae58 <WM__SendMessage>
 801e04e:	b005      	add	sp, #20
 801e050:	f85d fb04 	ldr.w	pc, [sp], #4

0801e054 <WM__GetClientRectWin>:
 801e054:	2300      	movs	r3, #0
 801e056:	800b      	strh	r3, [r1, #0]
 801e058:	804b      	strh	r3, [r1, #2]
 801e05a:	8802      	ldrh	r2, [r0, #0]
 801e05c:	8843      	ldrh	r3, [r0, #2]
 801e05e:	b410      	push	{r4}
 801e060:	8884      	ldrh	r4, [r0, #4]
 801e062:	88c0      	ldrh	r0, [r0, #6]
 801e064:	1aa2      	subs	r2, r4, r2
 801e066:	1ac3      	subs	r3, r0, r3
 801e068:	808a      	strh	r2, [r1, #4]
 801e06a:	80cb      	strh	r3, [r1, #6]
 801e06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e070:	4770      	bx	lr
 801e072:	bf00      	nop

0801e074 <WM_InvalidateRect>:
 801e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e078:	4607      	mov	r7, r0
 801e07a:	b086      	sub	sp, #24
 801e07c:	460c      	mov	r4, r1
 801e07e:	b910      	cbnz	r0, 801e086 <WM_InvalidateRect+0x12>
 801e080:	b006      	add	sp, #24
 801e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e086:	f005 f8b1 	bl	80231ec <GUI_Lock>
 801e08a:	4638      	mov	r0, r7
 801e08c:	f007 fc2e 	bl	80258ec <GUI_ALLOC_LockH>
 801e090:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801e094:	9000      	str	r0, [sp, #0]
 801e096:	f018 0f02 	tst.w	r8, #2
 801e09a:	d02e      	beq.n	801e0fa <WM_InvalidateRect+0x86>
 801e09c:	c803      	ldmia	r0, {r0, r1}
 801e09e:	ae04      	add	r6, sp, #16
 801e0a0:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801e0a4:	e886 0003 	stmia.w	r6, {r0, r1}
 801e0a8:	d12f      	bne.n	801e10a <WM_InvalidateRect+0x96>
 801e0aa:	b17c      	cbz	r4, 801e0cc <WM_InvalidateRect+0x58>
 801e0ac:	6820      	ldr	r0, [r4, #0]
 801e0ae:	6861      	ldr	r1, [r4, #4]
 801e0b0:	9c00      	ldr	r4, [sp, #0]
 801e0b2:	ab02      	add	r3, sp, #8
 801e0b4:	c303      	stmia	r3!, {r0, r1}
 801e0b6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e0ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e0be:	a802      	add	r0, sp, #8
 801e0c0:	f006 fa9a 	bl	80245f8 <GUI_MoveRect>
 801e0c4:	4630      	mov	r0, r6
 801e0c6:	a902      	add	r1, sp, #8
 801e0c8:	f004 f8b0 	bl	802222c <GUI__IntersectRect>
 801e0cc:	463d      	mov	r5, r7
 801e0ce:	e008      	b.n	801e0e2 <WM_InvalidateRect+0x6e>
 801e0d0:	f004 f8ac 	bl	802222c <GUI__IntersectRect>
 801e0d4:	9b01      	ldr	r3, [sp, #4]
 801e0d6:	699c      	ldr	r4, [r3, #24]
 801e0d8:	a801      	add	r0, sp, #4
 801e0da:	b1d4      	cbz	r4, 801e112 <WM_InvalidateRect+0x9e>
 801e0dc:	f007 fc18 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e0e0:	4625      	mov	r5, r4
 801e0e2:	4628      	mov	r0, r5
 801e0e4:	f007 fc02 	bl	80258ec <GUI_ALLOC_LockH>
 801e0e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e0ea:	9001      	str	r0, [sp, #4]
 801e0ec:	0793      	lsls	r3, r2, #30
 801e0ee:	4601      	mov	r1, r0
 801e0f0:	4630      	mov	r0, r6
 801e0f2:	d4ed      	bmi.n	801e0d0 <WM_InvalidateRect+0x5c>
 801e0f4:	a801      	add	r0, sp, #4
 801e0f6:	f007 fc0b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e0fa:	4668      	mov	r0, sp
 801e0fc:	f007 fc08 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e100:	f005 f86a 	bl	80231d8 <GUI_Unlock>
 801e104:	b006      	add	sp, #24
 801e106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e10a:	4638      	mov	r0, r7
 801e10c:	f7ff f9b0 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801e110:	e7cb      	b.n	801e0aa <WM_InvalidateRect+0x36>
 801e112:	f007 fbfd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e116:	4b0d      	ldr	r3, [pc, #52]	; (801e14c <WM_InvalidateRect+0xd8>)
 801e118:	681a      	ldr	r2, [r3, #0]
 801e11a:	4295      	cmp	r5, r2
 801e11c:	d002      	beq.n	801e124 <WM_InvalidateRect+0xb0>
 801e11e:	685b      	ldr	r3, [r3, #4]
 801e120:	429d      	cmp	r5, r3
 801e122:	d1ea      	bne.n	801e0fa <WM_InvalidateRect+0x86>
 801e124:	f640 0301 	movw	r3, #2049	; 0x801
 801e128:	ea08 0303 	and.w	r3, r8, r3
 801e12c:	2b01      	cmp	r3, #1
 801e12e:	d005      	beq.n	801e13c <WM_InvalidateRect+0xc8>
 801e130:	4638      	mov	r0, r7
 801e132:	4631      	mov	r1, r6
 801e134:	2220      	movs	r2, #32
 801e136:	f7fe fff3 	bl	801d120 <_Invalidate1Abs>
 801e13a:	e7de      	b.n	801e0fa <WM_InvalidateRect+0x86>
 801e13c:	9b00      	ldr	r3, [sp, #0]
 801e13e:	4630      	mov	r0, r6
 801e140:	6999      	ldr	r1, [r3, #24]
 801e142:	6a1a      	ldr	r2, [r3, #32]
 801e144:	2320      	movs	r3, #32
 801e146:	f7ff fcb3 	bl	801dab0 <WM__InvalidateRect>
 801e14a:	e7d6      	b.n	801e0fa <WM_InvalidateRect+0x86>
 801e14c:	2002cb58 	.word	0x2002cb58

0801e150 <_cbBackWin>:
 801e150:	6803      	ldr	r3, [r0, #0]
 801e152:	2b0e      	cmp	r3, #14
 801e154:	b510      	push	{r4, lr}
 801e156:	4604      	mov	r4, r0
 801e158:	d032      	beq.n	801e1c0 <_cbBackWin+0x70>
 801e15a:	2b0f      	cmp	r3, #15
 801e15c:	d116      	bne.n	801e18c <_cbBackWin+0x3c>
 801e15e:	4a26      	ldr	r2, [pc, #152]	; (801e1f8 <_cbBackWin+0xa8>)
 801e160:	6843      	ldr	r3, [r0, #4]
 801e162:	6811      	ldr	r1, [r2, #0]
 801e164:	428b      	cmp	r3, r1
 801e166:	d044      	beq.n	801e1f2 <_cbBackWin+0xa2>
 801e168:	6852      	ldr	r2, [r2, #4]
 801e16a:	4293      	cmp	r3, r2
 801e16c:	bf14      	ite	ne
 801e16e:	f04f 33ff 	movne.w	r3, #4294967295
 801e172:	2301      	moveq	r3, #1
 801e174:	4a21      	ldr	r2, [pc, #132]	; (801e1fc <_cbBackWin+0xac>)
 801e176:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e17a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801e17e:	4298      	cmp	r0, r3
 801e180:	d01b      	beq.n	801e1ba <_cbBackWin+0x6a>
 801e182:	f006 fac3 	bl	802470c <GUI_SetBkColor>
 801e186:	f005 ff69 	bl	802405c <GUI_Clear>
 801e18a:	6823      	ldr	r3, [r4, #0]
 801e18c:	3b0e      	subs	r3, #14
 801e18e:	6860      	ldr	r0, [r4, #4]
 801e190:	68e1      	ldr	r1, [r4, #12]
 801e192:	2b1a      	cmp	r3, #26
 801e194:	d811      	bhi.n	801e1ba <_cbBackWin+0x6a>
 801e196:	e8df f003 	tbb	[pc, r3]
 801e19a:	101c      	.short	0x101c
 801e19c:	10101010 	.word	0x10101010
 801e1a0:	2110100e 	.word	0x2110100e
 801e1a4:	10101010 	.word	0x10101010
 801e1a8:	10101010 	.word	0x10101010
 801e1ac:	10231010 	.word	0x10231010
 801e1b0:	10101010 	.word	0x10101010
 801e1b4:	27          	.byte	0x27
 801e1b5:	00          	.byte	0x00
 801e1b6:	f7fc ff23 	bl	801b000 <WM__GetClientRectEx>
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	60e3      	str	r3, [r4, #12]
 801e1be:	bd10      	pop	{r4, pc}
 801e1c0:	68c3      	ldr	r3, [r0, #12]
 801e1c2:	685a      	ldr	r2, [r3, #4]
 801e1c4:	2a01      	cmp	r2, #1
 801e1c6:	d1fa      	bne.n	801e1be <_cbBackWin+0x6e>
 801e1c8:	6818      	ldr	r0, [r3, #0]
 801e1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1ce:	f005 b94d 	b.w	802346c <GUI_StoreKey>
 801e1d2:	4621      	mov	r1, r4
 801e1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1d8:	f7fe b976 	b.w	801c4c8 <WM_SendToParent>
 801e1dc:	60e0      	str	r0, [r4, #12]
 801e1de:	bd10      	pop	{r4, pc}
 801e1e0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801e1e4:	60e3      	str	r3, [r4, #12]
 801e1e6:	bd10      	pop	{r4, pc}
 801e1e8:	2100      	movs	r1, #0
 801e1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1ee:	f7ff bf41 	b.w	801e074 <WM_InvalidateRect>
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	e7be      	b.n	801e174 <_cbBackWin+0x24>
 801e1f6:	bf00      	nop
 801e1f8:	2002cb58 	.word	0x2002cb58
 801e1fc:	2002cb8c 	.word	0x2002cb8c

0801e200 <WM_InvalidateWindow>:
 801e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e204:	4607      	mov	r7, r0
 801e206:	b084      	sub	sp, #16
 801e208:	b910      	cbnz	r0, 801e210 <WM_InvalidateWindow+0x10>
 801e20a:	b004      	add	sp, #16
 801e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e210:	f004 ffec 	bl	80231ec <GUI_Lock>
 801e214:	4638      	mov	r0, r7
 801e216:	f007 fb69 	bl	80258ec <GUI_ALLOC_LockH>
 801e21a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801e21e:	9000      	str	r0, [sp, #0]
 801e220:	f018 0f02 	tst.w	r8, #2
 801e224:	d01d      	beq.n	801e262 <WM_InvalidateWindow+0x62>
 801e226:	c803      	ldmia	r0, {r0, r1}
 801e228:	ae02      	add	r6, sp, #8
 801e22a:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801e22e:	e886 0003 	stmia.w	r6, {r0, r1}
 801e232:	d133      	bne.n	801e29c <WM_InvalidateWindow+0x9c>
 801e234:	463d      	mov	r5, r7
 801e236:	e008      	b.n	801e24a <WM_InvalidateWindow+0x4a>
 801e238:	f003 fff8 	bl	802222c <GUI__IntersectRect>
 801e23c:	9b01      	ldr	r3, [sp, #4]
 801e23e:	699c      	ldr	r4, [r3, #24]
 801e240:	a801      	add	r0, sp, #4
 801e242:	b1b4      	cbz	r4, 801e272 <WM_InvalidateWindow+0x72>
 801e244:	f007 fb64 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e248:	4625      	mov	r5, r4
 801e24a:	4628      	mov	r0, r5
 801e24c:	f007 fb4e 	bl	80258ec <GUI_ALLOC_LockH>
 801e250:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e252:	9001      	str	r0, [sp, #4]
 801e254:	0793      	lsls	r3, r2, #30
 801e256:	4601      	mov	r1, r0
 801e258:	4630      	mov	r0, r6
 801e25a:	d4ed      	bmi.n	801e238 <WM_InvalidateWindow+0x38>
 801e25c:	a801      	add	r0, sp, #4
 801e25e:	f007 fb57 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e262:	4668      	mov	r0, sp
 801e264:	f007 fb54 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e268:	f004 ffb6 	bl	80231d8 <GUI_Unlock>
 801e26c:	b004      	add	sp, #16
 801e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e272:	f007 fb4d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e276:	4b0f      	ldr	r3, [pc, #60]	; (801e2b4 <WM_InvalidateWindow+0xb4>)
 801e278:	681a      	ldr	r2, [r3, #0]
 801e27a:	4295      	cmp	r5, r2
 801e27c:	d002      	beq.n	801e284 <WM_InvalidateWindow+0x84>
 801e27e:	685b      	ldr	r3, [r3, #4]
 801e280:	429d      	cmp	r5, r3
 801e282:	d1ee      	bne.n	801e262 <WM_InvalidateWindow+0x62>
 801e284:	f640 0301 	movw	r3, #2049	; 0x801
 801e288:	ea08 0303 	and.w	r3, r8, r3
 801e28c:	2b01      	cmp	r3, #1
 801e28e:	d009      	beq.n	801e2a4 <WM_InvalidateWindow+0xa4>
 801e290:	4638      	mov	r0, r7
 801e292:	4631      	mov	r1, r6
 801e294:	2220      	movs	r2, #32
 801e296:	f7fe ff43 	bl	801d120 <_Invalidate1Abs>
 801e29a:	e7e2      	b.n	801e262 <WM_InvalidateWindow+0x62>
 801e29c:	4638      	mov	r0, r7
 801e29e:	f7ff f8e7 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801e2a2:	e7c7      	b.n	801e234 <WM_InvalidateWindow+0x34>
 801e2a4:	9b00      	ldr	r3, [sp, #0]
 801e2a6:	4630      	mov	r0, r6
 801e2a8:	6999      	ldr	r1, [r3, #24]
 801e2aa:	6a1a      	ldr	r2, [r3, #32]
 801e2ac:	2320      	movs	r3, #32
 801e2ae:	f7ff fbff 	bl	801dab0 <WM__InvalidateRect>
 801e2b2:	e7d6      	b.n	801e262 <WM_InvalidateWindow+0x62>
 801e2b4:	2002cb58 	.word	0x2002cb58

0801e2b8 <WM_CreateWindowAsChild>:
 801e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2bc:	b087      	sub	sp, #28
 801e2be:	4699      	mov	r9, r3
 801e2c0:	4606      	mov	r6, r0
 801e2c2:	460f      	mov	r7, r1
 801e2c4:	4690      	mov	r8, r2
 801e2c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e2c8:	f004 ff90 	bl	80231ec <GUI_Lock>
 801e2cc:	4b6f      	ldr	r3, [pc, #444]	; (801e48c <WM_CreateWindowAsChild+0x1d4>)
 801e2ce:	f8d3 a000 	ldr.w	sl, [r3]
 801e2d2:	b125      	cbz	r5, 801e2de <WM_CreateWindowAsChild+0x26>
 801e2d4:	1c6b      	adds	r3, r5, #1
 801e2d6:	f000 80d7 	beq.w	801e488 <WM_CreateWindowAsChild+0x1d0>
 801e2da:	462c      	mov	r4, r5
 801e2dc:	e019      	b.n	801e312 <WM_CreateWindowAsChild+0x5a>
 801e2de:	4b6c      	ldr	r3, [pc, #432]	; (801e490 <WM_CreateWindowAsChild+0x1d8>)
 801e2e0:	881b      	ldrh	r3, [r3, #0]
 801e2e2:	b963      	cbnz	r3, 801e2fe <WM_CreateWindowAsChild+0x46>
 801e2e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e2e6:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 801e2ea:	f007 fc87 	bl	8025bfc <GUI_ALLOC_AllocZero>
 801e2ee:	4604      	mov	r4, r0
 801e2f0:	bb80      	cbnz	r0, 801e354 <WM_CreateWindowAsChild+0x9c>
 801e2f2:	f004 ff71 	bl	80231d8 <GUI_Unlock>
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	b007      	add	sp, #28
 801e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fe:	4a65      	ldr	r2, [pc, #404]	; (801e494 <WM_CreateWindowAsChild+0x1dc>)
 801e300:	4b65      	ldr	r3, [pc, #404]	; (801e498 <WM_CreateWindowAsChild+0x1e0>)
 801e302:	6812      	ldr	r2, [r2, #0]
 801e304:	7c52      	ldrb	r2, [r2, #17]
 801e306:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801e30a:	1c62      	adds	r2, r4, #1
 801e30c:	d0ea      	beq.n	801e2e4 <WM_CreateWindowAsChild+0x2c>
 801e30e:	2c00      	cmp	r4, #0
 801e310:	d0e8      	beq.n	801e2e4 <WM_CreateWindowAsChild+0x2c>
 801e312:	4620      	mov	r0, r4
 801e314:	f007 faea 	bl	80258ec <GUI_ALLOC_LockH>
 801e318:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e31c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e320:	9001      	str	r0, [sp, #4]
 801e322:	4416      	add	r6, r2
 801e324:	441f      	add	r7, r3
 801e326:	f1b8 0f00 	cmp.w	r8, #0
 801e32a:	d105      	bne.n	801e338 <WM_CreateWindowAsChild+0x80>
 801e32c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801e330:	ebc2 0808 	rsb	r8, r2, r8
 801e334:	f108 0801 	add.w	r8, r8, #1
 801e338:	f1b9 0f00 	cmp.w	r9, #0
 801e33c:	d105      	bne.n	801e34a <WM_CreateWindowAsChild+0x92>
 801e33e:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801e342:	ebc3 0909 	rsb	r9, r3, r9
 801e346:	f109 0901 	add.w	r9, r9, #1
 801e34a:	a801      	add	r0, sp, #4
 801e34c:	4625      	mov	r5, r4
 801e34e:	f007 fadf 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e352:	e7c7      	b.n	801e2e4 <WM_CreateWindowAsChild+0x2c>
 801e354:	4b4e      	ldr	r3, [pc, #312]	; (801e490 <WM_CreateWindowAsChild+0x1d8>)
 801e356:	881a      	ldrh	r2, [r3, #0]
 801e358:	3201      	adds	r2, #1
 801e35a:	801a      	strh	r2, [r3, #0]
 801e35c:	f007 fac6 	bl	80258ec <GUI_ALLOC_LockH>
 801e360:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e362:	4b4e      	ldr	r3, [pc, #312]	; (801e49c <WM_CreateWindowAsChild+0x1e4>)
 801e364:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e366:	ea41 0a0a 	orr.w	sl, r1, sl
 801e36a:	f10d 0b18 	add.w	fp, sp, #24
 801e36e:	44b0      	add	r8, r6
 801e370:	44b9      	add	r9, r7
 801e372:	ea0a 0303 	and.w	r3, sl, r3
 801e376:	4313      	orrs	r3, r2
 801e378:	f108 38ff 	add.w	r8, r8, #4294967295
 801e37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e37e:	f84b 0d18 	str.w	r0, [fp, #-24]!
 801e382:	f109 39ff 	add.w	r9, r9, #4294967295
 801e386:	6283      	str	r3, [r0, #40]	; 0x28
 801e388:	f8a0 8004 	strh.w	r8, [r0, #4]
 801e38c:	f8a0 9006 	strh.w	r9, [r0, #6]
 801e390:	6102      	str	r2, [r0, #16]
 801e392:	8006      	strh	r6, [r0, #0]
 801e394:	8047      	strh	r7, [r0, #2]
 801e396:	4668      	mov	r0, sp
 801e398:	f007 faba 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e39c:	4b40      	ldr	r3, [pc, #256]	; (801e4a0 <WM_CreateWindowAsChild+0x1e8>)
 801e39e:	6818      	ldr	r0, [r3, #0]
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d161      	bne.n	801e468 <WM_CreateWindowAsChild+0x1b0>
 801e3a4:	601c      	str	r4, [r3, #0]
 801e3a6:	4629      	mov	r1, r5
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	f7fe ffbb 	bl	801d324 <WM__InsertWindowIntoList>
 801e3ae:	f01a 0f20 	tst.w	sl, #32
 801e3b2:	d135      	bne.n	801e420 <WM_CreateWindowAsChild+0x168>
 801e3b4:	f01a 0f01 	tst.w	sl, #1
 801e3b8:	d113      	bne.n	801e3e2 <WM_CreateWindowAsChild+0x12a>
 801e3ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801e3be:	d118      	bne.n	801e3f2 <WM_CreateWindowAsChild+0x13a>
 801e3c0:	f01a 0f02 	tst.w	sl, #2
 801e3c4:	d11b      	bne.n	801e3fe <WM_CreateWindowAsChild+0x146>
 801e3c6:	a906      	add	r1, sp, #24
 801e3c8:	2301      	movs	r3, #1
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	f841 3d10 	str.w	r3, [r1, #-16]!
 801e3d0:	9403      	str	r4, [sp, #12]
 801e3d2:	f7fc fd41 	bl	801ae58 <WM__SendMessage>
 801e3d6:	f004 feff 	bl	80231d8 <GUI_Unlock>
 801e3da:	4620      	mov	r0, r4
 801e3dc:	b007      	add	sp, #28
 801e3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e2:	4b30      	ldr	r3, [pc, #192]	; (801e4a4 <WM_CreateWindowAsChild+0x1ec>)
 801e3e4:	681a      	ldr	r2, [r3, #0]
 801e3e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801e3ea:	f102 0201 	add.w	r2, r2, #1
 801e3ee:	601a      	str	r2, [r3, #0]
 801e3f0:	d0e6      	beq.n	801e3c0 <WM_CreateWindowAsChild+0x108>
 801e3f2:	4620      	mov	r0, r4
 801e3f4:	f7fd fc4c 	bl	801bc90 <WM_BringToBottom>
 801e3f8:	f01a 0f02 	tst.w	sl, #2
 801e3fc:	d0e3      	beq.n	801e3c6 <WM_CreateWindowAsChild+0x10e>
 801e3fe:	4620      	mov	r0, r4
 801e400:	f007 fa74 	bl	80258ec <GUI_ALLOC_LockH>
 801e404:	4603      	mov	r3, r0
 801e406:	4668      	mov	r0, sp
 801e408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e40a:	9300      	str	r3, [sp, #0]
 801e40c:	f042 0202 	orr.w	r2, r2, #2
 801e410:	629a      	str	r2, [r3, #40]	; 0x28
 801e412:	f007 fa7d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e416:	4620      	mov	r0, r4
 801e418:	2100      	movs	r1, #0
 801e41a:	f7ff fe2b 	bl	801e074 <WM_InvalidateRect>
 801e41e:	e7d2      	b.n	801e3c6 <WM_CreateWindowAsChild+0x10e>
 801e420:	4e1c      	ldr	r6, [pc, #112]	; (801e494 <WM_CreateWindowAsChild+0x1dc>)
 801e422:	f004 fee3 	bl	80231ec <GUI_Lock>
 801e426:	6833      	ldr	r3, [r6, #0]
 801e428:	4625      	mov	r5, r4
 801e42a:	649c      	str	r4, [r3, #72]	; 0x48
 801e42c:	e000      	b.n	801e430 <WM_CreateWindowAsChild+0x178>
 801e42e:	461d      	mov	r5, r3
 801e430:	4628      	mov	r0, r5
 801e432:	f007 fa51 	bl	80258d8 <GUI_ALLOC_h2p>
 801e436:	6983      	ldr	r3, [r0, #24]
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d1f8      	bne.n	801e42e <WM_CreateWindowAsChild+0x176>
 801e43c:	4a16      	ldr	r2, [pc, #88]	; (801e498 <WM_CreateWindowAsChild+0x1e0>)
 801e43e:	6811      	ldr	r1, [r2, #0]
 801e440:	428d      	cmp	r5, r1
 801e442:	d01b      	beq.n	801e47c <WM_CreateWindowAsChild+0x1c4>
 801e444:	6853      	ldr	r3, [r2, #4]
 801e446:	429d      	cmp	r5, r3
 801e448:	d01c      	beq.n	801e484 <WM_CreateWindowAsChild+0x1cc>
 801e44a:	f003 fd71 	bl	8021f30 <LCD_SetClipRectMax>
 801e44e:	4620      	mov	r0, r4
 801e450:	f007 fa42 	bl	80258d8 <GUI_ALLOC_h2p>
 801e454:	6833      	ldr	r3, [r6, #0]
 801e456:	f9b0 1000 	ldrsh.w	r1, [r0]
 801e45a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e45e:	651a      	str	r2, [r3, #80]	; 0x50
 801e460:	64d9      	str	r1, [r3, #76]	; 0x4c
 801e462:	f004 feb9 	bl	80231d8 <GUI_Unlock>
 801e466:	e7a5      	b.n	801e3b4 <WM_CreateWindowAsChild+0xfc>
 801e468:	f007 fa36 	bl	80258d8 <GUI_ALLOC_h2p>
 801e46c:	4606      	mov	r6, r0
 801e46e:	4620      	mov	r0, r4
 801e470:	f007 fa32 	bl	80258d8 <GUI_ALLOC_h2p>
 801e474:	6973      	ldr	r3, [r6, #20]
 801e476:	6143      	str	r3, [r0, #20]
 801e478:	6174      	str	r4, [r6, #20]
 801e47a:	e794      	b.n	801e3a6 <WM_CreateWindowAsChild+0xee>
 801e47c:	4618      	mov	r0, r3
 801e47e:	f004 ffd5 	bl	802342c <GUI_SelectLayer>
 801e482:	e7e2      	b.n	801e44a <WM_CreateWindowAsChild+0x192>
 801e484:	2001      	movs	r0, #1
 801e486:	e7fa      	b.n	801e47e <WM_CreateWindowAsChild+0x1c6>
 801e488:	2500      	movs	r5, #0
 801e48a:	e72b      	b.n	801e2e4 <WM_CreateWindowAsChild+0x2c>
 801e48c:	2002cb88 	.word	0x2002cb88
 801e490:	2002cb50 	.word	0x2002cb50
 801e494:	20000280 	.word	0x20000280
 801e498:	2002cb58 	.word	0x2002cb58
 801e49c:	003f3f9f 	.word	0x003f3f9f
 801e4a0:	2002cb74 	.word	0x2002cb74
 801e4a4:	2002cba8 	.word	0x2002cba8

0801e4a8 <WM_DeleteWindow>:
 801e4a8:	b900      	cbnz	r0, 801e4ac <WM_DeleteWindow+0x4>
 801e4aa:	4770      	bx	lr
 801e4ac:	f7ff bba0 	b.w	801dbf0 <WM_DeleteWindow.part.2>

0801e4b0 <WM__GetTopLevelLayer>:
 801e4b0:	b510      	push	{r4, lr}
 801e4b2:	4604      	mov	r4, r0
 801e4b4:	e000      	b.n	801e4b8 <WM__GetTopLevelLayer+0x8>
 801e4b6:	461c      	mov	r4, r3
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	f007 fa0d 	bl	80258d8 <GUI_ALLOC_h2p>
 801e4be:	6983      	ldr	r3, [r0, #24]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d1f8      	bne.n	801e4b6 <WM__GetTopLevelLayer+0x6>
 801e4c4:	4a06      	ldr	r2, [pc, #24]	; (801e4e0 <WM__GetTopLevelLayer+0x30>)
 801e4c6:	6811      	ldr	r1, [r2, #0]
 801e4c8:	428c      	cmp	r4, r1
 801e4ca:	d006      	beq.n	801e4da <WM__GetTopLevelLayer+0x2a>
 801e4cc:	6850      	ldr	r0, [r2, #4]
 801e4ce:	4284      	cmp	r4, r0
 801e4d0:	bf14      	ite	ne
 801e4d2:	f04f 30ff 	movne.w	r0, #4294967295
 801e4d6:	2001      	moveq	r0, #1
 801e4d8:	bd10      	pop	{r4, pc}
 801e4da:	4618      	mov	r0, r3
 801e4dc:	bd10      	pop	{r4, pc}
 801e4de:	bf00      	nop
 801e4e0:	2002cb58 	.word	0x2002cb58

0801e4e4 <WM_SelectWindow>:
 801e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4e6:	4f18      	ldr	r7, [pc, #96]	; (801e548 <WM_SelectWindow+0x64>)
 801e4e8:	4605      	mov	r5, r0
 801e4ea:	f004 fe7f 	bl	80231ec <GUI_Lock>
 801e4ee:	683b      	ldr	r3, [r7, #0]
 801e4f0:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 801e4f2:	b90d      	cbnz	r5, 801e4f8 <WM_SelectWindow+0x14>
 801e4f4:	4a15      	ldr	r2, [pc, #84]	; (801e54c <WM_SelectWindow+0x68>)
 801e4f6:	6815      	ldr	r5, [r2, #0]
 801e4f8:	649d      	str	r5, [r3, #72]	; 0x48
 801e4fa:	462c      	mov	r4, r5
 801e4fc:	e000      	b.n	801e500 <WM_SelectWindow+0x1c>
 801e4fe:	461c      	mov	r4, r3
 801e500:	4620      	mov	r0, r4
 801e502:	f007 f9e9 	bl	80258d8 <GUI_ALLOC_h2p>
 801e506:	6983      	ldr	r3, [r0, #24]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d1f8      	bne.n	801e4fe <WM_SelectWindow+0x1a>
 801e50c:	4a10      	ldr	r2, [pc, #64]	; (801e550 <WM_SelectWindow+0x6c>)
 801e50e:	6811      	ldr	r1, [r2, #0]
 801e510:	428c      	cmp	r4, r1
 801e512:	d012      	beq.n	801e53a <WM_SelectWindow+0x56>
 801e514:	6853      	ldr	r3, [r2, #4]
 801e516:	429c      	cmp	r4, r3
 801e518:	d013      	beq.n	801e542 <WM_SelectWindow+0x5e>
 801e51a:	f003 fd09 	bl	8021f30 <LCD_SetClipRectMax>
 801e51e:	4628      	mov	r0, r5
 801e520:	f007 f9da 	bl	80258d8 <GUI_ALLOC_h2p>
 801e524:	683b      	ldr	r3, [r7, #0]
 801e526:	f9b0 1000 	ldrsh.w	r1, [r0]
 801e52a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e52e:	651a      	str	r2, [r3, #80]	; 0x50
 801e530:	64d9      	str	r1, [r3, #76]	; 0x4c
 801e532:	f004 fe51 	bl	80231d8 <GUI_Unlock>
 801e536:	4630      	mov	r0, r6
 801e538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e53a:	4618      	mov	r0, r3
 801e53c:	f004 ff76 	bl	802342c <GUI_SelectLayer>
 801e540:	e7eb      	b.n	801e51a <WM_SelectWindow+0x36>
 801e542:	2001      	movs	r0, #1
 801e544:	e7fa      	b.n	801e53c <WM_SelectWindow+0x58>
 801e546:	bf00      	nop
 801e548:	20000280 	.word	0x20000280
 801e54c:	2002cb74 	.word	0x2002cb74
 801e550:	2002cb58 	.word	0x2002cb58

0801e554 <WM_GetActiveWindow>:
 801e554:	4b01      	ldr	r3, [pc, #4]	; (801e55c <WM_GetActiveWindow+0x8>)
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801e55a:	4770      	bx	lr
 801e55c:	20000280 	.word	0x20000280

0801e560 <WM__GetNextIVR>:
 801e560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e564:	f8df 8240 	ldr.w	r8, [pc, #576]	; 801e7a8 <WM__GetNextIVR+0x248>
 801e568:	f8d8 3000 	ldr.w	r3, [r8]
 801e56c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801e570:	b087      	sub	sp, #28
 801e572:	b130      	cbz	r0, 801e582 <WM__GetNextIVR+0x22>
 801e574:	4e8b      	ldr	r6, [pc, #556]	; (801e7a4 <WM__GetNextIVR+0x244>)
 801e576:	6973      	ldr	r3, [r6, #20]
 801e578:	2b01      	cmp	r3, #1
 801e57a:	dd05      	ble.n	801e588 <WM__GetNextIVR+0x28>
 801e57c:	3b01      	subs	r3, #1
 801e57e:	6173      	str	r3, [r6, #20]
 801e580:	2000      	movs	r0, #0
 801e582:	b007      	add	sp, #28
 801e584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e588:	f106 0708 	add.w	r7, r6, #8
 801e58c:	6933      	ldr	r3, [r6, #16]
 801e58e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e592:	ad02      	add	r5, sp, #8
 801e594:	3301      	adds	r3, #1
 801e596:	e885 0003 	stmia.w	r5, {r0, r1}
 801e59a:	6133      	str	r3, [r6, #16]
 801e59c:	b953      	cbnz	r3, 801e5b4 <WM__GetNextIVR+0x54>
 801e59e:	6833      	ldr	r3, [r6, #0]
 801e5a0:	9302      	str	r3, [sp, #8]
 801e5a2:	8873      	ldrh	r3, [r6, #2]
 801e5a4:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801e5a8:	4c7e      	ldr	r4, [pc, #504]	; (801e7a4 <WM__GetNextIVR+0x244>)
 801e5aa:	b21b      	sxth	r3, r3
 801e5ac:	429a      	cmp	r2, r3
 801e5ae:	da17      	bge.n	801e5e0 <WM__GetNextIVR+0x80>
 801e5b0:	6973      	ldr	r3, [r6, #20]
 801e5b2:	e7e3      	b.n	801e57c <WM__GetNextIVR+0x1c>
 801e5b4:	89b2      	ldrh	r2, [r6, #12]
 801e5b6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801e5ba:	8973      	ldrh	r3, [r6, #10]
 801e5bc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e5c0:	3201      	adds	r2, #1
 801e5c2:	b292      	uxth	r2, r2
 801e5c4:	b211      	sxth	r1, r2
 801e5c6:	4288      	cmp	r0, r1
 801e5c8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e5cc:	daea      	bge.n	801e5a4 <WM__GetNextIVR+0x44>
 801e5ce:	89f3      	ldrh	r3, [r6, #14]
 801e5d0:	8832      	ldrh	r2, [r6, #0]
 801e5d2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e5d6:	3301      	adds	r3, #1
 801e5d8:	b29b      	uxth	r3, r3
 801e5da:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e5de:	e7e1      	b.n	801e5a4 <WM__GetNextIVR+0x44>
 801e5e0:	f8d8 3000 	ldr.w	r3, [r8]
 801e5e4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801e7a8 <WM__GetNextIVR+0x248>
 801e5e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801e5ea:	f007 f97f 	bl	80258ec <GUI_ALLOC_LockH>
 801e5ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e5f2:	8821      	ldrh	r1, [r4, #0]
 801e5f4:	9001      	str	r0, [sp, #4]
 801e5f6:	428b      	cmp	r3, r1
 801e5f8:	4602      	mov	r2, r0
 801e5fa:	f000 80ba 	beq.w	801e772 <WM__GetNextIVR+0x212>
 801e5fe:	f8d8 2000 	ldr.w	r2, [r8]
 801e602:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e606:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801e608:	b910      	cbnz	r0, 801e610 <WM__GetNextIVR+0xb0>
 801e60a:	e00d      	b.n	801e628 <WM__GetNextIVR+0xc8>
 801e60c:	69a0      	ldr	r0, [r4, #24]
 801e60e:	b158      	cbz	r0, 801e628 <WM__GetNextIVR+0xc8>
 801e610:	f007 f962 	bl	80258d8 <GUI_ALLOC_h2p>
 801e614:	4629      	mov	r1, r5
 801e616:	4604      	mov	r4, r0
 801e618:	6a00      	ldr	r0, [r0, #32]
 801e61a:	f7fe fc71 	bl	801cf00 <_Findx0.constprop.9>
 801e61e:	2800      	cmp	r0, #0
 801e620:	d0f4      	beq.n	801e60c <WM__GetNextIVR+0xac>
 801e622:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e626:	e7ea      	b.n	801e5fe <WM__GetNextIVR+0x9e>
 801e628:	9b01      	ldr	r3, [sp, #4]
 801e62a:	4629      	mov	r1, r5
 801e62c:	69d8      	ldr	r0, [r3, #28]
 801e62e:	f7fe fc67 	bl	801cf00 <_Findx0.constprop.9>
 801e632:	2800      	cmp	r0, #0
 801e634:	d1f5      	bne.n	801e622 <WM__GetNextIVR+0xc2>
 801e636:	88b3      	ldrh	r3, [r6, #4]
 801e638:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801e63c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e640:	b21b      	sxth	r3, r3
 801e642:	429a      	cmp	r2, r3
 801e644:	f300 808d 	bgt.w	801e762 <WM__GetNextIVR+0x202>
 801e648:	f8d8 3000 	ldr.w	r3, [r8]
 801e64c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801e64e:	f10d 0810 	add.w	r8, sp, #16
 801e652:	2800      	cmp	r0, #0
 801e654:	d02d      	beq.n	801e6b2 <WM__GetNextIVR+0x152>
 801e656:	f007 f93f 	bl	80258d8 <GUI_ALLOC_h2p>
 801e65a:	6a04      	ldr	r4, [r0, #32]
 801e65c:	4681      	mov	r9, r0
 801e65e:	b96c      	cbnz	r4, 801e67c <WM__GetNextIVR+0x11c>
 801e660:	e023      	b.n	801e6aa <WM__GetNextIVR+0x14a>
 801e662:	07e1      	lsls	r1, r4, #31
 801e664:	d44b      	bmi.n	801e6fe <WM__GetNextIVR+0x19e>
 801e666:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e66a:	9800      	ldr	r0, [sp, #0]
 801e66c:	3b01      	subs	r3, #1
 801e66e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e672:	6a04      	ldr	r4, [r0, #32]
 801e674:	4668      	mov	r0, sp
 801e676:	f007 f94b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e67a:	b1b4      	cbz	r4, 801e6aa <WM__GetNextIVR+0x14a>
 801e67c:	4620      	mov	r0, r4
 801e67e:	f007 f935 	bl	80258ec <GUI_ALLOC_LockH>
 801e682:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801e684:	9000      	str	r0, [sp, #0]
 801e686:	07a3      	lsls	r3, r4, #30
 801e688:	d5f3      	bpl.n	801e672 <WM__GetNextIVR+0x112>
 801e68a:	c803      	ldmia	r0, {r0, r1}
 801e68c:	e888 0003 	stmia.w	r8, {r0, r1}
 801e690:	4628      	mov	r0, r5
 801e692:	4641      	mov	r1, r8
 801e694:	f005 fffa 	bl	802468c <GUI_RectsIntersect>
 801e698:	2800      	cmp	r0, #0
 801e69a:	d1e2      	bne.n	801e662 <WM__GetNextIVR+0x102>
 801e69c:	9800      	ldr	r0, [sp, #0]
 801e69e:	6a04      	ldr	r4, [r0, #32]
 801e6a0:	4668      	mov	r0, sp
 801e6a2:	f007 f935 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e6a6:	2c00      	cmp	r4, #0
 801e6a8:	d1e8      	bne.n	801e67c <WM__GetNextIVR+0x11c>
 801e6aa:	f8d9 0018 	ldr.w	r0, [r9, #24]
 801e6ae:	2800      	cmp	r0, #0
 801e6b0:	d1d1      	bne.n	801e656 <WM__GetNextIVR+0xf6>
 801e6b2:	9b01      	ldr	r3, [sp, #4]
 801e6b4:	69dc      	ldr	r4, [r3, #28]
 801e6b6:	f10d 0810 	add.w	r8, sp, #16
 801e6ba:	b974      	cbnz	r4, 801e6da <WM__GetNextIVR+0x17a>
 801e6bc:	e040      	b.n	801e740 <WM__GetNextIVR+0x1e0>
 801e6be:	07e3      	lsls	r3, r4, #31
 801e6c0:	d42e      	bmi.n	801e720 <WM__GetNextIVR+0x1c0>
 801e6c2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e6c6:	9800      	ldr	r0, [sp, #0]
 801e6c8:	3b01      	subs	r3, #1
 801e6ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e6ce:	6a04      	ldr	r4, [r0, #32]
 801e6d0:	4668      	mov	r0, sp
 801e6d2:	f007 f91d 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e6d6:	2c00      	cmp	r4, #0
 801e6d8:	d032      	beq.n	801e740 <WM__GetNextIVR+0x1e0>
 801e6da:	4620      	mov	r0, r4
 801e6dc:	f007 f906 	bl	80258ec <GUI_ALLOC_LockH>
 801e6e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801e6e2:	9000      	str	r0, [sp, #0]
 801e6e4:	07a2      	lsls	r2, r4, #30
 801e6e6:	d5f2      	bpl.n	801e6ce <WM__GetNextIVR+0x16e>
 801e6e8:	c803      	ldmia	r0, {r0, r1}
 801e6ea:	e888 0003 	stmia.w	r8, {r0, r1}
 801e6ee:	4628      	mov	r0, r5
 801e6f0:	4641      	mov	r1, r8
 801e6f2:	f005 ffcb 	bl	802468c <GUI_RectsIntersect>
 801e6f6:	2800      	cmp	r0, #0
 801e6f8:	d1e1      	bne.n	801e6be <WM__GetNextIVR+0x15e>
 801e6fa:	9800      	ldr	r0, [sp, #0]
 801e6fc:	e7e7      	b.n	801e6ce <WM__GetNextIVR+0x16e>
 801e6fe:	9800      	ldr	r0, [sp, #0]
 801e700:	69c4      	ldr	r4, [r0, #28]
 801e702:	2c00      	cmp	r4, #0
 801e704:	d0b5      	beq.n	801e672 <WM__GetNextIVR+0x112>
 801e706:	4620      	mov	r0, r4
 801e708:	4629      	mov	r1, r5
 801e70a:	4642      	mov	r2, r8
 801e70c:	f7fe faea 	bl	801cce4 <_Findx1>
 801e710:	4620      	mov	r0, r4
 801e712:	f007 f8e1 	bl	80258d8 <GUI_ALLOC_h2p>
 801e716:	6a04      	ldr	r4, [r0, #32]
 801e718:	2c00      	cmp	r4, #0
 801e71a:	d1f4      	bne.n	801e706 <WM__GetNextIVR+0x1a6>
 801e71c:	9800      	ldr	r0, [sp, #0]
 801e71e:	e7be      	b.n	801e69e <WM__GetNextIVR+0x13e>
 801e720:	9800      	ldr	r0, [sp, #0]
 801e722:	69c4      	ldr	r4, [r0, #28]
 801e724:	2c00      	cmp	r4, #0
 801e726:	d0d2      	beq.n	801e6ce <WM__GetNextIVR+0x16e>
 801e728:	4620      	mov	r0, r4
 801e72a:	4629      	mov	r1, r5
 801e72c:	4642      	mov	r2, r8
 801e72e:	f7fe fad9 	bl	801cce4 <_Findx1>
 801e732:	4620      	mov	r0, r4
 801e734:	f007 f8d0 	bl	80258d8 <GUI_ALLOC_h2p>
 801e738:	6a04      	ldr	r4, [r0, #32]
 801e73a:	2c00      	cmp	r4, #0
 801e73c:	d1f4      	bne.n	801e728 <WM__GetNextIVR+0x1c8>
 801e73e:	e7dc      	b.n	801e6fa <WM__GetNextIVR+0x19a>
 801e740:	a801      	add	r0, sp, #4
 801e742:	f007 f8e5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e746:	6933      	ldr	r3, [r6, #16]
 801e748:	f644 6220 	movw	r2, #20000	; 0x4e20
 801e74c:	4293      	cmp	r3, r2
 801e74e:	f73f af2f 	bgt.w	801e5b0 <WM__GetNextIVR+0x50>
 801e752:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e756:	e887 0003 	stmia.w	r7, {r0, r1}
 801e75a:	f7fe fd53 	bl	801d204 <WM__ActivateClipRect>
 801e75e:	2001      	movs	r0, #1
 801e760:	e70f      	b.n	801e582 <WM__GetNextIVR+0x22>
 801e762:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e766:	e887 0003 	stmia.w	r7, {r0, r1}
 801e76a:	a801      	add	r0, sp, #4
 801e76c:	f007 f8d0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e770:	e72d      	b.n	801e5ce <WM__GetNextIVR+0x6e>
 801e772:	f8d9 1000 	ldr.w	r1, [r9]
 801e776:	6863      	ldr	r3, [r4, #4]
 801e778:	6c88      	ldr	r0, [r1, #72]	; 0x48
 801e77a:	9303      	str	r3, [sp, #12]
 801e77c:	b150      	cbz	r0, 801e794 <WM__GetNextIVR+0x234>
 801e77e:	f007 f8ab 	bl	80258d8 <GUI_ALLOC_h2p>
 801e782:	4604      	mov	r4, r0
 801e784:	4629      	mov	r1, r5
 801e786:	6a00      	ldr	r0, [r0, #32]
 801e788:	f7fe fbfa 	bl	801cf80 <_Findy1.constprop.10>
 801e78c:	69a0      	ldr	r0, [r4, #24]
 801e78e:	2800      	cmp	r0, #0
 801e790:	d1f5      	bne.n	801e77e <WM__GetNextIVR+0x21e>
 801e792:	9a01      	ldr	r2, [sp, #4]
 801e794:	69d0      	ldr	r0, [r2, #28]
 801e796:	4629      	mov	r1, r5
 801e798:	f7fe fbf2 	bl	801cf80 <_Findy1.constprop.10>
 801e79c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e7a0:	e72d      	b.n	801e5fe <WM__GetNextIVR+0x9e>
 801e7a2:	bf00      	nop
 801e7a4:	2002b164 	.word	0x2002b164
 801e7a8:	20000280 	.word	0x20000280

0801e7ac <WM__InitIVRSearch>:
 801e7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e7b0:	4c60      	ldr	r4, [pc, #384]	; (801e934 <WM__InitIVRSearch+0x188>)
 801e7b2:	6822      	ldr	r2, [r4, #0]
 801e7b4:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 801e7b8:	b089      	sub	sp, #36	; 0x24
 801e7ba:	4607      	mov	r7, r0
 801e7bc:	b14b      	cbz	r3, 801e7d2 <WM__InitIVRSearch+0x26>
 801e7be:	4d5e      	ldr	r5, [pc, #376]	; (801e938 <WM__InitIVRSearch+0x18c>)
 801e7c0:	696b      	ldr	r3, [r5, #20]
 801e7c2:	3301      	adds	r3, #1
 801e7c4:	2b01      	cmp	r3, #1
 801e7c6:	616b      	str	r3, [r5, #20]
 801e7c8:	dd09      	ble.n	801e7de <WM__InitIVRSearch+0x32>
 801e7ca:	2001      	movs	r0, #1
 801e7cc:	b009      	add	sp, #36	; 0x24
 801e7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7d2:	f7fe fd17 	bl	801d204 <WM__ActivateClipRect>
 801e7d6:	2001      	movs	r0, #1
 801e7d8:	b009      	add	sp, #36	; 0x24
 801e7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7de:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801e7e0:	f007 f884 	bl	80258ec <GUI_ALLOC_LockH>
 801e7e4:	4b55      	ldr	r3, [pc, #340]	; (801e93c <WM__InitIVRSearch+0x190>)
 801e7e6:	9001      	str	r0, [sp, #4]
 801e7e8:	781b      	ldrb	r3, [r3, #0]
 801e7ea:	f04f 32ff 	mov.w	r2, #4294967295
 801e7ee:	612a      	str	r2, [r5, #16]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d064      	beq.n	801e8be <WM__InitIVRSearch+0x112>
 801e7f4:	3008      	adds	r0, #8
 801e7f6:	c803      	ldmia	r0, {r0, r1}
 801e7f8:	ae04      	add	r6, sp, #16
 801e7fa:	e886 0003 	stmia.w	r6, {r0, r1}
 801e7fe:	b11f      	cbz	r7, 801e808 <WM__InitIVRSearch+0x5c>
 801e800:	4639      	mov	r1, r7
 801e802:	4630      	mov	r0, r6
 801e804:	f003 fd12 	bl	802222c <GUI__IntersectRect>
 801e808:	6823      	ldr	r3, [r4, #0]
 801e80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	f000 808c 	beq.w	801e92a <WM__InitIVRSearch+0x17e>
 801e812:	6818      	ldr	r0, [r3, #0]
 801e814:	6859      	ldr	r1, [r3, #4]
 801e816:	4f4a      	ldr	r7, [pc, #296]	; (801e940 <WM__InitIVRSearch+0x194>)
 801e818:	9a01      	ldr	r2, [sp, #4]
 801e81a:	9202      	str	r2, [sp, #8]
 801e81c:	ab06      	add	r3, sp, #24
 801e81e:	c303      	stmia	r3!, {r0, r1}
 801e820:	683b      	ldr	r3, [r7, #0]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d164      	bne.n	801e8f0 <WM__InitIVRSearch+0x144>
 801e826:	4613      	mov	r3, r2
 801e828:	f10d 0808 	add.w	r8, sp, #8
 801e82c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e830:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e834:	a806      	add	r0, sp, #24
 801e836:	f005 fedf 	bl	80245f8 <GUI_MoveRect>
 801e83a:	4630      	mov	r0, r6
 801e83c:	a906      	add	r1, sp, #24
 801e83e:	f003 fcf5 	bl	802222c <GUI__IntersectRect>
 801e842:	4640      	mov	r0, r8
 801e844:	f007 f864 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e848:	f8d7 9000 	ldr.w	r9, [r7]
 801e84c:	f10d 080c 	add.w	r8, sp, #12
 801e850:	f1b9 0f00 	cmp.w	r9, #0
 801e854:	d129      	bne.n	801e8aa <WM__InitIVRSearch+0xfe>
 801e856:	6823      	ldr	r3, [r4, #0]
 801e858:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 801e85a:	e009      	b.n	801e870 <WM__InitIVRSearch+0xc4>
 801e85c:	f003 fce6 	bl	802222c <GUI__IntersectRect>
 801e860:	9b03      	ldr	r3, [sp, #12]
 801e862:	699c      	ldr	r4, [r3, #24]
 801e864:	4640      	mov	r0, r8
 801e866:	2c00      	cmp	r4, #0
 801e868:	d032      	beq.n	801e8d0 <WM__InitIVRSearch+0x124>
 801e86a:	f007 f851 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e86e:	4627      	mov	r7, r4
 801e870:	4638      	mov	r0, r7
 801e872:	f007 f83b 	bl	80258ec <GUI_ALLOC_LockH>
 801e876:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e878:	9003      	str	r0, [sp, #12]
 801e87a:	0793      	lsls	r3, r2, #30
 801e87c:	4601      	mov	r1, r0
 801e87e:	4630      	mov	r0, r6
 801e880:	d4ec      	bmi.n	801e85c <WM__InitIVRSearch+0xb0>
 801e882:	4640      	mov	r0, r8
 801e884:	f007 f844 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e888:	696b      	ldr	r3, [r5, #20]
 801e88a:	2000      	movs	r0, #0
 801e88c:	3b01      	subs	r3, #1
 801e88e:	616b      	str	r3, [r5, #20]
 801e890:	b009      	add	sp, #36	; 0x24
 801e892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e896:	f003 fcc9 	bl	802222c <GUI__IntersectRect>
 801e89a:	9b03      	ldr	r3, [sp, #12]
 801e89c:	699f      	ldr	r7, [r3, #24]
 801e89e:	4640      	mov	r0, r8
 801e8a0:	2f00      	cmp	r7, #0
 801e8a2:	d030      	beq.n	801e906 <WM__InitIVRSearch+0x15a>
 801e8a4:	f007 f834 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e8a8:	46b9      	mov	r9, r7
 801e8aa:	4648      	mov	r0, r9
 801e8ac:	f007 f81e 	bl	80258ec <GUI_ALLOC_LockH>
 801e8b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e8b2:	9003      	str	r0, [sp, #12]
 801e8b4:	0792      	lsls	r2, r2, #30
 801e8b6:	4601      	mov	r1, r0
 801e8b8:	4630      	mov	r0, r6
 801e8ba:	d4ec      	bmi.n	801e896 <WM__InitIVRSearch+0xea>
 801e8bc:	e7e1      	b.n	801e882 <WM__InitIVRSearch+0xd6>
 801e8be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e8c0:	f013 0602 	ands.w	r6, r3, #2
 801e8c4:	d029      	beq.n	801e91a <WM__InitIVRSearch+0x16e>
 801e8c6:	c803      	ldmia	r0, {r0, r1}
 801e8c8:	ae04      	add	r6, sp, #16
 801e8ca:	e886 0003 	stmia.w	r6, {r0, r1}
 801e8ce:	e796      	b.n	801e7fe <WM__InitIVRSearch+0x52>
 801e8d0:	f007 f81e 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e8d4:	4b1b      	ldr	r3, [pc, #108]	; (801e944 <WM__InitIVRSearch+0x198>)
 801e8d6:	681a      	ldr	r2, [r3, #0]
 801e8d8:	4297      	cmp	r7, r2
 801e8da:	d002      	beq.n	801e8e2 <WM__InitIVRSearch+0x136>
 801e8dc:	685b      	ldr	r3, [r3, #4]
 801e8de:	429f      	cmp	r7, r3
 801e8e0:	d1d2      	bne.n	801e888 <WM__InitIVRSearch+0xdc>
 801e8e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e8e6:	e885 0003 	stmia.w	r5, {r0, r1}
 801e8ea:	f7ff fe39 	bl	801e560 <WM__GetNextIVR>
 801e8ee:	e76d      	b.n	801e7cc <WM__InitIVRSearch+0x20>
 801e8f0:	f10d 0808 	add.w	r8, sp, #8
 801e8f4:	4640      	mov	r0, r8
 801e8f6:	f007 f80b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e8fa:	6838      	ldr	r0, [r7, #0]
 801e8fc:	f006 fff6 	bl	80258ec <GUI_ALLOC_LockH>
 801e900:	9002      	str	r0, [sp, #8]
 801e902:	4603      	mov	r3, r0
 801e904:	e792      	b.n	801e82c <WM__InitIVRSearch+0x80>
 801e906:	f007 f803 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e90a:	4b0e      	ldr	r3, [pc, #56]	; (801e944 <WM__InitIVRSearch+0x198>)
 801e90c:	681a      	ldr	r2, [r3, #0]
 801e90e:	4591      	cmp	r9, r2
 801e910:	d0a1      	beq.n	801e856 <WM__InitIVRSearch+0xaa>
 801e912:	685b      	ldr	r3, [r3, #4]
 801e914:	4599      	cmp	r9, r3
 801e916:	d1b7      	bne.n	801e888 <WM__InitIVRSearch+0xdc>
 801e918:	e79d      	b.n	801e856 <WM__InitIVRSearch+0xaa>
 801e91a:	696b      	ldr	r3, [r5, #20]
 801e91c:	a801      	add	r0, sp, #4
 801e91e:	3b01      	subs	r3, #1
 801e920:	616b      	str	r3, [r5, #20]
 801e922:	f006 fff5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e926:	4630      	mov	r0, r6
 801e928:	e750      	b.n	801e7cc <WM__InitIVRSearch+0x20>
 801e92a:	a801      	add	r0, sp, #4
 801e92c:	f006 fff0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e930:	4f03      	ldr	r7, [pc, #12]	; (801e940 <WM__InitIVRSearch+0x194>)
 801e932:	e789      	b.n	801e848 <WM__InitIVRSearch+0x9c>
 801e934:	20000280 	.word	0x20000280
 801e938:	2002b164 	.word	0x2002b164
 801e93c:	2002cb84 	.word	0x2002cb84
 801e940:	2002cb54 	.word	0x2002cb54
 801e944:	2002cb58 	.word	0x2002cb58

0801e948 <WM__Paint1>:
 801e948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e94c:	b089      	sub	sp, #36	; 0x24
 801e94e:	4605      	mov	r5, r0
 801e950:	f006 ffcc 	bl	80258ec <GUI_ALLOC_LockH>
 801e954:	f100 0208 	add.w	r2, r0, #8
 801e958:	4603      	mov	r3, r0
 801e95a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e95e:	ac02      	add	r4, sp, #8
 801e960:	691f      	ldr	r7, [r3, #16]
 801e962:	9301      	str	r3, [sp, #4]
 801e964:	e884 0003 	stmia.w	r4, {r0, r1}
 801e968:	a801      	add	r0, sp, #4
 801e96a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801e96c:	f006 ffd0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801e970:	b10f      	cbz	r7, 801e976 <WM__Paint1+0x2e>
 801e972:	07b3      	lsls	r3, r6, #30
 801e974:	d402      	bmi.n	801e97c <WM__Paint1+0x34>
 801e976:	b009      	add	sp, #36	; 0x24
 801e978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e97c:	4f1e      	ldr	r7, [pc, #120]	; (801e9f8 <WM__Paint1+0xb0>)
 801e97e:	4628      	mov	r0, r5
 801e980:	212e      	movs	r1, #46	; 0x2e
 801e982:	f7fd fd93 	bl	801c4ac <WM_SendMessageNoPara>
 801e986:	783b      	ldrb	r3, [r7, #0]
 801e988:	f416 5880 	ands.w	r8, r6, #4096	; 0x1000
 801e98c:	f103 0301 	add.w	r3, r3, #1
 801e990:	703b      	strb	r3, [r7, #0]
 801e992:	d118      	bne.n	801e9c6 <WM__Paint1+0x7e>
 801e994:	4620      	mov	r0, r4
 801e996:	f7ff ff09 	bl	801e7ac <WM__InitIVRSearch>
 801e99a:	b310      	cbz	r0, 801e9e2 <WM__Paint1+0x9a>
 801e99c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 801e9fc <WM__Paint1+0xb4>
 801e9a0:	260f      	movs	r6, #15
 801e9a2:	9505      	str	r5, [sp, #20]
 801e9a4:	9604      	str	r6, [sp, #16]
 801e9a6:	9407      	str	r4, [sp, #28]
 801e9a8:	f005 fec8 	bl	802473c <GL_SetDefault>
 801e9ac:	f8d9 3000 	ldr.w	r3, [r9]
 801e9b0:	4628      	mov	r0, r5
 801e9b2:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
 801e9b6:	a904      	add	r1, sp, #16
 801e9b8:	f7fc fa4e 	bl	801ae58 <WM__SendMessage>
 801e9bc:	f7ff fdd0 	bl	801e560 <WM__GetNextIVR>
 801e9c0:	2800      	cmp	r0, #0
 801e9c2:	d1ee      	bne.n	801e9a2 <WM__Paint1+0x5a>
 801e9c4:	e00d      	b.n	801e9e2 <WM__Paint1+0x9a>
 801e9c6:	230f      	movs	r3, #15
 801e9c8:	9304      	str	r3, [sp, #16]
 801e9ca:	9505      	str	r5, [sp, #20]
 801e9cc:	9407      	str	r4, [sp, #28]
 801e9ce:	f005 feb5 	bl	802473c <GL_SetDefault>
 801e9d2:	4b0a      	ldr	r3, [pc, #40]	; (801e9fc <WM__Paint1+0xb4>)
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	2200      	movs	r2, #0
 801e9d8:	645a      	str	r2, [r3, #68]	; 0x44
 801e9da:	4628      	mov	r0, r5
 801e9dc:	a904      	add	r1, sp, #16
 801e9de:	f7fc fa3b 	bl	801ae58 <WM__SendMessage>
 801e9e2:	783b      	ldrb	r3, [r7, #0]
 801e9e4:	4628      	mov	r0, r5
 801e9e6:	3b01      	subs	r3, #1
 801e9e8:	212f      	movs	r1, #47	; 0x2f
 801e9ea:	703b      	strb	r3, [r7, #0]
 801e9ec:	f7fd fd5e 	bl	801c4ac <WM_SendMessageNoPara>
 801e9f0:	b009      	add	sp, #36	; 0x24
 801e9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9f6:	bf00      	nop
 801e9f8:	2002cb84 	.word	0x2002cb84
 801e9fc:	20000280 	.word	0x20000280

0801ea00 <WM__DeleteSecure>:
 801ea00:	b508      	push	{r3, lr}
 801ea02:	f006 ff69 	bl	80258d8 <GUI_ALLOC_h2p>
 801ea06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ea08:	4a03      	ldr	r2, [pc, #12]	; (801ea18 <WM__DeleteSecure+0x18>)
 801ea0a:	2101      	movs	r1, #1
 801ea0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ea10:	6283      	str	r3, [r0, #40]	; 0x28
 801ea12:	6011      	str	r1, [r2, #0]
 801ea14:	bd08      	pop	{r3, pc}
 801ea16:	bf00      	nop
 801ea18:	2002b158 	.word	0x2002b158

0801ea1c <WM_Exec>:
 801ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea20:	b0ab      	sub	sp, #172	; 0xac
 801ea22:	f004 fbe3 	bl	80231ec <GUI_Lock>
 801ea26:	4b94      	ldr	r3, [pc, #592]	; (801ec78 <WM_Exec+0x25c>)
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	b103      	cbz	r3, 801ea2e <WM_Exec+0x12>
 801ea2c:	4798      	blx	r3
 801ea2e:	2500      	movs	r5, #0
 801ea30:	e000      	b.n	801ea34 <WM_Exec+0x18>
 801ea32:	2501      	movs	r5, #1
 801ea34:	f7ff f9c8 	bl	801ddc8 <_Exec1Input>
 801ea38:	2800      	cmp	r0, #0
 801ea3a:	d1fa      	bne.n	801ea32 <WM_Exec+0x16>
 801ea3c:	f8df b240 	ldr.w	fp, [pc, #576]	; 801ec80 <WM_Exec+0x264>
 801ea40:	f8db 3000 	ldr.w	r3, [fp]
 801ea44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801ea48:	b123      	cbz	r3, 801ea54 <WM_Exec+0x38>
 801ea4a:	4b8c      	ldr	r3, [pc, #560]	; (801ec7c <WM_Exec+0x260>)
 801ea4c:	881b      	ldrh	r3, [r3, #0]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	f040 80f5 	bne.w	801ec3e <WM_Exec+0x222>
 801ea54:	9305      	str	r3, [sp, #20]
 801ea56:	f004 fbbf 	bl	80231d8 <GUI_Unlock>
 801ea5a:	f8df a238 	ldr.w	sl, [pc, #568]	; 801ec94 <WM_Exec+0x278>
 801ea5e:	f8db 3000 	ldr.w	r3, [fp]
 801ea62:	4c87      	ldr	r4, [pc, #540]	; (801ec80 <WM_Exec+0x264>)
 801ea64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801ea68:	b123      	cbz	r3, 801ea74 <WM_Exec+0x58>
 801ea6a:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801ec7c <WM_Exec+0x260>
 801ea6e:	f8b9 3000 	ldrh.w	r3, [r9]
 801ea72:	b99b      	cbnz	r3, 801ea9c <WM_Exec+0x80>
 801ea74:	f004 fbba 	bl	80231ec <GUI_Lock>
 801ea78:	9a05      	ldr	r2, [sp, #20]
 801ea7a:	b14a      	cbz	r2, 801ea90 <WM_Exec+0x74>
 801ea7c:	4b81      	ldr	r3, [pc, #516]	; (801ec84 <WM_Exec+0x268>)
 801ea7e:	6818      	ldr	r0, [r3, #0]
 801ea80:	2800      	cmp	r0, #0
 801ea82:	f000 80e4 	beq.w	801ec4e <WM_Exec+0x232>
 801ea86:	6843      	ldr	r3, [r0, #4]
 801ea88:	4798      	blx	r3
 801ea8a:	4b7f      	ldr	r3, [pc, #508]	; (801ec88 <WM_Exec+0x26c>)
 801ea8c:	2200      	movs	r2, #0
 801ea8e:	601a      	str	r2, [r3, #0]
 801ea90:	f004 fba2 	bl	80231d8 <GUI_Unlock>
 801ea94:	4628      	mov	r0, r5
 801ea96:	b02b      	add	sp, #172	; 0xac
 801ea98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea9c:	f004 fba6 	bl	80231ec <GUI_Lock>
 801eaa0:	4a7a      	ldr	r2, [pc, #488]	; (801ec8c <WM_Exec+0x270>)
 801eaa2:	6816      	ldr	r6, [r2, #0]
 801eaa4:	b9de      	cbnz	r6, 801eade <WM_Exec+0xc2>
 801eaa6:	aa0e      	add	r2, sp, #56	; 0x38
 801eaa8:	4b79      	ldr	r3, [pc, #484]	; (801ec90 <WM_Exec+0x274>)
 801eaaa:	9204      	str	r2, [sp, #16]
 801eaac:	4610      	mov	r0, r2
 801eaae:	681e      	ldr	r6, [r3, #0]
 801eab0:	f005 fe0a 	bl	80246c8 <GUI_SaveContext_W>
 801eab4:	6823      	ldr	r3, [r4, #0]
 801eab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eaba:	9206      	str	r2, [sp, #24]
 801eabc:	9307      	str	r3, [sp, #28]
 801eabe:	b9c6      	cbnz	r6, 801eaf2 <WM_Exec+0xd6>
 801eac0:	4b72      	ldr	r3, [pc, #456]	; (801ec8c <WM_Exec+0x270>)
 801eac2:	9806      	ldr	r0, [sp, #24]
 801eac4:	601e      	str	r6, [r3, #0]
 801eac6:	f005 fe2d 	bl	8024724 <GUI_SetColor>
 801eaca:	9807      	ldr	r0, [sp, #28]
 801eacc:	f005 fe1e 	bl	802470c <GUI_SetBkColor>
 801ead0:	9804      	ldr	r0, [sp, #16]
 801ead2:	f005 fe03 	bl	80246dc <GUI_RestoreContext>
 801ead6:	2501      	movs	r5, #1
 801ead8:	f004 fb7e 	bl	80231d8 <GUI_Unlock>
 801eadc:	e7bf      	b.n	801ea5e <WM_Exec+0x42>
 801eade:	ab0e      	add	r3, sp, #56	; 0x38
 801eae0:	4618      	mov	r0, r3
 801eae2:	9304      	str	r3, [sp, #16]
 801eae4:	f005 fdf0 	bl	80246c8 <GUI_SaveContext_W>
 801eae8:	6823      	ldr	r3, [r4, #0]
 801eaea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eaec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eaee:	9206      	str	r2, [sp, #24]
 801eaf0:	9307      	str	r3, [sp, #28]
 801eaf2:	f04f 0801 	mov.w	r8, #1
 801eaf6:	ad0c      	add	r5, sp, #48	; 0x30
 801eaf8:	4630      	mov	r0, r6
 801eafa:	9609      	str	r6, [sp, #36]	; 0x24
 801eafc:	f006 fef6 	bl	80258ec <GUI_ALLOC_LockH>
 801eb00:	f100 0208 	add.w	r2, r0, #8
 801eb04:	4603      	mov	r3, r0
 801eb06:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eb0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801eb0c:	9202      	str	r2, [sp, #8]
 801eb0e:	e885 0003 	stmia.w	r5, {r0, r1}
 801eb12:	699a      	ldr	r2, [r3, #24]
 801eb14:	930a      	str	r3, [sp, #40]	; 0x28
 801eb16:	a80a      	add	r0, sp, #40	; 0x28
 801eb18:	9203      	str	r2, [sp, #12]
 801eb1a:	691c      	ldr	r4, [r3, #16]
 801eb1c:	f006 fef8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801eb20:	9a02      	ldr	r2, [sp, #8]
 801eb22:	f244 0320 	movw	r3, #16416	; 0x4020
 801eb26:	4013      	ands	r3, r2
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d032      	beq.n	801eb92 <WM_Exec+0x176>
 801eb2c:	b1c4      	cbz	r4, 801eb60 <WM_Exec+0x144>
 801eb2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb30:	e009      	b.n	801eb46 <WM_Exec+0x12a>
 801eb32:	f003 fb7b 	bl	802222c <GUI__IntersectRect>
 801eb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb38:	699f      	ldr	r7, [r3, #24]
 801eb3a:	a80b      	add	r0, sp, #44	; 0x2c
 801eb3c:	2f00      	cmp	r7, #0
 801eb3e:	d032      	beq.n	801eba6 <WM_Exec+0x18a>
 801eb40:	f006 fee6 	bl	8025910 <GUI_ALLOC_UnlockH>
 801eb44:	463c      	mov	r4, r7
 801eb46:	4620      	mov	r0, r4
 801eb48:	f006 fed0 	bl	80258ec <GUI_ALLOC_LockH>
 801eb4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801eb4e:	900b      	str	r0, [sp, #44]	; 0x2c
 801eb50:	079f      	lsls	r7, r3, #30
 801eb52:	4601      	mov	r1, r0
 801eb54:	4628      	mov	r0, r5
 801eb56:	d4ec      	bmi.n	801eb32 <WM_Exec+0x116>
 801eb58:	a80b      	add	r0, sp, #44	; 0x2c
 801eb5a:	f006 fed9 	bl	8025910 <GUI_ALLOC_UnlockH>
 801eb5e:	2400      	movs	r4, #0
 801eb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb62:	f006 fec3 	bl	80258ec <GUI_ALLOC_LockH>
 801eb66:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801eb68:	900a      	str	r0, [sp, #40]	; 0x28
 801eb6a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801eb6e:	f023 0320 	bic.w	r3, r3, #32
 801eb72:	0492      	lsls	r2, r2, #18
 801eb74:	bf48      	it	mi
 801eb76:	f043 0304 	orrmi.w	r3, r3, #4
 801eb7a:	6283      	str	r3, [r0, #40]	; 0x28
 801eb7c:	a80a      	add	r0, sp, #40	; 0x28
 801eb7e:	f006 fec7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801eb82:	f8b9 3000 	ldrh.w	r3, [r9]
 801eb86:	3b01      	subs	r3, #1
 801eb88:	f8a9 3000 	strh.w	r3, [r9]
 801eb8c:	b10c      	cbz	r4, 801eb92 <WM_Exec+0x176>
 801eb8e:	f108 38ff 	add.w	r8, r8, #4294967295
 801eb92:	4630      	mov	r0, r6
 801eb94:	f006 fea0 	bl	80258d8 <GUI_ALLOC_h2p>
 801eb98:	6946      	ldr	r6, [r0, #20]
 801eb9a:	2e00      	cmp	r6, #0
 801eb9c:	d090      	beq.n	801eac0 <WM_Exec+0xa4>
 801eb9e:	f1b8 0f00 	cmp.w	r8, #0
 801eba2:	d1a9      	bne.n	801eaf8 <WM_Exec+0xdc>
 801eba4:	e78c      	b.n	801eac0 <WM_Exec+0xa4>
 801eba6:	f006 feb3 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ebaa:	f8da 3000 	ldr.w	r3, [sl]
 801ebae:	429c      	cmp	r4, r3
 801ebb0:	d003      	beq.n	801ebba <WM_Exec+0x19e>
 801ebb2:	4a38      	ldr	r2, [pc, #224]	; (801ec94 <WM_Exec+0x278>)
 801ebb4:	6853      	ldr	r3, [r2, #4]
 801ebb6:	429c      	cmp	r4, r3
 801ebb8:	d1d1      	bne.n	801eb5e <WM_Exec+0x142>
 801ebba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ebbc:	f004 fb16 	bl	80231ec <GUI_Lock>
 801ebc0:	f8db 3000 	ldr.w	r3, [fp]
 801ebc4:	b90f      	cbnz	r7, 801ebca <WM_Exec+0x1ae>
 801ebc6:	4a32      	ldr	r2, [pc, #200]	; (801ec90 <WM_Exec+0x274>)
 801ebc8:	6817      	ldr	r7, [r2, #0]
 801ebca:	649f      	str	r7, [r3, #72]	; 0x48
 801ebcc:	463c      	mov	r4, r7
 801ebce:	e000      	b.n	801ebd2 <WM_Exec+0x1b6>
 801ebd0:	461c      	mov	r4, r3
 801ebd2:	4620      	mov	r0, r4
 801ebd4:	f006 fe80 	bl	80258d8 <GUI_ALLOC_h2p>
 801ebd8:	6983      	ldr	r3, [r0, #24]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d1f8      	bne.n	801ebd0 <WM_Exec+0x1b4>
 801ebde:	f8da 1000 	ldr.w	r1, [sl]
 801ebe2:	428c      	cmp	r4, r1
 801ebe4:	d03b      	beq.n	801ec5e <WM_Exec+0x242>
 801ebe6:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ebea:	429c      	cmp	r4, r3
 801ebec:	d03b      	beq.n	801ec66 <WM_Exec+0x24a>
 801ebee:	f003 f99f 	bl	8021f30 <LCD_SetClipRectMax>
 801ebf2:	4638      	mov	r0, r7
 801ebf4:	f006 fe70 	bl	80258d8 <GUI_ALLOC_h2p>
 801ebf8:	f8db 3000 	ldr.w	r3, [fp]
 801ebfc:	f9b0 1000 	ldrsh.w	r1, [r0]
 801ec00:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ec04:	651a      	str	r2, [r3, #80]	; 0x50
 801ec06:	64d9      	str	r1, [r3, #76]	; 0x4c
 801ec08:	f004 fae6 	bl	80231d8 <GUI_Unlock>
 801ec0c:	9b02      	ldr	r3, [sp, #8]
 801ec0e:	0759      	lsls	r1, r3, #29
 801ec10:	d510      	bpl.n	801ec34 <WM_Exec+0x218>
 801ec12:	9a03      	ldr	r2, [sp, #12]
 801ec14:	b162      	cbz	r2, 801ec30 <WM_Exec+0x214>
 801ec16:	f003 0301 	and.w	r3, r3, #1
 801ec1a:	f083 0301 	eor.w	r3, r3, #1
 801ec1e:	9300      	str	r3, [sp, #0]
 801ec20:	4628      	mov	r0, r5
 801ec22:	491d      	ldr	r1, [pc, #116]	; (801ec98 <WM_Exec+0x27c>)
 801ec24:	aa09      	add	r2, sp, #36	; 0x24
 801ec26:	2300      	movs	r3, #0
 801ec28:	f000 fb1a 	bl	801f260 <GUI_MEMDEV_Draw>
 801ec2c:	2400      	movs	r4, #0
 801ec2e:	e797      	b.n	801eb60 <WM_Exec+0x144>
 801ec30:	2301      	movs	r3, #1
 801ec32:	e7f4      	b.n	801ec1e <WM_Exec+0x202>
 801ec34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec36:	f7fe f9ed 	bl	801d014 <WM__PaintWinAndOverlays>
 801ec3a:	2401      	movs	r4, #1
 801ec3c:	e790      	b.n	801eb60 <WM_Exec+0x144>
 801ec3e:	4b11      	ldr	r3, [pc, #68]	; (801ec84 <WM_Exec+0x268>)
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	b193      	cbz	r3, 801ec6a <WM_Exec+0x24e>
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	4798      	blx	r3
 801ec48:	2201      	movs	r2, #1
 801ec4a:	9205      	str	r2, [sp, #20]
 801ec4c:	e703      	b.n	801ea56 <WM_Exec+0x3a>
 801ec4e:	f003 fccb 	bl	80225e8 <GUI__ManageCache>
 801ec52:	f004 fac1 	bl	80231d8 <GUI_Unlock>
 801ec56:	4628      	mov	r0, r5
 801ec58:	b02b      	add	sp, #172	; 0xac
 801ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	f004 fbe4 	bl	802342c <GUI_SelectLayer>
 801ec64:	e7c3      	b.n	801ebee <WM_Exec+0x1d2>
 801ec66:	2001      	movs	r0, #1
 801ec68:	e7fa      	b.n	801ec60 <WM_Exec+0x244>
 801ec6a:	2001      	movs	r0, #1
 801ec6c:	f003 fcbc 	bl	80225e8 <GUI__ManageCache>
 801ec70:	2301      	movs	r3, #1
 801ec72:	9305      	str	r3, [sp, #20]
 801ec74:	e6ef      	b.n	801ea56 <WM_Exec+0x3a>
 801ec76:	bf00      	nop
 801ec78:	2002cb64 	.word	0x2002cb64
 801ec7c:	2002cb70 	.word	0x2002cb70
 801ec80:	20000280 	.word	0x20000280
 801ec84:	2002cb98 	.word	0x2002cb98
 801ec88:	2002cb80 	.word	0x2002cb80
 801ec8c:	2002b17c 	.word	0x2002b17c
 801ec90:	2002cb74 	.word	0x2002cb74
 801ec94:	2002cb58 	.word	0x2002cb58
 801ec98:	0801d0b5 	.word	0x0801d0b5

0801ec9c <WM_Activate>:
 801ec9c:	4b02      	ldr	r3, [pc, #8]	; (801eca8 <WM_Activate+0xc>)
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	2201      	movs	r2, #1
 801eca2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801eca6:	4770      	bx	lr
 801eca8:	20000280 	.word	0x20000280

0801ecac <WM_Deactivate>:
 801ecac:	b508      	push	{r3, lr}
 801ecae:	4b06      	ldr	r3, [pc, #24]	; (801ecc8 <WM_Deactivate+0x1c>)
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801ecb8:	f004 fa98 	bl	80231ec <GUI_Lock>
 801ecbc:	f003 f938 	bl	8021f30 <LCD_SetClipRectMax>
 801ecc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ecc4:	f004 ba88 	b.w	80231d8 <GUI_Unlock>
 801ecc8:	20000280 	.word	0x20000280

0801eccc <WM_DefaultProc>:
 801eccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecd0:	e890 0028 	ldmia.w	r0, {r3, r5}
 801ecd4:	3b0e      	subs	r3, #14
 801ecd6:	b084      	sub	sp, #16
 801ecd8:	4604      	mov	r4, r0
 801ecda:	68c1      	ldr	r1, [r0, #12]
 801ecdc:	2b1a      	cmp	r3, #26
 801ecde:	d812      	bhi.n	801ed06 <WM_DefaultProc+0x3a>
 801ece0:	e8df f003 	tbb	[pc, r3]
 801ece4:	11111147 	.word	0x11111147
 801ece8:	110e1111 	.word	0x110e1111
 801ecec:	11114e11 	.word	0x11114e11
 801ecf0:	11111111 	.word	0x11111111
 801ecf4:	11111111 	.word	0x11111111
 801ecf8:	11111152 	.word	0x11111152
 801ecfc:	1111      	.short	0x1111
 801ecfe:	16          	.byte	0x16
 801ecff:	00          	.byte	0x00
 801ed00:	4628      	mov	r0, r5
 801ed02:	f7fc f97d 	bl	801b000 <WM__GetClientRectEx>
 801ed06:	2300      	movs	r3, #0
 801ed08:	60e3      	str	r3, [r4, #12]
 801ed0a:	b004      	add	sp, #16
 801ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed10:	2d00      	cmp	r5, #0
 801ed12:	d0fa      	beq.n	801ed0a <WM_DefaultProc+0x3e>
 801ed14:	f004 fa6a 	bl	80231ec <GUI_Lock>
 801ed18:	4628      	mov	r0, r5
 801ed1a:	f006 fde7 	bl	80258ec <GUI_ALLOC_LockH>
 801ed1e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801ed22:	9000      	str	r0, [sp, #0]
 801ed24:	f018 0f02 	tst.w	r8, #2
 801ed28:	d01d      	beq.n	801ed66 <WM_DefaultProc+0x9a>
 801ed2a:	c803      	ldmia	r0, {r0, r1}
 801ed2c:	af02      	add	r7, sp, #8
 801ed2e:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801ed32:	e887 0003 	stmia.w	r7, {r0, r1}
 801ed36:	d142      	bne.n	801edbe <WM_DefaultProc+0xf2>
 801ed38:	462e      	mov	r6, r5
 801ed3a:	e008      	b.n	801ed4e <WM_DefaultProc+0x82>
 801ed3c:	f003 fa76 	bl	802222c <GUI__IntersectRect>
 801ed40:	9b01      	ldr	r3, [sp, #4]
 801ed42:	699c      	ldr	r4, [r3, #24]
 801ed44:	a801      	add	r0, sp, #4
 801ed46:	b32c      	cbz	r4, 801ed94 <WM_DefaultProc+0xc8>
 801ed48:	f006 fde2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ed4c:	4626      	mov	r6, r4
 801ed4e:	4630      	mov	r0, r6
 801ed50:	f006 fdcc 	bl	80258ec <GUI_ALLOC_LockH>
 801ed54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801ed56:	9001      	str	r0, [sp, #4]
 801ed58:	0793      	lsls	r3, r2, #30
 801ed5a:	4601      	mov	r1, r0
 801ed5c:	4638      	mov	r0, r7
 801ed5e:	d4ed      	bmi.n	801ed3c <WM_DefaultProc+0x70>
 801ed60:	a801      	add	r0, sp, #4
 801ed62:	f006 fdd5 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ed66:	4668      	mov	r0, sp
 801ed68:	f006 fdd2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ed6c:	f004 fa34 	bl	80231d8 <GUI_Unlock>
 801ed70:	e7cb      	b.n	801ed0a <WM_DefaultProc+0x3e>
 801ed72:	4628      	mov	r0, r5
 801ed74:	4621      	mov	r1, r4
 801ed76:	f7fd fba7 	bl	801c4c8 <WM_SendToParent>
 801ed7a:	b004      	add	sp, #16
 801ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed80:	60c5      	str	r5, [r0, #12]
 801ed82:	b004      	add	sp, #16
 801ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed88:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801ed8c:	60c3      	str	r3, [r0, #12]
 801ed8e:	b004      	add	sp, #16
 801ed90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed94:	f006 fdbc 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ed98:	4b0f      	ldr	r3, [pc, #60]	; (801edd8 <WM_DefaultProc+0x10c>)
 801ed9a:	681a      	ldr	r2, [r3, #0]
 801ed9c:	4296      	cmp	r6, r2
 801ed9e:	d002      	beq.n	801eda6 <WM_DefaultProc+0xda>
 801eda0:	685b      	ldr	r3, [r3, #4]
 801eda2:	429e      	cmp	r6, r3
 801eda4:	d1df      	bne.n	801ed66 <WM_DefaultProc+0x9a>
 801eda6:	f640 0301 	movw	r3, #2049	; 0x801
 801edaa:	ea08 0303 	and.w	r3, r8, r3
 801edae:	2b01      	cmp	r3, #1
 801edb0:	d009      	beq.n	801edc6 <WM_DefaultProc+0xfa>
 801edb2:	4628      	mov	r0, r5
 801edb4:	4639      	mov	r1, r7
 801edb6:	2220      	movs	r2, #32
 801edb8:	f7fe f9b2 	bl	801d120 <_Invalidate1Abs>
 801edbc:	e7d3      	b.n	801ed66 <WM_DefaultProc+0x9a>
 801edbe:	4628      	mov	r0, r5
 801edc0:	f7fe fb56 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801edc4:	e7b8      	b.n	801ed38 <WM_DefaultProc+0x6c>
 801edc6:	9b00      	ldr	r3, [sp, #0]
 801edc8:	4638      	mov	r0, r7
 801edca:	6999      	ldr	r1, [r3, #24]
 801edcc:	6a1a      	ldr	r2, [r3, #32]
 801edce:	2320      	movs	r3, #32
 801edd0:	f7fe fe6e 	bl	801dab0 <WM__InvalidateRect>
 801edd4:	e7c7      	b.n	801ed66 <WM_DefaultProc+0x9a>
 801edd6:	bf00      	nop
 801edd8:	2002cb58 	.word	0x2002cb58

0801eddc <WM_Init>:
 801eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede0:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 801efc8 <WM_Init+0x1ec>
 801ede4:	f899 4000 	ldrb.w	r4, [r9]
 801ede8:	b08b      	sub	sp, #44	; 0x2c
 801edea:	2c00      	cmp	r4, #0
 801edec:	d174      	bne.n	801eed8 <WM_Init+0xfc>
 801edee:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 801efcc <WM_Init+0x1f0>
 801edf2:	4866      	ldr	r0, [pc, #408]	; (801ef8c <WM_Init+0x1b0>)
 801edf4:	f8d8 3000 	ldr.w	r3, [r8]
 801edf8:	4965      	ldr	r1, [pc, #404]	; (801ef90 <WM_Init+0x1b4>)
 801edfa:	4a66      	ldr	r2, [pc, #408]	; (801ef94 <WM_Init+0x1b8>)
 801edfc:	645c      	str	r4, [r3, #68]	; 0x44
 801edfe:	4b66      	ldr	r3, [pc, #408]	; (801ef98 <WM_Init+0x1bc>)
 801ee00:	4e66      	ldr	r6, [pc, #408]	; (801ef9c <WM_Init+0x1c0>)
 801ee02:	601c      	str	r4, [r3, #0]
 801ee04:	6004      	str	r4, [r0, #0]
 801ee06:	800c      	strh	r4, [r1, #0]
 801ee08:	8014      	strh	r4, [r2, #0]
 801ee0a:	4620      	mov	r0, r4
 801ee0c:	f004 ff1c 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 801ee10:	b1c8      	cbz	r0, 801ee46 <WM_Init+0x6a>
 801ee12:	2300      	movs	r3, #0
 801ee14:	f643 72ff 	movw	r2, #16383	; 0x3fff
 801ee18:	f04f 37ff 	mov.w	r7, #4294967295
 801ee1c:	4960      	ldr	r1, [pc, #384]	; (801efa0 <WM_Init+0x1c4>)
 801ee1e:	9102      	str	r1, [sp, #8]
 801ee20:	2502      	movs	r5, #2
 801ee22:	4618      	mov	r0, r3
 801ee24:	9303      	str	r3, [sp, #12]
 801ee26:	4619      	mov	r1, r3
 801ee28:	9700      	str	r7, [sp, #0]
 801ee2a:	4613      	mov	r3, r2
 801ee2c:	9501      	str	r5, [sp, #4]
 801ee2e:	f7ff fa43 	bl	801e2b8 <WM_CreateWindowAsChild>
 801ee32:	4a5c      	ldr	r2, [pc, #368]	; (801efa4 <WM_Init+0x1c8>)
 801ee34:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 801ee38:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801ee3c:	4607      	mov	r7, r0
 801ee3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ee42:	2800      	cmp	r0, #0
 801ee44:	d14b      	bne.n	801eede <WM_Init+0x102>
 801ee46:	3401      	adds	r4, #1
 801ee48:	2c02      	cmp	r4, #2
 801ee4a:	d1de      	bne.n	801ee0a <WM_Init+0x2e>
 801ee4c:	4856      	ldr	r0, [pc, #344]	; (801efa8 <WM_Init+0x1cc>)
 801ee4e:	f7fc f8cf 	bl	801aff0 <WM__AddCriticalHandle>
 801ee52:	4856      	ldr	r0, [pc, #344]	; (801efac <WM_Init+0x1d0>)
 801ee54:	f7fc f8cc 	bl	801aff0 <WM__AddCriticalHandle>
 801ee58:	4855      	ldr	r0, [pc, #340]	; (801efb0 <WM_Init+0x1d4>)
 801ee5a:	f7fc f8c9 	bl	801aff0 <WM__AddCriticalHandle>
 801ee5e:	4855      	ldr	r0, [pc, #340]	; (801efb4 <WM_Init+0x1d8>)
 801ee60:	f7fc f8c6 	bl	801aff0 <WM__AddCriticalHandle>
 801ee64:	4854      	ldr	r0, [pc, #336]	; (801efb8 <WM_Init+0x1dc>)
 801ee66:	f7fc f8c3 	bl	801aff0 <WM__AddCriticalHandle>
 801ee6a:	4854      	ldr	r0, [pc, #336]	; (801efbc <WM_Init+0x1e0>)
 801ee6c:	f7fc f8c0 	bl	801aff0 <WM__AddCriticalHandle>
 801ee70:	6835      	ldr	r5, [r6, #0]
 801ee72:	f004 f9bb 	bl	80231ec <GUI_Lock>
 801ee76:	f8d8 3000 	ldr.w	r3, [r8]
 801ee7a:	b90d      	cbnz	r5, 801ee80 <WM_Init+0xa4>
 801ee7c:	4a46      	ldr	r2, [pc, #280]	; (801ef98 <WM_Init+0x1bc>)
 801ee7e:	6815      	ldr	r5, [r2, #0]
 801ee80:	649d      	str	r5, [r3, #72]	; 0x48
 801ee82:	462c      	mov	r4, r5
 801ee84:	e000      	b.n	801ee88 <WM_Init+0xac>
 801ee86:	461c      	mov	r4, r3
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f006 fd25 	bl	80258d8 <GUI_ALLOC_h2p>
 801ee8e:	6983      	ldr	r3, [r0, #24]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d1f8      	bne.n	801ee86 <WM_Init+0xaa>
 801ee94:	6832      	ldr	r2, [r6, #0]
 801ee96:	4941      	ldr	r1, [pc, #260]	; (801ef9c <WM_Init+0x1c0>)
 801ee98:	4294      	cmp	r4, r2
 801ee9a:	d071      	beq.n	801ef80 <WM_Init+0x1a4>
 801ee9c:	684b      	ldr	r3, [r1, #4]
 801ee9e:	429c      	cmp	r4, r3
 801eea0:	d072      	beq.n	801ef88 <WM_Init+0x1ac>
 801eea2:	f003 f845 	bl	8021f30 <LCD_SetClipRectMax>
 801eea6:	4628      	mov	r0, r5
 801eea8:	f006 fd16 	bl	80258d8 <GUI_ALLOC_h2p>
 801eeac:	f8d8 3000 	ldr.w	r3, [r8]
 801eeb0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801eeb4:	f9b0 1000 	ldrsh.w	r1, [r0]
 801eeb8:	64d9      	str	r1, [r3, #76]	; 0x4c
 801eeba:	651a      	str	r2, [r3, #80]	; 0x50
 801eebc:	f004 f98c 	bl	80231d8 <GUI_Unlock>
 801eec0:	483f      	ldr	r0, [pc, #252]	; (801efc0 <WM_Init+0x1e4>)
 801eec2:	4b40      	ldr	r3, [pc, #256]	; (801efc4 <WM_Init+0x1e8>)
 801eec4:	f8d8 2000 	ldr.w	r2, [r8]
 801eec8:	6003      	str	r3, [r0, #0]
 801eeca:	2301      	movs	r3, #1
 801eecc:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 801eed0:	f889 3000 	strb.w	r3, [r9]
 801eed4:	f005 f900 	bl	80240d8 <GUI__RegisterExit>
 801eed8:	b00b      	add	sp, #44	; 0x2c
 801eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eede:	f004 f985 	bl	80231ec <GUI_Lock>
 801eee2:	4638      	mov	r0, r7
 801eee4:	f006 fd02 	bl	80258ec <GUI_ALLOC_LockH>
 801eee8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801eeea:	9006      	str	r0, [sp, #24]
 801eeec:	0799      	lsls	r1, r3, #30
 801eeee:	9305      	str	r3, [sp, #20]
 801eef0:	d51e      	bpl.n	801ef30 <WM_Init+0x154>
 801eef2:	c803      	ldmia	r0, {r0, r1}
 801eef4:	f10d 0a20 	add.w	sl, sp, #32
 801eef8:	03da      	lsls	r2, r3, #15
 801eefa:	e88a 0003 	stmia.w	sl, {r0, r1}
 801eefe:	d43b      	bmi.n	801ef78 <WM_Init+0x19c>
 801ef00:	463d      	mov	r5, r7
 801ef02:	46bb      	mov	fp, r7
 801ef04:	e008      	b.n	801ef18 <WM_Init+0x13c>
 801ef06:	f003 f991 	bl	802222c <GUI__IntersectRect>
 801ef0a:	9b07      	ldr	r3, [sp, #28]
 801ef0c:	699f      	ldr	r7, [r3, #24]
 801ef0e:	a807      	add	r0, sp, #28
 801ef10:	b1a7      	cbz	r7, 801ef3c <WM_Init+0x160>
 801ef12:	f006 fcfd 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ef16:	463d      	mov	r5, r7
 801ef18:	4628      	mov	r0, r5
 801ef1a:	f006 fce7 	bl	80258ec <GUI_ALLOC_LockH>
 801ef1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ef20:	9007      	str	r0, [sp, #28]
 801ef22:	079b      	lsls	r3, r3, #30
 801ef24:	4601      	mov	r1, r0
 801ef26:	4650      	mov	r0, sl
 801ef28:	d4ed      	bmi.n	801ef06 <WM_Init+0x12a>
 801ef2a:	a807      	add	r0, sp, #28
 801ef2c:	f006 fcf0 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ef30:	a806      	add	r0, sp, #24
 801ef32:	f006 fced 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ef36:	f004 f94f 	bl	80231d8 <GUI_Unlock>
 801ef3a:	e784      	b.n	801ee46 <WM_Init+0x6a>
 801ef3c:	f006 fce8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ef40:	6833      	ldr	r3, [r6, #0]
 801ef42:	429d      	cmp	r5, r3
 801ef44:	465f      	mov	r7, fp
 801ef46:	d003      	beq.n	801ef50 <WM_Init+0x174>
 801ef48:	4914      	ldr	r1, [pc, #80]	; (801ef9c <WM_Init+0x1c0>)
 801ef4a:	684b      	ldr	r3, [r1, #4]
 801ef4c:	429d      	cmp	r5, r3
 801ef4e:	d1ef      	bne.n	801ef30 <WM_Init+0x154>
 801ef50:	9a05      	ldr	r2, [sp, #20]
 801ef52:	f640 0301 	movw	r3, #2049	; 0x801
 801ef56:	4013      	ands	r3, r2
 801ef58:	2b01      	cmp	r3, #1
 801ef5a:	d005      	beq.n	801ef68 <WM_Init+0x18c>
 801ef5c:	4638      	mov	r0, r7
 801ef5e:	4651      	mov	r1, sl
 801ef60:	2220      	movs	r2, #32
 801ef62:	f7fe f8dd 	bl	801d120 <_Invalidate1Abs>
 801ef66:	e7e3      	b.n	801ef30 <WM_Init+0x154>
 801ef68:	9b06      	ldr	r3, [sp, #24]
 801ef6a:	4650      	mov	r0, sl
 801ef6c:	6999      	ldr	r1, [r3, #24]
 801ef6e:	6a1a      	ldr	r2, [r3, #32]
 801ef70:	2320      	movs	r3, #32
 801ef72:	f7fe fd9d 	bl	801dab0 <WM__InvalidateRect>
 801ef76:	e7db      	b.n	801ef30 <WM_Init+0x154>
 801ef78:	4638      	mov	r0, r7
 801ef7a:	f7fe fa79 	bl	801d470 <WM__InvalidateDrawAndDescs>
 801ef7e:	e7bf      	b.n	801ef00 <WM_Init+0x124>
 801ef80:	4618      	mov	r0, r3
 801ef82:	f004 fa53 	bl	802342c <GUI_SelectLayer>
 801ef86:	e78c      	b.n	801eea2 <WM_Init+0xc6>
 801ef88:	2001      	movs	r0, #1
 801ef8a:	e7fa      	b.n	801ef82 <WM_Init+0x1a6>
 801ef8c:	2002b17c 	.word	0x2002b17c
 801ef90:	2002cb70 	.word	0x2002cb70
 801ef94:	2002cb50 	.word	0x2002cb50
 801ef98:	2002cb74 	.word	0x2002cb74
 801ef9c:	2002cb58 	.word	0x2002cb58
 801efa0:	0801e151 	.word	0x0801e151
 801efa4:	2002cb8c 	.word	0x2002cb8c
 801efa8:	2002cd14 	.word	0x2002cd14
 801efac:	2002cd04 	.word	0x2002cd04
 801efb0:	2002ccf4 	.word	0x2002ccf4
 801efb4:	2002cd1c 	.word	0x2002cd1c
 801efb8:	2002cd0c 	.word	0x2002cd0c
 801efbc:	2002ccfc 	.word	0x2002ccfc
 801efc0:	2002b15c 	.word	0x2002b15c
 801efc4:	0801caa5 	.word	0x0801caa5
 801efc8:	2002b180 	.word	0x2002b180
 801efcc:	20000280 	.word	0x20000280

0801efd0 <GUI_MEMDEV_Paint1Static>:
 801efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	f8df b198 	ldr.w	fp, [pc, #408]	; 801f170 <GUI_MEMDEV_Paint1Static+0x1a0>
 801efd8:	b089      	sub	sp, #36	; 0x24
 801efda:	4604      	mov	r4, r0
 801efdc:	2505      	movs	r5, #5
 801efde:	4620      	mov	r0, r4
 801efe0:	f006 fc84 	bl	80258ec <GUI_ALLOC_LockH>
 801efe4:	4603      	mov	r3, r0
 801efe6:	a807      	add	r0, sp, #28
 801efe8:	881f      	ldrh	r7, [r3, #0]
 801efea:	889e      	ldrh	r6, [r3, #4]
 801efec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801eff0:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 801eff4:	9307      	str	r3, [sp, #28]
 801eff6:	b23f      	sxth	r7, r7
 801eff8:	b236      	sxth	r6, r6
 801effa:	1bf6      	subs	r6, r6, r7
 801effc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801f000:	fa0f f989 	sxth.w	r9, r9
 801f004:	f006 fc84 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f008:	3601      	adds	r6, #1
 801f00a:	fa0f fc8a 	sxth.w	ip, sl
 801f00e:	ebc9 0c0c 	rsb	ip, r9, ip
 801f012:	2e00      	cmp	r6, #0
 801f014:	f10c 0a01 	add.w	sl, ip, #1
 801f018:	dd57      	ble.n	801f0ca <GUI_MEMDEV_Paint1Static+0xfa>
 801f01a:	f1ba 0f00 	cmp.w	sl, #0
 801f01e:	dd54      	ble.n	801f0ca <GUI_MEMDEV_Paint1Static+0xfa>
 801f020:	f1b8 0f00 	cmp.w	r8, #0
 801f024:	d156      	bne.n	801f0d4 <GUI_MEMDEV_Paint1Static+0x104>
 801f026:	f7fc fe27 	bl	801bc78 <WM_GetDesktopWindow>
 801f02a:	4284      	cmp	r4, r0
 801f02c:	f000 8082 	beq.w	801f134 <GUI_MEMDEV_Paint1Static+0x164>
 801f030:	4a4b      	ldr	r2, [pc, #300]	; (801f160 <GUI_MEMDEV_Paint1Static+0x190>)
 801f032:	4b4c      	ldr	r3, [pc, #304]	; (801f164 <GUI_MEMDEV_Paint1Static+0x194>)
 801f034:	9201      	str	r2, [sp, #4]
 801f036:	f04f 0801 	mov.w	r8, #1
 801f03a:	9302      	str	r3, [sp, #8]
 801f03c:	4638      	mov	r0, r7
 801f03e:	4649      	mov	r1, r9
 801f040:	4632      	mov	r2, r6
 801f042:	4653      	mov	r3, sl
 801f044:	f8cd 8000 	str.w	r8, [sp]
 801f048:	f001 f872 	bl	8020130 <GUI_MEMDEV__CreateFixed>
 801f04c:	4607      	mov	r7, r0
 801f04e:	4620      	mov	r0, r4
 801f050:	f006 fc4c 	bl	80258ec <GUI_ALLOC_LockH>
 801f054:	9007      	str	r0, [sp, #28]
 801f056:	6247      	str	r7, [r0, #36]	; 0x24
 801f058:	2f00      	cmp	r7, #0
 801f05a:	d064      	beq.n	801f126 <GUI_MEMDEV_Paint1Static+0x156>
 801f05c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f05e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801f174 <GUI_MEMDEV_Paint1Static+0x1a4>
 801f062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f066:	6283      	str	r3, [r0, #40]	; 0x28
 801f068:	a807      	add	r0, sp, #28
 801f06a:	f006 fc51 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f06e:	4638      	mov	r0, r7
 801f070:	f001 f982 	bl	8020378 <GUI_MEMDEV_Select>
 801f074:	9005      	str	r0, [sp, #20]
 801f076:	4640      	mov	r0, r8
 801f078:	f004 f9ae 	bl	80233d8 <GUI__AlphaPreserveTrans>
 801f07c:	4638      	mov	r0, r7
 801f07e:	f000 f8d7 	bl	801f230 <GUI_MEMDEV_GetDataPtr>
 801f082:	4a39      	ldr	r2, [pc, #228]	; (801f168 <GUI_MEMDEV_Paint1Static+0x198>)
 801f084:	f8db 3000 	ldr.w	r3, [fp]
 801f088:	7811      	ldrb	r1, [r2, #0]
 801f08a:	fb0a f206 	mul.w	r2, sl, r6
 801f08e:	0092      	lsls	r2, r2, #2
 801f090:	4798      	blx	r3
 801f092:	4a36      	ldr	r2, [pc, #216]	; (801f16c <GUI_MEMDEV_Paint1Static+0x19c>)
 801f094:	f8d9 6000 	ldr.w	r6, [r9]
 801f098:	6014      	str	r4, [r2, #0]
 801f09a:	4620      	mov	r0, r4
 801f09c:	f7fd f814 	bl	801c0c8 <WM_GetWindowOrgX>
 801f0a0:	f8c9 0000 	str.w	r0, [r9]
 801f0a4:	4620      	mov	r0, r4
 801f0a6:	f7ff fc4f 	bl	801e948 <WM__Paint1>
 801f0aa:	2300      	movs	r3, #0
 801f0ac:	4a2f      	ldr	r2, [pc, #188]	; (801f16c <GUI_MEMDEV_Paint1Static+0x19c>)
 801f0ae:	f8c9 6000 	str.w	r6, [r9]
 801f0b2:	4618      	mov	r0, r3
 801f0b4:	6013      	str	r3, [r2, #0]
 801f0b6:	f004 f98f 	bl	80233d8 <GUI__AlphaPreserveTrans>
 801f0ba:	9805      	ldr	r0, [sp, #20]
 801f0bc:	f001 f95c 	bl	8020378 <GUI_MEMDEV_Select>
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	f006 fc09 	bl	80258d8 <GUI_ALLOC_h2p>
 801f0c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f0c8:	b9f8      	cbnz	r0, 801f10a <GUI_MEMDEV_Paint1Static+0x13a>
 801f0ca:	3d01      	subs	r5, #1
 801f0cc:	d187      	bne.n	801efde <GUI_MEMDEV_Paint1Static+0xe>
 801f0ce:	b009      	add	sp, #36	; 0x24
 801f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d4:	4640      	mov	r0, r8
 801f0d6:	f006 fc09 	bl	80258ec <GUI_ALLOC_LockH>
 801f0da:	4603      	mov	r3, r0
 801f0dc:	a808      	add	r0, sp, #32
 801f0de:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 801f0e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 801f0e6:	fa0f fa8a 	sxth.w	sl, sl
 801f0ea:	88de      	ldrh	r6, [r3, #6]
 801f0ec:	f006 fc10 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f0f0:	4557      	cmp	r7, sl
 801f0f2:	d00f      	beq.n	801f114 <GUI_MEMDEV_Paint1Static+0x144>
 801f0f4:	4640      	mov	r0, r8
 801f0f6:	4639      	mov	r1, r7
 801f0f8:	464a      	mov	r2, r9
 801f0fa:	f000 f83d 	bl	801f178 <GUI_MEMDEV_SetOrg>
 801f0fe:	4620      	mov	r0, r4
 801f100:	f006 fbea 	bl	80258d8 <GUI_ALLOC_h2p>
 801f104:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f106:	2800      	cmp	r0, #0
 801f108:	d0df      	beq.n	801f0ca <GUI_MEMDEV_Paint1Static+0xfa>
 801f10a:	f009 fadb 	bl	80286c4 <GUI_MEMDEV_Write>
 801f10e:	b009      	add	sp, #36	; 0x24
 801f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f114:	b236      	sxth	r6, r6
 801f116:	45b1      	cmp	r9, r6
 801f118:	d0d2      	beq.n	801f0c0 <GUI_MEMDEV_Paint1Static+0xf0>
 801f11a:	4640      	mov	r0, r8
 801f11c:	4639      	mov	r1, r7
 801f11e:	464a      	mov	r2, r9
 801f120:	f000 f82a 	bl	801f178 <GUI_MEMDEV_SetOrg>
 801f124:	e7eb      	b.n	801f0fe <GUI_MEMDEV_Paint1Static+0x12e>
 801f126:	a807      	add	r0, sp, #28
 801f128:	f006 fbf2 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f12c:	4620      	mov	r0, r4
 801f12e:	f7ff fc0b 	bl	801e948 <WM__Paint1>
 801f132:	e7ca      	b.n	801f0ca <GUI_MEMDEV_Paint1Static+0xfa>
 801f134:	f002 fa44 	bl	80215c0 <LCD_GetXSize>
 801f138:	4680      	mov	r8, r0
 801f13a:	f002 fa55 	bl	80215e8 <LCD_GetYSize>
 801f13e:	4546      	cmp	r6, r8
 801f140:	dc03      	bgt.n	801f14a <GUI_MEMDEV_Paint1Static+0x17a>
 801f142:	4582      	cmp	sl, r0
 801f144:	f77f af74 	ble.w	801f030 <GUI_MEMDEV_Paint1Static+0x60>
 801f148:	46b0      	mov	r8, r6
 801f14a:	4582      	cmp	sl, r0
 801f14c:	bfa8      	it	ge
 801f14e:	4682      	movge	sl, r0
 801f150:	4652      	mov	r2, sl
 801f152:	4620      	mov	r0, r4
 801f154:	4641      	mov	r1, r8
 801f156:	f7fd fa53 	bl	801c600 <WM_SetSize>
 801f15a:	4646      	mov	r6, r8
 801f15c:	e768      	b.n	801f030 <GUI_MEMDEV_Paint1Static+0x60>
 801f15e:	bf00      	nop
 801f160:	0802f0b8 	.word	0x0802f0b8
 801f164:	08032080 	.word	0x08032080
 801f168:	2002b181 	.word	0x2002b181
 801f16c:	2002cba4 	.word	0x2002cba4
 801f170:	20000254 	.word	0x20000254
 801f174:	2002cbe0 	.word	0x2002cbe0

0801f178 <GUI_MEMDEV_SetOrg>:
 801f178:	b570      	push	{r4, r5, r6, lr}
 801f17a:	4604      	mov	r4, r0
 801f17c:	b082      	sub	sp, #8
 801f17e:	460d      	mov	r5, r1
 801f180:	4616      	mov	r6, r2
 801f182:	b928      	cbnz	r0, 801f190 <GUI_MEMDEV_SetOrg+0x18>
 801f184:	4b18      	ldr	r3, [pc, #96]	; (801f1e8 <GUI_MEMDEV_SetOrg+0x70>)
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801f18a:	b90c      	cbnz	r4, 801f190 <GUI_MEMDEV_SetOrg+0x18>
 801f18c:	b002      	add	sp, #8
 801f18e:	bd70      	pop	{r4, r5, r6, pc}
 801f190:	f004 f82c 	bl	80231ec <GUI_Lock>
 801f194:	4620      	mov	r0, r4
 801f196:	f006 fba9 	bl	80258ec <GUI_ALLOC_LockH>
 801f19a:	b2b6      	uxth	r6, r6
 801f19c:	b2ad      	uxth	r5, r5
 801f19e:	80c6      	strh	r6, [r0, #6]
 801f1a0:	8085      	strh	r5, [r0, #4]
 801f1a2:	9000      	str	r0, [sp, #0]
 801f1a4:	f002 fec4 	bl	8021f30 <LCD_SetClipRectMax>
 801f1a8:	9b00      	ldr	r3, [sp, #0]
 801f1aa:	6958      	ldr	r0, [r3, #20]
 801f1ac:	b930      	cbnz	r0, 801f1bc <GUI_MEMDEV_SetOrg+0x44>
 801f1ae:	4668      	mov	r0, sp
 801f1b0:	f006 fbae 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f1b4:	f004 f810 	bl	80231d8 <GUI_Unlock>
 801f1b8:	b002      	add	sp, #8
 801f1ba:	bd70      	pop	{r4, r5, r6, pc}
 801f1bc:	f006 fb96 	bl	80258ec <GUI_ALLOC_LockH>
 801f1c0:	9a00      	ldr	r2, [sp, #0]
 801f1c2:	9001      	str	r0, [sp, #4]
 801f1c4:	8913      	ldrh	r3, [r2, #8]
 801f1c6:	8952      	ldrh	r2, [r2, #10]
 801f1c8:	80c2      	strh	r2, [r0, #6]
 801f1ca:	8083      	strh	r3, [r0, #4]
 801f1cc:	b113      	cbz	r3, 801f1d4 <GUI_MEMDEV_SetOrg+0x5c>
 801f1ce:	b10a      	cbz	r2, 801f1d4 <GUI_MEMDEV_SetOrg+0x5c>
 801f1d0:	8005      	strh	r5, [r0, #0]
 801f1d2:	8046      	strh	r6, [r0, #2]
 801f1d4:	a801      	add	r0, sp, #4
 801f1d6:	f006 fb9b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f1da:	4668      	mov	r0, sp
 801f1dc:	f006 fb98 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f1e0:	f003 fffa 	bl	80231d8 <GUI_Unlock>
 801f1e4:	e7e8      	b.n	801f1b8 <GUI_MEMDEV_SetOrg+0x40>
 801f1e6:	bf00      	nop
 801f1e8:	20000280 	.word	0x20000280

0801f1ec <GUI_MEMDEV_GetYSize>:
 801f1ec:	b510      	push	{r4, lr}
 801f1ee:	4604      	mov	r4, r0
 801f1f0:	b082      	sub	sp, #8
 801f1f2:	f003 fffb 	bl	80231ec <GUI_Lock>
 801f1f6:	b17c      	cbz	r4, 801f218 <GUI_MEMDEV_GetYSize+0x2c>
 801f1f8:	4620      	mov	r0, r4
 801f1fa:	f006 fb77 	bl	80258ec <GUI_ALLOC_LockH>
 801f1fe:	ab02      	add	r3, sp, #8
 801f200:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801f204:	f843 0d04 	str.w	r0, [r3, #-4]!
 801f208:	4618      	mov	r0, r3
 801f20a:	f006 fb81 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f20e:	f003 ffe3 	bl	80231d8 <GUI_Unlock>
 801f212:	4620      	mov	r0, r4
 801f214:	b002      	add	sp, #8
 801f216:	bd10      	pop	{r4, pc}
 801f218:	4b04      	ldr	r3, [pc, #16]	; (801f22c <GUI_MEMDEV_GetYSize+0x40>)
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801f21e:	2c00      	cmp	r4, #0
 801f220:	d1ea      	bne.n	801f1f8 <GUI_MEMDEV_GetYSize+0xc>
 801f222:	f003 ffd9 	bl	80231d8 <GUI_Unlock>
 801f226:	4620      	mov	r0, r4
 801f228:	b002      	add	sp, #8
 801f22a:	bd10      	pop	{r4, pc}
 801f22c:	20000280 	.word	0x20000280

0801f230 <GUI_MEMDEV_GetDataPtr>:
 801f230:	b510      	push	{r4, lr}
 801f232:	4604      	mov	r4, r0
 801f234:	b082      	sub	sp, #8
 801f236:	b180      	cbz	r0, 801f25a <GUI_MEMDEV_GetDataPtr+0x2a>
 801f238:	f003 ffd8 	bl	80231ec <GUI_Lock>
 801f23c:	4620      	mov	r0, r4
 801f23e:	f006 fb55 	bl	80258ec <GUI_ALLOC_LockH>
 801f242:	4604      	mov	r4, r0
 801f244:	a802      	add	r0, sp, #8
 801f246:	f840 4d04 	str.w	r4, [r0, #-4]!
 801f24a:	f006 fb61 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f24e:	f003 ffc3 	bl	80231d8 <GUI_Unlock>
 801f252:	f104 0018 	add.w	r0, r4, #24
 801f256:	b002      	add	sp, #8
 801f258:	bd10      	pop	{r4, pc}
 801f25a:	b002      	add	sp, #8
 801f25c:	bd10      	pop	{r4, pc}
 801f25e:	bf00      	nop

0801f260 <GUI_MEMDEV_Draw>:
 801f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f264:	b087      	sub	sp, #28
 801f266:	4604      	mov	r4, r0
 801f268:	4692      	mov	sl, r2
 801f26a:	461d      	mov	r5, r3
 801f26c:	4689      	mov	r9, r1
 801f26e:	f003 ffbd 	bl	80231ec <GUI_Lock>
 801f272:	4a58      	ldr	r2, [pc, #352]	; (801f3d4 <GUI_MEMDEV_Draw+0x174>)
 801f274:	6813      	ldr	r3, [r2, #0]
 801f276:	4a58      	ldr	r2, [pc, #352]	; (801f3d8 <GUI_MEMDEV_Draw+0x178>)
 801f278:	7c5e      	ldrb	r6, [r3, #17]
 801f27a:	5793      	ldrsb	r3, [r2, r6]
 801f27c:	2b01      	cmp	r3, #1
 801f27e:	4630      	mov	r0, r6
 801f280:	f340 809c 	ble.w	801f3bc <GUI_MEMDEV_Draw+0x15c>
 801f284:	f002 f91e 	bl	80214c4 <LCD_GetXSizeEx>
 801f288:	4680      	mov	r8, r0
 801f28a:	4630      	mov	r0, r6
 801f28c:	f002 f928 	bl	80214e0 <LCD_GetYSizeEx>
 801f290:	4607      	mov	r7, r0
 801f292:	2c00      	cmp	r4, #0
 801f294:	f000 808f 	beq.w	801f3b6 <GUI_MEMDEV_Draw+0x156>
 801f298:	a804      	add	r0, sp, #16
 801f29a:	a905      	add	r1, sp, #20
 801f29c:	f005 f962 	bl	8024564 <GUI_GetOrg>
 801f2a0:	f9b4 e000 	ldrsh.w	lr, [r4]
 801f2a4:	9a04      	ldr	r2, [sp, #16]
 801f2a6:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 801f2aa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f2ae:	9b05      	ldr	r3, [sp, #20]
 801f2b0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f2b4:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 801f2b8:	4490      	add	r8, r2
 801f2ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2be:	4674      	mov	r4, lr
 801f2c0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801f2c4:	4580      	cmp	r8, r0
 801f2c6:	bfd4      	ite	le
 801f2c8:	ebc4 0408 	rsble	r4, r4, r8
 801f2cc:	ebc4 0400 	rsbgt	r4, r4, r0
 801f2d0:	441f      	add	r7, r3
 801f2d2:	3f01      	subs	r7, #1
 801f2d4:	46a0      	mov	r8, r4
 801f2d6:	4634      	mov	r4, r6
 801f2d8:	428f      	cmp	r7, r1
 801f2da:	bfd4      	ite	le
 801f2dc:	ebc4 0407 	rsble	r4, r4, r7
 801f2e0:	ebc4 0401 	rsbgt	r4, r4, r1
 801f2e4:	f8cd e00c 	str.w	lr, [sp, #12]
 801f2e8:	9602      	str	r6, [sp, #8]
 801f2ea:	f108 0801 	add.w	r8, r8, #1
 801f2ee:	1c67      	adds	r7, r4, #1
 801f2f0:	b905      	cbnz	r5, 801f2f4 <GUI_MEMDEV_Draw+0x94>
 801f2f2:	427d      	negs	r5, r7
 801f2f4:	f1b8 0f00 	cmp.w	r8, #0
 801f2f8:	dd4f      	ble.n	801f39a <GUI_MEMDEV_Draw+0x13a>
 801f2fa:	2f00      	cmp	r7, #0
 801f2fc:	dd4d      	ble.n	801f39a <GUI_MEMDEV_Draw+0x13a>
 801f2fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f300:	9200      	str	r2, [sp, #0]
 801f302:	462b      	mov	r3, r5
 801f304:	4642      	mov	r2, r8
 801f306:	9803      	ldr	r0, [sp, #12]
 801f308:	9902      	ldr	r1, [sp, #8]
 801f30a:	f000 fff1 	bl	80202f0 <GUI_MEMDEV_CreateEx>
 801f30e:	4680      	mov	r8, r0
 801f310:	2800      	cmp	r0, #0
 801f312:	d048      	beq.n	801f3a6 <GUI_MEMDEV_Draw+0x146>
 801f314:	f7ff ff6a 	bl	801f1ec <GUI_MEMDEV_GetYSize>
 801f318:	42b8      	cmp	r0, r7
 801f31a:	4606      	mov	r6, r0
 801f31c:	d004      	beq.n	801f328 <GUI_MEMDEV_Draw+0xc8>
 801f31e:	4c2d      	ldr	r4, [pc, #180]	; (801f3d4 <GUI_MEMDEV_Draw+0x174>)
 801f320:	6823      	ldr	r3, [r4, #0]
 801f322:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f324:	2800      	cmp	r0, #0
 801f326:	d151      	bne.n	801f3cc <GUI_MEMDEV_Draw+0x16c>
 801f328:	4640      	mov	r0, r8
 801f32a:	f001 f825 	bl	8020378 <GUI_MEMDEV_Select>
 801f32e:	f1c6 0b00 	rsb	fp, r6, #0
 801f332:	463d      	mov	r5, r7
 801f334:	2400      	movs	r4, #0
 801f336:	e00e      	b.n	801f356 <GUI_MEMDEV_Draw+0xf6>
 801f338:	445d      	add	r5, fp
 801f33a:	b9ac      	cbnz	r4, 801f368 <GUI_MEMDEV_Draw+0x108>
 801f33c:	4650      	mov	r0, sl
 801f33e:	47c8      	blx	r9
 801f340:	4a26      	ldr	r2, [pc, #152]	; (801f3dc <GUI_MEMDEV_Draw+0x17c>)
 801f342:	6813      	ldr	r3, [r2, #0]
 801f344:	4434      	add	r4, r6
 801f346:	20ff      	movs	r0, #255	; 0xff
 801f348:	b103      	cbz	r3, 801f34c <GUI_MEMDEV_Draw+0xec>
 801f34a:	4798      	blx	r3
 801f34c:	4640      	mov	r0, r8
 801f34e:	f001 f8bd 	bl	80204cc <GUI_MEMDEV_CopyToLCD>
 801f352:	42a7      	cmp	r7, r4
 801f354:	dd12      	ble.n	801f37c <GUI_MEMDEV_Draw+0x11c>
 801f356:	42ae      	cmp	r6, r5
 801f358:	ddee      	ble.n	801f338 <GUI_MEMDEV_Draw+0xd8>
 801f35a:	4629      	mov	r1, r5
 801f35c:	4640      	mov	r0, r8
 801f35e:	f009 fb03 	bl	8028968 <GUI_MEMDEV_ReduceYSize>
 801f362:	445d      	add	r5, fp
 801f364:	2c00      	cmp	r4, #0
 801f366:	d0e9      	beq.n	801f33c <GUI_MEMDEV_Draw+0xdc>
 801f368:	9a02      	ldr	r2, [sp, #8]
 801f36a:	9903      	ldr	r1, [sp, #12]
 801f36c:	4640      	mov	r0, r8
 801f36e:	4422      	add	r2, r4
 801f370:	f7ff ff02 	bl	801f178 <GUI_MEMDEV_SetOrg>
 801f374:	4640      	mov	r0, r8
 801f376:	f009 fb17 	bl	80289a8 <GUI_MEMDEV_Clear>
 801f37a:	e7df      	b.n	801f33c <GUI_MEMDEV_Draw+0xdc>
 801f37c:	4640      	mov	r0, r8
 801f37e:	f000 ff8d 	bl	802029c <GUI_MEMDEV_Delete>
 801f382:	2000      	movs	r0, #0
 801f384:	f000 fff8 	bl	8020378 <GUI_MEMDEV_Select>
 801f388:	42be      	cmp	r6, r7
 801f38a:	d006      	beq.n	801f39a <GUI_MEMDEV_Draw+0x13a>
 801f38c:	4c11      	ldr	r4, [pc, #68]	; (801f3d4 <GUI_MEMDEV_Draw+0x174>)
 801f38e:	6823      	ldr	r3, [r4, #0]
 801f390:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f392:	b110      	cbz	r0, 801f39a <GUI_MEMDEV_Draw+0x13a>
 801f394:	2133      	movs	r1, #51	; 0x33
 801f396:	f7fb fd7d 	bl	801ae94 <WM__SendMessageNoPara>
 801f39a:	f003 ff1d 	bl	80231d8 <GUI_Unlock>
 801f39e:	2000      	movs	r0, #0
 801f3a0:	b007      	add	sp, #28
 801f3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3a6:	4650      	mov	r0, sl
 801f3a8:	47c8      	blx	r9
 801f3aa:	f003 ff15 	bl	80231d8 <GUI_Unlock>
 801f3ae:	2001      	movs	r0, #1
 801f3b0:	b007      	add	sp, #28
 801f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b6:	9402      	str	r4, [sp, #8]
 801f3b8:	9403      	str	r4, [sp, #12]
 801f3ba:	e799      	b.n	801f2f0 <GUI_MEMDEV_Draw+0x90>
 801f3bc:	f002 f89e 	bl	80214fc <LCD_GetVXSizeEx>
 801f3c0:	4680      	mov	r8, r0
 801f3c2:	4630      	mov	r0, r6
 801f3c4:	f002 f8a8 	bl	8021518 <LCD_GetVYSizeEx>
 801f3c8:	4607      	mov	r7, r0
 801f3ca:	e762      	b.n	801f292 <GUI_MEMDEV_Draw+0x32>
 801f3cc:	2132      	movs	r1, #50	; 0x32
 801f3ce:	f7fb fd61 	bl	801ae94 <WM__SendMessageNoPara>
 801f3d2:	e7a9      	b.n	801f328 <GUI_MEMDEV_Draw+0xc8>
 801f3d4:	20000280 	.word	0x20000280
 801f3d8:	2002cbd0 	.word	0x2002cbd0
 801f3dc:	2002b184 	.word	0x2002b184

0801f3e0 <_GetDevData>:
 801f3e0:	4802      	ldr	r0, [pc, #8]	; (801f3ec <_GetDevData+0xc>)
 801f3e2:	2901      	cmp	r1, #1
 801f3e4:	bf18      	it	ne
 801f3e6:	2000      	movne	r0, #0
 801f3e8:	4770      	bx	lr
 801f3ea:	bf00      	nop
 801f3ec:	0802f0b8 	.word	0x0802f0b8

0801f3f0 <_GetDevFunc>:
 801f3f0:	4802      	ldr	r0, [pc, #8]	; (801f3fc <_GetDevFunc+0xc>)
 801f3f2:	2916      	cmp	r1, #22
 801f3f4:	bf18      	it	ne
 801f3f6:	2000      	movne	r0, #0
 801f3f8:	4770      	bx	lr
 801f3fa:	bf00      	nop
 801f3fc:	08028555 	.word	0x08028555

0801f400 <_GetDevProp>:
 801f400:	2908      	cmp	r1, #8
 801f402:	bf0c      	ite	eq
 801f404:	2020      	moveq	r0, #32
 801f406:	2000      	movne	r0, #0
 801f408:	4770      	bx	lr
 801f40a:	bf00      	nop

0801f40c <_SetOrg>:
 801f40c:	b508      	push	{r3, lr}
 801f40e:	6800      	ldr	r0, [r0, #0]
 801f410:	68c3      	ldr	r3, [r0, #12]
 801f412:	6a1b      	ldr	r3, [r3, #32]
 801f414:	4798      	blx	r3
 801f416:	bd08      	pop	{r3, pc}

0801f418 <_GetRect>:
 801f418:	b570      	push	{r4, r5, r6, lr}
 801f41a:	b082      	sub	sp, #8
 801f41c:	6880      	ldr	r0, [r0, #8]
 801f41e:	460c      	mov	r4, r1
 801f420:	f006 fa64 	bl	80258ec <GUI_ALLOC_LockH>
 801f424:	4603      	mov	r3, r0
 801f426:	a802      	add	r0, sp, #8
 801f428:	8899      	ldrh	r1, [r3, #4]
 801f42a:	891d      	ldrh	r5, [r3, #8]
 801f42c:	88da      	ldrh	r2, [r3, #6]
 801f42e:	895e      	ldrh	r6, [r3, #10]
 801f430:	f840 3d04 	str.w	r3, [r0, #-4]!
 801f434:	440d      	add	r5, r1
 801f436:	1993      	adds	r3, r2, r6
 801f438:	3b01      	subs	r3, #1
 801f43a:	3d01      	subs	r5, #1
 801f43c:	8021      	strh	r1, [r4, #0]
 801f43e:	80a5      	strh	r5, [r4, #4]
 801f440:	8062      	strh	r2, [r4, #2]
 801f442:	80e3      	strh	r3, [r4, #6]
 801f444:	f006 fa64 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f448:	b002      	add	sp, #8
 801f44a:	bd70      	pop	{r4, r5, r6, pc}

0801f44c <_DrawBitmap>:
 801f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f450:	4ead      	ldr	r6, [pc, #692]	; (801f708 <_DrawBitmap+0x2bc>)
 801f452:	6835      	ldr	r5, [r6, #0]
 801f454:	b099      	sub	sp, #100	; 0x64
 801f456:	6e2d      	ldr	r5, [r5, #96]	; 0x60
 801f458:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f45a:	f8dd a09c 	ldr.w	sl, [sp, #156]	; 0x9c
 801f45e:	9307      	str	r3, [sp, #28]
 801f460:	4606      	mov	r6, r0
 801f462:	460f      	mov	r7, r1
 801f464:	4690      	mov	r8, r2
 801f466:	b915      	cbnz	r5, 801f46e <_DrawBitmap+0x22>
 801f468:	b019      	add	sp, #100	; 0x64
 801f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f46e:	4628      	mov	r0, r5
 801f470:	f006 fa3c 	bl	80258ec <GUI_ALLOC_LockH>
 801f474:	6943      	ldr	r3, [r0, #20]
 801f476:	9015      	str	r0, [sp, #84]	; 0x54
 801f478:	2b00      	cmp	r3, #0
 801f47a:	f040 823b 	bne.w	801f8f4 <_DrawBitmap+0x4a8>
 801f47e:	4602      	mov	r2, r0
 801f480:	68d2      	ldr	r2, [r2, #12]
 801f482:	9316      	str	r3, [sp, #88]	; 0x58
 801f484:	a815      	add	r0, sp, #84	; 0x54
 801f486:	920a      	str	r2, [sp, #40]	; 0x28
 801f488:	f006 fa42 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f48c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f48e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f490:	4439      	add	r1, r7
 801f492:	910b      	str	r1, [sp, #44]	; 0x2c
 801f494:	2800      	cmp	r0, #0
 801f496:	f000 8233 	beq.w	801f900 <_DrawBitmap+0x4b4>
 801f49a:	499b      	ldr	r1, [pc, #620]	; (801f708 <_DrawBitmap+0x2bc>)
 801f49c:	680b      	ldr	r3, [r1, #0]
 801f49e:	7c1a      	ldrb	r2, [r3, #16]
 801f4a0:	0792      	lsls	r2, r2, #30
 801f4a2:	460d      	mov	r5, r1
 801f4a4:	f140 8136 	bpl.w	801f714 <_DrawBitmap+0x2c8>
 801f4a8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801f4aa:	f006 fa1f 	bl	80258ec <GUI_ALLOC_LockH>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	a818      	add	r0, sp, #96	; 0x60
 801f4b2:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 801f4b6:	68dd      	ldr	r5, [r3, #12]
 801f4b8:	f840 3d04 	str.w	r3, [r0, #-4]!
 801f4bc:	ebc1 0108 	rsb	r1, r1, r8
 801f4c0:	f103 0218 	add.w	r2, r3, #24
 801f4c4:	fb05 2201 	mla	r2, r5, r1, r2
 801f4c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f4ce:	1acb      	subs	r3, r1, r3
 801f4d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f4d4:	9304      	str	r3, [sp, #16]
 801f4d6:	f006 fa1b 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f4da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f4dc:	2a17      	cmp	r2, #23
 801f4de:	dd4f      	ble.n	801f580 <_DrawBitmap+0x134>
 801f4e0:	2c00      	cmp	r4, #0
 801f4e2:	dd43      	ble.n	801f56c <_DrawBitmap+0x120>
 801f4e4:	4444      	add	r4, r8
 801f4e6:	9406      	str	r4, [sp, #24]
 801f4e8:	9c07      	ldr	r4, [sp, #28]
 801f4ea:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801f710 <_DrawBitmap+0x2c4>
 801f4ee:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801f4f0:	9609      	str	r6, [sp, #36]	; 0x24
 801f4f2:	00a4      	lsls	r4, r4, #2
 801f4f4:	940d      	str	r4, [sp, #52]	; 0x34
 801f4f6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f4f8:	b128      	cbz	r0, 801f506 <_DrawBitmap+0xba>
 801f4fa:	6883      	ldr	r3, [r0, #8]
 801f4fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f4fe:	685c      	ldr	r4, [r3, #4]
 801f500:	9b07      	ldr	r3, [sp, #28]
 801f502:	4642      	mov	r2, r8
 801f504:	47a0      	blx	r4
 801f506:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f508:	6933      	ldr	r3, [r6, #16]
 801f50a:	68da      	ldr	r2, [r3, #12]
 801f50c:	2a00      	cmp	r2, #0
 801f50e:	f040 8123 	bne.w	801f758 <_DrawBitmap+0x30c>
 801f512:	685b      	ldr	r3, [r3, #4]
 801f514:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801f518:	4798      	blx	r3
 801f51a:	f8dd b010 	ldr.w	fp, [sp, #16]
 801f51e:	9d07      	ldr	r5, [sp, #28]
 801f520:	9705      	str	r7, [sp, #20]
 801f522:	0e04      	lsrs	r4, r0, #24
 801f524:	46ba      	mov	sl, r7
 801f526:	4653      	mov	r3, sl
 801f528:	2600      	movs	r6, #0
 801f52a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f52e:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 801f532:	f000 80f7 	beq.w	801f724 <_DrawBitmap+0x2d8>
 801f536:	2e00      	cmp	r6, #0
 801f538:	f040 80f8 	bne.w	801f72c <_DrawBitmap+0x2e0>
 801f53c:	f8da 0000 	ldr.w	r0, [sl]
 801f540:	0e02      	lsrs	r2, r0, #24
 801f542:	f040 8101 	bne.w	801f748 <_DrawBitmap+0x2fc>
 801f546:	3d01      	subs	r5, #1
 801f548:	f10b 0b04 	add.w	fp, fp, #4
 801f54c:	f10a 0a04 	add.w	sl, sl, #4
 801f550:	2d00      	cmp	r5, #0
 801f552:	d1e8      	bne.n	801f526 <_DrawBitmap+0xda>
 801f554:	9f05      	ldr	r7, [sp, #20]
 801f556:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801f558:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f55a:	4427      	add	r7, r4
 801f55c:	9c04      	ldr	r4, [sp, #16]
 801f55e:	4434      	add	r4, r6
 801f560:	9e06      	ldr	r6, [sp, #24]
 801f562:	9404      	str	r4, [sp, #16]
 801f564:	f108 0801 	add.w	r8, r8, #1
 801f568:	45b0      	cmp	r8, r6
 801f56a:	d1c4      	bne.n	801f4f6 <_DrawBitmap+0xaa>
 801f56c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f56e:	2b00      	cmp	r3, #0
 801f570:	f43f af7a 	beq.w	801f468 <_DrawBitmap+0x1c>
 801f574:	a816      	add	r0, sp, #88	; 0x58
 801f576:	f006 f9cb 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f57a:	b019      	add	sp, #100	; 0x64
 801f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f580:	2a10      	cmp	r2, #16
 801f582:	f000 8292 	beq.w	801faaa <_DrawBitmap+0x65e>
 801f586:	2a08      	cmp	r2, #8
 801f588:	f000 834a 	beq.w	801fc20 <_DrawBitmap+0x7d4>
 801f58c:	4b5f      	ldr	r3, [pc, #380]	; (801f70c <_DrawBitmap+0x2c0>)
 801f58e:	f1ba 0f00 	cmp.w	sl, #0
 801f592:	bf08      	it	eq
 801f594:	469a      	moveq	sl, r3
 801f596:	2c00      	cmp	r4, #0
 801f598:	dde8      	ble.n	801f56c <_DrawBitmap+0x120>
 801f59a:	4444      	add	r4, r8
 801f59c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 801f59e:	9410      	str	r4, [sp, #64]	; 0x40
 801f5a0:	9c04      	ldr	r4, [sp, #16]
 801f5a2:	f1c6 0304 	rsb	r3, r6, #4
 801f5a6:	3404      	adds	r4, #4
 801f5a8:	0076      	lsls	r6, r6, #1
 801f5aa:	9404      	str	r4, [sp, #16]
 801f5ac:	9611      	str	r6, [sp, #68]	; 0x44
 801f5ae:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801f5b0:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f5b2:	b2db      	uxtb	r3, r3
 801f5b4:	00a4      	lsls	r4, r4, #2
 801f5b6:	3601      	adds	r6, #1
 801f5b8:	46c3      	mov	fp, r8
 801f5ba:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5bc:	9412      	str	r4, [sp, #72]	; 0x48
 801f5be:	960d      	str	r6, [sp, #52]	; 0x34
 801f5c0:	e015      	b.n	801f5ee <_DrawBitmap+0x1a2>
 801f5c2:	2c04      	cmp	r4, #4
 801f5c4:	f000 810c 	beq.w	801f7e0 <_DrawBitmap+0x394>
 801f5c8:	2c01      	cmp	r4, #1
 801f5ca:	f000 80cc 	beq.w	801f766 <_DrawBitmap+0x31a>
 801f5ce:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801f5d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5d4:	4434      	add	r4, r6
 801f5d6:	4433      	add	r3, r6
 801f5d8:	9425      	str	r4, [sp, #148]	; 0x94
 801f5da:	9e04      	ldr	r6, [sp, #16]
 801f5dc:	930d      	str	r3, [sp, #52]	; 0x34
 801f5de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f5e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f5e2:	f10b 0b01 	add.w	fp, fp, #1
 801f5e6:	4426      	add	r6, r4
 801f5e8:	459b      	cmp	fp, r3
 801f5ea:	9604      	str	r6, [sp, #16]
 801f5ec:	d0be      	beq.n	801f56c <_DrawBitmap+0x120>
 801f5ee:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801f5f0:	9b04      	ldr	r3, [sp, #16]
 801f5f2:	2c02      	cmp	r4, #2
 801f5f4:	f1a3 0504 	sub.w	r5, r3, #4
 801f5f8:	d1e3      	bne.n	801f5c2 <_DrawBitmap+0x176>
 801f5fa:	4c43      	ldr	r4, [pc, #268]	; (801f708 <_DrawBitmap+0x2bc>)
 801f5fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f5fe:	6823      	ldr	r3, [r4, #0]
 801f600:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 801f604:	7c1a      	ldrb	r2, [r3, #16]
 801f606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f608:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f60c:	f002 0203 	and.w	r2, r2, #3
 801f610:	409c      	lsls	r4, r3
 801f612:	2a01      	cmp	r2, #1
 801f614:	b2e4      	uxtb	r4, r4
 801f616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f618:	f000 821f 	beq.w	801fa5a <_DrawBitmap+0x60e>
 801f61c:	f0c0 81fe 	bcc.w	801fa1c <_DrawBitmap+0x5d0>
 801f620:	2a02      	cmp	r2, #2
 801f622:	d1d4      	bne.n	801f5ce <_DrawBitmap+0x182>
 801f624:	9a07      	ldr	r2, [sp, #28]
 801f626:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f628:	960f      	str	r6, [sp, #60]	; 0x3c
 801f62a:	46d1      	mov	r9, sl
 801f62c:	4692      	mov	sl, r2
 801f62e:	4553      	cmp	r3, sl
 801f630:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801f632:	950c      	str	r5, [sp, #48]	; 0x30
 801f634:	bfc8      	it	gt
 801f636:	fa5f f38a 	uxtbgt.w	r3, sl
 801f63a:	4645      	mov	r5, r8
 801f63c:	9608      	str	r6, [sp, #32]
 801f63e:	ebc3 0a0a 	rsb	sl, r3, sl
 801f642:	2d00      	cmp	r5, #0
 801f644:	d03e      	beq.n	801f6c4 <_DrawBitmap+0x278>
 801f646:	3b01      	subs	r3, #1
 801f648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f64c:	9e08      	ldr	r6, [sp, #32]
 801f64e:	b2db      	uxtb	r3, r3
 801f650:	4498      	add	r8, r3
 801f652:	930e      	str	r3, [sp, #56]	; 0x38
 801f654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f656:	f108 0801 	add.w	r8, r8, #1
 801f65a:	1d1f      	adds	r7, r3, #4
 801f65c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801f660:	4631      	mov	r1, r6
 801f662:	ea4f 1394 	mov.w	r3, r4, lsr #6
 801f666:	f106 0601 	add.w	r6, r6, #1
 801f66a:	4628      	mov	r0, r5
 801f66c:	465a      	mov	r2, fp
 801f66e:	d008      	beq.n	801f682 <_DrawBitmap+0x236>
 801f670:	f8d5 e008 	ldr.w	lr, [r5, #8]
 801f674:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f678:	f847 3c04 	str.w	r3, [r7, #-4]
 801f67c:	f8de 3000 	ldr.w	r3, [lr]
 801f680:	4798      	blx	r3
 801f682:	00a4      	lsls	r4, r4, #2
 801f684:	4546      	cmp	r6, r8
 801f686:	b2e4      	uxtb	r4, r4
 801f688:	f107 0704 	add.w	r7, r7, #4
 801f68c:	d1e6      	bne.n	801f65c <_DrawBitmap+0x210>
 801f68e:	9c08      	ldr	r4, [sp, #32]
 801f690:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801f692:	1c62      	adds	r2, r4, #1
 801f694:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f696:	1c73      	adds	r3, r6, #1
 801f698:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f69c:	4416      	add	r6, r2
 801f69e:	9608      	str	r6, [sp, #32]
 801f6a0:	940c      	str	r4, [sp, #48]	; 0x30
 801f6a2:	f1ba 0f00 	cmp.w	sl, #0
 801f6a6:	f000 81fe 	beq.w	801faa6 <_DrawBitmap+0x65a>
 801f6aa:	2304      	movs	r3, #4
 801f6ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f6ae:	4553      	cmp	r3, sl
 801f6b0:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801f6b4:	960f      	str	r6, [sp, #60]	; 0x3c
 801f6b6:	bfc8      	it	gt
 801f6b8:	fa5f f38a 	uxtbgt.w	r3, sl
 801f6bc:	ebc3 0a0a 	rsb	sl, r3, sl
 801f6c0:	2d00      	cmp	r5, #0
 801f6c2:	d1c0      	bne.n	801f646 <_DrawBitmap+0x1fa>
 801f6c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f6c6:	461a      	mov	r2, r3
 801f6c8:	1d30      	adds	r0, r6, #4
 801f6ca:	09a6      	lsrs	r6, r4, #6
 801f6cc:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801f6d0:	ea4f 0184 	mov.w	r1, r4, lsl #2
 801f6d4:	f102 32ff 	add.w	r2, r2, #4294967295
 801f6d8:	b2cc      	uxtb	r4, r1
 801f6da:	bf1c      	itt	ne
 801f6dc:	f859 1026 	ldrne.w	r1, [r9, r6, lsl #2]
 801f6e0:	f840 1c04 	strne.w	r1, [r0, #-4]
 801f6e4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801f6e8:	f100 0004 	add.w	r0, r0, #4
 801f6ec:	d1ed      	bne.n	801f6ca <_DrawBitmap+0x27e>
 801f6ee:	9e08      	ldr	r6, [sp, #32]
 801f6f0:	3b01      	subs	r3, #1
 801f6f2:	b2db      	uxtb	r3, r3
 801f6f4:	1c71      	adds	r1, r6, #1
 801f6f6:	1c5a      	adds	r2, r3, #1
 801f6f8:	18cb      	adds	r3, r1, r3
 801f6fa:	9308      	str	r3, [sp, #32]
 801f6fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f702:	930c      	str	r3, [sp, #48]	; 0x30
 801f704:	e7cd      	b.n	801f6a2 <_DrawBitmap+0x256>
 801f706:	bf00      	nop
 801f708:	20000280 	.word	0x20000280
 801f70c:	0802f078 	.word	0x0802f078
 801f710:	20000258 	.word	0x20000258
 801f714:	9b07      	ldr	r3, [sp, #28]
 801f716:	9400      	str	r4, [sp, #0]
 801f718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f71a:	4642      	mov	r2, r8
 801f71c:	f009 f910 	bl	8028940 <GUI_USAGE_AddRect>
 801f720:	682b      	ldr	r3, [r5, #0]
 801f722:	e6c1      	b.n	801f4a8 <_DrawBitmap+0x5c>
 801f724:	3601      	adds	r6, #1
 801f726:	42ae      	cmp	r6, r5
 801f728:	f47f aeff 	bne.w	801f52a <_DrawBitmap+0xde>
 801f72c:	00b7      	lsls	r7, r6, #2
 801f72e:	4658      	mov	r0, fp
 801f730:	4651      	mov	r1, sl
 801f732:	463a      	mov	r2, r7
 801f734:	f8d9 3000 	ldr.w	r3, [r9]
 801f738:	1bad      	subs	r5, r5, r6
 801f73a:	44bb      	add	fp, r7
 801f73c:	4798      	blx	r3
 801f73e:	44ba      	add	sl, r7
 801f740:	2d00      	cmp	r5, #0
 801f742:	f47f aef0 	bne.w	801f526 <_DrawBitmap+0xda>
 801f746:	e705      	b.n	801f554 <_DrawBitmap+0x108>
 801f748:	49a9      	ldr	r1, [pc, #676]	; (801f9f0 <_DrawBitmap+0x5a4>)
 801f74a:	680b      	ldr	r3, [r1, #0]
 801f74c:	f8db 1000 	ldr.w	r1, [fp]
 801f750:	4798      	blx	r3
 801f752:	f8cb 0000 	str.w	r0, [fp]
 801f756:	e6f6      	b.n	801f546 <_DrawBitmap+0xfa>
 801f758:	f8d9 3000 	ldr.w	r3, [r9]
 801f75c:	9804      	ldr	r0, [sp, #16]
 801f75e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f760:	4639      	mov	r1, r7
 801f762:	4798      	blx	r3
 801f764:	e6f7      	b.n	801f556 <_DrawBitmap+0x10a>
 801f766:	4ea3      	ldr	r6, [pc, #652]	; (801f9f4 <_DrawBitmap+0x5a8>)
 801f768:	6833      	ldr	r3, [r6, #0]
 801f76a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801f76c:	f006 f8be 	bl	80258ec <GUI_ALLOC_LockH>
 801f770:	6833      	ldr	r3, [r6, #0]
 801f772:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f774:	7c1a      	ldrb	r2, [r3, #16]
 801f776:	4ea0      	ldr	r6, [pc, #640]	; (801f9f8 <_DrawBitmap+0x5ac>)
 801f778:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f77c:	9015      	str	r0, [sp, #84]	; 0x54
 801f77e:	5c74      	ldrb	r4, [r6, r1]
 801f780:	9e26      	ldr	r6, [sp, #152]	; 0x98
 801f782:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f784:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801f788:	f002 0203 	and.w	r2, r2, #3
 801f78c:	2a02      	cmp	r2, #2
 801f78e:	fa44 f406 	asr.w	r4, r4, r6
 801f792:	f1c6 0608 	rsb	r6, r6, #8
 801f796:	f000 80dc 	beq.w	801f952 <_DrawBitmap+0x506>
 801f79a:	2a03      	cmp	r2, #3
 801f79c:	f000 80b3 	beq.w	801f906 <_DrawBitmap+0x4ba>
 801f7a0:	2a01      	cmp	r2, #1
 801f7a2:	f000 80b0 	beq.w	801f906 <_DrawBitmap+0x4ba>
 801f7a6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f7a8:	464f      	mov	r7, r9
 801f7aa:	42b7      	cmp	r7, r6
 801f7ac:	bf38      	it	cc
 801f7ae:	463e      	movcc	r6, r7
 801f7b0:	1bbf      	subs	r7, r7, r6
 801f7b2:	4633      	mov	r3, r6
 801f7b4:	462a      	mov	r2, r5
 801f7b6:	f004 0101 	and.w	r1, r4, #1
 801f7ba:	3b01      	subs	r3, #1
 801f7bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f7c0:	f842 1b04 	str.w	r1, [r2], #4
 801f7c4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f7c8:	d1f5      	bne.n	801f7b6 <_DrawBitmap+0x36a>
 801f7ca:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801f7ce:	2f00      	cmp	r7, #0
 801f7d0:	f000 808c 	beq.w	801f8ec <_DrawBitmap+0x4a0>
 801f7d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801f7d8:	4987      	ldr	r1, [pc, #540]	; (801f9f8 <_DrawBitmap+0x5ac>)
 801f7da:	2608      	movs	r6, #8
 801f7dc:	5ccc      	ldrb	r4, [r1, r3]
 801f7de:	e7e4      	b.n	801f7aa <_DrawBitmap+0x35e>
 801f7e0:	4984      	ldr	r1, [pc, #528]	; (801f9f4 <_DrawBitmap+0x5a8>)
 801f7e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7e4:	680a      	ldr	r2, [r1, #0]
 801f7e6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 801f7ea:	7c12      	ldrb	r2, [r2, #16]
 801f7ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7ee:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801f7f0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801f7f4:	f002 0203 	and.w	r2, r2, #3
 801f7f8:	40a3      	lsls	r3, r4
 801f7fa:	2a01      	cmp	r2, #1
 801f7fc:	b2dc      	uxtb	r4, r3
 801f7fe:	f000 81c4 	beq.w	801fb8a <_DrawBitmap+0x73e>
 801f802:	f0c0 8197 	bcc.w	801fb34 <_DrawBitmap+0x6e8>
 801f806:	2a02      	cmp	r2, #2
 801f808:	f47f aee1 	bne.w	801f5ce <_DrawBitmap+0x182>
 801f80c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f80e:	2900      	cmp	r1, #0
 801f810:	f040 81ef 	bne.w	801fbf2 <_DrawBitmap+0x7a6>
 801f814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f816:	9807      	ldr	r0, [sp, #28]
 801f818:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801f81c:	9208      	str	r2, [sp, #32]
 801f81e:	2801      	cmp	r0, #1
 801f820:	dd4f      	ble.n	801f8c2 <_DrawBitmap+0x476>
 801f822:	2e00      	cmp	r6, #0
 801f824:	f000 8298 	beq.w	801fd58 <_DrawBitmap+0x90c>
 801f828:	f1a0 0c02 	sub.w	ip, r0, #2
 801f82c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801f830:	930c      	str	r3, [sp, #48]	; 0x30
 801f832:	005b      	lsls	r3, r3, #1
 801f834:	930f      	str	r3, [sp, #60]	; 0x3c
 801f836:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f838:	9b08      	ldr	r3, [sp, #32]
 801f83a:	9f08      	ldr	r7, [sp, #32]
 801f83c:	440b      	add	r3, r1
 801f83e:	3302      	adds	r3, #2
 801f840:	930e      	str	r3, [sp, #56]	; 0x38
 801f842:	4663      	mov	r3, ip
 801f844:	f105 0808 	add.w	r8, r5, #8
 801f848:	46a4      	mov	ip, r4
 801f84a:	9305      	str	r3, [sp, #20]
 801f84c:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
 801f850:	ea4f 131c 	mov.w	r3, ip, lsr #4
 801f854:	4639      	mov	r1, r7
 801f856:	4630      	mov	r0, r6
 801f858:	465a      	mov	r2, fp
 801f85a:	d00c      	beq.n	801f876 <_DrawBitmap+0x42a>
 801f85c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 801f860:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801f864:	f848 3c08 	str.w	r3, [r8, #-8]
 801f868:	f8de 3000 	ldr.w	r3, [lr]
 801f86c:	f8cd c00c 	str.w	ip, [sp, #12]
 801f870:	4798      	blx	r3
 801f872:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801f876:	f01c 0c0f 	ands.w	ip, ip, #15
 801f87a:	f107 0101 	add.w	r1, r7, #1
 801f87e:	4630      	mov	r0, r6
 801f880:	f107 0702 	add.w	r7, r7, #2
 801f884:	465a      	mov	r2, fp
 801f886:	d006      	beq.n	801f896 <_DrawBitmap+0x44a>
 801f888:	68b3      	ldr	r3, [r6, #8]
 801f88a:	f85a 402c 	ldr.w	r4, [sl, ip, lsl #2]
 801f88e:	f848 4c04 	str.w	r4, [r8, #-4]
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	4798      	blx	r3
 801f896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f898:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 801f89c:	429f      	cmp	r7, r3
 801f89e:	f108 0808 	add.w	r8, r8, #8
 801f8a2:	d1d3      	bne.n	801f84c <_DrawBitmap+0x400>
 801f8a4:	9b05      	ldr	r3, [sp, #20]
 801f8a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f8a8:	4664      	mov	r4, ip
 801f8aa:	469c      	mov	ip, r3
 801f8ac:	9b08      	ldr	r3, [sp, #32]
 801f8ae:	1c9a      	adds	r2, r3, #2
 801f8b0:	1c4b      	adds	r3, r1, #1
 801f8b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f8b4:	4411      	add	r1, r2
 801f8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f8b8:	9108      	str	r1, [sp, #32]
 801f8ba:	ebac 0042 	sub.w	r0, ip, r2, lsl #1
 801f8be:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801f8c2:	2800      	cmp	r0, #0
 801f8c4:	f43f ae83 	beq.w	801f5ce <_DrawBitmap+0x182>
 801f8c8:	0924      	lsrs	r4, r4, #4
 801f8ca:	f43f ae80 	beq.w	801f5ce <_DrawBitmap+0x182>
 801f8ce:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801f8d2:	602b      	str	r3, [r5, #0]
 801f8d4:	2e00      	cmp	r6, #0
 801f8d6:	f43f ae7a 	beq.w	801f5ce <_DrawBitmap+0x182>
 801f8da:	68b3      	ldr	r3, [r6, #8]
 801f8dc:	9908      	ldr	r1, [sp, #32]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	4630      	mov	r0, r6
 801f8e2:	465a      	mov	r2, fp
 801f8e4:	4798      	blx	r3
 801f8e6:	e672      	b.n	801f5ce <_DrawBitmap+0x182>
 801f8e8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801f8ec:	a815      	add	r0, sp, #84	; 0x54
 801f8ee:	f006 f80f 	bl	8025910 <GUI_ALLOC_UnlockH>
 801f8f2:	e66c      	b.n	801f5ce <_DrawBitmap+0x182>
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f005 fff9 	bl	80258ec <GUI_ALLOC_LockH>
 801f8fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f8fc:	4603      	mov	r3, r0
 801f8fe:	e5bf      	b.n	801f480 <_DrawBitmap+0x34>
 801f900:	4a3c      	ldr	r2, [pc, #240]	; (801f9f4 <_DrawBitmap+0x5a8>)
 801f902:	6813      	ldr	r3, [r2, #0]
 801f904:	e5d0      	b.n	801f4a8 <_DrawBitmap+0x5c>
 801f906:	6803      	ldr	r3, [r0, #0]
 801f908:	691b      	ldr	r3, [r3, #16]
 801f90a:	689b      	ldr	r3, [r3, #8]
 801f90c:	4798      	blx	r3
 801f90e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801f910:	46ae      	mov	lr, r5
 801f912:	464d      	mov	r5, r9
 801f914:	42b5      	cmp	r5, r6
 801f916:	bf38      	it	cc
 801f918:	462e      	movcc	r6, r5
 801f91a:	1bad      	subs	r5, r5, r6
 801f91c:	4632      	mov	r2, r6
 801f91e:	f10e 0304 	add.w	r3, lr, #4
 801f922:	f014 0f01 	tst.w	r4, #1
 801f926:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f92a:	d004      	beq.n	801f936 <_DrawBitmap+0x4ea>
 801f92c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801f930:	4041      	eors	r1, r0
 801f932:	f843 1c04 	str.w	r1, [r3, #-4]
 801f936:	3a01      	subs	r2, #1
 801f938:	f103 0304 	add.w	r3, r3, #4
 801f93c:	d1f1      	bne.n	801f922 <_DrawBitmap+0x4d6>
 801f93e:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 801f942:	2d00      	cmp	r5, #0
 801f944:	d0d2      	beq.n	801f8ec <_DrawBitmap+0x4a0>
 801f946:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 801f94a:	4a2b      	ldr	r2, [pc, #172]	; (801f9f8 <_DrawBitmap+0x5ac>)
 801f94c:	2608      	movs	r6, #8
 801f94e:	5cd4      	ldrb	r4, [r2, r3]
 801f950:	e7e0      	b.n	801f914 <_DrawBitmap+0x4c8>
 801f952:	f8da 2004 	ldr.w	r2, [sl, #4]
 801f956:	9925      	ldr	r1, [sp, #148]	; 0x94
 801f958:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f95c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801f960:	9208      	str	r2, [sp, #32]
 801f962:	910c      	str	r1, [sp, #48]	; 0x30
 801f964:	469a      	mov	sl, r3
 801f966:	45b1      	cmp	r9, r6
 801f968:	bf38      	it	cc
 801f96a:	464e      	movcc	r6, r9
 801f96c:	ebc6 0909 	rsb	r9, r6, r9
 801f970:	f1ba 0f00 	cmp.w	sl, #0
 801f974:	d037      	beq.n	801f9e6 <_DrawBitmap+0x59a>
 801f976:	2c00      	cmp	r4, #0
 801f978:	d031      	beq.n	801f9de <_DrawBitmap+0x592>
 801f97a:	464b      	mov	r3, r9
 801f97c:	1d2f      	adds	r7, r5, #4
 801f97e:	46d1      	mov	r9, sl
 801f980:	469a      	mov	sl, r3
 801f982:	e007      	b.n	801f994 <_DrawBitmap+0x548>
 801f984:	3e01      	subs	r6, #1
 801f986:	f108 0801 	add.w	r8, r8, #1
 801f98a:	f107 0704 	add.w	r7, r7, #4
 801f98e:	d015      	beq.n	801f9bc <_DrawBitmap+0x570>
 801f990:	0864      	lsrs	r4, r4, #1
 801f992:	d021      	beq.n	801f9d8 <_DrawBitmap+0x58c>
 801f994:	f014 0f01 	tst.w	r4, #1
 801f998:	463d      	mov	r5, r7
 801f99a:	d0f3      	beq.n	801f984 <_DrawBitmap+0x538>
 801f99c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801f9a0:	4641      	mov	r1, r8
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	4648      	mov	r0, r9
 801f9a6:	465a      	mov	r2, fp
 801f9a8:	4798      	blx	r3
 801f9aa:	9b08      	ldr	r3, [sp, #32]
 801f9ac:	f847 3c04 	str.w	r3, [r7, #-4]
 801f9b0:	3e01      	subs	r6, #1
 801f9b2:	f108 0801 	add.w	r8, r8, #1
 801f9b6:	f107 0704 	add.w	r7, r7, #4
 801f9ba:	d1e9      	bne.n	801f990 <_DrawBitmap+0x544>
 801f9bc:	4653      	mov	r3, sl
 801f9be:	46ca      	mov	sl, r9
 801f9c0:	4699      	mov	r9, r3
 801f9c2:	f1b9 0f00 	cmp.w	r9, #0
 801f9c6:	d08f      	beq.n	801f8e8 <_DrawBitmap+0x49c>
 801f9c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f9ca:	490b      	ldr	r1, [pc, #44]	; (801f9f8 <_DrawBitmap+0x5ac>)
 801f9cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 801f9d0:	940c      	str	r4, [sp, #48]	; 0x30
 801f9d2:	2608      	movs	r6, #8
 801f9d4:	5c8c      	ldrb	r4, [r1, r2]
 801f9d6:	e7c6      	b.n	801f966 <_DrawBitmap+0x51a>
 801f9d8:	4653      	mov	r3, sl
 801f9da:	46ca      	mov	sl, r9
 801f9dc:	4699      	mov	r9, r3
 801f9de:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801f9e2:	44b0      	add	r8, r6
 801f9e4:	e7ed      	b.n	801f9c2 <_DrawBitmap+0x576>
 801f9e6:	b1b4      	cbz	r4, 801fa16 <_DrawBitmap+0x5ca>
 801f9e8:	1d2a      	adds	r2, r5, #4
 801f9ea:	9b08      	ldr	r3, [sp, #32]
 801f9ec:	e008      	b.n	801fa00 <_DrawBitmap+0x5b4>
 801f9ee:	bf00      	nop
 801f9f0:	20000268 	.word	0x20000268
 801f9f4:	20000280 	.word	0x20000280
 801f9f8:	08031eb0 	.word	0x08031eb0
 801f9fc:	0864      	lsrs	r4, r4, #1
 801f9fe:	d00a      	beq.n	801fa16 <_DrawBitmap+0x5ca>
 801fa00:	f014 0f01 	tst.w	r4, #1
 801fa04:	bf18      	it	ne
 801fa06:	f842 3c04 	strne.w	r3, [r2, #-4]
 801fa0a:	3e01      	subs	r6, #1
 801fa0c:	4615      	mov	r5, r2
 801fa0e:	f102 0204 	add.w	r2, r2, #4
 801fa12:	d1f3      	bne.n	801f9fc <_DrawBitmap+0x5b0>
 801fa14:	e7d5      	b.n	801f9c2 <_DrawBitmap+0x576>
 801fa16:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801fa1a:	e7d2      	b.n	801f9c2 <_DrawBitmap+0x576>
 801fa1c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801fa1e:	9e07      	ldr	r6, [sp, #28]
 801fa20:	42b3      	cmp	r3, r6
 801fa22:	bfc8      	it	gt
 801fa24:	b2f3      	uxtbgt	r3, r6
 801fa26:	1af6      	subs	r6, r6, r3
 801fa28:	461a      	mov	r2, r3
 801fa2a:	4629      	mov	r1, r5
 801fa2c:	09a0      	lsrs	r0, r4, #6
 801fa2e:	3a01      	subs	r2, #1
 801fa30:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801fa34:	f841 0b04 	str.w	r0, [r1], #4
 801fa38:	00a4      	lsls	r4, r4, #2
 801fa3a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801fa3e:	b2e4      	uxtb	r4, r4
 801fa40:	d1f4      	bne.n	801fa2c <_DrawBitmap+0x5e0>
 801fa42:	3b01      	subs	r3, #1
 801fa44:	b2db      	uxtb	r3, r3
 801fa46:	3301      	adds	r3, #1
 801fa48:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fa4c:	2e00      	cmp	r6, #0
 801fa4e:	f43f adbe 	beq.w	801f5ce <_DrawBitmap+0x182>
 801fa52:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801fa56:	2304      	movs	r3, #4
 801fa58:	e7e2      	b.n	801fa20 <_DrawBitmap+0x5d4>
 801fa5a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801fa5c:	9e07      	ldr	r6, [sp, #28]
 801fa5e:	42b3      	cmp	r3, r6
 801fa60:	bfc8      	it	gt
 801fa62:	b2f3      	uxtbgt	r3, r6
 801fa64:	1af6      	subs	r6, r6, r3
 801fa66:	1d2a      	adds	r2, r5, #4
 801fa68:	4619      	mov	r1, r3
 801fa6a:	00a0      	lsls	r0, r4, #2
 801fa6c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801fa70:	f101 31ff 	add.w	r1, r1, #4294967295
 801fa74:	b2c4      	uxtb	r4, r0
 801fa76:	d005      	beq.n	801fa84 <_DrawBitmap+0x638>
 801fa78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801fa7c:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 801fa80:	f842 0c04 	str.w	r0, [r2, #-4]
 801fa84:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801fa88:	f102 0204 	add.w	r2, r2, #4
 801fa8c:	d1ed      	bne.n	801fa6a <_DrawBitmap+0x61e>
 801fa8e:	3b01      	subs	r3, #1
 801fa90:	b2db      	uxtb	r3, r3
 801fa92:	3301      	adds	r3, #1
 801fa94:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fa98:	2e00      	cmp	r6, #0
 801fa9a:	f43f ad98 	beq.w	801f5ce <_DrawBitmap+0x182>
 801fa9e:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801faa2:	2304      	movs	r3, #4
 801faa4:	e7db      	b.n	801fa5e <_DrawBitmap+0x612>
 801faa6:	46ca      	mov	sl, r9
 801faa8:	e591      	b.n	801f5ce <_DrawBitmap+0x182>
 801faaa:	2c00      	cmp	r4, #0
 801faac:	f77f ad5e 	ble.w	801f56c <_DrawBitmap+0x120>
 801fab0:	4444      	add	r4, r8
 801fab2:	9406      	str	r4, [sp, #24]
 801fab4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fab6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fab8:	46c1      	mov	r9, r8
 801faba:	f1a4 0a02 	sub.w	sl, r4, #2
 801fabe:	2f00      	cmp	r7, #0
 801fac0:	d02b      	beq.n	801fb1a <_DrawBitmap+0x6ce>
 801fac2:	68bb      	ldr	r3, [r7, #8]
 801fac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fac6:	685c      	ldr	r4, [r3, #4]
 801fac8:	9b07      	ldr	r3, [sp, #28]
 801faca:	4638      	mov	r0, r7
 801facc:	464a      	mov	r2, r9
 801face:	47a0      	blx	r4
 801fad0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801fad4:	9d07      	ldr	r5, [sp, #28]
 801fad6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fad8:	46d3      	mov	fp, sl
 801fada:	6933      	ldr	r3, [r6, #16]
 801fadc:	f83b 0f02 	ldrh.w	r0, [fp, #2]!
 801fae0:	685b      	ldr	r3, [r3, #4]
 801fae2:	4798      	blx	r3
 801fae4:	68bb      	ldr	r3, [r7, #8]
 801fae6:	f848 0b04 	str.w	r0, [r8], #4
 801faea:	4621      	mov	r1, r4
 801faec:	681b      	ldr	r3, [r3, #0]
 801faee:	4638      	mov	r0, r7
 801faf0:	464a      	mov	r2, r9
 801faf2:	4798      	blx	r3
 801faf4:	3d01      	subs	r5, #1
 801faf6:	f104 0401 	add.w	r4, r4, #1
 801fafa:	d1ee      	bne.n	801fada <_DrawBitmap+0x68e>
 801fafc:	9904      	ldr	r1, [sp, #16]
 801fafe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb00:	4421      	add	r1, r4
 801fb02:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801fb04:	9104      	str	r1, [sp, #16]
 801fb06:	44a2      	add	sl, r4
 801fb08:	9c06      	ldr	r4, [sp, #24]
 801fb0a:	f109 0901 	add.w	r9, r9, #1
 801fb0e:	45a1      	cmp	r9, r4
 801fb10:	f43f ad2c 	beq.w	801f56c <_DrawBitmap+0x120>
 801fb14:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fb16:	2f00      	cmp	r7, #0
 801fb18:	d1d3      	bne.n	801fac2 <_DrawBitmap+0x676>
 801fb1a:	9d04      	ldr	r5, [sp, #16]
 801fb1c:	9c07      	ldr	r4, [sp, #28]
 801fb1e:	4657      	mov	r7, sl
 801fb20:	6933      	ldr	r3, [r6, #16]
 801fb22:	f837 0f02 	ldrh.w	r0, [r7, #2]!
 801fb26:	685b      	ldr	r3, [r3, #4]
 801fb28:	4798      	blx	r3
 801fb2a:	3c01      	subs	r4, #1
 801fb2c:	f845 0b04 	str.w	r0, [r5], #4
 801fb30:	d1f6      	bne.n	801fb20 <_DrawBitmap+0x6d4>
 801fb32:	e7e3      	b.n	801fafc <_DrawBitmap+0x6b0>
 801fb34:	9e26      	ldr	r6, [sp, #152]	; 0x98
 801fb36:	2e00      	cmp	r6, #0
 801fb38:	d151      	bne.n	801fbde <_DrawBitmap+0x792>
 801fb3a:	9907      	ldr	r1, [sp, #28]
 801fb3c:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801fb40:	2901      	cmp	r1, #1
 801fb42:	dd1a      	ble.n	801fb7a <_DrawBitmap+0x72e>
 801fb44:	104f      	asrs	r7, r1, #1
 801fb46:	464a      	mov	r2, r9
 801fb48:	eb09 0607 	add.w	r6, r9, r7
 801fb4c:	f001 0101 	and.w	r1, r1, #1
 801fb50:	f105 0308 	add.w	r3, r5, #8
 801fb54:	0920      	lsrs	r0, r4, #4
 801fb56:	f004 040f 	and.w	r4, r4, #15
 801fb5a:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801fb5e:	f843 0c08 	str.w	r0, [r3, #-8]
 801fb62:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 801fb66:	f843 0c04 	str.w	r0, [r3, #-4]
 801fb6a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801fb6e:	42b2      	cmp	r2, r6
 801fb70:	f103 0308 	add.w	r3, r3, #8
 801fb74:	d1ee      	bne.n	801fb54 <_DrawBitmap+0x708>
 801fb76:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 801fb7a:	2900      	cmp	r1, #0
 801fb7c:	f43f ad27 	beq.w	801f5ce <_DrawBitmap+0x182>
 801fb80:	0924      	lsrs	r4, r4, #4
 801fb82:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801fb86:	602b      	str	r3, [r5, #0]
 801fb88:	e521      	b.n	801f5ce <_DrawBitmap+0x182>
 801fb8a:	9e26      	ldr	r6, [sp, #152]	; 0x98
 801fb8c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801fb8e:	f1c6 0002 	rsb	r0, r6, #2
 801fb92:	9e07      	ldr	r6, [sp, #28]
 801fb94:	b2c0      	uxtb	r0, r0
 801fb96:	42b0      	cmp	r0, r6
 801fb98:	bfc8      	it	gt
 801fb9a:	b2f0      	uxtbgt	r0, r6
 801fb9c:	1a36      	subs	r6, r6, r0
 801fb9e:	1d2b      	adds	r3, r5, #4
 801fba0:	4602      	mov	r2, r0
 801fba2:	0121      	lsls	r1, r4, #4
 801fba4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801fba8:	f102 32ff 	add.w	r2, r2, #4294967295
 801fbac:	b2cc      	uxtb	r4, r1
 801fbae:	d005      	beq.n	801fbbc <_DrawBitmap+0x770>
 801fbb0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fbb4:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 801fbb8:	f843 1c04 	str.w	r1, [r3, #-4]
 801fbbc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801fbc0:	f103 0304 	add.w	r3, r3, #4
 801fbc4:	d1ed      	bne.n	801fba2 <_DrawBitmap+0x756>
 801fbc6:	1e43      	subs	r3, r0, #1
 801fbc8:	b2db      	uxtb	r3, r3
 801fbca:	3301      	adds	r3, #1
 801fbcc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fbd0:	2e00      	cmp	r6, #0
 801fbd2:	f43f acfc 	beq.w	801f5ce <_DrawBitmap+0x182>
 801fbd6:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801fbda:	2002      	movs	r0, #2
 801fbdc:	e7db      	b.n	801fb96 <_DrawBitmap+0x74a>
 801fbde:	0924      	lsrs	r4, r4, #4
 801fbe0:	9e07      	ldr	r6, [sp, #28]
 801fbe2:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801fbe6:	602b      	str	r3, [r5, #0]
 801fbe8:	1e71      	subs	r1, r6, #1
 801fbea:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801fbec:	9d04      	ldr	r5, [sp, #16]
 801fbee:	7874      	ldrb	r4, [r6, #1]
 801fbf0:	e7a6      	b.n	801fb40 <_DrawBitmap+0x6f4>
 801fbf2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801fbf6:	d00a      	beq.n	801fc0e <_DrawBitmap+0x7c2>
 801fbf8:	0924      	lsrs	r4, r4, #4
 801fbfa:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801fbfe:	602b      	str	r3, [r5, #0]
 801fc00:	b12e      	cbz	r6, 801fc0e <_DrawBitmap+0x7c2>
 801fc02:	68b3      	ldr	r3, [r6, #8]
 801fc04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	4630      	mov	r0, r6
 801fc0a:	465a      	mov	r2, fp
 801fc0c:	4798      	blx	r3
 801fc0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc10:	9c07      	ldr	r4, [sp, #28]
 801fc12:	9925      	ldr	r1, [sp, #148]	; 0x94
 801fc14:	9d04      	ldr	r5, [sp, #16]
 801fc16:	3301      	adds	r3, #1
 801fc18:	1e60      	subs	r0, r4, #1
 801fc1a:	9308      	str	r3, [sp, #32]
 801fc1c:	784c      	ldrb	r4, [r1, #1]
 801fc1e:	e5fe      	b.n	801f81e <_DrawBitmap+0x3d2>
 801fc20:	2c00      	cmp	r4, #0
 801fc22:	f340 80cf 	ble.w	801fdc4 <_DrawBitmap+0x978>
 801fc26:	4444      	add	r4, r8
 801fc28:	9e07      	ldr	r6, [sp, #28]
 801fc2a:	9406      	str	r4, [sp, #24]
 801fc2c:	46c1      	mov	r9, r8
 801fc2e:	9c04      	ldr	r4, [sp, #16]
 801fc30:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801fc34:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fc36:	f104 0c04 	add.w	ip, r4, #4
 801fc3a:	44b0      	add	r8, r6
 801fc3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fc3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fc40:	4639      	mov	r1, r7
 801fc42:	ebc6 0b04 	rsb	fp, r6, r4
 801fc46:	4656      	mov	r6, sl
 801fc48:	f1ac 0004 	sub.w	r0, ip, #4
 801fc4c:	2e00      	cmp	r6, #0
 801fc4e:	d042      	beq.n	801fcd6 <_DrawBitmap+0x88a>
 801fc50:	4a5f      	ldr	r2, [pc, #380]	; (801fdd0 <_DrawBitmap+0x984>)
 801fc52:	6813      	ldr	r3, [r2, #0]
 801fc54:	7c1b      	ldrb	r3, [r3, #16]
 801fc56:	f013 0303 	ands.w	r3, r3, #3
 801fc5a:	d032      	beq.n	801fcc2 <_DrawBitmap+0x876>
 801fc5c:	2b02      	cmp	r3, #2
 801fc5e:	d11e      	bne.n	801fc9e <_DrawBitmap+0x852>
 801fc60:	2f00      	cmp	r7, #0
 801fc62:	d05f      	beq.n	801fd24 <_DrawBitmap+0x8d8>
 801fc64:	9d07      	ldr	r5, [sp, #28]
 801fc66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fc68:	f8cd c010 	str.w	ip, [sp, #16]
 801fc6c:	46e2      	mov	sl, ip
 801fc6e:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801fc72:	4621      	mov	r1, r4
 801fc74:	4638      	mov	r0, r7
 801fc76:	464a      	mov	r2, r9
 801fc78:	3401      	adds	r4, #1
 801fc7a:	b143      	cbz	r3, 801fc8e <_DrawBitmap+0x842>
 801fc7c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 801fc80:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fc84:	f84a 3c04 	str.w	r3, [sl, #-4]
 801fc88:	f8de 3000 	ldr.w	r3, [lr]
 801fc8c:	4798      	blx	r3
 801fc8e:	3d01      	subs	r5, #1
 801fc90:	f10a 0a04 	add.w	sl, sl, #4
 801fc94:	d1eb      	bne.n	801fc6e <_DrawBitmap+0x822>
 801fc96:	f8dd c010 	ldr.w	ip, [sp, #16]
 801fc9a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fc9c:	4639      	mov	r1, r7
 801fc9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fca0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fca2:	9b06      	ldr	r3, [sp, #24]
 801fca4:	4414      	add	r4, r2
 801fca6:	f109 0901 	add.w	r9, r9, #1
 801fcaa:	9425      	str	r4, [sp, #148]	; 0x94
 801fcac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fcae:	4599      	cmp	r9, r3
 801fcb0:	4490      	add	r8, r2
 801fcb2:	44a4      	add	ip, r4
 801fcb4:	4493      	add	fp, r2
 801fcb6:	d1c7      	bne.n	801fc48 <_DrawBitmap+0x7fc>
 801fcb8:	2900      	cmp	r1, #0
 801fcba:	f47f ac5b 	bne.w	801f574 <_DrawBitmap+0x128>
 801fcbe:	f7ff bbd3 	b.w	801f468 <_DrawBitmap+0x1c>
 801fcc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fcc8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801fccc:	f840 2b04 	str.w	r2, [r0], #4
 801fcd0:	4598      	cmp	r8, r3
 801fcd2:	d1f7      	bne.n	801fcc4 <_DrawBitmap+0x878>
 801fcd4:	e7e3      	b.n	801fc9e <_DrawBitmap+0x852>
 801fcd6:	4c3e      	ldr	r4, [pc, #248]	; (801fdd0 <_DrawBitmap+0x984>)
 801fcd8:	6823      	ldr	r3, [r4, #0]
 801fcda:	7c1b      	ldrb	r3, [r3, #16]
 801fcdc:	f013 0303 	ands.w	r3, r3, #3
 801fce0:	d02e      	beq.n	801fd40 <_DrawBitmap+0x8f4>
 801fce2:	2b02      	cmp	r3, #2
 801fce4:	d1db      	bne.n	801fc9e <_DrawBitmap+0x852>
 801fce6:	2f00      	cmp	r7, #0
 801fce8:	d060      	beq.n	801fdac <_DrawBitmap+0x960>
 801fcea:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fcee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fcf0:	9604      	str	r6, [sp, #16]
 801fcf2:	4665      	mov	r5, ip
 801fcf4:	4666      	mov	r6, ip
 801fcf6:	f81b 3004 	ldrb.w	r3, [fp, r4]
 801fcfa:	4621      	mov	r1, r4
 801fcfc:	4638      	mov	r0, r7
 801fcfe:	464a      	mov	r2, r9
 801fd00:	3401      	adds	r4, #1
 801fd02:	b133      	cbz	r3, 801fd12 <_DrawBitmap+0x8c6>
 801fd04:	f8d7 e008 	ldr.w	lr, [r7, #8]
 801fd08:	f845 3c04 	str.w	r3, [r5, #-4]
 801fd0c:	f8de 3000 	ldr.w	r3, [lr]
 801fd10:	4798      	blx	r3
 801fd12:	f1ba 0a01 	subs.w	sl, sl, #1
 801fd16:	f105 0504 	add.w	r5, r5, #4
 801fd1a:	d1ec      	bne.n	801fcf6 <_DrawBitmap+0x8aa>
 801fd1c:	46b4      	mov	ip, r6
 801fd1e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fd20:	9e04      	ldr	r6, [sp, #16]
 801fd22:	e7bb      	b.n	801fc9c <_DrawBitmap+0x850>
 801fd24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fd26:	4661      	mov	r1, ip
 801fd28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd2c:	b11a      	cbz	r2, 801fd36 <_DrawBitmap+0x8ea>
 801fd2e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801fd32:	f841 2c04 	str.w	r2, [r1, #-4]
 801fd36:	4598      	cmp	r8, r3
 801fd38:	f101 0104 	add.w	r1, r1, #4
 801fd3c:	d1f4      	bne.n	801fd28 <_DrawBitmap+0x8dc>
 801fd3e:	e7ad      	b.n	801fc9c <_DrawBitmap+0x850>
 801fd40:	4924      	ldr	r1, [pc, #144]	; (801fdd4 <_DrawBitmap+0x988>)
 801fd42:	9a07      	ldr	r2, [sp, #28]
 801fd44:	680b      	ldr	r3, [r1, #0]
 801fd46:	9925      	ldr	r1, [sp, #148]	; 0x94
 801fd48:	f8cd c00c 	str.w	ip, [sp, #12]
 801fd4c:	4798      	blx	r3
 801fd4e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fd50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801fd54:	4639      	mov	r1, r7
 801fd56:	e7a2      	b.n	801fc9e <_DrawBitmap+0x852>
 801fd58:	f1a0 0c02 	sub.w	ip, r0, #2
 801fd5c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801fd60:	f109 0701 	add.w	r7, r9, #1
 801fd64:	4649      	mov	r1, r9
 801fd66:	441f      	add	r7, r3
 801fd68:	f105 0208 	add.w	r2, r5, #8
 801fd6c:	0920      	lsrs	r0, r4, #4
 801fd6e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801fd72:	bf1c      	itt	ne
 801fd74:	f85a 0020 	ldrne.w	r0, [sl, r0, lsl #2]
 801fd78:	f842 0c08 	strne.w	r0, [r2, #-8]
 801fd7c:	f014 040f 	ands.w	r4, r4, #15
 801fd80:	bf1c      	itt	ne
 801fd82:	f85a 0024 	ldrne.w	r0, [sl, r4, lsl #2]
 801fd86:	f842 0c04 	strne.w	r0, [r2, #-4]
 801fd8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fd8e:	42b9      	cmp	r1, r7
 801fd90:	f102 0208 	add.w	r2, r2, #8
 801fd94:	d1ea      	bne.n	801fd6c <_DrawBitmap+0x920>
 801fd96:	9a08      	ldr	r2, [sp, #32]
 801fd98:	1c91      	adds	r1, r2, #2
 801fd9a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801fd9e:	1c5a      	adds	r2, r3, #1
 801fda0:	9108      	str	r1, [sp, #32]
 801fda2:	ebac 0043 	sub.w	r0, ip, r3, lsl #1
 801fda6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801fdaa:	e58a      	b.n	801f8c2 <_DrawBitmap+0x476>
 801fdac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fdae:	4663      	mov	r3, ip
 801fdb0:	f812 1b01 	ldrb.w	r1, [r2], #1
 801fdb4:	b109      	cbz	r1, 801fdba <_DrawBitmap+0x96e>
 801fdb6:	f843 1c04 	str.w	r1, [r3, #-4]
 801fdba:	4542      	cmp	r2, r8
 801fdbc:	f103 0304 	add.w	r3, r3, #4
 801fdc0:	d1f6      	bne.n	801fdb0 <_DrawBitmap+0x964>
 801fdc2:	e76b      	b.n	801fc9c <_DrawBitmap+0x850>
 801fdc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fdc6:	2900      	cmp	r1, #0
 801fdc8:	f47f abd4 	bne.w	801f574 <_DrawBitmap+0x128>
 801fdcc:	f7ff bb4c 	b.w	801f468 <_DrawBitmap+0x1c>
 801fdd0:	20000280 	.word	0x20000280
 801fdd4:	20000258 	.word	0x20000258

0801fdd8 <_GetPixelIndex>:
 801fdd8:	b570      	push	{r4, r5, r6, lr}
 801fdda:	4b0e      	ldr	r3, [pc, #56]	; (801fe14 <_GetPixelIndex+0x3c>)
 801fddc:	681b      	ldr	r3, [r3, #0]
 801fdde:	b082      	sub	sp, #8
 801fde0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801fde2:	460c      	mov	r4, r1
 801fde4:	4616      	mov	r6, r2
 801fde6:	f005 fd81 	bl	80258ec <GUI_ALLOC_LockH>
 801fdea:	ab02      	add	r3, sp, #8
 801fdec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801fdf0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801fdf4:	68c5      	ldr	r5, [r0, #12]
 801fdf6:	f843 0d04 	str.w	r0, [r3, #-4]!
 801fdfa:	1a76      	subs	r6, r6, r1
 801fdfc:	3018      	adds	r0, #24
 801fdfe:	fb05 0506 	mla	r5, r5, r6, r0
 801fe02:	1aa4      	subs	r4, r4, r2
 801fe04:	4618      	mov	r0, r3
 801fe06:	f005 fd83 	bl	8025910 <GUI_ALLOC_UnlockH>
 801fe0a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 801fe0e:	b002      	add	sp, #8
 801fe10:	bd70      	pop	{r4, r5, r6, pc}
 801fe12:	bf00      	nop
 801fe14:	20000280 	.word	0x20000280

0801fe18 <_SetPixelIndex>:
 801fe18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe1c:	4c1a      	ldr	r4, [pc, #104]	; (801fe88 <_SetPixelIndex+0x70>)
 801fe1e:	6820      	ldr	r0, [r4, #0]
 801fe20:	b083      	sub	sp, #12
 801fe22:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801fe24:	460e      	mov	r6, r1
 801fe26:	4615      	mov	r5, r2
 801fe28:	461f      	mov	r7, r3
 801fe2a:	f005 fd5f 	bl	80258ec <GUI_ALLOC_LockH>
 801fe2e:	6823      	ldr	r3, [r4, #0]
 801fe30:	9000      	str	r0, [sp, #0]
 801fe32:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801fe34:	f005 fd5a 	bl	80258ec <GUI_ALLOC_LockH>
 801fe38:	ac02      	add	r4, sp, #8
 801fe3a:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801fe3e:	68c3      	ldr	r3, [r0, #12]
 801fe40:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801fe44:	f844 0d04 	str.w	r0, [r4, #-4]!
 801fe48:	ebc8 0805 	rsb	r8, r8, r5
 801fe4c:	3018      	adds	r0, #24
 801fe4e:	fb03 0808 	mla	r8, r3, r8, r0
 801fe52:	ebc9 0906 	rsb	r9, r9, r6
 801fe56:	4620      	mov	r0, r4
 801fe58:	f005 fd5a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801fe5c:	f848 7029 	str.w	r7, [r8, r9, lsl #2]
 801fe60:	9b00      	ldr	r3, [sp, #0]
 801fe62:	6958      	ldr	r0, [r3, #20]
 801fe64:	b150      	cbz	r0, 801fe7c <_SetPixelIndex+0x64>
 801fe66:	f005 fd41 	bl	80258ec <GUI_ALLOC_LockH>
 801fe6a:	9001      	str	r0, [sp, #4]
 801fe6c:	6883      	ldr	r3, [r0, #8]
 801fe6e:	4631      	mov	r1, r6
 801fe70:	462a      	mov	r2, r5
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	4798      	blx	r3
 801fe76:	4620      	mov	r0, r4
 801fe78:	f005 fd4a 	bl	8025910 <GUI_ALLOC_UnlockH>
 801fe7c:	4668      	mov	r0, sp
 801fe7e:	f005 fd47 	bl	8025910 <GUI_ALLOC_UnlockH>
 801fe82:	b003      	add	sp, #12
 801fe84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe88:	20000280 	.word	0x20000280

0801fe8c <_XorPixel>:
 801fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe90:	4c1e      	ldr	r4, [pc, #120]	; (801ff0c <_XorPixel+0x80>)
 801fe92:	6823      	ldr	r3, [r4, #0]
 801fe94:	b082      	sub	sp, #8
 801fe96:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801fe98:	4688      	mov	r8, r1
 801fe9a:	4617      	mov	r7, r2
 801fe9c:	f005 fd26 	bl	80258ec <GUI_ALLOC_LockH>
 801fea0:	6823      	ldr	r3, [r4, #0]
 801fea2:	9000      	str	r0, [sp, #0]
 801fea4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801fea6:	f005 fd21 	bl	80258ec <GUI_ALLOC_LockH>
 801feaa:	ac02      	add	r4, sp, #8
 801feac:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801feb0:	f844 0d04 	str.w	r0, [r4, #-4]!
 801feb4:	68c2      	ldr	r2, [r0, #12]
 801feb6:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801feba:	f100 0318 	add.w	r3, r0, #24
 801febe:	1b7d      	subs	r5, r7, r5
 801fec0:	4620      	mov	r0, r4
 801fec2:	fb02 3505 	mla	r5, r2, r5, r3
 801fec6:	f005 fd23 	bl	8025910 <GUI_ALLOC_UnlockH>
 801feca:	9b00      	ldr	r3, [sp, #0]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	691b      	ldr	r3, [r3, #16]
 801fed0:	ebc6 0608 	rsb	r6, r6, r8
 801fed4:	689b      	ldr	r3, [r3, #8]
 801fed6:	4798      	blx	r3
 801fed8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 801fedc:	9a00      	ldr	r2, [sp, #0]
 801fede:	4058      	eors	r0, r3
 801fee0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 801fee4:	6950      	ldr	r0, [r2, #20]
 801fee6:	b150      	cbz	r0, 801fefe <_XorPixel+0x72>
 801fee8:	f005 fd00 	bl	80258ec <GUI_ALLOC_LockH>
 801feec:	9001      	str	r0, [sp, #4]
 801feee:	6883      	ldr	r3, [r0, #8]
 801fef0:	4641      	mov	r1, r8
 801fef2:	463a      	mov	r2, r7
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	4798      	blx	r3
 801fef8:	4620      	mov	r0, r4
 801fefa:	f005 fd09 	bl	8025910 <GUI_ALLOC_UnlockH>
 801fefe:	4668      	mov	r0, sp
 801ff00:	f005 fd06 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ff04:	b002      	add	sp, #8
 801ff06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff0a:	bf00      	nop
 801ff0c:	20000280 	.word	0x20000280

0801ff10 <_DrawVLine>:
 801ff10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff14:	4e36      	ldr	r6, [pc, #216]	; (801fff0 <_DrawVLine+0xe0>)
 801ff16:	6830      	ldr	r0, [r6, #0]
 801ff18:	b084      	sub	sp, #16
 801ff1a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801ff1c:	460f      	mov	r7, r1
 801ff1e:	4614      	mov	r4, r2
 801ff20:	4698      	mov	r8, r3
 801ff22:	f005 fce3 	bl	80258ec <GUI_ALLOC_LockH>
 801ff26:	9001      	str	r0, [sp, #4]
 801ff28:	6940      	ldr	r0, [r0, #20]
 801ff2a:	2800      	cmp	r0, #0
 801ff2c:	d13c      	bne.n	801ffa8 <_DrawVLine+0x98>
 801ff2e:	6833      	ldr	r3, [r6, #0]
 801ff30:	9002      	str	r0, [sp, #8]
 801ff32:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801ff34:	f005 fcda 	bl	80258ec <GUI_ALLOC_LockH>
 801ff38:	4603      	mov	r3, r0
 801ff3a:	a804      	add	r0, sp, #16
 801ff3c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 801ff40:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801ff44:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801ff48:	f840 3d04 	str.w	r3, [r0, #-4]!
 801ff4c:	1a61      	subs	r1, r4, r1
 801ff4e:	f103 0218 	add.w	r2, r3, #24
 801ff52:	fb0e 2301 	mla	r3, lr, r1, r2
 801ff56:	1b7d      	subs	r5, r7, r5
 801ff58:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801ff5c:	f005 fcd8 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ff60:	6833      	ldr	r3, [r6, #0]
 801ff62:	9a01      	ldr	r2, [sp, #4]
 801ff64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801ff66:	7c1b      	ldrb	r3, [r3, #16]
 801ff68:	f8d1 a000 	ldr.w	sl, [r1]
 801ff6c:	f8d2 900c 	ldr.w	r9, [r2, #12]
 801ff70:	07db      	lsls	r3, r3, #31
 801ff72:	d41c      	bmi.n	801ffae <_DrawVLine+0x9e>
 801ff74:	9802      	ldr	r0, [sp, #8]
 801ff76:	b908      	cbnz	r0, 801ff7c <_DrawVLine+0x6c>
 801ff78:	e030      	b.n	801ffdc <_DrawVLine+0xcc>
 801ff7a:	9802      	ldr	r0, [sp, #8]
 801ff7c:	6883      	ldr	r3, [r0, #8]
 801ff7e:	4622      	mov	r2, r4
 801ff80:	681e      	ldr	r6, [r3, #0]
 801ff82:	4639      	mov	r1, r7
 801ff84:	3401      	adds	r4, #1
 801ff86:	47b0      	blx	r6
 801ff88:	45a0      	cmp	r8, r4
 801ff8a:	f8c5 a000 	str.w	sl, [r5]
 801ff8e:	444d      	add	r5, r9
 801ff90:	daf3      	bge.n	801ff7a <_DrawVLine+0x6a>
 801ff92:	a801      	add	r0, sp, #4
 801ff94:	f005 fcbc 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ff98:	9b02      	ldr	r3, [sp, #8]
 801ff9a:	b113      	cbz	r3, 801ffa2 <_DrawVLine+0x92>
 801ff9c:	a802      	add	r0, sp, #8
 801ff9e:	f005 fcb7 	bl	8025910 <GUI_ALLOC_UnlockH>
 801ffa2:	b004      	add	sp, #16
 801ffa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffa8:	f005 fca0 	bl	80258ec <GUI_ALLOC_LockH>
 801ffac:	e7bf      	b.n	801ff2e <_DrawVLine+0x1e>
 801ffae:	6813      	ldr	r3, [r2, #0]
 801ffb0:	691b      	ldr	r3, [r3, #16]
 801ffb2:	689b      	ldr	r3, [r3, #8]
 801ffb4:	4798      	blx	r3
 801ffb6:	4606      	mov	r6, r0
 801ffb8:	9b02      	ldr	r3, [sp, #8]
 801ffba:	4622      	mov	r2, r4
 801ffbc:	4639      	mov	r1, r7
 801ffbe:	3401      	adds	r4, #1
 801ffc0:	4618      	mov	r0, r3
 801ffc2:	b113      	cbz	r3, 801ffca <_DrawVLine+0xba>
 801ffc4:	689b      	ldr	r3, [r3, #8]
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	4798      	blx	r3
 801ffca:	9a01      	ldr	r2, [sp, #4]
 801ffcc:	682b      	ldr	r3, [r5, #0]
 801ffce:	68d2      	ldr	r2, [r2, #12]
 801ffd0:	4073      	eors	r3, r6
 801ffd2:	4544      	cmp	r4, r8
 801ffd4:	602b      	str	r3, [r5, #0]
 801ffd6:	4415      	add	r5, r2
 801ffd8:	ddee      	ble.n	801ffb8 <_DrawVLine+0xa8>
 801ffda:	e7da      	b.n	801ff92 <_DrawVLine+0x82>
 801ffdc:	ebc4 0308 	rsb	r3, r4, r8
 801ffe0:	3301      	adds	r3, #1
 801ffe2:	3b01      	subs	r3, #1
 801ffe4:	f8c5 a000 	str.w	sl, [r5]
 801ffe8:	444d      	add	r5, r9
 801ffea:	d1fa      	bne.n	801ffe2 <_DrawVLine+0xd2>
 801ffec:	e7d1      	b.n	801ff92 <_DrawVLine+0x82>
 801ffee:	bf00      	nop
 801fff0:	20000280 	.word	0x20000280

0801fff4 <_FillRect>:
 801fff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fff8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80200e0 <_FillRect+0xec>
 801fffc:	f8d8 0000 	ldr.w	r0, [r8]
 8020000:	b087      	sub	sp, #28
 8020002:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020004:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8020008:	468b      	mov	fp, r1
 802000a:	4615      	mov	r5, r2
 802000c:	461f      	mov	r7, r3
 802000e:	f005 fc6d 	bl	80258ec <GUI_ALLOC_LockH>
 8020012:	f8d8 3000 	ldr.w	r3, [r8]
 8020016:	9004      	str	r0, [sp, #16]
 8020018:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802001a:	f005 fc67 	bl	80258ec <GUI_ALLOC_LockH>
 802001e:	f10d 0c18 	add.w	ip, sp, #24
 8020022:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020026:	68c2      	ldr	r2, [r0, #12]
 8020028:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 802002c:	f84c 0d04 	str.w	r0, [ip, #-4]!
 8020030:	1aeb      	subs	r3, r5, r3
 8020032:	3018      	adds	r0, #24
 8020034:	fb02 0303 	mla	r3, r2, r3, r0
 8020038:	ebc6 060b 	rsb	r6, r6, fp
 802003c:	4660      	mov	r0, ip
 802003e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8020042:	f8cd c00c 	str.w	ip, [sp, #12]
 8020046:	f005 fc63 	bl	8025910 <GUI_ALLOC_UnlockH>
 802004a:	9a04      	ldr	r2, [sp, #16]
 802004c:	f8d8 3000 	ldr.w	r3, [r8]
 8020050:	6950      	ldr	r0, [r2, #20]
 8020052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020054:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8020058:	681c      	ldr	r4, [r3, #0]
 802005a:	ebcb 0707 	rsb	r7, fp, r7
 802005e:	3701      	adds	r7, #1
 8020060:	bb58      	cbnz	r0, 80200ba <_FillRect+0xc6>
 8020062:	454d      	cmp	r5, r9
 8020064:	dc10      	bgt.n	8020088 <_FillRect+0x94>
 8020066:	f8d8 3000 	ldr.w	r3, [r8]
 802006a:	7c1b      	ldrb	r3, [r3, #16]
 802006c:	07db      	lsls	r3, r3, #31
 802006e:	d411      	bmi.n	8020094 <_FillRect+0xa0>
 8020070:	2f00      	cmp	r7, #0
 8020072:	dd05      	ble.n	8020080 <_FillRect+0x8c>
 8020074:	4639      	mov	r1, r7
 8020076:	4630      	mov	r0, r6
 8020078:	3901      	subs	r1, #1
 802007a:	f840 4b04 	str.w	r4, [r0], #4
 802007e:	d1fb      	bne.n	8020078 <_FillRect+0x84>
 8020080:	3501      	adds	r5, #1
 8020082:	45a9      	cmp	r9, r5
 8020084:	4456      	add	r6, sl
 8020086:	daee      	bge.n	8020066 <_FillRect+0x72>
 8020088:	a804      	add	r0, sp, #16
 802008a:	f005 fc41 	bl	8025910 <GUI_ALLOC_UnlockH>
 802008e:	b007      	add	sp, #28
 8020090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020094:	9b04      	ldr	r3, [sp, #16]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	691b      	ldr	r3, [r3, #16]
 802009a:	689b      	ldr	r3, [r3, #8]
 802009c:	4798      	blx	r3
 802009e:	4632      	mov	r2, r6
 80200a0:	463b      	mov	r3, r7
 80200a2:	6811      	ldr	r1, [r2, #0]
 80200a4:	3b01      	subs	r3, #1
 80200a6:	ea81 0100 	eor.w	r1, r1, r0
 80200aa:	f842 1b04 	str.w	r1, [r2], #4
 80200ae:	d1f8      	bne.n	80200a2 <_FillRect+0xae>
 80200b0:	3501      	adds	r5, #1
 80200b2:	45a9      	cmp	r9, r5
 80200b4:	4456      	add	r6, sl
 80200b6:	dad6      	bge.n	8020066 <_FillRect+0x72>
 80200b8:	e7e6      	b.n	8020088 <_FillRect+0x94>
 80200ba:	f005 fc17 	bl	80258ec <GUI_ALLOC_LockH>
 80200be:	ebc5 0309 	rsb	r3, r5, r9
 80200c2:	3301      	adds	r3, #1
 80200c4:	9300      	str	r3, [sp, #0]
 80200c6:	4659      	mov	r1, fp
 80200c8:	462a      	mov	r2, r5
 80200ca:	463b      	mov	r3, r7
 80200cc:	9005      	str	r0, [sp, #20]
 80200ce:	f008 fc37 	bl	8028940 <GUI_USAGE_AddRect>
 80200d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80200d6:	4660      	mov	r0, ip
 80200d8:	f005 fc1a 	bl	8025910 <GUI_ALLOC_UnlockH>
 80200dc:	e7c1      	b.n	8020062 <_FillRect+0x6e>
 80200de:	bf00      	nop
 80200e0:	20000280 	.word	0x20000280

080200e4 <_DrawHLine>:
 80200e4:	b500      	push	{lr}
 80200e6:	b083      	sub	sp, #12
 80200e8:	9200      	str	r2, [sp, #0]
 80200ea:	f7ff ff83 	bl	801fff4 <_FillRect>
 80200ee:	b003      	add	sp, #12
 80200f0:	f85d fb04 	ldr.w	pc, [sp], #4

080200f4 <GUI_MEMDEV__WriteToActiveAt>:
 80200f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200f8:	b082      	sub	sp, #8
 80200fa:	460e      	mov	r6, r1
 80200fc:	4690      	mov	r8, r2
 80200fe:	4607      	mov	r7, r0
 8020100:	f005 fbf4 	bl	80258ec <GUI_ALLOC_LockH>
 8020104:	6805      	ldr	r5, [r0, #0]
 8020106:	ac02      	add	r4, sp, #8
 8020108:	68eb      	ldr	r3, [r5, #12]
 802010a:	f844 0d04 	str.w	r0, [r4, #-4]!
 802010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020110:	2000      	movs	r0, #0
 8020112:	2116      	movs	r1, #22
 8020114:	4798      	blx	r3
 8020116:	4605      	mov	r5, r0
 8020118:	4620      	mov	r0, r4
 802011a:	f005 fbf9 	bl	8025910 <GUI_ALLOC_UnlockH>
 802011e:	b11d      	cbz	r5, 8020128 <GUI_MEMDEV__WriteToActiveAt+0x34>
 8020120:	4638      	mov	r0, r7
 8020122:	4631      	mov	r1, r6
 8020124:	4642      	mov	r2, r8
 8020126:	47a8      	blx	r5
 8020128:	b002      	add	sp, #8
 802012a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802012e:	bf00      	nop

08020130 <GUI_MEMDEV__CreateFixed>:
 8020130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020134:	4f4a      	ldr	r7, [pc, #296]	; (8020260 <GUI_MEMDEV__CreateFixed+0x130>)
 8020136:	b087      	sub	sp, #28
 8020138:	683c      	ldr	r4, [r7, #0]
 802013a:	4682      	mov	sl, r0
 802013c:	468b      	mov	fp, r1
 802013e:	4616      	mov	r6, r2
 8020140:	461d      	mov	r5, r3
 8020142:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020144:	7c63      	ldrb	r3, [r4, #17]
 8020146:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020148:	2200      	movs	r2, #0
 802014a:	f003 fd95 	bl	8023c78 <GUI_DEVICE_Create>
 802014e:	4604      	mov	r4, r0
 8020150:	2800      	cmp	r0, #0
 8020152:	d031      	beq.n	80201b8 <GUI_MEMDEV__CreateFixed+0x88>
 8020154:	6903      	ldr	r3, [r0, #16]
 8020156:	689b      	ldr	r3, [r3, #8]
 8020158:	4798      	blx	r3
 802015a:	f001 fb09 	bl	8021770 <LCD__GetBPPDevice>
 802015e:	fb06 f800 	mul.w	r8, r6, r0
 8020162:	4681      	mov	r9, r0
 8020164:	f005 fbee 	bl	8025944 <GUI_ALLOC_RequestSize>
 8020168:	9910      	ldr	r1, [sp, #64]	; 0x40
 802016a:	f108 0807 	add.w	r8, r8, #7
 802016e:	f011 0c01 	ands.w	ip, r1, #1
 8020172:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8020176:	d105      	bne.n	8020184 <GUI_MEMDEV__CreateFixed+0x54>
 8020178:	2800      	cmp	r0, #0
 802017a:	bfb8      	it	lt
 802017c:	3003      	addlt	r0, #3
 802017e:	1080      	asrs	r0, r0, #2
 8020180:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020184:	2d00      	cmp	r5, #0
 8020186:	dd42      	ble.n	802020e <GUI_MEMDEV__CreateFixed+0xde>
 8020188:	f1bc 0f00 	cmp.w	ip, #0
 802018c:	d04a      	beq.n	8020224 <GUI_MEMDEV__CreateFixed+0xf4>
 802018e:	2300      	movs	r3, #0
 8020190:	9303      	str	r3, [sp, #12]
 8020192:	2d00      	cmp	r5, #0
 8020194:	dd60      	ble.n	8020258 <GUI_MEMDEV__CreateFixed+0x128>
 8020196:	fb08 f005 	mul.w	r0, r8, r5
 802019a:	3018      	adds	r0, #24
 802019c:	f1bc 0f00 	cmp.w	ip, #0
 80201a0:	d00e      	beq.n	80201c0 <GUI_MEMDEV__CreateFixed+0x90>
 80201a2:	f005 fb8b 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 80201a6:	4602      	mov	r2, r0
 80201a8:	b97a      	cbnz	r2, 80201ca <GUI_MEMDEV__CreateFixed+0x9a>
 80201aa:	4620      	mov	r0, r4
 80201ac:	9202      	str	r2, [sp, #8]
 80201ae:	f003 fd61 	bl	8023c74 <GUI_DEVICE_Delete>
 80201b2:	9c03      	ldr	r4, [sp, #12]
 80201b4:	2c00      	cmp	r4, #0
 80201b6:	d147      	bne.n	8020248 <GUI_MEMDEV__CreateFixed+0x118>
 80201b8:	2000      	movs	r0, #0
 80201ba:	b007      	add	sp, #28
 80201bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201c0:	f005 fd1c 	bl	8025bfc <GUI_ALLOC_AllocZero>
 80201c4:	4602      	mov	r2, r0
 80201c6:	2a00      	cmp	r2, #0
 80201c8:	d0ef      	beq.n	80201aa <GUI_MEMDEV__CreateFixed+0x7a>
 80201ca:	4610      	mov	r0, r2
 80201cc:	9202      	str	r2, [sp, #8]
 80201ce:	f005 fb8d 	bl	80258ec <GUI_ALLOC_LockH>
 80201d2:	4603      	mov	r3, r0
 80201d4:	a806      	add	r0, sp, #24
 80201d6:	815d      	strh	r5, [r3, #10]
 80201d8:	9d03      	ldr	r5, [sp, #12]
 80201da:	f8a3 a004 	strh.w	sl, [r3, #4]
 80201de:	f840 3d04 	str.w	r3, [r0, #-4]!
 80201e2:	f8a3 b006 	strh.w	fp, [r3, #6]
 80201e6:	811e      	strh	r6, [r3, #8]
 80201e8:	f8c3 800c 	str.w	r8, [r3, #12]
 80201ec:	f8c3 9010 	str.w	r9, [r3, #16]
 80201f0:	615d      	str	r5, [r3, #20]
 80201f2:	601c      	str	r4, [r3, #0]
 80201f4:	f005 fb8c 	bl	8025910 <GUI_ALLOC_UnlockH>
 80201f8:	9a02      	ldr	r2, [sp, #8]
 80201fa:	683b      	ldr	r3, [r7, #0]
 80201fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80201fe:	6125      	str	r5, [r4, #16]
 8020200:	60a2      	str	r2, [r4, #8]
 8020202:	7c5b      	ldrb	r3, [r3, #17]
 8020204:	61a3      	str	r3, [r4, #24]
 8020206:	4610      	mov	r0, r2
 8020208:	b007      	add	sp, #28
 802020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802020e:	f1b8 0f00 	cmp.w	r8, #0
 8020212:	d115      	bne.n	8020240 <GUI_MEMDEV__CreateFixed+0x110>
 8020214:	4640      	mov	r0, r8
 8020216:	426d      	negs	r5, r5
 8020218:	42a8      	cmp	r0, r5
 802021a:	bfb8      	it	lt
 802021c:	4605      	movlt	r5, r0
 802021e:	f1bc 0f00 	cmp.w	ip, #0
 8020222:	d1b4      	bne.n	802018e <GUI_MEMDEV__CreateFixed+0x5e>
 8020224:	f8cd c000 	str.w	ip, [sp]
 8020228:	4650      	mov	r0, sl
 802022a:	4659      	mov	r1, fp
 802022c:	4632      	mov	r2, r6
 802022e:	462b      	mov	r3, r5
 8020230:	f8cd c008 	str.w	ip, [sp, #8]
 8020234:	f008 fb38 	bl	80288a8 <GUI_USAGE_BM_Create>
 8020238:	f8dd c008 	ldr.w	ip, [sp, #8]
 802023c:	9003      	str	r0, [sp, #12]
 802023e:	e7a8      	b.n	8020192 <GUI_MEMDEV__CreateFixed+0x62>
 8020240:	3818      	subs	r0, #24
 8020242:	fbb0 f0f8 	udiv	r0, r0, r8
 8020246:	e7e6      	b.n	8020216 <GUI_MEMDEV__CreateFixed+0xe6>
 8020248:	4620      	mov	r0, r4
 802024a:	f005 fc61 	bl	8025b10 <GUI_ALLOC_Free>
 802024e:	9a02      	ldr	r2, [sp, #8]
 8020250:	4610      	mov	r0, r2
 8020252:	b007      	add	sp, #28
 8020254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020258:	4620      	mov	r0, r4
 802025a:	f003 fd0b 	bl	8023c74 <GUI_DEVICE_Delete>
 802025e:	e7ab      	b.n	80201b8 <GUI_MEMDEV__CreateFixed+0x88>
 8020260:	20000280 	.word	0x20000280

08020264 <GUI_MEMDEV_GetBitsPerPixel>:
 8020264:	b530      	push	{r4, r5, lr}
 8020266:	4604      	mov	r4, r0
 8020268:	b083      	sub	sp, #12
 802026a:	b198      	cbz	r0, 8020294 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 802026c:	f002 ffbe 	bl	80231ec <GUI_Lock>
 8020270:	4620      	mov	r0, r4
 8020272:	f005 fb3b 	bl	80258ec <GUI_ALLOC_LockH>
 8020276:	6803      	ldr	r3, [r0, #0]
 8020278:	ad02      	add	r5, sp, #8
 802027a:	691b      	ldr	r3, [r3, #16]
 802027c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8020280:	689b      	ldr	r3, [r3, #8]
 8020282:	4798      	blx	r3
 8020284:	f001 fa74 	bl	8021770 <LCD__GetBPPDevice>
 8020288:	4604      	mov	r4, r0
 802028a:	4628      	mov	r0, r5
 802028c:	f005 fb40 	bl	8025910 <GUI_ALLOC_UnlockH>
 8020290:	f002 ffa2 	bl	80231d8 <GUI_Unlock>
 8020294:	4620      	mov	r0, r4
 8020296:	b003      	add	sp, #12
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	bf00      	nop

0802029c <GUI_MEMDEV_Delete>:
 802029c:	b510      	push	{r4, lr}
 802029e:	4604      	mov	r4, r0
 80202a0:	b082      	sub	sp, #8
 80202a2:	b908      	cbnz	r0, 80202a8 <GUI_MEMDEV_Delete+0xc>
 80202a4:	b002      	add	sp, #8
 80202a6:	bd10      	pop	{r4, pc}
 80202a8:	f002 ffa0 	bl	80231ec <GUI_Lock>
 80202ac:	4b0f      	ldr	r3, [pc, #60]	; (80202ec <GUI_MEMDEV_Delete+0x50>)
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80202b2:	42a3      	cmp	r3, r4
 80202b4:	d017      	beq.n	80202e6 <GUI_MEMDEV_Delete+0x4a>
 80202b6:	4620      	mov	r0, r4
 80202b8:	f005 fb18 	bl	80258ec <GUI_ALLOC_LockH>
 80202bc:	6943      	ldr	r3, [r0, #20]
 80202be:	9001      	str	r0, [sp, #4]
 80202c0:	b963      	cbnz	r3, 80202dc <GUI_MEMDEV_Delete+0x40>
 80202c2:	6800      	ldr	r0, [r0, #0]
 80202c4:	f003 fcd6 	bl	8023c74 <GUI_DEVICE_Delete>
 80202c8:	a801      	add	r0, sp, #4
 80202ca:	f005 fb21 	bl	8025910 <GUI_ALLOC_UnlockH>
 80202ce:	4620      	mov	r0, r4
 80202d0:	f005 fc1e 	bl	8025b10 <GUI_ALLOC_Free>
 80202d4:	f002 ff80 	bl	80231d8 <GUI_Unlock>
 80202d8:	b002      	add	sp, #8
 80202da:	bd10      	pop	{r4, pc}
 80202dc:	4618      	mov	r0, r3
 80202de:	f008 fb15 	bl	802890c <GUI_USAGE_DecUseCnt>
 80202e2:	9801      	ldr	r0, [sp, #4]
 80202e4:	e7ed      	b.n	80202c2 <GUI_MEMDEV_Delete+0x26>
 80202e6:	f004 fa03 	bl	80246f0 <GUI_SelectLCD>
 80202ea:	e7e4      	b.n	80202b6 <GUI_MEMDEV_Delete+0x1a>
 80202ec:	20000280 	.word	0x20000280

080202f0 <GUI_MEMDEV_CreateEx>:
 80202f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f4:	b085      	sub	sp, #20
 80202f6:	4680      	mov	r8, r0
 80202f8:	4692      	mov	sl, r2
 80202fa:	469b      	mov	fp, r3
 80202fc:	4689      	mov	r9, r1
 80202fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020300:	f002 ff74 	bl	80231ec <GUI_Lock>
 8020304:	4a19      	ldr	r2, [pc, #100]	; (802036c <GUI_MEMDEV_CreateEx+0x7c>)
 8020306:	4b1a      	ldr	r3, [pc, #104]	; (8020370 <GUI_MEMDEV_CreateEx+0x80>)
 8020308:	6812      	ldr	r2, [r2, #0]
 802030a:	7c50      	ldrb	r0, [r2, #17]
 802030c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8020310:	e001      	b.n	8020316 <GUI_MEMDEV_CreateEx+0x26>
 8020312:	6824      	ldr	r4, [r4, #0]
 8020314:	b314      	cbz	r4, 802035c <GUI_MEMDEV_CreateEx+0x6c>
 8020316:	68e5      	ldr	r5, [r4, #12]
 8020318:	682e      	ldr	r6, [r5, #0]
 802031a:	2e04      	cmp	r6, #4
 802031c:	d1f9      	bne.n	8020312 <GUI_MEMDEV_CreateEx+0x22>
 802031e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8020320:	4620      	mov	r0, r4
 8020322:	2101      	movs	r1, #1
 8020324:	4798      	blx	r3
 8020326:	4605      	mov	r5, r0
 8020328:	b190      	cbz	r0, 8020350 <GUI_MEMDEV_CreateEx+0x60>
 802032a:	6924      	ldr	r4, [r4, #16]
 802032c:	68a3      	ldr	r3, [r4, #8]
 802032e:	4798      	blx	r3
 8020330:	3001      	adds	r0, #1
 8020332:	bf08      	it	eq
 8020334:	4c0f      	ldreq	r4, [pc, #60]	; (8020374 <GUI_MEMDEV_CreateEx+0x84>)
 8020336:	9501      	str	r5, [sp, #4]
 8020338:	bf08      	it	eq
 802033a:	f047 0701 	orreq.w	r7, r7, #1
 802033e:	9700      	str	r7, [sp, #0]
 8020340:	9402      	str	r4, [sp, #8]
 8020342:	4640      	mov	r0, r8
 8020344:	4649      	mov	r1, r9
 8020346:	4652      	mov	r2, sl
 8020348:	465b      	mov	r3, fp
 802034a:	f7ff fef1 	bl	8020130 <GUI_MEMDEV__CreateFixed>
 802034e:	4605      	mov	r5, r0
 8020350:	f002 ff42 	bl	80231d8 <GUI_Unlock>
 8020354:	4628      	mov	r0, r5
 8020356:	b005      	add	sp, #20
 8020358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802035c:	f003 fc74 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8020360:	4604      	mov	r4, r0
 8020362:	b108      	cbz	r0, 8020368 <GUI_MEMDEV_CreateEx+0x78>
 8020364:	68c5      	ldr	r5, [r0, #12]
 8020366:	e7da      	b.n	802031e <GUI_MEMDEV_CreateEx+0x2e>
 8020368:	4620      	mov	r0, r4
 802036a:	e7f4      	b.n	8020356 <GUI_MEMDEV_CreateEx+0x66>
 802036c:	20000280 	.word	0x20000280
 8020370:	2002cc24 	.word	0x2002cc24
 8020374:	08032080 	.word	0x08032080

08020378 <GUI_MEMDEV_Select>:
 8020378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802037a:	4f16      	ldr	r7, [pc, #88]	; (80203d4 <GUI_MEMDEV_Select+0x5c>)
 802037c:	b083      	sub	sp, #12
 802037e:	4604      	mov	r4, r0
 8020380:	f002 ff34 	bl	80231ec <GUI_Lock>
 8020384:	683b      	ldr	r3, [r7, #0]
 8020386:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8020388:	b1e4      	cbz	r4, 80203c4 <GUI_MEMDEV_Select+0x4c>
 802038a:	b9c6      	cbnz	r6, 80203be <GUI_MEMDEV_Select+0x46>
 802038c:	f7fe fc8e 	bl	801ecac <WM_Deactivate>
 8020390:	4620      	mov	r0, r4
 8020392:	f005 faab 	bl	80258ec <GUI_ALLOC_LockH>
 8020396:	ad02      	add	r5, sp, #8
 8020398:	683b      	ldr	r3, [r7, #0]
 802039a:	f845 0d04 	str.w	r0, [r5, #-4]!
 802039e:	661c      	str	r4, [r3, #96]	; 0x60
 80203a0:	6800      	ldr	r0, [r0, #0]
 80203a2:	f003 fcad 	bl	8023d00 <GUI_DEVICE_Link>
 80203a6:	4628      	mov	r0, r5
 80203a8:	f005 fab2 	bl	8025910 <GUI_ALLOC_UnlockH>
 80203ac:	f000 ffc4 	bl	8021338 <LCD_UpdateColorIndices>
 80203b0:	f001 fdbe 	bl	8021f30 <LCD_SetClipRectMax>
 80203b4:	f002 ff10 	bl	80231d8 <GUI_Unlock>
 80203b8:	4630      	mov	r0, r6
 80203ba:	b003      	add	sp, #12
 80203bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203be:	f004 f997 	bl	80246f0 <GUI_SelectLCD>
 80203c2:	e7e3      	b.n	802038c <GUI_MEMDEV_Select+0x14>
 80203c4:	f004 f994 	bl	80246f0 <GUI_SelectLCD>
 80203c8:	f002 ff06 	bl	80231d8 <GUI_Unlock>
 80203cc:	4630      	mov	r0, r6
 80203ce:	b003      	add	sp, #12
 80203d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203d2:	bf00      	nop
 80203d4:	20000280 	.word	0x20000280

080203d8 <GUI_MEMDEV_CopyToLCDAt>:
 80203d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203dc:	4604      	mov	r4, r0
 80203de:	b084      	sub	sp, #16
 80203e0:	460d      	mov	r5, r1
 80203e2:	4616      	mov	r6, r2
 80203e4:	b910      	cbnz	r0, 80203ec <GUI_MEMDEV_CopyToLCDAt+0x14>
 80203e6:	b004      	add	sp, #16
 80203e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203ec:	f002 fefe 	bl	80231ec <GUI_Lock>
 80203f0:	2000      	movs	r0, #0
 80203f2:	f004 f9ed 	bl	80247d0 <GUI_SetDrawMode>
 80203f6:	4f33      	ldr	r7, [pc, #204]	; (80204c4 <GUI_MEMDEV_CopyToLCDAt+0xec>)
 80203f8:	683b      	ldr	r3, [r7, #0]
 80203fa:	4681      	mov	r9, r0
 80203fc:	4620      	mov	r0, r4
 80203fe:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8020402:	f005 fa73 	bl	80258ec <GUI_ALLOC_LockH>
 8020406:	6803      	ldr	r3, [r0, #0]
 8020408:	9000      	str	r0, [sp, #0]
 802040a:	6998      	ldr	r0, [r3, #24]
 802040c:	f003 f80e 	bl	802342c <GUI_SelectLayer>
 8020410:	4b2d      	ldr	r3, [pc, #180]	; (80204c8 <GUI_MEMDEV_CopyToLCDAt+0xf0>)
 8020412:	429d      	cmp	r5, r3
 8020414:	9b00      	ldr	r3, [sp, #0]
 8020416:	bf04      	itt	eq
 8020418:	f9b3 5004 	ldrsheq.w	r5, [r3, #4]
 802041c:	f9b3 6006 	ldrsheq.w	r6, [r3, #6]
 8020420:	891a      	ldrh	r2, [r3, #8]
 8020422:	895b      	ldrh	r3, [r3, #10]
 8020424:	f8ad 5008 	strh.w	r5, [sp, #8]
 8020428:	3a01      	subs	r2, #1
 802042a:	3b01      	subs	r3, #1
 802042c:	442a      	add	r2, r5
 802042e:	4433      	add	r3, r6
 8020430:	4682      	mov	sl, r0
 8020432:	f8ad 200c 	strh.w	r2, [sp, #12]
 8020436:	f8ad 300e 	strh.w	r3, [sp, #14]
 802043a:	f8ad 600a 	strh.w	r6, [sp, #10]
 802043e:	f7fe fc2d 	bl	801ec9c <WM_Activate>
 8020442:	4668      	mov	r0, sp
 8020444:	f005 fa64 	bl	8025910 <GUI_ALLOC_UnlockH>
 8020448:	a802      	add	r0, sp, #8
 802044a:	f7fe f9af 	bl	801e7ac <WM__InitIVRSearch>
 802044e:	bb48      	cbnz	r0, 80204a4 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 8020450:	4650      	mov	r0, sl
 8020452:	f002 ffeb 	bl	802342c <GUI_SelectLayer>
 8020456:	f002 fec9 	bl	80231ec <GUI_Lock>
 802045a:	683b      	ldr	r3, [r7, #0]
 802045c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802045e:	f1b8 0f00 	cmp.w	r8, #0
 8020462:	d02c      	beq.n	80204be <GUI_MEMDEV_CopyToLCDAt+0xe6>
 8020464:	bb43      	cbnz	r3, 80204b8 <GUI_MEMDEV_CopyToLCDAt+0xe0>
 8020466:	f7fe fc21 	bl	801ecac <WM_Deactivate>
 802046a:	4640      	mov	r0, r8
 802046c:	f005 fa3e 	bl	80258ec <GUI_ALLOC_LockH>
 8020470:	ac04      	add	r4, sp, #16
 8020472:	683b      	ldr	r3, [r7, #0]
 8020474:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8020478:	f8c3 8060 	str.w	r8, [r3, #96]	; 0x60
 802047c:	6800      	ldr	r0, [r0, #0]
 802047e:	f003 fc3f 	bl	8023d00 <GUI_DEVICE_Link>
 8020482:	4620      	mov	r0, r4
 8020484:	f005 fa44 	bl	8025910 <GUI_ALLOC_UnlockH>
 8020488:	f000 ff56 	bl	8021338 <LCD_UpdateColorIndices>
 802048c:	f001 fd50 	bl	8021f30 <LCD_SetClipRectMax>
 8020490:	f002 fea2 	bl	80231d8 <GUI_Unlock>
 8020494:	4648      	mov	r0, r9
 8020496:	f004 f99b 	bl	80247d0 <GUI_SetDrawMode>
 802049a:	f002 fe9d 	bl	80231d8 <GUI_Unlock>
 802049e:	b004      	add	sp, #16
 80204a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204a4:	4620      	mov	r0, r4
 80204a6:	4629      	mov	r1, r5
 80204a8:	4632      	mov	r2, r6
 80204aa:	f007 faef 	bl	8027a8c <GUI_MEMDEV__WriteToActiveOpaque>
 80204ae:	f7fe f857 	bl	801e560 <WM__GetNextIVR>
 80204b2:	2800      	cmp	r0, #0
 80204b4:	d1f6      	bne.n	80204a4 <GUI_MEMDEV_CopyToLCDAt+0xcc>
 80204b6:	e7cb      	b.n	8020450 <GUI_MEMDEV_CopyToLCDAt+0x78>
 80204b8:	f004 f91a 	bl	80246f0 <GUI_SelectLCD>
 80204bc:	e7d3      	b.n	8020466 <GUI_MEMDEV_CopyToLCDAt+0x8e>
 80204be:	f004 f917 	bl	80246f0 <GUI_SelectLCD>
 80204c2:	e7e5      	b.n	8020490 <GUI_MEMDEV_CopyToLCDAt+0xb8>
 80204c4:	20000280 	.word	0x20000280
 80204c8:	fffff001 	.word	0xfffff001

080204cc <GUI_MEMDEV_CopyToLCD>:
 80204cc:	4901      	ldr	r1, [pc, #4]	; (80204d4 <GUI_MEMDEV_CopyToLCD+0x8>)
 80204ce:	460a      	mov	r2, r1
 80204d0:	f7ff bf82 	b.w	80203d8 <GUI_MEMDEV_CopyToLCDAt>
 80204d4:	fffff001 	.word	0xfffff001

080204d8 <_GetRect>:
 80204d8:	6883      	ldr	r3, [r0, #8]
 80204da:	695a      	ldr	r2, [r3, #20]
 80204dc:	699b      	ldr	r3, [r3, #24]
 80204de:	3a01      	subs	r2, #1
 80204e0:	1e58      	subs	r0, r3, #1
 80204e2:	2300      	movs	r3, #0
 80204e4:	808a      	strh	r2, [r1, #4]
 80204e6:	80c8      	strh	r0, [r1, #6]
 80204e8:	800b      	strh	r3, [r1, #0]
 80204ea:	804b      	strh	r3, [r1, #2]
 80204ec:	4770      	bx	lr
 80204ee:	bf00      	nop

080204f0 <_SetPixelIndex>:
 80204f0:	b410      	push	{r4}
 80204f2:	6880      	ldr	r0, [r0, #8]
 80204f4:	69c4      	ldr	r4, [r0, #28]
 80204f6:	6800      	ldr	r0, [r0, #0]
 80204f8:	fb04 1202 	mla	r2, r4, r2, r1
 80204fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020500:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8020504:	4770      	bx	lr
 8020506:	bf00      	nop

08020508 <_GetPixelIndex>:
 8020508:	6883      	ldr	r3, [r0, #8]
 802050a:	69d8      	ldr	r0, [r3, #28]
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	fb00 1202 	mla	r2, r0, r2, r1
 8020512:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020516:	4770      	bx	lr

08020518 <_XorPixel>:
 8020518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802051a:	6883      	ldr	r3, [r0, #8]
 802051c:	69df      	ldr	r7, [r3, #28]
 802051e:	460d      	mov	r5, r1
 8020520:	6901      	ldr	r1, [r0, #16]
 8020522:	fb07 5702 	mla	r7, r7, r2, r5
 8020526:	4604      	mov	r4, r0
 8020528:	6818      	ldr	r0, [r3, #0]
 802052a:	688b      	ldr	r3, [r1, #8]
 802052c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8020530:	4616      	mov	r6, r2
 8020532:	4798      	blx	r3
 8020534:	68a3      	ldr	r3, [r4, #8]
 8020536:	69da      	ldr	r2, [r3, #28]
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	fb02 5506 	mla	r5, r2, r6, r5
 802053e:	4078      	eors	r0, r7
 8020540:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8020544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020546:	bf00      	nop

08020548 <_GetDevProp>:
 8020548:	3901      	subs	r1, #1
 802054a:	6883      	ldr	r3, [r0, #8]
 802054c:	290d      	cmp	r1, #13
 802054e:	d816      	bhi.n	802057e <_GetDevProp+0x36>
 8020550:	e8df f001 	tbb	[pc, r1]
 8020554:	13110d0b 	.word	0x13110d0b
 8020558:	0f151515 	.word	0x0f151515
 802055c:	07090907 	.word	0x07090907
 8020560:	0707      	.short	0x0707
 8020562:	2000      	movs	r0, #0
 8020564:	4770      	bx	lr
 8020566:	2001      	movs	r0, #1
 8020568:	4770      	bx	lr
 802056a:	68d8      	ldr	r0, [r3, #12]
 802056c:	4770      	bx	lr
 802056e:	6918      	ldr	r0, [r3, #16]
 8020570:	4770      	bx	lr
 8020572:	2020      	movs	r0, #32
 8020574:	4770      	bx	lr
 8020576:	6958      	ldr	r0, [r3, #20]
 8020578:	4770      	bx	lr
 802057a:	6998      	ldr	r0, [r3, #24]
 802057c:	4770      	bx	lr
 802057e:	f04f 30ff 	mov.w	r0, #4294967295
 8020582:	4770      	bx	lr

08020584 <_GetDevData>:
 8020584:	4802      	ldr	r0, [pc, #8]	; (8020590 <_GetDevData+0xc>)
 8020586:	2901      	cmp	r1, #1
 8020588:	bf18      	it	ne
 802058a:	2000      	movne	r0, #0
 802058c:	4770      	bx	lr
 802058e:	bf00      	nop
 8020590:	0802f0b8 	.word	0x0802f0b8

08020594 <_ReadRect>:
 8020594:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8020598:	6887      	ldr	r7, [r0, #8]
 802059a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802059e:	69f8      	ldr	r0, [r7, #28]
 80205a0:	9d08      	ldr	r5, [sp, #32]
 80205a2:	1a5b      	subs	r3, r3, r1
 80205a4:	f103 0801 	add.w	r8, r3, #1
 80205a8:	fb00 1102 	mla	r1, r0, r2, r1
 80205ac:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80205b0:	008e      	lsls	r6, r1, #2
 80205b2:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80205b6:	462b      	mov	r3, r5
 80205b8:	4641      	mov	r1, r8
 80205ba:	3304      	adds	r3, #4
 80205bc:	1998      	adds	r0, r3, r6
 80205be:	3804      	subs	r0, #4
 80205c0:	683c      	ldr	r4, [r7, #0]
 80205c2:	1b40      	subs	r0, r0, r5
 80205c4:	3901      	subs	r1, #1
 80205c6:	5820      	ldr	r0, [r4, r0]
 80205c8:	f843 0c04 	str.w	r0, [r3, #-4]
 80205cc:	d1f5      	bne.n	80205ba <_ReadRect+0x26>
 80205ce:	3201      	adds	r2, #1
 80205d0:	1e53      	subs	r3, r2, #1
 80205d2:	459c      	cmp	ip, r3
 80205d4:	4455      	add	r5, sl
 80205d6:	444e      	add	r6, r9
 80205d8:	dced      	bgt.n	80205b6 <_ReadRect+0x22>
 80205da:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80205de:	4770      	bx	lr

080205e0 <_GetDevFunc>:
 80205e0:	3901      	subs	r1, #1
 80205e2:	2924      	cmp	r1, #36	; 0x24
 80205e4:	d846      	bhi.n	8020674 <_GetDevFunc+0x94>
 80205e6:	e8df f001 	tbb	[pc, r1]
 80205ea:	1d1f      	.short	0x1d1f
 80205ec:	1745191b 	.word	0x1745191b
 80205f0:	13154545 	.word	0x13154545
 80205f4:	3f454143 	.word	0x3f454143
 80205f8:	4545453d 	.word	0x4545453d
 80205fc:	3537393b 	.word	0x3537393b
 8020600:	45314545 	.word	0x45314545
 8020604:	45454545 	.word	0x45454545
 8020608:	292b2d45 	.word	0x292b2d45
 802060c:	4525      	.short	0x4525
 802060e:	21          	.byte	0x21
 802060f:	00          	.byte	0x00
 8020610:	4819      	ldr	r0, [pc, #100]	; (8020678 <_GetDevFunc+0x98>)
 8020612:	4770      	bx	lr
 8020614:	4819      	ldr	r0, [pc, #100]	; (802067c <_GetDevFunc+0x9c>)
 8020616:	4770      	bx	lr
 8020618:	4819      	ldr	r0, [pc, #100]	; (8020680 <_GetDevFunc+0xa0>)
 802061a:	4770      	bx	lr
 802061c:	4819      	ldr	r0, [pc, #100]	; (8020684 <_GetDevFunc+0xa4>)
 802061e:	4770      	bx	lr
 8020620:	4819      	ldr	r0, [pc, #100]	; (8020688 <_GetDevFunc+0xa8>)
 8020622:	4770      	bx	lr
 8020624:	4819      	ldr	r0, [pc, #100]	; (802068c <_GetDevFunc+0xac>)
 8020626:	4770      	bx	lr
 8020628:	4819      	ldr	r0, [pc, #100]	; (8020690 <_GetDevFunc+0xb0>)
 802062a:	4770      	bx	lr
 802062c:	6803      	ldr	r3, [r0, #0]
 802062e:	689b      	ldr	r3, [r3, #8]
 8020630:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8020632:	4770      	bx	lr
 8020634:	6803      	ldr	r3, [r0, #0]
 8020636:	689b      	ldr	r3, [r3, #8]
 8020638:	6c18      	ldr	r0, [r3, #64]	; 0x40
 802063a:	4770      	bx	lr
 802063c:	4815      	ldr	r0, [pc, #84]	; (8020694 <_GetDevFunc+0xb4>)
 802063e:	4770      	bx	lr
 8020640:	4815      	ldr	r0, [pc, #84]	; (8020698 <_GetDevFunc+0xb8>)
 8020642:	4770      	bx	lr
 8020644:	6803      	ldr	r3, [r0, #0]
 8020646:	689b      	ldr	r3, [r3, #8]
 8020648:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802064a:	4770      	bx	lr
 802064c:	6803      	ldr	r3, [r0, #0]
 802064e:	689b      	ldr	r3, [r3, #8]
 8020650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020652:	4770      	bx	lr
 8020654:	4811      	ldr	r0, [pc, #68]	; (802069c <_GetDevFunc+0xbc>)
 8020656:	4770      	bx	lr
 8020658:	4811      	ldr	r0, [pc, #68]	; (80206a0 <_GetDevFunc+0xc0>)
 802065a:	4770      	bx	lr
 802065c:	4811      	ldr	r0, [pc, #68]	; (80206a4 <_GetDevFunc+0xc4>)
 802065e:	4770      	bx	lr
 8020660:	4811      	ldr	r0, [pc, #68]	; (80206a8 <_GetDevFunc+0xc8>)
 8020662:	4770      	bx	lr
 8020664:	4811      	ldr	r0, [pc, #68]	; (80206ac <_GetDevFunc+0xcc>)
 8020666:	4770      	bx	lr
 8020668:	4811      	ldr	r0, [pc, #68]	; (80206b0 <_GetDevFunc+0xd0>)
 802066a:	4770      	bx	lr
 802066c:	4811      	ldr	r0, [pc, #68]	; (80206b4 <_GetDevFunc+0xd4>)
 802066e:	4770      	bx	lr
 8020670:	4811      	ldr	r0, [pc, #68]	; (80206b8 <_GetDevFunc+0xd8>)
 8020672:	4770      	bx	lr
 8020674:	2000      	movs	r0, #0
 8020676:	4770      	bx	lr
 8020678:	08020ffd 	.word	0x08020ffd
 802067c:	080210b5 	.word	0x080210b5
 8020680:	08021035 	.word	0x08021035
 8020684:	08020ef1 	.word	0x08020ef1
 8020688:	080211c5 	.word	0x080211c5
 802068c:	08021075 	.word	0x08021075
 8020690:	08020595 	.word	0x08020595
 8020694:	08020fc1 	.word	0x08020fc1
 8020698:	08021151 	.word	0x08021151
 802069c:	08020f21 	.word	0x08020f21
 80206a0:	080206bd 	.word	0x080206bd
 80206a4:	080206d5 	.word	0x080206d5
 80206a8:	080206ed 	.word	0x080206ed
 80206ac:	08020705 	.word	0x08020705
 80206b0:	08020711 	.word	0x08020711
 80206b4:	08020f91 	.word	0x08020f91
 80206b8:	080210f5 	.word	0x080210f5

080206bc <_SetChroma>:
 80206bc:	b500      	push	{lr}
 80206be:	b083      	sub	sp, #12
 80206c0:	e88d 0006 	stmia.w	sp, {r1, r2}
 80206c4:	6980      	ldr	r0, [r0, #24]
 80206c6:	210d      	movs	r1, #13
 80206c8:	466a      	mov	r2, sp
 80206ca:	f7f1 fc15 	bl	8011ef8 <LCD_X_DisplayDriver>
 80206ce:	b003      	add	sp, #12
 80206d0:	f85d fb04 	ldr.w	pc, [sp], #4

080206d4 <_SetChromaMode>:
 80206d4:	b500      	push	{lr}
 80206d6:	b083      	sub	sp, #12
 80206d8:	aa02      	add	r2, sp, #8
 80206da:	6980      	ldr	r0, [r0, #24]
 80206dc:	f842 1d04 	str.w	r1, [r2, #-4]!
 80206e0:	210c      	movs	r1, #12
 80206e2:	f7f1 fc09 	bl	8011ef8 <LCD_X_DisplayDriver>
 80206e6:	b003      	add	sp, #12
 80206e8:	f85d fb04 	ldr.w	pc, [sp], #4

080206ec <_SetAlphaMode>:
 80206ec:	b500      	push	{lr}
 80206ee:	b083      	sub	sp, #12
 80206f0:	aa02      	add	r2, sp, #8
 80206f2:	6980      	ldr	r0, [r0, #24]
 80206f4:	f842 1d04 	str.w	r1, [r2, #-4]!
 80206f8:	210b      	movs	r1, #11
 80206fa:	f7f1 fbfd 	bl	8011ef8 <LCD_X_DisplayDriver>
 80206fe:	b003      	add	sp, #12
 8020700:	f85d fb04 	ldr.w	pc, [sp], #4

08020704 <_Off>:
 8020704:	6980      	ldr	r0, [r0, #24]
 8020706:	2106      	movs	r1, #6
 8020708:	2200      	movs	r2, #0
 802070a:	f7f1 bbf5 	b.w	8011ef8 <LCD_X_DisplayDriver>
 802070e:	bf00      	nop

08020710 <_On>:
 8020710:	6980      	ldr	r0, [r0, #24]
 8020712:	2105      	movs	r1, #5
 8020714:	2200      	movs	r2, #0
 8020716:	f7f1 bbef 	b.w	8011ef8 <LCD_X_DisplayDriver>
 802071a:	bf00      	nop

0802071c <_SetOrg>:
 802071c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020720:	4604      	mov	r4, r0
 8020722:	b083      	sub	sp, #12
 8020724:	2300      	movs	r3, #0
 8020726:	6980      	ldr	r0, [r0, #24]
 8020728:	9300      	str	r3, [sp, #0]
 802072a:	4688      	mov	r8, r1
 802072c:	4691      	mov	r9, r2
 802072e:	9301      	str	r3, [sp, #4]
 8020730:	68a5      	ldr	r5, [r4, #8]
 8020732:	f000 ff1b 	bl	802156c <LCD_GetMirrorXEx>
 8020736:	4606      	mov	r6, r0
 8020738:	69a0      	ldr	r0, [r4, #24]
 802073a:	f000 ff25 	bl	8021588 <LCD_GetMirrorYEx>
 802073e:	4607      	mov	r7, r0
 8020740:	69a0      	ldr	r0, [r4, #24]
 8020742:	f000 ff2f 	bl	80215a4 <LCD_GetSwapXYEx>
 8020746:	0080      	lsls	r0, r0, #2
 8020748:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 802074c:	4330      	orrs	r0, r6
 802074e:	2807      	cmp	r0, #7
 8020750:	d811      	bhi.n	8020776 <_SetOrg+0x5a>
 8020752:	e8df f000 	tbb	[pc, r0]
 8020756:	1b18      	.short	0x1b18
 8020758:	3f3a2d24 	.word	0x3f3a2d24
 802075c:	0448      	.short	0x0448
 802075e:	69a8      	ldr	r0, [r5, #24]
 8020760:	692a      	ldr	r2, [r5, #16]
 8020762:	6969      	ldr	r1, [r5, #20]
 8020764:	68eb      	ldr	r3, [r5, #12]
 8020766:	1a82      	subs	r2, r0, r2
 8020768:	1acb      	subs	r3, r1, r3
 802076a:	ebc9 0202 	rsb	r2, r9, r2
 802076e:	ebc8 0303 	rsb	r3, r8, r3
 8020772:	e88d 000c 	stmia.w	sp, {r2, r3}
 8020776:	69a0      	ldr	r0, [r4, #24]
 8020778:	2103      	movs	r1, #3
 802077a:	466a      	mov	r2, sp
 802077c:	f7f1 fbbc 	bl	8011ef8 <LCD_X_DisplayDriver>
 8020780:	b003      	add	sp, #12
 8020782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020786:	e88d 0300 	stmia.w	sp, {r8, r9}
 802078a:	e7f4      	b.n	8020776 <_SetOrg+0x5a>
 802078c:	696a      	ldr	r2, [r5, #20]
 802078e:	68eb      	ldr	r3, [r5, #12]
 8020790:	f8cd 9004 	str.w	r9, [sp, #4]
 8020794:	1ad3      	subs	r3, r2, r3
 8020796:	ebc8 0303 	rsb	r3, r8, r3
 802079a:	9300      	str	r3, [sp, #0]
 802079c:	e7eb      	b.n	8020776 <_SetOrg+0x5a>
 802079e:	69aa      	ldr	r2, [r5, #24]
 80207a0:	692b      	ldr	r3, [r5, #16]
 80207a2:	f8cd 8000 	str.w	r8, [sp]
 80207a6:	1ad3      	subs	r3, r2, r3
 80207a8:	ebc9 0303 	rsb	r3, r9, r3
 80207ac:	9301      	str	r3, [sp, #4]
 80207ae:	e7e2      	b.n	8020776 <_SetOrg+0x5a>
 80207b0:	6968      	ldr	r0, [r5, #20]
 80207b2:	68ea      	ldr	r2, [r5, #12]
 80207b4:	69a9      	ldr	r1, [r5, #24]
 80207b6:	692b      	ldr	r3, [r5, #16]
 80207b8:	1a82      	subs	r2, r0, r2
 80207ba:	1acb      	subs	r3, r1, r3
 80207bc:	ebc8 0202 	rsb	r2, r8, r2
 80207c0:	ebc9 0303 	rsb	r3, r9, r3
 80207c4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80207c8:	e7d5      	b.n	8020776 <_SetOrg+0x5a>
 80207ca:	f8cd 9000 	str.w	r9, [sp]
 80207ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80207d2:	e7d0      	b.n	8020776 <_SetOrg+0x5a>
 80207d4:	69aa      	ldr	r2, [r5, #24]
 80207d6:	692b      	ldr	r3, [r5, #16]
 80207d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80207dc:	1ad3      	subs	r3, r2, r3
 80207de:	ebc9 0303 	rsb	r3, r9, r3
 80207e2:	9300      	str	r3, [sp, #0]
 80207e4:	e7c7      	b.n	8020776 <_SetOrg+0x5a>
 80207e6:	696a      	ldr	r2, [r5, #20]
 80207e8:	68eb      	ldr	r3, [r5, #12]
 80207ea:	f8cd 9000 	str.w	r9, [sp]
 80207ee:	1ad3      	subs	r3, r2, r3
 80207f0:	ebc8 0303 	rsb	r3, r8, r3
 80207f4:	9301      	str	r3, [sp, #4]
 80207f6:	e7be      	b.n	8020776 <_SetOrg+0x5a>

080207f8 <_FillRect>:
 80207f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207fc:	6887      	ldr	r7, [r0, #8]
 80207fe:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8020800:	b083      	sub	sp, #12
 8020802:	4688      	mov	r8, r1
 8020804:	4691      	mov	r9, r2
 8020806:	469c      	mov	ip, r3
 8020808:	b15c      	cbz	r4, 8020822 <_FillRect+0x2a>
 802080a:	4d4a      	ldr	r5, [pc, #296]	; (8020934 <_FillRect+0x13c>)
 802080c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802080e:	9600      	str	r6, [sp, #0]
 8020810:	682d      	ldr	r5, [r5, #0]
 8020812:	6980      	ldr	r0, [r0, #24]
 8020814:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8020816:	682d      	ldr	r5, [r5, #0]
 8020818:	9501      	str	r5, [sp, #4]
 802081a:	47a0      	blx	r4
 802081c:	b003      	add	sp, #12
 802081e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020822:	4b44      	ldr	r3, [pc, #272]	; (8020934 <_FillRect+0x13c>)
 8020824:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	ebc1 0c0c 	rsb	ip, r1, ip
 802082e:	7c1a      	ldrb	r2, [r3, #16]
 8020830:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020832:	07d2      	lsls	r2, r2, #31
 8020834:	ebc9 0401 	rsb	r4, r9, r1
 8020838:	f10c 0601 	add.w	r6, ip, #1
 802083c:	f104 0501 	add.w	r5, r4, #1
 8020840:	d453      	bmi.n	80208ea <_FillRect+0xf2>
 8020842:	6839      	ldr	r1, [r7, #0]
 8020844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020846:	fb0a 8009 	mla	r0, sl, r9, r8
 802084a:	2e0f      	cmp	r6, #15
 802084c:	681a      	ldr	r2, [r3, #0]
 802084e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8020852:	d935      	bls.n	80208c0 <_FillRect+0xc8>
 8020854:	2d00      	cmp	r5, #0
 8020856:	d06a      	beq.n	802092e <_FillRect+0x136>
 8020858:	ea4f 098a 	mov.w	r9, sl, lsl #2
 802085c:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 8020860:	f1c9 0b00 	rsb	fp, r9, #0
 8020864:	fb09 0808 	mla	r8, r9, r8, r0
 8020868:	462f      	mov	r7, r5
 802086a:	4643      	mov	r3, r8
 802086c:	4631      	mov	r1, r6
 802086e:	3910      	subs	r1, #16
 8020870:	290f      	cmp	r1, #15
 8020872:	601a      	str	r2, [r3, #0]
 8020874:	605a      	str	r2, [r3, #4]
 8020876:	609a      	str	r2, [r3, #8]
 8020878:	60da      	str	r2, [r3, #12]
 802087a:	611a      	str	r2, [r3, #16]
 802087c:	615a      	str	r2, [r3, #20]
 802087e:	619a      	str	r2, [r3, #24]
 8020880:	61da      	str	r2, [r3, #28]
 8020882:	621a      	str	r2, [r3, #32]
 8020884:	625a      	str	r2, [r3, #36]	; 0x24
 8020886:	629a      	str	r2, [r3, #40]	; 0x28
 8020888:	62da      	str	r2, [r3, #44]	; 0x2c
 802088a:	631a      	str	r2, [r3, #48]	; 0x30
 802088c:	635a      	str	r2, [r3, #52]	; 0x34
 802088e:	639a      	str	r2, [r3, #56]	; 0x38
 8020890:	63da      	str	r2, [r3, #60]	; 0x3c
 8020892:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8020896:	d8ea      	bhi.n	802086e <_FillRect+0x76>
 8020898:	3f01      	subs	r7, #1
 802089a:	ebc9 0808 	rsb	r8, r9, r8
 802089e:	d1e4      	bne.n	802086a <_FillRect+0x72>
 80208a0:	f1ac 010f 	sub.w	r1, ip, #15
 80208a4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80208a8:	0909      	lsrs	r1, r1, #4
 80208aa:	fb0b fb04 	mul.w	fp, fp, r4
 80208ae:	3b01      	subs	r3, #1
 80208b0:	3101      	adds	r1, #1
 80208b2:	fb09 b303 	mla	r3, r9, r3, fp
 80208b6:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80208ba:	4418      	add	r0, r3
 80208bc:	f006 060f 	and.w	r6, r6, #15
 80208c0:	2e00      	cmp	r6, #0
 80208c2:	d0ab      	beq.n	802081c <_FillRect+0x24>
 80208c4:	2d00      	cmp	r5, #0
 80208c6:	d0a9      	beq.n	802081c <_FillRect+0x24>
 80208c8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80208cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80208d0:	fb0a 0004 	mla	r0, sl, r4, r0
 80208d4:	4601      	mov	r1, r0
 80208d6:	4633      	mov	r3, r6
 80208d8:	3b01      	subs	r3, #1
 80208da:	f841 2b04 	str.w	r2, [r1], #4
 80208de:	d1fb      	bne.n	80208d8 <_FillRect+0xe0>
 80208e0:	3d01      	subs	r5, #1
 80208e2:	ebca 0000 	rsb	r0, sl, r0
 80208e6:	d1f5      	bne.n	80208d4 <_FillRect+0xdc>
 80208e8:	e798      	b.n	802081c <_FillRect+0x24>
 80208ea:	6903      	ldr	r3, [r0, #16]
 80208ec:	689b      	ldr	r3, [r3, #8]
 80208ee:	4798      	blx	r3
 80208f0:	69fb      	ldr	r3, [r7, #28]
 80208f2:	2e00      	cmp	r6, #0
 80208f4:	d092      	beq.n	802081c <_FillRect+0x24>
 80208f6:	2d00      	cmp	r5, #0
 80208f8:	d090      	beq.n	802081c <_FillRect+0x24>
 80208fa:	fb03 8309 	mla	r3, r3, r9, r8
 80208fe:	fb04 340a 	mla	r4, r4, sl, r3
 8020902:	ebca 7a8a 	rsb	sl, sl, sl, lsl #30
 8020906:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802090a:	ea4f 088a 	mov.w	r8, sl, lsl #2
 802090e:	3d01      	subs	r5, #1
 8020910:	4663      	mov	r3, ip
 8020912:	4632      	mov	r2, r6
 8020914:	6839      	ldr	r1, [r7, #0]
 8020916:	585c      	ldr	r4, [r3, r1]
 8020918:	3a01      	subs	r2, #1
 802091a:	ea84 0400 	eor.w	r4, r4, r0
 802091e:	505c      	str	r4, [r3, r1]
 8020920:	f103 0304 	add.w	r3, r3, #4
 8020924:	d1f6      	bne.n	8020914 <_FillRect+0x11c>
 8020926:	44c4      	add	ip, r8
 8020928:	2d00      	cmp	r5, #0
 802092a:	d1f0      	bne.n	802090e <_FillRect+0x116>
 802092c:	e776      	b.n	802081c <_FillRect+0x24>
 802092e:	4628      	mov	r0, r5
 8020930:	e7c4      	b.n	80208bc <_FillRect+0xc4>
 8020932:	bf00      	nop
 8020934:	20000280 	.word	0x20000280

08020938 <_DrawHLine>:
 8020938:	b500      	push	{lr}
 802093a:	b083      	sub	sp, #12
 802093c:	9200      	str	r2, [sp, #0]
 802093e:	f7ff ff5b 	bl	80207f8 <_FillRect>
 8020942:	b003      	add	sp, #12
 8020944:	f85d fb04 	ldr.w	pc, [sp], #4

08020948 <_DrawVLine>:
 8020948:	b500      	push	{lr}
 802094a:	b083      	sub	sp, #12
 802094c:	9300      	str	r3, [sp, #0]
 802094e:	460b      	mov	r3, r1
 8020950:	f7ff ff52 	bl	80207f8 <_FillRect>
 8020954:	b003      	add	sp, #12
 8020956:	f85d fb04 	ldr.w	pc, [sp], #4
 802095a:	bf00      	nop

0802095c <_DrawBitmap>:
 802095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020960:	b08f      	sub	sp, #60	; 0x3c
 8020962:	4607      	mov	r7, r0
 8020964:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8020966:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 802096a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 802096c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 802096e:	9309      	str	r3, [sp, #36]	; 0x24
 8020970:	3e01      	subs	r6, #1
 8020972:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8020976:	2e1f      	cmp	r6, #31
 8020978:	d82e      	bhi.n	80209d8 <_DrawBitmap+0x7c>
 802097a:	e8df f016 	tbh	[pc, r6, lsl #1]
 802097e:	0030      	.short	0x0030
 8020980:	002d00f2 	.word	0x002d00f2
 8020984:	002d008f 	.word	0x002d008f
 8020988:	002d002d 	.word	0x002d002d
 802098c:	002d00dd 	.word	0x002d00dd
 8020990:	002d002d 	.word	0x002d002d
 8020994:	002d002d 	.word	0x002d002d
 8020998:	002d002d 	.word	0x002d002d
 802099c:	002d002d 	.word	0x002d002d
 80209a0:	002d002d 	.word	0x002d002d
 80209a4:	002d002d 	.word	0x002d002d
 80209a8:	002d002d 	.word	0x002d002d
 80209ac:	002d002d 	.word	0x002d002d
 80209b0:	002d002d 	.word	0x002d002d
 80209b4:	002d002d 	.word	0x002d002d
 80209b8:	002d002d 	.word	0x002d002d
 80209bc:	0020      	.short	0x0020
 80209be:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 80209c2:	2c00      	cmp	r4, #0
 80209c4:	f000 8263 	beq.w	8020e8e <_DrawBitmap+0x532>
 80209c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209ca:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80209cc:	69b8      	ldr	r0, [r7, #24]
 80209ce:	9602      	str	r6, [sp, #8]
 80209d0:	e88d 0208 	stmia.w	sp, {r3, r9}
 80209d4:	462b      	mov	r3, r5
 80209d6:	47a0      	blx	r4
 80209d8:	b00f      	add	sp, #60	; 0x3c
 80209da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209de:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
 80209e2:	b136      	cbz	r6, 80209f2 <_DrawBitmap+0x96>
 80209e4:	4bbc      	ldr	r3, [pc, #752]	; (8020cd8 <_DrawBitmap+0x37c>)
 80209e6:	930a      	str	r3, [sp, #40]	; 0x28
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	7c1b      	ldrb	r3, [r3, #16]
 80209ec:	07db      	lsls	r3, r3, #31
 80209ee:	f140 8271 	bpl.w	8020ed4 <_DrawBitmap+0x578>
 80209f2:	f1b9 0f00 	cmp.w	r9, #0
 80209f6:	ddef      	ble.n	80209d8 <_DrawBitmap+0x7c>
 80209f8:	4eb7      	ldr	r6, [pc, #732]	; (8020cd8 <_DrawBitmap+0x37c>)
 80209fa:	960a      	str	r6, [sp, #40]	; 0x28
 80209fc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80209fe:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8020cdc <_DrawBitmap+0x380>
 8020a02:	9408      	str	r4, [sp, #32]
 8020a04:	4491      	add	r9, r2
 8020a06:	440e      	add	r6, r1
 8020a08:	4690      	mov	r8, r2
 8020a0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020a0e:	960b      	str	r6, [sp, #44]	; 0x2c
 8020a10:	4662      	mov	r2, ip
 8020a12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020a14:	f8d4 9000 	ldr.w	r9, [r4]
 8020a18:	680b      	ldr	r3, [r1, #0]
 8020a1a:	6866      	ldr	r6, [r4, #4]
 8020a1c:	7c1b      	ldrb	r3, [r3, #16]
 8020a1e:	f003 0303 	and.w	r3, r3, #3
 8020a22:	2b02      	cmp	r3, #2
 8020a24:	f000 820e 	beq.w	8020e44 <_DrawBitmap+0x4e8>
 8020a28:	2b03      	cmp	r3, #3
 8020a2a:	f000 81e4 	beq.w	8020df6 <_DrawBitmap+0x49a>
 8020a2e:	2b01      	cmp	r3, #1
 8020a30:	f000 81e1 	beq.w	8020df6 <_DrawBitmap+0x49a>
 8020a34:	782b      	ldrb	r3, [r5, #0]
 8020a36:	69d0      	ldr	r0, [r2, #28]
 8020a38:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8020a3c:	6813      	ldr	r3, [r2, #0]
 8020a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a40:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020a42:	fb00 2008 	mla	r0, r0, r8, r2
 8020a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020a4a:	4121      	asrs	r1, r4
 8020a4c:	f1c4 0308 	rsb	r3, r4, #8
 8020a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a52:	46ac      	mov	ip, r5
 8020a54:	e005      	b.n	8020a62 <_DrawBitmap+0x106>
 8020a56:	3a01      	subs	r2, #1
 8020a58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8020a5c:	f840 4b04 	str.w	r4, [r0], #4
 8020a60:	d012      	beq.n	8020a88 <_DrawBitmap+0x12c>
 8020a62:	f011 0f01 	tst.w	r1, #1
 8020a66:	bf0c      	ite	eq
 8020a68:	464c      	moveq	r4, r9
 8020a6a:	4634      	movne	r4, r6
 8020a6c:	3b01      	subs	r3, #1
 8020a6e:	d1f2      	bne.n	8020a56 <_DrawBitmap+0xfa>
 8020a70:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020a74:	f840 4b04 	str.w	r4, [r0], #4
 8020a78:	3a01      	subs	r2, #1
 8020a7a:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8020a7e:	f10c 0c01 	add.w	ip, ip, #1
 8020a82:	f04f 0308 	mov.w	r3, #8
 8020a86:	d1ec      	bne.n	8020a62 <_DrawBitmap+0x106>
 8020a88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020a8a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8020a8c:	f108 0801 	add.w	r8, r8, #1
 8020a90:	4588      	cmp	r8, r1
 8020a92:	4435      	add	r5, r6
 8020a94:	d0a0      	beq.n	80209d8 <_DrawBitmap+0x7c>
 8020a96:	68ba      	ldr	r2, [r7, #8]
 8020a98:	9c08      	ldr	r4, [sp, #32]
 8020a9a:	e7ba      	b.n	8020a12 <_DrawBitmap+0xb6>
 8020a9c:	f1b9 0f00 	cmp.w	r9, #0
 8020aa0:	dd9a      	ble.n	80209d8 <_DrawBitmap+0x7c>
 8020aa2:	4b8d      	ldr	r3, [pc, #564]	; (8020cd8 <_DrawBitmap+0x37c>)
 8020aa4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	9308      	str	r3, [sp, #32]
 8020aac:	4488      	add	r8, r1
 8020aae:	4491      	add	r9, r2
 8020ab0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8020ab4:	27f0      	movs	r7, #240	; 0xf0
 8020ab6:	b3bc      	cbz	r4, 8020b28 <_DrawBitmap+0x1cc>
 8020ab8:	9e08      	ldr	r6, [sp, #32]
 8020aba:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8020abe:	7c30      	ldrb	r0, [r6, #16]
 8020ac0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8020ac4:	f8dc 3000 	ldr.w	r3, [ip]
 8020ac8:	782e      	ldrb	r6, [r5, #0]
 8020aca:	fb01 8a02 	mla	sl, r1, r2, r8
 8020ace:	f010 0003 	ands.w	r0, r0, #3
 8020ad2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8020ad6:	f000 80db 	beq.w	8020c90 <_DrawBitmap+0x334>
 8020ada:	2802      	cmp	r0, #2
 8020adc:	d124      	bne.n	8020b28 <_DrawBitmap+0x1cc>
 8020ade:	f10a 0a04 	add.w	sl, sl, #4
 8020ae2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ae6:	46ab      	mov	fp, r5
 8020ae8:	e001      	b.n	8020aee <_DrawBitmap+0x192>
 8020aea:	3801      	subs	r0, #1
 8020aec:	d01c      	beq.n	8020b28 <_DrawBitmap+0x1cc>
 8020aee:	f1c3 0101 	rsb	r1, r3, #1
 8020af2:	0089      	lsls	r1, r1, #2
 8020af4:	f1c1 0804 	rsb	r8, r1, #4
 8020af8:	fa47 f808 	asr.w	r8, r7, r8
 8020afc:	ea08 0806 	and.w	r8, r8, r6
 8020b00:	fa38 f101 	lsrs.w	r1, r8, r1
 8020b04:	bf1c      	itt	ne
 8020b06:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 8020b0a:	f84a 1c04 	strne.w	r1, [sl, #-4]
 8020b0e:	3301      	adds	r3, #1
 8020b10:	2b02      	cmp	r3, #2
 8020b12:	f10a 0a04 	add.w	sl, sl, #4
 8020b16:	d1e8      	bne.n	8020aea <_DrawBitmap+0x18e>
 8020b18:	3801      	subs	r0, #1
 8020b1a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020b1e:	f04f 0300 	mov.w	r3, #0
 8020b22:	f10b 0b01 	add.w	fp, fp, #1
 8020b26:	d1e2      	bne.n	8020aee <_DrawBitmap+0x192>
 8020b28:	3201      	adds	r2, #1
 8020b2a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8020b2c:	454a      	cmp	r2, r9
 8020b2e:	4435      	add	r5, r6
 8020b30:	d1c1      	bne.n	8020ab6 <_DrawBitmap+0x15a>
 8020b32:	b00f      	add	sp, #60	; 0x3c
 8020b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b38:	f8dc 603c 	ldr.w	r6, [ip, #60]	; 0x3c
 8020b3c:	2e00      	cmp	r6, #0
 8020b3e:	d05f      	beq.n	8020c00 <_DrawBitmap+0x2a4>
 8020b40:	4b65      	ldr	r3, [pc, #404]	; (8020cd8 <_DrawBitmap+0x37c>)
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	7c1b      	ldrb	r3, [r3, #16]
 8020b46:	079b      	lsls	r3, r3, #30
 8020b48:	d45a      	bmi.n	8020c00 <_DrawBitmap+0x2a4>
 8020b4a:	2c00      	cmp	r4, #0
 8020b4c:	d058      	beq.n	8020c00 <_DrawBitmap+0x2a4>
 8020b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b50:	69b8      	ldr	r0, [r7, #24]
 8020b52:	9403      	str	r4, [sp, #12]
 8020b54:	e88d 0208 	stmia.w	sp, {r3, r9}
 8020b58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020b5a:	9302      	str	r3, [sp, #8]
 8020b5c:	462b      	mov	r3, r5
 8020b5e:	47b0      	blx	r6
 8020b60:	e73a      	b.n	80209d8 <_DrawBitmap+0x7c>
 8020b62:	f1b9 0f00 	cmp.w	r9, #0
 8020b66:	f77f af37 	ble.w	80209d8 <_DrawBitmap+0x7c>
 8020b6a:	4b5b      	ldr	r3, [pc, #364]	; (8020cd8 <_DrawBitmap+0x37c>)
 8020b6c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	9308      	str	r3, [sp, #32]
 8020b74:	4488      	add	r8, r1
 8020b76:	4491      	add	r9, r2
 8020b78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8020b7c:	27c0      	movs	r7, #192	; 0xc0
 8020b7e:	b3bc      	cbz	r4, 8020bf0 <_DrawBitmap+0x294>
 8020b80:	9e08      	ldr	r6, [sp, #32]
 8020b82:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8020b86:	7c30      	ldrb	r0, [r6, #16]
 8020b88:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8020b8c:	f8dc 3000 	ldr.w	r3, [ip]
 8020b90:	782e      	ldrb	r6, [r5, #0]
 8020b92:	fb01 8a02 	mla	sl, r1, r2, r8
 8020b96:	f010 0003 	ands.w	r0, r0, #3
 8020b9a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8020b9e:	f000 8096 	beq.w	8020cce <_DrawBitmap+0x372>
 8020ba2:	2802      	cmp	r0, #2
 8020ba4:	d124      	bne.n	8020bf0 <_DrawBitmap+0x294>
 8020ba6:	f10a 0a04 	add.w	sl, sl, #4
 8020baa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020bae:	46ab      	mov	fp, r5
 8020bb0:	e001      	b.n	8020bb6 <_DrawBitmap+0x25a>
 8020bb2:	3801      	subs	r0, #1
 8020bb4:	d01c      	beq.n	8020bf0 <_DrawBitmap+0x294>
 8020bb6:	f1c3 0103 	rsb	r1, r3, #3
 8020bba:	0049      	lsls	r1, r1, #1
 8020bbc:	f1c1 0806 	rsb	r8, r1, #6
 8020bc0:	fa47 f808 	asr.w	r8, r7, r8
 8020bc4:	ea08 0806 	and.w	r8, r8, r6
 8020bc8:	fa38 f101 	lsrs.w	r1, r8, r1
 8020bcc:	bf1c      	itt	ne
 8020bce:	f854 1021 	ldrne.w	r1, [r4, r1, lsl #2]
 8020bd2:	f84a 1c04 	strne.w	r1, [sl, #-4]
 8020bd6:	3301      	adds	r3, #1
 8020bd8:	2b04      	cmp	r3, #4
 8020bda:	f10a 0a04 	add.w	sl, sl, #4
 8020bde:	d1e8      	bne.n	8020bb2 <_DrawBitmap+0x256>
 8020be0:	3801      	subs	r0, #1
 8020be2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020be6:	f04f 0300 	mov.w	r3, #0
 8020bea:	f10b 0b01 	add.w	fp, fp, #1
 8020bee:	d1e2      	bne.n	8020bb6 <_DrawBitmap+0x25a>
 8020bf0:	3201      	adds	r2, #1
 8020bf2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8020bf4:	454a      	cmp	r2, r9
 8020bf6:	4435      	add	r5, r6
 8020bf8:	d1c1      	bne.n	8020b7e <_DrawBitmap+0x222>
 8020bfa:	b00f      	add	sp, #60	; 0x3c
 8020bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c00:	f1b9 0f00 	cmp.w	r9, #0
 8020c04:	f77f aee8 	ble.w	80209d8 <_DrawBitmap+0x7c>
 8020c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c0a:	4f33      	ldr	r7, [pc, #204]	; (8020cd8 <_DrawBitmap+0x37c>)
 8020c0c:	f1a3 0608 	sub.w	r6, r3, #8
 8020c10:	08f3      	lsrs	r3, r6, #3
 8020c12:	1c58      	adds	r0, r3, #1
 8020c14:	eba6 06c3 	sub.w	r6, r6, r3, lsl #3
 8020c18:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8020c1c:	683f      	ldr	r7, [r7, #0]
 8020c1e:	960c      	str	r6, [sp, #48]	; 0x30
 8020c20:	f108 0808 	add.w	r8, r8, #8
 8020c24:	00c6      	lsls	r6, r0, #3
 8020c26:	0140      	lsls	r0, r0, #5
 8020c28:	9708      	str	r7, [sp, #32]
 8020c2a:	eb09 0b02 	add.w	fp, r9, r2
 8020c2e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8020c32:	960b      	str	r6, [sp, #44]	; 0x2c
 8020c34:	900a      	str	r0, [sp, #40]	; 0x28
 8020c36:	468a      	mov	sl, r1
 8020c38:	b314      	cbz	r4, 8020c80 <_DrawBitmap+0x324>
 8020c3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020c3e:	f8dc 701c 	ldr.w	r7, [ip, #28]
 8020c42:	f898 1010 	ldrb.w	r1, [r8, #16]
 8020c46:	f8dc 3000 	ldr.w	r3, [ip]
 8020c4a:	fb07 a702 	mla	r7, r7, r2, sl
 8020c4e:	f011 0103 	ands.w	r1, r1, #3
 8020c52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020c56:	d05d      	beq.n	8020d14 <_DrawBitmap+0x3b8>
 8020c58:	2902      	cmp	r1, #2
 8020c5a:	d111      	bne.n	8020c80 <_DrawBitmap+0x324>
 8020c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020c5e:	2900      	cmp	r1, #0
 8020c60:	dd0e      	ble.n	8020c80 <_DrawBitmap+0x324>
 8020c62:	4608      	mov	r0, r1
 8020c64:	3704      	adds	r7, #4
 8020c66:	462b      	mov	r3, r5
 8020c68:	4428      	add	r0, r5
 8020c6a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020c6e:	b119      	cbz	r1, 8020c78 <_DrawBitmap+0x31c>
 8020c70:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8020c74:	f847 1c04 	str.w	r1, [r7, #-4]
 8020c78:	4298      	cmp	r0, r3
 8020c7a:	f107 0704 	add.w	r7, r7, #4
 8020c7e:	d1f4      	bne.n	8020c6a <_DrawBitmap+0x30e>
 8020c80:	3201      	adds	r2, #1
 8020c82:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8020c84:	455a      	cmp	r2, fp
 8020c86:	4435      	add	r5, r6
 8020c88:	d1d6      	bne.n	8020c38 <_DrawBitmap+0x2dc>
 8020c8a:	b00f      	add	sp, #60	; 0x3c
 8020c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c94:	46ab      	mov	fp, r5
 8020c96:	e002      	b.n	8020c9e <_DrawBitmap+0x342>
 8020c98:	3801      	subs	r0, #1
 8020c9a:	f43f af45 	beq.w	8020b28 <_DrawBitmap+0x1cc>
 8020c9e:	f1c3 0101 	rsb	r1, r3, #1
 8020ca2:	0089      	lsls	r1, r1, #2
 8020ca4:	f1c1 0804 	rsb	r8, r1, #4
 8020ca8:	fa47 f808 	asr.w	r8, r7, r8
 8020cac:	ea08 0806 	and.w	r8, r8, r6
 8020cb0:	fa28 f101 	lsr.w	r1, r8, r1
 8020cb4:	3301      	adds	r3, #1
 8020cb6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8020cba:	f84a 1b04 	str.w	r1, [sl], #4
 8020cbe:	2b02      	cmp	r3, #2
 8020cc0:	d1ea      	bne.n	8020c98 <_DrawBitmap+0x33c>
 8020cc2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	f10b 0b01 	add.w	fp, fp, #1
 8020ccc:	e7e4      	b.n	8020c98 <_DrawBitmap+0x33c>
 8020cce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020cd2:	46ab      	mov	fp, r5
 8020cd4:	e006      	b.n	8020ce4 <_DrawBitmap+0x388>
 8020cd6:	bf00      	nop
 8020cd8:	20000280 	.word	0x20000280
 8020cdc:	08031eb0 	.word	0x08031eb0
 8020ce0:	3801      	subs	r0, #1
 8020ce2:	d085      	beq.n	8020bf0 <_DrawBitmap+0x294>
 8020ce4:	f1c3 0103 	rsb	r1, r3, #3
 8020ce8:	0049      	lsls	r1, r1, #1
 8020cea:	f1c1 0806 	rsb	r8, r1, #6
 8020cee:	fa47 f808 	asr.w	r8, r7, r8
 8020cf2:	ea08 0806 	and.w	r8, r8, r6
 8020cf6:	fa28 f101 	lsr.w	r1, r8, r1
 8020cfa:	3301      	adds	r3, #1
 8020cfc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8020d00:	f84a 1b04 	str.w	r1, [sl], #4
 8020d04:	2b04      	cmp	r3, #4
 8020d06:	d1eb      	bne.n	8020ce0 <_DrawBitmap+0x384>
 8020d08:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	f10b 0b01 	add.w	fp, fp, #1
 8020d12:	e7e5      	b.n	8020ce0 <_DrawBitmap+0x384>
 8020d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d16:	2b07      	cmp	r3, #7
 8020d18:	f340 80d9 	ble.w	8020ece <_DrawBitmap+0x572>
 8020d1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020d1e:	462b      	mov	r3, r5
 8020d20:	442e      	add	r6, r5
 8020d22:	4639      	mov	r1, r7
 8020d24:	7818      	ldrb	r0, [r3, #0]
 8020d26:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d2a:	6008      	str	r0, [r1, #0]
 8020d2c:	7858      	ldrb	r0, [r3, #1]
 8020d2e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d32:	6048      	str	r0, [r1, #4]
 8020d34:	7898      	ldrb	r0, [r3, #2]
 8020d36:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d3a:	6088      	str	r0, [r1, #8]
 8020d3c:	78d8      	ldrb	r0, [r3, #3]
 8020d3e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d42:	60c8      	str	r0, [r1, #12]
 8020d44:	7918      	ldrb	r0, [r3, #4]
 8020d46:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d4a:	6108      	str	r0, [r1, #16]
 8020d4c:	7958      	ldrb	r0, [r3, #5]
 8020d4e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d52:	6148      	str	r0, [r1, #20]
 8020d54:	7998      	ldrb	r0, [r3, #6]
 8020d56:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d5a:	6188      	str	r0, [r1, #24]
 8020d5c:	79d8      	ldrb	r0, [r3, #7]
 8020d5e:	3308      	adds	r3, #8
 8020d60:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8020d64:	61c8      	str	r0, [r1, #28]
 8020d66:	42b3      	cmp	r3, r6
 8020d68:	f101 0120 	add.w	r1, r1, #32
 8020d6c:	d1da      	bne.n	8020d24 <_DrawBitmap+0x3c8>
 8020d6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020d70:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8020d74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020d76:	4437      	add	r7, r6
 8020d78:	44a9      	add	r9, r5
 8020d7a:	2903      	cmp	r1, #3
 8020d7c:	dd28      	ble.n	8020dd0 <_DrawBitmap+0x474>
 8020d7e:	460e      	mov	r6, r1
 8020d80:	4638      	mov	r0, r7
 8020d82:	464b      	mov	r3, r9
 8020d84:	9207      	str	r2, [sp, #28]
 8020d86:	f893 8000 	ldrb.w	r8, [r3]
 8020d8a:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8020d8e:	6002      	str	r2, [r0, #0]
 8020d90:	f893 8001 	ldrb.w	r8, [r3, #1]
 8020d94:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8020d98:	6042      	str	r2, [r0, #4]
 8020d9a:	f893 8002 	ldrb.w	r8, [r3, #2]
 8020d9e:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8020da2:	6082      	str	r2, [r0, #8]
 8020da4:	f893 8003 	ldrb.w	r8, [r3, #3]
 8020da8:	3e04      	subs	r6, #4
 8020daa:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 8020dae:	60c2      	str	r2, [r0, #12]
 8020db0:	2e03      	cmp	r6, #3
 8020db2:	f103 0304 	add.w	r3, r3, #4
 8020db6:	f100 0010 	add.w	r0, r0, #16
 8020dba:	dce4      	bgt.n	8020d86 <_DrawBitmap+0x42a>
 8020dbc:	3904      	subs	r1, #4
 8020dbe:	0888      	lsrs	r0, r1, #2
 8020dc0:	1c43      	adds	r3, r0, #1
 8020dc2:	9a07      	ldr	r2, [sp, #28]
 8020dc4:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
 8020dc8:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8020dcc:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 8020dd0:	2900      	cmp	r1, #0
 8020dd2:	f43f af55 	beq.w	8020c80 <_DrawBitmap+0x324>
 8020dd6:	4449      	add	r1, r9
 8020dd8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020ddc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020de0:	f847 3b04 	str.w	r3, [r7], #4
 8020de4:	4589      	cmp	r9, r1
 8020de6:	d1f7      	bne.n	8020dd8 <_DrawBitmap+0x47c>
 8020de8:	3201      	adds	r2, #1
 8020dea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8020dec:	455a      	cmp	r2, fp
 8020dee:	4435      	add	r5, r6
 8020df0:	f47f af22 	bne.w	8020c38 <_DrawBitmap+0x2dc>
 8020df4:	e749      	b.n	8020c8a <_DrawBitmap+0x32e>
 8020df6:	693b      	ldr	r3, [r7, #16]
 8020df8:	689b      	ldr	r3, [r3, #8]
 8020dfa:	4798      	blx	r3
 8020dfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8020dfe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020e02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e04:	44b1      	add	r9, r6
 8020e06:	4629      	mov	r1, r5
 8020e08:	4632      	mov	r2, r6
 8020e0a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8020e0e:	780e      	ldrb	r6, [r1, #0]
 8020e10:	fa4c f403 	asr.w	r4, ip, r3
 8020e14:	4226      	tst	r6, r4
 8020e16:	f103 0301 	add.w	r3, r3, #1
 8020e1a:	d00a      	beq.n	8020e32 <_DrawBitmap+0x4d6>
 8020e1c:	68bc      	ldr	r4, [r7, #8]
 8020e1e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8020e22:	6826      	ldr	r6, [r4, #0]
 8020e24:	fb0a 2a08 	mla	sl, sl, r8, r2
 8020e28:	f856 402a 	ldr.w	r4, [r6, sl, lsl #2]
 8020e2c:	4044      	eors	r4, r0
 8020e2e:	f846 402a 	str.w	r4, [r6, sl, lsl #2]
 8020e32:	2b08      	cmp	r3, #8
 8020e34:	f102 0201 	add.w	r2, r2, #1
 8020e38:	bf04      	itt	eq
 8020e3a:	3101      	addeq	r1, #1
 8020e3c:	2300      	moveq	r3, #0
 8020e3e:	454a      	cmp	r2, r9
 8020e40:	d1e5      	bne.n	8020e0e <_DrawBitmap+0x4b2>
 8020e42:	e621      	b.n	8020a88 <_DrawBitmap+0x12c>
 8020e44:	6813      	ldr	r3, [r2, #0]
 8020e46:	69d0      	ldr	r0, [r2, #28]
 8020e48:	7829      	ldrb	r1, [r5, #0]
 8020e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e4c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020e4e:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8020e52:	fb00 2008 	mla	r0, r0, r8, r2
 8020e56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020e5a:	4121      	asrs	r1, r4
 8020e5c:	f1c4 0308 	rsb	r3, r4, #8
 8020e60:	3004      	adds	r0, #4
 8020e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e64:	462c      	mov	r4, r5
 8020e66:	e005      	b.n	8020e74 <_DrawBitmap+0x518>
 8020e68:	0849      	lsrs	r1, r1, #1
 8020e6a:	3a01      	subs	r2, #1
 8020e6c:	f100 0004 	add.w	r0, r0, #4
 8020e70:	f43f ae0a 	beq.w	8020a88 <_DrawBitmap+0x12c>
 8020e74:	f011 0f01 	tst.w	r1, #1
 8020e78:	bf18      	it	ne
 8020e7a:	f840 6c04 	strne.w	r6, [r0, #-4]
 8020e7e:	3b01      	subs	r3, #1
 8020e80:	d1f2      	bne.n	8020e68 <_DrawBitmap+0x50c>
 8020e82:	7863      	ldrb	r3, [r4, #1]
 8020e84:	3401      	adds	r4, #1
 8020e86:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8020e8a:	2308      	movs	r3, #8
 8020e8c:	e7ed      	b.n	8020e6a <_DrawBitmap+0x50e>
 8020e8e:	f1b9 0f00 	cmp.w	r9, #0
 8020e92:	f77f ada1 	ble.w	80209d8 <_DrawBitmap+0x7c>
 8020e96:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020e9a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8020e9e:	4491      	add	r9, r2
 8020ea0:	4663      	mov	r3, ip
 8020ea2:	69d8      	ldr	r0, [r3, #28]
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	fb00 1c02 	mla	ip, r0, r2, r1
 8020eaa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8020eae:	1f28      	subs	r0, r5, #4
 8020eb0:	4643      	mov	r3, r8
 8020eb2:	f850 6f04 	ldr.w	r6, [r0, #4]!
 8020eb6:	1b44      	subs	r4, r0, r5
 8020eb8:	3b01      	subs	r3, #1
 8020eba:	f844 600c 	str.w	r6, [r4, ip]
 8020ebe:	d1f8      	bne.n	8020eb2 <_DrawBitmap+0x556>
 8020ec0:	3201      	adds	r2, #1
 8020ec2:	454a      	cmp	r2, r9
 8020ec4:	4455      	add	r5, sl
 8020ec6:	f43f ad87 	beq.w	80209d8 <_DrawBitmap+0x7c>
 8020eca:	68bb      	ldr	r3, [r7, #8]
 8020ecc:	e7e9      	b.n	8020ea2 <_DrawBitmap+0x546>
 8020ece:	4619      	mov	r1, r3
 8020ed0:	46a9      	mov	r9, r5
 8020ed2:	e752      	b.n	8020d7a <_DrawBitmap+0x41e>
 8020ed4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ed6:	69b8      	ldr	r0, [r7, #24]
 8020ed8:	9300      	str	r3, [sp, #0]
 8020eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020edc:	9301      	str	r3, [sp, #4]
 8020ede:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020ee0:	9303      	str	r3, [sp, #12]
 8020ee2:	f8cd 9008 	str.w	r9, [sp, #8]
 8020ee6:	9404      	str	r4, [sp, #16]
 8020ee8:	462b      	mov	r3, r5
 8020eea:	47b0      	blx	r6
 8020eec:	e574      	b.n	80209d8 <_DrawBitmap+0x7c>
 8020eee:	bf00      	nop

08020ef0 <_GetPos>:
 8020ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ef2:	6884      	ldr	r4, [r0, #8]
 8020ef4:	4605      	mov	r5, r0
 8020ef6:	460f      	mov	r7, r1
 8020ef8:	4616      	mov	r6, r2
 8020efa:	b124      	cbz	r4, 8020f06 <_GetPos+0x16>
 8020efc:	6a23      	ldr	r3, [r4, #32]
 8020efe:	603b      	str	r3, [r7, #0]
 8020f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f02:	6033      	str	r3, [r6, #0]
 8020f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f06:	204c      	movs	r0, #76	; 0x4c
 8020f08:	f004 fbb0 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8020f0c:	4621      	mov	r1, r4
 8020f0e:	60a8      	str	r0, [r5, #8]
 8020f10:	224c      	movs	r2, #76	; 0x4c
 8020f12:	f001 f9e5 	bl	80222e0 <GUI__memset>
 8020f16:	68ac      	ldr	r4, [r5, #8]
 8020f18:	2c00      	cmp	r4, #0
 8020f1a:	d1ef      	bne.n	8020efc <_GetPos+0xc>
 8020f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f1e:	bf00      	nop

08020f20 <_SetDevFunc>:
 8020f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f22:	6884      	ldr	r4, [r0, #8]
 8020f24:	4605      	mov	r5, r0
 8020f26:	460e      	mov	r6, r1
 8020f28:	4617      	mov	r7, r2
 8020f2a:	b32c      	cbz	r4, 8020f78 <_SetDevFunc+0x58>
 8020f2c:	1ef1      	subs	r1, r6, #3
 8020f2e:	2925      	cmp	r1, #37	; 0x25
 8020f30:	d815      	bhi.n	8020f5e <_SetDevFunc+0x3e>
 8020f32:	e8df f001 	tbb	[pc, r1]
 8020f36:	1415      	.short	0x1415
 8020f38:	14141414 	.word	0x14141414
 8020f3c:	14141414 	.word	0x14141414
 8020f40:	14141414 	.word	0x14141414
 8020f44:	14141414 	.word	0x14141414
 8020f48:	14141414 	.word	0x14141414
 8020f4c:	14141417 	.word	0x14141417
 8020f50:	19141414 	.word	0x19141414
 8020f54:	141d141b 	.word	0x141d141b
 8020f58:	1314141f 	.word	0x1314141f
 8020f5c:	64a7      	str	r7, [r4, #72]	; 0x48
 8020f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f60:	6467      	str	r7, [r4, #68]	; 0x44
 8020f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f64:	6327      	str	r7, [r4, #48]	; 0x30
 8020f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f68:	63a7      	str	r7, [r4, #56]	; 0x38
 8020f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f6c:	6367      	str	r7, [r4, #52]	; 0x34
 8020f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f70:	6427      	str	r7, [r4, #64]	; 0x40
 8020f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f74:	63e7      	str	r7, [r4, #60]	; 0x3c
 8020f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f78:	204c      	movs	r0, #76	; 0x4c
 8020f7a:	f004 fb77 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8020f7e:	4621      	mov	r1, r4
 8020f80:	60a8      	str	r0, [r5, #8]
 8020f82:	224c      	movs	r2, #76	; 0x4c
 8020f84:	f001 f9ac 	bl	80222e0 <GUI__memset>
 8020f88:	68ac      	ldr	r4, [r5, #8]
 8020f8a:	2c00      	cmp	r4, #0
 8020f8c:	d1ce      	bne.n	8020f2c <_SetDevFunc+0xc>
 8020f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020f90 <_Init>:
 8020f90:	b538      	push	{r3, r4, r5, lr}
 8020f92:	6884      	ldr	r4, [r0, #8]
 8020f94:	4605      	mov	r5, r0
 8020f96:	b14c      	cbz	r4, 8020fac <_Init+0x1c>
 8020f98:	69a8      	ldr	r0, [r5, #24]
 8020f9a:	2101      	movs	r1, #1
 8020f9c:	2200      	movs	r2, #0
 8020f9e:	f7f0 ffab 	bl	8011ef8 <LCD_X_DisplayDriver>
 8020fa2:	2c00      	cmp	r4, #0
 8020fa4:	bf08      	it	eq
 8020fa6:	f040 0001 	orreq.w	r0, r0, #1
 8020faa:	bd38      	pop	{r3, r4, r5, pc}
 8020fac:	204c      	movs	r0, #76	; 0x4c
 8020fae:	f004 fb5d 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8020fb2:	4621      	mov	r1, r4
 8020fb4:	60a8      	str	r0, [r5, #8]
 8020fb6:	224c      	movs	r2, #76	; 0x4c
 8020fb8:	f001 f992 	bl	80222e0 <GUI__memset>
 8020fbc:	68ac      	ldr	r4, [r5, #8]
 8020fbe:	e7eb      	b.n	8020f98 <_Init+0x8>

08020fc0 <_ShowBuffer>:
 8020fc0:	b570      	push	{r4, r5, r6, lr}
 8020fc2:	6885      	ldr	r5, [r0, #8]
 8020fc4:	b082      	sub	sp, #8
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	4604      	mov	r4, r0
 8020fca:	9301      	str	r3, [sp, #4]
 8020fcc:	460e      	mov	r6, r1
 8020fce:	b145      	cbz	r5, 8020fe2 <_ShowBuffer+0x22>
 8020fd0:	aa02      	add	r2, sp, #8
 8020fd2:	69a0      	ldr	r0, [r4, #24]
 8020fd4:	f842 6d04 	str.w	r6, [r2, #-4]!
 8020fd8:	210e      	movs	r1, #14
 8020fda:	f7f0 ff8d 	bl	8011ef8 <LCD_X_DisplayDriver>
 8020fde:	b002      	add	sp, #8
 8020fe0:	bd70      	pop	{r4, r5, r6, pc}
 8020fe2:	204c      	movs	r0, #76	; 0x4c
 8020fe4:	f004 fb42 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8020fe8:	4629      	mov	r1, r5
 8020fea:	60a0      	str	r0, [r4, #8]
 8020fec:	224c      	movs	r2, #76	; 0x4c
 8020fee:	f001 f977 	bl	80222e0 <GUI__memset>
 8020ff2:	68a3      	ldr	r3, [r4, #8]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d1eb      	bne.n	8020fd0 <_ShowBuffer+0x10>
 8020ff8:	b002      	add	sp, #8
 8020ffa:	bd70      	pop	{r4, r5, r6, pc}

08020ffc <_SetVSize>:
 8020ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ffe:	6884      	ldr	r4, [r0, #8]
 8021000:	4605      	mov	r5, r0
 8021002:	460e      	mov	r6, r1
 8021004:	4617      	mov	r7, r2
 8021006:	b14c      	cbz	r4, 802101c <_SetVSize+0x20>
 8021008:	69a8      	ldr	r0, [r5, #24]
 802100a:	f000 facb 	bl	80215a4 <LCD_GetSwapXYEx>
 802100e:	6166      	str	r6, [r4, #20]
 8021010:	61a7      	str	r7, [r4, #24]
 8021012:	b908      	cbnz	r0, 8021018 <_SetVSize+0x1c>
 8021014:	61e6      	str	r6, [r4, #28]
 8021016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021018:	61e7      	str	r7, [r4, #28]
 802101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802101c:	204c      	movs	r0, #76	; 0x4c
 802101e:	f004 fb25 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8021022:	4621      	mov	r1, r4
 8021024:	60a8      	str	r0, [r5, #8]
 8021026:	224c      	movs	r2, #76	; 0x4c
 8021028:	f001 f95a 	bl	80222e0 <GUI__memset>
 802102c:	68ac      	ldr	r4, [r5, #8]
 802102e:	2c00      	cmp	r4, #0
 8021030:	d1ea      	bne.n	8021008 <_SetVSize+0xc>
 8021032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021034 <_SetVis>:
 8021034:	b570      	push	{r4, r5, r6, lr}
 8021036:	6884      	ldr	r4, [r0, #8]
 8021038:	b082      	sub	sp, #8
 802103a:	2300      	movs	r3, #0
 802103c:	4605      	mov	r5, r0
 802103e:	9301      	str	r3, [sp, #4]
 8021040:	460e      	mov	r6, r1
 8021042:	b14c      	cbz	r4, 8021058 <_SetVis+0x24>
 8021044:	aa02      	add	r2, sp, #8
 8021046:	62e6      	str	r6, [r4, #44]	; 0x2c
 8021048:	f842 6d04 	str.w	r6, [r2, #-4]!
 802104c:	69a8      	ldr	r0, [r5, #24]
 802104e:	2109      	movs	r1, #9
 8021050:	f7f0 ff52 	bl	8011ef8 <LCD_X_DisplayDriver>
 8021054:	b002      	add	sp, #8
 8021056:	bd70      	pop	{r4, r5, r6, pc}
 8021058:	204c      	movs	r0, #76	; 0x4c
 802105a:	f004 fb07 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 802105e:	4621      	mov	r1, r4
 8021060:	60a8      	str	r0, [r5, #8]
 8021062:	224c      	movs	r2, #76	; 0x4c
 8021064:	f001 f93c 	bl	80222e0 <GUI__memset>
 8021068:	68ac      	ldr	r4, [r5, #8]
 802106a:	2c00      	cmp	r4, #0
 802106c:	d1ea      	bne.n	8021044 <_SetVis+0x10>
 802106e:	b002      	add	sp, #8
 8021070:	bd70      	pop	{r4, r5, r6, pc}
 8021072:	bf00      	nop

08021074 <_SetAlpha>:
 8021074:	b570      	push	{r4, r5, r6, lr}
 8021076:	6884      	ldr	r4, [r0, #8]
 8021078:	b082      	sub	sp, #8
 802107a:	2300      	movs	r3, #0
 802107c:	4605      	mov	r5, r0
 802107e:	9301      	str	r3, [sp, #4]
 8021080:	460e      	mov	r6, r1
 8021082:	b14c      	cbz	r4, 8021098 <_SetAlpha+0x24>
 8021084:	aa02      	add	r2, sp, #8
 8021086:	62a6      	str	r6, [r4, #40]	; 0x28
 8021088:	f842 6d04 	str.w	r6, [r2, #-4]!
 802108c:	69a8      	ldr	r0, [r5, #24]
 802108e:	210a      	movs	r1, #10
 8021090:	f7f0 ff32 	bl	8011ef8 <LCD_X_DisplayDriver>
 8021094:	b002      	add	sp, #8
 8021096:	bd70      	pop	{r4, r5, r6, pc}
 8021098:	204c      	movs	r0, #76	; 0x4c
 802109a:	f004 fae7 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 802109e:	4621      	mov	r1, r4
 80210a0:	60a8      	str	r0, [r5, #8]
 80210a2:	224c      	movs	r2, #76	; 0x4c
 80210a4:	f001 f91c 	bl	80222e0 <GUI__memset>
 80210a8:	68ac      	ldr	r4, [r5, #8]
 80210aa:	2c00      	cmp	r4, #0
 80210ac:	d1ea      	bne.n	8021084 <_SetAlpha+0x10>
 80210ae:	b002      	add	sp, #8
 80210b0:	bd70      	pop	{r4, r5, r6, pc}
 80210b2:	bf00      	nop

080210b4 <_SetVRAMAddr>:
 80210b4:	b570      	push	{r4, r5, r6, lr}
 80210b6:	6884      	ldr	r4, [r0, #8]
 80210b8:	b082      	sub	sp, #8
 80210ba:	2300      	movs	r3, #0
 80210bc:	4606      	mov	r6, r0
 80210be:	9301      	str	r3, [sp, #4]
 80210c0:	460d      	mov	r5, r1
 80210c2:	b154      	cbz	r4, 80210da <_SetVRAMAddr+0x26>
 80210c4:	aa02      	add	r2, sp, #8
 80210c6:	6025      	str	r5, [r4, #0]
 80210c8:	6065      	str	r5, [r4, #4]
 80210ca:	f842 5d04 	str.w	r5, [r2, #-4]!
 80210ce:	69b0      	ldr	r0, [r6, #24]
 80210d0:	2102      	movs	r1, #2
 80210d2:	f7f0 ff11 	bl	8011ef8 <LCD_X_DisplayDriver>
 80210d6:	b002      	add	sp, #8
 80210d8:	bd70      	pop	{r4, r5, r6, pc}
 80210da:	204c      	movs	r0, #76	; 0x4c
 80210dc:	f004 fac6 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 80210e0:	4621      	mov	r1, r4
 80210e2:	60b0      	str	r0, [r6, #8]
 80210e4:	224c      	movs	r2, #76	; 0x4c
 80210e6:	f001 f8fb 	bl	80222e0 <GUI__memset>
 80210ea:	68b4      	ldr	r4, [r6, #8]
 80210ec:	2c00      	cmp	r4, #0
 80210ee:	d1e9      	bne.n	80210c4 <_SetVRAMAddr+0x10>
 80210f0:	b002      	add	sp, #8
 80210f2:	bd70      	pop	{r4, r5, r6, pc}

080210f4 <_SetSize>:
 80210f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210f6:	6884      	ldr	r4, [r0, #8]
 80210f8:	b083      	sub	sp, #12
 80210fa:	2300      	movs	r3, #0
 80210fc:	4605      	mov	r5, r0
 80210fe:	9300      	str	r3, [sp, #0]
 8021100:	460f      	mov	r7, r1
 8021102:	4616      	mov	r6, r2
 8021104:	9301      	str	r3, [sp, #4]
 8021106:	b1ac      	cbz	r4, 8021134 <_SetSize+0x40>
 8021108:	69e3      	ldr	r3, [r4, #28]
 802110a:	b153      	cbz	r3, 8021122 <_SetSize+0x2e>
 802110c:	60e7      	str	r7, [r4, #12]
 802110e:	6126      	str	r6, [r4, #16]
 8021110:	69a8      	ldr	r0, [r5, #24]
 8021112:	9700      	str	r7, [sp, #0]
 8021114:	2107      	movs	r1, #7
 8021116:	466a      	mov	r2, sp
 8021118:	9601      	str	r6, [sp, #4]
 802111a:	f7f0 feed 	bl	8011ef8 <LCD_X_DisplayDriver>
 802111e:	b003      	add	sp, #12
 8021120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021122:	69a8      	ldr	r0, [r5, #24]
 8021124:	f000 fa3e 	bl	80215a4 <LCD_GetSwapXYEx>
 8021128:	2800      	cmp	r0, #0
 802112a:	bf0c      	ite	eq
 802112c:	4638      	moveq	r0, r7
 802112e:	4630      	movne	r0, r6
 8021130:	61e0      	str	r0, [r4, #28]
 8021132:	e7eb      	b.n	802110c <_SetSize+0x18>
 8021134:	204c      	movs	r0, #76	; 0x4c
 8021136:	f004 fa99 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 802113a:	4621      	mov	r1, r4
 802113c:	60a8      	str	r0, [r5, #8]
 802113e:	224c      	movs	r2, #76	; 0x4c
 8021140:	f001 f8ce 	bl	80222e0 <GUI__memset>
 8021144:	68ac      	ldr	r4, [r5, #8]
 8021146:	2c00      	cmp	r4, #0
 8021148:	d1de      	bne.n	8021108 <_SetSize+0x14>
 802114a:	b003      	add	sp, #12
 802114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802114e:	bf00      	nop

08021150 <_CopyBuffer>:
 8021150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021154:	6884      	ldr	r4, [r0, #8]
 8021156:	4605      	mov	r5, r0
 8021158:	460f      	mov	r7, r1
 802115a:	4616      	mov	r6, r2
 802115c:	b314      	cbz	r4, 80211a4 <_CopyBuffer+0x54>
 802115e:	42b7      	cmp	r7, r6
 8021160:	d017      	beq.n	8021192 <_CopyBuffer+0x42>
 8021162:	68eb      	ldr	r3, [r5, #12]
 8021164:	2108      	movs	r1, #8
 8021166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021168:	4628      	mov	r0, r5
 802116a:	4798      	blx	r3
 802116c:	6922      	ldr	r2, [r4, #16]
 802116e:	6961      	ldr	r1, [r4, #20]
 8021170:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8021174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021176:	fb01 fe02 	mul.w	lr, r1, r2
 802117a:	fb00 f00e 	mul.w	r0, r0, lr
 802117e:	08c2      	lsrs	r2, r0, #3
 8021180:	fb06 c802 	mla	r8, r6, r2, ip
 8021184:	b13b      	cbz	r3, 8021196 <_CopyBuffer+0x46>
 8021186:	69a8      	ldr	r0, [r5, #24]
 8021188:	4639      	mov	r1, r7
 802118a:	4632      	mov	r2, r6
 802118c:	4798      	blx	r3
 802118e:	f8c4 8000 	str.w	r8, [r4]
 8021192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021196:	4b0a      	ldr	r3, [pc, #40]	; (80211c0 <_CopyBuffer+0x70>)
 8021198:	fb07 c102 	mla	r1, r7, r2, ip
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	4640      	mov	r0, r8
 80211a0:	4798      	blx	r3
 80211a2:	e7f4      	b.n	802118e <_CopyBuffer+0x3e>
 80211a4:	204c      	movs	r0, #76	; 0x4c
 80211a6:	f004 fa61 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 80211aa:	4621      	mov	r1, r4
 80211ac:	60a8      	str	r0, [r5, #8]
 80211ae:	224c      	movs	r2, #76	; 0x4c
 80211b0:	f001 f896 	bl	80222e0 <GUI__memset>
 80211b4:	68ac      	ldr	r4, [r5, #8]
 80211b6:	2c00      	cmp	r4, #0
 80211b8:	d1d1      	bne.n	802115e <_CopyBuffer+0xe>
 80211ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211be:	bf00      	nop
 80211c0:	20000258 	.word	0x20000258

080211c4 <_SetPos>:
 80211c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211c8:	6884      	ldr	r4, [r0, #8]
 80211ca:	b089      	sub	sp, #36	; 0x24
 80211cc:	2300      	movs	r3, #0
 80211ce:	4605      	mov	r5, r0
 80211d0:	9302      	str	r3, [sp, #8]
 80211d2:	460f      	mov	r7, r1
 80211d4:	4616      	mov	r6, r2
 80211d6:	9303      	str	r3, [sp, #12]
 80211d8:	9304      	str	r3, [sp, #16]
 80211da:	9305      	str	r3, [sp, #20]
 80211dc:	9306      	str	r3, [sp, #24]
 80211de:	9307      	str	r3, [sp, #28]
 80211e0:	2c00      	cmp	r4, #0
 80211e2:	d05f      	beq.n	80212a4 <_SetPos+0xe0>
 80211e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80211e6:	b133      	cbz	r3, 80211f6 <_SetPos+0x32>
 80211e8:	69a8      	ldr	r0, [r5, #24]
 80211ea:	4639      	mov	r1, r7
 80211ec:	4632      	mov	r2, r6
 80211ee:	4798      	blx	r3
 80211f0:	b009      	add	sp, #36	; 0x24
 80211f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211f6:	6227      	str	r7, [r4, #32]
 80211f8:	6266      	str	r6, [r4, #36]	; 0x24
 80211fa:	f000 faad 	bl	8021758 <LCD_GetXSizeDisplay>
 80211fe:	4682      	mov	sl, r0
 8021200:	f000 fab0 	bl	8021764 <LCD_GetYSizeDisplay>
 8021204:	68eb      	ldr	r3, [r5, #12]
 8021206:	f8d4 900c 	ldr.w	r9, [r4, #12]
 802120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802120c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8021210:	4683      	mov	fp, r0
 8021212:	2108      	movs	r1, #8
 8021214:	4628      	mov	r0, r5
 8021216:	4798      	blx	r3
 8021218:	1dc2      	adds	r2, r0, #7
 802121a:	bf48      	it	mi
 802121c:	f100 020e 	addmi.w	r2, r0, #14
 8021220:	10d2      	asrs	r2, r2, #3
 8021222:	2f00      	cmp	r7, #0
 8021224:	9206      	str	r2, [sp, #24]
 8021226:	db57      	blt.n	80212d8 <_SetPos+0x114>
 8021228:	eb07 0309 	add.w	r3, r7, r9
 802122c:	459a      	cmp	sl, r3
 802122e:	9702      	str	r7, [sp, #8]
 8021230:	bfb6      	itet	lt
 8021232:	ebc7 070a 	rsblt	r7, r7, sl
 8021236:	f8cd 9010 	strge.w	r9, [sp, #16]
 802123a:	9704      	strlt	r7, [sp, #16]
 802123c:	2e00      	cmp	r6, #0
 802123e:	db3f      	blt.n	80212c0 <_SetPos+0xfc>
 8021240:	eb06 0308 	add.w	r3, r6, r8
 8021244:	459b      	cmp	fp, r3
 8021246:	bfb8      	it	lt
 8021248:	ebc6 010b 	rsblt	r1, r6, fp
 802124c:	9603      	str	r6, [sp, #12]
 802124e:	bfa6      	itte	ge
 8021250:	f8cd 8014 	strge.w	r8, [sp, #20]
 8021254:	4641      	movge	r1, r8
 8021256:	9105      	strlt	r1, [sp, #20]
 8021258:	9b04      	ldr	r3, [sp, #16]
 802125a:	2b00      	cmp	r3, #0
 802125c:	dd10      	ble.n	8021280 <_SetPos+0xbc>
 802125e:	2900      	cmp	r1, #0
 8021260:	dd0e      	ble.n	8021280 <_SetPos+0xbc>
 8021262:	9b02      	ldr	r3, [sp, #8]
 8021264:	459a      	cmp	sl, r3
 8021266:	dd0b      	ble.n	8021280 <_SetPos+0xbc>
 8021268:	45b3      	cmp	fp, r6
 802126a:	dd09      	ble.n	8021280 <_SetPos+0xbc>
 802126c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802126e:	2b00      	cmp	r3, #0
 8021270:	d03c      	beq.n	80212ec <_SetPos+0x128>
 8021272:	2108      	movs	r1, #8
 8021274:	69a8      	ldr	r0, [r5, #24]
 8021276:	eb0d 0201 	add.w	r2, sp, r1
 802127a:	f7f0 fe3d 	bl	8011ef8 <LCD_X_DisplayDriver>
 802127e:	e7b7      	b.n	80211f0 <_SetPos+0x2c>
 8021280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021282:	2b01      	cmp	r3, #1
 8021284:	d1b4      	bne.n	80211f0 <_SetPos+0x2c>
 8021286:	68ac      	ldr	r4, [r5, #8]
 8021288:	2300      	movs	r3, #0
 802128a:	9301      	str	r3, [sp, #4]
 802128c:	2c00      	cmp	r4, #0
 802128e:	d03a      	beq.n	8021306 <_SetPos+0x142>
 8021290:	aa08      	add	r2, sp, #32
 8021292:	2300      	movs	r3, #0
 8021294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021296:	69a8      	ldr	r0, [r5, #24]
 8021298:	f842 3d1c 	str.w	r3, [r2, #-28]!
 802129c:	2109      	movs	r1, #9
 802129e:	f7f0 fe2b 	bl	8011ef8 <LCD_X_DisplayDriver>
 80212a2:	e7a5      	b.n	80211f0 <_SetPos+0x2c>
 80212a4:	204c      	movs	r0, #76	; 0x4c
 80212a6:	f004 f9e1 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 80212aa:	4621      	mov	r1, r4
 80212ac:	60a8      	str	r0, [r5, #8]
 80212ae:	224c      	movs	r2, #76	; 0x4c
 80212b0:	f001 f816 	bl	80222e0 <GUI__memset>
 80212b4:	68ac      	ldr	r4, [r5, #8]
 80212b6:	2c00      	cmp	r4, #0
 80212b8:	d194      	bne.n	80211e4 <_SetPos+0x20>
 80212ba:	b009      	add	sp, #36	; 0x24
 80212bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212c0:	9b07      	ldr	r3, [sp, #28]
 80212c2:	fb02 f206 	mul.w	r2, r2, r6
 80212c6:	eb08 0106 	add.w	r1, r8, r6
 80212ca:	fb09 3312 	mls	r3, r9, r2, r3
 80212ce:	2600      	movs	r6, #0
 80212d0:	9105      	str	r1, [sp, #20]
 80212d2:	9307      	str	r3, [sp, #28]
 80212d4:	9603      	str	r6, [sp, #12]
 80212d6:	e7bf      	b.n	8021258 <_SetPos+0x94>
 80212d8:	9b07      	ldr	r3, [sp, #28]
 80212da:	eb09 0007 	add.w	r0, r9, r7
 80212de:	fb02 3317 	mls	r3, r2, r7, r3
 80212e2:	2100      	movs	r1, #0
 80212e4:	9307      	str	r3, [sp, #28]
 80212e6:	9004      	str	r0, [sp, #16]
 80212e8:	9102      	str	r1, [sp, #8]
 80212ea:	e7a7      	b.n	802123c <_SetPos+0x78>
 80212ec:	68ac      	ldr	r4, [r5, #8]
 80212ee:	9301      	str	r3, [sp, #4]
 80212f0:	b1b4      	cbz	r4, 8021320 <_SetPos+0x15c>
 80212f2:	aa08      	add	r2, sp, #32
 80212f4:	2301      	movs	r3, #1
 80212f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80212f8:	69a8      	ldr	r0, [r5, #24]
 80212fa:	f842 3d1c 	str.w	r3, [r2, #-28]!
 80212fe:	2109      	movs	r1, #9
 8021300:	f7f0 fdfa 	bl	8011ef8 <LCD_X_DisplayDriver>
 8021304:	e7b5      	b.n	8021272 <_SetPos+0xae>
 8021306:	204c      	movs	r0, #76	; 0x4c
 8021308:	f004 f9b0 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 802130c:	4621      	mov	r1, r4
 802130e:	60a8      	str	r0, [r5, #8]
 8021310:	224c      	movs	r2, #76	; 0x4c
 8021312:	f000 ffe5 	bl	80222e0 <GUI__memset>
 8021316:	68ac      	ldr	r4, [r5, #8]
 8021318:	2c00      	cmp	r4, #0
 802131a:	f43f af69 	beq.w	80211f0 <_SetPos+0x2c>
 802131e:	e7b7      	b.n	8021290 <_SetPos+0xcc>
 8021320:	204c      	movs	r0, #76	; 0x4c
 8021322:	f004 f9a3 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8021326:	4621      	mov	r1, r4
 8021328:	60a8      	str	r0, [r5, #8]
 802132a:	224c      	movs	r2, #76	; 0x4c
 802132c:	f000 ffd8 	bl	80222e0 <GUI__memset>
 8021330:	68ac      	ldr	r4, [r5, #8]
 8021332:	2c00      	cmp	r4, #0
 8021334:	d09d      	beq.n	8021272 <_SetPos+0xae>
 8021336:	e7dc      	b.n	80212f2 <_SetPos+0x12e>

08021338 <LCD_UpdateColorIndices>:
 8021338:	b510      	push	{r4, lr}
 802133a:	4c07      	ldr	r4, [pc, #28]	; (8021358 <LCD_UpdateColorIndices+0x20>)
 802133c:	6823      	ldr	r3, [r4, #0]
 802133e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021340:	f000 fe8c 	bl	802205c <LCD_Color2Index>
 8021344:	f000 feaa 	bl	802209c <LCD_SetColorIndex>
 8021348:	6823      	ldr	r3, [r4, #0]
 802134a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802134c:	f000 fe86 	bl	802205c <LCD_Color2Index>
 8021350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021354:	f000 beae 	b.w	80220b4 <LCD_SetBkColorIndex>
 8021358:	20000280 	.word	0x20000280

0802135c <LCD_SetClipRectEx>:
 802135c:	b530      	push	{r4, r5, lr}
 802135e:	4c0a      	ldr	r4, [pc, #40]	; (8021388 <LCD_SetClipRectEx+0x2c>)
 8021360:	4a0a      	ldr	r2, [pc, #40]	; (802138c <LCD_SetClipRectEx+0x30>)
 8021362:	6823      	ldr	r3, [r4, #0]
 8021364:	7c5b      	ldrb	r3, [r3, #17]
 8021366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802136a:	68da      	ldr	r2, [r3, #12]
 802136c:	b083      	sub	sp, #12
 802136e:	4605      	mov	r5, r0
 8021370:	4669      	mov	r1, sp
 8021372:	4618      	mov	r0, r3
 8021374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8021376:	4790      	blx	r2
 8021378:	6820      	ldr	r0, [r4, #0]
 802137a:	4629      	mov	r1, r5
 802137c:	466a      	mov	r2, sp
 802137e:	3008      	adds	r0, #8
 8021380:	f000 ff74 	bl	802226c <GUI__IntersectRects>
 8021384:	b003      	add	sp, #12
 8021386:	bd30      	pop	{r4, r5, pc}
 8021388:	20000280 	.word	0x20000280
 802138c:	2002cc24 	.word	0x2002cc24

08021390 <LCD_SetVRAMAddrEx>:
 8021390:	b510      	push	{r4, lr}
 8021392:	b082      	sub	sp, #8
 8021394:	460c      	mov	r4, r1
 8021396:	f002 fc57 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802139a:	9001      	str	r0, [sp, #4]
 802139c:	b160      	cbz	r0, 80213b8 <LCD_SetVRAMAddrEx+0x28>
 802139e:	68c3      	ldr	r3, [r0, #12]
 80213a0:	2109      	movs	r1, #9
 80213a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213a4:	a801      	add	r0, sp, #4
 80213a6:	4798      	blx	r3
 80213a8:	4603      	mov	r3, r0
 80213aa:	b128      	cbz	r0, 80213b8 <LCD_SetVRAMAddrEx+0x28>
 80213ac:	9801      	ldr	r0, [sp, #4]
 80213ae:	4621      	mov	r1, r4
 80213b0:	4798      	blx	r3
 80213b2:	2000      	movs	r0, #0
 80213b4:	b002      	add	sp, #8
 80213b6:	bd10      	pop	{r4, pc}
 80213b8:	2001      	movs	r0, #1
 80213ba:	b002      	add	sp, #8
 80213bc:	bd10      	pop	{r4, pc}
 80213be:	bf00      	nop

080213c0 <LCD_SetVSizeEx>:
 80213c0:	b530      	push	{r4, r5, lr}
 80213c2:	b083      	sub	sp, #12
 80213c4:	460d      	mov	r5, r1
 80213c6:	4614      	mov	r4, r2
 80213c8:	f002 fc3e 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80213cc:	9001      	str	r0, [sp, #4]
 80213ce:	b168      	cbz	r0, 80213ec <LCD_SetVSizeEx+0x2c>
 80213d0:	68c3      	ldr	r3, [r0, #12]
 80213d2:	210a      	movs	r1, #10
 80213d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213d6:	a801      	add	r0, sp, #4
 80213d8:	4798      	blx	r3
 80213da:	4603      	mov	r3, r0
 80213dc:	b130      	cbz	r0, 80213ec <LCD_SetVSizeEx+0x2c>
 80213de:	9801      	ldr	r0, [sp, #4]
 80213e0:	4629      	mov	r1, r5
 80213e2:	4622      	mov	r2, r4
 80213e4:	4798      	blx	r3
 80213e6:	2000      	movs	r0, #0
 80213e8:	b003      	add	sp, #12
 80213ea:	bd30      	pop	{r4, r5, pc}
 80213ec:	2001      	movs	r0, #1
 80213ee:	b003      	add	sp, #12
 80213f0:	bd30      	pop	{r4, r5, pc}
 80213f2:	bf00      	nop

080213f4 <LCD_SetSizeEx>:
 80213f4:	b530      	push	{r4, r5, lr}
 80213f6:	b083      	sub	sp, #12
 80213f8:	460d      	mov	r5, r1
 80213fa:	4614      	mov	r4, r2
 80213fc:	f002 fc24 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021400:	9001      	str	r0, [sp, #4]
 8021402:	b168      	cbz	r0, 8021420 <LCD_SetSizeEx+0x2c>
 8021404:	68c3      	ldr	r3, [r0, #12]
 8021406:	210b      	movs	r1, #11
 8021408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802140a:	a801      	add	r0, sp, #4
 802140c:	4798      	blx	r3
 802140e:	4603      	mov	r3, r0
 8021410:	b130      	cbz	r0, 8021420 <LCD_SetSizeEx+0x2c>
 8021412:	9801      	ldr	r0, [sp, #4]
 8021414:	4629      	mov	r1, r5
 8021416:	4622      	mov	r2, r4
 8021418:	4798      	blx	r3
 802141a:	2000      	movs	r0, #0
 802141c:	b003      	add	sp, #12
 802141e:	bd30      	pop	{r4, r5, pc}
 8021420:	2001      	movs	r0, #1
 8021422:	b003      	add	sp, #12
 8021424:	bd30      	pop	{r4, r5, pc}
 8021426:	bf00      	nop

08021428 <LCD_SetLUTEntryEx>:
 8021428:	b530      	push	{r4, r5, lr}
 802142a:	b083      	sub	sp, #12
 802142c:	460d      	mov	r5, r1
 802142e:	4614      	mov	r4, r2
 8021430:	f002 fc0a 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021434:	9001      	str	r0, [sp, #4]
 8021436:	b168      	cbz	r0, 8021454 <LCD_SetLUTEntryEx+0x2c>
 8021438:	68c3      	ldr	r3, [r0, #12]
 802143a:	2110      	movs	r1, #16
 802143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802143e:	a801      	add	r0, sp, #4
 8021440:	4798      	blx	r3
 8021442:	4603      	mov	r3, r0
 8021444:	b130      	cbz	r0, 8021454 <LCD_SetLUTEntryEx+0x2c>
 8021446:	9801      	ldr	r0, [sp, #4]
 8021448:	4629      	mov	r1, r5
 802144a:	4622      	mov	r2, r4
 802144c:	4798      	blx	r3
 802144e:	2000      	movs	r0, #0
 8021450:	b003      	add	sp, #12
 8021452:	bd30      	pop	{r4, r5, pc}
 8021454:	2001      	movs	r0, #1
 8021456:	b003      	add	sp, #12
 8021458:	bd30      	pop	{r4, r5, pc}
 802145a:	bf00      	nop

0802145c <LCD_GetPosEx>:
 802145c:	b530      	push	{r4, r5, lr}
 802145e:	b083      	sub	sp, #12
 8021460:	460d      	mov	r5, r1
 8021462:	4614      	mov	r4, r2
 8021464:	f002 fbf0 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021468:	9001      	str	r0, [sp, #4]
 802146a:	b168      	cbz	r0, 8021488 <LCD_GetPosEx+0x2c>
 802146c:	68c3      	ldr	r3, [r0, #12]
 802146e:	2104      	movs	r1, #4
 8021470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021472:	a801      	add	r0, sp, #4
 8021474:	4798      	blx	r3
 8021476:	4603      	mov	r3, r0
 8021478:	b130      	cbz	r0, 8021488 <LCD_GetPosEx+0x2c>
 802147a:	9801      	ldr	r0, [sp, #4]
 802147c:	4629      	mov	r1, r5
 802147e:	4622      	mov	r2, r4
 8021480:	4798      	blx	r3
 8021482:	2000      	movs	r0, #0
 8021484:	b003      	add	sp, #12
 8021486:	bd30      	pop	{r4, r5, pc}
 8021488:	2001      	movs	r0, #1
 802148a:	b003      	add	sp, #12
 802148c:	bd30      	pop	{r4, r5, pc}
 802148e:	bf00      	nop

08021490 <LCD_SetDevFunc>:
 8021490:	b530      	push	{r4, r5, lr}
 8021492:	b083      	sub	sp, #12
 8021494:	460d      	mov	r5, r1
 8021496:	4614      	mov	r4, r2
 8021498:	f002 fbd6 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802149c:	9001      	str	r0, [sp, #4]
 802149e:	b168      	cbz	r0, 80214bc <LCD_SetDevFunc+0x2c>
 80214a0:	68c3      	ldr	r3, [r0, #12]
 80214a2:	2116      	movs	r1, #22
 80214a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214a6:	a801      	add	r0, sp, #4
 80214a8:	4798      	blx	r3
 80214aa:	4603      	mov	r3, r0
 80214ac:	b130      	cbz	r0, 80214bc <LCD_SetDevFunc+0x2c>
 80214ae:	9801      	ldr	r0, [sp, #4]
 80214b0:	4629      	mov	r1, r5
 80214b2:	4622      	mov	r2, r4
 80214b4:	4798      	blx	r3
 80214b6:	2000      	movs	r0, #0
 80214b8:	b003      	add	sp, #12
 80214ba:	bd30      	pop	{r4, r5, pc}
 80214bc:	2001      	movs	r0, #1
 80214be:	b003      	add	sp, #12
 80214c0:	bd30      	pop	{r4, r5, pc}
 80214c2:	bf00      	nop

080214c4 <LCD_GetXSizeEx>:
 80214c4:	2801      	cmp	r0, #1
 80214c6:	b508      	push	{r3, lr}
 80214c8:	dd01      	ble.n	80214ce <LCD_GetXSizeEx+0xa>
 80214ca:	2000      	movs	r0, #0
 80214cc:	bd08      	pop	{r3, pc}
 80214ce:	f002 fbbb 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80214d2:	b120      	cbz	r0, 80214de <LCD_GetXSizeEx+0x1a>
 80214d4:	68c3      	ldr	r3, [r0, #12]
 80214d6:	2101      	movs	r1, #1
 80214d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214da:	4798      	blx	r3
 80214dc:	bd08      	pop	{r3, pc}
 80214de:	bd08      	pop	{r3, pc}

080214e0 <LCD_GetYSizeEx>:
 80214e0:	2801      	cmp	r0, #1
 80214e2:	b508      	push	{r3, lr}
 80214e4:	dd01      	ble.n	80214ea <LCD_GetYSizeEx+0xa>
 80214e6:	2000      	movs	r0, #0
 80214e8:	bd08      	pop	{r3, pc}
 80214ea:	f002 fbad 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80214ee:	b120      	cbz	r0, 80214fa <LCD_GetYSizeEx+0x1a>
 80214f0:	68c3      	ldr	r3, [r0, #12]
 80214f2:	2102      	movs	r1, #2
 80214f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214f6:	4798      	blx	r3
 80214f8:	bd08      	pop	{r3, pc}
 80214fa:	bd08      	pop	{r3, pc}

080214fc <LCD_GetVXSizeEx>:
 80214fc:	2801      	cmp	r0, #1
 80214fe:	b508      	push	{r3, lr}
 8021500:	dd01      	ble.n	8021506 <LCD_GetVXSizeEx+0xa>
 8021502:	2000      	movs	r0, #0
 8021504:	bd08      	pop	{r3, pc}
 8021506:	f002 fb9f 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802150a:	b120      	cbz	r0, 8021516 <LCD_GetVXSizeEx+0x1a>
 802150c:	68c3      	ldr	r3, [r0, #12]
 802150e:	2103      	movs	r1, #3
 8021510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021512:	4798      	blx	r3
 8021514:	bd08      	pop	{r3, pc}
 8021516:	bd08      	pop	{r3, pc}

08021518 <LCD_GetVYSizeEx>:
 8021518:	2801      	cmp	r0, #1
 802151a:	b508      	push	{r3, lr}
 802151c:	dd01      	ble.n	8021522 <LCD_GetVYSizeEx+0xa>
 802151e:	2000      	movs	r0, #0
 8021520:	bd08      	pop	{r3, pc}
 8021522:	f002 fb91 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021526:	b120      	cbz	r0, 8021532 <LCD_GetVYSizeEx+0x1a>
 8021528:	68c3      	ldr	r3, [r0, #12]
 802152a:	2104      	movs	r1, #4
 802152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802152e:	4798      	blx	r3
 8021530:	bd08      	pop	{r3, pc}
 8021532:	bd08      	pop	{r3, pc}

08021534 <LCD_GetBitsPerPixelEx>:
 8021534:	2801      	cmp	r0, #1
 8021536:	b508      	push	{r3, lr}
 8021538:	dd01      	ble.n	802153e <LCD_GetBitsPerPixelEx+0xa>
 802153a:	2000      	movs	r0, #0
 802153c:	bd08      	pop	{r3, pc}
 802153e:	f002 fb83 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021542:	b120      	cbz	r0, 802154e <LCD_GetBitsPerPixelEx+0x1a>
 8021544:	68c3      	ldr	r3, [r0, #12]
 8021546:	2108      	movs	r1, #8
 8021548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802154a:	4798      	blx	r3
 802154c:	bd08      	pop	{r3, pc}
 802154e:	bd08      	pop	{r3, pc}

08021550 <LCD_GetNumColorsEx>:
 8021550:	2801      	cmp	r0, #1
 8021552:	b508      	push	{r3, lr}
 8021554:	dd01      	ble.n	802155a <LCD_GetNumColorsEx+0xa>
 8021556:	2000      	movs	r0, #0
 8021558:	bd08      	pop	{r3, pc}
 802155a:	f002 fb75 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802155e:	b120      	cbz	r0, 802156a <LCD_GetNumColorsEx+0x1a>
 8021560:	68c3      	ldr	r3, [r0, #12]
 8021562:	2109      	movs	r1, #9
 8021564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021566:	4798      	blx	r3
 8021568:	bd08      	pop	{r3, pc}
 802156a:	bd08      	pop	{r3, pc}

0802156c <LCD_GetMirrorXEx>:
 802156c:	2801      	cmp	r0, #1
 802156e:	b508      	push	{r3, lr}
 8021570:	dd01      	ble.n	8021576 <LCD_GetMirrorXEx+0xa>
 8021572:	2000      	movs	r0, #0
 8021574:	bd08      	pop	{r3, pc}
 8021576:	f002 fb67 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802157a:	b120      	cbz	r0, 8021586 <LCD_GetMirrorXEx+0x1a>
 802157c:	68c3      	ldr	r3, [r0, #12]
 802157e:	210c      	movs	r1, #12
 8021580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021582:	4798      	blx	r3
 8021584:	bd08      	pop	{r3, pc}
 8021586:	bd08      	pop	{r3, pc}

08021588 <LCD_GetMirrorYEx>:
 8021588:	2801      	cmp	r0, #1
 802158a:	b508      	push	{r3, lr}
 802158c:	dd01      	ble.n	8021592 <LCD_GetMirrorYEx+0xa>
 802158e:	2000      	movs	r0, #0
 8021590:	bd08      	pop	{r3, pc}
 8021592:	f002 fb59 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021596:	b120      	cbz	r0, 80215a2 <LCD_GetMirrorYEx+0x1a>
 8021598:	68c3      	ldr	r3, [r0, #12]
 802159a:	210d      	movs	r1, #13
 802159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802159e:	4798      	blx	r3
 80215a0:	bd08      	pop	{r3, pc}
 80215a2:	bd08      	pop	{r3, pc}

080215a4 <LCD_GetSwapXYEx>:
 80215a4:	2801      	cmp	r0, #1
 80215a6:	b508      	push	{r3, lr}
 80215a8:	dd01      	ble.n	80215ae <LCD_GetSwapXYEx+0xa>
 80215aa:	2000      	movs	r0, #0
 80215ac:	bd08      	pop	{r3, pc}
 80215ae:	f002 fb4b 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80215b2:	b120      	cbz	r0, 80215be <LCD_GetSwapXYEx+0x1a>
 80215b4:	68c3      	ldr	r3, [r0, #12]
 80215b6:	210e      	movs	r1, #14
 80215b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215ba:	4798      	blx	r3
 80215bc:	bd08      	pop	{r3, pc}
 80215be:	bd08      	pop	{r3, pc}

080215c0 <LCD_GetXSize>:
 80215c0:	b508      	push	{r3, lr}
 80215c2:	4b08      	ldr	r3, [pc, #32]	; (80215e4 <LCD_GetXSize+0x24>)
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	7c58      	ldrb	r0, [r3, #17]
 80215c8:	2801      	cmp	r0, #1
 80215ca:	dd01      	ble.n	80215d0 <LCD_GetXSize+0x10>
 80215cc:	2000      	movs	r0, #0
 80215ce:	bd08      	pop	{r3, pc}
 80215d0:	f002 fb3a 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80215d4:	b120      	cbz	r0, 80215e0 <LCD_GetXSize+0x20>
 80215d6:	68c3      	ldr	r3, [r0, #12]
 80215d8:	2101      	movs	r1, #1
 80215da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215dc:	4798      	blx	r3
 80215de:	bd08      	pop	{r3, pc}
 80215e0:	bd08      	pop	{r3, pc}
 80215e2:	bf00      	nop
 80215e4:	20000280 	.word	0x20000280

080215e8 <LCD_GetYSize>:
 80215e8:	b508      	push	{r3, lr}
 80215ea:	4b08      	ldr	r3, [pc, #32]	; (802160c <LCD_GetYSize+0x24>)
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	7c58      	ldrb	r0, [r3, #17]
 80215f0:	2801      	cmp	r0, #1
 80215f2:	dd01      	ble.n	80215f8 <LCD_GetYSize+0x10>
 80215f4:	2000      	movs	r0, #0
 80215f6:	bd08      	pop	{r3, pc}
 80215f8:	f002 fb26 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80215fc:	b120      	cbz	r0, 8021608 <LCD_GetYSize+0x20>
 80215fe:	68c3      	ldr	r3, [r0, #12]
 8021600:	2102      	movs	r1, #2
 8021602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021604:	4798      	blx	r3
 8021606:	bd08      	pop	{r3, pc}
 8021608:	bd08      	pop	{r3, pc}
 802160a:	bf00      	nop
 802160c:	20000280 	.word	0x20000280

08021610 <LCD_GetNumColors>:
 8021610:	b508      	push	{r3, lr}
 8021612:	4b08      	ldr	r3, [pc, #32]	; (8021634 <LCD_GetNumColors+0x24>)
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	7c58      	ldrb	r0, [r3, #17]
 8021618:	2801      	cmp	r0, #1
 802161a:	dd01      	ble.n	8021620 <LCD_GetNumColors+0x10>
 802161c:	2000      	movs	r0, #0
 802161e:	bd08      	pop	{r3, pc}
 8021620:	f002 fb12 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021624:	b120      	cbz	r0, 8021630 <LCD_GetNumColors+0x20>
 8021626:	68c3      	ldr	r3, [r0, #12]
 8021628:	2109      	movs	r1, #9
 802162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802162c:	4798      	blx	r3
 802162e:	bd08      	pop	{r3, pc}
 8021630:	bd08      	pop	{r3, pc}
 8021632:	bf00      	nop
 8021634:	20000280 	.word	0x20000280

08021638 <GUI_GetBitsPerPixelEx>:
 8021638:	b508      	push	{r3, lr}
 802163a:	4b04      	ldr	r3, [pc, #16]	; (802164c <GUI_GetBitsPerPixelEx+0x14>)
 802163c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021640:	68c3      	ldr	r3, [r0, #12]
 8021642:	2108      	movs	r1, #8
 8021644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021646:	4798      	blx	r3
 8021648:	bd08      	pop	{r3, pc}
 802164a:	bf00      	nop
 802164c:	2002cc24 	.word	0x2002cc24

08021650 <LCD_GetPalette>:
 8021650:	b508      	push	{r3, lr}
 8021652:	4b06      	ldr	r3, [pc, #24]	; (802166c <LCD_GetPalette+0x1c>)
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	7c58      	ldrb	r0, [r3, #17]
 8021658:	f002 faf6 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802165c:	b120      	cbz	r0, 8021668 <LCD_GetPalette+0x18>
 802165e:	68c3      	ldr	r3, [r0, #12]
 8021660:	2102      	movs	r1, #2
 8021662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021664:	4798      	blx	r3
 8021666:	bd08      	pop	{r3, pc}
 8021668:	bd08      	pop	{r3, pc}
 802166a:	bf00      	nop
 802166c:	20000280 	.word	0x20000280

08021670 <GUI_GetpfIndex2ColorEx>:
 8021670:	4b02      	ldr	r3, [pc, #8]	; (802167c <GUI_GetpfIndex2ColorEx+0xc>)
 8021672:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021676:	691b      	ldr	r3, [r3, #16]
 8021678:	6858      	ldr	r0, [r3, #4]
 802167a:	4770      	bx	lr
 802167c:	2002cc24 	.word	0x2002cc24

08021680 <GUI_GetpfColor2IndexEx>:
 8021680:	4b02      	ldr	r3, [pc, #8]	; (802168c <GUI_GetpfColor2IndexEx+0xc>)
 8021682:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021686:	691b      	ldr	r3, [r3, #16]
 8021688:	6818      	ldr	r0, [r3, #0]
 802168a:	4770      	bx	lr
 802168c:	2002cc24 	.word	0x2002cc24

08021690 <LCD_GetXSizeMax>:
 8021690:	b538      	push	{r3, r4, r5, lr}
 8021692:	2501      	movs	r5, #1
 8021694:	4628      	mov	r0, r5
 8021696:	f002 fad7 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802169a:	2400      	movs	r4, #0
 802169c:	2101      	movs	r1, #1
 802169e:	b168      	cbz	r0, 80216bc <LCD_GetXSizeMax+0x2c>
 80216a0:	68c3      	ldr	r3, [r0, #12]
 80216a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216a4:	4798      	blx	r3
 80216a6:	4284      	cmp	r4, r0
 80216a8:	bfb8      	it	lt
 80216aa:	4604      	movlt	r4, r0
 80216ac:	b15d      	cbz	r5, 80216c6 <LCD_GetXSizeMax+0x36>
 80216ae:	2500      	movs	r5, #0
 80216b0:	4628      	mov	r0, r5
 80216b2:	f002 fac9 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80216b6:	2101      	movs	r1, #1
 80216b8:	2800      	cmp	r0, #0
 80216ba:	d1f1      	bne.n	80216a0 <LCD_GetXSizeMax+0x10>
 80216bc:	4284      	cmp	r4, r0
 80216be:	bfb8      	it	lt
 80216c0:	4604      	movlt	r4, r0
 80216c2:	2d00      	cmp	r5, #0
 80216c4:	d1f3      	bne.n	80216ae <LCD_GetXSizeMax+0x1e>
 80216c6:	4620      	mov	r0, r4
 80216c8:	bd38      	pop	{r3, r4, r5, pc}
 80216ca:	bf00      	nop

080216cc <LCD_GetYSizeMax>:
 80216cc:	b538      	push	{r3, r4, r5, lr}
 80216ce:	2501      	movs	r5, #1
 80216d0:	4628      	mov	r0, r5
 80216d2:	f002 fab9 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80216d6:	2400      	movs	r4, #0
 80216d8:	2102      	movs	r1, #2
 80216da:	b168      	cbz	r0, 80216f8 <LCD_GetYSizeMax+0x2c>
 80216dc:	68c3      	ldr	r3, [r0, #12]
 80216de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216e0:	4798      	blx	r3
 80216e2:	4284      	cmp	r4, r0
 80216e4:	bfb8      	it	lt
 80216e6:	4604      	movlt	r4, r0
 80216e8:	b15d      	cbz	r5, 8021702 <LCD_GetYSizeMax+0x36>
 80216ea:	2500      	movs	r5, #0
 80216ec:	4628      	mov	r0, r5
 80216ee:	f002 faab 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80216f2:	2102      	movs	r1, #2
 80216f4:	2800      	cmp	r0, #0
 80216f6:	d1f1      	bne.n	80216dc <LCD_GetYSizeMax+0x10>
 80216f8:	4284      	cmp	r4, r0
 80216fa:	bfb8      	it	lt
 80216fc:	4604      	movlt	r4, r0
 80216fe:	2d00      	cmp	r5, #0
 8021700:	d1f3      	bne.n	80216ea <LCD_GetYSizeMax+0x1e>
 8021702:	4620      	mov	r0, r4
 8021704:	bd38      	pop	{r3, r4, r5, pc}
 8021706:	bf00      	nop

08021708 <LCD_GetVXSizeMax>:
 8021708:	b538      	push	{r3, r4, r5, lr}
 802170a:	2501      	movs	r5, #1
 802170c:	4628      	mov	r0, r5
 802170e:	f002 fa9b 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021712:	2400      	movs	r4, #0
 8021714:	2103      	movs	r1, #3
 8021716:	b168      	cbz	r0, 8021734 <LCD_GetVXSizeMax+0x2c>
 8021718:	68c3      	ldr	r3, [r0, #12]
 802171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802171c:	4798      	blx	r3
 802171e:	4284      	cmp	r4, r0
 8021720:	bfb8      	it	lt
 8021722:	4604      	movlt	r4, r0
 8021724:	b15d      	cbz	r5, 802173e <LCD_GetVXSizeMax+0x36>
 8021726:	2500      	movs	r5, #0
 8021728:	4628      	mov	r0, r5
 802172a:	f002 fa8d 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802172e:	2103      	movs	r1, #3
 8021730:	2800      	cmp	r0, #0
 8021732:	d1f1      	bne.n	8021718 <LCD_GetVXSizeMax+0x10>
 8021734:	4284      	cmp	r4, r0
 8021736:	bfb8      	it	lt
 8021738:	4604      	movlt	r4, r0
 802173a:	2d00      	cmp	r5, #0
 802173c:	d1f3      	bne.n	8021726 <LCD_GetVXSizeMax+0x1e>
 802173e:	4620      	mov	r0, r4
 8021740:	bd38      	pop	{r3, r4, r5, pc}
 8021742:	bf00      	nop

08021744 <LCD_SetDisplaySize>:
 8021744:	4a02      	ldr	r2, [pc, #8]	; (8021750 <LCD_SetDisplaySize+0xc>)
 8021746:	4b03      	ldr	r3, [pc, #12]	; (8021754 <LCD_SetDisplaySize+0x10>)
 8021748:	6010      	str	r0, [r2, #0]
 802174a:	6019      	str	r1, [r3, #0]
 802174c:	4770      	bx	lr
 802174e:	bf00      	nop
 8021750:	2002b18c 	.word	0x2002b18c
 8021754:	2002b188 	.word	0x2002b188

08021758 <LCD_GetXSizeDisplay>:
 8021758:	4b01      	ldr	r3, [pc, #4]	; (8021760 <LCD_GetXSizeDisplay+0x8>)
 802175a:	6818      	ldr	r0, [r3, #0]
 802175c:	4770      	bx	lr
 802175e:	bf00      	nop
 8021760:	2002b18c 	.word	0x2002b18c

08021764 <LCD_GetYSizeDisplay>:
 8021764:	4b01      	ldr	r3, [pc, #4]	; (802176c <LCD_GetYSizeDisplay+0x8>)
 8021766:	6818      	ldr	r0, [r3, #0]
 8021768:	4770      	bx	lr
 802176a:	bf00      	nop
 802176c:	2002b188 	.word	0x2002b188

08021770 <LCD__GetBPPDevice>:
 8021770:	b1c8      	cbz	r0, 80217a6 <LCD__GetBPPDevice+0x36>
 8021772:	f030 0301 	bics.w	r3, r0, #1
 8021776:	d017      	beq.n	80217a8 <LCD__GetBPPDevice+0x38>
 8021778:	f030 0303 	bics.w	r3, r0, #3
 802177c:	d101      	bne.n	8021782 <LCD__GetBPPDevice+0x12>
 802177e:	2008      	movs	r0, #8
 8021780:	4770      	bx	lr
 8021782:	f030 0307 	bics.w	r3, r0, #7
 8021786:	d0fa      	beq.n	802177e <LCD__GetBPPDevice+0xe>
 8021788:	f030 030f 	bics.w	r3, r0, #15
 802178c:	d0f7      	beq.n	802177e <LCD__GetBPPDevice+0xe>
 802178e:	f030 031f 	bics.w	r3, r0, #31
 8021792:	d0f4      	beq.n	802177e <LCD__GetBPPDevice+0xe>
 8021794:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8021798:	d0f1      	beq.n	802177e <LCD__GetBPPDevice+0xe>
 802179a:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 802179e:	f023 0301 	bic.w	r3, r3, #1
 80217a2:	b91b      	cbnz	r3, 80217ac <LCD__GetBPPDevice+0x3c>
 80217a4:	2010      	movs	r0, #16
 80217a6:	4770      	bx	lr
 80217a8:	2001      	movs	r0, #1
 80217aa:	4770      	bx	lr
 80217ac:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80217b0:	f023 030f 	bic.w	r3, r3, #15
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d0f5      	beq.n	80217a4 <LCD__GetBPPDevice+0x34>
 80217b8:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80217bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d0ef      	beq.n	80217a4 <LCD__GetBPPDevice+0x34>
 80217c4:	0c00      	lsrs	r0, r0, #16
 80217c6:	0400      	lsls	r0, r0, #16
 80217c8:	2800      	cmp	r0, #0
 80217ca:	bf0c      	ite	eq
 80217cc:	2010      	moveq	r0, #16
 80217ce:	2020      	movne	r0, #32
 80217d0:	4770      	bx	lr
 80217d2:	bf00      	nop

080217d4 <_SetBkColor>:
 80217d4:	b538      	push	{r3, r4, r5, lr}
 80217d6:	4c0b      	ldr	r4, [pc, #44]	; (8021804 <_SetBkColor+0x30>)
 80217d8:	6823      	ldr	r3, [r4, #0]
 80217da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80217dc:	4281      	cmp	r1, r0
 80217de:	d00d      	beq.n	80217fc <_SetBkColor+0x28>
 80217e0:	7c5d      	ldrb	r5, [r3, #17]
 80217e2:	4909      	ldr	r1, [pc, #36]	; (8021808 <_SetBkColor+0x34>)
 80217e4:	6358      	str	r0, [r3, #52]	; 0x34
 80217e6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80217ea:	691b      	ldr	r3, [r3, #16]
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	4798      	blx	r3
 80217f0:	6823      	ldr	r3, [r4, #0]
 80217f2:	7c1a      	ldrb	r2, [r3, #16]
 80217f4:	0752      	lsls	r2, r2, #29
 80217f6:	d402      	bmi.n	80217fe <_SetBkColor+0x2a>
 80217f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80217fa:	6018      	str	r0, [r3, #0]
 80217fc:	bd38      	pop	{r3, r4, r5, pc}
 80217fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021800:	6018      	str	r0, [r3, #0]
 8021802:	bd38      	pop	{r3, r4, r5, pc}
 8021804:	20000280 	.word	0x20000280
 8021808:	2002cc24 	.word	0x2002cc24

0802180c <_SetColor>:
 802180c:	b538      	push	{r3, r4, r5, lr}
 802180e:	4c0b      	ldr	r4, [pc, #44]	; (802183c <_SetColor+0x30>)
 8021810:	6823      	ldr	r3, [r4, #0]
 8021812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8021814:	4281      	cmp	r1, r0
 8021816:	d00d      	beq.n	8021834 <_SetColor+0x28>
 8021818:	7c5d      	ldrb	r5, [r3, #17]
 802181a:	4909      	ldr	r1, [pc, #36]	; (8021840 <_SetColor+0x34>)
 802181c:	6318      	str	r0, [r3, #48]	; 0x30
 802181e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8021822:	691b      	ldr	r3, [r3, #16]
 8021824:	681b      	ldr	r3, [r3, #0]
 8021826:	4798      	blx	r3
 8021828:	6823      	ldr	r3, [r4, #0]
 802182a:	7c1a      	ldrb	r2, [r3, #16]
 802182c:	0752      	lsls	r2, r2, #29
 802182e:	d402      	bmi.n	8021836 <_SetColor+0x2a>
 8021830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021832:	6018      	str	r0, [r3, #0]
 8021834:	bd38      	pop	{r3, r4, r5, pc}
 8021836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021838:	6018      	str	r0, [r3, #0]
 802183a:	bd38      	pop	{r3, r4, r5, pc}
 802183c:	20000280 	.word	0x20000280
 8021840:	2002cc24 	.word	0x2002cc24

08021844 <_SetDrawMode>:
 8021844:	b470      	push	{r4, r5, r6}
 8021846:	4b08      	ldr	r3, [pc, #32]	; (8021868 <_SetDrawMode+0x24>)
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	7c1a      	ldrb	r2, [r3, #16]
 802184c:	ea80 0102 	eor.w	r1, r0, r2
 8021850:	0749      	lsls	r1, r1, #29
 8021852:	d505      	bpl.n	8021860 <_SetDrawMode+0x1c>
 8021854:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8021856:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8021858:	6826      	ldr	r6, [r4, #0]
 802185a:	680d      	ldr	r5, [r1, #0]
 802185c:	6025      	str	r5, [r4, #0]
 802185e:	600e      	str	r6, [r1, #0]
 8021860:	7418      	strb	r0, [r3, #16]
 8021862:	bc70      	pop	{r4, r5, r6}
 8021864:	4610      	mov	r0, r2
 8021866:	4770      	bx	lr
 8021868:	20000280 	.word	0x20000280

0802186c <LCD_SetDrawMode>:
 802186c:	b508      	push	{r3, lr}
 802186e:	4b02      	ldr	r3, [pc, #8]	; (8021878 <LCD_SetDrawMode+0xc>)
 8021870:	681b      	ldr	r3, [r3, #0]
 8021872:	689b      	ldr	r3, [r3, #8]
 8021874:	4798      	blx	r3
 8021876:	bd08      	pop	{r3, pc}
 8021878:	20000250 	.word	0x20000250

0802187c <LCD_DrawPixel>:
 802187c:	b538      	push	{r3, r4, r5, lr}
 802187e:	4b16      	ldr	r3, [pc, #88]	; (80218d8 <LCD_DrawPixel+0x5c>)
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8021886:	428c      	cmp	r4, r1
 8021888:	460a      	mov	r2, r1
 802188a:	dc19      	bgt.n	80218c0 <LCD_DrawPixel+0x44>
 802188c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021890:	428a      	cmp	r2, r1
 8021892:	dc15      	bgt.n	80218c0 <LCD_DrawPixel+0x44>
 8021894:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021898:	4281      	cmp	r1, r0
 802189a:	dc11      	bgt.n	80218c0 <LCD_DrawPixel+0x44>
 802189c:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80218a0:	4288      	cmp	r0, r1
 80218a2:	dc0d      	bgt.n	80218c0 <LCD_DrawPixel+0x44>
 80218a4:	7c19      	ldrb	r1, [r3, #16]
 80218a6:	07c9      	lsls	r1, r1, #31
 80218a8:	d40b      	bmi.n	80218c2 <LCD_DrawPixel+0x46>
 80218aa:	490c      	ldr	r1, [pc, #48]	; (80218dc <LCD_DrawPixel+0x60>)
 80218ac:	7c5c      	ldrb	r4, [r3, #17]
 80218ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80218b0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80218b4:	681b      	ldr	r3, [r3, #0]
 80218b6:	68e5      	ldr	r5, [r4, #12]
 80218b8:	4601      	mov	r1, r0
 80218ba:	69ad      	ldr	r5, [r5, #24]
 80218bc:	4620      	mov	r0, r4
 80218be:	47a8      	blx	r5
 80218c0:	bd38      	pop	{r3, r4, r5, pc}
 80218c2:	7c59      	ldrb	r1, [r3, #17]
 80218c4:	4b05      	ldr	r3, [pc, #20]	; (80218dc <LCD_DrawPixel+0x60>)
 80218c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80218ca:	68dc      	ldr	r4, [r3, #12]
 80218cc:	4601      	mov	r1, r0
 80218ce:	69e4      	ldr	r4, [r4, #28]
 80218d0:	4618      	mov	r0, r3
 80218d2:	47a0      	blx	r4
 80218d4:	bd38      	pop	{r3, r4, r5, pc}
 80218d6:	bf00      	nop
 80218d8:	20000280 	.word	0x20000280
 80218dc:	2002cc24 	.word	0x2002cc24

080218e0 <LCD_DrawHLine>:
 80218e0:	4b10      	ldr	r3, [pc, #64]	; (8021924 <LCD_DrawHLine+0x44>)
 80218e2:	b570      	push	{r4, r5, r6, lr}
 80218e4:	681c      	ldr	r4, [r3, #0]
 80218e6:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80218ea:	428e      	cmp	r6, r1
 80218ec:	460d      	mov	r5, r1
 80218ee:	dc0f      	bgt.n	8021910 <LCD_DrawHLine+0x30>
 80218f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80218f4:	4299      	cmp	r1, r3
 80218f6:	dc0b      	bgt.n	8021910 <LCD_DrawHLine+0x30>
 80218f8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80218fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021900:	4288      	cmp	r0, r1
 8021902:	bfa8      	it	ge
 8021904:	4601      	movge	r1, r0
 8021906:	429a      	cmp	r2, r3
 8021908:	bfb8      	it	lt
 802190a:	4613      	movlt	r3, r2
 802190c:	4299      	cmp	r1, r3
 802190e:	dd00      	ble.n	8021912 <LCD_DrawHLine+0x32>
 8021910:	bd70      	pop	{r4, r5, r6, pc}
 8021912:	7c60      	ldrb	r0, [r4, #17]
 8021914:	4a04      	ldr	r2, [pc, #16]	; (8021928 <LCD_DrawHLine+0x48>)
 8021916:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 802191a:	68c4      	ldr	r4, [r0, #12]
 802191c:	462a      	mov	r2, r5
 802191e:	68a4      	ldr	r4, [r4, #8]
 8021920:	47a0      	blx	r4
 8021922:	bd70      	pop	{r4, r5, r6, pc}
 8021924:	20000280 	.word	0x20000280
 8021928:	2002cc24 	.word	0x2002cc24

0802192c <LCD_DrawVLine>:
 802192c:	4b11      	ldr	r3, [pc, #68]	; (8021974 <LCD_DrawVLine+0x48>)
 802192e:	b570      	push	{r4, r5, r6, lr}
 8021930:	681c      	ldr	r4, [r3, #0]
 8021932:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8021936:	4285      	cmp	r5, r0
 8021938:	dc0f      	bgt.n	802195a <LCD_DrawVLine+0x2e>
 802193a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802193e:	4298      	cmp	r0, r3
 8021940:	dc0b      	bgt.n	802195a <LCD_DrawVLine+0x2e>
 8021942:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8021946:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802194a:	42a9      	cmp	r1, r5
 802194c:	bfa8      	it	ge
 802194e:	460d      	movge	r5, r1
 8021950:	429a      	cmp	r2, r3
 8021952:	bfb8      	it	lt
 8021954:	4613      	movlt	r3, r2
 8021956:	429d      	cmp	r5, r3
 8021958:	dd00      	ble.n	802195c <LCD_DrawVLine+0x30>
 802195a:	bd70      	pop	{r4, r5, r6, pc}
 802195c:	7c61      	ldrb	r1, [r4, #17]
 802195e:	4a06      	ldr	r2, [pc, #24]	; (8021978 <LCD_DrawVLine+0x4c>)
 8021960:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8021964:	68e6      	ldr	r6, [r4, #12]
 8021966:	4601      	mov	r1, r0
 8021968:	462a      	mov	r2, r5
 802196a:	4620      	mov	r0, r4
 802196c:	68f5      	ldr	r5, [r6, #12]
 802196e:	47a8      	blx	r5
 8021970:	bd70      	pop	{r4, r5, r6, pc}
 8021972:	bf00      	nop
 8021974:	20000280 	.word	0x20000280
 8021978:	2002cc24 	.word	0x2002cc24

0802197c <LCD_FillRect>:
 802197c:	b570      	push	{r4, r5, r6, lr}
 802197e:	4c14      	ldr	r4, [pc, #80]	; (80219d0 <LCD_FillRect+0x54>)
 8021980:	6824      	ldr	r4, [r4, #0]
 8021982:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8021986:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802198a:	42b0      	cmp	r0, r6
 802198c:	bfa8      	it	ge
 802198e:	4606      	movge	r6, r0
 8021990:	42aa      	cmp	r2, r5
 8021992:	bfb8      	it	lt
 8021994:	4615      	movlt	r5, r2
 8021996:	42b5      	cmp	r5, r6
 8021998:	b082      	sub	sp, #8
 802199a:	db0b      	blt.n	80219b4 <LCD_FillRect+0x38>
 802199c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80219a0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80219a4:	4291      	cmp	r1, r2
 80219a6:	bfa8      	it	ge
 80219a8:	460a      	movge	r2, r1
 80219aa:	4283      	cmp	r3, r0
 80219ac:	bfa8      	it	ge
 80219ae:	4603      	movge	r3, r0
 80219b0:	429a      	cmp	r2, r3
 80219b2:	dd01      	ble.n	80219b8 <LCD_FillRect+0x3c>
 80219b4:	b002      	add	sp, #8
 80219b6:	bd70      	pop	{r4, r5, r6, pc}
 80219b8:	7c60      	ldrb	r0, [r4, #17]
 80219ba:	4906      	ldr	r1, [pc, #24]	; (80219d4 <LCD_FillRect+0x58>)
 80219bc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80219c0:	68c4      	ldr	r4, [r0, #12]
 80219c2:	9300      	str	r3, [sp, #0]
 80219c4:	4631      	mov	r1, r6
 80219c6:	462b      	mov	r3, r5
 80219c8:	6924      	ldr	r4, [r4, #16]
 80219ca:	47a0      	blx	r4
 80219cc:	b002      	add	sp, #8
 80219ce:	bd70      	pop	{r4, r5, r6, pc}
 80219d0:	20000280 	.word	0x20000280
 80219d4:	2002cc24 	.word	0x2002cc24

080219d8 <LCD__DrawBitmap_1bpp>:
 80219d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219dc:	4c8b      	ldr	r4, [pc, #556]	; (8021c0c <LCD__DrawBitmap_1bpp+0x234>)
 80219de:	b091      	sub	sp, #68	; 0x44
 80219e0:	6825      	ldr	r5, [r4, #0]
 80219e2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80219e6:	920a      	str	r2, [sp, #40]	; 0x28
 80219e8:	4604      	mov	r4, r0
 80219ea:	4689      	mov	r9, r1
 80219ec:	930e      	str	r3, [sp, #56]	; 0x38
 80219ee:	b185      	cbz	r5, 8021a12 <LCD__DrawBitmap_1bpp+0x3a>
 80219f0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80219f2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80219f4:	9401      	str	r4, [sp, #4]
 80219f6:	9602      	str	r6, [sp, #8]
 80219f8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80219fa:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80219fc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80219fe:	f8cd a000 	str.w	sl, [sp]
 8021a02:	9703      	str	r7, [sp, #12]
 8021a04:	9404      	str	r4, [sp, #16]
 8021a06:	9605      	str	r6, [sp, #20]
 8021a08:	682c      	ldr	r4, [r5, #0]
 8021a0a:	47a0      	blx	r4
 8021a0c:	b011      	add	sp, #68	; 0x44
 8021a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a12:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8021a14:	ea4a 0307 	orr.w	r3, sl, r7
 8021a18:	2b01      	cmp	r3, #1
 8021a1a:	f000 8096 	beq.w	8021b4a <LCD__DrawBitmap_1bpp+0x172>
 8021a1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021a20:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8021a22:	2f00      	cmp	r7, #0
 8021a24:	f1c6 0308 	rsb	r3, r6, #8
 8021a28:	ddf0      	ble.n	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021a2a:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8021c14 <LCD__DrawBitmap_1bpp+0x23c>
 8021a2e:	9109      	str	r1, [sp, #36]	; 0x24
 8021a30:	46a8      	mov	r8, r5
 8021a32:	4454      	add	r4, sl
 8021a34:	950c      	str	r5, [sp, #48]	; 0x30
 8021a36:	f8dc 0000 	ldr.w	r0, [ip]
 8021a3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021a3c:	940f      	str	r4, [sp, #60]	; 0x3c
 8021a3e:	4699      	mov	r9, r3
 8021a40:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021a42:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8021a46:	4425      	add	r5, r4
 8021a48:	1e6e      	subs	r6, r5, #1
 8021a4a:	42b3      	cmp	r3, r6
 8021a4c:	950d      	str	r5, [sp, #52]	; 0x34
 8021a4e:	960b      	str	r6, [sp, #44]	; 0x2c
 8021a50:	dc6c      	bgt.n	8021b2c <LCD__DrawBitmap_1bpp+0x154>
 8021a52:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8021a56:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8021a5a:	4563      	cmp	r3, ip
 8021a5c:	db66      	blt.n	8021b2c <LCD__DrawBitmap_1bpp+0x154>
 8021a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021a60:	2c00      	cmp	r4, #0
 8021a62:	dd63      	ble.n	8021b2c <LCD__DrawBitmap_1bpp+0x154>
 8021a64:	2600      	movs	r6, #0
 8021a66:	4635      	mov	r5, r6
 8021a68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a6a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021a6c:	e054      	b.n	8021b18 <LCD__DrawBitmap_1bpp+0x140>
 8021a6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021a70:	1a76      	subs	r6, r6, r1
 8021a72:	fa48 f309 	asr.w	r3, r8, r9
 8021a76:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8021a7a:	fa08 f801 	lsl.w	r8, r8, r1
 8021a7e:	fa5f f888 	uxtb.w	r8, r8
 8021a82:	d102      	bne.n	8021a8a <LCD__DrawBitmap_1bpp+0xb2>
 8021a84:	7c01      	ldrb	r1, [r0, #16]
 8021a86:	0789      	lsls	r1, r1, #30
 8021a88:	d440      	bmi.n	8021b0c <LCD__DrawBitmap_1bpp+0x134>
 8021a8a:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8021a8e:	f8db 1000 	ldr.w	r1, [fp]
 8021a92:	9108      	str	r1, [sp, #32]
 8021a94:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8021a96:	b109      	cbz	r1, 8021a9c <LCD__DrawBitmap_1bpp+0xc4>
 8021a98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021a9c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8021aa0:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8021aa4:	f8cb 3000 	str.w	r3, [fp]
 8021aa8:	1e63      	subs	r3, r4, #1
 8021aaa:	428a      	cmp	r2, r1
 8021aac:	bfa8      	it	ge
 8021aae:	4611      	movge	r1, r2
 8021ab0:	4563      	cmp	r3, ip
 8021ab2:	bfa8      	it	ge
 8021ab4:	4663      	movge	r3, ip
 8021ab6:	4299      	cmp	r1, r3
 8021ab8:	dc25      	bgt.n	8021b06 <LCD__DrawBitmap_1bpp+0x12e>
 8021aba:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8021abe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021ac2:	f8cd c018 	str.w	ip, [sp, #24]
 8021ac6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8021aca:	4594      	cmp	ip, r2
 8021acc:	bfb8      	it	lt
 8021ace:	4694      	movlt	ip, r2
 8021ad0:	f8cd c01c 	str.w	ip, [sp, #28]
 8021ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021ad6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8021ada:	4594      	cmp	ip, r2
 8021adc:	bfa8      	it	ge
 8021ade:	4694      	movge	ip, r2
 8021ae0:	9a07      	ldr	r2, [sp, #28]
 8021ae2:	4562      	cmp	r2, ip
 8021ae4:	dc0f      	bgt.n	8021b06 <LCD__DrawBitmap_1bpp+0x12e>
 8021ae6:	7c40      	ldrb	r0, [r0, #17]
 8021ae8:	4a49      	ldr	r2, [pc, #292]	; (8021c10 <LCD__DrawBitmap_1bpp+0x238>)
 8021aea:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8021aee:	9a07      	ldr	r2, [sp, #28]
 8021af0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8021af4:	f8cd c000 	str.w	ip, [sp]
 8021af8:	f8de c010 	ldr.w	ip, [lr, #16]
 8021afc:	47e0      	blx	ip
 8021afe:	4b45      	ldr	r3, [pc, #276]	; (8021c14 <LCD__DrawBitmap_1bpp+0x23c>)
 8021b00:	6818      	ldr	r0, [r3, #0]
 8021b02:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8021b06:	9908      	ldr	r1, [sp, #32]
 8021b08:	f8cb 1000 	str.w	r1, [fp]
 8021b0c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021b10:	3501      	adds	r5, #1
 8021b12:	4565      	cmp	r5, ip
 8021b14:	4454      	add	r4, sl
 8021b16:	d009      	beq.n	8021b2c <LCD__DrawBitmap_1bpp+0x154>
 8021b18:	ebca 0204 	rsb	r2, sl, r4
 8021b1c:	2e00      	cmp	r6, #0
 8021b1e:	d1a6      	bne.n	8021a6e <LCD__DrawBitmap_1bpp+0x96>
 8021b20:	f897 8000 	ldrb.w	r8, [r7]
 8021b24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021b26:	464e      	mov	r6, r9
 8021b28:	3701      	adds	r7, #1
 8021b2a:	e7a2      	b.n	8021a72 <LCD__DrawBitmap_1bpp+0x9a>
 8021b2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b2e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8021b30:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021b32:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021b34:	3401      	adds	r4, #1
 8021b36:	4435      	add	r5, r6
 8021b38:	42bc      	cmp	r4, r7
 8021b3a:	940c      	str	r4, [sp, #48]	; 0x30
 8021b3c:	951e      	str	r5, [sp, #120]	; 0x78
 8021b3e:	f43f af65 	beq.w	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021b42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021b44:	9409      	str	r4, [sp, #36]	; 0x24
 8021b46:	4625      	mov	r5, r4
 8021b48:	e77a      	b.n	8021a40 <LCD__DrawBitmap_1bpp+0x68>
 8021b4a:	4b32      	ldr	r3, [pc, #200]	; (8021c14 <LCD__DrawBitmap_1bpp+0x23c>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8021b52:	1a51      	subs	r1, r2, r1
 8021b54:	2900      	cmp	r1, #0
 8021b56:	dd54      	ble.n	8021c02 <LCD__DrawBitmap_1bpp+0x22a>
 8021b58:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8021b5c:	ebc1 050c 	rsb	r5, r1, ip
 8021b60:	2d00      	cmp	r5, #0
 8021b62:	f77f af53 	ble.w	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021b66:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021b68:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021b6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021b6c:	fb06 7701 	mla	r7, r6, r1, r7
 8021b70:	971e      	str	r7, [sp, #120]	; 0x78
 8021b72:	4448      	add	r0, r9
 8021b74:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021b78:	3801      	subs	r0, #1
 8021b7a:	1a41      	subs	r1, r0, r1
 8021b7c:	2900      	cmp	r1, #0
 8021b7e:	dd03      	ble.n	8021b88 <LCD__DrawBitmap_1bpp+0x1b0>
 8021b80:	1a6d      	subs	r5, r5, r1
 8021b82:	2d00      	cmp	r5, #0
 8021b84:	f77f af42 	ble.w	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021b8a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8021b8e:	4420      	add	r0, r4
 8021b90:	3801      	subs	r0, #1
 8021b92:	1a41      	subs	r1, r0, r1
 8021b94:	2900      	cmp	r1, #0
 8021b96:	dd05      	ble.n	8021ba4 <LCD__DrawBitmap_1bpp+0x1cc>
 8021b98:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021b9c:	ebc1 0c0c 	rsb	ip, r1, ip
 8021ba0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8021ba4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8021ba6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021baa:	1ba1      	subs	r1, r4, r6
 8021bac:	4281      	cmp	r1, r0
 8021bae:	da10      	bge.n	8021bd2 <LCD__DrawBitmap_1bpp+0x1fa>
 8021bb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021bb2:	4634      	mov	r4, r6
 8021bb4:	1a46      	subs	r6, r0, r1
 8021bb6:	1a08      	subs	r0, r1, r0
 8021bb8:	4407      	add	r7, r0
 8021bba:	970a      	str	r7, [sp, #40]	; 0x28
 8021bbc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021bbe:	4434      	add	r4, r6
 8021bc0:	eb07 07e4 	add.w	r7, r7, r4, asr #3
 8021bc4:	f026 0607 	bic.w	r6, r6, #7
 8021bc8:	f004 0407 	and.w	r4, r4, #7
 8021bcc:	971e      	str	r7, [sp, #120]	; 0x78
 8021bce:	9420      	str	r4, [sp, #128]	; 0x80
 8021bd0:	4431      	add	r1, r6
 8021bd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021bd4:	2c00      	cmp	r4, #0
 8021bd6:	f77f af19 	ble.w	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021bda:	7c58      	ldrb	r0, [r3, #17]
 8021bdc:	4b0c      	ldr	r3, [pc, #48]	; (8021c10 <LCD__DrawBitmap_1bpp+0x238>)
 8021bde:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021be0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021be4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021be6:	68c4      	ldr	r4, [r0, #12]
 8021be8:	9500      	str	r5, [sp, #0]
 8021bea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8021bec:	9501      	str	r5, [sp, #4]
 8021bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021bf0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8021bf2:	9304      	str	r3, [sp, #16]
 8021bf4:	9602      	str	r6, [sp, #8]
 8021bf6:	9703      	str	r7, [sp, #12]
 8021bf8:	9505      	str	r5, [sp, #20]
 8021bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021bfc:	6864      	ldr	r4, [r4, #4]
 8021bfe:	47a0      	blx	r4
 8021c00:	e704      	b.n	8021a0c <LCD__DrawBitmap_1bpp+0x34>
 8021c02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021c04:	464a      	mov	r2, r9
 8021c06:	4628      	mov	r0, r5
 8021c08:	e7b3      	b.n	8021b72 <LCD__DrawBitmap_1bpp+0x19a>
 8021c0a:	bf00      	nop
 8021c0c:	2002cbdc 	.word	0x2002cbdc
 8021c10:	2002cc24 	.word	0x2002cc24
 8021c14:	20000280 	.word	0x20000280

08021c18 <LCD_DrawBitmap>:
 8021c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c1c:	4cb5      	ldr	r4, [pc, #724]	; (8021ef4 <LCD_DrawBitmap+0x2dc>)
 8021c1e:	b091      	sub	sp, #68	; 0x44
 8021c20:	6825      	ldr	r5, [r4, #0]
 8021c22:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8021c26:	920a      	str	r2, [sp, #40]	; 0x28
 8021c28:	4604      	mov	r4, r0
 8021c2a:	4689      	mov	r9, r1
 8021c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8021c2e:	b185      	cbz	r5, 8021c52 <LCD_DrawBitmap+0x3a>
 8021c30:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021c32:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8021c34:	9401      	str	r4, [sp, #4]
 8021c36:	9602      	str	r6, [sp, #8]
 8021c38:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021c3a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021c3c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021c3e:	f8cd a000 	str.w	sl, [sp]
 8021c42:	9703      	str	r7, [sp, #12]
 8021c44:	9404      	str	r4, [sp, #16]
 8021c46:	9605      	str	r6, [sp, #20]
 8021c48:	682c      	ldr	r4, [r5, #0]
 8021c4a:	47a0      	blx	r4
 8021c4c:	b011      	add	sp, #68	; 0x44
 8021c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c52:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8021c54:	ea4a 0307 	orr.w	r3, sl, r7
 8021c58:	2b01      	cmp	r3, #1
 8021c5a:	f000 8096 	beq.w	8021d8a <LCD_DrawBitmap+0x172>
 8021c5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021c60:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8021c62:	2f00      	cmp	r7, #0
 8021c64:	f1c6 0308 	rsb	r3, r6, #8
 8021c68:	ddf0      	ble.n	8021c4c <LCD_DrawBitmap+0x34>
 8021c6a:	f8df c290 	ldr.w	ip, [pc, #656]	; 8021efc <LCD_DrawBitmap+0x2e4>
 8021c6e:	9109      	str	r1, [sp, #36]	; 0x24
 8021c70:	46a8      	mov	r8, r5
 8021c72:	4454      	add	r4, sl
 8021c74:	950c      	str	r5, [sp, #48]	; 0x30
 8021c76:	f8dc 0000 	ldr.w	r0, [ip]
 8021c7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021c7c:	940f      	str	r4, [sp, #60]	; 0x3c
 8021c7e:	4699      	mov	r9, r3
 8021c80:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021c82:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8021c86:	4425      	add	r5, r4
 8021c88:	1e6e      	subs	r6, r5, #1
 8021c8a:	42b3      	cmp	r3, r6
 8021c8c:	950d      	str	r5, [sp, #52]	; 0x34
 8021c8e:	960b      	str	r6, [sp, #44]	; 0x2c
 8021c90:	dc6c      	bgt.n	8021d6c <LCD_DrawBitmap+0x154>
 8021c92:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8021c96:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8021c9a:	4563      	cmp	r3, ip
 8021c9c:	db66      	blt.n	8021d6c <LCD_DrawBitmap+0x154>
 8021c9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ca0:	2c00      	cmp	r4, #0
 8021ca2:	dd63      	ble.n	8021d6c <LCD_DrawBitmap+0x154>
 8021ca4:	2600      	movs	r6, #0
 8021ca6:	4635      	mov	r5, r6
 8021ca8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021caa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021cac:	e054      	b.n	8021d58 <LCD_DrawBitmap+0x140>
 8021cae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021cb0:	1a76      	subs	r6, r6, r1
 8021cb2:	fa48 f309 	asr.w	r3, r8, r9
 8021cb6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8021cba:	fa08 f801 	lsl.w	r8, r8, r1
 8021cbe:	fa5f f888 	uxtb.w	r8, r8
 8021cc2:	d102      	bne.n	8021cca <LCD_DrawBitmap+0xb2>
 8021cc4:	7c01      	ldrb	r1, [r0, #16]
 8021cc6:	0789      	lsls	r1, r1, #30
 8021cc8:	d440      	bmi.n	8021d4c <LCD_DrawBitmap+0x134>
 8021cca:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8021cce:	f8db 1000 	ldr.w	r1, [fp]
 8021cd2:	9108      	str	r1, [sp, #32]
 8021cd4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8021cd6:	b109      	cbz	r1, 8021cdc <LCD_DrawBitmap+0xc4>
 8021cd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021cdc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8021ce0:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8021ce4:	f8cb 3000 	str.w	r3, [fp]
 8021ce8:	1e63      	subs	r3, r4, #1
 8021cea:	428a      	cmp	r2, r1
 8021cec:	bfa8      	it	ge
 8021cee:	4611      	movge	r1, r2
 8021cf0:	4563      	cmp	r3, ip
 8021cf2:	bfa8      	it	ge
 8021cf4:	4663      	movge	r3, ip
 8021cf6:	4299      	cmp	r1, r3
 8021cf8:	dc25      	bgt.n	8021d46 <LCD_DrawBitmap+0x12e>
 8021cfa:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8021cfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021d02:	f8cd c018 	str.w	ip, [sp, #24]
 8021d06:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8021d0a:	4594      	cmp	ip, r2
 8021d0c:	bfb8      	it	lt
 8021d0e:	4694      	movlt	ip, r2
 8021d10:	f8cd c01c 	str.w	ip, [sp, #28]
 8021d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021d16:	f8dd c018 	ldr.w	ip, [sp, #24]
 8021d1a:	4594      	cmp	ip, r2
 8021d1c:	bfa8      	it	ge
 8021d1e:	4694      	movge	ip, r2
 8021d20:	9a07      	ldr	r2, [sp, #28]
 8021d22:	4594      	cmp	ip, r2
 8021d24:	db0f      	blt.n	8021d46 <LCD_DrawBitmap+0x12e>
 8021d26:	7c40      	ldrb	r0, [r0, #17]
 8021d28:	4a73      	ldr	r2, [pc, #460]	; (8021ef8 <LCD_DrawBitmap+0x2e0>)
 8021d2a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8021d2e:	9a07      	ldr	r2, [sp, #28]
 8021d30:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8021d34:	f8cd c000 	str.w	ip, [sp]
 8021d38:	f8de c010 	ldr.w	ip, [lr, #16]
 8021d3c:	47e0      	blx	ip
 8021d3e:	4b6f      	ldr	r3, [pc, #444]	; (8021efc <LCD_DrawBitmap+0x2e4>)
 8021d40:	6818      	ldr	r0, [r3, #0]
 8021d42:	f8d0 b03c 	ldr.w	fp, [r0, #60]	; 0x3c
 8021d46:	9908      	ldr	r1, [sp, #32]
 8021d48:	f8cb 1000 	str.w	r1, [fp]
 8021d4c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021d50:	3501      	adds	r5, #1
 8021d52:	4565      	cmp	r5, ip
 8021d54:	4454      	add	r4, sl
 8021d56:	d009      	beq.n	8021d6c <LCD_DrawBitmap+0x154>
 8021d58:	ebca 0204 	rsb	r2, sl, r4
 8021d5c:	2e00      	cmp	r6, #0
 8021d5e:	d1a6      	bne.n	8021cae <LCD_DrawBitmap+0x96>
 8021d60:	f897 8000 	ldrb.w	r8, [r7]
 8021d64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021d66:	464e      	mov	r6, r9
 8021d68:	3701      	adds	r7, #1
 8021d6a:	e7a2      	b.n	8021cb2 <LCD_DrawBitmap+0x9a>
 8021d6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021d6e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8021d70:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021d72:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021d74:	3401      	adds	r4, #1
 8021d76:	4435      	add	r5, r6
 8021d78:	42bc      	cmp	r4, r7
 8021d7a:	940c      	str	r4, [sp, #48]	; 0x30
 8021d7c:	951e      	str	r5, [sp, #120]	; 0x78
 8021d7e:	f43f af65 	beq.w	8021c4c <LCD_DrawBitmap+0x34>
 8021d82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d84:	9409      	str	r4, [sp, #36]	; 0x24
 8021d86:	4625      	mov	r5, r4
 8021d88:	e77a      	b.n	8021c80 <LCD_DrawBitmap+0x68>
 8021d8a:	4b5c      	ldr	r3, [pc, #368]	; (8021efc <LCD_DrawBitmap+0x2e4>)
 8021d8c:	681b      	ldr	r3, [r3, #0]
 8021d8e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8021d92:	1a50      	subs	r0, r2, r1
 8021d94:	2800      	cmp	r0, #0
 8021d96:	f340 80c7 	ble.w	8021f28 <LCD_DrawBitmap+0x310>
 8021d9a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8021d9e:	ebc0 010c 	rsb	r1, r0, ip
 8021da2:	2900      	cmp	r1, #0
 8021da4:	f77f af52 	ble.w	8021c4c <LCD_DrawBitmap+0x34>
 8021da8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8021daa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021dac:	fb05 6600 	mla	r6, r5, r0, r6
 8021db0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021db2:	961e      	str	r6, [sp, #120]	; 0x78
 8021db4:	444d      	add	r5, r9
 8021db6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8021dba:	3d01      	subs	r5, #1
 8021dbc:	1a28      	subs	r0, r5, r0
 8021dbe:	2800      	cmp	r0, #0
 8021dc0:	dd03      	ble.n	8021dca <LCD_DrawBitmap+0x1b2>
 8021dc2:	1a09      	subs	r1, r1, r0
 8021dc4:	2900      	cmp	r1, #0
 8021dc6:	f77f af41 	ble.w	8021c4c <LCD_DrawBitmap+0x34>
 8021dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021dcc:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8021dd0:	4425      	add	r5, r4
 8021dd2:	3d01      	subs	r5, #1
 8021dd4:	1a28      	subs	r0, r5, r0
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	dd02      	ble.n	8021de0 <LCD_DrawBitmap+0x1c8>
 8021dda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021ddc:	1a3f      	subs	r7, r7, r0
 8021dde:	970a      	str	r7, [sp, #40]	; 0x28
 8021de0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021de4:	4284      	cmp	r4, r0
 8021de6:	db18      	blt.n	8021e1a <LCD_DrawBitmap+0x202>
 8021de8:	2500      	movs	r5, #0
 8021dea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021dec:	2f00      	cmp	r7, #0
 8021dee:	f77f af2d 	ble.w	8021c4c <LCD_DrawBitmap+0x34>
 8021df2:	7c58      	ldrb	r0, [r3, #17]
 8021df4:	4b40      	ldr	r3, [pc, #256]	; (8021ef8 <LCD_DrawBitmap+0x2e0>)
 8021df6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021df8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dfe:	68c6      	ldr	r6, [r0, #12]
 8021e00:	9701      	str	r7, [sp, #4]
 8021e02:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021e04:	9702      	str	r7, [sp, #8]
 8021e06:	9504      	str	r5, [sp, #16]
 8021e08:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021e0a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8021e0c:	9100      	str	r1, [sp, #0]
 8021e0e:	9703      	str	r7, [sp, #12]
 8021e10:	9505      	str	r5, [sp, #20]
 8021e12:	4621      	mov	r1, r4
 8021e14:	6874      	ldr	r4, [r6, #4]
 8021e16:	47a0      	blx	r4
 8021e18:	e718      	b.n	8021c4c <LCD_DrawBitmap+0x34>
 8021e1a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021e1e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021e20:	1b05      	subs	r5, r0, r4
 8021e22:	ebc5 0c0c 	rsb	ip, r5, ip
 8021e26:	1e7e      	subs	r6, r7, #1
 8021e28:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8021e2c:	2e1f      	cmp	r6, #31
 8021e2e:	d8dc      	bhi.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021e30:	a701      	add	r7, pc, #4	; (adr r7, 8021e38 <LCD_DrawBitmap+0x220>)
 8021e32:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 8021e36:	bf00      	nop
 8021e38:	08021f15 	.word	0x08021f15
 8021e3c:	08021f01 	.word	0x08021f01
 8021e40:	08021deb 	.word	0x08021deb
 8021e44:	08021ee1 	.word	0x08021ee1
 8021e48:	08021deb 	.word	0x08021deb
 8021e4c:	08021deb 	.word	0x08021deb
 8021e50:	08021deb 	.word	0x08021deb
 8021e54:	08021ed5 	.word	0x08021ed5
 8021e58:	08021deb 	.word	0x08021deb
 8021e5c:	08021deb 	.word	0x08021deb
 8021e60:	08021deb 	.word	0x08021deb
 8021e64:	08021deb 	.word	0x08021deb
 8021e68:	08021deb 	.word	0x08021deb
 8021e6c:	08021deb 	.word	0x08021deb
 8021e70:	08021deb 	.word	0x08021deb
 8021e74:	08021ec7 	.word	0x08021ec7
 8021e78:	08021deb 	.word	0x08021deb
 8021e7c:	08021deb 	.word	0x08021deb
 8021e80:	08021deb 	.word	0x08021deb
 8021e84:	08021deb 	.word	0x08021deb
 8021e88:	08021deb 	.word	0x08021deb
 8021e8c:	08021deb 	.word	0x08021deb
 8021e90:	08021deb 	.word	0x08021deb
 8021e94:	08021eb9 	.word	0x08021eb9
 8021e98:	08021deb 	.word	0x08021deb
 8021e9c:	08021deb 	.word	0x08021deb
 8021ea0:	08021deb 	.word	0x08021deb
 8021ea4:	08021deb 	.word	0x08021deb
 8021ea8:	08021deb 	.word	0x08021deb
 8021eac:	08021deb 	.word	0x08021deb
 8021eb0:	08021deb 	.word	0x08021deb
 8021eb4:	08021eb9 	.word	0x08021eb9
 8021eb8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8021eba:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8021ebe:	961e      	str	r6, [sp, #120]	; 0x78
 8021ec0:	4604      	mov	r4, r0
 8021ec2:	2500      	movs	r5, #0
 8021ec4:	e791      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021ec6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021ec8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8021ecc:	941e      	str	r4, [sp, #120]	; 0x78
 8021ece:	2500      	movs	r5, #0
 8021ed0:	4604      	mov	r4, r0
 8021ed2:	e78a      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021ed4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021ed6:	442f      	add	r7, r5
 8021ed8:	971e      	str	r7, [sp, #120]	; 0x78
 8021eda:	4604      	mov	r4, r0
 8021edc:	2500      	movs	r5, #0
 8021ede:	e784      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021ee0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8021ee2:	f025 0001 	bic.w	r0, r5, #1
 8021ee6:	eb06 0665 	add.w	r6, r6, r5, asr #1
 8021eea:	961e      	str	r6, [sp, #120]	; 0x78
 8021eec:	4404      	add	r4, r0
 8021eee:	f005 0501 	and.w	r5, r5, #1
 8021ef2:	e77a      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021ef4:	2002cbdc 	.word	0x2002cbdc
 8021ef8:	2002cc24 	.word	0x2002cc24
 8021efc:	20000280 	.word	0x20000280
 8021f00:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8021f02:	f025 0003 	bic.w	r0, r5, #3
 8021f06:	eb07 07a5 	add.w	r7, r7, r5, asr #2
 8021f0a:	971e      	str	r7, [sp, #120]	; 0x78
 8021f0c:	4404      	add	r4, r0
 8021f0e:	f005 0503 	and.w	r5, r5, #3
 8021f12:	e76a      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021f14:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8021f16:	f025 0007 	bic.w	r0, r5, #7
 8021f1a:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8021f1e:	961e      	str	r6, [sp, #120]	; 0x78
 8021f20:	4404      	add	r4, r0
 8021f22:	f005 0507 	and.w	r5, r5, #7
 8021f26:	e760      	b.n	8021dea <LCD_DrawBitmap+0x1d2>
 8021f28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021f2a:	464a      	mov	r2, r9
 8021f2c:	460d      	mov	r5, r1
 8021f2e:	e741      	b.n	8021db4 <LCD_DrawBitmap+0x19c>

08021f30 <LCD_SetClipRectMax>:
 8021f30:	b508      	push	{r3, lr}
 8021f32:	4a05      	ldr	r2, [pc, #20]	; (8021f48 <LCD_SetClipRectMax+0x18>)
 8021f34:	4b05      	ldr	r3, [pc, #20]	; (8021f4c <LCD_SetClipRectMax+0x1c>)
 8021f36:	6811      	ldr	r1, [r2, #0]
 8021f38:	7c4a      	ldrb	r2, [r1, #17]
 8021f3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021f3e:	68c3      	ldr	r3, [r0, #12]
 8021f40:	3108      	adds	r1, #8
 8021f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f44:	4798      	blx	r3
 8021f46:	bd08      	pop	{r3, pc}
 8021f48:	20000280 	.word	0x20000280
 8021f4c:	2002cc24 	.word	0x2002cc24

08021f50 <emWin_LCD_Init>:
 8021f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f52:	4e3e      	ldr	r6, [pc, #248]	; (802204c <emWin_LCD_Init+0xfc>)
 8021f54:	4f3e      	ldr	r7, [pc, #248]	; (8022050 <emWin_LCD_Init+0x100>)
 8021f56:	6831      	ldr	r1, [r6, #0]
 8021f58:	7c4b      	ldrb	r3, [r1, #17]
 8021f5a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8021f5e:	68c3      	ldr	r3, [r0, #12]
 8021f60:	b085      	sub	sp, #20
 8021f62:	3108      	adds	r1, #8
 8021f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f66:	4798      	blx	r3
 8021f68:	f006 fed8 	bl	8028d1c <LCD_InitColors>
 8021f6c:	4604      	mov	r4, r0
 8021f6e:	2800      	cmp	r0, #0
 8021f70:	d167      	bne.n	8022042 <emWin_LCD_Init+0xf2>
 8021f72:	4605      	mov	r5, r0
 8021f74:	4628      	mov	r0, r5
 8021f76:	f001 fe67 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021f7a:	210c      	movs	r1, #12
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	3501      	adds	r5, #1
 8021f80:	eb0d 0001 	add.w	r0, sp, r1
 8021f84:	9303      	str	r3, [sp, #12]
 8021f86:	b143      	cbz	r3, 8021f9a <emWin_LCD_Init+0x4a>
 8021f88:	68db      	ldr	r3, [r3, #12]
 8021f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f8c:	4798      	blx	r3
 8021f8e:	4603      	mov	r3, r0
 8021f90:	2800      	cmp	r0, #0
 8021f92:	d059      	beq.n	8022048 <emWin_LCD_Init+0xf8>
 8021f94:	9803      	ldr	r0, [sp, #12]
 8021f96:	4798      	blx	r3
 8021f98:	4304      	orrs	r4, r0
 8021f9a:	2d02      	cmp	r5, #2
 8021f9c:	d1ea      	bne.n	8021f74 <emWin_LCD_Init+0x24>
 8021f9e:	2c00      	cmp	r4, #0
 8021fa0:	d14f      	bne.n	8022042 <emWin_LCD_Init+0xf2>
 8021fa2:	f006 ff15 	bl	8028dd0 <LCD_InitLUT>
 8021fa6:	4b2b      	ldr	r3, [pc, #172]	; (8022054 <emWin_LCD_Init+0x104>)
 8021fa8:	681a      	ldr	r2, [r3, #0]
 8021faa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8021fae:	429a      	cmp	r2, r3
 8021fb0:	d044      	beq.n	802203c <emWin_LCD_Init+0xec>
 8021fb2:	4d29      	ldr	r5, [pc, #164]	; (8022058 <emWin_LCD_Init+0x108>)
 8021fb4:	2401      	movs	r4, #1
 8021fb6:	4620      	mov	r0, r4
 8021fb8:	f001 fe46 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8021fbc:	4603      	mov	r3, r0
 8021fbe:	9303      	str	r3, [sp, #12]
 8021fc0:	4620      	mov	r0, r4
 8021fc2:	3c01      	subs	r4, #1
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d037      	beq.n	8022038 <emWin_LCD_Init+0xe8>
 8021fc8:	f001 fa30 	bl	802342c <GUI_SelectLayer>
 8021fcc:	682b      	ldr	r3, [r5, #0]
 8021fce:	2004      	movs	r0, #4
 8021fd0:	689b      	ldr	r3, [r3, #8]
 8021fd2:	4798      	blx	r3
 8021fd4:	6830      	ldr	r0, [r6, #0]
 8021fd6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8021fda:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8021fde:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8021fe2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8021fe6:	4563      	cmp	r3, ip
 8021fe8:	bfa8      	it	ge
 8021fea:	4663      	movge	r3, ip
 8021fec:	4299      	cmp	r1, r3
 8021fee:	dc14      	bgt.n	802201a <emWin_LCD_Init+0xca>
 8021ff0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021ff4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8021ff8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8021ffc:	45e6      	cmp	lr, ip
 8021ffe:	bfa8      	it	ge
 8022000:	46e6      	movge	lr, ip
 8022002:	4572      	cmp	r2, lr
 8022004:	dc09      	bgt.n	802201a <emWin_LCD_Init+0xca>
 8022006:	7c40      	ldrb	r0, [r0, #17]
 8022008:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802200c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8022010:	f8cd e000 	str.w	lr, [sp]
 8022014:	f8dc c010 	ldr.w	ip, [ip, #16]
 8022018:	47e0      	blx	ip
 802201a:	682b      	ldr	r3, [r5, #0]
 802201c:	2000      	movs	r0, #0
 802201e:	689b      	ldr	r3, [r3, #8]
 8022020:	4798      	blx	r3
 8022022:	a804      	add	r0, sp, #16
 8022024:	210e      	movs	r1, #14
 8022026:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 802202a:	68db      	ldr	r3, [r3, #12]
 802202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802202e:	4798      	blx	r3
 8022030:	4603      	mov	r3, r0
 8022032:	b108      	cbz	r0, 8022038 <emWin_LCD_Init+0xe8>
 8022034:	9803      	ldr	r0, [sp, #12]
 8022036:	4798      	blx	r3
 8022038:	1c63      	adds	r3, r4, #1
 802203a:	d1bc      	bne.n	8021fb6 <emWin_LCD_Init+0x66>
 802203c:	2000      	movs	r0, #0
 802203e:	b005      	add	sp, #20
 8022040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022042:	4620      	mov	r0, r4
 8022044:	b005      	add	sp, #20
 8022046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022048:	2001      	movs	r0, #1
 802204a:	e7fb      	b.n	8022044 <emWin_LCD_Init+0xf4>
 802204c:	20000280 	.word	0x20000280
 8022050:	2002cc24 	.word	0x2002cc24
 8022054:	20000290 	.word	0x20000290
 8022058:	20000250 	.word	0x20000250

0802205c <LCD_Color2Index>:
 802205c:	b508      	push	{r3, lr}
 802205e:	4a05      	ldr	r2, [pc, #20]	; (8022074 <LCD_Color2Index+0x18>)
 8022060:	4b05      	ldr	r3, [pc, #20]	; (8022078 <LCD_Color2Index+0x1c>)
 8022062:	6812      	ldr	r2, [r2, #0]
 8022064:	7c52      	ldrb	r2, [r2, #17]
 8022066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802206a:	691b      	ldr	r3, [r3, #16]
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	4798      	blx	r3
 8022070:	bd08      	pop	{r3, pc}
 8022072:	bf00      	nop
 8022074:	20000280 	.word	0x20000280
 8022078:	2002cc24 	.word	0x2002cc24

0802207c <LCD_Index2Color>:
 802207c:	b508      	push	{r3, lr}
 802207e:	4a05      	ldr	r2, [pc, #20]	; (8022094 <LCD_Index2Color+0x18>)
 8022080:	4b05      	ldr	r3, [pc, #20]	; (8022098 <LCD_Index2Color+0x1c>)
 8022082:	6812      	ldr	r2, [r2, #0]
 8022084:	7c52      	ldrb	r2, [r2, #17]
 8022086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802208a:	691b      	ldr	r3, [r3, #16]
 802208c:	685b      	ldr	r3, [r3, #4]
 802208e:	4798      	blx	r3
 8022090:	bd08      	pop	{r3, pc}
 8022092:	bf00      	nop
 8022094:	20000280 	.word	0x20000280
 8022098:	2002cc24 	.word	0x2002cc24

0802209c <LCD_SetColorIndex>:
 802209c:	4b04      	ldr	r3, [pc, #16]	; (80220b0 <LCD_SetColorIndex+0x14>)
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	7c1a      	ldrb	r2, [r3, #16]
 80220a2:	0752      	lsls	r2, r2, #29
 80220a4:	bf4c      	ite	mi
 80220a6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80220a8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80220aa:	6018      	str	r0, [r3, #0]
 80220ac:	4770      	bx	lr
 80220ae:	bf00      	nop
 80220b0:	20000280 	.word	0x20000280

080220b4 <LCD_SetBkColorIndex>:
 80220b4:	4b04      	ldr	r3, [pc, #16]	; (80220c8 <LCD_SetBkColorIndex+0x14>)
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	7c1a      	ldrb	r2, [r3, #16]
 80220ba:	0752      	lsls	r2, r2, #29
 80220bc:	bf4c      	ite	mi
 80220be:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80220c0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80220c2:	6018      	str	r0, [r3, #0]
 80220c4:	4770      	bx	lr
 80220c6:	bf00      	nop
 80220c8:	20000280 	.word	0x20000280

080220cc <LCD_SetBkColor>:
 80220cc:	b508      	push	{r3, lr}
 80220ce:	4b02      	ldr	r3, [pc, #8]	; (80220d8 <LCD_SetBkColor+0xc>)
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	685b      	ldr	r3, [r3, #4]
 80220d4:	4798      	blx	r3
 80220d6:	bd08      	pop	{r3, pc}
 80220d8:	20000250 	.word	0x20000250

080220dc <LCD_SetColor>:
 80220dc:	b508      	push	{r3, lr}
 80220de:	4b02      	ldr	r3, [pc, #8]	; (80220e8 <LCD_SetColor+0xc>)
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	4798      	blx	r3
 80220e6:	bd08      	pop	{r3, pc}
 80220e8:	20000250 	.word	0x20000250

080220ec <LCD_SetPixelIndex>:
 80220ec:	4b10      	ldr	r3, [pc, #64]	; (8022130 <LCD_SetPixelIndex+0x44>)
 80220ee:	b570      	push	{r4, r5, r6, lr}
 80220f0:	681c      	ldr	r4, [r3, #0]
 80220f2:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80220f6:	4285      	cmp	r5, r0
 80220f8:	460e      	mov	r6, r1
 80220fa:	4613      	mov	r3, r2
 80220fc:	dc0b      	bgt.n	8022116 <LCD_SetPixelIndex+0x2a>
 80220fe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8022102:	4288      	cmp	r0, r1
 8022104:	dc07      	bgt.n	8022116 <LCD_SetPixelIndex+0x2a>
 8022106:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 802210a:	42b2      	cmp	r2, r6
 802210c:	dc03      	bgt.n	8022116 <LCD_SetPixelIndex+0x2a>
 802210e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8022112:	4296      	cmp	r6, r2
 8022114:	dd00      	ble.n	8022118 <LCD_SetPixelIndex+0x2c>
 8022116:	bd70      	pop	{r4, r5, r6, pc}
 8022118:	7c61      	ldrb	r1, [r4, #17]
 802211a:	4a06      	ldr	r2, [pc, #24]	; (8022134 <LCD_SetPixelIndex+0x48>)
 802211c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8022120:	68e5      	ldr	r5, [r4, #12]
 8022122:	4601      	mov	r1, r0
 8022124:	4632      	mov	r2, r6
 8022126:	69ad      	ldr	r5, [r5, #24]
 8022128:	4620      	mov	r0, r4
 802212a:	47a8      	blx	r5
 802212c:	e7f3      	b.n	8022116 <LCD_SetPixelIndex+0x2a>
 802212e:	bf00      	nop
 8022130:	20000280 	.word	0x20000280
 8022134:	2002cc24 	.word	0x2002cc24

08022138 <GUI__CalcTextRect>:
 8022138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802213c:	460d      	mov	r5, r1
 802213e:	4614      	mov	r4, r2
 8022140:	461e      	mov	r6, r3
 8022142:	2800      	cmp	r0, #0
 8022144:	d042      	beq.n	80221cc <GUI__CalcTextRect+0x94>
 8022146:	f001 fd75 	bl	8023c34 <GUI_GetStringDistX>
 802214a:	f006 0303 	and.w	r3, r6, #3
 802214e:	2b01      	cmp	r3, #1
 8022150:	4680      	mov	r8, r0
 8022152:	d02b      	beq.n	80221ac <GUI__CalcTextRect+0x74>
 8022154:	2b02      	cmp	r3, #2
 8022156:	d142      	bne.n	80221de <GUI__CalcTextRect+0xa6>
 8022158:	f9b5 3000 	ldrsh.w	r3, [r5]
 802215c:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8022160:	1aff      	subs	r7, r7, r3
 8022162:	3701      	adds	r7, #1
 8022164:	1a3f      	subs	r7, r7, r0
 8022166:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 802216a:	eb03 0767 	add.w	r7, r3, r7, asr #1
 802216e:	f006 060c 	and.w	r6, r6, #12
 8022172:	f002 fd5f 	bl	8024c34 <GUI_GetFontDistY>
 8022176:	2e04      	cmp	r6, #4
 8022178:	d023      	beq.n	80221c2 <GUI__CalcTextRect+0x8a>
 802217a:	2e0c      	cmp	r6, #12
 802217c:	d12c      	bne.n	80221d8 <GUI__CalcTextRect+0xa0>
 802217e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8022182:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8022186:	1a9b      	subs	r3, r3, r2
 8022188:	3301      	adds	r3, #1
 802218a:	1a1b      	subs	r3, r3, r0
 802218c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022190:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8022194:	f108 38ff 	add.w	r8, r8, #4294967295
 8022198:	3801      	subs	r0, #1
 802219a:	44b8      	add	r8, r7
 802219c:	4418      	add	r0, r3
 802219e:	f8a4 8004 	strh.w	r8, [r4, #4]
 80221a2:	80e0      	strh	r0, [r4, #6]
 80221a4:	8027      	strh	r7, [r4, #0]
 80221a6:	8063      	strh	r3, [r4, #2]
 80221a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221ac:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 80221b0:	f006 060c 	and.w	r6, r6, #12
 80221b4:	1a3f      	subs	r7, r7, r0
 80221b6:	f002 fd3d 	bl	8024c34 <GUI_GetFontDistY>
 80221ba:	2e04      	cmp	r6, #4
 80221bc:	f107 0701 	add.w	r7, r7, #1
 80221c0:	d1db      	bne.n	802217a <GUI__CalcTextRect+0x42>
 80221c2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80221c6:	1a1b      	subs	r3, r3, r0
 80221c8:	3301      	adds	r3, #1
 80221ca:	e7e3      	b.n	8022194 <GUI__CalcTextRect+0x5c>
 80221cc:	680b      	ldr	r3, [r1, #0]
 80221ce:	684a      	ldr	r2, [r1, #4]
 80221d0:	6062      	str	r2, [r4, #4]
 80221d2:	6023      	str	r3, [r4, #0]
 80221d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221d8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80221dc:	e7da      	b.n	8022194 <GUI__CalcTextRect+0x5c>
 80221de:	f9b5 7000 	ldrsh.w	r7, [r5]
 80221e2:	e7c4      	b.n	802216e <GUI__CalcTextRect+0x36>

080221e4 <GUI__DivideRound32>:
 80221e4:	b141      	cbz	r1, 80221f8 <GUI__DivideRound32+0x14>
 80221e6:	2800      	cmp	r0, #0
 80221e8:	bfb4      	ite	lt
 80221ea:	eba0 0061 	sublt.w	r0, r0, r1, asr #1
 80221ee:	eb00 0061 	addge.w	r0, r0, r1, asr #1
 80221f2:	fb90 f0f1 	sdiv	r0, r0, r1
 80221f6:	4770      	bx	lr
 80221f8:	4608      	mov	r0, r1
 80221fa:	4770      	bx	lr

080221fc <GUI__HandleEOLine>:
 80221fc:	b510      	push	{r4, lr}
 80221fe:	4604      	mov	r4, r0
 8022200:	b082      	sub	sp, #8
 8022202:	a802      	add	r0, sp, #8
 8022204:	6822      	ldr	r2, [r4, #0]
 8022206:	f840 2d04 	str.w	r2, [r0, #-4]!
 802220a:	f000 fd27 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 802220e:	b2c0      	uxtb	r0, r0
 8022210:	b148      	cbz	r0, 8022226 <GUI__HandleEOLine+0x2a>
 8022212:	280a      	cmp	r0, #10
 8022214:	d002      	beq.n	802221c <GUI__HandleEOLine+0x20>
 8022216:	2000      	movs	r0, #0
 8022218:	b002      	add	sp, #8
 802221a:	bd10      	pop	{r4, pc}
 802221c:	9b01      	ldr	r3, [sp, #4]
 802221e:	6023      	str	r3, [r4, #0]
 8022220:	2000      	movs	r0, #0
 8022222:	b002      	add	sp, #8
 8022224:	bd10      	pop	{r4, pc}
 8022226:	2001      	movs	r0, #1
 8022228:	b002      	add	sp, #8
 802222a:	bd10      	pop	{r4, pc}

0802222c <GUI__IntersectRect>:
 802222c:	880b      	ldrh	r3, [r1, #0]
 802222e:	b410      	push	{r4}
 8022230:	f9b0 4000 	ldrsh.w	r4, [r0]
 8022234:	b21a      	sxth	r2, r3
 8022236:	4294      	cmp	r4, r2
 8022238:	bfb8      	it	lt
 802223a:	8003      	strhlt	r3, [r0, #0]
 802223c:	884b      	ldrh	r3, [r1, #2]
 802223e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8022242:	b21a      	sxth	r2, r3
 8022244:	4294      	cmp	r4, r2
 8022246:	bfb8      	it	lt
 8022248:	8043      	strhlt	r3, [r0, #2]
 802224a:	888b      	ldrh	r3, [r1, #4]
 802224c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8022250:	b21a      	sxth	r2, r3
 8022252:	4294      	cmp	r4, r2
 8022254:	bfc8      	it	gt
 8022256:	8083      	strhgt	r3, [r0, #4]
 8022258:	88cb      	ldrh	r3, [r1, #6]
 802225a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 802225e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022262:	b21a      	sxth	r2, r3
 8022264:	4291      	cmp	r1, r2
 8022266:	bfc8      	it	gt
 8022268:	80c3      	strhgt	r3, [r0, #6]
 802226a:	4770      	bx	lr

0802226c <GUI__IntersectRects>:
 802226c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8022270:	f9b2 c000 	ldrsh.w	ip, [r2]
 8022274:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8022278:	f9b1 8000 	ldrsh.w	r8, [r1]
 802227c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8022280:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8022284:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8022288:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 802228c:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8022290:	429f      	cmp	r7, r3
 8022292:	bfb8      	it	lt
 8022294:	463b      	movlt	r3, r7
 8022296:	45e0      	cmp	r8, ip
 8022298:	bfac      	ite	ge
 802229a:	4642      	movge	r2, r8
 802229c:	4662      	movlt	r2, ip
 802229e:	b292      	uxth	r2, r2
 80222a0:	b29b      	uxth	r3, r3
 80222a2:	42a6      	cmp	r6, r4
 80222a4:	bfa8      	it	ge
 80222a6:	4634      	movge	r4, r6
 80222a8:	428d      	cmp	r5, r1
 80222aa:	bfb8      	it	lt
 80222ac:	4629      	movlt	r1, r5
 80222ae:	fa0f fc82 	sxth.w	ip, r2
 80222b2:	b21f      	sxth	r7, r3
 80222b4:	b2a4      	uxth	r4, r4
 80222b6:	b289      	uxth	r1, r1
 80222b8:	45bc      	cmp	ip, r7
 80222ba:	8002      	strh	r2, [r0, #0]
 80222bc:	8083      	strh	r3, [r0, #4]
 80222be:	8044      	strh	r4, [r0, #2]
 80222c0:	80c1      	strh	r1, [r0, #6]
 80222c2:	dc08      	bgt.n	80222d6 <GUI__IntersectRects+0x6a>
 80222c4:	b224      	sxth	r4, r4
 80222c6:	b209      	sxth	r1, r1
 80222c8:	428c      	cmp	r4, r1
 80222ca:	bfcc      	ite	gt
 80222cc:	2000      	movgt	r0, #0
 80222ce:	2001      	movle	r0, #1
 80222d0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80222d4:	4770      	bx	lr
 80222d6:	2000      	movs	r0, #0
 80222d8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80222dc:	4770      	bx	lr
 80222de:	bf00      	nop

080222e0 <GUI__memset>:
 80222e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222e2:	b2c9      	uxtb	r1, r1
 80222e4:	4607      	mov	r7, r0
 80222e6:	b14a      	cbz	r2, 80222fc <GUI__memset+0x1c>
 80222e8:	0784      	lsls	r4, r0, #30
 80222ea:	4603      	mov	r3, r0
 80222ec:	d008      	beq.n	8022300 <GUI__memset+0x20>
 80222ee:	e001      	b.n	80222f4 <GUI__memset+0x14>
 80222f0:	0798      	lsls	r0, r3, #30
 80222f2:	d005      	beq.n	8022300 <GUI__memset+0x20>
 80222f4:	3a01      	subs	r2, #1
 80222f6:	f803 1b01 	strb.w	r1, [r3], #1
 80222fa:	d1f9      	bne.n	80222f0 <GUI__memset+0x10>
 80222fc:	4638      	mov	r0, r7
 80222fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022300:	0890      	lsrs	r0, r2, #2
 8022302:	4684      	mov	ip, r0
 8022304:	b320      	cbz	r0, 8022350 <GUI__memset+0x70>
 8022306:	eb01 2501 	add.w	r5, r1, r1, lsl #8
 802230a:	2803      	cmp	r0, #3
 802230c:	f002 0203 	and.w	r2, r2, #3
 8022310:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8022314:	dd12      	ble.n	802233c <GUI__memset+0x5c>
 8022316:	461c      	mov	r4, r3
 8022318:	4606      	mov	r6, r0
 802231a:	3e04      	subs	r6, #4
 802231c:	2e03      	cmp	r6, #3
 802231e:	6025      	str	r5, [r4, #0]
 8022320:	6065      	str	r5, [r4, #4]
 8022322:	60a5      	str	r5, [r4, #8]
 8022324:	60e5      	str	r5, [r4, #12]
 8022326:	f104 0410 	add.w	r4, r4, #16
 802232a:	dcf6      	bgt.n	802231a <GUI__memset+0x3a>
 802232c:	3804      	subs	r0, #4
 802232e:	0884      	lsrs	r4, r0, #2
 8022330:	1c66      	adds	r6, r4, #1
 8022332:	ebb0 0c84 	subs.w	ip, r0, r4, lsl #2
 8022336:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 802233a:	d007      	beq.n	802234c <GUI__memset+0x6c>
 802233c:	461e      	mov	r6, r3
 802233e:	4664      	mov	r4, ip
 8022340:	3c01      	subs	r4, #1
 8022342:	f846 5b04 	str.w	r5, [r6], #4
 8022346:	d1fb      	bne.n	8022340 <GUI__memset+0x60>
 8022348:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 802234c:	2a00      	cmp	r2, #0
 802234e:	d0d5      	beq.n	80222fc <GUI__memset+0x1c>
 8022350:	4618      	mov	r0, r3
 8022352:	f008 fa4c 	bl	802a7ee <memset>
 8022356:	4638      	mov	r0, r7
 8022358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802235a:	bf00      	nop

0802235c <GUI__ReduceRect>:
 802235c:	b470      	push	{r4, r5, r6}
 802235e:	88cb      	ldrh	r3, [r1, #6]
 8022360:	880e      	ldrh	r6, [r1, #0]
 8022362:	888d      	ldrh	r5, [r1, #4]
 8022364:	884c      	ldrh	r4, [r1, #2]
 8022366:	b292      	uxth	r2, r2
 8022368:	4416      	add	r6, r2
 802236a:	1aad      	subs	r5, r5, r2
 802236c:	4414      	add	r4, r2
 802236e:	1a9a      	subs	r2, r3, r2
 8022370:	8006      	strh	r6, [r0, #0]
 8022372:	8085      	strh	r5, [r0, #4]
 8022374:	8044      	strh	r4, [r0, #2]
 8022376:	80c2      	strh	r2, [r0, #6]
 8022378:	bc70      	pop	{r4, r5, r6}
 802237a:	4770      	bx	lr

0802237c <GUI__SetText>:
 802237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802237e:	6807      	ldr	r7, [r0, #0]
 8022380:	b083      	sub	sp, #12
 8022382:	4606      	mov	r6, r0
 8022384:	460d      	mov	r5, r1
 8022386:	b9c7      	cbnz	r7, 80223ba <GUI__SetText+0x3e>
 8022388:	2d00      	cmp	r5, #0
 802238a:	d05a      	beq.n	8022442 <GUI__SetText+0xc6>
 802238c:	f04f 32ff 	mov.w	r2, #4294967295
 8022390:	e000      	b.n	8022394 <GUI__SetText+0x18>
 8022392:	461a      	mov	r2, r3
 8022394:	1c53      	adds	r3, r2, #1
 8022396:	5cec      	ldrb	r4, [r5, r3]
 8022398:	2c00      	cmp	r4, #0
 802239a:	d1fa      	bne.n	8022392 <GUI__SetText+0x16>
 802239c:	4638      	mov	r0, r7
 802239e:	1c94      	adds	r4, r2, #2
 80223a0:	f003 fbaa 	bl	8025af8 <GUI_ALLOC_GetSize>
 80223a4:	4284      	cmp	r4, r0
 80223a6:	d026      	beq.n	80223f6 <GUI__SetText+0x7a>
 80223a8:	4620      	mov	r0, r4
 80223aa:	f003 fa87 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 80223ae:	4607      	mov	r7, r0
 80223b0:	2800      	cmp	r0, #0
 80223b2:	d130      	bne.n	8022416 <GUI__SetText+0x9a>
 80223b4:	2000      	movs	r0, #0
 80223b6:	b003      	add	sp, #12
 80223b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223ba:	4638      	mov	r0, r7
 80223bc:	f003 fa96 	bl	80258ec <GUI_ALLOC_LockH>
 80223c0:	4b23      	ldr	r3, [pc, #140]	; (8022450 <GUI__SetText+0xd4>)
 80223c2:	9001      	str	r0, [sp, #4]
 80223c4:	2d00      	cmp	r5, #0
 80223c6:	bf14      	ite	ne
 80223c8:	462a      	movne	r2, r5
 80223ca:	461a      	moveq	r2, r3
 80223cc:	2800      	cmp	r0, #0
 80223ce:	bf08      	it	eq
 80223d0:	4618      	moveq	r0, r3
 80223d2:	7813      	ldrb	r3, [r2, #0]
 80223d4:	7801      	ldrb	r1, [r0, #0]
 80223d6:	428b      	cmp	r3, r1
 80223d8:	d109      	bne.n	80223ee <GUI__SetText+0x72>
 80223da:	b373      	cbz	r3, 802243a <GUI__SetText+0xbe>
 80223dc:	4604      	mov	r4, r0
 80223de:	e000      	b.n	80223e2 <GUI__SetText+0x66>
 80223e0:	b35b      	cbz	r3, 802243a <GUI__SetText+0xbe>
 80223e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80223e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80223ea:	428b      	cmp	r3, r1
 80223ec:	d0f8      	beq.n	80223e0 <GUI__SetText+0x64>
 80223ee:	a801      	add	r0, sp, #4
 80223f0:	f003 fa8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 80223f4:	e7c8      	b.n	8022388 <GUI__SetText+0xc>
 80223f6:	4638      	mov	r0, r7
 80223f8:	f003 fa78 	bl	80258ec <GUI_ALLOC_LockH>
 80223fc:	ae02      	add	r6, sp, #8
 80223fe:	4b15      	ldr	r3, [pc, #84]	; (8022454 <GUI__SetText+0xd8>)
 8022400:	f846 0d04 	str.w	r0, [r6, #-4]!
 8022404:	4629      	mov	r1, r5
 8022406:	4622      	mov	r2, r4
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	4798      	blx	r3
 802240c:	4630      	mov	r0, r6
 802240e:	f003 fa7f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022412:	2001      	movs	r0, #1
 8022414:	e7cf      	b.n	80223b6 <GUI__SetText+0x3a>
 8022416:	f003 fa69 	bl	80258ec <GUI_ALLOC_LockH>
 802241a:	ac02      	add	r4, sp, #8
 802241c:	4629      	mov	r1, r5
 802241e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8022422:	f008 fb25 	bl	802aa70 <strcpy>
 8022426:	4620      	mov	r0, r4
 8022428:	f003 fa72 	bl	8025910 <GUI_ALLOC_UnlockH>
 802242c:	4630      	mov	r0, r6
 802242e:	f003 fb8f 	bl	8025b50 <GUI_ALLOC_FreePtr>
 8022432:	2001      	movs	r0, #1
 8022434:	6037      	str	r7, [r6, #0]
 8022436:	b003      	add	sp, #12
 8022438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802243a:	a801      	add	r0, sp, #4
 802243c:	f003 fa68 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022440:	e7b8      	b.n	80223b4 <GUI__SetText+0x38>
 8022442:	4638      	mov	r0, r7
 8022444:	f003 fb58 	bl	8025af8 <GUI_ALLOC_GetSize>
 8022448:	2800      	cmp	r0, #0
 802244a:	d0b3      	beq.n	80223b4 <GUI__SetText+0x38>
 802244c:	462c      	mov	r4, r5
 802244e:	e7ab      	b.n	80223a8 <GUI__SetText+0x2c>
 8022450:	08031fbc 	.word	0x08031fbc
 8022454:	20000258 	.word	0x20000258

08022458 <GUI__sqrt32>:
 8022458:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 802245c:	bf2c      	ite	cs
 802245e:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8022462:	2300      	movcc	r3, #0
 8022464:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022468:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 802246c:	bf28      	it	cs
 802246e:	4608      	movcs	r0, r1
 8022470:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8022474:	4290      	cmp	r0, r2
 8022476:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 802247a:	bf28      	it	cs
 802247c:	460b      	movcs	r3, r1
 802247e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022482:	ebc2 0200 	rsb	r2, r2, r0
 8022486:	bf38      	it	cc
 8022488:	4602      	movcc	r2, r0
 802248a:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 802248e:	428a      	cmp	r2, r1
 8022490:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 8022494:	bf28      	it	cs
 8022496:	4603      	movcs	r3, r0
 8022498:	ea4f 0353 	mov.w	r3, r3, lsr #1
 802249c:	ebc1 0102 	rsb	r1, r1, r2
 80224a0:	bf38      	it	cc
 80224a2:	4611      	movcc	r1, r2
 80224a4:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 80224a8:	4291      	cmp	r1, r2
 80224aa:	f103 7000 	add.w	r0, r3, #33554432	; 0x2000000
 80224ae:	bf28      	it	cs
 80224b0:	4603      	movcs	r3, r0
 80224b2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80224b6:	ebc2 0201 	rsb	r2, r2, r1
 80224ba:	bf38      	it	cc
 80224bc:	460a      	movcc	r2, r1
 80224be:	f503 0180 	add.w	r1, r3, #4194304	; 0x400000
 80224c2:	428a      	cmp	r2, r1
 80224c4:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 80224c8:	bf28      	it	cs
 80224ca:	4603      	movcs	r3, r0
 80224cc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80224d0:	ebc1 0102 	rsb	r1, r1, r2
 80224d4:	bf38      	it	cc
 80224d6:	4611      	movcc	r1, r2
 80224d8:	f503 1280 	add.w	r2, r3, #1048576	; 0x100000
 80224dc:	4291      	cmp	r1, r2
 80224de:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 80224e2:	bf28      	it	cs
 80224e4:	4603      	movcs	r3, r0
 80224e6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80224ea:	ebc2 0201 	rsb	r2, r2, r1
 80224ee:	bf38      	it	cc
 80224f0:	460a      	movcc	r2, r1
 80224f2:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
 80224f6:	428a      	cmp	r2, r1
 80224f8:	f503 2000 	add.w	r0, r3, #524288	; 0x80000
 80224fc:	bf28      	it	cs
 80224fe:	4603      	movcs	r3, r0
 8022500:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022504:	ebc1 0102 	rsb	r1, r1, r2
 8022508:	bf38      	it	cc
 802250a:	4611      	movcc	r1, r2
 802250c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8022510:	4291      	cmp	r1, r2
 8022512:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8022516:	bf28      	it	cs
 8022518:	4603      	movcs	r3, r0
 802251a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 802251e:	ebc2 0201 	rsb	r2, r2, r1
 8022522:	bf38      	it	cc
 8022524:	460a      	movcc	r2, r1
 8022526:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 802252a:	428a      	cmp	r2, r1
 802252c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8022530:	bf28      	it	cs
 8022532:	4603      	movcs	r3, r0
 8022534:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022538:	ebc1 0102 	rsb	r1, r1, r2
 802253c:	bf38      	it	cc
 802253e:	4611      	movcc	r1, r2
 8022540:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8022544:	4291      	cmp	r1, r2
 8022546:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 802254a:	bf28      	it	cs
 802254c:	4603      	movcs	r3, r0
 802254e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022552:	ebc2 0201 	rsb	r2, r2, r1
 8022556:	bf38      	it	cc
 8022558:	460a      	movcc	r2, r1
 802255a:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 802255e:	428a      	cmp	r2, r1
 8022560:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8022564:	bf28      	it	cs
 8022566:	4603      	movcs	r3, r0
 8022568:	ea4f 0353 	mov.w	r3, r3, lsr #1
 802256c:	ebc1 0102 	rsb	r1, r1, r2
 8022570:	bf38      	it	cc
 8022572:	4611      	movcc	r1, r2
 8022574:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8022578:	4291      	cmp	r1, r2
 802257a:	f503 7000 	add.w	r0, r3, #512	; 0x200
 802257e:	bf28      	it	cs
 8022580:	4603      	movcs	r3, r0
 8022582:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022586:	ebc2 0201 	rsb	r2, r2, r1
 802258a:	bf38      	it	cc
 802258c:	460a      	movcc	r2, r1
 802258e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8022592:	428a      	cmp	r2, r1
 8022594:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8022598:	bf28      	it	cs
 802259a:	4603      	movcs	r3, r0
 802259c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80225a0:	ebc1 0102 	rsb	r1, r1, r2
 80225a4:	bf38      	it	cc
 80225a6:	4611      	movcc	r1, r2
 80225a8:	f103 0210 	add.w	r2, r3, #16
 80225ac:	4291      	cmp	r1, r2
 80225ae:	f103 0020 	add.w	r0, r3, #32
 80225b2:	bf28      	it	cs
 80225b4:	4603      	movcs	r3, r0
 80225b6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80225ba:	ebc2 0201 	rsb	r2, r2, r1
 80225be:	bf38      	it	cc
 80225c0:	460a      	movcc	r2, r1
 80225c2:	1d19      	adds	r1, r3, #4
 80225c4:	428a      	cmp	r2, r1
 80225c6:	f103 0008 	add.w	r0, r3, #8
 80225ca:	bf28      	it	cs
 80225cc:	4603      	movcs	r3, r0
 80225ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80225d2:	ebc1 0102 	rsb	r1, r1, r2
 80225d6:	bf28      	it	cs
 80225d8:	460a      	movcs	r2, r1
 80225da:	1c98      	adds	r0, r3, #2
 80225dc:	1c59      	adds	r1, r3, #1
 80225de:	4291      	cmp	r1, r2
 80225e0:	bf88      	it	hi
 80225e2:	4618      	movhi	r0, r3
 80225e4:	0840      	lsrs	r0, r0, #1
 80225e6:	4770      	bx	lr

080225e8 <GUI__ManageCache>:
 80225e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225ea:	4b3a      	ldr	r3, [pc, #232]	; (80226d4 <GUI__ManageCache+0xec>)
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	7c5c      	ldrb	r4, [r3, #17]
 80225f0:	2c01      	cmp	r4, #1
 80225f2:	b083      	sub	sp, #12
 80225f4:	4605      	mov	r5, r0
 80225f6:	dd02      	ble.n	80225fe <GUI__ManageCache+0x16>
 80225f8:	2001      	movs	r0, #1
 80225fa:	b003      	add	sp, #12
 80225fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225fe:	4b36      	ldr	r3, [pc, #216]	; (80226d8 <GUI__ManageCache+0xf0>)
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	b113      	cbz	r3, 802260a <GUI__ManageCache+0x22>
 8022604:	4620      	mov	r0, r4
 8022606:	4629      	mov	r1, r5
 8022608:	4798      	blx	r3
 802260a:	2d01      	cmp	r5, #1
 802260c:	d026      	beq.n	802265c <GUI__ManageCache+0x74>
 802260e:	2d02      	cmp	r5, #2
 8022610:	d00d      	beq.n	802262e <GUI__ManageCache+0x46>
 8022612:	2d00      	cmp	r5, #0
 8022614:	d1f0      	bne.n	80225f8 <GUI__ManageCache+0x10>
 8022616:	4d31      	ldr	r5, [pc, #196]	; (80226dc <GUI__ManageCache+0xf4>)
 8022618:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802261c:	2b01      	cmp	r3, #1
 802261e:	d03e      	beq.n	802269e <GUI__ManageCache+0xb6>
 8022620:	2001      	movs	r0, #1
 8022622:	2b00      	cmp	r3, #0
 8022624:	bf18      	it	ne
 8022626:	3b01      	subne	r3, #1
 8022628:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 802262c:	e7e5      	b.n	80225fa <GUI__ManageCache+0x12>
 802262e:	4620      	mov	r0, r4
 8022630:	f001 fb0a 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8022634:	9001      	str	r0, [sp, #4]
 8022636:	2800      	cmp	r0, #0
 8022638:	d0de      	beq.n	80225f8 <GUI__ManageCache+0x10>
 802263a:	68c3      	ldr	r3, [r0, #12]
 802263c:	210d      	movs	r1, #13
 802263e:	a801      	add	r0, sp, #4
 8022640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022642:	4798      	blx	r3
 8022644:	4604      	mov	r4, r0
 8022646:	2800      	cmp	r0, #0
 8022648:	d0d6      	beq.n	80225f8 <GUI__ManageCache+0x10>
 802264a:	4b25      	ldr	r3, [pc, #148]	; (80226e0 <GUI__ManageCache+0xf8>)
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	b103      	cbz	r3, 8022652 <GUI__ManageCache+0x6a>
 8022650:	4798      	blx	r3
 8022652:	9801      	ldr	r0, [sp, #4]
 8022654:	2102      	movs	r1, #2
 8022656:	47a0      	blx	r4
 8022658:	2000      	movs	r0, #0
 802265a:	e7ce      	b.n	80225fa <GUI__ManageCache+0x12>
 802265c:	4e1f      	ldr	r6, [pc, #124]	; (80226dc <GUI__ManageCache+0xf4>)
 802265e:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8022662:	b127      	cbz	r7, 802266e <GUI__ManageCache+0x86>
 8022664:	3701      	adds	r7, #1
 8022666:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 802266a:	4628      	mov	r0, r5
 802266c:	e7c5      	b.n	80225fa <GUI__ManageCache+0x12>
 802266e:	4620      	mov	r0, r4
 8022670:	f001 faea 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8022674:	9001      	str	r0, [sp, #4]
 8022676:	2800      	cmp	r0, #0
 8022678:	d0be      	beq.n	80225f8 <GUI__ManageCache+0x10>
 802267a:	68c3      	ldr	r3, [r0, #12]
 802267c:	210d      	movs	r1, #13
 802267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022680:	a801      	add	r0, sp, #4
 8022682:	4798      	blx	r3
 8022684:	4603      	mov	r3, r0
 8022686:	2800      	cmp	r0, #0
 8022688:	d0b6      	beq.n	80225f8 <GUI__ManageCache+0x10>
 802268a:	4629      	mov	r1, r5
 802268c:	9801      	ldr	r0, [sp, #4]
 802268e:	4798      	blx	r3
 8022690:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8022694:	3301      	adds	r3, #1
 8022696:	4638      	mov	r0, r7
 8022698:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 802269c:	e7ad      	b.n	80225fa <GUI__ManageCache+0x12>
 802269e:	4620      	mov	r0, r4
 80226a0:	f001 fad2 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 80226a4:	9001      	str	r0, [sp, #4]
 80226a6:	b188      	cbz	r0, 80226cc <GUI__ManageCache+0xe4>
 80226a8:	68c3      	ldr	r3, [r0, #12]
 80226aa:	210d      	movs	r1, #13
 80226ac:	a801      	add	r0, sp, #4
 80226ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80226b0:	4798      	blx	r3
 80226b2:	4606      	mov	r6, r0
 80226b4:	b150      	cbz	r0, 80226cc <GUI__ManageCache+0xe4>
 80226b6:	4b0a      	ldr	r3, [pc, #40]	; (80226e0 <GUI__ManageCache+0xf8>)
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	b103      	cbz	r3, 80226be <GUI__ManageCache+0xd6>
 80226bc:	4798      	blx	r3
 80226be:	9801      	ldr	r0, [sp, #4]
 80226c0:	2100      	movs	r1, #0
 80226c2:	47b0      	blx	r6
 80226c4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80226c8:	2000      	movs	r0, #0
 80226ca:	e7aa      	b.n	8022622 <GUI__ManageCache+0x3a>
 80226cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80226d0:	2001      	movs	r0, #1
 80226d2:	e7a6      	b.n	8022622 <GUI__ManageCache+0x3a>
 80226d4:	20000280 	.word	0x20000280
 80226d8:	2002b19c 	.word	0x2002b19c
 80226dc:	2002b194 	.word	0x2002b194
 80226e0:	2002b190 	.word	0x2002b190

080226e4 <_GetCursorPosX>:
 80226e4:	b530      	push	{r4, r5, lr}
 80226e6:	b083      	sub	sp, #12
 80226e8:	9001      	str	r0, [sp, #4]
 80226ea:	b162      	cbz	r2, 8022706 <_GetCursorPosX+0x22>
 80226ec:	4614      	mov	r4, r2
 80226ee:	2500      	movs	r5, #0
 80226f0:	a801      	add	r0, sp, #4
 80226f2:	f000 fab3 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 80226f6:	f002 faab 	bl	8024c50 <GUI_GetCharDistX>
 80226fa:	3c01      	subs	r4, #1
 80226fc:	4405      	add	r5, r0
 80226fe:	d1f7      	bne.n	80226f0 <_GetCursorPosX+0xc>
 8022700:	4628      	mov	r0, r5
 8022702:	b003      	add	sp, #12
 8022704:	bd30      	pop	{r4, r5, pc}
 8022706:	4615      	mov	r5, r2
 8022708:	e7fa      	b.n	8022700 <_GetCursorPosX+0x1c>
 802270a:	bf00      	nop

0802270c <_GetCursorCharacter>:
 802270c:	b570      	push	{r4, r5, r6, lr}
 802270e:	4604      	mov	r4, r0
 8022710:	b10b      	cbz	r3, 8022716 <_GetCursorCharacter+0xa>
 8022712:	2200      	movs	r2, #0
 8022714:	601a      	str	r2, [r3, #0]
 8022716:	b141      	cbz	r1, 802272a <_GetCursorCharacter+0x1e>
 8022718:	4e06      	ldr	r6, [pc, #24]	; (8022734 <_GetCursorCharacter+0x28>)
 802271a:	460d      	mov	r5, r1
 802271c:	6833      	ldr	r3, [r6, #0]
 802271e:	4620      	mov	r0, r4
 8022720:	685b      	ldr	r3, [r3, #4]
 8022722:	4798      	blx	r3
 8022724:	3d01      	subs	r5, #1
 8022726:	4404      	add	r4, r0
 8022728:	d1f8      	bne.n	802271c <_GetCursorCharacter+0x10>
 802272a:	4620      	mov	r0, r4
 802272c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022730:	f000 ba6a 	b.w	8022c08 <GUI_UC_GetCharCode>
 8022734:	2002cc1c 	.word	0x2002cc1c

08022738 <_GetCursorPosChar>:
 8022738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802273c:	1e4e      	subs	r6, r1, #1
 802273e:	2e00      	cmp	r6, #0
 8022740:	4681      	mov	r9, r0
 8022742:	4690      	mov	r8, r2
 8022744:	dd1a      	ble.n	802277c <_GetCursorPosChar+0x44>
 8022746:	4604      	mov	r4, r0
 8022748:	2500      	movs	r5, #0
 802274a:	e006      	b.n	802275a <_GetCursorPosChar+0x22>
 802274c:	4545      	cmp	r5, r8
 802274e:	dc0e      	bgt.n	802276e <_GetCursorPosChar+0x36>
 8022750:	f000 fa4a 	bl	8022be8 <GUI_UC_GetCharSize>
 8022754:	3e01      	subs	r6, #1
 8022756:	4404      	add	r4, r0
 8022758:	d009      	beq.n	802276e <_GetCursorPosChar+0x36>
 802275a:	4620      	mov	r0, r4
 802275c:	f000 fa54 	bl	8022c08 <GUI_UC_GetCharCode>
 8022760:	4607      	mov	r7, r0
 8022762:	f002 fa75 	bl	8024c50 <GUI_GetCharDistX>
 8022766:	4405      	add	r5, r0
 8022768:	4620      	mov	r0, r4
 802276a:	2f00      	cmp	r7, #0
 802276c:	d1ee      	bne.n	802274c <_GetCursorPosChar+0x14>
 802276e:	ebc9 0104 	rsb	r1, r9, r4
 8022772:	4648      	mov	r0, r9
 8022774:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022778:	f000 ba98 	b.w	8022cac <GUI_UC__NumBytes2NumChars>
 802277c:	2100      	movs	r1, #0
 802277e:	e7f8      	b.n	8022772 <_GetCursorPosChar+0x3a>

08022780 <GUI__GetCursorPosX>:
 8022780:	b510      	push	{r4, lr}
 8022782:	4b03      	ldr	r3, [pc, #12]	; (8022790 <GUI__GetCursorPosX+0x10>)
 8022784:	460c      	mov	r4, r1
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	4611      	mov	r1, r2
 802278a:	4622      	mov	r2, r4
 802278c:	4798      	blx	r3
 802278e:	bd10      	pop	{r4, pc}
 8022790:	20000264 	.word	0x20000264

08022794 <GUI__GetCursorPosChar>:
 8022794:	b510      	push	{r4, lr}
 8022796:	4b03      	ldr	r3, [pc, #12]	; (80227a4 <GUI__GetCursorPosChar+0x10>)
 8022798:	460c      	mov	r4, r1
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	4611      	mov	r1, r2
 802279e:	4622      	mov	r2, r4
 80227a0:	4798      	blx	r3
 80227a2:	bd10      	pop	{r4, pc}
 80227a4:	2000025c 	.word	0x2000025c

080227a8 <GUI__GetCursorCharacter>:
 80227a8:	b510      	push	{r4, lr}
 80227aa:	4c02      	ldr	r4, [pc, #8]	; (80227b4 <GUI__GetCursorCharacter+0xc>)
 80227ac:	6824      	ldr	r4, [r4, #0]
 80227ae:	47a0      	blx	r4
 80227b0:	bd10      	pop	{r4, pc}
 80227b2:	bf00      	nop
 80227b4:	20000260 	.word	0x20000260

080227b8 <GUI__MixColors>:
 80227b8:	b430      	push	{r4, r5}
 80227ba:	0e0b      	lsrs	r3, r1, #24
 80227bc:	ea4f 6410 	mov.w	r4, r0, lsr #24
 80227c0:	4b12      	ldr	r3, [pc, #72]	; (802280c <GUI__MixColors+0x54>)
 80227c2:	fb02 f204 	mul.w	r2, r2, r4
 80227c6:	fba3 4202 	umull	r4, r2, r3, r2
 80227ca:	bf08      	it	eq
 80227cc:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 80227d0:	09d2      	lsrs	r2, r2, #7
 80227d2:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 80227d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80227da:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 80227de:	f001 15ff 	and.w	r5, r1, #16711935	; 0xff00ff
 80227e2:	fb04 f402 	mul.w	r4, r4, r2
 80227e6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80227ea:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 80227ee:	fb03 4405 	mla	r4, r3, r5, r4
 80227f2:	fb02 f200 	mul.w	r2, r2, r0
 80227f6:	0a09      	lsrs	r1, r1, #8
 80227f8:	0a24      	lsrs	r4, r4, #8
 80227fa:	fb03 2301 	mla	r3, r3, r1, r2
 80227fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022802:	f003 20ff 	and.w	r0, r3, #4278255360	; 0xff00ff00
 8022806:	4320      	orrs	r0, r4
 8022808:	bc30      	pop	{r4, r5}
 802280a:	4770      	bx	lr
 802280c:	80808081 	.word	0x80808081

08022810 <_OnExit>:
 8022810:	b570      	push	{r4, r5, r6, lr}
 8022812:	4e0a      	ldr	r6, [pc, #40]	; (802283c <_OnExit+0x2c>)
 8022814:	4c0a      	ldr	r4, [pc, #40]	; (8022840 <_OnExit+0x30>)
 8022816:	6830      	ldr	r0, [r6, #0]
 8022818:	4d0a      	ldr	r5, [pc, #40]	; (8022844 <_OnExit+0x34>)
 802281a:	f002 ff1d 	bl	8025658 <GUI_ALLOC_FreeFixedBlock>
 802281e:	6820      	ldr	r0, [r4, #0]
 8022820:	f002 ff1a 	bl	8025658 <GUI_ALLOC_FreeFixedBlock>
 8022824:	6828      	ldr	r0, [r5, #0]
 8022826:	f002 ff17 	bl	8025658 <GUI_ALLOC_FreeFixedBlock>
 802282a:	4907      	ldr	r1, [pc, #28]	; (8022848 <_OnExit+0x38>)
 802282c:	4a07      	ldr	r2, [pc, #28]	; (802284c <_OnExit+0x3c>)
 802282e:	2300      	movs	r3, #0
 8022830:	6033      	str	r3, [r6, #0]
 8022832:	602b      	str	r3, [r5, #0]
 8022834:	6023      	str	r3, [r4, #0]
 8022836:	600b      	str	r3, [r1, #0]
 8022838:	6013      	str	r3, [r2, #0]
 802283a:	bd70      	pop	{r4, r5, r6, pc}
 802283c:	2002b1a4 	.word	0x2002b1a4
 8022840:	2002b1a0 	.word	0x2002b1a0
 8022844:	2002b1a8 	.word	0x2002b1a8
 8022848:	2002b1ac 	.word	0x2002b1ac
 802284c:	2002b1bc 	.word	0x2002b1bc

08022850 <GUI__DoAlphaBlending>:
 8022850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022854:	4c9a      	ldr	r4, [pc, #616]	; (8022ac0 <GUI__DoAlphaBlending+0x270>)
 8022856:	b091      	sub	sp, #68	; 0x44
 8022858:	6825      	ldr	r5, [r4, #0]
 802285a:	9108      	str	r1, [sp, #32]
 802285c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 802285e:	900b      	str	r0, [sp, #44]	; 0x2c
 8022860:	2700      	movs	r7, #0
 8022862:	9204      	str	r2, [sp, #16]
 8022864:	461e      	mov	r6, r3
 8022866:	600f      	str	r7, [r1, #0]
 8022868:	2d00      	cmp	r5, #0
 802286a:	f000 80ff 	beq.w	8022a6c <GUI__DoAlphaBlending+0x21c>
 802286e:	4d95      	ldr	r5, [pc, #596]	; (8022ac4 <GUI__DoAlphaBlending+0x274>)
 8022870:	682c      	ldr	r4, [r5, #0]
 8022872:	b92c      	cbnz	r4, 8022880 <GUI__DoAlphaBlending+0x30>
 8022874:	4b94      	ldr	r3, [pc, #592]	; (8022ac8 <GUI__DoAlphaBlending+0x278>)
 8022876:	681c      	ldr	r4, [r3, #0]
 8022878:	602c      	str	r4, [r5, #0]
 802287a:	2c00      	cmp	r4, #0
 802287c:	f000 80fe 	beq.w	8022a7c <GUI__DoAlphaBlending+0x22c>
 8022880:	4f92      	ldr	r7, [pc, #584]	; (8022acc <GUI__DoAlphaBlending+0x27c>)
 8022882:	683b      	ldr	r3, [r7, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	f000 8106 	beq.w	8022a96 <GUI__DoAlphaBlending+0x246>
 802288a:	9306      	str	r3, [sp, #24]
 802288c:	2700      	movs	r7, #0
 802288e:	4a90      	ldr	r2, [pc, #576]	; (8022ad0 <GUI__DoAlphaBlending+0x280>)
 8022890:	6813      	ldr	r3, [r2, #0]
 8022892:	2b00      	cmp	r3, #0
 8022894:	f000 8109 	beq.w	8022aaa <GUI__DoAlphaBlending+0x25a>
 8022898:	9305      	str	r3, [sp, #20]
 802289a:	2f00      	cmp	r7, #0
 802289c:	f040 80f5 	bne.w	8022a8a <GUI__DoAlphaBlending+0x23a>
 80228a0:	498c      	ldr	r1, [pc, #560]	; (8022ad4 <GUI__DoAlphaBlending+0x284>)
 80228a2:	4a8d      	ldr	r2, [pc, #564]	; (8022ad8 <GUI__DoAlphaBlending+0x288>)
 80228a4:	680b      	ldr	r3, [r1, #0]
 80228a6:	7c58      	ldrb	r0, [r3, #17]
 80228a8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80228ac:	920c      	str	r2, [sp, #48]	; 0x30
 80228ae:	6915      	ldr	r5, [r2, #16]
 80228b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80228b2:	f7fe fec1 	bl	8021638 <GUI_GetBitsPerPixelEx>
 80228b6:	4987      	ldr	r1, [pc, #540]	; (8022ad4 <GUI__DoAlphaBlending+0x284>)
 80228b8:	900a      	str	r0, [sp, #40]	; 0x28
 80228ba:	680b      	ldr	r3, [r1, #0]
 80228bc:	7c58      	ldrb	r0, [r3, #17]
 80228be:	f7fe fed7 	bl	8021670 <GUI_GetpfIndex2ColorEx>
 80228c2:	4b86      	ldr	r3, [pc, #536]	; (8022adc <GUI__DoAlphaBlending+0x28c>)
 80228c4:	900d      	str	r0, [sp, #52]	; 0x34
 80228c6:	42b4      	cmp	r4, r6
 80228c8:	bfa8      	it	ge
 80228ca:	4634      	movge	r4, r6
 80228cc:	4298      	cmp	r0, r3
 80228ce:	f000 80da 	beq.w	8022a86 <GUI__DoAlphaBlending+0x236>
 80228d2:	4b83      	ldr	r3, [pc, #524]	; (8022ae0 <GUI__DoAlphaBlending+0x290>)
 80228d4:	1ac3      	subs	r3, r0, r3
 80228d6:	bf18      	it	ne
 80228d8:	2301      	movne	r3, #1
 80228da:	930e      	str	r3, [sp, #56]	; 0x38
 80228dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80228de:	2600      	movs	r6, #0
 80228e0:	4425      	add	r5, r4
 80228e2:	46a1      	mov	r9, r4
 80228e4:	9c04      	ldr	r4, [sp, #16]
 80228e6:	9509      	str	r5, [sp, #36]	; 0x24
 80228e8:	46b0      	mov	r8, r6
 80228ea:	46b3      	mov	fp, r6
 80228ec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80228ee:	f854 0b04 	ldr.w	r0, [r4], #4
 80228f2:	47a8      	blx	r5
 80228f4:	0e05      	lsrs	r5, r0, #24
 80228f6:	2dff      	cmp	r5, #255	; 0xff
 80228f8:	4607      	mov	r7, r0
 80228fa:	d049      	beq.n	8022990 <GUI__DoAlphaBlending+0x140>
 80228fc:	f1bb 0f00 	cmp.w	fp, #0
 8022900:	d134      	bne.n	802296c <GUI__DoAlphaBlending+0x11c>
 8022902:	4974      	ldr	r1, [pc, #464]	; (8022ad4 <GUI__DoAlphaBlending+0x284>)
 8022904:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8022908:	680b      	ldr	r3, [r1, #0]
 802290a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802290e:	44c2      	add	sl, r8
 8022910:	4553      	cmp	r3, sl
 8022912:	dd61      	ble.n	80229d8 <GUI__DoAlphaBlending+0x188>
 8022914:	ebca 0a03 	rsb	sl, sl, r3
 8022918:	f8cd a01c 	str.w	sl, [sp, #28]
 802291c:	46d4      	mov	ip, sl
 802291e:	469a      	mov	sl, r3
 8022920:	9a06      	ldr	r2, [sp, #24]
 8022922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022924:	9908      	ldr	r1, [sp, #32]
 8022926:	9301      	str	r3, [sp, #4]
 8022928:	44c4      	add	ip, r8
 802292a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802292c:	eb02 0b8c 	add.w	fp, r2, ip, lsl #2
 8022930:	f8cd b000 	str.w	fp, [sp]
 8022934:	1e5a      	subs	r2, r3, #1
 8022936:	4650      	mov	r0, sl
 8022938:	460b      	mov	r3, r1
 802293a:	f006 f971 	bl	8028c20 <GUI_ReadRectEx>
 802293e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022940:	2917      	cmp	r1, #23
 8022942:	dd4d      	ble.n	80229e0 <GUI__DoAlphaBlending+0x190>
 8022944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022946:	b17b      	cbz	r3, 8022968 <GUI__DoAlphaBlending+0x118>
 8022948:	9909      	ldr	r1, [sp, #36]	; 0x24
 802294a:	9507      	str	r5, [sp, #28]
 802294c:	465d      	mov	r5, fp
 802294e:	46a3      	mov	fp, r4
 8022950:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022952:	ebca 0a01 	rsb	sl, sl, r1
 8022956:	6828      	ldr	r0, [r5, #0]
 8022958:	47a0      	blx	r4
 802295a:	f1ba 0a01 	subs.w	sl, sl, #1
 802295e:	f845 0b04 	str.w	r0, [r5], #4
 8022962:	d1f8      	bne.n	8022956 <GUI__DoAlphaBlending+0x106>
 8022964:	9d07      	ldr	r5, [sp, #28]
 8022966:	465c      	mov	r4, fp
 8022968:	f04f 0b01 	mov.w	fp, #1
 802296c:	4a5d      	ldr	r2, [pc, #372]	; (8022ae4 <GUI__DoAlphaBlending+0x294>)
 802296e:	6813      	ldr	r3, [r2, #0]
 8022970:	2b00      	cmp	r3, #0
 8022972:	d143      	bne.n	80229fc <GUI__DoAlphaBlending+0x1ac>
 8022974:	b9fd      	cbnz	r5, 80229b6 <GUI__DoAlphaBlending+0x166>
 8022976:	9d06      	ldr	r5, [sp, #24]
 8022978:	59ab      	ldr	r3, [r5, r6]
 802297a:	9d05      	ldr	r5, [sp, #20]
 802297c:	51ab      	str	r3, [r5, r6]
 802297e:	f1b9 0901 	subs.w	r9, r9, #1
 8022982:	f108 0801 	add.w	r8, r8, #1
 8022986:	f106 0604 	add.w	r6, r6, #4
 802298a:	d010      	beq.n	80229ae <GUI__DoAlphaBlending+0x15e>
 802298c:	9404      	str	r4, [sp, #16]
 802298e:	e7ad      	b.n	80228ec <GUI__DoAlphaBlending+0x9c>
 8022990:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8022992:	682b      	ldr	r3, [r5, #0]
 8022994:	9d05      	ldr	r5, [sp, #20]
 8022996:	51a8      	str	r0, [r5, r6]
 8022998:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 802299a:	f043 0301 	orr.w	r3, r3, #1
 802299e:	f1b9 0901 	subs.w	r9, r9, #1
 80229a2:	602b      	str	r3, [r5, #0]
 80229a4:	f108 0801 	add.w	r8, r8, #1
 80229a8:	f106 0604 	add.w	r6, r6, #4
 80229ac:	d1ee      	bne.n	802298c <GUI__DoAlphaBlending+0x13c>
 80229ae:	9805      	ldr	r0, [sp, #20]
 80229b0:	b011      	add	sp, #68	; 0x44
 80229b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229b6:	462a      	mov	r2, r5
 80229b8:	494b      	ldr	r1, [pc, #300]	; (8022ae8 <GUI__DoAlphaBlending+0x298>)
 80229ba:	9d06      	ldr	r5, [sp, #24]
 80229bc:	680b      	ldr	r3, [r1, #0]
 80229be:	59a9      	ldr	r1, [r5, r6]
 80229c0:	f047 407f 	orr.w	r0, r7, #4278190080	; 0xff000000
 80229c4:	4798      	blx	r3
 80229c6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80229c8:	682b      	ldr	r3, [r5, #0]
 80229ca:	9d05      	ldr	r5, [sp, #20]
 80229cc:	51a8      	str	r0, [r5, r6]
 80229ce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80229d0:	f043 0301 	orr.w	r3, r3, #1
 80229d4:	602b      	str	r3, [r5, #0]
 80229d6:	e7d2      	b.n	802297e <GUI__DoAlphaBlending+0x12e>
 80229d8:	46dc      	mov	ip, fp
 80229da:	f8cd b01c 	str.w	fp, [sp, #28]
 80229de:	e79f      	b.n	8022920 <GUI__DoAlphaBlending+0xd0>
 80229e0:	9a07      	ldr	r2, [sp, #28]
 80229e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229e4:	4658      	mov	r0, fp
 80229e6:	ebc2 0109 	rsb	r1, r2, r9
 80229ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80229ec:	f006 fb34 	bl	8029058 <GUI__ExpandPixelIndicesEx>
 80229f0:	4a3c      	ldr	r2, [pc, #240]	; (8022ae4 <GUI__DoAlphaBlending+0x294>)
 80229f2:	6813      	ldr	r3, [r2, #0]
 80229f4:	f04f 0b01 	mov.w	fp, #1
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d0bb      	beq.n	8022974 <GUI__DoAlphaBlending+0x124>
 80229fc:	9d06      	ldr	r5, [sp, #24]
 80229fe:	9e05      	ldr	r6, [sp, #20]
 8022a00:	9804      	ldr	r0, [sp, #16]
 8022a02:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8022a06:	4445      	add	r5, r8
 8022a08:	44b0      	add	r8, r6
 8022a0a:	469c      	mov	ip, r3
 8022a0c:	4629      	mov	r1, r5
 8022a0e:	4642      	mov	r2, r8
 8022a10:	464b      	mov	r3, r9
 8022a12:	47e0      	blx	ip
 8022a14:	1d2b      	adds	r3, r5, #4
 8022a16:	9d04      	ldr	r5, [sp, #16]
 8022a18:	464c      	mov	r4, r9
 8022a1a:	f108 0204 	add.w	r2, r8, #4
 8022a1e:	1f28      	subs	r0, r5, #4
 8022a20:	e009      	b.n	8022a36 <GUI__DoAlphaBlending+0x1e6>
 8022a22:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8022a26:	f842 1c04 	str.w	r1, [r2, #-4]
 8022a2a:	3c01      	subs	r4, #1
 8022a2c:	f102 0204 	add.w	r2, r2, #4
 8022a30:	f103 0304 	add.w	r3, r3, #4
 8022a34:	d011      	beq.n	8022a5a <GUI__DoAlphaBlending+0x20a>
 8022a36:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8022a3a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8022a3e:	d0f0      	beq.n	8022a22 <GUI__DoAlphaBlending+0x1d2>
 8022a40:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8022a44:	f015 4f7f 	tst.w	r5, #4278190080	; 0xff000000
 8022a48:	bf08      	it	eq
 8022a4a:	f842 1c04 	streq.w	r1, [r2, #-4]
 8022a4e:	3c01      	subs	r4, #1
 8022a50:	f102 0204 	add.w	r2, r2, #4
 8022a54:	f103 0304 	add.w	r3, r3, #4
 8022a58:	d1ed      	bne.n	8022a36 <GUI__DoAlphaBlending+0x1e6>
 8022a5a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8022a5c:	9805      	ldr	r0, [sp, #20]
 8022a5e:	6833      	ldr	r3, [r6, #0]
 8022a60:	f043 0301 	orr.w	r3, r3, #1
 8022a64:	6033      	str	r3, [r6, #0]
 8022a66:	b011      	add	sp, #68	; 0x44
 8022a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a6c:	481f      	ldr	r0, [pc, #124]	; (8022aec <GUI__DoAlphaBlending+0x29c>)
 8022a6e:	4b20      	ldr	r3, [pc, #128]	; (8022af0 <GUI__DoAlphaBlending+0x2a0>)
 8022a70:	6003      	str	r3, [r0, #0]
 8022a72:	2301      	movs	r3, #1
 8022a74:	6023      	str	r3, [r4, #0]
 8022a76:	f001 fb2f 	bl	80240d8 <GUI__RegisterExit>
 8022a7a:	e6f8      	b.n	802286e <GUI__DoAlphaBlending+0x1e>
 8022a7c:	f7fe fe44 	bl	8021708 <LCD_GetVXSizeMax>
 8022a80:	6028      	str	r0, [r5, #0]
 8022a82:	4604      	mov	r4, r0
 8022a84:	e6fc      	b.n	8022880 <GUI__DoAlphaBlending+0x30>
 8022a86:	970e      	str	r7, [sp, #56]	; 0x38
 8022a88:	e728      	b.n	80228dc <GUI__DoAlphaBlending+0x8c>
 8022a8a:	2500      	movs	r5, #0
 8022a8c:	9505      	str	r5, [sp, #20]
 8022a8e:	9805      	ldr	r0, [sp, #20]
 8022a90:	b011      	add	sp, #68	; 0x44
 8022a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a96:	00a0      	lsls	r0, r4, #2
 8022a98:	f002 fde8 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8022a9c:	6038      	str	r0, [r7, #0]
 8022a9e:	f1d0 0701 	rsbs	r7, r0, #1
 8022aa2:	bf38      	it	cc
 8022aa4:	2700      	movcc	r7, #0
 8022aa6:	9006      	str	r0, [sp, #24]
 8022aa8:	e6f1      	b.n	802288e <GUI__DoAlphaBlending+0x3e>
 8022aaa:	6828      	ldr	r0, [r5, #0]
 8022aac:	9203      	str	r2, [sp, #12]
 8022aae:	0080      	lsls	r0, r0, #2
 8022ab0:	f002 fddc 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8022ab4:	9a03      	ldr	r2, [sp, #12]
 8022ab6:	6010      	str	r0, [r2, #0]
 8022ab8:	2800      	cmp	r0, #0
 8022aba:	d0e6      	beq.n	8022a8a <GUI__DoAlphaBlending+0x23a>
 8022abc:	9005      	str	r0, [sp, #20]
 8022abe:	e6ec      	b.n	802289a <GUI__DoAlphaBlending+0x4a>
 8022ac0:	2002b1bc 	.word	0x2002b1bc
 8022ac4:	2002b1ac 	.word	0x2002b1ac
 8022ac8:	2002cc2c 	.word	0x2002cc2c
 8022acc:	2002b1a4 	.word	0x2002b1a4
 8022ad0:	2002b1a0 	.word	0x2002b1a0
 8022ad4:	20000280 	.word	0x20000280
 8022ad8:	2002cc24 	.word	0x2002cc24
 8022adc:	08025e09 	.word	0x08025e09
 8022ae0:	08025e01 	.word	0x08025e01
 8022ae4:	2002b1b0 	.word	0x2002b1b0
 8022ae8:	20000268 	.word	0x20000268
 8022aec:	2002b1b4 	.word	0x2002b1b4
 8022af0:	08022811 	.word	0x08022811

08022af4 <GUI__AllocAlphaBuffer>:
 8022af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022af6:	b083      	sub	sp, #12
 8022af8:	b9c8      	cbnz	r0, 8022b2e <GUI__AllocAlphaBuffer+0x3a>
 8022afa:	4b23      	ldr	r3, [pc, #140]	; (8022b88 <GUI__AllocAlphaBuffer+0x94>)
 8022afc:	681a      	ldr	r2, [r3, #0]
 8022afe:	4607      	mov	r7, r0
 8022b00:	b1d2      	cbz	r2, 8022b38 <GUI__AllocAlphaBuffer+0x44>
 8022b02:	4c22      	ldr	r4, [pc, #136]	; (8022b8c <GUI__AllocAlphaBuffer+0x98>)
 8022b04:	6823      	ldr	r3, [r4, #0]
 8022b06:	b91b      	cbnz	r3, 8022b10 <GUI__AllocAlphaBuffer+0x1c>
 8022b08:	4b21      	ldr	r3, [pc, #132]	; (8022b90 <GUI__AllocAlphaBuffer+0x9c>)
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	6023      	str	r3, [r4, #0]
 8022b0e:	b1db      	cbz	r3, 8022b48 <GUI__AllocAlphaBuffer+0x54>
 8022b10:	4618      	mov	r0, r3
 8022b12:	4e20      	ldr	r6, [pc, #128]	; (8022b94 <GUI__AllocAlphaBuffer+0xa0>)
 8022b14:	6832      	ldr	r2, [r6, #0]
 8022b16:	2500      	movs	r5, #0
 8022b18:	b31a      	cbz	r2, 8022b62 <GUI__AllocAlphaBuffer+0x6e>
 8022b1a:	4e1f      	ldr	r6, [pc, #124]	; (8022b98 <GUI__AllocAlphaBuffer+0xa4>)
 8022b1c:	6833      	ldr	r3, [r6, #0]
 8022b1e:	b1bb      	cbz	r3, 8022b50 <GUI__AllocAlphaBuffer+0x5c>
 8022b20:	b117      	cbz	r7, 8022b28 <GUI__AllocAlphaBuffer+0x34>
 8022b22:	4e1e      	ldr	r6, [pc, #120]	; (8022b9c <GUI__AllocAlphaBuffer+0xa8>)
 8022b24:	6833      	ldr	r3, [r6, #0]
 8022b26:	b32b      	cbz	r3, 8022b74 <GUI__AllocAlphaBuffer+0x80>
 8022b28:	4628      	mov	r0, r5
 8022b2a:	b003      	add	sp, #12
 8022b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b2e:	4b16      	ldr	r3, [pc, #88]	; (8022b88 <GUI__AllocAlphaBuffer+0x94>)
 8022b30:	681a      	ldr	r2, [r3, #0]
 8022b32:	af01      	add	r7, sp, #4
 8022b34:	2a00      	cmp	r2, #0
 8022b36:	d1e4      	bne.n	8022b02 <GUI__AllocAlphaBuffer+0xe>
 8022b38:	4819      	ldr	r0, [pc, #100]	; (8022ba0 <GUI__AllocAlphaBuffer+0xac>)
 8022b3a:	4a1a      	ldr	r2, [pc, #104]	; (8022ba4 <GUI__AllocAlphaBuffer+0xb0>)
 8022b3c:	6002      	str	r2, [r0, #0]
 8022b3e:	2201      	movs	r2, #1
 8022b40:	601a      	str	r2, [r3, #0]
 8022b42:	f001 fac9 	bl	80240d8 <GUI__RegisterExit>
 8022b46:	e7dc      	b.n	8022b02 <GUI__AllocAlphaBuffer+0xe>
 8022b48:	f7fe fdde 	bl	8021708 <LCD_GetVXSizeMax>
 8022b4c:	6020      	str	r0, [r4, #0]
 8022b4e:	e7e0      	b.n	8022b12 <GUI__AllocAlphaBuffer+0x1e>
 8022b50:	6820      	ldr	r0, [r4, #0]
 8022b52:	0080      	lsls	r0, r0, #2
 8022b54:	f002 fd8a 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8022b58:	2800      	cmp	r0, #0
 8022b5a:	bf08      	it	eq
 8022b5c:	2501      	moveq	r5, #1
 8022b5e:	6030      	str	r0, [r6, #0]
 8022b60:	e7de      	b.n	8022b20 <GUI__AllocAlphaBuffer+0x2c>
 8022b62:	0080      	lsls	r0, r0, #2
 8022b64:	f002 fd82 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8022b68:	f1d0 0501 	rsbs	r5, r0, #1
 8022b6c:	6030      	str	r0, [r6, #0]
 8022b6e:	bf38      	it	cc
 8022b70:	2500      	movcc	r5, #0
 8022b72:	e7d2      	b.n	8022b1a <GUI__AllocAlphaBuffer+0x26>
 8022b74:	6820      	ldr	r0, [r4, #0]
 8022b76:	0080      	lsls	r0, r0, #2
 8022b78:	f002 fd78 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8022b7c:	2800      	cmp	r0, #0
 8022b7e:	bf08      	it	eq
 8022b80:	2501      	moveq	r5, #1
 8022b82:	6030      	str	r0, [r6, #0]
 8022b84:	e7d0      	b.n	8022b28 <GUI__AllocAlphaBuffer+0x34>
 8022b86:	bf00      	nop
 8022b88:	2002b1bc 	.word	0x2002b1bc
 8022b8c:	2002b1ac 	.word	0x2002b1ac
 8022b90:	2002cc2c 	.word	0x2002cc2c
 8022b94:	2002b1a4 	.word	0x2002b1a4
 8022b98:	2002b1a0 	.word	0x2002b1a0
 8022b9c:	2002b1a8 	.word	0x2002b1a8
 8022ba0:	2002b1b4 	.word	0x2002b1b4
 8022ba4:	08022811 	.word	0x08022811

08022ba8 <GUI_SetFuncDrawAlpha>:
 8022ba8:	b410      	push	{r4}
 8022baa:	b160      	cbz	r0, 8022bc6 <GUI_SetFuncDrawAlpha+0x1e>
 8022bac:	b141      	cbz	r1, 8022bc0 <GUI_SetFuncDrawAlpha+0x18>
 8022bae:	4604      	mov	r4, r0
 8022bb0:	2000      	movs	r0, #0
 8022bb2:	4a07      	ldr	r2, [pc, #28]	; (8022bd0 <GUI_SetFuncDrawAlpha+0x28>)
 8022bb4:	4b07      	ldr	r3, [pc, #28]	; (8022bd4 <GUI_SetFuncDrawAlpha+0x2c>)
 8022bb6:	6011      	str	r1, [r2, #0]
 8022bb8:	601c      	str	r4, [r3, #0]
 8022bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022bbe:	4770      	bx	lr
 8022bc0:	460c      	mov	r4, r1
 8022bc2:	2001      	movs	r0, #1
 8022bc4:	e7f5      	b.n	8022bb2 <GUI_SetFuncDrawAlpha+0xa>
 8022bc6:	4601      	mov	r1, r0
 8022bc8:	4604      	mov	r4, r0
 8022bca:	2001      	movs	r0, #1
 8022bcc:	e7f1      	b.n	8022bb2 <GUI_SetFuncDrawAlpha+0xa>
 8022bce:	bf00      	nop
 8022bd0:	2002cbc8 	.word	0x2002cbc8
 8022bd4:	2002cbcc 	.word	0x2002cbcc

08022bd8 <GUI_SignalEvent>:
 8022bd8:	b508      	push	{r3, lr}
 8022bda:	4b02      	ldr	r3, [pc, #8]	; (8022be4 <GUI_SignalEvent+0xc>)
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	b103      	cbz	r3, 8022be2 <GUI_SignalEvent+0xa>
 8022be0:	4798      	blx	r3
 8022be2:	bd08      	pop	{r3, pc}
 8022be4:	2002b1c0 	.word	0x2002b1c0

08022be8 <GUI_UC_GetCharSize>:
 8022be8:	b510      	push	{r4, lr}
 8022bea:	4604      	mov	r4, r0
 8022bec:	f000 fafe 	bl	80231ec <GUI_Lock>
 8022bf0:	4b04      	ldr	r3, [pc, #16]	; (8022c04 <GUI_UC_GetCharSize+0x1c>)
 8022bf2:	681b      	ldr	r3, [r3, #0]
 8022bf4:	4620      	mov	r0, r4
 8022bf6:	685b      	ldr	r3, [r3, #4]
 8022bf8:	4798      	blx	r3
 8022bfa:	4604      	mov	r4, r0
 8022bfc:	f000 faec 	bl	80231d8 <GUI_Unlock>
 8022c00:	4620      	mov	r0, r4
 8022c02:	bd10      	pop	{r4, pc}
 8022c04:	2002cc1c 	.word	0x2002cc1c

08022c08 <GUI_UC_GetCharCode>:
 8022c08:	b510      	push	{r4, lr}
 8022c0a:	4604      	mov	r4, r0
 8022c0c:	f000 faee 	bl	80231ec <GUI_Lock>
 8022c10:	4b04      	ldr	r3, [pc, #16]	; (8022c24 <GUI_UC_GetCharCode+0x1c>)
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	4620      	mov	r0, r4
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	4798      	blx	r3
 8022c1a:	4604      	mov	r4, r0
 8022c1c:	f000 fadc 	bl	80231d8 <GUI_Unlock>
 8022c20:	4620      	mov	r0, r4
 8022c22:	bd10      	pop	{r4, pc}
 8022c24:	2002cc1c 	.word	0x2002cc1c

08022c28 <GUI_UC_Encode>:
 8022c28:	b538      	push	{r3, r4, r5, lr}
 8022c2a:	4605      	mov	r5, r0
 8022c2c:	460c      	mov	r4, r1
 8022c2e:	f000 fadd 	bl	80231ec <GUI_Lock>
 8022c32:	4b05      	ldr	r3, [pc, #20]	; (8022c48 <GUI_UC_Encode+0x20>)
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	4621      	mov	r1, r4
 8022c38:	68db      	ldr	r3, [r3, #12]
 8022c3a:	4628      	mov	r0, r5
 8022c3c:	4798      	blx	r3
 8022c3e:	4604      	mov	r4, r0
 8022c40:	f000 faca 	bl	80231d8 <GUI_Unlock>
 8022c44:	4620      	mov	r0, r4
 8022c46:	bd38      	pop	{r3, r4, r5, pc}
 8022c48:	2002cc1c 	.word	0x2002cc1c

08022c4c <GUI_UC__CalcSizeOfChar>:
 8022c4c:	b508      	push	{r3, lr}
 8022c4e:	4b02      	ldr	r3, [pc, #8]	; (8022c58 <GUI_UC__CalcSizeOfChar+0xc>)
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	689b      	ldr	r3, [r3, #8]
 8022c54:	4798      	blx	r3
 8022c56:	bd08      	pop	{r3, pc}
 8022c58:	2002cc1c 	.word	0x2002cc1c

08022c5c <GUI_UC__GetCharCodeInc>:
 8022c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c5e:	4e08      	ldr	r6, [pc, #32]	; (8022c80 <GUI_UC__GetCharCodeInc+0x24>)
 8022c60:	6804      	ldr	r4, [r0, #0]
 8022c62:	6833      	ldr	r3, [r6, #0]
 8022c64:	4605      	mov	r5, r0
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	4620      	mov	r0, r4
 8022c6a:	4798      	blx	r3
 8022c6c:	6833      	ldr	r3, [r6, #0]
 8022c6e:	4607      	mov	r7, r0
 8022c70:	685b      	ldr	r3, [r3, #4]
 8022c72:	4620      	mov	r0, r4
 8022c74:	4798      	blx	r3
 8022c76:	4420      	add	r0, r4
 8022c78:	6028      	str	r0, [r5, #0]
 8022c7a:	4638      	mov	r0, r7
 8022c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c7e:	bf00      	nop
 8022c80:	2002cc1c 	.word	0x2002cc1c

08022c84 <GUI_UC__NumChars2NumBytes>:
 8022c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c86:	4604      	mov	r4, r0
 8022c88:	b161      	cbz	r1, 8022ca4 <GUI_UC__NumChars2NumBytes+0x20>
 8022c8a:	4f07      	ldr	r7, [pc, #28]	; (8022ca8 <GUI_UC__NumChars2NumBytes+0x24>)
 8022c8c:	460d      	mov	r5, r1
 8022c8e:	2600      	movs	r6, #0
 8022c90:	683b      	ldr	r3, [r7, #0]
 8022c92:	4620      	mov	r0, r4
 8022c94:	685b      	ldr	r3, [r3, #4]
 8022c96:	4798      	blx	r3
 8022c98:	3d01      	subs	r5, #1
 8022c9a:	4404      	add	r4, r0
 8022c9c:	4406      	add	r6, r0
 8022c9e:	d1f7      	bne.n	8022c90 <GUI_UC__NumChars2NumBytes+0xc>
 8022ca0:	4630      	mov	r0, r6
 8022ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ca4:	460e      	mov	r6, r1
 8022ca6:	e7fb      	b.n	8022ca0 <GUI_UC__NumChars2NumBytes+0x1c>
 8022ca8:	2002cc1c 	.word	0x2002cc1c

08022cac <GUI_UC__NumBytes2NumChars>:
 8022cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cb0:	1e0f      	subs	r7, r1, #0
 8022cb2:	4606      	mov	r6, r0
 8022cb4:	dd10      	ble.n	8022cd8 <GUI_UC__NumBytes2NumChars+0x2c>
 8022cb6:	2400      	movs	r4, #0
 8022cb8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8022cdc <GUI_UC__NumBytes2NumChars+0x30>
 8022cbc:	4625      	mov	r5, r4
 8022cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8022cc2:	1930      	adds	r0, r6, r4
 8022cc4:	685b      	ldr	r3, [r3, #4]
 8022cc6:	4798      	blx	r3
 8022cc8:	4404      	add	r4, r0
 8022cca:	42a7      	cmp	r7, r4
 8022ccc:	f105 0501 	add.w	r5, r5, #1
 8022cd0:	dcf5      	bgt.n	8022cbe <GUI_UC__NumBytes2NumChars+0x12>
 8022cd2:	4628      	mov	r0, r5
 8022cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022cd8:	2500      	movs	r5, #0
 8022cda:	e7fa      	b.n	8022cd2 <GUI_UC__NumBytes2NumChars+0x26>
 8022cdc:	2002cc1c 	.word	0x2002cc1c

08022ce0 <GUI__GetNumChars>:
 8022ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ce2:	4604      	mov	r4, r0
 8022ce4:	b188      	cbz	r0, 8022d0a <GUI__GetNumChars+0x2a>
 8022ce6:	2600      	movs	r6, #0
 8022ce8:	4d09      	ldr	r5, [pc, #36]	; (8022d10 <GUI__GetNumChars+0x30>)
 8022cea:	e000      	b.n	8022cee <GUI__GetNumChars+0xe>
 8022cec:	3601      	adds	r6, #1
 8022cee:	682b      	ldr	r3, [r5, #0]
 8022cf0:	4620      	mov	r0, r4
 8022cf2:	681b      	ldr	r3, [r3, #0]
 8022cf4:	4798      	blx	r3
 8022cf6:	682b      	ldr	r3, [r5, #0]
 8022cf8:	4607      	mov	r7, r0
 8022cfa:	685b      	ldr	r3, [r3, #4]
 8022cfc:	4620      	mov	r0, r4
 8022cfe:	4798      	blx	r3
 8022d00:	4404      	add	r4, r0
 8022d02:	2f00      	cmp	r7, #0
 8022d04:	d1f2      	bne.n	8022cec <GUI__GetNumChars+0xc>
 8022d06:	4630      	mov	r0, r6
 8022d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d0a:	4606      	mov	r6, r0
 8022d0c:	4630      	mov	r0, r6
 8022d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d10:	2002cc1c 	.word	0x2002cc1c

08022d14 <_OnExit>:
 8022d14:	4803      	ldr	r0, [pc, #12]	; (8022d24 <_OnExit+0x10>)
 8022d16:	4904      	ldr	r1, [pc, #16]	; (8022d28 <_OnExit+0x14>)
 8022d18:	4a04      	ldr	r2, [pc, #16]	; (8022d2c <_OnExit+0x18>)
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	6003      	str	r3, [r0, #0]
 8022d1e:	600b      	str	r3, [r1, #0]
 8022d20:	6013      	str	r3, [r2, #0]
 8022d22:	4770      	bx	lr
 8022d24:	2002b1c4 	.word	0x2002b1c4
 8022d28:	2002b1c8 	.word	0x2002b1c8
 8022d2c:	2002b1d4 	.word	0x2002b1d4

08022d30 <GUI_TIMER_Exec>:
 8022d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d34:	4e21      	ldr	r6, [pc, #132]	; (8022dbc <GUI_TIMER_Exec+0x8c>)
 8022d36:	b085      	sub	sp, #20
 8022d38:	f000 fa58 	bl	80231ec <GUI_Lock>
 8022d3c:	f8d6 8000 	ldr.w	r8, [r6]
 8022d40:	4643      	mov	r3, r8
 8022d42:	4634      	mov	r4, r6
 8022d44:	2700      	movs	r7, #0
 8022d46:	b31b      	cbz	r3, 8022d90 <GUI_TIMER_Exec+0x60>
 8022d48:	f000 f9f8 	bl	802313c <GUI_GetTime>
 8022d4c:	4605      	mov	r5, r0
 8022d4e:	6830      	ldr	r0, [r6, #0]
 8022d50:	f002 fdcc 	bl	80258ec <GUI_ALLOC_LockH>
 8022d54:	6942      	ldr	r2, [r0, #20]
 8022d56:	9000      	str	r0, [sp, #0]
 8022d58:	1b52      	subs	r2, r2, r5
 8022d5a:	2a00      	cmp	r2, #0
 8022d5c:	4603      	mov	r3, r0
 8022d5e:	dc1d      	bgt.n	8022d9c <GUI_TIMER_Exec+0x6c>
 8022d60:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8022d64:	6821      	ldr	r1, [r4, #0]
 8022d66:	6902      	ldr	r2, [r0, #16]
 8022d68:	9501      	str	r5, [sp, #4]
 8022d6a:	4668      	mov	r0, sp
 8022d6c:	9103      	str	r1, [sp, #12]
 8022d6e:	9202      	str	r2, [sp, #8]
 8022d70:	f8c4 9000 	str.w	r9, [r4]
 8022d74:	681d      	ldr	r5, [r3, #0]
 8022d76:	f002 fdcb 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022d7a:	a801      	add	r0, sp, #4
 8022d7c:	47a8      	blx	r5
 8022d7e:	f1b9 0f00 	cmp.w	r9, #0
 8022d82:	d005      	beq.n	8022d90 <GUI_TIMER_Exec+0x60>
 8022d84:	6823      	ldr	r3, [r4, #0]
 8022d86:	4543      	cmp	r3, r8
 8022d88:	d011      	beq.n	8022dae <GUI_TIMER_Exec+0x7e>
 8022d8a:	2701      	movs	r7, #1
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	d1db      	bne.n	8022d48 <GUI_TIMER_Exec+0x18>
 8022d90:	f000 fa22 	bl	80231d8 <GUI_Unlock>
 8022d94:	4638      	mov	r0, r7
 8022d96:	b005      	add	sp, #20
 8022d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d9c:	4668      	mov	r0, sp
 8022d9e:	f002 fdb7 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022da2:	f000 fa19 	bl	80231d8 <GUI_Unlock>
 8022da6:	4638      	mov	r0, r7
 8022da8:	b005      	add	sp, #20
 8022daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dae:	f000 fa13 	bl	80231d8 <GUI_Unlock>
 8022db2:	2700      	movs	r7, #0
 8022db4:	4638      	mov	r0, r7
 8022db6:	b005      	add	sp, #20
 8022db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dbc:	2002b1c8 	.word	0x2002b1c8

08022dc0 <_Link>:
 8022dc0:	b570      	push	{r4, r5, r6, lr}
 8022dc2:	4c28      	ldr	r4, [pc, #160]	; (8022e64 <_Link+0xa4>)
 8022dc4:	b084      	sub	sp, #16
 8022dc6:	4606      	mov	r6, r0
 8022dc8:	f002 fd90 	bl	80258ec <GUI_ALLOC_LockH>
 8022dcc:	6823      	ldr	r3, [r4, #0]
 8022dce:	9001      	str	r0, [sp, #4]
 8022dd0:	b933      	cbnz	r3, 8022de0 <_Link+0x20>
 8022dd2:	6026      	str	r6, [r4, #0]
 8022dd4:	6043      	str	r3, [r0, #4]
 8022dd6:	a801      	add	r0, sp, #4
 8022dd8:	f002 fd9a 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022ddc:	b004      	add	sp, #16
 8022dde:	bd70      	pop	{r4, r5, r6, pc}
 8022de0:	4618      	mov	r0, r3
 8022de2:	f002 fd83 	bl	80258ec <GUI_ALLOC_LockH>
 8022de6:	ab04      	add	r3, sp, #16
 8022de8:	6945      	ldr	r5, [r0, #20]
 8022dea:	f843 0d10 	str.w	r0, [r3, #-16]!
 8022dee:	4668      	mov	r0, sp
 8022df0:	f002 fd8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022df4:	9b01      	ldr	r3, [sp, #4]
 8022df6:	695a      	ldr	r2, [r3, #20]
 8022df8:	1b52      	subs	r2, r2, r5
 8022dfa:	2a00      	cmp	r2, #0
 8022dfc:	dd2e      	ble.n	8022e5c <_Link+0x9c>
 8022dfe:	6824      	ldr	r4, [r4, #0]
 8022e00:	e011      	b.n	8022e26 <_Link+0x66>
 8022e02:	f002 fd73 	bl	80258ec <GUI_ALLOC_LockH>
 8022e06:	4603      	mov	r3, r0
 8022e08:	a803      	add	r0, sp, #12
 8022e0a:	695d      	ldr	r5, [r3, #20]
 8022e0c:	9303      	str	r3, [sp, #12]
 8022e0e:	f002 fd7f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e12:	9b01      	ldr	r3, [sp, #4]
 8022e14:	695a      	ldr	r2, [r3, #20]
 8022e16:	1b52      	subs	r2, r2, r5
 8022e18:	2a00      	cmp	r2, #0
 8022e1a:	dd14      	ble.n	8022e46 <_Link+0x86>
 8022e1c:	9b02      	ldr	r3, [sp, #8]
 8022e1e:	a802      	add	r0, sp, #8
 8022e20:	685c      	ldr	r4, [r3, #4]
 8022e22:	f002 fd75 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e26:	4620      	mov	r0, r4
 8022e28:	f002 fd60 	bl	80258ec <GUI_ALLOC_LockH>
 8022e2c:	6844      	ldr	r4, [r0, #4]
 8022e2e:	9002      	str	r0, [sp, #8]
 8022e30:	4603      	mov	r3, r0
 8022e32:	4620      	mov	r0, r4
 8022e34:	2c00      	cmp	r4, #0
 8022e36:	d1e4      	bne.n	8022e02 <_Link+0x42>
 8022e38:	9a01      	ldr	r2, [sp, #4]
 8022e3a:	a802      	add	r0, sp, #8
 8022e3c:	6054      	str	r4, [r2, #4]
 8022e3e:	605e      	str	r6, [r3, #4]
 8022e40:	f002 fd66 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e44:	e7c7      	b.n	8022dd6 <_Link+0x16>
 8022e46:	9a02      	ldr	r2, [sp, #8]
 8022e48:	605c      	str	r4, [r3, #4]
 8022e4a:	a802      	add	r0, sp, #8
 8022e4c:	6056      	str	r6, [r2, #4]
 8022e4e:	f002 fd5f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e52:	a801      	add	r0, sp, #4
 8022e54:	f002 fd5c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e58:	b004      	add	sp, #16
 8022e5a:	bd70      	pop	{r4, r5, r6, pc}
 8022e5c:	6822      	ldr	r2, [r4, #0]
 8022e5e:	605a      	str	r2, [r3, #4]
 8022e60:	6026      	str	r6, [r4, #0]
 8022e62:	e7b8      	b.n	8022dd6 <_Link+0x16>
 8022e64:	2002b1c8 	.word	0x2002b1c8

08022e68 <GUI_TIMER__GetFirstTimer>:
 8022e68:	b530      	push	{r4, r5, lr}
 8022e6a:	4b0a      	ldr	r3, [pc, #40]	; (8022e94 <GUI_TIMER__GetFirstTimer+0x2c>)
 8022e6c:	681c      	ldr	r4, [r3, #0]
 8022e6e:	2300      	movs	r3, #0
 8022e70:	b083      	sub	sp, #12
 8022e72:	4605      	mov	r5, r0
 8022e74:	6003      	str	r3, [r0, #0]
 8022e76:	b154      	cbz	r4, 8022e8e <GUI_TIMER__GetFirstTimer+0x26>
 8022e78:	4620      	mov	r0, r4
 8022e7a:	f002 fd37 	bl	80258ec <GUI_ALLOC_LockH>
 8022e7e:	ab02      	add	r3, sp, #8
 8022e80:	6902      	ldr	r2, [r0, #16]
 8022e82:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022e86:	602a      	str	r2, [r5, #0]
 8022e88:	4618      	mov	r0, r3
 8022e8a:	f002 fd41 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022e8e:	4620      	mov	r0, r4
 8022e90:	b003      	add	sp, #12
 8022e92:	bd30      	pop	{r4, r5, pc}
 8022e94:	2002b1c4 	.word	0x2002b1c4

08022e98 <GUI_TIMER__GetNextTimerLin>:
 8022e98:	b570      	push	{r4, r5, r6, lr}
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	b082      	sub	sp, #8
 8022e9e:	460d      	mov	r5, r1
 8022ea0:	600b      	str	r3, [r1, #0]
 8022ea2:	4604      	mov	r4, r0
 8022ea4:	b910      	cbnz	r0, 8022eac <GUI_TIMER__GetNextTimerLin+0x14>
 8022ea6:	4620      	mov	r0, r4
 8022ea8:	b002      	add	sp, #8
 8022eaa:	bd70      	pop	{r4, r5, r6, pc}
 8022eac:	f002 fd1e 	bl	80258ec <GUI_ALLOC_LockH>
 8022eb0:	6884      	ldr	r4, [r0, #8]
 8022eb2:	9001      	str	r0, [sp, #4]
 8022eb4:	ae01      	add	r6, sp, #4
 8022eb6:	b92c      	cbnz	r4, 8022ec4 <GUI_TIMER__GetNextTimerLin+0x2c>
 8022eb8:	4630      	mov	r0, r6
 8022eba:	f002 fd29 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022ebe:	4620      	mov	r0, r4
 8022ec0:	b002      	add	sp, #8
 8022ec2:	bd70      	pop	{r4, r5, r6, pc}
 8022ec4:	4630      	mov	r0, r6
 8022ec6:	f002 fd23 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022eca:	4620      	mov	r0, r4
 8022ecc:	f002 fd0e 	bl	80258ec <GUI_ALLOC_LockH>
 8022ed0:	6903      	ldr	r3, [r0, #16]
 8022ed2:	9001      	str	r0, [sp, #4]
 8022ed4:	602b      	str	r3, [r5, #0]
 8022ed6:	e7ef      	b.n	8022eb8 <GUI_TIMER__GetNextTimerLin+0x20>

08022ed8 <GUI_TIMER_Create>:
 8022ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022edc:	b083      	sub	sp, #12
 8022ede:	4681      	mov	r9, r0
 8022ee0:	460e      	mov	r6, r1
 8022ee2:	4690      	mov	r8, r2
 8022ee4:	461f      	mov	r7, r3
 8022ee6:	f000 f981 	bl	80231ec <GUI_Lock>
 8022eea:	201c      	movs	r0, #28
 8022eec:	f002 fe86 	bl	8025bfc <GUI_ALLOC_AllocZero>
 8022ef0:	4604      	mov	r4, r0
 8022ef2:	b928      	cbnz	r0, 8022f00 <GUI_TIMER_Create+0x28>
 8022ef4:	f000 f970 	bl	80231d8 <GUI_Unlock>
 8022ef8:	4620      	mov	r0, r4
 8022efa:	b003      	add	sp, #12
 8022efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f00:	4b1a      	ldr	r3, [pc, #104]	; (8022f6c <GUI_TIMER_Create+0x94>)
 8022f02:	4a1b      	ldr	r2, [pc, #108]	; (8022f70 <GUI_TIMER_Create+0x98>)
 8022f04:	601a      	str	r2, [r3, #0]
 8022f06:	f002 fcf1 	bl	80258ec <GUI_ALLOC_LockH>
 8022f0a:	9000      	str	r0, [sp, #0]
 8022f0c:	b34e      	cbz	r6, 8022f62 <GUI_TIMER_Create+0x8a>
 8022f0e:	4605      	mov	r5, r0
 8022f10:	616e      	str	r6, [r5, #20]
 8022f12:	f8c5 9000 	str.w	r9, [r5]
 8022f16:	f8c5 8010 	str.w	r8, [r5, #16]
 8022f1a:	81af      	strh	r7, [r5, #12]
 8022f1c:	4668      	mov	r0, sp
 8022f1e:	f002 fcf7 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022f22:	4620      	mov	r0, r4
 8022f24:	f7ff ff4c 	bl	8022dc0 <_Link>
 8022f28:	4b12      	ldr	r3, [pc, #72]	; (8022f74 <GUI_TIMER_Create+0x9c>)
 8022f2a:	681a      	ldr	r2, [r3, #0]
 8022f2c:	b932      	cbnz	r2, 8022f3c <GUI_TIMER_Create+0x64>
 8022f2e:	4812      	ldr	r0, [pc, #72]	; (8022f78 <GUI_TIMER_Create+0xa0>)
 8022f30:	4a12      	ldr	r2, [pc, #72]	; (8022f7c <GUI_TIMER_Create+0xa4>)
 8022f32:	6002      	str	r2, [r0, #0]
 8022f34:	2201      	movs	r2, #1
 8022f36:	601a      	str	r2, [r3, #0]
 8022f38:	f001 f8ce 	bl	80240d8 <GUI__RegisterExit>
 8022f3c:	4620      	mov	r0, r4
 8022f3e:	f002 fcd5 	bl	80258ec <GUI_ALLOC_LockH>
 8022f42:	ab02      	add	r3, sp, #8
 8022f44:	4a0e      	ldr	r2, [pc, #56]	; (8022f80 <GUI_TIMER_Create+0xa8>)
 8022f46:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022f4a:	6811      	ldr	r1, [r2, #0]
 8022f4c:	6081      	str	r1, [r0, #8]
 8022f4e:	4618      	mov	r0, r3
 8022f50:	6014      	str	r4, [r2, #0]
 8022f52:	f002 fcdd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022f56:	f000 f93f 	bl	80231d8 <GUI_Unlock>
 8022f5a:	4620      	mov	r0, r4
 8022f5c:	b003      	add	sp, #12
 8022f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f62:	f000 f8eb 	bl	802313c <GUI_GetTime>
 8022f66:	9d00      	ldr	r5, [sp, #0]
 8022f68:	4606      	mov	r6, r0
 8022f6a:	e7d1      	b.n	8022f10 <GUI_TIMER_Create+0x38>
 8022f6c:	2002cbf4 	.word	0x2002cbf4
 8022f70:	08022d31 	.word	0x08022d31
 8022f74:	2002b1d4 	.word	0x2002b1d4
 8022f78:	2002b1cc 	.word	0x2002b1cc
 8022f7c:	08022d15 	.word	0x08022d15
 8022f80:	2002b1c4 	.word	0x2002b1c4

08022f84 <GUI_TIMER_Delete>:
 8022f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f86:	4605      	mov	r5, r0
 8022f88:	b083      	sub	sp, #12
 8022f8a:	b908      	cbnz	r0, 8022f90 <GUI_TIMER_Delete+0xc>
 8022f8c:	b003      	add	sp, #12
 8022f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f90:	4e2c      	ldr	r6, [pc, #176]	; (8023044 <GUI_TIMER_Delete+0xc0>)
 8022f92:	f000 f92b 	bl	80231ec <GUI_Lock>
 8022f96:	6834      	ldr	r4, [r6, #0]
 8022f98:	42a5      	cmp	r5, r4
 8022f9a:	d040      	beq.n	802301e <GUI_TIMER_Delete+0x9a>
 8022f9c:	b15c      	cbz	r4, 8022fb6 <GUI_TIMER_Delete+0x32>
 8022f9e:	4620      	mov	r0, r4
 8022fa0:	f002 fca4 	bl	80258ec <GUI_ALLOC_LockH>
 8022fa4:	6884      	ldr	r4, [r0, #8]
 8022fa6:	9000      	str	r0, [sp, #0]
 8022fa8:	42a5      	cmp	r5, r4
 8022faa:	d02a      	beq.n	8023002 <GUI_TIMER_Delete+0x7e>
 8022fac:	4668      	mov	r0, sp
 8022fae:	f002 fcaf 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022fb2:	2c00      	cmp	r4, #0
 8022fb4:	d1f3      	bne.n	8022f9e <GUI_TIMER_Delete+0x1a>
 8022fb6:	4628      	mov	r0, r5
 8022fb8:	f002 fc98 	bl	80258ec <GUI_ALLOC_LockH>
 8022fbc:	4b22      	ldr	r3, [pc, #136]	; (8023048 <GUI_TIMER_Delete+0xc4>)
 8022fbe:	9000      	str	r0, [sp, #0]
 8022fc0:	681c      	ldr	r4, [r3, #0]
 8022fc2:	42a5      	cmp	r5, r4
 8022fc4:	d037      	beq.n	8023036 <GUI_TIMER_Delete+0xb2>
 8022fc6:	af01      	add	r7, sp, #4
 8022fc8:	b924      	cbnz	r4, 8022fd4 <GUI_TIMER_Delete+0x50>
 8022fca:	e010      	b.n	8022fee <GUI_TIMER_Delete+0x6a>
 8022fcc:	4638      	mov	r0, r7
 8022fce:	f002 fc9f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022fd2:	b164      	cbz	r4, 8022fee <GUI_TIMER_Delete+0x6a>
 8022fd4:	4620      	mov	r0, r4
 8022fd6:	f002 fc89 	bl	80258ec <GUI_ALLOC_LockH>
 8022fda:	6844      	ldr	r4, [r0, #4]
 8022fdc:	9001      	str	r0, [sp, #4]
 8022fde:	42a5      	cmp	r5, r4
 8022fe0:	d1f4      	bne.n	8022fcc <GUI_TIMER_Delete+0x48>
 8022fe2:	9a00      	ldr	r2, [sp, #0]
 8022fe4:	6852      	ldr	r2, [r2, #4]
 8022fe6:	6042      	str	r2, [r0, #4]
 8022fe8:	4638      	mov	r0, r7
 8022fea:	f002 fc91 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022fee:	4668      	mov	r0, sp
 8022ff0:	f002 fc8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8022ff4:	4628      	mov	r0, r5
 8022ff6:	f002 fd8b 	bl	8025b10 <GUI_ALLOC_Free>
 8022ffa:	f000 f8ed 	bl	80231d8 <GUI_Unlock>
 8022ffe:	b003      	add	sp, #12
 8023000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023002:	4628      	mov	r0, r5
 8023004:	f002 fc72 	bl	80258ec <GUI_ALLOC_LockH>
 8023008:	9b00      	ldr	r3, [sp, #0]
 802300a:	6882      	ldr	r2, [r0, #8]
 802300c:	9001      	str	r0, [sp, #4]
 802300e:	a801      	add	r0, sp, #4
 8023010:	609a      	str	r2, [r3, #8]
 8023012:	f002 fc7d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8023016:	4668      	mov	r0, sp
 8023018:	f002 fc7a 	bl	8025910 <GUI_ALLOC_UnlockH>
 802301c:	e7cb      	b.n	8022fb6 <GUI_TIMER_Delete+0x32>
 802301e:	4628      	mov	r0, r5
 8023020:	f002 fc64 	bl	80258ec <GUI_ALLOC_LockH>
 8023024:	af02      	add	r7, sp, #8
 8023026:	6883      	ldr	r3, [r0, #8]
 8023028:	f847 0d04 	str.w	r0, [r7, #-4]!
 802302c:	4638      	mov	r0, r7
 802302e:	6033      	str	r3, [r6, #0]
 8023030:	f002 fc6e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8023034:	e7bf      	b.n	8022fb6 <GUI_TIMER_Delete+0x32>
 8023036:	6842      	ldr	r2, [r0, #4]
 8023038:	601a      	str	r2, [r3, #0]
 802303a:	4668      	mov	r0, sp
 802303c:	f002 fc68 	bl	8025910 <GUI_ALLOC_UnlockH>
 8023040:	e7d8      	b.n	8022ff4 <GUI_TIMER_Delete+0x70>
 8023042:	bf00      	nop
 8023044:	2002b1c4 	.word	0x2002b1c4
 8023048:	2002b1c8 	.word	0x2002b1c8

0802304c <GUI_TIMER_SetPeriod>:
 802304c:	b530      	push	{r4, r5, lr}
 802304e:	4604      	mov	r4, r0
 8023050:	b083      	sub	sp, #12
 8023052:	460d      	mov	r5, r1
 8023054:	b168      	cbz	r0, 8023072 <GUI_TIMER_SetPeriod+0x26>
 8023056:	f000 f8c9 	bl	80231ec <GUI_Lock>
 802305a:	4620      	mov	r0, r4
 802305c:	f002 fc46 	bl	80258ec <GUI_ALLOC_LockH>
 8023060:	ab02      	add	r3, sp, #8
 8023062:	6185      	str	r5, [r0, #24]
 8023064:	f843 0d04 	str.w	r0, [r3, #-4]!
 8023068:	4618      	mov	r0, r3
 802306a:	f002 fc51 	bl	8025910 <GUI_ALLOC_UnlockH>
 802306e:	f000 f8b3 	bl	80231d8 <GUI_Unlock>
 8023072:	b003      	add	sp, #12
 8023074:	bd30      	pop	{r4, r5, pc}
 8023076:	bf00      	nop

08023078 <GUI_TIMER_Restart>:
 8023078:	b530      	push	{r4, r5, lr}
 802307a:	4605      	mov	r5, r0
 802307c:	b085      	sub	sp, #20
 802307e:	b908      	cbnz	r0, 8023084 <GUI_TIMER_Restart+0xc>
 8023080:	b005      	add	sp, #20
 8023082:	bd30      	pop	{r4, r5, pc}
 8023084:	f000 f8b2 	bl	80231ec <GUI_Lock>
 8023088:	4628      	mov	r0, r5
 802308a:	f002 fc2f 	bl	80258ec <GUI_ALLOC_LockH>
 802308e:	9001      	str	r0, [sp, #4]
 8023090:	f000 f854 	bl	802313c <GUI_GetTime>
 8023094:	ab04      	add	r3, sp, #16
 8023096:	f853 2d0c 	ldr.w	r2, [r3, #-12]!
 802309a:	6991      	ldr	r1, [r2, #24]
 802309c:	4408      	add	r0, r1
 802309e:	6150      	str	r0, [r2, #20]
 80230a0:	4618      	mov	r0, r3
 80230a2:	f002 fc35 	bl	8025910 <GUI_ALLOC_UnlockH>
 80230a6:	4628      	mov	r0, r5
 80230a8:	f002 fc20 	bl	80258ec <GUI_ALLOC_LockH>
 80230ac:	4b13      	ldr	r3, [pc, #76]	; (80230fc <GUI_TIMER_Restart+0x84>)
 80230ae:	9002      	str	r0, [sp, #8]
 80230b0:	681c      	ldr	r4, [r3, #0]
 80230b2:	42a5      	cmp	r5, r4
 80230b4:	d01b      	beq.n	80230ee <GUI_TIMER_Restart+0x76>
 80230b6:	b184      	cbz	r4, 80230da <GUI_TIMER_Restart+0x62>
 80230b8:	4620      	mov	r0, r4
 80230ba:	f002 fc17 	bl	80258ec <GUI_ALLOC_LockH>
 80230be:	6844      	ldr	r4, [r0, #4]
 80230c0:	9003      	str	r0, [sp, #12]
 80230c2:	42a5      	cmp	r5, r4
 80230c4:	d003      	beq.n	80230ce <GUI_TIMER_Restart+0x56>
 80230c6:	a803      	add	r0, sp, #12
 80230c8:	f002 fc22 	bl	8025910 <GUI_ALLOC_UnlockH>
 80230cc:	e7f3      	b.n	80230b6 <GUI_TIMER_Restart+0x3e>
 80230ce:	9b02      	ldr	r3, [sp, #8]
 80230d0:	685b      	ldr	r3, [r3, #4]
 80230d2:	6043      	str	r3, [r0, #4]
 80230d4:	a803      	add	r0, sp, #12
 80230d6:	f002 fc1b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80230da:	a802      	add	r0, sp, #8
 80230dc:	f002 fc18 	bl	8025910 <GUI_ALLOC_UnlockH>
 80230e0:	4628      	mov	r0, r5
 80230e2:	f7ff fe6d 	bl	8022dc0 <_Link>
 80230e6:	f000 f877 	bl	80231d8 <GUI_Unlock>
 80230ea:	b005      	add	sp, #20
 80230ec:	bd30      	pop	{r4, r5, pc}
 80230ee:	6842      	ldr	r2, [r0, #4]
 80230f0:	601a      	str	r2, [r3, #0]
 80230f2:	a802      	add	r0, sp, #8
 80230f4:	f002 fc0c 	bl	8025910 <GUI_ALLOC_UnlockH>
 80230f8:	e7f2      	b.n	80230e0 <GUI_TIMER_Restart+0x68>
 80230fa:	bf00      	nop
 80230fc:	2002b1c8 	.word	0x2002b1c8

08023100 <GUI_TIMER_GetFlag>:
 8023100:	b530      	push	{r4, r5, lr}
 8023102:	4604      	mov	r4, r0
 8023104:	b083      	sub	sp, #12
 8023106:	460d      	mov	r5, r1
 8023108:	b918      	cbnz	r0, 8023112 <GUI_TIMER_GetFlag+0x12>
 802310a:	2401      	movs	r4, #1
 802310c:	4620      	mov	r0, r4
 802310e:	b003      	add	sp, #12
 8023110:	bd30      	pop	{r4, r5, pc}
 8023112:	f000 f86b 	bl	80231ec <GUI_Lock>
 8023116:	4620      	mov	r0, r4
 8023118:	f002 fbe8 	bl	80258ec <GUI_ALLOC_LockH>
 802311c:	ab02      	add	r3, sp, #8
 802311e:	8982      	ldrh	r2, [r0, #12]
 8023120:	f843 0d04 	str.w	r0, [r3, #-4]!
 8023124:	4215      	tst	r5, r2
 8023126:	4618      	mov	r0, r3
 8023128:	bf0c      	ite	eq
 802312a:	2400      	moveq	r4, #0
 802312c:	2401      	movne	r4, #1
 802312e:	f002 fbef 	bl	8025910 <GUI_ALLOC_UnlockH>
 8023132:	f000 f851 	bl	80231d8 <GUI_Unlock>
 8023136:	4620      	mov	r0, r4
 8023138:	b003      	add	sp, #12
 802313a:	bd30      	pop	{r4, r5, pc}

0802313c <GUI_GetTime>:
 802313c:	f7ed bbe0 	b.w	8010900 <GUI_X_GetTime>

08023140 <GUI_Delay>:
 8023140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023144:	4607      	mov	r7, r0
 8023146:	f7ed fbdb 	bl	8010900 <GUI_X_GetTime>
 802314a:	4407      	add	r7, r0
 802314c:	f7ed fbd8 	bl	8010900 <GUI_X_GetTime>
 8023150:	1a3c      	subs	r4, r7, r0
 8023152:	2c00      	cmp	r4, #0
 8023154:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80231bc <GUI_Delay+0x7c>
 8023158:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80231c0 <GUI_Delay+0x80>
 802315c:	dd23      	ble.n	80231a6 <GUI_Delay+0x66>
 802315e:	f001 fa5d 	bl	802461c <GUI_Exec>
 8023162:	f8d9 0000 	ldr.w	r0, [r9]
 8023166:	4284      	cmp	r4, r0
 8023168:	bfb4      	ite	lt
 802316a:	4626      	movlt	r6, r4
 802316c:	4606      	movge	r6, r0
 802316e:	f000 f83d 	bl	80231ec <GUI_Lock>
 8023172:	f8d8 4000 	ldr.w	r4, [r8]
 8023176:	f002 fca7 	bl	8025ac8 <GUI_ALLOC_Lock>
 802317a:	b1b4      	cbz	r4, 80231aa <GUI_Delay+0x6a>
 802317c:	4625      	mov	r5, r4
 802317e:	f000 f82b 	bl	80231d8 <GUI_Unlock>
 8023182:	3d01      	subs	r5, #1
 8023184:	d1fb      	bne.n	802317e <GUI_Delay+0x3e>
 8023186:	4630      	mov	r0, r6
 8023188:	f7ed fbc1 	bl	801090e <GUI_X_Delay>
 802318c:	f000 f82e 	bl	80231ec <GUI_Lock>
 8023190:	3c01      	subs	r4, #1
 8023192:	d1fb      	bne.n	802318c <GUI_Delay+0x4c>
 8023194:	f002 fca0 	bl	8025ad8 <GUI_ALLOC_Unlock>
 8023198:	f000 f81e 	bl	80231d8 <GUI_Unlock>
 802319c:	f7ed fbb0 	bl	8010900 <GUI_X_GetTime>
 80231a0:	1a3c      	subs	r4, r7, r0
 80231a2:	2c00      	cmp	r4, #0
 80231a4:	dcdb      	bgt.n	802315e <GUI_Delay+0x1e>
 80231a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231aa:	4630      	mov	r0, r6
 80231ac:	f7ed fbaf 	bl	801090e <GUI_X_Delay>
 80231b0:	f002 fc92 	bl	8025ad8 <GUI_ALLOC_Unlock>
 80231b4:	f000 f810 	bl	80231d8 <GUI_Unlock>
 80231b8:	e7f0      	b.n	802319c <GUI_Delay+0x5c>
 80231ba:	bf00      	nop
 80231bc:	2000026c 	.word	0x2000026c
 80231c0:	2002b1dc 	.word	0x2002b1dc

080231c4 <_OnExit>:
 80231c4:	b510      	push	{r4, lr}
 80231c6:	4c03      	ldr	r4, [pc, #12]	; (80231d4 <_OnExit+0x10>)
 80231c8:	6820      	ldr	r0, [r4, #0]
 80231ca:	f002 fa45 	bl	8025658 <GUI_ALLOC_FreeFixedBlock>
 80231ce:	2300      	movs	r3, #0
 80231d0:	6023      	str	r3, [r4, #0]
 80231d2:	bd10      	pop	{r4, pc}
 80231d4:	2002b1d8 	.word	0x2002b1d8

080231d8 <GUI_Unlock>:
 80231d8:	4a03      	ldr	r2, [pc, #12]	; (80231e8 <GUI_Unlock+0x10>)
 80231da:	6813      	ldr	r3, [r2, #0]
 80231dc:	3b01      	subs	r3, #1
 80231de:	6013      	str	r3, [r2, #0]
 80231e0:	b103      	cbz	r3, 80231e4 <GUI_Unlock+0xc>
 80231e2:	4770      	bx	lr
 80231e4:	f7ed bbc4 	b.w	8010970 <GUI_X_Unlock>
 80231e8:	2002b1dc 	.word	0x2002b1dc

080231ec <GUI_Lock>:
 80231ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231f0:	4c2a      	ldr	r4, [pc, #168]	; (802329c <GUI_Lock+0xb0>)
 80231f2:	6823      	ldr	r3, [r4, #0]
 80231f4:	b963      	cbnz	r3, 8023210 <GUI_Lock+0x24>
 80231f6:	f7ed fbc7 	bl	8010988 <GUI_X_Lock>
 80231fa:	f7ed fbd3 	bl	80109a4 <GUI_X_GetTaskId>
 80231fe:	4b28      	ldr	r3, [pc, #160]	; (80232a0 <GUI_Lock+0xb4>)
 8023200:	6018      	str	r0, [r3, #0]
 8023202:	6823      	ldr	r3, [r4, #0]
 8023204:	3301      	adds	r3, #1
 8023206:	2b01      	cmp	r3, #1
 8023208:	6023      	str	r3, [r4, #0]
 802320a:	d011      	beq.n	8023230 <GUI_Lock+0x44>
 802320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023210:	4d23      	ldr	r5, [pc, #140]	; (80232a0 <GUI_Lock+0xb4>)
 8023212:	f7ed fbc7 	bl	80109a4 <GUI_X_GetTaskId>
 8023216:	682b      	ldr	r3, [r5, #0]
 8023218:	4298      	cmp	r0, r3
 802321a:	d0f2      	beq.n	8023202 <GUI_Lock+0x16>
 802321c:	f7ed fbb4 	bl	8010988 <GUI_X_Lock>
 8023220:	f7ed fbc0 	bl	80109a4 <GUI_X_GetTaskId>
 8023224:	6823      	ldr	r3, [r4, #0]
 8023226:	6028      	str	r0, [r5, #0]
 8023228:	3301      	adds	r3, #1
 802322a:	2b01      	cmp	r3, #1
 802322c:	6023      	str	r3, [r4, #0]
 802322e:	d1ed      	bne.n	802320c <GUI_Lock+0x20>
 8023230:	4e1c      	ldr	r6, [pc, #112]	; (80232a4 <GUI_Lock+0xb8>)
 8023232:	6833      	ldr	r3, [r6, #0]
 8023234:	2b00      	cmp	r3, #0
 8023236:	dd2c      	ble.n	8023292 <GUI_Lock+0xa6>
 8023238:	2400      	movs	r4, #0
 802323a:	4f1b      	ldr	r7, [pc, #108]	; (80232a8 <GUI_Lock+0xbc>)
 802323c:	4625      	mov	r5, r4
 802323e:	e006      	b.n	802324e <GUI_Lock+0x62>
 8023240:	b352      	cbz	r2, 8023298 <GUI_Lock+0xac>
 8023242:	6833      	ldr	r3, [r6, #0]
 8023244:	3501      	adds	r5, #1
 8023246:	429d      	cmp	r5, r3
 8023248:	f104 0478 	add.w	r4, r4, #120	; 0x78
 802324c:	da21      	bge.n	8023292 <GUI_Lock+0xa6>
 802324e:	f7ed fba9 	bl	80109a4 <GUI_X_GetTaskId>
 8023252:	683b      	ldr	r3, [r7, #0]
 8023254:	591a      	ldr	r2, [r3, r4]
 8023256:	4290      	cmp	r0, r2
 8023258:	4423      	add	r3, r4
 802325a:	d1f1      	bne.n	8023240 <GUI_Lock+0x54>
 802325c:	4e13      	ldr	r6, [pc, #76]	; (80232ac <GUI_Lock+0xc0>)
 802325e:	6833      	ldr	r3, [r6, #0]
 8023260:	42ab      	cmp	r3, r5
 8023262:	d0d3      	beq.n	802320c <GUI_Lock+0x20>
 8023264:	2b00      	cmp	r3, #0
 8023266:	db11      	blt.n	802328c <GUI_Lock+0xa0>
 8023268:	4f0f      	ldr	r7, [pc, #60]	; (80232a8 <GUI_Lock+0xbc>)
 802326a:	683a      	ldr	r2, [r7, #0]
 802326c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8023270:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8023274:	f000 fe02 	bl	8023e7c <GUI_DEVICE_UnlinkTaskDevices>
 8023278:	683b      	ldr	r3, [r7, #0]
 802327a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 802327e:	441c      	add	r4, r3
 8023280:	4b0b      	ldr	r3, [pc, #44]	; (80232b0 <GUI_Lock+0xc4>)
 8023282:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8023284:	3404      	adds	r4, #4
 8023286:	601c      	str	r4, [r3, #0]
 8023288:	f000 fdfa 	bl	8023e80 <GUI_DEVICE_LinkDevices>
 802328c:	6035      	str	r5, [r6, #0]
 802328e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023292:	2400      	movs	r4, #0
 8023294:	4625      	mov	r5, r4
 8023296:	e7e1      	b.n	802325c <GUI_Lock+0x70>
 8023298:	6018      	str	r0, [r3, #0]
 802329a:	e7df      	b.n	802325c <GUI_Lock+0x70>
 802329c:	2002b1dc 	.word	0x2002b1dc
 80232a0:	2002b1e8 	.word	0x2002b1e8
 80232a4:	20000274 	.word	0x20000274
 80232a8:	2002b1d8 	.word	0x2002b1d8
 80232ac:	20000270 	.word	0x20000270
 80232b0:	20000280 	.word	0x20000280

080232b4 <GUITASK_Init>:
 80232b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232b6:	4819      	ldr	r0, [pc, #100]	; (802331c <GUITASK_Init+0x68>)
 80232b8:	4e19      	ldr	r6, [pc, #100]	; (8023320 <GUITASK_Init+0x6c>)
 80232ba:	4b1a      	ldr	r3, [pc, #104]	; (8023324 <GUITASK_Init+0x70>)
 80232bc:	6003      	str	r3, [r0, #0]
 80232be:	f000 ff0b 	bl	80240d8 <GUI__RegisterExit>
 80232c2:	6834      	ldr	r4, [r6, #0]
 80232c4:	4f18      	ldr	r7, [pc, #96]	; (8023328 <GUITASK_Init+0x74>)
 80232c6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80232ca:	00e4      	lsls	r4, r4, #3
 80232cc:	4620      	mov	r0, r4
 80232ce:	f002 f9cd 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 80232d2:	4b16      	ldr	r3, [pc, #88]	; (802332c <GUITASK_Init+0x78>)
 80232d4:	6038      	str	r0, [r7, #0]
 80232d6:	4622      	mov	r2, r4
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	2100      	movs	r1, #0
 80232dc:	4798      	blx	r3
 80232de:	4b14      	ldr	r3, [pc, #80]	; (8023330 <GUITASK_Init+0x7c>)
 80232e0:	f04f 32ff 	mov.w	r2, #4294967295
 80232e4:	601a      	str	r2, [r3, #0]
 80232e6:	f7ed fb25 	bl	8010934 <GUI_X_InitOS>
 80232ea:	6833      	ldr	r3, [r6, #0]
 80232ec:	2b00      	cmp	r3, #0
 80232ee:	dd11      	ble.n	8023314 <GUITASK_Init+0x60>
 80232f0:	2400      	movs	r4, #0
 80232f2:	4625      	mov	r5, r4
 80232f4:	e003      	b.n	80232fe <GUITASK_Init+0x4a>
 80232f6:	b172      	cbz	r2, 8023316 <GUITASK_Init+0x62>
 80232f8:	6833      	ldr	r3, [r6, #0]
 80232fa:	429d      	cmp	r5, r3
 80232fc:	da0a      	bge.n	8023314 <GUITASK_Init+0x60>
 80232fe:	f7ed fb51 	bl	80109a4 <GUI_X_GetTaskId>
 8023302:	683b      	ldr	r3, [r7, #0]
 8023304:	591a      	ldr	r2, [r3, r4]
 8023306:	4290      	cmp	r0, r2
 8023308:	4423      	add	r3, r4
 802330a:	f105 0501 	add.w	r5, r5, #1
 802330e:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8023312:	d1f0      	bne.n	80232f6 <GUITASK_Init+0x42>
 8023314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023316:	6018      	str	r0, [r3, #0]
 8023318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802331a:	bf00      	nop
 802331c:	2002b1e0 	.word	0x2002b1e0
 8023320:	20000274 	.word	0x20000274
 8023324:	080231c5 	.word	0x080231c5
 8023328:	2002b1d8 	.word	0x2002b1d8
 802332c:	20000254 	.word	0x20000254
 8023330:	20000270 	.word	0x20000270

08023334 <GUITASK_CopyContext>:
 8023334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023338:	4f24      	ldr	r7, [pc, #144]	; (80233cc <GUITASK_CopyContext+0x98>)
 802333a:	683b      	ldr	r3, [r7, #0]
 802333c:	2b00      	cmp	r3, #0
 802333e:	dd40      	ble.n	80233c2 <GUITASK_CopyContext+0x8e>
 8023340:	4e23      	ldr	r6, [pc, #140]	; (80233d0 <GUITASK_CopyContext+0x9c>)
 8023342:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80233d4 <GUITASK_CopyContext+0xa0>
 8023346:	6834      	ldr	r4, [r6, #0]
 8023348:	f8d8 a000 	ldr.w	sl, [r8]
 802334c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8023350:	340c      	adds	r4, #12
 8023352:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 8023356:	2500      	movs	r5, #0
 8023358:	f1a4 0308 	sub.w	r3, r4, #8
 802335c:	2270      	movs	r2, #112	; 0x70
 802335e:	4618      	mov	r0, r3
 8023360:	4651      	mov	r1, sl
 8023362:	f007 fa1f 	bl	802a7a4 <memcpy>
 8023366:	1f22      	subs	r2, r4, #4
 8023368:	6320      	str	r0, [r4, #48]	; 0x30
 802336a:	63a0      	str	r0, [r4, #56]	; 0x38
 802336c:	f844 5c0c 	str.w	r5, [r4, #-12]
 8023370:	6362      	str	r2, [r4, #52]	; 0x34
 8023372:	60e4      	str	r4, [r4, #12]
 8023374:	3478      	adds	r4, #120	; 0x78
 8023376:	454c      	cmp	r4, r9
 8023378:	d1ee      	bne.n	8023358 <GUITASK_CopyContext+0x24>
 802337a:	2400      	movs	r4, #0
 802337c:	4625      	mov	r5, r4
 802337e:	e003      	b.n	8023388 <GUITASK_CopyContext+0x54>
 8023380:	b19a      	cbz	r2, 80233aa <GUITASK_CopyContext+0x76>
 8023382:	683a      	ldr	r2, [r7, #0]
 8023384:	4295      	cmp	r5, r2
 8023386:	da16      	bge.n	80233b6 <GUITASK_CopyContext+0x82>
 8023388:	f7ed fb0c 	bl	80109a4 <GUI_X_GetTaskId>
 802338c:	6833      	ldr	r3, [r6, #0]
 802338e:	591a      	ldr	r2, [r3, r4]
 8023390:	4290      	cmp	r0, r2
 8023392:	eb03 0104 	add.w	r1, r3, r4
 8023396:	f105 0501 	add.w	r5, r5, #1
 802339a:	f104 0478 	add.w	r4, r4, #120	; 0x78
 802339e:	d1ef      	bne.n	8023380 <GUITASK_CopyContext+0x4c>
 80233a0:	3104      	adds	r1, #4
 80233a2:	f8c8 1000 	str.w	r1, [r8]
 80233a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233aa:	6008      	str	r0, [r1, #0]
 80233ac:	3104      	adds	r1, #4
 80233ae:	f8c8 1000 	str.w	r1, [r8]
 80233b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233b6:	4619      	mov	r1, r3
 80233b8:	3104      	adds	r1, #4
 80233ba:	f8c8 1000 	str.w	r1, [r8]
 80233be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233c2:	4b03      	ldr	r3, [pc, #12]	; (80233d0 <GUITASK_CopyContext+0x9c>)
 80233c4:	f8df 800c 	ldr.w	r8, [pc, #12]	; 80233d4 <GUITASK_CopyContext+0xa0>
 80233c8:	6819      	ldr	r1, [r3, #0]
 80233ca:	e7e9      	b.n	80233a0 <GUITASK_CopyContext+0x6c>
 80233cc:	20000274 	.word	0x20000274
 80233d0:	2002b1d8 	.word	0x2002b1d8
 80233d4:	20000280 	.word	0x20000280

080233d8 <GUI__AlphaPreserveTrans>:
 80233d8:	b510      	push	{r4, lr}
 80233da:	4b09      	ldr	r3, [pc, #36]	; (8023400 <GUI__AlphaPreserveTrans+0x28>)
 80233dc:	4602      	mov	r2, r0
 80233de:	781c      	ldrb	r4, [r3, #0]
 80233e0:	b930      	cbnz	r0, 80233f0 <GUI__AlphaPreserveTrans+0x18>
 80233e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80233e6:	701a      	strb	r2, [r3, #0]
 80233e8:	f005 fd32 	bl	8028e50 <LCD_AA_SetOrMask>
 80233ec:	4620      	mov	r0, r4
 80233ee:	bd10      	pop	{r4, pc}
 80233f0:	2201      	movs	r2, #1
 80233f2:	2000      	movs	r0, #0
 80233f4:	701a      	strb	r2, [r3, #0]
 80233f6:	f005 fd2b 	bl	8028e50 <LCD_AA_SetOrMask>
 80233fa:	4620      	mov	r0, r4
 80233fc:	bd10      	pop	{r4, pc}
 80233fe:	bf00      	nop
 8023400:	2002cc0c 	.word	0x2002cc0c

08023404 <GUI_GetLayerPosEx>:
 8023404:	b570      	push	{r4, r5, r6, lr}
 8023406:	4604      	mov	r4, r0
 8023408:	460e      	mov	r6, r1
 802340a:	4615      	mov	r5, r2
 802340c:	f7ff feee 	bl	80231ec <GUI_Lock>
 8023410:	4620      	mov	r0, r4
 8023412:	4631      	mov	r1, r6
 8023414:	462a      	mov	r2, r5
 8023416:	f7fe f821 	bl	802145c <LCD_GetPosEx>
 802341a:	4604      	mov	r4, r0
 802341c:	b110      	cbz	r0, 8023424 <GUI_GetLayerPosEx+0x20>
 802341e:	2300      	movs	r3, #0
 8023420:	6033      	str	r3, [r6, #0]
 8023422:	602b      	str	r3, [r5, #0]
 8023424:	f7ff fed8 	bl	80231d8 <GUI_Unlock>
 8023428:	4620      	mov	r0, r4
 802342a:	bd70      	pop	{r4, r5, r6, pc}

0802342c <GUI_SelectLayer>:
 802342c:	b570      	push	{r4, r5, r6, lr}
 802342e:	4d0d      	ldr	r5, [pc, #52]	; (8023464 <GUI_SelectLayer+0x38>)
 8023430:	682b      	ldr	r3, [r5, #0]
 8023432:	4604      	mov	r4, r0
 8023434:	7c5e      	ldrb	r6, [r3, #17]
 8023436:	f7ff fed9 	bl	80231ec <GUI_Lock>
 802343a:	2c01      	cmp	r4, #1
 802343c:	d903      	bls.n	8023446 <GUI_SelectLayer+0x1a>
 802343e:	f7ff fecb 	bl	80231d8 <GUI_Unlock>
 8023442:	4630      	mov	r0, r6
 8023444:	bd70      	pop	{r4, r5, r6, pc}
 8023446:	4620      	mov	r0, r4
 8023448:	f000 fbfe 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802344c:	2800      	cmp	r0, #0
 802344e:	d0f6      	beq.n	802343e <GUI_SelectLayer+0x12>
 8023450:	682b      	ldr	r3, [r5, #0]
 8023452:	745c      	strb	r4, [r3, #17]
 8023454:	f001 f94c 	bl	80246f0 <GUI_SelectLCD>
 8023458:	4b03      	ldr	r3, [pc, #12]	; (8023468 <GUI_SelectLayer+0x3c>)
 802345a:	601c      	str	r4, [r3, #0]
 802345c:	f7ff febc 	bl	80231d8 <GUI_Unlock>
 8023460:	4630      	mov	r0, r6
 8023462:	bd70      	pop	{r4, r5, r6, pc}
 8023464:	20000280 	.word	0x20000280
 8023468:	2002cb78 	.word	0x2002cb78

0802346c <GUI_StoreKey>:
 802346c:	4b02      	ldr	r3, [pc, #8]	; (8023478 <GUI_StoreKey+0xc>)
 802346e:	681a      	ldr	r2, [r3, #0]
 8023470:	b902      	cbnz	r2, 8023474 <GUI_StoreKey+0x8>
 8023472:	6018      	str	r0, [r3, #0]
 8023474:	f7ff bbb0 	b.w	8022bd8 <GUI_SignalEvent>
 8023478:	2002b1ec 	.word	0x2002b1ec

0802347c <GUI_PollKeyMsg>:
 802347c:	b510      	push	{r4, lr}
 802347e:	f7ff feb5 	bl	80231ec <GUI_Lock>
 8023482:	4a0d      	ldr	r2, [pc, #52]	; (80234b8 <GUI_PollKeyMsg+0x3c>)
 8023484:	490d      	ldr	r1, [pc, #52]	; (80234bc <GUI_PollKeyMsg+0x40>)
 8023486:	6813      	ldr	r3, [r2, #0]
 8023488:	6809      	ldr	r1, [r1, #0]
 802348a:	428b      	cmp	r3, r1
 802348c:	d00f      	beq.n	80234ae <GUI_PollKeyMsg+0x32>
 802348e:	4c0c      	ldr	r4, [pc, #48]	; (80234c0 <GUI_PollKeyMsg+0x44>)
 8023490:	42a3      	cmp	r3, r4
 8023492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023496:	f04f 0401 	mov.w	r4, #1
 802349a:	bf14      	ite	ne
 802349c:	3308      	addne	r3, #8
 802349e:	3b50      	subeq	r3, #80	; 0x50
 80234a0:	6013      	str	r3, [r2, #0]
 80234a2:	f7f8 ffd1 	bl	801c448 <WM_OnKey>
 80234a6:	f7ff fe97 	bl	80231d8 <GUI_Unlock>
 80234aa:	4620      	mov	r0, r4
 80234ac:	bd10      	pop	{r4, pc}
 80234ae:	2400      	movs	r4, #0
 80234b0:	f7ff fe92 	bl	80231d8 <GUI_Unlock>
 80234b4:	4620      	mov	r0, r4
 80234b6:	bd10      	pop	{r4, pc}
 80234b8:	2000027c 	.word	0x2000027c
 80234bc:	20000278 	.word	0x20000278
 80234c0:	2002b240 	.word	0x2002b240

080234c4 <GUI_DrawHLine>:
 80234c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80234c6:	4f14      	ldr	r7, [pc, #80]	; (8023518 <GUI_DrawHLine+0x54>)
 80234c8:	b083      	sub	sp, #12
 80234ca:	4606      	mov	r6, r0
 80234cc:	4614      	mov	r4, r2
 80234ce:	460d      	mov	r5, r1
 80234d0:	f7ff fe8c 	bl	80231ec <GUI_Lock>
 80234d4:	683b      	ldr	r3, [r7, #0]
 80234d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80234d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80234da:	4416      	add	r6, r2
 80234dc:	441d      	add	r5, r3
 80234de:	441c      	add	r4, r3
 80234e0:	4668      	mov	r0, sp
 80234e2:	b2b3      	uxth	r3, r6
 80234e4:	f8ad 5000 	strh.w	r5, [sp]
 80234e8:	f8ad 4004 	strh.w	r4, [sp, #4]
 80234ec:	f8ad 3002 	strh.w	r3, [sp, #2]
 80234f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80234f4:	f7fb f95a 	bl	801e7ac <WM__InitIVRSearch>
 80234f8:	b150      	cbz	r0, 8023510 <GUI_DrawHLine+0x4c>
 80234fa:	683b      	ldr	r3, [r7, #0]
 80234fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80234fe:	4628      	mov	r0, r5
 8023500:	681b      	ldr	r3, [r3, #0]
 8023502:	4631      	mov	r1, r6
 8023504:	4622      	mov	r2, r4
 8023506:	4798      	blx	r3
 8023508:	f7fb f82a 	bl	801e560 <WM__GetNextIVR>
 802350c:	2800      	cmp	r0, #0
 802350e:	d1f4      	bne.n	80234fa <GUI_DrawHLine+0x36>
 8023510:	f7ff fe62 	bl	80231d8 <GUI_Unlock>
 8023514:	b003      	add	sp, #12
 8023516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023518:	20000280 	.word	0x20000280

0802351c <GUI_DrawPixel>:
 802351c:	b570      	push	{r4, r5, r6, lr}
 802351e:	4e13      	ldr	r6, [pc, #76]	; (802356c <GUI_DrawPixel+0x50>)
 8023520:	b082      	sub	sp, #8
 8023522:	4605      	mov	r5, r0
 8023524:	460c      	mov	r4, r1
 8023526:	f7ff fe61 	bl	80231ec <GUI_Lock>
 802352a:	6833      	ldr	r3, [r6, #0]
 802352c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023530:	4415      	add	r5, r2
 8023532:	441c      	add	r4, r3
 8023534:	b2aa      	uxth	r2, r5
 8023536:	b2a3      	uxth	r3, r4
 8023538:	4668      	mov	r0, sp
 802353a:	f8ad 2004 	strh.w	r2, [sp, #4]
 802353e:	f8ad 2000 	strh.w	r2, [sp]
 8023542:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023546:	f8ad 3002 	strh.w	r3, [sp, #2]
 802354a:	f7fb f92f 	bl	801e7ac <WM__InitIVRSearch>
 802354e:	b148      	cbz	r0, 8023564 <GUI_DrawPixel+0x48>
 8023550:	6833      	ldr	r3, [r6, #0]
 8023552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023554:	4628      	mov	r0, r5
 8023556:	685b      	ldr	r3, [r3, #4]
 8023558:	4621      	mov	r1, r4
 802355a:	4798      	blx	r3
 802355c:	f7fb f800 	bl	801e560 <WM__GetNextIVR>
 8023560:	2800      	cmp	r0, #0
 8023562:	d1f5      	bne.n	8023550 <GUI_DrawPixel+0x34>
 8023564:	f7ff fe38 	bl	80231d8 <GUI_Unlock>
 8023568:	b002      	add	sp, #8
 802356a:	bd70      	pop	{r4, r5, r6, pc}
 802356c:	20000280 	.word	0x20000280

08023570 <GUI_DrawVLine>:
 8023570:	b570      	push	{r4, r5, r6, lr}
 8023572:	b082      	sub	sp, #8
 8023574:	4606      	mov	r6, r0
 8023576:	4614      	mov	r4, r2
 8023578:	460d      	mov	r5, r1
 802357a:	f7ff fe37 	bl	80231ec <GUI_Lock>
 802357e:	4b10      	ldr	r3, [pc, #64]	; (80235c0 <GUI_DrawVLine+0x50>)
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8023584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023586:	4416      	add	r6, r2
 8023588:	441d      	add	r5, r3
 802358a:	441c      	add	r4, r3
 802358c:	4668      	mov	r0, sp
 802358e:	b2b3      	uxth	r3, r6
 8023590:	f8ad 5002 	strh.w	r5, [sp, #2]
 8023594:	f8ad 4006 	strh.w	r4, [sp, #6]
 8023598:	f8ad 3000 	strh.w	r3, [sp]
 802359c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80235a0:	f7fb f904 	bl	801e7ac <WM__InitIVRSearch>
 80235a4:	b140      	cbz	r0, 80235b8 <GUI_DrawVLine+0x48>
 80235a6:	4630      	mov	r0, r6
 80235a8:	4629      	mov	r1, r5
 80235aa:	4622      	mov	r2, r4
 80235ac:	f7fe f9be 	bl	802192c <LCD_DrawVLine>
 80235b0:	f7fa ffd6 	bl	801e560 <WM__GetNextIVR>
 80235b4:	2800      	cmp	r0, #0
 80235b6:	d1f6      	bne.n	80235a6 <GUI_DrawVLine+0x36>
 80235b8:	f7ff fe0e 	bl	80231d8 <GUI_Unlock>
 80235bc:	b002      	add	sp, #8
 80235be:	bd70      	pop	{r4, r5, r6, pc}
 80235c0:	20000280 	.word	0x20000280

080235c4 <GUI_FillRect>:
 80235c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80235c8:	b083      	sub	sp, #12
 80235ca:	4607      	mov	r7, r0
 80235cc:	4699      	mov	r9, r3
 80235ce:	460d      	mov	r5, r1
 80235d0:	4690      	mov	r8, r2
 80235d2:	f7ff fe0b 	bl	80231ec <GUI_Lock>
 80235d6:	4b11      	ldr	r3, [pc, #68]	; (802361c <GUI_FillRect+0x58>)
 80235d8:	681c      	ldr	r4, [r3, #0]
 80235da:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80235dc:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80235de:	4437      	add	r7, r6
 80235e0:	4425      	add	r5, r4
 80235e2:	4446      	add	r6, r8
 80235e4:	444c      	add	r4, r9
 80235e6:	4668      	mov	r0, sp
 80235e8:	f8ad 7000 	strh.w	r7, [sp]
 80235ec:	f8ad 6004 	strh.w	r6, [sp, #4]
 80235f0:	f8ad 5002 	strh.w	r5, [sp, #2]
 80235f4:	f8ad 4006 	strh.w	r4, [sp, #6]
 80235f8:	f7fb f8d8 	bl	801e7ac <WM__InitIVRSearch>
 80235fc:	b148      	cbz	r0, 8023612 <GUI_FillRect+0x4e>
 80235fe:	4638      	mov	r0, r7
 8023600:	4629      	mov	r1, r5
 8023602:	4632      	mov	r2, r6
 8023604:	4623      	mov	r3, r4
 8023606:	f7fe f9b9 	bl	802197c <LCD_FillRect>
 802360a:	f7fa ffa9 	bl	801e560 <WM__GetNextIVR>
 802360e:	2800      	cmp	r0, #0
 8023610:	d1f5      	bne.n	80235fe <GUI_FillRect+0x3a>
 8023612:	f7ff fde1 	bl	80231d8 <GUI_Unlock>
 8023616:	b003      	add	sp, #12
 8023618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802361c:	20000280 	.word	0x20000280

08023620 <GUI_FillRectEx>:
 8023620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023622:	b083      	sub	sp, #12
 8023624:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023628:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 802362c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8023630:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8023634:	f7ff fdda 	bl	80231ec <GUI_Lock>
 8023638:	4b10      	ldr	r3, [pc, #64]	; (802367c <GUI_FillRectEx+0x5c>)
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023640:	4417      	add	r7, r2
 8023642:	4416      	add	r6, r2
 8023644:	441d      	add	r5, r3
 8023646:	441c      	add	r4, r3
 8023648:	4668      	mov	r0, sp
 802364a:	f8ad 7000 	strh.w	r7, [sp]
 802364e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8023652:	f8ad 5002 	strh.w	r5, [sp, #2]
 8023656:	f8ad 4006 	strh.w	r4, [sp, #6]
 802365a:	f7fb f8a7 	bl	801e7ac <WM__InitIVRSearch>
 802365e:	b148      	cbz	r0, 8023674 <GUI_FillRectEx+0x54>
 8023660:	4638      	mov	r0, r7
 8023662:	4629      	mov	r1, r5
 8023664:	4632      	mov	r2, r6
 8023666:	4623      	mov	r3, r4
 8023668:	f7fe f988 	bl	802197c <LCD_FillRect>
 802366c:	f7fa ff78 	bl	801e560 <WM__GetNextIVR>
 8023670:	2800      	cmp	r0, #0
 8023672:	d1f5      	bne.n	8023660 <GUI_FillRectEx+0x40>
 8023674:	f7ff fdb0 	bl	80231d8 <GUI_Unlock>
 8023678:	b003      	add	sp, #12
 802367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802367c:	20000280 	.word	0x20000280

08023680 <GUI_DrawBitmap>:
 8023680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023684:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8023784 <GUI_DrawBitmap+0x104>
 8023688:	b089      	sub	sp, #36	; 0x24
 802368a:	4604      	mov	r4, r0
 802368c:	460d      	mov	r5, r1
 802368e:	4616      	mov	r6, r2
 8023690:	f7ff fdac 	bl	80231ec <GUI_Lock>
 8023694:	f8d9 3000 	ldr.w	r3, [r9]
 8023698:	8822      	ldrh	r2, [r4, #0]
 802369a:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 802369c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 802369e:	8863      	ldrh	r3, [r4, #2]
 80236a0:	442f      	add	r7, r5
 80236a2:	eb06 0801 	add.w	r8, r6, r1
 80236a6:	3a01      	subs	r2, #1
 80236a8:	3b01      	subs	r3, #1
 80236aa:	443a      	add	r2, r7
 80236ac:	4443      	add	r3, r8
 80236ae:	a806      	add	r0, sp, #24
 80236b0:	f8ad 7018 	strh.w	r7, [sp, #24]
 80236b4:	f8ad 801a 	strh.w	r8, [sp, #26]
 80236b8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80236bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80236c0:	f7fb f874 	bl	801e7ac <WM__InitIVRSearch>
 80236c4:	2800      	cmp	r0, #0
 80236c6:	d04f      	beq.n	8023768 <GUI_DrawBitmap+0xe8>
 80236c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8023788 <GUI_DrawBitmap+0x108>
 80236cc:	46cb      	mov	fp, r9
 80236ce:	e019      	b.n	8023704 <GUI_DrawBitmap+0x84>
 80236d0:	f040 0002 	orr.w	r0, r0, #2
 80236d4:	f001 f87c 	bl	80247d0 <GUI_SetDrawMode>
 80236d8:	6921      	ldr	r1, [r4, #16]
 80236da:	b319      	cbz	r1, 8023724 <GUI_DrawBitmap+0xa4>
 80236dc:	68a0      	ldr	r0, [r4, #8]
 80236de:	68e6      	ldr	r6, [r4, #12]
 80236e0:	8822      	ldrh	r2, [r4, #0]
 80236e2:	8863      	ldrh	r3, [r4, #2]
 80236e4:	9000      	str	r0, [sp, #0]
 80236e6:	2001      	movs	r0, #1
 80236e8:	9002      	str	r0, [sp, #8]
 80236ea:	9003      	str	r0, [sp, #12]
 80236ec:	9601      	str	r6, [sp, #4]
 80236ee:	680e      	ldr	r6, [r1, #0]
 80236f0:	4638      	mov	r0, r7
 80236f2:	4641      	mov	r1, r8
 80236f4:	47b0      	blx	r6
 80236f6:	4628      	mov	r0, r5
 80236f8:	f001 f86a 	bl	80247d0 <GUI_SetDrawMode>
 80236fc:	f7fa ff30 	bl	801e560 <WM__GetNextIVR>
 8023700:	2800      	cmp	r0, #0
 8023702:	d031      	beq.n	8023768 <GUI_DrawBitmap+0xe8>
 8023704:	2000      	movs	r0, #0
 8023706:	68e6      	ldr	r6, [r4, #12]
 8023708:	f001 f862 	bl	80247d0 <GUI_SetDrawMode>
 802370c:	4605      	mov	r5, r0
 802370e:	b116      	cbz	r6, 8023716 <GUI_DrawBitmap+0x96>
 8023710:	7933      	ldrb	r3, [r6, #4]
 8023712:	2b00      	cmp	r3, #0
 8023714:	d1dc      	bne.n	80236d0 <GUI_DrawBitmap+0x50>
 8023716:	f025 0002 	bic.w	r0, r5, #2
 802371a:	f001 f859 	bl	80247d0 <GUI_SetDrawMode>
 802371e:	6921      	ldr	r1, [r4, #16]
 8023720:	2900      	cmp	r1, #0
 8023722:	d1db      	bne.n	80236dc <GUI_DrawBitmap+0x5c>
 8023724:	f8d9 2000 	ldr.w	r2, [r9]
 8023728:	f8da 3000 	ldr.w	r3, [sl]
 802372c:	7c52      	ldrb	r2, [r2, #17]
 802372e:	68e0      	ldr	r0, [r4, #12]
 8023730:	4621      	mov	r1, r4
 8023732:	4798      	blx	r3
 8023734:	b1e8      	cbz	r0, 8023772 <GUI_DrawBitmap+0xf2>
 8023736:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 802373a:	68a6      	ldr	r6, [r4, #8]
 802373c:	8822      	ldrh	r2, [r4, #0]
 802373e:	8863      	ldrh	r3, [r4, #2]
 8023740:	88a1      	ldrh	r1, [r4, #4]
 8023742:	9604      	str	r6, [sp, #16]
 8023744:	2601      	movs	r6, #1
 8023746:	f8cd e008 	str.w	lr, [sp, #8]
 802374a:	9005      	str	r0, [sp, #20]
 802374c:	9103      	str	r1, [sp, #12]
 802374e:	4638      	mov	r0, r7
 8023750:	4641      	mov	r1, r8
 8023752:	9600      	str	r6, [sp, #0]
 8023754:	9601      	str	r6, [sp, #4]
 8023756:	f7fe fa5f 	bl	8021c18 <LCD_DrawBitmap>
 802375a:	4628      	mov	r0, r5
 802375c:	f001 f838 	bl	80247d0 <GUI_SetDrawMode>
 8023760:	f7fa fefe 	bl	801e560 <WM__GetNextIVR>
 8023764:	2800      	cmp	r0, #0
 8023766:	d1cd      	bne.n	8023704 <GUI_DrawBitmap+0x84>
 8023768:	f7ff fd36 	bl	80231d8 <GUI_Unlock>
 802376c:	b009      	add	sp, #36	; 0x24
 802376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023772:	88e6      	ldrh	r6, [r4, #6]
 8023774:	2e01      	cmp	r6, #1
 8023776:	bf03      	ittte	eq
 8023778:	f8db 3000 	ldreq.w	r3, [fp]
 802377c:	46b6      	moveq	lr, r6
 802377e:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8023780:	46b6      	movne	lr, r6
 8023782:	e7da      	b.n	802373a <GUI_DrawBitmap+0xba>
 8023784:	20000280 	.word	0x20000280
 8023788:	20000284 	.word	0x20000284

0802378c <GUI_DispString>:
 802378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023790:	4604      	mov	r4, r0
 8023792:	b083      	sub	sp, #12
 8023794:	2800      	cmp	r0, #0
 8023796:	d069      	beq.n	802386c <GUI_DispString+0xe0>
 8023798:	4d44      	ldr	r5, [pc, #272]	; (80238ac <GUI_DispString+0x120>)
 802379a:	f7ff fd27 	bl	80231ec <GUI_Lock>
 802379e:	f001 fa49 	bl	8024c34 <GUI_GetFontDistY>
 80237a2:	682b      	ldr	r3, [r5, #0]
 80237a4:	4606      	mov	r6, r0
 80237a6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80237aa:	f001 fa1f 	bl	8024bec <GUI_GetYAdjust>
 80237ae:	682a      	ldr	r2, [r5, #0]
 80237b0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80237b2:	fa1f f980 	uxth.w	r9, r0
 80237b6:	ebc9 0303 	rsb	r3, r9, r3
 80237ba:	b29b      	uxth	r3, r3
 80237bc:	8493      	strh	r3, [r2, #36]	; 0x24
 80237be:	7821      	ldrb	r1, [r4, #0]
 80237c0:	2900      	cmp	r1, #0
 80237c2:	d04a      	beq.n	802385a <GUI_DispString+0xce>
 80237c4:	b2b6      	uxth	r6, r6
 80237c6:	462f      	mov	r7, r5
 80237c8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80237cc:	4620      	mov	r0, r4
 80237ce:	f001 f94b 	bl	8024a68 <GUI__GetLineNumChars>
 80237d2:	4682      	mov	sl, r0
 80237d4:	4651      	mov	r1, sl
 80237d6:	4620      	mov	r0, r4
 80237d8:	f001 f96c 	bl	8024ab4 <GUI__GetLineDistX>
 80237dc:	682b      	ldr	r3, [r5, #0]
 80237de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80237e0:	f002 0203 	and.w	r2, r2, #3
 80237e4:	2a01      	cmp	r2, #1
 80237e6:	d05e      	beq.n	80238a6 <GUI_DispString+0x11a>
 80237e8:	2a02      	cmp	r2, #2
 80237ea:	d055      	beq.n	8023898 <GUI_DispString+0x10c>
 80237ec:	fa1f fb80 	uxth.w	fp, r0
 80237f0:	2100      	movs	r1, #0
 80237f2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80237f4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 80237f6:	f8ad 0002 	strh.w	r0, [sp, #2]
 80237fa:	1a51      	subs	r1, r2, r1
 80237fc:	b289      	uxth	r1, r1
 80237fe:	b28a      	uxth	r2, r1
 8023800:	3801      	subs	r0, #1
 8023802:	f10b 3eff 	add.w	lr, fp, #4294967295
 8023806:	448e      	add	lr, r1
 8023808:	845a      	strh	r2, [r3, #34]	; 0x22
 802380a:	4651      	mov	r1, sl
 802380c:	1833      	adds	r3, r6, r0
 802380e:	f8ad 2000 	strh.w	r2, [sp]
 8023812:	4620      	mov	r0, r4
 8023814:	466a      	mov	r2, sp
 8023816:	f8ad 3006 	strh.w	r3, [sp, #6]
 802381a:	f8ad e004 	strh.w	lr, [sp, #4]
 802381e:	f001 f98d 	bl	8024b3c <GUI__DispLine>
 8023822:	682b      	ldr	r3, [r5, #0]
 8023824:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023828:	849a      	strh	r2, [r3, #36]	; 0x24
 802382a:	4651      	mov	r1, sl
 802382c:	4620      	mov	r0, r4
 802382e:	f7ff fa29 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8023832:	5c22      	ldrb	r2, [r4, r0]
 8023834:	2a0a      	cmp	r2, #10
 8023836:	eb04 0300 	add.w	r3, r4, r0
 802383a:	d01a      	beq.n	8023872 <GUI_DispString+0xe6>
 802383c:	2a0d      	cmp	r2, #13
 802383e:	d018      	beq.n	8023872 <GUI_DispString+0xe6>
 8023840:	f8bd 1000 	ldrh.w	r1, [sp]
 8023844:	683a      	ldr	r2, [r7, #0]
 8023846:	448b      	add	fp, r1
 8023848:	f8a2 b022 	strh.w	fp, [r2, #34]	; 0x22
 802384c:	7819      	ldrb	r1, [r3, #0]
 802384e:	b119      	cbz	r1, 8023858 <GUI_DispString+0xcc>
 8023850:	7859      	ldrb	r1, [r3, #1]
 8023852:	1c5c      	adds	r4, r3, #1
 8023854:	2900      	cmp	r1, #0
 8023856:	d1b7      	bne.n	80237c8 <GUI_DispString+0x3c>
 8023858:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 802385a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 802385c:	4499      	add	r9, r3
 802385e:	f021 0103 	bic.w	r1, r1, #3
 8023862:	f8a2 9024 	strh.w	r9, [r2, #36]	; 0x24
 8023866:	8591      	strh	r1, [r2, #44]	; 0x2c
 8023868:	f7ff fcb6 	bl	80231d8 <GUI_Unlock>
 802386c:	b003      	add	sp, #12
 802386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023872:	682a      	ldr	r2, [r5, #0]
 8023874:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8023876:	f001 0103 	and.w	r1, r1, #3
 802387a:	3901      	subs	r1, #1
 802387c:	2901      	cmp	r1, #1
 802387e:	bf8a      	itet	hi
 8023880:	8c11      	ldrhhi	r1, [r2, #32]
 8023882:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 8023886:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8023888:	7819      	ldrb	r1, [r3, #0]
 802388a:	290a      	cmp	r1, #10
 802388c:	d1df      	bne.n	802384e <GUI_DispString+0xc2>
 802388e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8023890:	4431      	add	r1, r6
 8023892:	8491      	strh	r1, [r2, #36]	; 0x24
 8023894:	7819      	ldrb	r1, [r3, #0]
 8023896:	e7da      	b.n	802384e <GUI_DispString+0xc2>
 8023898:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 802389c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80238a0:	fa1f fb80 	uxth.w	fp, r0
 80238a4:	e7a5      	b.n	80237f2 <GUI_DispString+0x66>
 80238a6:	b281      	uxth	r1, r0
 80238a8:	468b      	mov	fp, r1
 80238aa:	e7a2      	b.n	80237f2 <GUI_DispString+0x66>
 80238ac:	20000280 	.word	0x20000280

080238b0 <GUI_DispStringAt>:
 80238b0:	b570      	push	{r4, r5, r6, lr}
 80238b2:	460c      	mov	r4, r1
 80238b4:	4616      	mov	r6, r2
 80238b6:	4605      	mov	r5, r0
 80238b8:	f7ff fc98 	bl	80231ec <GUI_Lock>
 80238bc:	4b05      	ldr	r3, [pc, #20]	; (80238d4 <GUI_DispStringAt+0x24>)
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	4628      	mov	r0, r5
 80238c2:	845c      	strh	r4, [r3, #34]	; 0x22
 80238c4:	849e      	strh	r6, [r3, #36]	; 0x24
 80238c6:	f7ff ff61 	bl	802378c <GUI_DispString>
 80238ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80238ce:	f7ff bc83 	b.w	80231d8 <GUI_Unlock>
 80238d2:	bf00      	nop
 80238d4:	20000280 	.word	0x20000280

080238d8 <GUI__DispStringInRect>:
 80238d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238dc:	b087      	sub	sp, #28
 80238de:	460c      	mov	r4, r1
 80238e0:	9001      	str	r0, [sp, #4]
 80238e2:	4690      	mov	r8, r2
 80238e4:	461d      	mov	r5, r3
 80238e6:	f001 f9a5 	bl	8024c34 <GUI_GetFontDistY>
 80238ea:	9f01      	ldr	r7, [sp, #4]
 80238ec:	4682      	mov	sl, r0
 80238ee:	2c00      	cmp	r4, #0
 80238f0:	f000 80a8 	beq.w	8023a44 <GUI__DispStringInRect+0x16c>
 80238f4:	6820      	ldr	r0, [r4, #0]
 80238f6:	6861      	ldr	r1, [r4, #4]
 80238f8:	ab02      	add	r3, sp, #8
 80238fa:	c303      	stmia	r3!, {r0, r1}
 80238fc:	f018 030c 	ands.w	r3, r8, #12
 8023900:	9300      	str	r3, [sp, #0]
 8023902:	d166      	bne.n	80239d2 <GUI__DispStringInRect+0xfa>
 8023904:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8023908:	9701      	str	r7, [sp, #4]
 802390a:	2d00      	cmp	r5, #0
 802390c:	d05e      	beq.n	80239cc <GUI__DispStringInRect+0xf4>
 802390e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023912:	fa1f fa8a 	uxth.w	sl, sl
 8023916:	4638      	mov	r0, r7
 8023918:	f8df b130 	ldr.w	fp, [pc, #304]	; 8023a4c <GUI__DispStringInRect+0x174>
 802391c:	f8cd a000 	str.w	sl, [sp]
 8023920:	f008 0803 	and.w	r8, r8, #3
 8023924:	2700      	movs	r7, #0
 8023926:	f10d 0904 	add.w	r9, sp, #4
 802392a:	e031      	b.n	8023990 <GUI__DispStringInRect+0xb8>
 802392c:	f1b8 0f02 	cmp.w	r8, #2
 8023930:	d041      	beq.n	80239b6 <GUI__DispStringInRect+0xde>
 8023932:	f1b8 0f00 	cmp.w	r8, #0
 8023936:	d101      	bne.n	802393c <GUI__DispStringInRect+0x64>
 8023938:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 802393c:	f8db 1000 	ldr.w	r1, [fp]
 8023940:	f8dd e000 	ldr.w	lr, [sp]
 8023944:	9801      	ldr	r0, [sp, #4]
 8023946:	b2ba      	uxth	r2, r7
 8023948:	f103 3cff 	add.w	ip, r3, #4294967295
 802394c:	b2b3      	uxth	r3, r6
 802394e:	44b6      	add	lr, r6
 8023950:	44bc      	add	ip, r7
 8023952:	848b      	strh	r3, [r1, #36]	; 0x24
 8023954:	844a      	strh	r2, [r1, #34]	; 0x22
 8023956:	f8ad 2010 	strh.w	r2, [sp, #16]
 802395a:	4621      	mov	r1, r4
 802395c:	aa04      	add	r2, sp, #16
 802395e:	f8ad c014 	strh.w	ip, [sp, #20]
 8023962:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023966:	f8ad e016 	strh.w	lr, [sp, #22]
 802396a:	f001 f8e7 	bl	8024b3c <GUI__DispLine>
 802396e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8023972:	4621      	mov	r1, r4
 8023974:	4650      	mov	r0, sl
 8023976:	f7ff f985 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 802397a:	4450      	add	r0, sl
 802397c:	9001      	str	r0, [sp, #4]
 802397e:	f001 f959 	bl	8024c34 <GUI_GetFontDistY>
 8023982:	4406      	add	r6, r0
 8023984:	4648      	mov	r0, r9
 8023986:	f7fe fc39 	bl	80221fc <GUI__HandleEOLine>
 802398a:	b9f8      	cbnz	r0, 80239cc <GUI__DispStringInRect+0xf4>
 802398c:	b1f5      	cbz	r5, 80239cc <GUI__DispStringInRect+0xf4>
 802398e:	9801      	ldr	r0, [sp, #4]
 8023990:	4629      	mov	r1, r5
 8023992:	f001 f869 	bl	8024a68 <GUI__GetLineNumChars>
 8023996:	4604      	mov	r4, r0
 8023998:	4601      	mov	r1, r0
 802399a:	9801      	ldr	r0, [sp, #4]
 802399c:	f001 f88a 	bl	8024ab4 <GUI__GetLineDistX>
 80239a0:	f1b8 0f01 	cmp.w	r8, #1
 80239a4:	ebc4 0505 	rsb	r5, r4, r5
 80239a8:	4603      	mov	r3, r0
 80239aa:	d1bf      	bne.n	802392c <GUI__DispStringInRect+0x54>
 80239ac:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80239b0:	1a3f      	subs	r7, r7, r0
 80239b2:	3701      	adds	r7, #1
 80239b4:	e7c2      	b.n	802393c <GUI__DispStringInRect+0x64>
 80239b6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80239ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80239be:	1abf      	subs	r7, r7, r2
 80239c0:	1a3f      	subs	r7, r7, r0
 80239c2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80239c6:	eb02 0767 	add.w	r7, r2, r7, asr #1
 80239ca:	e7b7      	b.n	802393c <GUI__DispStringInRect+0x64>
 80239cc:	b007      	add	sp, #28
 80239ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239d2:	46ab      	mov	fp, r5
 80239d4:	b1d5      	cbz	r5, 8023a0c <GUI__DispStringInRect+0x134>
 80239d6:	462c      	mov	r4, r5
 80239d8:	f04f 0b00 	mov.w	fp, #0
 80239dc:	f10d 0904 	add.w	r9, sp, #4
 80239e0:	e000      	b.n	80239e4 <GUI__DispStringInRect+0x10c>
 80239e2:	b19c      	cbz	r4, 8023a0c <GUI__DispStringInRect+0x134>
 80239e4:	4621      	mov	r1, r4
 80239e6:	9801      	ldr	r0, [sp, #4]
 80239e8:	f001 f83e 	bl	8024a68 <GUI__GetLineNumChars>
 80239ec:	9e01      	ldr	r6, [sp, #4]
 80239ee:	4602      	mov	r2, r0
 80239f0:	4601      	mov	r1, r0
 80239f2:	4630      	mov	r0, r6
 80239f4:	1aa4      	subs	r4, r4, r2
 80239f6:	f7ff f945 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 80239fa:	1833      	adds	r3, r6, r0
 80239fc:	4648      	mov	r0, r9
 80239fe:	f10b 0b01 	add.w	fp, fp, #1
 8023a02:	9301      	str	r3, [sp, #4]
 8023a04:	f7fe fbfa 	bl	80221fc <GUI__HandleEOLine>
 8023a08:	2800      	cmp	r0, #0
 8023a0a:	d0ea      	beq.n	80239e2 <GUI__DispStringInRect+0x10a>
 8023a0c:	9b00      	ldr	r3, [sp, #0]
 8023a0e:	2b08      	cmp	r3, #8
 8023a10:	d005      	beq.n	8023a1e <GUI__DispStringInRect+0x146>
 8023a12:	2b0c      	cmp	r3, #12
 8023a14:	d009      	beq.n	8023a2a <GUI__DispStringInRect+0x152>
 8023a16:	2b04      	cmp	r3, #4
 8023a18:	d001      	beq.n	8023a1e <GUI__DispStringInRect+0x146>
 8023a1a:	2600      	movs	r6, #0
 8023a1c:	e774      	b.n	8023908 <GUI__DispStringInRect+0x30>
 8023a1e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8023a22:	fb0a 661b 	mls	r6, sl, fp, r6
 8023a26:	3601      	adds	r6, #1
 8023a28:	e76e      	b.n	8023908 <GUI__DispStringInRect+0x30>
 8023a2a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023a2e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8023a32:	1ad2      	subs	r2, r2, r3
 8023a34:	3201      	adds	r2, #1
 8023a36:	fb0a 2b1b 	mls	fp, sl, fp, r2
 8023a3a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 8023a3e:	eb03 066b 	add.w	r6, r3, fp, asr #1
 8023a42:	e761      	b.n	8023908 <GUI__DispStringInRect+0x30>
 8023a44:	a802      	add	r0, sp, #8
 8023a46:	f000 fd55 	bl	80244f4 <GUI_GetClientRect>
 8023a4a:	e757      	b.n	80238fc <GUI__DispStringInRect+0x24>
 8023a4c:	20000280 	.word	0x20000280

08023a50 <GUI_DispStringInRect>:
 8023a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a52:	4605      	mov	r5, r0
 8023a54:	b083      	sub	sp, #12
 8023a56:	460c      	mov	r4, r1
 8023a58:	4617      	mov	r7, r2
 8023a5a:	b1d8      	cbz	r0, 8023a94 <GUI_DispStringInRect+0x44>
 8023a5c:	f7ff fbc6 	bl	80231ec <GUI_Lock>
 8023a60:	b1d4      	cbz	r4, 8023a98 <GUI_DispStringInRect+0x48>
 8023a62:	4620      	mov	r0, r4
 8023a64:	f7f8 fdfc 	bl	801c660 <WM_SetUserClipRect>
 8023a68:	4606      	mov	r6, r0
 8023a6a:	b138      	cbz	r0, 8023a7c <GUI_DispStringInRect+0x2c>
 8023a6c:	4668      	mov	r0, sp
 8023a6e:	4621      	mov	r1, r4
 8023a70:	4632      	mov	r2, r6
 8023a72:	f7fe fbfb 	bl	802226c <GUI__IntersectRects>
 8023a76:	4668      	mov	r0, sp
 8023a78:	f7f8 fdf2 	bl	801c660 <WM_SetUserClipRect>
 8023a7c:	4628      	mov	r0, r5
 8023a7e:	4621      	mov	r1, r4
 8023a80:	463a      	mov	r2, r7
 8023a82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023a86:	f7ff ff27 	bl	80238d8 <GUI__DispStringInRect>
 8023a8a:	4630      	mov	r0, r6
 8023a8c:	f7f8 fde8 	bl	801c660 <WM_SetUserClipRect>
 8023a90:	f7ff fba2 	bl	80231d8 <GUI_Unlock>
 8023a94:	b003      	add	sp, #12
 8023a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a98:	4626      	mov	r6, r4
 8023a9a:	e7ef      	b.n	8023a7c <GUI_DispStringInRect+0x2c>

08023a9c <GUI_DispStringInRectWrap>:
 8023a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aa0:	b08b      	sub	sp, #44	; 0x2c
 8023aa2:	4604      	mov	r4, r0
 8023aa4:	9100      	str	r1, [sp, #0]
 8023aa6:	4691      	mov	r9, r2
 8023aa8:	461f      	mov	r7, r3
 8023aaa:	2800      	cmp	r0, #0
 8023aac:	f000 8092 	beq.w	8023bd4 <GUI_DispStringInRectWrap+0x138>
 8023ab0:	f7ff fb9c 	bl	80231ec <GUI_Lock>
 8023ab4:	9b00      	ldr	r3, [sp, #0]
 8023ab6:	881b      	ldrh	r3, [r3, #0]
 8023ab8:	9302      	str	r3, [sp, #8]
 8023aba:	9b00      	ldr	r3, [sp, #0]
 8023abc:	9902      	ldr	r1, [sp, #8]
 8023abe:	889b      	ldrh	r3, [r3, #4]
 8023ac0:	9301      	str	r3, [sp, #4]
 8023ac2:	9b00      	ldr	r3, [sp, #0]
 8023ac4:	9a01      	ldr	r2, [sp, #4]
 8023ac6:	885b      	ldrh	r3, [r3, #2]
 8023ac8:	9304      	str	r3, [sp, #16]
 8023aca:	9b00      	ldr	r3, [sp, #0]
 8023acc:	88db      	ldrh	r3, [r3, #6]
 8023ace:	9305      	str	r3, [sp, #20]
 8023ad0:	fa0f f882 	sxth.w	r8, r2
 8023ad4:	b20b      	sxth	r3, r1
 8023ad6:	ebc3 0808 	rsb	r8, r3, r8
 8023ada:	f001 f8ab 	bl	8024c34 <GUI_GetFontDistY>
 8023ade:	f019 050c 	ands.w	r5, r9, #12
 8023ae2:	f108 0801 	add.w	r8, r8, #1
 8023ae6:	4683      	mov	fp, r0
 8023ae8:	d177      	bne.n	8023bda <GUI_DispStringInRectWrap+0x13e>
 8023aea:	9800      	ldr	r0, [sp, #0]
 8023aec:	f7f8 fdb8 	bl	801c660 <WM_SetUserClipRect>
 8023af0:	9003      	str	r0, [sp, #12]
 8023af2:	b1b8      	cbz	r0, 8023b24 <GUI_DispStringInRectWrap+0x88>
 8023af4:	9902      	ldr	r1, [sp, #8]
 8023af6:	2200      	movs	r2, #0
 8023af8:	4613      	mov	r3, r2
 8023afa:	f361 020f 	bfi	r2, r1, #0, #16
 8023afe:	9901      	ldr	r1, [sp, #4]
 8023b00:	f361 030f 	bfi	r3, r1, #0, #16
 8023b04:	9904      	ldr	r1, [sp, #16]
 8023b06:	f361 421f 	bfi	r2, r1, #16, #16
 8023b0a:	9905      	ldr	r1, [sp, #20]
 8023b0c:	9208      	str	r2, [sp, #32]
 8023b0e:	f361 431f 	bfi	r3, r1, #16, #16
 8023b12:	a808      	add	r0, sp, #32
 8023b14:	9900      	ldr	r1, [sp, #0]
 8023b16:	9a03      	ldr	r2, [sp, #12]
 8023b18:	9309      	str	r3, [sp, #36]	; 0x24
 8023b1a:	f7fe fba7 	bl	802226c <GUI__IntersectRects>
 8023b1e:	a808      	add	r0, sp, #32
 8023b20:	f7f8 fd9e 	bl	801c660 <WM_SetUserClipRect>
 8023b24:	9b04      	ldr	r3, [sp, #16]
 8023b26:	fa1f fa8b 	uxth.w	sl, fp
 8023b2a:	b29d      	uxth	r5, r3
 8023b2c:	f10a 36ff 	add.w	r6, sl, #4294967295
 8023b30:	f009 0903 	and.w	r9, r9, #3
 8023b34:	463b      	mov	r3, r7
 8023b36:	442e      	add	r6, r5
 8023b38:	464f      	mov	r7, r9
 8023b3a:	b2b6      	uxth	r6, r6
 8023b3c:	4699      	mov	r9, r3
 8023b3e:	e017      	b.n	8023b70 <GUI_DispStringInRectWrap+0xd4>
 8023b40:	2f02      	cmp	r7, #2
 8023b42:	d032      	beq.n	8023baa <GUI_DispStringInRectWrap+0x10e>
 8023b44:	b91f      	cbnz	r7, 8023b4e <GUI_DispStringInRectWrap+0xb2>
 8023b46:	9b00      	ldr	r3, [sp, #0]
 8023b48:	881a      	ldrh	r2, [r3, #0]
 8023b4a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023b4e:	4620      	mov	r0, r4
 8023b50:	4659      	mov	r1, fp
 8023b52:	aa06      	add	r2, sp, #24
 8023b54:	f000 fff2 	bl	8024b3c <GUI__DispLine>
 8023b58:	4620      	mov	r0, r4
 8023b5a:	4641      	mov	r1, r8
 8023b5c:	464a      	mov	r2, r9
 8023b5e:	f005 fa15 	bl	8028f8c <GUI__WrapGetNumBytesToNextLine>
 8023b62:	4404      	add	r4, r0
 8023b64:	4455      	add	r5, sl
 8023b66:	7823      	ldrb	r3, [r4, #0]
 8023b68:	4456      	add	r6, sl
 8023b6a:	b2ad      	uxth	r5, r5
 8023b6c:	b2b6      	uxth	r6, r6
 8023b6e:	b363      	cbz	r3, 8023bca <GUI_DispStringInRectWrap+0x12e>
 8023b70:	4641      	mov	r1, r8
 8023b72:	464a      	mov	r2, r9
 8023b74:	4620      	mov	r0, r4
 8023b76:	f005 f9f1 	bl	8028f5c <GUI__WrapGetNumCharsDisp>
 8023b7a:	9b02      	ldr	r3, [sp, #8]
 8023b7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8023b80:	4601      	mov	r1, r0
 8023b82:	9b01      	ldr	r3, [sp, #4]
 8023b84:	f8ad 501a 	strh.w	r5, [sp, #26]
 8023b88:	4683      	mov	fp, r0
 8023b8a:	4620      	mov	r0, r4
 8023b8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023b90:	f8ad 601e 	strh.w	r6, [sp, #30]
 8023b94:	f000 ff8e 	bl	8024ab4 <GUI__GetLineDistX>
 8023b98:	2f01      	cmp	r7, #1
 8023b9a:	d1d1      	bne.n	8023b40 <GUI_DispStringInRectWrap+0xa4>
 8023b9c:	9900      	ldr	r1, [sp, #0]
 8023b9e:	888a      	ldrh	r2, [r1, #4]
 8023ba0:	3201      	adds	r2, #1
 8023ba2:	1a10      	subs	r0, r2, r0
 8023ba4:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023ba8:	e7d1      	b.n	8023b4e <GUI_DispStringInRectWrap+0xb2>
 8023baa:	9900      	ldr	r1, [sp, #0]
 8023bac:	880a      	ldrh	r2, [r1, #0]
 8023bae:	f9b1 e004 	ldrsh.w	lr, [r1, #4]
 8023bb2:	b211      	sxth	r1, r2
 8023bb4:	ebc1 010e 	rsb	r1, r1, lr
 8023bb8:	1a08      	subs	r0, r1, r0
 8023bba:	3001      	adds	r0, #1
 8023bbc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8023bc0:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8023bc4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023bc8:	e7c1      	b.n	8023b4e <GUI_DispStringInRectWrap+0xb2>
 8023bca:	9803      	ldr	r0, [sp, #12]
 8023bcc:	f7f8 fd48 	bl	801c660 <WM_SetUserClipRect>
 8023bd0:	f7ff fb02 	bl	80231d8 <GUI_Unlock>
 8023bd4:	b00b      	add	sp, #44	; 0x2c
 8023bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bda:	f7ff fb07 	bl	80231ec <GUI_Lock>
 8023bde:	46a2      	mov	sl, r4
 8023be0:	2600      	movs	r6, #0
 8023be2:	4650      	mov	r0, sl
 8023be4:	4641      	mov	r1, r8
 8023be6:	463a      	mov	r2, r7
 8023be8:	f005 f9d0 	bl	8028f8c <GUI__WrapGetNumBytesToNextLine>
 8023bec:	b110      	cbz	r0, 8023bf4 <GUI_DispStringInRectWrap+0x158>
 8023bee:	4482      	add	sl, r0
 8023bf0:	3601      	adds	r6, #1
 8023bf2:	e7f6      	b.n	8023be2 <GUI_DispStringInRectWrap+0x146>
 8023bf4:	f7ff faf0 	bl	80231d8 <GUI_Unlock>
 8023bf8:	2d08      	cmp	r5, #8
 8023bfa:	d004      	beq.n	8023c06 <GUI_DispStringInRectWrap+0x16a>
 8023bfc:	2d0c      	cmp	r5, #12
 8023bfe:	d009      	beq.n	8023c14 <GUI_DispStringInRectWrap+0x178>
 8023c00:	2d04      	cmp	r5, #4
 8023c02:	f47f af72 	bne.w	8023aea <GUI_DispStringInRectWrap+0x4e>
 8023c06:	9905      	ldr	r1, [sp, #20]
 8023c08:	1c4b      	adds	r3, r1, #1
 8023c0a:	fb06 361b 	mls	r6, r6, fp, r3
 8023c0e:	b2b6      	uxth	r6, r6
 8023c10:	9604      	str	r6, [sp, #16]
 8023c12:	e76a      	b.n	8023aea <GUI_DispStringInRectWrap+0x4e>
 8023c14:	9904      	ldr	r1, [sp, #16]
 8023c16:	9a05      	ldr	r2, [sp, #20]
 8023c18:	b213      	sxth	r3, r2
 8023c1a:	b20a      	sxth	r2, r1
 8023c1c:	1a9b      	subs	r3, r3, r2
 8023c1e:	3301      	adds	r3, #1
 8023c20:	fb06 361b 	mls	r6, r6, fp, r3
 8023c24:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8023c28:	eb01 0566 	add.w	r5, r1, r6, asr #1
 8023c2c:	b2ad      	uxth	r5, r5
 8023c2e:	9504      	str	r5, [sp, #16]
 8023c30:	e75b      	b.n	8023aea <GUI_DispStringInRectWrap+0x4e>
 8023c32:	bf00      	nop

08023c34 <GUI_GetStringDistX>:
 8023c34:	b510      	push	{r4, lr}
 8023c36:	4604      	mov	r4, r0
 8023c38:	f7ff f852 	bl	8022ce0 <GUI__GetNumChars>
 8023c3c:	4601      	mov	r1, r0
 8023c3e:	4620      	mov	r0, r4
 8023c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c44:	f000 bf36 	b.w	8024ab4 <GUI__GetLineDistX>

08023c48 <GUI_DEVICE__GetpDriver>:
 8023c48:	2801      	cmp	r0, #1
 8023c4a:	dc0e      	bgt.n	8023c6a <GUI_DEVICE__GetpDriver+0x22>
 8023c4c:	4b08      	ldr	r3, [pc, #32]	; (8023c70 <GUI_DEVICE__GetpDriver+0x28>)
 8023c4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8023c52:	b158      	cbz	r0, 8023c6c <GUI_DEVICE__GetpDriver+0x24>
 8023c54:	68c3      	ldr	r3, [r0, #12]
 8023c56:	681b      	ldr	r3, [r3, #0]
 8023c58:	b91b      	cbnz	r3, 8023c62 <GUI_DEVICE__GetpDriver+0x1a>
 8023c5a:	e008      	b.n	8023c6e <GUI_DEVICE__GetpDriver+0x26>
 8023c5c:	68c3      	ldr	r3, [r0, #12]
 8023c5e:	681b      	ldr	r3, [r3, #0]
 8023c60:	b123      	cbz	r3, 8023c6c <GUI_DEVICE__GetpDriver+0x24>
 8023c62:	6800      	ldr	r0, [r0, #0]
 8023c64:	2800      	cmp	r0, #0
 8023c66:	d1f9      	bne.n	8023c5c <GUI_DEVICE__GetpDriver+0x14>
 8023c68:	4770      	bx	lr
 8023c6a:	2000      	movs	r0, #0
 8023c6c:	4770      	bx	lr
 8023c6e:	4770      	bx	lr
 8023c70:	2002cc24 	.word	0x2002cc24

08023c74 <GUI_DEVICE_Delete>:
 8023c74:	f001 bcf0 	b.w	8025658 <GUI_ALLOC_FreeFixedBlock>

08023c78 <GUI_DEVICE_Create>:
 8023c78:	2b01      	cmp	r3, #1
 8023c7a:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
 8023c7e:	461d      	mov	r5, r3
 8023c80:	4607      	mov	r7, r0
 8023c82:	460e      	mov	r6, r1
 8023c84:	4690      	mov	r8, r2
 8023c86:	dc0f      	bgt.n	8023ca8 <GUI_DEVICE_Create+0x30>
 8023c88:	201c      	movs	r0, #28
 8023c8a:	f001 fcef 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8023c8e:	b158      	cbz	r0, 8023ca8 <GUI_DEVICE_Create+0x30>
 8023c90:	b16e      	cbz	r6, 8023cae <GUI_DEVICE_Create+0x36>
 8023c92:	6106      	str	r6, [r0, #16]
 8023c94:	2300      	movs	r3, #0
 8023c96:	6083      	str	r3, [r0, #8]
 8023c98:	6185      	str	r5, [r0, #24]
 8023c9a:	f8a0 8014 	strh.w	r8, [r0, #20]
 8023c9e:	60c7      	str	r7, [r0, #12]
 8023ca0:	6003      	str	r3, [r0, #0]
 8023ca2:	6043      	str	r3, [r0, #4]
 8023ca4:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 8023ca8:	2000      	movs	r0, #0
 8023caa:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
 8023cae:	4b06      	ldr	r3, [pc, #24]	; (8023cc8 <GUI_DEVICE_Create+0x50>)
 8023cb0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8023cb4:	b909      	cbnz	r1, 8023cba <GUI_DEVICE_Create+0x42>
 8023cb6:	e7ed      	b.n	8023c94 <GUI_DEVICE_Create+0x1c>
 8023cb8:	4619      	mov	r1, r3
 8023cba:	680b      	ldr	r3, [r1, #0]
 8023cbc:	2b00      	cmp	r3, #0
 8023cbe:	d1fb      	bne.n	8023cb8 <GUI_DEVICE_Create+0x40>
 8023cc0:	690b      	ldr	r3, [r1, #16]
 8023cc2:	6103      	str	r3, [r0, #16]
 8023cc4:	e7e6      	b.n	8023c94 <GUI_DEVICE_Create+0x1c>
 8023cc6:	bf00      	nop
 8023cc8:	2002cc24 	.word	0x2002cc24

08023ccc <GUI_DEVICE_Unlink>:
 8023ccc:	4a0b      	ldr	r2, [pc, #44]	; (8023cfc <GUI_DEVICE_Unlink+0x30>)
 8023cce:	6981      	ldr	r1, [r0, #24]
 8023cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023cd4:	4298      	cmp	r0, r3
 8023cd6:	6803      	ldr	r3, [r0, #0]
 8023cd8:	d009      	beq.n	8023cee <GUI_DEVICE_Unlink+0x22>
 8023cda:	6842      	ldr	r2, [r0, #4]
 8023cdc:	b10a      	cbz	r2, 8023ce2 <GUI_DEVICE_Unlink+0x16>
 8023cde:	6013      	str	r3, [r2, #0]
 8023ce0:	6803      	ldr	r3, [r0, #0]
 8023ce2:	b103      	cbz	r3, 8023ce6 <GUI_DEVICE_Unlink+0x1a>
 8023ce4:	605a      	str	r2, [r3, #4]
 8023ce6:	2300      	movs	r3, #0
 8023ce8:	6003      	str	r3, [r0, #0]
 8023cea:	6043      	str	r3, [r0, #4]
 8023cec:	4770      	bx	lr
 8023cee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8023cf2:	2b00      	cmp	r3, #0
 8023cf4:	d0f1      	beq.n	8023cda <GUI_DEVICE_Unlink+0xe>
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	605a      	str	r2, [r3, #4]
 8023cfa:	e7ee      	b.n	8023cda <GUI_DEVICE_Unlink+0xe>
 8023cfc:	2002cc24 	.word	0x2002cc24

08023d00 <GUI_DEVICE_Link>:
 8023d00:	b430      	push	{r4, r5}
 8023d02:	4601      	mov	r1, r0
 8023d04:	b110      	cbz	r0, 8023d0c <GUI_DEVICE_Link+0xc>
 8023d06:	6984      	ldr	r4, [r0, #24]
 8023d08:	2c01      	cmp	r4, #1
 8023d0a:	dd02      	ble.n	8023d12 <GUI_DEVICE_Link+0x12>
 8023d0c:	2001      	movs	r0, #1
 8023d0e:	bc30      	pop	{r4, r5}
 8023d10:	4770      	bx	lr
 8023d12:	4b1e      	ldr	r3, [pc, #120]	; (8023d8c <GUI_DEVICE_Link+0x8c>)
 8023d14:	4d1e      	ldr	r5, [pc, #120]	; (8023d90 <GUI_DEVICE_Link+0x90>)
 8023d16:	781a      	ldrb	r2, [r3, #0]
 8023d18:	4294      	cmp	r4, r2
 8023d1a:	bfa4      	itt	ge
 8023d1c:	1c62      	addge	r2, r4, #1
 8023d1e:	701a      	strbge	r2, [r3, #0]
 8023d20:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8023d24:	b90b      	cbnz	r3, 8023d2a <GUI_DEVICE_Link+0x2a>
 8023d26:	e02c      	b.n	8023d82 <GUI_DEVICE_Link+0x82>
 8023d28:	4613      	mov	r3, r2
 8023d2a:	685a      	ldr	r2, [r3, #4]
 8023d2c:	2a00      	cmp	r2, #0
 8023d2e:	d1fb      	bne.n	8023d28 <GUI_DEVICE_Link+0x28>
 8023d30:	68ca      	ldr	r2, [r1, #12]
 8023d32:	6810      	ldr	r0, [r2, #0]
 8023d34:	e002      	b.n	8023d3c <GUI_DEVICE_Link+0x3c>
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	d0e7      	beq.n	8023d0c <GUI_DEVICE_Link+0xc>
 8023d3c:	68da      	ldr	r2, [r3, #12]
 8023d3e:	6812      	ldr	r2, [r2, #0]
 8023d40:	4282      	cmp	r2, r0
 8023d42:	dcf8      	bgt.n	8023d36 <GUI_DEVICE_Link+0x36>
 8023d44:	4290      	cmp	r0, r2
 8023d46:	d00c      	beq.n	8023d62 <GUI_DEVICE_Link+0x62>
 8023d48:	685a      	ldr	r2, [r3, #4]
 8023d4a:	b1ba      	cbz	r2, 8023d7c <GUI_DEVICE_Link+0x7c>
 8023d4c:	6011      	str	r1, [r2, #0]
 8023d4e:	604a      	str	r2, [r1, #4]
 8023d50:	428b      	cmp	r3, r1
 8023d52:	bf14      	ite	ne
 8023d54:	461a      	movne	r2, r3
 8023d56:	2200      	moveq	r2, #0
 8023d58:	6059      	str	r1, [r3, #4]
 8023d5a:	2000      	movs	r0, #0
 8023d5c:	600a      	str	r2, [r1, #0]
 8023d5e:	bc30      	pop	{r4, r5}
 8023d60:	4770      	bx	lr
 8023d62:	8a8a      	ldrh	r2, [r1, #20]
 8023d64:	2a01      	cmp	r2, #1
 8023d66:	d1ef      	bne.n	8023d48 <GUI_DEVICE_Link+0x48>
 8023d68:	e004      	b.n	8023d74 <GUI_DEVICE_Link+0x74>
 8023d6a:	68d3      	ldr	r3, [r2, #12]
 8023d6c:	681b      	ldr	r3, [r3, #0]
 8023d6e:	4283      	cmp	r3, r0
 8023d70:	4613      	mov	r3, r2
 8023d72:	dbe9      	blt.n	8023d48 <GUI_DEVICE_Link+0x48>
 8023d74:	681a      	ldr	r2, [r3, #0]
 8023d76:	2a00      	cmp	r2, #0
 8023d78:	d1f7      	bne.n	8023d6a <GUI_DEVICE_Link+0x6a>
 8023d7a:	e7e5      	b.n	8023d48 <GUI_DEVICE_Link+0x48>
 8023d7c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
 8023d80:	e7e6      	b.n	8023d50 <GUI_DEVICE_Link+0x50>
 8023d82:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8023d86:	4618      	mov	r0, r3
 8023d88:	e7c1      	b.n	8023d0e <GUI_DEVICE_Link+0xe>
 8023d8a:	bf00      	nop
 8023d8c:	2002cbd2 	.word	0x2002cbd2
 8023d90:	2002cc24 	.word	0x2002cc24

08023d94 <GUI_DEVICE_CreateAndLink>:
 8023d94:	2b01      	cmp	r3, #1
 8023d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d9a:	461e      	mov	r6, r3
 8023d9c:	4607      	mov	r7, r0
 8023d9e:	460c      	mov	r4, r1
 8023da0:	4690      	mov	r8, r2
 8023da2:	dc32      	bgt.n	8023e0a <GUI_DEVICE_CreateAndLink+0x76>
 8023da4:	201c      	movs	r0, #28
 8023da6:	f001 fc61 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8023daa:	4605      	mov	r5, r0
 8023dac:	2800      	cmp	r0, #0
 8023dae:	d02c      	beq.n	8023e0a <GUI_DEVICE_CreateAndLink+0x76>
 8023db0:	2c00      	cmp	r4, #0
 8023db2:	d030      	beq.n	8023e16 <GUI_DEVICE_CreateAndLink+0x82>
 8023db4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8023e74 <GUI_DEVICE_CreateAndLink+0xe0>
 8023db8:	6104      	str	r4, [r0, #16]
 8023dba:	2300      	movs	r3, #0
 8023dbc:	4a2c      	ldr	r2, [pc, #176]	; (8023e70 <GUI_DEVICE_CreateAndLink+0xdc>)
 8023dbe:	602b      	str	r3, [r5, #0]
 8023dc0:	7811      	ldrb	r1, [r2, #0]
 8023dc2:	606b      	str	r3, [r5, #4]
 8023dc4:	428e      	cmp	r6, r1
 8023dc6:	f85c 1026 	ldr.w	r1, [ip, r6, lsl #2]
 8023dca:	60ab      	str	r3, [r5, #8]
 8023dcc:	bfa4      	itt	ge
 8023dce:	1c73      	addge	r3, r6, #1
 8023dd0:	7013      	strbge	r3, [r2, #0]
 8023dd2:	61ae      	str	r6, [r5, #24]
 8023dd4:	f8a5 8014 	strh.w	r8, [r5, #20]
 8023dd8:	60ef      	str	r7, [r5, #12]
 8023dda:	4b26      	ldr	r3, [pc, #152]	; (8023e74 <GUI_DEVICE_CreateAndLink+0xe0>)
 8023ddc:	b909      	cbnz	r1, 8023de2 <GUI_DEVICE_CreateAndLink+0x4e>
 8023dde:	e043      	b.n	8023e68 <GUI_DEVICE_CreateAndLink+0xd4>
 8023de0:	4621      	mov	r1, r4
 8023de2:	684c      	ldr	r4, [r1, #4]
 8023de4:	2c00      	cmp	r4, #0
 8023de6:	d1fb      	bne.n	8023de0 <GUI_DEVICE_CreateAndLink+0x4c>
 8023de8:	683b      	ldr	r3, [r7, #0]
 8023dea:	68c8      	ldr	r0, [r1, #12]
 8023dec:	6800      	ldr	r0, [r0, #0]
 8023dee:	4298      	cmp	r0, r3
 8023df0:	dd1e      	ble.n	8023e30 <GUI_DEVICE_CreateAndLink+0x9c>
 8023df2:	6809      	ldr	r1, [r1, #0]
 8023df4:	2900      	cmp	r1, #0
 8023df6:	d1f8      	bne.n	8023dea <GUI_DEVICE_CreateAndLink+0x56>
 8023df8:	b953      	cbnz	r3, 8023e10 <GUI_DEVICE_CreateAndLink+0x7c>
 8023dfa:	4b1f      	ldr	r3, [pc, #124]	; (8023e78 <GUI_DEVICE_CreateAndLink+0xe4>)
 8023dfc:	3616      	adds	r6, #22
 8023dfe:	681b      	ldr	r3, [r3, #0]
 8023e00:	4628      	mov	r0, r5
 8023e02:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8023e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e0a:	2000      	movs	r0, #0
 8023e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e10:	4628      	mov	r0, r5
 8023e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e16:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023e74 <GUI_DEVICE_CreateAndLink+0xe0>
 8023e1a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8023e1e:	b90a      	cbnz	r2, 8023e24 <GUI_DEVICE_CreateAndLink+0x90>
 8023e20:	e7cb      	b.n	8023dba <GUI_DEVICE_CreateAndLink+0x26>
 8023e22:	461a      	mov	r2, r3
 8023e24:	6813      	ldr	r3, [r2, #0]
 8023e26:	2b00      	cmp	r3, #0
 8023e28:	d1fb      	bne.n	8023e22 <GUI_DEVICE_CreateAndLink+0x8e>
 8023e2a:	6913      	ldr	r3, [r2, #16]
 8023e2c:	612b      	str	r3, [r5, #16]
 8023e2e:	e7c4      	b.n	8023dba <GUI_DEVICE_CreateAndLink+0x26>
 8023e30:	d00a      	beq.n	8023e48 <GUI_DEVICE_CreateAndLink+0xb4>
 8023e32:	684a      	ldr	r2, [r1, #4]
 8023e34:	b1aa      	cbz	r2, 8023e62 <GUI_DEVICE_CreateAndLink+0xce>
 8023e36:	6015      	str	r5, [r2, #0]
 8023e38:	606a      	str	r2, [r5, #4]
 8023e3a:	428d      	cmp	r5, r1
 8023e3c:	bf14      	ite	ne
 8023e3e:	460a      	movne	r2, r1
 8023e40:	2200      	moveq	r2, #0
 8023e42:	604d      	str	r5, [r1, #4]
 8023e44:	602a      	str	r2, [r5, #0]
 8023e46:	e7d7      	b.n	8023df8 <GUI_DEVICE_CreateAndLink+0x64>
 8023e48:	f1b8 0f01 	cmp.w	r8, #1
 8023e4c:	d1f1      	bne.n	8023e32 <GUI_DEVICE_CreateAndLink+0x9e>
 8023e4e:	e004      	b.n	8023e5a <GUI_DEVICE_CreateAndLink+0xc6>
 8023e50:	68d1      	ldr	r1, [r2, #12]
 8023e52:	6809      	ldr	r1, [r1, #0]
 8023e54:	4281      	cmp	r1, r0
 8023e56:	4611      	mov	r1, r2
 8023e58:	dbeb      	blt.n	8023e32 <GUI_DEVICE_CreateAndLink+0x9e>
 8023e5a:	680a      	ldr	r2, [r1, #0]
 8023e5c:	2a00      	cmp	r2, #0
 8023e5e:	d1f7      	bne.n	8023e50 <GUI_DEVICE_CreateAndLink+0xbc>
 8023e60:	e7e7      	b.n	8023e32 <GUI_DEVICE_CreateAndLink+0x9e>
 8023e62:	f84c 5026 	str.w	r5, [ip, r6, lsl #2]
 8023e66:	e7e8      	b.n	8023e3a <GUI_DEVICE_CreateAndLink+0xa6>
 8023e68:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8023e6c:	683b      	ldr	r3, [r7, #0]
 8023e6e:	e7c3      	b.n	8023df8 <GUI_DEVICE_CreateAndLink+0x64>
 8023e70:	2002cbd2 	.word	0x2002cbd2
 8023e74:	2002cc24 	.word	0x2002cc24
 8023e78:	20000280 	.word	0x20000280

08023e7c <GUI_DEVICE_UnlinkTaskDevices>:
 8023e7c:	2000      	movs	r0, #0
 8023e7e:	4770      	bx	lr

08023e80 <GUI_DEVICE_LinkDevices>:
 8023e80:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8023e84:	2800      	cmp	r0, #0
 8023e86:	d037      	beq.n	8023ef8 <GUI_DEVICE_LinkDevices+0x78>
 8023e88:	6984      	ldr	r4, [r0, #24]
 8023e8a:	4f27      	ldr	r7, [pc, #156]	; (8023f28 <GUI_DEVICE_LinkDevices+0xa8>)
 8023e8c:	4e27      	ldr	r6, [pc, #156]	; (8023f2c <GUI_DEVICE_LinkDevices+0xac>)
 8023e8e:	783d      	ldrb	r5, [r7, #0]
 8023e90:	6801      	ldr	r1, [r0, #0]
 8023e92:	2c01      	cmp	r4, #1
 8023e94:	46b4      	mov	ip, r6
 8023e96:	dd06      	ble.n	8023ea6 <GUI_DEVICE_LinkDevices+0x26>
 8023e98:	2900      	cmp	r1, #0
 8023e9a:	d02c      	beq.n	8023ef6 <GUI_DEVICE_LinkDevices+0x76>
 8023e9c:	4608      	mov	r0, r1
 8023e9e:	6984      	ldr	r4, [r0, #24]
 8023ea0:	6801      	ldr	r1, [r0, #0]
 8023ea2:	2c01      	cmp	r4, #1
 8023ea4:	dcf8      	bgt.n	8023e98 <GUI_DEVICE_LinkDevices+0x18>
 8023ea6:	42ac      	cmp	r4, r5
 8023ea8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8023eac:	bfa4      	itt	ge
 8023eae:	1c65      	addge	r5, r4, #1
 8023eb0:	b2ed      	uxtbge	r5, r5
 8023eb2:	b90b      	cbnz	r3, 8023eb8 <GUI_DEVICE_LinkDevices+0x38>
 8023eb4:	e035      	b.n	8023f22 <GUI_DEVICE_LinkDevices+0xa2>
 8023eb6:	4613      	mov	r3, r2
 8023eb8:	685a      	ldr	r2, [r3, #4]
 8023eba:	2a00      	cmp	r2, #0
 8023ebc:	d1fb      	bne.n	8023eb6 <GUI_DEVICE_LinkDevices+0x36>
 8023ebe:	68c2      	ldr	r2, [r0, #12]
 8023ec0:	f8d2 8000 	ldr.w	r8, [r2]
 8023ec4:	68da      	ldr	r2, [r3, #12]
 8023ec6:	6812      	ldr	r2, [r2, #0]
 8023ec8:	4542      	cmp	r2, r8
 8023eca:	dd06      	ble.n	8023eda <GUI_DEVICE_LinkDevices+0x5a>
 8023ecc:	681b      	ldr	r3, [r3, #0]
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	d0e2      	beq.n	8023e98 <GUI_DEVICE_LinkDevices+0x18>
 8023ed2:	68da      	ldr	r2, [r3, #12]
 8023ed4:	6812      	ldr	r2, [r2, #0]
 8023ed6:	4542      	cmp	r2, r8
 8023ed8:	dcf8      	bgt.n	8023ecc <GUI_DEVICE_LinkDevices+0x4c>
 8023eda:	4590      	cmp	r8, r2
 8023edc:	d00f      	beq.n	8023efe <GUI_DEVICE_LinkDevices+0x7e>
 8023ede:	685a      	ldr	r2, [r3, #4]
 8023ee0:	b19a      	cbz	r2, 8023f0a <GUI_DEVICE_LinkDevices+0x8a>
 8023ee2:	6010      	str	r0, [r2, #0]
 8023ee4:	6042      	str	r2, [r0, #4]
 8023ee6:	4298      	cmp	r0, r3
 8023ee8:	bf14      	ite	ne
 8023eea:	461a      	movne	r2, r3
 8023eec:	2200      	moveq	r2, #0
 8023eee:	6058      	str	r0, [r3, #4]
 8023ef0:	6002      	str	r2, [r0, #0]
 8023ef2:	2900      	cmp	r1, #0
 8023ef4:	d1d2      	bne.n	8023e9c <GUI_DEVICE_LinkDevices+0x1c>
 8023ef6:	703d      	strb	r5, [r7, #0]
 8023ef8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8023efc:	4770      	bx	lr
 8023efe:	8a82      	ldrh	r2, [r0, #20]
 8023f00:	2a01      	cmp	r2, #1
 8023f02:	d00a      	beq.n	8023f1a <GUI_DEVICE_LinkDevices+0x9a>
 8023f04:	685a      	ldr	r2, [r3, #4]
 8023f06:	2a00      	cmp	r2, #0
 8023f08:	d1eb      	bne.n	8023ee2 <GUI_DEVICE_LinkDevices+0x62>
 8023f0a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8023f0e:	e7ea      	b.n	8023ee6 <GUI_DEVICE_LinkDevices+0x66>
 8023f10:	68d3      	ldr	r3, [r2, #12]
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	4543      	cmp	r3, r8
 8023f16:	4613      	mov	r3, r2
 8023f18:	dbe1      	blt.n	8023ede <GUI_DEVICE_LinkDevices+0x5e>
 8023f1a:	681a      	ldr	r2, [r3, #0]
 8023f1c:	2a00      	cmp	r2, #0
 8023f1e:	d1f7      	bne.n	8023f10 <GUI_DEVICE_LinkDevices+0x90>
 8023f20:	e7dd      	b.n	8023ede <GUI_DEVICE_LinkDevices+0x5e>
 8023f22:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8023f26:	e7b7      	b.n	8023e98 <GUI_DEVICE_LinkDevices+0x18>
 8023f28:	2002cbd2 	.word	0x2002cbd2
 8023f2c:	2002cc24 	.word	0x2002cc24

08023f30 <_OnExit>:
 8023f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f32:	4e0b      	ldr	r6, [pc, #44]	; (8023f60 <_OnExit+0x30>)
 8023f34:	4d0b      	ldr	r5, [pc, #44]	; (8023f64 <_OnExit+0x34>)
 8023f36:	4f0c      	ldr	r7, [pc, #48]	; (8023f68 <_OnExit+0x38>)
 8023f38:	6833      	ldr	r3, [r6, #0]
 8023f3a:	2400      	movs	r4, #0
 8023f3c:	4621      	mov	r1, r4
 8023f3e:	2270      	movs	r2, #112	; 0x70
 8023f40:	4628      	mov	r0, r5
 8023f42:	603c      	str	r4, [r7, #0]
 8023f44:	4798      	blx	r3
 8023f46:	6833      	ldr	r3, [r6, #0]
 8023f48:	4808      	ldr	r0, [pc, #32]	; (8023f6c <_OnExit+0x3c>)
 8023f4a:	4621      	mov	r1, r4
 8023f4c:	2208      	movs	r2, #8
 8023f4e:	4798      	blx	r3
 8023f50:	4a07      	ldr	r2, [pc, #28]	; (8023f70 <_OnExit+0x40>)
 8023f52:	4908      	ldr	r1, [pc, #32]	; (8023f74 <_OnExit+0x44>)
 8023f54:	4b08      	ldr	r3, [pc, #32]	; (8023f78 <_OnExit+0x48>)
 8023f56:	7014      	strb	r4, [r2, #0]
 8023f58:	600d      	str	r5, [r1, #0]
 8023f5a:	601c      	str	r4, [r3, #0]
 8023f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f5e:	bf00      	nop
 8023f60:	20000254 	.word	0x20000254
 8023f64:	2002b254 	.word	0x2002b254
 8023f68:	2002b2c4 	.word	0x2002b2c4
 8023f6c:	2002cc24 	.word	0x2002cc24
 8023f70:	2002cc0c 	.word	0x2002cc0c
 8023f74:	20000280 	.word	0x20000280
 8023f78:	2002cbe4 	.word	0x2002cbe4

08023f7c <GUI_ClearRect>:
 8023f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023f80:	b082      	sub	sp, #8
 8023f82:	469a      	mov	sl, r3
 8023f84:	4607      	mov	r7, r0
 8023f86:	460d      	mov	r5, r1
 8023f88:	4691      	mov	r9, r2
 8023f8a:	f7ff f92f 	bl	80231ec <GUI_Lock>
 8023f8e:	2004      	movs	r0, #4
 8023f90:	f7fd fc6c 	bl	802186c <LCD_SetDrawMode>
 8023f94:	4b13      	ldr	r3, [pc, #76]	; (8023fe4 <GUI_ClearRect+0x68>)
 8023f96:	681c      	ldr	r4, [r3, #0]
 8023f98:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8023f9a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8023f9c:	4437      	add	r7, r6
 8023f9e:	4425      	add	r5, r4
 8023fa0:	4680      	mov	r8, r0
 8023fa2:	444e      	add	r6, r9
 8023fa4:	4454      	add	r4, sl
 8023fa6:	4668      	mov	r0, sp
 8023fa8:	f8ad 7000 	strh.w	r7, [sp]
 8023fac:	f8ad 6004 	strh.w	r6, [sp, #4]
 8023fb0:	f8ad 5002 	strh.w	r5, [sp, #2]
 8023fb4:	f8ad 4006 	strh.w	r4, [sp, #6]
 8023fb8:	f7fa fbf8 	bl	801e7ac <WM__InitIVRSearch>
 8023fbc:	b148      	cbz	r0, 8023fd2 <GUI_ClearRect+0x56>
 8023fbe:	4638      	mov	r0, r7
 8023fc0:	4629      	mov	r1, r5
 8023fc2:	4632      	mov	r2, r6
 8023fc4:	4623      	mov	r3, r4
 8023fc6:	f7fd fcd9 	bl	802197c <LCD_FillRect>
 8023fca:	f7fa fac9 	bl	801e560 <WM__GetNextIVR>
 8023fce:	2800      	cmp	r0, #0
 8023fd0:	d1f5      	bne.n	8023fbe <GUI_ClearRect+0x42>
 8023fd2:	4640      	mov	r0, r8
 8023fd4:	f7fd fc4a 	bl	802186c <LCD_SetDrawMode>
 8023fd8:	f7ff f8fe 	bl	80231d8 <GUI_Unlock>
 8023fdc:	b002      	add	sp, #8
 8023fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fe2:	bf00      	nop
 8023fe4:	20000280 	.word	0x20000280

08023fe8 <GUI_ClearRectEx>:
 8023fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fec:	b082      	sub	sp, #8
 8023fee:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023ff2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8023ff6:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8023ffa:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8023ffe:	f7ff f8f5 	bl	80231ec <GUI_Lock>
 8024002:	2004      	movs	r0, #4
 8024004:	f7fd fc32 	bl	802186c <LCD_SetDrawMode>
 8024008:	4b13      	ldr	r3, [pc, #76]	; (8024058 <GUI_ClearRectEx+0x70>)
 802400a:	681b      	ldr	r3, [r3, #0]
 802400c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024010:	4680      	mov	r8, r0
 8024012:	4417      	add	r7, r2
 8024014:	4416      	add	r6, r2
 8024016:	441d      	add	r5, r3
 8024018:	441c      	add	r4, r3
 802401a:	4668      	mov	r0, sp
 802401c:	f8ad 7000 	strh.w	r7, [sp]
 8024020:	f8ad 6004 	strh.w	r6, [sp, #4]
 8024024:	f8ad 5002 	strh.w	r5, [sp, #2]
 8024028:	f8ad 4006 	strh.w	r4, [sp, #6]
 802402c:	f7fa fbbe 	bl	801e7ac <WM__InitIVRSearch>
 8024030:	b148      	cbz	r0, 8024046 <GUI_ClearRectEx+0x5e>
 8024032:	4638      	mov	r0, r7
 8024034:	4629      	mov	r1, r5
 8024036:	4632      	mov	r2, r6
 8024038:	4623      	mov	r3, r4
 802403a:	f7fd fc9f 	bl	802197c <LCD_FillRect>
 802403e:	f7fa fa8f 	bl	801e560 <WM__GetNextIVR>
 8024042:	2800      	cmp	r0, #0
 8024044:	d1f5      	bne.n	8024032 <GUI_ClearRectEx+0x4a>
 8024046:	4640      	mov	r0, r8
 8024048:	f7fd fc10 	bl	802186c <LCD_SetDrawMode>
 802404c:	f7ff f8c4 	bl	80231d8 <GUI_Unlock>
 8024050:	b002      	add	sp, #8
 8024052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024056:	bf00      	nop
 8024058:	20000280 	.word	0x20000280

0802405c <GUI_Clear>:
 802405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024060:	2000      	movs	r0, #0
 8024062:	b082      	sub	sp, #8
 8024064:	4601      	mov	r1, r0
 8024066:	f000 fb01 	bl	802466c <GUI_GotoXY>
 802406a:	f7ff f8bf 	bl	80231ec <GUI_Lock>
 802406e:	2004      	movs	r0, #4
 8024070:	f7fd fbfc 	bl	802186c <LCD_SetDrawMode>
 8024074:	4b17      	ldr	r3, [pc, #92]	; (80240d4 <GUI_Clear+0x78>)
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 802407a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 802407c:	f5a6 577f 	sub.w	r7, r6, #16320	; 0x3fc0
 8024080:	f5a4 557f 	sub.w	r5, r4, #16320	; 0x3fc0
 8024084:	f506 567f 	add.w	r6, r6, #16320	; 0x3fc0
 8024088:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 802408c:	4680      	mov	r8, r0
 802408e:	3f3f      	subs	r7, #63	; 0x3f
 8024090:	363f      	adds	r6, #63	; 0x3f
 8024092:	3d3f      	subs	r5, #63	; 0x3f
 8024094:	343f      	adds	r4, #63	; 0x3f
 8024096:	4668      	mov	r0, sp
 8024098:	f8ad 7000 	strh.w	r7, [sp]
 802409c:	f8ad 6004 	strh.w	r6, [sp, #4]
 80240a0:	f8ad 5002 	strh.w	r5, [sp, #2]
 80240a4:	f8ad 4006 	strh.w	r4, [sp, #6]
 80240a8:	f7fa fb80 	bl	801e7ac <WM__InitIVRSearch>
 80240ac:	b148      	cbz	r0, 80240c2 <GUI_Clear+0x66>
 80240ae:	4638      	mov	r0, r7
 80240b0:	4629      	mov	r1, r5
 80240b2:	4632      	mov	r2, r6
 80240b4:	4623      	mov	r3, r4
 80240b6:	f7fd fc61 	bl	802197c <LCD_FillRect>
 80240ba:	f7fa fa51 	bl	801e560 <WM__GetNextIVR>
 80240be:	2800      	cmp	r0, #0
 80240c0:	d1f5      	bne.n	80240ae <GUI_Clear+0x52>
 80240c2:	4640      	mov	r0, r8
 80240c4:	f7fd fbd2 	bl	802186c <LCD_SetDrawMode>
 80240c8:	f7ff f886 	bl	80231d8 <GUI_Unlock>
 80240cc:	b002      	add	sp, #8
 80240ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240d2:	bf00      	nop
 80240d4:	20000280 	.word	0x20000280

080240d8 <GUI__RegisterExit>:
 80240d8:	b480      	push	{r7}
 80240da:	b083      	sub	sp, #12
 80240dc:	af00      	add	r7, sp, #0
 80240de:	6078      	str	r0, [r7, #4]
 80240e0:	4b05      	ldr	r3, [pc, #20]	; (80240f8 <GUI__RegisterExit+0x20>)
 80240e2:	681a      	ldr	r2, [r3, #0]
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	605a      	str	r2, [r3, #4]
 80240e8:	4b03      	ldr	r3, [pc, #12]	; (80240f8 <GUI__RegisterExit+0x20>)
 80240ea:	687a      	ldr	r2, [r7, #4]
 80240ec:	601a      	str	r2, [r3, #0]
 80240ee:	370c      	adds	r7, #12
 80240f0:	46bd      	mov	sp, r7
 80240f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240f6:	4770      	bx	lr
 80240f8:	2002b248 	.word	0x2002b248

080240fc <GUI_Init>:
 80240fc:	b590      	push	{r4, r7, lr}
 80240fe:	b083      	sub	sp, #12
 8024100:	af00      	add	r7, sp, #0
 8024102:	4b71      	ldr	r3, [pc, #452]	; (80242c8 <GUI_Init+0x1cc>)
 8024104:	4a70      	ldr	r2, [pc, #448]	; (80242c8 <GUI_Init+0x1cc>)
 8024106:	6812      	ldr	r2, [r2, #0]
 8024108:	f022 0201 	bic.w	r2, r2, #1
 802410c:	601a      	str	r2, [r3, #0]
 802410e:	4b6f      	ldr	r3, [pc, #444]	; (80242cc <GUI_Init+0x1d0>)
 8024110:	681b      	ldr	r3, [r3, #0]
 8024112:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8024116:	f240 4349 	movw	r3, #1097	; 0x449
 802411a:	429a      	cmp	r2, r3
 802411c:	bf14      	ite	ne
 802411e:	2300      	movne	r3, #0
 8024120:	2301      	moveq	r3, #1
 8024122:	b2da      	uxtb	r2, r3
 8024124:	4b69      	ldr	r3, [pc, #420]	; (80242cc <GUI_Init+0x1d0>)
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	f3c3 010a 	ubfx	r1, r3, #0, #11
 802412c:	f240 4351 	movw	r3, #1105	; 0x451
 8024130:	4299      	cmp	r1, r3
 8024132:	bf14      	ite	ne
 8024134:	2300      	movne	r3, #0
 8024136:	2301      	moveq	r3, #1
 8024138:	b2db      	uxtb	r3, r3
 802413a:	4313      	orrs	r3, r2
 802413c:	b2db      	uxtb	r3, r3
 802413e:	461a      	mov	r2, r3
 8024140:	4b62      	ldr	r3, [pc, #392]	; (80242cc <GUI_Init+0x1d0>)
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8024148:	f240 4352 	movw	r3, #1106	; 0x452
 802414c:	4299      	cmp	r1, r3
 802414e:	bf14      	ite	ne
 8024150:	2300      	movne	r3, #0
 8024152:	2301      	moveq	r3, #1
 8024154:	b2db      	uxtb	r3, r3
 8024156:	4313      	orrs	r3, r2
 8024158:	2b00      	cmp	r3, #0
 802415a:	d010      	beq.n	802417e <GUI_Init+0x82>
 802415c:	4b5c      	ldr	r3, [pc, #368]	; (80242d0 <GUI_Init+0x1d4>)
 802415e:	2201      	movs	r2, #1
 8024160:	601a      	str	r2, [r3, #0]
 8024162:	bf00      	nop
 8024164:	4b5a      	ldr	r3, [pc, #360]	; (80242d0 <GUI_Init+0x1d4>)
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	2b00      	cmp	r3, #0
 802416a:	d1fb      	bne.n	8024164 <GUI_Init+0x68>
 802416c:	4b59      	ldr	r3, [pc, #356]	; (80242d4 <GUI_Init+0x1d8>)
 802416e:	4a5a      	ldr	r2, [pc, #360]	; (80242d8 <GUI_Init+0x1dc>)
 8024170:	601a      	str	r2, [r3, #0]
 8024172:	4b58      	ldr	r3, [pc, #352]	; (80242d4 <GUI_Init+0x1d8>)
 8024174:	681a      	ldr	r2, [r3, #0]
 8024176:	4b59      	ldr	r3, [pc, #356]	; (80242dc <GUI_Init+0x1e0>)
 8024178:	429a      	cmp	r2, r3
 802417a:	d018      	beq.n	80241ae <GUI_Init+0xb2>
 802417c:	e7fe      	b.n	802417c <GUI_Init+0x80>
 802417e:	4b58      	ldr	r3, [pc, #352]	; (80242e0 <GUI_Init+0x1e4>)
 8024180:	681b      	ldr	r3, [r3, #0]
 8024182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024186:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802418a:	d110      	bne.n	80241ae <GUI_Init+0xb2>
 802418c:	4b55      	ldr	r3, [pc, #340]	; (80242e4 <GUI_Init+0x1e8>)
 802418e:	2201      	movs	r2, #1
 8024190:	601a      	str	r2, [r3, #0]
 8024192:	bf00      	nop
 8024194:	4b53      	ldr	r3, [pc, #332]	; (80242e4 <GUI_Init+0x1e8>)
 8024196:	681b      	ldr	r3, [r3, #0]
 8024198:	2b00      	cmp	r3, #0
 802419a:	d1fb      	bne.n	8024194 <GUI_Init+0x98>
 802419c:	4b52      	ldr	r3, [pc, #328]	; (80242e8 <GUI_Init+0x1ec>)
 802419e:	4a4e      	ldr	r2, [pc, #312]	; (80242d8 <GUI_Init+0x1dc>)
 80241a0:	601a      	str	r2, [r3, #0]
 80241a2:	4b51      	ldr	r3, [pc, #324]	; (80242e8 <GUI_Init+0x1ec>)
 80241a4:	681a      	ldr	r2, [r3, #0]
 80241a6:	4b4d      	ldr	r3, [pc, #308]	; (80242dc <GUI_Init+0x1e0>)
 80241a8:	429a      	cmp	r2, r3
 80241aa:	d000      	beq.n	80241ae <GUI_Init+0xb2>
 80241ac:	e7fe      	b.n	80241ac <GUI_Init+0xb0>
 80241ae:	4b4f      	ldr	r3, [pc, #316]	; (80242ec <GUI_Init+0x1f0>)
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	d10e      	bne.n	80241d4 <GUI_Init+0xd8>
 80241b6:	4b4d      	ldr	r3, [pc, #308]	; (80242ec <GUI_Init+0x1f0>)
 80241b8:	2201      	movs	r2, #1
 80241ba:	601a      	str	r2, [r3, #0]
 80241bc:	f7ec fbfa 	bl	80109b4 <GUI_X_Config>
 80241c0:	f7ff f878 	bl	80232b4 <GUITASK_Init>
 80241c4:	f7ed fdc0 	bl	8011d48 <LCD_X_Config>
 80241c8:	4b49      	ldr	r3, [pc, #292]	; (80242f0 <GUI_Init+0x1f4>)
 80241ca:	4a4a      	ldr	r2, [pc, #296]	; (80242f4 <GUI_Init+0x1f8>)
 80241cc:	601a      	str	r2, [r3, #0]
 80241ce:	4848      	ldr	r0, [pc, #288]	; (80242f0 <GUI_Init+0x1f4>)
 80241d0:	f7ff ff82 	bl	80240d8 <GUI__RegisterExit>
 80241d4:	4b48      	ldr	r3, [pc, #288]	; (80242f8 <GUI_Init+0x1fc>)
 80241d6:	222e      	movs	r2, #46	; 0x2e
 80241d8:	701a      	strb	r2, [r3, #0]
 80241da:	f7ec fba4 	bl	8010926 <GUI_X_Init>
 80241de:	4b47      	ldr	r3, [pc, #284]	; (80242fc <GUI_Init+0x200>)
 80241e0:	603b      	str	r3, [r7, #0]
 80241e2:	4b47      	ldr	r3, [pc, #284]	; (8024300 <GUI_Init+0x204>)
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	461a      	mov	r2, r3
 80241e8:	639a      	str	r2, [r3, #56]	; 0x38
 80241ea:	1d19      	adds	r1, r3, #4
 80241ec:	63d9      	str	r1, [r3, #60]	; 0x3c
 80241ee:	641a      	str	r2, [r3, #64]	; 0x40
 80241f0:	f103 0108 	add.w	r1, r3, #8
 80241f4:	683a      	ldr	r2, [r7, #0]
 80241f6:	6151      	str	r1, [r2, #20]
 80241f8:	7c5b      	ldrb	r3, [r3, #17]
 80241fa:	461a      	mov	r2, r3
 80241fc:	4b41      	ldr	r3, [pc, #260]	; (8024304 <GUI_Init+0x208>)
 80241fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024202:	68da      	ldr	r2, [r3, #12]
 8024204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8024206:	6839      	ldr	r1, [r7, #0]
 8024208:	3108      	adds	r1, #8
 802420a:	4618      	mov	r0, r3
 802420c:	4790      	blx	r2
 802420e:	683b      	ldr	r3, [r7, #0]
 8024210:	4a3d      	ldr	r2, [pc, #244]	; (8024308 <GUI_Init+0x20c>)
 8024212:	665a      	str	r2, [r3, #100]	; 0x64
 8024214:	4b3d      	ldr	r3, [pc, #244]	; (802430c <GUI_Init+0x210>)
 8024216:	681a      	ldr	r2, [r3, #0]
 8024218:	683b      	ldr	r3, [r7, #0]
 802421a:	61da      	str	r2, [r3, #28]
 802421c:	4b38      	ldr	r3, [pc, #224]	; (8024300 <GUI_Init+0x204>)
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	f103 0208 	add.w	r2, r3, #8
 8024224:	683b      	ldr	r3, [r7, #0]
 8024226:	615a      	str	r2, [r3, #20]
 8024228:	683b      	ldr	r3, [r7, #0]
 802422a:	2201      	movs	r2, #1
 802422c:	761a      	strb	r2, [r3, #24]
 802422e:	f7f7 fd23 	bl	801bc78 <WM_GetDesktopWindow>
 8024232:	4602      	mov	r2, r0
 8024234:	683b      	ldr	r3, [r7, #0]
 8024236:	649a      	str	r2, [r3, #72]	; 0x48
 8024238:	683b      	ldr	r3, [r7, #0]
 802423a:	2203      	movs	r2, #3
 802423c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8024240:	683b      	ldr	r3, [r7, #0]
 8024242:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8024246:	631a      	str	r2, [r3, #48]	; 0x30
 8024248:	683b      	ldr	r3, [r7, #0]
 802424a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 802424e:	635a      	str	r2, [r3, #52]	; 0x34
 8024250:	4b2f      	ldr	r3, [pc, #188]	; (8024310 <GUI_Init+0x214>)
 8024252:	681b      	ldr	r3, [r3, #0]
 8024254:	4618      	mov	r0, r3
 8024256:	f7fd ff39 	bl	80220cc <LCD_SetBkColor>
 802425a:	4b2e      	ldr	r3, [pc, #184]	; (8024314 <GUI_Init+0x218>)
 802425c:	681b      	ldr	r3, [r3, #0]
 802425e:	4618      	mov	r0, r3
 8024260:	f7fd ff3c 	bl	80220dc <LCD_SetColor>
 8024264:	4b2c      	ldr	r3, [pc, #176]	; (8024318 <GUI_Init+0x21c>)
 8024266:	4a2d      	ldr	r2, [pc, #180]	; (802431c <GUI_Init+0x220>)
 8024268:	601a      	str	r2, [r3, #0]
 802426a:	f7fd fe71 	bl	8021f50 <emWin_LCD_Init>
 802426e:	6078      	str	r0, [r7, #4]
 8024270:	f7fd fa72 	bl	8021758 <LCD_GetXSizeDisplay>
 8024274:	4603      	mov	r3, r0
 8024276:	2b00      	cmp	r3, #0
 8024278:	d004      	beq.n	8024284 <GUI_Init+0x188>
 802427a:	f7fd fa73 	bl	8021764 <LCD_GetYSizeDisplay>
 802427e:	4603      	mov	r3, r0
 8024280:	2b00      	cmp	r3, #0
 8024282:	d109      	bne.n	8024298 <GUI_Init+0x19c>
 8024284:	f7fd fa04 	bl	8021690 <LCD_GetXSizeMax>
 8024288:	4604      	mov	r4, r0
 802428a:	f7fd fa1f 	bl	80216cc <LCD_GetYSizeMax>
 802428e:	4603      	mov	r3, r0
 8024290:	4620      	mov	r0, r4
 8024292:	4619      	mov	r1, r3
 8024294:	f7fd fa56 	bl	8021744 <LCD_SetDisplaySize>
 8024298:	2000      	movs	r0, #0
 802429a:	2100      	movs	r1, #0
 802429c:	f000 fab4 	bl	8024808 <GUI_SetOrg>
 80242a0:	f7fa fd9c 	bl	801eddc <WM_Init>
 80242a4:	f7ff f846 	bl	8023334 <GUITASK_CopyContext>
 80242a8:	4b1d      	ldr	r3, [pc, #116]	; (8024320 <GUI_Init+0x224>)
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	d002      	beq.n	80242b6 <GUI_Init+0x1ba>
 80242b0:	4b1b      	ldr	r3, [pc, #108]	; (8024320 <GUI_Init+0x224>)
 80242b2:	681b      	ldr	r3, [r3, #0]
 80242b4:	4798      	blx	r3
 80242b6:	4b1b      	ldr	r3, [pc, #108]	; (8024324 <GUI_Init+0x228>)
 80242b8:	2201      	movs	r2, #1
 80242ba:	701a      	strb	r2, [r3, #0]
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	4618      	mov	r0, r3
 80242c0:	370c      	adds	r7, #12
 80242c2:	46bd      	mov	sp, r7
 80242c4:	bd90      	pop	{r4, r7, pc}
 80242c6:	bf00      	nop
 80242c8:	e0002000 	.word	0xe0002000
 80242cc:	e0042000 	.word	0xe0042000
 80242d0:	40023008 	.word	0x40023008
 80242d4:	40023000 	.word	0x40023000
 80242d8:	f407a5c2 	.word	0xf407a5c2
 80242dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80242e0:	5c001000 	.word	0x5c001000
 80242e4:	58024c08 	.word	0x58024c08
 80242e8:	58024c00 	.word	0x58024c00
 80242ec:	2002b2c4 	.word	0x2002b2c4
 80242f0:	2002b24c 	.word	0x2002b24c
 80242f4:	08023f31 	.word	0x08023f31
 80242f8:	2002cbd8 	.word	0x2002cbd8
 80242fc:	2002b254 	.word	0x2002b254
 8024300:	20000280 	.word	0x20000280
 8024304:	2002cc24 	.word	0x2002cc24
 8024308:	08031fc0 	.word	0x08031fc0
 802430c:	2000028c 	.word	0x2000028c
 8024310:	20000290 	.word	0x20000290
 8024314:	20000288 	.word	0x20000288
 8024318:	2002cc1c 	.word	0x2002cc1c
 802431c:	08032e40 	.word	0x08032e40
 8024320:	2002cbfc 	.word	0x2002cbfc
 8024324:	2002cc04 	.word	0x2002cc04

08024328 <GUI__InvertRectColors>:
 8024328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802432c:	4c14      	ldr	r4, [pc, #80]	; (8024380 <GUI__InvertRectColors+0x58>)
 802432e:	6825      	ldr	r5, [r4, #0]
 8024330:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8024332:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 8024334:	eb04 0803 	add.w	r8, r4, r3
 8024338:	1865      	adds	r5, r4, r1
 802433a:	4545      	cmp	r5, r8
 802433c:	eb06 0700 	add.w	r7, r6, r0
 8024340:	4416      	add	r6, r2
 8024342:	dc1b      	bgt.n	802437c <GUI__InvertRectColors+0x54>
 8024344:	42b7      	cmp	r7, r6
 8024346:	dc14      	bgt.n	8024372 <GUI__InvertRectColors+0x4a>
 8024348:	463c      	mov	r4, r7
 802434a:	4629      	mov	r1, r5
 802434c:	4620      	mov	r0, r4
 802434e:	f004 fc95 	bl	8028c7c <LCD_GetPixelIndex>
 8024352:	f7fd fe93 	bl	802207c <LCD_Index2Color>
 8024356:	f080 10ff 	eor.w	r0, r0, #16711935	; 0xff00ff
 802435a:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 802435e:	f7fd fe7d 	bl	802205c <LCD_Color2Index>
 8024362:	4629      	mov	r1, r5
 8024364:	4602      	mov	r2, r0
 8024366:	4620      	mov	r0, r4
 8024368:	3401      	adds	r4, #1
 802436a:	f7fd febf 	bl	80220ec <LCD_SetPixelIndex>
 802436e:	42a6      	cmp	r6, r4
 8024370:	daeb      	bge.n	802434a <GUI__InvertRectColors+0x22>
 8024372:	3501      	adds	r5, #1
 8024374:	45a8      	cmp	r8, r5
 8024376:	dae5      	bge.n	8024344 <GUI__InvertRectColors+0x1c>
 8024378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024380:	20000280 	.word	0x20000280

08024384 <GUI_AddSign>:
 8024384:	2800      	cmp	r0, #0
 8024386:	b410      	push	{r4}
 8024388:	dd07      	ble.n	802439a <GUI_AddSign+0x16>
 802438a:	680b      	ldr	r3, [r1, #0]
 802438c:	222b      	movs	r2, #43	; 0x2b
 802438e:	1c5c      	adds	r4, r3, #1
 8024390:	600c      	str	r4, [r1, #0]
 8024392:	701a      	strb	r2, [r3, #0]
 8024394:	680b      	ldr	r3, [r1, #0]
 8024396:	2200      	movs	r2, #0
 8024398:	701a      	strb	r2, [r3, #0]
 802439a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802439e:	4770      	bx	lr

080243a0 <GUI_AddDecShift>:
 80243a0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80243a4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80243a8:	d062      	beq.n	8024470 <GUI_AddDecShift+0xd0>
 80243aa:	2800      	cmp	r0, #0
 80243ac:	db6b      	blt.n	8024486 <GUI_AddDecShift+0xe6>
 80243ae:	2400      	movs	r4, #0
 80243b0:	1b09      	subs	r1, r1, r4
 80243b2:	b2c9      	uxtb	r1, r1
 80243b4:	2400      	movs	r4, #0
 80243b6:	b10a      	cbz	r2, 80243bc <GUI_AddDecShift+0x1c>
 80243b8:	3901      	subs	r1, #1
 80243ba:	b2c9      	uxtb	r1, r1
 80243bc:	b361      	cbz	r1, 8024418 <GUI_AddDecShift+0x78>
 80243be:	4f36      	ldr	r7, [pc, #216]	; (8024498 <GUI_AddDecShift+0xf8>)
 80243c0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 802449c <GUI_AddDecShift+0xfc>
 80243c4:	2c00      	cmp	r4, #0
 80243c6:	d14e      	bne.n	8024466 <GUI_AddDecShift+0xc6>
 80243c8:	1e4e      	subs	r6, r1, #1
 80243ca:	4291      	cmp	r1, r2
 80243cc:	b2f6      	uxtb	r6, r6
 80243ce:	d016      	beq.n	80243fe <GUI_AddDecShift+0x5e>
 80243d0:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 80243d4:	fb90 f4f5 	sdiv	r4, r0, r5
 80243d8:	b2e4      	uxtb	r4, r4
 80243da:	2c0a      	cmp	r4, #10
 80243dc:	d81c      	bhi.n	8024418 <GUI_AddDecShift+0x78>
 80243de:	fb05 0014 	mls	r0, r5, r4, r0
 80243e2:	681d      	ldr	r5, [r3, #0]
 80243e4:	bf1d      	ittte	ne
 80243e6:	3430      	addne	r4, #48	; 0x30
 80243e8:	4631      	movne	r1, r6
 80243ea:	b2e4      	uxtbne	r4, r4
 80243ec:	2431      	moveq	r4, #49	; 0x31
 80243ee:	1c6e      	adds	r6, r5, #1
 80243f0:	601e      	str	r6, [r3, #0]
 80243f2:	702c      	strb	r4, [r5, #0]
 80243f4:	b181      	cbz	r1, 8024418 <GUI_AddDecShift+0x78>
 80243f6:	1e4e      	subs	r6, r1, #1
 80243f8:	4291      	cmp	r1, r2
 80243fa:	b2f6      	uxtb	r6, r6
 80243fc:	d1e8      	bne.n	80243d0 <GUI_AddDecShift+0x30>
 80243fe:	681c      	ldr	r4, [r3, #0]
 8024400:	1c65      	adds	r5, r4, #1
 8024402:	601d      	str	r5, [r3, #0]
 8024404:	f89c 5000 	ldrb.w	r5, [ip]
 8024408:	7025      	strb	r5, [r4, #0]
 802440a:	f857 5026 	ldr.w	r5, [r7, r6, lsl #2]
 802440e:	fb90 f4f5 	sdiv	r4, r0, r5
 8024412:	b2e4      	uxtb	r4, r4
 8024414:	2c0a      	cmp	r4, #10
 8024416:	d9e2      	bls.n	80243de <GUI_AddDecShift+0x3e>
 8024418:	681b      	ldr	r3, [r3, #0]
 802441a:	2200      	movs	r2, #0
 802441c:	701a      	strb	r2, [r3, #0]
 802441e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8024422:	4770      	bx	lr
 8024424:	681c      	ldr	r4, [r3, #0]
 8024426:	1c66      	adds	r6, r4, #1
 8024428:	601e      	str	r6, [r3, #0]
 802442a:	f89c 6000 	ldrb.w	r6, [ip]
 802442e:	7026      	strb	r6, [r4, #0]
 8024430:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 8024434:	fb90 f4f6 	sdiv	r4, r0, r6
 8024438:	b2e4      	uxtb	r4, r4
 802443a:	2c0a      	cmp	r4, #10
 802443c:	d8ec      	bhi.n	8024418 <GUI_AddDecShift+0x78>
 802443e:	f104 0801 	add.w	r8, r4, #1
 8024442:	fb06 0014 	mls	r0, r6, r4, r0
 8024446:	b90d      	cbnz	r5, 802444c <GUI_AddDecShift+0xac>
 8024448:	fa5f f488 	uxtb.w	r4, r8
 802444c:	2c0a      	cmp	r4, #10
 802444e:	bf18      	it	ne
 8024450:	4629      	movne	r1, r5
 8024452:	681d      	ldr	r5, [r3, #0]
 8024454:	bf1a      	itte	ne
 8024456:	3430      	addne	r4, #48	; 0x30
 8024458:	b2e4      	uxtbne	r4, r4
 802445a:	2431      	moveq	r4, #49	; 0x31
 802445c:	1c6e      	adds	r6, r5, #1
 802445e:	601e      	str	r6, [r3, #0]
 8024460:	702c      	strb	r4, [r5, #0]
 8024462:	2900      	cmp	r1, #0
 8024464:	d0d8      	beq.n	8024418 <GUI_AddDecShift+0x78>
 8024466:	1e4d      	subs	r5, r1, #1
 8024468:	4291      	cmp	r1, r2
 802446a:	b2ed      	uxtb	r5, r5
 802446c:	d1e0      	bne.n	8024430 <GUI_AddDecShift+0x90>
 802446e:	e7d9      	b.n	8024424 <GUI_AddDecShift+0x84>
 8024470:	681c      	ldr	r4, [r3, #0]
 8024472:	3901      	subs	r1, #1
 8024474:	1c60      	adds	r0, r4, #1
 8024476:	252d      	movs	r5, #45	; 0x2d
 8024478:	6018      	str	r0, [r3, #0]
 802447a:	b2c9      	uxtb	r1, r1
 802447c:	7025      	strb	r5, [r4, #0]
 802447e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8024482:	2401      	movs	r4, #1
 8024484:	e797      	b.n	80243b6 <GUI_AddDecShift+0x16>
 8024486:	681d      	ldr	r5, [r3, #0]
 8024488:	262d      	movs	r6, #45	; 0x2d
 802448a:	1c6c      	adds	r4, r5, #1
 802448c:	601c      	str	r4, [r3, #0]
 802448e:	4240      	negs	r0, r0
 8024490:	2401      	movs	r4, #1
 8024492:	702e      	strb	r6, [r5, #0]
 8024494:	e78c      	b.n	80243b0 <GUI_AddDecShift+0x10>
 8024496:	bf00      	nop
 8024498:	08031fc8 	.word	0x08031fc8
 802449c:	2002cbd8 	.word	0x2002cbd8

080244a0 <GUI_CalcColorDist>:
 80244a0:	b2c2      	uxtb	r2, r0
 80244a2:	b2cb      	uxtb	r3, r1
 80244a4:	1ad3      	subs	r3, r2, r3
 80244a6:	b29b      	uxth	r3, r3
 80244a8:	b29a      	uxth	r2, r3
 80244aa:	b430      	push	{r4, r5}
 80244ac:	0414      	lsls	r4, r2, #16
 80244ae:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80244b2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80244b6:	ebc5 0404 	rsb	r4, r5, r4
 80244ba:	b2a4      	uxth	r4, r4
 80244bc:	bf48      	it	mi
 80244be:	425a      	negmi	r2, r3
 80244c0:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80244c4:	b2a3      	uxth	r3, r4
 80244c6:	bf48      	it	mi
 80244c8:	b292      	uxthmi	r2, r2
 80244ca:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80244ce:	041d      	lsls	r5, r3, #16
 80244d0:	bf48      	it	mi
 80244d2:	4263      	negmi	r3, r4
 80244d4:	b289      	uxth	r1, r1
 80244d6:	b288      	uxth	r0, r1
 80244d8:	fb12 f202 	smulbb	r2, r2, r2
 80244dc:	bf48      	it	mi
 80244de:	b29b      	uxthmi	r3, r3
 80244e0:	fb13 2303 	smlabb	r3, r3, r3, r2
 80244e4:	0402      	lsls	r2, r0, #16
 80244e6:	bf44      	itt	mi
 80244e8:	4248      	negmi	r0, r1
 80244ea:	b280      	uxthmi	r0, r0
 80244ec:	fb00 3000 	mla	r0, r0, r0, r3
 80244f0:	bc30      	pop	{r4, r5}
 80244f2:	4770      	bx	lr

080244f4 <GUI_GetClientRect>:
 80244f4:	b108      	cbz	r0, 80244fa <GUI_GetClientRect+0x6>
 80244f6:	f7f7 bb95 	b.w	801bc24 <WM_GetClientRect>
 80244fa:	4770      	bx	lr

080244fc <GUI_GetBkColor>:
 80244fc:	b510      	push	{r4, lr}
 80244fe:	f7fe fe75 	bl	80231ec <GUI_Lock>
 8024502:	f004 fbed 	bl	8028ce0 <LCD_GetBkColorIndex>
 8024506:	f7fd fdb9 	bl	802207c <LCD_Index2Color>
 802450a:	4604      	mov	r4, r0
 802450c:	f7fe fe64 	bl	80231d8 <GUI_Unlock>
 8024510:	4620      	mov	r0, r4
 8024512:	bd10      	pop	{r4, pc}

08024514 <GUI_GetColor>:
 8024514:	b510      	push	{r4, lr}
 8024516:	f7fe fe69 	bl	80231ec <GUI_Lock>
 802451a:	f004 fbe9 	bl	8028cf0 <LCD_GetColorIndex>
 802451e:	f7fd fdad 	bl	802207c <LCD_Index2Color>
 8024522:	4604      	mov	r4, r0
 8024524:	f7fe fe58 	bl	80231d8 <GUI_Unlock>
 8024528:	4620      	mov	r0, r4
 802452a:	bd10      	pop	{r4, pc}

0802452c <GUI_GetDrawMode>:
 802452c:	b510      	push	{r4, lr}
 802452e:	f7fe fe5d 	bl	80231ec <GUI_Lock>
 8024532:	4b03      	ldr	r3, [pc, #12]	; (8024540 <GUI_GetDrawMode+0x14>)
 8024534:	681b      	ldr	r3, [r3, #0]
 8024536:	7c1c      	ldrb	r4, [r3, #16]
 8024538:	f7fe fe4e 	bl	80231d8 <GUI_Unlock>
 802453c:	4620      	mov	r0, r4
 802453e:	bd10      	pop	{r4, pc}
 8024540:	20000280 	.word	0x20000280

08024544 <GUI_GetFontSizeY>:
 8024544:	b510      	push	{r4, lr}
 8024546:	f7fe fe51 	bl	80231ec <GUI_Lock>
 802454a:	4b05      	ldr	r3, [pc, #20]	; (8024560 <GUI_GetFontSizeY+0x1c>)
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	69db      	ldr	r3, [r3, #28]
 8024550:	7e1c      	ldrb	r4, [r3, #24]
 8024552:	7edb      	ldrb	r3, [r3, #27]
 8024554:	fb14 f403 	smulbb	r4, r4, r3
 8024558:	f7fe fe3e 	bl	80231d8 <GUI_Unlock>
 802455c:	4620      	mov	r0, r4
 802455e:	bd10      	pop	{r4, pc}
 8024560:	20000280 	.word	0x20000280

08024564 <GUI_GetOrg>:
 8024564:	b538      	push	{r3, r4, r5, lr}
 8024566:	4604      	mov	r4, r0
 8024568:	460d      	mov	r5, r1
 802456a:	f7fe fe3f 	bl	80231ec <GUI_Lock>
 802456e:	4a06      	ldr	r2, [pc, #24]	; (8024588 <GUI_GetOrg+0x24>)
 8024570:	4b06      	ldr	r3, [pc, #24]	; (802458c <GUI_GetOrg+0x28>)
 8024572:	f9b2 2000 	ldrsh.w	r2, [r2]
 8024576:	f9b3 3000 	ldrsh.w	r3, [r3]
 802457a:	6022      	str	r2, [r4, #0]
 802457c:	602b      	str	r3, [r5, #0]
 802457e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024582:	f7fe be29 	b.w	80231d8 <GUI_Unlock>
 8024586:	bf00      	nop
 8024588:	2002cbf8 	.word	0x2002cbf8
 802458c:	2002cbe8 	.word	0x2002cbe8

08024590 <GUI_GetYDistOfFont>:
 8024590:	7e40      	ldrb	r0, [r0, #25]
 8024592:	4770      	bx	lr

08024594 <GUI_MergeRect>:
 8024594:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8024598:	b318      	cbz	r0, 80245e2 <GUI_MergeRect+0x4e>
 802459a:	b329      	cbz	r1, 80245e8 <GUI_MergeRect+0x54>
 802459c:	b32a      	cbz	r2, 80245ea <GUI_MergeRect+0x56>
 802459e:	f9b1 9000 	ldrsh.w	r9, [r1]
 80245a2:	f9b2 4000 	ldrsh.w	r4, [r2]
 80245a6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80245aa:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80245ae:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 80245b2:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80245b6:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 80245ba:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 80245be:	45a1      	cmp	r9, r4
 80245c0:	bfb8      	it	lt
 80245c2:	464c      	movlt	r4, r9
 80245c4:	45e0      	cmp	r8, ip
 80245c6:	bfb4      	ite	lt
 80245c8:	4641      	movlt	r1, r8
 80245ca:	4661      	movge	r1, ip
 80245cc:	42b7      	cmp	r7, r6
 80245ce:	bfac      	ite	ge
 80245d0:	463a      	movge	r2, r7
 80245d2:	4632      	movlt	r2, r6
 80245d4:	429d      	cmp	r5, r3
 80245d6:	bfa8      	it	ge
 80245d8:	462b      	movge	r3, r5
 80245da:	8004      	strh	r4, [r0, #0]
 80245dc:	8041      	strh	r1, [r0, #2]
 80245de:	8082      	strh	r2, [r0, #4]
 80245e0:	80c3      	strh	r3, [r0, #6]
 80245e2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80245e6:	4770      	bx	lr
 80245e8:	4611      	mov	r1, r2
 80245ea:	680b      	ldr	r3, [r1, #0]
 80245ec:	684a      	ldr	r2, [r1, #4]
 80245ee:	6042      	str	r2, [r0, #4]
 80245f0:	6003      	str	r3, [r0, #0]
 80245f2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80245f6:	4770      	bx	lr

080245f8 <GUI_MoveRect>:
 80245f8:	b470      	push	{r4, r5, r6}
 80245fa:	b168      	cbz	r0, 8024618 <GUI_MoveRect+0x20>
 80245fc:	8804      	ldrh	r4, [r0, #0]
 80245fe:	8886      	ldrh	r6, [r0, #4]
 8024600:	8843      	ldrh	r3, [r0, #2]
 8024602:	88c5      	ldrh	r5, [r0, #6]
 8024604:	b289      	uxth	r1, r1
 8024606:	b292      	uxth	r2, r2
 8024608:	440c      	add	r4, r1
 802460a:	4413      	add	r3, r2
 802460c:	4431      	add	r1, r6
 802460e:	442a      	add	r2, r5
 8024610:	8004      	strh	r4, [r0, #0]
 8024612:	8081      	strh	r1, [r0, #4]
 8024614:	8043      	strh	r3, [r0, #2]
 8024616:	80c2      	strh	r2, [r0, #6]
 8024618:	bc70      	pop	{r4, r5, r6}
 802461a:	4770      	bx	lr

0802461c <GUI_Exec>:
 802461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024620:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8024668 <GUI_Exec+0x4c>
 8024624:	4f0e      	ldr	r7, [pc, #56]	; (8024660 <GUI_Exec+0x44>)
 8024626:	4e0f      	ldr	r6, [pc, #60]	; (8024664 <GUI_Exec+0x48>)
 8024628:	2500      	movs	r5, #0
 802462a:	f8d8 4000 	ldr.w	r4, [r8]
 802462e:	b11c      	cbz	r4, 8024638 <GUI_Exec+0x1c>
 8024630:	47a0      	blx	r4
 8024632:	1c04      	adds	r4, r0, #0
 8024634:	bf18      	it	ne
 8024636:	2401      	movne	r4, #1
 8024638:	f7fa f9f0 	bl	801ea1c <WM_Exec>
 802463c:	683b      	ldr	r3, [r7, #0]
 802463e:	2800      	cmp	r0, #0
 8024640:	bf18      	it	ne
 8024642:	2401      	movne	r4, #1
 8024644:	b11b      	cbz	r3, 802464e <GUI_Exec+0x32>
 8024646:	4798      	blx	r3
 8024648:	2800      	cmp	r0, #0
 802464a:	bf18      	it	ne
 802464c:	2401      	movne	r4, #1
 802464e:	6833      	ldr	r3, [r6, #0]
 8024650:	b103      	cbz	r3, 8024654 <GUI_Exec+0x38>
 8024652:	4798      	blx	r3
 8024654:	b10c      	cbz	r4, 802465a <GUI_Exec+0x3e>
 8024656:	2501      	movs	r5, #1
 8024658:	e7e7      	b.n	802462a <GUI_Exec+0xe>
 802465a:	4628      	mov	r0, r5
 802465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024660:	2002cc20 	.word	0x2002cc20
 8024664:	2002cc18 	.word	0x2002cc18
 8024668:	2002cbf4 	.word	0x2002cbf4

0802466c <GUI_GotoXY>:
 802466c:	b538      	push	{r3, r4, r5, lr}
 802466e:	4604      	mov	r4, r0
 8024670:	460d      	mov	r5, r1
 8024672:	f7fe fdbb 	bl	80231ec <GUI_Lock>
 8024676:	4b04      	ldr	r3, [pc, #16]	; (8024688 <GUI_GotoXY+0x1c>)
 8024678:	681b      	ldr	r3, [r3, #0]
 802467a:	845c      	strh	r4, [r3, #34]	; 0x22
 802467c:	849d      	strh	r5, [r3, #36]	; 0x24
 802467e:	f7fe fdab 	bl	80231d8 <GUI_Unlock>
 8024682:	2000      	movs	r0, #0
 8024684:	bd38      	pop	{r3, r4, r5, pc}
 8024686:	bf00      	nop
 8024688:	20000280 	.word	0x20000280

0802468c <GUI_RectsIntersect>:
 802468c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8024690:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8024694:	429a      	cmp	r2, r3
 8024696:	dc14      	bgt.n	80246c2 <GUI_RectsIntersect+0x36>
 8024698:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 802469c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80246a0:	429a      	cmp	r2, r3
 80246a2:	dc0e      	bgt.n	80246c2 <GUI_RectsIntersect+0x36>
 80246a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80246a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80246ac:	429a      	cmp	r2, r3
 80246ae:	dc08      	bgt.n	80246c2 <GUI_RectsIntersect+0x36>
 80246b0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80246b4:	f9b1 2000 	ldrsh.w	r2, [r1]
 80246b8:	429a      	cmp	r2, r3
 80246ba:	bfcc      	ite	gt
 80246bc:	2000      	movgt	r0, #0
 80246be:	2001      	movle	r0, #1
 80246c0:	4770      	bx	lr
 80246c2:	2000      	movs	r0, #0
 80246c4:	4770      	bx	lr
 80246c6:	bf00      	nop

080246c8 <GUI_SaveContext_W>:
 80246c8:	b508      	push	{r3, lr}
 80246ca:	4b03      	ldr	r3, [pc, #12]	; (80246d8 <GUI_SaveContext_W+0x10>)
 80246cc:	2270      	movs	r2, #112	; 0x70
 80246ce:	6819      	ldr	r1, [r3, #0]
 80246d0:	f006 f868 	bl	802a7a4 <memcpy>
 80246d4:	bd08      	pop	{r3, pc}
 80246d6:	bf00      	nop
 80246d8:	20000280 	.word	0x20000280

080246dc <GUI_RestoreContext>:
 80246dc:	b508      	push	{r3, lr}
 80246de:	4b03      	ldr	r3, [pc, #12]	; (80246ec <GUI_RestoreContext+0x10>)
 80246e0:	4601      	mov	r1, r0
 80246e2:	2270      	movs	r2, #112	; 0x70
 80246e4:	6818      	ldr	r0, [r3, #0]
 80246e6:	f006 f85d 	bl	802a7a4 <memcpy>
 80246ea:	bd08      	pop	{r3, pc}
 80246ec:	20000280 	.word	0x20000280

080246f0 <GUI_SelectLCD>:
 80246f0:	b508      	push	{r3, lr}
 80246f2:	f7fe fd7b 	bl	80231ec <GUI_Lock>
 80246f6:	f004 f983 	bl	8028a00 <LCD_SelectLCD>
 80246fa:	f7fc fe1d 	bl	8021338 <LCD_UpdateColorIndices>
 80246fe:	f7fa facd 	bl	801ec9c <WM_Activate>
 8024702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8024706:	f7fe bd67 	b.w	80231d8 <GUI_Unlock>
 802470a:	bf00      	nop

0802470c <GUI_SetBkColor>:
 802470c:	b510      	push	{r4, lr}
 802470e:	4604      	mov	r4, r0
 8024710:	f7fe fd6c 	bl	80231ec <GUI_Lock>
 8024714:	4620      	mov	r0, r4
 8024716:	f7fd fcd9 	bl	80220cc <LCD_SetBkColor>
 802471a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802471e:	f7fe bd5b 	b.w	80231d8 <GUI_Unlock>
 8024722:	bf00      	nop

08024724 <GUI_SetColor>:
 8024724:	b510      	push	{r4, lr}
 8024726:	4604      	mov	r4, r0
 8024728:	f7fe fd60 	bl	80231ec <GUI_Lock>
 802472c:	4620      	mov	r0, r4
 802472e:	f7fd fcd5 	bl	80220dc <LCD_SetColor>
 8024732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024736:	f7fe bd4f 	b.w	80231d8 <GUI_Unlock>
 802473a:	bf00      	nop

0802473c <GL_SetDefault>:
 802473c:	b538      	push	{r3, r4, r5, lr}
 802473e:	4b20      	ldr	r3, [pc, #128]	; (80247c0 <GL_SetDefault+0x84>)
 8024740:	4c20      	ldr	r4, [pc, #128]	; (80247c4 <GL_SetDefault+0x88>)
 8024742:	681d      	ldr	r5, [r3, #0]
 8024744:	f7fe fd52 	bl	80231ec <GUI_Lock>
 8024748:	4628      	mov	r0, r5
 802474a:	f7fd fcbf 	bl	80220cc <LCD_SetBkColor>
 802474e:	f7fe fd43 	bl	80231d8 <GUI_Unlock>
 8024752:	4b1d      	ldr	r3, [pc, #116]	; (80247c8 <GL_SetDefault+0x8c>)
 8024754:	681d      	ldr	r5, [r3, #0]
 8024756:	f7fe fd49 	bl	80231ec <GUI_Lock>
 802475a:	4628      	mov	r0, r5
 802475c:	f7fd fcbe 	bl	80220dc <LCD_SetColor>
 8024760:	f7fe fd3a 	bl	80231d8 <GUI_Unlock>
 8024764:	f7fe fd42 	bl	80231ec <GUI_Lock>
 8024768:	6823      	ldr	r3, [r4, #0]
 802476a:	2201      	movs	r2, #1
 802476c:	761a      	strb	r2, [r3, #24]
 802476e:	f7fe fd33 	bl	80231d8 <GUI_Unlock>
 8024772:	f7fe fd3b 	bl	80231ec <GUI_Lock>
 8024776:	6823      	ldr	r3, [r4, #0]
 8024778:	2500      	movs	r5, #0
 802477a:	859d      	strh	r5, [r3, #44]	; 0x2c
 802477c:	f7fe fd2c 	bl	80231d8 <GUI_Unlock>
 8024780:	f7fe fd34 	bl	80231ec <GUI_Lock>
 8024784:	6823      	ldr	r3, [r4, #0]
 8024786:	855d      	strh	r5, [r3, #42]	; 0x2a
 8024788:	f7fe fd26 	bl	80231d8 <GUI_Unlock>
 802478c:	f7fe fd2e 	bl	80231ec <GUI_Lock>
 8024790:	4628      	mov	r0, r5
 8024792:	f7fd f86b 	bl	802186c <LCD_SetDrawMode>
 8024796:	f7fe fd1f 	bl	80231d8 <GUI_Unlock>
 802479a:	4b0c      	ldr	r3, [pc, #48]	; (80247cc <GL_SetDefault+0x90>)
 802479c:	681d      	ldr	r5, [r3, #0]
 802479e:	f7fe fd25 	bl	80231ec <GUI_Lock>
 80247a2:	6823      	ldr	r3, [r4, #0]
 80247a4:	b105      	cbz	r5, 80247a8 <GL_SetDefault+0x6c>
 80247a6:	61dd      	str	r5, [r3, #28]
 80247a8:	f7fe fd16 	bl	80231d8 <GUI_Unlock>
 80247ac:	f7fe fd1e 	bl	80231ec <GUI_Lock>
 80247b0:	6823      	ldr	r3, [r4, #0]
 80247b2:	2200      	movs	r2, #0
 80247b4:	769a      	strb	r2, [r3, #26]
 80247b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80247ba:	f7fe bd0d 	b.w	80231d8 <GUI_Unlock>
 80247be:	bf00      	nop
 80247c0:	20000290 	.word	0x20000290
 80247c4:	20000280 	.word	0x20000280
 80247c8:	20000288 	.word	0x20000288
 80247cc:	2000028c 	.word	0x2000028c

080247d0 <GUI_SetDrawMode>:
 80247d0:	b510      	push	{r4, lr}
 80247d2:	4604      	mov	r4, r0
 80247d4:	f7fe fd0a 	bl	80231ec <GUI_Lock>
 80247d8:	4620      	mov	r0, r4
 80247da:	f7fd f847 	bl	802186c <LCD_SetDrawMode>
 80247de:	4604      	mov	r4, r0
 80247e0:	f7fe fcfa 	bl	80231d8 <GUI_Unlock>
 80247e4:	4620      	mov	r0, r4
 80247e6:	bd10      	pop	{r4, pc}

080247e8 <GUI_SetFont>:
 80247e8:	b538      	push	{r3, r4, r5, lr}
 80247ea:	4604      	mov	r4, r0
 80247ec:	f7fe fcfe 	bl	80231ec <GUI_Lock>
 80247f0:	4b04      	ldr	r3, [pc, #16]	; (8024804 <GUI_SetFont+0x1c>)
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	69dd      	ldr	r5, [r3, #28]
 80247f6:	b104      	cbz	r4, 80247fa <GUI_SetFont+0x12>
 80247f8:	61dc      	str	r4, [r3, #28]
 80247fa:	f7fe fced 	bl	80231d8 <GUI_Unlock>
 80247fe:	4628      	mov	r0, r5
 8024800:	bd38      	pop	{r3, r4, r5, pc}
 8024802:	bf00      	nop
 8024804:	20000280 	.word	0x20000280

08024808 <GUI_SetOrg>:
 8024808:	b538      	push	{r3, r4, r5, lr}
 802480a:	4605      	mov	r5, r0
 802480c:	460c      	mov	r4, r1
 802480e:	f7fe fced 	bl	80231ec <GUI_Lock>
 8024812:	4a09      	ldr	r2, [pc, #36]	; (8024838 <GUI_SetOrg+0x30>)
 8024814:	4b09      	ldr	r3, [pc, #36]	; (802483c <GUI_SetOrg+0x34>)
 8024816:	6812      	ldr	r2, [r2, #0]
 8024818:	4909      	ldr	r1, [pc, #36]	; (8024840 <GUI_SetOrg+0x38>)
 802481a:	7c50      	ldrb	r0, [r2, #17]
 802481c:	4a09      	ldr	r2, [pc, #36]	; (8024844 <GUI_SetOrg+0x3c>)
 802481e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8024822:	800d      	strh	r5, [r1, #0]
 8024824:	68c3      	ldr	r3, [r0, #12]
 8024826:	8014      	strh	r4, [r2, #0]
 8024828:	4629      	mov	r1, r5
 802482a:	4622      	mov	r2, r4
 802482c:	6a1c      	ldr	r4, [r3, #32]
 802482e:	47a0      	blx	r4
 8024830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024834:	f7fe bcd0 	b.w	80231d8 <GUI_Unlock>
 8024838:	20000280 	.word	0x20000280
 802483c:	2002cc24 	.word	0x2002cc24
 8024840:	2002cbf8 	.word	0x2002cbf8
 8024844:	2002cbe8 	.word	0x2002cbe8

08024848 <GUI_SetTextMode>:
 8024848:	b538      	push	{r3, r4, r5, lr}
 802484a:	4605      	mov	r5, r0
 802484c:	f7fe fcce 	bl	80231ec <GUI_Lock>
 8024850:	4b04      	ldr	r3, [pc, #16]	; (8024864 <GUI_SetTextMode+0x1c>)
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8024858:	855d      	strh	r5, [r3, #42]	; 0x2a
 802485a:	f7fe fcbd 	bl	80231d8 <GUI_Unlock>
 802485e:	4620      	mov	r0, r4
 8024860:	bd38      	pop	{r3, r4, r5, pc}
 8024862:	bf00      	nop
 8024864:	20000280 	.word	0x20000280

08024868 <GUIPROP_DispChar>:
 8024868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802486c:	4c39      	ldr	r4, [pc, #228]	; (8024954 <GUIPROP_DispChar+0xec>)
 802486e:	6823      	ldr	r3, [r4, #0]
 8024870:	69da      	ldr	r2, [r3, #28]
 8024872:	f8b3 b02a 	ldrh.w	fp, [r3, #42]	; 0x2a
 8024876:	69d3      	ldr	r3, [r2, #28]
 8024878:	b089      	sub	sp, #36	; 0x24
 802487a:	b143      	cbz	r3, 802488e <GUIPROP_DispChar+0x26>
 802487c:	881a      	ldrh	r2, [r3, #0]
 802487e:	4290      	cmp	r0, r2
 8024880:	d302      	bcc.n	8024888 <GUIPROP_DispChar+0x20>
 8024882:	8859      	ldrh	r1, [r3, #2]
 8024884:	4281      	cmp	r1, r0
 8024886:	d205      	bcs.n	8024894 <GUIPROP_DispChar+0x2c>
 8024888:	689b      	ldr	r3, [r3, #8]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d1f6      	bne.n	802487c <GUIPROP_DispChar+0x14>
 802488e:	b009      	add	sp, #36	; 0x24
 8024890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024894:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8024898:	ebc2 0900 	rsb	r9, r2, r0
 802489c:	eb08 05c9 	add.w	r5, r8, r9, lsl #3
 80248a0:	fa0f fb8b 	sxth.w	fp, fp
 80248a4:	78ab      	ldrb	r3, [r5, #2]
 80248a6:	9307      	str	r3, [sp, #28]
 80248a8:	4658      	mov	r0, fp
 80248aa:	f7fc ffdf 	bl	802186c <LCD_SetDrawMode>
 80248ae:	6826      	ldr	r6, [r4, #0]
 80248b0:	f818 2039 	ldrb.w	r2, [r8, r9, lsl #3]
 80248b4:	69f7      	ldr	r7, [r6, #28]
 80248b6:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 80248ba:	f897 e01a 	ldrb.w	lr, [r7, #26]
 80248be:	7e3b      	ldrb	r3, [r7, #24]
 80248c0:	4682      	mov	sl, r0
 80248c2:	f9b6 0022 	ldrsh.w	r0, [r6, #34]	; 0x22
 80248c6:	f8cd e000 	str.w	lr, [sp]
 80248ca:	7eff      	ldrb	r7, [r7, #27]
 80248cc:	9701      	str	r7, [sp, #4]
 80248ce:	f04f 0e01 	mov.w	lr, #1
 80248d2:	9f07      	ldr	r7, [sp, #28]
 80248d4:	9703      	str	r7, [sp, #12]
 80248d6:	f8cd e008 	str.w	lr, [sp, #8]
 80248da:	686f      	ldr	r7, [r5, #4]
 80248dc:	9704      	str	r7, [sp, #16]
 80248de:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 80248e0:	9605      	str	r6, [sp, #20]
 80248e2:	f7fd f999 	bl	8021c18 <LCD_DrawBitmap>
 80248e6:	6823      	ldr	r3, [r4, #0]
 80248e8:	69db      	ldr	r3, [r3, #28]
 80248ea:	7e5e      	ldrb	r6, [r3, #25]
 80248ec:	7e19      	ldrb	r1, [r3, #24]
 80248ee:	428e      	cmp	r6, r1
 80248f0:	d921      	bls.n	8024936 <GUIPROP_DispChar+0xce>
 80248f2:	f1bb 0f02 	cmp.w	fp, #2
 80248f6:	7edf      	ldrb	r7, [r3, #27]
 80248f8:	d01d      	beq.n	8024936 <GUIPROP_DispChar+0xce>
 80248fa:	9106      	str	r1, [sp, #24]
 80248fc:	f7ff fe0a 	bl	8024514 <GUI_GetColor>
 8024900:	4683      	mov	fp, r0
 8024902:	f7ff fdfb 	bl	80244fc <GUI_GetBkColor>
 8024906:	f7ff ff0d 	bl	8024724 <GUI_SetColor>
 802490a:	4a12      	ldr	r2, [pc, #72]	; (8024954 <GUIPROP_DispChar+0xec>)
 802490c:	f818 e039 	ldrb.w	lr, [r8, r9, lsl #3]
 8024910:	6813      	ldr	r3, [r2, #0]
 8024912:	9906      	ldr	r1, [sp, #24]
 8024914:	69da      	ldr	r2, [r3, #28]
 8024916:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 802491a:	7ed2      	ldrb	r2, [r2, #27]
 802491c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8024920:	fb0e 0202 	mla	r2, lr, r2, r0
 8024924:	fb01 3107 	mla	r1, r1, r7, r3
 8024928:	fb06 3307 	mla	r3, r6, r7, r3
 802492c:	f7fd f826 	bl	802197c <LCD_FillRect>
 8024930:	4658      	mov	r0, fp
 8024932:	f7ff fef7 	bl	8024724 <GUI_SetColor>
 8024936:	4650      	mov	r0, sl
 8024938:	f7fc ff98 	bl	802186c <LCD_SetDrawMode>
 802493c:	6823      	ldr	r3, [r4, #0]
 802493e:	7868      	ldrb	r0, [r5, #1]
 8024940:	69da      	ldr	r2, [r3, #28]
 8024942:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8024944:	7e92      	ldrb	r2, [r2, #26]
 8024946:	fb02 1200 	mla	r2, r2, r0, r1
 802494a:	845a      	strh	r2, [r3, #34]	; 0x22
 802494c:	b009      	add	sp, #36	; 0x24
 802494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024952:	bf00      	nop
 8024954:	20000280 	.word	0x20000280

08024958 <GUIPROP_GetCharDistX>:
 8024958:	4b11      	ldr	r3, [pc, #68]	; (80249a0 <GUIPROP_GetCharDistX+0x48>)
 802495a:	b470      	push	{r4, r5, r6}
 802495c:	681b      	ldr	r3, [r3, #0]
 802495e:	69dd      	ldr	r5, [r3, #28]
 8024960:	69eb      	ldr	r3, [r5, #28]
 8024962:	b143      	cbz	r3, 8024976 <GUIPROP_GetCharDistX+0x1e>
 8024964:	881a      	ldrh	r2, [r3, #0]
 8024966:	4290      	cmp	r0, r2
 8024968:	d302      	bcc.n	8024970 <GUIPROP_GetCharDistX+0x18>
 802496a:	885c      	ldrh	r4, [r3, #2]
 802496c:	4284      	cmp	r4, r0
 802496e:	d205      	bcs.n	802497c <GUIPROP_GetCharDistX+0x24>
 8024970:	689b      	ldr	r3, [r3, #8]
 8024972:	2b00      	cmp	r3, #0
 8024974:	d1f6      	bne.n	8024964 <GUIPROP_GetCharDistX+0xc>
 8024976:	4618      	mov	r0, r3
 8024978:	bc70      	pop	{r4, r5, r6}
 802497a:	4770      	bx	lr
 802497c:	685e      	ldr	r6, [r3, #4]
 802497e:	7eac      	ldrb	r4, [r5, #26]
 8024980:	1a82      	subs	r2, r0, r2
 8024982:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8024986:	7858      	ldrb	r0, [r3, #1]
 8024988:	fb10 f004 	smulbb	r0, r0, r4
 802498c:	2900      	cmp	r1, #0
 802498e:	d0f3      	beq.n	8024978 <GUIPROP_GetCharDistX+0x20>
 8024990:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 8024994:	fb14 f303 	smulbb	r3, r4, r3
 8024998:	600b      	str	r3, [r1, #0]
 802499a:	bc70      	pop	{r4, r5, r6}
 802499c:	4770      	bx	lr
 802499e:	bf00      	nop
 80249a0:	20000280 	.word	0x20000280

080249a4 <GUIPROP_GetFontInfo>:
 80249a4:	2301      	movs	r3, #1
 80249a6:	800b      	strh	r3, [r1, #0]
 80249a8:	4770      	bx	lr
 80249aa:	bf00      	nop

080249ac <GUIPROP_IsInFont>:
 80249ac:	69c0      	ldr	r0, [r0, #28]
 80249ae:	b150      	cbz	r0, 80249c6 <GUIPROP_IsInFont+0x1a>
 80249b0:	8803      	ldrh	r3, [r0, #0]
 80249b2:	428b      	cmp	r3, r1
 80249b4:	d802      	bhi.n	80249bc <GUIPROP_IsInFont+0x10>
 80249b6:	8843      	ldrh	r3, [r0, #2]
 80249b8:	428b      	cmp	r3, r1
 80249ba:	d203      	bcs.n	80249c4 <GUIPROP_IsInFont+0x18>
 80249bc:	6880      	ldr	r0, [r0, #8]
 80249be:	2800      	cmp	r0, #0
 80249c0:	d1f6      	bne.n	80249b0 <GUIPROP_IsInFont+0x4>
 80249c2:	4770      	bx	lr
 80249c4:	2001      	movs	r0, #1
 80249c6:	4770      	bx	lr

080249c8 <_Log2VisBuffered>:
 80249c8:	4770      	bx	lr
 80249ca:	bf00      	nop

080249cc <_DispLine>:
 80249cc:	b570      	push	{r4, r5, r6, lr}
 80249ce:	b082      	sub	sp, #8
 80249d0:	ab02      	add	r3, sp, #8
 80249d2:	4d21      	ldr	r5, [pc, #132]	; (8024a58 <_DispLine+0x8c>)
 80249d4:	f843 1d08 	str.w	r1, [r3, #-8]!
 80249d8:	4c20      	ldr	r4, [pc, #128]	; (8024a5c <_DispLine+0x90>)
 80249da:	682b      	ldr	r3, [r5, #0]
 80249dc:	9001      	str	r0, [sp, #4]
 80249de:	4669      	mov	r1, sp
 80249e0:	4615      	mov	r5, r2
 80249e2:	4798      	blx	r3
 80249e4:	6823      	ldr	r3, [r4, #0]
 80249e6:	9001      	str	r0, [sp, #4]
 80249e8:	6958      	ldr	r0, [r3, #20]
 80249ea:	b118      	cbz	r0, 80249f4 <_DispLine+0x28>
 80249ec:	4629      	mov	r1, r5
 80249ee:	f7ff fe4d 	bl	802468c <GUI_RectsIntersect>
 80249f2:	b1a8      	cbz	r0, 8024a20 <_DispLine+0x54>
 80249f4:	2001      	movs	r0, #1
 80249f6:	f7fd fdf7 	bl	80225e8 <GUI__ManageCache>
 80249fa:	6822      	ldr	r2, [r4, #0]
 80249fc:	69d3      	ldr	r3, [r2, #28]
 80249fe:	695b      	ldr	r3, [r3, #20]
 8024a00:	b1ab      	cbz	r3, 8024a2e <_DispLine+0x62>
 8024a02:	4c17      	ldr	r4, [pc, #92]	; (8024a60 <_DispLine+0x94>)
 8024a04:	6821      	ldr	r1, [r4, #0]
 8024a06:	b169      	cbz	r1, 8024a24 <_DispLine+0x58>
 8024a08:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8024a0c:	689b      	ldr	r3, [r3, #8]
 8024a0e:	9801      	ldr	r0, [sp, #4]
 8024a10:	9900      	ldr	r1, [sp, #0]
 8024a12:	4798      	blx	r3
 8024a14:	4628      	mov	r0, r5
 8024a16:	6823      	ldr	r3, [r4, #0]
 8024a18:	4798      	blx	r3
 8024a1a:	2000      	movs	r0, #0
 8024a1c:	f7fd fde4 	bl	80225e8 <GUI__ManageCache>
 8024a20:	b002      	add	sp, #8
 8024a22:	bd70      	pop	{r4, r5, r6, pc}
 8024a24:	689b      	ldr	r3, [r3, #8]
 8024a26:	9801      	ldr	r0, [sp, #4]
 8024a28:	9900      	ldr	r1, [sp, #0]
 8024a2a:	4798      	blx	r3
 8024a2c:	e7f5      	b.n	8024a1a <_DispLine+0x4e>
 8024a2e:	4d0d      	ldr	r5, [pc, #52]	; (8024a64 <_DispLine+0x98>)
 8024a30:	9b00      	ldr	r3, [sp, #0]
 8024a32:	3b01      	subs	r3, #1
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	a801      	add	r0, sp, #4
 8024a38:	9300      	str	r3, [sp, #0]
 8024a3a:	dbee      	blt.n	8024a1a <_DispLine+0x4e>
 8024a3c:	f7fe f90e 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8024a40:	6823      	ldr	r3, [r4, #0]
 8024a42:	69db      	ldr	r3, [r3, #28]
 8024a44:	681b      	ldr	r3, [r3, #0]
 8024a46:	4606      	mov	r6, r0
 8024a48:	4798      	blx	r3
 8024a4a:	682b      	ldr	r3, [r5, #0]
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d0ef      	beq.n	8024a30 <_DispLine+0x64>
 8024a50:	4630      	mov	r0, r6
 8024a52:	4798      	blx	r3
 8024a54:	e7ec      	b.n	8024a30 <_DispLine+0x64>
 8024a56:	bf00      	nop
 8024a58:	20000294 	.word	0x20000294
 8024a5c:	20000280 	.word	0x20000280
 8024a60:	2002cbf0 	.word	0x2002cbf0
 8024a64:	2002cc00 	.word	0x2002cc00

08024a68 <GUI__GetLineNumChars>:
 8024a68:	b530      	push	{r4, r5, lr}
 8024a6a:	b083      	sub	sp, #12
 8024a6c:	460d      	mov	r5, r1
 8024a6e:	9001      	str	r0, [sp, #4]
 8024a70:	b1d8      	cbz	r0, 8024aaa <GUI__GetLineNumChars+0x42>
 8024a72:	4b0f      	ldr	r3, [pc, #60]	; (8024ab0 <GUI__GetLineNumChars+0x48>)
 8024a74:	681b      	ldr	r3, [r3, #0]
 8024a76:	69db      	ldr	r3, [r3, #28]
 8024a78:	695b      	ldr	r3, [r3, #20]
 8024a7a:	b123      	cbz	r3, 8024a86 <GUI__GetLineNumChars+0x1e>
 8024a7c:	685b      	ldr	r3, [r3, #4]
 8024a7e:	b113      	cbz	r3, 8024a86 <GUI__GetLineNumChars+0x1e>
 8024a80:	4798      	blx	r3
 8024a82:	b003      	add	sp, #12
 8024a84:	bd30      	pop	{r4, r5, pc}
 8024a86:	2d00      	cmp	r5, #0
 8024a88:	bfc8      	it	gt
 8024a8a:	2400      	movgt	r4, #0
 8024a8c:	dc05      	bgt.n	8024a9a <GUI__GetLineNumChars+0x32>
 8024a8e:	e00c      	b.n	8024aaa <GUI__GetLineNumChars+0x42>
 8024a90:	280a      	cmp	r0, #10
 8024a92:	d007      	beq.n	8024aa4 <GUI__GetLineNumChars+0x3c>
 8024a94:	3401      	adds	r4, #1
 8024a96:	42ac      	cmp	r4, r5
 8024a98:	d004      	beq.n	8024aa4 <GUI__GetLineNumChars+0x3c>
 8024a9a:	a801      	add	r0, sp, #4
 8024a9c:	f7fe f8de 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8024aa0:	2800      	cmp	r0, #0
 8024aa2:	d1f5      	bne.n	8024a90 <GUI__GetLineNumChars+0x28>
 8024aa4:	4620      	mov	r0, r4
 8024aa6:	b003      	add	sp, #12
 8024aa8:	bd30      	pop	{r4, r5, pc}
 8024aaa:	2000      	movs	r0, #0
 8024aac:	b003      	add	sp, #12
 8024aae:	bd30      	pop	{r4, r5, pc}
 8024ab0:	20000280 	.word	0x20000280

08024ab4 <GUI__GetLineDistX>:
 8024ab4:	b570      	push	{r4, r5, r6, lr}
 8024ab6:	b084      	sub	sp, #16
 8024ab8:	ab04      	add	r3, sp, #16
 8024aba:	4a1e      	ldr	r2, [pc, #120]	; (8024b34 <GUI__GetLineDistX+0x80>)
 8024abc:	f843 1d10 	str.w	r1, [r3, #-16]!
 8024ac0:	9001      	str	r0, [sp, #4]
 8024ac2:	4669      	mov	r1, sp
 8024ac4:	6813      	ldr	r3, [r2, #0]
 8024ac6:	4798      	blx	r3
 8024ac8:	4604      	mov	r4, r0
 8024aca:	9001      	str	r0, [sp, #4]
 8024acc:	2800      	cmp	r0, #0
 8024ace:	d02c      	beq.n	8024b2a <GUI__GetLineDistX+0x76>
 8024ad0:	4b19      	ldr	r3, [pc, #100]	; (8024b38 <GUI__GetLineDistX+0x84>)
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	69db      	ldr	r3, [r3, #28]
 8024ad6:	695b      	ldr	r3, [r3, #20]
 8024ad8:	b12b      	cbz	r3, 8024ae6 <GUI__GetLineDistX+0x32>
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	b11b      	cbz	r3, 8024ae6 <GUI__GetLineDistX+0x32>
 8024ade:	9900      	ldr	r1, [sp, #0]
 8024ae0:	4798      	blx	r3
 8024ae2:	b004      	add	sp, #16
 8024ae4:	bd70      	pop	{r4, r5, r6, pc}
 8024ae6:	9b00      	ldr	r3, [sp, #0]
 8024ae8:	3b01      	subs	r3, #1
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	9300      	str	r3, [sp, #0]
 8024aee:	bfa8      	it	ge
 8024af0:	2400      	movge	r4, #0
 8024af2:	db1c      	blt.n	8024b2e <GUI__GetLineDistX+0x7a>
 8024af4:	a801      	add	r0, sp, #4
 8024af6:	f7fe f8b1 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8024afa:	4605      	mov	r5, r0
 8024afc:	f000 f8a8 	bl	8024c50 <GUI_GetCharDistX>
 8024b00:	9b00      	ldr	r3, [sp, #0]
 8024b02:	3b01      	subs	r3, #1
 8024b04:	2b00      	cmp	r3, #0
 8024b06:	4404      	add	r4, r0
 8024b08:	9300      	str	r3, [sp, #0]
 8024b0a:	daf3      	bge.n	8024af4 <GUI__GetLineDistX+0x40>
 8024b0c:	a904      	add	r1, sp, #16
 8024b0e:	2600      	movs	r6, #0
 8024b10:	f841 6d04 	str.w	r6, [r1, #-4]!
 8024b14:	4628      	mov	r0, r5
 8024b16:	f000 f8ad 	bl	8024c74 <GUI_GetCharDistXEx>
 8024b1a:	9b03      	ldr	r3, [sp, #12]
 8024b1c:	4298      	cmp	r0, r3
 8024b1e:	bfb8      	it	lt
 8024b20:	ebc0 0603 	rsblt	r6, r0, r3
 8024b24:	19a0      	adds	r0, r4, r6
 8024b26:	b004      	add	sp, #16
 8024b28:	bd70      	pop	{r4, r5, r6, pc}
 8024b2a:	b004      	add	sp, #16
 8024b2c:	bd70      	pop	{r4, r5, r6, pc}
 8024b2e:	2500      	movs	r5, #0
 8024b30:	462c      	mov	r4, r5
 8024b32:	e7eb      	b.n	8024b0c <GUI__GetLineDistX+0x58>
 8024b34:	20000294 	.word	0x20000294
 8024b38:	20000280 	.word	0x20000280

08024b3c <GUI__DispLine>:
 8024b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b3e:	4b29      	ldr	r3, [pc, #164]	; (8024be4 <GUI__DispLine+0xa8>)
 8024b40:	681b      	ldr	r3, [r3, #0]
 8024b42:	b083      	sub	sp, #12
 8024b44:	4604      	mov	r4, r0
 8024b46:	460d      	mov	r5, r1
 8024b48:	b173      	cbz	r3, 8024b68 <GUI__DispLine+0x2c>
 8024b4a:	2000      	movs	r0, #0
 8024b4c:	f7f9 fe2e 	bl	801e7ac <WM__InitIVRSearch>
 8024b50:	b140      	cbz	r0, 8024b64 <GUI__DispLine+0x28>
 8024b52:	4620      	mov	r0, r4
 8024b54:	4629      	mov	r1, r5
 8024b56:	466a      	mov	r2, sp
 8024b58:	f7ff ff38 	bl	80249cc <_DispLine>
 8024b5c:	f7f9 fd00 	bl	801e560 <WM__GetNextIVR>
 8024b60:	2800      	cmp	r0, #0
 8024b62:	d1f6      	bne.n	8024b52 <GUI__DispLine+0x16>
 8024b64:	b003      	add	sp, #12
 8024b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b68:	6810      	ldr	r0, [r2, #0]
 8024b6a:	6851      	ldr	r1, [r2, #4]
 8024b6c:	4f1e      	ldr	r7, [pc, #120]	; (8024be8 <GUI__DispLine+0xac>)
 8024b6e:	466b      	mov	r3, sp
 8024b70:	c303      	stmia	r3!, {r0, r1}
 8024b72:	683b      	ldr	r3, [r7, #0]
 8024b74:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8024b78:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8024b7c:	f8bd e000 	ldrh.w	lr, [sp]
 8024b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8024b84:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8024b88:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8024b8c:	4496      	add	lr, r2
 8024b8e:	4419      	add	r1, r3
 8024b90:	4462      	add	r2, ip
 8024b92:	4403      	add	r3, r0
 8024b94:	4668      	mov	r0, sp
 8024b96:	f8ad e000 	strh.w	lr, [sp]
 8024b9a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8024b9e:	f8ad 1002 	strh.w	r1, [sp, #2]
 8024ba2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024ba6:	f7f9 fe01 	bl	801e7ac <WM__InitIVRSearch>
 8024baa:	b950      	cbnz	r0, 8024bc2 <GUI__DispLine+0x86>
 8024bac:	683b      	ldr	r3, [r7, #0]
 8024bae:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 8024bb0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8024bb2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8024bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024bb6:	1a61      	subs	r1, r4, r1
 8024bb8:	1a82      	subs	r2, r0, r2
 8024bba:	8459      	strh	r1, [r3, #34]	; 0x22
 8024bbc:	849a      	strh	r2, [r3, #36]	; 0x24
 8024bbe:	b003      	add	sp, #12
 8024bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bc2:	683b      	ldr	r3, [r7, #0]
 8024bc4:	f8bd 1000 	ldrh.w	r1, [sp]
 8024bc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8024bcc:	8459      	strh	r1, [r3, #34]	; 0x22
 8024bce:	849a      	strh	r2, [r3, #36]	; 0x24
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	4629      	mov	r1, r5
 8024bd4:	466a      	mov	r2, sp
 8024bd6:	f7ff fef9 	bl	80249cc <_DispLine>
 8024bda:	f7f9 fcc1 	bl	801e560 <WM__GetNextIVR>
 8024bde:	2800      	cmp	r0, #0
 8024be0:	d1ef      	bne.n	8024bc2 <GUI__DispLine+0x86>
 8024be2:	e7e3      	b.n	8024bac <GUI__DispLine+0x70>
 8024be4:	2002cbdc 	.word	0x2002cbdc
 8024be8:	20000280 	.word	0x20000280

08024bec <GUI_GetYAdjust>:
 8024bec:	b510      	push	{r4, lr}
 8024bee:	f7fe fafd 	bl	80231ec <GUI_Lock>
 8024bf2:	4b0f      	ldr	r3, [pc, #60]	; (8024c30 <GUI_GetYAdjust+0x44>)
 8024bf4:	681a      	ldr	r2, [r3, #0]
 8024bf6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8024bf8:	f003 030c 	and.w	r3, r3, #12
 8024bfc:	2b08      	cmp	r3, #8
 8024bfe:	d008      	beq.n	8024c12 <GUI_GetYAdjust+0x26>
 8024c00:	2b0c      	cmp	r3, #12
 8024c02:	d006      	beq.n	8024c12 <GUI_GetYAdjust+0x26>
 8024c04:	2b04      	cmp	r3, #4
 8024c06:	d00b      	beq.n	8024c20 <GUI_GetYAdjust+0x34>
 8024c08:	2400      	movs	r4, #0
 8024c0a:	f7fe fae5 	bl	80231d8 <GUI_Unlock>
 8024c0e:	4620      	mov	r0, r4
 8024c10:	bd10      	pop	{r4, pc}
 8024c12:	69d3      	ldr	r3, [r2, #28]
 8024c14:	7e1c      	ldrb	r4, [r3, #24]
 8024c16:	0864      	lsrs	r4, r4, #1
 8024c18:	f7fe fade 	bl	80231d8 <GUI_Unlock>
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	bd10      	pop	{r4, pc}
 8024c20:	69d3      	ldr	r3, [r2, #28]
 8024c22:	7e1c      	ldrb	r4, [r3, #24]
 8024c24:	3c01      	subs	r4, #1
 8024c26:	f7fe fad7 	bl	80231d8 <GUI_Unlock>
 8024c2a:	4620      	mov	r0, r4
 8024c2c:	bd10      	pop	{r4, pc}
 8024c2e:	bf00      	nop
 8024c30:	20000280 	.word	0x20000280

08024c34 <GUI_GetFontDistY>:
 8024c34:	b510      	push	{r4, lr}
 8024c36:	f7fe fad9 	bl	80231ec <GUI_Lock>
 8024c3a:	4b04      	ldr	r3, [pc, #16]	; (8024c4c <GUI_GetFontDistY+0x18>)
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	69db      	ldr	r3, [r3, #28]
 8024c40:	7e5c      	ldrb	r4, [r3, #25]
 8024c42:	f7fe fac9 	bl	80231d8 <GUI_Unlock>
 8024c46:	4620      	mov	r0, r4
 8024c48:	bd10      	pop	{r4, pc}
 8024c4a:	bf00      	nop
 8024c4c:	20000280 	.word	0x20000280

08024c50 <GUI_GetCharDistX>:
 8024c50:	b510      	push	{r4, lr}
 8024c52:	4604      	mov	r4, r0
 8024c54:	f7fe faca 	bl	80231ec <GUI_Lock>
 8024c58:	4b05      	ldr	r3, [pc, #20]	; (8024c70 <GUI_GetCharDistX+0x20>)
 8024c5a:	681b      	ldr	r3, [r3, #0]
 8024c5c:	69db      	ldr	r3, [r3, #28]
 8024c5e:	2100      	movs	r1, #0
 8024c60:	685b      	ldr	r3, [r3, #4]
 8024c62:	4620      	mov	r0, r4
 8024c64:	4798      	blx	r3
 8024c66:	4604      	mov	r4, r0
 8024c68:	f7fe fab6 	bl	80231d8 <GUI_Unlock>
 8024c6c:	4620      	mov	r0, r4
 8024c6e:	bd10      	pop	{r4, pc}
 8024c70:	20000280 	.word	0x20000280

08024c74 <GUI_GetCharDistXEx>:
 8024c74:	b538      	push	{r3, r4, r5, lr}
 8024c76:	4605      	mov	r5, r0
 8024c78:	460c      	mov	r4, r1
 8024c7a:	f7fe fab7 	bl	80231ec <GUI_Lock>
 8024c7e:	4b06      	ldr	r3, [pc, #24]	; (8024c98 <GUI_GetCharDistXEx+0x24>)
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	69db      	ldr	r3, [r3, #28]
 8024c84:	4621      	mov	r1, r4
 8024c86:	685b      	ldr	r3, [r3, #4]
 8024c88:	4628      	mov	r0, r5
 8024c8a:	4798      	blx	r3
 8024c8c:	4604      	mov	r4, r0
 8024c8e:	f7fe faa3 	bl	80231d8 <GUI_Unlock>
 8024c92:	4620      	mov	r0, r4
 8024c94:	bd38      	pop	{r3, r4, r5, pc}
 8024c96:	bf00      	nop
 8024c98:	20000280 	.word	0x20000280

08024c9c <_AddFreeMemory>:
 8024c9c:	4bbf      	ldr	r3, [pc, #764]	; (8024f9c <_AddFreeMemory+0x300>)
 8024c9e:	b4f0      	push	{r4, r5, r6, r7}
 8024ca0:	68dc      	ldr	r4, [r3, #12]
 8024ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8024ca4:	3c01      	subs	r4, #1
 8024ca6:	1915      	adds	r5, r2, r4
 8024ca8:	180c      	adds	r4, r1, r0
 8024caa:	42a5      	cmp	r5, r4
 8024cac:	d303      	bcc.n	8024cb6 <_AddFreeMemory+0x1a>
 8024cae:	580d      	ldr	r5, [r1, r0]
 8024cb0:	2d00      	cmp	r5, #0
 8024cb2:	f000 80a2 	beq.w	8024dfa <_AddFreeMemory+0x15e>
 8024cb6:	428a      	cmp	r2, r1
 8024cb8:	d205      	bcs.n	8024cc6 <_AddFreeMemory+0x2a>
 8024cba:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8024cbe:	1b0c      	subs	r4, r1, r4
 8024cc0:	6822      	ldr	r2, [r4, #0]
 8024cc2:	2a00      	cmp	r2, #0
 8024cc4:	d04b      	beq.n	8024d5e <_AddFreeMemory+0xc2>
 8024cc6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8024cca:	4ab4      	ldr	r2, [pc, #720]	; (8024f9c <_AddFreeMemory+0x300>)
 8024ccc:	42a0      	cmp	r0, r4
 8024cce:	f080 8120 	bcs.w	8024f12 <_AddFreeMemory+0x276>
 8024cd2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8024cd6:	42a0      	cmp	r0, r4
 8024cd8:	f080 811d 	bcs.w	8024f16 <_AddFreeMemory+0x27a>
 8024cdc:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8024ce0:	42a0      	cmp	r0, r4
 8024ce2:	f080 811a 	bcs.w	8024f1a <_AddFreeMemory+0x27e>
 8024ce6:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 8024cea:	42a0      	cmp	r0, r4
 8024cec:	f080 8117 	bcs.w	8024f1e <_AddFreeMemory+0x282>
 8024cf0:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8024cf4:	42a0      	cmp	r0, r4
 8024cf6:	f080 8114 	bcs.w	8024f22 <_AddFreeMemory+0x286>
 8024cfa:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8024cfe:	42a0      	cmp	r0, r4
 8024d00:	f080 8111 	bcs.w	8024f26 <_AddFreeMemory+0x28a>
 8024d04:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8024d08:	42a0      	cmp	r0, r4
 8024d0a:	f080 810e 	bcs.w	8024f2a <_AddFreeMemory+0x28e>
 8024d0e:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8024d12:	42a0      	cmp	r0, r4
 8024d14:	f080 810b 	bcs.w	8024f2e <_AddFreeMemory+0x292>
 8024d18:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8024d1a:	42a0      	cmp	r0, r4
 8024d1c:	f080 8109 	bcs.w	8024f32 <_AddFreeMemory+0x296>
 8024d20:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8024d22:	4290      	cmp	r0, r2
 8024d24:	f080 8107 	bcs.w	8024f36 <_AddFreeMemory+0x29a>
 8024d28:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8024d2a:	4a9c      	ldr	r2, [pc, #624]	; (8024f9c <_AddFreeMemory+0x300>)
 8024d2c:	42a0      	cmp	r0, r4
 8024d2e:	f080 8104 	bcs.w	8024f3a <_AddFreeMemory+0x29e>
 8024d32:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8024d34:	42a0      	cmp	r0, r4
 8024d36:	f080 8102 	bcs.w	8024f3e <_AddFreeMemory+0x2a2>
 8024d3a:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8024d3c:	42a0      	cmp	r0, r4
 8024d3e:	f080 8100 	bcs.w	8024f42 <_AddFreeMemory+0x2a6>
 8024d42:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8024d44:	42a0      	cmp	r0, r4
 8024d46:	f080 80fe 	bcs.w	8024f46 <_AddFreeMemory+0x2aa>
 8024d4a:	6c94      	ldr	r4, [r2, #72]	; 0x48
 8024d4c:	42a0      	cmp	r0, r4
 8024d4e:	f080 80fc 	bcs.w	8024f4a <_AddFreeMemory+0x2ae>
 8024d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8024d54:	4290      	cmp	r0, r2
 8024d56:	f080 80b5 	bcs.w	8024ec4 <_AddFreeMemory+0x228>
 8024d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8024d5c:	4770      	bx	lr
 8024d5e:	6862      	ldr	r2, [r4, #4]
 8024d60:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8024d64:	498d      	ldr	r1, [pc, #564]	; (8024f9c <_AddFreeMemory+0x300>)
 8024d66:	42aa      	cmp	r2, r5
 8024d68:	4410      	add	r0, r2
 8024d6a:	f080 80fd 	bcs.w	8024f68 <_AddFreeMemory+0x2cc>
 8024d6e:	f8d1 50b0 	ldr.w	r5, [r1, #176]	; 0xb0
 8024d72:	42aa      	cmp	r2, r5
 8024d74:	f080 8105 	bcs.w	8024f82 <_AddFreeMemory+0x2e6>
 8024d78:	f8d1 50a8 	ldr.w	r5, [r1, #168]	; 0xa8
 8024d7c:	42aa      	cmp	r2, r5
 8024d7e:	f080 80fe 	bcs.w	8024f7e <_AddFreeMemory+0x2e2>
 8024d82:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 8024d86:	42aa      	cmp	r2, r5
 8024d88:	f080 80fd 	bcs.w	8024f86 <_AddFreeMemory+0x2ea>
 8024d8c:	f8d1 5098 	ldr.w	r5, [r1, #152]	; 0x98
 8024d90:	42aa      	cmp	r2, r5
 8024d92:	f080 80fa 	bcs.w	8024f8a <_AddFreeMemory+0x2ee>
 8024d96:	f8d1 5090 	ldr.w	r5, [r1, #144]	; 0x90
 8024d9a:	42aa      	cmp	r2, r5
 8024d9c:	f080 80f9 	bcs.w	8024f92 <_AddFreeMemory+0x2f6>
 8024da0:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8024da4:	42aa      	cmp	r2, r5
 8024da6:	f080 80f2 	bcs.w	8024f8e <_AddFreeMemory+0x2f2>
 8024daa:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8024dae:	428a      	cmp	r2, r1
 8024db0:	f080 8104 	bcs.w	8024fbc <_AddFreeMemory+0x320>
 8024db4:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8024db6:	4979      	ldr	r1, [pc, #484]	; (8024f9c <_AddFreeMemory+0x300>)
 8024db8:	42aa      	cmp	r2, r5
 8024dba:	f080 80fd 	bcs.w	8024fb8 <_AddFreeMemory+0x31c>
 8024dbe:	6f0d      	ldr	r5, [r1, #112]	; 0x70
 8024dc0:	42aa      	cmp	r2, r5
 8024dc2:	f080 810e 	bcs.w	8024fe2 <_AddFreeMemory+0x346>
 8024dc6:	6e8d      	ldr	r5, [r1, #104]	; 0x68
 8024dc8:	42aa      	cmp	r2, r5
 8024dca:	f080 8108 	bcs.w	8024fde <_AddFreeMemory+0x342>
 8024dce:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 8024dd0:	42aa      	cmp	r2, r5
 8024dd2:	f080 810c 	bcs.w	8024fee <_AddFreeMemory+0x352>
 8024dd6:	6d8d      	ldr	r5, [r1, #88]	; 0x58
 8024dd8:	42aa      	cmp	r2, r5
 8024dda:	f080 8106 	bcs.w	8024fea <_AddFreeMemory+0x34e>
 8024dde:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8024de0:	42aa      	cmp	r2, r5
 8024de2:	f080 8100 	bcs.w	8024fe6 <_AddFreeMemory+0x34a>
 8024de6:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8024de8:	42aa      	cmp	r2, r5
 8024dea:	d25e      	bcs.n	8024eaa <_AddFreeMemory+0x20e>
 8024dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8024dee:	428a      	cmp	r2, r1
 8024df0:	bf28      	it	cs
 8024df2:	2600      	movcs	r6, #0
 8024df4:	d25a      	bcs.n	8024eac <_AddFreeMemory+0x210>
 8024df6:	4621      	mov	r1, r4
 8024df8:	e765      	b.n	8024cc6 <_AddFreeMemory+0x2a>
 8024dfa:	6865      	ldr	r5, [r4, #4]
 8024dfc:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8024e00:	42b5      	cmp	r5, r6
 8024e02:	4428      	add	r0, r5
 8024e04:	f080 80ad 	bcs.w	8024f62 <_AddFreeMemory+0x2c6>
 8024e08:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8024e0c:	42b5      	cmp	r5, r6
 8024e0e:	f080 80b3 	bcs.w	8024f78 <_AddFreeMemory+0x2dc>
 8024e12:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8024e16:	42b5      	cmp	r5, r6
 8024e18:	f080 80ab 	bcs.w	8024f72 <_AddFreeMemory+0x2d6>
 8024e1c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8024e20:	42b5      	cmp	r5, r6
 8024e22:	f080 80a3 	bcs.w	8024f6c <_AddFreeMemory+0x2d0>
 8024e26:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8024e2a:	42b5      	cmp	r5, r6
 8024e2c:	f080 80c1 	bcs.w	8024fb2 <_AddFreeMemory+0x316>
 8024e30:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8024e34:	42b5      	cmp	r5, r6
 8024e36:	f080 80b9 	bcs.w	8024fac <_AddFreeMemory+0x310>
 8024e3a:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8024e3e:	42b5      	cmp	r5, r6
 8024e40:	f080 80b1 	bcs.w	8024fa6 <_AddFreeMemory+0x30a>
 8024e44:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8024e48:	42b5      	cmp	r5, r6
 8024e4a:	f080 80a9 	bcs.w	8024fa0 <_AddFreeMemory+0x304>
 8024e4e:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8024e50:	42bd      	cmp	r5, r7
 8024e52:	f080 80a0 	bcs.w	8024f96 <_AddFreeMemory+0x2fa>
 8024e56:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8024e58:	42bd      	cmp	r5, r7
 8024e5a:	f080 80b1 	bcs.w	8024fc0 <_AddFreeMemory+0x324>
 8024e5e:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8024e60:	42bd      	cmp	r5, r7
 8024e62:	f080 80b3 	bcs.w	8024fcc <_AddFreeMemory+0x330>
 8024e66:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8024e68:	42bd      	cmp	r5, r7
 8024e6a:	f080 80ac 	bcs.w	8024fc6 <_AddFreeMemory+0x32a>
 8024e6e:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8024e70:	42bd      	cmp	r5, r7
 8024e72:	f080 80b1 	bcs.w	8024fd8 <_AddFreeMemory+0x33c>
 8024e76:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8024e78:	42bd      	cmp	r5, r7
 8024e7a:	f080 80aa 	bcs.w	8024fd2 <_AddFreeMemory+0x336>
 8024e7e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8024e80:	42bd      	cmp	r5, r7
 8024e82:	f080 80b6 	bcs.w	8024ff2 <_AddFreeMemory+0x356>
 8024e86:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8024e88:	42b5      	cmp	r5, r6
 8024e8a:	bf28      	it	cs
 8024e8c:	f04f 0c00 	movcs.w	ip, #0
 8024e90:	f4ff af11 	bcc.w	8024cb6 <_AddFreeMemory+0x1a>
 8024e94:	681e      	ldr	r6, [r3, #0]
 8024e96:	68a7      	ldr	r7, [r4, #8]
 8024e98:	68e4      	ldr	r4, [r4, #12]
 8024e9a:	1b75      	subs	r5, r6, r5
 8024e9c:	601d      	str	r5, [r3, #0]
 8024e9e:	b107      	cbz	r7, 8024ea2 <_AddFreeMemory+0x206>
 8024ea0:	607c      	str	r4, [r7, #4]
 8024ea2:	2c00      	cmp	r4, #0
 8024ea4:	d058      	beq.n	8024f58 <_AddFreeMemory+0x2bc>
 8024ea6:	6027      	str	r7, [r4, #0]
 8024ea8:	e705      	b.n	8024cb6 <_AddFreeMemory+0x1a>
 8024eaa:	2601      	movs	r6, #1
 8024eac:	681f      	ldr	r7, [r3, #0]
 8024eae:	68a5      	ldr	r5, [r4, #8]
 8024eb0:	68e1      	ldr	r1, [r4, #12]
 8024eb2:	1aba      	subs	r2, r7, r2
 8024eb4:	601a      	str	r2, [r3, #0]
 8024eb6:	b105      	cbz	r5, 8024eba <_AddFreeMemory+0x21e>
 8024eb8:	6069      	str	r1, [r5, #4]
 8024eba:	2900      	cmp	r1, #0
 8024ebc:	d047      	beq.n	8024f4e <_AddFreeMemory+0x2b2>
 8024ebe:	600d      	str	r5, [r1, #0]
 8024ec0:	4621      	mov	r1, r4
 8024ec2:	e700      	b.n	8024cc6 <_AddFreeMemory+0x2a>
 8024ec4:	2500      	movs	r5, #0
 8024ec6:	3508      	adds	r5, #8
 8024ec8:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8024ecc:	180e      	adds	r6, r1, r0
 8024ece:	6852      	ldr	r2, [r2, #4]
 8024ed0:	608a      	str	r2, [r1, #8]
 8024ed2:	2400      	movs	r4, #0
 8024ed4:	600c      	str	r4, [r1, #0]
 8024ed6:	6048      	str	r0, [r1, #4]
 8024ed8:	6109      	str	r1, [r1, #16]
 8024eda:	f101 0408 	add.w	r4, r1, #8
 8024ede:	f846 0c04 	str.w	r0, [r6, #-4]
 8024ee2:	b102      	cbz	r2, 8024ee6 <_AddFreeMemory+0x24a>
 8024ee4:	6054      	str	r4, [r2, #4]
 8024ee6:	2200      	movs	r2, #0
 8024ee8:	60ca      	str	r2, [r1, #12]
 8024eea:	681a      	ldr	r2, [r3, #0]
 8024eec:	f893 6029 	ldrb.w	r6, [r3, #41]	; 0x29
 8024ef0:	492a      	ldr	r1, [pc, #168]	; (8024f9c <_AddFreeMemory+0x300>)
 8024ef2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8024ef6:	4402      	add	r2, r0
 8024ef8:	606c      	str	r4, [r5, #4]
 8024efa:	601a      	str	r2, [r3, #0]
 8024efc:	2e00      	cmp	r6, #0
 8024efe:	f47f af2c 	bne.w	8024d5a <_AddFreeMemory+0xbe>
 8024f02:	68cc      	ldr	r4, [r1, #12]
 8024f04:	688b      	ldr	r3, [r1, #8]
 8024f06:	1aa2      	subs	r2, r4, r2
 8024f08:	429a      	cmp	r2, r3
 8024f0a:	bf88      	it	hi
 8024f0c:	608a      	strhi	r2, [r1, #8]
 8024f0e:	bcf0      	pop	{r4, r5, r6, r7}
 8024f10:	4770      	bx	lr
 8024f12:	250f      	movs	r5, #15
 8024f14:	e7d7      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f16:	250e      	movs	r5, #14
 8024f18:	e7d5      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f1a:	250d      	movs	r5, #13
 8024f1c:	e7d3      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f1e:	250c      	movs	r5, #12
 8024f20:	e7d1      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f22:	250b      	movs	r5, #11
 8024f24:	e7cf      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f26:	250a      	movs	r5, #10
 8024f28:	e7cd      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f2a:	2509      	movs	r5, #9
 8024f2c:	e7cb      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f2e:	2508      	movs	r5, #8
 8024f30:	e7c9      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f32:	2507      	movs	r5, #7
 8024f34:	e7c7      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f36:	2506      	movs	r5, #6
 8024f38:	e7c5      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f3a:	2505      	movs	r5, #5
 8024f3c:	e7c3      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f3e:	2504      	movs	r5, #4
 8024f40:	e7c1      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f42:	2503      	movs	r5, #3
 8024f44:	e7bf      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f46:	2502      	movs	r5, #2
 8024f48:	e7bd      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f4a:	2501      	movs	r5, #1
 8024f4c:	e7bb      	b.n	8024ec6 <_AddFreeMemory+0x22a>
 8024f4e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8024f52:	4621      	mov	r1, r4
 8024f54:	6475      	str	r5, [r6, #68]	; 0x44
 8024f56:	e6b6      	b.n	8024cc6 <_AddFreeMemory+0x2a>
 8024f58:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8024f5c:	f8cc 7044 	str.w	r7, [ip, #68]	; 0x44
 8024f60:	e6a9      	b.n	8024cb6 <_AddFreeMemory+0x1a>
 8024f62:	f04f 0c0f 	mov.w	ip, #15
 8024f66:	e795      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024f68:	260f      	movs	r6, #15
 8024f6a:	e79f      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f6c:	f04f 0c0c 	mov.w	ip, #12
 8024f70:	e790      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024f72:	f04f 0c0d 	mov.w	ip, #13
 8024f76:	e78d      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024f78:	f04f 0c0e 	mov.w	ip, #14
 8024f7c:	e78a      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024f7e:	260d      	movs	r6, #13
 8024f80:	e794      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f82:	260e      	movs	r6, #14
 8024f84:	e792      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f86:	260c      	movs	r6, #12
 8024f88:	e790      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f8a:	260b      	movs	r6, #11
 8024f8c:	e78e      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f8e:	2609      	movs	r6, #9
 8024f90:	e78c      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f92:	260a      	movs	r6, #10
 8024f94:	e78a      	b.n	8024eac <_AddFreeMemory+0x210>
 8024f96:	f04f 0c07 	mov.w	ip, #7
 8024f9a:	e77b      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024f9c:	2002cc34 	.word	0x2002cc34
 8024fa0:	f04f 0c08 	mov.w	ip, #8
 8024fa4:	e776      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fa6:	f04f 0c09 	mov.w	ip, #9
 8024faa:	e773      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fac:	f04f 0c0a 	mov.w	ip, #10
 8024fb0:	e770      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fb2:	f04f 0c0b 	mov.w	ip, #11
 8024fb6:	e76d      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fb8:	2607      	movs	r6, #7
 8024fba:	e777      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fbc:	2608      	movs	r6, #8
 8024fbe:	e775      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fc0:	f04f 0c06 	mov.w	ip, #6
 8024fc4:	e766      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fc6:	f04f 0c04 	mov.w	ip, #4
 8024fca:	e763      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fcc:	f04f 0c05 	mov.w	ip, #5
 8024fd0:	e760      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fd2:	f04f 0c02 	mov.w	ip, #2
 8024fd6:	e75d      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fd8:	f04f 0c03 	mov.w	ip, #3
 8024fdc:	e75a      	b.n	8024e94 <_AddFreeMemory+0x1f8>
 8024fde:	2605      	movs	r6, #5
 8024fe0:	e764      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fe2:	2606      	movs	r6, #6
 8024fe4:	e762      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fe6:	2602      	movs	r6, #2
 8024fe8:	e760      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fea:	2603      	movs	r6, #3
 8024fec:	e75e      	b.n	8024eac <_AddFreeMemory+0x210>
 8024fee:	2604      	movs	r6, #4
 8024ff0:	e75c      	b.n	8024eac <_AddFreeMemory+0x210>
 8024ff2:	f04f 0c01 	mov.w	ip, #1
 8024ff6:	e74d      	b.n	8024e94 <_AddFreeMemory+0x1f8>

08024ff8 <_RemoveHoles>:
 8024ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ffc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80251d0 <_RemoveHoles+0x1d8>
 8025000:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8025004:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8025008:	e893 0030 	ldmia.w	r3, {r4, r5}
 802500c:	3e01      	subs	r6, #1
 802500e:	b083      	sub	sp, #12
 8025010:	4683      	mov	fp, r0
 8025012:	441e      	add	r6, r3
 8025014:	46c1      	mov	r9, r8
 8025016:	b134      	cbz	r4, 8025026 <_RemoveHoles+0x2e>
 8025018:	442b      	add	r3, r5
 802501a:	429e      	cmp	r6, r3
 802501c:	d906      	bls.n	802502c <_RemoveHoles+0x34>
 802501e:	e893 0030 	ldmia.w	r3, {r4, r5}
 8025022:	2c00      	cmp	r4, #0
 8025024:	d1f8      	bne.n	8025018 <_RemoveHoles+0x20>
 8025026:	18e9      	adds	r1, r5, r3
 8025028:	428e      	cmp	r6, r1
 802502a:	d803      	bhi.n	8025034 <_RemoveHoles+0x3c>
 802502c:	2001      	movs	r0, #1
 802502e:	b003      	add	sp, #12
 8025030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025034:	58ec      	ldr	r4, [r5, r3]
 8025036:	684f      	ldr	r7, [r1, #4]
 8025038:	b154      	cbz	r4, 8025050 <_RemoveHoles+0x58>
 802503a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 802503e:	f812 0034 	ldrb.w	r0, [r2, r4, lsl #3]
 8025042:	2801      	cmp	r0, #1
 8025044:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025048:	d005      	beq.n	8025056 <_RemoveHoles+0x5e>
 802504a:	463d      	mov	r5, r7
 802504c:	460b      	mov	r3, r1
 802504e:	e7e2      	b.n	8025016 <_RemoveHoles+0x1e>
 8025050:	463d      	mov	r5, r7
 8025052:	460b      	mov	r3, r1
 8025054:	e7e7      	b.n	8025026 <_RemoveHoles+0x2e>
 8025056:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 802505a:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 802505e:	42a8      	cmp	r0, r5
 8025060:	d97e      	bls.n	8025160 <_RemoveHoles+0x168>
 8025062:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 8025066:	42a8      	cmp	r0, r5
 8025068:	d97d      	bls.n	8025166 <_RemoveHoles+0x16e>
 802506a:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 802506e:	42a8      	cmp	r0, r5
 8025070:	d97e      	bls.n	8025170 <_RemoveHoles+0x178>
 8025072:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8025076:	42a8      	cmp	r0, r5
 8025078:	d97d      	bls.n	8025176 <_RemoveHoles+0x17e>
 802507a:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 802507e:	4285      	cmp	r5, r0
 8025080:	f080 8086 	bcs.w	8025190 <_RemoveHoles+0x198>
 8025084:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 8025088:	4285      	cmp	r5, r0
 802508a:	f080 8084 	bcs.w	8025196 <_RemoveHoles+0x19e>
 802508e:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8025092:	4285      	cmp	r5, r0
 8025094:	d274      	bcs.n	8025180 <_RemoveHoles+0x188>
 8025096:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 802509a:	4285      	cmp	r5, r0
 802509c:	d273      	bcs.n	8025186 <_RemoveHoles+0x18e>
 802509e:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 80250a2:	4285      	cmp	r5, r0
 80250a4:	f080 8084 	bcs.w	80251b0 <_RemoveHoles+0x1b8>
 80250a8:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 80250ac:	4285      	cmp	r5, r0
 80250ae:	f080 8082 	bcs.w	80251b6 <_RemoveHoles+0x1be>
 80250b2:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 80250b6:	4285      	cmp	r5, r0
 80250b8:	f080 8082 	bcs.w	80251c0 <_RemoveHoles+0x1c8>
 80250bc:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 80250c0:	4285      	cmp	r5, r0
 80250c2:	d26d      	bcs.n	80251a0 <_RemoveHoles+0x1a8>
 80250c4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80250c8:	4285      	cmp	r5, r0
 80250ca:	d26e      	bcs.n	80251aa <_RemoveHoles+0x1b2>
 80250cc:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80250d0:	4285      	cmp	r5, r0
 80250d2:	d278      	bcs.n	80251c6 <_RemoveHoles+0x1ce>
 80250d4:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 80250d8:	4285      	cmp	r5, r0
 80250da:	d21f      	bcs.n	802511c <_RemoveHoles+0x124>
 80250dc:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 80250e0:	4285      	cmp	r5, r0
 80250e2:	d231      	bcs.n	8025148 <_RemoveHoles+0x150>
 80250e4:	6053      	str	r3, [r2, #4]
 80250e6:	4618      	mov	r0, r3
 80250e8:	463a      	mov	r2, r7
 80250ea:	f005 fb66 	bl	802a7ba <memmove>
 80250ee:	4554      	cmp	r4, sl
 80250f0:	4603      	mov	r3, r0
 80250f2:	d00b      	beq.n	802510c <_RemoveHoles+0x114>
 80250f4:	441f      	add	r7, r3
 80250f6:	4628      	mov	r0, r5
 80250f8:	4639      	mov	r1, r7
 80250fa:	f7ff fdcf 	bl	8024c9c <_AddFreeMemory>
 80250fe:	f1bb 0f00 	cmp.w	fp, #0
 8025102:	d001      	beq.n	8025108 <_RemoveHoles+0x110>
 8025104:	4558      	cmp	r0, fp
 8025106:	d207      	bcs.n	8025118 <_RemoveHoles+0x120>
 8025108:	463b      	mov	r3, r7
 802510a:	e786      	b.n	802501a <_RemoveHoles+0x22>
 802510c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8025110:	1b52      	subs	r2, r2, r5
 8025112:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8025116:	e7ed      	b.n	80250f4 <_RemoveHoles+0xfc>
 8025118:	2000      	movs	r0, #0
 802511a:	e788      	b.n	802502e <_RemoveHoles+0x36>
 802511c:	2001      	movs	r0, #1
 802511e:	9001      	str	r0, [sp, #4]
 8025120:	f8d8 0000 	ldr.w	r0, [r8]
 8025124:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8025128:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 802512c:	1b40      	subs	r0, r0, r5
 802512e:	f8c8 0000 	str.w	r0, [r8]
 8025132:	f1be 0f00 	cmp.w	lr, #0
 8025136:	d001      	beq.n	802513c <_RemoveHoles+0x144>
 8025138:	f8ce c004 	str.w	ip, [lr, #4]
 802513c:	f1bc 0f00 	cmp.w	ip, #0
 8025140:	d007      	beq.n	8025152 <_RemoveHoles+0x15a>
 8025142:	f8cc e000 	str.w	lr, [ip]
 8025146:	e7cd      	b.n	80250e4 <_RemoveHoles+0xec>
 8025148:	f04f 0c00 	mov.w	ip, #0
 802514c:	f8cd c004 	str.w	ip, [sp, #4]
 8025150:	e7e6      	b.n	8025120 <_RemoveHoles+0x128>
 8025152:	f8dd c004 	ldr.w	ip, [sp, #4]
 8025156:	eb08 00cc 	add.w	r0, r8, ip, lsl #3
 802515a:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 802515e:	e7c1      	b.n	80250e4 <_RemoveHoles+0xec>
 8025160:	200f      	movs	r0, #15
 8025162:	9001      	str	r0, [sp, #4]
 8025164:	e7dc      	b.n	8025120 <_RemoveHoles+0x128>
 8025166:	f04f 0c0e 	mov.w	ip, #14
 802516a:	f8cd c004 	str.w	ip, [sp, #4]
 802516e:	e7d7      	b.n	8025120 <_RemoveHoles+0x128>
 8025170:	200d      	movs	r0, #13
 8025172:	9001      	str	r0, [sp, #4]
 8025174:	e7d4      	b.n	8025120 <_RemoveHoles+0x128>
 8025176:	f04f 0c0c 	mov.w	ip, #12
 802517a:	f8cd c004 	str.w	ip, [sp, #4]
 802517e:	e7cf      	b.n	8025120 <_RemoveHoles+0x128>
 8025180:	2009      	movs	r0, #9
 8025182:	9001      	str	r0, [sp, #4]
 8025184:	e7cc      	b.n	8025120 <_RemoveHoles+0x128>
 8025186:	f04f 0c08 	mov.w	ip, #8
 802518a:	f8cd c004 	str.w	ip, [sp, #4]
 802518e:	e7c7      	b.n	8025120 <_RemoveHoles+0x128>
 8025190:	200b      	movs	r0, #11
 8025192:	9001      	str	r0, [sp, #4]
 8025194:	e7c4      	b.n	8025120 <_RemoveHoles+0x128>
 8025196:	f04f 0c0a 	mov.w	ip, #10
 802519a:	f8cd c004 	str.w	ip, [sp, #4]
 802519e:	e7bf      	b.n	8025120 <_RemoveHoles+0x128>
 80251a0:	f04f 0c04 	mov.w	ip, #4
 80251a4:	f8cd c004 	str.w	ip, [sp, #4]
 80251a8:	e7ba      	b.n	8025120 <_RemoveHoles+0x128>
 80251aa:	2003      	movs	r0, #3
 80251ac:	9001      	str	r0, [sp, #4]
 80251ae:	e7b7      	b.n	8025120 <_RemoveHoles+0x128>
 80251b0:	2007      	movs	r0, #7
 80251b2:	9001      	str	r0, [sp, #4]
 80251b4:	e7b4      	b.n	8025120 <_RemoveHoles+0x128>
 80251b6:	f04f 0c06 	mov.w	ip, #6
 80251ba:	f8cd c004 	str.w	ip, [sp, #4]
 80251be:	e7af      	b.n	8025120 <_RemoveHoles+0x128>
 80251c0:	2005      	movs	r0, #5
 80251c2:	9001      	str	r0, [sp, #4]
 80251c4:	e7ac      	b.n	8025120 <_RemoveHoles+0x128>
 80251c6:	f04f 0c02 	mov.w	ip, #2
 80251ca:	f8cd c004 	str.w	ip, [sp, #4]
 80251ce:	e7a7      	b.n	8025120 <_RemoveHoles+0x128>
 80251d0:	2002cc34 	.word	0x2002cc34

080251d4 <_Alloc>:
 80251d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d8:	4cc3      	ldr	r4, [pc, #780]	; (80254e8 <_Alloc+0x314>)
 80251da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80251de:	4605      	mov	r5, r0
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	f000 8107 	beq.w	80253f4 <_Alloc+0x220>
 80251e6:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80251e8:	6823      	ldr	r3, [r4, #0]
 80251ea:	42b5      	cmp	r5, r6
 80251ec:	bf24      	itt	cs
 80251ee:	3503      	addcs	r5, #3
 80251f0:	f025 0603 	biccs.w	r6, r5, #3
 80251f4:	360c      	adds	r6, #12
 80251f6:	42b3      	cmp	r3, r6
 80251f8:	4dbb      	ldr	r5, [pc, #748]	; (80254e8 <_Alloc+0x314>)
 80251fa:	d202      	bcs.n	8025202 <_Alloc+0x2e>
 80251fc:	2000      	movs	r0, #0
 80251fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025202:	686b      	ldr	r3, [r5, #4]
 8025204:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8025206:	4293      	cmp	r3, r2
 8025208:	f240 8172 	bls.w	80254f0 <_Alloc+0x31c>
 802520c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802520e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8025210:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8025214:	3b01      	subs	r3, #1
 8025216:	eb02 0108 	add.w	r1, r2, r8
 802521a:	6063      	str	r3, [r4, #4]
 802521c:	684b      	ldr	r3, [r1, #4]
 802521e:	6263      	str	r3, [r4, #36]	; 0x24
 8025220:	2301      	movs	r3, #1
 8025222:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 8025226:	2d00      	cmp	r5, #0
 8025228:	d0e8      	beq.n	80251fc <_Alloc+0x28>
 802522a:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 80254e8 <_Alloc+0x314>
 802522e:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 8025232:	42be      	cmp	r6, r7
 8025234:	f080 813a 	bcs.w	80254ac <_Alloc+0x2d8>
 8025238:	f8d9 30b0 	ldr.w	r3, [r9, #176]	; 0xb0
 802523c:	429e      	cmp	r6, r3
 802523e:	f080 8137 	bcs.w	80254b0 <_Alloc+0x2dc>
 8025242:	f8d9 30a8 	ldr.w	r3, [r9, #168]	; 0xa8
 8025246:	429e      	cmp	r6, r3
 8025248:	f080 8134 	bcs.w	80254b4 <_Alloc+0x2e0>
 802524c:	f8d9 30a0 	ldr.w	r3, [r9, #160]	; 0xa0
 8025250:	429e      	cmp	r6, r3
 8025252:	f080 8133 	bcs.w	80254bc <_Alloc+0x2e8>
 8025256:	f8d9 3098 	ldr.w	r3, [r9, #152]	; 0x98
 802525a:	429e      	cmp	r6, r3
 802525c:	f080 812c 	bcs.w	80254b8 <_Alloc+0x2e4>
 8025260:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
 8025264:	429e      	cmp	r6, r3
 8025266:	f080 812d 	bcs.w	80254c4 <_Alloc+0x2f0>
 802526a:	f8d9 3088 	ldr.w	r3, [r9, #136]	; 0x88
 802526e:	429e      	cmp	r6, r3
 8025270:	f080 8126 	bcs.w	80254c0 <_Alloc+0x2ec>
 8025274:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
 8025278:	429e      	cmp	r6, r3
 802527a:	f080 8127 	bcs.w	80254cc <_Alloc+0x2f8>
 802527e:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
 8025282:	429e      	cmp	r6, r3
 8025284:	f080 8120 	bcs.w	80254c8 <_Alloc+0x2f4>
 8025288:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 802528c:	429e      	cmp	r6, r3
 802528e:	f080 8121 	bcs.w	80254d4 <_Alloc+0x300>
 8025292:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025294:	429e      	cmp	r6, r3
 8025296:	f080 811b 	bcs.w	80254d0 <_Alloc+0x2fc>
 802529a:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 802529e:	429e      	cmp	r6, r3
 80252a0:	f080 811a 	bcs.w	80254d8 <_Alloc+0x304>
 80252a4:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 80252a8:	429e      	cmp	r6, r3
 80252aa:	f080 8117 	bcs.w	80254dc <_Alloc+0x308>
 80252ae:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 80252b2:	429e      	cmp	r6, r3
 80252b4:	f080 8116 	bcs.w	80254e4 <_Alloc+0x310>
 80252b8:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80252bc:	429e      	cmp	r6, r3
 80252be:	f080 810f 	bcs.w	80254e0 <_Alloc+0x30c>
 80252c2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80252c6:	429e      	cmp	r6, r3
 80252c8:	bf2c      	ite	cs
 80252ca:	2300      	movcs	r3, #0
 80252cc:	f06f 0300 	mvncc.w	r3, #0
 80252d0:	2b0f      	cmp	r3, #15
 80252d2:	bf98      	it	ls
 80252d4:	2100      	movls	r1, #0
 80252d6:	d814      	bhi.n	8025302 <_Alloc+0x12e>
 80252d8:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
 80252dc:	2000      	movs	r0, #0
 80252de:	eb0c 0300 	add.w	r3, ip, r0
 80252e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80252e4:	b92b      	cbnz	r3, 80252f2 <_Alloc+0x11e>
 80252e6:	e007      	b.n	80252f8 <_Alloc+0x124>
 80252e8:	685a      	ldr	r2, [r3, #4]
 80252ea:	4296      	cmp	r6, r2
 80252ec:	d91d      	bls.n	802532a <_Alloc+0x156>
 80252ee:	689b      	ldr	r3, [r3, #8]
 80252f0:	b113      	cbz	r3, 80252f8 <_Alloc+0x124>
 80252f2:	689b      	ldr	r3, [r3, #8]
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	d1f7      	bne.n	80252e8 <_Alloc+0x114>
 80252f8:	3101      	adds	r1, #1
 80252fa:	290f      	cmp	r1, #15
 80252fc:	f100 0008 	add.w	r0, r0, #8
 8025300:	d9ed      	bls.n	80252de <_Alloc+0x10a>
 8025302:	4630      	mov	r0, r6
 8025304:	f7ff fe78 	bl	8024ff8 <_RemoveHoles>
 8025308:	2800      	cmp	r0, #0
 802530a:	d090      	beq.n	802522e <_Alloc+0x5a>
 802530c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802530e:	6862      	ldr	r2, [r4, #4]
 8025310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025312:	4498      	add	r8, r3
 8025314:	1c50      	adds	r0, r2, #1
 8025316:	2200      	movs	r2, #0
 8025318:	6060      	str	r0, [r4, #4]
 802531a:	f8c8 1004 	str.w	r1, [r8, #4]
 802531e:	f803 2035 	strb.w	r2, [r3, r5, lsl #3]
 8025322:	4610      	mov	r0, r2
 8025324:	6265      	str	r5, [r4, #36]	; 0x24
 8025326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802532a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802532c:	ebc6 0c02 	rsb	ip, r6, r2
 8025330:	f101 000c 	add.w	r0, r1, #12
 8025334:	4584      	cmp	ip, r0
 8025336:	bf2c      	ite	cs
 8025338:	4630      	movcs	r0, r6
 802533a:	4610      	movcc	r0, r2
 802533c:	42ba      	cmp	r2, r7
 802533e:	f080 8101 	bcs.w	8025544 <_Alloc+0x370>
 8025342:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8025346:	4e68      	ldr	r6, [pc, #416]	; (80254e8 <_Alloc+0x314>)
 8025348:	42ba      	cmp	r2, r7
 802534a:	f080 80fd 	bcs.w	8025548 <_Alloc+0x374>
 802534e:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 8025352:	42ba      	cmp	r2, r7
 8025354:	f080 80fa 	bcs.w	802554c <_Alloc+0x378>
 8025358:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 802535c:	42ba      	cmp	r2, r7
 802535e:	f080 80e9 	bcs.w	8025534 <_Alloc+0x360>
 8025362:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8025366:	42ba      	cmp	r2, r7
 8025368:	f080 80e6 	bcs.w	8025538 <_Alloc+0x364>
 802536c:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8025370:	4297      	cmp	r7, r2
 8025372:	f240 80ef 	bls.w	8025554 <_Alloc+0x380>
 8025376:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 802537a:	4297      	cmp	r7, r2
 802537c:	f240 80e8 	bls.w	8025550 <_Alloc+0x37c>
 8025380:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8025384:	4297      	cmp	r7, r2
 8025386:	f240 80f3 	bls.w	8025570 <_Alloc+0x39c>
 802538a:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 802538c:	4297      	cmp	r7, r2
 802538e:	f240 80ed 	bls.w	802556c <_Alloc+0x398>
 8025392:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8025394:	4296      	cmp	r6, r2
 8025396:	f240 80e7 	bls.w	8025568 <_Alloc+0x394>
 802539a:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 802539c:	4f52      	ldr	r7, [pc, #328]	; (80254e8 <_Alloc+0x314>)
 802539e:	4296      	cmp	r6, r2
 80253a0:	f240 80e0 	bls.w	8025564 <_Alloc+0x390>
 80253a4:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80253a6:	4296      	cmp	r6, r2
 80253a8:	f240 80da 	bls.w	8025560 <_Alloc+0x38c>
 80253ac:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80253ae:	42b2      	cmp	r2, r6
 80253b0:	f080 80d4 	bcs.w	802555c <_Alloc+0x388>
 80253b4:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80253b6:	42b2      	cmp	r2, r6
 80253b8:	f080 80ce 	bcs.w	8025558 <_Alloc+0x384>
 80253bc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80253be:	42b2      	cmp	r2, r6
 80253c0:	f080 80a2 	bcs.w	8025508 <_Alloc+0x334>
 80253c4:	4291      	cmp	r1, r2
 80253c6:	bf98      	it	ls
 80253c8:	2100      	movls	r1, #0
 80253ca:	f240 809e 	bls.w	802550a <_Alloc+0x336>
 80253ce:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80253d0:	1819      	adds	r1, r3, r0
 80253d2:	44a0      	add	r8, r4
 80253d4:	4290      	cmp	r0, r2
 80253d6:	f04f 0400 	mov.w	r4, #0
 80253da:	f8c8 3004 	str.w	r3, [r8, #4]
 80253de:	601d      	str	r5, [r3, #0]
 80253e0:	6058      	str	r0, [r3, #4]
 80253e2:	611b      	str	r3, [r3, #16]
 80253e4:	609c      	str	r4, [r3, #8]
 80253e6:	f841 0c04 	str.w	r0, [r1, #-4]
 80253ea:	f2c0 809d 	blt.w	8025528 <_Alloc+0x354>
 80253ee:	4628      	mov	r0, r5
 80253f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253f4:	4b3d      	ldr	r3, [pc, #244]	; (80254ec <_Alloc+0x318>)
 80253f6:	689a      	ldr	r2, [r3, #8]
 80253f8:	6858      	ldr	r0, [r3, #4]
 80253fa:	2101      	movs	r1, #1
 80253fc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8025400:	b90a      	cbnz	r2, 8025406 <_Alloc+0x232>
 8025402:	0882      	lsrs	r2, r0, #2
 8025404:	609a      	str	r2, [r3, #8]
 8025406:	6819      	ldr	r1, [r3, #0]
 8025408:	63a1      	str	r1, [r4, #56]	; 0x38
 802540a:	f1a1 0314 	sub.w	r3, r1, #20
 802540e:	265a      	movs	r6, #90	; 0x5a
 8025410:	4403      	add	r3, r0
 8025412:	6226      	str	r6, [r4, #32]
 8025414:	f04f 0b10 	mov.w	fp, #16
 8025418:	f04f 0a20 	mov.w	sl, #32
 802541c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8025420:	f04f 0880 	mov.w	r8, #128	; 0x80
 8025424:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8025428:	f44f 7e00 	mov.w	lr, #512	; 0x200
 802542c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8025430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025434:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8025438:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
 802543c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8025440:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 8025444:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
 8025448:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 802544c:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 8025450:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8025454:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8025458:	6727      	str	r7, [r4, #112]	; 0x70
 802545a:	67a2      	str	r2, [r4, #120]	; 0x78
 802545c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8025460:	2202      	movs	r2, #2
 8025462:	2601      	movs	r6, #1
 8025464:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8025468:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 802546c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8025470:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8025474:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8025478:	6363      	str	r3, [r4, #52]	; 0x34
 802547a:	f8c4 c0a8 	str.w	ip, [r4, #168]	; 0xa8
 802547e:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 8025482:	6122      	str	r2, [r4, #16]
 8025484:	60e0      	str	r0, [r4, #12]
 8025486:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
 802548a:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
 802548e:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8025492:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
 8025496:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 802549a:	605e      	str	r6, [r3, #4]
 802549c:	6266      	str	r6, [r4, #36]	; 0x24
 802549e:	6066      	str	r6, [r4, #4]
 80254a0:	f7ff fbfc 	bl	8024c9c <_AddFreeMemory>
 80254a4:	f000 f866 	bl	8025574 <_EnlargeBlocks>
 80254a8:	6326      	str	r6, [r4, #48]	; 0x30
 80254aa:	e69c      	b.n	80251e6 <_Alloc+0x12>
 80254ac:	210f      	movs	r1, #15
 80254ae:	e713      	b.n	80252d8 <_Alloc+0x104>
 80254b0:	210e      	movs	r1, #14
 80254b2:	e711      	b.n	80252d8 <_Alloc+0x104>
 80254b4:	210d      	movs	r1, #13
 80254b6:	e70f      	b.n	80252d8 <_Alloc+0x104>
 80254b8:	210b      	movs	r1, #11
 80254ba:	e70d      	b.n	80252d8 <_Alloc+0x104>
 80254bc:	210c      	movs	r1, #12
 80254be:	e70b      	b.n	80252d8 <_Alloc+0x104>
 80254c0:	2109      	movs	r1, #9
 80254c2:	e709      	b.n	80252d8 <_Alloc+0x104>
 80254c4:	210a      	movs	r1, #10
 80254c6:	e707      	b.n	80252d8 <_Alloc+0x104>
 80254c8:	2107      	movs	r1, #7
 80254ca:	e705      	b.n	80252d8 <_Alloc+0x104>
 80254cc:	2108      	movs	r1, #8
 80254ce:	e703      	b.n	80252d8 <_Alloc+0x104>
 80254d0:	2105      	movs	r1, #5
 80254d2:	e701      	b.n	80252d8 <_Alloc+0x104>
 80254d4:	2106      	movs	r1, #6
 80254d6:	e6ff      	b.n	80252d8 <_Alloc+0x104>
 80254d8:	2104      	movs	r1, #4
 80254da:	e6fd      	b.n	80252d8 <_Alloc+0x104>
 80254dc:	2103      	movs	r1, #3
 80254de:	e6fb      	b.n	80252d8 <_Alloc+0x104>
 80254e0:	2101      	movs	r1, #1
 80254e2:	e6f9      	b.n	80252d8 <_Alloc+0x104>
 80254e4:	2102      	movs	r1, #2
 80254e6:	e6f7      	b.n	80252d8 <_Alloc+0x104>
 80254e8:	2002cc34 	.word	0x2002cc34
 80254ec:	2002b2c8 	.word	0x2002b2c8
 80254f0:	3a01      	subs	r2, #1
 80254f2:	632a      	str	r2, [r5, #48]	; 0x30
 80254f4:	f000 f83e 	bl	8025574 <_EnlargeBlocks>
 80254f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80254fa:	3301      	adds	r3, #1
 80254fc:	632b      	str	r3, [r5, #48]	; 0x30
 80254fe:	2800      	cmp	r0, #0
 8025500:	f47f ae7c 	bne.w	80251fc <_Alloc+0x28>
 8025504:	686b      	ldr	r3, [r5, #4]
 8025506:	e681      	b.n	802520c <_Alloc+0x38>
 8025508:	2101      	movs	r1, #1
 802550a:	6826      	ldr	r6, [r4, #0]
 802550c:	689f      	ldr	r7, [r3, #8]
 802550e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8025512:	1ab6      	subs	r6, r6, r2
 8025514:	6026      	str	r6, [r4, #0]
 8025516:	b10f      	cbz	r7, 802551c <_Alloc+0x348>
 8025518:	f8c7 c004 	str.w	ip, [r7, #4]
 802551c:	f1bc 0f00 	cmp.w	ip, #0
 8025520:	d00c      	beq.n	802553c <_Alloc+0x368>
 8025522:	f8cc 7000 	str.w	r7, [ip]
 8025526:	e752      	b.n	80253ce <_Alloc+0x1fa>
 8025528:	1a10      	subs	r0, r2, r0
 802552a:	f7ff fbb7 	bl	8024c9c <_AddFreeMemory>
 802552e:	4628      	mov	r0, r5
 8025530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025534:	210c      	movs	r1, #12
 8025536:	e7e8      	b.n	802550a <_Alloc+0x336>
 8025538:	210b      	movs	r1, #11
 802553a:	e7e6      	b.n	802550a <_Alloc+0x336>
 802553c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8025540:	644f      	str	r7, [r1, #68]	; 0x44
 8025542:	e744      	b.n	80253ce <_Alloc+0x1fa>
 8025544:	210f      	movs	r1, #15
 8025546:	e7e0      	b.n	802550a <_Alloc+0x336>
 8025548:	210e      	movs	r1, #14
 802554a:	e7de      	b.n	802550a <_Alloc+0x336>
 802554c:	210d      	movs	r1, #13
 802554e:	e7dc      	b.n	802550a <_Alloc+0x336>
 8025550:	2109      	movs	r1, #9
 8025552:	e7da      	b.n	802550a <_Alloc+0x336>
 8025554:	210a      	movs	r1, #10
 8025556:	e7d8      	b.n	802550a <_Alloc+0x336>
 8025558:	2102      	movs	r1, #2
 802555a:	e7d6      	b.n	802550a <_Alloc+0x336>
 802555c:	2103      	movs	r1, #3
 802555e:	e7d4      	b.n	802550a <_Alloc+0x336>
 8025560:	2104      	movs	r1, #4
 8025562:	e7d2      	b.n	802550a <_Alloc+0x336>
 8025564:	2105      	movs	r1, #5
 8025566:	e7d0      	b.n	802550a <_Alloc+0x336>
 8025568:	2106      	movs	r1, #6
 802556a:	e7ce      	b.n	802550a <_Alloc+0x336>
 802556c:	2107      	movs	r1, #7
 802556e:	e7cc      	b.n	802550a <_Alloc+0x336>
 8025570:	2108      	movs	r1, #8
 8025572:	e7ca      	b.n	802550a <_Alloc+0x336>

08025574 <_EnlargeBlocks>:
 8025574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025578:	4c34      	ldr	r4, [pc, #208]	; (802564c <_EnlargeBlocks+0xd8>)
 802557a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802557c:	b973      	cbnz	r3, 802559c <_EnlargeBlocks+0x28>
 802557e:	4b34      	ldr	r3, [pc, #208]	; (8025650 <_EnlargeBlocks+0xdc>)
 8025580:	689f      	ldr	r7, [r3, #8]
 8025582:	685b      	ldr	r3, [r3, #4]
 8025584:	3708      	adds	r7, #8
 8025586:	fbb3 f7f7 	udiv	r7, r3, r7
 802558a:	3702      	adds	r7, #2
 802558c:	00f8      	lsls	r0, r7, #3
 802558e:	f7ff fe21 	bl	80251d4 <_Alloc>
 8025592:	4606      	mov	r6, r0
 8025594:	b960      	cbnz	r0, 80255b0 <_EnlargeBlocks+0x3c>
 8025596:	2001      	movs	r0, #1
 8025598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802559c:	6923      	ldr	r3, [r4, #16]
 802559e:	1d1f      	adds	r7, r3, #4
 80255a0:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 80255a4:	00f8      	lsls	r0, r7, #3
 80255a6:	f7ff fe15 	bl	80251d4 <_Alloc>
 80255aa:	4606      	mov	r6, r0
 80255ac:	2800      	cmp	r0, #0
 80255ae:	d0f2      	beq.n	8025596 <_EnlargeBlocks+0x22>
 80255b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80255b2:	6922      	ldr	r2, [r4, #16]
 80255b4:	4b27      	ldr	r3, [pc, #156]	; (8025654 <_EnlargeBlocks+0xe0>)
 80255b6:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80255ba:	681b      	ldr	r3, [r3, #0]
 80255bc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80255c0:	00d2      	lsls	r2, r2, #3
 80255c2:	6845      	ldr	r5, [r0, #4]
 80255c4:	f105 0908 	add.w	r9, r5, #8
 80255c8:	4648      	mov	r0, r9
 80255ca:	4798      	blx	r3
 80255cc:	6920      	ldr	r0, [r4, #16]
 80255ce:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80255d2:	1e7d      	subs	r5, r7, #1
 80255d4:	42a8      	cmp	r0, r5
 80255d6:	62e6      	str	r6, [r4, #44]	; 0x2c
 80255d8:	d235      	bcs.n	8025646 <_EnlargeBlocks+0xd2>
 80255da:	eb09 06c0 	add.w	r6, r9, r0, lsl #3
 80255de:	4603      	mov	r3, r0
 80255e0:	2200      	movs	r2, #0
 80255e2:	18b1      	adds	r1, r6, r2
 80255e4:	3301      	adds	r3, #1
 80255e6:	42ab      	cmp	r3, r5
 80255e8:	604b      	str	r3, [r1, #4]
 80255ea:	f102 0208 	add.w	r2, r2, #8
 80255ee:	d1f8      	bne.n	80255e2 <_EnlargeBlocks+0x6e>
 80255f0:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
 80255f4:	2600      	movs	r6, #0
 80255f6:	606e      	str	r6, [r5, #4]
 80255f8:	6863      	ldr	r3, [r4, #4]
 80255fa:	6260      	str	r0, [r4, #36]	; 0x24
 80255fc:	1a1b      	subs	r3, r3, r0
 80255fe:	443b      	add	r3, r7
 8025600:	6127      	str	r7, [r4, #16]
 8025602:	6063      	str	r3, [r4, #4]
 8025604:	4c11      	ldr	r4, [pc, #68]	; (802564c <_EnlargeBlocks+0xd8>)
 8025606:	f1b8 0f00 	cmp.w	r8, #0
 802560a:	d019      	beq.n	8025640 <_EnlargeBlocks+0xcc>
 802560c:	f7fd fdee 	bl	80231ec <GUI_Lock>
 8025610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025612:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8025616:	442b      	add	r3, r5
 8025618:	6859      	ldr	r1, [r3, #4]
 802561a:	6848      	ldr	r0, [r1, #4]
 802561c:	f7ff fb3e 	bl	8024c9c <_AddFreeMemory>
 8025620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025622:	6861      	ldr	r1, [r4, #4]
 8025624:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8025626:	441d      	add	r5, r3
 8025628:	3101      	adds	r1, #1
 802562a:	6061      	str	r1, [r4, #4]
 802562c:	606a      	str	r2, [r5, #4]
 802562e:	f803 6038 	strb.w	r6, [r3, r8, lsl #3]
 8025632:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8025636:	f7fd fdcf 	bl	80231d8 <GUI_Unlock>
 802563a:	4630      	mov	r0, r6
 802563c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025640:	4640      	mov	r0, r8
 8025642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025646:	4605      	mov	r5, r0
 8025648:	e7d2      	b.n	80255f0 <_EnlargeBlocks+0x7c>
 802564a:	bf00      	nop
 802564c:	2002cc34 	.word	0x2002cc34
 8025650:	2002b2c8 	.word	0x2002b2c8
 8025654:	20000258 	.word	0x20000258

08025658 <GUI_ALLOC_FreeFixedBlock>:
 8025658:	b128      	cbz	r0, 8025666 <GUI_ALLOC_FreeFixedBlock+0xe>
 802565a:	4a03      	ldr	r2, [pc, #12]	; (8025668 <GUI_ALLOC_FreeFixedBlock+0x10>)
 802565c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 802565e:	6003      	str	r3, [r0, #0]
 8025660:	b103      	cbz	r3, 8025664 <GUI_ALLOC_FreeFixedBlock+0xc>
 8025662:	6058      	str	r0, [r3, #4]
 8025664:	63d0      	str	r0, [r2, #60]	; 0x3c
 8025666:	4770      	bx	lr
 8025668:	2002cc34 	.word	0x2002cc34

0802566c <GUI_ALLOC_GetFixedBlock>:
 802566c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025670:	4d90      	ldr	r5, [pc, #576]	; (80258b4 <GUI_ALLOC_GetFixedBlock+0x248>)
 8025672:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8025676:	4604      	mov	r4, r0
 8025678:	2b00      	cmp	r3, #0
 802567a:	d031      	beq.n	80256e0 <GUI_ALLOC_GetFixedBlock+0x74>
 802567c:	1ce6      	adds	r6, r4, #3
 802567e:	f026 0603 	bic.w	r6, r6, #3
 8025682:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8025684:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8025686:	3604      	adds	r6, #4
 8025688:	429e      	cmp	r6, r3
 802568a:	bf38      	it	cc
 802568c:	461e      	movcc	r6, r3
 802568e:	b162      	cbz	r2, 80256aa <GUI_ALLOC_GetFixedBlock+0x3e>
 8025690:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8025694:	429e      	cmp	r6, r3
 8025696:	4614      	mov	r4, r2
 8025698:	d104      	bne.n	80256a4 <GUI_ALLOC_GetFixedBlock+0x38>
 802569a:	e015      	b.n	80256c8 <GUI_ALLOC_GetFixedBlock+0x5c>
 802569c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80256a0:	429e      	cmp	r6, r3
 80256a2:	d011      	beq.n	80256c8 <GUI_ALLOC_GetFixedBlock+0x5c>
 80256a4:	6824      	ldr	r4, [r4, #0]
 80256a6:	2c00      	cmp	r4, #0
 80256a8:	d1f8      	bne.n	802569c <GUI_ALLOC_GetFixedBlock+0x30>
 80256aa:	68eb      	ldr	r3, [r5, #12]
 80256ac:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80256ae:	441c      	add	r4, r3
 80256b0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80256b4:	1a61      	subs	r1, r4, r1
 80256b6:	680b      	ldr	r3, [r1, #0]
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	d172      	bne.n	80257a2 <GUI_ALLOC_GetFixedBlock+0x136>
 80256bc:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80256c0:	4566      	cmp	r6, ip
 80256c2:	dd78      	ble.n	80257b6 <GUI_ALLOC_GetFixedBlock+0x14a>
 80256c4:	2400      	movs	r4, #0
 80256c6:	e008      	b.n	80256da <GUI_ALLOC_GetFixedBlock+0x6e>
 80256c8:	6823      	ldr	r3, [r4, #0]
 80256ca:	b10b      	cbz	r3, 80256d0 <GUI_ALLOC_GetFixedBlock+0x64>
 80256cc:	6861      	ldr	r1, [r4, #4]
 80256ce:	6059      	str	r1, [r3, #4]
 80256d0:	6861      	ldr	r1, [r4, #4]
 80256d2:	b101      	cbz	r1, 80256d6 <GUI_ALLOC_GetFixedBlock+0x6a>
 80256d4:	600b      	str	r3, [r1, #0]
 80256d6:	42a2      	cmp	r2, r4
 80256d8:	d05e      	beq.n	8025798 <GUI_ALLOC_GetFixedBlock+0x12c>
 80256da:	4620      	mov	r0, r4
 80256dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256e0:	4b75      	ldr	r3, [pc, #468]	; (80258b8 <GUI_ALLOC_GetFixedBlock+0x24c>)
 80256e2:	689a      	ldr	r2, [r3, #8]
 80256e4:	6858      	ldr	r0, [r3, #4]
 80256e6:	2101      	movs	r1, #1
 80256e8:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
 80256ec:	b90a      	cbnz	r2, 80256f2 <GUI_ALLOC_GetFixedBlock+0x86>
 80256ee:	0882      	lsrs	r2, r0, #2
 80256f0:	609a      	str	r2, [r3, #8]
 80256f2:	6819      	ldr	r1, [r3, #0]
 80256f4:	63a9      	str	r1, [r5, #56]	; 0x38
 80256f6:	f1a1 0314 	sub.w	r3, r1, #20
 80256fa:	265a      	movs	r6, #90	; 0x5a
 80256fc:	4403      	add	r3, r0
 80256fe:	622e      	str	r6, [r5, #32]
 8025700:	f04f 0b10 	mov.w	fp, #16
 8025704:	f04f 0a20 	mov.w	sl, #32
 8025708:	f04f 0940 	mov.w	r9, #64	; 0x40
 802570c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8025710:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8025714:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8025718:	f44f 6780 	mov.w	r7, #1024	; 0x400
 802571c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025720:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8025724:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
 8025728:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
 802572c:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
 8025730:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
 8025734:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
 8025738:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
 802573c:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8025740:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8025744:	672f      	str	r7, [r5, #112]	; 0x70
 8025746:	67aa      	str	r2, [r5, #120]	; 0x78
 8025748:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
 802574c:	2202      	movs	r2, #2
 802574e:	2601      	movs	r6, #1
 8025750:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8025754:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 8025758:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 802575c:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8025760:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8025764:	636b      	str	r3, [r5, #52]	; 0x34
 8025766:	f8c5 c0a8 	str.w	ip, [r5, #168]	; 0xa8
 802576a:	f8c5 e0b0 	str.w	lr, [r5, #176]	; 0xb0
 802576e:	612a      	str	r2, [r5, #16]
 8025770:	60e8      	str	r0, [r5, #12]
 8025772:	f8c5 b088 	str.w	fp, [r5, #136]	; 0x88
 8025776:	f8c5 a090 	str.w	sl, [r5, #144]	; 0x90
 802577a:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
 802577e:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
 8025782:	f8c5 70b8 	str.w	r7, [r5, #184]	; 0xb8
 8025786:	605e      	str	r6, [r3, #4]
 8025788:	626e      	str	r6, [r5, #36]	; 0x24
 802578a:	606e      	str	r6, [r5, #4]
 802578c:	f7ff fa86 	bl	8024c9c <_AddFreeMemory>
 8025790:	f7ff fef0 	bl	8025574 <_EnlargeBlocks>
 8025794:	632e      	str	r6, [r5, #48]	; 0x30
 8025796:	e771      	b.n	802567c <GUI_ALLOC_GetFixedBlock+0x10>
 8025798:	6823      	ldr	r3, [r4, #0]
 802579a:	63eb      	str	r3, [r5, #60]	; 0x3c
 802579c:	4620      	mov	r0, r4
 802579e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257a2:	2000      	movs	r0, #0
 80257a4:	f7ff fc28 	bl	8024ff8 <_RemoveHoles>
 80257a8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80257ac:	1a61      	subs	r1, r4, r1
 80257ae:	680b      	ldr	r3, [r1, #0]
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	d187      	bne.n	80256c4 <GUI_ALLOC_GetFixedBlock+0x58>
 80257b4:	e782      	b.n	80256bc <GUI_ALLOC_GetFixedBlock+0x50>
 80257b6:	f8d5 70b8 	ldr.w	r7, [r5, #184]	; 0xb8
 80257ba:	4a3e      	ldr	r2, [pc, #248]	; (80258b4 <GUI_ALLOC_GetFixedBlock+0x248>)
 80257bc:	ebc6 000c 	rsb	r0, r6, ip
 80257c0:	1d04      	adds	r4, r0, #4
 80257c2:	45bc      	cmp	ip, r7
 80257c4:	440c      	add	r4, r1
 80257c6:	d259      	bcs.n	802587c <GUI_ALLOC_GetFixedBlock+0x210>
 80257c8:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 80257cc:	45bc      	cmp	ip, r7
 80257ce:	d259      	bcs.n	8025884 <GUI_ALLOC_GetFixedBlock+0x218>
 80257d0:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 80257d4:	45bc      	cmp	ip, r7
 80257d6:	d253      	bcs.n	8025880 <GUI_ALLOC_GetFixedBlock+0x214>
 80257d8:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 80257dc:	45bc      	cmp	ip, r7
 80257de:	d259      	bcs.n	8025894 <GUI_ALLOC_GetFixedBlock+0x228>
 80257e0:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 80257e4:	45bc      	cmp	ip, r7
 80257e6:	d253      	bcs.n	8025890 <GUI_ALLOC_GetFixedBlock+0x224>
 80257e8:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 80257ec:	45bc      	cmp	ip, r7
 80257ee:	d24d      	bcs.n	802588c <GUI_ALLOC_GetFixedBlock+0x220>
 80257f0:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 80257f4:	45bc      	cmp	ip, r7
 80257f6:	d247      	bcs.n	8025888 <GUI_ALLOC_GetFixedBlock+0x21c>
 80257f8:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 80257fc:	45bc      	cmp	ip, r7
 80257fe:	d257      	bcs.n	80258b0 <GUI_ALLOC_GetFixedBlock+0x244>
 8025800:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8025802:	4594      	cmp	ip, r2
 8025804:	d252      	bcs.n	80258ac <GUI_ALLOC_GetFixedBlock+0x240>
 8025806:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 8025808:	4a2a      	ldr	r2, [pc, #168]	; (80258b4 <GUI_ALLOC_GetFixedBlock+0x248>)
 802580a:	45bc      	cmp	ip, r7
 802580c:	d24c      	bcs.n	80258a8 <GUI_ALLOC_GetFixedBlock+0x23c>
 802580e:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8025810:	45bc      	cmp	ip, r7
 8025812:	d247      	bcs.n	80258a4 <GUI_ALLOC_GetFixedBlock+0x238>
 8025814:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8025816:	45bc      	cmp	ip, r7
 8025818:	d242      	bcs.n	80258a0 <GUI_ALLOC_GetFixedBlock+0x234>
 802581a:	6d97      	ldr	r7, [r2, #88]	; 0x58
 802581c:	45bc      	cmp	ip, r7
 802581e:	d23d      	bcs.n	802589c <GUI_ALLOC_GetFixedBlock+0x230>
 8025820:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8025822:	45bc      	cmp	ip, r7
 8025824:	d238      	bcs.n	8025898 <GUI_ALLOC_GetFixedBlock+0x22c>
 8025826:	6c97      	ldr	r7, [r2, #72]	; 0x48
 8025828:	45bc      	cmp	ip, r7
 802582a:	d20e      	bcs.n	802584a <GUI_ALLOC_GetFixedBlock+0x1de>
 802582c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 802582e:	4594      	cmp	ip, r2
 8025830:	bf28      	it	cs
 8025832:	2200      	movcs	r2, #0
 8025834:	d20a      	bcs.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025836:	68ea      	ldr	r2, [r5, #12]
 8025838:	696b      	ldr	r3, [r5, #20]
 802583a:	1b92      	subs	r2, r2, r6
 802583c:	4433      	add	r3, r6
 802583e:	60ea      	str	r2, [r5, #12]
 8025840:	616b      	str	r3, [r5, #20]
 8025842:	b9a0      	cbnz	r0, 802586e <GUI_ALLOC_GetFixedBlock+0x202>
 8025844:	f844 6c04 	str.w	r6, [r4, #-4]
 8025848:	e747      	b.n	80256da <GUI_ALLOC_GetFixedBlock+0x6e>
 802584a:	2201      	movs	r2, #1
 802584c:	682b      	ldr	r3, [r5, #0]
 802584e:	688f      	ldr	r7, [r1, #8]
 8025850:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8025854:	ebcc 0c03 	rsb	ip, ip, r3
 8025858:	f8c5 c000 	str.w	ip, [r5]
 802585c:	b10f      	cbz	r7, 8025862 <GUI_ALLOC_GetFixedBlock+0x1f6>
 802585e:	f8c7 8004 	str.w	r8, [r7, #4]
 8025862:	f1b8 0f00 	cmp.w	r8, #0
 8025866:	d005      	beq.n	8025874 <GUI_ALLOC_GetFixedBlock+0x208>
 8025868:	f8c8 7000 	str.w	r7, [r8]
 802586c:	e7e3      	b.n	8025836 <GUI_ALLOC_GetFixedBlock+0x1ca>
 802586e:	f7ff fa15 	bl	8024c9c <_AddFreeMemory>
 8025872:	e7e7      	b.n	8025844 <GUI_ALLOC_GetFixedBlock+0x1d8>
 8025874:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8025878:	6457      	str	r7, [r2, #68]	; 0x44
 802587a:	e7dc      	b.n	8025836 <GUI_ALLOC_GetFixedBlock+0x1ca>
 802587c:	220f      	movs	r2, #15
 802587e:	e7e5      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025880:	220d      	movs	r2, #13
 8025882:	e7e3      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025884:	220e      	movs	r2, #14
 8025886:	e7e1      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025888:	2209      	movs	r2, #9
 802588a:	e7df      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 802588c:	220a      	movs	r2, #10
 802588e:	e7dd      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025890:	220b      	movs	r2, #11
 8025892:	e7db      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025894:	220c      	movs	r2, #12
 8025896:	e7d9      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8025898:	2202      	movs	r2, #2
 802589a:	e7d7      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 802589c:	2203      	movs	r2, #3
 802589e:	e7d5      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258a0:	2204      	movs	r2, #4
 80258a2:	e7d3      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258a4:	2205      	movs	r2, #5
 80258a6:	e7d1      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258a8:	2206      	movs	r2, #6
 80258aa:	e7cf      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258ac:	2207      	movs	r2, #7
 80258ae:	e7cd      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258b0:	2208      	movs	r2, #8
 80258b2:	e7cb      	b.n	802584c <GUI_ALLOC_GetFixedBlock+0x1e0>
 80258b4:	2002cc34 	.word	0x2002cc34
 80258b8:	2002b2c8 	.word	0x2002b2c8

080258bc <GUI_ALLOC_AllocNoInit>:
 80258bc:	b510      	push	{r4, lr}
 80258be:	4604      	mov	r4, r0
 80258c0:	b900      	cbnz	r0, 80258c4 <GUI_ALLOC_AllocNoInit+0x8>
 80258c2:	bd10      	pop	{r4, pc}
 80258c4:	f7fd fc92 	bl	80231ec <GUI_Lock>
 80258c8:	4620      	mov	r0, r4
 80258ca:	f7ff fc83 	bl	80251d4 <_Alloc>
 80258ce:	4604      	mov	r4, r0
 80258d0:	f7fd fc82 	bl	80231d8 <GUI_Unlock>
 80258d4:	4620      	mov	r0, r4
 80258d6:	bd10      	pop	{r4, pc}

080258d8 <GUI_ALLOC_h2p>:
 80258d8:	4b03      	ldr	r3, [pc, #12]	; (80258e8 <GUI_ALLOC_h2p+0x10>)
 80258da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80258dc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80258e0:	6840      	ldr	r0, [r0, #4]
 80258e2:	3008      	adds	r0, #8
 80258e4:	4770      	bx	lr
 80258e6:	bf00      	nop
 80258e8:	2002cc34 	.word	0x2002cc34

080258ec <GUI_ALLOC_LockH>:
 80258ec:	4a07      	ldr	r2, [pc, #28]	; (802590c <GUI_ALLOC_LockH+0x20>)
 80258ee:	69d1      	ldr	r1, [r2, #28]
 80258f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80258f2:	3101      	adds	r1, #1
 80258f4:	61d1      	str	r1, [r2, #28]
 80258f6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80258fa:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 80258fe:	6852      	ldr	r2, [r2, #4]
 8025900:	3101      	adds	r1, #1
 8025902:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8025906:	f102 0008 	add.w	r0, r2, #8
 802590a:	4770      	bx	lr
 802590c:	2002cc34 	.word	0x2002cc34

08025910 <GUI_ALLOC_UnlockH>:
 8025910:	b430      	push	{r4, r5}
 8025912:	4602      	mov	r2, r0
 8025914:	4b0a      	ldr	r3, [pc, #40]	; (8025940 <GUI_ALLOC_UnlockH+0x30>)
 8025916:	6800      	ldr	r0, [r0, #0]
 8025918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802591a:	f850 0c08 	ldr.w	r0, [r0, #-8]
 802591e:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
 8025922:	2c01      	cmp	r4, #1
 8025924:	d903      	bls.n	802592e <GUI_ALLOC_UnlockH+0x1e>
 8025926:	69dd      	ldr	r5, [r3, #28]
 8025928:	b10d      	cbz	r5, 802592e <GUI_ALLOC_UnlockH+0x1e>
 802592a:	3d01      	subs	r5, #1
 802592c:	61dd      	str	r5, [r3, #28]
 802592e:	3c01      	subs	r4, #1
 8025930:	f801 4030 	strb.w	r4, [r1, r0, lsl #3]
 8025934:	2300      	movs	r3, #0
 8025936:	4618      	mov	r0, r3
 8025938:	6013      	str	r3, [r2, #0]
 802593a:	bc30      	pop	{r4, r5}
 802593c:	4770      	bx	lr
 802593e:	bf00      	nop
 8025940:	2002cc34 	.word	0x2002cc34

08025944 <GUI_ALLOC_RequestSize>:
 8025944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025948:	4c5c      	ldr	r4, [pc, #368]	; (8025abc <GUI_ALLOC_RequestSize+0x178>)
 802594a:	f7fd fc4f 	bl	80231ec <GUI_Lock>
 802594e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8025952:	2b00      	cmp	r3, #0
 8025954:	d04f      	beq.n	80259f6 <GUI_ALLOC_RequestSize+0xb2>
 8025956:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 802595a:	4a58      	ldr	r2, [pc, #352]	; (8025abc <GUI_ALLOC_RequestSize+0x178>)
 802595c:	bb63      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 802595e:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8025962:	bb4b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025964:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8025968:	bb33      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 802596a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 802596e:	bb1b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025970:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8025974:	bb03      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025976:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 802597a:	b9eb      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 802597c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8025980:	b9d3      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025982:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8025986:	b9bb      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025988:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 802598a:	b9ab      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 802598c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 802598e:	b99b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025990:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8025992:	b98b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025994:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8025996:	b97b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 8025998:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 802599a:	b96b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 802599c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 802599e:	b95b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 80259a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80259a2:	b94b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 80259a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80259a6:	b93b      	cbnz	r3, 80259b8 <GUI_ALLOC_RequestSize+0x74>
 80259a8:	6a24      	ldr	r4, [r4, #32]
 80259aa:	fb04 f403 	mul.w	r4, r4, r3
 80259ae:	f7fd fc13 	bl	80231d8 <GUI_Unlock>
 80259b2:	4620      	mov	r0, r4
 80259b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259b8:	689b      	ldr	r3, [r3, #8]
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d0f4      	beq.n	80259a8 <GUI_ALLOC_RequestSize+0x64>
 80259be:	2100      	movs	r1, #0
 80259c0:	e001      	b.n	80259c6 <GUI_ALLOC_RequestSize+0x82>
 80259c2:	689b      	ldr	r3, [r3, #8]
 80259c4:	b13b      	cbz	r3, 80259d6 <GUI_ALLOC_RequestSize+0x92>
 80259c6:	685a      	ldr	r2, [r3, #4]
 80259c8:	689b      	ldr	r3, [r3, #8]
 80259ca:	4291      	cmp	r1, r2
 80259cc:	bf34      	ite	cc
 80259ce:	4611      	movcc	r1, r2
 80259d0:	460a      	movcs	r2, r1
 80259d2:	2b00      	cmp	r3, #0
 80259d4:	d1f5      	bne.n	80259c2 <GUI_ALLOC_RequestSize+0x7e>
 80259d6:	3a0c      	subs	r2, #12
 80259d8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80259dc:	d867      	bhi.n	8025aae <GUI_ALLOC_RequestSize+0x16a>
 80259de:	6a24      	ldr	r4, [r4, #32]
 80259e0:	4b37      	ldr	r3, [pc, #220]	; (8025ac0 <GUI_ALLOC_RequestSize+0x17c>)
 80259e2:	fb04 f202 	mul.w	r2, r4, r2
 80259e6:	fba3 1402 	umull	r1, r4, r3, r2
 80259ea:	0964      	lsrs	r4, r4, #5
 80259ec:	f7fd fbf4 	bl	80231d8 <GUI_Unlock>
 80259f0:	4620      	mov	r0, r4
 80259f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259f6:	4b33      	ldr	r3, [pc, #204]	; (8025ac4 <GUI_ALLOC_RequestSize+0x180>)
 80259f8:	689a      	ldr	r2, [r3, #8]
 80259fa:	6858      	ldr	r0, [r3, #4]
 80259fc:	2101      	movs	r1, #1
 80259fe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8025a02:	b90a      	cbnz	r2, 8025a08 <GUI_ALLOC_RequestSize+0xc4>
 8025a04:	0882      	lsrs	r2, r0, #2
 8025a06:	609a      	str	r2, [r3, #8]
 8025a08:	6819      	ldr	r1, [r3, #0]
 8025a0a:	63a1      	str	r1, [r4, #56]	; 0x38
 8025a0c:	f1a1 0314 	sub.w	r3, r1, #20
 8025a10:	4403      	add	r3, r0
 8025a12:	f04f 0a5a 	mov.w	sl, #90	; 0x5a
 8025a16:	f04f 0910 	mov.w	r9, #16
 8025a1a:	f04f 0820 	mov.w	r8, #32
 8025a1e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8025a22:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8025a26:	f44f 7780 	mov.w	r7, #256	; 0x100
 8025a2a:	f44f 7600 	mov.w	r6, #512	; 0x200
 8025a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025a32:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8025a36:	f8c4 a020 	str.w	sl, [r4, #32]
 8025a3a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
 8025a3e:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 8025a42:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
 8025a46:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 8025a4a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8025a4e:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
 8025a52:	6627      	str	r7, [r4, #96]	; 0x60
 8025a54:	66a6      	str	r6, [r4, #104]	; 0x68
 8025a56:	6722      	str	r2, [r4, #112]	; 0x70
 8025a58:	67a5      	str	r5, [r4, #120]	; 0x78
 8025a5a:	2202      	movs	r2, #2
 8025a5c:	2501      	movs	r5, #1
 8025a5e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8025a62:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8025a66:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8025a6a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8025a6e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8025a72:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8025a76:	6363      	str	r3, [r4, #52]	; 0x34
 8025a78:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
 8025a7c:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
 8025a80:	6122      	str	r2, [r4, #16]
 8025a82:	60e0      	str	r0, [r4, #12]
 8025a84:	f8c4 b080 	str.w	fp, [r4, #128]	; 0x80
 8025a88:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
 8025a8c:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
 8025a90:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
 8025a94:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8025a98:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8025a9c:	605d      	str	r5, [r3, #4]
 8025a9e:	6265      	str	r5, [r4, #36]	; 0x24
 8025aa0:	6065      	str	r5, [r4, #4]
 8025aa2:	f7ff f8fb 	bl	8024c9c <_AddFreeMemory>
 8025aa6:	f7ff fd65 	bl	8025574 <_EnlargeBlocks>
 8025aaa:	6325      	str	r5, [r4, #48]	; 0x30
 8025aac:	e753      	b.n	8025956 <GUI_ALLOC_RequestSize+0x12>
 8025aae:	4904      	ldr	r1, [pc, #16]	; (8025ac0 <GUI_ALLOC_RequestSize+0x17c>)
 8025ab0:	17d3      	asrs	r3, r2, #31
 8025ab2:	fb81 0202 	smull	r0, r2, r1, r2
 8025ab6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8025aba:	e775      	b.n	80259a8 <GUI_ALLOC_RequestSize+0x64>
 8025abc:	2002cc34 	.word	0x2002cc34
 8025ac0:	51eb851f 	.word	0x51eb851f
 8025ac4:	2002b2c8 	.word	0x2002b2c8

08025ac8 <GUI_ALLOC_Lock>:
 8025ac8:	4b02      	ldr	r3, [pc, #8]	; (8025ad4 <GUI_ALLOC_Lock+0xc>)
 8025aca:	699a      	ldr	r2, [r3, #24]
 8025acc:	3201      	adds	r2, #1
 8025ace:	619a      	str	r2, [r3, #24]
 8025ad0:	4770      	bx	lr
 8025ad2:	bf00      	nop
 8025ad4:	2002cc34 	.word	0x2002cc34

08025ad8 <GUI_ALLOC_Unlock>:
 8025ad8:	4b02      	ldr	r3, [pc, #8]	; (8025ae4 <GUI_ALLOC_Unlock+0xc>)
 8025ada:	699a      	ldr	r2, [r3, #24]
 8025adc:	3a01      	subs	r2, #1
 8025ade:	619a      	str	r2, [r3, #24]
 8025ae0:	4770      	bx	lr
 8025ae2:	bf00      	nop
 8025ae4:	2002cc34 	.word	0x2002cc34

08025ae8 <GUI_ALLOC_AssignMemory>:
 8025ae8:	4b02      	ldr	r3, [pc, #8]	; (8025af4 <GUI_ALLOC_AssignMemory+0xc>)
 8025aea:	f021 0103 	bic.w	r1, r1, #3
 8025aee:	e883 0003 	stmia.w	r3, {r0, r1}
 8025af2:	4770      	bx	lr
 8025af4:	2002b2c8 	.word	0x2002b2c8

08025af8 <GUI_ALLOC_GetSize>:
 8025af8:	b130      	cbz	r0, 8025b08 <GUI_ALLOC_GetSize+0x10>
 8025afa:	4b04      	ldr	r3, [pc, #16]	; (8025b0c <GUI_ALLOC_GetSize+0x14>)
 8025afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025afe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8025b02:	6843      	ldr	r3, [r0, #4]
 8025b04:	6858      	ldr	r0, [r3, #4]
 8025b06:	380c      	subs	r0, #12
 8025b08:	4770      	bx	lr
 8025b0a:	bf00      	nop
 8025b0c:	2002cc34 	.word	0x2002cc34

08025b10 <GUI_ALLOC_Free>:
 8025b10:	b570      	push	{r4, r5, r6, lr}
 8025b12:	4604      	mov	r4, r0
 8025b14:	b900      	cbnz	r0, 8025b18 <GUI_ALLOC_Free+0x8>
 8025b16:	bd70      	pop	{r4, r5, r6, pc}
 8025b18:	4d0c      	ldr	r5, [pc, #48]	; (8025b4c <GUI_ALLOC_Free+0x3c>)
 8025b1a:	f7fd fb67 	bl	80231ec <GUI_Lock>
 8025b1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8025b20:	00e6      	lsls	r6, r4, #3
 8025b22:	4433      	add	r3, r6
 8025b24:	6859      	ldr	r1, [r3, #4]
 8025b26:	6848      	ldr	r0, [r1, #4]
 8025b28:	f7ff f8b8 	bl	8024c9c <_AddFreeMemory>
 8025b2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8025b2e:	6869      	ldr	r1, [r5, #4]
 8025b30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8025b32:	441e      	add	r6, r3
 8025b34:	3101      	adds	r1, #1
 8025b36:	2000      	movs	r0, #0
 8025b38:	6069      	str	r1, [r5, #4]
 8025b3a:	6072      	str	r2, [r6, #4]
 8025b3c:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 8025b40:	626c      	str	r4, [r5, #36]	; 0x24
 8025b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025b46:	f7fd bb47 	b.w	80231d8 <GUI_Unlock>
 8025b4a:	bf00      	nop
 8025b4c:	2002cc34 	.word	0x2002cc34

08025b50 <GUI_ALLOC_FreePtr>:
 8025b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b52:	4605      	mov	r5, r0
 8025b54:	f7fd fb4a 	bl	80231ec <GUI_Lock>
 8025b58:	682c      	ldr	r4, [r5, #0]
 8025b5a:	b1b4      	cbz	r4, 8025b8a <GUI_ALLOC_FreePtr+0x3a>
 8025b5c:	4e0e      	ldr	r6, [pc, #56]	; (8025b98 <GUI_ALLOC_FreePtr+0x48>)
 8025b5e:	f7fd fb45 	bl	80231ec <GUI_Lock>
 8025b62:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8025b64:	00e7      	lsls	r7, r4, #3
 8025b66:	443b      	add	r3, r7
 8025b68:	6859      	ldr	r1, [r3, #4]
 8025b6a:	6848      	ldr	r0, [r1, #4]
 8025b6c:	f7ff f896 	bl	8024c9c <_AddFreeMemory>
 8025b70:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8025b72:	6871      	ldr	r1, [r6, #4]
 8025b74:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8025b76:	441f      	add	r7, r3
 8025b78:	3101      	adds	r1, #1
 8025b7a:	2000      	movs	r0, #0
 8025b7c:	6071      	str	r1, [r6, #4]
 8025b7e:	607a      	str	r2, [r7, #4]
 8025b80:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 8025b84:	6274      	str	r4, [r6, #36]	; 0x24
 8025b86:	f7fd fb27 	bl	80231d8 <GUI_Unlock>
 8025b8a:	2300      	movs	r3, #0
 8025b8c:	602b      	str	r3, [r5, #0]
 8025b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8025b92:	f7fd bb21 	b.w	80231d8 <GUI_Unlock>
 8025b96:	bf00      	nop
 8025b98:	2002cc34 	.word	0x2002cc34

08025b9c <GUI_ALLOC_FreePtrArray>:
 8025b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025ba0:	f1b1 0a00 	subs.w	sl, r1, #0
 8025ba4:	dd26      	ble.n	8025bf4 <GUI_ALLOC_FreePtrArray+0x58>
 8025ba6:	2400      	movs	r4, #0
 8025ba8:	4f13      	ldr	r7, [pc, #76]	; (8025bf8 <GUI_ALLOC_FreePtrArray+0x5c>)
 8025baa:	4606      	mov	r6, r0
 8025bac:	46a0      	mov	r8, r4
 8025bae:	f7fd fb1d 	bl	80231ec <GUI_Lock>
 8025bb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8025bb6:	3401      	adds	r4, #1
 8025bb8:	b1b5      	cbz	r5, 8025be8 <GUI_ALLOC_FreePtrArray+0x4c>
 8025bba:	f7fd fb17 	bl	80231ec <GUI_Lock>
 8025bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025bc0:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8025bc4:	444b      	add	r3, r9
 8025bc6:	6859      	ldr	r1, [r3, #4]
 8025bc8:	6848      	ldr	r0, [r1, #4]
 8025bca:	f7ff f867 	bl	8024c9c <_AddFreeMemory>
 8025bce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025bd0:	687a      	ldr	r2, [r7, #4]
 8025bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bd4:	4489      	add	r9, r1
 8025bd6:	3201      	adds	r2, #1
 8025bd8:	607a      	str	r2, [r7, #4]
 8025bda:	f8c9 3004 	str.w	r3, [r9, #4]
 8025bde:	f801 8035 	strb.w	r8, [r1, r5, lsl #3]
 8025be2:	627d      	str	r5, [r7, #36]	; 0x24
 8025be4:	f7fd faf8 	bl	80231d8 <GUI_Unlock>
 8025be8:	f846 8c04 	str.w	r8, [r6, #-4]
 8025bec:	f7fd faf4 	bl	80231d8 <GUI_Unlock>
 8025bf0:	4554      	cmp	r4, sl
 8025bf2:	d1dc      	bne.n	8025bae <GUI_ALLOC_FreePtrArray+0x12>
 8025bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025bf8:	2002cc34 	.word	0x2002cc34

08025bfc <GUI_ALLOC_AllocZero>:
 8025bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bfe:	4604      	mov	r4, r0
 8025c00:	f7fd faf4 	bl	80231ec <GUI_Lock>
 8025c04:	b91c      	cbnz	r4, 8025c0e <GUI_ALLOC_AllocZero+0x12>
 8025c06:	f7fd fae7 	bl	80231d8 <GUI_Unlock>
 8025c0a:	4620      	mov	r0, r4
 8025c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c0e:	f7fd faed 	bl	80231ec <GUI_Lock>
 8025c12:	4620      	mov	r0, r4
 8025c14:	f7ff fade 	bl	80251d4 <_Alloc>
 8025c18:	4606      	mov	r6, r0
 8025c1a:	f7fd fadd 	bl	80231d8 <GUI_Unlock>
 8025c1e:	b32e      	cbz	r6, 8025c6c <GUI_ALLOC_AllocZero+0x70>
 8025c20:	4d13      	ldr	r5, [pc, #76]	; (8025c70 <GUI_ALLOC_AllocZero+0x74>)
 8025c22:	4914      	ldr	r1, [pc, #80]	; (8025c74 <GUI_ALLOC_AllocZero+0x78>)
 8025c24:	69ea      	ldr	r2, [r5, #28]
 8025c26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8025c28:	3201      	adds	r2, #1
 8025c2a:	61ea      	str	r2, [r5, #28]
 8025c2c:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 8025c30:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
 8025c34:	3001      	adds	r0, #1
 8025c36:	6857      	ldr	r7, [r2, #4]
 8025c38:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 8025c3c:	4622      	mov	r2, r4
 8025c3e:	680b      	ldr	r3, [r1, #0]
 8025c40:	f107 0008 	add.w	r0, r7, #8
 8025c44:	2100      	movs	r1, #0
 8025c46:	4798      	blx	r3
 8025c48:	683a      	ldr	r2, [r7, #0]
 8025c4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8025c4c:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 8025c50:	2901      	cmp	r1, #1
 8025c52:	d903      	bls.n	8025c5c <GUI_ALLOC_AllocZero+0x60>
 8025c54:	69e8      	ldr	r0, [r5, #28]
 8025c56:	b108      	cbz	r0, 8025c5c <GUI_ALLOC_AllocZero+0x60>
 8025c58:	3801      	subs	r0, #1
 8025c5a:	61e8      	str	r0, [r5, #28]
 8025c5c:	3901      	subs	r1, #1
 8025c5e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 8025c62:	4634      	mov	r4, r6
 8025c64:	f7fd fab8 	bl	80231d8 <GUI_Unlock>
 8025c68:	4620      	mov	r0, r4
 8025c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c6c:	4634      	mov	r4, r6
 8025c6e:	e7ca      	b.n	8025c06 <GUI_ALLOC_AllocZero+0xa>
 8025c70:	2002cc34 	.word	0x2002cc34
 8025c74:	20000254 	.word	0x20000254

08025c78 <GUI_ALLOC_Realloc>:
 8025c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c7c:	460d      	mov	r5, r1
 8025c7e:	4606      	mov	r6, r0
 8025c80:	b911      	cbnz	r1, 8025c88 <GUI_ALLOC_Realloc+0x10>
 8025c82:	4608      	mov	r0, r1
 8025c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c88:	f7fd fab0 	bl	80231ec <GUI_Lock>
 8025c8c:	4628      	mov	r0, r5
 8025c8e:	f7ff faa1 	bl	80251d4 <_Alloc>
 8025c92:	4607      	mov	r7, r0
 8025c94:	f7fd faa0 	bl	80231d8 <GUI_Unlock>
 8025c98:	2f00      	cmp	r7, #0
 8025c9a:	d062      	beq.n	8025d62 <GUI_ALLOC_Realloc+0xea>
 8025c9c:	2e00      	cmp	r6, #0
 8025c9e:	d060      	beq.n	8025d62 <GUI_ALLOC_Realloc+0xea>
 8025ca0:	4c31      	ldr	r4, [pc, #196]	; (8025d68 <GUI_ALLOC_Realloc+0xf0>)
 8025ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025ca4:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8025ca8:	4443      	add	r3, r8
 8025caa:	685b      	ldr	r3, [r3, #4]
 8025cac:	685b      	ldr	r3, [r3, #4]
 8025cae:	f1a3 0a0c 	sub.w	sl, r3, #12
 8025cb2:	f7fd fa9b 	bl	80231ec <GUI_Lock>
 8025cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025cb8:	69e1      	ldr	r1, [r4, #28]
 8025cba:	4a2c      	ldr	r2, [pc, #176]	; (8025d6c <GUI_ALLOC_Realloc+0xf4>)
 8025cbc:	4555      	cmp	r5, sl
 8025cbe:	bfb8      	it	lt
 8025cc0:	46aa      	movlt	sl, r5
 8025cc2:	f813 5037 	ldrb.w	r5, [r3, r7, lsl #3]
 8025cc6:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8025cca:	3501      	adds	r5, #1
 8025ccc:	f803 5037 	strb.w	r5, [r3, r7, lsl #3]
 8025cd0:	3102      	adds	r1, #2
 8025cd2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025cd6:	61e1      	str	r1, [r4, #28]
 8025cd8:	f813 0036 	ldrb.w	r0, [r3, r6, lsl #3]
 8025cdc:	eb03 0108 	add.w	r1, r3, r8
 8025ce0:	3001      	adds	r0, #1
 8025ce2:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 8025ce6:	684d      	ldr	r5, [r1, #4]
 8025ce8:	6813      	ldr	r3, [r2, #0]
 8025cea:	f105 0108 	add.w	r1, r5, #8
 8025cee:	4652      	mov	r2, sl
 8025cf0:	f109 0008 	add.w	r0, r9, #8
 8025cf4:	4798      	blx	r3
 8025cf6:	f8d9 1000 	ldr.w	r1, [r9]
 8025cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025cfc:	f813 0031 	ldrb.w	r0, [r3, r1, lsl #3]
 8025d00:	2801      	cmp	r0, #1
 8025d02:	d903      	bls.n	8025d0c <GUI_ALLOC_Realloc+0x94>
 8025d04:	69e2      	ldr	r2, [r4, #28]
 8025d06:	b10a      	cbz	r2, 8025d0c <GUI_ALLOC_Realloc+0x94>
 8025d08:	3a01      	subs	r2, #1
 8025d0a:	61e2      	str	r2, [r4, #28]
 8025d0c:	1e42      	subs	r2, r0, #1
 8025d0e:	f803 2031 	strb.w	r2, [r3, r1, lsl #3]
 8025d12:	682a      	ldr	r2, [r5, #0]
 8025d14:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 8025d18:	2901      	cmp	r1, #1
 8025d1a:	d904      	bls.n	8025d26 <GUI_ALLOC_Realloc+0xae>
 8025d1c:	69e0      	ldr	r0, [r4, #28]
 8025d1e:	4d12      	ldr	r5, [pc, #72]	; (8025d68 <GUI_ALLOC_Realloc+0xf0>)
 8025d20:	b108      	cbz	r0, 8025d26 <GUI_ALLOC_Realloc+0xae>
 8025d22:	3801      	subs	r0, #1
 8025d24:	61e8      	str	r0, [r5, #28]
 8025d26:	3901      	subs	r1, #1
 8025d28:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
 8025d2c:	f7fd fa5e 	bl	80231ec <GUI_Lock>
 8025d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025d32:	4443      	add	r3, r8
 8025d34:	6859      	ldr	r1, [r3, #4]
 8025d36:	6848      	ldr	r0, [r1, #4]
 8025d38:	f7fe ffb0 	bl	8024c9c <_AddFreeMemory>
 8025d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025d3e:	6861      	ldr	r1, [r4, #4]
 8025d40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8025d42:	4498      	add	r8, r3
 8025d44:	3101      	adds	r1, #1
 8025d46:	2000      	movs	r0, #0
 8025d48:	6061      	str	r1, [r4, #4]
 8025d4a:	f8c8 2004 	str.w	r2, [r8, #4]
 8025d4e:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
 8025d52:	6266      	str	r6, [r4, #36]	; 0x24
 8025d54:	f7fd fa40 	bl	80231d8 <GUI_Unlock>
 8025d58:	f7fd fa3e 	bl	80231d8 <GUI_Unlock>
 8025d5c:	4638      	mov	r0, r7
 8025d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d62:	4638      	mov	r0, r7
 8025d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d68:	2002cc34 	.word	0x2002cc34
 8025d6c:	20000258 	.word	0x20000258

08025d70 <GUI_DrawRect>:
 8025d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d74:	b082      	sub	sp, #8
 8025d76:	4604      	mov	r4, r0
 8025d78:	4689      	mov	r9, r1
 8025d7a:	4692      	mov	sl, r2
 8025d7c:	4698      	mov	r8, r3
 8025d7e:	f7fd fa35 	bl	80231ec <GUI_Lock>
 8025d82:	4b1e      	ldr	r3, [pc, #120]	; (8025dfc <GUI_DrawRect+0x8c>)
 8025d84:	681f      	ldr	r7, [r3, #0]
 8025d86:	7e3e      	ldrb	r6, [r7, #24]
 8025d88:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8025d8a:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 8025d8c:	3e01      	subs	r6, #1
 8025d8e:	b2b6      	uxth	r6, r6
 8025d90:	442c      	add	r4, r5
 8025d92:	44b9      	add	r9, r7
 8025d94:	4455      	add	r5, sl
 8025d96:	44b8      	add	r8, r7
 8025d98:	1ba1      	subs	r1, r4, r6
 8025d9a:	1972      	adds	r2, r6, r5
 8025d9c:	ebc6 0309 	rsb	r3, r6, r9
 8025da0:	4668      	mov	r0, sp
 8025da2:	4446      	add	r6, r8
 8025da4:	f8ad 1000 	strh.w	r1, [sp]
 8025da8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8025dac:	f8ad 3002 	strh.w	r3, [sp, #2]
 8025db0:	f8ad 6006 	strh.w	r6, [sp, #6]
 8025db4:	f7f8 fcfa 	bl	801e7ac <WM__InitIVRSearch>
 8025db8:	b1d8      	cbz	r0, 8025df2 <GUI_DrawRect+0x82>
 8025dba:	f109 0701 	add.w	r7, r9, #1
 8025dbe:	f108 36ff 	add.w	r6, r8, #4294967295
 8025dc2:	4620      	mov	r0, r4
 8025dc4:	4649      	mov	r1, r9
 8025dc6:	462a      	mov	r2, r5
 8025dc8:	f7fb fd8a 	bl	80218e0 <LCD_DrawHLine>
 8025dcc:	4620      	mov	r0, r4
 8025dce:	4641      	mov	r1, r8
 8025dd0:	462a      	mov	r2, r5
 8025dd2:	f7fb fd85 	bl	80218e0 <LCD_DrawHLine>
 8025dd6:	4620      	mov	r0, r4
 8025dd8:	4639      	mov	r1, r7
 8025dda:	4632      	mov	r2, r6
 8025ddc:	f7fb fda6 	bl	802192c <LCD_DrawVLine>
 8025de0:	4628      	mov	r0, r5
 8025de2:	4639      	mov	r1, r7
 8025de4:	4632      	mov	r2, r6
 8025de6:	f7fb fda1 	bl	802192c <LCD_DrawVLine>
 8025dea:	f7f8 fbb9 	bl	801e560 <WM__GetNextIVR>
 8025dee:	2800      	cmp	r0, #0
 8025df0:	d1e7      	bne.n	8025dc2 <GUI_DrawRect+0x52>
 8025df2:	f7fd f9f1 	bl	80231d8 <GUI_Unlock>
 8025df6:	b002      	add	sp, #8
 8025df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025dfc:	20000280 	.word	0x20000280

08025e00 <LCD_Index2Color_M888>:
 8025e00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025e04:	4770      	bx	lr
 8025e06:	bf00      	nop

08025e08 <LCD_Index2Color_M8888I>:
 8025e08:	4770      	bx	lr
 8025e0a:	bf00      	nop

08025e0c <_Index2Color_M8888>:
 8025e0c:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8025e10:	4770      	bx	lr
 8025e12:	bf00      	nop

08025e14 <_Color2Index_M8888>:
 8025e14:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8025e18:	4770      	bx	lr
 8025e1a:	bf00      	nop

08025e1c <_GetIndexMask_M8888>:
 8025e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8025e20:	4770      	bx	lr
 8025e22:	bf00      	nop

08025e24 <_Color2IndexBulk>:
 8025e24:	b410      	push	{r4}
 8025e26:	f850 4b04 	ldr.w	r4, [r0], #4
 8025e2a:	3a01      	subs	r2, #1
 8025e2c:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8025e30:	600c      	str	r4, [r1, #0]
 8025e32:	4419      	add	r1, r3
 8025e34:	d1f7      	bne.n	8025e26 <_Color2IndexBulk+0x2>
 8025e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e3a:	4770      	bx	lr

08025e3c <_Index2ColorBulk>:
 8025e3c:	b410      	push	{r4}
 8025e3e:	6804      	ldr	r4, [r0, #0]
 8025e40:	3a01      	subs	r2, #1
 8025e42:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8025e46:	f841 4b04 	str.w	r4, [r1], #4
 8025e4a:	4418      	add	r0, r3
 8025e4c:	d1f7      	bne.n	8025e3e <_Index2ColorBulk+0x2>
 8025e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e52:	4770      	bx	lr

08025e54 <_Color2Index_M888>:
 8025e54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8025e58:	4770      	bx	lr
 8025e5a:	bf00      	nop

08025e5c <_GetIndexMask_M888>:
 8025e5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8025e60:	4770      	bx	lr
 8025e62:	bf00      	nop

08025e64 <_Color2IndexBulk>:
 8025e64:	b410      	push	{r4}
 8025e66:	f850 4b04 	ldr.w	r4, [r0], #4
 8025e6a:	3a01      	subs	r2, #1
 8025e6c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8025e70:	600c      	str	r4, [r1, #0]
 8025e72:	4419      	add	r1, r3
 8025e74:	d1f7      	bne.n	8025e66 <_Color2IndexBulk+0x2>
 8025e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e7a:	4770      	bx	lr

08025e7c <_Index2ColorBulk>:
 8025e7c:	b410      	push	{r4}
 8025e7e:	6804      	ldr	r4, [r0, #0]
 8025e80:	3a01      	subs	r2, #1
 8025e82:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8025e86:	f841 4b04 	str.w	r4, [r1], #4
 8025e8a:	4418      	add	r0, r3
 8025e8c:	d1f7      	bne.n	8025e7e <_Index2ColorBulk+0x2>
 8025e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e92:	4770      	bx	lr

08025e94 <GUICC_M888_SetCustColorConv>:
 8025e94:	4770      	bx	lr
 8025e96:	bf00      	nop

08025e98 <LCD_Index2Color_M565>:
 8025e98:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8025e9c:	4b09      	ldr	r3, [pc, #36]	; (8025ec4 <LCD_Index2Color_M565+0x2c>)
 8025e9e:	b410      	push	{r4}
 8025ea0:	5c99      	ldrb	r1, [r3, r2]
 8025ea2:	4c09      	ldr	r4, [pc, #36]	; (8025ec8 <LCD_Index2Color_M565+0x30>)
 8025ea4:	f3c0 1245 	ubfx	r2, r0, #5, #6
 8025ea8:	f000 001f 	and.w	r0, r0, #31
 8025eac:	5ca2      	ldrb	r2, [r4, r2]
 8025eae:	5c1b      	ldrb	r3, [r3, r0]
 8025eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025eb4:	0408      	lsls	r0, r1, #16
 8025eb6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8025eba:	4418      	add	r0, r3
 8025ebc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025ec0:	4770      	bx	lr
 8025ec2:	bf00      	nop
 8025ec4:	08032ce0 	.word	0x08032ce0
 8025ec8:	08032d00 	.word	0x08032d00

08025ecc <_Color2Index_M565>:
 8025ecc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025ed0:	4b07      	ldr	r3, [pc, #28]	; (8025ef0 <_Color2Index_M565+0x24>)
 8025ed2:	b410      	push	{r4}
 8025ed4:	5c99      	ldrb	r1, [r3, r2]
 8025ed6:	4c07      	ldr	r4, [pc, #28]	; (8025ef4 <_Color2Index_M565+0x28>)
 8025ed8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8025edc:	b2c0      	uxtb	r0, r0
 8025ede:	5ca2      	ldrb	r2, [r4, r2]
 8025ee0:	5c1b      	ldrb	r3, [r3, r0]
 8025ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025ee6:	02c8      	lsls	r0, r1, #11
 8025ee8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8025eec:	4418      	add	r0, r3
 8025eee:	4770      	bx	lr
 8025ef0:	08032be0 	.word	0x08032be0
 8025ef4:	08032d40 	.word	0x08032d40

08025ef8 <_GetIndexMask_M565>:
 8025ef8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8025efc:	4770      	bx	lr
 8025efe:	bf00      	nop

08025f00 <_Color2IndexBulk>:
 8025f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f04:	4c10      	ldr	r4, [pc, #64]	; (8025f48 <_Color2IndexBulk+0x48>)
 8025f06:	6824      	ldr	r4, [r4, #0]
 8025f08:	4607      	mov	r7, r0
 8025f0a:	460d      	mov	r5, r1
 8025f0c:	4616      	mov	r6, r2
 8025f0e:	469c      	mov	ip, r3
 8025f10:	b114      	cbz	r4, 8025f18 <_Color2IndexBulk+0x18>
 8025f12:	47a0      	blx	r4
 8025f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f18:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8025f50 <_Color2IndexBulk+0x50>
 8025f1c:	4a0b      	ldr	r2, [pc, #44]	; (8025f4c <_Color2IndexBulk+0x4c>)
 8025f1e:	f857 4b04 	ldr.w	r4, [r7], #4
 8025f22:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8025f26:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8025f2a:	5c51      	ldrb	r1, [r2, r1]
 8025f2c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8025f30:	b2e4      	uxtb	r4, r4
 8025f32:	02c9      	lsls	r1, r1, #11
 8025f34:	5d10      	ldrb	r0, [r2, r4]
 8025f36:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8025f3a:	4401      	add	r1, r0
 8025f3c:	3e01      	subs	r6, #1
 8025f3e:	8029      	strh	r1, [r5, #0]
 8025f40:	4465      	add	r5, ip
 8025f42:	d1ec      	bne.n	8025f1e <_Color2IndexBulk+0x1e>
 8025f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f48:	2002b2d8 	.word	0x2002b2d8
 8025f4c:	08032be0 	.word	0x08032be0
 8025f50:	08032d40 	.word	0x08032d40

08025f54 <_Index2ColorBulk>:
 8025f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f58:	4c16      	ldr	r4, [pc, #88]	; (8025fb4 <_Index2ColorBulk+0x60>)
 8025f5a:	6824      	ldr	r4, [r4, #0]
 8025f5c:	461e      	mov	r6, r3
 8025f5e:	b114      	cbz	r4, 8025f66 <_Index2ColorBulk+0x12>
 8025f60:	47a0      	blx	r4
 8025f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f66:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8025f6a:	3b01      	subs	r3, #1
 8025f6c:	3a01      	subs	r2, #1
 8025f6e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025f72:	4d11      	ldr	r5, [pc, #68]	; (8025fb8 <_Index2ColorBulk+0x64>)
 8025f74:	f8df c044 	ldr.w	ip, [pc, #68]	; 8025fbc <_Index2ColorBulk+0x68>
 8025f78:	fb06 0002 	mla	r0, r6, r2, r0
 8025f7c:	4273      	negs	r3, r6
 8025f7e:	e000      	b.n	8025f82 <_Index2ColorBulk+0x2e>
 8025f80:	3a01      	subs	r2, #1
 8025f82:	8804      	ldrh	r4, [r0, #0]
 8025f84:	f004 071f 	and.w	r7, r4, #31
 8025f88:	ea4f 28d4 	mov.w	r8, r4, lsr #11
 8025f8c:	f3c4 1645 	ubfx	r6, r4, #5, #6
 8025f90:	5def      	ldrb	r7, [r5, r7]
 8025f92:	f815 4008 	ldrb.w	r4, [r5, r8]
 8025f96:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8025f9a:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8025f9e:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8025fa2:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8025fa6:	4418      	add	r0, r3
 8025fa8:	f841 4904 	str.w	r4, [r1], #-4
 8025fac:	2a00      	cmp	r2, #0
 8025fae:	d1e7      	bne.n	8025f80 <_Index2ColorBulk+0x2c>
 8025fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025fb4:	2002b2d4 	.word	0x2002b2d4
 8025fb8:	08032ce0 	.word	0x08032ce0
 8025fbc:	08032d00 	.word	0x08032d00

08025fc0 <GUICC_M565_SetCustColorConv>:
 8025fc0:	4a02      	ldr	r2, [pc, #8]	; (8025fcc <GUICC_M565_SetCustColorConv+0xc>)
 8025fc2:	4b03      	ldr	r3, [pc, #12]	; (8025fd0 <GUICC_M565_SetCustColorConv+0x10>)
 8025fc4:	6010      	str	r0, [r2, #0]
 8025fc6:	6019      	str	r1, [r3, #0]
 8025fc8:	4770      	bx	lr
 8025fca:	bf00      	nop
 8025fcc:	2002b2d8 	.word	0x2002b2d8
 8025fd0:	2002b2d4 	.word	0x2002b2d4

08025fd4 <_Color2Index_8888>:
 8025fd4:	43c3      	mvns	r3, r0
 8025fd6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025fda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8025fde:	4313      	orrs	r3, r2
 8025fe0:	b2c2      	uxtb	r2, r0
 8025fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025fe6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025fea:	4318      	orrs	r0, r3
 8025fec:	4770      	bx	lr
 8025fee:	bf00      	nop

08025ff0 <_GetIndexMask_8888>:
 8025ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff4:	4770      	bx	lr
 8025ff6:	bf00      	nop

08025ff8 <_Color2IndexBulk>:
 8025ff8:	b470      	push	{r4, r5, r6}
 8025ffa:	f850 4b04 	ldr.w	r4, [r0], #4
 8025ffe:	43e5      	mvns	r5, r4
 8026000:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8026004:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8026008:	4335      	orrs	r5, r6
 802600a:	b2e6      	uxtb	r6, r4
 802600c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8026010:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026014:	432c      	orrs	r4, r5
 8026016:	3a01      	subs	r2, #1
 8026018:	600c      	str	r4, [r1, #0]
 802601a:	4419      	add	r1, r3
 802601c:	d1ed      	bne.n	8025ffa <_Color2IndexBulk+0x2>
 802601e:	bc70      	pop	{r4, r5, r6}
 8026020:	4770      	bx	lr
 8026022:	bf00      	nop

08026024 <_Index2ColorBulk>:
 8026024:	b470      	push	{r4, r5, r6}
 8026026:	6804      	ldr	r4, [r0, #0]
 8026028:	43e5      	mvns	r5, r4
 802602a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802602e:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8026032:	4335      	orrs	r5, r6
 8026034:	b2e6      	uxtb	r6, r4
 8026036:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 802603a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802603e:	432c      	orrs	r4, r5
 8026040:	3a01      	subs	r2, #1
 8026042:	4418      	add	r0, r3
 8026044:	f841 4b04 	str.w	r4, [r1], #4
 8026048:	d1ed      	bne.n	8026026 <_Index2ColorBulk+0x2>
 802604a:	bc70      	pop	{r4, r5, r6}
 802604c:	4770      	bx	lr
 802604e:	bf00      	nop

08026050 <_Color2Index_888>:
 8026050:	b2c2      	uxtb	r2, r0
 8026052:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8026056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802605a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802605e:	4318      	orrs	r0, r3
 8026060:	4770      	bx	lr
 8026062:	bf00      	nop

08026064 <_GetIndexMask_888>:
 8026064:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8026068:	4770      	bx	lr
 802606a:	bf00      	nop

0802606c <_Color2IndexBulk>:
 802606c:	b470      	push	{r4, r5, r6}
 802606e:	f850 4b04 	ldr.w	r4, [r0], #4
 8026072:	b2e6      	uxtb	r6, r4
 8026074:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8026078:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 802607c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026080:	432c      	orrs	r4, r5
 8026082:	3a01      	subs	r2, #1
 8026084:	600c      	str	r4, [r1, #0]
 8026086:	4419      	add	r1, r3
 8026088:	d1f1      	bne.n	802606e <_Color2IndexBulk+0x2>
 802608a:	bc70      	pop	{r4, r5, r6}
 802608c:	4770      	bx	lr
 802608e:	bf00      	nop

08026090 <_Index2ColorBulk>:
 8026090:	b470      	push	{r4, r5, r6}
 8026092:	6804      	ldr	r4, [r0, #0]
 8026094:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8026098:	b2e6      	uxtb	r6, r4
 802609a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 802609e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80260a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80260a6:	432c      	orrs	r4, r5
 80260a8:	3a01      	subs	r2, #1
 80260aa:	4418      	add	r0, r3
 80260ac:	f841 4b04 	str.w	r4, [r1], #4
 80260b0:	d1ef      	bne.n	8026092 <_Index2ColorBulk+0x2>
 80260b2:	bc70      	pop	{r4, r5, r6}
 80260b4:	4770      	bx	lr
 80260b6:	bf00      	nop

080260b8 <LCD_Index2Color_565>:
 80260b8:	f000 021f 	and.w	r2, r0, #31
 80260bc:	4b09      	ldr	r3, [pc, #36]	; (80260e4 <LCD_Index2Color_565+0x2c>)
 80260be:	5c99      	ldrb	r1, [r3, r2]
 80260c0:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 80260c4:	b410      	push	{r4}
 80260c6:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80260ca:	4c07      	ldr	r4, [pc, #28]	; (80260e8 <LCD_Index2Color_565+0x30>)
 80260cc:	5c9a      	ldrb	r2, [r3, r2]
 80260ce:	5c23      	ldrb	r3, [r4, r0]
 80260d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80260d4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 80260d8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80260dc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80260e0:	4770      	bx	lr
 80260e2:	bf00      	nop
 80260e4:	08032ce0 	.word	0x08032ce0
 80260e8:	08032d00 	.word	0x08032d00

080260ec <_Color2Index_565>:
 80260ec:	b410      	push	{r4}
 80260ee:	b2c2      	uxtb	r2, r0
 80260f0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80260f4:	4b06      	ldr	r3, [pc, #24]	; (8026110 <_Color2Index_565+0x24>)
 80260f6:	4907      	ldr	r1, [pc, #28]	; (8026114 <_Color2Index_565+0x28>)
 80260f8:	5c9a      	ldrb	r2, [r3, r2]
 80260fa:	5d1b      	ldrb	r3, [r3, r4]
 80260fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026100:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026104:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8026108:	5c08      	ldrb	r0, [r1, r0]
 802610a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 802610e:	4770      	bx	lr
 8026110:	08032be0 	.word	0x08032be0
 8026114:	08032d40 	.word	0x08032d40

08026118 <_GetIndexMask_565>:
 8026118:	f64f 70ff 	movw	r0, #65535	; 0xffff
 802611c:	4770      	bx	lr
 802611e:	bf00      	nop

08026120 <_Color2IndexBulk>:
 8026120:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8026124:	4d0c      	ldr	r5, [pc, #48]	; (8026158 <_Color2IndexBulk+0x38>)
 8026126:	4f0d      	ldr	r7, [pc, #52]	; (802615c <_Color2IndexBulk+0x3c>)
 8026128:	f850 4b04 	ldr.w	r4, [r0], #4
 802612c:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8026130:	fa5f f884 	uxtb.w	r8, r4
 8026134:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8026138:	f815 c00c 	ldrb.w	ip, [r5, ip]
 802613c:	f815 4008 	ldrb.w	r4, [r5, r8]
 8026140:	5dbe      	ldrb	r6, [r7, r6]
 8026142:	eb0c 24c4 	add.w	r4, ip, r4, lsl #11
 8026146:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 802614a:	3a01      	subs	r2, #1
 802614c:	800c      	strh	r4, [r1, #0]
 802614e:	4419      	add	r1, r3
 8026150:	d1ea      	bne.n	8026128 <_Color2IndexBulk+0x8>
 8026152:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8026156:	4770      	bx	lr
 8026158:	08032be0 	.word	0x08032be0
 802615c:	08032d40 	.word	0x08032d40

08026160 <_Index2ColorBulk>:
 8026160:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8026164:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8026168:	3c01      	subs	r4, #1
 802616a:	3a01      	subs	r2, #1
 802616c:	fb03 0002 	mla	r0, r3, r2, r0
 8026170:	4d10      	ldr	r5, [pc, #64]	; (80261b4 <_Index2ColorBulk+0x54>)
 8026172:	f8df c044 	ldr.w	ip, [pc, #68]	; 80261b8 <_Index2ColorBulk+0x58>
 8026176:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802617a:	425b      	negs	r3, r3
 802617c:	e000      	b.n	8026180 <_Index2ColorBulk+0x20>
 802617e:	3a01      	subs	r2, #1
 8026180:	8804      	ldrh	r4, [r0, #0]
 8026182:	0ae7      	lsrs	r7, r4, #11
 8026184:	f004 081f 	and.w	r8, r4, #31
 8026188:	f3c4 1645 	ubfx	r6, r4, #5, #6
 802618c:	5def      	ldrb	r7, [r5, r7]
 802618e:	f815 4008 	ldrb.w	r4, [r5, r8]
 8026192:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8026196:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 802619a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 802619e:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 80261a2:	4418      	add	r0, r3
 80261a4:	f841 4904 	str.w	r4, [r1], #-4
 80261a8:	2a00      	cmp	r2, #0
 80261aa:	d1e8      	bne.n	802617e <_Index2ColorBulk+0x1e>
 80261ac:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80261b0:	4770      	bx	lr
 80261b2:	bf00      	nop
 80261b4:	08032ce0 	.word	0x08032ce0
 80261b8:	08032d00 	.word	0x08032d00

080261bc <_Color2Index_M8888I>:
 80261bc:	4770      	bx	lr
 80261be:	bf00      	nop

080261c0 <_GetIndexMask_M8888I>:
 80261c0:	f04f 30ff 	mov.w	r0, #4294967295
 80261c4:	4770      	bx	lr
 80261c6:	bf00      	nop

080261c8 <_Color2IndexBulk_M8888I>:
 80261c8:	b410      	push	{r4}
 80261ca:	f850 4b04 	ldr.w	r4, [r0], #4
 80261ce:	600c      	str	r4, [r1, #0]
 80261d0:	3a01      	subs	r2, #1
 80261d2:	4419      	add	r1, r3
 80261d4:	d1f9      	bne.n	80261ca <_Color2IndexBulk_M8888I+0x2>
 80261d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80261da:	4770      	bx	lr

080261dc <_Index2ColorBulk_M8888I>:
 80261dc:	b410      	push	{r4}
 80261de:	6804      	ldr	r4, [r0, #0]
 80261e0:	f841 4b04 	str.w	r4, [r1], #4
 80261e4:	3a01      	subs	r2, #1
 80261e6:	4418      	add	r0, r3
 80261e8:	d1f9      	bne.n	80261de <_Index2ColorBulk_M8888I+0x2>
 80261ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80261ee:	4770      	bx	lr

080261f0 <GUICC_M8888I_SetCustColorConv>:
 80261f0:	4770      	bx	lr
 80261f2:	bf00      	nop

080261f4 <_Color2Index_M4444I>:
 80261f4:	4b0f      	ldr	r3, [pc, #60]	; (8026234 <_Color2Index_M4444I+0x40>)
 80261f6:	b430      	push	{r4, r5}
 80261f8:	0e02      	lsrs	r2, r0, #24
 80261fa:	b2c5      	uxtb	r5, r0
 80261fc:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8026200:	3508      	adds	r5, #8
 8026202:	3208      	adds	r2, #8
 8026204:	fba3 1505 	umull	r1, r5, r3, r5
 8026208:	fba3 1202 	umull	r1, r2, r3, r2
 802620c:	3408      	adds	r4, #8
 802620e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026212:	092d      	lsrs	r5, r5, #4
 8026214:	fba3 0404 	umull	r0, r4, r3, r4
 8026218:	0912      	lsrs	r2, r2, #4
 802621a:	3108      	adds	r1, #8
 802621c:	0920      	lsrs	r0, r4, #4
 802621e:	eb05 3202 	add.w	r2, r5, r2, lsl #12
 8026222:	fba3 4301 	umull	r4, r3, r3, r1
 8026226:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 802622a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802622e:	4418      	add	r0, r3
 8026230:	bc30      	pop	{r4, r5}
 8026232:	4770      	bx	lr
 8026234:	f0f0f0f1 	.word	0xf0f0f0f1

08026238 <_Index2Color_M4444I>:
 8026238:	4b0b      	ldr	r3, [pc, #44]	; (8026268 <_Index2Color_M4444I+0x30>)
 802623a:	f3c0 3203 	ubfx	r2, r0, #12, #4
 802623e:	f3c0 2103 	ubfx	r1, r0, #8, #4
 8026242:	b410      	push	{r4}
 8026244:	5c59      	ldrb	r1, [r3, r1]
 8026246:	5c9c      	ldrb	r4, [r3, r2]
 8026248:	f000 020f 	and.w	r2, r0, #15
 802624c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8026250:	5c9a      	ldrb	r2, [r3, r2]
 8026252:	5c18      	ldrb	r0, [r3, r0]
 8026254:	0409      	lsls	r1, r1, #16
 8026256:	eb01 6304 	add.w	r3, r1, r4, lsl #24
 802625a:	4413      	add	r3, r2
 802625c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8026260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026264:	4770      	bx	lr
 8026266:	bf00      	nop
 8026268:	08032ad0 	.word	0x08032ad0

0802626c <_GetIndexMask_M4444I>:
 802626c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8026270:	4770      	bx	lr
 8026272:	bf00      	nop

08026274 <_Color2IndexBulk_M4444I>:
 8026274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026278:	4c17      	ldr	r4, [pc, #92]	; (80262d8 <_Color2IndexBulk_M4444I+0x64>)
 802627a:	6824      	ldr	r4, [r4, #0]
 802627c:	4684      	mov	ip, r0
 802627e:	460e      	mov	r6, r1
 8026280:	4617      	mov	r7, r2
 8026282:	4698      	mov	r8, r3
 8026284:	b114      	cbz	r4, 802628c <_Color2IndexBulk_M4444I+0x18>
 8026286:	47a0      	blx	r4
 8026288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802628c:	4d13      	ldr	r5, [pc, #76]	; (80262dc <_Color2IndexBulk_M4444I+0x68>)
 802628e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8026292:	b2e1      	uxtb	r1, r4
 8026294:	0e23      	lsrs	r3, r4, #24
 8026296:	f3c4 4207 	ubfx	r2, r4, #16, #8
 802629a:	3108      	adds	r1, #8
 802629c:	3308      	adds	r3, #8
 802629e:	fba5 0101 	umull	r0, r1, r5, r1
 80262a2:	fba5 0303 	umull	r0, r3, r5, r3
 80262a6:	3208      	adds	r2, #8
 80262a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80262ac:	0909      	lsrs	r1, r1, #4
 80262ae:	091b      	lsrs	r3, r3, #4
 80262b0:	fba5 0202 	umull	r0, r2, r5, r2
 80262b4:	3408      	adds	r4, #8
 80262b6:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 80262ba:	0912      	lsrs	r2, r2, #4
 80262bc:	fba5 1404 	umull	r1, r4, r5, r4
 80262c0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80262c4:	f404 74f8 	and.w	r4, r4, #496	; 0x1f0
 80262c8:	4422      	add	r2, r4
 80262ca:	3f01      	subs	r7, #1
 80262cc:	8032      	strh	r2, [r6, #0]
 80262ce:	4446      	add	r6, r8
 80262d0:	d1dd      	bne.n	802628e <_Color2IndexBulk_M4444I+0x1a>
 80262d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80262d6:	bf00      	nop
 80262d8:	2002b2e0 	.word	0x2002b2e0
 80262dc:	f0f0f0f1 	.word	0xf0f0f0f1

080262e0 <_Index2ColorBulk_M4444I>:
 80262e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262e2:	4c15      	ldr	r4, [pc, #84]	; (8026338 <_Index2ColorBulk_M4444I+0x58>)
 80262e4:	6824      	ldr	r4, [r4, #0]
 80262e6:	461e      	mov	r6, r3
 80262e8:	b10c      	cbz	r4, 80262ee <_Index2ColorBulk_M4444I+0xe>
 80262ea:	47a0      	blx	r4
 80262ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262ee:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80262f2:	3b01      	subs	r3, #1
 80262f4:	3a01      	subs	r2, #1
 80262f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80262fa:	4d10      	ldr	r5, [pc, #64]	; (802633c <_Index2ColorBulk_M4444I+0x5c>)
 80262fc:	fb06 0002 	mla	r0, r6, r2, r0
 8026300:	4273      	negs	r3, r6
 8026302:	e000      	b.n	8026306 <_Index2ColorBulk_M4444I+0x26>
 8026304:	3a01      	subs	r2, #1
 8026306:	8804      	ldrh	r4, [r0, #0]
 8026308:	0b27      	lsrs	r7, r4, #12
 802630a:	f004 060f 	and.w	r6, r4, #15
 802630e:	f3c4 2c03 	ubfx	ip, r4, #8, #4
 8026312:	5dae      	ldrb	r6, [r5, r6]
 8026314:	5def      	ldrb	r7, [r5, r7]
 8026316:	f815 c00c 	ldrb.w	ip, [r5, ip]
 802631a:	f3c4 1403 	ubfx	r4, r4, #4, #4
 802631e:	eb06 6707 	add.w	r7, r6, r7, lsl #24
 8026322:	5d2e      	ldrb	r6, [r5, r4]
 8026324:	eb07 440c 	add.w	r4, r7, ip, lsl #16
 8026328:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 802632c:	4418      	add	r0, r3
 802632e:	f841 4904 	str.w	r4, [r1], #-4
 8026332:	2a00      	cmp	r2, #0
 8026334:	d1e6      	bne.n	8026304 <_Index2ColorBulk_M4444I+0x24>
 8026336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026338:	2002b2dc 	.word	0x2002b2dc
 802633c:	08032ad0 	.word	0x08032ad0

08026340 <GUICC_M4444I_SetCustColorConv>:
 8026340:	4a02      	ldr	r2, [pc, #8]	; (802634c <GUICC_M4444I_SetCustColorConv+0xc>)
 8026342:	4b03      	ldr	r3, [pc, #12]	; (8026350 <GUICC_M4444I_SetCustColorConv+0x10>)
 8026344:	6010      	str	r0, [r2, #0]
 8026346:	6019      	str	r1, [r3, #0]
 8026348:	4770      	bx	lr
 802634a:	bf00      	nop
 802634c:	2002b2e0 	.word	0x2002b2e0
 8026350:	2002b2dc 	.word	0x2002b2dc

08026354 <_Color2Index_M1555I>:
 8026354:	b2c1      	uxtb	r1, r0
 8026356:	4b09      	ldr	r3, [pc, #36]	; (802637c <_Color2Index_M1555I+0x28>)
 8026358:	f3c0 2207 	ubfx	r2, r0, #8, #8
 802635c:	b410      	push	{r4}
 802635e:	5c5c      	ldrb	r4, [r3, r1]
 8026360:	5c9a      	ldrb	r2, [r3, r2]
 8026362:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8026366:	0fc0      	lsrs	r0, r0, #31
 8026368:	eb04 30c0 	add.w	r0, r4, r0, lsl #15
 802636c:	5c5b      	ldrb	r3, [r3, r1]
 802636e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026372:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8026376:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 802637a:	4770      	bx	lr
 802637c:	08032be0 	.word	0x08032be0

08026380 <_Index2Color_M1555I>:
 8026380:	4b0a      	ldr	r3, [pc, #40]	; (80263ac <_Index2Color_M1555I+0x2c>)
 8026382:	f3c0 1244 	ubfx	r2, r0, #5, #5
 8026386:	f3c0 2184 	ubfx	r1, r0, #10, #5
 802638a:	b410      	push	{r4}
 802638c:	5c59      	ldrb	r1, [r3, r1]
 802638e:	5c9c      	ldrb	r4, [r3, r2]
 8026390:	f000 021f 	and.w	r2, r0, #31
 8026394:	0409      	lsls	r1, r1, #16
 8026396:	5c9a      	ldrb	r2, [r3, r2]
 8026398:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 802639c:	4413      	add	r3, r2
 802639e:	f340 30c0 	sbfx	r0, r0, #15, #1
 80263a2:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 80263a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263aa:	4770      	bx	lr
 80263ac:	08032ce0 	.word	0x08032ce0

080263b0 <_GetIndexMask_M1555I>:
 80263b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80263b4:	4770      	bx	lr
 80263b6:	bf00      	nop

080263b8 <_Color2IndexBulk_M1555I>:
 80263b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263ba:	4c10      	ldr	r4, [pc, #64]	; (80263fc <_Color2IndexBulk_M1555I+0x44>)
 80263bc:	6824      	ldr	r4, [r4, #0]
 80263be:	4607      	mov	r7, r0
 80263c0:	460d      	mov	r5, r1
 80263c2:	4616      	mov	r6, r2
 80263c4:	469c      	mov	ip, r3
 80263c6:	b10c      	cbz	r4, 80263cc <_Color2IndexBulk_M1555I+0x14>
 80263c8:	47a0      	blx	r4
 80263ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263cc:	4a0c      	ldr	r2, [pc, #48]	; (8026400 <_Color2IndexBulk_M1555I+0x48>)
 80263ce:	f857 4b04 	ldr.w	r4, [r7], #4
 80263d2:	b2e1      	uxtb	r1, r4
 80263d4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80263d8:	5c50      	ldrb	r0, [r2, r1]
 80263da:	5cd3      	ldrb	r3, [r2, r3]
 80263dc:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80263e0:	eb03 2380 	add.w	r3, r3, r0, lsl #10
 80263e4:	0fe4      	lsrs	r4, r4, #31
 80263e6:	5c51      	ldrb	r1, [r2, r1]
 80263e8:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 80263ec:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 80263f0:	3e01      	subs	r6, #1
 80263f2:	802c      	strh	r4, [r5, #0]
 80263f4:	4465      	add	r5, ip
 80263f6:	d1ea      	bne.n	80263ce <_Color2IndexBulk_M1555I+0x16>
 80263f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263fa:	bf00      	nop
 80263fc:	2002b2e8 	.word	0x2002b2e8
 8026400:	08032be0 	.word	0x08032be0

08026404 <_Index2ColorBulk_M1555I>:
 8026404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026406:	4c15      	ldr	r4, [pc, #84]	; (802645c <_Index2ColorBulk_M1555I+0x58>)
 8026408:	6824      	ldr	r4, [r4, #0]
 802640a:	461e      	mov	r6, r3
 802640c:	b10c      	cbz	r4, 8026412 <_Index2ColorBulk_M1555I+0xe>
 802640e:	47a0      	blx	r4
 8026410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026412:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8026416:	3b01      	subs	r3, #1
 8026418:	3a01      	subs	r2, #1
 802641a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802641e:	4d10      	ldr	r5, [pc, #64]	; (8026460 <_Index2ColorBulk_M1555I+0x5c>)
 8026420:	fb06 0002 	mla	r0, r6, r2, r0
 8026424:	4273      	negs	r3, r6
 8026426:	e000      	b.n	802642a <_Index2ColorBulk_M1555I+0x26>
 8026428:	3a01      	subs	r2, #1
 802642a:	8804      	ldrh	r4, [r0, #0]
 802642c:	f004 071f 	and.w	r7, r4, #31
 8026430:	f3c4 1644 	ubfx	r6, r4, #5, #5
 8026434:	f815 c007 	ldrb.w	ip, [r5, r7]
 8026438:	5daf      	ldrb	r7, [r5, r6]
 802643a:	f3c4 2684 	ubfx	r6, r4, #10, #5
 802643e:	f344 34c0 	sbfx	r4, r4, #15, #1
 8026442:	eb0c 6404 	add.w	r4, ip, r4, lsl #24
 8026446:	5dae      	ldrb	r6, [r5, r6]
 8026448:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 802644c:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8026450:	4418      	add	r0, r3
 8026452:	f841 4904 	str.w	r4, [r1], #-4
 8026456:	2a00      	cmp	r2, #0
 8026458:	d1e6      	bne.n	8026428 <_Index2ColorBulk_M1555I+0x24>
 802645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802645c:	2002b2e4 	.word	0x2002b2e4
 8026460:	08032ce0 	.word	0x08032ce0

08026464 <GUICC_M1555I_SetCustColorConv>:
 8026464:	4a02      	ldr	r2, [pc, #8]	; (8026470 <GUICC_M1555I_SetCustColorConv+0xc>)
 8026466:	4b03      	ldr	r3, [pc, #12]	; (8026474 <GUICC_M1555I_SetCustColorConv+0x10>)
 8026468:	6010      	str	r0, [r2, #0]
 802646a:	6019      	str	r1, [r3, #0]
 802646c:	4770      	bx	lr
 802646e:	bf00      	nop
 8026470:	2002b2e8 	.word	0x2002b2e8
 8026474:	2002b2e4 	.word	0x2002b2e4

08026478 <_Color2Index_88666I>:
 8026478:	4b05      	ldr	r3, [pc, #20]	; (8026490 <_Color2Index_88666I+0x18>)
 802647a:	b510      	push	{r4, lr}
 802647c:	681b      	ldr	r3, [r3, #0]
 802647e:	4604      	mov	r4, r0
 8026480:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8026484:	4798      	blx	r3
 8026486:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 802648a:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 802648e:	bd10      	pop	{r4, pc}
 8026490:	080320f8 	.word	0x080320f8

08026494 <_Index2Color_88666I>:
 8026494:	4b05      	ldr	r3, [pc, #20]	; (80264ac <_Index2Color_88666I+0x18>)
 8026496:	b510      	push	{r4, lr}
 8026498:	685b      	ldr	r3, [r3, #4]
 802649a:	4604      	mov	r4, r0
 802649c:	b2c0      	uxtb	r0, r0
 802649e:	4798      	blx	r3
 80264a0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80264a4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80264a8:	bd10      	pop	{r4, pc}
 80264aa:	bf00      	nop
 80264ac:	080320f8 	.word	0x080320f8

080264b0 <_GetIndexMask_88666I>:
 80264b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80264b4:	4770      	bx	lr
 80264b6:	bf00      	nop

080264b8 <_Color2IndexBulk_88666I>:
 80264b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80264bc:	4c0a      	ldr	r4, [pc, #40]	; (80264e8 <_Color2IndexBulk_88666I+0x30>)
 80264be:	4607      	mov	r7, r0
 80264c0:	f8d4 9000 	ldr.w	r9, [r4]
 80264c4:	4615      	mov	r5, r2
 80264c6:	460c      	mov	r4, r1
 80264c8:	4698      	mov	r8, r3
 80264ca:	f857 6b04 	ldr.w	r6, [r7], #4
 80264ce:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 80264d2:	47c8      	blx	r9
 80264d4:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 80264d8:	ea40 4016 	orr.w	r0, r0, r6, lsr #16
 80264dc:	3d01      	subs	r5, #1
 80264de:	8020      	strh	r0, [r4, #0]
 80264e0:	4444      	add	r4, r8
 80264e2:	d1f2      	bne.n	80264ca <_Color2IndexBulk_88666I+0x12>
 80264e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80264e8:	080320f8 	.word	0x080320f8

080264ec <_Index2ColorBulk_88666I>:
 80264ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80264f0:	4c0e      	ldr	r4, [pc, #56]	; (802652c <_Index2ColorBulk_88666I+0x40>)
 80264f2:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 80264f6:	3f01      	subs	r7, #1
 80264f8:	1e55      	subs	r5, r2, #1
 80264fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80264fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8026502:	fb03 0405 	mla	r4, r3, r5, r0
 8026506:	f1c3 0800 	rsb	r8, r3, #0
 802650a:	e000      	b.n	802650e <_Index2ColorBulk_88666I+0x22>
 802650c:	3d01      	subs	r5, #1
 802650e:	8826      	ldrh	r6, [r4, #0]
 8026510:	b2f0      	uxtb	r0, r6
 8026512:	47c8      	blx	r9
 8026514:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026518:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802651c:	4444      	add	r4, r8
 802651e:	f847 0904 	str.w	r0, [r7], #-4
 8026522:	2d00      	cmp	r5, #0
 8026524:	d1f2      	bne.n	802650c <_Index2ColorBulk_88666I+0x20>
 8026526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802652a:	bf00      	nop
 802652c:	080320f8 	.word	0x080320f8

08026530 <_GetIndexMask_8666_1>:
 8026530:	20ff      	movs	r0, #255	; 0xff
 8026532:	4770      	bx	lr

08026534 <_Color2Index_8666_1>:
 8026534:	b410      	push	{r4}
 8026536:	b328      	cbz	r0, 8026584 <_Color2Index_8666_1+0x50>
 8026538:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802653c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026540:	4293      	cmp	r3, r2
 8026542:	b2c0      	uxtb	r0, r0
 8026544:	d021      	beq.n	802658a <_Color2Index_8666_1+0x56>
 8026546:	4915      	ldr	r1, [pc, #84]	; (802659c <_Color2Index_8666_1+0x68>)
 8026548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802654c:	307f      	adds	r0, #127	; 0x7f
 802654e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8026552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8026556:	fba1 4000 	umull	r4, r0, r1, r0
 802655a:	327f      	adds	r2, #127	; 0x7f
 802655c:	337f      	adds	r3, #127	; 0x7f
 802655e:	fba1 4202 	umull	r4, r2, r1, r2
 8026562:	09c0      	lsrs	r0, r0, #7
 8026564:	fba1 4103 	umull	r4, r1, r1, r3
 8026568:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 802656c:	09d2      	lsrs	r2, r2, #7
 802656e:	09c9      	lsrs	r1, r1, #7
 8026570:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8026574:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026578:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802657c:	286b      	cmp	r0, #107	; 0x6b
 802657e:	bf94      	ite	ls
 8026580:	300c      	addls	r0, #12
 8026582:	301c      	addhi	r0, #28
 8026584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026588:	4770      	bx	lr
 802658a:	4298      	cmp	r0, r3
 802658c:	d1db      	bne.n	8026546 <_Color2Index_8666_1+0x12>
 802658e:	4b04      	ldr	r3, [pc, #16]	; (80265a0 <_Color2Index_8666_1+0x6c>)
 8026590:	3008      	adds	r0, #8
 8026592:	fba3 2000 	umull	r2, r0, r3, r0
 8026596:	0900      	lsrs	r0, r0, #4
 8026598:	3078      	adds	r0, #120	; 0x78
 802659a:	e7f3      	b.n	8026584 <_Color2Index_8666_1+0x50>
 802659c:	80808081 	.word	0x80808081
 80265a0:	f0f0f0f1 	.word	0xf0f0f0f1

080265a4 <_Index2Color_8666_1>:
 80265a4:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80265a8:	2b0f      	cmp	r3, #15
 80265aa:	b430      	push	{r4, r5}
 80265ac:	d92f      	bls.n	802660e <_Index2Color_8666_1+0x6a>
 80265ae:	f1a0 030c 	sub.w	r3, r0, #12
 80265b2:	2be7      	cmp	r3, #231	; 0xe7
 80265b4:	d828      	bhi.n	8026608 <_Index2Color_8666_1+0x64>
 80265b6:	2877      	cmp	r0, #119	; 0x77
 80265b8:	bf88      	it	hi
 80265ba:	f1a0 031c 	subhi.w	r3, r0, #28
 80265be:	4819      	ldr	r0, [pc, #100]	; (8026624 <_Index2Color_8666_1+0x80>)
 80265c0:	4919      	ldr	r1, [pc, #100]	; (8026628 <_Index2Color_8666_1+0x84>)
 80265c2:	fba0 4203 	umull	r4, r2, r0, r3
 80265c6:	0892      	lsrs	r2, r2, #2
 80265c8:	fba0 5002 	umull	r5, r0, r0, r2
 80265cc:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80265d0:	fba1 5103 	umull	r5, r1, r1, r3
 80265d4:	0880      	lsrs	r0, r0, #2
 80265d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80265da:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 80265de:	08c9      	lsrs	r1, r1, #3
 80265e0:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 80265e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80265e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80265ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80265f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80265f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80265f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80265fc:	eb01 4303 	add.w	r3, r1, r3, lsl #16
 8026600:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8026604:	bc30      	pop	{r4, r5}
 8026606:	4770      	bx	lr
 8026608:	2000      	movs	r0, #0
 802660a:	bc30      	pop	{r4, r5}
 802660c:	4770      	bx	lr
 802660e:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8026612:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8026616:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 802661a:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 802661e:	3008      	adds	r0, #8
 8026620:	bc30      	pop	{r4, r5}
 8026622:	4770      	bx	lr
 8026624:	aaaaaaab 	.word	0xaaaaaaab
 8026628:	38e38e39 	.word	0x38e38e39

0802662c <LCD_Color2Index_8666>:
 802662c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8026630:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8026634:	4293      	cmp	r3, r2
 8026636:	b410      	push	{r4}
 8026638:	b2c0      	uxtb	r0, r0
 802663a:	d020      	beq.n	802667e <LCD_Color2Index_8666+0x52>
 802663c:	4914      	ldr	r1, [pc, #80]	; (8026690 <LCD_Color2Index_8666+0x64>)
 802663e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8026642:	307f      	adds	r0, #127	; 0x7f
 8026644:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8026648:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802664c:	fba1 4000 	umull	r4, r0, r1, r0
 8026650:	337f      	adds	r3, #127	; 0x7f
 8026652:	327f      	adds	r2, #127	; 0x7f
 8026654:	fba1 4303 	umull	r4, r3, r1, r3
 8026658:	09c0      	lsrs	r0, r0, #7
 802665a:	fba1 4102 	umull	r4, r1, r1, r2
 802665e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8026662:	09db      	lsrs	r3, r3, #7
 8026664:	09c9      	lsrs	r1, r1, #7
 8026666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802666a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802666e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8026672:	286b      	cmp	r0, #107	; 0x6b
 8026674:	bf88      	it	hi
 8026676:	3028      	addhi	r0, #40	; 0x28
 8026678:	f85d 4b04 	ldr.w	r4, [sp], #4
 802667c:	4770      	bx	lr
 802667e:	4298      	cmp	r0, r3
 8026680:	d1dc      	bne.n	802663c <LCD_Color2Index_8666+0x10>
 8026682:	4b04      	ldr	r3, [pc, #16]	; (8026694 <LCD_Color2Index_8666+0x68>)
 8026684:	3008      	adds	r0, #8
 8026686:	fba3 2000 	umull	r2, r0, r3, r0
 802668a:	0900      	lsrs	r0, r0, #4
 802668c:	3078      	adds	r0, #120	; 0x78
 802668e:	e7f3      	b.n	8026678 <LCD_Color2Index_8666+0x4c>
 8026690:	80808081 	.word	0x80808081
 8026694:	f0f0f0f1 	.word	0xf0f0f0f1

08026698 <_GetIndexMask_8666>:
 8026698:	20ff      	movs	r0, #255	; 0xff
 802669a:	4770      	bx	lr

0802669c <LCD_Index2Color_8666>:
 802669c:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80266a0:	2b0f      	cmp	r3, #15
 80266a2:	b430      	push	{r4, r5}
 80266a4:	d92c      	bls.n	8026700 <LCD_Index2Color_8666+0x64>
 80266a6:	286b      	cmp	r0, #107	; 0x6b
 80266a8:	d826      	bhi.n	80266f8 <LCD_Index2Color_8666+0x5c>
 80266aa:	491c      	ldr	r1, [pc, #112]	; (802671c <LCD_Index2Color_8666+0x80>)
 80266ac:	4a1c      	ldr	r2, [pc, #112]	; (8026720 <LCD_Index2Color_8666+0x84>)
 80266ae:	fba1 4300 	umull	r4, r3, r1, r0
 80266b2:	089b      	lsrs	r3, r3, #2
 80266b4:	fba1 5103 	umull	r5, r1, r1, r3
 80266b8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80266bc:	fba2 5200 	umull	r5, r2, r2, r0
 80266c0:	0889      	lsrs	r1, r1, #2
 80266c2:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 80266c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80266ca:	08d2      	lsrs	r2, r2, #3
 80266cc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80266d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80266d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80266d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80266dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80266e0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80266e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80266e8:	eb02 4000 	add.w	r0, r2, r0, lsl #16
 80266ec:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80266f0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80266f4:	bc30      	pop	{r4, r5}
 80266f6:	4770      	bx	lr
 80266f8:	2893      	cmp	r0, #147	; 0x93
 80266fa:	d90c      	bls.n	8026716 <LCD_Index2Color_8666+0x7a>
 80266fc:	3828      	subs	r0, #40	; 0x28
 80266fe:	e7d4      	b.n	80266aa <LCD_Index2Color_8666+0xe>
 8026700:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8026704:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8026708:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 802670c:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8026710:	3008      	adds	r0, #8
 8026712:	bc30      	pop	{r4, r5}
 8026714:	4770      	bx	lr
 8026716:	2000      	movs	r0, #0
 8026718:	bc30      	pop	{r4, r5}
 802671a:	4770      	bx	lr
 802671c:	aaaaaaab 	.word	0xaaaaaaab
 8026720:	38e38e39 	.word	0x38e38e39

08026724 <_Color2Index_84444>:
 8026724:	0f83      	lsrs	r3, r0, #30
 8026726:	d010      	beq.n	802674a <_Color2Index_84444+0x26>
 8026728:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802672c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026730:	428a      	cmp	r2, r1
 8026732:	b2c0      	uxtb	r0, r0
 8026734:	d00b      	beq.n	802674e <_Color2Index_84444+0x2a>
 8026736:	019b      	lsls	r3, r3, #6
 8026738:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 802673c:	0980      	lsrs	r0, r0, #6
 802673e:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 8026742:	0989      	lsrs	r1, r1, #6
 8026744:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8026748:	4770      	bx	lr
 802674a:	4618      	mov	r0, r3
 802674c:	4770      	bx	lr
 802674e:	4290      	cmp	r0, r2
 8026750:	d1f1      	bne.n	8026736 <_Color2Index_84444+0x12>
 8026752:	0900      	lsrs	r0, r0, #4
 8026754:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8026758:	4770      	bx	lr
 802675a:	bf00      	nop

0802675c <_GetIndexMask_84444>:
 802675c:	20ff      	movs	r0, #255	; 0xff
 802675e:	4770      	bx	lr

08026760 <_Index2Color_84444>:
 8026760:	283f      	cmp	r0, #63	; 0x3f
 8026762:	d804      	bhi.n	802676e <_Index2Color_84444+0xe>
 8026764:	280f      	cmp	r0, #15
 8026766:	d823      	bhi.n	80267b0 <_Index2Color_84444+0x50>
 8026768:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802676c:	4770      	bx	lr
 802676e:	f000 0103 	and.w	r1, r0, #3
 8026772:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8026776:	f3c0 1301 	ubfx	r3, r0, #4, #2
 802677a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802677e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026782:	0980      	lsrs	r0, r0, #6
 8026784:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8026788:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802678c:	b2c9      	uxtb	r1, r1
 802678e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8026792:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026796:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802679a:	0409      	lsls	r1, r1, #16
 802679c:	b2d2      	uxtb	r2, r2
 802679e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80267a2:	b2db      	uxtb	r3, r3
 80267a4:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 80267a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80267ac:	4318      	orrs	r0, r3
 80267ae:	4770      	bx	lr
 80267b0:	f000 030f 	and.w	r3, r0, #15
 80267b4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80267b8:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80267bc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80267c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80267c4:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 80267c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80267cc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80267d0:	4770      	bx	lr
 80267d2:	bf00      	nop

080267d4 <_Color2Index_822216>:
 80267d4:	4b11      	ldr	r3, [pc, #68]	; (802681c <_Color2Index_822216+0x48>)
 80267d6:	f400 017f 	and.w	r1, r0, #16711680	; 0xff0000
 80267da:	b410      	push	{r4}
 80267dc:	0e04      	lsrs	r4, r0, #24
 80267de:	fba3 2404 	umull	r2, r4, r3, r4
 80267e2:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80267e6:	0c0b      	lsrs	r3, r1, #16
 80267e8:	4293      	cmp	r3, r2
 80267ea:	ea4f 1414 	mov.w	r4, r4, lsr #4
 80267ee:	b2c0      	uxtb	r0, r0
 80267f0:	d00d      	beq.n	802680e <_Color2Index_822216+0x3a>
 80267f2:	09c0      	lsrs	r0, r0, #7
 80267f4:	0080      	lsls	r0, r0, #2
 80267f6:	ea40 13d3 	orr.w	r3, r0, r3, lsr #7
 80267fa:	f043 0308 	orr.w	r3, r3, #8
 80267fe:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
 8026802:	09d2      	lsrs	r2, r2, #7
 8026804:	ea44 0042 	orr.w	r0, r4, r2, lsl #1
 8026808:	f85d 4b04 	ldr.w	r4, [sp], #4
 802680c:	4770      	bx	lr
 802680e:	4298      	cmp	r0, r3
 8026810:	d1ef      	bne.n	80267f2 <_Color2Index_822216+0x1e>
 8026812:	0d49      	lsrs	r1, r1, #21
 8026814:	ea41 1004 	orr.w	r0, r1, r4, lsl #4
 8026818:	e7f6      	b.n	8026808 <_Color2Index_822216+0x34>
 802681a:	bf00      	nop
 802681c:	f0f0f0f1 	.word	0xf0f0f0f1

08026820 <_Index2Color_822216>:
 8026820:	f3c0 1303 	ubfx	r3, r0, #4, #4
 8026824:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026828:	0702      	lsls	r2, r0, #28
 802682a:	ea4f 6303 	mov.w	r3, r3, lsl #24
 802682e:	d516      	bpl.n	802685e <_Index2Color_822216+0x3e>
 8026830:	f010 0f01 	tst.w	r0, #1
 8026834:	bf0c      	ite	eq
 8026836:	2200      	moveq	r2, #0
 8026838:	22ff      	movne	r2, #255	; 0xff
 802683a:	f010 0f02 	tst.w	r0, #2
 802683e:	bf0c      	ite	eq
 8026840:	2300      	moveq	r3, #0
 8026842:	f44f 437f 	movne.w	r3, #65280	; 0xff00
 8026846:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 802684a:	f010 0f04 	tst.w	r0, #4
 802684e:	ea42 0003 	orr.w	r0, r2, r3
 8026852:	bf0c      	ite	eq
 8026854:	2300      	moveq	r3, #0
 8026856:	f44f 037f 	movne.w	r3, #16711680	; 0xff0000
 802685a:	4318      	orrs	r0, r3
 802685c:	4770      	bx	lr
 802685e:	f000 0107 	and.w	r1, r0, #7
 8026862:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8026866:	0092      	lsls	r2, r2, #2
 8026868:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 802686c:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8026870:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8026874:	4318      	orrs	r0, r3
 8026876:	4770      	bx	lr

08026878 <_GetIndexMask_822216>:
 8026878:	20ff      	movs	r0, #255	; 0xff
 802687a:	4770      	bx	lr

0802687c <_Color2Index_1616I>:
 802687c:	4b06      	ldr	r3, [pc, #24]	; (8026898 <_Color2Index_1616I+0x1c>)
 802687e:	b510      	push	{r4, lr}
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	4604      	mov	r4, r0
 8026884:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8026888:	4798      	blx	r3
 802688a:	0e24      	lsrs	r4, r4, #24
 802688c:	4b03      	ldr	r3, [pc, #12]	; (802689c <_Color2Index_1616I+0x20>)
 802688e:	5d1b      	ldrb	r3, [r3, r4]
 8026890:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8026894:	bd10      	pop	{r4, pc}
 8026896:	bf00      	nop
 8026898:	08032158 	.word	0x08032158
 802689c:	08032ae0 	.word	0x08032ae0

080268a0 <_Index2Color_1616I>:
 80268a0:	4b05      	ldr	r3, [pc, #20]	; (80268b8 <_Index2Color_1616I+0x18>)
 80268a2:	b510      	push	{r4, lr}
 80268a4:	685b      	ldr	r3, [r3, #4]
 80268a6:	4604      	mov	r4, r0
 80268a8:	b2c0      	uxtb	r0, r0
 80268aa:	4798      	blx	r3
 80268ac:	0924      	lsrs	r4, r4, #4
 80268ae:	4b03      	ldr	r3, [pc, #12]	; (80268bc <_Index2Color_1616I+0x1c>)
 80268b0:	5d1b      	ldrb	r3, [r3, r4]
 80268b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80268b6:	bd10      	pop	{r4, pc}
 80268b8:	08032158 	.word	0x08032158
 80268bc:	08032ad0 	.word	0x08032ad0

080268c0 <_GetIndexMask_1616I>:
 80268c0:	20ff      	movs	r0, #255	; 0xff
 80268c2:	4770      	bx	lr

080268c4 <_Color2IndexBulk_1616I>:
 80268c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268c8:	4c0c      	ldr	r4, [pc, #48]	; (80268fc <_Color2IndexBulk_1616I+0x38>)
 80268ca:	f8df a034 	ldr.w	sl, [pc, #52]	; 8026900 <_Color2IndexBulk_1616I+0x3c>
 80268ce:	f8d4 9000 	ldr.w	r9, [r4]
 80268d2:	4607      	mov	r7, r0
 80268d4:	460c      	mov	r4, r1
 80268d6:	4615      	mov	r5, r2
 80268d8:	4698      	mov	r8, r3
 80268da:	f857 6b04 	ldr.w	r6, [r7], #4
 80268de:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 80268e2:	0e36      	lsrs	r6, r6, #24
 80268e4:	47c8      	blx	r9
 80268e6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80268ea:	3d01      	subs	r5, #1
 80268ec:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80268f0:	7020      	strb	r0, [r4, #0]
 80268f2:	4444      	add	r4, r8
 80268f4:	d1f1      	bne.n	80268da <_Color2IndexBulk_1616I+0x16>
 80268f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268fa:	bf00      	nop
 80268fc:	08032158 	.word	0x08032158
 8026900:	08032ae0 	.word	0x08032ae0

08026904 <_Index2ColorBulk_1616I>:
 8026904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026908:	4c0f      	ldr	r4, [pc, #60]	; (8026948 <_Index2ColorBulk_1616I+0x44>)
 802690a:	f8df a040 	ldr.w	sl, [pc, #64]	; 802694c <_Index2ColorBulk_1616I+0x48>
 802690e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8026912:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
 8026916:	3f01      	subs	r7, #1
 8026918:	1e55      	subs	r5, r2, #1
 802691a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802691e:	fb03 0405 	mla	r4, r3, r5, r0
 8026922:	f1c3 0800 	rsb	r8, r3, #0
 8026926:	e000      	b.n	802692a <_Index2ColorBulk_1616I+0x26>
 8026928:	3d01      	subs	r5, #1
 802692a:	7826      	ldrb	r6, [r4, #0]
 802692c:	4630      	mov	r0, r6
 802692e:	0936      	lsrs	r6, r6, #4
 8026930:	47c8      	blx	r9
 8026932:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8026936:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 802693a:	4444      	add	r4, r8
 802693c:	f847 0904 	str.w	r0, [r7], #-4
 8026940:	2d00      	cmp	r5, #0
 8026942:	d1f1      	bne.n	8026928 <_Index2ColorBulk_1616I+0x24>
 8026944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026948:	08032158 	.word	0x08032158
 802694c:	08032ad0 	.word	0x08032ad0

08026950 <_Color2Index_16>:
 8026950:	b4f0      	push	{r4, r5, r6, r7}
 8026952:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8026956:	1c79      	adds	r1, r7, #1
 8026958:	f3c0 4607 	ubfx	r6, r0, #16, #8
 802695c:	1c72      	adds	r2, r6, #1
 802695e:	2954      	cmp	r1, #84	; 0x54
 8026960:	b2c5      	uxtb	r5, r0
 8026962:	f105 0401 	add.w	r4, r5, #1
 8026966:	bf94      	ite	ls
 8026968:	2100      	movls	r1, #0
 802696a:	2101      	movhi	r1, #1
 802696c:	2a54      	cmp	r2, #84	; 0x54
 802696e:	bf94      	ite	ls
 8026970:	2200      	movls	r2, #0
 8026972:	2201      	movhi	r2, #1
 8026974:	0088      	lsls	r0, r1, #2
 8026976:	2c54      	cmp	r4, #84	; 0x54
 8026978:	bf94      	ite	ls
 802697a:	2400      	movls	r4, #0
 802697c:	2401      	movhi	r4, #1
 802697e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8026982:	1853      	adds	r3, r2, r1
 8026984:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8026988:	4423      	add	r3, r4
 802698a:	b902      	cbnz	r2, 802698e <_Color2Index_16+0x3e>
 802698c:	b161      	cbz	r1, 80269a8 <_Color2Index_16+0x58>
 802698e:	4437      	add	r7, r6
 8026990:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 8026994:	443d      	add	r5, r7
 8026996:	4415      	add	r5, r2
 8026998:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 802699c:	fbb5 f3f3 	udiv	r3, r5, r3
 80269a0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80269a4:	bcf0      	pop	{r4, r5, r6, r7}
 80269a6:	4770      	bx	lr
 80269a8:	2c00      	cmp	r4, #0
 80269aa:	d1f0      	bne.n	802698e <_Color2Index_16+0x3e>
 80269ac:	e7fa      	b.n	80269a4 <_Color2Index_16+0x54>
 80269ae:	bf00      	nop

080269b0 <_Index2Color_16>:
 80269b0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 80269b4:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80269b8:	b430      	push	{r4, r5}
 80269ba:	ea02 0400 	and.w	r4, r2, r0
 80269be:	ea03 0100 	and.w	r1, r3, r0
 80269c2:	ebc4 15c2 	rsb	r5, r4, r2, lsl #7
 80269c6:	f3c0 0240 	ubfx	r2, r0, #1, #1
 80269ca:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 80269ce:	ebc1 15c3 	rsb	r5, r1, r3, lsl #7
 80269d2:	ea02 0300 	and.w	r3, r2, r0
 80269d6:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 80269da:	eb05 11c1 	add.w	r1, r5, r1, lsl #7
 80269de:	ebc3 10c2 	rsb	r0, r3, r2, lsl #7
 80269e2:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 80269e6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80269ea:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80269ee:	bc30      	pop	{r4, r5}
 80269f0:	4770      	bx	lr
 80269f2:	bf00      	nop

080269f4 <_GetIndexMask_16>:
 80269f4:	200f      	movs	r0, #15
 80269f6:	4770      	bx	lr

080269f8 <_DrawDownRect>:
 80269f8:	b510      	push	{r4, lr}
 80269fa:	b09c      	sub	sp, #112	; 0x70
 80269fc:	4604      	mov	r4, r0
 80269fe:	4668      	mov	r0, sp
 8026a00:	f7fd fe62 	bl	80246c8 <GUI_SaveContext_W>
 8026a04:	4b09      	ldr	r3, [pc, #36]	; (8026a2c <_DrawDownRect+0x34>)
 8026a06:	6818      	ldr	r0, [r3, #0]
 8026a08:	f7fb fb68 	bl	80220dc <LCD_SetColor>
 8026a0c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8026a10:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8026a14:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8026a18:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026a1c:	f7ff f9a8 	bl	8025d70 <GUI_DrawRect>
 8026a20:	4668      	mov	r0, sp
 8026a22:	f7fd fe5b 	bl	80246dc <GUI_RestoreContext>
 8026a26:	b01c      	add	sp, #112	; 0x70
 8026a28:	bd10      	pop	{r4, pc}
 8026a2a:	bf00      	nop
 8026a2c:	20000298 	.word	0x20000298

08026a30 <_DrawUpRect>:
 8026a30:	b510      	push	{r4, lr}
 8026a32:	b09c      	sub	sp, #112	; 0x70
 8026a34:	4604      	mov	r4, r0
 8026a36:	4668      	mov	r0, sp
 8026a38:	f7fd fe46 	bl	80246c8 <GUI_SaveContext_W>
 8026a3c:	4b09      	ldr	r3, [pc, #36]	; (8026a64 <_DrawUpRect+0x34>)
 8026a3e:	6818      	ldr	r0, [r3, #0]
 8026a40:	f7fb fb4c 	bl	80220dc <LCD_SetColor>
 8026a44:	f9b4 0000 	ldrsh.w	r0, [r4]
 8026a48:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8026a4c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8026a50:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026a54:	f7ff f98c 	bl	8025d70 <GUI_DrawRect>
 8026a58:	4668      	mov	r0, sp
 8026a5a:	f7fd fe3f 	bl	80246dc <GUI_RestoreContext>
 8026a5e:	b01c      	add	sp, #112	; 0x70
 8026a60:	bd10      	pop	{r4, pc}
 8026a62:	bf00      	nop
 8026a64:	20000298 	.word	0x20000298

08026a68 <_DrawDown>:
 8026a68:	b500      	push	{lr}
 8026a6a:	b09f      	sub	sp, #124	; 0x7c
 8026a6c:	4668      	mov	r0, sp
 8026a6e:	f7f5 f8d9 	bl	801bc24 <WM_GetClientRect>
 8026a72:	a802      	add	r0, sp, #8
 8026a74:	f7fd fe28 	bl	80246c8 <GUI_SaveContext_W>
 8026a78:	4b09      	ldr	r3, [pc, #36]	; (8026aa0 <_DrawDown+0x38>)
 8026a7a:	6818      	ldr	r0, [r3, #0]
 8026a7c:	f7fb fb2e 	bl	80220dc <LCD_SetColor>
 8026a80:	f9bd 0000 	ldrsh.w	r0, [sp]
 8026a84:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8026a88:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8026a8c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8026a90:	f7ff f96e 	bl	8025d70 <GUI_DrawRect>
 8026a94:	a802      	add	r0, sp, #8
 8026a96:	f7fd fe21 	bl	80246dc <GUI_RestoreContext>
 8026a9a:	b01f      	add	sp, #124	; 0x7c
 8026a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8026aa0:	20000298 	.word	0x20000298

08026aa4 <_DrawUp>:
 8026aa4:	b500      	push	{lr}
 8026aa6:	b09f      	sub	sp, #124	; 0x7c
 8026aa8:	4668      	mov	r0, sp
 8026aaa:	f7f5 f8bb 	bl	801bc24 <WM_GetClientRect>
 8026aae:	a802      	add	r0, sp, #8
 8026ab0:	f7fd fe0a 	bl	80246c8 <GUI_SaveContext_W>
 8026ab4:	4b09      	ldr	r3, [pc, #36]	; (8026adc <_DrawUp+0x38>)
 8026ab6:	6818      	ldr	r0, [r3, #0]
 8026ab8:	f7fb fb10 	bl	80220dc <LCD_SetColor>
 8026abc:	f9bd 0000 	ldrsh.w	r0, [sp]
 8026ac0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8026ac4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8026ac8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8026acc:	f7ff f950 	bl	8025d70 <GUI_DrawRect>
 8026ad0:	a802      	add	r0, sp, #8
 8026ad2:	f7fd fe03 	bl	80246dc <GUI_RestoreContext>
 8026ad6:	b01f      	add	sp, #124	; 0x7c
 8026ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8026adc:	20000298 	.word	0x20000298

08026ae0 <_DrawDown>:
 8026ae0:	4770      	bx	lr
 8026ae2:	bf00      	nop

08026ae4 <_DrawUp>:
 8026ae4:	4770      	bx	lr
 8026ae6:	bf00      	nop

08026ae8 <_DrawDownRect>:
 8026ae8:	4770      	bx	lr
 8026aea:	bf00      	nop

08026aec <_DrawUpRect>:
 8026aec:	4770      	bx	lr
 8026aee:	bf00      	nop

08026af0 <_DrawFlat>:
 8026af0:	4770      	bx	lr
 8026af2:	bf00      	nop

08026af4 <_DrawButton>:
 8026af4:	b5b0      	push	{r4, r5, r7, lr}
 8026af6:	6883      	ldr	r3, [r0, #8]
 8026af8:	4a2c      	ldr	r2, [pc, #176]	; (8026bac <_DrawButton+0xb8>)
 8026afa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8026afe:	4604      	mov	r4, r0
 8026b00:	b084      	sub	sp, #16
 8026b02:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8026b04:	f7fd fe0e 	bl	8024724 <GUI_SetColor>
 8026b08:	6820      	ldr	r0, [r4, #0]
 8026b0a:	f7fe feef 	bl	80258ec <GUI_ALLOC_LockH>
 8026b0e:	6a23      	ldr	r3, [r4, #32]
 8026b10:	9003      	str	r0, [sp, #12]
 8026b12:	781b      	ldrb	r3, [r3, #0]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d042      	beq.n	8026b9e <_DrawButton+0xaa>
 8026b18:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8026b1c:	2b02      	cmp	r3, #2
 8026b1e:	d03e      	beq.n	8026b9e <_DrawButton+0xaa>
 8026b20:	69e0      	ldr	r0, [r4, #28]
 8026b22:	6921      	ldr	r1, [r4, #16]
 8026b24:	69a2      	ldr	r2, [r4, #24]
 8026b26:	f7fc fccd 	bl	80234c4 <GUI_DrawHLine>
 8026b2a:	6920      	ldr	r0, [r4, #16]
 8026b2c:	6961      	ldr	r1, [r4, #20]
 8026b2e:	69e2      	ldr	r2, [r4, #28]
 8026b30:	f7fc fd1e 	bl	8023570 <GUI_DrawVLine>
 8026b34:	6961      	ldr	r1, [r4, #20]
 8026b36:	69a0      	ldr	r0, [r4, #24]
 8026b38:	69e2      	ldr	r2, [r4, #28]
 8026b3a:	f7fc fd19 	bl	8023570 <GUI_DrawVLine>
 8026b3e:	6a23      	ldr	r3, [r4, #32]
 8026b40:	6961      	ldr	r1, [r4, #20]
 8026b42:	69e7      	ldr	r7, [r4, #28]
 8026b44:	781b      	ldrb	r3, [r3, #0]
 8026b46:	440f      	add	r7, r1
 8026b48:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8026b4c:	2b01      	cmp	r3, #1
 8026b4e:	ea4f 0767 	mov.w	r7, r7, asr #1
 8026b52:	d106      	bne.n	8026b62 <_DrawButton+0x6e>
 8026b54:	9b03      	ldr	r3, [sp, #12]
 8026b56:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8026b5a:	2b02      	cmp	r3, #2
 8026b5c:	bf18      	it	ne
 8026b5e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8026b62:	68ab      	ldr	r3, [r5, #8]
 8026b64:	9300      	str	r3, [sp, #0]
 8026b66:	6920      	ldr	r0, [r4, #16]
 8026b68:	69a2      	ldr	r2, [r4, #24]
 8026b6a:	68eb      	ldr	r3, [r5, #12]
 8026b6c:	9301      	str	r3, [sp, #4]
 8026b6e:	3101      	adds	r1, #1
 8026b70:	463b      	mov	r3, r7
 8026b72:	3001      	adds	r0, #1
 8026b74:	3a01      	subs	r2, #1
 8026b76:	f002 fe23 	bl	80297c0 <GUI_DrawGradientV>
 8026b7a:	692b      	ldr	r3, [r5, #16]
 8026b7c:	9300      	str	r3, [sp, #0]
 8026b7e:	6920      	ldr	r0, [r4, #16]
 8026b80:	69a2      	ldr	r2, [r4, #24]
 8026b82:	69e3      	ldr	r3, [r4, #28]
 8026b84:	6969      	ldr	r1, [r5, #20]
 8026b86:	9101      	str	r1, [sp, #4]
 8026b88:	3a01      	subs	r2, #1
 8026b8a:	1c79      	adds	r1, r7, #1
 8026b8c:	3b01      	subs	r3, #1
 8026b8e:	3001      	adds	r0, #1
 8026b90:	f002 fe16 	bl	80297c0 <GUI_DrawGradientV>
 8026b94:	a803      	add	r0, sp, #12
 8026b96:	f7fe febb 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026b9a:	b004      	add	sp, #16
 8026b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8026b9e:	6960      	ldr	r0, [r4, #20]
 8026ba0:	6921      	ldr	r1, [r4, #16]
 8026ba2:	69a2      	ldr	r2, [r4, #24]
 8026ba4:	f7fc fc8e 	bl	80234c4 <GUI_DrawHLine>
 8026ba8:	e7ba      	b.n	8026b20 <_DrawButton+0x2c>
 8026baa:	bf00      	nop
 8026bac:	08032380 	.word	0x08032380

08026bb0 <_DrawArrow>:
 8026bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026bb4:	4a38      	ldr	r2, [pc, #224]	; (8026c98 <_DrawArrow+0xe8>)
 8026bb6:	6883      	ldr	r3, [r0, #8]
 8026bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026bbc:	4606      	mov	r6, r0
 8026bbe:	b083      	sub	sp, #12
 8026bc0:	6998      	ldr	r0, [r3, #24]
 8026bc2:	f7fd fdaf 	bl	8024724 <GUI_SetColor>
 8026bc6:	6830      	ldr	r0, [r6, #0]
 8026bc8:	f7f5 ff04 	bl	801c9d4 <WM_GetWindowSizeY>
 8026bcc:	69f2      	ldr	r2, [r6, #28]
 8026bce:	6973      	ldr	r3, [r6, #20]
 8026bd0:	4607      	mov	r7, r0
 8026bd2:	6830      	ldr	r0, [r6, #0]
 8026bd4:	ebc3 0802 	rsb	r8, r3, r2
 8026bd8:	f7fe fe88 	bl	80258ec <GUI_ALLOC_LockH>
 8026bdc:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 8026be0:	9001      	str	r0, [sp, #4]
 8026be2:	f1b9 0f02 	cmp.w	r9, #2
 8026be6:	d14b      	bne.n	8026c80 <_DrawArrow+0xd0>
 8026be8:	4b2c      	ldr	r3, [pc, #176]	; (8026c9c <_DrawArrow+0xec>)
 8026bea:	17fc      	asrs	r4, r7, #31
 8026bec:	fb83 2307 	smull	r2, r3, r3, r7
 8026bf0:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 8026bf4:	a801      	add	r0, sp, #4
 8026bf6:	f7fe fe8b 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026bfa:	6a31      	ldr	r1, [r6, #32]
 8026bfc:	43e2      	mvns	r2, r4
 8026bfe:	eb02 0308 	add.w	r3, r2, r8
 8026c02:	7809      	ldrb	r1, [r1, #0]
 8026c04:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8026c08:	105b      	asrs	r3, r3, #1
 8026c0a:	b9e1      	cbnz	r1, 8026c46 <_DrawArrow+0x96>
 8026c0c:	69f5      	ldr	r5, [r6, #28]
 8026c0e:	1aed      	subs	r5, r5, r3
 8026c10:	3d01      	subs	r5, #1
 8026c12:	f04f 38ff 	mov.w	r8, #4294967295
 8026c16:	6933      	ldr	r3, [r6, #16]
 8026c18:	69b7      	ldr	r7, [r6, #24]
 8026c1a:	1aff      	subs	r7, r7, r3
 8026c1c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8026c20:	2c00      	cmp	r4, #0
 8026c22:	eb03 0767 	add.w	r7, r3, r7, asr #1
 8026c26:	db0b      	blt.n	8026c40 <_DrawArrow+0x90>
 8026c28:	1b3e      	subs	r6, r7, r4
 8026c2a:	4628      	mov	r0, r5
 8026c2c:	4631      	mov	r1, r6
 8026c2e:	19e2      	adds	r2, r4, r7
 8026c30:	3c01      	subs	r4, #1
 8026c32:	f7fc fc47 	bl	80234c4 <GUI_DrawHLine>
 8026c36:	1c63      	adds	r3, r4, #1
 8026c38:	4445      	add	r5, r8
 8026c3a:	f106 0601 	add.w	r6, r6, #1
 8026c3e:	d1f4      	bne.n	8026c2a <_DrawArrow+0x7a>
 8026c40:	b003      	add	sp, #12
 8026c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c46:	6975      	ldr	r5, [r6, #20]
 8026c48:	07f9      	lsls	r1, r7, #31
 8026c4a:	441d      	add	r5, r3
 8026c4c:	d520      	bpl.n	8026c90 <_DrawArrow+0xe0>
 8026c4e:	f1b9 0f02 	cmp.w	r9, #2
 8026c52:	d01d      	beq.n	8026c90 <_DrawArrow+0xe0>
 8026c54:	f108 0101 	add.w	r1, r8, #1
 8026c58:	2900      	cmp	r1, #0
 8026c5a:	4608      	mov	r0, r1
 8026c5c:	bfb8      	it	lt
 8026c5e:	f108 0004 	addlt.w	r0, r8, #4
 8026c62:	ebb4 0fa0 	cmp.w	r4, r0, asr #2
 8026c66:	bfbc      	itt	lt
 8026c68:	3401      	addlt	r4, #1
 8026c6a:	43e2      	mvnlt	r2, r4
 8026c6c:	440a      	add	r2, r1
 8026c6e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8026c72:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8026c76:	da0b      	bge.n	8026c90 <_DrawArrow+0xe0>
 8026c78:	3501      	adds	r5, #1
 8026c7a:	f04f 0801 	mov.w	r8, #1
 8026c7e:	e7ca      	b.n	8026c16 <_DrawArrow+0x66>
 8026c80:	4c07      	ldr	r4, [pc, #28]	; (8026ca0 <_DrawArrow+0xf0>)
 8026c82:	fb84 3407 	smull	r3, r4, r4, r7
 8026c86:	443c      	add	r4, r7
 8026c88:	17fb      	asrs	r3, r7, #31
 8026c8a:	ebc3 04a4 	rsb	r4, r3, r4, asr #2
 8026c8e:	e7b1      	b.n	8026bf4 <_DrawArrow+0x44>
 8026c90:	f04f 0801 	mov.w	r8, #1
 8026c94:	e7bf      	b.n	8026c16 <_DrawArrow+0x66>
 8026c96:	bf00      	nop
 8026c98:	08032380 	.word	0x08032380
 8026c9c:	66666667 	.word	0x66666667
 8026ca0:	92492493 	.word	0x92492493

08026ca4 <SPINBOX_DrawSkinFlex>:
 8026ca4:	6843      	ldr	r3, [r0, #4]
 8026ca6:	b570      	push	{r4, r5, r6, lr}
 8026ca8:	4604      	mov	r4, r0
 8026caa:	2b1d      	cmp	r3, #29
 8026cac:	d812      	bhi.n	8026cd4 <SPINBOX_DrawSkinFlex+0x30>
 8026cae:	e8df f003 	tbb	[pc, r3]
 8026cb2:	1117      	.short	0x1117
 8026cb4:	540f0f11 	.word	0x540f0f11
 8026cb8:	13131111 	.word	0x13131111
 8026cbc:	11112411 	.word	0x11112411
 8026cc0:	11111111 	.word	0x11111111
 8026cc4:	11111111 	.word	0x11111111
 8026cc8:	11111111 	.word	0x11111111
 8026ccc:	17111111 	.word	0x17111111
 8026cd0:	f7ff ff6e 	bl	8026bb0 <_DrawArrow>
 8026cd4:	2000      	movs	r0, #0
 8026cd6:	bd70      	pop	{r4, r5, r6, pc}
 8026cd8:	f7ff ff0c 	bl	8026af4 <_DrawButton>
 8026cdc:	2000      	movs	r0, #0
 8026cde:	bd70      	pop	{r4, r5, r6, pc}
 8026ce0:	492f      	ldr	r1, [pc, #188]	; (8026da0 <SPINBOX_DrawSkinFlex+0xfc>)
 8026ce2:	6800      	ldr	r0, [r0, #0]
 8026ce4:	f000 f922 	bl	8026f2c <SPINBOX__ApplyProps>
 8026ce8:	6820      	ldr	r0, [r4, #0]
 8026cea:	f7f4 fa6f 	bl	801b1cc <WM_SetHasTrans>
 8026cee:	6820      	ldr	r0, [r4, #0]
 8026cf0:	492c      	ldr	r1, [pc, #176]	; (8026da4 <SPINBOX_DrawSkinFlex+0x100>)
 8026cf2:	f7ef f94b 	bl	8015f8c <WIDGET_SetEffect>
 8026cf6:	2000      	movs	r0, #0
 8026cf8:	bd70      	pop	{r4, r5, r6, pc}
 8026cfa:	4e29      	ldr	r6, [pc, #164]	; (8026da0 <SPINBOX_DrawSkinFlex+0xfc>)
 8026cfc:	2500      	movs	r5, #0
 8026cfe:	68a3      	ldr	r3, [r4, #8]
 8026d00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026d04:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026d08:	f7fd fd0c 	bl	8024724 <GUI_SetColor>
 8026d0c:	2d00      	cmp	r5, #0
 8026d0e:	d02e      	beq.n	8026d6e <SPINBOX_DrawSkinFlex+0xca>
 8026d10:	6960      	ldr	r0, [r4, #20]
 8026d12:	6921      	ldr	r1, [r4, #16]
 8026d14:	69a2      	ldr	r2, [r4, #24]
 8026d16:	4428      	add	r0, r5
 8026d18:	3102      	adds	r1, #2
 8026d1a:	3a02      	subs	r2, #2
 8026d1c:	f7fc fbd2 	bl	80234c4 <GUI_DrawHLine>
 8026d20:	69e0      	ldr	r0, [r4, #28]
 8026d22:	6921      	ldr	r1, [r4, #16]
 8026d24:	69a2      	ldr	r2, [r4, #24]
 8026d26:	1b40      	subs	r0, r0, r5
 8026d28:	3102      	adds	r1, #2
 8026d2a:	3a02      	subs	r2, #2
 8026d2c:	f7fc fbca 	bl	80234c4 <GUI_DrawHLine>
 8026d30:	6920      	ldr	r0, [r4, #16]
 8026d32:	6961      	ldr	r1, [r4, #20]
 8026d34:	69e2      	ldr	r2, [r4, #28]
 8026d36:	4428      	add	r0, r5
 8026d38:	3102      	adds	r1, #2
 8026d3a:	3a02      	subs	r2, #2
 8026d3c:	f7fc fc18 	bl	8023570 <GUI_DrawVLine>
 8026d40:	69a0      	ldr	r0, [r4, #24]
 8026d42:	6961      	ldr	r1, [r4, #20]
 8026d44:	69e2      	ldr	r2, [r4, #28]
 8026d46:	1b40      	subs	r0, r0, r5
 8026d48:	3102      	adds	r1, #2
 8026d4a:	3501      	adds	r5, #1
 8026d4c:	3a02      	subs	r2, #2
 8026d4e:	f7fc fc0f 	bl	8023570 <GUI_DrawVLine>
 8026d52:	2d02      	cmp	r5, #2
 8026d54:	d1d3      	bne.n	8026cfe <SPINBOX_DrawSkinFlex+0x5a>
 8026d56:	2000      	movs	r0, #0
 8026d58:	bd70      	pop	{r4, r5, r6, pc}
 8026d5a:	6882      	ldr	r2, [r0, #8]
 8026d5c:	4b10      	ldr	r3, [pc, #64]	; (8026da0 <SPINBOX_DrawSkinFlex+0xfc>)
 8026d5e:	6800      	ldr	r0, [r0, #0]
 8026d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026d64:	69d9      	ldr	r1, [r3, #28]
 8026d66:	f7f1 fa95 	bl	8018294 <SPINBOX__DrawBk>
 8026d6a:	2000      	movs	r0, #0
 8026d6c:	bd70      	pop	{r4, r5, r6, pc}
 8026d6e:	6920      	ldr	r0, [r4, #16]
 8026d70:	6961      	ldr	r1, [r4, #20]
 8026d72:	3001      	adds	r0, #1
 8026d74:	3101      	adds	r1, #1
 8026d76:	f7fc fbd1 	bl	802351c <GUI_DrawPixel>
 8026d7a:	6920      	ldr	r0, [r4, #16]
 8026d7c:	69e1      	ldr	r1, [r4, #28]
 8026d7e:	3001      	adds	r0, #1
 8026d80:	3901      	subs	r1, #1
 8026d82:	f7fc fbcb 	bl	802351c <GUI_DrawPixel>
 8026d86:	69a0      	ldr	r0, [r4, #24]
 8026d88:	6961      	ldr	r1, [r4, #20]
 8026d8a:	3801      	subs	r0, #1
 8026d8c:	3101      	adds	r1, #1
 8026d8e:	f7fc fbc5 	bl	802351c <GUI_DrawPixel>
 8026d92:	69a0      	ldr	r0, [r4, #24]
 8026d94:	69e1      	ldr	r1, [r4, #28]
 8026d96:	3801      	subs	r0, #1
 8026d98:	3901      	subs	r1, #1
 8026d9a:	f7fc fbbf 	bl	802351c <GUI_DrawPixel>
 8026d9e:	e7b7      	b.n	8026d10 <SPINBOX_DrawSkinFlex+0x6c>
 8026da0:	08032380 	.word	0x08032380
 8026da4:	08032e68 	.word	0x08032e68

08026da8 <_Create>:
 8026da8:	b570      	push	{r4, r5, r6, lr}
 8026daa:	b08a      	sub	sp, #40	; 0x28
 8026dac:	2400      	movs	r4, #0
 8026dae:	4606      	mov	r6, r0
 8026db0:	9401      	str	r4, [sp, #4]
 8026db2:	9402      	str	r4, [sp, #8]
 8026db4:	9403      	str	r4, [sp, #12]
 8026db6:	9404      	str	r4, [sp, #16]
 8026db8:	9405      	str	r4, [sp, #20]
 8026dba:	9406      	str	r4, [sp, #24]
 8026dbc:	9407      	str	r4, [sp, #28]
 8026dbe:	9408      	str	r4, [sp, #32]
 8026dc0:	9409      	str	r4, [sp, #36]	; 0x24
 8026dc2:	f7fe fd93 	bl	80258ec <GUI_ALLOC_LockH>
 8026dc6:	ab0a      	add	r3, sp, #40	; 0x28
 8026dc8:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8026dcc:	f843 0d28 	str.w	r0, [r3, #-40]!
 8026dd0:	4668      	mov	r0, sp
 8026dd2:	6895      	ldr	r5, [r2, #8]
 8026dd4:	f7fe fd9c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026dd8:	a80a      	add	r0, sp, #40	; 0x28
 8026dda:	9402      	str	r4, [sp, #8]
 8026ddc:	f840 6d24 	str.w	r6, [r0, #-36]!
 8026de0:	682b      	ldr	r3, [r5, #0]
 8026de2:	4798      	blx	r3
 8026de4:	b00a      	add	sp, #40	; 0x28
 8026de6:	bd70      	pop	{r4, r5, r6, pc}

08026de8 <_Paint>:
 8026de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026dec:	b08c      	sub	sp, #48	; 0x30
 8026dee:	4604      	mov	r4, r0
 8026df0:	f7fe fd7c 	bl	80258ec <GUI_ALLOC_LockH>
 8026df4:	4603      	mov	r3, r0
 8026df6:	a80c      	add	r0, sp, #48	; 0x30
 8026df8:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8026dfc:	f840 3d2c 	str.w	r3, [r0, #-44]!
 8026e00:	f893 70a3 	ldrb.w	r7, [r3, #163]	; 0xa3
 8026e04:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8026e08:	f893 608c 	ldrb.w	r6, [r3, #140]	; 0x8c
 8026e0c:	f8b3 808a 	ldrh.w	r8, [r3, #138]	; 0x8a
 8026e10:	f7fe fd7e 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026e14:	4620      	mov	r0, r4
 8026e16:	9402      	str	r4, [sp, #8]
 8026e18:	f7f4 f80a 	bl	801ae30 <WM__IsEnabled>
 8026e1c:	2800      	cmp	r0, #0
 8026e1e:	d156      	bne.n	8026ece <_Paint+0xe6>
 8026e20:	2303      	movs	r3, #3
 8026e22:	9304      	str	r3, [sp, #16]
 8026e24:	4620      	mov	r0, r4
 8026e26:	f7f5 fdb7 	bl	801c998 <WM_GetWindowSizeX>
 8026e2a:	4681      	mov	r9, r0
 8026e2c:	4620      	mov	r0, r4
 8026e2e:	f7f5 fdd1 	bl	801c9d4 <WM_GetWindowSizeY>
 8026e32:	2300      	movs	r3, #0
 8026e34:	3801      	subs	r0, #1
 8026e36:	f109 31ff 	add.w	r1, r9, #4294967295
 8026e3a:	220b      	movs	r2, #11
 8026e3c:	9009      	str	r0, [sp, #36]	; 0x24
 8026e3e:	9108      	str	r1, [sp, #32]
 8026e40:	9306      	str	r3, [sp, #24]
 8026e42:	9307      	str	r3, [sp, #28]
 8026e44:	9203      	str	r2, [sp, #12]
 8026e46:	a802      	add	r0, sp, #8
 8026e48:	47a8      	blx	r5
 8026e4a:	2e01      	cmp	r6, #1
 8026e4c:	d065      	beq.n	8026f1a <_Paint+0x132>
 8026e4e:	d368      	bcc.n	8026f22 <_Paint+0x13a>
 8026e50:	2e02      	cmp	r6, #2
 8026e52:	d034      	beq.n	8026ebe <_Paint+0xd6>
 8026e54:	2305      	movs	r3, #5
 8026e56:	9303      	str	r3, [sp, #12]
 8026e58:	a802      	add	r0, sp, #8
 8026e5a:	47a8      	blx	r5
 8026e5c:	9b04      	ldr	r3, [sp, #16]
 8026e5e:	2b03      	cmp	r3, #3
 8026e60:	d046      	beq.n	8026ef0 <_Paint+0x108>
 8026e62:	07fa      	lsls	r2, r7, #31
 8026e64:	d501      	bpl.n	8026e6a <_Paint+0x82>
 8026e66:	2300      	movs	r3, #0
 8026e68:	9304      	str	r3, [sp, #16]
 8026e6a:	ab0c      	add	r3, sp, #48	; 0x30
 8026e6c:	2600      	movs	r6, #0
 8026e6e:	f803 6d30 	strb.w	r6, [r3, #-48]!
 8026e72:	a902      	add	r1, sp, #8
 8026e74:	4620      	mov	r0, r4
 8026e76:	930a      	str	r3, [sp, #40]	; 0x28
 8026e78:	f7f2 f840 	bl	8018efc <SPINBOX__GetButtonRectEx>
 8026e7c:	2309      	movs	r3, #9
 8026e7e:	9303      	str	r3, [sp, #12]
 8026e80:	a802      	add	r0, sp, #8
 8026e82:	47a8      	blx	r5
 8026e84:	2304      	movs	r3, #4
 8026e86:	9303      	str	r3, [sp, #12]
 8026e88:	a802      	add	r0, sp, #8
 8026e8a:	47a8      	blx	r5
 8026e8c:	2301      	movs	r3, #1
 8026e8e:	f88d 3000 	strb.w	r3, [sp]
 8026e92:	07bb      	lsls	r3, r7, #30
 8026e94:	d411      	bmi.n	8026eba <_Paint+0xd2>
 8026e96:	2302      	movs	r3, #2
 8026e98:	9304      	str	r3, [sp, #16]
 8026e9a:	a902      	add	r1, sp, #8
 8026e9c:	4620      	mov	r0, r4
 8026e9e:	f7f2 f82d 	bl	8018efc <SPINBOX__GetButtonRectEx>
 8026ea2:	2308      	movs	r3, #8
 8026ea4:	9303      	str	r3, [sp, #12]
 8026ea6:	eb0d 0003 	add.w	r0, sp, r3
 8026eaa:	47a8      	blx	r5
 8026eac:	2303      	movs	r3, #3
 8026eae:	a802      	add	r0, sp, #8
 8026eb0:	9303      	str	r3, [sp, #12]
 8026eb2:	47a8      	blx	r5
 8026eb4:	b00c      	add	sp, #48	; 0x30
 8026eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026eba:	9604      	str	r6, [sp, #16]
 8026ebc:	e7ed      	b.n	8026e9a <_Paint+0xb2>
 8026ebe:	9a08      	ldr	r2, [sp, #32]
 8026ec0:	9b06      	ldr	r3, [sp, #24]
 8026ec2:	ebc8 0202 	rsb	r2, r8, r2
 8026ec6:	4443      	add	r3, r8
 8026ec8:	9208      	str	r2, [sp, #32]
 8026eca:	9306      	str	r3, [sp, #24]
 8026ecc:	e7c2      	b.n	8026e54 <_Paint+0x6c>
 8026ece:	4620      	mov	r0, r4
 8026ed0:	f7f5 fa60 	bl	801c394 <WM_HasFocus>
 8026ed4:	4682      	mov	sl, r0
 8026ed6:	4648      	mov	r0, r9
 8026ed8:	f7f5 fa5c 	bl	801c394 <WM_HasFocus>
 8026edc:	f1ba 0f00 	cmp.w	sl, #0
 8026ee0:	d103      	bne.n	8026eea <_Paint+0x102>
 8026ee2:	b910      	cbnz	r0, 8026eea <_Paint+0x102>
 8026ee4:	2302      	movs	r3, #2
 8026ee6:	9304      	str	r3, [sp, #16]
 8026ee8:	e79c      	b.n	8026e24 <_Paint+0x3c>
 8026eea:	2301      	movs	r3, #1
 8026eec:	9304      	str	r3, [sp, #16]
 8026eee:	e799      	b.n	8026e24 <_Paint+0x3c>
 8026ef0:	ab0c      	add	r3, sp, #48	; 0x30
 8026ef2:	2200      	movs	r2, #0
 8026ef4:	f803 2d30 	strb.w	r2, [r3, #-48]!
 8026ef8:	a902      	add	r1, sp, #8
 8026efa:	4620      	mov	r0, r4
 8026efc:	930a      	str	r3, [sp, #40]	; 0x28
 8026efe:	f7f1 fffd 	bl	8018efc <SPINBOX__GetButtonRectEx>
 8026f02:	2309      	movs	r3, #9
 8026f04:	9303      	str	r3, [sp, #12]
 8026f06:	a802      	add	r0, sp, #8
 8026f08:	47a8      	blx	r5
 8026f0a:	2304      	movs	r3, #4
 8026f0c:	9303      	str	r3, [sp, #12]
 8026f0e:	a802      	add	r0, sp, #8
 8026f10:	47a8      	blx	r5
 8026f12:	2301      	movs	r3, #1
 8026f14:	f88d 3000 	strb.w	r3, [sp]
 8026f18:	e7bf      	b.n	8026e9a <_Paint+0xb2>
 8026f1a:	9b06      	ldr	r3, [sp, #24]
 8026f1c:	4443      	add	r3, r8
 8026f1e:	9306      	str	r3, [sp, #24]
 8026f20:	e798      	b.n	8026e54 <_Paint+0x6c>
 8026f22:	9b08      	ldr	r3, [sp, #32]
 8026f24:	ebc8 0303 	rsb	r3, r8, r3
 8026f28:	9308      	str	r3, [sp, #32]
 8026f2a:	e793      	b.n	8026e54 <_Paint+0x6c>

08026f2c <SPINBOX__ApplyProps>:
 8026f2c:	b530      	push	{r4, r5, lr}
 8026f2e:	b083      	sub	sp, #12
 8026f30:	460d      	mov	r5, r1
 8026f32:	f7fe fcdb 	bl	80258ec <GUI_ALLOC_LockH>
 8026f36:	ab02      	add	r3, sp, #8
 8026f38:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8026f3c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8026f40:	4618      	mov	r0, r3
 8026f42:	f7fe fce5 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026f46:	68eb      	ldr	r3, [r5, #12]
 8026f48:	4620      	mov	r0, r4
 8026f4a:	69da      	ldr	r2, [r3, #28]
 8026f4c:	2100      	movs	r1, #0
 8026f4e:	f7f3 fad3 	bl	801a4f8 <EDIT_SetBkColor>
 8026f52:	68eb      	ldr	r3, [r5, #12]
 8026f54:	4620      	mov	r0, r4
 8026f56:	6a1a      	ldr	r2, [r3, #32]
 8026f58:	2100      	movs	r1, #0
 8026f5a:	f7f3 faed 	bl	801a538 <EDIT_SetTextColor>
 8026f5e:	68ab      	ldr	r3, [r5, #8]
 8026f60:	4620      	mov	r0, r4
 8026f62:	69da      	ldr	r2, [r3, #28]
 8026f64:	2101      	movs	r1, #1
 8026f66:	f7f3 fac7 	bl	801a4f8 <EDIT_SetBkColor>
 8026f6a:	68ab      	ldr	r3, [r5, #8]
 8026f6c:	4620      	mov	r0, r4
 8026f6e:	6a1a      	ldr	r2, [r3, #32]
 8026f70:	2101      	movs	r1, #1
 8026f72:	f7f3 fae1 	bl	801a538 <EDIT_SetTextColor>
 8026f76:	b003      	add	sp, #12
 8026f78:	bd30      	pop	{r4, r5, pc}
 8026f7a:	bf00      	nop

08026f7c <SCROLLBAR_Callback>:
 8026f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f80:	6845      	ldr	r5, [r0, #4]
 8026f82:	b08f      	sub	sp, #60	; 0x3c
 8026f84:	4604      	mov	r4, r0
 8026f86:	4601      	mov	r1, r0
 8026f88:	4628      	mov	r0, r5
 8026f8a:	f7ee fe81 	bl	8015c90 <WIDGET_HandleActive>
 8026f8e:	b328      	cbz	r0, 8026fdc <SCROLLBAR_Callback+0x60>
 8026f90:	6823      	ldr	r3, [r4, #0]
 8026f92:	2b23      	cmp	r3, #35	; 0x23
 8026f94:	f000 8081 	beq.w	802709a <SCROLLBAR_Callback+0x11e>
 8026f98:	dc12      	bgt.n	8026fc0 <SCROLLBAR_Callback+0x44>
 8026f9a:	2b0e      	cmp	r3, #14
 8026f9c:	d021      	beq.n	8026fe2 <SCROLLBAR_Callback+0x66>
 8026f9e:	2b0f      	cmp	r3, #15
 8026fa0:	f000 808c 	beq.w	80270bc <SCROLLBAR_Callback+0x140>
 8026fa4:	2b0b      	cmp	r3, #11
 8026fa6:	d116      	bne.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8026fa8:	4628      	mov	r0, r5
 8026faa:	f7f5 f939 	bl	801c220 <WM_GetScrollPartner>
 8026fae:	f7f7 f927 	bl	801e200 <WM_InvalidateWindow>
 8026fb2:	4628      	mov	r0, r5
 8026fb4:	f7f5 f896 	bl	801c0e4 <WM_GetParent>
 8026fb8:	2125      	movs	r1, #37	; 0x25
 8026fba:	f7f5 fa77 	bl	801c4ac <WM_SendMessageNoPara>
 8026fbe:	e00a      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8026fc0:	f240 1213 	movw	r2, #275	; 0x113
 8026fc4:	4293      	cmp	r3, r2
 8026fc6:	d047      	beq.n	8027058 <SCROLLBAR_Callback+0xdc>
 8026fc8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8026fcc:	f000 80a2 	beq.w	8027114 <SCROLLBAR_Callback+0x198>
 8026fd0:	2b24      	cmp	r3, #36	; 0x24
 8026fd2:	f000 8081 	beq.w	80270d8 <SCROLLBAR_Callback+0x15c>
 8026fd6:	4620      	mov	r0, r4
 8026fd8:	f7f7 fe78 	bl	801eccc <WM_DefaultProc>
 8026fdc:	b00f      	add	sp, #60	; 0x3c
 8026fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fe2:	4628      	mov	r0, r5
 8026fe4:	f7fe fc82 	bl	80258ec <GUI_ALLOC_LockH>
 8026fe8:	ab0e      	add	r3, sp, #56	; 0x38
 8026fea:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8026fec:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8026ff0:	4618      	mov	r0, r3
 8026ff2:	f7fe fc8d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8026ff6:	68e3      	ldr	r3, [r4, #12]
 8026ff8:	685a      	ldr	r2, [r3, #4]
 8026ffa:	681b      	ldr	r3, [r3, #0]
 8026ffc:	2a00      	cmp	r2, #0
 8026ffe:	ddea      	ble.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027000:	3b10      	subs	r3, #16
 8027002:	2b12      	cmp	r3, #18
 8027004:	d8e7      	bhi.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027006:	a201      	add	r2, pc, #4	; (adr r2, 802700c <SCROLLBAR_Callback+0x90>)
 8027008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802700c:	0802725f 	.word	0x0802725f
 8027010:	0802725f 	.word	0x0802725f
 8027014:	08027315 	.word	0x08027315
 8027018:	08027315 	.word	0x08027315
 802701c:	08026fd7 	.word	0x08026fd7
 8027020:	08026fd7 	.word	0x08026fd7
 8027024:	08026fd7 	.word	0x08026fd7
 8027028:	08026fd7 	.word	0x08026fd7
 802702c:	08026fd7 	.word	0x08026fd7
 8027030:	08026fd7 	.word	0x08026fd7
 8027034:	08026fd7 	.word	0x08026fd7
 8027038:	08026fd7 	.word	0x08026fd7
 802703c:	08026fd7 	.word	0x08026fd7
 8027040:	08026fd7 	.word	0x08026fd7
 8027044:	08026fd7 	.word	0x08026fd7
 8027048:	08026fd7 	.word	0x08026fd7
 802704c:	08026fd7 	.word	0x08026fd7
 8027050:	080272c7 	.word	0x080272c7
 8027054:	08027359 	.word	0x08027359
 8027058:	4628      	mov	r0, r5
 802705a:	f7fe fc47 	bl	80258ec <GUI_ALLOC_LockH>
 802705e:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8027060:	9003      	str	r0, [sp, #12]
 8027062:	2e00      	cmp	r6, #0
 8027064:	f000 80c8 	beq.w	80271f8 <SCROLLBAR_Callback+0x27c>
 8027068:	2d00      	cmp	r5, #0
 802706a:	f040 81bb 	bne.w	80273e4 <SCROLLBAR_Callback+0x468>
 802706e:	2e00      	cmp	r6, #0
 8027070:	f340 80c2 	ble.w	80271f8 <SCROLLBAR_Callback+0x27c>
 8027074:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8027076:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8027078:	4293      	cmp	r3, r2
 802707a:	bfb4      	ite	lt
 802707c:	2300      	movlt	r3, #0
 802707e:	2301      	movge	r3, #1
 8027080:	dd00      	ble.n	8027084 <SCROLLBAR_Callback+0x108>
 8027082:	6502      	str	r2, [r0, #80]	; 0x50
 8027084:	2b00      	cmp	r3, #0
 8027086:	f040 817d 	bne.w	8027384 <SCROLLBAR_Callback+0x408>
 802708a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802708c:	2132      	movs	r1, #50	; 0x32
 802708e:	f7f4 f87f 	bl	801b190 <WM_RestartTimer>
 8027092:	a803      	add	r0, sp, #12
 8027094:	f7fe fc3c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027098:	e79d      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 802709a:	4628      	mov	r0, r5
 802709c:	f7fe fc26 	bl	80258ec <GUI_ALLOC_LockH>
 80270a0:	9005      	str	r0, [sp, #20]
 80270a2:	2800      	cmp	r0, #0
 80270a4:	d097      	beq.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 80270a6:	68e3      	ldr	r3, [r4, #12]
 80270a8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80270aa:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80270ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80270ae:	605a      	str	r2, [r3, #4]
 80270b0:	601d      	str	r5, [r3, #0]
 80270b2:	6099      	str	r1, [r3, #8]
 80270b4:	a805      	add	r0, sp, #20
 80270b6:	f7fe fc2b 	bl	8025910 <GUI_ALLOC_UnlockH>
 80270ba:	e78c      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 80270bc:	4628      	mov	r0, r5
 80270be:	f7fe fc15 	bl	80258ec <GUI_ALLOC_LockH>
 80270c2:	9005      	str	r0, [sp, #20]
 80270c4:	2800      	cmp	r0, #0
 80270c6:	d089      	beq.n	8026fdc <SCROLLBAR_Callback+0x60>
 80270c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80270ca:	a805      	add	r0, sp, #20
 80270cc:	681c      	ldr	r4, [r3, #0]
 80270ce:	f7fe fc1f 	bl	8025910 <GUI_ALLOC_UnlockH>
 80270d2:	4628      	mov	r0, r5
 80270d4:	47a0      	blx	r4
 80270d6:	e781      	b.n	8026fdc <SCROLLBAR_Callback+0x60>
 80270d8:	4628      	mov	r0, r5
 80270da:	68e6      	ldr	r6, [r4, #12]
 80270dc:	f7fe fc06 	bl	80258ec <GUI_ALLOC_LockH>
 80270e0:	6833      	ldr	r3, [r6, #0]
 80270e2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80270e4:	9005      	str	r0, [sp, #20]
 80270e6:	4293      	cmp	r3, r2
 80270e8:	f040 80b6 	bne.w	8027258 <SCROLLBAR_Callback+0x2dc>
 80270ec:	6d47      	ldr	r7, [r0, #84]	; 0x54
 80270ee:	68b1      	ldr	r1, [r6, #8]
 80270f0:	6872      	ldr	r2, [r6, #4]
 80270f2:	428f      	cmp	r7, r1
 80270f4:	f000 8156 	beq.w	80273a4 <SCROLLBAR_Callback+0x428>
 80270f8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80270fa:	6541      	str	r1, [r0, #84]	; 0x54
 80270fc:	6502      	str	r2, [r0, #80]	; 0x50
 80270fe:	4628      	mov	r0, r5
 8027100:	f7f7 f87e 	bl	801e200 <WM_InvalidateWindow>
 8027104:	a805      	add	r0, sp, #20
 8027106:	f7fe fc03 	bl	8025910 <GUI_ALLOC_UnlockH>
 802710a:	4628      	mov	r0, r5
 802710c:	2105      	movs	r1, #5
 802710e:	f7f5 f97b 	bl	801c408 <WM_NotifyParent>
 8027112:	e760      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027114:	68e6      	ldr	r6, [r4, #12]
 8027116:	2e00      	cmp	r6, #0
 8027118:	f43f af5d 	beq.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 802711c:	7a37      	ldrb	r7, [r6, #8]
 802711e:	4628      	mov	r0, r5
 8027120:	2f00      	cmp	r7, #0
 8027122:	d072      	beq.n	802720a <SCROLLBAR_Callback+0x28e>
 8027124:	f7fe fbe2 	bl	80258ec <GUI_ALLOC_LockH>
 8027128:	9003      	str	r0, [sp, #12]
 802712a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 802712c:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 8027130:	a905      	add	r1, sp, #20
 8027132:	4628      	mov	r0, r5
 8027134:	4798      	blx	r3
 8027136:	9b03      	ldr	r3, [sp, #12]
 8027138:	6831      	ldr	r1, [r6, #0]
 802713a:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 802713e:	6870      	ldr	r0, [r6, #4]
 8027140:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8027142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8027144:	f018 0f08 	tst.w	r8, #8
 8027148:	bf14      	ite	ne
 802714a:	e886 0003 	stmiane.w	r6, {r0, r1}
 802714e:	460e      	moveq	r6, r1
 8027150:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8027152:	bf18      	it	ne
 8027154:	4606      	movne	r6, r0
 8027156:	2903      	cmp	r1, #3
 8027158:	ebc7 0b02 	rsb	fp, r7, r2
 802715c:	f000 81c0 	beq.w	80274e0 <SCROLLBAR_Callback+0x564>
 8027160:	9806      	ldr	r0, [sp, #24]
 8027162:	42b0      	cmp	r0, r6
 8027164:	f2c0 8137 	blt.w	80273d6 <SCROLLBAR_Callback+0x45a>
 8027168:	2902      	cmp	r1, #2
 802716a:	f000 81f3 	beq.w	8027554 <SCROLLBAR_Callback+0x5d8>
 802716e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8027170:	2a00      	cmp	r2, #0
 8027172:	f040 8207 	bne.w	8027584 <SCROLLBAR_Callback+0x608>
 8027176:	2202      	movs	r2, #2
 8027178:	659a      	str	r2, [r3, #88]	; 0x58
 802717a:	9806      	ldr	r0, [sp, #24]
 802717c:	f109 39ff 	add.w	r9, r9, #4294967295
 8027180:	f04f 37ff 	mov.w	r7, #4294967295
 8027184:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027186:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
 802718a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802718c:	2900      	cmp	r1, #0
 802718e:	f040 8181 	bne.w	8027494 <SCROLLBAR_Callback+0x518>
 8027192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8027194:	2a01      	cmp	r2, #1
 8027196:	bf04      	itt	eq
 8027198:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 802719a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 802719e:	6619      	str	r1, [r3, #96]	; 0x60
 80271a0:	a803      	add	r0, sp, #12
 80271a2:	f7fe fbb5 	bl	8025910 <GUI_ALLOC_UnlockH>
 80271a6:	2f00      	cmp	r7, #0
 80271a8:	f000 8102 	beq.w	80273b0 <SCROLLBAR_Callback+0x434>
 80271ac:	f1ba 0f00 	cmp.w	sl, #0
 80271b0:	f000 81bb 	beq.w	802752a <SCROLLBAR_Callback+0x5ae>
 80271b4:	4628      	mov	r0, r5
 80271b6:	2101      	movs	r1, #1
 80271b8:	f7f4 f928 	bl	801b40c <WM_SetCapture>
 80271bc:	2d00      	cmp	r5, #0
 80271be:	f040 8145 	bne.w	802744c <SCROLLBAR_Callback+0x4d0>
 80271c2:	f418 7f80 	tst.w	r8, #256	; 0x100
 80271c6:	f47f af06 	bne.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 80271ca:	4628      	mov	r0, r5
 80271cc:	f7fe fb8e 	bl	80258ec <GUI_ALLOC_LockH>
 80271d0:	ab0e      	add	r3, sp, #56	; 0x38
 80271d2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80271d4:	f843 0d28 	str.w	r0, [r3, #-40]!
 80271d8:	4618      	mov	r0, r3
 80271da:	f7fe fb99 	bl	8025910 <GUI_ALLOC_UnlockH>
 80271de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80271e2:	4628      	mov	r0, r5
 80271e4:	f7ee fce8 	bl	8015bb8 <WIDGET_OrState>
 80271e8:	07b1      	lsls	r1, r6, #30
 80271ea:	f57f aef4 	bpl.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 80271ee:	4628      	mov	r0, r5
 80271f0:	2101      	movs	r1, #1
 80271f2:	f7f5 f909 	bl	801c408 <WM_NotifyParent>
 80271f6:	e6ee      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 80271f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80271fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80271fc:	4293      	cmp	r3, r2
 80271fe:	bfcc      	ite	gt
 8027200:	2300      	movgt	r3, #0
 8027202:	2301      	movle	r3, #1
 8027204:	f6bf af3e 	bge.w	8027084 <SCROLLBAR_Callback+0x108>
 8027208:	e73b      	b.n	8027082 <SCROLLBAR_Callback+0x106>
 802720a:	f7fe fb6f 	bl	80258ec <GUI_ALLOC_LockH>
 802720e:	ab0e      	add	r3, sp, #56	; 0x38
 8027210:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8027212:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8027216:	4618      	mov	r0, r3
 8027218:	f7fe fb7a 	bl	8025910 <GUI_ALLOC_UnlockH>
 802721c:	05f2      	lsls	r2, r6, #23
 802721e:	f57f aeda 	bpl.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027222:	4628      	mov	r0, r5
 8027224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8027228:	f7ee fce4 	bl	8015bf4 <WIDGET_AndState>
 802722c:	4628      	mov	r0, r5
 802722e:	f7fe fb5d 	bl	80258ec <GUI_ALLOC_LockH>
 8027232:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8027234:	9004      	str	r0, [sp, #16]
 8027236:	2b00      	cmp	r3, #0
 8027238:	f040 818f 	bne.w	802755a <SCROLLBAR_Callback+0x5de>
 802723c:	2300      	movs	r3, #0
 802723e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8027240:	6583      	str	r3, [r0, #88]	; 0x58
 8027242:	a804      	add	r0, sp, #16
 8027244:	f7fe fb64 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027248:	07b3      	lsls	r3, r6, #30
 802724a:	f57f aec4 	bpl.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 802724e:	4628      	mov	r0, r5
 8027250:	2102      	movs	r1, #2
 8027252:	f7f5 f8d9 	bl	801c408 <WM_NotifyParent>
 8027256:	e6be      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027258:	68b1      	ldr	r1, [r6, #8]
 802725a:	6872      	ldr	r2, [r6, #4]
 802725c:	e74c      	b.n	80270f8 <SCROLLBAR_Callback+0x17c>
 802725e:	2d00      	cmp	r5, #0
 8027260:	f43f aeb9 	beq.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 8027264:	f7fb ffc2 	bl	80231ec <GUI_Lock>
 8027268:	4628      	mov	r0, r5
 802726a:	f7fe fb3f 	bl	80258ec <GUI_ALLOC_LockH>
 802726e:	ab0e      	add	r3, sp, #56	; 0x38
 8027270:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8027272:	f843 0d28 	str.w	r0, [r3, #-40]!
 8027276:	4618      	mov	r0, r3
 8027278:	f7fe fb4a 	bl	8025910 <GUI_ALLOC_UnlockH>
 802727c:	f7fb ffb6 	bl	80231ec <GUI_Lock>
 8027280:	4628      	mov	r0, r5
 8027282:	f7fe fb33 	bl	80258ec <GUI_ALLOC_LockH>
 8027286:	1e73      	subs	r3, r6, #1
 8027288:	2b00      	cmp	r3, #0
 802728a:	9005      	str	r0, [sp, #20]
 802728c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 802728e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8027290:	f2c0 8191 	blt.w	80275b6 <SCROLLBAR_Callback+0x63a>
 8027294:	1a8a      	subs	r2, r1, r2
 8027296:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802729a:	429a      	cmp	r2, r3
 802729c:	da5a      	bge.n	8027354 <SCROLLBAR_Callback+0x3d8>
 802729e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80272a0:	4293      	cmp	r3, r2
 80272a2:	f000 81a9 	beq.w	80275f8 <SCROLLBAR_Callback+0x67c>
 80272a6:	6502      	str	r2, [r0, #80]	; 0x50
 80272a8:	4628      	mov	r0, r5
 80272aa:	f7f6 ffa9 	bl	801e200 <WM_InvalidateWindow>
 80272ae:	a805      	add	r0, sp, #20
 80272b0:	f7fe fb2e 	bl	8025910 <GUI_ALLOC_UnlockH>
 80272b4:	4628      	mov	r0, r5
 80272b6:	2105      	movs	r1, #5
 80272b8:	f7f5 f8a6 	bl	801c408 <WM_NotifyParent>
 80272bc:	f7fb ff8c 	bl	80231d8 <GUI_Unlock>
 80272c0:	f7fb ff8a 	bl	80231d8 <GUI_Unlock>
 80272c4:	e687      	b.n	8026fd6 <SCROLLBAR_Callback+0x5a>
 80272c6:	2d00      	cmp	r5, #0
 80272c8:	f43f ae85 	beq.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 80272cc:	f7fb ff8e 	bl	80231ec <GUI_Lock>
 80272d0:	4628      	mov	r0, r5
 80272d2:	f7fe fb0b 	bl	80258ec <GUI_ALLOC_LockH>
 80272d6:	ab0e      	add	r3, sp, #56	; 0x38
 80272d8:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80272da:	f843 0d28 	str.w	r0, [r3, #-40]!
 80272de:	4618      	mov	r0, r3
 80272e0:	f7fe fb16 	bl	8025910 <GUI_ALLOC_UnlockH>
 80272e4:	f7fb ff82 	bl	80231ec <GUI_Lock>
 80272e8:	4628      	mov	r0, r5
 80272ea:	f7fe faff 	bl	80258ec <GUI_ALLOC_LockH>
 80272ee:	443e      	add	r6, r7
 80272f0:	2e00      	cmp	r6, #0
 80272f2:	9005      	str	r0, [sp, #20]
 80272f4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80272f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80272f8:	f2c0 815f 	blt.w	80275ba <SCROLLBAR_Callback+0x63e>
 80272fc:	1ad3      	subs	r3, r2, r3
 80272fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027302:	429e      	cmp	r6, r3
 8027304:	f340 815a 	ble.w	80275bc <SCROLLBAR_Callback+0x640>
 8027308:	6d02      	ldr	r2, [r0, #80]	; 0x50
 802730a:	429a      	cmp	r2, r3
 802730c:	f000 8174 	beq.w	80275f8 <SCROLLBAR_Callback+0x67c>
 8027310:	6503      	str	r3, [r0, #80]	; 0x50
 8027312:	e7c9      	b.n	80272a8 <SCROLLBAR_Callback+0x32c>
 8027314:	2d00      	cmp	r5, #0
 8027316:	f43f ae5e 	beq.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 802731a:	f7fb ff67 	bl	80231ec <GUI_Lock>
 802731e:	4628      	mov	r0, r5
 8027320:	f7fe fae4 	bl	80258ec <GUI_ALLOC_LockH>
 8027324:	ab0e      	add	r3, sp, #56	; 0x38
 8027326:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8027328:	f843 0d28 	str.w	r0, [r3, #-40]!
 802732c:	4618      	mov	r0, r3
 802732e:	f7fe faef 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027332:	f7fb ff5b 	bl	80231ec <GUI_Lock>
 8027336:	4628      	mov	r0, r5
 8027338:	f7fe fad8 	bl	80258ec <GUI_ALLOC_LockH>
 802733c:	1c73      	adds	r3, r6, #1
 802733e:	2b00      	cmp	r3, #0
 8027340:	9005      	str	r0, [sp, #20]
 8027342:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8027344:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8027346:	f2c0 8136 	blt.w	80275b6 <SCROLLBAR_Callback+0x63a>
 802734a:	1a8a      	subs	r2, r1, r2
 802734c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8027350:	4293      	cmp	r3, r2
 8027352:	dca4      	bgt.n	802729e <SCROLLBAR_Callback+0x322>
 8027354:	461a      	mov	r2, r3
 8027356:	e7a2      	b.n	802729e <SCROLLBAR_Callback+0x322>
 8027358:	2d00      	cmp	r5, #0
 802735a:	f43f ae3c 	beq.w	8026fd6 <SCROLLBAR_Callback+0x5a>
 802735e:	f7fb ff45 	bl	80231ec <GUI_Lock>
 8027362:	4628      	mov	r0, r5
 8027364:	f7fe fac2 	bl	80258ec <GUI_ALLOC_LockH>
 8027368:	ab0e      	add	r3, sp, #56	; 0x38
 802736a:	6d07      	ldr	r7, [r0, #80]	; 0x50
 802736c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8027370:	4618      	mov	r0, r3
 8027372:	f7fe facd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027376:	f7fb ff39 	bl	80231ec <GUI_Lock>
 802737a:	4628      	mov	r0, r5
 802737c:	f7fe fab6 	bl	80258ec <GUI_ALLOC_LockH>
 8027380:	1bbe      	subs	r6, r7, r6
 8027382:	e7b5      	b.n	80272f0 <SCROLLBAR_Callback+0x374>
 8027384:	4628      	mov	r0, r5
 8027386:	f7fe fab1 	bl	80258ec <GUI_ALLOC_LockH>
 802738a:	9005      	str	r0, [sp, #20]
 802738c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802738e:	f7f3 fea5 	bl	801b0dc <WM_DeleteTimer>
 8027392:	a80e      	add	r0, sp, #56	; 0x38
 8027394:	2200      	movs	r2, #0
 8027396:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 802739a:	665a      	str	r2, [r3, #100]	; 0x64
 802739c:	65da      	str	r2, [r3, #92]	; 0x5c
 802739e:	f7fe fab7 	bl	8025910 <GUI_ALLOC_UnlockH>
 80273a2:	e676      	b.n	8027092 <SCROLLBAR_Callback+0x116>
 80273a4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80273a6:	4291      	cmp	r1, r2
 80273a8:	f43f ae84 	beq.w	80270b4 <SCROLLBAR_Callback+0x138>
 80273ac:	4639      	mov	r1, r7
 80273ae:	e6a3      	b.n	80270f8 <SCROLLBAR_Callback+0x17c>
 80273b0:	f1ba 0f00 	cmp.w	sl, #0
 80273b4:	f43f aefe 	beq.w	80271b4 <SCROLLBAR_Callback+0x238>
 80273b8:	4628      	mov	r0, r5
 80273ba:	f7fe fa97 	bl	80258ec <GUI_ALLOC_LockH>
 80273be:	9004      	str	r0, [sp, #16]
 80273c0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80273c2:	f7f3 fe8b 	bl	801b0dc <WM_DeleteTimer>
 80273c6:	a80e      	add	r0, sp, #56	; 0x38
 80273c8:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 80273cc:	665f      	str	r7, [r3, #100]	; 0x64
 80273ce:	65df      	str	r7, [r3, #92]	; 0x5c
 80273d0:	f7fe fa9e 	bl	8025910 <GUI_ALLOC_UnlockH>
 80273d4:	e6ee      	b.n	80271b4 <SCROLLBAR_Callback+0x238>
 80273d6:	9a07      	ldr	r2, [sp, #28]
 80273d8:	42b2      	cmp	r2, r6
 80273da:	dd69      	ble.n	80274b0 <SCROLLBAR_Callback+0x534>
 80273dc:	ebc7 0909 	rsb	r9, r7, r9
 80273e0:	427f      	negs	r7, r7
 80273e2:	e6cf      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 80273e4:	f7fb ff02 	bl	80231ec <GUI_Lock>
 80273e8:	4628      	mov	r0, r5
 80273ea:	f7fe fa7f 	bl	80258ec <GUI_ALLOC_LockH>
 80273ee:	ab0e      	add	r3, sp, #56	; 0x38
 80273f0:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80273f2:	f843 0d28 	str.w	r0, [r3, #-40]!
 80273f6:	4618      	mov	r0, r3
 80273f8:	f7fe fa8a 	bl	8025910 <GUI_ALLOC_UnlockH>
 80273fc:	f7fb fef6 	bl	80231ec <GUI_Lock>
 8027400:	4628      	mov	r0, r5
 8027402:	f7fe fa73 	bl	80258ec <GUI_ALLOC_LockH>
 8027406:	443e      	add	r6, r7
 8027408:	2e00      	cmp	r6, #0
 802740a:	9005      	str	r0, [sp, #20]
 802740c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 802740e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8027410:	f2c0 80c9 	blt.w	80275a6 <SCROLLBAR_Callback+0x62a>
 8027414:	1ad3      	subs	r3, r2, r3
 8027416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802741a:	42b3      	cmp	r3, r6
 802741c:	bfa8      	it	ge
 802741e:	4633      	movge	r3, r6
 8027420:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8027422:	429a      	cmp	r2, r3
 8027424:	f000 80ee 	beq.w	8027604 <SCROLLBAR_Callback+0x688>
 8027428:	6503      	str	r3, [r0, #80]	; 0x50
 802742a:	4628      	mov	r0, r5
 802742c:	f7f6 fee8 	bl	801e200 <WM_InvalidateWindow>
 8027430:	a805      	add	r0, sp, #20
 8027432:	f7fe fa6d 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027436:	4628      	mov	r0, r5
 8027438:	2105      	movs	r1, #5
 802743a:	f7f4 ffe5 	bl	801c408 <WM_NotifyParent>
 802743e:	f7fb fecb 	bl	80231d8 <GUI_Unlock>
 8027442:	f7fb fec9 	bl	80231d8 <GUI_Unlock>
 8027446:	9803      	ldr	r0, [sp, #12]
 8027448:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 802744a:	e610      	b.n	802706e <SCROLLBAR_Callback+0xf2>
 802744c:	f7fb fece 	bl	80231ec <GUI_Lock>
 8027450:	4628      	mov	r0, r5
 8027452:	f7fe fa4b 	bl	80258ec <GUI_ALLOC_LockH>
 8027456:	f1b9 0f00 	cmp.w	r9, #0
 802745a:	9004      	str	r0, [sp, #16]
 802745c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 802745e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8027460:	f2c0 80a7 	blt.w	80275b2 <SCROLLBAR_Callback+0x636>
 8027464:	1ad3      	subs	r3, r2, r3
 8027466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802746a:	454b      	cmp	r3, r9
 802746c:	bfa8      	it	ge
 802746e:	464b      	movge	r3, r9
 8027470:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8027472:	429a      	cmp	r2, r3
 8027474:	f000 8099 	beq.w	80275aa <SCROLLBAR_Callback+0x62e>
 8027478:	6503      	str	r3, [r0, #80]	; 0x50
 802747a:	4628      	mov	r0, r5
 802747c:	f7f6 fec0 	bl	801e200 <WM_InvalidateWindow>
 8027480:	a804      	add	r0, sp, #16
 8027482:	f7fe fa45 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027486:	4628      	mov	r0, r5
 8027488:	2105      	movs	r1, #5
 802748a:	f7f4 ffbd 	bl	801c408 <WM_NotifyParent>
 802748e:	f7fb fea3 	bl	80231d8 <GUI_Unlock>
 8027492:	e696      	b.n	80271c2 <SCROLLBAR_Callback+0x246>
 8027494:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8027498:	eba6 0662 	sub.w	r6, r6, r2, asr #1
 802749c:	1a30      	subs	r0, r6, r0
 802749e:	3801      	subs	r0, #1
 80274a0:	fb00 f00b 	mul.w	r0, r0, fp
 80274a4:	9301      	str	r3, [sp, #4]
 80274a6:	f7fa fe9d 	bl	80221e4 <GUI__DivideRound32>
 80274aa:	9b01      	ldr	r3, [sp, #4]
 80274ac:	6618      	str	r0, [r3, #96]	; 0x60
 80274ae:	e677      	b.n	80271a0 <SCROLLBAR_Callback+0x224>
 80274b0:	9a08      	ldr	r2, [sp, #32]
 80274b2:	42b2      	cmp	r2, r6
 80274b4:	db61      	blt.n	802757a <SCROLLBAR_Callback+0x5fe>
 80274b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80274b8:	2900      	cmp	r1, #0
 80274ba:	dd0c      	ble.n	80274d6 <SCROLLBAR_Callback+0x55a>
 80274bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80274be:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80274c2:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 80274c6:	1a30      	subs	r0, r6, r0
 80274c8:	1e46      	subs	r6, r0, #1
 80274ca:	fb06 f00b 	mul.w	r0, r6, fp
 80274ce:	f7fa fe89 	bl	80221e4 <GUI__DivideRound32>
 80274d2:	9b03      	ldr	r3, [sp, #12]
 80274d4:	4681      	mov	r9, r0
 80274d6:	2203      	movs	r2, #3
 80274d8:	659a      	str	r2, [r3, #88]	; 0x58
 80274da:	9806      	ldr	r0, [sp, #24]
 80274dc:	2700      	movs	r7, #0
 80274de:	e651      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 80274e0:	4628      	mov	r0, r5
 80274e2:	f7fe fa03 	bl	80258ec <GUI_ALLOC_LockH>
 80274e6:	9004      	str	r0, [sp, #16]
 80274e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80274ea:	f7f3 fdf7 	bl	801b0dc <WM_DeleteTimer>
 80274ee:	a80e      	add	r0, sp, #56	; 0x38
 80274f0:	2200      	movs	r2, #0
 80274f2:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 80274f6:	665a      	str	r2, [r3, #100]	; 0x64
 80274f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80274fa:	f7fe fa09 	bl	8025910 <GUI_ALLOC_UnlockH>
 80274fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027500:	9a06      	ldr	r2, [sp, #24]
 8027502:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027504:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027508:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 802750c:	1ab2      	subs	r2, r6, r2
 802750e:	1e50      	subs	r0, r2, #1
 8027510:	fb00 f00b 	mul.w	r0, r0, fp
 8027514:	f7fa fe66 	bl	80221e4 <GUI__DivideRound32>
 8027518:	4681      	mov	r9, r0
 802751a:	a80e      	add	r0, sp, #56	; 0x38
 802751c:	f850 3d2c 	ldr.w	r3, [r0, #-44]!
 8027520:	f8c3 9060 	str.w	r9, [r3, #96]	; 0x60
 8027524:	f7fe f9f4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027528:	e644      	b.n	80271b4 <SCROLLBAR_Callback+0x238>
 802752a:	4653      	mov	r3, sl
 802752c:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8027530:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027534:	4628      	mov	r0, r5
 8027536:	f7f3 fdeb 	bl	801b110 <WM_CreateTimer>
 802753a:	4606      	mov	r6, r0
 802753c:	4628      	mov	r0, r5
 802753e:	f7fe f9d5 	bl	80258ec <GUI_ALLOC_LockH>
 8027542:	4603      	mov	r3, r0
 8027544:	a80e      	add	r0, sp, #56	; 0x38
 8027546:	f840 3d28 	str.w	r3, [r0, #-40]!
 802754a:	665e      	str	r6, [r3, #100]	; 0x64
 802754c:	65df      	str	r7, [r3, #92]	; 0x5c
 802754e:	f7fe f9df 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027552:	e62f      	b.n	80271b4 <SCROLLBAR_Callback+0x238>
 8027554:	f04f 37ff 	mov.w	r7, #4294967295
 8027558:	e614      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 802755a:	4628      	mov	r0, r5
 802755c:	f7fe f9c6 	bl	80258ec <GUI_ALLOC_LockH>
 8027560:	9005      	str	r0, [sp, #20]
 8027562:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8027564:	f7f3 fdba 	bl	801b0dc <WM_DeleteTimer>
 8027568:	a80e      	add	r0, sp, #56	; 0x38
 802756a:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 802756e:	665f      	str	r7, [r3, #100]	; 0x64
 8027570:	65df      	str	r7, [r3, #92]	; 0x5c
 8027572:	f7fe f9cd 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027576:	9804      	ldr	r0, [sp, #16]
 8027578:	e660      	b.n	802723c <SCROLLBAR_Callback+0x2c0>
 802757a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802757c:	42b2      	cmp	r2, r6
 802757e:	dd1f      	ble.n	80275c0 <SCROLLBAR_Callback+0x644>
 8027580:	44b9      	add	r9, r7
 8027582:	e5ff      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 8027584:	4628      	mov	r0, r5
 8027586:	f7fe f9b1 	bl	80258ec <GUI_ALLOC_LockH>
 802758a:	9004      	str	r0, [sp, #16]
 802758c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802758e:	f7f3 fda5 	bl	801b0dc <WM_DeleteTimer>
 8027592:	a80e      	add	r0, sp, #56	; 0x38
 8027594:	2200      	movs	r2, #0
 8027596:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 802759a:	665a      	str	r2, [r3, #100]	; 0x64
 802759c:	65da      	str	r2, [r3, #92]	; 0x5c
 802759e:	f7fe f9b7 	bl	8025910 <GUI_ALLOC_UnlockH>
 80275a2:	9b03      	ldr	r3, [sp, #12]
 80275a4:	e5e7      	b.n	8027176 <SCROLLBAR_Callback+0x1fa>
 80275a6:	2300      	movs	r3, #0
 80275a8:	e73a      	b.n	8027420 <SCROLLBAR_Callback+0x4a4>
 80275aa:	a804      	add	r0, sp, #16
 80275ac:	f7fe f9b0 	bl	8025910 <GUI_ALLOC_UnlockH>
 80275b0:	e76d      	b.n	802748e <SCROLLBAR_Callback+0x512>
 80275b2:	2300      	movs	r3, #0
 80275b4:	e75c      	b.n	8027470 <SCROLLBAR_Callback+0x4f4>
 80275b6:	2300      	movs	r3, #0
 80275b8:	e6cc      	b.n	8027354 <SCROLLBAR_Callback+0x3d8>
 80275ba:	2600      	movs	r6, #0
 80275bc:	4633      	mov	r3, r6
 80275be:	e6a3      	b.n	8027308 <SCROLLBAR_Callback+0x38c>
 80275c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80275c2:	42b2      	cmp	r2, r6
 80275c4:	db1c      	blt.n	8027600 <SCROLLBAR_Callback+0x684>
 80275c6:	2901      	cmp	r1, #1
 80275c8:	d020      	beq.n	802760c <SCROLLBAR_Callback+0x690>
 80275ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80275cc:	b17a      	cbz	r2, 80275ee <SCROLLBAR_Callback+0x672>
 80275ce:	4628      	mov	r0, r5
 80275d0:	f7fe f98c 	bl	80258ec <GUI_ALLOC_LockH>
 80275d4:	9004      	str	r0, [sp, #16]
 80275d6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80275d8:	f7f3 fd80 	bl	801b0dc <WM_DeleteTimer>
 80275dc:	a80e      	add	r0, sp, #56	; 0x38
 80275de:	2200      	movs	r2, #0
 80275e0:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 80275e4:	665a      	str	r2, [r3, #100]	; 0x64
 80275e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80275e8:	f7fe f992 	bl	8025910 <GUI_ALLOC_UnlockH>
 80275ec:	9b03      	ldr	r3, [sp, #12]
 80275ee:	2701      	movs	r7, #1
 80275f0:	659f      	str	r7, [r3, #88]	; 0x58
 80275f2:	44b9      	add	r9, r7
 80275f4:	9806      	ldr	r0, [sp, #24]
 80275f6:	e5c5      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 80275f8:	a805      	add	r0, sp, #20
 80275fa:	f7fe f989 	bl	8025910 <GUI_ALLOC_UnlockH>
 80275fe:	e65d      	b.n	80272bc <SCROLLBAR_Callback+0x340>
 8027600:	2700      	movs	r7, #0
 8027602:	e5bf      	b.n	8027184 <SCROLLBAR_Callback+0x208>
 8027604:	a805      	add	r0, sp, #20
 8027606:	f7fe f983 	bl	8025910 <GUI_ALLOC_UnlockH>
 802760a:	e718      	b.n	802743e <SCROLLBAR_Callback+0x4c2>
 802760c:	460f      	mov	r7, r1
 802760e:	e5b9      	b.n	8027184 <SCROLLBAR_Callback+0x208>

08027610 <SCROLLBAR__Rect2VRect>:
 8027610:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8027612:	071b      	lsls	r3, r3, #28
 8027614:	b470      	push	{r4, r5, r6}
 8027616:	d512      	bpl.n	802763e <SCROLLBAR__Rect2VRect+0x2e>
 8027618:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 802761c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8027620:	888c      	ldrh	r4, [r1, #4]
 8027622:	8808      	ldrh	r0, [r1, #0]
 8027624:	88ce      	ldrh	r6, [r1, #6]
 8027626:	884a      	ldrh	r2, [r1, #2]
 8027628:	808e      	strh	r6, [r1, #4]
 802762a:	1aeb      	subs	r3, r5, r3
 802762c:	3301      	adds	r3, #1
 802762e:	b29b      	uxth	r3, r3
 8027630:	43c0      	mvns	r0, r0
 8027632:	43e4      	mvns	r4, r4
 8027634:	4418      	add	r0, r3
 8027636:	4423      	add	r3, r4
 8027638:	80c8      	strh	r0, [r1, #6]
 802763a:	804b      	strh	r3, [r1, #2]
 802763c:	800a      	strh	r2, [r1, #0]
 802763e:	bc70      	pop	{r4, r5, r6}
 8027640:	4770      	bx	lr
 8027642:	bf00      	nop

08027644 <SCROLLBAR_CreateAttached>:
 8027644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027648:	f011 0708 	ands.w	r7, r1, #8
 802764c:	b088      	sub	sp, #32
 802764e:	460d      	mov	r5, r1
 8027650:	4604      	mov	r4, r0
 8027652:	d169      	bne.n	8027728 <SCROLLBAR_CreateAttached+0xe4>
 8027654:	f7fb fdca 	bl	80231ec <GUI_Lock>
 8027658:	4620      	mov	r0, r4
 802765a:	a906      	add	r1, sp, #24
 802765c:	f7f4 fc0a 	bl	801be74 <WM_GetInsideRectEx>
 8027660:	4b3d      	ldr	r3, [pc, #244]	; (8027758 <SCROLLBAR_CreateAttached+0x114>)
 8027662:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8027666:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 802766a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802766e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8027672:	3101      	adds	r1, #1
 8027674:	1a12      	subs	r2, r2, r0
 8027676:	1ac9      	subs	r1, r1, r3
 8027678:	3201      	adds	r2, #1
 802767a:	f240 3c8a 	movw	ip, #906	; 0x38a
 802767e:	26ff      	movs	r6, #255	; 0xff
 8027680:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8027764 <SCROLLBAR_CreateAttached+0x120>
 8027684:	9400      	str	r4, [sp, #0]
 8027686:	243c      	movs	r4, #60	; 0x3c
 8027688:	9403      	str	r4, [sp, #12]
 802768a:	f8cd c004 	str.w	ip, [sp, #4]
 802768e:	f8cd e008 	str.w	lr, [sp, #8]
 8027692:	f7f6 fe11 	bl	801e2b8 <WM_CreateWindowAsChild>
 8027696:	4604      	mov	r4, r0
 8027698:	2800      	cmp	r0, #0
 802769a:	d03b      	beq.n	8027714 <SCROLLBAR_CreateAttached+0xd0>
 802769c:	f7fe f926 	bl	80258ec <GUI_ALLOC_LockH>
 80276a0:	2f00      	cmp	r7, #0
 80276a2:	bf14      	ite	ne
 80276a4:	2318      	movne	r3, #24
 80276a6:	2310      	moveq	r3, #16
 80276a8:	bf14      	ite	ne
 80276aa:	2208      	movne	r2, #8
 80276ac:	2200      	moveq	r2, #0
 80276ae:	f015 0f10 	tst.w	r5, #16
 80276b2:	bf18      	it	ne
 80276b4:	461a      	movne	r2, r3
 80276b6:	4631      	mov	r1, r6
 80276b8:	9005      	str	r0, [sp, #20]
 80276ba:	f7ee f9ef 	bl	8015a9c <WIDGET__Init>
 80276be:	4b27      	ldr	r3, [pc, #156]	; (802775c <SCROLLBAR_CreateAttached+0x118>)
 80276c0:	4f27      	ldr	r7, [pc, #156]	; (8027760 <SCROLLBAR_CreateAttached+0x11c>)
 80276c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80276c4:	f10d 0e20 	add.w	lr, sp, #32
 80276c8:	f04f 0c00 	mov.w	ip, #0
 80276cc:	f85e 5d0c 	ldr.w	r5, [lr, #-12]!
 80276d0:	683e      	ldr	r6, [r7, #0]
 80276d2:	f105 0834 	add.w	r8, r5, #52	; 0x34
 80276d6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80276da:	f04f 090a 	mov.w	r9, #10
 80276de:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 80276e2:	4670      	mov	r0, lr
 80276e4:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
 80276e8:	f8c5 a04c 	str.w	sl, [r5, #76]	; 0x4c
 80276ec:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
 80276f0:	646e      	str	r6, [r5, #68]	; 0x44
 80276f2:	f7fe f90d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80276f6:	683b      	ldr	r3, [r7, #0]
 80276f8:	4620      	mov	r0, r4
 80276fa:	685b      	ldr	r3, [r3, #4]
 80276fc:	4798      	blx	r3
 80276fe:	4620      	mov	r0, r4
 8027700:	f7f4 fd8e 	bl	801c220 <WM_GetScrollPartner>
 8027704:	f7f6 fd7c 	bl	801e200 <WM_InvalidateWindow>
 8027708:	4620      	mov	r0, r4
 802770a:	f7f4 fceb 	bl	801c0e4 <WM_GetParent>
 802770e:	2125      	movs	r1, #37	; 0x25
 8027710:	f7f4 fecc 	bl	801c4ac <WM_SendMessageNoPara>
 8027714:	f7fb fd60 	bl	80231d8 <GUI_Unlock>
 8027718:	4620      	mov	r0, r4
 802771a:	2106      	movs	r1, #6
 802771c:	f7f4 fe74 	bl	801c408 <WM_NotifyParent>
 8027720:	4620      	mov	r0, r4
 8027722:	b008      	add	sp, #32
 8027724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027728:	f7fb fd60 	bl	80231ec <GUI_Lock>
 802772c:	4620      	mov	r0, r4
 802772e:	a906      	add	r1, sp, #24
 8027730:	f7f4 fba0 	bl	801be74 <WM_GetInsideRectEx>
 8027734:	4a08      	ldr	r2, [pc, #32]	; (8027758 <SCROLLBAR_CreateAttached+0x114>)
 8027736:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 802773a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 802773e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8027742:	f9b2 2000 	ldrsh.w	r2, [r2]
 8027746:	3001      	adds	r0, #1
 8027748:	1a5b      	subs	r3, r3, r1
 802774a:	1a80      	subs	r0, r0, r2
 802774c:	3301      	adds	r3, #1
 802774e:	f240 5c8a 	movw	ip, #1418	; 0x58a
 8027752:	26fe      	movs	r6, #254	; 0xfe
 8027754:	e794      	b.n	8027680 <SCROLLBAR_CreateAttached+0x3c>
 8027756:	bf00      	nop
 8027758:	2000035c 	.word	0x2000035c
 802775c:	20000348 	.word	0x20000348
 8027760:	20000358 	.word	0x20000358
 8027764:	08026f7d 	.word	0x08026f7d

08027768 <BUTTON_DrawSkinFlex>:
 8027768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802776c:	4994      	ldr	r1, [pc, #592]	; (80279c0 <BUTTON_DrawSkinFlex+0x258>)
 802776e:	6882      	ldr	r2, [r0, #8]
 8027770:	6843      	ldr	r3, [r0, #4]
 8027772:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8027776:	b088      	sub	sp, #32
 8027778:	4604      	mov	r4, r0
 802777a:	2b12      	cmp	r3, #18
 802777c:	d822      	bhi.n	80277c4 <BUTTON_DrawSkinFlex+0x5c>
 802777e:	e8df f003 	tbb	[pc, r3]
 8027782:	21b1      	.short	0x21b1
 8027784:	7b212121 	.word	0x7b212121
 8027788:	2121210a 	.word	0x2121210a
 802778c:	21212121 	.word	0x21212121
 8027790:	21212121 	.word	0x21212121
 8027794:	25          	.byte	0x25
 8027795:	00          	.byte	0x00
 8027796:	6800      	ldr	r0, [r0, #0]
 8027798:	f7fe f8a8 	bl	80258ec <GUI_ALLOC_LockH>
 802779c:	9004      	str	r0, [sp, #16]
 802779e:	6820      	ldr	r0, [r4, #0]
 80277a0:	f7f3 fb46 	bl	801ae30 <WM__IsEnabled>
 80277a4:	2800      	cmp	r0, #0
 80277a6:	f040 80a4 	bne.w	80278f2 <BUTTON_DrawSkinFlex+0x18a>
 80277aa:	9b04      	ldr	r3, [sp, #16]
 80277ac:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 80277ae:	b905      	cbnz	r5, 80277b2 <BUTTON_DrawSkinFlex+0x4a>
 80277b0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80277b2:	a804      	add	r0, sp, #16
 80277b4:	f7fe f8ac 	bl	8025910 <GUI_ALLOC_UnlockH>
 80277b8:	2200      	movs	r2, #0
 80277ba:	4628      	mov	r0, r5
 80277bc:	6821      	ldr	r1, [r4, #0]
 80277be:	4613      	mov	r3, r2
 80277c0:	f002 ff7c 	bl	802a6bc <GUI_DRAW__Draw>
 80277c4:	2000      	movs	r0, #0
 80277c6:	b008      	add	sp, #32
 80277c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277cc:	6800      	ldr	r0, [r0, #0]
 80277ce:	f7fe f88d 	bl	80258ec <GUI_ALLOC_LockH>
 80277d2:	6e86      	ldr	r6, [r0, #104]	; 0x68
 80277d4:	9004      	str	r0, [sp, #16]
 80277d6:	2e00      	cmp	r6, #0
 80277d8:	f000 80eb 	beq.w	80279b2 <BUTTON_DrawSkinFlex+0x24a>
 80277dc:	68a3      	ldr	r3, [r4, #8]
 80277de:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	f000 80e3 	beq.w	80279ae <BUTTON_DrawSkinFlex+0x246>
 80277e8:	2b03      	cmp	r3, #3
 80277ea:	bf14      	ite	ne
 80277ec:	2300      	movne	r3, #0
 80277ee:	2302      	moveq	r3, #2
 80277f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80277f4:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80277f6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80277f8:	f7fc fff6 	bl	80247e8 <GUI_SetFont>
 80277fc:	4620      	mov	r0, r4
 80277fe:	ac08      	add	r4, sp, #32
 8027800:	f7fc ff90 	bl	8024724 <GUI_SetColor>
 8027804:	a806      	add	r0, sp, #24
 8027806:	f7fc fe75 	bl	80244f4 <GUI_GetClientRect>
 802780a:	f854 0d10 	ldr.w	r0, [r4, #-16]!
 802780e:	8bab      	ldrh	r3, [r5, #28]
 8027810:	f8bd c018 	ldrh.w	ip, [sp, #24]
 8027814:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 8027818:	f8bd e01a 	ldrh.w	lr, [sp, #26]
 802781c:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 8027820:	f9b0 105e 	ldrsh.w	r1, [r0, #94]	; 0x5e
 8027824:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 8027828:	449c      	add	ip, r3
 802782a:	f10e 0e02 	add.w	lr, lr, #2
 802782e:	ebc3 0308 	rsb	r3, r3, r8
 8027832:	a806      	add	r0, sp, #24
 8027834:	3d02      	subs	r5, #2
 8027836:	f8ad c018 	strh.w	ip, [sp, #24]
 802783a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802783e:	f8ad e01a 	strh.w	lr, [sp, #26]
 8027842:	f8ad 501e 	strh.w	r5, [sp, #30]
 8027846:	f7fc fed7 	bl	80245f8 <GUI_MoveRect>
 802784a:	4620      	mov	r0, r4
 802784c:	f7fe f860 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027850:	2002      	movs	r0, #2
 8027852:	f7fc fff9 	bl	8024848 <GUI_SetTextMode>
 8027856:	4630      	mov	r0, r6
 8027858:	f7fe f848 	bl	80258ec <GUI_ALLOC_LockH>
 802785c:	ac08      	add	r4, sp, #32
 802785e:	a906      	add	r1, sp, #24
 8027860:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8027864:	463a      	mov	r2, r7
 8027866:	f7fc f8f3 	bl	8023a50 <GUI_DispStringInRect>
 802786a:	4620      	mov	r0, r4
 802786c:	f7fe f850 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027870:	2000      	movs	r0, #0
 8027872:	b008      	add	sp, #32
 8027874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027878:	69ee      	ldr	r6, [r5, #28]
 802787a:	2e00      	cmp	r6, #0
 802787c:	d145      	bne.n	802790a <BUTTON_DrawSkinFlex+0x1a2>
 802787e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8027882:	f7fc ff4f 	bl	8024724 <GUI_SetColor>
 8027886:	f104 0010 	add.w	r0, r4, #16
 802788a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 802788c:	4430      	add	r0, r6
 802788e:	4431      	add	r1, r6
 8027890:	1b92      	subs	r2, r2, r6
 8027892:	1b9b      	subs	r3, r3, r6
 8027894:	3601      	adds	r6, #1
 8027896:	f7fe fa6b 	bl	8025d70 <GUI_DrawRect>
 802789a:	2e02      	cmp	r6, #2
 802789c:	d1ef      	bne.n	802787e <BUTTON_DrawSkinFlex+0x116>
 802789e:	68eb      	ldr	r3, [r5, #12]
 80278a0:	6961      	ldr	r1, [r4, #20]
 80278a2:	69e7      	ldr	r7, [r4, #28]
 80278a4:	9300      	str	r3, [sp, #0]
 80278a6:	6920      	ldr	r0, [r4, #16]
 80278a8:	69a2      	ldr	r2, [r4, #24]
 80278aa:	692b      	ldr	r3, [r5, #16]
 80278ac:	9301      	str	r3, [sp, #4]
 80278ae:	19cb      	adds	r3, r1, r7
 80278b0:	4430      	add	r0, r6
 80278b2:	1b92      	subs	r2, r2, r6
 80278b4:	105b      	asrs	r3, r3, #1
 80278b6:	3102      	adds	r1, #2
 80278b8:	f001 ff82 	bl	80297c0 <GUI_DrawGradientV>
 80278bc:	69e3      	ldr	r3, [r4, #28]
 80278be:	6967      	ldr	r7, [r4, #20]
 80278c0:	696a      	ldr	r2, [r5, #20]
 80278c2:	9200      	str	r2, [sp, #0]
 80278c4:	6920      	ldr	r0, [r4, #16]
 80278c6:	69a2      	ldr	r2, [r4, #24]
 80278c8:	69a9      	ldr	r1, [r5, #24]
 80278ca:	9101      	str	r1, [sp, #4]
 80278cc:	441f      	add	r7, r3
 80278ce:	1079      	asrs	r1, r7, #1
 80278d0:	4430      	add	r0, r6
 80278d2:	3101      	adds	r1, #1
 80278d4:	3b02      	subs	r3, #2
 80278d6:	1b92      	subs	r2, r2, r6
 80278d8:	f001 ff72 	bl	80297c0 <GUI_DrawGradientV>
 80278dc:	2000      	movs	r0, #0
 80278de:	b008      	add	sp, #32
 80278e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278e4:	6800      	ldr	r0, [r0, #0]
 80278e6:	f7f3 fc71 	bl	801b1cc <WM_SetHasTrans>
 80278ea:	2000      	movs	r0, #0
 80278ec:	b008      	add	sp, #32
 80278ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278f2:	68a3      	ldr	r3, [r4, #8]
 80278f4:	2b00      	cmp	r3, #0
 80278f6:	d160      	bne.n	80279ba <BUTTON_DrawSkinFlex+0x252>
 80278f8:	9b04      	ldr	r3, [sp, #16]
 80278fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80278fc:	2a00      	cmp	r2, #0
 80278fe:	bf14      	ite	ne
 8027900:	226c      	movne	r2, #108	; 0x6c
 8027902:	2268      	moveq	r2, #104	; 0x68
 8027904:	4413      	add	r3, r2
 8027906:	685d      	ldr	r5, [r3, #4]
 8027908:	e753      	b.n	80277b2 <BUTTON_DrawSkinFlex+0x4a>
 802790a:	9600      	str	r6, [sp, #0]
 802790c:	682b      	ldr	r3, [r5, #0]
 802790e:	9301      	str	r3, [sp, #4]
 8027910:	686b      	ldr	r3, [r5, #4]
 8027912:	9302      	str	r3, [sp, #8]
 8027914:	68ae      	ldr	r6, [r5, #8]
 8027916:	3010      	adds	r0, #16
 8027918:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 802791a:	9603      	str	r6, [sp, #12]
 802791c:	f001 fc80 	bl	8029220 <GUI__DrawTwinArc4>
 8027920:	2600      	movs	r6, #0
 8027922:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8027926:	f7fc fefd 	bl	8024724 <GUI_SetColor>
 802792a:	69eb      	ldr	r3, [r5, #28]
 802792c:	6921      	ldr	r1, [r4, #16]
 802792e:	69a2      	ldr	r2, [r4, #24]
 8027930:	6960      	ldr	r0, [r4, #20]
 8027932:	4419      	add	r1, r3
 8027934:	1ad2      	subs	r2, r2, r3
 8027936:	4430      	add	r0, r6
 8027938:	f7fb fdc4 	bl	80234c4 <GUI_DrawHLine>
 802793c:	69eb      	ldr	r3, [r5, #28]
 802793e:	6921      	ldr	r1, [r4, #16]
 8027940:	69a2      	ldr	r2, [r4, #24]
 8027942:	69e0      	ldr	r0, [r4, #28]
 8027944:	4419      	add	r1, r3
 8027946:	1ad2      	subs	r2, r2, r3
 8027948:	1b80      	subs	r0, r0, r6
 802794a:	f7fb fdbb 	bl	80234c4 <GUI_DrawHLine>
 802794e:	69eb      	ldr	r3, [r5, #28]
 8027950:	6961      	ldr	r1, [r4, #20]
 8027952:	69e2      	ldr	r2, [r4, #28]
 8027954:	6920      	ldr	r0, [r4, #16]
 8027956:	4419      	add	r1, r3
 8027958:	1ad2      	subs	r2, r2, r3
 802795a:	4430      	add	r0, r6
 802795c:	f7fb fe08 	bl	8023570 <GUI_DrawVLine>
 8027960:	69eb      	ldr	r3, [r5, #28]
 8027962:	6961      	ldr	r1, [r4, #20]
 8027964:	69e2      	ldr	r2, [r4, #28]
 8027966:	69a0      	ldr	r0, [r4, #24]
 8027968:	4419      	add	r1, r3
 802796a:	1b80      	subs	r0, r0, r6
 802796c:	1ad2      	subs	r2, r2, r3
 802796e:	3601      	adds	r6, #1
 8027970:	f7fb fdfe 	bl	8023570 <GUI_DrawVLine>
 8027974:	2e02      	cmp	r6, #2
 8027976:	d1d4      	bne.n	8027922 <BUTTON_DrawSkinFlex+0x1ba>
 8027978:	68a8      	ldr	r0, [r5, #8]
 802797a:	f7fc fed3 	bl	8024724 <GUI_SetColor>
 802797e:	69eb      	ldr	r3, [r5, #28]
 8027980:	6920      	ldr	r0, [r4, #16]
 8027982:	69e6      	ldr	r6, [r4, #28]
 8027984:	6961      	ldr	r1, [r4, #20]
 8027986:	18c2      	adds	r2, r0, r3
 8027988:	4419      	add	r1, r3
 802798a:	3a01      	subs	r2, #1
 802798c:	1af3      	subs	r3, r6, r3
 802798e:	3002      	adds	r0, #2
 8027990:	f7fb fe18 	bl	80235c4 <GUI_FillRect>
 8027994:	69eb      	ldr	r3, [r5, #28]
 8027996:	69a2      	ldr	r2, [r4, #24]
 8027998:	69e6      	ldr	r6, [r4, #28]
 802799a:	6961      	ldr	r1, [r4, #20]
 802799c:	1ad0      	subs	r0, r2, r3
 802799e:	4419      	add	r1, r3
 80279a0:	3001      	adds	r0, #1
 80279a2:	1af3      	subs	r3, r6, r3
 80279a4:	3a02      	subs	r2, #2
 80279a6:	f7fb fe0d 	bl	80235c4 <GUI_FillRect>
 80279aa:	69ee      	ldr	r6, [r5, #28]
 80279ac:	e777      	b.n	802789e <BUTTON_DrawSkinFlex+0x136>
 80279ae:	2301      	movs	r3, #1
 80279b0:	e71e      	b.n	80277f0 <BUTTON_DrawSkinFlex+0x88>
 80279b2:	a804      	add	r0, sp, #16
 80279b4:	f7fd ffac 	bl	8025910 <GUI_ALLOC_UnlockH>
 80279b8:	e704      	b.n	80277c4 <BUTTON_DrawSkinFlex+0x5c>
 80279ba:	9b04      	ldr	r3, [sp, #16]
 80279bc:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80279be:	e6f8      	b.n	80277b2 <BUTTON_DrawSkinFlex+0x4a>
 80279c0:	08032390 	.word	0x08032390

080279c4 <_Create>:
 80279c4:	b570      	push	{r4, r5, r6, lr}
 80279c6:	b08a      	sub	sp, #40	; 0x28
 80279c8:	2400      	movs	r4, #0
 80279ca:	4606      	mov	r6, r0
 80279cc:	9401      	str	r4, [sp, #4]
 80279ce:	9402      	str	r4, [sp, #8]
 80279d0:	9403      	str	r4, [sp, #12]
 80279d2:	9404      	str	r4, [sp, #16]
 80279d4:	9405      	str	r4, [sp, #20]
 80279d6:	9406      	str	r4, [sp, #24]
 80279d8:	9407      	str	r4, [sp, #28]
 80279da:	9408      	str	r4, [sp, #32]
 80279dc:	9409      	str	r4, [sp, #36]	; 0x24
 80279de:	f7fd ff85 	bl	80258ec <GUI_ALLOC_LockH>
 80279e2:	ab0a      	add	r3, sp, #40	; 0x28
 80279e4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80279e6:	f843 0d28 	str.w	r0, [r3, #-40]!
 80279ea:	4668      	mov	r0, sp
 80279ec:	6895      	ldr	r5, [r2, #8]
 80279ee:	f7fd ff8f 	bl	8025910 <GUI_ALLOC_UnlockH>
 80279f2:	a80a      	add	r0, sp, #40	; 0x28
 80279f4:	9402      	str	r4, [sp, #8]
 80279f6:	f840 6d24 	str.w	r6, [r0, #-36]!
 80279fa:	682b      	ldr	r3, [r5, #0]
 80279fc:	4798      	blx	r3
 80279fe:	b00a      	add	sp, #40	; 0x28
 8027a00:	bd70      	pop	{r4, r5, r6, pc}
 8027a02:	bf00      	nop

08027a04 <_Paint>:
 8027a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027a08:	b08a      	sub	sp, #40	; 0x28
 8027a0a:	4605      	mov	r5, r0
 8027a0c:	f7fd ff6e 	bl	80258ec <GUI_ALLOC_LockH>
 8027a10:	4603      	mov	r3, r0
 8027a12:	a80a      	add	r0, sp, #40	; 0x28
 8027a14:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8027a16:	f840 3d28 	str.w	r3, [r0, #-40]!
 8027a1a:	4668      	mov	r0, sp
 8027a1c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8027a1e:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 8027a22:	f7fd ff75 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027a26:	4628      	mov	r0, r5
 8027a28:	f7f4 ffb6 	bl	801c998 <WM_GetWindowSizeX>
 8027a2c:	4607      	mov	r7, r0
 8027a2e:	4628      	mov	r0, r5
 8027a30:	f7f4 ffd0 	bl	801c9d4 <WM_GetWindowSizeY>
 8027a34:	3f01      	subs	r7, #1
 8027a36:	2300      	movs	r3, #0
 8027a38:	3801      	subs	r0, #1
 8027a3a:	f016 0610 	ands.w	r6, r6, #16
 8027a3e:	9008      	str	r0, [sp, #32]
 8027a40:	9707      	str	r7, [sp, #28]
 8027a42:	9501      	str	r5, [sp, #4]
 8027a44:	9306      	str	r3, [sp, #24]
 8027a46:	9305      	str	r3, [sp, #20]
 8027a48:	d11d      	bne.n	8027a86 <_Paint+0x82>
 8027a4a:	f418 7f80 	tst.w	r8, #256	; 0x100
 8027a4e:	d118      	bne.n	8027a82 <_Paint+0x7e>
 8027a50:	f018 0f01 	tst.w	r8, #1
 8027a54:	bf14      	ite	ne
 8027a56:	2301      	movne	r3, #1
 8027a58:	2302      	moveq	r3, #2
 8027a5a:	9303      	str	r3, [sp, #12]
 8027a5c:	2305      	movs	r3, #5
 8027a5e:	9302      	str	r3, [sp, #8]
 8027a60:	a801      	add	r0, sp, #4
 8027a62:	47a0      	blx	r4
 8027a64:	2306      	movs	r3, #6
 8027a66:	9302      	str	r3, [sp, #8]
 8027a68:	a801      	add	r0, sp, #4
 8027a6a:	47a0      	blx	r4
 8027a6c:	2312      	movs	r3, #18
 8027a6e:	9302      	str	r3, [sp, #8]
 8027a70:	a801      	add	r0, sp, #4
 8027a72:	47a0      	blx	r4
 8027a74:	230a      	movs	r3, #10
 8027a76:	a801      	add	r0, sp, #4
 8027a78:	9302      	str	r3, [sp, #8]
 8027a7a:	47a0      	blx	r4
 8027a7c:	b00a      	add	sp, #40	; 0x28
 8027a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027a82:	9603      	str	r6, [sp, #12]
 8027a84:	e7ea      	b.n	8027a5c <_Paint+0x58>
 8027a86:	2303      	movs	r3, #3
 8027a88:	9303      	str	r3, [sp, #12]
 8027a8a:	e7e7      	b.n	8027a5c <_Paint+0x58>

08027a8c <GUI_MEMDEV__WriteToActiveOpaque>:
 8027a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a90:	b0a1      	sub	sp, #132	; 0x84
 8027a92:	4607      	mov	r7, r0
 8027a94:	910f      	str	r1, [sp, #60]	; 0x3c
 8027a96:	920c      	str	r2, [sp, #48]	; 0x30
 8027a98:	b910      	cbnz	r0, 8027aa0 <GUI_MEMDEV__WriteToActiveOpaque+0x14>
 8027a9a:	b021      	add	sp, #132	; 0x84
 8027a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027aa0:	f7fd ff24 	bl	80258ec <GUI_ALLOC_LockH>
 8027aa4:	ab20      	add	r3, sp, #128	; 0x80
 8027aa6:	6944      	ldr	r4, [r0, #20]
 8027aa8:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8027aac:	4618      	mov	r0, r3
 8027aae:	f7fd ff2f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027ab2:	4638      	mov	r0, r7
 8027ab4:	f7f8 fbd6 	bl	8020264 <GUI_MEMDEV_GetBitsPerPixel>
 8027ab8:	2808      	cmp	r0, #8
 8027aba:	4681      	mov	r9, r0
 8027abc:	dd02      	ble.n	8027ac4 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8027abe:	2c00      	cmp	r4, #0
 8027ac0:	f000 80d2 	beq.w	8027c68 <GUI_MEMDEV__WriteToActiveOpaque+0x1dc>
 8027ac4:	f04f 0800 	mov.w	r8, #0
 8027ac8:	f04f 0b01 	mov.w	fp, #1
 8027acc:	4638      	mov	r0, r7
 8027ace:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8027ad2:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 8027ad6:	f7fd ff09 	bl	80258ec <GUI_ALLOC_LockH>
 8027ada:	4da6      	ldr	r5, [pc, #664]	; (8027d74 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 8027adc:	6801      	ldr	r1, [r0, #0]
 8027ade:	682a      	ldr	r2, [r5, #0]
 8027ae0:	6909      	ldr	r1, [r1, #16]
 8027ae2:	4603      	mov	r3, r0
 8027ae4:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 8027ae8:	68de      	ldr	r6, [r3, #12]
 8027aea:	9612      	str	r6, [sp, #72]	; 0x48
 8027aec:	691e      	ldr	r6, [r3, #16]
 8027aee:	f84a 3d14 	str.w	r3, [sl, #-20]!
 8027af2:	7c50      	ldrb	r0, [r2, #17]
 8027af4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8027af8:	960b      	str	r6, [sp, #44]	; 0x2c
 8027afa:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8027afe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8027b02:	684c      	ldr	r4, [r1, #4]
 8027b04:	9310      	str	r3, [sp, #64]	; 0x40
 8027b06:	9615      	str	r6, [sp, #84]	; 0x54
 8027b08:	f7f9 fd96 	bl	8021638 <GUI_GetBitsPerPixelEx>
 8027b0c:	682a      	ldr	r2, [r5, #0]
 8027b0e:	9009      	str	r0, [sp, #36]	; 0x24
 8027b10:	7c50      	ldrb	r0, [r2, #17]
 8027b12:	f7f9 fdad 	bl	8021670 <GUI_GetpfIndex2ColorEx>
 8027b16:	4606      	mov	r6, r0
 8027b18:	4650      	mov	r0, sl
 8027b1a:	f7fd fef9 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027b1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027b20:	2808      	cmp	r0, #8
 8027b22:	f240 809b 	bls.w	8027c5c <GUI_MEMDEV__WriteToActiveOpaque+0x1d0>
 8027b26:	2810      	cmp	r0, #16
 8027b28:	bf8c      	ite	hi
 8027b2a:	2104      	movhi	r1, #4
 8027b2c:	2102      	movls	r1, #2
 8027b2e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8027b32:	910e      	str	r1, [sp, #56]	; 0x38
 8027b34:	42b4      	cmp	r4, r6
 8027b36:	f000 81b0 	beq.w	8027e9a <GUI_MEMDEV__WriteToActiveOpaque+0x40e>
 8027b3a:	682b      	ldr	r3, [r5, #0]
 8027b3c:	7c58      	ldrb	r0, [r3, #17]
 8027b3e:	f7f9 fd9f 	bl	8021680 <GUI_GetpfColor2IndexEx>
 8027b42:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8027b44:	4605      	mov	r5, r0
 8027b46:	00b0      	lsls	r0, r6, #2
 8027b48:	f7fd feb8 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 8027b4c:	9014      	str	r0, [sp, #80]	; 0x50
 8027b4e:	2800      	cmp	r0, #0
 8027b50:	d0a3      	beq.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8027b52:	4638      	mov	r0, r7
 8027b54:	f7f7 fb6c 	bl	801f230 <GUI_MEMDEV_GetDataPtr>
 8027b58:	9011      	str	r0, [sp, #68]	; 0x44
 8027b5a:	f1b9 0f00 	cmp.w	r9, #0
 8027b5e:	f000 80f4 	beq.w	8027d4a <GUI_MEMDEV__WriteToActiveOpaque+0x2be>
 8027b62:	4648      	mov	r0, r9
 8027b64:	f7fd fec2 	bl	80258ec <GUI_ALLOC_LockH>
 8027b68:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8027b6a:	901c      	str	r0, [sp, #112]	; 0x70
 8027b6c:	2e00      	cmp	r6, #0
 8027b6e:	f340 8190 	ble.w	8027e92 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 8027b72:	2600      	movs	r6, #0
 8027b74:	960d      	str	r6, [sp, #52]	; 0x34
 8027b76:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8027b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027b7a:	3e01      	subs	r6, #1
 8027b7c:	9616      	str	r6, [sp, #88]	; 0x58
 8027b7e:	ae1d      	add	r6, sp, #116	; 0x74
 8027b80:	9613      	str	r6, [sp, #76]	; 0x4c
 8027b82:	f04f 0801 	mov.w	r8, #1
 8027b86:	6883      	ldr	r3, [r0, #8]
 8027b88:	2100      	movs	r1, #0
 8027b8a:	911d      	str	r1, [sp, #116]	; 0x74
 8027b8c:	695b      	ldr	r3, [r3, #20]
 8027b8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027b90:	4798      	blx	r3
 8027b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027b94:	4282      	cmp	r2, r0
 8027b96:	4606      	mov	r6, r0
 8027b98:	f000 813a 	beq.w	8027e10 <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 8027b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027b9e:	2a01      	cmp	r2, #1
 8027ba0:	f000 80fc 	beq.w	8027d9c <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 8027ba4:	2800      	cmp	r0, #0
 8027ba6:	d047      	beq.n	8027c38 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 8027ba8:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8027bac:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8027bb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027bb2:	f7fd fe9b 	bl	80258ec <GUI_ALLOC_LockH>
 8027bb6:	4607      	mov	r7, r0
 8027bb8:	901a      	str	r0, [sp, #104]	; 0x68
 8027bba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027bbc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8027bbe:	2808      	cmp	r0, #8
 8027bc0:	f240 80dc 	bls.w	8027d7c <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 8027bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027bc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027bc8:	46b3      	mov	fp, r6
 8027bca:	fb01 2a03 	mla	sl, r1, r3, r2
 8027bce:	46b9      	mov	r9, r7
 8027bd0:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8027bd4:	47a0      	blx	r4
 8027bd6:	47a8      	blx	r5
 8027bd8:	f1bb 0b01 	subs.w	fp, fp, #1
 8027bdc:	f849 0b04 	str.w	r0, [r9], #4
 8027be0:	d1f6      	bne.n	8027bd0 <GUI_MEMDEV__WriteToActiveOpaque+0x144>
 8027be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027be4:	281f      	cmp	r0, #31
 8027be6:	d804      	bhi.n	8027bf2 <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 8027be8:	4602      	mov	r2, r0
 8027bea:	4631      	mov	r1, r6
 8027bec:	4638      	mov	r0, r7
 8027bee:	f001 fc69 	bl	80294c4 <GUI__CompactPixelIndices>
 8027bf2:	2200      	movs	r2, #0
 8027bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027bf6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027bf8:	9203      	str	r2, [sp, #12]
 8027bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027bfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8027bfe:	9102      	str	r1, [sp, #8]
 8027c00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027c02:	9105      	str	r1, [sp, #20]
 8027c04:	4410      	add	r0, r2
 8027c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027c08:	9304      	str	r3, [sp, #16]
 8027c0a:	4632      	mov	r2, r6
 8027c0c:	2301      	movs	r3, #1
 8027c0e:	f8cd 8000 	str.w	r8, [sp]
 8027c12:	f8cd 8004 	str.w	r8, [sp, #4]
 8027c16:	f7f9 ffff 	bl	8021c18 <LCD_DrawBitmap>
 8027c1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027c1c:	f7fd fe78 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027c20:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027c22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027c24:	6883      	ldr	r3, [r0, #8]
 8027c26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027c28:	695b      	ldr	r3, [r3, #20]
 8027c2a:	4416      	add	r6, r2
 8027c2c:	961d      	str	r6, [sp, #116]	; 0x74
 8027c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027c30:	4798      	blx	r3
 8027c32:	4606      	mov	r6, r0
 8027c34:	2800      	cmp	r0, #0
 8027c36:	d1bb      	bne.n	8027bb0 <GUI_MEMDEV__WriteToActiveOpaque+0x124>
 8027c38:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8027c3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027c3c:	4406      	add	r6, r0
 8027c3e:	9611      	str	r6, [sp, #68]	; 0x44
 8027c40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8027c42:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8027c46:	3601      	adds	r6, #1
 8027c48:	960c      	str	r6, [sp, #48]	; 0x30
 8027c4a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027c4c:	4576      	cmp	r6, lr
 8027c4e:	f000 8120 	beq.w	8027e92 <GUI_MEMDEV__WriteToActiveOpaque+0x406>
 8027c52:	3601      	adds	r6, #1
 8027c54:	960d      	str	r6, [sp, #52]	; 0x34
 8027c56:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027c58:	4632      	mov	r2, r6
 8027c5a:	e794      	b.n	8027b86 <GUI_MEMDEV__WriteToActiveOpaque+0xfa>
 8027c5c:	2801      	cmp	r0, #1
 8027c5e:	d16f      	bne.n	8027d40 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 8027c60:	ab1e      	add	r3, sp, #120	; 0x78
 8027c62:	900e      	str	r0, [sp, #56]	; 0x38
 8027c64:	930a      	str	r3, [sp, #40]	; 0x28
 8027c66:	e765      	b.n	8027b34 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8027c68:	4638      	mov	r0, r7
 8027c6a:	f7fd fe3f 	bl	80258ec <GUI_ALLOC_LockH>
 8027c6e:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 8027c72:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 8027c76:	f84a 0d10 	str.w	r0, [sl, #-16]!
 8027c7a:	6801      	ldr	r1, [r0, #0]
 8027c7c:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8027c80:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8027c84:	9609      	str	r6, [sp, #36]	; 0x24
 8027c86:	4602      	mov	r2, r0
 8027c88:	4650      	mov	r0, sl
 8027c8a:	690e      	ldr	r6, [r1, #16]
 8027c8c:	9208      	str	r2, [sp, #32]
 8027c8e:	f7fd fe3f 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027c92:	4838      	ldr	r0, [pc, #224]	; (8027d74 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>)
 8027c94:	4938      	ldr	r1, [pc, #224]	; (8027d78 <GUI_MEMDEV__WriteToActiveOpaque+0x2ec>)
 8027c96:	6800      	ldr	r0, [r0, #0]
 8027c98:	6875      	ldr	r5, [r6, #4]
 8027c9a:	7c40      	ldrb	r0, [r0, #17]
 8027c9c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8027ca0:	690c      	ldr	r4, [r1, #16]
 8027ca2:	6821      	ldr	r1, [r4, #0]
 8027ca4:	910d      	str	r1, [sp, #52]	; 0x34
 8027ca6:	f7f9 fcc7 	bl	8021638 <GUI_GetBitsPerPixelEx>
 8027caa:	2808      	cmp	r0, #8
 8027cac:	9a08      	ldr	r2, [sp, #32]
 8027cae:	d942      	bls.n	8027d36 <GUI_MEMDEV__WriteToActiveOpaque+0x2aa>
 8027cb0:	2810      	cmp	r0, #16
 8027cb2:	bf8c      	ite	hi
 8027cb4:	2320      	movhi	r3, #32
 8027cb6:	2310      	movls	r3, #16
 8027cb8:	bf8c      	ite	hi
 8027cba:	2004      	movhi	r0, #4
 8027cbc:	2002      	movls	r0, #2
 8027cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8027cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8027cc2:	42a6      	cmp	r6, r4
 8027cc4:	f000 81f6 	beq.w	80280b4 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8027cc8:	f1b9 0f20 	cmp.w	r9, #32
 8027ccc:	f000 81b0 	beq.w	8028030 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 8027cd0:	f1b9 0f10 	cmp.w	r9, #16
 8027cd4:	f47f aee1 	bne.w	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8027cd8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8027cdc:	fb08 f00e 	mul.w	r0, r8, lr
 8027ce0:	f7fd fdec 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 8027ce4:	9011      	str	r0, [sp, #68]	; 0x44
 8027ce6:	2800      	cmp	r0, #0
 8027ce8:	f43f aed7 	beq.w	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8027cec:	f7fd fdfe 	bl	80258ec <GUI_ALLOC_LockH>
 8027cf0:	901e      	str	r0, [sp, #120]	; 0x78
 8027cf2:	4638      	mov	r0, r7
 8027cf4:	f7fd fdfa 	bl	80258ec <GUI_ALLOC_LockH>
 8027cf8:	901c      	str	r0, [sp, #112]	; 0x70
 8027cfa:	6923      	ldr	r3, [r4, #16]
 8027cfc:	f100 0918 	add.w	r9, r0, #24
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	f000 81e9 	beq.w	80280d8 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 8027d06:	6973      	ldr	r3, [r6, #20]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	f000 81e5 	beq.w	80280d8 <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 8027d0e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8027d12:	0080      	lsls	r0, r0, #2
 8027d14:	f7fd fdd2 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 8027d18:	900e      	str	r0, [sp, #56]	; 0x38
 8027d1a:	2800      	cmp	r0, #0
 8027d1c:	f040 822b 	bne.w	8028176 <GUI_MEMDEV__WriteToActiveOpaque+0x6ea>
 8027d20:	901d      	str	r0, [sp, #116]	; 0x74
 8027d22:	4650      	mov	r0, sl
 8027d24:	f7fd fdf4 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027d28:	a81e      	add	r0, sp, #120	; 0x78
 8027d2a:	f7fd fdf1 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027d2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027d30:	f7fd feee 	bl	8025b10 <GUI_ALLOC_Free>
 8027d34:	e6b1      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8027d36:	2108      	movs	r1, #8
 8027d38:	2301      	movs	r3, #1
 8027d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8027d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8027d3e:	e7c0      	b.n	8027cc2 <GUI_MEMDEV__WriteToActiveOpaque+0x236>
 8027d40:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8027d44:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8027d48:	e6f4      	b.n	8027b34 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8027d4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027d4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8027d4e:	9502      	str	r5, [sp, #8]
 8027d50:	2401      	movs	r4, #1
 8027d52:	9603      	str	r6, [sp, #12]
 8027d54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027d56:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027d58:	9504      	str	r5, [sp, #16]
 8027d5a:	9605      	str	r6, [sp, #20]
 8027d5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027d60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027d64:	9400      	str	r4, [sp, #0]
 8027d66:	9401      	str	r4, [sp, #4]
 8027d68:	f7f9 ff56 	bl	8021c18 <LCD_DrawBitmap>
 8027d6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027d6e:	f7fd fecf 	bl	8025b10 <GUI_ALLOC_Free>
 8027d72:	e692      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8027d74:	20000280 	.word	0x20000280
 8027d78:	2002cc24 	.word	0x2002cc24
 8027d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027d80:	46b1      	mov	r9, r6
 8027d82:	fb01 2a03 	mla	sl, r1, r3, r2
 8027d86:	46bb      	mov	fp, r7
 8027d88:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8027d8c:	47a0      	blx	r4
 8027d8e:	47a8      	blx	r5
 8027d90:	f1b9 0901 	subs.w	r9, r9, #1
 8027d94:	f84b 0b04 	str.w	r0, [fp], #4
 8027d98:	d1f6      	bne.n	8027d88 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 8027d9a:	e722      	b.n	8027be2 <GUI_MEMDEV__WriteToActiveOpaque+0x156>
 8027d9c:	2800      	cmp	r0, #0
 8027d9e:	f43f af4b 	beq.w	8027c38 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 8027da2:	9517      	str	r5, [sp, #92]	; 0x5c
 8027da4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8027da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027da8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8027dac:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8027db0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8027db4:	9410      	str	r4, [sp, #64]	; 0x40
 8027db6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8027db8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027dba:	9003      	str	r0, [sp, #12]
 8027dbc:	2c00      	cmp	r4, #0
 8027dbe:	46a6      	mov	lr, r4
 8027dc0:	bfb8      	it	lt
 8027dc2:	f104 0e07 	addlt.w	lr, r4, #7
 8027dc6:	f004 0c07 	and.w	ip, r4, #7
 8027dca:	eb0a 0004 	add.w	r0, sl, r4
 8027dce:	eb07 04ee 	add.w	r4, r7, lr, asr #3
 8027dd2:	9404      	str	r4, [sp, #16]
 8027dd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027dd6:	f8cd c018 	str.w	ip, [sp, #24]
 8027dda:	4632      	mov	r2, r6
 8027ddc:	4629      	mov	r1, r5
 8027dde:	2301      	movs	r3, #1
 8027de0:	f8cd 8000 	str.w	r8, [sp]
 8027de4:	f8cd 8004 	str.w	r8, [sp, #4]
 8027de8:	f8cd 8008 	str.w	r8, [sp, #8]
 8027dec:	9405      	str	r4, [sp, #20]
 8027dee:	f7f9 fdf3 	bl	80219d8 <LCD__DrawBitmap_1bpp>
 8027df2:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027df4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027df6:	6883      	ldr	r3, [r0, #8]
 8027df8:	4416      	add	r6, r2
 8027dfa:	695b      	ldr	r3, [r3, #20]
 8027dfc:	961d      	str	r6, [sp, #116]	; 0x74
 8027dfe:	4659      	mov	r1, fp
 8027e00:	464a      	mov	r2, r9
 8027e02:	4798      	blx	r3
 8027e04:	4606      	mov	r6, r0
 8027e06:	2800      	cmp	r0, #0
 8027e08:	d1d5      	bne.n	8027db6 <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 8027e0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027e0c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027e0e:	e713      	b.n	8027c38 <GUI_MEMDEV__WriteToActiveOpaque+0x1ac>
 8027e10:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027e12:	f7fd fd6b 	bl	80258ec <GUI_ALLOC_LockH>
 8027e16:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8027e18:	901a      	str	r0, [sp, #104]	; 0x68
 8027e1a:	2e08      	cmp	r6, #8
 8027e1c:	4681      	mov	r9, r0
 8027e1e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8027e20:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8027e22:	4682      	mov	sl, r0
 8027e24:	d92c      	bls.n	8027e80 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 8027e26:	f836 0b02 	ldrh.w	r0, [r6], #2
 8027e2a:	47a0      	blx	r4
 8027e2c:	47a8      	blx	r5
 8027e2e:	3f01      	subs	r7, #1
 8027e30:	f84a 0b04 	str.w	r0, [sl], #4
 8027e34:	d1f7      	bne.n	8027e26 <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 8027e36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027e38:	2e1f      	cmp	r6, #31
 8027e3a:	d804      	bhi.n	8027e46 <GUI_MEMDEV__WriteToActiveOpaque+0x3ba>
 8027e3c:	4648      	mov	r0, r9
 8027e3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027e40:	4632      	mov	r2, r6
 8027e42:	f001 fb3f 	bl	80294c4 <GUI__CompactPixelIndices>
 8027e46:	ae20      	add	r6, sp, #128	; 0x80
 8027e48:	f8cd 8000 	str.w	r8, [sp]
 8027e4c:	f856 3d18 	ldr.w	r3, [r6, #-24]!
 8027e50:	9610      	str	r6, [sp, #64]	; 0x40
 8027e52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027e54:	9602      	str	r6, [sp, #8]
 8027e56:	2000      	movs	r0, #0
 8027e58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027e5a:	9003      	str	r0, [sp, #12]
 8027e5c:	9605      	str	r6, [sp, #20]
 8027e5e:	9304      	str	r3, [sp, #16]
 8027e60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027e62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027e64:	f8cd 8004 	str.w	r8, [sp, #4]
 8027e68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027e6a:	2301      	movs	r3, #1
 8027e6c:	f7f9 fed4 	bl	8021c18 <LCD_DrawBitmap>
 8027e70:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8027e72:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027e74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027e76:	440e      	add	r6, r1
 8027e78:	9611      	str	r6, [sp, #68]	; 0x44
 8027e7a:	f7fd fd49 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027e7e:	e6df      	b.n	8027c40 <GUI_MEMDEV__WriteToActiveOpaque+0x1b4>
 8027e80:	f816 0b01 	ldrb.w	r0, [r6], #1
 8027e84:	47a0      	blx	r4
 8027e86:	47a8      	blx	r5
 8027e88:	3f01      	subs	r7, #1
 8027e8a:	f84a 0b04 	str.w	r0, [sl], #4
 8027e8e:	d1f7      	bne.n	8027e80 <GUI_MEMDEV__WriteToActiveOpaque+0x3f4>
 8027e90:	e7d1      	b.n	8027e36 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 8027e92:	a81c      	add	r0, sp, #112	; 0x70
 8027e94:	f7fd fd3c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8027e98:	e768      	b.n	8027d6c <GUI_MEMDEV__WriteToActiveOpaque+0x2e0>
 8027e9a:	4638      	mov	r0, r7
 8027e9c:	f7f7 f9c8 	bl	801f230 <GUI_MEMDEV_GetDataPtr>
 8027ea0:	4680      	mov	r8, r0
 8027ea2:	f1b9 0f00 	cmp.w	r9, #0
 8027ea6:	f000 80b2 	beq.w	802800e <GUI_MEMDEV__WriteToActiveOpaque+0x582>
 8027eaa:	4648      	mov	r0, r9
 8027eac:	f7fd fd1e 	bl	80258ec <GUI_ALLOC_LockH>
 8027eb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027eb2:	901c      	str	r0, [sp, #112]	; 0x70
 8027eb4:	2c00      	cmp	r4, #0
 8027eb6:	f340 80a6 	ble.w	8028006 <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 8027eba:	ad1d      	add	r5, sp, #116	; 0x74
 8027ebc:	9513      	str	r5, [sp, #76]	; 0x4c
 8027ebe:	2600      	movs	r6, #0
 8027ec0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8027ec4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8027ec6:	46b2      	mov	sl, r6
 8027ec8:	2501      	movs	r5, #1
 8027eca:	6883      	ldr	r3, [r0, #8]
 8027ecc:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 8027ed0:	695b      	ldr	r3, [r3, #20]
 8027ed2:	4639      	mov	r1, r7
 8027ed4:	4632      	mov	r2, r6
 8027ed6:	4798      	blx	r3
 8027ed8:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 8027edc:	4586      	cmp	lr, r0
 8027ede:	4604      	mov	r4, r0
 8027ee0:	d02e      	beq.n	8027f40 <GUI_MEMDEV__WriteToActiveOpaque+0x4b4>
 8027ee2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027ee4:	2801      	cmp	r0, #1
 8027ee6:	d05c      	beq.n	8027fa2 <GUI_MEMDEV__WriteToActiveOpaque+0x516>
 8027ee8:	b314      	cbz	r4, 8027f30 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 8027eea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8027eee:	44b3      	add	fp, r6
 8027ef0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027ef2:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8027ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027efa:	9102      	str	r1, [sp, #8]
 8027efc:	fb00 830e 	mla	r3, r0, lr, r8
 8027f00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027f02:	9203      	str	r2, [sp, #12]
 8027f04:	9105      	str	r1, [sp, #20]
 8027f06:	4622      	mov	r2, r4
 8027f08:	9304      	str	r3, [sp, #16]
 8027f0a:	4448      	add	r0, r9
 8027f0c:	4659      	mov	r1, fp
 8027f0e:	2301      	movs	r3, #1
 8027f10:	9500      	str	r5, [sp, #0]
 8027f12:	9501      	str	r5, [sp, #4]
 8027f14:	f7f9 fe80 	bl	8021c18 <LCD_DrawBitmap>
 8027f18:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027f1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027f1c:	6883      	ldr	r3, [r0, #8]
 8027f1e:	4422      	add	r2, r4
 8027f20:	695b      	ldr	r3, [r3, #20]
 8027f22:	921d      	str	r2, [sp, #116]	; 0x74
 8027f24:	4639      	mov	r1, r7
 8027f26:	4632      	mov	r2, r6
 8027f28:	4798      	blx	r3
 8027f2a:	4604      	mov	r4, r0
 8027f2c:	2800      	cmp	r0, #0
 8027f2e:	d1df      	bne.n	8027ef0 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 8027f30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027f32:	3601      	adds	r6, #1
 8027f34:	44a0      	add	r8, r4
 8027f36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027f38:	42b4      	cmp	r4, r6
 8027f3a:	dd64      	ble.n	8028006 <GUI_MEMDEV__WriteToActiveOpaque+0x57a>
 8027f3c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027f3e:	e7c4      	b.n	8027eca <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 8027f40:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8027f44:	46cb      	mov	fp, r9
 8027f46:	46b0      	mov	r8, r6
 8027f48:	46b1      	mov	r9, r6
 8027f4a:	4676      	mov	r6, lr
 8027f4c:	e000      	b.n	8027f50 <GUI_MEMDEV__WriteToActiveOpaque+0x4c4>
 8027f4e:	46a0      	mov	r8, r4
 8027f50:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027f52:	6883      	ldr	r3, [r0, #8]
 8027f54:	f108 0401 	add.w	r4, r8, #1
 8027f58:	695b      	ldr	r3, [r3, #20]
 8027f5a:	4622      	mov	r2, r4
 8027f5c:	4639      	mov	r1, r7
 8027f5e:	4798      	blx	r3
 8027f60:	4286      	cmp	r6, r0
 8027f62:	d0f4      	beq.n	8027f4e <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 8027f64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027f66:	9103      	str	r1, [sp, #12]
 8027f68:	464e      	mov	r6, r9
 8027f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027f6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027f70:	9002      	str	r0, [sp, #8]
 8027f72:	46d9      	mov	r9, fp
 8027f74:	46c3      	mov	fp, r8
 8027f76:	ebc6 0e0b 	rsb	lr, r6, fp
 8027f7a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8027f7e:	f8cd 8010 	str.w	r8, [sp, #16]
 8027f82:	f10e 0e01 	add.w	lr, lr, #1
 8027f86:	4431      	add	r1, r6
 8027f88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8027f8a:	9205      	str	r2, [sp, #20]
 8027f8c:	9500      	str	r5, [sp, #0]
 8027f8e:	9501      	str	r5, [sp, #4]
 8027f90:	4673      	mov	r3, lr
 8027f92:	4648      	mov	r0, r9
 8027f94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027f96:	fb06 880e 	mla	r8, r6, lr, r8
 8027f9a:	4626      	mov	r6, r4
 8027f9c:	f7f9 fe3c 	bl	8021c18 <LCD_DrawBitmap>
 8027fa0:	e7c9      	b.n	8027f36 <GUI_MEMDEV__WriteToActiveOpaque+0x4aa>
 8027fa2:	2c00      	cmp	r4, #0
 8027fa4:	d0c4      	beq.n	8027f30 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 8027fa6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8027faa:	44b6      	add	lr, r6
 8027fac:	46b3      	mov	fp, r6
 8027fae:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8027fb2:	4626      	mov	r6, r4
 8027fb4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8027fb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027fb8:	9003      	str	r0, [sp, #12]
 8027fba:	2c00      	cmp	r4, #0
 8027fbc:	46a6      	mov	lr, r4
 8027fbe:	bfb8      	it	lt
 8027fc0:	f104 0e07 	addlt.w	lr, r4, #7
 8027fc4:	f004 0c07 	and.w	ip, r4, #7
 8027fc8:	eb09 0004 	add.w	r0, r9, r4
 8027fcc:	eb08 04ee 	add.w	r4, r8, lr, asr #3
 8027fd0:	9404      	str	r4, [sp, #16]
 8027fd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027fd6:	f8cd c018 	str.w	ip, [sp, #24]
 8027fda:	4632      	mov	r2, r6
 8027fdc:	2301      	movs	r3, #1
 8027fde:	9500      	str	r5, [sp, #0]
 8027fe0:	9501      	str	r5, [sp, #4]
 8027fe2:	9502      	str	r5, [sp, #8]
 8027fe4:	9405      	str	r4, [sp, #20]
 8027fe6:	f7f9 fcf7 	bl	80219d8 <LCD__DrawBitmap_1bpp>
 8027fea:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027fec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027fee:	6883      	ldr	r3, [r0, #8]
 8027ff0:	4432      	add	r2, r6
 8027ff2:	695b      	ldr	r3, [r3, #20]
 8027ff4:	921d      	str	r2, [sp, #116]	; 0x74
 8027ff6:	4639      	mov	r1, r7
 8027ff8:	465a      	mov	r2, fp
 8027ffa:	4798      	blx	r3
 8027ffc:	4606      	mov	r6, r0
 8027ffe:	2800      	cmp	r0, #0
 8028000:	d1d8      	bne.n	8027fb4 <GUI_MEMDEV__WriteToActiveOpaque+0x528>
 8028002:	465e      	mov	r6, fp
 8028004:	e794      	b.n	8027f30 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 8028006:	a81c      	add	r0, sp, #112	; 0x70
 8028008:	f7fd fc82 	bl	8025910 <GUI_ALLOC_UnlockH>
 802800c:	e545      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 802800e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028010:	9502      	str	r5, [sp, #8]
 8028012:	2401      	movs	r4, #1
 8028014:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8028016:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028018:	9004      	str	r0, [sp, #16]
 802801a:	9603      	str	r6, [sp, #12]
 802801c:	9505      	str	r5, [sp, #20]
 802801e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028020:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028022:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8028024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028026:	9400      	str	r4, [sp, #0]
 8028028:	9401      	str	r4, [sp, #4]
 802802a:	f7f9 fdf5 	bl	8021c18 <LCD_DrawBitmap>
 802802e:	e534      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8028030:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028032:	fb08 f005 	mul.w	r0, r8, r5
 8028036:	f7fd fc41 	bl	80258bc <GUI_ALLOC_AllocNoInit>
 802803a:	900e      	str	r0, [sp, #56]	; 0x38
 802803c:	2800      	cmp	r0, #0
 802803e:	f43f ad2c 	beq.w	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 8028042:	f7fd fc53 	bl	80258ec <GUI_ALLOC_LockH>
 8028046:	901e      	str	r0, [sp, #120]	; 0x78
 8028048:	4638      	mov	r0, r7
 802804a:	f7fd fc4f 	bl	80258ec <GUI_ALLOC_LockH>
 802804e:	901c      	str	r0, [sp, #112]	; 0x70
 8028050:	6925      	ldr	r5, [r4, #16]
 8028052:	f100 0618 	add.w	r6, r0, #24
 8028056:	2d00      	cmp	r5, #0
 8028058:	f000 8132 	beq.w	80282c0 <GUI_MEMDEV__WriteToActiveOpaque+0x834>
 802805c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802805e:	2d02      	cmp	r5, #2
 8028060:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8028064:	f04f 0701 	mov.w	r7, #1
 8028068:	f000 8107 	beq.w	802827a <GUI_MEMDEV__WriteToActiveOpaque+0x7ee>
 802806c:	2d04      	cmp	r5, #4
 802806e:	f000 80e1 	beq.w	8028234 <GUI_MEMDEV__WriteToActiveOpaque+0x7a8>
 8028072:	2d01      	cmp	r5, #1
 8028074:	f000 8183 	beq.w	802837e <GUI_MEMDEV__WriteToActiveOpaque+0x8f2>
 8028078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802807a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802807c:	2300      	movs	r3, #0
 802807e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028080:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028082:	9303      	str	r3, [sp, #12]
 8028084:	9305      	str	r3, [sp, #20]
 8028086:	9104      	str	r1, [sp, #16]
 8028088:	2301      	movs	r3, #1
 802808a:	4629      	mov	r1, r5
 802808c:	9700      	str	r7, [sp, #0]
 802808e:	9701      	str	r7, [sp, #4]
 8028090:	9602      	str	r6, [sp, #8]
 8028092:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028094:	4642      	mov	r2, r8
 8028096:	441d      	add	r5, r3
 8028098:	f7f9 fdbe 	bl	8021c18 <LCD_DrawBitmap>
 802809c:	3c01      	subs	r4, #1
 802809e:	d1ed      	bne.n	802807c <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 80280a0:	4650      	mov	r0, sl
 80280a2:	f7fd fc35 	bl	8025910 <GUI_ALLOC_UnlockH>
 80280a6:	a81e      	add	r0, sp, #120	; 0x78
 80280a8:	f7fd fc32 	bl	8025910 <GUI_ALLOC_UnlockH>
 80280ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80280ae:	f7fd fd2f 	bl	8025b10 <GUI_ALLOC_Free>
 80280b2:	e4f2      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 80280b4:	2401      	movs	r4, #1
 80280b6:	3218      	adds	r2, #24
 80280b8:	2500      	movs	r5, #0
 80280ba:	9204      	str	r2, [sp, #16]
 80280bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80280c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80280c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80280c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80280c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280ca:	9400      	str	r4, [sp, #0]
 80280cc:	4642      	mov	r2, r8
 80280ce:	9401      	str	r4, [sp, #4]
 80280d0:	9505      	str	r5, [sp, #20]
 80280d2:	f7f9 fda1 	bl	8021c18 <LCD_DrawBitmap>
 80280d6:	e4e0      	b.n	8027a9a <GUI_MEMDEV__WriteToActiveOpaque+0xe>
 80280d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80280da:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80280de:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80280e2:	e019      	b.n	8028118 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 80280e4:	2e04      	cmp	r6, #4
 80280e6:	d036      	beq.n	8028156 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 80280e8:	2e01      	cmp	r6, #1
 80280ea:	d026      	beq.n	802813a <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 80280ec:	2001      	movs	r0, #1
 80280ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80280f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80280f2:	9000      	str	r0, [sp, #0]
 80280f4:	9001      	str	r0, [sp, #4]
 80280f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80280f8:	9602      	str	r6, [sp, #8]
 80280fa:	2000      	movs	r0, #0
 80280fc:	9003      	str	r0, [sp, #12]
 80280fe:	9005      	str	r0, [sp, #20]
 8028100:	9304      	str	r3, [sp, #16]
 8028102:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028104:	2301      	movs	r3, #1
 8028106:	4642      	mov	r2, r8
 8028108:	18cf      	adds	r7, r1, r3
 802810a:	f7f9 fd85 	bl	8021c18 <LCD_DrawBitmap>
 802810e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8028110:	3e01      	subs	r6, #1
 8028112:	9609      	str	r6, [sp, #36]	; 0x24
 8028114:	d02c      	beq.n	8028170 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8028116:	970c      	str	r7, [sp, #48]	; 0x30
 8028118:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802811a:	2e02      	cmp	r6, #2
 802811c:	d1e2      	bne.n	80280e4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 802811e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8028122:	464f      	mov	r7, r9
 8028124:	4646      	mov	r6, r8
 8028126:	f837 0b02 	ldrh.w	r0, [r7], #2
 802812a:	47a8      	blx	r5
 802812c:	47a0      	blx	r4
 802812e:	3e01      	subs	r6, #1
 8028130:	f82a 0b02 	strh.w	r0, [sl], #2
 8028134:	d1f7      	bne.n	8028126 <GUI_MEMDEV__WriteToActiveOpaque+0x69a>
 8028136:	44d9      	add	r9, fp
 8028138:	e7d8      	b.n	80280ec <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 802813a:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 802813e:	464f      	mov	r7, r9
 8028140:	4646      	mov	r6, r8
 8028142:	f837 0b02 	ldrh.w	r0, [r7], #2
 8028146:	47a8      	blx	r5
 8028148:	47a0      	blx	r4
 802814a:	3e01      	subs	r6, #1
 802814c:	f80a 0b01 	strb.w	r0, [sl], #1
 8028150:	d1f7      	bne.n	8028142 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8028152:	44d9      	add	r9, fp
 8028154:	e7ca      	b.n	80280ec <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8028156:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8028158:	46ca      	mov	sl, r9
 802815a:	4646      	mov	r6, r8
 802815c:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8028160:	47a8      	blx	r5
 8028162:	47a0      	blx	r4
 8028164:	3e01      	subs	r6, #1
 8028166:	f847 0b04 	str.w	r0, [r7], #4
 802816a:	d1f7      	bne.n	802815c <GUI_MEMDEV__WriteToActiveOpaque+0x6d0>
 802816c:	44d9      	add	r9, fp
 802816e:	e7bd      	b.n	80280ec <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8028170:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8028174:	e5d5      	b.n	8027d22 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8028176:	f7fd fbb9 	bl	80258ec <GUI_ALLOC_LockH>
 802817a:	901d      	str	r0, [sp, #116]	; 0x74
 802817c:	2800      	cmp	r0, #0
 802817e:	f43f add0 	beq.w	8027d22 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8028182:	ea4f 0548 	mov.w	r5, r8, lsl #1
 8028186:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8028188:	950d      	str	r5, [sp, #52]	; 0x34
 802818a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 802818e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8028192:	e01a      	b.n	80281ca <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 8028194:	f1ba 0f04 	cmp.w	sl, #4
 8028198:	d032      	beq.n	8028200 <GUI_MEMDEV__WriteToActiveOpaque+0x774>
 802819a:	f1ba 0f01 	cmp.w	sl, #1
 802819e:	d028      	beq.n	80281f2 <GUI_MEMDEV__WriteToActiveOpaque+0x766>
 80281a0:	2300      	movs	r3, #0
 80281a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80281a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80281a6:	9502      	str	r5, [sp, #8]
 80281a8:	2001      	movs	r0, #1
 80281aa:	9000      	str	r0, [sp, #0]
 80281ac:	9001      	str	r0, [sp, #4]
 80281ae:	9303      	str	r3, [sp, #12]
 80281b0:	9305      	str	r3, [sp, #20]
 80281b2:	9204      	str	r2, [sp, #16]
 80281b4:	4639      	mov	r1, r7
 80281b6:	2301      	movs	r3, #1
 80281b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80281ba:	4642      	mov	r2, r8
 80281bc:	441f      	add	r7, r3
 80281be:	f7f9 fd2b 	bl	8021c18 <LCD_DrawBitmap>
 80281c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80281c4:	3d01      	subs	r5, #1
 80281c6:	9509      	str	r5, [sp, #36]	; 0x24
 80281c8:	d02b      	beq.n	8028222 <GUI_MEMDEV__WriteToActiveOpaque+0x796>
 80281ca:	f1ba 0f02 	cmp.w	sl, #2
 80281ce:	d1e1      	bne.n	8028194 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 80281d0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80281d4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80281d6:	4648      	mov	r0, r9
 80281d8:	4642      	mov	r2, r8
 80281da:	4653      	mov	r3, sl
 80281dc:	6975      	ldr	r5, [r6, #20]
 80281de:	47a8      	blx	r5
 80281e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80281e2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80281e4:	44a9      	add	r9, r5
 80281e6:	4659      	mov	r1, fp
 80281e8:	4642      	mov	r2, r8
 80281ea:	4653      	mov	r3, sl
 80281ec:	6925      	ldr	r5, [r4, #16]
 80281ee:	47a8      	blx	r5
 80281f0:	e7d6      	b.n	80281a0 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 80281f2:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80281f6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80281f8:	4648      	mov	r0, r9
 80281fa:	4642      	mov	r2, r8
 80281fc:	2302      	movs	r3, #2
 80281fe:	e7ed      	b.n	80281dc <GUI_MEMDEV__WriteToActiveOpaque+0x750>
 8028200:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8028204:	991d      	ldr	r1, [sp, #116]	; 0x74
 8028206:	6975      	ldr	r5, [r6, #20]
 8028208:	4648      	mov	r0, r9
 802820a:	4642      	mov	r2, r8
 802820c:	2302      	movs	r3, #2
 802820e:	47a8      	blx	r5
 8028210:	6925      	ldr	r5, [r4, #16]
 8028212:	981d      	ldr	r0, [sp, #116]	; 0x74
 8028214:	4659      	mov	r1, fp
 8028216:	4642      	mov	r2, r8
 8028218:	4653      	mov	r3, sl
 802821a:	47a8      	blx	r5
 802821c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802821e:	44a9      	add	r9, r5
 8028220:	e7be      	b.n	80281a0 <GUI_MEMDEV__WriteToActiveOpaque+0x714>
 8028222:	a81d      	add	r0, sp, #116	; 0x74
 8028224:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028228:	f7fd fb72 	bl	8025910 <GUI_ALLOC_UnlockH>
 802822c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802822e:	f7fd fc6f 	bl	8025b10 <GUI_ALLOC_Free>
 8028232:	e576      	b.n	8027d22 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8028234:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028236:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802823a:	46a4      	mov	ip, r4
 802823c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8028240:	f8cd c020 	str.w	ip, [sp, #32]
 8028244:	4630      	mov	r0, r6
 8028246:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028248:	4642      	mov	r2, r8
 802824a:	2304      	movs	r3, #4
 802824c:	47a0      	blx	r4
 802824e:	2300      	movs	r3, #0
 8028250:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028252:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028254:	9303      	str	r3, [sp, #12]
 8028256:	9305      	str	r3, [sp, #20]
 8028258:	9204      	str	r2, [sp, #16]
 802825a:	4659      	mov	r1, fp
 802825c:	2301      	movs	r3, #1
 802825e:	9700      	str	r7, [sp, #0]
 8028260:	9701      	str	r7, [sp, #4]
 8028262:	9402      	str	r4, [sp, #8]
 8028264:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028266:	4642      	mov	r2, r8
 8028268:	449b      	add	fp, r3
 802826a:	f7f9 fcd5 	bl	8021c18 <LCD_DrawBitmap>
 802826e:	3d01      	subs	r5, #1
 8028270:	444e      	add	r6, r9
 8028272:	f8dd c020 	ldr.w	ip, [sp, #32]
 8028276:	d1e1      	bne.n	802823c <GUI_MEMDEV__WriteToActiveOpaque+0x7b0>
 8028278:	e712      	b.n	80280a0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 802827a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802827c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8028280:	46a4      	mov	ip, r4
 8028282:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8028286:	f8cd c020 	str.w	ip, [sp, #32]
 802828a:	4630      	mov	r0, r6
 802828c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802828e:	4642      	mov	r2, r8
 8028290:	2302      	movs	r3, #2
 8028292:	47a0      	blx	r4
 8028294:	2300      	movs	r3, #0
 8028296:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028298:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802829a:	9303      	str	r3, [sp, #12]
 802829c:	9305      	str	r3, [sp, #20]
 802829e:	9204      	str	r2, [sp, #16]
 80282a0:	4659      	mov	r1, fp
 80282a2:	2301      	movs	r3, #1
 80282a4:	9700      	str	r7, [sp, #0]
 80282a6:	9701      	str	r7, [sp, #4]
 80282a8:	9402      	str	r4, [sp, #8]
 80282aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80282ac:	4642      	mov	r2, r8
 80282ae:	449b      	add	fp, r3
 80282b0:	f7f9 fcb2 	bl	8021c18 <LCD_DrawBitmap>
 80282b4:	3d01      	subs	r5, #1
 80282b6:	444e      	add	r6, r9
 80282b8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80282bc:	d1e1      	bne.n	8028282 <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 80282be:	e6ef      	b.n	80280a0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 80282c0:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80282c4:	2701      	movs	r7, #1
 80282c6:	e01a      	b.n	80282fe <GUI_MEMDEV__WriteToActiveOpaque+0x872>
 80282c8:	2804      	cmp	r0, #4
 80282ca:	d045      	beq.n	8028358 <GUI_MEMDEV__WriteToActiveOpaque+0x8cc>
 80282cc:	2801      	cmp	r0, #1
 80282ce:	d030      	beq.n	8028332 <GUI_MEMDEV__WriteToActiveOpaque+0x8a6>
 80282d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80282d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80282d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80282d6:	9202      	str	r2, [sp, #8]
 80282d8:	9304      	str	r3, [sp, #16]
 80282da:	9700      	str	r7, [sp, #0]
 80282dc:	2301      	movs	r3, #1
 80282de:	9701      	str	r7, [sp, #4]
 80282e0:	9503      	str	r5, [sp, #12]
 80282e2:	9505      	str	r5, [sp, #20]
 80282e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80282e6:	4642      	mov	r2, r8
 80282e8:	eb01 0b03 	add.w	fp, r1, r3
 80282ec:	f7f9 fc94 	bl	8021c18 <LCD_DrawBitmap>
 80282f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80282f2:	3b01      	subs	r3, #1
 80282f4:	9309      	str	r3, [sp, #36]	; 0x24
 80282f6:	f43f aed3 	beq.w	80280a0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 80282fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80282fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8028300:	2802      	cmp	r0, #2
 8028302:	d1e1      	bne.n	80282c8 <GUI_MEMDEV__WriteToActiveOpaque+0x83c>
 8028304:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028306:	46b3      	mov	fp, r6
 8028308:	46c1      	mov	r9, r8
 802830a:	4643      	mov	r3, r8
 802830c:	46b0      	mov	r8, r6
 802830e:	4626      	mov	r6, r4
 8028310:	460c      	mov	r4, r1
 8028312:	f85b 0b04 	ldr.w	r0, [fp], #4
 8028316:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028318:	9308      	str	r3, [sp, #32]
 802831a:	4790      	blx	r2
 802831c:	f1b9 0901 	subs.w	r9, r9, #1
 8028320:	f824 0b02 	strh.w	r0, [r4], #2
 8028324:	9b08      	ldr	r3, [sp, #32]
 8028326:	d1f4      	bne.n	8028312 <GUI_MEMDEV__WriteToActiveOpaque+0x886>
 8028328:	4634      	mov	r4, r6
 802832a:	4646      	mov	r6, r8
 802832c:	4426      	add	r6, r4
 802832e:	4698      	mov	r8, r3
 8028330:	e7ce      	b.n	80282d0 <GUI_MEMDEV__WriteToActiveOpaque+0x844>
 8028332:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028334:	46b3      	mov	fp, r6
 8028336:	46c1      	mov	r9, r8
 8028338:	4643      	mov	r3, r8
 802833a:	46b0      	mov	r8, r6
 802833c:	4626      	mov	r6, r4
 802833e:	460c      	mov	r4, r1
 8028340:	f85b 0b04 	ldr.w	r0, [fp], #4
 8028344:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028346:	9308      	str	r3, [sp, #32]
 8028348:	4788      	blx	r1
 802834a:	f1b9 0901 	subs.w	r9, r9, #1
 802834e:	f804 0b01 	strb.w	r0, [r4], #1
 8028352:	9b08      	ldr	r3, [sp, #32]
 8028354:	d1f4      	bne.n	8028340 <GUI_MEMDEV__WriteToActiveOpaque+0x8b4>
 8028356:	e7e7      	b.n	8028328 <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 8028358:	991e      	ldr	r1, [sp, #120]	; 0x78
 802835a:	46b3      	mov	fp, r6
 802835c:	46c1      	mov	r9, r8
 802835e:	4643      	mov	r3, r8
 8028360:	46b0      	mov	r8, r6
 8028362:	4626      	mov	r6, r4
 8028364:	460c      	mov	r4, r1
 8028366:	f85b 0b04 	ldr.w	r0, [fp], #4
 802836a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802836c:	9308      	str	r3, [sp, #32]
 802836e:	4788      	blx	r1
 8028370:	f1b9 0901 	subs.w	r9, r9, #1
 8028374:	f844 0b04 	str.w	r0, [r4], #4
 8028378:	9b08      	ldr	r3, [sp, #32]
 802837a:	d1f4      	bne.n	8028366 <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 802837c:	e7d4      	b.n	8028328 <GUI_MEMDEV__WriteToActiveOpaque+0x89c>
 802837e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028380:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8028384:	46a4      	mov	ip, r4
 8028386:	f8dc 4010 	ldr.w	r4, [ip, #16]
 802838a:	f8cd c020 	str.w	ip, [sp, #32]
 802838e:	4630      	mov	r0, r6
 8028390:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028392:	4642      	mov	r2, r8
 8028394:	2301      	movs	r3, #1
 8028396:	47a0      	blx	r4
 8028398:	2300      	movs	r3, #0
 802839a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802839c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802839e:	9303      	str	r3, [sp, #12]
 80283a0:	9305      	str	r3, [sp, #20]
 80283a2:	9204      	str	r2, [sp, #16]
 80283a4:	4659      	mov	r1, fp
 80283a6:	2301      	movs	r3, #1
 80283a8:	9700      	str	r7, [sp, #0]
 80283aa:	9701      	str	r7, [sp, #4]
 80283ac:	9402      	str	r4, [sp, #8]
 80283ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80283b0:	4642      	mov	r2, r8
 80283b2:	449b      	add	fp, r3
 80283b4:	f7f9 fc30 	bl	8021c18 <LCD_DrawBitmap>
 80283b8:	3d01      	subs	r5, #1
 80283ba:	444e      	add	r6, r9
 80283bc:	f8dd c020 	ldr.w	ip, [sp, #32]
 80283c0:	d1e1      	bne.n	8028386 <GUI_MEMDEV__WriteToActiveOpaque+0x8fa>
 80283c2:	e66d      	b.n	80280a0 <GUI_MEMDEV__WriteToActiveOpaque+0x614>

080283c4 <_WriteToActiveAlpha>:
 80283c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283c8:	b093      	sub	sp, #76	; 0x4c
 80283ca:	4698      	mov	r8, r3
 80283cc:	460e      	mov	r6, r1
 80283ce:	4614      	mov	r4, r2
 80283d0:	9009      	str	r0, [sp, #36]	; 0x24
 80283d2:	f7fd fa8b 	bl	80258ec <GUI_ALLOC_LockH>
 80283d6:	4603      	mov	r3, r0
 80283d8:	a812      	add	r0, sp, #72	; 0x48
 80283da:	681a      	ldr	r2, [r3, #0]
 80283dc:	4d5a      	ldr	r5, [pc, #360]	; (8028548 <_WriteToActiveAlpha+0x184>)
 80283de:	6912      	ldr	r2, [r2, #16]
 80283e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80283e4:	6852      	ldr	r2, [r2, #4]
 80283e6:	9208      	str	r2, [sp, #32]
 80283e8:	891a      	ldrh	r2, [r3, #8]
 80283ea:	9207      	str	r2, [sp, #28]
 80283ec:	f8b3 900a 	ldrh.w	r9, [r3, #10]
 80283f0:	f7fd fa8e 	bl	8025910 <GUI_ALLOC_UnlockH>
 80283f4:	682b      	ldr	r3, [r5, #0]
 80283f6:	4a55      	ldr	r2, [pc, #340]	; (802854c <_WriteToActiveAlpha+0x188>)
 80283f8:	7c5b      	ldrb	r3, [r3, #17]
 80283fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80283fe:	68c3      	ldr	r3, [r0, #12]
 8028400:	2108      	movs	r1, #8
 8028402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028404:	4798      	blx	r3
 8028406:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802840a:	f8d8 2000 	ldr.w	r2, [r8]
 802840e:	930a      	str	r3, [sp, #40]	; 0x28
 8028410:	2817      	cmp	r0, #23
 8028412:	bf94      	ite	ls
 8028414:	4682      	movls	sl, r0
 8028416:	f04f 0a20 	movhi.w	sl, #32
 802841a:	2000      	movs	r0, #0
 802841c:	920e      	str	r2, [sp, #56]	; 0x38
 802841e:	f7fa fb69 	bl	8022af4 <GUI__AllocAlphaBuffer>
 8028422:	b110      	cbz	r0, 802842a <_WriteToActiveAlpha+0x66>
 8028424:	b013      	add	sp, #76	; 0x4c
 8028426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802842a:	9a07      	ldr	r2, [sp, #28]
 802842c:	682b      	ldr	r3, [r5, #0]
 802842e:	b212      	sxth	r2, r2
 8028430:	4615      	mov	r5, r2
 8028432:	920d      	str	r2, [sp, #52]	; 0x34
 8028434:	4435      	add	r5, r6
 8028436:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802843a:	3d01      	subs	r5, #1
 802843c:	1aad      	subs	r5, r5, r2
 802843e:	2d00      	cmp	r5, #0
 8028440:	bfca      	itet	gt
 8028442:	9a0d      	ldrgt	r2, [sp, #52]	; 0x34
 8028444:	9d0d      	ldrle	r5, [sp, #52]	; 0x34
 8028446:	ebc5 0502 	rsbgt	r5, r5, r2
 802844a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802844e:	42b2      	cmp	r2, r6
 8028450:	bfc3      	ittte	gt
 8028452:	ebc6 0102 	rsbgt	r1, r6, r2
 8028456:	ebc1 0505 	rsbgt	r5, r1, r5
 802845a:	4616      	movgt	r6, r2
 802845c:	2100      	movle	r1, #0
 802845e:	2d00      	cmp	r5, #0
 8028460:	dde0      	ble.n	8028424 <_WriteToActiveAlpha+0x60>
 8028462:	fa0f f989 	sxth.w	r9, r9
 8028466:	eb09 0204 	add.w	r2, r9, r4
 802846a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 802846e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8028472:	3a01      	subs	r2, #1
 8028474:	1a12      	subs	r2, r2, r0
 8028476:	2a00      	cmp	r2, #0
 8028478:	bfc8      	it	gt
 802847a:	ebc2 0909 	rsbgt	r9, r2, r9
 802847e:	42a3      	cmp	r3, r4
 8028480:	bfc3      	ittte	gt
 8028482:	ebc4 0703 	rsbgt	r7, r4, r3
 8028486:	ebc7 0909 	rsbgt	r9, r7, r9
 802848a:	461c      	movgt	r4, r3
 802848c:	2700      	movle	r7, #0
 802848e:	f1b9 0f00 	cmp.w	r9, #0
 8028492:	ddc7      	ble.n	8028424 <_WriteToActiveAlpha+0x60>
 8028494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028496:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802849a:	44a1      	add	r9, r4
 802849c:	fb07 1703 	mla	r7, r7, r3, r1
 80284a0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80284a4:	00bf      	lsls	r7, r7, #2
 80284a6:	46b1      	mov	r9, r6
 80284a8:	e01b      	b.n	80284e2 <_WriteToActiveAlpha+0x11e>
 80284aa:	4630      	mov	r0, r6
 80284ac:	4631      	mov	r1, r6
 80284ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80284b0:	2304      	movs	r3, #4
 80284b2:	47e0      	blx	ip
 80284b4:	2301      	movs	r3, #1
 80284b6:	2200      	movs	r2, #0
 80284b8:	9604      	str	r6, [sp, #16]
 80284ba:	9e07      	ldr	r6, [sp, #28]
 80284bc:	9203      	str	r2, [sp, #12]
 80284be:	9205      	str	r2, [sp, #20]
 80284c0:	4621      	mov	r1, r4
 80284c2:	f04f 0e04 	mov.w	lr, #4
 80284c6:	f8cd a008 	str.w	sl, [sp, #8]
 80284ca:	9300      	str	r3, [sp, #0]
 80284cc:	9301      	str	r3, [sp, #4]
 80284ce:	4648      	mov	r0, r9
 80284d0:	462a      	mov	r2, r5
 80284d2:	441c      	add	r4, r3
 80284d4:	fb16 770e 	smlabb	r7, r6, lr, r7
 80284d8:	f7f9 fb9e 	bl	8021c18 <LCD_DrawBitmap>
 80284dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80284de:	42b4      	cmp	r4, r6
 80284e0:	d0a0      	beq.n	8028424 <_WriteToActiveAlpha+0x60>
 80284e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80284e4:	f7f6 fea4 	bl	801f230 <GUI_MEMDEV_GetDataPtr>
 80284e8:	9e08      	ldr	r6, [sp, #32]
 80284ea:	9600      	str	r6, [sp, #0]
 80284ec:	ab11      	add	r3, sp, #68	; 0x44
 80284ee:	19c2      	adds	r2, r0, r7
 80284f0:	9301      	str	r3, [sp, #4]
 80284f2:	4648      	mov	r0, r9
 80284f4:	4621      	mov	r1, r4
 80284f6:	462b      	mov	r3, r5
 80284f8:	f7fa f9aa 	bl	8022850 <GUI__DoAlphaBlending>
 80284fc:	4606      	mov	r6, r0
 80284fe:	2800      	cmp	r0, #0
 8028500:	d090      	beq.n	8028424 <_WriteToActiveAlpha+0x60>
 8028502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028504:	4b12      	ldr	r3, [pc, #72]	; (8028550 <_WriteToActiveAlpha+0x18c>)
 8028506:	429a      	cmp	r2, r3
 8028508:	d0d4      	beq.n	80284b4 <_WriteToActiveAlpha+0xf0>
 802850a:	4629      	mov	r1, r5
 802850c:	4652      	mov	r2, sl
 802850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028510:	f001 f886 	bl	8029620 <GUI__CompactPixelIndicesEx>
 8028514:	2800      	cmp	r0, #0
 8028516:	d1cd      	bne.n	80284b4 <_WriteToActiveAlpha+0xf0>
 8028518:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 802851c:	f8de c010 	ldr.w	ip, [lr, #16]
 8028520:	f1bc 0f00 	cmp.w	ip, #0
 8028524:	d1c1      	bne.n	80284aa <_WriteToActiveAlpha+0xe6>
 8028526:	46a0      	mov	r8, r4
 8028528:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 802852c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802852e:	950f      	str	r5, [sp, #60]	; 0x3c
 8028530:	4635      	mov	r5, r6
 8028532:	6828      	ldr	r0, [r5, #0]
 8028534:	47a0      	blx	r4
 8028536:	f1bb 0b01 	subs.w	fp, fp, #1
 802853a:	f845 0b04 	str.w	r0, [r5], #4
 802853e:	d1f8      	bne.n	8028532 <_WriteToActiveAlpha+0x16e>
 8028540:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028542:	4644      	mov	r4, r8
 8028544:	e7b6      	b.n	80284b4 <_WriteToActiveAlpha+0xf0>
 8028546:	bf00      	nop
 8028548:	20000280 	.word	0x20000280
 802854c:	2002cc24 	.word	0x2002cc24
 8028550:	08025e09 	.word	0x08025e09

08028554 <GUI_MEMDEV__WriteToActiveAlpha>:
 8028554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028558:	4e55      	ldr	r6, [pc, #340]	; (80286b0 <GUI_MEMDEV__WriteToActiveAlpha+0x15c>)
 802855a:	4b56      	ldr	r3, [pc, #344]	; (80286b4 <GUI_MEMDEV__WriteToActiveAlpha+0x160>)
 802855c:	6835      	ldr	r5, [r6, #0]
 802855e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80286c0 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>
 8028562:	7c6c      	ldrb	r4, [r5, #17]
 8028564:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
 8028568:	f8d9 3000 	ldr.w	r3, [r9]
 802856c:	f8de c010 	ldr.w	ip, [lr, #16]
 8028570:	b08b      	sub	sp, #44	; 0x2c
 8028572:	4680      	mov	r8, r0
 8028574:	460c      	mov	r4, r1
 8028576:	4617      	mov	r7, r2
 8028578:	b153      	cbz	r3, 8028590 <GUI_MEMDEV__WriteToActiveAlpha+0x3c>
 802857a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 802857c:	b172      	cbz	r2, 802859c <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 802857e:	4a4e      	ldr	r2, [pc, #312]	; (80286b8 <GUI_MEMDEV__WriteToActiveAlpha+0x164>)
 8028580:	ebbc 0302 	subs.w	r3, ip, r2
 8028584:	425a      	negs	r2, r3
 8028586:	415a      	adcs	r2, r3
 8028588:	4640      	mov	r0, r8
 802858a:	b98a      	cbnz	r2, 80285b0 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 802858c:	4621      	mov	r1, r4
 802858e:	463a      	mov	r2, r7
 8028590:	4663      	mov	r3, ip
 8028592:	f7ff ff17 	bl	80283c4 <_WriteToActiveAlpha>
 8028596:	b00b      	add	sp, #44	; 0x2c
 8028598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802859c:	f8de 200c 	ldr.w	r2, [lr, #12]
 80285a0:	6812      	ldr	r2, [r2, #0]
 80285a2:	f1d2 0201 	rsbs	r2, r2, #1
 80285a6:	bf38      	it	cc
 80285a8:	2200      	movcc	r2, #0
 80285aa:	4640      	mov	r0, r8
 80285ac:	2a00      	cmp	r2, #0
 80285ae:	d0ed      	beq.n	802858c <GUI_MEMDEV__WriteToActiveAlpha+0x38>
 80285b0:	f7fd f99c 	bl	80258ec <GUI_ALLOC_LockH>
 80285b4:	4602      	mov	r2, r0
 80285b6:	a80a      	add	r0, sp, #40	; 0x28
 80285b8:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 80285bc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80285c0:	8955      	ldrh	r5, [r2, #10]
 80285c2:	68d2      	ldr	r2, [r2, #12]
 80285c4:	9207      	str	r2, [sp, #28]
 80285c6:	f7fd f9a3 	bl	8025910 <GUI_ALLOC_UnlockH>
 80285ca:	6830      	ldr	r0, [r6, #0]
 80285cc:	eb0b 0204 	add.w	r2, fp, r4
 80285d0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80285d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80285d8:	3a01      	subs	r2, #1
 80285da:	1ad2      	subs	r2, r2, r3
 80285dc:	2a00      	cmp	r2, #0
 80285de:	bfcc      	ite	gt
 80285e0:	ebc2 0a0b 	rsbgt	sl, r2, fp
 80285e4:	46da      	movle	sl, fp
 80285e6:	428c      	cmp	r4, r1
 80285e8:	bfbd      	ittte	lt
 80285ea:	ebc4 0301 	rsblt	r3, r4, r1
 80285ee:	ebc3 0a0a 	rsblt	sl, r3, sl
 80285f2:	460c      	movlt	r4, r1
 80285f4:	2300      	movge	r3, #0
 80285f6:	f1ba 0f00 	cmp.w	sl, #0
 80285fa:	ddcc      	ble.n	8028596 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 80285fc:	b22d      	sxth	r5, r5
 80285fe:	19e9      	adds	r1, r5, r7
 8028600:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8028604:	3901      	subs	r1, #1
 8028606:	ebcc 0101 	rsb	r1, ip, r1
 802860a:	2900      	cmp	r1, #0
 802860c:	bfc8      	it	gt
 802860e:	ebc1 0505 	rsbgt	r5, r1, r5
 8028612:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8028616:	428f      	cmp	r7, r1
 8028618:	bfbd      	ittte	lt
 802861a:	ebc7 0c01 	rsblt	ip, r7, r1
 802861e:	ebcc 0505 	rsblt	r5, ip, r5
 8028622:	460f      	movlt	r7, r1
 8028624:	f04f 0c00 	movge.w	ip, #0
 8028628:	2d00      	cmp	r5, #0
 802862a:	ddb4      	ble.n	8028596 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 802862c:	4640      	mov	r0, r8
 802862e:	9305      	str	r3, [sp, #20]
 8028630:	f8cd c018 	str.w	ip, [sp, #24]
 8028634:	f7f6 fdfc 	bl	801f230 <GUI_MEMDEV_GetDataPtr>
 8028638:	6836      	ldr	r6, [r6, #0]
 802863a:	9b05      	ldr	r3, [sp, #20]
 802863c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8028640:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8028642:	fb0c 330b 	mla	r3, ip, fp, r3
 8028646:	eb00 0883 	add.w	r8, r0, r3, lsl #2
 802864a:	b319      	cbz	r1, 8028694 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 802864c:	4608      	mov	r0, r1
 802864e:	f7fd f94d 	bl	80258ec <GUI_ALLOC_LockH>
 8028652:	4606      	mov	r6, r0
 8028654:	a80a      	add	r0, sp, #40	; 0x28
 8028656:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802865a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 802865e:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8028662:	f840 6d04 	str.w	r6, [r0, #-4]!
 8028666:	1a7f      	subs	r7, r7, r1
 8028668:	3618      	adds	r6, #24
 802866a:	fb0b 6607 	mla	r6, fp, r7, r6
 802866e:	1ae4      	subs	r4, r4, r3
 8028670:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8028674:	f7fd f94c 	bl	8025910 <GUI_ALLOC_UnlockH>
 8028678:	2c00      	cmp	r4, #0
 802867a:	d08c      	beq.n	8028596 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 802867c:	9f07      	ldr	r7, [sp, #28]
 802867e:	f8cd b000 	str.w	fp, [sp]
 8028682:	9701      	str	r7, [sp, #4]
 8028684:	f8d9 6000 	ldr.w	r6, [r9]
 8028688:	4620      	mov	r0, r4
 802868a:	4641      	mov	r1, r8
 802868c:	4652      	mov	r2, sl
 802868e:	462b      	mov	r3, r5
 8028690:	47b0      	blx	r6
 8028692:	e780      	b.n	8028596 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 8028694:	7c70      	ldrb	r0, [r6, #17]
 8028696:	4e09      	ldr	r6, [pc, #36]	; (80286bc <GUI_MEMDEV__WriteToActiveAlpha+0x168>)
 8028698:	f8cd a000 	str.w	sl, [sp]
 802869c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80286a0:	9302      	str	r3, [sp, #8]
 80286a2:	9501      	str	r5, [sp, #4]
 80286a4:	4621      	mov	r1, r4
 80286a6:	463a      	mov	r2, r7
 80286a8:	4643      	mov	r3, r8
 80286aa:	6834      	ldr	r4, [r6, #0]
 80286ac:	47a0      	blx	r4
 80286ae:	e772      	b.n	8028596 <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 80286b0:	20000280 	.word	0x20000280
 80286b4:	2002cc24 	.word	0x2002cc24
 80286b8:	08032080 	.word	0x08032080
 80286bc:	2002cbc8 	.word	0x2002cbc8
 80286c0:	2002cbcc 	.word	0x2002cbcc

080286c4 <GUI_MEMDEV_Write>:
 80286c4:	b570      	push	{r4, r5, r6, lr}
 80286c6:	4604      	mov	r4, r0
 80286c8:	b084      	sub	sp, #16
 80286ca:	b908      	cbnz	r0, 80286d0 <GUI_MEMDEV_Write+0xc>
 80286cc:	b004      	add	sp, #16
 80286ce:	bd70      	pop	{r4, r5, r6, pc}
 80286d0:	f7fa fd8c 	bl	80231ec <GUI_Lock>
 80286d4:	4620      	mov	r0, r4
 80286d6:	f7fd f909 	bl	80258ec <GUI_ALLOC_LockH>
 80286da:	4603      	mov	r3, r0
 80286dc:	9301      	str	r3, [sp, #4]
 80286de:	889e      	ldrh	r6, [r3, #4]
 80286e0:	88dd      	ldrh	r5, [r3, #6]
 80286e2:	891a      	ldrh	r2, [r3, #8]
 80286e4:	8959      	ldrh	r1, [r3, #10]
 80286e6:	f8ad 6008 	strh.w	r6, [sp, #8]
 80286ea:	186b      	adds	r3, r5, r1
 80286ec:	4432      	add	r2, r6
 80286ee:	3a01      	subs	r2, #1
 80286f0:	3b01      	subs	r3, #1
 80286f2:	a801      	add	r0, sp, #4
 80286f4:	f8ad 200c 	strh.w	r2, [sp, #12]
 80286f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80286fc:	f8ad 500a 	strh.w	r5, [sp, #10]
 8028700:	f7fd f906 	bl	8025910 <GUI_ALLOC_UnlockH>
 8028704:	a802      	add	r0, sp, #8
 8028706:	f7f6 f851 	bl	801e7ac <WM__InitIVRSearch>
 802870a:	b150      	cbz	r0, 8028722 <GUI_MEMDEV_Write+0x5e>
 802870c:	b236      	sxth	r6, r6
 802870e:	b22d      	sxth	r5, r5
 8028710:	4620      	mov	r0, r4
 8028712:	4631      	mov	r1, r6
 8028714:	462a      	mov	r2, r5
 8028716:	f7f7 fced 	bl	80200f4 <GUI_MEMDEV__WriteToActiveAt>
 802871a:	f7f5 ff21 	bl	801e560 <WM__GetNextIVR>
 802871e:	2800      	cmp	r0, #0
 8028720:	d1f6      	bne.n	8028710 <GUI_MEMDEV_Write+0x4c>
 8028722:	f7fa fd59 	bl	80231d8 <GUI_Unlock>
 8028726:	b004      	add	sp, #16
 8028728:	bd70      	pop	{r4, r5, r6, pc}
 802872a:	bf00      	nop

0802872c <GUI_USAGE_BM_AddPixel>:
 802872c:	4603      	mov	r3, r0
 802872e:	b430      	push	{r4, r5}
 8028730:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8028734:	f933 5b14 	ldrsh.w	r5, [r3], #20
 8028738:	6900      	ldr	r0, [r0, #16]
 802873a:	1b49      	subs	r1, r1, r5
 802873c:	1b12      	subs	r2, r2, r4
 802873e:	fb00 3302 	mla	r3, r0, r2, r3
 8028742:	10c8      	asrs	r0, r1, #3
 8028744:	2480      	movs	r4, #128	; 0x80
 8028746:	5c1a      	ldrb	r2, [r3, r0]
 8028748:	f001 0107 	and.w	r1, r1, #7
 802874c:	fa44 f101 	asr.w	r1, r4, r1
 8028750:	4311      	orrs	r1, r2
 8028752:	5419      	strb	r1, [r3, r0]
 8028754:	bc30      	pop	{r4, r5}
 8028756:	4770      	bx	lr

08028758 <GUI_USAGE_BM_GetNextDirty>:
 8028758:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802875c:	4293      	cmp	r3, r2
 802875e:	b470      	push	{r4, r5, r6}
 8028760:	680c      	ldr	r4, [r1, #0]
 8028762:	8885      	ldrh	r5, [r0, #4]
 8028764:	dd39      	ble.n	80287da <GUI_USAGE_BM_GetNextDirty+0x82>
 8028766:	b22d      	sxth	r5, r5
 8028768:	42ac      	cmp	r4, r5
 802876a:	6903      	ldr	r3, [r0, #16]
 802876c:	da35      	bge.n	80287da <GUI_USAGE_BM_GetNextDirty+0x82>
 802876e:	3014      	adds	r0, #20
 8028770:	fb02 0203 	mla	r2, r2, r3, r0
 8028774:	10e0      	asrs	r0, r4, #3
 8028776:	f004 0307 	and.w	r3, r4, #7
 802877a:	5c16      	ldrb	r6, [r2, r0]
 802877c:	fa06 f303 	lsl.w	r3, r6, r3
 8028780:	4402      	add	r2, r0
 8028782:	3d01      	subs	r5, #1
 8028784:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8028788:	ebc0 00e5 	rsb	r0, r0, r5, asr #3
 802878c:	f102 0201 	add.w	r2, r2, #1
 8028790:	d10d      	bne.n	80287ae <GUI_USAGE_BM_GetNextDirty+0x56>
 8028792:	b318      	cbz	r0, 80287dc <GUI_USAGE_BM_GetNextDirty+0x84>
 8028794:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028798:	3408      	adds	r4, #8
 802879a:	f024 0407 	bic.w	r4, r4, #7
 802879e:	3801      	subs	r0, #1
 80287a0:	2b00      	cmp	r3, #0
 80287a2:	d0f6      	beq.n	8028792 <GUI_USAGE_BM_GetNextDirty+0x3a>
 80287a4:	061d      	lsls	r5, r3, #24
 80287a6:	d404      	bmi.n	80287b2 <GUI_USAGE_BM_GetNextDirty+0x5a>
 80287a8:	005b      	lsls	r3, r3, #1
 80287aa:	b2db      	uxtb	r3, r3
 80287ac:	3401      	adds	r4, #1
 80287ae:	061d      	lsls	r5, r3, #24
 80287b0:	d5fa      	bpl.n	80287a8 <GUI_USAGE_BM_GetNextDirty+0x50>
 80287b2:	2bff      	cmp	r3, #255	; 0xff
 80287b4:	d014      	beq.n	80287e0 <GUI_USAGE_BM_GetNextDirty+0x88>
 80287b6:	065e      	lsls	r6, r3, #25
 80287b8:	4625      	mov	r5, r4
 80287ba:	d505      	bpl.n	80287c8 <GUI_USAGE_BM_GetNextDirty+0x70>
 80287bc:	005b      	lsls	r3, r3, #1
 80287be:	b2db      	uxtb	r3, r3
 80287c0:	065e      	lsls	r6, r3, #25
 80287c2:	f105 0501 	add.w	r5, r5, #1
 80287c6:	d4f9      	bmi.n	80287bc <GUI_USAGE_BM_GetNextDirty+0x64>
 80287c8:	f005 0307 	and.w	r3, r5, #7
 80287cc:	2b07      	cmp	r3, #7
 80287ce:	d009      	beq.n	80287e4 <GUI_USAGE_BM_GetNextDirty+0x8c>
 80287d0:	1b28      	subs	r0, r5, r4
 80287d2:	3001      	adds	r0, #1
 80287d4:	600c      	str	r4, [r1, #0]
 80287d6:	bc70      	pop	{r4, r5, r6}
 80287d8:	4770      	bx	lr
 80287da:	2000      	movs	r0, #0
 80287dc:	bc70      	pop	{r4, r5, r6}
 80287de:	4770      	bx	lr
 80287e0:	1de5      	adds	r5, r4, #7
 80287e2:	e7f1      	b.n	80287c8 <GUI_USAGE_BM_GetNextDirty+0x70>
 80287e4:	2800      	cmp	r0, #0
 80287e6:	ddf3      	ble.n	80287d0 <GUI_USAGE_BM_GetNextDirty+0x78>
 80287e8:	7813      	ldrb	r3, [r2, #0]
 80287ea:	2bff      	cmp	r3, #255	; 0xff
 80287ec:	d10e      	bne.n	802880c <GUI_USAGE_BM_GetNextDirty+0xb4>
 80287ee:	4410      	add	r0, r2
 80287f0:	3801      	subs	r0, #1
 80287f2:	e003      	b.n	80287fc <GUI_USAGE_BM_GetNextDirty+0xa4>
 80287f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80287f8:	2bff      	cmp	r3, #255	; 0xff
 80287fa:	d107      	bne.n	802880c <GUI_USAGE_BM_GetNextDirty+0xb4>
 80287fc:	4282      	cmp	r2, r0
 80287fe:	f105 0508 	add.w	r5, r5, #8
 8028802:	d1f7      	bne.n	80287f4 <GUI_USAGE_BM_GetNextDirty+0x9c>
 8028804:	e7e4      	b.n	80287d0 <GUI_USAGE_BM_GetNextDirty+0x78>
 8028806:	005b      	lsls	r3, r3, #1
 8028808:	b2db      	uxtb	r3, r3
 802880a:	3501      	adds	r5, #1
 802880c:	061a      	lsls	r2, r3, #24
 802880e:	d4fa      	bmi.n	8028806 <GUI_USAGE_BM_GetNextDirty+0xae>
 8028810:	e7de      	b.n	80287d0 <GUI_USAGE_BM_GetNextDirty+0x78>
 8028812:	bf00      	nop

08028814 <_GUI_USAGE_BM_Delete>:
 8028814:	f7fd b97c 	b.w	8025b10 <GUI_ALLOC_Free>

08028818 <GUI_USAGE_BM_Clear>:
 8028818:	4603      	mov	r3, r0
 802881a:	2100      	movs	r1, #0
 802881c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8028820:	691b      	ldr	r3, [r3, #16]
 8028822:	3014      	adds	r0, #20
 8028824:	fb03 f202 	mul.w	r2, r3, r2
 8028828:	f001 bfe1 	b.w	802a7ee <memset>

0802882c <GUI_USAGE_BM_AddHLine>:
 802882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028830:	f9b0 4000 	ldrsh.w	r4, [r0]
 8028834:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8028838:	1b0c      	subs	r4, r1, r4
 802883a:	42b4      	cmp	r4, r6
 802883c:	da2c      	bge.n	8028898 <GUI_USAGE_BM_AddHLine+0x6c>
 802883e:	4423      	add	r3, r4
 8028840:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8028844:	6905      	ldr	r5, [r0, #16]
 8028846:	3b01      	subs	r3, #1
 8028848:	43de      	mvns	r6, r3
 802884a:	1bd2      	subs	r2, r2, r7
 802884c:	21ff      	movs	r1, #255	; 0xff
 802884e:	f004 0707 	and.w	r7, r4, #7
 8028852:	3014      	adds	r0, #20
 8028854:	10e4      	asrs	r4, r4, #3
 8028856:	f006 0607 	and.w	r6, r6, #7
 802885a:	fb05 0502 	mla	r5, r5, r2, r0
 802885e:	fa01 f606 	lsl.w	r6, r1, r6
 8028862:	fa41 f207 	asr.w	r2, r1, r7
 8028866:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 802886a:	b2f7      	uxtb	r7, r6
 802886c:	b2d0      	uxtb	r0, r2
 802886e:	eb05 0604 	add.w	r6, r5, r4
 8028872:	d013      	beq.n	802889c <GUI_USAGE_BM_AddHLine+0x70>
 8028874:	5d2a      	ldrb	r2, [r5, r4]
 8028876:	f103 38ff 	add.w	r8, r3, #4294967295
 802887a:	4310      	orrs	r0, r2
 802887c:	f1b8 0f00 	cmp.w	r8, #0
 8028880:	f106 0601 	add.w	r6, r6, #1
 8028884:	5528      	strb	r0, [r5, r4]
 8028886:	dd04      	ble.n	8028892 <GUI_USAGE_BM_AddHLine+0x66>
 8028888:	4630      	mov	r0, r6
 802888a:	4642      	mov	r2, r8
 802888c:	f001 ffaf 	bl	802a7ee <memset>
 8028890:	4446      	add	r6, r8
 8028892:	7833      	ldrb	r3, [r6, #0]
 8028894:	431f      	orrs	r7, r3
 8028896:	7037      	strb	r7, [r6, #0]
 8028898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802889c:	5d2b      	ldrb	r3, [r5, r4]
 802889e:	4038      	ands	r0, r7
 80288a0:	4318      	orrs	r0, r3
 80288a2:	5528      	strb	r0, [r5, r4]
 80288a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080288a8 <GUI_USAGE_BM_Create>:
 80288a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80288ac:	f102 060f 	add.w	r6, r2, #15
 80288b0:	1136      	asrs	r6, r6, #4
 80288b2:	0076      	lsls	r6, r6, #1
 80288b4:	461f      	mov	r7, r3
 80288b6:	fb06 f303 	mul.w	r3, r6, r3
 80288ba:	b082      	sub	sp, #8
 80288bc:	4681      	mov	r9, r0
 80288be:	f103 0014 	add.w	r0, r3, #20
 80288c2:	4690      	mov	r8, r2
 80288c4:	468a      	mov	sl, r1
 80288c6:	f7fd f999 	bl	8025bfc <GUI_ALLOC_AllocZero>
 80288ca:	4605      	mov	r5, r0
 80288cc:	b1c0      	cbz	r0, 8028900 <GUI_USAGE_BM_Create+0x58>
 80288ce:	f7fa fc8d 	bl	80231ec <GUI_Lock>
 80288d2:	4628      	mov	r0, r5
 80288d4:	f7fd f80a 	bl	80258ec <GUI_ALLOC_LockH>
 80288d8:	4604      	mov	r4, r0
 80288da:	a802      	add	r0, sp, #8
 80288dc:	490a      	ldr	r1, [pc, #40]	; (8028908 <GUI_USAGE_BM_Create+0x60>)
 80288de:	f840 4d04 	str.w	r4, [r0, #-4]!
 80288e2:	2201      	movs	r2, #1
 80288e4:	60a1      	str	r1, [r4, #8]
 80288e6:	81a2      	strh	r2, [r4, #12]
 80288e8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80288ec:	80e7      	strh	r7, [r4, #6]
 80288ee:	6126      	str	r6, [r4, #16]
 80288f0:	f8a4 9000 	strh.w	r9, [r4]
 80288f4:	f8a4 a002 	strh.w	sl, [r4, #2]
 80288f8:	f7fd f80a 	bl	8025910 <GUI_ALLOC_UnlockH>
 80288fc:	f7fa fc6c 	bl	80231d8 <GUI_Unlock>
 8028900:	4628      	mov	r0, r5
 8028902:	b002      	add	sp, #8
 8028904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028908:	080323a0 	.word	0x080323a0

0802890c <GUI_USAGE_DecUseCnt>:
 802890c:	b530      	push	{r4, r5, lr}
 802890e:	4605      	mov	r5, r0
 8028910:	b083      	sub	sp, #12
 8028912:	f7fa fc6b 	bl	80231ec <GUI_Lock>
 8028916:	4628      	mov	r0, r5
 8028918:	f7fc ffe8 	bl	80258ec <GUI_ALLOC_LockH>
 802891c:	4602      	mov	r2, r0
 802891e:	a802      	add	r0, sp, #8
 8028920:	8994      	ldrh	r4, [r2, #12]
 8028922:	f840 2d04 	str.w	r2, [r0, #-4]!
 8028926:	3c01      	subs	r4, #1
 8028928:	b2a4      	uxth	r4, r4
 802892a:	8194      	strh	r4, [r2, #12]
 802892c:	f7fc fff0 	bl	8025910 <GUI_ALLOC_UnlockH>
 8028930:	b914      	cbnz	r4, 8028938 <GUI_USAGE_DecUseCnt+0x2c>
 8028932:	4628      	mov	r0, r5
 8028934:	f7fd f8ec 	bl	8025b10 <GUI_ALLOC_Free>
 8028938:	f7fa fc4e 	bl	80231d8 <GUI_Unlock>
 802893c:	b003      	add	sp, #12
 802893e:	bd30      	pop	{r4, r5, pc}

08028940 <GUI_USAGE_AddRect>:
 8028940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028944:	9c08      	ldr	r4, [sp, #32]
 8028946:	4606      	mov	r6, r0
 8028948:	4689      	mov	r9, r1
 802894a:	4615      	mov	r5, r2
 802894c:	4698      	mov	r8, r3
 802894e:	68b2      	ldr	r2, [r6, #8]
 8028950:	4630      	mov	r0, r6
 8028952:	6857      	ldr	r7, [r2, #4]
 8028954:	4649      	mov	r1, r9
 8028956:	462a      	mov	r2, r5
 8028958:	4643      	mov	r3, r8
 802895a:	47b8      	blx	r7
 802895c:	3c01      	subs	r4, #1
 802895e:	f105 0501 	add.w	r5, r5, #1
 8028962:	d1f4      	bne.n	802894e <GUI_USAGE_AddRect+0xe>
 8028964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08028968 <GUI_MEMDEV_ReduceYSize>:
 8028968:	b530      	push	{r4, r5, lr}
 802896a:	4604      	mov	r4, r0
 802896c:	b083      	sub	sp, #12
 802896e:	460d      	mov	r5, r1
 8028970:	b188      	cbz	r0, 8028996 <GUI_MEMDEV_ReduceYSize+0x2e>
 8028972:	f7fa fc3b 	bl	80231ec <GUI_Lock>
 8028976:	4620      	mov	r0, r4
 8028978:	f7fc ffb8 	bl	80258ec <GUI_ALLOC_LockH>
 802897c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8028980:	9001      	str	r0, [sp, #4]
 8028982:	42ab      	cmp	r3, r5
 8028984:	bfc8      	it	gt
 8028986:	8145      	strhgt	r5, [r0, #10]
 8028988:	a801      	add	r0, sp, #4
 802898a:	f7fc ffc1 	bl	8025910 <GUI_ALLOC_UnlockH>
 802898e:	f7fa fc23 	bl	80231d8 <GUI_Unlock>
 8028992:	b003      	add	sp, #12
 8028994:	bd30      	pop	{r4, r5, pc}
 8028996:	4b03      	ldr	r3, [pc, #12]	; (80289a4 <GUI_MEMDEV_ReduceYSize+0x3c>)
 8028998:	681b      	ldr	r3, [r3, #0]
 802899a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 802899c:	2c00      	cmp	r4, #0
 802899e:	d1e8      	bne.n	8028972 <GUI_MEMDEV_ReduceYSize+0xa>
 80289a0:	b003      	add	sp, #12
 80289a2:	bd30      	pop	{r4, r5, pc}
 80289a4:	20000280 	.word	0x20000280

080289a8 <GUI_MEMDEV_Clear>:
 80289a8:	b510      	push	{r4, lr}
 80289aa:	4604      	mov	r4, r0
 80289ac:	b082      	sub	sp, #8
 80289ae:	b928      	cbnz	r0, 80289bc <GUI_MEMDEV_Clear+0x14>
 80289b0:	4b12      	ldr	r3, [pc, #72]	; (80289fc <GUI_MEMDEV_Clear+0x54>)
 80289b2:	681b      	ldr	r3, [r3, #0]
 80289b4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80289b6:	b90c      	cbnz	r4, 80289bc <GUI_MEMDEV_Clear+0x14>
 80289b8:	b002      	add	sp, #8
 80289ba:	bd10      	pop	{r4, pc}
 80289bc:	f7fa fc16 	bl	80231ec <GUI_Lock>
 80289c0:	4620      	mov	r0, r4
 80289c2:	f7fc ff93 	bl	80258ec <GUI_ALLOC_LockH>
 80289c6:	ab02      	add	r3, sp, #8
 80289c8:	6944      	ldr	r4, [r0, #20]
 80289ca:	f843 0d08 	str.w	r0, [r3, #-8]!
 80289ce:	4668      	mov	r0, sp
 80289d0:	f7fc ff9e 	bl	8025910 <GUI_ALLOC_UnlockH>
 80289d4:	b91c      	cbnz	r4, 80289de <GUI_MEMDEV_Clear+0x36>
 80289d6:	f7fa fbff 	bl	80231d8 <GUI_Unlock>
 80289da:	b002      	add	sp, #8
 80289dc:	bd10      	pop	{r4, pc}
 80289de:	4620      	mov	r0, r4
 80289e0:	f7fc ff84 	bl	80258ec <GUI_ALLOC_LockH>
 80289e4:	ac02      	add	r4, sp, #8
 80289e6:	6882      	ldr	r2, [r0, #8]
 80289e8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80289ec:	6893      	ldr	r3, [r2, #8]
 80289ee:	4798      	blx	r3
 80289f0:	4620      	mov	r0, r4
 80289f2:	f7fc ff8d 	bl	8025910 <GUI_ALLOC_UnlockH>
 80289f6:	f7fa fbef 	bl	80231d8 <GUI_Unlock>
 80289fa:	e7ee      	b.n	80289da <GUI_MEMDEV_Clear+0x32>
 80289fc:	20000280 	.word	0x20000280

08028a00 <LCD_SelectLCD>:
 8028a00:	b510      	push	{r4, lr}
 8028a02:	4c0e      	ldr	r4, [pc, #56]	; (8028a3c <LCD_SelectLCD+0x3c>)
 8028a04:	4b0e      	ldr	r3, [pc, #56]	; (8028a40 <LCD_SelectLCD+0x40>)
 8028a06:	6822      	ldr	r2, [r4, #0]
 8028a08:	7c51      	ldrb	r1, [r2, #17]
 8028a0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8028a0e:	b138      	cbz	r0, 8028a20 <LCD_SelectLCD+0x20>
 8028a10:	68c3      	ldr	r3, [r0, #12]
 8028a12:	b113      	cbz	r3, 8028a1a <LCD_SelectLCD+0x1a>
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	2b04      	cmp	r3, #4
 8028a18:	d00c      	beq.n	8028a34 <LCD_SelectLCD+0x34>
 8028a1a:	6800      	ldr	r0, [r0, #0]
 8028a1c:	2800      	cmp	r0, #0
 8028a1e:	d1f7      	bne.n	8028a10 <LCD_SelectLCD+0x10>
 8028a20:	4613      	mov	r3, r2
 8028a22:	2100      	movs	r1, #0
 8028a24:	f103 0208 	add.w	r2, r3, #8
 8028a28:	6619      	str	r1, [r3, #96]	; 0x60
 8028a2a:	615a      	str	r2, [r3, #20]
 8028a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028a30:	f7f9 ba7e 	b.w	8021f30 <LCD_SetClipRectMax>
 8028a34:	f7fb f94a 	bl	8023ccc <GUI_DEVICE_Unlink>
 8028a38:	6823      	ldr	r3, [r4, #0]
 8028a3a:	e7f2      	b.n	8028a22 <LCD_SelectLCD+0x22>
 8028a3c:	20000280 	.word	0x20000280
 8028a40:	2002cc24 	.word	0x2002cc24

08028a44 <LCD_ReadRectEx>:
 8028a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a48:	b087      	sub	sp, #28
 8028a4a:	4681      	mov	r9, r0
 8028a4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028a4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028a50:	68ed      	ldr	r5, [r5, #12]
 8028a52:	9303      	str	r3, [sp, #12]
 8028a54:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
 8028a58:	696f      	ldr	r7, [r5, #20]
 8028a5a:	4616      	mov	r6, r2
 8028a5c:	460d      	mov	r5, r1
 8028a5e:	f1bc 0f00 	cmp.w	ip, #0
 8028a62:	d00f      	beq.n	8028a84 <LCD_ReadRectEx+0x40>
 8028a64:	a811      	add	r0, sp, #68	; 0x44
 8028a66:	2101      	movs	r1, #1
 8028a68:	47e0      	blx	ip
 8028a6a:	4684      	mov	ip, r0
 8028a6c:	b150      	cbz	r0, 8028a84 <LCD_ReadRectEx+0x40>
 8028a6e:	9b03      	ldr	r3, [sp, #12]
 8028a70:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028a72:	e88d 0018 	stmia.w	sp, {r3, r4}
 8028a76:	4649      	mov	r1, r9
 8028a78:	462a      	mov	r2, r5
 8028a7a:	4633      	mov	r3, r6
 8028a7c:	47e0      	blx	ip
 8028a7e:	b007      	add	sp, #28
 8028a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a84:	4b65      	ldr	r3, [pc, #404]	; (8028c1c <LCD_ReadRectEx+0x1d8>)
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	7c58      	ldrb	r0, [r3, #17]
 8028a8a:	f7f8 fdd5 	bl	8021638 <GUI_GetBitsPerPixelEx>
 8028a8e:	2808      	cmp	r0, #8
 8028a90:	9005      	str	r0, [sp, #20]
 8028a92:	dc28      	bgt.n	8028ae6 <LCD_ReadRectEx+0xa2>
 8028a94:	f04f 0a01 	mov.w	sl, #1
 8028a98:	9b03      	ldr	r3, [sp, #12]
 8028a9a:	429d      	cmp	r5, r3
 8028a9c:	dcef      	bgt.n	8028a7e <LCD_ReadRectEx+0x3a>
 8028a9e:	f04f 0800 	mov.w	r8, #0
 8028aa2:	f8cd 9010 	str.w	r9, [sp, #16]
 8028aa6:	e00a      	b.n	8028abe <LCD_ReadRectEx+0x7a>
 8028aa8:	f1ba 0f04 	cmp.w	sl, #4
 8028aac:	f000 80a3 	beq.w	8028bf6 <LCD_ReadRectEx+0x1b2>
 8028ab0:	f1ba 0f01 	cmp.w	sl, #1
 8028ab4:	d01f      	beq.n	8028af6 <LCD_ReadRectEx+0xb2>
 8028ab6:	9b03      	ldr	r3, [sp, #12]
 8028ab8:	3501      	adds	r5, #1
 8028aba:	42ab      	cmp	r3, r5
 8028abc:	dbdf      	blt.n	8028a7e <LCD_ReadRectEx+0x3a>
 8028abe:	f1ba 0f02 	cmp.w	sl, #2
 8028ac2:	d1f1      	bne.n	8028aa8 <LCD_ReadRectEx+0x64>
 8028ac4:	9b04      	ldr	r3, [sp, #16]
 8028ac6:	42b3      	cmp	r3, r6
 8028ac8:	dcf5      	bgt.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028aca:	469b      	mov	fp, r3
 8028acc:	46a1      	mov	r9, r4
 8028ace:	4659      	mov	r1, fp
 8028ad0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028ad2:	462a      	mov	r2, r5
 8028ad4:	47b8      	blx	r7
 8028ad6:	f10b 0b01 	add.w	fp, fp, #1
 8028ada:	f829 0b02 	strh.w	r0, [r9], #2
 8028ade:	455e      	cmp	r6, fp
 8028ae0:	464c      	mov	r4, r9
 8028ae2:	daf4      	bge.n	8028ace <LCD_ReadRectEx+0x8a>
 8028ae4:	e7e7      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028ae6:	9b05      	ldr	r3, [sp, #20]
 8028ae8:	2b10      	cmp	r3, #16
 8028aea:	bfcc      	ite	gt
 8028aec:	f04f 0a04 	movgt.w	sl, #4
 8028af0:	f04f 0a02 	movle.w	sl, #2
 8028af4:	e7d0      	b.n	8028a98 <LCD_ReadRectEx+0x54>
 8028af6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8028afa:	f10c 33ff 	add.w	r3, ip, #4294967295
 8028afe:	2b07      	cmp	r3, #7
 8028b00:	d8d9      	bhi.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b02:	e8df f003 	tbb	[pc, r3]
 8028b06:	3356      	.short	0x3356
 8028b08:	04041515 	.word	0x04041515
 8028b0c:	0404      	.short	0x0404
 8028b0e:	9b04      	ldr	r3, [sp, #16]
 8028b10:	42b3      	cmp	r3, r6
 8028b12:	dcd0      	bgt.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b14:	469b      	mov	fp, r3
 8028b16:	46a1      	mov	r9, r4
 8028b18:	4659      	mov	r1, fp
 8028b1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028b1c:	462a      	mov	r2, r5
 8028b1e:	47b8      	blx	r7
 8028b20:	f10b 0b01 	add.w	fp, fp, #1
 8028b24:	f809 0b01 	strb.w	r0, [r9], #1
 8028b28:	455e      	cmp	r6, fp
 8028b2a:	464c      	mov	r4, r9
 8028b2c:	daf4      	bge.n	8028b18 <LCD_ReadRectEx+0xd4>
 8028b2e:	e7c2      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b30:	f8dd c010 	ldr.w	ip, [sp, #16]
 8028b34:	45b4      	cmp	ip, r6
 8028b36:	dcbe      	bgt.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b38:	46e1      	mov	r9, ip
 8028b3a:	f04f 0b0f 	mov.w	fp, #15
 8028b3e:	4649      	mov	r1, r9
 8028b40:	462a      	mov	r2, r5
 8028b42:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028b44:	47b8      	blx	r7
 8028b46:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8028b4a:	7822      	ldrb	r2, [r4, #0]
 8028b4c:	f1c3 0104 	rsb	r1, r3, #4
 8028b50:	fa0b f303 	lsl.w	r3, fp, r3
 8028b54:	4088      	lsls	r0, r1
 8028b56:	4013      	ands	r3, r2
 8028b58:	f109 0901 	add.w	r9, r9, #1
 8028b5c:	4303      	orrs	r3, r0
 8028b5e:	454e      	cmp	r6, r9
 8028b60:	7023      	strb	r3, [r4, #0]
 8028b62:	4444      	add	r4, r8
 8028b64:	f088 0801 	eor.w	r8, r8, #1
 8028b68:	dae9      	bge.n	8028b3e <LCD_ReadRectEx+0xfa>
 8028b6a:	e7a4      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b6c:	9b04      	ldr	r3, [sp, #16]
 8028b6e:	42b3      	cmp	r3, r6
 8028b70:	dca1      	bgt.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028b72:	469b      	mov	fp, r3
 8028b74:	f64f 793f 	movw	r9, #65343	; 0xff3f
 8028b78:	4659      	mov	r1, fp
 8028b7a:	462a      	mov	r2, r5
 8028b7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028b7e:	47b8      	blx	r7
 8028b80:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8028b84:	7822      	ldrb	r2, [r4, #0]
 8028b86:	f1c3 0106 	rsb	r1, r3, #6
 8028b8a:	fa49 fc03 	asr.w	ip, r9, r3
 8028b8e:	4088      	lsls	r0, r1
 8028b90:	f108 0301 	add.w	r3, r8, #1
 8028b94:	ea0c 0202 	and.w	r2, ip, r2
 8028b98:	f10b 0b01 	add.w	fp, fp, #1
 8028b9c:	4302      	orrs	r2, r0
 8028b9e:	f023 0803 	bic.w	r8, r3, #3
 8028ba2:	455e      	cmp	r6, fp
 8028ba4:	7022      	strb	r2, [r4, #0]
 8028ba6:	fa43 f808 	asr.w	r8, r3, r8
 8028baa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8028bae:	dae3      	bge.n	8028b78 <LCD_ReadRectEx+0x134>
 8028bb0:	e781      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028bb2:	f8dd c010 	ldr.w	ip, [sp, #16]
 8028bb6:	45b4      	cmp	ip, r6
 8028bb8:	f73f af7d 	bgt.w	8028ab6 <LCD_ReadRectEx+0x72>
 8028bbc:	46e3      	mov	fp, ip
 8028bbe:	4659      	mov	r1, fp
 8028bc0:	462a      	mov	r2, r5
 8028bc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028bc4:	47b8      	blx	r7
 8028bc6:	7823      	ldrb	r3, [r4, #0]
 8028bc8:	f64f 7c7f 	movw	ip, #65407	; 0xff7f
 8028bcc:	f1c8 0107 	rsb	r1, r8, #7
 8028bd0:	fa4c f208 	asr.w	r2, ip, r8
 8028bd4:	401a      	ands	r2, r3
 8028bd6:	4088      	lsls	r0, r1
 8028bd8:	f108 0301 	add.w	r3, r8, #1
 8028bdc:	f10b 0b01 	add.w	fp, fp, #1
 8028be0:	4302      	orrs	r2, r0
 8028be2:	f023 0807 	bic.w	r8, r3, #7
 8028be6:	455e      	cmp	r6, fp
 8028be8:	7022      	strb	r2, [r4, #0]
 8028bea:	fa43 f808 	asr.w	r8, r3, r8
 8028bee:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8028bf2:	dae4      	bge.n	8028bbe <LCD_ReadRectEx+0x17a>
 8028bf4:	e75f      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028bf6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8028bfa:	45b4      	cmp	ip, r6
 8028bfc:	f73f af5b 	bgt.w	8028ab6 <LCD_ReadRectEx+0x72>
 8028c00:	46e3      	mov	fp, ip
 8028c02:	46a1      	mov	r9, r4
 8028c04:	4659      	mov	r1, fp
 8028c06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028c08:	462a      	mov	r2, r5
 8028c0a:	47b8      	blx	r7
 8028c0c:	f10b 0b01 	add.w	fp, fp, #1
 8028c10:	f849 0b04 	str.w	r0, [r9], #4
 8028c14:	455e      	cmp	r6, fp
 8028c16:	464c      	mov	r4, r9
 8028c18:	daf4      	bge.n	8028c04 <LCD_ReadRectEx+0x1c0>
 8028c1a:	e74c      	b.n	8028ab6 <LCD_ReadRectEx+0x72>
 8028c1c:	20000280 	.word	0x20000280

08028c20 <GUI_ReadRectEx>:
 8028c20:	b4f0      	push	{r4, r5, r6, r7}
 8028c22:	4c15      	ldr	r4, [pc, #84]	; (8028c78 <GUI_ReadRectEx+0x58>)
 8028c24:	9f04      	ldr	r7, [sp, #16]
 8028c26:	6825      	ldr	r5, [r4, #0]
 8028c28:	9c05      	ldr	r4, [sp, #20]
 8028c2a:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
 8028c2e:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8028c32:	4560      	cmp	r0, ip
 8028c34:	bfb8      	it	lt
 8028c36:	4660      	movlt	r0, ip
 8028c38:	42b2      	cmp	r2, r6
 8028c3a:	bfa8      	it	ge
 8028c3c:	4632      	movge	r2, r6
 8028c3e:	4290      	cmp	r0, r2
 8028c40:	dc0b      	bgt.n	8028c5a <GUI_ReadRectEx+0x3a>
 8028c42:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 8028c46:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8028c4a:	42b1      	cmp	r1, r6
 8028c4c:	bfb8      	it	lt
 8028c4e:	4631      	movlt	r1, r6
 8028c50:	42ab      	cmp	r3, r5
 8028c52:	bfa8      	it	ge
 8028c54:	462b      	movge	r3, r5
 8028c56:	428b      	cmp	r3, r1
 8028c58:	da04      	bge.n	8028c64 <GUI_ReadRectEx+0x44>
 8028c5a:	bcf0      	pop	{r4, r5, r6, r7}
 8028c5c:	4770      	bx	lr
 8028c5e:	6825      	ldr	r5, [r4, #0]
 8028c60:	b12d      	cbz	r5, 8028c6e <GUI_ReadRectEx+0x4e>
 8028c62:	462c      	mov	r4, r5
 8028c64:	68e5      	ldr	r5, [r4, #12]
 8028c66:	682d      	ldr	r5, [r5, #0]
 8028c68:	f035 0604 	bics.w	r6, r5, #4
 8028c6c:	d1f7      	bne.n	8028c5e <GUI_ReadRectEx+0x3e>
 8028c6e:	9704      	str	r7, [sp, #16]
 8028c70:	9405      	str	r4, [sp, #20]
 8028c72:	bcf0      	pop	{r4, r5, r6, r7}
 8028c74:	f7ff bee6 	b.w	8028a44 <LCD_ReadRectEx>
 8028c78:	20000280 	.word	0x20000280

08028c7c <LCD_GetPixelIndex>:
 8028c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c80:	4e15      	ldr	r6, [pc, #84]	; (8028cd8 <LCD_GetPixelIndex+0x5c>)
 8028c82:	4d16      	ldr	r5, [pc, #88]	; (8028cdc <LCD_GetPixelIndex+0x60>)
 8028c84:	6833      	ldr	r3, [r6, #0]
 8028c86:	7c5b      	ldrb	r3, [r3, #17]
 8028c88:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028c8c:	68df      	ldr	r7, [r3, #12]
 8028c8e:	b082      	sub	sp, #8
 8028c90:	4604      	mov	r4, r0
 8028c92:	4688      	mov	r8, r1
 8028c94:	4618      	mov	r0, r3
 8028c96:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 8028c98:	4669      	mov	r1, sp
 8028c9a:	47b8      	blx	r7
 8028c9c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028ca0:	42a3      	cmp	r3, r4
 8028ca2:	dc0b      	bgt.n	8028cbc <LCD_GetPixelIndex+0x40>
 8028ca4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8028ca8:	429c      	cmp	r4, r3
 8028caa:	dc07      	bgt.n	8028cbc <LCD_GetPixelIndex+0x40>
 8028cac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028cb0:	4543      	cmp	r3, r8
 8028cb2:	dc03      	bgt.n	8028cbc <LCD_GetPixelIndex+0x40>
 8028cb4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8028cb8:	4598      	cmp	r8, r3
 8028cba:	dd03      	ble.n	8028cc4 <LCD_GetPixelIndex+0x48>
 8028cbc:	2000      	movs	r0, #0
 8028cbe:	b002      	add	sp, #8
 8028cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cc4:	6833      	ldr	r3, [r6, #0]
 8028cc6:	7c5b      	ldrb	r3, [r3, #17]
 8028cc8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8028ccc:	68c3      	ldr	r3, [r0, #12]
 8028cce:	4621      	mov	r1, r4
 8028cd0:	4642      	mov	r2, r8
 8028cd2:	695b      	ldr	r3, [r3, #20]
 8028cd4:	4798      	blx	r3
 8028cd6:	e7f2      	b.n	8028cbe <LCD_GetPixelIndex+0x42>
 8028cd8:	20000280 	.word	0x20000280
 8028cdc:	2002cc24 	.word	0x2002cc24

08028ce0 <LCD_GetBkColorIndex>:
 8028ce0:	4b02      	ldr	r3, [pc, #8]	; (8028cec <LCD_GetBkColorIndex+0xc>)
 8028ce2:	681b      	ldr	r3, [r3, #0]
 8028ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ce6:	6818      	ldr	r0, [r3, #0]
 8028ce8:	4770      	bx	lr
 8028cea:	bf00      	nop
 8028cec:	20000280 	.word	0x20000280

08028cf0 <LCD_GetColorIndex>:
 8028cf0:	4b02      	ldr	r3, [pc, #8]	; (8028cfc <LCD_GetColorIndex+0xc>)
 8028cf2:	681b      	ldr	r3, [r3, #0]
 8028cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028cf6:	6818      	ldr	r0, [r3, #0]
 8028cf8:	4770      	bx	lr
 8028cfa:	bf00      	nop
 8028cfc:	20000280 	.word	0x20000280

08028d00 <_OnExit>:
 8028d00:	b510      	push	{r4, lr}
 8028d02:	4c04      	ldr	r4, [pc, #16]	; (8028d14 <_OnExit+0x14>)
 8028d04:	6820      	ldr	r0, [r4, #0]
 8028d06:	f7fc fca7 	bl	8025658 <GUI_ALLOC_FreeFixedBlock>
 8028d0a:	4a03      	ldr	r2, [pc, #12]	; (8028d18 <_OnExit+0x18>)
 8028d0c:	2300      	movs	r3, #0
 8028d0e:	6023      	str	r3, [r4, #0]
 8028d10:	6013      	str	r3, [r2, #0]
 8028d12:	bd10      	pop	{r4, pc}
 8028d14:	2002cd24 	.word	0x2002cd24
 8028d18:	2002b2f4 	.word	0x2002b2f4

08028d1c <LCD_InitColors>:
 8028d1c:	b538      	push	{r3, r4, r5, lr}
 8028d1e:	4c0a      	ldr	r4, [pc, #40]	; (8028d48 <LCD_InitColors+0x2c>)
 8028d20:	6825      	ldr	r5, [r4, #0]
 8028d22:	b10d      	cbz	r5, 8028d28 <LCD_InitColors+0xc>
 8028d24:	2000      	movs	r0, #0
 8028d26:	bd38      	pop	{r3, r4, r5, pc}
 8028d28:	4b08      	ldr	r3, [pc, #32]	; (8028d4c <LCD_InitColors+0x30>)
 8028d2a:	6818      	ldr	r0, [r3, #0]
 8028d2c:	0080      	lsls	r0, r0, #2
 8028d2e:	f7fc fc9d 	bl	802566c <GUI_ALLOC_GetFixedBlock>
 8028d32:	6020      	str	r0, [r4, #0]
 8028d34:	b130      	cbz	r0, 8028d44 <LCD_InitColors+0x28>
 8028d36:	4806      	ldr	r0, [pc, #24]	; (8028d50 <LCD_InitColors+0x34>)
 8028d38:	4b06      	ldr	r3, [pc, #24]	; (8028d54 <LCD_InitColors+0x38>)
 8028d3a:	6003      	str	r3, [r0, #0]
 8028d3c:	f7fb f9cc 	bl	80240d8 <GUI__RegisterExit>
 8028d40:	4628      	mov	r0, r5
 8028d42:	bd38      	pop	{r3, r4, r5, pc}
 8028d44:	2001      	movs	r0, #1
 8028d46:	bd38      	pop	{r3, r4, r5, pc}
 8028d48:	2002cd24 	.word	0x2002cd24
 8028d4c:	200003ec 	.word	0x200003ec
 8028d50:	2002b2ec 	.word	0x2002b2ec
 8028d54:	08028d01 	.word	0x08028d01

08028d58 <LCD_GetpPalConvTableBM>:
 8028d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028d5c:	4681      	mov	r9, r0
 8028d5e:	b348      	cbz	r0, 8028db4 <LCD_GetpPalConvTableBM+0x5c>
 8028d60:	6885      	ldr	r5, [r0, #8]
 8028d62:	b365      	cbz	r5, 8028dbe <LCD_GetpPalConvTableBM+0x66>
 8028d64:	4f17      	ldr	r7, [pc, #92]	; (8028dc4 <LCD_GetpPalConvTableBM+0x6c>)
 8028d66:	683e      	ldr	r6, [r7, #0]
 8028d68:	b336      	cbz	r6, 8028db8 <LCD_GetpPalConvTableBM+0x60>
 8028d6a:	6803      	ldr	r3, [r0, #0]
 8028d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028d70:	dc1d      	bgt.n	8028dae <LCD_GetpPalConvTableBM+0x56>
 8028d72:	4a15      	ldr	r2, [pc, #84]	; (8028dc8 <LCD_GetpPalConvTableBM+0x70>)
 8028d74:	6812      	ldr	r2, [r2, #0]
 8028d76:	429a      	cmp	r2, r3
 8028d78:	bfb4      	ite	lt
 8028d7a:	4690      	movlt	r8, r2
 8028d7c:	4698      	movge	r8, r3
 8028d7e:	f1b8 0f00 	cmp.w	r8, #0
 8028d82:	dd0c      	ble.n	8028d9e <LCD_GetpPalConvTableBM+0x46>
 8028d84:	3d04      	subs	r5, #4
 8028d86:	2400      	movs	r4, #0
 8028d88:	e000      	b.n	8028d8c <LCD_GetpPalConvTableBM+0x34>
 8028d8a:	683e      	ldr	r6, [r7, #0]
 8028d8c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8028d90:	f7f9 f964 	bl	802205c <LCD_Color2Index>
 8028d94:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8028d98:	3401      	adds	r4, #1
 8028d9a:	4544      	cmp	r4, r8
 8028d9c:	d1f5      	bne.n	8028d8a <LCD_GetpPalConvTableBM+0x32>
 8028d9e:	4b0b      	ldr	r3, [pc, #44]	; (8028dcc <LCD_GetpPalConvTableBM+0x74>)
 8028da0:	681b      	ldr	r3, [r3, #0]
 8028da2:	b10b      	cbz	r3, 8028da8 <LCD_GetpPalConvTableBM+0x50>
 8028da4:	4648      	mov	r0, r9
 8028da6:	4798      	blx	r3
 8028da8:	6838      	ldr	r0, [r7, #0]
 8028daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028dae:	2000      	movs	r0, #0
 8028db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028db8:	4630      	mov	r0, r6
 8028dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028dbe:	4628      	mov	r0, r5
 8028dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028dc4:	2002cd24 	.word	0x2002cd24
 8028dc8:	200003ec 	.word	0x200003ec
 8028dcc:	2002b2f4 	.word	0x2002b2f4

08028dd0 <LCD_InitLUT>:
 8028dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dd4:	f001 fc8c 	bl	802a6f0 <LCD_GetNumLayers>
 8028dd8:	f1b0 0900 	subs.w	r9, r0, #0
 8028ddc:	dd2f      	ble.n	8028e3e <LCD_InitLUT+0x6e>
 8028dde:	4f19      	ldr	r7, [pc, #100]	; (8028e44 <LCD_InitLUT+0x74>)
 8028de0:	f8df b068 	ldr.w	fp, [pc, #104]	; 8028e4c <LCD_InitLUT+0x7c>
 8028de4:	2500      	movs	r5, #0
 8028de6:	4628      	mov	r0, r5
 8028de8:	f7fa ff2e 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 8028dec:	b320      	cbz	r0, 8028e38 <LCD_InitLUT+0x68>
 8028dee:	683b      	ldr	r3, [r7, #0]
 8028df0:	4628      	mov	r0, r5
 8028df2:	f893 8011 	ldrb.w	r8, [r3, #17]
 8028df6:	745d      	strb	r5, [r3, #17]
 8028df8:	f7f8 fb9c 	bl	8021534 <LCD_GetBitsPerPixelEx>
 8028dfc:	2808      	cmp	r0, #8
 8028dfe:	dc18      	bgt.n	8028e32 <LCD_InitLUT+0x62>
 8028e00:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8028e04:	4a10      	ldr	r2, [pc, #64]	; (8028e48 <LCD_InitLUT+0x78>)
 8028e06:	691b      	ldr	r3, [r3, #16]
 8028e08:	4293      	cmp	r3, r2
 8028e0a:	d012      	beq.n	8028e32 <LCD_InitLUT+0x62>
 8028e0c:	4628      	mov	r0, r5
 8028e0e:	f7f8 fb9f 	bl	8021550 <LCD_GetNumColorsEx>
 8028e12:	1e06      	subs	r6, r0, #0
 8028e14:	dd0d      	ble.n	8028e32 <LCD_InitLUT+0x62>
 8028e16:	2400      	movs	r4, #0
 8028e18:	fa5f fa84 	uxtb.w	sl, r4
 8028e1c:	4650      	mov	r0, sl
 8028e1e:	f7f9 f92d 	bl	802207c <LCD_Index2Color>
 8028e22:	3401      	adds	r4, #1
 8028e24:	4602      	mov	r2, r0
 8028e26:	4651      	mov	r1, sl
 8028e28:	4628      	mov	r0, r5
 8028e2a:	f7f8 fafd 	bl	8021428 <LCD_SetLUTEntryEx>
 8028e2e:	42a6      	cmp	r6, r4
 8028e30:	d1f2      	bne.n	8028e18 <LCD_InitLUT+0x48>
 8028e32:	683b      	ldr	r3, [r7, #0]
 8028e34:	f883 8011 	strb.w	r8, [r3, #17]
 8028e38:	3501      	adds	r5, #1
 8028e3a:	454d      	cmp	r5, r9
 8028e3c:	d1d3      	bne.n	8028de6 <LCD_InitLUT+0x16>
 8028e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e42:	bf00      	nop
 8028e44:	20000280 	.word	0x20000280
 8028e48:	08032e50 	.word	0x08032e50
 8028e4c:	2002cc24 	.word	0x2002cc24

08028e50 <LCD_AA_SetOrMask>:
 8028e50:	4b02      	ldr	r3, [pc, #8]	; (8028e5c <LCD_AA_SetOrMask+0xc>)
 8028e52:	681a      	ldr	r2, [r3, #0]
 8028e54:	6018      	str	r0, [r3, #0]
 8028e56:	4610      	mov	r0, r2
 8028e58:	4770      	bx	lr
 8028e5a:	bf00      	nop
 8028e5c:	200003f0 	.word	0x200003f0

08028e60 <_GetWordWrap>:
 8028e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e64:	b083      	sub	sp, #12
 8028e66:	ad02      	add	r5, sp, #8
 8028e68:	460f      	mov	r7, r1
 8028e6a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8028e6e:	4628      	mov	r0, r5
 8028e70:	9200      	str	r2, [sp, #0]
 8028e72:	f7f9 fef3 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8028e76:	f04f 0a00 	mov.w	sl, #0
 8028e7a:	4604      	mov	r4, r0
 8028e7c:	4681      	mov	r9, r0
 8028e7e:	4656      	mov	r6, sl
 8028e80:	46d3      	mov	fp, sl
 8028e82:	46d0      	mov	r8, sl
 8028e84:	2c00      	cmp	r4, #0
 8028e86:	d03b      	beq.n	8028f00 <_GetWordWrap+0xa0>
 8028e88:	2c0a      	cmp	r4, #10
 8028e8a:	d039      	beq.n	8028f00 <_GetWordWrap+0xa0>
 8028e8c:	2c20      	cmp	r4, #32
 8028e8e:	d03c      	beq.n	8028f0a <_GetWordWrap+0xaa>
 8028e90:	f1b9 0f20 	cmp.w	r9, #32
 8028e94:	d03b      	beq.n	8028f0e <_GetWordWrap+0xae>
 8028e96:	4920      	ldr	r1, [pc, #128]	; (8028f18 <_GetWordWrap+0xb8>)
 8028e98:	680a      	ldr	r2, [r1, #0]
 8028e9a:	4920      	ldr	r1, [pc, #128]	; (8028f1c <_GetWordWrap+0xbc>)
 8028e9c:	2a00      	cmp	r2, #0
 8028e9e:	680b      	ldr	r3, [r1, #0]
 8028ea0:	dd0c      	ble.n	8028ebc <_GetWordWrap+0x5c>
 8028ea2:	8818      	ldrh	r0, [r3, #0]
 8028ea4:	42a0      	cmp	r0, r4
 8028ea6:	d02d      	beq.n	8028f04 <_GetWordWrap+0xa4>
 8028ea8:	1e98      	subs	r0, r3, #2
 8028eaa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8028eae:	e003      	b.n	8028eb8 <_GetWordWrap+0x58>
 8028eb0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8028eb4:	42a2      	cmp	r2, r4
 8028eb6:	d025      	beq.n	8028f04 <_GetWordWrap+0xa4>
 8028eb8:	4283      	cmp	r3, r0
 8028eba:	d1f9      	bne.n	8028eb0 <_GetWordWrap+0x50>
 8028ebc:	4620      	mov	r0, r4
 8028ebe:	f7fb fec7 	bl	8024c50 <GUI_GetCharDistX>
 8028ec2:	4480      	add	r8, r0
 8028ec4:	45b8      	cmp	r8, r7
 8028ec6:	4682      	mov	sl, r0
 8028ec8:	dd0e      	ble.n	8028ee8 <_GetWordWrap+0x88>
 8028eca:	f1bb 0f00 	cmp.w	fp, #0
 8028ece:	d00b      	beq.n	8028ee8 <_GetWordWrap+0x88>
 8028ed0:	9a00      	ldr	r2, [sp, #0]
 8028ed2:	2e00      	cmp	r6, #0
 8028ed4:	bf18      	it	ne
 8028ed6:	46b3      	movne	fp, r6
 8028ed8:	b112      	cbz	r2, 8028ee0 <_GetWordWrap+0x80>
 8028eda:	ebca 0308 	rsb	r3, sl, r8
 8028ede:	6013      	str	r3, [r2, #0]
 8028ee0:	4658      	mov	r0, fp
 8028ee2:	b003      	add	sp, #12
 8028ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ee8:	4628      	mov	r0, r5
 8028eea:	f7f9 feb7 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8028eee:	4604      	mov	r4, r0
 8028ef0:	f10b 0b01 	add.w	fp, fp, #1
 8028ef4:	f1b9 0f00 	cmp.w	r9, #0
 8028ef8:	bf08      	it	eq
 8028efa:	4681      	moveq	r9, r0
 8028efc:	2c00      	cmp	r4, #0
 8028efe:	d1c3      	bne.n	8028e88 <_GetWordWrap+0x28>
 8028f00:	465e      	mov	r6, fp
 8028f02:	e7e5      	b.n	8028ed0 <_GetWordWrap+0x70>
 8028f04:	f10b 0601 	add.w	r6, fp, #1
 8028f08:	e7d8      	b.n	8028ebc <_GetWordWrap+0x5c>
 8028f0a:	465e      	mov	r6, fp
 8028f0c:	e7d6      	b.n	8028ebc <_GetWordWrap+0x5c>
 8028f0e:	465e      	mov	r6, fp
 8028f10:	f04f 0900 	mov.w	r9, #0
 8028f14:	e7d2      	b.n	8028ebc <_GetWordWrap+0x5c>
 8028f16:	bf00      	nop
 8028f18:	2002b2fc 	.word	0x2002b2fc
 8028f1c:	2002b2f8 	.word	0x2002b2f8

08028f20 <_GetCharWrap>:
 8028f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f24:	b082      	sub	sp, #8
 8028f26:	af02      	add	r7, sp, #8
 8028f28:	2400      	movs	r4, #0
 8028f2a:	4688      	mov	r8, r1
 8028f2c:	f847 0d04 	str.w	r0, [r7, #-4]!
 8028f30:	4625      	mov	r5, r4
 8028f32:	e008      	b.n	8028f46 <_GetCharWrap+0x26>
 8028f34:	f7fb fe8c 	bl	8024c50 <GUI_GetCharDistX>
 8028f38:	4405      	add	r5, r0
 8028f3a:	b10c      	cbz	r4, 8028f40 <_GetCharWrap+0x20>
 8028f3c:	4545      	cmp	r5, r8
 8028f3e:	dc08      	bgt.n	8028f52 <_GetCharWrap+0x32>
 8028f40:	2e0a      	cmp	r6, #10
 8028f42:	d006      	beq.n	8028f52 <_GetCharWrap+0x32>
 8028f44:	3401      	adds	r4, #1
 8028f46:	4638      	mov	r0, r7
 8028f48:	f7f9 fe88 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8028f4c:	4606      	mov	r6, r0
 8028f4e:	2800      	cmp	r0, #0
 8028f50:	d1f0      	bne.n	8028f34 <_GetCharWrap+0x14>
 8028f52:	4620      	mov	r0, r4
 8028f54:	b002      	add	sp, #8
 8028f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f5a:	bf00      	nop

08028f5c <GUI__WrapGetNumCharsDisp>:
 8028f5c:	2a01      	cmp	r2, #1
 8028f5e:	b508      	push	{r3, lr}
 8028f60:	d00b      	beq.n	8028f7a <GUI__WrapGetNumCharsDisp+0x1e>
 8028f62:	2a02      	cmp	r2, #2
 8028f64:	d103      	bne.n	8028f6e <GUI__WrapGetNumCharsDisp+0x12>
 8028f66:	4b07      	ldr	r3, [pc, #28]	; (8028f84 <GUI__WrapGetNumCharsDisp+0x28>)
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	4798      	blx	r3
 8028f6c:	bd08      	pop	{r3, pc}
 8028f6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8028f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028f76:	f7fb bd77 	b.w	8024a68 <GUI__GetLineNumChars>
 8028f7a:	4b03      	ldr	r3, [pc, #12]	; (8028f88 <GUI__WrapGetNumCharsDisp+0x2c>)
 8028f7c:	2200      	movs	r2, #0
 8028f7e:	681b      	ldr	r3, [r3, #0]
 8028f80:	4798      	blx	r3
 8028f82:	bd08      	pop	{r3, pc}
 8028f84:	200003f4 	.word	0x200003f4
 8028f88:	200003f8 	.word	0x200003f8

08028f8c <GUI__WrapGetNumBytesToNextLine>:
 8028f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028f90:	b083      	sub	sp, #12
 8028f92:	2a01      	cmp	r2, #1
 8028f94:	4615      	mov	r5, r2
 8028f96:	4607      	mov	r7, r0
 8028f98:	9000      	str	r0, [sp, #0]
 8028f9a:	4688      	mov	r8, r1
 8028f9c:	d032      	beq.n	8029004 <GUI__WrapGetNumBytesToNextLine+0x78>
 8028f9e:	2a02      	cmp	r2, #2
 8028fa0:	d01c      	beq.n	8028fdc <GUI__WrapGetNumBytesToNextLine+0x50>
 8028fa2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8028fa6:	f7fb fd5f 	bl	8024a68 <GUI__GetLineNumChars>
 8028faa:	f8dd 9000 	ldr.w	r9, [sp]
 8028fae:	4601      	mov	r1, r0
 8028fb0:	4604      	mov	r4, r0
 8028fb2:	4648      	mov	r0, r9
 8028fb4:	f7f9 fe66 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8028fb8:	ae02      	add	r6, sp, #8
 8028fba:	4448      	add	r0, r9
 8028fbc:	f846 0d08 	str.w	r0, [r6, #-8]!
 8028fc0:	4668      	mov	r0, sp
 8028fc2:	f7f9 fe4b 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8028fc6:	280a      	cmp	r0, #10
 8028fc8:	d01a      	beq.n	8029000 <GUI__WrapGetNumBytesToNextLine+0x74>
 8028fca:	2d01      	cmp	r5, #1
 8028fcc:	d02d      	beq.n	802902a <GUI__WrapGetNumBytesToNextLine+0x9e>
 8028fce:	4638      	mov	r0, r7
 8028fd0:	4621      	mov	r1, r4
 8028fd2:	f7f9 fe57 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8028fd6:	b003      	add	sp, #12
 8028fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028fdc:	4b1c      	ldr	r3, [pc, #112]	; (8029050 <GUI__WrapGetNumBytesToNextLine+0xc4>)
 8028fde:	681b      	ldr	r3, [r3, #0]
 8028fe0:	4798      	blx	r3
 8028fe2:	9d00      	ldr	r5, [sp, #0]
 8028fe4:	4601      	mov	r1, r0
 8028fe6:	4604      	mov	r4, r0
 8028fe8:	4628      	mov	r0, r5
 8028fea:	f7f9 fe4b 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8028fee:	ab02      	add	r3, sp, #8
 8028ff0:	4428      	add	r0, r5
 8028ff2:	f843 0d08 	str.w	r0, [r3, #-8]!
 8028ff6:	4668      	mov	r0, sp
 8028ff8:	f7f9 fe30 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8028ffc:	280a      	cmp	r0, #10
 8028ffe:	d1e6      	bne.n	8028fce <GUI__WrapGetNumBytesToNextLine+0x42>
 8029000:	3401      	adds	r4, #1
 8029002:	e7e4      	b.n	8028fce <GUI__WrapGetNumBytesToNextLine+0x42>
 8029004:	4b13      	ldr	r3, [pc, #76]	; (8029054 <GUI__WrapGetNumBytesToNextLine+0xc8>)
 8029006:	aa01      	add	r2, sp, #4
 8029008:	681b      	ldr	r3, [r3, #0]
 802900a:	4798      	blx	r3
 802900c:	9d00      	ldr	r5, [sp, #0]
 802900e:	4601      	mov	r1, r0
 8029010:	4604      	mov	r4, r0
 8029012:	4628      	mov	r0, r5
 8029014:	f7f9 fe36 	bl	8022c84 <GUI_UC__NumChars2NumBytes>
 8029018:	ae02      	add	r6, sp, #8
 802901a:	4428      	add	r0, r5
 802901c:	f846 0d08 	str.w	r0, [r6, #-8]!
 8029020:	4668      	mov	r0, sp
 8029022:	f7f9 fe1b 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8029026:	280a      	cmp	r0, #10
 8029028:	d0ea      	beq.n	8029000 <GUI__WrapGetNumBytesToNextLine+0x74>
 802902a:	2820      	cmp	r0, #32
 802902c:	d1cf      	bne.n	8028fce <GUI__WrapGetNumBytesToNextLine+0x42>
 802902e:	f7fb fe0f 	bl	8024c50 <GUI_GetCharDistX>
 8029032:	4605      	mov	r5, r0
 8029034:	9b01      	ldr	r3, [sp, #4]
 8029036:	4598      	cmp	r8, r3
 8029038:	4668      	mov	r0, sp
 802903a:	eb05 0203 	add.w	r2, r5, r3
 802903e:	dbc6      	blt.n	8028fce <GUI__WrapGetNumBytesToNextLine+0x42>
 8029040:	9201      	str	r2, [sp, #4]
 8029042:	f7f9 fe0b 	bl	8022c5c <GUI_UC__GetCharCodeInc>
 8029046:	2820      	cmp	r0, #32
 8029048:	f104 0401 	add.w	r4, r4, #1
 802904c:	d0f2      	beq.n	8029034 <GUI__WrapGetNumBytesToNextLine+0xa8>
 802904e:	e7be      	b.n	8028fce <GUI__WrapGetNumBytesToNextLine+0x42>
 8029050:	200003f4 	.word	0x200003f4
 8029054:	200003f8 	.word	0x200003f8

08029058 <GUI__ExpandPixelIndicesEx>:
 8029058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802905c:	1e0f      	subs	r7, r1, #0
 802905e:	4606      	mov	r6, r0
 8029060:	dd06      	ble.n	8029070 <GUI__ExpandPixelIndicesEx+0x18>
 8029062:	2a08      	cmp	r2, #8
 8029064:	685d      	ldr	r5, [r3, #4]
 8029066:	dd05      	ble.n	8029074 <GUI__ExpandPixelIndicesEx+0x1c>
 8029068:	2a10      	cmp	r2, #16
 802906a:	dd19      	ble.n	80290a0 <GUI__ExpandPixelIndicesEx+0x48>
 802906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029074:	3a01      	subs	r2, #1
 8029076:	2a07      	cmp	r2, #7
 8029078:	d8fa      	bhi.n	8029070 <GUI__ExpandPixelIndicesEx+0x18>
 802907a:	a301      	add	r3, pc, #4	; (adr r3, 8029080 <GUI__ExpandPixelIndicesEx+0x28>)
 802907c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8029080:	080290e9 	.word	0x080290e9
 8029084:	08029141 	.word	0x08029141
 8029088:	08029071 	.word	0x08029071
 802908c:	080291a1 	.word	0x080291a1
 8029090:	08029071 	.word	0x08029071
 8029094:	08029071 	.word	0x08029071
 8029098:	08029071 	.word	0x08029071
 802909c:	080290cb 	.word	0x080290cb
 80290a0:	695c      	ldr	r4, [r3, #20]
 80290a2:	b12c      	cbz	r4, 80290b0 <GUI__ExpandPixelIndicesEx+0x58>
 80290a4:	4631      	mov	r1, r6
 80290a6:	463a      	mov	r2, r7
 80290a8:	2302      	movs	r3, #2
 80290aa:	47a0      	blx	r4
 80290ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80290b0:	007f      	lsls	r7, r7, #1
 80290b2:	19f4      	adds	r4, r6, r7
 80290b4:	19e6      	adds	r6, r4, r7
 80290b6:	1be7      	subs	r7, r4, r7
 80290b8:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 80290bc:	47a8      	blx	r5
 80290be:	42bc      	cmp	r4, r7
 80290c0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80290c4:	d1f8      	bne.n	80290b8 <GUI__ExpandPixelIndicesEx+0x60>
 80290c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80290ca:	eb06 0807 	add.w	r8, r6, r7
 80290ce:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80290d2:	ebc7 0708 	rsb	r7, r7, r8
 80290d6:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 80290da:	47a8      	blx	r5
 80290dc:	45b8      	cmp	r8, r7
 80290de:	f846 0d04 	str.w	r0, [r6, #-4]!
 80290e2:	d1f8      	bne.n	80290d6 <GUI__ExpandPixelIndicesEx+0x7e>
 80290e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80290e8:	1e7c      	subs	r4, r7, #1
 80290ea:	10e2      	asrs	r2, r4, #3
 80290ec:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80290f0:	f04f 0880 	mov.w	r8, #128	; 0x80
 80290f4:	f004 0707 	and.w	r7, r4, #7
 80290f8:	eb06 0a02 	add.w	sl, r6, r2
 80290fc:	3b01      	subs	r3, #1
 80290fe:	fa48 f807 	asr.w	r8, r8, r7
 8029102:	f816 9002 	ldrb.w	r9, [r6, r2]
 8029106:	f10a 3aff 	add.w	sl, sl, #4294967295
 802910a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 802910e:	fa5f f888 	uxtb.w	r8, r8
 8029112:	ea09 0008 	and.w	r0, r9, r8
 8029116:	f1c7 0307 	rsb	r3, r7, #7
 802911a:	4118      	asrs	r0, r3
 802911c:	47a8      	blx	r5
 802911e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8029122:	f846 0904 	str.w	r0, [r6], #-4
 8029126:	2f00      	cmp	r7, #0
 8029128:	d16b      	bne.n	8029202 <GUI__ExpandPixelIndicesEx+0x1aa>
 802912a:	f89a 9000 	ldrb.w	r9, [sl]
 802912e:	f04f 0801 	mov.w	r8, #1
 8029132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029136:	2707      	movs	r7, #7
 8029138:	2c00      	cmp	r4, #0
 802913a:	d099      	beq.n	8029070 <GUI__ExpandPixelIndicesEx+0x18>
 802913c:	3c01      	subs	r4, #1
 802913e:	e7e8      	b.n	8029112 <GUI__ExpandPixelIndicesEx+0xba>
 8029140:	1e7c      	subs	r4, r7, #1
 8029142:	f004 0903 	and.w	r9, r4, #3
 8029146:	10a2      	asrs	r2, r4, #2
 8029148:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 802914c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8029150:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 8029154:	18b7      	adds	r7, r6, r2
 8029156:	3b01      	subs	r3, #1
 8029158:	fa48 f800 	asr.w	r8, r8, r0
 802915c:	f816 a002 	ldrb.w	sl, [r6, r2]
 8029160:	fa5f f888 	uxtb.w	r8, r8
 8029164:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8029168:	3f01      	subs	r7, #1
 802916a:	ea0a 0308 	and.w	r3, sl, r8
 802916e:	f1c0 0006 	rsb	r0, r0, #6
 8029172:	fa43 f000 	asr.w	r0, r3, r0
 8029176:	47a8      	blx	r5
 8029178:	ea4f 0888 	mov.w	r8, r8, lsl #2
 802917c:	f846 0904 	str.w	r0, [r6], #-4
 8029180:	f1b9 0f00 	cmp.w	r9, #0
 8029184:	d146      	bne.n	8029214 <GUI__ExpandPixelIndicesEx+0x1bc>
 8029186:	f04f 0803 	mov.w	r8, #3
 802918a:	f897 a000 	ldrb.w	sl, [r7]
 802918e:	46c1      	mov	r9, r8
 8029190:	3f01      	subs	r7, #1
 8029192:	2c00      	cmp	r4, #0
 8029194:	f43f af6c 	beq.w	8029070 <GUI__ExpandPixelIndicesEx+0x18>
 8029198:	3c01      	subs	r4, #1
 802919a:	ea4f 0049 	mov.w	r0, r9, lsl #1
 802919e:	e7e4      	b.n	802916a <GUI__ExpandPixelIndicesEx+0x112>
 80291a0:	1e7c      	subs	r4, r7, #1
 80291a2:	f004 0901 	and.w	r9, r4, #1
 80291a6:	1062      	asrs	r2, r4, #1
 80291a8:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80291ac:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80291b0:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 80291b4:	18b7      	adds	r7, r6, r2
 80291b6:	3b01      	subs	r3, #1
 80291b8:	fa48 f800 	asr.w	r8, r8, r0
 80291bc:	f816 a002 	ldrb.w	sl, [r6, r2]
 80291c0:	fa5f f888 	uxtb.w	r8, r8
 80291c4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80291c8:	3f01      	subs	r7, #1
 80291ca:	ea0a 0308 	and.w	r3, sl, r8
 80291ce:	f1c0 0004 	rsb	r0, r0, #4
 80291d2:	fa43 f000 	asr.w	r0, r3, r0
 80291d6:	47a8      	blx	r5
 80291d8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80291dc:	f846 0904 	str.w	r0, [r6], #-4
 80291e0:	f1b9 0f00 	cmp.w	r9, #0
 80291e4:	d111      	bne.n	802920a <GUI__ExpandPixelIndicesEx+0x1b2>
 80291e6:	f897 a000 	ldrb.w	sl, [r7]
 80291ea:	f04f 080f 	mov.w	r8, #15
 80291ee:	3f01      	subs	r7, #1
 80291f0:	f04f 0901 	mov.w	r9, #1
 80291f4:	2c00      	cmp	r4, #0
 80291f6:	f43f af3b 	beq.w	8029070 <GUI__ExpandPixelIndicesEx+0x18>
 80291fa:	3c01      	subs	r4, #1
 80291fc:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8029200:	e7e3      	b.n	80291ca <GUI__ExpandPixelIndicesEx+0x172>
 8029202:	3f01      	subs	r7, #1
 8029204:	fa5f f888 	uxtb.w	r8, r8
 8029208:	e796      	b.n	8029138 <GUI__ExpandPixelIndicesEx+0xe0>
 802920a:	fa5f f888 	uxtb.w	r8, r8
 802920e:	f04f 0900 	mov.w	r9, #0
 8029212:	e7ef      	b.n	80291f4 <GUI__ExpandPixelIndicesEx+0x19c>
 8029214:	f109 39ff 	add.w	r9, r9, #4294967295
 8029218:	fa5f f888 	uxtb.w	r8, r8
 802921c:	e7b9      	b.n	8029192 <GUI__ExpandPixelIndicesEx+0x13a>
 802921e:	bf00      	nop

08029220 <GUI__DrawTwinArc4>:
 8029220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029224:	b093      	sub	sp, #76	; 0x4c
 8029226:	4607      	mov	r7, r0
 8029228:	4698      	mov	r8, r3
 802922a:	460c      	mov	r4, r1
 802922c:	4691      	mov	r9, r2
 802922e:	f7f9 ffdd 	bl	80231ec <GUI_Lock>
 8029232:	4ba3      	ldr	r3, [pc, #652]	; (80294c0 <GUI__DrawTwinArc4+0x2a0>)
 8029234:	681d      	ldr	r5, [r3, #0]
 8029236:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 8029238:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 802923a:	19f7      	adds	r7, r6, r7
 802923c:	44b1      	add	r9, r6
 802923e:	44a8      	add	r8, r5
 8029240:	442c      	add	r4, r5
 8029242:	a810      	add	r0, sp, #64	; 0x40
 8029244:	9709      	str	r7, [sp, #36]	; 0x24
 8029246:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 802924a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802924e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8029252:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8029256:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 802925a:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 802925e:	f7f5 faa5 	bl	801e7ac <WM__InitIVRSearch>
 8029262:	2800      	cmp	r0, #0
 8029264:	d07e      	beq.n	8029364 <GUI__DrawTwinArc4+0x144>
 8029266:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029268:	3b01      	subs	r3, #1
 802926a:	9303      	str	r3, [sp, #12]
 802926c:	fb03 f303 	mul.w	r3, r3, r3
 8029270:	9306      	str	r3, [sp, #24]
 8029272:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029274:	9a06      	ldr	r2, [sp, #24]
 8029276:	fb03 f303 	mul.w	r3, r3, r3
 802927a:	9305      	str	r3, [sp, #20]
 802927c:	1a9b      	subs	r3, r3, r2
 802927e:	930e      	str	r3, [sp, #56]	; 0x38
 8029280:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029282:	3b02      	subs	r3, #2
 8029284:	9307      	str	r3, [sp, #28]
 8029286:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029288:	3b03      	subs	r3, #3
 802928a:	930f      	str	r3, [sp, #60]	; 0x3c
 802928c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802928e:	4423      	add	r3, r4
 8029290:	3402      	adds	r4, #2
 8029292:	930d      	str	r3, [sp, #52]	; 0x34
 8029294:	940c      	str	r4, [sp, #48]	; 0x30
 8029296:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029298:	2b00      	cmp	r3, #0
 802929a:	dd5f      	ble.n	802935c <GUI__DrawTwinArc4+0x13c>
 802929c:	981d      	ldr	r0, [sp, #116]	; 0x74
 802929e:	f7fb fa41 	bl	8024724 <GUI_SetColor>
 80292a2:	9b03      	ldr	r3, [sp, #12]
 80292a4:	2b00      	cmp	r3, #0
 80292a6:	d062      	beq.n	802936e <GUI__DrawTwinArc4+0x14e>
 80292a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80292aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80292ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80292ae:	1ad3      	subs	r3, r2, r3
 80292b0:	9304      	str	r3, [sp, #16]
 80292b2:	f7f9 f8d1 	bl	8022458 <GUI__sqrt32>
 80292b6:	9b04      	ldr	r3, [sp, #16]
 80292b8:	9e03      	ldr	r6, [sp, #12]
 80292ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80292bc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80292c0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80292c4:	9c03      	ldr	r4, [sp, #12]
 80292c6:	441e      	add	r6, r3
 80292c8:	9b03      	ldr	r3, [sp, #12]
 80292ca:	1ad5      	subs	r5, r2, r3
 80292cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80292ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80292d0:	4607      	mov	r7, r0
 80292d2:	449b      	add	fp, r3
 80292d4:	ebc3 0a02 	rsb	sl, r3, r2
 80292d8:	2000      	movs	r0, #0
 80292da:	e002      	b.n	80292e2 <GUI__DrawTwinArc4+0xc2>
 80292dc:	2000      	movs	r0, #0
 80292de:	f109 0901 	add.w	r9, r9, #1
 80292e2:	ebc0 030b 	rsb	r3, r0, fp
 80292e6:	ebc7 0c0b 	rsb	ip, r7, fp
 80292ea:	3b01      	subs	r3, #1
 80292ec:	eb00 080a 	add.w	r8, r0, sl
 80292f0:	461a      	mov	r2, r3
 80292f2:	4660      	mov	r0, ip
 80292f4:	f108 0801 	add.w	r8, r8, #1
 80292f8:	4629      	mov	r1, r5
 80292fa:	4457      	add	r7, sl
 80292fc:	9302      	str	r3, [sp, #8]
 80292fe:	f8cd c004 	str.w	ip, [sp, #4]
 8029302:	f7f8 faed 	bl	80218e0 <LCD_DrawHLine>
 8029306:	4640      	mov	r0, r8
 8029308:	4629      	mov	r1, r5
 802930a:	463a      	mov	r2, r7
 802930c:	f7f8 fae8 	bl	80218e0 <LCD_DrawHLine>
 8029310:	9b02      	ldr	r3, [sp, #8]
 8029312:	f8dd c004 	ldr.w	ip, [sp, #4]
 8029316:	461a      	mov	r2, r3
 8029318:	4660      	mov	r0, ip
 802931a:	4631      	mov	r1, r6
 802931c:	f7f8 fae0 	bl	80218e0 <LCD_DrawHLine>
 8029320:	4640      	mov	r0, r8
 8029322:	4631      	mov	r1, r6
 8029324:	463a      	mov	r2, r7
 8029326:	f7f8 fadb 	bl	80218e0 <LCD_DrawHLine>
 802932a:	3c01      	subs	r4, #1
 802932c:	9b05      	ldr	r3, [sp, #20]
 802932e:	9e04      	ldr	r6, [sp, #16]
 8029330:	fb04 f804 	mul.w	r8, r4, r4
 8029334:	ebc8 0003 	rsb	r0, r8, r3
 8029338:	464d      	mov	r5, r9
 802933a:	4426      	add	r6, r4
 802933c:	d017      	beq.n	802936e <GUI__DrawTwinArc4+0x14e>
 802933e:	f7f9 f88b 	bl	8022458 <GUI__sqrt32>
 8029342:	9b03      	ldr	r3, [sp, #12]
 8029344:	42a3      	cmp	r3, r4
 8029346:	4607      	mov	r7, r0
 8029348:	ddc8      	ble.n	80292dc <GUI__DrawTwinArc4+0xbc>
 802934a:	9b06      	ldr	r3, [sp, #24]
 802934c:	ebc8 0003 	rsb	r0, r8, r3
 8029350:	f7f9 f882 	bl	8022458 <GUI__sqrt32>
 8029354:	e7c3      	b.n	80292de <GUI__DrawTwinArc4+0xbe>
 8029356:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029358:	2b02      	cmp	r3, #2
 802935a:	d161      	bne.n	8029420 <GUI__DrawTwinArc4+0x200>
 802935c:	f7f5 f900 	bl	801e560 <WM__GetNextIVR>
 8029360:	2800      	cmp	r0, #0
 8029362:	d198      	bne.n	8029296 <GUI__DrawTwinArc4+0x76>
 8029364:	f7f9 ff38 	bl	80231d8 <GUI_Unlock>
 8029368:	b013      	add	sp, #76	; 0x4c
 802936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802936e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029370:	2b01      	cmp	r3, #1
 8029372:	d0f3      	beq.n	802935c <GUI__DrawTwinArc4+0x13c>
 8029374:	981e      	ldr	r0, [sp, #120]	; 0x78
 8029376:	f7fb f9d5 	bl	8024724 <GUI_SetColor>
 802937a:	9b07      	ldr	r3, [sp, #28]
 802937c:	2b00      	cmp	r3, #0
 802937e:	d0ea      	beq.n	8029356 <GUI__DrawTwinArc4+0x136>
 8029380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029382:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8029386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029388:	461c      	mov	r4, r3
 802938a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802938c:	1ad3      	subs	r3, r2, r3
 802938e:	9304      	str	r3, [sp, #16]
 8029390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029394:	449a      	add	sl, r3
 8029396:	ebc3 0902 	rsb	r9, r3, r2
 802939a:	e029      	b.n	80293f0 <GUI__DrawTwinArc4+0x1d0>
 802939c:	f04f 0800 	mov.w	r8, #0
 80293a0:	4640      	mov	r0, r8
 80293a2:	ebc8 030a 	rsb	r3, r8, sl
 80293a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80293aa:	ebc0 0c0a 	rsb	ip, r0, sl
 80293ae:	44c8      	add	r8, r9
 80293b0:	eb00 0609 	add.w	r6, r0, r9
 80293b4:	4629      	mov	r1, r5
 80293b6:	4660      	mov	r0, ip
 80293b8:	f108 0801 	add.w	r8, r8, #1
 80293bc:	465a      	mov	r2, fp
 80293be:	f8cd c004 	str.w	ip, [sp, #4]
 80293c2:	f7f8 fa8d 	bl	80218e0 <LCD_DrawHLine>
 80293c6:	4629      	mov	r1, r5
 80293c8:	4640      	mov	r0, r8
 80293ca:	4632      	mov	r2, r6
 80293cc:	f7f8 fa88 	bl	80218e0 <LCD_DrawHLine>
 80293d0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80293d4:	4639      	mov	r1, r7
 80293d6:	4660      	mov	r0, ip
 80293d8:	465a      	mov	r2, fp
 80293da:	f7f8 fa81 	bl	80218e0 <LCD_DrawHLine>
 80293de:	4640      	mov	r0, r8
 80293e0:	4639      	mov	r1, r7
 80293e2:	4632      	mov	r2, r6
 80293e4:	f7f8 fa7c 	bl	80218e0 <LCD_DrawHLine>
 80293e8:	3c01      	subs	r4, #1
 80293ea:	f105 0501 	add.w	r5, r5, #1
 80293ee:	d0b2      	beq.n	8029356 <GUI__DrawTwinArc4+0x136>
 80293f0:	9b05      	ldr	r3, [sp, #20]
 80293f2:	9f04      	ldr	r7, [sp, #16]
 80293f4:	fb04 f604 	mul.w	r6, r4, r4
 80293f8:	1b98      	subs	r0, r3, r6
 80293fa:	f7f9 f82d 	bl	8022458 <GUI__sqrt32>
 80293fe:	9b03      	ldr	r3, [sp, #12]
 8029400:	42a3      	cmp	r3, r4
 8029402:	4427      	add	r7, r4
 8029404:	ddca      	ble.n	802939c <GUI__DrawTwinArc4+0x17c>
 8029406:	9b06      	ldr	r3, [sp, #24]
 8029408:	1b98      	subs	r0, r3, r6
 802940a:	f7f9 f825 	bl	8022458 <GUI__sqrt32>
 802940e:	9b07      	ldr	r3, [sp, #28]
 8029410:	42a3      	cmp	r3, r4
 8029412:	dd02      	ble.n	802941a <GUI__DrawTwinArc4+0x1fa>
 8029414:	f100 38ff 	add.w	r8, r0, #4294967295
 8029418:	e7c3      	b.n	80293a2 <GUI__DrawTwinArc4+0x182>
 802941a:	f04f 0800 	mov.w	r8, #0
 802941e:	e7c0      	b.n	80293a2 <GUI__DrawTwinArc4+0x182>
 8029420:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8029422:	f7fb f97f 	bl	8024724 <GUI_SetColor>
 8029426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029428:	2b00      	cmp	r3, #0
 802942a:	d097      	beq.n	802935c <GUI__DrawTwinArc4+0x13c>
 802942c:	4699      	mov	r9, r3
 802942e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029430:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029432:	441a      	add	r2, r3
 8029434:	9204      	str	r2, [sp, #16]
 8029436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029438:	f1c3 0403 	rsb	r4, r3, #3
 802943c:	ebc3 0b02 	rsb	fp, r3, r2
 8029440:	9b04      	ldr	r3, [sp, #16]
 8029442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029444:	f103 38ff 	add.w	r8, r3, #4294967295
 8029448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802944a:	441c      	add	r4, r3
 802944c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802944e:	1ad3      	subs	r3, r2, r3
 8029450:	f10b 0701 	add.w	r7, fp, #1
 8029454:	9308      	str	r3, [sp, #32]
 8029456:	e01e      	b.n	8029496 <GUI__DrawTwinArc4+0x276>
 8029458:	2500      	movs	r5, #0
 802945a:	9b04      	ldr	r3, [sp, #16]
 802945c:	ebc5 0a03 	rsb	sl, r5, r3
 8029460:	4621      	mov	r1, r4
 8029462:	445d      	add	r5, fp
 8029464:	4650      	mov	r0, sl
 8029466:	4642      	mov	r2, r8
 8029468:	f7f8 fa3a 	bl	80218e0 <LCD_DrawHLine>
 802946c:	4621      	mov	r1, r4
 802946e:	4638      	mov	r0, r7
 8029470:	462a      	mov	r2, r5
 8029472:	f7f8 fa35 	bl	80218e0 <LCD_DrawHLine>
 8029476:	4650      	mov	r0, sl
 8029478:	4631      	mov	r1, r6
 802947a:	4642      	mov	r2, r8
 802947c:	f7f8 fa30 	bl	80218e0 <LCD_DrawHLine>
 8029480:	4638      	mov	r0, r7
 8029482:	4631      	mov	r1, r6
 8029484:	462a      	mov	r2, r5
 8029486:	f7f8 fa2b 	bl	80218e0 <LCD_DrawHLine>
 802948a:	f1b9 0901 	subs.w	r9, r9, #1
 802948e:	f104 0401 	add.w	r4, r4, #1
 8029492:	f43f af63 	beq.w	802935c <GUI__DrawTwinArc4+0x13c>
 8029496:	9b05      	ldr	r3, [sp, #20]
 8029498:	9e08      	ldr	r6, [sp, #32]
 802949a:	fb09 f509 	mul.w	r5, r9, r9
 802949e:	1b58      	subs	r0, r3, r5
 80294a0:	f7f8 ffda 	bl	8022458 <GUI__sqrt32>
 80294a4:	9b03      	ldr	r3, [sp, #12]
 80294a6:	454b      	cmp	r3, r9
 80294a8:	444e      	add	r6, r9
 80294aa:	ddd5      	ble.n	8029458 <GUI__DrawTwinArc4+0x238>
 80294ac:	9b06      	ldr	r3, [sp, #24]
 80294ae:	1b58      	subs	r0, r3, r5
 80294b0:	f7f8 ffd2 	bl	8022458 <GUI__sqrt32>
 80294b4:	9b07      	ldr	r3, [sp, #28]
 80294b6:	454b      	cmp	r3, r9
 80294b8:	ddce      	ble.n	8029458 <GUI__DrawTwinArc4+0x238>
 80294ba:	1e45      	subs	r5, r0, #1
 80294bc:	e7cd      	b.n	802945a <GUI__DrawTwinArc4+0x23a>
 80294be:	bf00      	nop
 80294c0:	20000280 	.word	0x20000280

080294c4 <GUI__CompactPixelIndices>:
 80294c4:	2a08      	cmp	r2, #8
 80294c6:	b410      	push	{r4}
 80294c8:	dd0e      	ble.n	80294e8 <GUI__CompactPixelIndices+0x24>
 80294ca:	2a10      	cmp	r2, #16
 80294cc:	dc1b      	bgt.n	8029506 <GUI__CompactPixelIndices+0x42>
 80294ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80294d2:	4603      	mov	r3, r0
 80294d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80294d8:	f823 2b02 	strh.w	r2, [r3], #2
 80294dc:	428b      	cmp	r3, r1
 80294de:	d1f9      	bne.n	80294d4 <GUI__CompactPixelIndices+0x10>
 80294e0:	2001      	movs	r0, #1
 80294e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80294e6:	4770      	bx	lr
 80294e8:	2a02      	cmp	r2, #2
 80294ea:	d010      	beq.n	802950e <GUI__CompactPixelIndices+0x4a>
 80294ec:	2a04      	cmp	r2, #4
 80294ee:	d076      	beq.n	80295de <GUI__CompactPixelIndices+0x11a>
 80294f0:	2a01      	cmp	r2, #1
 80294f2:	d034      	beq.n	802955e <GUI__CompactPixelIndices+0x9a>
 80294f4:	4401      	add	r1, r0
 80294f6:	4603      	mov	r3, r0
 80294f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80294fc:	f803 2b01 	strb.w	r2, [r3], #1
 8029500:	428b      	cmp	r3, r1
 8029502:	d1f9      	bne.n	80294f8 <GUI__CompactPixelIndices+0x34>
 8029504:	e7ec      	b.n	80294e0 <GUI__CompactPixelIndices+0x1c>
 8029506:	2000      	movs	r0, #0
 8029508:	f85d 4b04 	ldr.w	r4, [sp], #4
 802950c:	4770      	bx	lr
 802950e:	4602      	mov	r2, r0
 8029510:	2901      	cmp	r1, #1
 8029512:	6813      	ldr	r3, [r2, #0]
 8029514:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8029518:	b2db      	uxtb	r3, r3
 802951a:	d01d      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 802951c:	6854      	ldr	r4, [r2, #4]
 802951e:	2902      	cmp	r1, #2
 8029520:	f004 0403 	and.w	r4, r4, #3
 8029524:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8029528:	d016      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 802952a:	6894      	ldr	r4, [r2, #8]
 802952c:	2903      	cmp	r1, #3
 802952e:	f004 0403 	and.w	r4, r4, #3
 8029532:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8029536:	d00f      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 8029538:	68d4      	ldr	r4, [r2, #12]
 802953a:	f004 0403 	and.w	r4, r4, #3
 802953e:	4323      	orrs	r3, r4
 8029540:	3904      	subs	r1, #4
 8029542:	f800 3b01 	strb.w	r3, [r0], #1
 8029546:	f102 0210 	add.w	r2, r2, #16
 802954a:	d0c9      	beq.n	80294e0 <GUI__CompactPixelIndices+0x1c>
 802954c:	6813      	ldr	r3, [r2, #0]
 802954e:	2901      	cmp	r1, #1
 8029550:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8029554:	b2db      	uxtb	r3, r3
 8029556:	d1e1      	bne.n	802951c <GUI__CompactPixelIndices+0x58>
 8029558:	7003      	strb	r3, [r0, #0]
 802955a:	2001      	movs	r0, #1
 802955c:	e7c1      	b.n	80294e2 <GUI__CompactPixelIndices+0x1e>
 802955e:	4602      	mov	r2, r0
 8029560:	2901      	cmp	r1, #1
 8029562:	6813      	ldr	r3, [r2, #0]
 8029564:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8029568:	b2db      	uxtb	r3, r3
 802956a:	d0f5      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 802956c:	6854      	ldr	r4, [r2, #4]
 802956e:	2902      	cmp	r1, #2
 8029570:	f004 0401 	and.w	r4, r4, #1
 8029574:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8029578:	d0ee      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 802957a:	6894      	ldr	r4, [r2, #8]
 802957c:	2903      	cmp	r1, #3
 802957e:	f004 0401 	and.w	r4, r4, #1
 8029582:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8029586:	d0e7      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 8029588:	68d4      	ldr	r4, [r2, #12]
 802958a:	2904      	cmp	r1, #4
 802958c:	f004 0401 	and.w	r4, r4, #1
 8029590:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8029594:	d0e0      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 8029596:	6914      	ldr	r4, [r2, #16]
 8029598:	2905      	cmp	r1, #5
 802959a:	f004 0401 	and.w	r4, r4, #1
 802959e:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 80295a2:	d0d9      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 80295a4:	6954      	ldr	r4, [r2, #20]
 80295a6:	2906      	cmp	r1, #6
 80295a8:	f004 0401 	and.w	r4, r4, #1
 80295ac:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80295b0:	d0d2      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 80295b2:	6994      	ldr	r4, [r2, #24]
 80295b4:	3907      	subs	r1, #7
 80295b6:	f004 0401 	and.w	r4, r4, #1
 80295ba:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80295be:	d0cb      	beq.n	8029558 <GUI__CompactPixelIndices+0x94>
 80295c0:	69d4      	ldr	r4, [r2, #28]
 80295c2:	f004 0401 	and.w	r4, r4, #1
 80295c6:	4323      	orrs	r3, r4
 80295c8:	f800 3b01 	strb.w	r3, [r0], #1
 80295cc:	3220      	adds	r2, #32
 80295ce:	6813      	ldr	r3, [r2, #0]
 80295d0:	2901      	cmp	r1, #1
 80295d2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80295d6:	b2db      	uxtb	r3, r3
 80295d8:	d1c8      	bne.n	802956c <GUI__CompactPixelIndices+0xa8>
 80295da:	7003      	strb	r3, [r0, #0]
 80295dc:	e7bd      	b.n	802955a <GUI__CompactPixelIndices+0x96>
 80295de:	f100 0308 	add.w	r3, r0, #8
 80295e2:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80295e6:	2901      	cmp	r1, #1
 80295e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80295ec:	b2d2      	uxtb	r2, r2
 80295ee:	d012      	beq.n	8029616 <GUI__CompactPixelIndices+0x152>
 80295f0:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80295f4:	f004 040f 	and.w	r4, r4, #15
 80295f8:	4322      	orrs	r2, r4
 80295fa:	3902      	subs	r1, #2
 80295fc:	f800 2b01 	strb.w	r2, [r0], #1
 8029600:	f103 0308 	add.w	r3, r3, #8
 8029604:	f43f af6c 	beq.w	80294e0 <GUI__CompactPixelIndices+0x1c>
 8029608:	f853 2c08 	ldr.w	r2, [r3, #-8]
 802960c:	2901      	cmp	r1, #1
 802960e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8029612:	b2d2      	uxtb	r2, r2
 8029614:	d1ec      	bne.n	80295f0 <GUI__CompactPixelIndices+0x12c>
 8029616:	7002      	strb	r2, [r0, #0]
 8029618:	f85d 4b04 	ldr.w	r4, [sp], #4
 802961c:	4608      	mov	r0, r1
 802961e:	4770      	bx	lr

08029620 <GUI__CompactPixelIndicesEx>:
 8029620:	2a08      	cmp	r2, #8
 8029622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029626:	460c      	mov	r4, r1
 8029628:	681e      	ldr	r6, [r3, #0]
 802962a:	4605      	mov	r5, r0
 802962c:	dd0c      	ble.n	8029648 <GUI__CompactPixelIndicesEx+0x28>
 802962e:	2a10      	cmp	r2, #16
 8029630:	dc20      	bgt.n	8029674 <GUI__CompactPixelIndicesEx+0x54>
 8029632:	691f      	ldr	r7, [r3, #16]
 8029634:	2f00      	cmp	r7, #0
 8029636:	f000 8091 	beq.w	802975c <GUI__CompactPixelIndicesEx+0x13c>
 802963a:	4629      	mov	r1, r5
 802963c:	4622      	mov	r2, r4
 802963e:	2302      	movs	r3, #2
 8029640:	47b8      	blx	r7
 8029642:	2001      	movs	r0, #1
 8029644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029648:	3a01      	subs	r2, #1
 802964a:	2a07      	cmp	r2, #7
 802964c:	d80f      	bhi.n	802966e <GUI__CompactPixelIndicesEx+0x4e>
 802964e:	e8df f002 	tbb	[pc, r2]
 8029652:	5004      	.short	0x5004
 8029654:	0e0e750e 	.word	0x0e0e750e
 8029658:	9a0e      	.short	0x9a0e
 802965a:	4680      	mov	r8, r0
 802965c:	f8d8 0000 	ldr.w	r0, [r8]
 8029660:	47b0      	blx	r6
 8029662:	2c01      	cmp	r4, #1
 8029664:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8029668:	b2c7      	uxtb	r7, r0
 802966a:	d106      	bne.n	802967a <GUI__CompactPixelIndicesEx+0x5a>
 802966c:	702f      	strb	r7, [r5, #0]
 802966e:	2001      	movs	r0, #1
 8029670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029674:	2000      	movs	r0, #0
 8029676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802967a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802967e:	47b0      	blx	r6
 8029680:	2c02      	cmp	r4, #2
 8029682:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8029686:	b2c7      	uxtb	r7, r0
 8029688:	d0f0      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 802968a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 802968e:	47b0      	blx	r6
 8029690:	2c03      	cmp	r4, #3
 8029692:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8029696:	b2c7      	uxtb	r7, r0
 8029698:	d0e8      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 802969a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 802969e:	47b0      	blx	r6
 80296a0:	2c04      	cmp	r4, #4
 80296a2:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80296a6:	b2c7      	uxtb	r7, r0
 80296a8:	d0e0      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 80296aa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80296ae:	47b0      	blx	r6
 80296b0:	2c05      	cmp	r4, #5
 80296b2:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 80296b6:	b2c7      	uxtb	r7, r0
 80296b8:	d0d8      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 80296ba:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80296be:	47b0      	blx	r6
 80296c0:	2c06      	cmp	r4, #6
 80296c2:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 80296c6:	b2c7      	uxtb	r7, r0
 80296c8:	d0d0      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 80296ca:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80296ce:	47b0      	blx	r6
 80296d0:	2c07      	cmp	r4, #7
 80296d2:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 80296d6:	b2c7      	uxtb	r7, r0
 80296d8:	d0c8      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 80296da:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80296de:	47b0      	blx	r6
 80296e0:	3c08      	subs	r4, #8
 80296e2:	ea47 0000 	orr.w	r0, r7, r0
 80296e6:	f805 0b01 	strb.w	r0, [r5], #1
 80296ea:	f108 0820 	add.w	r8, r8, #32
 80296ee:	d1b5      	bne.n	802965c <GUI__CompactPixelIndicesEx+0x3c>
 80296f0:	e7bd      	b.n	802966e <GUI__CompactPixelIndicesEx+0x4e>
 80296f2:	4680      	mov	r8, r0
 80296f4:	f8d8 0000 	ldr.w	r0, [r8]
 80296f8:	47b0      	blx	r6
 80296fa:	2c01      	cmp	r4, #1
 80296fc:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8029700:	b2c7      	uxtb	r7, r0
 8029702:	d0b3      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 8029704:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8029708:	47b0      	blx	r6
 802970a:	2c02      	cmp	r4, #2
 802970c:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8029710:	b2c7      	uxtb	r7, r0
 8029712:	d0ab      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 8029714:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8029718:	47b0      	blx	r6
 802971a:	2c03      	cmp	r4, #3
 802971c:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8029720:	b2c7      	uxtb	r7, r0
 8029722:	d0a3      	beq.n	802966c <GUI__CompactPixelIndicesEx+0x4c>
 8029724:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8029728:	47b0      	blx	r6
 802972a:	3c04      	subs	r4, #4
 802972c:	ea47 0000 	orr.w	r0, r7, r0
 8029730:	f805 0b01 	strb.w	r0, [r5], #1
 8029734:	f108 0810 	add.w	r8, r8, #16
 8029738:	d1dc      	bne.n	80296f4 <GUI__CompactPixelIndicesEx+0xd4>
 802973a:	e798      	b.n	802966e <GUI__CompactPixelIndicesEx+0x4e>
 802973c:	f100 0708 	add.w	r7, r0, #8
 8029740:	f857 0c08 	ldr.w	r0, [r7, #-8]
 8029744:	47b0      	blx	r6
 8029746:	2c01      	cmp	r4, #1
 8029748:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802974c:	fa5f f880 	uxtb.w	r8, r0
 8029750:	d10d      	bne.n	802976e <GUI__CompactPixelIndicesEx+0x14e>
 8029752:	f885 8000 	strb.w	r8, [r5]
 8029756:	4620      	mov	r0, r4
 8029758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802975c:	4607      	mov	r7, r0
 802975e:	f857 0b04 	ldr.w	r0, [r7], #4
 8029762:	47b0      	blx	r6
 8029764:	3c01      	subs	r4, #1
 8029766:	f825 0b02 	strh.w	r0, [r5], #2
 802976a:	d1f8      	bne.n	802975e <GUI__CompactPixelIndicesEx+0x13e>
 802976c:	e77f      	b.n	802966e <GUI__CompactPixelIndicesEx+0x4e>
 802976e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8029772:	47b0      	blx	r6
 8029774:	3c02      	subs	r4, #2
 8029776:	ea48 0000 	orr.w	r0, r8, r0
 802977a:	f805 0b01 	strb.w	r0, [r5], #1
 802977e:	f107 0708 	add.w	r7, r7, #8
 8029782:	d1dd      	bne.n	8029740 <GUI__CompactPixelIndicesEx+0x120>
 8029784:	e773      	b.n	802966e <GUI__CompactPixelIndicesEx+0x4e>
 8029786:	691f      	ldr	r7, [r3, #16]
 8029788:	b13f      	cbz	r7, 802979a <GUI__CompactPixelIndicesEx+0x17a>
 802978a:	4628      	mov	r0, r5
 802978c:	4622      	mov	r2, r4
 802978e:	4629      	mov	r1, r5
 8029790:	2301      	movs	r3, #1
 8029792:	47b8      	blx	r7
 8029794:	2001      	movs	r0, #1
 8029796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802979a:	462f      	mov	r7, r5
 802979c:	f857 0b04 	ldr.w	r0, [r7], #4
 80297a0:	47b0      	blx	r6
 80297a2:	3c01      	subs	r4, #1
 80297a4:	f805 0b01 	strb.w	r0, [r5], #1
 80297a8:	d1f8      	bne.n	802979c <GUI__CompactPixelIndicesEx+0x17c>
 80297aa:	e760      	b.n	802966e <GUI__CompactPixelIndicesEx+0x4e>

080297ac <_GetCharCode>:
 80297ac:	7800      	ldrb	r0, [r0, #0]
 80297ae:	4770      	bx	lr

080297b0 <_GetCharSize>:
 80297b0:	2001      	movs	r0, #1
 80297b2:	4770      	bx	lr

080297b4 <_CalcSizeOfChar>:
 80297b4:	2001      	movs	r0, #1
 80297b6:	4770      	bx	lr

080297b8 <_Encode>:
 80297b8:	7001      	strb	r1, [r0, #0]
 80297ba:	2001      	movs	r0, #1
 80297bc:	4770      	bx	lr
 80297be:	bf00      	nop

080297c0 <GUI_DrawGradientV>:
 80297c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297c4:	b091      	sub	sp, #68	; 0x44
 80297c6:	4606      	mov	r6, r0
 80297c8:	469a      	mov	sl, r3
 80297ca:	460f      	mov	r7, r1
 80297cc:	4690      	mov	r8, r2
 80297ce:	f7f9 fd0d 	bl	80231ec <GUI_Lock>
 80297d2:	4b68      	ldr	r3, [pc, #416]	; (8029974 <GUI_DrawGradientV+0x1b4>)
 80297d4:	681c      	ldr	r4, [r3, #0]
 80297d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80297d8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80297da:	19ae      	adds	r6, r5, r6
 80297dc:	44a8      	add	r8, r5
 80297de:	19e7      	adds	r7, r4, r7
 80297e0:	44a2      	add	sl, r4
 80297e2:	a80e      	add	r0, sp, #56	; 0x38
 80297e4:	9607      	str	r6, [sp, #28]
 80297e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80297ea:	9702      	str	r7, [sp, #8]
 80297ec:	f8cd a004 	str.w	sl, [sp, #4]
 80297f0:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 80297f4:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
 80297f8:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 80297fc:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
 8029800:	f7f4 ffd4 	bl	801e7ac <WM__InitIVRSearch>
 8029804:	2800      	cmp	r0, #0
 8029806:	f000 8098 	beq.w	802993a <GUI_DrawGradientV+0x17a>
 802980a:	9e01      	ldr	r6, [sp, #4]
 802980c:	9c02      	ldr	r4, [sp, #8]
 802980e:	1b35      	subs	r5, r6, r4
 8029810:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8029812:	b2f4      	uxtb	r4, r6
 8029814:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8029816:	fa5f fe86 	uxtb.w	lr, r6
 802981a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 802981c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8029820:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8029822:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8029826:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8029828:	f3c6 4107 	ubfx	r1, r6, #16, #8
 802982c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 802982e:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8029832:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8029836:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8029838:	105b      	asrs	r3, r3, #1
 802983a:	0e32      	lsrs	r2, r6, #24
 802983c:	ebc4 0e0e 	rsb	lr, r4, lr
 8029840:	fb05 3604 	mla	r6, r5, r4, r3
 8029844:	fb05 3400 	mla	r4, r5, r0, r3
 8029848:	940b      	str	r4, [sp, #44]	; 0x2c
 802984a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802984c:	960a      	str	r6, [sp, #40]	; 0x28
 802984e:	1a3f      	subs	r7, r7, r0
 8029850:	fb05 3601 	mla	r6, r5, r1, r3
 8029854:	ebc1 0c0c 	rsb	ip, r1, ip
 8029858:	fb05 3302 	mla	r3, r5, r2, r3
 802985c:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 8029860:	f8cd e018 	str.w	lr, [sp, #24]
 8029864:	9703      	str	r7, [sp, #12]
 8029866:	960c      	str	r6, [sp, #48]	; 0x30
 8029868:	f8cd c010 	str.w	ip, [sp, #16]
 802986c:	930d      	str	r3, [sp, #52]	; 0x34
 802986e:	9205      	str	r2, [sp, #20]
 8029870:	f7fa fe50 	bl	8024514 <GUI_GetColor>
 8029874:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8029876:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8029878:	9009      	str	r0, [sp, #36]	; 0x24
 802987a:	42a6      	cmp	r6, r4
 802987c:	d070      	beq.n	8029960 <GUI_DrawGradientV+0x1a0>
 802987e:	2d00      	cmp	r5, #0
 8029880:	d057      	beq.n	8029932 <GUI_DrawGradientV+0x172>
 8029882:	9e02      	ldr	r6, [sp, #8]
 8029884:	9c01      	ldr	r4, [sp, #4]
 8029886:	42a6      	cmp	r6, r4
 8029888:	dc62      	bgt.n	8029950 <GUI_DrawGradientV+0x190>
 802988a:	4634      	mov	r4, r6
 802988c:	f04f 0b01 	mov.w	fp, #1
 8029890:	ae0a      	add	r6, sp, #40	; 0x28
 8029892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029894:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 8029898:	46da      	mov	sl, fp
 802989a:	e006      	b.n	80298aa <GUI_DrawGradientV+0xea>
 802989c:	f10a 0a01 	add.w	sl, sl, #1
 80298a0:	9801      	ldr	r0, [sp, #4]
 80298a2:	3401      	adds	r4, #1
 80298a4:	42a0      	cmp	r0, r4
 80298a6:	db2f      	blt.n	8029908 <GUI_DrawGradientV+0x148>
 80298a8:	465a      	mov	r2, fp
 80298aa:	9b04      	ldr	r3, [sp, #16]
 80298ac:	fb98 f1f5 	sdiv	r1, r8, r5
 80298b0:	4498      	add	r8, r3
 80298b2:	9b05      	ldr	r3, [sp, #20]
 80298b4:	fb99 fcf5 	sdiv	ip, r9, r5
 80298b8:	4499      	add	r9, r3
 80298ba:	9b06      	ldr	r3, [sp, #24]
 80298bc:	fb96 f0f5 	sdiv	r0, r6, r5
 80298c0:	441e      	add	r6, r3
 80298c2:	9b03      	ldr	r3, [sp, #12]
 80298c4:	fb97 fef5 	sdiv	lr, r7, r5
 80298c8:	441f      	add	r7, r3
 80298ca:	9b02      	ldr	r3, [sp, #8]
 80298cc:	0409      	lsls	r1, r1, #16
 80298ce:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 80298d2:	42a3      	cmp	r3, r4
 80298d4:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 80298d8:	ea41 0b0c 	orr.w	fp, r1, ip
 80298dc:	4610      	mov	r0, r2
 80298de:	dadf      	bge.n	80298a0 <GUI_DrawGradientV+0xe0>
 80298e0:	4593      	cmp	fp, r2
 80298e2:	d0db      	beq.n	802989c <GUI_DrawGradientV+0xdc>
 80298e4:	f7f8 fbfa 	bl	80220dc <LCD_SetColor>
 80298e8:	f1ba 0f01 	cmp.w	sl, #1
 80298ec:	d02a      	beq.n	8029944 <GUI_DrawGradientV+0x184>
 80298ee:	ebca 0104 	rsb	r1, sl, r4
 80298f2:	9807      	ldr	r0, [sp, #28]
 80298f4:	9a08      	ldr	r2, [sp, #32]
 80298f6:	1e63      	subs	r3, r4, #1
 80298f8:	f7f8 f840 	bl	802197c <LCD_FillRect>
 80298fc:	9801      	ldr	r0, [sp, #4]
 80298fe:	3401      	adds	r4, #1
 8029900:	42a0      	cmp	r0, r4
 8029902:	f04f 0a01 	mov.w	sl, #1
 8029906:	dacf      	bge.n	80298a8 <GUI_DrawGradientV+0xe8>
 8029908:	4653      	mov	r3, sl
 802990a:	46da      	mov	sl, fp
 802990c:	4650      	mov	r0, sl
 802990e:	469b      	mov	fp, r3
 8029910:	f7f8 fbe4 	bl	80220dc <LCD_SetColor>
 8029914:	f1bb 0f01 	cmp.w	fp, #1
 8029918:	d01c      	beq.n	8029954 <GUI_DrawGradientV+0x194>
 802991a:	9c01      	ldr	r4, [sp, #4]
 802991c:	9807      	ldr	r0, [sp, #28]
 802991e:	9a08      	ldr	r2, [sp, #32]
 8029920:	ebcb 0104 	rsb	r1, fp, r4
 8029924:	3101      	adds	r1, #1
 8029926:	4623      	mov	r3, r4
 8029928:	f7f8 f828 	bl	802197c <LCD_FillRect>
 802992c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802992e:	f7f8 fbd5 	bl	80220dc <LCD_SetColor>
 8029932:	f7f4 fe15 	bl	801e560 <WM__GetNextIVR>
 8029936:	2800      	cmp	r0, #0
 8029938:	d19a      	bne.n	8029870 <GUI_DrawGradientV+0xb0>
 802993a:	f7f9 fc4d 	bl	80231d8 <GUI_Unlock>
 802993e:	b011      	add	sp, #68	; 0x44
 8029940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029944:	9807      	ldr	r0, [sp, #28]
 8029946:	9a08      	ldr	r2, [sp, #32]
 8029948:	1e61      	subs	r1, r4, #1
 802994a:	f7f7 ffc9 	bl	80218e0 <LCD_DrawHLine>
 802994e:	e7a7      	b.n	80298a0 <GUI_DrawGradientV+0xe0>
 8029950:	f7f8 fbc4 	bl	80220dc <LCD_SetColor>
 8029954:	9807      	ldr	r0, [sp, #28]
 8029956:	9901      	ldr	r1, [sp, #4]
 8029958:	9a08      	ldr	r2, [sp, #32]
 802995a:	f7f7 ffc1 	bl	80218e0 <LCD_DrawHLine>
 802995e:	e7e5      	b.n	802992c <GUI_DrawGradientV+0x16c>
 8029960:	4630      	mov	r0, r6
 8029962:	f7f8 fbbb 	bl	80220dc <LCD_SetColor>
 8029966:	9807      	ldr	r0, [sp, #28]
 8029968:	9902      	ldr	r1, [sp, #8]
 802996a:	9a08      	ldr	r2, [sp, #32]
 802996c:	9b01      	ldr	r3, [sp, #4]
 802996e:	f7f8 f805 	bl	802197c <LCD_FillRect>
 8029972:	e7db      	b.n	802992c <GUI_DrawGradientV+0x16c>
 8029974:	20000280 	.word	0x20000280

08029978 <GUI_DrawGradientH>:
 8029978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802997c:	b091      	sub	sp, #68	; 0x44
 802997e:	4606      	mov	r6, r0
 8029980:	4698      	mov	r8, r3
 8029982:	460f      	mov	r7, r1
 8029984:	4692      	mov	sl, r2
 8029986:	f7f9 fc31 	bl	80231ec <GUI_Lock>
 802998a:	4b68      	ldr	r3, [pc, #416]	; (8029b2c <GUI_DrawGradientH+0x1b4>)
 802998c:	681c      	ldr	r4, [r3, #0]
 802998e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8029990:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8029992:	19ae      	adds	r6, r5, r6
 8029994:	44aa      	add	sl, r5
 8029996:	19e7      	adds	r7, r4, r7
 8029998:	44a0      	add	r8, r4
 802999a:	a80e      	add	r0, sp, #56	; 0x38
 802999c:	9602      	str	r6, [sp, #8]
 802999e:	f8cd a004 	str.w	sl, [sp, #4]
 80299a2:	9707      	str	r7, [sp, #28]
 80299a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80299a8:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 80299ac:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80299b0:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 80299b4:	f8ad 803e 	strh.w	r8, [sp, #62]	; 0x3e
 80299b8:	f7f4 fef8 	bl	801e7ac <WM__InitIVRSearch>
 80299bc:	2800      	cmp	r0, #0
 80299be:	f000 8098 	beq.w	8029af2 <GUI_DrawGradientH+0x17a>
 80299c2:	9e01      	ldr	r6, [sp, #4]
 80299c4:	9c02      	ldr	r4, [sp, #8]
 80299c6:	1b35      	subs	r5, r6, r4
 80299c8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80299ca:	b2f4      	uxtb	r4, r6
 80299cc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80299ce:	fa5f fe86 	uxtb.w	lr, r6
 80299d2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80299d4:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80299d8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80299da:	f3c6 2707 	ubfx	r7, r6, #8, #8
 80299de:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80299e0:	f3c6 4107 	ubfx	r1, r6, #16, #8
 80299e4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80299e6:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 80299ea:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80299ee:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80299f0:	105b      	asrs	r3, r3, #1
 80299f2:	0e32      	lsrs	r2, r6, #24
 80299f4:	ebc4 0e0e 	rsb	lr, r4, lr
 80299f8:	fb05 3604 	mla	r6, r5, r4, r3
 80299fc:	fb05 3400 	mla	r4, r5, r0, r3
 8029a00:	940b      	str	r4, [sp, #44]	; 0x2c
 8029a02:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8029a04:	960a      	str	r6, [sp, #40]	; 0x28
 8029a06:	1a3f      	subs	r7, r7, r0
 8029a08:	fb05 3601 	mla	r6, r5, r1, r3
 8029a0c:	ebc1 0c0c 	rsb	ip, r1, ip
 8029a10:	fb05 3302 	mla	r3, r5, r2, r3
 8029a14:	ebc2 6214 	rsb	r2, r2, r4, lsr #24
 8029a18:	f8cd e018 	str.w	lr, [sp, #24]
 8029a1c:	9703      	str	r7, [sp, #12]
 8029a1e:	960c      	str	r6, [sp, #48]	; 0x30
 8029a20:	f8cd c010 	str.w	ip, [sp, #16]
 8029a24:	930d      	str	r3, [sp, #52]	; 0x34
 8029a26:	9205      	str	r2, [sp, #20]
 8029a28:	f7fa fd74 	bl	8024514 <GUI_GetColor>
 8029a2c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8029a2e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8029a30:	9009      	str	r0, [sp, #36]	; 0x24
 8029a32:	42a6      	cmp	r6, r4
 8029a34:	d070      	beq.n	8029b18 <GUI_DrawGradientH+0x1a0>
 8029a36:	2d00      	cmp	r5, #0
 8029a38:	d057      	beq.n	8029aea <GUI_DrawGradientH+0x172>
 8029a3a:	9e02      	ldr	r6, [sp, #8]
 8029a3c:	9c01      	ldr	r4, [sp, #4]
 8029a3e:	42a6      	cmp	r6, r4
 8029a40:	dc62      	bgt.n	8029b08 <GUI_DrawGradientH+0x190>
 8029a42:	4634      	mov	r4, r6
 8029a44:	f04f 0b01 	mov.w	fp, #1
 8029a48:	ae0a      	add	r6, sp, #40	; 0x28
 8029a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029a4c:	e896 03c0 	ldmia.w	r6, {r6, r7, r8, r9}
 8029a50:	46da      	mov	sl, fp
 8029a52:	e006      	b.n	8029a62 <GUI_DrawGradientH+0xea>
 8029a54:	f10a 0a01 	add.w	sl, sl, #1
 8029a58:	9801      	ldr	r0, [sp, #4]
 8029a5a:	3401      	adds	r4, #1
 8029a5c:	42a0      	cmp	r0, r4
 8029a5e:	db2f      	blt.n	8029ac0 <GUI_DrawGradientH+0x148>
 8029a60:	465a      	mov	r2, fp
 8029a62:	9b04      	ldr	r3, [sp, #16]
 8029a64:	fb98 f1f5 	sdiv	r1, r8, r5
 8029a68:	4498      	add	r8, r3
 8029a6a:	9b05      	ldr	r3, [sp, #20]
 8029a6c:	fb99 fcf5 	sdiv	ip, r9, r5
 8029a70:	4499      	add	r9, r3
 8029a72:	9b06      	ldr	r3, [sp, #24]
 8029a74:	fb96 f0f5 	sdiv	r0, r6, r5
 8029a78:	441e      	add	r6, r3
 8029a7a:	9b03      	ldr	r3, [sp, #12]
 8029a7c:	fb97 fef5 	sdiv	lr, r7, r5
 8029a80:	441f      	add	r7, r3
 8029a82:	9b02      	ldr	r3, [sp, #8]
 8029a84:	0409      	lsls	r1, r1, #16
 8029a86:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 8029a8a:	42a3      	cmp	r3, r4
 8029a8c:	ea40 2c0e 	orr.w	ip, r0, lr, lsl #8
 8029a90:	ea41 0b0c 	orr.w	fp, r1, ip
 8029a94:	4610      	mov	r0, r2
 8029a96:	dadf      	bge.n	8029a58 <GUI_DrawGradientH+0xe0>
 8029a98:	4593      	cmp	fp, r2
 8029a9a:	d0db      	beq.n	8029a54 <GUI_DrawGradientH+0xdc>
 8029a9c:	f7f8 fb1e 	bl	80220dc <LCD_SetColor>
 8029aa0:	f1ba 0f01 	cmp.w	sl, #1
 8029aa4:	d02a      	beq.n	8029afc <GUI_DrawGradientH+0x184>
 8029aa6:	ebca 0004 	rsb	r0, sl, r4
 8029aaa:	1e62      	subs	r2, r4, #1
 8029aac:	9907      	ldr	r1, [sp, #28]
 8029aae:	9b08      	ldr	r3, [sp, #32]
 8029ab0:	f7f7 ff64 	bl	802197c <LCD_FillRect>
 8029ab4:	9801      	ldr	r0, [sp, #4]
 8029ab6:	3401      	adds	r4, #1
 8029ab8:	42a0      	cmp	r0, r4
 8029aba:	f04f 0a01 	mov.w	sl, #1
 8029abe:	dacf      	bge.n	8029a60 <GUI_DrawGradientH+0xe8>
 8029ac0:	4653      	mov	r3, sl
 8029ac2:	46da      	mov	sl, fp
 8029ac4:	4650      	mov	r0, sl
 8029ac6:	469b      	mov	fp, r3
 8029ac8:	f7f8 fb08 	bl	80220dc <LCD_SetColor>
 8029acc:	f1bb 0f01 	cmp.w	fp, #1
 8029ad0:	d01c      	beq.n	8029b0c <GUI_DrawGradientH+0x194>
 8029ad2:	9c01      	ldr	r4, [sp, #4]
 8029ad4:	9907      	ldr	r1, [sp, #28]
 8029ad6:	9b08      	ldr	r3, [sp, #32]
 8029ad8:	ebcb 0004 	rsb	r0, fp, r4
 8029adc:	3001      	adds	r0, #1
 8029ade:	4622      	mov	r2, r4
 8029ae0:	f7f7 ff4c 	bl	802197c <LCD_FillRect>
 8029ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029ae6:	f7f8 faf9 	bl	80220dc <LCD_SetColor>
 8029aea:	f7f4 fd39 	bl	801e560 <WM__GetNextIVR>
 8029aee:	2800      	cmp	r0, #0
 8029af0:	d19a      	bne.n	8029a28 <GUI_DrawGradientH+0xb0>
 8029af2:	f7f9 fb71 	bl	80231d8 <GUI_Unlock>
 8029af6:	b011      	add	sp, #68	; 0x44
 8029af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029afc:	1e60      	subs	r0, r4, #1
 8029afe:	9907      	ldr	r1, [sp, #28]
 8029b00:	9a08      	ldr	r2, [sp, #32]
 8029b02:	f7f7 ff13 	bl	802192c <LCD_DrawVLine>
 8029b06:	e7a7      	b.n	8029a58 <GUI_DrawGradientH+0xe0>
 8029b08:	f7f8 fae8 	bl	80220dc <LCD_SetColor>
 8029b0c:	9801      	ldr	r0, [sp, #4]
 8029b0e:	9907      	ldr	r1, [sp, #28]
 8029b10:	9a08      	ldr	r2, [sp, #32]
 8029b12:	f7f7 ff0b 	bl	802192c <LCD_DrawVLine>
 8029b16:	e7e5      	b.n	8029ae4 <GUI_DrawGradientH+0x16c>
 8029b18:	4630      	mov	r0, r6
 8029b1a:	f7f8 fadf 	bl	80220dc <LCD_SetColor>
 8029b1e:	9802      	ldr	r0, [sp, #8]
 8029b20:	9907      	ldr	r1, [sp, #28]
 8029b22:	9a01      	ldr	r2, [sp, #4]
 8029b24:	9b08      	ldr	r3, [sp, #32]
 8029b26:	f7f7 ff29 	bl	802197c <LCD_FillRect>
 8029b2a:	e7db      	b.n	8029ae4 <GUI_DrawGradientH+0x16c>
 8029b2c:	20000280 	.word	0x20000280

08029b30 <GUIMONO_DispChar>:
 8029b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b34:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8029c84 <GUIMONO_DispChar+0x154>
 8029b38:	f8db 2000 	ldr.w	r2, [fp]
 8029b3c:	69d1      	ldr	r1, [r2, #28]
 8029b3e:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 8029b42:	69cc      	ldr	r4, [r1, #28]
 8029b44:	8c97      	ldrh	r7, [r2, #36]	; 0x24
 8029b46:	89a3      	ldrh	r3, [r4, #12]
 8029b48:	4283      	cmp	r3, r0
 8029b4a:	b08d      	sub	sp, #52	; 0x34
 8029b4c:	f200 8083 	bhi.w	8029c56 <GUIMONO_DispChar+0x126>
 8029b50:	89e5      	ldrh	r5, [r4, #14]
 8029b52:	4285      	cmp	r5, r0
 8029b54:	d37f      	bcc.n	8029c56 <GUIMONO_DispChar+0x126>
 8029b56:	1ac3      	subs	r3, r0, r3
 8029b58:	6826      	ldr	r6, [r4, #0]
 8029b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8029b5e:	900a      	str	r0, [sp, #40]	; 0x28
 8029b60:	1c58      	adds	r0, r3, #1
 8029b62:	d071      	beq.n	8029c48 <GUIMONO_DispChar+0x118>
 8029b64:	f8b2 a02a 	ldrh.w	sl, [r2, #42]	; 0x2a
 8029b68:	7e0d      	ldrb	r5, [r1, #24]
 8029b6a:	7ca2      	ldrb	r2, [r4, #18]
 8029b6c:	f894 8010 	ldrb.w	r8, [r4, #16]
 8029b70:	9307      	str	r3, [sp, #28]
 8029b72:	fa0f f18a 	sxth.w	r1, sl
 8029b76:	fb15 f202 	smulbb	r2, r5, r2
 8029b7a:	4608      	mov	r0, r1
 8029b7c:	9109      	str	r1, [sp, #36]	; 0x24
 8029b7e:	9208      	str	r2, [sp, #32]
 8029b80:	f7f7 fe74 	bl	802186c <LCD_SetDrawMode>
 8029b84:	f8db 2000 	ldr.w	r2, [fp]
 8029b88:	900b      	str	r0, [sp, #44]	; 0x2c
 8029b8a:	69d1      	ldr	r1, [r2, #28]
 8029b8c:	9b07      	ldr	r3, [sp, #28]
 8029b8e:	7e88      	ldrb	r0, [r1, #26]
 8029b90:	9000      	str	r0, [sp, #0]
 8029b92:	7ec9      	ldrb	r1, [r1, #27]
 8029b94:	9101      	str	r1, [sp, #4]
 8029b96:	2001      	movs	r0, #1
 8029b98:	9908      	ldr	r1, [sp, #32]
 8029b9a:	9002      	str	r0, [sp, #8]
 8029b9c:	fb01 6303 	mla	r3, r1, r3, r6
 8029ba0:	7ca1      	ldrb	r1, [r4, #18]
 8029ba2:	9103      	str	r1, [sp, #12]
 8029ba4:	9304      	str	r3, [sp, #16]
 8029ba6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8029ba8:	9305      	str	r3, [sp, #20]
 8029baa:	fa0f f989 	sxth.w	r9, r9
 8029bae:	b23f      	sxth	r7, r7
 8029bb0:	4642      	mov	r2, r8
 8029bb2:	4648      	mov	r0, r9
 8029bb4:	4639      	mov	r1, r7
 8029bb6:	462b      	mov	r3, r5
 8029bb8:	f7f8 f82e 	bl	8021c18 <LCD_DrawBitmap>
 8029bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029bbe:	3201      	adds	r2, #1
 8029bc0:	d01c      	beq.n	8029bfc <GUIMONO_DispChar+0xcc>
 8029bc2:	f04a 0002 	orr.w	r0, sl, #2
 8029bc6:	b200      	sxth	r0, r0
 8029bc8:	f7f7 fe50 	bl	802186c <LCD_SetDrawMode>
 8029bcc:	482d      	ldr	r0, [pc, #180]	; (8029c84 <GUIMONO_DispChar+0x154>)
 8029bce:	6803      	ldr	r3, [r0, #0]
 8029bd0:	9808      	ldr	r0, [sp, #32]
 8029bd2:	69da      	ldr	r2, [r3, #28]
 8029bd4:	7e91      	ldrb	r1, [r2, #26]
 8029bd6:	9100      	str	r1, [sp, #0]
 8029bd8:	7ed2      	ldrb	r2, [r2, #27]
 8029bda:	9201      	str	r2, [sp, #4]
 8029bdc:	2101      	movs	r1, #1
 8029bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029be0:	9102      	str	r1, [sp, #8]
 8029be2:	fb00 6602 	mla	r6, r0, r2, r6
 8029be6:	7ca2      	ldrb	r2, [r4, #18]
 8029be8:	9203      	str	r2, [sp, #12]
 8029bea:	9604      	str	r6, [sp, #16]
 8029bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bee:	9305      	str	r3, [sp, #20]
 8029bf0:	4648      	mov	r0, r9
 8029bf2:	462b      	mov	r3, r5
 8029bf4:	4639      	mov	r1, r7
 8029bf6:	4642      	mov	r2, r8
 8029bf8:	f7f8 f80e 	bl	8021c18 <LCD_DrawBitmap>
 8029bfc:	f8db 3000 	ldr.w	r3, [fp]
 8029c00:	4d20      	ldr	r5, [pc, #128]	; (8029c84 <GUIMONO_DispChar+0x154>)
 8029c02:	69db      	ldr	r3, [r3, #28]
 8029c04:	7e5a      	ldrb	r2, [r3, #25]
 8029c06:	7e1b      	ldrb	r3, [r3, #24]
 8029c08:	429a      	cmp	r2, r3
 8029c0a:	d915      	bls.n	8029c38 <GUIMONO_DispChar+0x108>
 8029c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029c0e:	2902      	cmp	r1, #2
 8029c10:	d012      	beq.n	8029c38 <GUIMONO_DispChar+0x108>
 8029c12:	f08a 0004 	eor.w	r0, sl, #4
 8029c16:	b200      	sxth	r0, r0
 8029c18:	f7f7 fe28 	bl	802186c <LCD_SetDrawMode>
 8029c1c:	682b      	ldr	r3, [r5, #0]
 8029c1e:	69db      	ldr	r3, [r3, #28]
 8029c20:	7e9a      	ldrb	r2, [r3, #26]
 8029c22:	7e1d      	ldrb	r5, [r3, #24]
 8029c24:	7ed9      	ldrb	r1, [r3, #27]
 8029c26:	7e5b      	ldrb	r3, [r3, #25]
 8029c28:	4648      	mov	r0, r9
 8029c2a:	fb02 9208 	mla	r2, r2, r8, r9
 8029c2e:	fb05 7101 	mla	r1, r5, r1, r7
 8029c32:	443b      	add	r3, r7
 8029c34:	f7f7 fea2 	bl	802197c <LCD_FillRect>
 8029c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029c3a:	b2d0      	uxtb	r0, r2
 8029c3c:	f7f7 fe16 	bl	802186c <LCD_SetDrawMode>
 8029c40:	f8db 2000 	ldr.w	r2, [fp]
 8029c44:	f8b2 9022 	ldrh.w	r9, [r2, #34]	; 0x22
 8029c48:	7c63      	ldrb	r3, [r4, #17]
 8029c4a:	4499      	add	r9, r3
 8029c4c:	f8a2 9022 	strh.w	r9, [r2, #34]	; 0x22
 8029c50:	b00d      	add	sp, #52	; 0x34
 8029c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c56:	68a5      	ldr	r5, [r4, #8]
 8029c58:	6866      	ldr	r6, [r4, #4]
 8029c5a:	2d00      	cmp	r5, #0
 8029c5c:	d0f4      	beq.n	8029c48 <GUIMONO_DispChar+0x118>
 8029c5e:	882b      	ldrh	r3, [r5, #0]
 8029c60:	4298      	cmp	r0, r3
 8029c62:	d3f1      	bcc.n	8029c48 <GUIMONO_DispChar+0x118>
 8029c64:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8029c68:	4580      	cmp	r8, r0
 8029c6a:	d3ed      	bcc.n	8029c48 <GUIMONO_DispChar+0x118>
 8029c6c:	1ac3      	subs	r3, r0, r3
 8029c6e:	686d      	ldr	r5, [r5, #4]
 8029c70:	b29b      	uxth	r3, r3
 8029c72:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8029c76:	f935 3023 	ldrsh.w	r3, [r5, r3, lsl #2]
 8029c7a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8029c7e:	900a      	str	r0, [sp, #40]	; 0x28
 8029c80:	e76e      	b.n	8029b60 <GUIMONO_DispChar+0x30>
 8029c82:	bf00      	nop
 8029c84:	20000280 	.word	0x20000280

08029c88 <GUIMONO_GetCharDistX>:
 8029c88:	4b04      	ldr	r3, [pc, #16]	; (8029c9c <GUIMONO_GetCharDistX+0x14>)
 8029c8a:	681b      	ldr	r3, [r3, #0]
 8029c8c:	69db      	ldr	r3, [r3, #28]
 8029c8e:	69db      	ldr	r3, [r3, #28]
 8029c90:	b109      	cbz	r1, 8029c96 <GUIMONO_GetCharDistX+0xe>
 8029c92:	7c1a      	ldrb	r2, [r3, #16]
 8029c94:	600a      	str	r2, [r1, #0]
 8029c96:	7c58      	ldrb	r0, [r3, #17]
 8029c98:	4770      	bx	lr
 8029c9a:	bf00      	nop
 8029c9c:	20000280 	.word	0x20000280

08029ca0 <GUIMONO_GetFontInfo>:
 8029ca0:	2302      	movs	r3, #2
 8029ca2:	800b      	strh	r3, [r1, #0]
 8029ca4:	4770      	bx	lr
 8029ca6:	bf00      	nop

08029ca8 <GUIMONO_IsInFont>:
 8029ca8:	69c3      	ldr	r3, [r0, #28]
 8029caa:	899a      	ldrh	r2, [r3, #12]
 8029cac:	428a      	cmp	r2, r1
 8029cae:	d802      	bhi.n	8029cb6 <GUIMONO_IsInFont+0xe>
 8029cb0:	89da      	ldrh	r2, [r3, #14]
 8029cb2:	428a      	cmp	r2, r1
 8029cb4:	d211      	bcs.n	8029cda <GUIMONO_IsInFont+0x32>
 8029cb6:	6898      	ldr	r0, [r3, #8]
 8029cb8:	b118      	cbz	r0, 8029cc2 <GUIMONO_IsInFont+0x1a>
 8029cba:	8803      	ldrh	r3, [r0, #0]
 8029cbc:	4299      	cmp	r1, r3
 8029cbe:	d201      	bcs.n	8029cc4 <GUIMONO_IsInFont+0x1c>
 8029cc0:	2000      	movs	r0, #0
 8029cc2:	4770      	bx	lr
 8029cc4:	8842      	ldrh	r2, [r0, #2]
 8029cc6:	428a      	cmp	r2, r1
 8029cc8:	d3fa      	bcc.n	8029cc0 <GUIMONO_IsInFont+0x18>
 8029cca:	1ac9      	subs	r1, r1, r3
 8029ccc:	6842      	ldr	r2, [r0, #4]
 8029cce:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8029cd2:	43c0      	mvns	r0, r0
 8029cd4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8029cd8:	4770      	bx	lr
 8029cda:	2001      	movs	r0, #1
 8029cdc:	4770      	bx	lr
 8029cde:	bf00      	nop

08029ce0 <LCD_Index2Color_888>:
 8029ce0:	b2c2      	uxtb	r2, r0
 8029ce2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8029ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8029cee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029cf2:	4318      	orrs	r0, r3
 8029cf4:	4770      	bx	lr
 8029cf6:	bf00      	nop

08029cf8 <LCD_Index2Color_8888>:
 8029cf8:	43c3      	mvns	r3, r0
 8029cfa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029cfe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8029d02:	4313      	orrs	r3, r2
 8029d04:	b2c2      	uxtb	r2, r0
 8029d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029d0a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029d0e:	4318      	orrs	r0, r3
 8029d10:	4770      	bx	lr
 8029d12:	bf00      	nop

08029d14 <_GetIndexMask_0>:
 8029d14:	b508      	push	{r3, lr}
 8029d16:	f7f7 fc7b 	bl	8021610 <LCD_GetNumColors>
 8029d1a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8029d1e:	d014      	beq.n	8029d4a <_GetIndexMask_0+0x36>
 8029d20:	287f      	cmp	r0, #127	; 0x7f
 8029d22:	d80e      	bhi.n	8029d42 <_GetIndexMask_0+0x2e>
 8029d24:	283f      	cmp	r0, #63	; 0x3f
 8029d26:	d812      	bhi.n	8029d4e <_GetIndexMask_0+0x3a>
 8029d28:	281f      	cmp	r0, #31
 8029d2a:	d80c      	bhi.n	8029d46 <_GetIndexMask_0+0x32>
 8029d2c:	280f      	cmp	r0, #15
 8029d2e:	d810      	bhi.n	8029d52 <_GetIndexMask_0+0x3e>
 8029d30:	2807      	cmp	r0, #7
 8029d32:	d812      	bhi.n	8029d5a <_GetIndexMask_0+0x46>
 8029d34:	2803      	cmp	r0, #3
 8029d36:	d80e      	bhi.n	8029d56 <_GetIndexMask_0+0x42>
 8029d38:	2801      	cmp	r0, #1
 8029d3a:	bf94      	ite	ls
 8029d3c:	2000      	movls	r0, #0
 8029d3e:	2001      	movhi	r0, #1
 8029d40:	bd08      	pop	{r3, pc}
 8029d42:	207f      	movs	r0, #127	; 0x7f
 8029d44:	bd08      	pop	{r3, pc}
 8029d46:	201f      	movs	r0, #31
 8029d48:	bd08      	pop	{r3, pc}
 8029d4a:	20ff      	movs	r0, #255	; 0xff
 8029d4c:	bd08      	pop	{r3, pc}
 8029d4e:	203f      	movs	r0, #63	; 0x3f
 8029d50:	bd08      	pop	{r3, pc}
 8029d52:	200f      	movs	r0, #15
 8029d54:	bd08      	pop	{r3, pc}
 8029d56:	2003      	movs	r0, #3
 8029d58:	bd08      	pop	{r3, pc}
 8029d5a:	2007      	movs	r0, #7
 8029d5c:	bd08      	pop	{r3, pc}
 8029d5e:	bf00      	nop

08029d60 <_Index2Color_0>:
 8029d60:	b538      	push	{r3, r4, r5, lr}
 8029d62:	4604      	mov	r4, r0
 8029d64:	f7f7 fc54 	bl	8021610 <LCD_GetNumColors>
 8029d68:	4605      	mov	r5, r0
 8029d6a:	f7f7 fc71 	bl	8021650 <LCD_GetPalette>
 8029d6e:	42a5      	cmp	r5, r4
 8029d70:	d903      	bls.n	8029d7a <_Index2Color_0+0x1a>
 8029d72:	b118      	cbz	r0, 8029d7c <_Index2Color_0+0x1c>
 8029d74:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8029d78:	bd38      	pop	{r3, r4, r5, pc}
 8029d7a:	2000      	movs	r0, #0
 8029d7c:	bd38      	pop	{r3, r4, r5, pc}
 8029d7e:	bf00      	nop

08029d80 <_Color2Index_0>:
 8029d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d84:	4605      	mov	r5, r0
 8029d86:	f7f7 fc43 	bl	8021610 <LCD_GetNumColors>
 8029d8a:	4606      	mov	r6, r0
 8029d8c:	f7f7 fc60 	bl	8021650 <LCD_GetPalette>
 8029d90:	b308      	cbz	r0, 8029dd6 <_Color2Index_0+0x56>
 8029d92:	1f07      	subs	r7, r0, #4
 8029d94:	463a      	mov	r2, r7
 8029d96:	2300      	movs	r3, #0
 8029d98:	e002      	b.n	8029da0 <_Color2Index_0+0x20>
 8029d9a:	3301      	adds	r3, #1
 8029d9c:	429e      	cmp	r6, r3
 8029d9e:	dd06      	ble.n	8029dae <_Color2Index_0+0x2e>
 8029da0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8029da4:	42a9      	cmp	r1, r5
 8029da6:	d1f8      	bne.n	8029d9a <_Color2Index_0+0x1a>
 8029da8:	4618      	mov	r0, r3
 8029daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029dae:	f04f 0900 	mov.w	r9, #0
 8029db2:	464c      	mov	r4, r9
 8029db4:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8029db8:	4628      	mov	r0, r5
 8029dba:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8029dbe:	f7fa fb6f 	bl	80244a0 <GUI_CalcColorDist>
 8029dc2:	4580      	cmp	r8, r0
 8029dc4:	bf88      	it	hi
 8029dc6:	46a1      	movhi	r9, r4
 8029dc8:	f104 0401 	add.w	r4, r4, #1
 8029dcc:	bf88      	it	hi
 8029dce:	4680      	movhi	r8, r0
 8029dd0:	42a6      	cmp	r6, r4
 8029dd2:	dcf1      	bgt.n	8029db8 <_Color2Index_0+0x38>
 8029dd4:	4648      	mov	r0, r9
 8029dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029dda:	bf00      	nop

08029ddc <_DrawUpRect>:
 8029ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029de0:	4f1b      	ldr	r7, [pc, #108]	; (8029e50 <_DrawUpRect+0x74>)
 8029de2:	8806      	ldrh	r6, [r0, #0]
 8029de4:	8844      	ldrh	r4, [r0, #2]
 8029de6:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8029dea:	88c5      	ldrh	r5, [r0, #6]
 8029dec:	6838      	ldr	r0, [r7, #0]
 8029dee:	b22d      	sxth	r5, r5
 8029df0:	fa0f f888 	sxth.w	r8, r8
 8029df4:	b236      	sxth	r6, r6
 8029df6:	b224      	sxth	r4, r4
 8029df8:	f7f8 f970 	bl	80220dc <LCD_SetColor>
 8029dfc:	462b      	mov	r3, r5
 8029dfe:	4621      	mov	r1, r4
 8029e00:	4642      	mov	r2, r8
 8029e02:	4630      	mov	r0, r6
 8029e04:	f7fb ffb4 	bl	8025d70 <GUI_DrawRect>
 8029e08:	3601      	adds	r6, #1
 8029e0a:	3401      	adds	r4, #1
 8029e0c:	6938      	ldr	r0, [r7, #16]
 8029e0e:	f7f8 f965 	bl	80220dc <LCD_SetColor>
 8029e12:	f1a5 0902 	sub.w	r9, r5, #2
 8029e16:	4620      	mov	r0, r4
 8029e18:	4631      	mov	r1, r6
 8029e1a:	f1a8 0202 	sub.w	r2, r8, #2
 8029e1e:	f7f9 fb51 	bl	80234c4 <GUI_DrawHLine>
 8029e22:	4621      	mov	r1, r4
 8029e24:	464a      	mov	r2, r9
 8029e26:	4630      	mov	r0, r6
 8029e28:	f7f9 fba2 	bl	8023570 <GUI_DrawVLine>
 8029e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8029e30:	6878      	ldr	r0, [r7, #4]
 8029e32:	f7f8 f953 	bl	80220dc <LCD_SetColor>
 8029e36:	4631      	mov	r1, r6
 8029e38:	1e68      	subs	r0, r5, #1
 8029e3a:	4642      	mov	r2, r8
 8029e3c:	f7f9 fb42 	bl	80234c4 <GUI_DrawHLine>
 8029e40:	4640      	mov	r0, r8
 8029e42:	4621      	mov	r1, r4
 8029e44:	464a      	mov	r2, r9
 8029e46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029e4a:	f7f9 bb91 	b.w	8023570 <GUI_DrawVLine>
 8029e4e:	bf00      	nop
 8029e50:	200003fc 	.word	0x200003fc

08029e54 <_DrawDownRect>:
 8029e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e58:	4c27      	ldr	r4, [pc, #156]	; (8029ef8 <_DrawDownRect+0xa4>)
 8029e5a:	8805      	ldrh	r5, [r0, #0]
 8029e5c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8029e60:	8887      	ldrh	r7, [r0, #4]
 8029e62:	88c6      	ldrh	r6, [r0, #6]
 8029e64:	6820      	ldr	r0, [r4, #0]
 8029e66:	b083      	sub	sp, #12
 8029e68:	f7f8 f938 	bl	80220dc <LCD_SetColor>
 8029e6c:	b22d      	sxth	r5, r5
 8029e6e:	b23f      	sxth	r7, r7
 8029e70:	fa0f fb8b 	sxth.w	fp, fp
 8029e74:	68a0      	ldr	r0, [r4, #8]
 8029e76:	f7f8 f931 	bl	80220dc <LCD_SetColor>
 8029e7a:	b236      	sxth	r6, r6
 8029e7c:	f10b 0901 	add.w	r9, fp, #1
 8029e80:	4658      	mov	r0, fp
 8029e82:	4629      	mov	r1, r5
 8029e84:	463a      	mov	r2, r7
 8029e86:	f7f9 fb1d 	bl	80234c4 <GUI_DrawHLine>
 8029e8a:	4649      	mov	r1, r9
 8029e8c:	4632      	mov	r2, r6
 8029e8e:	4628      	mov	r0, r5
 8029e90:	f7f9 fb6e 	bl	8023570 <GUI_DrawVLine>
 8029e94:	f105 0a01 	add.w	sl, r5, #1
 8029e98:	1e7b      	subs	r3, r7, #1
 8029e9a:	6820      	ldr	r0, [r4, #0]
 8029e9c:	9301      	str	r3, [sp, #4]
 8029e9e:	f106 38ff 	add.w	r8, r6, #4294967295
 8029ea2:	f7f8 f91b 	bl	80220dc <LCD_SetColor>
 8029ea6:	f10b 0b02 	add.w	fp, fp, #2
 8029eaa:	4648      	mov	r0, r9
 8029eac:	4651      	mov	r1, sl
 8029eae:	9a01      	ldr	r2, [sp, #4]
 8029eb0:	f7f9 fb08 	bl	80234c4 <GUI_DrawHLine>
 8029eb4:	4659      	mov	r1, fp
 8029eb6:	4642      	mov	r2, r8
 8029eb8:	4650      	mov	r0, sl
 8029eba:	f7f9 fb59 	bl	8023570 <GUI_DrawVLine>
 8029ebe:	6920      	ldr	r0, [r4, #16]
 8029ec0:	f7f8 f90c 	bl	80220dc <LCD_SetColor>
 8029ec4:	4630      	mov	r0, r6
 8029ec6:	4651      	mov	r1, sl
 8029ec8:	463a      	mov	r2, r7
 8029eca:	f7f9 fafb 	bl	80234c4 <GUI_DrawHLine>
 8029ece:	4649      	mov	r1, r9
 8029ed0:	4632      	mov	r2, r6
 8029ed2:	4638      	mov	r0, r7
 8029ed4:	f7f9 fb4c 	bl	8023570 <GUI_DrawVLine>
 8029ed8:	68e0      	ldr	r0, [r4, #12]
 8029eda:	f7f8 f8ff 	bl	80220dc <LCD_SetColor>
 8029ede:	4640      	mov	r0, r8
 8029ee0:	1ca9      	adds	r1, r5, #2
 8029ee2:	9a01      	ldr	r2, [sp, #4]
 8029ee4:	f7f9 faee 	bl	80234c4 <GUI_DrawHLine>
 8029ee8:	9801      	ldr	r0, [sp, #4]
 8029eea:	4659      	mov	r1, fp
 8029eec:	4642      	mov	r2, r8
 8029eee:	b003      	add	sp, #12
 8029ef0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ef4:	f7f9 bb3c 	b.w	8023570 <GUI_DrawVLine>
 8029ef8:	200003fc 	.word	0x200003fc

08029efc <_DrawDown>:
 8029efc:	b500      	push	{lr}
 8029efe:	b083      	sub	sp, #12
 8029f00:	4668      	mov	r0, sp
 8029f02:	f7f1 fe8f 	bl	801bc24 <WM_GetClientRect>
 8029f06:	4668      	mov	r0, sp
 8029f08:	f7ff ffa4 	bl	8029e54 <_DrawDownRect>
 8029f0c:	b003      	add	sp, #12
 8029f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8029f12:	bf00      	nop

08029f14 <WIDGET_EFFECT_3D_DrawUp>:
 8029f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029f18:	b083      	sub	sp, #12
 8029f1a:	4668      	mov	r0, sp
 8029f1c:	f7f1 fe82 	bl	801bc24 <WM_GetClientRect>
 8029f20:	4f1d      	ldr	r7, [pc, #116]	; (8029f98 <WIDGET_EFFECT_3D_DrawUp+0x84>)
 8029f22:	f8bd 6000 	ldrh.w	r6, [sp]
 8029f26:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8029f2a:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8029f2e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8029f32:	6838      	ldr	r0, [r7, #0]
 8029f34:	b22d      	sxth	r5, r5
 8029f36:	fa0f f888 	sxth.w	r8, r8
 8029f3a:	b236      	sxth	r6, r6
 8029f3c:	b224      	sxth	r4, r4
 8029f3e:	f7f8 f8cd 	bl	80220dc <LCD_SetColor>
 8029f42:	462b      	mov	r3, r5
 8029f44:	4621      	mov	r1, r4
 8029f46:	4642      	mov	r2, r8
 8029f48:	4630      	mov	r0, r6
 8029f4a:	f7fb ff11 	bl	8025d70 <GUI_DrawRect>
 8029f4e:	3601      	adds	r6, #1
 8029f50:	3401      	adds	r4, #1
 8029f52:	6938      	ldr	r0, [r7, #16]
 8029f54:	f7f8 f8c2 	bl	80220dc <LCD_SetColor>
 8029f58:	f1a5 0902 	sub.w	r9, r5, #2
 8029f5c:	4620      	mov	r0, r4
 8029f5e:	4631      	mov	r1, r6
 8029f60:	f1a8 0202 	sub.w	r2, r8, #2
 8029f64:	f7f9 faae 	bl	80234c4 <GUI_DrawHLine>
 8029f68:	4621      	mov	r1, r4
 8029f6a:	464a      	mov	r2, r9
 8029f6c:	4630      	mov	r0, r6
 8029f6e:	f7f9 faff 	bl	8023570 <GUI_DrawVLine>
 8029f72:	f108 38ff 	add.w	r8, r8, #4294967295
 8029f76:	6878      	ldr	r0, [r7, #4]
 8029f78:	f7f8 f8b0 	bl	80220dc <LCD_SetColor>
 8029f7c:	4631      	mov	r1, r6
 8029f7e:	1e68      	subs	r0, r5, #1
 8029f80:	4642      	mov	r2, r8
 8029f82:	f7f9 fa9f 	bl	80234c4 <GUI_DrawHLine>
 8029f86:	4640      	mov	r0, r8
 8029f88:	4621      	mov	r1, r4
 8029f8a:	464a      	mov	r2, r9
 8029f8c:	f7f9 faf0 	bl	8023570 <GUI_DrawVLine>
 8029f90:	b003      	add	sp, #12
 8029f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029f96:	bf00      	nop
 8029f98:	200003fc 	.word	0x200003fc

08029f9c <_DrawGraspH>:
 8029f9c:	4603      	mov	r3, r0
 8029f9e:	b570      	push	{r4, r5, r6, lr}
 8029fa0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8029fa4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8029fa8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8029fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8029fb0:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8029fb2:	1b95      	subs	r5, r2, r6
 8029fb4:	3503      	adds	r5, #3
 8029fb6:	441c      	add	r4, r3
 8029fb8:	10ad      	asrs	r5, r5, #2
 8029fba:	442e      	add	r6, r5
 8029fbc:	1064      	asrs	r4, r4, #1
 8029fbe:	1b55      	subs	r5, r2, r5
 8029fc0:	f7fa fbb0 	bl	8024724 <GUI_SetColor>
 8029fc4:	4620      	mov	r0, r4
 8029fc6:	4631      	mov	r1, r6
 8029fc8:	462a      	mov	r2, r5
 8029fca:	f7f9 fad1 	bl	8023570 <GUI_DrawVLine>
 8029fce:	4631      	mov	r1, r6
 8029fd0:	462a      	mov	r2, r5
 8029fd2:	1ca0      	adds	r0, r4, #2
 8029fd4:	f7f9 facc 	bl	8023570 <GUI_DrawVLine>
 8029fd8:	4631      	mov	r1, r6
 8029fda:	462a      	mov	r2, r5
 8029fdc:	1d20      	adds	r0, r4, #4
 8029fde:	f7f9 fac7 	bl	8023570 <GUI_DrawVLine>
 8029fe2:	4631      	mov	r1, r6
 8029fe4:	462a      	mov	r2, r5
 8029fe6:	1ea0      	subs	r0, r4, #2
 8029fe8:	f7f9 fac2 	bl	8023570 <GUI_DrawVLine>
 8029fec:	4631      	mov	r1, r6
 8029fee:	462a      	mov	r2, r5
 8029ff0:	1f20      	subs	r0, r4, #4
 8029ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029ff6:	f7f9 babb 	b.w	8023570 <GUI_DrawVLine>
 8029ffa:	bf00      	nop

08029ffc <_DrawGraspV>:
 8029ffc:	4603      	mov	r3, r0
 8029ffe:	b570      	push	{r4, r5, r6, lr}
 802a000:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 802a004:	f9b3 6000 	ldrsh.w	r6, [r3]
 802a008:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 802a00c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802a010:	6a88      	ldr	r0, [r1, #40]	; 0x28
 802a012:	1b95      	subs	r5, r2, r6
 802a014:	3503      	adds	r5, #3
 802a016:	441c      	add	r4, r3
 802a018:	10ad      	asrs	r5, r5, #2
 802a01a:	442e      	add	r6, r5
 802a01c:	1064      	asrs	r4, r4, #1
 802a01e:	1b55      	subs	r5, r2, r5
 802a020:	f7fa fb80 	bl	8024724 <GUI_SetColor>
 802a024:	4620      	mov	r0, r4
 802a026:	4631      	mov	r1, r6
 802a028:	462a      	mov	r2, r5
 802a02a:	f7f9 fa4b 	bl	80234c4 <GUI_DrawHLine>
 802a02e:	4631      	mov	r1, r6
 802a030:	462a      	mov	r2, r5
 802a032:	1ca0      	adds	r0, r4, #2
 802a034:	f7f9 fa46 	bl	80234c4 <GUI_DrawHLine>
 802a038:	4631      	mov	r1, r6
 802a03a:	462a      	mov	r2, r5
 802a03c:	1d20      	adds	r0, r4, #4
 802a03e:	f7f9 fa41 	bl	80234c4 <GUI_DrawHLine>
 802a042:	4631      	mov	r1, r6
 802a044:	462a      	mov	r2, r5
 802a046:	1ea0      	subs	r0, r4, #2
 802a048:	f7f9 fa3c 	bl	80234c4 <GUI_DrawHLine>
 802a04c:	4631      	mov	r1, r6
 802a04e:	462a      	mov	r2, r5
 802a050:	1f20      	subs	r0, r4, #4
 802a052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a056:	f7f9 ba35 	b.w	80234c4 <GUI_DrawHLine>
 802a05a:	bf00      	nop

0802a05c <_DrawFrame>:
 802a05c:	b538      	push	{r3, r4, r5, lr}
 802a05e:	4604      	mov	r4, r0
 802a060:	6808      	ldr	r0, [r1, #0]
 802a062:	460d      	mov	r5, r1
 802a064:	f7fa fb5e 	bl	8024724 <GUI_SetColor>
 802a068:	f9b4 1000 	ldrsh.w	r1, [r4]
 802a06c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a070:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802a074:	3101      	adds	r1, #1
 802a076:	3a01      	subs	r2, #1
 802a078:	f7f9 fa24 	bl	80234c4 <GUI_DrawHLine>
 802a07c:	f9b4 1000 	ldrsh.w	r1, [r4]
 802a080:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a084:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802a088:	3101      	adds	r1, #1
 802a08a:	3a01      	subs	r2, #1
 802a08c:	f7f9 fa1a 	bl	80234c4 <GUI_DrawHLine>
 802a090:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a094:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802a098:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a09c:	3101      	adds	r1, #1
 802a09e:	3a01      	subs	r2, #1
 802a0a0:	f7f9 fa66 	bl	8023570 <GUI_DrawVLine>
 802a0a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a0a8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802a0ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a0b0:	3101      	adds	r1, #1
 802a0b2:	3a01      	subs	r2, #1
 802a0b4:	f7f9 fa5c 	bl	8023570 <GUI_DrawVLine>
 802a0b8:	6868      	ldr	r0, [r5, #4]
 802a0ba:	f7fa fb33 	bl	8024724 <GUI_SetColor>
 802a0be:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802a0c2:	f9b4 1000 	ldrsh.w	r1, [r4]
 802a0c6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a0ca:	3001      	adds	r0, #1
 802a0cc:	3101      	adds	r1, #1
 802a0ce:	3a01      	subs	r2, #1
 802a0d0:	f7f9 f9f8 	bl	80234c4 <GUI_DrawHLine>
 802a0d4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802a0d8:	f9b4 1000 	ldrsh.w	r1, [r4]
 802a0dc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a0e0:	3801      	subs	r0, #1
 802a0e2:	3101      	adds	r1, #1
 802a0e4:	3a01      	subs	r2, #1
 802a0e6:	f7f9 f9ed 	bl	80234c4 <GUI_DrawHLine>
 802a0ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a0ee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a0f2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802a0f6:	3001      	adds	r0, #1
 802a0f8:	3102      	adds	r1, #2
 802a0fa:	3a02      	subs	r2, #2
 802a0fc:	f7f9 fa38 	bl	8023570 <GUI_DrawVLine>
 802a100:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a104:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a108:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802a10c:	3102      	adds	r1, #2
 802a10e:	3a02      	subs	r2, #2
 802a110:	3801      	subs	r0, #1
 802a112:	f7f9 fa2d 	bl	8023570 <GUI_DrawVLine>
 802a116:	68a8      	ldr	r0, [r5, #8]
 802a118:	f7fa fb04 	bl	8024724 <GUI_SetColor>
 802a11c:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a120:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a124:	f7f9 f9fa 	bl	802351c <GUI_DrawPixel>
 802a128:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a12c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802a130:	f7f9 f9f4 	bl	802351c <GUI_DrawPixel>
 802a134:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a138:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a13c:	f7f9 f9ee 	bl	802351c <GUI_DrawPixel>
 802a140:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a144:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802a148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a14c:	f7f9 b9e6 	b.w	802351c <GUI_DrawPixel>

0802a150 <_DrawBackgroundH>:
 802a150:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a152:	4604      	mov	r4, r0
 802a154:	b083      	sub	sp, #12
 802a156:	460d      	mov	r5, r1
 802a158:	f7ff ff80 	bl	802a05c <_DrawFrame>
 802a15c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a160:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a164:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a168:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a16c:	68ee      	ldr	r6, [r5, #12]
 802a16e:	692f      	ldr	r7, [r5, #16]
 802a170:	9701      	str	r7, [sp, #4]
 802a172:	440b      	add	r3, r1
 802a174:	9600      	str	r6, [sp, #0]
 802a176:	105b      	asrs	r3, r3, #1
 802a178:	3102      	adds	r1, #2
 802a17a:	3002      	adds	r0, #2
 802a17c:	3a02      	subs	r2, #2
 802a17e:	f7ff fb1f 	bl	80297c0 <GUI_DrawGradientV>
 802a182:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a186:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a18a:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a18e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a192:	696e      	ldr	r6, [r5, #20]
 802a194:	69ac      	ldr	r4, [r5, #24]
 802a196:	9401      	str	r4, [sp, #4]
 802a198:	4419      	add	r1, r3
 802a19a:	1049      	asrs	r1, r1, #1
 802a19c:	9600      	str	r6, [sp, #0]
 802a19e:	3101      	adds	r1, #1
 802a1a0:	3b02      	subs	r3, #2
 802a1a2:	3002      	adds	r0, #2
 802a1a4:	3a02      	subs	r2, #2
 802a1a6:	f7ff fb0b 	bl	80297c0 <GUI_DrawGradientV>
 802a1aa:	b003      	add	sp, #12
 802a1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a1ae:	bf00      	nop

0802a1b0 <_DrawBackgroundV>:
 802a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a1b2:	4604      	mov	r4, r0
 802a1b4:	b083      	sub	sp, #12
 802a1b6:	460d      	mov	r5, r1
 802a1b8:	f7ff ff50 	bl	802a05c <_DrawFrame>
 802a1bc:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a1c0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a1c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a1c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a1cc:	68ee      	ldr	r6, [r5, #12]
 802a1ce:	692f      	ldr	r7, [r5, #16]
 802a1d0:	9701      	str	r7, [sp, #4]
 802a1d2:	4402      	add	r2, r0
 802a1d4:	9600      	str	r6, [sp, #0]
 802a1d6:	1052      	asrs	r2, r2, #1
 802a1d8:	3002      	adds	r0, #2
 802a1da:	3102      	adds	r1, #2
 802a1dc:	3b02      	subs	r3, #2
 802a1de:	f7ff fbcb 	bl	8029978 <GUI_DrawGradientH>
 802a1e2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802a1e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a1ea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802a1ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a1f2:	696e      	ldr	r6, [r5, #20]
 802a1f4:	69ac      	ldr	r4, [r5, #24]
 802a1f6:	9401      	str	r4, [sp, #4]
 802a1f8:	4410      	add	r0, r2
 802a1fa:	1040      	asrs	r0, r0, #1
 802a1fc:	9600      	str	r6, [sp, #0]
 802a1fe:	3001      	adds	r0, #1
 802a200:	3a02      	subs	r2, #2
 802a202:	3102      	adds	r1, #2
 802a204:	3b02      	subs	r3, #2
 802a206:	f7ff fbb7 	bl	8029978 <GUI_DrawGradientH>
 802a20a:	b003      	add	sp, #12
 802a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a20e:	bf00      	nop

0802a210 <SCROLLBAR_DrawSkinFlex>:
 802a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a214:	4604      	mov	r4, r0
 802a216:	b087      	sub	sp, #28
 802a218:	6800      	ldr	r0, [r0, #0]
 802a21a:	f7fb fb67 	bl	80258ec <GUI_ALLOC_LockH>
 802a21e:	4606      	mov	r6, r0
 802a220:	a806      	add	r0, sp, #24
 802a222:	f840 6d0c 	str.w	r6, [r0, #-12]!
 802a226:	f7fb fb73 	bl	8025910 <GUI_ALLOC_UnlockH>
 802a22a:	6a25      	ldr	r5, [r4, #32]
 802a22c:	f8b4 a010 	ldrh.w	sl, [r4, #16]
 802a230:	682b      	ldr	r3, [r5, #0]
 802a232:	8aa7      	ldrh	r7, [r4, #20]
 802a234:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 802a238:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 802a23c:	f8ad a010 	strh.w	sl, [sp, #16]
 802a240:	f8ad 7012 	strh.w	r7, [sp, #18]
 802a244:	f8ad 9014 	strh.w	r9, [sp, #20]
 802a248:	f8ad 8016 	strh.w	r8, [sp, #22]
 802a24c:	bb6b      	cbnz	r3, 802a2aa <SCROLLBAR_DrawSkinFlex+0x9a>
 802a24e:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 802a43c <SCROLLBAR_DrawSkinFlex+0x22c>
 802a252:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 802a440 <SCROLLBAR_DrawSkinFlex+0x230>
 802a256:	4a74      	ldr	r2, [pc, #464]	; (802a428 <SCROLLBAR_DrawSkinFlex+0x218>)
 802a258:	6863      	ldr	r3, [r4, #4]
 802a25a:	3b08      	subs	r3, #8
 802a25c:	2b11      	cmp	r3, #17
 802a25e:	d820      	bhi.n	802a2a2 <SCROLLBAR_DrawSkinFlex+0x92>
 802a260:	e8df f003 	tbb	[pc, r3]
 802a264:	1f1f8337 	.word	0x1f1f8337
 802a268:	1f1f1f71 	.word	0x1f1f1f71
 802a26c:	091f7171 	.word	0x091f7171
 802a270:	1f1f1f1f 	.word	0x1f1f1f1f
 802a274:	2e1f      	.short	0x2e1f
 802a276:	686b      	ldr	r3, [r5, #4]
 802a278:	496c      	ldr	r1, [pc, #432]	; (802a42c <SCROLLBAR_DrawSkinFlex+0x21c>)
 802a27a:	4c6d      	ldr	r4, [pc, #436]	; (802a430 <SCROLLBAR_DrawSkinFlex+0x220>)
 802a27c:	2b03      	cmp	r3, #3
 802a27e:	bf08      	it	eq
 802a280:	460c      	moveq	r4, r1
 802a282:	4621      	mov	r1, r4
 802a284:	a804      	add	r0, sp, #16
 802a286:	4790      	blx	r2
 802a288:	682b      	ldr	r3, [r5, #0]
 802a28a:	2b00      	cmp	r3, #0
 802a28c:	f000 80ab 	beq.w	802a3e6 <SCROLLBAR_DrawSkinFlex+0x1d6>
 802a290:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802a294:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a298:	1ad3      	subs	r3, r2, r3
 802a29a:	3301      	adds	r3, #1
 802a29c:	2b0e      	cmp	r3, #14
 802a29e:	f300 80be 	bgt.w	802a41e <SCROLLBAR_DrawSkinFlex+0x20e>
 802a2a2:	2000      	movs	r0, #0
 802a2a4:	b007      	add	sp, #28
 802a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a2aa:	a904      	add	r1, sp, #16
 802a2ac:	460a      	mov	r2, r1
 802a2ae:	4630      	mov	r0, r6
 802a2b0:	f7eb fbb6 	bl	8015a20 <WIDGET__RotateRect90>
 802a2b4:	f8df b18c 	ldr.w	fp, [pc, #396]	; 802a444 <SCROLLBAR_DrawSkinFlex+0x234>
 802a2b8:	f8df c18c 	ldr.w	ip, [pc, #396]	; 802a448 <SCROLLBAR_DrawSkinFlex+0x238>
 802a2bc:	4a5d      	ldr	r2, [pc, #372]	; (802a434 <SCROLLBAR_DrawSkinFlex+0x224>)
 802a2be:	e7cb      	b.n	802a258 <SCROLLBAR_DrawSkinFlex+0x48>
 802a2c0:	682b      	ldr	r3, [r5, #0]
 802a2c2:	2b00      	cmp	r3, #0
 802a2c4:	f000 808a 	beq.w	802a3dc <SCROLLBAR_DrawSkinFlex+0x1cc>
 802a2c8:	69a0      	ldr	r0, [r4, #24]
 802a2ca:	6923      	ldr	r3, [r4, #16]
 802a2cc:	1ac0      	subs	r0, r0, r3
 802a2ce:	3001      	adds	r0, #1
 802a2d0:	e7e8      	b.n	802a2a4 <SCROLLBAR_DrawSkinFlex+0x94>
 802a2d2:	686b      	ldr	r3, [r5, #4]
 802a2d4:	4856      	ldr	r0, [pc, #344]	; (802a430 <SCROLLBAR_DrawSkinFlex+0x220>)
 802a2d6:	4955      	ldr	r1, [pc, #340]	; (802a42c <SCROLLBAR_DrawSkinFlex+0x21c>)
 802a2d8:	2b02      	cmp	r3, #2
 802a2da:	bf14      	ite	ne
 802a2dc:	4683      	movne	fp, r0
 802a2de:	468b      	moveq	fp, r1
 802a2e0:	4659      	mov	r1, fp
 802a2e2:	a804      	add	r0, sp, #16
 802a2e4:	4790      	blx	r2
 802a2e6:	682b      	ldr	r3, [r5, #0]
 802a2e8:	2b00      	cmp	r3, #0
 802a2ea:	f000 8083 	beq.w	802a3f4 <SCROLLBAR_DrawSkinFlex+0x1e4>
 802a2ee:	fa0f fa8a 	sxth.w	sl, sl
 802a2f2:	fa0f f989 	sxth.w	r9, r9
 802a2f6:	fa0f f888 	sxth.w	r8, r8
 802a2fa:	b23f      	sxth	r7, r7
 802a2fc:	ebca 0909 	rsb	r9, sl, r9
 802a300:	ebc7 0708 	rsb	r7, r7, r8
 802a304:	f109 0901 	add.w	r9, r9, #1
 802a308:	3701      	adds	r7, #1
 802a30a:	4c4b      	ldr	r4, [pc, #300]	; (802a438 <SCROLLBAR_DrawSkinFlex+0x228>)
 802a30c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 802a310:	f1a9 0304 	sub.w	r3, r9, #4
 802a314:	fb84 2403 	smull	r2, r4, r4, r3
 802a318:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 802a31c:	f7fa fa02 	bl	8024724 <GUI_SetColor>
 802a320:	ebc4 0109 	rsb	r1, r4, r9
 802a324:	eba9 0961 	sub.w	r9, r9, r1, asr #1
 802a328:	f109 31ff 	add.w	r1, r9, #4294967295
 802a32c:	f04f 35ff 	mov.w	r5, #4294967295
 802a330:	4630      	mov	r0, r6
 802a332:	107a      	asrs	r2, r7, #1
 802a334:	4451      	add	r1, sl
 802a336:	4623      	mov	r3, r4
 802a338:	9500      	str	r5, [sp, #0]
 802a33a:	f7eb fda9 	bl	8015e90 <WIDGET__DrawTriangle>
 802a33e:	2000      	movs	r0, #0
 802a340:	b007      	add	sp, #28
 802a342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a346:	4c3a      	ldr	r4, [pc, #232]	; (802a430 <SCROLLBAR_DrawSkinFlex+0x220>)
 802a348:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802a34c:	69e5      	ldr	r5, [r4, #28]
 802a34e:	6a24      	ldr	r4, [r4, #32]
 802a350:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802a354:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802a358:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802a35c:	9500      	str	r5, [sp, #0]
 802a35e:	9401      	str	r4, [sp, #4]
 802a360:	47e0      	blx	ip
 802a362:	2000      	movs	r0, #0
 802a364:	b007      	add	sp, #28
 802a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a36a:	686b      	ldr	r3, [r5, #4]
 802a36c:	4830      	ldr	r0, [pc, #192]	; (802a430 <SCROLLBAR_DrawSkinFlex+0x220>)
 802a36e:	492f      	ldr	r1, [pc, #188]	; (802a42c <SCROLLBAR_DrawSkinFlex+0x21c>)
 802a370:	2b01      	cmp	r3, #1
 802a372:	bf14      	ite	ne
 802a374:	4683      	movne	fp, r0
 802a376:	468b      	moveq	fp, r1
 802a378:	4659      	mov	r1, fp
 802a37a:	a804      	add	r0, sp, #16
 802a37c:	4790      	blx	r2
 802a37e:	682b      	ldr	r3, [r5, #0]
 802a380:	2b00      	cmp	r3, #0
 802a382:	d042      	beq.n	802a40a <SCROLLBAR_DrawSkinFlex+0x1fa>
 802a384:	fa0f f989 	sxth.w	r9, r9
 802a388:	fa0f fa8a 	sxth.w	sl, sl
 802a38c:	ebca 0a09 	rsb	sl, sl, r9
 802a390:	fa0f f888 	sxth.w	r8, r8
 802a394:	b23f      	sxth	r7, r7
 802a396:	f10a 0a01 	add.w	sl, sl, #1
 802a39a:	ebc7 0708 	rsb	r7, r7, r8
 802a39e:	4c26      	ldr	r4, [pc, #152]	; (802a438 <SCROLLBAR_DrawSkinFlex+0x228>)
 802a3a0:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 802a3a4:	f1aa 0304 	sub.w	r3, sl, #4
 802a3a8:	fb84 1403 	smull	r1, r4, r4, r3
 802a3ac:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 802a3b0:	f7fa f9b8 	bl	8024724 <GUI_SetColor>
 802a3b4:	ebc4 010a 	rsb	r1, r4, sl
 802a3b8:	ebaa 0a61 	sub.w	sl, sl, r1, asr #1
 802a3bc:	2501      	movs	r5, #1
 802a3be:	f10a 31ff 	add.w	r1, sl, #4294967295
 802a3c2:	4630      	mov	r0, r6
 802a3c4:	fa47 f205 	asr.w	r2, r7, r5
 802a3c8:	ebc1 0109 	rsb	r1, r1, r9
 802a3cc:	4623      	mov	r3, r4
 802a3ce:	9500      	str	r5, [sp, #0]
 802a3d0:	f7eb fd5e 	bl	8015e90 <WIDGET__DrawTriangle>
 802a3d4:	2000      	movs	r0, #0
 802a3d6:	b007      	add	sp, #28
 802a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3dc:	69e0      	ldr	r0, [r4, #28]
 802a3de:	6963      	ldr	r3, [r4, #20]
 802a3e0:	1ac0      	subs	r0, r0, r3
 802a3e2:	3001      	adds	r0, #1
 802a3e4:	e75e      	b.n	802a2a4 <SCROLLBAR_DrawSkinFlex+0x94>
 802a3e6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802a3ea:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802a3ee:	1ad3      	subs	r3, r2, r3
 802a3f0:	3301      	adds	r3, #1
 802a3f2:	e753      	b.n	802a29c <SCROLLBAR_DrawSkinFlex+0x8c>
 802a3f4:	b23f      	sxth	r7, r7
 802a3f6:	fa0f f988 	sxth.w	r9, r8
 802a3fa:	ebc7 0909 	rsb	r9, r7, r9
 802a3fe:	f109 0901 	add.w	r9, r9, #1
 802a402:	fa0f fa8a 	sxth.w	sl, sl
 802a406:	464f      	mov	r7, r9
 802a408:	e77f      	b.n	802a30a <SCROLLBAR_DrawSkinFlex+0xfa>
 802a40a:	fa0f f888 	sxth.w	r8, r8
 802a40e:	b23f      	sxth	r7, r7
 802a410:	ebc7 0708 	rsb	r7, r7, r8
 802a414:	fa0f f989 	sxth.w	r9, r9
 802a418:	f107 0a01 	add.w	sl, r7, #1
 802a41c:	e7bf      	b.n	802a39e <SCROLLBAR_DrawSkinFlex+0x18e>
 802a41e:	a804      	add	r0, sp, #16
 802a420:	4621      	mov	r1, r4
 802a422:	47d8      	blx	fp
 802a424:	2000      	movs	r0, #0
 802a426:	e73d      	b.n	802a2a4 <SCROLLBAR_DrawSkinFlex+0x94>
 802a428:	0802a151 	.word	0x0802a151
 802a42c:	20000410 	.word	0x20000410
 802a430:	2000043c 	.word	0x2000043c
 802a434:	0802a1b1 	.word	0x0802a1b1
 802a438:	55555556 	.word	0x55555556
 802a43c:	08029f9d 	.word	0x08029f9d
 802a440:	080297c1 	.word	0x080297c1
 802a444:	08029ffd 	.word	0x08029ffd
 802a448:	08029979 	.word	0x08029979

0802a44c <_Create>:
 802a44c:	b530      	push	{r4, r5, lr}
 802a44e:	b08d      	sub	sp, #52	; 0x34
 802a450:	4605      	mov	r5, r0
 802a452:	f7fb fa4b 	bl	80258ec <GUI_ALLOC_LockH>
 802a456:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 802a458:	4909      	ldr	r1, [pc, #36]	; (802a480 <_Create+0x34>)
 802a45a:	6481      	str	r1, [r0, #72]	; 0x48
 802a45c:	4603      	mov	r3, r0
 802a45e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 802a462:	4668      	mov	r0, sp
 802a464:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 802a466:	9300      	str	r3, [sp, #0]
 802a468:	9201      	str	r2, [sp, #4]
 802a46a:	f7fb fa51 	bl	8025910 <GUI_ALLOC_UnlockH>
 802a46e:	2200      	movs	r2, #0
 802a470:	ab01      	add	r3, sp, #4
 802a472:	9503      	str	r5, [sp, #12]
 802a474:	9204      	str	r2, [sp, #16]
 802a476:	930b      	str	r3, [sp, #44]	; 0x2c
 802a478:	a803      	add	r0, sp, #12
 802a47a:	47a0      	blx	r4
 802a47c:	b00d      	add	sp, #52	; 0x34
 802a47e:	bd30      	pop	{r4, r5, pc}
 802a480:	0802a485 	.word	0x0802a485

0802a484 <_CalcPositions>:
 802a484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a488:	b092      	sub	sp, #72	; 0x48
 802a48a:	460c      	mov	r4, r1
 802a48c:	4605      	mov	r5, r0
 802a48e:	f7fb fa2d 	bl	80258ec <GUI_ALLOC_LockH>
 802a492:	4603      	mov	r3, r0
 802a494:	c803      	ldmia	r0, {r0, r1}
 802a496:	ae02      	add	r6, sp, #8
 802a498:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 802a49a:	9300      	str	r3, [sp, #0]
 802a49c:	e886 0003 	stmia.w	r6, {r0, r1}
 802a4a0:	f002 0108 	and.w	r1, r2, #8
 802a4a4:	b289      	uxth	r1, r1
 802a4a6:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 802a4aa:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 802a4ae:	2900      	cmp	r1, #0
 802a4b0:	d070      	beq.n	802a594 <_CalcPositions+0x110>
 802a4b2:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 802a4b6:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
 802a4ba:	4696      	mov	lr, r2
 802a4bc:	f111 0900 	adds.w	r9, r1, #0
 802a4c0:	bf18      	it	ne
 802a4c2:	f04f 0901 	movne.w	r9, #1
 802a4c6:	2119      	movs	r1, #25
 802a4c8:	a807      	add	r0, sp, #28
 802a4ca:	61a2      	str	r2, [r4, #24]
 802a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a4ce:	9509      	str	r5, [sp, #36]	; 0x24
 802a4d0:	9011      	str	r0, [sp, #68]	; 0x44
 802a4d2:	f8cd 901c 	str.w	r9, [sp, #28]
 802a4d6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 802a4da:	970e      	str	r7, [sp, #56]	; 0x38
 802a4dc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802a4e0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 802a4e4:	910a      	str	r1, [sp, #40]	; 0x28
 802a4e6:	a809      	add	r0, sp, #36	; 0x24
 802a4e8:	4798      	blx	r3
 802a4ea:	9a00      	ldr	r2, [sp, #0]
 802a4ec:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 802a4f0:	2bff      	cmp	r3, #255	; 0xff
 802a4f2:	4605      	mov	r5, r0
 802a4f4:	d054      	beq.n	802a5a0 <_CalcPositions+0x11c>
 802a4f6:	2bfe      	cmp	r3, #254	; 0xfe
 802a4f8:	d05b      	beq.n	802a5b2 <_CalcPositions+0x12e>
 802a4fa:	427a      	negs	r2, r7
 802a4fc:	f1c8 0100 	rsb	r1, r8, #0
 802a500:	4630      	mov	r0, r6
 802a502:	f7fa f879 	bl	80245f8 <GUI_MoveRect>
 802a506:	4631      	mov	r1, r6
 802a508:	9800      	ldr	r0, [sp, #0]
 802a50a:	f7fd f881 	bl	8027610 <SCROLLBAR__Rect2VRect>
 802a50e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802a512:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
 802a516:	9b00      	ldr	r3, [sp, #0]
 802a518:	ebc2 0909 	rsb	r9, r2, r9
 802a51c:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 802a520:	6d58      	ldr	r0, [r3, #84]	; 0x54
 802a522:	f109 0601 	add.w	r6, r9, #1
 802a526:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 802a52a:	4651      	mov	r1, sl
 802a52c:	fb00 f006 	mul.w	r0, r0, r6
 802a530:	f7f7 fe58 	bl	80221e4 <GUI__DivideRound32>
 802a534:	4b32      	ldr	r3, [pc, #200]	; (802a600 <_CalcPositions+0x17c>)
 802a536:	f9b3 3000 	ldrsh.w	r3, [r3]
 802a53a:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 802a53e:	1c5a      	adds	r2, r3, #1
 802a540:	4290      	cmp	r0, r2
 802a542:	bfd8      	it	le
 802a544:	1c98      	addle	r0, r3, #2
 802a546:	f858 3d48 	ldr.w	r3, [r8, #-72]!
 802a54a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802a54e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802a550:	42b0      	cmp	r0, r6
 802a552:	bfb4      	ite	lt
 802a554:	4607      	movlt	r7, r0
 802a556:	4637      	movge	r7, r6
 802a558:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802a55a:	f8c4 9014 	str.w	r9, [r4, #20]
 802a55e:	1e6b      	subs	r3, r5, #1
 802a560:	ebc7 0906 	rsb	r9, r7, r6
 802a564:	442e      	add	r6, r5
 802a566:	e884 000c 	stmia.w	r4, {r2, r3}
 802a56a:	ebc1 010a 	rsb	r1, r1, sl
 802a56e:	fb00 f009 	mul.w	r0, r0, r9
 802a572:	6126      	str	r6, [r4, #16]
 802a574:	f7f7 fe36 	bl	80221e4 <GUI__DivideRound32>
 802a578:	4428      	add	r0, r5
 802a57a:	19c3      	adds	r3, r0, r7
 802a57c:	3b01      	subs	r3, #1
 802a57e:	60a0      	str	r0, [r4, #8]
 802a580:	60e3      	str	r3, [r4, #12]
 802a582:	f8c4 901c 	str.w	r9, [r4, #28]
 802a586:	4668      	mov	r0, sp
 802a588:	6227      	str	r7, [r4, #32]
 802a58a:	f7fb f9c1 	bl	8025910 <GUI_ALLOC_UnlockH>
 802a58e:	b012      	add	sp, #72	; 0x48
 802a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a594:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802a598:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 802a59c:	4694      	mov	ip, r2
 802a59e:	e78d      	b.n	802a4bc <_CalcPositions+0x38>
 802a5a0:	6990      	ldr	r0, [r2, #24]
 802a5a2:	f7f1 fdf5 	bl	801c190 <WM_GetScrollbarV>
 802a5a6:	b9c0      	cbnz	r0, 802a5da <_CalcPositions+0x156>
 802a5a8:	9a00      	ldr	r2, [sp, #0]
 802a5aa:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 802a5ae:	2bfe      	cmp	r3, #254	; 0xfe
 802a5b0:	d1a3      	bne.n	802a4fa <_CalcPositions+0x76>
 802a5b2:	6990      	ldr	r0, [r2, #24]
 802a5b4:	f7f1 fda4 	bl	801c100 <WM_GetScrollbarH>
 802a5b8:	2800      	cmp	r0, #0
 802a5ba:	d09e      	beq.n	802a4fa <_CalcPositions+0x76>
 802a5bc:	a904      	add	r1, sp, #16
 802a5be:	f7f1 fec7 	bl	801c350 <WM_GetWindowRectEx>
 802a5c2:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 802a5c6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802a5ca:	429a      	cmp	r2, r3
 802a5cc:	d195      	bne.n	802a4fa <_CalcPositions+0x76>
 802a5ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802a5d2:	3b01      	subs	r3, #1
 802a5d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a5d8:	e78f      	b.n	802a4fa <_CalcPositions+0x76>
 802a5da:	a904      	add	r1, sp, #16
 802a5dc:	f7f1 feb8 	bl	801c350 <WM_GetWindowRectEx>
 802a5e0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802a5e4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802a5e8:	429a      	cmp	r2, r3
 802a5ea:	d1dd      	bne.n	802a5a8 <_CalcPositions+0x124>
 802a5ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a5f0:	9a00      	ldr	r2, [sp, #0]
 802a5f2:	3b01      	subs	r3, #1
 802a5f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 802a5f8:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 802a5fc:	e77b      	b.n	802a4f6 <_CalcPositions+0x72>
 802a5fe:	bf00      	nop
 802a600:	2000035e 	.word	0x2000035e

0802a604 <_Paint>:
 802a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a606:	b099      	sub	sp, #100	; 0x64
 802a608:	4606      	mov	r6, r0
 802a60a:	f7fb f96f 	bl	80258ec <GUI_ALLOC_LockH>
 802a60e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 802a610:	6d83      	ldr	r3, [r0, #88]	; 0x58
 802a612:	9001      	str	r0, [sp, #4]
 802a614:	4605      	mov	r5, r0
 802a616:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 802a61a:	a906      	add	r1, sp, #24
 802a61c:	4630      	mov	r0, r6
 802a61e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 802a620:	9204      	str	r2, [sp, #16]
 802a622:	9305      	str	r3, [sp, #20]
 802a624:	f7ff ff2e 	bl	802a484 <_CalcPositions>
 802a628:	a801      	add	r0, sp, #4
 802a62a:	f7fb f971 	bl	8025910 <GUI_ALLOC_UnlockH>
 802a62e:	4628      	mov	r0, r5
 802a630:	a902      	add	r1, sp, #8
 802a632:	f7eb fa09 	bl	8015a48 <WIDGET__GetClientRect>
 802a636:	9a06      	ldr	r2, [sp, #24]
 802a638:	9b07      	ldr	r3, [sp, #28]
 802a63a:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 802a63e:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 802a642:	9213      	str	r2, [sp, #76]	; 0x4c
 802a644:	2108      	movs	r1, #8
 802a646:	a804      	add	r0, sp, #16
 802a648:	9017      	str	r0, [sp, #92]	; 0x5c
 802a64a:	9110      	str	r1, [sp, #64]	; 0x40
 802a64c:	9315      	str	r3, [sp, #84]	; 0x54
 802a64e:	960f      	str	r6, [sp, #60]	; 0x3c
 802a650:	9714      	str	r7, [sp, #80]	; 0x50
 802a652:	9516      	str	r5, [sp, #88]	; 0x58
 802a654:	a80f      	add	r0, sp, #60	; 0x3c
 802a656:	47a0      	blx	r4
 802a658:	9a07      	ldr	r2, [sp, #28]
 802a65a:	9b08      	ldr	r3, [sp, #32]
 802a65c:	3201      	adds	r2, #1
 802a65e:	3b01      	subs	r3, #1
 802a660:	2110      	movs	r1, #16
 802a662:	9213      	str	r2, [sp, #76]	; 0x4c
 802a664:	9315      	str	r3, [sp, #84]	; 0x54
 802a666:	9110      	str	r1, [sp, #64]	; 0x40
 802a668:	a80f      	add	r0, sp, #60	; 0x3c
 802a66a:	47a0      	blx	r4
 802a66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a670:	3201      	adds	r2, #1
 802a672:	3b01      	subs	r3, #1
 802a674:	2111      	movs	r1, #17
 802a676:	9213      	str	r2, [sp, #76]	; 0x4c
 802a678:	9315      	str	r3, [sp, #84]	; 0x54
 802a67a:	9110      	str	r1, [sp, #64]	; 0x40
 802a67c:	a80f      	add	r0, sp, #60	; 0x3c
 802a67e:	47a0      	blx	r4
 802a680:	2113      	movs	r1, #19
 802a682:	9a08      	ldr	r2, [sp, #32]
 802a684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a686:	9110      	str	r1, [sp, #64]	; 0x40
 802a688:	9213      	str	r2, [sp, #76]	; 0x4c
 802a68a:	9315      	str	r3, [sp, #84]	; 0x54
 802a68c:	a80f      	add	r0, sp, #60	; 0x3c
 802a68e:	47a0      	blx	r4
 802a690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a694:	9213      	str	r2, [sp, #76]	; 0x4c
 802a696:	2109      	movs	r1, #9
 802a698:	9315      	str	r3, [sp, #84]	; 0x54
 802a69a:	9110      	str	r1, [sp, #64]	; 0x40
 802a69c:	a80f      	add	r0, sp, #60	; 0x3c
 802a69e:	47a0      	blx	r4
 802a6a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a6a4:	429a      	cmp	r2, r3
 802a6a6:	d006      	beq.n	802a6b6 <_Paint+0xb2>
 802a6a8:	3201      	adds	r2, #1
 802a6aa:	210c      	movs	r1, #12
 802a6ac:	9213      	str	r2, [sp, #76]	; 0x4c
 802a6ae:	9315      	str	r3, [sp, #84]	; 0x54
 802a6b0:	a80f      	add	r0, sp, #60	; 0x3c
 802a6b2:	9110      	str	r1, [sp, #64]	; 0x40
 802a6b4:	47a0      	blx	r4
 802a6b6:	b019      	add	sp, #100	; 0x64
 802a6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a6ba:	bf00      	nop

0802a6bc <GUI_DRAW__Draw>:
 802a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6c0:	460f      	mov	r7, r1
 802a6c2:	b082      	sub	sp, #8
 802a6c4:	4616      	mov	r6, r2
 802a6c6:	461d      	mov	r5, r3
 802a6c8:	4680      	mov	r8, r0
 802a6ca:	b170      	cbz	r0, 802a6ea <GUI_DRAW__Draw+0x2e>
 802a6cc:	f7fb f90e 	bl	80258ec <GUI_ALLOC_LockH>
 802a6d0:	ac02      	add	r4, sp, #8
 802a6d2:	6803      	ldr	r3, [r0, #0]
 802a6d4:	f844 0d04 	str.w	r0, [r4, #-4]!
 802a6d8:	4620      	mov	r0, r4
 802a6da:	681c      	ldr	r4, [r3, #0]
 802a6dc:	f7fb f918 	bl	8025910 <GUI_ALLOC_UnlockH>
 802a6e0:	4640      	mov	r0, r8
 802a6e2:	4639      	mov	r1, r7
 802a6e4:	4632      	mov	r2, r6
 802a6e6:	462b      	mov	r3, r5
 802a6e8:	47a0      	blx	r4
 802a6ea:	b002      	add	sp, #8
 802a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802a6f0 <LCD_GetNumLayers>:
 802a6f0:	b510      	push	{r4, lr}
 802a6f2:	2000      	movs	r0, #0
 802a6f4:	f7f9 faa8 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802a6f8:	1c04      	adds	r4, r0, #0
 802a6fa:	f04f 0001 	mov.w	r0, #1
 802a6fe:	bf18      	it	ne
 802a700:	2401      	movne	r4, #1
 802a702:	f7f9 faa1 	bl	8023c48 <GUI_DEVICE__GetpDriver>
 802a706:	b100      	cbz	r0, 802a70a <LCD_GetNumLayers+0x1a>
 802a708:	3401      	adds	r4, #1
 802a70a:	4620      	mov	r0, r4
 802a70c:	bd10      	pop	{r4, pc}
 802a70e:	bf00      	nop

0802a710 <__libc_init_array>:
 802a710:	b570      	push	{r4, r5, r6, lr}
 802a712:	4e0d      	ldr	r6, [pc, #52]	; (802a748 <__libc_init_array+0x38>)
 802a714:	4c0d      	ldr	r4, [pc, #52]	; (802a74c <__libc_init_array+0x3c>)
 802a716:	1ba4      	subs	r4, r4, r6
 802a718:	10a4      	asrs	r4, r4, #2
 802a71a:	2500      	movs	r5, #0
 802a71c:	42a5      	cmp	r5, r4
 802a71e:	d109      	bne.n	802a734 <__libc_init_array+0x24>
 802a720:	4e0b      	ldr	r6, [pc, #44]	; (802a750 <__libc_init_array+0x40>)
 802a722:	4c0c      	ldr	r4, [pc, #48]	; (802a754 <__libc_init_array+0x44>)
 802a724:	f001 f8a2 	bl	802b86c <_init>
 802a728:	1ba4      	subs	r4, r4, r6
 802a72a:	10a4      	asrs	r4, r4, #2
 802a72c:	2500      	movs	r5, #0
 802a72e:	42a5      	cmp	r5, r4
 802a730:	d105      	bne.n	802a73e <__libc_init_array+0x2e>
 802a732:	bd70      	pop	{r4, r5, r6, pc}
 802a734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a738:	4798      	blx	r3
 802a73a:	3501      	adds	r5, #1
 802a73c:	e7ee      	b.n	802a71c <__libc_init_array+0xc>
 802a73e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a742:	4798      	blx	r3
 802a744:	3501      	adds	r5, #1
 802a746:	e7f2      	b.n	802a72e <__libc_init_array+0x1e>
 802a748:	08033030 	.word	0x08033030
 802a74c:	08033030 	.word	0x08033030
 802a750:	08033030 	.word	0x08033030
 802a754:	08033034 	.word	0x08033034

0802a758 <__locale_ctype_ptr_l>:
 802a758:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802a75c:	4770      	bx	lr
	...

0802a760 <malloc>:
 802a760:	4b02      	ldr	r3, [pc, #8]	; (802a76c <malloc+0xc>)
 802a762:	4601      	mov	r1, r0
 802a764:	6818      	ldr	r0, [r3, #0]
 802a766:	f000 b899 	b.w	802a89c <_malloc_r>
 802a76a:	bf00      	nop
 802a76c:	20000474 	.word	0x20000474

0802a770 <free>:
 802a770:	4b02      	ldr	r3, [pc, #8]	; (802a77c <free+0xc>)
 802a772:	4601      	mov	r1, r0
 802a774:	6818      	ldr	r0, [r3, #0]
 802a776:	f000 b843 	b.w	802a800 <_free_r>
 802a77a:	bf00      	nop
 802a77c:	20000474 	.word	0x20000474

0802a780 <__ascii_mbtowc>:
 802a780:	b082      	sub	sp, #8
 802a782:	b901      	cbnz	r1, 802a786 <__ascii_mbtowc+0x6>
 802a784:	a901      	add	r1, sp, #4
 802a786:	b142      	cbz	r2, 802a79a <__ascii_mbtowc+0x1a>
 802a788:	b14b      	cbz	r3, 802a79e <__ascii_mbtowc+0x1e>
 802a78a:	7813      	ldrb	r3, [r2, #0]
 802a78c:	600b      	str	r3, [r1, #0]
 802a78e:	7812      	ldrb	r2, [r2, #0]
 802a790:	1c10      	adds	r0, r2, #0
 802a792:	bf18      	it	ne
 802a794:	2001      	movne	r0, #1
 802a796:	b002      	add	sp, #8
 802a798:	4770      	bx	lr
 802a79a:	4610      	mov	r0, r2
 802a79c:	e7fb      	b.n	802a796 <__ascii_mbtowc+0x16>
 802a79e:	f06f 0001 	mvn.w	r0, #1
 802a7a2:	e7f8      	b.n	802a796 <__ascii_mbtowc+0x16>

0802a7a4 <memcpy>:
 802a7a4:	b510      	push	{r4, lr}
 802a7a6:	1e43      	subs	r3, r0, #1
 802a7a8:	440a      	add	r2, r1
 802a7aa:	4291      	cmp	r1, r2
 802a7ac:	d100      	bne.n	802a7b0 <memcpy+0xc>
 802a7ae:	bd10      	pop	{r4, pc}
 802a7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a7b8:	e7f7      	b.n	802a7aa <memcpy+0x6>

0802a7ba <memmove>:
 802a7ba:	4288      	cmp	r0, r1
 802a7bc:	b510      	push	{r4, lr}
 802a7be:	eb01 0302 	add.w	r3, r1, r2
 802a7c2:	d803      	bhi.n	802a7cc <memmove+0x12>
 802a7c4:	1e42      	subs	r2, r0, #1
 802a7c6:	4299      	cmp	r1, r3
 802a7c8:	d10c      	bne.n	802a7e4 <memmove+0x2a>
 802a7ca:	bd10      	pop	{r4, pc}
 802a7cc:	4298      	cmp	r0, r3
 802a7ce:	d2f9      	bcs.n	802a7c4 <memmove+0xa>
 802a7d0:	1881      	adds	r1, r0, r2
 802a7d2:	1ad2      	subs	r2, r2, r3
 802a7d4:	42d3      	cmn	r3, r2
 802a7d6:	d100      	bne.n	802a7da <memmove+0x20>
 802a7d8:	bd10      	pop	{r4, pc}
 802a7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a7de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802a7e2:	e7f7      	b.n	802a7d4 <memmove+0x1a>
 802a7e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a7e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 802a7ec:	e7eb      	b.n	802a7c6 <memmove+0xc>

0802a7ee <memset>:
 802a7ee:	4402      	add	r2, r0
 802a7f0:	4603      	mov	r3, r0
 802a7f2:	4293      	cmp	r3, r2
 802a7f4:	d100      	bne.n	802a7f8 <memset+0xa>
 802a7f6:	4770      	bx	lr
 802a7f8:	f803 1b01 	strb.w	r1, [r3], #1
 802a7fc:	e7f9      	b.n	802a7f2 <memset+0x4>
	...

0802a800 <_free_r>:
 802a800:	b538      	push	{r3, r4, r5, lr}
 802a802:	4605      	mov	r5, r0
 802a804:	2900      	cmp	r1, #0
 802a806:	d045      	beq.n	802a894 <_free_r+0x94>
 802a808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a80c:	1f0c      	subs	r4, r1, #4
 802a80e:	2b00      	cmp	r3, #0
 802a810:	bfb8      	it	lt
 802a812:	18e4      	addlt	r4, r4, r3
 802a814:	f000 fc78 	bl	802b108 <__malloc_lock>
 802a818:	4a1f      	ldr	r2, [pc, #124]	; (802a898 <_free_r+0x98>)
 802a81a:	6813      	ldr	r3, [r2, #0]
 802a81c:	4610      	mov	r0, r2
 802a81e:	b933      	cbnz	r3, 802a82e <_free_r+0x2e>
 802a820:	6063      	str	r3, [r4, #4]
 802a822:	6014      	str	r4, [r2, #0]
 802a824:	4628      	mov	r0, r5
 802a826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a82a:	f000 bc6e 	b.w	802b10a <__malloc_unlock>
 802a82e:	42a3      	cmp	r3, r4
 802a830:	d90c      	bls.n	802a84c <_free_r+0x4c>
 802a832:	6821      	ldr	r1, [r4, #0]
 802a834:	1862      	adds	r2, r4, r1
 802a836:	4293      	cmp	r3, r2
 802a838:	bf04      	itt	eq
 802a83a:	681a      	ldreq	r2, [r3, #0]
 802a83c:	685b      	ldreq	r3, [r3, #4]
 802a83e:	6063      	str	r3, [r4, #4]
 802a840:	bf04      	itt	eq
 802a842:	1852      	addeq	r2, r2, r1
 802a844:	6022      	streq	r2, [r4, #0]
 802a846:	6004      	str	r4, [r0, #0]
 802a848:	e7ec      	b.n	802a824 <_free_r+0x24>
 802a84a:	4613      	mov	r3, r2
 802a84c:	685a      	ldr	r2, [r3, #4]
 802a84e:	b10a      	cbz	r2, 802a854 <_free_r+0x54>
 802a850:	42a2      	cmp	r2, r4
 802a852:	d9fa      	bls.n	802a84a <_free_r+0x4a>
 802a854:	6819      	ldr	r1, [r3, #0]
 802a856:	1858      	adds	r0, r3, r1
 802a858:	42a0      	cmp	r0, r4
 802a85a:	d10b      	bne.n	802a874 <_free_r+0x74>
 802a85c:	6820      	ldr	r0, [r4, #0]
 802a85e:	4401      	add	r1, r0
 802a860:	1858      	adds	r0, r3, r1
 802a862:	4282      	cmp	r2, r0
 802a864:	6019      	str	r1, [r3, #0]
 802a866:	d1dd      	bne.n	802a824 <_free_r+0x24>
 802a868:	6810      	ldr	r0, [r2, #0]
 802a86a:	6852      	ldr	r2, [r2, #4]
 802a86c:	605a      	str	r2, [r3, #4]
 802a86e:	4401      	add	r1, r0
 802a870:	6019      	str	r1, [r3, #0]
 802a872:	e7d7      	b.n	802a824 <_free_r+0x24>
 802a874:	d902      	bls.n	802a87c <_free_r+0x7c>
 802a876:	230c      	movs	r3, #12
 802a878:	602b      	str	r3, [r5, #0]
 802a87a:	e7d3      	b.n	802a824 <_free_r+0x24>
 802a87c:	6820      	ldr	r0, [r4, #0]
 802a87e:	1821      	adds	r1, r4, r0
 802a880:	428a      	cmp	r2, r1
 802a882:	bf04      	itt	eq
 802a884:	6811      	ldreq	r1, [r2, #0]
 802a886:	6852      	ldreq	r2, [r2, #4]
 802a888:	6062      	str	r2, [r4, #4]
 802a88a:	bf04      	itt	eq
 802a88c:	1809      	addeq	r1, r1, r0
 802a88e:	6021      	streq	r1, [r4, #0]
 802a890:	605c      	str	r4, [r3, #4]
 802a892:	e7c7      	b.n	802a824 <_free_r+0x24>
 802a894:	bd38      	pop	{r3, r4, r5, pc}
 802a896:	bf00      	nop
 802a898:	2002b300 	.word	0x2002b300

0802a89c <_malloc_r>:
 802a89c:	b570      	push	{r4, r5, r6, lr}
 802a89e:	1ccd      	adds	r5, r1, #3
 802a8a0:	f025 0503 	bic.w	r5, r5, #3
 802a8a4:	3508      	adds	r5, #8
 802a8a6:	2d0c      	cmp	r5, #12
 802a8a8:	bf38      	it	cc
 802a8aa:	250c      	movcc	r5, #12
 802a8ac:	2d00      	cmp	r5, #0
 802a8ae:	4606      	mov	r6, r0
 802a8b0:	db01      	blt.n	802a8b6 <_malloc_r+0x1a>
 802a8b2:	42a9      	cmp	r1, r5
 802a8b4:	d903      	bls.n	802a8be <_malloc_r+0x22>
 802a8b6:	230c      	movs	r3, #12
 802a8b8:	6033      	str	r3, [r6, #0]
 802a8ba:	2000      	movs	r0, #0
 802a8bc:	bd70      	pop	{r4, r5, r6, pc}
 802a8be:	f000 fc23 	bl	802b108 <__malloc_lock>
 802a8c2:	4a23      	ldr	r2, [pc, #140]	; (802a950 <_malloc_r+0xb4>)
 802a8c4:	6814      	ldr	r4, [r2, #0]
 802a8c6:	4621      	mov	r1, r4
 802a8c8:	b991      	cbnz	r1, 802a8f0 <_malloc_r+0x54>
 802a8ca:	4c22      	ldr	r4, [pc, #136]	; (802a954 <_malloc_r+0xb8>)
 802a8cc:	6823      	ldr	r3, [r4, #0]
 802a8ce:	b91b      	cbnz	r3, 802a8d8 <_malloc_r+0x3c>
 802a8d0:	4630      	mov	r0, r6
 802a8d2:	f000 f8bd 	bl	802aa50 <_sbrk_r>
 802a8d6:	6020      	str	r0, [r4, #0]
 802a8d8:	4629      	mov	r1, r5
 802a8da:	4630      	mov	r0, r6
 802a8dc:	f000 f8b8 	bl	802aa50 <_sbrk_r>
 802a8e0:	1c43      	adds	r3, r0, #1
 802a8e2:	d126      	bne.n	802a932 <_malloc_r+0x96>
 802a8e4:	230c      	movs	r3, #12
 802a8e6:	6033      	str	r3, [r6, #0]
 802a8e8:	4630      	mov	r0, r6
 802a8ea:	f000 fc0e 	bl	802b10a <__malloc_unlock>
 802a8ee:	e7e4      	b.n	802a8ba <_malloc_r+0x1e>
 802a8f0:	680b      	ldr	r3, [r1, #0]
 802a8f2:	1b5b      	subs	r3, r3, r5
 802a8f4:	d41a      	bmi.n	802a92c <_malloc_r+0x90>
 802a8f6:	2b0b      	cmp	r3, #11
 802a8f8:	d90f      	bls.n	802a91a <_malloc_r+0x7e>
 802a8fa:	600b      	str	r3, [r1, #0]
 802a8fc:	50cd      	str	r5, [r1, r3]
 802a8fe:	18cc      	adds	r4, r1, r3
 802a900:	4630      	mov	r0, r6
 802a902:	f000 fc02 	bl	802b10a <__malloc_unlock>
 802a906:	f104 000b 	add.w	r0, r4, #11
 802a90a:	1d23      	adds	r3, r4, #4
 802a90c:	f020 0007 	bic.w	r0, r0, #7
 802a910:	1ac3      	subs	r3, r0, r3
 802a912:	d01b      	beq.n	802a94c <_malloc_r+0xb0>
 802a914:	425a      	negs	r2, r3
 802a916:	50e2      	str	r2, [r4, r3]
 802a918:	bd70      	pop	{r4, r5, r6, pc}
 802a91a:	428c      	cmp	r4, r1
 802a91c:	bf0d      	iteet	eq
 802a91e:	6863      	ldreq	r3, [r4, #4]
 802a920:	684b      	ldrne	r3, [r1, #4]
 802a922:	6063      	strne	r3, [r4, #4]
 802a924:	6013      	streq	r3, [r2, #0]
 802a926:	bf18      	it	ne
 802a928:	460c      	movne	r4, r1
 802a92a:	e7e9      	b.n	802a900 <_malloc_r+0x64>
 802a92c:	460c      	mov	r4, r1
 802a92e:	6849      	ldr	r1, [r1, #4]
 802a930:	e7ca      	b.n	802a8c8 <_malloc_r+0x2c>
 802a932:	1cc4      	adds	r4, r0, #3
 802a934:	f024 0403 	bic.w	r4, r4, #3
 802a938:	42a0      	cmp	r0, r4
 802a93a:	d005      	beq.n	802a948 <_malloc_r+0xac>
 802a93c:	1a21      	subs	r1, r4, r0
 802a93e:	4630      	mov	r0, r6
 802a940:	f000 f886 	bl	802aa50 <_sbrk_r>
 802a944:	3001      	adds	r0, #1
 802a946:	d0cd      	beq.n	802a8e4 <_malloc_r+0x48>
 802a948:	6025      	str	r5, [r4, #0]
 802a94a:	e7d9      	b.n	802a900 <_malloc_r+0x64>
 802a94c:	bd70      	pop	{r4, r5, r6, pc}
 802a94e:	bf00      	nop
 802a950:	2002b300 	.word	0x2002b300
 802a954:	2002b304 	.word	0x2002b304

0802a958 <iprintf>:
 802a958:	b40f      	push	{r0, r1, r2, r3}
 802a95a:	4b0a      	ldr	r3, [pc, #40]	; (802a984 <iprintf+0x2c>)
 802a95c:	b513      	push	{r0, r1, r4, lr}
 802a95e:	681c      	ldr	r4, [r3, #0]
 802a960:	b124      	cbz	r4, 802a96c <iprintf+0x14>
 802a962:	69a3      	ldr	r3, [r4, #24]
 802a964:	b913      	cbnz	r3, 802a96c <iprintf+0x14>
 802a966:	4620      	mov	r0, r4
 802a968:	f000 fae0 	bl	802af2c <__sinit>
 802a96c:	ab05      	add	r3, sp, #20
 802a96e:	9a04      	ldr	r2, [sp, #16]
 802a970:	68a1      	ldr	r1, [r4, #8]
 802a972:	9301      	str	r3, [sp, #4]
 802a974:	4620      	mov	r0, r4
 802a976:	f000 fbf3 	bl	802b160 <_vfiprintf_r>
 802a97a:	b002      	add	sp, #8
 802a97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a980:	b004      	add	sp, #16
 802a982:	4770      	bx	lr
 802a984:	20000474 	.word	0x20000474

0802a988 <_puts_r>:
 802a988:	b570      	push	{r4, r5, r6, lr}
 802a98a:	460e      	mov	r6, r1
 802a98c:	4605      	mov	r5, r0
 802a98e:	b118      	cbz	r0, 802a998 <_puts_r+0x10>
 802a990:	6983      	ldr	r3, [r0, #24]
 802a992:	b90b      	cbnz	r3, 802a998 <_puts_r+0x10>
 802a994:	f000 faca 	bl	802af2c <__sinit>
 802a998:	69ab      	ldr	r3, [r5, #24]
 802a99a:	68ac      	ldr	r4, [r5, #8]
 802a99c:	b913      	cbnz	r3, 802a9a4 <_puts_r+0x1c>
 802a99e:	4628      	mov	r0, r5
 802a9a0:	f000 fac4 	bl	802af2c <__sinit>
 802a9a4:	4b23      	ldr	r3, [pc, #140]	; (802aa34 <_puts_r+0xac>)
 802a9a6:	429c      	cmp	r4, r3
 802a9a8:	d117      	bne.n	802a9da <_puts_r+0x52>
 802a9aa:	686c      	ldr	r4, [r5, #4]
 802a9ac:	89a3      	ldrh	r3, [r4, #12]
 802a9ae:	071b      	lsls	r3, r3, #28
 802a9b0:	d51d      	bpl.n	802a9ee <_puts_r+0x66>
 802a9b2:	6923      	ldr	r3, [r4, #16]
 802a9b4:	b1db      	cbz	r3, 802a9ee <_puts_r+0x66>
 802a9b6:	3e01      	subs	r6, #1
 802a9b8:	68a3      	ldr	r3, [r4, #8]
 802a9ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802a9be:	3b01      	subs	r3, #1
 802a9c0:	60a3      	str	r3, [r4, #8]
 802a9c2:	b9e9      	cbnz	r1, 802aa00 <_puts_r+0x78>
 802a9c4:	2b00      	cmp	r3, #0
 802a9c6:	da2e      	bge.n	802aa26 <_puts_r+0x9e>
 802a9c8:	4622      	mov	r2, r4
 802a9ca:	210a      	movs	r1, #10
 802a9cc:	4628      	mov	r0, r5
 802a9ce:	f000 f8ed 	bl	802abac <__swbuf_r>
 802a9d2:	3001      	adds	r0, #1
 802a9d4:	d011      	beq.n	802a9fa <_puts_r+0x72>
 802a9d6:	200a      	movs	r0, #10
 802a9d8:	bd70      	pop	{r4, r5, r6, pc}
 802a9da:	4b17      	ldr	r3, [pc, #92]	; (802aa38 <_puts_r+0xb0>)
 802a9dc:	429c      	cmp	r4, r3
 802a9de:	d101      	bne.n	802a9e4 <_puts_r+0x5c>
 802a9e0:	68ac      	ldr	r4, [r5, #8]
 802a9e2:	e7e3      	b.n	802a9ac <_puts_r+0x24>
 802a9e4:	4b15      	ldr	r3, [pc, #84]	; (802aa3c <_puts_r+0xb4>)
 802a9e6:	429c      	cmp	r4, r3
 802a9e8:	bf08      	it	eq
 802a9ea:	68ec      	ldreq	r4, [r5, #12]
 802a9ec:	e7de      	b.n	802a9ac <_puts_r+0x24>
 802a9ee:	4621      	mov	r1, r4
 802a9f0:	4628      	mov	r0, r5
 802a9f2:	f000 f93b 	bl	802ac6c <__swsetup_r>
 802a9f6:	2800      	cmp	r0, #0
 802a9f8:	d0dd      	beq.n	802a9b6 <_puts_r+0x2e>
 802a9fa:	f04f 30ff 	mov.w	r0, #4294967295
 802a9fe:	bd70      	pop	{r4, r5, r6, pc}
 802aa00:	2b00      	cmp	r3, #0
 802aa02:	da04      	bge.n	802aa0e <_puts_r+0x86>
 802aa04:	69a2      	ldr	r2, [r4, #24]
 802aa06:	4293      	cmp	r3, r2
 802aa08:	db06      	blt.n	802aa18 <_puts_r+0x90>
 802aa0a:	290a      	cmp	r1, #10
 802aa0c:	d004      	beq.n	802aa18 <_puts_r+0x90>
 802aa0e:	6823      	ldr	r3, [r4, #0]
 802aa10:	1c5a      	adds	r2, r3, #1
 802aa12:	6022      	str	r2, [r4, #0]
 802aa14:	7019      	strb	r1, [r3, #0]
 802aa16:	e7cf      	b.n	802a9b8 <_puts_r+0x30>
 802aa18:	4622      	mov	r2, r4
 802aa1a:	4628      	mov	r0, r5
 802aa1c:	f000 f8c6 	bl	802abac <__swbuf_r>
 802aa20:	3001      	adds	r0, #1
 802aa22:	d1c9      	bne.n	802a9b8 <_puts_r+0x30>
 802aa24:	e7e9      	b.n	802a9fa <_puts_r+0x72>
 802aa26:	6823      	ldr	r3, [r4, #0]
 802aa28:	200a      	movs	r0, #10
 802aa2a:	1c5a      	adds	r2, r3, #1
 802aa2c:	6022      	str	r2, [r4, #0]
 802aa2e:	7018      	strb	r0, [r3, #0]
 802aa30:	bd70      	pop	{r4, r5, r6, pc}
 802aa32:	bf00      	nop
 802aa34:	08032fb4 	.word	0x08032fb4
 802aa38:	08032fd4 	.word	0x08032fd4
 802aa3c:	08032f94 	.word	0x08032f94

0802aa40 <puts>:
 802aa40:	4b02      	ldr	r3, [pc, #8]	; (802aa4c <puts+0xc>)
 802aa42:	4601      	mov	r1, r0
 802aa44:	6818      	ldr	r0, [r3, #0]
 802aa46:	f7ff bf9f 	b.w	802a988 <_puts_r>
 802aa4a:	bf00      	nop
 802aa4c:	20000474 	.word	0x20000474

0802aa50 <_sbrk_r>:
 802aa50:	b538      	push	{r3, r4, r5, lr}
 802aa52:	4c06      	ldr	r4, [pc, #24]	; (802aa6c <_sbrk_r+0x1c>)
 802aa54:	2300      	movs	r3, #0
 802aa56:	4605      	mov	r5, r0
 802aa58:	4608      	mov	r0, r1
 802aa5a:	6023      	str	r3, [r4, #0]
 802aa5c:	f000 fef8 	bl	802b850 <_sbrk>
 802aa60:	1c43      	adds	r3, r0, #1
 802aa62:	d102      	bne.n	802aa6a <_sbrk_r+0x1a>
 802aa64:	6823      	ldr	r3, [r4, #0]
 802aa66:	b103      	cbz	r3, 802aa6a <_sbrk_r+0x1a>
 802aa68:	602b      	str	r3, [r5, #0]
 802aa6a:	bd38      	pop	{r3, r4, r5, pc}
 802aa6c:	2002cd28 	.word	0x2002cd28

0802aa70 <strcpy>:
 802aa70:	4603      	mov	r3, r0
 802aa72:	f811 2b01 	ldrb.w	r2, [r1], #1
 802aa76:	f803 2b01 	strb.w	r2, [r3], #1
 802aa7a:	2a00      	cmp	r2, #0
 802aa7c:	d1f9      	bne.n	802aa72 <strcpy+0x2>
 802aa7e:	4770      	bx	lr

0802aa80 <_strtol_l.isra.0>:
 802aa80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa84:	4680      	mov	r8, r0
 802aa86:	4689      	mov	r9, r1
 802aa88:	4692      	mov	sl, r2
 802aa8a:	461f      	mov	r7, r3
 802aa8c:	468b      	mov	fp, r1
 802aa8e:	465d      	mov	r5, fp
 802aa90:	980a      	ldr	r0, [sp, #40]	; 0x28
 802aa92:	f815 4b01 	ldrb.w	r4, [r5], #1
 802aa96:	f7ff fe5f 	bl	802a758 <__locale_ctype_ptr_l>
 802aa9a:	4420      	add	r0, r4
 802aa9c:	7846      	ldrb	r6, [r0, #1]
 802aa9e:	f016 0608 	ands.w	r6, r6, #8
 802aaa2:	d10b      	bne.n	802aabc <_strtol_l.isra.0+0x3c>
 802aaa4:	2c2d      	cmp	r4, #45	; 0x2d
 802aaa6:	d10b      	bne.n	802aac0 <_strtol_l.isra.0+0x40>
 802aaa8:	782c      	ldrb	r4, [r5, #0]
 802aaaa:	2601      	movs	r6, #1
 802aaac:	f10b 0502 	add.w	r5, fp, #2
 802aab0:	b167      	cbz	r7, 802aacc <_strtol_l.isra.0+0x4c>
 802aab2:	2f10      	cmp	r7, #16
 802aab4:	d114      	bne.n	802aae0 <_strtol_l.isra.0+0x60>
 802aab6:	2c30      	cmp	r4, #48	; 0x30
 802aab8:	d00a      	beq.n	802aad0 <_strtol_l.isra.0+0x50>
 802aaba:	e011      	b.n	802aae0 <_strtol_l.isra.0+0x60>
 802aabc:	46ab      	mov	fp, r5
 802aabe:	e7e6      	b.n	802aa8e <_strtol_l.isra.0+0xe>
 802aac0:	2c2b      	cmp	r4, #43	; 0x2b
 802aac2:	bf04      	itt	eq
 802aac4:	782c      	ldrbeq	r4, [r5, #0]
 802aac6:	f10b 0502 	addeq.w	r5, fp, #2
 802aaca:	e7f1      	b.n	802aab0 <_strtol_l.isra.0+0x30>
 802aacc:	2c30      	cmp	r4, #48	; 0x30
 802aace:	d127      	bne.n	802ab20 <_strtol_l.isra.0+0xa0>
 802aad0:	782b      	ldrb	r3, [r5, #0]
 802aad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802aad6:	2b58      	cmp	r3, #88	; 0x58
 802aad8:	d14b      	bne.n	802ab72 <_strtol_l.isra.0+0xf2>
 802aada:	786c      	ldrb	r4, [r5, #1]
 802aadc:	2710      	movs	r7, #16
 802aade:	3502      	adds	r5, #2
 802aae0:	2e00      	cmp	r6, #0
 802aae2:	bf0c      	ite	eq
 802aae4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802aae8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802aaec:	2200      	movs	r2, #0
 802aaee:	fbb1 fef7 	udiv	lr, r1, r7
 802aaf2:	4610      	mov	r0, r2
 802aaf4:	fb07 1c1e 	mls	ip, r7, lr, r1
 802aaf8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802aafc:	2b09      	cmp	r3, #9
 802aafe:	d811      	bhi.n	802ab24 <_strtol_l.isra.0+0xa4>
 802ab00:	461c      	mov	r4, r3
 802ab02:	42a7      	cmp	r7, r4
 802ab04:	dd1d      	ble.n	802ab42 <_strtol_l.isra.0+0xc2>
 802ab06:	1c53      	adds	r3, r2, #1
 802ab08:	d007      	beq.n	802ab1a <_strtol_l.isra.0+0x9a>
 802ab0a:	4586      	cmp	lr, r0
 802ab0c:	d316      	bcc.n	802ab3c <_strtol_l.isra.0+0xbc>
 802ab0e:	d101      	bne.n	802ab14 <_strtol_l.isra.0+0x94>
 802ab10:	45a4      	cmp	ip, r4
 802ab12:	db13      	blt.n	802ab3c <_strtol_l.isra.0+0xbc>
 802ab14:	fb00 4007 	mla	r0, r0, r7, r4
 802ab18:	2201      	movs	r2, #1
 802ab1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802ab1e:	e7eb      	b.n	802aaf8 <_strtol_l.isra.0+0x78>
 802ab20:	270a      	movs	r7, #10
 802ab22:	e7dd      	b.n	802aae0 <_strtol_l.isra.0+0x60>
 802ab24:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802ab28:	2b19      	cmp	r3, #25
 802ab2a:	d801      	bhi.n	802ab30 <_strtol_l.isra.0+0xb0>
 802ab2c:	3c37      	subs	r4, #55	; 0x37
 802ab2e:	e7e8      	b.n	802ab02 <_strtol_l.isra.0+0x82>
 802ab30:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802ab34:	2b19      	cmp	r3, #25
 802ab36:	d804      	bhi.n	802ab42 <_strtol_l.isra.0+0xc2>
 802ab38:	3c57      	subs	r4, #87	; 0x57
 802ab3a:	e7e2      	b.n	802ab02 <_strtol_l.isra.0+0x82>
 802ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 802ab40:	e7eb      	b.n	802ab1a <_strtol_l.isra.0+0x9a>
 802ab42:	1c53      	adds	r3, r2, #1
 802ab44:	d108      	bne.n	802ab58 <_strtol_l.isra.0+0xd8>
 802ab46:	2322      	movs	r3, #34	; 0x22
 802ab48:	f8c8 3000 	str.w	r3, [r8]
 802ab4c:	4608      	mov	r0, r1
 802ab4e:	f1ba 0f00 	cmp.w	sl, #0
 802ab52:	d107      	bne.n	802ab64 <_strtol_l.isra.0+0xe4>
 802ab54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab58:	b106      	cbz	r6, 802ab5c <_strtol_l.isra.0+0xdc>
 802ab5a:	4240      	negs	r0, r0
 802ab5c:	f1ba 0f00 	cmp.w	sl, #0
 802ab60:	d00c      	beq.n	802ab7c <_strtol_l.isra.0+0xfc>
 802ab62:	b122      	cbz	r2, 802ab6e <_strtol_l.isra.0+0xee>
 802ab64:	3d01      	subs	r5, #1
 802ab66:	f8ca 5000 	str.w	r5, [sl]
 802ab6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab6e:	464d      	mov	r5, r9
 802ab70:	e7f9      	b.n	802ab66 <_strtol_l.isra.0+0xe6>
 802ab72:	2430      	movs	r4, #48	; 0x30
 802ab74:	2f00      	cmp	r7, #0
 802ab76:	d1b3      	bne.n	802aae0 <_strtol_l.isra.0+0x60>
 802ab78:	2708      	movs	r7, #8
 802ab7a:	e7b1      	b.n	802aae0 <_strtol_l.isra.0+0x60>
 802ab7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ab80 <strtol>:
 802ab80:	4b08      	ldr	r3, [pc, #32]	; (802aba4 <strtol+0x24>)
 802ab82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ab84:	681c      	ldr	r4, [r3, #0]
 802ab86:	4d08      	ldr	r5, [pc, #32]	; (802aba8 <strtol+0x28>)
 802ab88:	6a23      	ldr	r3, [r4, #32]
 802ab8a:	2b00      	cmp	r3, #0
 802ab8c:	bf08      	it	eq
 802ab8e:	462b      	moveq	r3, r5
 802ab90:	9300      	str	r3, [sp, #0]
 802ab92:	4613      	mov	r3, r2
 802ab94:	460a      	mov	r2, r1
 802ab96:	4601      	mov	r1, r0
 802ab98:	4620      	mov	r0, r4
 802ab9a:	f7ff ff71 	bl	802aa80 <_strtol_l.isra.0>
 802ab9e:	b003      	add	sp, #12
 802aba0:	bd30      	pop	{r4, r5, pc}
 802aba2:	bf00      	nop
 802aba4:	20000474 	.word	0x20000474
 802aba8:	200004d8 	.word	0x200004d8

0802abac <__swbuf_r>:
 802abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802abae:	460e      	mov	r6, r1
 802abb0:	4614      	mov	r4, r2
 802abb2:	4605      	mov	r5, r0
 802abb4:	b118      	cbz	r0, 802abbe <__swbuf_r+0x12>
 802abb6:	6983      	ldr	r3, [r0, #24]
 802abb8:	b90b      	cbnz	r3, 802abbe <__swbuf_r+0x12>
 802abba:	f000 f9b7 	bl	802af2c <__sinit>
 802abbe:	4b21      	ldr	r3, [pc, #132]	; (802ac44 <__swbuf_r+0x98>)
 802abc0:	429c      	cmp	r4, r3
 802abc2:	d12a      	bne.n	802ac1a <__swbuf_r+0x6e>
 802abc4:	686c      	ldr	r4, [r5, #4]
 802abc6:	69a3      	ldr	r3, [r4, #24]
 802abc8:	60a3      	str	r3, [r4, #8]
 802abca:	89a3      	ldrh	r3, [r4, #12]
 802abcc:	071a      	lsls	r2, r3, #28
 802abce:	d52e      	bpl.n	802ac2e <__swbuf_r+0x82>
 802abd0:	6923      	ldr	r3, [r4, #16]
 802abd2:	b363      	cbz	r3, 802ac2e <__swbuf_r+0x82>
 802abd4:	6923      	ldr	r3, [r4, #16]
 802abd6:	6820      	ldr	r0, [r4, #0]
 802abd8:	1ac0      	subs	r0, r0, r3
 802abda:	6963      	ldr	r3, [r4, #20]
 802abdc:	b2f6      	uxtb	r6, r6
 802abde:	4298      	cmp	r0, r3
 802abe0:	4637      	mov	r7, r6
 802abe2:	db04      	blt.n	802abee <__swbuf_r+0x42>
 802abe4:	4621      	mov	r1, r4
 802abe6:	4628      	mov	r0, r5
 802abe8:	f000 f936 	bl	802ae58 <_fflush_r>
 802abec:	bb28      	cbnz	r0, 802ac3a <__swbuf_r+0x8e>
 802abee:	68a3      	ldr	r3, [r4, #8]
 802abf0:	3b01      	subs	r3, #1
 802abf2:	60a3      	str	r3, [r4, #8]
 802abf4:	6823      	ldr	r3, [r4, #0]
 802abf6:	1c5a      	adds	r2, r3, #1
 802abf8:	6022      	str	r2, [r4, #0]
 802abfa:	701e      	strb	r6, [r3, #0]
 802abfc:	6963      	ldr	r3, [r4, #20]
 802abfe:	3001      	adds	r0, #1
 802ac00:	4298      	cmp	r0, r3
 802ac02:	d004      	beq.n	802ac0e <__swbuf_r+0x62>
 802ac04:	89a3      	ldrh	r3, [r4, #12]
 802ac06:	07db      	lsls	r3, r3, #31
 802ac08:	d519      	bpl.n	802ac3e <__swbuf_r+0x92>
 802ac0a:	2e0a      	cmp	r6, #10
 802ac0c:	d117      	bne.n	802ac3e <__swbuf_r+0x92>
 802ac0e:	4621      	mov	r1, r4
 802ac10:	4628      	mov	r0, r5
 802ac12:	f000 f921 	bl	802ae58 <_fflush_r>
 802ac16:	b190      	cbz	r0, 802ac3e <__swbuf_r+0x92>
 802ac18:	e00f      	b.n	802ac3a <__swbuf_r+0x8e>
 802ac1a:	4b0b      	ldr	r3, [pc, #44]	; (802ac48 <__swbuf_r+0x9c>)
 802ac1c:	429c      	cmp	r4, r3
 802ac1e:	d101      	bne.n	802ac24 <__swbuf_r+0x78>
 802ac20:	68ac      	ldr	r4, [r5, #8]
 802ac22:	e7d0      	b.n	802abc6 <__swbuf_r+0x1a>
 802ac24:	4b09      	ldr	r3, [pc, #36]	; (802ac4c <__swbuf_r+0xa0>)
 802ac26:	429c      	cmp	r4, r3
 802ac28:	bf08      	it	eq
 802ac2a:	68ec      	ldreq	r4, [r5, #12]
 802ac2c:	e7cb      	b.n	802abc6 <__swbuf_r+0x1a>
 802ac2e:	4621      	mov	r1, r4
 802ac30:	4628      	mov	r0, r5
 802ac32:	f000 f81b 	bl	802ac6c <__swsetup_r>
 802ac36:	2800      	cmp	r0, #0
 802ac38:	d0cc      	beq.n	802abd4 <__swbuf_r+0x28>
 802ac3a:	f04f 37ff 	mov.w	r7, #4294967295
 802ac3e:	4638      	mov	r0, r7
 802ac40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ac42:	bf00      	nop
 802ac44:	08032fb4 	.word	0x08032fb4
 802ac48:	08032fd4 	.word	0x08032fd4
 802ac4c:	08032f94 	.word	0x08032f94

0802ac50 <__ascii_wctomb>:
 802ac50:	b149      	cbz	r1, 802ac66 <__ascii_wctomb+0x16>
 802ac52:	2aff      	cmp	r2, #255	; 0xff
 802ac54:	bf85      	ittet	hi
 802ac56:	238a      	movhi	r3, #138	; 0x8a
 802ac58:	6003      	strhi	r3, [r0, #0]
 802ac5a:	700a      	strbls	r2, [r1, #0]
 802ac5c:	f04f 30ff 	movhi.w	r0, #4294967295
 802ac60:	bf98      	it	ls
 802ac62:	2001      	movls	r0, #1
 802ac64:	4770      	bx	lr
 802ac66:	4608      	mov	r0, r1
 802ac68:	4770      	bx	lr
	...

0802ac6c <__swsetup_r>:
 802ac6c:	4b32      	ldr	r3, [pc, #200]	; (802ad38 <__swsetup_r+0xcc>)
 802ac6e:	b570      	push	{r4, r5, r6, lr}
 802ac70:	681d      	ldr	r5, [r3, #0]
 802ac72:	4606      	mov	r6, r0
 802ac74:	460c      	mov	r4, r1
 802ac76:	b125      	cbz	r5, 802ac82 <__swsetup_r+0x16>
 802ac78:	69ab      	ldr	r3, [r5, #24]
 802ac7a:	b913      	cbnz	r3, 802ac82 <__swsetup_r+0x16>
 802ac7c:	4628      	mov	r0, r5
 802ac7e:	f000 f955 	bl	802af2c <__sinit>
 802ac82:	4b2e      	ldr	r3, [pc, #184]	; (802ad3c <__swsetup_r+0xd0>)
 802ac84:	429c      	cmp	r4, r3
 802ac86:	d10f      	bne.n	802aca8 <__swsetup_r+0x3c>
 802ac88:	686c      	ldr	r4, [r5, #4]
 802ac8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ac8e:	b29a      	uxth	r2, r3
 802ac90:	0715      	lsls	r5, r2, #28
 802ac92:	d42c      	bmi.n	802acee <__swsetup_r+0x82>
 802ac94:	06d0      	lsls	r0, r2, #27
 802ac96:	d411      	bmi.n	802acbc <__swsetup_r+0x50>
 802ac98:	2209      	movs	r2, #9
 802ac9a:	6032      	str	r2, [r6, #0]
 802ac9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802aca0:	81a3      	strh	r3, [r4, #12]
 802aca2:	f04f 30ff 	mov.w	r0, #4294967295
 802aca6:	bd70      	pop	{r4, r5, r6, pc}
 802aca8:	4b25      	ldr	r3, [pc, #148]	; (802ad40 <__swsetup_r+0xd4>)
 802acaa:	429c      	cmp	r4, r3
 802acac:	d101      	bne.n	802acb2 <__swsetup_r+0x46>
 802acae:	68ac      	ldr	r4, [r5, #8]
 802acb0:	e7eb      	b.n	802ac8a <__swsetup_r+0x1e>
 802acb2:	4b24      	ldr	r3, [pc, #144]	; (802ad44 <__swsetup_r+0xd8>)
 802acb4:	429c      	cmp	r4, r3
 802acb6:	bf08      	it	eq
 802acb8:	68ec      	ldreq	r4, [r5, #12]
 802acba:	e7e6      	b.n	802ac8a <__swsetup_r+0x1e>
 802acbc:	0751      	lsls	r1, r2, #29
 802acbe:	d512      	bpl.n	802ace6 <__swsetup_r+0x7a>
 802acc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802acc2:	b141      	cbz	r1, 802acd6 <__swsetup_r+0x6a>
 802acc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802acc8:	4299      	cmp	r1, r3
 802acca:	d002      	beq.n	802acd2 <__swsetup_r+0x66>
 802accc:	4630      	mov	r0, r6
 802acce:	f7ff fd97 	bl	802a800 <_free_r>
 802acd2:	2300      	movs	r3, #0
 802acd4:	6363      	str	r3, [r4, #52]	; 0x34
 802acd6:	89a3      	ldrh	r3, [r4, #12]
 802acd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802acdc:	81a3      	strh	r3, [r4, #12]
 802acde:	2300      	movs	r3, #0
 802ace0:	6063      	str	r3, [r4, #4]
 802ace2:	6923      	ldr	r3, [r4, #16]
 802ace4:	6023      	str	r3, [r4, #0]
 802ace6:	89a3      	ldrh	r3, [r4, #12]
 802ace8:	f043 0308 	orr.w	r3, r3, #8
 802acec:	81a3      	strh	r3, [r4, #12]
 802acee:	6923      	ldr	r3, [r4, #16]
 802acf0:	b94b      	cbnz	r3, 802ad06 <__swsetup_r+0x9a>
 802acf2:	89a3      	ldrh	r3, [r4, #12]
 802acf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802acf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802acfc:	d003      	beq.n	802ad06 <__swsetup_r+0x9a>
 802acfe:	4621      	mov	r1, r4
 802ad00:	4630      	mov	r0, r6
 802ad02:	f000 f9c1 	bl	802b088 <__smakebuf_r>
 802ad06:	89a2      	ldrh	r2, [r4, #12]
 802ad08:	f012 0301 	ands.w	r3, r2, #1
 802ad0c:	d00c      	beq.n	802ad28 <__swsetup_r+0xbc>
 802ad0e:	2300      	movs	r3, #0
 802ad10:	60a3      	str	r3, [r4, #8]
 802ad12:	6963      	ldr	r3, [r4, #20]
 802ad14:	425b      	negs	r3, r3
 802ad16:	61a3      	str	r3, [r4, #24]
 802ad18:	6923      	ldr	r3, [r4, #16]
 802ad1a:	b953      	cbnz	r3, 802ad32 <__swsetup_r+0xc6>
 802ad1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ad20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802ad24:	d1ba      	bne.n	802ac9c <__swsetup_r+0x30>
 802ad26:	bd70      	pop	{r4, r5, r6, pc}
 802ad28:	0792      	lsls	r2, r2, #30
 802ad2a:	bf58      	it	pl
 802ad2c:	6963      	ldrpl	r3, [r4, #20]
 802ad2e:	60a3      	str	r3, [r4, #8]
 802ad30:	e7f2      	b.n	802ad18 <__swsetup_r+0xac>
 802ad32:	2000      	movs	r0, #0
 802ad34:	e7f7      	b.n	802ad26 <__swsetup_r+0xba>
 802ad36:	bf00      	nop
 802ad38:	20000474 	.word	0x20000474
 802ad3c:	08032fb4 	.word	0x08032fb4
 802ad40:	08032fd4 	.word	0x08032fd4
 802ad44:	08032f94 	.word	0x08032f94

0802ad48 <__sflush_r>:
 802ad48:	898a      	ldrh	r2, [r1, #12]
 802ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad4e:	4605      	mov	r5, r0
 802ad50:	0710      	lsls	r0, r2, #28
 802ad52:	460c      	mov	r4, r1
 802ad54:	d45a      	bmi.n	802ae0c <__sflush_r+0xc4>
 802ad56:	684b      	ldr	r3, [r1, #4]
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	dc05      	bgt.n	802ad68 <__sflush_r+0x20>
 802ad5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ad5e:	2b00      	cmp	r3, #0
 802ad60:	dc02      	bgt.n	802ad68 <__sflush_r+0x20>
 802ad62:	2000      	movs	r0, #0
 802ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ad68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ad6a:	2e00      	cmp	r6, #0
 802ad6c:	d0f9      	beq.n	802ad62 <__sflush_r+0x1a>
 802ad6e:	2300      	movs	r3, #0
 802ad70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ad74:	682f      	ldr	r7, [r5, #0]
 802ad76:	602b      	str	r3, [r5, #0]
 802ad78:	d033      	beq.n	802ade2 <__sflush_r+0x9a>
 802ad7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ad7c:	89a3      	ldrh	r3, [r4, #12]
 802ad7e:	075a      	lsls	r2, r3, #29
 802ad80:	d505      	bpl.n	802ad8e <__sflush_r+0x46>
 802ad82:	6863      	ldr	r3, [r4, #4]
 802ad84:	1ac0      	subs	r0, r0, r3
 802ad86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ad88:	b10b      	cbz	r3, 802ad8e <__sflush_r+0x46>
 802ad8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ad8c:	1ac0      	subs	r0, r0, r3
 802ad8e:	2300      	movs	r3, #0
 802ad90:	4602      	mov	r2, r0
 802ad92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ad94:	6a21      	ldr	r1, [r4, #32]
 802ad96:	4628      	mov	r0, r5
 802ad98:	47b0      	blx	r6
 802ad9a:	1c43      	adds	r3, r0, #1
 802ad9c:	89a3      	ldrh	r3, [r4, #12]
 802ad9e:	d106      	bne.n	802adae <__sflush_r+0x66>
 802ada0:	6829      	ldr	r1, [r5, #0]
 802ada2:	291d      	cmp	r1, #29
 802ada4:	d84b      	bhi.n	802ae3e <__sflush_r+0xf6>
 802ada6:	4a2b      	ldr	r2, [pc, #172]	; (802ae54 <__sflush_r+0x10c>)
 802ada8:	40ca      	lsrs	r2, r1
 802adaa:	07d6      	lsls	r6, r2, #31
 802adac:	d547      	bpl.n	802ae3e <__sflush_r+0xf6>
 802adae:	2200      	movs	r2, #0
 802adb0:	6062      	str	r2, [r4, #4]
 802adb2:	04d9      	lsls	r1, r3, #19
 802adb4:	6922      	ldr	r2, [r4, #16]
 802adb6:	6022      	str	r2, [r4, #0]
 802adb8:	d504      	bpl.n	802adc4 <__sflush_r+0x7c>
 802adba:	1c42      	adds	r2, r0, #1
 802adbc:	d101      	bne.n	802adc2 <__sflush_r+0x7a>
 802adbe:	682b      	ldr	r3, [r5, #0]
 802adc0:	b903      	cbnz	r3, 802adc4 <__sflush_r+0x7c>
 802adc2:	6560      	str	r0, [r4, #84]	; 0x54
 802adc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802adc6:	602f      	str	r7, [r5, #0]
 802adc8:	2900      	cmp	r1, #0
 802adca:	d0ca      	beq.n	802ad62 <__sflush_r+0x1a>
 802adcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802add0:	4299      	cmp	r1, r3
 802add2:	d002      	beq.n	802adda <__sflush_r+0x92>
 802add4:	4628      	mov	r0, r5
 802add6:	f7ff fd13 	bl	802a800 <_free_r>
 802adda:	2000      	movs	r0, #0
 802addc:	6360      	str	r0, [r4, #52]	; 0x34
 802adde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ade2:	6a21      	ldr	r1, [r4, #32]
 802ade4:	2301      	movs	r3, #1
 802ade6:	4628      	mov	r0, r5
 802ade8:	47b0      	blx	r6
 802adea:	1c41      	adds	r1, r0, #1
 802adec:	d1c6      	bne.n	802ad7c <__sflush_r+0x34>
 802adee:	682b      	ldr	r3, [r5, #0]
 802adf0:	2b00      	cmp	r3, #0
 802adf2:	d0c3      	beq.n	802ad7c <__sflush_r+0x34>
 802adf4:	2b1d      	cmp	r3, #29
 802adf6:	d001      	beq.n	802adfc <__sflush_r+0xb4>
 802adf8:	2b16      	cmp	r3, #22
 802adfa:	d101      	bne.n	802ae00 <__sflush_r+0xb8>
 802adfc:	602f      	str	r7, [r5, #0]
 802adfe:	e7b0      	b.n	802ad62 <__sflush_r+0x1a>
 802ae00:	89a3      	ldrh	r3, [r4, #12]
 802ae02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ae06:	81a3      	strh	r3, [r4, #12]
 802ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae0c:	690f      	ldr	r7, [r1, #16]
 802ae0e:	2f00      	cmp	r7, #0
 802ae10:	d0a7      	beq.n	802ad62 <__sflush_r+0x1a>
 802ae12:	0793      	lsls	r3, r2, #30
 802ae14:	680e      	ldr	r6, [r1, #0]
 802ae16:	bf08      	it	eq
 802ae18:	694b      	ldreq	r3, [r1, #20]
 802ae1a:	600f      	str	r7, [r1, #0]
 802ae1c:	bf18      	it	ne
 802ae1e:	2300      	movne	r3, #0
 802ae20:	eba6 0807 	sub.w	r8, r6, r7
 802ae24:	608b      	str	r3, [r1, #8]
 802ae26:	f1b8 0f00 	cmp.w	r8, #0
 802ae2a:	dd9a      	ble.n	802ad62 <__sflush_r+0x1a>
 802ae2c:	4643      	mov	r3, r8
 802ae2e:	463a      	mov	r2, r7
 802ae30:	6a21      	ldr	r1, [r4, #32]
 802ae32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ae34:	4628      	mov	r0, r5
 802ae36:	47b0      	blx	r6
 802ae38:	2800      	cmp	r0, #0
 802ae3a:	dc07      	bgt.n	802ae4c <__sflush_r+0x104>
 802ae3c:	89a3      	ldrh	r3, [r4, #12]
 802ae3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ae42:	81a3      	strh	r3, [r4, #12]
 802ae44:	f04f 30ff 	mov.w	r0, #4294967295
 802ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae4c:	4407      	add	r7, r0
 802ae4e:	eba8 0800 	sub.w	r8, r8, r0
 802ae52:	e7e8      	b.n	802ae26 <__sflush_r+0xde>
 802ae54:	20400001 	.word	0x20400001

0802ae58 <_fflush_r>:
 802ae58:	b538      	push	{r3, r4, r5, lr}
 802ae5a:	690b      	ldr	r3, [r1, #16]
 802ae5c:	4605      	mov	r5, r0
 802ae5e:	460c      	mov	r4, r1
 802ae60:	b1db      	cbz	r3, 802ae9a <_fflush_r+0x42>
 802ae62:	b118      	cbz	r0, 802ae6c <_fflush_r+0x14>
 802ae64:	6983      	ldr	r3, [r0, #24]
 802ae66:	b90b      	cbnz	r3, 802ae6c <_fflush_r+0x14>
 802ae68:	f000 f860 	bl	802af2c <__sinit>
 802ae6c:	4b0c      	ldr	r3, [pc, #48]	; (802aea0 <_fflush_r+0x48>)
 802ae6e:	429c      	cmp	r4, r3
 802ae70:	d109      	bne.n	802ae86 <_fflush_r+0x2e>
 802ae72:	686c      	ldr	r4, [r5, #4]
 802ae74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ae78:	b17b      	cbz	r3, 802ae9a <_fflush_r+0x42>
 802ae7a:	4621      	mov	r1, r4
 802ae7c:	4628      	mov	r0, r5
 802ae7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ae82:	f7ff bf61 	b.w	802ad48 <__sflush_r>
 802ae86:	4b07      	ldr	r3, [pc, #28]	; (802aea4 <_fflush_r+0x4c>)
 802ae88:	429c      	cmp	r4, r3
 802ae8a:	d101      	bne.n	802ae90 <_fflush_r+0x38>
 802ae8c:	68ac      	ldr	r4, [r5, #8]
 802ae8e:	e7f1      	b.n	802ae74 <_fflush_r+0x1c>
 802ae90:	4b05      	ldr	r3, [pc, #20]	; (802aea8 <_fflush_r+0x50>)
 802ae92:	429c      	cmp	r4, r3
 802ae94:	bf08      	it	eq
 802ae96:	68ec      	ldreq	r4, [r5, #12]
 802ae98:	e7ec      	b.n	802ae74 <_fflush_r+0x1c>
 802ae9a:	2000      	movs	r0, #0
 802ae9c:	bd38      	pop	{r3, r4, r5, pc}
 802ae9e:	bf00      	nop
 802aea0:	08032fb4 	.word	0x08032fb4
 802aea4:	08032fd4 	.word	0x08032fd4
 802aea8:	08032f94 	.word	0x08032f94

0802aeac <_cleanup_r>:
 802aeac:	4901      	ldr	r1, [pc, #4]	; (802aeb4 <_cleanup_r+0x8>)
 802aeae:	f000 b8a9 	b.w	802b004 <_fwalk_reent>
 802aeb2:	bf00      	nop
 802aeb4:	0802ae59 	.word	0x0802ae59

0802aeb8 <std.isra.0>:
 802aeb8:	2300      	movs	r3, #0
 802aeba:	b510      	push	{r4, lr}
 802aebc:	4604      	mov	r4, r0
 802aebe:	6003      	str	r3, [r0, #0]
 802aec0:	6043      	str	r3, [r0, #4]
 802aec2:	6083      	str	r3, [r0, #8]
 802aec4:	8181      	strh	r1, [r0, #12]
 802aec6:	6643      	str	r3, [r0, #100]	; 0x64
 802aec8:	81c2      	strh	r2, [r0, #14]
 802aeca:	6103      	str	r3, [r0, #16]
 802aecc:	6143      	str	r3, [r0, #20]
 802aece:	6183      	str	r3, [r0, #24]
 802aed0:	4619      	mov	r1, r3
 802aed2:	2208      	movs	r2, #8
 802aed4:	305c      	adds	r0, #92	; 0x5c
 802aed6:	f7ff fc8a 	bl	802a7ee <memset>
 802aeda:	4b05      	ldr	r3, [pc, #20]	; (802aef0 <std.isra.0+0x38>)
 802aedc:	6263      	str	r3, [r4, #36]	; 0x24
 802aede:	4b05      	ldr	r3, [pc, #20]	; (802aef4 <std.isra.0+0x3c>)
 802aee0:	62a3      	str	r3, [r4, #40]	; 0x28
 802aee2:	4b05      	ldr	r3, [pc, #20]	; (802aef8 <std.isra.0+0x40>)
 802aee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802aee6:	4b05      	ldr	r3, [pc, #20]	; (802aefc <std.isra.0+0x44>)
 802aee8:	6224      	str	r4, [r4, #32]
 802aeea:	6323      	str	r3, [r4, #48]	; 0x30
 802aeec:	bd10      	pop	{r4, pc}
 802aeee:	bf00      	nop
 802aef0:	0802b6b9 	.word	0x0802b6b9
 802aef4:	0802b6db 	.word	0x0802b6db
 802aef8:	0802b713 	.word	0x0802b713
 802aefc:	0802b737 	.word	0x0802b737

0802af00 <__sfmoreglue>:
 802af00:	b570      	push	{r4, r5, r6, lr}
 802af02:	1e4a      	subs	r2, r1, #1
 802af04:	2568      	movs	r5, #104	; 0x68
 802af06:	4355      	muls	r5, r2
 802af08:	460e      	mov	r6, r1
 802af0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802af0e:	f7ff fcc5 	bl	802a89c <_malloc_r>
 802af12:	4604      	mov	r4, r0
 802af14:	b140      	cbz	r0, 802af28 <__sfmoreglue+0x28>
 802af16:	2100      	movs	r1, #0
 802af18:	e880 0042 	stmia.w	r0, {r1, r6}
 802af1c:	300c      	adds	r0, #12
 802af1e:	60a0      	str	r0, [r4, #8]
 802af20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802af24:	f7ff fc63 	bl	802a7ee <memset>
 802af28:	4620      	mov	r0, r4
 802af2a:	bd70      	pop	{r4, r5, r6, pc}

0802af2c <__sinit>:
 802af2c:	6983      	ldr	r3, [r0, #24]
 802af2e:	b510      	push	{r4, lr}
 802af30:	4604      	mov	r4, r0
 802af32:	bb33      	cbnz	r3, 802af82 <__sinit+0x56>
 802af34:	6483      	str	r3, [r0, #72]	; 0x48
 802af36:	64c3      	str	r3, [r0, #76]	; 0x4c
 802af38:	6503      	str	r3, [r0, #80]	; 0x50
 802af3a:	4b12      	ldr	r3, [pc, #72]	; (802af84 <__sinit+0x58>)
 802af3c:	4a12      	ldr	r2, [pc, #72]	; (802af88 <__sinit+0x5c>)
 802af3e:	681b      	ldr	r3, [r3, #0]
 802af40:	6282      	str	r2, [r0, #40]	; 0x28
 802af42:	4298      	cmp	r0, r3
 802af44:	bf04      	itt	eq
 802af46:	2301      	moveq	r3, #1
 802af48:	6183      	streq	r3, [r0, #24]
 802af4a:	f000 f81f 	bl	802af8c <__sfp>
 802af4e:	6060      	str	r0, [r4, #4]
 802af50:	4620      	mov	r0, r4
 802af52:	f000 f81b 	bl	802af8c <__sfp>
 802af56:	60a0      	str	r0, [r4, #8]
 802af58:	4620      	mov	r0, r4
 802af5a:	f000 f817 	bl	802af8c <__sfp>
 802af5e:	2200      	movs	r2, #0
 802af60:	60e0      	str	r0, [r4, #12]
 802af62:	2104      	movs	r1, #4
 802af64:	6860      	ldr	r0, [r4, #4]
 802af66:	f7ff ffa7 	bl	802aeb8 <std.isra.0>
 802af6a:	2201      	movs	r2, #1
 802af6c:	2109      	movs	r1, #9
 802af6e:	68a0      	ldr	r0, [r4, #8]
 802af70:	f7ff ffa2 	bl	802aeb8 <std.isra.0>
 802af74:	2202      	movs	r2, #2
 802af76:	2112      	movs	r1, #18
 802af78:	68e0      	ldr	r0, [r4, #12]
 802af7a:	f7ff ff9d 	bl	802aeb8 <std.isra.0>
 802af7e:	2301      	movs	r3, #1
 802af80:	61a3      	str	r3, [r4, #24]
 802af82:	bd10      	pop	{r4, pc}
 802af84:	08032e84 	.word	0x08032e84
 802af88:	0802aead 	.word	0x0802aead

0802af8c <__sfp>:
 802af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802af8e:	4b1c      	ldr	r3, [pc, #112]	; (802b000 <__sfp+0x74>)
 802af90:	681e      	ldr	r6, [r3, #0]
 802af92:	69b3      	ldr	r3, [r6, #24]
 802af94:	4607      	mov	r7, r0
 802af96:	b913      	cbnz	r3, 802af9e <__sfp+0x12>
 802af98:	4630      	mov	r0, r6
 802af9a:	f7ff ffc7 	bl	802af2c <__sinit>
 802af9e:	3648      	adds	r6, #72	; 0x48
 802afa0:	68b4      	ldr	r4, [r6, #8]
 802afa2:	6873      	ldr	r3, [r6, #4]
 802afa4:	3b01      	subs	r3, #1
 802afa6:	d503      	bpl.n	802afb0 <__sfp+0x24>
 802afa8:	6833      	ldr	r3, [r6, #0]
 802afaa:	b133      	cbz	r3, 802afba <__sfp+0x2e>
 802afac:	6836      	ldr	r6, [r6, #0]
 802afae:	e7f7      	b.n	802afa0 <__sfp+0x14>
 802afb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802afb4:	b16d      	cbz	r5, 802afd2 <__sfp+0x46>
 802afb6:	3468      	adds	r4, #104	; 0x68
 802afb8:	e7f4      	b.n	802afa4 <__sfp+0x18>
 802afba:	2104      	movs	r1, #4
 802afbc:	4638      	mov	r0, r7
 802afbe:	f7ff ff9f 	bl	802af00 <__sfmoreglue>
 802afc2:	6030      	str	r0, [r6, #0]
 802afc4:	2800      	cmp	r0, #0
 802afc6:	d1f1      	bne.n	802afac <__sfp+0x20>
 802afc8:	230c      	movs	r3, #12
 802afca:	603b      	str	r3, [r7, #0]
 802afcc:	4604      	mov	r4, r0
 802afce:	4620      	mov	r0, r4
 802afd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802afd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802afd6:	81e3      	strh	r3, [r4, #14]
 802afd8:	2301      	movs	r3, #1
 802afda:	81a3      	strh	r3, [r4, #12]
 802afdc:	6665      	str	r5, [r4, #100]	; 0x64
 802afde:	6025      	str	r5, [r4, #0]
 802afe0:	60a5      	str	r5, [r4, #8]
 802afe2:	6065      	str	r5, [r4, #4]
 802afe4:	6125      	str	r5, [r4, #16]
 802afe6:	6165      	str	r5, [r4, #20]
 802afe8:	61a5      	str	r5, [r4, #24]
 802afea:	2208      	movs	r2, #8
 802afec:	4629      	mov	r1, r5
 802afee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802aff2:	f7ff fbfc 	bl	802a7ee <memset>
 802aff6:	6365      	str	r5, [r4, #52]	; 0x34
 802aff8:	63a5      	str	r5, [r4, #56]	; 0x38
 802affa:	64a5      	str	r5, [r4, #72]	; 0x48
 802affc:	64e5      	str	r5, [r4, #76]	; 0x4c
 802affe:	e7e6      	b.n	802afce <__sfp+0x42>
 802b000:	08032e84 	.word	0x08032e84

0802b004 <_fwalk_reent>:
 802b004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b008:	4680      	mov	r8, r0
 802b00a:	4689      	mov	r9, r1
 802b00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b010:	2600      	movs	r6, #0
 802b012:	b914      	cbnz	r4, 802b01a <_fwalk_reent+0x16>
 802b014:	4630      	mov	r0, r6
 802b016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b01a:	68a5      	ldr	r5, [r4, #8]
 802b01c:	6867      	ldr	r7, [r4, #4]
 802b01e:	3f01      	subs	r7, #1
 802b020:	d501      	bpl.n	802b026 <_fwalk_reent+0x22>
 802b022:	6824      	ldr	r4, [r4, #0]
 802b024:	e7f5      	b.n	802b012 <_fwalk_reent+0xe>
 802b026:	89ab      	ldrh	r3, [r5, #12]
 802b028:	2b01      	cmp	r3, #1
 802b02a:	d907      	bls.n	802b03c <_fwalk_reent+0x38>
 802b02c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b030:	3301      	adds	r3, #1
 802b032:	d003      	beq.n	802b03c <_fwalk_reent+0x38>
 802b034:	4629      	mov	r1, r5
 802b036:	4640      	mov	r0, r8
 802b038:	47c8      	blx	r9
 802b03a:	4306      	orrs	r6, r0
 802b03c:	3568      	adds	r5, #104	; 0x68
 802b03e:	e7ee      	b.n	802b01e <_fwalk_reent+0x1a>

0802b040 <__swhatbuf_r>:
 802b040:	b570      	push	{r4, r5, r6, lr}
 802b042:	460e      	mov	r6, r1
 802b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b048:	2900      	cmp	r1, #0
 802b04a:	b090      	sub	sp, #64	; 0x40
 802b04c:	4614      	mov	r4, r2
 802b04e:	461d      	mov	r5, r3
 802b050:	da07      	bge.n	802b062 <__swhatbuf_r+0x22>
 802b052:	2300      	movs	r3, #0
 802b054:	602b      	str	r3, [r5, #0]
 802b056:	89b3      	ldrh	r3, [r6, #12]
 802b058:	061a      	lsls	r2, r3, #24
 802b05a:	d410      	bmi.n	802b07e <__swhatbuf_r+0x3e>
 802b05c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b060:	e00e      	b.n	802b080 <__swhatbuf_r+0x40>
 802b062:	aa01      	add	r2, sp, #4
 802b064:	f000 fb8e 	bl	802b784 <_fstat_r>
 802b068:	2800      	cmp	r0, #0
 802b06a:	dbf2      	blt.n	802b052 <__swhatbuf_r+0x12>
 802b06c:	9a02      	ldr	r2, [sp, #8]
 802b06e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b076:	425a      	negs	r2, r3
 802b078:	415a      	adcs	r2, r3
 802b07a:	602a      	str	r2, [r5, #0]
 802b07c:	e7ee      	b.n	802b05c <__swhatbuf_r+0x1c>
 802b07e:	2340      	movs	r3, #64	; 0x40
 802b080:	2000      	movs	r0, #0
 802b082:	6023      	str	r3, [r4, #0]
 802b084:	b010      	add	sp, #64	; 0x40
 802b086:	bd70      	pop	{r4, r5, r6, pc}

0802b088 <__smakebuf_r>:
 802b088:	898b      	ldrh	r3, [r1, #12]
 802b08a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b08c:	079d      	lsls	r5, r3, #30
 802b08e:	4606      	mov	r6, r0
 802b090:	460c      	mov	r4, r1
 802b092:	d507      	bpl.n	802b0a4 <__smakebuf_r+0x1c>
 802b094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b098:	6023      	str	r3, [r4, #0]
 802b09a:	6123      	str	r3, [r4, #16]
 802b09c:	2301      	movs	r3, #1
 802b09e:	6163      	str	r3, [r4, #20]
 802b0a0:	b002      	add	sp, #8
 802b0a2:	bd70      	pop	{r4, r5, r6, pc}
 802b0a4:	ab01      	add	r3, sp, #4
 802b0a6:	466a      	mov	r2, sp
 802b0a8:	f7ff ffca 	bl	802b040 <__swhatbuf_r>
 802b0ac:	9900      	ldr	r1, [sp, #0]
 802b0ae:	4605      	mov	r5, r0
 802b0b0:	4630      	mov	r0, r6
 802b0b2:	f7ff fbf3 	bl	802a89c <_malloc_r>
 802b0b6:	b948      	cbnz	r0, 802b0cc <__smakebuf_r+0x44>
 802b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0bc:	059a      	lsls	r2, r3, #22
 802b0be:	d4ef      	bmi.n	802b0a0 <__smakebuf_r+0x18>
 802b0c0:	f023 0303 	bic.w	r3, r3, #3
 802b0c4:	f043 0302 	orr.w	r3, r3, #2
 802b0c8:	81a3      	strh	r3, [r4, #12]
 802b0ca:	e7e3      	b.n	802b094 <__smakebuf_r+0xc>
 802b0cc:	4b0d      	ldr	r3, [pc, #52]	; (802b104 <__smakebuf_r+0x7c>)
 802b0ce:	62b3      	str	r3, [r6, #40]	; 0x28
 802b0d0:	89a3      	ldrh	r3, [r4, #12]
 802b0d2:	6020      	str	r0, [r4, #0]
 802b0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b0d8:	81a3      	strh	r3, [r4, #12]
 802b0da:	9b00      	ldr	r3, [sp, #0]
 802b0dc:	6163      	str	r3, [r4, #20]
 802b0de:	9b01      	ldr	r3, [sp, #4]
 802b0e0:	6120      	str	r0, [r4, #16]
 802b0e2:	b15b      	cbz	r3, 802b0fc <__smakebuf_r+0x74>
 802b0e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b0e8:	4630      	mov	r0, r6
 802b0ea:	f000 fb5d 	bl	802b7a8 <_isatty_r>
 802b0ee:	b128      	cbz	r0, 802b0fc <__smakebuf_r+0x74>
 802b0f0:	89a3      	ldrh	r3, [r4, #12]
 802b0f2:	f023 0303 	bic.w	r3, r3, #3
 802b0f6:	f043 0301 	orr.w	r3, r3, #1
 802b0fa:	81a3      	strh	r3, [r4, #12]
 802b0fc:	89a3      	ldrh	r3, [r4, #12]
 802b0fe:	431d      	orrs	r5, r3
 802b100:	81a5      	strh	r5, [r4, #12]
 802b102:	e7cd      	b.n	802b0a0 <__smakebuf_r+0x18>
 802b104:	0802aead 	.word	0x0802aead

0802b108 <__malloc_lock>:
 802b108:	4770      	bx	lr

0802b10a <__malloc_unlock>:
 802b10a:	4770      	bx	lr

0802b10c <__sfputc_r>:
 802b10c:	6893      	ldr	r3, [r2, #8]
 802b10e:	3b01      	subs	r3, #1
 802b110:	2b00      	cmp	r3, #0
 802b112:	b410      	push	{r4}
 802b114:	6093      	str	r3, [r2, #8]
 802b116:	da09      	bge.n	802b12c <__sfputc_r+0x20>
 802b118:	6994      	ldr	r4, [r2, #24]
 802b11a:	42a3      	cmp	r3, r4
 802b11c:	db02      	blt.n	802b124 <__sfputc_r+0x18>
 802b11e:	b2cb      	uxtb	r3, r1
 802b120:	2b0a      	cmp	r3, #10
 802b122:	d103      	bne.n	802b12c <__sfputc_r+0x20>
 802b124:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b128:	f7ff bd40 	b.w	802abac <__swbuf_r>
 802b12c:	6813      	ldr	r3, [r2, #0]
 802b12e:	1c58      	adds	r0, r3, #1
 802b130:	6010      	str	r0, [r2, #0]
 802b132:	7019      	strb	r1, [r3, #0]
 802b134:	b2c8      	uxtb	r0, r1
 802b136:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b13a:	4770      	bx	lr

0802b13c <__sfputs_r>:
 802b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b13e:	4606      	mov	r6, r0
 802b140:	460f      	mov	r7, r1
 802b142:	4614      	mov	r4, r2
 802b144:	18d5      	adds	r5, r2, r3
 802b146:	42ac      	cmp	r4, r5
 802b148:	d101      	bne.n	802b14e <__sfputs_r+0x12>
 802b14a:	2000      	movs	r0, #0
 802b14c:	e007      	b.n	802b15e <__sfputs_r+0x22>
 802b14e:	463a      	mov	r2, r7
 802b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b154:	4630      	mov	r0, r6
 802b156:	f7ff ffd9 	bl	802b10c <__sfputc_r>
 802b15a:	1c43      	adds	r3, r0, #1
 802b15c:	d1f3      	bne.n	802b146 <__sfputs_r+0xa>
 802b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802b160 <_vfiprintf_r>:
 802b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b164:	b09d      	sub	sp, #116	; 0x74
 802b166:	460c      	mov	r4, r1
 802b168:	4617      	mov	r7, r2
 802b16a:	9303      	str	r3, [sp, #12]
 802b16c:	4606      	mov	r6, r0
 802b16e:	b118      	cbz	r0, 802b178 <_vfiprintf_r+0x18>
 802b170:	6983      	ldr	r3, [r0, #24]
 802b172:	b90b      	cbnz	r3, 802b178 <_vfiprintf_r+0x18>
 802b174:	f7ff feda 	bl	802af2c <__sinit>
 802b178:	4b7c      	ldr	r3, [pc, #496]	; (802b36c <_vfiprintf_r+0x20c>)
 802b17a:	429c      	cmp	r4, r3
 802b17c:	d157      	bne.n	802b22e <_vfiprintf_r+0xce>
 802b17e:	6874      	ldr	r4, [r6, #4]
 802b180:	89a3      	ldrh	r3, [r4, #12]
 802b182:	0718      	lsls	r0, r3, #28
 802b184:	d55d      	bpl.n	802b242 <_vfiprintf_r+0xe2>
 802b186:	6923      	ldr	r3, [r4, #16]
 802b188:	2b00      	cmp	r3, #0
 802b18a:	d05a      	beq.n	802b242 <_vfiprintf_r+0xe2>
 802b18c:	2300      	movs	r3, #0
 802b18e:	9309      	str	r3, [sp, #36]	; 0x24
 802b190:	2320      	movs	r3, #32
 802b192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b196:	2330      	movs	r3, #48	; 0x30
 802b198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b19c:	f04f 0b01 	mov.w	fp, #1
 802b1a0:	46b8      	mov	r8, r7
 802b1a2:	4645      	mov	r5, r8
 802b1a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b1a8:	2b00      	cmp	r3, #0
 802b1aa:	d155      	bne.n	802b258 <_vfiprintf_r+0xf8>
 802b1ac:	ebb8 0a07 	subs.w	sl, r8, r7
 802b1b0:	d00b      	beq.n	802b1ca <_vfiprintf_r+0x6a>
 802b1b2:	4653      	mov	r3, sl
 802b1b4:	463a      	mov	r2, r7
 802b1b6:	4621      	mov	r1, r4
 802b1b8:	4630      	mov	r0, r6
 802b1ba:	f7ff ffbf 	bl	802b13c <__sfputs_r>
 802b1be:	3001      	adds	r0, #1
 802b1c0:	f000 80c4 	beq.w	802b34c <_vfiprintf_r+0x1ec>
 802b1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b1c6:	4453      	add	r3, sl
 802b1c8:	9309      	str	r3, [sp, #36]	; 0x24
 802b1ca:	f898 3000 	ldrb.w	r3, [r8]
 802b1ce:	2b00      	cmp	r3, #0
 802b1d0:	f000 80bc 	beq.w	802b34c <_vfiprintf_r+0x1ec>
 802b1d4:	2300      	movs	r3, #0
 802b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 802b1da:	9304      	str	r3, [sp, #16]
 802b1dc:	9307      	str	r3, [sp, #28]
 802b1de:	9205      	str	r2, [sp, #20]
 802b1e0:	9306      	str	r3, [sp, #24]
 802b1e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b1e6:	931a      	str	r3, [sp, #104]	; 0x68
 802b1e8:	2205      	movs	r2, #5
 802b1ea:	7829      	ldrb	r1, [r5, #0]
 802b1ec:	4860      	ldr	r0, [pc, #384]	; (802b370 <_vfiprintf_r+0x210>)
 802b1ee:	f7d5 f827 	bl	8000240 <memchr>
 802b1f2:	f105 0801 	add.w	r8, r5, #1
 802b1f6:	9b04      	ldr	r3, [sp, #16]
 802b1f8:	2800      	cmp	r0, #0
 802b1fa:	d131      	bne.n	802b260 <_vfiprintf_r+0x100>
 802b1fc:	06d9      	lsls	r1, r3, #27
 802b1fe:	bf44      	itt	mi
 802b200:	2220      	movmi	r2, #32
 802b202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b206:	071a      	lsls	r2, r3, #28
 802b208:	bf44      	itt	mi
 802b20a:	222b      	movmi	r2, #43	; 0x2b
 802b20c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b210:	782a      	ldrb	r2, [r5, #0]
 802b212:	2a2a      	cmp	r2, #42	; 0x2a
 802b214:	d02c      	beq.n	802b270 <_vfiprintf_r+0x110>
 802b216:	9a07      	ldr	r2, [sp, #28]
 802b218:	2100      	movs	r1, #0
 802b21a:	200a      	movs	r0, #10
 802b21c:	46a8      	mov	r8, r5
 802b21e:	3501      	adds	r5, #1
 802b220:	f898 3000 	ldrb.w	r3, [r8]
 802b224:	3b30      	subs	r3, #48	; 0x30
 802b226:	2b09      	cmp	r3, #9
 802b228:	d96d      	bls.n	802b306 <_vfiprintf_r+0x1a6>
 802b22a:	b371      	cbz	r1, 802b28a <_vfiprintf_r+0x12a>
 802b22c:	e026      	b.n	802b27c <_vfiprintf_r+0x11c>
 802b22e:	4b51      	ldr	r3, [pc, #324]	; (802b374 <_vfiprintf_r+0x214>)
 802b230:	429c      	cmp	r4, r3
 802b232:	d101      	bne.n	802b238 <_vfiprintf_r+0xd8>
 802b234:	68b4      	ldr	r4, [r6, #8]
 802b236:	e7a3      	b.n	802b180 <_vfiprintf_r+0x20>
 802b238:	4b4f      	ldr	r3, [pc, #316]	; (802b378 <_vfiprintf_r+0x218>)
 802b23a:	429c      	cmp	r4, r3
 802b23c:	bf08      	it	eq
 802b23e:	68f4      	ldreq	r4, [r6, #12]
 802b240:	e79e      	b.n	802b180 <_vfiprintf_r+0x20>
 802b242:	4621      	mov	r1, r4
 802b244:	4630      	mov	r0, r6
 802b246:	f7ff fd11 	bl	802ac6c <__swsetup_r>
 802b24a:	2800      	cmp	r0, #0
 802b24c:	d09e      	beq.n	802b18c <_vfiprintf_r+0x2c>
 802b24e:	f04f 30ff 	mov.w	r0, #4294967295
 802b252:	b01d      	add	sp, #116	; 0x74
 802b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b258:	2b25      	cmp	r3, #37	; 0x25
 802b25a:	d0a7      	beq.n	802b1ac <_vfiprintf_r+0x4c>
 802b25c:	46a8      	mov	r8, r5
 802b25e:	e7a0      	b.n	802b1a2 <_vfiprintf_r+0x42>
 802b260:	4a43      	ldr	r2, [pc, #268]	; (802b370 <_vfiprintf_r+0x210>)
 802b262:	1a80      	subs	r0, r0, r2
 802b264:	fa0b f000 	lsl.w	r0, fp, r0
 802b268:	4318      	orrs	r0, r3
 802b26a:	9004      	str	r0, [sp, #16]
 802b26c:	4645      	mov	r5, r8
 802b26e:	e7bb      	b.n	802b1e8 <_vfiprintf_r+0x88>
 802b270:	9a03      	ldr	r2, [sp, #12]
 802b272:	1d11      	adds	r1, r2, #4
 802b274:	6812      	ldr	r2, [r2, #0]
 802b276:	9103      	str	r1, [sp, #12]
 802b278:	2a00      	cmp	r2, #0
 802b27a:	db01      	blt.n	802b280 <_vfiprintf_r+0x120>
 802b27c:	9207      	str	r2, [sp, #28]
 802b27e:	e004      	b.n	802b28a <_vfiprintf_r+0x12a>
 802b280:	4252      	negs	r2, r2
 802b282:	f043 0302 	orr.w	r3, r3, #2
 802b286:	9207      	str	r2, [sp, #28]
 802b288:	9304      	str	r3, [sp, #16]
 802b28a:	f898 3000 	ldrb.w	r3, [r8]
 802b28e:	2b2e      	cmp	r3, #46	; 0x2e
 802b290:	d110      	bne.n	802b2b4 <_vfiprintf_r+0x154>
 802b292:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b296:	2b2a      	cmp	r3, #42	; 0x2a
 802b298:	f108 0101 	add.w	r1, r8, #1
 802b29c:	d137      	bne.n	802b30e <_vfiprintf_r+0x1ae>
 802b29e:	9b03      	ldr	r3, [sp, #12]
 802b2a0:	1d1a      	adds	r2, r3, #4
 802b2a2:	681b      	ldr	r3, [r3, #0]
 802b2a4:	9203      	str	r2, [sp, #12]
 802b2a6:	2b00      	cmp	r3, #0
 802b2a8:	bfb8      	it	lt
 802b2aa:	f04f 33ff 	movlt.w	r3, #4294967295
 802b2ae:	f108 0802 	add.w	r8, r8, #2
 802b2b2:	9305      	str	r3, [sp, #20]
 802b2b4:	4d31      	ldr	r5, [pc, #196]	; (802b37c <_vfiprintf_r+0x21c>)
 802b2b6:	f898 1000 	ldrb.w	r1, [r8]
 802b2ba:	2203      	movs	r2, #3
 802b2bc:	4628      	mov	r0, r5
 802b2be:	f7d4 ffbf 	bl	8000240 <memchr>
 802b2c2:	b140      	cbz	r0, 802b2d6 <_vfiprintf_r+0x176>
 802b2c4:	2340      	movs	r3, #64	; 0x40
 802b2c6:	1b40      	subs	r0, r0, r5
 802b2c8:	fa03 f000 	lsl.w	r0, r3, r0
 802b2cc:	9b04      	ldr	r3, [sp, #16]
 802b2ce:	4303      	orrs	r3, r0
 802b2d0:	9304      	str	r3, [sp, #16]
 802b2d2:	f108 0801 	add.w	r8, r8, #1
 802b2d6:	f898 1000 	ldrb.w	r1, [r8]
 802b2da:	4829      	ldr	r0, [pc, #164]	; (802b380 <_vfiprintf_r+0x220>)
 802b2dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b2e0:	2206      	movs	r2, #6
 802b2e2:	f108 0701 	add.w	r7, r8, #1
 802b2e6:	f7d4 ffab 	bl	8000240 <memchr>
 802b2ea:	2800      	cmp	r0, #0
 802b2ec:	d034      	beq.n	802b358 <_vfiprintf_r+0x1f8>
 802b2ee:	4b25      	ldr	r3, [pc, #148]	; (802b384 <_vfiprintf_r+0x224>)
 802b2f0:	bb03      	cbnz	r3, 802b334 <_vfiprintf_r+0x1d4>
 802b2f2:	9b03      	ldr	r3, [sp, #12]
 802b2f4:	3307      	adds	r3, #7
 802b2f6:	f023 0307 	bic.w	r3, r3, #7
 802b2fa:	3308      	adds	r3, #8
 802b2fc:	9303      	str	r3, [sp, #12]
 802b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b300:	444b      	add	r3, r9
 802b302:	9309      	str	r3, [sp, #36]	; 0x24
 802b304:	e74c      	b.n	802b1a0 <_vfiprintf_r+0x40>
 802b306:	fb00 3202 	mla	r2, r0, r2, r3
 802b30a:	2101      	movs	r1, #1
 802b30c:	e786      	b.n	802b21c <_vfiprintf_r+0xbc>
 802b30e:	2300      	movs	r3, #0
 802b310:	9305      	str	r3, [sp, #20]
 802b312:	4618      	mov	r0, r3
 802b314:	250a      	movs	r5, #10
 802b316:	4688      	mov	r8, r1
 802b318:	3101      	adds	r1, #1
 802b31a:	f898 2000 	ldrb.w	r2, [r8]
 802b31e:	3a30      	subs	r2, #48	; 0x30
 802b320:	2a09      	cmp	r2, #9
 802b322:	d903      	bls.n	802b32c <_vfiprintf_r+0x1cc>
 802b324:	2b00      	cmp	r3, #0
 802b326:	d0c5      	beq.n	802b2b4 <_vfiprintf_r+0x154>
 802b328:	9005      	str	r0, [sp, #20]
 802b32a:	e7c3      	b.n	802b2b4 <_vfiprintf_r+0x154>
 802b32c:	fb05 2000 	mla	r0, r5, r0, r2
 802b330:	2301      	movs	r3, #1
 802b332:	e7f0      	b.n	802b316 <_vfiprintf_r+0x1b6>
 802b334:	ab03      	add	r3, sp, #12
 802b336:	9300      	str	r3, [sp, #0]
 802b338:	4622      	mov	r2, r4
 802b33a:	4b13      	ldr	r3, [pc, #76]	; (802b388 <_vfiprintf_r+0x228>)
 802b33c:	a904      	add	r1, sp, #16
 802b33e:	4630      	mov	r0, r6
 802b340:	f3af 8000 	nop.w
 802b344:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b348:	4681      	mov	r9, r0
 802b34a:	d1d8      	bne.n	802b2fe <_vfiprintf_r+0x19e>
 802b34c:	89a3      	ldrh	r3, [r4, #12]
 802b34e:	065b      	lsls	r3, r3, #25
 802b350:	f53f af7d 	bmi.w	802b24e <_vfiprintf_r+0xee>
 802b354:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b356:	e77c      	b.n	802b252 <_vfiprintf_r+0xf2>
 802b358:	ab03      	add	r3, sp, #12
 802b35a:	9300      	str	r3, [sp, #0]
 802b35c:	4622      	mov	r2, r4
 802b35e:	4b0a      	ldr	r3, [pc, #40]	; (802b388 <_vfiprintf_r+0x228>)
 802b360:	a904      	add	r1, sp, #16
 802b362:	4630      	mov	r0, r6
 802b364:	f000 f888 	bl	802b478 <_printf_i>
 802b368:	e7ec      	b.n	802b344 <_vfiprintf_r+0x1e4>
 802b36a:	bf00      	nop
 802b36c:	08032fb4 	.word	0x08032fb4
 802b370:	08032ff4 	.word	0x08032ff4
 802b374:	08032fd4 	.word	0x08032fd4
 802b378:	08032f94 	.word	0x08032f94
 802b37c:	08032ffa 	.word	0x08032ffa
 802b380:	08032ffe 	.word	0x08032ffe
 802b384:	00000000 	.word	0x00000000
 802b388:	0802b13d 	.word	0x0802b13d

0802b38c <_printf_common>:
 802b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b390:	4691      	mov	r9, r2
 802b392:	461f      	mov	r7, r3
 802b394:	688a      	ldr	r2, [r1, #8]
 802b396:	690b      	ldr	r3, [r1, #16]
 802b398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b39c:	4293      	cmp	r3, r2
 802b39e:	bfb8      	it	lt
 802b3a0:	4613      	movlt	r3, r2
 802b3a2:	f8c9 3000 	str.w	r3, [r9]
 802b3a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b3aa:	4606      	mov	r6, r0
 802b3ac:	460c      	mov	r4, r1
 802b3ae:	b112      	cbz	r2, 802b3b6 <_printf_common+0x2a>
 802b3b0:	3301      	adds	r3, #1
 802b3b2:	f8c9 3000 	str.w	r3, [r9]
 802b3b6:	6823      	ldr	r3, [r4, #0]
 802b3b8:	0699      	lsls	r1, r3, #26
 802b3ba:	bf42      	ittt	mi
 802b3bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b3c0:	3302      	addmi	r3, #2
 802b3c2:	f8c9 3000 	strmi.w	r3, [r9]
 802b3c6:	6825      	ldr	r5, [r4, #0]
 802b3c8:	f015 0506 	ands.w	r5, r5, #6
 802b3cc:	d107      	bne.n	802b3de <_printf_common+0x52>
 802b3ce:	f104 0a19 	add.w	sl, r4, #25
 802b3d2:	68e3      	ldr	r3, [r4, #12]
 802b3d4:	f8d9 2000 	ldr.w	r2, [r9]
 802b3d8:	1a9b      	subs	r3, r3, r2
 802b3da:	429d      	cmp	r5, r3
 802b3dc:	db29      	blt.n	802b432 <_printf_common+0xa6>
 802b3de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b3e2:	6822      	ldr	r2, [r4, #0]
 802b3e4:	3300      	adds	r3, #0
 802b3e6:	bf18      	it	ne
 802b3e8:	2301      	movne	r3, #1
 802b3ea:	0692      	lsls	r2, r2, #26
 802b3ec:	d42e      	bmi.n	802b44c <_printf_common+0xc0>
 802b3ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b3f2:	4639      	mov	r1, r7
 802b3f4:	4630      	mov	r0, r6
 802b3f6:	47c0      	blx	r8
 802b3f8:	3001      	adds	r0, #1
 802b3fa:	d021      	beq.n	802b440 <_printf_common+0xb4>
 802b3fc:	6823      	ldr	r3, [r4, #0]
 802b3fe:	68e5      	ldr	r5, [r4, #12]
 802b400:	f8d9 2000 	ldr.w	r2, [r9]
 802b404:	f003 0306 	and.w	r3, r3, #6
 802b408:	2b04      	cmp	r3, #4
 802b40a:	bf08      	it	eq
 802b40c:	1aad      	subeq	r5, r5, r2
 802b40e:	68a3      	ldr	r3, [r4, #8]
 802b410:	6922      	ldr	r2, [r4, #16]
 802b412:	bf0c      	ite	eq
 802b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b418:	2500      	movne	r5, #0
 802b41a:	4293      	cmp	r3, r2
 802b41c:	bfc4      	itt	gt
 802b41e:	1a9b      	subgt	r3, r3, r2
 802b420:	18ed      	addgt	r5, r5, r3
 802b422:	f04f 0900 	mov.w	r9, #0
 802b426:	341a      	adds	r4, #26
 802b428:	454d      	cmp	r5, r9
 802b42a:	d11b      	bne.n	802b464 <_printf_common+0xd8>
 802b42c:	2000      	movs	r0, #0
 802b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b432:	2301      	movs	r3, #1
 802b434:	4652      	mov	r2, sl
 802b436:	4639      	mov	r1, r7
 802b438:	4630      	mov	r0, r6
 802b43a:	47c0      	blx	r8
 802b43c:	3001      	adds	r0, #1
 802b43e:	d103      	bne.n	802b448 <_printf_common+0xbc>
 802b440:	f04f 30ff 	mov.w	r0, #4294967295
 802b444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b448:	3501      	adds	r5, #1
 802b44a:	e7c2      	b.n	802b3d2 <_printf_common+0x46>
 802b44c:	18e1      	adds	r1, r4, r3
 802b44e:	1c5a      	adds	r2, r3, #1
 802b450:	2030      	movs	r0, #48	; 0x30
 802b452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b456:	4422      	add	r2, r4
 802b458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b45c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b460:	3302      	adds	r3, #2
 802b462:	e7c4      	b.n	802b3ee <_printf_common+0x62>
 802b464:	2301      	movs	r3, #1
 802b466:	4622      	mov	r2, r4
 802b468:	4639      	mov	r1, r7
 802b46a:	4630      	mov	r0, r6
 802b46c:	47c0      	blx	r8
 802b46e:	3001      	adds	r0, #1
 802b470:	d0e6      	beq.n	802b440 <_printf_common+0xb4>
 802b472:	f109 0901 	add.w	r9, r9, #1
 802b476:	e7d7      	b.n	802b428 <_printf_common+0x9c>

0802b478 <_printf_i>:
 802b478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b47c:	4617      	mov	r7, r2
 802b47e:	7e0a      	ldrb	r2, [r1, #24]
 802b480:	b085      	sub	sp, #20
 802b482:	2a6e      	cmp	r2, #110	; 0x6e
 802b484:	4698      	mov	r8, r3
 802b486:	4606      	mov	r6, r0
 802b488:	460c      	mov	r4, r1
 802b48a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b48c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 802b490:	f000 80bc 	beq.w	802b60c <_printf_i+0x194>
 802b494:	d81a      	bhi.n	802b4cc <_printf_i+0x54>
 802b496:	2a63      	cmp	r2, #99	; 0x63
 802b498:	d02e      	beq.n	802b4f8 <_printf_i+0x80>
 802b49a:	d80a      	bhi.n	802b4b2 <_printf_i+0x3a>
 802b49c:	2a00      	cmp	r2, #0
 802b49e:	f000 80c8 	beq.w	802b632 <_printf_i+0x1ba>
 802b4a2:	2a58      	cmp	r2, #88	; 0x58
 802b4a4:	f000 808a 	beq.w	802b5bc <_printf_i+0x144>
 802b4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b4ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 802b4b0:	e02a      	b.n	802b508 <_printf_i+0x90>
 802b4b2:	2a64      	cmp	r2, #100	; 0x64
 802b4b4:	d001      	beq.n	802b4ba <_printf_i+0x42>
 802b4b6:	2a69      	cmp	r2, #105	; 0x69
 802b4b8:	d1f6      	bne.n	802b4a8 <_printf_i+0x30>
 802b4ba:	6821      	ldr	r1, [r4, #0]
 802b4bc:	681a      	ldr	r2, [r3, #0]
 802b4be:	f011 0f80 	tst.w	r1, #128	; 0x80
 802b4c2:	d023      	beq.n	802b50c <_printf_i+0x94>
 802b4c4:	1d11      	adds	r1, r2, #4
 802b4c6:	6019      	str	r1, [r3, #0]
 802b4c8:	6813      	ldr	r3, [r2, #0]
 802b4ca:	e027      	b.n	802b51c <_printf_i+0xa4>
 802b4cc:	2a73      	cmp	r2, #115	; 0x73
 802b4ce:	f000 80b4 	beq.w	802b63a <_printf_i+0x1c2>
 802b4d2:	d808      	bhi.n	802b4e6 <_printf_i+0x6e>
 802b4d4:	2a6f      	cmp	r2, #111	; 0x6f
 802b4d6:	d02a      	beq.n	802b52e <_printf_i+0xb6>
 802b4d8:	2a70      	cmp	r2, #112	; 0x70
 802b4da:	d1e5      	bne.n	802b4a8 <_printf_i+0x30>
 802b4dc:	680a      	ldr	r2, [r1, #0]
 802b4de:	f042 0220 	orr.w	r2, r2, #32
 802b4e2:	600a      	str	r2, [r1, #0]
 802b4e4:	e003      	b.n	802b4ee <_printf_i+0x76>
 802b4e6:	2a75      	cmp	r2, #117	; 0x75
 802b4e8:	d021      	beq.n	802b52e <_printf_i+0xb6>
 802b4ea:	2a78      	cmp	r2, #120	; 0x78
 802b4ec:	d1dc      	bne.n	802b4a8 <_printf_i+0x30>
 802b4ee:	2278      	movs	r2, #120	; 0x78
 802b4f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 802b4f4:	496e      	ldr	r1, [pc, #440]	; (802b6b0 <_printf_i+0x238>)
 802b4f6:	e064      	b.n	802b5c2 <_printf_i+0x14a>
 802b4f8:	681a      	ldr	r2, [r3, #0]
 802b4fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 802b4fe:	1d11      	adds	r1, r2, #4
 802b500:	6019      	str	r1, [r3, #0]
 802b502:	6813      	ldr	r3, [r2, #0]
 802b504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b508:	2301      	movs	r3, #1
 802b50a:	e0a3      	b.n	802b654 <_printf_i+0x1dc>
 802b50c:	f011 0f40 	tst.w	r1, #64	; 0x40
 802b510:	f102 0104 	add.w	r1, r2, #4
 802b514:	6019      	str	r1, [r3, #0]
 802b516:	d0d7      	beq.n	802b4c8 <_printf_i+0x50>
 802b518:	f9b2 3000 	ldrsh.w	r3, [r2]
 802b51c:	2b00      	cmp	r3, #0
 802b51e:	da03      	bge.n	802b528 <_printf_i+0xb0>
 802b520:	222d      	movs	r2, #45	; 0x2d
 802b522:	425b      	negs	r3, r3
 802b524:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802b528:	4962      	ldr	r1, [pc, #392]	; (802b6b4 <_printf_i+0x23c>)
 802b52a:	220a      	movs	r2, #10
 802b52c:	e017      	b.n	802b55e <_printf_i+0xe6>
 802b52e:	6820      	ldr	r0, [r4, #0]
 802b530:	6819      	ldr	r1, [r3, #0]
 802b532:	f010 0f80 	tst.w	r0, #128	; 0x80
 802b536:	d003      	beq.n	802b540 <_printf_i+0xc8>
 802b538:	1d08      	adds	r0, r1, #4
 802b53a:	6018      	str	r0, [r3, #0]
 802b53c:	680b      	ldr	r3, [r1, #0]
 802b53e:	e006      	b.n	802b54e <_printf_i+0xd6>
 802b540:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b544:	f101 0004 	add.w	r0, r1, #4
 802b548:	6018      	str	r0, [r3, #0]
 802b54a:	d0f7      	beq.n	802b53c <_printf_i+0xc4>
 802b54c:	880b      	ldrh	r3, [r1, #0]
 802b54e:	4959      	ldr	r1, [pc, #356]	; (802b6b4 <_printf_i+0x23c>)
 802b550:	2a6f      	cmp	r2, #111	; 0x6f
 802b552:	bf14      	ite	ne
 802b554:	220a      	movne	r2, #10
 802b556:	2208      	moveq	r2, #8
 802b558:	2000      	movs	r0, #0
 802b55a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 802b55e:	6865      	ldr	r5, [r4, #4]
 802b560:	60a5      	str	r5, [r4, #8]
 802b562:	2d00      	cmp	r5, #0
 802b564:	f2c0 809c 	blt.w	802b6a0 <_printf_i+0x228>
 802b568:	6820      	ldr	r0, [r4, #0]
 802b56a:	f020 0004 	bic.w	r0, r0, #4
 802b56e:	6020      	str	r0, [r4, #0]
 802b570:	2b00      	cmp	r3, #0
 802b572:	d13f      	bne.n	802b5f4 <_printf_i+0x17c>
 802b574:	2d00      	cmp	r5, #0
 802b576:	f040 8095 	bne.w	802b6a4 <_printf_i+0x22c>
 802b57a:	4675      	mov	r5, lr
 802b57c:	2a08      	cmp	r2, #8
 802b57e:	d10b      	bne.n	802b598 <_printf_i+0x120>
 802b580:	6823      	ldr	r3, [r4, #0]
 802b582:	07da      	lsls	r2, r3, #31
 802b584:	d508      	bpl.n	802b598 <_printf_i+0x120>
 802b586:	6923      	ldr	r3, [r4, #16]
 802b588:	6862      	ldr	r2, [r4, #4]
 802b58a:	429a      	cmp	r2, r3
 802b58c:	bfde      	ittt	le
 802b58e:	2330      	movle	r3, #48	; 0x30
 802b590:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b594:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b598:	ebae 0305 	sub.w	r3, lr, r5
 802b59c:	6123      	str	r3, [r4, #16]
 802b59e:	f8cd 8000 	str.w	r8, [sp]
 802b5a2:	463b      	mov	r3, r7
 802b5a4:	aa03      	add	r2, sp, #12
 802b5a6:	4621      	mov	r1, r4
 802b5a8:	4630      	mov	r0, r6
 802b5aa:	f7ff feef 	bl	802b38c <_printf_common>
 802b5ae:	3001      	adds	r0, #1
 802b5b0:	d155      	bne.n	802b65e <_printf_i+0x1e6>
 802b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 802b5b6:	b005      	add	sp, #20
 802b5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b5bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 802b5c0:	493c      	ldr	r1, [pc, #240]	; (802b6b4 <_printf_i+0x23c>)
 802b5c2:	6822      	ldr	r2, [r4, #0]
 802b5c4:	6818      	ldr	r0, [r3, #0]
 802b5c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 802b5ca:	f100 0504 	add.w	r5, r0, #4
 802b5ce:	601d      	str	r5, [r3, #0]
 802b5d0:	d001      	beq.n	802b5d6 <_printf_i+0x15e>
 802b5d2:	6803      	ldr	r3, [r0, #0]
 802b5d4:	e002      	b.n	802b5dc <_printf_i+0x164>
 802b5d6:	0655      	lsls	r5, r2, #25
 802b5d8:	d5fb      	bpl.n	802b5d2 <_printf_i+0x15a>
 802b5da:	8803      	ldrh	r3, [r0, #0]
 802b5dc:	07d0      	lsls	r0, r2, #31
 802b5de:	bf44      	itt	mi
 802b5e0:	f042 0220 	orrmi.w	r2, r2, #32
 802b5e4:	6022      	strmi	r2, [r4, #0]
 802b5e6:	b91b      	cbnz	r3, 802b5f0 <_printf_i+0x178>
 802b5e8:	6822      	ldr	r2, [r4, #0]
 802b5ea:	f022 0220 	bic.w	r2, r2, #32
 802b5ee:	6022      	str	r2, [r4, #0]
 802b5f0:	2210      	movs	r2, #16
 802b5f2:	e7b1      	b.n	802b558 <_printf_i+0xe0>
 802b5f4:	4675      	mov	r5, lr
 802b5f6:	fbb3 f0f2 	udiv	r0, r3, r2
 802b5fa:	fb02 3310 	mls	r3, r2, r0, r3
 802b5fe:	5ccb      	ldrb	r3, [r1, r3]
 802b600:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802b604:	4603      	mov	r3, r0
 802b606:	2800      	cmp	r0, #0
 802b608:	d1f5      	bne.n	802b5f6 <_printf_i+0x17e>
 802b60a:	e7b7      	b.n	802b57c <_printf_i+0x104>
 802b60c:	6808      	ldr	r0, [r1, #0]
 802b60e:	681a      	ldr	r2, [r3, #0]
 802b610:	6949      	ldr	r1, [r1, #20]
 802b612:	f010 0f80 	tst.w	r0, #128	; 0x80
 802b616:	d004      	beq.n	802b622 <_printf_i+0x1aa>
 802b618:	1d10      	adds	r0, r2, #4
 802b61a:	6018      	str	r0, [r3, #0]
 802b61c:	6813      	ldr	r3, [r2, #0]
 802b61e:	6019      	str	r1, [r3, #0]
 802b620:	e007      	b.n	802b632 <_printf_i+0x1ba>
 802b622:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b626:	f102 0004 	add.w	r0, r2, #4
 802b62a:	6018      	str	r0, [r3, #0]
 802b62c:	6813      	ldr	r3, [r2, #0]
 802b62e:	d0f6      	beq.n	802b61e <_printf_i+0x1a6>
 802b630:	8019      	strh	r1, [r3, #0]
 802b632:	2300      	movs	r3, #0
 802b634:	6123      	str	r3, [r4, #16]
 802b636:	4675      	mov	r5, lr
 802b638:	e7b1      	b.n	802b59e <_printf_i+0x126>
 802b63a:	681a      	ldr	r2, [r3, #0]
 802b63c:	1d11      	adds	r1, r2, #4
 802b63e:	6019      	str	r1, [r3, #0]
 802b640:	6815      	ldr	r5, [r2, #0]
 802b642:	6862      	ldr	r2, [r4, #4]
 802b644:	2100      	movs	r1, #0
 802b646:	4628      	mov	r0, r5
 802b648:	f7d4 fdfa 	bl	8000240 <memchr>
 802b64c:	b108      	cbz	r0, 802b652 <_printf_i+0x1da>
 802b64e:	1b40      	subs	r0, r0, r5
 802b650:	6060      	str	r0, [r4, #4]
 802b652:	6863      	ldr	r3, [r4, #4]
 802b654:	6123      	str	r3, [r4, #16]
 802b656:	2300      	movs	r3, #0
 802b658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b65c:	e79f      	b.n	802b59e <_printf_i+0x126>
 802b65e:	6923      	ldr	r3, [r4, #16]
 802b660:	462a      	mov	r2, r5
 802b662:	4639      	mov	r1, r7
 802b664:	4630      	mov	r0, r6
 802b666:	47c0      	blx	r8
 802b668:	3001      	adds	r0, #1
 802b66a:	d0a2      	beq.n	802b5b2 <_printf_i+0x13a>
 802b66c:	6823      	ldr	r3, [r4, #0]
 802b66e:	079b      	lsls	r3, r3, #30
 802b670:	d507      	bpl.n	802b682 <_printf_i+0x20a>
 802b672:	2500      	movs	r5, #0
 802b674:	f104 0919 	add.w	r9, r4, #25
 802b678:	68e3      	ldr	r3, [r4, #12]
 802b67a:	9a03      	ldr	r2, [sp, #12]
 802b67c:	1a9b      	subs	r3, r3, r2
 802b67e:	429d      	cmp	r5, r3
 802b680:	db05      	blt.n	802b68e <_printf_i+0x216>
 802b682:	68e0      	ldr	r0, [r4, #12]
 802b684:	9b03      	ldr	r3, [sp, #12]
 802b686:	4298      	cmp	r0, r3
 802b688:	bfb8      	it	lt
 802b68a:	4618      	movlt	r0, r3
 802b68c:	e793      	b.n	802b5b6 <_printf_i+0x13e>
 802b68e:	2301      	movs	r3, #1
 802b690:	464a      	mov	r2, r9
 802b692:	4639      	mov	r1, r7
 802b694:	4630      	mov	r0, r6
 802b696:	47c0      	blx	r8
 802b698:	3001      	adds	r0, #1
 802b69a:	d08a      	beq.n	802b5b2 <_printf_i+0x13a>
 802b69c:	3501      	adds	r5, #1
 802b69e:	e7eb      	b.n	802b678 <_printf_i+0x200>
 802b6a0:	2b00      	cmp	r3, #0
 802b6a2:	d1a7      	bne.n	802b5f4 <_printf_i+0x17c>
 802b6a4:	780b      	ldrb	r3, [r1, #0]
 802b6a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b6aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b6ae:	e765      	b.n	802b57c <_printf_i+0x104>
 802b6b0:	08033016 	.word	0x08033016
 802b6b4:	08033005 	.word	0x08033005

0802b6b8 <__sread>:
 802b6b8:	b510      	push	{r4, lr}
 802b6ba:	460c      	mov	r4, r1
 802b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b6c0:	f000 f894 	bl	802b7ec <_read_r>
 802b6c4:	2800      	cmp	r0, #0
 802b6c6:	bfab      	itete	ge
 802b6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b6ca:	89a3      	ldrhlt	r3, [r4, #12]
 802b6cc:	181b      	addge	r3, r3, r0
 802b6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b6d2:	bfac      	ite	ge
 802b6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 802b6d6:	81a3      	strhlt	r3, [r4, #12]
 802b6d8:	bd10      	pop	{r4, pc}

0802b6da <__swrite>:
 802b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b6de:	461f      	mov	r7, r3
 802b6e0:	898b      	ldrh	r3, [r1, #12]
 802b6e2:	05db      	lsls	r3, r3, #23
 802b6e4:	4605      	mov	r5, r0
 802b6e6:	460c      	mov	r4, r1
 802b6e8:	4616      	mov	r6, r2
 802b6ea:	d505      	bpl.n	802b6f8 <__swrite+0x1e>
 802b6ec:	2302      	movs	r3, #2
 802b6ee:	2200      	movs	r2, #0
 802b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b6f4:	f000 f868 	bl	802b7c8 <_lseek_r>
 802b6f8:	89a3      	ldrh	r3, [r4, #12]
 802b6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b702:	81a3      	strh	r3, [r4, #12]
 802b704:	4632      	mov	r2, r6
 802b706:	463b      	mov	r3, r7
 802b708:	4628      	mov	r0, r5
 802b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b70e:	f000 b817 	b.w	802b740 <_write_r>

0802b712 <__sseek>:
 802b712:	b510      	push	{r4, lr}
 802b714:	460c      	mov	r4, r1
 802b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b71a:	f000 f855 	bl	802b7c8 <_lseek_r>
 802b71e:	1c43      	adds	r3, r0, #1
 802b720:	89a3      	ldrh	r3, [r4, #12]
 802b722:	bf15      	itete	ne
 802b724:	6560      	strne	r0, [r4, #84]	; 0x54
 802b726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b72e:	81a3      	strheq	r3, [r4, #12]
 802b730:	bf18      	it	ne
 802b732:	81a3      	strhne	r3, [r4, #12]
 802b734:	bd10      	pop	{r4, pc}

0802b736 <__sclose>:
 802b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b73a:	f000 b813 	b.w	802b764 <_close_r>
	...

0802b740 <_write_r>:
 802b740:	b538      	push	{r3, r4, r5, lr}
 802b742:	4c07      	ldr	r4, [pc, #28]	; (802b760 <_write_r+0x20>)
 802b744:	4605      	mov	r5, r0
 802b746:	4608      	mov	r0, r1
 802b748:	4611      	mov	r1, r2
 802b74a:	2200      	movs	r2, #0
 802b74c:	6022      	str	r2, [r4, #0]
 802b74e:	461a      	mov	r2, r3
 802b750:	f7e7 ffda 	bl	8013708 <_write>
 802b754:	1c43      	adds	r3, r0, #1
 802b756:	d102      	bne.n	802b75e <_write_r+0x1e>
 802b758:	6823      	ldr	r3, [r4, #0]
 802b75a:	b103      	cbz	r3, 802b75e <_write_r+0x1e>
 802b75c:	602b      	str	r3, [r5, #0]
 802b75e:	bd38      	pop	{r3, r4, r5, pc}
 802b760:	2002cd28 	.word	0x2002cd28

0802b764 <_close_r>:
 802b764:	b538      	push	{r3, r4, r5, lr}
 802b766:	4c06      	ldr	r4, [pc, #24]	; (802b780 <_close_r+0x1c>)
 802b768:	2300      	movs	r3, #0
 802b76a:	4605      	mov	r5, r0
 802b76c:	4608      	mov	r0, r1
 802b76e:	6023      	str	r3, [r4, #0]
 802b770:	f000 f84e 	bl	802b810 <_close>
 802b774:	1c43      	adds	r3, r0, #1
 802b776:	d102      	bne.n	802b77e <_close_r+0x1a>
 802b778:	6823      	ldr	r3, [r4, #0]
 802b77a:	b103      	cbz	r3, 802b77e <_close_r+0x1a>
 802b77c:	602b      	str	r3, [r5, #0]
 802b77e:	bd38      	pop	{r3, r4, r5, pc}
 802b780:	2002cd28 	.word	0x2002cd28

0802b784 <_fstat_r>:
 802b784:	b538      	push	{r3, r4, r5, lr}
 802b786:	4c07      	ldr	r4, [pc, #28]	; (802b7a4 <_fstat_r+0x20>)
 802b788:	2300      	movs	r3, #0
 802b78a:	4605      	mov	r5, r0
 802b78c:	4608      	mov	r0, r1
 802b78e:	4611      	mov	r1, r2
 802b790:	6023      	str	r3, [r4, #0]
 802b792:	f000 f845 	bl	802b820 <_fstat>
 802b796:	1c43      	adds	r3, r0, #1
 802b798:	d102      	bne.n	802b7a0 <_fstat_r+0x1c>
 802b79a:	6823      	ldr	r3, [r4, #0]
 802b79c:	b103      	cbz	r3, 802b7a0 <_fstat_r+0x1c>
 802b79e:	602b      	str	r3, [r5, #0]
 802b7a0:	bd38      	pop	{r3, r4, r5, pc}
 802b7a2:	bf00      	nop
 802b7a4:	2002cd28 	.word	0x2002cd28

0802b7a8 <_isatty_r>:
 802b7a8:	b538      	push	{r3, r4, r5, lr}
 802b7aa:	4c06      	ldr	r4, [pc, #24]	; (802b7c4 <_isatty_r+0x1c>)
 802b7ac:	2300      	movs	r3, #0
 802b7ae:	4605      	mov	r5, r0
 802b7b0:	4608      	mov	r0, r1
 802b7b2:	6023      	str	r3, [r4, #0]
 802b7b4:	f000 f83c 	bl	802b830 <_isatty>
 802b7b8:	1c43      	adds	r3, r0, #1
 802b7ba:	d102      	bne.n	802b7c2 <_isatty_r+0x1a>
 802b7bc:	6823      	ldr	r3, [r4, #0]
 802b7be:	b103      	cbz	r3, 802b7c2 <_isatty_r+0x1a>
 802b7c0:	602b      	str	r3, [r5, #0]
 802b7c2:	bd38      	pop	{r3, r4, r5, pc}
 802b7c4:	2002cd28 	.word	0x2002cd28

0802b7c8 <_lseek_r>:
 802b7c8:	b538      	push	{r3, r4, r5, lr}
 802b7ca:	4c07      	ldr	r4, [pc, #28]	; (802b7e8 <_lseek_r+0x20>)
 802b7cc:	4605      	mov	r5, r0
 802b7ce:	4608      	mov	r0, r1
 802b7d0:	4611      	mov	r1, r2
 802b7d2:	2200      	movs	r2, #0
 802b7d4:	6022      	str	r2, [r4, #0]
 802b7d6:	461a      	mov	r2, r3
 802b7d8:	f000 f832 	bl	802b840 <_lseek>
 802b7dc:	1c43      	adds	r3, r0, #1
 802b7de:	d102      	bne.n	802b7e6 <_lseek_r+0x1e>
 802b7e0:	6823      	ldr	r3, [r4, #0]
 802b7e2:	b103      	cbz	r3, 802b7e6 <_lseek_r+0x1e>
 802b7e4:	602b      	str	r3, [r5, #0]
 802b7e6:	bd38      	pop	{r3, r4, r5, pc}
 802b7e8:	2002cd28 	.word	0x2002cd28

0802b7ec <_read_r>:
 802b7ec:	b538      	push	{r3, r4, r5, lr}
 802b7ee:	4c07      	ldr	r4, [pc, #28]	; (802b80c <_read_r+0x20>)
 802b7f0:	4605      	mov	r5, r0
 802b7f2:	4608      	mov	r0, r1
 802b7f4:	4611      	mov	r1, r2
 802b7f6:	2200      	movs	r2, #0
 802b7f8:	6022      	str	r2, [r4, #0]
 802b7fa:	461a      	mov	r2, r3
 802b7fc:	f7e7 ffb8 	bl	8013770 <_read>
 802b800:	1c43      	adds	r3, r0, #1
 802b802:	d102      	bne.n	802b80a <_read_r+0x1e>
 802b804:	6823      	ldr	r3, [r4, #0]
 802b806:	b103      	cbz	r3, 802b80a <_read_r+0x1e>
 802b808:	602b      	str	r3, [r5, #0]
 802b80a:	bd38      	pop	{r3, r4, r5, pc}
 802b80c:	2002cd28 	.word	0x2002cd28

0802b810 <_close>:
 802b810:	4b02      	ldr	r3, [pc, #8]	; (802b81c <_close+0xc>)
 802b812:	2258      	movs	r2, #88	; 0x58
 802b814:	601a      	str	r2, [r3, #0]
 802b816:	f04f 30ff 	mov.w	r0, #4294967295
 802b81a:	4770      	bx	lr
 802b81c:	2002cd28 	.word	0x2002cd28

0802b820 <_fstat>:
 802b820:	4b02      	ldr	r3, [pc, #8]	; (802b82c <_fstat+0xc>)
 802b822:	2258      	movs	r2, #88	; 0x58
 802b824:	601a      	str	r2, [r3, #0]
 802b826:	f04f 30ff 	mov.w	r0, #4294967295
 802b82a:	4770      	bx	lr
 802b82c:	2002cd28 	.word	0x2002cd28

0802b830 <_isatty>:
 802b830:	4b02      	ldr	r3, [pc, #8]	; (802b83c <_isatty+0xc>)
 802b832:	2258      	movs	r2, #88	; 0x58
 802b834:	601a      	str	r2, [r3, #0]
 802b836:	2000      	movs	r0, #0
 802b838:	4770      	bx	lr
 802b83a:	bf00      	nop
 802b83c:	2002cd28 	.word	0x2002cd28

0802b840 <_lseek>:
 802b840:	4b02      	ldr	r3, [pc, #8]	; (802b84c <_lseek+0xc>)
 802b842:	2258      	movs	r2, #88	; 0x58
 802b844:	601a      	str	r2, [r3, #0]
 802b846:	f04f 30ff 	mov.w	r0, #4294967295
 802b84a:	4770      	bx	lr
 802b84c:	2002cd28 	.word	0x2002cd28

0802b850 <_sbrk>:
 802b850:	4b04      	ldr	r3, [pc, #16]	; (802b864 <_sbrk+0x14>)
 802b852:	6819      	ldr	r1, [r3, #0]
 802b854:	4602      	mov	r2, r0
 802b856:	b909      	cbnz	r1, 802b85c <_sbrk+0xc>
 802b858:	4903      	ldr	r1, [pc, #12]	; (802b868 <_sbrk+0x18>)
 802b85a:	6019      	str	r1, [r3, #0]
 802b85c:	6818      	ldr	r0, [r3, #0]
 802b85e:	4402      	add	r2, r0
 802b860:	601a      	str	r2, [r3, #0]
 802b862:	4770      	bx	lr
 802b864:	2002b308 	.word	0x2002b308
 802b868:	2002cd2c 	.word	0x2002cd2c

0802b86c <_init>:
 802b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b86e:	bf00      	nop
 802b870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b872:	bc08      	pop	{r3}
 802b874:	469e      	mov	lr, r3
 802b876:	4770      	bx	lr

0802b878 <_fini>:
 802b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b87a:	bf00      	nop
 802b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b87e:	bc08      	pop	{r3}
 802b880:	469e      	mov	lr, r3
 802b882:	4770      	bx	lr
